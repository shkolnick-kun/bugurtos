
bin/Debug/vsmp-sandbox.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00003a08  00003a9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003a08  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000200  0080010c  0080010c  00003aa8  2**0
                  ALLOC
  3 .stab         00008d24  00000000  00000000  00003aa8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003f7d  00000000  00000000  0000c7cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
       4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      1c:	0c 94 00 07 	jmp	0xe00	; 0xe00 <__vector_7>
      20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      30:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      48:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      54:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000068 <syscall_routine>:
      68:	46 19 98 19 b2 19 cc 19 e6 19 07 1a 4e 1a 60 1a     F...........N.`.
      78:	6e 1a 7e 1a 8e 1a a0 1a b0 1a c0 1a d7 1a f1 1a     n.~.............
      88:	0b 1b 1b 1b 31 1b 4b 1b 65 1b 75 1b 85 1b a4 1b     ....1.K.e.u.....

00000098 <__ctors_end>:
      98:	11 24       	eor	r1, r1
      9a:	1f be       	out	0x3f, r1	; 63
      9c:	cf ef       	ldi	r28, 0xFF	; 255
      9e:	d8 e0       	ldi	r29, 0x08	; 8
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
      a4:	11 e0       	ldi	r17, 0x01	; 1
      a6:	a0 e0       	ldi	r26, 0x00	; 0
      a8:	b1 e0       	ldi	r27, 0x01	; 1
      aa:	e8 e0       	ldi	r30, 0x08	; 8
      ac:	fa e3       	ldi	r31, 0x3A	; 58
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <.do_copy_data_start>

000000b0 <.do_copy_data_loop>:
      b0:	05 90       	lpm	r0, Z+
      b2:	0d 92       	st	X+, r0

000000b4 <.do_copy_data_start>:
      b4:	ac 30       	cpi	r26, 0x0C	; 12
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <.do_copy_data_loop>

000000ba <__do_clear_bss>:
      ba:	13 e0       	ldi	r17, 0x03	; 3
      bc:	ac e0       	ldi	r26, 0x0C	; 12
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	ac 30       	cpi	r26, 0x0C	; 12
      c6:	b1 07       	cpc	r27, r17
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	0e 94 64 1c 	call	0x38c8	; 0x38c8 <main>
      ce:	0c 94 02 1d 	jmp	0x3a04	; 0x3a04 <_exit>

000000d2 <__bad_interrupt>:
      d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <bugurt_save_context>:
      d6:	2f 92       	push	r2
      d8:	2f b6       	in	r2, 0x3f	; 63
      da:	2f 92       	push	r2
      dc:	3f 92       	push	r3
      de:	4f 92       	push	r4
      e0:	5f 92       	push	r5
      e2:	6f 92       	push	r6
      e4:	7f 92       	push	r7
      e6:	8f 92       	push	r8
      e8:	9f 92       	push	r9
      ea:	af 92       	push	r10
      ec:	bf 92       	push	r11
      ee:	cf 92       	push	r12
      f0:	df 92       	push	r13
      f2:	ef 92       	push	r14
      f4:	ff 92       	push	r15
      f6:	0f 93       	push	r16
      f8:	1f 93       	push	r17
      fa:	2f 93       	push	r18
      fc:	3f 93       	push	r19
      fe:	4f 93       	push	r20
     100:	5f 93       	push	r21
     102:	6f 93       	push	r22
     104:	7f 93       	push	r23
     106:	8f 93       	push	r24
     108:	9f 93       	push	r25
     10a:	af 93       	push	r26
     10c:	bf 93       	push	r27
     10e:	cf 93       	push	r28
     110:	df 93       	push	r29
     112:	ef 93       	push	r30
     114:	ff 93       	push	r31
     116:	ed b7       	in	r30, 0x3d	; 61
     118:	fe b7       	in	r31, 0x3e	; 62
     11a:	21 a1       	ldd	r18, Z+33	; 0x21
     11c:	30 a1       	ldd	r19, Z+32	; 0x20
     11e:	01 a2       	std	Z+33, r0	; 0x21
     120:	10 a2       	std	Z+32, r1	; 0x20
     122:	11 24       	eor	r1, r1
     124:	8d b7       	in	r24, 0x3d	; 61
     126:	9e b7       	in	r25, 0x3e	; 62
     128:	2f 93       	push	r18
     12a:	3f 93       	push	r19
     12c:	08 95       	ret

0000012e <bugurt_pop_context>:
     12e:	3f 91       	pop	r19
     130:	2f 91       	pop	r18
     132:	04 c0       	rjmp	.+8      	; 0x13c <_bugurt_pop_context>

00000134 <bugurt_restore_context>:
     134:	3f 91       	pop	r19
     136:	2f 91       	pop	r18
     138:	9e bf       	out	0x3e, r25	; 62
     13a:	8d bf       	out	0x3d, r24	; 61

0000013c <_bugurt_pop_context>:
     13c:	fe b7       	in	r31, 0x3e	; 62
     13e:	ed b7       	in	r30, 0x3d	; 61
     140:	10 a0       	ldd	r1, Z+32	; 0x20
     142:	01 a0       	ldd	r0, Z+33	; 0x21
     144:	30 a3       	std	Z+32, r19	; 0x20
     146:	21 a3       	std	Z+33, r18	; 0x21
     148:	ff 91       	pop	r31
     14a:	ef 91       	pop	r30
     14c:	df 91       	pop	r29
     14e:	cf 91       	pop	r28
     150:	bf 91       	pop	r27
     152:	af 91       	pop	r26
     154:	9f 91       	pop	r25
     156:	8f 91       	pop	r24
     158:	7f 91       	pop	r23
     15a:	6f 91       	pop	r22
     15c:	5f 91       	pop	r21
     15e:	4f 91       	pop	r20
     160:	3f 91       	pop	r19
     162:	2f 91       	pop	r18
     164:	1f 91       	pop	r17
     166:	0f 91       	pop	r16
     168:	ff 90       	pop	r15
     16a:	ef 90       	pop	r14
     16c:	df 90       	pop	r13
     16e:	cf 90       	pop	r12
     170:	bf 90       	pop	r11
     172:	af 90       	pop	r10
     174:	9f 90       	pop	r9
     176:	8f 90       	pop	r8
     178:	7f 90       	pop	r7
     17a:	6f 90       	pop	r6
     17c:	5f 90       	pop	r5
     17e:	4f 90       	pop	r4
     180:	3f 90       	pop	r3
     182:	2f 90       	pop	r2
     184:	2f be       	out	0x3f, r2	; 63
     186:	2f 90       	pop	r2
     188:	08 95       	ret

0000018a <bugurt_set_stack_pointer>:
     18a:	1f 90       	pop	r1
     18c:	0f 90       	pop	r0
     18e:	9e bf       	out	0x3e, r25	; 62
     190:	8d bf       	out	0x3d, r24	; 61
     192:	0f 92       	push	r0
     194:	1f 92       	push	r1
     196:	11 24       	eor	r1, r1
     198:	08 95       	ret

0000019a <bugurt_push_pointer>:
     19a:	1f 90       	pop	r1
     19c:	0f 90       	pop	r0
     19e:	8f 93       	push	r24
     1a0:	9f 93       	push	r25
     1a2:	0f 92       	push	r0
     1a4:	1f 92       	push	r1
     1a6:	11 24       	eor	r1, r1
     1a8:	08 95       	ret

000001aa <bugurt_reverse_byte_order>:
     1aa:	08 2e       	mov	r0, r24
     1ac:	89 2f       	mov	r24, r25
     1ae:	90 2d       	mov	r25, r0
     1b0:	08 95       	ret

000001b2 <disable_interrupts>:
    bugurt_set_stack_pointer( saved_vm_sp[current_vm] );
    sei();
}
///!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
void disable_interrupts(void)
{
     1b2:	df 93       	push	r29
     1b4:	cf 93       	push	r28
     1b6:	cd b7       	in	r28, 0x3d	; 61
     1b8:	de b7       	in	r29, 0x3e	; 62
    cli();
     1ba:	f8 94       	cli
    vm_state[current_vm].int_enabled = (bool_t)0;
     1bc:	80 91 1c 01 	lds	r24, 0x011C
     1c0:	28 2f       	mov	r18, r24
     1c2:	30 e0       	ldi	r19, 0x00	; 0
     1c4:	c9 01       	movw	r24, r18
     1c6:	88 0f       	add	r24, r24
     1c8:	99 1f       	adc	r25, r25
     1ca:	88 0f       	add	r24, r24
     1cc:	99 1f       	adc	r25, r25
     1ce:	82 0f       	add	r24, r18
     1d0:	93 1f       	adc	r25, r19
     1d2:	fc 01       	movw	r30, r24
     1d4:	e1 5e       	subi	r30, 0xE1	; 225
     1d6:	fe 4f       	sbci	r31, 0xFE	; 254
     1d8:	10 82       	st	Z, r1
    sei();
     1da:	78 94       	sei
}
     1dc:	cf 91       	pop	r28
     1de:	df 91       	pop	r29
     1e0:	08 95       	ret

000001e2 <enable_interrupts>:

void enable_interrupts(void)
{
     1e2:	df 93       	push	r29
     1e4:	cf 93       	push	r28
     1e6:	cd b7       	in	r28, 0x3d	; 61
     1e8:	de b7       	in	r29, 0x3e	; 62
    cli();
     1ea:	f8 94       	cli
    vm_state[current_vm].int_enabled = (bool_t)1;
     1ec:	80 91 1c 01 	lds	r24, 0x011C
     1f0:	28 2f       	mov	r18, r24
     1f2:	30 e0       	ldi	r19, 0x00	; 0
     1f4:	c9 01       	movw	r24, r18
     1f6:	88 0f       	add	r24, r24
     1f8:	99 1f       	adc	r25, r25
     1fa:	88 0f       	add	r24, r24
     1fc:	99 1f       	adc	r25, r25
     1fe:	82 0f       	add	r24, r18
     200:	93 1f       	adc	r25, r19
     202:	fc 01       	movw	r30, r24
     204:	e1 5e       	subi	r30, 0xE1	; 225
     206:	fe 4f       	sbci	r31, 0xFE	; 254
     208:	81 e0       	ldi	r24, 0x01	; 1
     20a:	80 83       	st	Z, r24
    sei();
     20c:	78 94       	sei
}
     20e:	cf 91       	pop	r28
     210:	df 91       	pop	r29
     212:	08 95       	ret

00000214 <current_proc>:

proc_t * current_proc(void)
{
     214:	df 93       	push	r29
     216:	cf 93       	push	r28
     218:	00 d0       	rcall	.+0      	; 0x21a <current_proc+0x6>
     21a:	cd b7       	in	r28, 0x3d	; 61
     21c:	de b7       	in	r29, 0x3e	; 62
    proc_t * ret;
    cli();
     21e:	f8 94       	cli
    ret = kernel.sched[current_vm].current_proc;
     220:	80 91 1c 01 	lds	r24, 0x011C
     224:	28 2f       	mov	r18, r24
     226:	30 e0       	ldi	r19, 0x00	; 0
     228:	8b e2       	ldi	r24, 0x2B	; 43
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	ac 01       	movw	r20, r24
     22e:	24 9f       	mul	r18, r20
     230:	c0 01       	movw	r24, r0
     232:	25 9f       	mul	r18, r21
     234:	90 0d       	add	r25, r0
     236:	34 9f       	mul	r19, r20
     238:	90 0d       	add	r25, r0
     23a:	11 24       	eor	r1, r1
     23c:	fc 01       	movw	r30, r24
     23e:	e5 5b       	subi	r30, 0xB5	; 181
     240:	fd 4f       	sbci	r31, 0xFD	; 253
     242:	80 81       	ld	r24, Z
     244:	91 81       	ldd	r25, Z+1	; 0x01
     246:	9a 83       	std	Y+2, r25	; 0x02
     248:	89 83       	std	Y+1, r24	; 0x01
    sei();
     24a:	78 94       	sei
    return ret;
     24c:	89 81       	ldd	r24, Y+1	; 0x01
     24e:	9a 81       	ldd	r25, Y+2	; 0x02
}
     250:	0f 90       	pop	r0
     252:	0f 90       	pop	r0
     254:	cf 91       	pop	r28
     256:	df 91       	pop	r29
     258:	08 95       	ret

0000025a <current_core>:

core_id_t current_core(void)
{
     25a:	df 93       	push	r29
     25c:	cf 93       	push	r28
     25e:	0f 92       	push	r0
     260:	cd b7       	in	r28, 0x3d	; 61
     262:	de b7       	in	r29, 0x3e	; 62
    core_id_t ret;
    cli();
     264:	f8 94       	cli
    ret = current_vm;
     266:	80 91 1c 01 	lds	r24, 0x011C
     26a:	89 83       	std	Y+1, r24	; 0x01
    sei();
     26c:	78 94       	sei
    return ret;
     26e:	89 81       	ldd	r24, Y+1	; 0x01
}
     270:	0f 90       	pop	r0
     272:	cf 91       	pop	r28
     274:	df 91       	pop	r29
     276:	08 95       	ret

00000278 <spin_init>:

void spin_init( lock_t * lock )
{
     278:	df 93       	push	r29
     27a:	cf 93       	push	r28
     27c:	00 d0       	rcall	.+0      	; 0x27e <spin_init+0x6>
     27e:	cd b7       	in	r28, 0x3d	; 61
     280:	de b7       	in	r29, 0x3e	; 62
     282:	9a 83       	std	Y+2, r25	; 0x02
     284:	89 83       	std	Y+1, r24	; 0x01
    cli();
     286:	f8 94       	cli
    *lock = (lock_t)0;
     288:	e9 81       	ldd	r30, Y+1	; 0x01
     28a:	fa 81       	ldd	r31, Y+2	; 0x02
     28c:	10 82       	st	Z, r1
    sei();
     28e:	78 94       	sei
}
     290:	0f 90       	pop	r0
     292:	0f 90       	pop	r0
     294:	cf 91       	pop	r28
     296:	df 91       	pop	r29
     298:	08 95       	ret

0000029a <spin_lock>:

void spin_lock( lock_t * lock )
{
     29a:	df 93       	push	r29
     29c:	cf 93       	push	r28
     29e:	00 d0       	rcall	.+0      	; 0x2a0 <spin_lock+0x6>
     2a0:	cd b7       	in	r28, 0x3d	; 61
     2a2:	de b7       	in	r29, 0x3e	; 62
     2a4:	9a 83       	std	Y+2, r25	; 0x02
     2a6:	89 83       	std	Y+1, r24	; 0x01
    while(1)
    {
        cli();
     2a8:	f8 94       	cli
        if(!*lock)
     2aa:	e9 81       	ldd	r30, Y+1	; 0x01
     2ac:	fa 81       	ldd	r31, Y+2	; 0x02
     2ae:	80 81       	ld	r24, Z
     2b0:	88 23       	and	r24, r24
     2b2:	51 f4       	brne	.+20     	; 0x2c8 <spin_lock+0x2e>
        {
            *lock = (lock_t)1;
     2b4:	e9 81       	ldd	r30, Y+1	; 0x01
     2b6:	fa 81       	ldd	r31, Y+2	; 0x02
     2b8:	81 e0       	ldi	r24, 0x01	; 1
     2ba:	80 83       	st	Z, r24
            sei();
     2bc:	78 94       	sei
            return;
        }
        sei();
    }
}
     2be:	0f 90       	pop	r0
     2c0:	0f 90       	pop	r0
     2c2:	cf 91       	pop	r28
     2c4:	df 91       	pop	r29
     2c6:	08 95       	ret
        {
            *lock = (lock_t)1;
            sei();
            return;
        }
        sei();
     2c8:	78 94       	sei
     2ca:	ee cf       	rjmp	.-36     	; 0x2a8 <spin_lock+0xe>

000002cc <spin_unlock>:
    }
}
void spin_unlock(lock_t * lock)
{
     2cc:	df 93       	push	r29
     2ce:	cf 93       	push	r28
     2d0:	00 d0       	rcall	.+0      	; 0x2d2 <spin_unlock+0x6>
     2d2:	0f 92       	push	r0
     2d4:	cd b7       	in	r28, 0x3d	; 61
     2d6:	de b7       	in	r29, 0x3e	; 62
     2d8:	9b 83       	std	Y+3, r25	; 0x03
     2da:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char i;
    for(i = 0; i< 1000; i++);// delay, all other vms must spin for a while
     2dc:	19 82       	std	Y+1, r1	; 0x01
     2de:	89 81       	ldd	r24, Y+1	; 0x01
     2e0:	8f 5f       	subi	r24, 0xFF	; 255
     2e2:	89 83       	std	Y+1, r24	; 0x01
     2e4:	fc cf       	rjmp	.-8      	; 0x2de <spin_unlock+0x12>

000002e6 <stat_init>:
    *lock = (lock_t)0;
    sei();
}
// stat_t is simply prcess counter here!
void stat_init( stat_t * stat )
{
     2e6:	df 93       	push	r29
     2e8:	cf 93       	push	r28
     2ea:	00 d0       	rcall	.+0      	; 0x2ec <stat_init+0x6>
     2ec:	cd b7       	in	r28, 0x3d	; 61
     2ee:	de b7       	in	r29, 0x3e	; 62
     2f0:	9a 83       	std	Y+2, r25	; 0x02
     2f2:	89 83       	std	Y+1, r24	; 0x01
    *stat = 0; // no lad on a system
     2f4:	e9 81       	ldd	r30, Y+1	; 0x01
     2f6:	fa 81       	ldd	r31, Y+2	; 0x02
     2f8:	10 82       	st	Z, r1
}
     2fa:	0f 90       	pop	r0
     2fc:	0f 90       	pop	r0
     2fe:	cf 91       	pop	r28
     300:	df 91       	pop	r29
     302:	08 95       	ret

00000304 <stat_dec>:
void stat_dec( proc_t * proc, stat_t * stat )
{
     304:	df 93       	push	r29
     306:	cf 93       	push	r28
     308:	00 d0       	rcall	.+0      	; 0x30a <stat_dec+0x6>
     30a:	00 d0       	rcall	.+0      	; 0x30c <stat_dec+0x8>
     30c:	cd b7       	in	r28, 0x3d	; 61
     30e:	de b7       	in	r29, 0x3e	; 62
     310:	9a 83       	std	Y+2, r25	; 0x02
     312:	89 83       	std	Y+1, r24	; 0x01
     314:	7c 83       	std	Y+4, r23	; 0x04
     316:	6b 83       	std	Y+3, r22	; 0x03
    *stat--;
     318:	8b 81       	ldd	r24, Y+3	; 0x03
     31a:	9c 81       	ldd	r25, Y+4	; 0x04
     31c:	01 97       	sbiw	r24, 0x01	; 1
     31e:	9c 83       	std	Y+4, r25	; 0x04
     320:	8b 83       	std	Y+3, r24	; 0x03
}
     322:	0f 90       	pop	r0
     324:	0f 90       	pop	r0
     326:	0f 90       	pop	r0
     328:	0f 90       	pop	r0
     32a:	cf 91       	pop	r28
     32c:	df 91       	pop	r29
     32e:	08 95       	ret

00000330 <stat_inc>:
void stat_inc( proc_t * proc, stat_t * stat )
{
     330:	df 93       	push	r29
     332:	cf 93       	push	r28
     334:	00 d0       	rcall	.+0      	; 0x336 <stat_inc+0x6>
     336:	00 d0       	rcall	.+0      	; 0x338 <stat_inc+0x8>
     338:	cd b7       	in	r28, 0x3d	; 61
     33a:	de b7       	in	r29, 0x3e	; 62
     33c:	9a 83       	std	Y+2, r25	; 0x02
     33e:	89 83       	std	Y+1, r24	; 0x01
     340:	7c 83       	std	Y+4, r23	; 0x04
     342:	6b 83       	std	Y+3, r22	; 0x03
    *stat++;
     344:	8b 81       	ldd	r24, Y+3	; 0x03
     346:	9c 81       	ldd	r25, Y+4	; 0x04
     348:	01 96       	adiw	r24, 0x01	; 1
     34a:	9c 83       	std	Y+4, r25	; 0x04
     34c:	8b 83       	std	Y+3, r24	; 0x03
}
     34e:	0f 90       	pop	r0
     350:	0f 90       	pop	r0
     352:	0f 90       	pop	r0
     354:	0f 90       	pop	r0
     356:	cf 91       	pop	r28
     358:	df 91       	pop	r29
     35a:	08 95       	ret

0000035c <stat_merge>:
void stat_merge( stat_t *src_stat, stat_t * dst_stat  )
{
     35c:	df 93       	push	r29
     35e:	cf 93       	push	r28
     360:	00 d0       	rcall	.+0      	; 0x362 <stat_merge+0x6>
     362:	00 d0       	rcall	.+0      	; 0x364 <stat_merge+0x8>
     364:	cd b7       	in	r28, 0x3d	; 61
     366:	de b7       	in	r29, 0x3e	; 62
     368:	9a 83       	std	Y+2, r25	; 0x02
     36a:	89 83       	std	Y+1, r24	; 0x01
     36c:	7c 83       	std	Y+4, r23	; 0x04
     36e:	6b 83       	std	Y+3, r22	; 0x03
    *dst_stat += *src_stat;
     370:	eb 81       	ldd	r30, Y+3	; 0x03
     372:	fc 81       	ldd	r31, Y+4	; 0x04
     374:	90 81       	ld	r25, Z
     376:	e9 81       	ldd	r30, Y+1	; 0x01
     378:	fa 81       	ldd	r31, Y+2	; 0x02
     37a:	80 81       	ld	r24, Z
     37c:	89 0f       	add	r24, r25
     37e:	eb 81       	ldd	r30, Y+3	; 0x03
     380:	fc 81       	ldd	r31, Y+4	; 0x04
     382:	80 83       	st	Z, r24
    *src_stat = (stat_t)0;
     384:	e9 81       	ldd	r30, Y+1	; 0x01
     386:	fa 81       	ldd	r31, Y+2	; 0x02
     388:	10 82       	st	Z, r1
}
     38a:	0f 90       	pop	r0
     38c:	0f 90       	pop	r0
     38e:	0f 90       	pop	r0
     390:	0f 90       	pop	r0
     392:	cf 91       	pop	r28
     394:	df 91       	pop	r29
     396:	08 95       	ret

00000398 <stat_calc_load>:
load_t stat_calc_load(prio_t prio, stat_t * stat)
{
     398:	df 93       	push	r29
     39a:	cf 93       	push	r28
     39c:	00 d0       	rcall	.+0      	; 0x39e <stat_calc_load+0x6>
     39e:	0f 92       	push	r0
     3a0:	cd b7       	in	r28, 0x3d	; 61
     3a2:	de b7       	in	r29, 0x3e	; 62
     3a4:	89 83       	std	Y+1, r24	; 0x01
     3a6:	7b 83       	std	Y+3, r23	; 0x03
     3a8:	6a 83       	std	Y+2, r22	; 0x02
    return (load_t)*stat;
     3aa:	ea 81       	ldd	r30, Y+2	; 0x02
     3ac:	fb 81       	ldd	r31, Y+3	; 0x03
     3ae:	80 81       	ld	r24, Z
}
     3b0:	0f 90       	pop	r0
     3b2:	0f 90       	pop	r0
     3b4:	0f 90       	pop	r0
     3b6:	cf 91       	pop	r28
     3b8:	df 91       	pop	r29
     3ba:	08 95       	ret

000003bc <resched>:
void resched(core_id_t core_id)
{
     3bc:	df 93       	push	r29
     3be:	cf 93       	push	r28
     3c0:	0f 92       	push	r0
     3c2:	cd b7       	in	r28, 0x3d	; 61
     3c4:	de b7       	in	r29, 0x3e	; 62
     3c6:	89 83       	std	Y+1, r24	; 0x01
    vsmp_vinterrupt_isr( core_id, ( vinterrupt_t * )resched_vectors + core_id );
     3c8:	89 81       	ldd	r24, Y+1	; 0x01
     3ca:	28 2f       	mov	r18, r24
     3cc:	30 e0       	ldi	r19, 0x00	; 0
     3ce:	c9 01       	movw	r24, r18
     3d0:	88 0f       	add	r24, r24
     3d2:	99 1f       	adc	r25, r25
     3d4:	82 0f       	add	r24, r18
     3d6:	93 1f       	adc	r25, r19
     3d8:	88 0f       	add	r24, r24
     3da:	99 1f       	adc	r25, r25
     3dc:	9c 01       	movw	r18, r24
     3de:	23 5d       	subi	r18, 0xD3	; 211
     3e0:	3e 4f       	sbci	r19, 0xFE	; 254
     3e2:	89 81       	ldd	r24, Y+1	; 0x01
     3e4:	b9 01       	movw	r22, r18
     3e6:	0e 94 a8 07 	call	0xf50	; 0xf50 <vsmp_vinterrupt_isr>
}
     3ea:	0f 90       	pop	r0
     3ec:	cf 91       	pop	r28
     3ee:	df 91       	pop	r29
     3f0:	08 95       	ret

000003f2 <resched_isr>:

///!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
stack_t * saved_vm_sp[MAX_CORES];
__MACRO_FUNCTION__(_bugurt_isr_prologue)
{
    cli();
     3f2:	f8 94       	cli
    saved_vm_sp[current_vm] = (stack_t *)SP; // I didn't write bugurt_get_stack_pointer();
     3f4:	80 91 1c 01 	lds	r24, 0x011C
     3f8:	48 2f       	mov	r20, r24
     3fa:	50 e0       	ldi	r21, 0x00	; 0
     3fc:	ed e5       	ldi	r30, 0x5D	; 93
     3fe:	f0 e0       	ldi	r31, 0x00	; 0
     400:	80 81       	ld	r24, Z
     402:	91 81       	ldd	r25, Z+1	; 0x01
     404:	9c 01       	movw	r18, r24
     406:	ca 01       	movw	r24, r20
     408:	88 0f       	add	r24, r24
     40a:	99 1f       	adc	r25, r25
     40c:	fc 01       	movw	r30, r24
     40e:	e4 5f       	subi	r30, 0xF4	; 244
     410:	fe 4f       	sbci	r31, 0xFE	; 254
     412:	31 83       	std	Z+1, r19	; 0x01
     414:	20 83       	st	Z, r18
    bugurt_set_stack_pointer( kernel.idle[current_vm].spointer );
     416:	80 91 1c 01 	lds	r24, 0x011C
     41a:	28 2f       	mov	r18, r24
     41c:	30 e0       	ldi	r19, 0x00	; 0
     41e:	80 e3       	ldi	r24, 0x30	; 48
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	ac 01       	movw	r20, r24
     424:	24 9f       	mul	r18, r20
     426:	c0 01       	movw	r24, r0
     428:	25 9f       	mul	r18, r21
     42a:	90 0d       	add	r25, r0
     42c:	34 9f       	mul	r19, r20
     42e:	90 0d       	add	r25, r0
     430:	11 24       	eor	r1, r1
     432:	fc 01       	movw	r30, r24
     434:	e1 53       	subi	r30, 0x31	; 49
     436:	fd 4f       	sbci	r31, 0xFD	; 253
     438:	80 81       	ld	r24, Z
     43a:	91 81       	ldd	r25, Z+1	; 0x01
     43c:	0e 94 c5 00 	call	0x18a	; 0x18a <bugurt_set_stack_pointer>
    sei();
     440:	78 94       	sei
vinterrupt_t resched_vectors[MAX_CORES];
__attribute__ (( naked )) void resched_isr(void)
{
    _bugurt_isr_prologue();

    sched_reschedule();
     442:	0e 94 88 15 	call	0x2b10	; 0x2b10 <sched_reschedule>
    bugurt_set_stack_pointer( kernel.idle[current_vm].spointer );
    sei();
}
__MACRO_FUNCTION__(_bugurt_isr_epilogue)
{
    cli();
     446:	f8 94       	cli
    vm_state[current_vm].sp = kernel.sched[current_vm].current_proc->spointer;
     448:	80 91 1c 01 	lds	r24, 0x011C
     44c:	48 2f       	mov	r20, r24
     44e:	50 e0       	ldi	r21, 0x00	; 0
     450:	80 91 1c 01 	lds	r24, 0x011C
     454:	28 2f       	mov	r18, r24
     456:	30 e0       	ldi	r19, 0x00	; 0
     458:	8b e2       	ldi	r24, 0x2B	; 43
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	bc 01       	movw	r22, r24
     45e:	26 9f       	mul	r18, r22
     460:	c0 01       	movw	r24, r0
     462:	27 9f       	mul	r18, r23
     464:	90 0d       	add	r25, r0
     466:	36 9f       	mul	r19, r22
     468:	90 0d       	add	r25, r0
     46a:	11 24       	eor	r1, r1
     46c:	fc 01       	movw	r30, r24
     46e:	e5 5b       	subi	r30, 0xB5	; 181
     470:	fd 4f       	sbci	r31, 0xFD	; 253
     472:	01 90       	ld	r0, Z+
     474:	f0 81       	ld	r31, Z
     476:	e0 2d       	mov	r30, r0
     478:	26 a5       	ldd	r18, Z+46	; 0x2e
     47a:	37 a5       	ldd	r19, Z+47	; 0x2f
     47c:	ca 01       	movw	r24, r20
     47e:	88 0f       	add	r24, r24
     480:	99 1f       	adc	r25, r25
     482:	88 0f       	add	r24, r24
     484:	99 1f       	adc	r25, r25
     486:	84 0f       	add	r24, r20
     488:	95 1f       	adc	r25, r21
     48a:	fc 01       	movw	r30, r24
     48c:	e0 5e       	subi	r30, 0xE0	; 224
     48e:	fe 4f       	sbci	r31, 0xFE	; 254
     490:	31 83       	std	Z+1, r19	; 0x01
     492:	20 83       	st	Z, r18
    bugurt_set_stack_pointer( saved_vm_sp[current_vm] );
     494:	80 91 1c 01 	lds	r24, 0x011C
     498:	88 2f       	mov	r24, r24
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	88 0f       	add	r24, r24
     49e:	99 1f       	adc	r25, r25
     4a0:	fc 01       	movw	r30, r24
     4a2:	e4 5f       	subi	r30, 0xF4	; 244
     4a4:	fe 4f       	sbci	r31, 0xFE	; 254
     4a6:	80 81       	ld	r24, Z
     4a8:	91 81       	ldd	r25, Z+1	; 0x01
     4aa:	0e 94 c5 00 	call	0x18a	; 0x18a <bugurt_set_stack_pointer>
    sei();
     4ae:	78 94       	sei

000004b0 <resched_vectors_init>:
    sched_reschedule();

    _bugurt_isr_epilogue();
}
void resched_vectors_init(void)
{
     4b0:	df 93       	push	r29
     4b2:	cf 93       	push	r28
     4b4:	0f 92       	push	r0
     4b6:	cd b7       	in	r28, 0x3d	; 61
     4b8:	de b7       	in	r29, 0x3e	; 62
    core_id_t i;
    for(i = 0; i < MAX_CORES; i++)
     4ba:	19 82       	std	Y+1, r1	; 0x01
     4bc:	14 c0       	rjmp	.+40     	; 0x4e6 <resched_vectors_init+0x36>
    {
        vsmp_vinterrupt_init( ( vinterrupt_t * )resched_vectors + i, resched_isr );
     4be:	89 81       	ldd	r24, Y+1	; 0x01
     4c0:	28 2f       	mov	r18, r24
     4c2:	30 e0       	ldi	r19, 0x00	; 0
     4c4:	c9 01       	movw	r24, r18
     4c6:	88 0f       	add	r24, r24
     4c8:	99 1f       	adc	r25, r25
     4ca:	82 0f       	add	r24, r18
     4cc:	93 1f       	adc	r25, r19
     4ce:	88 0f       	add	r24, r24
     4d0:	99 1f       	adc	r25, r25
     4d2:	83 5d       	subi	r24, 0xD3	; 211
     4d4:	9e 4f       	sbci	r25, 0xFE	; 254
     4d6:	29 ef       	ldi	r18, 0xF9	; 249
     4d8:	31 e0       	ldi	r19, 0x01	; 1
     4da:	b9 01       	movw	r22, r18
     4dc:	0e 94 07 08 	call	0x100e	; 0x100e <vsmp_vinterrupt_init>
    _bugurt_isr_epilogue();
}
void resched_vectors_init(void)
{
    core_id_t i;
    for(i = 0; i < MAX_CORES; i++)
     4e0:	89 81       	ldd	r24, Y+1	; 0x01
     4e2:	8f 5f       	subi	r24, 0xFF	; 255
     4e4:	89 83       	std	Y+1, r24	; 0x01
     4e6:	89 81       	ldd	r24, Y+1	; 0x01
     4e8:	82 30       	cpi	r24, 0x02	; 2
     4ea:	48 f3       	brcs	.-46     	; 0x4be <resched_vectors_init+0xe>
    {
        vsmp_vinterrupt_init( ( vinterrupt_t * )resched_vectors + i, resched_isr );
    }
}
     4ec:	0f 90       	pop	r0
     4ee:	cf 91       	pop	r28
     4f0:	df 91       	pop	r29
     4f2:	08 95       	ret

000004f4 <_systimer_tick_isr>:

vinterrupt_t systimer_vectors[MAX_CORES];
void _systimer_tick_isr(void)
{
     4f4:	df 93       	push	r29
     4f6:	cf 93       	push	r28
     4f8:	cd b7       	in	r28, 0x3d	; 61
     4fa:	de b7       	in	r29, 0x3e	; 62
    SPIN_LOCK_KERNEL_TIMER();
     4fc:	84 e0       	ldi	r24, 0x04	; 4
     4fe:	93 e0       	ldi	r25, 0x03	; 3
     500:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
    kernel.timer++;
     504:	80 91 05 03 	lds	r24, 0x0305
     508:	90 91 06 03 	lds	r25, 0x0306
     50c:	01 96       	adiw	r24, 0x01	; 1
     50e:	90 93 06 03 	sts	0x0306, r25
     512:	80 93 05 03 	sts	0x0305, r24
    if( kernel.timer_tick != (void (*)(void))0 ) kernel.timer_tick();
     516:	80 91 07 03 	lds	r24, 0x0307
     51a:	90 91 08 03 	lds	r25, 0x0308
     51e:	00 97       	sbiw	r24, 0x00	; 0
     520:	29 f0       	breq	.+10     	; 0x52c <_systimer_tick_isr+0x38>
     522:	e0 91 07 03 	lds	r30, 0x0307
     526:	f0 91 08 03 	lds	r31, 0x0308
     52a:	09 95       	icall
    SPIN_UNLOCK_KERNEL_TIMER();
     52c:	84 e0       	ldi	r24, 0x04	; 4
     52e:	93 e0       	ldi	r25, 0x03	; 3
     530:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>

    sched_schedule();
     534:	0e 94 83 14 	call	0x2906	; 0x2906 <sched_schedule>
}
     538:	cf 91       	pop	r28
     53a:	df 91       	pop	r29
     53c:	08 95       	ret

0000053e <systimer_tick_isr>:

///!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
stack_t * saved_vm_sp[MAX_CORES];
__MACRO_FUNCTION__(_bugurt_isr_prologue)
{
    cli();
     53e:	f8 94       	cli
    saved_vm_sp[current_vm] = (stack_t *)SP; // I didn't write bugurt_get_stack_pointer();
     540:	80 91 1c 01 	lds	r24, 0x011C
     544:	48 2f       	mov	r20, r24
     546:	50 e0       	ldi	r21, 0x00	; 0
     548:	ed e5       	ldi	r30, 0x5D	; 93
     54a:	f0 e0       	ldi	r31, 0x00	; 0
     54c:	80 81       	ld	r24, Z
     54e:	91 81       	ldd	r25, Z+1	; 0x01
     550:	9c 01       	movw	r18, r24
     552:	ca 01       	movw	r24, r20
     554:	88 0f       	add	r24, r24
     556:	99 1f       	adc	r25, r25
     558:	fc 01       	movw	r30, r24
     55a:	e4 5f       	subi	r30, 0xF4	; 244
     55c:	fe 4f       	sbci	r31, 0xFE	; 254
     55e:	31 83       	std	Z+1, r19	; 0x01
     560:	20 83       	st	Z, r18
    bugurt_set_stack_pointer( kernel.idle[current_vm].spointer );
     562:	80 91 1c 01 	lds	r24, 0x011C
     566:	28 2f       	mov	r18, r24
     568:	30 e0       	ldi	r19, 0x00	; 0
     56a:	80 e3       	ldi	r24, 0x30	; 48
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	ac 01       	movw	r20, r24
     570:	24 9f       	mul	r18, r20
     572:	c0 01       	movw	r24, r0
     574:	25 9f       	mul	r18, r21
     576:	90 0d       	add	r25, r0
     578:	34 9f       	mul	r19, r20
     57a:	90 0d       	add	r25, r0
     57c:	11 24       	eor	r1, r1
     57e:	fc 01       	movw	r30, r24
     580:	e1 53       	subi	r30, 0x31	; 49
     582:	fd 4f       	sbci	r31, 0xFD	; 253
     584:	80 81       	ld	r24, Z
     586:	91 81       	ldd	r25, Z+1	; 0x01
     588:	0e 94 c5 00 	call	0x18a	; 0x18a <bugurt_set_stack_pointer>
    sei();
     58c:	78 94       	sei
}
__attribute__ (( naked )) void systimer_tick_isr(void)
{
    _bugurt_isr_prologue();

    _systimer_tick_isr();
     58e:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <_systimer_tick_isr>
    bugurt_set_stack_pointer( kernel.idle[current_vm].spointer );
    sei();
}
__MACRO_FUNCTION__(_bugurt_isr_epilogue)
{
    cli();
     592:	f8 94       	cli
    vm_state[current_vm].sp = kernel.sched[current_vm].current_proc->spointer;
     594:	80 91 1c 01 	lds	r24, 0x011C
     598:	48 2f       	mov	r20, r24
     59a:	50 e0       	ldi	r21, 0x00	; 0
     59c:	80 91 1c 01 	lds	r24, 0x011C
     5a0:	28 2f       	mov	r18, r24
     5a2:	30 e0       	ldi	r19, 0x00	; 0
     5a4:	8b e2       	ldi	r24, 0x2B	; 43
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	bc 01       	movw	r22, r24
     5aa:	26 9f       	mul	r18, r22
     5ac:	c0 01       	movw	r24, r0
     5ae:	27 9f       	mul	r18, r23
     5b0:	90 0d       	add	r25, r0
     5b2:	36 9f       	mul	r19, r22
     5b4:	90 0d       	add	r25, r0
     5b6:	11 24       	eor	r1, r1
     5b8:	fc 01       	movw	r30, r24
     5ba:	e5 5b       	subi	r30, 0xB5	; 181
     5bc:	fd 4f       	sbci	r31, 0xFD	; 253
     5be:	01 90       	ld	r0, Z+
     5c0:	f0 81       	ld	r31, Z
     5c2:	e0 2d       	mov	r30, r0
     5c4:	26 a5       	ldd	r18, Z+46	; 0x2e
     5c6:	37 a5       	ldd	r19, Z+47	; 0x2f
     5c8:	ca 01       	movw	r24, r20
     5ca:	88 0f       	add	r24, r24
     5cc:	99 1f       	adc	r25, r25
     5ce:	88 0f       	add	r24, r24
     5d0:	99 1f       	adc	r25, r25
     5d2:	84 0f       	add	r24, r20
     5d4:	95 1f       	adc	r25, r21
     5d6:	fc 01       	movw	r30, r24
     5d8:	e0 5e       	subi	r30, 0xE0	; 224
     5da:	fe 4f       	sbci	r31, 0xFE	; 254
     5dc:	31 83       	std	Z+1, r19	; 0x01
     5de:	20 83       	st	Z, r18
    bugurt_set_stack_pointer( saved_vm_sp[current_vm] );
     5e0:	80 91 1c 01 	lds	r24, 0x011C
     5e4:	88 2f       	mov	r24, r24
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	88 0f       	add	r24, r24
     5ea:	99 1f       	adc	r25, r25
     5ec:	fc 01       	movw	r30, r24
     5ee:	e4 5f       	subi	r30, 0xF4	; 244
     5f0:	fe 4f       	sbci	r31, 0xFE	; 254
     5f2:	80 81       	ld	r24, Z
     5f4:	91 81       	ldd	r25, Z+1	; 0x01
     5f6:	0e 94 c5 00 	call	0x18a	; 0x18a <bugurt_set_stack_pointer>
    sei();
     5fa:	78 94       	sei

000005fc <systimer_sched_isr>:

///!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
stack_t * saved_vm_sp[MAX_CORES];
__MACRO_FUNCTION__(_bugurt_isr_prologue)
{
    cli();
     5fc:	f8 94       	cli
    saved_vm_sp[current_vm] = (stack_t *)SP; // I didn't write bugurt_get_stack_pointer();
     5fe:	80 91 1c 01 	lds	r24, 0x011C
     602:	48 2f       	mov	r20, r24
     604:	50 e0       	ldi	r21, 0x00	; 0
     606:	ed e5       	ldi	r30, 0x5D	; 93
     608:	f0 e0       	ldi	r31, 0x00	; 0
     60a:	80 81       	ld	r24, Z
     60c:	91 81       	ldd	r25, Z+1	; 0x01
     60e:	9c 01       	movw	r18, r24
     610:	ca 01       	movw	r24, r20
     612:	88 0f       	add	r24, r24
     614:	99 1f       	adc	r25, r25
     616:	fc 01       	movw	r30, r24
     618:	e4 5f       	subi	r30, 0xF4	; 244
     61a:	fe 4f       	sbci	r31, 0xFE	; 254
     61c:	31 83       	std	Z+1, r19	; 0x01
     61e:	20 83       	st	Z, r18
    bugurt_set_stack_pointer( kernel.idle[current_vm].spointer );
     620:	80 91 1c 01 	lds	r24, 0x011C
     624:	28 2f       	mov	r18, r24
     626:	30 e0       	ldi	r19, 0x00	; 0
     628:	80 e3       	ldi	r24, 0x30	; 48
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	ac 01       	movw	r20, r24
     62e:	24 9f       	mul	r18, r20
     630:	c0 01       	movw	r24, r0
     632:	25 9f       	mul	r18, r21
     634:	90 0d       	add	r25, r0
     636:	34 9f       	mul	r19, r20
     638:	90 0d       	add	r25, r0
     63a:	11 24       	eor	r1, r1
     63c:	fc 01       	movw	r30, r24
     63e:	e1 53       	subi	r30, 0x31	; 49
     640:	fd 4f       	sbci	r31, 0xFD	; 253
     642:	80 81       	ld	r24, Z
     644:	91 81       	ldd	r25, Z+1	; 0x01
     646:	0e 94 c5 00 	call	0x18a	; 0x18a <bugurt_set_stack_pointer>
    sei();
     64a:	78 94       	sei

__attribute__ (( naked )) void systimer_sched_isr(void)
{
    _bugurt_isr_prologue();

    sched_schedule();
     64c:	0e 94 83 14 	call	0x2906	; 0x2906 <sched_schedule>
    bugurt_set_stack_pointer( kernel.idle[current_vm].spointer );
    sei();
}
__MACRO_FUNCTION__(_bugurt_isr_epilogue)
{
    cli();
     650:	f8 94       	cli
    vm_state[current_vm].sp = kernel.sched[current_vm].current_proc->spointer;
     652:	80 91 1c 01 	lds	r24, 0x011C
     656:	48 2f       	mov	r20, r24
     658:	50 e0       	ldi	r21, 0x00	; 0
     65a:	80 91 1c 01 	lds	r24, 0x011C
     65e:	28 2f       	mov	r18, r24
     660:	30 e0       	ldi	r19, 0x00	; 0
     662:	8b e2       	ldi	r24, 0x2B	; 43
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	bc 01       	movw	r22, r24
     668:	26 9f       	mul	r18, r22
     66a:	c0 01       	movw	r24, r0
     66c:	27 9f       	mul	r18, r23
     66e:	90 0d       	add	r25, r0
     670:	36 9f       	mul	r19, r22
     672:	90 0d       	add	r25, r0
     674:	11 24       	eor	r1, r1
     676:	fc 01       	movw	r30, r24
     678:	e5 5b       	subi	r30, 0xB5	; 181
     67a:	fd 4f       	sbci	r31, 0xFD	; 253
     67c:	01 90       	ld	r0, Z+
     67e:	f0 81       	ld	r31, Z
     680:	e0 2d       	mov	r30, r0
     682:	26 a5       	ldd	r18, Z+46	; 0x2e
     684:	37 a5       	ldd	r19, Z+47	; 0x2f
     686:	ca 01       	movw	r24, r20
     688:	88 0f       	add	r24, r24
     68a:	99 1f       	adc	r25, r25
     68c:	88 0f       	add	r24, r24
     68e:	99 1f       	adc	r25, r25
     690:	84 0f       	add	r24, r20
     692:	95 1f       	adc	r25, r21
     694:	fc 01       	movw	r30, r24
     696:	e0 5e       	subi	r30, 0xE0	; 224
     698:	fe 4f       	sbci	r31, 0xFE	; 254
     69a:	31 83       	std	Z+1, r19	; 0x01
     69c:	20 83       	st	Z, r18
    bugurt_set_stack_pointer( saved_vm_sp[current_vm] );
     69e:	80 91 1c 01 	lds	r24, 0x011C
     6a2:	88 2f       	mov	r24, r24
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	88 0f       	add	r24, r24
     6a8:	99 1f       	adc	r25, r25
     6aa:	fc 01       	movw	r30, r24
     6ac:	e4 5f       	subi	r30, 0xF4	; 244
     6ae:	fe 4f       	sbci	r31, 0xFE	; 254
     6b0:	80 81       	ld	r24, Z
     6b2:	91 81       	ldd	r25, Z+1	; 0x01
     6b4:	0e 94 c5 00 	call	0x18a	; 0x18a <bugurt_set_stack_pointer>
    sei();
     6b8:	78 94       	sei

000006ba <systimer_vectors_init>:

    _bugurt_isr_epilogue();
}

void systimer_vectors_init(void)
{
     6ba:	df 93       	push	r29
     6bc:	cf 93       	push	r28
     6be:	0f 92       	push	r0
     6c0:	cd b7       	in	r28, 0x3d	; 61
     6c2:	de b7       	in	r29, 0x3e	; 62
    core_id_t i;
    vsmp_vinterrupt_init( (vinterrupt_t *)systimer_vectors, systimer_tick_isr ); // Zero core is "mater", it handles kernel.timer
     6c4:	89 e3       	ldi	r24, 0x39	; 57
     6c6:	91 e0       	ldi	r25, 0x01	; 1
     6c8:	2f e9       	ldi	r18, 0x9F	; 159
     6ca:	32 e0       	ldi	r19, 0x02	; 2
     6cc:	b9 01       	movw	r22, r18
     6ce:	0e 94 07 08 	call	0x100e	; 0x100e <vsmp_vinterrupt_init>
    for(i = 1; i < MAX_CORES; i++)
     6d2:	81 e0       	ldi	r24, 0x01	; 1
     6d4:	89 83       	std	Y+1, r24	; 0x01
     6d6:	14 c0       	rjmp	.+40     	; 0x700 <systimer_vectors_init+0x46>
    {
        vsmp_vinterrupt_init( (vinterrupt_t *)systimer_vectors + i, systimer_sched_isr ); // Other cores are slaves they just shedule.
     6d8:	89 81       	ldd	r24, Y+1	; 0x01
     6da:	28 2f       	mov	r18, r24
     6dc:	30 e0       	ldi	r19, 0x00	; 0
     6de:	c9 01       	movw	r24, r18
     6e0:	88 0f       	add	r24, r24
     6e2:	99 1f       	adc	r25, r25
     6e4:	82 0f       	add	r24, r18
     6e6:	93 1f       	adc	r25, r19
     6e8:	88 0f       	add	r24, r24
     6ea:	99 1f       	adc	r25, r25
     6ec:	87 5c       	subi	r24, 0xC7	; 199
     6ee:	9e 4f       	sbci	r25, 0xFE	; 254
     6f0:	2e ef       	ldi	r18, 0xFE	; 254
     6f2:	32 e0       	ldi	r19, 0x02	; 2
     6f4:	b9 01       	movw	r22, r18
     6f6:	0e 94 07 08 	call	0x100e	; 0x100e <vsmp_vinterrupt_init>

void systimer_vectors_init(void)
{
    core_id_t i;
    vsmp_vinterrupt_init( (vinterrupt_t *)systimer_vectors, systimer_tick_isr ); // Zero core is "mater", it handles kernel.timer
    for(i = 1; i < MAX_CORES; i++)
     6fa:	89 81       	ldd	r24, Y+1	; 0x01
     6fc:	8f 5f       	subi	r24, 0xFF	; 255
     6fe:	89 83       	std	Y+1, r24	; 0x01
     700:	89 81       	ldd	r24, Y+1	; 0x01
     702:	82 30       	cpi	r24, 0x02	; 2
     704:	48 f3       	brcs	.-46     	; 0x6d8 <systimer_vectors_init+0x1e>
    {
        vsmp_vinterrupt_init( (vinterrupt_t *)systimer_vectors + i, systimer_sched_isr ); // Other cores are slaves they just shedule.
    }
}
     706:	0f 90       	pop	r0
     708:	cf 91       	pop	r28
     70a:	df 91       	pop	r29
     70c:	08 95       	ret

0000070e <systimer_vectors_fire>:

void systimer_vectors_fire(void)
{
     70e:	df 93       	push	r29
     710:	cf 93       	push	r28
     712:	0f 92       	push	r0
     714:	cd b7       	in	r28, 0x3d	; 61
     716:	de b7       	in	r29, 0x3e	; 62
    core_id_t i;
    for(i = 0; i < MAX_CORES; i++)
     718:	19 82       	std	Y+1, r1	; 0x01
     71a:	14 c0       	rjmp	.+40     	; 0x744 <systimer_vectors_fire+0x36>
    {
        vsmp_vinterrupt_isr( i, (vinterrupt_t *)systimer_vectors + i );
     71c:	89 81       	ldd	r24, Y+1	; 0x01
     71e:	28 2f       	mov	r18, r24
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	c9 01       	movw	r24, r18
     724:	88 0f       	add	r24, r24
     726:	99 1f       	adc	r25, r25
     728:	82 0f       	add	r24, r18
     72a:	93 1f       	adc	r25, r19
     72c:	88 0f       	add	r24, r24
     72e:	99 1f       	adc	r25, r25
     730:	9c 01       	movw	r18, r24
     732:	27 5c       	subi	r18, 0xC7	; 199
     734:	3e 4f       	sbci	r19, 0xFE	; 254
     736:	89 81       	ldd	r24, Y+1	; 0x01
     738:	b9 01       	movw	r22, r18
     73a:	0e 94 a8 07 	call	0xf50	; 0xf50 <vsmp_vinterrupt_isr>
}

void systimer_vectors_fire(void)
{
    core_id_t i;
    for(i = 0; i < MAX_CORES; i++)
     73e:	89 81       	ldd	r24, Y+1	; 0x01
     740:	8f 5f       	subi	r24, 0xFF	; 255
     742:	89 83       	std	Y+1, r24	; 0x01
     744:	89 81       	ldd	r24, Y+1	; 0x01
     746:	82 30       	cpi	r24, 0x02	; 2
     748:	48 f3       	brcs	.-46     	; 0x71c <systimer_vectors_fire+0xe>
    {
        vsmp_vinterrupt_isr( i, (vinterrupt_t *)systimer_vectors + i );
    }
}
     74a:	0f 90       	pop	r0
     74c:	cf 91       	pop	r28
     74e:	df 91       	pop	r29
     750:	08 95       	ret

00000752 <vsmp_systimer_hook_bugurt>:

#define SYSTIMER_HOOK_THR 10
count_t systimer_hook_counter;
void vsmp_systimer_hook_bugurt(void)
{
     752:	df 93       	push	r29
     754:	cf 93       	push	r28
     756:	cd b7       	in	r28, 0x3d	; 61
     758:	de b7       	in	r29, 0x3e	; 62
    if(!current_vm)
     75a:	80 91 1c 01 	lds	r24, 0x011C
     75e:	88 23       	and	r24, r24
     760:	b1 f4       	brne	.+44     	; 0x78e <vsmp_systimer_hook_bugurt+0x3c>
    {
        systimer_hook_counter++;
     762:	80 91 45 01 	lds	r24, 0x0145
     766:	90 91 46 01 	lds	r25, 0x0146
     76a:	01 96       	adiw	r24, 0x01	; 1
     76c:	90 93 46 01 	sts	0x0146, r25
     770:	80 93 45 01 	sts	0x0145, r24
        if( systimer_hook_counter >= SYSTIMER_HOOK_THR )
     774:	80 91 45 01 	lds	r24, 0x0145
     778:	90 91 46 01 	lds	r25, 0x0146
     77c:	8a 30       	cpi	r24, 0x0A	; 10
     77e:	91 05       	cpc	r25, r1
     780:	30 f0       	brcs	.+12     	; 0x78e <vsmp_systimer_hook_bugurt+0x3c>
        {
            systimer_hook_counter = (count_t)0;
     782:	10 92 46 01 	sts	0x0146, r1
     786:	10 92 45 01 	sts	0x0145, r1
            systimer_vectors_fire();
     78a:	0e 94 87 03 	call	0x70e	; 0x70e <systimer_vectors_fire>
        }

    }
}
     78e:	cf 91       	pop	r28
     790:	df 91       	pop	r29
     792:	08 95       	ret

00000794 <_syscall_isr>:
syscall_t syscall_num[MAX_CORES];
void * syscall_arg[MAX_CORES];

// Local variable is used compiler generated prologue and epilogue needed
void _syscall_isr(void)
{
     794:	df 93       	push	r29
     796:	cf 93       	push	r28
     798:	0f 92       	push	r0
     79a:	cd b7       	in	r28, 0x3d	; 61
     79c:	de b7       	in	r29, 0x3e	; 62
    core_id_t core;
    core = current_core();
     79e:	0e 94 2d 01 	call	0x25a	; 0x25a <current_core>
     7a2:	89 83       	std	Y+1, r24	; 0x01
    do_syscall( syscall_num[core], syscall_arg[core] );
     7a4:	89 81       	ldd	r24, Y+1	; 0x01
     7a6:	88 2f       	mov	r24, r24
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	fc 01       	movw	r30, r24
     7ac:	e5 5d       	subi	r30, 0xD5	; 213
     7ae:	fe 4f       	sbci	r31, 0xFE	; 254
     7b0:	40 81       	ld	r20, Z
     7b2:	89 81       	ldd	r24, Y+1	; 0x01
     7b4:	88 2f       	mov	r24, r24
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	88 0f       	add	r24, r24
     7ba:	99 1f       	adc	r25, r25
     7bc:	fc 01       	movw	r30, r24
     7be:	e9 5d       	subi	r30, 0xD9	; 217
     7c0:	fe 4f       	sbci	r31, 0xFE	; 254
     7c2:	20 81       	ld	r18, Z
     7c4:	31 81       	ldd	r19, Z+1	; 0x01
     7c6:	84 2f       	mov	r24, r20
     7c8:	b9 01       	movw	r22, r18
     7ca:	0e 94 11 19 	call	0x3222	; 0x3222 <do_syscall>
}
     7ce:	0f 90       	pop	r0
     7d0:	cf 91       	pop	r28
     7d2:	df 91       	pop	r29
     7d4:	08 95       	ret

000007d6 <syscall_isr>:

///!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
stack_t * saved_vm_sp[MAX_CORES];
__MACRO_FUNCTION__(_bugurt_isr_prologue)
{
    cli();
     7d6:	f8 94       	cli
    saved_vm_sp[current_vm] = (stack_t *)SP; // I didn't write bugurt_get_stack_pointer();
     7d8:	80 91 1c 01 	lds	r24, 0x011C
     7dc:	48 2f       	mov	r20, r24
     7de:	50 e0       	ldi	r21, 0x00	; 0
     7e0:	ed e5       	ldi	r30, 0x5D	; 93
     7e2:	f0 e0       	ldi	r31, 0x00	; 0
     7e4:	80 81       	ld	r24, Z
     7e6:	91 81       	ldd	r25, Z+1	; 0x01
     7e8:	9c 01       	movw	r18, r24
     7ea:	ca 01       	movw	r24, r20
     7ec:	88 0f       	add	r24, r24
     7ee:	99 1f       	adc	r25, r25
     7f0:	fc 01       	movw	r30, r24
     7f2:	e4 5f       	subi	r30, 0xF4	; 244
     7f4:	fe 4f       	sbci	r31, 0xFE	; 254
     7f6:	31 83       	std	Z+1, r19	; 0x01
     7f8:	20 83       	st	Z, r18
    bugurt_set_stack_pointer( kernel.idle[current_vm].spointer );
     7fa:	80 91 1c 01 	lds	r24, 0x011C
     7fe:	28 2f       	mov	r18, r24
     800:	30 e0       	ldi	r19, 0x00	; 0
     802:	80 e3       	ldi	r24, 0x30	; 48
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	ac 01       	movw	r20, r24
     808:	24 9f       	mul	r18, r20
     80a:	c0 01       	movw	r24, r0
     80c:	25 9f       	mul	r18, r21
     80e:	90 0d       	add	r25, r0
     810:	34 9f       	mul	r19, r20
     812:	90 0d       	add	r25, r0
     814:	11 24       	eor	r1, r1
     816:	fc 01       	movw	r30, r24
     818:	e1 53       	subi	r30, 0x31	; 49
     81a:	fd 4f       	sbci	r31, 0xFD	; 253
     81c:	80 81       	ld	r24, Z
     81e:	91 81       	ldd	r25, Z+1	; 0x01
     820:	0e 94 c5 00 	call	0x18a	; 0x18a <bugurt_set_stack_pointer>
    sei();
     824:	78 94       	sei
}
__attribute__ (( naked )) void syscall_isr(void)
{
    _bugurt_isr_prologue();

    _syscall_isr();
     826:	0e 94 ca 03 	call	0x794	; 0x794 <_syscall_isr>
    bugurt_set_stack_pointer( kernel.idle[current_vm].spointer );
    sei();
}
__MACRO_FUNCTION__(_bugurt_isr_epilogue)
{
    cli();
     82a:	f8 94       	cli
    vm_state[current_vm].sp = kernel.sched[current_vm].current_proc->spointer;
     82c:	80 91 1c 01 	lds	r24, 0x011C
     830:	48 2f       	mov	r20, r24
     832:	50 e0       	ldi	r21, 0x00	; 0
     834:	80 91 1c 01 	lds	r24, 0x011C
     838:	28 2f       	mov	r18, r24
     83a:	30 e0       	ldi	r19, 0x00	; 0
     83c:	8b e2       	ldi	r24, 0x2B	; 43
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	bc 01       	movw	r22, r24
     842:	26 9f       	mul	r18, r22
     844:	c0 01       	movw	r24, r0
     846:	27 9f       	mul	r18, r23
     848:	90 0d       	add	r25, r0
     84a:	36 9f       	mul	r19, r22
     84c:	90 0d       	add	r25, r0
     84e:	11 24       	eor	r1, r1
     850:	fc 01       	movw	r30, r24
     852:	e5 5b       	subi	r30, 0xB5	; 181
     854:	fd 4f       	sbci	r31, 0xFD	; 253
     856:	01 90       	ld	r0, Z+
     858:	f0 81       	ld	r31, Z
     85a:	e0 2d       	mov	r30, r0
     85c:	26 a5       	ldd	r18, Z+46	; 0x2e
     85e:	37 a5       	ldd	r19, Z+47	; 0x2f
     860:	ca 01       	movw	r24, r20
     862:	88 0f       	add	r24, r24
     864:	99 1f       	adc	r25, r25
     866:	88 0f       	add	r24, r24
     868:	99 1f       	adc	r25, r25
     86a:	84 0f       	add	r24, r20
     86c:	95 1f       	adc	r25, r21
     86e:	fc 01       	movw	r30, r24
     870:	e0 5e       	subi	r30, 0xE0	; 224
     872:	fe 4f       	sbci	r31, 0xFE	; 254
     874:	31 83       	std	Z+1, r19	; 0x01
     876:	20 83       	st	Z, r18
    bugurt_set_stack_pointer( saved_vm_sp[current_vm] );
     878:	80 91 1c 01 	lds	r24, 0x011C
     87c:	88 2f       	mov	r24, r24
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	88 0f       	add	r24, r24
     882:	99 1f       	adc	r25, r25
     884:	fc 01       	movw	r30, r24
     886:	e4 5f       	subi	r30, 0xF4	; 244
     888:	fe 4f       	sbci	r31, 0xFE	; 254
     88a:	80 81       	ld	r24, Z
     88c:	91 81       	ldd	r25, Z+1	; 0x01
     88e:	0e 94 c5 00 	call	0x18a	; 0x18a <bugurt_set_stack_pointer>
    sei();
     892:	78 94       	sei

00000894 <syscall_vectors_init>:
    _bugurt_isr_epilogue();
}


void syscall_vectors_init(void)
{
     894:	df 93       	push	r29
     896:	cf 93       	push	r28
     898:	0f 92       	push	r0
     89a:	cd b7       	in	r28, 0x3d	; 61
     89c:	de b7       	in	r29, 0x3e	; 62
    core_id_t i;
    for(i = 0; i < MAX_CORES; i++)
     89e:	19 82       	std	Y+1, r1	; 0x01
     8a0:	25 c0       	rjmp	.+74     	; 0x8ec <syscall_vectors_init+0x58>
    {
        vsmp_vinterrupt_init( ( vinterrupt_t * )syscall_vectors + i, syscall_isr );
     8a2:	89 81       	ldd	r24, Y+1	; 0x01
     8a4:	28 2f       	mov	r18, r24
     8a6:	30 e0       	ldi	r19, 0x00	; 0
     8a8:	c9 01       	movw	r24, r18
     8aa:	88 0f       	add	r24, r24
     8ac:	99 1f       	adc	r25, r25
     8ae:	82 0f       	add	r24, r18
     8b0:	93 1f       	adc	r25, r19
     8b2:	88 0f       	add	r24, r24
     8b4:	99 1f       	adc	r25, r25
     8b6:	80 5f       	subi	r24, 0xF0	; 240
     8b8:	9e 4f       	sbci	r25, 0xFE	; 254
     8ba:	2b ee       	ldi	r18, 0xEB	; 235
     8bc:	33 e0       	ldi	r19, 0x03	; 3
     8be:	b9 01       	movw	r22, r18
     8c0:	0e 94 07 08 	call	0x100e	; 0x100e <vsmp_vinterrupt_init>
        syscall_num[i] = (syscall_t)0;
     8c4:	89 81       	ldd	r24, Y+1	; 0x01
     8c6:	88 2f       	mov	r24, r24
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	fc 01       	movw	r30, r24
     8cc:	e5 5d       	subi	r30, 0xD5	; 213
     8ce:	fe 4f       	sbci	r31, 0xFE	; 254
     8d0:	10 82       	st	Z, r1
        syscall_arg[i] = (void *)0;
     8d2:	89 81       	ldd	r24, Y+1	; 0x01
     8d4:	88 2f       	mov	r24, r24
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	88 0f       	add	r24, r24
     8da:	99 1f       	adc	r25, r25
     8dc:	fc 01       	movw	r30, r24
     8de:	e9 5d       	subi	r30, 0xD9	; 217
     8e0:	fe 4f       	sbci	r31, 0xFE	; 254
     8e2:	11 82       	std	Z+1, r1	; 0x01
     8e4:	10 82       	st	Z, r1


void syscall_vectors_init(void)
{
    core_id_t i;
    for(i = 0; i < MAX_CORES; i++)
     8e6:	89 81       	ldd	r24, Y+1	; 0x01
     8e8:	8f 5f       	subi	r24, 0xFF	; 255
     8ea:	89 83       	std	Y+1, r24	; 0x01
     8ec:	89 81       	ldd	r24, Y+1	; 0x01
     8ee:	82 30       	cpi	r24, 0x02	; 2
     8f0:	c0 f2       	brcs	.-80     	; 0x8a2 <syscall_vectors_init+0xe>
    {
        vsmp_vinterrupt_init( ( vinterrupt_t * )syscall_vectors + i, syscall_isr );
        syscall_num[i] = (syscall_t)0;
        syscall_arg[i] = (void *)0;
    }
}
     8f2:	0f 90       	pop	r0
     8f4:	cf 91       	pop	r28
     8f6:	df 91       	pop	r29
     8f8:	08 95       	ret

000008fa <syscall_bugurt>:

void syscall_bugurt( unsigned char num, void * arg )
{
     8fa:	df 93       	push	r29
     8fc:	cf 93       	push	r28
     8fe:	00 d0       	rcall	.+0      	; 0x900 <__stack+0x1>
     900:	00 d0       	rcall	.+0      	; 0x902 <__stack+0x3>
     902:	00 d0       	rcall	.+0      	; 0x904 <__stack+0x5>
     904:	cd b7       	in	r28, 0x3d	; 61
     906:	de b7       	in	r29, 0x3e	; 62
     908:	8c 83       	std	Y+4, r24	; 0x04
     90a:	7e 83       	std	Y+6, r23	; 0x06
     90c:	6d 83       	std	Y+5, r22	; 0x05
    core_id_t core;
    item_t * vector;

    disable_interrupts();
     90e:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <disable_interrupts>

    cli();
     912:	f8 94       	cli
    core = current_vm;
     914:	80 91 1c 01 	lds	r24, 0x011C
     918:	8b 83       	std	Y+3, r24	; 0x03
    sei();
     91a:	78 94       	sei

    syscall_num[core] = (syscall_t)num;
     91c:	8b 81       	ldd	r24, Y+3	; 0x03
     91e:	88 2f       	mov	r24, r24
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	fc 01       	movw	r30, r24
     924:	e5 5d       	subi	r30, 0xD5	; 213
     926:	fe 4f       	sbci	r31, 0xFE	; 254
     928:	8c 81       	ldd	r24, Y+4	; 0x04
     92a:	80 83       	st	Z, r24
    syscall_arg[core] = (void *)arg;
     92c:	8b 81       	ldd	r24, Y+3	; 0x03
     92e:	88 2f       	mov	r24, r24
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	88 0f       	add	r24, r24
     934:	99 1f       	adc	r25, r25
     936:	fc 01       	movw	r30, r24
     938:	e9 5d       	subi	r30, 0xD9	; 217
     93a:	fe 4f       	sbci	r31, 0xFE	; 254
     93c:	8d 81       	ldd	r24, Y+5	; 0x05
     93e:	9e 81       	ldd	r25, Y+6	; 0x06
     940:	91 83       	std	Z+1, r25	; 0x01
     942:	80 83       	st	Z, r24
    vector = (item_t *)( &syscall_vectors[core] );
     944:	40 e1       	ldi	r20, 0x10	; 16
     946:	51 e0       	ldi	r21, 0x01	; 1
     948:	8b 81       	ldd	r24, Y+3	; 0x03
     94a:	28 2f       	mov	r18, r24
     94c:	30 e0       	ldi	r19, 0x00	; 0
     94e:	c9 01       	movw	r24, r18
     950:	88 0f       	add	r24, r24
     952:	99 1f       	adc	r25, r25
     954:	82 0f       	add	r24, r18
     956:	93 1f       	adc	r25, r19
     958:	88 0f       	add	r24, r24
     95a:	99 1f       	adc	r25, r25
     95c:	84 0f       	add	r24, r20
     95e:	95 1f       	adc	r25, r21
     960:	9a 83       	std	Y+2, r25	; 0x02
     962:	89 83       	std	Y+1, r24	; 0x01

    cli();
     964:	f8 94       	cli
    vm_state[current_vm].int_enabled = (bool_t)1; // Virtual interrupts MUST be eanabled !!!
     966:	80 91 1c 01 	lds	r24, 0x011C
     96a:	28 2f       	mov	r18, r24
     96c:	30 e0       	ldi	r19, 0x00	; 0
     96e:	c9 01       	movw	r24, r18
     970:	88 0f       	add	r24, r24
     972:	99 1f       	adc	r25, r25
     974:	88 0f       	add	r24, r24
     976:	99 1f       	adc	r25, r25
     978:	82 0f       	add	r24, r18
     97a:	93 1f       	adc	r25, r19
     97c:	fc 01       	movw	r30, r24
     97e:	e1 5e       	subi	r30, 0xE1	; 225
     980:	fe 4f       	sbci	r31, 0xFE	; 254
     982:	81 e0       	ldi	r24, 0x01	; 1
     984:	80 83       	st	Z, r24
    // System call is not an ordinary interrupt!!!
    // It MUST be serviced FIRST!!!
    if( vm_state[current_vm].int_fifo )
     986:	80 91 1c 01 	lds	r24, 0x011C
     98a:	28 2f       	mov	r18, r24
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	c9 01       	movw	r24, r18
     990:	88 0f       	add	r24, r24
     992:	99 1f       	adc	r25, r25
     994:	88 0f       	add	r24, r24
     996:	99 1f       	adc	r25, r25
     998:	82 0f       	add	r24, r18
     99a:	93 1f       	adc	r25, r19
     99c:	fc 01       	movw	r30, r24
     99e:	e3 5e       	subi	r30, 0xE3	; 227
     9a0:	fe 4f       	sbci	r31, 0xFE	; 254
     9a2:	80 81       	ld	r24, Z
     9a4:	91 81       	ldd	r25, Z+1	; 0x01
     9a6:	00 97       	sbiw	r24, 0x00	; 0
     9a8:	c1 f0       	breq	.+48     	; 0x9da <__stack+0xdb>
    {
        item_insert( (item_t *)vector, ((item_t *)vm_state[current_vm].int_fifo)->next );
     9aa:	80 91 1c 01 	lds	r24, 0x011C
     9ae:	28 2f       	mov	r18, r24
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	c9 01       	movw	r24, r18
     9b4:	88 0f       	add	r24, r24
     9b6:	99 1f       	adc	r25, r25
     9b8:	88 0f       	add	r24, r24
     9ba:	99 1f       	adc	r25, r25
     9bc:	82 0f       	add	r24, r18
     9be:	93 1f       	adc	r25, r19
     9c0:	fc 01       	movw	r30, r24
     9c2:	e3 5e       	subi	r30, 0xE3	; 227
     9c4:	fe 4f       	sbci	r31, 0xFE	; 254
     9c6:	01 90       	ld	r0, Z+
     9c8:	f0 81       	ld	r31, Z
     9ca:	e0 2d       	mov	r30, r0
     9cc:	20 81       	ld	r18, Z
     9ce:	31 81       	ldd	r19, Z+1	; 0x01
     9d0:	89 81       	ldd	r24, Y+1	; 0x01
     9d2:	9a 81       	ldd	r25, Y+2	; 0x02
     9d4:	b9 01       	movw	r22, r18
     9d6:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <item_insert>
    }
    vm_state[current_vm].int_fifo = (item_t *)vector;
     9da:	80 91 1c 01 	lds	r24, 0x011C
     9de:	28 2f       	mov	r18, r24
     9e0:	30 e0       	ldi	r19, 0x00	; 0
     9e2:	c9 01       	movw	r24, r18
     9e4:	88 0f       	add	r24, r24
     9e6:	99 1f       	adc	r25, r25
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25
     9ec:	82 0f       	add	r24, r18
     9ee:	93 1f       	adc	r25, r19
     9f0:	fc 01       	movw	r30, r24
     9f2:	e3 5e       	subi	r30, 0xE3	; 227
     9f4:	fe 4f       	sbci	r31, 0xFE	; 254
     9f6:	89 81       	ldd	r24, Y+1	; 0x01
     9f8:	9a 81       	ldd	r25, Y+2	; 0x02
     9fa:	91 83       	std	Z+1, r25	; 0x01
     9fc:	80 83       	st	Z, r24
    _vsmp_vinterrupt();
     9fe:	0e 94 5f 07 	call	0xebe	; 0xebe <_vsmp_vinterrupt>
}
     a02:	26 96       	adiw	r28, 0x06	; 6
     a04:	0f b6       	in	r0, 0x3f	; 63
     a06:	f8 94       	cli
     a08:	de bf       	out	0x3e, r29	; 62
     a0a:	0f be       	out	0x3f, r0	; 63
     a0c:	cd bf       	out	0x3d, r28	; 61
     a0e:	cf 91       	pop	r28
     a10:	df 91       	pop	r29
     a12:	08 95       	ret

00000a14 <init_bugurt>:
/***************************************************************************************************************/
// Функции общего пользования

void init_bugurt(void)
{
     a14:	df 93       	push	r29
     a16:	cf 93       	push	r28
     a18:	0f 92       	push	r0
     a1a:	cd b7       	in	r28, 0x3d	; 61
     a1c:	de b7       	in	r29, 0x3e	; 62
    core_id_t i;
    disable_interrupts();
     a1e:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <disable_interrupts>
    resched_vectors_init();
     a22:	0e 94 58 02 	call	0x4b0	; 0x4b0 <resched_vectors_init>
    systimer_vectors_init();
     a26:	0e 94 5d 03 	call	0x6ba	; 0x6ba <systimer_vectors_init>
    syscall_vectors_init();
     a2a:	0e 94 4a 04 	call	0x894	; 0x894 <syscall_vectors_init>
    kernel_init();
     a2e:	0e 94 46 0b 	call	0x168c	; 0x168c <kernel_init>
    kernel.sched[current_core()].nested_crit_sec = (count_t)1;
     a32:	0e 94 2d 01 	call	0x25a	; 0x25a <current_core>
     a36:	28 2f       	mov	r18, r24
     a38:	30 e0       	ldi	r19, 0x00	; 0
     a3a:	8b e2       	ldi	r24, 0x2B	; 43
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	ac 01       	movw	r20, r24
     a40:	24 9f       	mul	r18, r20
     a42:	c0 01       	movw	r24, r0
     a44:	25 9f       	mul	r18, r21
     a46:	90 0d       	add	r25, r0
     a48:	34 9f       	mul	r19, r20
     a4a:	90 0d       	add	r25, r0
     a4c:	11 24       	eor	r1, r1
     a4e:	fc 01       	movw	r30, r24
     a50:	ed 58       	subi	r30, 0x8D	; 141
     a52:	fd 4f       	sbci	r31, 0xFD	; 253
     a54:	81 e0       	ldi	r24, 0x01	; 1
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	91 83       	std	Z+1, r25	; 0x01
     a5a:	80 83       	st	Z, r24
    for(i = 1; i < MAX_CORES; i++)
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	89 83       	std	Y+1, r24	; 0x01
     a60:	17 c0       	rjmp	.+46     	; 0xa90 <init_bugurt+0x7c>
    {
        kernel.idle[i].pmain = vsmp_idle_main;
     a62:	89 81       	ldd	r24, Y+1	; 0x01
     a64:	28 2f       	mov	r18, r24
     a66:	30 e0       	ldi	r19, 0x00	; 0
     a68:	80 e3       	ldi	r24, 0x30	; 48
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	ac 01       	movw	r20, r24
     a6e:	24 9f       	mul	r18, r20
     a70:	c0 01       	movw	r24, r0
     a72:	25 9f       	mul	r18, r21
     a74:	90 0d       	add	r25, r0
     a76:	34 9f       	mul	r19, r20
     a78:	90 0d       	add	r25, r0
     a7a:	11 24       	eor	r1, r1
     a7c:	fc 01       	movw	r30, r24
     a7e:	eb 53       	subi	r30, 0x3B	; 59
     a80:	fd 4f       	sbci	r31, 0xFD	; 253
     a82:	86 e0       	ldi	r24, 0x06	; 6
     a84:	96 e0       	ldi	r25, 0x06	; 6
     a86:	91 83       	std	Z+1, r25	; 0x01
     a88:	80 83       	st	Z, r24
    resched_vectors_init();
    systimer_vectors_init();
    syscall_vectors_init();
    kernel_init();
    kernel.sched[current_core()].nested_crit_sec = (count_t)1;
    for(i = 1; i < MAX_CORES; i++)
     a8a:	89 81       	ldd	r24, Y+1	; 0x01
     a8c:	8f 5f       	subi	r24, 0xFF	; 255
     a8e:	89 83       	std	Y+1, r24	; 0x01
     a90:	89 81       	ldd	r24, Y+1	; 0x01
     a92:	82 30       	cpi	r24, 0x02	; 2
     a94:	30 f3       	brcs	.-52     	; 0xa62 <init_bugurt+0x4e>
    {
        kernel.idle[i].pmain = vsmp_idle_main;
    }
}
     a96:	0f 90       	pop	r0
     a98:	cf 91       	pop	r28
     a9a:	df 91       	pop	r29
     a9c:	08 95       	ret

00000a9e <start_bugurt>:
void start_bugurt(void)
{
     a9e:	df 93       	push	r29
     aa0:	cf 93       	push	r28
     aa2:	cd b7       	in	r28, 0x3d	; 61
     aa4:	de b7       	in	r29, 0x3e	; 62
    kernel.sched[current_core()].nested_crit_sec = (count_t)0;
     aa6:	0e 94 2d 01 	call	0x25a	; 0x25a <current_core>
     aaa:	28 2f       	mov	r18, r24
     aac:	30 e0       	ldi	r19, 0x00	; 0
     aae:	8b e2       	ldi	r24, 0x2B	; 43
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	ac 01       	movw	r20, r24
     ab4:	24 9f       	mul	r18, r20
     ab6:	c0 01       	movw	r24, r0
     ab8:	25 9f       	mul	r18, r21
     aba:	90 0d       	add	r25, r0
     abc:	34 9f       	mul	r19, r20
     abe:	90 0d       	add	r25, r0
     ac0:	11 24       	eor	r1, r1
     ac2:	fc 01       	movw	r30, r24
     ac4:	ed 58       	subi	r30, 0x8D	; 141
     ac6:	fd 4f       	sbci	r31, 0xFD	; 253
     ac8:	11 82       	std	Z+1, r1	; 0x01
     aca:	10 82       	st	Z, r1
    enable_interrupts();
     acc:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <enable_interrupts>
    cli();
     ad0:	f8 94       	cli
    vsmp_systimer_hook = vsmp_systimer_hook_bugurt;
     ad2:	89 ea       	ldi	r24, 0xA9	; 169
     ad4:	93 e0       	ldi	r25, 0x03	; 3
     ad6:	90 93 4a 02 	sts	0x024A, r25
     ada:	80 93 49 02 	sts	0x0249, r24
    sei();
     ade:	78 94       	sei
    idle_main( (void *)0 );
     ae0:	80 e0       	ldi	r24, 0x00	; 0
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	0e 94 3e 0b 	call	0x167c	; 0x167c <idle_main>
}
     ae8:	cf 91       	pop	r28
     aea:	df 91       	pop	r29
     aec:	08 95       	ret

00000aee <vsmp_vm_init>:
void (*vsmp_systimer_hook)(void);



void vsmp_vm_init( vsmp_vm_t * vm, stack_t * sp )
{
     aee:	df 93       	push	r29
     af0:	cf 93       	push	r28
     af2:	00 d0       	rcall	.+0      	; 0xaf4 <vsmp_vm_init+0x6>
     af4:	00 d0       	rcall	.+0      	; 0xaf6 <vsmp_vm_init+0x8>
     af6:	cd b7       	in	r28, 0x3d	; 61
     af8:	de b7       	in	r29, 0x3e	; 62
     afa:	9a 83       	std	Y+2, r25	; 0x02
     afc:	89 83       	std	Y+1, r24	; 0x01
     afe:	7c 83       	std	Y+4, r23	; 0x04
     b00:	6b 83       	std	Y+3, r22	; 0x03
    vm->int_fifo = (item_t *)0; // Нет прерываний;
     b02:	e9 81       	ldd	r30, Y+1	; 0x01
     b04:	fa 81       	ldd	r31, Y+2	; 0x02
     b06:	11 82       	std	Z+1, r1	; 0x01
     b08:	10 82       	st	Z, r1
    vm->int_enabled = 1;// прерывания разрешены
     b0a:	e9 81       	ldd	r30, Y+1	; 0x01
     b0c:	fa 81       	ldd	r31, Y+2	; 0x02
     b0e:	81 e0       	ldi	r24, 0x01	; 1
     b10:	82 83       	std	Z+2, r24	; 0x02
    vm->sp = (stack_t *)sp;
     b12:	e9 81       	ldd	r30, Y+1	; 0x01
     b14:	fa 81       	ldd	r31, Y+2	; 0x02
     b16:	8b 81       	ldd	r24, Y+3	; 0x03
     b18:	9c 81       	ldd	r25, Y+4	; 0x04
     b1a:	94 83       	std	Z+4, r25	; 0x04
     b1c:	83 83       	std	Z+3, r24	; 0x03
}
     b1e:	0f 90       	pop	r0
     b20:	0f 90       	pop	r0
     b22:	0f 90       	pop	r0
     b24:	0f 90       	pop	r0
     b26:	cf 91       	pop	r28
     b28:	df 91       	pop	r29
     b2a:	08 95       	ret

00000b2c <vsmp_init>:
void vsmp_init( void )
{
     b2c:	df 93       	push	r29
     b2e:	cf 93       	push	r28
     b30:	00 d0       	rcall	.+0      	; 0xb32 <vsmp_init+0x6>
     b32:	00 d0       	rcall	.+0      	; 0xb34 <vsmp_init+0x8>
     b34:	cd b7       	in	r28, 0x3d	; 61
     b36:	de b7       	in	r29, 0x3e	; 62
    cli();
     b38:	f8 94       	cli
    vsmp_vm_init( &vm_state[0], (stack_t *)0 );
     b3a:	8d e1       	ldi	r24, 0x1D	; 29
     b3c:	91 e0       	ldi	r25, 0x01	; 1
     b3e:	60 e0       	ldi	r22, 0x00	; 0
     b40:	70 e0       	ldi	r23, 0x00	; 0
     b42:	0e 94 77 05 	call	0xaee	; 0xaee <vsmp_vm_init>
    for( current_vm = 1; current_vm < MAX_CORES; current_vm++ )
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	80 93 1c 01 	sts	0x011C, r24
     b4c:	49 c0       	rjmp	.+146    	; 0xbe0 <vsmp_init+0xb4>
    {
        stack_t * vm_sp;
        unsigned short i;
        for(i = 0; i < VM_STACK_SIZE; i++ )vm_stack[current_vm - 1][i] = 0x55;
     b4e:	1a 82       	std	Y+2, r1	; 0x02
     b50:	19 82       	std	Y+1, r1	; 0x01
     b52:	15 c0       	rjmp	.+42     	; 0xb7e <vsmp_init+0x52>
     b54:	80 91 1c 01 	lds	r24, 0x011C
     b58:	88 2f       	mov	r24, r24
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	01 97       	sbiw	r24, 0x01	; 1
     b5e:	29 81       	ldd	r18, Y+1	; 0x01
     b60:	3a 81       	ldd	r19, Y+2	; 0x02
     b62:	98 2f       	mov	r25, r24
     b64:	88 27       	eor	r24, r24
     b66:	82 0f       	add	r24, r18
     b68:	93 1f       	adc	r25, r19
     b6a:	fc 01       	movw	r30, r24
     b6c:	e7 5b       	subi	r30, 0xB7	; 183
     b6e:	fe 4f       	sbci	r31, 0xFE	; 254
     b70:	85 e5       	ldi	r24, 0x55	; 85
     b72:	80 83       	st	Z, r24
     b74:	89 81       	ldd	r24, Y+1	; 0x01
     b76:	9a 81       	ldd	r25, Y+2	; 0x02
     b78:	01 96       	adiw	r24, 0x01	; 1
     b7a:	9a 83       	std	Y+2, r25	; 0x02
     b7c:	89 83       	std	Y+1, r24	; 0x01
     b7e:	89 81       	ldd	r24, Y+1	; 0x01
     b80:	9a 81       	ldd	r25, Y+2	; 0x02
     b82:	8f 3f       	cpi	r24, 0xFF	; 255
     b84:	91 05       	cpc	r25, r1
     b86:	31 f3       	breq	.-52     	; 0xb54 <vsmp_init+0x28>
     b88:	28 f3       	brcs	.-54     	; 0xb54 <vsmp_init+0x28>
        vm_sp = proc_stack_init( &vm_stack[current_vm - 1][VM_STACK_SIZE - 1], (code_t)vsmp_idle_main, (void *)0 );
     b8a:	80 91 1c 01 	lds	r24, 0x011C
     b8e:	88 2f       	mov	r24, r24
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	01 97       	sbiw	r24, 0x01	; 1
     b94:	98 2f       	mov	r25, r24
     b96:	88 27       	eor	r24, r24
     b98:	81 50       	subi	r24, 0x01	; 1
     b9a:	9f 4f       	sbci	r25, 0xFF	; 255
     b9c:	87 5b       	subi	r24, 0xB7	; 183
     b9e:	9e 4f       	sbci	r25, 0xFE	; 254
     ba0:	26 e0       	ldi	r18, 0x06	; 6
     ba2:	36 e0       	ldi	r19, 0x06	; 6
     ba4:	b9 01       	movw	r22, r18
     ba6:	40 e0       	ldi	r20, 0x00	; 0
     ba8:	50 e0       	ldi	r21, 0x00	; 0
     baa:	0e 94 22 08 	call	0x1044	; 0x1044 <proc_stack_init>
     bae:	9c 83       	std	Y+4, r25	; 0x04
     bb0:	8b 83       	std	Y+3, r24	; 0x03
        vsmp_vm_init( &vm_state[current_vm], (stack_t *)vm_sp );
     bb2:	80 91 1c 01 	lds	r24, 0x011C
     bb6:	28 2f       	mov	r18, r24
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	c9 01       	movw	r24, r18
     bbc:	88 0f       	add	r24, r24
     bbe:	99 1f       	adc	r25, r25
     bc0:	88 0f       	add	r24, r24
     bc2:	99 1f       	adc	r25, r25
     bc4:	82 0f       	add	r24, r18
     bc6:	93 1f       	adc	r25, r19
     bc8:	83 5e       	subi	r24, 0xE3	; 227
     bca:	9e 4f       	sbci	r25, 0xFE	; 254
     bcc:	2b 81       	ldd	r18, Y+3	; 0x03
     bce:	3c 81       	ldd	r19, Y+4	; 0x04
     bd0:	b9 01       	movw	r22, r18
     bd2:	0e 94 77 05 	call	0xaee	; 0xaee <vsmp_vm_init>
}
void vsmp_init( void )
{
    cli();
    vsmp_vm_init( &vm_state[0], (stack_t *)0 );
    for( current_vm = 1; current_vm < MAX_CORES; current_vm++ )
     bd6:	80 91 1c 01 	lds	r24, 0x011C
     bda:	8f 5f       	subi	r24, 0xFF	; 255
     bdc:	80 93 1c 01 	sts	0x011C, r24
     be0:	80 91 1c 01 	lds	r24, 0x011C
     be4:	82 30       	cpi	r24, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <vsmp_init+0xbe>
     be8:	b2 cf       	rjmp	.-156    	; 0xb4e <vsmp_init+0x22>
        unsigned short i;
        for(i = 0; i < VM_STACK_SIZE; i++ )vm_stack[current_vm - 1][i] = 0x55;
        vm_sp = proc_stack_init( &vm_stack[current_vm - 1][VM_STACK_SIZE - 1], (code_t)vsmp_idle_main, (void *)0 );
        vsmp_vm_init( &vm_state[current_vm], (stack_t *)vm_sp );
    }
    current_vm = 0;
     bea:	10 92 1c 01 	sts	0x011C, r1
}
     bee:	0f 90       	pop	r0
     bf0:	0f 90       	pop	r0
     bf2:	0f 90       	pop	r0
     bf4:	0f 90       	pop	r0
     bf6:	cf 91       	pop	r28
     bf8:	df 91       	pop	r29
     bfa:	08 95       	ret

00000bfc <vsmp_run>:

void vsmp_run( void )
{
     bfc:	df 93       	push	r29
     bfe:	cf 93       	push	r28
     c00:	cd b7       	in	r28, 0x3d	; 61
     c02:	de b7       	in	r29, 0x3e	; 62
    sei();
     c04:	78 94       	sei
}
     c06:	cf 91       	pop	r28
     c08:	df 91       	pop	r29
     c0a:	08 95       	ret

00000c0c <vsmp_idle_main>:
void vsmp_idle_main( void * arg )
{
     c0c:	df 93       	push	r29
     c0e:	cf 93       	push	r28
     c10:	00 d0       	rcall	.+0      	; 0xc12 <vsmp_idle_main+0x6>
     c12:	cd b7       	in	r28, 0x3d	; 61
     c14:	de b7       	in	r29, 0x3e	; 62
     c16:	9a 83       	std	Y+2, r25	; 0x02
     c18:	89 83       	std	Y+1, r24	; 0x01
     c1a:	ff cf       	rjmp	.-2      	; 0xc1a <vsmp_idle_main+0xe>

00000c1c <vsmp_do_interrupt>:
    while(1);
}

bool_t vsmp_do_interrupt(void)
{
     c1c:	df 93       	push	r29
     c1e:	cf 93       	push	r28
     c20:	0f 92       	push	r0
     c22:	cd b7       	in	r28, 0x3d	; 61
     c24:	de b7       	in	r29, 0x3e	; 62
    // if current vm is interruptible and there are some interrupts in fifo,
    if( (vm_state[current_vm].int_enabled) && (vm_state[current_vm].int_fifo) )
     c26:	80 91 1c 01 	lds	r24, 0x011C
     c2a:	28 2f       	mov	r18, r24
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	c9 01       	movw	r24, r18
     c30:	88 0f       	add	r24, r24
     c32:	99 1f       	adc	r25, r25
     c34:	88 0f       	add	r24, r24
     c36:	99 1f       	adc	r25, r25
     c38:	82 0f       	add	r24, r18
     c3a:	93 1f       	adc	r25, r19
     c3c:	fc 01       	movw	r30, r24
     c3e:	e1 5e       	subi	r30, 0xE1	; 225
     c40:	fe 4f       	sbci	r31, 0xFE	; 254
     c42:	80 81       	ld	r24, Z
     c44:	88 23       	and	r24, r24
     c46:	09 f4       	brne	.+2      	; 0xc4a <vsmp_do_interrupt+0x2e>
     c48:	71 c0       	rjmp	.+226    	; 0xd2c <vsmp_do_interrupt+0x110>
     c4a:	80 91 1c 01 	lds	r24, 0x011C
     c4e:	28 2f       	mov	r18, r24
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	c9 01       	movw	r24, r18
     c54:	88 0f       	add	r24, r24
     c56:	99 1f       	adc	r25, r25
     c58:	88 0f       	add	r24, r24
     c5a:	99 1f       	adc	r25, r25
     c5c:	82 0f       	add	r24, r18
     c5e:	93 1f       	adc	r25, r19
     c60:	fc 01       	movw	r30, r24
     c62:	e3 5e       	subi	r30, 0xE3	; 227
     c64:	fe 4f       	sbci	r31, 0xFE	; 254
     c66:	80 81       	ld	r24, Z
     c68:	91 81       	ldd	r25, Z+1	; 0x01
     c6a:	00 97       	sbiw	r24, 0x00	; 0
     c6c:	09 f4       	brne	.+2      	; 0xc70 <vsmp_do_interrupt+0x54>
     c6e:	5e c0       	rjmp	.+188    	; 0xd2c <vsmp_do_interrupt+0x110>
    {
        // cut head interrupt,
        vm_buf = (void *)vm_state[current_vm].int_fifo;
     c70:	80 91 1c 01 	lds	r24, 0x011C
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	c9 01       	movw	r24, r18
     c7a:	88 0f       	add	r24, r24
     c7c:	99 1f       	adc	r25, r25
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	82 0f       	add	r24, r18
     c84:	93 1f       	adc	r25, r19
     c86:	fc 01       	movw	r30, r24
     c88:	e3 5e       	subi	r30, 0xE3	; 227
     c8a:	fe 4f       	sbci	r31, 0xFE	; 254
     c8c:	80 81       	ld	r24, Z
     c8e:	91 81       	ldd	r25, Z+1	; 0x01
     c90:	90 93 48 01 	sts	0x0148, r25
     c94:	80 93 47 01 	sts	0x0147, r24
        if( vm_buf == (void *)((item_t *)vm_buf)->next )
     c98:	80 91 47 01 	lds	r24, 0x0147
     c9c:	90 91 48 01 	lds	r25, 0x0148
     ca0:	fc 01       	movw	r30, r24
     ca2:	20 81       	ld	r18, Z
     ca4:	31 81       	ldd	r19, Z+1	; 0x01
     ca6:	80 91 47 01 	lds	r24, 0x0147
     caa:	90 91 48 01 	lds	r25, 0x0148
     cae:	28 17       	cp	r18, r24
     cb0:	39 07       	cpc	r19, r25
     cb2:	89 f4       	brne	.+34     	; 0xcd6 <vsmp_do_interrupt+0xba>
        {
            /* only one interrupt in fifo */
            vm_state[current_vm].int_fifo = (item_t *)0;
     cb4:	80 91 1c 01 	lds	r24, 0x011C
     cb8:	28 2f       	mov	r18, r24
     cba:	30 e0       	ldi	r19, 0x00	; 0
     cbc:	c9 01       	movw	r24, r18
     cbe:	88 0f       	add	r24, r24
     cc0:	99 1f       	adc	r25, r25
     cc2:	88 0f       	add	r24, r24
     cc4:	99 1f       	adc	r25, r25
     cc6:	82 0f       	add	r24, r18
     cc8:	93 1f       	adc	r25, r19
     cca:	fc 01       	movw	r30, r24
     ccc:	e3 5e       	subi	r30, 0xE3	; 227
     cce:	fe 4f       	sbci	r31, 0xFE	; 254
     cd0:	11 82       	std	Z+1, r1	; 0x01
     cd2:	10 82       	st	Z, r1
     cd4:	1d c0       	rjmp	.+58     	; 0xd10 <vsmp_do_interrupt+0xf4>
        }
        else
        {
            /* many interrupts in fifo */
            vm_state[current_vm].int_fifo = (void *)((item_t *)vm_buf)->next;
     cd6:	80 91 1c 01 	lds	r24, 0x011C
     cda:	28 2f       	mov	r18, r24
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	80 91 47 01 	lds	r24, 0x0147
     ce2:	90 91 48 01 	lds	r25, 0x0148
     ce6:	fc 01       	movw	r30, r24
     ce8:	40 81       	ld	r20, Z
     cea:	51 81       	ldd	r21, Z+1	; 0x01
     cec:	c9 01       	movw	r24, r18
     cee:	88 0f       	add	r24, r24
     cf0:	99 1f       	adc	r25, r25
     cf2:	88 0f       	add	r24, r24
     cf4:	99 1f       	adc	r25, r25
     cf6:	82 0f       	add	r24, r18
     cf8:	93 1f       	adc	r25, r19
     cfa:	fc 01       	movw	r30, r24
     cfc:	e3 5e       	subi	r30, 0xE3	; 227
     cfe:	fe 4f       	sbci	r31, 0xFE	; 254
     d00:	51 83       	std	Z+1, r21	; 0x01
     d02:	40 83       	st	Z, r20
            item_cut( (item_t *)vm_buf );
     d04:	80 91 47 01 	lds	r24, 0x0147
     d08:	90 91 48 01 	lds	r25, 0x0148
     d0c:	0e 94 08 0b 	call	0x1610	; 0x1610 <item_cut>
        }
        // write its isr pointer to vm_buf,
        vm_buf = (void *)(((vinterrupt_t *)vm_buf)->isr);
     d10:	80 91 47 01 	lds	r24, 0x0147
     d14:	90 91 48 01 	lds	r25, 0x0148
     d18:	fc 01       	movw	r30, r24
     d1a:	84 81       	ldd	r24, Z+4	; 0x04
     d1c:	95 81       	ldd	r25, Z+5	; 0x05
     d1e:	90 93 48 01 	sts	0x0148, r25
     d22:	80 93 47 01 	sts	0x0147, r24
        // and return 1;
        return (bool_t)1;
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	89 83       	std	Y+1, r24	; 0x01
     d2a:	01 c0       	rjmp	.+2      	; 0xd2e <vsmp_do_interrupt+0x112>
    }
    // else return 0.
    return (bool_t)0;
     d2c:	19 82       	std	Y+1, r1	; 0x01
     d2e:	89 81       	ldd	r24, Y+1	; 0x01
}
     d30:	0f 90       	pop	r0
     d32:	cf 91       	pop	r28
     d34:	df 91       	pop	r29
     d36:	08 95       	ret

00000d38 <_vinterrupt_wrapper>:
                       Virtual interrupts wrapper functions.
    Local variable is used to call virtual ISR, so wrapper must have two parts.
*/
// Nested part, uses local variables, so compiler generated prologue and epilogue are needed.
static void _vinterrupt_wrapper(void)
{
     d38:	df 93       	push	r29
     d3a:	cf 93       	push	r28
     d3c:	00 d0       	rcall	.+0      	; 0xd3e <_vinterrupt_wrapper+0x6>
     d3e:	cd b7       	in	r28, 0x3d	; 61
     d40:	de b7       	in	r29, 0x3e	; 62
    void (*isr)(void);
    vm_state[current_vm].int_enabled = (bool_t)0; // Virtual interrupt nesting is not alowed by default.
     d42:	80 91 1c 01 	lds	r24, 0x011C
     d46:	28 2f       	mov	r18, r24
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	c9 01       	movw	r24, r18
     d4c:	88 0f       	add	r24, r24
     d4e:	99 1f       	adc	r25, r25
     d50:	88 0f       	add	r24, r24
     d52:	99 1f       	adc	r25, r25
     d54:	82 0f       	add	r24, r18
     d56:	93 1f       	adc	r25, r19
     d58:	fc 01       	movw	r30, r24
     d5a:	e1 5e       	subi	r30, 0xE1	; 225
     d5c:	fe 4f       	sbci	r31, 0xFE	; 254
     d5e:	10 82       	st	Z, r1
    isr = (void (*)(void))vm_buf;
     d60:	80 91 47 01 	lds	r24, 0x0147
     d64:	90 91 48 01 	lds	r25, 0x0148
     d68:	9a 83       	std	Y+2, r25	; 0x02
     d6a:	89 83       	std	Y+1, r24	; 0x01
    // After vm-buf read we can reenable real interrupts!
    sei();
     d6c:	78 94       	sei
    isr();
     d6e:	e9 81       	ldd	r30, Y+1	; 0x01
     d70:	fa 81       	ldd	r31, Y+2	; 0x02
     d72:	09 95       	icall
}
     d74:	0f 90       	pop	r0
     d76:	0f 90       	pop	r0
     d78:	cf 91       	pop	r28
     d7a:	df 91       	pop	r29
     d7c:	08 95       	ret

00000d7e <vinterrupt_wrapper>:
// Nesting part, no prologue and hand made epilogue.
__attribute__ (( naked )) void vinterrupt_wrapper(void)
{
    _vinterrupt_wrapper();
     d7e:	0e 94 9c 06 	call	0xd38	; 0xd38 <_vinterrupt_wrapper>
    cli();
     d82:	f8 94       	cli
    // Virtual interrupts are enabled after interrupt processing.
    vm_state[current_vm].int_enabled = (bool_t)1;
     d84:	80 91 1c 01 	lds	r24, 0x011C
     d88:	28 2f       	mov	r18, r24
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	c9 01       	movw	r24, r18
     d8e:	88 0f       	add	r24, r24
     d90:	99 1f       	adc	r25, r25
     d92:	88 0f       	add	r24, r24
     d94:	99 1f       	adc	r25, r25
     d96:	82 0f       	add	r24, r18
     d98:	93 1f       	adc	r25, r19
     d9a:	fc 01       	movw	r30, r24
     d9c:	e1 5e       	subi	r30, 0xE1	; 225
     d9e:	fe 4f       	sbci	r31, 0xFE	; 254
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	80 83       	st	Z, r24
    vm_buf = (void *)bugurt_save_context();
    vm_state[current_vm].sp = (stack_t *)vm_buf;
}
__MACRO_FUNCTION__( _vsmp_interrupt_epilogue )
{
    if( vsmp_do_interrupt() ) goto vinterrupt_return;
     da4:	0e 94 0e 06 	call	0xc1c	; 0xc1c <vsmp_do_interrupt>
     da8:	88 23       	and	r24, r24
     daa:	99 f4       	brne	.+38     	; 0xdd2 <vinterrupt_wrapper+0x54>

    bugurt_restore_context( vm_state[current_vm].sp ); // Will return to current vm operation!
     dac:	80 91 1c 01 	lds	r24, 0x011C
     db0:	28 2f       	mov	r18, r24
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	c9 01       	movw	r24, r18
     db6:	88 0f       	add	r24, r24
     db8:	99 1f       	adc	r25, r25
     dba:	88 0f       	add	r24, r24
     dbc:	99 1f       	adc	r25, r25
     dbe:	82 0f       	add	r24, r18
     dc0:	93 1f       	adc	r25, r19
     dc2:	fc 01       	movw	r30, r24
     dc4:	e0 5e       	subi	r30, 0xE0	; 224
     dc6:	fe 4f       	sbci	r31, 0xFE	; 254
     dc8:	80 81       	ld	r24, Z
     dca:	91 81       	ldd	r25, Z+1	; 0x01
     dcc:	0e 94 9a 00 	call	0x134	; 0x134 <bugurt_restore_context>
    __asm__ __volatile__("reti"::);
     dd0:	18 95       	reti

vinterrupt_return:
    bugurt_set_stack_pointer( vm_state[current_vm].sp );
     dd2:	80 91 1c 01 	lds	r24, 0x011C
     dd6:	28 2f       	mov	r18, r24
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	c9 01       	movw	r24, r18
     ddc:	88 0f       	add	r24, r24
     dde:	99 1f       	adc	r25, r25
     de0:	88 0f       	add	r24, r24
     de2:	99 1f       	adc	r25, r25
     de4:	82 0f       	add	r24, r18
     de6:	93 1f       	adc	r25, r19
     de8:	fc 01       	movw	r30, r24
     dea:	e0 5e       	subi	r30, 0xE0	; 224
     dec:	fe 4f       	sbci	r31, 0xFE	; 254
     dee:	80 81       	ld	r24, Z
     df0:	91 81       	ldd	r25, Z+1	; 0x01
     df2:	0e 94 c5 00 	call	0x18a	; 0x18a <bugurt_set_stack_pointer>
    bugurt_push_pointer( (void *)vinterrupt_wrapper ); // Will return to vinterrupt_wrapper() entry point!
     df6:	8f eb       	ldi	r24, 0xBF	; 191
     df8:	96 e0       	ldi	r25, 0x06	; 6
     dfa:	0e 94 cd 00 	call	0x19a	; 0x19a <bugurt_push_pointer>
    __asm__ __volatile__("ret"::);
     dfe:	08 95       	ret

00000e00 <__vector_7>:
}

/* Virtual interrupt prologue and epilogue inline functions (I can,t debug macros !) */
__MACRO_FUNCTION__( _vsmp_interrupt_prologue )
{
    vm_buf = (void *)bugurt_save_context();
     e00:	0e 94 6b 00 	call	0xd6	; 0xd6 <bugurt_save_context>
     e04:	90 93 48 01 	sts	0x0148, r25
     e08:	80 93 47 01 	sts	0x0147, r24
    vm_state[current_vm].sp = (stack_t *)vm_buf;
     e0c:	80 91 1c 01 	lds	r24, 0x011C
     e10:	28 2f       	mov	r18, r24
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	80 91 47 01 	lds	r24, 0x0147
     e18:	90 91 48 01 	lds	r25, 0x0148
     e1c:	ac 01       	movw	r20, r24
     e1e:	c9 01       	movw	r24, r18
     e20:	88 0f       	add	r24, r24
     e22:	99 1f       	adc	r25, r25
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	82 0f       	add	r24, r18
     e2a:	93 1f       	adc	r25, r19
     e2c:	fc 01       	movw	r30, r24
     e2e:	e0 5e       	subi	r30, 0xE0	; 224
     e30:	fe 4f       	sbci	r31, 0xFE	; 254
     e32:	51 83       	std	Z+1, r21	; 0x01
     e34:	40 83       	st	Z, r20
__attribute__ (( signal, naked )) void SYSTEM_TIMER_ISR(void);
void SYSTEM_TIMER_ISR(void)
{
    _vsmp_interrupt_prologue();

    current_vm++;
     e36:	80 91 1c 01 	lds	r24, 0x011C
     e3a:	8f 5f       	subi	r24, 0xFF	; 255
     e3c:	80 93 1c 01 	sts	0x011C, r24
    if(current_vm >= MAX_CORES)current_vm = (core_id_t)0;
     e40:	80 91 1c 01 	lds	r24, 0x011C
     e44:	82 30       	cpi	r24, 0x02	; 2
     e46:	10 f0       	brcs	.+4      	; 0xe4c <__vector_7+0x4c>
     e48:	10 92 1c 01 	sts	0x011C, r1

    if(vsmp_systimer_hook)
     e4c:	80 91 49 02 	lds	r24, 0x0249
     e50:	90 91 4a 02 	lds	r25, 0x024A
     e54:	00 97       	sbiw	r24, 0x00	; 0
     e56:	29 f0       	breq	.+10     	; 0xe62 <__vector_7+0x62>
    {
        vsmp_systimer_hook();
     e58:	e0 91 49 02 	lds	r30, 0x0249
     e5c:	f0 91 4a 02 	lds	r31, 0x024A
     e60:	09 95       	icall
    vm_buf = (void *)bugurt_save_context();
    vm_state[current_vm].sp = (stack_t *)vm_buf;
}
__MACRO_FUNCTION__( _vsmp_interrupt_epilogue )
{
    if( vsmp_do_interrupt() ) goto vinterrupt_return;
     e62:	0e 94 0e 06 	call	0xc1c	; 0xc1c <vsmp_do_interrupt>
     e66:	88 23       	and	r24, r24
     e68:	99 f4       	brne	.+38     	; 0xe90 <__vector_7+0x90>

    bugurt_restore_context( vm_state[current_vm].sp ); // Will return to current vm operation!
     e6a:	80 91 1c 01 	lds	r24, 0x011C
     e6e:	28 2f       	mov	r18, r24
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	c9 01       	movw	r24, r18
     e74:	88 0f       	add	r24, r24
     e76:	99 1f       	adc	r25, r25
     e78:	88 0f       	add	r24, r24
     e7a:	99 1f       	adc	r25, r25
     e7c:	82 0f       	add	r24, r18
     e7e:	93 1f       	adc	r25, r19
     e80:	fc 01       	movw	r30, r24
     e82:	e0 5e       	subi	r30, 0xE0	; 224
     e84:	fe 4f       	sbci	r31, 0xFE	; 254
     e86:	80 81       	ld	r24, Z
     e88:	91 81       	ldd	r25, Z+1	; 0x01
     e8a:	0e 94 9a 00 	call	0x134	; 0x134 <bugurt_restore_context>
    __asm__ __volatile__("reti"::);
     e8e:	18 95       	reti

vinterrupt_return:
    bugurt_set_stack_pointer( vm_state[current_vm].sp );
     e90:	80 91 1c 01 	lds	r24, 0x011C
     e94:	28 2f       	mov	r18, r24
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	c9 01       	movw	r24, r18
     e9a:	88 0f       	add	r24, r24
     e9c:	99 1f       	adc	r25, r25
     e9e:	88 0f       	add	r24, r24
     ea0:	99 1f       	adc	r25, r25
     ea2:	82 0f       	add	r24, r18
     ea4:	93 1f       	adc	r25, r19
     ea6:	fc 01       	movw	r30, r24
     ea8:	e0 5e       	subi	r30, 0xE0	; 224
     eaa:	fe 4f       	sbci	r31, 0xFE	; 254
     eac:	80 81       	ld	r24, Z
     eae:	91 81       	ldd	r25, Z+1	; 0x01
     eb0:	0e 94 c5 00 	call	0x18a	; 0x18a <bugurt_set_stack_pointer>
    bugurt_push_pointer( (void *)vinterrupt_wrapper ); // Will return to vinterrupt_wrapper() entry point!
     eb4:	8f eb       	ldi	r24, 0xBF	; 191
     eb6:	96 e0       	ldi	r25, 0x06	; 6
     eb8:	0e 94 cd 00 	call	0x19a	; 0x19a <bugurt_push_pointer>
    __asm__ __volatile__("ret"::);
     ebc:	08 95       	ret

00000ebe <_vsmp_vinterrupt>:
}

/* Virtual interrupt prologue and epilogue inline functions (I can,t debug macros !) */
__MACRO_FUNCTION__( _vsmp_interrupt_prologue )
{
    vm_buf = (void *)bugurt_save_context();
     ebe:	0e 94 6b 00 	call	0xd6	; 0xd6 <bugurt_save_context>
     ec2:	90 93 48 01 	sts	0x0148, r25
     ec6:	80 93 47 01 	sts	0x0147, r24
    vm_state[current_vm].sp = (stack_t *)vm_buf;
     eca:	80 91 1c 01 	lds	r24, 0x011C
     ece:	28 2f       	mov	r18, r24
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	80 91 47 01 	lds	r24, 0x0147
     ed6:	90 91 48 01 	lds	r25, 0x0148
     eda:	ac 01       	movw	r20, r24
     edc:	c9 01       	movw	r24, r18
     ede:	88 0f       	add	r24, r24
     ee0:	99 1f       	adc	r25, r25
     ee2:	88 0f       	add	r24, r24
     ee4:	99 1f       	adc	r25, r25
     ee6:	82 0f       	add	r24, r18
     ee8:	93 1f       	adc	r25, r19
     eea:	fc 01       	movw	r30, r24
     eec:	e0 5e       	subi	r30, 0xE0	; 224
     eee:	fe 4f       	sbci	r31, 0xFE	; 254
     ef0:	51 83       	std	Z+1, r21	; 0x01
     ef2:	40 83       	st	Z, r20
}
__MACRO_FUNCTION__( _vsmp_interrupt_epilogue )
{
    if( vsmp_do_interrupt() ) goto vinterrupt_return;
     ef4:	0e 94 0e 06 	call	0xc1c	; 0xc1c <vsmp_do_interrupt>
     ef8:	88 23       	and	r24, r24
     efa:	99 f4       	brne	.+38     	; 0xf22 <_vsmp_vinterrupt+0x64>

    bugurt_restore_context( vm_state[current_vm].sp ); // Will return to current vm operation!
     efc:	80 91 1c 01 	lds	r24, 0x011C
     f00:	28 2f       	mov	r18, r24
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	c9 01       	movw	r24, r18
     f06:	88 0f       	add	r24, r24
     f08:	99 1f       	adc	r25, r25
     f0a:	88 0f       	add	r24, r24
     f0c:	99 1f       	adc	r25, r25
     f0e:	82 0f       	add	r24, r18
     f10:	93 1f       	adc	r25, r19
     f12:	fc 01       	movw	r30, r24
     f14:	e0 5e       	subi	r30, 0xE0	; 224
     f16:	fe 4f       	sbci	r31, 0xFE	; 254
     f18:	80 81       	ld	r24, Z
     f1a:	91 81       	ldd	r25, Z+1	; 0x01
     f1c:	0e 94 9a 00 	call	0x134	; 0x134 <bugurt_restore_context>
    __asm__ __volatile__("reti"::);
     f20:	18 95       	reti

vinterrupt_return:
    bugurt_set_stack_pointer( vm_state[current_vm].sp );
     f22:	80 91 1c 01 	lds	r24, 0x011C
     f26:	28 2f       	mov	r18, r24
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	c9 01       	movw	r24, r18
     f2c:	88 0f       	add	r24, r24
     f2e:	99 1f       	adc	r25, r25
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	82 0f       	add	r24, r18
     f36:	93 1f       	adc	r25, r19
     f38:	fc 01       	movw	r30, r24
     f3a:	e0 5e       	subi	r30, 0xE0	; 224
     f3c:	fe 4f       	sbci	r31, 0xFE	; 254
     f3e:	80 81       	ld	r24, Z
     f40:	91 81       	ldd	r25, Z+1	; 0x01
     f42:	0e 94 c5 00 	call	0x18a	; 0x18a <bugurt_set_stack_pointer>
    bugurt_push_pointer( (void *)vinterrupt_wrapper ); // Will return to vinterrupt_wrapper() entry point!
     f46:	8f eb       	ldi	r24, 0xBF	; 191
     f48:	96 e0       	ldi	r25, 0x06	; 6
     f4a:	0e 94 cd 00 	call	0x19a	; 0x19a <bugurt_push_pointer>
    __asm__ __volatile__("ret"::);
     f4e:	08 95       	ret

00000f50 <vsmp_vinterrupt_isr>:
    _vsmp_interrupt_epilogue();
}

// Software virtual interrupt ( For ISR usage only ! Do NOT call from "main"!)
void vsmp_vinterrupt_isr( core_id_t vm, vinterrupt_t * vector )
{
     f50:	df 93       	push	r29
     f52:	cf 93       	push	r28
     f54:	00 d0       	rcall	.+0      	; 0xf56 <vsmp_vinterrupt_isr+0x6>
     f56:	0f 92       	push	r0
     f58:	cd b7       	in	r28, 0x3d	; 61
     f5a:	de b7       	in	r29, 0x3e	; 62
     f5c:	89 83       	std	Y+1, r24	; 0x01
     f5e:	7b 83       	std	Y+3, r23	; 0x03
     f60:	6a 83       	std	Y+2, r22	; 0x02
    if( vm_state[vm].int_fifo )
     f62:	89 81       	ldd	r24, Y+1	; 0x01
     f64:	28 2f       	mov	r18, r24
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	c9 01       	movw	r24, r18
     f6a:	88 0f       	add	r24, r24
     f6c:	99 1f       	adc	r25, r25
     f6e:	88 0f       	add	r24, r24
     f70:	99 1f       	adc	r25, r25
     f72:	82 0f       	add	r24, r18
     f74:	93 1f       	adc	r25, r19
     f76:	fc 01       	movw	r30, r24
     f78:	e3 5e       	subi	r30, 0xE3	; 227
     f7a:	fe 4f       	sbci	r31, 0xFE	; 254
     f7c:	80 81       	ld	r24, Z
     f7e:	91 81       	ldd	r25, Z+1	; 0x01
     f80:	00 97       	sbiw	r24, 0x00	; 0
     f82:	b1 f0       	breq	.+44     	; 0xfb0 <vsmp_vinterrupt_isr+0x60>
    {
        item_insert( (item_t *)vector, (item_t *)vm_state[vm].int_fifo );
     f84:	4a 81       	ldd	r20, Y+2	; 0x02
     f86:	5b 81       	ldd	r21, Y+3	; 0x03
     f88:	89 81       	ldd	r24, Y+1	; 0x01
     f8a:	28 2f       	mov	r18, r24
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	c9 01       	movw	r24, r18
     f90:	88 0f       	add	r24, r24
     f92:	99 1f       	adc	r25, r25
     f94:	88 0f       	add	r24, r24
     f96:	99 1f       	adc	r25, r25
     f98:	82 0f       	add	r24, r18
     f9a:	93 1f       	adc	r25, r19
     f9c:	fc 01       	movw	r30, r24
     f9e:	e3 5e       	subi	r30, 0xE3	; 227
     fa0:	fe 4f       	sbci	r31, 0xFE	; 254
     fa2:	20 81       	ld	r18, Z
     fa4:	31 81       	ldd	r19, Z+1	; 0x01
     fa6:	ca 01       	movw	r24, r20
     fa8:	b9 01       	movw	r22, r18
     faa:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <item_insert>
     fae:	11 c0       	rjmp	.+34     	; 0xfd2 <vsmp_vinterrupt_isr+0x82>
    }
    else
    {
        vm_state[vm].int_fifo = (item_t *)vector;
     fb0:	89 81       	ldd	r24, Y+1	; 0x01
     fb2:	28 2f       	mov	r18, r24
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	4a 81       	ldd	r20, Y+2	; 0x02
     fb8:	5b 81       	ldd	r21, Y+3	; 0x03
     fba:	c9 01       	movw	r24, r18
     fbc:	88 0f       	add	r24, r24
     fbe:	99 1f       	adc	r25, r25
     fc0:	88 0f       	add	r24, r24
     fc2:	99 1f       	adc	r25, r25
     fc4:	82 0f       	add	r24, r18
     fc6:	93 1f       	adc	r25, r19
     fc8:	fc 01       	movw	r30, r24
     fca:	e3 5e       	subi	r30, 0xE3	; 227
     fcc:	fe 4f       	sbci	r31, 0xFE	; 254
     fce:	51 83       	std	Z+1, r21	; 0x01
     fd0:	40 83       	st	Z, r20
    }
}
     fd2:	0f 90       	pop	r0
     fd4:	0f 90       	pop	r0
     fd6:	0f 90       	pop	r0
     fd8:	cf 91       	pop	r28
     fda:	df 91       	pop	r29
     fdc:	08 95       	ret

00000fde <vsmp_vinterrupt>:
// Software virtual interrupt ( Use in "main" only ! Do NOT call from ISR!)
void vsmp_vinterrupt( core_id_t vm, vinterrupt_t * vector )
{
     fde:	df 93       	push	r29
     fe0:	cf 93       	push	r28
     fe2:	00 d0       	rcall	.+0      	; 0xfe4 <vsmp_vinterrupt+0x6>
     fe4:	0f 92       	push	r0
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
     fea:	89 83       	std	Y+1, r24	; 0x01
     fec:	7b 83       	std	Y+3, r23	; 0x03
     fee:	6a 83       	std	Y+2, r22	; 0x02
    cli();
     ff0:	f8 94       	cli
    vsmp_vinterrupt_isr( vm, vector );
     ff2:	2a 81       	ldd	r18, Y+2	; 0x02
     ff4:	3b 81       	ldd	r19, Y+3	; 0x03
     ff6:	89 81       	ldd	r24, Y+1	; 0x01
     ff8:	b9 01       	movw	r22, r18
     ffa:	0e 94 a8 07 	call	0xf50	; 0xf50 <vsmp_vinterrupt_isr>
    _vsmp_vinterrupt();
     ffe:	0e 94 5f 07 	call	0xebe	; 0xebe <_vsmp_vinterrupt>
}
    1002:	0f 90       	pop	r0
    1004:	0f 90       	pop	r0
    1006:	0f 90       	pop	r0
    1008:	cf 91       	pop	r28
    100a:	df 91       	pop	r29
    100c:	08 95       	ret

0000100e <vsmp_vinterrupt_init>:

void vsmp_vinterrupt_init( vinterrupt_t * vector, void (*isr)(void) )
{
    100e:	df 93       	push	r29
    1010:	cf 93       	push	r28
    1012:	00 d0       	rcall	.+0      	; 0x1014 <vsmp_vinterrupt_init+0x6>
    1014:	00 d0       	rcall	.+0      	; 0x1016 <vsmp_vinterrupt_init+0x8>
    1016:	cd b7       	in	r28, 0x3d	; 61
    1018:	de b7       	in	r29, 0x3e	; 62
    101a:	9a 83       	std	Y+2, r25	; 0x02
    101c:	89 83       	std	Y+1, r24	; 0x01
    101e:	7c 83       	std	Y+4, r23	; 0x04
    1020:	6b 83       	std	Y+3, r22	; 0x03
    item_init( (item_t *)vector );
    1022:	89 81       	ldd	r24, Y+1	; 0x01
    1024:	9a 81       	ldd	r25, Y+2	; 0x02
    1026:	0e 94 be 0a 	call	0x157c	; 0x157c <item_init>
    vector->isr = isr;
    102a:	e9 81       	ldd	r30, Y+1	; 0x01
    102c:	fa 81       	ldd	r31, Y+2	; 0x02
    102e:	8b 81       	ldd	r24, Y+3	; 0x03
    1030:	9c 81       	ldd	r25, Y+4	; 0x04
    1032:	95 83       	std	Z+5, r25	; 0x05
    1034:	84 83       	std	Z+4, r24	; 0x04
}
    1036:	0f 90       	pop	r0
    1038:	0f 90       	pop	r0
    103a:	0f 90       	pop	r0
    103c:	0f 90       	pop	r0
    103e:	cf 91       	pop	r28
    1040:	df 91       	pop	r29
    1042:	08 95       	ret

00001044 <proc_stack_init>:
#include"../../../include/bugurt.h"
stack_t * proc_stack_init(stack_t * sstart, code_t code, void * arg)
{
    1044:	df 93       	push	r29
    1046:	cf 93       	push	r28
    1048:	cd b7       	in	r28, 0x3d	; 61
    104a:	de b7       	in	r29, 0x3e	; 62
    104c:	2a 97       	sbiw	r28, 0x0a	; 10
    104e:	0f b6       	in	r0, 0x3f	; 63
    1050:	f8 94       	cli
    1052:	de bf       	out	0x3e, r29	; 62
    1054:	0f be       	out	0x3f, r0	; 63
    1056:	cd bf       	out	0x3d, r28	; 61
    1058:	9e 83       	std	Y+6, r25	; 0x06
    105a:	8d 83       	std	Y+5, r24	; 0x05
    105c:	78 87       	std	Y+8, r23	; 0x08
    105e:	6f 83       	std	Y+7, r22	; 0x07
    1060:	5a 87       	std	Y+10, r21	; 0x0a
    1062:	49 87       	std	Y+9, r20	; 0x09
    stack_t * tos = (stack_t *)sstart;
    1064:	8d 81       	ldd	r24, Y+5	; 0x05
    1066:	9e 81       	ldd	r25, Y+6	; 0x06
    1068:	9c 83       	std	Y+4, r25	; 0x04
    106a:	8b 83       	std	Y+3, r24	; 0x03
    // return address
    unsigned short tmp = (unsigned short)code;
    106c:	8f 81       	ldd	r24, Y+7	; 0x07
    106e:	98 85       	ldd	r25, Y+8	; 0x08
    1070:	9a 83       	std	Y+2, r25	; 0x02
    1072:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (stack_t)(tmp&(unsigned short)0x00ff);
    1074:	89 81       	ldd	r24, Y+1	; 0x01
    1076:	eb 81       	ldd	r30, Y+3	; 0x03
    1078:	fc 81       	ldd	r31, Y+4	; 0x04
    107a:	80 83       	st	Z, r24
    107c:	8b 81       	ldd	r24, Y+3	; 0x03
    107e:	9c 81       	ldd	r25, Y+4	; 0x04
    1080:	01 97       	sbiw	r24, 0x01	; 1
    1082:	9c 83       	std	Y+4, r25	; 0x04
    1084:	8b 83       	std	Y+3, r24	; 0x03
    tmp>>=8;
    1086:	89 81       	ldd	r24, Y+1	; 0x01
    1088:	9a 81       	ldd	r25, Y+2	; 0x02
    108a:	89 2f       	mov	r24, r25
    108c:	99 27       	eor	r25, r25
    108e:	9a 83       	std	Y+2, r25	; 0x02
    1090:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (stack_t)(tmp&(unsigned short)0x00ff);
    1092:	89 81       	ldd	r24, Y+1	; 0x01
    1094:	eb 81       	ldd	r30, Y+3	; 0x03
    1096:	fc 81       	ldd	r31, Y+4	; 0x04
    1098:	80 83       	st	Z, r24
    109a:	8b 81       	ldd	r24, Y+3	; 0x03
    109c:	9c 81       	ldd	r25, Y+4	; 0x04
    109e:	01 97       	sbiw	r24, 0x01	; 1
    10a0:	9c 83       	std	Y+4, r25	; 0x04
    10a2:	8b 83       	std	Y+3, r24	; 0x03

    // s
    *tos-- = 0x00;
    10a4:	eb 81       	ldd	r30, Y+3	; 0x03
    10a6:	fc 81       	ldd	r31, Y+4	; 0x04
    10a8:	10 82       	st	Z, r1
    10aa:	8b 81       	ldd	r24, Y+3	; 0x03
    10ac:	9c 81       	ldd	r25, Y+4	; 0x04
    10ae:	01 97       	sbiw	r24, 0x01	; 1
    10b0:	9c 83       	std	Y+4, r25	; 0x04
    10b2:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x00;// r1 must B 0
    10b4:	eb 81       	ldd	r30, Y+3	; 0x03
    10b6:	fc 81       	ldd	r31, Y+4	; 0x04
    10b8:	10 82       	st	Z, r1
    10ba:	8b 81       	ldd	r24, Y+3	; 0x03
    10bc:	9c 81       	ldd	r25, Y+4	; 0x04
    10be:	01 97       	sbiw	r24, 0x01	; 1
    10c0:	9c 83       	std	Y+4, r25	; 0x04
    10c2:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x02;// r2
    10c4:	eb 81       	ldd	r30, Y+3	; 0x03
    10c6:	fc 81       	ldd	r31, Y+4	; 0x04
    10c8:	82 e0       	ldi	r24, 0x02	; 2
    10ca:	80 83       	st	Z, r24
    10cc:	8b 81       	ldd	r24, Y+3	; 0x03
    10ce:	9c 81       	ldd	r25, Y+4	; 0x04
    10d0:	01 97       	sbiw	r24, 0x01	; 1
    10d2:	9c 83       	std	Y+4, r25	; 0x04
    10d4:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x80;// SREG: enable interrupts
    10d6:	eb 81       	ldd	r30, Y+3	; 0x03
    10d8:	fc 81       	ldd	r31, Y+4	; 0x04
    10da:	80 e8       	ldi	r24, 0x80	; 128
    10dc:	80 83       	st	Z, r24
    10de:	8b 81       	ldd	r24, Y+3	; 0x03
    10e0:	9c 81       	ldd	r25, Y+4	; 0x04
    10e2:	01 97       	sbiw	r24, 0x01	; 1
    10e4:	9c 83       	std	Y+4, r25	; 0x04
    10e6:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x03;
    10e8:	eb 81       	ldd	r30, Y+3	; 0x03
    10ea:	fc 81       	ldd	r31, Y+4	; 0x04
    10ec:	83 e0       	ldi	r24, 0x03	; 3
    10ee:	80 83       	st	Z, r24
    10f0:	8b 81       	ldd	r24, Y+3	; 0x03
    10f2:	9c 81       	ldd	r25, Y+4	; 0x04
    10f4:	01 97       	sbiw	r24, 0x01	; 1
    10f6:	9c 83       	std	Y+4, r25	; 0x04
    10f8:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x04;
    10fa:	eb 81       	ldd	r30, Y+3	; 0x03
    10fc:	fc 81       	ldd	r31, Y+4	; 0x04
    10fe:	84 e0       	ldi	r24, 0x04	; 4
    1100:	80 83       	st	Z, r24
    1102:	8b 81       	ldd	r24, Y+3	; 0x03
    1104:	9c 81       	ldd	r25, Y+4	; 0x04
    1106:	01 97       	sbiw	r24, 0x01	; 1
    1108:	9c 83       	std	Y+4, r25	; 0x04
    110a:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x05;
    110c:	eb 81       	ldd	r30, Y+3	; 0x03
    110e:	fc 81       	ldd	r31, Y+4	; 0x04
    1110:	85 e0       	ldi	r24, 0x05	; 5
    1112:	80 83       	st	Z, r24
    1114:	8b 81       	ldd	r24, Y+3	; 0x03
    1116:	9c 81       	ldd	r25, Y+4	; 0x04
    1118:	01 97       	sbiw	r24, 0x01	; 1
    111a:	9c 83       	std	Y+4, r25	; 0x04
    111c:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x06;
    111e:	eb 81       	ldd	r30, Y+3	; 0x03
    1120:	fc 81       	ldd	r31, Y+4	; 0x04
    1122:	86 e0       	ldi	r24, 0x06	; 6
    1124:	80 83       	st	Z, r24
    1126:	8b 81       	ldd	r24, Y+3	; 0x03
    1128:	9c 81       	ldd	r25, Y+4	; 0x04
    112a:	01 97       	sbiw	r24, 0x01	; 1
    112c:	9c 83       	std	Y+4, r25	; 0x04
    112e:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x07;
    1130:	eb 81       	ldd	r30, Y+3	; 0x03
    1132:	fc 81       	ldd	r31, Y+4	; 0x04
    1134:	87 e0       	ldi	r24, 0x07	; 7
    1136:	80 83       	st	Z, r24
    1138:	8b 81       	ldd	r24, Y+3	; 0x03
    113a:	9c 81       	ldd	r25, Y+4	; 0x04
    113c:	01 97       	sbiw	r24, 0x01	; 1
    113e:	9c 83       	std	Y+4, r25	; 0x04
    1140:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x08;
    1142:	eb 81       	ldd	r30, Y+3	; 0x03
    1144:	fc 81       	ldd	r31, Y+4	; 0x04
    1146:	88 e0       	ldi	r24, 0x08	; 8
    1148:	80 83       	st	Z, r24
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	9c 81       	ldd	r25, Y+4	; 0x04
    114e:	01 97       	sbiw	r24, 0x01	; 1
    1150:	9c 83       	std	Y+4, r25	; 0x04
    1152:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x09;
    1154:	eb 81       	ldd	r30, Y+3	; 0x03
    1156:	fc 81       	ldd	r31, Y+4	; 0x04
    1158:	89 e0       	ldi	r24, 0x09	; 9
    115a:	80 83       	st	Z, r24
    115c:	8b 81       	ldd	r24, Y+3	; 0x03
    115e:	9c 81       	ldd	r25, Y+4	; 0x04
    1160:	01 97       	sbiw	r24, 0x01	; 1
    1162:	9c 83       	std	Y+4, r25	; 0x04
    1164:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x10;
    1166:	eb 81       	ldd	r30, Y+3	; 0x03
    1168:	fc 81       	ldd	r31, Y+4	; 0x04
    116a:	80 e1       	ldi	r24, 0x10	; 16
    116c:	80 83       	st	Z, r24
    116e:	8b 81       	ldd	r24, Y+3	; 0x03
    1170:	9c 81       	ldd	r25, Y+4	; 0x04
    1172:	01 97       	sbiw	r24, 0x01	; 1
    1174:	9c 83       	std	Y+4, r25	; 0x04
    1176:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x11;
    1178:	eb 81       	ldd	r30, Y+3	; 0x03
    117a:	fc 81       	ldd	r31, Y+4	; 0x04
    117c:	81 e1       	ldi	r24, 0x11	; 17
    117e:	80 83       	st	Z, r24
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	9c 81       	ldd	r25, Y+4	; 0x04
    1184:	01 97       	sbiw	r24, 0x01	; 1
    1186:	9c 83       	std	Y+4, r25	; 0x04
    1188:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x12;
    118a:	eb 81       	ldd	r30, Y+3	; 0x03
    118c:	fc 81       	ldd	r31, Y+4	; 0x04
    118e:	82 e1       	ldi	r24, 0x12	; 18
    1190:	80 83       	st	Z, r24
    1192:	8b 81       	ldd	r24, Y+3	; 0x03
    1194:	9c 81       	ldd	r25, Y+4	; 0x04
    1196:	01 97       	sbiw	r24, 0x01	; 1
    1198:	9c 83       	std	Y+4, r25	; 0x04
    119a:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x13;
    119c:	eb 81       	ldd	r30, Y+3	; 0x03
    119e:	fc 81       	ldd	r31, Y+4	; 0x04
    11a0:	83 e1       	ldi	r24, 0x13	; 19
    11a2:	80 83       	st	Z, r24
    11a4:	8b 81       	ldd	r24, Y+3	; 0x03
    11a6:	9c 81       	ldd	r25, Y+4	; 0x04
    11a8:	01 97       	sbiw	r24, 0x01	; 1
    11aa:	9c 83       	std	Y+4, r25	; 0x04
    11ac:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x14;
    11ae:	eb 81       	ldd	r30, Y+3	; 0x03
    11b0:	fc 81       	ldd	r31, Y+4	; 0x04
    11b2:	84 e1       	ldi	r24, 0x14	; 20
    11b4:	80 83       	st	Z, r24
    11b6:	8b 81       	ldd	r24, Y+3	; 0x03
    11b8:	9c 81       	ldd	r25, Y+4	; 0x04
    11ba:	01 97       	sbiw	r24, 0x01	; 1
    11bc:	9c 83       	std	Y+4, r25	; 0x04
    11be:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x15;
    11c0:	eb 81       	ldd	r30, Y+3	; 0x03
    11c2:	fc 81       	ldd	r31, Y+4	; 0x04
    11c4:	85 e1       	ldi	r24, 0x15	; 21
    11c6:	80 83       	st	Z, r24
    11c8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ca:	9c 81       	ldd	r25, Y+4	; 0x04
    11cc:	01 97       	sbiw	r24, 0x01	; 1
    11ce:	9c 83       	std	Y+4, r25	; 0x04
    11d0:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x16;
    11d2:	eb 81       	ldd	r30, Y+3	; 0x03
    11d4:	fc 81       	ldd	r31, Y+4	; 0x04
    11d6:	86 e1       	ldi	r24, 0x16	; 22
    11d8:	80 83       	st	Z, r24
    11da:	8b 81       	ldd	r24, Y+3	; 0x03
    11dc:	9c 81       	ldd	r25, Y+4	; 0x04
    11de:	01 97       	sbiw	r24, 0x01	; 1
    11e0:	9c 83       	std	Y+4, r25	; 0x04
    11e2:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x17;
    11e4:	eb 81       	ldd	r30, Y+3	; 0x03
    11e6:	fc 81       	ldd	r31, Y+4	; 0x04
    11e8:	87 e1       	ldi	r24, 0x17	; 23
    11ea:	80 83       	st	Z, r24
    11ec:	8b 81       	ldd	r24, Y+3	; 0x03
    11ee:	9c 81       	ldd	r25, Y+4	; 0x04
    11f0:	01 97       	sbiw	r24, 0x01	; 1
    11f2:	9c 83       	std	Y+4, r25	; 0x04
    11f4:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x18;
    11f6:	eb 81       	ldd	r30, Y+3	; 0x03
    11f8:	fc 81       	ldd	r31, Y+4	; 0x04
    11fa:	88 e1       	ldi	r24, 0x18	; 24
    11fc:	80 83       	st	Z, r24
    11fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1200:	9c 81       	ldd	r25, Y+4	; 0x04
    1202:	01 97       	sbiw	r24, 0x01	; 1
    1204:	9c 83       	std	Y+4, r25	; 0x04
    1206:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x19;
    1208:	eb 81       	ldd	r30, Y+3	; 0x03
    120a:	fc 81       	ldd	r31, Y+4	; 0x04
    120c:	89 e1       	ldi	r24, 0x19	; 25
    120e:	80 83       	st	Z, r24
    1210:	8b 81       	ldd	r24, Y+3	; 0x03
    1212:	9c 81       	ldd	r25, Y+4	; 0x04
    1214:	01 97       	sbiw	r24, 0x01	; 1
    1216:	9c 83       	std	Y+4, r25	; 0x04
    1218:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x20;
    121a:	eb 81       	ldd	r30, Y+3	; 0x03
    121c:	fc 81       	ldd	r31, Y+4	; 0x04
    121e:	80 e2       	ldi	r24, 0x20	; 32
    1220:	80 83       	st	Z, r24
    1222:	8b 81       	ldd	r24, Y+3	; 0x03
    1224:	9c 81       	ldd	r25, Y+4	; 0x04
    1226:	01 97       	sbiw	r24, 0x01	; 1
    1228:	9c 83       	std	Y+4, r25	; 0x04
    122a:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x21;
    122c:	eb 81       	ldd	r30, Y+3	; 0x03
    122e:	fc 81       	ldd	r31, Y+4	; 0x04
    1230:	81 e2       	ldi	r24, 0x21	; 33
    1232:	80 83       	st	Z, r24
    1234:	8b 81       	ldd	r24, Y+3	; 0x03
    1236:	9c 81       	ldd	r25, Y+4	; 0x04
    1238:	01 97       	sbiw	r24, 0x01	; 1
    123a:	9c 83       	std	Y+4, r25	; 0x04
    123c:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x22;
    123e:	eb 81       	ldd	r30, Y+3	; 0x03
    1240:	fc 81       	ldd	r31, Y+4	; 0x04
    1242:	82 e2       	ldi	r24, 0x22	; 34
    1244:	80 83       	st	Z, r24
    1246:	8b 81       	ldd	r24, Y+3	; 0x03
    1248:	9c 81       	ldd	r25, Y+4	; 0x04
    124a:	01 97       	sbiw	r24, 0x01	; 1
    124c:	9c 83       	std	Y+4, r25	; 0x04
    124e:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x23;
    1250:	eb 81       	ldd	r30, Y+3	; 0x03
    1252:	fc 81       	ldd	r31, Y+4	; 0x04
    1254:	83 e2       	ldi	r24, 0x23	; 35
    1256:	80 83       	st	Z, r24
    1258:	8b 81       	ldd	r24, Y+3	; 0x03
    125a:	9c 81       	ldd	r25, Y+4	; 0x04
    125c:	01 97       	sbiw	r24, 0x01	; 1
    125e:	9c 83       	std	Y+4, r25	; 0x04
    1260:	8b 83       	std	Y+3, r24	; 0x03

    tmp = (unsigned short)arg;
    1262:	89 85       	ldd	r24, Y+9	; 0x09
    1264:	9a 85       	ldd	r25, Y+10	; 0x0a
    1266:	9a 83       	std	Y+2, r25	; 0x02
    1268:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (stack_t)(tmp&(unsigned short)0x00ff); // r24 LSByte of arg
    126a:	89 81       	ldd	r24, Y+1	; 0x01
    126c:	eb 81       	ldd	r30, Y+3	; 0x03
    126e:	fc 81       	ldd	r31, Y+4	; 0x04
    1270:	80 83       	st	Z, r24
    1272:	8b 81       	ldd	r24, Y+3	; 0x03
    1274:	9c 81       	ldd	r25, Y+4	; 0x04
    1276:	01 97       	sbiw	r24, 0x01	; 1
    1278:	9c 83       	std	Y+4, r25	; 0x04
    127a:	8b 83       	std	Y+3, r24	; 0x03
    tmp>>=8;
    127c:	89 81       	ldd	r24, Y+1	; 0x01
    127e:	9a 81       	ldd	r25, Y+2	; 0x02
    1280:	89 2f       	mov	r24, r25
    1282:	99 27       	eor	r25, r25
    1284:	9a 83       	std	Y+2, r25	; 0x02
    1286:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (stack_t)(tmp&(unsigned short)0x00ff); // r25 MSByte of arg
    1288:	89 81       	ldd	r24, Y+1	; 0x01
    128a:	eb 81       	ldd	r30, Y+3	; 0x03
    128c:	fc 81       	ldd	r31, Y+4	; 0x04
    128e:	80 83       	st	Z, r24
    1290:	8b 81       	ldd	r24, Y+3	; 0x03
    1292:	9c 81       	ldd	r25, Y+4	; 0x04
    1294:	01 97       	sbiw	r24, 0x01	; 1
    1296:	9c 83       	std	Y+4, r25	; 0x04
    1298:	8b 83       	std	Y+3, r24	; 0x03

    *tos-- = 0x26;
    129a:	eb 81       	ldd	r30, Y+3	; 0x03
    129c:	fc 81       	ldd	r31, Y+4	; 0x04
    129e:	86 e2       	ldi	r24, 0x26	; 38
    12a0:	80 83       	st	Z, r24
    12a2:	8b 81       	ldd	r24, Y+3	; 0x03
    12a4:	9c 81       	ldd	r25, Y+4	; 0x04
    12a6:	01 97       	sbiw	r24, 0x01	; 1
    12a8:	9c 83       	std	Y+4, r25	; 0x04
    12aa:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x27;
    12ac:	eb 81       	ldd	r30, Y+3	; 0x03
    12ae:	fc 81       	ldd	r31, Y+4	; 0x04
    12b0:	87 e2       	ldi	r24, 0x27	; 39
    12b2:	80 83       	st	Z, r24
    12b4:	8b 81       	ldd	r24, Y+3	; 0x03
    12b6:	9c 81       	ldd	r25, Y+4	; 0x04
    12b8:	01 97       	sbiw	r24, 0x01	; 1
    12ba:	9c 83       	std	Y+4, r25	; 0x04
    12bc:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x28;
    12be:	eb 81       	ldd	r30, Y+3	; 0x03
    12c0:	fc 81       	ldd	r31, Y+4	; 0x04
    12c2:	88 e2       	ldi	r24, 0x28	; 40
    12c4:	80 83       	st	Z, r24
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ca:	01 97       	sbiw	r24, 0x01	; 1
    12cc:	9c 83       	std	Y+4, r25	; 0x04
    12ce:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x29;
    12d0:	eb 81       	ldd	r30, Y+3	; 0x03
    12d2:	fc 81       	ldd	r31, Y+4	; 0x04
    12d4:	89 e2       	ldi	r24, 0x29	; 41
    12d6:	80 83       	st	Z, r24
    12d8:	8b 81       	ldd	r24, Y+3	; 0x03
    12da:	9c 81       	ldd	r25, Y+4	; 0x04
    12dc:	01 97       	sbiw	r24, 0x01	; 1
    12de:	9c 83       	std	Y+4, r25	; 0x04
    12e0:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x30;
    12e2:	eb 81       	ldd	r30, Y+3	; 0x03
    12e4:	fc 81       	ldd	r31, Y+4	; 0x04
    12e6:	80 e3       	ldi	r24, 0x30	; 48
    12e8:	80 83       	st	Z, r24
    12ea:	8b 81       	ldd	r24, Y+3	; 0x03
    12ec:	9c 81       	ldd	r25, Y+4	; 0x04
    12ee:	01 97       	sbiw	r24, 0x01	; 1
    12f0:	9c 83       	std	Y+4, r25	; 0x04
    12f2:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x31;
    12f4:	eb 81       	ldd	r30, Y+3	; 0x03
    12f6:	fc 81       	ldd	r31, Y+4	; 0x04
    12f8:	81 e3       	ldi	r24, 0x31	; 49
    12fa:	80 83       	st	Z, r24
    12fc:	8b 81       	ldd	r24, Y+3	; 0x03
    12fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1300:	01 97       	sbiw	r24, 0x01	; 1
    1302:	9c 83       	std	Y+4, r25	; 0x04
    1304:	8b 83       	std	Y+3, r24	; 0x03
#ifdef RAMPZ
    *tos-- = 0xff;
#endif
    return tos;
    1306:	8b 81       	ldd	r24, Y+3	; 0x03
    1308:	9c 81       	ldd	r25, Y+4	; 0x04
}
    130a:	2a 96       	adiw	r28, 0x0a	; 10
    130c:	0f b6       	in	r0, 0x3f	; 63
    130e:	f8 94       	cli
    1310:	de bf       	out	0x3e, r29	; 62
    1312:	0f be       	out	0x3f, r0	; 63
    1314:	cd bf       	out	0x3d, r28	; 61
    1316:	cf 91       	pop	r28
    1318:	df 91       	pop	r29
    131a:	08 95       	ret

0000131c <index_search>:
*                           http://www.0chan.ru/r/res/9996.html                          *
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
prio_t index_search(index_t index)
{
    131c:	df 93       	push	r29
    131e:	cf 93       	push	r28
    1320:	00 d0       	rcall	.+0      	; 0x1322 <index_search+0x6>
    1322:	00 d0       	rcall	.+0      	; 0x1324 <index_search+0x8>
    1324:	00 d0       	rcall	.+0      	; 0x1326 <index_search+0xa>
    1326:	cd b7       	in	r28, 0x3d	; 61
    1328:	de b7       	in	r29, 0x3e	; 62
    132a:	8e 83       	std	Y+6, r24	; 0x06
    prio_t prio = (prio_t)0;
    132c:	1d 82       	std	Y+5, r1	; 0x05
        но, т.к. BITS_IN_INDEX_T фиксировано для данной конфигурации,
        то получается время выполнения - O(1), ВСЕГДА.

        И да, предсказуемость + переносимость > быстродействие.
        */
    index_t upper = ~(index_t)0, lower = ~(index_t)0, middle;
    132e:	8f ef       	ldi	r24, 0xFF	; 255
    1330:	8c 83       	std	Y+4, r24	; 0x04
    1332:	8f ef       	ldi	r24, 0xFF	; 255
    1334:	8b 83       	std	Y+3, r24	; 0x03
    prio_t step = (prio_t)BITS_IN_INDEX_T;
    1336:	88 e0       	ldi	r24, 0x08	; 8
    1338:	89 83       	std	Y+1, r24	; 0x01
    133a:	22 c0       	rjmp	.+68     	; 0x1380 <index_search+0x64>
    while( step )
    {
        step>>=1; // делим шаг пополам
    133c:	89 81       	ldd	r24, Y+1	; 0x01
    133e:	86 95       	lsr	r24
    1340:	89 83       	std	Y+1, r24	; 0x01
        middle = lower>>step;
    1342:	8b 81       	ldd	r24, Y+3	; 0x03
    1344:	28 2f       	mov	r18, r24
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	89 81       	ldd	r24, Y+1	; 0x01
    134a:	88 2f       	mov	r24, r24
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	a9 01       	movw	r20, r18
    1350:	02 c0       	rjmp	.+4      	; 0x1356 <index_search+0x3a>
    1352:	55 95       	asr	r21
    1354:	47 95       	ror	r20
    1356:	8a 95       	dec	r24
    1358:	e2 f7       	brpl	.-8      	; 0x1352 <index_search+0x36>
    135a:	ca 01       	movw	r24, r20
    135c:	8a 83       	std	Y+2, r24	; 0x02
        if( index & upper & middle )
    135e:	9e 81       	ldd	r25, Y+6	; 0x06
    1360:	8c 81       	ldd	r24, Y+4	; 0x04
    1362:	98 23       	and	r25, r24
    1364:	8a 81       	ldd	r24, Y+2	; 0x02
    1366:	89 23       	and	r24, r25
    1368:	88 23       	and	r24, r24
    136a:	19 f0       	breq	.+6      	; 0x1372 <index_search+0x56>
        {
            lower = middle;
    136c:	8a 81       	ldd	r24, Y+2	; 0x02
    136e:	8b 83       	std	Y+3, r24	; 0x03
    1370:	07 c0       	rjmp	.+14     	; 0x1380 <index_search+0x64>
        }
        else
        {
            upper = ~middle;
    1372:	8a 81       	ldd	r24, Y+2	; 0x02
    1374:	80 95       	com	r24
    1376:	8c 83       	std	Y+4, r24	; 0x04
            prio += step;
    1378:	9d 81       	ldd	r25, Y+5	; 0x05
    137a:	89 81       	ldd	r24, Y+1	; 0x01
    137c:	89 0f       	add	r24, r25
    137e:	8d 83       	std	Y+5, r24	; 0x05

        И да, предсказуемость + переносимость > быстродействие.
        */
    index_t upper = ~(index_t)0, lower = ~(index_t)0, middle;
    prio_t step = (prio_t)BITS_IN_INDEX_T;
    while( step )
    1380:	89 81       	ldd	r24, Y+1	; 0x01
    1382:	88 23       	and	r24, r24
    1384:	d9 f6       	brne	.-74     	; 0x133c <index_search+0x20>
        if ( mask & index )break;
        prio++;
        mask<<=1;
    }
#endif
    return prio;
    1386:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1388:	26 96       	adiw	r28, 0x06	; 6
    138a:	0f b6       	in	r0, 0x3f	; 63
    138c:	f8 94       	cli
    138e:	de bf       	out	0x3e, r29	; 62
    1390:	0f be       	out	0x3f, r0	; 63
    1392:	cd bf       	out	0x3d, r28	; 61
    1394:	cf 91       	pop	r28
    1396:	df 91       	pop	r29
    1398:	08 95       	ret

0000139a <_ipc_wait>:
*                           http://www.0chan.ru/r/res/9996.html                          *
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
void _ipc_wait( void * ipc_pointer )
{
    139a:	df 93       	push	r29
    139c:	cf 93       	push	r28
    139e:	00 d0       	rcall	.+0      	; 0x13a0 <_ipc_wait+0x6>
    13a0:	00 d0       	rcall	.+0      	; 0x13a2 <_ipc_wait+0x8>
    13a2:	cd b7       	in	r28, 0x3d	; 61
    13a4:	de b7       	in	r29, 0x3e	; 62
    13a6:	9c 83       	std	Y+4, r25	; 0x04
    13a8:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc;
    proc = current_proc();
    13aa:	0e 94 0a 01 	call	0x214	; 0x214 <current_proc>
    13ae:	9a 83       	std	Y+2, r25	; 0x02
    13b0:	89 83       	std	Y+1, r24	; 0x01
    SPIN_LOCK( proc );
    13b2:	89 81       	ldd	r24, Y+1	; 0x01
    13b4:	9a 81       	ldd	r25, Y+2	; 0x02
    13b6:	83 96       	adiw	r24, 0x23	; 35
    13b8:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
    // Останавливаем процесс
    proc->flags |= PROC_FLG_IPCW;
    13bc:	e9 81       	ldd	r30, Y+1	; 0x01
    13be:	fa 81       	ldd	r31, Y+2	; 0x02
    13c0:	87 81       	ldd	r24, Z+7	; 0x07
    13c2:	90 85       	ldd	r25, Z+8	; 0x08
    13c4:	80 64       	ori	r24, 0x40	; 64
    13c6:	e9 81       	ldd	r30, Y+1	; 0x01
    13c8:	fa 81       	ldd	r31, Y+2	; 0x02
    13ca:	90 87       	std	Z+8, r25	; 0x08
    13cc:	87 83       	std	Z+7, r24	; 0x07
    proc->buf = ipc_pointer;
    13ce:	e9 81       	ldd	r30, Y+1	; 0x01
    13d0:	fa 81       	ldd	r31, Y+2	; 0x02
    13d2:	8b 81       	ldd	r24, Y+3	; 0x03
    13d4:	9c 81       	ldd	r25, Y+4	; 0x04
    13d6:	90 a3       	std	Z+32, r25	; 0x20
    13d8:	87 8f       	std	Z+31, r24	; 0x1f
    _proc_stop_( proc );
    13da:	89 81       	ldd	r24, Y+1	; 0x01
    13dc:	9a 81       	ldd	r25, Y+2	; 0x02
    13de:	0e 94 00 11 	call	0x2200	; 0x2200 <_proc_stop_>
    RESCHED_PROC( proc );
    13e2:	e9 81       	ldd	r30, Y+1	; 0x01
    13e4:	fa 81       	ldd	r31, Y+2	; 0x02
    13e6:	81 a1       	ldd	r24, Z+33	; 0x21
    13e8:	0e 94 de 01 	call	0x3bc	; 0x3bc <resched>

    SPIN_UNLOCK( proc );
    13ec:	89 81       	ldd	r24, Y+1	; 0x01
    13ee:	9a 81       	ldd	r25, Y+2	; 0x02
    13f0:	83 96       	adiw	r24, 0x23	; 35
    13f2:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
}
    13f6:	0f 90       	pop	r0
    13f8:	0f 90       	pop	r0
    13fa:	0f 90       	pop	r0
    13fc:	0f 90       	pop	r0
    13fe:	cf 91       	pop	r28
    1400:	df 91       	pop	r29
    1402:	08 95       	ret

00001404 <ipc_send_isr>:

bool_t ipc_send_isr( proc_t * proc, ipc_data_t data )
{
    1404:	df 93       	push	r29
    1406:	cf 93       	push	r28
    1408:	00 d0       	rcall	.+0      	; 0x140a <ipc_send_isr+0x6>
    140a:	00 d0       	rcall	.+0      	; 0x140c <ipc_send_isr+0x8>
    140c:	0f 92       	push	r0
    140e:	cd b7       	in	r28, 0x3d	; 61
    1410:	de b7       	in	r29, 0x3e	; 62
    1412:	9b 83       	std	Y+3, r25	; 0x03
    1414:	8a 83       	std	Y+2, r24	; 0x02
    1416:	7d 83       	std	Y+5, r23	; 0x05
    1418:	6c 83       	std	Y+4, r22	; 0x04
    bool_t ret = (bool_t)0;
    141a:	19 82       	std	Y+1, r1	; 0x01
    SPIN_LOCK( proc );
    141c:	8a 81       	ldd	r24, Y+2	; 0x02
    141e:	9b 81       	ldd	r25, Y+3	; 0x03
    1420:	83 96       	adiw	r24, 0x23	; 35
    1422:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
    if( proc->flags & PROC_FLG_IPCW )
    1426:	ea 81       	ldd	r30, Y+2	; 0x02
    1428:	fb 81       	ldd	r31, Y+3	; 0x03
    142a:	87 81       	ldd	r24, Z+7	; 0x07
    142c:	90 85       	ldd	r25, Z+8	; 0x08
    142e:	80 74       	andi	r24, 0x40	; 64
    1430:	90 70       	andi	r25, 0x00	; 0
    1432:	00 97       	sbiw	r24, 0x00	; 0
    1434:	91 f1       	breq	.+100    	; 0x149a <ipc_send_isr+0x96>
    {
        proc->flags &= ~PROC_FLG_IPCW;
    1436:	ea 81       	ldd	r30, Y+2	; 0x02
    1438:	fb 81       	ldd	r31, Y+3	; 0x03
    143a:	87 81       	ldd	r24, Z+7	; 0x07
    143c:	90 85       	ldd	r25, Z+8	; 0x08
    143e:	8f 7b       	andi	r24, 0xBF	; 191
    1440:	ea 81       	ldd	r30, Y+2	; 0x02
    1442:	fb 81       	ldd	r31, Y+3	; 0x03
    1444:	90 87       	std	Z+8, r25	; 0x08
    1446:	87 83       	std	Z+7, r24	; 0x07
        ///Обработка флага останова целевого процесса
        if(  PROC_PRE_STOP_TEST(proc)  )
    1448:	ea 81       	ldd	r30, Y+2	; 0x02
    144a:	fb 81       	ldd	r31, Y+3	; 0x03
    144c:	87 81       	ldd	r24, Z+7	; 0x07
    144e:	90 85       	ldd	r25, Z+8	; 0x08
    1450:	80 78       	andi	r24, 0x80	; 128
    1452:	90 70       	andi	r25, 0x00	; 0
    1454:	00 97       	sbiw	r24, 0x00	; 0
    1456:	91 f0       	breq	.+36     	; 0x147c <ipc_send_isr+0x78>
    1458:	ea 81       	ldd	r30, Y+2	; 0x02
    145a:	fb 81       	ldd	r31, Y+3	; 0x03
    145c:	87 81       	ldd	r24, Z+7	; 0x07
    145e:	90 85       	ldd	r25, Z+8	; 0x08
    1460:	8c 70       	andi	r24, 0x0C	; 12
    1462:	90 70       	andi	r25, 0x00	; 0
    1464:	00 97       	sbiw	r24, 0x00	; 0
    1466:	51 f4       	brne	.+20     	; 0x147c <ipc_send_isr+0x78>
            Если был запрошен останов целевого процесса,
            и целевой процесс не удерживает общие ресурсы,
            то мы не будем возобновлять его работу
            и передавать ему информацию.
            */
            proc->flags &= ~PROC_FLG_PRE_STOP_MASK;
    1468:	ea 81       	ldd	r30, Y+2	; 0x02
    146a:	fb 81       	ldd	r31, Y+3	; 0x03
    146c:	87 81       	ldd	r24, Z+7	; 0x07
    146e:	90 85       	ldd	r25, Z+8	; 0x08
    1470:	8d 77       	andi	r24, 0x7D	; 125
    1472:	ea 81       	ldd	r30, Y+2	; 0x02
    1474:	fb 81       	ldd	r31, Y+3	; 0x03
    1476:	90 87       	std	Z+8, r25	; 0x08
    1478:	87 83       	std	Z+7, r24	; 0x07
    147a:	0f c0       	rjmp	.+30     	; 0x149a <ipc_send_isr+0x96>
            goto end;
        }
        ret = (bool_t)1; // информация будет передана
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	89 83       	std	Y+1, r24	; 0x01
        *(ipc_data_t *)proc->buf = data;
    1480:	ea 81       	ldd	r30, Y+2	; 0x02
    1482:	fb 81       	ldd	r31, Y+3	; 0x03
    1484:	87 8d       	ldd	r24, Z+31	; 0x1f
    1486:	90 a1       	ldd	r25, Z+32	; 0x20
    1488:	fc 01       	movw	r30, r24
    148a:	8c 81       	ldd	r24, Y+4	; 0x04
    148c:	9d 81       	ldd	r25, Y+5	; 0x05
    148e:	91 83       	std	Z+1, r25	; 0x01
    1490:	80 83       	st	Z, r24
        _proc_run( proc );
    1492:	8a 81       	ldd	r24, Y+2	; 0x02
    1494:	9b 81       	ldd	r25, Y+3	; 0x03
    1496:	0e 94 37 10 	call	0x206e	; 0x206e <_proc_run>
    }
end:
    SPIN_UNLOCK( proc );
    149a:	8a 81       	ldd	r24, Y+2	; 0x02
    149c:	9b 81       	ldd	r25, Y+3	; 0x03
    149e:	83 96       	adiw	r24, 0x23	; 35
    14a0:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
    return ret;
    14a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    14a6:	0f 90       	pop	r0
    14a8:	0f 90       	pop	r0
    14aa:	0f 90       	pop	r0
    14ac:	0f 90       	pop	r0
    14ae:	0f 90       	pop	r0
    14b0:	cf 91       	pop	r28
    14b2:	df 91       	pop	r29
    14b4:	08 95       	ret

000014b6 <_ipc_exchange>:

bool_t _ipc_exchange( proc_t * proc, ipc_data_t send, ipc_data_t * receive )
{
    14b6:	df 93       	push	r29
    14b8:	cf 93       	push	r28
    14ba:	cd b7       	in	r28, 0x3d	; 61
    14bc:	de b7       	in	r29, 0x3e	; 62
    14be:	27 97       	sbiw	r28, 0x07	; 7
    14c0:	0f b6       	in	r0, 0x3f	; 63
    14c2:	f8 94       	cli
    14c4:	de bf       	out	0x3e, r29	; 62
    14c6:	0f be       	out	0x3f, r0	; 63
    14c8:	cd bf       	out	0x3d, r28	; 61
    14ca:	9b 83       	std	Y+3, r25	; 0x03
    14cc:	8a 83       	std	Y+2, r24	; 0x02
    14ce:	7d 83       	std	Y+5, r23	; 0x05
    14d0:	6c 83       	std	Y+4, r22	; 0x04
    14d2:	5f 83       	std	Y+7, r21	; 0x07
    14d4:	4e 83       	std	Y+6, r20	; 0x06
    bool_t ret = (bool_t)0;
    14d6:	19 82       	std	Y+1, r1	; 0x01
    SPIN_LOCK( proc );
    14d8:	8a 81       	ldd	r24, Y+2	; 0x02
    14da:	9b 81       	ldd	r25, Y+3	; 0x03
    14dc:	83 96       	adiw	r24, 0x23	; 35
    14de:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
    if( proc->flags & PROC_FLG_IPCW )
    14e2:	ea 81       	ldd	r30, Y+2	; 0x02
    14e4:	fb 81       	ldd	r31, Y+3	; 0x03
    14e6:	87 81       	ldd	r24, Z+7	; 0x07
    14e8:	90 85       	ldd	r25, Z+8	; 0x08
    14ea:	80 74       	andi	r24, 0x40	; 64
    14ec:	90 70       	andi	r25, 0x00	; 0
    14ee:	00 97       	sbiw	r24, 0x00	; 0
    14f0:	b1 f1       	breq	.+108    	; 0x155e <_ipc_exchange+0xa8>
    {
        proc->flags &= ~PROC_FLG_IPCW;
    14f2:	ea 81       	ldd	r30, Y+2	; 0x02
    14f4:	fb 81       	ldd	r31, Y+3	; 0x03
    14f6:	87 81       	ldd	r24, Z+7	; 0x07
    14f8:	90 85       	ldd	r25, Z+8	; 0x08
    14fa:	8f 7b       	andi	r24, 0xBF	; 191
    14fc:	ea 81       	ldd	r30, Y+2	; 0x02
    14fe:	fb 81       	ldd	r31, Y+3	; 0x03
    1500:	90 87       	std	Z+8, r25	; 0x08
    1502:	87 83       	std	Z+7, r24	; 0x07
        ///Обработка флага останова целевого процесса
        if(  PROC_PRE_STOP_TEST(proc)  )
    1504:	ea 81       	ldd	r30, Y+2	; 0x02
    1506:	fb 81       	ldd	r31, Y+3	; 0x03
    1508:	87 81       	ldd	r24, Z+7	; 0x07
    150a:	90 85       	ldd	r25, Z+8	; 0x08
    150c:	80 78       	andi	r24, 0x80	; 128
    150e:	90 70       	andi	r25, 0x00	; 0
    1510:	00 97       	sbiw	r24, 0x00	; 0
    1512:	91 f0       	breq	.+36     	; 0x1538 <_ipc_exchange+0x82>
    1514:	ea 81       	ldd	r30, Y+2	; 0x02
    1516:	fb 81       	ldd	r31, Y+3	; 0x03
    1518:	87 81       	ldd	r24, Z+7	; 0x07
    151a:	90 85       	ldd	r25, Z+8	; 0x08
    151c:	8c 70       	andi	r24, 0x0C	; 12
    151e:	90 70       	andi	r25, 0x00	; 0
    1520:	00 97       	sbiw	r24, 0x00	; 0
    1522:	51 f4       	brne	.+20     	; 0x1538 <_ipc_exchange+0x82>
            Если был запрошен останов целевого процесса,
            и целевой процесс не удерживает общие ресурсы,
            то мы не будем возобновлять его работу
            и передавать ему информацию.
            */
            proc->flags &= ~PROC_FLG_PRE_STOP_MASK;
    1524:	ea 81       	ldd	r30, Y+2	; 0x02
    1526:	fb 81       	ldd	r31, Y+3	; 0x03
    1528:	87 81       	ldd	r24, Z+7	; 0x07
    152a:	90 85       	ldd	r25, Z+8	; 0x08
    152c:	8d 77       	andi	r24, 0x7D	; 125
    152e:	ea 81       	ldd	r30, Y+2	; 0x02
    1530:	fb 81       	ldd	r31, Y+3	; 0x03
    1532:	90 87       	std	Z+8, r25	; 0x08
    1534:	87 83       	std	Z+7, r24	; 0x07
    1536:	13 c0       	rjmp	.+38     	; 0x155e <_ipc_exchange+0xa8>
            goto end;
        }
        ret = (bool_t)1; // информация будет передана
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	89 83       	std	Y+1, r24	; 0x01
        *(ipc_data_t *)proc->buf = send;
    153c:	ea 81       	ldd	r30, Y+2	; 0x02
    153e:	fb 81       	ldd	r31, Y+3	; 0x03
    1540:	87 8d       	ldd	r24, Z+31	; 0x1f
    1542:	90 a1       	ldd	r25, Z+32	; 0x20
    1544:	fc 01       	movw	r30, r24
    1546:	8c 81       	ldd	r24, Y+4	; 0x04
    1548:	9d 81       	ldd	r25, Y+5	; 0x05
    154a:	91 83       	std	Z+1, r25	; 0x01
    154c:	80 83       	st	Z, r24
        _ipc_wait( receive ); // Готовимся к приему данных!
    154e:	8e 81       	ldd	r24, Y+6	; 0x06
    1550:	9f 81       	ldd	r25, Y+7	; 0x07
    1552:	0e 94 cd 09 	call	0x139a	; 0x139a <_ipc_wait>
        _proc_run( proc );   // И только после этого запускаем процесс-адресат!
    1556:	8a 81       	ldd	r24, Y+2	; 0x02
    1558:	9b 81       	ldd	r25, Y+3	; 0x03
    155a:	0e 94 37 10 	call	0x206e	; 0x206e <_proc_run>
    }
end:
    SPIN_UNLOCK( proc );
    155e:	8a 81       	ldd	r24, Y+2	; 0x02
    1560:	9b 81       	ldd	r25, Y+3	; 0x03
    1562:	83 96       	adiw	r24, 0x23	; 35
    1564:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
    return ret;
    1568:	89 81       	ldd	r24, Y+1	; 0x01
}
    156a:	27 96       	adiw	r28, 0x07	; 7
    156c:	0f b6       	in	r0, 0x3f	; 63
    156e:	f8 94       	cli
    1570:	de bf       	out	0x3e, r29	; 62
    1572:	0f be       	out	0x3f, r0	; 63
    1574:	cd bf       	out	0x3d, r28	; 61
    1576:	cf 91       	pop	r28
    1578:	df 91       	pop	r29
    157a:	08 95       	ret

0000157c <item_init>:
*****************************************************************************************/
#include "../include/bugurt.h"
//Методы элемента 2-связного списка
//инициация элемента
void item_init(item_t *item)
{
    157c:	df 93       	push	r29
    157e:	cf 93       	push	r28
    1580:	00 d0       	rcall	.+0      	; 0x1582 <item_init+0x6>
    1582:	cd b7       	in	r28, 0x3d	; 61
    1584:	de b7       	in	r29, 0x3e	; 62
    1586:	9a 83       	std	Y+2, r25	; 0x02
    1588:	89 83       	std	Y+1, r24	; 0x01
    item->prev = item;
    158a:	e9 81       	ldd	r30, Y+1	; 0x01
    158c:	fa 81       	ldd	r31, Y+2	; 0x02
    158e:	89 81       	ldd	r24, Y+1	; 0x01
    1590:	9a 81       	ldd	r25, Y+2	; 0x02
    1592:	93 83       	std	Z+3, r25	; 0x03
    1594:	82 83       	std	Z+2, r24	; 0x02
    item->next = item;
    1596:	e9 81       	ldd	r30, Y+1	; 0x01
    1598:	fa 81       	ldd	r31, Y+2	; 0x02
    159a:	89 81       	ldd	r24, Y+1	; 0x01
    159c:	9a 81       	ldd	r25, Y+2	; 0x02
    159e:	91 83       	std	Z+1, r25	; 0x01
    15a0:	80 83       	st	Z, r24
}
    15a2:	0f 90       	pop	r0
    15a4:	0f 90       	pop	r0
    15a6:	cf 91       	pop	r28
    15a8:	df 91       	pop	r29
    15aa:	08 95       	ret

000015ac <item_insert>:
//Вставить элемент
void item_insert(item_t *item, item_t *head)
{
    15ac:	df 93       	push	r29
    15ae:	cf 93       	push	r28
    15b0:	00 d0       	rcall	.+0      	; 0x15b2 <item_insert+0x6>
    15b2:	00 d0       	rcall	.+0      	; 0x15b4 <item_insert+0x8>
    15b4:	00 d0       	rcall	.+0      	; 0x15b6 <item_insert+0xa>
    15b6:	cd b7       	in	r28, 0x3d	; 61
    15b8:	de b7       	in	r29, 0x3e	; 62
    15ba:	9c 83       	std	Y+4, r25	; 0x04
    15bc:	8b 83       	std	Y+3, r24	; 0x03
    15be:	7e 83       	std	Y+6, r23	; 0x06
    15c0:	6d 83       	std	Y+5, r22	; 0x05
    // "хвост" списка
    item_t * tail;
    tail = head->prev;
    15c2:	ed 81       	ldd	r30, Y+5	; 0x05
    15c4:	fe 81       	ldd	r31, Y+6	; 0x06
    15c6:	82 81       	ldd	r24, Z+2	; 0x02
    15c8:	93 81       	ldd	r25, Z+3	; 0x03
    15ca:	9a 83       	std	Y+2, r25	; 0x02
    15cc:	89 83       	std	Y+1, r24	; 0x01
    // Вставляем элемент между "головой" и "хвостом"
    item->prev = tail;
    15ce:	eb 81       	ldd	r30, Y+3	; 0x03
    15d0:	fc 81       	ldd	r31, Y+4	; 0x04
    15d2:	89 81       	ldd	r24, Y+1	; 0x01
    15d4:	9a 81       	ldd	r25, Y+2	; 0x02
    15d6:	93 83       	std	Z+3, r25	; 0x03
    15d8:	82 83       	std	Z+2, r24	; 0x02
    item->next = head;
    15da:	eb 81       	ldd	r30, Y+3	; 0x03
    15dc:	fc 81       	ldd	r31, Y+4	; 0x04
    15de:	8d 81       	ldd	r24, Y+5	; 0x05
    15e0:	9e 81       	ldd	r25, Y+6	; 0x06
    15e2:	91 83       	std	Z+1, r25	; 0x01
    15e4:	80 83       	st	Z, r24

    head->prev = item;
    15e6:	ed 81       	ldd	r30, Y+5	; 0x05
    15e8:	fe 81       	ldd	r31, Y+6	; 0x06
    15ea:	8b 81       	ldd	r24, Y+3	; 0x03
    15ec:	9c 81       	ldd	r25, Y+4	; 0x04
    15ee:	93 83       	std	Z+3, r25	; 0x03
    15f0:	82 83       	std	Z+2, r24	; 0x02
    tail->next = item;
    15f2:	e9 81       	ldd	r30, Y+1	; 0x01
    15f4:	fa 81       	ldd	r31, Y+2	; 0x02
    15f6:	8b 81       	ldd	r24, Y+3	; 0x03
    15f8:	9c 81       	ldd	r25, Y+4	; 0x04
    15fa:	91 83       	std	Z+1, r25	; 0x01
    15fc:	80 83       	st	Z, r24
}
    15fe:	26 96       	adiw	r28, 0x06	; 6
    1600:	0f b6       	in	r0, 0x3f	; 63
    1602:	f8 94       	cli
    1604:	de bf       	out	0x3e, r29	; 62
    1606:	0f be       	out	0x3f, r0	; 63
    1608:	cd bf       	out	0x3d, r28	; 61
    160a:	cf 91       	pop	r28
    160c:	df 91       	pop	r29
    160e:	08 95       	ret

00001610 <item_cut>:
//Вырезать элемент
void item_cut( item_t *item )
{
    1610:	df 93       	push	r29
    1612:	cf 93       	push	r28
    1614:	00 d0       	rcall	.+0      	; 0x1616 <item_cut+0x6>
    1616:	00 d0       	rcall	.+0      	; 0x1618 <item_cut+0x8>
    1618:	00 d0       	rcall	.+0      	; 0x161a <item_cut+0xa>
    161a:	cd b7       	in	r28, 0x3d	; 61
    161c:	de b7       	in	r29, 0x3e	; 62
    161e:	9e 83       	std	Y+6, r25	; 0x06
    1620:	8d 83       	std	Y+5, r24	; 0x05
    item_t * prev;
    item_t * next;
    prev = item->prev; //Предыдущий элемент
    1622:	ed 81       	ldd	r30, Y+5	; 0x05
    1624:	fe 81       	ldd	r31, Y+6	; 0x06
    1626:	82 81       	ldd	r24, Z+2	; 0x02
    1628:	93 81       	ldd	r25, Z+3	; 0x03
    162a:	9c 83       	std	Y+4, r25	; 0x04
    162c:	8b 83       	std	Y+3, r24	; 0x03
    next = item->next; //Следующий элемент
    162e:	ed 81       	ldd	r30, Y+5	; 0x05
    1630:	fe 81       	ldd	r31, Y+6	; 0x06
    1632:	80 81       	ld	r24, Z
    1634:	91 81       	ldd	r25, Z+1	; 0x01
    1636:	9a 83       	std	Y+2, r25	; 0x02
    1638:	89 83       	std	Y+1, r24	; 0x01

    next->prev = prev;
    163a:	e9 81       	ldd	r30, Y+1	; 0x01
    163c:	fa 81       	ldd	r31, Y+2	; 0x02
    163e:	8b 81       	ldd	r24, Y+3	; 0x03
    1640:	9c 81       	ldd	r25, Y+4	; 0x04
    1642:	93 83       	std	Z+3, r25	; 0x03
    1644:	82 83       	std	Z+2, r24	; 0x02
    prev->next = next;
    1646:	eb 81       	ldd	r30, Y+3	; 0x03
    1648:	fc 81       	ldd	r31, Y+4	; 0x04
    164a:	89 81       	ldd	r24, Y+1	; 0x01
    164c:	9a 81       	ldd	r25, Y+2	; 0x02
    164e:	91 83       	std	Z+1, r25	; 0x01
    1650:	80 83       	st	Z, r24

    item->prev = item;
    1652:	ed 81       	ldd	r30, Y+5	; 0x05
    1654:	fe 81       	ldd	r31, Y+6	; 0x06
    1656:	8d 81       	ldd	r24, Y+5	; 0x05
    1658:	9e 81       	ldd	r25, Y+6	; 0x06
    165a:	93 83       	std	Z+3, r25	; 0x03
    165c:	82 83       	std	Z+2, r24	; 0x02
    item->next = item;
    165e:	ed 81       	ldd	r30, Y+5	; 0x05
    1660:	fe 81       	ldd	r31, Y+6	; 0x06
    1662:	8d 81       	ldd	r24, Y+5	; 0x05
    1664:	9e 81       	ldd	r25, Y+6	; 0x06
    1666:	91 83       	std	Z+1, r25	; 0x01
    1668:	80 83       	st	Z, r24
}
    166a:	26 96       	adiw	r28, 0x06	; 6
    166c:	0f b6       	in	r0, 0x3f	; 63
    166e:	f8 94       	cli
    1670:	de bf       	out	0x3e, r29	; 62
    1672:	0f be       	out	0x3f, r0	; 63
    1674:	cd bf       	out	0x3d, r28	; 61
    1676:	cf 91       	pop	r28
    1678:	df 91       	pop	r29
    167a:	08 95       	ret

0000167c <idle_main>:
*****************************************************************************************/
#include "../include/bugurt.h"
kernel_t kernel;// Ядро, оно одно на всю систему!!!

WEAK void idle_main(void * arg)
{
    167c:	df 93       	push	r29
    167e:	cf 93       	push	r28
    1680:	00 d0       	rcall	.+0      	; 0x1682 <idle_main+0x6>
    1682:	cd b7       	in	r28, 0x3d	; 61
    1684:	de b7       	in	r29, 0x3e	; 62
    1686:	9a 83       	std	Y+2, r25	; 0x02
    1688:	89 83       	std	Y+1, r24	; 0x01
    168a:	ff cf       	rjmp	.-2      	; 0x168a <idle_main+0xe>

0000168c <kernel_init>:
    while(1);
}

void kernel_init(void)
{
    168c:	8f 92       	push	r8
    168e:	af 92       	push	r10
    1690:	bf 92       	push	r11
    1692:	cf 92       	push	r12
    1694:	ef 92       	push	r14
    1696:	ff 92       	push	r15
    1698:	0f 93       	push	r16
    169a:	1f 93       	push	r17
    169c:	df 93       	push	r29
    169e:	cf 93       	push	r28
    16a0:	0f 92       	push	r0
    16a2:	cd b7       	in	r28, 0x3d	; 61
    16a4:	de b7       	in	r29, 0x3e	; 62
#ifdef CONFIG_MP
    core_id_t i;

    spin_init( &kernel.stat_lock );
    16a6:	83 e0       	ldi	r24, 0x03	; 3
    16a8:	93 e0       	ldi	r25, 0x03	; 3
    16aa:	0e 94 3c 01 	call	0x278	; 0x278 <spin_init>
    spin_lock( &kernel.stat_lock );
    16ae:	83 e0       	ldi	r24, 0x03	; 3
    16b0:	93 e0       	ldi	r25, 0x03	; 3
    16b2:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
    //Инициация собственно ядра
    for( i = (core_id_t)0; i<(core_id_t)MAX_CORES; i++ )
    16b6:	19 82       	std	Y+1, r1	; 0x01
    16b8:	76 c0       	rjmp	.+236    	; 0x17a6 <kernel_init+0x11a>
    {
        proc_init_isr(
    16ba:	89 81       	ldd	r24, Y+1	; 0x01
    16bc:	28 2f       	mov	r18, r24
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	80 e3       	ldi	r24, 0x30	; 48
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	ac 01       	movw	r20, r24
    16c6:	24 9f       	mul	r18, r20
    16c8:	c0 01       	movw	r24, r0
    16ca:	25 9f       	mul	r18, r21
    16cc:	90 0d       	add	r25, r0
    16ce:	34 9f       	mul	r19, r20
    16d0:	90 0d       	add	r25, r0
    16d2:	11 24       	eor	r1, r1
    16d4:	ac 01       	movw	r20, r24
    16d6:	4f 55       	subi	r20, 0x5F	; 95
    16d8:	5d 4f       	sbci	r21, 0xFD	; 253
    16da:	89 81       	ldd	r24, Y+1	; 0x01
    16dc:	28 2f       	mov	r18, r24
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	02 c0       	rjmp	.+4      	; 0x16ea <kernel_init+0x5e>
    16e6:	88 0f       	add	r24, r24
    16e8:	99 1f       	adc	r25, r25
    16ea:	2a 95       	dec	r18
    16ec:	e2 f7       	brpl	.-8      	; 0x16e6 <kernel_init+0x5a>
    16ee:	0f 92       	push	r0
    16f0:	ed b7       	in	r30, 0x3d	; 61
    16f2:	fe b7       	in	r31, 0x3e	; 62
    16f4:	31 96       	adiw	r30, 0x01	; 1
    16f6:	2e e3       	ldi	r18, 0x3E	; 62
    16f8:	3b e0       	ldi	r19, 0x0B	; 11
    16fa:	80 83       	st	Z, r24
    16fc:	ca 01       	movw	r24, r20
    16fe:	b9 01       	movw	r22, r18
    1700:	40 e0       	ldi	r20, 0x00	; 0
    1702:	50 e0       	ldi	r21, 0x00	; 0
    1704:	20 e0       	ldi	r18, 0x00	; 0
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	00 e0       	ldi	r16, 0x00	; 0
    170a:	10 e0       	ldi	r17, 0x00	; 0
    170c:	ee 24       	eor	r14, r14
    170e:	ff 24       	eor	r15, r15
    1710:	0f 2e       	mov	r0, r31
    1712:	f7 e0       	ldi	r31, 0x07	; 7
    1714:	cf 2e       	mov	r12, r31
    1716:	f0 2d       	mov	r31, r0
    1718:	aa 24       	eor	r10, r10
    171a:	bb 24       	eor	r11, r11
    171c:	a3 94       	inc	r10
    171e:	88 24       	eor	r8, r8
    1720:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <proc_init_isr>
    1724:	0f 90       	pop	r0
            ((prio_t)BITS_IN_INDEX_T - (prio_t)1),// низший приоритет
            (timer_t)1,//минимальный квант времени
            (bool_t)0,// не RT
            ((affinity_t)1)<<i // привязка  строго к одному процессору, а то его как сбалансирует отсюда
        );
        kernel.idle[i].core_id = i;
    1726:	89 81       	ldd	r24, Y+1	; 0x01
    1728:	28 2f       	mov	r18, r24
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	80 e3       	ldi	r24, 0x30	; 48
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	bc 01       	movw	r22, r24
    1732:	26 9f       	mul	r18, r22
    1734:	c0 01       	movw	r24, r0
    1736:	27 9f       	mul	r18, r23
    1738:	90 0d       	add	r25, r0
    173a:	36 9f       	mul	r19, r22
    173c:	90 0d       	add	r25, r0
    173e:	11 24       	eor	r1, r1
    1740:	fc 01       	movw	r30, r24
    1742:	ee 53       	subi	r30, 0x3E	; 62
    1744:	fd 4f       	sbci	r31, 0xFD	; 253
    1746:	89 81       	ldd	r24, Y+1	; 0x01
    1748:	80 83       	st	Z, r24
        stat_init( (stat_t *)kernel.stat + i );
    174a:	89 81       	ldd	r24, Y+1	; 0x01
    174c:	88 2f       	mov	r24, r24
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	8f 5f       	subi	r24, 0xFF	; 255
    1752:	9c 4f       	sbci	r25, 0xFC	; 252
    1754:	0e 94 73 01 	call	0x2e6	; 0x2e6 <stat_init>
        sched_init( (sched_t *)kernel.sched + i, (proc_t *)kernel.idle + i );
    1758:	89 81       	ldd	r24, Y+1	; 0x01
    175a:	28 2f       	mov	r18, r24
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	8b e2       	ldi	r24, 0x2B	; 43
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	ac 01       	movw	r20, r24
    1764:	24 9f       	mul	r18, r20
    1766:	c0 01       	movw	r24, r0
    1768:	25 9f       	mul	r18, r21
    176a:	90 0d       	add	r25, r0
    176c:	34 9f       	mul	r19, r20
    176e:	90 0d       	add	r25, r0
    1770:	11 24       	eor	r1, r1
    1772:	ac 01       	movw	r20, r24
    1774:	45 5b       	subi	r20, 0xB5	; 181
    1776:	5d 4f       	sbci	r21, 0xFD	; 253
    1778:	89 81       	ldd	r24, Y+1	; 0x01
    177a:	28 2f       	mov	r18, r24
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	80 e3       	ldi	r24, 0x30	; 48
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	bc 01       	movw	r22, r24
    1784:	26 9f       	mul	r18, r22
    1786:	c0 01       	movw	r24, r0
    1788:	27 9f       	mul	r18, r23
    178a:	90 0d       	add	r25, r0
    178c:	36 9f       	mul	r19, r22
    178e:	90 0d       	add	r25, r0
    1790:	11 24       	eor	r1, r1
    1792:	9c 01       	movw	r18, r24
    1794:	2f 55       	subi	r18, 0x5F	; 95
    1796:	3d 4f       	sbci	r19, 0xFD	; 253
    1798:	ca 01       	movw	r24, r20
    179a:	b9 01       	movw	r22, r18
    179c:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <sched_init>
    core_id_t i;

    spin_init( &kernel.stat_lock );
    spin_lock( &kernel.stat_lock );
    //Инициация собственно ядра
    for( i = (core_id_t)0; i<(core_id_t)MAX_CORES; i++ )
    17a0:	89 81       	ldd	r24, Y+1	; 0x01
    17a2:	8f 5f       	subi	r24, 0xFF	; 255
    17a4:	89 83       	std	Y+1, r24	; 0x01
    17a6:	89 81       	ldd	r24, Y+1	; 0x01
    17a8:	82 30       	cpi	r24, 0x02	; 2
    17aa:	08 f4       	brcc	.+2      	; 0x17ae <kernel_init+0x122>
    17ac:	86 cf       	rjmp	.-244    	; 0x16ba <kernel_init+0x2e>
        );
        kernel.idle[i].core_id = i;
        stat_init( (stat_t *)kernel.stat + i );
        sched_init( (sched_t *)kernel.sched + i, (proc_t *)kernel.idle + i );
    }
    spin_unlock( &kernel.stat_lock );
    17ae:	83 e0       	ldi	r24, 0x03	; 3
    17b0:	93 e0       	ldi	r25, 0x03	; 3
    17b2:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
        (timer_t)1,//минимальный квант времени
        (bool_t)0// не RT
    );
    sched_init( (sched_t *)&kernel.sched, (proc_t *)&kernel.idle );
#endif // CONFIG_MP
}
    17b6:	0f 90       	pop	r0
    17b8:	cf 91       	pop	r28
    17ba:	df 91       	pop	r29
    17bc:	1f 91       	pop	r17
    17be:	0f 91       	pop	r16
    17c0:	ff 90       	pop	r15
    17c2:	ef 90       	pop	r14
    17c4:	cf 90       	pop	r12
    17c6:	bf 90       	pop	r11
    17c8:	af 90       	pop	r10
    17ca:	8f 90       	pop	r8
    17cc:	08 95       	ret

000017ce <mutex_init_isr>:
    mutex_t * mutex
#ifdef CONFIG_USE_HIGHEST_LOCKER
    ,prio_t prio
#endif // CONFIG_USE_HIGHEST_LOCKER
)
{
    17ce:	df 93       	push	r29
    17d0:	cf 93       	push	r28
    17d2:	00 d0       	rcall	.+0      	; 0x17d4 <mutex_init_isr+0x6>
    17d4:	0f 92       	push	r0
    17d6:	cd b7       	in	r28, 0x3d	; 61
    17d8:	de b7       	in	r29, 0x3e	; 62
    17da:	9a 83       	std	Y+2, r25	; 0x02
    17dc:	89 83       	std	Y+1, r24	; 0x01
    17de:	6b 83       	std	Y+3, r22	; 0x03
    SPIN_INIT( mutex );
    17e0:	89 81       	ldd	r24, Y+1	; 0x01
    17e2:	9a 81       	ldd	r25, Y+2	; 0x02
    17e4:	43 96       	adiw	r24, 0x13	; 19
    17e6:	0e 94 3c 01 	call	0x278	; 0x278 <spin_init>
    SPIN_LOCK( mutex );
    17ea:	89 81       	ldd	r24, Y+1	; 0x01
    17ec:	9a 81       	ldd	r25, Y+2	; 0x02
    17ee:	43 96       	adiw	r24, 0x13	; 19
    17f0:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
    xlist_init( (xlist_t *)mutex );
    17f4:	89 81       	ldd	r24, Y+1	; 0x01
    17f6:	9a 81       	ldd	r25, Y+2	; 0x02
    17f8:	0e 94 c8 1b 	call	0x3790	; 0x3790 <xlist_init>
    mutex->free = (bool_t)1;
    17fc:	e9 81       	ldd	r30, Y+1	; 0x01
    17fe:	fa 81       	ldd	r31, Y+2	; 0x02
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	82 8b       	std	Z+18, r24	; 0x12
#ifdef CONFIG_USE_HIGHEST_LOCKER
    mutex->prio = prio;
    1804:	e9 81       	ldd	r30, Y+1	; 0x01
    1806:	fa 81       	ldd	r31, Y+2	; 0x02
    1808:	8b 81       	ldd	r24, Y+3	; 0x03
    180a:	81 8b       	std	Z+17, r24	; 0x11
#endif // CONFIG_USE_HIGHEST_LOCKER
    SPIN_UNLOCK( mutex );
    180c:	89 81       	ldd	r24, Y+1	; 0x01
    180e:	9a 81       	ldd	r25, Y+2	; 0x02
    1810:	43 96       	adiw	r24, 0x13	; 19
    1812:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
}
    1816:	0f 90       	pop	r0
    1818:	0f 90       	pop	r0
    181a:	0f 90       	pop	r0
    181c:	cf 91       	pop	r28
    181e:	df 91       	pop	r29
    1820:	08 95       	ret

00001822 <_mutex_lock>:

// К моменту вызова захвачена блокировка mutex-а, запрещены прерывания
bool_t _mutex_lock( mutex_t * mutex )
{
    1822:	df 93       	push	r29
    1824:	cf 93       	push	r28
    1826:	00 d0       	rcall	.+0      	; 0x1828 <_mutex_lock+0x6>
    1828:	00 d0       	rcall	.+0      	; 0x182a <_mutex_lock+0x8>
    182a:	0f 92       	push	r0
    182c:	cd b7       	in	r28, 0x3d	; 61
    182e:	de b7       	in	r29, 0x3e	; 62
    1830:	9d 83       	std	Y+5, r25	; 0x05
    1832:	8c 83       	std	Y+4, r24	; 0x04
    bool_t ret;
    proc_t * proc;
    // Захват блокировки мьютекса
    SPIN_LOCK( mutex );
    1834:	8c 81       	ldd	r24, Y+4	; 0x04
    1836:	9d 81       	ldd	r25, Y+5	; 0x05
    1838:	43 96       	adiw	r24, 0x13	; 19
    183a:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
    ret = mutex->free;
    183e:	ec 81       	ldd	r30, Y+4	; 0x04
    1840:	fd 81       	ldd	r31, Y+5	; 0x05
    1842:	82 89       	ldd	r24, Z+18	; 0x12
    1844:	8b 83       	std	Y+3, r24	; 0x03
    proc = current_proc();
    1846:	0e 94 0a 01 	call	0x214	; 0x214 <current_proc>
    184a:	9a 83       	std	Y+2, r25	; 0x02
    184c:	89 83       	std	Y+1, r24	; 0x01
    // Захват блокировки процесса
    SPIN_LOCK( proc );
    184e:	89 81       	ldd	r24, Y+1	; 0x01
    1850:	9a 81       	ldd	r25, Y+2	; 0x02
    1852:	83 96       	adiw	r24, 0x23	; 35
    1854:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
    PROC_LRES_INC( proc, GET_PRIO( mutex ) );
    1858:	ec 81       	ldd	r30, Y+4	; 0x04
    185a:	fd 81       	ldd	r31, Y+5	; 0x05
    185c:	21 89       	ldd	r18, Z+17	; 0x11
    185e:	89 81       	ldd	r24, Y+1	; 0x01
    1860:	9a 81       	ldd	r25, Y+2	; 0x02
    1862:	62 2f       	mov	r22, r18
    1864:	0e 94 4f 12 	call	0x249e	; 0x249e <_proc_lres_inc>

    if( ret )
    1868:	8b 81       	ldd	r24, Y+3	; 0x03
    186a:	88 23       	and	r24, r24
    186c:	41 f0       	breq	.+16     	; 0x187e <_mutex_lock+0x5c>
    {
        mutex->free = (bool_t)0;
    186e:	ec 81       	ldd	r30, Y+4	; 0x04
    1870:	fd 81       	ldd	r31, Y+5	; 0x05
    1872:	12 8a       	std	Z+18, r1	; 0x12
        PROC_PRIO_CONTROL_RUNNING( proc );
    1874:	89 81       	ldd	r24, Y+1	; 0x01
    1876:	9a 81       	ldd	r25, Y+2	; 0x02
    1878:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <_proc_prio_control_running>
    187c:	14 c0       	rjmp	.+40     	; 0x18a6 <_mutex_lock+0x84>
    }
    else
    {
        proc->flags |= PROC_FLG_QUEUE;
    187e:	e9 81       	ldd	r30, Y+1	; 0x01
    1880:	fa 81       	ldd	r31, Y+2	; 0x02
    1882:	87 81       	ldd	r24, Z+7	; 0x07
    1884:	90 85       	ldd	r25, Z+8	; 0x08
    1886:	80 61       	ori	r24, 0x10	; 16
    1888:	e9 81       	ldd	r30, Y+1	; 0x01
    188a:	fa 81       	ldd	r31, Y+2	; 0x02
    188c:	90 87       	std	Z+8, r25	; 0x08
    188e:	87 83       	std	Z+7, r24	; 0x07
        _proc_stop( proc );
    1890:	89 81       	ldd	r24, Y+1	; 0x01
    1892:	9a 81       	ldd	r25, Y+2	; 0x02
    1894:	0e 94 44 11 	call	0x2288	; 0x2288 <_proc_stop>
        pitem_insert( (pitem_t *)proc, (xlist_t *)mutex );
    1898:	89 81       	ldd	r24, Y+1	; 0x01
    189a:	9a 81       	ldd	r25, Y+2	; 0x02
    189c:	2c 81       	ldd	r18, Y+4	; 0x04
    189e:	3d 81       	ldd	r19, Y+5	; 0x05
    18a0:	b9 01       	movw	r22, r18
    18a2:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <pitem_insert>
    }
    SPIN_UNLOCK( proc );
    18a6:	89 81       	ldd	r24, Y+1	; 0x01
    18a8:	9a 81       	ldd	r25, Y+2	; 0x02
    18aa:	83 96       	adiw	r24, 0x23	; 35
    18ac:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
    SPIN_UNLOCK( mutex );
    18b0:	8c 81       	ldd	r24, Y+4	; 0x04
    18b2:	9d 81       	ldd	r25, Y+5	; 0x05
    18b4:	43 96       	adiw	r24, 0x13	; 19
    18b6:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
    return ret;
    18ba:	8b 81       	ldd	r24, Y+3	; 0x03
}
    18bc:	0f 90       	pop	r0
    18be:	0f 90       	pop	r0
    18c0:	0f 90       	pop	r0
    18c2:	0f 90       	pop	r0
    18c4:	0f 90       	pop	r0
    18c6:	cf 91       	pop	r28
    18c8:	df 91       	pop	r29
    18ca:	08 95       	ret

000018cc <_mutex_try_lock>:

bool_t _mutex_try_lock( mutex_t * mutex )
{
    18cc:	df 93       	push	r29
    18ce:	cf 93       	push	r28
    18d0:	00 d0       	rcall	.+0      	; 0x18d2 <_mutex_try_lock+0x6>
    18d2:	00 d0       	rcall	.+0      	; 0x18d4 <_mutex_try_lock+0x8>
    18d4:	0f 92       	push	r0
    18d6:	cd b7       	in	r28, 0x3d	; 61
    18d8:	de b7       	in	r29, 0x3e	; 62
    18da:	9d 83       	std	Y+5, r25	; 0x05
    18dc:	8c 83       	std	Y+4, r24	; 0x04
    bool_t ret;
    proc_t * proc;

    SPIN_LOCK( mutex );
    18de:	8c 81       	ldd	r24, Y+4	; 0x04
    18e0:	9d 81       	ldd	r25, Y+5	; 0x05
    18e2:	43 96       	adiw	r24, 0x13	; 19
    18e4:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
    ret = mutex->free;
    18e8:	ec 81       	ldd	r30, Y+4	; 0x04
    18ea:	fd 81       	ldd	r31, Y+5	; 0x05
    18ec:	82 89       	ldd	r24, Z+18	; 0x12
    18ee:	8b 83       	std	Y+3, r24	; 0x03
    proc = current_proc();
    18f0:	0e 94 0a 01 	call	0x214	; 0x214 <current_proc>
    18f4:	9a 83       	std	Y+2, r25	; 0x02
    18f6:	89 83       	std	Y+1, r24	; 0x01

    SPIN_LOCK( proc );
    18f8:	89 81       	ldd	r24, Y+1	; 0x01
    18fa:	9a 81       	ldd	r25, Y+2	; 0x02
    18fc:	83 96       	adiw	r24, 0x23	; 35
    18fe:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
    if( ret )
    1902:	8b 81       	ldd	r24, Y+3	; 0x03
    1904:	88 23       	and	r24, r24
    1906:	79 f0       	breq	.+30     	; 0x1926 <_mutex_try_lock+0x5a>
    {
        mutex->free = (bool_t)0;
    1908:	ec 81       	ldd	r30, Y+4	; 0x04
    190a:	fd 81       	ldd	r31, Y+5	; 0x05
    190c:	12 8a       	std	Z+18, r1	; 0x12
        PROC_LRES_INC( proc, GET_PRIO( mutex ) );
    190e:	ec 81       	ldd	r30, Y+4	; 0x04
    1910:	fd 81       	ldd	r31, Y+5	; 0x05
    1912:	21 89       	ldd	r18, Z+17	; 0x11
    1914:	89 81       	ldd	r24, Y+1	; 0x01
    1916:	9a 81       	ldd	r25, Y+2	; 0x02
    1918:	62 2f       	mov	r22, r18
    191a:	0e 94 4f 12 	call	0x249e	; 0x249e <_proc_lres_inc>
        PROC_PRIO_CONTROL_RUNNING( proc );
    191e:	89 81       	ldd	r24, Y+1	; 0x01
    1920:	9a 81       	ldd	r25, Y+2	; 0x02
    1922:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <_proc_prio_control_running>
    }
    SPIN_UNLOCK( proc );
    1926:	89 81       	ldd	r24, Y+1	; 0x01
    1928:	9a 81       	ldd	r25, Y+2	; 0x02
    192a:	83 96       	adiw	r24, 0x23	; 35
    192c:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
    SPIN_UNLOCK( mutex );
    1930:	8c 81       	ldd	r24, Y+4	; 0x04
    1932:	9d 81       	ldd	r25, Y+5	; 0x05
    1934:	43 96       	adiw	r24, 0x13	; 19
    1936:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
    return ret;
    193a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    193c:	0f 90       	pop	r0
    193e:	0f 90       	pop	r0
    1940:	0f 90       	pop	r0
    1942:	0f 90       	pop	r0
    1944:	0f 90       	pop	r0
    1946:	cf 91       	pop	r28
    1948:	df 91       	pop	r29
    194a:	08 95       	ret

0000194c <_mutex_unlock>:

void _mutex_unlock( mutex_t *  mutex )
{
    194c:	df 93       	push	r29
    194e:	cf 93       	push	r28
    1950:	00 d0       	rcall	.+0      	; 0x1952 <_mutex_unlock+0x6>
    1952:	00 d0       	rcall	.+0      	; 0x1954 <_mutex_unlock+0x8>
    1954:	cd b7       	in	r28, 0x3d	; 61
    1956:	de b7       	in	r29, 0x3e	; 62
    1958:	9c 83       	std	Y+4, r25	; 0x04
    195a:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc;

    SPIN_LOCK( mutex );
    195c:	8b 81       	ldd	r24, Y+3	; 0x03
    195e:	9c 81       	ldd	r25, Y+4	; 0x04
    1960:	43 96       	adiw	r24, 0x13	; 19
    1962:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
    proc = current_proc();
    1966:	0e 94 0a 01 	call	0x214	; 0x214 <current_proc>
    196a:	9a 83       	std	Y+2, r25	; 0x02
    196c:	89 83       	std	Y+1, r24	; 0x01

    SPIN_LOCK(proc);
    196e:	89 81       	ldd	r24, Y+1	; 0x01
    1970:	9a 81       	ldd	r25, Y+2	; 0x02
    1972:	83 96       	adiw	r24, 0x23	; 35
    1974:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
    PROC_LRES_DEC( proc, GET_PRIO( mutex ) );
    1978:	eb 81       	ldd	r30, Y+3	; 0x03
    197a:	fc 81       	ldd	r31, Y+4	; 0x04
    197c:	21 89       	ldd	r18, Z+17	; 0x11
    197e:	89 81       	ldd	r24, Y+1	; 0x01
    1980:	9a 81       	ldd	r25, Y+2	; 0x02
    1982:	62 2f       	mov	r22, r18
    1984:	0e 94 72 12 	call	0x24e4	; 0x24e4 <_proc_lres_dec>
    // Если проготовлен и готов к остановке - останавливаем
    if(  PROC_PRE_STOP_TEST(proc)  )
    1988:	e9 81       	ldd	r30, Y+1	; 0x01
    198a:	fa 81       	ldd	r31, Y+2	; 0x02
    198c:	87 81       	ldd	r24, Z+7	; 0x07
    198e:	90 85       	ldd	r25, Z+8	; 0x08
    1990:	80 78       	andi	r24, 0x80	; 128
    1992:	90 70       	andi	r25, 0x00	; 0
    1994:	00 97       	sbiw	r24, 0x00	; 0
    1996:	f9 f0       	breq	.+62     	; 0x19d6 <_mutex_unlock+0x8a>
    1998:	e9 81       	ldd	r30, Y+1	; 0x01
    199a:	fa 81       	ldd	r31, Y+2	; 0x02
    199c:	87 81       	ldd	r24, Z+7	; 0x07
    199e:	90 85       	ldd	r25, Z+8	; 0x08
    19a0:	8c 70       	andi	r24, 0x0C	; 12
    19a2:	90 70       	andi	r25, 0x00	; 0
    19a4:	00 97       	sbiw	r24, 0x00	; 0
    19a6:	b9 f4       	brne	.+46     	; 0x19d6 <_mutex_unlock+0x8a>
    {
        proc->flags &= ~PROC_FLG_PRE_STOP_MASK;
    19a8:	e9 81       	ldd	r30, Y+1	; 0x01
    19aa:	fa 81       	ldd	r31, Y+2	; 0x02
    19ac:	87 81       	ldd	r24, Z+7	; 0x07
    19ae:	90 85       	ldd	r25, Z+8	; 0x08
    19b0:	8d 77       	andi	r24, 0x7D	; 125
    19b2:	e9 81       	ldd	r30, Y+1	; 0x01
    19b4:	fa 81       	ldd	r31, Y+2	; 0x02
    19b6:	90 87       	std	Z+8, r25	; 0x08
    19b8:	87 83       	std	Z+7, r24	; 0x07
        _proc_stop_( proc );
    19ba:	89 81       	ldd	r24, Y+1	; 0x01
    19bc:	9a 81       	ldd	r25, Y+2	; 0x02
    19be:	0e 94 00 11 	call	0x2200	; 0x2200 <_proc_stop_>
        PROC_PRIO_CONTROL_STOPED( proc );
    19c2:	89 81       	ldd	r24, Y+1	; 0x01
    19c4:	9a 81       	ldd	r25, Y+2	; 0x02
    19c6:	0e 94 95 12 	call	0x252a	; 0x252a <_proc_prio_control_stoped>
        // Нужна перепланировка, процесс остановили и не запустили обратно
        RESCHED_PROC( proc );
    19ca:	e9 81       	ldd	r30, Y+1	; 0x01
    19cc:	fa 81       	ldd	r31, Y+2	; 0x02
    19ce:	81 a1       	ldd	r24, Z+33	; 0x21
    19d0:	0e 94 de 01 	call	0x3bc	; 0x3bc <resched>
    19d4:	04 c0       	rjmp	.+8      	; 0x19de <_mutex_unlock+0x92>
    }
    else
    {
        // Не останавливаем - меняем проиритет на ходу
        PROC_PRIO_CONTROL_RUNNING( proc );
    19d6:	89 81       	ldd	r24, Y+1	; 0x01
    19d8:	9a 81       	ldd	r25, Y+2	; 0x02
    19da:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <_proc_prio_control_running>
    }
    SPIN_UNLOCK( proc );
    19de:	89 81       	ldd	r24, Y+1	; 0x01
    19e0:	9a 81       	ldd	r25, Y+2	; 0x02
    19e2:	83 96       	adiw	r24, 0x23	; 35
    19e4:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
    // Обрабока самого мьютекса
    if( ((xlist_t *)mutex)->index == (index_t)0  )
    19e8:	eb 81       	ldd	r30, Y+3	; 0x03
    19ea:	fc 81       	ldd	r31, Y+4	; 0x04
    19ec:	80 89       	ldd	r24, Z+16	; 0x10
    19ee:	88 23       	and	r24, r24
    19f0:	29 f4       	brne	.+10     	; 0x19fc <_mutex_unlock+0xb0>
    {
        // Список ожидающих пуст, выходим
        mutex->free = (bool_t)1;
    19f2:	eb 81       	ldd	r30, Y+3	; 0x03
    19f4:	fc 81       	ldd	r31, Y+4	; 0x04
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	82 8b       	std	Z+18, r24	; 0x12
    19fa:	25 c0       	rjmp	.+74     	; 0x1a46 <_mutex_unlock+0xfa>
        goto end;
    }
    // Список ожидающих не пуст, запускаем голову
    proc = (proc_t *)xlist_head( (xlist_t *)mutex );
    19fc:	8b 81       	ldd	r24, Y+3	; 0x03
    19fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1a00:	0e 94 f2 1b 	call	0x37e4	; 0x37e4 <xlist_head>
    1a04:	9a 83       	std	Y+2, r25	; 0x02
    1a06:	89 83       	std	Y+1, r24	; 0x01
    SPIN_LOCK( proc );
    1a08:	89 81       	ldd	r24, Y+1	; 0x01
    1a0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a0c:	83 96       	adiw	r24, 0x23	; 35
    1a0e:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
    // Сначала надо вырезать
    pitem_cut( (pitem_t *)proc );
    1a12:	89 81       	ldd	r24, Y+1	; 0x01
    1a14:	9a 81       	ldd	r25, Y+2	; 0x02
    1a16:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <pitem_cut>
    proc->flags &= ~PROC_FLG_QUEUE;
    1a1a:	e9 81       	ldd	r30, Y+1	; 0x01
    1a1c:	fa 81       	ldd	r31, Y+2	; 0x02
    1a1e:	87 81       	ldd	r24, Z+7	; 0x07
    1a20:	90 85       	ldd	r25, Z+8	; 0x08
    1a22:	8f 7e       	andi	r24, 0xEF	; 239
    1a24:	e9 81       	ldd	r30, Y+1	; 0x01
    1a26:	fa 81       	ldd	r31, Y+2	; 0x02
    1a28:	90 87       	std	Z+8, r25	; 0x08
    1a2a:	87 83       	std	Z+7, r24	; 0x07
    // Управление приоритетом процесса
    PROC_PRIO_CONTROL_STOPED( proc );
    1a2c:	89 81       	ldd	r24, Y+1	; 0x01
    1a2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a30:	0e 94 95 12 	call	0x252a	; 0x252a <_proc_prio_control_stoped>
    _proc_run( proc );
    1a34:	89 81       	ldd	r24, Y+1	; 0x01
    1a36:	9a 81       	ldd	r25, Y+2	; 0x02
    1a38:	0e 94 37 10 	call	0x206e	; 0x206e <_proc_run>
    SPIN_UNLOCK( proc );
    1a3c:	89 81       	ldd	r24, Y+1	; 0x01
    1a3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a40:	83 96       	adiw	r24, 0x23	; 35
    1a42:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
end:
    SPIN_UNLOCK( mutex );
    1a46:	8b 81       	ldd	r24, Y+3	; 0x03
    1a48:	9c 81       	ldd	r25, Y+4	; 0x04
    1a4a:	43 96       	adiw	r24, 0x13	; 19
    1a4c:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
}
    1a50:	0f 90       	pop	r0
    1a52:	0f 90       	pop	r0
    1a54:	0f 90       	pop	r0
    1a56:	0f 90       	pop	r0
    1a58:	cf 91       	pop	r28
    1a5a:	df 91       	pop	r29
    1a5c:	08 95       	ret

00001a5e <pcounter_init>:
*                           http://www.0chan.ru/r/res/9996.html                          *
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
void pcounter_init(pcounter_t * pcounter)
{
    1a5e:	df 93       	push	r29
    1a60:	cf 93       	push	r28
    1a62:	00 d0       	rcall	.+0      	; 0x1a64 <pcounter_init+0x6>
    1a64:	0f 92       	push	r0
    1a66:	cd b7       	in	r28, 0x3d	; 61
    1a68:	de b7       	in	r29, 0x3e	; 62
    1a6a:	9b 83       	std	Y+3, r25	; 0x03
    1a6c:	8a 83       	std	Y+2, r24	; 0x02
    prio_t p;
    pcounter->index = (index_t)0;
    1a6e:	ea 81       	ldd	r30, Y+2	; 0x02
    1a70:	fb 81       	ldd	r31, Y+3	; 0x03
    1a72:	10 8a       	std	Z+16, r1	; 0x10
    for(p = 0; p < (index_t)BITS_IN_INDEX_T; p++)pcounter->counter[p] = (count_t)0;
    1a74:	19 82       	std	Y+1, r1	; 0x01
    1a76:	0f c0       	rjmp	.+30     	; 0x1a96 <pcounter_init+0x38>
    1a78:	89 81       	ldd	r24, Y+1	; 0x01
    1a7a:	88 2f       	mov	r24, r24
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	2a 81       	ldd	r18, Y+2	; 0x02
    1a80:	3b 81       	ldd	r19, Y+3	; 0x03
    1a82:	88 0f       	add	r24, r24
    1a84:	99 1f       	adc	r25, r25
    1a86:	f9 01       	movw	r30, r18
    1a88:	e8 0f       	add	r30, r24
    1a8a:	f9 1f       	adc	r31, r25
    1a8c:	11 82       	std	Z+1, r1	; 0x01
    1a8e:	10 82       	st	Z, r1
    1a90:	89 81       	ldd	r24, Y+1	; 0x01
    1a92:	8f 5f       	subi	r24, 0xFF	; 255
    1a94:	89 83       	std	Y+1, r24	; 0x01
    1a96:	89 81       	ldd	r24, Y+1	; 0x01
    1a98:	88 30       	cpi	r24, 0x08	; 8
    1a9a:	70 f3       	brcs	.-36     	; 0x1a78 <pcounter_init+0x1a>
}
    1a9c:	0f 90       	pop	r0
    1a9e:	0f 90       	pop	r0
    1aa0:	0f 90       	pop	r0
    1aa2:	cf 91       	pop	r28
    1aa4:	df 91       	pop	r29
    1aa6:	08 95       	ret

00001aa8 <pcounter_inc>:

void pcounter_inc(pcounter_t * pcounter, prio_t prio)
{
    1aa8:	df 93       	push	r29
    1aaa:	cf 93       	push	r28
    1aac:	00 d0       	rcall	.+0      	; 0x1aae <pcounter_inc+0x6>
    1aae:	0f 92       	push	r0
    1ab0:	cd b7       	in	r28, 0x3d	; 61
    1ab2:	de b7       	in	r29, 0x3e	; 62
    1ab4:	9a 83       	std	Y+2, r25	; 0x02
    1ab6:	89 83       	std	Y+1, r24	; 0x01
    1ab8:	6b 83       	std	Y+3, r22	; 0x03
    pcounter->counter[prio]++;
    1aba:	8b 81       	ldd	r24, Y+3	; 0x03
    1abc:	68 2f       	mov	r22, r24
    1abe:	70 e0       	ldi	r23, 0x00	; 0
    1ac0:	29 81       	ldd	r18, Y+1	; 0x01
    1ac2:	3a 81       	ldd	r19, Y+2	; 0x02
    1ac4:	cb 01       	movw	r24, r22
    1ac6:	88 0f       	add	r24, r24
    1ac8:	99 1f       	adc	r25, r25
    1aca:	f9 01       	movw	r30, r18
    1acc:	e8 0f       	add	r30, r24
    1ace:	f9 1f       	adc	r31, r25
    1ad0:	80 81       	ld	r24, Z
    1ad2:	91 81       	ldd	r25, Z+1	; 0x01
    1ad4:	ac 01       	movw	r20, r24
    1ad6:	4f 5f       	subi	r20, 0xFF	; 255
    1ad8:	5f 4f       	sbci	r21, 0xFF	; 255
    1ada:	29 81       	ldd	r18, Y+1	; 0x01
    1adc:	3a 81       	ldd	r19, Y+2	; 0x02
    1ade:	cb 01       	movw	r24, r22
    1ae0:	88 0f       	add	r24, r24
    1ae2:	99 1f       	adc	r25, r25
    1ae4:	f9 01       	movw	r30, r18
    1ae6:	e8 0f       	add	r30, r24
    1ae8:	f9 1f       	adc	r31, r25
    1aea:	51 83       	std	Z+1, r21	; 0x01
    1aec:	40 83       	st	Z, r20
    pcounter->index |= ((index_t)1)<<prio;
    1aee:	e9 81       	ldd	r30, Y+1	; 0x01
    1af0:	fa 81       	ldd	r31, Y+2	; 0x02
    1af2:	80 89       	ldd	r24, Z+16	; 0x10
    1af4:	48 2f       	mov	r20, r24
    1af6:	8b 81       	ldd	r24, Y+3	; 0x03
    1af8:	28 2f       	mov	r18, r24
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	02 2e       	mov	r0, r18
    1b02:	02 c0       	rjmp	.+4      	; 0x1b08 <pcounter_inc+0x60>
    1b04:	88 0f       	add	r24, r24
    1b06:	99 1f       	adc	r25, r25
    1b08:	0a 94       	dec	r0
    1b0a:	e2 f7       	brpl	.-8      	; 0x1b04 <pcounter_inc+0x5c>
    1b0c:	84 2b       	or	r24, r20
    1b0e:	e9 81       	ldd	r30, Y+1	; 0x01
    1b10:	fa 81       	ldd	r31, Y+2	; 0x02
    1b12:	80 8b       	std	Z+16, r24	; 0x10
}
    1b14:	0f 90       	pop	r0
    1b16:	0f 90       	pop	r0
    1b18:	0f 90       	pop	r0
    1b1a:	cf 91       	pop	r28
    1b1c:	df 91       	pop	r29
    1b1e:	08 95       	ret

00001b20 <pcounter_dec>:

index_t pcounter_dec(pcounter_t * pcounter, prio_t prio)
{
    1b20:	df 93       	push	r29
    1b22:	cf 93       	push	r28
    1b24:	00 d0       	rcall	.+0      	; 0x1b26 <pcounter_dec+0x6>
    1b26:	00 d0       	rcall	.+0      	; 0x1b28 <pcounter_dec+0x8>
    1b28:	cd b7       	in	r28, 0x3d	; 61
    1b2a:	de b7       	in	r29, 0x3e	; 62
    1b2c:	9b 83       	std	Y+3, r25	; 0x03
    1b2e:	8a 83       	std	Y+2, r24	; 0x02
    1b30:	6c 83       	std	Y+4, r22	; 0x04
    index_t mask;
    mask = ((index_t)1)<<prio;
    1b32:	8c 81       	ldd	r24, Y+4	; 0x04
    1b34:	28 2f       	mov	r18, r24
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	02 c0       	rjmp	.+4      	; 0x1b42 <pcounter_dec+0x22>
    1b3e:	88 0f       	add	r24, r24
    1b40:	99 1f       	adc	r25, r25
    1b42:	2a 95       	dec	r18
    1b44:	e2 f7       	brpl	.-8      	; 0x1b3e <pcounter_dec+0x1e>
    1b46:	89 83       	std	Y+1, r24	; 0x01
    pcounter->counter[prio]--;
    1b48:	8c 81       	ldd	r24, Y+4	; 0x04
    1b4a:	68 2f       	mov	r22, r24
    1b4c:	70 e0       	ldi	r23, 0x00	; 0
    1b4e:	2a 81       	ldd	r18, Y+2	; 0x02
    1b50:	3b 81       	ldd	r19, Y+3	; 0x03
    1b52:	cb 01       	movw	r24, r22
    1b54:	88 0f       	add	r24, r24
    1b56:	99 1f       	adc	r25, r25
    1b58:	f9 01       	movw	r30, r18
    1b5a:	e8 0f       	add	r30, r24
    1b5c:	f9 1f       	adc	r31, r25
    1b5e:	80 81       	ld	r24, Z
    1b60:	91 81       	ldd	r25, Z+1	; 0x01
    1b62:	ac 01       	movw	r20, r24
    1b64:	41 50       	subi	r20, 0x01	; 1
    1b66:	50 40       	sbci	r21, 0x00	; 0
    1b68:	2a 81       	ldd	r18, Y+2	; 0x02
    1b6a:	3b 81       	ldd	r19, Y+3	; 0x03
    1b6c:	cb 01       	movw	r24, r22
    1b6e:	88 0f       	add	r24, r24
    1b70:	99 1f       	adc	r25, r25
    1b72:	f9 01       	movw	r30, r18
    1b74:	e8 0f       	add	r30, r24
    1b76:	f9 1f       	adc	r31, r25
    1b78:	51 83       	std	Z+1, r21	; 0x01
    1b7a:	40 83       	st	Z, r20
    if(pcounter->counter[prio] == (count_t)0)pcounter->index &= ~mask;
    1b7c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b7e:	88 2f       	mov	r24, r24
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	2a 81       	ldd	r18, Y+2	; 0x02
    1b84:	3b 81       	ldd	r19, Y+3	; 0x03
    1b86:	88 0f       	add	r24, r24
    1b88:	99 1f       	adc	r25, r25
    1b8a:	f9 01       	movw	r30, r18
    1b8c:	e8 0f       	add	r30, r24
    1b8e:	f9 1f       	adc	r31, r25
    1b90:	80 81       	ld	r24, Z
    1b92:	91 81       	ldd	r25, Z+1	; 0x01
    1b94:	00 97       	sbiw	r24, 0x00	; 0
    1b96:	51 f4       	brne	.+20     	; 0x1bac <pcounter_dec+0x8c>
    1b98:	ea 81       	ldd	r30, Y+2	; 0x02
    1b9a:	fb 81       	ldd	r31, Y+3	; 0x03
    1b9c:	80 89       	ldd	r24, Z+16	; 0x10
    1b9e:	98 2f       	mov	r25, r24
    1ba0:	89 81       	ldd	r24, Y+1	; 0x01
    1ba2:	80 95       	com	r24
    1ba4:	89 23       	and	r24, r25
    1ba6:	ea 81       	ldd	r30, Y+2	; 0x02
    1ba8:	fb 81       	ldd	r31, Y+3	; 0x03
    1baa:	80 8b       	std	Z+16, r24	; 0x10
    return pcounter->index & mask;
    1bac:	ea 81       	ldd	r30, Y+2	; 0x02
    1bae:	fb 81       	ldd	r31, Y+3	; 0x03
    1bb0:	90 89       	ldd	r25, Z+16	; 0x10
    1bb2:	89 81       	ldd	r24, Y+1	; 0x01
    1bb4:	89 23       	and	r24, r25
}
    1bb6:	0f 90       	pop	r0
    1bb8:	0f 90       	pop	r0
    1bba:	0f 90       	pop	r0
    1bbc:	0f 90       	pop	r0
    1bbe:	cf 91       	pop	r28
    1bc0:	df 91       	pop	r29
    1bc2:	08 95       	ret

00001bc4 <pitem_init>:
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
// Инициация
void pitem_init( pitem_t * pitem, prio_t prio )
{
    1bc4:	df 93       	push	r29
    1bc6:	cf 93       	push	r28
    1bc8:	00 d0       	rcall	.+0      	; 0x1bca <pitem_init+0x6>
    1bca:	0f 92       	push	r0
    1bcc:	cd b7       	in	r28, 0x3d	; 61
    1bce:	de b7       	in	r29, 0x3e	; 62
    1bd0:	9a 83       	std	Y+2, r25	; 0x02
    1bd2:	89 83       	std	Y+1, r24	; 0x01
    1bd4:	6b 83       	std	Y+3, r22	; 0x03
    item_init( (item_t *)pitem );
    1bd6:	89 81       	ldd	r24, Y+1	; 0x01
    1bd8:	9a 81       	ldd	r25, Y+2	; 0x02
    1bda:	0e 94 be 0a 	call	0x157c	; 0x157c <item_init>
    pitem->list = (xlist_t *)0;
    1bde:	e9 81       	ldd	r30, Y+1	; 0x01
    1be0:	fa 81       	ldd	r31, Y+2	; 0x02
    1be2:	15 82       	std	Z+5, r1	; 0x05
    1be4:	14 82       	std	Z+4, r1	; 0x04
    pitem->prio = prio;
    1be6:	e9 81       	ldd	r30, Y+1	; 0x01
    1be8:	fa 81       	ldd	r31, Y+2	; 0x02
    1bea:	8b 81       	ldd	r24, Y+3	; 0x03
    1bec:	86 83       	std	Z+6, r24	; 0x06
}
    1bee:	0f 90       	pop	r0
    1bf0:	0f 90       	pop	r0
    1bf2:	0f 90       	pop	r0
    1bf4:	cf 91       	pop	r28
    1bf6:	df 91       	pop	r29
    1bf8:	08 95       	ret

00001bfa <pitem_insert>:
// Вставка в список
void pitem_insert( pitem_t * pitem, xlist_t * xlist )
{
    1bfa:	df 93       	push	r29
    1bfc:	cf 93       	push	r28
    1bfe:	cd b7       	in	r28, 0x3d	; 61
    1c00:	de b7       	in	r29, 0x3e	; 62
    1c02:	28 97       	sbiw	r28, 0x08	; 8
    1c04:	0f b6       	in	r0, 0x3f	; 63
    1c06:	f8 94       	cli
    1c08:	de bf       	out	0x3e, r29	; 62
    1c0a:	0f be       	out	0x3f, r0	; 63
    1c0c:	cd bf       	out	0x3d, r28	; 61
    1c0e:	9e 83       	std	Y+6, r25	; 0x06
    1c10:	8d 83       	std	Y+5, r24	; 0x05
    1c12:	78 87       	std	Y+8, r23	; 0x08
    1c14:	6f 83       	std	Y+7, r22	; 0x07
    prio_t prio;
    index_t mask;
    item_t ** head;

    prio = pitem->prio;
    1c16:	ed 81       	ldd	r30, Y+5	; 0x05
    1c18:	fe 81       	ldd	r31, Y+6	; 0x06
    1c1a:	86 81       	ldd	r24, Z+6	; 0x06
    1c1c:	8c 83       	std	Y+4, r24	; 0x04
    mask = ((index_t)1)<<prio;
    1c1e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c20:	28 2f       	mov	r18, r24
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	81 e0       	ldi	r24, 0x01	; 1
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	02 c0       	rjmp	.+4      	; 0x1c2e <pitem_insert+0x34>
    1c2a:	88 0f       	add	r24, r24
    1c2c:	99 1f       	adc	r25, r25
    1c2e:	2a 95       	dec	r18
    1c30:	e2 f7       	brpl	.-8      	; 0x1c2a <pitem_insert+0x30>
    1c32:	8b 83       	std	Y+3, r24	; 0x03
    head = (item_t **)xlist + prio;
    1c34:	2f 81       	ldd	r18, Y+7	; 0x07
    1c36:	38 85       	ldd	r19, Y+8	; 0x08
    1c38:	8c 81       	ldd	r24, Y+4	; 0x04
    1c3a:	88 2f       	mov	r24, r24
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	88 0f       	add	r24, r24
    1c40:	99 1f       	adc	r25, r25
    1c42:	82 0f       	add	r24, r18
    1c44:	93 1f       	adc	r25, r19
    1c46:	9a 83       	std	Y+2, r25	; 0x02
    1c48:	89 83       	std	Y+1, r24	; 0x01
    // Пуста ли часть списка с таким приоритетом
    if( ( xlist->index )& mask)
    1c4a:	ef 81       	ldd	r30, Y+7	; 0x07
    1c4c:	f8 85       	ldd	r31, Y+8	; 0x08
    1c4e:	90 89       	ldd	r25, Z+16	; 0x10
    1c50:	8b 81       	ldd	r24, Y+3	; 0x03
    1c52:	89 23       	and	r24, r25
    1c54:	88 23       	and	r24, r24
    1c56:	51 f0       	breq	.+20     	; 0x1c6c <pitem_insert+0x72>
    {
        //Не пуста вставляем туда gitem
        item_insert( (item_t *)pitem, *head );
    1c58:	8d 81       	ldd	r24, Y+5	; 0x05
    1c5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c5c:	e9 81       	ldd	r30, Y+1	; 0x01
    1c5e:	fa 81       	ldd	r31, Y+2	; 0x02
    1c60:	20 81       	ld	r18, Z
    1c62:	31 81       	ldd	r19, Z+1	; 0x01
    1c64:	b9 01       	movw	r22, r18
    1c66:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <item_insert>
    1c6a:	0e c0       	rjmp	.+28     	; 0x1c88 <pitem_insert+0x8e>
    }
    else
    {
        // Пуста, gitem будет головой
        *head = (item_t *)pitem;
    1c6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c70:	e9 81       	ldd	r30, Y+1	; 0x01
    1c72:	fa 81       	ldd	r31, Y+2	; 0x02
    1c74:	91 83       	std	Z+1, r25	; 0x01
    1c76:	80 83       	st	Z, r24
        xlist->index |= mask;
    1c78:	ef 81       	ldd	r30, Y+7	; 0x07
    1c7a:	f8 85       	ldd	r31, Y+8	; 0x08
    1c7c:	90 89       	ldd	r25, Z+16	; 0x10
    1c7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c80:	89 2b       	or	r24, r25
    1c82:	ef 81       	ldd	r30, Y+7	; 0x07
    1c84:	f8 85       	ldd	r31, Y+8	; 0x08
    1c86:	80 8b       	std	Z+16, r24	; 0x10
    }
    pitem->list = xlist;
    1c88:	ed 81       	ldd	r30, Y+5	; 0x05
    1c8a:	fe 81       	ldd	r31, Y+6	; 0x06
    1c8c:	8f 81       	ldd	r24, Y+7	; 0x07
    1c8e:	98 85       	ldd	r25, Y+8	; 0x08
    1c90:	95 83       	std	Z+5, r25	; 0x05
    1c92:	84 83       	std	Z+4, r24	; 0x04
}
    1c94:	28 96       	adiw	r28, 0x08	; 8
    1c96:	0f b6       	in	r0, 0x3f	; 63
    1c98:	f8 94       	cli
    1c9a:	de bf       	out	0x3e, r29	; 62
    1c9c:	0f be       	out	0x3f, r0	; 63
    1c9e:	cd bf       	out	0x3d, r28	; 61
    1ca0:	cf 91       	pop	r28
    1ca2:	df 91       	pop	r29
    1ca4:	08 95       	ret

00001ca6 <pitem_fast_cut>:
// Быстрая вырезка из списка
void pitem_fast_cut( pitem_t * pitem )
{
    1ca6:	df 93       	push	r29
    1ca8:	cf 93       	push	r28
    1caa:	00 d0       	rcall	.+0      	; 0x1cac <pitem_fast_cut+0x6>
    1cac:	00 d0       	rcall	.+0      	; 0x1cae <pitem_fast_cut+0x8>
    1cae:	0f 92       	push	r0
    1cb0:	cd b7       	in	r28, 0x3d	; 61
    1cb2:	de b7       	in	r29, 0x3e	; 62
    1cb4:	9d 83       	std	Y+5, r25	; 0x05
    1cb6:	8c 83       	std	Y+4, r24	; 0x04
    prio_t prio;
    xlist_t * xlist;

    prio = pitem->prio;
    1cb8:	ec 81       	ldd	r30, Y+4	; 0x04
    1cba:	fd 81       	ldd	r31, Y+5	; 0x05
    1cbc:	86 81       	ldd	r24, Z+6	; 0x06
    1cbe:	8b 83       	std	Y+3, r24	; 0x03
    xlist = (xlist_t *)pitem->list;
    1cc0:	ec 81       	ldd	r30, Y+4	; 0x04
    1cc2:	fd 81       	ldd	r31, Y+5	; 0x05
    1cc4:	84 81       	ldd	r24, Z+4	; 0x04
    1cc6:	95 81       	ldd	r25, Z+5	; 0x05
    1cc8:	9a 83       	std	Y+2, r25	; 0x02
    1cca:	89 83       	std	Y+1, r24	; 0x01
    //Является ли элемент единственным в своей части списка?
    if( ((item_t *)pitem)->next == (item_t *)pitem )
    1ccc:	ec 81       	ldd	r30, Y+4	; 0x04
    1cce:	fd 81       	ldd	r31, Y+5	; 0x05
    1cd0:	20 81       	ld	r18, Z
    1cd2:	31 81       	ldd	r19, Z+1	; 0x01
    1cd4:	8c 81       	ldd	r24, Y+4	; 0x04
    1cd6:	9d 81       	ldd	r25, Y+5	; 0x05
    1cd8:	28 17       	cp	r18, r24
    1cda:	39 07       	cpc	r19, r25
    1cdc:	09 f5       	brne	.+66     	; 0x1d20 <pitem_fast_cut+0x7a>
    {
        // Да, является!
        xlist->item[prio] = (item_t *)0;
    1cde:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce0:	88 2f       	mov	r24, r24
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	29 81       	ldd	r18, Y+1	; 0x01
    1ce6:	3a 81       	ldd	r19, Y+2	; 0x02
    1ce8:	88 0f       	add	r24, r24
    1cea:	99 1f       	adc	r25, r25
    1cec:	f9 01       	movw	r30, r18
    1cee:	e8 0f       	add	r30, r24
    1cf0:	f9 1f       	adc	r31, r25
    1cf2:	11 82       	std	Z+1, r1	; 0x01
    1cf4:	10 82       	st	Z, r1
        xlist->index &= ~(((index_t)1)<<prio);
    1cf6:	e9 81       	ldd	r30, Y+1	; 0x01
    1cf8:	fa 81       	ldd	r31, Y+2	; 0x02
    1cfa:	80 89       	ldd	r24, Z+16	; 0x10
    1cfc:	48 2f       	mov	r20, r24
    1cfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1d00:	28 2f       	mov	r18, r24
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	81 e0       	ldi	r24, 0x01	; 1
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	02 2e       	mov	r0, r18
    1d0a:	02 c0       	rjmp	.+4      	; 0x1d10 <pitem_fast_cut+0x6a>
    1d0c:	88 0f       	add	r24, r24
    1d0e:	99 1f       	adc	r25, r25
    1d10:	0a 94       	dec	r0
    1d12:	e2 f7       	brpl	.-8      	; 0x1d0c <pitem_fast_cut+0x66>
    1d14:	80 95       	com	r24
    1d16:	84 23       	and	r24, r20
    1d18:	e9 81       	ldd	r30, Y+1	; 0x01
    1d1a:	fa 81       	ldd	r31, Y+2	; 0x02
    1d1c:	80 8b       	std	Z+16, r24	; 0x10
    1d1e:	1a c0       	rjmp	.+52     	; 0x1d54 <pitem_fast_cut+0xae>
    }
    else
    {
        // Нет, не является!
        // Является ли элемент головой своей части списка?
        if( xlist->item[(prio_t)prio] == (item_t *)pitem )
    1d20:	8b 81       	ldd	r24, Y+3	; 0x03
    1d22:	88 2f       	mov	r24, r24
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	29 81       	ldd	r18, Y+1	; 0x01
    1d28:	3a 81       	ldd	r19, Y+2	; 0x02
    1d2a:	88 0f       	add	r24, r24
    1d2c:	99 1f       	adc	r25, r25
    1d2e:	f9 01       	movw	r30, r18
    1d30:	e8 0f       	add	r30, r24
    1d32:	f9 1f       	adc	r31, r25
    1d34:	20 81       	ld	r18, Z
    1d36:	31 81       	ldd	r19, Z+1	; 0x01
    1d38:	8c 81       	ldd	r24, Y+4	; 0x04
    1d3a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d3c:	28 17       	cp	r18, r24
    1d3e:	39 07       	cpc	r19, r25
    1d40:	29 f4       	brne	.+10     	; 0x1d4c <pitem_fast_cut+0xa6>
        {
            // Является, список надо переключить
            xlist_switch( xlist, prio );
    1d42:	89 81       	ldd	r24, Y+1	; 0x01
    1d44:	9a 81       	ldd	r25, Y+2	; 0x02
    1d46:	6b 81       	ldd	r22, Y+3	; 0x03
    1d48:	0e 94 1e 1c 	call	0x383c	; 0x383c <xlist_switch>
        }
        // Собственно - вырезаем элемент
        item_cut( (item_t *)pitem );
    1d4c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d4e:	9d 81       	ldd	r25, Y+5	; 0x05
    1d50:	0e 94 08 0b 	call	0x1610	; 0x1610 <item_cut>
    }
}
    1d54:	0f 90       	pop	r0
    1d56:	0f 90       	pop	r0
    1d58:	0f 90       	pop	r0
    1d5a:	0f 90       	pop	r0
    1d5c:	0f 90       	pop	r0
    1d5e:	cf 91       	pop	r28
    1d60:	df 91       	pop	r29
    1d62:	08 95       	ret

00001d64 <pitem_cut>:
// Вырезка из списка
void pitem_cut(pitem_t * pitem)
{
    1d64:	df 93       	push	r29
    1d66:	cf 93       	push	r28
    1d68:	00 d0       	rcall	.+0      	; 0x1d6a <pitem_cut+0x6>
    1d6a:	cd b7       	in	r28, 0x3d	; 61
    1d6c:	de b7       	in	r29, 0x3e	; 62
    1d6e:	9a 83       	std	Y+2, r25	; 0x02
    1d70:	89 83       	std	Y+1, r24	; 0x01
    pitem_fast_cut( pitem );
    1d72:	89 81       	ldd	r24, Y+1	; 0x01
    1d74:	9a 81       	ldd	r25, Y+2	; 0x02
    1d76:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <pitem_fast_cut>
    pitem->list = (xlist_t *)0;
    1d7a:	e9 81       	ldd	r30, Y+1	; 0x01
    1d7c:	fa 81       	ldd	r31, Y+2	; 0x02
    1d7e:	15 82       	std	Z+5, r1	; 0x05
    1d80:	14 82       	std	Z+4, r1	; 0x04
}
    1d82:	0f 90       	pop	r0
    1d84:	0f 90       	pop	r0
    1d86:	cf 91       	pop	r28
    1d88:	df 91       	pop	r29
    1d8a:	08 95       	ret

00001d8c <pitem_xlist_chain>:

pitem_t * pitem_xlist_chain( xlist_t * src )
{
    1d8c:	df 93       	push	r29
    1d8e:	cf 93       	push	r28
    1d90:	cd b7       	in	r28, 0x3d	; 61
    1d92:	de b7       	in	r29, 0x3e	; 62
    1d94:	2d 97       	sbiw	r28, 0x0d	; 13
    1d96:	0f b6       	in	r0, 0x3f	; 63
    1d98:	f8 94       	cli
    1d9a:	de bf       	out	0x3e, r29	; 62
    1d9c:	0f be       	out	0x3f, r0	; 63
    1d9e:	cd bf       	out	0x3d, r28	; 61
    1da0:	9d 87       	std	Y+13, r25	; 0x0d
    1da2:	8c 87       	std	Y+12, r24	; 0x0c
    pitem_t * ret;  // return value
    ret = (pitem_t *)xlist_head( src );     // will return former xlist head
    1da4:	8c 85       	ldd	r24, Y+12	; 0x0c
    1da6:	9d 85       	ldd	r25, Y+13	; 0x0d
    1da8:	0e 94 f2 1b 	call	0x37e4	; 0x37e4 <xlist_head>
    1dac:	9b 87       	std	Y+11, r25	; 0x0b
    1dae:	8a 87       	std	Y+10, r24	; 0x0a
    if(ret)
    1db0:	8a 85       	ldd	r24, Y+10	; 0x0a
    1db2:	9b 85       	ldd	r25, Y+11	; 0x0b
    1db4:	00 97       	sbiw	r24, 0x00	; 0
    1db6:	09 f4       	brne	.+2      	; 0x1dba <pitem_xlist_chain+0x2e>
    1db8:	77 c0       	rjmp	.+238    	; 0x1ea8 <pitem_xlist_chain+0x11c>
                index;  // buffer for xlist index
        prio_t  prio;   // current working priority
        item_t * tail;  // current list tail;


        tail = ((item_t *)ret)->prev;           // current list tail initial value
    1dba:	ea 85       	ldd	r30, Y+10	; 0x0a
    1dbc:	fb 85       	ldd	r31, Y+11	; 0x0b
    1dbe:	82 81       	ldd	r24, Z+2	; 0x02
    1dc0:	93 81       	ldd	r25, Z+3	; 0x03
    1dc2:	9e 83       	std	Y+6, r25	; 0x06
    1dc4:	8d 83       	std	Y+5, r24	; 0x05
        prio = ret->prio;                       // initial working prio
    1dc6:	ea 85       	ldd	r30, Y+10	; 0x0a
    1dc8:	fb 85       	ldd	r31, Y+11	; 0x0b
    1dca:	86 81       	ldd	r24, Z+6	; 0x06
    1dcc:	8f 83       	std	Y+7, r24	; 0x07
        src->item[prio++] = (item_t *)0;        // cut all items from current xlist part
    1dce:	8f 81       	ldd	r24, Y+7	; 0x07
    1dd0:	88 2f       	mov	r24, r24
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	2c 85       	ldd	r18, Y+12	; 0x0c
    1dd6:	3d 85       	ldd	r19, Y+13	; 0x0d
    1dd8:	88 0f       	add	r24, r24
    1dda:	99 1f       	adc	r25, r25
    1ddc:	f9 01       	movw	r30, r18
    1dde:	e8 0f       	add	r30, r24
    1de0:	f9 1f       	adc	r31, r25
    1de2:	11 82       	std	Z+1, r1	; 0x01
    1de4:	10 82       	st	Z, r1
    1de6:	8f 81       	ldd	r24, Y+7	; 0x07
    1de8:	8f 5f       	subi	r24, 0xFF	; 255
    1dea:	8f 83       	std	Y+7, r24	; 0x07
        index = src->index;                     // remember xlist index to improve performance
    1dec:	ec 85       	ldd	r30, Y+12	; 0x0c
    1dee:	fd 85       	ldd	r31, Y+13	; 0x0d
    1df0:	80 89       	ldd	r24, Z+16	; 0x10
    1df2:	88 87       	std	Y+8, r24	; 0x08
        mask = ((index_t)1) << prio;            // initial mask value
    1df4:	8f 81       	ldd	r24, Y+7	; 0x07
    1df6:	28 2f       	mov	r18, r24
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	81 e0       	ldi	r24, 0x01	; 1
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	02 2e       	mov	r0, r18
    1e00:	02 c0       	rjmp	.+4      	; 0x1e06 <pitem_xlist_chain+0x7a>
    1e02:	88 0f       	add	r24, r24
    1e04:	99 1f       	adc	r25, r25
    1e06:	0a 94       	dec	r0
    1e08:	e2 f7       	brpl	.-8      	; 0x1e02 <pitem_xlist_chain+0x76>
    1e0a:	89 87       	std	Y+9, r24	; 0x09
    1e0c:	3b c0       	rjmp	.+118    	; 0x1e84 <pitem_xlist_chain+0xf8>
        // cut all items from xlist and form an ordinary list of them
        while(mask)
        {
            if( index & mask )
    1e0e:	88 85       	ldd	r24, Y+8	; 0x08
    1e10:	99 85       	ldd	r25, Y+9	; 0x09
    1e12:	89 23       	and	r24, r25
    1e14:	88 23       	and	r24, r24
    1e16:	81 f1       	breq	.+96     	; 0x1e78 <pitem_xlist_chain+0xec>
            {
                // current part of xlist has some items to cut
                item_t * xhead;
                item_t * buf;
                xhead = src->item[prio];                    // current xlist head;
    1e18:	8f 81       	ldd	r24, Y+7	; 0x07
    1e1a:	88 2f       	mov	r24, r24
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1e20:	3d 85       	ldd	r19, Y+13	; 0x0d
    1e22:	88 0f       	add	r24, r24
    1e24:	99 1f       	adc	r25, r25
    1e26:	f9 01       	movw	r30, r18
    1e28:	e8 0f       	add	r30, r24
    1e2a:	f9 1f       	adc	r31, r25
    1e2c:	80 81       	ld	r24, Z
    1e2e:	91 81       	ldd	r25, Z+1	; 0x01
    1e30:	9c 83       	std	Y+4, r25	; 0x04
    1e32:	8b 83       	std	Y+3, r24	; 0x03
                src->item[prio] = (item_t *)0;              // cut all items from current xlist part
    1e34:	8f 81       	ldd	r24, Y+7	; 0x07
    1e36:	88 2f       	mov	r24, r24
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	2c 85       	ldd	r18, Y+12	; 0x0c
    1e3c:	3d 85       	ldd	r19, Y+13	; 0x0d
    1e3e:	88 0f       	add	r24, r24
    1e40:	99 1f       	adc	r25, r25
    1e42:	f9 01       	movw	r30, r18
    1e44:	e8 0f       	add	r30, r24
    1e46:	f9 1f       	adc	r31, r25
    1e48:	11 82       	std	Z+1, r1	; 0x01
    1e4a:	10 82       	st	Z, r1
                // chain former xlist head to a list tail
                tail->next = xhead;
    1e4c:	ed 81       	ldd	r30, Y+5	; 0x05
    1e4e:	fe 81       	ldd	r31, Y+6	; 0x06
    1e50:	8b 81       	ldd	r24, Y+3	; 0x03
    1e52:	9c 81       	ldd	r25, Y+4	; 0x04
    1e54:	91 83       	std	Z+1, r25	; 0x01
    1e56:	80 83       	st	Z, r24
                buf = xhead->prev;
    1e58:	eb 81       	ldd	r30, Y+3	; 0x03
    1e5a:	fc 81       	ldd	r31, Y+4	; 0x04
    1e5c:	82 81       	ldd	r24, Z+2	; 0x02
    1e5e:	93 81       	ldd	r25, Z+3	; 0x03
    1e60:	9a 83       	std	Y+2, r25	; 0x02
    1e62:	89 83       	std	Y+1, r24	; 0x01
                xhead->prev = tail;
    1e64:	eb 81       	ldd	r30, Y+3	; 0x03
    1e66:	fc 81       	ldd	r31, Y+4	; 0x04
    1e68:	8d 81       	ldd	r24, Y+5	; 0x05
    1e6a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e6c:	93 83       	std	Z+3, r25	; 0x03
    1e6e:	82 83       	std	Z+2, r24	; 0x02
                tail = buf;
    1e70:	89 81       	ldd	r24, Y+1	; 0x01
    1e72:	9a 81       	ldd	r25, Y+2	; 0x02
    1e74:	9e 83       	std	Y+6, r25	; 0x06
    1e76:	8d 83       	std	Y+5, r24	; 0x05
            }
            mask <<= (prio_t)1;
    1e78:	89 85       	ldd	r24, Y+9	; 0x09
    1e7a:	88 0f       	add	r24, r24
    1e7c:	89 87       	std	Y+9, r24	; 0x09
            prio++;
    1e7e:	8f 81       	ldd	r24, Y+7	; 0x07
    1e80:	8f 5f       	subi	r24, 0xFF	; 255
    1e82:	8f 83       	std	Y+7, r24	; 0x07
        prio = ret->prio;                       // initial working prio
        src->item[prio++] = (item_t *)0;        // cut all items from current xlist part
        index = src->index;                     // remember xlist index to improve performance
        mask = ((index_t)1) << prio;            // initial mask value
        // cut all items from xlist and form an ordinary list of them
        while(mask)
    1e84:	89 85       	ldd	r24, Y+9	; 0x09
    1e86:	88 23       	and	r24, r24
    1e88:	11 f6       	brne	.-124    	; 0x1e0e <pitem_xlist_chain+0x82>
            }
            mask <<= (prio_t)1;
            prio++;
        }
        // complete the list by chaining tail and head
        ((item_t *)ret)->prev = tail;
    1e8a:	ea 85       	ldd	r30, Y+10	; 0x0a
    1e8c:	fb 85       	ldd	r31, Y+11	; 0x0b
    1e8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e90:	9e 81       	ldd	r25, Y+6	; 0x06
    1e92:	93 83       	std	Z+3, r25	; 0x03
    1e94:	82 83       	std	Z+2, r24	; 0x02
        tail->next = (item_t *)ret;
    1e96:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e98:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e9a:	ed 81       	ldd	r30, Y+5	; 0x05
    1e9c:	fe 81       	ldd	r31, Y+6	; 0x06
    1e9e:	91 83       	std	Z+1, r25	; 0x01
    1ea0:	80 83       	st	Z, r24
        src->index = (index_t)0;        // xlist is empty.
    1ea2:	ec 85       	ldd	r30, Y+12	; 0x0c
    1ea4:	fd 85       	ldd	r31, Y+13	; 0x0d
    1ea6:	10 8a       	std	Z+16, r1	; 0x10
    }
    return ret;                     // return list head;
    1ea8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1eaa:	9b 85       	ldd	r25, Y+11	; 0x0b
}
    1eac:	2d 96       	adiw	r28, 0x0d	; 13
    1eae:	0f b6       	in	r0, 0x3f	; 63
    1eb0:	f8 94       	cli
    1eb2:	de bf       	out	0x3e, r29	; 62
    1eb4:	0f be       	out	0x3f, r0	; 63
    1eb6:	cd bf       	out	0x3d, r28	; 61
    1eb8:	cf 91       	pop	r28
    1eba:	df 91       	pop	r29
    1ebc:	08 95       	ret

00001ebe <proc_init_isr>:
    bool_t is_rt // если true, значит процесс будет иметть поведение RT
#ifdef CONFIG_MP
    ,affinity_t affinity
#endif // CONFIG_MP
)
{
    1ebe:	8f 92       	push	r8
    1ec0:	af 92       	push	r10
    1ec2:	bf 92       	push	r11
    1ec4:	cf 92       	push	r12
    1ec6:	ef 92       	push	r14
    1ec8:	ff 92       	push	r15
    1eca:	0f 93       	push	r16
    1ecc:	1f 93       	push	r17
    1ece:	df 93       	push	r29
    1ed0:	cf 93       	push	r28
    1ed2:	cd b7       	in	r28, 0x3d	; 61
    1ed4:	de b7       	in	r29, 0x3e	; 62
    1ed6:	62 97       	sbiw	r28, 0x12	; 18
    1ed8:	0f b6       	in	r0, 0x3f	; 63
    1eda:	f8 94       	cli
    1edc:	de bf       	out	0x3e, r29	; 62
    1ede:	0f be       	out	0x3f, r0	; 63
    1ee0:	cd bf       	out	0x3d, r28	; 61
    1ee2:	9a 83       	std	Y+2, r25	; 0x02
    1ee4:	89 83       	std	Y+1, r24	; 0x01
    1ee6:	7c 83       	std	Y+4, r23	; 0x04
    1ee8:	6b 83       	std	Y+3, r22	; 0x03
    1eea:	5e 83       	std	Y+6, r21	; 0x06
    1eec:	4d 83       	std	Y+5, r20	; 0x05
    1eee:	38 87       	std	Y+8, r19	; 0x08
    1ef0:	2f 83       	std	Y+7, r18	; 0x07
    1ef2:	1a 87       	std	Y+10, r17	; 0x0a
    1ef4:	09 87       	std	Y+9, r16	; 0x09
    1ef6:	fc 86       	std	Y+12, r15	; 0x0c
    1ef8:	eb 86       	std	Y+11, r14	; 0x0b
    1efa:	cd 86       	std	Y+13, r12	; 0x0d
    1efc:	bf 86       	std	Y+15, r11	; 0x0f
    1efe:	ae 86       	std	Y+14, r10	; 0x0e
    1f00:	88 8a       	std	Y+16, r8	; 0x10
    SPIN_INIT( proc );
    1f02:	89 81       	ldd	r24, Y+1	; 0x01
    1f04:	9a 81       	ldd	r25, Y+2	; 0x02
    1f06:	83 96       	adiw	r24, 0x23	; 35
    1f08:	0e 94 3c 01 	call	0x278	; 0x278 <spin_init>
    SPIN_LOCK( proc );
    1f0c:	89 81       	ldd	r24, Y+1	; 0x01
    1f0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f10:	83 96       	adiw	r24, 0x23	; 35
    1f12:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>

    pitem_init( (pitem_t *)proc, prio );
    1f16:	89 81       	ldd	r24, Y+1	; 0x01
    1f18:	9a 81       	ldd	r25, Y+2	; 0x02
    1f1a:	6d 85       	ldd	r22, Y+13	; 0x0d
    1f1c:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <pitem_init>
    proc->flags = ( is_rt )?PROC_FLG_RT:(flag_t)0;
    1f20:	88 89       	ldd	r24, Y+16	; 0x10
    1f22:	88 23       	and	r24, r24
    1f24:	29 f0       	breq	.+10     	; 0x1f30 <proc_init_isr+0x72>
    1f26:	81 e0       	ldi	r24, 0x01	; 1
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	9a 8b       	std	Y+18, r25	; 0x12
    1f2c:	89 8b       	std	Y+17, r24	; 0x11
    1f2e:	02 c0       	rjmp	.+4      	; 0x1f34 <proc_init_isr+0x76>
    1f30:	1a 8a       	std	Y+18, r1	; 0x12
    1f32:	19 8a       	std	Y+17, r1	; 0x11
    1f34:	e9 81       	ldd	r30, Y+1	; 0x01
    1f36:	fa 81       	ldd	r31, Y+2	; 0x02
    1f38:	89 89       	ldd	r24, Y+17	; 0x11
    1f3a:	9a 89       	ldd	r25, Y+18	; 0x12
    1f3c:	90 87       	std	Z+8, r25	; 0x08
    1f3e:	87 83       	std	Z+7, r24	; 0x07

    PROC_LRES_INIT( proc );
    1f40:	89 81       	ldd	r24, Y+1	; 0x01
    1f42:	9a 81       	ldd	r25, Y+2	; 0x02
    1f44:	0a 96       	adiw	r24, 0x0a	; 10
    1f46:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <pcounter_init>
#ifdef CONFIG_USE_HIGHEST_LOCKER
    proc->base_prio = prio;
    1f4a:	e9 81       	ldd	r30, Y+1	; 0x01
    1f4c:	fa 81       	ldd	r31, Y+2	; 0x02
    1f4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f50:	81 87       	std	Z+9, r24	; 0x09
#endif
    proc->time_quant = time_quant;
    1f52:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f54:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f56:	e9 81       	ldd	r30, Y+1	; 0x01
    1f58:	fa 81       	ldd	r31, Y+2	; 0x02
    1f5a:	94 8f       	std	Z+28, r25	; 0x1c
    1f5c:	83 8f       	std	Z+27, r24	; 0x1b
    proc->timer = time_quant;
    1f5e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f60:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f62:	e9 81       	ldd	r30, Y+1	; 0x01
    1f64:	fa 81       	ldd	r31, Y+2	; 0x02
    1f66:	96 8f       	std	Z+30, r25	; 0x1e
    1f68:	85 8f       	std	Z+29, r24	; 0x1d
#ifdef CONFIG_MP
    proc->core_id = (core_id_t)0;
    1f6a:	e9 81       	ldd	r30, Y+1	; 0x01
    1f6c:	fa 81       	ldd	r31, Y+2	; 0x02
    1f6e:	11 a2       	std	Z+33, r1	; 0x21
    proc->affinity = affinity;
    1f70:	e9 81       	ldd	r30, Y+1	; 0x01
    1f72:	fa 81       	ldd	r31, Y+2	; 0x02
    1f74:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f76:	82 a3       	std	Z+34, r24	; 0x22
#endif // CONFIG_MP
    proc->pmain = pmain;
    1f78:	e9 81       	ldd	r30, Y+1	; 0x01
    1f7a:	fa 81       	ldd	r31, Y+2	; 0x02
    1f7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f80:	95 a3       	std	Z+37, r25	; 0x25
    1f82:	84 a3       	std	Z+36, r24	; 0x24
    proc->sv_hook = sv_hook;
    1f84:	e9 81       	ldd	r30, Y+1	; 0x01
    1f86:	fa 81       	ldd	r31, Y+2	; 0x02
    1f88:	8d 81       	ldd	r24, Y+5	; 0x05
    1f8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f8c:	97 a3       	std	Z+39, r25	; 0x27
    1f8e:	86 a3       	std	Z+38, r24	; 0x26
    proc->rs_hook = rs_hook;
    1f90:	e9 81       	ldd	r30, Y+1	; 0x01
    1f92:	fa 81       	ldd	r31, Y+2	; 0x02
    1f94:	8f 81       	ldd	r24, Y+7	; 0x07
    1f96:	98 85       	ldd	r25, Y+8	; 0x08
    1f98:	91 a7       	std	Z+41, r25	; 0x29
    1f9a:	80 a7       	std	Z+40, r24	; 0x28
    proc->arg = arg;
    1f9c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f9e:	fa 81       	ldd	r31, Y+2	; 0x02
    1fa0:	89 85       	ldd	r24, Y+9	; 0x09
    1fa2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fa4:	93 a7       	std	Z+43, r25	; 0x2b
    1fa6:	82 a7       	std	Z+42, r24	; 0x2a
    proc->sstart = sstart;
    1fa8:	e9 81       	ldd	r30, Y+1	; 0x01
    1faa:	fa 81       	ldd	r31, Y+2	; 0x02
    1fac:	8b 85       	ldd	r24, Y+11	; 0x0b
    1fae:	9c 85       	ldd	r25, Y+12	; 0x0c
    1fb0:	95 a7       	std	Z+45, r25	; 0x2d
    1fb2:	84 a7       	std	Z+44, r24	; 0x2c
    if( sstart )proc->spointer = proc_stack_init(sstart, (code_t)proc_run_wrapper, (void *)proc);
    1fb4:	8b 85       	ldd	r24, Y+11	; 0x0b
    1fb6:	9c 85       	ldd	r25, Y+12	; 0x0c
    1fb8:	00 97       	sbiw	r24, 0x00	; 0
    1fba:	71 f0       	breq	.+28     	; 0x1fd8 <proc_init_isr+0x11a>
    1fbc:	47 e1       	ldi	r20, 0x17	; 23
    1fbe:	5a e1       	ldi	r21, 0x1A	; 26
    1fc0:	8b 85       	ldd	r24, Y+11	; 0x0b
    1fc2:	9c 85       	ldd	r25, Y+12	; 0x0c
    1fc4:	29 81       	ldd	r18, Y+1	; 0x01
    1fc6:	3a 81       	ldd	r19, Y+2	; 0x02
    1fc8:	ba 01       	movw	r22, r20
    1fca:	a9 01       	movw	r20, r18
    1fcc:	0e 94 22 08 	call	0x1044	; 0x1044 <proc_stack_init>
    1fd0:	e9 81       	ldd	r30, Y+1	; 0x01
    1fd2:	fa 81       	ldd	r31, Y+2	; 0x02
    1fd4:	97 a7       	std	Z+47, r25	; 0x2f
    1fd6:	86 a7       	std	Z+46, r24	; 0x2e

    SPIN_UNLOCK( proc );
    1fd8:	89 81       	ldd	r24, Y+1	; 0x01
    1fda:	9a 81       	ldd	r25, Y+2	; 0x02
    1fdc:	83 96       	adiw	r24, 0x23	; 35
    1fde:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
}
    1fe2:	62 96       	adiw	r28, 0x12	; 18
    1fe4:	0f b6       	in	r0, 0x3f	; 63
    1fe6:	f8 94       	cli
    1fe8:	de bf       	out	0x3e, r29	; 62
    1fea:	0f be       	out	0x3f, r0	; 63
    1fec:	cd bf       	out	0x3d, r28	; 61
    1fee:	cf 91       	pop	r28
    1ff0:	df 91       	pop	r29
    1ff2:	1f 91       	pop	r17
    1ff4:	0f 91       	pop	r16
    1ff6:	ff 90       	pop	r15
    1ff8:	ef 90       	pop	r14
    1ffa:	cf 90       	pop	r12
    1ffc:	bf 90       	pop	r11
    1ffe:	af 90       	pop	r10
    2000:	8f 90       	pop	r8
    2002:	08 95       	ret

00002004 <_proc_run_>:
//  Функция для внутреннего использования - собственно запуск процесса
#ifdef CONFIG_MP
void _proc_run_( proc_t * proc )
{
    2004:	df 93       	push	r29
    2006:	cf 93       	push	r28
    2008:	00 d0       	rcall	.+0      	; 0x200a <_proc_run_+0x6>
    200a:	00 d0       	rcall	.+0      	; 0x200c <_proc_run_+0x8>
    200c:	cd b7       	in	r28, 0x3d	; 61
    200e:	de b7       	in	r29, 0x3e	; 62
    2010:	9c 83       	std	Y+4, r25	; 0x04
    2012:	8b 83       	std	Y+3, r24	; 0x03
    sched_t * proc_sched;
    proc_sched = (sched_t *)kernel.sched + proc->core_id;
    2014:	eb 81       	ldd	r30, Y+3	; 0x03
    2016:	fc 81       	ldd	r31, Y+4	; 0x04
    2018:	81 a1       	ldd	r24, Z+33	; 0x21
    201a:	28 2f       	mov	r18, r24
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	8b e2       	ldi	r24, 0x2B	; 43
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	ac 01       	movw	r20, r24
    2024:	24 9f       	mul	r18, r20
    2026:	c0 01       	movw	r24, r0
    2028:	25 9f       	mul	r18, r21
    202a:	90 0d       	add	r25, r0
    202c:	34 9f       	mul	r19, r20
    202e:	90 0d       	add	r25, r0
    2030:	11 24       	eor	r1, r1
    2032:	85 5b       	subi	r24, 0xB5	; 181
    2034:	9d 4f       	sbci	r25, 0xFD	; 253
    2036:	9a 83       	std	Y+2, r25	; 0x02
    2038:	89 83       	std	Y+1, r24	; 0x01
    SPIN_LOCK( proc_sched );
    203a:	89 81       	ldd	r24, Y+1	; 0x01
    203c:	9a 81       	ldd	r25, Y+2	; 0x02
    203e:	8a 96       	adiw	r24, 0x2a	; 42
    2040:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
    pitem_insert( (pitem_t *)proc, proc_sched->ready );
    2044:	8b 81       	ldd	r24, Y+3	; 0x03
    2046:	9c 81       	ldd	r25, Y+4	; 0x04
    2048:	e9 81       	ldd	r30, Y+1	; 0x01
    204a:	fa 81       	ldd	r31, Y+2	; 0x02
    204c:	22 81       	ldd	r18, Z+2	; 0x02
    204e:	33 81       	ldd	r19, Z+3	; 0x03
    2050:	b9 01       	movw	r22, r18
    2052:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <pitem_insert>
    SPIN_UNLOCK( proc_sched );
    2056:	89 81       	ldd	r24, Y+1	; 0x01
    2058:	9a 81       	ldd	r25, Y+2	; 0x02
    205a:	8a 96       	adiw	r24, 0x2a	; 42
    205c:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
}
    2060:	0f 90       	pop	r0
    2062:	0f 90       	pop	r0
    2064:	0f 90       	pop	r0
    2066:	0f 90       	pop	r0
    2068:	cf 91       	pop	r28
    206a:	df 91       	pop	r29
    206c:	08 95       	ret

0000206e <_proc_run>:
#endif // CONFIG_MP

void _proc_run( proc_t * proc )
{
    206e:	df 93       	push	r29
    2070:	cf 93       	push	r28
    2072:	00 d0       	rcall	.+0      	; 0x2074 <_proc_run+0x6>
    2074:	cd b7       	in	r28, 0x3d	; 61
    2076:	de b7       	in	r29, 0x3e	; 62
    2078:	9a 83       	std	Y+2, r25	; 0x02
    207a:	89 83       	std	Y+1, r24	; 0x01
    proc->flags |= PROC_FLG_RUN;
    207c:	e9 81       	ldd	r30, Y+1	; 0x01
    207e:	fa 81       	ldd	r31, Y+2	; 0x02
    2080:	87 81       	ldd	r24, Z+7	; 0x07
    2082:	90 85       	ldd	r25, Z+8	; 0x08
    2084:	82 60       	ori	r24, 0x02	; 2
    2086:	e9 81       	ldd	r30, Y+1	; 0x01
    2088:	fa 81       	ldd	r31, Y+2	; 0x02
    208a:	90 87       	std	Z+8, r25	; 0x08
    208c:	87 83       	std	Z+7, r24	; 0x07
#ifdef CONFIG_MP
    spin_lock( &kernel.stat_lock );
    208e:	83 e0       	ldi	r24, 0x03	; 3
    2090:	93 e0       	ldi	r25, 0x03	; 3
    2092:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
    proc->core_id = sched_load_balancer( proc, (stat_t *)kernel.stat );
    2096:	89 81       	ldd	r24, Y+1	; 0x01
    2098:	9a 81       	ldd	r25, Y+2	; 0x02
    209a:	21 e0       	ldi	r18, 0x01	; 1
    209c:	33 e0       	ldi	r19, 0x03	; 3
    209e:	b9 01       	movw	r22, r18
    20a0:	0e 94 2e 13 	call	0x265c	; 0x265c <sched_load_balancer>
    20a4:	e9 81       	ldd	r30, Y+1	; 0x01
    20a6:	fa 81       	ldd	r31, Y+2	; 0x02
    20a8:	81 a3       	std	Z+33, r24	; 0x21
    stat_inc( proc, (stat_t *)kernel.stat+proc->core_id );
    20aa:	e9 81       	ldd	r30, Y+1	; 0x01
    20ac:	fa 81       	ldd	r31, Y+2	; 0x02
    20ae:	81 a1       	ldd	r24, Z+33	; 0x21
    20b0:	88 2f       	mov	r24, r24
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	9c 01       	movw	r18, r24
    20b6:	2f 5f       	subi	r18, 0xFF	; 255
    20b8:	3c 4f       	sbci	r19, 0xFC	; 252
    20ba:	89 81       	ldd	r24, Y+1	; 0x01
    20bc:	9a 81       	ldd	r25, Y+2	; 0x02
    20be:	b9 01       	movw	r22, r18
    20c0:	0e 94 98 01 	call	0x330	; 0x330 <stat_inc>
    spin_unlock( &kernel.stat_lock );
    20c4:	83 e0       	ldi	r24, 0x03	; 3
    20c6:	93 e0       	ldi	r25, 0x03	; 3
    20c8:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
#endif
    _proc_run_( proc );
    20cc:	89 81       	ldd	r24, Y+1	; 0x01
    20ce:	9a 81       	ldd	r25, Y+2	; 0x02
    20d0:	0e 94 02 10 	call	0x2004	; 0x2004 <_proc_run_>

    RESCHED_PROC( proc );
    20d4:	e9 81       	ldd	r30, Y+1	; 0x01
    20d6:	fa 81       	ldd	r31, Y+2	; 0x02
    20d8:	81 a1       	ldd	r24, Z+33	; 0x21
    20da:	0e 94 de 01 	call	0x3bc	; 0x3bc <resched>
}
    20de:	0f 90       	pop	r0
    20e0:	0f 90       	pop	r0
    20e2:	cf 91       	pop	r28
    20e4:	df 91       	pop	r29
    20e6:	08 95       	ret

000020e8 <proc_run_isr>:
// Функция общего пользования - запуск процесса из обработчика прерывания, прерывания должны быть запрещены во время запуска
bool_t proc_run_isr(proc_t * proc)
{
    20e8:	df 93       	push	r29
    20ea:	cf 93       	push	r28
    20ec:	00 d0       	rcall	.+0      	; 0x20ee <proc_run_isr+0x6>
    20ee:	0f 92       	push	r0
    20f0:	cd b7       	in	r28, 0x3d	; 61
    20f2:	de b7       	in	r29, 0x3e	; 62
    20f4:	9b 83       	std	Y+3, r25	; 0x03
    20f6:	8a 83       	std	Y+2, r24	; 0x02
    bool_t ret = (bool_t)1;
    20f8:	81 e0       	ldi	r24, 0x01	; 1
    20fa:	89 83       	std	Y+1, r24	; 0x01

    SPIN_LOCK( proc );
    20fc:	8a 81       	ldd	r24, Y+2	; 0x02
    20fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2100:	83 96       	adiw	r24, 0x23	; 35
    2102:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>

    if( proc->flags & (PROC_FLG_RUN|PROC_FLG_QUEUE|PROC_FLG_WAIT|PROC_FLG_IPCW|PROC_FLG_END|PROC_FLG_DEAD|PROC_FLG_WD_STOP) )
    2106:	ea 81       	ldd	r30, Y+2	; 0x02
    2108:	fb 81       	ldd	r31, Y+3	; 0x03
    210a:	87 81       	ldd	r24, Z+7	; 0x07
    210c:	90 85       	ldd	r25, Z+8	; 0x08
    210e:	82 77       	andi	r24, 0x72	; 114
    2110:	97 70       	andi	r25, 0x07	; 7
    2112:	00 97       	sbiw	r24, 0x00	; 0
    2114:	11 f0       	breq	.+4      	; 0x211a <proc_run_isr+0x32>
    {
        ret = (bool_t)0;
    2116:	19 82       	std	Y+1, r1	; 0x01
    2118:	04 c0       	rjmp	.+8      	; 0x2122 <proc_run_isr+0x3a>
        goto end;
    }
    _proc_run( proc );
    211a:	8a 81       	ldd	r24, Y+2	; 0x02
    211c:	9b 81       	ldd	r25, Y+3	; 0x03
    211e:	0e 94 37 10 	call	0x206e	; 0x206e <_proc_run>
end:

    SPIN_UNLOCK( proc );
    2122:	8a 81       	ldd	r24, Y+2	; 0x02
    2124:	9b 81       	ldd	r25, Y+3	; 0x03
    2126:	83 96       	adiw	r24, 0x23	; 35
    2128:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>

    return ret;
    212c:	89 81       	ldd	r24, Y+1	; 0x01
}
    212e:	0f 90       	pop	r0
    2130:	0f 90       	pop	r0
    2132:	0f 90       	pop	r0
    2134:	cf 91       	pop	r28
    2136:	df 91       	pop	r29
    2138:	08 95       	ret

0000213a <proc_restart_isr>:
// Перезепуск процесса из обработчика прерываний, прерывания должны быть запрещены
bool_t proc_restart_isr(proc_t * proc)
{
    213a:	df 93       	push	r29
    213c:	cf 93       	push	r28
    213e:	00 d0       	rcall	.+0      	; 0x2140 <proc_restart_isr+0x6>
    2140:	00 d0       	rcall	.+0      	; 0x2142 <proc_restart_isr+0x8>
    2142:	0f 92       	push	r0
    2144:	cd b7       	in	r28, 0x3d	; 61
    2146:	de b7       	in	r29, 0x3e	; 62
    2148:	9b 83       	std	Y+3, r25	; 0x03
    214a:	8a 83       	std	Y+2, r24	; 0x02
    bool_t ret = (bool_t)1;
    214c:	81 e0       	ldi	r24, 0x01	; 1
    214e:	89 83       	std	Y+1, r24	; 0x01

    SPIN_LOCK( proc );
    2150:	8a 81       	ldd	r24, Y+2	; 0x02
    2152:	9b 81       	ldd	r25, Y+3	; 0x03
    2154:	83 96       	adiw	r24, 0x23	; 35
    2156:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>

    if( proc->flags & (PROC_FLG_RUN|PROC_FLG_MUTEX|PROC_FLG_SEM|PROC_FLG_QUEUE|PROC_FLG_WAIT|PROC_FLG_IPCW|PROC_FLG_DEAD) )
    215a:	ea 81       	ldd	r30, Y+2	; 0x02
    215c:	fb 81       	ldd	r31, Y+3	; 0x03
    215e:	87 81       	ldd	r24, Z+7	; 0x07
    2160:	90 85       	ldd	r25, Z+8	; 0x08
    2162:	8e 77       	andi	r24, 0x7E	; 126
    2164:	94 70       	andi	r25, 0x04	; 4
    2166:	00 97       	sbiw	r24, 0x00	; 0
    2168:	11 f0       	breq	.+4      	; 0x216e <proc_restart_isr+0x34>
    {
        ret = (bool_t)0;
    216a:	19 82       	std	Y+1, r1	; 0x01
    216c:	3b c0       	rjmp	.+118    	; 0x21e4 <proc_restart_isr+0xaa>
        goto end;
    }
    proc->flags = ( proc->flags & PROC_FLG_RT )?PROC_FLG_RT:(flag_t)0;
    216e:	ea 81       	ldd	r30, Y+2	; 0x02
    2170:	fb 81       	ldd	r31, Y+3	; 0x03
    2172:	87 81       	ldd	r24, Z+7	; 0x07
    2174:	90 85       	ldd	r25, Z+8	; 0x08
    2176:	81 70       	andi	r24, 0x01	; 1
    2178:	90 70       	andi	r25, 0x00	; 0
    217a:	88 23       	and	r24, r24
    217c:	29 f0       	breq	.+10     	; 0x2188 <proc_restart_isr+0x4e>
    217e:	81 e0       	ldi	r24, 0x01	; 1
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	9d 83       	std	Y+5, r25	; 0x05
    2184:	8c 83       	std	Y+4, r24	; 0x04
    2186:	02 c0       	rjmp	.+4      	; 0x218c <proc_restart_isr+0x52>
    2188:	1d 82       	std	Y+5, r1	; 0x05
    218a:	1c 82       	std	Y+4, r1	; 0x04
    218c:	ea 81       	ldd	r30, Y+2	; 0x02
    218e:	fb 81       	ldd	r31, Y+3	; 0x03
    2190:	8c 81       	ldd	r24, Y+4	; 0x04
    2192:	9d 81       	ldd	r25, Y+5	; 0x05
    2194:	90 87       	std	Z+8, r25	; 0x08
    2196:	87 83       	std	Z+7, r24	; 0x07

    PROC_LRES_INIT( proc );
    2198:	8a 81       	ldd	r24, Y+2	; 0x02
    219a:	9b 81       	ldd	r25, Y+3	; 0x03
    219c:	0a 96       	adiw	r24, 0x0a	; 10
    219e:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <pcounter_init>

    proc->timer = proc->time_quant;
    21a2:	ea 81       	ldd	r30, Y+2	; 0x02
    21a4:	fb 81       	ldd	r31, Y+3	; 0x03
    21a6:	83 8d       	ldd	r24, Z+27	; 0x1b
    21a8:	94 8d       	ldd	r25, Z+28	; 0x1c
    21aa:	ea 81       	ldd	r30, Y+2	; 0x02
    21ac:	fb 81       	ldd	r31, Y+3	; 0x03
    21ae:	96 8f       	std	Z+30, r25	; 0x1e
    21b0:	85 8f       	std	Z+29, r24	; 0x1d

    if( proc->sstart )proc->spointer = proc_stack_init( proc->sstart, (code_t)proc_run_wrapper, (void *)proc );
    21b2:	ea 81       	ldd	r30, Y+2	; 0x02
    21b4:	fb 81       	ldd	r31, Y+3	; 0x03
    21b6:	84 a5       	ldd	r24, Z+44	; 0x2c
    21b8:	95 a5       	ldd	r25, Z+45	; 0x2d
    21ba:	00 97       	sbiw	r24, 0x00	; 0
    21bc:	79 f0       	breq	.+30     	; 0x21dc <proc_restart_isr+0xa2>
    21be:	ea 81       	ldd	r30, Y+2	; 0x02
    21c0:	fb 81       	ldd	r31, Y+3	; 0x03
    21c2:	84 a5       	ldd	r24, Z+44	; 0x2c
    21c4:	95 a5       	ldd	r25, Z+45	; 0x2d
    21c6:	27 e1       	ldi	r18, 0x17	; 23
    21c8:	3a e1       	ldi	r19, 0x1A	; 26
    21ca:	4a 81       	ldd	r20, Y+2	; 0x02
    21cc:	5b 81       	ldd	r21, Y+3	; 0x03
    21ce:	b9 01       	movw	r22, r18
    21d0:	0e 94 22 08 	call	0x1044	; 0x1044 <proc_stack_init>
    21d4:	ea 81       	ldd	r30, Y+2	; 0x02
    21d6:	fb 81       	ldd	r31, Y+3	; 0x03
    21d8:	97 a7       	std	Z+47, r25	; 0x2f
    21da:	86 a7       	std	Z+46, r24	; 0x2e
    _proc_run( proc );
    21dc:	8a 81       	ldd	r24, Y+2	; 0x02
    21de:	9b 81       	ldd	r25, Y+3	; 0x03
    21e0:	0e 94 37 10 	call	0x206e	; 0x206e <_proc_run>
end:

    SPIN_UNLOCK( proc );
    21e4:	8a 81       	ldd	r24, Y+2	; 0x02
    21e6:	9b 81       	ldd	r25, Y+3	; 0x03
    21e8:	83 96       	adiw	r24, 0x23	; 35
    21ea:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>

    return ret;
    21ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    21f0:	0f 90       	pop	r0
    21f2:	0f 90       	pop	r0
    21f4:	0f 90       	pop	r0
    21f6:	0f 90       	pop	r0
    21f8:	0f 90       	pop	r0
    21fa:	cf 91       	pop	r28
    21fc:	df 91       	pop	r29
    21fe:	08 95       	ret

00002200 <_proc_stop_>:
// Функция для внутреннего использования, останов процесса

#ifdef CONFIG_MP
void _proc_stop_(proc_t * proc)
{
    2200:	df 93       	push	r29
    2202:	cf 93       	push	r28
    2204:	00 d0       	rcall	.+0      	; 0x2206 <_proc_stop_+0x6>
    2206:	00 d0       	rcall	.+0      	; 0x2208 <_proc_stop_+0x8>
    2208:	cd b7       	in	r28, 0x3d	; 61
    220a:	de b7       	in	r29, 0x3e	; 62
    220c:	9c 83       	std	Y+4, r25	; 0x04
    220e:	8b 83       	std	Y+3, r24	; 0x03
    spin_lock( &kernel.stat_lock );
    2210:	83 e0       	ldi	r24, 0x03	; 3
    2212:	93 e0       	ldi	r25, 0x03	; 3
    2214:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
    stat_dec( proc, (stat_t *)kernel.stat + proc->core_id );
    2218:	eb 81       	ldd	r30, Y+3	; 0x03
    221a:	fc 81       	ldd	r31, Y+4	; 0x04
    221c:	81 a1       	ldd	r24, Z+33	; 0x21
    221e:	88 2f       	mov	r24, r24
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	9c 01       	movw	r18, r24
    2224:	2f 5f       	subi	r18, 0xFF	; 255
    2226:	3c 4f       	sbci	r19, 0xFC	; 252
    2228:	8b 81       	ldd	r24, Y+3	; 0x03
    222a:	9c 81       	ldd	r25, Y+4	; 0x04
    222c:	b9 01       	movw	r22, r18
    222e:	0e 94 82 01 	call	0x304	; 0x304 <stat_dec>
    spin_unlock( &kernel.stat_lock );
    2232:	83 e0       	ldi	r24, 0x03	; 3
    2234:	93 e0       	ldi	r25, 0x03	; 3
    2236:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
    {
        lock_t * xlist_lock;
        xlist_lock = &((sched_t *)kernel.sched + proc->core_id)->lock;
    223a:	eb 81       	ldd	r30, Y+3	; 0x03
    223c:	fc 81       	ldd	r31, Y+4	; 0x04
    223e:	81 a1       	ldd	r24, Z+33	; 0x21
    2240:	28 2f       	mov	r18, r24
    2242:	30 e0       	ldi	r19, 0x00	; 0
    2244:	8b e2       	ldi	r24, 0x2B	; 43
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	ac 01       	movw	r20, r24
    224a:	24 9f       	mul	r18, r20
    224c:	c0 01       	movw	r24, r0
    224e:	25 9f       	mul	r18, r21
    2250:	90 0d       	add	r25, r0
    2252:	34 9f       	mul	r19, r20
    2254:	90 0d       	add	r25, r0
    2256:	11 24       	eor	r1, r1
    2258:	85 5b       	subi	r24, 0xB5	; 181
    225a:	9d 4f       	sbci	r25, 0xFD	; 253
    225c:	8a 96       	adiw	r24, 0x2a	; 42
    225e:	9a 83       	std	Y+2, r25	; 0x02
    2260:	89 83       	std	Y+1, r24	; 0x01
        spin_lock( xlist_lock );
    2262:	89 81       	ldd	r24, Y+1	; 0x01
    2264:	9a 81       	ldd	r25, Y+2	; 0x02
    2266:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
        pitem_cut( (pitem_t *)proc );
    226a:	8b 81       	ldd	r24, Y+3	; 0x03
    226c:	9c 81       	ldd	r25, Y+4	; 0x04
    226e:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <pitem_cut>
        spin_unlock( xlist_lock );
    2272:	89 81       	ldd	r24, Y+1	; 0x01
    2274:	9a 81       	ldd	r25, Y+2	; 0x02
    2276:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
    }
}
    227a:	0f 90       	pop	r0
    227c:	0f 90       	pop	r0
    227e:	0f 90       	pop	r0
    2280:	0f 90       	pop	r0
    2282:	cf 91       	pop	r28
    2284:	df 91       	pop	r29
    2286:	08 95       	ret

00002288 <_proc_stop>:
#endif // CONFIG_MP

void _proc_stop(proc_t * proc)
{
    2288:	df 93       	push	r29
    228a:	cf 93       	push	r28
    228c:	00 d0       	rcall	.+0      	; 0x228e <_proc_stop+0x6>
    228e:	cd b7       	in	r28, 0x3d	; 61
    2290:	de b7       	in	r29, 0x3e	; 62
    2292:	9a 83       	std	Y+2, r25	; 0x02
    2294:	89 83       	std	Y+1, r24	; 0x01
    proc->flags &= ~PROC_FLG_RUN;
    2296:	e9 81       	ldd	r30, Y+1	; 0x01
    2298:	fa 81       	ldd	r31, Y+2	; 0x02
    229a:	87 81       	ldd	r24, Z+7	; 0x07
    229c:	90 85       	ldd	r25, Z+8	; 0x08
    229e:	8d 7f       	andi	r24, 0xFD	; 253
    22a0:	e9 81       	ldd	r30, Y+1	; 0x01
    22a2:	fa 81       	ldd	r31, Y+2	; 0x02
    22a4:	90 87       	std	Z+8, r25	; 0x08
    22a6:	87 83       	std	Z+7, r24	; 0x07
    _proc_stop_( proc );
    22a8:	89 81       	ldd	r24, Y+1	; 0x01
    22aa:	9a 81       	ldd	r25, Y+2	; 0x02
    22ac:	0e 94 00 11 	call	0x2200	; 0x2200 <_proc_stop_>
    RESCHED_PROC( proc );
    22b0:	e9 81       	ldd	r30, Y+1	; 0x01
    22b2:	fa 81       	ldd	r31, Y+2	; 0x02
    22b4:	81 a1       	ldd	r24, Z+33	; 0x21
    22b6:	0e 94 de 01 	call	0x3bc	; 0x3bc <resched>
}
    22ba:	0f 90       	pop	r0
    22bc:	0f 90       	pop	r0
    22be:	cf 91       	pop	r28
    22c0:	df 91       	pop	r29
    22c2:	08 95       	ret

000022c4 <proc_stop_isr>:
// Останов процесса из обработчика прерываний, прерывания должны быть запрещены
bool_t proc_stop_isr(proc_t * proc)
{
    22c4:	df 93       	push	r29
    22c6:	cf 93       	push	r28
    22c8:	00 d0       	rcall	.+0      	; 0x22ca <proc_stop_isr+0x6>
    22ca:	0f 92       	push	r0
    22cc:	cd b7       	in	r28, 0x3d	; 61
    22ce:	de b7       	in	r29, 0x3e	; 62
    22d0:	9b 83       	std	Y+3, r25	; 0x03
    22d2:	8a 83       	std	Y+2, r24	; 0x02
    bool_t ret = (bool_t)0;
    22d4:	19 82       	std	Y+1, r1	; 0x01

    SPIN_LOCK( proc );
    22d6:	8a 81       	ldd	r24, Y+2	; 0x02
    22d8:	9b 81       	ldd	r25, Y+3	; 0x03
    22da:	83 96       	adiw	r24, 0x23	; 35
    22dc:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
    //Проверка флагов
    //В случчае PROC_FLG_WAIT будем обрабатывать PROC_FLG_PRE_END на выходе из sig_wait.
    //В случае PROC_FLG_MUTEX или PROC_FLG_SEM будем обрабатывать PROC_FLG_PRE_STOP при освобождении общего ресурса.
    //В случае ожидания IPC флаг будем обрабатывать при попытке передать данные или указатель целевому процессу.
    if( proc->flags & (PROC_FLG_MUTEX|PROC_FLG_SEM|PROC_FLG_QUEUE|PROC_FLG_WAIT|PROC_FLG_IPCW) )proc->flags |= PROC_FLG_PRE_STOP;
    22e0:	ea 81       	ldd	r30, Y+2	; 0x02
    22e2:	fb 81       	ldd	r31, Y+3	; 0x03
    22e4:	87 81       	ldd	r24, Z+7	; 0x07
    22e6:	90 85       	ldd	r25, Z+8	; 0x08
    22e8:	8c 77       	andi	r24, 0x7C	; 124
    22ea:	90 70       	andi	r25, 0x00	; 0
    22ec:	00 97       	sbiw	r24, 0x00	; 0
    22ee:	51 f0       	breq	.+20     	; 0x2304 <proc_stop_isr+0x40>
    22f0:	ea 81       	ldd	r30, Y+2	; 0x02
    22f2:	fb 81       	ldd	r31, Y+3	; 0x03
    22f4:	87 81       	ldd	r24, Z+7	; 0x07
    22f6:	90 85       	ldd	r25, Z+8	; 0x08
    22f8:	80 68       	ori	r24, 0x80	; 128
    22fa:	ea 81       	ldd	r30, Y+2	; 0x02
    22fc:	fb 81       	ldd	r31, Y+3	; 0x03
    22fe:	90 87       	std	Z+8, r25	; 0x08
    2300:	87 83       	std	Z+7, r24	; 0x07
    2302:	0e c0       	rjmp	.+28     	; 0x2320 <proc_stop_isr+0x5c>
    else if( proc->flags & PROC_FLG_RUN )
    2304:	ea 81       	ldd	r30, Y+2	; 0x02
    2306:	fb 81       	ldd	r31, Y+3	; 0x03
    2308:	87 81       	ldd	r24, Z+7	; 0x07
    230a:	90 85       	ldd	r25, Z+8	; 0x08
    230c:	82 70       	andi	r24, 0x02	; 2
    230e:	90 70       	andi	r25, 0x00	; 0
    2310:	00 97       	sbiw	r24, 0x00	; 0
    2312:	31 f0       	breq	.+12     	; 0x2320 <proc_stop_isr+0x5c>
    {
        _proc_stop( proc );
    2314:	8a 81       	ldd	r24, Y+2	; 0x02
    2316:	9b 81       	ldd	r25, Y+3	; 0x03
    2318:	0e 94 44 11 	call	0x2288	; 0x2288 <_proc_stop>
        ret = (bool_t)1;
    231c:	81 e0       	ldi	r24, 0x01	; 1
    231e:	89 83       	std	Y+1, r24	; 0x01
    }

    SPIN_UNLOCK( proc );
    2320:	8a 81       	ldd	r24, Y+2	; 0x02
    2322:	9b 81       	ldd	r25, Y+3	; 0x03
    2324:	83 96       	adiw	r24, 0x23	; 35
    2326:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>

    return ret;
    232a:	89 81       	ldd	r24, Y+1	; 0x01
}
    232c:	0f 90       	pop	r0
    232e:	0f 90       	pop	r0
    2330:	0f 90       	pop	r0
    2332:	cf 91       	pop	r28
    2334:	df 91       	pop	r29
    2336:	08 95       	ret

00002338 <_proc_flag_stop>:
// Обработка флага останова процесса, для использования с семафорами, мьютексами и сигналами.
void _proc_flag_stop( flag_t mask )
{
    2338:	df 93       	push	r29
    233a:	cf 93       	push	r28
    233c:	00 d0       	rcall	.+0      	; 0x233e <_proc_flag_stop+0x6>
    233e:	00 d0       	rcall	.+0      	; 0x2340 <_proc_flag_stop+0x8>
    2340:	cd b7       	in	r28, 0x3d	; 61
    2342:	de b7       	in	r29, 0x3e	; 62
    2344:	9c 83       	std	Y+4, r25	; 0x04
    2346:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc;
    proc = current_proc();
    2348:	0e 94 0a 01 	call	0x214	; 0x214 <current_proc>
    234c:	9a 83       	std	Y+2, r25	; 0x02
    234e:	89 83       	std	Y+1, r24	; 0x01

    SPIN_LOCK( proc );
    2350:	89 81       	ldd	r24, Y+1	; 0x01
    2352:	9a 81       	ldd	r25, Y+2	; 0x02
    2354:	83 96       	adiw	r24, 0x23	; 35
    2356:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>

    proc->flags &= ~mask;
    235a:	e9 81       	ldd	r30, Y+1	; 0x01
    235c:	fa 81       	ldd	r31, Y+2	; 0x02
    235e:	27 81       	ldd	r18, Z+7	; 0x07
    2360:	30 85       	ldd	r19, Z+8	; 0x08
    2362:	8b 81       	ldd	r24, Y+3	; 0x03
    2364:	9c 81       	ldd	r25, Y+4	; 0x04
    2366:	80 95       	com	r24
    2368:	90 95       	com	r25
    236a:	82 23       	and	r24, r18
    236c:	93 23       	and	r25, r19
    236e:	e9 81       	ldd	r30, Y+1	; 0x01
    2370:	fa 81       	ldd	r31, Y+2	; 0x02
    2372:	90 87       	std	Z+8, r25	; 0x08
    2374:	87 83       	std	Z+7, r24	; 0x07
    if(  PROC_PRE_STOP_TEST(proc)  )
    2376:	e9 81       	ldd	r30, Y+1	; 0x01
    2378:	fa 81       	ldd	r31, Y+2	; 0x02
    237a:	87 81       	ldd	r24, Z+7	; 0x07
    237c:	90 85       	ldd	r25, Z+8	; 0x08
    237e:	80 78       	andi	r24, 0x80	; 128
    2380:	90 70       	andi	r25, 0x00	; 0
    2382:	00 97       	sbiw	r24, 0x00	; 0
    2384:	a9 f0       	breq	.+42     	; 0x23b0 <_proc_flag_stop+0x78>
    2386:	e9 81       	ldd	r30, Y+1	; 0x01
    2388:	fa 81       	ldd	r31, Y+2	; 0x02
    238a:	87 81       	ldd	r24, Z+7	; 0x07
    238c:	90 85       	ldd	r25, Z+8	; 0x08
    238e:	8c 70       	andi	r24, 0x0C	; 12
    2390:	90 70       	andi	r25, 0x00	; 0
    2392:	00 97       	sbiw	r24, 0x00	; 0
    2394:	69 f4       	brne	.+26     	; 0x23b0 <_proc_flag_stop+0x78>
        /*
        Если был запрошен останов целевого процесса,
        и целевой процесс не удерживает общие ресурсы,
        то мы остановим процесс
        */
        proc->flags &= ~PROC_FLG_PRE_STOP;
    2396:	e9 81       	ldd	r30, Y+1	; 0x01
    2398:	fa 81       	ldd	r31, Y+2	; 0x02
    239a:	87 81       	ldd	r24, Z+7	; 0x07
    239c:	90 85       	ldd	r25, Z+8	; 0x08
    239e:	8f 77       	andi	r24, 0x7F	; 127
    23a0:	e9 81       	ldd	r30, Y+1	; 0x01
    23a2:	fa 81       	ldd	r31, Y+2	; 0x02
    23a4:	90 87       	std	Z+8, r25	; 0x08
    23a6:	87 83       	std	Z+7, r24	; 0x07
        _proc_stop( proc );
    23a8:	89 81       	ldd	r24, Y+1	; 0x01
    23aa:	9a 81       	ldd	r25, Y+2	; 0x02
    23ac:	0e 94 44 11 	call	0x2288	; 0x2288 <_proc_stop>
    }

    SPIN_UNLOCK( proc );
    23b0:	89 81       	ldd	r24, Y+1	; 0x01
    23b2:	9a 81       	ldd	r25, Y+2	; 0x02
    23b4:	83 96       	adiw	r24, 0x23	; 35
    23b6:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>

}
    23ba:	0f 90       	pop	r0
    23bc:	0f 90       	pop	r0
    23be:	0f 90       	pop	r0
    23c0:	0f 90       	pop	r0
    23c2:	cf 91       	pop	r28
    23c4:	df 91       	pop	r29
    23c6:	08 95       	ret

000023c8 <_proc_terminate>:

void _proc_terminate( proc_t * proc )
{
    23c8:	df 93       	push	r29
    23ca:	cf 93       	push	r28
    23cc:	00 d0       	rcall	.+0      	; 0x23ce <_proc_terminate+0x6>
    23ce:	cd b7       	in	r28, 0x3d	; 61
    23d0:	de b7       	in	r29, 0x3e	; 62
    23d2:	9a 83       	std	Y+2, r25	; 0x02
    23d4:	89 83       	std	Y+1, r24	; 0x01

    SPIN_LOCK( proc );
    23d6:	89 81       	ldd	r24, Y+1	; 0x01
    23d8:	9a 81       	ldd	r25, Y+2	; 0x02
    23da:	83 96       	adiw	r24, 0x23	; 35
    23dc:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>

    // Обрабатываем флаги
    // Нельзя выходить из pmain не освободив все захваченные ресурсы, за это процесс будет "убит"!
    if( proc->flags & PROC_FLG_LOCK_MASK ) proc->flags |= PROC_FLG_DEAD;
    23e0:	e9 81       	ldd	r30, Y+1	; 0x01
    23e2:	fa 81       	ldd	r31, Y+2	; 0x02
    23e4:	87 81       	ldd	r24, Z+7	; 0x07
    23e6:	90 85       	ldd	r25, Z+8	; 0x08
    23e8:	8c 70       	andi	r24, 0x0C	; 12
    23ea:	90 70       	andi	r25, 0x00	; 0
    23ec:	00 97       	sbiw	r24, 0x00	; 0
    23ee:	51 f0       	breq	.+20     	; 0x2404 <_proc_terminate+0x3c>
    23f0:	e9 81       	ldd	r30, Y+1	; 0x01
    23f2:	fa 81       	ldd	r31, Y+2	; 0x02
    23f4:	87 81       	ldd	r24, Z+7	; 0x07
    23f6:	90 85       	ldd	r25, Z+8	; 0x08
    23f8:	94 60       	ori	r25, 0x04	; 4
    23fa:	e9 81       	ldd	r30, Y+1	; 0x01
    23fc:	fa 81       	ldd	r31, Y+2	; 0x02
    23fe:	90 87       	std	Z+8, r25	; 0x08
    2400:	87 83       	std	Z+7, r24	; 0x07
    2402:	09 c0       	rjmp	.+18     	; 0x2416 <_proc_terminate+0x4e>
    // В противном случае - просто завершаем процесс
    else proc->flags |= PROC_FLG_END;
    2404:	e9 81       	ldd	r30, Y+1	; 0x01
    2406:	fa 81       	ldd	r31, Y+2	; 0x02
    2408:	87 81       	ldd	r24, Z+7	; 0x07
    240a:	90 85       	ldd	r25, Z+8	; 0x08
    240c:	91 60       	ori	r25, 0x01	; 1
    240e:	e9 81       	ldd	r30, Y+1	; 0x01
    2410:	fa 81       	ldd	r31, Y+2	; 0x02
    2412:	90 87       	std	Z+8, r25	; 0x08
    2414:	87 83       	std	Z+7, r24	; 0x07
    proc->flags &= ~PROC_FLG_PRE_STOP_MASK;
    2416:	e9 81       	ldd	r30, Y+1	; 0x01
    2418:	fa 81       	ldd	r31, Y+2	; 0x02
    241a:	87 81       	ldd	r24, Z+7	; 0x07
    241c:	90 85       	ldd	r25, Z+8	; 0x08
    241e:	8d 77       	andi	r24, 0x7D	; 125
    2420:	e9 81       	ldd	r30, Y+1	; 0x01
    2422:	fa 81       	ldd	r31, Y+2	; 0x02
    2424:	90 87       	std	Z+8, r25	; 0x08
    2426:	87 83       	std	Z+7, r24	; 0x07
    // Останов
    _proc_stop_( proc );
    2428:	89 81       	ldd	r24, Y+1	; 0x01
    242a:	9a 81       	ldd	r25, Y+2	; 0x02
    242c:	0e 94 00 11 	call	0x2200	; 0x2200 <_proc_stop_>
    // Выполнить перепланировку
    RESCHED_PROC( proc );
    2430:	e9 81       	ldd	r30, Y+1	; 0x01
    2432:	fa 81       	ldd	r31, Y+2	; 0x02
    2434:	81 a1       	ldd	r24, Z+33	; 0x21
    2436:	0e 94 de 01 	call	0x3bc	; 0x3bc <resched>

    SPIN_UNLOCK( proc );
    243a:	89 81       	ldd	r24, Y+1	; 0x01
    243c:	9a 81       	ldd	r25, Y+2	; 0x02
    243e:	83 96       	adiw	r24, 0x23	; 35
    2440:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
}
    2444:	0f 90       	pop	r0
    2446:	0f 90       	pop	r0
    2448:	cf 91       	pop	r28
    244a:	df 91       	pop	r29
    244c:	08 95       	ret

0000244e <_proc_reset_watchdog>:

void _proc_reset_watchdog( void )
{
    244e:	df 93       	push	r29
    2450:	cf 93       	push	r28
    2452:	00 d0       	rcall	.+0      	; 0x2454 <_proc_reset_watchdog+0x6>
    2454:	cd b7       	in	r28, 0x3d	; 61
    2456:	de b7       	in	r29, 0x3e	; 62
    proc_t * proc;
    proc = current_proc();
    2458:	0e 94 0a 01 	call	0x214	; 0x214 <current_proc>
    245c:	9a 83       	std	Y+2, r25	; 0x02
    245e:	89 83       	std	Y+1, r24	; 0x01

    SPIN_LOCK( proc );
    2460:	89 81       	ldd	r24, Y+1	; 0x01
    2462:	9a 81       	ldd	r25, Y+2	; 0x02
    2464:	83 96       	adiw	r24, 0x23	; 35
    2466:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>

    if( proc->flags & PROC_FLG_RT )proc->timer = proc->time_quant;
    246a:	e9 81       	ldd	r30, Y+1	; 0x01
    246c:	fa 81       	ldd	r31, Y+2	; 0x02
    246e:	87 81       	ldd	r24, Z+7	; 0x07
    2470:	90 85       	ldd	r25, Z+8	; 0x08
    2472:	81 70       	andi	r24, 0x01	; 1
    2474:	90 70       	andi	r25, 0x00	; 0
    2476:	88 23       	and	r24, r24
    2478:	41 f0       	breq	.+16     	; 0x248a <_proc_reset_watchdog+0x3c>
    247a:	e9 81       	ldd	r30, Y+1	; 0x01
    247c:	fa 81       	ldd	r31, Y+2	; 0x02
    247e:	83 8d       	ldd	r24, Z+27	; 0x1b
    2480:	94 8d       	ldd	r25, Z+28	; 0x1c
    2482:	e9 81       	ldd	r30, Y+1	; 0x01
    2484:	fa 81       	ldd	r31, Y+2	; 0x02
    2486:	96 8f       	std	Z+30, r25	; 0x1e
    2488:	85 8f       	std	Z+29, r24	; 0x1d

    SPIN_UNLOCK( proc );
    248a:	89 81       	ldd	r24, Y+1	; 0x01
    248c:	9a 81       	ldd	r25, Y+2	; 0x02
    248e:	83 96       	adiw	r24, 0x23	; 35
    2490:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
}
    2494:	0f 90       	pop	r0
    2496:	0f 90       	pop	r0
    2498:	cf 91       	pop	r28
    249a:	df 91       	pop	r29
    249c:	08 95       	ret

0000249e <_proc_lres_inc>:
    proc_t * proc
#ifdef CONFIG_USE_HIGHEST_LOCKER
    ,prio_t prio
#endif
)
{
    249e:	df 93       	push	r29
    24a0:	cf 93       	push	r28
    24a2:	00 d0       	rcall	.+0      	; 0x24a4 <_proc_lres_inc+0x6>
    24a4:	0f 92       	push	r0
    24a6:	cd b7       	in	r28, 0x3d	; 61
    24a8:	de b7       	in	r29, 0x3e	; 62
    24aa:	9a 83       	std	Y+2, r25	; 0x02
    24ac:	89 83       	std	Y+1, r24	; 0x01
    24ae:	6b 83       	std	Y+3, r22	; 0x03
#ifdef CONFIG_USE_HIGHEST_LOCKER
    if( proc->lres.index == (index_t)0 )proc->flags |= PROC_FLG_MUTEX;
    24b0:	e9 81       	ldd	r30, Y+1	; 0x01
    24b2:	fa 81       	ldd	r31, Y+2	; 0x02
    24b4:	82 8d       	ldd	r24, Z+26	; 0x1a
    24b6:	88 23       	and	r24, r24
    24b8:	49 f4       	brne	.+18     	; 0x24cc <_proc_lres_inc+0x2e>
    24ba:	e9 81       	ldd	r30, Y+1	; 0x01
    24bc:	fa 81       	ldd	r31, Y+2	; 0x02
    24be:	87 81       	ldd	r24, Z+7	; 0x07
    24c0:	90 85       	ldd	r25, Z+8	; 0x08
    24c2:	84 60       	ori	r24, 0x04	; 4
    24c4:	e9 81       	ldd	r30, Y+1	; 0x01
    24c6:	fa 81       	ldd	r31, Y+2	; 0x02
    24c8:	90 87       	std	Z+8, r25	; 0x08
    24ca:	87 83       	std	Z+7, r24	; 0x07
    pcounter_inc( &proc->lres, prio );
    24cc:	89 81       	ldd	r24, Y+1	; 0x01
    24ce:	9a 81       	ldd	r25, Y+2	; 0x02
    24d0:	0a 96       	adiw	r24, 0x0a	; 10
    24d2:	6b 81       	ldd	r22, Y+3	; 0x03
    24d4:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <pcounter_inc>
#else
    if( proc->lres == (count_t)0 )proc->flags |= PROC_FLG_MUTEX;
    proc->lres++;
#endif
}
    24d8:	0f 90       	pop	r0
    24da:	0f 90       	pop	r0
    24dc:	0f 90       	pop	r0
    24de:	cf 91       	pop	r28
    24e0:	df 91       	pop	r29
    24e2:	08 95       	ret

000024e4 <_proc_lres_dec>:
    proc_t * proc
#ifdef CONFIG_USE_HIGHEST_LOCKER
    ,prio_t prio
#endif
)
{
    24e4:	df 93       	push	r29
    24e6:	cf 93       	push	r28
    24e8:	00 d0       	rcall	.+0      	; 0x24ea <_proc_lres_dec+0x6>
    24ea:	0f 92       	push	r0
    24ec:	cd b7       	in	r28, 0x3d	; 61
    24ee:	de b7       	in	r29, 0x3e	; 62
    24f0:	9a 83       	std	Y+2, r25	; 0x02
    24f2:	89 83       	std	Y+1, r24	; 0x01
    24f4:	6b 83       	std	Y+3, r22	; 0x03
#ifdef CONFIG_USE_HIGHEST_LOCKER
    pcounter_dec( &proc->lres, prio );
    24f6:	89 81       	ldd	r24, Y+1	; 0x01
    24f8:	9a 81       	ldd	r25, Y+2	; 0x02
    24fa:	0a 96       	adiw	r24, 0x0a	; 10
    24fc:	6b 81       	ldd	r22, Y+3	; 0x03
    24fe:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <pcounter_dec>
    if( proc->lres.index == (index_t)0 )proc->flags &= ~PROC_FLG_MUTEX;
    2502:	e9 81       	ldd	r30, Y+1	; 0x01
    2504:	fa 81       	ldd	r31, Y+2	; 0x02
    2506:	82 8d       	ldd	r24, Z+26	; 0x1a
    2508:	88 23       	and	r24, r24
    250a:	49 f4       	brne	.+18     	; 0x251e <_proc_lres_dec+0x3a>
    250c:	e9 81       	ldd	r30, Y+1	; 0x01
    250e:	fa 81       	ldd	r31, Y+2	; 0x02
    2510:	87 81       	ldd	r24, Z+7	; 0x07
    2512:	90 85       	ldd	r25, Z+8	; 0x08
    2514:	8b 7f       	andi	r24, 0xFB	; 251
    2516:	e9 81       	ldd	r30, Y+1	; 0x01
    2518:	fa 81       	ldd	r31, Y+2	; 0x02
    251a:	90 87       	std	Z+8, r25	; 0x08
    251c:	87 83       	std	Z+7, r24	; 0x07
#else
    if( proc->lres!= (count_t)0 )proc->lres--;
    if( proc->lres == (count_t)0 )proc->flags &= ~PROC_FLG_MUTEX;
#endif
}
    251e:	0f 90       	pop	r0
    2520:	0f 90       	pop	r0
    2522:	0f 90       	pop	r0
    2524:	cf 91       	pop	r28
    2526:	df 91       	pop	r29
    2528:	08 95       	ret

0000252a <_proc_prio_control_stoped>:

#ifdef CONFIG_USE_HIGHEST_LOCKER
// Будет использоваться в mutex-ах и т.п., процесс должен сам вызывать эту функцию, при этом он должен быть вырезан из списка выполняющихся.

void _proc_prio_control_stoped( proc_t * proc )
{
    252a:	df 93       	push	r29
    252c:	cf 93       	push	r28
    252e:	cd b7       	in	r28, 0x3d	; 61
    2530:	de b7       	in	r29, 0x3e	; 62
    2532:	27 97       	sbiw	r28, 0x07	; 7
    2534:	0f b6       	in	r0, 0x3f	; 63
    2536:	f8 94       	cli
    2538:	de bf       	out	0x3e, r29	; 62
    253a:	0f be       	out	0x3f, r0	; 63
    253c:	cd bf       	out	0x3d, r28	; 61
    253e:	9b 83       	std	Y+3, r25	; 0x03
    2540:	8a 83       	std	Y+2, r24	; 0x02
    if(proc->lres.index != (index_t)0)
    2542:	ea 81       	ldd	r30, Y+2	; 0x02
    2544:	fb 81       	ldd	r31, Y+3	; 0x03
    2546:	82 8d       	ldd	r24, Z+26	; 0x1a
    2548:	88 23       	and	r24, r24
    254a:	d9 f0       	breq	.+54     	; 0x2582 <_proc_prio_control_stoped+0x58>
    {

        prio_t locker_prio;
        locker_prio = index_search( proc->lres.index );
    254c:	ea 81       	ldd	r30, Y+2	; 0x02
    254e:	fb 81       	ldd	r31, Y+3	; 0x03
    2550:	82 8d       	ldd	r24, Z+26	; 0x1a
    2552:	0e 94 8e 09 	call	0x131c	; 0x131c <index_search>
    2556:	89 83       	std	Y+1, r24	; 0x01
        ((pitem_t *)proc)->prio = ( locker_prio < proc->base_prio )?locker_prio:proc->base_prio;
    2558:	8a 81       	ldd	r24, Y+2	; 0x02
    255a:	9b 81       	ldd	r25, Y+3	; 0x03
    255c:	9e 83       	std	Y+6, r25	; 0x06
    255e:	8d 83       	std	Y+5, r24	; 0x05
    2560:	ea 81       	ldd	r30, Y+2	; 0x02
    2562:	fb 81       	ldd	r31, Y+3	; 0x03
    2564:	81 85       	ldd	r24, Z+9	; 0x09
    2566:	99 81       	ldd	r25, Y+1	; 0x01
    2568:	9f 83       	std	Y+7, r25	; 0x07
    256a:	8c 83       	std	Y+4, r24	; 0x04
    256c:	ec 81       	ldd	r30, Y+4	; 0x04
    256e:	ff 81       	ldd	r31, Y+7	; 0x07
    2570:	fe 17       	cp	r31, r30
    2572:	10 f4       	brcc	.+4      	; 0x2578 <_proc_prio_control_stoped+0x4e>
    2574:	8f 81       	ldd	r24, Y+7	; 0x07
    2576:	8c 83       	std	Y+4, r24	; 0x04
    2578:	8c 81       	ldd	r24, Y+4	; 0x04
    257a:	ed 81       	ldd	r30, Y+5	; 0x05
    257c:	fe 81       	ldd	r31, Y+6	; 0x06
    257e:	86 83       	std	Z+6, r24	; 0x06
    2580:	08 c0       	rjmp	.+16     	; 0x2592 <_proc_prio_control_stoped+0x68>
    }
    else
    {
        ((pitem_t *)proc)->prio = proc->base_prio;
    2582:	ea 81       	ldd	r30, Y+2	; 0x02
    2584:	fb 81       	ldd	r31, Y+3	; 0x03
    2586:	aa 81       	ldd	r26, Y+2	; 0x02
    2588:	bb 81       	ldd	r27, Y+3	; 0x03
    258a:	19 96       	adiw	r26, 0x09	; 9
    258c:	8c 91       	ld	r24, X
    258e:	19 97       	sbiw	r26, 0x09	; 9
    2590:	86 83       	std	Z+6, r24	; 0x06
    }
}
    2592:	27 96       	adiw	r28, 0x07	; 7
    2594:	0f b6       	in	r0, 0x3f	; 63
    2596:	f8 94       	cli
    2598:	de bf       	out	0x3e, r29	; 62
    259a:	0f be       	out	0x3f, r0	; 63
    259c:	cd bf       	out	0x3d, r28	; 61
    259e:	cf 91       	pop	r28
    25a0:	df 91       	pop	r29
    25a2:	08 95       	ret

000025a4 <_proc_prio_control_running>:

void _proc_prio_control_running( proc_t * proc )
{
    25a4:	df 93       	push	r29
    25a6:	cf 93       	push	r28
    25a8:	00 d0       	rcall	.+0      	; 0x25aa <_proc_prio_control_running+0x6>
    25aa:	00 d0       	rcall	.+0      	; 0x25ac <_proc_prio_control_running+0x8>
    25ac:	00 d0       	rcall	.+0      	; 0x25ae <_proc_prio_control_running+0xa>
    25ae:	cd b7       	in	r28, 0x3d	; 61
    25b0:	de b7       	in	r29, 0x3e	; 62
    25b2:	9c 83       	std	Y+4, r25	; 0x04
    25b4:	8b 83       	std	Y+3, r24	; 0x03
    prio_t new_prio;
    if(proc->lres.index != (index_t)0)
    25b6:	eb 81       	ldd	r30, Y+3	; 0x03
    25b8:	fc 81       	ldd	r31, Y+4	; 0x04
    25ba:	82 8d       	ldd	r24, Z+26	; 0x1a
    25bc:	88 23       	and	r24, r24
    25be:	a9 f0       	breq	.+42     	; 0x25ea <_proc_prio_control_running+0x46>
    {
        prio_t locker_prio;
        locker_prio = index_search( proc->lres.index );
    25c0:	eb 81       	ldd	r30, Y+3	; 0x03
    25c2:	fc 81       	ldd	r31, Y+4	; 0x04
    25c4:	82 8d       	ldd	r24, Z+26	; 0x1a
    25c6:	0e 94 8e 09 	call	0x131c	; 0x131c <index_search>
    25ca:	89 83       	std	Y+1, r24	; 0x01
        new_prio = ( locker_prio < proc->base_prio )?locker_prio:proc->base_prio;
    25cc:	eb 81       	ldd	r30, Y+3	; 0x03
    25ce:	fc 81       	ldd	r31, Y+4	; 0x04
    25d0:	81 85       	ldd	r24, Z+9	; 0x09
    25d2:	99 81       	ldd	r25, Y+1	; 0x01
    25d4:	9e 83       	std	Y+6, r25	; 0x06
    25d6:	8d 83       	std	Y+5, r24	; 0x05
    25d8:	8d 81       	ldd	r24, Y+5	; 0x05
    25da:	9e 81       	ldd	r25, Y+6	; 0x06
    25dc:	98 17       	cp	r25, r24
    25de:	10 f4       	brcc	.+4      	; 0x25e4 <_proc_prio_control_running+0x40>
    25e0:	8e 81       	ldd	r24, Y+6	; 0x06
    25e2:	8d 83       	std	Y+5, r24	; 0x05
    25e4:	9d 81       	ldd	r25, Y+5	; 0x05
    25e6:	9a 83       	std	Y+2, r25	; 0x02
    25e8:	04 c0       	rjmp	.+8      	; 0x25f2 <_proc_prio_control_running+0x4e>
    }
    else
    {
        new_prio = proc->base_prio;
    25ea:	eb 81       	ldd	r30, Y+3	; 0x03
    25ec:	fc 81       	ldd	r31, Y+4	; 0x04
    25ee:	81 85       	ldd	r24, Z+9	; 0x09
    25f0:	8a 83       	std	Y+2, r24	; 0x02
    }
    if(((pitem_t *)proc)->prio != new_prio)
    25f2:	eb 81       	ldd	r30, Y+3	; 0x03
    25f4:	fc 81       	ldd	r31, Y+4	; 0x04
    25f6:	96 81       	ldd	r25, Z+6	; 0x06
    25f8:	8a 81       	ldd	r24, Y+2	; 0x02
    25fa:	98 17       	cp	r25, r24
    25fc:	31 f1       	breq	.+76     	; 0x264a <_proc_prio_control_running+0xa6>
    {
        _proc_stop_( proc );
    25fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2600:	9c 81       	ldd	r25, Y+4	; 0x04
    2602:	0e 94 00 11 	call	0x2200	; 0x2200 <_proc_stop_>
        ((pitem_t *)proc)->prio = new_prio;
    2606:	eb 81       	ldd	r30, Y+3	; 0x03
    2608:	fc 81       	ldd	r31, Y+4	; 0x04
    260a:	8a 81       	ldd	r24, Y+2	; 0x02
    260c:	86 83       	std	Z+6, r24	; 0x06
#ifdef CONFIG_MP
        spin_lock( &kernel.stat_lock );
    260e:	83 e0       	ldi	r24, 0x03	; 3
    2610:	93 e0       	ldi	r25, 0x03	; 3
    2612:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
        stat_inc( proc, (stat_t *)kernel.stat+proc->core_id );
    2616:	eb 81       	ldd	r30, Y+3	; 0x03
    2618:	fc 81       	ldd	r31, Y+4	; 0x04
    261a:	81 a1       	ldd	r24, Z+33	; 0x21
    261c:	88 2f       	mov	r24, r24
    261e:	90 e0       	ldi	r25, 0x00	; 0
    2620:	9c 01       	movw	r18, r24
    2622:	2f 5f       	subi	r18, 0xFF	; 255
    2624:	3c 4f       	sbci	r19, 0xFC	; 252
    2626:	8b 81       	ldd	r24, Y+3	; 0x03
    2628:	9c 81       	ldd	r25, Y+4	; 0x04
    262a:	b9 01       	movw	r22, r18
    262c:	0e 94 98 01 	call	0x330	; 0x330 <stat_inc>
        spin_unlock( &kernel.stat_lock );
    2630:	83 e0       	ldi	r24, 0x03	; 3
    2632:	93 e0       	ldi	r25, 0x03	; 3
    2634:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
#endif
        _proc_run_( proc );
    2638:	8b 81       	ldd	r24, Y+3	; 0x03
    263a:	9c 81       	ldd	r25, Y+4	; 0x04
    263c:	0e 94 02 10 	call	0x2004	; 0x2004 <_proc_run_>
        RESCHED_PROC( proc );
    2640:	eb 81       	ldd	r30, Y+3	; 0x03
    2642:	fc 81       	ldd	r31, Y+4	; 0x04
    2644:	81 a1       	ldd	r24, Z+33	; 0x21
    2646:	0e 94 de 01 	call	0x3bc	; 0x3bc <resched>
    }
}
    264a:	26 96       	adiw	r28, 0x06	; 6
    264c:	0f b6       	in	r0, 0x3f	; 63
    264e:	f8 94       	cli
    2650:	de bf       	out	0x3e, r29	; 62
    2652:	0f be       	out	0x3f, r0	; 63
    2654:	cd bf       	out	0x3d, r28	; 61
    2656:	cf 91       	pop	r28
    2658:	df 91       	pop	r29
    265a:	08 95       	ret

0000265c <sched_load_balancer>:

#ifdef CONFIG_MP
//========================================================================================
// Балансировщик нагрузки
WEAK core_id_t sched_load_balancer(proc_t * proc, stat_t * stat)
{
    265c:	df 93       	push	r29
    265e:	cf 93       	push	r28
    2660:	cd b7       	in	r28, 0x3d	; 61
    2662:	de b7       	in	r29, 0x3e	; 62
    2664:	2a 97       	sbiw	r28, 0x0a	; 10
    2666:	0f b6       	in	r0, 0x3f	; 63
    2668:	f8 94       	cli
    266a:	de bf       	out	0x3e, r29	; 62
    266c:	0f be       	out	0x3f, r0	; 63
    266e:	cd bf       	out	0x3d, r28	; 61
    2670:	98 87       	std	Y+8, r25	; 0x08
    2672:	8f 83       	std	Y+7, r24	; 0x07
    2674:	7a 87       	std	Y+10, r23	; 0x0a
    2676:	69 87       	std	Y+9, r22	; 0x09
    core_id_t core = (core_id_t)0, ret;
    2678:	1e 82       	std	Y+6, r1	; 0x06
    affinity_t mask = (affinity_t)1;
    267a:	81 e0       	ldi	r24, 0x01	; 1
    267c:	8c 83       	std	Y+4, r24	; 0x04
    267e:	0d c0       	rjmp	.+26     	; 0x269a <sched_load_balancer+0x3e>
    while( core < (core_id_t)MAX_CORES )
    {
        if( proc->affinity & mask )break;
    2680:	ef 81       	ldd	r30, Y+7	; 0x07
    2682:	f8 85       	ldd	r31, Y+8	; 0x08
    2684:	92 a1       	ldd	r25, Z+34	; 0x22
    2686:	8c 81       	ldd	r24, Y+4	; 0x04
    2688:	89 23       	and	r24, r25
    268a:	88 23       	and	r24, r24
    268c:	49 f4       	brne	.+18     	; 0x26a0 <sched_load_balancer+0x44>
        mask<<=1;
    268e:	8c 81       	ldd	r24, Y+4	; 0x04
    2690:	88 0f       	add	r24, r24
    2692:	8c 83       	std	Y+4, r24	; 0x04
        core++;
    2694:	8e 81       	ldd	r24, Y+6	; 0x06
    2696:	8f 5f       	subi	r24, 0xFF	; 255
    2698:	8e 83       	std	Y+6, r24	; 0x06
// Балансировщик нагрузки
WEAK core_id_t sched_load_balancer(proc_t * proc, stat_t * stat)
{
    core_id_t core = (core_id_t)0, ret;
    affinity_t mask = (affinity_t)1;
    while( core < (core_id_t)MAX_CORES )
    269a:	8e 81       	ldd	r24, Y+6	; 0x06
    269c:	82 30       	cpi	r24, 0x02	; 2
    269e:	80 f3       	brcs	.-32     	; 0x2680 <sched_load_balancer+0x24>
        if( proc->affinity & mask )break;
        mask<<=1;
        core++;
    }
    // Начальное предположение
    stat += (core_id_t)core;
    26a0:	8e 81       	ldd	r24, Y+6	; 0x06
    26a2:	28 2f       	mov	r18, r24
    26a4:	30 e0       	ldi	r19, 0x00	; 0
    26a6:	89 85       	ldd	r24, Y+9	; 0x09
    26a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    26aa:	82 0f       	add	r24, r18
    26ac:	93 1f       	adc	r25, r19
    26ae:	9a 87       	std	Y+10, r25	; 0x0a
    26b0:	89 87       	std	Y+9, r24	; 0x09
    ret = core++;
    26b2:	8e 81       	ldd	r24, Y+6	; 0x06
    26b4:	8d 83       	std	Y+5, r24	; 0x05
    26b6:	8e 81       	ldd	r24, Y+6	; 0x06
    26b8:	8f 5f       	subi	r24, 0xFF	; 255
    26ba:	8e 83       	std	Y+6, r24	; 0x06
    mask<<=1;
    26bc:	8c 81       	ldd	r24, Y+4	; 0x04
    26be:	88 0f       	add	r24, r24
    26c0:	8c 83       	std	Y+4, r24	; 0x04
    {
        prio_t proc_prio;
        load_t current_load, min_load;

        proc_prio = ((pitem_t *)proc)->prio;
    26c2:	ef 81       	ldd	r30, Y+7	; 0x07
    26c4:	f8 85       	ldd	r31, Y+8	; 0x08
    26c6:	86 81       	ldd	r24, Z+6	; 0x06
    26c8:	8b 83       	std	Y+3, r24	; 0x03
        min_load = stat_calc_load( proc_prio, stat++ );
    26ca:	29 85       	ldd	r18, Y+9	; 0x09
    26cc:	3a 85       	ldd	r19, Y+10	; 0x0a
    26ce:	89 85       	ldd	r24, Y+9	; 0x09
    26d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    26d2:	01 96       	adiw	r24, 0x01	; 1
    26d4:	9a 87       	std	Y+10, r25	; 0x0a
    26d6:	89 87       	std	Y+9, r24	; 0x09
    26d8:	8b 81       	ldd	r24, Y+3	; 0x03
    26da:	b9 01       	movw	r22, r18
    26dc:	0e 94 cc 01 	call	0x398	; 0x398 <stat_calc_load>
    26e0:	89 83       	std	Y+1, r24	; 0x01
    26e2:	21 c0       	rjmp	.+66     	; 0x2726 <sched_load_balancer+0xca>
        // Проверка всего остального, тупой поиск минимума
        while( core < (core_id_t)MAX_CORES )
        {
            current_load = stat_calc_load( proc_prio, stat++ );
    26e4:	29 85       	ldd	r18, Y+9	; 0x09
    26e6:	3a 85       	ldd	r19, Y+10	; 0x0a
    26e8:	89 85       	ldd	r24, Y+9	; 0x09
    26ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ec:	01 96       	adiw	r24, 0x01	; 1
    26ee:	9a 87       	std	Y+10, r25	; 0x0a
    26f0:	89 87       	std	Y+9, r24	; 0x09
    26f2:	8b 81       	ldd	r24, Y+3	; 0x03
    26f4:	b9 01       	movw	r22, r18
    26f6:	0e 94 cc 01 	call	0x398	; 0x398 <stat_calc_load>
    26fa:	8a 83       	std	Y+2, r24	; 0x02
            if( (proc->affinity & mask) && (current_load < min_load) )
    26fc:	ef 81       	ldd	r30, Y+7	; 0x07
    26fe:	f8 85       	ldd	r31, Y+8	; 0x08
    2700:	92 a1       	ldd	r25, Z+34	; 0x22
    2702:	8c 81       	ldd	r24, Y+4	; 0x04
    2704:	89 23       	and	r24, r25
    2706:	88 23       	and	r24, r24
    2708:	41 f0       	breq	.+16     	; 0x271a <sched_load_balancer+0xbe>
    270a:	9a 81       	ldd	r25, Y+2	; 0x02
    270c:	89 81       	ldd	r24, Y+1	; 0x01
    270e:	98 17       	cp	r25, r24
    2710:	20 f4       	brcc	.+8      	; 0x271a <sched_load_balancer+0xbe>
            {
                min_load = current_load;
    2712:	8a 81       	ldd	r24, Y+2	; 0x02
    2714:	89 83       	std	Y+1, r24	; 0x01
                ret = core;
    2716:	8e 81       	ldd	r24, Y+6	; 0x06
    2718:	8d 83       	std	Y+5, r24	; 0x05
            }
            mask<<=1;
    271a:	8c 81       	ldd	r24, Y+4	; 0x04
    271c:	88 0f       	add	r24, r24
    271e:	8c 83       	std	Y+4, r24	; 0x04
            core++;
    2720:	8e 81       	ldd	r24, Y+6	; 0x06
    2722:	8f 5f       	subi	r24, 0xFF	; 255
    2724:	8e 83       	std	Y+6, r24	; 0x06
        load_t current_load, min_load;

        proc_prio = ((pitem_t *)proc)->prio;
        min_load = stat_calc_load( proc_prio, stat++ );
        // Проверка всего остального, тупой поиск минимума
        while( core < (core_id_t)MAX_CORES )
    2726:	8e 81       	ldd	r24, Y+6	; 0x06
    2728:	82 30       	cpi	r24, 0x02	; 2
    272a:	e0 f2       	brcs	.-72     	; 0x26e4 <sched_load_balancer+0x88>
            }
            mask<<=1;
            core++;
        }
    }
    return ret;
    272c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    272e:	2a 96       	adiw	r28, 0x0a	; 10
    2730:	0f b6       	in	r0, 0x3f	; 63
    2732:	f8 94       	cli
    2734:	de bf       	out	0x3e, r29	; 62
    2736:	0f be       	out	0x3f, r0	; 63
    2738:	cd bf       	out	0x3d, r28	; 61
    273a:	cf 91       	pop	r28
    273c:	df 91       	pop	r29
    273e:	08 95       	ret

00002740 <sched_highest_load_core>:
//----------------------------------------------------------------------------------------
//Поиск самой нагруженной структуры stat_t в массиве
WEAK core_id_t sched_highest_load_core( stat_t * stat )
{
    2740:	df 93       	push	r29
    2742:	cf 93       	push	r28
    2744:	00 d0       	rcall	.+0      	; 0x2746 <sched_highest_load_core+0x6>
    2746:	00 d0       	rcall	.+0      	; 0x2748 <sched_highest_load_core+0x8>
    2748:	00 d0       	rcall	.+0      	; 0x274a <sched_highest_load_core+0xa>
    274a:	cd b7       	in	r28, 0x3d	; 61
    274c:	de b7       	in	r29, 0x3e	; 62
    274e:	9e 83       	std	Y+6, r25	; 0x06
    2750:	8d 83       	std	Y+5, r24	; 0x05
    // Начальное предположение
    load_t max_load;
    core_id_t object_core = (core_id_t)0; //процессор с максимальной нагрузкой, с которого эту нагрузку будем снимать
    2752:	1b 82       	std	Y+3, r1	; 0x03
    core_id_t core = (core_id_t)1;
    2754:	81 e0       	ldi	r24, 0x01	; 1
    2756:	8a 83       	std	Y+2, r24	; 0x02
    max_load  = stat_calc_load( (prio_t)BITS_IN_INDEX_T, stat ); // максимальная нагрузка
    2758:	2d 81       	ldd	r18, Y+5	; 0x05
    275a:	3e 81       	ldd	r19, Y+6	; 0x06
    275c:	88 e0       	ldi	r24, 0x08	; 8
    275e:	b9 01       	movw	r22, r18
    2760:	0e 94 cc 01 	call	0x398	; 0x398 <stat_calc_load>
    2764:	8c 83       	std	Y+4, r24	; 0x04
    2766:	17 c0       	rjmp	.+46     	; 0x2796 <sched_highest_load_core+0x56>

    while( core < (core_id_t)MAX_CORES )
    {
        load_t current_load;
        current_load = stat_calc_load( (prio_t)BITS_IN_INDEX_T, stat + core );
    2768:	8a 81       	ldd	r24, Y+2	; 0x02
    276a:	28 2f       	mov	r18, r24
    276c:	30 e0       	ldi	r19, 0x00	; 0
    276e:	8d 81       	ldd	r24, Y+5	; 0x05
    2770:	9e 81       	ldd	r25, Y+6	; 0x06
    2772:	28 0f       	add	r18, r24
    2774:	39 1f       	adc	r19, r25
    2776:	88 e0       	ldi	r24, 0x08	; 8
    2778:	b9 01       	movw	r22, r18
    277a:	0e 94 cc 01 	call	0x398	; 0x398 <stat_calc_load>
    277e:	89 83       	std	Y+1, r24	; 0x01
        if( current_load > max_load )
    2780:	99 81       	ldd	r25, Y+1	; 0x01
    2782:	8c 81       	ldd	r24, Y+4	; 0x04
    2784:	89 17       	cp	r24, r25
    2786:	20 f4       	brcc	.+8      	; 0x2790 <sched_highest_load_core+0x50>
        {
            max_load = current_load;
    2788:	89 81       	ldd	r24, Y+1	; 0x01
    278a:	8c 83       	std	Y+4, r24	; 0x04
            object_core = core;
    278c:	8a 81       	ldd	r24, Y+2	; 0x02
    278e:	8b 83       	std	Y+3, r24	; 0x03
        }
        core++;
    2790:	8a 81       	ldd	r24, Y+2	; 0x02
    2792:	8f 5f       	subi	r24, 0xFF	; 255
    2794:	8a 83       	std	Y+2, r24	; 0x02
    load_t max_load;
    core_id_t object_core = (core_id_t)0; //процессор с максимальной нагрузкой, с которого эту нагрузку будем снимать
    core_id_t core = (core_id_t)1;
    max_load  = stat_calc_load( (prio_t)BITS_IN_INDEX_T, stat ); // максимальная нагрузка

    while( core < (core_id_t)MAX_CORES )
    2796:	8a 81       	ldd	r24, Y+2	; 0x02
    2798:	82 30       	cpi	r24, 0x02	; 2
    279a:	30 f3       	brcs	.-52     	; 0x2768 <sched_highest_load_core+0x28>
            object_core = core;
        }
        core++;
    }

    return object_core;
    279c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    279e:	26 96       	adiw	r28, 0x06	; 6
    27a0:	0f b6       	in	r0, 0x3f	; 63
    27a2:	f8 94       	cli
    27a4:	de bf       	out	0x3e, r29	; 62
    27a6:	0f be       	out	0x3f, r0	; 63
    27a8:	cd bf       	out	0x3d, r28	; 61
    27aa:	cf 91       	pop	r28
    27ac:	df 91       	pop	r29
    27ae:	08 95       	ret

000027b0 <sched_init>:
#endif // CONFIG_MP
//========================================================================================
// Инициация
void sched_init(sched_t * sched, proc_t * idle)
{
    27b0:	df 93       	push	r29
    27b2:	cf 93       	push	r28
    27b4:	00 d0       	rcall	.+0      	; 0x27b6 <sched_init+0x6>
    27b6:	00 d0       	rcall	.+0      	; 0x27b8 <sched_init+0x8>
    27b8:	00 d0       	rcall	.+0      	; 0x27ba <sched_init+0xa>
    27ba:	cd b7       	in	r28, 0x3d	; 61
    27bc:	de b7       	in	r29, 0x3e	; 62
    27be:	9c 83       	std	Y+4, r25	; 0x04
    27c0:	8b 83       	std	Y+3, r24	; 0x03
    27c2:	7e 83       	std	Y+6, r23	; 0x06
    27c4:	6d 83       	std	Y+5, r22	; 0x05
#ifdef CONFIG_MP
    lock_t * sched_lock;
    sched_lock = &sched->lock;
    27c6:	8b 81       	ldd	r24, Y+3	; 0x03
    27c8:	9c 81       	ldd	r25, Y+4	; 0x04
    27ca:	8a 96       	adiw	r24, 0x2a	; 42
    27cc:	9a 83       	std	Y+2, r25	; 0x02
    27ce:	89 83       	std	Y+1, r24	; 0x01
    spin_init( sched_lock );
    27d0:	89 81       	ldd	r24, Y+1	; 0x01
    27d2:	9a 81       	ldd	r25, Y+2	; 0x02
    27d4:	0e 94 3c 01 	call	0x278	; 0x278 <spin_init>
    spin_lock( sched_lock );
    27d8:	89 81       	ldd	r24, Y+1	; 0x01
    27da:	9a 81       	ldd	r25, Y+2	; 0x02
    27dc:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
#endif // CONFIG_MP
    sched->ready = (xlist_t *)sched->plst;
    27e0:	8b 81       	ldd	r24, Y+3	; 0x03
    27e2:	9c 81       	ldd	r25, Y+4	; 0x04
    27e4:	06 96       	adiw	r24, 0x06	; 6
    27e6:	eb 81       	ldd	r30, Y+3	; 0x03
    27e8:	fc 81       	ldd	r31, Y+4	; 0x04
    27ea:	93 83       	std	Z+3, r25	; 0x03
    27ec:	82 83       	std	Z+2, r24	; 0x02
    xlist_init( sched->ready );
    27ee:	eb 81       	ldd	r30, Y+3	; 0x03
    27f0:	fc 81       	ldd	r31, Y+4	; 0x04
    27f2:	82 81       	ldd	r24, Z+2	; 0x02
    27f4:	93 81       	ldd	r25, Z+3	; 0x03
    27f6:	0e 94 c8 1b 	call	0x3790	; 0x3790 <xlist_init>
    sched->expired = (xlist_t *)sched->plst + 1;
    27fa:	8b 81       	ldd	r24, Y+3	; 0x03
    27fc:	9c 81       	ldd	r25, Y+4	; 0x04
    27fe:	47 96       	adiw	r24, 0x17	; 23
    2800:	eb 81       	ldd	r30, Y+3	; 0x03
    2802:	fc 81       	ldd	r31, Y+4	; 0x04
    2804:	95 83       	std	Z+5, r25	; 0x05
    2806:	84 83       	std	Z+4, r24	; 0x04
    xlist_init( sched->expired );
    2808:	eb 81       	ldd	r30, Y+3	; 0x03
    280a:	fc 81       	ldd	r31, Y+4	; 0x04
    280c:	84 81       	ldd	r24, Z+4	; 0x04
    280e:	95 81       	ldd	r25, Z+5	; 0x05
    2810:	0e 94 c8 1b 	call	0x3790	; 0x3790 <xlist_init>
    pitem_insert( (pitem_t *)idle, sched->ready );
    2814:	8d 81       	ldd	r24, Y+5	; 0x05
    2816:	9e 81       	ldd	r25, Y+6	; 0x06
    2818:	eb 81       	ldd	r30, Y+3	; 0x03
    281a:	fc 81       	ldd	r31, Y+4	; 0x04
    281c:	22 81       	ldd	r18, Z+2	; 0x02
    281e:	33 81       	ldd	r19, Z+3	; 0x03
    2820:	b9 01       	movw	r22, r18
    2822:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <pitem_insert>
    sched->current_proc = idle;
    2826:	eb 81       	ldd	r30, Y+3	; 0x03
    2828:	fc 81       	ldd	r31, Y+4	; 0x04
    282a:	8d 81       	ldd	r24, Y+5	; 0x05
    282c:	9e 81       	ldd	r25, Y+6	; 0x06
    282e:	91 83       	std	Z+1, r25	; 0x01
    2830:	80 83       	st	Z, r24
    sched->nested_crit_sec = (count_t)0;//вообще это выполняется при запрещенных прерываниях, но не известно, на этом ли процессоре
    2832:	eb 81       	ldd	r30, Y+3	; 0x03
    2834:	fc 81       	ldd	r31, Y+4	; 0x04
    2836:	11 a6       	std	Z+41, r1	; 0x29
    2838:	10 a6       	std	Z+40, r1	; 0x28
#ifdef CONFIG_MP
    spin_unlock( sched_lock );
    283a:	89 81       	ldd	r24, Y+1	; 0x01
    283c:	9a 81       	ldd	r25, Y+2	; 0x02
    283e:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
    stat_inc( idle, (stat_t *)kernel.stat + idle->core_id );
    2842:	ed 81       	ldd	r30, Y+5	; 0x05
    2844:	fe 81       	ldd	r31, Y+6	; 0x06
    2846:	81 a1       	ldd	r24, Z+33	; 0x21
    2848:	88 2f       	mov	r24, r24
    284a:	90 e0       	ldi	r25, 0x00	; 0
    284c:	9c 01       	movw	r18, r24
    284e:	2f 5f       	subi	r18, 0xFF	; 255
    2850:	3c 4f       	sbci	r19, 0xFC	; 252
    2852:	8d 81       	ldd	r24, Y+5	; 0x05
    2854:	9e 81       	ldd	r25, Y+6	; 0x06
    2856:	b9 01       	movw	r22, r18
    2858:	0e 94 98 01 	call	0x330	; 0x330 <stat_inc>
#endif // CONFIG_MP
}
    285c:	26 96       	adiw	r28, 0x06	; 6
    285e:	0f b6       	in	r0, 0x3f	; 63
    2860:	f8 94       	cli
    2862:	de bf       	out	0x3e, r29	; 62
    2864:	0f be       	out	0x3f, r0	; 63
    2866:	cd bf       	out	0x3d, r28	; 61
    2868:	cf 91       	pop	r28
    286a:	df 91       	pop	r29
    286c:	08 95       	ret

0000286e <_sched_switch_current>:
static void _sched_switch_current( sched_t * sched, proc_t ** current_proc )
{
    286e:	df 93       	push	r29
    2870:	cf 93       	push	r28
    2872:	00 d0       	rcall	.+0      	; 0x2874 <_sched_switch_current+0x6>
    2874:	00 d0       	rcall	.+0      	; 0x2876 <_sched_switch_current+0x8>
    2876:	00 d0       	rcall	.+0      	; 0x2878 <_sched_switch_current+0xa>
    2878:	cd b7       	in	r28, 0x3d	; 61
    287a:	de b7       	in	r29, 0x3e	; 62
    287c:	9c 83       	std	Y+4, r25	; 0x04
    287e:	8b 83       	std	Y+3, r24	; 0x03
    2880:	7e 83       	std	Y+6, r23	; 0x06
    2882:	6d 83       	std	Y+5, r22	; 0x05

    SPIN_LOCK( sched );
    2884:	8b 81       	ldd	r24, Y+3	; 0x03
    2886:	9c 81       	ldd	r25, Y+4	; 0x04
    2888:	8a 96       	adiw	r24, 0x2a	; 42
    288a:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
    // Если список ready опустел, - переключаем списки
    if( sched->ready->index == (index_t)0 )
    288e:	eb 81       	ldd	r30, Y+3	; 0x03
    2890:	fc 81       	ldd	r31, Y+4	; 0x04
    2892:	02 80       	ldd	r0, Z+2	; 0x02
    2894:	f3 81       	ldd	r31, Z+3	; 0x03
    2896:	e0 2d       	mov	r30, r0
    2898:	80 89       	ldd	r24, Z+16	; 0x10
    289a:	88 23       	and	r24, r24
    289c:	a1 f4       	brne	.+40     	; 0x28c6 <_sched_switch_current+0x58>
    {
        xlist_t * buf;
        buf = sched->ready;
    289e:	eb 81       	ldd	r30, Y+3	; 0x03
    28a0:	fc 81       	ldd	r31, Y+4	; 0x04
    28a2:	82 81       	ldd	r24, Z+2	; 0x02
    28a4:	93 81       	ldd	r25, Z+3	; 0x03
    28a6:	9a 83       	std	Y+2, r25	; 0x02
    28a8:	89 83       	std	Y+1, r24	; 0x01
        sched->ready = sched->expired;
    28aa:	eb 81       	ldd	r30, Y+3	; 0x03
    28ac:	fc 81       	ldd	r31, Y+4	; 0x04
    28ae:	84 81       	ldd	r24, Z+4	; 0x04
    28b0:	95 81       	ldd	r25, Z+5	; 0x05
    28b2:	eb 81       	ldd	r30, Y+3	; 0x03
    28b4:	fc 81       	ldd	r31, Y+4	; 0x04
    28b6:	93 83       	std	Z+3, r25	; 0x03
    28b8:	82 83       	std	Z+2, r24	; 0x02
        sched->expired = buf;
    28ba:	eb 81       	ldd	r30, Y+3	; 0x03
    28bc:	fc 81       	ldd	r31, Y+4	; 0x04
    28be:	89 81       	ldd	r24, Y+1	; 0x01
    28c0:	9a 81       	ldd	r25, Y+2	; 0x02
    28c2:	95 83       	std	Z+5, r25	; 0x05
    28c4:	84 83       	std	Z+4, r24	; 0x04
    }
    // Изменять указатель будем при захваченной блокировке,
    // чтобы процессы на других процессорах не прочитали неизвестно что.
    sched->current_proc = (proc_t *)xlist_head( sched->ready ); // Вытесняющая многозадачность же!
    28c6:	eb 81       	ldd	r30, Y+3	; 0x03
    28c8:	fc 81       	ldd	r31, Y+4	; 0x04
    28ca:	82 81       	ldd	r24, Z+2	; 0x02
    28cc:	93 81       	ldd	r25, Z+3	; 0x03
    28ce:	0e 94 f2 1b 	call	0x37e4	; 0x37e4 <xlist_head>
    28d2:	eb 81       	ldd	r30, Y+3	; 0x03
    28d4:	fc 81       	ldd	r31, Y+4	; 0x04
    28d6:	91 83       	std	Z+1, r25	; 0x01
    28d8:	80 83       	st	Z, r24
    *current_proc = sched->current_proc;
    28da:	eb 81       	ldd	r30, Y+3	; 0x03
    28dc:	fc 81       	ldd	r31, Y+4	; 0x04
    28de:	80 81       	ld	r24, Z
    28e0:	91 81       	ldd	r25, Z+1	; 0x01
    28e2:	ed 81       	ldd	r30, Y+5	; 0x05
    28e4:	fe 81       	ldd	r31, Y+6	; 0x06
    28e6:	91 83       	std	Z+1, r25	; 0x01
    28e8:	80 83       	st	Z, r24

    SPIN_UNLOCK( sched );
    28ea:	8b 81       	ldd	r24, Y+3	; 0x03
    28ec:	9c 81       	ldd	r25, Y+4	; 0x04
    28ee:	8a 96       	adiw	r24, 0x2a	; 42
    28f0:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
}
    28f4:	26 96       	adiw	r28, 0x06	; 6
    28f6:	0f b6       	in	r0, 0x3f	; 63
    28f8:	f8 94       	cli
    28fa:	de bf       	out	0x3e, r29	; 62
    28fc:	0f be       	out	0x3f, r0	; 63
    28fe:	cd bf       	out	0x3d, r28	; 61
    2900:	cf 91       	pop	r28
    2902:	df 91       	pop	r29
    2904:	08 95       	ret

00002906 <sched_schedule>:
2) В качестве аргумента передаем только тот объект, который управляет процессами
на исполняющем функции процессоре.
******************************************************************************************/
// Функция планирования, переключает процессы в обработчике системмного таймера
void sched_schedule(void)
{
    2906:	df 93       	push	r29
    2908:	cf 93       	push	r28
    290a:	00 d0       	rcall	.+0      	; 0x290c <sched_schedule+0x6>
    290c:	00 d0       	rcall	.+0      	; 0x290e <sched_schedule+0x8>
    290e:	00 d0       	rcall	.+0      	; 0x2910 <sched_schedule+0xa>
    2910:	cd b7       	in	r28, 0x3d	; 61
    2912:	de b7       	in	r29, 0x3e	; 62
    proc_t * current_proc;
    sched_t * sched;
    sched = _SCHED_INIT();
    2914:	0e 94 2d 01 	call	0x25a	; 0x25a <current_core>
    2918:	28 2f       	mov	r18, r24
    291a:	30 e0       	ldi	r19, 0x00	; 0
    291c:	8b e2       	ldi	r24, 0x2B	; 43
    291e:	90 e0       	ldi	r25, 0x00	; 0
    2920:	ac 01       	movw	r20, r24
    2922:	24 9f       	mul	r18, r20
    2924:	c0 01       	movw	r24, r0
    2926:	25 9f       	mul	r18, r21
    2928:	90 0d       	add	r25, r0
    292a:	34 9f       	mul	r19, r20
    292c:	90 0d       	add	r25, r0
    292e:	11 24       	eor	r1, r1
    2930:	85 5b       	subi	r24, 0xB5	; 181
    2932:	9d 4f       	sbci	r25, 0xFD	; 253
    2934:	9c 83       	std	Y+4, r25	; 0x04
    2936:	8b 83       	std	Y+3, r24	; 0x03
    // Меняем только с локального процессора, блокировку sched->lock можно не захватывать!
    current_proc = sched->current_proc;
    2938:	eb 81       	ldd	r30, Y+3	; 0x03
    293a:	fc 81       	ldd	r31, Y+4	; 0x04
    293c:	80 81       	ld	r24, Z
    293e:	91 81       	ldd	r25, Z+1	; 0x01
    2940:	9e 83       	std	Y+6, r25	; 0x06
    2942:	8d 83       	std	Y+5, r24	; 0x05
    // А вот эту блокировку обязательно надо захватить!
    SPIN_LOCK( current_proc );
    2944:	8d 81       	ldd	r24, Y+5	; 0x05
    2946:	9e 81       	ldd	r25, Y+6	; 0x06
    2948:	83 96       	adiw	r24, 0x23	; 35
    294a:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
    // Хук "сохранение контекста"
    if( current_proc->sv_hook )current_proc->sv_hook( current_proc->arg );
    294e:	ed 81       	ldd	r30, Y+5	; 0x05
    2950:	fe 81       	ldd	r31, Y+6	; 0x06
    2952:	86 a1       	ldd	r24, Z+38	; 0x26
    2954:	97 a1       	ldd	r25, Z+39	; 0x27
    2956:	00 97       	sbiw	r24, 0x00	; 0
    2958:	51 f0       	breq	.+20     	; 0x296e <sched_schedule+0x68>
    295a:	ed 81       	ldd	r30, Y+5	; 0x05
    295c:	fe 81       	ldd	r31, Y+6	; 0x06
    295e:	26 a1       	ldd	r18, Z+38	; 0x26
    2960:	37 a1       	ldd	r19, Z+39	; 0x27
    2962:	ed 81       	ldd	r30, Y+5	; 0x05
    2964:	fe 81       	ldd	r31, Y+6	; 0x06
    2966:	82 a5       	ldd	r24, Z+42	; 0x2a
    2968:	93 a5       	ldd	r25, Z+43	; 0x2b
    296a:	f9 01       	movw	r30, r18
    296c:	09 95       	icall
    // Проверяем, что процесс находится в списке ready
    if( (xlist_t *)((pitem_t *)current_proc)->list == sched->ready )
    296e:	8d 81       	ldd	r24, Y+5	; 0x05
    2970:	9e 81       	ldd	r25, Y+6	; 0x06
    2972:	fc 01       	movw	r30, r24
    2974:	24 81       	ldd	r18, Z+4	; 0x04
    2976:	35 81       	ldd	r19, Z+5	; 0x05
    2978:	eb 81       	ldd	r30, Y+3	; 0x03
    297a:	fc 81       	ldd	r31, Y+4	; 0x04
    297c:	82 81       	ldd	r24, Z+2	; 0x02
    297e:	93 81       	ldd	r25, Z+3	; 0x03
    2980:	28 17       	cp	r18, r24
    2982:	39 07       	cpc	r19, r25
    2984:	09 f0       	breq	.+2      	; 0x2988 <sched_schedule+0x82>
    2986:	94 c0       	rjmp	.+296    	; 0x2ab0 <sched_schedule+0x1aa>
    {
        // Переключаем cписок на следующий за текущим процесс
        SPIN_LOCK( sched );
    2988:	8b 81       	ldd	r24, Y+3	; 0x03
    298a:	9c 81       	ldd	r25, Y+4	; 0x04
    298c:	8a 96       	adiw	r24, 0x2a	; 42
    298e:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>

        xlist_switch( sched->ready, ((pitem_t *)current_proc)->prio );
    2992:	eb 81       	ldd	r30, Y+3	; 0x03
    2994:	fc 81       	ldd	r31, Y+4	; 0x04
    2996:	22 81       	ldd	r18, Z+2	; 0x02
    2998:	33 81       	ldd	r19, Z+3	; 0x03
    299a:	8d 81       	ldd	r24, Y+5	; 0x05
    299c:	9e 81       	ldd	r25, Y+6	; 0x06
    299e:	fc 01       	movw	r30, r24
    29a0:	46 81       	ldd	r20, Z+6	; 0x06
    29a2:	c9 01       	movw	r24, r18
    29a4:	64 2f       	mov	r22, r20
    29a6:	0e 94 1e 1c 	call	0x383c	; 0x383c <xlist_switch>

        SPIN_UNLOCK( sched );
    29aa:	8b 81       	ldd	r24, Y+3	; 0x03
    29ac:	9c 81       	ldd	r25, Y+4	; 0x04
    29ae:	8a 96       	adiw	r24, 0x2a	; 42
    29b0:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
        //Проверяем, не истек ли квант времени процесса
        if( current_proc->timer > (timer_t)1 )current_proc->timer--;// Не истек, уменьшаем таймер
    29b4:	ed 81       	ldd	r30, Y+5	; 0x05
    29b6:	fe 81       	ldd	r31, Y+6	; 0x06
    29b8:	85 8d       	ldd	r24, Z+29	; 0x1d
    29ba:	96 8d       	ldd	r25, Z+30	; 0x1e
    29bc:	82 30       	cpi	r24, 0x02	; 2
    29be:	91 05       	cpc	r25, r1
    29c0:	40 f0       	brcs	.+16     	; 0x29d2 <sched_schedule+0xcc>
    29c2:	ed 81       	ldd	r30, Y+5	; 0x05
    29c4:	fe 81       	ldd	r31, Y+6	; 0x06
    29c6:	85 8d       	ldd	r24, Z+29	; 0x1d
    29c8:	96 8d       	ldd	r25, Z+30	; 0x1e
    29ca:	01 97       	sbiw	r24, 0x01	; 1
    29cc:	96 8f       	std	Z+30, r25	; 0x1e
    29ce:	85 8f       	std	Z+29, r24	; 0x1d
    29d0:	6f c0       	rjmp	.+222    	; 0x2ab0 <sched_schedule+0x1aa>
        else
        {
            flag_t flags;
            // Истек, вырезаем процесс из списка
            SPIN_LOCK( sched );
    29d2:	8b 81       	ldd	r24, Y+3	; 0x03
    29d4:	9c 81       	ldd	r25, Y+4	; 0x04
    29d6:	8a 96       	adiw	r24, 0x2a	; 42
    29d8:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>

            pitem_fast_cut( (pitem_t *)current_proc );
    29dc:	8d 81       	ldd	r24, Y+5	; 0x05
    29de:	9e 81       	ldd	r25, Y+6	; 0x06
    29e0:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <pitem_fast_cut>

            SPIN_UNLOCK( sched );
    29e4:	8b 81       	ldd	r24, Y+3	; 0x03
    29e6:	9c 81       	ldd	r25, Y+4	; 0x04
    29e8:	8a 96       	adiw	r24, 0x2a	; 42
    29ea:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
            spin_lock( &kernel.stat_lock );
            // Обновили статистику после удаления процесса из списка ready
            stat_dec( current_proc, (stat_t *)kernel.stat + current_proc->core_id );
#endif // CONFIG_USE_ALB
            // А что за процесс собственно?
            flags = current_proc->flags;
    29ee:	ed 81       	ldd	r30, Y+5	; 0x05
    29f0:	fe 81       	ldd	r31, Y+6	; 0x06
    29f2:	87 81       	ldd	r24, Z+7	; 0x07
    29f4:	90 85       	ldd	r25, Z+8	; 0x08
    29f6:	9a 83       	std	Y+2, r25	; 0x02
    29f8:	89 83       	std	Y+1, r24	; 0x01
            if(
    29fa:	89 81       	ldd	r24, Y+1	; 0x01
    29fc:	9a 81       	ldd	r25, Y+2	; 0x02
    29fe:	81 70       	andi	r24, 0x01	; 1
    2a00:	90 70       	andi	r25, 0x00	; 0
    2a02:	00 97       	sbiw	r24, 0x00	; 0
    2a04:	31 f0       	breq	.+12     	; 0x2a12 <sched_schedule+0x10c>
    2a06:	89 81       	ldd	r24, Y+1	; 0x01
    2a08:	9a 81       	ldd	r25, Y+2	; 0x02
    2a0a:	8c 70       	andi	r24, 0x0C	; 12
    2a0c:	90 70       	andi	r25, 0x00	; 0
    2a0e:	00 97       	sbiw	r24, 0x00	; 0
    2a10:	f1 f0       	breq	.+60     	; 0x2a4e <sched_schedule+0x148>
                SPIN_LOCK( new_sched );
                pitem_insert( (pitem_t *)current_proc, new_sched->expired );
                SPIN_UNLOCK( new_sched );
#else // CONFIG_MP CONFIG_USE_ALB
                // Тупо переносим процесс в список expired
                SPIN_LOCK( sched );
    2a12:	8b 81       	ldd	r24, Y+3	; 0x03
    2a14:	9c 81       	ldd	r25, Y+4	; 0x04
    2a16:	8a 96       	adiw	r24, 0x2a	; 42
    2a18:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>

                pitem_insert( (pitem_t *)current_proc, sched->expired );
    2a1c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a1e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a20:	eb 81       	ldd	r30, Y+3	; 0x03
    2a22:	fc 81       	ldd	r31, Y+4	; 0x04
    2a24:	24 81       	ldd	r18, Z+4	; 0x04
    2a26:	35 81       	ldd	r19, Z+5	; 0x05
    2a28:	b9 01       	movw	r22, r18
    2a2a:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <pitem_insert>

                SPIN_UNLOCK( sched );
    2a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a30:	9c 81       	ldd	r25, Y+4	; 0x04
    2a32:	8a 96       	adiw	r24, 0x2a	; 42
    2a34:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>

#endif // CONFIG_MP CONFIG_USE_ALB
                current_proc->timer = current_proc->time_quant; // Сбросили таймер!
    2a38:	ad 81       	ldd	r26, Y+5	; 0x05
    2a3a:	be 81       	ldd	r27, Y+6	; 0x06
    2a3c:	ed 81       	ldd	r30, Y+5	; 0x05
    2a3e:	fe 81       	ldd	r31, Y+6	; 0x06
    2a40:	83 8d       	ldd	r24, Z+27	; 0x1b
    2a42:	94 8d       	ldd	r25, Z+28	; 0x1c
    2a44:	5e 96       	adiw	r26, 0x1e	; 30
    2a46:	9c 93       	st	X, r25
    2a48:	8e 93       	st	-X, r24
    2a4a:	5d 97       	sbiw	r26, 0x1d	; 29
    2a4c:	31 c0       	rjmp	.+98     	; 0x2ab0 <sched_schedule+0x1aa>
                /*********************************************************
                Если не используется активная схема балансировки нагрузки,
                то захват нужно делать тут, блокировка захватывается только
                в этой ветви оператора if.
                *********************************************************/
                spin_lock( &kernel.stat_lock );
    2a4e:	83 e0       	ldi	r24, 0x03	; 3
    2a50:	93 e0       	ldi	r25, 0x03	; 3
    2a52:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
                stat_dec( current_proc, (stat_t *)kernel.stat + current_proc->core_id );
    2a56:	4d 81       	ldd	r20, Y+5	; 0x05
    2a58:	5e 81       	ldd	r21, Y+6	; 0x06
    2a5a:	ed 81       	ldd	r30, Y+5	; 0x05
    2a5c:	fe 81       	ldd	r31, Y+6	; 0x06
    2a5e:	81 a1       	ldd	r24, Z+33	; 0x21
    2a60:	88 2f       	mov	r24, r24
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	9c 01       	movw	r18, r24
    2a66:	2f 5f       	subi	r18, 0xFF	; 255
    2a68:	3c 4f       	sbci	r19, 0xFC	; 252
    2a6a:	ca 01       	movw	r24, r20
    2a6c:	b9 01       	movw	r22, r18
    2a6e:	0e 94 82 01 	call	0x304	; 0x304 <stat_dec>
                 - если используется активная схема балансировки нагрузки,
                то блокировка была захвачена до входа в if;
                 - если не используется активная схема балансировки нагрузки,
                то блокировка была захвачена в этой ветви if.
                *********************************************************/
                spin_unlock( &kernel.stat_lock );
    2a72:	83 e0       	ldi	r24, 0x03	; 3
    2a74:	93 e0       	ldi	r25, 0x03	; 3
    2a76:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
#endif // CONFIG_MP
                ((pitem_t *)current_proc)->list = (xlist_t *)0;// Просто вырезали из списка, как в pitem_cut
    2a7a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a7c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a7e:	fc 01       	movw	r30, r24
    2a80:	15 82       	std	Z+5, r1	; 0x05
    2a82:	14 82       	std	Z+4, r1	; 0x04
                current_proc->flags |= PROC_FLG_WD_STOP;//Остановлен по WD
    2a84:	ad 81       	ldd	r26, Y+5	; 0x05
    2a86:	be 81       	ldd	r27, Y+6	; 0x06
    2a88:	ed 81       	ldd	r30, Y+5	; 0x05
    2a8a:	fe 81       	ldd	r31, Y+6	; 0x06
    2a8c:	87 81       	ldd	r24, Z+7	; 0x07
    2a8e:	90 85       	ldd	r25, Z+8	; 0x08
    2a90:	92 60       	ori	r25, 0x02	; 2
    2a92:	18 96       	adiw	r26, 0x08	; 8
    2a94:	9c 93       	st	X, r25
    2a96:	8e 93       	st	-X, r24
    2a98:	17 97       	sbiw	r26, 0x07	; 7
                current_proc->flags &= ~PROC_FLG_RUN;
    2a9a:	ad 81       	ldd	r26, Y+5	; 0x05
    2a9c:	be 81       	ldd	r27, Y+6	; 0x06
    2a9e:	ed 81       	ldd	r30, Y+5	; 0x05
    2aa0:	fe 81       	ldd	r31, Y+6	; 0x06
    2aa2:	87 81       	ldd	r24, Z+7	; 0x07
    2aa4:	90 85       	ldd	r25, Z+8	; 0x08
    2aa6:	8d 7f       	andi	r24, 0xFD	; 253
    2aa8:	18 96       	adiw	r26, 0x08	; 8
    2aaa:	9c 93       	st	X, r25
    2aac:	8e 93       	st	-X, r24
    2aae:	17 97       	sbiw	r26, 0x07	; 7
            }
        }
    }
    //Текущий процесс более не нужен, освобождаем его блокировку
    SPIN_UNLOCK( current_proc );
    2ab0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ab2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ab4:	83 96       	adiw	r24, 0x23	; 35
    2ab6:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>

    _sched_switch_current( sched, &current_proc );
    2aba:	8b 81       	ldd	r24, Y+3	; 0x03
    2abc:	9c 81       	ldd	r25, Y+4	; 0x04
    2abe:	9e 01       	movw	r18, r28
    2ac0:	2b 5f       	subi	r18, 0xFB	; 251
    2ac2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ac4:	b9 01       	movw	r22, r18
    2ac6:	0e 94 37 14 	call	0x286e	; 0x286e <_sched_switch_current>

    SPIN_LOCK( current_proc );
    2aca:	8d 81       	ldd	r24, Y+5	; 0x05
    2acc:	9e 81       	ldd	r25, Y+6	; 0x06
    2ace:	83 96       	adiw	r24, 0x23	; 35
    2ad0:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
    //Хук "восстановление контекста"
    if( current_proc->rs_hook )current_proc->rs_hook( current_proc->arg );
    2ad4:	ed 81       	ldd	r30, Y+5	; 0x05
    2ad6:	fe 81       	ldd	r31, Y+6	; 0x06
    2ad8:	80 a5       	ldd	r24, Z+40	; 0x28
    2ada:	91 a5       	ldd	r25, Z+41	; 0x29
    2adc:	00 97       	sbiw	r24, 0x00	; 0
    2ade:	51 f0       	breq	.+20     	; 0x2af4 <sched_schedule+0x1ee>
    2ae0:	ed 81       	ldd	r30, Y+5	; 0x05
    2ae2:	fe 81       	ldd	r31, Y+6	; 0x06
    2ae4:	20 a5       	ldd	r18, Z+40	; 0x28
    2ae6:	31 a5       	ldd	r19, Z+41	; 0x29
    2ae8:	ed 81       	ldd	r30, Y+5	; 0x05
    2aea:	fe 81       	ldd	r31, Y+6	; 0x06
    2aec:	82 a5       	ldd	r24, Z+42	; 0x2a
    2aee:	93 a5       	ldd	r25, Z+43	; 0x2b
    2af0:	f9 01       	movw	r30, r18
    2af2:	09 95       	icall

    SPIN_UNLOCK( current_proc );
    2af4:	8d 81       	ldd	r24, Y+5	; 0x05
    2af6:	9e 81       	ldd	r25, Y+6	; 0x06
    2af8:	83 96       	adiw	r24, 0x23	; 35
    2afa:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
}
    2afe:	26 96       	adiw	r28, 0x06	; 6
    2b00:	0f b6       	in	r0, 0x3f	; 63
    2b02:	f8 94       	cli
    2b04:	de bf       	out	0x3e, r29	; 62
    2b06:	0f be       	out	0x3f, r0	; 63
    2b08:	cd bf       	out	0x3d, r28	; 61
    2b0a:	cf 91       	pop	r28
    2b0c:	df 91       	pop	r29
    2b0e:	08 95       	ret

00002b10 <sched_reschedule>:
//----------------------------------------------------------------------------------------
// Функция перепланирования, переключает процессы в обработчике прерывания resched
void sched_reschedule(void)
{
    2b10:	df 93       	push	r29
    2b12:	cf 93       	push	r28
    2b14:	00 d0       	rcall	.+0      	; 0x2b16 <sched_reschedule+0x6>
    2b16:	00 d0       	rcall	.+0      	; 0x2b18 <sched_reschedule+0x8>
    2b18:	cd b7       	in	r28, 0x3d	; 61
    2b1a:	de b7       	in	r29, 0x3e	; 62
    proc_t * current_proc;
    sched_t * sched;
    sched = _SCHED_INIT();
    2b1c:	0e 94 2d 01 	call	0x25a	; 0x25a <current_core>
    2b20:	28 2f       	mov	r18, r24
    2b22:	30 e0       	ldi	r19, 0x00	; 0
    2b24:	8b e2       	ldi	r24, 0x2B	; 43
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	ac 01       	movw	r20, r24
    2b2a:	24 9f       	mul	r18, r20
    2b2c:	c0 01       	movw	r24, r0
    2b2e:	25 9f       	mul	r18, r21
    2b30:	90 0d       	add	r25, r0
    2b32:	34 9f       	mul	r19, r20
    2b34:	90 0d       	add	r25, r0
    2b36:	11 24       	eor	r1, r1
    2b38:	85 5b       	subi	r24, 0xB5	; 181
    2b3a:	9d 4f       	sbci	r25, 0xFD	; 253
    2b3c:	9a 83       	std	Y+2, r25	; 0x02
    2b3e:	89 83       	std	Y+1, r24	; 0x01
    // Меняем только с локального процессора, блокировку sched->lock можно не захватывать!
    current_proc = sched->current_proc;
    2b40:	e9 81       	ldd	r30, Y+1	; 0x01
    2b42:	fa 81       	ldd	r31, Y+2	; 0x02
    2b44:	80 81       	ld	r24, Z
    2b46:	91 81       	ldd	r25, Z+1	; 0x01
    2b48:	9c 83       	std	Y+4, r25	; 0x04
    2b4a:	8b 83       	std	Y+3, r24	; 0x03
    // А вот эту блокировку обязательно надо захватить!
    SPIN_LOCK( current_proc );
    2b4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b4e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b50:	83 96       	adiw	r24, 0x23	; 35
    2b52:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
    // Хук "сохранение контекста"
    if( current_proc->sv_hook )current_proc->sv_hook( current_proc->arg );
    2b56:	eb 81       	ldd	r30, Y+3	; 0x03
    2b58:	fc 81       	ldd	r31, Y+4	; 0x04
    2b5a:	86 a1       	ldd	r24, Z+38	; 0x26
    2b5c:	97 a1       	ldd	r25, Z+39	; 0x27
    2b5e:	00 97       	sbiw	r24, 0x00	; 0
    2b60:	51 f0       	breq	.+20     	; 0x2b76 <sched_reschedule+0x66>
    2b62:	eb 81       	ldd	r30, Y+3	; 0x03
    2b64:	fc 81       	ldd	r31, Y+4	; 0x04
    2b66:	26 a1       	ldd	r18, Z+38	; 0x26
    2b68:	37 a1       	ldd	r19, Z+39	; 0x27
    2b6a:	eb 81       	ldd	r30, Y+3	; 0x03
    2b6c:	fc 81       	ldd	r31, Y+4	; 0x04
    2b6e:	82 a5       	ldd	r24, Z+42	; 0x2a
    2b70:	93 a5       	ldd	r25, Z+43	; 0x2b
    2b72:	f9 01       	movw	r30, r18
    2b74:	09 95       	icall

    SPIN_UNLOCK( current_proc );
    2b76:	8b 81       	ldd	r24, Y+3	; 0x03
    2b78:	9c 81       	ldd	r25, Y+4	; 0x04
    2b7a:	83 96       	adiw	r24, 0x23	; 35
    2b7c:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>

    _sched_switch_current( sched, &current_proc );
    2b80:	89 81       	ldd	r24, Y+1	; 0x01
    2b82:	9a 81       	ldd	r25, Y+2	; 0x02
    2b84:	9e 01       	movw	r18, r28
    2b86:	2d 5f       	subi	r18, 0xFD	; 253
    2b88:	3f 4f       	sbci	r19, 0xFF	; 255
    2b8a:	b9 01       	movw	r22, r18
    2b8c:	0e 94 37 14 	call	0x286e	; 0x286e <_sched_switch_current>

    SPIN_LOCK( current_proc );
    2b90:	8b 81       	ldd	r24, Y+3	; 0x03
    2b92:	9c 81       	ldd	r25, Y+4	; 0x04
    2b94:	83 96       	adiw	r24, 0x23	; 35
    2b96:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
    //Хук "восстановление контекста"
    if( current_proc->rs_hook )current_proc->rs_hook( current_proc->arg );
    2b9a:	eb 81       	ldd	r30, Y+3	; 0x03
    2b9c:	fc 81       	ldd	r31, Y+4	; 0x04
    2b9e:	80 a5       	ldd	r24, Z+40	; 0x28
    2ba0:	91 a5       	ldd	r25, Z+41	; 0x29
    2ba2:	00 97       	sbiw	r24, 0x00	; 0
    2ba4:	51 f0       	breq	.+20     	; 0x2bba <sched_reschedule+0xaa>
    2ba6:	eb 81       	ldd	r30, Y+3	; 0x03
    2ba8:	fc 81       	ldd	r31, Y+4	; 0x04
    2baa:	20 a5       	ldd	r18, Z+40	; 0x28
    2bac:	31 a5       	ldd	r19, Z+41	; 0x29
    2bae:	eb 81       	ldd	r30, Y+3	; 0x03
    2bb0:	fc 81       	ldd	r31, Y+4	; 0x04
    2bb2:	82 a5       	ldd	r24, Z+42	; 0x2a
    2bb4:	93 a5       	ldd	r25, Z+43	; 0x2b
    2bb6:	f9 01       	movw	r30, r18
    2bb8:	09 95       	icall

    SPIN_UNLOCK( current_proc );
    2bba:	8b 81       	ldd	r24, Y+3	; 0x03
    2bbc:	9c 81       	ldd	r25, Y+4	; 0x04
    2bbe:	83 96       	adiw	r24, 0x23	; 35
    2bc0:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
}
    2bc4:	0f 90       	pop	r0
    2bc6:	0f 90       	pop	r0
    2bc8:	0f 90       	pop	r0
    2bca:	0f 90       	pop	r0
    2bcc:	cf 91       	pop	r28
    2bce:	df 91       	pop	r29
    2bd0:	08 95       	ret

00002bd2 <sem_init_isr>:
*****************************************************************************************/
#include "../include/bugurt.h"

// Инициализация
void sem_init_isr( sem_t * sem, count_t count )
{
    2bd2:	df 93       	push	r29
    2bd4:	cf 93       	push	r28
    2bd6:	00 d0       	rcall	.+0      	; 0x2bd8 <sem_init_isr+0x6>
    2bd8:	00 d0       	rcall	.+0      	; 0x2bda <sem_init_isr+0x8>
    2bda:	cd b7       	in	r28, 0x3d	; 61
    2bdc:	de b7       	in	r29, 0x3e	; 62
    2bde:	9a 83       	std	Y+2, r25	; 0x02
    2be0:	89 83       	std	Y+1, r24	; 0x01
    2be2:	7c 83       	std	Y+4, r23	; 0x04
    2be4:	6b 83       	std	Y+3, r22	; 0x03
    SPIN_INIT( sem );
    2be6:	89 81       	ldd	r24, Y+1	; 0x01
    2be8:	9a 81       	ldd	r25, Y+2	; 0x02
    2bea:	43 96       	adiw	r24, 0x13	; 19
    2bec:	0e 94 3c 01 	call	0x278	; 0x278 <spin_init>
    SPIN_LOCK( sem );
    2bf0:	89 81       	ldd	r24, Y+1	; 0x01
    2bf2:	9a 81       	ldd	r25, Y+2	; 0x02
    2bf4:	43 96       	adiw	r24, 0x13	; 19
    2bf6:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>

    xlist_init( (xlist_t *)sem );
    2bfa:	89 81       	ldd	r24, Y+1	; 0x01
    2bfc:	9a 81       	ldd	r25, Y+2	; 0x02
    2bfe:	0e 94 c8 1b 	call	0x3790	; 0x3790 <xlist_init>
    sem->counter = count;
    2c02:	e9 81       	ldd	r30, Y+1	; 0x01
    2c04:	fa 81       	ldd	r31, Y+2	; 0x02
    2c06:	8b 81       	ldd	r24, Y+3	; 0x03
    2c08:	9c 81       	ldd	r25, Y+4	; 0x04
    2c0a:	92 8b       	std	Z+18, r25	; 0x12
    2c0c:	81 8b       	std	Z+17, r24	; 0x11
    SPIN_UNLOCK( sem );
    2c0e:	89 81       	ldd	r24, Y+1	; 0x01
    2c10:	9a 81       	ldd	r25, Y+2	; 0x02
    2c12:	43 96       	adiw	r24, 0x13	; 19
    2c14:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
}
    2c18:	0f 90       	pop	r0
    2c1a:	0f 90       	pop	r0
    2c1c:	0f 90       	pop	r0
    2c1e:	0f 90       	pop	r0
    2c20:	cf 91       	pop	r28
    2c22:	df 91       	pop	r29
    2c24:	08 95       	ret

00002c26 <_sem_lock>:

bool_t _sem_lock( sem_t * sem )
{
    2c26:	df 93       	push	r29
    2c28:	cf 93       	push	r28
    2c2a:	00 d0       	rcall	.+0      	; 0x2c2c <_sem_lock+0x6>
    2c2c:	00 d0       	rcall	.+0      	; 0x2c2e <_sem_lock+0x8>
    2c2e:	0f 92       	push	r0
    2c30:	cd b7       	in	r28, 0x3d	; 61
    2c32:	de b7       	in	r29, 0x3e	; 62
    2c34:	9d 83       	std	Y+5, r25	; 0x05
    2c36:	8c 83       	std	Y+4, r24	; 0x04
    bool_t ret = (bool_t)0;
    2c38:	1b 82       	std	Y+3, r1	; 0x03
    proc_t * proc;
    proc = current_proc();
    2c3a:	0e 94 0a 01 	call	0x214	; 0x214 <current_proc>
    2c3e:	9a 83       	std	Y+2, r25	; 0x02
    2c40:	89 83       	std	Y+1, r24	; 0x01
    // Выставляем флаг захватат семафора
    SPIN_LOCK( proc );
    2c42:	89 81       	ldd	r24, Y+1	; 0x01
    2c44:	9a 81       	ldd	r25, Y+2	; 0x02
    2c46:	83 96       	adiw	r24, 0x23	; 35
    2c48:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
    proc->flags |= PROC_FLG_SEM;
    2c4c:	e9 81       	ldd	r30, Y+1	; 0x01
    2c4e:	fa 81       	ldd	r31, Y+2	; 0x02
    2c50:	87 81       	ldd	r24, Z+7	; 0x07
    2c52:	90 85       	ldd	r25, Z+8	; 0x08
    2c54:	88 60       	ori	r24, 0x08	; 8
    2c56:	e9 81       	ldd	r30, Y+1	; 0x01
    2c58:	fa 81       	ldd	r31, Y+2	; 0x02
    2c5a:	90 87       	std	Z+8, r25	; 0x08
    2c5c:	87 83       	std	Z+7, r24	; 0x07
    SPIN_UNLOCK( proc );
    2c5e:	89 81       	ldd	r24, Y+1	; 0x01
    2c60:	9a 81       	ldd	r25, Y+2	; 0x02
    2c62:	83 96       	adiw	r24, 0x23	; 35
    2c64:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
    // Собственно захват семафора
    SPIN_LOCK( sem );
    2c68:	8c 81       	ldd	r24, Y+4	; 0x04
    2c6a:	9d 81       	ldd	r25, Y+5	; 0x05
    2c6c:	43 96       	adiw	r24, 0x13	; 19
    2c6e:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
    if( sem->counter != 0 )
    2c72:	ec 81       	ldd	r30, Y+4	; 0x04
    2c74:	fd 81       	ldd	r31, Y+5	; 0x05
    2c76:	81 89       	ldd	r24, Z+17	; 0x11
    2c78:	92 89       	ldd	r25, Z+18	; 0x12
    2c7a:	00 97       	sbiw	r24, 0x00	; 0
    2c7c:	61 f0       	breq	.+24     	; 0x2c96 <_sem_lock+0x70>
    {
        sem->counter--;
    2c7e:	ec 81       	ldd	r30, Y+4	; 0x04
    2c80:	fd 81       	ldd	r31, Y+5	; 0x05
    2c82:	81 89       	ldd	r24, Z+17	; 0x11
    2c84:	92 89       	ldd	r25, Z+18	; 0x12
    2c86:	01 97       	sbiw	r24, 0x01	; 1
    2c88:	ec 81       	ldd	r30, Y+4	; 0x04
    2c8a:	fd 81       	ldd	r31, Y+5	; 0x05
    2c8c:	92 8b       	std	Z+18, r25	; 0x12
    2c8e:	81 8b       	std	Z+17, r24	; 0x11
        ret = (bool_t)1;
    2c90:	81 e0       	ldi	r24, 0x01	; 1
    2c92:	8b 83       	std	Y+3, r24	; 0x03
    2c94:	1e c0       	rjmp	.+60     	; 0x2cd2 <_sem_lock+0xac>
    }
    else
    {
        SPIN_LOCK( proc );
    2c96:	89 81       	ldd	r24, Y+1	; 0x01
    2c98:	9a 81       	ldd	r25, Y+2	; 0x02
    2c9a:	83 96       	adiw	r24, 0x23	; 35
    2c9c:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
        proc->flags |= PROC_FLG_QUEUE;
    2ca0:	e9 81       	ldd	r30, Y+1	; 0x01
    2ca2:	fa 81       	ldd	r31, Y+2	; 0x02
    2ca4:	87 81       	ldd	r24, Z+7	; 0x07
    2ca6:	90 85       	ldd	r25, Z+8	; 0x08
    2ca8:	80 61       	ori	r24, 0x10	; 16
    2caa:	e9 81       	ldd	r30, Y+1	; 0x01
    2cac:	fa 81       	ldd	r31, Y+2	; 0x02
    2cae:	90 87       	std	Z+8, r25	; 0x08
    2cb0:	87 83       	std	Z+7, r24	; 0x07
        _proc_stop( proc );
    2cb2:	89 81       	ldd	r24, Y+1	; 0x01
    2cb4:	9a 81       	ldd	r25, Y+2	; 0x02
    2cb6:	0e 94 44 11 	call	0x2288	; 0x2288 <_proc_stop>
        pitem_insert( (pitem_t *)proc, (xlist_t *)sem );
    2cba:	89 81       	ldd	r24, Y+1	; 0x01
    2cbc:	9a 81       	ldd	r25, Y+2	; 0x02
    2cbe:	2c 81       	ldd	r18, Y+4	; 0x04
    2cc0:	3d 81       	ldd	r19, Y+5	; 0x05
    2cc2:	b9 01       	movw	r22, r18
    2cc4:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <pitem_insert>
        SPIN_UNLOCK( proc );
    2cc8:	89 81       	ldd	r24, Y+1	; 0x01
    2cca:	9a 81       	ldd	r25, Y+2	; 0x02
    2ccc:	83 96       	adiw	r24, 0x23	; 35
    2cce:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
    }
    SPIN_UNLOCK( sem );
    2cd2:	8c 81       	ldd	r24, Y+4	; 0x04
    2cd4:	9d 81       	ldd	r25, Y+5	; 0x05
    2cd6:	43 96       	adiw	r24, 0x13	; 19
    2cd8:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
    return ret;
    2cdc:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2cde:	0f 90       	pop	r0
    2ce0:	0f 90       	pop	r0
    2ce2:	0f 90       	pop	r0
    2ce4:	0f 90       	pop	r0
    2ce6:	0f 90       	pop	r0
    2ce8:	cf 91       	pop	r28
    2cea:	df 91       	pop	r29
    2cec:	08 95       	ret

00002cee <_sem_try_lock>:

bool_t _sem_try_lock( sem_t * sem )
{
    2cee:	df 93       	push	r29
    2cf0:	cf 93       	push	r28
    2cf2:	00 d0       	rcall	.+0      	; 0x2cf4 <_sem_try_lock+0x6>
    2cf4:	00 d0       	rcall	.+0      	; 0x2cf6 <_sem_try_lock+0x8>
    2cf6:	0f 92       	push	r0
    2cf8:	cd b7       	in	r28, 0x3d	; 61
    2cfa:	de b7       	in	r29, 0x3e	; 62
    2cfc:	9d 83       	std	Y+5, r25	; 0x05
    2cfe:	8c 83       	std	Y+4, r24	; 0x04
    bool_t ret = (bool_t)0;
    2d00:	1b 82       	std	Y+3, r1	; 0x03
    SPIN_LOCK( sem );
    2d02:	8c 81       	ldd	r24, Y+4	; 0x04
    2d04:	9d 81       	ldd	r25, Y+5	; 0x05
    2d06:	43 96       	adiw	r24, 0x13	; 19
    2d08:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
    if( sem->counter != 0 )
    2d0c:	ec 81       	ldd	r30, Y+4	; 0x04
    2d0e:	fd 81       	ldd	r31, Y+5	; 0x05
    2d10:	81 89       	ldd	r24, Z+17	; 0x11
    2d12:	92 89       	ldd	r25, Z+18	; 0x12
    2d14:	00 97       	sbiw	r24, 0x00	; 0
    2d16:	11 f1       	breq	.+68     	; 0x2d5c <_sem_try_lock+0x6e>
    {
        proc_t * proc;
        proc = current_proc();
    2d18:	0e 94 0a 01 	call	0x214	; 0x214 <current_proc>
    2d1c:	9a 83       	std	Y+2, r25	; 0x02
    2d1e:	89 83       	std	Y+1, r24	; 0x01

        sem->counter--;
    2d20:	ec 81       	ldd	r30, Y+4	; 0x04
    2d22:	fd 81       	ldd	r31, Y+5	; 0x05
    2d24:	81 89       	ldd	r24, Z+17	; 0x11
    2d26:	92 89       	ldd	r25, Z+18	; 0x12
    2d28:	01 97       	sbiw	r24, 0x01	; 1
    2d2a:	ec 81       	ldd	r30, Y+4	; 0x04
    2d2c:	fd 81       	ldd	r31, Y+5	; 0x05
    2d2e:	92 8b       	std	Z+18, r25	; 0x12
    2d30:	81 8b       	std	Z+17, r24	; 0x11
        ret = (bool_t)1;
    2d32:	81 e0       	ldi	r24, 0x01	; 1
    2d34:	8b 83       	std	Y+3, r24	; 0x03
        // Выставляем флаг захватат семафора
        SPIN_LOCK( proc );
    2d36:	89 81       	ldd	r24, Y+1	; 0x01
    2d38:	9a 81       	ldd	r25, Y+2	; 0x02
    2d3a:	83 96       	adiw	r24, 0x23	; 35
    2d3c:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
        proc->flags |= PROC_FLG_SEM;
    2d40:	e9 81       	ldd	r30, Y+1	; 0x01
    2d42:	fa 81       	ldd	r31, Y+2	; 0x02
    2d44:	87 81       	ldd	r24, Z+7	; 0x07
    2d46:	90 85       	ldd	r25, Z+8	; 0x08
    2d48:	88 60       	ori	r24, 0x08	; 8
    2d4a:	e9 81       	ldd	r30, Y+1	; 0x01
    2d4c:	fa 81       	ldd	r31, Y+2	; 0x02
    2d4e:	90 87       	std	Z+8, r25	; 0x08
    2d50:	87 83       	std	Z+7, r24	; 0x07
        SPIN_UNLOCK( proc );
    2d52:	89 81       	ldd	r24, Y+1	; 0x01
    2d54:	9a 81       	ldd	r25, Y+2	; 0x02
    2d56:	83 96       	adiw	r24, 0x23	; 35
    2d58:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
    }
    SPIN_UNLOCK( sem );
    2d5c:	8c 81       	ldd	r24, Y+4	; 0x04
    2d5e:	9d 81       	ldd	r25, Y+5	; 0x05
    2d60:	43 96       	adiw	r24, 0x13	; 19
    2d62:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
    return ret;
    2d66:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2d68:	0f 90       	pop	r0
    2d6a:	0f 90       	pop	r0
    2d6c:	0f 90       	pop	r0
    2d6e:	0f 90       	pop	r0
    2d70:	0f 90       	pop	r0
    2d72:	cf 91       	pop	r28
    2d74:	df 91       	pop	r29
    2d76:	08 95       	ret

00002d78 <sem_unlock_isr>:

void sem_unlock_isr( sem_t * sem )
{
    2d78:	df 93       	push	r29
    2d7a:	cf 93       	push	r28
    2d7c:	00 d0       	rcall	.+0      	; 0x2d7e <sem_unlock_isr+0x6>
    2d7e:	00 d0       	rcall	.+0      	; 0x2d80 <sem_unlock_isr+0x8>
    2d80:	cd b7       	in	r28, 0x3d	; 61
    2d82:	de b7       	in	r29, 0x3e	; 62
    2d84:	9c 83       	std	Y+4, r25	; 0x04
    2d86:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc;
    SPIN_LOCK( sem );
    2d88:	8b 81       	ldd	r24, Y+3	; 0x03
    2d8a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d8c:	43 96       	adiw	r24, 0x13	; 19
    2d8e:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>

    if( ((xlist_t *)sem)->index == (index_t)0  )
    2d92:	eb 81       	ldd	r30, Y+3	; 0x03
    2d94:	fc 81       	ldd	r31, Y+4	; 0x04
    2d96:	80 89       	ldd	r24, Z+16	; 0x10
    2d98:	88 23       	and	r24, r24
    2d9a:	51 f4       	brne	.+20     	; 0x2db0 <sem_unlock_isr+0x38>
    {
        sem->counter++;
    2d9c:	eb 81       	ldd	r30, Y+3	; 0x03
    2d9e:	fc 81       	ldd	r31, Y+4	; 0x04
    2da0:	81 89       	ldd	r24, Z+17	; 0x11
    2da2:	92 89       	ldd	r25, Z+18	; 0x12
    2da4:	01 96       	adiw	r24, 0x01	; 1
    2da6:	eb 81       	ldd	r30, Y+3	; 0x03
    2da8:	fc 81       	ldd	r31, Y+4	; 0x04
    2daa:	92 8b       	std	Z+18, r25	; 0x12
    2dac:	81 8b       	std	Z+17, r24	; 0x11
    2dae:	21 c0       	rjmp	.+66     	; 0x2df2 <sem_unlock_isr+0x7a>
        goto end;
    }
    proc = (proc_t *)xlist_head((xlist_t *)sem);
    2db0:	8b 81       	ldd	r24, Y+3	; 0x03
    2db2:	9c 81       	ldd	r25, Y+4	; 0x04
    2db4:	0e 94 f2 1b 	call	0x37e4	; 0x37e4 <xlist_head>
    2db8:	9a 83       	std	Y+2, r25	; 0x02
    2dba:	89 83       	std	Y+1, r24	; 0x01

    SPIN_LOCK( proc );
    2dbc:	89 81       	ldd	r24, Y+1	; 0x01
    2dbe:	9a 81       	ldd	r25, Y+2	; 0x02
    2dc0:	83 96       	adiw	r24, 0x23	; 35
    2dc2:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>

    pitem_cut( (pitem_t *)proc );
    2dc6:	89 81       	ldd	r24, Y+1	; 0x01
    2dc8:	9a 81       	ldd	r25, Y+2	; 0x02
    2dca:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <pitem_cut>
    proc->flags &= ~PROC_FLG_QUEUE;
    2dce:	e9 81       	ldd	r30, Y+1	; 0x01
    2dd0:	fa 81       	ldd	r31, Y+2	; 0x02
    2dd2:	87 81       	ldd	r24, Z+7	; 0x07
    2dd4:	90 85       	ldd	r25, Z+8	; 0x08
    2dd6:	8f 7e       	andi	r24, 0xEF	; 239
    2dd8:	e9 81       	ldd	r30, Y+1	; 0x01
    2dda:	fa 81       	ldd	r31, Y+2	; 0x02
    2ddc:	90 87       	std	Z+8, r25	; 0x08
    2dde:	87 83       	std	Z+7, r24	; 0x07
    _proc_run( proc );
    2de0:	89 81       	ldd	r24, Y+1	; 0x01
    2de2:	9a 81       	ldd	r25, Y+2	; 0x02
    2de4:	0e 94 37 10 	call	0x206e	; 0x206e <_proc_run>

    SPIN_UNLOCK( proc );
    2de8:	89 81       	ldd	r24, Y+1	; 0x01
    2dea:	9a 81       	ldd	r25, Y+2	; 0x02
    2dec:	83 96       	adiw	r24, 0x23	; 35
    2dee:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
end:
    SPIN_UNLOCK( sem );
    2df2:	8b 81       	ldd	r24, Y+3	; 0x03
    2df4:	9c 81       	ldd	r25, Y+4	; 0x04
    2df6:	43 96       	adiw	r24, 0x13	; 19
    2df8:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
}
    2dfc:	0f 90       	pop	r0
    2dfe:	0f 90       	pop	r0
    2e00:	0f 90       	pop	r0
    2e02:	0f 90       	pop	r0
    2e04:	cf 91       	pop	r28
    2e06:	df 91       	pop	r29
    2e08:	08 95       	ret

00002e0a <sig_init_isr>:
*****************************************************************************************/
#include "../include/bugurt.h"
//========================================================================================
// Инициация
void sig_init_isr( sig_t * sig )
{
    2e0a:	df 93       	push	r29
    2e0c:	cf 93       	push	r28
    2e0e:	00 d0       	rcall	.+0      	; 0x2e10 <sig_init_isr+0x6>
    2e10:	0f 92       	push	r0
    2e12:	cd b7       	in	r28, 0x3d	; 61
    2e14:	de b7       	in	r29, 0x3e	; 62
    2e16:	9b 83       	std	Y+3, r25	; 0x03
    2e18:	8a 83       	std	Y+2, r24	; 0x02
#ifdef CONFIG_MP
    core_id_t i;
    SPIN_INIT( sig );
    2e1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e1c:	9b 81       	ldd	r25, Y+3	; 0x03
    2e1e:	84 96       	adiw	r24, 0x24	; 36
    2e20:	0e 94 3c 01 	call	0x278	; 0x278 <spin_init>
    SPIN_LOCK( sig );
    2e24:	8a 81       	ldd	r24, Y+2	; 0x02
    2e26:	9b 81       	ldd	r25, Y+3	; 0x03
    2e28:	84 96       	adiw	r24, 0x24	; 36
    2e2a:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
    for( i = 0; i < (core_id_t)MAX_CORES; i++ )
    2e2e:	19 82       	std	Y+1, r1	; 0x01
    2e30:	21 c0       	rjmp	.+66     	; 0x2e74 <sig_init_isr+0x6a>
    {
        xlist_init( (xlist_t *)sig->sig_list + i );
    2e32:	4a 81       	ldd	r20, Y+2	; 0x02
    2e34:	5b 81       	ldd	r21, Y+3	; 0x03
    2e36:	89 81       	ldd	r24, Y+1	; 0x01
    2e38:	28 2f       	mov	r18, r24
    2e3a:	30 e0       	ldi	r19, 0x00	; 0
    2e3c:	c9 01       	movw	r24, r18
    2e3e:	82 95       	swap	r24
    2e40:	92 95       	swap	r25
    2e42:	90 7f       	andi	r25, 0xF0	; 240
    2e44:	98 27       	eor	r25, r24
    2e46:	80 7f       	andi	r24, 0xF0	; 240
    2e48:	98 27       	eor	r25, r24
    2e4a:	82 0f       	add	r24, r18
    2e4c:	93 1f       	adc	r25, r19
    2e4e:	84 0f       	add	r24, r20
    2e50:	95 1f       	adc	r25, r21
    2e52:	0e 94 c8 1b 	call	0x3790	; 0x3790 <xlist_init>
        stat_init( (stat_t *)sig->sig_stat + i );
    2e56:	8a 81       	ldd	r24, Y+2	; 0x02
    2e58:	9b 81       	ldd	r25, Y+3	; 0x03
    2e5a:	9c 01       	movw	r18, r24
    2e5c:	2e 5d       	subi	r18, 0xDE	; 222
    2e5e:	3f 4f       	sbci	r19, 0xFF	; 255
    2e60:	89 81       	ldd	r24, Y+1	; 0x01
    2e62:	88 2f       	mov	r24, r24
    2e64:	90 e0       	ldi	r25, 0x00	; 0
    2e66:	82 0f       	add	r24, r18
    2e68:	93 1f       	adc	r25, r19
    2e6a:	0e 94 73 01 	call	0x2e6	; 0x2e6 <stat_init>
{
#ifdef CONFIG_MP
    core_id_t i;
    SPIN_INIT( sig );
    SPIN_LOCK( sig );
    for( i = 0; i < (core_id_t)MAX_CORES; i++ )
    2e6e:	89 81       	ldd	r24, Y+1	; 0x01
    2e70:	8f 5f       	subi	r24, 0xFF	; 255
    2e72:	89 83       	std	Y+1, r24	; 0x01
    2e74:	89 81       	ldd	r24, Y+1	; 0x01
    2e76:	82 30       	cpi	r24, 0x02	; 2
    2e78:	e0 f2       	brcs	.-72     	; 0x2e32 <sig_init_isr+0x28>
    {
        xlist_init( (xlist_t *)sig->sig_list + i );
        stat_init( (stat_t *)sig->sig_stat + i );
    }
    SPIN_UNLOCK( sig );
    2e7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e7c:	9b 81       	ldd	r25, Y+3	; 0x03
    2e7e:	84 96       	adiw	r24, 0x24	; 36
    2e80:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
#else
    xlist_init( (xlist_t *)sig );
#endif
}
    2e84:	0f 90       	pop	r0
    2e86:	0f 90       	pop	r0
    2e88:	0f 90       	pop	r0
    2e8a:	cf 91       	pop	r28
    2e8c:	df 91       	pop	r29
    2e8e:	08 95       	ret

00002e90 <_sig_wait_prologue>:
//========================================================================================
// Это выполнится при постановке процесса в список ожидания сигнала
void _sig_wait_prologue( sig_t * sig )
{
    2e90:	df 93       	push	r29
    2e92:	cf 93       	push	r28
    2e94:	00 d0       	rcall	.+0      	; 0x2e96 <_sig_wait_prologue+0x6>
    2e96:	00 d0       	rcall	.+0      	; 0x2e98 <_sig_wait_prologue+0x8>
    2e98:	0f 92       	push	r0
    2e9a:	cd b7       	in	r28, 0x3d	; 61
    2e9c:	de b7       	in	r29, 0x3e	; 62
    2e9e:	9d 83       	std	Y+5, r25	; 0x05
    2ea0:	8c 83       	std	Y+4, r24	; 0x04
    proc_t * proc;

    SPIN_LOCK( sig );
    2ea2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ea4:	9d 81       	ldd	r25, Y+5	; 0x05
    2ea6:	84 96       	adiw	r24, 0x24	; 36
    2ea8:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>

    proc = current_proc();
    2eac:	0e 94 0a 01 	call	0x214	; 0x214 <current_proc>
    2eb0:	9b 83       	std	Y+3, r25	; 0x03
    2eb2:	8a 83       	std	Y+2, r24	; 0x02
    SPIN_LOCK( proc );
    2eb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb6:	9b 81       	ldd	r25, Y+3	; 0x03
    2eb8:	83 96       	adiw	r24, 0x23	; 35
    2eba:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>

    // Останавливаем процесс
    proc->flags |= PROC_FLG_WAIT;
    2ebe:	ea 81       	ldd	r30, Y+2	; 0x02
    2ec0:	fb 81       	ldd	r31, Y+3	; 0x03
    2ec2:	87 81       	ldd	r24, Z+7	; 0x07
    2ec4:	90 85       	ldd	r25, Z+8	; 0x08
    2ec6:	80 62       	ori	r24, 0x20	; 32
    2ec8:	ea 81       	ldd	r30, Y+2	; 0x02
    2eca:	fb 81       	ldd	r31, Y+3	; 0x03
    2ecc:	90 87       	std	Z+8, r25	; 0x08
    2ece:	87 83       	std	Z+7, r24	; 0x07
    _proc_stop_( proc );
    2ed0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ed2:	9b 81       	ldd	r25, Y+3	; 0x03
    2ed4:	0e 94 00 11 	call	0x2200	; 0x2200 <_proc_stop_>
    RESCHED_PROC( proc );
    2ed8:	ea 81       	ldd	r30, Y+2	; 0x02
    2eda:	fb 81       	ldd	r31, Y+3	; 0x03
    2edc:	81 a1       	ldd	r24, Z+33	; 0x21
    2ede:	0e 94 de 01 	call	0x3bc	; 0x3bc <resched>
        Балансировка нагрузки производится заранее,
        в этом случае получается сделать sig_broadcast  с временем выполнения O(1),
        однако про hotplug  придется забыть, ну и ладно.
        */
        core_id_t sig_core;
        sig_core = sched_load_balancer( proc, (stat_t *)sig->sig_stat );
    2ee2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ee4:	9d 81       	ldd	r25, Y+5	; 0x05
    2ee6:	9c 01       	movw	r18, r24
    2ee8:	2e 5d       	subi	r18, 0xDE	; 222
    2eea:	3f 4f       	sbci	r19, 0xFF	; 255
    2eec:	8a 81       	ldd	r24, Y+2	; 0x02
    2eee:	9b 81       	ldd	r25, Y+3	; 0x03
    2ef0:	b9 01       	movw	r22, r18
    2ef2:	0e 94 2e 13 	call	0x265c	; 0x265c <sched_load_balancer>
    2ef6:	89 83       	std	Y+1, r24	; 0x01

        proc->core_id = sig_core;
    2ef8:	ea 81       	ldd	r30, Y+2	; 0x02
    2efa:	fb 81       	ldd	r31, Y+3	; 0x03
    2efc:	89 81       	ldd	r24, Y+1	; 0x01
    2efe:	81 a3       	std	Z+33, r24	; 0x21
        pitem_insert((pitem_t *)proc, (xlist_t *)sig + sig_core);
    2f00:	6a 81       	ldd	r22, Y+2	; 0x02
    2f02:	7b 81       	ldd	r23, Y+3	; 0x03
    2f04:	4c 81       	ldd	r20, Y+4	; 0x04
    2f06:	5d 81       	ldd	r21, Y+5	; 0x05
    2f08:	89 81       	ldd	r24, Y+1	; 0x01
    2f0a:	28 2f       	mov	r18, r24
    2f0c:	30 e0       	ldi	r19, 0x00	; 0
    2f0e:	c9 01       	movw	r24, r18
    2f10:	82 95       	swap	r24
    2f12:	92 95       	swap	r25
    2f14:	90 7f       	andi	r25, 0xF0	; 240
    2f16:	98 27       	eor	r25, r24
    2f18:	80 7f       	andi	r24, 0xF0	; 240
    2f1a:	98 27       	eor	r25, r24
    2f1c:	82 0f       	add	r24, r18
    2f1e:	93 1f       	adc	r25, r19
    2f20:	9a 01       	movw	r18, r20
    2f22:	28 0f       	add	r18, r24
    2f24:	39 1f       	adc	r19, r25
    2f26:	cb 01       	movw	r24, r22
    2f28:	b9 01       	movw	r22, r18
    2f2a:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <pitem_insert>
        stat_inc( proc, (stat_t *)sig->sig_stat + sig_core );
    2f2e:	8c 81       	ldd	r24, Y+4	; 0x04
    2f30:	9d 81       	ldd	r25, Y+5	; 0x05
    2f32:	9c 01       	movw	r18, r24
    2f34:	2e 5d       	subi	r18, 0xDE	; 222
    2f36:	3f 4f       	sbci	r19, 0xFF	; 255
    2f38:	89 81       	ldd	r24, Y+1	; 0x01
    2f3a:	88 2f       	mov	r24, r24
    2f3c:	90 e0       	ldi	r25, 0x00	; 0
    2f3e:	28 0f       	add	r18, r24
    2f40:	39 1f       	adc	r19, r25
    2f42:	8a 81       	ldd	r24, Y+2	; 0x02
    2f44:	9b 81       	ldd	r25, Y+3	; 0x03
    2f46:	b9 01       	movw	r22, r18
    2f48:	0e 94 98 01 	call	0x330	; 0x330 <stat_inc>
    }
#else
    pitem_insert( (pitem_t *)proc, (xlist_t *)sig );
#endif //CONFIG_MP
    SPIN_UNLOCK( proc );
    2f4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f4e:	9b 81       	ldd	r25, Y+3	; 0x03
    2f50:	83 96       	adiw	r24, 0x23	; 35
    2f52:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
    SPIN_UNLOCK( sig );
    2f56:	8c 81       	ldd	r24, Y+4	; 0x04
    2f58:	9d 81       	ldd	r25, Y+5	; 0x05
    2f5a:	84 96       	adiw	r24, 0x24	; 36
    2f5c:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
}
    2f60:	0f 90       	pop	r0
    2f62:	0f 90       	pop	r0
    2f64:	0f 90       	pop	r0
    2f66:	0f 90       	pop	r0
    2f68:	0f 90       	pop	r0
    2f6a:	cf 91       	pop	r28
    2f6c:	df 91       	pop	r29
    2f6e:	08 95       	ret

00002f70 <_sig_wakeup_list_proc>:
//========================================================================================
//
static void _sig_wakeup_list_proc( proc_t * proc )
{
    2f70:	df 93       	push	r29
    2f72:	cf 93       	push	r28
    2f74:	00 d0       	rcall	.+0      	; 0x2f76 <_sig_wakeup_list_proc+0x6>
    2f76:	cd b7       	in	r28, 0x3d	; 61
    2f78:	de b7       	in	r29, 0x3e	; 62
    2f7a:	9a 83       	std	Y+2, r25	; 0x02
    2f7c:	89 83       	std	Y+1, r24	; 0x01
    SPIN_LOCK( proc );
    2f7e:	89 81       	ldd	r24, Y+1	; 0x01
    2f80:	9a 81       	ldd	r25, Y+2	; 0x02
    2f82:	83 96       	adiw	r24, 0x23	; 35
    2f84:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
    proc->buf = ((item_t *)proc)->next;
    2f88:	e9 81       	ldd	r30, Y+1	; 0x01
    2f8a:	fa 81       	ldd	r31, Y+2	; 0x02
    2f8c:	80 81       	ld	r24, Z
    2f8e:	91 81       	ldd	r25, Z+1	; 0x01
    2f90:	e9 81       	ldd	r30, Y+1	; 0x01
    2f92:	fa 81       	ldd	r31, Y+2	; 0x02
    2f94:	90 a3       	std	Z+32, r25	; 0x20
    2f96:	87 8f       	std	Z+31, r24	; 0x1f
    item_cut( (item_t *)proc );                  // Вырезать процесс из простого списка гораздо проще, чем из xlist
    2f98:	89 81       	ldd	r24, Y+1	; 0x01
    2f9a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f9c:	0e 94 08 0b 	call	0x1610	; 0x1610 <item_cut>
    _proc_run_( proc );
    2fa0:	89 81       	ldd	r24, Y+1	; 0x01
    2fa2:	9a 81       	ldd	r25, Y+2	; 0x02
    2fa4:	0e 94 02 10 	call	0x2004	; 0x2004 <_proc_run_>
    SPIN_UNLOCK( proc );
    2fa8:	89 81       	ldd	r24, Y+1	; 0x01
    2faa:	9a 81       	ldd	r25, Y+2	; 0x02
    2fac:	83 96       	adiw	r24, 0x23	; 35
    2fae:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
}
    2fb2:	0f 90       	pop	r0
    2fb4:	0f 90       	pop	r0
    2fb6:	cf 91       	pop	r28
    2fb8:	df 91       	pop	r29
    2fba:	08 95       	ret

00002fbc <_sig_wait_epilogue>:

void _sig_wait_epilogue( void )
{
    2fbc:	df 93       	push	r29
    2fbe:	cf 93       	push	r28
    2fc0:	00 d0       	rcall	.+0      	; 0x2fc2 <_sig_wait_epilogue+0x6>
    2fc2:	00 d0       	rcall	.+0      	; 0x2fc4 <_sig_wait_epilogue+0x8>
    2fc4:	cd b7       	in	r28, 0x3d	; 61
    2fc6:	de b7       	in	r29, 0x3e	; 62
    proc_t * proc;
    proc_t * wakeup_proc;
    proc = current_proc();
    2fc8:	0e 94 0a 01 	call	0x214	; 0x214 <current_proc>
    2fcc:	9c 83       	std	Y+4, r25	; 0x04
    2fce:	8b 83       	std	Y+3, r24	; 0x03

    SPIN_LOCK( proc );
    2fd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2fd2:	9c 81       	ldd	r25, Y+4	; 0x04
    2fd4:	83 96       	adiw	r24, 0x23	; 35
    2fd6:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
    wakeup_proc = (proc_t *)proc->buf;
    2fda:	eb 81       	ldd	r30, Y+3	; 0x03
    2fdc:	fc 81       	ldd	r31, Y+4	; 0x04
    2fde:	87 8d       	ldd	r24, Z+31	; 0x1f
    2fe0:	90 a1       	ldd	r25, Z+32	; 0x20
    2fe2:	9a 83       	std	Y+2, r25	; 0x02
    2fe4:	89 83       	std	Y+1, r24	; 0x01
    proc->buf = (void *)0;
    2fe6:	eb 81       	ldd	r30, Y+3	; 0x03
    2fe8:	fc 81       	ldd	r31, Y+4	; 0x04
    2fea:	10 a2       	std	Z+32, r1	; 0x20
    2fec:	17 8e       	std	Z+31, r1	; 0x1f
    SPIN_UNLOCK( proc );
    2fee:	8b 81       	ldd	r24, Y+3	; 0x03
    2ff0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ff2:	83 96       	adiw	r24, 0x23	; 35
    2ff4:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
    // Надо разбудить следующий процесс в списке.
    if( wakeup_proc )
    2ff8:	89 81       	ldd	r24, Y+1	; 0x01
    2ffa:	9a 81       	ldd	r25, Y+2	; 0x02
    2ffc:	00 97       	sbiw	r24, 0x00	; 0
    2ffe:	59 f0       	breq	.+22     	; 0x3016 <_sig_wait_epilogue+0x5a>
    {
        // Если есть другие процессы для пробуждения, то "будим" самый приоритетный из них, он продолжит "побудку".
        if( wakeup_proc != proc )
    3000:	29 81       	ldd	r18, Y+1	; 0x01
    3002:	3a 81       	ldd	r19, Y+2	; 0x02
    3004:	8b 81       	ldd	r24, Y+3	; 0x03
    3006:	9c 81       	ldd	r25, Y+4	; 0x04
    3008:	28 17       	cp	r18, r24
    300a:	39 07       	cpc	r19, r25
    300c:	21 f0       	breq	.+8      	; 0x3016 <_sig_wait_epilogue+0x5a>
        {
            //Нельзя будить себя! Будим только другой процесс!
            _sig_wakeup_list_proc( wakeup_proc );
    300e:	89 81       	ldd	r24, Y+1	; 0x01
    3010:	9a 81       	ldd	r25, Y+2	; 0x02
    3012:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <_sig_wakeup_list_proc>
        }
    }
}
    3016:	0f 90       	pop	r0
    3018:	0f 90       	pop	r0
    301a:	0f 90       	pop	r0
    301c:	0f 90       	pop	r0
    301e:	cf 91       	pop	r28
    3020:	df 91       	pop	r29
    3022:	08 95       	ret

00003024 <sig_signal_isr>:
//========================================================================================
// Будит 1 процесс, для вызова из обработчиков прерываний
void sig_signal_isr( sig_t * sig )
{
    3024:	df 93       	push	r29
    3026:	cf 93       	push	r28
    3028:	cd b7       	in	r28, 0x3d	; 61
    302a:	de b7       	in	r29, 0x3e	; 62
    302c:	29 97       	sbiw	r28, 0x09	; 9
    302e:	0f b6       	in	r0, 0x3f	; 63
    3030:	f8 94       	cli
    3032:	de bf       	out	0x3e, r29	; 62
    3034:	0f be       	out	0x3f, r0	; 63
    3036:	cd bf       	out	0x3d, r28	; 61
    3038:	99 87       	std	Y+9, r25	; 0x09
    303a:	88 87       	std	Y+8, r24	; 0x08
#ifdef CONFIG_MP
    core_id_t core;
    proc_t * proc;
    // Поиск процесса для запуска
    SPIN_LOCK( sig );// Захват блокировки сигнала
    303c:	88 85       	ldd	r24, Y+8	; 0x08
    303e:	99 85       	ldd	r25, Y+9	; 0x09
    3040:	84 96       	adiw	r24, 0x24	; 36
    3042:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
    // Находим самую нагруженную  структуру stat_t в сигнале
    core = sched_highest_load_core( (stat_t *)sig->sig_stat );
    3046:	88 85       	ldd	r24, Y+8	; 0x08
    3048:	99 85       	ldd	r25, Y+9	; 0x09
    304a:	82 96       	adiw	r24, 0x22	; 34
    304c:	0e 94 a0 13 	call	0x2740	; 0x2740 <sched_highest_load_core>
    3050:	8f 83       	std	Y+7, r24	; 0x07
    // Этот процесс мы будем запускать
    {
        xlist_t * sig_list;
        sig_list = (xlist_t *)sig->sig_list + core;
    3052:	48 85       	ldd	r20, Y+8	; 0x08
    3054:	59 85       	ldd	r21, Y+9	; 0x09
    3056:	8f 81       	ldd	r24, Y+7	; 0x07
    3058:	28 2f       	mov	r18, r24
    305a:	30 e0       	ldi	r19, 0x00	; 0
    305c:	c9 01       	movw	r24, r18
    305e:	82 95       	swap	r24
    3060:	92 95       	swap	r25
    3062:	90 7f       	andi	r25, 0xF0	; 240
    3064:	98 27       	eor	r25, r24
    3066:	80 7f       	andi	r24, 0xF0	; 240
    3068:	98 27       	eor	r25, r24
    306a:	82 0f       	add	r24, r18
    306c:	93 1f       	adc	r25, r19
    306e:	84 0f       	add	r24, r20
    3070:	95 1f       	adc	r25, r21
    3072:	9c 83       	std	Y+4, r25	; 0x04
    3074:	8b 83       	std	Y+3, r24	; 0x03
        if(sig_list->index == (index_t)0)
    3076:	eb 81       	ldd	r30, Y+3	; 0x03
    3078:	fc 81       	ldd	r31, Y+4	; 0x04
    307a:	80 89       	ldd	r24, Z+16	; 0x10
    307c:	88 23       	and	r24, r24
    307e:	31 f4       	brne	.+12     	; 0x308c <sig_signal_isr+0x68>
        {
            SPIN_UNLOCK( sig );
    3080:	88 85       	ldd	r24, Y+8	; 0x08
    3082:	99 85       	ldd	r25, Y+9	; 0x09
    3084:	84 96       	adiw	r24, 0x24	; 36
    3086:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
    308a:	62 c0       	rjmp	.+196    	; 0x3150 <sig_signal_isr+0x12c>
            return;
        }
        proc = (proc_t *)xlist_head( sig_list );
    308c:	8b 81       	ldd	r24, Y+3	; 0x03
    308e:	9c 81       	ldd	r25, Y+4	; 0x04
    3090:	0e 94 f2 1b 	call	0x37e4	; 0x37e4 <xlist_head>
    3094:	9e 83       	std	Y+6, r25	; 0x06
    3096:	8d 83       	std	Y+5, r24	; 0x05
    }
    SPIN_LOCK( proc );// Захват блокировки процесса
    3098:	8d 81       	ldd	r24, Y+5	; 0x05
    309a:	9e 81       	ldd	r25, Y+6	; 0x06
    309c:	83 96       	adiw	r24, 0x23	; 35
    309e:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
    // Вырезаем процесс из списка ожидания сигнала
    pitem_fast_cut( (pitem_t *)proc );
    30a2:	8d 81       	ldd	r24, Y+5	; 0x05
    30a4:	9e 81       	ldd	r25, Y+6	; 0x06
    30a6:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <pitem_fast_cut>
    stat_dec( proc, (stat_t *)sig->sig_stat + core );
    30aa:	88 85       	ldd	r24, Y+8	; 0x08
    30ac:	99 85       	ldd	r25, Y+9	; 0x09
    30ae:	9c 01       	movw	r18, r24
    30b0:	2e 5d       	subi	r18, 0xDE	; 222
    30b2:	3f 4f       	sbci	r19, 0xFF	; 255
    30b4:	8f 81       	ldd	r24, Y+7	; 0x07
    30b6:	88 2f       	mov	r24, r24
    30b8:	90 e0       	ldi	r25, 0x00	; 0
    30ba:	28 0f       	add	r18, r24
    30bc:	39 1f       	adc	r19, r25
    30be:	8d 81       	ldd	r24, Y+5	; 0x05
    30c0:	9e 81       	ldd	r25, Y+6	; 0x06
    30c2:	b9 01       	movw	r22, r18
    30c4:	0e 94 82 01 	call	0x304	; 0x304 <stat_dec>
    //Запуск процесса
    // Вставляем его в список ready соответствующего планировщика
    spin_lock( &kernel.stat_lock );
    30c8:	83 e0       	ldi	r24, 0x03	; 3
    30ca:	93 e0       	ldi	r25, 0x03	; 3
    30cc:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
    stat_inc( proc, (stat_t *)kernel.stat + core ); // Обновление статистики
    30d0:	8f 81       	ldd	r24, Y+7	; 0x07
    30d2:	88 2f       	mov	r24, r24
    30d4:	90 e0       	ldi	r25, 0x00	; 0
    30d6:	9c 01       	movw	r18, r24
    30d8:	2f 5f       	subi	r18, 0xFF	; 255
    30da:	3c 4f       	sbci	r19, 0xFC	; 252
    30dc:	8d 81       	ldd	r24, Y+5	; 0x05
    30de:	9e 81       	ldd	r25, Y+6	; 0x06
    30e0:	b9 01       	movw	r22, r18
    30e2:	0e 94 98 01 	call	0x330	; 0x330 <stat_inc>
    spin_unlock( &kernel.stat_lock );
    30e6:	83 e0       	ldi	r24, 0x03	; 3
    30e8:	93 e0       	ldi	r25, 0x03	; 3
    30ea:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
    {
        sched_t * sched;
        sched = kernel.sched + core;// Дада, нагрузка была сбалансирована на этапе постановки в список ожидания
    30ee:	8f 81       	ldd	r24, Y+7	; 0x07
    30f0:	28 2f       	mov	r18, r24
    30f2:	30 e0       	ldi	r19, 0x00	; 0
    30f4:	8b e2       	ldi	r24, 0x2B	; 43
    30f6:	90 e0       	ldi	r25, 0x00	; 0
    30f8:	ac 01       	movw	r20, r24
    30fa:	24 9f       	mul	r18, r20
    30fc:	c0 01       	movw	r24, r0
    30fe:	25 9f       	mul	r18, r21
    3100:	90 0d       	add	r25, r0
    3102:	34 9f       	mul	r19, r20
    3104:	90 0d       	add	r25, r0
    3106:	11 24       	eor	r1, r1
    3108:	85 5b       	subi	r24, 0xB5	; 181
    310a:	9d 4f       	sbci	r25, 0xFD	; 253
    310c:	9a 83       	std	Y+2, r25	; 0x02
    310e:	89 83       	std	Y+1, r24	; 0x01
        SPIN_LOCK( sched );
    3110:	89 81       	ldd	r24, Y+1	; 0x01
    3112:	9a 81       	ldd	r25, Y+2	; 0x02
    3114:	8a 96       	adiw	r24, 0x2a	; 42
    3116:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
        pitem_insert((pitem_t *)proc, sched->ready );
    311a:	8d 81       	ldd	r24, Y+5	; 0x05
    311c:	9e 81       	ldd	r25, Y+6	; 0x06
    311e:	e9 81       	ldd	r30, Y+1	; 0x01
    3120:	fa 81       	ldd	r31, Y+2	; 0x02
    3122:	22 81       	ldd	r18, Z+2	; 0x02
    3124:	33 81       	ldd	r19, Z+3	; 0x03
    3126:	b9 01       	movw	r22, r18
    3128:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <pitem_insert>
        SPIN_UNLOCK( sched );
    312c:	89 81       	ldd	r24, Y+1	; 0x01
    312e:	9a 81       	ldd	r25, Y+2	; 0x02
    3130:	8a 96       	adiw	r24, 0x2a	; 42
    3132:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
    }
    resched(core);// Перепланировка
    3136:	8f 81       	ldd	r24, Y+7	; 0x07
    3138:	0e 94 de 01 	call	0x3bc	; 0x3bc <resched>
    SPIN_UNLOCK( proc );// Освобождение блокировки процесса
    313c:	8d 81       	ldd	r24, Y+5	; 0x05
    313e:	9e 81       	ldd	r25, Y+6	; 0x06
    3140:	83 96       	adiw	r24, 0x23	; 35
    3142:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
    SPIN_UNLOCK( sig );// Освобождение блокировки сигнала
    3146:	88 85       	ldd	r24, Y+8	; 0x08
    3148:	99 85       	ldd	r25, Y+9	; 0x09
    314a:	84 96       	adiw	r24, 0x24	; 36
    314c:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
    proc = (proc_t *)xlist_head( (xlist_t *)sig );
    pitem_fast_cut( (pitem_t *)proc );
    pitem_insert( (pitem_t *)proc, kernel.sched.ready );
    resched();
#endif //CONFIG_MP
}
    3150:	29 96       	adiw	r28, 0x09	; 9
    3152:	0f b6       	in	r0, 0x3f	; 63
    3154:	f8 94       	cli
    3156:	de bf       	out	0x3e, r29	; 62
    3158:	0f be       	out	0x3f, r0	; 63
    315a:	cd bf       	out	0x3d, r28	; 61
    315c:	cf 91       	pop	r28
    315e:	df 91       	pop	r29
    3160:	08 95       	ret

00003162 <sig_broadcast_isr>:
//----------------------------------------------------------------------------------------
// Будит все ожидающие процессы
void sig_broadcast_isr( sig_t * sig )
{
    3162:	df 93       	push	r29
    3164:	cf 93       	push	r28
    3166:	00 d0       	rcall	.+0      	; 0x3168 <sig_broadcast_isr+0x6>
    3168:	00 d0       	rcall	.+0      	; 0x316a <sig_broadcast_isr+0x8>
    316a:	0f 92       	push	r0
    316c:	cd b7       	in	r28, 0x3d	; 61
    316e:	de b7       	in	r29, 0x3e	; 62
    3170:	9d 83       	std	Y+5, r25	; 0x05
    3172:	8c 83       	std	Y+4, r24	; 0x04
#ifdef CONFIG_MP
    core_id_t core;
    SPIN_LOCK( sig );
    3174:	8c 81       	ldd	r24, Y+4	; 0x04
    3176:	9d 81       	ldd	r25, Y+5	; 0x05
    3178:	84 96       	adiw	r24, 0x24	; 36
    317a:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
    for(core = 0; core < (core_id_t)MAX_CORES; core++)
    317e:	1b 82       	std	Y+3, r1	; 0x03
    3180:	3f c0       	rjmp	.+126    	; 0x3200 <sig_broadcast_isr+0x9e>
        proc_t * wakeup_proc;
        /*
        Фактически процессы еще не поставлены на выполнение,
        но обязательно будут, это надо учитывать при баланисировке нагрузки.
        */
        spin_lock( &kernel.stat_lock );
    3182:	83 e0       	ldi	r24, 0x03	; 3
    3184:	93 e0       	ldi	r25, 0x03	; 3
    3186:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
        stat_merge( (stat_t *)sig->sig_stat + core, (stat_t *)kernel.stat + core );
    318a:	8c 81       	ldd	r24, Y+4	; 0x04
    318c:	9d 81       	ldd	r25, Y+5	; 0x05
    318e:	9c 01       	movw	r18, r24
    3190:	2e 5d       	subi	r18, 0xDE	; 222
    3192:	3f 4f       	sbci	r19, 0xFF	; 255
    3194:	8b 81       	ldd	r24, Y+3	; 0x03
    3196:	88 2f       	mov	r24, r24
    3198:	90 e0       	ldi	r25, 0x00	; 0
    319a:	a9 01       	movw	r20, r18
    319c:	48 0f       	add	r20, r24
    319e:	59 1f       	adc	r21, r25
    31a0:	8b 81       	ldd	r24, Y+3	; 0x03
    31a2:	88 2f       	mov	r24, r24
    31a4:	90 e0       	ldi	r25, 0x00	; 0
    31a6:	9c 01       	movw	r18, r24
    31a8:	2f 5f       	subi	r18, 0xFF	; 255
    31aa:	3c 4f       	sbci	r19, 0xFC	; 252
    31ac:	ca 01       	movw	r24, r20
    31ae:	b9 01       	movw	r22, r18
    31b0:	0e 94 ae 01 	call	0x35c	; 0x35c <stat_merge>
        spin_unlock( &kernel.stat_lock );
    31b4:	83 e0       	ldi	r24, 0x03	; 3
    31b6:	93 e0       	ldi	r25, 0x03	; 3
    31b8:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
        /*
        Сцепляем список и будим его голову.
        */
        wakeup_proc = (proc_t *)pitem_xlist_chain( (xlist_t *)sig + core );
    31bc:	4c 81       	ldd	r20, Y+4	; 0x04
    31be:	5d 81       	ldd	r21, Y+5	; 0x05
    31c0:	8b 81       	ldd	r24, Y+3	; 0x03
    31c2:	28 2f       	mov	r18, r24
    31c4:	30 e0       	ldi	r19, 0x00	; 0
    31c6:	c9 01       	movw	r24, r18
    31c8:	82 95       	swap	r24
    31ca:	92 95       	swap	r25
    31cc:	90 7f       	andi	r25, 0xF0	; 240
    31ce:	98 27       	eor	r25, r24
    31d0:	80 7f       	andi	r24, 0xF0	; 240
    31d2:	98 27       	eor	r25, r24
    31d4:	82 0f       	add	r24, r18
    31d6:	93 1f       	adc	r25, r19
    31d8:	84 0f       	add	r24, r20
    31da:	95 1f       	adc	r25, r21
    31dc:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <pitem_xlist_chain>
    31e0:	9a 83       	std	Y+2, r25	; 0x02
    31e2:	89 83       	std	Y+1, r24	; 0x01
        if( wakeup_proc )
    31e4:	89 81       	ldd	r24, Y+1	; 0x01
    31e6:	9a 81       	ldd	r25, Y+2	; 0x02
    31e8:	00 97       	sbiw	r24, 0x00	; 0
    31ea:	21 f0       	breq	.+8      	; 0x31f4 <sig_broadcast_isr+0x92>
        {
            _sig_wakeup_list_proc( wakeup_proc );
    31ec:	89 81       	ldd	r24, Y+1	; 0x01
    31ee:	9a 81       	ldd	r25, Y+2	; 0x02
    31f0:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <_sig_wakeup_list_proc>
        }

        resched(core);
    31f4:	8b 81       	ldd	r24, Y+3	; 0x03
    31f6:	0e 94 de 01 	call	0x3bc	; 0x3bc <resched>
void sig_broadcast_isr( sig_t * sig )
{
#ifdef CONFIG_MP
    core_id_t core;
    SPIN_LOCK( sig );
    for(core = 0; core < (core_id_t)MAX_CORES; core++)
    31fa:	8b 81       	ldd	r24, Y+3	; 0x03
    31fc:	8f 5f       	subi	r24, 0xFF	; 255
    31fe:	8b 83       	std	Y+3, r24	; 0x03
    3200:	8b 81       	ldd	r24, Y+3	; 0x03
    3202:	82 30       	cpi	r24, 0x02	; 2
    3204:	08 f4       	brcc	.+2      	; 0x3208 <sig_broadcast_isr+0xa6>
    3206:	bd cf       	rjmp	.-134    	; 0x3182 <sig_broadcast_isr+0x20>
            _sig_wakeup_list_proc( wakeup_proc );
        }

        resched(core);
    }
    SPIN_UNLOCK( sig );
    3208:	8c 81       	ldd	r24, Y+4	; 0x04
    320a:	9d 81       	ldd	r25, Y+5	; 0x05
    320c:	84 96       	adiw	r24, 0x24	; 36
    320e:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
        _sig_wakeup_list_proc( wakeup_proc );
    }

    resched();
#endif //CONFIG_MP
}
    3212:	0f 90       	pop	r0
    3214:	0f 90       	pop	r0
    3216:	0f 90       	pop	r0
    3218:	0f 90       	pop	r0
    321a:	0f 90       	pop	r0
    321c:	cf 91       	pop	r28
    321e:	df 91       	pop	r29
    3220:	08 95       	ret

00003222 <do_syscall>:
syscall_t syscall_num = (syscall_t)0;
void * syscall_arg = (void *)0;

void do_syscall( void )
#endif // CONFIG_MP
{
    3222:	df 93       	push	r29
    3224:	cf 93       	push	r28
    3226:	cd b7       	in	r28, 0x3d	; 61
    3228:	de b7       	in	r29, 0x3e	; 62
    322a:	27 97       	sbiw	r28, 0x07	; 7
    322c:	0f b6       	in	r0, 0x3f	; 63
    322e:	f8 94       	cli
    3230:	de bf       	out	0x3e, r29	; 62
    3232:	0f be       	out	0x3f, r0	; 63
    3234:	cd bf       	out	0x3d, r28	; 61
    3236:	8d 83       	std	Y+5, r24	; 0x05
    3238:	7f 83       	std	Y+7, r23	; 0x07
    323a:	6e 83       	std	Y+6, r22	; 0x06
    if( syscall_num != (syscall_t)0 )
    323c:	8d 81       	ldd	r24, Y+5	; 0x05
    323e:	88 23       	and	r24, r24
    3240:	e1 f0       	breq	.+56     	; 0x327a <do_syscall+0x58>
    {
        syscall_num--;
    3242:	8d 81       	ldd	r24, Y+5	; 0x05
    3244:	81 50       	subi	r24, 0x01	; 1
    3246:	8d 83       	std	Y+5, r24	; 0x05
        (SYSCALL_TABLE_READ(syscall_routine[syscall_num]))(syscall_arg);
    3248:	8d 81       	ldd	r24, Y+5	; 0x05
    324a:	88 2f       	mov	r24, r24
    324c:	90 e0       	ldi	r25, 0x00	; 0
    324e:	88 0f       	add	r24, r24
    3250:	99 1f       	adc	r25, r25
    3252:	88 59       	subi	r24, 0x98	; 152
    3254:	9f 4f       	sbci	r25, 0xFF	; 255
    3256:	9c 83       	std	Y+4, r25	; 0x04
    3258:	8b 83       	std	Y+3, r24	; 0x03
    325a:	8b 81       	ldd	r24, Y+3	; 0x03
    325c:	9c 81       	ldd	r25, Y+4	; 0x04
    325e:	fc 01       	movw	r30, r24
    3260:	85 91       	lpm	r24, Z+
    3262:	94 91       	lpm	r25, Z+
    3264:	9a 83       	std	Y+2, r25	; 0x02
    3266:	89 83       	std	Y+1, r24	; 0x01
    3268:	fc 83       	std	Y+4, r31	; 0x04
    326a:	eb 83       	std	Y+3, r30	; 0x03
    326c:	89 81       	ldd	r24, Y+1	; 0x01
    326e:	9a 81       	ldd	r25, Y+2	; 0x02
    3270:	fc 01       	movw	r30, r24
    3272:	8e 81       	ldd	r24, Y+6	; 0x06
    3274:	9f 81       	ldd	r25, Y+7	; 0x07
    3276:	09 95       	icall
        syscall_num = (syscall_t)0;
    3278:	1d 82       	std	Y+5, r1	; 0x05
    }
}
    327a:	27 96       	adiw	r28, 0x07	; 7
    327c:	0f b6       	in	r0, 0x3f	; 63
    327e:	f8 94       	cli
    3280:	de bf       	out	0x3e, r29	; 62
    3282:	0f be       	out	0x3f, r0	; 63
    3284:	cd bf       	out	0x3d, r28	; 61
    3286:	cf 91       	pop	r28
    3288:	df 91       	pop	r29
    328a:	08 95       	ret

0000328c <scall_proc_init>:
***********************************************************************************************
                                    Process control !!!
**********************************************************************************************/
/// SYSCALL_PROC_INIT
void scall_proc_init( void * arg )
{
    328c:	8f 92       	push	r8
    328e:	9f 92       	push	r9
    3290:	af 92       	push	r10
    3292:	bf 92       	push	r11
    3294:	cf 92       	push	r12
    3296:	df 92       	push	r13
    3298:	ef 92       	push	r14
    329a:	ff 92       	push	r15
    329c:	0f 93       	push	r16
    329e:	1f 93       	push	r17
    32a0:	df 93       	push	r29
    32a2:	cf 93       	push	r28
    32a4:	00 d0       	rcall	.+0      	; 0x32a6 <scall_proc_init+0x1a>
    32a6:	cd b7       	in	r28, 0x3d	; 61
    32a8:	de b7       	in	r29, 0x3e	; 62
    32aa:	9a 83       	std	Y+2, r25	; 0x02
    32ac:	89 83       	std	Y+1, r24	; 0x01
    proc_init_isr(
    32ae:	e9 81       	ldd	r30, Y+1	; 0x01
    32b0:	fa 81       	ldd	r31, Y+2	; 0x02
    32b2:	40 81       	ld	r20, Z
    32b4:	51 81       	ldd	r21, Z+1	; 0x01
    32b6:	e9 81       	ldd	r30, Y+1	; 0x01
    32b8:	fa 81       	ldd	r31, Y+2	; 0x02
    32ba:	62 81       	ldd	r22, Z+2	; 0x02
    32bc:	73 81       	ldd	r23, Z+3	; 0x03
    32be:	e9 81       	ldd	r30, Y+1	; 0x01
    32c0:	fa 81       	ldd	r31, Y+2	; 0x02
    32c2:	24 81       	ldd	r18, Z+4	; 0x04
    32c4:	35 81       	ldd	r19, Z+5	; 0x05
    32c6:	e9 81       	ldd	r30, Y+1	; 0x01
    32c8:	fa 81       	ldd	r31, Y+2	; 0x02
    32ca:	a6 81       	ldd	r26, Z+6	; 0x06
    32cc:	b7 81       	ldd	r27, Z+7	; 0x07
    32ce:	e9 81       	ldd	r30, Y+1	; 0x01
    32d0:	fa 81       	ldd	r31, Y+2	; 0x02
    32d2:	00 85       	ldd	r16, Z+8	; 0x08
    32d4:	11 85       	ldd	r17, Z+9	; 0x09
    32d6:	e9 81       	ldd	r30, Y+1	; 0x01
    32d8:	fa 81       	ldd	r31, Y+2	; 0x02
    32da:	e2 84       	ldd	r14, Z+10	; 0x0a
    32dc:	f3 84       	ldd	r15, Z+11	; 0x0b
    32de:	e9 81       	ldd	r30, Y+1	; 0x01
    32e0:	fa 81       	ldd	r31, Y+2	; 0x02
    32e2:	d4 84       	ldd	r13, Z+12	; 0x0c
    32e4:	e9 81       	ldd	r30, Y+1	; 0x01
    32e6:	fa 81       	ldd	r31, Y+2	; 0x02
    32e8:	a5 84       	ldd	r10, Z+13	; 0x0d
    32ea:	b6 84       	ldd	r11, Z+14	; 0x0e
    32ec:	e9 81       	ldd	r30, Y+1	; 0x01
    32ee:	fa 81       	ldd	r31, Y+2	; 0x02
    32f0:	97 84       	ldd	r9, Z+15	; 0x0f
    32f2:	e9 81       	ldd	r30, Y+1	; 0x01
    32f4:	fa 81       	ldd	r31, Y+2	; 0x02
    32f6:	80 89       	ldd	r24, Z+16	; 0x10
    32f8:	0f 92       	push	r0
    32fa:	ed b7       	in	r30, 0x3d	; 61
    32fc:	fe b7       	in	r31, 0x3e	; 62
    32fe:	31 96       	adiw	r30, 0x01	; 1
    3300:	80 83       	st	Z, r24
    3302:	ca 01       	movw	r24, r20
    3304:	a9 01       	movw	r20, r18
    3306:	9d 01       	movw	r18, r26
    3308:	cd 2c       	mov	r12, r13
    330a:	89 2c       	mov	r8, r9
    330c:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <proc_init_isr>
    3310:	0f 90       	pop	r0
              ((proc_init_arg_t *)arg)->is_rt
#ifdef CONFIG_MP
              ,((proc_init_arg_t *)arg)-> affinity
#endif // CONFIG_MP
              );
}
    3312:	0f 90       	pop	r0
    3314:	0f 90       	pop	r0
    3316:	cf 91       	pop	r28
    3318:	df 91       	pop	r29
    331a:	1f 91       	pop	r17
    331c:	0f 91       	pop	r16
    331e:	ff 90       	pop	r15
    3320:	ef 90       	pop	r14
    3322:	df 90       	pop	r13
    3324:	cf 90       	pop	r12
    3326:	bf 90       	pop	r11
    3328:	af 90       	pop	r10
    332a:	9f 90       	pop	r9
    332c:	8f 90       	pop	r8
    332e:	08 95       	ret

00003330 <scall_proc_run>:
}
/**********************************************************************************************
                                       SYSCALL_PROC_RUN
**********************************************************************************************/
void scall_proc_run( void * arg )
{
    3330:	0f 93       	push	r16
    3332:	1f 93       	push	r17
    3334:	df 93       	push	r29
    3336:	cf 93       	push	r28
    3338:	00 d0       	rcall	.+0      	; 0x333a <scall_proc_run+0xa>
    333a:	cd b7       	in	r28, 0x3d	; 61
    333c:	de b7       	in	r29, 0x3e	; 62
    333e:	9a 83       	std	Y+2, r25	; 0x02
    3340:	89 83       	std	Y+1, r24	; 0x01
    ((proc_runtime_arg_t *)arg)->ret = proc_run_isr( ((proc_runtime_arg_t *)arg)->proc );
    3342:	09 81       	ldd	r16, Y+1	; 0x01
    3344:	1a 81       	ldd	r17, Y+2	; 0x02
    3346:	e9 81       	ldd	r30, Y+1	; 0x01
    3348:	fa 81       	ldd	r31, Y+2	; 0x02
    334a:	80 81       	ld	r24, Z
    334c:	91 81       	ldd	r25, Z+1	; 0x01
    334e:	0e 94 74 10 	call	0x20e8	; 0x20e8 <proc_run_isr>
    3352:	f8 01       	movw	r30, r16
    3354:	82 83       	std	Z+2, r24	; 0x02
}
    3356:	0f 90       	pop	r0
    3358:	0f 90       	pop	r0
    335a:	cf 91       	pop	r28
    335c:	df 91       	pop	r29
    335e:	1f 91       	pop	r17
    3360:	0f 91       	pop	r16
    3362:	08 95       	ret

00003364 <scall_proc_restart>:
}
/**********************************************************************************************
                                       SYSCALL_PROC_RESTART
**********************************************************************************************/
void scall_proc_restart( void * arg )
{
    3364:	0f 93       	push	r16
    3366:	1f 93       	push	r17
    3368:	df 93       	push	r29
    336a:	cf 93       	push	r28
    336c:	00 d0       	rcall	.+0      	; 0x336e <scall_proc_restart+0xa>
    336e:	cd b7       	in	r28, 0x3d	; 61
    3370:	de b7       	in	r29, 0x3e	; 62
    3372:	9a 83       	std	Y+2, r25	; 0x02
    3374:	89 83       	std	Y+1, r24	; 0x01
    ((proc_runtime_arg_t *)arg)->ret = proc_restart_isr( ((proc_runtime_arg_t *)arg)->proc );
    3376:	09 81       	ldd	r16, Y+1	; 0x01
    3378:	1a 81       	ldd	r17, Y+2	; 0x02
    337a:	e9 81       	ldd	r30, Y+1	; 0x01
    337c:	fa 81       	ldd	r31, Y+2	; 0x02
    337e:	80 81       	ld	r24, Z
    3380:	91 81       	ldd	r25, Z+1	; 0x01
    3382:	0e 94 9d 10 	call	0x213a	; 0x213a <proc_restart_isr>
    3386:	f8 01       	movw	r30, r16
    3388:	82 83       	std	Z+2, r24	; 0x02
}
    338a:	0f 90       	pop	r0
    338c:	0f 90       	pop	r0
    338e:	cf 91       	pop	r28
    3390:	df 91       	pop	r29
    3392:	1f 91       	pop	r17
    3394:	0f 91       	pop	r16
    3396:	08 95       	ret

00003398 <scall_proc_stop>:
}
/**********************************************************************************************
                                        SYSCALL_PROC_STOP
**********************************************************************************************/
void scall_proc_stop( void * arg )
{
    3398:	0f 93       	push	r16
    339a:	1f 93       	push	r17
    339c:	df 93       	push	r29
    339e:	cf 93       	push	r28
    33a0:	00 d0       	rcall	.+0      	; 0x33a2 <scall_proc_stop+0xa>
    33a2:	cd b7       	in	r28, 0x3d	; 61
    33a4:	de b7       	in	r29, 0x3e	; 62
    33a6:	9a 83       	std	Y+2, r25	; 0x02
    33a8:	89 83       	std	Y+1, r24	; 0x01
    ((proc_runtime_arg_t *)arg)->ret = proc_stop_isr( ((proc_runtime_arg_t *)arg)->proc );
    33aa:	09 81       	ldd	r16, Y+1	; 0x01
    33ac:	1a 81       	ldd	r17, Y+2	; 0x02
    33ae:	e9 81       	ldd	r30, Y+1	; 0x01
    33b0:	fa 81       	ldd	r31, Y+2	; 0x02
    33b2:	80 81       	ld	r24, Z
    33b4:	91 81       	ldd	r25, Z+1	; 0x01
    33b6:	0e 94 62 11 	call	0x22c4	; 0x22c4 <proc_stop_isr>
    33ba:	f8 01       	movw	r30, r16
    33bc:	82 83       	std	Z+2, r24	; 0x02
}
    33be:	0f 90       	pop	r0
    33c0:	0f 90       	pop	r0
    33c2:	cf 91       	pop	r28
    33c4:	df 91       	pop	r29
    33c6:	1f 91       	pop	r17
    33c8:	0f 91       	pop	r16
    33ca:	08 95       	ret

000033cc <scall_proc_self_stop>:
}
/**********************************************************************************************
                                    SYSCALL_PROC_SELF_STOP
**********************************************************************************************/
void scall_proc_self_stop( void * arg )
{
    33cc:	df 93       	push	r29
    33ce:	cf 93       	push	r28
    33d0:	00 d0       	rcall	.+0      	; 0x33d2 <scall_proc_self_stop+0x6>
    33d2:	00 d0       	rcall	.+0      	; 0x33d4 <scall_proc_self_stop+0x8>
    33d4:	cd b7       	in	r28, 0x3d	; 61
    33d6:	de b7       	in	r29, 0x3e	; 62
    33d8:	9c 83       	std	Y+4, r25	; 0x04
    33da:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = current_proc();
    33dc:	0e 94 0a 01 	call	0x214	; 0x214 <current_proc>
    33e0:	9a 83       	std	Y+2, r25	; 0x02
    33e2:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
    33e4:	89 81       	ldd	r24, Y+1	; 0x01
    33e6:	9a 81       	ldd	r25, Y+2	; 0x02
    33e8:	83 96       	adiw	r24, 0x23	; 35
    33ea:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
#endif
    _proc_stop( proc );
    33ee:	89 81       	ldd	r24, Y+1	; 0x01
    33f0:	9a 81       	ldd	r25, Y+2	; 0x02
    33f2:	0e 94 44 11 	call	0x2288	; 0x2288 <_proc_stop>
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
    33f6:	89 81       	ldd	r24, Y+1	; 0x01
    33f8:	9a 81       	ldd	r25, Y+2	; 0x02
    33fa:	83 96       	adiw	r24, 0x23	; 35
    33fc:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
#endif
}
    3400:	0f 90       	pop	r0
    3402:	0f 90       	pop	r0
    3404:	0f 90       	pop	r0
    3406:	0f 90       	pop	r0
    3408:	cf 91       	pop	r28
    340a:	df 91       	pop	r29
    340c:	08 95       	ret

0000340e <scall_proc_terminate>:
/**********************************************************************************************
                                    SYSCALL_PROC_TERMINATE
**********************************************************************************************/
// Останов процесса после выхода из pmain, для обертки proc_run_wrapper
void scall_proc_terminate( void * arg )
{
    340e:	df 93       	push	r29
    3410:	cf 93       	push	r28
    3412:	00 d0       	rcall	.+0      	; 0x3414 <scall_proc_terminate+0x6>
    3414:	cd b7       	in	r28, 0x3d	; 61
    3416:	de b7       	in	r29, 0x3e	; 62
    3418:	9a 83       	std	Y+2, r25	; 0x02
    341a:	89 83       	std	Y+1, r24	; 0x01
    _proc_terminate((proc_t *)arg);
    341c:	89 81       	ldd	r24, Y+1	; 0x01
    341e:	9a 81       	ldd	r25, Y+2	; 0x02
    3420:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_proc_terminate>
}
    3424:	0f 90       	pop	r0
    3426:	0f 90       	pop	r0
    3428:	cf 91       	pop	r28
    342a:	df 91       	pop	r29
    342c:	08 95       	ret

0000342e <proc_run_wrapper>:
void proc_run_wrapper( proc_t * proc )
{
    342e:	df 93       	push	r29
    3430:	cf 93       	push	r28
    3432:	00 d0       	rcall	.+0      	; 0x3434 <proc_run_wrapper+0x6>
    3434:	00 d0       	rcall	.+0      	; 0x3436 <proc_run_wrapper+0x8>
    3436:	00 d0       	rcall	.+0      	; 0x3438 <proc_run_wrapper+0xa>
    3438:	cd b7       	in	r28, 0x3d	; 61
    343a:	de b7       	in	r29, 0x3e	; 62
    343c:	9e 83       	std	Y+6, r25	; 0x06
    343e:	8d 83       	std	Y+5, r24	; 0x05
    code_t pmain;
    void * arg;
    //Атомарно читаем pmain и arg
    disable_interrupts();
    3440:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <disable_interrupts>
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
    3444:	8d 81       	ldd	r24, Y+5	; 0x05
    3446:	9e 81       	ldd	r25, Y+6	; 0x06
    3448:	83 96       	adiw	r24, 0x23	; 35
    344a:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
#endif // CONFIG_MP
    pmain = proc->pmain;
    344e:	ed 81       	ldd	r30, Y+5	; 0x05
    3450:	fe 81       	ldd	r31, Y+6	; 0x06
    3452:	84 a1       	ldd	r24, Z+36	; 0x24
    3454:	95 a1       	ldd	r25, Z+37	; 0x25
    3456:	9c 83       	std	Y+4, r25	; 0x04
    3458:	8b 83       	std	Y+3, r24	; 0x03
    arg = proc->arg;
    345a:	ed 81       	ldd	r30, Y+5	; 0x05
    345c:	fe 81       	ldd	r31, Y+6	; 0x06
    345e:	82 a5       	ldd	r24, Z+42	; 0x2a
    3460:	93 a5       	ldd	r25, Z+43	; 0x2b
    3462:	9a 83       	std	Y+2, r25	; 0x02
    3464:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
    3466:	8d 81       	ldd	r24, Y+5	; 0x05
    3468:	9e 81       	ldd	r25, Y+6	; 0x06
    346a:	83 96       	adiw	r24, 0x23	; 35
    346c:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
#endif // CONFIG_MP
    enable_interrupts();
    3470:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <enable_interrupts>
    //Выполняем pmain
    pmain( arg );
    3474:	89 81       	ldd	r24, Y+1	; 0x01
    3476:	9a 81       	ldd	r25, Y+2	; 0x02
    3478:	eb 81       	ldd	r30, Y+3	; 0x03
    347a:	fc 81       	ldd	r31, Y+4	; 0x04
    347c:	09 95       	icall
    // Завершаем процесс
    syscall_bugurt( SYSCALL_PROC_TERMINATE, (void *)proc );
    347e:	2d 81       	ldd	r18, Y+5	; 0x05
    3480:	3e 81       	ldd	r19, Y+6	; 0x06
    3482:	86 e0       	ldi	r24, 0x06	; 6
    3484:	b9 01       	movw	r22, r18
    3486:	0e 94 7d 04 	call	0x8fa	; 0x8fa <syscall_bugurt>
}
    348a:	26 96       	adiw	r28, 0x06	; 6
    348c:	0f b6       	in	r0, 0x3f	; 63
    348e:	f8 94       	cli
    3490:	de bf       	out	0x3e, r29	; 62
    3492:	0f be       	out	0x3f, r0	; 63
    3494:	cd bf       	out	0x3d, r28	; 61
    3496:	cf 91       	pop	r28
    3498:	df 91       	pop	r29
    349a:	08 95       	ret

0000349c <scall_proc_flag_stop>:
/**********************************************************************************************
                                       SYSCALL_PROC_FLAG_STOP
**********************************************************************************************/
void scall_proc_flag_stop( void * arg )
{
    349c:	df 93       	push	r29
    349e:	cf 93       	push	r28
    34a0:	00 d0       	rcall	.+0      	; 0x34a2 <scall_proc_flag_stop+0x6>
    34a2:	cd b7       	in	r28, 0x3d	; 61
    34a4:	de b7       	in	r29, 0x3e	; 62
    34a6:	9a 83       	std	Y+2, r25	; 0x02
    34a8:	89 83       	std	Y+1, r24	; 0x01
    _proc_flag_stop( *((flag_t *)arg) );
    34aa:	e9 81       	ldd	r30, Y+1	; 0x01
    34ac:	fa 81       	ldd	r31, Y+2	; 0x02
    34ae:	80 81       	ld	r24, Z
    34b0:	91 81       	ldd	r25, Z+1	; 0x01
    34b2:	0e 94 9c 11 	call	0x2338	; 0x2338 <_proc_flag_stop>
}
    34b6:	0f 90       	pop	r0
    34b8:	0f 90       	pop	r0
    34ba:	cf 91       	pop	r28
    34bc:	df 91       	pop	r29
    34be:	08 95       	ret

000034c0 <scall_proc_reset_watchdog>:
}
/**********************************************************************************************
                                       SYSCALL_PROC_RESET_WATCHDOG
**********************************************************************************************/
void scall_proc_reset_watchdog( void * arg )
{
    34c0:	df 93       	push	r29
    34c2:	cf 93       	push	r28
    34c4:	00 d0       	rcall	.+0      	; 0x34c6 <scall_proc_reset_watchdog+0x6>
    34c6:	cd b7       	in	r28, 0x3d	; 61
    34c8:	de b7       	in	r29, 0x3e	; 62
    34ca:	9a 83       	std	Y+2, r25	; 0x02
    34cc:	89 83       	std	Y+1, r24	; 0x01
    _proc_reset_watchdog();
    34ce:	0e 94 27 12 	call	0x244e	; 0x244e <_proc_reset_watchdog>
}
    34d2:	0f 90       	pop	r0
    34d4:	0f 90       	pop	r0
    34d6:	cf 91       	pop	r28
    34d8:	df 91       	pop	r29
    34da:	08 95       	ret

000034dc <scall_sig_init>:
                                            Сигналы
***********************************************************************************************
                                      SYSCALL_PROC_RESTART
**********************************************************************************************/
void scall_sig_init( void * arg )
{
    34dc:	df 93       	push	r29
    34de:	cf 93       	push	r28
    34e0:	00 d0       	rcall	.+0      	; 0x34e2 <scall_sig_init+0x6>
    34e2:	cd b7       	in	r28, 0x3d	; 61
    34e4:	de b7       	in	r29, 0x3e	; 62
    34e6:	9a 83       	std	Y+2, r25	; 0x02
    34e8:	89 83       	std	Y+1, r24	; 0x01
    sig_init_isr( (sig_t *)arg );
    34ea:	89 81       	ldd	r24, Y+1	; 0x01
    34ec:	9a 81       	ldd	r25, Y+2	; 0x02
    34ee:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <sig_init_isr>
}
    34f2:	0f 90       	pop	r0
    34f4:	0f 90       	pop	r0
    34f6:	cf 91       	pop	r28
    34f8:	df 91       	pop	r29
    34fa:	08 95       	ret

000034fc <scall_sig_wait>:
}
/**********************************************************************************************
                                       SYSCALL_SIG_WAIT
**********************************************************************************************/
void scall_sig_wait( void * arg )
{
    34fc:	df 93       	push	r29
    34fe:	cf 93       	push	r28
    3500:	00 d0       	rcall	.+0      	; 0x3502 <scall_sig_wait+0x6>
    3502:	cd b7       	in	r28, 0x3d	; 61
    3504:	de b7       	in	r29, 0x3e	; 62
    3506:	9a 83       	std	Y+2, r25	; 0x02
    3508:	89 83       	std	Y+1, r24	; 0x01
    _sig_wait_prologue( (sig_t *)arg );
    350a:	89 81       	ldd	r24, Y+1	; 0x01
    350c:	9a 81       	ldd	r25, Y+2	; 0x02
    350e:	0e 94 48 17 	call	0x2e90	; 0x2e90 <_sig_wait_prologue>
}
    3512:	0f 90       	pop	r0
    3514:	0f 90       	pop	r0
    3516:	cf 91       	pop	r28
    3518:	df 91       	pop	r29
    351a:	08 95       	ret

0000351c <scall_sig_wakeup>:
/**********************************************************************************************
                                       SYSCALL_SIG_WAKEUP
**********************************************************************************************/
void scall_sig_wakeup( void *arg )
{
    351c:	df 93       	push	r29
    351e:	cf 93       	push	r28
    3520:	00 d0       	rcall	.+0      	; 0x3522 <scall_sig_wakeup+0x6>
    3522:	cd b7       	in	r28, 0x3d	; 61
    3524:	de b7       	in	r29, 0x3e	; 62
    3526:	9a 83       	std	Y+2, r25	; 0x02
    3528:	89 83       	std	Y+1, r24	; 0x01
    _sig_wait_epilogue();
    352a:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <_sig_wait_epilogue>
    _proc_flag_stop( PROC_FLG_WAIT );
    352e:	80 e2       	ldi	r24, 0x20	; 32
    3530:	90 e0       	ldi	r25, 0x00	; 0
    3532:	0e 94 9c 11 	call	0x2338	; 0x2338 <_proc_flag_stop>
}
    3536:	0f 90       	pop	r0
    3538:	0f 90       	pop	r0
    353a:	cf 91       	pop	r28
    353c:	df 91       	pop	r29
    353e:	08 95       	ret

00003540 <scall_sig_signal>:
}
/**********************************************************************************************
                                       SYSCALL_SIG_SIGNAL
**********************************************************************************************/
void scall_sig_signal( void * arg )
{
    3540:	df 93       	push	r29
    3542:	cf 93       	push	r28
    3544:	00 d0       	rcall	.+0      	; 0x3546 <scall_sig_signal+0x6>
    3546:	cd b7       	in	r28, 0x3d	; 61
    3548:	de b7       	in	r29, 0x3e	; 62
    354a:	9a 83       	std	Y+2, r25	; 0x02
    354c:	89 83       	std	Y+1, r24	; 0x01
    sig_signal_isr( (sig_t *)arg );
    354e:	89 81       	ldd	r24, Y+1	; 0x01
    3550:	9a 81       	ldd	r25, Y+2	; 0x02
    3552:	0e 94 12 18 	call	0x3024	; 0x3024 <sig_signal_isr>
}
    3556:	0f 90       	pop	r0
    3558:	0f 90       	pop	r0
    355a:	cf 91       	pop	r28
    355c:	df 91       	pop	r29
    355e:	08 95       	ret

00003560 <scall_sig_broadcast>:
}
/**********************************************************************************************
                                       SYSCALL_SIG_BROADCAST
**********************************************************************************************/
void scall_sig_broadcast( void * arg )
{
    3560:	df 93       	push	r29
    3562:	cf 93       	push	r28
    3564:	00 d0       	rcall	.+0      	; 0x3566 <scall_sig_broadcast+0x6>
    3566:	cd b7       	in	r28, 0x3d	; 61
    3568:	de b7       	in	r29, 0x3e	; 62
    356a:	9a 83       	std	Y+2, r25	; 0x02
    356c:	89 83       	std	Y+1, r24	; 0x01
    sig_broadcast_isr( (sig_t *)arg );
    356e:	89 81       	ldd	r24, Y+1	; 0x01
    3570:	9a 81       	ldd	r25, Y+2	; 0x02
    3572:	0e 94 b1 18 	call	0x3162	; 0x3162 <sig_broadcast_isr>
}
    3576:	0f 90       	pop	r0
    3578:	0f 90       	pop	r0
    357a:	cf 91       	pop	r28
    357c:	df 91       	pop	r29
    357e:	08 95       	ret

00003580 <scall_sem_init>:
                                           Семафоры
***********************************************************************************************
                                       SYSCALL_SEM_INIT
**********************************************************************************************/
void scall_sem_init( void * arg )
{
    3580:	df 93       	push	r29
    3582:	cf 93       	push	r28
    3584:	00 d0       	rcall	.+0      	; 0x3586 <scall_sem_init+0x6>
    3586:	cd b7       	in	r28, 0x3d	; 61
    3588:	de b7       	in	r29, 0x3e	; 62
    358a:	9a 83       	std	Y+2, r25	; 0x02
    358c:	89 83       	std	Y+1, r24	; 0x01
    sem_init_isr( ((sem_init_arg_t *)arg)->sem, ((sem_init_arg_t *)arg)->count );
    358e:	e9 81       	ldd	r30, Y+1	; 0x01
    3590:	fa 81       	ldd	r31, Y+2	; 0x02
    3592:	80 81       	ld	r24, Z
    3594:	91 81       	ldd	r25, Z+1	; 0x01
    3596:	e9 81       	ldd	r30, Y+1	; 0x01
    3598:	fa 81       	ldd	r31, Y+2	; 0x02
    359a:	22 81       	ldd	r18, Z+2	; 0x02
    359c:	33 81       	ldd	r19, Z+3	; 0x03
    359e:	b9 01       	movw	r22, r18
    35a0:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <sem_init_isr>
}
    35a4:	0f 90       	pop	r0
    35a6:	0f 90       	pop	r0
    35a8:	cf 91       	pop	r28
    35aa:	df 91       	pop	r29
    35ac:	08 95       	ret

000035ae <scall_sem_lock>:
}
/**********************************************************************************************
                                         SYSCALL_SEM_LOCK
**********************************************************************************************/
void scall_sem_lock( void * arg )
{
    35ae:	0f 93       	push	r16
    35b0:	1f 93       	push	r17
    35b2:	df 93       	push	r29
    35b4:	cf 93       	push	r28
    35b6:	00 d0       	rcall	.+0      	; 0x35b8 <scall_sem_lock+0xa>
    35b8:	cd b7       	in	r28, 0x3d	; 61
    35ba:	de b7       	in	r29, 0x3e	; 62
    35bc:	9a 83       	std	Y+2, r25	; 0x02
    35be:	89 83       	std	Y+1, r24	; 0x01
    ((sem_lock_arg_t *)arg)->ret = _sem_lock( ((sem_lock_arg_t *)arg)->sem );
    35c0:	09 81       	ldd	r16, Y+1	; 0x01
    35c2:	1a 81       	ldd	r17, Y+2	; 0x02
    35c4:	e9 81       	ldd	r30, Y+1	; 0x01
    35c6:	fa 81       	ldd	r31, Y+2	; 0x02
    35c8:	80 81       	ld	r24, Z
    35ca:	91 81       	ldd	r25, Z+1	; 0x01
    35cc:	0e 94 13 16 	call	0x2c26	; 0x2c26 <_sem_lock>
    35d0:	f8 01       	movw	r30, r16
    35d2:	82 83       	std	Z+2, r24	; 0x02
}
    35d4:	0f 90       	pop	r0
    35d6:	0f 90       	pop	r0
    35d8:	cf 91       	pop	r28
    35da:	df 91       	pop	r29
    35dc:	1f 91       	pop	r17
    35de:	0f 91       	pop	r16
    35e0:	08 95       	ret

000035e2 <scall_sem_try_lock>:
}
/**********************************************************************************************
                                       SYSCALL_SEM_TRY_LOCK
**********************************************************************************************/
void scall_sem_try_lock( void * arg )
{
    35e2:	0f 93       	push	r16
    35e4:	1f 93       	push	r17
    35e6:	df 93       	push	r29
    35e8:	cf 93       	push	r28
    35ea:	00 d0       	rcall	.+0      	; 0x35ec <scall_sem_try_lock+0xa>
    35ec:	cd b7       	in	r28, 0x3d	; 61
    35ee:	de b7       	in	r29, 0x3e	; 62
    35f0:	9a 83       	std	Y+2, r25	; 0x02
    35f2:	89 83       	std	Y+1, r24	; 0x01
    ((sem_lock_arg_t *)arg)->ret = _sem_try_lock( ((sem_lock_arg_t *)arg)->sem );
    35f4:	09 81       	ldd	r16, Y+1	; 0x01
    35f6:	1a 81       	ldd	r17, Y+2	; 0x02
    35f8:	e9 81       	ldd	r30, Y+1	; 0x01
    35fa:	fa 81       	ldd	r31, Y+2	; 0x02
    35fc:	80 81       	ld	r24, Z
    35fe:	91 81       	ldd	r25, Z+1	; 0x01
    3600:	0e 94 77 16 	call	0x2cee	; 0x2cee <_sem_try_lock>
    3604:	f8 01       	movw	r30, r16
    3606:	82 83       	std	Z+2, r24	; 0x02
}
    3608:	0f 90       	pop	r0
    360a:	0f 90       	pop	r0
    360c:	cf 91       	pop	r28
    360e:	df 91       	pop	r29
    3610:	1f 91       	pop	r17
    3612:	0f 91       	pop	r16
    3614:	08 95       	ret

00003616 <scall_sem_unlock>:
}
/**********************************************************************************************
                                       SYSCALL_SEM_UNLOCK
**********************************************************************************************/
void scall_sem_unlock( void * arg )
{
    3616:	df 93       	push	r29
    3618:	cf 93       	push	r28
    361a:	00 d0       	rcall	.+0      	; 0x361c <scall_sem_unlock+0x6>
    361c:	cd b7       	in	r28, 0x3d	; 61
    361e:	de b7       	in	r29, 0x3e	; 62
    3620:	9a 83       	std	Y+2, r25	; 0x02
    3622:	89 83       	std	Y+1, r24	; 0x01
    sem_unlock_isr( (sem_t *)arg );
    3624:	89 81       	ldd	r24, Y+1	; 0x01
    3626:	9a 81       	ldd	r25, Y+2	; 0x02
    3628:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <sem_unlock_isr>
}
    362c:	0f 90       	pop	r0
    362e:	0f 90       	pop	r0
    3630:	cf 91       	pop	r28
    3632:	df 91       	pop	r29
    3634:	08 95       	ret

00003636 <scall_mutex_init>:
                                          Мьютексы
***********************************************************************************************
                                     SYSCALL_MUTEX_INIT
**********************************************************************************************/
void scall_mutex_init(void * arg)
{
    3636:	df 93       	push	r29
    3638:	cf 93       	push	r28
    363a:	00 d0       	rcall	.+0      	; 0x363c <scall_mutex_init+0x6>
    363c:	cd b7       	in	r28, 0x3d	; 61
    363e:	de b7       	in	r29, 0x3e	; 62
    3640:	9a 83       	std	Y+2, r25	; 0x02
    3642:	89 83       	std	Y+1, r24	; 0x01
    mutex_init_isr(
    3644:	e9 81       	ldd	r30, Y+1	; 0x01
    3646:	fa 81       	ldd	r31, Y+2	; 0x02
    3648:	80 81       	ld	r24, Z
    364a:	91 81       	ldd	r25, Z+1	; 0x01
    364c:	e9 81       	ldd	r30, Y+1	; 0x01
    364e:	fa 81       	ldd	r31, Y+2	; 0x02
    3650:	22 81       	ldd	r18, Z+2	; 0x02
    3652:	62 2f       	mov	r22, r18
    3654:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <mutex_init_isr>
               ((mutex_init_arg_t *)arg)->mutex
#ifdef CONFIG_USE_HIGHEST_LOCKER
               ,((mutex_init_arg_t *)arg)->prio
#endif // CONFIG_USE_HIGHEST_LOCKER
               );
}
    3658:	0f 90       	pop	r0
    365a:	0f 90       	pop	r0
    365c:	cf 91       	pop	r28
    365e:	df 91       	pop	r29
    3660:	08 95       	ret

00003662 <scall_mutex_lock>:
}
/**********************************************************************************************
                                    SYSCALL_MUTEX_LOCK
**********************************************************************************************/
void scall_mutex_lock(void * arg)
{
    3662:	0f 93       	push	r16
    3664:	1f 93       	push	r17
    3666:	df 93       	push	r29
    3668:	cf 93       	push	r28
    366a:	00 d0       	rcall	.+0      	; 0x366c <scall_mutex_lock+0xa>
    366c:	cd b7       	in	r28, 0x3d	; 61
    366e:	de b7       	in	r29, 0x3e	; 62
    3670:	9a 83       	std	Y+2, r25	; 0x02
    3672:	89 83       	std	Y+1, r24	; 0x01
    ((mutex_lock_arg_t *)arg)->ret = _mutex_lock( ((mutex_lock_arg_t *)arg)->mutex );
    3674:	09 81       	ldd	r16, Y+1	; 0x01
    3676:	1a 81       	ldd	r17, Y+2	; 0x02
    3678:	e9 81       	ldd	r30, Y+1	; 0x01
    367a:	fa 81       	ldd	r31, Y+2	; 0x02
    367c:	80 81       	ld	r24, Z
    367e:	91 81       	ldd	r25, Z+1	; 0x01
    3680:	0e 94 11 0c 	call	0x1822	; 0x1822 <_mutex_lock>
    3684:	f8 01       	movw	r30, r16
    3686:	82 83       	std	Z+2, r24	; 0x02
}
    3688:	0f 90       	pop	r0
    368a:	0f 90       	pop	r0
    368c:	cf 91       	pop	r28
    368e:	df 91       	pop	r29
    3690:	1f 91       	pop	r17
    3692:	0f 91       	pop	r16
    3694:	08 95       	ret

00003696 <scall_mutex_try_lock>:
// Захват
/**********************************************************************************************
                                    SYSCALL_MUTEX_TRY_LOCK
**********************************************************************************************/
void scall_mutex_try_lock(void * arg)
{
    3696:	0f 93       	push	r16
    3698:	1f 93       	push	r17
    369a:	df 93       	push	r29
    369c:	cf 93       	push	r28
    369e:	00 d0       	rcall	.+0      	; 0x36a0 <scall_mutex_try_lock+0xa>
    36a0:	cd b7       	in	r28, 0x3d	; 61
    36a2:	de b7       	in	r29, 0x3e	; 62
    36a4:	9a 83       	std	Y+2, r25	; 0x02
    36a6:	89 83       	std	Y+1, r24	; 0x01
    ((mutex_lock_arg_t *)arg)->ret = _mutex_try_lock( ((mutex_lock_arg_t *)arg)->mutex );
    36a8:	09 81       	ldd	r16, Y+1	; 0x01
    36aa:	1a 81       	ldd	r17, Y+2	; 0x02
    36ac:	e9 81       	ldd	r30, Y+1	; 0x01
    36ae:	fa 81       	ldd	r31, Y+2	; 0x02
    36b0:	80 81       	ld	r24, Z
    36b2:	91 81       	ldd	r25, Z+1	; 0x01
    36b4:	0e 94 66 0c 	call	0x18cc	; 0x18cc <_mutex_try_lock>
    36b8:	f8 01       	movw	r30, r16
    36ba:	82 83       	std	Z+2, r24	; 0x02
}
    36bc:	0f 90       	pop	r0
    36be:	0f 90       	pop	r0
    36c0:	cf 91       	pop	r28
    36c2:	df 91       	pop	r29
    36c4:	1f 91       	pop	r17
    36c6:	0f 91       	pop	r16
    36c8:	08 95       	ret

000036ca <scall_mutex_unlock>:
}
/**********************************************************************************************
                                   SYSCALL_MUTEX_UNLOCK
**********************************************************************************************/
void scall_mutex_unlock(void * arg)
{
    36ca:	df 93       	push	r29
    36cc:	cf 93       	push	r28
    36ce:	00 d0       	rcall	.+0      	; 0x36d0 <scall_mutex_unlock+0x6>
    36d0:	cd b7       	in	r28, 0x3d	; 61
    36d2:	de b7       	in	r29, 0x3e	; 62
    36d4:	9a 83       	std	Y+2, r25	; 0x02
    36d6:	89 83       	std	Y+1, r24	; 0x01
    _mutex_unlock( (mutex_t *)arg );
    36d8:	89 81       	ldd	r24, Y+1	; 0x01
    36da:	9a 81       	ldd	r25, Y+2	; 0x02
    36dc:	0e 94 a6 0c 	call	0x194c	; 0x194c <_mutex_unlock>
}
    36e0:	0f 90       	pop	r0
    36e2:	0f 90       	pop	r0
    36e4:	cf 91       	pop	r28
    36e6:	df 91       	pop	r29
    36e8:	08 95       	ret

000036ea <scall_ipc_wait>:
                                           IPC
***********************************************************************************************
                                       SYSCALL_IPC_WAIT
**********************************************************************************************/
void scall_ipc_wait(void * arg)
{
    36ea:	df 93       	push	r29
    36ec:	cf 93       	push	r28
    36ee:	00 d0       	rcall	.+0      	; 0x36f0 <scall_ipc_wait+0x6>
    36f0:	cd b7       	in	r28, 0x3d	; 61
    36f2:	de b7       	in	r29, 0x3e	; 62
    36f4:	9a 83       	std	Y+2, r25	; 0x02
    36f6:	89 83       	std	Y+1, r24	; 0x01
    _ipc_wait( arg );
    36f8:	89 81       	ldd	r24, Y+1	; 0x01
    36fa:	9a 81       	ldd	r25, Y+2	; 0x02
    36fc:	0e 94 cd 09 	call	0x139a	; 0x139a <_ipc_wait>
}
    3700:	0f 90       	pop	r0
    3702:	0f 90       	pop	r0
    3704:	cf 91       	pop	r28
    3706:	df 91       	pop	r29
    3708:	08 95       	ret

0000370a <scall_ipc_send>:
}
/**********************************************************************************************
                                       SYSCALL_IPC_SEND
**********************************************************************************************/
void scall_ipc_send(void * arg)
{
    370a:	0f 93       	push	r16
    370c:	1f 93       	push	r17
    370e:	df 93       	push	r29
    3710:	cf 93       	push	r28
    3712:	00 d0       	rcall	.+0      	; 0x3714 <scall_ipc_send+0xa>
    3714:	cd b7       	in	r28, 0x3d	; 61
    3716:	de b7       	in	r29, 0x3e	; 62
    3718:	9a 83       	std	Y+2, r25	; 0x02
    371a:	89 83       	std	Y+1, r24	; 0x01
    ((ipc_send_arg_t *)arg)->ret = ipc_send_isr( ((ipc_send_arg_t *)arg)->proc, ((ipc_send_arg_t *)arg)->data );
    371c:	09 81       	ldd	r16, Y+1	; 0x01
    371e:	1a 81       	ldd	r17, Y+2	; 0x02
    3720:	e9 81       	ldd	r30, Y+1	; 0x01
    3722:	fa 81       	ldd	r31, Y+2	; 0x02
    3724:	80 81       	ld	r24, Z
    3726:	91 81       	ldd	r25, Z+1	; 0x01
    3728:	e9 81       	ldd	r30, Y+1	; 0x01
    372a:	fa 81       	ldd	r31, Y+2	; 0x02
    372c:	23 81       	ldd	r18, Z+3	; 0x03
    372e:	34 81       	ldd	r19, Z+4	; 0x04
    3730:	b9 01       	movw	r22, r18
    3732:	0e 94 02 0a 	call	0x1404	; 0x1404 <ipc_send_isr>
    3736:	f8 01       	movw	r30, r16
    3738:	82 83       	std	Z+2, r24	; 0x02
}
    373a:	0f 90       	pop	r0
    373c:	0f 90       	pop	r0
    373e:	cf 91       	pop	r28
    3740:	df 91       	pop	r29
    3742:	1f 91       	pop	r17
    3744:	0f 91       	pop	r16
    3746:	08 95       	ret

00003748 <scall_ipc_exchange>:
}
/**********************************************************************************************
                                    SYSCALL_IPC_EXCHANGE
**********************************************************************************************/
void scall_ipc_exchange(void * arg)
{
    3748:	0f 93       	push	r16
    374a:	1f 93       	push	r17
    374c:	df 93       	push	r29
    374e:	cf 93       	push	r28
    3750:	00 d0       	rcall	.+0      	; 0x3752 <scall_ipc_exchange+0xa>
    3752:	cd b7       	in	r28, 0x3d	; 61
    3754:	de b7       	in	r29, 0x3e	; 62
    3756:	9a 83       	std	Y+2, r25	; 0x02
    3758:	89 83       	std	Y+1, r24	; 0x01
    ((ipc_send_arg_t *)arg)->ret = _ipc_exchange( ((ipc_send_arg_t *)arg)->proc, ((ipc_send_arg_t *)arg)->data, ((ipc_exchange_arg_t *)arg)->receive );
    375a:	09 81       	ldd	r16, Y+1	; 0x01
    375c:	1a 81       	ldd	r17, Y+2	; 0x02
    375e:	e9 81       	ldd	r30, Y+1	; 0x01
    3760:	fa 81       	ldd	r31, Y+2	; 0x02
    3762:	80 81       	ld	r24, Z
    3764:	91 81       	ldd	r25, Z+1	; 0x01
    3766:	e9 81       	ldd	r30, Y+1	; 0x01
    3768:	fa 81       	ldd	r31, Y+2	; 0x02
    376a:	43 81       	ldd	r20, Z+3	; 0x03
    376c:	54 81       	ldd	r21, Z+4	; 0x04
    376e:	e9 81       	ldd	r30, Y+1	; 0x01
    3770:	fa 81       	ldd	r31, Y+2	; 0x02
    3772:	25 81       	ldd	r18, Z+5	; 0x05
    3774:	36 81       	ldd	r19, Z+6	; 0x06
    3776:	ba 01       	movw	r22, r20
    3778:	a9 01       	movw	r20, r18
    377a:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <_ipc_exchange>
    377e:	f8 01       	movw	r30, r16
    3780:	82 83       	std	Z+2, r24	; 0x02
}
    3782:	0f 90       	pop	r0
    3784:	0f 90       	pop	r0
    3786:	cf 91       	pop	r28
    3788:	df 91       	pop	r29
    378a:	1f 91       	pop	r17
    378c:	0f 91       	pop	r16
    378e:	08 95       	ret

00003790 <xlist_init>:
**********************************************/
//Инициация
void xlist_init(
    xlist_t * xlist
)
{
    3790:	df 93       	push	r29
    3792:	cf 93       	push	r28
    3794:	00 d0       	rcall	.+0      	; 0x3796 <xlist_init+0x6>
    3796:	00 d0       	rcall	.+0      	; 0x3798 <xlist_init+0x8>
    3798:	cd b7       	in	r28, 0x3d	; 61
    379a:	de b7       	in	r29, 0x3e	; 62
    379c:	9c 83       	std	Y+4, r25	; 0x04
    379e:	8b 83       	std	Y+3, r24	; 0x03
    count_t i;
    //список пуст
    xlist->index = (index_t)0;
    37a0:	eb 81       	ldd	r30, Y+3	; 0x03
    37a2:	fc 81       	ldd	r31, Y+4	; 0x04
    37a4:	10 8a       	std	Z+16, r1	; 0x10
    //обнуляем указатели
    for( i = 0; i < BITS_IN_INDEX_T; i++ )xlist->item[i] = (item_t *)0;
    37a6:	1a 82       	std	Y+2, r1	; 0x02
    37a8:	19 82       	std	Y+1, r1	; 0x01
    37aa:	10 c0       	rjmp	.+32     	; 0x37cc <xlist_init+0x3c>
    37ac:	89 81       	ldd	r24, Y+1	; 0x01
    37ae:	9a 81       	ldd	r25, Y+2	; 0x02
    37b0:	2b 81       	ldd	r18, Y+3	; 0x03
    37b2:	3c 81       	ldd	r19, Y+4	; 0x04
    37b4:	88 0f       	add	r24, r24
    37b6:	99 1f       	adc	r25, r25
    37b8:	f9 01       	movw	r30, r18
    37ba:	e8 0f       	add	r30, r24
    37bc:	f9 1f       	adc	r31, r25
    37be:	11 82       	std	Z+1, r1	; 0x01
    37c0:	10 82       	st	Z, r1
    37c2:	89 81       	ldd	r24, Y+1	; 0x01
    37c4:	9a 81       	ldd	r25, Y+2	; 0x02
    37c6:	01 96       	adiw	r24, 0x01	; 1
    37c8:	9a 83       	std	Y+2, r25	; 0x02
    37ca:	89 83       	std	Y+1, r24	; 0x01
    37cc:	89 81       	ldd	r24, Y+1	; 0x01
    37ce:	9a 81       	ldd	r25, Y+2	; 0x02
    37d0:	88 30       	cpi	r24, 0x08	; 8
    37d2:	91 05       	cpc	r25, r1
    37d4:	58 f3       	brcs	.-42     	; 0x37ac <xlist_init+0x1c>
}
    37d6:	0f 90       	pop	r0
    37d8:	0f 90       	pop	r0
    37da:	0f 90       	pop	r0
    37dc:	0f 90       	pop	r0
    37de:	cf 91       	pop	r28
    37e0:	df 91       	pop	r29
    37e2:	08 95       	ret

000037e4 <xlist_head>:
//===========================================================================
//Поиск головы списка
item_t * xlist_head(xlist_t * xlist)
{
    37e4:	df 93       	push	r29
    37e6:	cf 93       	push	r28
    37e8:	00 d0       	rcall	.+0      	; 0x37ea <xlist_head+0x6>
    37ea:	00 d0       	rcall	.+0      	; 0x37ec <xlist_head+0x8>
    37ec:	0f 92       	push	r0
    37ee:	cd b7       	in	r28, 0x3d	; 61
    37f0:	de b7       	in	r29, 0x3e	; 62
    37f2:	9d 83       	std	Y+5, r25	; 0x05
    37f4:	8c 83       	std	Y+4, r24	; 0x04
    item_t * ret_val = (item_t *)0;
    37f6:	1b 82       	std	Y+3, r1	; 0x03
    37f8:	1a 82       	std	Y+2, r1	; 0x02
    index_t index;
    index = xlist->index;
    37fa:	ec 81       	ldd	r30, Y+4	; 0x04
    37fc:	fd 81       	ldd	r31, Y+5	; 0x05
    37fe:	80 89       	ldd	r24, Z+16	; 0x10
    3800:	89 83       	std	Y+1, r24	; 0x01

    if( index != (index_t)0 )
    3802:	89 81       	ldd	r24, Y+1	; 0x01
    3804:	88 23       	and	r24, r24
    3806:	81 f0       	breq	.+32     	; 0x3828 <xlist_head+0x44>
    {
        ret_val = xlist->item[ index_search( index ) ];
    3808:	89 81       	ldd	r24, Y+1	; 0x01
    380a:	0e 94 8e 09 	call	0x131c	; 0x131c <index_search>
    380e:	88 2f       	mov	r24, r24
    3810:	90 e0       	ldi	r25, 0x00	; 0
    3812:	2c 81       	ldd	r18, Y+4	; 0x04
    3814:	3d 81       	ldd	r19, Y+5	; 0x05
    3816:	88 0f       	add	r24, r24
    3818:	99 1f       	adc	r25, r25
    381a:	f9 01       	movw	r30, r18
    381c:	e8 0f       	add	r30, r24
    381e:	f9 1f       	adc	r31, r25
    3820:	80 81       	ld	r24, Z
    3822:	91 81       	ldd	r25, Z+1	; 0x01
    3824:	9b 83       	std	Y+3, r25	; 0x03
    3826:	8a 83       	std	Y+2, r24	; 0x02
    }
    return ret_val;
    3828:	8a 81       	ldd	r24, Y+2	; 0x02
    382a:	9b 81       	ldd	r25, Y+3	; 0x03
}
    382c:	0f 90       	pop	r0
    382e:	0f 90       	pop	r0
    3830:	0f 90       	pop	r0
    3832:	0f 90       	pop	r0
    3834:	0f 90       	pop	r0
    3836:	cf 91       	pop	r28
    3838:	df 91       	pop	r29
    383a:	08 95       	ret

0000383c <xlist_switch>:

//===========================================================================
// переключение указателя в массиве на следующий элемент, пригодится в планировщике
void xlist_switch(xlist_t * xlist, prio_t prio)
{
    383c:	df 93       	push	r29
    383e:	cf 93       	push	r28
    3840:	00 d0       	rcall	.+0      	; 0x3842 <xlist_switch+0x6>
    3842:	00 d0       	rcall	.+0      	; 0x3844 <xlist_switch+0x8>
    3844:	0f 92       	push	r0
    3846:	cd b7       	in	r28, 0x3d	; 61
    3848:	de b7       	in	r29, 0x3e	; 62
    384a:	9c 83       	std	Y+4, r25	; 0x04
    384c:	8b 83       	std	Y+3, r24	; 0x03
    384e:	6d 83       	std	Y+5, r22	; 0x05
    item_t ** current;
    current = xlist->item + prio;
    3850:	2b 81       	ldd	r18, Y+3	; 0x03
    3852:	3c 81       	ldd	r19, Y+4	; 0x04
    3854:	8d 81       	ldd	r24, Y+5	; 0x05
    3856:	88 2f       	mov	r24, r24
    3858:	90 e0       	ldi	r25, 0x00	; 0
    385a:	88 0f       	add	r24, r24
    385c:	99 1f       	adc	r25, r25
    385e:	82 0f       	add	r24, r18
    3860:	93 1f       	adc	r25, r19
    3862:	9a 83       	std	Y+2, r25	; 0x02
    3864:	89 83       	std	Y+1, r24	; 0x01
    *current = (*current)->next;
    3866:	e9 81       	ldd	r30, Y+1	; 0x01
    3868:	fa 81       	ldd	r31, Y+2	; 0x02
    386a:	01 90       	ld	r0, Z+
    386c:	f0 81       	ld	r31, Z
    386e:	e0 2d       	mov	r30, r0
    3870:	80 81       	ld	r24, Z
    3872:	91 81       	ldd	r25, Z+1	; 0x01
    3874:	e9 81       	ldd	r30, Y+1	; 0x01
    3876:	fa 81       	ldd	r31, Y+2	; 0x02
    3878:	91 83       	std	Z+1, r25	; 0x01
    387a:	80 83       	st	Z, r24
    //*current = (item_t *)*(item_t **)*(item_t ***)current;
}
    387c:	0f 90       	pop	r0
    387e:	0f 90       	pop	r0
    3880:	0f 90       	pop	r0
    3882:	0f 90       	pop	r0
    3884:	0f 90       	pop	r0
    3886:	cf 91       	pop	r28
    3888:	df 91       	pop	r29
    388a:	08 95       	ret

0000388c <test_visr>:
 */

#include "../../arch/avr/gcc-vsmp/vsmp.h"

void test_visr(void)
{
    388c:	df 93       	push	r29
    388e:	cf 93       	push	r28
    3890:	cd b7       	in	r28, 0x3d	; 61
    3892:	de b7       	in	r29, 0x3e	; 62
    PORTB^=0x10;
    3894:	a5 e2       	ldi	r26, 0x25	; 37
    3896:	b0 e0       	ldi	r27, 0x00	; 0
    3898:	e5 e2       	ldi	r30, 0x25	; 37
    389a:	f0 e0       	ldi	r31, 0x00	; 0
    389c:	90 81       	ld	r25, Z
    389e:	80 e1       	ldi	r24, 0x10	; 16
    38a0:	89 27       	eor	r24, r25
    38a2:	8c 93       	st	X, r24
}
    38a4:	cf 91       	pop	r28
    38a6:	df 91       	pop	r29
    38a8:	08 95       	ret

000038aa <test_visr2>:
void test_visr2(void)
{
    38aa:	df 93       	push	r29
    38ac:	cf 93       	push	r28
    38ae:	cd b7       	in	r28, 0x3d	; 61
    38b0:	de b7       	in	r29, 0x3e	; 62
    PORTB^=0x10;
    38b2:	a5 e2       	ldi	r26, 0x25	; 37
    38b4:	b0 e0       	ldi	r27, 0x00	; 0
    38b6:	e5 e2       	ldi	r30, 0x25	; 37
    38b8:	f0 e0       	ldi	r31, 0x00	; 0
    38ba:	90 81       	ld	r25, Z
    38bc:	80 e1       	ldi	r24, 0x10	; 16
    38be:	89 27       	eor	r24, r25
    38c0:	8c 93       	st	X, r24
}
    38c2:	cf 91       	pop	r28
    38c4:	df 91       	pop	r29
    38c6:	08 95       	ret

000038c8 <main>:
vinterrupt_t test_vector2 = VINTERRUPT_INIT(test_vector2,test_visr2);
core_id_t i;
unsigned short j;

int main(void)
{
    38c8:	df 93       	push	r29
    38ca:	cf 93       	push	r28
    38cc:	cd b7       	in	r28, 0x3d	; 61
    38ce:	de b7       	in	r29, 0x3e	; 62
    vsmp_init();
    38d0:	0e 94 96 05 	call	0xb2c	; 0xb2c <vsmp_init>

    TCCR2A = 0x02;//
    38d4:	e0 eb       	ldi	r30, 0xB0	; 176
    38d6:	f0 e0       	ldi	r31, 0x00	; 0
    38d8:	82 e0       	ldi	r24, 0x02	; 2
    38da:	80 83       	st	Z, r24
    TCCR2B = 0x05;// prescaler=128
    38dc:	e1 eb       	ldi	r30, 0xB1	; 177
    38de:	f0 e0       	ldi	r31, 0x00	; 0
    38e0:	85 e0       	ldi	r24, 0x05	; 5
    38e2:	80 83       	st	Z, r24
    OCR2A  = 124;
    38e4:	e3 eb       	ldi	r30, 0xB3	; 179
    38e6:	f0 e0       	ldi	r31, 0x00	; 0
    38e8:	8c e7       	ldi	r24, 0x7C	; 124
    38ea:	80 83       	st	Z, r24
    OCR2B  = 0x00;
    38ec:	e4 eb       	ldi	r30, 0xB4	; 180
    38ee:	f0 e0       	ldi	r31, 0x00	; 0
    38f0:	10 82       	st	Z, r1
    TIMSK2 = 0x02;
    38f2:	e0 e7       	ldi	r30, 0x70	; 112
    38f4:	f0 e0       	ldi	r31, 0x00	; 0
    38f6:	82 e0       	ldi	r24, 0x02	; 2
    38f8:	80 83       	st	Z, r24
    TIFR2  = 0x00;
    38fa:	e7 e3       	ldi	r30, 0x37	; 55
    38fc:	f0 e0       	ldi	r31, 0x00	; 0
    38fe:	10 82       	st	Z, r1

    DDRB = 0x3F;
    3900:	e4 e2       	ldi	r30, 0x24	; 36
    3902:	f0 e0       	ldi	r31, 0x00	; 0
    3904:	8f e3       	ldi	r24, 0x3F	; 63
    3906:	80 83       	st	Z, r24
    PORTB = 0x00;
    3908:	e5 e2       	ldi	r30, 0x25	; 37
    390a:	f0 e0       	ldi	r31, 0x00	; 0
    390c:	10 82       	st	Z, r1
    DDRC = 0x3F;
    390e:	e7 e2       	ldi	r30, 0x27	; 39
    3910:	f0 e0       	ldi	r31, 0x00	; 0
    3912:	8f e3       	ldi	r24, 0x3F	; 63
    3914:	80 83       	st	Z, r24
    PORTC = 0x00;
    3916:	e8 e2       	ldi	r30, 0x28	; 40
    3918:	f0 e0       	ldi	r31, 0x00	; 0
    391a:	10 82       	st	Z, r1
    DDRD = 0xFE;
    391c:	ea e2       	ldi	r30, 0x2A	; 42
    391e:	f0 e0       	ldi	r31, 0x00	; 0
    3920:	8e ef       	ldi	r24, 0xFE	; 254
    3922:	80 83       	st	Z, r24
    PORTD = 0x00;
    3924:	eb e2       	ldi	r30, 0x2B	; 43
    3926:	f0 e0       	ldi	r31, 0x00	; 0
    3928:	10 82       	st	Z, r1

    vsmp_run();
    392a:	0e 94 fe 05 	call	0xbfc	; 0xbfc <vsmp_run>

    for(i=0; i<MAX_CORES; i++)
    392e:	10 92 0b 03 	sts	0x030B, r1
    3932:	2a c0       	rjmp	.+84     	; 0x3988 <main+0xc0>
    {
        cli();
    3934:	f8 94       	cli
        vsmp_vinterrupt_isr( i, &test_vector );
    3936:	80 91 0b 03 	lds	r24, 0x030B
    393a:	20 e0       	ldi	r18, 0x00	; 0
    393c:	31 e0       	ldi	r19, 0x01	; 1
    393e:	b9 01       	movw	r22, r18
    3940:	0e 94 a8 07 	call	0xf50	; 0xf50 <vsmp_vinterrupt_isr>
        vsmp_vinterrupt( i, &test_vector2 );
    3944:	80 91 0b 03 	lds	r24, 0x030B
    3948:	26 e0       	ldi	r18, 0x06	; 6
    394a:	31 e0       	ldi	r19, 0x01	; 1
    394c:	b9 01       	movw	r22, r18
    394e:	0e 94 ef 07 	call	0xfde	; 0xfde <vsmp_vinterrupt>
        for(j=0;j<1000;j++);
    3952:	10 92 0a 03 	sts	0x030A, r1
    3956:	10 92 09 03 	sts	0x0309, r1
    395a:	09 c0       	rjmp	.+18     	; 0x396e <main+0xa6>
    395c:	80 91 09 03 	lds	r24, 0x0309
    3960:	90 91 0a 03 	lds	r25, 0x030A
    3964:	01 96       	adiw	r24, 0x01	; 1
    3966:	90 93 0a 03 	sts	0x030A, r25
    396a:	80 93 09 03 	sts	0x0309, r24
    396e:	80 91 09 03 	lds	r24, 0x0309
    3972:	90 91 0a 03 	lds	r25, 0x030A
    3976:	23 e0       	ldi	r18, 0x03	; 3
    3978:	88 3e       	cpi	r24, 0xE8	; 232
    397a:	92 07       	cpc	r25, r18
    397c:	78 f3       	brcs	.-34     	; 0x395c <main+0x94>
    DDRD = 0xFE;
    PORTD = 0x00;

    vsmp_run();

    for(i=0; i<MAX_CORES; i++)
    397e:	80 91 0b 03 	lds	r24, 0x030B
    3982:	8f 5f       	subi	r24, 0xFF	; 255
    3984:	80 93 0b 03 	sts	0x030B, r24
    3988:	80 91 0b 03 	lds	r24, 0x030B
    398c:	82 30       	cpi	r24, 0x02	; 2
    398e:	90 f2       	brcs	.-92     	; 0x3934 <main+0x6c>
        cli();
        vsmp_vinterrupt_isr( i, &test_vector );
        vsmp_vinterrupt( i, &test_vector2 );
        for(j=0;j<1000;j++);
    }
    for(i=0; i<MAX_CORES; i++)
    3990:	10 92 0b 03 	sts	0x030B, r1
    3994:	2a c0       	rjmp	.+84     	; 0x39ea <main+0x122>
    {
        cli();
    3996:	f8 94       	cli
        vsmp_vinterrupt_isr( i, &test_vector );
    3998:	80 91 0b 03 	lds	r24, 0x030B
    399c:	20 e0       	ldi	r18, 0x00	; 0
    399e:	31 e0       	ldi	r19, 0x01	; 1
    39a0:	b9 01       	movw	r22, r18
    39a2:	0e 94 a8 07 	call	0xf50	; 0xf50 <vsmp_vinterrupt_isr>
        vsmp_vinterrupt( i, &test_vector2 );
    39a6:	80 91 0b 03 	lds	r24, 0x030B
    39aa:	26 e0       	ldi	r18, 0x06	; 6
    39ac:	31 e0       	ldi	r19, 0x01	; 1
    39ae:	b9 01       	movw	r22, r18
    39b0:	0e 94 ef 07 	call	0xfde	; 0xfde <vsmp_vinterrupt>
        for(j=0;j<1000;j++);
    39b4:	10 92 0a 03 	sts	0x030A, r1
    39b8:	10 92 09 03 	sts	0x0309, r1
    39bc:	09 c0       	rjmp	.+18     	; 0x39d0 <main+0x108>
    39be:	80 91 09 03 	lds	r24, 0x0309
    39c2:	90 91 0a 03 	lds	r25, 0x030A
    39c6:	01 96       	adiw	r24, 0x01	; 1
    39c8:	90 93 0a 03 	sts	0x030A, r25
    39cc:	80 93 09 03 	sts	0x0309, r24
    39d0:	80 91 09 03 	lds	r24, 0x0309
    39d4:	90 91 0a 03 	lds	r25, 0x030A
    39d8:	23 e0       	ldi	r18, 0x03	; 3
    39da:	88 3e       	cpi	r24, 0xE8	; 232
    39dc:	92 07       	cpc	r25, r18
    39de:	78 f3       	brcs	.-34     	; 0x39be <main+0xf6>
        cli();
        vsmp_vinterrupt_isr( i, &test_vector );
        vsmp_vinterrupt( i, &test_vector2 );
        for(j=0;j<1000;j++);
    }
    for(i=0; i<MAX_CORES; i++)
    39e0:	80 91 0b 03 	lds	r24, 0x030B
    39e4:	8f 5f       	subi	r24, 0xFF	; 255
    39e6:	80 93 0b 03 	sts	0x030B, r24
    39ea:	80 91 0b 03 	lds	r24, 0x030B
    39ee:	82 30       	cpi	r24, 0x02	; 2
    39f0:	90 f2       	brcs	.-92     	; 0x3996 <main+0xce>
        vsmp_vinterrupt_isr( i, &test_vector );
        vsmp_vinterrupt( i, &test_vector2 );
        for(j=0;j<1000;j++);
    }

    init_bugurt();
    39f2:	0e 94 0a 05 	call	0xa14	; 0xa14 <init_bugurt>
    start_bugurt();
    39f6:	0e 94 4f 05 	call	0xa9e	; 0xa9e <start_bugurt>

    return 0;
    39fa:	80 e0       	ldi	r24, 0x00	; 0
    39fc:	90 e0       	ldi	r25, 0x00	; 0
}
    39fe:	cf 91       	pop	r28
    3a00:	df 91       	pop	r29
    3a02:	08 95       	ret

00003a04 <_exit>:
    3a04:	f8 94       	cli

00003a06 <__stop_program>:
    3a06:	ff cf       	rjmp	.-2      	; 0x3a06 <__stop_program>
