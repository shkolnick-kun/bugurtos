
bin/Debug/vsmp-sandbox.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000449e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          000006b5  00800100  00800100  00004512  2**0
                  ALLOC
  2 .stab         000096f0  00000000  00000000  00004514  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00004080  00000000  00000000  0000dc04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
       4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      1c:	0c 94 6f 07 	jmp	0xede	; 0xede <__vector_7>
      20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      30:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      48:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      54:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000068 <syscall_routine>:
      68:	f0 1c 42 1d 79 1d 93 1d ad 1d da 1d 21 1e 33 1e     ..B.y.......!.3.
      78:	4d 1e 5d 1e 6d 1e 7f 1e 8f 1e 9f 1e b6 1e d0 1e     M.].m...........
      88:	ea 1e fa 1e 10 1f 2a 1f 44 1f 54 1f 64 1f 83 1f     ......*.D.T.d...

00000098 <__ctors_end>:
      98:	11 24       	eor	r1, r1
      9a:	1f be       	out	0x3f, r1	; 63
      9c:	cf ef       	ldi	r28, 0xFF	; 255
      9e:	d8 e0       	ldi	r29, 0x08	; 8
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
      a4:	11 e0       	ldi	r17, 0x01	; 1
      a6:	a0 e0       	ldi	r26, 0x00	; 0
      a8:	b1 e0       	ldi	r27, 0x01	; 1
      aa:	ee e9       	ldi	r30, 0x9E	; 158
      ac:	f4 e4       	ldi	r31, 0x44	; 68
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <.do_copy_data_start>

000000b0 <.do_copy_data_loop>:
      b0:	05 90       	lpm	r0, Z+
      b2:	0d 92       	st	X+, r0

000000b4 <.do_copy_data_start>:
      b4:	a0 30       	cpi	r26, 0x00	; 0
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <.do_copy_data_loop>

000000ba <__do_clear_bss>:
      ba:	17 e0       	ldi	r17, 0x07	; 7
      bc:	a0 e0       	ldi	r26, 0x00	; 0
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	a5 3b       	cpi	r26, 0xB5	; 181
      c6:	b1 07       	cpc	r27, r17
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	0e 94 30 21 	call	0x4260	; 0x4260 <main>
      ce:	0c 94 4d 22 	jmp	0x449a	; 0x449a <_exit>

000000d2 <__bad_interrupt>:
      d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <bugurt_save_context>:
      d6:	2f 92       	push	r2
      d8:	2f b6       	in	r2, 0x3f	; 63
      da:	2f 92       	push	r2
      dc:	3f 92       	push	r3
      de:	4f 92       	push	r4
      e0:	5f 92       	push	r5
      e2:	6f 92       	push	r6
      e4:	7f 92       	push	r7
      e6:	8f 92       	push	r8
      e8:	9f 92       	push	r9
      ea:	af 92       	push	r10
      ec:	bf 92       	push	r11
      ee:	cf 92       	push	r12
      f0:	df 92       	push	r13
      f2:	ef 92       	push	r14
      f4:	ff 92       	push	r15
      f6:	0f 93       	push	r16
      f8:	1f 93       	push	r17
      fa:	2f 93       	push	r18
      fc:	3f 93       	push	r19
      fe:	4f 93       	push	r20
     100:	5f 93       	push	r21
     102:	6f 93       	push	r22
     104:	7f 93       	push	r23
     106:	8f 93       	push	r24
     108:	9f 93       	push	r25
     10a:	af 93       	push	r26
     10c:	bf 93       	push	r27
     10e:	cf 93       	push	r28
     110:	df 93       	push	r29
     112:	ef 93       	push	r30
     114:	ff 93       	push	r31
     116:	ed b7       	in	r30, 0x3d	; 61
     118:	fe b7       	in	r31, 0x3e	; 62
     11a:	21 a1       	ldd	r18, Z+33	; 0x21
     11c:	30 a1       	ldd	r19, Z+32	; 0x20
     11e:	01 a2       	std	Z+33, r0	; 0x21
     120:	10 a2       	std	Z+32, r1	; 0x20
     122:	11 24       	eor	r1, r1
     124:	8d b7       	in	r24, 0x3d	; 61
     126:	9e b7       	in	r25, 0x3e	; 62
     128:	2f 93       	push	r18
     12a:	3f 93       	push	r19
     12c:	08 95       	ret

0000012e <bugurt_pop_context>:
     12e:	3f 91       	pop	r19
     130:	2f 91       	pop	r18
     132:	04 c0       	rjmp	.+8      	; 0x13c <_bugurt_pop_context>

00000134 <bugurt_restore_context>:
     134:	3f 91       	pop	r19
     136:	2f 91       	pop	r18
     138:	9e bf       	out	0x3e, r25	; 62
     13a:	8d bf       	out	0x3d, r24	; 61

0000013c <_bugurt_pop_context>:
     13c:	fe b7       	in	r31, 0x3e	; 62
     13e:	ed b7       	in	r30, 0x3d	; 61
     140:	10 a0       	ldd	r1, Z+32	; 0x20
     142:	01 a0       	ldd	r0, Z+33	; 0x21
     144:	30 a3       	std	Z+32, r19	; 0x20
     146:	21 a3       	std	Z+33, r18	; 0x21
     148:	ff 91       	pop	r31
     14a:	ef 91       	pop	r30
     14c:	df 91       	pop	r29
     14e:	cf 91       	pop	r28
     150:	bf 91       	pop	r27
     152:	af 91       	pop	r26
     154:	9f 91       	pop	r25
     156:	8f 91       	pop	r24
     158:	7f 91       	pop	r23
     15a:	6f 91       	pop	r22
     15c:	5f 91       	pop	r21
     15e:	4f 91       	pop	r20
     160:	3f 91       	pop	r19
     162:	2f 91       	pop	r18
     164:	1f 91       	pop	r17
     166:	0f 91       	pop	r16
     168:	ff 90       	pop	r15
     16a:	ef 90       	pop	r14
     16c:	df 90       	pop	r13
     16e:	cf 90       	pop	r12
     170:	bf 90       	pop	r11
     172:	af 90       	pop	r10
     174:	9f 90       	pop	r9
     176:	8f 90       	pop	r8
     178:	7f 90       	pop	r7
     17a:	6f 90       	pop	r6
     17c:	5f 90       	pop	r5
     17e:	4f 90       	pop	r4
     180:	3f 90       	pop	r3
     182:	2f 90       	pop	r2
     184:	2f be       	out	0x3f, r2	; 63
     186:	2f 90       	pop	r2
     188:	08 95       	ret

0000018a <bugurt_set_stack_pointer>:
     18a:	1f 90       	pop	r1
     18c:	0f 90       	pop	r0
     18e:	9e bf       	out	0x3e, r25	; 62
     190:	8d bf       	out	0x3d, r24	; 61
     192:	0f 92       	push	r0
     194:	1f 92       	push	r1
     196:	11 24       	eor	r1, r1
     198:	08 95       	ret

0000019a <bugurt_push_pointer>:
     19a:	1f 90       	pop	r1
     19c:	0f 90       	pop	r0
     19e:	8f 93       	push	r24
     1a0:	9f 93       	push	r25
     1a2:	0f 92       	push	r0
     1a4:	1f 92       	push	r1
     1a6:	11 24       	eor	r1, r1
     1a8:	08 95       	ret

000001aa <bugurt_reverse_byte_order>:
     1aa:	08 2e       	mov	r0, r24
     1ac:	89 2f       	mov	r24, r25
     1ae:	90 2d       	mov	r25, r0
     1b0:	08 95       	ret

000001b2 <current_proc>:
    vm_state[current_vm].sp = kernel.sched[current_vm].current_proc->spointer;
    __asm__ __volatile__("reti"::);
}
///!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
proc_t * current_proc(void)
{
     1b2:	df 93       	push	r29
     1b4:	cf 93       	push	r28
     1b6:	00 d0       	rcall	.+0      	; 0x1b8 <current_proc+0x6>
     1b8:	cd b7       	in	r28, 0x3d	; 61
     1ba:	de b7       	in	r29, 0x3e	; 62
    proc_t * ret;
    cli();
     1bc:	f8 94       	cli
    ret = kernel.sched[current_vm].current_proc;
     1be:	80 91 12 01 	lds	r24, 0x0112
     1c2:	28 2f       	mov	r18, r24
     1c4:	30 e0       	ldi	r19, 0x00	; 0
     1c6:	8b e2       	ldi	r24, 0x2B	; 43
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	ac 01       	movw	r20, r24
     1cc:	24 9f       	mul	r18, r20
     1ce:	c0 01       	movw	r24, r0
     1d0:	25 9f       	mul	r18, r21
     1d2:	90 0d       	add	r25, r0
     1d4:	34 9f       	mul	r19, r20
     1d6:	90 0d       	add	r25, r0
     1d8:	11 24       	eor	r1, r1
     1da:	fc 01       	movw	r30, r24
     1dc:	e9 52       	subi	r30, 0x29	; 41
     1de:	fd 4f       	sbci	r31, 0xFD	; 253
     1e0:	80 81       	ld	r24, Z
     1e2:	91 81       	ldd	r25, Z+1	; 0x01
     1e4:	9a 83       	std	Y+2, r25	; 0x02
     1e6:	89 83       	std	Y+1, r24	; 0x01
    sei();
     1e8:	78 94       	sei
    return ret;
     1ea:	89 81       	ldd	r24, Y+1	; 0x01
     1ec:	9a 81       	ldd	r25, Y+2	; 0x02
}
     1ee:	0f 90       	pop	r0
     1f0:	0f 90       	pop	r0
     1f2:	cf 91       	pop	r28
     1f4:	df 91       	pop	r29
     1f6:	08 95       	ret

000001f8 <spin_init>:

void spin_init( lock_t * lock )
{
     1f8:	df 93       	push	r29
     1fa:	cf 93       	push	r28
     1fc:	00 d0       	rcall	.+0      	; 0x1fe <spin_init+0x6>
     1fe:	cd b7       	in	r28, 0x3d	; 61
     200:	de b7       	in	r29, 0x3e	; 62
     202:	9a 83       	std	Y+2, r25	; 0x02
     204:	89 83       	std	Y+1, r24	; 0x01
    cli();
     206:	f8 94       	cli
    *lock = (lock_t)0;
     208:	e9 81       	ldd	r30, Y+1	; 0x01
     20a:	fa 81       	ldd	r31, Y+2	; 0x02
     20c:	10 82       	st	Z, r1
    sei();
     20e:	78 94       	sei
}
     210:	0f 90       	pop	r0
     212:	0f 90       	pop	r0
     214:	cf 91       	pop	r28
     216:	df 91       	pop	r29
     218:	08 95       	ret

0000021a <spin_lock>:

void spin_lock( lock_t * lock )
{
     21a:	df 93       	push	r29
     21c:	cf 93       	push	r28
     21e:	00 d0       	rcall	.+0      	; 0x220 <spin_lock+0x6>
     220:	00 d0       	rcall	.+0      	; 0x222 <spin_lock+0x8>
     222:	cd b7       	in	r28, 0x3d	; 61
     224:	de b7       	in	r29, 0x3e	; 62
     226:	9c 83       	std	Y+4, r25	; 0x04
     228:	8b 83       	std	Y+3, r24	; 0x03
    unsigned short i;
    while(1)
    {
        cli();
     22a:	f8 94       	cli
        if(!*lock)
     22c:	eb 81       	ldd	r30, Y+3	; 0x03
     22e:	fc 81       	ldd	r31, Y+4	; 0x04
     230:	80 81       	ld	r24, Z
     232:	88 23       	and	r24, r24
     234:	41 f4       	brne	.+16     	; 0x246 <spin_lock+0x2c>
        {
            *lock = (lock_t)1;
     236:	eb 81       	ldd	r30, Y+3	; 0x03
     238:	fc 81       	ldd	r31, Y+4	; 0x04
     23a:	81 e0       	ldi	r24, 0x01	; 1
     23c:	80 83       	st	Z, r24
            goto end;
        }
        sei();
    }
end:
    sei();
     23e:	78 94       	sei
    for(i = 0; i< 1000; i++);// delay, all other vms must spin for a while
     240:	1a 82       	std	Y+2, r1	; 0x02
     242:	19 82       	std	Y+1, r1	; 0x01
     244:	07 c0       	rjmp	.+14     	; 0x254 <spin_lock+0x3a>
        if(!*lock)
        {
            *lock = (lock_t)1;
            goto end;
        }
        sei();
     246:	78 94       	sei
     248:	f0 cf       	rjmp	.-32     	; 0x22a <spin_lock+0x10>
    }
end:
    sei();
    for(i = 0; i< 1000; i++);// delay, all other vms must spin for a while
     24a:	89 81       	ldd	r24, Y+1	; 0x01
     24c:	9a 81       	ldd	r25, Y+2	; 0x02
     24e:	01 96       	adiw	r24, 0x01	; 1
     250:	9a 83       	std	Y+2, r25	; 0x02
     252:	89 83       	std	Y+1, r24	; 0x01
     254:	89 81       	ldd	r24, Y+1	; 0x01
     256:	9a 81       	ldd	r25, Y+2	; 0x02
     258:	23 e0       	ldi	r18, 0x03	; 3
     25a:	88 3e       	cpi	r24, 0xE8	; 232
     25c:	92 07       	cpc	r25, r18
     25e:	a8 f3       	brcs	.-22     	; 0x24a <spin_lock+0x30>
}
     260:	0f 90       	pop	r0
     262:	0f 90       	pop	r0
     264:	0f 90       	pop	r0
     266:	0f 90       	pop	r0
     268:	cf 91       	pop	r28
     26a:	df 91       	pop	r29
     26c:	08 95       	ret

0000026e <spin_unlock>:
void spin_unlock(lock_t * lock)
{
     26e:	df 93       	push	r29
     270:	cf 93       	push	r28
     272:	00 d0       	rcall	.+0      	; 0x274 <spin_unlock+0x6>
     274:	cd b7       	in	r28, 0x3d	; 61
     276:	de b7       	in	r29, 0x3e	; 62
     278:	9a 83       	std	Y+2, r25	; 0x02
     27a:	89 83       	std	Y+1, r24	; 0x01
    cli();
     27c:	f8 94       	cli
    *lock = (lock_t)0;
     27e:	e9 81       	ldd	r30, Y+1	; 0x01
     280:	fa 81       	ldd	r31, Y+2	; 0x02
     282:	10 82       	st	Z, r1
    sei();
     284:	78 94       	sei
}
     286:	0f 90       	pop	r0
     288:	0f 90       	pop	r0
     28a:	cf 91       	pop	r28
     28c:	df 91       	pop	r29
     28e:	08 95       	ret

00000290 <stat_init>:
// stat_t is simply prcess counter here!
void stat_init( stat_t * stat )
{
     290:	df 93       	push	r29
     292:	cf 93       	push	r28
     294:	00 d0       	rcall	.+0      	; 0x296 <stat_init+0x6>
     296:	cd b7       	in	r28, 0x3d	; 61
     298:	de b7       	in	r29, 0x3e	; 62
     29a:	9a 83       	std	Y+2, r25	; 0x02
     29c:	89 83       	std	Y+1, r24	; 0x01
    *stat = 0; // no lad on a system
     29e:	e9 81       	ldd	r30, Y+1	; 0x01
     2a0:	fa 81       	ldd	r31, Y+2	; 0x02
     2a2:	10 82       	st	Z, r1
}
     2a4:	0f 90       	pop	r0
     2a6:	0f 90       	pop	r0
     2a8:	cf 91       	pop	r28
     2aa:	df 91       	pop	r29
     2ac:	08 95       	ret

000002ae <stat_dec>:
void stat_dec( proc_t * proc, stat_t * stat )
{
     2ae:	df 93       	push	r29
     2b0:	cf 93       	push	r28
     2b2:	00 d0       	rcall	.+0      	; 0x2b4 <stat_dec+0x6>
     2b4:	00 d0       	rcall	.+0      	; 0x2b6 <stat_dec+0x8>
     2b6:	cd b7       	in	r28, 0x3d	; 61
     2b8:	de b7       	in	r29, 0x3e	; 62
     2ba:	9a 83       	std	Y+2, r25	; 0x02
     2bc:	89 83       	std	Y+1, r24	; 0x01
     2be:	7c 83       	std	Y+4, r23	; 0x04
     2c0:	6b 83       	std	Y+3, r22	; 0x03
    (*stat)--;
     2c2:	eb 81       	ldd	r30, Y+3	; 0x03
     2c4:	fc 81       	ldd	r31, Y+4	; 0x04
     2c6:	80 81       	ld	r24, Z
     2c8:	81 50       	subi	r24, 0x01	; 1
     2ca:	eb 81       	ldd	r30, Y+3	; 0x03
     2cc:	fc 81       	ldd	r31, Y+4	; 0x04
     2ce:	80 83       	st	Z, r24
}
     2d0:	0f 90       	pop	r0
     2d2:	0f 90       	pop	r0
     2d4:	0f 90       	pop	r0
     2d6:	0f 90       	pop	r0
     2d8:	cf 91       	pop	r28
     2da:	df 91       	pop	r29
     2dc:	08 95       	ret

000002de <stat_inc>:
void stat_inc( proc_t * proc, stat_t * stat )
{
     2de:	df 93       	push	r29
     2e0:	cf 93       	push	r28
     2e2:	00 d0       	rcall	.+0      	; 0x2e4 <stat_inc+0x6>
     2e4:	00 d0       	rcall	.+0      	; 0x2e6 <stat_inc+0x8>
     2e6:	cd b7       	in	r28, 0x3d	; 61
     2e8:	de b7       	in	r29, 0x3e	; 62
     2ea:	9a 83       	std	Y+2, r25	; 0x02
     2ec:	89 83       	std	Y+1, r24	; 0x01
     2ee:	7c 83       	std	Y+4, r23	; 0x04
     2f0:	6b 83       	std	Y+3, r22	; 0x03
    (*stat)++;
     2f2:	eb 81       	ldd	r30, Y+3	; 0x03
     2f4:	fc 81       	ldd	r31, Y+4	; 0x04
     2f6:	80 81       	ld	r24, Z
     2f8:	8f 5f       	subi	r24, 0xFF	; 255
     2fa:	eb 81       	ldd	r30, Y+3	; 0x03
     2fc:	fc 81       	ldd	r31, Y+4	; 0x04
     2fe:	80 83       	st	Z, r24
}
     300:	0f 90       	pop	r0
     302:	0f 90       	pop	r0
     304:	0f 90       	pop	r0
     306:	0f 90       	pop	r0
     308:	cf 91       	pop	r28
     30a:	df 91       	pop	r29
     30c:	08 95       	ret

0000030e <stat_merge>:
void stat_merge( stat_t *src_stat, stat_t * dst_stat  )
{
     30e:	df 93       	push	r29
     310:	cf 93       	push	r28
     312:	00 d0       	rcall	.+0      	; 0x314 <stat_merge+0x6>
     314:	00 d0       	rcall	.+0      	; 0x316 <stat_merge+0x8>
     316:	cd b7       	in	r28, 0x3d	; 61
     318:	de b7       	in	r29, 0x3e	; 62
     31a:	9a 83       	std	Y+2, r25	; 0x02
     31c:	89 83       	std	Y+1, r24	; 0x01
     31e:	7c 83       	std	Y+4, r23	; 0x04
     320:	6b 83       	std	Y+3, r22	; 0x03
    *dst_stat += *src_stat;
     322:	eb 81       	ldd	r30, Y+3	; 0x03
     324:	fc 81       	ldd	r31, Y+4	; 0x04
     326:	90 81       	ld	r25, Z
     328:	e9 81       	ldd	r30, Y+1	; 0x01
     32a:	fa 81       	ldd	r31, Y+2	; 0x02
     32c:	80 81       	ld	r24, Z
     32e:	89 0f       	add	r24, r25
     330:	eb 81       	ldd	r30, Y+3	; 0x03
     332:	fc 81       	ldd	r31, Y+4	; 0x04
     334:	80 83       	st	Z, r24
    *src_stat = (stat_t)0;
     336:	e9 81       	ldd	r30, Y+1	; 0x01
     338:	fa 81       	ldd	r31, Y+2	; 0x02
     33a:	10 82       	st	Z, r1
}
     33c:	0f 90       	pop	r0
     33e:	0f 90       	pop	r0
     340:	0f 90       	pop	r0
     342:	0f 90       	pop	r0
     344:	cf 91       	pop	r28
     346:	df 91       	pop	r29
     348:	08 95       	ret

0000034a <stat_calc_load>:
load_t stat_calc_load(prio_t prio, stat_t * stat)
{
     34a:	df 93       	push	r29
     34c:	cf 93       	push	r28
     34e:	00 d0       	rcall	.+0      	; 0x350 <stat_calc_load+0x6>
     350:	0f 92       	push	r0
     352:	cd b7       	in	r28, 0x3d	; 61
     354:	de b7       	in	r29, 0x3e	; 62
     356:	89 83       	std	Y+1, r24	; 0x01
     358:	7b 83       	std	Y+3, r23	; 0x03
     35a:	6a 83       	std	Y+2, r22	; 0x02
    return (load_t)*stat;
     35c:	ea 81       	ldd	r30, Y+2	; 0x02
     35e:	fb 81       	ldd	r31, Y+3	; 0x03
     360:	80 81       	ld	r24, Z
}
     362:	0f 90       	pop	r0
     364:	0f 90       	pop	r0
     366:	0f 90       	pop	r0
     368:	cf 91       	pop	r28
     36a:	df 91       	pop	r29
     36c:	08 95       	ret

0000036e <resched>:
void resched(core_id_t core_id)
{
     36e:	df 93       	push	r29
     370:	cf 93       	push	r28
     372:	0f 92       	push	r0
     374:	cd b7       	in	r28, 0x3d	; 61
     376:	de b7       	in	r29, 0x3e	; 62
     378:	89 83       	std	Y+1, r24	; 0x01
    vsmp_vinterrupt_isr( core_id, ( vinterrupt_t * )resched_vectors + core_id );
     37a:	89 81       	ldd	r24, Y+1	; 0x01
     37c:	88 2f       	mov	r24, r24
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	88 0f       	add	r24, r24
     382:	99 1f       	adc	r25, r25
     384:	88 0f       	add	r24, r24
     386:	99 1f       	adc	r25, r25
     388:	88 0f       	add	r24, r24
     38a:	99 1f       	adc	r25, r25
     38c:	9c 01       	movw	r18, r24
     38e:	25 5d       	subi	r18, 0xD5	; 213
     390:	3e 4f       	sbci	r19, 0xFE	; 254
     392:	89 81       	ldd	r24, Y+1	; 0x01
     394:	b9 01       	movw	r22, r18
     396:	0e 94 85 09 	call	0x130a	; 0x130a <vsmp_vinterrupt_isr>
}
     39a:	0f 90       	pop	r0
     39c:	cf 91       	pop	r28
     39e:	df 91       	pop	r29
     3a0:	08 95       	ret

000003a2 <resched_isr>:
#include "bugurt_kernel.h"

///!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
__MACRO_FUNCTION__(_bugurt_isr_prologue)
{
    cli();
     3a2:	f8 94       	cli
    kernel.sched[current_vm].current_proc->spointer = vm_state[current_vm].sp;
     3a4:	80 91 12 01 	lds	r24, 0x0112
     3a8:	28 2f       	mov	r18, r24
     3aa:	30 e0       	ldi	r19, 0x00	; 0
     3ac:	8b e2       	ldi	r24, 0x2B	; 43
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	ac 01       	movw	r20, r24
     3b2:	24 9f       	mul	r18, r20
     3b4:	c0 01       	movw	r24, r0
     3b6:	25 9f       	mul	r18, r21
     3b8:	90 0d       	add	r25, r0
     3ba:	34 9f       	mul	r19, r20
     3bc:	90 0d       	add	r25, r0
     3be:	11 24       	eor	r1, r1
     3c0:	fc 01       	movw	r30, r24
     3c2:	e9 52       	subi	r30, 0x29	; 41
     3c4:	fd 4f       	sbci	r31, 0xFD	; 253
     3c6:	a0 81       	ld	r26, Z
     3c8:	b1 81       	ldd	r27, Z+1	; 0x01
     3ca:	80 91 12 01 	lds	r24, 0x0112
     3ce:	28 2f       	mov	r18, r24
     3d0:	30 e0       	ldi	r19, 0x00	; 0
     3d2:	c9 01       	movw	r24, r18
     3d4:	88 0f       	add	r24, r24
     3d6:	99 1f       	adc	r25, r25
     3d8:	88 0f       	add	r24, r24
     3da:	99 1f       	adc	r25, r25
     3dc:	88 0f       	add	r24, r24
     3de:	99 1f       	adc	r25, r25
     3e0:	82 0f       	add	r24, r18
     3e2:	93 1f       	adc	r25, r19
     3e4:	fc 01       	movw	r30, r24
     3e6:	e8 5e       	subi	r30, 0xE8	; 232
     3e8:	fe 4f       	sbci	r31, 0xFE	; 254
     3ea:	80 81       	ld	r24, Z
     3ec:	91 81       	ldd	r25, Z+1	; 0x01
     3ee:	9f 96       	adiw	r26, 0x2f	; 47
     3f0:	9c 93       	st	X, r25
     3f2:	8e 93       	st	-X, r24
     3f4:	9e 97       	sbiw	r26, 0x2e	; 46
    sei();
     3f6:	78 94       	sei
vinterrupt_t resched_vectors[MAX_CORES];
__attribute__ (( naked )) void resched_isr(void)
{
    _bugurt_isr_prologue();

    sched_reschedule();
     3f8:	0e 94 32 19 	call	0x3264	; 0x3264 <sched_reschedule>
    kernel.sched[current_vm].current_proc->spointer = vm_state[current_vm].sp;
    sei();
}
__MACRO_FUNCTION__(_bugurt_isr_epilogue)
{
    cli();
     3fc:	f8 94       	cli
    vm_state[current_vm].sp = kernel.sched[current_vm].current_proc->spointer;
     3fe:	80 91 12 01 	lds	r24, 0x0112
     402:	48 2f       	mov	r20, r24
     404:	50 e0       	ldi	r21, 0x00	; 0
     406:	80 91 12 01 	lds	r24, 0x0112
     40a:	28 2f       	mov	r18, r24
     40c:	30 e0       	ldi	r19, 0x00	; 0
     40e:	8b e2       	ldi	r24, 0x2B	; 43
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	bc 01       	movw	r22, r24
     414:	26 9f       	mul	r18, r22
     416:	c0 01       	movw	r24, r0
     418:	27 9f       	mul	r18, r23
     41a:	90 0d       	add	r25, r0
     41c:	36 9f       	mul	r19, r22
     41e:	90 0d       	add	r25, r0
     420:	11 24       	eor	r1, r1
     422:	fc 01       	movw	r30, r24
     424:	e9 52       	subi	r30, 0x29	; 41
     426:	fd 4f       	sbci	r31, 0xFD	; 253
     428:	01 90       	ld	r0, Z+
     42a:	f0 81       	ld	r31, Z
     42c:	e0 2d       	mov	r30, r0
     42e:	26 a5       	ldd	r18, Z+46	; 0x2e
     430:	37 a5       	ldd	r19, Z+47	; 0x2f
     432:	ca 01       	movw	r24, r20
     434:	88 0f       	add	r24, r24
     436:	99 1f       	adc	r25, r25
     438:	88 0f       	add	r24, r24
     43a:	99 1f       	adc	r25, r25
     43c:	88 0f       	add	r24, r24
     43e:	99 1f       	adc	r25, r25
     440:	84 0f       	add	r24, r20
     442:	95 1f       	adc	r25, r21
     444:	fc 01       	movw	r30, r24
     446:	e8 5e       	subi	r30, 0xE8	; 232
     448:	fe 4f       	sbci	r31, 0xFE	; 254
     44a:	31 83       	std	Z+1, r19	; 0x01
     44c:	20 83       	st	Z, r18
    __asm__ __volatile__("reti"::);
     44e:	18 95       	reti

00000450 <resched_vectors_init>:
    sched_reschedule();

    _bugurt_isr_epilogue();
}
void resched_vectors_init(void)
{
     450:	df 93       	push	r29
     452:	cf 93       	push	r28
     454:	0f 92       	push	r0
     456:	cd b7       	in	r28, 0x3d	; 61
     458:	de b7       	in	r29, 0x3e	; 62
    core_id_t i;
    for(i = 0; i < MAX_CORES; i++)
     45a:	19 82       	std	Y+1, r1	; 0x01
     45c:	13 c0       	rjmp	.+38     	; 0x484 <resched_vectors_init+0x34>
    {
        vsmp_vinterrupt_init( ( vinterrupt_t * )resched_vectors + i, resched_isr );
     45e:	89 81       	ldd	r24, Y+1	; 0x01
     460:	88 2f       	mov	r24, r24
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	88 0f       	add	r24, r24
     466:	99 1f       	adc	r25, r25
     468:	88 0f       	add	r24, r24
     46a:	99 1f       	adc	r25, r25
     46c:	88 0f       	add	r24, r24
     46e:	99 1f       	adc	r25, r25
     470:	85 5d       	subi	r24, 0xD5	; 213
     472:	9e 4f       	sbci	r25, 0xFE	; 254
     474:	21 ed       	ldi	r18, 0xD1	; 209
     476:	31 e0       	ldi	r19, 0x01	; 1
     478:	b9 01       	movw	r22, r18
     47a:	0e 94 f5 09 	call	0x13ea	; 0x13ea <vsmp_vinterrupt_init>
    _bugurt_isr_epilogue();
}
void resched_vectors_init(void)
{
    core_id_t i;
    for(i = 0; i < MAX_CORES; i++)
     47e:	89 81       	ldd	r24, Y+1	; 0x01
     480:	8f 5f       	subi	r24, 0xFF	; 255
     482:	89 83       	std	Y+1, r24	; 0x01
     484:	89 81       	ldd	r24, Y+1	; 0x01
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	50 f3       	brcs	.-44     	; 0x45e <resched_vectors_init+0xe>
    {
        vsmp_vinterrupt_init( ( vinterrupt_t * )resched_vectors + i, resched_isr );
    }
}
     48a:	0f 90       	pop	r0
     48c:	cf 91       	pop	r28
     48e:	df 91       	pop	r29
     490:	08 95       	ret

00000492 <_systimer_tick_isr>:
vinterrupt_t systimer_tick_vector;
vinterrupt_t systimer_vectors[MAX_CORES];
void _systimer_tick_isr(void)
{
     492:	df 93       	push	r29
     494:	cf 93       	push	r28
     496:	cd b7       	in	r28, 0x3d	; 61
     498:	de b7       	in	r29, 0x3e	; 62
    SPIN_LOCK_KERNEL_TIMER();
     49a:	80 e9       	ldi	r24, 0x90	; 144
     49c:	93 e0       	ldi	r25, 0x03	; 3
     49e:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    kernel.timer++;
     4a2:	80 91 91 03 	lds	r24, 0x0391
     4a6:	90 91 92 03 	lds	r25, 0x0392
     4aa:	01 96       	adiw	r24, 0x01	; 1
     4ac:	90 93 92 03 	sts	0x0392, r25
     4b0:	80 93 91 03 	sts	0x0391, r24
    if( kernel.timer_tick != (void (*)(void))0 ) kernel.timer_tick();
     4b4:	80 91 93 03 	lds	r24, 0x0393
     4b8:	90 91 94 03 	lds	r25, 0x0394
     4bc:	00 97       	sbiw	r24, 0x00	; 0
     4be:	29 f0       	breq	.+10     	; 0x4ca <_systimer_tick_isr+0x38>
     4c0:	e0 91 93 03 	lds	r30, 0x0393
     4c4:	f0 91 94 03 	lds	r31, 0x0394
     4c8:	09 95       	icall
    SPIN_UNLOCK_KERNEL_TIMER();
     4ca:	80 e9       	ldi	r24, 0x90	; 144
     4cc:	93 e0       	ldi	r25, 0x03	; 3
     4ce:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>

    systimer_vectors_fire();
     4d2:	0e 94 44 03 	call	0x688	; 0x688 <systimer_vectors_fire>
}
     4d6:	cf 91       	pop	r28
     4d8:	df 91       	pop	r29
     4da:	08 95       	ret

000004dc <systimer_tick_isr>:
#include "bugurt_kernel.h"

///!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
__MACRO_FUNCTION__(_bugurt_isr_prologue)
{
    cli();
     4dc:	f8 94       	cli
    kernel.sched[current_vm].current_proc->spointer = vm_state[current_vm].sp;
     4de:	80 91 12 01 	lds	r24, 0x0112
     4e2:	28 2f       	mov	r18, r24
     4e4:	30 e0       	ldi	r19, 0x00	; 0
     4e6:	8b e2       	ldi	r24, 0x2B	; 43
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	ac 01       	movw	r20, r24
     4ec:	24 9f       	mul	r18, r20
     4ee:	c0 01       	movw	r24, r0
     4f0:	25 9f       	mul	r18, r21
     4f2:	90 0d       	add	r25, r0
     4f4:	34 9f       	mul	r19, r20
     4f6:	90 0d       	add	r25, r0
     4f8:	11 24       	eor	r1, r1
     4fa:	fc 01       	movw	r30, r24
     4fc:	e9 52       	subi	r30, 0x29	; 41
     4fe:	fd 4f       	sbci	r31, 0xFD	; 253
     500:	a0 81       	ld	r26, Z
     502:	b1 81       	ldd	r27, Z+1	; 0x01
     504:	80 91 12 01 	lds	r24, 0x0112
     508:	28 2f       	mov	r18, r24
     50a:	30 e0       	ldi	r19, 0x00	; 0
     50c:	c9 01       	movw	r24, r18
     50e:	88 0f       	add	r24, r24
     510:	99 1f       	adc	r25, r25
     512:	88 0f       	add	r24, r24
     514:	99 1f       	adc	r25, r25
     516:	88 0f       	add	r24, r24
     518:	99 1f       	adc	r25, r25
     51a:	82 0f       	add	r24, r18
     51c:	93 1f       	adc	r25, r19
     51e:	fc 01       	movw	r30, r24
     520:	e8 5e       	subi	r30, 0xE8	; 232
     522:	fe 4f       	sbci	r31, 0xFE	; 254
     524:	80 81       	ld	r24, Z
     526:	91 81       	ldd	r25, Z+1	; 0x01
     528:	9f 96       	adiw	r26, 0x2f	; 47
     52a:	9c 93       	st	X, r25
     52c:	8e 93       	st	-X, r24
     52e:	9e 97       	sbiw	r26, 0x2e	; 46
    sei();
     530:	78 94       	sei
}
__attribute__ (( naked )) void systimer_tick_isr(void)
{
    _bugurt_isr_prologue();

    _systimer_tick_isr();
     532:	0e 94 49 02 	call	0x492	; 0x492 <_systimer_tick_isr>
    kernel.sched[current_vm].current_proc->spointer = vm_state[current_vm].sp;
    sei();
}
__MACRO_FUNCTION__(_bugurt_isr_epilogue)
{
    cli();
     536:	f8 94       	cli
    vm_state[current_vm].sp = kernel.sched[current_vm].current_proc->spointer;
     538:	80 91 12 01 	lds	r24, 0x0112
     53c:	48 2f       	mov	r20, r24
     53e:	50 e0       	ldi	r21, 0x00	; 0
     540:	80 91 12 01 	lds	r24, 0x0112
     544:	28 2f       	mov	r18, r24
     546:	30 e0       	ldi	r19, 0x00	; 0
     548:	8b e2       	ldi	r24, 0x2B	; 43
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	bc 01       	movw	r22, r24
     54e:	26 9f       	mul	r18, r22
     550:	c0 01       	movw	r24, r0
     552:	27 9f       	mul	r18, r23
     554:	90 0d       	add	r25, r0
     556:	36 9f       	mul	r19, r22
     558:	90 0d       	add	r25, r0
     55a:	11 24       	eor	r1, r1
     55c:	fc 01       	movw	r30, r24
     55e:	e9 52       	subi	r30, 0x29	; 41
     560:	fd 4f       	sbci	r31, 0xFD	; 253
     562:	01 90       	ld	r0, Z+
     564:	f0 81       	ld	r31, Z
     566:	e0 2d       	mov	r30, r0
     568:	26 a5       	ldd	r18, Z+46	; 0x2e
     56a:	37 a5       	ldd	r19, Z+47	; 0x2f
     56c:	ca 01       	movw	r24, r20
     56e:	88 0f       	add	r24, r24
     570:	99 1f       	adc	r25, r25
     572:	88 0f       	add	r24, r24
     574:	99 1f       	adc	r25, r25
     576:	88 0f       	add	r24, r24
     578:	99 1f       	adc	r25, r25
     57a:	84 0f       	add	r24, r20
     57c:	95 1f       	adc	r25, r21
     57e:	fc 01       	movw	r30, r24
     580:	e8 5e       	subi	r30, 0xE8	; 232
     582:	fe 4f       	sbci	r31, 0xFE	; 254
     584:	31 83       	std	Z+1, r19	; 0x01
     586:	20 83       	st	Z, r18
    __asm__ __volatile__("reti"::);
     588:	18 95       	reti

0000058a <systimer_sched_isr>:
#include "bugurt_kernel.h"

///!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
__MACRO_FUNCTION__(_bugurt_isr_prologue)
{
    cli();
     58a:	f8 94       	cli
    kernel.sched[current_vm].current_proc->spointer = vm_state[current_vm].sp;
     58c:	80 91 12 01 	lds	r24, 0x0112
     590:	28 2f       	mov	r18, r24
     592:	30 e0       	ldi	r19, 0x00	; 0
     594:	8b e2       	ldi	r24, 0x2B	; 43
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	ac 01       	movw	r20, r24
     59a:	24 9f       	mul	r18, r20
     59c:	c0 01       	movw	r24, r0
     59e:	25 9f       	mul	r18, r21
     5a0:	90 0d       	add	r25, r0
     5a2:	34 9f       	mul	r19, r20
     5a4:	90 0d       	add	r25, r0
     5a6:	11 24       	eor	r1, r1
     5a8:	fc 01       	movw	r30, r24
     5aa:	e9 52       	subi	r30, 0x29	; 41
     5ac:	fd 4f       	sbci	r31, 0xFD	; 253
     5ae:	a0 81       	ld	r26, Z
     5b0:	b1 81       	ldd	r27, Z+1	; 0x01
     5b2:	80 91 12 01 	lds	r24, 0x0112
     5b6:	28 2f       	mov	r18, r24
     5b8:	30 e0       	ldi	r19, 0x00	; 0
     5ba:	c9 01       	movw	r24, r18
     5bc:	88 0f       	add	r24, r24
     5be:	99 1f       	adc	r25, r25
     5c0:	88 0f       	add	r24, r24
     5c2:	99 1f       	adc	r25, r25
     5c4:	88 0f       	add	r24, r24
     5c6:	99 1f       	adc	r25, r25
     5c8:	82 0f       	add	r24, r18
     5ca:	93 1f       	adc	r25, r19
     5cc:	fc 01       	movw	r30, r24
     5ce:	e8 5e       	subi	r30, 0xE8	; 232
     5d0:	fe 4f       	sbci	r31, 0xFE	; 254
     5d2:	80 81       	ld	r24, Z
     5d4:	91 81       	ldd	r25, Z+1	; 0x01
     5d6:	9f 96       	adiw	r26, 0x2f	; 47
     5d8:	9c 93       	st	X, r25
     5da:	8e 93       	st	-X, r24
     5dc:	9e 97       	sbiw	r26, 0x2e	; 46
    sei();
     5de:	78 94       	sei

__attribute__ (( naked )) void systimer_sched_isr(void)
{
    _bugurt_isr_prologue();

    sched_schedule();
     5e0:	0e 94 2d 18 	call	0x305a	; 0x305a <sched_schedule>
    kernel.sched[current_vm].current_proc->spointer = vm_state[current_vm].sp;
    sei();
}
__MACRO_FUNCTION__(_bugurt_isr_epilogue)
{
    cli();
     5e4:	f8 94       	cli
    vm_state[current_vm].sp = kernel.sched[current_vm].current_proc->spointer;
     5e6:	80 91 12 01 	lds	r24, 0x0112
     5ea:	48 2f       	mov	r20, r24
     5ec:	50 e0       	ldi	r21, 0x00	; 0
     5ee:	80 91 12 01 	lds	r24, 0x0112
     5f2:	28 2f       	mov	r18, r24
     5f4:	30 e0       	ldi	r19, 0x00	; 0
     5f6:	8b e2       	ldi	r24, 0x2B	; 43
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	bc 01       	movw	r22, r24
     5fc:	26 9f       	mul	r18, r22
     5fe:	c0 01       	movw	r24, r0
     600:	27 9f       	mul	r18, r23
     602:	90 0d       	add	r25, r0
     604:	36 9f       	mul	r19, r22
     606:	90 0d       	add	r25, r0
     608:	11 24       	eor	r1, r1
     60a:	fc 01       	movw	r30, r24
     60c:	e9 52       	subi	r30, 0x29	; 41
     60e:	fd 4f       	sbci	r31, 0xFD	; 253
     610:	01 90       	ld	r0, Z+
     612:	f0 81       	ld	r31, Z
     614:	e0 2d       	mov	r30, r0
     616:	26 a5       	ldd	r18, Z+46	; 0x2e
     618:	37 a5       	ldd	r19, Z+47	; 0x2f
     61a:	ca 01       	movw	r24, r20
     61c:	88 0f       	add	r24, r24
     61e:	99 1f       	adc	r25, r25
     620:	88 0f       	add	r24, r24
     622:	99 1f       	adc	r25, r25
     624:	88 0f       	add	r24, r24
     626:	99 1f       	adc	r25, r25
     628:	84 0f       	add	r24, r20
     62a:	95 1f       	adc	r25, r21
     62c:	fc 01       	movw	r30, r24
     62e:	e8 5e       	subi	r30, 0xE8	; 232
     630:	fe 4f       	sbci	r31, 0xFE	; 254
     632:	31 83       	std	Z+1, r19	; 0x01
     634:	20 83       	st	Z, r18
    __asm__ __volatile__("reti"::);
     636:	18 95       	reti

00000638 <systimer_vectors_init>:

    _bugurt_isr_epilogue();
}

void systimer_vectors_init(void)
{
     638:	df 93       	push	r29
     63a:	cf 93       	push	r28
     63c:	0f 92       	push	r0
     63e:	cd b7       	in	r28, 0x3d	; 61
     640:	de b7       	in	r29, 0x3e	; 62
    core_id_t i;
    vsmp_vinterrupt_init( &systimer_tick_vector, systimer_tick_isr ); // Zero core is "mater", it handles kernel.timer
     642:	8b e4       	ldi	r24, 0x4B	; 75
     644:	91 e0       	ldi	r25, 0x01	; 1
     646:	2e e6       	ldi	r18, 0x6E	; 110
     648:	32 e0       	ldi	r19, 0x02	; 2
     64a:	b9 01       	movw	r22, r18
     64c:	0e 94 f5 09 	call	0x13ea	; 0x13ea <vsmp_vinterrupt_init>
    for(i = 0; i < MAX_CORES; i++)
     650:	19 82       	std	Y+1, r1	; 0x01
     652:	13 c0       	rjmp	.+38     	; 0x67a <systimer_vectors_init+0x42>
    {
        vsmp_vinterrupt_init( (vinterrupt_t *)systimer_vectors + i, systimer_sched_isr ); // Other cores are slaves they just shedule.
     654:	89 81       	ldd	r24, Y+1	; 0x01
     656:	88 2f       	mov	r24, r24
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	88 0f       	add	r24, r24
     65c:	99 1f       	adc	r25, r25
     65e:	88 0f       	add	r24, r24
     660:	99 1f       	adc	r25, r25
     662:	88 0f       	add	r24, r24
     664:	99 1f       	adc	r25, r25
     666:	85 5c       	subi	r24, 0xC5	; 197
     668:	9e 4f       	sbci	r25, 0xFE	; 254
     66a:	25 ec       	ldi	r18, 0xC5	; 197
     66c:	32 e0       	ldi	r19, 0x02	; 2
     66e:	b9 01       	movw	r22, r18
     670:	0e 94 f5 09 	call	0x13ea	; 0x13ea <vsmp_vinterrupt_init>

void systimer_vectors_init(void)
{
    core_id_t i;
    vsmp_vinterrupt_init( &systimer_tick_vector, systimer_tick_isr ); // Zero core is "mater", it handles kernel.timer
    for(i = 0; i < MAX_CORES; i++)
     674:	89 81       	ldd	r24, Y+1	; 0x01
     676:	8f 5f       	subi	r24, 0xFF	; 255
     678:	89 83       	std	Y+1, r24	; 0x01
     67a:	89 81       	ldd	r24, Y+1	; 0x01
     67c:	82 30       	cpi	r24, 0x02	; 2
     67e:	50 f3       	brcs	.-44     	; 0x654 <systimer_vectors_init+0x1c>
    {
        vsmp_vinterrupt_init( (vinterrupt_t *)systimer_vectors + i, systimer_sched_isr ); // Other cores are slaves they just shedule.
    }
}
     680:	0f 90       	pop	r0
     682:	cf 91       	pop	r28
     684:	df 91       	pop	r29
     686:	08 95       	ret

00000688 <systimer_vectors_fire>:

void systimer_vectors_fire(void)
{
     688:	df 93       	push	r29
     68a:	cf 93       	push	r28
     68c:	0f 92       	push	r0
     68e:	cd b7       	in	r28, 0x3d	; 61
     690:	de b7       	in	r29, 0x3e	; 62
    core_id_t i;
    for(i = 0; i < MAX_CORES; i++)
     692:	19 82       	std	Y+1, r1	; 0x01
     694:	13 c0       	rjmp	.+38     	; 0x6bc <systimer_vectors_fire+0x34>
    {
        vsmp_vinterrupt_isr( i, (vinterrupt_t *)systimer_vectors + i );
     696:	89 81       	ldd	r24, Y+1	; 0x01
     698:	88 2f       	mov	r24, r24
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	88 0f       	add	r24, r24
     69e:	99 1f       	adc	r25, r25
     6a0:	88 0f       	add	r24, r24
     6a2:	99 1f       	adc	r25, r25
     6a4:	88 0f       	add	r24, r24
     6a6:	99 1f       	adc	r25, r25
     6a8:	9c 01       	movw	r18, r24
     6aa:	25 5c       	subi	r18, 0xC5	; 197
     6ac:	3e 4f       	sbci	r19, 0xFE	; 254
     6ae:	89 81       	ldd	r24, Y+1	; 0x01
     6b0:	b9 01       	movw	r22, r18
     6b2:	0e 94 85 09 	call	0x130a	; 0x130a <vsmp_vinterrupt_isr>
}

void systimer_vectors_fire(void)
{
    core_id_t i;
    for(i = 0; i < MAX_CORES; i++)
     6b6:	89 81       	ldd	r24, Y+1	; 0x01
     6b8:	8f 5f       	subi	r24, 0xFF	; 255
     6ba:	89 83       	std	Y+1, r24	; 0x01
     6bc:	89 81       	ldd	r24, Y+1	; 0x01
     6be:	82 30       	cpi	r24, 0x02	; 2
     6c0:	50 f3       	brcs	.-44     	; 0x696 <systimer_vectors_fire+0xe>
    {
        vsmp_vinterrupt_isr( i, (vinterrupt_t *)systimer_vectors + i );
    }
}
     6c2:	0f 90       	pop	r0
     6c4:	cf 91       	pop	r28
     6c6:	df 91       	pop	r29
     6c8:	08 95       	ret

000006ca <vsmp_systimer_hook_bugurt>:


count_t systimer_hook_counter = 0;
void vsmp_systimer_hook_bugurt(void)
{
     6ca:	df 93       	push	r29
     6cc:	cf 93       	push	r28
     6ce:	cd b7       	in	r28, 0x3d	; 61
     6d0:	de b7       	in	r29, 0x3e	; 62
    if(!current_vm)
     6d2:	80 91 12 01 	lds	r24, 0x0112
     6d6:	88 23       	and	r24, r24
     6d8:	d1 f4       	brne	.+52     	; 0x70e <vsmp_systimer_hook_bugurt+0x44>
    {
        systimer_hook_counter++;
     6da:	80 91 00 01 	lds	r24, 0x0100
     6de:	90 91 01 01 	lds	r25, 0x0101
     6e2:	01 96       	adiw	r24, 0x01	; 1
     6e4:	90 93 01 01 	sts	0x0101, r25
     6e8:	80 93 00 01 	sts	0x0100, r24
        if( systimer_hook_counter >= CONFIG_SYSTIMER_HOOK_THR )
     6ec:	80 91 00 01 	lds	r24, 0x0100
     6f0:	90 91 01 01 	lds	r25, 0x0101
     6f4:	84 36       	cpi	r24, 0x64	; 100
     6f6:	91 05       	cpc	r25, r1
     6f8:	50 f0       	brcs	.+20     	; 0x70e <vsmp_systimer_hook_bugurt+0x44>
        {
            systimer_hook_counter = (count_t)0;
     6fa:	10 92 01 01 	sts	0x0101, r1
     6fe:	10 92 00 01 	sts	0x0100, r1
            vsmp_vinterrupt_isr(0,&systimer_tick_vector);
     702:	2b e4       	ldi	r18, 0x4B	; 75
     704:	31 e0       	ldi	r19, 0x01	; 1
     706:	80 e0       	ldi	r24, 0x00	; 0
     708:	b9 01       	movw	r22, r18
     70a:	0e 94 85 09 	call	0x130a	; 0x130a <vsmp_vinterrupt_isr>
        }

    }
}
     70e:	cf 91       	pop	r28
     710:	df 91       	pop	r29
     712:	08 95       	ret

00000714 <_syscall_isr>:
syscall_t syscall_num[MAX_CORES];
void * syscall_arg[MAX_CORES];

// Local variable is used compiler generated prologue and epilogue needed
void _syscall_isr(void)
{
     714:	df 93       	push	r29
     716:	cf 93       	push	r28
     718:	0f 92       	push	r0
     71a:	cd b7       	in	r28, 0x3d	; 61
     71c:	de b7       	in	r29, 0x3e	; 62
    core_id_t core;
    core = current_core();
     71e:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <current_core>
     722:	89 83       	std	Y+1, r24	; 0x01
    do_syscall( syscall_num[core], syscall_arg[core] );
     724:	89 81       	ldd	r24, Y+1	; 0x01
     726:	88 2f       	mov	r24, r24
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	fc 01       	movw	r30, r24
     72c:	e7 5d       	subi	r30, 0xD7	; 215
     72e:	fe 4f       	sbci	r31, 0xFE	; 254
     730:	40 81       	ld	r20, Z
     732:	89 81       	ldd	r24, Y+1	; 0x01
     734:	88 2f       	mov	r24, r24
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	88 0f       	add	r24, r24
     73a:	99 1f       	adc	r25, r25
     73c:	fc 01       	movw	r30, r24
     73e:	eb 5d       	subi	r30, 0xDB	; 219
     740:	fe 4f       	sbci	r31, 0xFE	; 254
     742:	20 81       	ld	r18, Z
     744:	31 81       	ldd	r19, Z+1	; 0x01
     746:	84 2f       	mov	r24, r20
     748:	b9 01       	movw	r22, r18
     74a:	0e 94 bb 1c 	call	0x3976	; 0x3976 <do_syscall>
}
     74e:	0f 90       	pop	r0
     750:	cf 91       	pop	r28
     752:	df 91       	pop	r29
     754:	08 95       	ret

00000756 <syscall_isr>:
#include "bugurt_kernel.h"

///!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
__MACRO_FUNCTION__(_bugurt_isr_prologue)
{
    cli();
     756:	f8 94       	cli
    kernel.sched[current_vm].current_proc->spointer = vm_state[current_vm].sp;
     758:	80 91 12 01 	lds	r24, 0x0112
     75c:	28 2f       	mov	r18, r24
     75e:	30 e0       	ldi	r19, 0x00	; 0
     760:	8b e2       	ldi	r24, 0x2B	; 43
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	ac 01       	movw	r20, r24
     766:	24 9f       	mul	r18, r20
     768:	c0 01       	movw	r24, r0
     76a:	25 9f       	mul	r18, r21
     76c:	90 0d       	add	r25, r0
     76e:	34 9f       	mul	r19, r20
     770:	90 0d       	add	r25, r0
     772:	11 24       	eor	r1, r1
     774:	fc 01       	movw	r30, r24
     776:	e9 52       	subi	r30, 0x29	; 41
     778:	fd 4f       	sbci	r31, 0xFD	; 253
     77a:	a0 81       	ld	r26, Z
     77c:	b1 81       	ldd	r27, Z+1	; 0x01
     77e:	80 91 12 01 	lds	r24, 0x0112
     782:	28 2f       	mov	r18, r24
     784:	30 e0       	ldi	r19, 0x00	; 0
     786:	c9 01       	movw	r24, r18
     788:	88 0f       	add	r24, r24
     78a:	99 1f       	adc	r25, r25
     78c:	88 0f       	add	r24, r24
     78e:	99 1f       	adc	r25, r25
     790:	88 0f       	add	r24, r24
     792:	99 1f       	adc	r25, r25
     794:	82 0f       	add	r24, r18
     796:	93 1f       	adc	r25, r19
     798:	fc 01       	movw	r30, r24
     79a:	e8 5e       	subi	r30, 0xE8	; 232
     79c:	fe 4f       	sbci	r31, 0xFE	; 254
     79e:	80 81       	ld	r24, Z
     7a0:	91 81       	ldd	r25, Z+1	; 0x01
     7a2:	9f 96       	adiw	r26, 0x2f	; 47
     7a4:	9c 93       	st	X, r25
     7a6:	8e 93       	st	-X, r24
     7a8:	9e 97       	sbiw	r26, 0x2e	; 46
    sei();
     7aa:	78 94       	sei
}
__attribute__ (( naked )) void syscall_isr(void)
{
    _bugurt_isr_prologue();

    _syscall_isr();
     7ac:	0e 94 8a 03 	call	0x714	; 0x714 <_syscall_isr>
    kernel.sched[current_vm].current_proc->spointer = vm_state[current_vm].sp;
    sei();
}
__MACRO_FUNCTION__(_bugurt_isr_epilogue)
{
    cli();
     7b0:	f8 94       	cli
    vm_state[current_vm].sp = kernel.sched[current_vm].current_proc->spointer;
     7b2:	80 91 12 01 	lds	r24, 0x0112
     7b6:	48 2f       	mov	r20, r24
     7b8:	50 e0       	ldi	r21, 0x00	; 0
     7ba:	80 91 12 01 	lds	r24, 0x0112
     7be:	28 2f       	mov	r18, r24
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	8b e2       	ldi	r24, 0x2B	; 43
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	bc 01       	movw	r22, r24
     7c8:	26 9f       	mul	r18, r22
     7ca:	c0 01       	movw	r24, r0
     7cc:	27 9f       	mul	r18, r23
     7ce:	90 0d       	add	r25, r0
     7d0:	36 9f       	mul	r19, r22
     7d2:	90 0d       	add	r25, r0
     7d4:	11 24       	eor	r1, r1
     7d6:	fc 01       	movw	r30, r24
     7d8:	e9 52       	subi	r30, 0x29	; 41
     7da:	fd 4f       	sbci	r31, 0xFD	; 253
     7dc:	01 90       	ld	r0, Z+
     7de:	f0 81       	ld	r31, Z
     7e0:	e0 2d       	mov	r30, r0
     7e2:	26 a5       	ldd	r18, Z+46	; 0x2e
     7e4:	37 a5       	ldd	r19, Z+47	; 0x2f
     7e6:	ca 01       	movw	r24, r20
     7e8:	88 0f       	add	r24, r24
     7ea:	99 1f       	adc	r25, r25
     7ec:	88 0f       	add	r24, r24
     7ee:	99 1f       	adc	r25, r25
     7f0:	88 0f       	add	r24, r24
     7f2:	99 1f       	adc	r25, r25
     7f4:	84 0f       	add	r24, r20
     7f6:	95 1f       	adc	r25, r21
     7f8:	fc 01       	movw	r30, r24
     7fa:	e8 5e       	subi	r30, 0xE8	; 232
     7fc:	fe 4f       	sbci	r31, 0xFE	; 254
     7fe:	31 83       	std	Z+1, r19	; 0x01
     800:	20 83       	st	Z, r18
    __asm__ __volatile__("reti"::);
     802:	18 95       	reti

00000804 <syscall_vectors_init>:
    _bugurt_isr_epilogue();
}


void syscall_vectors_init(void)
{
     804:	df 93       	push	r29
     806:	cf 93       	push	r28
     808:	0f 92       	push	r0
     80a:	cd b7       	in	r28, 0x3d	; 61
     80c:	de b7       	in	r29, 0x3e	; 62
    core_id_t i;
    for(i = 0; i < MAX_CORES; i++)
     80e:	19 82       	std	Y+1, r1	; 0x01
     810:	24 c0       	rjmp	.+72     	; 0x85a <syscall_vectors_init+0x56>
    {
        vsmp_vinterrupt_init( ( vinterrupt_t * )syscall_vectors + i, syscall_isr );
     812:	89 81       	ldd	r24, Y+1	; 0x01
     814:	88 2f       	mov	r24, r24
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	88 0f       	add	r24, r24
     81a:	99 1f       	adc	r25, r25
     81c:	88 0f       	add	r24, r24
     81e:	99 1f       	adc	r25, r25
     820:	88 0f       	add	r24, r24
     822:	99 1f       	adc	r25, r25
     824:	8e 5f       	subi	r24, 0xFE	; 254
     826:	9e 4f       	sbci	r25, 0xFE	; 254
     828:	2b ea       	ldi	r18, 0xAB	; 171
     82a:	33 e0       	ldi	r19, 0x03	; 3
     82c:	b9 01       	movw	r22, r18
     82e:	0e 94 f5 09 	call	0x13ea	; 0x13ea <vsmp_vinterrupt_init>
        syscall_num[i] = (syscall_t)0;
     832:	89 81       	ldd	r24, Y+1	; 0x01
     834:	88 2f       	mov	r24, r24
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	fc 01       	movw	r30, r24
     83a:	e7 5d       	subi	r30, 0xD7	; 215
     83c:	fe 4f       	sbci	r31, 0xFE	; 254
     83e:	10 82       	st	Z, r1
        syscall_arg[i] = (void *)0;
     840:	89 81       	ldd	r24, Y+1	; 0x01
     842:	88 2f       	mov	r24, r24
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	88 0f       	add	r24, r24
     848:	99 1f       	adc	r25, r25
     84a:	fc 01       	movw	r30, r24
     84c:	eb 5d       	subi	r30, 0xDB	; 219
     84e:	fe 4f       	sbci	r31, 0xFE	; 254
     850:	11 82       	std	Z+1, r1	; 0x01
     852:	10 82       	st	Z, r1


void syscall_vectors_init(void)
{
    core_id_t i;
    for(i = 0; i < MAX_CORES; i++)
     854:	89 81       	ldd	r24, Y+1	; 0x01
     856:	8f 5f       	subi	r24, 0xFF	; 255
     858:	89 83       	std	Y+1, r24	; 0x01
     85a:	89 81       	ldd	r24, Y+1	; 0x01
     85c:	82 30       	cpi	r24, 0x02	; 2
     85e:	c8 f2       	brcs	.-78     	; 0x812 <syscall_vectors_init+0xe>
    {
        vsmp_vinterrupt_init( ( vinterrupt_t * )syscall_vectors + i, syscall_isr );
        syscall_num[i] = (syscall_t)0;
        syscall_arg[i] = (void *)0;
    }
}
     860:	0f 90       	pop	r0
     862:	cf 91       	pop	r28
     864:	df 91       	pop	r29
     866:	08 95       	ret

00000868 <syscall_bugurt>:

void syscall_bugurt( unsigned char num, void * arg )
{
     868:	df 93       	push	r29
     86a:	cf 93       	push	r28
     86c:	00 d0       	rcall	.+0      	; 0x86e <syscall_bugurt+0x6>
     86e:	00 d0       	rcall	.+0      	; 0x870 <syscall_bugurt+0x8>
     870:	00 d0       	rcall	.+0      	; 0x872 <syscall_bugurt+0xa>
     872:	cd b7       	in	r28, 0x3d	; 61
     874:	de b7       	in	r29, 0x3e	; 62
     876:	8c 83       	std	Y+4, r24	; 0x04
     878:	7e 83       	std	Y+6, r23	; 0x06
     87a:	6d 83       	std	Y+5, r22	; 0x05
    core_id_t core;
    item_t * vector;

    disable_interrupts();
     87c:	0e 94 14 0a 	call	0x1428	; 0x1428 <disable_interrupts>

    cli();
     880:	f8 94       	cli
    core = current_vm;
     882:	80 91 12 01 	lds	r24, 0x0112
     886:	8b 83       	std	Y+3, r24	; 0x03
    sei();
     888:	78 94       	sei

    syscall_num[core] = (syscall_t)num;
     88a:	8b 81       	ldd	r24, Y+3	; 0x03
     88c:	88 2f       	mov	r24, r24
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	fc 01       	movw	r30, r24
     892:	e7 5d       	subi	r30, 0xD7	; 215
     894:	fe 4f       	sbci	r31, 0xFE	; 254
     896:	8c 81       	ldd	r24, Y+4	; 0x04
     898:	80 83       	st	Z, r24
    syscall_arg[core] = (void *)arg;
     89a:	8b 81       	ldd	r24, Y+3	; 0x03
     89c:	88 2f       	mov	r24, r24
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	88 0f       	add	r24, r24
     8a2:	99 1f       	adc	r25, r25
     8a4:	fc 01       	movw	r30, r24
     8a6:	eb 5d       	subi	r30, 0xDB	; 219
     8a8:	fe 4f       	sbci	r31, 0xFE	; 254
     8aa:	8d 81       	ldd	r24, Y+5	; 0x05
     8ac:	9e 81       	ldd	r25, Y+6	; 0x06
     8ae:	91 83       	std	Z+1, r25	; 0x01
     8b0:	80 83       	st	Z, r24
    vector = (item_t *)( &syscall_vectors[core] );
     8b2:	22 e0       	ldi	r18, 0x02	; 2
     8b4:	31 e0       	ldi	r19, 0x01	; 1
     8b6:	8b 81       	ldd	r24, Y+3	; 0x03
     8b8:	88 2f       	mov	r24, r24
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	88 0f       	add	r24, r24
     8be:	99 1f       	adc	r25, r25
     8c0:	88 0f       	add	r24, r24
     8c2:	99 1f       	adc	r25, r25
     8c4:	88 0f       	add	r24, r24
     8c6:	99 1f       	adc	r25, r25
     8c8:	82 0f       	add	r24, r18
     8ca:	93 1f       	adc	r25, r19
     8cc:	9a 83       	std	Y+2, r25	; 0x02
     8ce:	89 83       	std	Y+1, r24	; 0x01

    cli();
     8d0:	f8 94       	cli
    vm_state[current_vm].int_enabled = (bool_t)1; // Virtual interrupts MUST be eanabled !!!
     8d2:	80 91 12 01 	lds	r24, 0x0112
     8d6:	28 2f       	mov	r18, r24
     8d8:	30 e0       	ldi	r19, 0x00	; 0
     8da:	c9 01       	movw	r24, r18
     8dc:	88 0f       	add	r24, r24
     8de:	99 1f       	adc	r25, r25
     8e0:	88 0f       	add	r24, r24
     8e2:	99 1f       	adc	r25, r25
     8e4:	88 0f       	add	r24, r24
     8e6:	99 1f       	adc	r25, r25
     8e8:	82 0f       	add	r24, r18
     8ea:	93 1f       	adc	r25, r19
     8ec:	fc 01       	movw	r30, r24
     8ee:	eb 5e       	subi	r30, 0xEB	; 235
     8f0:	fe 4f       	sbci	r31, 0xFE	; 254
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	80 83       	st	Z, r24
    // System call is not an ordinary interrupt!!!
    // It MUST be serviced FIRST!!!
    if( vm_state[current_vm].int_fifo )
     8f6:	80 91 12 01 	lds	r24, 0x0112
     8fa:	28 2f       	mov	r18, r24
     8fc:	30 e0       	ldi	r19, 0x00	; 0
     8fe:	c9 01       	movw	r24, r18
     900:	88 0f       	add	r24, r24
     902:	99 1f       	adc	r25, r25
     904:	88 0f       	add	r24, r24
     906:	99 1f       	adc	r25, r25
     908:	88 0f       	add	r24, r24
     90a:	99 1f       	adc	r25, r25
     90c:	82 0f       	add	r24, r18
     90e:	93 1f       	adc	r25, r19
     910:	fc 01       	movw	r30, r24
     912:	ed 5e       	subi	r30, 0xED	; 237
     914:	fe 4f       	sbci	r31, 0xFE	; 254
     916:	80 81       	ld	r24, Z
     918:	91 81       	ldd	r25, Z+1	; 0x01
     91a:	00 97       	sbiw	r24, 0x00	; 0
     91c:	d1 f0       	breq	.+52     	; 0x952 <__stack+0x53>
    {
        item_insert( (item_t *)vector, ((item_t *)vm_state[current_vm].int_fifo)->next );
     91e:	80 91 12 01 	lds	r24, 0x0112
     922:	28 2f       	mov	r18, r24
     924:	30 e0       	ldi	r19, 0x00	; 0
     926:	c9 01       	movw	r24, r18
     928:	88 0f       	add	r24, r24
     92a:	99 1f       	adc	r25, r25
     92c:	88 0f       	add	r24, r24
     92e:	99 1f       	adc	r25, r25
     930:	88 0f       	add	r24, r24
     932:	99 1f       	adc	r25, r25
     934:	82 0f       	add	r24, r18
     936:	93 1f       	adc	r25, r19
     938:	fc 01       	movw	r30, r24
     93a:	ed 5e       	subi	r30, 0xED	; 237
     93c:	fe 4f       	sbci	r31, 0xFE	; 254
     93e:	01 90       	ld	r0, Z+
     940:	f0 81       	ld	r31, Z
     942:	e0 2d       	mov	r30, r0
     944:	20 81       	ld	r18, Z
     946:	31 81       	ldd	r19, Z+1	; 0x01
     948:	89 81       	ldd	r24, Y+1	; 0x01
     94a:	9a 81       	ldd	r25, Y+2	; 0x02
     94c:	b9 01       	movw	r22, r18
     94e:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <item_insert>
    }
    vm_state[current_vm].int_fifo = (item_t *)vector;
     952:	80 91 12 01 	lds	r24, 0x0112
     956:	28 2f       	mov	r18, r24
     958:	30 e0       	ldi	r19, 0x00	; 0
     95a:	c9 01       	movw	r24, r18
     95c:	88 0f       	add	r24, r24
     95e:	99 1f       	adc	r25, r25
     960:	88 0f       	add	r24, r24
     962:	99 1f       	adc	r25, r25
     964:	88 0f       	add	r24, r24
     966:	99 1f       	adc	r25, r25
     968:	82 0f       	add	r24, r18
     96a:	93 1f       	adc	r25, r19
     96c:	fc 01       	movw	r30, r24
     96e:	ed 5e       	subi	r30, 0xED	; 237
     970:	fe 4f       	sbci	r31, 0xFE	; 254
     972:	89 81       	ldd	r24, Y+1	; 0x01
     974:	9a 81       	ldd	r25, Y+2	; 0x02
     976:	91 83       	std	Z+1, r25	; 0x01
     978:	80 83       	st	Z, r24
    _vsmp_vinterrupt();
     97a:	0e 94 8f 08 	call	0x111e	; 0x111e <_vsmp_vinterrupt>
}
     97e:	26 96       	adiw	r28, 0x06	; 6
     980:	0f b6       	in	r0, 0x3f	; 63
     982:	f8 94       	cli
     984:	de bf       	out	0x3e, r29	; 62
     986:	0f be       	out	0x3f, r0	; 63
     988:	cd bf       	out	0x3d, r28	; 61
     98a:	cf 91       	pop	r28
     98c:	df 91       	pop	r29
     98e:	08 95       	ret

00000990 <init_bugurt>:
/***************************************************************************************************************/
// Функции общего пользования

void init_bugurt(void)
{
     990:	df 93       	push	r29
     992:	cf 93       	push	r28
     994:	0f 92       	push	r0
     996:	cd b7       	in	r28, 0x3d	; 61
     998:	de b7       	in	r29, 0x3e	; 62
    core_id_t i;
    disable_interrupts();
     99a:	0e 94 14 0a 	call	0x1428	; 0x1428 <disable_interrupts>
    resched_vectors_init();
     99e:	0e 94 28 02 	call	0x450	; 0x450 <resched_vectors_init>
    systimer_vectors_init();
     9a2:	0e 94 1c 03 	call	0x638	; 0x638 <systimer_vectors_init>
    syscall_vectors_init();
     9a6:	0e 94 02 04 	call	0x804	; 0x804 <syscall_vectors_init>
    kernel_init();
     9aa:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <kernel_init>
    kernel.sched[current_core()].nested_crit_sec = (count_t)1;
     9ae:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <current_core>
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	8b e2       	ldi	r24, 0x2B	; 43
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	ac 01       	movw	r20, r24
     9bc:	24 9f       	mul	r18, r20
     9be:	c0 01       	movw	r24, r0
     9c0:	25 9f       	mul	r18, r21
     9c2:	90 0d       	add	r25, r0
     9c4:	34 9f       	mul	r19, r20
     9c6:	90 0d       	add	r25, r0
     9c8:	11 24       	eor	r1, r1
     9ca:	fc 01       	movw	r30, r24
     9cc:	e1 50       	subi	r30, 0x01	; 1
     9ce:	fd 4f       	sbci	r31, 0xFD	; 253
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	91 83       	std	Z+1, r25	; 0x01
     9d6:	80 83       	st	Z, r24
    for(i = 1; i < MAX_CORES; i++)
     9d8:	81 e0       	ldi	r24, 0x01	; 1
     9da:	89 83       	std	Y+1, r24	; 0x01
     9dc:	17 c0       	rjmp	.+46     	; 0xa0c <init_bugurt+0x7c>
    {
        kernel.idle[i].pmain = vsmp_idle_main;
     9de:	89 81       	ldd	r24, Y+1	; 0x01
     9e0:	28 2f       	mov	r18, r24
     9e2:	30 e0       	ldi	r19, 0x00	; 0
     9e4:	80 e3       	ldi	r24, 0x30	; 48
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	ac 01       	movw	r20, r24
     9ea:	24 9f       	mul	r18, r20
     9ec:	c0 01       	movw	r24, r0
     9ee:	25 9f       	mul	r18, r21
     9f0:	90 0d       	add	r25, r0
     9f2:	34 9f       	mul	r19, r20
     9f4:	90 0d       	add	r25, r0
     9f6:	11 24       	eor	r1, r1
     9f8:	fc 01       	movw	r30, r24
     9fa:	ef 5a       	subi	r30, 0xAF	; 175
     9fc:	fc 4f       	sbci	r31, 0xFC	; 252
     9fe:	88 e1       	ldi	r24, 0x18	; 24
     a00:	96 e0       	ldi	r25, 0x06	; 6
     a02:	91 83       	std	Z+1, r25	; 0x01
     a04:	80 83       	st	Z, r24
    resched_vectors_init();
    systimer_vectors_init();
    syscall_vectors_init();
    kernel_init();
    kernel.sched[current_core()].nested_crit_sec = (count_t)1;
    for(i = 1; i < MAX_CORES; i++)
     a06:	89 81       	ldd	r24, Y+1	; 0x01
     a08:	8f 5f       	subi	r24, 0xFF	; 255
     a0a:	89 83       	std	Y+1, r24	; 0x01
     a0c:	89 81       	ldd	r24, Y+1	; 0x01
     a0e:	82 30       	cpi	r24, 0x02	; 2
     a10:	30 f3       	brcs	.-52     	; 0x9de <init_bugurt+0x4e>
    {
        kernel.idle[i].pmain = vsmp_idle_main;
    }
}
     a12:	0f 90       	pop	r0
     a14:	cf 91       	pop	r28
     a16:	df 91       	pop	r29
     a18:	08 95       	ret

00000a1a <start_bugurt>:
void start_bugurt(void)
{
     a1a:	df 93       	push	r29
     a1c:	cf 93       	push	r28
     a1e:	cd b7       	in	r28, 0x3d	; 61
     a20:	de b7       	in	r29, 0x3e	; 62
    kernel.sched[current_core()].nested_crit_sec = (count_t)0;
     a22:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <current_core>
     a26:	28 2f       	mov	r18, r24
     a28:	30 e0       	ldi	r19, 0x00	; 0
     a2a:	8b e2       	ldi	r24, 0x2B	; 43
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	ac 01       	movw	r20, r24
     a30:	24 9f       	mul	r18, r20
     a32:	c0 01       	movw	r24, r0
     a34:	25 9f       	mul	r18, r21
     a36:	90 0d       	add	r25, r0
     a38:	34 9f       	mul	r19, r20
     a3a:	90 0d       	add	r25, r0
     a3c:	11 24       	eor	r1, r1
     a3e:	fc 01       	movw	r30, r24
     a40:	e1 50       	subi	r30, 0x01	; 1
     a42:	fd 4f       	sbci	r31, 0xFD	; 253
     a44:	11 82       	std	Z+1, r1	; 0x01
     a46:	10 82       	st	Z, r1
    cli();
     a48:	f8 94       	cli
    vsmp_systimer_hook = vsmp_systimer_hook_bugurt;
     a4a:	85 e6       	ldi	r24, 0x65	; 101
     a4c:	93 e0       	ldi	r25, 0x03	; 3
     a4e:	90 93 d6 02 	sts	0x02D6, r25
     a52:	80 93 d5 02 	sts	0x02D5, r24
    sei();
     a56:	78 94       	sei
    enable_interrupts();
     a58:	0e 94 2e 0a 	call	0x145c	; 0x145c <enable_interrupts>
    idle_main( (void *)0 );
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <idle_main>
}
     a64:	cf 91       	pop	r28
     a66:	df 91       	pop	r29
     a68:	08 95       	ret

00000a6a <vsmp_vm_init>:
void (*vsmp_systimer_hook)(void);



void vsmp_vm_init( vsmp_vm_t * vm, stack_t * sp, stack_t * int_sp )
{
     a6a:	df 93       	push	r29
     a6c:	cf 93       	push	r28
     a6e:	00 d0       	rcall	.+0      	; 0xa70 <vsmp_vm_init+0x6>
     a70:	00 d0       	rcall	.+0      	; 0xa72 <vsmp_vm_init+0x8>
     a72:	00 d0       	rcall	.+0      	; 0xa74 <vsmp_vm_init+0xa>
     a74:	cd b7       	in	r28, 0x3d	; 61
     a76:	de b7       	in	r29, 0x3e	; 62
     a78:	9a 83       	std	Y+2, r25	; 0x02
     a7a:	89 83       	std	Y+1, r24	; 0x01
     a7c:	7c 83       	std	Y+4, r23	; 0x04
     a7e:	6b 83       	std	Y+3, r22	; 0x03
     a80:	5e 83       	std	Y+6, r21	; 0x06
     a82:	4d 83       	std	Y+5, r20	; 0x05
    vm->int_fifo = (item_t *)0; // Нет прерываний;
     a84:	e9 81       	ldd	r30, Y+1	; 0x01
     a86:	fa 81       	ldd	r31, Y+2	; 0x02
     a88:	11 82       	std	Z+1, r1	; 0x01
     a8a:	10 82       	st	Z, r1
    vm->int_enabled = 1;// прерывания разрешены
     a8c:	e9 81       	ldd	r30, Y+1	; 0x01
     a8e:	fa 81       	ldd	r31, Y+2	; 0x02
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	82 83       	std	Z+2, r24	; 0x02
    vm->sp = (stack_t *)sp;
     a94:	e9 81       	ldd	r30, Y+1	; 0x01
     a96:	fa 81       	ldd	r31, Y+2	; 0x02
     a98:	8b 81       	ldd	r24, Y+3	; 0x03
     a9a:	9c 81       	ldd	r25, Y+4	; 0x04
     a9c:	96 83       	std	Z+6, r25	; 0x06
     a9e:	85 83       	std	Z+5, r24	; 0x05
    vm->int_sp = (stack_t *)int_sp;
     aa0:	e9 81       	ldd	r30, Y+1	; 0x01
     aa2:	fa 81       	ldd	r31, Y+2	; 0x02
     aa4:	8d 81       	ldd	r24, Y+5	; 0x05
     aa6:	9e 81       	ldd	r25, Y+6	; 0x06
     aa8:	90 87       	std	Z+8, r25	; 0x08
     aaa:	87 83       	std	Z+7, r24	; 0x07
    vm->int_nest_count = (count_t)0;
     aac:	e9 81       	ldd	r30, Y+1	; 0x01
     aae:	fa 81       	ldd	r31, Y+2	; 0x02
     ab0:	14 82       	std	Z+4, r1	; 0x04
     ab2:	13 82       	std	Z+3, r1	; 0x03
}
     ab4:	26 96       	adiw	r28, 0x06	; 6
     ab6:	0f b6       	in	r0, 0x3f	; 63
     ab8:	f8 94       	cli
     aba:	de bf       	out	0x3e, r29	; 62
     abc:	0f be       	out	0x3f, r0	; 63
     abe:	cd bf       	out	0x3d, r28	; 61
     ac0:	cf 91       	pop	r28
     ac2:	df 91       	pop	r29
     ac4:	08 95       	ret

00000ac6 <vsmp_init>:
void vsmp_init( void )
{
     ac6:	df 93       	push	r29
     ac8:	cf 93       	push	r28
     aca:	00 d0       	rcall	.+0      	; 0xacc <vsmp_init+0x6>
     acc:	00 d0       	rcall	.+0      	; 0xace <vsmp_init+0x8>
     ace:	cd b7       	in	r28, 0x3d	; 61
     ad0:	de b7       	in	r29, 0x3e	; 62
    unsigned short i;
    cli();
     ad2:	f8 94       	cli
    for(i = 0; i < VM_STACK_SIZE; i++ )vm_int_stack[0][i] = 0x55;
     ad4:	1c 82       	std	Y+4, r1	; 0x04
     ad6:	1b 82       	std	Y+3, r1	; 0x03
     ad8:	0c c0       	rjmp	.+24     	; 0xaf2 <vsmp_init+0x2c>
     ada:	8b 81       	ldd	r24, Y+3	; 0x03
     adc:	9c 81       	ldd	r25, Y+4	; 0x04
     ade:	fc 01       	movw	r30, r24
     ae0:	eb 52       	subi	r30, 0x2B	; 43
     ae2:	fe 4f       	sbci	r31, 0xFE	; 254
     ae4:	85 e5       	ldi	r24, 0x55	; 85
     ae6:	80 83       	st	Z, r24
     ae8:	8b 81       	ldd	r24, Y+3	; 0x03
     aea:	9c 81       	ldd	r25, Y+4	; 0x04
     aec:	01 96       	adiw	r24, 0x01	; 1
     aee:	9c 83       	std	Y+4, r25	; 0x04
     af0:	8b 83       	std	Y+3, r24	; 0x03
     af2:	8b 81       	ldd	r24, Y+3	; 0x03
     af4:	9c 81       	ldd	r25, Y+4	; 0x04
     af6:	80 38       	cpi	r24, 0x80	; 128
     af8:	91 05       	cpc	r25, r1
     afa:	78 f3       	brcs	.-34     	; 0xada <vsmp_init+0x14>
    vsmp_vm_init( &vm_state[0], (stack_t *)0 , &vm_int_stack[0][VM_INT_STACK_SIZE-1] );
     afc:	85 ed       	ldi	r24, 0xD5	; 213
     afe:	91 e0       	ldi	r25, 0x01	; 1
     b00:	9c 01       	movw	r18, r24
     b02:	21 58       	subi	r18, 0x81	; 129
     b04:	3f 4f       	sbci	r19, 0xFF	; 255
     b06:	83 e1       	ldi	r24, 0x13	; 19
     b08:	91 e0       	ldi	r25, 0x01	; 1
     b0a:	60 e0       	ldi	r22, 0x00	; 0
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	a9 01       	movw	r20, r18
     b10:	0e 94 35 05 	call	0xa6a	; 0xa6a <vsmp_vm_init>
    for( current_vm = 1; current_vm < MAX_CORES; current_vm++ )
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	80 93 12 01 	sts	0x0112, r24
     b1a:	74 c0       	rjmp	.+232    	; 0xc04 <vsmp_init+0x13e>
    {
        stack_t * vm_sp;
        for(i = 0; i < VM_STACK_SIZE; i++ )
     b1c:	1c 82       	std	Y+4, r1	; 0x04
     b1e:	1b 82       	std	Y+3, r1	; 0x03
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <vsmp_init+0xb0>
        {
            vm_stack[current_vm - 1][i] = 0x55;
     b22:	80 91 12 01 	lds	r24, 0x0112
     b26:	88 2f       	mov	r24, r24
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	01 97       	sbiw	r24, 0x01	; 1
     b2c:	2b 81       	ldd	r18, Y+3	; 0x03
     b2e:	3c 81       	ldd	r19, Y+4	; 0x04
     b30:	96 95       	lsr	r25
     b32:	98 2f       	mov	r25, r24
     b34:	88 27       	eor	r24, r24
     b36:	97 95       	ror	r25
     b38:	87 95       	ror	r24
     b3a:	82 0f       	add	r24, r18
     b3c:	93 1f       	adc	r25, r19
     b3e:	fc 01       	movw	r30, r24
     b40:	eb 5a       	subi	r30, 0xAB	; 171
     b42:	fe 4f       	sbci	r31, 0xFE	; 254
     b44:	85 e5       	ldi	r24, 0x55	; 85
     b46:	80 83       	st	Z, r24
            vm_int_stack[current_vm][i] = 0x55;
     b48:	80 91 12 01 	lds	r24, 0x0112
     b4c:	88 2f       	mov	r24, r24
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	2b 81       	ldd	r18, Y+3	; 0x03
     b52:	3c 81       	ldd	r19, Y+4	; 0x04
     b54:	96 95       	lsr	r25
     b56:	98 2f       	mov	r25, r24
     b58:	88 27       	eor	r24, r24
     b5a:	97 95       	ror	r25
     b5c:	87 95       	ror	r24
     b5e:	82 0f       	add	r24, r18
     b60:	93 1f       	adc	r25, r19
     b62:	fc 01       	movw	r30, r24
     b64:	eb 52       	subi	r30, 0x2B	; 43
     b66:	fe 4f       	sbci	r31, 0xFE	; 254
     b68:	85 e5       	ldi	r24, 0x55	; 85
     b6a:	80 83       	st	Z, r24
    for(i = 0; i < VM_STACK_SIZE; i++ )vm_int_stack[0][i] = 0x55;
    vsmp_vm_init( &vm_state[0], (stack_t *)0 , &vm_int_stack[0][VM_INT_STACK_SIZE-1] );
    for( current_vm = 1; current_vm < MAX_CORES; current_vm++ )
    {
        stack_t * vm_sp;
        for(i = 0; i < VM_STACK_SIZE; i++ )
     b6c:	8b 81       	ldd	r24, Y+3	; 0x03
     b6e:	9c 81       	ldd	r25, Y+4	; 0x04
     b70:	01 96       	adiw	r24, 0x01	; 1
     b72:	9c 83       	std	Y+4, r25	; 0x04
     b74:	8b 83       	std	Y+3, r24	; 0x03
     b76:	8b 81       	ldd	r24, Y+3	; 0x03
     b78:	9c 81       	ldd	r25, Y+4	; 0x04
     b7a:	80 38       	cpi	r24, 0x80	; 128
     b7c:	91 05       	cpc	r25, r1
     b7e:	88 f2       	brcs	.-94     	; 0xb22 <vsmp_init+0x5c>
        {
            vm_stack[current_vm - 1][i] = 0x55;
            vm_int_stack[current_vm][i] = 0x55;
        }
        vm_sp = proc_stack_init( &vm_stack[current_vm - 1][VM_STACK_SIZE - 1], (code_t)vsmp_idle_main, (void *)0 );
     b80:	80 91 12 01 	lds	r24, 0x0112
     b84:	88 2f       	mov	r24, r24
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	01 97       	sbiw	r24, 0x01	; 1
     b8a:	96 95       	lsr	r25
     b8c:	98 2f       	mov	r25, r24
     b8e:	88 27       	eor	r24, r24
     b90:	97 95       	ror	r25
     b92:	87 95       	ror	r24
     b94:	81 58       	subi	r24, 0x81	; 129
     b96:	9f 4f       	sbci	r25, 0xFF	; 255
     b98:	8b 5a       	subi	r24, 0xAB	; 171
     b9a:	9e 4f       	sbci	r25, 0xFE	; 254
     b9c:	28 e1       	ldi	r18, 0x18	; 24
     b9e:	36 e0       	ldi	r19, 0x06	; 6
     ba0:	b9 01       	movw	r22, r18
     ba2:	40 e0       	ldi	r20, 0x00	; 0
     ba4:	50 e0       	ldi	r21, 0x00	; 0
     ba6:	0e 94 6f 0a 	call	0x14de	; 0x14de <proc_stack_init>
     baa:	9a 83       	std	Y+2, r25	; 0x02
     bac:	89 83       	std	Y+1, r24	; 0x01
        vsmp_vm_init( &vm_state[current_vm], (stack_t *)vm_sp, &vm_int_stack[current_vm][VM_INT_STACK_SIZE-1] );
     bae:	80 91 12 01 	lds	r24, 0x0112
     bb2:	28 2f       	mov	r18, r24
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	c9 01       	movw	r24, r18
     bb8:	88 0f       	add	r24, r24
     bba:	99 1f       	adc	r25, r25
     bbc:	88 0f       	add	r24, r24
     bbe:	99 1f       	adc	r25, r25
     bc0:	88 0f       	add	r24, r24
     bc2:	99 1f       	adc	r25, r25
     bc4:	82 0f       	add	r24, r18
     bc6:	93 1f       	adc	r25, r19
     bc8:	bc 01       	movw	r22, r24
     bca:	6d 5e       	subi	r22, 0xED	; 237
     bcc:	7e 4f       	sbci	r23, 0xFE	; 254
     bce:	25 ed       	ldi	r18, 0xD5	; 213
     bd0:	31 e0       	ldi	r19, 0x01	; 1
     bd2:	80 91 12 01 	lds	r24, 0x0112
     bd6:	88 2f       	mov	r24, r24
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	96 95       	lsr	r25
     bdc:	98 2f       	mov	r25, r24
     bde:	88 27       	eor	r24, r24
     be0:	97 95       	ror	r25
     be2:	87 95       	ror	r24
     be4:	81 58       	subi	r24, 0x81	; 129
     be6:	9f 4f       	sbci	r25, 0xFF	; 255
     be8:	a9 01       	movw	r20, r18
     bea:	48 0f       	add	r20, r24
     bec:	59 1f       	adc	r21, r25
     bee:	29 81       	ldd	r18, Y+1	; 0x01
     bf0:	3a 81       	ldd	r19, Y+2	; 0x02
     bf2:	cb 01       	movw	r24, r22
     bf4:	b9 01       	movw	r22, r18
     bf6:	0e 94 35 05 	call	0xa6a	; 0xa6a <vsmp_vm_init>
{
    unsigned short i;
    cli();
    for(i = 0; i < VM_STACK_SIZE; i++ )vm_int_stack[0][i] = 0x55;
    vsmp_vm_init( &vm_state[0], (stack_t *)0 , &vm_int_stack[0][VM_INT_STACK_SIZE-1] );
    for( current_vm = 1; current_vm < MAX_CORES; current_vm++ )
     bfa:	80 91 12 01 	lds	r24, 0x0112
     bfe:	8f 5f       	subi	r24, 0xFF	; 255
     c00:	80 93 12 01 	sts	0x0112, r24
     c04:	80 91 12 01 	lds	r24, 0x0112
     c08:	82 30       	cpi	r24, 0x02	; 2
     c0a:	08 f4       	brcc	.+2      	; 0xc0e <vsmp_init+0x148>
     c0c:	87 cf       	rjmp	.-242    	; 0xb1c <vsmp_init+0x56>
            vm_int_stack[current_vm][i] = 0x55;
        }
        vm_sp = proc_stack_init( &vm_stack[current_vm - 1][VM_STACK_SIZE - 1], (code_t)vsmp_idle_main, (void *)0 );
        vsmp_vm_init( &vm_state[current_vm], (stack_t *)vm_sp, &vm_int_stack[current_vm][VM_INT_STACK_SIZE-1] );
    }
    current_vm = 0;
     c0e:	10 92 12 01 	sts	0x0112, r1
}
     c12:	0f 90       	pop	r0
     c14:	0f 90       	pop	r0
     c16:	0f 90       	pop	r0
     c18:	0f 90       	pop	r0
     c1a:	cf 91       	pop	r28
     c1c:	df 91       	pop	r29
     c1e:	08 95       	ret

00000c20 <vsmp_run>:

void vsmp_run( void )
{
     c20:	df 93       	push	r29
     c22:	cf 93       	push	r28
     c24:	cd b7       	in	r28, 0x3d	; 61
     c26:	de b7       	in	r29, 0x3e	; 62
    sei();
     c28:	78 94       	sei
}
     c2a:	cf 91       	pop	r28
     c2c:	df 91       	pop	r29
     c2e:	08 95       	ret

00000c30 <vsmp_idle_main>:
void vsmp_idle_main( void * arg )
{
     c30:	df 93       	push	r29
     c32:	cf 93       	push	r28
     c34:	00 d0       	rcall	.+0      	; 0xc36 <vsmp_idle_main+0x6>
     c36:	cd b7       	in	r28, 0x3d	; 61
     c38:	de b7       	in	r29, 0x3e	; 62
     c3a:	9a 83       	std	Y+2, r25	; 0x02
     c3c:	89 83       	std	Y+1, r24	; 0x01
     c3e:	ff cf       	rjmp	.-2      	; 0xc3e <vsmp_idle_main+0xe>

00000c40 <vsmp_do_interrupt>:
    while(1);
}

bool_t vsmp_do_interrupt(void)
{
     c40:	df 93       	push	r29
     c42:	cf 93       	push	r28
     c44:	0f 92       	push	r0
     c46:	cd b7       	in	r28, 0x3d	; 61
     c48:	de b7       	in	r29, 0x3e	; 62
    // if current vm is interruptible and there are some interrupts in fifo,
    if( (vm_state[current_vm].int_enabled) && (vm_state[current_vm].int_fifo) )
     c4a:	80 91 12 01 	lds	r24, 0x0112
     c4e:	28 2f       	mov	r18, r24
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	c9 01       	movw	r24, r18
     c54:	88 0f       	add	r24, r24
     c56:	99 1f       	adc	r25, r25
     c58:	88 0f       	add	r24, r24
     c5a:	99 1f       	adc	r25, r25
     c5c:	88 0f       	add	r24, r24
     c5e:	99 1f       	adc	r25, r25
     c60:	82 0f       	add	r24, r18
     c62:	93 1f       	adc	r25, r19
     c64:	fc 01       	movw	r30, r24
     c66:	eb 5e       	subi	r30, 0xEB	; 235
     c68:	fe 4f       	sbci	r31, 0xFE	; 254
     c6a:	80 81       	ld	r24, Z
     c6c:	88 23       	and	r24, r24
     c6e:	09 f4       	brne	.+2      	; 0xc72 <vsmp_do_interrupt+0x32>
     c70:	80 c0       	rjmp	.+256    	; 0xd72 <vsmp_do_interrupt+0x132>
     c72:	80 91 12 01 	lds	r24, 0x0112
     c76:	28 2f       	mov	r18, r24
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	c9 01       	movw	r24, r18
     c7c:	88 0f       	add	r24, r24
     c7e:	99 1f       	adc	r25, r25
     c80:	88 0f       	add	r24, r24
     c82:	99 1f       	adc	r25, r25
     c84:	88 0f       	add	r24, r24
     c86:	99 1f       	adc	r25, r25
     c88:	82 0f       	add	r24, r18
     c8a:	93 1f       	adc	r25, r19
     c8c:	fc 01       	movw	r30, r24
     c8e:	ed 5e       	subi	r30, 0xED	; 237
     c90:	fe 4f       	sbci	r31, 0xFE	; 254
     c92:	80 81       	ld	r24, Z
     c94:	91 81       	ldd	r25, Z+1	; 0x01
     c96:	00 97       	sbiw	r24, 0x00	; 0
     c98:	09 f4       	brne	.+2      	; 0xc9c <vsmp_do_interrupt+0x5c>
     c9a:	6b c0       	rjmp	.+214    	; 0xd72 <vsmp_do_interrupt+0x132>
    {
        // cut head interrupt,
        vm_buf = (void *)vm_state[current_vm].int_fifo;
     c9c:	80 91 12 01 	lds	r24, 0x0112
     ca0:	28 2f       	mov	r18, r24
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	c9 01       	movw	r24, r18
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	88 0f       	add	r24, r24
     cac:	99 1f       	adc	r25, r25
     cae:	88 0f       	add	r24, r24
     cb0:	99 1f       	adc	r25, r25
     cb2:	82 0f       	add	r24, r18
     cb4:	93 1f       	adc	r25, r19
     cb6:	fc 01       	movw	r30, r24
     cb8:	ed 5e       	subi	r30, 0xED	; 237
     cba:	fe 4f       	sbci	r31, 0xFE	; 254
     cbc:	80 81       	ld	r24, Z
     cbe:	91 81       	ldd	r25, Z+1	; 0x01
     cc0:	90 93 54 01 	sts	0x0154, r25
     cc4:	80 93 53 01 	sts	0x0153, r24
        if( vm_buf == (void *)((item_t *)vm_buf)->next )
     cc8:	80 91 53 01 	lds	r24, 0x0153
     ccc:	90 91 54 01 	lds	r25, 0x0154
     cd0:	fc 01       	movw	r30, r24
     cd2:	20 81       	ld	r18, Z
     cd4:	31 81       	ldd	r19, Z+1	; 0x01
     cd6:	80 91 53 01 	lds	r24, 0x0153
     cda:	90 91 54 01 	lds	r25, 0x0154
     cde:	28 17       	cp	r18, r24
     ce0:	39 07       	cpc	r19, r25
     ce2:	99 f4       	brne	.+38     	; 0xd0a <vsmp_do_interrupt+0xca>
        {
            /* only one interrupt in fifo */
            vm_state[current_vm].int_fifo = (item_t *)0;
     ce4:	80 91 12 01 	lds	r24, 0x0112
     ce8:	28 2f       	mov	r18, r24
     cea:	30 e0       	ldi	r19, 0x00	; 0
     cec:	c9 01       	movw	r24, r18
     cee:	88 0f       	add	r24, r24
     cf0:	99 1f       	adc	r25, r25
     cf2:	88 0f       	add	r24, r24
     cf4:	99 1f       	adc	r25, r25
     cf6:	88 0f       	add	r24, r24
     cf8:	99 1f       	adc	r25, r25
     cfa:	82 0f       	add	r24, r18
     cfc:	93 1f       	adc	r25, r19
     cfe:	fc 01       	movw	r30, r24
     d00:	ed 5e       	subi	r30, 0xED	; 237
     d02:	fe 4f       	sbci	r31, 0xFE	; 254
     d04:	11 82       	std	Z+1, r1	; 0x01
     d06:	10 82       	st	Z, r1
     d08:	1f c0       	rjmp	.+62     	; 0xd48 <vsmp_do_interrupt+0x108>
        }
        else
        {
            /* many interrupts in fifo */
            vm_state[current_vm].int_fifo = (void *)((item_t *)vm_buf)->next;
     d0a:	80 91 12 01 	lds	r24, 0x0112
     d0e:	28 2f       	mov	r18, r24
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	80 91 53 01 	lds	r24, 0x0153
     d16:	90 91 54 01 	lds	r25, 0x0154
     d1a:	fc 01       	movw	r30, r24
     d1c:	40 81       	ld	r20, Z
     d1e:	51 81       	ldd	r21, Z+1	; 0x01
     d20:	c9 01       	movw	r24, r18
     d22:	88 0f       	add	r24, r24
     d24:	99 1f       	adc	r25, r25
     d26:	88 0f       	add	r24, r24
     d28:	99 1f       	adc	r25, r25
     d2a:	88 0f       	add	r24, r24
     d2c:	99 1f       	adc	r25, r25
     d2e:	82 0f       	add	r24, r18
     d30:	93 1f       	adc	r25, r19
     d32:	fc 01       	movw	r30, r24
     d34:	ed 5e       	subi	r30, 0xED	; 237
     d36:	fe 4f       	sbci	r31, 0xFE	; 254
     d38:	51 83       	std	Z+1, r21	; 0x01
     d3a:	40 83       	st	Z, r20
            item_cut( (item_t *)vm_buf );
     d3c:	80 91 53 01 	lds	r24, 0x0153
     d40:	90 91 54 01 	lds	r25, 0x0154
     d44:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <item_cut>
        }
        // write its isr pointer to vm_buf,
        ((vinterrupt_t *)vm_buf)->num_pending = (count_t)0;
     d48:	80 91 53 01 	lds	r24, 0x0153
     d4c:	90 91 54 01 	lds	r25, 0x0154
     d50:	fc 01       	movw	r30, r24
     d52:	15 82       	std	Z+5, r1	; 0x05
     d54:	14 82       	std	Z+4, r1	; 0x04
        vm_buf = (void *)(((vinterrupt_t *)vm_buf)->isr);
     d56:	80 91 53 01 	lds	r24, 0x0153
     d5a:	90 91 54 01 	lds	r25, 0x0154
     d5e:	fc 01       	movw	r30, r24
     d60:	86 81       	ldd	r24, Z+6	; 0x06
     d62:	97 81       	ldd	r25, Z+7	; 0x07
     d64:	90 93 54 01 	sts	0x0154, r25
     d68:	80 93 53 01 	sts	0x0153, r24
        // and return 1;
        return (bool_t)1;
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	89 83       	std	Y+1, r24	; 0x01
     d70:	01 c0       	rjmp	.+2      	; 0xd74 <vsmp_do_interrupt+0x134>
    }
    // else return 0.
    return (bool_t)0;
     d72:	19 82       	std	Y+1, r1	; 0x01
     d74:	89 81       	ldd	r24, Y+1	; 0x01
}
     d76:	0f 90       	pop	r0
     d78:	cf 91       	pop	r28
     d7a:	df 91       	pop	r29
     d7c:	08 95       	ret

00000d7e <_vinterrupt_wrapper>:
                       Virtual interrupts wrapper functions.
    Local variable is used to call virtual ISR, so wrapper must have two parts.
*/
// Nested part, uses local variables, so compiler generated prologue and epilogue are needed.
static void _vinterrupt_wrapper(void)
{
     d7e:	df 93       	push	r29
     d80:	cf 93       	push	r28
     d82:	00 d0       	rcall	.+0      	; 0xd84 <_vinterrupt_wrapper+0x6>
     d84:	cd b7       	in	r28, 0x3d	; 61
     d86:	de b7       	in	r29, 0x3e	; 62
    void (*isr)(void);
    vm_state[current_vm].int_enabled = (bool_t)0; // Virtual interrupt nesting is not alowed by default.
     d88:	80 91 12 01 	lds	r24, 0x0112
     d8c:	28 2f       	mov	r18, r24
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	c9 01       	movw	r24, r18
     d92:	88 0f       	add	r24, r24
     d94:	99 1f       	adc	r25, r25
     d96:	88 0f       	add	r24, r24
     d98:	99 1f       	adc	r25, r25
     d9a:	88 0f       	add	r24, r24
     d9c:	99 1f       	adc	r25, r25
     d9e:	82 0f       	add	r24, r18
     da0:	93 1f       	adc	r25, r19
     da2:	fc 01       	movw	r30, r24
     da4:	eb 5e       	subi	r30, 0xEB	; 235
     da6:	fe 4f       	sbci	r31, 0xFE	; 254
     da8:	10 82       	st	Z, r1
    isr = (void (*)(void))vm_buf;
     daa:	80 91 53 01 	lds	r24, 0x0153
     dae:	90 91 54 01 	lds	r25, 0x0154
     db2:	9a 83       	std	Y+2, r25	; 0x02
     db4:	89 83       	std	Y+1, r24	; 0x01
    // After vm-buf read we can reenable real interrupts!
    sei();
     db6:	78 94       	sei
    isr();
     db8:	e9 81       	ldd	r30, Y+1	; 0x01
     dba:	fa 81       	ldd	r31, Y+2	; 0x02
     dbc:	09 95       	icall
}
     dbe:	0f 90       	pop	r0
     dc0:	0f 90       	pop	r0
     dc2:	cf 91       	pop	r28
     dc4:	df 91       	pop	r29
     dc6:	08 95       	ret

00000dc8 <vinterrupt_wrapper>:
// Nesting part, no prologue and hand made epilogue.
__attribute__ (( naked )) void vinterrupt_wrapper(void)
{
    _vinterrupt_wrapper();
     dc8:	0e 94 bf 06 	call	0xd7e	; 0xd7e <_vinterrupt_wrapper>
    cli();
     dcc:	f8 94       	cli
    // Virtual interrupts are enabled after interrupt processing.
    vm_state[current_vm].int_enabled = (bool_t)1;
     dce:	80 91 12 01 	lds	r24, 0x0112
     dd2:	28 2f       	mov	r18, r24
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	c9 01       	movw	r24, r18
     dd8:	88 0f       	add	r24, r24
     dda:	99 1f       	adc	r25, r25
     ddc:	88 0f       	add	r24, r24
     dde:	99 1f       	adc	r25, r25
     de0:	88 0f       	add	r24, r24
     de2:	99 1f       	adc	r25, r25
     de4:	82 0f       	add	r24, r18
     de6:	93 1f       	adc	r25, r19
     de8:	fc 01       	movw	r30, r24
     dea:	eb 5e       	subi	r30, 0xEB	; 235
     dec:	fe 4f       	sbci	r31, 0xFE	; 254
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	80 83       	st	Z, r24
    }
    bugurt_set_stack_pointer( vm_state[current_vm].int_sp );
}
__MACRO_FUNCTION__( _vsmp_interrupt_epilogue )
{
    if( vsmp_do_interrupt() ) goto chained_vinterrupt_return;
     df2:	0e 94 20 06 	call	0xc40	; 0xc40 <vsmp_do_interrupt>
     df6:	88 23       	and	r24, r24
     df8:	09 f0       	breq	.+2      	; 0xdfc <vinterrupt_wrapper+0x34>
     dfa:	6c c0       	rjmp	.+216    	; 0xed4 <vinterrupt_wrapper+0x10c>

    if( --vm_state[current_vm].int_nest_count )goto nesting_vinterrupt_return;
     dfc:	80 91 12 01 	lds	r24, 0x0112
     e00:	28 2f       	mov	r18, r24
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	c9 01       	movw	r24, r18
     e06:	88 0f       	add	r24, r24
     e08:	99 1f       	adc	r25, r25
     e0a:	88 0f       	add	r24, r24
     e0c:	99 1f       	adc	r25, r25
     e0e:	88 0f       	add	r24, r24
     e10:	99 1f       	adc	r25, r25
     e12:	82 0f       	add	r24, r18
     e14:	93 1f       	adc	r25, r19
     e16:	fc 01       	movw	r30, r24
     e18:	ea 5e       	subi	r30, 0xEA	; 234
     e1a:	fe 4f       	sbci	r31, 0xFE	; 254
     e1c:	80 81       	ld	r24, Z
     e1e:	91 81       	ldd	r25, Z+1	; 0x01
     e20:	ac 01       	movw	r20, r24
     e22:	41 50       	subi	r20, 0x01	; 1
     e24:	50 40       	sbci	r21, 0x00	; 0
     e26:	c9 01       	movw	r24, r18
     e28:	88 0f       	add	r24, r24
     e2a:	99 1f       	adc	r25, r25
     e2c:	88 0f       	add	r24, r24
     e2e:	99 1f       	adc	r25, r25
     e30:	88 0f       	add	r24, r24
     e32:	99 1f       	adc	r25, r25
     e34:	82 0f       	add	r24, r18
     e36:	93 1f       	adc	r25, r19
     e38:	fc 01       	movw	r30, r24
     e3a:	ea 5e       	subi	r30, 0xEA	; 234
     e3c:	fe 4f       	sbci	r31, 0xFE	; 254
     e3e:	51 83       	std	Z+1, r21	; 0x01
     e40:	40 83       	st	Z, r20
     e42:	c9 01       	movw	r24, r18
     e44:	88 0f       	add	r24, r24
     e46:	99 1f       	adc	r25, r25
     e48:	88 0f       	add	r24, r24
     e4a:	99 1f       	adc	r25, r25
     e4c:	88 0f       	add	r24, r24
     e4e:	99 1f       	adc	r25, r25
     e50:	82 0f       	add	r24, r18
     e52:	93 1f       	adc	r25, r19
     e54:	fc 01       	movw	r30, r24
     e56:	ea 5e       	subi	r30, 0xEA	; 234
     e58:	fe 4f       	sbci	r31, 0xFE	; 254
     e5a:	80 81       	ld	r24, Z
     e5c:	91 81       	ldd	r25, Z+1	; 0x01
     e5e:	00 97       	sbiw	r24, 0x00	; 0
     e60:	b1 f5       	brne	.+108    	; 0xece <vinterrupt_wrapper+0x106>

    vm_state[current_vm].int_sp = &vm_int_stack[current_vm][VM_INT_STACK_SIZE-1];
     e62:	80 91 12 01 	lds	r24, 0x0112
     e66:	48 2f       	mov	r20, r24
     e68:	50 e0       	ldi	r21, 0x00	; 0
     e6a:	25 ed       	ldi	r18, 0xD5	; 213
     e6c:	31 e0       	ldi	r19, 0x01	; 1
     e6e:	80 91 12 01 	lds	r24, 0x0112
     e72:	88 2f       	mov	r24, r24
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	96 95       	lsr	r25
     e78:	98 2f       	mov	r25, r24
     e7a:	88 27       	eor	r24, r24
     e7c:	97 95       	ror	r25
     e7e:	87 95       	ror	r24
     e80:	81 58       	subi	r24, 0x81	; 129
     e82:	9f 4f       	sbci	r25, 0xFF	; 255
     e84:	28 0f       	add	r18, r24
     e86:	39 1f       	adc	r19, r25
     e88:	ca 01       	movw	r24, r20
     e8a:	88 0f       	add	r24, r24
     e8c:	99 1f       	adc	r25, r25
     e8e:	88 0f       	add	r24, r24
     e90:	99 1f       	adc	r25, r25
     e92:	88 0f       	add	r24, r24
     e94:	99 1f       	adc	r25, r25
     e96:	84 0f       	add	r24, r20
     e98:	95 1f       	adc	r25, r21
     e9a:	fc 01       	movw	r30, r24
     e9c:	e6 5e       	subi	r30, 0xE6	; 230
     e9e:	fe 4f       	sbci	r31, 0xFE	; 254
     ea0:	31 83       	std	Z+1, r19	; 0x01
     ea2:	20 83       	st	Z, r18
    bugurt_restore_context( vm_state[current_vm].sp ); // Will return to current vm operation!
     ea4:	80 91 12 01 	lds	r24, 0x0112
     ea8:	28 2f       	mov	r18, r24
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	c9 01       	movw	r24, r18
     eae:	88 0f       	add	r24, r24
     eb0:	99 1f       	adc	r25, r25
     eb2:	88 0f       	add	r24, r24
     eb4:	99 1f       	adc	r25, r25
     eb6:	88 0f       	add	r24, r24
     eb8:	99 1f       	adc	r25, r25
     eba:	82 0f       	add	r24, r18
     ebc:	93 1f       	adc	r25, r19
     ebe:	fc 01       	movw	r30, r24
     ec0:	e8 5e       	subi	r30, 0xE8	; 232
     ec2:	fe 4f       	sbci	r31, 0xFE	; 254
     ec4:	80 81       	ld	r24, Z
     ec6:	91 81       	ldd	r25, Z+1	; 0x01
     ec8:	0e 94 9a 00 	call	0x134	; 0x134 <bugurt_restore_context>
    __asm__ __volatile__("reti"::);
     ecc:	18 95       	reti

nesting_vinterrupt_return:

    bugurt_pop_context(); //Will return to nesting virtual interrupt!
     ece:	0e 94 97 00 	call	0x12e	; 0x12e <bugurt_pop_context>
    __asm__ __volatile__("reti"::);
     ed2:	18 95       	reti

chained_vinterrupt_return:
    bugurt_push_pointer( (void *)vinterrupt_wrapper ); // Will return to vinterrupt_wrapper() entry point!
     ed4:	84 ee       	ldi	r24, 0xE4	; 228
     ed6:	96 e0       	ldi	r25, 0x06	; 6
     ed8:	0e 94 cd 00 	call	0x19a	; 0x19a <bugurt_push_pointer>
    __asm__ __volatile__("ret"::);
     edc:	08 95       	ret

00000ede <__vector_7>:
}

/* Virtual interrupt prologue and epilogue inline functions (I can,t debug macros !) */
__MACRO_FUNCTION__( _vsmp_interrupt_prologue )
{
    vm_buf = (void *)bugurt_save_context();
     ede:	0e 94 6b 00 	call	0xd6	; 0xd6 <bugurt_save_context>
     ee2:	90 93 54 01 	sts	0x0154, r25
     ee6:	80 93 53 01 	sts	0x0153, r24
    if( vm_state[current_vm].int_nest_count )
     eea:	80 91 12 01 	lds	r24, 0x0112
     eee:	28 2f       	mov	r18, r24
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	c9 01       	movw	r24, r18
     ef4:	88 0f       	add	r24, r24
     ef6:	99 1f       	adc	r25, r25
     ef8:	88 0f       	add	r24, r24
     efa:	99 1f       	adc	r25, r25
     efc:	88 0f       	add	r24, r24
     efe:	99 1f       	adc	r25, r25
     f00:	82 0f       	add	r24, r18
     f02:	93 1f       	adc	r25, r19
     f04:	fc 01       	movw	r30, r24
     f06:	ea 5e       	subi	r30, 0xEA	; 234
     f08:	fe 4f       	sbci	r31, 0xFE	; 254
     f0a:	80 81       	ld	r24, Z
     f0c:	91 81       	ldd	r25, Z+1	; 0x01
     f0e:	00 97       	sbiw	r24, 0x00	; 0
     f10:	c1 f0       	breq	.+48     	; 0xf42 <__vector_7+0x64>
    {
        vm_state[current_vm].int_sp = (stack_t *)vm_buf;
     f12:	80 91 12 01 	lds	r24, 0x0112
     f16:	28 2f       	mov	r18, r24
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	80 91 53 01 	lds	r24, 0x0153
     f1e:	90 91 54 01 	lds	r25, 0x0154
     f22:	ac 01       	movw	r20, r24
     f24:	c9 01       	movw	r24, r18
     f26:	88 0f       	add	r24, r24
     f28:	99 1f       	adc	r25, r25
     f2a:	88 0f       	add	r24, r24
     f2c:	99 1f       	adc	r25, r25
     f2e:	88 0f       	add	r24, r24
     f30:	99 1f       	adc	r25, r25
     f32:	82 0f       	add	r24, r18
     f34:	93 1f       	adc	r25, r19
     f36:	fc 01       	movw	r30, r24
     f38:	e6 5e       	subi	r30, 0xE6	; 230
     f3a:	fe 4f       	sbci	r31, 0xFE	; 254
     f3c:	51 83       	std	Z+1, r21	; 0x01
     f3e:	40 83       	st	Z, r20
     f40:	17 c0       	rjmp	.+46     	; 0xf70 <__vector_7+0x92>
    }
    else
    {
        vm_state[current_vm].sp = (stack_t *)vm_buf;
     f42:	80 91 12 01 	lds	r24, 0x0112
     f46:	28 2f       	mov	r18, r24
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	80 91 53 01 	lds	r24, 0x0153
     f4e:	90 91 54 01 	lds	r25, 0x0154
     f52:	ac 01       	movw	r20, r24
     f54:	c9 01       	movw	r24, r18
     f56:	88 0f       	add	r24, r24
     f58:	99 1f       	adc	r25, r25
     f5a:	88 0f       	add	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	88 0f       	add	r24, r24
     f60:	99 1f       	adc	r25, r25
     f62:	82 0f       	add	r24, r18
     f64:	93 1f       	adc	r25, r19
     f66:	fc 01       	movw	r30, r24
     f68:	e8 5e       	subi	r30, 0xE8	; 232
     f6a:	fe 4f       	sbci	r31, 0xFE	; 254
     f6c:	51 83       	std	Z+1, r21	; 0x01
     f6e:	40 83       	st	Z, r20
    }
    bugurt_set_stack_pointer( vm_state[current_vm].int_sp );
     f70:	80 91 12 01 	lds	r24, 0x0112
     f74:	28 2f       	mov	r18, r24
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	c9 01       	movw	r24, r18
     f7a:	88 0f       	add	r24, r24
     f7c:	99 1f       	adc	r25, r25
     f7e:	88 0f       	add	r24, r24
     f80:	99 1f       	adc	r25, r25
     f82:	88 0f       	add	r24, r24
     f84:	99 1f       	adc	r25, r25
     f86:	82 0f       	add	r24, r18
     f88:	93 1f       	adc	r25, r19
     f8a:	fc 01       	movw	r30, r24
     f8c:	e6 5e       	subi	r30, 0xE6	; 230
     f8e:	fe 4f       	sbci	r31, 0xFE	; 254
     f90:	80 81       	ld	r24, Z
     f92:	91 81       	ldd	r25, Z+1	; 0x01
     f94:	0e 94 c5 00 	call	0x18a	; 0x18a <bugurt_set_stack_pointer>
__attribute__ (( signal, naked )) void SYSTEM_TIMER_ISR(void);
void SYSTEM_TIMER_ISR(void)
{
    _vsmp_interrupt_prologue();

    current_vm++;
     f98:	80 91 12 01 	lds	r24, 0x0112
     f9c:	8f 5f       	subi	r24, 0xFF	; 255
     f9e:	80 93 12 01 	sts	0x0112, r24
    if(current_vm >= MAX_CORES)current_vm = (core_id_t)0;
     fa2:	80 91 12 01 	lds	r24, 0x0112
     fa6:	82 30       	cpi	r24, 0x02	; 2
     fa8:	10 f0       	brcs	.+4      	; 0xfae <__vector_7+0xd0>
     faa:	10 92 12 01 	sts	0x0112, r1

    if(vsmp_systimer_hook)
     fae:	80 91 d5 02 	lds	r24, 0x02D5
     fb2:	90 91 d6 02 	lds	r25, 0x02D6
     fb6:	00 97       	sbiw	r24, 0x00	; 0
     fb8:	29 f0       	breq	.+10     	; 0xfc4 <__vector_7+0xe6>
    {
        vsmp_systimer_hook();
     fba:	e0 91 d5 02 	lds	r30, 0x02D5
     fbe:	f0 91 d6 02 	lds	r31, 0x02D6
     fc2:	09 95       	icall
    }

    vm_state[current_vm].int_nest_count++;
     fc4:	80 91 12 01 	lds	r24, 0x0112
     fc8:	28 2f       	mov	r18, r24
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	c9 01       	movw	r24, r18
     fce:	88 0f       	add	r24, r24
     fd0:	99 1f       	adc	r25, r25
     fd2:	88 0f       	add	r24, r24
     fd4:	99 1f       	adc	r25, r25
     fd6:	88 0f       	add	r24, r24
     fd8:	99 1f       	adc	r25, r25
     fda:	82 0f       	add	r24, r18
     fdc:	93 1f       	adc	r25, r19
     fde:	fc 01       	movw	r30, r24
     fe0:	ea 5e       	subi	r30, 0xEA	; 234
     fe2:	fe 4f       	sbci	r31, 0xFE	; 254
     fe4:	80 81       	ld	r24, Z
     fe6:	91 81       	ldd	r25, Z+1	; 0x01
     fe8:	ac 01       	movw	r20, r24
     fea:	4f 5f       	subi	r20, 0xFF	; 255
     fec:	5f 4f       	sbci	r21, 0xFF	; 255
     fee:	c9 01       	movw	r24, r18
     ff0:	88 0f       	add	r24, r24
     ff2:	99 1f       	adc	r25, r25
     ff4:	88 0f       	add	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	88 0f       	add	r24, r24
     ffa:	99 1f       	adc	r25, r25
     ffc:	82 0f       	add	r24, r18
     ffe:	93 1f       	adc	r25, r19
    1000:	fc 01       	movw	r30, r24
    1002:	ea 5e       	subi	r30, 0xEA	; 234
    1004:	fe 4f       	sbci	r31, 0xFE	; 254
    1006:	51 83       	std	Z+1, r21	; 0x01
    1008:	40 83       	st	Z, r20
    bugurt_set_stack_pointer( vm_state[current_vm].int_sp );
    100a:	80 91 12 01 	lds	r24, 0x0112
    100e:	28 2f       	mov	r18, r24
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	c9 01       	movw	r24, r18
    1014:	88 0f       	add	r24, r24
    1016:	99 1f       	adc	r25, r25
    1018:	88 0f       	add	r24, r24
    101a:	99 1f       	adc	r25, r25
    101c:	88 0f       	add	r24, r24
    101e:	99 1f       	adc	r25, r25
    1020:	82 0f       	add	r24, r18
    1022:	93 1f       	adc	r25, r19
    1024:	fc 01       	movw	r30, r24
    1026:	e6 5e       	subi	r30, 0xE6	; 230
    1028:	fe 4f       	sbci	r31, 0xFE	; 254
    102a:	80 81       	ld	r24, Z
    102c:	91 81       	ldd	r25, Z+1	; 0x01
    102e:	0e 94 c5 00 	call	0x18a	; 0x18a <bugurt_set_stack_pointer>
    }
    bugurt_set_stack_pointer( vm_state[current_vm].int_sp );
}
__MACRO_FUNCTION__( _vsmp_interrupt_epilogue )
{
    if( vsmp_do_interrupt() ) goto chained_vinterrupt_return;
    1032:	0e 94 20 06 	call	0xc40	; 0xc40 <vsmp_do_interrupt>
    1036:	88 23       	and	r24, r24
    1038:	09 f0       	breq	.+2      	; 0x103c <__vector_7+0x15e>
    103a:	6c c0       	rjmp	.+216    	; 0x1114 <__vector_7+0x236>

    if( --vm_state[current_vm].int_nest_count )goto nesting_vinterrupt_return;
    103c:	80 91 12 01 	lds	r24, 0x0112
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	c9 01       	movw	r24, r18
    1046:	88 0f       	add	r24, r24
    1048:	99 1f       	adc	r25, r25
    104a:	88 0f       	add	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	88 0f       	add	r24, r24
    1050:	99 1f       	adc	r25, r25
    1052:	82 0f       	add	r24, r18
    1054:	93 1f       	adc	r25, r19
    1056:	fc 01       	movw	r30, r24
    1058:	ea 5e       	subi	r30, 0xEA	; 234
    105a:	fe 4f       	sbci	r31, 0xFE	; 254
    105c:	80 81       	ld	r24, Z
    105e:	91 81       	ldd	r25, Z+1	; 0x01
    1060:	ac 01       	movw	r20, r24
    1062:	41 50       	subi	r20, 0x01	; 1
    1064:	50 40       	sbci	r21, 0x00	; 0
    1066:	c9 01       	movw	r24, r18
    1068:	88 0f       	add	r24, r24
    106a:	99 1f       	adc	r25, r25
    106c:	88 0f       	add	r24, r24
    106e:	99 1f       	adc	r25, r25
    1070:	88 0f       	add	r24, r24
    1072:	99 1f       	adc	r25, r25
    1074:	82 0f       	add	r24, r18
    1076:	93 1f       	adc	r25, r19
    1078:	fc 01       	movw	r30, r24
    107a:	ea 5e       	subi	r30, 0xEA	; 234
    107c:	fe 4f       	sbci	r31, 0xFE	; 254
    107e:	51 83       	std	Z+1, r21	; 0x01
    1080:	40 83       	st	Z, r20
    1082:	c9 01       	movw	r24, r18
    1084:	88 0f       	add	r24, r24
    1086:	99 1f       	adc	r25, r25
    1088:	88 0f       	add	r24, r24
    108a:	99 1f       	adc	r25, r25
    108c:	88 0f       	add	r24, r24
    108e:	99 1f       	adc	r25, r25
    1090:	82 0f       	add	r24, r18
    1092:	93 1f       	adc	r25, r19
    1094:	fc 01       	movw	r30, r24
    1096:	ea 5e       	subi	r30, 0xEA	; 234
    1098:	fe 4f       	sbci	r31, 0xFE	; 254
    109a:	80 81       	ld	r24, Z
    109c:	91 81       	ldd	r25, Z+1	; 0x01
    109e:	00 97       	sbiw	r24, 0x00	; 0
    10a0:	b1 f5       	brne	.+108    	; 0x110e <__vector_7+0x230>

    vm_state[current_vm].int_sp = &vm_int_stack[current_vm][VM_INT_STACK_SIZE-1];
    10a2:	80 91 12 01 	lds	r24, 0x0112
    10a6:	48 2f       	mov	r20, r24
    10a8:	50 e0       	ldi	r21, 0x00	; 0
    10aa:	25 ed       	ldi	r18, 0xD5	; 213
    10ac:	31 e0       	ldi	r19, 0x01	; 1
    10ae:	80 91 12 01 	lds	r24, 0x0112
    10b2:	88 2f       	mov	r24, r24
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	96 95       	lsr	r25
    10b8:	98 2f       	mov	r25, r24
    10ba:	88 27       	eor	r24, r24
    10bc:	97 95       	ror	r25
    10be:	87 95       	ror	r24
    10c0:	81 58       	subi	r24, 0x81	; 129
    10c2:	9f 4f       	sbci	r25, 0xFF	; 255
    10c4:	28 0f       	add	r18, r24
    10c6:	39 1f       	adc	r19, r25
    10c8:	ca 01       	movw	r24, r20
    10ca:	88 0f       	add	r24, r24
    10cc:	99 1f       	adc	r25, r25
    10ce:	88 0f       	add	r24, r24
    10d0:	99 1f       	adc	r25, r25
    10d2:	88 0f       	add	r24, r24
    10d4:	99 1f       	adc	r25, r25
    10d6:	84 0f       	add	r24, r20
    10d8:	95 1f       	adc	r25, r21
    10da:	fc 01       	movw	r30, r24
    10dc:	e6 5e       	subi	r30, 0xE6	; 230
    10de:	fe 4f       	sbci	r31, 0xFE	; 254
    10e0:	31 83       	std	Z+1, r19	; 0x01
    10e2:	20 83       	st	Z, r18
    bugurt_restore_context( vm_state[current_vm].sp ); // Will return to current vm operation!
    10e4:	80 91 12 01 	lds	r24, 0x0112
    10e8:	28 2f       	mov	r18, r24
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	c9 01       	movw	r24, r18
    10ee:	88 0f       	add	r24, r24
    10f0:	99 1f       	adc	r25, r25
    10f2:	88 0f       	add	r24, r24
    10f4:	99 1f       	adc	r25, r25
    10f6:	88 0f       	add	r24, r24
    10f8:	99 1f       	adc	r25, r25
    10fa:	82 0f       	add	r24, r18
    10fc:	93 1f       	adc	r25, r19
    10fe:	fc 01       	movw	r30, r24
    1100:	e8 5e       	subi	r30, 0xE8	; 232
    1102:	fe 4f       	sbci	r31, 0xFE	; 254
    1104:	80 81       	ld	r24, Z
    1106:	91 81       	ldd	r25, Z+1	; 0x01
    1108:	0e 94 9a 00 	call	0x134	; 0x134 <bugurt_restore_context>
    __asm__ __volatile__("reti"::);
    110c:	18 95       	reti

nesting_vinterrupt_return:

    bugurt_pop_context(); //Will return to nesting virtual interrupt!
    110e:	0e 94 97 00 	call	0x12e	; 0x12e <bugurt_pop_context>
    __asm__ __volatile__("reti"::);
    1112:	18 95       	reti

chained_vinterrupt_return:
    bugurt_push_pointer( (void *)vinterrupt_wrapper ); // Will return to vinterrupt_wrapper() entry point!
    1114:	84 ee       	ldi	r24, 0xE4	; 228
    1116:	96 e0       	ldi	r25, 0x06	; 6
    1118:	0e 94 cd 00 	call	0x19a	; 0x19a <bugurt_push_pointer>
    __asm__ __volatile__("ret"::);
    111c:	08 95       	ret

0000111e <_vsmp_vinterrupt>:
}

/* Virtual interrupt prologue and epilogue inline functions (I can,t debug macros !) */
__MACRO_FUNCTION__( _vsmp_interrupt_prologue )
{
    vm_buf = (void *)bugurt_save_context();
    111e:	0e 94 6b 00 	call	0xd6	; 0xd6 <bugurt_save_context>
    1122:	90 93 54 01 	sts	0x0154, r25
    1126:	80 93 53 01 	sts	0x0153, r24
    if( vm_state[current_vm].int_nest_count )
    112a:	80 91 12 01 	lds	r24, 0x0112
    112e:	28 2f       	mov	r18, r24
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	c9 01       	movw	r24, r18
    1134:	88 0f       	add	r24, r24
    1136:	99 1f       	adc	r25, r25
    1138:	88 0f       	add	r24, r24
    113a:	99 1f       	adc	r25, r25
    113c:	88 0f       	add	r24, r24
    113e:	99 1f       	adc	r25, r25
    1140:	82 0f       	add	r24, r18
    1142:	93 1f       	adc	r25, r19
    1144:	fc 01       	movw	r30, r24
    1146:	ea 5e       	subi	r30, 0xEA	; 234
    1148:	fe 4f       	sbci	r31, 0xFE	; 254
    114a:	80 81       	ld	r24, Z
    114c:	91 81       	ldd	r25, Z+1	; 0x01
    114e:	00 97       	sbiw	r24, 0x00	; 0
    1150:	c1 f0       	breq	.+48     	; 0x1182 <_vsmp_vinterrupt+0x64>
    {
        vm_state[current_vm].int_sp = (stack_t *)vm_buf;
    1152:	80 91 12 01 	lds	r24, 0x0112
    1156:	28 2f       	mov	r18, r24
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	80 91 53 01 	lds	r24, 0x0153
    115e:	90 91 54 01 	lds	r25, 0x0154
    1162:	ac 01       	movw	r20, r24
    1164:	c9 01       	movw	r24, r18
    1166:	88 0f       	add	r24, r24
    1168:	99 1f       	adc	r25, r25
    116a:	88 0f       	add	r24, r24
    116c:	99 1f       	adc	r25, r25
    116e:	88 0f       	add	r24, r24
    1170:	99 1f       	adc	r25, r25
    1172:	82 0f       	add	r24, r18
    1174:	93 1f       	adc	r25, r19
    1176:	fc 01       	movw	r30, r24
    1178:	e6 5e       	subi	r30, 0xE6	; 230
    117a:	fe 4f       	sbci	r31, 0xFE	; 254
    117c:	51 83       	std	Z+1, r21	; 0x01
    117e:	40 83       	st	Z, r20
    1180:	17 c0       	rjmp	.+46     	; 0x11b0 <_vsmp_vinterrupt+0x92>
    }
    else
    {
        vm_state[current_vm].sp = (stack_t *)vm_buf;
    1182:	80 91 12 01 	lds	r24, 0x0112
    1186:	28 2f       	mov	r18, r24
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	80 91 53 01 	lds	r24, 0x0153
    118e:	90 91 54 01 	lds	r25, 0x0154
    1192:	ac 01       	movw	r20, r24
    1194:	c9 01       	movw	r24, r18
    1196:	88 0f       	add	r24, r24
    1198:	99 1f       	adc	r25, r25
    119a:	88 0f       	add	r24, r24
    119c:	99 1f       	adc	r25, r25
    119e:	88 0f       	add	r24, r24
    11a0:	99 1f       	adc	r25, r25
    11a2:	82 0f       	add	r24, r18
    11a4:	93 1f       	adc	r25, r19
    11a6:	fc 01       	movw	r30, r24
    11a8:	e8 5e       	subi	r30, 0xE8	; 232
    11aa:	fe 4f       	sbci	r31, 0xFE	; 254
    11ac:	51 83       	std	Z+1, r21	; 0x01
    11ae:	40 83       	st	Z, r20
    }
    bugurt_set_stack_pointer( vm_state[current_vm].int_sp );
    11b0:	80 91 12 01 	lds	r24, 0x0112
    11b4:	28 2f       	mov	r18, r24
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	c9 01       	movw	r24, r18
    11ba:	88 0f       	add	r24, r24
    11bc:	99 1f       	adc	r25, r25
    11be:	88 0f       	add	r24, r24
    11c0:	99 1f       	adc	r25, r25
    11c2:	88 0f       	add	r24, r24
    11c4:	99 1f       	adc	r25, r25
    11c6:	82 0f       	add	r24, r18
    11c8:	93 1f       	adc	r25, r19
    11ca:	fc 01       	movw	r30, r24
    11cc:	e6 5e       	subi	r30, 0xE6	; 230
    11ce:	fe 4f       	sbci	r31, 0xFE	; 254
    11d0:	80 81       	ld	r24, Z
    11d2:	91 81       	ldd	r25, Z+1	; 0x01
    11d4:	0e 94 c5 00 	call	0x18a	; 0x18a <bugurt_set_stack_pointer>
// Software virtual interrupt tail function
__attribute__ (( naked )) void _vsmp_vinterrupt(void)
{
    _vsmp_interrupt_prologue();

    vm_state[current_vm].int_nest_count++;
    11d8:	80 91 12 01 	lds	r24, 0x0112
    11dc:	28 2f       	mov	r18, r24
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	c9 01       	movw	r24, r18
    11e2:	88 0f       	add	r24, r24
    11e4:	99 1f       	adc	r25, r25
    11e6:	88 0f       	add	r24, r24
    11e8:	99 1f       	adc	r25, r25
    11ea:	88 0f       	add	r24, r24
    11ec:	99 1f       	adc	r25, r25
    11ee:	82 0f       	add	r24, r18
    11f0:	93 1f       	adc	r25, r19
    11f2:	fc 01       	movw	r30, r24
    11f4:	ea 5e       	subi	r30, 0xEA	; 234
    11f6:	fe 4f       	sbci	r31, 0xFE	; 254
    11f8:	80 81       	ld	r24, Z
    11fa:	91 81       	ldd	r25, Z+1	; 0x01
    11fc:	ac 01       	movw	r20, r24
    11fe:	4f 5f       	subi	r20, 0xFF	; 255
    1200:	5f 4f       	sbci	r21, 0xFF	; 255
    1202:	c9 01       	movw	r24, r18
    1204:	88 0f       	add	r24, r24
    1206:	99 1f       	adc	r25, r25
    1208:	88 0f       	add	r24, r24
    120a:	99 1f       	adc	r25, r25
    120c:	88 0f       	add	r24, r24
    120e:	99 1f       	adc	r25, r25
    1210:	82 0f       	add	r24, r18
    1212:	93 1f       	adc	r25, r19
    1214:	fc 01       	movw	r30, r24
    1216:	ea 5e       	subi	r30, 0xEA	; 234
    1218:	fe 4f       	sbci	r31, 0xFE	; 254
    121a:	51 83       	std	Z+1, r21	; 0x01
    121c:	40 83       	st	Z, r20
    }
    bugurt_set_stack_pointer( vm_state[current_vm].int_sp );
}
__MACRO_FUNCTION__( _vsmp_interrupt_epilogue )
{
    if( vsmp_do_interrupt() ) goto chained_vinterrupt_return;
    121e:	0e 94 20 06 	call	0xc40	; 0xc40 <vsmp_do_interrupt>
    1222:	88 23       	and	r24, r24
    1224:	09 f0       	breq	.+2      	; 0x1228 <_vsmp_vinterrupt+0x10a>
    1226:	6c c0       	rjmp	.+216    	; 0x1300 <_vsmp_vinterrupt+0x1e2>

    if( --vm_state[current_vm].int_nest_count )goto nesting_vinterrupt_return;
    1228:	80 91 12 01 	lds	r24, 0x0112
    122c:	28 2f       	mov	r18, r24
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	c9 01       	movw	r24, r18
    1232:	88 0f       	add	r24, r24
    1234:	99 1f       	adc	r25, r25
    1236:	88 0f       	add	r24, r24
    1238:	99 1f       	adc	r25, r25
    123a:	88 0f       	add	r24, r24
    123c:	99 1f       	adc	r25, r25
    123e:	82 0f       	add	r24, r18
    1240:	93 1f       	adc	r25, r19
    1242:	fc 01       	movw	r30, r24
    1244:	ea 5e       	subi	r30, 0xEA	; 234
    1246:	fe 4f       	sbci	r31, 0xFE	; 254
    1248:	80 81       	ld	r24, Z
    124a:	91 81       	ldd	r25, Z+1	; 0x01
    124c:	ac 01       	movw	r20, r24
    124e:	41 50       	subi	r20, 0x01	; 1
    1250:	50 40       	sbci	r21, 0x00	; 0
    1252:	c9 01       	movw	r24, r18
    1254:	88 0f       	add	r24, r24
    1256:	99 1f       	adc	r25, r25
    1258:	88 0f       	add	r24, r24
    125a:	99 1f       	adc	r25, r25
    125c:	88 0f       	add	r24, r24
    125e:	99 1f       	adc	r25, r25
    1260:	82 0f       	add	r24, r18
    1262:	93 1f       	adc	r25, r19
    1264:	fc 01       	movw	r30, r24
    1266:	ea 5e       	subi	r30, 0xEA	; 234
    1268:	fe 4f       	sbci	r31, 0xFE	; 254
    126a:	51 83       	std	Z+1, r21	; 0x01
    126c:	40 83       	st	Z, r20
    126e:	c9 01       	movw	r24, r18
    1270:	88 0f       	add	r24, r24
    1272:	99 1f       	adc	r25, r25
    1274:	88 0f       	add	r24, r24
    1276:	99 1f       	adc	r25, r25
    1278:	88 0f       	add	r24, r24
    127a:	99 1f       	adc	r25, r25
    127c:	82 0f       	add	r24, r18
    127e:	93 1f       	adc	r25, r19
    1280:	fc 01       	movw	r30, r24
    1282:	ea 5e       	subi	r30, 0xEA	; 234
    1284:	fe 4f       	sbci	r31, 0xFE	; 254
    1286:	80 81       	ld	r24, Z
    1288:	91 81       	ldd	r25, Z+1	; 0x01
    128a:	00 97       	sbiw	r24, 0x00	; 0
    128c:	b1 f5       	brne	.+108    	; 0x12fa <_vsmp_vinterrupt+0x1dc>

    vm_state[current_vm].int_sp = &vm_int_stack[current_vm][VM_INT_STACK_SIZE-1];
    128e:	80 91 12 01 	lds	r24, 0x0112
    1292:	48 2f       	mov	r20, r24
    1294:	50 e0       	ldi	r21, 0x00	; 0
    1296:	25 ed       	ldi	r18, 0xD5	; 213
    1298:	31 e0       	ldi	r19, 0x01	; 1
    129a:	80 91 12 01 	lds	r24, 0x0112
    129e:	88 2f       	mov	r24, r24
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	96 95       	lsr	r25
    12a4:	98 2f       	mov	r25, r24
    12a6:	88 27       	eor	r24, r24
    12a8:	97 95       	ror	r25
    12aa:	87 95       	ror	r24
    12ac:	81 58       	subi	r24, 0x81	; 129
    12ae:	9f 4f       	sbci	r25, 0xFF	; 255
    12b0:	28 0f       	add	r18, r24
    12b2:	39 1f       	adc	r19, r25
    12b4:	ca 01       	movw	r24, r20
    12b6:	88 0f       	add	r24, r24
    12b8:	99 1f       	adc	r25, r25
    12ba:	88 0f       	add	r24, r24
    12bc:	99 1f       	adc	r25, r25
    12be:	88 0f       	add	r24, r24
    12c0:	99 1f       	adc	r25, r25
    12c2:	84 0f       	add	r24, r20
    12c4:	95 1f       	adc	r25, r21
    12c6:	fc 01       	movw	r30, r24
    12c8:	e6 5e       	subi	r30, 0xE6	; 230
    12ca:	fe 4f       	sbci	r31, 0xFE	; 254
    12cc:	31 83       	std	Z+1, r19	; 0x01
    12ce:	20 83       	st	Z, r18
    bugurt_restore_context( vm_state[current_vm].sp ); // Will return to current vm operation!
    12d0:	80 91 12 01 	lds	r24, 0x0112
    12d4:	28 2f       	mov	r18, r24
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	c9 01       	movw	r24, r18
    12da:	88 0f       	add	r24, r24
    12dc:	99 1f       	adc	r25, r25
    12de:	88 0f       	add	r24, r24
    12e0:	99 1f       	adc	r25, r25
    12e2:	88 0f       	add	r24, r24
    12e4:	99 1f       	adc	r25, r25
    12e6:	82 0f       	add	r24, r18
    12e8:	93 1f       	adc	r25, r19
    12ea:	fc 01       	movw	r30, r24
    12ec:	e8 5e       	subi	r30, 0xE8	; 232
    12ee:	fe 4f       	sbci	r31, 0xFE	; 254
    12f0:	80 81       	ld	r24, Z
    12f2:	91 81       	ldd	r25, Z+1	; 0x01
    12f4:	0e 94 9a 00 	call	0x134	; 0x134 <bugurt_restore_context>
    __asm__ __volatile__("reti"::);
    12f8:	18 95       	reti

nesting_vinterrupt_return:

    bugurt_pop_context(); //Will return to nesting virtual interrupt!
    12fa:	0e 94 97 00 	call	0x12e	; 0x12e <bugurt_pop_context>
    __asm__ __volatile__("reti"::);
    12fe:	18 95       	reti

chained_vinterrupt_return:
    bugurt_push_pointer( (void *)vinterrupt_wrapper ); // Will return to vinterrupt_wrapper() entry point!
    1300:	84 ee       	ldi	r24, 0xE4	; 228
    1302:	96 e0       	ldi	r25, 0x06	; 6
    1304:	0e 94 cd 00 	call	0x19a	; 0x19a <bugurt_push_pointer>
    __asm__ __volatile__("ret"::);
    1308:	08 95       	ret

0000130a <vsmp_vinterrupt_isr>:
    _vsmp_interrupt_epilogue();
}

// Software virtual interrupt ( For ISR usage only ! Do NOT call from "main"!)
bool_t vsmp_vinterrupt_isr( core_id_t vm, vinterrupt_t * vector )
{
    130a:	df 93       	push	r29
    130c:	cf 93       	push	r28
    130e:	cd b7       	in	r28, 0x3d	; 61
    1310:	de b7       	in	r29, 0x3e	; 62
    1312:	27 97       	sbiw	r28, 0x07	; 7
    1314:	0f b6       	in	r0, 0x3f	; 63
    1316:	f8 94       	cli
    1318:	de bf       	out	0x3e, r29	; 62
    131a:	0f be       	out	0x3f, r0	; 63
    131c:	cd bf       	out	0x3d, r28	; 61
    131e:	89 83       	std	Y+1, r24	; 0x01
    1320:	7b 83       	std	Y+3, r23	; 0x03
    1322:	6a 83       	std	Y+2, r22	; 0x02
    if( vector->num_pending++ ) return (bool_t)0;
    1324:	ea 81       	ldd	r30, Y+2	; 0x02
    1326:	fb 81       	ldd	r31, Y+3	; 0x03
    1328:	84 81       	ldd	r24, Z+4	; 0x04
    132a:	95 81       	ldd	r25, Z+5	; 0x05
    132c:	9f 83       	std	Y+7, r25	; 0x07
    132e:	8e 83       	std	Y+6, r24	; 0x06
    1330:	1d 82       	std	Y+5, r1	; 0x05
    1332:	8e 81       	ldd	r24, Y+6	; 0x06
    1334:	9f 81       	ldd	r25, Y+7	; 0x07
    1336:	00 97       	sbiw	r24, 0x00	; 0
    1338:	11 f0       	breq	.+4      	; 0x133e <vsmp_vinterrupt_isr+0x34>
    133a:	91 e0       	ldi	r25, 0x01	; 1
    133c:	9d 83       	std	Y+5, r25	; 0x05
    133e:	8e 81       	ldd	r24, Y+6	; 0x06
    1340:	9f 81       	ldd	r25, Y+7	; 0x07
    1342:	01 96       	adiw	r24, 0x01	; 1
    1344:	ea 81       	ldd	r30, Y+2	; 0x02
    1346:	fb 81       	ldd	r31, Y+3	; 0x03
    1348:	95 83       	std	Z+5, r25	; 0x05
    134a:	84 83       	std	Z+4, r24	; 0x04
    134c:	8d 81       	ldd	r24, Y+5	; 0x05
    134e:	88 23       	and	r24, r24
    1350:	11 f0       	breq	.+4      	; 0x1356 <vsmp_vinterrupt_isr+0x4c>
    1352:	1c 82       	std	Y+4, r1	; 0x04
    1354:	40 c0       	rjmp	.+128    	; 0x13d6 <vsmp_vinterrupt_isr+0xcc>
    if( vm_state[vm].int_fifo )
    1356:	89 81       	ldd	r24, Y+1	; 0x01
    1358:	28 2f       	mov	r18, r24
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	c9 01       	movw	r24, r18
    135e:	88 0f       	add	r24, r24
    1360:	99 1f       	adc	r25, r25
    1362:	88 0f       	add	r24, r24
    1364:	99 1f       	adc	r25, r25
    1366:	88 0f       	add	r24, r24
    1368:	99 1f       	adc	r25, r25
    136a:	82 0f       	add	r24, r18
    136c:	93 1f       	adc	r25, r19
    136e:	fc 01       	movw	r30, r24
    1370:	ed 5e       	subi	r30, 0xED	; 237
    1372:	fe 4f       	sbci	r31, 0xFE	; 254
    1374:	80 81       	ld	r24, Z
    1376:	91 81       	ldd	r25, Z+1	; 0x01
    1378:	00 97       	sbiw	r24, 0x00	; 0
    137a:	c1 f0       	breq	.+48     	; 0x13ac <vsmp_vinterrupt_isr+0xa2>
    {
        item_insert( (item_t *)vector, (item_t *)vm_state[vm].int_fifo );
    137c:	4a 81       	ldd	r20, Y+2	; 0x02
    137e:	5b 81       	ldd	r21, Y+3	; 0x03
    1380:	89 81       	ldd	r24, Y+1	; 0x01
    1382:	28 2f       	mov	r18, r24
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	c9 01       	movw	r24, r18
    1388:	88 0f       	add	r24, r24
    138a:	99 1f       	adc	r25, r25
    138c:	88 0f       	add	r24, r24
    138e:	99 1f       	adc	r25, r25
    1390:	88 0f       	add	r24, r24
    1392:	99 1f       	adc	r25, r25
    1394:	82 0f       	add	r24, r18
    1396:	93 1f       	adc	r25, r19
    1398:	fc 01       	movw	r30, r24
    139a:	ed 5e       	subi	r30, 0xED	; 237
    139c:	fe 4f       	sbci	r31, 0xFE	; 254
    139e:	20 81       	ld	r18, Z
    13a0:	31 81       	ldd	r19, Z+1	; 0x01
    13a2:	ca 01       	movw	r24, r20
    13a4:	b9 01       	movw	r22, r18
    13a6:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <item_insert>
    13aa:	13 c0       	rjmp	.+38     	; 0x13d2 <vsmp_vinterrupt_isr+0xc8>
    }
    else
    {
        vm_state[vm].int_fifo = (item_t *)vector;
    13ac:	89 81       	ldd	r24, Y+1	; 0x01
    13ae:	28 2f       	mov	r18, r24
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	4a 81       	ldd	r20, Y+2	; 0x02
    13b4:	5b 81       	ldd	r21, Y+3	; 0x03
    13b6:	c9 01       	movw	r24, r18
    13b8:	88 0f       	add	r24, r24
    13ba:	99 1f       	adc	r25, r25
    13bc:	88 0f       	add	r24, r24
    13be:	99 1f       	adc	r25, r25
    13c0:	88 0f       	add	r24, r24
    13c2:	99 1f       	adc	r25, r25
    13c4:	82 0f       	add	r24, r18
    13c6:	93 1f       	adc	r25, r19
    13c8:	fc 01       	movw	r30, r24
    13ca:	ed 5e       	subi	r30, 0xED	; 237
    13cc:	fe 4f       	sbci	r31, 0xFE	; 254
    13ce:	51 83       	std	Z+1, r21	; 0x01
    13d0:	40 83       	st	Z, r20
    }
    return (bool_t)1;
    13d2:	91 e0       	ldi	r25, 0x01	; 1
    13d4:	9c 83       	std	Y+4, r25	; 0x04
    13d6:	8c 81       	ldd	r24, Y+4	; 0x04
}
    13d8:	27 96       	adiw	r28, 0x07	; 7
    13da:	0f b6       	in	r0, 0x3f	; 63
    13dc:	f8 94       	cli
    13de:	de bf       	out	0x3e, r29	; 62
    13e0:	0f be       	out	0x3f, r0	; 63
    13e2:	cd bf       	out	0x3d, r28	; 61
    13e4:	cf 91       	pop	r28
    13e6:	df 91       	pop	r29
    13e8:	08 95       	ret

000013ea <vsmp_vinterrupt_init>:
vinterrupt_return:
    _vsmp_vinterrupt();
}

void vsmp_vinterrupt_init( vinterrupt_t * vector, void (*isr)(void) )
{
    13ea:	df 93       	push	r29
    13ec:	cf 93       	push	r28
    13ee:	00 d0       	rcall	.+0      	; 0x13f0 <vsmp_vinterrupt_init+0x6>
    13f0:	00 d0       	rcall	.+0      	; 0x13f2 <vsmp_vinterrupt_init+0x8>
    13f2:	cd b7       	in	r28, 0x3d	; 61
    13f4:	de b7       	in	r29, 0x3e	; 62
    13f6:	9a 83       	std	Y+2, r25	; 0x02
    13f8:	89 83       	std	Y+1, r24	; 0x01
    13fa:	7c 83       	std	Y+4, r23	; 0x04
    13fc:	6b 83       	std	Y+3, r22	; 0x03
    item_init( (item_t *)vector );
    13fe:	89 81       	ldd	r24, Y+1	; 0x01
    1400:	9a 81       	ldd	r25, Y+2	; 0x02
    1402:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <item_init>
    vector->num_pending = (count_t)0;
    1406:	e9 81       	ldd	r30, Y+1	; 0x01
    1408:	fa 81       	ldd	r31, Y+2	; 0x02
    140a:	15 82       	std	Z+5, r1	; 0x05
    140c:	14 82       	std	Z+4, r1	; 0x04
    vector->isr = isr;
    140e:	e9 81       	ldd	r30, Y+1	; 0x01
    1410:	fa 81       	ldd	r31, Y+2	; 0x02
    1412:	8b 81       	ldd	r24, Y+3	; 0x03
    1414:	9c 81       	ldd	r25, Y+4	; 0x04
    1416:	97 83       	std	Z+7, r25	; 0x07
    1418:	86 83       	std	Z+6, r24	; 0x06
}
    141a:	0f 90       	pop	r0
    141c:	0f 90       	pop	r0
    141e:	0f 90       	pop	r0
    1420:	0f 90       	pop	r0
    1422:	cf 91       	pop	r28
    1424:	df 91       	pop	r29
    1426:	08 95       	ret

00001428 <disable_interrupts>:

void disable_interrupts(void)
{
    1428:	df 93       	push	r29
    142a:	cf 93       	push	r28
    142c:	cd b7       	in	r28, 0x3d	; 61
    142e:	de b7       	in	r29, 0x3e	; 62
    cli();
    1430:	f8 94       	cli
    vm_state[current_vm].int_enabled = (bool_t)0;
    1432:	80 91 12 01 	lds	r24, 0x0112
    1436:	28 2f       	mov	r18, r24
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	c9 01       	movw	r24, r18
    143c:	88 0f       	add	r24, r24
    143e:	99 1f       	adc	r25, r25
    1440:	88 0f       	add	r24, r24
    1442:	99 1f       	adc	r25, r25
    1444:	88 0f       	add	r24, r24
    1446:	99 1f       	adc	r25, r25
    1448:	82 0f       	add	r24, r18
    144a:	93 1f       	adc	r25, r19
    144c:	fc 01       	movw	r30, r24
    144e:	eb 5e       	subi	r30, 0xEB	; 235
    1450:	fe 4f       	sbci	r31, 0xFE	; 254
    1452:	10 82       	st	Z, r1
    sei();
    1454:	78 94       	sei
}
    1456:	cf 91       	pop	r28
    1458:	df 91       	pop	r29
    145a:	08 95       	ret

0000145c <enable_interrupts>:

void enable_interrupts(void)
{
    145c:	df 93       	push	r29
    145e:	cf 93       	push	r28
    1460:	cd b7       	in	r28, 0x3d	; 61
    1462:	de b7       	in	r29, 0x3e	; 62
    cli();
    1464:	f8 94       	cli
    vm_state[current_vm].int_enabled = (bool_t)1;
    1466:	80 91 12 01 	lds	r24, 0x0112
    146a:	28 2f       	mov	r18, r24
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	c9 01       	movw	r24, r18
    1470:	88 0f       	add	r24, r24
    1472:	99 1f       	adc	r25, r25
    1474:	88 0f       	add	r24, r24
    1476:	99 1f       	adc	r25, r25
    1478:	88 0f       	add	r24, r24
    147a:	99 1f       	adc	r25, r25
    147c:	82 0f       	add	r24, r18
    147e:	93 1f       	adc	r25, r19
    1480:	fc 01       	movw	r30, r24
    1482:	eb 5e       	subi	r30, 0xEB	; 235
    1484:	fe 4f       	sbci	r31, 0xFE	; 254
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	80 83       	st	Z, r24
    if( vm_state[current_vm].int_fifo )_vsmp_vinterrupt();
    148a:	80 91 12 01 	lds	r24, 0x0112
    148e:	28 2f       	mov	r18, r24
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	c9 01       	movw	r24, r18
    1494:	88 0f       	add	r24, r24
    1496:	99 1f       	adc	r25, r25
    1498:	88 0f       	add	r24, r24
    149a:	99 1f       	adc	r25, r25
    149c:	88 0f       	add	r24, r24
    149e:	99 1f       	adc	r25, r25
    14a0:	82 0f       	add	r24, r18
    14a2:	93 1f       	adc	r25, r19
    14a4:	fc 01       	movw	r30, r24
    14a6:	ed 5e       	subi	r30, 0xED	; 237
    14a8:	fe 4f       	sbci	r31, 0xFE	; 254
    14aa:	80 81       	ld	r24, Z
    14ac:	91 81       	ldd	r25, Z+1	; 0x01
    14ae:	00 97       	sbiw	r24, 0x00	; 0
    14b0:	19 f0       	breq	.+6      	; 0x14b8 <enable_interrupts+0x5c>
    14b2:	0e 94 8f 08 	call	0x111e	; 0x111e <_vsmp_vinterrupt>
    14b6:	01 c0       	rjmp	.+2      	; 0x14ba <enable_interrupts+0x5e>
    else sei();
    14b8:	78 94       	sei
}
    14ba:	cf 91       	pop	r28
    14bc:	df 91       	pop	r29
    14be:	08 95       	ret

000014c0 <current_core>:

core_id_t current_core(void)
{
    14c0:	df 93       	push	r29
    14c2:	cf 93       	push	r28
    14c4:	0f 92       	push	r0
    14c6:	cd b7       	in	r28, 0x3d	; 61
    14c8:	de b7       	in	r29, 0x3e	; 62
    core_id_t ret;
    cli();
    14ca:	f8 94       	cli
    ret = current_vm;
    14cc:	80 91 12 01 	lds	r24, 0x0112
    14d0:	89 83       	std	Y+1, r24	; 0x01
    sei();
    14d2:	78 94       	sei
    return ret;
    14d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    14d6:	0f 90       	pop	r0
    14d8:	cf 91       	pop	r28
    14da:	df 91       	pop	r29
    14dc:	08 95       	ret

000014de <proc_stack_init>:
#include"../../../include/bugurt.h"
stack_t * proc_stack_init(stack_t * sstart, code_t code, void * arg)
{
    14de:	df 93       	push	r29
    14e0:	cf 93       	push	r28
    14e2:	cd b7       	in	r28, 0x3d	; 61
    14e4:	de b7       	in	r29, 0x3e	; 62
    14e6:	2a 97       	sbiw	r28, 0x0a	; 10
    14e8:	0f b6       	in	r0, 0x3f	; 63
    14ea:	f8 94       	cli
    14ec:	de bf       	out	0x3e, r29	; 62
    14ee:	0f be       	out	0x3f, r0	; 63
    14f0:	cd bf       	out	0x3d, r28	; 61
    14f2:	9e 83       	std	Y+6, r25	; 0x06
    14f4:	8d 83       	std	Y+5, r24	; 0x05
    14f6:	78 87       	std	Y+8, r23	; 0x08
    14f8:	6f 83       	std	Y+7, r22	; 0x07
    14fa:	5a 87       	std	Y+10, r21	; 0x0a
    14fc:	49 87       	std	Y+9, r20	; 0x09
    stack_t * tos = (stack_t *)sstart;
    14fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1500:	9e 81       	ldd	r25, Y+6	; 0x06
    1502:	9c 83       	std	Y+4, r25	; 0x04
    1504:	8b 83       	std	Y+3, r24	; 0x03
    // return address
    unsigned short tmp = (unsigned short)code;
    1506:	8f 81       	ldd	r24, Y+7	; 0x07
    1508:	98 85       	ldd	r25, Y+8	; 0x08
    150a:	9a 83       	std	Y+2, r25	; 0x02
    150c:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (stack_t)(tmp&(unsigned short)0x00ff);
    150e:	89 81       	ldd	r24, Y+1	; 0x01
    1510:	eb 81       	ldd	r30, Y+3	; 0x03
    1512:	fc 81       	ldd	r31, Y+4	; 0x04
    1514:	80 83       	st	Z, r24
    1516:	8b 81       	ldd	r24, Y+3	; 0x03
    1518:	9c 81       	ldd	r25, Y+4	; 0x04
    151a:	01 97       	sbiw	r24, 0x01	; 1
    151c:	9c 83       	std	Y+4, r25	; 0x04
    151e:	8b 83       	std	Y+3, r24	; 0x03
    tmp>>=8;
    1520:	89 81       	ldd	r24, Y+1	; 0x01
    1522:	9a 81       	ldd	r25, Y+2	; 0x02
    1524:	89 2f       	mov	r24, r25
    1526:	99 27       	eor	r25, r25
    1528:	9a 83       	std	Y+2, r25	; 0x02
    152a:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (stack_t)(tmp&(unsigned short)0x00ff);
    152c:	89 81       	ldd	r24, Y+1	; 0x01
    152e:	eb 81       	ldd	r30, Y+3	; 0x03
    1530:	fc 81       	ldd	r31, Y+4	; 0x04
    1532:	80 83       	st	Z, r24
    1534:	8b 81       	ldd	r24, Y+3	; 0x03
    1536:	9c 81       	ldd	r25, Y+4	; 0x04
    1538:	01 97       	sbiw	r24, 0x01	; 1
    153a:	9c 83       	std	Y+4, r25	; 0x04
    153c:	8b 83       	std	Y+3, r24	; 0x03

    // s
    *tos-- = 0x00;
    153e:	eb 81       	ldd	r30, Y+3	; 0x03
    1540:	fc 81       	ldd	r31, Y+4	; 0x04
    1542:	10 82       	st	Z, r1
    1544:	8b 81       	ldd	r24, Y+3	; 0x03
    1546:	9c 81       	ldd	r25, Y+4	; 0x04
    1548:	01 97       	sbiw	r24, 0x01	; 1
    154a:	9c 83       	std	Y+4, r25	; 0x04
    154c:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x00;// r1 must B 0
    154e:	eb 81       	ldd	r30, Y+3	; 0x03
    1550:	fc 81       	ldd	r31, Y+4	; 0x04
    1552:	10 82       	st	Z, r1
    1554:	8b 81       	ldd	r24, Y+3	; 0x03
    1556:	9c 81       	ldd	r25, Y+4	; 0x04
    1558:	01 97       	sbiw	r24, 0x01	; 1
    155a:	9c 83       	std	Y+4, r25	; 0x04
    155c:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x02;// r2
    155e:	eb 81       	ldd	r30, Y+3	; 0x03
    1560:	fc 81       	ldd	r31, Y+4	; 0x04
    1562:	82 e0       	ldi	r24, 0x02	; 2
    1564:	80 83       	st	Z, r24
    1566:	8b 81       	ldd	r24, Y+3	; 0x03
    1568:	9c 81       	ldd	r25, Y+4	; 0x04
    156a:	01 97       	sbiw	r24, 0x01	; 1
    156c:	9c 83       	std	Y+4, r25	; 0x04
    156e:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x80;// SREG: enable interrupts
    1570:	eb 81       	ldd	r30, Y+3	; 0x03
    1572:	fc 81       	ldd	r31, Y+4	; 0x04
    1574:	80 e8       	ldi	r24, 0x80	; 128
    1576:	80 83       	st	Z, r24
    1578:	8b 81       	ldd	r24, Y+3	; 0x03
    157a:	9c 81       	ldd	r25, Y+4	; 0x04
    157c:	01 97       	sbiw	r24, 0x01	; 1
    157e:	9c 83       	std	Y+4, r25	; 0x04
    1580:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x03;
    1582:	eb 81       	ldd	r30, Y+3	; 0x03
    1584:	fc 81       	ldd	r31, Y+4	; 0x04
    1586:	83 e0       	ldi	r24, 0x03	; 3
    1588:	80 83       	st	Z, r24
    158a:	8b 81       	ldd	r24, Y+3	; 0x03
    158c:	9c 81       	ldd	r25, Y+4	; 0x04
    158e:	01 97       	sbiw	r24, 0x01	; 1
    1590:	9c 83       	std	Y+4, r25	; 0x04
    1592:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x04;
    1594:	eb 81       	ldd	r30, Y+3	; 0x03
    1596:	fc 81       	ldd	r31, Y+4	; 0x04
    1598:	84 e0       	ldi	r24, 0x04	; 4
    159a:	80 83       	st	Z, r24
    159c:	8b 81       	ldd	r24, Y+3	; 0x03
    159e:	9c 81       	ldd	r25, Y+4	; 0x04
    15a0:	01 97       	sbiw	r24, 0x01	; 1
    15a2:	9c 83       	std	Y+4, r25	; 0x04
    15a4:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x05;
    15a6:	eb 81       	ldd	r30, Y+3	; 0x03
    15a8:	fc 81       	ldd	r31, Y+4	; 0x04
    15aa:	85 e0       	ldi	r24, 0x05	; 5
    15ac:	80 83       	st	Z, r24
    15ae:	8b 81       	ldd	r24, Y+3	; 0x03
    15b0:	9c 81       	ldd	r25, Y+4	; 0x04
    15b2:	01 97       	sbiw	r24, 0x01	; 1
    15b4:	9c 83       	std	Y+4, r25	; 0x04
    15b6:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x06;
    15b8:	eb 81       	ldd	r30, Y+3	; 0x03
    15ba:	fc 81       	ldd	r31, Y+4	; 0x04
    15bc:	86 e0       	ldi	r24, 0x06	; 6
    15be:	80 83       	st	Z, r24
    15c0:	8b 81       	ldd	r24, Y+3	; 0x03
    15c2:	9c 81       	ldd	r25, Y+4	; 0x04
    15c4:	01 97       	sbiw	r24, 0x01	; 1
    15c6:	9c 83       	std	Y+4, r25	; 0x04
    15c8:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x07;
    15ca:	eb 81       	ldd	r30, Y+3	; 0x03
    15cc:	fc 81       	ldd	r31, Y+4	; 0x04
    15ce:	87 e0       	ldi	r24, 0x07	; 7
    15d0:	80 83       	st	Z, r24
    15d2:	8b 81       	ldd	r24, Y+3	; 0x03
    15d4:	9c 81       	ldd	r25, Y+4	; 0x04
    15d6:	01 97       	sbiw	r24, 0x01	; 1
    15d8:	9c 83       	std	Y+4, r25	; 0x04
    15da:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x08;
    15dc:	eb 81       	ldd	r30, Y+3	; 0x03
    15de:	fc 81       	ldd	r31, Y+4	; 0x04
    15e0:	88 e0       	ldi	r24, 0x08	; 8
    15e2:	80 83       	st	Z, r24
    15e4:	8b 81       	ldd	r24, Y+3	; 0x03
    15e6:	9c 81       	ldd	r25, Y+4	; 0x04
    15e8:	01 97       	sbiw	r24, 0x01	; 1
    15ea:	9c 83       	std	Y+4, r25	; 0x04
    15ec:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x09;
    15ee:	eb 81       	ldd	r30, Y+3	; 0x03
    15f0:	fc 81       	ldd	r31, Y+4	; 0x04
    15f2:	89 e0       	ldi	r24, 0x09	; 9
    15f4:	80 83       	st	Z, r24
    15f6:	8b 81       	ldd	r24, Y+3	; 0x03
    15f8:	9c 81       	ldd	r25, Y+4	; 0x04
    15fa:	01 97       	sbiw	r24, 0x01	; 1
    15fc:	9c 83       	std	Y+4, r25	; 0x04
    15fe:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x10;
    1600:	eb 81       	ldd	r30, Y+3	; 0x03
    1602:	fc 81       	ldd	r31, Y+4	; 0x04
    1604:	80 e1       	ldi	r24, 0x10	; 16
    1606:	80 83       	st	Z, r24
    1608:	8b 81       	ldd	r24, Y+3	; 0x03
    160a:	9c 81       	ldd	r25, Y+4	; 0x04
    160c:	01 97       	sbiw	r24, 0x01	; 1
    160e:	9c 83       	std	Y+4, r25	; 0x04
    1610:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x11;
    1612:	eb 81       	ldd	r30, Y+3	; 0x03
    1614:	fc 81       	ldd	r31, Y+4	; 0x04
    1616:	81 e1       	ldi	r24, 0x11	; 17
    1618:	80 83       	st	Z, r24
    161a:	8b 81       	ldd	r24, Y+3	; 0x03
    161c:	9c 81       	ldd	r25, Y+4	; 0x04
    161e:	01 97       	sbiw	r24, 0x01	; 1
    1620:	9c 83       	std	Y+4, r25	; 0x04
    1622:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x12;
    1624:	eb 81       	ldd	r30, Y+3	; 0x03
    1626:	fc 81       	ldd	r31, Y+4	; 0x04
    1628:	82 e1       	ldi	r24, 0x12	; 18
    162a:	80 83       	st	Z, r24
    162c:	8b 81       	ldd	r24, Y+3	; 0x03
    162e:	9c 81       	ldd	r25, Y+4	; 0x04
    1630:	01 97       	sbiw	r24, 0x01	; 1
    1632:	9c 83       	std	Y+4, r25	; 0x04
    1634:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x13;
    1636:	eb 81       	ldd	r30, Y+3	; 0x03
    1638:	fc 81       	ldd	r31, Y+4	; 0x04
    163a:	83 e1       	ldi	r24, 0x13	; 19
    163c:	80 83       	st	Z, r24
    163e:	8b 81       	ldd	r24, Y+3	; 0x03
    1640:	9c 81       	ldd	r25, Y+4	; 0x04
    1642:	01 97       	sbiw	r24, 0x01	; 1
    1644:	9c 83       	std	Y+4, r25	; 0x04
    1646:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x14;
    1648:	eb 81       	ldd	r30, Y+3	; 0x03
    164a:	fc 81       	ldd	r31, Y+4	; 0x04
    164c:	84 e1       	ldi	r24, 0x14	; 20
    164e:	80 83       	st	Z, r24
    1650:	8b 81       	ldd	r24, Y+3	; 0x03
    1652:	9c 81       	ldd	r25, Y+4	; 0x04
    1654:	01 97       	sbiw	r24, 0x01	; 1
    1656:	9c 83       	std	Y+4, r25	; 0x04
    1658:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x15;
    165a:	eb 81       	ldd	r30, Y+3	; 0x03
    165c:	fc 81       	ldd	r31, Y+4	; 0x04
    165e:	85 e1       	ldi	r24, 0x15	; 21
    1660:	80 83       	st	Z, r24
    1662:	8b 81       	ldd	r24, Y+3	; 0x03
    1664:	9c 81       	ldd	r25, Y+4	; 0x04
    1666:	01 97       	sbiw	r24, 0x01	; 1
    1668:	9c 83       	std	Y+4, r25	; 0x04
    166a:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x16;
    166c:	eb 81       	ldd	r30, Y+3	; 0x03
    166e:	fc 81       	ldd	r31, Y+4	; 0x04
    1670:	86 e1       	ldi	r24, 0x16	; 22
    1672:	80 83       	st	Z, r24
    1674:	8b 81       	ldd	r24, Y+3	; 0x03
    1676:	9c 81       	ldd	r25, Y+4	; 0x04
    1678:	01 97       	sbiw	r24, 0x01	; 1
    167a:	9c 83       	std	Y+4, r25	; 0x04
    167c:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x17;
    167e:	eb 81       	ldd	r30, Y+3	; 0x03
    1680:	fc 81       	ldd	r31, Y+4	; 0x04
    1682:	87 e1       	ldi	r24, 0x17	; 23
    1684:	80 83       	st	Z, r24
    1686:	8b 81       	ldd	r24, Y+3	; 0x03
    1688:	9c 81       	ldd	r25, Y+4	; 0x04
    168a:	01 97       	sbiw	r24, 0x01	; 1
    168c:	9c 83       	std	Y+4, r25	; 0x04
    168e:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x18;
    1690:	eb 81       	ldd	r30, Y+3	; 0x03
    1692:	fc 81       	ldd	r31, Y+4	; 0x04
    1694:	88 e1       	ldi	r24, 0x18	; 24
    1696:	80 83       	st	Z, r24
    1698:	8b 81       	ldd	r24, Y+3	; 0x03
    169a:	9c 81       	ldd	r25, Y+4	; 0x04
    169c:	01 97       	sbiw	r24, 0x01	; 1
    169e:	9c 83       	std	Y+4, r25	; 0x04
    16a0:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x19;
    16a2:	eb 81       	ldd	r30, Y+3	; 0x03
    16a4:	fc 81       	ldd	r31, Y+4	; 0x04
    16a6:	89 e1       	ldi	r24, 0x19	; 25
    16a8:	80 83       	st	Z, r24
    16aa:	8b 81       	ldd	r24, Y+3	; 0x03
    16ac:	9c 81       	ldd	r25, Y+4	; 0x04
    16ae:	01 97       	sbiw	r24, 0x01	; 1
    16b0:	9c 83       	std	Y+4, r25	; 0x04
    16b2:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x20;
    16b4:	eb 81       	ldd	r30, Y+3	; 0x03
    16b6:	fc 81       	ldd	r31, Y+4	; 0x04
    16b8:	80 e2       	ldi	r24, 0x20	; 32
    16ba:	80 83       	st	Z, r24
    16bc:	8b 81       	ldd	r24, Y+3	; 0x03
    16be:	9c 81       	ldd	r25, Y+4	; 0x04
    16c0:	01 97       	sbiw	r24, 0x01	; 1
    16c2:	9c 83       	std	Y+4, r25	; 0x04
    16c4:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x21;
    16c6:	eb 81       	ldd	r30, Y+3	; 0x03
    16c8:	fc 81       	ldd	r31, Y+4	; 0x04
    16ca:	81 e2       	ldi	r24, 0x21	; 33
    16cc:	80 83       	st	Z, r24
    16ce:	8b 81       	ldd	r24, Y+3	; 0x03
    16d0:	9c 81       	ldd	r25, Y+4	; 0x04
    16d2:	01 97       	sbiw	r24, 0x01	; 1
    16d4:	9c 83       	std	Y+4, r25	; 0x04
    16d6:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x22;
    16d8:	eb 81       	ldd	r30, Y+3	; 0x03
    16da:	fc 81       	ldd	r31, Y+4	; 0x04
    16dc:	82 e2       	ldi	r24, 0x22	; 34
    16de:	80 83       	st	Z, r24
    16e0:	8b 81       	ldd	r24, Y+3	; 0x03
    16e2:	9c 81       	ldd	r25, Y+4	; 0x04
    16e4:	01 97       	sbiw	r24, 0x01	; 1
    16e6:	9c 83       	std	Y+4, r25	; 0x04
    16e8:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x23;
    16ea:	eb 81       	ldd	r30, Y+3	; 0x03
    16ec:	fc 81       	ldd	r31, Y+4	; 0x04
    16ee:	83 e2       	ldi	r24, 0x23	; 35
    16f0:	80 83       	st	Z, r24
    16f2:	8b 81       	ldd	r24, Y+3	; 0x03
    16f4:	9c 81       	ldd	r25, Y+4	; 0x04
    16f6:	01 97       	sbiw	r24, 0x01	; 1
    16f8:	9c 83       	std	Y+4, r25	; 0x04
    16fa:	8b 83       	std	Y+3, r24	; 0x03

    tmp = (unsigned short)arg;
    16fc:	89 85       	ldd	r24, Y+9	; 0x09
    16fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1700:	9a 83       	std	Y+2, r25	; 0x02
    1702:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (stack_t)(tmp&(unsigned short)0x00ff); // r24 LSByte of arg
    1704:	89 81       	ldd	r24, Y+1	; 0x01
    1706:	eb 81       	ldd	r30, Y+3	; 0x03
    1708:	fc 81       	ldd	r31, Y+4	; 0x04
    170a:	80 83       	st	Z, r24
    170c:	8b 81       	ldd	r24, Y+3	; 0x03
    170e:	9c 81       	ldd	r25, Y+4	; 0x04
    1710:	01 97       	sbiw	r24, 0x01	; 1
    1712:	9c 83       	std	Y+4, r25	; 0x04
    1714:	8b 83       	std	Y+3, r24	; 0x03
    tmp>>=8;
    1716:	89 81       	ldd	r24, Y+1	; 0x01
    1718:	9a 81       	ldd	r25, Y+2	; 0x02
    171a:	89 2f       	mov	r24, r25
    171c:	99 27       	eor	r25, r25
    171e:	9a 83       	std	Y+2, r25	; 0x02
    1720:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (stack_t)(tmp&(unsigned short)0x00ff); // r25 MSByte of arg
    1722:	89 81       	ldd	r24, Y+1	; 0x01
    1724:	eb 81       	ldd	r30, Y+3	; 0x03
    1726:	fc 81       	ldd	r31, Y+4	; 0x04
    1728:	80 83       	st	Z, r24
    172a:	8b 81       	ldd	r24, Y+3	; 0x03
    172c:	9c 81       	ldd	r25, Y+4	; 0x04
    172e:	01 97       	sbiw	r24, 0x01	; 1
    1730:	9c 83       	std	Y+4, r25	; 0x04
    1732:	8b 83       	std	Y+3, r24	; 0x03

    *tos-- = 0x26;
    1734:	eb 81       	ldd	r30, Y+3	; 0x03
    1736:	fc 81       	ldd	r31, Y+4	; 0x04
    1738:	86 e2       	ldi	r24, 0x26	; 38
    173a:	80 83       	st	Z, r24
    173c:	8b 81       	ldd	r24, Y+3	; 0x03
    173e:	9c 81       	ldd	r25, Y+4	; 0x04
    1740:	01 97       	sbiw	r24, 0x01	; 1
    1742:	9c 83       	std	Y+4, r25	; 0x04
    1744:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x27;
    1746:	eb 81       	ldd	r30, Y+3	; 0x03
    1748:	fc 81       	ldd	r31, Y+4	; 0x04
    174a:	87 e2       	ldi	r24, 0x27	; 39
    174c:	80 83       	st	Z, r24
    174e:	8b 81       	ldd	r24, Y+3	; 0x03
    1750:	9c 81       	ldd	r25, Y+4	; 0x04
    1752:	01 97       	sbiw	r24, 0x01	; 1
    1754:	9c 83       	std	Y+4, r25	; 0x04
    1756:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x28;
    1758:	eb 81       	ldd	r30, Y+3	; 0x03
    175a:	fc 81       	ldd	r31, Y+4	; 0x04
    175c:	88 e2       	ldi	r24, 0x28	; 40
    175e:	80 83       	st	Z, r24
    1760:	8b 81       	ldd	r24, Y+3	; 0x03
    1762:	9c 81       	ldd	r25, Y+4	; 0x04
    1764:	01 97       	sbiw	r24, 0x01	; 1
    1766:	9c 83       	std	Y+4, r25	; 0x04
    1768:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x29;
    176a:	eb 81       	ldd	r30, Y+3	; 0x03
    176c:	fc 81       	ldd	r31, Y+4	; 0x04
    176e:	89 e2       	ldi	r24, 0x29	; 41
    1770:	80 83       	st	Z, r24
    1772:	8b 81       	ldd	r24, Y+3	; 0x03
    1774:	9c 81       	ldd	r25, Y+4	; 0x04
    1776:	01 97       	sbiw	r24, 0x01	; 1
    1778:	9c 83       	std	Y+4, r25	; 0x04
    177a:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x30;
    177c:	eb 81       	ldd	r30, Y+3	; 0x03
    177e:	fc 81       	ldd	r31, Y+4	; 0x04
    1780:	80 e3       	ldi	r24, 0x30	; 48
    1782:	80 83       	st	Z, r24
    1784:	8b 81       	ldd	r24, Y+3	; 0x03
    1786:	9c 81       	ldd	r25, Y+4	; 0x04
    1788:	01 97       	sbiw	r24, 0x01	; 1
    178a:	9c 83       	std	Y+4, r25	; 0x04
    178c:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x31;
    178e:	eb 81       	ldd	r30, Y+3	; 0x03
    1790:	fc 81       	ldd	r31, Y+4	; 0x04
    1792:	81 e3       	ldi	r24, 0x31	; 49
    1794:	80 83       	st	Z, r24
    1796:	8b 81       	ldd	r24, Y+3	; 0x03
    1798:	9c 81       	ldd	r25, Y+4	; 0x04
    179a:	01 97       	sbiw	r24, 0x01	; 1
    179c:	9c 83       	std	Y+4, r25	; 0x04
    179e:	8b 83       	std	Y+3, r24	; 0x03
#ifdef RAMPZ
    *tos-- = 0xff;
#endif
    return tos;
    17a0:	8b 81       	ldd	r24, Y+3	; 0x03
    17a2:	9c 81       	ldd	r25, Y+4	; 0x04
}
    17a4:	2a 96       	adiw	r28, 0x0a	; 10
    17a6:	0f b6       	in	r0, 0x3f	; 63
    17a8:	f8 94       	cli
    17aa:	de bf       	out	0x3e, r29	; 62
    17ac:	0f be       	out	0x3f, r0	; 63
    17ae:	cd bf       	out	0x3d, r28	; 61
    17b0:	cf 91       	pop	r28
    17b2:	df 91       	pop	r29
    17b4:	08 95       	ret

000017b6 <_enter_crit_sec>:
*****************************************************************************************/
#include "../include/bugurt.h"
#ifdef CONFIG_MP
// блокировку захватывать не надо - все изменения происходят локально!
core_id_t _enter_crit_sec(void)
{
    17b6:	df 93       	push	r29
    17b8:	cf 93       	push	r28
    17ba:	0f 92       	push	r0
    17bc:	cd b7       	in	r28, 0x3d	; 61
    17be:	de b7       	in	r29, 0x3e	; 62
    core_id_t ret;
    disable_interrupts();
    17c0:	0e 94 14 0a 	call	0x1428	; 0x1428 <disable_interrupts>
    ret = current_core();
    17c4:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <current_core>
    17c8:	89 83       	std	Y+1, r24	; 0x01
    kernel.sched[ret].nested_crit_sec++;
    17ca:	89 81       	ldd	r24, Y+1	; 0x01
    17cc:	48 2f       	mov	r20, r24
    17ce:	50 e0       	ldi	r21, 0x00	; 0
    17d0:	8b e2       	ldi	r24, 0x2B	; 43
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	9c 01       	movw	r18, r24
    17d6:	42 9f       	mul	r20, r18
    17d8:	c0 01       	movw	r24, r0
    17da:	43 9f       	mul	r20, r19
    17dc:	90 0d       	add	r25, r0
    17de:	52 9f       	mul	r21, r18
    17e0:	90 0d       	add	r25, r0
    17e2:	11 24       	eor	r1, r1
    17e4:	fc 01       	movw	r30, r24
    17e6:	e1 50       	subi	r30, 0x01	; 1
    17e8:	fd 4f       	sbci	r31, 0xFD	; 253
    17ea:	80 81       	ld	r24, Z
    17ec:	91 81       	ldd	r25, Z+1	; 0x01
    17ee:	9c 01       	movw	r18, r24
    17f0:	2f 5f       	subi	r18, 0xFF	; 255
    17f2:	3f 4f       	sbci	r19, 0xFF	; 255
    17f4:	8b e2       	ldi	r24, 0x2B	; 43
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	bc 01       	movw	r22, r24
    17fa:	46 9f       	mul	r20, r22
    17fc:	c0 01       	movw	r24, r0
    17fe:	47 9f       	mul	r20, r23
    1800:	90 0d       	add	r25, r0
    1802:	56 9f       	mul	r21, r22
    1804:	90 0d       	add	r25, r0
    1806:	11 24       	eor	r1, r1
    1808:	fc 01       	movw	r30, r24
    180a:	e1 50       	subi	r30, 0x01	; 1
    180c:	fd 4f       	sbci	r31, 0xFD	; 253
    180e:	31 83       	std	Z+1, r19	; 0x01
    1810:	20 83       	st	Z, r18
    return ret;
    1812:	89 81       	ldd	r24, Y+1	; 0x01
}
    1814:	0f 90       	pop	r0
    1816:	cf 91       	pop	r28
    1818:	df 91       	pop	r29
    181a:	08 95       	ret

0000181c <_exit_crit_sec>:

void _exit_crit_sec(core_id_t core)
{
    181c:	df 93       	push	r29
    181e:	cf 93       	push	r28
    1820:	0f 92       	push	r0
    1822:	cd b7       	in	r28, 0x3d	; 61
    1824:	de b7       	in	r29, 0x3e	; 62
    1826:	89 83       	std	Y+1, r24	; 0x01
    if( kernel.sched[core].nested_crit_sec != (count_t)0 )kernel.sched[core].nested_crit_sec--;
    1828:	89 81       	ldd	r24, Y+1	; 0x01
    182a:	28 2f       	mov	r18, r24
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	8b e2       	ldi	r24, 0x2B	; 43
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	ac 01       	movw	r20, r24
    1834:	24 9f       	mul	r18, r20
    1836:	c0 01       	movw	r24, r0
    1838:	25 9f       	mul	r18, r21
    183a:	90 0d       	add	r25, r0
    183c:	34 9f       	mul	r19, r20
    183e:	90 0d       	add	r25, r0
    1840:	11 24       	eor	r1, r1
    1842:	fc 01       	movw	r30, r24
    1844:	e1 50       	subi	r30, 0x01	; 1
    1846:	fd 4f       	sbci	r31, 0xFD	; 253
    1848:	80 81       	ld	r24, Z
    184a:	91 81       	ldd	r25, Z+1	; 0x01
    184c:	00 97       	sbiw	r24, 0x00	; 0
    184e:	21 f1       	breq	.+72     	; 0x1898 <_exit_crit_sec+0x7c>
    1850:	89 81       	ldd	r24, Y+1	; 0x01
    1852:	48 2f       	mov	r20, r24
    1854:	50 e0       	ldi	r21, 0x00	; 0
    1856:	8b e2       	ldi	r24, 0x2B	; 43
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	bc 01       	movw	r22, r24
    185c:	46 9f       	mul	r20, r22
    185e:	c0 01       	movw	r24, r0
    1860:	47 9f       	mul	r20, r23
    1862:	90 0d       	add	r25, r0
    1864:	56 9f       	mul	r21, r22
    1866:	90 0d       	add	r25, r0
    1868:	11 24       	eor	r1, r1
    186a:	fc 01       	movw	r30, r24
    186c:	e1 50       	subi	r30, 0x01	; 1
    186e:	fd 4f       	sbci	r31, 0xFD	; 253
    1870:	80 81       	ld	r24, Z
    1872:	91 81       	ldd	r25, Z+1	; 0x01
    1874:	9c 01       	movw	r18, r24
    1876:	21 50       	subi	r18, 0x01	; 1
    1878:	30 40       	sbci	r19, 0x00	; 0
    187a:	8b e2       	ldi	r24, 0x2B	; 43
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	bc 01       	movw	r22, r24
    1880:	46 9f       	mul	r20, r22
    1882:	c0 01       	movw	r24, r0
    1884:	47 9f       	mul	r20, r23
    1886:	90 0d       	add	r25, r0
    1888:	56 9f       	mul	r21, r22
    188a:	90 0d       	add	r25, r0
    188c:	11 24       	eor	r1, r1
    188e:	fc 01       	movw	r30, r24
    1890:	e1 50       	subi	r30, 0x01	; 1
    1892:	fd 4f       	sbci	r31, 0xFD	; 253
    1894:	31 83       	std	Z+1, r19	; 0x01
    1896:	20 83       	st	Z, r18
    if( kernel.sched[core].nested_crit_sec == (count_t)0 )enable_interrupts();
    1898:	89 81       	ldd	r24, Y+1	; 0x01
    189a:	28 2f       	mov	r18, r24
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	8b e2       	ldi	r24, 0x2B	; 43
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	ac 01       	movw	r20, r24
    18a4:	24 9f       	mul	r18, r20
    18a6:	c0 01       	movw	r24, r0
    18a8:	25 9f       	mul	r18, r21
    18aa:	90 0d       	add	r25, r0
    18ac:	34 9f       	mul	r19, r20
    18ae:	90 0d       	add	r25, r0
    18b0:	11 24       	eor	r1, r1
    18b2:	fc 01       	movw	r30, r24
    18b4:	e1 50       	subi	r30, 0x01	; 1
    18b6:	fd 4f       	sbci	r31, 0xFD	; 253
    18b8:	80 81       	ld	r24, Z
    18ba:	91 81       	ldd	r25, Z+1	; 0x01
    18bc:	00 97       	sbiw	r24, 0x00	; 0
    18be:	11 f4       	brne	.+4      	; 0x18c4 <_exit_crit_sec+0xa8>
    18c0:	0e 94 2e 0a 	call	0x145c	; 0x145c <enable_interrupts>
}
    18c4:	0f 90       	pop	r0
    18c6:	cf 91       	pop	r28
    18c8:	df 91       	pop	r29
    18ca:	08 95       	ret

000018cc <index_search>:
*                           http://www.0chan.ru/r/res/9996.html                          *
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
prio_t index_search(index_t index)
{
    18cc:	df 93       	push	r29
    18ce:	cf 93       	push	r28
    18d0:	00 d0       	rcall	.+0      	; 0x18d2 <index_search+0x6>
    18d2:	00 d0       	rcall	.+0      	; 0x18d4 <index_search+0x8>
    18d4:	00 d0       	rcall	.+0      	; 0x18d6 <index_search+0xa>
    18d6:	cd b7       	in	r28, 0x3d	; 61
    18d8:	de b7       	in	r29, 0x3e	; 62
    18da:	8e 83       	std	Y+6, r24	; 0x06
    prio_t prio = (prio_t)0;
    18dc:	1d 82       	std	Y+5, r1	; 0x05
        но, т.к. BITS_IN_INDEX_T фиксировано для данной конфигурации,
        то получается время выполнения - O(1), ВСЕГДА.

        И да, предсказуемость + переносимость > быстродействие.
        */
    index_t upper = ~(index_t)0, lower = ~(index_t)0, middle;
    18de:	8f ef       	ldi	r24, 0xFF	; 255
    18e0:	8c 83       	std	Y+4, r24	; 0x04
    18e2:	8f ef       	ldi	r24, 0xFF	; 255
    18e4:	8b 83       	std	Y+3, r24	; 0x03
    prio_t step = (prio_t)BITS_IN_INDEX_T;
    18e6:	88 e0       	ldi	r24, 0x08	; 8
    18e8:	89 83       	std	Y+1, r24	; 0x01
    18ea:	22 c0       	rjmp	.+68     	; 0x1930 <index_search+0x64>
    while( step )
    {
        step>>=1; // делим шаг пополам
    18ec:	89 81       	ldd	r24, Y+1	; 0x01
    18ee:	86 95       	lsr	r24
    18f0:	89 83       	std	Y+1, r24	; 0x01
        middle = lower>>step;
    18f2:	8b 81       	ldd	r24, Y+3	; 0x03
    18f4:	28 2f       	mov	r18, r24
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	89 81       	ldd	r24, Y+1	; 0x01
    18fa:	88 2f       	mov	r24, r24
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	a9 01       	movw	r20, r18
    1900:	02 c0       	rjmp	.+4      	; 0x1906 <index_search+0x3a>
    1902:	55 95       	asr	r21
    1904:	47 95       	ror	r20
    1906:	8a 95       	dec	r24
    1908:	e2 f7       	brpl	.-8      	; 0x1902 <index_search+0x36>
    190a:	ca 01       	movw	r24, r20
    190c:	8a 83       	std	Y+2, r24	; 0x02
        if( index & upper & middle )
    190e:	9e 81       	ldd	r25, Y+6	; 0x06
    1910:	8c 81       	ldd	r24, Y+4	; 0x04
    1912:	98 23       	and	r25, r24
    1914:	8a 81       	ldd	r24, Y+2	; 0x02
    1916:	89 23       	and	r24, r25
    1918:	88 23       	and	r24, r24
    191a:	19 f0       	breq	.+6      	; 0x1922 <index_search+0x56>
        {
            lower = middle;
    191c:	8a 81       	ldd	r24, Y+2	; 0x02
    191e:	8b 83       	std	Y+3, r24	; 0x03
    1920:	07 c0       	rjmp	.+14     	; 0x1930 <index_search+0x64>
        }
        else
        {
            upper = ~middle;
    1922:	8a 81       	ldd	r24, Y+2	; 0x02
    1924:	80 95       	com	r24
    1926:	8c 83       	std	Y+4, r24	; 0x04
            prio += step;
    1928:	9d 81       	ldd	r25, Y+5	; 0x05
    192a:	89 81       	ldd	r24, Y+1	; 0x01
    192c:	89 0f       	add	r24, r25
    192e:	8d 83       	std	Y+5, r24	; 0x05

        И да, предсказуемость + переносимость > быстродействие.
        */
    index_t upper = ~(index_t)0, lower = ~(index_t)0, middle;
    prio_t step = (prio_t)BITS_IN_INDEX_T;
    while( step )
    1930:	89 81       	ldd	r24, Y+1	; 0x01
    1932:	88 23       	and	r24, r24
    1934:	d9 f6       	brne	.-74     	; 0x18ec <index_search+0x20>
        if ( mask & index )break;
        prio++;
        mask<<=1;
    }
#endif
    return prio;
    1936:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1938:	26 96       	adiw	r28, 0x06	; 6
    193a:	0f b6       	in	r0, 0x3f	; 63
    193c:	f8 94       	cli
    193e:	de bf       	out	0x3e, r29	; 62
    1940:	0f be       	out	0x3f, r0	; 63
    1942:	cd bf       	out	0x3d, r28	; 61
    1944:	cf 91       	pop	r28
    1946:	df 91       	pop	r29
    1948:	08 95       	ret

0000194a <_ipc_wait>:
*                           http://www.0chan.ru/r/res/9996.html                          *
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
void _ipc_wait( void * ipc_pointer )
{
    194a:	df 93       	push	r29
    194c:	cf 93       	push	r28
    194e:	00 d0       	rcall	.+0      	; 0x1950 <_ipc_wait+0x6>
    1950:	00 d0       	rcall	.+0      	; 0x1952 <_ipc_wait+0x8>
    1952:	cd b7       	in	r28, 0x3d	; 61
    1954:	de b7       	in	r29, 0x3e	; 62
    1956:	9c 83       	std	Y+4, r25	; 0x04
    1958:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc;
    proc = current_proc();
    195a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <current_proc>
    195e:	9a 83       	std	Y+2, r25	; 0x02
    1960:	89 83       	std	Y+1, r24	; 0x01
    SPIN_LOCK( proc );
    1962:	89 81       	ldd	r24, Y+1	; 0x01
    1964:	9a 81       	ldd	r25, Y+2	; 0x02
    1966:	83 96       	adiw	r24, 0x23	; 35
    1968:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    // Останавливаем процесс
    proc->flags |= PROC_FLG_IPCW;
    196c:	e9 81       	ldd	r30, Y+1	; 0x01
    196e:	fa 81       	ldd	r31, Y+2	; 0x02
    1970:	87 81       	ldd	r24, Z+7	; 0x07
    1972:	90 85       	ldd	r25, Z+8	; 0x08
    1974:	80 64       	ori	r24, 0x40	; 64
    1976:	e9 81       	ldd	r30, Y+1	; 0x01
    1978:	fa 81       	ldd	r31, Y+2	; 0x02
    197a:	90 87       	std	Z+8, r25	; 0x08
    197c:	87 83       	std	Z+7, r24	; 0x07
    proc->buf = ipc_pointer;
    197e:	e9 81       	ldd	r30, Y+1	; 0x01
    1980:	fa 81       	ldd	r31, Y+2	; 0x02
    1982:	8b 81       	ldd	r24, Y+3	; 0x03
    1984:	9c 81       	ldd	r25, Y+4	; 0x04
    1986:	90 a3       	std	Z+32, r25	; 0x20
    1988:	87 8f       	std	Z+31, r24	; 0x1f
    _proc_stop_( proc );
    198a:	89 81       	ldd	r24, Y+1	; 0x01
    198c:	9a 81       	ldd	r25, Y+2	; 0x02
    198e:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <_proc_stop_>
    RESCHED_PROC( proc );
    1992:	e9 81       	ldd	r30, Y+1	; 0x01
    1994:	fa 81       	ldd	r31, Y+2	; 0x02
    1996:	81 a1       	ldd	r24, Z+33	; 0x21
    1998:	0e 94 b7 01 	call	0x36e	; 0x36e <resched>

    SPIN_UNLOCK( proc );
    199c:	89 81       	ldd	r24, Y+1	; 0x01
    199e:	9a 81       	ldd	r25, Y+2	; 0x02
    19a0:	83 96       	adiw	r24, 0x23	; 35
    19a2:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
}
    19a6:	0f 90       	pop	r0
    19a8:	0f 90       	pop	r0
    19aa:	0f 90       	pop	r0
    19ac:	0f 90       	pop	r0
    19ae:	cf 91       	pop	r28
    19b0:	df 91       	pop	r29
    19b2:	08 95       	ret

000019b4 <ipc_send_isr>:

bool_t ipc_send_isr( proc_t * proc, ipc_data_t data )
{
    19b4:	df 93       	push	r29
    19b6:	cf 93       	push	r28
    19b8:	00 d0       	rcall	.+0      	; 0x19ba <ipc_send_isr+0x6>
    19ba:	00 d0       	rcall	.+0      	; 0x19bc <ipc_send_isr+0x8>
    19bc:	0f 92       	push	r0
    19be:	cd b7       	in	r28, 0x3d	; 61
    19c0:	de b7       	in	r29, 0x3e	; 62
    19c2:	9b 83       	std	Y+3, r25	; 0x03
    19c4:	8a 83       	std	Y+2, r24	; 0x02
    19c6:	7d 83       	std	Y+5, r23	; 0x05
    19c8:	6c 83       	std	Y+4, r22	; 0x04
    bool_t ret = (bool_t)0;
    19ca:	19 82       	std	Y+1, r1	; 0x01
    SPIN_LOCK( proc );
    19cc:	8a 81       	ldd	r24, Y+2	; 0x02
    19ce:	9b 81       	ldd	r25, Y+3	; 0x03
    19d0:	83 96       	adiw	r24, 0x23	; 35
    19d2:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    if( proc->flags & PROC_FLG_IPCW )
    19d6:	ea 81       	ldd	r30, Y+2	; 0x02
    19d8:	fb 81       	ldd	r31, Y+3	; 0x03
    19da:	87 81       	ldd	r24, Z+7	; 0x07
    19dc:	90 85       	ldd	r25, Z+8	; 0x08
    19de:	80 74       	andi	r24, 0x40	; 64
    19e0:	90 70       	andi	r25, 0x00	; 0
    19e2:	00 97       	sbiw	r24, 0x00	; 0
    19e4:	91 f1       	breq	.+100    	; 0x1a4a <ipc_send_isr+0x96>
    {
        proc->flags &= ~PROC_FLG_IPCW;
    19e6:	ea 81       	ldd	r30, Y+2	; 0x02
    19e8:	fb 81       	ldd	r31, Y+3	; 0x03
    19ea:	87 81       	ldd	r24, Z+7	; 0x07
    19ec:	90 85       	ldd	r25, Z+8	; 0x08
    19ee:	8f 7b       	andi	r24, 0xBF	; 191
    19f0:	ea 81       	ldd	r30, Y+2	; 0x02
    19f2:	fb 81       	ldd	r31, Y+3	; 0x03
    19f4:	90 87       	std	Z+8, r25	; 0x08
    19f6:	87 83       	std	Z+7, r24	; 0x07
        ///Обработка флага останова целевого процесса
        if(  PROC_PRE_STOP_TEST(proc)  )
    19f8:	ea 81       	ldd	r30, Y+2	; 0x02
    19fa:	fb 81       	ldd	r31, Y+3	; 0x03
    19fc:	87 81       	ldd	r24, Z+7	; 0x07
    19fe:	90 85       	ldd	r25, Z+8	; 0x08
    1a00:	80 78       	andi	r24, 0x80	; 128
    1a02:	90 70       	andi	r25, 0x00	; 0
    1a04:	00 97       	sbiw	r24, 0x00	; 0
    1a06:	91 f0       	breq	.+36     	; 0x1a2c <ipc_send_isr+0x78>
    1a08:	ea 81       	ldd	r30, Y+2	; 0x02
    1a0a:	fb 81       	ldd	r31, Y+3	; 0x03
    1a0c:	87 81       	ldd	r24, Z+7	; 0x07
    1a0e:	90 85       	ldd	r25, Z+8	; 0x08
    1a10:	8c 70       	andi	r24, 0x0C	; 12
    1a12:	90 70       	andi	r25, 0x00	; 0
    1a14:	00 97       	sbiw	r24, 0x00	; 0
    1a16:	51 f4       	brne	.+20     	; 0x1a2c <ipc_send_isr+0x78>
            Если был запрошен останов целевого процесса,
            и целевой процесс не удерживает общие ресурсы,
            то мы не будем возобновлять его работу
            и передавать ему информацию.
            */
            proc->flags &= ~PROC_FLG_PRE_STOP_MASK;
    1a18:	ea 81       	ldd	r30, Y+2	; 0x02
    1a1a:	fb 81       	ldd	r31, Y+3	; 0x03
    1a1c:	87 81       	ldd	r24, Z+7	; 0x07
    1a1e:	90 85       	ldd	r25, Z+8	; 0x08
    1a20:	8d 77       	andi	r24, 0x7D	; 125
    1a22:	ea 81       	ldd	r30, Y+2	; 0x02
    1a24:	fb 81       	ldd	r31, Y+3	; 0x03
    1a26:	90 87       	std	Z+8, r25	; 0x08
    1a28:	87 83       	std	Z+7, r24	; 0x07
    1a2a:	0f c0       	rjmp	.+30     	; 0x1a4a <ipc_send_isr+0x96>
            goto end;
        }
        ret = (bool_t)1; // информация будет передана
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	89 83       	std	Y+1, r24	; 0x01
        *(ipc_data_t *)proc->buf = data;
    1a30:	ea 81       	ldd	r30, Y+2	; 0x02
    1a32:	fb 81       	ldd	r31, Y+3	; 0x03
    1a34:	87 8d       	ldd	r24, Z+31	; 0x1f
    1a36:	90 a1       	ldd	r25, Z+32	; 0x20
    1a38:	fc 01       	movw	r30, r24
    1a3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a3c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a3e:	91 83       	std	Z+1, r25	; 0x01
    1a40:	80 83       	st	Z, r24
        _proc_run( proc );
    1a42:	8a 81       	ldd	r24, Y+2	; 0x02
    1a44:	9b 81       	ldd	r25, Y+3	; 0x03
    1a46:	0e 94 07 13 	call	0x260e	; 0x260e <_proc_run>
    }
end:
    SPIN_UNLOCK( proc );
    1a4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4c:	9b 81       	ldd	r25, Y+3	; 0x03
    1a4e:	83 96       	adiw	r24, 0x23	; 35
    1a50:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
    return ret;
    1a54:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a56:	0f 90       	pop	r0
    1a58:	0f 90       	pop	r0
    1a5a:	0f 90       	pop	r0
    1a5c:	0f 90       	pop	r0
    1a5e:	0f 90       	pop	r0
    1a60:	cf 91       	pop	r28
    1a62:	df 91       	pop	r29
    1a64:	08 95       	ret

00001a66 <_ipc_exchange>:

bool_t _ipc_exchange( proc_t * proc, ipc_data_t send, ipc_data_t * receive )
{
    1a66:	df 93       	push	r29
    1a68:	cf 93       	push	r28
    1a6a:	cd b7       	in	r28, 0x3d	; 61
    1a6c:	de b7       	in	r29, 0x3e	; 62
    1a6e:	27 97       	sbiw	r28, 0x07	; 7
    1a70:	0f b6       	in	r0, 0x3f	; 63
    1a72:	f8 94       	cli
    1a74:	de bf       	out	0x3e, r29	; 62
    1a76:	0f be       	out	0x3f, r0	; 63
    1a78:	cd bf       	out	0x3d, r28	; 61
    1a7a:	9b 83       	std	Y+3, r25	; 0x03
    1a7c:	8a 83       	std	Y+2, r24	; 0x02
    1a7e:	7d 83       	std	Y+5, r23	; 0x05
    1a80:	6c 83       	std	Y+4, r22	; 0x04
    1a82:	5f 83       	std	Y+7, r21	; 0x07
    1a84:	4e 83       	std	Y+6, r20	; 0x06
    bool_t ret = (bool_t)0;
    1a86:	19 82       	std	Y+1, r1	; 0x01
    SPIN_LOCK( proc );
    1a88:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8a:	9b 81       	ldd	r25, Y+3	; 0x03
    1a8c:	83 96       	adiw	r24, 0x23	; 35
    1a8e:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    if( proc->flags & PROC_FLG_IPCW )
    1a92:	ea 81       	ldd	r30, Y+2	; 0x02
    1a94:	fb 81       	ldd	r31, Y+3	; 0x03
    1a96:	87 81       	ldd	r24, Z+7	; 0x07
    1a98:	90 85       	ldd	r25, Z+8	; 0x08
    1a9a:	80 74       	andi	r24, 0x40	; 64
    1a9c:	90 70       	andi	r25, 0x00	; 0
    1a9e:	00 97       	sbiw	r24, 0x00	; 0
    1aa0:	b1 f1       	breq	.+108    	; 0x1b0e <_ipc_exchange+0xa8>
    {
        proc->flags &= ~PROC_FLG_IPCW;
    1aa2:	ea 81       	ldd	r30, Y+2	; 0x02
    1aa4:	fb 81       	ldd	r31, Y+3	; 0x03
    1aa6:	87 81       	ldd	r24, Z+7	; 0x07
    1aa8:	90 85       	ldd	r25, Z+8	; 0x08
    1aaa:	8f 7b       	andi	r24, 0xBF	; 191
    1aac:	ea 81       	ldd	r30, Y+2	; 0x02
    1aae:	fb 81       	ldd	r31, Y+3	; 0x03
    1ab0:	90 87       	std	Z+8, r25	; 0x08
    1ab2:	87 83       	std	Z+7, r24	; 0x07
        ///Обработка флага останова целевого процесса
        if(  PROC_PRE_STOP_TEST(proc)  )
    1ab4:	ea 81       	ldd	r30, Y+2	; 0x02
    1ab6:	fb 81       	ldd	r31, Y+3	; 0x03
    1ab8:	87 81       	ldd	r24, Z+7	; 0x07
    1aba:	90 85       	ldd	r25, Z+8	; 0x08
    1abc:	80 78       	andi	r24, 0x80	; 128
    1abe:	90 70       	andi	r25, 0x00	; 0
    1ac0:	00 97       	sbiw	r24, 0x00	; 0
    1ac2:	91 f0       	breq	.+36     	; 0x1ae8 <_ipc_exchange+0x82>
    1ac4:	ea 81       	ldd	r30, Y+2	; 0x02
    1ac6:	fb 81       	ldd	r31, Y+3	; 0x03
    1ac8:	87 81       	ldd	r24, Z+7	; 0x07
    1aca:	90 85       	ldd	r25, Z+8	; 0x08
    1acc:	8c 70       	andi	r24, 0x0C	; 12
    1ace:	90 70       	andi	r25, 0x00	; 0
    1ad0:	00 97       	sbiw	r24, 0x00	; 0
    1ad2:	51 f4       	brne	.+20     	; 0x1ae8 <_ipc_exchange+0x82>
            Если был запрошен останов целевого процесса,
            и целевой процесс не удерживает общие ресурсы,
            то мы не будем возобновлять его работу
            и передавать ему информацию.
            */
            proc->flags &= ~PROC_FLG_PRE_STOP_MASK;
    1ad4:	ea 81       	ldd	r30, Y+2	; 0x02
    1ad6:	fb 81       	ldd	r31, Y+3	; 0x03
    1ad8:	87 81       	ldd	r24, Z+7	; 0x07
    1ada:	90 85       	ldd	r25, Z+8	; 0x08
    1adc:	8d 77       	andi	r24, 0x7D	; 125
    1ade:	ea 81       	ldd	r30, Y+2	; 0x02
    1ae0:	fb 81       	ldd	r31, Y+3	; 0x03
    1ae2:	90 87       	std	Z+8, r25	; 0x08
    1ae4:	87 83       	std	Z+7, r24	; 0x07
    1ae6:	13 c0       	rjmp	.+38     	; 0x1b0e <_ipc_exchange+0xa8>
            goto end;
        }
        ret = (bool_t)1; // информация будет передана
    1ae8:	81 e0       	ldi	r24, 0x01	; 1
    1aea:	89 83       	std	Y+1, r24	; 0x01
        *(ipc_data_t *)proc->buf = send;
    1aec:	ea 81       	ldd	r30, Y+2	; 0x02
    1aee:	fb 81       	ldd	r31, Y+3	; 0x03
    1af0:	87 8d       	ldd	r24, Z+31	; 0x1f
    1af2:	90 a1       	ldd	r25, Z+32	; 0x20
    1af4:	fc 01       	movw	r30, r24
    1af6:	8c 81       	ldd	r24, Y+4	; 0x04
    1af8:	9d 81       	ldd	r25, Y+5	; 0x05
    1afa:	91 83       	std	Z+1, r25	; 0x01
    1afc:	80 83       	st	Z, r24
        _ipc_wait( receive ); // Готовимся к приему данных!
    1afe:	8e 81       	ldd	r24, Y+6	; 0x06
    1b00:	9f 81       	ldd	r25, Y+7	; 0x07
    1b02:	0e 94 a5 0c 	call	0x194a	; 0x194a <_ipc_wait>
        _proc_run( proc );   // И только после этого запускаем процесс-адресат!
    1b06:	8a 81       	ldd	r24, Y+2	; 0x02
    1b08:	9b 81       	ldd	r25, Y+3	; 0x03
    1b0a:	0e 94 07 13 	call	0x260e	; 0x260e <_proc_run>
    }
end:
    SPIN_UNLOCK( proc );
    1b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b10:	9b 81       	ldd	r25, Y+3	; 0x03
    1b12:	83 96       	adiw	r24, 0x23	; 35
    1b14:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
    return ret;
    1b18:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b1a:	27 96       	adiw	r28, 0x07	; 7
    1b1c:	0f b6       	in	r0, 0x3f	; 63
    1b1e:	f8 94       	cli
    1b20:	de bf       	out	0x3e, r29	; 62
    1b22:	0f be       	out	0x3f, r0	; 63
    1b24:	cd bf       	out	0x3d, r28	; 61
    1b26:	cf 91       	pop	r28
    1b28:	df 91       	pop	r29
    1b2a:	08 95       	ret

00001b2c <item_init>:
*****************************************************************************************/
#include "../include/bugurt.h"
//Методы элемента 2-связного списка
//инициация элемента
void item_init(item_t *item)
{
    1b2c:	df 93       	push	r29
    1b2e:	cf 93       	push	r28
    1b30:	00 d0       	rcall	.+0      	; 0x1b32 <item_init+0x6>
    1b32:	cd b7       	in	r28, 0x3d	; 61
    1b34:	de b7       	in	r29, 0x3e	; 62
    1b36:	9a 83       	std	Y+2, r25	; 0x02
    1b38:	89 83       	std	Y+1, r24	; 0x01
    item->prev = item;
    1b3a:	e9 81       	ldd	r30, Y+1	; 0x01
    1b3c:	fa 81       	ldd	r31, Y+2	; 0x02
    1b3e:	89 81       	ldd	r24, Y+1	; 0x01
    1b40:	9a 81       	ldd	r25, Y+2	; 0x02
    1b42:	93 83       	std	Z+3, r25	; 0x03
    1b44:	82 83       	std	Z+2, r24	; 0x02
    item->next = item;
    1b46:	e9 81       	ldd	r30, Y+1	; 0x01
    1b48:	fa 81       	ldd	r31, Y+2	; 0x02
    1b4a:	89 81       	ldd	r24, Y+1	; 0x01
    1b4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b4e:	91 83       	std	Z+1, r25	; 0x01
    1b50:	80 83       	st	Z, r24
}
    1b52:	0f 90       	pop	r0
    1b54:	0f 90       	pop	r0
    1b56:	cf 91       	pop	r28
    1b58:	df 91       	pop	r29
    1b5a:	08 95       	ret

00001b5c <item_insert>:
//Вставить элемент
void item_insert(item_t *item, item_t *head)
{
    1b5c:	df 93       	push	r29
    1b5e:	cf 93       	push	r28
    1b60:	00 d0       	rcall	.+0      	; 0x1b62 <item_insert+0x6>
    1b62:	00 d0       	rcall	.+0      	; 0x1b64 <item_insert+0x8>
    1b64:	00 d0       	rcall	.+0      	; 0x1b66 <item_insert+0xa>
    1b66:	cd b7       	in	r28, 0x3d	; 61
    1b68:	de b7       	in	r29, 0x3e	; 62
    1b6a:	9c 83       	std	Y+4, r25	; 0x04
    1b6c:	8b 83       	std	Y+3, r24	; 0x03
    1b6e:	7e 83       	std	Y+6, r23	; 0x06
    1b70:	6d 83       	std	Y+5, r22	; 0x05
    // "хвост" списка
    item_t * tail;
    tail = head->prev;
    1b72:	ed 81       	ldd	r30, Y+5	; 0x05
    1b74:	fe 81       	ldd	r31, Y+6	; 0x06
    1b76:	82 81       	ldd	r24, Z+2	; 0x02
    1b78:	93 81       	ldd	r25, Z+3	; 0x03
    1b7a:	9a 83       	std	Y+2, r25	; 0x02
    1b7c:	89 83       	std	Y+1, r24	; 0x01
    // Вставляем элемент между "головой" и "хвостом"
    item->prev = tail;
    1b7e:	eb 81       	ldd	r30, Y+3	; 0x03
    1b80:	fc 81       	ldd	r31, Y+4	; 0x04
    1b82:	89 81       	ldd	r24, Y+1	; 0x01
    1b84:	9a 81       	ldd	r25, Y+2	; 0x02
    1b86:	93 83       	std	Z+3, r25	; 0x03
    1b88:	82 83       	std	Z+2, r24	; 0x02
    item->next = head;
    1b8a:	eb 81       	ldd	r30, Y+3	; 0x03
    1b8c:	fc 81       	ldd	r31, Y+4	; 0x04
    1b8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b90:	9e 81       	ldd	r25, Y+6	; 0x06
    1b92:	91 83       	std	Z+1, r25	; 0x01
    1b94:	80 83       	st	Z, r24

    head->prev = item;
    1b96:	ed 81       	ldd	r30, Y+5	; 0x05
    1b98:	fe 81       	ldd	r31, Y+6	; 0x06
    1b9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b9e:	93 83       	std	Z+3, r25	; 0x03
    1ba0:	82 83       	std	Z+2, r24	; 0x02
    tail->next = item;
    1ba2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ba4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ba6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba8:	9c 81       	ldd	r25, Y+4	; 0x04
    1baa:	91 83       	std	Z+1, r25	; 0x01
    1bac:	80 83       	st	Z, r24
}
    1bae:	26 96       	adiw	r28, 0x06	; 6
    1bb0:	0f b6       	in	r0, 0x3f	; 63
    1bb2:	f8 94       	cli
    1bb4:	de bf       	out	0x3e, r29	; 62
    1bb6:	0f be       	out	0x3f, r0	; 63
    1bb8:	cd bf       	out	0x3d, r28	; 61
    1bba:	cf 91       	pop	r28
    1bbc:	df 91       	pop	r29
    1bbe:	08 95       	ret

00001bc0 <item_cut>:
//Вырезать элемент
void item_cut( item_t *item )
{
    1bc0:	df 93       	push	r29
    1bc2:	cf 93       	push	r28
    1bc4:	00 d0       	rcall	.+0      	; 0x1bc6 <item_cut+0x6>
    1bc6:	00 d0       	rcall	.+0      	; 0x1bc8 <item_cut+0x8>
    1bc8:	00 d0       	rcall	.+0      	; 0x1bca <item_cut+0xa>
    1bca:	cd b7       	in	r28, 0x3d	; 61
    1bcc:	de b7       	in	r29, 0x3e	; 62
    1bce:	9e 83       	std	Y+6, r25	; 0x06
    1bd0:	8d 83       	std	Y+5, r24	; 0x05
    item_t * prev;
    item_t * next;
    prev = item->prev; //Предыдущий элемент
    1bd2:	ed 81       	ldd	r30, Y+5	; 0x05
    1bd4:	fe 81       	ldd	r31, Y+6	; 0x06
    1bd6:	82 81       	ldd	r24, Z+2	; 0x02
    1bd8:	93 81       	ldd	r25, Z+3	; 0x03
    1bda:	9c 83       	std	Y+4, r25	; 0x04
    1bdc:	8b 83       	std	Y+3, r24	; 0x03
    next = item->next; //Следующий элемент
    1bde:	ed 81       	ldd	r30, Y+5	; 0x05
    1be0:	fe 81       	ldd	r31, Y+6	; 0x06
    1be2:	80 81       	ld	r24, Z
    1be4:	91 81       	ldd	r25, Z+1	; 0x01
    1be6:	9a 83       	std	Y+2, r25	; 0x02
    1be8:	89 83       	std	Y+1, r24	; 0x01

    next->prev = prev;
    1bea:	e9 81       	ldd	r30, Y+1	; 0x01
    1bec:	fa 81       	ldd	r31, Y+2	; 0x02
    1bee:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf2:	93 83       	std	Z+3, r25	; 0x03
    1bf4:	82 83       	std	Z+2, r24	; 0x02
    prev->next = next;
    1bf6:	eb 81       	ldd	r30, Y+3	; 0x03
    1bf8:	fc 81       	ldd	r31, Y+4	; 0x04
    1bfa:	89 81       	ldd	r24, Y+1	; 0x01
    1bfc:	9a 81       	ldd	r25, Y+2	; 0x02
    1bfe:	91 83       	std	Z+1, r25	; 0x01
    1c00:	80 83       	st	Z, r24

    item->prev = item;
    1c02:	ed 81       	ldd	r30, Y+5	; 0x05
    1c04:	fe 81       	ldd	r31, Y+6	; 0x06
    1c06:	8d 81       	ldd	r24, Y+5	; 0x05
    1c08:	9e 81       	ldd	r25, Y+6	; 0x06
    1c0a:	93 83       	std	Z+3, r25	; 0x03
    1c0c:	82 83       	std	Z+2, r24	; 0x02
    item->next = item;
    1c0e:	ed 81       	ldd	r30, Y+5	; 0x05
    1c10:	fe 81       	ldd	r31, Y+6	; 0x06
    1c12:	8d 81       	ldd	r24, Y+5	; 0x05
    1c14:	9e 81       	ldd	r25, Y+6	; 0x06
    1c16:	91 83       	std	Z+1, r25	; 0x01
    1c18:	80 83       	st	Z, r24
}
    1c1a:	26 96       	adiw	r28, 0x06	; 6
    1c1c:	0f b6       	in	r0, 0x3f	; 63
    1c1e:	f8 94       	cli
    1c20:	de bf       	out	0x3e, r29	; 62
    1c22:	0f be       	out	0x3f, r0	; 63
    1c24:	cd bf       	out	0x3d, r28	; 61
    1c26:	cf 91       	pop	r28
    1c28:	df 91       	pop	r29
    1c2a:	08 95       	ret

00001c2c <kernel_init>:
{
    while(1);
}

void kernel_init(void)
{
    1c2c:	8f 92       	push	r8
    1c2e:	af 92       	push	r10
    1c30:	bf 92       	push	r11
    1c32:	cf 92       	push	r12
    1c34:	ef 92       	push	r14
    1c36:	ff 92       	push	r15
    1c38:	0f 93       	push	r16
    1c3a:	1f 93       	push	r17
    1c3c:	df 93       	push	r29
    1c3e:	cf 93       	push	r28
    1c40:	0f 92       	push	r0
    1c42:	cd b7       	in	r28, 0x3d	; 61
    1c44:	de b7       	in	r29, 0x3e	; 62
#ifdef CONFIG_MP
    core_id_t i;

    spin_init( &kernel.stat_lock );
    1c46:	8f e8       	ldi	r24, 0x8F	; 143
    1c48:	93 e0       	ldi	r25, 0x03	; 3
    1c4a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <spin_init>
    spin_lock( &kernel.stat_lock );
    1c4e:	8f e8       	ldi	r24, 0x8F	; 143
    1c50:	93 e0       	ldi	r25, 0x03	; 3
    1c52:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    //Инициация собственно ядра
    for( i = (core_id_t)0; i<(core_id_t)MAX_CORES; i++ )
    1c56:	19 82       	std	Y+1, r1	; 0x01
    1c58:	76 c0       	rjmp	.+236    	; 0x1d46 <kernel_init+0x11a>
    {
        proc_init_isr(
    1c5a:	89 81       	ldd	r24, Y+1	; 0x01
    1c5c:	28 2f       	mov	r18, r24
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	80 e3       	ldi	r24, 0x30	; 48
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	ac 01       	movw	r20, r24
    1c66:	24 9f       	mul	r18, r20
    1c68:	c0 01       	movw	r24, r0
    1c6a:	25 9f       	mul	r18, r21
    1c6c:	90 0d       	add	r25, r0
    1c6e:	34 9f       	mul	r19, r20
    1c70:	90 0d       	add	r25, r0
    1c72:	11 24       	eor	r1, r1
    1c74:	ac 01       	movw	r20, r24
    1c76:	43 5d       	subi	r20, 0xD3	; 211
    1c78:	5c 4f       	sbci	r21, 0xFC	; 252
    1c7a:	89 81       	ldd	r24, Y+1	; 0x01
    1c7c:	28 2f       	mov	r18, r24
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	02 c0       	rjmp	.+4      	; 0x1c8a <kernel_init+0x5e>
    1c86:	88 0f       	add	r24, r24
    1c88:	99 1f       	adc	r25, r25
    1c8a:	2a 95       	dec	r18
    1c8c:	e2 f7       	brpl	.-8      	; 0x1c86 <kernel_init+0x5a>
    1c8e:	0f 92       	push	r0
    1c90:	ed b7       	in	r30, 0x3d	; 61
    1c92:	fe b7       	in	r31, 0x3e	; 62
    1c94:	31 96       	adiw	r30, 0x01	; 1
    1c96:	22 ef       	ldi	r18, 0xF2	; 242
    1c98:	30 e2       	ldi	r19, 0x20	; 32
    1c9a:	80 83       	st	Z, r24
    1c9c:	ca 01       	movw	r24, r20
    1c9e:	b9 01       	movw	r22, r18
    1ca0:	40 e0       	ldi	r20, 0x00	; 0
    1ca2:	50 e0       	ldi	r21, 0x00	; 0
    1ca4:	20 e0       	ldi	r18, 0x00	; 0
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	00 e0       	ldi	r16, 0x00	; 0
    1caa:	10 e0       	ldi	r17, 0x00	; 0
    1cac:	ee 24       	eor	r14, r14
    1cae:	ff 24       	eor	r15, r15
    1cb0:	0f 2e       	mov	r0, r31
    1cb2:	f7 e0       	ldi	r31, 0x07	; 7
    1cb4:	cf 2e       	mov	r12, r31
    1cb6:	f0 2d       	mov	r31, r0
    1cb8:	aa 24       	eor	r10, r10
    1cba:	bb 24       	eor	r11, r11
    1cbc:	a3 94       	inc	r10
    1cbe:	88 24       	eor	r8, r8
    1cc0:	0e 94 2f 12 	call	0x245e	; 0x245e <proc_init_isr>
    1cc4:	0f 90       	pop	r0
            ((prio_t)BITS_IN_INDEX_T - (prio_t)1),// низший приоритет
            (timer_t)1,//минимальный квант времени
            (bool_t)0,// не RT
            ((affinity_t)1)<<i // привязка  строго к одному процессору, а то его как сбалансирует отсюда
        );
        kernel.idle[i].core_id = i;
    1cc6:	89 81       	ldd	r24, Y+1	; 0x01
    1cc8:	28 2f       	mov	r18, r24
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	80 e3       	ldi	r24, 0x30	; 48
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	bc 01       	movw	r22, r24
    1cd2:	26 9f       	mul	r18, r22
    1cd4:	c0 01       	movw	r24, r0
    1cd6:	27 9f       	mul	r18, r23
    1cd8:	90 0d       	add	r25, r0
    1cda:	36 9f       	mul	r19, r22
    1cdc:	90 0d       	add	r25, r0
    1cde:	11 24       	eor	r1, r1
    1ce0:	fc 01       	movw	r30, r24
    1ce2:	e2 5b       	subi	r30, 0xB2	; 178
    1ce4:	fc 4f       	sbci	r31, 0xFC	; 252
    1ce6:	89 81       	ldd	r24, Y+1	; 0x01
    1ce8:	80 83       	st	Z, r24
        stat_init( (stat_t *)kernel.stat + i );
    1cea:	89 81       	ldd	r24, Y+1	; 0x01
    1cec:	88 2f       	mov	r24, r24
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	83 57       	subi	r24, 0x73	; 115
    1cf2:	9c 4f       	sbci	r25, 0xFC	; 252
    1cf4:	0e 94 48 01 	call	0x290	; 0x290 <stat_init>
        sched_init( (sched_t *)kernel.sched + i, (proc_t *)kernel.idle + i );
    1cf8:	89 81       	ldd	r24, Y+1	; 0x01
    1cfa:	28 2f       	mov	r18, r24
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	8b e2       	ldi	r24, 0x2B	; 43
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	ac 01       	movw	r20, r24
    1d04:	24 9f       	mul	r18, r20
    1d06:	c0 01       	movw	r24, r0
    1d08:	25 9f       	mul	r18, r21
    1d0a:	90 0d       	add	r25, r0
    1d0c:	34 9f       	mul	r19, r20
    1d0e:	90 0d       	add	r25, r0
    1d10:	11 24       	eor	r1, r1
    1d12:	ac 01       	movw	r20, r24
    1d14:	49 52       	subi	r20, 0x29	; 41
    1d16:	5d 4f       	sbci	r21, 0xFD	; 253
    1d18:	89 81       	ldd	r24, Y+1	; 0x01
    1d1a:	28 2f       	mov	r18, r24
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	80 e3       	ldi	r24, 0x30	; 48
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	bc 01       	movw	r22, r24
    1d24:	26 9f       	mul	r18, r22
    1d26:	c0 01       	movw	r24, r0
    1d28:	27 9f       	mul	r18, r23
    1d2a:	90 0d       	add	r25, r0
    1d2c:	36 9f       	mul	r19, r22
    1d2e:	90 0d       	add	r25, r0
    1d30:	11 24       	eor	r1, r1
    1d32:	9c 01       	movw	r18, r24
    1d34:	23 5d       	subi	r18, 0xD3	; 211
    1d36:	3c 4f       	sbci	r19, 0xFC	; 252
    1d38:	ca 01       	movw	r24, r20
    1d3a:	b9 01       	movw	r22, r18
    1d3c:	0e 94 82 17 	call	0x2f04	; 0x2f04 <sched_init>
    core_id_t i;

    spin_init( &kernel.stat_lock );
    spin_lock( &kernel.stat_lock );
    //Инициация собственно ядра
    for( i = (core_id_t)0; i<(core_id_t)MAX_CORES; i++ )
    1d40:	89 81       	ldd	r24, Y+1	; 0x01
    1d42:	8f 5f       	subi	r24, 0xFF	; 255
    1d44:	89 83       	std	Y+1, r24	; 0x01
    1d46:	89 81       	ldd	r24, Y+1	; 0x01
    1d48:	82 30       	cpi	r24, 0x02	; 2
    1d4a:	08 f4       	brcc	.+2      	; 0x1d4e <kernel_init+0x122>
    1d4c:	86 cf       	rjmp	.-244    	; 0x1c5a <kernel_init+0x2e>
        );
        kernel.idle[i].core_id = i;
        stat_init( (stat_t *)kernel.stat + i );
        sched_init( (sched_t *)kernel.sched + i, (proc_t *)kernel.idle + i );
    }
    spin_unlock( &kernel.stat_lock );
    1d4e:	8f e8       	ldi	r24, 0x8F	; 143
    1d50:	93 e0       	ldi	r25, 0x03	; 3
    1d52:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
        (timer_t)1,//минимальный квант времени
        (bool_t)0// не RT
    );
    sched_init( (sched_t *)&kernel.sched, (proc_t *)&kernel.idle );
#endif // CONFIG_MP
}
    1d56:	0f 90       	pop	r0
    1d58:	cf 91       	pop	r28
    1d5a:	df 91       	pop	r29
    1d5c:	1f 91       	pop	r17
    1d5e:	0f 91       	pop	r16
    1d60:	ff 90       	pop	r15
    1d62:	ef 90       	pop	r14
    1d64:	cf 90       	pop	r12
    1d66:	bf 90       	pop	r11
    1d68:	af 90       	pop	r10
    1d6a:	8f 90       	pop	r8
    1d6c:	08 95       	ret

00001d6e <mutex_init_isr>:
    mutex_t * mutex
#ifdef CONFIG_USE_HIGHEST_LOCKER
    ,prio_t prio
#endif // CONFIG_USE_HIGHEST_LOCKER
)
{
    1d6e:	df 93       	push	r29
    1d70:	cf 93       	push	r28
    1d72:	00 d0       	rcall	.+0      	; 0x1d74 <mutex_init_isr+0x6>
    1d74:	0f 92       	push	r0
    1d76:	cd b7       	in	r28, 0x3d	; 61
    1d78:	de b7       	in	r29, 0x3e	; 62
    1d7a:	9a 83       	std	Y+2, r25	; 0x02
    1d7c:	89 83       	std	Y+1, r24	; 0x01
    1d7e:	6b 83       	std	Y+3, r22	; 0x03
    SPIN_INIT( mutex );
    1d80:	89 81       	ldd	r24, Y+1	; 0x01
    1d82:	9a 81       	ldd	r25, Y+2	; 0x02
    1d84:	43 96       	adiw	r24, 0x13	; 19
    1d86:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <spin_init>
    SPIN_LOCK( mutex );
    1d8a:	89 81       	ldd	r24, Y+1	; 0x01
    1d8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d8e:	43 96       	adiw	r24, 0x13	; 19
    1d90:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    xlist_init( (xlist_t *)mutex );
    1d94:	89 81       	ldd	r24, Y+1	; 0x01
    1d96:	9a 81       	ldd	r25, Y+2	; 0x02
    1d98:	0e 94 20 20 	call	0x4040	; 0x4040 <xlist_init>
    mutex->free = (bool_t)1;
    1d9c:	e9 81       	ldd	r30, Y+1	; 0x01
    1d9e:	fa 81       	ldd	r31, Y+2	; 0x02
    1da0:	81 e0       	ldi	r24, 0x01	; 1
    1da2:	82 8b       	std	Z+18, r24	; 0x12
#ifdef CONFIG_USE_HIGHEST_LOCKER
    mutex->prio = prio;
    1da4:	e9 81       	ldd	r30, Y+1	; 0x01
    1da6:	fa 81       	ldd	r31, Y+2	; 0x02
    1da8:	8b 81       	ldd	r24, Y+3	; 0x03
    1daa:	81 8b       	std	Z+17, r24	; 0x11
#endif // CONFIG_USE_HIGHEST_LOCKER
    SPIN_UNLOCK( mutex );
    1dac:	89 81       	ldd	r24, Y+1	; 0x01
    1dae:	9a 81       	ldd	r25, Y+2	; 0x02
    1db0:	43 96       	adiw	r24, 0x13	; 19
    1db2:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
}
    1db6:	0f 90       	pop	r0
    1db8:	0f 90       	pop	r0
    1dba:	0f 90       	pop	r0
    1dbc:	cf 91       	pop	r28
    1dbe:	df 91       	pop	r29
    1dc0:	08 95       	ret

00001dc2 <_mutex_lock>:

// К моменту вызова захвачена блокировка mutex-а, запрещены прерывания
bool_t _mutex_lock( mutex_t * mutex )
{
    1dc2:	df 93       	push	r29
    1dc4:	cf 93       	push	r28
    1dc6:	00 d0       	rcall	.+0      	; 0x1dc8 <_mutex_lock+0x6>
    1dc8:	00 d0       	rcall	.+0      	; 0x1dca <_mutex_lock+0x8>
    1dca:	0f 92       	push	r0
    1dcc:	cd b7       	in	r28, 0x3d	; 61
    1dce:	de b7       	in	r29, 0x3e	; 62
    1dd0:	9d 83       	std	Y+5, r25	; 0x05
    1dd2:	8c 83       	std	Y+4, r24	; 0x04
    bool_t ret;
    proc_t * proc;
    // Захват блокировки мьютекса
    SPIN_LOCK( mutex );
    1dd4:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd6:	9d 81       	ldd	r25, Y+5	; 0x05
    1dd8:	43 96       	adiw	r24, 0x13	; 19
    1dda:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    ret = mutex->free;
    1dde:	ec 81       	ldd	r30, Y+4	; 0x04
    1de0:	fd 81       	ldd	r31, Y+5	; 0x05
    1de2:	82 89       	ldd	r24, Z+18	; 0x12
    1de4:	8b 83       	std	Y+3, r24	; 0x03
    proc = current_proc();
    1de6:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <current_proc>
    1dea:	9a 83       	std	Y+2, r25	; 0x02
    1dec:	89 83       	std	Y+1, r24	; 0x01
    // Захват блокировки процесса
    SPIN_LOCK( proc );
    1dee:	89 81       	ldd	r24, Y+1	; 0x01
    1df0:	9a 81       	ldd	r25, Y+2	; 0x02
    1df2:	83 96       	adiw	r24, 0x23	; 35
    1df4:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    PROC_LRES_INC( proc, GET_PRIO( mutex ) );
    1df8:	ec 81       	ldd	r30, Y+4	; 0x04
    1dfa:	fd 81       	ldd	r31, Y+5	; 0x05
    1dfc:	21 89       	ldd	r18, Z+17	; 0x11
    1dfe:	89 81       	ldd	r24, Y+1	; 0x01
    1e00:	9a 81       	ldd	r25, Y+2	; 0x02
    1e02:	62 2f       	mov	r22, r18
    1e04:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <_proc_lres_inc>

    if( ret )
    1e08:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0a:	88 23       	and	r24, r24
    1e0c:	41 f0       	breq	.+16     	; 0x1e1e <_mutex_lock+0x5c>
    {
        mutex->free = (bool_t)0;
    1e0e:	ec 81       	ldd	r30, Y+4	; 0x04
    1e10:	fd 81       	ldd	r31, Y+5	; 0x05
    1e12:	12 8a       	std	Z+18, r1	; 0x12
        PROC_PRIO_CONTROL_RUNNING( proc );
    1e14:	89 81       	ldd	r24, Y+1	; 0x01
    1e16:	9a 81       	ldd	r25, Y+2	; 0x02
    1e18:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <_proc_prio_control_running>
    1e1c:	14 c0       	rjmp	.+40     	; 0x1e46 <_mutex_lock+0x84>
    }
    else
    {
        proc->flags |= PROC_FLG_QUEUE;
    1e1e:	e9 81       	ldd	r30, Y+1	; 0x01
    1e20:	fa 81       	ldd	r31, Y+2	; 0x02
    1e22:	87 81       	ldd	r24, Z+7	; 0x07
    1e24:	90 85       	ldd	r25, Z+8	; 0x08
    1e26:	80 61       	ori	r24, 0x10	; 16
    1e28:	e9 81       	ldd	r30, Y+1	; 0x01
    1e2a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e2c:	90 87       	std	Z+8, r25	; 0x08
    1e2e:	87 83       	std	Z+7, r24	; 0x07
        _proc_stop( proc );
    1e30:	89 81       	ldd	r24, Y+1	; 0x01
    1e32:	9a 81       	ldd	r25, Y+2	; 0x02
    1e34:	0e 94 14 14 	call	0x2828	; 0x2828 <_proc_stop>
        pitem_insert( (pitem_t *)proc, (xlist_t *)mutex );
    1e38:	89 81       	ldd	r24, Y+1	; 0x01
    1e3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e3c:	2c 81       	ldd	r18, Y+4	; 0x04
    1e3e:	3d 81       	ldd	r19, Y+5	; 0x05
    1e40:	b9 01       	movw	r22, r18
    1e42:	0e 94 cd 10 	call	0x219a	; 0x219a <pitem_insert>
    }
    SPIN_UNLOCK( proc );
    1e46:	89 81       	ldd	r24, Y+1	; 0x01
    1e48:	9a 81       	ldd	r25, Y+2	; 0x02
    1e4a:	83 96       	adiw	r24, 0x23	; 35
    1e4c:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
    SPIN_UNLOCK( mutex );
    1e50:	8c 81       	ldd	r24, Y+4	; 0x04
    1e52:	9d 81       	ldd	r25, Y+5	; 0x05
    1e54:	43 96       	adiw	r24, 0x13	; 19
    1e56:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
    return ret;
    1e5a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1e5c:	0f 90       	pop	r0
    1e5e:	0f 90       	pop	r0
    1e60:	0f 90       	pop	r0
    1e62:	0f 90       	pop	r0
    1e64:	0f 90       	pop	r0
    1e66:	cf 91       	pop	r28
    1e68:	df 91       	pop	r29
    1e6a:	08 95       	ret

00001e6c <_mutex_try_lock>:

bool_t _mutex_try_lock( mutex_t * mutex )
{
    1e6c:	df 93       	push	r29
    1e6e:	cf 93       	push	r28
    1e70:	00 d0       	rcall	.+0      	; 0x1e72 <_mutex_try_lock+0x6>
    1e72:	00 d0       	rcall	.+0      	; 0x1e74 <_mutex_try_lock+0x8>
    1e74:	0f 92       	push	r0
    1e76:	cd b7       	in	r28, 0x3d	; 61
    1e78:	de b7       	in	r29, 0x3e	; 62
    1e7a:	9d 83       	std	Y+5, r25	; 0x05
    1e7c:	8c 83       	std	Y+4, r24	; 0x04
    bool_t ret;
    proc_t * proc;

    SPIN_LOCK( mutex );
    1e7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e80:	9d 81       	ldd	r25, Y+5	; 0x05
    1e82:	43 96       	adiw	r24, 0x13	; 19
    1e84:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    ret = mutex->free;
    1e88:	ec 81       	ldd	r30, Y+4	; 0x04
    1e8a:	fd 81       	ldd	r31, Y+5	; 0x05
    1e8c:	82 89       	ldd	r24, Z+18	; 0x12
    1e8e:	8b 83       	std	Y+3, r24	; 0x03
    proc = current_proc();
    1e90:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <current_proc>
    1e94:	9a 83       	std	Y+2, r25	; 0x02
    1e96:	89 83       	std	Y+1, r24	; 0x01

    SPIN_LOCK( proc );
    1e98:	89 81       	ldd	r24, Y+1	; 0x01
    1e9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e9c:	83 96       	adiw	r24, 0x23	; 35
    1e9e:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    if( ret )
    1ea2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea4:	88 23       	and	r24, r24
    1ea6:	79 f0       	breq	.+30     	; 0x1ec6 <_mutex_try_lock+0x5a>
    {
        mutex->free = (bool_t)0;
    1ea8:	ec 81       	ldd	r30, Y+4	; 0x04
    1eaa:	fd 81       	ldd	r31, Y+5	; 0x05
    1eac:	12 8a       	std	Z+18, r1	; 0x12
        PROC_LRES_INC( proc, GET_PRIO( mutex ) );
    1eae:	ec 81       	ldd	r30, Y+4	; 0x04
    1eb0:	fd 81       	ldd	r31, Y+5	; 0x05
    1eb2:	21 89       	ldd	r18, Z+17	; 0x11
    1eb4:	89 81       	ldd	r24, Y+1	; 0x01
    1eb6:	9a 81       	ldd	r25, Y+2	; 0x02
    1eb8:	62 2f       	mov	r22, r18
    1eba:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <_proc_lres_inc>
        PROC_PRIO_CONTROL_RUNNING( proc );
    1ebe:	89 81       	ldd	r24, Y+1	; 0x01
    1ec0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ec2:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <_proc_prio_control_running>
    }
    SPIN_UNLOCK( proc );
    1ec6:	89 81       	ldd	r24, Y+1	; 0x01
    1ec8:	9a 81       	ldd	r25, Y+2	; 0x02
    1eca:	83 96       	adiw	r24, 0x23	; 35
    1ecc:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
    SPIN_UNLOCK( mutex );
    1ed0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ed2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ed4:	43 96       	adiw	r24, 0x13	; 19
    1ed6:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
    return ret;
    1eda:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1edc:	0f 90       	pop	r0
    1ede:	0f 90       	pop	r0
    1ee0:	0f 90       	pop	r0
    1ee2:	0f 90       	pop	r0
    1ee4:	0f 90       	pop	r0
    1ee6:	cf 91       	pop	r28
    1ee8:	df 91       	pop	r29
    1eea:	08 95       	ret

00001eec <_mutex_unlock>:

void _mutex_unlock( mutex_t *  mutex )
{
    1eec:	df 93       	push	r29
    1eee:	cf 93       	push	r28
    1ef0:	00 d0       	rcall	.+0      	; 0x1ef2 <_mutex_unlock+0x6>
    1ef2:	00 d0       	rcall	.+0      	; 0x1ef4 <_mutex_unlock+0x8>
    1ef4:	cd b7       	in	r28, 0x3d	; 61
    1ef6:	de b7       	in	r29, 0x3e	; 62
    1ef8:	9c 83       	std	Y+4, r25	; 0x04
    1efa:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc;

    SPIN_LOCK( mutex );
    1efc:	8b 81       	ldd	r24, Y+3	; 0x03
    1efe:	9c 81       	ldd	r25, Y+4	; 0x04
    1f00:	43 96       	adiw	r24, 0x13	; 19
    1f02:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    proc = current_proc();
    1f06:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <current_proc>
    1f0a:	9a 83       	std	Y+2, r25	; 0x02
    1f0c:	89 83       	std	Y+1, r24	; 0x01

    SPIN_LOCK(proc);
    1f0e:	89 81       	ldd	r24, Y+1	; 0x01
    1f10:	9a 81       	ldd	r25, Y+2	; 0x02
    1f12:	83 96       	adiw	r24, 0x23	; 35
    1f14:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    PROC_LRES_DEC( proc, GET_PRIO( mutex ) );
    1f18:	eb 81       	ldd	r30, Y+3	; 0x03
    1f1a:	fc 81       	ldd	r31, Y+4	; 0x04
    1f1c:	21 89       	ldd	r18, Z+17	; 0x11
    1f1e:	89 81       	ldd	r24, Y+1	; 0x01
    1f20:	9a 81       	ldd	r25, Y+2	; 0x02
    1f22:	62 2f       	mov	r22, r18
    1f24:	0e 94 42 15 	call	0x2a84	; 0x2a84 <_proc_lres_dec>
    // Если проготовлен и готов к остановке - останавливаем
    if(  PROC_PRE_STOP_TEST(proc)  )
    1f28:	e9 81       	ldd	r30, Y+1	; 0x01
    1f2a:	fa 81       	ldd	r31, Y+2	; 0x02
    1f2c:	87 81       	ldd	r24, Z+7	; 0x07
    1f2e:	90 85       	ldd	r25, Z+8	; 0x08
    1f30:	80 78       	andi	r24, 0x80	; 128
    1f32:	90 70       	andi	r25, 0x00	; 0
    1f34:	00 97       	sbiw	r24, 0x00	; 0
    1f36:	f9 f0       	breq	.+62     	; 0x1f76 <_mutex_unlock+0x8a>
    1f38:	e9 81       	ldd	r30, Y+1	; 0x01
    1f3a:	fa 81       	ldd	r31, Y+2	; 0x02
    1f3c:	87 81       	ldd	r24, Z+7	; 0x07
    1f3e:	90 85       	ldd	r25, Z+8	; 0x08
    1f40:	8c 70       	andi	r24, 0x0C	; 12
    1f42:	90 70       	andi	r25, 0x00	; 0
    1f44:	00 97       	sbiw	r24, 0x00	; 0
    1f46:	b9 f4       	brne	.+46     	; 0x1f76 <_mutex_unlock+0x8a>
    {
        proc->flags &= ~PROC_FLG_PRE_STOP_MASK;
    1f48:	e9 81       	ldd	r30, Y+1	; 0x01
    1f4a:	fa 81       	ldd	r31, Y+2	; 0x02
    1f4c:	87 81       	ldd	r24, Z+7	; 0x07
    1f4e:	90 85       	ldd	r25, Z+8	; 0x08
    1f50:	8d 77       	andi	r24, 0x7D	; 125
    1f52:	e9 81       	ldd	r30, Y+1	; 0x01
    1f54:	fa 81       	ldd	r31, Y+2	; 0x02
    1f56:	90 87       	std	Z+8, r25	; 0x08
    1f58:	87 83       	std	Z+7, r24	; 0x07
        _proc_stop_( proc );
    1f5a:	89 81       	ldd	r24, Y+1	; 0x01
    1f5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f5e:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <_proc_stop_>
        PROC_PRIO_CONTROL_STOPED( proc );
    1f62:	89 81       	ldd	r24, Y+1	; 0x01
    1f64:	9a 81       	ldd	r25, Y+2	; 0x02
    1f66:	0e 94 65 15 	call	0x2aca	; 0x2aca <_proc_prio_control_stoped>
        // Нужна перепланировка, процесс остановили и не запустили обратно
        RESCHED_PROC( proc );
    1f6a:	e9 81       	ldd	r30, Y+1	; 0x01
    1f6c:	fa 81       	ldd	r31, Y+2	; 0x02
    1f6e:	81 a1       	ldd	r24, Z+33	; 0x21
    1f70:	0e 94 b7 01 	call	0x36e	; 0x36e <resched>
    1f74:	04 c0       	rjmp	.+8      	; 0x1f7e <_mutex_unlock+0x92>
    }
    else
    {
        // Не останавливаем - меняем проиритет на ходу
        PROC_PRIO_CONTROL_RUNNING( proc );
    1f76:	89 81       	ldd	r24, Y+1	; 0x01
    1f78:	9a 81       	ldd	r25, Y+2	; 0x02
    1f7a:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <_proc_prio_control_running>
    }
    SPIN_UNLOCK( proc );
    1f7e:	89 81       	ldd	r24, Y+1	; 0x01
    1f80:	9a 81       	ldd	r25, Y+2	; 0x02
    1f82:	83 96       	adiw	r24, 0x23	; 35
    1f84:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
    // Обрабока самого мьютекса
    if( ((xlist_t *)mutex)->index == (index_t)0  )
    1f88:	eb 81       	ldd	r30, Y+3	; 0x03
    1f8a:	fc 81       	ldd	r31, Y+4	; 0x04
    1f8c:	80 89       	ldd	r24, Z+16	; 0x10
    1f8e:	88 23       	and	r24, r24
    1f90:	29 f4       	brne	.+10     	; 0x1f9c <_mutex_unlock+0xb0>
    {
        // Список ожидающих пуст, выходим
        mutex->free = (bool_t)1;
    1f92:	eb 81       	ldd	r30, Y+3	; 0x03
    1f94:	fc 81       	ldd	r31, Y+4	; 0x04
    1f96:	81 e0       	ldi	r24, 0x01	; 1
    1f98:	82 8b       	std	Z+18, r24	; 0x12
    1f9a:	25 c0       	rjmp	.+74     	; 0x1fe6 <_mutex_unlock+0xfa>
        goto end;
    }
    // Список ожидающих не пуст, запускаем голову
    proc = (proc_t *)xlist_head( (xlist_t *)mutex );
    1f9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa0:	0e 94 4a 20 	call	0x4094	; 0x4094 <xlist_head>
    1fa4:	9a 83       	std	Y+2, r25	; 0x02
    1fa6:	89 83       	std	Y+1, r24	; 0x01
    SPIN_LOCK( proc );
    1fa8:	89 81       	ldd	r24, Y+1	; 0x01
    1faa:	9a 81       	ldd	r25, Y+2	; 0x02
    1fac:	83 96       	adiw	r24, 0x23	; 35
    1fae:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    // Сначала надо вырезать
    pitem_cut( (pitem_t *)proc );
    1fb2:	89 81       	ldd	r24, Y+1	; 0x01
    1fb4:	9a 81       	ldd	r25, Y+2	; 0x02
    1fb6:	0e 94 82 11 	call	0x2304	; 0x2304 <pitem_cut>
    proc->flags &= ~PROC_FLG_QUEUE;
    1fba:	e9 81       	ldd	r30, Y+1	; 0x01
    1fbc:	fa 81       	ldd	r31, Y+2	; 0x02
    1fbe:	87 81       	ldd	r24, Z+7	; 0x07
    1fc0:	90 85       	ldd	r25, Z+8	; 0x08
    1fc2:	8f 7e       	andi	r24, 0xEF	; 239
    1fc4:	e9 81       	ldd	r30, Y+1	; 0x01
    1fc6:	fa 81       	ldd	r31, Y+2	; 0x02
    1fc8:	90 87       	std	Z+8, r25	; 0x08
    1fca:	87 83       	std	Z+7, r24	; 0x07
    // Управление приоритетом процесса
    PROC_PRIO_CONTROL_STOPED( proc );
    1fcc:	89 81       	ldd	r24, Y+1	; 0x01
    1fce:	9a 81       	ldd	r25, Y+2	; 0x02
    1fd0:	0e 94 65 15 	call	0x2aca	; 0x2aca <_proc_prio_control_stoped>
    _proc_run( proc );
    1fd4:	89 81       	ldd	r24, Y+1	; 0x01
    1fd6:	9a 81       	ldd	r25, Y+2	; 0x02
    1fd8:	0e 94 07 13 	call	0x260e	; 0x260e <_proc_run>
    SPIN_UNLOCK( proc );
    1fdc:	89 81       	ldd	r24, Y+1	; 0x01
    1fde:	9a 81       	ldd	r25, Y+2	; 0x02
    1fe0:	83 96       	adiw	r24, 0x23	; 35
    1fe2:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
end:
    SPIN_UNLOCK( mutex );
    1fe6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe8:	9c 81       	ldd	r25, Y+4	; 0x04
    1fea:	43 96       	adiw	r24, 0x13	; 19
    1fec:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
}
    1ff0:	0f 90       	pop	r0
    1ff2:	0f 90       	pop	r0
    1ff4:	0f 90       	pop	r0
    1ff6:	0f 90       	pop	r0
    1ff8:	cf 91       	pop	r28
    1ffa:	df 91       	pop	r29
    1ffc:	08 95       	ret

00001ffe <pcounter_init>:
*                           http://www.0chan.ru/r/res/9996.html                          *
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
void pcounter_init(pcounter_t * pcounter)
{
    1ffe:	df 93       	push	r29
    2000:	cf 93       	push	r28
    2002:	00 d0       	rcall	.+0      	; 0x2004 <pcounter_init+0x6>
    2004:	0f 92       	push	r0
    2006:	cd b7       	in	r28, 0x3d	; 61
    2008:	de b7       	in	r29, 0x3e	; 62
    200a:	9b 83       	std	Y+3, r25	; 0x03
    200c:	8a 83       	std	Y+2, r24	; 0x02
    prio_t p;
    pcounter->index = (index_t)0;
    200e:	ea 81       	ldd	r30, Y+2	; 0x02
    2010:	fb 81       	ldd	r31, Y+3	; 0x03
    2012:	10 8a       	std	Z+16, r1	; 0x10
    for(p = 0; p < (index_t)BITS_IN_INDEX_T; p++)pcounter->counter[p] = (count_t)0;
    2014:	19 82       	std	Y+1, r1	; 0x01
    2016:	0f c0       	rjmp	.+30     	; 0x2036 <pcounter_init+0x38>
    2018:	89 81       	ldd	r24, Y+1	; 0x01
    201a:	88 2f       	mov	r24, r24
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	2a 81       	ldd	r18, Y+2	; 0x02
    2020:	3b 81       	ldd	r19, Y+3	; 0x03
    2022:	88 0f       	add	r24, r24
    2024:	99 1f       	adc	r25, r25
    2026:	f9 01       	movw	r30, r18
    2028:	e8 0f       	add	r30, r24
    202a:	f9 1f       	adc	r31, r25
    202c:	11 82       	std	Z+1, r1	; 0x01
    202e:	10 82       	st	Z, r1
    2030:	89 81       	ldd	r24, Y+1	; 0x01
    2032:	8f 5f       	subi	r24, 0xFF	; 255
    2034:	89 83       	std	Y+1, r24	; 0x01
    2036:	89 81       	ldd	r24, Y+1	; 0x01
    2038:	88 30       	cpi	r24, 0x08	; 8
    203a:	70 f3       	brcs	.-36     	; 0x2018 <pcounter_init+0x1a>
}
    203c:	0f 90       	pop	r0
    203e:	0f 90       	pop	r0
    2040:	0f 90       	pop	r0
    2042:	cf 91       	pop	r28
    2044:	df 91       	pop	r29
    2046:	08 95       	ret

00002048 <pcounter_inc>:

void pcounter_inc(pcounter_t * pcounter, prio_t prio)
{
    2048:	df 93       	push	r29
    204a:	cf 93       	push	r28
    204c:	00 d0       	rcall	.+0      	; 0x204e <pcounter_inc+0x6>
    204e:	0f 92       	push	r0
    2050:	cd b7       	in	r28, 0x3d	; 61
    2052:	de b7       	in	r29, 0x3e	; 62
    2054:	9a 83       	std	Y+2, r25	; 0x02
    2056:	89 83       	std	Y+1, r24	; 0x01
    2058:	6b 83       	std	Y+3, r22	; 0x03
    pcounter->counter[prio]++;
    205a:	8b 81       	ldd	r24, Y+3	; 0x03
    205c:	68 2f       	mov	r22, r24
    205e:	70 e0       	ldi	r23, 0x00	; 0
    2060:	29 81       	ldd	r18, Y+1	; 0x01
    2062:	3a 81       	ldd	r19, Y+2	; 0x02
    2064:	cb 01       	movw	r24, r22
    2066:	88 0f       	add	r24, r24
    2068:	99 1f       	adc	r25, r25
    206a:	f9 01       	movw	r30, r18
    206c:	e8 0f       	add	r30, r24
    206e:	f9 1f       	adc	r31, r25
    2070:	80 81       	ld	r24, Z
    2072:	91 81       	ldd	r25, Z+1	; 0x01
    2074:	ac 01       	movw	r20, r24
    2076:	4f 5f       	subi	r20, 0xFF	; 255
    2078:	5f 4f       	sbci	r21, 0xFF	; 255
    207a:	29 81       	ldd	r18, Y+1	; 0x01
    207c:	3a 81       	ldd	r19, Y+2	; 0x02
    207e:	cb 01       	movw	r24, r22
    2080:	88 0f       	add	r24, r24
    2082:	99 1f       	adc	r25, r25
    2084:	f9 01       	movw	r30, r18
    2086:	e8 0f       	add	r30, r24
    2088:	f9 1f       	adc	r31, r25
    208a:	51 83       	std	Z+1, r21	; 0x01
    208c:	40 83       	st	Z, r20
    pcounter->index |= ((index_t)1)<<prio;
    208e:	e9 81       	ldd	r30, Y+1	; 0x01
    2090:	fa 81       	ldd	r31, Y+2	; 0x02
    2092:	80 89       	ldd	r24, Z+16	; 0x10
    2094:	48 2f       	mov	r20, r24
    2096:	8b 81       	ldd	r24, Y+3	; 0x03
    2098:	28 2f       	mov	r18, r24
    209a:	30 e0       	ldi	r19, 0x00	; 0
    209c:	81 e0       	ldi	r24, 0x01	; 1
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	02 2e       	mov	r0, r18
    20a2:	02 c0       	rjmp	.+4      	; 0x20a8 <pcounter_inc+0x60>
    20a4:	88 0f       	add	r24, r24
    20a6:	99 1f       	adc	r25, r25
    20a8:	0a 94       	dec	r0
    20aa:	e2 f7       	brpl	.-8      	; 0x20a4 <pcounter_inc+0x5c>
    20ac:	84 2b       	or	r24, r20
    20ae:	e9 81       	ldd	r30, Y+1	; 0x01
    20b0:	fa 81       	ldd	r31, Y+2	; 0x02
    20b2:	80 8b       	std	Z+16, r24	; 0x10
}
    20b4:	0f 90       	pop	r0
    20b6:	0f 90       	pop	r0
    20b8:	0f 90       	pop	r0
    20ba:	cf 91       	pop	r28
    20bc:	df 91       	pop	r29
    20be:	08 95       	ret

000020c0 <pcounter_dec>:

index_t pcounter_dec(pcounter_t * pcounter, prio_t prio)
{
    20c0:	df 93       	push	r29
    20c2:	cf 93       	push	r28
    20c4:	00 d0       	rcall	.+0      	; 0x20c6 <pcounter_dec+0x6>
    20c6:	00 d0       	rcall	.+0      	; 0x20c8 <pcounter_dec+0x8>
    20c8:	cd b7       	in	r28, 0x3d	; 61
    20ca:	de b7       	in	r29, 0x3e	; 62
    20cc:	9b 83       	std	Y+3, r25	; 0x03
    20ce:	8a 83       	std	Y+2, r24	; 0x02
    20d0:	6c 83       	std	Y+4, r22	; 0x04
    index_t mask;
    mask = ((index_t)1)<<prio;
    20d2:	8c 81       	ldd	r24, Y+4	; 0x04
    20d4:	28 2f       	mov	r18, r24
    20d6:	30 e0       	ldi	r19, 0x00	; 0
    20d8:	81 e0       	ldi	r24, 0x01	; 1
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	02 c0       	rjmp	.+4      	; 0x20e2 <pcounter_dec+0x22>
    20de:	88 0f       	add	r24, r24
    20e0:	99 1f       	adc	r25, r25
    20e2:	2a 95       	dec	r18
    20e4:	e2 f7       	brpl	.-8      	; 0x20de <pcounter_dec+0x1e>
    20e6:	89 83       	std	Y+1, r24	; 0x01
    pcounter->counter[prio]--;
    20e8:	8c 81       	ldd	r24, Y+4	; 0x04
    20ea:	68 2f       	mov	r22, r24
    20ec:	70 e0       	ldi	r23, 0x00	; 0
    20ee:	2a 81       	ldd	r18, Y+2	; 0x02
    20f0:	3b 81       	ldd	r19, Y+3	; 0x03
    20f2:	cb 01       	movw	r24, r22
    20f4:	88 0f       	add	r24, r24
    20f6:	99 1f       	adc	r25, r25
    20f8:	f9 01       	movw	r30, r18
    20fa:	e8 0f       	add	r30, r24
    20fc:	f9 1f       	adc	r31, r25
    20fe:	80 81       	ld	r24, Z
    2100:	91 81       	ldd	r25, Z+1	; 0x01
    2102:	ac 01       	movw	r20, r24
    2104:	41 50       	subi	r20, 0x01	; 1
    2106:	50 40       	sbci	r21, 0x00	; 0
    2108:	2a 81       	ldd	r18, Y+2	; 0x02
    210a:	3b 81       	ldd	r19, Y+3	; 0x03
    210c:	cb 01       	movw	r24, r22
    210e:	88 0f       	add	r24, r24
    2110:	99 1f       	adc	r25, r25
    2112:	f9 01       	movw	r30, r18
    2114:	e8 0f       	add	r30, r24
    2116:	f9 1f       	adc	r31, r25
    2118:	51 83       	std	Z+1, r21	; 0x01
    211a:	40 83       	st	Z, r20
    if(pcounter->counter[prio] == (count_t)0)pcounter->index &= ~mask;
    211c:	8c 81       	ldd	r24, Y+4	; 0x04
    211e:	88 2f       	mov	r24, r24
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	2a 81       	ldd	r18, Y+2	; 0x02
    2124:	3b 81       	ldd	r19, Y+3	; 0x03
    2126:	88 0f       	add	r24, r24
    2128:	99 1f       	adc	r25, r25
    212a:	f9 01       	movw	r30, r18
    212c:	e8 0f       	add	r30, r24
    212e:	f9 1f       	adc	r31, r25
    2130:	80 81       	ld	r24, Z
    2132:	91 81       	ldd	r25, Z+1	; 0x01
    2134:	00 97       	sbiw	r24, 0x00	; 0
    2136:	51 f4       	brne	.+20     	; 0x214c <pcounter_dec+0x8c>
    2138:	ea 81       	ldd	r30, Y+2	; 0x02
    213a:	fb 81       	ldd	r31, Y+3	; 0x03
    213c:	80 89       	ldd	r24, Z+16	; 0x10
    213e:	98 2f       	mov	r25, r24
    2140:	89 81       	ldd	r24, Y+1	; 0x01
    2142:	80 95       	com	r24
    2144:	89 23       	and	r24, r25
    2146:	ea 81       	ldd	r30, Y+2	; 0x02
    2148:	fb 81       	ldd	r31, Y+3	; 0x03
    214a:	80 8b       	std	Z+16, r24	; 0x10
    return pcounter->index & mask;
    214c:	ea 81       	ldd	r30, Y+2	; 0x02
    214e:	fb 81       	ldd	r31, Y+3	; 0x03
    2150:	90 89       	ldd	r25, Z+16	; 0x10
    2152:	89 81       	ldd	r24, Y+1	; 0x01
    2154:	89 23       	and	r24, r25
}
    2156:	0f 90       	pop	r0
    2158:	0f 90       	pop	r0
    215a:	0f 90       	pop	r0
    215c:	0f 90       	pop	r0
    215e:	cf 91       	pop	r28
    2160:	df 91       	pop	r29
    2162:	08 95       	ret

00002164 <pitem_init>:
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
// Инициация
void pitem_init( pitem_t * pitem, prio_t prio )
{
    2164:	df 93       	push	r29
    2166:	cf 93       	push	r28
    2168:	00 d0       	rcall	.+0      	; 0x216a <pitem_init+0x6>
    216a:	0f 92       	push	r0
    216c:	cd b7       	in	r28, 0x3d	; 61
    216e:	de b7       	in	r29, 0x3e	; 62
    2170:	9a 83       	std	Y+2, r25	; 0x02
    2172:	89 83       	std	Y+1, r24	; 0x01
    2174:	6b 83       	std	Y+3, r22	; 0x03
    item_init( (item_t *)pitem );
    2176:	89 81       	ldd	r24, Y+1	; 0x01
    2178:	9a 81       	ldd	r25, Y+2	; 0x02
    217a:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <item_init>
    pitem->list = (xlist_t *)0;
    217e:	e9 81       	ldd	r30, Y+1	; 0x01
    2180:	fa 81       	ldd	r31, Y+2	; 0x02
    2182:	15 82       	std	Z+5, r1	; 0x05
    2184:	14 82       	std	Z+4, r1	; 0x04
    pitem->prio = prio;
    2186:	e9 81       	ldd	r30, Y+1	; 0x01
    2188:	fa 81       	ldd	r31, Y+2	; 0x02
    218a:	8b 81       	ldd	r24, Y+3	; 0x03
    218c:	86 83       	std	Z+6, r24	; 0x06
}
    218e:	0f 90       	pop	r0
    2190:	0f 90       	pop	r0
    2192:	0f 90       	pop	r0
    2194:	cf 91       	pop	r28
    2196:	df 91       	pop	r29
    2198:	08 95       	ret

0000219a <pitem_insert>:
// Вставка в список
void pitem_insert( pitem_t * pitem, xlist_t * xlist )
{
    219a:	df 93       	push	r29
    219c:	cf 93       	push	r28
    219e:	cd b7       	in	r28, 0x3d	; 61
    21a0:	de b7       	in	r29, 0x3e	; 62
    21a2:	28 97       	sbiw	r28, 0x08	; 8
    21a4:	0f b6       	in	r0, 0x3f	; 63
    21a6:	f8 94       	cli
    21a8:	de bf       	out	0x3e, r29	; 62
    21aa:	0f be       	out	0x3f, r0	; 63
    21ac:	cd bf       	out	0x3d, r28	; 61
    21ae:	9e 83       	std	Y+6, r25	; 0x06
    21b0:	8d 83       	std	Y+5, r24	; 0x05
    21b2:	78 87       	std	Y+8, r23	; 0x08
    21b4:	6f 83       	std	Y+7, r22	; 0x07
    prio_t prio;
    index_t mask;
    item_t ** head;

    prio = pitem->prio;
    21b6:	ed 81       	ldd	r30, Y+5	; 0x05
    21b8:	fe 81       	ldd	r31, Y+6	; 0x06
    21ba:	86 81       	ldd	r24, Z+6	; 0x06
    21bc:	8c 83       	std	Y+4, r24	; 0x04
    mask = ((index_t)1)<<prio;
    21be:	8c 81       	ldd	r24, Y+4	; 0x04
    21c0:	28 2f       	mov	r18, r24
    21c2:	30 e0       	ldi	r19, 0x00	; 0
    21c4:	81 e0       	ldi	r24, 0x01	; 1
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	02 c0       	rjmp	.+4      	; 0x21ce <pitem_insert+0x34>
    21ca:	88 0f       	add	r24, r24
    21cc:	99 1f       	adc	r25, r25
    21ce:	2a 95       	dec	r18
    21d0:	e2 f7       	brpl	.-8      	; 0x21ca <pitem_insert+0x30>
    21d2:	8b 83       	std	Y+3, r24	; 0x03
    head = (item_t **)xlist + prio;
    21d4:	2f 81       	ldd	r18, Y+7	; 0x07
    21d6:	38 85       	ldd	r19, Y+8	; 0x08
    21d8:	8c 81       	ldd	r24, Y+4	; 0x04
    21da:	88 2f       	mov	r24, r24
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	88 0f       	add	r24, r24
    21e0:	99 1f       	adc	r25, r25
    21e2:	82 0f       	add	r24, r18
    21e4:	93 1f       	adc	r25, r19
    21e6:	9a 83       	std	Y+2, r25	; 0x02
    21e8:	89 83       	std	Y+1, r24	; 0x01
    // Пуста ли часть списка с таким приоритетом
    if( ( xlist->index )& mask)
    21ea:	ef 81       	ldd	r30, Y+7	; 0x07
    21ec:	f8 85       	ldd	r31, Y+8	; 0x08
    21ee:	90 89       	ldd	r25, Z+16	; 0x10
    21f0:	8b 81       	ldd	r24, Y+3	; 0x03
    21f2:	89 23       	and	r24, r25
    21f4:	88 23       	and	r24, r24
    21f6:	51 f0       	breq	.+20     	; 0x220c <pitem_insert+0x72>
    {
        //Не пуста вставляем туда gitem
        item_insert( (item_t *)pitem, *head );
    21f8:	8d 81       	ldd	r24, Y+5	; 0x05
    21fa:	9e 81       	ldd	r25, Y+6	; 0x06
    21fc:	e9 81       	ldd	r30, Y+1	; 0x01
    21fe:	fa 81       	ldd	r31, Y+2	; 0x02
    2200:	20 81       	ld	r18, Z
    2202:	31 81       	ldd	r19, Z+1	; 0x01
    2204:	b9 01       	movw	r22, r18
    2206:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <item_insert>
    220a:	0e c0       	rjmp	.+28     	; 0x2228 <pitem_insert+0x8e>
    }
    else
    {
        // Пуста, gitem будет головой
        *head = (item_t *)pitem;
    220c:	8d 81       	ldd	r24, Y+5	; 0x05
    220e:	9e 81       	ldd	r25, Y+6	; 0x06
    2210:	e9 81       	ldd	r30, Y+1	; 0x01
    2212:	fa 81       	ldd	r31, Y+2	; 0x02
    2214:	91 83       	std	Z+1, r25	; 0x01
    2216:	80 83       	st	Z, r24
        xlist->index |= mask;
    2218:	ef 81       	ldd	r30, Y+7	; 0x07
    221a:	f8 85       	ldd	r31, Y+8	; 0x08
    221c:	90 89       	ldd	r25, Z+16	; 0x10
    221e:	8b 81       	ldd	r24, Y+3	; 0x03
    2220:	89 2b       	or	r24, r25
    2222:	ef 81       	ldd	r30, Y+7	; 0x07
    2224:	f8 85       	ldd	r31, Y+8	; 0x08
    2226:	80 8b       	std	Z+16, r24	; 0x10
    }
    pitem->list = xlist;
    2228:	ed 81       	ldd	r30, Y+5	; 0x05
    222a:	fe 81       	ldd	r31, Y+6	; 0x06
    222c:	8f 81       	ldd	r24, Y+7	; 0x07
    222e:	98 85       	ldd	r25, Y+8	; 0x08
    2230:	95 83       	std	Z+5, r25	; 0x05
    2232:	84 83       	std	Z+4, r24	; 0x04
}
    2234:	28 96       	adiw	r28, 0x08	; 8
    2236:	0f b6       	in	r0, 0x3f	; 63
    2238:	f8 94       	cli
    223a:	de bf       	out	0x3e, r29	; 62
    223c:	0f be       	out	0x3f, r0	; 63
    223e:	cd bf       	out	0x3d, r28	; 61
    2240:	cf 91       	pop	r28
    2242:	df 91       	pop	r29
    2244:	08 95       	ret

00002246 <pitem_fast_cut>:
// Быстрая вырезка из списка
void pitem_fast_cut( pitem_t * pitem )
{
    2246:	df 93       	push	r29
    2248:	cf 93       	push	r28
    224a:	00 d0       	rcall	.+0      	; 0x224c <pitem_fast_cut+0x6>
    224c:	00 d0       	rcall	.+0      	; 0x224e <pitem_fast_cut+0x8>
    224e:	0f 92       	push	r0
    2250:	cd b7       	in	r28, 0x3d	; 61
    2252:	de b7       	in	r29, 0x3e	; 62
    2254:	9d 83       	std	Y+5, r25	; 0x05
    2256:	8c 83       	std	Y+4, r24	; 0x04
    prio_t prio;
    xlist_t * xlist;

    prio = pitem->prio;
    2258:	ec 81       	ldd	r30, Y+4	; 0x04
    225a:	fd 81       	ldd	r31, Y+5	; 0x05
    225c:	86 81       	ldd	r24, Z+6	; 0x06
    225e:	8b 83       	std	Y+3, r24	; 0x03
    xlist = (xlist_t *)pitem->list;
    2260:	ec 81       	ldd	r30, Y+4	; 0x04
    2262:	fd 81       	ldd	r31, Y+5	; 0x05
    2264:	84 81       	ldd	r24, Z+4	; 0x04
    2266:	95 81       	ldd	r25, Z+5	; 0x05
    2268:	9a 83       	std	Y+2, r25	; 0x02
    226a:	89 83       	std	Y+1, r24	; 0x01
    //Является ли элемент единственным в своей части списка?
    if( ((item_t *)pitem)->next == (item_t *)pitem )
    226c:	ec 81       	ldd	r30, Y+4	; 0x04
    226e:	fd 81       	ldd	r31, Y+5	; 0x05
    2270:	20 81       	ld	r18, Z
    2272:	31 81       	ldd	r19, Z+1	; 0x01
    2274:	8c 81       	ldd	r24, Y+4	; 0x04
    2276:	9d 81       	ldd	r25, Y+5	; 0x05
    2278:	28 17       	cp	r18, r24
    227a:	39 07       	cpc	r19, r25
    227c:	09 f5       	brne	.+66     	; 0x22c0 <pitem_fast_cut+0x7a>
    {
        // Да, является!
        xlist->item[prio] = (item_t *)0;
    227e:	8b 81       	ldd	r24, Y+3	; 0x03
    2280:	88 2f       	mov	r24, r24
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	29 81       	ldd	r18, Y+1	; 0x01
    2286:	3a 81       	ldd	r19, Y+2	; 0x02
    2288:	88 0f       	add	r24, r24
    228a:	99 1f       	adc	r25, r25
    228c:	f9 01       	movw	r30, r18
    228e:	e8 0f       	add	r30, r24
    2290:	f9 1f       	adc	r31, r25
    2292:	11 82       	std	Z+1, r1	; 0x01
    2294:	10 82       	st	Z, r1
        xlist->index &= ~(((index_t)1)<<prio);
    2296:	e9 81       	ldd	r30, Y+1	; 0x01
    2298:	fa 81       	ldd	r31, Y+2	; 0x02
    229a:	80 89       	ldd	r24, Z+16	; 0x10
    229c:	48 2f       	mov	r20, r24
    229e:	8b 81       	ldd	r24, Y+3	; 0x03
    22a0:	28 2f       	mov	r18, r24
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	81 e0       	ldi	r24, 0x01	; 1
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	02 2e       	mov	r0, r18
    22aa:	02 c0       	rjmp	.+4      	; 0x22b0 <pitem_fast_cut+0x6a>
    22ac:	88 0f       	add	r24, r24
    22ae:	99 1f       	adc	r25, r25
    22b0:	0a 94       	dec	r0
    22b2:	e2 f7       	brpl	.-8      	; 0x22ac <pitem_fast_cut+0x66>
    22b4:	80 95       	com	r24
    22b6:	84 23       	and	r24, r20
    22b8:	e9 81       	ldd	r30, Y+1	; 0x01
    22ba:	fa 81       	ldd	r31, Y+2	; 0x02
    22bc:	80 8b       	std	Z+16, r24	; 0x10
    22be:	1a c0       	rjmp	.+52     	; 0x22f4 <pitem_fast_cut+0xae>
    }
    else
    {
        // Нет, не является!
        // Является ли элемент головой своей части списка?
        if( xlist->item[(prio_t)prio] == (item_t *)pitem )
    22c0:	8b 81       	ldd	r24, Y+3	; 0x03
    22c2:	88 2f       	mov	r24, r24
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	29 81       	ldd	r18, Y+1	; 0x01
    22c8:	3a 81       	ldd	r19, Y+2	; 0x02
    22ca:	88 0f       	add	r24, r24
    22cc:	99 1f       	adc	r25, r25
    22ce:	f9 01       	movw	r30, r18
    22d0:	e8 0f       	add	r30, r24
    22d2:	f9 1f       	adc	r31, r25
    22d4:	20 81       	ld	r18, Z
    22d6:	31 81       	ldd	r19, Z+1	; 0x01
    22d8:	8c 81       	ldd	r24, Y+4	; 0x04
    22da:	9d 81       	ldd	r25, Y+5	; 0x05
    22dc:	28 17       	cp	r18, r24
    22de:	39 07       	cpc	r19, r25
    22e0:	29 f4       	brne	.+10     	; 0x22ec <pitem_fast_cut+0xa6>
        {
            // Является, список надо переключить
            xlist_switch( xlist, prio );
    22e2:	89 81       	ldd	r24, Y+1	; 0x01
    22e4:	9a 81       	ldd	r25, Y+2	; 0x02
    22e6:	6b 81       	ldd	r22, Y+3	; 0x03
    22e8:	0e 94 76 20 	call	0x40ec	; 0x40ec <xlist_switch>
        }
        // Собственно - вырезаем элемент
        item_cut( (item_t *)pitem );
    22ec:	8c 81       	ldd	r24, Y+4	; 0x04
    22ee:	9d 81       	ldd	r25, Y+5	; 0x05
    22f0:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <item_cut>
    }
}
    22f4:	0f 90       	pop	r0
    22f6:	0f 90       	pop	r0
    22f8:	0f 90       	pop	r0
    22fa:	0f 90       	pop	r0
    22fc:	0f 90       	pop	r0
    22fe:	cf 91       	pop	r28
    2300:	df 91       	pop	r29
    2302:	08 95       	ret

00002304 <pitem_cut>:
// Вырезка из списка
void pitem_cut(pitem_t * pitem)
{
    2304:	df 93       	push	r29
    2306:	cf 93       	push	r28
    2308:	00 d0       	rcall	.+0      	; 0x230a <pitem_cut+0x6>
    230a:	cd b7       	in	r28, 0x3d	; 61
    230c:	de b7       	in	r29, 0x3e	; 62
    230e:	9a 83       	std	Y+2, r25	; 0x02
    2310:	89 83       	std	Y+1, r24	; 0x01
    pitem_fast_cut( pitem );
    2312:	89 81       	ldd	r24, Y+1	; 0x01
    2314:	9a 81       	ldd	r25, Y+2	; 0x02
    2316:	0e 94 23 11 	call	0x2246	; 0x2246 <pitem_fast_cut>
    pitem->list = (xlist_t *)0;
    231a:	e9 81       	ldd	r30, Y+1	; 0x01
    231c:	fa 81       	ldd	r31, Y+2	; 0x02
    231e:	15 82       	std	Z+5, r1	; 0x05
    2320:	14 82       	std	Z+4, r1	; 0x04
}
    2322:	0f 90       	pop	r0
    2324:	0f 90       	pop	r0
    2326:	cf 91       	pop	r28
    2328:	df 91       	pop	r29
    232a:	08 95       	ret

0000232c <pitem_xlist_chain>:

pitem_t * pitem_xlist_chain( xlist_t * src )
{
    232c:	df 93       	push	r29
    232e:	cf 93       	push	r28
    2330:	cd b7       	in	r28, 0x3d	; 61
    2332:	de b7       	in	r29, 0x3e	; 62
    2334:	2d 97       	sbiw	r28, 0x0d	; 13
    2336:	0f b6       	in	r0, 0x3f	; 63
    2338:	f8 94       	cli
    233a:	de bf       	out	0x3e, r29	; 62
    233c:	0f be       	out	0x3f, r0	; 63
    233e:	cd bf       	out	0x3d, r28	; 61
    2340:	9d 87       	std	Y+13, r25	; 0x0d
    2342:	8c 87       	std	Y+12, r24	; 0x0c
    pitem_t * ret;  // return value
    ret = (pitem_t *)xlist_head( src );     // will return former xlist head
    2344:	8c 85       	ldd	r24, Y+12	; 0x0c
    2346:	9d 85       	ldd	r25, Y+13	; 0x0d
    2348:	0e 94 4a 20 	call	0x4094	; 0x4094 <xlist_head>
    234c:	9b 87       	std	Y+11, r25	; 0x0b
    234e:	8a 87       	std	Y+10, r24	; 0x0a
    if(ret)
    2350:	8a 85       	ldd	r24, Y+10	; 0x0a
    2352:	9b 85       	ldd	r25, Y+11	; 0x0b
    2354:	00 97       	sbiw	r24, 0x00	; 0
    2356:	09 f4       	brne	.+2      	; 0x235a <pitem_xlist_chain+0x2e>
    2358:	77 c0       	rjmp	.+238    	; 0x2448 <pitem_xlist_chain+0x11c>
                index;  // buffer for xlist index
        prio_t  prio;   // current working priority
        item_t * tail;  // current list tail;


        tail = ((item_t *)ret)->prev;           // current list tail initial value
    235a:	ea 85       	ldd	r30, Y+10	; 0x0a
    235c:	fb 85       	ldd	r31, Y+11	; 0x0b
    235e:	82 81       	ldd	r24, Z+2	; 0x02
    2360:	93 81       	ldd	r25, Z+3	; 0x03
    2362:	9e 83       	std	Y+6, r25	; 0x06
    2364:	8d 83       	std	Y+5, r24	; 0x05
        prio = ret->prio;                       // initial working prio
    2366:	ea 85       	ldd	r30, Y+10	; 0x0a
    2368:	fb 85       	ldd	r31, Y+11	; 0x0b
    236a:	86 81       	ldd	r24, Z+6	; 0x06
    236c:	8f 83       	std	Y+7, r24	; 0x07
        src->item[prio++] = (item_t *)0;        // cut all items from current xlist part
    236e:	8f 81       	ldd	r24, Y+7	; 0x07
    2370:	88 2f       	mov	r24, r24
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	2c 85       	ldd	r18, Y+12	; 0x0c
    2376:	3d 85       	ldd	r19, Y+13	; 0x0d
    2378:	88 0f       	add	r24, r24
    237a:	99 1f       	adc	r25, r25
    237c:	f9 01       	movw	r30, r18
    237e:	e8 0f       	add	r30, r24
    2380:	f9 1f       	adc	r31, r25
    2382:	11 82       	std	Z+1, r1	; 0x01
    2384:	10 82       	st	Z, r1
    2386:	8f 81       	ldd	r24, Y+7	; 0x07
    2388:	8f 5f       	subi	r24, 0xFF	; 255
    238a:	8f 83       	std	Y+7, r24	; 0x07
        index = src->index;                     // remember xlist index to improve performance
    238c:	ec 85       	ldd	r30, Y+12	; 0x0c
    238e:	fd 85       	ldd	r31, Y+13	; 0x0d
    2390:	80 89       	ldd	r24, Z+16	; 0x10
    2392:	88 87       	std	Y+8, r24	; 0x08
        mask = ((index_t)1) << prio;            // initial mask value
    2394:	8f 81       	ldd	r24, Y+7	; 0x07
    2396:	28 2f       	mov	r18, r24
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	81 e0       	ldi	r24, 0x01	; 1
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	02 2e       	mov	r0, r18
    23a0:	02 c0       	rjmp	.+4      	; 0x23a6 <pitem_xlist_chain+0x7a>
    23a2:	88 0f       	add	r24, r24
    23a4:	99 1f       	adc	r25, r25
    23a6:	0a 94       	dec	r0
    23a8:	e2 f7       	brpl	.-8      	; 0x23a2 <pitem_xlist_chain+0x76>
    23aa:	89 87       	std	Y+9, r24	; 0x09
    23ac:	3b c0       	rjmp	.+118    	; 0x2424 <pitem_xlist_chain+0xf8>
        // cut all items from xlist and form an ordinary list of them
        while(mask)
        {
            if( index & mask )
    23ae:	88 85       	ldd	r24, Y+8	; 0x08
    23b0:	99 85       	ldd	r25, Y+9	; 0x09
    23b2:	89 23       	and	r24, r25
    23b4:	88 23       	and	r24, r24
    23b6:	81 f1       	breq	.+96     	; 0x2418 <pitem_xlist_chain+0xec>
            {
                // current part of xlist has some items to cut
                item_t * xhead;
                item_t * buf;
                xhead = src->item[prio];                    // current xlist head;
    23b8:	8f 81       	ldd	r24, Y+7	; 0x07
    23ba:	88 2f       	mov	r24, r24
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	2c 85       	ldd	r18, Y+12	; 0x0c
    23c0:	3d 85       	ldd	r19, Y+13	; 0x0d
    23c2:	88 0f       	add	r24, r24
    23c4:	99 1f       	adc	r25, r25
    23c6:	f9 01       	movw	r30, r18
    23c8:	e8 0f       	add	r30, r24
    23ca:	f9 1f       	adc	r31, r25
    23cc:	80 81       	ld	r24, Z
    23ce:	91 81       	ldd	r25, Z+1	; 0x01
    23d0:	9c 83       	std	Y+4, r25	; 0x04
    23d2:	8b 83       	std	Y+3, r24	; 0x03
                src->item[prio] = (item_t *)0;              // cut all items from current xlist part
    23d4:	8f 81       	ldd	r24, Y+7	; 0x07
    23d6:	88 2f       	mov	r24, r24
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	2c 85       	ldd	r18, Y+12	; 0x0c
    23dc:	3d 85       	ldd	r19, Y+13	; 0x0d
    23de:	88 0f       	add	r24, r24
    23e0:	99 1f       	adc	r25, r25
    23e2:	f9 01       	movw	r30, r18
    23e4:	e8 0f       	add	r30, r24
    23e6:	f9 1f       	adc	r31, r25
    23e8:	11 82       	std	Z+1, r1	; 0x01
    23ea:	10 82       	st	Z, r1
                // chain former xlist head to a list tail
                tail->next = xhead;
    23ec:	ed 81       	ldd	r30, Y+5	; 0x05
    23ee:	fe 81       	ldd	r31, Y+6	; 0x06
    23f0:	8b 81       	ldd	r24, Y+3	; 0x03
    23f2:	9c 81       	ldd	r25, Y+4	; 0x04
    23f4:	91 83       	std	Z+1, r25	; 0x01
    23f6:	80 83       	st	Z, r24
                buf = xhead->prev;
    23f8:	eb 81       	ldd	r30, Y+3	; 0x03
    23fa:	fc 81       	ldd	r31, Y+4	; 0x04
    23fc:	82 81       	ldd	r24, Z+2	; 0x02
    23fe:	93 81       	ldd	r25, Z+3	; 0x03
    2400:	9a 83       	std	Y+2, r25	; 0x02
    2402:	89 83       	std	Y+1, r24	; 0x01
                xhead->prev = tail;
    2404:	eb 81       	ldd	r30, Y+3	; 0x03
    2406:	fc 81       	ldd	r31, Y+4	; 0x04
    2408:	8d 81       	ldd	r24, Y+5	; 0x05
    240a:	9e 81       	ldd	r25, Y+6	; 0x06
    240c:	93 83       	std	Z+3, r25	; 0x03
    240e:	82 83       	std	Z+2, r24	; 0x02
                tail = buf;
    2410:	89 81       	ldd	r24, Y+1	; 0x01
    2412:	9a 81       	ldd	r25, Y+2	; 0x02
    2414:	9e 83       	std	Y+6, r25	; 0x06
    2416:	8d 83       	std	Y+5, r24	; 0x05
            }
            mask <<= (prio_t)1;
    2418:	89 85       	ldd	r24, Y+9	; 0x09
    241a:	88 0f       	add	r24, r24
    241c:	89 87       	std	Y+9, r24	; 0x09
            prio++;
    241e:	8f 81       	ldd	r24, Y+7	; 0x07
    2420:	8f 5f       	subi	r24, 0xFF	; 255
    2422:	8f 83       	std	Y+7, r24	; 0x07
        prio = ret->prio;                       // initial working prio
        src->item[prio++] = (item_t *)0;        // cut all items from current xlist part
        index = src->index;                     // remember xlist index to improve performance
        mask = ((index_t)1) << prio;            // initial mask value
        // cut all items from xlist and form an ordinary list of them
        while(mask)
    2424:	89 85       	ldd	r24, Y+9	; 0x09
    2426:	88 23       	and	r24, r24
    2428:	11 f6       	brne	.-124    	; 0x23ae <pitem_xlist_chain+0x82>
            }
            mask <<= (prio_t)1;
            prio++;
        }
        // complete the list by chaining tail and head
        ((item_t *)ret)->prev = tail;
    242a:	ea 85       	ldd	r30, Y+10	; 0x0a
    242c:	fb 85       	ldd	r31, Y+11	; 0x0b
    242e:	8d 81       	ldd	r24, Y+5	; 0x05
    2430:	9e 81       	ldd	r25, Y+6	; 0x06
    2432:	93 83       	std	Z+3, r25	; 0x03
    2434:	82 83       	std	Z+2, r24	; 0x02
        tail->next = (item_t *)ret;
    2436:	8a 85       	ldd	r24, Y+10	; 0x0a
    2438:	9b 85       	ldd	r25, Y+11	; 0x0b
    243a:	ed 81       	ldd	r30, Y+5	; 0x05
    243c:	fe 81       	ldd	r31, Y+6	; 0x06
    243e:	91 83       	std	Z+1, r25	; 0x01
    2440:	80 83       	st	Z, r24
        src->index = (index_t)0;        // xlist is empty.
    2442:	ec 85       	ldd	r30, Y+12	; 0x0c
    2444:	fd 85       	ldd	r31, Y+13	; 0x0d
    2446:	10 8a       	std	Z+16, r1	; 0x10
    }
    return ret;                     // return list head;
    2448:	8a 85       	ldd	r24, Y+10	; 0x0a
    244a:	9b 85       	ldd	r25, Y+11	; 0x0b
}
    244c:	2d 96       	adiw	r28, 0x0d	; 13
    244e:	0f b6       	in	r0, 0x3f	; 63
    2450:	f8 94       	cli
    2452:	de bf       	out	0x3e, r29	; 62
    2454:	0f be       	out	0x3f, r0	; 63
    2456:	cd bf       	out	0x3d, r28	; 61
    2458:	cf 91       	pop	r28
    245a:	df 91       	pop	r29
    245c:	08 95       	ret

0000245e <proc_init_isr>:
    bool_t is_rt // если true, значит процесс будет иметть поведение RT
#ifdef CONFIG_MP
    ,affinity_t affinity
#endif // CONFIG_MP
)
{
    245e:	8f 92       	push	r8
    2460:	af 92       	push	r10
    2462:	bf 92       	push	r11
    2464:	cf 92       	push	r12
    2466:	ef 92       	push	r14
    2468:	ff 92       	push	r15
    246a:	0f 93       	push	r16
    246c:	1f 93       	push	r17
    246e:	df 93       	push	r29
    2470:	cf 93       	push	r28
    2472:	cd b7       	in	r28, 0x3d	; 61
    2474:	de b7       	in	r29, 0x3e	; 62
    2476:	62 97       	sbiw	r28, 0x12	; 18
    2478:	0f b6       	in	r0, 0x3f	; 63
    247a:	f8 94       	cli
    247c:	de bf       	out	0x3e, r29	; 62
    247e:	0f be       	out	0x3f, r0	; 63
    2480:	cd bf       	out	0x3d, r28	; 61
    2482:	9a 83       	std	Y+2, r25	; 0x02
    2484:	89 83       	std	Y+1, r24	; 0x01
    2486:	7c 83       	std	Y+4, r23	; 0x04
    2488:	6b 83       	std	Y+3, r22	; 0x03
    248a:	5e 83       	std	Y+6, r21	; 0x06
    248c:	4d 83       	std	Y+5, r20	; 0x05
    248e:	38 87       	std	Y+8, r19	; 0x08
    2490:	2f 83       	std	Y+7, r18	; 0x07
    2492:	1a 87       	std	Y+10, r17	; 0x0a
    2494:	09 87       	std	Y+9, r16	; 0x09
    2496:	fc 86       	std	Y+12, r15	; 0x0c
    2498:	eb 86       	std	Y+11, r14	; 0x0b
    249a:	cd 86       	std	Y+13, r12	; 0x0d
    249c:	bf 86       	std	Y+15, r11	; 0x0f
    249e:	ae 86       	std	Y+14, r10	; 0x0e
    24a0:	88 8a       	std	Y+16, r8	; 0x10
    SPIN_INIT( proc );
    24a2:	89 81       	ldd	r24, Y+1	; 0x01
    24a4:	9a 81       	ldd	r25, Y+2	; 0x02
    24a6:	83 96       	adiw	r24, 0x23	; 35
    24a8:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <spin_init>
    SPIN_LOCK( proc );
    24ac:	89 81       	ldd	r24, Y+1	; 0x01
    24ae:	9a 81       	ldd	r25, Y+2	; 0x02
    24b0:	83 96       	adiw	r24, 0x23	; 35
    24b2:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>

    pitem_init( (pitem_t *)proc, prio );
    24b6:	89 81       	ldd	r24, Y+1	; 0x01
    24b8:	9a 81       	ldd	r25, Y+2	; 0x02
    24ba:	6d 85       	ldd	r22, Y+13	; 0x0d
    24bc:	0e 94 b2 10 	call	0x2164	; 0x2164 <pitem_init>
    proc->flags = ( is_rt )?PROC_FLG_RT:(flag_t)0;
    24c0:	88 89       	ldd	r24, Y+16	; 0x10
    24c2:	88 23       	and	r24, r24
    24c4:	29 f0       	breq	.+10     	; 0x24d0 <proc_init_isr+0x72>
    24c6:	81 e0       	ldi	r24, 0x01	; 1
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	9a 8b       	std	Y+18, r25	; 0x12
    24cc:	89 8b       	std	Y+17, r24	; 0x11
    24ce:	02 c0       	rjmp	.+4      	; 0x24d4 <proc_init_isr+0x76>
    24d0:	1a 8a       	std	Y+18, r1	; 0x12
    24d2:	19 8a       	std	Y+17, r1	; 0x11
    24d4:	e9 81       	ldd	r30, Y+1	; 0x01
    24d6:	fa 81       	ldd	r31, Y+2	; 0x02
    24d8:	89 89       	ldd	r24, Y+17	; 0x11
    24da:	9a 89       	ldd	r25, Y+18	; 0x12
    24dc:	90 87       	std	Z+8, r25	; 0x08
    24de:	87 83       	std	Z+7, r24	; 0x07

    PROC_LRES_INIT( proc );
    24e0:	89 81       	ldd	r24, Y+1	; 0x01
    24e2:	9a 81       	ldd	r25, Y+2	; 0x02
    24e4:	0a 96       	adiw	r24, 0x0a	; 10
    24e6:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <pcounter_init>
#ifdef CONFIG_USE_HIGHEST_LOCKER
    proc->base_prio = prio;
    24ea:	e9 81       	ldd	r30, Y+1	; 0x01
    24ec:	fa 81       	ldd	r31, Y+2	; 0x02
    24ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    24f0:	81 87       	std	Z+9, r24	; 0x09
#endif
    proc->time_quant = time_quant;
    24f2:	8e 85       	ldd	r24, Y+14	; 0x0e
    24f4:	9f 85       	ldd	r25, Y+15	; 0x0f
    24f6:	e9 81       	ldd	r30, Y+1	; 0x01
    24f8:	fa 81       	ldd	r31, Y+2	; 0x02
    24fa:	94 8f       	std	Z+28, r25	; 0x1c
    24fc:	83 8f       	std	Z+27, r24	; 0x1b
    proc->timer = time_quant;
    24fe:	8e 85       	ldd	r24, Y+14	; 0x0e
    2500:	9f 85       	ldd	r25, Y+15	; 0x0f
    2502:	e9 81       	ldd	r30, Y+1	; 0x01
    2504:	fa 81       	ldd	r31, Y+2	; 0x02
    2506:	96 8f       	std	Z+30, r25	; 0x1e
    2508:	85 8f       	std	Z+29, r24	; 0x1d
#ifdef CONFIG_MP
    proc->core_id = (core_id_t)0;
    250a:	e9 81       	ldd	r30, Y+1	; 0x01
    250c:	fa 81       	ldd	r31, Y+2	; 0x02
    250e:	11 a2       	std	Z+33, r1	; 0x21
    proc->affinity = affinity;
    2510:	e9 81       	ldd	r30, Y+1	; 0x01
    2512:	fa 81       	ldd	r31, Y+2	; 0x02
    2514:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2516:	82 a3       	std	Z+34, r24	; 0x22
#endif // CONFIG_MP
    proc->pmain = pmain;
    2518:	e9 81       	ldd	r30, Y+1	; 0x01
    251a:	fa 81       	ldd	r31, Y+2	; 0x02
    251c:	8b 81       	ldd	r24, Y+3	; 0x03
    251e:	9c 81       	ldd	r25, Y+4	; 0x04
    2520:	95 a3       	std	Z+37, r25	; 0x25
    2522:	84 a3       	std	Z+36, r24	; 0x24
    proc->sv_hook = sv_hook;
    2524:	e9 81       	ldd	r30, Y+1	; 0x01
    2526:	fa 81       	ldd	r31, Y+2	; 0x02
    2528:	8d 81       	ldd	r24, Y+5	; 0x05
    252a:	9e 81       	ldd	r25, Y+6	; 0x06
    252c:	97 a3       	std	Z+39, r25	; 0x27
    252e:	86 a3       	std	Z+38, r24	; 0x26
    proc->rs_hook = rs_hook;
    2530:	e9 81       	ldd	r30, Y+1	; 0x01
    2532:	fa 81       	ldd	r31, Y+2	; 0x02
    2534:	8f 81       	ldd	r24, Y+7	; 0x07
    2536:	98 85       	ldd	r25, Y+8	; 0x08
    2538:	91 a7       	std	Z+41, r25	; 0x29
    253a:	80 a7       	std	Z+40, r24	; 0x28
    proc->arg = arg;
    253c:	e9 81       	ldd	r30, Y+1	; 0x01
    253e:	fa 81       	ldd	r31, Y+2	; 0x02
    2540:	89 85       	ldd	r24, Y+9	; 0x09
    2542:	9a 85       	ldd	r25, Y+10	; 0x0a
    2544:	93 a7       	std	Z+43, r25	; 0x2b
    2546:	82 a7       	std	Z+42, r24	; 0x2a
    proc->sstart = sstart;
    2548:	e9 81       	ldd	r30, Y+1	; 0x01
    254a:	fa 81       	ldd	r31, Y+2	; 0x02
    254c:	8b 85       	ldd	r24, Y+11	; 0x0b
    254e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2550:	95 a7       	std	Z+45, r25	; 0x2d
    2552:	84 a7       	std	Z+44, r24	; 0x2c
    if( sstart )proc->spointer = proc_stack_init(sstart, (code_t)proc_run_wrapper, (void *)proc);
    2554:	8b 85       	ldd	r24, Y+11	; 0x0b
    2556:	9c 85       	ldd	r25, Y+12	; 0x0c
    2558:	00 97       	sbiw	r24, 0x00	; 0
    255a:	71 f0       	breq	.+28     	; 0x2578 <proc_init_isr+0x11a>
    255c:	4a ee       	ldi	r20, 0xEA	; 234
    255e:	5d e1       	ldi	r21, 0x1D	; 29
    2560:	8b 85       	ldd	r24, Y+11	; 0x0b
    2562:	9c 85       	ldd	r25, Y+12	; 0x0c
    2564:	29 81       	ldd	r18, Y+1	; 0x01
    2566:	3a 81       	ldd	r19, Y+2	; 0x02
    2568:	ba 01       	movw	r22, r20
    256a:	a9 01       	movw	r20, r18
    256c:	0e 94 6f 0a 	call	0x14de	; 0x14de <proc_stack_init>
    2570:	e9 81       	ldd	r30, Y+1	; 0x01
    2572:	fa 81       	ldd	r31, Y+2	; 0x02
    2574:	97 a7       	std	Z+47, r25	; 0x2f
    2576:	86 a7       	std	Z+46, r24	; 0x2e

    SPIN_UNLOCK( proc );
    2578:	89 81       	ldd	r24, Y+1	; 0x01
    257a:	9a 81       	ldd	r25, Y+2	; 0x02
    257c:	83 96       	adiw	r24, 0x23	; 35
    257e:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
}
    2582:	62 96       	adiw	r28, 0x12	; 18
    2584:	0f b6       	in	r0, 0x3f	; 63
    2586:	f8 94       	cli
    2588:	de bf       	out	0x3e, r29	; 62
    258a:	0f be       	out	0x3f, r0	; 63
    258c:	cd bf       	out	0x3d, r28	; 61
    258e:	cf 91       	pop	r28
    2590:	df 91       	pop	r29
    2592:	1f 91       	pop	r17
    2594:	0f 91       	pop	r16
    2596:	ff 90       	pop	r15
    2598:	ef 90       	pop	r14
    259a:	cf 90       	pop	r12
    259c:	bf 90       	pop	r11
    259e:	af 90       	pop	r10
    25a0:	8f 90       	pop	r8
    25a2:	08 95       	ret

000025a4 <_proc_run_>:
//  Функция для внутреннего использования - собственно запуск процесса
#ifdef CONFIG_MP
void _proc_run_( proc_t * proc )
{
    25a4:	df 93       	push	r29
    25a6:	cf 93       	push	r28
    25a8:	00 d0       	rcall	.+0      	; 0x25aa <_proc_run_+0x6>
    25aa:	00 d0       	rcall	.+0      	; 0x25ac <_proc_run_+0x8>
    25ac:	cd b7       	in	r28, 0x3d	; 61
    25ae:	de b7       	in	r29, 0x3e	; 62
    25b0:	9c 83       	std	Y+4, r25	; 0x04
    25b2:	8b 83       	std	Y+3, r24	; 0x03
    sched_t * proc_sched;
    proc_sched = (sched_t *)kernel.sched + proc->core_id;
    25b4:	eb 81       	ldd	r30, Y+3	; 0x03
    25b6:	fc 81       	ldd	r31, Y+4	; 0x04
    25b8:	81 a1       	ldd	r24, Z+33	; 0x21
    25ba:	28 2f       	mov	r18, r24
    25bc:	30 e0       	ldi	r19, 0x00	; 0
    25be:	8b e2       	ldi	r24, 0x2B	; 43
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	ac 01       	movw	r20, r24
    25c4:	24 9f       	mul	r18, r20
    25c6:	c0 01       	movw	r24, r0
    25c8:	25 9f       	mul	r18, r21
    25ca:	90 0d       	add	r25, r0
    25cc:	34 9f       	mul	r19, r20
    25ce:	90 0d       	add	r25, r0
    25d0:	11 24       	eor	r1, r1
    25d2:	89 52       	subi	r24, 0x29	; 41
    25d4:	9d 4f       	sbci	r25, 0xFD	; 253
    25d6:	9a 83       	std	Y+2, r25	; 0x02
    25d8:	89 83       	std	Y+1, r24	; 0x01
    SPIN_LOCK( proc_sched );
    25da:	89 81       	ldd	r24, Y+1	; 0x01
    25dc:	9a 81       	ldd	r25, Y+2	; 0x02
    25de:	8a 96       	adiw	r24, 0x2a	; 42
    25e0:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    pitem_insert( (pitem_t *)proc, proc_sched->ready );
    25e4:	8b 81       	ldd	r24, Y+3	; 0x03
    25e6:	9c 81       	ldd	r25, Y+4	; 0x04
    25e8:	e9 81       	ldd	r30, Y+1	; 0x01
    25ea:	fa 81       	ldd	r31, Y+2	; 0x02
    25ec:	22 81       	ldd	r18, Z+2	; 0x02
    25ee:	33 81       	ldd	r19, Z+3	; 0x03
    25f0:	b9 01       	movw	r22, r18
    25f2:	0e 94 cd 10 	call	0x219a	; 0x219a <pitem_insert>
    SPIN_UNLOCK( proc_sched );
    25f6:	89 81       	ldd	r24, Y+1	; 0x01
    25f8:	9a 81       	ldd	r25, Y+2	; 0x02
    25fa:	8a 96       	adiw	r24, 0x2a	; 42
    25fc:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
}
    2600:	0f 90       	pop	r0
    2602:	0f 90       	pop	r0
    2604:	0f 90       	pop	r0
    2606:	0f 90       	pop	r0
    2608:	cf 91       	pop	r28
    260a:	df 91       	pop	r29
    260c:	08 95       	ret

0000260e <_proc_run>:
#endif // CONFIG_MP

void _proc_run( proc_t * proc )
{
    260e:	df 93       	push	r29
    2610:	cf 93       	push	r28
    2612:	00 d0       	rcall	.+0      	; 0x2614 <_proc_run+0x6>
    2614:	cd b7       	in	r28, 0x3d	; 61
    2616:	de b7       	in	r29, 0x3e	; 62
    2618:	9a 83       	std	Y+2, r25	; 0x02
    261a:	89 83       	std	Y+1, r24	; 0x01
    proc->flags |= PROC_FLG_RUN;
    261c:	e9 81       	ldd	r30, Y+1	; 0x01
    261e:	fa 81       	ldd	r31, Y+2	; 0x02
    2620:	87 81       	ldd	r24, Z+7	; 0x07
    2622:	90 85       	ldd	r25, Z+8	; 0x08
    2624:	82 60       	ori	r24, 0x02	; 2
    2626:	e9 81       	ldd	r30, Y+1	; 0x01
    2628:	fa 81       	ldd	r31, Y+2	; 0x02
    262a:	90 87       	std	Z+8, r25	; 0x08
    262c:	87 83       	std	Z+7, r24	; 0x07
#ifdef CONFIG_MP
    spin_lock( &kernel.stat_lock );
    262e:	8f e8       	ldi	r24, 0x8F	; 143
    2630:	93 e0       	ldi	r25, 0x03	; 3
    2632:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    proc->core_id = sched_load_balancer( proc, (stat_t *)kernel.stat );
    2636:	89 81       	ldd	r24, Y+1	; 0x01
    2638:	9a 81       	ldd	r25, Y+2	; 0x02
    263a:	2d e8       	ldi	r18, 0x8D	; 141
    263c:	33 e0       	ldi	r19, 0x03	; 3
    263e:	b9 01       	movw	r22, r18
    2640:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <sched_load_balancer>
    2644:	e9 81       	ldd	r30, Y+1	; 0x01
    2646:	fa 81       	ldd	r31, Y+2	; 0x02
    2648:	81 a3       	std	Z+33, r24	; 0x21
    stat_inc( proc, (stat_t *)kernel.stat+proc->core_id );
    264a:	e9 81       	ldd	r30, Y+1	; 0x01
    264c:	fa 81       	ldd	r31, Y+2	; 0x02
    264e:	81 a1       	ldd	r24, Z+33	; 0x21
    2650:	88 2f       	mov	r24, r24
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	9c 01       	movw	r18, r24
    2656:	23 57       	subi	r18, 0x73	; 115
    2658:	3c 4f       	sbci	r19, 0xFC	; 252
    265a:	89 81       	ldd	r24, Y+1	; 0x01
    265c:	9a 81       	ldd	r25, Y+2	; 0x02
    265e:	b9 01       	movw	r22, r18
    2660:	0e 94 6f 01 	call	0x2de	; 0x2de <stat_inc>
    spin_unlock( &kernel.stat_lock );
    2664:	8f e8       	ldi	r24, 0x8F	; 143
    2666:	93 e0       	ldi	r25, 0x03	; 3
    2668:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
#endif
    _proc_run_( proc );
    266c:	89 81       	ldd	r24, Y+1	; 0x01
    266e:	9a 81       	ldd	r25, Y+2	; 0x02
    2670:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <_proc_run_>

    RESCHED_PROC( proc );
    2674:	e9 81       	ldd	r30, Y+1	; 0x01
    2676:	fa 81       	ldd	r31, Y+2	; 0x02
    2678:	81 a1       	ldd	r24, Z+33	; 0x21
    267a:	0e 94 b7 01 	call	0x36e	; 0x36e <resched>
}
    267e:	0f 90       	pop	r0
    2680:	0f 90       	pop	r0
    2682:	cf 91       	pop	r28
    2684:	df 91       	pop	r29
    2686:	08 95       	ret

00002688 <proc_run_isr>:
// Функция общего пользования - запуск процесса из обработчика прерывания, прерывания должны быть запрещены во время запуска
bool_t proc_run_isr(proc_t * proc)
{
    2688:	df 93       	push	r29
    268a:	cf 93       	push	r28
    268c:	00 d0       	rcall	.+0      	; 0x268e <proc_run_isr+0x6>
    268e:	0f 92       	push	r0
    2690:	cd b7       	in	r28, 0x3d	; 61
    2692:	de b7       	in	r29, 0x3e	; 62
    2694:	9b 83       	std	Y+3, r25	; 0x03
    2696:	8a 83       	std	Y+2, r24	; 0x02
    bool_t ret = (bool_t)1;
    2698:	81 e0       	ldi	r24, 0x01	; 1
    269a:	89 83       	std	Y+1, r24	; 0x01

    SPIN_LOCK( proc );
    269c:	8a 81       	ldd	r24, Y+2	; 0x02
    269e:	9b 81       	ldd	r25, Y+3	; 0x03
    26a0:	83 96       	adiw	r24, 0x23	; 35
    26a2:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>

    if( proc->flags & (PROC_FLG_RUN|PROC_FLG_QUEUE|PROC_FLG_WAIT|PROC_FLG_IPCW|PROC_FLG_END|PROC_FLG_DEAD|PROC_FLG_WD_STOP) )
    26a6:	ea 81       	ldd	r30, Y+2	; 0x02
    26a8:	fb 81       	ldd	r31, Y+3	; 0x03
    26aa:	87 81       	ldd	r24, Z+7	; 0x07
    26ac:	90 85       	ldd	r25, Z+8	; 0x08
    26ae:	82 77       	andi	r24, 0x72	; 114
    26b0:	97 70       	andi	r25, 0x07	; 7
    26b2:	00 97       	sbiw	r24, 0x00	; 0
    26b4:	11 f0       	breq	.+4      	; 0x26ba <proc_run_isr+0x32>
    {
        ret = (bool_t)0;
    26b6:	19 82       	std	Y+1, r1	; 0x01
    26b8:	04 c0       	rjmp	.+8      	; 0x26c2 <proc_run_isr+0x3a>
        goto end;
    }
    _proc_run( proc );
    26ba:	8a 81       	ldd	r24, Y+2	; 0x02
    26bc:	9b 81       	ldd	r25, Y+3	; 0x03
    26be:	0e 94 07 13 	call	0x260e	; 0x260e <_proc_run>
end:

    SPIN_UNLOCK( proc );
    26c2:	8a 81       	ldd	r24, Y+2	; 0x02
    26c4:	9b 81       	ldd	r25, Y+3	; 0x03
    26c6:	83 96       	adiw	r24, 0x23	; 35
    26c8:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>

    return ret;
    26cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    26ce:	0f 90       	pop	r0
    26d0:	0f 90       	pop	r0
    26d2:	0f 90       	pop	r0
    26d4:	cf 91       	pop	r28
    26d6:	df 91       	pop	r29
    26d8:	08 95       	ret

000026da <proc_restart_isr>:
// Перезепуск процесса из обработчика прерываний, прерывания должны быть запрещены
bool_t proc_restart_isr(proc_t * proc)
{
    26da:	df 93       	push	r29
    26dc:	cf 93       	push	r28
    26de:	00 d0       	rcall	.+0      	; 0x26e0 <proc_restart_isr+0x6>
    26e0:	00 d0       	rcall	.+0      	; 0x26e2 <proc_restart_isr+0x8>
    26e2:	0f 92       	push	r0
    26e4:	cd b7       	in	r28, 0x3d	; 61
    26e6:	de b7       	in	r29, 0x3e	; 62
    26e8:	9b 83       	std	Y+3, r25	; 0x03
    26ea:	8a 83       	std	Y+2, r24	; 0x02
    bool_t ret = (bool_t)1;
    26ec:	81 e0       	ldi	r24, 0x01	; 1
    26ee:	89 83       	std	Y+1, r24	; 0x01

    SPIN_LOCK( proc );
    26f0:	8a 81       	ldd	r24, Y+2	; 0x02
    26f2:	9b 81       	ldd	r25, Y+3	; 0x03
    26f4:	83 96       	adiw	r24, 0x23	; 35
    26f6:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>

    if( proc->flags & (PROC_FLG_RUN|PROC_FLG_MUTEX|PROC_FLG_SEM|PROC_FLG_QUEUE|PROC_FLG_WAIT|PROC_FLG_IPCW|PROC_FLG_DEAD) )
    26fa:	ea 81       	ldd	r30, Y+2	; 0x02
    26fc:	fb 81       	ldd	r31, Y+3	; 0x03
    26fe:	87 81       	ldd	r24, Z+7	; 0x07
    2700:	90 85       	ldd	r25, Z+8	; 0x08
    2702:	8e 77       	andi	r24, 0x7E	; 126
    2704:	94 70       	andi	r25, 0x04	; 4
    2706:	00 97       	sbiw	r24, 0x00	; 0
    2708:	11 f0       	breq	.+4      	; 0x270e <proc_restart_isr+0x34>
    {
        ret = (bool_t)0;
    270a:	19 82       	std	Y+1, r1	; 0x01
    270c:	3b c0       	rjmp	.+118    	; 0x2784 <proc_restart_isr+0xaa>
        goto end;
    }
    proc->flags = ( proc->flags & PROC_FLG_RT )?PROC_FLG_RT:(flag_t)0;
    270e:	ea 81       	ldd	r30, Y+2	; 0x02
    2710:	fb 81       	ldd	r31, Y+3	; 0x03
    2712:	87 81       	ldd	r24, Z+7	; 0x07
    2714:	90 85       	ldd	r25, Z+8	; 0x08
    2716:	81 70       	andi	r24, 0x01	; 1
    2718:	90 70       	andi	r25, 0x00	; 0
    271a:	88 23       	and	r24, r24
    271c:	29 f0       	breq	.+10     	; 0x2728 <proc_restart_isr+0x4e>
    271e:	81 e0       	ldi	r24, 0x01	; 1
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	9d 83       	std	Y+5, r25	; 0x05
    2724:	8c 83       	std	Y+4, r24	; 0x04
    2726:	02 c0       	rjmp	.+4      	; 0x272c <proc_restart_isr+0x52>
    2728:	1d 82       	std	Y+5, r1	; 0x05
    272a:	1c 82       	std	Y+4, r1	; 0x04
    272c:	ea 81       	ldd	r30, Y+2	; 0x02
    272e:	fb 81       	ldd	r31, Y+3	; 0x03
    2730:	8c 81       	ldd	r24, Y+4	; 0x04
    2732:	9d 81       	ldd	r25, Y+5	; 0x05
    2734:	90 87       	std	Z+8, r25	; 0x08
    2736:	87 83       	std	Z+7, r24	; 0x07

    PROC_LRES_INIT( proc );
    2738:	8a 81       	ldd	r24, Y+2	; 0x02
    273a:	9b 81       	ldd	r25, Y+3	; 0x03
    273c:	0a 96       	adiw	r24, 0x0a	; 10
    273e:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <pcounter_init>

    proc->timer = proc->time_quant;
    2742:	ea 81       	ldd	r30, Y+2	; 0x02
    2744:	fb 81       	ldd	r31, Y+3	; 0x03
    2746:	83 8d       	ldd	r24, Z+27	; 0x1b
    2748:	94 8d       	ldd	r25, Z+28	; 0x1c
    274a:	ea 81       	ldd	r30, Y+2	; 0x02
    274c:	fb 81       	ldd	r31, Y+3	; 0x03
    274e:	96 8f       	std	Z+30, r25	; 0x1e
    2750:	85 8f       	std	Z+29, r24	; 0x1d

    if( proc->sstart )proc->spointer = proc_stack_init( proc->sstart, (code_t)proc_run_wrapper, (void *)proc );
    2752:	ea 81       	ldd	r30, Y+2	; 0x02
    2754:	fb 81       	ldd	r31, Y+3	; 0x03
    2756:	84 a5       	ldd	r24, Z+44	; 0x2c
    2758:	95 a5       	ldd	r25, Z+45	; 0x2d
    275a:	00 97       	sbiw	r24, 0x00	; 0
    275c:	79 f0       	breq	.+30     	; 0x277c <proc_restart_isr+0xa2>
    275e:	ea 81       	ldd	r30, Y+2	; 0x02
    2760:	fb 81       	ldd	r31, Y+3	; 0x03
    2762:	84 a5       	ldd	r24, Z+44	; 0x2c
    2764:	95 a5       	ldd	r25, Z+45	; 0x2d
    2766:	2a ee       	ldi	r18, 0xEA	; 234
    2768:	3d e1       	ldi	r19, 0x1D	; 29
    276a:	4a 81       	ldd	r20, Y+2	; 0x02
    276c:	5b 81       	ldd	r21, Y+3	; 0x03
    276e:	b9 01       	movw	r22, r18
    2770:	0e 94 6f 0a 	call	0x14de	; 0x14de <proc_stack_init>
    2774:	ea 81       	ldd	r30, Y+2	; 0x02
    2776:	fb 81       	ldd	r31, Y+3	; 0x03
    2778:	97 a7       	std	Z+47, r25	; 0x2f
    277a:	86 a7       	std	Z+46, r24	; 0x2e
    _proc_run( proc );
    277c:	8a 81       	ldd	r24, Y+2	; 0x02
    277e:	9b 81       	ldd	r25, Y+3	; 0x03
    2780:	0e 94 07 13 	call	0x260e	; 0x260e <_proc_run>
end:

    SPIN_UNLOCK( proc );
    2784:	8a 81       	ldd	r24, Y+2	; 0x02
    2786:	9b 81       	ldd	r25, Y+3	; 0x03
    2788:	83 96       	adiw	r24, 0x23	; 35
    278a:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>

    return ret;
    278e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2790:	0f 90       	pop	r0
    2792:	0f 90       	pop	r0
    2794:	0f 90       	pop	r0
    2796:	0f 90       	pop	r0
    2798:	0f 90       	pop	r0
    279a:	cf 91       	pop	r28
    279c:	df 91       	pop	r29
    279e:	08 95       	ret

000027a0 <_proc_stop_>:
// Функция для внутреннего использования, останов процесса

#ifdef CONFIG_MP
void _proc_stop_(proc_t * proc)
{
    27a0:	df 93       	push	r29
    27a2:	cf 93       	push	r28
    27a4:	00 d0       	rcall	.+0      	; 0x27a6 <_proc_stop_+0x6>
    27a6:	00 d0       	rcall	.+0      	; 0x27a8 <_proc_stop_+0x8>
    27a8:	cd b7       	in	r28, 0x3d	; 61
    27aa:	de b7       	in	r29, 0x3e	; 62
    27ac:	9c 83       	std	Y+4, r25	; 0x04
    27ae:	8b 83       	std	Y+3, r24	; 0x03
    spin_lock( &kernel.stat_lock );
    27b0:	8f e8       	ldi	r24, 0x8F	; 143
    27b2:	93 e0       	ldi	r25, 0x03	; 3
    27b4:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    stat_dec( proc, (stat_t *)kernel.stat + proc->core_id );
    27b8:	eb 81       	ldd	r30, Y+3	; 0x03
    27ba:	fc 81       	ldd	r31, Y+4	; 0x04
    27bc:	81 a1       	ldd	r24, Z+33	; 0x21
    27be:	88 2f       	mov	r24, r24
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	9c 01       	movw	r18, r24
    27c4:	23 57       	subi	r18, 0x73	; 115
    27c6:	3c 4f       	sbci	r19, 0xFC	; 252
    27c8:	8b 81       	ldd	r24, Y+3	; 0x03
    27ca:	9c 81       	ldd	r25, Y+4	; 0x04
    27cc:	b9 01       	movw	r22, r18
    27ce:	0e 94 57 01 	call	0x2ae	; 0x2ae <stat_dec>
    spin_unlock( &kernel.stat_lock );
    27d2:	8f e8       	ldi	r24, 0x8F	; 143
    27d4:	93 e0       	ldi	r25, 0x03	; 3
    27d6:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
    {
        lock_t * xlist_lock;
        xlist_lock = &((sched_t *)kernel.sched + proc->core_id)->lock;
    27da:	eb 81       	ldd	r30, Y+3	; 0x03
    27dc:	fc 81       	ldd	r31, Y+4	; 0x04
    27de:	81 a1       	ldd	r24, Z+33	; 0x21
    27e0:	28 2f       	mov	r18, r24
    27e2:	30 e0       	ldi	r19, 0x00	; 0
    27e4:	8b e2       	ldi	r24, 0x2B	; 43
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	ac 01       	movw	r20, r24
    27ea:	24 9f       	mul	r18, r20
    27ec:	c0 01       	movw	r24, r0
    27ee:	25 9f       	mul	r18, r21
    27f0:	90 0d       	add	r25, r0
    27f2:	34 9f       	mul	r19, r20
    27f4:	90 0d       	add	r25, r0
    27f6:	11 24       	eor	r1, r1
    27f8:	89 52       	subi	r24, 0x29	; 41
    27fa:	9d 4f       	sbci	r25, 0xFD	; 253
    27fc:	8a 96       	adiw	r24, 0x2a	; 42
    27fe:	9a 83       	std	Y+2, r25	; 0x02
    2800:	89 83       	std	Y+1, r24	; 0x01
        spin_lock( xlist_lock );
    2802:	89 81       	ldd	r24, Y+1	; 0x01
    2804:	9a 81       	ldd	r25, Y+2	; 0x02
    2806:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
        pitem_cut( (pitem_t *)proc );
    280a:	8b 81       	ldd	r24, Y+3	; 0x03
    280c:	9c 81       	ldd	r25, Y+4	; 0x04
    280e:	0e 94 82 11 	call	0x2304	; 0x2304 <pitem_cut>
        spin_unlock( xlist_lock );
    2812:	89 81       	ldd	r24, Y+1	; 0x01
    2814:	9a 81       	ldd	r25, Y+2	; 0x02
    2816:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
    }
}
    281a:	0f 90       	pop	r0
    281c:	0f 90       	pop	r0
    281e:	0f 90       	pop	r0
    2820:	0f 90       	pop	r0
    2822:	cf 91       	pop	r28
    2824:	df 91       	pop	r29
    2826:	08 95       	ret

00002828 <_proc_stop>:
#endif // CONFIG_MP

void _proc_stop(proc_t * proc)
{
    2828:	df 93       	push	r29
    282a:	cf 93       	push	r28
    282c:	00 d0       	rcall	.+0      	; 0x282e <_proc_stop+0x6>
    282e:	cd b7       	in	r28, 0x3d	; 61
    2830:	de b7       	in	r29, 0x3e	; 62
    2832:	9a 83       	std	Y+2, r25	; 0x02
    2834:	89 83       	std	Y+1, r24	; 0x01
    proc->flags &= ~PROC_FLG_RUN;
    2836:	e9 81       	ldd	r30, Y+1	; 0x01
    2838:	fa 81       	ldd	r31, Y+2	; 0x02
    283a:	87 81       	ldd	r24, Z+7	; 0x07
    283c:	90 85       	ldd	r25, Z+8	; 0x08
    283e:	8d 7f       	andi	r24, 0xFD	; 253
    2840:	e9 81       	ldd	r30, Y+1	; 0x01
    2842:	fa 81       	ldd	r31, Y+2	; 0x02
    2844:	90 87       	std	Z+8, r25	; 0x08
    2846:	87 83       	std	Z+7, r24	; 0x07
    _proc_stop_( proc );
    2848:	89 81       	ldd	r24, Y+1	; 0x01
    284a:	9a 81       	ldd	r25, Y+2	; 0x02
    284c:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <_proc_stop_>
    RESCHED_PROC( proc );
    2850:	e9 81       	ldd	r30, Y+1	; 0x01
    2852:	fa 81       	ldd	r31, Y+2	; 0x02
    2854:	81 a1       	ldd	r24, Z+33	; 0x21
    2856:	0e 94 b7 01 	call	0x36e	; 0x36e <resched>
}
    285a:	0f 90       	pop	r0
    285c:	0f 90       	pop	r0
    285e:	cf 91       	pop	r28
    2860:	df 91       	pop	r29
    2862:	08 95       	ret

00002864 <proc_stop_isr>:
// Останов процесса из обработчика прерываний, прерывания должны быть запрещены
bool_t proc_stop_isr(proc_t * proc)
{
    2864:	df 93       	push	r29
    2866:	cf 93       	push	r28
    2868:	00 d0       	rcall	.+0      	; 0x286a <proc_stop_isr+0x6>
    286a:	0f 92       	push	r0
    286c:	cd b7       	in	r28, 0x3d	; 61
    286e:	de b7       	in	r29, 0x3e	; 62
    2870:	9b 83       	std	Y+3, r25	; 0x03
    2872:	8a 83       	std	Y+2, r24	; 0x02
    bool_t ret = (bool_t)0;
    2874:	19 82       	std	Y+1, r1	; 0x01

    SPIN_LOCK( proc );
    2876:	8a 81       	ldd	r24, Y+2	; 0x02
    2878:	9b 81       	ldd	r25, Y+3	; 0x03
    287a:	83 96       	adiw	r24, 0x23	; 35
    287c:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    //Проверка флагов
    //В случчае PROC_FLG_WAIT будем обрабатывать PROC_FLG_PRE_END на выходе из sig_wait.
    //В случае PROC_FLG_MUTEX или PROC_FLG_SEM будем обрабатывать PROC_FLG_PRE_STOP при освобождении общего ресурса.
    //В случае ожидания IPC флаг будем обрабатывать при попытке передать данные или указатель целевому процессу.
    if( proc->flags & (PROC_FLG_MUTEX|PROC_FLG_SEM|PROC_FLG_QUEUE|PROC_FLG_WAIT|PROC_FLG_IPCW) )proc->flags |= PROC_FLG_PRE_STOP;
    2880:	ea 81       	ldd	r30, Y+2	; 0x02
    2882:	fb 81       	ldd	r31, Y+3	; 0x03
    2884:	87 81       	ldd	r24, Z+7	; 0x07
    2886:	90 85       	ldd	r25, Z+8	; 0x08
    2888:	8c 77       	andi	r24, 0x7C	; 124
    288a:	90 70       	andi	r25, 0x00	; 0
    288c:	00 97       	sbiw	r24, 0x00	; 0
    288e:	51 f0       	breq	.+20     	; 0x28a4 <proc_stop_isr+0x40>
    2890:	ea 81       	ldd	r30, Y+2	; 0x02
    2892:	fb 81       	ldd	r31, Y+3	; 0x03
    2894:	87 81       	ldd	r24, Z+7	; 0x07
    2896:	90 85       	ldd	r25, Z+8	; 0x08
    2898:	80 68       	ori	r24, 0x80	; 128
    289a:	ea 81       	ldd	r30, Y+2	; 0x02
    289c:	fb 81       	ldd	r31, Y+3	; 0x03
    289e:	90 87       	std	Z+8, r25	; 0x08
    28a0:	87 83       	std	Z+7, r24	; 0x07
    28a2:	0e c0       	rjmp	.+28     	; 0x28c0 <proc_stop_isr+0x5c>
    else if( proc->flags & PROC_FLG_RUN )
    28a4:	ea 81       	ldd	r30, Y+2	; 0x02
    28a6:	fb 81       	ldd	r31, Y+3	; 0x03
    28a8:	87 81       	ldd	r24, Z+7	; 0x07
    28aa:	90 85       	ldd	r25, Z+8	; 0x08
    28ac:	82 70       	andi	r24, 0x02	; 2
    28ae:	90 70       	andi	r25, 0x00	; 0
    28b0:	00 97       	sbiw	r24, 0x00	; 0
    28b2:	31 f0       	breq	.+12     	; 0x28c0 <proc_stop_isr+0x5c>
    {
        _proc_stop( proc );
    28b4:	8a 81       	ldd	r24, Y+2	; 0x02
    28b6:	9b 81       	ldd	r25, Y+3	; 0x03
    28b8:	0e 94 14 14 	call	0x2828	; 0x2828 <_proc_stop>
        ret = (bool_t)1;
    28bc:	81 e0       	ldi	r24, 0x01	; 1
    28be:	89 83       	std	Y+1, r24	; 0x01
    }

    SPIN_UNLOCK( proc );
    28c0:	8a 81       	ldd	r24, Y+2	; 0x02
    28c2:	9b 81       	ldd	r25, Y+3	; 0x03
    28c4:	83 96       	adiw	r24, 0x23	; 35
    28c6:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>

    return ret;
    28ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    28cc:	0f 90       	pop	r0
    28ce:	0f 90       	pop	r0
    28d0:	0f 90       	pop	r0
    28d2:	cf 91       	pop	r28
    28d4:	df 91       	pop	r29
    28d6:	08 95       	ret

000028d8 <_proc_flag_stop>:
// Обработка флага останова процесса, для использования с семафорами, мьютексами и сигналами.
void _proc_flag_stop( flag_t mask )
{
    28d8:	df 93       	push	r29
    28da:	cf 93       	push	r28
    28dc:	00 d0       	rcall	.+0      	; 0x28de <_proc_flag_stop+0x6>
    28de:	00 d0       	rcall	.+0      	; 0x28e0 <_proc_flag_stop+0x8>
    28e0:	cd b7       	in	r28, 0x3d	; 61
    28e2:	de b7       	in	r29, 0x3e	; 62
    28e4:	9c 83       	std	Y+4, r25	; 0x04
    28e6:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc;
    proc = current_proc();
    28e8:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <current_proc>
    28ec:	9a 83       	std	Y+2, r25	; 0x02
    28ee:	89 83       	std	Y+1, r24	; 0x01

    SPIN_LOCK( proc );
    28f0:	89 81       	ldd	r24, Y+1	; 0x01
    28f2:	9a 81       	ldd	r25, Y+2	; 0x02
    28f4:	83 96       	adiw	r24, 0x23	; 35
    28f6:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>

    proc->flags &= ~mask;
    28fa:	e9 81       	ldd	r30, Y+1	; 0x01
    28fc:	fa 81       	ldd	r31, Y+2	; 0x02
    28fe:	27 81       	ldd	r18, Z+7	; 0x07
    2900:	30 85       	ldd	r19, Z+8	; 0x08
    2902:	8b 81       	ldd	r24, Y+3	; 0x03
    2904:	9c 81       	ldd	r25, Y+4	; 0x04
    2906:	80 95       	com	r24
    2908:	90 95       	com	r25
    290a:	82 23       	and	r24, r18
    290c:	93 23       	and	r25, r19
    290e:	e9 81       	ldd	r30, Y+1	; 0x01
    2910:	fa 81       	ldd	r31, Y+2	; 0x02
    2912:	90 87       	std	Z+8, r25	; 0x08
    2914:	87 83       	std	Z+7, r24	; 0x07
    if(  PROC_PRE_STOP_TEST(proc)  )
    2916:	e9 81       	ldd	r30, Y+1	; 0x01
    2918:	fa 81       	ldd	r31, Y+2	; 0x02
    291a:	87 81       	ldd	r24, Z+7	; 0x07
    291c:	90 85       	ldd	r25, Z+8	; 0x08
    291e:	80 78       	andi	r24, 0x80	; 128
    2920:	90 70       	andi	r25, 0x00	; 0
    2922:	00 97       	sbiw	r24, 0x00	; 0
    2924:	a9 f0       	breq	.+42     	; 0x2950 <_proc_flag_stop+0x78>
    2926:	e9 81       	ldd	r30, Y+1	; 0x01
    2928:	fa 81       	ldd	r31, Y+2	; 0x02
    292a:	87 81       	ldd	r24, Z+7	; 0x07
    292c:	90 85       	ldd	r25, Z+8	; 0x08
    292e:	8c 70       	andi	r24, 0x0C	; 12
    2930:	90 70       	andi	r25, 0x00	; 0
    2932:	00 97       	sbiw	r24, 0x00	; 0
    2934:	69 f4       	brne	.+26     	; 0x2950 <_proc_flag_stop+0x78>
        /*
        Если был запрошен останов целевого процесса,
        и целевой процесс не удерживает общие ресурсы,
        то мы остановим процесс
        */
        proc->flags &= ~PROC_FLG_PRE_STOP;
    2936:	e9 81       	ldd	r30, Y+1	; 0x01
    2938:	fa 81       	ldd	r31, Y+2	; 0x02
    293a:	87 81       	ldd	r24, Z+7	; 0x07
    293c:	90 85       	ldd	r25, Z+8	; 0x08
    293e:	8f 77       	andi	r24, 0x7F	; 127
    2940:	e9 81       	ldd	r30, Y+1	; 0x01
    2942:	fa 81       	ldd	r31, Y+2	; 0x02
    2944:	90 87       	std	Z+8, r25	; 0x08
    2946:	87 83       	std	Z+7, r24	; 0x07
        _proc_stop( proc );
    2948:	89 81       	ldd	r24, Y+1	; 0x01
    294a:	9a 81       	ldd	r25, Y+2	; 0x02
    294c:	0e 94 14 14 	call	0x2828	; 0x2828 <_proc_stop>
    }

    SPIN_UNLOCK( proc );
    2950:	89 81       	ldd	r24, Y+1	; 0x01
    2952:	9a 81       	ldd	r25, Y+2	; 0x02
    2954:	83 96       	adiw	r24, 0x23	; 35
    2956:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>

}
    295a:	0f 90       	pop	r0
    295c:	0f 90       	pop	r0
    295e:	0f 90       	pop	r0
    2960:	0f 90       	pop	r0
    2962:	cf 91       	pop	r28
    2964:	df 91       	pop	r29
    2966:	08 95       	ret

00002968 <_proc_terminate>:

void _proc_terminate( proc_t * proc )
{
    2968:	df 93       	push	r29
    296a:	cf 93       	push	r28
    296c:	00 d0       	rcall	.+0      	; 0x296e <_proc_terminate+0x6>
    296e:	cd b7       	in	r28, 0x3d	; 61
    2970:	de b7       	in	r29, 0x3e	; 62
    2972:	9a 83       	std	Y+2, r25	; 0x02
    2974:	89 83       	std	Y+1, r24	; 0x01

    SPIN_LOCK( proc );
    2976:	89 81       	ldd	r24, Y+1	; 0x01
    2978:	9a 81       	ldd	r25, Y+2	; 0x02
    297a:	83 96       	adiw	r24, 0x23	; 35
    297c:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>

    // Обрабатываем флаги
    // Нельзя выходить из pmain не освободив все захваченные ресурсы, за это процесс будет "убит"!
    if( proc->flags & PROC_FLG_LOCK_MASK ) proc->flags |= PROC_FLG_DEAD;
    2980:	e9 81       	ldd	r30, Y+1	; 0x01
    2982:	fa 81       	ldd	r31, Y+2	; 0x02
    2984:	87 81       	ldd	r24, Z+7	; 0x07
    2986:	90 85       	ldd	r25, Z+8	; 0x08
    2988:	8c 70       	andi	r24, 0x0C	; 12
    298a:	90 70       	andi	r25, 0x00	; 0
    298c:	00 97       	sbiw	r24, 0x00	; 0
    298e:	51 f0       	breq	.+20     	; 0x29a4 <_proc_terminate+0x3c>
    2990:	e9 81       	ldd	r30, Y+1	; 0x01
    2992:	fa 81       	ldd	r31, Y+2	; 0x02
    2994:	87 81       	ldd	r24, Z+7	; 0x07
    2996:	90 85       	ldd	r25, Z+8	; 0x08
    2998:	94 60       	ori	r25, 0x04	; 4
    299a:	e9 81       	ldd	r30, Y+1	; 0x01
    299c:	fa 81       	ldd	r31, Y+2	; 0x02
    299e:	90 87       	std	Z+8, r25	; 0x08
    29a0:	87 83       	std	Z+7, r24	; 0x07
    29a2:	09 c0       	rjmp	.+18     	; 0x29b6 <_proc_terminate+0x4e>
    // В противном случае - просто завершаем процесс
    else proc->flags |= PROC_FLG_END;
    29a4:	e9 81       	ldd	r30, Y+1	; 0x01
    29a6:	fa 81       	ldd	r31, Y+2	; 0x02
    29a8:	87 81       	ldd	r24, Z+7	; 0x07
    29aa:	90 85       	ldd	r25, Z+8	; 0x08
    29ac:	91 60       	ori	r25, 0x01	; 1
    29ae:	e9 81       	ldd	r30, Y+1	; 0x01
    29b0:	fa 81       	ldd	r31, Y+2	; 0x02
    29b2:	90 87       	std	Z+8, r25	; 0x08
    29b4:	87 83       	std	Z+7, r24	; 0x07
    proc->flags &= ~PROC_FLG_PRE_STOP_MASK;
    29b6:	e9 81       	ldd	r30, Y+1	; 0x01
    29b8:	fa 81       	ldd	r31, Y+2	; 0x02
    29ba:	87 81       	ldd	r24, Z+7	; 0x07
    29bc:	90 85       	ldd	r25, Z+8	; 0x08
    29be:	8d 77       	andi	r24, 0x7D	; 125
    29c0:	e9 81       	ldd	r30, Y+1	; 0x01
    29c2:	fa 81       	ldd	r31, Y+2	; 0x02
    29c4:	90 87       	std	Z+8, r25	; 0x08
    29c6:	87 83       	std	Z+7, r24	; 0x07
    // Останов
    _proc_stop_( proc );
    29c8:	89 81       	ldd	r24, Y+1	; 0x01
    29ca:	9a 81       	ldd	r25, Y+2	; 0x02
    29cc:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <_proc_stop_>
    // Выполнить перепланировку
    RESCHED_PROC( proc );
    29d0:	e9 81       	ldd	r30, Y+1	; 0x01
    29d2:	fa 81       	ldd	r31, Y+2	; 0x02
    29d4:	81 a1       	ldd	r24, Z+33	; 0x21
    29d6:	0e 94 b7 01 	call	0x36e	; 0x36e <resched>

    SPIN_UNLOCK( proc );
    29da:	89 81       	ldd	r24, Y+1	; 0x01
    29dc:	9a 81       	ldd	r25, Y+2	; 0x02
    29de:	83 96       	adiw	r24, 0x23	; 35
    29e0:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
}
    29e4:	0f 90       	pop	r0
    29e6:	0f 90       	pop	r0
    29e8:	cf 91       	pop	r28
    29ea:	df 91       	pop	r29
    29ec:	08 95       	ret

000029ee <_proc_reset_watchdog>:

void _proc_reset_watchdog( void )
{
    29ee:	df 93       	push	r29
    29f0:	cf 93       	push	r28
    29f2:	00 d0       	rcall	.+0      	; 0x29f4 <_proc_reset_watchdog+0x6>
    29f4:	cd b7       	in	r28, 0x3d	; 61
    29f6:	de b7       	in	r29, 0x3e	; 62
    proc_t * proc;
    proc = current_proc();
    29f8:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <current_proc>
    29fc:	9a 83       	std	Y+2, r25	; 0x02
    29fe:	89 83       	std	Y+1, r24	; 0x01

    SPIN_LOCK( proc );
    2a00:	89 81       	ldd	r24, Y+1	; 0x01
    2a02:	9a 81       	ldd	r25, Y+2	; 0x02
    2a04:	83 96       	adiw	r24, 0x23	; 35
    2a06:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>

    if( proc->flags & PROC_FLG_RT )proc->timer = proc->time_quant;
    2a0a:	e9 81       	ldd	r30, Y+1	; 0x01
    2a0c:	fa 81       	ldd	r31, Y+2	; 0x02
    2a0e:	87 81       	ldd	r24, Z+7	; 0x07
    2a10:	90 85       	ldd	r25, Z+8	; 0x08
    2a12:	81 70       	andi	r24, 0x01	; 1
    2a14:	90 70       	andi	r25, 0x00	; 0
    2a16:	88 23       	and	r24, r24
    2a18:	41 f0       	breq	.+16     	; 0x2a2a <_proc_reset_watchdog+0x3c>
    2a1a:	e9 81       	ldd	r30, Y+1	; 0x01
    2a1c:	fa 81       	ldd	r31, Y+2	; 0x02
    2a1e:	83 8d       	ldd	r24, Z+27	; 0x1b
    2a20:	94 8d       	ldd	r25, Z+28	; 0x1c
    2a22:	e9 81       	ldd	r30, Y+1	; 0x01
    2a24:	fa 81       	ldd	r31, Y+2	; 0x02
    2a26:	96 8f       	std	Z+30, r25	; 0x1e
    2a28:	85 8f       	std	Z+29, r24	; 0x1d

    SPIN_UNLOCK( proc );
    2a2a:	89 81       	ldd	r24, Y+1	; 0x01
    2a2c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a2e:	83 96       	adiw	r24, 0x23	; 35
    2a30:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
}
    2a34:	0f 90       	pop	r0
    2a36:	0f 90       	pop	r0
    2a38:	cf 91       	pop	r28
    2a3a:	df 91       	pop	r29
    2a3c:	08 95       	ret

00002a3e <_proc_lres_inc>:
    proc_t * proc
#ifdef CONFIG_USE_HIGHEST_LOCKER
    ,prio_t prio
#endif
)
{
    2a3e:	df 93       	push	r29
    2a40:	cf 93       	push	r28
    2a42:	00 d0       	rcall	.+0      	; 0x2a44 <_proc_lres_inc+0x6>
    2a44:	0f 92       	push	r0
    2a46:	cd b7       	in	r28, 0x3d	; 61
    2a48:	de b7       	in	r29, 0x3e	; 62
    2a4a:	9a 83       	std	Y+2, r25	; 0x02
    2a4c:	89 83       	std	Y+1, r24	; 0x01
    2a4e:	6b 83       	std	Y+3, r22	; 0x03
#ifdef CONFIG_USE_HIGHEST_LOCKER
    if( proc->lres.index == (index_t)0 )proc->flags |= PROC_FLG_MUTEX;
    2a50:	e9 81       	ldd	r30, Y+1	; 0x01
    2a52:	fa 81       	ldd	r31, Y+2	; 0x02
    2a54:	82 8d       	ldd	r24, Z+26	; 0x1a
    2a56:	88 23       	and	r24, r24
    2a58:	49 f4       	brne	.+18     	; 0x2a6c <_proc_lres_inc+0x2e>
    2a5a:	e9 81       	ldd	r30, Y+1	; 0x01
    2a5c:	fa 81       	ldd	r31, Y+2	; 0x02
    2a5e:	87 81       	ldd	r24, Z+7	; 0x07
    2a60:	90 85       	ldd	r25, Z+8	; 0x08
    2a62:	84 60       	ori	r24, 0x04	; 4
    2a64:	e9 81       	ldd	r30, Y+1	; 0x01
    2a66:	fa 81       	ldd	r31, Y+2	; 0x02
    2a68:	90 87       	std	Z+8, r25	; 0x08
    2a6a:	87 83       	std	Z+7, r24	; 0x07
    pcounter_inc( &proc->lres, prio );
    2a6c:	89 81       	ldd	r24, Y+1	; 0x01
    2a6e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a70:	0a 96       	adiw	r24, 0x0a	; 10
    2a72:	6b 81       	ldd	r22, Y+3	; 0x03
    2a74:	0e 94 24 10 	call	0x2048	; 0x2048 <pcounter_inc>
#else
    if( proc->lres == (count_t)0 )proc->flags |= PROC_FLG_MUTEX;
    proc->lres++;
#endif
}
    2a78:	0f 90       	pop	r0
    2a7a:	0f 90       	pop	r0
    2a7c:	0f 90       	pop	r0
    2a7e:	cf 91       	pop	r28
    2a80:	df 91       	pop	r29
    2a82:	08 95       	ret

00002a84 <_proc_lres_dec>:
    proc_t * proc
#ifdef CONFIG_USE_HIGHEST_LOCKER
    ,prio_t prio
#endif
)
{
    2a84:	df 93       	push	r29
    2a86:	cf 93       	push	r28
    2a88:	00 d0       	rcall	.+0      	; 0x2a8a <_proc_lres_dec+0x6>
    2a8a:	0f 92       	push	r0
    2a8c:	cd b7       	in	r28, 0x3d	; 61
    2a8e:	de b7       	in	r29, 0x3e	; 62
    2a90:	9a 83       	std	Y+2, r25	; 0x02
    2a92:	89 83       	std	Y+1, r24	; 0x01
    2a94:	6b 83       	std	Y+3, r22	; 0x03
#ifdef CONFIG_USE_HIGHEST_LOCKER
    pcounter_dec( &proc->lres, prio );
    2a96:	89 81       	ldd	r24, Y+1	; 0x01
    2a98:	9a 81       	ldd	r25, Y+2	; 0x02
    2a9a:	0a 96       	adiw	r24, 0x0a	; 10
    2a9c:	6b 81       	ldd	r22, Y+3	; 0x03
    2a9e:	0e 94 60 10 	call	0x20c0	; 0x20c0 <pcounter_dec>
    if( proc->lres.index == (index_t)0 )proc->flags &= ~PROC_FLG_MUTEX;
    2aa2:	e9 81       	ldd	r30, Y+1	; 0x01
    2aa4:	fa 81       	ldd	r31, Y+2	; 0x02
    2aa6:	82 8d       	ldd	r24, Z+26	; 0x1a
    2aa8:	88 23       	and	r24, r24
    2aaa:	49 f4       	brne	.+18     	; 0x2abe <_proc_lres_dec+0x3a>
    2aac:	e9 81       	ldd	r30, Y+1	; 0x01
    2aae:	fa 81       	ldd	r31, Y+2	; 0x02
    2ab0:	87 81       	ldd	r24, Z+7	; 0x07
    2ab2:	90 85       	ldd	r25, Z+8	; 0x08
    2ab4:	8b 7f       	andi	r24, 0xFB	; 251
    2ab6:	e9 81       	ldd	r30, Y+1	; 0x01
    2ab8:	fa 81       	ldd	r31, Y+2	; 0x02
    2aba:	90 87       	std	Z+8, r25	; 0x08
    2abc:	87 83       	std	Z+7, r24	; 0x07
#else
    if( proc->lres!= (count_t)0 )proc->lres--;
    if( proc->lres == (count_t)0 )proc->flags &= ~PROC_FLG_MUTEX;
#endif
}
    2abe:	0f 90       	pop	r0
    2ac0:	0f 90       	pop	r0
    2ac2:	0f 90       	pop	r0
    2ac4:	cf 91       	pop	r28
    2ac6:	df 91       	pop	r29
    2ac8:	08 95       	ret

00002aca <_proc_prio_control_stoped>:

#ifdef CONFIG_USE_HIGHEST_LOCKER
// Будет использоваться в mutex-ах и т.п., процесс должен сам вызывать эту функцию, при этом он должен быть вырезан из списка выполняющихся.

void _proc_prio_control_stoped( proc_t * proc )
{
    2aca:	df 93       	push	r29
    2acc:	cf 93       	push	r28
    2ace:	cd b7       	in	r28, 0x3d	; 61
    2ad0:	de b7       	in	r29, 0x3e	; 62
    2ad2:	27 97       	sbiw	r28, 0x07	; 7
    2ad4:	0f b6       	in	r0, 0x3f	; 63
    2ad6:	f8 94       	cli
    2ad8:	de bf       	out	0x3e, r29	; 62
    2ada:	0f be       	out	0x3f, r0	; 63
    2adc:	cd bf       	out	0x3d, r28	; 61
    2ade:	9b 83       	std	Y+3, r25	; 0x03
    2ae0:	8a 83       	std	Y+2, r24	; 0x02
    if(proc->lres.index != (index_t)0)
    2ae2:	ea 81       	ldd	r30, Y+2	; 0x02
    2ae4:	fb 81       	ldd	r31, Y+3	; 0x03
    2ae6:	82 8d       	ldd	r24, Z+26	; 0x1a
    2ae8:	88 23       	and	r24, r24
    2aea:	d9 f0       	breq	.+54     	; 0x2b22 <_proc_prio_control_stoped+0x58>
    {

        prio_t locker_prio;
        locker_prio = index_search( proc->lres.index );
    2aec:	ea 81       	ldd	r30, Y+2	; 0x02
    2aee:	fb 81       	ldd	r31, Y+3	; 0x03
    2af0:	82 8d       	ldd	r24, Z+26	; 0x1a
    2af2:	0e 94 66 0c 	call	0x18cc	; 0x18cc <index_search>
    2af6:	89 83       	std	Y+1, r24	; 0x01
        ((pitem_t *)proc)->prio = ( locker_prio < proc->base_prio )?locker_prio:proc->base_prio;
    2af8:	8a 81       	ldd	r24, Y+2	; 0x02
    2afa:	9b 81       	ldd	r25, Y+3	; 0x03
    2afc:	9e 83       	std	Y+6, r25	; 0x06
    2afe:	8d 83       	std	Y+5, r24	; 0x05
    2b00:	ea 81       	ldd	r30, Y+2	; 0x02
    2b02:	fb 81       	ldd	r31, Y+3	; 0x03
    2b04:	81 85       	ldd	r24, Z+9	; 0x09
    2b06:	99 81       	ldd	r25, Y+1	; 0x01
    2b08:	9f 83       	std	Y+7, r25	; 0x07
    2b0a:	8c 83       	std	Y+4, r24	; 0x04
    2b0c:	ec 81       	ldd	r30, Y+4	; 0x04
    2b0e:	ff 81       	ldd	r31, Y+7	; 0x07
    2b10:	fe 17       	cp	r31, r30
    2b12:	10 f4       	brcc	.+4      	; 0x2b18 <_proc_prio_control_stoped+0x4e>
    2b14:	8f 81       	ldd	r24, Y+7	; 0x07
    2b16:	8c 83       	std	Y+4, r24	; 0x04
    2b18:	8c 81       	ldd	r24, Y+4	; 0x04
    2b1a:	ed 81       	ldd	r30, Y+5	; 0x05
    2b1c:	fe 81       	ldd	r31, Y+6	; 0x06
    2b1e:	86 83       	std	Z+6, r24	; 0x06
    2b20:	08 c0       	rjmp	.+16     	; 0x2b32 <_proc_prio_control_stoped+0x68>
    }
    else
    {
        ((pitem_t *)proc)->prio = proc->base_prio;
    2b22:	ea 81       	ldd	r30, Y+2	; 0x02
    2b24:	fb 81       	ldd	r31, Y+3	; 0x03
    2b26:	aa 81       	ldd	r26, Y+2	; 0x02
    2b28:	bb 81       	ldd	r27, Y+3	; 0x03
    2b2a:	19 96       	adiw	r26, 0x09	; 9
    2b2c:	8c 91       	ld	r24, X
    2b2e:	19 97       	sbiw	r26, 0x09	; 9
    2b30:	86 83       	std	Z+6, r24	; 0x06
    }
}
    2b32:	27 96       	adiw	r28, 0x07	; 7
    2b34:	0f b6       	in	r0, 0x3f	; 63
    2b36:	f8 94       	cli
    2b38:	de bf       	out	0x3e, r29	; 62
    2b3a:	0f be       	out	0x3f, r0	; 63
    2b3c:	cd bf       	out	0x3d, r28	; 61
    2b3e:	cf 91       	pop	r28
    2b40:	df 91       	pop	r29
    2b42:	08 95       	ret

00002b44 <_proc_prio_control_running>:

void _proc_prio_control_running( proc_t * proc )
{
    2b44:	df 93       	push	r29
    2b46:	cf 93       	push	r28
    2b48:	00 d0       	rcall	.+0      	; 0x2b4a <_proc_prio_control_running+0x6>
    2b4a:	00 d0       	rcall	.+0      	; 0x2b4c <_proc_prio_control_running+0x8>
    2b4c:	00 d0       	rcall	.+0      	; 0x2b4e <_proc_prio_control_running+0xa>
    2b4e:	cd b7       	in	r28, 0x3d	; 61
    2b50:	de b7       	in	r29, 0x3e	; 62
    2b52:	9c 83       	std	Y+4, r25	; 0x04
    2b54:	8b 83       	std	Y+3, r24	; 0x03
    prio_t new_prio;
    if(proc->lres.index != (index_t)0)
    2b56:	eb 81       	ldd	r30, Y+3	; 0x03
    2b58:	fc 81       	ldd	r31, Y+4	; 0x04
    2b5a:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b5c:	88 23       	and	r24, r24
    2b5e:	a9 f0       	breq	.+42     	; 0x2b8a <_proc_prio_control_running+0x46>
    {
        prio_t locker_prio;
        locker_prio = index_search( proc->lres.index );
    2b60:	eb 81       	ldd	r30, Y+3	; 0x03
    2b62:	fc 81       	ldd	r31, Y+4	; 0x04
    2b64:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b66:	0e 94 66 0c 	call	0x18cc	; 0x18cc <index_search>
    2b6a:	89 83       	std	Y+1, r24	; 0x01
        new_prio = ( locker_prio < proc->base_prio )?locker_prio:proc->base_prio;
    2b6c:	eb 81       	ldd	r30, Y+3	; 0x03
    2b6e:	fc 81       	ldd	r31, Y+4	; 0x04
    2b70:	81 85       	ldd	r24, Z+9	; 0x09
    2b72:	99 81       	ldd	r25, Y+1	; 0x01
    2b74:	9e 83       	std	Y+6, r25	; 0x06
    2b76:	8d 83       	std	Y+5, r24	; 0x05
    2b78:	8d 81       	ldd	r24, Y+5	; 0x05
    2b7a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b7c:	98 17       	cp	r25, r24
    2b7e:	10 f4       	brcc	.+4      	; 0x2b84 <_proc_prio_control_running+0x40>
    2b80:	8e 81       	ldd	r24, Y+6	; 0x06
    2b82:	8d 83       	std	Y+5, r24	; 0x05
    2b84:	9d 81       	ldd	r25, Y+5	; 0x05
    2b86:	9a 83       	std	Y+2, r25	; 0x02
    2b88:	04 c0       	rjmp	.+8      	; 0x2b92 <_proc_prio_control_running+0x4e>
    }
    else
    {
        new_prio = proc->base_prio;
    2b8a:	eb 81       	ldd	r30, Y+3	; 0x03
    2b8c:	fc 81       	ldd	r31, Y+4	; 0x04
    2b8e:	81 85       	ldd	r24, Z+9	; 0x09
    2b90:	8a 83       	std	Y+2, r24	; 0x02
    }
    if(((pitem_t *)proc)->prio != new_prio)
    2b92:	eb 81       	ldd	r30, Y+3	; 0x03
    2b94:	fc 81       	ldd	r31, Y+4	; 0x04
    2b96:	96 81       	ldd	r25, Z+6	; 0x06
    2b98:	8a 81       	ldd	r24, Y+2	; 0x02
    2b9a:	98 17       	cp	r25, r24
    2b9c:	31 f1       	breq	.+76     	; 0x2bea <_proc_prio_control_running+0xa6>
    {
        _proc_stop_( proc );
    2b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ba2:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <_proc_stop_>
        ((pitem_t *)proc)->prio = new_prio;
    2ba6:	eb 81       	ldd	r30, Y+3	; 0x03
    2ba8:	fc 81       	ldd	r31, Y+4	; 0x04
    2baa:	8a 81       	ldd	r24, Y+2	; 0x02
    2bac:	86 83       	std	Z+6, r24	; 0x06
#ifdef CONFIG_MP
        spin_lock( &kernel.stat_lock );
    2bae:	8f e8       	ldi	r24, 0x8F	; 143
    2bb0:	93 e0       	ldi	r25, 0x03	; 3
    2bb2:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
        stat_inc( proc, (stat_t *)kernel.stat+proc->core_id );
    2bb6:	eb 81       	ldd	r30, Y+3	; 0x03
    2bb8:	fc 81       	ldd	r31, Y+4	; 0x04
    2bba:	81 a1       	ldd	r24, Z+33	; 0x21
    2bbc:	88 2f       	mov	r24, r24
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	9c 01       	movw	r18, r24
    2bc2:	23 57       	subi	r18, 0x73	; 115
    2bc4:	3c 4f       	sbci	r19, 0xFC	; 252
    2bc6:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc8:	9c 81       	ldd	r25, Y+4	; 0x04
    2bca:	b9 01       	movw	r22, r18
    2bcc:	0e 94 6f 01 	call	0x2de	; 0x2de <stat_inc>
        spin_unlock( &kernel.stat_lock );
    2bd0:	8f e8       	ldi	r24, 0x8F	; 143
    2bd2:	93 e0       	ldi	r25, 0x03	; 3
    2bd4:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
#endif
        _proc_run_( proc );
    2bd8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bda:	9c 81       	ldd	r25, Y+4	; 0x04
    2bdc:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <_proc_run_>
        RESCHED_PROC( proc );
    2be0:	eb 81       	ldd	r30, Y+3	; 0x03
    2be2:	fc 81       	ldd	r31, Y+4	; 0x04
    2be4:	81 a1       	ldd	r24, Z+33	; 0x21
    2be6:	0e 94 b7 01 	call	0x36e	; 0x36e <resched>
    }
}
    2bea:	26 96       	adiw	r28, 0x06	; 6
    2bec:	0f b6       	in	r0, 0x3f	; 63
    2bee:	f8 94       	cli
    2bf0:	de bf       	out	0x3e, r29	; 62
    2bf2:	0f be       	out	0x3f, r0	; 63
    2bf4:	cd bf       	out	0x3d, r28	; 61
    2bf6:	cf 91       	pop	r28
    2bf8:	df 91       	pop	r29
    2bfa:	08 95       	ret

00002bfc <_proc_lazy_load_balancer>:
Можно использовать только один,
или оба в различных комбинациях

************************************/
void _proc_lazy_load_balancer(core_id_t object_core)
{
    2bfc:	df 93       	push	r29
    2bfe:	cf 93       	push	r28
    2c00:	00 d0       	rcall	.+0      	; 0x2c02 <_proc_lazy_load_balancer+0x6>
    2c02:	00 d0       	rcall	.+0      	; 0x2c04 <_proc_lazy_load_balancer+0x8>
    2c04:	0f 92       	push	r0
    2c06:	cd b7       	in	r28, 0x3d	; 61
    2c08:	de b7       	in	r29, 0x3e	; 62
    2c0a:	8d 83       	std	Y+5, r24	; 0x05
    sched_t * sched;
    proc_t * proc;
    sched = (sched_t *)kernel.sched + object_core;
    2c0c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c0e:	28 2f       	mov	r18, r24
    2c10:	30 e0       	ldi	r19, 0x00	; 0
    2c12:	8b e2       	ldi	r24, 0x2B	; 43
    2c14:	90 e0       	ldi	r25, 0x00	; 0
    2c16:	ac 01       	movw	r20, r24
    2c18:	24 9f       	mul	r18, r20
    2c1a:	c0 01       	movw	r24, r0
    2c1c:	25 9f       	mul	r18, r21
    2c1e:	90 0d       	add	r25, r0
    2c20:	34 9f       	mul	r19, r20
    2c22:	90 0d       	add	r25, r0
    2c24:	11 24       	eor	r1, r1
    2c26:	89 52       	subi	r24, 0x29	; 41
    2c28:	9d 4f       	sbci	r25, 0xFD	; 253
    2c2a:	9c 83       	std	Y+4, r25	; 0x04
    2c2c:	8b 83       	std	Y+3, r24	; 0x03

    //Смотрим, есть чи что в списке expired, если есть, будем переносить нагрузку, если нет - выход
    disable_interrupts();
    2c2e:	0e 94 14 0a 	call	0x1428	; 0x1428 <disable_interrupts>
    SPIN_LOCK( sched );
    2c32:	8b 81       	ldd	r24, Y+3	; 0x03
    2c34:	9c 81       	ldd	r25, Y+4	; 0x04
    2c36:	8a 96       	adiw	r24, 0x2a	; 42
    2c38:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    if(sched->expired->index == (index_t)0)
    2c3c:	eb 81       	ldd	r30, Y+3	; 0x03
    2c3e:	fc 81       	ldd	r31, Y+4	; 0x04
    2c40:	04 80       	ldd	r0, Z+4	; 0x04
    2c42:	f5 81       	ldd	r31, Z+5	; 0x05
    2c44:	e0 2d       	mov	r30, r0
    2c46:	80 89       	ldd	r24, Z+16	; 0x10
    2c48:	88 23       	and	r24, r24
    2c4a:	41 f4       	brne	.+16     	; 0x2c5c <_proc_lazy_load_balancer+0x60>
    {
        SPIN_UNLOCK( sched );
    2c4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c4e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c50:	8a 96       	adiw	r24, 0x2a	; 42
    2c52:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
        enable_interrupts();
    2c56:	0e 94 2e 0a 	call	0x145c	; 0x145c <enable_interrupts>
    2c5a:	85 c0       	rjmp	.+266    	; 0x2d66 <_proc_lazy_load_balancer+0x16a>
        return;
    }
    proc = (proc_t *)xlist_head( sched->expired );// Процесс, который будем переносить на другой процессор. Требования реального времени этот процесс не выполняет.
    2c5c:	eb 81       	ldd	r30, Y+3	; 0x03
    2c5e:	fc 81       	ldd	r31, Y+4	; 0x04
    2c60:	84 81       	ldd	r24, Z+4	; 0x04
    2c62:	95 81       	ldd	r25, Z+5	; 0x05
    2c64:	0e 94 4a 20 	call	0x4094	; 0x4094 <xlist_head>
    2c68:	9a 83       	std	Y+2, r25	; 0x02
    2c6a:	89 83       	std	Y+1, r24	; 0x01
    SPIN_UNLOCK( sched );
    2c6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c6e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c70:	8a 96       	adiw	r24, 0x2a	; 42
    2c72:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
    enable_interrupts();
    2c76:	0e 94 2e 0a 	call	0x145c	; 0x145c <enable_interrupts>

    disable_interrupts();
    2c7a:	0e 94 14 0a 	call	0x1428	; 0x1428 <disable_interrupts>
    SPIN_LOCK( proc );
    2c7e:	89 81       	ldd	r24, Y+1	; 0x01
    2c80:	9a 81       	ldd	r25, Y+2	; 0x02
    2c82:	83 96       	adiw	r24, 0x23	; 35
    2c84:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    // Пока захватывалась блокировка процесса, его могли остановить, подстраховываемся.
    if( proc->flags & PROC_FLG_RUN )
    2c88:	e9 81       	ldd	r30, Y+1	; 0x01
    2c8a:	fa 81       	ldd	r31, Y+2	; 0x02
    2c8c:	87 81       	ldd	r24, Z+7	; 0x07
    2c8e:	90 85       	ldd	r25, Z+8	; 0x08
    2c90:	82 70       	andi	r24, 0x02	; 2
    2c92:	90 70       	andi	r25, 0x00	; 0
    2c94:	00 97       	sbiw	r24, 0x00	; 0
    2c96:	09 f4       	brne	.+2      	; 0x2c9a <_proc_lazy_load_balancer+0x9e>
    2c98:	5f c0       	rjmp	.+190    	; 0x2d58 <_proc_lazy_load_balancer+0x15c>
    {
        // Остановили выполнение процесса на старом процессоре
        SPIN_LOCK( sched );
    2c9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c9c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c9e:	8a 96       	adiw	r24, 0x2a	; 42
    2ca0:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
        pitem_fast_cut( (pitem_t *)proc );
    2ca4:	89 81       	ldd	r24, Y+1	; 0x01
    2ca6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ca8:	0e 94 23 11 	call	0x2246	; 0x2246 <pitem_fast_cut>
        SPIN_UNLOCK( sched );
    2cac:	8b 81       	ldd	r24, Y+3	; 0x03
    2cae:	9c 81       	ldd	r25, Y+4	; 0x04
    2cb0:	8a 96       	adiw	r24, 0x2a	; 42
    2cb2:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
        resched(object_core); // Процесс мог быть поставлен на выполнение, пока мы захватывали его блокировку, перепланируем
    2cb6:	8d 81       	ldd	r24, Y+5	; 0x05
    2cb8:	0e 94 b7 01 	call	0x36e	; 0x36e <resched>

        // Проводим операции над статистикой
        spin_lock( &kernel.stat_lock );
    2cbc:	8f e8       	ldi	r24, 0x8F	; 143
    2cbe:	93 e0       	ldi	r25, 0x03	; 3
    2cc0:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>

        stat_dec( proc, (stat_t *)kernel.stat + object_core );
    2cc4:	8d 81       	ldd	r24, Y+5	; 0x05
    2cc6:	88 2f       	mov	r24, r24
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
    2cca:	9c 01       	movw	r18, r24
    2ccc:	23 57       	subi	r18, 0x73	; 115
    2cce:	3c 4f       	sbci	r19, 0xFC	; 252
    2cd0:	89 81       	ldd	r24, Y+1	; 0x01
    2cd2:	9a 81       	ldd	r25, Y+2	; 0x02
    2cd4:	b9 01       	movw	r22, r18
    2cd6:	0e 94 57 01 	call	0x2ae	; 0x2ae <stat_dec>

        object_core = sched_load_balancer( proc, (stat_t *)kernel.stat );// Теперь, это тот процессор, на который будем переносить процесс
    2cda:	89 81       	ldd	r24, Y+1	; 0x01
    2cdc:	9a 81       	ldd	r25, Y+2	; 0x02
    2cde:	2d e8       	ldi	r18, 0x8D	; 141
    2ce0:	33 e0       	ldi	r19, 0x03	; 3
    2ce2:	b9 01       	movw	r22, r18
    2ce4:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <sched_load_balancer>
    2ce8:	8d 83       	std	Y+5, r24	; 0x05
        sched = (sched_t *)kernel.sched + object_core;//Теперь это планировщик, на который мы переносим процесс
    2cea:	8d 81       	ldd	r24, Y+5	; 0x05
    2cec:	28 2f       	mov	r18, r24
    2cee:	30 e0       	ldi	r19, 0x00	; 0
    2cf0:	8b e2       	ldi	r24, 0x2B	; 43
    2cf2:	90 e0       	ldi	r25, 0x00	; 0
    2cf4:	ac 01       	movw	r20, r24
    2cf6:	24 9f       	mul	r18, r20
    2cf8:	c0 01       	movw	r24, r0
    2cfa:	25 9f       	mul	r18, r21
    2cfc:	90 0d       	add	r25, r0
    2cfe:	34 9f       	mul	r19, r20
    2d00:	90 0d       	add	r25, r0
    2d02:	11 24       	eor	r1, r1
    2d04:	89 52       	subi	r24, 0x29	; 41
    2d06:	9d 4f       	sbci	r25, 0xFD	; 253
    2d08:	9c 83       	std	Y+4, r25	; 0x04
    2d0a:	8b 83       	std	Y+3, r24	; 0x03
        stat_inc( proc, (stat_t *)kernel.stat + object_core );
    2d0c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d0e:	88 2f       	mov	r24, r24
    2d10:	90 e0       	ldi	r25, 0x00	; 0
    2d12:	9c 01       	movw	r18, r24
    2d14:	23 57       	subi	r18, 0x73	; 115
    2d16:	3c 4f       	sbci	r19, 0xFC	; 252
    2d18:	89 81       	ldd	r24, Y+1	; 0x01
    2d1a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d1c:	b9 01       	movw	r22, r18
    2d1e:	0e 94 6f 01 	call	0x2de	; 0x2de <stat_inc>

        spin_unlock( &kernel.stat_lock );
    2d22:	8f e8       	ldi	r24, 0x8F	; 143
    2d24:	93 e0       	ldi	r25, 0x03	; 3
    2d26:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>

        // Переносим процесс на новый процессор, продолжаем выполнение там. Перепланировку не делаем, проуесс не выполняет требования реального времени.
        proc->core_id = object_core;
    2d2a:	e9 81       	ldd	r30, Y+1	; 0x01
    2d2c:	fa 81       	ldd	r31, Y+2	; 0x02
    2d2e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d30:	81 a3       	std	Z+33, r24	; 0x21
        SPIN_LOCK( sched );
    2d32:	8b 81       	ldd	r24, Y+3	; 0x03
    2d34:	9c 81       	ldd	r25, Y+4	; 0x04
    2d36:	8a 96       	adiw	r24, 0x2a	; 42
    2d38:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
        pitem_insert( (pitem_t *)proc, sched->expired );
    2d3c:	89 81       	ldd	r24, Y+1	; 0x01
    2d3e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d40:	eb 81       	ldd	r30, Y+3	; 0x03
    2d42:	fc 81       	ldd	r31, Y+4	; 0x04
    2d44:	24 81       	ldd	r18, Z+4	; 0x04
    2d46:	35 81       	ldd	r19, Z+5	; 0x05
    2d48:	b9 01       	movw	r22, r18
    2d4a:	0e 94 cd 10 	call	0x219a	; 0x219a <pitem_insert>
        SPIN_UNLOCK( sched );
    2d4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d50:	9c 81       	ldd	r25, Y+4	; 0x04
    2d52:	8a 96       	adiw	r24, 0x2a	; 42
    2d54:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
    }
    SPIN_UNLOCK( proc );
    2d58:	89 81       	ldd	r24, Y+1	; 0x01
    2d5a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d5c:	83 96       	adiw	r24, 0x23	; 35
    2d5e:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
    enable_interrupts();
    2d62:	0e 94 2e 0a 	call	0x145c	; 0x145c <enable_interrupts>
}
    2d66:	0f 90       	pop	r0
    2d68:	0f 90       	pop	r0
    2d6a:	0f 90       	pop	r0
    2d6c:	0f 90       	pop	r0
    2d6e:	0f 90       	pop	r0
    2d70:	cf 91       	pop	r28
    2d72:	df 91       	pop	r29
    2d74:	08 95       	ret

00002d76 <proc_lazy_global_load_balancer>:
// Глобальный
void proc_lazy_global_load_balancer(void)
{
    2d76:	df 93       	push	r29
    2d78:	cf 93       	push	r28
    2d7a:	0f 92       	push	r0
    2d7c:	cd b7       	in	r28, 0x3d	; 61
    2d7e:	de b7       	in	r29, 0x3e	; 62
    core_id_t object_core;
    // Поиск самого нагруженного процессора
    disable_interrupts();
    2d80:	0e 94 14 0a 	call	0x1428	; 0x1428 <disable_interrupts>
    spin_lock( &kernel.stat_lock );
    2d84:	8f e8       	ldi	r24, 0x8F	; 143
    2d86:	93 e0       	ldi	r25, 0x03	; 3
    2d88:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    object_core = sched_highest_load_core( (stat_t *)kernel.stat );
    2d8c:	8d e8       	ldi	r24, 0x8D	; 141
    2d8e:	93 e0       	ldi	r25, 0x03	; 3
    2d90:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <sched_highest_load_core>
    2d94:	89 83       	std	Y+1, r24	; 0x01
    spin_unlock( &kernel.stat_lock );
    2d96:	8f e8       	ldi	r24, 0x8F	; 143
    2d98:	93 e0       	ldi	r25, 0x03	; 3
    2d9a:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
    enable_interrupts();
    2d9e:	0e 94 2e 0a 	call	0x145c	; 0x145c <enable_interrupts>
    // Перенос нагрузки на самый не нагруженный процессор
    _proc_lazy_load_balancer( object_core );
    2da2:	89 81       	ldd	r24, Y+1	; 0x01
    2da4:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <_proc_lazy_load_balancer>
}
    2da8:	0f 90       	pop	r0
    2daa:	cf 91       	pop	r28
    2dac:	df 91       	pop	r29
    2dae:	08 95       	ret

00002db0 <sched_load_balancer>:

#ifdef CONFIG_MP
//========================================================================================
// Балансировщик нагрузки
WEAK core_id_t sched_load_balancer(proc_t * proc, stat_t * stat)
{
    2db0:	df 93       	push	r29
    2db2:	cf 93       	push	r28
    2db4:	cd b7       	in	r28, 0x3d	; 61
    2db6:	de b7       	in	r29, 0x3e	; 62
    2db8:	2a 97       	sbiw	r28, 0x0a	; 10
    2dba:	0f b6       	in	r0, 0x3f	; 63
    2dbc:	f8 94       	cli
    2dbe:	de bf       	out	0x3e, r29	; 62
    2dc0:	0f be       	out	0x3f, r0	; 63
    2dc2:	cd bf       	out	0x3d, r28	; 61
    2dc4:	98 87       	std	Y+8, r25	; 0x08
    2dc6:	8f 83       	std	Y+7, r24	; 0x07
    2dc8:	7a 87       	std	Y+10, r23	; 0x0a
    2dca:	69 87       	std	Y+9, r22	; 0x09
    core_id_t core = (core_id_t)0, ret;
    2dcc:	1e 82       	std	Y+6, r1	; 0x06
    affinity_t mask = (affinity_t)1;
    2dce:	81 e0       	ldi	r24, 0x01	; 1
    2dd0:	8c 83       	std	Y+4, r24	; 0x04
    2dd2:	0d c0       	rjmp	.+26     	; 0x2dee <sched_load_balancer+0x3e>
    while( core < (core_id_t)MAX_CORES )
    {
        if( proc->affinity & mask )break;
    2dd4:	ef 81       	ldd	r30, Y+7	; 0x07
    2dd6:	f8 85       	ldd	r31, Y+8	; 0x08
    2dd8:	92 a1       	ldd	r25, Z+34	; 0x22
    2dda:	8c 81       	ldd	r24, Y+4	; 0x04
    2ddc:	89 23       	and	r24, r25
    2dde:	88 23       	and	r24, r24
    2de0:	49 f4       	brne	.+18     	; 0x2df4 <sched_load_balancer+0x44>
        mask<<=1;
    2de2:	8c 81       	ldd	r24, Y+4	; 0x04
    2de4:	88 0f       	add	r24, r24
    2de6:	8c 83       	std	Y+4, r24	; 0x04
        core++;
    2de8:	8e 81       	ldd	r24, Y+6	; 0x06
    2dea:	8f 5f       	subi	r24, 0xFF	; 255
    2dec:	8e 83       	std	Y+6, r24	; 0x06
// Балансировщик нагрузки
WEAK core_id_t sched_load_balancer(proc_t * proc, stat_t * stat)
{
    core_id_t core = (core_id_t)0, ret;
    affinity_t mask = (affinity_t)1;
    while( core < (core_id_t)MAX_CORES )
    2dee:	8e 81       	ldd	r24, Y+6	; 0x06
    2df0:	82 30       	cpi	r24, 0x02	; 2
    2df2:	80 f3       	brcs	.-32     	; 0x2dd4 <sched_load_balancer+0x24>
        if( proc->affinity & mask )break;
        mask<<=1;
        core++;
    }
    // Начальное предположение
    stat += (core_id_t)core;
    2df4:	8e 81       	ldd	r24, Y+6	; 0x06
    2df6:	28 2f       	mov	r18, r24
    2df8:	30 e0       	ldi	r19, 0x00	; 0
    2dfa:	89 85       	ldd	r24, Y+9	; 0x09
    2dfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dfe:	82 0f       	add	r24, r18
    2e00:	93 1f       	adc	r25, r19
    2e02:	9a 87       	std	Y+10, r25	; 0x0a
    2e04:	89 87       	std	Y+9, r24	; 0x09
    ret = core++;
    2e06:	8e 81       	ldd	r24, Y+6	; 0x06
    2e08:	8d 83       	std	Y+5, r24	; 0x05
    2e0a:	8e 81       	ldd	r24, Y+6	; 0x06
    2e0c:	8f 5f       	subi	r24, 0xFF	; 255
    2e0e:	8e 83       	std	Y+6, r24	; 0x06
    mask<<=1;
    2e10:	8c 81       	ldd	r24, Y+4	; 0x04
    2e12:	88 0f       	add	r24, r24
    2e14:	8c 83       	std	Y+4, r24	; 0x04
    {
        prio_t proc_prio;
        load_t current_load, min_load;

        proc_prio = ((pitem_t *)proc)->prio;
    2e16:	ef 81       	ldd	r30, Y+7	; 0x07
    2e18:	f8 85       	ldd	r31, Y+8	; 0x08
    2e1a:	86 81       	ldd	r24, Z+6	; 0x06
    2e1c:	8b 83       	std	Y+3, r24	; 0x03
        min_load = stat_calc_load( proc_prio, stat++ );
    2e1e:	29 85       	ldd	r18, Y+9	; 0x09
    2e20:	3a 85       	ldd	r19, Y+10	; 0x0a
    2e22:	89 85       	ldd	r24, Y+9	; 0x09
    2e24:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e26:	01 96       	adiw	r24, 0x01	; 1
    2e28:	9a 87       	std	Y+10, r25	; 0x0a
    2e2a:	89 87       	std	Y+9, r24	; 0x09
    2e2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e2e:	b9 01       	movw	r22, r18
    2e30:	0e 94 a5 01 	call	0x34a	; 0x34a <stat_calc_load>
    2e34:	89 83       	std	Y+1, r24	; 0x01
    2e36:	21 c0       	rjmp	.+66     	; 0x2e7a <sched_load_balancer+0xca>
        // Проверка всего остального, тупой поиск минимума
        while( core < (core_id_t)MAX_CORES )
        {
            current_load = stat_calc_load( proc_prio, stat++ );
    2e38:	29 85       	ldd	r18, Y+9	; 0x09
    2e3a:	3a 85       	ldd	r19, Y+10	; 0x0a
    2e3c:	89 85       	ldd	r24, Y+9	; 0x09
    2e3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e40:	01 96       	adiw	r24, 0x01	; 1
    2e42:	9a 87       	std	Y+10, r25	; 0x0a
    2e44:	89 87       	std	Y+9, r24	; 0x09
    2e46:	8b 81       	ldd	r24, Y+3	; 0x03
    2e48:	b9 01       	movw	r22, r18
    2e4a:	0e 94 a5 01 	call	0x34a	; 0x34a <stat_calc_load>
    2e4e:	8a 83       	std	Y+2, r24	; 0x02
            if( (proc->affinity & mask) && (current_load < min_load) )
    2e50:	ef 81       	ldd	r30, Y+7	; 0x07
    2e52:	f8 85       	ldd	r31, Y+8	; 0x08
    2e54:	92 a1       	ldd	r25, Z+34	; 0x22
    2e56:	8c 81       	ldd	r24, Y+4	; 0x04
    2e58:	89 23       	and	r24, r25
    2e5a:	88 23       	and	r24, r24
    2e5c:	41 f0       	breq	.+16     	; 0x2e6e <sched_load_balancer+0xbe>
    2e5e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e60:	89 81       	ldd	r24, Y+1	; 0x01
    2e62:	98 17       	cp	r25, r24
    2e64:	20 f4       	brcc	.+8      	; 0x2e6e <sched_load_balancer+0xbe>
            {
                min_load = current_load;
    2e66:	8a 81       	ldd	r24, Y+2	; 0x02
    2e68:	89 83       	std	Y+1, r24	; 0x01
                ret = core;
    2e6a:	8e 81       	ldd	r24, Y+6	; 0x06
    2e6c:	8d 83       	std	Y+5, r24	; 0x05
            }
            mask<<=1;
    2e6e:	8c 81       	ldd	r24, Y+4	; 0x04
    2e70:	88 0f       	add	r24, r24
    2e72:	8c 83       	std	Y+4, r24	; 0x04
            core++;
    2e74:	8e 81       	ldd	r24, Y+6	; 0x06
    2e76:	8f 5f       	subi	r24, 0xFF	; 255
    2e78:	8e 83       	std	Y+6, r24	; 0x06
        load_t current_load, min_load;

        proc_prio = ((pitem_t *)proc)->prio;
        min_load = stat_calc_load( proc_prio, stat++ );
        // Проверка всего остального, тупой поиск минимума
        while( core < (core_id_t)MAX_CORES )
    2e7a:	8e 81       	ldd	r24, Y+6	; 0x06
    2e7c:	82 30       	cpi	r24, 0x02	; 2
    2e7e:	e0 f2       	brcs	.-72     	; 0x2e38 <sched_load_balancer+0x88>
            }
            mask<<=1;
            core++;
        }
    }
    return ret;
    2e80:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2e82:	2a 96       	adiw	r28, 0x0a	; 10
    2e84:	0f b6       	in	r0, 0x3f	; 63
    2e86:	f8 94       	cli
    2e88:	de bf       	out	0x3e, r29	; 62
    2e8a:	0f be       	out	0x3f, r0	; 63
    2e8c:	cd bf       	out	0x3d, r28	; 61
    2e8e:	cf 91       	pop	r28
    2e90:	df 91       	pop	r29
    2e92:	08 95       	ret

00002e94 <sched_highest_load_core>:
//----------------------------------------------------------------------------------------
//Поиск самой нагруженной структуры stat_t в массиве
WEAK core_id_t sched_highest_load_core( stat_t * stat )
{
    2e94:	df 93       	push	r29
    2e96:	cf 93       	push	r28
    2e98:	00 d0       	rcall	.+0      	; 0x2e9a <sched_highest_load_core+0x6>
    2e9a:	00 d0       	rcall	.+0      	; 0x2e9c <sched_highest_load_core+0x8>
    2e9c:	00 d0       	rcall	.+0      	; 0x2e9e <sched_highest_load_core+0xa>
    2e9e:	cd b7       	in	r28, 0x3d	; 61
    2ea0:	de b7       	in	r29, 0x3e	; 62
    2ea2:	9e 83       	std	Y+6, r25	; 0x06
    2ea4:	8d 83       	std	Y+5, r24	; 0x05
    // Начальное предположение
    load_t max_load;
    core_id_t object_core = (core_id_t)0; //процессор с максимальной нагрузкой, с которого эту нагрузку будем снимать
    2ea6:	1b 82       	std	Y+3, r1	; 0x03
    core_id_t core = (core_id_t)1;
    2ea8:	81 e0       	ldi	r24, 0x01	; 1
    2eaa:	8a 83       	std	Y+2, r24	; 0x02
    max_load  = stat_calc_load( (prio_t)BITS_IN_INDEX_T, stat ); // максимальная нагрузка
    2eac:	2d 81       	ldd	r18, Y+5	; 0x05
    2eae:	3e 81       	ldd	r19, Y+6	; 0x06
    2eb0:	88 e0       	ldi	r24, 0x08	; 8
    2eb2:	b9 01       	movw	r22, r18
    2eb4:	0e 94 a5 01 	call	0x34a	; 0x34a <stat_calc_load>
    2eb8:	8c 83       	std	Y+4, r24	; 0x04
    2eba:	17 c0       	rjmp	.+46     	; 0x2eea <sched_highest_load_core+0x56>

    while( core < (core_id_t)MAX_CORES )
    {
        load_t current_load;
        current_load = stat_calc_load( (prio_t)BITS_IN_INDEX_T, stat + core );
    2ebc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ebe:	28 2f       	mov	r18, r24
    2ec0:	30 e0       	ldi	r19, 0x00	; 0
    2ec2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ec4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ec6:	28 0f       	add	r18, r24
    2ec8:	39 1f       	adc	r19, r25
    2eca:	88 e0       	ldi	r24, 0x08	; 8
    2ecc:	b9 01       	movw	r22, r18
    2ece:	0e 94 a5 01 	call	0x34a	; 0x34a <stat_calc_load>
    2ed2:	89 83       	std	Y+1, r24	; 0x01
        if( current_load > max_load )
    2ed4:	99 81       	ldd	r25, Y+1	; 0x01
    2ed6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ed8:	89 17       	cp	r24, r25
    2eda:	20 f4       	brcc	.+8      	; 0x2ee4 <sched_highest_load_core+0x50>
        {
            max_load = current_load;
    2edc:	89 81       	ldd	r24, Y+1	; 0x01
    2ede:	8c 83       	std	Y+4, r24	; 0x04
            object_core = core;
    2ee0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ee2:	8b 83       	std	Y+3, r24	; 0x03
        }
        core++;
    2ee4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ee6:	8f 5f       	subi	r24, 0xFF	; 255
    2ee8:	8a 83       	std	Y+2, r24	; 0x02
    load_t max_load;
    core_id_t object_core = (core_id_t)0; //процессор с максимальной нагрузкой, с которого эту нагрузку будем снимать
    core_id_t core = (core_id_t)1;
    max_load  = stat_calc_load( (prio_t)BITS_IN_INDEX_T, stat ); // максимальная нагрузка

    while( core < (core_id_t)MAX_CORES )
    2eea:	8a 81       	ldd	r24, Y+2	; 0x02
    2eec:	82 30       	cpi	r24, 0x02	; 2
    2eee:	30 f3       	brcs	.-52     	; 0x2ebc <sched_highest_load_core+0x28>
            object_core = core;
        }
        core++;
    }

    return object_core;
    2ef0:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2ef2:	26 96       	adiw	r28, 0x06	; 6
    2ef4:	0f b6       	in	r0, 0x3f	; 63
    2ef6:	f8 94       	cli
    2ef8:	de bf       	out	0x3e, r29	; 62
    2efa:	0f be       	out	0x3f, r0	; 63
    2efc:	cd bf       	out	0x3d, r28	; 61
    2efe:	cf 91       	pop	r28
    2f00:	df 91       	pop	r29
    2f02:	08 95       	ret

00002f04 <sched_init>:
#endif // CONFIG_MP
//========================================================================================
// Инициация
void sched_init(sched_t * sched, proc_t * idle)
{
    2f04:	df 93       	push	r29
    2f06:	cf 93       	push	r28
    2f08:	00 d0       	rcall	.+0      	; 0x2f0a <sched_init+0x6>
    2f0a:	00 d0       	rcall	.+0      	; 0x2f0c <sched_init+0x8>
    2f0c:	00 d0       	rcall	.+0      	; 0x2f0e <sched_init+0xa>
    2f0e:	cd b7       	in	r28, 0x3d	; 61
    2f10:	de b7       	in	r29, 0x3e	; 62
    2f12:	9c 83       	std	Y+4, r25	; 0x04
    2f14:	8b 83       	std	Y+3, r24	; 0x03
    2f16:	7e 83       	std	Y+6, r23	; 0x06
    2f18:	6d 83       	std	Y+5, r22	; 0x05
#ifdef CONFIG_MP
    lock_t * sched_lock;
    sched_lock = &sched->lock;
    2f1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f1c:	9c 81       	ldd	r25, Y+4	; 0x04
    2f1e:	8a 96       	adiw	r24, 0x2a	; 42
    2f20:	9a 83       	std	Y+2, r25	; 0x02
    2f22:	89 83       	std	Y+1, r24	; 0x01
    spin_init( sched_lock );
    2f24:	89 81       	ldd	r24, Y+1	; 0x01
    2f26:	9a 81       	ldd	r25, Y+2	; 0x02
    2f28:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <spin_init>
    spin_lock( sched_lock );
    2f2c:	89 81       	ldd	r24, Y+1	; 0x01
    2f2e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f30:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
#endif // CONFIG_MP
    sched->ready = (xlist_t *)sched->plst;
    2f34:	8b 81       	ldd	r24, Y+3	; 0x03
    2f36:	9c 81       	ldd	r25, Y+4	; 0x04
    2f38:	06 96       	adiw	r24, 0x06	; 6
    2f3a:	eb 81       	ldd	r30, Y+3	; 0x03
    2f3c:	fc 81       	ldd	r31, Y+4	; 0x04
    2f3e:	93 83       	std	Z+3, r25	; 0x03
    2f40:	82 83       	std	Z+2, r24	; 0x02
    xlist_init( sched->ready );
    2f42:	eb 81       	ldd	r30, Y+3	; 0x03
    2f44:	fc 81       	ldd	r31, Y+4	; 0x04
    2f46:	82 81       	ldd	r24, Z+2	; 0x02
    2f48:	93 81       	ldd	r25, Z+3	; 0x03
    2f4a:	0e 94 20 20 	call	0x4040	; 0x4040 <xlist_init>
    sched->expired = (xlist_t *)sched->plst + 1;
    2f4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f50:	9c 81       	ldd	r25, Y+4	; 0x04
    2f52:	47 96       	adiw	r24, 0x17	; 23
    2f54:	eb 81       	ldd	r30, Y+3	; 0x03
    2f56:	fc 81       	ldd	r31, Y+4	; 0x04
    2f58:	95 83       	std	Z+5, r25	; 0x05
    2f5a:	84 83       	std	Z+4, r24	; 0x04
    xlist_init( sched->expired );
    2f5c:	eb 81       	ldd	r30, Y+3	; 0x03
    2f5e:	fc 81       	ldd	r31, Y+4	; 0x04
    2f60:	84 81       	ldd	r24, Z+4	; 0x04
    2f62:	95 81       	ldd	r25, Z+5	; 0x05
    2f64:	0e 94 20 20 	call	0x4040	; 0x4040 <xlist_init>
    pitem_insert( (pitem_t *)idle, sched->ready );
    2f68:	8d 81       	ldd	r24, Y+5	; 0x05
    2f6a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f6c:	eb 81       	ldd	r30, Y+3	; 0x03
    2f6e:	fc 81       	ldd	r31, Y+4	; 0x04
    2f70:	22 81       	ldd	r18, Z+2	; 0x02
    2f72:	33 81       	ldd	r19, Z+3	; 0x03
    2f74:	b9 01       	movw	r22, r18
    2f76:	0e 94 cd 10 	call	0x219a	; 0x219a <pitem_insert>
    sched->current_proc = idle;
    2f7a:	eb 81       	ldd	r30, Y+3	; 0x03
    2f7c:	fc 81       	ldd	r31, Y+4	; 0x04
    2f7e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f80:	9e 81       	ldd	r25, Y+6	; 0x06
    2f82:	91 83       	std	Z+1, r25	; 0x01
    2f84:	80 83       	st	Z, r24
    sched->nested_crit_sec = (count_t)0;//вообще это выполняется при запрещенных прерываниях, но не известно, на этом ли процессоре
    2f86:	eb 81       	ldd	r30, Y+3	; 0x03
    2f88:	fc 81       	ldd	r31, Y+4	; 0x04
    2f8a:	11 a6       	std	Z+41, r1	; 0x29
    2f8c:	10 a6       	std	Z+40, r1	; 0x28
#ifdef CONFIG_MP
    spin_unlock( sched_lock );
    2f8e:	89 81       	ldd	r24, Y+1	; 0x01
    2f90:	9a 81       	ldd	r25, Y+2	; 0x02
    2f92:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
    stat_inc( idle, (stat_t *)kernel.stat + idle->core_id );
    2f96:	ed 81       	ldd	r30, Y+5	; 0x05
    2f98:	fe 81       	ldd	r31, Y+6	; 0x06
    2f9a:	81 a1       	ldd	r24, Z+33	; 0x21
    2f9c:	88 2f       	mov	r24, r24
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	9c 01       	movw	r18, r24
    2fa2:	23 57       	subi	r18, 0x73	; 115
    2fa4:	3c 4f       	sbci	r19, 0xFC	; 252
    2fa6:	8d 81       	ldd	r24, Y+5	; 0x05
    2fa8:	9e 81       	ldd	r25, Y+6	; 0x06
    2faa:	b9 01       	movw	r22, r18
    2fac:	0e 94 6f 01 	call	0x2de	; 0x2de <stat_inc>
#endif // CONFIG_MP
}
    2fb0:	26 96       	adiw	r28, 0x06	; 6
    2fb2:	0f b6       	in	r0, 0x3f	; 63
    2fb4:	f8 94       	cli
    2fb6:	de bf       	out	0x3e, r29	; 62
    2fb8:	0f be       	out	0x3f, r0	; 63
    2fba:	cd bf       	out	0x3d, r28	; 61
    2fbc:	cf 91       	pop	r28
    2fbe:	df 91       	pop	r29
    2fc0:	08 95       	ret

00002fc2 <_sched_switch_current>:
static void _sched_switch_current( sched_t * sched, proc_t ** current_proc )
{
    2fc2:	df 93       	push	r29
    2fc4:	cf 93       	push	r28
    2fc6:	00 d0       	rcall	.+0      	; 0x2fc8 <_sched_switch_current+0x6>
    2fc8:	00 d0       	rcall	.+0      	; 0x2fca <_sched_switch_current+0x8>
    2fca:	00 d0       	rcall	.+0      	; 0x2fcc <_sched_switch_current+0xa>
    2fcc:	cd b7       	in	r28, 0x3d	; 61
    2fce:	de b7       	in	r29, 0x3e	; 62
    2fd0:	9c 83       	std	Y+4, r25	; 0x04
    2fd2:	8b 83       	std	Y+3, r24	; 0x03
    2fd4:	7e 83       	std	Y+6, r23	; 0x06
    2fd6:	6d 83       	std	Y+5, r22	; 0x05

    SPIN_LOCK( sched );
    2fd8:	8b 81       	ldd	r24, Y+3	; 0x03
    2fda:	9c 81       	ldd	r25, Y+4	; 0x04
    2fdc:	8a 96       	adiw	r24, 0x2a	; 42
    2fde:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    // Если список ready опустел, - переключаем списки
    if( sched->ready->index == (index_t)0 )
    2fe2:	eb 81       	ldd	r30, Y+3	; 0x03
    2fe4:	fc 81       	ldd	r31, Y+4	; 0x04
    2fe6:	02 80       	ldd	r0, Z+2	; 0x02
    2fe8:	f3 81       	ldd	r31, Z+3	; 0x03
    2fea:	e0 2d       	mov	r30, r0
    2fec:	80 89       	ldd	r24, Z+16	; 0x10
    2fee:	88 23       	and	r24, r24
    2ff0:	a1 f4       	brne	.+40     	; 0x301a <_sched_switch_current+0x58>
    {
        xlist_t * buf;
        buf = sched->ready;
    2ff2:	eb 81       	ldd	r30, Y+3	; 0x03
    2ff4:	fc 81       	ldd	r31, Y+4	; 0x04
    2ff6:	82 81       	ldd	r24, Z+2	; 0x02
    2ff8:	93 81       	ldd	r25, Z+3	; 0x03
    2ffa:	9a 83       	std	Y+2, r25	; 0x02
    2ffc:	89 83       	std	Y+1, r24	; 0x01
        sched->ready = sched->expired;
    2ffe:	eb 81       	ldd	r30, Y+3	; 0x03
    3000:	fc 81       	ldd	r31, Y+4	; 0x04
    3002:	84 81       	ldd	r24, Z+4	; 0x04
    3004:	95 81       	ldd	r25, Z+5	; 0x05
    3006:	eb 81       	ldd	r30, Y+3	; 0x03
    3008:	fc 81       	ldd	r31, Y+4	; 0x04
    300a:	93 83       	std	Z+3, r25	; 0x03
    300c:	82 83       	std	Z+2, r24	; 0x02
        sched->expired = buf;
    300e:	eb 81       	ldd	r30, Y+3	; 0x03
    3010:	fc 81       	ldd	r31, Y+4	; 0x04
    3012:	89 81       	ldd	r24, Y+1	; 0x01
    3014:	9a 81       	ldd	r25, Y+2	; 0x02
    3016:	95 83       	std	Z+5, r25	; 0x05
    3018:	84 83       	std	Z+4, r24	; 0x04
    }
    // Изменять указатель будем при захваченной блокировке,
    // чтобы процессы на других процессорах не прочитали неизвестно что.
    sched->current_proc = (proc_t *)xlist_head( sched->ready ); // Вытесняющая многозадачность же!
    301a:	eb 81       	ldd	r30, Y+3	; 0x03
    301c:	fc 81       	ldd	r31, Y+4	; 0x04
    301e:	82 81       	ldd	r24, Z+2	; 0x02
    3020:	93 81       	ldd	r25, Z+3	; 0x03
    3022:	0e 94 4a 20 	call	0x4094	; 0x4094 <xlist_head>
    3026:	eb 81       	ldd	r30, Y+3	; 0x03
    3028:	fc 81       	ldd	r31, Y+4	; 0x04
    302a:	91 83       	std	Z+1, r25	; 0x01
    302c:	80 83       	st	Z, r24
    *current_proc = sched->current_proc;
    302e:	eb 81       	ldd	r30, Y+3	; 0x03
    3030:	fc 81       	ldd	r31, Y+4	; 0x04
    3032:	80 81       	ld	r24, Z
    3034:	91 81       	ldd	r25, Z+1	; 0x01
    3036:	ed 81       	ldd	r30, Y+5	; 0x05
    3038:	fe 81       	ldd	r31, Y+6	; 0x06
    303a:	91 83       	std	Z+1, r25	; 0x01
    303c:	80 83       	st	Z, r24

    SPIN_UNLOCK( sched );
    303e:	8b 81       	ldd	r24, Y+3	; 0x03
    3040:	9c 81       	ldd	r25, Y+4	; 0x04
    3042:	8a 96       	adiw	r24, 0x2a	; 42
    3044:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
}
    3048:	26 96       	adiw	r28, 0x06	; 6
    304a:	0f b6       	in	r0, 0x3f	; 63
    304c:	f8 94       	cli
    304e:	de bf       	out	0x3e, r29	; 62
    3050:	0f be       	out	0x3f, r0	; 63
    3052:	cd bf       	out	0x3d, r28	; 61
    3054:	cf 91       	pop	r28
    3056:	df 91       	pop	r29
    3058:	08 95       	ret

0000305a <sched_schedule>:
2) В качестве аргумента передаем только тот объект, который управляет процессами
на исполняющем функции процессоре.
******************************************************************************************/
// Функция планирования, переключает процессы в обработчике системмного таймера
void sched_schedule(void)
{
    305a:	df 93       	push	r29
    305c:	cf 93       	push	r28
    305e:	00 d0       	rcall	.+0      	; 0x3060 <sched_schedule+0x6>
    3060:	00 d0       	rcall	.+0      	; 0x3062 <sched_schedule+0x8>
    3062:	00 d0       	rcall	.+0      	; 0x3064 <sched_schedule+0xa>
    3064:	cd b7       	in	r28, 0x3d	; 61
    3066:	de b7       	in	r29, 0x3e	; 62
    proc_t * current_proc;
    sched_t * sched;
    sched = _SCHED_INIT();
    3068:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <current_core>
    306c:	28 2f       	mov	r18, r24
    306e:	30 e0       	ldi	r19, 0x00	; 0
    3070:	8b e2       	ldi	r24, 0x2B	; 43
    3072:	90 e0       	ldi	r25, 0x00	; 0
    3074:	ac 01       	movw	r20, r24
    3076:	24 9f       	mul	r18, r20
    3078:	c0 01       	movw	r24, r0
    307a:	25 9f       	mul	r18, r21
    307c:	90 0d       	add	r25, r0
    307e:	34 9f       	mul	r19, r20
    3080:	90 0d       	add	r25, r0
    3082:	11 24       	eor	r1, r1
    3084:	89 52       	subi	r24, 0x29	; 41
    3086:	9d 4f       	sbci	r25, 0xFD	; 253
    3088:	9c 83       	std	Y+4, r25	; 0x04
    308a:	8b 83       	std	Y+3, r24	; 0x03
    // Меняем только с локального процессора, блокировку sched->lock можно не захватывать!
    current_proc = sched->current_proc;
    308c:	eb 81       	ldd	r30, Y+3	; 0x03
    308e:	fc 81       	ldd	r31, Y+4	; 0x04
    3090:	80 81       	ld	r24, Z
    3092:	91 81       	ldd	r25, Z+1	; 0x01
    3094:	9e 83       	std	Y+6, r25	; 0x06
    3096:	8d 83       	std	Y+5, r24	; 0x05
    // А вот эту блокировку обязательно надо захватить!
    SPIN_LOCK( current_proc );
    3098:	8d 81       	ldd	r24, Y+5	; 0x05
    309a:	9e 81       	ldd	r25, Y+6	; 0x06
    309c:	83 96       	adiw	r24, 0x23	; 35
    309e:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    // Хук "сохранение контекста"
    if( current_proc->sv_hook )current_proc->sv_hook( current_proc->arg );
    30a2:	ed 81       	ldd	r30, Y+5	; 0x05
    30a4:	fe 81       	ldd	r31, Y+6	; 0x06
    30a6:	86 a1       	ldd	r24, Z+38	; 0x26
    30a8:	97 a1       	ldd	r25, Z+39	; 0x27
    30aa:	00 97       	sbiw	r24, 0x00	; 0
    30ac:	51 f0       	breq	.+20     	; 0x30c2 <sched_schedule+0x68>
    30ae:	ed 81       	ldd	r30, Y+5	; 0x05
    30b0:	fe 81       	ldd	r31, Y+6	; 0x06
    30b2:	26 a1       	ldd	r18, Z+38	; 0x26
    30b4:	37 a1       	ldd	r19, Z+39	; 0x27
    30b6:	ed 81       	ldd	r30, Y+5	; 0x05
    30b8:	fe 81       	ldd	r31, Y+6	; 0x06
    30ba:	82 a5       	ldd	r24, Z+42	; 0x2a
    30bc:	93 a5       	ldd	r25, Z+43	; 0x2b
    30be:	f9 01       	movw	r30, r18
    30c0:	09 95       	icall
    // Проверяем, что процесс находится в списке ready
    if( (xlist_t *)((pitem_t *)current_proc)->list == sched->ready )
    30c2:	8d 81       	ldd	r24, Y+5	; 0x05
    30c4:	9e 81       	ldd	r25, Y+6	; 0x06
    30c6:	fc 01       	movw	r30, r24
    30c8:	24 81       	ldd	r18, Z+4	; 0x04
    30ca:	35 81       	ldd	r19, Z+5	; 0x05
    30cc:	eb 81       	ldd	r30, Y+3	; 0x03
    30ce:	fc 81       	ldd	r31, Y+4	; 0x04
    30d0:	82 81       	ldd	r24, Z+2	; 0x02
    30d2:	93 81       	ldd	r25, Z+3	; 0x03
    30d4:	28 17       	cp	r18, r24
    30d6:	39 07       	cpc	r19, r25
    30d8:	09 f0       	breq	.+2      	; 0x30dc <sched_schedule+0x82>
    30da:	94 c0       	rjmp	.+296    	; 0x3204 <sched_schedule+0x1aa>
    {
        // Переключаем cписок на следующий за текущим процесс
        SPIN_LOCK( sched );
    30dc:	8b 81       	ldd	r24, Y+3	; 0x03
    30de:	9c 81       	ldd	r25, Y+4	; 0x04
    30e0:	8a 96       	adiw	r24, 0x2a	; 42
    30e2:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>

        xlist_switch( sched->ready, ((pitem_t *)current_proc)->prio );
    30e6:	eb 81       	ldd	r30, Y+3	; 0x03
    30e8:	fc 81       	ldd	r31, Y+4	; 0x04
    30ea:	22 81       	ldd	r18, Z+2	; 0x02
    30ec:	33 81       	ldd	r19, Z+3	; 0x03
    30ee:	8d 81       	ldd	r24, Y+5	; 0x05
    30f0:	9e 81       	ldd	r25, Y+6	; 0x06
    30f2:	fc 01       	movw	r30, r24
    30f4:	46 81       	ldd	r20, Z+6	; 0x06
    30f6:	c9 01       	movw	r24, r18
    30f8:	64 2f       	mov	r22, r20
    30fa:	0e 94 76 20 	call	0x40ec	; 0x40ec <xlist_switch>

        SPIN_UNLOCK( sched );
    30fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3100:	9c 81       	ldd	r25, Y+4	; 0x04
    3102:	8a 96       	adiw	r24, 0x2a	; 42
    3104:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
        //Проверяем, не истек ли квант времени процесса
        if( current_proc->timer > (timer_t)1 )current_proc->timer--;// Не истек, уменьшаем таймер
    3108:	ed 81       	ldd	r30, Y+5	; 0x05
    310a:	fe 81       	ldd	r31, Y+6	; 0x06
    310c:	85 8d       	ldd	r24, Z+29	; 0x1d
    310e:	96 8d       	ldd	r25, Z+30	; 0x1e
    3110:	82 30       	cpi	r24, 0x02	; 2
    3112:	91 05       	cpc	r25, r1
    3114:	40 f0       	brcs	.+16     	; 0x3126 <sched_schedule+0xcc>
    3116:	ed 81       	ldd	r30, Y+5	; 0x05
    3118:	fe 81       	ldd	r31, Y+6	; 0x06
    311a:	85 8d       	ldd	r24, Z+29	; 0x1d
    311c:	96 8d       	ldd	r25, Z+30	; 0x1e
    311e:	01 97       	sbiw	r24, 0x01	; 1
    3120:	96 8f       	std	Z+30, r25	; 0x1e
    3122:	85 8f       	std	Z+29, r24	; 0x1d
    3124:	6f c0       	rjmp	.+222    	; 0x3204 <sched_schedule+0x1aa>
        else
        {
            flag_t flags;
            // Истек, вырезаем процесс из списка
            SPIN_LOCK( sched );
    3126:	8b 81       	ldd	r24, Y+3	; 0x03
    3128:	9c 81       	ldd	r25, Y+4	; 0x04
    312a:	8a 96       	adiw	r24, 0x2a	; 42
    312c:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>

            pitem_fast_cut( (pitem_t *)current_proc );
    3130:	8d 81       	ldd	r24, Y+5	; 0x05
    3132:	9e 81       	ldd	r25, Y+6	; 0x06
    3134:	0e 94 23 11 	call	0x2246	; 0x2246 <pitem_fast_cut>

            SPIN_UNLOCK( sched );
    3138:	8b 81       	ldd	r24, Y+3	; 0x03
    313a:	9c 81       	ldd	r25, Y+4	; 0x04
    313c:	8a 96       	adiw	r24, 0x2a	; 42
    313e:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
            spin_lock( &kernel.stat_lock );
            // Обновили статистику после удаления процесса из списка ready
            stat_dec( current_proc, (stat_t *)kernel.stat + current_proc->core_id );
#endif // CONFIG_USE_ALB
            // А что за процесс собственно?
            flags = current_proc->flags;
    3142:	ed 81       	ldd	r30, Y+5	; 0x05
    3144:	fe 81       	ldd	r31, Y+6	; 0x06
    3146:	87 81       	ldd	r24, Z+7	; 0x07
    3148:	90 85       	ldd	r25, Z+8	; 0x08
    314a:	9a 83       	std	Y+2, r25	; 0x02
    314c:	89 83       	std	Y+1, r24	; 0x01
            if(
    314e:	89 81       	ldd	r24, Y+1	; 0x01
    3150:	9a 81       	ldd	r25, Y+2	; 0x02
    3152:	81 70       	andi	r24, 0x01	; 1
    3154:	90 70       	andi	r25, 0x00	; 0
    3156:	00 97       	sbiw	r24, 0x00	; 0
    3158:	31 f0       	breq	.+12     	; 0x3166 <sched_schedule+0x10c>
    315a:	89 81       	ldd	r24, Y+1	; 0x01
    315c:	9a 81       	ldd	r25, Y+2	; 0x02
    315e:	8c 70       	andi	r24, 0x0C	; 12
    3160:	90 70       	andi	r25, 0x00	; 0
    3162:	00 97       	sbiw	r24, 0x00	; 0
    3164:	f1 f0       	breq	.+60     	; 0x31a2 <sched_schedule+0x148>
                SPIN_LOCK( new_sched );
                pitem_insert( (pitem_t *)current_proc, new_sched->expired );
                SPIN_UNLOCK( new_sched );
#else // CONFIG_MP CONFIG_USE_ALB
                // Тупо переносим процесс в список expired
                SPIN_LOCK( sched );
    3166:	8b 81       	ldd	r24, Y+3	; 0x03
    3168:	9c 81       	ldd	r25, Y+4	; 0x04
    316a:	8a 96       	adiw	r24, 0x2a	; 42
    316c:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>

                pitem_insert( (pitem_t *)current_proc, sched->expired );
    3170:	8d 81       	ldd	r24, Y+5	; 0x05
    3172:	9e 81       	ldd	r25, Y+6	; 0x06
    3174:	eb 81       	ldd	r30, Y+3	; 0x03
    3176:	fc 81       	ldd	r31, Y+4	; 0x04
    3178:	24 81       	ldd	r18, Z+4	; 0x04
    317a:	35 81       	ldd	r19, Z+5	; 0x05
    317c:	b9 01       	movw	r22, r18
    317e:	0e 94 cd 10 	call	0x219a	; 0x219a <pitem_insert>

                SPIN_UNLOCK( sched );
    3182:	8b 81       	ldd	r24, Y+3	; 0x03
    3184:	9c 81       	ldd	r25, Y+4	; 0x04
    3186:	8a 96       	adiw	r24, 0x2a	; 42
    3188:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>

#endif // CONFIG_MP CONFIG_USE_ALB
                current_proc->timer = current_proc->time_quant; // Сбросили таймер!
    318c:	ad 81       	ldd	r26, Y+5	; 0x05
    318e:	be 81       	ldd	r27, Y+6	; 0x06
    3190:	ed 81       	ldd	r30, Y+5	; 0x05
    3192:	fe 81       	ldd	r31, Y+6	; 0x06
    3194:	83 8d       	ldd	r24, Z+27	; 0x1b
    3196:	94 8d       	ldd	r25, Z+28	; 0x1c
    3198:	5e 96       	adiw	r26, 0x1e	; 30
    319a:	9c 93       	st	X, r25
    319c:	8e 93       	st	-X, r24
    319e:	5d 97       	sbiw	r26, 0x1d	; 29
    31a0:	31 c0       	rjmp	.+98     	; 0x3204 <sched_schedule+0x1aa>
                /*********************************************************
                Если не используется активная схема балансировки нагрузки,
                то захват нужно делать тут, блокировка захватывается только
                в этой ветви оператора if.
                *********************************************************/
                spin_lock( &kernel.stat_lock );
    31a2:	8f e8       	ldi	r24, 0x8F	; 143
    31a4:	93 e0       	ldi	r25, 0x03	; 3
    31a6:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
                stat_dec( current_proc, (stat_t *)kernel.stat + current_proc->core_id );
    31aa:	4d 81       	ldd	r20, Y+5	; 0x05
    31ac:	5e 81       	ldd	r21, Y+6	; 0x06
    31ae:	ed 81       	ldd	r30, Y+5	; 0x05
    31b0:	fe 81       	ldd	r31, Y+6	; 0x06
    31b2:	81 a1       	ldd	r24, Z+33	; 0x21
    31b4:	88 2f       	mov	r24, r24
    31b6:	90 e0       	ldi	r25, 0x00	; 0
    31b8:	9c 01       	movw	r18, r24
    31ba:	23 57       	subi	r18, 0x73	; 115
    31bc:	3c 4f       	sbci	r19, 0xFC	; 252
    31be:	ca 01       	movw	r24, r20
    31c0:	b9 01       	movw	r22, r18
    31c2:	0e 94 57 01 	call	0x2ae	; 0x2ae <stat_dec>
                 - если используется активная схема балансировки нагрузки,
                то блокировка была захвачена до входа в if;
                 - если не используется активная схема балансировки нагрузки,
                то блокировка была захвачена в этой ветви if.
                *********************************************************/
                spin_unlock( &kernel.stat_lock );
    31c6:	8f e8       	ldi	r24, 0x8F	; 143
    31c8:	93 e0       	ldi	r25, 0x03	; 3
    31ca:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
#endif // CONFIG_MP
                ((pitem_t *)current_proc)->list = (xlist_t *)0;// Просто вырезали из списка, как в pitem_cut
    31ce:	8d 81       	ldd	r24, Y+5	; 0x05
    31d0:	9e 81       	ldd	r25, Y+6	; 0x06
    31d2:	fc 01       	movw	r30, r24
    31d4:	15 82       	std	Z+5, r1	; 0x05
    31d6:	14 82       	std	Z+4, r1	; 0x04
                current_proc->flags |= PROC_FLG_WD_STOP;//Остановлен по WD
    31d8:	ad 81       	ldd	r26, Y+5	; 0x05
    31da:	be 81       	ldd	r27, Y+6	; 0x06
    31dc:	ed 81       	ldd	r30, Y+5	; 0x05
    31de:	fe 81       	ldd	r31, Y+6	; 0x06
    31e0:	87 81       	ldd	r24, Z+7	; 0x07
    31e2:	90 85       	ldd	r25, Z+8	; 0x08
    31e4:	92 60       	ori	r25, 0x02	; 2
    31e6:	18 96       	adiw	r26, 0x08	; 8
    31e8:	9c 93       	st	X, r25
    31ea:	8e 93       	st	-X, r24
    31ec:	17 97       	sbiw	r26, 0x07	; 7
                current_proc->flags &= ~PROC_FLG_RUN;
    31ee:	ad 81       	ldd	r26, Y+5	; 0x05
    31f0:	be 81       	ldd	r27, Y+6	; 0x06
    31f2:	ed 81       	ldd	r30, Y+5	; 0x05
    31f4:	fe 81       	ldd	r31, Y+6	; 0x06
    31f6:	87 81       	ldd	r24, Z+7	; 0x07
    31f8:	90 85       	ldd	r25, Z+8	; 0x08
    31fa:	8d 7f       	andi	r24, 0xFD	; 253
    31fc:	18 96       	adiw	r26, 0x08	; 8
    31fe:	9c 93       	st	X, r25
    3200:	8e 93       	st	-X, r24
    3202:	17 97       	sbiw	r26, 0x07	; 7
            }
        }
    }
    //Текущий процесс более не нужен, освобождаем его блокировку
    SPIN_UNLOCK( current_proc );
    3204:	8d 81       	ldd	r24, Y+5	; 0x05
    3206:	9e 81       	ldd	r25, Y+6	; 0x06
    3208:	83 96       	adiw	r24, 0x23	; 35
    320a:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>

    _sched_switch_current( sched, &current_proc );
    320e:	8b 81       	ldd	r24, Y+3	; 0x03
    3210:	9c 81       	ldd	r25, Y+4	; 0x04
    3212:	9e 01       	movw	r18, r28
    3214:	2b 5f       	subi	r18, 0xFB	; 251
    3216:	3f 4f       	sbci	r19, 0xFF	; 255
    3218:	b9 01       	movw	r22, r18
    321a:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <_sched_switch_current>

    SPIN_LOCK( current_proc );
    321e:	8d 81       	ldd	r24, Y+5	; 0x05
    3220:	9e 81       	ldd	r25, Y+6	; 0x06
    3222:	83 96       	adiw	r24, 0x23	; 35
    3224:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    //Хук "восстановление контекста"
    if( current_proc->rs_hook )current_proc->rs_hook( current_proc->arg );
    3228:	ed 81       	ldd	r30, Y+5	; 0x05
    322a:	fe 81       	ldd	r31, Y+6	; 0x06
    322c:	80 a5       	ldd	r24, Z+40	; 0x28
    322e:	91 a5       	ldd	r25, Z+41	; 0x29
    3230:	00 97       	sbiw	r24, 0x00	; 0
    3232:	51 f0       	breq	.+20     	; 0x3248 <sched_schedule+0x1ee>
    3234:	ed 81       	ldd	r30, Y+5	; 0x05
    3236:	fe 81       	ldd	r31, Y+6	; 0x06
    3238:	20 a5       	ldd	r18, Z+40	; 0x28
    323a:	31 a5       	ldd	r19, Z+41	; 0x29
    323c:	ed 81       	ldd	r30, Y+5	; 0x05
    323e:	fe 81       	ldd	r31, Y+6	; 0x06
    3240:	82 a5       	ldd	r24, Z+42	; 0x2a
    3242:	93 a5       	ldd	r25, Z+43	; 0x2b
    3244:	f9 01       	movw	r30, r18
    3246:	09 95       	icall

    SPIN_UNLOCK( current_proc );
    3248:	8d 81       	ldd	r24, Y+5	; 0x05
    324a:	9e 81       	ldd	r25, Y+6	; 0x06
    324c:	83 96       	adiw	r24, 0x23	; 35
    324e:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
}
    3252:	26 96       	adiw	r28, 0x06	; 6
    3254:	0f b6       	in	r0, 0x3f	; 63
    3256:	f8 94       	cli
    3258:	de bf       	out	0x3e, r29	; 62
    325a:	0f be       	out	0x3f, r0	; 63
    325c:	cd bf       	out	0x3d, r28	; 61
    325e:	cf 91       	pop	r28
    3260:	df 91       	pop	r29
    3262:	08 95       	ret

00003264 <sched_reschedule>:
//----------------------------------------------------------------------------------------
// Функция перепланирования, переключает процессы в обработчике прерывания resched
void sched_reschedule(void)
{
    3264:	df 93       	push	r29
    3266:	cf 93       	push	r28
    3268:	00 d0       	rcall	.+0      	; 0x326a <sched_reschedule+0x6>
    326a:	00 d0       	rcall	.+0      	; 0x326c <sched_reschedule+0x8>
    326c:	cd b7       	in	r28, 0x3d	; 61
    326e:	de b7       	in	r29, 0x3e	; 62
    proc_t * current_proc;
    sched_t * sched;
    sched = _SCHED_INIT();
    3270:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <current_core>
    3274:	28 2f       	mov	r18, r24
    3276:	30 e0       	ldi	r19, 0x00	; 0
    3278:	8b e2       	ldi	r24, 0x2B	; 43
    327a:	90 e0       	ldi	r25, 0x00	; 0
    327c:	ac 01       	movw	r20, r24
    327e:	24 9f       	mul	r18, r20
    3280:	c0 01       	movw	r24, r0
    3282:	25 9f       	mul	r18, r21
    3284:	90 0d       	add	r25, r0
    3286:	34 9f       	mul	r19, r20
    3288:	90 0d       	add	r25, r0
    328a:	11 24       	eor	r1, r1
    328c:	89 52       	subi	r24, 0x29	; 41
    328e:	9d 4f       	sbci	r25, 0xFD	; 253
    3290:	9a 83       	std	Y+2, r25	; 0x02
    3292:	89 83       	std	Y+1, r24	; 0x01
    // Меняем только с локального процессора, блокировку sched->lock можно не захватывать!
    current_proc = sched->current_proc;
    3294:	e9 81       	ldd	r30, Y+1	; 0x01
    3296:	fa 81       	ldd	r31, Y+2	; 0x02
    3298:	80 81       	ld	r24, Z
    329a:	91 81       	ldd	r25, Z+1	; 0x01
    329c:	9c 83       	std	Y+4, r25	; 0x04
    329e:	8b 83       	std	Y+3, r24	; 0x03
    // А вот эту блокировку обязательно надо захватить!
    SPIN_LOCK( current_proc );
    32a0:	8b 81       	ldd	r24, Y+3	; 0x03
    32a2:	9c 81       	ldd	r25, Y+4	; 0x04
    32a4:	83 96       	adiw	r24, 0x23	; 35
    32a6:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    // Хук "сохранение контекста"
    if( current_proc->sv_hook )current_proc->sv_hook( current_proc->arg );
    32aa:	eb 81       	ldd	r30, Y+3	; 0x03
    32ac:	fc 81       	ldd	r31, Y+4	; 0x04
    32ae:	86 a1       	ldd	r24, Z+38	; 0x26
    32b0:	97 a1       	ldd	r25, Z+39	; 0x27
    32b2:	00 97       	sbiw	r24, 0x00	; 0
    32b4:	51 f0       	breq	.+20     	; 0x32ca <sched_reschedule+0x66>
    32b6:	eb 81       	ldd	r30, Y+3	; 0x03
    32b8:	fc 81       	ldd	r31, Y+4	; 0x04
    32ba:	26 a1       	ldd	r18, Z+38	; 0x26
    32bc:	37 a1       	ldd	r19, Z+39	; 0x27
    32be:	eb 81       	ldd	r30, Y+3	; 0x03
    32c0:	fc 81       	ldd	r31, Y+4	; 0x04
    32c2:	82 a5       	ldd	r24, Z+42	; 0x2a
    32c4:	93 a5       	ldd	r25, Z+43	; 0x2b
    32c6:	f9 01       	movw	r30, r18
    32c8:	09 95       	icall

    SPIN_UNLOCK( current_proc );
    32ca:	8b 81       	ldd	r24, Y+3	; 0x03
    32cc:	9c 81       	ldd	r25, Y+4	; 0x04
    32ce:	83 96       	adiw	r24, 0x23	; 35
    32d0:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>

    _sched_switch_current( sched, &current_proc );
    32d4:	89 81       	ldd	r24, Y+1	; 0x01
    32d6:	9a 81       	ldd	r25, Y+2	; 0x02
    32d8:	9e 01       	movw	r18, r28
    32da:	2d 5f       	subi	r18, 0xFD	; 253
    32dc:	3f 4f       	sbci	r19, 0xFF	; 255
    32de:	b9 01       	movw	r22, r18
    32e0:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <_sched_switch_current>

    SPIN_LOCK( current_proc );
    32e4:	8b 81       	ldd	r24, Y+3	; 0x03
    32e6:	9c 81       	ldd	r25, Y+4	; 0x04
    32e8:	83 96       	adiw	r24, 0x23	; 35
    32ea:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    //Хук "восстановление контекста"
    if( current_proc->rs_hook )current_proc->rs_hook( current_proc->arg );
    32ee:	eb 81       	ldd	r30, Y+3	; 0x03
    32f0:	fc 81       	ldd	r31, Y+4	; 0x04
    32f2:	80 a5       	ldd	r24, Z+40	; 0x28
    32f4:	91 a5       	ldd	r25, Z+41	; 0x29
    32f6:	00 97       	sbiw	r24, 0x00	; 0
    32f8:	51 f0       	breq	.+20     	; 0x330e <sched_reschedule+0xaa>
    32fa:	eb 81       	ldd	r30, Y+3	; 0x03
    32fc:	fc 81       	ldd	r31, Y+4	; 0x04
    32fe:	20 a5       	ldd	r18, Z+40	; 0x28
    3300:	31 a5       	ldd	r19, Z+41	; 0x29
    3302:	eb 81       	ldd	r30, Y+3	; 0x03
    3304:	fc 81       	ldd	r31, Y+4	; 0x04
    3306:	82 a5       	ldd	r24, Z+42	; 0x2a
    3308:	93 a5       	ldd	r25, Z+43	; 0x2b
    330a:	f9 01       	movw	r30, r18
    330c:	09 95       	icall

    SPIN_UNLOCK( current_proc );
    330e:	8b 81       	ldd	r24, Y+3	; 0x03
    3310:	9c 81       	ldd	r25, Y+4	; 0x04
    3312:	83 96       	adiw	r24, 0x23	; 35
    3314:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
}
    3318:	0f 90       	pop	r0
    331a:	0f 90       	pop	r0
    331c:	0f 90       	pop	r0
    331e:	0f 90       	pop	r0
    3320:	cf 91       	pop	r28
    3322:	df 91       	pop	r29
    3324:	08 95       	ret

00003326 <sem_init_isr>:
*****************************************************************************************/
#include "../include/bugurt.h"

// Инициализация
void sem_init_isr( sem_t * sem, count_t count )
{
    3326:	df 93       	push	r29
    3328:	cf 93       	push	r28
    332a:	00 d0       	rcall	.+0      	; 0x332c <sem_init_isr+0x6>
    332c:	00 d0       	rcall	.+0      	; 0x332e <sem_init_isr+0x8>
    332e:	cd b7       	in	r28, 0x3d	; 61
    3330:	de b7       	in	r29, 0x3e	; 62
    3332:	9a 83       	std	Y+2, r25	; 0x02
    3334:	89 83       	std	Y+1, r24	; 0x01
    3336:	7c 83       	std	Y+4, r23	; 0x04
    3338:	6b 83       	std	Y+3, r22	; 0x03
    SPIN_INIT( sem );
    333a:	89 81       	ldd	r24, Y+1	; 0x01
    333c:	9a 81       	ldd	r25, Y+2	; 0x02
    333e:	43 96       	adiw	r24, 0x13	; 19
    3340:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <spin_init>
    SPIN_LOCK( sem );
    3344:	89 81       	ldd	r24, Y+1	; 0x01
    3346:	9a 81       	ldd	r25, Y+2	; 0x02
    3348:	43 96       	adiw	r24, 0x13	; 19
    334a:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>

    xlist_init( (xlist_t *)sem );
    334e:	89 81       	ldd	r24, Y+1	; 0x01
    3350:	9a 81       	ldd	r25, Y+2	; 0x02
    3352:	0e 94 20 20 	call	0x4040	; 0x4040 <xlist_init>
    sem->counter = count;
    3356:	e9 81       	ldd	r30, Y+1	; 0x01
    3358:	fa 81       	ldd	r31, Y+2	; 0x02
    335a:	8b 81       	ldd	r24, Y+3	; 0x03
    335c:	9c 81       	ldd	r25, Y+4	; 0x04
    335e:	92 8b       	std	Z+18, r25	; 0x12
    3360:	81 8b       	std	Z+17, r24	; 0x11
    SPIN_UNLOCK( sem );
    3362:	89 81       	ldd	r24, Y+1	; 0x01
    3364:	9a 81       	ldd	r25, Y+2	; 0x02
    3366:	43 96       	adiw	r24, 0x13	; 19
    3368:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
}
    336c:	0f 90       	pop	r0
    336e:	0f 90       	pop	r0
    3370:	0f 90       	pop	r0
    3372:	0f 90       	pop	r0
    3374:	cf 91       	pop	r28
    3376:	df 91       	pop	r29
    3378:	08 95       	ret

0000337a <_sem_lock>:

bool_t _sem_lock( sem_t * sem )
{
    337a:	df 93       	push	r29
    337c:	cf 93       	push	r28
    337e:	00 d0       	rcall	.+0      	; 0x3380 <_sem_lock+0x6>
    3380:	00 d0       	rcall	.+0      	; 0x3382 <_sem_lock+0x8>
    3382:	0f 92       	push	r0
    3384:	cd b7       	in	r28, 0x3d	; 61
    3386:	de b7       	in	r29, 0x3e	; 62
    3388:	9d 83       	std	Y+5, r25	; 0x05
    338a:	8c 83       	std	Y+4, r24	; 0x04
    bool_t ret = (bool_t)0;
    338c:	1b 82       	std	Y+3, r1	; 0x03
    proc_t * proc;
    proc = current_proc();
    338e:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <current_proc>
    3392:	9a 83       	std	Y+2, r25	; 0x02
    3394:	89 83       	std	Y+1, r24	; 0x01
    // Выставляем флаг захватат семафора
    SPIN_LOCK( proc );
    3396:	89 81       	ldd	r24, Y+1	; 0x01
    3398:	9a 81       	ldd	r25, Y+2	; 0x02
    339a:	83 96       	adiw	r24, 0x23	; 35
    339c:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    proc->flags |= PROC_FLG_SEM;
    33a0:	e9 81       	ldd	r30, Y+1	; 0x01
    33a2:	fa 81       	ldd	r31, Y+2	; 0x02
    33a4:	87 81       	ldd	r24, Z+7	; 0x07
    33a6:	90 85       	ldd	r25, Z+8	; 0x08
    33a8:	88 60       	ori	r24, 0x08	; 8
    33aa:	e9 81       	ldd	r30, Y+1	; 0x01
    33ac:	fa 81       	ldd	r31, Y+2	; 0x02
    33ae:	90 87       	std	Z+8, r25	; 0x08
    33b0:	87 83       	std	Z+7, r24	; 0x07
    SPIN_UNLOCK( proc );
    33b2:	89 81       	ldd	r24, Y+1	; 0x01
    33b4:	9a 81       	ldd	r25, Y+2	; 0x02
    33b6:	83 96       	adiw	r24, 0x23	; 35
    33b8:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
    // Собственно захват семафора
    SPIN_LOCK( sem );
    33bc:	8c 81       	ldd	r24, Y+4	; 0x04
    33be:	9d 81       	ldd	r25, Y+5	; 0x05
    33c0:	43 96       	adiw	r24, 0x13	; 19
    33c2:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    if( sem->counter != 0 )
    33c6:	ec 81       	ldd	r30, Y+4	; 0x04
    33c8:	fd 81       	ldd	r31, Y+5	; 0x05
    33ca:	81 89       	ldd	r24, Z+17	; 0x11
    33cc:	92 89       	ldd	r25, Z+18	; 0x12
    33ce:	00 97       	sbiw	r24, 0x00	; 0
    33d0:	61 f0       	breq	.+24     	; 0x33ea <_sem_lock+0x70>
    {
        sem->counter--;
    33d2:	ec 81       	ldd	r30, Y+4	; 0x04
    33d4:	fd 81       	ldd	r31, Y+5	; 0x05
    33d6:	81 89       	ldd	r24, Z+17	; 0x11
    33d8:	92 89       	ldd	r25, Z+18	; 0x12
    33da:	01 97       	sbiw	r24, 0x01	; 1
    33dc:	ec 81       	ldd	r30, Y+4	; 0x04
    33de:	fd 81       	ldd	r31, Y+5	; 0x05
    33e0:	92 8b       	std	Z+18, r25	; 0x12
    33e2:	81 8b       	std	Z+17, r24	; 0x11
        ret = (bool_t)1;
    33e4:	81 e0       	ldi	r24, 0x01	; 1
    33e6:	8b 83       	std	Y+3, r24	; 0x03
    33e8:	1e c0       	rjmp	.+60     	; 0x3426 <_sem_lock+0xac>
    }
    else
    {
        SPIN_LOCK( proc );
    33ea:	89 81       	ldd	r24, Y+1	; 0x01
    33ec:	9a 81       	ldd	r25, Y+2	; 0x02
    33ee:	83 96       	adiw	r24, 0x23	; 35
    33f0:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
        proc->flags |= PROC_FLG_QUEUE;
    33f4:	e9 81       	ldd	r30, Y+1	; 0x01
    33f6:	fa 81       	ldd	r31, Y+2	; 0x02
    33f8:	87 81       	ldd	r24, Z+7	; 0x07
    33fa:	90 85       	ldd	r25, Z+8	; 0x08
    33fc:	80 61       	ori	r24, 0x10	; 16
    33fe:	e9 81       	ldd	r30, Y+1	; 0x01
    3400:	fa 81       	ldd	r31, Y+2	; 0x02
    3402:	90 87       	std	Z+8, r25	; 0x08
    3404:	87 83       	std	Z+7, r24	; 0x07
        _proc_stop( proc );
    3406:	89 81       	ldd	r24, Y+1	; 0x01
    3408:	9a 81       	ldd	r25, Y+2	; 0x02
    340a:	0e 94 14 14 	call	0x2828	; 0x2828 <_proc_stop>
        pitem_insert( (pitem_t *)proc, (xlist_t *)sem );
    340e:	89 81       	ldd	r24, Y+1	; 0x01
    3410:	9a 81       	ldd	r25, Y+2	; 0x02
    3412:	2c 81       	ldd	r18, Y+4	; 0x04
    3414:	3d 81       	ldd	r19, Y+5	; 0x05
    3416:	b9 01       	movw	r22, r18
    3418:	0e 94 cd 10 	call	0x219a	; 0x219a <pitem_insert>
        SPIN_UNLOCK( proc );
    341c:	89 81       	ldd	r24, Y+1	; 0x01
    341e:	9a 81       	ldd	r25, Y+2	; 0x02
    3420:	83 96       	adiw	r24, 0x23	; 35
    3422:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
    }
    SPIN_UNLOCK( sem );
    3426:	8c 81       	ldd	r24, Y+4	; 0x04
    3428:	9d 81       	ldd	r25, Y+5	; 0x05
    342a:	43 96       	adiw	r24, 0x13	; 19
    342c:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
    return ret;
    3430:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3432:	0f 90       	pop	r0
    3434:	0f 90       	pop	r0
    3436:	0f 90       	pop	r0
    3438:	0f 90       	pop	r0
    343a:	0f 90       	pop	r0
    343c:	cf 91       	pop	r28
    343e:	df 91       	pop	r29
    3440:	08 95       	ret

00003442 <_sem_try_lock>:

bool_t _sem_try_lock( sem_t * sem )
{
    3442:	df 93       	push	r29
    3444:	cf 93       	push	r28
    3446:	00 d0       	rcall	.+0      	; 0x3448 <_sem_try_lock+0x6>
    3448:	00 d0       	rcall	.+0      	; 0x344a <_sem_try_lock+0x8>
    344a:	0f 92       	push	r0
    344c:	cd b7       	in	r28, 0x3d	; 61
    344e:	de b7       	in	r29, 0x3e	; 62
    3450:	9d 83       	std	Y+5, r25	; 0x05
    3452:	8c 83       	std	Y+4, r24	; 0x04
    bool_t ret = (bool_t)0;
    3454:	1b 82       	std	Y+3, r1	; 0x03
    SPIN_LOCK( sem );
    3456:	8c 81       	ldd	r24, Y+4	; 0x04
    3458:	9d 81       	ldd	r25, Y+5	; 0x05
    345a:	43 96       	adiw	r24, 0x13	; 19
    345c:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    if( sem->counter != 0 )
    3460:	ec 81       	ldd	r30, Y+4	; 0x04
    3462:	fd 81       	ldd	r31, Y+5	; 0x05
    3464:	81 89       	ldd	r24, Z+17	; 0x11
    3466:	92 89       	ldd	r25, Z+18	; 0x12
    3468:	00 97       	sbiw	r24, 0x00	; 0
    346a:	11 f1       	breq	.+68     	; 0x34b0 <_sem_try_lock+0x6e>
    {
        proc_t * proc;
        proc = current_proc();
    346c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <current_proc>
    3470:	9a 83       	std	Y+2, r25	; 0x02
    3472:	89 83       	std	Y+1, r24	; 0x01

        sem->counter--;
    3474:	ec 81       	ldd	r30, Y+4	; 0x04
    3476:	fd 81       	ldd	r31, Y+5	; 0x05
    3478:	81 89       	ldd	r24, Z+17	; 0x11
    347a:	92 89       	ldd	r25, Z+18	; 0x12
    347c:	01 97       	sbiw	r24, 0x01	; 1
    347e:	ec 81       	ldd	r30, Y+4	; 0x04
    3480:	fd 81       	ldd	r31, Y+5	; 0x05
    3482:	92 8b       	std	Z+18, r25	; 0x12
    3484:	81 8b       	std	Z+17, r24	; 0x11
        ret = (bool_t)1;
    3486:	81 e0       	ldi	r24, 0x01	; 1
    3488:	8b 83       	std	Y+3, r24	; 0x03
        // Выставляем флаг захватат семафора
        SPIN_LOCK( proc );
    348a:	89 81       	ldd	r24, Y+1	; 0x01
    348c:	9a 81       	ldd	r25, Y+2	; 0x02
    348e:	83 96       	adiw	r24, 0x23	; 35
    3490:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
        proc->flags |= PROC_FLG_SEM;
    3494:	e9 81       	ldd	r30, Y+1	; 0x01
    3496:	fa 81       	ldd	r31, Y+2	; 0x02
    3498:	87 81       	ldd	r24, Z+7	; 0x07
    349a:	90 85       	ldd	r25, Z+8	; 0x08
    349c:	88 60       	ori	r24, 0x08	; 8
    349e:	e9 81       	ldd	r30, Y+1	; 0x01
    34a0:	fa 81       	ldd	r31, Y+2	; 0x02
    34a2:	90 87       	std	Z+8, r25	; 0x08
    34a4:	87 83       	std	Z+7, r24	; 0x07
        SPIN_UNLOCK( proc );
    34a6:	89 81       	ldd	r24, Y+1	; 0x01
    34a8:	9a 81       	ldd	r25, Y+2	; 0x02
    34aa:	83 96       	adiw	r24, 0x23	; 35
    34ac:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
    }
    SPIN_UNLOCK( sem );
    34b0:	8c 81       	ldd	r24, Y+4	; 0x04
    34b2:	9d 81       	ldd	r25, Y+5	; 0x05
    34b4:	43 96       	adiw	r24, 0x13	; 19
    34b6:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
    return ret;
    34ba:	8b 81       	ldd	r24, Y+3	; 0x03
}
    34bc:	0f 90       	pop	r0
    34be:	0f 90       	pop	r0
    34c0:	0f 90       	pop	r0
    34c2:	0f 90       	pop	r0
    34c4:	0f 90       	pop	r0
    34c6:	cf 91       	pop	r28
    34c8:	df 91       	pop	r29
    34ca:	08 95       	ret

000034cc <sem_unlock_isr>:

void sem_unlock_isr( sem_t * sem )
{
    34cc:	df 93       	push	r29
    34ce:	cf 93       	push	r28
    34d0:	00 d0       	rcall	.+0      	; 0x34d2 <sem_unlock_isr+0x6>
    34d2:	00 d0       	rcall	.+0      	; 0x34d4 <sem_unlock_isr+0x8>
    34d4:	cd b7       	in	r28, 0x3d	; 61
    34d6:	de b7       	in	r29, 0x3e	; 62
    34d8:	9c 83       	std	Y+4, r25	; 0x04
    34da:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc;
    SPIN_LOCK( sem );
    34dc:	8b 81       	ldd	r24, Y+3	; 0x03
    34de:	9c 81       	ldd	r25, Y+4	; 0x04
    34e0:	43 96       	adiw	r24, 0x13	; 19
    34e2:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>

    if( ((xlist_t *)sem)->index == (index_t)0  )
    34e6:	eb 81       	ldd	r30, Y+3	; 0x03
    34e8:	fc 81       	ldd	r31, Y+4	; 0x04
    34ea:	80 89       	ldd	r24, Z+16	; 0x10
    34ec:	88 23       	and	r24, r24
    34ee:	51 f4       	brne	.+20     	; 0x3504 <sem_unlock_isr+0x38>
    {
        sem->counter++;
    34f0:	eb 81       	ldd	r30, Y+3	; 0x03
    34f2:	fc 81       	ldd	r31, Y+4	; 0x04
    34f4:	81 89       	ldd	r24, Z+17	; 0x11
    34f6:	92 89       	ldd	r25, Z+18	; 0x12
    34f8:	01 96       	adiw	r24, 0x01	; 1
    34fa:	eb 81       	ldd	r30, Y+3	; 0x03
    34fc:	fc 81       	ldd	r31, Y+4	; 0x04
    34fe:	92 8b       	std	Z+18, r25	; 0x12
    3500:	81 8b       	std	Z+17, r24	; 0x11
    3502:	21 c0       	rjmp	.+66     	; 0x3546 <sem_unlock_isr+0x7a>
        goto end;
    }
    proc = (proc_t *)xlist_head((xlist_t *)sem);
    3504:	8b 81       	ldd	r24, Y+3	; 0x03
    3506:	9c 81       	ldd	r25, Y+4	; 0x04
    3508:	0e 94 4a 20 	call	0x4094	; 0x4094 <xlist_head>
    350c:	9a 83       	std	Y+2, r25	; 0x02
    350e:	89 83       	std	Y+1, r24	; 0x01

    SPIN_LOCK( proc );
    3510:	89 81       	ldd	r24, Y+1	; 0x01
    3512:	9a 81       	ldd	r25, Y+2	; 0x02
    3514:	83 96       	adiw	r24, 0x23	; 35
    3516:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>

    pitem_cut( (pitem_t *)proc );
    351a:	89 81       	ldd	r24, Y+1	; 0x01
    351c:	9a 81       	ldd	r25, Y+2	; 0x02
    351e:	0e 94 82 11 	call	0x2304	; 0x2304 <pitem_cut>
    proc->flags &= ~PROC_FLG_QUEUE;
    3522:	e9 81       	ldd	r30, Y+1	; 0x01
    3524:	fa 81       	ldd	r31, Y+2	; 0x02
    3526:	87 81       	ldd	r24, Z+7	; 0x07
    3528:	90 85       	ldd	r25, Z+8	; 0x08
    352a:	8f 7e       	andi	r24, 0xEF	; 239
    352c:	e9 81       	ldd	r30, Y+1	; 0x01
    352e:	fa 81       	ldd	r31, Y+2	; 0x02
    3530:	90 87       	std	Z+8, r25	; 0x08
    3532:	87 83       	std	Z+7, r24	; 0x07
    _proc_run( proc );
    3534:	89 81       	ldd	r24, Y+1	; 0x01
    3536:	9a 81       	ldd	r25, Y+2	; 0x02
    3538:	0e 94 07 13 	call	0x260e	; 0x260e <_proc_run>

    SPIN_UNLOCK( proc );
    353c:	89 81       	ldd	r24, Y+1	; 0x01
    353e:	9a 81       	ldd	r25, Y+2	; 0x02
    3540:	83 96       	adiw	r24, 0x23	; 35
    3542:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
end:
    SPIN_UNLOCK( sem );
    3546:	8b 81       	ldd	r24, Y+3	; 0x03
    3548:	9c 81       	ldd	r25, Y+4	; 0x04
    354a:	43 96       	adiw	r24, 0x13	; 19
    354c:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
}
    3550:	0f 90       	pop	r0
    3552:	0f 90       	pop	r0
    3554:	0f 90       	pop	r0
    3556:	0f 90       	pop	r0
    3558:	cf 91       	pop	r28
    355a:	df 91       	pop	r29
    355c:	08 95       	ret

0000355e <sig_init_isr>:
*****************************************************************************************/
#include "../include/bugurt.h"
//========================================================================================
// Инициация
void sig_init_isr( sig_t * sig )
{
    355e:	df 93       	push	r29
    3560:	cf 93       	push	r28
    3562:	00 d0       	rcall	.+0      	; 0x3564 <sig_init_isr+0x6>
    3564:	0f 92       	push	r0
    3566:	cd b7       	in	r28, 0x3d	; 61
    3568:	de b7       	in	r29, 0x3e	; 62
    356a:	9b 83       	std	Y+3, r25	; 0x03
    356c:	8a 83       	std	Y+2, r24	; 0x02
#ifdef CONFIG_MP
    core_id_t i;
    SPIN_INIT( sig );
    356e:	8a 81       	ldd	r24, Y+2	; 0x02
    3570:	9b 81       	ldd	r25, Y+3	; 0x03
    3572:	84 96       	adiw	r24, 0x24	; 36
    3574:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <spin_init>
    SPIN_LOCK( sig );
    3578:	8a 81       	ldd	r24, Y+2	; 0x02
    357a:	9b 81       	ldd	r25, Y+3	; 0x03
    357c:	84 96       	adiw	r24, 0x24	; 36
    357e:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    for( i = 0; i < (core_id_t)MAX_CORES; i++ )
    3582:	19 82       	std	Y+1, r1	; 0x01
    3584:	21 c0       	rjmp	.+66     	; 0x35c8 <sig_init_isr+0x6a>
    {
        xlist_init( (xlist_t *)sig->sig_list + i );
    3586:	4a 81       	ldd	r20, Y+2	; 0x02
    3588:	5b 81       	ldd	r21, Y+3	; 0x03
    358a:	89 81       	ldd	r24, Y+1	; 0x01
    358c:	28 2f       	mov	r18, r24
    358e:	30 e0       	ldi	r19, 0x00	; 0
    3590:	c9 01       	movw	r24, r18
    3592:	82 95       	swap	r24
    3594:	92 95       	swap	r25
    3596:	90 7f       	andi	r25, 0xF0	; 240
    3598:	98 27       	eor	r25, r24
    359a:	80 7f       	andi	r24, 0xF0	; 240
    359c:	98 27       	eor	r25, r24
    359e:	82 0f       	add	r24, r18
    35a0:	93 1f       	adc	r25, r19
    35a2:	84 0f       	add	r24, r20
    35a4:	95 1f       	adc	r25, r21
    35a6:	0e 94 20 20 	call	0x4040	; 0x4040 <xlist_init>
        stat_init( (stat_t *)sig->sig_stat + i );
    35aa:	8a 81       	ldd	r24, Y+2	; 0x02
    35ac:	9b 81       	ldd	r25, Y+3	; 0x03
    35ae:	9c 01       	movw	r18, r24
    35b0:	2e 5d       	subi	r18, 0xDE	; 222
    35b2:	3f 4f       	sbci	r19, 0xFF	; 255
    35b4:	89 81       	ldd	r24, Y+1	; 0x01
    35b6:	88 2f       	mov	r24, r24
    35b8:	90 e0       	ldi	r25, 0x00	; 0
    35ba:	82 0f       	add	r24, r18
    35bc:	93 1f       	adc	r25, r19
    35be:	0e 94 48 01 	call	0x290	; 0x290 <stat_init>
{
#ifdef CONFIG_MP
    core_id_t i;
    SPIN_INIT( sig );
    SPIN_LOCK( sig );
    for( i = 0; i < (core_id_t)MAX_CORES; i++ )
    35c2:	89 81       	ldd	r24, Y+1	; 0x01
    35c4:	8f 5f       	subi	r24, 0xFF	; 255
    35c6:	89 83       	std	Y+1, r24	; 0x01
    35c8:	89 81       	ldd	r24, Y+1	; 0x01
    35ca:	82 30       	cpi	r24, 0x02	; 2
    35cc:	e0 f2       	brcs	.-72     	; 0x3586 <sig_init_isr+0x28>
    {
        xlist_init( (xlist_t *)sig->sig_list + i );
        stat_init( (stat_t *)sig->sig_stat + i );
    }
    SPIN_UNLOCK( sig );
    35ce:	8a 81       	ldd	r24, Y+2	; 0x02
    35d0:	9b 81       	ldd	r25, Y+3	; 0x03
    35d2:	84 96       	adiw	r24, 0x24	; 36
    35d4:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
#else
    xlist_init( (xlist_t *)sig );
#endif
}
    35d8:	0f 90       	pop	r0
    35da:	0f 90       	pop	r0
    35dc:	0f 90       	pop	r0
    35de:	cf 91       	pop	r28
    35e0:	df 91       	pop	r29
    35e2:	08 95       	ret

000035e4 <_sig_wait_prologue>:
//========================================================================================
// Это выполнится при постановке процесса в список ожидания сигнала
void _sig_wait_prologue( sig_t * sig )
{
    35e4:	df 93       	push	r29
    35e6:	cf 93       	push	r28
    35e8:	00 d0       	rcall	.+0      	; 0x35ea <_sig_wait_prologue+0x6>
    35ea:	00 d0       	rcall	.+0      	; 0x35ec <_sig_wait_prologue+0x8>
    35ec:	0f 92       	push	r0
    35ee:	cd b7       	in	r28, 0x3d	; 61
    35f0:	de b7       	in	r29, 0x3e	; 62
    35f2:	9d 83       	std	Y+5, r25	; 0x05
    35f4:	8c 83       	std	Y+4, r24	; 0x04
    proc_t * proc;

    SPIN_LOCK( sig );
    35f6:	8c 81       	ldd	r24, Y+4	; 0x04
    35f8:	9d 81       	ldd	r25, Y+5	; 0x05
    35fa:	84 96       	adiw	r24, 0x24	; 36
    35fc:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>

    proc = current_proc();
    3600:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <current_proc>
    3604:	9b 83       	std	Y+3, r25	; 0x03
    3606:	8a 83       	std	Y+2, r24	; 0x02
    SPIN_LOCK( proc );
    3608:	8a 81       	ldd	r24, Y+2	; 0x02
    360a:	9b 81       	ldd	r25, Y+3	; 0x03
    360c:	83 96       	adiw	r24, 0x23	; 35
    360e:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>

    // Останавливаем процесс
    proc->flags |= PROC_FLG_WAIT;
    3612:	ea 81       	ldd	r30, Y+2	; 0x02
    3614:	fb 81       	ldd	r31, Y+3	; 0x03
    3616:	87 81       	ldd	r24, Z+7	; 0x07
    3618:	90 85       	ldd	r25, Z+8	; 0x08
    361a:	80 62       	ori	r24, 0x20	; 32
    361c:	ea 81       	ldd	r30, Y+2	; 0x02
    361e:	fb 81       	ldd	r31, Y+3	; 0x03
    3620:	90 87       	std	Z+8, r25	; 0x08
    3622:	87 83       	std	Z+7, r24	; 0x07
    _proc_stop_( proc );
    3624:	8a 81       	ldd	r24, Y+2	; 0x02
    3626:	9b 81       	ldd	r25, Y+3	; 0x03
    3628:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <_proc_stop_>
    RESCHED_PROC( proc );
    362c:	ea 81       	ldd	r30, Y+2	; 0x02
    362e:	fb 81       	ldd	r31, Y+3	; 0x03
    3630:	81 a1       	ldd	r24, Z+33	; 0x21
    3632:	0e 94 b7 01 	call	0x36e	; 0x36e <resched>
        Балансировка нагрузки производится заранее,
        в этом случае получается сделать sig_broadcast  с временем выполнения O(1),
        однако про hotplug  придется забыть, ну и ладно.
        */
        core_id_t sig_core;
        sig_core = sched_load_balancer( proc, (stat_t *)sig->sig_stat );
    3636:	8c 81       	ldd	r24, Y+4	; 0x04
    3638:	9d 81       	ldd	r25, Y+5	; 0x05
    363a:	9c 01       	movw	r18, r24
    363c:	2e 5d       	subi	r18, 0xDE	; 222
    363e:	3f 4f       	sbci	r19, 0xFF	; 255
    3640:	8a 81       	ldd	r24, Y+2	; 0x02
    3642:	9b 81       	ldd	r25, Y+3	; 0x03
    3644:	b9 01       	movw	r22, r18
    3646:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <sched_load_balancer>
    364a:	89 83       	std	Y+1, r24	; 0x01

        proc->core_id = sig_core;
    364c:	ea 81       	ldd	r30, Y+2	; 0x02
    364e:	fb 81       	ldd	r31, Y+3	; 0x03
    3650:	89 81       	ldd	r24, Y+1	; 0x01
    3652:	81 a3       	std	Z+33, r24	; 0x21
        pitem_insert((pitem_t *)proc, (xlist_t *)sig + sig_core);
    3654:	6a 81       	ldd	r22, Y+2	; 0x02
    3656:	7b 81       	ldd	r23, Y+3	; 0x03
    3658:	4c 81       	ldd	r20, Y+4	; 0x04
    365a:	5d 81       	ldd	r21, Y+5	; 0x05
    365c:	89 81       	ldd	r24, Y+1	; 0x01
    365e:	28 2f       	mov	r18, r24
    3660:	30 e0       	ldi	r19, 0x00	; 0
    3662:	c9 01       	movw	r24, r18
    3664:	82 95       	swap	r24
    3666:	92 95       	swap	r25
    3668:	90 7f       	andi	r25, 0xF0	; 240
    366a:	98 27       	eor	r25, r24
    366c:	80 7f       	andi	r24, 0xF0	; 240
    366e:	98 27       	eor	r25, r24
    3670:	82 0f       	add	r24, r18
    3672:	93 1f       	adc	r25, r19
    3674:	9a 01       	movw	r18, r20
    3676:	28 0f       	add	r18, r24
    3678:	39 1f       	adc	r19, r25
    367a:	cb 01       	movw	r24, r22
    367c:	b9 01       	movw	r22, r18
    367e:	0e 94 cd 10 	call	0x219a	; 0x219a <pitem_insert>
        stat_inc( proc, (stat_t *)sig->sig_stat + sig_core );
    3682:	8c 81       	ldd	r24, Y+4	; 0x04
    3684:	9d 81       	ldd	r25, Y+5	; 0x05
    3686:	9c 01       	movw	r18, r24
    3688:	2e 5d       	subi	r18, 0xDE	; 222
    368a:	3f 4f       	sbci	r19, 0xFF	; 255
    368c:	89 81       	ldd	r24, Y+1	; 0x01
    368e:	88 2f       	mov	r24, r24
    3690:	90 e0       	ldi	r25, 0x00	; 0
    3692:	28 0f       	add	r18, r24
    3694:	39 1f       	adc	r19, r25
    3696:	8a 81       	ldd	r24, Y+2	; 0x02
    3698:	9b 81       	ldd	r25, Y+3	; 0x03
    369a:	b9 01       	movw	r22, r18
    369c:	0e 94 6f 01 	call	0x2de	; 0x2de <stat_inc>
    }
#else
    pitem_insert( (pitem_t *)proc, (xlist_t *)sig );
#endif //CONFIG_MP
    SPIN_UNLOCK( proc );
    36a0:	8a 81       	ldd	r24, Y+2	; 0x02
    36a2:	9b 81       	ldd	r25, Y+3	; 0x03
    36a4:	83 96       	adiw	r24, 0x23	; 35
    36a6:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
    SPIN_UNLOCK( sig );
    36aa:	8c 81       	ldd	r24, Y+4	; 0x04
    36ac:	9d 81       	ldd	r25, Y+5	; 0x05
    36ae:	84 96       	adiw	r24, 0x24	; 36
    36b0:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
}
    36b4:	0f 90       	pop	r0
    36b6:	0f 90       	pop	r0
    36b8:	0f 90       	pop	r0
    36ba:	0f 90       	pop	r0
    36bc:	0f 90       	pop	r0
    36be:	cf 91       	pop	r28
    36c0:	df 91       	pop	r29
    36c2:	08 95       	ret

000036c4 <_sig_wakeup_list_proc>:
//========================================================================================
//
static void _sig_wakeup_list_proc( proc_t * proc )
{
    36c4:	df 93       	push	r29
    36c6:	cf 93       	push	r28
    36c8:	00 d0       	rcall	.+0      	; 0x36ca <_sig_wakeup_list_proc+0x6>
    36ca:	cd b7       	in	r28, 0x3d	; 61
    36cc:	de b7       	in	r29, 0x3e	; 62
    36ce:	9a 83       	std	Y+2, r25	; 0x02
    36d0:	89 83       	std	Y+1, r24	; 0x01
    SPIN_LOCK( proc );
    36d2:	89 81       	ldd	r24, Y+1	; 0x01
    36d4:	9a 81       	ldd	r25, Y+2	; 0x02
    36d6:	83 96       	adiw	r24, 0x23	; 35
    36d8:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    proc->buf = ((item_t *)proc)->next;
    36dc:	e9 81       	ldd	r30, Y+1	; 0x01
    36de:	fa 81       	ldd	r31, Y+2	; 0x02
    36e0:	80 81       	ld	r24, Z
    36e2:	91 81       	ldd	r25, Z+1	; 0x01
    36e4:	e9 81       	ldd	r30, Y+1	; 0x01
    36e6:	fa 81       	ldd	r31, Y+2	; 0x02
    36e8:	90 a3       	std	Z+32, r25	; 0x20
    36ea:	87 8f       	std	Z+31, r24	; 0x1f
    item_cut( (item_t *)proc );                  // Вырезать процесс из простого списка гораздо проще, чем из xlist
    36ec:	89 81       	ldd	r24, Y+1	; 0x01
    36ee:	9a 81       	ldd	r25, Y+2	; 0x02
    36f0:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <item_cut>
    _proc_run_( proc );
    36f4:	89 81       	ldd	r24, Y+1	; 0x01
    36f6:	9a 81       	ldd	r25, Y+2	; 0x02
    36f8:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <_proc_run_>
    SPIN_UNLOCK( proc );
    36fc:	89 81       	ldd	r24, Y+1	; 0x01
    36fe:	9a 81       	ldd	r25, Y+2	; 0x02
    3700:	83 96       	adiw	r24, 0x23	; 35
    3702:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
}
    3706:	0f 90       	pop	r0
    3708:	0f 90       	pop	r0
    370a:	cf 91       	pop	r28
    370c:	df 91       	pop	r29
    370e:	08 95       	ret

00003710 <_sig_wait_epilogue>:

void _sig_wait_epilogue( void )
{
    3710:	df 93       	push	r29
    3712:	cf 93       	push	r28
    3714:	00 d0       	rcall	.+0      	; 0x3716 <_sig_wait_epilogue+0x6>
    3716:	00 d0       	rcall	.+0      	; 0x3718 <_sig_wait_epilogue+0x8>
    3718:	cd b7       	in	r28, 0x3d	; 61
    371a:	de b7       	in	r29, 0x3e	; 62
    proc_t * proc;
    proc_t * wakeup_proc;
    proc = current_proc();
    371c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <current_proc>
    3720:	9c 83       	std	Y+4, r25	; 0x04
    3722:	8b 83       	std	Y+3, r24	; 0x03

    SPIN_LOCK( proc );
    3724:	8b 81       	ldd	r24, Y+3	; 0x03
    3726:	9c 81       	ldd	r25, Y+4	; 0x04
    3728:	83 96       	adiw	r24, 0x23	; 35
    372a:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    wakeup_proc = (proc_t *)proc->buf;
    372e:	eb 81       	ldd	r30, Y+3	; 0x03
    3730:	fc 81       	ldd	r31, Y+4	; 0x04
    3732:	87 8d       	ldd	r24, Z+31	; 0x1f
    3734:	90 a1       	ldd	r25, Z+32	; 0x20
    3736:	9a 83       	std	Y+2, r25	; 0x02
    3738:	89 83       	std	Y+1, r24	; 0x01
    proc->buf = (void *)0;
    373a:	eb 81       	ldd	r30, Y+3	; 0x03
    373c:	fc 81       	ldd	r31, Y+4	; 0x04
    373e:	10 a2       	std	Z+32, r1	; 0x20
    3740:	17 8e       	std	Z+31, r1	; 0x1f
    SPIN_UNLOCK( proc );
    3742:	8b 81       	ldd	r24, Y+3	; 0x03
    3744:	9c 81       	ldd	r25, Y+4	; 0x04
    3746:	83 96       	adiw	r24, 0x23	; 35
    3748:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
    // Надо разбудить следующий процесс в списке.
    if( wakeup_proc )
    374c:	89 81       	ldd	r24, Y+1	; 0x01
    374e:	9a 81       	ldd	r25, Y+2	; 0x02
    3750:	00 97       	sbiw	r24, 0x00	; 0
    3752:	59 f0       	breq	.+22     	; 0x376a <_sig_wait_epilogue+0x5a>
    {
        // Если есть другие процессы для пробуждения, то "будим" самый приоритетный из них, он продолжит "побудку".
        if( wakeup_proc != proc )
    3754:	29 81       	ldd	r18, Y+1	; 0x01
    3756:	3a 81       	ldd	r19, Y+2	; 0x02
    3758:	8b 81       	ldd	r24, Y+3	; 0x03
    375a:	9c 81       	ldd	r25, Y+4	; 0x04
    375c:	28 17       	cp	r18, r24
    375e:	39 07       	cpc	r19, r25
    3760:	21 f0       	breq	.+8      	; 0x376a <_sig_wait_epilogue+0x5a>
        {
            //Нельзя будить себя! Будим только другой процесс!
            _sig_wakeup_list_proc( wakeup_proc );
    3762:	89 81       	ldd	r24, Y+1	; 0x01
    3764:	9a 81       	ldd	r25, Y+2	; 0x02
    3766:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <_sig_wakeup_list_proc>
        }
    }
}
    376a:	0f 90       	pop	r0
    376c:	0f 90       	pop	r0
    376e:	0f 90       	pop	r0
    3770:	0f 90       	pop	r0
    3772:	cf 91       	pop	r28
    3774:	df 91       	pop	r29
    3776:	08 95       	ret

00003778 <sig_signal_isr>:
//========================================================================================
// Будит 1 процесс, для вызова из обработчиков прерываний
void sig_signal_isr( sig_t * sig )
{
    3778:	df 93       	push	r29
    377a:	cf 93       	push	r28
    377c:	cd b7       	in	r28, 0x3d	; 61
    377e:	de b7       	in	r29, 0x3e	; 62
    3780:	29 97       	sbiw	r28, 0x09	; 9
    3782:	0f b6       	in	r0, 0x3f	; 63
    3784:	f8 94       	cli
    3786:	de bf       	out	0x3e, r29	; 62
    3788:	0f be       	out	0x3f, r0	; 63
    378a:	cd bf       	out	0x3d, r28	; 61
    378c:	99 87       	std	Y+9, r25	; 0x09
    378e:	88 87       	std	Y+8, r24	; 0x08
#ifdef CONFIG_MP
    core_id_t core;
    proc_t * proc;
    // Поиск процесса для запуска
    SPIN_LOCK( sig );// Захват блокировки сигнала
    3790:	88 85       	ldd	r24, Y+8	; 0x08
    3792:	99 85       	ldd	r25, Y+9	; 0x09
    3794:	84 96       	adiw	r24, 0x24	; 36
    3796:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    // Находим самую нагруженную  структуру stat_t в сигнале
    core = sched_highest_load_core( (stat_t *)sig->sig_stat );
    379a:	88 85       	ldd	r24, Y+8	; 0x08
    379c:	99 85       	ldd	r25, Y+9	; 0x09
    379e:	82 96       	adiw	r24, 0x22	; 34
    37a0:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <sched_highest_load_core>
    37a4:	8f 83       	std	Y+7, r24	; 0x07
    // Этот процесс мы будем запускать
    {
        xlist_t * sig_list;
        sig_list = (xlist_t *)sig->sig_list + core;
    37a6:	48 85       	ldd	r20, Y+8	; 0x08
    37a8:	59 85       	ldd	r21, Y+9	; 0x09
    37aa:	8f 81       	ldd	r24, Y+7	; 0x07
    37ac:	28 2f       	mov	r18, r24
    37ae:	30 e0       	ldi	r19, 0x00	; 0
    37b0:	c9 01       	movw	r24, r18
    37b2:	82 95       	swap	r24
    37b4:	92 95       	swap	r25
    37b6:	90 7f       	andi	r25, 0xF0	; 240
    37b8:	98 27       	eor	r25, r24
    37ba:	80 7f       	andi	r24, 0xF0	; 240
    37bc:	98 27       	eor	r25, r24
    37be:	82 0f       	add	r24, r18
    37c0:	93 1f       	adc	r25, r19
    37c2:	84 0f       	add	r24, r20
    37c4:	95 1f       	adc	r25, r21
    37c6:	9c 83       	std	Y+4, r25	; 0x04
    37c8:	8b 83       	std	Y+3, r24	; 0x03
        if(sig_list->index == (index_t)0)
    37ca:	eb 81       	ldd	r30, Y+3	; 0x03
    37cc:	fc 81       	ldd	r31, Y+4	; 0x04
    37ce:	80 89       	ldd	r24, Z+16	; 0x10
    37d0:	88 23       	and	r24, r24
    37d2:	31 f4       	brne	.+12     	; 0x37e0 <sig_signal_isr+0x68>
        {
            SPIN_UNLOCK( sig );
    37d4:	88 85       	ldd	r24, Y+8	; 0x08
    37d6:	99 85       	ldd	r25, Y+9	; 0x09
    37d8:	84 96       	adiw	r24, 0x24	; 36
    37da:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
    37de:	62 c0       	rjmp	.+196    	; 0x38a4 <sig_signal_isr+0x12c>
            return;
        }
        proc = (proc_t *)xlist_head( sig_list );
    37e0:	8b 81       	ldd	r24, Y+3	; 0x03
    37e2:	9c 81       	ldd	r25, Y+4	; 0x04
    37e4:	0e 94 4a 20 	call	0x4094	; 0x4094 <xlist_head>
    37e8:	9e 83       	std	Y+6, r25	; 0x06
    37ea:	8d 83       	std	Y+5, r24	; 0x05
    }
    SPIN_LOCK( proc );// Захват блокировки процесса
    37ec:	8d 81       	ldd	r24, Y+5	; 0x05
    37ee:	9e 81       	ldd	r25, Y+6	; 0x06
    37f0:	83 96       	adiw	r24, 0x23	; 35
    37f2:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    // Вырезаем процесс из списка ожидания сигнала
    pitem_fast_cut( (pitem_t *)proc );
    37f6:	8d 81       	ldd	r24, Y+5	; 0x05
    37f8:	9e 81       	ldd	r25, Y+6	; 0x06
    37fa:	0e 94 23 11 	call	0x2246	; 0x2246 <pitem_fast_cut>
    stat_dec( proc, (stat_t *)sig->sig_stat + core );
    37fe:	88 85       	ldd	r24, Y+8	; 0x08
    3800:	99 85       	ldd	r25, Y+9	; 0x09
    3802:	9c 01       	movw	r18, r24
    3804:	2e 5d       	subi	r18, 0xDE	; 222
    3806:	3f 4f       	sbci	r19, 0xFF	; 255
    3808:	8f 81       	ldd	r24, Y+7	; 0x07
    380a:	88 2f       	mov	r24, r24
    380c:	90 e0       	ldi	r25, 0x00	; 0
    380e:	28 0f       	add	r18, r24
    3810:	39 1f       	adc	r19, r25
    3812:	8d 81       	ldd	r24, Y+5	; 0x05
    3814:	9e 81       	ldd	r25, Y+6	; 0x06
    3816:	b9 01       	movw	r22, r18
    3818:	0e 94 57 01 	call	0x2ae	; 0x2ae <stat_dec>
    //Запуск процесса
    // Вставляем его в список ready соответствующего планировщика
    spin_lock( &kernel.stat_lock );
    381c:	8f e8       	ldi	r24, 0x8F	; 143
    381e:	93 e0       	ldi	r25, 0x03	; 3
    3820:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    stat_inc( proc, (stat_t *)kernel.stat + core ); // Обновление статистики
    3824:	8f 81       	ldd	r24, Y+7	; 0x07
    3826:	88 2f       	mov	r24, r24
    3828:	90 e0       	ldi	r25, 0x00	; 0
    382a:	9c 01       	movw	r18, r24
    382c:	23 57       	subi	r18, 0x73	; 115
    382e:	3c 4f       	sbci	r19, 0xFC	; 252
    3830:	8d 81       	ldd	r24, Y+5	; 0x05
    3832:	9e 81       	ldd	r25, Y+6	; 0x06
    3834:	b9 01       	movw	r22, r18
    3836:	0e 94 6f 01 	call	0x2de	; 0x2de <stat_inc>
    spin_unlock( &kernel.stat_lock );
    383a:	8f e8       	ldi	r24, 0x8F	; 143
    383c:	93 e0       	ldi	r25, 0x03	; 3
    383e:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
    {
        sched_t * sched;
        sched = kernel.sched + core;// Дада, нагрузка была сбалансирована на этапе постановки в список ожидания
    3842:	8f 81       	ldd	r24, Y+7	; 0x07
    3844:	28 2f       	mov	r18, r24
    3846:	30 e0       	ldi	r19, 0x00	; 0
    3848:	8b e2       	ldi	r24, 0x2B	; 43
    384a:	90 e0       	ldi	r25, 0x00	; 0
    384c:	ac 01       	movw	r20, r24
    384e:	24 9f       	mul	r18, r20
    3850:	c0 01       	movw	r24, r0
    3852:	25 9f       	mul	r18, r21
    3854:	90 0d       	add	r25, r0
    3856:	34 9f       	mul	r19, r20
    3858:	90 0d       	add	r25, r0
    385a:	11 24       	eor	r1, r1
    385c:	89 52       	subi	r24, 0x29	; 41
    385e:	9d 4f       	sbci	r25, 0xFD	; 253
    3860:	9a 83       	std	Y+2, r25	; 0x02
    3862:	89 83       	std	Y+1, r24	; 0x01
        SPIN_LOCK( sched );
    3864:	89 81       	ldd	r24, Y+1	; 0x01
    3866:	9a 81       	ldd	r25, Y+2	; 0x02
    3868:	8a 96       	adiw	r24, 0x2a	; 42
    386a:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
        pitem_insert((pitem_t *)proc, sched->ready );
    386e:	8d 81       	ldd	r24, Y+5	; 0x05
    3870:	9e 81       	ldd	r25, Y+6	; 0x06
    3872:	e9 81       	ldd	r30, Y+1	; 0x01
    3874:	fa 81       	ldd	r31, Y+2	; 0x02
    3876:	22 81       	ldd	r18, Z+2	; 0x02
    3878:	33 81       	ldd	r19, Z+3	; 0x03
    387a:	b9 01       	movw	r22, r18
    387c:	0e 94 cd 10 	call	0x219a	; 0x219a <pitem_insert>
        SPIN_UNLOCK( sched );
    3880:	89 81       	ldd	r24, Y+1	; 0x01
    3882:	9a 81       	ldd	r25, Y+2	; 0x02
    3884:	8a 96       	adiw	r24, 0x2a	; 42
    3886:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
    }
    resched(core);// Перепланировка
    388a:	8f 81       	ldd	r24, Y+7	; 0x07
    388c:	0e 94 b7 01 	call	0x36e	; 0x36e <resched>
    SPIN_UNLOCK( proc );// Освобождение блокировки процесса
    3890:	8d 81       	ldd	r24, Y+5	; 0x05
    3892:	9e 81       	ldd	r25, Y+6	; 0x06
    3894:	83 96       	adiw	r24, 0x23	; 35
    3896:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
    SPIN_UNLOCK( sig );// Освобождение блокировки сигнала
    389a:	88 85       	ldd	r24, Y+8	; 0x08
    389c:	99 85       	ldd	r25, Y+9	; 0x09
    389e:	84 96       	adiw	r24, 0x24	; 36
    38a0:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
    proc = (proc_t *)xlist_head( (xlist_t *)sig );
    pitem_fast_cut( (pitem_t *)proc );
    pitem_insert( (pitem_t *)proc, kernel.sched.ready );
    resched();
#endif //CONFIG_MP
}
    38a4:	29 96       	adiw	r28, 0x09	; 9
    38a6:	0f b6       	in	r0, 0x3f	; 63
    38a8:	f8 94       	cli
    38aa:	de bf       	out	0x3e, r29	; 62
    38ac:	0f be       	out	0x3f, r0	; 63
    38ae:	cd bf       	out	0x3d, r28	; 61
    38b0:	cf 91       	pop	r28
    38b2:	df 91       	pop	r29
    38b4:	08 95       	ret

000038b6 <sig_broadcast_isr>:
//----------------------------------------------------------------------------------------
// Будит все ожидающие процессы
void sig_broadcast_isr( sig_t * sig )
{
    38b6:	df 93       	push	r29
    38b8:	cf 93       	push	r28
    38ba:	00 d0       	rcall	.+0      	; 0x38bc <sig_broadcast_isr+0x6>
    38bc:	00 d0       	rcall	.+0      	; 0x38be <sig_broadcast_isr+0x8>
    38be:	0f 92       	push	r0
    38c0:	cd b7       	in	r28, 0x3d	; 61
    38c2:	de b7       	in	r29, 0x3e	; 62
    38c4:	9d 83       	std	Y+5, r25	; 0x05
    38c6:	8c 83       	std	Y+4, r24	; 0x04
#ifdef CONFIG_MP
    core_id_t core;
    SPIN_LOCK( sig );
    38c8:	8c 81       	ldd	r24, Y+4	; 0x04
    38ca:	9d 81       	ldd	r25, Y+5	; 0x05
    38cc:	84 96       	adiw	r24, 0x24	; 36
    38ce:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    for(core = 0; core < (core_id_t)MAX_CORES; core++)
    38d2:	1b 82       	std	Y+3, r1	; 0x03
    38d4:	3f c0       	rjmp	.+126    	; 0x3954 <sig_broadcast_isr+0x9e>
        proc_t * wakeup_proc;
        /*
        Фактически процессы еще не поставлены на выполнение,
        но обязательно будут, это надо учитывать при баланисировке нагрузки.
        */
        spin_lock( &kernel.stat_lock );
    38d6:	8f e8       	ldi	r24, 0x8F	; 143
    38d8:	93 e0       	ldi	r25, 0x03	; 3
    38da:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
        stat_merge( (stat_t *)sig->sig_stat + core, (stat_t *)kernel.stat + core );
    38de:	8c 81       	ldd	r24, Y+4	; 0x04
    38e0:	9d 81       	ldd	r25, Y+5	; 0x05
    38e2:	9c 01       	movw	r18, r24
    38e4:	2e 5d       	subi	r18, 0xDE	; 222
    38e6:	3f 4f       	sbci	r19, 0xFF	; 255
    38e8:	8b 81       	ldd	r24, Y+3	; 0x03
    38ea:	88 2f       	mov	r24, r24
    38ec:	90 e0       	ldi	r25, 0x00	; 0
    38ee:	a9 01       	movw	r20, r18
    38f0:	48 0f       	add	r20, r24
    38f2:	59 1f       	adc	r21, r25
    38f4:	8b 81       	ldd	r24, Y+3	; 0x03
    38f6:	88 2f       	mov	r24, r24
    38f8:	90 e0       	ldi	r25, 0x00	; 0
    38fa:	9c 01       	movw	r18, r24
    38fc:	23 57       	subi	r18, 0x73	; 115
    38fe:	3c 4f       	sbci	r19, 0xFC	; 252
    3900:	ca 01       	movw	r24, r20
    3902:	b9 01       	movw	r22, r18
    3904:	0e 94 87 01 	call	0x30e	; 0x30e <stat_merge>
        spin_unlock( &kernel.stat_lock );
    3908:	8f e8       	ldi	r24, 0x8F	; 143
    390a:	93 e0       	ldi	r25, 0x03	; 3
    390c:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
        /*
        Сцепляем список и будим его голову.
        */
        wakeup_proc = (proc_t *)pitem_xlist_chain( (xlist_t *)sig + core );
    3910:	4c 81       	ldd	r20, Y+4	; 0x04
    3912:	5d 81       	ldd	r21, Y+5	; 0x05
    3914:	8b 81       	ldd	r24, Y+3	; 0x03
    3916:	28 2f       	mov	r18, r24
    3918:	30 e0       	ldi	r19, 0x00	; 0
    391a:	c9 01       	movw	r24, r18
    391c:	82 95       	swap	r24
    391e:	92 95       	swap	r25
    3920:	90 7f       	andi	r25, 0xF0	; 240
    3922:	98 27       	eor	r25, r24
    3924:	80 7f       	andi	r24, 0xF0	; 240
    3926:	98 27       	eor	r25, r24
    3928:	82 0f       	add	r24, r18
    392a:	93 1f       	adc	r25, r19
    392c:	84 0f       	add	r24, r20
    392e:	95 1f       	adc	r25, r21
    3930:	0e 94 96 11 	call	0x232c	; 0x232c <pitem_xlist_chain>
    3934:	9a 83       	std	Y+2, r25	; 0x02
    3936:	89 83       	std	Y+1, r24	; 0x01
        if( wakeup_proc )
    3938:	89 81       	ldd	r24, Y+1	; 0x01
    393a:	9a 81       	ldd	r25, Y+2	; 0x02
    393c:	00 97       	sbiw	r24, 0x00	; 0
    393e:	21 f0       	breq	.+8      	; 0x3948 <sig_broadcast_isr+0x92>
        {
            _sig_wakeup_list_proc( wakeup_proc );
    3940:	89 81       	ldd	r24, Y+1	; 0x01
    3942:	9a 81       	ldd	r25, Y+2	; 0x02
    3944:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <_sig_wakeup_list_proc>
        }

        resched(core);
    3948:	8b 81       	ldd	r24, Y+3	; 0x03
    394a:	0e 94 b7 01 	call	0x36e	; 0x36e <resched>
void sig_broadcast_isr( sig_t * sig )
{
#ifdef CONFIG_MP
    core_id_t core;
    SPIN_LOCK( sig );
    for(core = 0; core < (core_id_t)MAX_CORES; core++)
    394e:	8b 81       	ldd	r24, Y+3	; 0x03
    3950:	8f 5f       	subi	r24, 0xFF	; 255
    3952:	8b 83       	std	Y+3, r24	; 0x03
    3954:	8b 81       	ldd	r24, Y+3	; 0x03
    3956:	82 30       	cpi	r24, 0x02	; 2
    3958:	08 f4       	brcc	.+2      	; 0x395c <sig_broadcast_isr+0xa6>
    395a:	bd cf       	rjmp	.-134    	; 0x38d6 <sig_broadcast_isr+0x20>
            _sig_wakeup_list_proc( wakeup_proc );
        }

        resched(core);
    }
    SPIN_UNLOCK( sig );
    395c:	8c 81       	ldd	r24, Y+4	; 0x04
    395e:	9d 81       	ldd	r25, Y+5	; 0x05
    3960:	84 96       	adiw	r24, 0x24	; 36
    3962:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
        _sig_wakeup_list_proc( wakeup_proc );
    }

    resched();
#endif //CONFIG_MP
}
    3966:	0f 90       	pop	r0
    3968:	0f 90       	pop	r0
    396a:	0f 90       	pop	r0
    396c:	0f 90       	pop	r0
    396e:	0f 90       	pop	r0
    3970:	cf 91       	pop	r28
    3972:	df 91       	pop	r29
    3974:	08 95       	ret

00003976 <do_syscall>:
syscall_t syscall_num = (syscall_t)0;
void * syscall_arg = (void *)0;

void do_syscall( void )
#endif // CONFIG_MP
{
    3976:	df 93       	push	r29
    3978:	cf 93       	push	r28
    397a:	cd b7       	in	r28, 0x3d	; 61
    397c:	de b7       	in	r29, 0x3e	; 62
    397e:	27 97       	sbiw	r28, 0x07	; 7
    3980:	0f b6       	in	r0, 0x3f	; 63
    3982:	f8 94       	cli
    3984:	de bf       	out	0x3e, r29	; 62
    3986:	0f be       	out	0x3f, r0	; 63
    3988:	cd bf       	out	0x3d, r28	; 61
    398a:	8d 83       	std	Y+5, r24	; 0x05
    398c:	7f 83       	std	Y+7, r23	; 0x07
    398e:	6e 83       	std	Y+6, r22	; 0x06
    if( syscall_num != (syscall_t)0 )
    3990:	8d 81       	ldd	r24, Y+5	; 0x05
    3992:	88 23       	and	r24, r24
    3994:	e1 f0       	breq	.+56     	; 0x39ce <do_syscall+0x58>
    {
        syscall_num--;
    3996:	8d 81       	ldd	r24, Y+5	; 0x05
    3998:	81 50       	subi	r24, 0x01	; 1
    399a:	8d 83       	std	Y+5, r24	; 0x05
        (SYSCALL_TABLE_READ(syscall_routine[syscall_num]))(syscall_arg);
    399c:	8d 81       	ldd	r24, Y+5	; 0x05
    399e:	88 2f       	mov	r24, r24
    39a0:	90 e0       	ldi	r25, 0x00	; 0
    39a2:	88 0f       	add	r24, r24
    39a4:	99 1f       	adc	r25, r25
    39a6:	88 59       	subi	r24, 0x98	; 152
    39a8:	9f 4f       	sbci	r25, 0xFF	; 255
    39aa:	9c 83       	std	Y+4, r25	; 0x04
    39ac:	8b 83       	std	Y+3, r24	; 0x03
    39ae:	8b 81       	ldd	r24, Y+3	; 0x03
    39b0:	9c 81       	ldd	r25, Y+4	; 0x04
    39b2:	fc 01       	movw	r30, r24
    39b4:	85 91       	lpm	r24, Z+
    39b6:	94 91       	lpm	r25, Z+
    39b8:	9a 83       	std	Y+2, r25	; 0x02
    39ba:	89 83       	std	Y+1, r24	; 0x01
    39bc:	fc 83       	std	Y+4, r31	; 0x04
    39be:	eb 83       	std	Y+3, r30	; 0x03
    39c0:	89 81       	ldd	r24, Y+1	; 0x01
    39c2:	9a 81       	ldd	r25, Y+2	; 0x02
    39c4:	fc 01       	movw	r30, r24
    39c6:	8e 81       	ldd	r24, Y+6	; 0x06
    39c8:	9f 81       	ldd	r25, Y+7	; 0x07
    39ca:	09 95       	icall
        syscall_num = (syscall_t)0;
    39cc:	1d 82       	std	Y+5, r1	; 0x05
    }
}
    39ce:	27 96       	adiw	r28, 0x07	; 7
    39d0:	0f b6       	in	r0, 0x3f	; 63
    39d2:	f8 94       	cli
    39d4:	de bf       	out	0x3e, r29	; 62
    39d6:	0f be       	out	0x3f, r0	; 63
    39d8:	cd bf       	out	0x3d, r28	; 61
    39da:	cf 91       	pop	r28
    39dc:	df 91       	pop	r29
    39de:	08 95       	ret

000039e0 <scall_proc_init>:
***********************************************************************************************
                                    Process control !!!
**********************************************************************************************/
/// SYSCALL_PROC_INIT
void scall_proc_init( void * arg )
{
    39e0:	8f 92       	push	r8
    39e2:	9f 92       	push	r9
    39e4:	af 92       	push	r10
    39e6:	bf 92       	push	r11
    39e8:	cf 92       	push	r12
    39ea:	df 92       	push	r13
    39ec:	ef 92       	push	r14
    39ee:	ff 92       	push	r15
    39f0:	0f 93       	push	r16
    39f2:	1f 93       	push	r17
    39f4:	df 93       	push	r29
    39f6:	cf 93       	push	r28
    39f8:	00 d0       	rcall	.+0      	; 0x39fa <scall_proc_init+0x1a>
    39fa:	cd b7       	in	r28, 0x3d	; 61
    39fc:	de b7       	in	r29, 0x3e	; 62
    39fe:	9a 83       	std	Y+2, r25	; 0x02
    3a00:	89 83       	std	Y+1, r24	; 0x01
    proc_init_isr(
    3a02:	e9 81       	ldd	r30, Y+1	; 0x01
    3a04:	fa 81       	ldd	r31, Y+2	; 0x02
    3a06:	40 81       	ld	r20, Z
    3a08:	51 81       	ldd	r21, Z+1	; 0x01
    3a0a:	e9 81       	ldd	r30, Y+1	; 0x01
    3a0c:	fa 81       	ldd	r31, Y+2	; 0x02
    3a0e:	62 81       	ldd	r22, Z+2	; 0x02
    3a10:	73 81       	ldd	r23, Z+3	; 0x03
    3a12:	e9 81       	ldd	r30, Y+1	; 0x01
    3a14:	fa 81       	ldd	r31, Y+2	; 0x02
    3a16:	24 81       	ldd	r18, Z+4	; 0x04
    3a18:	35 81       	ldd	r19, Z+5	; 0x05
    3a1a:	e9 81       	ldd	r30, Y+1	; 0x01
    3a1c:	fa 81       	ldd	r31, Y+2	; 0x02
    3a1e:	a6 81       	ldd	r26, Z+6	; 0x06
    3a20:	b7 81       	ldd	r27, Z+7	; 0x07
    3a22:	e9 81       	ldd	r30, Y+1	; 0x01
    3a24:	fa 81       	ldd	r31, Y+2	; 0x02
    3a26:	00 85       	ldd	r16, Z+8	; 0x08
    3a28:	11 85       	ldd	r17, Z+9	; 0x09
    3a2a:	e9 81       	ldd	r30, Y+1	; 0x01
    3a2c:	fa 81       	ldd	r31, Y+2	; 0x02
    3a2e:	e2 84       	ldd	r14, Z+10	; 0x0a
    3a30:	f3 84       	ldd	r15, Z+11	; 0x0b
    3a32:	e9 81       	ldd	r30, Y+1	; 0x01
    3a34:	fa 81       	ldd	r31, Y+2	; 0x02
    3a36:	d4 84       	ldd	r13, Z+12	; 0x0c
    3a38:	e9 81       	ldd	r30, Y+1	; 0x01
    3a3a:	fa 81       	ldd	r31, Y+2	; 0x02
    3a3c:	a5 84       	ldd	r10, Z+13	; 0x0d
    3a3e:	b6 84       	ldd	r11, Z+14	; 0x0e
    3a40:	e9 81       	ldd	r30, Y+1	; 0x01
    3a42:	fa 81       	ldd	r31, Y+2	; 0x02
    3a44:	97 84       	ldd	r9, Z+15	; 0x0f
    3a46:	e9 81       	ldd	r30, Y+1	; 0x01
    3a48:	fa 81       	ldd	r31, Y+2	; 0x02
    3a4a:	80 89       	ldd	r24, Z+16	; 0x10
    3a4c:	0f 92       	push	r0
    3a4e:	ed b7       	in	r30, 0x3d	; 61
    3a50:	fe b7       	in	r31, 0x3e	; 62
    3a52:	31 96       	adiw	r30, 0x01	; 1
    3a54:	80 83       	st	Z, r24
    3a56:	ca 01       	movw	r24, r20
    3a58:	a9 01       	movw	r20, r18
    3a5a:	9d 01       	movw	r18, r26
    3a5c:	cd 2c       	mov	r12, r13
    3a5e:	89 2c       	mov	r8, r9
    3a60:	0e 94 2f 12 	call	0x245e	; 0x245e <proc_init_isr>
    3a64:	0f 90       	pop	r0
              ((proc_init_arg_t *)arg)->is_rt
#ifdef CONFIG_MP
              ,((proc_init_arg_t *)arg)-> affinity
#endif // CONFIG_MP
              );
}
    3a66:	0f 90       	pop	r0
    3a68:	0f 90       	pop	r0
    3a6a:	cf 91       	pop	r28
    3a6c:	df 91       	pop	r29
    3a6e:	1f 91       	pop	r17
    3a70:	0f 91       	pop	r16
    3a72:	ff 90       	pop	r15
    3a74:	ef 90       	pop	r14
    3a76:	df 90       	pop	r13
    3a78:	cf 90       	pop	r12
    3a7a:	bf 90       	pop	r11
    3a7c:	af 90       	pop	r10
    3a7e:	9f 90       	pop	r9
    3a80:	8f 90       	pop	r8
    3a82:	08 95       	ret

00003a84 <scall_proc_run>:
}
/**********************************************************************************************
                                       SYSCALL_PROC_RUN
**********************************************************************************************/
void scall_proc_run( void * arg )
{
    3a84:	0f 93       	push	r16
    3a86:	1f 93       	push	r17
    3a88:	df 93       	push	r29
    3a8a:	cf 93       	push	r28
    3a8c:	00 d0       	rcall	.+0      	; 0x3a8e <scall_proc_run+0xa>
    3a8e:	cd b7       	in	r28, 0x3d	; 61
    3a90:	de b7       	in	r29, 0x3e	; 62
    3a92:	9a 83       	std	Y+2, r25	; 0x02
    3a94:	89 83       	std	Y+1, r24	; 0x01
    ((proc_runtime_arg_t *)arg)->ret = proc_run_isr( ((proc_runtime_arg_t *)arg)->proc );
    3a96:	09 81       	ldd	r16, Y+1	; 0x01
    3a98:	1a 81       	ldd	r17, Y+2	; 0x02
    3a9a:	e9 81       	ldd	r30, Y+1	; 0x01
    3a9c:	fa 81       	ldd	r31, Y+2	; 0x02
    3a9e:	80 81       	ld	r24, Z
    3aa0:	91 81       	ldd	r25, Z+1	; 0x01
    3aa2:	0e 94 44 13 	call	0x2688	; 0x2688 <proc_run_isr>
    3aa6:	f8 01       	movw	r30, r16
    3aa8:	82 83       	std	Z+2, r24	; 0x02
}
    3aaa:	0f 90       	pop	r0
    3aac:	0f 90       	pop	r0
    3aae:	cf 91       	pop	r28
    3ab0:	df 91       	pop	r29
    3ab2:	1f 91       	pop	r17
    3ab4:	0f 91       	pop	r16
    3ab6:	08 95       	ret

00003ab8 <proc_run>:
bool_t proc_run( proc_t * proc )
{
    3ab8:	df 93       	push	r29
    3aba:	cf 93       	push	r28
    3abc:	00 d0       	rcall	.+0      	; 0x3abe <proc_run+0x6>
    3abe:	00 d0       	rcall	.+0      	; 0x3ac0 <proc_run+0x8>
    3ac0:	0f 92       	push	r0
    3ac2:	cd b7       	in	r28, 0x3d	; 61
    3ac4:	de b7       	in	r29, 0x3e	; 62
    3ac6:	9d 83       	std	Y+5, r25	; 0x05
    3ac8:	8c 83       	std	Y+4, r24	; 0x04
    proc_runtime_arg_t scarg;
    scarg.proc = proc;
    3aca:	8c 81       	ldd	r24, Y+4	; 0x04
    3acc:	9d 81       	ldd	r25, Y+5	; 0x05
    3ace:	9a 83       	std	Y+2, r25	; 0x02
    3ad0:	89 83       	std	Y+1, r24	; 0x01
    syscall_bugurt( SYSCALL_PROC_RUN, (void *)&scarg );
    3ad2:	82 e0       	ldi	r24, 0x02	; 2
    3ad4:	9e 01       	movw	r18, r28
    3ad6:	2f 5f       	subi	r18, 0xFF	; 255
    3ad8:	3f 4f       	sbci	r19, 0xFF	; 255
    3ada:	b9 01       	movw	r22, r18
    3adc:	0e 94 34 04 	call	0x868	; 0x868 <syscall_bugurt>
    return scarg.ret;
    3ae0:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3ae2:	0f 90       	pop	r0
    3ae4:	0f 90       	pop	r0
    3ae6:	0f 90       	pop	r0
    3ae8:	0f 90       	pop	r0
    3aea:	0f 90       	pop	r0
    3aec:	cf 91       	pop	r28
    3aee:	df 91       	pop	r29
    3af0:	08 95       	ret

00003af2 <scall_proc_restart>:
/**********************************************************************************************
                                       SYSCALL_PROC_RESTART
**********************************************************************************************/
void scall_proc_restart( void * arg )
{
    3af2:	0f 93       	push	r16
    3af4:	1f 93       	push	r17
    3af6:	df 93       	push	r29
    3af8:	cf 93       	push	r28
    3afa:	00 d0       	rcall	.+0      	; 0x3afc <scall_proc_restart+0xa>
    3afc:	cd b7       	in	r28, 0x3d	; 61
    3afe:	de b7       	in	r29, 0x3e	; 62
    3b00:	9a 83       	std	Y+2, r25	; 0x02
    3b02:	89 83       	std	Y+1, r24	; 0x01
    ((proc_runtime_arg_t *)arg)->ret = proc_restart_isr( ((proc_runtime_arg_t *)arg)->proc );
    3b04:	09 81       	ldd	r16, Y+1	; 0x01
    3b06:	1a 81       	ldd	r17, Y+2	; 0x02
    3b08:	e9 81       	ldd	r30, Y+1	; 0x01
    3b0a:	fa 81       	ldd	r31, Y+2	; 0x02
    3b0c:	80 81       	ld	r24, Z
    3b0e:	91 81       	ldd	r25, Z+1	; 0x01
    3b10:	0e 94 6d 13 	call	0x26da	; 0x26da <proc_restart_isr>
    3b14:	f8 01       	movw	r30, r16
    3b16:	82 83       	std	Z+2, r24	; 0x02
}
    3b18:	0f 90       	pop	r0
    3b1a:	0f 90       	pop	r0
    3b1c:	cf 91       	pop	r28
    3b1e:	df 91       	pop	r29
    3b20:	1f 91       	pop	r17
    3b22:	0f 91       	pop	r16
    3b24:	08 95       	ret

00003b26 <scall_proc_stop>:
}
/**********************************************************************************************
                                        SYSCALL_PROC_STOP
**********************************************************************************************/
void scall_proc_stop( void * arg )
{
    3b26:	0f 93       	push	r16
    3b28:	1f 93       	push	r17
    3b2a:	df 93       	push	r29
    3b2c:	cf 93       	push	r28
    3b2e:	00 d0       	rcall	.+0      	; 0x3b30 <scall_proc_stop+0xa>
    3b30:	cd b7       	in	r28, 0x3d	; 61
    3b32:	de b7       	in	r29, 0x3e	; 62
    3b34:	9a 83       	std	Y+2, r25	; 0x02
    3b36:	89 83       	std	Y+1, r24	; 0x01
    ((proc_runtime_arg_t *)arg)->ret = proc_stop_isr( ((proc_runtime_arg_t *)arg)->proc );
    3b38:	09 81       	ldd	r16, Y+1	; 0x01
    3b3a:	1a 81       	ldd	r17, Y+2	; 0x02
    3b3c:	e9 81       	ldd	r30, Y+1	; 0x01
    3b3e:	fa 81       	ldd	r31, Y+2	; 0x02
    3b40:	80 81       	ld	r24, Z
    3b42:	91 81       	ldd	r25, Z+1	; 0x01
    3b44:	0e 94 32 14 	call	0x2864	; 0x2864 <proc_stop_isr>
    3b48:	f8 01       	movw	r30, r16
    3b4a:	82 83       	std	Z+2, r24	; 0x02
}
    3b4c:	0f 90       	pop	r0
    3b4e:	0f 90       	pop	r0
    3b50:	cf 91       	pop	r28
    3b52:	df 91       	pop	r29
    3b54:	1f 91       	pop	r17
    3b56:	0f 91       	pop	r16
    3b58:	08 95       	ret

00003b5a <scall_proc_self_stop>:
}
/**********************************************************************************************
                                    SYSCALL_PROC_SELF_STOP
**********************************************************************************************/
void scall_proc_self_stop( void * arg )
{
    3b5a:	df 93       	push	r29
    3b5c:	cf 93       	push	r28
    3b5e:	00 d0       	rcall	.+0      	; 0x3b60 <scall_proc_self_stop+0x6>
    3b60:	00 d0       	rcall	.+0      	; 0x3b62 <scall_proc_self_stop+0x8>
    3b62:	cd b7       	in	r28, 0x3d	; 61
    3b64:	de b7       	in	r29, 0x3e	; 62
    3b66:	9c 83       	std	Y+4, r25	; 0x04
    3b68:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = current_proc();
    3b6a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <current_proc>
    3b6e:	9a 83       	std	Y+2, r25	; 0x02
    3b70:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
    3b72:	89 81       	ldd	r24, Y+1	; 0x01
    3b74:	9a 81       	ldd	r25, Y+2	; 0x02
    3b76:	83 96       	adiw	r24, 0x23	; 35
    3b78:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
#endif
    _proc_stop( proc );
    3b7c:	89 81       	ldd	r24, Y+1	; 0x01
    3b7e:	9a 81       	ldd	r25, Y+2	; 0x02
    3b80:	0e 94 14 14 	call	0x2828	; 0x2828 <_proc_stop>
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
    3b84:	89 81       	ldd	r24, Y+1	; 0x01
    3b86:	9a 81       	ldd	r25, Y+2	; 0x02
    3b88:	83 96       	adiw	r24, 0x23	; 35
    3b8a:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
#endif
}
    3b8e:	0f 90       	pop	r0
    3b90:	0f 90       	pop	r0
    3b92:	0f 90       	pop	r0
    3b94:	0f 90       	pop	r0
    3b96:	cf 91       	pop	r28
    3b98:	df 91       	pop	r29
    3b9a:	08 95       	ret

00003b9c <proc_self_stop>:
void proc_self_stop(void)
{
    3b9c:	df 93       	push	r29
    3b9e:	cf 93       	push	r28
    3ba0:	cd b7       	in	r28, 0x3d	; 61
    3ba2:	de b7       	in	r29, 0x3e	; 62
    syscall_bugurt( SYSCALL_PROC_SELF_STOP, (void *)1 );
    3ba4:	85 e0       	ldi	r24, 0x05	; 5
    3ba6:	61 e0       	ldi	r22, 0x01	; 1
    3ba8:	70 e0       	ldi	r23, 0x00	; 0
    3baa:	0e 94 34 04 	call	0x868	; 0x868 <syscall_bugurt>
}
    3bae:	cf 91       	pop	r28
    3bb0:	df 91       	pop	r29
    3bb2:	08 95       	ret

00003bb4 <scall_proc_terminate>:
/**********************************************************************************************
                                    SYSCALL_PROC_TERMINATE
**********************************************************************************************/
// Останов процесса после выхода из pmain, для обертки proc_run_wrapper
void scall_proc_terminate( void * arg )
{
    3bb4:	df 93       	push	r29
    3bb6:	cf 93       	push	r28
    3bb8:	00 d0       	rcall	.+0      	; 0x3bba <scall_proc_terminate+0x6>
    3bba:	cd b7       	in	r28, 0x3d	; 61
    3bbc:	de b7       	in	r29, 0x3e	; 62
    3bbe:	9a 83       	std	Y+2, r25	; 0x02
    3bc0:	89 83       	std	Y+1, r24	; 0x01
    _proc_terminate((proc_t *)arg);
    3bc2:	89 81       	ldd	r24, Y+1	; 0x01
    3bc4:	9a 81       	ldd	r25, Y+2	; 0x02
    3bc6:	0e 94 b4 14 	call	0x2968	; 0x2968 <_proc_terminate>
}
    3bca:	0f 90       	pop	r0
    3bcc:	0f 90       	pop	r0
    3bce:	cf 91       	pop	r28
    3bd0:	df 91       	pop	r29
    3bd2:	08 95       	ret

00003bd4 <proc_run_wrapper>:
void proc_run_wrapper( proc_t * proc )
{
    3bd4:	df 93       	push	r29
    3bd6:	cf 93       	push	r28
    3bd8:	00 d0       	rcall	.+0      	; 0x3bda <proc_run_wrapper+0x6>
    3bda:	00 d0       	rcall	.+0      	; 0x3bdc <proc_run_wrapper+0x8>
    3bdc:	00 d0       	rcall	.+0      	; 0x3bde <proc_run_wrapper+0xa>
    3bde:	cd b7       	in	r28, 0x3d	; 61
    3be0:	de b7       	in	r29, 0x3e	; 62
    3be2:	9e 83       	std	Y+6, r25	; 0x06
    3be4:	8d 83       	std	Y+5, r24	; 0x05
    code_t pmain;
    void * arg;
    //Атомарно читаем pmain и arg
    disable_interrupts();
    3be6:	0e 94 14 0a 	call	0x1428	; 0x1428 <disable_interrupts>
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
    3bea:	8d 81       	ldd	r24, Y+5	; 0x05
    3bec:	9e 81       	ldd	r25, Y+6	; 0x06
    3bee:	83 96       	adiw	r24, 0x23	; 35
    3bf0:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
#endif // CONFIG_MP
    pmain = proc->pmain;
    3bf4:	ed 81       	ldd	r30, Y+5	; 0x05
    3bf6:	fe 81       	ldd	r31, Y+6	; 0x06
    3bf8:	84 a1       	ldd	r24, Z+36	; 0x24
    3bfa:	95 a1       	ldd	r25, Z+37	; 0x25
    3bfc:	9c 83       	std	Y+4, r25	; 0x04
    3bfe:	8b 83       	std	Y+3, r24	; 0x03
    arg = proc->arg;
    3c00:	ed 81       	ldd	r30, Y+5	; 0x05
    3c02:	fe 81       	ldd	r31, Y+6	; 0x06
    3c04:	82 a5       	ldd	r24, Z+42	; 0x2a
    3c06:	93 a5       	ldd	r25, Z+43	; 0x2b
    3c08:	9a 83       	std	Y+2, r25	; 0x02
    3c0a:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
    3c0c:	8d 81       	ldd	r24, Y+5	; 0x05
    3c0e:	9e 81       	ldd	r25, Y+6	; 0x06
    3c10:	83 96       	adiw	r24, 0x23	; 35
    3c12:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
#endif // CONFIG_MP
    enable_interrupts();
    3c16:	0e 94 2e 0a 	call	0x145c	; 0x145c <enable_interrupts>
    //Выполняем pmain
    pmain( arg );
    3c1a:	89 81       	ldd	r24, Y+1	; 0x01
    3c1c:	9a 81       	ldd	r25, Y+2	; 0x02
    3c1e:	eb 81       	ldd	r30, Y+3	; 0x03
    3c20:	fc 81       	ldd	r31, Y+4	; 0x04
    3c22:	09 95       	icall
    // Завершаем процесс
    syscall_bugurt( SYSCALL_PROC_TERMINATE, (void *)proc );
    3c24:	2d 81       	ldd	r18, Y+5	; 0x05
    3c26:	3e 81       	ldd	r19, Y+6	; 0x06
    3c28:	86 e0       	ldi	r24, 0x06	; 6
    3c2a:	b9 01       	movw	r22, r18
    3c2c:	0e 94 34 04 	call	0x868	; 0x868 <syscall_bugurt>
}
    3c30:	26 96       	adiw	r28, 0x06	; 6
    3c32:	0f b6       	in	r0, 0x3f	; 63
    3c34:	f8 94       	cli
    3c36:	de bf       	out	0x3e, r29	; 62
    3c38:	0f be       	out	0x3f, r0	; 63
    3c3a:	cd bf       	out	0x3d, r28	; 61
    3c3c:	cf 91       	pop	r28
    3c3e:	df 91       	pop	r29
    3c40:	08 95       	ret

00003c42 <scall_proc_flag_stop>:
/**********************************************************************************************
                                       SYSCALL_PROC_FLAG_STOP
**********************************************************************************************/
void scall_proc_flag_stop( void * arg )
{
    3c42:	df 93       	push	r29
    3c44:	cf 93       	push	r28
    3c46:	00 d0       	rcall	.+0      	; 0x3c48 <scall_proc_flag_stop+0x6>
    3c48:	cd b7       	in	r28, 0x3d	; 61
    3c4a:	de b7       	in	r29, 0x3e	; 62
    3c4c:	9a 83       	std	Y+2, r25	; 0x02
    3c4e:	89 83       	std	Y+1, r24	; 0x01
    _proc_flag_stop( *((flag_t *)arg) );
    3c50:	e9 81       	ldd	r30, Y+1	; 0x01
    3c52:	fa 81       	ldd	r31, Y+2	; 0x02
    3c54:	80 81       	ld	r24, Z
    3c56:	91 81       	ldd	r25, Z+1	; 0x01
    3c58:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <_proc_flag_stop>
}
    3c5c:	0f 90       	pop	r0
    3c5e:	0f 90       	pop	r0
    3c60:	cf 91       	pop	r28
    3c62:	df 91       	pop	r29
    3c64:	08 95       	ret

00003c66 <scall_proc_reset_watchdog>:
}
/**********************************************************************************************
                                       SYSCALL_PROC_RESET_WATCHDOG
**********************************************************************************************/
void scall_proc_reset_watchdog( void * arg )
{
    3c66:	df 93       	push	r29
    3c68:	cf 93       	push	r28
    3c6a:	00 d0       	rcall	.+0      	; 0x3c6c <scall_proc_reset_watchdog+0x6>
    3c6c:	cd b7       	in	r28, 0x3d	; 61
    3c6e:	de b7       	in	r29, 0x3e	; 62
    3c70:	9a 83       	std	Y+2, r25	; 0x02
    3c72:	89 83       	std	Y+1, r24	; 0x01
    _proc_reset_watchdog();
    3c74:	0e 94 f7 14 	call	0x29ee	; 0x29ee <_proc_reset_watchdog>
}
    3c78:	0f 90       	pop	r0
    3c7a:	0f 90       	pop	r0
    3c7c:	cf 91       	pop	r28
    3c7e:	df 91       	pop	r29
    3c80:	08 95       	ret

00003c82 <proc_reset_watchdog>:
void proc_reset_watchdog(void)
{
    3c82:	df 93       	push	r29
    3c84:	cf 93       	push	r28
    3c86:	cd b7       	in	r28, 0x3d	; 61
    3c88:	de b7       	in	r29, 0x3e	; 62
    syscall_bugurt( SYSCALL_PROC_RESET_WATCHDOG, (void *)0 );
    3c8a:	88 e0       	ldi	r24, 0x08	; 8
    3c8c:	60 e0       	ldi	r22, 0x00	; 0
    3c8e:	70 e0       	ldi	r23, 0x00	; 0
    3c90:	0e 94 34 04 	call	0x868	; 0x868 <syscall_bugurt>
}
    3c94:	cf 91       	pop	r28
    3c96:	df 91       	pop	r29
    3c98:	08 95       	ret

00003c9a <scall_sig_init>:
                                            Сигналы
***********************************************************************************************
                                      SYSCALL_PROC_RESTART
**********************************************************************************************/
void scall_sig_init( void * arg )
{
    3c9a:	df 93       	push	r29
    3c9c:	cf 93       	push	r28
    3c9e:	00 d0       	rcall	.+0      	; 0x3ca0 <scall_sig_init+0x6>
    3ca0:	cd b7       	in	r28, 0x3d	; 61
    3ca2:	de b7       	in	r29, 0x3e	; 62
    3ca4:	9a 83       	std	Y+2, r25	; 0x02
    3ca6:	89 83       	std	Y+1, r24	; 0x01
    sig_init_isr( (sig_t *)arg );
    3ca8:	89 81       	ldd	r24, Y+1	; 0x01
    3caa:	9a 81       	ldd	r25, Y+2	; 0x02
    3cac:	0e 94 af 1a 	call	0x355e	; 0x355e <sig_init_isr>
}
    3cb0:	0f 90       	pop	r0
    3cb2:	0f 90       	pop	r0
    3cb4:	cf 91       	pop	r28
    3cb6:	df 91       	pop	r29
    3cb8:	08 95       	ret

00003cba <scall_sig_wait>:
}
/**********************************************************************************************
                                       SYSCALL_SIG_WAIT
**********************************************************************************************/
void scall_sig_wait( void * arg )
{
    3cba:	df 93       	push	r29
    3cbc:	cf 93       	push	r28
    3cbe:	00 d0       	rcall	.+0      	; 0x3cc0 <scall_sig_wait+0x6>
    3cc0:	cd b7       	in	r28, 0x3d	; 61
    3cc2:	de b7       	in	r29, 0x3e	; 62
    3cc4:	9a 83       	std	Y+2, r25	; 0x02
    3cc6:	89 83       	std	Y+1, r24	; 0x01
    _sig_wait_prologue( (sig_t *)arg );
    3cc8:	89 81       	ldd	r24, Y+1	; 0x01
    3cca:	9a 81       	ldd	r25, Y+2	; 0x02
    3ccc:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <_sig_wait_prologue>
}
    3cd0:	0f 90       	pop	r0
    3cd2:	0f 90       	pop	r0
    3cd4:	cf 91       	pop	r28
    3cd6:	df 91       	pop	r29
    3cd8:	08 95       	ret

00003cda <scall_sig_wakeup>:
/**********************************************************************************************
                                       SYSCALL_SIG_WAKEUP
**********************************************************************************************/
void scall_sig_wakeup( void *arg )
{
    3cda:	df 93       	push	r29
    3cdc:	cf 93       	push	r28
    3cde:	00 d0       	rcall	.+0      	; 0x3ce0 <scall_sig_wakeup+0x6>
    3ce0:	cd b7       	in	r28, 0x3d	; 61
    3ce2:	de b7       	in	r29, 0x3e	; 62
    3ce4:	9a 83       	std	Y+2, r25	; 0x02
    3ce6:	89 83       	std	Y+1, r24	; 0x01
    _sig_wait_epilogue();
    3ce8:	0e 94 88 1b 	call	0x3710	; 0x3710 <_sig_wait_epilogue>
    _proc_flag_stop( PROC_FLG_WAIT );
    3cec:	80 e2       	ldi	r24, 0x20	; 32
    3cee:	90 e0       	ldi	r25, 0x00	; 0
    3cf0:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <_proc_flag_stop>
}
    3cf4:	0f 90       	pop	r0
    3cf6:	0f 90       	pop	r0
    3cf8:	cf 91       	pop	r28
    3cfa:	df 91       	pop	r29
    3cfc:	08 95       	ret

00003cfe <scall_sig_signal>:
}
/**********************************************************************************************
                                       SYSCALL_SIG_SIGNAL
**********************************************************************************************/
void scall_sig_signal( void * arg )
{
    3cfe:	df 93       	push	r29
    3d00:	cf 93       	push	r28
    3d02:	00 d0       	rcall	.+0      	; 0x3d04 <scall_sig_signal+0x6>
    3d04:	cd b7       	in	r28, 0x3d	; 61
    3d06:	de b7       	in	r29, 0x3e	; 62
    3d08:	9a 83       	std	Y+2, r25	; 0x02
    3d0a:	89 83       	std	Y+1, r24	; 0x01
    sig_signal_isr( (sig_t *)arg );
    3d0c:	89 81       	ldd	r24, Y+1	; 0x01
    3d0e:	9a 81       	ldd	r25, Y+2	; 0x02
    3d10:	0e 94 bc 1b 	call	0x3778	; 0x3778 <sig_signal_isr>
}
    3d14:	0f 90       	pop	r0
    3d16:	0f 90       	pop	r0
    3d18:	cf 91       	pop	r28
    3d1a:	df 91       	pop	r29
    3d1c:	08 95       	ret

00003d1e <scall_sig_broadcast>:
}
/**********************************************************************************************
                                       SYSCALL_SIG_BROADCAST
**********************************************************************************************/
void scall_sig_broadcast( void * arg )
{
    3d1e:	df 93       	push	r29
    3d20:	cf 93       	push	r28
    3d22:	00 d0       	rcall	.+0      	; 0x3d24 <scall_sig_broadcast+0x6>
    3d24:	cd b7       	in	r28, 0x3d	; 61
    3d26:	de b7       	in	r29, 0x3e	; 62
    3d28:	9a 83       	std	Y+2, r25	; 0x02
    3d2a:	89 83       	std	Y+1, r24	; 0x01
    sig_broadcast_isr( (sig_t *)arg );
    3d2c:	89 81       	ldd	r24, Y+1	; 0x01
    3d2e:	9a 81       	ldd	r25, Y+2	; 0x02
    3d30:	0e 94 5b 1c 	call	0x38b6	; 0x38b6 <sig_broadcast_isr>
}
    3d34:	0f 90       	pop	r0
    3d36:	0f 90       	pop	r0
    3d38:	cf 91       	pop	r28
    3d3a:	df 91       	pop	r29
    3d3c:	08 95       	ret

00003d3e <scall_sem_init>:
                                           Семафоры
***********************************************************************************************
                                       SYSCALL_SEM_INIT
**********************************************************************************************/
void scall_sem_init( void * arg )
{
    3d3e:	df 93       	push	r29
    3d40:	cf 93       	push	r28
    3d42:	00 d0       	rcall	.+0      	; 0x3d44 <scall_sem_init+0x6>
    3d44:	cd b7       	in	r28, 0x3d	; 61
    3d46:	de b7       	in	r29, 0x3e	; 62
    3d48:	9a 83       	std	Y+2, r25	; 0x02
    3d4a:	89 83       	std	Y+1, r24	; 0x01
    sem_init_isr( ((sem_init_arg_t *)arg)->sem, ((sem_init_arg_t *)arg)->count );
    3d4c:	e9 81       	ldd	r30, Y+1	; 0x01
    3d4e:	fa 81       	ldd	r31, Y+2	; 0x02
    3d50:	80 81       	ld	r24, Z
    3d52:	91 81       	ldd	r25, Z+1	; 0x01
    3d54:	e9 81       	ldd	r30, Y+1	; 0x01
    3d56:	fa 81       	ldd	r31, Y+2	; 0x02
    3d58:	22 81       	ldd	r18, Z+2	; 0x02
    3d5a:	33 81       	ldd	r19, Z+3	; 0x03
    3d5c:	b9 01       	movw	r22, r18
    3d5e:	0e 94 93 19 	call	0x3326	; 0x3326 <sem_init_isr>
}
    3d62:	0f 90       	pop	r0
    3d64:	0f 90       	pop	r0
    3d66:	cf 91       	pop	r28
    3d68:	df 91       	pop	r29
    3d6a:	08 95       	ret

00003d6c <scall_sem_lock>:
}
/**********************************************************************************************
                                         SYSCALL_SEM_LOCK
**********************************************************************************************/
void scall_sem_lock( void * arg )
{
    3d6c:	0f 93       	push	r16
    3d6e:	1f 93       	push	r17
    3d70:	df 93       	push	r29
    3d72:	cf 93       	push	r28
    3d74:	00 d0       	rcall	.+0      	; 0x3d76 <scall_sem_lock+0xa>
    3d76:	cd b7       	in	r28, 0x3d	; 61
    3d78:	de b7       	in	r29, 0x3e	; 62
    3d7a:	9a 83       	std	Y+2, r25	; 0x02
    3d7c:	89 83       	std	Y+1, r24	; 0x01
    ((sem_lock_arg_t *)arg)->ret = _sem_lock( ((sem_lock_arg_t *)arg)->sem );
    3d7e:	09 81       	ldd	r16, Y+1	; 0x01
    3d80:	1a 81       	ldd	r17, Y+2	; 0x02
    3d82:	e9 81       	ldd	r30, Y+1	; 0x01
    3d84:	fa 81       	ldd	r31, Y+2	; 0x02
    3d86:	80 81       	ld	r24, Z
    3d88:	91 81       	ldd	r25, Z+1	; 0x01
    3d8a:	0e 94 bd 19 	call	0x337a	; 0x337a <_sem_lock>
    3d8e:	f8 01       	movw	r30, r16
    3d90:	82 83       	std	Z+2, r24	; 0x02
}
    3d92:	0f 90       	pop	r0
    3d94:	0f 90       	pop	r0
    3d96:	cf 91       	pop	r28
    3d98:	df 91       	pop	r29
    3d9a:	1f 91       	pop	r17
    3d9c:	0f 91       	pop	r16
    3d9e:	08 95       	ret

00003da0 <scall_sem_try_lock>:
}
/**********************************************************************************************
                                       SYSCALL_SEM_TRY_LOCK
**********************************************************************************************/
void scall_sem_try_lock( void * arg )
{
    3da0:	0f 93       	push	r16
    3da2:	1f 93       	push	r17
    3da4:	df 93       	push	r29
    3da6:	cf 93       	push	r28
    3da8:	00 d0       	rcall	.+0      	; 0x3daa <scall_sem_try_lock+0xa>
    3daa:	cd b7       	in	r28, 0x3d	; 61
    3dac:	de b7       	in	r29, 0x3e	; 62
    3dae:	9a 83       	std	Y+2, r25	; 0x02
    3db0:	89 83       	std	Y+1, r24	; 0x01
    ((sem_lock_arg_t *)arg)->ret = _sem_try_lock( ((sem_lock_arg_t *)arg)->sem );
    3db2:	09 81       	ldd	r16, Y+1	; 0x01
    3db4:	1a 81       	ldd	r17, Y+2	; 0x02
    3db6:	e9 81       	ldd	r30, Y+1	; 0x01
    3db8:	fa 81       	ldd	r31, Y+2	; 0x02
    3dba:	80 81       	ld	r24, Z
    3dbc:	91 81       	ldd	r25, Z+1	; 0x01
    3dbe:	0e 94 21 1a 	call	0x3442	; 0x3442 <_sem_try_lock>
    3dc2:	f8 01       	movw	r30, r16
    3dc4:	82 83       	std	Z+2, r24	; 0x02
}
    3dc6:	0f 90       	pop	r0
    3dc8:	0f 90       	pop	r0
    3dca:	cf 91       	pop	r28
    3dcc:	df 91       	pop	r29
    3dce:	1f 91       	pop	r17
    3dd0:	0f 91       	pop	r16
    3dd2:	08 95       	ret

00003dd4 <scall_sem_unlock>:
}
/**********************************************************************************************
                                       SYSCALL_SEM_UNLOCK
**********************************************************************************************/
void scall_sem_unlock( void * arg )
{
    3dd4:	df 93       	push	r29
    3dd6:	cf 93       	push	r28
    3dd8:	00 d0       	rcall	.+0      	; 0x3dda <scall_sem_unlock+0x6>
    3dda:	cd b7       	in	r28, 0x3d	; 61
    3ddc:	de b7       	in	r29, 0x3e	; 62
    3dde:	9a 83       	std	Y+2, r25	; 0x02
    3de0:	89 83       	std	Y+1, r24	; 0x01
    sem_unlock_isr( (sem_t *)arg );
    3de2:	89 81       	ldd	r24, Y+1	; 0x01
    3de4:	9a 81       	ldd	r25, Y+2	; 0x02
    3de6:	0e 94 66 1a 	call	0x34cc	; 0x34cc <sem_unlock_isr>
}
    3dea:	0f 90       	pop	r0
    3dec:	0f 90       	pop	r0
    3dee:	cf 91       	pop	r28
    3df0:	df 91       	pop	r29
    3df2:	08 95       	ret

00003df4 <scall_mutex_init>:
                                          Мьютексы
***********************************************************************************************
                                     SYSCALL_MUTEX_INIT
**********************************************************************************************/
void scall_mutex_init(void * arg)
{
    3df4:	df 93       	push	r29
    3df6:	cf 93       	push	r28
    3df8:	00 d0       	rcall	.+0      	; 0x3dfa <scall_mutex_init+0x6>
    3dfa:	cd b7       	in	r28, 0x3d	; 61
    3dfc:	de b7       	in	r29, 0x3e	; 62
    3dfe:	9a 83       	std	Y+2, r25	; 0x02
    3e00:	89 83       	std	Y+1, r24	; 0x01
    mutex_init_isr(
    3e02:	e9 81       	ldd	r30, Y+1	; 0x01
    3e04:	fa 81       	ldd	r31, Y+2	; 0x02
    3e06:	80 81       	ld	r24, Z
    3e08:	91 81       	ldd	r25, Z+1	; 0x01
    3e0a:	e9 81       	ldd	r30, Y+1	; 0x01
    3e0c:	fa 81       	ldd	r31, Y+2	; 0x02
    3e0e:	22 81       	ldd	r18, Z+2	; 0x02
    3e10:	62 2f       	mov	r22, r18
    3e12:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <mutex_init_isr>
               ((mutex_init_arg_t *)arg)->mutex
#ifdef CONFIG_USE_HIGHEST_LOCKER
               ,((mutex_init_arg_t *)arg)->prio
#endif // CONFIG_USE_HIGHEST_LOCKER
               );
}
    3e16:	0f 90       	pop	r0
    3e18:	0f 90       	pop	r0
    3e1a:	cf 91       	pop	r28
    3e1c:	df 91       	pop	r29
    3e1e:	08 95       	ret

00003e20 <scall_mutex_lock>:
}
/**********************************************************************************************
                                    SYSCALL_MUTEX_LOCK
**********************************************************************************************/
void scall_mutex_lock(void * arg)
{
    3e20:	0f 93       	push	r16
    3e22:	1f 93       	push	r17
    3e24:	df 93       	push	r29
    3e26:	cf 93       	push	r28
    3e28:	00 d0       	rcall	.+0      	; 0x3e2a <scall_mutex_lock+0xa>
    3e2a:	cd b7       	in	r28, 0x3d	; 61
    3e2c:	de b7       	in	r29, 0x3e	; 62
    3e2e:	9a 83       	std	Y+2, r25	; 0x02
    3e30:	89 83       	std	Y+1, r24	; 0x01
    ((mutex_lock_arg_t *)arg)->ret = _mutex_lock( ((mutex_lock_arg_t *)arg)->mutex );
    3e32:	09 81       	ldd	r16, Y+1	; 0x01
    3e34:	1a 81       	ldd	r17, Y+2	; 0x02
    3e36:	e9 81       	ldd	r30, Y+1	; 0x01
    3e38:	fa 81       	ldd	r31, Y+2	; 0x02
    3e3a:	80 81       	ld	r24, Z
    3e3c:	91 81       	ldd	r25, Z+1	; 0x01
    3e3e:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <_mutex_lock>
    3e42:	f8 01       	movw	r30, r16
    3e44:	82 83       	std	Z+2, r24	; 0x02
}
    3e46:	0f 90       	pop	r0
    3e48:	0f 90       	pop	r0
    3e4a:	cf 91       	pop	r28
    3e4c:	df 91       	pop	r29
    3e4e:	1f 91       	pop	r17
    3e50:	0f 91       	pop	r16
    3e52:	08 95       	ret

00003e54 <scall_mutex_try_lock>:
// Захват
/**********************************************************************************************
                                    SYSCALL_MUTEX_TRY_LOCK
**********************************************************************************************/
void scall_mutex_try_lock(void * arg)
{
    3e54:	0f 93       	push	r16
    3e56:	1f 93       	push	r17
    3e58:	df 93       	push	r29
    3e5a:	cf 93       	push	r28
    3e5c:	00 d0       	rcall	.+0      	; 0x3e5e <scall_mutex_try_lock+0xa>
    3e5e:	cd b7       	in	r28, 0x3d	; 61
    3e60:	de b7       	in	r29, 0x3e	; 62
    3e62:	9a 83       	std	Y+2, r25	; 0x02
    3e64:	89 83       	std	Y+1, r24	; 0x01
    ((mutex_lock_arg_t *)arg)->ret = _mutex_try_lock( ((mutex_lock_arg_t *)arg)->mutex );
    3e66:	09 81       	ldd	r16, Y+1	; 0x01
    3e68:	1a 81       	ldd	r17, Y+2	; 0x02
    3e6a:	e9 81       	ldd	r30, Y+1	; 0x01
    3e6c:	fa 81       	ldd	r31, Y+2	; 0x02
    3e6e:	80 81       	ld	r24, Z
    3e70:	91 81       	ldd	r25, Z+1	; 0x01
    3e72:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <_mutex_try_lock>
    3e76:	f8 01       	movw	r30, r16
    3e78:	82 83       	std	Z+2, r24	; 0x02
}
    3e7a:	0f 90       	pop	r0
    3e7c:	0f 90       	pop	r0
    3e7e:	cf 91       	pop	r28
    3e80:	df 91       	pop	r29
    3e82:	1f 91       	pop	r17
    3e84:	0f 91       	pop	r16
    3e86:	08 95       	ret

00003e88 <scall_mutex_unlock>:
}
/**********************************************************************************************
                                   SYSCALL_MUTEX_UNLOCK
**********************************************************************************************/
void scall_mutex_unlock(void * arg)
{
    3e88:	df 93       	push	r29
    3e8a:	cf 93       	push	r28
    3e8c:	00 d0       	rcall	.+0      	; 0x3e8e <scall_mutex_unlock+0x6>
    3e8e:	cd b7       	in	r28, 0x3d	; 61
    3e90:	de b7       	in	r29, 0x3e	; 62
    3e92:	9a 83       	std	Y+2, r25	; 0x02
    3e94:	89 83       	std	Y+1, r24	; 0x01
    _mutex_unlock( (mutex_t *)arg );
    3e96:	89 81       	ldd	r24, Y+1	; 0x01
    3e98:	9a 81       	ldd	r25, Y+2	; 0x02
    3e9a:	0e 94 76 0f 	call	0x1eec	; 0x1eec <_mutex_unlock>
}
    3e9e:	0f 90       	pop	r0
    3ea0:	0f 90       	pop	r0
    3ea2:	cf 91       	pop	r28
    3ea4:	df 91       	pop	r29
    3ea6:	08 95       	ret

00003ea8 <scall_ipc_wait>:
                                           IPC
***********************************************************************************************
                                       SYSCALL_IPC_WAIT
**********************************************************************************************/
void scall_ipc_wait(void * arg)
{
    3ea8:	df 93       	push	r29
    3eaa:	cf 93       	push	r28
    3eac:	00 d0       	rcall	.+0      	; 0x3eae <scall_ipc_wait+0x6>
    3eae:	cd b7       	in	r28, 0x3d	; 61
    3eb0:	de b7       	in	r29, 0x3e	; 62
    3eb2:	9a 83       	std	Y+2, r25	; 0x02
    3eb4:	89 83       	std	Y+1, r24	; 0x01
    _ipc_wait( arg );
    3eb6:	89 81       	ldd	r24, Y+1	; 0x01
    3eb8:	9a 81       	ldd	r25, Y+2	; 0x02
    3eba:	0e 94 a5 0c 	call	0x194a	; 0x194a <_ipc_wait>
}
    3ebe:	0f 90       	pop	r0
    3ec0:	0f 90       	pop	r0
    3ec2:	cf 91       	pop	r28
    3ec4:	df 91       	pop	r29
    3ec6:	08 95       	ret

00003ec8 <scall_ipc_send>:
}
/**********************************************************************************************
                                       SYSCALL_IPC_SEND
**********************************************************************************************/
void scall_ipc_send(void * arg)
{
    3ec8:	0f 93       	push	r16
    3eca:	1f 93       	push	r17
    3ecc:	df 93       	push	r29
    3ece:	cf 93       	push	r28
    3ed0:	00 d0       	rcall	.+0      	; 0x3ed2 <scall_ipc_send+0xa>
    3ed2:	cd b7       	in	r28, 0x3d	; 61
    3ed4:	de b7       	in	r29, 0x3e	; 62
    3ed6:	9a 83       	std	Y+2, r25	; 0x02
    3ed8:	89 83       	std	Y+1, r24	; 0x01
    ((ipc_send_arg_t *)arg)->ret = ipc_send_isr( ((ipc_send_arg_t *)arg)->proc, ((ipc_send_arg_t *)arg)->data );
    3eda:	09 81       	ldd	r16, Y+1	; 0x01
    3edc:	1a 81       	ldd	r17, Y+2	; 0x02
    3ede:	e9 81       	ldd	r30, Y+1	; 0x01
    3ee0:	fa 81       	ldd	r31, Y+2	; 0x02
    3ee2:	80 81       	ld	r24, Z
    3ee4:	91 81       	ldd	r25, Z+1	; 0x01
    3ee6:	e9 81       	ldd	r30, Y+1	; 0x01
    3ee8:	fa 81       	ldd	r31, Y+2	; 0x02
    3eea:	23 81       	ldd	r18, Z+3	; 0x03
    3eec:	34 81       	ldd	r19, Z+4	; 0x04
    3eee:	b9 01       	movw	r22, r18
    3ef0:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <ipc_send_isr>
    3ef4:	f8 01       	movw	r30, r16
    3ef6:	82 83       	std	Z+2, r24	; 0x02
}
    3ef8:	0f 90       	pop	r0
    3efa:	0f 90       	pop	r0
    3efc:	cf 91       	pop	r28
    3efe:	df 91       	pop	r29
    3f00:	1f 91       	pop	r17
    3f02:	0f 91       	pop	r16
    3f04:	08 95       	ret

00003f06 <scall_ipc_exchange>:
}
/**********************************************************************************************
                                    SYSCALL_IPC_EXCHANGE
**********************************************************************************************/
void scall_ipc_exchange(void * arg)
{
    3f06:	0f 93       	push	r16
    3f08:	1f 93       	push	r17
    3f0a:	df 93       	push	r29
    3f0c:	cf 93       	push	r28
    3f0e:	00 d0       	rcall	.+0      	; 0x3f10 <scall_ipc_exchange+0xa>
    3f10:	cd b7       	in	r28, 0x3d	; 61
    3f12:	de b7       	in	r29, 0x3e	; 62
    3f14:	9a 83       	std	Y+2, r25	; 0x02
    3f16:	89 83       	std	Y+1, r24	; 0x01
    ((ipc_send_arg_t *)arg)->ret = _ipc_exchange( ((ipc_send_arg_t *)arg)->proc, ((ipc_send_arg_t *)arg)->data, ((ipc_exchange_arg_t *)arg)->receive );
    3f18:	09 81       	ldd	r16, Y+1	; 0x01
    3f1a:	1a 81       	ldd	r17, Y+2	; 0x02
    3f1c:	e9 81       	ldd	r30, Y+1	; 0x01
    3f1e:	fa 81       	ldd	r31, Y+2	; 0x02
    3f20:	80 81       	ld	r24, Z
    3f22:	91 81       	ldd	r25, Z+1	; 0x01
    3f24:	e9 81       	ldd	r30, Y+1	; 0x01
    3f26:	fa 81       	ldd	r31, Y+2	; 0x02
    3f28:	43 81       	ldd	r20, Z+3	; 0x03
    3f2a:	54 81       	ldd	r21, Z+4	; 0x04
    3f2c:	e9 81       	ldd	r30, Y+1	; 0x01
    3f2e:	fa 81       	ldd	r31, Y+2	; 0x02
    3f30:	25 81       	ldd	r18, Z+5	; 0x05
    3f32:	36 81       	ldd	r19, Z+6	; 0x06
    3f34:	ba 01       	movw	r22, r20
    3f36:	a9 01       	movw	r20, r18
    3f38:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <_ipc_exchange>
    3f3c:	f8 01       	movw	r30, r16
    3f3e:	82 83       	std	Z+2, r24	; 0x02
}
    3f40:	0f 90       	pop	r0
    3f42:	0f 90       	pop	r0
    3f44:	cf 91       	pop	r28
    3f46:	df 91       	pop	r29
    3f48:	1f 91       	pop	r17
    3f4a:	0f 91       	pop	r16
    3f4c:	08 95       	ret

00003f4e <_clear_timer>:
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
//========================================================================================
void _clear_timer(timer_t * t)
{
    3f4e:	df 93       	push	r29
    3f50:	cf 93       	push	r28
    3f52:	00 d0       	rcall	.+0      	; 0x3f54 <_clear_timer+0x6>
    3f54:	0f 92       	push	r0
    3f56:	cd b7       	in	r28, 0x3d	; 61
    3f58:	de b7       	in	r29, 0x3e	; 62
    3f5a:	9b 83       	std	Y+3, r25	; 0x03
    3f5c:	8a 83       	std	Y+2, r24	; 0x02
    ENTER_CRIT_SEC();
    3f5e:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <_enter_crit_sec>
    3f62:	89 83       	std	Y+1, r24	; 0x01
    SPIN_LOCK_KERNEL_TIMER();
    3f64:	80 e9       	ldi	r24, 0x90	; 144
    3f66:	93 e0       	ldi	r25, 0x03	; 3
    3f68:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>

    *t = kernel.timer;
    3f6c:	80 91 91 03 	lds	r24, 0x0391
    3f70:	90 91 92 03 	lds	r25, 0x0392
    3f74:	ea 81       	ldd	r30, Y+2	; 0x02
    3f76:	fb 81       	ldd	r31, Y+3	; 0x03
    3f78:	91 83       	std	Z+1, r25	; 0x01
    3f7a:	80 83       	st	Z, r24

    SPIN_UNLOCK_KERNEL_TIMER();
    3f7c:	80 e9       	ldi	r24, 0x90	; 144
    3f7e:	93 e0       	ldi	r25, 0x03	; 3
    3f80:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
    EXIT_CRIT_SEC();
    3f84:	89 81       	ldd	r24, Y+1	; 0x01
    3f86:	0e 94 0e 0c 	call	0x181c	; 0x181c <_exit_crit_sec>
}
    3f8a:	0f 90       	pop	r0
    3f8c:	0f 90       	pop	r0
    3f8e:	0f 90       	pop	r0
    3f90:	cf 91       	pop	r28
    3f92:	df 91       	pop	r29
    3f94:	08 95       	ret

00003f96 <_timer>:
//----------------------------------------------------------------------------------------
timer_t _timer(timer_t t)
{
    3f96:	df 93       	push	r29
    3f98:	cf 93       	push	r28
    3f9a:	00 d0       	rcall	.+0      	; 0x3f9c <_timer+0x6>
    3f9c:	00 d0       	rcall	.+0      	; 0x3f9e <_timer+0x8>
    3f9e:	0f 92       	push	r0
    3fa0:	cd b7       	in	r28, 0x3d	; 61
    3fa2:	de b7       	in	r29, 0x3e	; 62
    3fa4:	9d 83       	std	Y+5, r25	; 0x05
    3fa6:	8c 83       	std	Y+4, r24	; 0x04
    timer_t ret;
    ENTER_CRIT_SEC();
    3fa8:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <_enter_crit_sec>
    3fac:	89 83       	std	Y+1, r24	; 0x01
    SPIN_LOCK_KERNEL_TIMER();
    3fae:	80 e9       	ldi	r24, 0x90	; 144
    3fb0:	93 e0       	ldi	r25, 0x03	; 3
    3fb2:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>

    ret = (timer_t)kernel.timer - (timer_t)t;
    3fb6:	20 91 91 03 	lds	r18, 0x0391
    3fba:	30 91 92 03 	lds	r19, 0x0392
    3fbe:	8c 81       	ldd	r24, Y+4	; 0x04
    3fc0:	9d 81       	ldd	r25, Y+5	; 0x05
    3fc2:	a9 01       	movw	r20, r18
    3fc4:	48 1b       	sub	r20, r24
    3fc6:	59 0b       	sbc	r21, r25
    3fc8:	ca 01       	movw	r24, r20
    3fca:	9b 83       	std	Y+3, r25	; 0x03
    3fcc:	8a 83       	std	Y+2, r24	; 0x02

    SPIN_UNLOCK_KERNEL_TIMER();
    3fce:	80 e9       	ldi	r24, 0x90	; 144
    3fd0:	93 e0       	ldi	r25, 0x03	; 3
    3fd2:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
    EXIT_CRIT_SEC();
    3fd6:	89 81       	ldd	r24, Y+1	; 0x01
    3fd8:	0e 94 0e 0c 	call	0x181c	; 0x181c <_exit_crit_sec>

    return ret;
    3fdc:	8a 81       	ldd	r24, Y+2	; 0x02
    3fde:	9b 81       	ldd	r25, Y+3	; 0x03
}
    3fe0:	0f 90       	pop	r0
    3fe2:	0f 90       	pop	r0
    3fe4:	0f 90       	pop	r0
    3fe6:	0f 90       	pop	r0
    3fe8:	0f 90       	pop	r0
    3fea:	cf 91       	pop	r28
    3fec:	df 91       	pop	r29
    3fee:	08 95       	ret

00003ff0 <wait_time>:

//----------------------------------------------------------------------------------------
void wait_time(timer_t time)
{
    3ff0:	df 93       	push	r29
    3ff2:	cf 93       	push	r28
    3ff4:	00 d0       	rcall	.+0      	; 0x3ff6 <wait_time+0x6>
    3ff6:	00 d0       	rcall	.+0      	; 0x3ff8 <wait_time+0x8>
    3ff8:	0f 92       	push	r0
    3ffa:	cd b7       	in	r28, 0x3d	; 61
    3ffc:	de b7       	in	r29, 0x3e	; 62
    3ffe:	9d 83       	std	Y+5, r25	; 0x05
    4000:	8c 83       	std	Y+4, r24	; 0x04
    timer_t tmr;
    bool_t roll=(bool_t)1;
    4002:	81 e0       	ldi	r24, 0x01	; 1
    4004:	89 83       	std	Y+1, r24	; 0x01
    CLEAR_TIMER(tmr);
    4006:	ce 01       	movw	r24, r28
    4008:	02 96       	adiw	r24, 0x02	; 2
    400a:	0e 94 a7 1f 	call	0x3f4e	; 0x3f4e <_clear_timer>
    400e:	0d c0       	rjmp	.+26     	; 0x402a <wait_time+0x3a>
    while((bool_t)roll)
    {
        roll = (bool_t)( TIMER(tmr) < (timer_t)time );
    4010:	8a 81       	ldd	r24, Y+2	; 0x02
    4012:	9b 81       	ldd	r25, Y+3	; 0x03
    4014:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <_timer>
    4018:	9c 01       	movw	r18, r24
    401a:	8c 81       	ldd	r24, Y+4	; 0x04
    401c:	9d 81       	ldd	r25, Y+5	; 0x05
    401e:	19 82       	std	Y+1, r1	; 0x01
    4020:	28 17       	cp	r18, r24
    4022:	39 07       	cpc	r19, r25
    4024:	10 f4       	brcc	.+4      	; 0x402a <wait_time+0x3a>
    4026:	81 e0       	ldi	r24, 0x01	; 1
    4028:	89 83       	std	Y+1, r24	; 0x01
void wait_time(timer_t time)
{
    timer_t tmr;
    bool_t roll=(bool_t)1;
    CLEAR_TIMER(tmr);
    while((bool_t)roll)
    402a:	89 81       	ldd	r24, Y+1	; 0x01
    402c:	88 23       	and	r24, r24
    402e:	81 f7       	brne	.-32     	; 0x4010 <wait_time+0x20>
    {
        roll = (bool_t)( TIMER(tmr) < (timer_t)time );
    }
}
    4030:	0f 90       	pop	r0
    4032:	0f 90       	pop	r0
    4034:	0f 90       	pop	r0
    4036:	0f 90       	pop	r0
    4038:	0f 90       	pop	r0
    403a:	cf 91       	pop	r28
    403c:	df 91       	pop	r29
    403e:	08 95       	ret

00004040 <xlist_init>:
**********************************************/
//Инициация
void xlist_init(
    xlist_t * xlist
)
{
    4040:	df 93       	push	r29
    4042:	cf 93       	push	r28
    4044:	00 d0       	rcall	.+0      	; 0x4046 <xlist_init+0x6>
    4046:	00 d0       	rcall	.+0      	; 0x4048 <xlist_init+0x8>
    4048:	cd b7       	in	r28, 0x3d	; 61
    404a:	de b7       	in	r29, 0x3e	; 62
    404c:	9c 83       	std	Y+4, r25	; 0x04
    404e:	8b 83       	std	Y+3, r24	; 0x03
    count_t i;
    //список пуст
    xlist->index = (index_t)0;
    4050:	eb 81       	ldd	r30, Y+3	; 0x03
    4052:	fc 81       	ldd	r31, Y+4	; 0x04
    4054:	10 8a       	std	Z+16, r1	; 0x10
    //обнуляем указатели
    for( i = 0; i < BITS_IN_INDEX_T; i++ )xlist->item[i] = (item_t *)0;
    4056:	1a 82       	std	Y+2, r1	; 0x02
    4058:	19 82       	std	Y+1, r1	; 0x01
    405a:	10 c0       	rjmp	.+32     	; 0x407c <xlist_init+0x3c>
    405c:	89 81       	ldd	r24, Y+1	; 0x01
    405e:	9a 81       	ldd	r25, Y+2	; 0x02
    4060:	2b 81       	ldd	r18, Y+3	; 0x03
    4062:	3c 81       	ldd	r19, Y+4	; 0x04
    4064:	88 0f       	add	r24, r24
    4066:	99 1f       	adc	r25, r25
    4068:	f9 01       	movw	r30, r18
    406a:	e8 0f       	add	r30, r24
    406c:	f9 1f       	adc	r31, r25
    406e:	11 82       	std	Z+1, r1	; 0x01
    4070:	10 82       	st	Z, r1
    4072:	89 81       	ldd	r24, Y+1	; 0x01
    4074:	9a 81       	ldd	r25, Y+2	; 0x02
    4076:	01 96       	adiw	r24, 0x01	; 1
    4078:	9a 83       	std	Y+2, r25	; 0x02
    407a:	89 83       	std	Y+1, r24	; 0x01
    407c:	89 81       	ldd	r24, Y+1	; 0x01
    407e:	9a 81       	ldd	r25, Y+2	; 0x02
    4080:	88 30       	cpi	r24, 0x08	; 8
    4082:	91 05       	cpc	r25, r1
    4084:	58 f3       	brcs	.-42     	; 0x405c <xlist_init+0x1c>
}
    4086:	0f 90       	pop	r0
    4088:	0f 90       	pop	r0
    408a:	0f 90       	pop	r0
    408c:	0f 90       	pop	r0
    408e:	cf 91       	pop	r28
    4090:	df 91       	pop	r29
    4092:	08 95       	ret

00004094 <xlist_head>:
//===========================================================================
//Поиск головы списка
item_t * xlist_head(xlist_t * xlist)
{
    4094:	df 93       	push	r29
    4096:	cf 93       	push	r28
    4098:	00 d0       	rcall	.+0      	; 0x409a <xlist_head+0x6>
    409a:	00 d0       	rcall	.+0      	; 0x409c <xlist_head+0x8>
    409c:	0f 92       	push	r0
    409e:	cd b7       	in	r28, 0x3d	; 61
    40a0:	de b7       	in	r29, 0x3e	; 62
    40a2:	9d 83       	std	Y+5, r25	; 0x05
    40a4:	8c 83       	std	Y+4, r24	; 0x04
    item_t * ret_val = (item_t *)0;
    40a6:	1b 82       	std	Y+3, r1	; 0x03
    40a8:	1a 82       	std	Y+2, r1	; 0x02
    index_t index;
    index = xlist->index;
    40aa:	ec 81       	ldd	r30, Y+4	; 0x04
    40ac:	fd 81       	ldd	r31, Y+5	; 0x05
    40ae:	80 89       	ldd	r24, Z+16	; 0x10
    40b0:	89 83       	std	Y+1, r24	; 0x01

    if( index != (index_t)0 )
    40b2:	89 81       	ldd	r24, Y+1	; 0x01
    40b4:	88 23       	and	r24, r24
    40b6:	81 f0       	breq	.+32     	; 0x40d8 <xlist_head+0x44>
    {
        ret_val = xlist->item[ index_search( index ) ];
    40b8:	89 81       	ldd	r24, Y+1	; 0x01
    40ba:	0e 94 66 0c 	call	0x18cc	; 0x18cc <index_search>
    40be:	88 2f       	mov	r24, r24
    40c0:	90 e0       	ldi	r25, 0x00	; 0
    40c2:	2c 81       	ldd	r18, Y+4	; 0x04
    40c4:	3d 81       	ldd	r19, Y+5	; 0x05
    40c6:	88 0f       	add	r24, r24
    40c8:	99 1f       	adc	r25, r25
    40ca:	f9 01       	movw	r30, r18
    40cc:	e8 0f       	add	r30, r24
    40ce:	f9 1f       	adc	r31, r25
    40d0:	80 81       	ld	r24, Z
    40d2:	91 81       	ldd	r25, Z+1	; 0x01
    40d4:	9b 83       	std	Y+3, r25	; 0x03
    40d6:	8a 83       	std	Y+2, r24	; 0x02
    }
    return ret_val;
    40d8:	8a 81       	ldd	r24, Y+2	; 0x02
    40da:	9b 81       	ldd	r25, Y+3	; 0x03
}
    40dc:	0f 90       	pop	r0
    40de:	0f 90       	pop	r0
    40e0:	0f 90       	pop	r0
    40e2:	0f 90       	pop	r0
    40e4:	0f 90       	pop	r0
    40e6:	cf 91       	pop	r28
    40e8:	df 91       	pop	r29
    40ea:	08 95       	ret

000040ec <xlist_switch>:

//===========================================================================
// переключение указателя в массиве на следующий элемент, пригодится в планировщике
void xlist_switch(xlist_t * xlist, prio_t prio)
{
    40ec:	df 93       	push	r29
    40ee:	cf 93       	push	r28
    40f0:	00 d0       	rcall	.+0      	; 0x40f2 <xlist_switch+0x6>
    40f2:	00 d0       	rcall	.+0      	; 0x40f4 <xlist_switch+0x8>
    40f4:	0f 92       	push	r0
    40f6:	cd b7       	in	r28, 0x3d	; 61
    40f8:	de b7       	in	r29, 0x3e	; 62
    40fa:	9c 83       	std	Y+4, r25	; 0x04
    40fc:	8b 83       	std	Y+3, r24	; 0x03
    40fe:	6d 83       	std	Y+5, r22	; 0x05
    item_t ** current;
    current = xlist->item + prio;
    4100:	2b 81       	ldd	r18, Y+3	; 0x03
    4102:	3c 81       	ldd	r19, Y+4	; 0x04
    4104:	8d 81       	ldd	r24, Y+5	; 0x05
    4106:	88 2f       	mov	r24, r24
    4108:	90 e0       	ldi	r25, 0x00	; 0
    410a:	88 0f       	add	r24, r24
    410c:	99 1f       	adc	r25, r25
    410e:	82 0f       	add	r24, r18
    4110:	93 1f       	adc	r25, r19
    4112:	9a 83       	std	Y+2, r25	; 0x02
    4114:	89 83       	std	Y+1, r24	; 0x01
    *current = (*current)->next;
    4116:	e9 81       	ldd	r30, Y+1	; 0x01
    4118:	fa 81       	ldd	r31, Y+2	; 0x02
    411a:	01 90       	ld	r0, Z+
    411c:	f0 81       	ld	r31, Z
    411e:	e0 2d       	mov	r30, r0
    4120:	80 81       	ld	r24, Z
    4122:	91 81       	ldd	r25, Z+1	; 0x01
    4124:	e9 81       	ldd	r30, Y+1	; 0x01
    4126:	fa 81       	ldd	r31, Y+2	; 0x02
    4128:	91 83       	std	Z+1, r25	; 0x01
    412a:	80 83       	st	Z, r24
    //*current = (item_t *)*(item_t **)*(item_t ***)current;
}
    412c:	0f 90       	pop	r0
    412e:	0f 90       	pop	r0
    4130:	0f 90       	pop	r0
    4132:	0f 90       	pop	r0
    4134:	0f 90       	pop	r0
    4136:	cf 91       	pop	r28
    4138:	df 91       	pop	r29
    413a:	08 95       	ret

0000413c <main0>:

proc_t proc[6];
stack_t proc_stack[6][128];

void main0(void * t)
{
    413c:	df 93       	push	r29
    413e:	cf 93       	push	r28
    4140:	00 d0       	rcall	.+0      	; 0x4142 <main0+0x6>
    4142:	cd b7       	in	r28, 0x3d	; 61
    4144:	de b7       	in	r29, 0x3e	; 62
    4146:	9a 83       	std	Y+2, r25	; 0x02
    4148:	89 83       	std	Y+1, r24	; 0x01
    while(1)
    {
        wait_time(10);
    414a:	8a e0       	ldi	r24, 0x0A	; 10
    414c:	90 e0       	ldi	r25, 0x00	; 0
    414e:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <wait_time>
    4152:	fb cf       	rjmp	.-10     	; 0x414a <main0+0xe>

00004154 <main1>:
    }
}

void main1(void * t)
{
    4154:	df 93       	push	r29
    4156:	cf 93       	push	r28
    4158:	00 d0       	rcall	.+0      	; 0x415a <main1+0x6>
    415a:	cd b7       	in	r28, 0x3d	; 61
    415c:	de b7       	in	r29, 0x3e	; 62
    415e:	9a 83       	std	Y+2, r25	; 0x02
    4160:	89 83       	std	Y+1, r24	; 0x01
    while(1)
    {
        wait_time(10);
    4162:	8a e0       	ldi	r24, 0x0A	; 10
    4164:	90 e0       	ldi	r25, 0x00	; 0
    4166:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <wait_time>
    416a:	fb cf       	rjmp	.-10     	; 0x4162 <main1+0xe>

0000416c <main2>:
    }
}

void main2(void * t)
{
    416c:	df 93       	push	r29
    416e:	cf 93       	push	r28
    4170:	00 d0       	rcall	.+0      	; 0x4172 <main2+0x6>
    4172:	cd b7       	in	r28, 0x3d	; 61
    4174:	de b7       	in	r29, 0x3e	; 62
    4176:	9a 83       	std	Y+2, r25	; 0x02
    4178:	89 83       	std	Y+1, r24	; 0x01
    while(1)
    {
        wait_time(3);
    417a:	83 e0       	ldi	r24, 0x03	; 3
    417c:	90 e0       	ldi	r25, 0x00	; 0
    417e:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <wait_time>
        proc_reset_watchdog();
    4182:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <proc_reset_watchdog>
        proc_self_stop();
    4186:	0e 94 ce 1d 	call	0x3b9c	; 0x3b9c <proc_self_stop>
    418a:	f7 cf       	rjmp	.-18     	; 0x417a <main2+0xe>

0000418c <main3>:
    }
}
void main3(void * t)
{
    418c:	df 93       	push	r29
    418e:	cf 93       	push	r28
    4190:	00 d0       	rcall	.+0      	; 0x4192 <main3+0x6>
    4192:	cd b7       	in	r28, 0x3d	; 61
    4194:	de b7       	in	r29, 0x3e	; 62
    4196:	9a 83       	std	Y+2, r25	; 0x02
    4198:	89 83       	std	Y+1, r24	; 0x01
    while(1)
    {
        wait_time(50);
    419a:	82 e3       	ldi	r24, 0x32	; 50
    419c:	90 e0       	ldi	r25, 0x00	; 0
    419e:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <wait_time>
        proc_run(&proc[2]);
    41a2:	85 ef       	ldi	r24, 0xF5	; 245
    41a4:	93 e0       	ldi	r25, 0x03	; 3
    41a6:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <proc_run>
    41aa:	f7 cf       	rjmp	.-18     	; 0x419a <main3+0xe>

000041ac <main4>:
    }
}
void main4(void * t)
{
    41ac:	df 93       	push	r29
    41ae:	cf 93       	push	r28
    41b0:	00 d0       	rcall	.+0      	; 0x41b2 <main4+0x6>
    41b2:	cd b7       	in	r28, 0x3d	; 61
    41b4:	de b7       	in	r29, 0x3e	; 62
    41b6:	9a 83       	std	Y+2, r25	; 0x02
    41b8:	89 83       	std	Y+1, r24	; 0x01
    while(1)
    {
        wait_time(10);
    41ba:	8a e0       	ldi	r24, 0x0A	; 10
    41bc:	90 e0       	ldi	r25, 0x00	; 0
    41be:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <wait_time>
    41c2:	fb cf       	rjmp	.-10     	; 0x41ba <main4+0xe>

000041c4 <main5>:
    41c4:	df 93       	push	r29
    41c6:	cf 93       	push	r28
    41c8:	00 d0       	rcall	.+0      	; 0x41ca <main5+0x6>
    41ca:	cd b7       	in	r28, 0x3d	; 61
    41cc:	de b7       	in	r29, 0x3e	; 62
    41ce:	9a 83       	std	Y+2, r25	; 0x02
    41d0:	89 83       	std	Y+1, r24	; 0x01
    41d2:	82 e3       	ldi	r24, 0x32	; 50
    41d4:	90 e0       	ldi	r25, 0x00	; 0
    41d6:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <wait_time>
    41da:	0f 90       	pop	r0
    41dc:	0f 90       	pop	r0
    41de:	cf 91       	pop	r28
    41e0:	df 91       	pop	r29
    41e2:	08 95       	ret

000041e4 <idle_main>:
void main5(void * t)
{
    wait_time(50);
}
void idle_main(void * arg)
{
    41e4:	df 93       	push	r29
    41e6:	cf 93       	push	r28
    41e8:	00 d0       	rcall	.+0      	; 0x41ea <idle_main+0x6>
    41ea:	cd b7       	in	r28, 0x3d	; 61
    41ec:	de b7       	in	r29, 0x3e	; 62
    41ee:	9a 83       	std	Y+2, r25	; 0x02
    41f0:	89 83       	std	Y+1, r24	; 0x01
    proc_run(&proc[0]);
    41f2:	85 e9       	ldi	r24, 0x95	; 149
    41f4:	93 e0       	ldi	r25, 0x03	; 3
    41f6:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <proc_run>
    proc_run(&proc[1]);
    41fa:	85 ec       	ldi	r24, 0xC5	; 197
    41fc:	93 e0       	ldi	r25, 0x03	; 3
    41fe:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <proc_run>
    proc_run(&proc[2]);
    4202:	85 ef       	ldi	r24, 0xF5	; 245
    4204:	93 e0       	ldi	r25, 0x03	; 3
    4206:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <proc_run>
    proc_run(&proc[3]);
    420a:	85 e2       	ldi	r24, 0x25	; 37
    420c:	94 e0       	ldi	r25, 0x04	; 4
    420e:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <proc_run>
    proc_run(&proc[4]);
    4212:	85 e5       	ldi	r24, 0x55	; 85
    4214:	94 e0       	ldi	r25, 0x04	; 4
    4216:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <proc_run>
    proc_run(&proc[5]);
    421a:	85 e8       	ldi	r24, 0x85	; 133
    421c:	94 e0       	ldi	r25, 0x04	; 4
    421e:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <proc_run>

    wait_time(15);
    4222:	8f e0       	ldi	r24, 0x0F	; 15
    4224:	90 e0       	ldi	r25, 0x00	; 0
    4226:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <wait_time>

    cli();
    422a:	f8 94       	cli
    proc[0].affinity = 0x3;
    422c:	83 e0       	ldi	r24, 0x03	; 3
    422e:	80 93 b7 03 	sts	0x03B7, r24
    proc[1].affinity = 0x3;
    4232:	83 e0       	ldi	r24, 0x03	; 3
    4234:	80 93 e7 03 	sts	0x03E7, r24
    proc[2].affinity = 0x3;
    4238:	83 e0       	ldi	r24, 0x03	; 3
    423a:	80 93 17 04 	sts	0x0417, r24
    proc[3].affinity = 0x3;
    423e:	83 e0       	ldi	r24, 0x03	; 3
    4240:	80 93 47 04 	sts	0x0447, r24
    proc[4].affinity = 0x3;
    4244:	83 e0       	ldi	r24, 0x03	; 3
    4246:	80 93 77 04 	sts	0x0477, r24
    proc[5].affinity = 0x3;
    424a:	83 e0       	ldi	r24, 0x03	; 3
    424c:	80 93 a7 04 	sts	0x04A7, r24
    sei();
    4250:	78 94       	sei

    while(1){
        wait_time(10);
    4252:	8a e0       	ldi	r24, 0x0A	; 10
    4254:	90 e0       	ldi	r25, 0x00	; 0
    4256:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <wait_time>
        proc_lazy_global_load_balancer();
    425a:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <proc_lazy_global_load_balancer>
    425e:	f9 cf       	rjmp	.-14     	; 0x4252 <idle_main+0x6e>

00004260 <main>:

core_id_t i;
unsigned short j;
//*/
int main(void)
{
    4260:	8f 92       	push	r8
    4262:	af 92       	push	r10
    4264:	bf 92       	push	r11
    4266:	cf 92       	push	r12
    4268:	ef 92       	push	r14
    426a:	ff 92       	push	r15
    426c:	0f 93       	push	r16
    426e:	1f 93       	push	r17
    4270:	df 93       	push	r29
    4272:	cf 93       	push	r28
    4274:	cd b7       	in	r28, 0x3d	; 61
    4276:	de b7       	in	r29, 0x3e	; 62
    vsmp_init();
    4278:	0e 94 63 05 	call	0xac6	; 0xac6 <vsmp_init>

    TCCR2A = 0x02;//
    427c:	e0 eb       	ldi	r30, 0xB0	; 176
    427e:	f0 e0       	ldi	r31, 0x00	; 0
    4280:	82 e0       	ldi	r24, 0x02	; 2
    4282:	80 83       	st	Z, r24
    TCCR2B = 0x05;// prescaler=128
    4284:	e1 eb       	ldi	r30, 0xB1	; 177
    4286:	f0 e0       	ldi	r31, 0x00	; 0
    4288:	85 e0       	ldi	r24, 0x05	; 5
    428a:	80 83       	st	Z, r24
    OCR2A  = 124;
    428c:	e3 eb       	ldi	r30, 0xB3	; 179
    428e:	f0 e0       	ldi	r31, 0x00	; 0
    4290:	8c e7       	ldi	r24, 0x7C	; 124
    4292:	80 83       	st	Z, r24
    OCR2B  = 0x00;
    4294:	e4 eb       	ldi	r30, 0xB4	; 180
    4296:	f0 e0       	ldi	r31, 0x00	; 0
    4298:	10 82       	st	Z, r1
    TIMSK2 = 0x02;
    429a:	e0 e7       	ldi	r30, 0x70	; 112
    429c:	f0 e0       	ldi	r31, 0x00	; 0
    429e:	82 e0       	ldi	r24, 0x02	; 2
    42a0:	80 83       	st	Z, r24
    TIFR2  = 0x00;
    42a2:	e7 e3       	ldi	r30, 0x37	; 55
    42a4:	f0 e0       	ldi	r31, 0x00	; 0
    42a6:	10 82       	st	Z, r1

    DDRB = 0x3F;
    42a8:	e4 e2       	ldi	r30, 0x24	; 36
    42aa:	f0 e0       	ldi	r31, 0x00	; 0
    42ac:	8f e3       	ldi	r24, 0x3F	; 63
    42ae:	80 83       	st	Z, r24
    PORTB = 0x00;
    42b0:	e5 e2       	ldi	r30, 0x25	; 37
    42b2:	f0 e0       	ldi	r31, 0x00	; 0
    42b4:	10 82       	st	Z, r1
    DDRC = 0x3F;
    42b6:	e7 e2       	ldi	r30, 0x27	; 39
    42b8:	f0 e0       	ldi	r31, 0x00	; 0
    42ba:	8f e3       	ldi	r24, 0x3F	; 63
    42bc:	80 83       	st	Z, r24
    PORTC = 0x00;
    42be:	e8 e2       	ldi	r30, 0x28	; 40
    42c0:	f0 e0       	ldi	r31, 0x00	; 0
    42c2:	10 82       	st	Z, r1
    DDRD = 0xFE;
    42c4:	ea e2       	ldi	r30, 0x2A	; 42
    42c6:	f0 e0       	ldi	r31, 0x00	; 0
    42c8:	8e ef       	ldi	r24, 0xFE	; 254
    42ca:	80 83       	st	Z, r24
    PORTD = 0x00;
    42cc:	eb e2       	ldi	r30, 0x2B	; 43
    42ce:	f0 e0       	ldi	r31, 0x00	; 0
    42d0:	10 82       	st	Z, r1

    vsmp_run();
    42d2:	0e 94 10 06 	call	0xc20	; 0xc20 <vsmp_run>
        vsmp_vinterrupt_isr( i, &test_vector );
        vsmp_vinterrupt( i, &test_vector2 );
        for(j=0;j<1000;j++);
    }
    //*/
    init_bugurt();
    42d6:	0e 94 c8 04 	call	0x990	; 0x990 <init_bugurt>

    proc_init_isr(&proc[0], main0, 0, 0, 0, &proc_stack[0][127], 1, 2, 0, 0x1);
    42da:	85 eb       	ldi	r24, 0xB5	; 181
    42dc:	94 e0       	ldi	r25, 0x04	; 4
    42de:	dc 01       	movw	r26, r24
    42e0:	a1 58       	subi	r26, 0x81	; 129
    42e2:	bf 4f       	sbci	r27, 0xFF	; 255
    42e4:	0f 92       	push	r0
    42e6:	ed b7       	in	r30, 0x3d	; 61
    42e8:	fe b7       	in	r31, 0x3e	; 62
    42ea:	31 96       	adiw	r30, 0x01	; 1
    42ec:	25 e9       	ldi	r18, 0x95	; 149
    42ee:	33 e0       	ldi	r19, 0x03	; 3
    42f0:	4e e9       	ldi	r20, 0x9E	; 158
    42f2:	50 e2       	ldi	r21, 0x20	; 32
    42f4:	81 e0       	ldi	r24, 0x01	; 1
    42f6:	80 83       	st	Z, r24
    42f8:	c9 01       	movw	r24, r18
    42fa:	ba 01       	movw	r22, r20
    42fc:	40 e0       	ldi	r20, 0x00	; 0
    42fe:	50 e0       	ldi	r21, 0x00	; 0
    4300:	20 e0       	ldi	r18, 0x00	; 0
    4302:	30 e0       	ldi	r19, 0x00	; 0
    4304:	00 e0       	ldi	r16, 0x00	; 0
    4306:	10 e0       	ldi	r17, 0x00	; 0
    4308:	7d 01       	movw	r14, r26
    430a:	cc 24       	eor	r12, r12
    430c:	c3 94       	inc	r12
    430e:	aa 24       	eor	r10, r10
    4310:	bb 24       	eor	r11, r11
    4312:	68 94       	set
    4314:	a1 f8       	bld	r10, 1
    4316:	88 24       	eor	r8, r8
    4318:	0e 94 2f 12 	call	0x245e	; 0x245e <proc_init_isr>
    431c:	0f 90       	pop	r0
    proc_init_isr(&proc[1], main1, 0, 0, 0, &proc_stack[1][127], 2, 3, 0, 0x1);
    431e:	85 eb       	ldi	r24, 0xB5	; 181
    4320:	94 e0       	ldi	r25, 0x04	; 4
    4322:	dc 01       	movw	r26, r24
    4324:	a1 50       	subi	r26, 0x01	; 1
    4326:	bf 4f       	sbci	r27, 0xFF	; 255
    4328:	0f 92       	push	r0
    432a:	ed b7       	in	r30, 0x3d	; 61
    432c:	fe b7       	in	r31, 0x3e	; 62
    432e:	31 96       	adiw	r30, 0x01	; 1
    4330:	25 ec       	ldi	r18, 0xC5	; 197
    4332:	33 e0       	ldi	r19, 0x03	; 3
    4334:	4a ea       	ldi	r20, 0xAA	; 170
    4336:	50 e2       	ldi	r21, 0x20	; 32
    4338:	81 e0       	ldi	r24, 0x01	; 1
    433a:	80 83       	st	Z, r24
    433c:	c9 01       	movw	r24, r18
    433e:	ba 01       	movw	r22, r20
    4340:	40 e0       	ldi	r20, 0x00	; 0
    4342:	50 e0       	ldi	r21, 0x00	; 0
    4344:	20 e0       	ldi	r18, 0x00	; 0
    4346:	30 e0       	ldi	r19, 0x00	; 0
    4348:	00 e0       	ldi	r16, 0x00	; 0
    434a:	10 e0       	ldi	r17, 0x00	; 0
    434c:	7d 01       	movw	r14, r26
    434e:	cc 24       	eor	r12, r12
    4350:	68 94       	set
    4352:	c1 f8       	bld	r12, 1
    4354:	0f 2e       	mov	r0, r31
    4356:	f3 e0       	ldi	r31, 0x03	; 3
    4358:	af 2e       	mov	r10, r31
    435a:	bb 24       	eor	r11, r11
    435c:	f0 2d       	mov	r31, r0
    435e:	88 24       	eor	r8, r8
    4360:	0e 94 2f 12 	call	0x245e	; 0x245e <proc_init_isr>
    4364:	0f 90       	pop	r0
    proc_init_isr(&proc[2], main2, 0, 0, 0, &proc_stack[2][127], 2, 4, 0, 0x1);
    4366:	85 eb       	ldi	r24, 0xB5	; 181
    4368:	94 e0       	ldi	r25, 0x04	; 4
    436a:	dc 01       	movw	r26, r24
    436c:	a1 58       	subi	r26, 0x81	; 129
    436e:	be 4f       	sbci	r27, 0xFE	; 254
    4370:	0f 92       	push	r0
    4372:	ed b7       	in	r30, 0x3d	; 61
    4374:	fe b7       	in	r31, 0x3e	; 62
    4376:	31 96       	adiw	r30, 0x01	; 1
    4378:	25 ef       	ldi	r18, 0xF5	; 245
    437a:	33 e0       	ldi	r19, 0x03	; 3
    437c:	46 eb       	ldi	r20, 0xB6	; 182
    437e:	50 e2       	ldi	r21, 0x20	; 32
    4380:	81 e0       	ldi	r24, 0x01	; 1
    4382:	80 83       	st	Z, r24
    4384:	c9 01       	movw	r24, r18
    4386:	ba 01       	movw	r22, r20
    4388:	40 e0       	ldi	r20, 0x00	; 0
    438a:	50 e0       	ldi	r21, 0x00	; 0
    438c:	20 e0       	ldi	r18, 0x00	; 0
    438e:	30 e0       	ldi	r19, 0x00	; 0
    4390:	00 e0       	ldi	r16, 0x00	; 0
    4392:	10 e0       	ldi	r17, 0x00	; 0
    4394:	7d 01       	movw	r14, r26
    4396:	cc 24       	eor	r12, r12
    4398:	68 94       	set
    439a:	c1 f8       	bld	r12, 1
    439c:	aa 24       	eor	r10, r10
    439e:	bb 24       	eor	r11, r11
    43a0:	68 94       	set
    43a2:	a2 f8       	bld	r10, 2
    43a4:	88 24       	eor	r8, r8
    43a6:	0e 94 2f 12 	call	0x245e	; 0x245e <proc_init_isr>
    43aa:	0f 90       	pop	r0
    proc_init_isr(&proc[3], main3, 0, 0, 0, &proc_stack[3][127], 1, 2, 0, 0x1);
    43ac:	85 eb       	ldi	r24, 0xB5	; 181
    43ae:	94 e0       	ldi	r25, 0x04	; 4
    43b0:	dc 01       	movw	r26, r24
    43b2:	a1 50       	subi	r26, 0x01	; 1
    43b4:	be 4f       	sbci	r27, 0xFE	; 254
    43b6:	0f 92       	push	r0
    43b8:	ed b7       	in	r30, 0x3d	; 61
    43ba:	fe b7       	in	r31, 0x3e	; 62
    43bc:	31 96       	adiw	r30, 0x01	; 1
    43be:	25 e2       	ldi	r18, 0x25	; 37
    43c0:	34 e0       	ldi	r19, 0x04	; 4
    43c2:	46 ec       	ldi	r20, 0xC6	; 198
    43c4:	50 e2       	ldi	r21, 0x20	; 32
    43c6:	81 e0       	ldi	r24, 0x01	; 1
    43c8:	80 83       	st	Z, r24
    43ca:	c9 01       	movw	r24, r18
    43cc:	ba 01       	movw	r22, r20
    43ce:	40 e0       	ldi	r20, 0x00	; 0
    43d0:	50 e0       	ldi	r21, 0x00	; 0
    43d2:	20 e0       	ldi	r18, 0x00	; 0
    43d4:	30 e0       	ldi	r19, 0x00	; 0
    43d6:	00 e0       	ldi	r16, 0x00	; 0
    43d8:	10 e0       	ldi	r17, 0x00	; 0
    43da:	7d 01       	movw	r14, r26
    43dc:	cc 24       	eor	r12, r12
    43de:	c3 94       	inc	r12
    43e0:	aa 24       	eor	r10, r10
    43e2:	bb 24       	eor	r11, r11
    43e4:	68 94       	set
    43e6:	a1 f8       	bld	r10, 1
    43e8:	88 24       	eor	r8, r8
    43ea:	0e 94 2f 12 	call	0x245e	; 0x245e <proc_init_isr>
    43ee:	0f 90       	pop	r0
    proc_init_isr(&proc[4], main4, 0, 0, 0, &proc_stack[4][127], 2, 2, 0, 0x1);
    43f0:	85 eb       	ldi	r24, 0xB5	; 181
    43f2:	94 e0       	ldi	r25, 0x04	; 4
    43f4:	dc 01       	movw	r26, r24
    43f6:	a1 58       	subi	r26, 0x81	; 129
    43f8:	bd 4f       	sbci	r27, 0xFD	; 253
    43fa:	0f 92       	push	r0
    43fc:	ed b7       	in	r30, 0x3d	; 61
    43fe:	fe b7       	in	r31, 0x3e	; 62
    4400:	31 96       	adiw	r30, 0x01	; 1
    4402:	25 e5       	ldi	r18, 0x55	; 85
    4404:	34 e0       	ldi	r19, 0x04	; 4
    4406:	46 ed       	ldi	r20, 0xD6	; 214
    4408:	50 e2       	ldi	r21, 0x20	; 32
    440a:	81 e0       	ldi	r24, 0x01	; 1
    440c:	80 83       	st	Z, r24
    440e:	c9 01       	movw	r24, r18
    4410:	ba 01       	movw	r22, r20
    4412:	40 e0       	ldi	r20, 0x00	; 0
    4414:	50 e0       	ldi	r21, 0x00	; 0
    4416:	20 e0       	ldi	r18, 0x00	; 0
    4418:	30 e0       	ldi	r19, 0x00	; 0
    441a:	00 e0       	ldi	r16, 0x00	; 0
    441c:	10 e0       	ldi	r17, 0x00	; 0
    441e:	7d 01       	movw	r14, r26
    4420:	cc 24       	eor	r12, r12
    4422:	68 94       	set
    4424:	c1 f8       	bld	r12, 1
    4426:	aa 24       	eor	r10, r10
    4428:	bb 24       	eor	r11, r11
    442a:	68 94       	set
    442c:	a1 f8       	bld	r10, 1
    442e:	88 24       	eor	r8, r8
    4430:	0e 94 2f 12 	call	0x245e	; 0x245e <proc_init_isr>
    4434:	0f 90       	pop	r0
    proc_init_isr(&proc[5], main5, 0, 0, 0, &proc_stack[5][127], 2, 2, 0, 0x1);
    4436:	85 eb       	ldi	r24, 0xB5	; 181
    4438:	94 e0       	ldi	r25, 0x04	; 4
    443a:	dc 01       	movw	r26, r24
    443c:	a1 50       	subi	r26, 0x01	; 1
    443e:	bd 4f       	sbci	r27, 0xFD	; 253
    4440:	0f 92       	push	r0
    4442:	ed b7       	in	r30, 0x3d	; 61
    4444:	fe b7       	in	r31, 0x3e	; 62
    4446:	31 96       	adiw	r30, 0x01	; 1
    4448:	25 e8       	ldi	r18, 0x85	; 133
    444a:	34 e0       	ldi	r19, 0x04	; 4
    444c:	42 ee       	ldi	r20, 0xE2	; 226
    444e:	50 e2       	ldi	r21, 0x20	; 32
    4450:	81 e0       	ldi	r24, 0x01	; 1
    4452:	80 83       	st	Z, r24
    4454:	c9 01       	movw	r24, r18
    4456:	ba 01       	movw	r22, r20
    4458:	40 e0       	ldi	r20, 0x00	; 0
    445a:	50 e0       	ldi	r21, 0x00	; 0
    445c:	20 e0       	ldi	r18, 0x00	; 0
    445e:	30 e0       	ldi	r19, 0x00	; 0
    4460:	00 e0       	ldi	r16, 0x00	; 0
    4462:	10 e0       	ldi	r17, 0x00	; 0
    4464:	7d 01       	movw	r14, r26
    4466:	cc 24       	eor	r12, r12
    4468:	68 94       	set
    446a:	c1 f8       	bld	r12, 1
    446c:	aa 24       	eor	r10, r10
    446e:	bb 24       	eor	r11, r11
    4470:	68 94       	set
    4472:	a1 f8       	bld	r10, 1
    4474:	88 24       	eor	r8, r8
    4476:	0e 94 2f 12 	call	0x245e	; 0x245e <proc_init_isr>
    447a:	0f 90       	pop	r0

    start_bugurt();
    447c:	0e 94 0d 05 	call	0xa1a	; 0xa1a <start_bugurt>

    return 0;
    4480:	80 e0       	ldi	r24, 0x00	; 0
    4482:	90 e0       	ldi	r25, 0x00	; 0
}
    4484:	cf 91       	pop	r28
    4486:	df 91       	pop	r29
    4488:	1f 91       	pop	r17
    448a:	0f 91       	pop	r16
    448c:	ff 90       	pop	r15
    448e:	ef 90       	pop	r14
    4490:	cf 90       	pop	r12
    4492:	bf 90       	pop	r11
    4494:	af 90       	pop	r10
    4496:	8f 90       	pop	r8
    4498:	08 95       	ret

0000449a <_exit>:
    449a:	f8 94       	cli

0000449c <__stop_program>:
    449c:	ff cf       	rjmp	.-2      	; 0x449c <__stop_program>
