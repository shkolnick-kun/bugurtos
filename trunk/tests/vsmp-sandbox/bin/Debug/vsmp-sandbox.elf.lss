
bin/Debug/vsmp-sandbox.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00004028  000040bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004028  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000028a  00800112  00800112  000040ce  2**0
                  ALLOC
  3 .stab         00008fa0  00000000  00000000  000040d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00004077  00000000  00000000  0000d070  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
       4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      1c:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__vector_7>
      20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      30:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      48:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      54:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000068 <syscall_routine>:
      68:	3a 1c 8c 1c a6 1c c0 1c da 1c fb 1c 42 1d 54 1d     :...........B.T.
      78:	62 1d 72 1d 82 1d 94 1d a4 1d b4 1d cb 1d e5 1d     b.r.............
      88:	ff 1d 0f 1e 25 1e 3f 1e 59 1e 69 1e 79 1e 98 1e     ....%.?.Y.i.y...

00000098 <__ctors_end>:
      98:	11 24       	eor	r1, r1
      9a:	1f be       	out	0x3f, r1	; 63
      9c:	cf ef       	ldi	r28, 0xFF	; 255
      9e:	d8 e0       	ldi	r29, 0x08	; 8
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
      a4:	11 e0       	ldi	r17, 0x01	; 1
      a6:	a0 e0       	ldi	r26, 0x00	; 0
      a8:	b1 e0       	ldi	r27, 0x01	; 1
      aa:	e8 e2       	ldi	r30, 0x28	; 40
      ac:	f0 e4       	ldi	r31, 0x40	; 64
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <.do_copy_data_start>

000000b0 <.do_copy_data_loop>:
      b0:	05 90       	lpm	r0, Z+
      b2:	0d 92       	st	X+, r0

000000b4 <.do_copy_data_start>:
      b4:	a2 31       	cpi	r26, 0x12	; 18
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <.do_copy_data_loop>

000000ba <__do_clear_bss>:
      ba:	13 e0       	ldi	r17, 0x03	; 3
      bc:	a2 e1       	ldi	r26, 0x12	; 18
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	ac 39       	cpi	r26, 0x9C	; 156
      c6:	b1 07       	cpc	r27, r17
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	0e 94 74 1f 	call	0x3ee8	; 0x3ee8 <main>
      ce:	0c 94 12 20 	jmp	0x4024	; 0x4024 <_exit>

000000d2 <__bad_interrupt>:
      d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <bugurt_save_context>:
      d6:	2f 92       	push	r2
      d8:	2f b6       	in	r2, 0x3f	; 63
      da:	2f 92       	push	r2
      dc:	3f 92       	push	r3
      de:	4f 92       	push	r4
      e0:	5f 92       	push	r5
      e2:	6f 92       	push	r6
      e4:	7f 92       	push	r7
      e6:	8f 92       	push	r8
      e8:	9f 92       	push	r9
      ea:	af 92       	push	r10
      ec:	bf 92       	push	r11
      ee:	cf 92       	push	r12
      f0:	df 92       	push	r13
      f2:	ef 92       	push	r14
      f4:	ff 92       	push	r15
      f6:	0f 93       	push	r16
      f8:	1f 93       	push	r17
      fa:	2f 93       	push	r18
      fc:	3f 93       	push	r19
      fe:	4f 93       	push	r20
     100:	5f 93       	push	r21
     102:	6f 93       	push	r22
     104:	7f 93       	push	r23
     106:	8f 93       	push	r24
     108:	9f 93       	push	r25
     10a:	af 93       	push	r26
     10c:	bf 93       	push	r27
     10e:	cf 93       	push	r28
     110:	df 93       	push	r29
     112:	ef 93       	push	r30
     114:	ff 93       	push	r31
     116:	ed b7       	in	r30, 0x3d	; 61
     118:	fe b7       	in	r31, 0x3e	; 62
     11a:	21 a1       	ldd	r18, Z+33	; 0x21
     11c:	30 a1       	ldd	r19, Z+32	; 0x20
     11e:	01 a2       	std	Z+33, r0	; 0x21
     120:	10 a2       	std	Z+32, r1	; 0x20
     122:	11 24       	eor	r1, r1
     124:	8d b7       	in	r24, 0x3d	; 61
     126:	9e b7       	in	r25, 0x3e	; 62
     128:	2f 93       	push	r18
     12a:	3f 93       	push	r19
     12c:	08 95       	ret

0000012e <bugurt_pop_context>:
     12e:	3f 91       	pop	r19
     130:	2f 91       	pop	r18
     132:	04 c0       	rjmp	.+8      	; 0x13c <_bugurt_pop_context>

00000134 <bugurt_restore_context>:
     134:	3f 91       	pop	r19
     136:	2f 91       	pop	r18
     138:	9e bf       	out	0x3e, r25	; 62
     13a:	8d bf       	out	0x3d, r24	; 61

0000013c <_bugurt_pop_context>:
     13c:	fe b7       	in	r31, 0x3e	; 62
     13e:	ed b7       	in	r30, 0x3d	; 61
     140:	10 a0       	ldd	r1, Z+32	; 0x20
     142:	01 a0       	ldd	r0, Z+33	; 0x21
     144:	30 a3       	std	Z+32, r19	; 0x20
     146:	21 a3       	std	Z+33, r18	; 0x21
     148:	ff 91       	pop	r31
     14a:	ef 91       	pop	r30
     14c:	df 91       	pop	r29
     14e:	cf 91       	pop	r28
     150:	bf 91       	pop	r27
     152:	af 91       	pop	r26
     154:	9f 91       	pop	r25
     156:	8f 91       	pop	r24
     158:	7f 91       	pop	r23
     15a:	6f 91       	pop	r22
     15c:	5f 91       	pop	r21
     15e:	4f 91       	pop	r20
     160:	3f 91       	pop	r19
     162:	2f 91       	pop	r18
     164:	1f 91       	pop	r17
     166:	0f 91       	pop	r16
     168:	ff 90       	pop	r15
     16a:	ef 90       	pop	r14
     16c:	df 90       	pop	r13
     16e:	cf 90       	pop	r12
     170:	bf 90       	pop	r11
     172:	af 90       	pop	r10
     174:	9f 90       	pop	r9
     176:	8f 90       	pop	r8
     178:	7f 90       	pop	r7
     17a:	6f 90       	pop	r6
     17c:	5f 90       	pop	r5
     17e:	4f 90       	pop	r4
     180:	3f 90       	pop	r3
     182:	2f 90       	pop	r2
     184:	2f be       	out	0x3f, r2	; 63
     186:	2f 90       	pop	r2
     188:	08 95       	ret

0000018a <bugurt_set_stack_pointer>:
     18a:	1f 90       	pop	r1
     18c:	0f 90       	pop	r0
     18e:	9e bf       	out	0x3e, r25	; 62
     190:	8d bf       	out	0x3d, r24	; 61
     192:	0f 92       	push	r0
     194:	1f 92       	push	r1
     196:	11 24       	eor	r1, r1
     198:	08 95       	ret

0000019a <bugurt_push_pointer>:
     19a:	1f 90       	pop	r1
     19c:	0f 90       	pop	r0
     19e:	8f 93       	push	r24
     1a0:	9f 93       	push	r25
     1a2:	0f 92       	push	r0
     1a4:	1f 92       	push	r1
     1a6:	11 24       	eor	r1, r1
     1a8:	08 95       	ret

000001aa <bugurt_reverse_byte_order>:
     1aa:	08 2e       	mov	r0, r24
     1ac:	89 2f       	mov	r24, r25
     1ae:	90 2d       	mov	r25, r0
     1b0:	08 95       	ret

000001b2 <current_proc>:
    bugurt_set_stack_pointer( saved_vm_sp[current_vm] );
    __asm__ __volatile__("reti"::);
}
///!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
proc_t * current_proc(void)
{
     1b2:	df 93       	push	r29
     1b4:	cf 93       	push	r28
     1b6:	00 d0       	rcall	.+0      	; 0x1b8 <current_proc+0x6>
     1b8:	cd b7       	in	r28, 0x3d	; 61
     1ba:	de b7       	in	r29, 0x3e	; 62
    proc_t * ret;
    cli();
     1bc:	f8 94       	cli
    ret = kernel.sched[current_vm].current_proc;
     1be:	80 91 26 01 	lds	r24, 0x0126
     1c2:	28 2f       	mov	r18, r24
     1c4:	30 e0       	ldi	r19, 0x00	; 0
     1c6:	8b e2       	ldi	r24, 0x2B	; 43
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	ac 01       	movw	r20, r24
     1cc:	24 9f       	mul	r18, r20
     1ce:	c0 01       	movw	r24, r0
     1d0:	25 9f       	mul	r18, r21
     1d2:	90 0d       	add	r25, r0
     1d4:	34 9f       	mul	r19, r20
     1d6:	90 0d       	add	r25, r0
     1d8:	11 24       	eor	r1, r1
     1da:	fc 01       	movw	r30, r24
     1dc:	e5 52       	subi	r30, 0x25	; 37
     1de:	fd 4f       	sbci	r31, 0xFD	; 253
     1e0:	80 81       	ld	r24, Z
     1e2:	91 81       	ldd	r25, Z+1	; 0x01
     1e4:	9a 83       	std	Y+2, r25	; 0x02
     1e6:	89 83       	std	Y+1, r24	; 0x01
    sei();
     1e8:	78 94       	sei
    return ret;
     1ea:	89 81       	ldd	r24, Y+1	; 0x01
     1ec:	9a 81       	ldd	r25, Y+2	; 0x02
}
     1ee:	0f 90       	pop	r0
     1f0:	0f 90       	pop	r0
     1f2:	cf 91       	pop	r28
     1f4:	df 91       	pop	r29
     1f6:	08 95       	ret

000001f8 <current_core>:

core_id_t current_core(void)
{
     1f8:	df 93       	push	r29
     1fa:	cf 93       	push	r28
     1fc:	0f 92       	push	r0
     1fe:	cd b7       	in	r28, 0x3d	; 61
     200:	de b7       	in	r29, 0x3e	; 62
    core_id_t ret;
    cli();
     202:	f8 94       	cli
    ret = current_vm;
     204:	80 91 26 01 	lds	r24, 0x0126
     208:	89 83       	std	Y+1, r24	; 0x01
    sei();
     20a:	78 94       	sei
    return ret;
     20c:	89 81       	ldd	r24, Y+1	; 0x01
}
     20e:	0f 90       	pop	r0
     210:	cf 91       	pop	r28
     212:	df 91       	pop	r29
     214:	08 95       	ret

00000216 <spin_init>:

void spin_init( lock_t * lock )
{
     216:	df 93       	push	r29
     218:	cf 93       	push	r28
     21a:	00 d0       	rcall	.+0      	; 0x21c <spin_init+0x6>
     21c:	cd b7       	in	r28, 0x3d	; 61
     21e:	de b7       	in	r29, 0x3e	; 62
     220:	9a 83       	std	Y+2, r25	; 0x02
     222:	89 83       	std	Y+1, r24	; 0x01
    cli();
     224:	f8 94       	cli
    *lock = (lock_t)0;
     226:	e9 81       	ldd	r30, Y+1	; 0x01
     228:	fa 81       	ldd	r31, Y+2	; 0x02
     22a:	10 82       	st	Z, r1
    sei();
     22c:	78 94       	sei
}
     22e:	0f 90       	pop	r0
     230:	0f 90       	pop	r0
     232:	cf 91       	pop	r28
     234:	df 91       	pop	r29
     236:	08 95       	ret

00000238 <spin_lock>:

void spin_lock( lock_t * lock )
{
     238:	df 93       	push	r29
     23a:	cf 93       	push	r28
     23c:	00 d0       	rcall	.+0      	; 0x23e <spin_lock+0x6>
     23e:	cd b7       	in	r28, 0x3d	; 61
     240:	de b7       	in	r29, 0x3e	; 62
     242:	9a 83       	std	Y+2, r25	; 0x02
     244:	89 83       	std	Y+1, r24	; 0x01
    while(1)
    {
        cli();
     246:	f8 94       	cli
        if(!*lock)
     248:	e9 81       	ldd	r30, Y+1	; 0x01
     24a:	fa 81       	ldd	r31, Y+2	; 0x02
     24c:	80 81       	ld	r24, Z
     24e:	88 23       	and	r24, r24
     250:	51 f4       	brne	.+20     	; 0x266 <spin_lock+0x2e>
        {
            *lock = (lock_t)1;
     252:	e9 81       	ldd	r30, Y+1	; 0x01
     254:	fa 81       	ldd	r31, Y+2	; 0x02
     256:	81 e0       	ldi	r24, 0x01	; 1
     258:	80 83       	st	Z, r24
            sei();
     25a:	78 94       	sei
            return;
        }
        sei();
    }
}
     25c:	0f 90       	pop	r0
     25e:	0f 90       	pop	r0
     260:	cf 91       	pop	r28
     262:	df 91       	pop	r29
     264:	08 95       	ret
        {
            *lock = (lock_t)1;
            sei();
            return;
        }
        sei();
     266:	78 94       	sei
     268:	ee cf       	rjmp	.-36     	; 0x246 <spin_lock+0xe>

0000026a <spin_unlock>:
    }
}
void spin_unlock(lock_t * lock)
{
     26a:	df 93       	push	r29
     26c:	cf 93       	push	r28
     26e:	00 d0       	rcall	.+0      	; 0x270 <spin_unlock+0x6>
     270:	00 d0       	rcall	.+0      	; 0x272 <spin_unlock+0x8>
     272:	cd b7       	in	r28, 0x3d	; 61
     274:	de b7       	in	r29, 0x3e	; 62
     276:	9c 83       	std	Y+4, r25	; 0x04
     278:	8b 83       	std	Y+3, r24	; 0x03
    unsigned short i;
    //for(i = 0; i< 1000; i++);// delay, all other vms must spin for a while
    cli();
     27a:	f8 94       	cli
    *lock = (lock_t)0;
     27c:	eb 81       	ldd	r30, Y+3	; 0x03
     27e:	fc 81       	ldd	r31, Y+4	; 0x04
     280:	10 82       	st	Z, r1
    sei();
     282:	78 94       	sei
}
     284:	0f 90       	pop	r0
     286:	0f 90       	pop	r0
     288:	0f 90       	pop	r0
     28a:	0f 90       	pop	r0
     28c:	cf 91       	pop	r28
     28e:	df 91       	pop	r29
     290:	08 95       	ret

00000292 <stat_init>:
// stat_t is simply prcess counter here!
void stat_init( stat_t * stat )
{
     292:	df 93       	push	r29
     294:	cf 93       	push	r28
     296:	00 d0       	rcall	.+0      	; 0x298 <stat_init+0x6>
     298:	cd b7       	in	r28, 0x3d	; 61
     29a:	de b7       	in	r29, 0x3e	; 62
     29c:	9a 83       	std	Y+2, r25	; 0x02
     29e:	89 83       	std	Y+1, r24	; 0x01
    *stat = 0; // no lad on a system
     2a0:	e9 81       	ldd	r30, Y+1	; 0x01
     2a2:	fa 81       	ldd	r31, Y+2	; 0x02
     2a4:	10 82       	st	Z, r1
}
     2a6:	0f 90       	pop	r0
     2a8:	0f 90       	pop	r0
     2aa:	cf 91       	pop	r28
     2ac:	df 91       	pop	r29
     2ae:	08 95       	ret

000002b0 <stat_dec>:
void stat_dec( proc_t * proc, stat_t * stat )
{
     2b0:	df 93       	push	r29
     2b2:	cf 93       	push	r28
     2b4:	00 d0       	rcall	.+0      	; 0x2b6 <stat_dec+0x6>
     2b6:	00 d0       	rcall	.+0      	; 0x2b8 <stat_dec+0x8>
     2b8:	cd b7       	in	r28, 0x3d	; 61
     2ba:	de b7       	in	r29, 0x3e	; 62
     2bc:	9a 83       	std	Y+2, r25	; 0x02
     2be:	89 83       	std	Y+1, r24	; 0x01
     2c0:	7c 83       	std	Y+4, r23	; 0x04
     2c2:	6b 83       	std	Y+3, r22	; 0x03
    *stat--;
     2c4:	8b 81       	ldd	r24, Y+3	; 0x03
     2c6:	9c 81       	ldd	r25, Y+4	; 0x04
     2c8:	01 97       	sbiw	r24, 0x01	; 1
     2ca:	9c 83       	std	Y+4, r25	; 0x04
     2cc:	8b 83       	std	Y+3, r24	; 0x03
}
     2ce:	0f 90       	pop	r0
     2d0:	0f 90       	pop	r0
     2d2:	0f 90       	pop	r0
     2d4:	0f 90       	pop	r0
     2d6:	cf 91       	pop	r28
     2d8:	df 91       	pop	r29
     2da:	08 95       	ret

000002dc <stat_inc>:
void stat_inc( proc_t * proc, stat_t * stat )
{
     2dc:	df 93       	push	r29
     2de:	cf 93       	push	r28
     2e0:	00 d0       	rcall	.+0      	; 0x2e2 <stat_inc+0x6>
     2e2:	00 d0       	rcall	.+0      	; 0x2e4 <stat_inc+0x8>
     2e4:	cd b7       	in	r28, 0x3d	; 61
     2e6:	de b7       	in	r29, 0x3e	; 62
     2e8:	9a 83       	std	Y+2, r25	; 0x02
     2ea:	89 83       	std	Y+1, r24	; 0x01
     2ec:	7c 83       	std	Y+4, r23	; 0x04
     2ee:	6b 83       	std	Y+3, r22	; 0x03
    *stat++;
     2f0:	8b 81       	ldd	r24, Y+3	; 0x03
     2f2:	9c 81       	ldd	r25, Y+4	; 0x04
     2f4:	01 96       	adiw	r24, 0x01	; 1
     2f6:	9c 83       	std	Y+4, r25	; 0x04
     2f8:	8b 83       	std	Y+3, r24	; 0x03
}
     2fa:	0f 90       	pop	r0
     2fc:	0f 90       	pop	r0
     2fe:	0f 90       	pop	r0
     300:	0f 90       	pop	r0
     302:	cf 91       	pop	r28
     304:	df 91       	pop	r29
     306:	08 95       	ret

00000308 <stat_merge>:
void stat_merge( stat_t *src_stat, stat_t * dst_stat  )
{
     308:	df 93       	push	r29
     30a:	cf 93       	push	r28
     30c:	00 d0       	rcall	.+0      	; 0x30e <stat_merge+0x6>
     30e:	00 d0       	rcall	.+0      	; 0x310 <stat_merge+0x8>
     310:	cd b7       	in	r28, 0x3d	; 61
     312:	de b7       	in	r29, 0x3e	; 62
     314:	9a 83       	std	Y+2, r25	; 0x02
     316:	89 83       	std	Y+1, r24	; 0x01
     318:	7c 83       	std	Y+4, r23	; 0x04
     31a:	6b 83       	std	Y+3, r22	; 0x03
    *dst_stat += *src_stat;
     31c:	eb 81       	ldd	r30, Y+3	; 0x03
     31e:	fc 81       	ldd	r31, Y+4	; 0x04
     320:	90 81       	ld	r25, Z
     322:	e9 81       	ldd	r30, Y+1	; 0x01
     324:	fa 81       	ldd	r31, Y+2	; 0x02
     326:	80 81       	ld	r24, Z
     328:	89 0f       	add	r24, r25
     32a:	eb 81       	ldd	r30, Y+3	; 0x03
     32c:	fc 81       	ldd	r31, Y+4	; 0x04
     32e:	80 83       	st	Z, r24
    *src_stat = (stat_t)0;
     330:	e9 81       	ldd	r30, Y+1	; 0x01
     332:	fa 81       	ldd	r31, Y+2	; 0x02
     334:	10 82       	st	Z, r1
}
     336:	0f 90       	pop	r0
     338:	0f 90       	pop	r0
     33a:	0f 90       	pop	r0
     33c:	0f 90       	pop	r0
     33e:	cf 91       	pop	r28
     340:	df 91       	pop	r29
     342:	08 95       	ret

00000344 <stat_calc_load>:
load_t stat_calc_load(prio_t prio, stat_t * stat)
{
     344:	df 93       	push	r29
     346:	cf 93       	push	r28
     348:	00 d0       	rcall	.+0      	; 0x34a <stat_calc_load+0x6>
     34a:	0f 92       	push	r0
     34c:	cd b7       	in	r28, 0x3d	; 61
     34e:	de b7       	in	r29, 0x3e	; 62
     350:	89 83       	std	Y+1, r24	; 0x01
     352:	7b 83       	std	Y+3, r23	; 0x03
     354:	6a 83       	std	Y+2, r22	; 0x02
    return (load_t)*stat;
     356:	ea 81       	ldd	r30, Y+2	; 0x02
     358:	fb 81       	ldd	r31, Y+3	; 0x03
     35a:	80 81       	ld	r24, Z
}
     35c:	0f 90       	pop	r0
     35e:	0f 90       	pop	r0
     360:	0f 90       	pop	r0
     362:	cf 91       	pop	r28
     364:	df 91       	pop	r29
     366:	08 95       	ret

00000368 <resched>:
void resched(core_id_t core_id)
{
     368:	df 93       	push	r29
     36a:	cf 93       	push	r28
     36c:	0f 92       	push	r0
     36e:	cd b7       	in	r28, 0x3d	; 61
     370:	de b7       	in	r29, 0x3e	; 62
     372:	89 83       	std	Y+1, r24	; 0x01
    vsmp_vinterrupt_isr( core_id, ( vinterrupt_t * )resched_vectors + core_id );
     374:	89 81       	ldd	r24, Y+1	; 0x01
     376:	28 2f       	mov	r18, r24
     378:	30 e0       	ldi	r19, 0x00	; 0
     37a:	c9 01       	movw	r24, r18
     37c:	88 0f       	add	r24, r24
     37e:	99 1f       	adc	r25, r25
     380:	82 0f       	add	r24, r18
     382:	93 1f       	adc	r25, r19
     384:	88 0f       	add	r24, r24
     386:	99 1f       	adc	r25, r25
     388:	9c 01       	movw	r18, r24
     38a:	21 5c       	subi	r18, 0xC1	; 193
     38c:	3e 4f       	sbci	r19, 0xFE	; 254
     38e:	89 81       	ldd	r24, Y+1	; 0x01
     390:	b9 01       	movw	r22, r18
     392:	0e 94 4a 0a 	call	0x1494	; 0x1494 <vsmp_vinterrupt_isr>
}
     396:	0f 90       	pop	r0
     398:	cf 91       	pop	r28
     39a:	df 91       	pop	r29
     39c:	08 95       	ret

0000039e <resched_isr>:
///!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
stack_t * saved_vm_sp[MAX_CORES];
bool_t is_idle[MAX_CORES];
__MACRO_FUNCTION__(_bugurt_isr_prologue)
{
    cli();
     39e:	f8 94       	cli
    saved_vm_sp[current_vm] = (stack_t *)SP; // I didn't write bugurt_get_stack_pointer();
     3a0:	80 91 26 01 	lds	r24, 0x0126
     3a4:	48 2f       	mov	r20, r24
     3a6:	50 e0       	ldi	r21, 0x00	; 0
     3a8:	ed e5       	ldi	r30, 0x5D	; 93
     3aa:	f0 e0       	ldi	r31, 0x00	; 0
     3ac:	80 81       	ld	r24, Z
     3ae:	91 81       	ldd	r25, Z+1	; 0x01
     3b0:	9c 01       	movw	r18, r24
     3b2:	ca 01       	movw	r24, r20
     3b4:	88 0f       	add	r24, r24
     3b6:	99 1f       	adc	r25, r25
     3b8:	fc 01       	movw	r30, r24
     3ba:	ec 5e       	subi	r30, 0xEC	; 236
     3bc:	fe 4f       	sbci	r31, 0xFE	; 254
     3be:	31 83       	std	Z+1, r19	; 0x01
     3c0:	20 83       	st	Z, r18
    kernel.sched[current_vm].current_proc->spointer = vm_state[current_vm].sp;
     3c2:	80 91 26 01 	lds	r24, 0x0126
     3c6:	28 2f       	mov	r18, r24
     3c8:	30 e0       	ldi	r19, 0x00	; 0
     3ca:	8b e2       	ldi	r24, 0x2B	; 43
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	ac 01       	movw	r20, r24
     3d0:	24 9f       	mul	r18, r20
     3d2:	c0 01       	movw	r24, r0
     3d4:	25 9f       	mul	r18, r21
     3d6:	90 0d       	add	r25, r0
     3d8:	34 9f       	mul	r19, r20
     3da:	90 0d       	add	r25, r0
     3dc:	11 24       	eor	r1, r1
     3de:	fc 01       	movw	r30, r24
     3e0:	e5 52       	subi	r30, 0x25	; 37
     3e2:	fd 4f       	sbci	r31, 0xFD	; 253
     3e4:	a0 81       	ld	r26, Z
     3e6:	b1 81       	ldd	r27, Z+1	; 0x01
     3e8:	80 91 26 01 	lds	r24, 0x0126
     3ec:	28 2f       	mov	r18, r24
     3ee:	30 e0       	ldi	r19, 0x00	; 0
     3f0:	c9 01       	movw	r24, r18
     3f2:	88 0f       	add	r24, r24
     3f4:	99 1f       	adc	r25, r25
     3f6:	88 0f       	add	r24, r24
     3f8:	99 1f       	adc	r25, r25
     3fa:	88 0f       	add	r24, r24
     3fc:	99 1f       	adc	r25, r25
     3fe:	82 0f       	add	r24, r18
     400:	93 1f       	adc	r25, r19
     402:	fc 01       	movw	r30, r24
     404:	e4 5d       	subi	r30, 0xD4	; 212
     406:	fe 4f       	sbci	r31, 0xFE	; 254
     408:	80 81       	ld	r24, Z
     40a:	91 81       	ldd	r25, Z+1	; 0x01
     40c:	9f 96       	adiw	r26, 0x2f	; 47
     40e:	9c 93       	st	X, r25
     410:	8e 93       	st	-X, r24
     412:	9e 97       	sbiw	r26, 0x2e	; 46
    bugurt_set_stack_pointer( kernel.idle[current_vm].spointer );
     414:	80 91 26 01 	lds	r24, 0x0126
     418:	28 2f       	mov	r18, r24
     41a:	30 e0       	ldi	r19, 0x00	; 0
     41c:	80 e3       	ldi	r24, 0x30	; 48
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	bc 01       	movw	r22, r24
     422:	26 9f       	mul	r18, r22
     424:	c0 01       	movw	r24, r0
     426:	27 9f       	mul	r18, r23
     428:	90 0d       	add	r25, r0
     42a:	36 9f       	mul	r19, r22
     42c:	90 0d       	add	r25, r0
     42e:	11 24       	eor	r1, r1
     430:	fc 01       	movw	r30, r24
     432:	e1 5a       	subi	r30, 0xA1	; 161
     434:	fc 4f       	sbci	r31, 0xFC	; 252
     436:	80 81       	ld	r24, Z
     438:	91 81       	ldd	r25, Z+1	; 0x01
     43a:	0e 94 c5 00 	call	0x18a	; 0x18a <bugurt_set_stack_pointer>
    sei();
     43e:	78 94       	sei
vinterrupt_t resched_vectors[MAX_CORES];
__attribute__ (( naked )) void resched_isr(void)
{
    _bugurt_isr_prologue();

    sched_reschedule();
     440:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <sched_reschedule>
    bugurt_set_stack_pointer( kernel.idle[current_vm].spointer );
    sei();
}
__MACRO_FUNCTION__(_bugurt_isr_epilogue)
{
    cli();
     444:	f8 94       	cli
    vm_state[current_vm].sp = kernel.sched[current_vm].current_proc->spointer;
     446:	80 91 26 01 	lds	r24, 0x0126
     44a:	48 2f       	mov	r20, r24
     44c:	50 e0       	ldi	r21, 0x00	; 0
     44e:	80 91 26 01 	lds	r24, 0x0126
     452:	28 2f       	mov	r18, r24
     454:	30 e0       	ldi	r19, 0x00	; 0
     456:	8b e2       	ldi	r24, 0x2B	; 43
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	bc 01       	movw	r22, r24
     45c:	26 9f       	mul	r18, r22
     45e:	c0 01       	movw	r24, r0
     460:	27 9f       	mul	r18, r23
     462:	90 0d       	add	r25, r0
     464:	36 9f       	mul	r19, r22
     466:	90 0d       	add	r25, r0
     468:	11 24       	eor	r1, r1
     46a:	fc 01       	movw	r30, r24
     46c:	e5 52       	subi	r30, 0x25	; 37
     46e:	fd 4f       	sbci	r31, 0xFD	; 253
     470:	01 90       	ld	r0, Z+
     472:	f0 81       	ld	r31, Z
     474:	e0 2d       	mov	r30, r0
     476:	26 a5       	ldd	r18, Z+46	; 0x2e
     478:	37 a5       	ldd	r19, Z+47	; 0x2f
     47a:	ca 01       	movw	r24, r20
     47c:	88 0f       	add	r24, r24
     47e:	99 1f       	adc	r25, r25
     480:	88 0f       	add	r24, r24
     482:	99 1f       	adc	r25, r25
     484:	88 0f       	add	r24, r24
     486:	99 1f       	adc	r25, r25
     488:	84 0f       	add	r24, r20
     48a:	95 1f       	adc	r25, r21
     48c:	fc 01       	movw	r30, r24
     48e:	e4 5d       	subi	r30, 0xD4	; 212
     490:	fe 4f       	sbci	r31, 0xFE	; 254
     492:	31 83       	std	Z+1, r19	; 0x01
     494:	20 83       	st	Z, r18
    bugurt_set_stack_pointer( saved_vm_sp[current_vm] );
     496:	80 91 26 01 	lds	r24, 0x0126
     49a:	88 2f       	mov	r24, r24
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	88 0f       	add	r24, r24
     4a0:	99 1f       	adc	r25, r25
     4a2:	fc 01       	movw	r30, r24
     4a4:	ec 5e       	subi	r30, 0xEC	; 236
     4a6:	fe 4f       	sbci	r31, 0xFE	; 254
     4a8:	80 81       	ld	r24, Z
     4aa:	91 81       	ldd	r25, Z+1	; 0x01
     4ac:	0e 94 c5 00 	call	0x18a	; 0x18a <bugurt_set_stack_pointer>
    __asm__ __volatile__("reti"::);
     4b0:	18 95       	reti

000004b2 <resched_vectors_init>:
    sched_reschedule();

    _bugurt_isr_epilogue();
}
void resched_vectors_init(void)
{
     4b2:	df 93       	push	r29
     4b4:	cf 93       	push	r28
     4b6:	0f 92       	push	r0
     4b8:	cd b7       	in	r28, 0x3d	; 61
     4ba:	de b7       	in	r29, 0x3e	; 62
    core_id_t i;
    for(i = 0; i < MAX_CORES; i++)
     4bc:	19 82       	std	Y+1, r1	; 0x01
     4be:	14 c0       	rjmp	.+40     	; 0x4e8 <resched_vectors_init+0x36>
    {
        vsmp_vinterrupt_init( ( vinterrupt_t * )resched_vectors + i, resched_isr );
     4c0:	89 81       	ldd	r24, Y+1	; 0x01
     4c2:	28 2f       	mov	r18, r24
     4c4:	30 e0       	ldi	r19, 0x00	; 0
     4c6:	c9 01       	movw	r24, r18
     4c8:	88 0f       	add	r24, r24
     4ca:	99 1f       	adc	r25, r25
     4cc:	82 0f       	add	r24, r18
     4ce:	93 1f       	adc	r25, r19
     4d0:	88 0f       	add	r24, r24
     4d2:	99 1f       	adc	r25, r25
     4d4:	81 5c       	subi	r24, 0xC1	; 193
     4d6:	9e 4f       	sbci	r25, 0xFE	; 254
     4d8:	2f ec       	ldi	r18, 0xCF	; 207
     4da:	31 e0       	ldi	r19, 0x01	; 1
     4dc:	b9 01       	movw	r22, r18
     4de:	0e 94 af 0a 	call	0x155e	; 0x155e <vsmp_vinterrupt_init>
    _bugurt_isr_epilogue();
}
void resched_vectors_init(void)
{
    core_id_t i;
    for(i = 0; i < MAX_CORES; i++)
     4e2:	89 81       	ldd	r24, Y+1	; 0x01
     4e4:	8f 5f       	subi	r24, 0xFF	; 255
     4e6:	89 83       	std	Y+1, r24	; 0x01
     4e8:	89 81       	ldd	r24, Y+1	; 0x01
     4ea:	82 30       	cpi	r24, 0x02	; 2
     4ec:	48 f3       	brcs	.-46     	; 0x4c0 <resched_vectors_init+0xe>
    {
        vsmp_vinterrupt_init( ( vinterrupt_t * )resched_vectors + i, resched_isr );
    }
}
     4ee:	0f 90       	pop	r0
     4f0:	cf 91       	pop	r28
     4f2:	df 91       	pop	r29
     4f4:	08 95       	ret

000004f6 <_systimer_tick_isr>:

vinterrupt_t systimer_vectors[MAX_CORES];
void _systimer_tick_isr(void)
{
     4f6:	df 93       	push	r29
     4f8:	cf 93       	push	r28
     4fa:	cd b7       	in	r28, 0x3d	; 61
     4fc:	de b7       	in	r29, 0x3e	; 62
    SPIN_LOCK_KERNEL_TIMER();
     4fe:	84 e9       	ldi	r24, 0x94	; 148
     500:	93 e0       	ldi	r25, 0x03	; 3
     502:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    kernel.timer++;
     506:	80 91 95 03 	lds	r24, 0x0395
     50a:	90 91 96 03 	lds	r25, 0x0396
     50e:	01 96       	adiw	r24, 0x01	; 1
     510:	90 93 96 03 	sts	0x0396, r25
     514:	80 93 95 03 	sts	0x0395, r24
    if( kernel.timer_tick != (void (*)(void))0 ) kernel.timer_tick();
     518:	80 91 97 03 	lds	r24, 0x0397
     51c:	90 91 98 03 	lds	r25, 0x0398
     520:	00 97       	sbiw	r24, 0x00	; 0
     522:	29 f0       	breq	.+10     	; 0x52e <_systimer_tick_isr+0x38>
     524:	e0 91 97 03 	lds	r30, 0x0397
     528:	f0 91 98 03 	lds	r31, 0x0398
     52c:	09 95       	icall
    SPIN_UNLOCK_KERNEL_TIMER();
     52e:	84 e9       	ldi	r24, 0x94	; 148
     530:	93 e0       	ldi	r25, 0x03	; 3
     532:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>

    sched_schedule();
     536:	0e 94 77 17 	call	0x2eee	; 0x2eee <sched_schedule>
}
     53a:	cf 91       	pop	r28
     53c:	df 91       	pop	r29
     53e:	08 95       	ret

00000540 <systimer_tick_isr>:
///!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
stack_t * saved_vm_sp[MAX_CORES];
bool_t is_idle[MAX_CORES];
__MACRO_FUNCTION__(_bugurt_isr_prologue)
{
    cli();
     540:	f8 94       	cli
    saved_vm_sp[current_vm] = (stack_t *)SP; // I didn't write bugurt_get_stack_pointer();
     542:	80 91 26 01 	lds	r24, 0x0126
     546:	48 2f       	mov	r20, r24
     548:	50 e0       	ldi	r21, 0x00	; 0
     54a:	ed e5       	ldi	r30, 0x5D	; 93
     54c:	f0 e0       	ldi	r31, 0x00	; 0
     54e:	80 81       	ld	r24, Z
     550:	91 81       	ldd	r25, Z+1	; 0x01
     552:	9c 01       	movw	r18, r24
     554:	ca 01       	movw	r24, r20
     556:	88 0f       	add	r24, r24
     558:	99 1f       	adc	r25, r25
     55a:	fc 01       	movw	r30, r24
     55c:	ec 5e       	subi	r30, 0xEC	; 236
     55e:	fe 4f       	sbci	r31, 0xFE	; 254
     560:	31 83       	std	Z+1, r19	; 0x01
     562:	20 83       	st	Z, r18
    kernel.sched[current_vm].current_proc->spointer = vm_state[current_vm].sp;
     564:	80 91 26 01 	lds	r24, 0x0126
     568:	28 2f       	mov	r18, r24
     56a:	30 e0       	ldi	r19, 0x00	; 0
     56c:	8b e2       	ldi	r24, 0x2B	; 43
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	ac 01       	movw	r20, r24
     572:	24 9f       	mul	r18, r20
     574:	c0 01       	movw	r24, r0
     576:	25 9f       	mul	r18, r21
     578:	90 0d       	add	r25, r0
     57a:	34 9f       	mul	r19, r20
     57c:	90 0d       	add	r25, r0
     57e:	11 24       	eor	r1, r1
     580:	fc 01       	movw	r30, r24
     582:	e5 52       	subi	r30, 0x25	; 37
     584:	fd 4f       	sbci	r31, 0xFD	; 253
     586:	a0 81       	ld	r26, Z
     588:	b1 81       	ldd	r27, Z+1	; 0x01
     58a:	80 91 26 01 	lds	r24, 0x0126
     58e:	28 2f       	mov	r18, r24
     590:	30 e0       	ldi	r19, 0x00	; 0
     592:	c9 01       	movw	r24, r18
     594:	88 0f       	add	r24, r24
     596:	99 1f       	adc	r25, r25
     598:	88 0f       	add	r24, r24
     59a:	99 1f       	adc	r25, r25
     59c:	88 0f       	add	r24, r24
     59e:	99 1f       	adc	r25, r25
     5a0:	82 0f       	add	r24, r18
     5a2:	93 1f       	adc	r25, r19
     5a4:	fc 01       	movw	r30, r24
     5a6:	e4 5d       	subi	r30, 0xD4	; 212
     5a8:	fe 4f       	sbci	r31, 0xFE	; 254
     5aa:	80 81       	ld	r24, Z
     5ac:	91 81       	ldd	r25, Z+1	; 0x01
     5ae:	9f 96       	adiw	r26, 0x2f	; 47
     5b0:	9c 93       	st	X, r25
     5b2:	8e 93       	st	-X, r24
     5b4:	9e 97       	sbiw	r26, 0x2e	; 46
    bugurt_set_stack_pointer( kernel.idle[current_vm].spointer );
     5b6:	80 91 26 01 	lds	r24, 0x0126
     5ba:	28 2f       	mov	r18, r24
     5bc:	30 e0       	ldi	r19, 0x00	; 0
     5be:	80 e3       	ldi	r24, 0x30	; 48
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	bc 01       	movw	r22, r24
     5c4:	26 9f       	mul	r18, r22
     5c6:	c0 01       	movw	r24, r0
     5c8:	27 9f       	mul	r18, r23
     5ca:	90 0d       	add	r25, r0
     5cc:	36 9f       	mul	r19, r22
     5ce:	90 0d       	add	r25, r0
     5d0:	11 24       	eor	r1, r1
     5d2:	fc 01       	movw	r30, r24
     5d4:	e1 5a       	subi	r30, 0xA1	; 161
     5d6:	fc 4f       	sbci	r31, 0xFC	; 252
     5d8:	80 81       	ld	r24, Z
     5da:	91 81       	ldd	r25, Z+1	; 0x01
     5dc:	0e 94 c5 00 	call	0x18a	; 0x18a <bugurt_set_stack_pointer>
    sei();
     5e0:	78 94       	sei
}
__attribute__ (( naked )) void systimer_tick_isr(void)
{
    _bugurt_isr_prologue();

    _systimer_tick_isr();
     5e2:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <_systimer_tick_isr>
    bugurt_set_stack_pointer( kernel.idle[current_vm].spointer );
    sei();
}
__MACRO_FUNCTION__(_bugurt_isr_epilogue)
{
    cli();
     5e6:	f8 94       	cli
    vm_state[current_vm].sp = kernel.sched[current_vm].current_proc->spointer;
     5e8:	80 91 26 01 	lds	r24, 0x0126
     5ec:	48 2f       	mov	r20, r24
     5ee:	50 e0       	ldi	r21, 0x00	; 0
     5f0:	80 91 26 01 	lds	r24, 0x0126
     5f4:	28 2f       	mov	r18, r24
     5f6:	30 e0       	ldi	r19, 0x00	; 0
     5f8:	8b e2       	ldi	r24, 0x2B	; 43
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	bc 01       	movw	r22, r24
     5fe:	26 9f       	mul	r18, r22
     600:	c0 01       	movw	r24, r0
     602:	27 9f       	mul	r18, r23
     604:	90 0d       	add	r25, r0
     606:	36 9f       	mul	r19, r22
     608:	90 0d       	add	r25, r0
     60a:	11 24       	eor	r1, r1
     60c:	fc 01       	movw	r30, r24
     60e:	e5 52       	subi	r30, 0x25	; 37
     610:	fd 4f       	sbci	r31, 0xFD	; 253
     612:	01 90       	ld	r0, Z+
     614:	f0 81       	ld	r31, Z
     616:	e0 2d       	mov	r30, r0
     618:	26 a5       	ldd	r18, Z+46	; 0x2e
     61a:	37 a5       	ldd	r19, Z+47	; 0x2f
     61c:	ca 01       	movw	r24, r20
     61e:	88 0f       	add	r24, r24
     620:	99 1f       	adc	r25, r25
     622:	88 0f       	add	r24, r24
     624:	99 1f       	adc	r25, r25
     626:	88 0f       	add	r24, r24
     628:	99 1f       	adc	r25, r25
     62a:	84 0f       	add	r24, r20
     62c:	95 1f       	adc	r25, r21
     62e:	fc 01       	movw	r30, r24
     630:	e4 5d       	subi	r30, 0xD4	; 212
     632:	fe 4f       	sbci	r31, 0xFE	; 254
     634:	31 83       	std	Z+1, r19	; 0x01
     636:	20 83       	st	Z, r18
    bugurt_set_stack_pointer( saved_vm_sp[current_vm] );
     638:	80 91 26 01 	lds	r24, 0x0126
     63c:	88 2f       	mov	r24, r24
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	88 0f       	add	r24, r24
     642:	99 1f       	adc	r25, r25
     644:	fc 01       	movw	r30, r24
     646:	ec 5e       	subi	r30, 0xEC	; 236
     648:	fe 4f       	sbci	r31, 0xFE	; 254
     64a:	80 81       	ld	r24, Z
     64c:	91 81       	ldd	r25, Z+1	; 0x01
     64e:	0e 94 c5 00 	call	0x18a	; 0x18a <bugurt_set_stack_pointer>
    __asm__ __volatile__("reti"::);
     652:	18 95       	reti

00000654 <systimer_sched_isr>:
///!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
stack_t * saved_vm_sp[MAX_CORES];
bool_t is_idle[MAX_CORES];
__MACRO_FUNCTION__(_bugurt_isr_prologue)
{
    cli();
     654:	f8 94       	cli
    saved_vm_sp[current_vm] = (stack_t *)SP; // I didn't write bugurt_get_stack_pointer();
     656:	80 91 26 01 	lds	r24, 0x0126
     65a:	48 2f       	mov	r20, r24
     65c:	50 e0       	ldi	r21, 0x00	; 0
     65e:	ed e5       	ldi	r30, 0x5D	; 93
     660:	f0 e0       	ldi	r31, 0x00	; 0
     662:	80 81       	ld	r24, Z
     664:	91 81       	ldd	r25, Z+1	; 0x01
     666:	9c 01       	movw	r18, r24
     668:	ca 01       	movw	r24, r20
     66a:	88 0f       	add	r24, r24
     66c:	99 1f       	adc	r25, r25
     66e:	fc 01       	movw	r30, r24
     670:	ec 5e       	subi	r30, 0xEC	; 236
     672:	fe 4f       	sbci	r31, 0xFE	; 254
     674:	31 83       	std	Z+1, r19	; 0x01
     676:	20 83       	st	Z, r18
    kernel.sched[current_vm].current_proc->spointer = vm_state[current_vm].sp;
     678:	80 91 26 01 	lds	r24, 0x0126
     67c:	28 2f       	mov	r18, r24
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	8b e2       	ldi	r24, 0x2B	; 43
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	ac 01       	movw	r20, r24
     686:	24 9f       	mul	r18, r20
     688:	c0 01       	movw	r24, r0
     68a:	25 9f       	mul	r18, r21
     68c:	90 0d       	add	r25, r0
     68e:	34 9f       	mul	r19, r20
     690:	90 0d       	add	r25, r0
     692:	11 24       	eor	r1, r1
     694:	fc 01       	movw	r30, r24
     696:	e5 52       	subi	r30, 0x25	; 37
     698:	fd 4f       	sbci	r31, 0xFD	; 253
     69a:	a0 81       	ld	r26, Z
     69c:	b1 81       	ldd	r27, Z+1	; 0x01
     69e:	80 91 26 01 	lds	r24, 0x0126
     6a2:	28 2f       	mov	r18, r24
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	c9 01       	movw	r24, r18
     6a8:	88 0f       	add	r24, r24
     6aa:	99 1f       	adc	r25, r25
     6ac:	88 0f       	add	r24, r24
     6ae:	99 1f       	adc	r25, r25
     6b0:	88 0f       	add	r24, r24
     6b2:	99 1f       	adc	r25, r25
     6b4:	82 0f       	add	r24, r18
     6b6:	93 1f       	adc	r25, r19
     6b8:	fc 01       	movw	r30, r24
     6ba:	e4 5d       	subi	r30, 0xD4	; 212
     6bc:	fe 4f       	sbci	r31, 0xFE	; 254
     6be:	80 81       	ld	r24, Z
     6c0:	91 81       	ldd	r25, Z+1	; 0x01
     6c2:	9f 96       	adiw	r26, 0x2f	; 47
     6c4:	9c 93       	st	X, r25
     6c6:	8e 93       	st	-X, r24
     6c8:	9e 97       	sbiw	r26, 0x2e	; 46
    bugurt_set_stack_pointer( kernel.idle[current_vm].spointer );
     6ca:	80 91 26 01 	lds	r24, 0x0126
     6ce:	28 2f       	mov	r18, r24
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	80 e3       	ldi	r24, 0x30	; 48
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	bc 01       	movw	r22, r24
     6d8:	26 9f       	mul	r18, r22
     6da:	c0 01       	movw	r24, r0
     6dc:	27 9f       	mul	r18, r23
     6de:	90 0d       	add	r25, r0
     6e0:	36 9f       	mul	r19, r22
     6e2:	90 0d       	add	r25, r0
     6e4:	11 24       	eor	r1, r1
     6e6:	fc 01       	movw	r30, r24
     6e8:	e1 5a       	subi	r30, 0xA1	; 161
     6ea:	fc 4f       	sbci	r31, 0xFC	; 252
     6ec:	80 81       	ld	r24, Z
     6ee:	91 81       	ldd	r25, Z+1	; 0x01
     6f0:	0e 94 c5 00 	call	0x18a	; 0x18a <bugurt_set_stack_pointer>
    sei();
     6f4:	78 94       	sei

__attribute__ (( naked )) void systimer_sched_isr(void)
{
    _bugurt_isr_prologue();

    sched_schedule();
     6f6:	0e 94 77 17 	call	0x2eee	; 0x2eee <sched_schedule>
    bugurt_set_stack_pointer( kernel.idle[current_vm].spointer );
    sei();
}
__MACRO_FUNCTION__(_bugurt_isr_epilogue)
{
    cli();
     6fa:	f8 94       	cli
    vm_state[current_vm].sp = kernel.sched[current_vm].current_proc->spointer;
     6fc:	80 91 26 01 	lds	r24, 0x0126
     700:	48 2f       	mov	r20, r24
     702:	50 e0       	ldi	r21, 0x00	; 0
     704:	80 91 26 01 	lds	r24, 0x0126
     708:	28 2f       	mov	r18, r24
     70a:	30 e0       	ldi	r19, 0x00	; 0
     70c:	8b e2       	ldi	r24, 0x2B	; 43
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	bc 01       	movw	r22, r24
     712:	26 9f       	mul	r18, r22
     714:	c0 01       	movw	r24, r0
     716:	27 9f       	mul	r18, r23
     718:	90 0d       	add	r25, r0
     71a:	36 9f       	mul	r19, r22
     71c:	90 0d       	add	r25, r0
     71e:	11 24       	eor	r1, r1
     720:	fc 01       	movw	r30, r24
     722:	e5 52       	subi	r30, 0x25	; 37
     724:	fd 4f       	sbci	r31, 0xFD	; 253
     726:	01 90       	ld	r0, Z+
     728:	f0 81       	ld	r31, Z
     72a:	e0 2d       	mov	r30, r0
     72c:	26 a5       	ldd	r18, Z+46	; 0x2e
     72e:	37 a5       	ldd	r19, Z+47	; 0x2f
     730:	ca 01       	movw	r24, r20
     732:	88 0f       	add	r24, r24
     734:	99 1f       	adc	r25, r25
     736:	88 0f       	add	r24, r24
     738:	99 1f       	adc	r25, r25
     73a:	88 0f       	add	r24, r24
     73c:	99 1f       	adc	r25, r25
     73e:	84 0f       	add	r24, r20
     740:	95 1f       	adc	r25, r21
     742:	fc 01       	movw	r30, r24
     744:	e4 5d       	subi	r30, 0xD4	; 212
     746:	fe 4f       	sbci	r31, 0xFE	; 254
     748:	31 83       	std	Z+1, r19	; 0x01
     74a:	20 83       	st	Z, r18
    bugurt_set_stack_pointer( saved_vm_sp[current_vm] );
     74c:	80 91 26 01 	lds	r24, 0x0126
     750:	88 2f       	mov	r24, r24
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	88 0f       	add	r24, r24
     756:	99 1f       	adc	r25, r25
     758:	fc 01       	movw	r30, r24
     75a:	ec 5e       	subi	r30, 0xEC	; 236
     75c:	fe 4f       	sbci	r31, 0xFE	; 254
     75e:	80 81       	ld	r24, Z
     760:	91 81       	ldd	r25, Z+1	; 0x01
     762:	0e 94 c5 00 	call	0x18a	; 0x18a <bugurt_set_stack_pointer>
    __asm__ __volatile__("reti"::);
     766:	18 95       	reti

00000768 <systimer_vectors_init>:

    _bugurt_isr_epilogue();
}

void systimer_vectors_init(void)
{
     768:	df 93       	push	r29
     76a:	cf 93       	push	r28
     76c:	0f 92       	push	r0
     76e:	cd b7       	in	r28, 0x3d	; 61
     770:	de b7       	in	r29, 0x3e	; 62
    core_id_t i;
    vsmp_vinterrupt_init( (vinterrupt_t *)systimer_vectors, systimer_tick_isr ); // Zero core is "mater", it handles kernel.timer
     772:	8b e4       	ldi	r24, 0x4B	; 75
     774:	91 e0       	ldi	r25, 0x01	; 1
     776:	20 ea       	ldi	r18, 0xA0	; 160
     778:	32 e0       	ldi	r19, 0x02	; 2
     77a:	b9 01       	movw	r22, r18
     77c:	0e 94 af 0a 	call	0x155e	; 0x155e <vsmp_vinterrupt_init>
    for(i = 1; i < MAX_CORES; i++)
     780:	81 e0       	ldi	r24, 0x01	; 1
     782:	89 83       	std	Y+1, r24	; 0x01
     784:	14 c0       	rjmp	.+40     	; 0x7ae <systimer_vectors_init+0x46>
    {
        vsmp_vinterrupt_init( (vinterrupt_t *)systimer_vectors + i, systimer_sched_isr ); // Other cores are slaves they just shedule.
     786:	89 81       	ldd	r24, Y+1	; 0x01
     788:	28 2f       	mov	r18, r24
     78a:	30 e0       	ldi	r19, 0x00	; 0
     78c:	c9 01       	movw	r24, r18
     78e:	88 0f       	add	r24, r24
     790:	99 1f       	adc	r25, r25
     792:	82 0f       	add	r24, r18
     794:	93 1f       	adc	r25, r19
     796:	88 0f       	add	r24, r24
     798:	99 1f       	adc	r25, r25
     79a:	85 5b       	subi	r24, 0xB5	; 181
     79c:	9e 4f       	sbci	r25, 0xFE	; 254
     79e:	2a e2       	ldi	r18, 0x2A	; 42
     7a0:	33 e0       	ldi	r19, 0x03	; 3
     7a2:	b9 01       	movw	r22, r18
     7a4:	0e 94 af 0a 	call	0x155e	; 0x155e <vsmp_vinterrupt_init>

void systimer_vectors_init(void)
{
    core_id_t i;
    vsmp_vinterrupt_init( (vinterrupt_t *)systimer_vectors, systimer_tick_isr ); // Zero core is "mater", it handles kernel.timer
    for(i = 1; i < MAX_CORES; i++)
     7a8:	89 81       	ldd	r24, Y+1	; 0x01
     7aa:	8f 5f       	subi	r24, 0xFF	; 255
     7ac:	89 83       	std	Y+1, r24	; 0x01
     7ae:	89 81       	ldd	r24, Y+1	; 0x01
     7b0:	82 30       	cpi	r24, 0x02	; 2
     7b2:	48 f3       	brcs	.-46     	; 0x786 <systimer_vectors_init+0x1e>
    {
        vsmp_vinterrupt_init( (vinterrupt_t *)systimer_vectors + i, systimer_sched_isr ); // Other cores are slaves they just shedule.
    }
}
     7b4:	0f 90       	pop	r0
     7b6:	cf 91       	pop	r28
     7b8:	df 91       	pop	r29
     7ba:	08 95       	ret

000007bc <systimer_vectors_fire>:

void systimer_vectors_fire(void)
{
     7bc:	df 93       	push	r29
     7be:	cf 93       	push	r28
     7c0:	0f 92       	push	r0
     7c2:	cd b7       	in	r28, 0x3d	; 61
     7c4:	de b7       	in	r29, 0x3e	; 62
    core_id_t i;
    for(i = 0; i < MAX_CORES; i++)
     7c6:	19 82       	std	Y+1, r1	; 0x01
     7c8:	14 c0       	rjmp	.+40     	; 0x7f2 <systimer_vectors_fire+0x36>
    {
        vsmp_vinterrupt_isr( i, (vinterrupt_t *)systimer_vectors + i );
     7ca:	89 81       	ldd	r24, Y+1	; 0x01
     7cc:	28 2f       	mov	r18, r24
     7ce:	30 e0       	ldi	r19, 0x00	; 0
     7d0:	c9 01       	movw	r24, r18
     7d2:	88 0f       	add	r24, r24
     7d4:	99 1f       	adc	r25, r25
     7d6:	82 0f       	add	r24, r18
     7d8:	93 1f       	adc	r25, r19
     7da:	88 0f       	add	r24, r24
     7dc:	99 1f       	adc	r25, r25
     7de:	9c 01       	movw	r18, r24
     7e0:	25 5b       	subi	r18, 0xB5	; 181
     7e2:	3e 4f       	sbci	r19, 0xFE	; 254
     7e4:	89 81       	ldd	r24, Y+1	; 0x01
     7e6:	b9 01       	movw	r22, r18
     7e8:	0e 94 4a 0a 	call	0x1494	; 0x1494 <vsmp_vinterrupt_isr>
}

void systimer_vectors_fire(void)
{
    core_id_t i;
    for(i = 0; i < MAX_CORES; i++)
     7ec:	89 81       	ldd	r24, Y+1	; 0x01
     7ee:	8f 5f       	subi	r24, 0xFF	; 255
     7f0:	89 83       	std	Y+1, r24	; 0x01
     7f2:	89 81       	ldd	r24, Y+1	; 0x01
     7f4:	82 30       	cpi	r24, 0x02	; 2
     7f6:	48 f3       	brcs	.-46     	; 0x7ca <systimer_vectors_fire+0xe>
    {
        vsmp_vinterrupt_isr( i, (vinterrupt_t *)systimer_vectors + i );
    }
}
     7f8:	0f 90       	pop	r0
     7fa:	cf 91       	pop	r28
     7fc:	df 91       	pop	r29
     7fe:	08 95       	ret

00000800 <vsmp_systimer_hook_bugurt>:

#define SYSTIMER_HOOK_THR 10
count_t systimer_hook_counter = 0;
void vsmp_systimer_hook_bugurt(void)
{
     800:	df 93       	push	r29
     802:	cf 93       	push	r28
     804:	cd b7       	in	r28, 0x3d	; 61
     806:	de b7       	in	r29, 0x3e	; 62
    if(!current_vm)
     808:	80 91 26 01 	lds	r24, 0x0126
     80c:	88 23       	and	r24, r24
     80e:	b1 f4       	brne	.+44     	; 0x83c <vsmp_systimer_hook_bugurt+0x3c>
    {
        systimer_hook_counter++;
     810:	80 91 12 01 	lds	r24, 0x0112
     814:	90 91 13 01 	lds	r25, 0x0113
     818:	01 96       	adiw	r24, 0x01	; 1
     81a:	90 93 13 01 	sts	0x0113, r25
     81e:	80 93 12 01 	sts	0x0112, r24
        if( systimer_hook_counter >= SYSTIMER_HOOK_THR )
     822:	80 91 12 01 	lds	r24, 0x0112
     826:	90 91 13 01 	lds	r25, 0x0113
     82a:	8a 30       	cpi	r24, 0x0A	; 10
     82c:	91 05       	cpc	r25, r1
     82e:	30 f0       	brcs	.+12     	; 0x83c <vsmp_systimer_hook_bugurt+0x3c>
        {
            systimer_hook_counter = (count_t)0;
     830:	10 92 13 01 	sts	0x0113, r1
     834:	10 92 12 01 	sts	0x0112, r1
            systimer_vectors_fire();
     838:	0e 94 de 03 	call	0x7bc	; 0x7bc <systimer_vectors_fire>
        }

    }
}
     83c:	cf 91       	pop	r28
     83e:	df 91       	pop	r29
     840:	08 95       	ret

00000842 <_syscall_isr>:
syscall_t syscall_num[MAX_CORES];
void * syscall_arg[MAX_CORES];

// Local variable is used compiler generated prologue and epilogue needed
void _syscall_isr(void)
{
     842:	df 93       	push	r29
     844:	cf 93       	push	r28
     846:	0f 92       	push	r0
     848:	cd b7       	in	r28, 0x3d	; 61
     84a:	de b7       	in	r29, 0x3e	; 62
    core_id_t core;
    core = current_core();
     84c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <current_core>
     850:	89 83       	std	Y+1, r24	; 0x01
    do_syscall( syscall_num[core], syscall_arg[core] );
     852:	89 81       	ldd	r24, Y+1	; 0x01
     854:	88 2f       	mov	r24, r24
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	fc 01       	movw	r30, r24
     85a:	e3 5c       	subi	r30, 0xC3	; 195
     85c:	fe 4f       	sbci	r31, 0xFE	; 254
     85e:	40 81       	ld	r20, Z
     860:	89 81       	ldd	r24, Y+1	; 0x01
     862:	88 2f       	mov	r24, r24
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	88 0f       	add	r24, r24
     868:	99 1f       	adc	r25, r25
     86a:	fc 01       	movw	r30, r24
     86c:	e7 5c       	subi	r30, 0xC7	; 199
     86e:	fe 4f       	sbci	r31, 0xFE	; 254
     870:	20 81       	ld	r18, Z
     872:	31 81       	ldd	r19, Z+1	; 0x01
     874:	84 2f       	mov	r24, r20
     876:	b9 01       	movw	r22, r18
     878:	0e 94 05 1c 	call	0x380a	; 0x380a <do_syscall>
}
     87c:	0f 90       	pop	r0
     87e:	cf 91       	pop	r28
     880:	df 91       	pop	r29
     882:	08 95       	ret

00000884 <syscall_isr>:
///!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
stack_t * saved_vm_sp[MAX_CORES];
bool_t is_idle[MAX_CORES];
__MACRO_FUNCTION__(_bugurt_isr_prologue)
{
    cli();
     884:	f8 94       	cli
    saved_vm_sp[current_vm] = (stack_t *)SP; // I didn't write bugurt_get_stack_pointer();
     886:	80 91 26 01 	lds	r24, 0x0126
     88a:	48 2f       	mov	r20, r24
     88c:	50 e0       	ldi	r21, 0x00	; 0
     88e:	ed e5       	ldi	r30, 0x5D	; 93
     890:	f0 e0       	ldi	r31, 0x00	; 0
     892:	80 81       	ld	r24, Z
     894:	91 81       	ldd	r25, Z+1	; 0x01
     896:	9c 01       	movw	r18, r24
     898:	ca 01       	movw	r24, r20
     89a:	88 0f       	add	r24, r24
     89c:	99 1f       	adc	r25, r25
     89e:	fc 01       	movw	r30, r24
     8a0:	ec 5e       	subi	r30, 0xEC	; 236
     8a2:	fe 4f       	sbci	r31, 0xFE	; 254
     8a4:	31 83       	std	Z+1, r19	; 0x01
     8a6:	20 83       	st	Z, r18
    kernel.sched[current_vm].current_proc->spointer = vm_state[current_vm].sp;
     8a8:	80 91 26 01 	lds	r24, 0x0126
     8ac:	28 2f       	mov	r18, r24
     8ae:	30 e0       	ldi	r19, 0x00	; 0
     8b0:	8b e2       	ldi	r24, 0x2B	; 43
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	ac 01       	movw	r20, r24
     8b6:	24 9f       	mul	r18, r20
     8b8:	c0 01       	movw	r24, r0
     8ba:	25 9f       	mul	r18, r21
     8bc:	90 0d       	add	r25, r0
     8be:	34 9f       	mul	r19, r20
     8c0:	90 0d       	add	r25, r0
     8c2:	11 24       	eor	r1, r1
     8c4:	fc 01       	movw	r30, r24
     8c6:	e5 52       	subi	r30, 0x25	; 37
     8c8:	fd 4f       	sbci	r31, 0xFD	; 253
     8ca:	a0 81       	ld	r26, Z
     8cc:	b1 81       	ldd	r27, Z+1	; 0x01
     8ce:	80 91 26 01 	lds	r24, 0x0126
     8d2:	28 2f       	mov	r18, r24
     8d4:	30 e0       	ldi	r19, 0x00	; 0
     8d6:	c9 01       	movw	r24, r18
     8d8:	88 0f       	add	r24, r24
     8da:	99 1f       	adc	r25, r25
     8dc:	88 0f       	add	r24, r24
     8de:	99 1f       	adc	r25, r25
     8e0:	88 0f       	add	r24, r24
     8e2:	99 1f       	adc	r25, r25
     8e4:	82 0f       	add	r24, r18
     8e6:	93 1f       	adc	r25, r19
     8e8:	fc 01       	movw	r30, r24
     8ea:	e4 5d       	subi	r30, 0xD4	; 212
     8ec:	fe 4f       	sbci	r31, 0xFE	; 254
     8ee:	80 81       	ld	r24, Z
     8f0:	91 81       	ldd	r25, Z+1	; 0x01
     8f2:	9f 96       	adiw	r26, 0x2f	; 47
     8f4:	9c 93       	st	X, r25
     8f6:	8e 93       	st	-X, r24
     8f8:	9e 97       	sbiw	r26, 0x2e	; 46
    bugurt_set_stack_pointer( kernel.idle[current_vm].spointer );
     8fa:	80 91 26 01 	lds	r24, 0x0126
     8fe:	28 2f       	mov	r18, r24
     900:	30 e0       	ldi	r19, 0x00	; 0
     902:	80 e3       	ldi	r24, 0x30	; 48
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	bc 01       	movw	r22, r24
     908:	26 9f       	mul	r18, r22
     90a:	c0 01       	movw	r24, r0
     90c:	27 9f       	mul	r18, r23
     90e:	90 0d       	add	r25, r0
     910:	36 9f       	mul	r19, r22
     912:	90 0d       	add	r25, r0
     914:	11 24       	eor	r1, r1
     916:	fc 01       	movw	r30, r24
     918:	e1 5a       	subi	r30, 0xA1	; 161
     91a:	fc 4f       	sbci	r31, 0xFC	; 252
     91c:	80 81       	ld	r24, Z
     91e:	91 81       	ldd	r25, Z+1	; 0x01
     920:	0e 94 c5 00 	call	0x18a	; 0x18a <bugurt_set_stack_pointer>
    sei();
     924:	78 94       	sei
}
__attribute__ (( naked )) void syscall_isr(void)
{
    _bugurt_isr_prologue();

    _syscall_isr();
     926:	0e 94 21 04 	call	0x842	; 0x842 <_syscall_isr>
    bugurt_set_stack_pointer( kernel.idle[current_vm].spointer );
    sei();
}
__MACRO_FUNCTION__(_bugurt_isr_epilogue)
{
    cli();
     92a:	f8 94       	cli
    vm_state[current_vm].sp = kernel.sched[current_vm].current_proc->spointer;
     92c:	80 91 26 01 	lds	r24, 0x0126
     930:	48 2f       	mov	r20, r24
     932:	50 e0       	ldi	r21, 0x00	; 0
     934:	80 91 26 01 	lds	r24, 0x0126
     938:	28 2f       	mov	r18, r24
     93a:	30 e0       	ldi	r19, 0x00	; 0
     93c:	8b e2       	ldi	r24, 0x2B	; 43
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	bc 01       	movw	r22, r24
     942:	26 9f       	mul	r18, r22
     944:	c0 01       	movw	r24, r0
     946:	27 9f       	mul	r18, r23
     948:	90 0d       	add	r25, r0
     94a:	36 9f       	mul	r19, r22
     94c:	90 0d       	add	r25, r0
     94e:	11 24       	eor	r1, r1
     950:	fc 01       	movw	r30, r24
     952:	e5 52       	subi	r30, 0x25	; 37
     954:	fd 4f       	sbci	r31, 0xFD	; 253
     956:	01 90       	ld	r0, Z+
     958:	f0 81       	ld	r31, Z
     95a:	e0 2d       	mov	r30, r0
     95c:	26 a5       	ldd	r18, Z+46	; 0x2e
     95e:	37 a5       	ldd	r19, Z+47	; 0x2f
     960:	ca 01       	movw	r24, r20
     962:	88 0f       	add	r24, r24
     964:	99 1f       	adc	r25, r25
     966:	88 0f       	add	r24, r24
     968:	99 1f       	adc	r25, r25
     96a:	88 0f       	add	r24, r24
     96c:	99 1f       	adc	r25, r25
     96e:	84 0f       	add	r24, r20
     970:	95 1f       	adc	r25, r21
     972:	fc 01       	movw	r30, r24
     974:	e4 5d       	subi	r30, 0xD4	; 212
     976:	fe 4f       	sbci	r31, 0xFE	; 254
     978:	31 83       	std	Z+1, r19	; 0x01
     97a:	20 83       	st	Z, r18
    bugurt_set_stack_pointer( saved_vm_sp[current_vm] );
     97c:	80 91 26 01 	lds	r24, 0x0126
     980:	88 2f       	mov	r24, r24
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	88 0f       	add	r24, r24
     986:	99 1f       	adc	r25, r25
     988:	fc 01       	movw	r30, r24
     98a:	ec 5e       	subi	r30, 0xEC	; 236
     98c:	fe 4f       	sbci	r31, 0xFE	; 254
     98e:	80 81       	ld	r24, Z
     990:	91 81       	ldd	r25, Z+1	; 0x01
     992:	0e 94 c5 00 	call	0x18a	; 0x18a <bugurt_set_stack_pointer>
    __asm__ __volatile__("reti"::);
     996:	18 95       	reti

00000998 <syscall_vectors_init>:
    _bugurt_isr_epilogue();
}


void syscall_vectors_init(void)
{
     998:	df 93       	push	r29
     99a:	cf 93       	push	r28
     99c:	0f 92       	push	r0
     99e:	cd b7       	in	r28, 0x3d	; 61
     9a0:	de b7       	in	r29, 0x3e	; 62
    core_id_t i;
    for(i = 0; i < MAX_CORES; i++)
     9a2:	19 82       	std	Y+1, r1	; 0x01
     9a4:	25 c0       	rjmp	.+74     	; 0x9f0 <syscall_vectors_init+0x58>
    {
        vsmp_vinterrupt_init( ( vinterrupt_t * )syscall_vectors + i, syscall_isr );
     9a6:	89 81       	ldd	r24, Y+1	; 0x01
     9a8:	28 2f       	mov	r18, r24
     9aa:	30 e0       	ldi	r19, 0x00	; 0
     9ac:	c9 01       	movw	r24, r18
     9ae:	88 0f       	add	r24, r24
     9b0:	99 1f       	adc	r25, r25
     9b2:	82 0f       	add	r24, r18
     9b4:	93 1f       	adc	r25, r19
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	86 5e       	subi	r24, 0xE6	; 230
     9bc:	9e 4f       	sbci	r25, 0xFE	; 254
     9be:	22 e4       	ldi	r18, 0x42	; 66
     9c0:	34 e0       	ldi	r19, 0x04	; 4
     9c2:	b9 01       	movw	r22, r18
     9c4:	0e 94 af 0a 	call	0x155e	; 0x155e <vsmp_vinterrupt_init>
        syscall_num[i] = (syscall_t)0;
     9c8:	89 81       	ldd	r24, Y+1	; 0x01
     9ca:	88 2f       	mov	r24, r24
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	fc 01       	movw	r30, r24
     9d0:	e3 5c       	subi	r30, 0xC3	; 195
     9d2:	fe 4f       	sbci	r31, 0xFE	; 254
     9d4:	10 82       	st	Z, r1
        syscall_arg[i] = (void *)0;
     9d6:	89 81       	ldd	r24, Y+1	; 0x01
     9d8:	88 2f       	mov	r24, r24
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	88 0f       	add	r24, r24
     9de:	99 1f       	adc	r25, r25
     9e0:	fc 01       	movw	r30, r24
     9e2:	e7 5c       	subi	r30, 0xC7	; 199
     9e4:	fe 4f       	sbci	r31, 0xFE	; 254
     9e6:	11 82       	std	Z+1, r1	; 0x01
     9e8:	10 82       	st	Z, r1


void syscall_vectors_init(void)
{
    core_id_t i;
    for(i = 0; i < MAX_CORES; i++)
     9ea:	89 81       	ldd	r24, Y+1	; 0x01
     9ec:	8f 5f       	subi	r24, 0xFF	; 255
     9ee:	89 83       	std	Y+1, r24	; 0x01
     9f0:	89 81       	ldd	r24, Y+1	; 0x01
     9f2:	82 30       	cpi	r24, 0x02	; 2
     9f4:	c0 f2       	brcs	.-80     	; 0x9a6 <syscall_vectors_init+0xe>
    {
        vsmp_vinterrupt_init( ( vinterrupt_t * )syscall_vectors + i, syscall_isr );
        syscall_num[i] = (syscall_t)0;
        syscall_arg[i] = (void *)0;
    }
}
     9f6:	0f 90       	pop	r0
     9f8:	cf 91       	pop	r28
     9fa:	df 91       	pop	r29
     9fc:	08 95       	ret

000009fe <syscall_bugurt>:

void syscall_bugurt( unsigned char num, void * arg )
{
     9fe:	df 93       	push	r29
     a00:	cf 93       	push	r28
     a02:	00 d0       	rcall	.+0      	; 0xa04 <syscall_bugurt+0x6>
     a04:	00 d0       	rcall	.+0      	; 0xa06 <syscall_bugurt+0x8>
     a06:	00 d0       	rcall	.+0      	; 0xa08 <syscall_bugurt+0xa>
     a08:	cd b7       	in	r28, 0x3d	; 61
     a0a:	de b7       	in	r29, 0x3e	; 62
     a0c:	8c 83       	std	Y+4, r24	; 0x04
     a0e:	7e 83       	std	Y+6, r23	; 0x06
     a10:	6d 83       	std	Y+5, r22	; 0x05
    core_id_t core;
    item_t * vector;

    disable_interrupts();
     a12:	0e 94 ca 0a 	call	0x1594	; 0x1594 <disable_interrupts>

    cli();
     a16:	f8 94       	cli
    core = current_vm;
     a18:	80 91 26 01 	lds	r24, 0x0126
     a1c:	8b 83       	std	Y+3, r24	; 0x03
    sei();
     a1e:	78 94       	sei

    syscall_num[core] = (syscall_t)num;
     a20:	8b 81       	ldd	r24, Y+3	; 0x03
     a22:	88 2f       	mov	r24, r24
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	fc 01       	movw	r30, r24
     a28:	e3 5c       	subi	r30, 0xC3	; 195
     a2a:	fe 4f       	sbci	r31, 0xFE	; 254
     a2c:	8c 81       	ldd	r24, Y+4	; 0x04
     a2e:	80 83       	st	Z, r24
    syscall_arg[core] = (void *)arg;
     a30:	8b 81       	ldd	r24, Y+3	; 0x03
     a32:	88 2f       	mov	r24, r24
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	88 0f       	add	r24, r24
     a38:	99 1f       	adc	r25, r25
     a3a:	fc 01       	movw	r30, r24
     a3c:	e7 5c       	subi	r30, 0xC7	; 199
     a3e:	fe 4f       	sbci	r31, 0xFE	; 254
     a40:	8d 81       	ldd	r24, Y+5	; 0x05
     a42:	9e 81       	ldd	r25, Y+6	; 0x06
     a44:	91 83       	std	Z+1, r25	; 0x01
     a46:	80 83       	st	Z, r24
    vector = (item_t *)( &syscall_vectors[core] );
     a48:	4a e1       	ldi	r20, 0x1A	; 26
     a4a:	51 e0       	ldi	r21, 0x01	; 1
     a4c:	8b 81       	ldd	r24, Y+3	; 0x03
     a4e:	28 2f       	mov	r18, r24
     a50:	30 e0       	ldi	r19, 0x00	; 0
     a52:	c9 01       	movw	r24, r18
     a54:	88 0f       	add	r24, r24
     a56:	99 1f       	adc	r25, r25
     a58:	82 0f       	add	r24, r18
     a5a:	93 1f       	adc	r25, r19
     a5c:	88 0f       	add	r24, r24
     a5e:	99 1f       	adc	r25, r25
     a60:	84 0f       	add	r24, r20
     a62:	95 1f       	adc	r25, r21
     a64:	9a 83       	std	Y+2, r25	; 0x02
     a66:	89 83       	std	Y+1, r24	; 0x01

    cli();
     a68:	f8 94       	cli
    vm_state[current_vm].int_enabled = (bool_t)1; // Virtual interrupts MUST be eanabled !!!
     a6a:	80 91 26 01 	lds	r24, 0x0126
     a6e:	28 2f       	mov	r18, r24
     a70:	30 e0       	ldi	r19, 0x00	; 0
     a72:	c9 01       	movw	r24, r18
     a74:	88 0f       	add	r24, r24
     a76:	99 1f       	adc	r25, r25
     a78:	88 0f       	add	r24, r24
     a7a:	99 1f       	adc	r25, r25
     a7c:	88 0f       	add	r24, r24
     a7e:	99 1f       	adc	r25, r25
     a80:	82 0f       	add	r24, r18
     a82:	93 1f       	adc	r25, r19
     a84:	fc 01       	movw	r30, r24
     a86:	e7 5d       	subi	r30, 0xD7	; 215
     a88:	fe 4f       	sbci	r31, 0xFE	; 254
     a8a:	81 e0       	ldi	r24, 0x01	; 1
     a8c:	80 83       	st	Z, r24
    // System call is not an ordinary interrupt!!!
    // It MUST be serviced FIRST!!!
    if( vm_state[current_vm].int_fifo )
     a8e:	80 91 26 01 	lds	r24, 0x0126
     a92:	28 2f       	mov	r18, r24
     a94:	30 e0       	ldi	r19, 0x00	; 0
     a96:	c9 01       	movw	r24, r18
     a98:	88 0f       	add	r24, r24
     a9a:	99 1f       	adc	r25, r25
     a9c:	88 0f       	add	r24, r24
     a9e:	99 1f       	adc	r25, r25
     aa0:	88 0f       	add	r24, r24
     aa2:	99 1f       	adc	r25, r25
     aa4:	82 0f       	add	r24, r18
     aa6:	93 1f       	adc	r25, r19
     aa8:	fc 01       	movw	r30, r24
     aaa:	e9 5d       	subi	r30, 0xD9	; 217
     aac:	fe 4f       	sbci	r31, 0xFE	; 254
     aae:	80 81       	ld	r24, Z
     ab0:	91 81       	ldd	r25, Z+1	; 0x01
     ab2:	00 97       	sbiw	r24, 0x00	; 0
     ab4:	d1 f0       	breq	.+52     	; 0xaea <syscall_bugurt+0xec>
    {
        item_insert( (item_t *)vector, ((item_t *)vm_state[current_vm].int_fifo)->next );
     ab6:	80 91 26 01 	lds	r24, 0x0126
     aba:	28 2f       	mov	r18, r24
     abc:	30 e0       	ldi	r19, 0x00	; 0
     abe:	c9 01       	movw	r24, r18
     ac0:	88 0f       	add	r24, r24
     ac2:	99 1f       	adc	r25, r25
     ac4:	88 0f       	add	r24, r24
     ac6:	99 1f       	adc	r25, r25
     ac8:	88 0f       	add	r24, r24
     aca:	99 1f       	adc	r25, r25
     acc:	82 0f       	add	r24, r18
     ace:	93 1f       	adc	r25, r19
     ad0:	fc 01       	movw	r30, r24
     ad2:	e9 5d       	subi	r30, 0xD9	; 217
     ad4:	fe 4f       	sbci	r31, 0xFE	; 254
     ad6:	01 90       	ld	r0, Z+
     ad8:	f0 81       	ld	r31, Z
     ada:	e0 2d       	mov	r30, r0
     adc:	20 81       	ld	r18, Z
     ade:	31 81       	ldd	r19, Z+1	; 0x01
     ae0:	89 81       	ldd	r24, Y+1	; 0x01
     ae2:	9a 81       	ldd	r25, Y+2	; 0x02
     ae4:	b9 01       	movw	r22, r18
     ae6:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <item_insert>
    }
    vm_state[current_vm].int_fifo = (item_t *)vector;
     aea:	80 91 26 01 	lds	r24, 0x0126
     aee:	28 2f       	mov	r18, r24
     af0:	30 e0       	ldi	r19, 0x00	; 0
     af2:	c9 01       	movw	r24, r18
     af4:	88 0f       	add	r24, r24
     af6:	99 1f       	adc	r25, r25
     af8:	88 0f       	add	r24, r24
     afa:	99 1f       	adc	r25, r25
     afc:	88 0f       	add	r24, r24
     afe:	99 1f       	adc	r25, r25
     b00:	82 0f       	add	r24, r18
     b02:	93 1f       	adc	r25, r19
     b04:	fc 01       	movw	r30, r24
     b06:	e9 5d       	subi	r30, 0xD9	; 217
     b08:	fe 4f       	sbci	r31, 0xFE	; 254
     b0a:	89 81       	ldd	r24, Y+1	; 0x01
     b0c:	9a 81       	ldd	r25, Y+2	; 0x02
     b0e:	91 83       	std	Z+1, r25	; 0x01
     b10:	80 83       	st	Z, r24
    _vsmp_vinterrupt();
     b12:	0e 94 54 09 	call	0x12a8	; 0x12a8 <_vsmp_vinterrupt>
}
     b16:	26 96       	adiw	r28, 0x06	; 6
     b18:	0f b6       	in	r0, 0x3f	; 63
     b1a:	f8 94       	cli
     b1c:	de bf       	out	0x3e, r29	; 62
     b1e:	0f be       	out	0x3f, r0	; 63
     b20:	cd bf       	out	0x3d, r28	; 61
     b22:	cf 91       	pop	r28
     b24:	df 91       	pop	r29
     b26:	08 95       	ret

00000b28 <init_bugurt>:
/***************************************************************************************************************/
// Функции общего пользования

void init_bugurt(void)
{
     b28:	df 93       	push	r29
     b2a:	cf 93       	push	r28
     b2c:	0f 92       	push	r0
     b2e:	cd b7       	in	r28, 0x3d	; 61
     b30:	de b7       	in	r29, 0x3e	; 62
    core_id_t i;
    disable_interrupts();
     b32:	0e 94 ca 0a 	call	0x1594	; 0x1594 <disable_interrupts>
    resched_vectors_init();
     b36:	0e 94 59 02 	call	0x4b2	; 0x4b2 <resched_vectors_init>
    systimer_vectors_init();
     b3a:	0e 94 b4 03 	call	0x768	; 0x768 <systimer_vectors_init>
    syscall_vectors_init();
     b3e:	0e 94 cc 04 	call	0x998	; 0x998 <syscall_vectors_init>
    kernel_init();
     b42:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <kernel_init>
    kernel.sched[current_core()].nested_crit_sec = (count_t)1;
     b46:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <current_core>
     b4a:	28 2f       	mov	r18, r24
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	8b e2       	ldi	r24, 0x2B	; 43
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	ac 01       	movw	r20, r24
     b54:	24 9f       	mul	r18, r20
     b56:	c0 01       	movw	r24, r0
     b58:	25 9f       	mul	r18, r21
     b5a:	90 0d       	add	r25, r0
     b5c:	34 9f       	mul	r19, r20
     b5e:	90 0d       	add	r25, r0
     b60:	11 24       	eor	r1, r1
     b62:	fc 01       	movw	r30, r24
     b64:	ed 5f       	subi	r30, 0xFD	; 253
     b66:	fc 4f       	sbci	r31, 0xFC	; 252
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	91 83       	std	Z+1, r25	; 0x01
     b6e:	80 83       	st	Z, r24
    for(i = 1; i < MAX_CORES; i++)
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	89 83       	std	Y+1, r24	; 0x01
     b74:	17 c0       	rjmp	.+46     	; 0xba4 <init_bugurt+0x7c>
    {
        kernel.idle[i].pmain = vsmp_idle_main;
     b76:	89 81       	ldd	r24, Y+1	; 0x01
     b78:	28 2f       	mov	r18, r24
     b7a:	30 e0       	ldi	r19, 0x00	; 0
     b7c:	80 e3       	ldi	r24, 0x30	; 48
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	ac 01       	movw	r20, r24
     b82:	24 9f       	mul	r18, r20
     b84:	c0 01       	movw	r24, r0
     b86:	25 9f       	mul	r18, r21
     b88:	90 0d       	add	r25, r0
     b8a:	34 9f       	mul	r19, r20
     b8c:	90 0d       	add	r25, r0
     b8e:	11 24       	eor	r1, r1
     b90:	fc 01       	movw	r30, r24
     b92:	eb 5a       	subi	r30, 0xAB	; 171
     b94:	fc 4f       	sbci	r31, 0xFC	; 252
     b96:	84 ee       	ldi	r24, 0xE4	; 228
     b98:	96 e0       	ldi	r25, 0x06	; 6
     b9a:	91 83       	std	Z+1, r25	; 0x01
     b9c:	80 83       	st	Z, r24
    resched_vectors_init();
    systimer_vectors_init();
    syscall_vectors_init();
    kernel_init();
    kernel.sched[current_core()].nested_crit_sec = (count_t)1;
    for(i = 1; i < MAX_CORES; i++)
     b9e:	89 81       	ldd	r24, Y+1	; 0x01
     ba0:	8f 5f       	subi	r24, 0xFF	; 255
     ba2:	89 83       	std	Y+1, r24	; 0x01
     ba4:	89 81       	ldd	r24, Y+1	; 0x01
     ba6:	82 30       	cpi	r24, 0x02	; 2
     ba8:	30 f3       	brcs	.-52     	; 0xb76 <init_bugurt+0x4e>
    {
        kernel.idle[i].pmain = vsmp_idle_main;
    }
}
     baa:	0f 90       	pop	r0
     bac:	cf 91       	pop	r28
     bae:	df 91       	pop	r29
     bb0:	08 95       	ret

00000bb2 <start_bugurt>:
void start_bugurt(void)
{
     bb2:	df 93       	push	r29
     bb4:	cf 93       	push	r28
     bb6:	cd b7       	in	r28, 0x3d	; 61
     bb8:	de b7       	in	r29, 0x3e	; 62
    kernel.sched[current_core()].nested_crit_sec = (count_t)0;
     bba:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <current_core>
     bbe:	28 2f       	mov	r18, r24
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	8b e2       	ldi	r24, 0x2B	; 43
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	ac 01       	movw	r20, r24
     bc8:	24 9f       	mul	r18, r20
     bca:	c0 01       	movw	r24, r0
     bcc:	25 9f       	mul	r18, r21
     bce:	90 0d       	add	r25, r0
     bd0:	34 9f       	mul	r19, r20
     bd2:	90 0d       	add	r25, r0
     bd4:	11 24       	eor	r1, r1
     bd6:	fc 01       	movw	r30, r24
     bd8:	ed 5f       	subi	r30, 0xFD	; 253
     bda:	fc 4f       	sbci	r31, 0xFC	; 252
     bdc:	11 82       	std	Z+1, r1	; 0x01
     bde:	10 82       	st	Z, r1
    enable_interrupts();
     be0:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <enable_interrupts>
    cli();
     be4:	f8 94       	cli
    vsmp_systimer_hook = vsmp_systimer_hook_bugurt;
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	94 e0       	ldi	r25, 0x04	; 4
     bea:	90 93 da 02 	sts	0x02DA, r25
     bee:	80 93 d9 02 	sts	0x02D9, r24
    sei();
     bf2:	78 94       	sei
    idle_main( (void *)0 );
     bf4:	80 e0       	ldi	r24, 0x00	; 0
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <idle_main>
}
     bfc:	cf 91       	pop	r28
     bfe:	df 91       	pop	r29
     c00:	08 95       	ret

00000c02 <vsmp_vm_init>:
void (*vsmp_systimer_hook)(void);



void vsmp_vm_init( vsmp_vm_t * vm, stack_t * sp, stack_t * int_sp )
{
     c02:	df 93       	push	r29
     c04:	cf 93       	push	r28
     c06:	00 d0       	rcall	.+0      	; 0xc08 <vsmp_vm_init+0x6>
     c08:	00 d0       	rcall	.+0      	; 0xc0a <vsmp_vm_init+0x8>
     c0a:	00 d0       	rcall	.+0      	; 0xc0c <vsmp_vm_init+0xa>
     c0c:	cd b7       	in	r28, 0x3d	; 61
     c0e:	de b7       	in	r29, 0x3e	; 62
     c10:	9a 83       	std	Y+2, r25	; 0x02
     c12:	89 83       	std	Y+1, r24	; 0x01
     c14:	7c 83       	std	Y+4, r23	; 0x04
     c16:	6b 83       	std	Y+3, r22	; 0x03
     c18:	5e 83       	std	Y+6, r21	; 0x06
     c1a:	4d 83       	std	Y+5, r20	; 0x05
    vm->int_fifo = (item_t *)0; // Нет прерываний;
     c1c:	e9 81       	ldd	r30, Y+1	; 0x01
     c1e:	fa 81       	ldd	r31, Y+2	; 0x02
     c20:	11 82       	std	Z+1, r1	; 0x01
     c22:	10 82       	st	Z, r1
    vm->int_enabled = 1;// прерывания разрешены
     c24:	e9 81       	ldd	r30, Y+1	; 0x01
     c26:	fa 81       	ldd	r31, Y+2	; 0x02
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	82 83       	std	Z+2, r24	; 0x02
    vm->sp = (stack_t *)sp;
     c2c:	e9 81       	ldd	r30, Y+1	; 0x01
     c2e:	fa 81       	ldd	r31, Y+2	; 0x02
     c30:	8b 81       	ldd	r24, Y+3	; 0x03
     c32:	9c 81       	ldd	r25, Y+4	; 0x04
     c34:	96 83       	std	Z+6, r25	; 0x06
     c36:	85 83       	std	Z+5, r24	; 0x05
    vm->int_sp = (stack_t *)int_sp;
     c38:	e9 81       	ldd	r30, Y+1	; 0x01
     c3a:	fa 81       	ldd	r31, Y+2	; 0x02
     c3c:	8d 81       	ldd	r24, Y+5	; 0x05
     c3e:	9e 81       	ldd	r25, Y+6	; 0x06
     c40:	90 87       	std	Z+8, r25	; 0x08
     c42:	87 83       	std	Z+7, r24	; 0x07
    vm->int_nest_count = (count_t)0;
     c44:	e9 81       	ldd	r30, Y+1	; 0x01
     c46:	fa 81       	ldd	r31, Y+2	; 0x02
     c48:	14 82       	std	Z+4, r1	; 0x04
     c4a:	13 82       	std	Z+3, r1	; 0x03
}
     c4c:	26 96       	adiw	r28, 0x06	; 6
     c4e:	0f b6       	in	r0, 0x3f	; 63
     c50:	f8 94       	cli
     c52:	de bf       	out	0x3e, r29	; 62
     c54:	0f be       	out	0x3f, r0	; 63
     c56:	cd bf       	out	0x3d, r28	; 61
     c58:	cf 91       	pop	r28
     c5a:	df 91       	pop	r29
     c5c:	08 95       	ret

00000c5e <vsmp_init>:
void vsmp_init( void )
{
     c5e:	df 93       	push	r29
     c60:	cf 93       	push	r28
     c62:	00 d0       	rcall	.+0      	; 0xc64 <vsmp_init+0x6>
     c64:	00 d0       	rcall	.+0      	; 0xc66 <vsmp_init+0x8>
     c66:	cd b7       	in	r28, 0x3d	; 61
     c68:	de b7       	in	r29, 0x3e	; 62
    unsigned short i;
    cli();
     c6a:	f8 94       	cli
    for(i = 0; i < VM_STACK_SIZE; i++ )vm_int_stack[0][i] = 0x55;
     c6c:	1c 82       	std	Y+4, r1	; 0x04
     c6e:	1b 82       	std	Y+3, r1	; 0x03
     c70:	0c c0       	rjmp	.+24     	; 0xc8a <vsmp_init+0x2c>
     c72:	8b 81       	ldd	r24, Y+3	; 0x03
     c74:	9c 81       	ldd	r25, Y+4	; 0x04
     c76:	fc 01       	movw	r30, r24
     c78:	e7 52       	subi	r30, 0x27	; 39
     c7a:	fe 4f       	sbci	r31, 0xFE	; 254
     c7c:	85 e5       	ldi	r24, 0x55	; 85
     c7e:	80 83       	st	Z, r24
     c80:	8b 81       	ldd	r24, Y+3	; 0x03
     c82:	9c 81       	ldd	r25, Y+4	; 0x04
     c84:	01 96       	adiw	r24, 0x01	; 1
     c86:	9c 83       	std	Y+4, r25	; 0x04
     c88:	8b 83       	std	Y+3, r24	; 0x03
     c8a:	8b 81       	ldd	r24, Y+3	; 0x03
     c8c:	9c 81       	ldd	r25, Y+4	; 0x04
     c8e:	80 38       	cpi	r24, 0x80	; 128
     c90:	91 05       	cpc	r25, r1
     c92:	78 f3       	brcs	.-34     	; 0xc72 <vsmp_init+0x14>
    vsmp_vm_init( &vm_state[0], (stack_t *)0 , &vm_int_stack[0][VM_INT_STACK_SIZE-1] );
     c94:	89 ed       	ldi	r24, 0xD9	; 217
     c96:	91 e0       	ldi	r25, 0x01	; 1
     c98:	9c 01       	movw	r18, r24
     c9a:	21 58       	subi	r18, 0x81	; 129
     c9c:	3f 4f       	sbci	r19, 0xFF	; 255
     c9e:	87 e2       	ldi	r24, 0x27	; 39
     ca0:	91 e0       	ldi	r25, 0x01	; 1
     ca2:	60 e0       	ldi	r22, 0x00	; 0
     ca4:	70 e0       	ldi	r23, 0x00	; 0
     ca6:	a9 01       	movw	r20, r18
     ca8:	0e 94 01 06 	call	0xc02	; 0xc02 <vsmp_vm_init>
    for( current_vm = 1; current_vm < MAX_CORES; current_vm++ )
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	80 93 26 01 	sts	0x0126, r24
     cb2:	74 c0       	rjmp	.+232    	; 0xd9c <vsmp_init+0x13e>
    {
        stack_t * vm_sp;
        for(i = 0; i < VM_STACK_SIZE; i++ )
     cb4:	1c 82       	std	Y+4, r1	; 0x04
     cb6:	1b 82       	std	Y+3, r1	; 0x03
     cb8:	2a c0       	rjmp	.+84     	; 0xd0e <vsmp_init+0xb0>
        {
            vm_stack[current_vm - 1][i] = 0x55;
     cba:	80 91 26 01 	lds	r24, 0x0126
     cbe:	88 2f       	mov	r24, r24
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	01 97       	sbiw	r24, 0x01	; 1
     cc4:	2b 81       	ldd	r18, Y+3	; 0x03
     cc6:	3c 81       	ldd	r19, Y+4	; 0x04
     cc8:	96 95       	lsr	r25
     cca:	98 2f       	mov	r25, r24
     ccc:	88 27       	eor	r24, r24
     cce:	97 95       	ror	r25
     cd0:	87 95       	ror	r24
     cd2:	82 0f       	add	r24, r18
     cd4:	93 1f       	adc	r25, r19
     cd6:	fc 01       	movw	r30, r24
     cd8:	e7 5a       	subi	r30, 0xA7	; 167
     cda:	fe 4f       	sbci	r31, 0xFE	; 254
     cdc:	85 e5       	ldi	r24, 0x55	; 85
     cde:	80 83       	st	Z, r24
            vm_int_stack[current_vm][i] = 0x55;
     ce0:	80 91 26 01 	lds	r24, 0x0126
     ce4:	88 2f       	mov	r24, r24
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	2b 81       	ldd	r18, Y+3	; 0x03
     cea:	3c 81       	ldd	r19, Y+4	; 0x04
     cec:	96 95       	lsr	r25
     cee:	98 2f       	mov	r25, r24
     cf0:	88 27       	eor	r24, r24
     cf2:	97 95       	ror	r25
     cf4:	87 95       	ror	r24
     cf6:	82 0f       	add	r24, r18
     cf8:	93 1f       	adc	r25, r19
     cfa:	fc 01       	movw	r30, r24
     cfc:	e7 52       	subi	r30, 0x27	; 39
     cfe:	fe 4f       	sbci	r31, 0xFE	; 254
     d00:	85 e5       	ldi	r24, 0x55	; 85
     d02:	80 83       	st	Z, r24
    for(i = 0; i < VM_STACK_SIZE; i++ )vm_int_stack[0][i] = 0x55;
    vsmp_vm_init( &vm_state[0], (stack_t *)0 , &vm_int_stack[0][VM_INT_STACK_SIZE-1] );
    for( current_vm = 1; current_vm < MAX_CORES; current_vm++ )
    {
        stack_t * vm_sp;
        for(i = 0; i < VM_STACK_SIZE; i++ )
     d04:	8b 81       	ldd	r24, Y+3	; 0x03
     d06:	9c 81       	ldd	r25, Y+4	; 0x04
     d08:	01 96       	adiw	r24, 0x01	; 1
     d0a:	9c 83       	std	Y+4, r25	; 0x04
     d0c:	8b 83       	std	Y+3, r24	; 0x03
     d0e:	8b 81       	ldd	r24, Y+3	; 0x03
     d10:	9c 81       	ldd	r25, Y+4	; 0x04
     d12:	80 38       	cpi	r24, 0x80	; 128
     d14:	91 05       	cpc	r25, r1
     d16:	88 f2       	brcs	.-94     	; 0xcba <vsmp_init+0x5c>
        {
            vm_stack[current_vm - 1][i] = 0x55;
            vm_int_stack[current_vm][i] = 0x55;
        }
        vm_sp = proc_stack_init( &vm_stack[current_vm - 1][VM_STACK_SIZE - 1], (code_t)vsmp_idle_main, (void *)0 );
     d18:	80 91 26 01 	lds	r24, 0x0126
     d1c:	88 2f       	mov	r24, r24
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	01 97       	sbiw	r24, 0x01	; 1
     d22:	96 95       	lsr	r25
     d24:	98 2f       	mov	r25, r24
     d26:	88 27       	eor	r24, r24
     d28:	97 95       	ror	r25
     d2a:	87 95       	ror	r24
     d2c:	81 58       	subi	r24, 0x81	; 129
     d2e:	9f 4f       	sbci	r25, 0xFF	; 255
     d30:	87 5a       	subi	r24, 0xA7	; 167
     d32:	9e 4f       	sbci	r25, 0xFE	; 254
     d34:	24 ee       	ldi	r18, 0xE4	; 228
     d36:	36 e0       	ldi	r19, 0x06	; 6
     d38:	b9 01       	movw	r22, r18
     d3a:	40 e0       	ldi	r20, 0x00	; 0
     d3c:	50 e0       	ldi	r21, 0x00	; 0
     d3e:	0e 94 16 0b 	call	0x162c	; 0x162c <proc_stack_init>
     d42:	9a 83       	std	Y+2, r25	; 0x02
     d44:	89 83       	std	Y+1, r24	; 0x01
        vsmp_vm_init( &vm_state[current_vm], (stack_t *)vm_sp, &vm_int_stack[current_vm][VM_INT_STACK_SIZE-1] );
     d46:	80 91 26 01 	lds	r24, 0x0126
     d4a:	28 2f       	mov	r18, r24
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	c9 01       	movw	r24, r18
     d50:	88 0f       	add	r24, r24
     d52:	99 1f       	adc	r25, r25
     d54:	88 0f       	add	r24, r24
     d56:	99 1f       	adc	r25, r25
     d58:	88 0f       	add	r24, r24
     d5a:	99 1f       	adc	r25, r25
     d5c:	82 0f       	add	r24, r18
     d5e:	93 1f       	adc	r25, r19
     d60:	bc 01       	movw	r22, r24
     d62:	69 5d       	subi	r22, 0xD9	; 217
     d64:	7e 4f       	sbci	r23, 0xFE	; 254
     d66:	29 ed       	ldi	r18, 0xD9	; 217
     d68:	31 e0       	ldi	r19, 0x01	; 1
     d6a:	80 91 26 01 	lds	r24, 0x0126
     d6e:	88 2f       	mov	r24, r24
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	96 95       	lsr	r25
     d74:	98 2f       	mov	r25, r24
     d76:	88 27       	eor	r24, r24
     d78:	97 95       	ror	r25
     d7a:	87 95       	ror	r24
     d7c:	81 58       	subi	r24, 0x81	; 129
     d7e:	9f 4f       	sbci	r25, 0xFF	; 255
     d80:	a9 01       	movw	r20, r18
     d82:	48 0f       	add	r20, r24
     d84:	59 1f       	adc	r21, r25
     d86:	29 81       	ldd	r18, Y+1	; 0x01
     d88:	3a 81       	ldd	r19, Y+2	; 0x02
     d8a:	cb 01       	movw	r24, r22
     d8c:	b9 01       	movw	r22, r18
     d8e:	0e 94 01 06 	call	0xc02	; 0xc02 <vsmp_vm_init>
{
    unsigned short i;
    cli();
    for(i = 0; i < VM_STACK_SIZE; i++ )vm_int_stack[0][i] = 0x55;
    vsmp_vm_init( &vm_state[0], (stack_t *)0 , &vm_int_stack[0][VM_INT_STACK_SIZE-1] );
    for( current_vm = 1; current_vm < MAX_CORES; current_vm++ )
     d92:	80 91 26 01 	lds	r24, 0x0126
     d96:	8f 5f       	subi	r24, 0xFF	; 255
     d98:	80 93 26 01 	sts	0x0126, r24
     d9c:	80 91 26 01 	lds	r24, 0x0126
     da0:	82 30       	cpi	r24, 0x02	; 2
     da2:	08 f4       	brcc	.+2      	; 0xda6 <vsmp_init+0x148>
     da4:	87 cf       	rjmp	.-242    	; 0xcb4 <vsmp_init+0x56>
            vm_int_stack[current_vm][i] = 0x55;
        }
        vm_sp = proc_stack_init( &vm_stack[current_vm - 1][VM_STACK_SIZE - 1], (code_t)vsmp_idle_main, (void *)0 );
        vsmp_vm_init( &vm_state[current_vm], (stack_t *)vm_sp, &vm_int_stack[current_vm][VM_INT_STACK_SIZE-1] );
    }
    current_vm = 0;
     da6:	10 92 26 01 	sts	0x0126, r1
}
     daa:	0f 90       	pop	r0
     dac:	0f 90       	pop	r0
     dae:	0f 90       	pop	r0
     db0:	0f 90       	pop	r0
     db2:	cf 91       	pop	r28
     db4:	df 91       	pop	r29
     db6:	08 95       	ret

00000db8 <vsmp_run>:

void vsmp_run( void )
{
     db8:	df 93       	push	r29
     dba:	cf 93       	push	r28
     dbc:	cd b7       	in	r28, 0x3d	; 61
     dbe:	de b7       	in	r29, 0x3e	; 62
    sei();
     dc0:	78 94       	sei
}
     dc2:	cf 91       	pop	r28
     dc4:	df 91       	pop	r29
     dc6:	08 95       	ret

00000dc8 <vsmp_idle_main>:
void vsmp_idle_main( void * arg )
{
     dc8:	df 93       	push	r29
     dca:	cf 93       	push	r28
     dcc:	00 d0       	rcall	.+0      	; 0xdce <vsmp_idle_main+0x6>
     dce:	cd b7       	in	r28, 0x3d	; 61
     dd0:	de b7       	in	r29, 0x3e	; 62
     dd2:	9a 83       	std	Y+2, r25	; 0x02
     dd4:	89 83       	std	Y+1, r24	; 0x01
     dd6:	ff cf       	rjmp	.-2      	; 0xdd6 <vsmp_idle_main+0xe>

00000dd8 <vsmp_do_interrupt>:
    while(1);
}

bool_t vsmp_do_interrupt(void)
{
     dd8:	df 93       	push	r29
     dda:	cf 93       	push	r28
     ddc:	0f 92       	push	r0
     dde:	cd b7       	in	r28, 0x3d	; 61
     de0:	de b7       	in	r29, 0x3e	; 62
    // if current vm is interruptible and there are some interrupts in fifo,
    if( (vm_state[current_vm].int_enabled) && (vm_state[current_vm].int_fifo) )
     de2:	80 91 26 01 	lds	r24, 0x0126
     de6:	28 2f       	mov	r18, r24
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	c9 01       	movw	r24, r18
     dec:	88 0f       	add	r24, r24
     dee:	99 1f       	adc	r25, r25
     df0:	88 0f       	add	r24, r24
     df2:	99 1f       	adc	r25, r25
     df4:	88 0f       	add	r24, r24
     df6:	99 1f       	adc	r25, r25
     df8:	82 0f       	add	r24, r18
     dfa:	93 1f       	adc	r25, r19
     dfc:	fc 01       	movw	r30, r24
     dfe:	e7 5d       	subi	r30, 0xD7	; 215
     e00:	fe 4f       	sbci	r31, 0xFE	; 254
     e02:	80 81       	ld	r24, Z
     e04:	88 23       	and	r24, r24
     e06:	09 f4       	brne	.+2      	; 0xe0a <vsmp_do_interrupt+0x32>
     e08:	79 c0       	rjmp	.+242    	; 0xefc <vsmp_do_interrupt+0x124>
     e0a:	80 91 26 01 	lds	r24, 0x0126
     e0e:	28 2f       	mov	r18, r24
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	c9 01       	movw	r24, r18
     e14:	88 0f       	add	r24, r24
     e16:	99 1f       	adc	r25, r25
     e18:	88 0f       	add	r24, r24
     e1a:	99 1f       	adc	r25, r25
     e1c:	88 0f       	add	r24, r24
     e1e:	99 1f       	adc	r25, r25
     e20:	82 0f       	add	r24, r18
     e22:	93 1f       	adc	r25, r19
     e24:	fc 01       	movw	r30, r24
     e26:	e9 5d       	subi	r30, 0xD9	; 217
     e28:	fe 4f       	sbci	r31, 0xFE	; 254
     e2a:	80 81       	ld	r24, Z
     e2c:	91 81       	ldd	r25, Z+1	; 0x01
     e2e:	00 97       	sbiw	r24, 0x00	; 0
     e30:	09 f4       	brne	.+2      	; 0xe34 <vsmp_do_interrupt+0x5c>
     e32:	64 c0       	rjmp	.+200    	; 0xefc <vsmp_do_interrupt+0x124>
    {
        // cut head interrupt,
        vm_buf = (void *)vm_state[current_vm].int_fifo;
     e34:	80 91 26 01 	lds	r24, 0x0126
     e38:	28 2f       	mov	r18, r24
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	c9 01       	movw	r24, r18
     e3e:	88 0f       	add	r24, r24
     e40:	99 1f       	adc	r25, r25
     e42:	88 0f       	add	r24, r24
     e44:	99 1f       	adc	r25, r25
     e46:	88 0f       	add	r24, r24
     e48:	99 1f       	adc	r25, r25
     e4a:	82 0f       	add	r24, r18
     e4c:	93 1f       	adc	r25, r19
     e4e:	fc 01       	movw	r30, r24
     e50:	e9 5d       	subi	r30, 0xD9	; 217
     e52:	fe 4f       	sbci	r31, 0xFE	; 254
     e54:	80 81       	ld	r24, Z
     e56:	91 81       	ldd	r25, Z+1	; 0x01
     e58:	90 93 58 01 	sts	0x0158, r25
     e5c:	80 93 57 01 	sts	0x0157, r24
        if( vm_buf == (void *)((item_t *)vm_buf)->next )
     e60:	80 91 57 01 	lds	r24, 0x0157
     e64:	90 91 58 01 	lds	r25, 0x0158
     e68:	fc 01       	movw	r30, r24
     e6a:	20 81       	ld	r18, Z
     e6c:	31 81       	ldd	r19, Z+1	; 0x01
     e6e:	80 91 57 01 	lds	r24, 0x0157
     e72:	90 91 58 01 	lds	r25, 0x0158
     e76:	28 17       	cp	r18, r24
     e78:	39 07       	cpc	r19, r25
     e7a:	99 f4       	brne	.+38     	; 0xea2 <vsmp_do_interrupt+0xca>
        {
            /* only one interrupt in fifo */
            vm_state[current_vm].int_fifo = (item_t *)0;
     e7c:	80 91 26 01 	lds	r24, 0x0126
     e80:	28 2f       	mov	r18, r24
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	c9 01       	movw	r24, r18
     e86:	88 0f       	add	r24, r24
     e88:	99 1f       	adc	r25, r25
     e8a:	88 0f       	add	r24, r24
     e8c:	99 1f       	adc	r25, r25
     e8e:	88 0f       	add	r24, r24
     e90:	99 1f       	adc	r25, r25
     e92:	82 0f       	add	r24, r18
     e94:	93 1f       	adc	r25, r19
     e96:	fc 01       	movw	r30, r24
     e98:	e9 5d       	subi	r30, 0xD9	; 217
     e9a:	fe 4f       	sbci	r31, 0xFE	; 254
     e9c:	11 82       	std	Z+1, r1	; 0x01
     e9e:	10 82       	st	Z, r1
     ea0:	1f c0       	rjmp	.+62     	; 0xee0 <vsmp_do_interrupt+0x108>
        }
        else
        {
            /* many interrupts in fifo */
            vm_state[current_vm].int_fifo = (void *)((item_t *)vm_buf)->next;
     ea2:	80 91 26 01 	lds	r24, 0x0126
     ea6:	28 2f       	mov	r18, r24
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	80 91 57 01 	lds	r24, 0x0157
     eae:	90 91 58 01 	lds	r25, 0x0158
     eb2:	fc 01       	movw	r30, r24
     eb4:	40 81       	ld	r20, Z
     eb6:	51 81       	ldd	r21, Z+1	; 0x01
     eb8:	c9 01       	movw	r24, r18
     eba:	88 0f       	add	r24, r24
     ebc:	99 1f       	adc	r25, r25
     ebe:	88 0f       	add	r24, r24
     ec0:	99 1f       	adc	r25, r25
     ec2:	88 0f       	add	r24, r24
     ec4:	99 1f       	adc	r25, r25
     ec6:	82 0f       	add	r24, r18
     ec8:	93 1f       	adc	r25, r19
     eca:	fc 01       	movw	r30, r24
     ecc:	e9 5d       	subi	r30, 0xD9	; 217
     ece:	fe 4f       	sbci	r31, 0xFE	; 254
     ed0:	51 83       	std	Z+1, r21	; 0x01
     ed2:	40 83       	st	Z, r20
            item_cut( (item_t *)vm_buf );
     ed4:	80 91 57 01 	lds	r24, 0x0157
     ed8:	90 91 58 01 	lds	r25, 0x0158
     edc:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <item_cut>
        }
        // write its isr pointer to vm_buf,
        vm_buf = (void *)(((vinterrupt_t *)vm_buf)->isr);
     ee0:	80 91 57 01 	lds	r24, 0x0157
     ee4:	90 91 58 01 	lds	r25, 0x0158
     ee8:	fc 01       	movw	r30, r24
     eea:	84 81       	ldd	r24, Z+4	; 0x04
     eec:	95 81       	ldd	r25, Z+5	; 0x05
     eee:	90 93 58 01 	sts	0x0158, r25
     ef2:	80 93 57 01 	sts	0x0157, r24
        // and return 1;
        return (bool_t)1;
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	89 83       	std	Y+1, r24	; 0x01
     efa:	01 c0       	rjmp	.+2      	; 0xefe <vsmp_do_interrupt+0x126>
    }
    // else return 0.
    return (bool_t)0;
     efc:	19 82       	std	Y+1, r1	; 0x01
     efe:	89 81       	ldd	r24, Y+1	; 0x01
}
     f00:	0f 90       	pop	r0
     f02:	cf 91       	pop	r28
     f04:	df 91       	pop	r29
     f06:	08 95       	ret

00000f08 <_vinterrupt_wrapper>:
                       Virtual interrupts wrapper functions.
    Local variable is used to call virtual ISR, so wrapper must have two parts.
*/
// Nested part, uses local variables, so compiler generated prologue and epilogue are needed.
static void _vinterrupt_wrapper(void)
{
     f08:	df 93       	push	r29
     f0a:	cf 93       	push	r28
     f0c:	00 d0       	rcall	.+0      	; 0xf0e <_vinterrupt_wrapper+0x6>
     f0e:	cd b7       	in	r28, 0x3d	; 61
     f10:	de b7       	in	r29, 0x3e	; 62
    void (*isr)(void);
    vm_state[current_vm].int_enabled = (bool_t)0; // Virtual interrupt nesting is not alowed by default.
     f12:	80 91 26 01 	lds	r24, 0x0126
     f16:	28 2f       	mov	r18, r24
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	c9 01       	movw	r24, r18
     f1c:	88 0f       	add	r24, r24
     f1e:	99 1f       	adc	r25, r25
     f20:	88 0f       	add	r24, r24
     f22:	99 1f       	adc	r25, r25
     f24:	88 0f       	add	r24, r24
     f26:	99 1f       	adc	r25, r25
     f28:	82 0f       	add	r24, r18
     f2a:	93 1f       	adc	r25, r19
     f2c:	fc 01       	movw	r30, r24
     f2e:	e7 5d       	subi	r30, 0xD7	; 215
     f30:	fe 4f       	sbci	r31, 0xFE	; 254
     f32:	10 82       	st	Z, r1
    isr = (void (*)(void))vm_buf;
     f34:	80 91 57 01 	lds	r24, 0x0157
     f38:	90 91 58 01 	lds	r25, 0x0158
     f3c:	9a 83       	std	Y+2, r25	; 0x02
     f3e:	89 83       	std	Y+1, r24	; 0x01
    // After vm-buf read we can reenable real interrupts!
    sei();
     f40:	78 94       	sei
    isr();
     f42:	e9 81       	ldd	r30, Y+1	; 0x01
     f44:	fa 81       	ldd	r31, Y+2	; 0x02
     f46:	09 95       	icall
}
     f48:	0f 90       	pop	r0
     f4a:	0f 90       	pop	r0
     f4c:	cf 91       	pop	r28
     f4e:	df 91       	pop	r29
     f50:	08 95       	ret

00000f52 <vinterrupt_wrapper>:
// Nesting part, no prologue and hand made epilogue.
__attribute__ (( naked )) void vinterrupt_wrapper(void)
{
    _vinterrupt_wrapper();
     f52:	0e 94 84 07 	call	0xf08	; 0xf08 <_vinterrupt_wrapper>
    cli();
     f56:	f8 94       	cli
    // Virtual interrupts are enabled after interrupt processing.
    vm_state[current_vm].int_enabled = (bool_t)1;
     f58:	80 91 26 01 	lds	r24, 0x0126
     f5c:	28 2f       	mov	r18, r24
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	c9 01       	movw	r24, r18
     f62:	88 0f       	add	r24, r24
     f64:	99 1f       	adc	r25, r25
     f66:	88 0f       	add	r24, r24
     f68:	99 1f       	adc	r25, r25
     f6a:	88 0f       	add	r24, r24
     f6c:	99 1f       	adc	r25, r25
     f6e:	82 0f       	add	r24, r18
     f70:	93 1f       	adc	r25, r19
     f72:	fc 01       	movw	r30, r24
     f74:	e7 5d       	subi	r30, 0xD7	; 215
     f76:	fe 4f       	sbci	r31, 0xFE	; 254
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	80 83       	st	Z, r24
    }
    bugurt_set_stack_pointer( vm_state[current_vm].int_sp );
}
__MACRO_FUNCTION__( _vsmp_interrupt_epilogue )
{
    if( vsmp_do_interrupt() ) goto chained_vinterrupt_return;
     f7c:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <vsmp_do_interrupt>
     f80:	88 23       	and	r24, r24
     f82:	09 f0       	breq	.+2      	; 0xf86 <vinterrupt_wrapper+0x34>
     f84:	6c c0       	rjmp	.+216    	; 0x105e <vinterrupt_wrapper+0x10c>

    if( --vm_state[current_vm].int_nest_count )goto nesting_vinterrupt_return;
     f86:	80 91 26 01 	lds	r24, 0x0126
     f8a:	28 2f       	mov	r18, r24
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	c9 01       	movw	r24, r18
     f90:	88 0f       	add	r24, r24
     f92:	99 1f       	adc	r25, r25
     f94:	88 0f       	add	r24, r24
     f96:	99 1f       	adc	r25, r25
     f98:	88 0f       	add	r24, r24
     f9a:	99 1f       	adc	r25, r25
     f9c:	82 0f       	add	r24, r18
     f9e:	93 1f       	adc	r25, r19
     fa0:	fc 01       	movw	r30, r24
     fa2:	e6 5d       	subi	r30, 0xD6	; 214
     fa4:	fe 4f       	sbci	r31, 0xFE	; 254
     fa6:	80 81       	ld	r24, Z
     fa8:	91 81       	ldd	r25, Z+1	; 0x01
     faa:	ac 01       	movw	r20, r24
     fac:	41 50       	subi	r20, 0x01	; 1
     fae:	50 40       	sbci	r21, 0x00	; 0
     fb0:	c9 01       	movw	r24, r18
     fb2:	88 0f       	add	r24, r24
     fb4:	99 1f       	adc	r25, r25
     fb6:	88 0f       	add	r24, r24
     fb8:	99 1f       	adc	r25, r25
     fba:	88 0f       	add	r24, r24
     fbc:	99 1f       	adc	r25, r25
     fbe:	82 0f       	add	r24, r18
     fc0:	93 1f       	adc	r25, r19
     fc2:	fc 01       	movw	r30, r24
     fc4:	e6 5d       	subi	r30, 0xD6	; 214
     fc6:	fe 4f       	sbci	r31, 0xFE	; 254
     fc8:	51 83       	std	Z+1, r21	; 0x01
     fca:	40 83       	st	Z, r20
     fcc:	c9 01       	movw	r24, r18
     fce:	88 0f       	add	r24, r24
     fd0:	99 1f       	adc	r25, r25
     fd2:	88 0f       	add	r24, r24
     fd4:	99 1f       	adc	r25, r25
     fd6:	88 0f       	add	r24, r24
     fd8:	99 1f       	adc	r25, r25
     fda:	82 0f       	add	r24, r18
     fdc:	93 1f       	adc	r25, r19
     fde:	fc 01       	movw	r30, r24
     fe0:	e6 5d       	subi	r30, 0xD6	; 214
     fe2:	fe 4f       	sbci	r31, 0xFE	; 254
     fe4:	80 81       	ld	r24, Z
     fe6:	91 81       	ldd	r25, Z+1	; 0x01
     fe8:	00 97       	sbiw	r24, 0x00	; 0
     fea:	b1 f5       	brne	.+108    	; 0x1058 <vinterrupt_wrapper+0x106>

    vm_state[current_vm].int_sp = &vm_int_stack[current_vm][VM_INT_STACK_SIZE-1];
     fec:	80 91 26 01 	lds	r24, 0x0126
     ff0:	48 2f       	mov	r20, r24
     ff2:	50 e0       	ldi	r21, 0x00	; 0
     ff4:	29 ed       	ldi	r18, 0xD9	; 217
     ff6:	31 e0       	ldi	r19, 0x01	; 1
     ff8:	80 91 26 01 	lds	r24, 0x0126
     ffc:	88 2f       	mov	r24, r24
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	96 95       	lsr	r25
    1002:	98 2f       	mov	r25, r24
    1004:	88 27       	eor	r24, r24
    1006:	97 95       	ror	r25
    1008:	87 95       	ror	r24
    100a:	81 58       	subi	r24, 0x81	; 129
    100c:	9f 4f       	sbci	r25, 0xFF	; 255
    100e:	28 0f       	add	r18, r24
    1010:	39 1f       	adc	r19, r25
    1012:	ca 01       	movw	r24, r20
    1014:	88 0f       	add	r24, r24
    1016:	99 1f       	adc	r25, r25
    1018:	88 0f       	add	r24, r24
    101a:	99 1f       	adc	r25, r25
    101c:	88 0f       	add	r24, r24
    101e:	99 1f       	adc	r25, r25
    1020:	84 0f       	add	r24, r20
    1022:	95 1f       	adc	r25, r21
    1024:	fc 01       	movw	r30, r24
    1026:	e2 5d       	subi	r30, 0xD2	; 210
    1028:	fe 4f       	sbci	r31, 0xFE	; 254
    102a:	31 83       	std	Z+1, r19	; 0x01
    102c:	20 83       	st	Z, r18
    bugurt_restore_context( vm_state[current_vm].sp ); // Will return to current vm operation!
    102e:	80 91 26 01 	lds	r24, 0x0126
    1032:	28 2f       	mov	r18, r24
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	c9 01       	movw	r24, r18
    1038:	88 0f       	add	r24, r24
    103a:	99 1f       	adc	r25, r25
    103c:	88 0f       	add	r24, r24
    103e:	99 1f       	adc	r25, r25
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	82 0f       	add	r24, r18
    1046:	93 1f       	adc	r25, r19
    1048:	fc 01       	movw	r30, r24
    104a:	e4 5d       	subi	r30, 0xD4	; 212
    104c:	fe 4f       	sbci	r31, 0xFE	; 254
    104e:	80 81       	ld	r24, Z
    1050:	91 81       	ldd	r25, Z+1	; 0x01
    1052:	0e 94 9a 00 	call	0x134	; 0x134 <bugurt_restore_context>
    __asm__ __volatile__("reti"::);
    1056:	18 95       	reti

nesting_vinterrupt_return:

    bugurt_pop_context(); //Will return to nesting virtual interrupt!
    1058:	0e 94 97 00 	call	0x12e	; 0x12e <bugurt_pop_context>
    __asm__ __volatile__("reti"::);
    105c:	18 95       	reti

chained_vinterrupt_return:
    bugurt_push_pointer( (void *)vinterrupt_wrapper ); // Will return to vinterrupt_wrapper() entry point!
    105e:	89 ea       	ldi	r24, 0xA9	; 169
    1060:	97 e0       	ldi	r25, 0x07	; 7
    1062:	0e 94 cd 00 	call	0x19a	; 0x19a <bugurt_push_pointer>
    __asm__ __volatile__("ret"::);
    1066:	08 95       	ret

00001068 <__vector_7>:
}

/* Virtual interrupt prologue and epilogue inline functions (I can,t debug macros !) */
__MACRO_FUNCTION__( _vsmp_interrupt_prologue )
{
    vm_buf = (void *)bugurt_save_context();
    1068:	0e 94 6b 00 	call	0xd6	; 0xd6 <bugurt_save_context>
    106c:	90 93 58 01 	sts	0x0158, r25
    1070:	80 93 57 01 	sts	0x0157, r24
    if( vm_state[current_vm].int_nest_count )
    1074:	80 91 26 01 	lds	r24, 0x0126
    1078:	28 2f       	mov	r18, r24
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	c9 01       	movw	r24, r18
    107e:	88 0f       	add	r24, r24
    1080:	99 1f       	adc	r25, r25
    1082:	88 0f       	add	r24, r24
    1084:	99 1f       	adc	r25, r25
    1086:	88 0f       	add	r24, r24
    1088:	99 1f       	adc	r25, r25
    108a:	82 0f       	add	r24, r18
    108c:	93 1f       	adc	r25, r19
    108e:	fc 01       	movw	r30, r24
    1090:	e6 5d       	subi	r30, 0xD6	; 214
    1092:	fe 4f       	sbci	r31, 0xFE	; 254
    1094:	80 81       	ld	r24, Z
    1096:	91 81       	ldd	r25, Z+1	; 0x01
    1098:	00 97       	sbiw	r24, 0x00	; 0
    109a:	c1 f0       	breq	.+48     	; 0x10cc <__vector_7+0x64>
    {
        vm_state[current_vm].int_sp = (stack_t *)vm_buf;
    109c:	80 91 26 01 	lds	r24, 0x0126
    10a0:	28 2f       	mov	r18, r24
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	80 91 57 01 	lds	r24, 0x0157
    10a8:	90 91 58 01 	lds	r25, 0x0158
    10ac:	ac 01       	movw	r20, r24
    10ae:	c9 01       	movw	r24, r18
    10b0:	88 0f       	add	r24, r24
    10b2:	99 1f       	adc	r25, r25
    10b4:	88 0f       	add	r24, r24
    10b6:	99 1f       	adc	r25, r25
    10b8:	88 0f       	add	r24, r24
    10ba:	99 1f       	adc	r25, r25
    10bc:	82 0f       	add	r24, r18
    10be:	93 1f       	adc	r25, r19
    10c0:	fc 01       	movw	r30, r24
    10c2:	e2 5d       	subi	r30, 0xD2	; 210
    10c4:	fe 4f       	sbci	r31, 0xFE	; 254
    10c6:	51 83       	std	Z+1, r21	; 0x01
    10c8:	40 83       	st	Z, r20
    10ca:	17 c0       	rjmp	.+46     	; 0x10fa <__vector_7+0x92>
    }
    else
    {
        vm_state[current_vm].sp = (stack_t *)vm_buf;
    10cc:	80 91 26 01 	lds	r24, 0x0126
    10d0:	28 2f       	mov	r18, r24
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	80 91 57 01 	lds	r24, 0x0157
    10d8:	90 91 58 01 	lds	r25, 0x0158
    10dc:	ac 01       	movw	r20, r24
    10de:	c9 01       	movw	r24, r18
    10e0:	88 0f       	add	r24, r24
    10e2:	99 1f       	adc	r25, r25
    10e4:	88 0f       	add	r24, r24
    10e6:	99 1f       	adc	r25, r25
    10e8:	88 0f       	add	r24, r24
    10ea:	99 1f       	adc	r25, r25
    10ec:	82 0f       	add	r24, r18
    10ee:	93 1f       	adc	r25, r19
    10f0:	fc 01       	movw	r30, r24
    10f2:	e4 5d       	subi	r30, 0xD4	; 212
    10f4:	fe 4f       	sbci	r31, 0xFE	; 254
    10f6:	51 83       	std	Z+1, r21	; 0x01
    10f8:	40 83       	st	Z, r20
    }
    bugurt_set_stack_pointer( vm_state[current_vm].int_sp );
    10fa:	80 91 26 01 	lds	r24, 0x0126
    10fe:	28 2f       	mov	r18, r24
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	c9 01       	movw	r24, r18
    1104:	88 0f       	add	r24, r24
    1106:	99 1f       	adc	r25, r25
    1108:	88 0f       	add	r24, r24
    110a:	99 1f       	adc	r25, r25
    110c:	88 0f       	add	r24, r24
    110e:	99 1f       	adc	r25, r25
    1110:	82 0f       	add	r24, r18
    1112:	93 1f       	adc	r25, r19
    1114:	fc 01       	movw	r30, r24
    1116:	e2 5d       	subi	r30, 0xD2	; 210
    1118:	fe 4f       	sbci	r31, 0xFE	; 254
    111a:	80 81       	ld	r24, Z
    111c:	91 81       	ldd	r25, Z+1	; 0x01
    111e:	0e 94 c5 00 	call	0x18a	; 0x18a <bugurt_set_stack_pointer>
__attribute__ (( signal, naked )) void SYSTEM_TIMER_ISR(void);
void SYSTEM_TIMER_ISR(void)
{
    _vsmp_interrupt_prologue();

    current_vm++;
    1122:	80 91 26 01 	lds	r24, 0x0126
    1126:	8f 5f       	subi	r24, 0xFF	; 255
    1128:	80 93 26 01 	sts	0x0126, r24
    if(current_vm >= MAX_CORES)current_vm = (core_id_t)0;
    112c:	80 91 26 01 	lds	r24, 0x0126
    1130:	82 30       	cpi	r24, 0x02	; 2
    1132:	10 f0       	brcs	.+4      	; 0x1138 <__vector_7+0xd0>
    1134:	10 92 26 01 	sts	0x0126, r1

    if(vsmp_systimer_hook)
    1138:	80 91 d9 02 	lds	r24, 0x02D9
    113c:	90 91 da 02 	lds	r25, 0x02DA
    1140:	00 97       	sbiw	r24, 0x00	; 0
    1142:	29 f0       	breq	.+10     	; 0x114e <__vector_7+0xe6>
    {
        vsmp_systimer_hook();
    1144:	e0 91 d9 02 	lds	r30, 0x02D9
    1148:	f0 91 da 02 	lds	r31, 0x02DA
    114c:	09 95       	icall
    }

    vm_state[current_vm].int_nest_count++;
    114e:	80 91 26 01 	lds	r24, 0x0126
    1152:	28 2f       	mov	r18, r24
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	c9 01       	movw	r24, r18
    1158:	88 0f       	add	r24, r24
    115a:	99 1f       	adc	r25, r25
    115c:	88 0f       	add	r24, r24
    115e:	99 1f       	adc	r25, r25
    1160:	88 0f       	add	r24, r24
    1162:	99 1f       	adc	r25, r25
    1164:	82 0f       	add	r24, r18
    1166:	93 1f       	adc	r25, r19
    1168:	fc 01       	movw	r30, r24
    116a:	e6 5d       	subi	r30, 0xD6	; 214
    116c:	fe 4f       	sbci	r31, 0xFE	; 254
    116e:	80 81       	ld	r24, Z
    1170:	91 81       	ldd	r25, Z+1	; 0x01
    1172:	ac 01       	movw	r20, r24
    1174:	4f 5f       	subi	r20, 0xFF	; 255
    1176:	5f 4f       	sbci	r21, 0xFF	; 255
    1178:	c9 01       	movw	r24, r18
    117a:	88 0f       	add	r24, r24
    117c:	99 1f       	adc	r25, r25
    117e:	88 0f       	add	r24, r24
    1180:	99 1f       	adc	r25, r25
    1182:	88 0f       	add	r24, r24
    1184:	99 1f       	adc	r25, r25
    1186:	82 0f       	add	r24, r18
    1188:	93 1f       	adc	r25, r19
    118a:	fc 01       	movw	r30, r24
    118c:	e6 5d       	subi	r30, 0xD6	; 214
    118e:	fe 4f       	sbci	r31, 0xFE	; 254
    1190:	51 83       	std	Z+1, r21	; 0x01
    1192:	40 83       	st	Z, r20
    bugurt_set_stack_pointer( vm_state[current_vm].int_sp );
    1194:	80 91 26 01 	lds	r24, 0x0126
    1198:	28 2f       	mov	r18, r24
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	c9 01       	movw	r24, r18
    119e:	88 0f       	add	r24, r24
    11a0:	99 1f       	adc	r25, r25
    11a2:	88 0f       	add	r24, r24
    11a4:	99 1f       	adc	r25, r25
    11a6:	88 0f       	add	r24, r24
    11a8:	99 1f       	adc	r25, r25
    11aa:	82 0f       	add	r24, r18
    11ac:	93 1f       	adc	r25, r19
    11ae:	fc 01       	movw	r30, r24
    11b0:	e2 5d       	subi	r30, 0xD2	; 210
    11b2:	fe 4f       	sbci	r31, 0xFE	; 254
    11b4:	80 81       	ld	r24, Z
    11b6:	91 81       	ldd	r25, Z+1	; 0x01
    11b8:	0e 94 c5 00 	call	0x18a	; 0x18a <bugurt_set_stack_pointer>
    }
    bugurt_set_stack_pointer( vm_state[current_vm].int_sp );
}
__MACRO_FUNCTION__( _vsmp_interrupt_epilogue )
{
    if( vsmp_do_interrupt() ) goto chained_vinterrupt_return;
    11bc:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <vsmp_do_interrupt>
    11c0:	88 23       	and	r24, r24
    11c2:	09 f0       	breq	.+2      	; 0x11c6 <__vector_7+0x15e>
    11c4:	6c c0       	rjmp	.+216    	; 0x129e <__vector_7+0x236>

    if( --vm_state[current_vm].int_nest_count )goto nesting_vinterrupt_return;
    11c6:	80 91 26 01 	lds	r24, 0x0126
    11ca:	28 2f       	mov	r18, r24
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	c9 01       	movw	r24, r18
    11d0:	88 0f       	add	r24, r24
    11d2:	99 1f       	adc	r25, r25
    11d4:	88 0f       	add	r24, r24
    11d6:	99 1f       	adc	r25, r25
    11d8:	88 0f       	add	r24, r24
    11da:	99 1f       	adc	r25, r25
    11dc:	82 0f       	add	r24, r18
    11de:	93 1f       	adc	r25, r19
    11e0:	fc 01       	movw	r30, r24
    11e2:	e6 5d       	subi	r30, 0xD6	; 214
    11e4:	fe 4f       	sbci	r31, 0xFE	; 254
    11e6:	80 81       	ld	r24, Z
    11e8:	91 81       	ldd	r25, Z+1	; 0x01
    11ea:	ac 01       	movw	r20, r24
    11ec:	41 50       	subi	r20, 0x01	; 1
    11ee:	50 40       	sbci	r21, 0x00	; 0
    11f0:	c9 01       	movw	r24, r18
    11f2:	88 0f       	add	r24, r24
    11f4:	99 1f       	adc	r25, r25
    11f6:	88 0f       	add	r24, r24
    11f8:	99 1f       	adc	r25, r25
    11fa:	88 0f       	add	r24, r24
    11fc:	99 1f       	adc	r25, r25
    11fe:	82 0f       	add	r24, r18
    1200:	93 1f       	adc	r25, r19
    1202:	fc 01       	movw	r30, r24
    1204:	e6 5d       	subi	r30, 0xD6	; 214
    1206:	fe 4f       	sbci	r31, 0xFE	; 254
    1208:	51 83       	std	Z+1, r21	; 0x01
    120a:	40 83       	st	Z, r20
    120c:	c9 01       	movw	r24, r18
    120e:	88 0f       	add	r24, r24
    1210:	99 1f       	adc	r25, r25
    1212:	88 0f       	add	r24, r24
    1214:	99 1f       	adc	r25, r25
    1216:	88 0f       	add	r24, r24
    1218:	99 1f       	adc	r25, r25
    121a:	82 0f       	add	r24, r18
    121c:	93 1f       	adc	r25, r19
    121e:	fc 01       	movw	r30, r24
    1220:	e6 5d       	subi	r30, 0xD6	; 214
    1222:	fe 4f       	sbci	r31, 0xFE	; 254
    1224:	80 81       	ld	r24, Z
    1226:	91 81       	ldd	r25, Z+1	; 0x01
    1228:	00 97       	sbiw	r24, 0x00	; 0
    122a:	b1 f5       	brne	.+108    	; 0x1298 <__vector_7+0x230>

    vm_state[current_vm].int_sp = &vm_int_stack[current_vm][VM_INT_STACK_SIZE-1];
    122c:	80 91 26 01 	lds	r24, 0x0126
    1230:	48 2f       	mov	r20, r24
    1232:	50 e0       	ldi	r21, 0x00	; 0
    1234:	29 ed       	ldi	r18, 0xD9	; 217
    1236:	31 e0       	ldi	r19, 0x01	; 1
    1238:	80 91 26 01 	lds	r24, 0x0126
    123c:	88 2f       	mov	r24, r24
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	96 95       	lsr	r25
    1242:	98 2f       	mov	r25, r24
    1244:	88 27       	eor	r24, r24
    1246:	97 95       	ror	r25
    1248:	87 95       	ror	r24
    124a:	81 58       	subi	r24, 0x81	; 129
    124c:	9f 4f       	sbci	r25, 0xFF	; 255
    124e:	28 0f       	add	r18, r24
    1250:	39 1f       	adc	r19, r25
    1252:	ca 01       	movw	r24, r20
    1254:	88 0f       	add	r24, r24
    1256:	99 1f       	adc	r25, r25
    1258:	88 0f       	add	r24, r24
    125a:	99 1f       	adc	r25, r25
    125c:	88 0f       	add	r24, r24
    125e:	99 1f       	adc	r25, r25
    1260:	84 0f       	add	r24, r20
    1262:	95 1f       	adc	r25, r21
    1264:	fc 01       	movw	r30, r24
    1266:	e2 5d       	subi	r30, 0xD2	; 210
    1268:	fe 4f       	sbci	r31, 0xFE	; 254
    126a:	31 83       	std	Z+1, r19	; 0x01
    126c:	20 83       	st	Z, r18
    bugurt_restore_context( vm_state[current_vm].sp ); // Will return to current vm operation!
    126e:	80 91 26 01 	lds	r24, 0x0126
    1272:	28 2f       	mov	r18, r24
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	c9 01       	movw	r24, r18
    1278:	88 0f       	add	r24, r24
    127a:	99 1f       	adc	r25, r25
    127c:	88 0f       	add	r24, r24
    127e:	99 1f       	adc	r25, r25
    1280:	88 0f       	add	r24, r24
    1282:	99 1f       	adc	r25, r25
    1284:	82 0f       	add	r24, r18
    1286:	93 1f       	adc	r25, r19
    1288:	fc 01       	movw	r30, r24
    128a:	e4 5d       	subi	r30, 0xD4	; 212
    128c:	fe 4f       	sbci	r31, 0xFE	; 254
    128e:	80 81       	ld	r24, Z
    1290:	91 81       	ldd	r25, Z+1	; 0x01
    1292:	0e 94 9a 00 	call	0x134	; 0x134 <bugurt_restore_context>
    __asm__ __volatile__("reti"::);
    1296:	18 95       	reti

nesting_vinterrupt_return:

    bugurt_pop_context(); //Will return to nesting virtual interrupt!
    1298:	0e 94 97 00 	call	0x12e	; 0x12e <bugurt_pop_context>
    __asm__ __volatile__("reti"::);
    129c:	18 95       	reti

chained_vinterrupt_return:
    bugurt_push_pointer( (void *)vinterrupt_wrapper ); // Will return to vinterrupt_wrapper() entry point!
    129e:	89 ea       	ldi	r24, 0xA9	; 169
    12a0:	97 e0       	ldi	r25, 0x07	; 7
    12a2:	0e 94 cd 00 	call	0x19a	; 0x19a <bugurt_push_pointer>
    __asm__ __volatile__("ret"::);
    12a6:	08 95       	ret

000012a8 <_vsmp_vinterrupt>:
}

/* Virtual interrupt prologue and epilogue inline functions (I can,t debug macros !) */
__MACRO_FUNCTION__( _vsmp_interrupt_prologue )
{
    vm_buf = (void *)bugurt_save_context();
    12a8:	0e 94 6b 00 	call	0xd6	; 0xd6 <bugurt_save_context>
    12ac:	90 93 58 01 	sts	0x0158, r25
    12b0:	80 93 57 01 	sts	0x0157, r24
    if( vm_state[current_vm].int_nest_count )
    12b4:	80 91 26 01 	lds	r24, 0x0126
    12b8:	28 2f       	mov	r18, r24
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	c9 01       	movw	r24, r18
    12be:	88 0f       	add	r24, r24
    12c0:	99 1f       	adc	r25, r25
    12c2:	88 0f       	add	r24, r24
    12c4:	99 1f       	adc	r25, r25
    12c6:	88 0f       	add	r24, r24
    12c8:	99 1f       	adc	r25, r25
    12ca:	82 0f       	add	r24, r18
    12cc:	93 1f       	adc	r25, r19
    12ce:	fc 01       	movw	r30, r24
    12d0:	e6 5d       	subi	r30, 0xD6	; 214
    12d2:	fe 4f       	sbci	r31, 0xFE	; 254
    12d4:	80 81       	ld	r24, Z
    12d6:	91 81       	ldd	r25, Z+1	; 0x01
    12d8:	00 97       	sbiw	r24, 0x00	; 0
    12da:	c1 f0       	breq	.+48     	; 0x130c <_vsmp_vinterrupt+0x64>
    {
        vm_state[current_vm].int_sp = (stack_t *)vm_buf;
    12dc:	80 91 26 01 	lds	r24, 0x0126
    12e0:	28 2f       	mov	r18, r24
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	80 91 57 01 	lds	r24, 0x0157
    12e8:	90 91 58 01 	lds	r25, 0x0158
    12ec:	ac 01       	movw	r20, r24
    12ee:	c9 01       	movw	r24, r18
    12f0:	88 0f       	add	r24, r24
    12f2:	99 1f       	adc	r25, r25
    12f4:	88 0f       	add	r24, r24
    12f6:	99 1f       	adc	r25, r25
    12f8:	88 0f       	add	r24, r24
    12fa:	99 1f       	adc	r25, r25
    12fc:	82 0f       	add	r24, r18
    12fe:	93 1f       	adc	r25, r19
    1300:	fc 01       	movw	r30, r24
    1302:	e2 5d       	subi	r30, 0xD2	; 210
    1304:	fe 4f       	sbci	r31, 0xFE	; 254
    1306:	51 83       	std	Z+1, r21	; 0x01
    1308:	40 83       	st	Z, r20
    130a:	17 c0       	rjmp	.+46     	; 0x133a <_vsmp_vinterrupt+0x92>
    }
    else
    {
        vm_state[current_vm].sp = (stack_t *)vm_buf;
    130c:	80 91 26 01 	lds	r24, 0x0126
    1310:	28 2f       	mov	r18, r24
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	80 91 57 01 	lds	r24, 0x0157
    1318:	90 91 58 01 	lds	r25, 0x0158
    131c:	ac 01       	movw	r20, r24
    131e:	c9 01       	movw	r24, r18
    1320:	88 0f       	add	r24, r24
    1322:	99 1f       	adc	r25, r25
    1324:	88 0f       	add	r24, r24
    1326:	99 1f       	adc	r25, r25
    1328:	88 0f       	add	r24, r24
    132a:	99 1f       	adc	r25, r25
    132c:	82 0f       	add	r24, r18
    132e:	93 1f       	adc	r25, r19
    1330:	fc 01       	movw	r30, r24
    1332:	e4 5d       	subi	r30, 0xD4	; 212
    1334:	fe 4f       	sbci	r31, 0xFE	; 254
    1336:	51 83       	std	Z+1, r21	; 0x01
    1338:	40 83       	st	Z, r20
    }
    bugurt_set_stack_pointer( vm_state[current_vm].int_sp );
    133a:	80 91 26 01 	lds	r24, 0x0126
    133e:	28 2f       	mov	r18, r24
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	c9 01       	movw	r24, r18
    1344:	88 0f       	add	r24, r24
    1346:	99 1f       	adc	r25, r25
    1348:	88 0f       	add	r24, r24
    134a:	99 1f       	adc	r25, r25
    134c:	88 0f       	add	r24, r24
    134e:	99 1f       	adc	r25, r25
    1350:	82 0f       	add	r24, r18
    1352:	93 1f       	adc	r25, r19
    1354:	fc 01       	movw	r30, r24
    1356:	e2 5d       	subi	r30, 0xD2	; 210
    1358:	fe 4f       	sbci	r31, 0xFE	; 254
    135a:	80 81       	ld	r24, Z
    135c:	91 81       	ldd	r25, Z+1	; 0x01
    135e:	0e 94 c5 00 	call	0x18a	; 0x18a <bugurt_set_stack_pointer>
// Software virtual interrupt tail function
__attribute__ (( naked )) void _vsmp_vinterrupt(void)
{
    _vsmp_interrupt_prologue();

    vm_state[current_vm].int_nest_count++;
    1362:	80 91 26 01 	lds	r24, 0x0126
    1366:	28 2f       	mov	r18, r24
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	c9 01       	movw	r24, r18
    136c:	88 0f       	add	r24, r24
    136e:	99 1f       	adc	r25, r25
    1370:	88 0f       	add	r24, r24
    1372:	99 1f       	adc	r25, r25
    1374:	88 0f       	add	r24, r24
    1376:	99 1f       	adc	r25, r25
    1378:	82 0f       	add	r24, r18
    137a:	93 1f       	adc	r25, r19
    137c:	fc 01       	movw	r30, r24
    137e:	e6 5d       	subi	r30, 0xD6	; 214
    1380:	fe 4f       	sbci	r31, 0xFE	; 254
    1382:	80 81       	ld	r24, Z
    1384:	91 81       	ldd	r25, Z+1	; 0x01
    1386:	ac 01       	movw	r20, r24
    1388:	4f 5f       	subi	r20, 0xFF	; 255
    138a:	5f 4f       	sbci	r21, 0xFF	; 255
    138c:	c9 01       	movw	r24, r18
    138e:	88 0f       	add	r24, r24
    1390:	99 1f       	adc	r25, r25
    1392:	88 0f       	add	r24, r24
    1394:	99 1f       	adc	r25, r25
    1396:	88 0f       	add	r24, r24
    1398:	99 1f       	adc	r25, r25
    139a:	82 0f       	add	r24, r18
    139c:	93 1f       	adc	r25, r19
    139e:	fc 01       	movw	r30, r24
    13a0:	e6 5d       	subi	r30, 0xD6	; 214
    13a2:	fe 4f       	sbci	r31, 0xFE	; 254
    13a4:	51 83       	std	Z+1, r21	; 0x01
    13a6:	40 83       	st	Z, r20
    }
    bugurt_set_stack_pointer( vm_state[current_vm].int_sp );
}
__MACRO_FUNCTION__( _vsmp_interrupt_epilogue )
{
    if( vsmp_do_interrupt() ) goto chained_vinterrupt_return;
    13a8:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <vsmp_do_interrupt>
    13ac:	88 23       	and	r24, r24
    13ae:	09 f0       	breq	.+2      	; 0x13b2 <_vsmp_vinterrupt+0x10a>
    13b0:	6c c0       	rjmp	.+216    	; 0x148a <_vsmp_vinterrupt+0x1e2>

    if( --vm_state[current_vm].int_nest_count )goto nesting_vinterrupt_return;
    13b2:	80 91 26 01 	lds	r24, 0x0126
    13b6:	28 2f       	mov	r18, r24
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	c9 01       	movw	r24, r18
    13bc:	88 0f       	add	r24, r24
    13be:	99 1f       	adc	r25, r25
    13c0:	88 0f       	add	r24, r24
    13c2:	99 1f       	adc	r25, r25
    13c4:	88 0f       	add	r24, r24
    13c6:	99 1f       	adc	r25, r25
    13c8:	82 0f       	add	r24, r18
    13ca:	93 1f       	adc	r25, r19
    13cc:	fc 01       	movw	r30, r24
    13ce:	e6 5d       	subi	r30, 0xD6	; 214
    13d0:	fe 4f       	sbci	r31, 0xFE	; 254
    13d2:	80 81       	ld	r24, Z
    13d4:	91 81       	ldd	r25, Z+1	; 0x01
    13d6:	ac 01       	movw	r20, r24
    13d8:	41 50       	subi	r20, 0x01	; 1
    13da:	50 40       	sbci	r21, 0x00	; 0
    13dc:	c9 01       	movw	r24, r18
    13de:	88 0f       	add	r24, r24
    13e0:	99 1f       	adc	r25, r25
    13e2:	88 0f       	add	r24, r24
    13e4:	99 1f       	adc	r25, r25
    13e6:	88 0f       	add	r24, r24
    13e8:	99 1f       	adc	r25, r25
    13ea:	82 0f       	add	r24, r18
    13ec:	93 1f       	adc	r25, r19
    13ee:	fc 01       	movw	r30, r24
    13f0:	e6 5d       	subi	r30, 0xD6	; 214
    13f2:	fe 4f       	sbci	r31, 0xFE	; 254
    13f4:	51 83       	std	Z+1, r21	; 0x01
    13f6:	40 83       	st	Z, r20
    13f8:	c9 01       	movw	r24, r18
    13fa:	88 0f       	add	r24, r24
    13fc:	99 1f       	adc	r25, r25
    13fe:	88 0f       	add	r24, r24
    1400:	99 1f       	adc	r25, r25
    1402:	88 0f       	add	r24, r24
    1404:	99 1f       	adc	r25, r25
    1406:	82 0f       	add	r24, r18
    1408:	93 1f       	adc	r25, r19
    140a:	fc 01       	movw	r30, r24
    140c:	e6 5d       	subi	r30, 0xD6	; 214
    140e:	fe 4f       	sbci	r31, 0xFE	; 254
    1410:	80 81       	ld	r24, Z
    1412:	91 81       	ldd	r25, Z+1	; 0x01
    1414:	00 97       	sbiw	r24, 0x00	; 0
    1416:	b1 f5       	brne	.+108    	; 0x1484 <_vsmp_vinterrupt+0x1dc>

    vm_state[current_vm].int_sp = &vm_int_stack[current_vm][VM_INT_STACK_SIZE-1];
    1418:	80 91 26 01 	lds	r24, 0x0126
    141c:	48 2f       	mov	r20, r24
    141e:	50 e0       	ldi	r21, 0x00	; 0
    1420:	29 ed       	ldi	r18, 0xD9	; 217
    1422:	31 e0       	ldi	r19, 0x01	; 1
    1424:	80 91 26 01 	lds	r24, 0x0126
    1428:	88 2f       	mov	r24, r24
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	96 95       	lsr	r25
    142e:	98 2f       	mov	r25, r24
    1430:	88 27       	eor	r24, r24
    1432:	97 95       	ror	r25
    1434:	87 95       	ror	r24
    1436:	81 58       	subi	r24, 0x81	; 129
    1438:	9f 4f       	sbci	r25, 0xFF	; 255
    143a:	28 0f       	add	r18, r24
    143c:	39 1f       	adc	r19, r25
    143e:	ca 01       	movw	r24, r20
    1440:	88 0f       	add	r24, r24
    1442:	99 1f       	adc	r25, r25
    1444:	88 0f       	add	r24, r24
    1446:	99 1f       	adc	r25, r25
    1448:	88 0f       	add	r24, r24
    144a:	99 1f       	adc	r25, r25
    144c:	84 0f       	add	r24, r20
    144e:	95 1f       	adc	r25, r21
    1450:	fc 01       	movw	r30, r24
    1452:	e2 5d       	subi	r30, 0xD2	; 210
    1454:	fe 4f       	sbci	r31, 0xFE	; 254
    1456:	31 83       	std	Z+1, r19	; 0x01
    1458:	20 83       	st	Z, r18
    bugurt_restore_context( vm_state[current_vm].sp ); // Will return to current vm operation!
    145a:	80 91 26 01 	lds	r24, 0x0126
    145e:	28 2f       	mov	r18, r24
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	c9 01       	movw	r24, r18
    1464:	88 0f       	add	r24, r24
    1466:	99 1f       	adc	r25, r25
    1468:	88 0f       	add	r24, r24
    146a:	99 1f       	adc	r25, r25
    146c:	88 0f       	add	r24, r24
    146e:	99 1f       	adc	r25, r25
    1470:	82 0f       	add	r24, r18
    1472:	93 1f       	adc	r25, r19
    1474:	fc 01       	movw	r30, r24
    1476:	e4 5d       	subi	r30, 0xD4	; 212
    1478:	fe 4f       	sbci	r31, 0xFE	; 254
    147a:	80 81       	ld	r24, Z
    147c:	91 81       	ldd	r25, Z+1	; 0x01
    147e:	0e 94 9a 00 	call	0x134	; 0x134 <bugurt_restore_context>
    __asm__ __volatile__("reti"::);
    1482:	18 95       	reti

nesting_vinterrupt_return:

    bugurt_pop_context(); //Will return to nesting virtual interrupt!
    1484:	0e 94 97 00 	call	0x12e	; 0x12e <bugurt_pop_context>
    __asm__ __volatile__("reti"::);
    1488:	18 95       	reti

chained_vinterrupt_return:
    bugurt_push_pointer( (void *)vinterrupt_wrapper ); // Will return to vinterrupt_wrapper() entry point!
    148a:	89 ea       	ldi	r24, 0xA9	; 169
    148c:	97 e0       	ldi	r25, 0x07	; 7
    148e:	0e 94 cd 00 	call	0x19a	; 0x19a <bugurt_push_pointer>
    __asm__ __volatile__("ret"::);
    1492:	08 95       	ret

00001494 <vsmp_vinterrupt_isr>:
    _vsmp_interrupt_epilogue();
}

// Software virtual interrupt ( For ISR usage only ! Do NOT call from "main"!)
void vsmp_vinterrupt_isr( core_id_t vm, vinterrupt_t * vector )
{
    1494:	df 93       	push	r29
    1496:	cf 93       	push	r28
    1498:	00 d0       	rcall	.+0      	; 0x149a <vsmp_vinterrupt_isr+0x6>
    149a:	0f 92       	push	r0
    149c:	cd b7       	in	r28, 0x3d	; 61
    149e:	de b7       	in	r29, 0x3e	; 62
    14a0:	89 83       	std	Y+1, r24	; 0x01
    14a2:	7b 83       	std	Y+3, r23	; 0x03
    14a4:	6a 83       	std	Y+2, r22	; 0x02
    if( vm_state[vm].int_fifo )
    14a6:	89 81       	ldd	r24, Y+1	; 0x01
    14a8:	28 2f       	mov	r18, r24
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	c9 01       	movw	r24, r18
    14ae:	88 0f       	add	r24, r24
    14b0:	99 1f       	adc	r25, r25
    14b2:	88 0f       	add	r24, r24
    14b4:	99 1f       	adc	r25, r25
    14b6:	88 0f       	add	r24, r24
    14b8:	99 1f       	adc	r25, r25
    14ba:	82 0f       	add	r24, r18
    14bc:	93 1f       	adc	r25, r19
    14be:	fc 01       	movw	r30, r24
    14c0:	e9 5d       	subi	r30, 0xD9	; 217
    14c2:	fe 4f       	sbci	r31, 0xFE	; 254
    14c4:	80 81       	ld	r24, Z
    14c6:	91 81       	ldd	r25, Z+1	; 0x01
    14c8:	00 97       	sbiw	r24, 0x00	; 0
    14ca:	c1 f0       	breq	.+48     	; 0x14fc <vsmp_vinterrupt_isr+0x68>
    {
        item_insert( (item_t *)vector, (item_t *)vm_state[vm].int_fifo );
    14cc:	4a 81       	ldd	r20, Y+2	; 0x02
    14ce:	5b 81       	ldd	r21, Y+3	; 0x03
    14d0:	89 81       	ldd	r24, Y+1	; 0x01
    14d2:	28 2f       	mov	r18, r24
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	c9 01       	movw	r24, r18
    14d8:	88 0f       	add	r24, r24
    14da:	99 1f       	adc	r25, r25
    14dc:	88 0f       	add	r24, r24
    14de:	99 1f       	adc	r25, r25
    14e0:	88 0f       	add	r24, r24
    14e2:	99 1f       	adc	r25, r25
    14e4:	82 0f       	add	r24, r18
    14e6:	93 1f       	adc	r25, r19
    14e8:	fc 01       	movw	r30, r24
    14ea:	e9 5d       	subi	r30, 0xD9	; 217
    14ec:	fe 4f       	sbci	r31, 0xFE	; 254
    14ee:	20 81       	ld	r18, Z
    14f0:	31 81       	ldd	r19, Z+1	; 0x01
    14f2:	ca 01       	movw	r24, r20
    14f4:	b9 01       	movw	r22, r18
    14f6:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <item_insert>
    14fa:	13 c0       	rjmp	.+38     	; 0x1522 <vsmp_vinterrupt_isr+0x8e>
    }
    else
    {
        vm_state[vm].int_fifo = (item_t *)vector;
    14fc:	89 81       	ldd	r24, Y+1	; 0x01
    14fe:	28 2f       	mov	r18, r24
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	4a 81       	ldd	r20, Y+2	; 0x02
    1504:	5b 81       	ldd	r21, Y+3	; 0x03
    1506:	c9 01       	movw	r24, r18
    1508:	88 0f       	add	r24, r24
    150a:	99 1f       	adc	r25, r25
    150c:	88 0f       	add	r24, r24
    150e:	99 1f       	adc	r25, r25
    1510:	88 0f       	add	r24, r24
    1512:	99 1f       	adc	r25, r25
    1514:	82 0f       	add	r24, r18
    1516:	93 1f       	adc	r25, r19
    1518:	fc 01       	movw	r30, r24
    151a:	e9 5d       	subi	r30, 0xD9	; 217
    151c:	fe 4f       	sbci	r31, 0xFE	; 254
    151e:	51 83       	std	Z+1, r21	; 0x01
    1520:	40 83       	st	Z, r20
    }
}
    1522:	0f 90       	pop	r0
    1524:	0f 90       	pop	r0
    1526:	0f 90       	pop	r0
    1528:	cf 91       	pop	r28
    152a:	df 91       	pop	r29
    152c:	08 95       	ret

0000152e <vsmp_vinterrupt>:
// Software virtual interrupt ( Use in "main" only ! Do NOT call from ISR!)
void vsmp_vinterrupt( core_id_t vm, vinterrupt_t * vector )
{
    152e:	df 93       	push	r29
    1530:	cf 93       	push	r28
    1532:	00 d0       	rcall	.+0      	; 0x1534 <vsmp_vinterrupt+0x6>
    1534:	0f 92       	push	r0
    1536:	cd b7       	in	r28, 0x3d	; 61
    1538:	de b7       	in	r29, 0x3e	; 62
    153a:	89 83       	std	Y+1, r24	; 0x01
    153c:	7b 83       	std	Y+3, r23	; 0x03
    153e:	6a 83       	std	Y+2, r22	; 0x02
    cli();
    1540:	f8 94       	cli
    vsmp_vinterrupt_isr( vm, vector );
    1542:	2a 81       	ldd	r18, Y+2	; 0x02
    1544:	3b 81       	ldd	r19, Y+3	; 0x03
    1546:	89 81       	ldd	r24, Y+1	; 0x01
    1548:	b9 01       	movw	r22, r18
    154a:	0e 94 4a 0a 	call	0x1494	; 0x1494 <vsmp_vinterrupt_isr>
    _vsmp_vinterrupt();
    154e:	0e 94 54 09 	call	0x12a8	; 0x12a8 <_vsmp_vinterrupt>
}
    1552:	0f 90       	pop	r0
    1554:	0f 90       	pop	r0
    1556:	0f 90       	pop	r0
    1558:	cf 91       	pop	r28
    155a:	df 91       	pop	r29
    155c:	08 95       	ret

0000155e <vsmp_vinterrupt_init>:

void vsmp_vinterrupt_init( vinterrupt_t * vector, void (*isr)(void) )
{
    155e:	df 93       	push	r29
    1560:	cf 93       	push	r28
    1562:	00 d0       	rcall	.+0      	; 0x1564 <vsmp_vinterrupt_init+0x6>
    1564:	00 d0       	rcall	.+0      	; 0x1566 <vsmp_vinterrupt_init+0x8>
    1566:	cd b7       	in	r28, 0x3d	; 61
    1568:	de b7       	in	r29, 0x3e	; 62
    156a:	9a 83       	std	Y+2, r25	; 0x02
    156c:	89 83       	std	Y+1, r24	; 0x01
    156e:	7c 83       	std	Y+4, r23	; 0x04
    1570:	6b 83       	std	Y+3, r22	; 0x03
    item_init( (item_t *)vector );
    1572:	89 81       	ldd	r24, Y+1	; 0x01
    1574:	9a 81       	ldd	r25, Y+2	; 0x02
    1576:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <item_init>
    vector->isr = isr;
    157a:	e9 81       	ldd	r30, Y+1	; 0x01
    157c:	fa 81       	ldd	r31, Y+2	; 0x02
    157e:	8b 81       	ldd	r24, Y+3	; 0x03
    1580:	9c 81       	ldd	r25, Y+4	; 0x04
    1582:	95 83       	std	Z+5, r25	; 0x05
    1584:	84 83       	std	Z+4, r24	; 0x04
}
    1586:	0f 90       	pop	r0
    1588:	0f 90       	pop	r0
    158a:	0f 90       	pop	r0
    158c:	0f 90       	pop	r0
    158e:	cf 91       	pop	r28
    1590:	df 91       	pop	r29
    1592:	08 95       	ret

00001594 <disable_interrupts>:

void disable_interrupts(void)
{
    1594:	df 93       	push	r29
    1596:	cf 93       	push	r28
    1598:	cd b7       	in	r28, 0x3d	; 61
    159a:	de b7       	in	r29, 0x3e	; 62
    cli();
    159c:	f8 94       	cli
    vm_state[current_vm].int_enabled = (bool_t)0;
    159e:	80 91 26 01 	lds	r24, 0x0126
    15a2:	28 2f       	mov	r18, r24
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	c9 01       	movw	r24, r18
    15a8:	88 0f       	add	r24, r24
    15aa:	99 1f       	adc	r25, r25
    15ac:	88 0f       	add	r24, r24
    15ae:	99 1f       	adc	r25, r25
    15b0:	88 0f       	add	r24, r24
    15b2:	99 1f       	adc	r25, r25
    15b4:	82 0f       	add	r24, r18
    15b6:	93 1f       	adc	r25, r19
    15b8:	fc 01       	movw	r30, r24
    15ba:	e7 5d       	subi	r30, 0xD7	; 215
    15bc:	fe 4f       	sbci	r31, 0xFE	; 254
    15be:	10 82       	st	Z, r1
    sei();
    15c0:	78 94       	sei
}
    15c2:	cf 91       	pop	r28
    15c4:	df 91       	pop	r29
    15c6:	08 95       	ret

000015c8 <enable_interrupts>:

void enable_interrupts(void)
{
    15c8:	df 93       	push	r29
    15ca:	cf 93       	push	r28
    15cc:	cd b7       	in	r28, 0x3d	; 61
    15ce:	de b7       	in	r29, 0x3e	; 62
    cli();
    15d0:	f8 94       	cli
    vm_state[current_vm].int_enabled = (bool_t)1;
    15d2:	80 91 26 01 	lds	r24, 0x0126
    15d6:	28 2f       	mov	r18, r24
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	c9 01       	movw	r24, r18
    15dc:	88 0f       	add	r24, r24
    15de:	99 1f       	adc	r25, r25
    15e0:	88 0f       	add	r24, r24
    15e2:	99 1f       	adc	r25, r25
    15e4:	88 0f       	add	r24, r24
    15e6:	99 1f       	adc	r25, r25
    15e8:	82 0f       	add	r24, r18
    15ea:	93 1f       	adc	r25, r19
    15ec:	fc 01       	movw	r30, r24
    15ee:	e7 5d       	subi	r30, 0xD7	; 215
    15f0:	fe 4f       	sbci	r31, 0xFE	; 254
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	80 83       	st	Z, r24
    if( vm_state[current_vm].int_fifo )_vsmp_vinterrupt();
    15f6:	80 91 26 01 	lds	r24, 0x0126
    15fa:	28 2f       	mov	r18, r24
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	c9 01       	movw	r24, r18
    1600:	88 0f       	add	r24, r24
    1602:	99 1f       	adc	r25, r25
    1604:	88 0f       	add	r24, r24
    1606:	99 1f       	adc	r25, r25
    1608:	88 0f       	add	r24, r24
    160a:	99 1f       	adc	r25, r25
    160c:	82 0f       	add	r24, r18
    160e:	93 1f       	adc	r25, r19
    1610:	fc 01       	movw	r30, r24
    1612:	e9 5d       	subi	r30, 0xD9	; 217
    1614:	fe 4f       	sbci	r31, 0xFE	; 254
    1616:	80 81       	ld	r24, Z
    1618:	91 81       	ldd	r25, Z+1	; 0x01
    161a:	00 97       	sbiw	r24, 0x00	; 0
    161c:	19 f0       	breq	.+6      	; 0x1624 <enable_interrupts+0x5c>
    161e:	0e 94 54 09 	call	0x12a8	; 0x12a8 <_vsmp_vinterrupt>
    1622:	01 c0       	rjmp	.+2      	; 0x1626 <enable_interrupts+0x5e>
    else sei();
    1624:	78 94       	sei
}
    1626:	cf 91       	pop	r28
    1628:	df 91       	pop	r29
    162a:	08 95       	ret

0000162c <proc_stack_init>:
#include"../../../include/bugurt.h"
stack_t * proc_stack_init(stack_t * sstart, code_t code, void * arg)
{
    162c:	df 93       	push	r29
    162e:	cf 93       	push	r28
    1630:	cd b7       	in	r28, 0x3d	; 61
    1632:	de b7       	in	r29, 0x3e	; 62
    1634:	2a 97       	sbiw	r28, 0x0a	; 10
    1636:	0f b6       	in	r0, 0x3f	; 63
    1638:	f8 94       	cli
    163a:	de bf       	out	0x3e, r29	; 62
    163c:	0f be       	out	0x3f, r0	; 63
    163e:	cd bf       	out	0x3d, r28	; 61
    1640:	9e 83       	std	Y+6, r25	; 0x06
    1642:	8d 83       	std	Y+5, r24	; 0x05
    1644:	78 87       	std	Y+8, r23	; 0x08
    1646:	6f 83       	std	Y+7, r22	; 0x07
    1648:	5a 87       	std	Y+10, r21	; 0x0a
    164a:	49 87       	std	Y+9, r20	; 0x09
    stack_t * tos = (stack_t *)sstart;
    164c:	8d 81       	ldd	r24, Y+5	; 0x05
    164e:	9e 81       	ldd	r25, Y+6	; 0x06
    1650:	9c 83       	std	Y+4, r25	; 0x04
    1652:	8b 83       	std	Y+3, r24	; 0x03
    // return address
    unsigned short tmp = (unsigned short)code;
    1654:	8f 81       	ldd	r24, Y+7	; 0x07
    1656:	98 85       	ldd	r25, Y+8	; 0x08
    1658:	9a 83       	std	Y+2, r25	; 0x02
    165a:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (stack_t)(tmp&(unsigned short)0x00ff);
    165c:	89 81       	ldd	r24, Y+1	; 0x01
    165e:	eb 81       	ldd	r30, Y+3	; 0x03
    1660:	fc 81       	ldd	r31, Y+4	; 0x04
    1662:	80 83       	st	Z, r24
    1664:	8b 81       	ldd	r24, Y+3	; 0x03
    1666:	9c 81       	ldd	r25, Y+4	; 0x04
    1668:	01 97       	sbiw	r24, 0x01	; 1
    166a:	9c 83       	std	Y+4, r25	; 0x04
    166c:	8b 83       	std	Y+3, r24	; 0x03
    tmp>>=8;
    166e:	89 81       	ldd	r24, Y+1	; 0x01
    1670:	9a 81       	ldd	r25, Y+2	; 0x02
    1672:	89 2f       	mov	r24, r25
    1674:	99 27       	eor	r25, r25
    1676:	9a 83       	std	Y+2, r25	; 0x02
    1678:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (stack_t)(tmp&(unsigned short)0x00ff);
    167a:	89 81       	ldd	r24, Y+1	; 0x01
    167c:	eb 81       	ldd	r30, Y+3	; 0x03
    167e:	fc 81       	ldd	r31, Y+4	; 0x04
    1680:	80 83       	st	Z, r24
    1682:	8b 81       	ldd	r24, Y+3	; 0x03
    1684:	9c 81       	ldd	r25, Y+4	; 0x04
    1686:	01 97       	sbiw	r24, 0x01	; 1
    1688:	9c 83       	std	Y+4, r25	; 0x04
    168a:	8b 83       	std	Y+3, r24	; 0x03

    // s
    *tos-- = 0x00;
    168c:	eb 81       	ldd	r30, Y+3	; 0x03
    168e:	fc 81       	ldd	r31, Y+4	; 0x04
    1690:	10 82       	st	Z, r1
    1692:	8b 81       	ldd	r24, Y+3	; 0x03
    1694:	9c 81       	ldd	r25, Y+4	; 0x04
    1696:	01 97       	sbiw	r24, 0x01	; 1
    1698:	9c 83       	std	Y+4, r25	; 0x04
    169a:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x00;// r1 must B 0
    169c:	eb 81       	ldd	r30, Y+3	; 0x03
    169e:	fc 81       	ldd	r31, Y+4	; 0x04
    16a0:	10 82       	st	Z, r1
    16a2:	8b 81       	ldd	r24, Y+3	; 0x03
    16a4:	9c 81       	ldd	r25, Y+4	; 0x04
    16a6:	01 97       	sbiw	r24, 0x01	; 1
    16a8:	9c 83       	std	Y+4, r25	; 0x04
    16aa:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x02;// r2
    16ac:	eb 81       	ldd	r30, Y+3	; 0x03
    16ae:	fc 81       	ldd	r31, Y+4	; 0x04
    16b0:	82 e0       	ldi	r24, 0x02	; 2
    16b2:	80 83       	st	Z, r24
    16b4:	8b 81       	ldd	r24, Y+3	; 0x03
    16b6:	9c 81       	ldd	r25, Y+4	; 0x04
    16b8:	01 97       	sbiw	r24, 0x01	; 1
    16ba:	9c 83       	std	Y+4, r25	; 0x04
    16bc:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x80;// SREG: enable interrupts
    16be:	eb 81       	ldd	r30, Y+3	; 0x03
    16c0:	fc 81       	ldd	r31, Y+4	; 0x04
    16c2:	80 e8       	ldi	r24, 0x80	; 128
    16c4:	80 83       	st	Z, r24
    16c6:	8b 81       	ldd	r24, Y+3	; 0x03
    16c8:	9c 81       	ldd	r25, Y+4	; 0x04
    16ca:	01 97       	sbiw	r24, 0x01	; 1
    16cc:	9c 83       	std	Y+4, r25	; 0x04
    16ce:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x03;
    16d0:	eb 81       	ldd	r30, Y+3	; 0x03
    16d2:	fc 81       	ldd	r31, Y+4	; 0x04
    16d4:	83 e0       	ldi	r24, 0x03	; 3
    16d6:	80 83       	st	Z, r24
    16d8:	8b 81       	ldd	r24, Y+3	; 0x03
    16da:	9c 81       	ldd	r25, Y+4	; 0x04
    16dc:	01 97       	sbiw	r24, 0x01	; 1
    16de:	9c 83       	std	Y+4, r25	; 0x04
    16e0:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x04;
    16e2:	eb 81       	ldd	r30, Y+3	; 0x03
    16e4:	fc 81       	ldd	r31, Y+4	; 0x04
    16e6:	84 e0       	ldi	r24, 0x04	; 4
    16e8:	80 83       	st	Z, r24
    16ea:	8b 81       	ldd	r24, Y+3	; 0x03
    16ec:	9c 81       	ldd	r25, Y+4	; 0x04
    16ee:	01 97       	sbiw	r24, 0x01	; 1
    16f0:	9c 83       	std	Y+4, r25	; 0x04
    16f2:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x05;
    16f4:	eb 81       	ldd	r30, Y+3	; 0x03
    16f6:	fc 81       	ldd	r31, Y+4	; 0x04
    16f8:	85 e0       	ldi	r24, 0x05	; 5
    16fa:	80 83       	st	Z, r24
    16fc:	8b 81       	ldd	r24, Y+3	; 0x03
    16fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1700:	01 97       	sbiw	r24, 0x01	; 1
    1702:	9c 83       	std	Y+4, r25	; 0x04
    1704:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x06;
    1706:	eb 81       	ldd	r30, Y+3	; 0x03
    1708:	fc 81       	ldd	r31, Y+4	; 0x04
    170a:	86 e0       	ldi	r24, 0x06	; 6
    170c:	80 83       	st	Z, r24
    170e:	8b 81       	ldd	r24, Y+3	; 0x03
    1710:	9c 81       	ldd	r25, Y+4	; 0x04
    1712:	01 97       	sbiw	r24, 0x01	; 1
    1714:	9c 83       	std	Y+4, r25	; 0x04
    1716:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x07;
    1718:	eb 81       	ldd	r30, Y+3	; 0x03
    171a:	fc 81       	ldd	r31, Y+4	; 0x04
    171c:	87 e0       	ldi	r24, 0x07	; 7
    171e:	80 83       	st	Z, r24
    1720:	8b 81       	ldd	r24, Y+3	; 0x03
    1722:	9c 81       	ldd	r25, Y+4	; 0x04
    1724:	01 97       	sbiw	r24, 0x01	; 1
    1726:	9c 83       	std	Y+4, r25	; 0x04
    1728:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x08;
    172a:	eb 81       	ldd	r30, Y+3	; 0x03
    172c:	fc 81       	ldd	r31, Y+4	; 0x04
    172e:	88 e0       	ldi	r24, 0x08	; 8
    1730:	80 83       	st	Z, r24
    1732:	8b 81       	ldd	r24, Y+3	; 0x03
    1734:	9c 81       	ldd	r25, Y+4	; 0x04
    1736:	01 97       	sbiw	r24, 0x01	; 1
    1738:	9c 83       	std	Y+4, r25	; 0x04
    173a:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x09;
    173c:	eb 81       	ldd	r30, Y+3	; 0x03
    173e:	fc 81       	ldd	r31, Y+4	; 0x04
    1740:	89 e0       	ldi	r24, 0x09	; 9
    1742:	80 83       	st	Z, r24
    1744:	8b 81       	ldd	r24, Y+3	; 0x03
    1746:	9c 81       	ldd	r25, Y+4	; 0x04
    1748:	01 97       	sbiw	r24, 0x01	; 1
    174a:	9c 83       	std	Y+4, r25	; 0x04
    174c:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x10;
    174e:	eb 81       	ldd	r30, Y+3	; 0x03
    1750:	fc 81       	ldd	r31, Y+4	; 0x04
    1752:	80 e1       	ldi	r24, 0x10	; 16
    1754:	80 83       	st	Z, r24
    1756:	8b 81       	ldd	r24, Y+3	; 0x03
    1758:	9c 81       	ldd	r25, Y+4	; 0x04
    175a:	01 97       	sbiw	r24, 0x01	; 1
    175c:	9c 83       	std	Y+4, r25	; 0x04
    175e:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x11;
    1760:	eb 81       	ldd	r30, Y+3	; 0x03
    1762:	fc 81       	ldd	r31, Y+4	; 0x04
    1764:	81 e1       	ldi	r24, 0x11	; 17
    1766:	80 83       	st	Z, r24
    1768:	8b 81       	ldd	r24, Y+3	; 0x03
    176a:	9c 81       	ldd	r25, Y+4	; 0x04
    176c:	01 97       	sbiw	r24, 0x01	; 1
    176e:	9c 83       	std	Y+4, r25	; 0x04
    1770:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x12;
    1772:	eb 81       	ldd	r30, Y+3	; 0x03
    1774:	fc 81       	ldd	r31, Y+4	; 0x04
    1776:	82 e1       	ldi	r24, 0x12	; 18
    1778:	80 83       	st	Z, r24
    177a:	8b 81       	ldd	r24, Y+3	; 0x03
    177c:	9c 81       	ldd	r25, Y+4	; 0x04
    177e:	01 97       	sbiw	r24, 0x01	; 1
    1780:	9c 83       	std	Y+4, r25	; 0x04
    1782:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x13;
    1784:	eb 81       	ldd	r30, Y+3	; 0x03
    1786:	fc 81       	ldd	r31, Y+4	; 0x04
    1788:	83 e1       	ldi	r24, 0x13	; 19
    178a:	80 83       	st	Z, r24
    178c:	8b 81       	ldd	r24, Y+3	; 0x03
    178e:	9c 81       	ldd	r25, Y+4	; 0x04
    1790:	01 97       	sbiw	r24, 0x01	; 1
    1792:	9c 83       	std	Y+4, r25	; 0x04
    1794:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x14;
    1796:	eb 81       	ldd	r30, Y+3	; 0x03
    1798:	fc 81       	ldd	r31, Y+4	; 0x04
    179a:	84 e1       	ldi	r24, 0x14	; 20
    179c:	80 83       	st	Z, r24
    179e:	8b 81       	ldd	r24, Y+3	; 0x03
    17a0:	9c 81       	ldd	r25, Y+4	; 0x04
    17a2:	01 97       	sbiw	r24, 0x01	; 1
    17a4:	9c 83       	std	Y+4, r25	; 0x04
    17a6:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x15;
    17a8:	eb 81       	ldd	r30, Y+3	; 0x03
    17aa:	fc 81       	ldd	r31, Y+4	; 0x04
    17ac:	85 e1       	ldi	r24, 0x15	; 21
    17ae:	80 83       	st	Z, r24
    17b0:	8b 81       	ldd	r24, Y+3	; 0x03
    17b2:	9c 81       	ldd	r25, Y+4	; 0x04
    17b4:	01 97       	sbiw	r24, 0x01	; 1
    17b6:	9c 83       	std	Y+4, r25	; 0x04
    17b8:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x16;
    17ba:	eb 81       	ldd	r30, Y+3	; 0x03
    17bc:	fc 81       	ldd	r31, Y+4	; 0x04
    17be:	86 e1       	ldi	r24, 0x16	; 22
    17c0:	80 83       	st	Z, r24
    17c2:	8b 81       	ldd	r24, Y+3	; 0x03
    17c4:	9c 81       	ldd	r25, Y+4	; 0x04
    17c6:	01 97       	sbiw	r24, 0x01	; 1
    17c8:	9c 83       	std	Y+4, r25	; 0x04
    17ca:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x17;
    17cc:	eb 81       	ldd	r30, Y+3	; 0x03
    17ce:	fc 81       	ldd	r31, Y+4	; 0x04
    17d0:	87 e1       	ldi	r24, 0x17	; 23
    17d2:	80 83       	st	Z, r24
    17d4:	8b 81       	ldd	r24, Y+3	; 0x03
    17d6:	9c 81       	ldd	r25, Y+4	; 0x04
    17d8:	01 97       	sbiw	r24, 0x01	; 1
    17da:	9c 83       	std	Y+4, r25	; 0x04
    17dc:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x18;
    17de:	eb 81       	ldd	r30, Y+3	; 0x03
    17e0:	fc 81       	ldd	r31, Y+4	; 0x04
    17e2:	88 e1       	ldi	r24, 0x18	; 24
    17e4:	80 83       	st	Z, r24
    17e6:	8b 81       	ldd	r24, Y+3	; 0x03
    17e8:	9c 81       	ldd	r25, Y+4	; 0x04
    17ea:	01 97       	sbiw	r24, 0x01	; 1
    17ec:	9c 83       	std	Y+4, r25	; 0x04
    17ee:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x19;
    17f0:	eb 81       	ldd	r30, Y+3	; 0x03
    17f2:	fc 81       	ldd	r31, Y+4	; 0x04
    17f4:	89 e1       	ldi	r24, 0x19	; 25
    17f6:	80 83       	st	Z, r24
    17f8:	8b 81       	ldd	r24, Y+3	; 0x03
    17fa:	9c 81       	ldd	r25, Y+4	; 0x04
    17fc:	01 97       	sbiw	r24, 0x01	; 1
    17fe:	9c 83       	std	Y+4, r25	; 0x04
    1800:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x20;
    1802:	eb 81       	ldd	r30, Y+3	; 0x03
    1804:	fc 81       	ldd	r31, Y+4	; 0x04
    1806:	80 e2       	ldi	r24, 0x20	; 32
    1808:	80 83       	st	Z, r24
    180a:	8b 81       	ldd	r24, Y+3	; 0x03
    180c:	9c 81       	ldd	r25, Y+4	; 0x04
    180e:	01 97       	sbiw	r24, 0x01	; 1
    1810:	9c 83       	std	Y+4, r25	; 0x04
    1812:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x21;
    1814:	eb 81       	ldd	r30, Y+3	; 0x03
    1816:	fc 81       	ldd	r31, Y+4	; 0x04
    1818:	81 e2       	ldi	r24, 0x21	; 33
    181a:	80 83       	st	Z, r24
    181c:	8b 81       	ldd	r24, Y+3	; 0x03
    181e:	9c 81       	ldd	r25, Y+4	; 0x04
    1820:	01 97       	sbiw	r24, 0x01	; 1
    1822:	9c 83       	std	Y+4, r25	; 0x04
    1824:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x22;
    1826:	eb 81       	ldd	r30, Y+3	; 0x03
    1828:	fc 81       	ldd	r31, Y+4	; 0x04
    182a:	82 e2       	ldi	r24, 0x22	; 34
    182c:	80 83       	st	Z, r24
    182e:	8b 81       	ldd	r24, Y+3	; 0x03
    1830:	9c 81       	ldd	r25, Y+4	; 0x04
    1832:	01 97       	sbiw	r24, 0x01	; 1
    1834:	9c 83       	std	Y+4, r25	; 0x04
    1836:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x23;
    1838:	eb 81       	ldd	r30, Y+3	; 0x03
    183a:	fc 81       	ldd	r31, Y+4	; 0x04
    183c:	83 e2       	ldi	r24, 0x23	; 35
    183e:	80 83       	st	Z, r24
    1840:	8b 81       	ldd	r24, Y+3	; 0x03
    1842:	9c 81       	ldd	r25, Y+4	; 0x04
    1844:	01 97       	sbiw	r24, 0x01	; 1
    1846:	9c 83       	std	Y+4, r25	; 0x04
    1848:	8b 83       	std	Y+3, r24	; 0x03

    tmp = (unsigned short)arg;
    184a:	89 85       	ldd	r24, Y+9	; 0x09
    184c:	9a 85       	ldd	r25, Y+10	; 0x0a
    184e:	9a 83       	std	Y+2, r25	; 0x02
    1850:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (stack_t)(tmp&(unsigned short)0x00ff); // r24 LSByte of arg
    1852:	89 81       	ldd	r24, Y+1	; 0x01
    1854:	eb 81       	ldd	r30, Y+3	; 0x03
    1856:	fc 81       	ldd	r31, Y+4	; 0x04
    1858:	80 83       	st	Z, r24
    185a:	8b 81       	ldd	r24, Y+3	; 0x03
    185c:	9c 81       	ldd	r25, Y+4	; 0x04
    185e:	01 97       	sbiw	r24, 0x01	; 1
    1860:	9c 83       	std	Y+4, r25	; 0x04
    1862:	8b 83       	std	Y+3, r24	; 0x03
    tmp>>=8;
    1864:	89 81       	ldd	r24, Y+1	; 0x01
    1866:	9a 81       	ldd	r25, Y+2	; 0x02
    1868:	89 2f       	mov	r24, r25
    186a:	99 27       	eor	r25, r25
    186c:	9a 83       	std	Y+2, r25	; 0x02
    186e:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (stack_t)(tmp&(unsigned short)0x00ff); // r25 MSByte of arg
    1870:	89 81       	ldd	r24, Y+1	; 0x01
    1872:	eb 81       	ldd	r30, Y+3	; 0x03
    1874:	fc 81       	ldd	r31, Y+4	; 0x04
    1876:	80 83       	st	Z, r24
    1878:	8b 81       	ldd	r24, Y+3	; 0x03
    187a:	9c 81       	ldd	r25, Y+4	; 0x04
    187c:	01 97       	sbiw	r24, 0x01	; 1
    187e:	9c 83       	std	Y+4, r25	; 0x04
    1880:	8b 83       	std	Y+3, r24	; 0x03

    *tos-- = 0x26;
    1882:	eb 81       	ldd	r30, Y+3	; 0x03
    1884:	fc 81       	ldd	r31, Y+4	; 0x04
    1886:	86 e2       	ldi	r24, 0x26	; 38
    1888:	80 83       	st	Z, r24
    188a:	8b 81       	ldd	r24, Y+3	; 0x03
    188c:	9c 81       	ldd	r25, Y+4	; 0x04
    188e:	01 97       	sbiw	r24, 0x01	; 1
    1890:	9c 83       	std	Y+4, r25	; 0x04
    1892:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x27;
    1894:	eb 81       	ldd	r30, Y+3	; 0x03
    1896:	fc 81       	ldd	r31, Y+4	; 0x04
    1898:	87 e2       	ldi	r24, 0x27	; 39
    189a:	80 83       	st	Z, r24
    189c:	8b 81       	ldd	r24, Y+3	; 0x03
    189e:	9c 81       	ldd	r25, Y+4	; 0x04
    18a0:	01 97       	sbiw	r24, 0x01	; 1
    18a2:	9c 83       	std	Y+4, r25	; 0x04
    18a4:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x28;
    18a6:	eb 81       	ldd	r30, Y+3	; 0x03
    18a8:	fc 81       	ldd	r31, Y+4	; 0x04
    18aa:	88 e2       	ldi	r24, 0x28	; 40
    18ac:	80 83       	st	Z, r24
    18ae:	8b 81       	ldd	r24, Y+3	; 0x03
    18b0:	9c 81       	ldd	r25, Y+4	; 0x04
    18b2:	01 97       	sbiw	r24, 0x01	; 1
    18b4:	9c 83       	std	Y+4, r25	; 0x04
    18b6:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x29;
    18b8:	eb 81       	ldd	r30, Y+3	; 0x03
    18ba:	fc 81       	ldd	r31, Y+4	; 0x04
    18bc:	89 e2       	ldi	r24, 0x29	; 41
    18be:	80 83       	st	Z, r24
    18c0:	8b 81       	ldd	r24, Y+3	; 0x03
    18c2:	9c 81       	ldd	r25, Y+4	; 0x04
    18c4:	01 97       	sbiw	r24, 0x01	; 1
    18c6:	9c 83       	std	Y+4, r25	; 0x04
    18c8:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x30;
    18ca:	eb 81       	ldd	r30, Y+3	; 0x03
    18cc:	fc 81       	ldd	r31, Y+4	; 0x04
    18ce:	80 e3       	ldi	r24, 0x30	; 48
    18d0:	80 83       	st	Z, r24
    18d2:	8b 81       	ldd	r24, Y+3	; 0x03
    18d4:	9c 81       	ldd	r25, Y+4	; 0x04
    18d6:	01 97       	sbiw	r24, 0x01	; 1
    18d8:	9c 83       	std	Y+4, r25	; 0x04
    18da:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x31;
    18dc:	eb 81       	ldd	r30, Y+3	; 0x03
    18de:	fc 81       	ldd	r31, Y+4	; 0x04
    18e0:	81 e3       	ldi	r24, 0x31	; 49
    18e2:	80 83       	st	Z, r24
    18e4:	8b 81       	ldd	r24, Y+3	; 0x03
    18e6:	9c 81       	ldd	r25, Y+4	; 0x04
    18e8:	01 97       	sbiw	r24, 0x01	; 1
    18ea:	9c 83       	std	Y+4, r25	; 0x04
    18ec:	8b 83       	std	Y+3, r24	; 0x03
#ifdef RAMPZ
    *tos-- = 0xff;
#endif
    return tos;
    18ee:	8b 81       	ldd	r24, Y+3	; 0x03
    18f0:	9c 81       	ldd	r25, Y+4	; 0x04
}
    18f2:	2a 96       	adiw	r28, 0x0a	; 10
    18f4:	0f b6       	in	r0, 0x3f	; 63
    18f6:	f8 94       	cli
    18f8:	de bf       	out	0x3e, r29	; 62
    18fa:	0f be       	out	0x3f, r0	; 63
    18fc:	cd bf       	out	0x3d, r28	; 61
    18fe:	cf 91       	pop	r28
    1900:	df 91       	pop	r29
    1902:	08 95       	ret

00001904 <index_search>:
*                           http://www.0chan.ru/r/res/9996.html                          *
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
prio_t index_search(index_t index)
{
    1904:	df 93       	push	r29
    1906:	cf 93       	push	r28
    1908:	00 d0       	rcall	.+0      	; 0x190a <index_search+0x6>
    190a:	00 d0       	rcall	.+0      	; 0x190c <index_search+0x8>
    190c:	00 d0       	rcall	.+0      	; 0x190e <index_search+0xa>
    190e:	cd b7       	in	r28, 0x3d	; 61
    1910:	de b7       	in	r29, 0x3e	; 62
    1912:	8e 83       	std	Y+6, r24	; 0x06
    prio_t prio = (prio_t)0;
    1914:	1d 82       	std	Y+5, r1	; 0x05
        но, т.к. BITS_IN_INDEX_T фиксировано для данной конфигурации,
        то получается время выполнения - O(1), ВСЕГДА.

        И да, предсказуемость + переносимость > быстродействие.
        */
    index_t upper = ~(index_t)0, lower = ~(index_t)0, middle;
    1916:	8f ef       	ldi	r24, 0xFF	; 255
    1918:	8c 83       	std	Y+4, r24	; 0x04
    191a:	8f ef       	ldi	r24, 0xFF	; 255
    191c:	8b 83       	std	Y+3, r24	; 0x03
    prio_t step = (prio_t)BITS_IN_INDEX_T;
    191e:	88 e0       	ldi	r24, 0x08	; 8
    1920:	89 83       	std	Y+1, r24	; 0x01
    1922:	22 c0       	rjmp	.+68     	; 0x1968 <index_search+0x64>
    while( step )
    {
        step>>=1; // делим шаг пополам
    1924:	89 81       	ldd	r24, Y+1	; 0x01
    1926:	86 95       	lsr	r24
    1928:	89 83       	std	Y+1, r24	; 0x01
        middle = lower>>step;
    192a:	8b 81       	ldd	r24, Y+3	; 0x03
    192c:	28 2f       	mov	r18, r24
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	89 81       	ldd	r24, Y+1	; 0x01
    1932:	88 2f       	mov	r24, r24
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	a9 01       	movw	r20, r18
    1938:	02 c0       	rjmp	.+4      	; 0x193e <index_search+0x3a>
    193a:	55 95       	asr	r21
    193c:	47 95       	ror	r20
    193e:	8a 95       	dec	r24
    1940:	e2 f7       	brpl	.-8      	; 0x193a <index_search+0x36>
    1942:	ca 01       	movw	r24, r20
    1944:	8a 83       	std	Y+2, r24	; 0x02
        if( index & upper & middle )
    1946:	9e 81       	ldd	r25, Y+6	; 0x06
    1948:	8c 81       	ldd	r24, Y+4	; 0x04
    194a:	98 23       	and	r25, r24
    194c:	8a 81       	ldd	r24, Y+2	; 0x02
    194e:	89 23       	and	r24, r25
    1950:	88 23       	and	r24, r24
    1952:	19 f0       	breq	.+6      	; 0x195a <index_search+0x56>
        {
            lower = middle;
    1954:	8a 81       	ldd	r24, Y+2	; 0x02
    1956:	8b 83       	std	Y+3, r24	; 0x03
    1958:	07 c0       	rjmp	.+14     	; 0x1968 <index_search+0x64>
        }
        else
        {
            upper = ~middle;
    195a:	8a 81       	ldd	r24, Y+2	; 0x02
    195c:	80 95       	com	r24
    195e:	8c 83       	std	Y+4, r24	; 0x04
            prio += step;
    1960:	9d 81       	ldd	r25, Y+5	; 0x05
    1962:	89 81       	ldd	r24, Y+1	; 0x01
    1964:	89 0f       	add	r24, r25
    1966:	8d 83       	std	Y+5, r24	; 0x05

        И да, предсказуемость + переносимость > быстродействие.
        */
    index_t upper = ~(index_t)0, lower = ~(index_t)0, middle;
    prio_t step = (prio_t)BITS_IN_INDEX_T;
    while( step )
    1968:	89 81       	ldd	r24, Y+1	; 0x01
    196a:	88 23       	and	r24, r24
    196c:	d9 f6       	brne	.-74     	; 0x1924 <index_search+0x20>
        if ( mask & index )break;
        prio++;
        mask<<=1;
    }
#endif
    return prio;
    196e:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1970:	26 96       	adiw	r28, 0x06	; 6
    1972:	0f b6       	in	r0, 0x3f	; 63
    1974:	f8 94       	cli
    1976:	de bf       	out	0x3e, r29	; 62
    1978:	0f be       	out	0x3f, r0	; 63
    197a:	cd bf       	out	0x3d, r28	; 61
    197c:	cf 91       	pop	r28
    197e:	df 91       	pop	r29
    1980:	08 95       	ret

00001982 <_ipc_wait>:
*                           http://www.0chan.ru/r/res/9996.html                          *
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
void _ipc_wait( void * ipc_pointer )
{
    1982:	df 93       	push	r29
    1984:	cf 93       	push	r28
    1986:	00 d0       	rcall	.+0      	; 0x1988 <_ipc_wait+0x6>
    1988:	00 d0       	rcall	.+0      	; 0x198a <_ipc_wait+0x8>
    198a:	cd b7       	in	r28, 0x3d	; 61
    198c:	de b7       	in	r29, 0x3e	; 62
    198e:	9c 83       	std	Y+4, r25	; 0x04
    1990:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc;
    proc = current_proc();
    1992:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <current_proc>
    1996:	9a 83       	std	Y+2, r25	; 0x02
    1998:	89 83       	std	Y+1, r24	; 0x01
    SPIN_LOCK( proc );
    199a:	89 81       	ldd	r24, Y+1	; 0x01
    199c:	9a 81       	ldd	r25, Y+2	; 0x02
    199e:	83 96       	adiw	r24, 0x23	; 35
    19a0:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    // Останавливаем процесс
    proc->flags |= PROC_FLG_IPCW;
    19a4:	e9 81       	ldd	r30, Y+1	; 0x01
    19a6:	fa 81       	ldd	r31, Y+2	; 0x02
    19a8:	87 81       	ldd	r24, Z+7	; 0x07
    19aa:	90 85       	ldd	r25, Z+8	; 0x08
    19ac:	80 64       	ori	r24, 0x40	; 64
    19ae:	e9 81       	ldd	r30, Y+1	; 0x01
    19b0:	fa 81       	ldd	r31, Y+2	; 0x02
    19b2:	90 87       	std	Z+8, r25	; 0x08
    19b4:	87 83       	std	Z+7, r24	; 0x07
    proc->buf = ipc_pointer;
    19b6:	e9 81       	ldd	r30, Y+1	; 0x01
    19b8:	fa 81       	ldd	r31, Y+2	; 0x02
    19ba:	8b 81       	ldd	r24, Y+3	; 0x03
    19bc:	9c 81       	ldd	r25, Y+4	; 0x04
    19be:	90 a3       	std	Z+32, r25	; 0x20
    19c0:	87 8f       	std	Z+31, r24	; 0x1f
    _proc_stop_( proc );
    19c2:	89 81       	ldd	r24, Y+1	; 0x01
    19c4:	9a 81       	ldd	r25, Y+2	; 0x02
    19c6:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <_proc_stop_>
    RESCHED_PROC( proc );
    19ca:	e9 81       	ldd	r30, Y+1	; 0x01
    19cc:	fa 81       	ldd	r31, Y+2	; 0x02
    19ce:	81 a1       	ldd	r24, Z+33	; 0x21
    19d0:	0e 94 b4 01 	call	0x368	; 0x368 <resched>

    SPIN_UNLOCK( proc );
    19d4:	89 81       	ldd	r24, Y+1	; 0x01
    19d6:	9a 81       	ldd	r25, Y+2	; 0x02
    19d8:	83 96       	adiw	r24, 0x23	; 35
    19da:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
}
    19de:	0f 90       	pop	r0
    19e0:	0f 90       	pop	r0
    19e2:	0f 90       	pop	r0
    19e4:	0f 90       	pop	r0
    19e6:	cf 91       	pop	r28
    19e8:	df 91       	pop	r29
    19ea:	08 95       	ret

000019ec <ipc_send_isr>:

bool_t ipc_send_isr( proc_t * proc, ipc_data_t data )
{
    19ec:	df 93       	push	r29
    19ee:	cf 93       	push	r28
    19f0:	00 d0       	rcall	.+0      	; 0x19f2 <ipc_send_isr+0x6>
    19f2:	00 d0       	rcall	.+0      	; 0x19f4 <ipc_send_isr+0x8>
    19f4:	0f 92       	push	r0
    19f6:	cd b7       	in	r28, 0x3d	; 61
    19f8:	de b7       	in	r29, 0x3e	; 62
    19fa:	9b 83       	std	Y+3, r25	; 0x03
    19fc:	8a 83       	std	Y+2, r24	; 0x02
    19fe:	7d 83       	std	Y+5, r23	; 0x05
    1a00:	6c 83       	std	Y+4, r22	; 0x04
    bool_t ret = (bool_t)0;
    1a02:	19 82       	std	Y+1, r1	; 0x01
    SPIN_LOCK( proc );
    1a04:	8a 81       	ldd	r24, Y+2	; 0x02
    1a06:	9b 81       	ldd	r25, Y+3	; 0x03
    1a08:	83 96       	adiw	r24, 0x23	; 35
    1a0a:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    if( proc->flags & PROC_FLG_IPCW )
    1a0e:	ea 81       	ldd	r30, Y+2	; 0x02
    1a10:	fb 81       	ldd	r31, Y+3	; 0x03
    1a12:	87 81       	ldd	r24, Z+7	; 0x07
    1a14:	90 85       	ldd	r25, Z+8	; 0x08
    1a16:	80 74       	andi	r24, 0x40	; 64
    1a18:	90 70       	andi	r25, 0x00	; 0
    1a1a:	00 97       	sbiw	r24, 0x00	; 0
    1a1c:	91 f1       	breq	.+100    	; 0x1a82 <ipc_send_isr+0x96>
    {
        proc->flags &= ~PROC_FLG_IPCW;
    1a1e:	ea 81       	ldd	r30, Y+2	; 0x02
    1a20:	fb 81       	ldd	r31, Y+3	; 0x03
    1a22:	87 81       	ldd	r24, Z+7	; 0x07
    1a24:	90 85       	ldd	r25, Z+8	; 0x08
    1a26:	8f 7b       	andi	r24, 0xBF	; 191
    1a28:	ea 81       	ldd	r30, Y+2	; 0x02
    1a2a:	fb 81       	ldd	r31, Y+3	; 0x03
    1a2c:	90 87       	std	Z+8, r25	; 0x08
    1a2e:	87 83       	std	Z+7, r24	; 0x07
        ///Обработка флага останова целевого процесса
        if(  PROC_PRE_STOP_TEST(proc)  )
    1a30:	ea 81       	ldd	r30, Y+2	; 0x02
    1a32:	fb 81       	ldd	r31, Y+3	; 0x03
    1a34:	87 81       	ldd	r24, Z+7	; 0x07
    1a36:	90 85       	ldd	r25, Z+8	; 0x08
    1a38:	80 78       	andi	r24, 0x80	; 128
    1a3a:	90 70       	andi	r25, 0x00	; 0
    1a3c:	00 97       	sbiw	r24, 0x00	; 0
    1a3e:	91 f0       	breq	.+36     	; 0x1a64 <ipc_send_isr+0x78>
    1a40:	ea 81       	ldd	r30, Y+2	; 0x02
    1a42:	fb 81       	ldd	r31, Y+3	; 0x03
    1a44:	87 81       	ldd	r24, Z+7	; 0x07
    1a46:	90 85       	ldd	r25, Z+8	; 0x08
    1a48:	8c 70       	andi	r24, 0x0C	; 12
    1a4a:	90 70       	andi	r25, 0x00	; 0
    1a4c:	00 97       	sbiw	r24, 0x00	; 0
    1a4e:	51 f4       	brne	.+20     	; 0x1a64 <ipc_send_isr+0x78>
            Если был запрошен останов целевого процесса,
            и целевой процесс не удерживает общие ресурсы,
            то мы не будем возобновлять его работу
            и передавать ему информацию.
            */
            proc->flags &= ~PROC_FLG_PRE_STOP_MASK;
    1a50:	ea 81       	ldd	r30, Y+2	; 0x02
    1a52:	fb 81       	ldd	r31, Y+3	; 0x03
    1a54:	87 81       	ldd	r24, Z+7	; 0x07
    1a56:	90 85       	ldd	r25, Z+8	; 0x08
    1a58:	8d 77       	andi	r24, 0x7D	; 125
    1a5a:	ea 81       	ldd	r30, Y+2	; 0x02
    1a5c:	fb 81       	ldd	r31, Y+3	; 0x03
    1a5e:	90 87       	std	Z+8, r25	; 0x08
    1a60:	87 83       	std	Z+7, r24	; 0x07
    1a62:	0f c0       	rjmp	.+30     	; 0x1a82 <ipc_send_isr+0x96>
            goto end;
        }
        ret = (bool_t)1; // информация будет передана
    1a64:	81 e0       	ldi	r24, 0x01	; 1
    1a66:	89 83       	std	Y+1, r24	; 0x01
        *(ipc_data_t *)proc->buf = data;
    1a68:	ea 81       	ldd	r30, Y+2	; 0x02
    1a6a:	fb 81       	ldd	r31, Y+3	; 0x03
    1a6c:	87 8d       	ldd	r24, Z+31	; 0x1f
    1a6e:	90 a1       	ldd	r25, Z+32	; 0x20
    1a70:	fc 01       	movw	r30, r24
    1a72:	8c 81       	ldd	r24, Y+4	; 0x04
    1a74:	9d 81       	ldd	r25, Y+5	; 0x05
    1a76:	91 83       	std	Z+1, r25	; 0x01
    1a78:	80 83       	st	Z, r24
        _proc_run( proc );
    1a7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7c:	9b 81       	ldd	r25, Y+3	; 0x03
    1a7e:	0e 94 2b 13 	call	0x2656	; 0x2656 <_proc_run>
    }
end:
    SPIN_UNLOCK( proc );
    1a82:	8a 81       	ldd	r24, Y+2	; 0x02
    1a84:	9b 81       	ldd	r25, Y+3	; 0x03
    1a86:	83 96       	adiw	r24, 0x23	; 35
    1a88:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
    return ret;
    1a8c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a8e:	0f 90       	pop	r0
    1a90:	0f 90       	pop	r0
    1a92:	0f 90       	pop	r0
    1a94:	0f 90       	pop	r0
    1a96:	0f 90       	pop	r0
    1a98:	cf 91       	pop	r28
    1a9a:	df 91       	pop	r29
    1a9c:	08 95       	ret

00001a9e <_ipc_exchange>:

bool_t _ipc_exchange( proc_t * proc, ipc_data_t send, ipc_data_t * receive )
{
    1a9e:	df 93       	push	r29
    1aa0:	cf 93       	push	r28
    1aa2:	cd b7       	in	r28, 0x3d	; 61
    1aa4:	de b7       	in	r29, 0x3e	; 62
    1aa6:	27 97       	sbiw	r28, 0x07	; 7
    1aa8:	0f b6       	in	r0, 0x3f	; 63
    1aaa:	f8 94       	cli
    1aac:	de bf       	out	0x3e, r29	; 62
    1aae:	0f be       	out	0x3f, r0	; 63
    1ab0:	cd bf       	out	0x3d, r28	; 61
    1ab2:	9b 83       	std	Y+3, r25	; 0x03
    1ab4:	8a 83       	std	Y+2, r24	; 0x02
    1ab6:	7d 83       	std	Y+5, r23	; 0x05
    1ab8:	6c 83       	std	Y+4, r22	; 0x04
    1aba:	5f 83       	std	Y+7, r21	; 0x07
    1abc:	4e 83       	std	Y+6, r20	; 0x06
    bool_t ret = (bool_t)0;
    1abe:	19 82       	std	Y+1, r1	; 0x01
    SPIN_LOCK( proc );
    1ac0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ac4:	83 96       	adiw	r24, 0x23	; 35
    1ac6:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    if( proc->flags & PROC_FLG_IPCW )
    1aca:	ea 81       	ldd	r30, Y+2	; 0x02
    1acc:	fb 81       	ldd	r31, Y+3	; 0x03
    1ace:	87 81       	ldd	r24, Z+7	; 0x07
    1ad0:	90 85       	ldd	r25, Z+8	; 0x08
    1ad2:	80 74       	andi	r24, 0x40	; 64
    1ad4:	90 70       	andi	r25, 0x00	; 0
    1ad6:	00 97       	sbiw	r24, 0x00	; 0
    1ad8:	b1 f1       	breq	.+108    	; 0x1b46 <_ipc_exchange+0xa8>
    {
        proc->flags &= ~PROC_FLG_IPCW;
    1ada:	ea 81       	ldd	r30, Y+2	; 0x02
    1adc:	fb 81       	ldd	r31, Y+3	; 0x03
    1ade:	87 81       	ldd	r24, Z+7	; 0x07
    1ae0:	90 85       	ldd	r25, Z+8	; 0x08
    1ae2:	8f 7b       	andi	r24, 0xBF	; 191
    1ae4:	ea 81       	ldd	r30, Y+2	; 0x02
    1ae6:	fb 81       	ldd	r31, Y+3	; 0x03
    1ae8:	90 87       	std	Z+8, r25	; 0x08
    1aea:	87 83       	std	Z+7, r24	; 0x07
        ///Обработка флага останова целевого процесса
        if(  PROC_PRE_STOP_TEST(proc)  )
    1aec:	ea 81       	ldd	r30, Y+2	; 0x02
    1aee:	fb 81       	ldd	r31, Y+3	; 0x03
    1af0:	87 81       	ldd	r24, Z+7	; 0x07
    1af2:	90 85       	ldd	r25, Z+8	; 0x08
    1af4:	80 78       	andi	r24, 0x80	; 128
    1af6:	90 70       	andi	r25, 0x00	; 0
    1af8:	00 97       	sbiw	r24, 0x00	; 0
    1afa:	91 f0       	breq	.+36     	; 0x1b20 <_ipc_exchange+0x82>
    1afc:	ea 81       	ldd	r30, Y+2	; 0x02
    1afe:	fb 81       	ldd	r31, Y+3	; 0x03
    1b00:	87 81       	ldd	r24, Z+7	; 0x07
    1b02:	90 85       	ldd	r25, Z+8	; 0x08
    1b04:	8c 70       	andi	r24, 0x0C	; 12
    1b06:	90 70       	andi	r25, 0x00	; 0
    1b08:	00 97       	sbiw	r24, 0x00	; 0
    1b0a:	51 f4       	brne	.+20     	; 0x1b20 <_ipc_exchange+0x82>
            Если был запрошен останов целевого процесса,
            и целевой процесс не удерживает общие ресурсы,
            то мы не будем возобновлять его работу
            и передавать ему информацию.
            */
            proc->flags &= ~PROC_FLG_PRE_STOP_MASK;
    1b0c:	ea 81       	ldd	r30, Y+2	; 0x02
    1b0e:	fb 81       	ldd	r31, Y+3	; 0x03
    1b10:	87 81       	ldd	r24, Z+7	; 0x07
    1b12:	90 85       	ldd	r25, Z+8	; 0x08
    1b14:	8d 77       	andi	r24, 0x7D	; 125
    1b16:	ea 81       	ldd	r30, Y+2	; 0x02
    1b18:	fb 81       	ldd	r31, Y+3	; 0x03
    1b1a:	90 87       	std	Z+8, r25	; 0x08
    1b1c:	87 83       	std	Z+7, r24	; 0x07
    1b1e:	13 c0       	rjmp	.+38     	; 0x1b46 <_ipc_exchange+0xa8>
            goto end;
        }
        ret = (bool_t)1; // информация будет передана
    1b20:	81 e0       	ldi	r24, 0x01	; 1
    1b22:	89 83       	std	Y+1, r24	; 0x01
        *(ipc_data_t *)proc->buf = send;
    1b24:	ea 81       	ldd	r30, Y+2	; 0x02
    1b26:	fb 81       	ldd	r31, Y+3	; 0x03
    1b28:	87 8d       	ldd	r24, Z+31	; 0x1f
    1b2a:	90 a1       	ldd	r25, Z+32	; 0x20
    1b2c:	fc 01       	movw	r30, r24
    1b2e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b30:	9d 81       	ldd	r25, Y+5	; 0x05
    1b32:	91 83       	std	Z+1, r25	; 0x01
    1b34:	80 83       	st	Z, r24
        _ipc_wait( receive ); // Готовимся к приему данных!
    1b36:	8e 81       	ldd	r24, Y+6	; 0x06
    1b38:	9f 81       	ldd	r25, Y+7	; 0x07
    1b3a:	0e 94 c1 0c 	call	0x1982	; 0x1982 <_ipc_wait>
        _proc_run( proc );   // И только после этого запускаем процесс-адресат!
    1b3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b40:	9b 81       	ldd	r25, Y+3	; 0x03
    1b42:	0e 94 2b 13 	call	0x2656	; 0x2656 <_proc_run>
    }
end:
    SPIN_UNLOCK( proc );
    1b46:	8a 81       	ldd	r24, Y+2	; 0x02
    1b48:	9b 81       	ldd	r25, Y+3	; 0x03
    1b4a:	83 96       	adiw	r24, 0x23	; 35
    1b4c:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
    return ret;
    1b50:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b52:	27 96       	adiw	r28, 0x07	; 7
    1b54:	0f b6       	in	r0, 0x3f	; 63
    1b56:	f8 94       	cli
    1b58:	de bf       	out	0x3e, r29	; 62
    1b5a:	0f be       	out	0x3f, r0	; 63
    1b5c:	cd bf       	out	0x3d, r28	; 61
    1b5e:	cf 91       	pop	r28
    1b60:	df 91       	pop	r29
    1b62:	08 95       	ret

00001b64 <item_init>:
*****************************************************************************************/
#include "../include/bugurt.h"
//Методы элемента 2-связного списка
//инициация элемента
void item_init(item_t *item)
{
    1b64:	df 93       	push	r29
    1b66:	cf 93       	push	r28
    1b68:	00 d0       	rcall	.+0      	; 0x1b6a <item_init+0x6>
    1b6a:	cd b7       	in	r28, 0x3d	; 61
    1b6c:	de b7       	in	r29, 0x3e	; 62
    1b6e:	9a 83       	std	Y+2, r25	; 0x02
    1b70:	89 83       	std	Y+1, r24	; 0x01
    item->prev = item;
    1b72:	e9 81       	ldd	r30, Y+1	; 0x01
    1b74:	fa 81       	ldd	r31, Y+2	; 0x02
    1b76:	89 81       	ldd	r24, Y+1	; 0x01
    1b78:	9a 81       	ldd	r25, Y+2	; 0x02
    1b7a:	93 83       	std	Z+3, r25	; 0x03
    1b7c:	82 83       	std	Z+2, r24	; 0x02
    item->next = item;
    1b7e:	e9 81       	ldd	r30, Y+1	; 0x01
    1b80:	fa 81       	ldd	r31, Y+2	; 0x02
    1b82:	89 81       	ldd	r24, Y+1	; 0x01
    1b84:	9a 81       	ldd	r25, Y+2	; 0x02
    1b86:	91 83       	std	Z+1, r25	; 0x01
    1b88:	80 83       	st	Z, r24
}
    1b8a:	0f 90       	pop	r0
    1b8c:	0f 90       	pop	r0
    1b8e:	cf 91       	pop	r28
    1b90:	df 91       	pop	r29
    1b92:	08 95       	ret

00001b94 <item_insert>:
//Вставить элемент
void item_insert(item_t *item, item_t *head)
{
    1b94:	df 93       	push	r29
    1b96:	cf 93       	push	r28
    1b98:	00 d0       	rcall	.+0      	; 0x1b9a <item_insert+0x6>
    1b9a:	00 d0       	rcall	.+0      	; 0x1b9c <item_insert+0x8>
    1b9c:	00 d0       	rcall	.+0      	; 0x1b9e <item_insert+0xa>
    1b9e:	cd b7       	in	r28, 0x3d	; 61
    1ba0:	de b7       	in	r29, 0x3e	; 62
    1ba2:	9c 83       	std	Y+4, r25	; 0x04
    1ba4:	8b 83       	std	Y+3, r24	; 0x03
    1ba6:	7e 83       	std	Y+6, r23	; 0x06
    1ba8:	6d 83       	std	Y+5, r22	; 0x05
    // "хвост" списка
    item_t * tail;
    tail = head->prev;
    1baa:	ed 81       	ldd	r30, Y+5	; 0x05
    1bac:	fe 81       	ldd	r31, Y+6	; 0x06
    1bae:	82 81       	ldd	r24, Z+2	; 0x02
    1bb0:	93 81       	ldd	r25, Z+3	; 0x03
    1bb2:	9a 83       	std	Y+2, r25	; 0x02
    1bb4:	89 83       	std	Y+1, r24	; 0x01
    // Вставляем элемент между "головой" и "хвостом"
    item->prev = tail;
    1bb6:	eb 81       	ldd	r30, Y+3	; 0x03
    1bb8:	fc 81       	ldd	r31, Y+4	; 0x04
    1bba:	89 81       	ldd	r24, Y+1	; 0x01
    1bbc:	9a 81       	ldd	r25, Y+2	; 0x02
    1bbe:	93 83       	std	Z+3, r25	; 0x03
    1bc0:	82 83       	std	Z+2, r24	; 0x02
    item->next = head;
    1bc2:	eb 81       	ldd	r30, Y+3	; 0x03
    1bc4:	fc 81       	ldd	r31, Y+4	; 0x04
    1bc6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bca:	91 83       	std	Z+1, r25	; 0x01
    1bcc:	80 83       	st	Z, r24

    head->prev = item;
    1bce:	ed 81       	ldd	r30, Y+5	; 0x05
    1bd0:	fe 81       	ldd	r31, Y+6	; 0x06
    1bd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd6:	93 83       	std	Z+3, r25	; 0x03
    1bd8:	82 83       	std	Z+2, r24	; 0x02
    tail->next = item;
    1bda:	e9 81       	ldd	r30, Y+1	; 0x01
    1bdc:	fa 81       	ldd	r31, Y+2	; 0x02
    1bde:	8b 81       	ldd	r24, Y+3	; 0x03
    1be0:	9c 81       	ldd	r25, Y+4	; 0x04
    1be2:	91 83       	std	Z+1, r25	; 0x01
    1be4:	80 83       	st	Z, r24
}
    1be6:	26 96       	adiw	r28, 0x06	; 6
    1be8:	0f b6       	in	r0, 0x3f	; 63
    1bea:	f8 94       	cli
    1bec:	de bf       	out	0x3e, r29	; 62
    1bee:	0f be       	out	0x3f, r0	; 63
    1bf0:	cd bf       	out	0x3d, r28	; 61
    1bf2:	cf 91       	pop	r28
    1bf4:	df 91       	pop	r29
    1bf6:	08 95       	ret

00001bf8 <item_cut>:
//Вырезать элемент
void item_cut( item_t *item )
{
    1bf8:	df 93       	push	r29
    1bfa:	cf 93       	push	r28
    1bfc:	00 d0       	rcall	.+0      	; 0x1bfe <item_cut+0x6>
    1bfe:	00 d0       	rcall	.+0      	; 0x1c00 <item_cut+0x8>
    1c00:	00 d0       	rcall	.+0      	; 0x1c02 <item_cut+0xa>
    1c02:	cd b7       	in	r28, 0x3d	; 61
    1c04:	de b7       	in	r29, 0x3e	; 62
    1c06:	9e 83       	std	Y+6, r25	; 0x06
    1c08:	8d 83       	std	Y+5, r24	; 0x05
    item_t * prev;
    item_t * next;
    prev = item->prev; //Предыдущий элемент
    1c0a:	ed 81       	ldd	r30, Y+5	; 0x05
    1c0c:	fe 81       	ldd	r31, Y+6	; 0x06
    1c0e:	82 81       	ldd	r24, Z+2	; 0x02
    1c10:	93 81       	ldd	r25, Z+3	; 0x03
    1c12:	9c 83       	std	Y+4, r25	; 0x04
    1c14:	8b 83       	std	Y+3, r24	; 0x03
    next = item->next; //Следующий элемент
    1c16:	ed 81       	ldd	r30, Y+5	; 0x05
    1c18:	fe 81       	ldd	r31, Y+6	; 0x06
    1c1a:	80 81       	ld	r24, Z
    1c1c:	91 81       	ldd	r25, Z+1	; 0x01
    1c1e:	9a 83       	std	Y+2, r25	; 0x02
    1c20:	89 83       	std	Y+1, r24	; 0x01

    next->prev = prev;
    1c22:	e9 81       	ldd	r30, Y+1	; 0x01
    1c24:	fa 81       	ldd	r31, Y+2	; 0x02
    1c26:	8b 81       	ldd	r24, Y+3	; 0x03
    1c28:	9c 81       	ldd	r25, Y+4	; 0x04
    1c2a:	93 83       	std	Z+3, r25	; 0x03
    1c2c:	82 83       	std	Z+2, r24	; 0x02
    prev->next = next;
    1c2e:	eb 81       	ldd	r30, Y+3	; 0x03
    1c30:	fc 81       	ldd	r31, Y+4	; 0x04
    1c32:	89 81       	ldd	r24, Y+1	; 0x01
    1c34:	9a 81       	ldd	r25, Y+2	; 0x02
    1c36:	91 83       	std	Z+1, r25	; 0x01
    1c38:	80 83       	st	Z, r24

    item->prev = item;
    1c3a:	ed 81       	ldd	r30, Y+5	; 0x05
    1c3c:	fe 81       	ldd	r31, Y+6	; 0x06
    1c3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c40:	9e 81       	ldd	r25, Y+6	; 0x06
    1c42:	93 83       	std	Z+3, r25	; 0x03
    1c44:	82 83       	std	Z+2, r24	; 0x02
    item->next = item;
    1c46:	ed 81       	ldd	r30, Y+5	; 0x05
    1c48:	fe 81       	ldd	r31, Y+6	; 0x06
    1c4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c4e:	91 83       	std	Z+1, r25	; 0x01
    1c50:	80 83       	st	Z, r24
}
    1c52:	26 96       	adiw	r28, 0x06	; 6
    1c54:	0f b6       	in	r0, 0x3f	; 63
    1c56:	f8 94       	cli
    1c58:	de bf       	out	0x3e, r29	; 62
    1c5a:	0f be       	out	0x3f, r0	; 63
    1c5c:	cd bf       	out	0x3d, r28	; 61
    1c5e:	cf 91       	pop	r28
    1c60:	df 91       	pop	r29
    1c62:	08 95       	ret

00001c64 <idle_main>:
*****************************************************************************************/
#include "../include/bugurt.h"
kernel_t kernel;// Ядро, оно одно на всю систему!!!

WEAK void idle_main(void * arg)
{
    1c64:	df 93       	push	r29
    1c66:	cf 93       	push	r28
    1c68:	00 d0       	rcall	.+0      	; 0x1c6a <idle_main+0x6>
    1c6a:	cd b7       	in	r28, 0x3d	; 61
    1c6c:	de b7       	in	r29, 0x3e	; 62
    1c6e:	9a 83       	std	Y+2, r25	; 0x02
    1c70:	89 83       	std	Y+1, r24	; 0x01
    1c72:	ff cf       	rjmp	.-2      	; 0x1c72 <idle_main+0xe>

00001c74 <kernel_init>:
    while(1);
}

void kernel_init(void)
{
    1c74:	8f 92       	push	r8
    1c76:	af 92       	push	r10
    1c78:	bf 92       	push	r11
    1c7a:	cf 92       	push	r12
    1c7c:	ef 92       	push	r14
    1c7e:	ff 92       	push	r15
    1c80:	0f 93       	push	r16
    1c82:	1f 93       	push	r17
    1c84:	df 93       	push	r29
    1c86:	cf 93       	push	r28
    1c88:	0f 92       	push	r0
    1c8a:	cd b7       	in	r28, 0x3d	; 61
    1c8c:	de b7       	in	r29, 0x3e	; 62
#ifdef CONFIG_MP
    core_id_t i;

    spin_init( &kernel.stat_lock );
    1c8e:	83 e9       	ldi	r24, 0x93	; 147
    1c90:	93 e0       	ldi	r25, 0x03	; 3
    1c92:	0e 94 0b 01 	call	0x216	; 0x216 <spin_init>
    spin_lock( &kernel.stat_lock );
    1c96:	83 e9       	ldi	r24, 0x93	; 147
    1c98:	93 e0       	ldi	r25, 0x03	; 3
    1c9a:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    //Инициация собственно ядра
    for( i = (core_id_t)0; i<(core_id_t)MAX_CORES; i++ )
    1c9e:	19 82       	std	Y+1, r1	; 0x01
    1ca0:	76 c0       	rjmp	.+236    	; 0x1d8e <kernel_init+0x11a>
    {
        proc_init_isr(
    1ca2:	89 81       	ldd	r24, Y+1	; 0x01
    1ca4:	28 2f       	mov	r18, r24
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	80 e3       	ldi	r24, 0x30	; 48
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	ac 01       	movw	r20, r24
    1cae:	24 9f       	mul	r18, r20
    1cb0:	c0 01       	movw	r24, r0
    1cb2:	25 9f       	mul	r18, r21
    1cb4:	90 0d       	add	r25, r0
    1cb6:	34 9f       	mul	r19, r20
    1cb8:	90 0d       	add	r25, r0
    1cba:	11 24       	eor	r1, r1
    1cbc:	ac 01       	movw	r20, r24
    1cbe:	4f 5c       	subi	r20, 0xCF	; 207
    1cc0:	5c 4f       	sbci	r21, 0xFC	; 252
    1cc2:	89 81       	ldd	r24, Y+1	; 0x01
    1cc4:	28 2f       	mov	r18, r24
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	81 e0       	ldi	r24, 0x01	; 1
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	02 c0       	rjmp	.+4      	; 0x1cd2 <kernel_init+0x5e>
    1cce:	88 0f       	add	r24, r24
    1cd0:	99 1f       	adc	r25, r25
    1cd2:	2a 95       	dec	r18
    1cd4:	e2 f7       	brpl	.-8      	; 0x1cce <kernel_init+0x5a>
    1cd6:	0f 92       	push	r0
    1cd8:	ed b7       	in	r30, 0x3d	; 61
    1cda:	fe b7       	in	r31, 0x3e	; 62
    1cdc:	31 96       	adiw	r30, 0x01	; 1
    1cde:	22 e3       	ldi	r18, 0x32	; 50
    1ce0:	3e e0       	ldi	r19, 0x0E	; 14
    1ce2:	80 83       	st	Z, r24
    1ce4:	ca 01       	movw	r24, r20
    1ce6:	b9 01       	movw	r22, r18
    1ce8:	40 e0       	ldi	r20, 0x00	; 0
    1cea:	50 e0       	ldi	r21, 0x00	; 0
    1cec:	20 e0       	ldi	r18, 0x00	; 0
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	00 e0       	ldi	r16, 0x00	; 0
    1cf2:	10 e0       	ldi	r17, 0x00	; 0
    1cf4:	ee 24       	eor	r14, r14
    1cf6:	ff 24       	eor	r15, r15
    1cf8:	0f 2e       	mov	r0, r31
    1cfa:	f7 e0       	ldi	r31, 0x07	; 7
    1cfc:	cf 2e       	mov	r12, r31
    1cfe:	f0 2d       	mov	r31, r0
    1d00:	aa 24       	eor	r10, r10
    1d02:	bb 24       	eor	r11, r11
    1d04:	a3 94       	inc	r10
    1d06:	88 24       	eor	r8, r8
    1d08:	0e 94 53 12 	call	0x24a6	; 0x24a6 <proc_init_isr>
    1d0c:	0f 90       	pop	r0
            ((prio_t)BITS_IN_INDEX_T - (prio_t)1),// низший приоритет
            (timer_t)1,//минимальный квант времени
            (bool_t)0,// не RT
            ((affinity_t)1)<<i // привязка  строго к одному процессору, а то его как сбалансирует отсюда
        );
        kernel.idle[i].core_id = i;
    1d0e:	89 81       	ldd	r24, Y+1	; 0x01
    1d10:	28 2f       	mov	r18, r24
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	80 e3       	ldi	r24, 0x30	; 48
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	bc 01       	movw	r22, r24
    1d1a:	26 9f       	mul	r18, r22
    1d1c:	c0 01       	movw	r24, r0
    1d1e:	27 9f       	mul	r18, r23
    1d20:	90 0d       	add	r25, r0
    1d22:	36 9f       	mul	r19, r22
    1d24:	90 0d       	add	r25, r0
    1d26:	11 24       	eor	r1, r1
    1d28:	fc 01       	movw	r30, r24
    1d2a:	ee 5a       	subi	r30, 0xAE	; 174
    1d2c:	fc 4f       	sbci	r31, 0xFC	; 252
    1d2e:	89 81       	ldd	r24, Y+1	; 0x01
    1d30:	80 83       	st	Z, r24
        stat_init( (stat_t *)kernel.stat + i );
    1d32:	89 81       	ldd	r24, Y+1	; 0x01
    1d34:	88 2f       	mov	r24, r24
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	8f 56       	subi	r24, 0x6F	; 111
    1d3a:	9c 4f       	sbci	r25, 0xFC	; 252
    1d3c:	0e 94 49 01 	call	0x292	; 0x292 <stat_init>
        sched_init( (sched_t *)kernel.sched + i, (proc_t *)kernel.idle + i );
    1d40:	89 81       	ldd	r24, Y+1	; 0x01
    1d42:	28 2f       	mov	r18, r24
    1d44:	30 e0       	ldi	r19, 0x00	; 0
    1d46:	8b e2       	ldi	r24, 0x2B	; 43
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	ac 01       	movw	r20, r24
    1d4c:	24 9f       	mul	r18, r20
    1d4e:	c0 01       	movw	r24, r0
    1d50:	25 9f       	mul	r18, r21
    1d52:	90 0d       	add	r25, r0
    1d54:	34 9f       	mul	r19, r20
    1d56:	90 0d       	add	r25, r0
    1d58:	11 24       	eor	r1, r1
    1d5a:	ac 01       	movw	r20, r24
    1d5c:	45 52       	subi	r20, 0x25	; 37
    1d5e:	5d 4f       	sbci	r21, 0xFD	; 253
    1d60:	89 81       	ldd	r24, Y+1	; 0x01
    1d62:	28 2f       	mov	r18, r24
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	80 e3       	ldi	r24, 0x30	; 48
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	bc 01       	movw	r22, r24
    1d6c:	26 9f       	mul	r18, r22
    1d6e:	c0 01       	movw	r24, r0
    1d70:	27 9f       	mul	r18, r23
    1d72:	90 0d       	add	r25, r0
    1d74:	36 9f       	mul	r19, r22
    1d76:	90 0d       	add	r25, r0
    1d78:	11 24       	eor	r1, r1
    1d7a:	9c 01       	movw	r18, r24
    1d7c:	2f 5c       	subi	r18, 0xCF	; 207
    1d7e:	3c 4f       	sbci	r19, 0xFC	; 252
    1d80:	ca 01       	movw	r24, r20
    1d82:	b9 01       	movw	r22, r18
    1d84:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <sched_init>
    core_id_t i;

    spin_init( &kernel.stat_lock );
    spin_lock( &kernel.stat_lock );
    //Инициация собственно ядра
    for( i = (core_id_t)0; i<(core_id_t)MAX_CORES; i++ )
    1d88:	89 81       	ldd	r24, Y+1	; 0x01
    1d8a:	8f 5f       	subi	r24, 0xFF	; 255
    1d8c:	89 83       	std	Y+1, r24	; 0x01
    1d8e:	89 81       	ldd	r24, Y+1	; 0x01
    1d90:	82 30       	cpi	r24, 0x02	; 2
    1d92:	08 f4       	brcc	.+2      	; 0x1d96 <kernel_init+0x122>
    1d94:	86 cf       	rjmp	.-244    	; 0x1ca2 <kernel_init+0x2e>
        );
        kernel.idle[i].core_id = i;
        stat_init( (stat_t *)kernel.stat + i );
        sched_init( (sched_t *)kernel.sched + i, (proc_t *)kernel.idle + i );
    }
    spin_unlock( &kernel.stat_lock );
    1d96:	83 e9       	ldi	r24, 0x93	; 147
    1d98:	93 e0       	ldi	r25, 0x03	; 3
    1d9a:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
        (timer_t)1,//минимальный квант времени
        (bool_t)0// не RT
    );
    sched_init( (sched_t *)&kernel.sched, (proc_t *)&kernel.idle );
#endif // CONFIG_MP
}
    1d9e:	0f 90       	pop	r0
    1da0:	cf 91       	pop	r28
    1da2:	df 91       	pop	r29
    1da4:	1f 91       	pop	r17
    1da6:	0f 91       	pop	r16
    1da8:	ff 90       	pop	r15
    1daa:	ef 90       	pop	r14
    1dac:	cf 90       	pop	r12
    1dae:	bf 90       	pop	r11
    1db0:	af 90       	pop	r10
    1db2:	8f 90       	pop	r8
    1db4:	08 95       	ret

00001db6 <mutex_init_isr>:
    mutex_t * mutex
#ifdef CONFIG_USE_HIGHEST_LOCKER
    ,prio_t prio
#endif // CONFIG_USE_HIGHEST_LOCKER
)
{
    1db6:	df 93       	push	r29
    1db8:	cf 93       	push	r28
    1dba:	00 d0       	rcall	.+0      	; 0x1dbc <mutex_init_isr+0x6>
    1dbc:	0f 92       	push	r0
    1dbe:	cd b7       	in	r28, 0x3d	; 61
    1dc0:	de b7       	in	r29, 0x3e	; 62
    1dc2:	9a 83       	std	Y+2, r25	; 0x02
    1dc4:	89 83       	std	Y+1, r24	; 0x01
    1dc6:	6b 83       	std	Y+3, r22	; 0x03
    SPIN_INIT( mutex );
    1dc8:	89 81       	ldd	r24, Y+1	; 0x01
    1dca:	9a 81       	ldd	r25, Y+2	; 0x02
    1dcc:	43 96       	adiw	r24, 0x13	; 19
    1dce:	0e 94 0b 01 	call	0x216	; 0x216 <spin_init>
    SPIN_LOCK( mutex );
    1dd2:	89 81       	ldd	r24, Y+1	; 0x01
    1dd4:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd6:	43 96       	adiw	r24, 0x13	; 19
    1dd8:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    xlist_init( (xlist_t *)mutex );
    1ddc:	89 81       	ldd	r24, Y+1	; 0x01
    1dde:	9a 81       	ldd	r25, Y+2	; 0x02
    1de0:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <xlist_init>
    mutex->free = (bool_t)1;
    1de4:	e9 81       	ldd	r30, Y+1	; 0x01
    1de6:	fa 81       	ldd	r31, Y+2	; 0x02
    1de8:	81 e0       	ldi	r24, 0x01	; 1
    1dea:	82 8b       	std	Z+18, r24	; 0x12
#ifdef CONFIG_USE_HIGHEST_LOCKER
    mutex->prio = prio;
    1dec:	e9 81       	ldd	r30, Y+1	; 0x01
    1dee:	fa 81       	ldd	r31, Y+2	; 0x02
    1df0:	8b 81       	ldd	r24, Y+3	; 0x03
    1df2:	81 8b       	std	Z+17, r24	; 0x11
#endif // CONFIG_USE_HIGHEST_LOCKER
    SPIN_UNLOCK( mutex );
    1df4:	89 81       	ldd	r24, Y+1	; 0x01
    1df6:	9a 81       	ldd	r25, Y+2	; 0x02
    1df8:	43 96       	adiw	r24, 0x13	; 19
    1dfa:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
}
    1dfe:	0f 90       	pop	r0
    1e00:	0f 90       	pop	r0
    1e02:	0f 90       	pop	r0
    1e04:	cf 91       	pop	r28
    1e06:	df 91       	pop	r29
    1e08:	08 95       	ret

00001e0a <_mutex_lock>:

// К моменту вызова захвачена блокировка mutex-а, запрещены прерывания
bool_t _mutex_lock( mutex_t * mutex )
{
    1e0a:	df 93       	push	r29
    1e0c:	cf 93       	push	r28
    1e0e:	00 d0       	rcall	.+0      	; 0x1e10 <_mutex_lock+0x6>
    1e10:	00 d0       	rcall	.+0      	; 0x1e12 <_mutex_lock+0x8>
    1e12:	0f 92       	push	r0
    1e14:	cd b7       	in	r28, 0x3d	; 61
    1e16:	de b7       	in	r29, 0x3e	; 62
    1e18:	9d 83       	std	Y+5, r25	; 0x05
    1e1a:	8c 83       	std	Y+4, r24	; 0x04
    bool_t ret;
    proc_t * proc;
    // Захват блокировки мьютекса
    SPIN_LOCK( mutex );
    1e1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e1e:	9d 81       	ldd	r25, Y+5	; 0x05
    1e20:	43 96       	adiw	r24, 0x13	; 19
    1e22:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    ret = mutex->free;
    1e26:	ec 81       	ldd	r30, Y+4	; 0x04
    1e28:	fd 81       	ldd	r31, Y+5	; 0x05
    1e2a:	82 89       	ldd	r24, Z+18	; 0x12
    1e2c:	8b 83       	std	Y+3, r24	; 0x03
    proc = current_proc();
    1e2e:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <current_proc>
    1e32:	9a 83       	std	Y+2, r25	; 0x02
    1e34:	89 83       	std	Y+1, r24	; 0x01
    // Захват блокировки процесса
    SPIN_LOCK( proc );
    1e36:	89 81       	ldd	r24, Y+1	; 0x01
    1e38:	9a 81       	ldd	r25, Y+2	; 0x02
    1e3a:	83 96       	adiw	r24, 0x23	; 35
    1e3c:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    PROC_LRES_INC( proc, GET_PRIO( mutex ) );
    1e40:	ec 81       	ldd	r30, Y+4	; 0x04
    1e42:	fd 81       	ldd	r31, Y+5	; 0x05
    1e44:	21 89       	ldd	r18, Z+17	; 0x11
    1e46:	89 81       	ldd	r24, Y+1	; 0x01
    1e48:	9a 81       	ldd	r25, Y+2	; 0x02
    1e4a:	62 2f       	mov	r22, r18
    1e4c:	0e 94 43 15 	call	0x2a86	; 0x2a86 <_proc_lres_inc>

    if( ret )
    1e50:	8b 81       	ldd	r24, Y+3	; 0x03
    1e52:	88 23       	and	r24, r24
    1e54:	41 f0       	breq	.+16     	; 0x1e66 <_mutex_lock+0x5c>
    {
        mutex->free = (bool_t)0;
    1e56:	ec 81       	ldd	r30, Y+4	; 0x04
    1e58:	fd 81       	ldd	r31, Y+5	; 0x05
    1e5a:	12 8a       	std	Z+18, r1	; 0x12
        PROC_PRIO_CONTROL_RUNNING( proc );
    1e5c:	89 81       	ldd	r24, Y+1	; 0x01
    1e5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e60:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <_proc_prio_control_running>
    1e64:	14 c0       	rjmp	.+40     	; 0x1e8e <_mutex_lock+0x84>
    }
    else
    {
        proc->flags |= PROC_FLG_QUEUE;
    1e66:	e9 81       	ldd	r30, Y+1	; 0x01
    1e68:	fa 81       	ldd	r31, Y+2	; 0x02
    1e6a:	87 81       	ldd	r24, Z+7	; 0x07
    1e6c:	90 85       	ldd	r25, Z+8	; 0x08
    1e6e:	80 61       	ori	r24, 0x10	; 16
    1e70:	e9 81       	ldd	r30, Y+1	; 0x01
    1e72:	fa 81       	ldd	r31, Y+2	; 0x02
    1e74:	90 87       	std	Z+8, r25	; 0x08
    1e76:	87 83       	std	Z+7, r24	; 0x07
        _proc_stop( proc );
    1e78:	89 81       	ldd	r24, Y+1	; 0x01
    1e7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e7c:	0e 94 38 14 	call	0x2870	; 0x2870 <_proc_stop>
        pitem_insert( (pitem_t *)proc, (xlist_t *)mutex );
    1e80:	89 81       	ldd	r24, Y+1	; 0x01
    1e82:	9a 81       	ldd	r25, Y+2	; 0x02
    1e84:	2c 81       	ldd	r18, Y+4	; 0x04
    1e86:	3d 81       	ldd	r19, Y+5	; 0x05
    1e88:	b9 01       	movw	r22, r18
    1e8a:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <pitem_insert>
    }
    SPIN_UNLOCK( proc );
    1e8e:	89 81       	ldd	r24, Y+1	; 0x01
    1e90:	9a 81       	ldd	r25, Y+2	; 0x02
    1e92:	83 96       	adiw	r24, 0x23	; 35
    1e94:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
    SPIN_UNLOCK( mutex );
    1e98:	8c 81       	ldd	r24, Y+4	; 0x04
    1e9a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e9c:	43 96       	adiw	r24, 0x13	; 19
    1e9e:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
    return ret;
    1ea2:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1ea4:	0f 90       	pop	r0
    1ea6:	0f 90       	pop	r0
    1ea8:	0f 90       	pop	r0
    1eaa:	0f 90       	pop	r0
    1eac:	0f 90       	pop	r0
    1eae:	cf 91       	pop	r28
    1eb0:	df 91       	pop	r29
    1eb2:	08 95       	ret

00001eb4 <_mutex_try_lock>:

bool_t _mutex_try_lock( mutex_t * mutex )
{
    1eb4:	df 93       	push	r29
    1eb6:	cf 93       	push	r28
    1eb8:	00 d0       	rcall	.+0      	; 0x1eba <_mutex_try_lock+0x6>
    1eba:	00 d0       	rcall	.+0      	; 0x1ebc <_mutex_try_lock+0x8>
    1ebc:	0f 92       	push	r0
    1ebe:	cd b7       	in	r28, 0x3d	; 61
    1ec0:	de b7       	in	r29, 0x3e	; 62
    1ec2:	9d 83       	std	Y+5, r25	; 0x05
    1ec4:	8c 83       	std	Y+4, r24	; 0x04
    bool_t ret;
    proc_t * proc;

    SPIN_LOCK( mutex );
    1ec6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ec8:	9d 81       	ldd	r25, Y+5	; 0x05
    1eca:	43 96       	adiw	r24, 0x13	; 19
    1ecc:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    ret = mutex->free;
    1ed0:	ec 81       	ldd	r30, Y+4	; 0x04
    1ed2:	fd 81       	ldd	r31, Y+5	; 0x05
    1ed4:	82 89       	ldd	r24, Z+18	; 0x12
    1ed6:	8b 83       	std	Y+3, r24	; 0x03
    proc = current_proc();
    1ed8:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <current_proc>
    1edc:	9a 83       	std	Y+2, r25	; 0x02
    1ede:	89 83       	std	Y+1, r24	; 0x01

    SPIN_LOCK( proc );
    1ee0:	89 81       	ldd	r24, Y+1	; 0x01
    1ee2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ee4:	83 96       	adiw	r24, 0x23	; 35
    1ee6:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    if( ret )
    1eea:	8b 81       	ldd	r24, Y+3	; 0x03
    1eec:	88 23       	and	r24, r24
    1eee:	79 f0       	breq	.+30     	; 0x1f0e <_mutex_try_lock+0x5a>
    {
        mutex->free = (bool_t)0;
    1ef0:	ec 81       	ldd	r30, Y+4	; 0x04
    1ef2:	fd 81       	ldd	r31, Y+5	; 0x05
    1ef4:	12 8a       	std	Z+18, r1	; 0x12
        PROC_LRES_INC( proc, GET_PRIO( mutex ) );
    1ef6:	ec 81       	ldd	r30, Y+4	; 0x04
    1ef8:	fd 81       	ldd	r31, Y+5	; 0x05
    1efa:	21 89       	ldd	r18, Z+17	; 0x11
    1efc:	89 81       	ldd	r24, Y+1	; 0x01
    1efe:	9a 81       	ldd	r25, Y+2	; 0x02
    1f00:	62 2f       	mov	r22, r18
    1f02:	0e 94 43 15 	call	0x2a86	; 0x2a86 <_proc_lres_inc>
        PROC_PRIO_CONTROL_RUNNING( proc );
    1f06:	89 81       	ldd	r24, Y+1	; 0x01
    1f08:	9a 81       	ldd	r25, Y+2	; 0x02
    1f0a:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <_proc_prio_control_running>
    }
    SPIN_UNLOCK( proc );
    1f0e:	89 81       	ldd	r24, Y+1	; 0x01
    1f10:	9a 81       	ldd	r25, Y+2	; 0x02
    1f12:	83 96       	adiw	r24, 0x23	; 35
    1f14:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
    SPIN_UNLOCK( mutex );
    1f18:	8c 81       	ldd	r24, Y+4	; 0x04
    1f1a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f1c:	43 96       	adiw	r24, 0x13	; 19
    1f1e:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
    return ret;
    1f22:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1f24:	0f 90       	pop	r0
    1f26:	0f 90       	pop	r0
    1f28:	0f 90       	pop	r0
    1f2a:	0f 90       	pop	r0
    1f2c:	0f 90       	pop	r0
    1f2e:	cf 91       	pop	r28
    1f30:	df 91       	pop	r29
    1f32:	08 95       	ret

00001f34 <_mutex_unlock>:

void _mutex_unlock( mutex_t *  mutex )
{
    1f34:	df 93       	push	r29
    1f36:	cf 93       	push	r28
    1f38:	00 d0       	rcall	.+0      	; 0x1f3a <_mutex_unlock+0x6>
    1f3a:	00 d0       	rcall	.+0      	; 0x1f3c <_mutex_unlock+0x8>
    1f3c:	cd b7       	in	r28, 0x3d	; 61
    1f3e:	de b7       	in	r29, 0x3e	; 62
    1f40:	9c 83       	std	Y+4, r25	; 0x04
    1f42:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc;

    SPIN_LOCK( mutex );
    1f44:	8b 81       	ldd	r24, Y+3	; 0x03
    1f46:	9c 81       	ldd	r25, Y+4	; 0x04
    1f48:	43 96       	adiw	r24, 0x13	; 19
    1f4a:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    proc = current_proc();
    1f4e:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <current_proc>
    1f52:	9a 83       	std	Y+2, r25	; 0x02
    1f54:	89 83       	std	Y+1, r24	; 0x01

    SPIN_LOCK(proc);
    1f56:	89 81       	ldd	r24, Y+1	; 0x01
    1f58:	9a 81       	ldd	r25, Y+2	; 0x02
    1f5a:	83 96       	adiw	r24, 0x23	; 35
    1f5c:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    PROC_LRES_DEC( proc, GET_PRIO( mutex ) );
    1f60:	eb 81       	ldd	r30, Y+3	; 0x03
    1f62:	fc 81       	ldd	r31, Y+4	; 0x04
    1f64:	21 89       	ldd	r18, Z+17	; 0x11
    1f66:	89 81       	ldd	r24, Y+1	; 0x01
    1f68:	9a 81       	ldd	r25, Y+2	; 0x02
    1f6a:	62 2f       	mov	r22, r18
    1f6c:	0e 94 66 15 	call	0x2acc	; 0x2acc <_proc_lres_dec>
    // Если проготовлен и готов к остановке - останавливаем
    if(  PROC_PRE_STOP_TEST(proc)  )
    1f70:	e9 81       	ldd	r30, Y+1	; 0x01
    1f72:	fa 81       	ldd	r31, Y+2	; 0x02
    1f74:	87 81       	ldd	r24, Z+7	; 0x07
    1f76:	90 85       	ldd	r25, Z+8	; 0x08
    1f78:	80 78       	andi	r24, 0x80	; 128
    1f7a:	90 70       	andi	r25, 0x00	; 0
    1f7c:	00 97       	sbiw	r24, 0x00	; 0
    1f7e:	f9 f0       	breq	.+62     	; 0x1fbe <_mutex_unlock+0x8a>
    1f80:	e9 81       	ldd	r30, Y+1	; 0x01
    1f82:	fa 81       	ldd	r31, Y+2	; 0x02
    1f84:	87 81       	ldd	r24, Z+7	; 0x07
    1f86:	90 85       	ldd	r25, Z+8	; 0x08
    1f88:	8c 70       	andi	r24, 0x0C	; 12
    1f8a:	90 70       	andi	r25, 0x00	; 0
    1f8c:	00 97       	sbiw	r24, 0x00	; 0
    1f8e:	b9 f4       	brne	.+46     	; 0x1fbe <_mutex_unlock+0x8a>
    {
        proc->flags &= ~PROC_FLG_PRE_STOP_MASK;
    1f90:	e9 81       	ldd	r30, Y+1	; 0x01
    1f92:	fa 81       	ldd	r31, Y+2	; 0x02
    1f94:	87 81       	ldd	r24, Z+7	; 0x07
    1f96:	90 85       	ldd	r25, Z+8	; 0x08
    1f98:	8d 77       	andi	r24, 0x7D	; 125
    1f9a:	e9 81       	ldd	r30, Y+1	; 0x01
    1f9c:	fa 81       	ldd	r31, Y+2	; 0x02
    1f9e:	90 87       	std	Z+8, r25	; 0x08
    1fa0:	87 83       	std	Z+7, r24	; 0x07
        _proc_stop_( proc );
    1fa2:	89 81       	ldd	r24, Y+1	; 0x01
    1fa4:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa6:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <_proc_stop_>
        PROC_PRIO_CONTROL_STOPED( proc );
    1faa:	89 81       	ldd	r24, Y+1	; 0x01
    1fac:	9a 81       	ldd	r25, Y+2	; 0x02
    1fae:	0e 94 89 15 	call	0x2b12	; 0x2b12 <_proc_prio_control_stoped>
        // Нужна перепланировка, процесс остановили и не запустили обратно
        RESCHED_PROC( proc );
    1fb2:	e9 81       	ldd	r30, Y+1	; 0x01
    1fb4:	fa 81       	ldd	r31, Y+2	; 0x02
    1fb6:	81 a1       	ldd	r24, Z+33	; 0x21
    1fb8:	0e 94 b4 01 	call	0x368	; 0x368 <resched>
    1fbc:	04 c0       	rjmp	.+8      	; 0x1fc6 <_mutex_unlock+0x92>
    }
    else
    {
        // Не останавливаем - меняем проиритет на ходу
        PROC_PRIO_CONTROL_RUNNING( proc );
    1fbe:	89 81       	ldd	r24, Y+1	; 0x01
    1fc0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc2:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <_proc_prio_control_running>
    }
    SPIN_UNLOCK( proc );
    1fc6:	89 81       	ldd	r24, Y+1	; 0x01
    1fc8:	9a 81       	ldd	r25, Y+2	; 0x02
    1fca:	83 96       	adiw	r24, 0x23	; 35
    1fcc:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
    // Обрабока самого мьютекса
    if( ((xlist_t *)mutex)->index == (index_t)0  )
    1fd0:	eb 81       	ldd	r30, Y+3	; 0x03
    1fd2:	fc 81       	ldd	r31, Y+4	; 0x04
    1fd4:	80 89       	ldd	r24, Z+16	; 0x10
    1fd6:	88 23       	and	r24, r24
    1fd8:	29 f4       	brne	.+10     	; 0x1fe4 <_mutex_unlock+0xb0>
    {
        // Список ожидающих пуст, выходим
        mutex->free = (bool_t)1;
    1fda:	eb 81       	ldd	r30, Y+3	; 0x03
    1fdc:	fc 81       	ldd	r31, Y+4	; 0x04
    1fde:	81 e0       	ldi	r24, 0x01	; 1
    1fe0:	82 8b       	std	Z+18, r24	; 0x12
    1fe2:	25 c0       	rjmp	.+74     	; 0x202e <_mutex_unlock+0xfa>
        goto end;
    }
    // Список ожидающих не пуст, запускаем голову
    proc = (proc_t *)xlist_head( (xlist_t *)mutex );
    1fe4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe8:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <xlist_head>
    1fec:	9a 83       	std	Y+2, r25	; 0x02
    1fee:	89 83       	std	Y+1, r24	; 0x01
    SPIN_LOCK( proc );
    1ff0:	89 81       	ldd	r24, Y+1	; 0x01
    1ff2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff4:	83 96       	adiw	r24, 0x23	; 35
    1ff6:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    // Сначала надо вырезать
    pitem_cut( (pitem_t *)proc );
    1ffa:	89 81       	ldd	r24, Y+1	; 0x01
    1ffc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ffe:	0e 94 a6 11 	call	0x234c	; 0x234c <pitem_cut>
    proc->flags &= ~PROC_FLG_QUEUE;
    2002:	e9 81       	ldd	r30, Y+1	; 0x01
    2004:	fa 81       	ldd	r31, Y+2	; 0x02
    2006:	87 81       	ldd	r24, Z+7	; 0x07
    2008:	90 85       	ldd	r25, Z+8	; 0x08
    200a:	8f 7e       	andi	r24, 0xEF	; 239
    200c:	e9 81       	ldd	r30, Y+1	; 0x01
    200e:	fa 81       	ldd	r31, Y+2	; 0x02
    2010:	90 87       	std	Z+8, r25	; 0x08
    2012:	87 83       	std	Z+7, r24	; 0x07
    // Управление приоритетом процесса
    PROC_PRIO_CONTROL_STOPED( proc );
    2014:	89 81       	ldd	r24, Y+1	; 0x01
    2016:	9a 81       	ldd	r25, Y+2	; 0x02
    2018:	0e 94 89 15 	call	0x2b12	; 0x2b12 <_proc_prio_control_stoped>
    _proc_run( proc );
    201c:	89 81       	ldd	r24, Y+1	; 0x01
    201e:	9a 81       	ldd	r25, Y+2	; 0x02
    2020:	0e 94 2b 13 	call	0x2656	; 0x2656 <_proc_run>
    SPIN_UNLOCK( proc );
    2024:	89 81       	ldd	r24, Y+1	; 0x01
    2026:	9a 81       	ldd	r25, Y+2	; 0x02
    2028:	83 96       	adiw	r24, 0x23	; 35
    202a:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
end:
    SPIN_UNLOCK( mutex );
    202e:	8b 81       	ldd	r24, Y+3	; 0x03
    2030:	9c 81       	ldd	r25, Y+4	; 0x04
    2032:	43 96       	adiw	r24, 0x13	; 19
    2034:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
}
    2038:	0f 90       	pop	r0
    203a:	0f 90       	pop	r0
    203c:	0f 90       	pop	r0
    203e:	0f 90       	pop	r0
    2040:	cf 91       	pop	r28
    2042:	df 91       	pop	r29
    2044:	08 95       	ret

00002046 <pcounter_init>:
*                           http://www.0chan.ru/r/res/9996.html                          *
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
void pcounter_init(pcounter_t * pcounter)
{
    2046:	df 93       	push	r29
    2048:	cf 93       	push	r28
    204a:	00 d0       	rcall	.+0      	; 0x204c <pcounter_init+0x6>
    204c:	0f 92       	push	r0
    204e:	cd b7       	in	r28, 0x3d	; 61
    2050:	de b7       	in	r29, 0x3e	; 62
    2052:	9b 83       	std	Y+3, r25	; 0x03
    2054:	8a 83       	std	Y+2, r24	; 0x02
    prio_t p;
    pcounter->index = (index_t)0;
    2056:	ea 81       	ldd	r30, Y+2	; 0x02
    2058:	fb 81       	ldd	r31, Y+3	; 0x03
    205a:	10 8a       	std	Z+16, r1	; 0x10
    for(p = 0; p < (index_t)BITS_IN_INDEX_T; p++)pcounter->counter[p] = (count_t)0;
    205c:	19 82       	std	Y+1, r1	; 0x01
    205e:	0f c0       	rjmp	.+30     	; 0x207e <pcounter_init+0x38>
    2060:	89 81       	ldd	r24, Y+1	; 0x01
    2062:	88 2f       	mov	r24, r24
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	2a 81       	ldd	r18, Y+2	; 0x02
    2068:	3b 81       	ldd	r19, Y+3	; 0x03
    206a:	88 0f       	add	r24, r24
    206c:	99 1f       	adc	r25, r25
    206e:	f9 01       	movw	r30, r18
    2070:	e8 0f       	add	r30, r24
    2072:	f9 1f       	adc	r31, r25
    2074:	11 82       	std	Z+1, r1	; 0x01
    2076:	10 82       	st	Z, r1
    2078:	89 81       	ldd	r24, Y+1	; 0x01
    207a:	8f 5f       	subi	r24, 0xFF	; 255
    207c:	89 83       	std	Y+1, r24	; 0x01
    207e:	89 81       	ldd	r24, Y+1	; 0x01
    2080:	88 30       	cpi	r24, 0x08	; 8
    2082:	70 f3       	brcs	.-36     	; 0x2060 <pcounter_init+0x1a>
}
    2084:	0f 90       	pop	r0
    2086:	0f 90       	pop	r0
    2088:	0f 90       	pop	r0
    208a:	cf 91       	pop	r28
    208c:	df 91       	pop	r29
    208e:	08 95       	ret

00002090 <pcounter_inc>:

void pcounter_inc(pcounter_t * pcounter, prio_t prio)
{
    2090:	df 93       	push	r29
    2092:	cf 93       	push	r28
    2094:	00 d0       	rcall	.+0      	; 0x2096 <pcounter_inc+0x6>
    2096:	0f 92       	push	r0
    2098:	cd b7       	in	r28, 0x3d	; 61
    209a:	de b7       	in	r29, 0x3e	; 62
    209c:	9a 83       	std	Y+2, r25	; 0x02
    209e:	89 83       	std	Y+1, r24	; 0x01
    20a0:	6b 83       	std	Y+3, r22	; 0x03
    pcounter->counter[prio]++;
    20a2:	8b 81       	ldd	r24, Y+3	; 0x03
    20a4:	68 2f       	mov	r22, r24
    20a6:	70 e0       	ldi	r23, 0x00	; 0
    20a8:	29 81       	ldd	r18, Y+1	; 0x01
    20aa:	3a 81       	ldd	r19, Y+2	; 0x02
    20ac:	cb 01       	movw	r24, r22
    20ae:	88 0f       	add	r24, r24
    20b0:	99 1f       	adc	r25, r25
    20b2:	f9 01       	movw	r30, r18
    20b4:	e8 0f       	add	r30, r24
    20b6:	f9 1f       	adc	r31, r25
    20b8:	80 81       	ld	r24, Z
    20ba:	91 81       	ldd	r25, Z+1	; 0x01
    20bc:	ac 01       	movw	r20, r24
    20be:	4f 5f       	subi	r20, 0xFF	; 255
    20c0:	5f 4f       	sbci	r21, 0xFF	; 255
    20c2:	29 81       	ldd	r18, Y+1	; 0x01
    20c4:	3a 81       	ldd	r19, Y+2	; 0x02
    20c6:	cb 01       	movw	r24, r22
    20c8:	88 0f       	add	r24, r24
    20ca:	99 1f       	adc	r25, r25
    20cc:	f9 01       	movw	r30, r18
    20ce:	e8 0f       	add	r30, r24
    20d0:	f9 1f       	adc	r31, r25
    20d2:	51 83       	std	Z+1, r21	; 0x01
    20d4:	40 83       	st	Z, r20
    pcounter->index |= ((index_t)1)<<prio;
    20d6:	e9 81       	ldd	r30, Y+1	; 0x01
    20d8:	fa 81       	ldd	r31, Y+2	; 0x02
    20da:	80 89       	ldd	r24, Z+16	; 0x10
    20dc:	48 2f       	mov	r20, r24
    20de:	8b 81       	ldd	r24, Y+3	; 0x03
    20e0:	28 2f       	mov	r18, r24
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	81 e0       	ldi	r24, 0x01	; 1
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	02 2e       	mov	r0, r18
    20ea:	02 c0       	rjmp	.+4      	; 0x20f0 <pcounter_inc+0x60>
    20ec:	88 0f       	add	r24, r24
    20ee:	99 1f       	adc	r25, r25
    20f0:	0a 94       	dec	r0
    20f2:	e2 f7       	brpl	.-8      	; 0x20ec <pcounter_inc+0x5c>
    20f4:	84 2b       	or	r24, r20
    20f6:	e9 81       	ldd	r30, Y+1	; 0x01
    20f8:	fa 81       	ldd	r31, Y+2	; 0x02
    20fa:	80 8b       	std	Z+16, r24	; 0x10
}
    20fc:	0f 90       	pop	r0
    20fe:	0f 90       	pop	r0
    2100:	0f 90       	pop	r0
    2102:	cf 91       	pop	r28
    2104:	df 91       	pop	r29
    2106:	08 95       	ret

00002108 <pcounter_dec>:

index_t pcounter_dec(pcounter_t * pcounter, prio_t prio)
{
    2108:	df 93       	push	r29
    210a:	cf 93       	push	r28
    210c:	00 d0       	rcall	.+0      	; 0x210e <pcounter_dec+0x6>
    210e:	00 d0       	rcall	.+0      	; 0x2110 <pcounter_dec+0x8>
    2110:	cd b7       	in	r28, 0x3d	; 61
    2112:	de b7       	in	r29, 0x3e	; 62
    2114:	9b 83       	std	Y+3, r25	; 0x03
    2116:	8a 83       	std	Y+2, r24	; 0x02
    2118:	6c 83       	std	Y+4, r22	; 0x04
    index_t mask;
    mask = ((index_t)1)<<prio;
    211a:	8c 81       	ldd	r24, Y+4	; 0x04
    211c:	28 2f       	mov	r18, r24
    211e:	30 e0       	ldi	r19, 0x00	; 0
    2120:	81 e0       	ldi	r24, 0x01	; 1
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	02 c0       	rjmp	.+4      	; 0x212a <pcounter_dec+0x22>
    2126:	88 0f       	add	r24, r24
    2128:	99 1f       	adc	r25, r25
    212a:	2a 95       	dec	r18
    212c:	e2 f7       	brpl	.-8      	; 0x2126 <pcounter_dec+0x1e>
    212e:	89 83       	std	Y+1, r24	; 0x01
    pcounter->counter[prio]--;
    2130:	8c 81       	ldd	r24, Y+4	; 0x04
    2132:	68 2f       	mov	r22, r24
    2134:	70 e0       	ldi	r23, 0x00	; 0
    2136:	2a 81       	ldd	r18, Y+2	; 0x02
    2138:	3b 81       	ldd	r19, Y+3	; 0x03
    213a:	cb 01       	movw	r24, r22
    213c:	88 0f       	add	r24, r24
    213e:	99 1f       	adc	r25, r25
    2140:	f9 01       	movw	r30, r18
    2142:	e8 0f       	add	r30, r24
    2144:	f9 1f       	adc	r31, r25
    2146:	80 81       	ld	r24, Z
    2148:	91 81       	ldd	r25, Z+1	; 0x01
    214a:	ac 01       	movw	r20, r24
    214c:	41 50       	subi	r20, 0x01	; 1
    214e:	50 40       	sbci	r21, 0x00	; 0
    2150:	2a 81       	ldd	r18, Y+2	; 0x02
    2152:	3b 81       	ldd	r19, Y+3	; 0x03
    2154:	cb 01       	movw	r24, r22
    2156:	88 0f       	add	r24, r24
    2158:	99 1f       	adc	r25, r25
    215a:	f9 01       	movw	r30, r18
    215c:	e8 0f       	add	r30, r24
    215e:	f9 1f       	adc	r31, r25
    2160:	51 83       	std	Z+1, r21	; 0x01
    2162:	40 83       	st	Z, r20
    if(pcounter->counter[prio] == (count_t)0)pcounter->index &= ~mask;
    2164:	8c 81       	ldd	r24, Y+4	; 0x04
    2166:	88 2f       	mov	r24, r24
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	2a 81       	ldd	r18, Y+2	; 0x02
    216c:	3b 81       	ldd	r19, Y+3	; 0x03
    216e:	88 0f       	add	r24, r24
    2170:	99 1f       	adc	r25, r25
    2172:	f9 01       	movw	r30, r18
    2174:	e8 0f       	add	r30, r24
    2176:	f9 1f       	adc	r31, r25
    2178:	80 81       	ld	r24, Z
    217a:	91 81       	ldd	r25, Z+1	; 0x01
    217c:	00 97       	sbiw	r24, 0x00	; 0
    217e:	51 f4       	brne	.+20     	; 0x2194 <pcounter_dec+0x8c>
    2180:	ea 81       	ldd	r30, Y+2	; 0x02
    2182:	fb 81       	ldd	r31, Y+3	; 0x03
    2184:	80 89       	ldd	r24, Z+16	; 0x10
    2186:	98 2f       	mov	r25, r24
    2188:	89 81       	ldd	r24, Y+1	; 0x01
    218a:	80 95       	com	r24
    218c:	89 23       	and	r24, r25
    218e:	ea 81       	ldd	r30, Y+2	; 0x02
    2190:	fb 81       	ldd	r31, Y+3	; 0x03
    2192:	80 8b       	std	Z+16, r24	; 0x10
    return pcounter->index & mask;
    2194:	ea 81       	ldd	r30, Y+2	; 0x02
    2196:	fb 81       	ldd	r31, Y+3	; 0x03
    2198:	90 89       	ldd	r25, Z+16	; 0x10
    219a:	89 81       	ldd	r24, Y+1	; 0x01
    219c:	89 23       	and	r24, r25
}
    219e:	0f 90       	pop	r0
    21a0:	0f 90       	pop	r0
    21a2:	0f 90       	pop	r0
    21a4:	0f 90       	pop	r0
    21a6:	cf 91       	pop	r28
    21a8:	df 91       	pop	r29
    21aa:	08 95       	ret

000021ac <pitem_init>:
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
// Инициация
void pitem_init( pitem_t * pitem, prio_t prio )
{
    21ac:	df 93       	push	r29
    21ae:	cf 93       	push	r28
    21b0:	00 d0       	rcall	.+0      	; 0x21b2 <pitem_init+0x6>
    21b2:	0f 92       	push	r0
    21b4:	cd b7       	in	r28, 0x3d	; 61
    21b6:	de b7       	in	r29, 0x3e	; 62
    21b8:	9a 83       	std	Y+2, r25	; 0x02
    21ba:	89 83       	std	Y+1, r24	; 0x01
    21bc:	6b 83       	std	Y+3, r22	; 0x03
    item_init( (item_t *)pitem );
    21be:	89 81       	ldd	r24, Y+1	; 0x01
    21c0:	9a 81       	ldd	r25, Y+2	; 0x02
    21c2:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <item_init>
    pitem->list = (xlist_t *)0;
    21c6:	e9 81       	ldd	r30, Y+1	; 0x01
    21c8:	fa 81       	ldd	r31, Y+2	; 0x02
    21ca:	15 82       	std	Z+5, r1	; 0x05
    21cc:	14 82       	std	Z+4, r1	; 0x04
    pitem->prio = prio;
    21ce:	e9 81       	ldd	r30, Y+1	; 0x01
    21d0:	fa 81       	ldd	r31, Y+2	; 0x02
    21d2:	8b 81       	ldd	r24, Y+3	; 0x03
    21d4:	86 83       	std	Z+6, r24	; 0x06
}
    21d6:	0f 90       	pop	r0
    21d8:	0f 90       	pop	r0
    21da:	0f 90       	pop	r0
    21dc:	cf 91       	pop	r28
    21de:	df 91       	pop	r29
    21e0:	08 95       	ret

000021e2 <pitem_insert>:
// Вставка в список
void pitem_insert( pitem_t * pitem, xlist_t * xlist )
{
    21e2:	df 93       	push	r29
    21e4:	cf 93       	push	r28
    21e6:	cd b7       	in	r28, 0x3d	; 61
    21e8:	de b7       	in	r29, 0x3e	; 62
    21ea:	28 97       	sbiw	r28, 0x08	; 8
    21ec:	0f b6       	in	r0, 0x3f	; 63
    21ee:	f8 94       	cli
    21f0:	de bf       	out	0x3e, r29	; 62
    21f2:	0f be       	out	0x3f, r0	; 63
    21f4:	cd bf       	out	0x3d, r28	; 61
    21f6:	9e 83       	std	Y+6, r25	; 0x06
    21f8:	8d 83       	std	Y+5, r24	; 0x05
    21fa:	78 87       	std	Y+8, r23	; 0x08
    21fc:	6f 83       	std	Y+7, r22	; 0x07
    prio_t prio;
    index_t mask;
    item_t ** head;

    prio = pitem->prio;
    21fe:	ed 81       	ldd	r30, Y+5	; 0x05
    2200:	fe 81       	ldd	r31, Y+6	; 0x06
    2202:	86 81       	ldd	r24, Z+6	; 0x06
    2204:	8c 83       	std	Y+4, r24	; 0x04
    mask = ((index_t)1)<<prio;
    2206:	8c 81       	ldd	r24, Y+4	; 0x04
    2208:	28 2f       	mov	r18, r24
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	81 e0       	ldi	r24, 0x01	; 1
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	02 c0       	rjmp	.+4      	; 0x2216 <pitem_insert+0x34>
    2212:	88 0f       	add	r24, r24
    2214:	99 1f       	adc	r25, r25
    2216:	2a 95       	dec	r18
    2218:	e2 f7       	brpl	.-8      	; 0x2212 <pitem_insert+0x30>
    221a:	8b 83       	std	Y+3, r24	; 0x03
    head = (item_t **)xlist + prio;
    221c:	2f 81       	ldd	r18, Y+7	; 0x07
    221e:	38 85       	ldd	r19, Y+8	; 0x08
    2220:	8c 81       	ldd	r24, Y+4	; 0x04
    2222:	88 2f       	mov	r24, r24
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	88 0f       	add	r24, r24
    2228:	99 1f       	adc	r25, r25
    222a:	82 0f       	add	r24, r18
    222c:	93 1f       	adc	r25, r19
    222e:	9a 83       	std	Y+2, r25	; 0x02
    2230:	89 83       	std	Y+1, r24	; 0x01
    // Пуста ли часть списка с таким приоритетом
    if( ( xlist->index )& mask)
    2232:	ef 81       	ldd	r30, Y+7	; 0x07
    2234:	f8 85       	ldd	r31, Y+8	; 0x08
    2236:	90 89       	ldd	r25, Z+16	; 0x10
    2238:	8b 81       	ldd	r24, Y+3	; 0x03
    223a:	89 23       	and	r24, r25
    223c:	88 23       	and	r24, r24
    223e:	51 f0       	breq	.+20     	; 0x2254 <pitem_insert+0x72>
    {
        //Не пуста вставляем туда gitem
        item_insert( (item_t *)pitem, *head );
    2240:	8d 81       	ldd	r24, Y+5	; 0x05
    2242:	9e 81       	ldd	r25, Y+6	; 0x06
    2244:	e9 81       	ldd	r30, Y+1	; 0x01
    2246:	fa 81       	ldd	r31, Y+2	; 0x02
    2248:	20 81       	ld	r18, Z
    224a:	31 81       	ldd	r19, Z+1	; 0x01
    224c:	b9 01       	movw	r22, r18
    224e:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <item_insert>
    2252:	0e c0       	rjmp	.+28     	; 0x2270 <pitem_insert+0x8e>
    }
    else
    {
        // Пуста, gitem будет головой
        *head = (item_t *)pitem;
    2254:	8d 81       	ldd	r24, Y+5	; 0x05
    2256:	9e 81       	ldd	r25, Y+6	; 0x06
    2258:	e9 81       	ldd	r30, Y+1	; 0x01
    225a:	fa 81       	ldd	r31, Y+2	; 0x02
    225c:	91 83       	std	Z+1, r25	; 0x01
    225e:	80 83       	st	Z, r24
        xlist->index |= mask;
    2260:	ef 81       	ldd	r30, Y+7	; 0x07
    2262:	f8 85       	ldd	r31, Y+8	; 0x08
    2264:	90 89       	ldd	r25, Z+16	; 0x10
    2266:	8b 81       	ldd	r24, Y+3	; 0x03
    2268:	89 2b       	or	r24, r25
    226a:	ef 81       	ldd	r30, Y+7	; 0x07
    226c:	f8 85       	ldd	r31, Y+8	; 0x08
    226e:	80 8b       	std	Z+16, r24	; 0x10
    }
    pitem->list = xlist;
    2270:	ed 81       	ldd	r30, Y+5	; 0x05
    2272:	fe 81       	ldd	r31, Y+6	; 0x06
    2274:	8f 81       	ldd	r24, Y+7	; 0x07
    2276:	98 85       	ldd	r25, Y+8	; 0x08
    2278:	95 83       	std	Z+5, r25	; 0x05
    227a:	84 83       	std	Z+4, r24	; 0x04
}
    227c:	28 96       	adiw	r28, 0x08	; 8
    227e:	0f b6       	in	r0, 0x3f	; 63
    2280:	f8 94       	cli
    2282:	de bf       	out	0x3e, r29	; 62
    2284:	0f be       	out	0x3f, r0	; 63
    2286:	cd bf       	out	0x3d, r28	; 61
    2288:	cf 91       	pop	r28
    228a:	df 91       	pop	r29
    228c:	08 95       	ret

0000228e <pitem_fast_cut>:
// Быстрая вырезка из списка
void pitem_fast_cut( pitem_t * pitem )
{
    228e:	df 93       	push	r29
    2290:	cf 93       	push	r28
    2292:	00 d0       	rcall	.+0      	; 0x2294 <pitem_fast_cut+0x6>
    2294:	00 d0       	rcall	.+0      	; 0x2296 <pitem_fast_cut+0x8>
    2296:	0f 92       	push	r0
    2298:	cd b7       	in	r28, 0x3d	; 61
    229a:	de b7       	in	r29, 0x3e	; 62
    229c:	9d 83       	std	Y+5, r25	; 0x05
    229e:	8c 83       	std	Y+4, r24	; 0x04
    prio_t prio;
    xlist_t * xlist;

    prio = pitem->prio;
    22a0:	ec 81       	ldd	r30, Y+4	; 0x04
    22a2:	fd 81       	ldd	r31, Y+5	; 0x05
    22a4:	86 81       	ldd	r24, Z+6	; 0x06
    22a6:	8b 83       	std	Y+3, r24	; 0x03
    xlist = (xlist_t *)pitem->list;
    22a8:	ec 81       	ldd	r30, Y+4	; 0x04
    22aa:	fd 81       	ldd	r31, Y+5	; 0x05
    22ac:	84 81       	ldd	r24, Z+4	; 0x04
    22ae:	95 81       	ldd	r25, Z+5	; 0x05
    22b0:	9a 83       	std	Y+2, r25	; 0x02
    22b2:	89 83       	std	Y+1, r24	; 0x01
    //Является ли элемент единственным в своей части списка?
    if( ((item_t *)pitem)->next == (item_t *)pitem )
    22b4:	ec 81       	ldd	r30, Y+4	; 0x04
    22b6:	fd 81       	ldd	r31, Y+5	; 0x05
    22b8:	20 81       	ld	r18, Z
    22ba:	31 81       	ldd	r19, Z+1	; 0x01
    22bc:	8c 81       	ldd	r24, Y+4	; 0x04
    22be:	9d 81       	ldd	r25, Y+5	; 0x05
    22c0:	28 17       	cp	r18, r24
    22c2:	39 07       	cpc	r19, r25
    22c4:	09 f5       	brne	.+66     	; 0x2308 <pitem_fast_cut+0x7a>
    {
        // Да, является!
        xlist->item[prio] = (item_t *)0;
    22c6:	8b 81       	ldd	r24, Y+3	; 0x03
    22c8:	88 2f       	mov	r24, r24
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	29 81       	ldd	r18, Y+1	; 0x01
    22ce:	3a 81       	ldd	r19, Y+2	; 0x02
    22d0:	88 0f       	add	r24, r24
    22d2:	99 1f       	adc	r25, r25
    22d4:	f9 01       	movw	r30, r18
    22d6:	e8 0f       	add	r30, r24
    22d8:	f9 1f       	adc	r31, r25
    22da:	11 82       	std	Z+1, r1	; 0x01
    22dc:	10 82       	st	Z, r1
        xlist->index &= ~(((index_t)1)<<prio);
    22de:	e9 81       	ldd	r30, Y+1	; 0x01
    22e0:	fa 81       	ldd	r31, Y+2	; 0x02
    22e2:	80 89       	ldd	r24, Z+16	; 0x10
    22e4:	48 2f       	mov	r20, r24
    22e6:	8b 81       	ldd	r24, Y+3	; 0x03
    22e8:	28 2f       	mov	r18, r24
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	81 e0       	ldi	r24, 0x01	; 1
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	02 2e       	mov	r0, r18
    22f2:	02 c0       	rjmp	.+4      	; 0x22f8 <pitem_fast_cut+0x6a>
    22f4:	88 0f       	add	r24, r24
    22f6:	99 1f       	adc	r25, r25
    22f8:	0a 94       	dec	r0
    22fa:	e2 f7       	brpl	.-8      	; 0x22f4 <pitem_fast_cut+0x66>
    22fc:	80 95       	com	r24
    22fe:	84 23       	and	r24, r20
    2300:	e9 81       	ldd	r30, Y+1	; 0x01
    2302:	fa 81       	ldd	r31, Y+2	; 0x02
    2304:	80 8b       	std	Z+16, r24	; 0x10
    2306:	1a c0       	rjmp	.+52     	; 0x233c <pitem_fast_cut+0xae>
    }
    else
    {
        // Нет, не является!
        // Является ли элемент головой своей части списка?
        if( xlist->item[(prio_t)prio] == (item_t *)pitem )
    2308:	8b 81       	ldd	r24, Y+3	; 0x03
    230a:	88 2f       	mov	r24, r24
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	29 81       	ldd	r18, Y+1	; 0x01
    2310:	3a 81       	ldd	r19, Y+2	; 0x02
    2312:	88 0f       	add	r24, r24
    2314:	99 1f       	adc	r25, r25
    2316:	f9 01       	movw	r30, r18
    2318:	e8 0f       	add	r30, r24
    231a:	f9 1f       	adc	r31, r25
    231c:	20 81       	ld	r18, Z
    231e:	31 81       	ldd	r19, Z+1	; 0x01
    2320:	8c 81       	ldd	r24, Y+4	; 0x04
    2322:	9d 81       	ldd	r25, Y+5	; 0x05
    2324:	28 17       	cp	r18, r24
    2326:	39 07       	cpc	r19, r25
    2328:	29 f4       	brne	.+10     	; 0x2334 <pitem_fast_cut+0xa6>
        {
            // Является, список надо переключить
            xlist_switch( xlist, prio );
    232a:	89 81       	ldd	r24, Y+1	; 0x01
    232c:	9a 81       	ldd	r25, Y+2	; 0x02
    232e:	6b 81       	ldd	r22, Y+3	; 0x03
    2330:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <xlist_switch>
        }
        // Собственно - вырезаем элемент
        item_cut( (item_t *)pitem );
    2334:	8c 81       	ldd	r24, Y+4	; 0x04
    2336:	9d 81       	ldd	r25, Y+5	; 0x05
    2338:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <item_cut>
    }
}
    233c:	0f 90       	pop	r0
    233e:	0f 90       	pop	r0
    2340:	0f 90       	pop	r0
    2342:	0f 90       	pop	r0
    2344:	0f 90       	pop	r0
    2346:	cf 91       	pop	r28
    2348:	df 91       	pop	r29
    234a:	08 95       	ret

0000234c <pitem_cut>:
// Вырезка из списка
void pitem_cut(pitem_t * pitem)
{
    234c:	df 93       	push	r29
    234e:	cf 93       	push	r28
    2350:	00 d0       	rcall	.+0      	; 0x2352 <pitem_cut+0x6>
    2352:	cd b7       	in	r28, 0x3d	; 61
    2354:	de b7       	in	r29, 0x3e	; 62
    2356:	9a 83       	std	Y+2, r25	; 0x02
    2358:	89 83       	std	Y+1, r24	; 0x01
    pitem_fast_cut( pitem );
    235a:	89 81       	ldd	r24, Y+1	; 0x01
    235c:	9a 81       	ldd	r25, Y+2	; 0x02
    235e:	0e 94 47 11 	call	0x228e	; 0x228e <pitem_fast_cut>
    pitem->list = (xlist_t *)0;
    2362:	e9 81       	ldd	r30, Y+1	; 0x01
    2364:	fa 81       	ldd	r31, Y+2	; 0x02
    2366:	15 82       	std	Z+5, r1	; 0x05
    2368:	14 82       	std	Z+4, r1	; 0x04
}
    236a:	0f 90       	pop	r0
    236c:	0f 90       	pop	r0
    236e:	cf 91       	pop	r28
    2370:	df 91       	pop	r29
    2372:	08 95       	ret

00002374 <pitem_xlist_chain>:

pitem_t * pitem_xlist_chain( xlist_t * src )
{
    2374:	df 93       	push	r29
    2376:	cf 93       	push	r28
    2378:	cd b7       	in	r28, 0x3d	; 61
    237a:	de b7       	in	r29, 0x3e	; 62
    237c:	2d 97       	sbiw	r28, 0x0d	; 13
    237e:	0f b6       	in	r0, 0x3f	; 63
    2380:	f8 94       	cli
    2382:	de bf       	out	0x3e, r29	; 62
    2384:	0f be       	out	0x3f, r0	; 63
    2386:	cd bf       	out	0x3d, r28	; 61
    2388:	9d 87       	std	Y+13, r25	; 0x0d
    238a:	8c 87       	std	Y+12, r24	; 0x0c
    pitem_t * ret;  // return value
    ret = (pitem_t *)xlist_head( src );     // will return former xlist head
    238c:	8c 85       	ldd	r24, Y+12	; 0x0c
    238e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2390:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <xlist_head>
    2394:	9b 87       	std	Y+11, r25	; 0x0b
    2396:	8a 87       	std	Y+10, r24	; 0x0a
    if(ret)
    2398:	8a 85       	ldd	r24, Y+10	; 0x0a
    239a:	9b 85       	ldd	r25, Y+11	; 0x0b
    239c:	00 97       	sbiw	r24, 0x00	; 0
    239e:	09 f4       	brne	.+2      	; 0x23a2 <pitem_xlist_chain+0x2e>
    23a0:	77 c0       	rjmp	.+238    	; 0x2490 <pitem_xlist_chain+0x11c>
                index;  // buffer for xlist index
        prio_t  prio;   // current working priority
        item_t * tail;  // current list tail;


        tail = ((item_t *)ret)->prev;           // current list tail initial value
    23a2:	ea 85       	ldd	r30, Y+10	; 0x0a
    23a4:	fb 85       	ldd	r31, Y+11	; 0x0b
    23a6:	82 81       	ldd	r24, Z+2	; 0x02
    23a8:	93 81       	ldd	r25, Z+3	; 0x03
    23aa:	9e 83       	std	Y+6, r25	; 0x06
    23ac:	8d 83       	std	Y+5, r24	; 0x05
        prio = ret->prio;                       // initial working prio
    23ae:	ea 85       	ldd	r30, Y+10	; 0x0a
    23b0:	fb 85       	ldd	r31, Y+11	; 0x0b
    23b2:	86 81       	ldd	r24, Z+6	; 0x06
    23b4:	8f 83       	std	Y+7, r24	; 0x07
        src->item[prio++] = (item_t *)0;        // cut all items from current xlist part
    23b6:	8f 81       	ldd	r24, Y+7	; 0x07
    23b8:	88 2f       	mov	r24, r24
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	2c 85       	ldd	r18, Y+12	; 0x0c
    23be:	3d 85       	ldd	r19, Y+13	; 0x0d
    23c0:	88 0f       	add	r24, r24
    23c2:	99 1f       	adc	r25, r25
    23c4:	f9 01       	movw	r30, r18
    23c6:	e8 0f       	add	r30, r24
    23c8:	f9 1f       	adc	r31, r25
    23ca:	11 82       	std	Z+1, r1	; 0x01
    23cc:	10 82       	st	Z, r1
    23ce:	8f 81       	ldd	r24, Y+7	; 0x07
    23d0:	8f 5f       	subi	r24, 0xFF	; 255
    23d2:	8f 83       	std	Y+7, r24	; 0x07
        index = src->index;                     // remember xlist index to improve performance
    23d4:	ec 85       	ldd	r30, Y+12	; 0x0c
    23d6:	fd 85       	ldd	r31, Y+13	; 0x0d
    23d8:	80 89       	ldd	r24, Z+16	; 0x10
    23da:	88 87       	std	Y+8, r24	; 0x08
        mask = ((index_t)1) << prio;            // initial mask value
    23dc:	8f 81       	ldd	r24, Y+7	; 0x07
    23de:	28 2f       	mov	r18, r24
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	81 e0       	ldi	r24, 0x01	; 1
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	02 2e       	mov	r0, r18
    23e8:	02 c0       	rjmp	.+4      	; 0x23ee <pitem_xlist_chain+0x7a>
    23ea:	88 0f       	add	r24, r24
    23ec:	99 1f       	adc	r25, r25
    23ee:	0a 94       	dec	r0
    23f0:	e2 f7       	brpl	.-8      	; 0x23ea <pitem_xlist_chain+0x76>
    23f2:	89 87       	std	Y+9, r24	; 0x09
    23f4:	3b c0       	rjmp	.+118    	; 0x246c <pitem_xlist_chain+0xf8>
        // cut all items from xlist and form an ordinary list of them
        while(mask)
        {
            if( index & mask )
    23f6:	88 85       	ldd	r24, Y+8	; 0x08
    23f8:	99 85       	ldd	r25, Y+9	; 0x09
    23fa:	89 23       	and	r24, r25
    23fc:	88 23       	and	r24, r24
    23fe:	81 f1       	breq	.+96     	; 0x2460 <pitem_xlist_chain+0xec>
            {
                // current part of xlist has some items to cut
                item_t * xhead;
                item_t * buf;
                xhead = src->item[prio];                    // current xlist head;
    2400:	8f 81       	ldd	r24, Y+7	; 0x07
    2402:	88 2f       	mov	r24, r24
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	2c 85       	ldd	r18, Y+12	; 0x0c
    2408:	3d 85       	ldd	r19, Y+13	; 0x0d
    240a:	88 0f       	add	r24, r24
    240c:	99 1f       	adc	r25, r25
    240e:	f9 01       	movw	r30, r18
    2410:	e8 0f       	add	r30, r24
    2412:	f9 1f       	adc	r31, r25
    2414:	80 81       	ld	r24, Z
    2416:	91 81       	ldd	r25, Z+1	; 0x01
    2418:	9c 83       	std	Y+4, r25	; 0x04
    241a:	8b 83       	std	Y+3, r24	; 0x03
                src->item[prio] = (item_t *)0;              // cut all items from current xlist part
    241c:	8f 81       	ldd	r24, Y+7	; 0x07
    241e:	88 2f       	mov	r24, r24
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	2c 85       	ldd	r18, Y+12	; 0x0c
    2424:	3d 85       	ldd	r19, Y+13	; 0x0d
    2426:	88 0f       	add	r24, r24
    2428:	99 1f       	adc	r25, r25
    242a:	f9 01       	movw	r30, r18
    242c:	e8 0f       	add	r30, r24
    242e:	f9 1f       	adc	r31, r25
    2430:	11 82       	std	Z+1, r1	; 0x01
    2432:	10 82       	st	Z, r1
                // chain former xlist head to a list tail
                tail->next = xhead;
    2434:	ed 81       	ldd	r30, Y+5	; 0x05
    2436:	fe 81       	ldd	r31, Y+6	; 0x06
    2438:	8b 81       	ldd	r24, Y+3	; 0x03
    243a:	9c 81       	ldd	r25, Y+4	; 0x04
    243c:	91 83       	std	Z+1, r25	; 0x01
    243e:	80 83       	st	Z, r24
                buf = xhead->prev;
    2440:	eb 81       	ldd	r30, Y+3	; 0x03
    2442:	fc 81       	ldd	r31, Y+4	; 0x04
    2444:	82 81       	ldd	r24, Z+2	; 0x02
    2446:	93 81       	ldd	r25, Z+3	; 0x03
    2448:	9a 83       	std	Y+2, r25	; 0x02
    244a:	89 83       	std	Y+1, r24	; 0x01
                xhead->prev = tail;
    244c:	eb 81       	ldd	r30, Y+3	; 0x03
    244e:	fc 81       	ldd	r31, Y+4	; 0x04
    2450:	8d 81       	ldd	r24, Y+5	; 0x05
    2452:	9e 81       	ldd	r25, Y+6	; 0x06
    2454:	93 83       	std	Z+3, r25	; 0x03
    2456:	82 83       	std	Z+2, r24	; 0x02
                tail = buf;
    2458:	89 81       	ldd	r24, Y+1	; 0x01
    245a:	9a 81       	ldd	r25, Y+2	; 0x02
    245c:	9e 83       	std	Y+6, r25	; 0x06
    245e:	8d 83       	std	Y+5, r24	; 0x05
            }
            mask <<= (prio_t)1;
    2460:	89 85       	ldd	r24, Y+9	; 0x09
    2462:	88 0f       	add	r24, r24
    2464:	89 87       	std	Y+9, r24	; 0x09
            prio++;
    2466:	8f 81       	ldd	r24, Y+7	; 0x07
    2468:	8f 5f       	subi	r24, 0xFF	; 255
    246a:	8f 83       	std	Y+7, r24	; 0x07
        prio = ret->prio;                       // initial working prio
        src->item[prio++] = (item_t *)0;        // cut all items from current xlist part
        index = src->index;                     // remember xlist index to improve performance
        mask = ((index_t)1) << prio;            // initial mask value
        // cut all items from xlist and form an ordinary list of them
        while(mask)
    246c:	89 85       	ldd	r24, Y+9	; 0x09
    246e:	88 23       	and	r24, r24
    2470:	11 f6       	brne	.-124    	; 0x23f6 <pitem_xlist_chain+0x82>
            }
            mask <<= (prio_t)1;
            prio++;
        }
        // complete the list by chaining tail and head
        ((item_t *)ret)->prev = tail;
    2472:	ea 85       	ldd	r30, Y+10	; 0x0a
    2474:	fb 85       	ldd	r31, Y+11	; 0x0b
    2476:	8d 81       	ldd	r24, Y+5	; 0x05
    2478:	9e 81       	ldd	r25, Y+6	; 0x06
    247a:	93 83       	std	Z+3, r25	; 0x03
    247c:	82 83       	std	Z+2, r24	; 0x02
        tail->next = (item_t *)ret;
    247e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2480:	9b 85       	ldd	r25, Y+11	; 0x0b
    2482:	ed 81       	ldd	r30, Y+5	; 0x05
    2484:	fe 81       	ldd	r31, Y+6	; 0x06
    2486:	91 83       	std	Z+1, r25	; 0x01
    2488:	80 83       	st	Z, r24
        src->index = (index_t)0;        // xlist is empty.
    248a:	ec 85       	ldd	r30, Y+12	; 0x0c
    248c:	fd 85       	ldd	r31, Y+13	; 0x0d
    248e:	10 8a       	std	Z+16, r1	; 0x10
    }
    return ret;                     // return list head;
    2490:	8a 85       	ldd	r24, Y+10	; 0x0a
    2492:	9b 85       	ldd	r25, Y+11	; 0x0b
}
    2494:	2d 96       	adiw	r28, 0x0d	; 13
    2496:	0f b6       	in	r0, 0x3f	; 63
    2498:	f8 94       	cli
    249a:	de bf       	out	0x3e, r29	; 62
    249c:	0f be       	out	0x3f, r0	; 63
    249e:	cd bf       	out	0x3d, r28	; 61
    24a0:	cf 91       	pop	r28
    24a2:	df 91       	pop	r29
    24a4:	08 95       	ret

000024a6 <proc_init_isr>:
    bool_t is_rt // если true, значит процесс будет иметть поведение RT
#ifdef CONFIG_MP
    ,affinity_t affinity
#endif // CONFIG_MP
)
{
    24a6:	8f 92       	push	r8
    24a8:	af 92       	push	r10
    24aa:	bf 92       	push	r11
    24ac:	cf 92       	push	r12
    24ae:	ef 92       	push	r14
    24b0:	ff 92       	push	r15
    24b2:	0f 93       	push	r16
    24b4:	1f 93       	push	r17
    24b6:	df 93       	push	r29
    24b8:	cf 93       	push	r28
    24ba:	cd b7       	in	r28, 0x3d	; 61
    24bc:	de b7       	in	r29, 0x3e	; 62
    24be:	62 97       	sbiw	r28, 0x12	; 18
    24c0:	0f b6       	in	r0, 0x3f	; 63
    24c2:	f8 94       	cli
    24c4:	de bf       	out	0x3e, r29	; 62
    24c6:	0f be       	out	0x3f, r0	; 63
    24c8:	cd bf       	out	0x3d, r28	; 61
    24ca:	9a 83       	std	Y+2, r25	; 0x02
    24cc:	89 83       	std	Y+1, r24	; 0x01
    24ce:	7c 83       	std	Y+4, r23	; 0x04
    24d0:	6b 83       	std	Y+3, r22	; 0x03
    24d2:	5e 83       	std	Y+6, r21	; 0x06
    24d4:	4d 83       	std	Y+5, r20	; 0x05
    24d6:	38 87       	std	Y+8, r19	; 0x08
    24d8:	2f 83       	std	Y+7, r18	; 0x07
    24da:	1a 87       	std	Y+10, r17	; 0x0a
    24dc:	09 87       	std	Y+9, r16	; 0x09
    24de:	fc 86       	std	Y+12, r15	; 0x0c
    24e0:	eb 86       	std	Y+11, r14	; 0x0b
    24e2:	cd 86       	std	Y+13, r12	; 0x0d
    24e4:	bf 86       	std	Y+15, r11	; 0x0f
    24e6:	ae 86       	std	Y+14, r10	; 0x0e
    24e8:	88 8a       	std	Y+16, r8	; 0x10
    SPIN_INIT( proc );
    24ea:	89 81       	ldd	r24, Y+1	; 0x01
    24ec:	9a 81       	ldd	r25, Y+2	; 0x02
    24ee:	83 96       	adiw	r24, 0x23	; 35
    24f0:	0e 94 0b 01 	call	0x216	; 0x216 <spin_init>
    SPIN_LOCK( proc );
    24f4:	89 81       	ldd	r24, Y+1	; 0x01
    24f6:	9a 81       	ldd	r25, Y+2	; 0x02
    24f8:	83 96       	adiw	r24, 0x23	; 35
    24fa:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>

    pitem_init( (pitem_t *)proc, prio );
    24fe:	89 81       	ldd	r24, Y+1	; 0x01
    2500:	9a 81       	ldd	r25, Y+2	; 0x02
    2502:	6d 85       	ldd	r22, Y+13	; 0x0d
    2504:	0e 94 d6 10 	call	0x21ac	; 0x21ac <pitem_init>
    proc->flags = ( is_rt )?PROC_FLG_RT:(flag_t)0;
    2508:	88 89       	ldd	r24, Y+16	; 0x10
    250a:	88 23       	and	r24, r24
    250c:	29 f0       	breq	.+10     	; 0x2518 <proc_init_isr+0x72>
    250e:	81 e0       	ldi	r24, 0x01	; 1
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	9a 8b       	std	Y+18, r25	; 0x12
    2514:	89 8b       	std	Y+17, r24	; 0x11
    2516:	02 c0       	rjmp	.+4      	; 0x251c <proc_init_isr+0x76>
    2518:	1a 8a       	std	Y+18, r1	; 0x12
    251a:	19 8a       	std	Y+17, r1	; 0x11
    251c:	e9 81       	ldd	r30, Y+1	; 0x01
    251e:	fa 81       	ldd	r31, Y+2	; 0x02
    2520:	89 89       	ldd	r24, Y+17	; 0x11
    2522:	9a 89       	ldd	r25, Y+18	; 0x12
    2524:	90 87       	std	Z+8, r25	; 0x08
    2526:	87 83       	std	Z+7, r24	; 0x07

    PROC_LRES_INIT( proc );
    2528:	89 81       	ldd	r24, Y+1	; 0x01
    252a:	9a 81       	ldd	r25, Y+2	; 0x02
    252c:	0a 96       	adiw	r24, 0x0a	; 10
    252e:	0e 94 23 10 	call	0x2046	; 0x2046 <pcounter_init>
#ifdef CONFIG_USE_HIGHEST_LOCKER
    proc->base_prio = prio;
    2532:	e9 81       	ldd	r30, Y+1	; 0x01
    2534:	fa 81       	ldd	r31, Y+2	; 0x02
    2536:	8d 85       	ldd	r24, Y+13	; 0x0d
    2538:	81 87       	std	Z+9, r24	; 0x09
#endif
    proc->time_quant = time_quant;
    253a:	8e 85       	ldd	r24, Y+14	; 0x0e
    253c:	9f 85       	ldd	r25, Y+15	; 0x0f
    253e:	e9 81       	ldd	r30, Y+1	; 0x01
    2540:	fa 81       	ldd	r31, Y+2	; 0x02
    2542:	94 8f       	std	Z+28, r25	; 0x1c
    2544:	83 8f       	std	Z+27, r24	; 0x1b
    proc->timer = time_quant;
    2546:	8e 85       	ldd	r24, Y+14	; 0x0e
    2548:	9f 85       	ldd	r25, Y+15	; 0x0f
    254a:	e9 81       	ldd	r30, Y+1	; 0x01
    254c:	fa 81       	ldd	r31, Y+2	; 0x02
    254e:	96 8f       	std	Z+30, r25	; 0x1e
    2550:	85 8f       	std	Z+29, r24	; 0x1d
#ifdef CONFIG_MP
    proc->core_id = (core_id_t)0;
    2552:	e9 81       	ldd	r30, Y+1	; 0x01
    2554:	fa 81       	ldd	r31, Y+2	; 0x02
    2556:	11 a2       	std	Z+33, r1	; 0x21
    proc->affinity = affinity;
    2558:	e9 81       	ldd	r30, Y+1	; 0x01
    255a:	fa 81       	ldd	r31, Y+2	; 0x02
    255c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    255e:	82 a3       	std	Z+34, r24	; 0x22
#endif // CONFIG_MP
    proc->pmain = pmain;
    2560:	e9 81       	ldd	r30, Y+1	; 0x01
    2562:	fa 81       	ldd	r31, Y+2	; 0x02
    2564:	8b 81       	ldd	r24, Y+3	; 0x03
    2566:	9c 81       	ldd	r25, Y+4	; 0x04
    2568:	95 a3       	std	Z+37, r25	; 0x25
    256a:	84 a3       	std	Z+36, r24	; 0x24
    proc->sv_hook = sv_hook;
    256c:	e9 81       	ldd	r30, Y+1	; 0x01
    256e:	fa 81       	ldd	r31, Y+2	; 0x02
    2570:	8d 81       	ldd	r24, Y+5	; 0x05
    2572:	9e 81       	ldd	r25, Y+6	; 0x06
    2574:	97 a3       	std	Z+39, r25	; 0x27
    2576:	86 a3       	std	Z+38, r24	; 0x26
    proc->rs_hook = rs_hook;
    2578:	e9 81       	ldd	r30, Y+1	; 0x01
    257a:	fa 81       	ldd	r31, Y+2	; 0x02
    257c:	8f 81       	ldd	r24, Y+7	; 0x07
    257e:	98 85       	ldd	r25, Y+8	; 0x08
    2580:	91 a7       	std	Z+41, r25	; 0x29
    2582:	80 a7       	std	Z+40, r24	; 0x28
    proc->arg = arg;
    2584:	e9 81       	ldd	r30, Y+1	; 0x01
    2586:	fa 81       	ldd	r31, Y+2	; 0x02
    2588:	89 85       	ldd	r24, Y+9	; 0x09
    258a:	9a 85       	ldd	r25, Y+10	; 0x0a
    258c:	93 a7       	std	Z+43, r25	; 0x2b
    258e:	82 a7       	std	Z+42, r24	; 0x2a
    proc->sstart = sstart;
    2590:	e9 81       	ldd	r30, Y+1	; 0x01
    2592:	fa 81       	ldd	r31, Y+2	; 0x02
    2594:	8b 85       	ldd	r24, Y+11	; 0x0b
    2596:	9c 85       	ldd	r25, Y+12	; 0x0c
    2598:	95 a7       	std	Z+45, r25	; 0x2d
    259a:	84 a7       	std	Z+44, r24	; 0x2c
    if( sstart )proc->spointer = proc_stack_init(sstart, (code_t)proc_run_wrapper, (void *)proc);
    259c:	8b 85       	ldd	r24, Y+11	; 0x0b
    259e:	9c 85       	ldd	r25, Y+12	; 0x0c
    25a0:	00 97       	sbiw	r24, 0x00	; 0
    25a2:	71 f0       	breq	.+28     	; 0x25c0 <proc_init_isr+0x11a>
    25a4:	4b e0       	ldi	r20, 0x0B	; 11
    25a6:	5d e1       	ldi	r21, 0x1D	; 29
    25a8:	8b 85       	ldd	r24, Y+11	; 0x0b
    25aa:	9c 85       	ldd	r25, Y+12	; 0x0c
    25ac:	29 81       	ldd	r18, Y+1	; 0x01
    25ae:	3a 81       	ldd	r19, Y+2	; 0x02
    25b0:	ba 01       	movw	r22, r20
    25b2:	a9 01       	movw	r20, r18
    25b4:	0e 94 16 0b 	call	0x162c	; 0x162c <proc_stack_init>
    25b8:	e9 81       	ldd	r30, Y+1	; 0x01
    25ba:	fa 81       	ldd	r31, Y+2	; 0x02
    25bc:	97 a7       	std	Z+47, r25	; 0x2f
    25be:	86 a7       	std	Z+46, r24	; 0x2e

    SPIN_UNLOCK( proc );
    25c0:	89 81       	ldd	r24, Y+1	; 0x01
    25c2:	9a 81       	ldd	r25, Y+2	; 0x02
    25c4:	83 96       	adiw	r24, 0x23	; 35
    25c6:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
}
    25ca:	62 96       	adiw	r28, 0x12	; 18
    25cc:	0f b6       	in	r0, 0x3f	; 63
    25ce:	f8 94       	cli
    25d0:	de bf       	out	0x3e, r29	; 62
    25d2:	0f be       	out	0x3f, r0	; 63
    25d4:	cd bf       	out	0x3d, r28	; 61
    25d6:	cf 91       	pop	r28
    25d8:	df 91       	pop	r29
    25da:	1f 91       	pop	r17
    25dc:	0f 91       	pop	r16
    25de:	ff 90       	pop	r15
    25e0:	ef 90       	pop	r14
    25e2:	cf 90       	pop	r12
    25e4:	bf 90       	pop	r11
    25e6:	af 90       	pop	r10
    25e8:	8f 90       	pop	r8
    25ea:	08 95       	ret

000025ec <_proc_run_>:
//  Функция для внутреннего использования - собственно запуск процесса
#ifdef CONFIG_MP
void _proc_run_( proc_t * proc )
{
    25ec:	df 93       	push	r29
    25ee:	cf 93       	push	r28
    25f0:	00 d0       	rcall	.+0      	; 0x25f2 <_proc_run_+0x6>
    25f2:	00 d0       	rcall	.+0      	; 0x25f4 <_proc_run_+0x8>
    25f4:	cd b7       	in	r28, 0x3d	; 61
    25f6:	de b7       	in	r29, 0x3e	; 62
    25f8:	9c 83       	std	Y+4, r25	; 0x04
    25fa:	8b 83       	std	Y+3, r24	; 0x03
    sched_t * proc_sched;
    proc_sched = (sched_t *)kernel.sched + proc->core_id;
    25fc:	eb 81       	ldd	r30, Y+3	; 0x03
    25fe:	fc 81       	ldd	r31, Y+4	; 0x04
    2600:	81 a1       	ldd	r24, Z+33	; 0x21
    2602:	28 2f       	mov	r18, r24
    2604:	30 e0       	ldi	r19, 0x00	; 0
    2606:	8b e2       	ldi	r24, 0x2B	; 43
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	ac 01       	movw	r20, r24
    260c:	24 9f       	mul	r18, r20
    260e:	c0 01       	movw	r24, r0
    2610:	25 9f       	mul	r18, r21
    2612:	90 0d       	add	r25, r0
    2614:	34 9f       	mul	r19, r20
    2616:	90 0d       	add	r25, r0
    2618:	11 24       	eor	r1, r1
    261a:	85 52       	subi	r24, 0x25	; 37
    261c:	9d 4f       	sbci	r25, 0xFD	; 253
    261e:	9a 83       	std	Y+2, r25	; 0x02
    2620:	89 83       	std	Y+1, r24	; 0x01
    SPIN_LOCK( proc_sched );
    2622:	89 81       	ldd	r24, Y+1	; 0x01
    2624:	9a 81       	ldd	r25, Y+2	; 0x02
    2626:	8a 96       	adiw	r24, 0x2a	; 42
    2628:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    pitem_insert( (pitem_t *)proc, proc_sched->ready );
    262c:	8b 81       	ldd	r24, Y+3	; 0x03
    262e:	9c 81       	ldd	r25, Y+4	; 0x04
    2630:	e9 81       	ldd	r30, Y+1	; 0x01
    2632:	fa 81       	ldd	r31, Y+2	; 0x02
    2634:	22 81       	ldd	r18, Z+2	; 0x02
    2636:	33 81       	ldd	r19, Z+3	; 0x03
    2638:	b9 01       	movw	r22, r18
    263a:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <pitem_insert>
    SPIN_UNLOCK( proc_sched );
    263e:	89 81       	ldd	r24, Y+1	; 0x01
    2640:	9a 81       	ldd	r25, Y+2	; 0x02
    2642:	8a 96       	adiw	r24, 0x2a	; 42
    2644:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
}
    2648:	0f 90       	pop	r0
    264a:	0f 90       	pop	r0
    264c:	0f 90       	pop	r0
    264e:	0f 90       	pop	r0
    2650:	cf 91       	pop	r28
    2652:	df 91       	pop	r29
    2654:	08 95       	ret

00002656 <_proc_run>:
#endif // CONFIG_MP

void _proc_run( proc_t * proc )
{
    2656:	df 93       	push	r29
    2658:	cf 93       	push	r28
    265a:	00 d0       	rcall	.+0      	; 0x265c <_proc_run+0x6>
    265c:	cd b7       	in	r28, 0x3d	; 61
    265e:	de b7       	in	r29, 0x3e	; 62
    2660:	9a 83       	std	Y+2, r25	; 0x02
    2662:	89 83       	std	Y+1, r24	; 0x01
    proc->flags |= PROC_FLG_RUN;
    2664:	e9 81       	ldd	r30, Y+1	; 0x01
    2666:	fa 81       	ldd	r31, Y+2	; 0x02
    2668:	87 81       	ldd	r24, Z+7	; 0x07
    266a:	90 85       	ldd	r25, Z+8	; 0x08
    266c:	82 60       	ori	r24, 0x02	; 2
    266e:	e9 81       	ldd	r30, Y+1	; 0x01
    2670:	fa 81       	ldd	r31, Y+2	; 0x02
    2672:	90 87       	std	Z+8, r25	; 0x08
    2674:	87 83       	std	Z+7, r24	; 0x07
#ifdef CONFIG_MP
    spin_lock( &kernel.stat_lock );
    2676:	83 e9       	ldi	r24, 0x93	; 147
    2678:	93 e0       	ldi	r25, 0x03	; 3
    267a:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    proc->core_id = sched_load_balancer( proc, (stat_t *)kernel.stat );
    267e:	89 81       	ldd	r24, Y+1	; 0x01
    2680:	9a 81       	ldd	r25, Y+2	; 0x02
    2682:	21 e9       	ldi	r18, 0x91	; 145
    2684:	33 e0       	ldi	r19, 0x03	; 3
    2686:	b9 01       	movw	r22, r18
    2688:	0e 94 22 16 	call	0x2c44	; 0x2c44 <sched_load_balancer>
    268c:	e9 81       	ldd	r30, Y+1	; 0x01
    268e:	fa 81       	ldd	r31, Y+2	; 0x02
    2690:	81 a3       	std	Z+33, r24	; 0x21
    stat_inc( proc, (stat_t *)kernel.stat+proc->core_id );
    2692:	e9 81       	ldd	r30, Y+1	; 0x01
    2694:	fa 81       	ldd	r31, Y+2	; 0x02
    2696:	81 a1       	ldd	r24, Z+33	; 0x21
    2698:	88 2f       	mov	r24, r24
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	9c 01       	movw	r18, r24
    269e:	2f 56       	subi	r18, 0x6F	; 111
    26a0:	3c 4f       	sbci	r19, 0xFC	; 252
    26a2:	89 81       	ldd	r24, Y+1	; 0x01
    26a4:	9a 81       	ldd	r25, Y+2	; 0x02
    26a6:	b9 01       	movw	r22, r18
    26a8:	0e 94 6e 01 	call	0x2dc	; 0x2dc <stat_inc>
    spin_unlock( &kernel.stat_lock );
    26ac:	83 e9       	ldi	r24, 0x93	; 147
    26ae:	93 e0       	ldi	r25, 0x03	; 3
    26b0:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
#endif
    _proc_run_( proc );
    26b4:	89 81       	ldd	r24, Y+1	; 0x01
    26b6:	9a 81       	ldd	r25, Y+2	; 0x02
    26b8:	0e 94 f6 12 	call	0x25ec	; 0x25ec <_proc_run_>

    RESCHED_PROC( proc );
    26bc:	e9 81       	ldd	r30, Y+1	; 0x01
    26be:	fa 81       	ldd	r31, Y+2	; 0x02
    26c0:	81 a1       	ldd	r24, Z+33	; 0x21
    26c2:	0e 94 b4 01 	call	0x368	; 0x368 <resched>
}
    26c6:	0f 90       	pop	r0
    26c8:	0f 90       	pop	r0
    26ca:	cf 91       	pop	r28
    26cc:	df 91       	pop	r29
    26ce:	08 95       	ret

000026d0 <proc_run_isr>:
// Функция общего пользования - запуск процесса из обработчика прерывания, прерывания должны быть запрещены во время запуска
bool_t proc_run_isr(proc_t * proc)
{
    26d0:	df 93       	push	r29
    26d2:	cf 93       	push	r28
    26d4:	00 d0       	rcall	.+0      	; 0x26d6 <proc_run_isr+0x6>
    26d6:	0f 92       	push	r0
    26d8:	cd b7       	in	r28, 0x3d	; 61
    26da:	de b7       	in	r29, 0x3e	; 62
    26dc:	9b 83       	std	Y+3, r25	; 0x03
    26de:	8a 83       	std	Y+2, r24	; 0x02
    bool_t ret = (bool_t)1;
    26e0:	81 e0       	ldi	r24, 0x01	; 1
    26e2:	89 83       	std	Y+1, r24	; 0x01

    SPIN_LOCK( proc );
    26e4:	8a 81       	ldd	r24, Y+2	; 0x02
    26e6:	9b 81       	ldd	r25, Y+3	; 0x03
    26e8:	83 96       	adiw	r24, 0x23	; 35
    26ea:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>

    if( proc->flags & (PROC_FLG_RUN|PROC_FLG_QUEUE|PROC_FLG_WAIT|PROC_FLG_IPCW|PROC_FLG_END|PROC_FLG_DEAD|PROC_FLG_WD_STOP) )
    26ee:	ea 81       	ldd	r30, Y+2	; 0x02
    26f0:	fb 81       	ldd	r31, Y+3	; 0x03
    26f2:	87 81       	ldd	r24, Z+7	; 0x07
    26f4:	90 85       	ldd	r25, Z+8	; 0x08
    26f6:	82 77       	andi	r24, 0x72	; 114
    26f8:	97 70       	andi	r25, 0x07	; 7
    26fa:	00 97       	sbiw	r24, 0x00	; 0
    26fc:	11 f0       	breq	.+4      	; 0x2702 <proc_run_isr+0x32>
    {
        ret = (bool_t)0;
    26fe:	19 82       	std	Y+1, r1	; 0x01
    2700:	04 c0       	rjmp	.+8      	; 0x270a <proc_run_isr+0x3a>
        goto end;
    }
    _proc_run( proc );
    2702:	8a 81       	ldd	r24, Y+2	; 0x02
    2704:	9b 81       	ldd	r25, Y+3	; 0x03
    2706:	0e 94 2b 13 	call	0x2656	; 0x2656 <_proc_run>
end:

    SPIN_UNLOCK( proc );
    270a:	8a 81       	ldd	r24, Y+2	; 0x02
    270c:	9b 81       	ldd	r25, Y+3	; 0x03
    270e:	83 96       	adiw	r24, 0x23	; 35
    2710:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>

    return ret;
    2714:	89 81       	ldd	r24, Y+1	; 0x01
}
    2716:	0f 90       	pop	r0
    2718:	0f 90       	pop	r0
    271a:	0f 90       	pop	r0
    271c:	cf 91       	pop	r28
    271e:	df 91       	pop	r29
    2720:	08 95       	ret

00002722 <proc_restart_isr>:
// Перезепуск процесса из обработчика прерываний, прерывания должны быть запрещены
bool_t proc_restart_isr(proc_t * proc)
{
    2722:	df 93       	push	r29
    2724:	cf 93       	push	r28
    2726:	00 d0       	rcall	.+0      	; 0x2728 <proc_restart_isr+0x6>
    2728:	00 d0       	rcall	.+0      	; 0x272a <proc_restart_isr+0x8>
    272a:	0f 92       	push	r0
    272c:	cd b7       	in	r28, 0x3d	; 61
    272e:	de b7       	in	r29, 0x3e	; 62
    2730:	9b 83       	std	Y+3, r25	; 0x03
    2732:	8a 83       	std	Y+2, r24	; 0x02
    bool_t ret = (bool_t)1;
    2734:	81 e0       	ldi	r24, 0x01	; 1
    2736:	89 83       	std	Y+1, r24	; 0x01

    SPIN_LOCK( proc );
    2738:	8a 81       	ldd	r24, Y+2	; 0x02
    273a:	9b 81       	ldd	r25, Y+3	; 0x03
    273c:	83 96       	adiw	r24, 0x23	; 35
    273e:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>

    if( proc->flags & (PROC_FLG_RUN|PROC_FLG_MUTEX|PROC_FLG_SEM|PROC_FLG_QUEUE|PROC_FLG_WAIT|PROC_FLG_IPCW|PROC_FLG_DEAD) )
    2742:	ea 81       	ldd	r30, Y+2	; 0x02
    2744:	fb 81       	ldd	r31, Y+3	; 0x03
    2746:	87 81       	ldd	r24, Z+7	; 0x07
    2748:	90 85       	ldd	r25, Z+8	; 0x08
    274a:	8e 77       	andi	r24, 0x7E	; 126
    274c:	94 70       	andi	r25, 0x04	; 4
    274e:	00 97       	sbiw	r24, 0x00	; 0
    2750:	11 f0       	breq	.+4      	; 0x2756 <proc_restart_isr+0x34>
    {
        ret = (bool_t)0;
    2752:	19 82       	std	Y+1, r1	; 0x01
    2754:	3b c0       	rjmp	.+118    	; 0x27cc <proc_restart_isr+0xaa>
        goto end;
    }
    proc->flags = ( proc->flags & PROC_FLG_RT )?PROC_FLG_RT:(flag_t)0;
    2756:	ea 81       	ldd	r30, Y+2	; 0x02
    2758:	fb 81       	ldd	r31, Y+3	; 0x03
    275a:	87 81       	ldd	r24, Z+7	; 0x07
    275c:	90 85       	ldd	r25, Z+8	; 0x08
    275e:	81 70       	andi	r24, 0x01	; 1
    2760:	90 70       	andi	r25, 0x00	; 0
    2762:	88 23       	and	r24, r24
    2764:	29 f0       	breq	.+10     	; 0x2770 <proc_restart_isr+0x4e>
    2766:	81 e0       	ldi	r24, 0x01	; 1
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	9d 83       	std	Y+5, r25	; 0x05
    276c:	8c 83       	std	Y+4, r24	; 0x04
    276e:	02 c0       	rjmp	.+4      	; 0x2774 <proc_restart_isr+0x52>
    2770:	1d 82       	std	Y+5, r1	; 0x05
    2772:	1c 82       	std	Y+4, r1	; 0x04
    2774:	ea 81       	ldd	r30, Y+2	; 0x02
    2776:	fb 81       	ldd	r31, Y+3	; 0x03
    2778:	8c 81       	ldd	r24, Y+4	; 0x04
    277a:	9d 81       	ldd	r25, Y+5	; 0x05
    277c:	90 87       	std	Z+8, r25	; 0x08
    277e:	87 83       	std	Z+7, r24	; 0x07

    PROC_LRES_INIT( proc );
    2780:	8a 81       	ldd	r24, Y+2	; 0x02
    2782:	9b 81       	ldd	r25, Y+3	; 0x03
    2784:	0a 96       	adiw	r24, 0x0a	; 10
    2786:	0e 94 23 10 	call	0x2046	; 0x2046 <pcounter_init>

    proc->timer = proc->time_quant;
    278a:	ea 81       	ldd	r30, Y+2	; 0x02
    278c:	fb 81       	ldd	r31, Y+3	; 0x03
    278e:	83 8d       	ldd	r24, Z+27	; 0x1b
    2790:	94 8d       	ldd	r25, Z+28	; 0x1c
    2792:	ea 81       	ldd	r30, Y+2	; 0x02
    2794:	fb 81       	ldd	r31, Y+3	; 0x03
    2796:	96 8f       	std	Z+30, r25	; 0x1e
    2798:	85 8f       	std	Z+29, r24	; 0x1d

    if( proc->sstart )proc->spointer = proc_stack_init( proc->sstart, (code_t)proc_run_wrapper, (void *)proc );
    279a:	ea 81       	ldd	r30, Y+2	; 0x02
    279c:	fb 81       	ldd	r31, Y+3	; 0x03
    279e:	84 a5       	ldd	r24, Z+44	; 0x2c
    27a0:	95 a5       	ldd	r25, Z+45	; 0x2d
    27a2:	00 97       	sbiw	r24, 0x00	; 0
    27a4:	79 f0       	breq	.+30     	; 0x27c4 <proc_restart_isr+0xa2>
    27a6:	ea 81       	ldd	r30, Y+2	; 0x02
    27a8:	fb 81       	ldd	r31, Y+3	; 0x03
    27aa:	84 a5       	ldd	r24, Z+44	; 0x2c
    27ac:	95 a5       	ldd	r25, Z+45	; 0x2d
    27ae:	2b e0       	ldi	r18, 0x0B	; 11
    27b0:	3d e1       	ldi	r19, 0x1D	; 29
    27b2:	4a 81       	ldd	r20, Y+2	; 0x02
    27b4:	5b 81       	ldd	r21, Y+3	; 0x03
    27b6:	b9 01       	movw	r22, r18
    27b8:	0e 94 16 0b 	call	0x162c	; 0x162c <proc_stack_init>
    27bc:	ea 81       	ldd	r30, Y+2	; 0x02
    27be:	fb 81       	ldd	r31, Y+3	; 0x03
    27c0:	97 a7       	std	Z+47, r25	; 0x2f
    27c2:	86 a7       	std	Z+46, r24	; 0x2e
    _proc_run( proc );
    27c4:	8a 81       	ldd	r24, Y+2	; 0x02
    27c6:	9b 81       	ldd	r25, Y+3	; 0x03
    27c8:	0e 94 2b 13 	call	0x2656	; 0x2656 <_proc_run>
end:

    SPIN_UNLOCK( proc );
    27cc:	8a 81       	ldd	r24, Y+2	; 0x02
    27ce:	9b 81       	ldd	r25, Y+3	; 0x03
    27d0:	83 96       	adiw	r24, 0x23	; 35
    27d2:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>

    return ret;
    27d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    27d8:	0f 90       	pop	r0
    27da:	0f 90       	pop	r0
    27dc:	0f 90       	pop	r0
    27de:	0f 90       	pop	r0
    27e0:	0f 90       	pop	r0
    27e2:	cf 91       	pop	r28
    27e4:	df 91       	pop	r29
    27e6:	08 95       	ret

000027e8 <_proc_stop_>:
// Функция для внутреннего использования, останов процесса

#ifdef CONFIG_MP
void _proc_stop_(proc_t * proc)
{
    27e8:	df 93       	push	r29
    27ea:	cf 93       	push	r28
    27ec:	00 d0       	rcall	.+0      	; 0x27ee <_proc_stop_+0x6>
    27ee:	00 d0       	rcall	.+0      	; 0x27f0 <_proc_stop_+0x8>
    27f0:	cd b7       	in	r28, 0x3d	; 61
    27f2:	de b7       	in	r29, 0x3e	; 62
    27f4:	9c 83       	std	Y+4, r25	; 0x04
    27f6:	8b 83       	std	Y+3, r24	; 0x03
    spin_lock( &kernel.stat_lock );
    27f8:	83 e9       	ldi	r24, 0x93	; 147
    27fa:	93 e0       	ldi	r25, 0x03	; 3
    27fc:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    stat_dec( proc, (stat_t *)kernel.stat + proc->core_id );
    2800:	eb 81       	ldd	r30, Y+3	; 0x03
    2802:	fc 81       	ldd	r31, Y+4	; 0x04
    2804:	81 a1       	ldd	r24, Z+33	; 0x21
    2806:	88 2f       	mov	r24, r24
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	9c 01       	movw	r18, r24
    280c:	2f 56       	subi	r18, 0x6F	; 111
    280e:	3c 4f       	sbci	r19, 0xFC	; 252
    2810:	8b 81       	ldd	r24, Y+3	; 0x03
    2812:	9c 81       	ldd	r25, Y+4	; 0x04
    2814:	b9 01       	movw	r22, r18
    2816:	0e 94 58 01 	call	0x2b0	; 0x2b0 <stat_dec>
    spin_unlock( &kernel.stat_lock );
    281a:	83 e9       	ldi	r24, 0x93	; 147
    281c:	93 e0       	ldi	r25, 0x03	; 3
    281e:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
    {
        lock_t * xlist_lock;
        xlist_lock = &((sched_t *)kernel.sched + proc->core_id)->lock;
    2822:	eb 81       	ldd	r30, Y+3	; 0x03
    2824:	fc 81       	ldd	r31, Y+4	; 0x04
    2826:	81 a1       	ldd	r24, Z+33	; 0x21
    2828:	28 2f       	mov	r18, r24
    282a:	30 e0       	ldi	r19, 0x00	; 0
    282c:	8b e2       	ldi	r24, 0x2B	; 43
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	ac 01       	movw	r20, r24
    2832:	24 9f       	mul	r18, r20
    2834:	c0 01       	movw	r24, r0
    2836:	25 9f       	mul	r18, r21
    2838:	90 0d       	add	r25, r0
    283a:	34 9f       	mul	r19, r20
    283c:	90 0d       	add	r25, r0
    283e:	11 24       	eor	r1, r1
    2840:	85 52       	subi	r24, 0x25	; 37
    2842:	9d 4f       	sbci	r25, 0xFD	; 253
    2844:	8a 96       	adiw	r24, 0x2a	; 42
    2846:	9a 83       	std	Y+2, r25	; 0x02
    2848:	89 83       	std	Y+1, r24	; 0x01
        spin_lock( xlist_lock );
    284a:	89 81       	ldd	r24, Y+1	; 0x01
    284c:	9a 81       	ldd	r25, Y+2	; 0x02
    284e:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
        pitem_cut( (pitem_t *)proc );
    2852:	8b 81       	ldd	r24, Y+3	; 0x03
    2854:	9c 81       	ldd	r25, Y+4	; 0x04
    2856:	0e 94 a6 11 	call	0x234c	; 0x234c <pitem_cut>
        spin_unlock( xlist_lock );
    285a:	89 81       	ldd	r24, Y+1	; 0x01
    285c:	9a 81       	ldd	r25, Y+2	; 0x02
    285e:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
    }
}
    2862:	0f 90       	pop	r0
    2864:	0f 90       	pop	r0
    2866:	0f 90       	pop	r0
    2868:	0f 90       	pop	r0
    286a:	cf 91       	pop	r28
    286c:	df 91       	pop	r29
    286e:	08 95       	ret

00002870 <_proc_stop>:
#endif // CONFIG_MP

void _proc_stop(proc_t * proc)
{
    2870:	df 93       	push	r29
    2872:	cf 93       	push	r28
    2874:	00 d0       	rcall	.+0      	; 0x2876 <_proc_stop+0x6>
    2876:	cd b7       	in	r28, 0x3d	; 61
    2878:	de b7       	in	r29, 0x3e	; 62
    287a:	9a 83       	std	Y+2, r25	; 0x02
    287c:	89 83       	std	Y+1, r24	; 0x01
    proc->flags &= ~PROC_FLG_RUN;
    287e:	e9 81       	ldd	r30, Y+1	; 0x01
    2880:	fa 81       	ldd	r31, Y+2	; 0x02
    2882:	87 81       	ldd	r24, Z+7	; 0x07
    2884:	90 85       	ldd	r25, Z+8	; 0x08
    2886:	8d 7f       	andi	r24, 0xFD	; 253
    2888:	e9 81       	ldd	r30, Y+1	; 0x01
    288a:	fa 81       	ldd	r31, Y+2	; 0x02
    288c:	90 87       	std	Z+8, r25	; 0x08
    288e:	87 83       	std	Z+7, r24	; 0x07
    _proc_stop_( proc );
    2890:	89 81       	ldd	r24, Y+1	; 0x01
    2892:	9a 81       	ldd	r25, Y+2	; 0x02
    2894:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <_proc_stop_>
    RESCHED_PROC( proc );
    2898:	e9 81       	ldd	r30, Y+1	; 0x01
    289a:	fa 81       	ldd	r31, Y+2	; 0x02
    289c:	81 a1       	ldd	r24, Z+33	; 0x21
    289e:	0e 94 b4 01 	call	0x368	; 0x368 <resched>
}
    28a2:	0f 90       	pop	r0
    28a4:	0f 90       	pop	r0
    28a6:	cf 91       	pop	r28
    28a8:	df 91       	pop	r29
    28aa:	08 95       	ret

000028ac <proc_stop_isr>:
// Останов процесса из обработчика прерываний, прерывания должны быть запрещены
bool_t proc_stop_isr(proc_t * proc)
{
    28ac:	df 93       	push	r29
    28ae:	cf 93       	push	r28
    28b0:	00 d0       	rcall	.+0      	; 0x28b2 <proc_stop_isr+0x6>
    28b2:	0f 92       	push	r0
    28b4:	cd b7       	in	r28, 0x3d	; 61
    28b6:	de b7       	in	r29, 0x3e	; 62
    28b8:	9b 83       	std	Y+3, r25	; 0x03
    28ba:	8a 83       	std	Y+2, r24	; 0x02
    bool_t ret = (bool_t)0;
    28bc:	19 82       	std	Y+1, r1	; 0x01

    SPIN_LOCK( proc );
    28be:	8a 81       	ldd	r24, Y+2	; 0x02
    28c0:	9b 81       	ldd	r25, Y+3	; 0x03
    28c2:	83 96       	adiw	r24, 0x23	; 35
    28c4:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    //Проверка флагов
    //В случчае PROC_FLG_WAIT будем обрабатывать PROC_FLG_PRE_END на выходе из sig_wait.
    //В случае PROC_FLG_MUTEX или PROC_FLG_SEM будем обрабатывать PROC_FLG_PRE_STOP при освобождении общего ресурса.
    //В случае ожидания IPC флаг будем обрабатывать при попытке передать данные или указатель целевому процессу.
    if( proc->flags & (PROC_FLG_MUTEX|PROC_FLG_SEM|PROC_FLG_QUEUE|PROC_FLG_WAIT|PROC_FLG_IPCW) )proc->flags |= PROC_FLG_PRE_STOP;
    28c8:	ea 81       	ldd	r30, Y+2	; 0x02
    28ca:	fb 81       	ldd	r31, Y+3	; 0x03
    28cc:	87 81       	ldd	r24, Z+7	; 0x07
    28ce:	90 85       	ldd	r25, Z+8	; 0x08
    28d0:	8c 77       	andi	r24, 0x7C	; 124
    28d2:	90 70       	andi	r25, 0x00	; 0
    28d4:	00 97       	sbiw	r24, 0x00	; 0
    28d6:	51 f0       	breq	.+20     	; 0x28ec <proc_stop_isr+0x40>
    28d8:	ea 81       	ldd	r30, Y+2	; 0x02
    28da:	fb 81       	ldd	r31, Y+3	; 0x03
    28dc:	87 81       	ldd	r24, Z+7	; 0x07
    28de:	90 85       	ldd	r25, Z+8	; 0x08
    28e0:	80 68       	ori	r24, 0x80	; 128
    28e2:	ea 81       	ldd	r30, Y+2	; 0x02
    28e4:	fb 81       	ldd	r31, Y+3	; 0x03
    28e6:	90 87       	std	Z+8, r25	; 0x08
    28e8:	87 83       	std	Z+7, r24	; 0x07
    28ea:	0e c0       	rjmp	.+28     	; 0x2908 <proc_stop_isr+0x5c>
    else if( proc->flags & PROC_FLG_RUN )
    28ec:	ea 81       	ldd	r30, Y+2	; 0x02
    28ee:	fb 81       	ldd	r31, Y+3	; 0x03
    28f0:	87 81       	ldd	r24, Z+7	; 0x07
    28f2:	90 85       	ldd	r25, Z+8	; 0x08
    28f4:	82 70       	andi	r24, 0x02	; 2
    28f6:	90 70       	andi	r25, 0x00	; 0
    28f8:	00 97       	sbiw	r24, 0x00	; 0
    28fa:	31 f0       	breq	.+12     	; 0x2908 <proc_stop_isr+0x5c>
    {
        _proc_stop( proc );
    28fc:	8a 81       	ldd	r24, Y+2	; 0x02
    28fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2900:	0e 94 38 14 	call	0x2870	; 0x2870 <_proc_stop>
        ret = (bool_t)1;
    2904:	81 e0       	ldi	r24, 0x01	; 1
    2906:	89 83       	std	Y+1, r24	; 0x01
    }

    SPIN_UNLOCK( proc );
    2908:	8a 81       	ldd	r24, Y+2	; 0x02
    290a:	9b 81       	ldd	r25, Y+3	; 0x03
    290c:	83 96       	adiw	r24, 0x23	; 35
    290e:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>

    return ret;
    2912:	89 81       	ldd	r24, Y+1	; 0x01
}
    2914:	0f 90       	pop	r0
    2916:	0f 90       	pop	r0
    2918:	0f 90       	pop	r0
    291a:	cf 91       	pop	r28
    291c:	df 91       	pop	r29
    291e:	08 95       	ret

00002920 <_proc_flag_stop>:
// Обработка флага останова процесса, для использования с семафорами, мьютексами и сигналами.
void _proc_flag_stop( flag_t mask )
{
    2920:	df 93       	push	r29
    2922:	cf 93       	push	r28
    2924:	00 d0       	rcall	.+0      	; 0x2926 <_proc_flag_stop+0x6>
    2926:	00 d0       	rcall	.+0      	; 0x2928 <_proc_flag_stop+0x8>
    2928:	cd b7       	in	r28, 0x3d	; 61
    292a:	de b7       	in	r29, 0x3e	; 62
    292c:	9c 83       	std	Y+4, r25	; 0x04
    292e:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc;
    proc = current_proc();
    2930:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <current_proc>
    2934:	9a 83       	std	Y+2, r25	; 0x02
    2936:	89 83       	std	Y+1, r24	; 0x01

    SPIN_LOCK( proc );
    2938:	89 81       	ldd	r24, Y+1	; 0x01
    293a:	9a 81       	ldd	r25, Y+2	; 0x02
    293c:	83 96       	adiw	r24, 0x23	; 35
    293e:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>

    proc->flags &= ~mask;
    2942:	e9 81       	ldd	r30, Y+1	; 0x01
    2944:	fa 81       	ldd	r31, Y+2	; 0x02
    2946:	27 81       	ldd	r18, Z+7	; 0x07
    2948:	30 85       	ldd	r19, Z+8	; 0x08
    294a:	8b 81       	ldd	r24, Y+3	; 0x03
    294c:	9c 81       	ldd	r25, Y+4	; 0x04
    294e:	80 95       	com	r24
    2950:	90 95       	com	r25
    2952:	82 23       	and	r24, r18
    2954:	93 23       	and	r25, r19
    2956:	e9 81       	ldd	r30, Y+1	; 0x01
    2958:	fa 81       	ldd	r31, Y+2	; 0x02
    295a:	90 87       	std	Z+8, r25	; 0x08
    295c:	87 83       	std	Z+7, r24	; 0x07
    if(  PROC_PRE_STOP_TEST(proc)  )
    295e:	e9 81       	ldd	r30, Y+1	; 0x01
    2960:	fa 81       	ldd	r31, Y+2	; 0x02
    2962:	87 81       	ldd	r24, Z+7	; 0x07
    2964:	90 85       	ldd	r25, Z+8	; 0x08
    2966:	80 78       	andi	r24, 0x80	; 128
    2968:	90 70       	andi	r25, 0x00	; 0
    296a:	00 97       	sbiw	r24, 0x00	; 0
    296c:	a9 f0       	breq	.+42     	; 0x2998 <_proc_flag_stop+0x78>
    296e:	e9 81       	ldd	r30, Y+1	; 0x01
    2970:	fa 81       	ldd	r31, Y+2	; 0x02
    2972:	87 81       	ldd	r24, Z+7	; 0x07
    2974:	90 85       	ldd	r25, Z+8	; 0x08
    2976:	8c 70       	andi	r24, 0x0C	; 12
    2978:	90 70       	andi	r25, 0x00	; 0
    297a:	00 97       	sbiw	r24, 0x00	; 0
    297c:	69 f4       	brne	.+26     	; 0x2998 <_proc_flag_stop+0x78>
        /*
        Если был запрошен останов целевого процесса,
        и целевой процесс не удерживает общие ресурсы,
        то мы остановим процесс
        */
        proc->flags &= ~PROC_FLG_PRE_STOP;
    297e:	e9 81       	ldd	r30, Y+1	; 0x01
    2980:	fa 81       	ldd	r31, Y+2	; 0x02
    2982:	87 81       	ldd	r24, Z+7	; 0x07
    2984:	90 85       	ldd	r25, Z+8	; 0x08
    2986:	8f 77       	andi	r24, 0x7F	; 127
    2988:	e9 81       	ldd	r30, Y+1	; 0x01
    298a:	fa 81       	ldd	r31, Y+2	; 0x02
    298c:	90 87       	std	Z+8, r25	; 0x08
    298e:	87 83       	std	Z+7, r24	; 0x07
        _proc_stop( proc );
    2990:	89 81       	ldd	r24, Y+1	; 0x01
    2992:	9a 81       	ldd	r25, Y+2	; 0x02
    2994:	0e 94 38 14 	call	0x2870	; 0x2870 <_proc_stop>
    }

    SPIN_UNLOCK( proc );
    2998:	89 81       	ldd	r24, Y+1	; 0x01
    299a:	9a 81       	ldd	r25, Y+2	; 0x02
    299c:	83 96       	adiw	r24, 0x23	; 35
    299e:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>

}
    29a2:	0f 90       	pop	r0
    29a4:	0f 90       	pop	r0
    29a6:	0f 90       	pop	r0
    29a8:	0f 90       	pop	r0
    29aa:	cf 91       	pop	r28
    29ac:	df 91       	pop	r29
    29ae:	08 95       	ret

000029b0 <_proc_terminate>:

void _proc_terminate( proc_t * proc )
{
    29b0:	df 93       	push	r29
    29b2:	cf 93       	push	r28
    29b4:	00 d0       	rcall	.+0      	; 0x29b6 <_proc_terminate+0x6>
    29b6:	cd b7       	in	r28, 0x3d	; 61
    29b8:	de b7       	in	r29, 0x3e	; 62
    29ba:	9a 83       	std	Y+2, r25	; 0x02
    29bc:	89 83       	std	Y+1, r24	; 0x01

    SPIN_LOCK( proc );
    29be:	89 81       	ldd	r24, Y+1	; 0x01
    29c0:	9a 81       	ldd	r25, Y+2	; 0x02
    29c2:	83 96       	adiw	r24, 0x23	; 35
    29c4:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>

    // Обрабатываем флаги
    // Нельзя выходить из pmain не освободив все захваченные ресурсы, за это процесс будет "убит"!
    if( proc->flags & PROC_FLG_LOCK_MASK ) proc->flags |= PROC_FLG_DEAD;
    29c8:	e9 81       	ldd	r30, Y+1	; 0x01
    29ca:	fa 81       	ldd	r31, Y+2	; 0x02
    29cc:	87 81       	ldd	r24, Z+7	; 0x07
    29ce:	90 85       	ldd	r25, Z+8	; 0x08
    29d0:	8c 70       	andi	r24, 0x0C	; 12
    29d2:	90 70       	andi	r25, 0x00	; 0
    29d4:	00 97       	sbiw	r24, 0x00	; 0
    29d6:	51 f0       	breq	.+20     	; 0x29ec <_proc_terminate+0x3c>
    29d8:	e9 81       	ldd	r30, Y+1	; 0x01
    29da:	fa 81       	ldd	r31, Y+2	; 0x02
    29dc:	87 81       	ldd	r24, Z+7	; 0x07
    29de:	90 85       	ldd	r25, Z+8	; 0x08
    29e0:	94 60       	ori	r25, 0x04	; 4
    29e2:	e9 81       	ldd	r30, Y+1	; 0x01
    29e4:	fa 81       	ldd	r31, Y+2	; 0x02
    29e6:	90 87       	std	Z+8, r25	; 0x08
    29e8:	87 83       	std	Z+7, r24	; 0x07
    29ea:	09 c0       	rjmp	.+18     	; 0x29fe <_proc_terminate+0x4e>
    // В противном случае - просто завершаем процесс
    else proc->flags |= PROC_FLG_END;
    29ec:	e9 81       	ldd	r30, Y+1	; 0x01
    29ee:	fa 81       	ldd	r31, Y+2	; 0x02
    29f0:	87 81       	ldd	r24, Z+7	; 0x07
    29f2:	90 85       	ldd	r25, Z+8	; 0x08
    29f4:	91 60       	ori	r25, 0x01	; 1
    29f6:	e9 81       	ldd	r30, Y+1	; 0x01
    29f8:	fa 81       	ldd	r31, Y+2	; 0x02
    29fa:	90 87       	std	Z+8, r25	; 0x08
    29fc:	87 83       	std	Z+7, r24	; 0x07
    proc->flags &= ~PROC_FLG_PRE_STOP_MASK;
    29fe:	e9 81       	ldd	r30, Y+1	; 0x01
    2a00:	fa 81       	ldd	r31, Y+2	; 0x02
    2a02:	87 81       	ldd	r24, Z+7	; 0x07
    2a04:	90 85       	ldd	r25, Z+8	; 0x08
    2a06:	8d 77       	andi	r24, 0x7D	; 125
    2a08:	e9 81       	ldd	r30, Y+1	; 0x01
    2a0a:	fa 81       	ldd	r31, Y+2	; 0x02
    2a0c:	90 87       	std	Z+8, r25	; 0x08
    2a0e:	87 83       	std	Z+7, r24	; 0x07
    // Останов
    _proc_stop_( proc );
    2a10:	89 81       	ldd	r24, Y+1	; 0x01
    2a12:	9a 81       	ldd	r25, Y+2	; 0x02
    2a14:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <_proc_stop_>
    // Выполнить перепланировку
    RESCHED_PROC( proc );
    2a18:	e9 81       	ldd	r30, Y+1	; 0x01
    2a1a:	fa 81       	ldd	r31, Y+2	; 0x02
    2a1c:	81 a1       	ldd	r24, Z+33	; 0x21
    2a1e:	0e 94 b4 01 	call	0x368	; 0x368 <resched>

    SPIN_UNLOCK( proc );
    2a22:	89 81       	ldd	r24, Y+1	; 0x01
    2a24:	9a 81       	ldd	r25, Y+2	; 0x02
    2a26:	83 96       	adiw	r24, 0x23	; 35
    2a28:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
}
    2a2c:	0f 90       	pop	r0
    2a2e:	0f 90       	pop	r0
    2a30:	cf 91       	pop	r28
    2a32:	df 91       	pop	r29
    2a34:	08 95       	ret

00002a36 <_proc_reset_watchdog>:

void _proc_reset_watchdog( void )
{
    2a36:	df 93       	push	r29
    2a38:	cf 93       	push	r28
    2a3a:	00 d0       	rcall	.+0      	; 0x2a3c <_proc_reset_watchdog+0x6>
    2a3c:	cd b7       	in	r28, 0x3d	; 61
    2a3e:	de b7       	in	r29, 0x3e	; 62
    proc_t * proc;
    proc = current_proc();
    2a40:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <current_proc>
    2a44:	9a 83       	std	Y+2, r25	; 0x02
    2a46:	89 83       	std	Y+1, r24	; 0x01

    SPIN_LOCK( proc );
    2a48:	89 81       	ldd	r24, Y+1	; 0x01
    2a4a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a4c:	83 96       	adiw	r24, 0x23	; 35
    2a4e:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>

    if( proc->flags & PROC_FLG_RT )proc->timer = proc->time_quant;
    2a52:	e9 81       	ldd	r30, Y+1	; 0x01
    2a54:	fa 81       	ldd	r31, Y+2	; 0x02
    2a56:	87 81       	ldd	r24, Z+7	; 0x07
    2a58:	90 85       	ldd	r25, Z+8	; 0x08
    2a5a:	81 70       	andi	r24, 0x01	; 1
    2a5c:	90 70       	andi	r25, 0x00	; 0
    2a5e:	88 23       	and	r24, r24
    2a60:	41 f0       	breq	.+16     	; 0x2a72 <_proc_reset_watchdog+0x3c>
    2a62:	e9 81       	ldd	r30, Y+1	; 0x01
    2a64:	fa 81       	ldd	r31, Y+2	; 0x02
    2a66:	83 8d       	ldd	r24, Z+27	; 0x1b
    2a68:	94 8d       	ldd	r25, Z+28	; 0x1c
    2a6a:	e9 81       	ldd	r30, Y+1	; 0x01
    2a6c:	fa 81       	ldd	r31, Y+2	; 0x02
    2a6e:	96 8f       	std	Z+30, r25	; 0x1e
    2a70:	85 8f       	std	Z+29, r24	; 0x1d

    SPIN_UNLOCK( proc );
    2a72:	89 81       	ldd	r24, Y+1	; 0x01
    2a74:	9a 81       	ldd	r25, Y+2	; 0x02
    2a76:	83 96       	adiw	r24, 0x23	; 35
    2a78:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
}
    2a7c:	0f 90       	pop	r0
    2a7e:	0f 90       	pop	r0
    2a80:	cf 91       	pop	r28
    2a82:	df 91       	pop	r29
    2a84:	08 95       	ret

00002a86 <_proc_lres_inc>:
    proc_t * proc
#ifdef CONFIG_USE_HIGHEST_LOCKER
    ,prio_t prio
#endif
)
{
    2a86:	df 93       	push	r29
    2a88:	cf 93       	push	r28
    2a8a:	00 d0       	rcall	.+0      	; 0x2a8c <_proc_lres_inc+0x6>
    2a8c:	0f 92       	push	r0
    2a8e:	cd b7       	in	r28, 0x3d	; 61
    2a90:	de b7       	in	r29, 0x3e	; 62
    2a92:	9a 83       	std	Y+2, r25	; 0x02
    2a94:	89 83       	std	Y+1, r24	; 0x01
    2a96:	6b 83       	std	Y+3, r22	; 0x03
#ifdef CONFIG_USE_HIGHEST_LOCKER
    if( proc->lres.index == (index_t)0 )proc->flags |= PROC_FLG_MUTEX;
    2a98:	e9 81       	ldd	r30, Y+1	; 0x01
    2a9a:	fa 81       	ldd	r31, Y+2	; 0x02
    2a9c:	82 8d       	ldd	r24, Z+26	; 0x1a
    2a9e:	88 23       	and	r24, r24
    2aa0:	49 f4       	brne	.+18     	; 0x2ab4 <_proc_lres_inc+0x2e>
    2aa2:	e9 81       	ldd	r30, Y+1	; 0x01
    2aa4:	fa 81       	ldd	r31, Y+2	; 0x02
    2aa6:	87 81       	ldd	r24, Z+7	; 0x07
    2aa8:	90 85       	ldd	r25, Z+8	; 0x08
    2aaa:	84 60       	ori	r24, 0x04	; 4
    2aac:	e9 81       	ldd	r30, Y+1	; 0x01
    2aae:	fa 81       	ldd	r31, Y+2	; 0x02
    2ab0:	90 87       	std	Z+8, r25	; 0x08
    2ab2:	87 83       	std	Z+7, r24	; 0x07
    pcounter_inc( &proc->lres, prio );
    2ab4:	89 81       	ldd	r24, Y+1	; 0x01
    2ab6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ab8:	0a 96       	adiw	r24, 0x0a	; 10
    2aba:	6b 81       	ldd	r22, Y+3	; 0x03
    2abc:	0e 94 48 10 	call	0x2090	; 0x2090 <pcounter_inc>
#else
    if( proc->lres == (count_t)0 )proc->flags |= PROC_FLG_MUTEX;
    proc->lres++;
#endif
}
    2ac0:	0f 90       	pop	r0
    2ac2:	0f 90       	pop	r0
    2ac4:	0f 90       	pop	r0
    2ac6:	cf 91       	pop	r28
    2ac8:	df 91       	pop	r29
    2aca:	08 95       	ret

00002acc <_proc_lres_dec>:
    proc_t * proc
#ifdef CONFIG_USE_HIGHEST_LOCKER
    ,prio_t prio
#endif
)
{
    2acc:	df 93       	push	r29
    2ace:	cf 93       	push	r28
    2ad0:	00 d0       	rcall	.+0      	; 0x2ad2 <_proc_lres_dec+0x6>
    2ad2:	0f 92       	push	r0
    2ad4:	cd b7       	in	r28, 0x3d	; 61
    2ad6:	de b7       	in	r29, 0x3e	; 62
    2ad8:	9a 83       	std	Y+2, r25	; 0x02
    2ada:	89 83       	std	Y+1, r24	; 0x01
    2adc:	6b 83       	std	Y+3, r22	; 0x03
#ifdef CONFIG_USE_HIGHEST_LOCKER
    pcounter_dec( &proc->lres, prio );
    2ade:	89 81       	ldd	r24, Y+1	; 0x01
    2ae0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ae2:	0a 96       	adiw	r24, 0x0a	; 10
    2ae4:	6b 81       	ldd	r22, Y+3	; 0x03
    2ae6:	0e 94 84 10 	call	0x2108	; 0x2108 <pcounter_dec>
    if( proc->lres.index == (index_t)0 )proc->flags &= ~PROC_FLG_MUTEX;
    2aea:	e9 81       	ldd	r30, Y+1	; 0x01
    2aec:	fa 81       	ldd	r31, Y+2	; 0x02
    2aee:	82 8d       	ldd	r24, Z+26	; 0x1a
    2af0:	88 23       	and	r24, r24
    2af2:	49 f4       	brne	.+18     	; 0x2b06 <_proc_lres_dec+0x3a>
    2af4:	e9 81       	ldd	r30, Y+1	; 0x01
    2af6:	fa 81       	ldd	r31, Y+2	; 0x02
    2af8:	87 81       	ldd	r24, Z+7	; 0x07
    2afa:	90 85       	ldd	r25, Z+8	; 0x08
    2afc:	8b 7f       	andi	r24, 0xFB	; 251
    2afe:	e9 81       	ldd	r30, Y+1	; 0x01
    2b00:	fa 81       	ldd	r31, Y+2	; 0x02
    2b02:	90 87       	std	Z+8, r25	; 0x08
    2b04:	87 83       	std	Z+7, r24	; 0x07
#else
    if( proc->lres!= (count_t)0 )proc->lres--;
    if( proc->lres == (count_t)0 )proc->flags &= ~PROC_FLG_MUTEX;
#endif
}
    2b06:	0f 90       	pop	r0
    2b08:	0f 90       	pop	r0
    2b0a:	0f 90       	pop	r0
    2b0c:	cf 91       	pop	r28
    2b0e:	df 91       	pop	r29
    2b10:	08 95       	ret

00002b12 <_proc_prio_control_stoped>:

#ifdef CONFIG_USE_HIGHEST_LOCKER
// Будет использоваться в mutex-ах и т.п., процесс должен сам вызывать эту функцию, при этом он должен быть вырезан из списка выполняющихся.

void _proc_prio_control_stoped( proc_t * proc )
{
    2b12:	df 93       	push	r29
    2b14:	cf 93       	push	r28
    2b16:	cd b7       	in	r28, 0x3d	; 61
    2b18:	de b7       	in	r29, 0x3e	; 62
    2b1a:	27 97       	sbiw	r28, 0x07	; 7
    2b1c:	0f b6       	in	r0, 0x3f	; 63
    2b1e:	f8 94       	cli
    2b20:	de bf       	out	0x3e, r29	; 62
    2b22:	0f be       	out	0x3f, r0	; 63
    2b24:	cd bf       	out	0x3d, r28	; 61
    2b26:	9b 83       	std	Y+3, r25	; 0x03
    2b28:	8a 83       	std	Y+2, r24	; 0x02
    if(proc->lres.index != (index_t)0)
    2b2a:	ea 81       	ldd	r30, Y+2	; 0x02
    2b2c:	fb 81       	ldd	r31, Y+3	; 0x03
    2b2e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b30:	88 23       	and	r24, r24
    2b32:	d9 f0       	breq	.+54     	; 0x2b6a <_proc_prio_control_stoped+0x58>
    {

        prio_t locker_prio;
        locker_prio = index_search( proc->lres.index );
    2b34:	ea 81       	ldd	r30, Y+2	; 0x02
    2b36:	fb 81       	ldd	r31, Y+3	; 0x03
    2b38:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b3a:	0e 94 82 0c 	call	0x1904	; 0x1904 <index_search>
    2b3e:	89 83       	std	Y+1, r24	; 0x01
        ((pitem_t *)proc)->prio = ( locker_prio < proc->base_prio )?locker_prio:proc->base_prio;
    2b40:	8a 81       	ldd	r24, Y+2	; 0x02
    2b42:	9b 81       	ldd	r25, Y+3	; 0x03
    2b44:	9e 83       	std	Y+6, r25	; 0x06
    2b46:	8d 83       	std	Y+5, r24	; 0x05
    2b48:	ea 81       	ldd	r30, Y+2	; 0x02
    2b4a:	fb 81       	ldd	r31, Y+3	; 0x03
    2b4c:	81 85       	ldd	r24, Z+9	; 0x09
    2b4e:	99 81       	ldd	r25, Y+1	; 0x01
    2b50:	9f 83       	std	Y+7, r25	; 0x07
    2b52:	8c 83       	std	Y+4, r24	; 0x04
    2b54:	ec 81       	ldd	r30, Y+4	; 0x04
    2b56:	ff 81       	ldd	r31, Y+7	; 0x07
    2b58:	fe 17       	cp	r31, r30
    2b5a:	10 f4       	brcc	.+4      	; 0x2b60 <_proc_prio_control_stoped+0x4e>
    2b5c:	8f 81       	ldd	r24, Y+7	; 0x07
    2b5e:	8c 83       	std	Y+4, r24	; 0x04
    2b60:	8c 81       	ldd	r24, Y+4	; 0x04
    2b62:	ed 81       	ldd	r30, Y+5	; 0x05
    2b64:	fe 81       	ldd	r31, Y+6	; 0x06
    2b66:	86 83       	std	Z+6, r24	; 0x06
    2b68:	08 c0       	rjmp	.+16     	; 0x2b7a <_proc_prio_control_stoped+0x68>
    }
    else
    {
        ((pitem_t *)proc)->prio = proc->base_prio;
    2b6a:	ea 81       	ldd	r30, Y+2	; 0x02
    2b6c:	fb 81       	ldd	r31, Y+3	; 0x03
    2b6e:	aa 81       	ldd	r26, Y+2	; 0x02
    2b70:	bb 81       	ldd	r27, Y+3	; 0x03
    2b72:	19 96       	adiw	r26, 0x09	; 9
    2b74:	8c 91       	ld	r24, X
    2b76:	19 97       	sbiw	r26, 0x09	; 9
    2b78:	86 83       	std	Z+6, r24	; 0x06
    }
}
    2b7a:	27 96       	adiw	r28, 0x07	; 7
    2b7c:	0f b6       	in	r0, 0x3f	; 63
    2b7e:	f8 94       	cli
    2b80:	de bf       	out	0x3e, r29	; 62
    2b82:	0f be       	out	0x3f, r0	; 63
    2b84:	cd bf       	out	0x3d, r28	; 61
    2b86:	cf 91       	pop	r28
    2b88:	df 91       	pop	r29
    2b8a:	08 95       	ret

00002b8c <_proc_prio_control_running>:

void _proc_prio_control_running( proc_t * proc )
{
    2b8c:	df 93       	push	r29
    2b8e:	cf 93       	push	r28
    2b90:	00 d0       	rcall	.+0      	; 0x2b92 <_proc_prio_control_running+0x6>
    2b92:	00 d0       	rcall	.+0      	; 0x2b94 <_proc_prio_control_running+0x8>
    2b94:	00 d0       	rcall	.+0      	; 0x2b96 <_proc_prio_control_running+0xa>
    2b96:	cd b7       	in	r28, 0x3d	; 61
    2b98:	de b7       	in	r29, 0x3e	; 62
    2b9a:	9c 83       	std	Y+4, r25	; 0x04
    2b9c:	8b 83       	std	Y+3, r24	; 0x03
    prio_t new_prio;
    if(proc->lres.index != (index_t)0)
    2b9e:	eb 81       	ldd	r30, Y+3	; 0x03
    2ba0:	fc 81       	ldd	r31, Y+4	; 0x04
    2ba2:	82 8d       	ldd	r24, Z+26	; 0x1a
    2ba4:	88 23       	and	r24, r24
    2ba6:	a9 f0       	breq	.+42     	; 0x2bd2 <_proc_prio_control_running+0x46>
    {
        prio_t locker_prio;
        locker_prio = index_search( proc->lres.index );
    2ba8:	eb 81       	ldd	r30, Y+3	; 0x03
    2baa:	fc 81       	ldd	r31, Y+4	; 0x04
    2bac:	82 8d       	ldd	r24, Z+26	; 0x1a
    2bae:	0e 94 82 0c 	call	0x1904	; 0x1904 <index_search>
    2bb2:	89 83       	std	Y+1, r24	; 0x01
        new_prio = ( locker_prio < proc->base_prio )?locker_prio:proc->base_prio;
    2bb4:	eb 81       	ldd	r30, Y+3	; 0x03
    2bb6:	fc 81       	ldd	r31, Y+4	; 0x04
    2bb8:	81 85       	ldd	r24, Z+9	; 0x09
    2bba:	99 81       	ldd	r25, Y+1	; 0x01
    2bbc:	9e 83       	std	Y+6, r25	; 0x06
    2bbe:	8d 83       	std	Y+5, r24	; 0x05
    2bc0:	8d 81       	ldd	r24, Y+5	; 0x05
    2bc2:	9e 81       	ldd	r25, Y+6	; 0x06
    2bc4:	98 17       	cp	r25, r24
    2bc6:	10 f4       	brcc	.+4      	; 0x2bcc <_proc_prio_control_running+0x40>
    2bc8:	8e 81       	ldd	r24, Y+6	; 0x06
    2bca:	8d 83       	std	Y+5, r24	; 0x05
    2bcc:	9d 81       	ldd	r25, Y+5	; 0x05
    2bce:	9a 83       	std	Y+2, r25	; 0x02
    2bd0:	04 c0       	rjmp	.+8      	; 0x2bda <_proc_prio_control_running+0x4e>
    }
    else
    {
        new_prio = proc->base_prio;
    2bd2:	eb 81       	ldd	r30, Y+3	; 0x03
    2bd4:	fc 81       	ldd	r31, Y+4	; 0x04
    2bd6:	81 85       	ldd	r24, Z+9	; 0x09
    2bd8:	8a 83       	std	Y+2, r24	; 0x02
    }
    if(((pitem_t *)proc)->prio != new_prio)
    2bda:	eb 81       	ldd	r30, Y+3	; 0x03
    2bdc:	fc 81       	ldd	r31, Y+4	; 0x04
    2bde:	96 81       	ldd	r25, Z+6	; 0x06
    2be0:	8a 81       	ldd	r24, Y+2	; 0x02
    2be2:	98 17       	cp	r25, r24
    2be4:	31 f1       	breq	.+76     	; 0x2c32 <_proc_prio_control_running+0xa6>
    {
        _proc_stop_( proc );
    2be6:	8b 81       	ldd	r24, Y+3	; 0x03
    2be8:	9c 81       	ldd	r25, Y+4	; 0x04
    2bea:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <_proc_stop_>
        ((pitem_t *)proc)->prio = new_prio;
    2bee:	eb 81       	ldd	r30, Y+3	; 0x03
    2bf0:	fc 81       	ldd	r31, Y+4	; 0x04
    2bf2:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf4:	86 83       	std	Z+6, r24	; 0x06
#ifdef CONFIG_MP
        spin_lock( &kernel.stat_lock );
    2bf6:	83 e9       	ldi	r24, 0x93	; 147
    2bf8:	93 e0       	ldi	r25, 0x03	; 3
    2bfa:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
        stat_inc( proc, (stat_t *)kernel.stat+proc->core_id );
    2bfe:	eb 81       	ldd	r30, Y+3	; 0x03
    2c00:	fc 81       	ldd	r31, Y+4	; 0x04
    2c02:	81 a1       	ldd	r24, Z+33	; 0x21
    2c04:	88 2f       	mov	r24, r24
    2c06:	90 e0       	ldi	r25, 0x00	; 0
    2c08:	9c 01       	movw	r18, r24
    2c0a:	2f 56       	subi	r18, 0x6F	; 111
    2c0c:	3c 4f       	sbci	r19, 0xFC	; 252
    2c0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c10:	9c 81       	ldd	r25, Y+4	; 0x04
    2c12:	b9 01       	movw	r22, r18
    2c14:	0e 94 6e 01 	call	0x2dc	; 0x2dc <stat_inc>
        spin_unlock( &kernel.stat_lock );
    2c18:	83 e9       	ldi	r24, 0x93	; 147
    2c1a:	93 e0       	ldi	r25, 0x03	; 3
    2c1c:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
#endif
        _proc_run_( proc );
    2c20:	8b 81       	ldd	r24, Y+3	; 0x03
    2c22:	9c 81       	ldd	r25, Y+4	; 0x04
    2c24:	0e 94 f6 12 	call	0x25ec	; 0x25ec <_proc_run_>
        RESCHED_PROC( proc );
    2c28:	eb 81       	ldd	r30, Y+3	; 0x03
    2c2a:	fc 81       	ldd	r31, Y+4	; 0x04
    2c2c:	81 a1       	ldd	r24, Z+33	; 0x21
    2c2e:	0e 94 b4 01 	call	0x368	; 0x368 <resched>
    }
}
    2c32:	26 96       	adiw	r28, 0x06	; 6
    2c34:	0f b6       	in	r0, 0x3f	; 63
    2c36:	f8 94       	cli
    2c38:	de bf       	out	0x3e, r29	; 62
    2c3a:	0f be       	out	0x3f, r0	; 63
    2c3c:	cd bf       	out	0x3d, r28	; 61
    2c3e:	cf 91       	pop	r28
    2c40:	df 91       	pop	r29
    2c42:	08 95       	ret

00002c44 <sched_load_balancer>:

#ifdef CONFIG_MP
//========================================================================================
// Балансировщик нагрузки
WEAK core_id_t sched_load_balancer(proc_t * proc, stat_t * stat)
{
    2c44:	df 93       	push	r29
    2c46:	cf 93       	push	r28
    2c48:	cd b7       	in	r28, 0x3d	; 61
    2c4a:	de b7       	in	r29, 0x3e	; 62
    2c4c:	2a 97       	sbiw	r28, 0x0a	; 10
    2c4e:	0f b6       	in	r0, 0x3f	; 63
    2c50:	f8 94       	cli
    2c52:	de bf       	out	0x3e, r29	; 62
    2c54:	0f be       	out	0x3f, r0	; 63
    2c56:	cd bf       	out	0x3d, r28	; 61
    2c58:	98 87       	std	Y+8, r25	; 0x08
    2c5a:	8f 83       	std	Y+7, r24	; 0x07
    2c5c:	7a 87       	std	Y+10, r23	; 0x0a
    2c5e:	69 87       	std	Y+9, r22	; 0x09
    core_id_t core = (core_id_t)0, ret;
    2c60:	1e 82       	std	Y+6, r1	; 0x06
    affinity_t mask = (affinity_t)1;
    2c62:	81 e0       	ldi	r24, 0x01	; 1
    2c64:	8c 83       	std	Y+4, r24	; 0x04
    2c66:	0d c0       	rjmp	.+26     	; 0x2c82 <sched_load_balancer+0x3e>
    while( core < (core_id_t)MAX_CORES )
    {
        if( proc->affinity & mask )break;
    2c68:	ef 81       	ldd	r30, Y+7	; 0x07
    2c6a:	f8 85       	ldd	r31, Y+8	; 0x08
    2c6c:	92 a1       	ldd	r25, Z+34	; 0x22
    2c6e:	8c 81       	ldd	r24, Y+4	; 0x04
    2c70:	89 23       	and	r24, r25
    2c72:	88 23       	and	r24, r24
    2c74:	49 f4       	brne	.+18     	; 0x2c88 <sched_load_balancer+0x44>
        mask<<=1;
    2c76:	8c 81       	ldd	r24, Y+4	; 0x04
    2c78:	88 0f       	add	r24, r24
    2c7a:	8c 83       	std	Y+4, r24	; 0x04
        core++;
    2c7c:	8e 81       	ldd	r24, Y+6	; 0x06
    2c7e:	8f 5f       	subi	r24, 0xFF	; 255
    2c80:	8e 83       	std	Y+6, r24	; 0x06
// Балансировщик нагрузки
WEAK core_id_t sched_load_balancer(proc_t * proc, stat_t * stat)
{
    core_id_t core = (core_id_t)0, ret;
    affinity_t mask = (affinity_t)1;
    while( core < (core_id_t)MAX_CORES )
    2c82:	8e 81       	ldd	r24, Y+6	; 0x06
    2c84:	82 30       	cpi	r24, 0x02	; 2
    2c86:	80 f3       	brcs	.-32     	; 0x2c68 <sched_load_balancer+0x24>
        if( proc->affinity & mask )break;
        mask<<=1;
        core++;
    }
    // Начальное предположение
    stat += (core_id_t)core;
    2c88:	8e 81       	ldd	r24, Y+6	; 0x06
    2c8a:	28 2f       	mov	r18, r24
    2c8c:	30 e0       	ldi	r19, 0x00	; 0
    2c8e:	89 85       	ldd	r24, Y+9	; 0x09
    2c90:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c92:	82 0f       	add	r24, r18
    2c94:	93 1f       	adc	r25, r19
    2c96:	9a 87       	std	Y+10, r25	; 0x0a
    2c98:	89 87       	std	Y+9, r24	; 0x09
    ret = core++;
    2c9a:	8e 81       	ldd	r24, Y+6	; 0x06
    2c9c:	8d 83       	std	Y+5, r24	; 0x05
    2c9e:	8e 81       	ldd	r24, Y+6	; 0x06
    2ca0:	8f 5f       	subi	r24, 0xFF	; 255
    2ca2:	8e 83       	std	Y+6, r24	; 0x06
    mask<<=1;
    2ca4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ca6:	88 0f       	add	r24, r24
    2ca8:	8c 83       	std	Y+4, r24	; 0x04
    {
        prio_t proc_prio;
        load_t current_load, min_load;

        proc_prio = ((pitem_t *)proc)->prio;
    2caa:	ef 81       	ldd	r30, Y+7	; 0x07
    2cac:	f8 85       	ldd	r31, Y+8	; 0x08
    2cae:	86 81       	ldd	r24, Z+6	; 0x06
    2cb0:	8b 83       	std	Y+3, r24	; 0x03
        min_load = stat_calc_load( proc_prio, stat++ );
    2cb2:	29 85       	ldd	r18, Y+9	; 0x09
    2cb4:	3a 85       	ldd	r19, Y+10	; 0x0a
    2cb6:	89 85       	ldd	r24, Y+9	; 0x09
    2cb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cba:	01 96       	adiw	r24, 0x01	; 1
    2cbc:	9a 87       	std	Y+10, r25	; 0x0a
    2cbe:	89 87       	std	Y+9, r24	; 0x09
    2cc0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc2:	b9 01       	movw	r22, r18
    2cc4:	0e 94 a2 01 	call	0x344	; 0x344 <stat_calc_load>
    2cc8:	89 83       	std	Y+1, r24	; 0x01
    2cca:	21 c0       	rjmp	.+66     	; 0x2d0e <sched_load_balancer+0xca>
        // Проверка всего остального, тупой поиск минимума
        while( core < (core_id_t)MAX_CORES )
        {
            current_load = stat_calc_load( proc_prio, stat++ );
    2ccc:	29 85       	ldd	r18, Y+9	; 0x09
    2cce:	3a 85       	ldd	r19, Y+10	; 0x0a
    2cd0:	89 85       	ldd	r24, Y+9	; 0x09
    2cd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cd4:	01 96       	adiw	r24, 0x01	; 1
    2cd6:	9a 87       	std	Y+10, r25	; 0x0a
    2cd8:	89 87       	std	Y+9, r24	; 0x09
    2cda:	8b 81       	ldd	r24, Y+3	; 0x03
    2cdc:	b9 01       	movw	r22, r18
    2cde:	0e 94 a2 01 	call	0x344	; 0x344 <stat_calc_load>
    2ce2:	8a 83       	std	Y+2, r24	; 0x02
            if( (proc->affinity & mask) && (current_load < min_load) )
    2ce4:	ef 81       	ldd	r30, Y+7	; 0x07
    2ce6:	f8 85       	ldd	r31, Y+8	; 0x08
    2ce8:	92 a1       	ldd	r25, Z+34	; 0x22
    2cea:	8c 81       	ldd	r24, Y+4	; 0x04
    2cec:	89 23       	and	r24, r25
    2cee:	88 23       	and	r24, r24
    2cf0:	41 f0       	breq	.+16     	; 0x2d02 <sched_load_balancer+0xbe>
    2cf2:	9a 81       	ldd	r25, Y+2	; 0x02
    2cf4:	89 81       	ldd	r24, Y+1	; 0x01
    2cf6:	98 17       	cp	r25, r24
    2cf8:	20 f4       	brcc	.+8      	; 0x2d02 <sched_load_balancer+0xbe>
            {
                min_load = current_load;
    2cfa:	8a 81       	ldd	r24, Y+2	; 0x02
    2cfc:	89 83       	std	Y+1, r24	; 0x01
                ret = core;
    2cfe:	8e 81       	ldd	r24, Y+6	; 0x06
    2d00:	8d 83       	std	Y+5, r24	; 0x05
            }
            mask<<=1;
    2d02:	8c 81       	ldd	r24, Y+4	; 0x04
    2d04:	88 0f       	add	r24, r24
    2d06:	8c 83       	std	Y+4, r24	; 0x04
            core++;
    2d08:	8e 81       	ldd	r24, Y+6	; 0x06
    2d0a:	8f 5f       	subi	r24, 0xFF	; 255
    2d0c:	8e 83       	std	Y+6, r24	; 0x06
        load_t current_load, min_load;

        proc_prio = ((pitem_t *)proc)->prio;
        min_load = stat_calc_load( proc_prio, stat++ );
        // Проверка всего остального, тупой поиск минимума
        while( core < (core_id_t)MAX_CORES )
    2d0e:	8e 81       	ldd	r24, Y+6	; 0x06
    2d10:	82 30       	cpi	r24, 0x02	; 2
    2d12:	e0 f2       	brcs	.-72     	; 0x2ccc <sched_load_balancer+0x88>
            }
            mask<<=1;
            core++;
        }
    }
    return ret;
    2d14:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2d16:	2a 96       	adiw	r28, 0x0a	; 10
    2d18:	0f b6       	in	r0, 0x3f	; 63
    2d1a:	f8 94       	cli
    2d1c:	de bf       	out	0x3e, r29	; 62
    2d1e:	0f be       	out	0x3f, r0	; 63
    2d20:	cd bf       	out	0x3d, r28	; 61
    2d22:	cf 91       	pop	r28
    2d24:	df 91       	pop	r29
    2d26:	08 95       	ret

00002d28 <sched_highest_load_core>:
//----------------------------------------------------------------------------------------
//Поиск самой нагруженной структуры stat_t в массиве
WEAK core_id_t sched_highest_load_core( stat_t * stat )
{
    2d28:	df 93       	push	r29
    2d2a:	cf 93       	push	r28
    2d2c:	00 d0       	rcall	.+0      	; 0x2d2e <sched_highest_load_core+0x6>
    2d2e:	00 d0       	rcall	.+0      	; 0x2d30 <sched_highest_load_core+0x8>
    2d30:	00 d0       	rcall	.+0      	; 0x2d32 <sched_highest_load_core+0xa>
    2d32:	cd b7       	in	r28, 0x3d	; 61
    2d34:	de b7       	in	r29, 0x3e	; 62
    2d36:	9e 83       	std	Y+6, r25	; 0x06
    2d38:	8d 83       	std	Y+5, r24	; 0x05
    // Начальное предположение
    load_t max_load;
    core_id_t object_core = (core_id_t)0; //процессор с максимальной нагрузкой, с которого эту нагрузку будем снимать
    2d3a:	1b 82       	std	Y+3, r1	; 0x03
    core_id_t core = (core_id_t)1;
    2d3c:	81 e0       	ldi	r24, 0x01	; 1
    2d3e:	8a 83       	std	Y+2, r24	; 0x02
    max_load  = stat_calc_load( (prio_t)BITS_IN_INDEX_T, stat ); // максимальная нагрузка
    2d40:	2d 81       	ldd	r18, Y+5	; 0x05
    2d42:	3e 81       	ldd	r19, Y+6	; 0x06
    2d44:	88 e0       	ldi	r24, 0x08	; 8
    2d46:	b9 01       	movw	r22, r18
    2d48:	0e 94 a2 01 	call	0x344	; 0x344 <stat_calc_load>
    2d4c:	8c 83       	std	Y+4, r24	; 0x04
    2d4e:	17 c0       	rjmp	.+46     	; 0x2d7e <sched_highest_load_core+0x56>

    while( core < (core_id_t)MAX_CORES )
    {
        load_t current_load;
        current_load = stat_calc_load( (prio_t)BITS_IN_INDEX_T, stat + core );
    2d50:	8a 81       	ldd	r24, Y+2	; 0x02
    2d52:	28 2f       	mov	r18, r24
    2d54:	30 e0       	ldi	r19, 0x00	; 0
    2d56:	8d 81       	ldd	r24, Y+5	; 0x05
    2d58:	9e 81       	ldd	r25, Y+6	; 0x06
    2d5a:	28 0f       	add	r18, r24
    2d5c:	39 1f       	adc	r19, r25
    2d5e:	88 e0       	ldi	r24, 0x08	; 8
    2d60:	b9 01       	movw	r22, r18
    2d62:	0e 94 a2 01 	call	0x344	; 0x344 <stat_calc_load>
    2d66:	89 83       	std	Y+1, r24	; 0x01
        if( current_load > max_load )
    2d68:	99 81       	ldd	r25, Y+1	; 0x01
    2d6a:	8c 81       	ldd	r24, Y+4	; 0x04
    2d6c:	89 17       	cp	r24, r25
    2d6e:	20 f4       	brcc	.+8      	; 0x2d78 <sched_highest_load_core+0x50>
        {
            max_load = current_load;
    2d70:	89 81       	ldd	r24, Y+1	; 0x01
    2d72:	8c 83       	std	Y+4, r24	; 0x04
            object_core = core;
    2d74:	8a 81       	ldd	r24, Y+2	; 0x02
    2d76:	8b 83       	std	Y+3, r24	; 0x03
        }
        core++;
    2d78:	8a 81       	ldd	r24, Y+2	; 0x02
    2d7a:	8f 5f       	subi	r24, 0xFF	; 255
    2d7c:	8a 83       	std	Y+2, r24	; 0x02
    load_t max_load;
    core_id_t object_core = (core_id_t)0; //процессор с максимальной нагрузкой, с которого эту нагрузку будем снимать
    core_id_t core = (core_id_t)1;
    max_load  = stat_calc_load( (prio_t)BITS_IN_INDEX_T, stat ); // максимальная нагрузка

    while( core < (core_id_t)MAX_CORES )
    2d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d80:	82 30       	cpi	r24, 0x02	; 2
    2d82:	30 f3       	brcs	.-52     	; 0x2d50 <sched_highest_load_core+0x28>
            object_core = core;
        }
        core++;
    }

    return object_core;
    2d84:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2d86:	26 96       	adiw	r28, 0x06	; 6
    2d88:	0f b6       	in	r0, 0x3f	; 63
    2d8a:	f8 94       	cli
    2d8c:	de bf       	out	0x3e, r29	; 62
    2d8e:	0f be       	out	0x3f, r0	; 63
    2d90:	cd bf       	out	0x3d, r28	; 61
    2d92:	cf 91       	pop	r28
    2d94:	df 91       	pop	r29
    2d96:	08 95       	ret

00002d98 <sched_init>:
#endif // CONFIG_MP
//========================================================================================
// Инициация
void sched_init(sched_t * sched, proc_t * idle)
{
    2d98:	df 93       	push	r29
    2d9a:	cf 93       	push	r28
    2d9c:	00 d0       	rcall	.+0      	; 0x2d9e <sched_init+0x6>
    2d9e:	00 d0       	rcall	.+0      	; 0x2da0 <sched_init+0x8>
    2da0:	00 d0       	rcall	.+0      	; 0x2da2 <sched_init+0xa>
    2da2:	cd b7       	in	r28, 0x3d	; 61
    2da4:	de b7       	in	r29, 0x3e	; 62
    2da6:	9c 83       	std	Y+4, r25	; 0x04
    2da8:	8b 83       	std	Y+3, r24	; 0x03
    2daa:	7e 83       	std	Y+6, r23	; 0x06
    2dac:	6d 83       	std	Y+5, r22	; 0x05
#ifdef CONFIG_MP
    lock_t * sched_lock;
    sched_lock = &sched->lock;
    2dae:	8b 81       	ldd	r24, Y+3	; 0x03
    2db0:	9c 81       	ldd	r25, Y+4	; 0x04
    2db2:	8a 96       	adiw	r24, 0x2a	; 42
    2db4:	9a 83       	std	Y+2, r25	; 0x02
    2db6:	89 83       	std	Y+1, r24	; 0x01
    spin_init( sched_lock );
    2db8:	89 81       	ldd	r24, Y+1	; 0x01
    2dba:	9a 81       	ldd	r25, Y+2	; 0x02
    2dbc:	0e 94 0b 01 	call	0x216	; 0x216 <spin_init>
    spin_lock( sched_lock );
    2dc0:	89 81       	ldd	r24, Y+1	; 0x01
    2dc2:	9a 81       	ldd	r25, Y+2	; 0x02
    2dc4:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
#endif // CONFIG_MP
    sched->ready = (xlist_t *)sched->plst;
    2dc8:	8b 81       	ldd	r24, Y+3	; 0x03
    2dca:	9c 81       	ldd	r25, Y+4	; 0x04
    2dcc:	06 96       	adiw	r24, 0x06	; 6
    2dce:	eb 81       	ldd	r30, Y+3	; 0x03
    2dd0:	fc 81       	ldd	r31, Y+4	; 0x04
    2dd2:	93 83       	std	Z+3, r25	; 0x03
    2dd4:	82 83       	std	Z+2, r24	; 0x02
    xlist_init( sched->ready );
    2dd6:	eb 81       	ldd	r30, Y+3	; 0x03
    2dd8:	fc 81       	ldd	r31, Y+4	; 0x04
    2dda:	82 81       	ldd	r24, Z+2	; 0x02
    2ddc:	93 81       	ldd	r25, Z+3	; 0x03
    2dde:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <xlist_init>
    sched->expired = (xlist_t *)sched->plst + 1;
    2de2:	8b 81       	ldd	r24, Y+3	; 0x03
    2de4:	9c 81       	ldd	r25, Y+4	; 0x04
    2de6:	47 96       	adiw	r24, 0x17	; 23
    2de8:	eb 81       	ldd	r30, Y+3	; 0x03
    2dea:	fc 81       	ldd	r31, Y+4	; 0x04
    2dec:	95 83       	std	Z+5, r25	; 0x05
    2dee:	84 83       	std	Z+4, r24	; 0x04
    xlist_init( sched->expired );
    2df0:	eb 81       	ldd	r30, Y+3	; 0x03
    2df2:	fc 81       	ldd	r31, Y+4	; 0x04
    2df4:	84 81       	ldd	r24, Z+4	; 0x04
    2df6:	95 81       	ldd	r25, Z+5	; 0x05
    2df8:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <xlist_init>
    pitem_insert( (pitem_t *)idle, sched->ready );
    2dfc:	8d 81       	ldd	r24, Y+5	; 0x05
    2dfe:	9e 81       	ldd	r25, Y+6	; 0x06
    2e00:	eb 81       	ldd	r30, Y+3	; 0x03
    2e02:	fc 81       	ldd	r31, Y+4	; 0x04
    2e04:	22 81       	ldd	r18, Z+2	; 0x02
    2e06:	33 81       	ldd	r19, Z+3	; 0x03
    2e08:	b9 01       	movw	r22, r18
    2e0a:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <pitem_insert>
    sched->current_proc = idle;
    2e0e:	eb 81       	ldd	r30, Y+3	; 0x03
    2e10:	fc 81       	ldd	r31, Y+4	; 0x04
    2e12:	8d 81       	ldd	r24, Y+5	; 0x05
    2e14:	9e 81       	ldd	r25, Y+6	; 0x06
    2e16:	91 83       	std	Z+1, r25	; 0x01
    2e18:	80 83       	st	Z, r24
    sched->nested_crit_sec = (count_t)0;//вообще это выполняется при запрещенных прерываниях, но не известно, на этом ли процессоре
    2e1a:	eb 81       	ldd	r30, Y+3	; 0x03
    2e1c:	fc 81       	ldd	r31, Y+4	; 0x04
    2e1e:	11 a6       	std	Z+41, r1	; 0x29
    2e20:	10 a6       	std	Z+40, r1	; 0x28
#ifdef CONFIG_MP
    spin_unlock( sched_lock );
    2e22:	89 81       	ldd	r24, Y+1	; 0x01
    2e24:	9a 81       	ldd	r25, Y+2	; 0x02
    2e26:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
    stat_inc( idle, (stat_t *)kernel.stat + idle->core_id );
    2e2a:	ed 81       	ldd	r30, Y+5	; 0x05
    2e2c:	fe 81       	ldd	r31, Y+6	; 0x06
    2e2e:	81 a1       	ldd	r24, Z+33	; 0x21
    2e30:	88 2f       	mov	r24, r24
    2e32:	90 e0       	ldi	r25, 0x00	; 0
    2e34:	9c 01       	movw	r18, r24
    2e36:	2f 56       	subi	r18, 0x6F	; 111
    2e38:	3c 4f       	sbci	r19, 0xFC	; 252
    2e3a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e3c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e3e:	b9 01       	movw	r22, r18
    2e40:	0e 94 6e 01 	call	0x2dc	; 0x2dc <stat_inc>
#endif // CONFIG_MP
}
    2e44:	26 96       	adiw	r28, 0x06	; 6
    2e46:	0f b6       	in	r0, 0x3f	; 63
    2e48:	f8 94       	cli
    2e4a:	de bf       	out	0x3e, r29	; 62
    2e4c:	0f be       	out	0x3f, r0	; 63
    2e4e:	cd bf       	out	0x3d, r28	; 61
    2e50:	cf 91       	pop	r28
    2e52:	df 91       	pop	r29
    2e54:	08 95       	ret

00002e56 <_sched_switch_current>:
static void _sched_switch_current( sched_t * sched, proc_t ** current_proc )
{
    2e56:	df 93       	push	r29
    2e58:	cf 93       	push	r28
    2e5a:	00 d0       	rcall	.+0      	; 0x2e5c <_sched_switch_current+0x6>
    2e5c:	00 d0       	rcall	.+0      	; 0x2e5e <_sched_switch_current+0x8>
    2e5e:	00 d0       	rcall	.+0      	; 0x2e60 <_sched_switch_current+0xa>
    2e60:	cd b7       	in	r28, 0x3d	; 61
    2e62:	de b7       	in	r29, 0x3e	; 62
    2e64:	9c 83       	std	Y+4, r25	; 0x04
    2e66:	8b 83       	std	Y+3, r24	; 0x03
    2e68:	7e 83       	std	Y+6, r23	; 0x06
    2e6a:	6d 83       	std	Y+5, r22	; 0x05

    SPIN_LOCK( sched );
    2e6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e6e:	9c 81       	ldd	r25, Y+4	; 0x04
    2e70:	8a 96       	adiw	r24, 0x2a	; 42
    2e72:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    // Если список ready опустел, - переключаем списки
    if( sched->ready->index == (index_t)0 )
    2e76:	eb 81       	ldd	r30, Y+3	; 0x03
    2e78:	fc 81       	ldd	r31, Y+4	; 0x04
    2e7a:	02 80       	ldd	r0, Z+2	; 0x02
    2e7c:	f3 81       	ldd	r31, Z+3	; 0x03
    2e7e:	e0 2d       	mov	r30, r0
    2e80:	80 89       	ldd	r24, Z+16	; 0x10
    2e82:	88 23       	and	r24, r24
    2e84:	a1 f4       	brne	.+40     	; 0x2eae <_sched_switch_current+0x58>
    {
        xlist_t * buf;
        buf = sched->ready;
    2e86:	eb 81       	ldd	r30, Y+3	; 0x03
    2e88:	fc 81       	ldd	r31, Y+4	; 0x04
    2e8a:	82 81       	ldd	r24, Z+2	; 0x02
    2e8c:	93 81       	ldd	r25, Z+3	; 0x03
    2e8e:	9a 83       	std	Y+2, r25	; 0x02
    2e90:	89 83       	std	Y+1, r24	; 0x01
        sched->ready = sched->expired;
    2e92:	eb 81       	ldd	r30, Y+3	; 0x03
    2e94:	fc 81       	ldd	r31, Y+4	; 0x04
    2e96:	84 81       	ldd	r24, Z+4	; 0x04
    2e98:	95 81       	ldd	r25, Z+5	; 0x05
    2e9a:	eb 81       	ldd	r30, Y+3	; 0x03
    2e9c:	fc 81       	ldd	r31, Y+4	; 0x04
    2e9e:	93 83       	std	Z+3, r25	; 0x03
    2ea0:	82 83       	std	Z+2, r24	; 0x02
        sched->expired = buf;
    2ea2:	eb 81       	ldd	r30, Y+3	; 0x03
    2ea4:	fc 81       	ldd	r31, Y+4	; 0x04
    2ea6:	89 81       	ldd	r24, Y+1	; 0x01
    2ea8:	9a 81       	ldd	r25, Y+2	; 0x02
    2eaa:	95 83       	std	Z+5, r25	; 0x05
    2eac:	84 83       	std	Z+4, r24	; 0x04
    }
    // Изменять указатель будем при захваченной блокировке,
    // чтобы процессы на других процессорах не прочитали неизвестно что.
    sched->current_proc = (proc_t *)xlist_head( sched->ready ); // Вытесняющая многозадачность же!
    2eae:	eb 81       	ldd	r30, Y+3	; 0x03
    2eb0:	fc 81       	ldd	r31, Y+4	; 0x04
    2eb2:	82 81       	ldd	r24, Z+2	; 0x02
    2eb4:	93 81       	ldd	r25, Z+3	; 0x03
    2eb6:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <xlist_head>
    2eba:	eb 81       	ldd	r30, Y+3	; 0x03
    2ebc:	fc 81       	ldd	r31, Y+4	; 0x04
    2ebe:	91 83       	std	Z+1, r25	; 0x01
    2ec0:	80 83       	st	Z, r24
    *current_proc = sched->current_proc;
    2ec2:	eb 81       	ldd	r30, Y+3	; 0x03
    2ec4:	fc 81       	ldd	r31, Y+4	; 0x04
    2ec6:	80 81       	ld	r24, Z
    2ec8:	91 81       	ldd	r25, Z+1	; 0x01
    2eca:	ed 81       	ldd	r30, Y+5	; 0x05
    2ecc:	fe 81       	ldd	r31, Y+6	; 0x06
    2ece:	91 83       	std	Z+1, r25	; 0x01
    2ed0:	80 83       	st	Z, r24

    SPIN_UNLOCK( sched );
    2ed2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ed6:	8a 96       	adiw	r24, 0x2a	; 42
    2ed8:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
}
    2edc:	26 96       	adiw	r28, 0x06	; 6
    2ede:	0f b6       	in	r0, 0x3f	; 63
    2ee0:	f8 94       	cli
    2ee2:	de bf       	out	0x3e, r29	; 62
    2ee4:	0f be       	out	0x3f, r0	; 63
    2ee6:	cd bf       	out	0x3d, r28	; 61
    2ee8:	cf 91       	pop	r28
    2eea:	df 91       	pop	r29
    2eec:	08 95       	ret

00002eee <sched_schedule>:
2) В качестве аргумента передаем только тот объект, который управляет процессами
на исполняющем функции процессоре.
******************************************************************************************/
// Функция планирования, переключает процессы в обработчике системмного таймера
void sched_schedule(void)
{
    2eee:	df 93       	push	r29
    2ef0:	cf 93       	push	r28
    2ef2:	00 d0       	rcall	.+0      	; 0x2ef4 <sched_schedule+0x6>
    2ef4:	00 d0       	rcall	.+0      	; 0x2ef6 <sched_schedule+0x8>
    2ef6:	00 d0       	rcall	.+0      	; 0x2ef8 <sched_schedule+0xa>
    2ef8:	cd b7       	in	r28, 0x3d	; 61
    2efa:	de b7       	in	r29, 0x3e	; 62
    proc_t * current_proc;
    sched_t * sched;
    sched = _SCHED_INIT();
    2efc:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <current_core>
    2f00:	28 2f       	mov	r18, r24
    2f02:	30 e0       	ldi	r19, 0x00	; 0
    2f04:	8b e2       	ldi	r24, 0x2B	; 43
    2f06:	90 e0       	ldi	r25, 0x00	; 0
    2f08:	ac 01       	movw	r20, r24
    2f0a:	24 9f       	mul	r18, r20
    2f0c:	c0 01       	movw	r24, r0
    2f0e:	25 9f       	mul	r18, r21
    2f10:	90 0d       	add	r25, r0
    2f12:	34 9f       	mul	r19, r20
    2f14:	90 0d       	add	r25, r0
    2f16:	11 24       	eor	r1, r1
    2f18:	85 52       	subi	r24, 0x25	; 37
    2f1a:	9d 4f       	sbci	r25, 0xFD	; 253
    2f1c:	9c 83       	std	Y+4, r25	; 0x04
    2f1e:	8b 83       	std	Y+3, r24	; 0x03
    // Меняем только с локального процессора, блокировку sched->lock можно не захватывать!
    current_proc = sched->current_proc;
    2f20:	eb 81       	ldd	r30, Y+3	; 0x03
    2f22:	fc 81       	ldd	r31, Y+4	; 0x04
    2f24:	80 81       	ld	r24, Z
    2f26:	91 81       	ldd	r25, Z+1	; 0x01
    2f28:	9e 83       	std	Y+6, r25	; 0x06
    2f2a:	8d 83       	std	Y+5, r24	; 0x05
    // А вот эту блокировку обязательно надо захватить!
    SPIN_LOCK( current_proc );
    2f2c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f2e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f30:	83 96       	adiw	r24, 0x23	; 35
    2f32:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    // Хук "сохранение контекста"
    if( current_proc->sv_hook )current_proc->sv_hook( current_proc->arg );
    2f36:	ed 81       	ldd	r30, Y+5	; 0x05
    2f38:	fe 81       	ldd	r31, Y+6	; 0x06
    2f3a:	86 a1       	ldd	r24, Z+38	; 0x26
    2f3c:	97 a1       	ldd	r25, Z+39	; 0x27
    2f3e:	00 97       	sbiw	r24, 0x00	; 0
    2f40:	51 f0       	breq	.+20     	; 0x2f56 <sched_schedule+0x68>
    2f42:	ed 81       	ldd	r30, Y+5	; 0x05
    2f44:	fe 81       	ldd	r31, Y+6	; 0x06
    2f46:	26 a1       	ldd	r18, Z+38	; 0x26
    2f48:	37 a1       	ldd	r19, Z+39	; 0x27
    2f4a:	ed 81       	ldd	r30, Y+5	; 0x05
    2f4c:	fe 81       	ldd	r31, Y+6	; 0x06
    2f4e:	82 a5       	ldd	r24, Z+42	; 0x2a
    2f50:	93 a5       	ldd	r25, Z+43	; 0x2b
    2f52:	f9 01       	movw	r30, r18
    2f54:	09 95       	icall
    // Проверяем, что процесс находится в списке ready
    if( (xlist_t *)((pitem_t *)current_proc)->list == sched->ready )
    2f56:	8d 81       	ldd	r24, Y+5	; 0x05
    2f58:	9e 81       	ldd	r25, Y+6	; 0x06
    2f5a:	fc 01       	movw	r30, r24
    2f5c:	24 81       	ldd	r18, Z+4	; 0x04
    2f5e:	35 81       	ldd	r19, Z+5	; 0x05
    2f60:	eb 81       	ldd	r30, Y+3	; 0x03
    2f62:	fc 81       	ldd	r31, Y+4	; 0x04
    2f64:	82 81       	ldd	r24, Z+2	; 0x02
    2f66:	93 81       	ldd	r25, Z+3	; 0x03
    2f68:	28 17       	cp	r18, r24
    2f6a:	39 07       	cpc	r19, r25
    2f6c:	09 f0       	breq	.+2      	; 0x2f70 <sched_schedule+0x82>
    2f6e:	94 c0       	rjmp	.+296    	; 0x3098 <sched_schedule+0x1aa>
    {
        // Переключаем cписок на следующий за текущим процесс
        SPIN_LOCK( sched );
    2f70:	8b 81       	ldd	r24, Y+3	; 0x03
    2f72:	9c 81       	ldd	r25, Y+4	; 0x04
    2f74:	8a 96       	adiw	r24, 0x2a	; 42
    2f76:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>

        xlist_switch( sched->ready, ((pitem_t *)current_proc)->prio );
    2f7a:	eb 81       	ldd	r30, Y+3	; 0x03
    2f7c:	fc 81       	ldd	r31, Y+4	; 0x04
    2f7e:	22 81       	ldd	r18, Z+2	; 0x02
    2f80:	33 81       	ldd	r19, Z+3	; 0x03
    2f82:	8d 81       	ldd	r24, Y+5	; 0x05
    2f84:	9e 81       	ldd	r25, Y+6	; 0x06
    2f86:	fc 01       	movw	r30, r24
    2f88:	46 81       	ldd	r20, Z+6	; 0x06
    2f8a:	c9 01       	movw	r24, r18
    2f8c:	64 2f       	mov	r22, r20
    2f8e:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <xlist_switch>

        SPIN_UNLOCK( sched );
    2f92:	8b 81       	ldd	r24, Y+3	; 0x03
    2f94:	9c 81       	ldd	r25, Y+4	; 0x04
    2f96:	8a 96       	adiw	r24, 0x2a	; 42
    2f98:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
        //Проверяем, не истек ли квант времени процесса
        if( current_proc->timer > (timer_t)1 )current_proc->timer--;// Не истек, уменьшаем таймер
    2f9c:	ed 81       	ldd	r30, Y+5	; 0x05
    2f9e:	fe 81       	ldd	r31, Y+6	; 0x06
    2fa0:	85 8d       	ldd	r24, Z+29	; 0x1d
    2fa2:	96 8d       	ldd	r25, Z+30	; 0x1e
    2fa4:	82 30       	cpi	r24, 0x02	; 2
    2fa6:	91 05       	cpc	r25, r1
    2fa8:	40 f0       	brcs	.+16     	; 0x2fba <sched_schedule+0xcc>
    2faa:	ed 81       	ldd	r30, Y+5	; 0x05
    2fac:	fe 81       	ldd	r31, Y+6	; 0x06
    2fae:	85 8d       	ldd	r24, Z+29	; 0x1d
    2fb0:	96 8d       	ldd	r25, Z+30	; 0x1e
    2fb2:	01 97       	sbiw	r24, 0x01	; 1
    2fb4:	96 8f       	std	Z+30, r25	; 0x1e
    2fb6:	85 8f       	std	Z+29, r24	; 0x1d
    2fb8:	6f c0       	rjmp	.+222    	; 0x3098 <sched_schedule+0x1aa>
        else
        {
            flag_t flags;
            // Истек, вырезаем процесс из списка
            SPIN_LOCK( sched );
    2fba:	8b 81       	ldd	r24, Y+3	; 0x03
    2fbc:	9c 81       	ldd	r25, Y+4	; 0x04
    2fbe:	8a 96       	adiw	r24, 0x2a	; 42
    2fc0:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>

            pitem_fast_cut( (pitem_t *)current_proc );
    2fc4:	8d 81       	ldd	r24, Y+5	; 0x05
    2fc6:	9e 81       	ldd	r25, Y+6	; 0x06
    2fc8:	0e 94 47 11 	call	0x228e	; 0x228e <pitem_fast_cut>

            SPIN_UNLOCK( sched );
    2fcc:	8b 81       	ldd	r24, Y+3	; 0x03
    2fce:	9c 81       	ldd	r25, Y+4	; 0x04
    2fd0:	8a 96       	adiw	r24, 0x2a	; 42
    2fd2:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
            spin_lock( &kernel.stat_lock );
            // Обновили статистику после удаления процесса из списка ready
            stat_dec( current_proc, (stat_t *)kernel.stat + current_proc->core_id );
#endif // CONFIG_USE_ALB
            // А что за процесс собственно?
            flags = current_proc->flags;
    2fd6:	ed 81       	ldd	r30, Y+5	; 0x05
    2fd8:	fe 81       	ldd	r31, Y+6	; 0x06
    2fda:	87 81       	ldd	r24, Z+7	; 0x07
    2fdc:	90 85       	ldd	r25, Z+8	; 0x08
    2fde:	9a 83       	std	Y+2, r25	; 0x02
    2fe0:	89 83       	std	Y+1, r24	; 0x01
            if(
    2fe2:	89 81       	ldd	r24, Y+1	; 0x01
    2fe4:	9a 81       	ldd	r25, Y+2	; 0x02
    2fe6:	81 70       	andi	r24, 0x01	; 1
    2fe8:	90 70       	andi	r25, 0x00	; 0
    2fea:	00 97       	sbiw	r24, 0x00	; 0
    2fec:	31 f0       	breq	.+12     	; 0x2ffa <sched_schedule+0x10c>
    2fee:	89 81       	ldd	r24, Y+1	; 0x01
    2ff0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ff2:	8c 70       	andi	r24, 0x0C	; 12
    2ff4:	90 70       	andi	r25, 0x00	; 0
    2ff6:	00 97       	sbiw	r24, 0x00	; 0
    2ff8:	f1 f0       	breq	.+60     	; 0x3036 <sched_schedule+0x148>
                SPIN_LOCK( new_sched );
                pitem_insert( (pitem_t *)current_proc, new_sched->expired );
                SPIN_UNLOCK( new_sched );
#else // CONFIG_MP CONFIG_USE_ALB
                // Тупо переносим процесс в список expired
                SPIN_LOCK( sched );
    2ffa:	8b 81       	ldd	r24, Y+3	; 0x03
    2ffc:	9c 81       	ldd	r25, Y+4	; 0x04
    2ffe:	8a 96       	adiw	r24, 0x2a	; 42
    3000:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>

                pitem_insert( (pitem_t *)current_proc, sched->expired );
    3004:	8d 81       	ldd	r24, Y+5	; 0x05
    3006:	9e 81       	ldd	r25, Y+6	; 0x06
    3008:	eb 81       	ldd	r30, Y+3	; 0x03
    300a:	fc 81       	ldd	r31, Y+4	; 0x04
    300c:	24 81       	ldd	r18, Z+4	; 0x04
    300e:	35 81       	ldd	r19, Z+5	; 0x05
    3010:	b9 01       	movw	r22, r18
    3012:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <pitem_insert>

                SPIN_UNLOCK( sched );
    3016:	8b 81       	ldd	r24, Y+3	; 0x03
    3018:	9c 81       	ldd	r25, Y+4	; 0x04
    301a:	8a 96       	adiw	r24, 0x2a	; 42
    301c:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>

#endif // CONFIG_MP CONFIG_USE_ALB
                current_proc->timer = current_proc->time_quant; // Сбросили таймер!
    3020:	ad 81       	ldd	r26, Y+5	; 0x05
    3022:	be 81       	ldd	r27, Y+6	; 0x06
    3024:	ed 81       	ldd	r30, Y+5	; 0x05
    3026:	fe 81       	ldd	r31, Y+6	; 0x06
    3028:	83 8d       	ldd	r24, Z+27	; 0x1b
    302a:	94 8d       	ldd	r25, Z+28	; 0x1c
    302c:	5e 96       	adiw	r26, 0x1e	; 30
    302e:	9c 93       	st	X, r25
    3030:	8e 93       	st	-X, r24
    3032:	5d 97       	sbiw	r26, 0x1d	; 29
    3034:	31 c0       	rjmp	.+98     	; 0x3098 <sched_schedule+0x1aa>
                /*********************************************************
                Если не используется активная схема балансировки нагрузки,
                то захват нужно делать тут, блокировка захватывается только
                в этой ветви оператора if.
                *********************************************************/
                spin_lock( &kernel.stat_lock );
    3036:	83 e9       	ldi	r24, 0x93	; 147
    3038:	93 e0       	ldi	r25, 0x03	; 3
    303a:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
                stat_dec( current_proc, (stat_t *)kernel.stat + current_proc->core_id );
    303e:	4d 81       	ldd	r20, Y+5	; 0x05
    3040:	5e 81       	ldd	r21, Y+6	; 0x06
    3042:	ed 81       	ldd	r30, Y+5	; 0x05
    3044:	fe 81       	ldd	r31, Y+6	; 0x06
    3046:	81 a1       	ldd	r24, Z+33	; 0x21
    3048:	88 2f       	mov	r24, r24
    304a:	90 e0       	ldi	r25, 0x00	; 0
    304c:	9c 01       	movw	r18, r24
    304e:	2f 56       	subi	r18, 0x6F	; 111
    3050:	3c 4f       	sbci	r19, 0xFC	; 252
    3052:	ca 01       	movw	r24, r20
    3054:	b9 01       	movw	r22, r18
    3056:	0e 94 58 01 	call	0x2b0	; 0x2b0 <stat_dec>
                 - если используется активная схема балансировки нагрузки,
                то блокировка была захвачена до входа в if;
                 - если не используется активная схема балансировки нагрузки,
                то блокировка была захвачена в этой ветви if.
                *********************************************************/
                spin_unlock( &kernel.stat_lock );
    305a:	83 e9       	ldi	r24, 0x93	; 147
    305c:	93 e0       	ldi	r25, 0x03	; 3
    305e:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
#endif // CONFIG_MP
                ((pitem_t *)current_proc)->list = (xlist_t *)0;// Просто вырезали из списка, как в pitem_cut
    3062:	8d 81       	ldd	r24, Y+5	; 0x05
    3064:	9e 81       	ldd	r25, Y+6	; 0x06
    3066:	fc 01       	movw	r30, r24
    3068:	15 82       	std	Z+5, r1	; 0x05
    306a:	14 82       	std	Z+4, r1	; 0x04
                current_proc->flags |= PROC_FLG_WD_STOP;//Остановлен по WD
    306c:	ad 81       	ldd	r26, Y+5	; 0x05
    306e:	be 81       	ldd	r27, Y+6	; 0x06
    3070:	ed 81       	ldd	r30, Y+5	; 0x05
    3072:	fe 81       	ldd	r31, Y+6	; 0x06
    3074:	87 81       	ldd	r24, Z+7	; 0x07
    3076:	90 85       	ldd	r25, Z+8	; 0x08
    3078:	92 60       	ori	r25, 0x02	; 2
    307a:	18 96       	adiw	r26, 0x08	; 8
    307c:	9c 93       	st	X, r25
    307e:	8e 93       	st	-X, r24
    3080:	17 97       	sbiw	r26, 0x07	; 7
                current_proc->flags &= ~PROC_FLG_RUN;
    3082:	ad 81       	ldd	r26, Y+5	; 0x05
    3084:	be 81       	ldd	r27, Y+6	; 0x06
    3086:	ed 81       	ldd	r30, Y+5	; 0x05
    3088:	fe 81       	ldd	r31, Y+6	; 0x06
    308a:	87 81       	ldd	r24, Z+7	; 0x07
    308c:	90 85       	ldd	r25, Z+8	; 0x08
    308e:	8d 7f       	andi	r24, 0xFD	; 253
    3090:	18 96       	adiw	r26, 0x08	; 8
    3092:	9c 93       	st	X, r25
    3094:	8e 93       	st	-X, r24
    3096:	17 97       	sbiw	r26, 0x07	; 7
            }
        }
    }
    //Текущий процесс более не нужен, освобождаем его блокировку
    SPIN_UNLOCK( current_proc );
    3098:	8d 81       	ldd	r24, Y+5	; 0x05
    309a:	9e 81       	ldd	r25, Y+6	; 0x06
    309c:	83 96       	adiw	r24, 0x23	; 35
    309e:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>

    _sched_switch_current( sched, &current_proc );
    30a2:	8b 81       	ldd	r24, Y+3	; 0x03
    30a4:	9c 81       	ldd	r25, Y+4	; 0x04
    30a6:	9e 01       	movw	r18, r28
    30a8:	2b 5f       	subi	r18, 0xFB	; 251
    30aa:	3f 4f       	sbci	r19, 0xFF	; 255
    30ac:	b9 01       	movw	r22, r18
    30ae:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <_sched_switch_current>

    SPIN_LOCK( current_proc );
    30b2:	8d 81       	ldd	r24, Y+5	; 0x05
    30b4:	9e 81       	ldd	r25, Y+6	; 0x06
    30b6:	83 96       	adiw	r24, 0x23	; 35
    30b8:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    //Хук "восстановление контекста"
    if( current_proc->rs_hook )current_proc->rs_hook( current_proc->arg );
    30bc:	ed 81       	ldd	r30, Y+5	; 0x05
    30be:	fe 81       	ldd	r31, Y+6	; 0x06
    30c0:	80 a5       	ldd	r24, Z+40	; 0x28
    30c2:	91 a5       	ldd	r25, Z+41	; 0x29
    30c4:	00 97       	sbiw	r24, 0x00	; 0
    30c6:	51 f0       	breq	.+20     	; 0x30dc <sched_schedule+0x1ee>
    30c8:	ed 81       	ldd	r30, Y+5	; 0x05
    30ca:	fe 81       	ldd	r31, Y+6	; 0x06
    30cc:	20 a5       	ldd	r18, Z+40	; 0x28
    30ce:	31 a5       	ldd	r19, Z+41	; 0x29
    30d0:	ed 81       	ldd	r30, Y+5	; 0x05
    30d2:	fe 81       	ldd	r31, Y+6	; 0x06
    30d4:	82 a5       	ldd	r24, Z+42	; 0x2a
    30d6:	93 a5       	ldd	r25, Z+43	; 0x2b
    30d8:	f9 01       	movw	r30, r18
    30da:	09 95       	icall

    SPIN_UNLOCK( current_proc );
    30dc:	8d 81       	ldd	r24, Y+5	; 0x05
    30de:	9e 81       	ldd	r25, Y+6	; 0x06
    30e0:	83 96       	adiw	r24, 0x23	; 35
    30e2:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
}
    30e6:	26 96       	adiw	r28, 0x06	; 6
    30e8:	0f b6       	in	r0, 0x3f	; 63
    30ea:	f8 94       	cli
    30ec:	de bf       	out	0x3e, r29	; 62
    30ee:	0f be       	out	0x3f, r0	; 63
    30f0:	cd bf       	out	0x3d, r28	; 61
    30f2:	cf 91       	pop	r28
    30f4:	df 91       	pop	r29
    30f6:	08 95       	ret

000030f8 <sched_reschedule>:
//----------------------------------------------------------------------------------------
// Функция перепланирования, переключает процессы в обработчике прерывания resched
void sched_reschedule(void)
{
    30f8:	df 93       	push	r29
    30fa:	cf 93       	push	r28
    30fc:	00 d0       	rcall	.+0      	; 0x30fe <sched_reschedule+0x6>
    30fe:	00 d0       	rcall	.+0      	; 0x3100 <sched_reschedule+0x8>
    3100:	cd b7       	in	r28, 0x3d	; 61
    3102:	de b7       	in	r29, 0x3e	; 62
    proc_t * current_proc;
    sched_t * sched;
    sched = _SCHED_INIT();
    3104:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <current_core>
    3108:	28 2f       	mov	r18, r24
    310a:	30 e0       	ldi	r19, 0x00	; 0
    310c:	8b e2       	ldi	r24, 0x2B	; 43
    310e:	90 e0       	ldi	r25, 0x00	; 0
    3110:	ac 01       	movw	r20, r24
    3112:	24 9f       	mul	r18, r20
    3114:	c0 01       	movw	r24, r0
    3116:	25 9f       	mul	r18, r21
    3118:	90 0d       	add	r25, r0
    311a:	34 9f       	mul	r19, r20
    311c:	90 0d       	add	r25, r0
    311e:	11 24       	eor	r1, r1
    3120:	85 52       	subi	r24, 0x25	; 37
    3122:	9d 4f       	sbci	r25, 0xFD	; 253
    3124:	9a 83       	std	Y+2, r25	; 0x02
    3126:	89 83       	std	Y+1, r24	; 0x01
    // Меняем только с локального процессора, блокировку sched->lock можно не захватывать!
    current_proc = sched->current_proc;
    3128:	e9 81       	ldd	r30, Y+1	; 0x01
    312a:	fa 81       	ldd	r31, Y+2	; 0x02
    312c:	80 81       	ld	r24, Z
    312e:	91 81       	ldd	r25, Z+1	; 0x01
    3130:	9c 83       	std	Y+4, r25	; 0x04
    3132:	8b 83       	std	Y+3, r24	; 0x03
    // А вот эту блокировку обязательно надо захватить!
    SPIN_LOCK( current_proc );
    3134:	8b 81       	ldd	r24, Y+3	; 0x03
    3136:	9c 81       	ldd	r25, Y+4	; 0x04
    3138:	83 96       	adiw	r24, 0x23	; 35
    313a:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    // Хук "сохранение контекста"
    if( current_proc->sv_hook )current_proc->sv_hook( current_proc->arg );
    313e:	eb 81       	ldd	r30, Y+3	; 0x03
    3140:	fc 81       	ldd	r31, Y+4	; 0x04
    3142:	86 a1       	ldd	r24, Z+38	; 0x26
    3144:	97 a1       	ldd	r25, Z+39	; 0x27
    3146:	00 97       	sbiw	r24, 0x00	; 0
    3148:	51 f0       	breq	.+20     	; 0x315e <sched_reschedule+0x66>
    314a:	eb 81       	ldd	r30, Y+3	; 0x03
    314c:	fc 81       	ldd	r31, Y+4	; 0x04
    314e:	26 a1       	ldd	r18, Z+38	; 0x26
    3150:	37 a1       	ldd	r19, Z+39	; 0x27
    3152:	eb 81       	ldd	r30, Y+3	; 0x03
    3154:	fc 81       	ldd	r31, Y+4	; 0x04
    3156:	82 a5       	ldd	r24, Z+42	; 0x2a
    3158:	93 a5       	ldd	r25, Z+43	; 0x2b
    315a:	f9 01       	movw	r30, r18
    315c:	09 95       	icall

    SPIN_UNLOCK( current_proc );
    315e:	8b 81       	ldd	r24, Y+3	; 0x03
    3160:	9c 81       	ldd	r25, Y+4	; 0x04
    3162:	83 96       	adiw	r24, 0x23	; 35
    3164:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>

    _sched_switch_current( sched, &current_proc );
    3168:	89 81       	ldd	r24, Y+1	; 0x01
    316a:	9a 81       	ldd	r25, Y+2	; 0x02
    316c:	9e 01       	movw	r18, r28
    316e:	2d 5f       	subi	r18, 0xFD	; 253
    3170:	3f 4f       	sbci	r19, 0xFF	; 255
    3172:	b9 01       	movw	r22, r18
    3174:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <_sched_switch_current>

    SPIN_LOCK( current_proc );
    3178:	8b 81       	ldd	r24, Y+3	; 0x03
    317a:	9c 81       	ldd	r25, Y+4	; 0x04
    317c:	83 96       	adiw	r24, 0x23	; 35
    317e:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    //Хук "восстановление контекста"
    if( current_proc->rs_hook )current_proc->rs_hook( current_proc->arg );
    3182:	eb 81       	ldd	r30, Y+3	; 0x03
    3184:	fc 81       	ldd	r31, Y+4	; 0x04
    3186:	80 a5       	ldd	r24, Z+40	; 0x28
    3188:	91 a5       	ldd	r25, Z+41	; 0x29
    318a:	00 97       	sbiw	r24, 0x00	; 0
    318c:	51 f0       	breq	.+20     	; 0x31a2 <sched_reschedule+0xaa>
    318e:	eb 81       	ldd	r30, Y+3	; 0x03
    3190:	fc 81       	ldd	r31, Y+4	; 0x04
    3192:	20 a5       	ldd	r18, Z+40	; 0x28
    3194:	31 a5       	ldd	r19, Z+41	; 0x29
    3196:	eb 81       	ldd	r30, Y+3	; 0x03
    3198:	fc 81       	ldd	r31, Y+4	; 0x04
    319a:	82 a5       	ldd	r24, Z+42	; 0x2a
    319c:	93 a5       	ldd	r25, Z+43	; 0x2b
    319e:	f9 01       	movw	r30, r18
    31a0:	09 95       	icall

    SPIN_UNLOCK( current_proc );
    31a2:	8b 81       	ldd	r24, Y+3	; 0x03
    31a4:	9c 81       	ldd	r25, Y+4	; 0x04
    31a6:	83 96       	adiw	r24, 0x23	; 35
    31a8:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
}
    31ac:	0f 90       	pop	r0
    31ae:	0f 90       	pop	r0
    31b0:	0f 90       	pop	r0
    31b2:	0f 90       	pop	r0
    31b4:	cf 91       	pop	r28
    31b6:	df 91       	pop	r29
    31b8:	08 95       	ret

000031ba <sem_init_isr>:
*****************************************************************************************/
#include "../include/bugurt.h"

// Инициализация
void sem_init_isr( sem_t * sem, count_t count )
{
    31ba:	df 93       	push	r29
    31bc:	cf 93       	push	r28
    31be:	00 d0       	rcall	.+0      	; 0x31c0 <sem_init_isr+0x6>
    31c0:	00 d0       	rcall	.+0      	; 0x31c2 <sem_init_isr+0x8>
    31c2:	cd b7       	in	r28, 0x3d	; 61
    31c4:	de b7       	in	r29, 0x3e	; 62
    31c6:	9a 83       	std	Y+2, r25	; 0x02
    31c8:	89 83       	std	Y+1, r24	; 0x01
    31ca:	7c 83       	std	Y+4, r23	; 0x04
    31cc:	6b 83       	std	Y+3, r22	; 0x03
    SPIN_INIT( sem );
    31ce:	89 81       	ldd	r24, Y+1	; 0x01
    31d0:	9a 81       	ldd	r25, Y+2	; 0x02
    31d2:	43 96       	adiw	r24, 0x13	; 19
    31d4:	0e 94 0b 01 	call	0x216	; 0x216 <spin_init>
    SPIN_LOCK( sem );
    31d8:	89 81       	ldd	r24, Y+1	; 0x01
    31da:	9a 81       	ldd	r25, Y+2	; 0x02
    31dc:	43 96       	adiw	r24, 0x13	; 19
    31de:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>

    xlist_init( (xlist_t *)sem );
    31e2:	89 81       	ldd	r24, Y+1	; 0x01
    31e4:	9a 81       	ldd	r25, Y+2	; 0x02
    31e6:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <xlist_init>
    sem->counter = count;
    31ea:	e9 81       	ldd	r30, Y+1	; 0x01
    31ec:	fa 81       	ldd	r31, Y+2	; 0x02
    31ee:	8b 81       	ldd	r24, Y+3	; 0x03
    31f0:	9c 81       	ldd	r25, Y+4	; 0x04
    31f2:	92 8b       	std	Z+18, r25	; 0x12
    31f4:	81 8b       	std	Z+17, r24	; 0x11
    SPIN_UNLOCK( sem );
    31f6:	89 81       	ldd	r24, Y+1	; 0x01
    31f8:	9a 81       	ldd	r25, Y+2	; 0x02
    31fa:	43 96       	adiw	r24, 0x13	; 19
    31fc:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
}
    3200:	0f 90       	pop	r0
    3202:	0f 90       	pop	r0
    3204:	0f 90       	pop	r0
    3206:	0f 90       	pop	r0
    3208:	cf 91       	pop	r28
    320a:	df 91       	pop	r29
    320c:	08 95       	ret

0000320e <_sem_lock>:

bool_t _sem_lock( sem_t * sem )
{
    320e:	df 93       	push	r29
    3210:	cf 93       	push	r28
    3212:	00 d0       	rcall	.+0      	; 0x3214 <_sem_lock+0x6>
    3214:	00 d0       	rcall	.+0      	; 0x3216 <_sem_lock+0x8>
    3216:	0f 92       	push	r0
    3218:	cd b7       	in	r28, 0x3d	; 61
    321a:	de b7       	in	r29, 0x3e	; 62
    321c:	9d 83       	std	Y+5, r25	; 0x05
    321e:	8c 83       	std	Y+4, r24	; 0x04
    bool_t ret = (bool_t)0;
    3220:	1b 82       	std	Y+3, r1	; 0x03
    proc_t * proc;
    proc = current_proc();
    3222:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <current_proc>
    3226:	9a 83       	std	Y+2, r25	; 0x02
    3228:	89 83       	std	Y+1, r24	; 0x01
    // Выставляем флаг захватат семафора
    SPIN_LOCK( proc );
    322a:	89 81       	ldd	r24, Y+1	; 0x01
    322c:	9a 81       	ldd	r25, Y+2	; 0x02
    322e:	83 96       	adiw	r24, 0x23	; 35
    3230:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    proc->flags |= PROC_FLG_SEM;
    3234:	e9 81       	ldd	r30, Y+1	; 0x01
    3236:	fa 81       	ldd	r31, Y+2	; 0x02
    3238:	87 81       	ldd	r24, Z+7	; 0x07
    323a:	90 85       	ldd	r25, Z+8	; 0x08
    323c:	88 60       	ori	r24, 0x08	; 8
    323e:	e9 81       	ldd	r30, Y+1	; 0x01
    3240:	fa 81       	ldd	r31, Y+2	; 0x02
    3242:	90 87       	std	Z+8, r25	; 0x08
    3244:	87 83       	std	Z+7, r24	; 0x07
    SPIN_UNLOCK( proc );
    3246:	89 81       	ldd	r24, Y+1	; 0x01
    3248:	9a 81       	ldd	r25, Y+2	; 0x02
    324a:	83 96       	adiw	r24, 0x23	; 35
    324c:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
    // Собственно захват семафора
    SPIN_LOCK( sem );
    3250:	8c 81       	ldd	r24, Y+4	; 0x04
    3252:	9d 81       	ldd	r25, Y+5	; 0x05
    3254:	43 96       	adiw	r24, 0x13	; 19
    3256:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    if( sem->counter != 0 )
    325a:	ec 81       	ldd	r30, Y+4	; 0x04
    325c:	fd 81       	ldd	r31, Y+5	; 0x05
    325e:	81 89       	ldd	r24, Z+17	; 0x11
    3260:	92 89       	ldd	r25, Z+18	; 0x12
    3262:	00 97       	sbiw	r24, 0x00	; 0
    3264:	61 f0       	breq	.+24     	; 0x327e <_sem_lock+0x70>
    {
        sem->counter--;
    3266:	ec 81       	ldd	r30, Y+4	; 0x04
    3268:	fd 81       	ldd	r31, Y+5	; 0x05
    326a:	81 89       	ldd	r24, Z+17	; 0x11
    326c:	92 89       	ldd	r25, Z+18	; 0x12
    326e:	01 97       	sbiw	r24, 0x01	; 1
    3270:	ec 81       	ldd	r30, Y+4	; 0x04
    3272:	fd 81       	ldd	r31, Y+5	; 0x05
    3274:	92 8b       	std	Z+18, r25	; 0x12
    3276:	81 8b       	std	Z+17, r24	; 0x11
        ret = (bool_t)1;
    3278:	81 e0       	ldi	r24, 0x01	; 1
    327a:	8b 83       	std	Y+3, r24	; 0x03
    327c:	1e c0       	rjmp	.+60     	; 0x32ba <_sem_lock+0xac>
    }
    else
    {
        SPIN_LOCK( proc );
    327e:	89 81       	ldd	r24, Y+1	; 0x01
    3280:	9a 81       	ldd	r25, Y+2	; 0x02
    3282:	83 96       	adiw	r24, 0x23	; 35
    3284:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
        proc->flags |= PROC_FLG_QUEUE;
    3288:	e9 81       	ldd	r30, Y+1	; 0x01
    328a:	fa 81       	ldd	r31, Y+2	; 0x02
    328c:	87 81       	ldd	r24, Z+7	; 0x07
    328e:	90 85       	ldd	r25, Z+8	; 0x08
    3290:	80 61       	ori	r24, 0x10	; 16
    3292:	e9 81       	ldd	r30, Y+1	; 0x01
    3294:	fa 81       	ldd	r31, Y+2	; 0x02
    3296:	90 87       	std	Z+8, r25	; 0x08
    3298:	87 83       	std	Z+7, r24	; 0x07
        _proc_stop( proc );
    329a:	89 81       	ldd	r24, Y+1	; 0x01
    329c:	9a 81       	ldd	r25, Y+2	; 0x02
    329e:	0e 94 38 14 	call	0x2870	; 0x2870 <_proc_stop>
        pitem_insert( (pitem_t *)proc, (xlist_t *)sem );
    32a2:	89 81       	ldd	r24, Y+1	; 0x01
    32a4:	9a 81       	ldd	r25, Y+2	; 0x02
    32a6:	2c 81       	ldd	r18, Y+4	; 0x04
    32a8:	3d 81       	ldd	r19, Y+5	; 0x05
    32aa:	b9 01       	movw	r22, r18
    32ac:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <pitem_insert>
        SPIN_UNLOCK( proc );
    32b0:	89 81       	ldd	r24, Y+1	; 0x01
    32b2:	9a 81       	ldd	r25, Y+2	; 0x02
    32b4:	83 96       	adiw	r24, 0x23	; 35
    32b6:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
    }
    SPIN_UNLOCK( sem );
    32ba:	8c 81       	ldd	r24, Y+4	; 0x04
    32bc:	9d 81       	ldd	r25, Y+5	; 0x05
    32be:	43 96       	adiw	r24, 0x13	; 19
    32c0:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
    return ret;
    32c4:	8b 81       	ldd	r24, Y+3	; 0x03
}
    32c6:	0f 90       	pop	r0
    32c8:	0f 90       	pop	r0
    32ca:	0f 90       	pop	r0
    32cc:	0f 90       	pop	r0
    32ce:	0f 90       	pop	r0
    32d0:	cf 91       	pop	r28
    32d2:	df 91       	pop	r29
    32d4:	08 95       	ret

000032d6 <_sem_try_lock>:

bool_t _sem_try_lock( sem_t * sem )
{
    32d6:	df 93       	push	r29
    32d8:	cf 93       	push	r28
    32da:	00 d0       	rcall	.+0      	; 0x32dc <_sem_try_lock+0x6>
    32dc:	00 d0       	rcall	.+0      	; 0x32de <_sem_try_lock+0x8>
    32de:	0f 92       	push	r0
    32e0:	cd b7       	in	r28, 0x3d	; 61
    32e2:	de b7       	in	r29, 0x3e	; 62
    32e4:	9d 83       	std	Y+5, r25	; 0x05
    32e6:	8c 83       	std	Y+4, r24	; 0x04
    bool_t ret = (bool_t)0;
    32e8:	1b 82       	std	Y+3, r1	; 0x03
    SPIN_LOCK( sem );
    32ea:	8c 81       	ldd	r24, Y+4	; 0x04
    32ec:	9d 81       	ldd	r25, Y+5	; 0x05
    32ee:	43 96       	adiw	r24, 0x13	; 19
    32f0:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    if( sem->counter != 0 )
    32f4:	ec 81       	ldd	r30, Y+4	; 0x04
    32f6:	fd 81       	ldd	r31, Y+5	; 0x05
    32f8:	81 89       	ldd	r24, Z+17	; 0x11
    32fa:	92 89       	ldd	r25, Z+18	; 0x12
    32fc:	00 97       	sbiw	r24, 0x00	; 0
    32fe:	11 f1       	breq	.+68     	; 0x3344 <_sem_try_lock+0x6e>
    {
        proc_t * proc;
        proc = current_proc();
    3300:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <current_proc>
    3304:	9a 83       	std	Y+2, r25	; 0x02
    3306:	89 83       	std	Y+1, r24	; 0x01

        sem->counter--;
    3308:	ec 81       	ldd	r30, Y+4	; 0x04
    330a:	fd 81       	ldd	r31, Y+5	; 0x05
    330c:	81 89       	ldd	r24, Z+17	; 0x11
    330e:	92 89       	ldd	r25, Z+18	; 0x12
    3310:	01 97       	sbiw	r24, 0x01	; 1
    3312:	ec 81       	ldd	r30, Y+4	; 0x04
    3314:	fd 81       	ldd	r31, Y+5	; 0x05
    3316:	92 8b       	std	Z+18, r25	; 0x12
    3318:	81 8b       	std	Z+17, r24	; 0x11
        ret = (bool_t)1;
    331a:	81 e0       	ldi	r24, 0x01	; 1
    331c:	8b 83       	std	Y+3, r24	; 0x03
        // Выставляем флаг захватат семафора
        SPIN_LOCK( proc );
    331e:	89 81       	ldd	r24, Y+1	; 0x01
    3320:	9a 81       	ldd	r25, Y+2	; 0x02
    3322:	83 96       	adiw	r24, 0x23	; 35
    3324:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
        proc->flags |= PROC_FLG_SEM;
    3328:	e9 81       	ldd	r30, Y+1	; 0x01
    332a:	fa 81       	ldd	r31, Y+2	; 0x02
    332c:	87 81       	ldd	r24, Z+7	; 0x07
    332e:	90 85       	ldd	r25, Z+8	; 0x08
    3330:	88 60       	ori	r24, 0x08	; 8
    3332:	e9 81       	ldd	r30, Y+1	; 0x01
    3334:	fa 81       	ldd	r31, Y+2	; 0x02
    3336:	90 87       	std	Z+8, r25	; 0x08
    3338:	87 83       	std	Z+7, r24	; 0x07
        SPIN_UNLOCK( proc );
    333a:	89 81       	ldd	r24, Y+1	; 0x01
    333c:	9a 81       	ldd	r25, Y+2	; 0x02
    333e:	83 96       	adiw	r24, 0x23	; 35
    3340:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
    }
    SPIN_UNLOCK( sem );
    3344:	8c 81       	ldd	r24, Y+4	; 0x04
    3346:	9d 81       	ldd	r25, Y+5	; 0x05
    3348:	43 96       	adiw	r24, 0x13	; 19
    334a:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
    return ret;
    334e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3350:	0f 90       	pop	r0
    3352:	0f 90       	pop	r0
    3354:	0f 90       	pop	r0
    3356:	0f 90       	pop	r0
    3358:	0f 90       	pop	r0
    335a:	cf 91       	pop	r28
    335c:	df 91       	pop	r29
    335e:	08 95       	ret

00003360 <sem_unlock_isr>:

void sem_unlock_isr( sem_t * sem )
{
    3360:	df 93       	push	r29
    3362:	cf 93       	push	r28
    3364:	00 d0       	rcall	.+0      	; 0x3366 <sem_unlock_isr+0x6>
    3366:	00 d0       	rcall	.+0      	; 0x3368 <sem_unlock_isr+0x8>
    3368:	cd b7       	in	r28, 0x3d	; 61
    336a:	de b7       	in	r29, 0x3e	; 62
    336c:	9c 83       	std	Y+4, r25	; 0x04
    336e:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc;
    SPIN_LOCK( sem );
    3370:	8b 81       	ldd	r24, Y+3	; 0x03
    3372:	9c 81       	ldd	r25, Y+4	; 0x04
    3374:	43 96       	adiw	r24, 0x13	; 19
    3376:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>

    if( ((xlist_t *)sem)->index == (index_t)0  )
    337a:	eb 81       	ldd	r30, Y+3	; 0x03
    337c:	fc 81       	ldd	r31, Y+4	; 0x04
    337e:	80 89       	ldd	r24, Z+16	; 0x10
    3380:	88 23       	and	r24, r24
    3382:	51 f4       	brne	.+20     	; 0x3398 <sem_unlock_isr+0x38>
    {
        sem->counter++;
    3384:	eb 81       	ldd	r30, Y+3	; 0x03
    3386:	fc 81       	ldd	r31, Y+4	; 0x04
    3388:	81 89       	ldd	r24, Z+17	; 0x11
    338a:	92 89       	ldd	r25, Z+18	; 0x12
    338c:	01 96       	adiw	r24, 0x01	; 1
    338e:	eb 81       	ldd	r30, Y+3	; 0x03
    3390:	fc 81       	ldd	r31, Y+4	; 0x04
    3392:	92 8b       	std	Z+18, r25	; 0x12
    3394:	81 8b       	std	Z+17, r24	; 0x11
    3396:	21 c0       	rjmp	.+66     	; 0x33da <sem_unlock_isr+0x7a>
        goto end;
    }
    proc = (proc_t *)xlist_head((xlist_t *)sem);
    3398:	8b 81       	ldd	r24, Y+3	; 0x03
    339a:	9c 81       	ldd	r25, Y+4	; 0x04
    339c:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <xlist_head>
    33a0:	9a 83       	std	Y+2, r25	; 0x02
    33a2:	89 83       	std	Y+1, r24	; 0x01

    SPIN_LOCK( proc );
    33a4:	89 81       	ldd	r24, Y+1	; 0x01
    33a6:	9a 81       	ldd	r25, Y+2	; 0x02
    33a8:	83 96       	adiw	r24, 0x23	; 35
    33aa:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>

    pitem_cut( (pitem_t *)proc );
    33ae:	89 81       	ldd	r24, Y+1	; 0x01
    33b0:	9a 81       	ldd	r25, Y+2	; 0x02
    33b2:	0e 94 a6 11 	call	0x234c	; 0x234c <pitem_cut>
    proc->flags &= ~PROC_FLG_QUEUE;
    33b6:	e9 81       	ldd	r30, Y+1	; 0x01
    33b8:	fa 81       	ldd	r31, Y+2	; 0x02
    33ba:	87 81       	ldd	r24, Z+7	; 0x07
    33bc:	90 85       	ldd	r25, Z+8	; 0x08
    33be:	8f 7e       	andi	r24, 0xEF	; 239
    33c0:	e9 81       	ldd	r30, Y+1	; 0x01
    33c2:	fa 81       	ldd	r31, Y+2	; 0x02
    33c4:	90 87       	std	Z+8, r25	; 0x08
    33c6:	87 83       	std	Z+7, r24	; 0x07
    _proc_run( proc );
    33c8:	89 81       	ldd	r24, Y+1	; 0x01
    33ca:	9a 81       	ldd	r25, Y+2	; 0x02
    33cc:	0e 94 2b 13 	call	0x2656	; 0x2656 <_proc_run>

    SPIN_UNLOCK( proc );
    33d0:	89 81       	ldd	r24, Y+1	; 0x01
    33d2:	9a 81       	ldd	r25, Y+2	; 0x02
    33d4:	83 96       	adiw	r24, 0x23	; 35
    33d6:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
end:
    SPIN_UNLOCK( sem );
    33da:	8b 81       	ldd	r24, Y+3	; 0x03
    33dc:	9c 81       	ldd	r25, Y+4	; 0x04
    33de:	43 96       	adiw	r24, 0x13	; 19
    33e0:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
}
    33e4:	0f 90       	pop	r0
    33e6:	0f 90       	pop	r0
    33e8:	0f 90       	pop	r0
    33ea:	0f 90       	pop	r0
    33ec:	cf 91       	pop	r28
    33ee:	df 91       	pop	r29
    33f0:	08 95       	ret

000033f2 <sig_init_isr>:
*****************************************************************************************/
#include "../include/bugurt.h"
//========================================================================================
// Инициация
void sig_init_isr( sig_t * sig )
{
    33f2:	df 93       	push	r29
    33f4:	cf 93       	push	r28
    33f6:	00 d0       	rcall	.+0      	; 0x33f8 <sig_init_isr+0x6>
    33f8:	0f 92       	push	r0
    33fa:	cd b7       	in	r28, 0x3d	; 61
    33fc:	de b7       	in	r29, 0x3e	; 62
    33fe:	9b 83       	std	Y+3, r25	; 0x03
    3400:	8a 83       	std	Y+2, r24	; 0x02
#ifdef CONFIG_MP
    core_id_t i;
    SPIN_INIT( sig );
    3402:	8a 81       	ldd	r24, Y+2	; 0x02
    3404:	9b 81       	ldd	r25, Y+3	; 0x03
    3406:	84 96       	adiw	r24, 0x24	; 36
    3408:	0e 94 0b 01 	call	0x216	; 0x216 <spin_init>
    SPIN_LOCK( sig );
    340c:	8a 81       	ldd	r24, Y+2	; 0x02
    340e:	9b 81       	ldd	r25, Y+3	; 0x03
    3410:	84 96       	adiw	r24, 0x24	; 36
    3412:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    for( i = 0; i < (core_id_t)MAX_CORES; i++ )
    3416:	19 82       	std	Y+1, r1	; 0x01
    3418:	21 c0       	rjmp	.+66     	; 0x345c <sig_init_isr+0x6a>
    {
        xlist_init( (xlist_t *)sig->sig_list + i );
    341a:	4a 81       	ldd	r20, Y+2	; 0x02
    341c:	5b 81       	ldd	r21, Y+3	; 0x03
    341e:	89 81       	ldd	r24, Y+1	; 0x01
    3420:	28 2f       	mov	r18, r24
    3422:	30 e0       	ldi	r19, 0x00	; 0
    3424:	c9 01       	movw	r24, r18
    3426:	82 95       	swap	r24
    3428:	92 95       	swap	r25
    342a:	90 7f       	andi	r25, 0xF0	; 240
    342c:	98 27       	eor	r25, r24
    342e:	80 7f       	andi	r24, 0xF0	; 240
    3430:	98 27       	eor	r25, r24
    3432:	82 0f       	add	r24, r18
    3434:	93 1f       	adc	r25, r19
    3436:	84 0f       	add	r24, r20
    3438:	95 1f       	adc	r25, r21
    343a:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <xlist_init>
        stat_init( (stat_t *)sig->sig_stat + i );
    343e:	8a 81       	ldd	r24, Y+2	; 0x02
    3440:	9b 81       	ldd	r25, Y+3	; 0x03
    3442:	9c 01       	movw	r18, r24
    3444:	2e 5d       	subi	r18, 0xDE	; 222
    3446:	3f 4f       	sbci	r19, 0xFF	; 255
    3448:	89 81       	ldd	r24, Y+1	; 0x01
    344a:	88 2f       	mov	r24, r24
    344c:	90 e0       	ldi	r25, 0x00	; 0
    344e:	82 0f       	add	r24, r18
    3450:	93 1f       	adc	r25, r19
    3452:	0e 94 49 01 	call	0x292	; 0x292 <stat_init>
{
#ifdef CONFIG_MP
    core_id_t i;
    SPIN_INIT( sig );
    SPIN_LOCK( sig );
    for( i = 0; i < (core_id_t)MAX_CORES; i++ )
    3456:	89 81       	ldd	r24, Y+1	; 0x01
    3458:	8f 5f       	subi	r24, 0xFF	; 255
    345a:	89 83       	std	Y+1, r24	; 0x01
    345c:	89 81       	ldd	r24, Y+1	; 0x01
    345e:	82 30       	cpi	r24, 0x02	; 2
    3460:	e0 f2       	brcs	.-72     	; 0x341a <sig_init_isr+0x28>
    {
        xlist_init( (xlist_t *)sig->sig_list + i );
        stat_init( (stat_t *)sig->sig_stat + i );
    }
    SPIN_UNLOCK( sig );
    3462:	8a 81       	ldd	r24, Y+2	; 0x02
    3464:	9b 81       	ldd	r25, Y+3	; 0x03
    3466:	84 96       	adiw	r24, 0x24	; 36
    3468:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
#else
    xlist_init( (xlist_t *)sig );
#endif
}
    346c:	0f 90       	pop	r0
    346e:	0f 90       	pop	r0
    3470:	0f 90       	pop	r0
    3472:	cf 91       	pop	r28
    3474:	df 91       	pop	r29
    3476:	08 95       	ret

00003478 <_sig_wait_prologue>:
//========================================================================================
// Это выполнится при постановке процесса в список ожидания сигнала
void _sig_wait_prologue( sig_t * sig )
{
    3478:	df 93       	push	r29
    347a:	cf 93       	push	r28
    347c:	00 d0       	rcall	.+0      	; 0x347e <_sig_wait_prologue+0x6>
    347e:	00 d0       	rcall	.+0      	; 0x3480 <_sig_wait_prologue+0x8>
    3480:	0f 92       	push	r0
    3482:	cd b7       	in	r28, 0x3d	; 61
    3484:	de b7       	in	r29, 0x3e	; 62
    3486:	9d 83       	std	Y+5, r25	; 0x05
    3488:	8c 83       	std	Y+4, r24	; 0x04
    proc_t * proc;

    SPIN_LOCK( sig );
    348a:	8c 81       	ldd	r24, Y+4	; 0x04
    348c:	9d 81       	ldd	r25, Y+5	; 0x05
    348e:	84 96       	adiw	r24, 0x24	; 36
    3490:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>

    proc = current_proc();
    3494:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <current_proc>
    3498:	9b 83       	std	Y+3, r25	; 0x03
    349a:	8a 83       	std	Y+2, r24	; 0x02
    SPIN_LOCK( proc );
    349c:	8a 81       	ldd	r24, Y+2	; 0x02
    349e:	9b 81       	ldd	r25, Y+3	; 0x03
    34a0:	83 96       	adiw	r24, 0x23	; 35
    34a2:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>

    // Останавливаем процесс
    proc->flags |= PROC_FLG_WAIT;
    34a6:	ea 81       	ldd	r30, Y+2	; 0x02
    34a8:	fb 81       	ldd	r31, Y+3	; 0x03
    34aa:	87 81       	ldd	r24, Z+7	; 0x07
    34ac:	90 85       	ldd	r25, Z+8	; 0x08
    34ae:	80 62       	ori	r24, 0x20	; 32
    34b0:	ea 81       	ldd	r30, Y+2	; 0x02
    34b2:	fb 81       	ldd	r31, Y+3	; 0x03
    34b4:	90 87       	std	Z+8, r25	; 0x08
    34b6:	87 83       	std	Z+7, r24	; 0x07
    _proc_stop_( proc );
    34b8:	8a 81       	ldd	r24, Y+2	; 0x02
    34ba:	9b 81       	ldd	r25, Y+3	; 0x03
    34bc:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <_proc_stop_>
    RESCHED_PROC( proc );
    34c0:	ea 81       	ldd	r30, Y+2	; 0x02
    34c2:	fb 81       	ldd	r31, Y+3	; 0x03
    34c4:	81 a1       	ldd	r24, Z+33	; 0x21
    34c6:	0e 94 b4 01 	call	0x368	; 0x368 <resched>
        Балансировка нагрузки производится заранее,
        в этом случае получается сделать sig_broadcast  с временем выполнения O(1),
        однако про hotplug  придется забыть, ну и ладно.
        */
        core_id_t sig_core;
        sig_core = sched_load_balancer( proc, (stat_t *)sig->sig_stat );
    34ca:	8c 81       	ldd	r24, Y+4	; 0x04
    34cc:	9d 81       	ldd	r25, Y+5	; 0x05
    34ce:	9c 01       	movw	r18, r24
    34d0:	2e 5d       	subi	r18, 0xDE	; 222
    34d2:	3f 4f       	sbci	r19, 0xFF	; 255
    34d4:	8a 81       	ldd	r24, Y+2	; 0x02
    34d6:	9b 81       	ldd	r25, Y+3	; 0x03
    34d8:	b9 01       	movw	r22, r18
    34da:	0e 94 22 16 	call	0x2c44	; 0x2c44 <sched_load_balancer>
    34de:	89 83       	std	Y+1, r24	; 0x01

        proc->core_id = sig_core;
    34e0:	ea 81       	ldd	r30, Y+2	; 0x02
    34e2:	fb 81       	ldd	r31, Y+3	; 0x03
    34e4:	89 81       	ldd	r24, Y+1	; 0x01
    34e6:	81 a3       	std	Z+33, r24	; 0x21
        pitem_insert((pitem_t *)proc, (xlist_t *)sig + sig_core);
    34e8:	6a 81       	ldd	r22, Y+2	; 0x02
    34ea:	7b 81       	ldd	r23, Y+3	; 0x03
    34ec:	4c 81       	ldd	r20, Y+4	; 0x04
    34ee:	5d 81       	ldd	r21, Y+5	; 0x05
    34f0:	89 81       	ldd	r24, Y+1	; 0x01
    34f2:	28 2f       	mov	r18, r24
    34f4:	30 e0       	ldi	r19, 0x00	; 0
    34f6:	c9 01       	movw	r24, r18
    34f8:	82 95       	swap	r24
    34fa:	92 95       	swap	r25
    34fc:	90 7f       	andi	r25, 0xF0	; 240
    34fe:	98 27       	eor	r25, r24
    3500:	80 7f       	andi	r24, 0xF0	; 240
    3502:	98 27       	eor	r25, r24
    3504:	82 0f       	add	r24, r18
    3506:	93 1f       	adc	r25, r19
    3508:	9a 01       	movw	r18, r20
    350a:	28 0f       	add	r18, r24
    350c:	39 1f       	adc	r19, r25
    350e:	cb 01       	movw	r24, r22
    3510:	b9 01       	movw	r22, r18
    3512:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <pitem_insert>
        stat_inc( proc, (stat_t *)sig->sig_stat + sig_core );
    3516:	8c 81       	ldd	r24, Y+4	; 0x04
    3518:	9d 81       	ldd	r25, Y+5	; 0x05
    351a:	9c 01       	movw	r18, r24
    351c:	2e 5d       	subi	r18, 0xDE	; 222
    351e:	3f 4f       	sbci	r19, 0xFF	; 255
    3520:	89 81       	ldd	r24, Y+1	; 0x01
    3522:	88 2f       	mov	r24, r24
    3524:	90 e0       	ldi	r25, 0x00	; 0
    3526:	28 0f       	add	r18, r24
    3528:	39 1f       	adc	r19, r25
    352a:	8a 81       	ldd	r24, Y+2	; 0x02
    352c:	9b 81       	ldd	r25, Y+3	; 0x03
    352e:	b9 01       	movw	r22, r18
    3530:	0e 94 6e 01 	call	0x2dc	; 0x2dc <stat_inc>
    }
#else
    pitem_insert( (pitem_t *)proc, (xlist_t *)sig );
#endif //CONFIG_MP
    SPIN_UNLOCK( proc );
    3534:	8a 81       	ldd	r24, Y+2	; 0x02
    3536:	9b 81       	ldd	r25, Y+3	; 0x03
    3538:	83 96       	adiw	r24, 0x23	; 35
    353a:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
    SPIN_UNLOCK( sig );
    353e:	8c 81       	ldd	r24, Y+4	; 0x04
    3540:	9d 81       	ldd	r25, Y+5	; 0x05
    3542:	84 96       	adiw	r24, 0x24	; 36
    3544:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
}
    3548:	0f 90       	pop	r0
    354a:	0f 90       	pop	r0
    354c:	0f 90       	pop	r0
    354e:	0f 90       	pop	r0
    3550:	0f 90       	pop	r0
    3552:	cf 91       	pop	r28
    3554:	df 91       	pop	r29
    3556:	08 95       	ret

00003558 <_sig_wakeup_list_proc>:
//========================================================================================
//
static void _sig_wakeup_list_proc( proc_t * proc )
{
    3558:	df 93       	push	r29
    355a:	cf 93       	push	r28
    355c:	00 d0       	rcall	.+0      	; 0x355e <_sig_wakeup_list_proc+0x6>
    355e:	cd b7       	in	r28, 0x3d	; 61
    3560:	de b7       	in	r29, 0x3e	; 62
    3562:	9a 83       	std	Y+2, r25	; 0x02
    3564:	89 83       	std	Y+1, r24	; 0x01
    SPIN_LOCK( proc );
    3566:	89 81       	ldd	r24, Y+1	; 0x01
    3568:	9a 81       	ldd	r25, Y+2	; 0x02
    356a:	83 96       	adiw	r24, 0x23	; 35
    356c:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    proc->buf = ((item_t *)proc)->next;
    3570:	e9 81       	ldd	r30, Y+1	; 0x01
    3572:	fa 81       	ldd	r31, Y+2	; 0x02
    3574:	80 81       	ld	r24, Z
    3576:	91 81       	ldd	r25, Z+1	; 0x01
    3578:	e9 81       	ldd	r30, Y+1	; 0x01
    357a:	fa 81       	ldd	r31, Y+2	; 0x02
    357c:	90 a3       	std	Z+32, r25	; 0x20
    357e:	87 8f       	std	Z+31, r24	; 0x1f
    item_cut( (item_t *)proc );                  // Вырезать процесс из простого списка гораздо проще, чем из xlist
    3580:	89 81       	ldd	r24, Y+1	; 0x01
    3582:	9a 81       	ldd	r25, Y+2	; 0x02
    3584:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <item_cut>
    _proc_run_( proc );
    3588:	89 81       	ldd	r24, Y+1	; 0x01
    358a:	9a 81       	ldd	r25, Y+2	; 0x02
    358c:	0e 94 f6 12 	call	0x25ec	; 0x25ec <_proc_run_>
    SPIN_UNLOCK( proc );
    3590:	89 81       	ldd	r24, Y+1	; 0x01
    3592:	9a 81       	ldd	r25, Y+2	; 0x02
    3594:	83 96       	adiw	r24, 0x23	; 35
    3596:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
}
    359a:	0f 90       	pop	r0
    359c:	0f 90       	pop	r0
    359e:	cf 91       	pop	r28
    35a0:	df 91       	pop	r29
    35a2:	08 95       	ret

000035a4 <_sig_wait_epilogue>:

void _sig_wait_epilogue( void )
{
    35a4:	df 93       	push	r29
    35a6:	cf 93       	push	r28
    35a8:	00 d0       	rcall	.+0      	; 0x35aa <_sig_wait_epilogue+0x6>
    35aa:	00 d0       	rcall	.+0      	; 0x35ac <_sig_wait_epilogue+0x8>
    35ac:	cd b7       	in	r28, 0x3d	; 61
    35ae:	de b7       	in	r29, 0x3e	; 62
    proc_t * proc;
    proc_t * wakeup_proc;
    proc = current_proc();
    35b0:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <current_proc>
    35b4:	9c 83       	std	Y+4, r25	; 0x04
    35b6:	8b 83       	std	Y+3, r24	; 0x03

    SPIN_LOCK( proc );
    35b8:	8b 81       	ldd	r24, Y+3	; 0x03
    35ba:	9c 81       	ldd	r25, Y+4	; 0x04
    35bc:	83 96       	adiw	r24, 0x23	; 35
    35be:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    wakeup_proc = (proc_t *)proc->buf;
    35c2:	eb 81       	ldd	r30, Y+3	; 0x03
    35c4:	fc 81       	ldd	r31, Y+4	; 0x04
    35c6:	87 8d       	ldd	r24, Z+31	; 0x1f
    35c8:	90 a1       	ldd	r25, Z+32	; 0x20
    35ca:	9a 83       	std	Y+2, r25	; 0x02
    35cc:	89 83       	std	Y+1, r24	; 0x01
    proc->buf = (void *)0;
    35ce:	eb 81       	ldd	r30, Y+3	; 0x03
    35d0:	fc 81       	ldd	r31, Y+4	; 0x04
    35d2:	10 a2       	std	Z+32, r1	; 0x20
    35d4:	17 8e       	std	Z+31, r1	; 0x1f
    SPIN_UNLOCK( proc );
    35d6:	8b 81       	ldd	r24, Y+3	; 0x03
    35d8:	9c 81       	ldd	r25, Y+4	; 0x04
    35da:	83 96       	adiw	r24, 0x23	; 35
    35dc:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
    // Надо разбудить следующий процесс в списке.
    if( wakeup_proc )
    35e0:	89 81       	ldd	r24, Y+1	; 0x01
    35e2:	9a 81       	ldd	r25, Y+2	; 0x02
    35e4:	00 97       	sbiw	r24, 0x00	; 0
    35e6:	59 f0       	breq	.+22     	; 0x35fe <_sig_wait_epilogue+0x5a>
    {
        // Если есть другие процессы для пробуждения, то "будим" самый приоритетный из них, он продолжит "побудку".
        if( wakeup_proc != proc )
    35e8:	29 81       	ldd	r18, Y+1	; 0x01
    35ea:	3a 81       	ldd	r19, Y+2	; 0x02
    35ec:	8b 81       	ldd	r24, Y+3	; 0x03
    35ee:	9c 81       	ldd	r25, Y+4	; 0x04
    35f0:	28 17       	cp	r18, r24
    35f2:	39 07       	cpc	r19, r25
    35f4:	21 f0       	breq	.+8      	; 0x35fe <_sig_wait_epilogue+0x5a>
        {
            //Нельзя будить себя! Будим только другой процесс!
            _sig_wakeup_list_proc( wakeup_proc );
    35f6:	89 81       	ldd	r24, Y+1	; 0x01
    35f8:	9a 81       	ldd	r25, Y+2	; 0x02
    35fa:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_sig_wakeup_list_proc>
        }
    }
}
    35fe:	0f 90       	pop	r0
    3600:	0f 90       	pop	r0
    3602:	0f 90       	pop	r0
    3604:	0f 90       	pop	r0
    3606:	cf 91       	pop	r28
    3608:	df 91       	pop	r29
    360a:	08 95       	ret

0000360c <sig_signal_isr>:
//========================================================================================
// Будит 1 процесс, для вызова из обработчиков прерываний
void sig_signal_isr( sig_t * sig )
{
    360c:	df 93       	push	r29
    360e:	cf 93       	push	r28
    3610:	cd b7       	in	r28, 0x3d	; 61
    3612:	de b7       	in	r29, 0x3e	; 62
    3614:	29 97       	sbiw	r28, 0x09	; 9
    3616:	0f b6       	in	r0, 0x3f	; 63
    3618:	f8 94       	cli
    361a:	de bf       	out	0x3e, r29	; 62
    361c:	0f be       	out	0x3f, r0	; 63
    361e:	cd bf       	out	0x3d, r28	; 61
    3620:	99 87       	std	Y+9, r25	; 0x09
    3622:	88 87       	std	Y+8, r24	; 0x08
#ifdef CONFIG_MP
    core_id_t core;
    proc_t * proc;
    // Поиск процесса для запуска
    SPIN_LOCK( sig );// Захват блокировки сигнала
    3624:	88 85       	ldd	r24, Y+8	; 0x08
    3626:	99 85       	ldd	r25, Y+9	; 0x09
    3628:	84 96       	adiw	r24, 0x24	; 36
    362a:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    // Находим самую нагруженную  структуру stat_t в сигнале
    core = sched_highest_load_core( (stat_t *)sig->sig_stat );
    362e:	88 85       	ldd	r24, Y+8	; 0x08
    3630:	99 85       	ldd	r25, Y+9	; 0x09
    3632:	82 96       	adiw	r24, 0x22	; 34
    3634:	0e 94 94 16 	call	0x2d28	; 0x2d28 <sched_highest_load_core>
    3638:	8f 83       	std	Y+7, r24	; 0x07
    // Этот процесс мы будем запускать
    {
        xlist_t * sig_list;
        sig_list = (xlist_t *)sig->sig_list + core;
    363a:	48 85       	ldd	r20, Y+8	; 0x08
    363c:	59 85       	ldd	r21, Y+9	; 0x09
    363e:	8f 81       	ldd	r24, Y+7	; 0x07
    3640:	28 2f       	mov	r18, r24
    3642:	30 e0       	ldi	r19, 0x00	; 0
    3644:	c9 01       	movw	r24, r18
    3646:	82 95       	swap	r24
    3648:	92 95       	swap	r25
    364a:	90 7f       	andi	r25, 0xF0	; 240
    364c:	98 27       	eor	r25, r24
    364e:	80 7f       	andi	r24, 0xF0	; 240
    3650:	98 27       	eor	r25, r24
    3652:	82 0f       	add	r24, r18
    3654:	93 1f       	adc	r25, r19
    3656:	84 0f       	add	r24, r20
    3658:	95 1f       	adc	r25, r21
    365a:	9c 83       	std	Y+4, r25	; 0x04
    365c:	8b 83       	std	Y+3, r24	; 0x03
        if(sig_list->index == (index_t)0)
    365e:	eb 81       	ldd	r30, Y+3	; 0x03
    3660:	fc 81       	ldd	r31, Y+4	; 0x04
    3662:	80 89       	ldd	r24, Z+16	; 0x10
    3664:	88 23       	and	r24, r24
    3666:	31 f4       	brne	.+12     	; 0x3674 <sig_signal_isr+0x68>
        {
            SPIN_UNLOCK( sig );
    3668:	88 85       	ldd	r24, Y+8	; 0x08
    366a:	99 85       	ldd	r25, Y+9	; 0x09
    366c:	84 96       	adiw	r24, 0x24	; 36
    366e:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
    3672:	62 c0       	rjmp	.+196    	; 0x3738 <sig_signal_isr+0x12c>
            return;
        }
        proc = (proc_t *)xlist_head( sig_list );
    3674:	8b 81       	ldd	r24, Y+3	; 0x03
    3676:	9c 81       	ldd	r25, Y+4	; 0x04
    3678:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <xlist_head>
    367c:	9e 83       	std	Y+6, r25	; 0x06
    367e:	8d 83       	std	Y+5, r24	; 0x05
    }
    SPIN_LOCK( proc );// Захват блокировки процесса
    3680:	8d 81       	ldd	r24, Y+5	; 0x05
    3682:	9e 81       	ldd	r25, Y+6	; 0x06
    3684:	83 96       	adiw	r24, 0x23	; 35
    3686:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    // Вырезаем процесс из списка ожидания сигнала
    pitem_fast_cut( (pitem_t *)proc );
    368a:	8d 81       	ldd	r24, Y+5	; 0x05
    368c:	9e 81       	ldd	r25, Y+6	; 0x06
    368e:	0e 94 47 11 	call	0x228e	; 0x228e <pitem_fast_cut>
    stat_dec( proc, (stat_t *)sig->sig_stat + core );
    3692:	88 85       	ldd	r24, Y+8	; 0x08
    3694:	99 85       	ldd	r25, Y+9	; 0x09
    3696:	9c 01       	movw	r18, r24
    3698:	2e 5d       	subi	r18, 0xDE	; 222
    369a:	3f 4f       	sbci	r19, 0xFF	; 255
    369c:	8f 81       	ldd	r24, Y+7	; 0x07
    369e:	88 2f       	mov	r24, r24
    36a0:	90 e0       	ldi	r25, 0x00	; 0
    36a2:	28 0f       	add	r18, r24
    36a4:	39 1f       	adc	r19, r25
    36a6:	8d 81       	ldd	r24, Y+5	; 0x05
    36a8:	9e 81       	ldd	r25, Y+6	; 0x06
    36aa:	b9 01       	movw	r22, r18
    36ac:	0e 94 58 01 	call	0x2b0	; 0x2b0 <stat_dec>
    //Запуск процесса
    // Вставляем его в список ready соответствующего планировщика
    spin_lock( &kernel.stat_lock );
    36b0:	83 e9       	ldi	r24, 0x93	; 147
    36b2:	93 e0       	ldi	r25, 0x03	; 3
    36b4:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    stat_inc( proc, (stat_t *)kernel.stat + core ); // Обновление статистики
    36b8:	8f 81       	ldd	r24, Y+7	; 0x07
    36ba:	88 2f       	mov	r24, r24
    36bc:	90 e0       	ldi	r25, 0x00	; 0
    36be:	9c 01       	movw	r18, r24
    36c0:	2f 56       	subi	r18, 0x6F	; 111
    36c2:	3c 4f       	sbci	r19, 0xFC	; 252
    36c4:	8d 81       	ldd	r24, Y+5	; 0x05
    36c6:	9e 81       	ldd	r25, Y+6	; 0x06
    36c8:	b9 01       	movw	r22, r18
    36ca:	0e 94 6e 01 	call	0x2dc	; 0x2dc <stat_inc>
    spin_unlock( &kernel.stat_lock );
    36ce:	83 e9       	ldi	r24, 0x93	; 147
    36d0:	93 e0       	ldi	r25, 0x03	; 3
    36d2:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
    {
        sched_t * sched;
        sched = kernel.sched + core;// Дада, нагрузка была сбалансирована на этапе постановки в список ожидания
    36d6:	8f 81       	ldd	r24, Y+7	; 0x07
    36d8:	28 2f       	mov	r18, r24
    36da:	30 e0       	ldi	r19, 0x00	; 0
    36dc:	8b e2       	ldi	r24, 0x2B	; 43
    36de:	90 e0       	ldi	r25, 0x00	; 0
    36e0:	ac 01       	movw	r20, r24
    36e2:	24 9f       	mul	r18, r20
    36e4:	c0 01       	movw	r24, r0
    36e6:	25 9f       	mul	r18, r21
    36e8:	90 0d       	add	r25, r0
    36ea:	34 9f       	mul	r19, r20
    36ec:	90 0d       	add	r25, r0
    36ee:	11 24       	eor	r1, r1
    36f0:	85 52       	subi	r24, 0x25	; 37
    36f2:	9d 4f       	sbci	r25, 0xFD	; 253
    36f4:	9a 83       	std	Y+2, r25	; 0x02
    36f6:	89 83       	std	Y+1, r24	; 0x01
        SPIN_LOCK( sched );
    36f8:	89 81       	ldd	r24, Y+1	; 0x01
    36fa:	9a 81       	ldd	r25, Y+2	; 0x02
    36fc:	8a 96       	adiw	r24, 0x2a	; 42
    36fe:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
        pitem_insert((pitem_t *)proc, sched->ready );
    3702:	8d 81       	ldd	r24, Y+5	; 0x05
    3704:	9e 81       	ldd	r25, Y+6	; 0x06
    3706:	e9 81       	ldd	r30, Y+1	; 0x01
    3708:	fa 81       	ldd	r31, Y+2	; 0x02
    370a:	22 81       	ldd	r18, Z+2	; 0x02
    370c:	33 81       	ldd	r19, Z+3	; 0x03
    370e:	b9 01       	movw	r22, r18
    3710:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <pitem_insert>
        SPIN_UNLOCK( sched );
    3714:	89 81       	ldd	r24, Y+1	; 0x01
    3716:	9a 81       	ldd	r25, Y+2	; 0x02
    3718:	8a 96       	adiw	r24, 0x2a	; 42
    371a:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
    }
    resched(core);// Перепланировка
    371e:	8f 81       	ldd	r24, Y+7	; 0x07
    3720:	0e 94 b4 01 	call	0x368	; 0x368 <resched>
    SPIN_UNLOCK( proc );// Освобождение блокировки процесса
    3724:	8d 81       	ldd	r24, Y+5	; 0x05
    3726:	9e 81       	ldd	r25, Y+6	; 0x06
    3728:	83 96       	adiw	r24, 0x23	; 35
    372a:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
    SPIN_UNLOCK( sig );// Освобождение блокировки сигнала
    372e:	88 85       	ldd	r24, Y+8	; 0x08
    3730:	99 85       	ldd	r25, Y+9	; 0x09
    3732:	84 96       	adiw	r24, 0x24	; 36
    3734:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
    proc = (proc_t *)xlist_head( (xlist_t *)sig );
    pitem_fast_cut( (pitem_t *)proc );
    pitem_insert( (pitem_t *)proc, kernel.sched.ready );
    resched();
#endif //CONFIG_MP
}
    3738:	29 96       	adiw	r28, 0x09	; 9
    373a:	0f b6       	in	r0, 0x3f	; 63
    373c:	f8 94       	cli
    373e:	de bf       	out	0x3e, r29	; 62
    3740:	0f be       	out	0x3f, r0	; 63
    3742:	cd bf       	out	0x3d, r28	; 61
    3744:	cf 91       	pop	r28
    3746:	df 91       	pop	r29
    3748:	08 95       	ret

0000374a <sig_broadcast_isr>:
//----------------------------------------------------------------------------------------
// Будит все ожидающие процессы
void sig_broadcast_isr( sig_t * sig )
{
    374a:	df 93       	push	r29
    374c:	cf 93       	push	r28
    374e:	00 d0       	rcall	.+0      	; 0x3750 <sig_broadcast_isr+0x6>
    3750:	00 d0       	rcall	.+0      	; 0x3752 <sig_broadcast_isr+0x8>
    3752:	0f 92       	push	r0
    3754:	cd b7       	in	r28, 0x3d	; 61
    3756:	de b7       	in	r29, 0x3e	; 62
    3758:	9d 83       	std	Y+5, r25	; 0x05
    375a:	8c 83       	std	Y+4, r24	; 0x04
#ifdef CONFIG_MP
    core_id_t core;
    SPIN_LOCK( sig );
    375c:	8c 81       	ldd	r24, Y+4	; 0x04
    375e:	9d 81       	ldd	r25, Y+5	; 0x05
    3760:	84 96       	adiw	r24, 0x24	; 36
    3762:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    for(core = 0; core < (core_id_t)MAX_CORES; core++)
    3766:	1b 82       	std	Y+3, r1	; 0x03
    3768:	3f c0       	rjmp	.+126    	; 0x37e8 <sig_broadcast_isr+0x9e>
        proc_t * wakeup_proc;
        /*
        Фактически процессы еще не поставлены на выполнение,
        но обязательно будут, это надо учитывать при баланисировке нагрузки.
        */
        spin_lock( &kernel.stat_lock );
    376a:	83 e9       	ldi	r24, 0x93	; 147
    376c:	93 e0       	ldi	r25, 0x03	; 3
    376e:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
        stat_merge( (stat_t *)sig->sig_stat + core, (stat_t *)kernel.stat + core );
    3772:	8c 81       	ldd	r24, Y+4	; 0x04
    3774:	9d 81       	ldd	r25, Y+5	; 0x05
    3776:	9c 01       	movw	r18, r24
    3778:	2e 5d       	subi	r18, 0xDE	; 222
    377a:	3f 4f       	sbci	r19, 0xFF	; 255
    377c:	8b 81       	ldd	r24, Y+3	; 0x03
    377e:	88 2f       	mov	r24, r24
    3780:	90 e0       	ldi	r25, 0x00	; 0
    3782:	a9 01       	movw	r20, r18
    3784:	48 0f       	add	r20, r24
    3786:	59 1f       	adc	r21, r25
    3788:	8b 81       	ldd	r24, Y+3	; 0x03
    378a:	88 2f       	mov	r24, r24
    378c:	90 e0       	ldi	r25, 0x00	; 0
    378e:	9c 01       	movw	r18, r24
    3790:	2f 56       	subi	r18, 0x6F	; 111
    3792:	3c 4f       	sbci	r19, 0xFC	; 252
    3794:	ca 01       	movw	r24, r20
    3796:	b9 01       	movw	r22, r18
    3798:	0e 94 84 01 	call	0x308	; 0x308 <stat_merge>
        spin_unlock( &kernel.stat_lock );
    379c:	83 e9       	ldi	r24, 0x93	; 147
    379e:	93 e0       	ldi	r25, 0x03	; 3
    37a0:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
        /*
        Сцепляем список и будим его голову.
        */
        wakeup_proc = (proc_t *)pitem_xlist_chain( (xlist_t *)sig + core );
    37a4:	4c 81       	ldd	r20, Y+4	; 0x04
    37a6:	5d 81       	ldd	r21, Y+5	; 0x05
    37a8:	8b 81       	ldd	r24, Y+3	; 0x03
    37aa:	28 2f       	mov	r18, r24
    37ac:	30 e0       	ldi	r19, 0x00	; 0
    37ae:	c9 01       	movw	r24, r18
    37b0:	82 95       	swap	r24
    37b2:	92 95       	swap	r25
    37b4:	90 7f       	andi	r25, 0xF0	; 240
    37b6:	98 27       	eor	r25, r24
    37b8:	80 7f       	andi	r24, 0xF0	; 240
    37ba:	98 27       	eor	r25, r24
    37bc:	82 0f       	add	r24, r18
    37be:	93 1f       	adc	r25, r19
    37c0:	84 0f       	add	r24, r20
    37c2:	95 1f       	adc	r25, r21
    37c4:	0e 94 ba 11 	call	0x2374	; 0x2374 <pitem_xlist_chain>
    37c8:	9a 83       	std	Y+2, r25	; 0x02
    37ca:	89 83       	std	Y+1, r24	; 0x01
        if( wakeup_proc )
    37cc:	89 81       	ldd	r24, Y+1	; 0x01
    37ce:	9a 81       	ldd	r25, Y+2	; 0x02
    37d0:	00 97       	sbiw	r24, 0x00	; 0
    37d2:	21 f0       	breq	.+8      	; 0x37dc <sig_broadcast_isr+0x92>
        {
            _sig_wakeup_list_proc( wakeup_proc );
    37d4:	89 81       	ldd	r24, Y+1	; 0x01
    37d6:	9a 81       	ldd	r25, Y+2	; 0x02
    37d8:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_sig_wakeup_list_proc>
        }

        resched(core);
    37dc:	8b 81       	ldd	r24, Y+3	; 0x03
    37de:	0e 94 b4 01 	call	0x368	; 0x368 <resched>
void sig_broadcast_isr( sig_t * sig )
{
#ifdef CONFIG_MP
    core_id_t core;
    SPIN_LOCK( sig );
    for(core = 0; core < (core_id_t)MAX_CORES; core++)
    37e2:	8b 81       	ldd	r24, Y+3	; 0x03
    37e4:	8f 5f       	subi	r24, 0xFF	; 255
    37e6:	8b 83       	std	Y+3, r24	; 0x03
    37e8:	8b 81       	ldd	r24, Y+3	; 0x03
    37ea:	82 30       	cpi	r24, 0x02	; 2
    37ec:	08 f4       	brcc	.+2      	; 0x37f0 <sig_broadcast_isr+0xa6>
    37ee:	bd cf       	rjmp	.-134    	; 0x376a <sig_broadcast_isr+0x20>
            _sig_wakeup_list_proc( wakeup_proc );
        }

        resched(core);
    }
    SPIN_UNLOCK( sig );
    37f0:	8c 81       	ldd	r24, Y+4	; 0x04
    37f2:	9d 81       	ldd	r25, Y+5	; 0x05
    37f4:	84 96       	adiw	r24, 0x24	; 36
    37f6:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
        _sig_wakeup_list_proc( wakeup_proc );
    }

    resched();
#endif //CONFIG_MP
}
    37fa:	0f 90       	pop	r0
    37fc:	0f 90       	pop	r0
    37fe:	0f 90       	pop	r0
    3800:	0f 90       	pop	r0
    3802:	0f 90       	pop	r0
    3804:	cf 91       	pop	r28
    3806:	df 91       	pop	r29
    3808:	08 95       	ret

0000380a <do_syscall>:
syscall_t syscall_num = (syscall_t)0;
void * syscall_arg = (void *)0;

void do_syscall( void )
#endif // CONFIG_MP
{
    380a:	df 93       	push	r29
    380c:	cf 93       	push	r28
    380e:	cd b7       	in	r28, 0x3d	; 61
    3810:	de b7       	in	r29, 0x3e	; 62
    3812:	27 97       	sbiw	r28, 0x07	; 7
    3814:	0f b6       	in	r0, 0x3f	; 63
    3816:	f8 94       	cli
    3818:	de bf       	out	0x3e, r29	; 62
    381a:	0f be       	out	0x3f, r0	; 63
    381c:	cd bf       	out	0x3d, r28	; 61
    381e:	8d 83       	std	Y+5, r24	; 0x05
    3820:	7f 83       	std	Y+7, r23	; 0x07
    3822:	6e 83       	std	Y+6, r22	; 0x06
    if( syscall_num != (syscall_t)0 )
    3824:	8d 81       	ldd	r24, Y+5	; 0x05
    3826:	88 23       	and	r24, r24
    3828:	e1 f0       	breq	.+56     	; 0x3862 <do_syscall+0x58>
    {
        syscall_num--;
    382a:	8d 81       	ldd	r24, Y+5	; 0x05
    382c:	81 50       	subi	r24, 0x01	; 1
    382e:	8d 83       	std	Y+5, r24	; 0x05
        (SYSCALL_TABLE_READ(syscall_routine[syscall_num]))(syscall_arg);
    3830:	8d 81       	ldd	r24, Y+5	; 0x05
    3832:	88 2f       	mov	r24, r24
    3834:	90 e0       	ldi	r25, 0x00	; 0
    3836:	88 0f       	add	r24, r24
    3838:	99 1f       	adc	r25, r25
    383a:	88 59       	subi	r24, 0x98	; 152
    383c:	9f 4f       	sbci	r25, 0xFF	; 255
    383e:	9c 83       	std	Y+4, r25	; 0x04
    3840:	8b 83       	std	Y+3, r24	; 0x03
    3842:	8b 81       	ldd	r24, Y+3	; 0x03
    3844:	9c 81       	ldd	r25, Y+4	; 0x04
    3846:	fc 01       	movw	r30, r24
    3848:	85 91       	lpm	r24, Z+
    384a:	94 91       	lpm	r25, Z+
    384c:	9a 83       	std	Y+2, r25	; 0x02
    384e:	89 83       	std	Y+1, r24	; 0x01
    3850:	fc 83       	std	Y+4, r31	; 0x04
    3852:	eb 83       	std	Y+3, r30	; 0x03
    3854:	89 81       	ldd	r24, Y+1	; 0x01
    3856:	9a 81       	ldd	r25, Y+2	; 0x02
    3858:	fc 01       	movw	r30, r24
    385a:	8e 81       	ldd	r24, Y+6	; 0x06
    385c:	9f 81       	ldd	r25, Y+7	; 0x07
    385e:	09 95       	icall
        syscall_num = (syscall_t)0;
    3860:	1d 82       	std	Y+5, r1	; 0x05
    }
}
    3862:	27 96       	adiw	r28, 0x07	; 7
    3864:	0f b6       	in	r0, 0x3f	; 63
    3866:	f8 94       	cli
    3868:	de bf       	out	0x3e, r29	; 62
    386a:	0f be       	out	0x3f, r0	; 63
    386c:	cd bf       	out	0x3d, r28	; 61
    386e:	cf 91       	pop	r28
    3870:	df 91       	pop	r29
    3872:	08 95       	ret

00003874 <scall_proc_init>:
***********************************************************************************************
                                    Process control !!!
**********************************************************************************************/
/// SYSCALL_PROC_INIT
void scall_proc_init( void * arg )
{
    3874:	8f 92       	push	r8
    3876:	9f 92       	push	r9
    3878:	af 92       	push	r10
    387a:	bf 92       	push	r11
    387c:	cf 92       	push	r12
    387e:	df 92       	push	r13
    3880:	ef 92       	push	r14
    3882:	ff 92       	push	r15
    3884:	0f 93       	push	r16
    3886:	1f 93       	push	r17
    3888:	df 93       	push	r29
    388a:	cf 93       	push	r28
    388c:	00 d0       	rcall	.+0      	; 0x388e <scall_proc_init+0x1a>
    388e:	cd b7       	in	r28, 0x3d	; 61
    3890:	de b7       	in	r29, 0x3e	; 62
    3892:	9a 83       	std	Y+2, r25	; 0x02
    3894:	89 83       	std	Y+1, r24	; 0x01
    proc_init_isr(
    3896:	e9 81       	ldd	r30, Y+1	; 0x01
    3898:	fa 81       	ldd	r31, Y+2	; 0x02
    389a:	40 81       	ld	r20, Z
    389c:	51 81       	ldd	r21, Z+1	; 0x01
    389e:	e9 81       	ldd	r30, Y+1	; 0x01
    38a0:	fa 81       	ldd	r31, Y+2	; 0x02
    38a2:	62 81       	ldd	r22, Z+2	; 0x02
    38a4:	73 81       	ldd	r23, Z+3	; 0x03
    38a6:	e9 81       	ldd	r30, Y+1	; 0x01
    38a8:	fa 81       	ldd	r31, Y+2	; 0x02
    38aa:	24 81       	ldd	r18, Z+4	; 0x04
    38ac:	35 81       	ldd	r19, Z+5	; 0x05
    38ae:	e9 81       	ldd	r30, Y+1	; 0x01
    38b0:	fa 81       	ldd	r31, Y+2	; 0x02
    38b2:	a6 81       	ldd	r26, Z+6	; 0x06
    38b4:	b7 81       	ldd	r27, Z+7	; 0x07
    38b6:	e9 81       	ldd	r30, Y+1	; 0x01
    38b8:	fa 81       	ldd	r31, Y+2	; 0x02
    38ba:	00 85       	ldd	r16, Z+8	; 0x08
    38bc:	11 85       	ldd	r17, Z+9	; 0x09
    38be:	e9 81       	ldd	r30, Y+1	; 0x01
    38c0:	fa 81       	ldd	r31, Y+2	; 0x02
    38c2:	e2 84       	ldd	r14, Z+10	; 0x0a
    38c4:	f3 84       	ldd	r15, Z+11	; 0x0b
    38c6:	e9 81       	ldd	r30, Y+1	; 0x01
    38c8:	fa 81       	ldd	r31, Y+2	; 0x02
    38ca:	d4 84       	ldd	r13, Z+12	; 0x0c
    38cc:	e9 81       	ldd	r30, Y+1	; 0x01
    38ce:	fa 81       	ldd	r31, Y+2	; 0x02
    38d0:	a5 84       	ldd	r10, Z+13	; 0x0d
    38d2:	b6 84       	ldd	r11, Z+14	; 0x0e
    38d4:	e9 81       	ldd	r30, Y+1	; 0x01
    38d6:	fa 81       	ldd	r31, Y+2	; 0x02
    38d8:	97 84       	ldd	r9, Z+15	; 0x0f
    38da:	e9 81       	ldd	r30, Y+1	; 0x01
    38dc:	fa 81       	ldd	r31, Y+2	; 0x02
    38de:	80 89       	ldd	r24, Z+16	; 0x10
    38e0:	0f 92       	push	r0
    38e2:	ed b7       	in	r30, 0x3d	; 61
    38e4:	fe b7       	in	r31, 0x3e	; 62
    38e6:	31 96       	adiw	r30, 0x01	; 1
    38e8:	80 83       	st	Z, r24
    38ea:	ca 01       	movw	r24, r20
    38ec:	a9 01       	movw	r20, r18
    38ee:	9d 01       	movw	r18, r26
    38f0:	cd 2c       	mov	r12, r13
    38f2:	89 2c       	mov	r8, r9
    38f4:	0e 94 53 12 	call	0x24a6	; 0x24a6 <proc_init_isr>
    38f8:	0f 90       	pop	r0
              ((proc_init_arg_t *)arg)->is_rt
#ifdef CONFIG_MP
              ,((proc_init_arg_t *)arg)-> affinity
#endif // CONFIG_MP
              );
}
    38fa:	0f 90       	pop	r0
    38fc:	0f 90       	pop	r0
    38fe:	cf 91       	pop	r28
    3900:	df 91       	pop	r29
    3902:	1f 91       	pop	r17
    3904:	0f 91       	pop	r16
    3906:	ff 90       	pop	r15
    3908:	ef 90       	pop	r14
    390a:	df 90       	pop	r13
    390c:	cf 90       	pop	r12
    390e:	bf 90       	pop	r11
    3910:	af 90       	pop	r10
    3912:	9f 90       	pop	r9
    3914:	8f 90       	pop	r8
    3916:	08 95       	ret

00003918 <scall_proc_run>:
}
/**********************************************************************************************
                                       SYSCALL_PROC_RUN
**********************************************************************************************/
void scall_proc_run( void * arg )
{
    3918:	0f 93       	push	r16
    391a:	1f 93       	push	r17
    391c:	df 93       	push	r29
    391e:	cf 93       	push	r28
    3920:	00 d0       	rcall	.+0      	; 0x3922 <scall_proc_run+0xa>
    3922:	cd b7       	in	r28, 0x3d	; 61
    3924:	de b7       	in	r29, 0x3e	; 62
    3926:	9a 83       	std	Y+2, r25	; 0x02
    3928:	89 83       	std	Y+1, r24	; 0x01
    ((proc_runtime_arg_t *)arg)->ret = proc_run_isr( ((proc_runtime_arg_t *)arg)->proc );
    392a:	09 81       	ldd	r16, Y+1	; 0x01
    392c:	1a 81       	ldd	r17, Y+2	; 0x02
    392e:	e9 81       	ldd	r30, Y+1	; 0x01
    3930:	fa 81       	ldd	r31, Y+2	; 0x02
    3932:	80 81       	ld	r24, Z
    3934:	91 81       	ldd	r25, Z+1	; 0x01
    3936:	0e 94 68 13 	call	0x26d0	; 0x26d0 <proc_run_isr>
    393a:	f8 01       	movw	r30, r16
    393c:	82 83       	std	Z+2, r24	; 0x02
}
    393e:	0f 90       	pop	r0
    3940:	0f 90       	pop	r0
    3942:	cf 91       	pop	r28
    3944:	df 91       	pop	r29
    3946:	1f 91       	pop	r17
    3948:	0f 91       	pop	r16
    394a:	08 95       	ret

0000394c <scall_proc_restart>:
}
/**********************************************************************************************
                                       SYSCALL_PROC_RESTART
**********************************************************************************************/
void scall_proc_restart( void * arg )
{
    394c:	0f 93       	push	r16
    394e:	1f 93       	push	r17
    3950:	df 93       	push	r29
    3952:	cf 93       	push	r28
    3954:	00 d0       	rcall	.+0      	; 0x3956 <scall_proc_restart+0xa>
    3956:	cd b7       	in	r28, 0x3d	; 61
    3958:	de b7       	in	r29, 0x3e	; 62
    395a:	9a 83       	std	Y+2, r25	; 0x02
    395c:	89 83       	std	Y+1, r24	; 0x01
    ((proc_runtime_arg_t *)arg)->ret = proc_restart_isr( ((proc_runtime_arg_t *)arg)->proc );
    395e:	09 81       	ldd	r16, Y+1	; 0x01
    3960:	1a 81       	ldd	r17, Y+2	; 0x02
    3962:	e9 81       	ldd	r30, Y+1	; 0x01
    3964:	fa 81       	ldd	r31, Y+2	; 0x02
    3966:	80 81       	ld	r24, Z
    3968:	91 81       	ldd	r25, Z+1	; 0x01
    396a:	0e 94 91 13 	call	0x2722	; 0x2722 <proc_restart_isr>
    396e:	f8 01       	movw	r30, r16
    3970:	82 83       	std	Z+2, r24	; 0x02
}
    3972:	0f 90       	pop	r0
    3974:	0f 90       	pop	r0
    3976:	cf 91       	pop	r28
    3978:	df 91       	pop	r29
    397a:	1f 91       	pop	r17
    397c:	0f 91       	pop	r16
    397e:	08 95       	ret

00003980 <scall_proc_stop>:
}
/**********************************************************************************************
                                        SYSCALL_PROC_STOP
**********************************************************************************************/
void scall_proc_stop( void * arg )
{
    3980:	0f 93       	push	r16
    3982:	1f 93       	push	r17
    3984:	df 93       	push	r29
    3986:	cf 93       	push	r28
    3988:	00 d0       	rcall	.+0      	; 0x398a <scall_proc_stop+0xa>
    398a:	cd b7       	in	r28, 0x3d	; 61
    398c:	de b7       	in	r29, 0x3e	; 62
    398e:	9a 83       	std	Y+2, r25	; 0x02
    3990:	89 83       	std	Y+1, r24	; 0x01
    ((proc_runtime_arg_t *)arg)->ret = proc_stop_isr( ((proc_runtime_arg_t *)arg)->proc );
    3992:	09 81       	ldd	r16, Y+1	; 0x01
    3994:	1a 81       	ldd	r17, Y+2	; 0x02
    3996:	e9 81       	ldd	r30, Y+1	; 0x01
    3998:	fa 81       	ldd	r31, Y+2	; 0x02
    399a:	80 81       	ld	r24, Z
    399c:	91 81       	ldd	r25, Z+1	; 0x01
    399e:	0e 94 56 14 	call	0x28ac	; 0x28ac <proc_stop_isr>
    39a2:	f8 01       	movw	r30, r16
    39a4:	82 83       	std	Z+2, r24	; 0x02
}
    39a6:	0f 90       	pop	r0
    39a8:	0f 90       	pop	r0
    39aa:	cf 91       	pop	r28
    39ac:	df 91       	pop	r29
    39ae:	1f 91       	pop	r17
    39b0:	0f 91       	pop	r16
    39b2:	08 95       	ret

000039b4 <scall_proc_self_stop>:
}
/**********************************************************************************************
                                    SYSCALL_PROC_SELF_STOP
**********************************************************************************************/
void scall_proc_self_stop( void * arg )
{
    39b4:	df 93       	push	r29
    39b6:	cf 93       	push	r28
    39b8:	00 d0       	rcall	.+0      	; 0x39ba <scall_proc_self_stop+0x6>
    39ba:	00 d0       	rcall	.+0      	; 0x39bc <scall_proc_self_stop+0x8>
    39bc:	cd b7       	in	r28, 0x3d	; 61
    39be:	de b7       	in	r29, 0x3e	; 62
    39c0:	9c 83       	std	Y+4, r25	; 0x04
    39c2:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = current_proc();
    39c4:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <current_proc>
    39c8:	9a 83       	std	Y+2, r25	; 0x02
    39ca:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
    39cc:	89 81       	ldd	r24, Y+1	; 0x01
    39ce:	9a 81       	ldd	r25, Y+2	; 0x02
    39d0:	83 96       	adiw	r24, 0x23	; 35
    39d2:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
#endif
    _proc_stop( proc );
    39d6:	89 81       	ldd	r24, Y+1	; 0x01
    39d8:	9a 81       	ldd	r25, Y+2	; 0x02
    39da:	0e 94 38 14 	call	0x2870	; 0x2870 <_proc_stop>
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
    39de:	89 81       	ldd	r24, Y+1	; 0x01
    39e0:	9a 81       	ldd	r25, Y+2	; 0x02
    39e2:	83 96       	adiw	r24, 0x23	; 35
    39e4:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
#endif
}
    39e8:	0f 90       	pop	r0
    39ea:	0f 90       	pop	r0
    39ec:	0f 90       	pop	r0
    39ee:	0f 90       	pop	r0
    39f0:	cf 91       	pop	r28
    39f2:	df 91       	pop	r29
    39f4:	08 95       	ret

000039f6 <scall_proc_terminate>:
/**********************************************************************************************
                                    SYSCALL_PROC_TERMINATE
**********************************************************************************************/
// Останов процесса после выхода из pmain, для обертки proc_run_wrapper
void scall_proc_terminate( void * arg )
{
    39f6:	df 93       	push	r29
    39f8:	cf 93       	push	r28
    39fa:	00 d0       	rcall	.+0      	; 0x39fc <scall_proc_terminate+0x6>
    39fc:	cd b7       	in	r28, 0x3d	; 61
    39fe:	de b7       	in	r29, 0x3e	; 62
    3a00:	9a 83       	std	Y+2, r25	; 0x02
    3a02:	89 83       	std	Y+1, r24	; 0x01
    _proc_terminate((proc_t *)arg);
    3a04:	89 81       	ldd	r24, Y+1	; 0x01
    3a06:	9a 81       	ldd	r25, Y+2	; 0x02
    3a08:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <_proc_terminate>
}
    3a0c:	0f 90       	pop	r0
    3a0e:	0f 90       	pop	r0
    3a10:	cf 91       	pop	r28
    3a12:	df 91       	pop	r29
    3a14:	08 95       	ret

00003a16 <proc_run_wrapper>:
void proc_run_wrapper( proc_t * proc )
{
    3a16:	df 93       	push	r29
    3a18:	cf 93       	push	r28
    3a1a:	00 d0       	rcall	.+0      	; 0x3a1c <proc_run_wrapper+0x6>
    3a1c:	00 d0       	rcall	.+0      	; 0x3a1e <proc_run_wrapper+0x8>
    3a1e:	00 d0       	rcall	.+0      	; 0x3a20 <proc_run_wrapper+0xa>
    3a20:	cd b7       	in	r28, 0x3d	; 61
    3a22:	de b7       	in	r29, 0x3e	; 62
    3a24:	9e 83       	std	Y+6, r25	; 0x06
    3a26:	8d 83       	std	Y+5, r24	; 0x05
    code_t pmain;
    void * arg;
    //Атомарно читаем pmain и arg
    disable_interrupts();
    3a28:	0e 94 ca 0a 	call	0x1594	; 0x1594 <disable_interrupts>
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
    3a2c:	8d 81       	ldd	r24, Y+5	; 0x05
    3a2e:	9e 81       	ldd	r25, Y+6	; 0x06
    3a30:	83 96       	adiw	r24, 0x23	; 35
    3a32:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
#endif // CONFIG_MP
    pmain = proc->pmain;
    3a36:	ed 81       	ldd	r30, Y+5	; 0x05
    3a38:	fe 81       	ldd	r31, Y+6	; 0x06
    3a3a:	84 a1       	ldd	r24, Z+36	; 0x24
    3a3c:	95 a1       	ldd	r25, Z+37	; 0x25
    3a3e:	9c 83       	std	Y+4, r25	; 0x04
    3a40:	8b 83       	std	Y+3, r24	; 0x03
    arg = proc->arg;
    3a42:	ed 81       	ldd	r30, Y+5	; 0x05
    3a44:	fe 81       	ldd	r31, Y+6	; 0x06
    3a46:	82 a5       	ldd	r24, Z+42	; 0x2a
    3a48:	93 a5       	ldd	r25, Z+43	; 0x2b
    3a4a:	9a 83       	std	Y+2, r25	; 0x02
    3a4c:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
    3a4e:	8d 81       	ldd	r24, Y+5	; 0x05
    3a50:	9e 81       	ldd	r25, Y+6	; 0x06
    3a52:	83 96       	adiw	r24, 0x23	; 35
    3a54:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
#endif // CONFIG_MP
    enable_interrupts();
    3a58:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <enable_interrupts>
    //Выполняем pmain
    pmain( arg );
    3a5c:	89 81       	ldd	r24, Y+1	; 0x01
    3a5e:	9a 81       	ldd	r25, Y+2	; 0x02
    3a60:	eb 81       	ldd	r30, Y+3	; 0x03
    3a62:	fc 81       	ldd	r31, Y+4	; 0x04
    3a64:	09 95       	icall
    // Завершаем процесс
    syscall_bugurt( SYSCALL_PROC_TERMINATE, (void *)proc );
    3a66:	2d 81       	ldd	r18, Y+5	; 0x05
    3a68:	3e 81       	ldd	r19, Y+6	; 0x06
    3a6a:	86 e0       	ldi	r24, 0x06	; 6
    3a6c:	b9 01       	movw	r22, r18
    3a6e:	0e 94 ff 04 	call	0x9fe	; 0x9fe <syscall_bugurt>
}
    3a72:	26 96       	adiw	r28, 0x06	; 6
    3a74:	0f b6       	in	r0, 0x3f	; 63
    3a76:	f8 94       	cli
    3a78:	de bf       	out	0x3e, r29	; 62
    3a7a:	0f be       	out	0x3f, r0	; 63
    3a7c:	cd bf       	out	0x3d, r28	; 61
    3a7e:	cf 91       	pop	r28
    3a80:	df 91       	pop	r29
    3a82:	08 95       	ret

00003a84 <scall_proc_flag_stop>:
/**********************************************************************************************
                                       SYSCALL_PROC_FLAG_STOP
**********************************************************************************************/
void scall_proc_flag_stop( void * arg )
{
    3a84:	df 93       	push	r29
    3a86:	cf 93       	push	r28
    3a88:	00 d0       	rcall	.+0      	; 0x3a8a <scall_proc_flag_stop+0x6>
    3a8a:	cd b7       	in	r28, 0x3d	; 61
    3a8c:	de b7       	in	r29, 0x3e	; 62
    3a8e:	9a 83       	std	Y+2, r25	; 0x02
    3a90:	89 83       	std	Y+1, r24	; 0x01
    _proc_flag_stop( *((flag_t *)arg) );
    3a92:	e9 81       	ldd	r30, Y+1	; 0x01
    3a94:	fa 81       	ldd	r31, Y+2	; 0x02
    3a96:	80 81       	ld	r24, Z
    3a98:	91 81       	ldd	r25, Z+1	; 0x01
    3a9a:	0e 94 90 14 	call	0x2920	; 0x2920 <_proc_flag_stop>
}
    3a9e:	0f 90       	pop	r0
    3aa0:	0f 90       	pop	r0
    3aa2:	cf 91       	pop	r28
    3aa4:	df 91       	pop	r29
    3aa6:	08 95       	ret

00003aa8 <scall_proc_reset_watchdog>:
}
/**********************************************************************************************
                                       SYSCALL_PROC_RESET_WATCHDOG
**********************************************************************************************/
void scall_proc_reset_watchdog( void * arg )
{
    3aa8:	df 93       	push	r29
    3aaa:	cf 93       	push	r28
    3aac:	00 d0       	rcall	.+0      	; 0x3aae <scall_proc_reset_watchdog+0x6>
    3aae:	cd b7       	in	r28, 0x3d	; 61
    3ab0:	de b7       	in	r29, 0x3e	; 62
    3ab2:	9a 83       	std	Y+2, r25	; 0x02
    3ab4:	89 83       	std	Y+1, r24	; 0x01
    _proc_reset_watchdog();
    3ab6:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <_proc_reset_watchdog>
}
    3aba:	0f 90       	pop	r0
    3abc:	0f 90       	pop	r0
    3abe:	cf 91       	pop	r28
    3ac0:	df 91       	pop	r29
    3ac2:	08 95       	ret

00003ac4 <scall_sig_init>:
                                            Сигналы
***********************************************************************************************
                                      SYSCALL_PROC_RESTART
**********************************************************************************************/
void scall_sig_init( void * arg )
{
    3ac4:	df 93       	push	r29
    3ac6:	cf 93       	push	r28
    3ac8:	00 d0       	rcall	.+0      	; 0x3aca <scall_sig_init+0x6>
    3aca:	cd b7       	in	r28, 0x3d	; 61
    3acc:	de b7       	in	r29, 0x3e	; 62
    3ace:	9a 83       	std	Y+2, r25	; 0x02
    3ad0:	89 83       	std	Y+1, r24	; 0x01
    sig_init_isr( (sig_t *)arg );
    3ad2:	89 81       	ldd	r24, Y+1	; 0x01
    3ad4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ad6:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <sig_init_isr>
}
    3ada:	0f 90       	pop	r0
    3adc:	0f 90       	pop	r0
    3ade:	cf 91       	pop	r28
    3ae0:	df 91       	pop	r29
    3ae2:	08 95       	ret

00003ae4 <scall_sig_wait>:
}
/**********************************************************************************************
                                       SYSCALL_SIG_WAIT
**********************************************************************************************/
void scall_sig_wait( void * arg )
{
    3ae4:	df 93       	push	r29
    3ae6:	cf 93       	push	r28
    3ae8:	00 d0       	rcall	.+0      	; 0x3aea <scall_sig_wait+0x6>
    3aea:	cd b7       	in	r28, 0x3d	; 61
    3aec:	de b7       	in	r29, 0x3e	; 62
    3aee:	9a 83       	std	Y+2, r25	; 0x02
    3af0:	89 83       	std	Y+1, r24	; 0x01
    _sig_wait_prologue( (sig_t *)arg );
    3af2:	89 81       	ldd	r24, Y+1	; 0x01
    3af4:	9a 81       	ldd	r25, Y+2	; 0x02
    3af6:	0e 94 3c 1a 	call	0x3478	; 0x3478 <_sig_wait_prologue>
}
    3afa:	0f 90       	pop	r0
    3afc:	0f 90       	pop	r0
    3afe:	cf 91       	pop	r28
    3b00:	df 91       	pop	r29
    3b02:	08 95       	ret

00003b04 <scall_sig_wakeup>:
/**********************************************************************************************
                                       SYSCALL_SIG_WAKEUP
**********************************************************************************************/
void scall_sig_wakeup( void *arg )
{
    3b04:	df 93       	push	r29
    3b06:	cf 93       	push	r28
    3b08:	00 d0       	rcall	.+0      	; 0x3b0a <scall_sig_wakeup+0x6>
    3b0a:	cd b7       	in	r28, 0x3d	; 61
    3b0c:	de b7       	in	r29, 0x3e	; 62
    3b0e:	9a 83       	std	Y+2, r25	; 0x02
    3b10:	89 83       	std	Y+1, r24	; 0x01
    _sig_wait_epilogue();
    3b12:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <_sig_wait_epilogue>
    _proc_flag_stop( PROC_FLG_WAIT );
    3b16:	80 e2       	ldi	r24, 0x20	; 32
    3b18:	90 e0       	ldi	r25, 0x00	; 0
    3b1a:	0e 94 90 14 	call	0x2920	; 0x2920 <_proc_flag_stop>
}
    3b1e:	0f 90       	pop	r0
    3b20:	0f 90       	pop	r0
    3b22:	cf 91       	pop	r28
    3b24:	df 91       	pop	r29
    3b26:	08 95       	ret

00003b28 <scall_sig_signal>:
}
/**********************************************************************************************
                                       SYSCALL_SIG_SIGNAL
**********************************************************************************************/
void scall_sig_signal( void * arg )
{
    3b28:	df 93       	push	r29
    3b2a:	cf 93       	push	r28
    3b2c:	00 d0       	rcall	.+0      	; 0x3b2e <scall_sig_signal+0x6>
    3b2e:	cd b7       	in	r28, 0x3d	; 61
    3b30:	de b7       	in	r29, 0x3e	; 62
    3b32:	9a 83       	std	Y+2, r25	; 0x02
    3b34:	89 83       	std	Y+1, r24	; 0x01
    sig_signal_isr( (sig_t *)arg );
    3b36:	89 81       	ldd	r24, Y+1	; 0x01
    3b38:	9a 81       	ldd	r25, Y+2	; 0x02
    3b3a:	0e 94 06 1b 	call	0x360c	; 0x360c <sig_signal_isr>
}
    3b3e:	0f 90       	pop	r0
    3b40:	0f 90       	pop	r0
    3b42:	cf 91       	pop	r28
    3b44:	df 91       	pop	r29
    3b46:	08 95       	ret

00003b48 <scall_sig_broadcast>:
}
/**********************************************************************************************
                                       SYSCALL_SIG_BROADCAST
**********************************************************************************************/
void scall_sig_broadcast( void * arg )
{
    3b48:	df 93       	push	r29
    3b4a:	cf 93       	push	r28
    3b4c:	00 d0       	rcall	.+0      	; 0x3b4e <scall_sig_broadcast+0x6>
    3b4e:	cd b7       	in	r28, 0x3d	; 61
    3b50:	de b7       	in	r29, 0x3e	; 62
    3b52:	9a 83       	std	Y+2, r25	; 0x02
    3b54:	89 83       	std	Y+1, r24	; 0x01
    sig_broadcast_isr( (sig_t *)arg );
    3b56:	89 81       	ldd	r24, Y+1	; 0x01
    3b58:	9a 81       	ldd	r25, Y+2	; 0x02
    3b5a:	0e 94 a5 1b 	call	0x374a	; 0x374a <sig_broadcast_isr>
}
    3b5e:	0f 90       	pop	r0
    3b60:	0f 90       	pop	r0
    3b62:	cf 91       	pop	r28
    3b64:	df 91       	pop	r29
    3b66:	08 95       	ret

00003b68 <scall_sem_init>:
                                           Семафоры
***********************************************************************************************
                                       SYSCALL_SEM_INIT
**********************************************************************************************/
void scall_sem_init( void * arg )
{
    3b68:	df 93       	push	r29
    3b6a:	cf 93       	push	r28
    3b6c:	00 d0       	rcall	.+0      	; 0x3b6e <scall_sem_init+0x6>
    3b6e:	cd b7       	in	r28, 0x3d	; 61
    3b70:	de b7       	in	r29, 0x3e	; 62
    3b72:	9a 83       	std	Y+2, r25	; 0x02
    3b74:	89 83       	std	Y+1, r24	; 0x01
    sem_init_isr( ((sem_init_arg_t *)arg)->sem, ((sem_init_arg_t *)arg)->count );
    3b76:	e9 81       	ldd	r30, Y+1	; 0x01
    3b78:	fa 81       	ldd	r31, Y+2	; 0x02
    3b7a:	80 81       	ld	r24, Z
    3b7c:	91 81       	ldd	r25, Z+1	; 0x01
    3b7e:	e9 81       	ldd	r30, Y+1	; 0x01
    3b80:	fa 81       	ldd	r31, Y+2	; 0x02
    3b82:	22 81       	ldd	r18, Z+2	; 0x02
    3b84:	33 81       	ldd	r19, Z+3	; 0x03
    3b86:	b9 01       	movw	r22, r18
    3b88:	0e 94 dd 18 	call	0x31ba	; 0x31ba <sem_init_isr>
}
    3b8c:	0f 90       	pop	r0
    3b8e:	0f 90       	pop	r0
    3b90:	cf 91       	pop	r28
    3b92:	df 91       	pop	r29
    3b94:	08 95       	ret

00003b96 <scall_sem_lock>:
}
/**********************************************************************************************
                                         SYSCALL_SEM_LOCK
**********************************************************************************************/
void scall_sem_lock( void * arg )
{
    3b96:	0f 93       	push	r16
    3b98:	1f 93       	push	r17
    3b9a:	df 93       	push	r29
    3b9c:	cf 93       	push	r28
    3b9e:	00 d0       	rcall	.+0      	; 0x3ba0 <scall_sem_lock+0xa>
    3ba0:	cd b7       	in	r28, 0x3d	; 61
    3ba2:	de b7       	in	r29, 0x3e	; 62
    3ba4:	9a 83       	std	Y+2, r25	; 0x02
    3ba6:	89 83       	std	Y+1, r24	; 0x01
    ((sem_lock_arg_t *)arg)->ret = _sem_lock( ((sem_lock_arg_t *)arg)->sem );
    3ba8:	09 81       	ldd	r16, Y+1	; 0x01
    3baa:	1a 81       	ldd	r17, Y+2	; 0x02
    3bac:	e9 81       	ldd	r30, Y+1	; 0x01
    3bae:	fa 81       	ldd	r31, Y+2	; 0x02
    3bb0:	80 81       	ld	r24, Z
    3bb2:	91 81       	ldd	r25, Z+1	; 0x01
    3bb4:	0e 94 07 19 	call	0x320e	; 0x320e <_sem_lock>
    3bb8:	f8 01       	movw	r30, r16
    3bba:	82 83       	std	Z+2, r24	; 0x02
}
    3bbc:	0f 90       	pop	r0
    3bbe:	0f 90       	pop	r0
    3bc0:	cf 91       	pop	r28
    3bc2:	df 91       	pop	r29
    3bc4:	1f 91       	pop	r17
    3bc6:	0f 91       	pop	r16
    3bc8:	08 95       	ret

00003bca <scall_sem_try_lock>:
}
/**********************************************************************************************
                                       SYSCALL_SEM_TRY_LOCK
**********************************************************************************************/
void scall_sem_try_lock( void * arg )
{
    3bca:	0f 93       	push	r16
    3bcc:	1f 93       	push	r17
    3bce:	df 93       	push	r29
    3bd0:	cf 93       	push	r28
    3bd2:	00 d0       	rcall	.+0      	; 0x3bd4 <scall_sem_try_lock+0xa>
    3bd4:	cd b7       	in	r28, 0x3d	; 61
    3bd6:	de b7       	in	r29, 0x3e	; 62
    3bd8:	9a 83       	std	Y+2, r25	; 0x02
    3bda:	89 83       	std	Y+1, r24	; 0x01
    ((sem_lock_arg_t *)arg)->ret = _sem_try_lock( ((sem_lock_arg_t *)arg)->sem );
    3bdc:	09 81       	ldd	r16, Y+1	; 0x01
    3bde:	1a 81       	ldd	r17, Y+2	; 0x02
    3be0:	e9 81       	ldd	r30, Y+1	; 0x01
    3be2:	fa 81       	ldd	r31, Y+2	; 0x02
    3be4:	80 81       	ld	r24, Z
    3be6:	91 81       	ldd	r25, Z+1	; 0x01
    3be8:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <_sem_try_lock>
    3bec:	f8 01       	movw	r30, r16
    3bee:	82 83       	std	Z+2, r24	; 0x02
}
    3bf0:	0f 90       	pop	r0
    3bf2:	0f 90       	pop	r0
    3bf4:	cf 91       	pop	r28
    3bf6:	df 91       	pop	r29
    3bf8:	1f 91       	pop	r17
    3bfa:	0f 91       	pop	r16
    3bfc:	08 95       	ret

00003bfe <scall_sem_unlock>:
}
/**********************************************************************************************
                                       SYSCALL_SEM_UNLOCK
**********************************************************************************************/
void scall_sem_unlock( void * arg )
{
    3bfe:	df 93       	push	r29
    3c00:	cf 93       	push	r28
    3c02:	00 d0       	rcall	.+0      	; 0x3c04 <scall_sem_unlock+0x6>
    3c04:	cd b7       	in	r28, 0x3d	; 61
    3c06:	de b7       	in	r29, 0x3e	; 62
    3c08:	9a 83       	std	Y+2, r25	; 0x02
    3c0a:	89 83       	std	Y+1, r24	; 0x01
    sem_unlock_isr( (sem_t *)arg );
    3c0c:	89 81       	ldd	r24, Y+1	; 0x01
    3c0e:	9a 81       	ldd	r25, Y+2	; 0x02
    3c10:	0e 94 b0 19 	call	0x3360	; 0x3360 <sem_unlock_isr>
}
    3c14:	0f 90       	pop	r0
    3c16:	0f 90       	pop	r0
    3c18:	cf 91       	pop	r28
    3c1a:	df 91       	pop	r29
    3c1c:	08 95       	ret

00003c1e <scall_mutex_init>:
                                          Мьютексы
***********************************************************************************************
                                     SYSCALL_MUTEX_INIT
**********************************************************************************************/
void scall_mutex_init(void * arg)
{
    3c1e:	df 93       	push	r29
    3c20:	cf 93       	push	r28
    3c22:	00 d0       	rcall	.+0      	; 0x3c24 <scall_mutex_init+0x6>
    3c24:	cd b7       	in	r28, 0x3d	; 61
    3c26:	de b7       	in	r29, 0x3e	; 62
    3c28:	9a 83       	std	Y+2, r25	; 0x02
    3c2a:	89 83       	std	Y+1, r24	; 0x01
    mutex_init_isr(
    3c2c:	e9 81       	ldd	r30, Y+1	; 0x01
    3c2e:	fa 81       	ldd	r31, Y+2	; 0x02
    3c30:	80 81       	ld	r24, Z
    3c32:	91 81       	ldd	r25, Z+1	; 0x01
    3c34:	e9 81       	ldd	r30, Y+1	; 0x01
    3c36:	fa 81       	ldd	r31, Y+2	; 0x02
    3c38:	22 81       	ldd	r18, Z+2	; 0x02
    3c3a:	62 2f       	mov	r22, r18
    3c3c:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <mutex_init_isr>
               ((mutex_init_arg_t *)arg)->mutex
#ifdef CONFIG_USE_HIGHEST_LOCKER
               ,((mutex_init_arg_t *)arg)->prio
#endif // CONFIG_USE_HIGHEST_LOCKER
               );
}
    3c40:	0f 90       	pop	r0
    3c42:	0f 90       	pop	r0
    3c44:	cf 91       	pop	r28
    3c46:	df 91       	pop	r29
    3c48:	08 95       	ret

00003c4a <scall_mutex_lock>:
}
/**********************************************************************************************
                                    SYSCALL_MUTEX_LOCK
**********************************************************************************************/
void scall_mutex_lock(void * arg)
{
    3c4a:	0f 93       	push	r16
    3c4c:	1f 93       	push	r17
    3c4e:	df 93       	push	r29
    3c50:	cf 93       	push	r28
    3c52:	00 d0       	rcall	.+0      	; 0x3c54 <scall_mutex_lock+0xa>
    3c54:	cd b7       	in	r28, 0x3d	; 61
    3c56:	de b7       	in	r29, 0x3e	; 62
    3c58:	9a 83       	std	Y+2, r25	; 0x02
    3c5a:	89 83       	std	Y+1, r24	; 0x01
    ((mutex_lock_arg_t *)arg)->ret = _mutex_lock( ((mutex_lock_arg_t *)arg)->mutex );
    3c5c:	09 81       	ldd	r16, Y+1	; 0x01
    3c5e:	1a 81       	ldd	r17, Y+2	; 0x02
    3c60:	e9 81       	ldd	r30, Y+1	; 0x01
    3c62:	fa 81       	ldd	r31, Y+2	; 0x02
    3c64:	80 81       	ld	r24, Z
    3c66:	91 81       	ldd	r25, Z+1	; 0x01
    3c68:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <_mutex_lock>
    3c6c:	f8 01       	movw	r30, r16
    3c6e:	82 83       	std	Z+2, r24	; 0x02
}
    3c70:	0f 90       	pop	r0
    3c72:	0f 90       	pop	r0
    3c74:	cf 91       	pop	r28
    3c76:	df 91       	pop	r29
    3c78:	1f 91       	pop	r17
    3c7a:	0f 91       	pop	r16
    3c7c:	08 95       	ret

00003c7e <scall_mutex_try_lock>:
// Захват
/**********************************************************************************************
                                    SYSCALL_MUTEX_TRY_LOCK
**********************************************************************************************/
void scall_mutex_try_lock(void * arg)
{
    3c7e:	0f 93       	push	r16
    3c80:	1f 93       	push	r17
    3c82:	df 93       	push	r29
    3c84:	cf 93       	push	r28
    3c86:	00 d0       	rcall	.+0      	; 0x3c88 <scall_mutex_try_lock+0xa>
    3c88:	cd b7       	in	r28, 0x3d	; 61
    3c8a:	de b7       	in	r29, 0x3e	; 62
    3c8c:	9a 83       	std	Y+2, r25	; 0x02
    3c8e:	89 83       	std	Y+1, r24	; 0x01
    ((mutex_lock_arg_t *)arg)->ret = _mutex_try_lock( ((mutex_lock_arg_t *)arg)->mutex );
    3c90:	09 81       	ldd	r16, Y+1	; 0x01
    3c92:	1a 81       	ldd	r17, Y+2	; 0x02
    3c94:	e9 81       	ldd	r30, Y+1	; 0x01
    3c96:	fa 81       	ldd	r31, Y+2	; 0x02
    3c98:	80 81       	ld	r24, Z
    3c9a:	91 81       	ldd	r25, Z+1	; 0x01
    3c9c:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <_mutex_try_lock>
    3ca0:	f8 01       	movw	r30, r16
    3ca2:	82 83       	std	Z+2, r24	; 0x02
}
    3ca4:	0f 90       	pop	r0
    3ca6:	0f 90       	pop	r0
    3ca8:	cf 91       	pop	r28
    3caa:	df 91       	pop	r29
    3cac:	1f 91       	pop	r17
    3cae:	0f 91       	pop	r16
    3cb0:	08 95       	ret

00003cb2 <scall_mutex_unlock>:
}
/**********************************************************************************************
                                   SYSCALL_MUTEX_UNLOCK
**********************************************************************************************/
void scall_mutex_unlock(void * arg)
{
    3cb2:	df 93       	push	r29
    3cb4:	cf 93       	push	r28
    3cb6:	00 d0       	rcall	.+0      	; 0x3cb8 <scall_mutex_unlock+0x6>
    3cb8:	cd b7       	in	r28, 0x3d	; 61
    3cba:	de b7       	in	r29, 0x3e	; 62
    3cbc:	9a 83       	std	Y+2, r25	; 0x02
    3cbe:	89 83       	std	Y+1, r24	; 0x01
    _mutex_unlock( (mutex_t *)arg );
    3cc0:	89 81       	ldd	r24, Y+1	; 0x01
    3cc2:	9a 81       	ldd	r25, Y+2	; 0x02
    3cc4:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <_mutex_unlock>
}
    3cc8:	0f 90       	pop	r0
    3cca:	0f 90       	pop	r0
    3ccc:	cf 91       	pop	r28
    3cce:	df 91       	pop	r29
    3cd0:	08 95       	ret

00003cd2 <scall_ipc_wait>:
                                           IPC
***********************************************************************************************
                                       SYSCALL_IPC_WAIT
**********************************************************************************************/
void scall_ipc_wait(void * arg)
{
    3cd2:	df 93       	push	r29
    3cd4:	cf 93       	push	r28
    3cd6:	00 d0       	rcall	.+0      	; 0x3cd8 <scall_ipc_wait+0x6>
    3cd8:	cd b7       	in	r28, 0x3d	; 61
    3cda:	de b7       	in	r29, 0x3e	; 62
    3cdc:	9a 83       	std	Y+2, r25	; 0x02
    3cde:	89 83       	std	Y+1, r24	; 0x01
    _ipc_wait( arg );
    3ce0:	89 81       	ldd	r24, Y+1	; 0x01
    3ce2:	9a 81       	ldd	r25, Y+2	; 0x02
    3ce4:	0e 94 c1 0c 	call	0x1982	; 0x1982 <_ipc_wait>
}
    3ce8:	0f 90       	pop	r0
    3cea:	0f 90       	pop	r0
    3cec:	cf 91       	pop	r28
    3cee:	df 91       	pop	r29
    3cf0:	08 95       	ret

00003cf2 <scall_ipc_send>:
}
/**********************************************************************************************
                                       SYSCALL_IPC_SEND
**********************************************************************************************/
void scall_ipc_send(void * arg)
{
    3cf2:	0f 93       	push	r16
    3cf4:	1f 93       	push	r17
    3cf6:	df 93       	push	r29
    3cf8:	cf 93       	push	r28
    3cfa:	00 d0       	rcall	.+0      	; 0x3cfc <scall_ipc_send+0xa>
    3cfc:	cd b7       	in	r28, 0x3d	; 61
    3cfe:	de b7       	in	r29, 0x3e	; 62
    3d00:	9a 83       	std	Y+2, r25	; 0x02
    3d02:	89 83       	std	Y+1, r24	; 0x01
    ((ipc_send_arg_t *)arg)->ret = ipc_send_isr( ((ipc_send_arg_t *)arg)->proc, ((ipc_send_arg_t *)arg)->data );
    3d04:	09 81       	ldd	r16, Y+1	; 0x01
    3d06:	1a 81       	ldd	r17, Y+2	; 0x02
    3d08:	e9 81       	ldd	r30, Y+1	; 0x01
    3d0a:	fa 81       	ldd	r31, Y+2	; 0x02
    3d0c:	80 81       	ld	r24, Z
    3d0e:	91 81       	ldd	r25, Z+1	; 0x01
    3d10:	e9 81       	ldd	r30, Y+1	; 0x01
    3d12:	fa 81       	ldd	r31, Y+2	; 0x02
    3d14:	23 81       	ldd	r18, Z+3	; 0x03
    3d16:	34 81       	ldd	r19, Z+4	; 0x04
    3d18:	b9 01       	movw	r22, r18
    3d1a:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <ipc_send_isr>
    3d1e:	f8 01       	movw	r30, r16
    3d20:	82 83       	std	Z+2, r24	; 0x02
}
    3d22:	0f 90       	pop	r0
    3d24:	0f 90       	pop	r0
    3d26:	cf 91       	pop	r28
    3d28:	df 91       	pop	r29
    3d2a:	1f 91       	pop	r17
    3d2c:	0f 91       	pop	r16
    3d2e:	08 95       	ret

00003d30 <scall_ipc_exchange>:
}
/**********************************************************************************************
                                    SYSCALL_IPC_EXCHANGE
**********************************************************************************************/
void scall_ipc_exchange(void * arg)
{
    3d30:	0f 93       	push	r16
    3d32:	1f 93       	push	r17
    3d34:	df 93       	push	r29
    3d36:	cf 93       	push	r28
    3d38:	00 d0       	rcall	.+0      	; 0x3d3a <scall_ipc_exchange+0xa>
    3d3a:	cd b7       	in	r28, 0x3d	; 61
    3d3c:	de b7       	in	r29, 0x3e	; 62
    3d3e:	9a 83       	std	Y+2, r25	; 0x02
    3d40:	89 83       	std	Y+1, r24	; 0x01
    ((ipc_send_arg_t *)arg)->ret = _ipc_exchange( ((ipc_send_arg_t *)arg)->proc, ((ipc_send_arg_t *)arg)->data, ((ipc_exchange_arg_t *)arg)->receive );
    3d42:	09 81       	ldd	r16, Y+1	; 0x01
    3d44:	1a 81       	ldd	r17, Y+2	; 0x02
    3d46:	e9 81       	ldd	r30, Y+1	; 0x01
    3d48:	fa 81       	ldd	r31, Y+2	; 0x02
    3d4a:	80 81       	ld	r24, Z
    3d4c:	91 81       	ldd	r25, Z+1	; 0x01
    3d4e:	e9 81       	ldd	r30, Y+1	; 0x01
    3d50:	fa 81       	ldd	r31, Y+2	; 0x02
    3d52:	43 81       	ldd	r20, Z+3	; 0x03
    3d54:	54 81       	ldd	r21, Z+4	; 0x04
    3d56:	e9 81       	ldd	r30, Y+1	; 0x01
    3d58:	fa 81       	ldd	r31, Y+2	; 0x02
    3d5a:	25 81       	ldd	r18, Z+5	; 0x05
    3d5c:	36 81       	ldd	r19, Z+6	; 0x06
    3d5e:	ba 01       	movw	r22, r20
    3d60:	a9 01       	movw	r20, r18
    3d62:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <_ipc_exchange>
    3d66:	f8 01       	movw	r30, r16
    3d68:	82 83       	std	Z+2, r24	; 0x02
}
    3d6a:	0f 90       	pop	r0
    3d6c:	0f 90       	pop	r0
    3d6e:	cf 91       	pop	r28
    3d70:	df 91       	pop	r29
    3d72:	1f 91       	pop	r17
    3d74:	0f 91       	pop	r16
    3d76:	08 95       	ret

00003d78 <xlist_init>:
**********************************************/
//Инициация
void xlist_init(
    xlist_t * xlist
)
{
    3d78:	df 93       	push	r29
    3d7a:	cf 93       	push	r28
    3d7c:	00 d0       	rcall	.+0      	; 0x3d7e <xlist_init+0x6>
    3d7e:	00 d0       	rcall	.+0      	; 0x3d80 <xlist_init+0x8>
    3d80:	cd b7       	in	r28, 0x3d	; 61
    3d82:	de b7       	in	r29, 0x3e	; 62
    3d84:	9c 83       	std	Y+4, r25	; 0x04
    3d86:	8b 83       	std	Y+3, r24	; 0x03
    count_t i;
    //список пуст
    xlist->index = (index_t)0;
    3d88:	eb 81       	ldd	r30, Y+3	; 0x03
    3d8a:	fc 81       	ldd	r31, Y+4	; 0x04
    3d8c:	10 8a       	std	Z+16, r1	; 0x10
    //обнуляем указатели
    for( i = 0; i < BITS_IN_INDEX_T; i++ )xlist->item[i] = (item_t *)0;
    3d8e:	1a 82       	std	Y+2, r1	; 0x02
    3d90:	19 82       	std	Y+1, r1	; 0x01
    3d92:	10 c0       	rjmp	.+32     	; 0x3db4 <xlist_init+0x3c>
    3d94:	89 81       	ldd	r24, Y+1	; 0x01
    3d96:	9a 81       	ldd	r25, Y+2	; 0x02
    3d98:	2b 81       	ldd	r18, Y+3	; 0x03
    3d9a:	3c 81       	ldd	r19, Y+4	; 0x04
    3d9c:	88 0f       	add	r24, r24
    3d9e:	99 1f       	adc	r25, r25
    3da0:	f9 01       	movw	r30, r18
    3da2:	e8 0f       	add	r30, r24
    3da4:	f9 1f       	adc	r31, r25
    3da6:	11 82       	std	Z+1, r1	; 0x01
    3da8:	10 82       	st	Z, r1
    3daa:	89 81       	ldd	r24, Y+1	; 0x01
    3dac:	9a 81       	ldd	r25, Y+2	; 0x02
    3dae:	01 96       	adiw	r24, 0x01	; 1
    3db0:	9a 83       	std	Y+2, r25	; 0x02
    3db2:	89 83       	std	Y+1, r24	; 0x01
    3db4:	89 81       	ldd	r24, Y+1	; 0x01
    3db6:	9a 81       	ldd	r25, Y+2	; 0x02
    3db8:	88 30       	cpi	r24, 0x08	; 8
    3dba:	91 05       	cpc	r25, r1
    3dbc:	58 f3       	brcs	.-42     	; 0x3d94 <xlist_init+0x1c>
}
    3dbe:	0f 90       	pop	r0
    3dc0:	0f 90       	pop	r0
    3dc2:	0f 90       	pop	r0
    3dc4:	0f 90       	pop	r0
    3dc6:	cf 91       	pop	r28
    3dc8:	df 91       	pop	r29
    3dca:	08 95       	ret

00003dcc <xlist_head>:
//===========================================================================
//Поиск головы списка
item_t * xlist_head(xlist_t * xlist)
{
    3dcc:	df 93       	push	r29
    3dce:	cf 93       	push	r28
    3dd0:	00 d0       	rcall	.+0      	; 0x3dd2 <xlist_head+0x6>
    3dd2:	00 d0       	rcall	.+0      	; 0x3dd4 <xlist_head+0x8>
    3dd4:	0f 92       	push	r0
    3dd6:	cd b7       	in	r28, 0x3d	; 61
    3dd8:	de b7       	in	r29, 0x3e	; 62
    3dda:	9d 83       	std	Y+5, r25	; 0x05
    3ddc:	8c 83       	std	Y+4, r24	; 0x04
    item_t * ret_val = (item_t *)0;
    3dde:	1b 82       	std	Y+3, r1	; 0x03
    3de0:	1a 82       	std	Y+2, r1	; 0x02
    index_t index;
    index = xlist->index;
    3de2:	ec 81       	ldd	r30, Y+4	; 0x04
    3de4:	fd 81       	ldd	r31, Y+5	; 0x05
    3de6:	80 89       	ldd	r24, Z+16	; 0x10
    3de8:	89 83       	std	Y+1, r24	; 0x01

    if( index != (index_t)0 )
    3dea:	89 81       	ldd	r24, Y+1	; 0x01
    3dec:	88 23       	and	r24, r24
    3dee:	81 f0       	breq	.+32     	; 0x3e10 <xlist_head+0x44>
    {
        ret_val = xlist->item[ index_search( index ) ];
    3df0:	89 81       	ldd	r24, Y+1	; 0x01
    3df2:	0e 94 82 0c 	call	0x1904	; 0x1904 <index_search>
    3df6:	88 2f       	mov	r24, r24
    3df8:	90 e0       	ldi	r25, 0x00	; 0
    3dfa:	2c 81       	ldd	r18, Y+4	; 0x04
    3dfc:	3d 81       	ldd	r19, Y+5	; 0x05
    3dfe:	88 0f       	add	r24, r24
    3e00:	99 1f       	adc	r25, r25
    3e02:	f9 01       	movw	r30, r18
    3e04:	e8 0f       	add	r30, r24
    3e06:	f9 1f       	adc	r31, r25
    3e08:	80 81       	ld	r24, Z
    3e0a:	91 81       	ldd	r25, Z+1	; 0x01
    3e0c:	9b 83       	std	Y+3, r25	; 0x03
    3e0e:	8a 83       	std	Y+2, r24	; 0x02
    }
    return ret_val;
    3e10:	8a 81       	ldd	r24, Y+2	; 0x02
    3e12:	9b 81       	ldd	r25, Y+3	; 0x03
}
    3e14:	0f 90       	pop	r0
    3e16:	0f 90       	pop	r0
    3e18:	0f 90       	pop	r0
    3e1a:	0f 90       	pop	r0
    3e1c:	0f 90       	pop	r0
    3e1e:	cf 91       	pop	r28
    3e20:	df 91       	pop	r29
    3e22:	08 95       	ret

00003e24 <xlist_switch>:

//===========================================================================
// переключение указателя в массиве на следующий элемент, пригодится в планировщике
void xlist_switch(xlist_t * xlist, prio_t prio)
{
    3e24:	df 93       	push	r29
    3e26:	cf 93       	push	r28
    3e28:	00 d0       	rcall	.+0      	; 0x3e2a <xlist_switch+0x6>
    3e2a:	00 d0       	rcall	.+0      	; 0x3e2c <xlist_switch+0x8>
    3e2c:	0f 92       	push	r0
    3e2e:	cd b7       	in	r28, 0x3d	; 61
    3e30:	de b7       	in	r29, 0x3e	; 62
    3e32:	9c 83       	std	Y+4, r25	; 0x04
    3e34:	8b 83       	std	Y+3, r24	; 0x03
    3e36:	6d 83       	std	Y+5, r22	; 0x05
    item_t ** current;
    current = xlist->item + prio;
    3e38:	2b 81       	ldd	r18, Y+3	; 0x03
    3e3a:	3c 81       	ldd	r19, Y+4	; 0x04
    3e3c:	8d 81       	ldd	r24, Y+5	; 0x05
    3e3e:	88 2f       	mov	r24, r24
    3e40:	90 e0       	ldi	r25, 0x00	; 0
    3e42:	88 0f       	add	r24, r24
    3e44:	99 1f       	adc	r25, r25
    3e46:	82 0f       	add	r24, r18
    3e48:	93 1f       	adc	r25, r19
    3e4a:	9a 83       	std	Y+2, r25	; 0x02
    3e4c:	89 83       	std	Y+1, r24	; 0x01
    *current = (*current)->next;
    3e4e:	e9 81       	ldd	r30, Y+1	; 0x01
    3e50:	fa 81       	ldd	r31, Y+2	; 0x02
    3e52:	01 90       	ld	r0, Z+
    3e54:	f0 81       	ld	r31, Z
    3e56:	e0 2d       	mov	r30, r0
    3e58:	80 81       	ld	r24, Z
    3e5a:	91 81       	ldd	r25, Z+1	; 0x01
    3e5c:	e9 81       	ldd	r30, Y+1	; 0x01
    3e5e:	fa 81       	ldd	r31, Y+2	; 0x02
    3e60:	91 83       	std	Z+1, r25	; 0x01
    3e62:	80 83       	st	Z, r24
    //*current = (item_t *)*(item_t **)*(item_t ***)current;
}
    3e64:	0f 90       	pop	r0
    3e66:	0f 90       	pop	r0
    3e68:	0f 90       	pop	r0
    3e6a:	0f 90       	pop	r0
    3e6c:	0f 90       	pop	r0
    3e6e:	cf 91       	pop	r28
    3e70:	df 91       	pop	r29
    3e72:	08 95       	ret

00003e74 <test_visr>:
 */

#include "../../arch/avr/gcc-vsmp/vsmp.h"

void test_visr(void)
{
    3e74:	df 93       	push	r29
    3e76:	cf 93       	push	r28
    3e78:	cd b7       	in	r28, 0x3d	; 61
    3e7a:	de b7       	in	r29, 0x3e	; 62
    PORTB^=0x10;
    3e7c:	a5 e2       	ldi	r26, 0x25	; 37
    3e7e:	b0 e0       	ldi	r27, 0x00	; 0
    3e80:	e5 e2       	ldi	r30, 0x25	; 37
    3e82:	f0 e0       	ldi	r31, 0x00	; 0
    3e84:	90 81       	ld	r25, Z
    3e86:	80 e1       	ldi	r24, 0x10	; 16
    3e88:	89 27       	eor	r24, r25
    3e8a:	8c 93       	st	X, r24
}
    3e8c:	cf 91       	pop	r28
    3e8e:	df 91       	pop	r29
    3e90:	08 95       	ret

00003e92 <test_visr3>:
void test_visr3(void)
{
    3e92:	df 93       	push	r29
    3e94:	cf 93       	push	r28
    3e96:	cd b7       	in	r28, 0x3d	; 61
    3e98:	de b7       	in	r29, 0x3e	; 62
    PORTB^=0x10;
    3e9a:	a5 e2       	ldi	r26, 0x25	; 37
    3e9c:	b0 e0       	ldi	r27, 0x00	; 0
    3e9e:	e5 e2       	ldi	r30, 0x25	; 37
    3ea0:	f0 e0       	ldi	r31, 0x00	; 0
    3ea2:	90 81       	ld	r25, Z
    3ea4:	80 e1       	ldi	r24, 0x10	; 16
    3ea6:	89 27       	eor	r24, r25
    3ea8:	8c 93       	st	X, r24
}
    3eaa:	cf 91       	pop	r28
    3eac:	df 91       	pop	r29
    3eae:	08 95       	ret

00003eb0 <test_visr2>:
vinterrupt_t test_vector3 = VINTERRUPT_INIT(test_vector3,test_visr3);
void test_visr2(void)
{
    3eb0:	df 93       	push	r29
    3eb2:	cf 93       	push	r28
    3eb4:	0f 92       	push	r0
    3eb6:	cd b7       	in	r28, 0x3d	; 61
    3eb8:	de b7       	in	r29, 0x3e	; 62
    core_id_t core;
    core = current_core();
    3eba:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <current_core>
    3ebe:	89 83       	std	Y+1, r24	; 0x01
    PORTB^=0x10;
    3ec0:	a5 e2       	ldi	r26, 0x25	; 37
    3ec2:	b0 e0       	ldi	r27, 0x00	; 0
    3ec4:	e5 e2       	ldi	r30, 0x25	; 37
    3ec6:	f0 e0       	ldi	r31, 0x00	; 0
    3ec8:	90 81       	ld	r25, Z
    3eca:	80 e1       	ldi	r24, 0x10	; 16
    3ecc:	89 27       	eor	r24, r25
    3ece:	8c 93       	st	X, r24
    vsmp_vinterrupt_isr( core, &test_vector3 ); // nested interrupt
    3ed0:	20 e0       	ldi	r18, 0x00	; 0
    3ed2:	31 e0       	ldi	r19, 0x01	; 1
    3ed4:	89 81       	ldd	r24, Y+1	; 0x01
    3ed6:	b9 01       	movw	r22, r18
    3ed8:	0e 94 4a 0a 	call	0x1494	; 0x1494 <vsmp_vinterrupt_isr>
    enable_interrupts();
    3edc:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <enable_interrupts>
}
    3ee0:	0f 90       	pop	r0
    3ee2:	cf 91       	pop	r28
    3ee4:	df 91       	pop	r29
    3ee6:	08 95       	ret

00003ee8 <main>:

core_id_t i;
unsigned short j;

int main(void)
{
    3ee8:	df 93       	push	r29
    3eea:	cf 93       	push	r28
    3eec:	cd b7       	in	r28, 0x3d	; 61
    3eee:	de b7       	in	r29, 0x3e	; 62
    vsmp_init();
    3ef0:	0e 94 2f 06 	call	0xc5e	; 0xc5e <vsmp_init>

    TCCR2A = 0x02;//
    3ef4:	e0 eb       	ldi	r30, 0xB0	; 176
    3ef6:	f0 e0       	ldi	r31, 0x00	; 0
    3ef8:	82 e0       	ldi	r24, 0x02	; 2
    3efa:	80 83       	st	Z, r24
    TCCR2B = 0x05;// prescaler=128
    3efc:	e1 eb       	ldi	r30, 0xB1	; 177
    3efe:	f0 e0       	ldi	r31, 0x00	; 0
    3f00:	85 e0       	ldi	r24, 0x05	; 5
    3f02:	80 83       	st	Z, r24
    OCR2A  = 124;
    3f04:	e3 eb       	ldi	r30, 0xB3	; 179
    3f06:	f0 e0       	ldi	r31, 0x00	; 0
    3f08:	8c e7       	ldi	r24, 0x7C	; 124
    3f0a:	80 83       	st	Z, r24
    OCR2B  = 0x00;
    3f0c:	e4 eb       	ldi	r30, 0xB4	; 180
    3f0e:	f0 e0       	ldi	r31, 0x00	; 0
    3f10:	10 82       	st	Z, r1
    TIMSK2 = 0x02;
    3f12:	e0 e7       	ldi	r30, 0x70	; 112
    3f14:	f0 e0       	ldi	r31, 0x00	; 0
    3f16:	82 e0       	ldi	r24, 0x02	; 2
    3f18:	80 83       	st	Z, r24
    TIFR2  = 0x00;
    3f1a:	e7 e3       	ldi	r30, 0x37	; 55
    3f1c:	f0 e0       	ldi	r31, 0x00	; 0
    3f1e:	10 82       	st	Z, r1

    DDRB = 0x3F;
    3f20:	e4 e2       	ldi	r30, 0x24	; 36
    3f22:	f0 e0       	ldi	r31, 0x00	; 0
    3f24:	8f e3       	ldi	r24, 0x3F	; 63
    3f26:	80 83       	st	Z, r24
    PORTB = 0x00;
    3f28:	e5 e2       	ldi	r30, 0x25	; 37
    3f2a:	f0 e0       	ldi	r31, 0x00	; 0
    3f2c:	10 82       	st	Z, r1
    DDRC = 0x3F;
    3f2e:	e7 e2       	ldi	r30, 0x27	; 39
    3f30:	f0 e0       	ldi	r31, 0x00	; 0
    3f32:	8f e3       	ldi	r24, 0x3F	; 63
    3f34:	80 83       	st	Z, r24
    PORTC = 0x00;
    3f36:	e8 e2       	ldi	r30, 0x28	; 40
    3f38:	f0 e0       	ldi	r31, 0x00	; 0
    3f3a:	10 82       	st	Z, r1
    DDRD = 0xFE;
    3f3c:	ea e2       	ldi	r30, 0x2A	; 42
    3f3e:	f0 e0       	ldi	r31, 0x00	; 0
    3f40:	8e ef       	ldi	r24, 0xFE	; 254
    3f42:	80 83       	st	Z, r24
    PORTD = 0x00;
    3f44:	eb e2       	ldi	r30, 0x2B	; 43
    3f46:	f0 e0       	ldi	r31, 0x00	; 0
    3f48:	10 82       	st	Z, r1

    vsmp_run();
    3f4a:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <vsmp_run>

    for(i=0; i<MAX_CORES; i++)
    3f4e:	10 92 9b 03 	sts	0x039B, r1
    3f52:	2a c0       	rjmp	.+84     	; 0x3fa8 <main+0xc0>
    {
        cli();
    3f54:	f8 94       	cli
        vsmp_vinterrupt_isr( i, &test_vector );
    3f56:	80 91 9b 03 	lds	r24, 0x039B
    3f5a:	26 e0       	ldi	r18, 0x06	; 6
    3f5c:	31 e0       	ldi	r19, 0x01	; 1
    3f5e:	b9 01       	movw	r22, r18
    3f60:	0e 94 4a 0a 	call	0x1494	; 0x1494 <vsmp_vinterrupt_isr>
        vsmp_vinterrupt( i, &test_vector2 );
    3f64:	80 91 9b 03 	lds	r24, 0x039B
    3f68:	2c e0       	ldi	r18, 0x0C	; 12
    3f6a:	31 e0       	ldi	r19, 0x01	; 1
    3f6c:	b9 01       	movw	r22, r18
    3f6e:	0e 94 97 0a 	call	0x152e	; 0x152e <vsmp_vinterrupt>
        for(j=0;j<10000;j++);
    3f72:	10 92 9a 03 	sts	0x039A, r1
    3f76:	10 92 99 03 	sts	0x0399, r1
    3f7a:	09 c0       	rjmp	.+18     	; 0x3f8e <main+0xa6>
    3f7c:	80 91 99 03 	lds	r24, 0x0399
    3f80:	90 91 9a 03 	lds	r25, 0x039A
    3f84:	01 96       	adiw	r24, 0x01	; 1
    3f86:	90 93 9a 03 	sts	0x039A, r25
    3f8a:	80 93 99 03 	sts	0x0399, r24
    3f8e:	80 91 99 03 	lds	r24, 0x0399
    3f92:	90 91 9a 03 	lds	r25, 0x039A
    3f96:	27 e2       	ldi	r18, 0x27	; 39
    3f98:	80 31       	cpi	r24, 0x10	; 16
    3f9a:	92 07       	cpc	r25, r18
    3f9c:	78 f3       	brcs	.-34     	; 0x3f7c <main+0x94>
    DDRD = 0xFE;
    PORTD = 0x00;

    vsmp_run();

    for(i=0; i<MAX_CORES; i++)
    3f9e:	80 91 9b 03 	lds	r24, 0x039B
    3fa2:	8f 5f       	subi	r24, 0xFF	; 255
    3fa4:	80 93 9b 03 	sts	0x039B, r24
    3fa8:	80 91 9b 03 	lds	r24, 0x039B
    3fac:	82 30       	cpi	r24, 0x02	; 2
    3fae:	90 f2       	brcs	.-92     	; 0x3f54 <main+0x6c>
        cli();
        vsmp_vinterrupt_isr( i, &test_vector );
        vsmp_vinterrupt( i, &test_vector2 );
        for(j=0;j<10000;j++);
    }
    for(i=0; i<MAX_CORES; i++)
    3fb0:	10 92 9b 03 	sts	0x039B, r1
    3fb4:	2a c0       	rjmp	.+84     	; 0x400a <main+0x122>
    {
        cli();
    3fb6:	f8 94       	cli
        vsmp_vinterrupt_isr( i, &test_vector );
    3fb8:	80 91 9b 03 	lds	r24, 0x039B
    3fbc:	26 e0       	ldi	r18, 0x06	; 6
    3fbe:	31 e0       	ldi	r19, 0x01	; 1
    3fc0:	b9 01       	movw	r22, r18
    3fc2:	0e 94 4a 0a 	call	0x1494	; 0x1494 <vsmp_vinterrupt_isr>
        vsmp_vinterrupt( i, &test_vector2 );
    3fc6:	80 91 9b 03 	lds	r24, 0x039B
    3fca:	2c e0       	ldi	r18, 0x0C	; 12
    3fcc:	31 e0       	ldi	r19, 0x01	; 1
    3fce:	b9 01       	movw	r22, r18
    3fd0:	0e 94 97 0a 	call	0x152e	; 0x152e <vsmp_vinterrupt>
        for(j=0;j<10000;j++);
    3fd4:	10 92 9a 03 	sts	0x039A, r1
    3fd8:	10 92 99 03 	sts	0x0399, r1
    3fdc:	09 c0       	rjmp	.+18     	; 0x3ff0 <main+0x108>
    3fde:	80 91 99 03 	lds	r24, 0x0399
    3fe2:	90 91 9a 03 	lds	r25, 0x039A
    3fe6:	01 96       	adiw	r24, 0x01	; 1
    3fe8:	90 93 9a 03 	sts	0x039A, r25
    3fec:	80 93 99 03 	sts	0x0399, r24
    3ff0:	80 91 99 03 	lds	r24, 0x0399
    3ff4:	90 91 9a 03 	lds	r25, 0x039A
    3ff8:	27 e2       	ldi	r18, 0x27	; 39
    3ffa:	80 31       	cpi	r24, 0x10	; 16
    3ffc:	92 07       	cpc	r25, r18
    3ffe:	78 f3       	brcs	.-34     	; 0x3fde <main+0xf6>
        cli();
        vsmp_vinterrupt_isr( i, &test_vector );
        vsmp_vinterrupt( i, &test_vector2 );
        for(j=0;j<10000;j++);
    }
    for(i=0; i<MAX_CORES; i++)
    4000:	80 91 9b 03 	lds	r24, 0x039B
    4004:	8f 5f       	subi	r24, 0xFF	; 255
    4006:	80 93 9b 03 	sts	0x039B, r24
    400a:	80 91 9b 03 	lds	r24, 0x039B
    400e:	82 30       	cpi	r24, 0x02	; 2
    4010:	90 f2       	brcs	.-92     	; 0x3fb6 <main+0xce>
        cli();
        vsmp_vinterrupt_isr( i, &test_vector );
        vsmp_vinterrupt( i, &test_vector2 );
        for(j=0;j<10000;j++);
    }
    init_bugurt();
    4012:	0e 94 94 05 	call	0xb28	; 0xb28 <init_bugurt>
    start_bugurt();
    4016:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <start_bugurt>

    return 0;
    401a:	80 e0       	ldi	r24, 0x00	; 0
    401c:	90 e0       	ldi	r25, 0x00	; 0
}
    401e:	cf 91       	pop	r28
    4020:	df 91       	pop	r29
    4022:	08 95       	ret

00004024 <_exit>:
    4024:	f8 94       	cli

00004026 <__stop_program>:
    4026:	ff cf       	rjmp	.-2      	; 0x4026 <__stop_program>
