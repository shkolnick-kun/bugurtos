
bin/Debug/vsmp-sandbox.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00003ffe  00004092  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003ffe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000028a  00800112  00800112  000040a4  2**0
                  ALLOC
  3 .stab         00008f58  00000000  00000000  000040a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00004077  00000000  00000000  0000cffc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
       4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      1c:	0c 94 19 08 	jmp	0x1032	; 0x1032 <__vector_7>
      20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      30:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      48:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      54:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000068 <syscall_routine>:
      68:	25 1c 77 1c 91 1c ab 1c c5 1c e6 1c 2d 1d 3f 1d     %.w.........-.?.
      78:	4d 1d 5d 1d 6d 1d 7f 1d 8f 1d 9f 1d b6 1d d0 1d     M.].m...........
      88:	ea 1d fa 1d 10 1e 2a 1e 44 1e 54 1e 64 1e 83 1e     ......*.D.T.d...

00000098 <__ctors_end>:
      98:	11 24       	eor	r1, r1
      9a:	1f be       	out	0x3f, r1	; 63
      9c:	cf ef       	ldi	r28, 0xFF	; 255
      9e:	d8 e0       	ldi	r29, 0x08	; 8
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
      a4:	11 e0       	ldi	r17, 0x01	; 1
      a6:	a0 e0       	ldi	r26, 0x00	; 0
      a8:	b1 e0       	ldi	r27, 0x01	; 1
      aa:	ee ef       	ldi	r30, 0xFE	; 254
      ac:	ff e3       	ldi	r31, 0x3F	; 63
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <.do_copy_data_start>

000000b0 <.do_copy_data_loop>:
      b0:	05 90       	lpm	r0, Z+
      b2:	0d 92       	st	X+, r0

000000b4 <.do_copy_data_start>:
      b4:	a2 31       	cpi	r26, 0x12	; 18
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <.do_copy_data_loop>

000000ba <__do_clear_bss>:
      ba:	13 e0       	ldi	r17, 0x03	; 3
      bc:	a2 e1       	ldi	r26, 0x12	; 18
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	ac 39       	cpi	r26, 0x9C	; 156
      c6:	b1 07       	cpc	r27, r17
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <main>
      ce:	0c 94 fd 1f 	jmp	0x3ffa	; 0x3ffa <_exit>

000000d2 <__bad_interrupt>:
      d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <bugurt_save_context>:
      d6:	2f 92       	push	r2
      d8:	2f b6       	in	r2, 0x3f	; 63
      da:	2f 92       	push	r2
      dc:	3f 92       	push	r3
      de:	4f 92       	push	r4
      e0:	5f 92       	push	r5
      e2:	6f 92       	push	r6
      e4:	7f 92       	push	r7
      e6:	8f 92       	push	r8
      e8:	9f 92       	push	r9
      ea:	af 92       	push	r10
      ec:	bf 92       	push	r11
      ee:	cf 92       	push	r12
      f0:	df 92       	push	r13
      f2:	ef 92       	push	r14
      f4:	ff 92       	push	r15
      f6:	0f 93       	push	r16
      f8:	1f 93       	push	r17
      fa:	2f 93       	push	r18
      fc:	3f 93       	push	r19
      fe:	4f 93       	push	r20
     100:	5f 93       	push	r21
     102:	6f 93       	push	r22
     104:	7f 93       	push	r23
     106:	8f 93       	push	r24
     108:	9f 93       	push	r25
     10a:	af 93       	push	r26
     10c:	bf 93       	push	r27
     10e:	cf 93       	push	r28
     110:	df 93       	push	r29
     112:	ef 93       	push	r30
     114:	ff 93       	push	r31
     116:	ed b7       	in	r30, 0x3d	; 61
     118:	fe b7       	in	r31, 0x3e	; 62
     11a:	21 a1       	ldd	r18, Z+33	; 0x21
     11c:	30 a1       	ldd	r19, Z+32	; 0x20
     11e:	01 a2       	std	Z+33, r0	; 0x21
     120:	10 a2       	std	Z+32, r1	; 0x20
     122:	11 24       	eor	r1, r1
     124:	8d b7       	in	r24, 0x3d	; 61
     126:	9e b7       	in	r25, 0x3e	; 62
     128:	2f 93       	push	r18
     12a:	3f 93       	push	r19
     12c:	08 95       	ret

0000012e <bugurt_pop_context>:
     12e:	3f 91       	pop	r19
     130:	2f 91       	pop	r18
     132:	04 c0       	rjmp	.+8      	; 0x13c <_bugurt_pop_context>

00000134 <bugurt_restore_context>:
     134:	3f 91       	pop	r19
     136:	2f 91       	pop	r18
     138:	9e bf       	out	0x3e, r25	; 62
     13a:	8d bf       	out	0x3d, r24	; 61

0000013c <_bugurt_pop_context>:
     13c:	fe b7       	in	r31, 0x3e	; 62
     13e:	ed b7       	in	r30, 0x3d	; 61
     140:	10 a0       	ldd	r1, Z+32	; 0x20
     142:	01 a0       	ldd	r0, Z+33	; 0x21
     144:	30 a3       	std	Z+32, r19	; 0x20
     146:	21 a3       	std	Z+33, r18	; 0x21
     148:	ff 91       	pop	r31
     14a:	ef 91       	pop	r30
     14c:	df 91       	pop	r29
     14e:	cf 91       	pop	r28
     150:	bf 91       	pop	r27
     152:	af 91       	pop	r26
     154:	9f 91       	pop	r25
     156:	8f 91       	pop	r24
     158:	7f 91       	pop	r23
     15a:	6f 91       	pop	r22
     15c:	5f 91       	pop	r21
     15e:	4f 91       	pop	r20
     160:	3f 91       	pop	r19
     162:	2f 91       	pop	r18
     164:	1f 91       	pop	r17
     166:	0f 91       	pop	r16
     168:	ff 90       	pop	r15
     16a:	ef 90       	pop	r14
     16c:	df 90       	pop	r13
     16e:	cf 90       	pop	r12
     170:	bf 90       	pop	r11
     172:	af 90       	pop	r10
     174:	9f 90       	pop	r9
     176:	8f 90       	pop	r8
     178:	7f 90       	pop	r7
     17a:	6f 90       	pop	r6
     17c:	5f 90       	pop	r5
     17e:	4f 90       	pop	r4
     180:	3f 90       	pop	r3
     182:	2f 90       	pop	r2
     184:	2f be       	out	0x3f, r2	; 63
     186:	2f 90       	pop	r2
     188:	08 95       	ret

0000018a <bugurt_set_stack_pointer>:
     18a:	1f 90       	pop	r1
     18c:	0f 90       	pop	r0
     18e:	9e bf       	out	0x3e, r25	; 62
     190:	8d bf       	out	0x3d, r24	; 61
     192:	0f 92       	push	r0
     194:	1f 92       	push	r1
     196:	11 24       	eor	r1, r1
     198:	08 95       	ret

0000019a <bugurt_push_pointer>:
     19a:	1f 90       	pop	r1
     19c:	0f 90       	pop	r0
     19e:	8f 93       	push	r24
     1a0:	9f 93       	push	r25
     1a2:	0f 92       	push	r0
     1a4:	1f 92       	push	r1
     1a6:	11 24       	eor	r1, r1
     1a8:	08 95       	ret

000001aa <bugurt_reverse_byte_order>:
     1aa:	08 2e       	mov	r0, r24
     1ac:	89 2f       	mov	r24, r25
     1ae:	90 2d       	mov	r25, r0
     1b0:	08 95       	ret

000001b2 <current_proc>:
    bugurt_set_stack_pointer( saved_vm_sp[current_vm] );
    __asm__ __volatile__("reti"::);
}
///!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
proc_t * current_proc(void)
{
     1b2:	df 93       	push	r29
     1b4:	cf 93       	push	r28
     1b6:	00 d0       	rcall	.+0      	; 0x1b8 <current_proc+0x6>
     1b8:	cd b7       	in	r28, 0x3d	; 61
     1ba:	de b7       	in	r29, 0x3e	; 62
    proc_t * ret;
    cli();
     1bc:	f8 94       	cli
    ret = kernel.sched[current_vm].current_proc;
     1be:	80 91 26 01 	lds	r24, 0x0126
     1c2:	28 2f       	mov	r18, r24
     1c4:	30 e0       	ldi	r19, 0x00	; 0
     1c6:	8b e2       	ldi	r24, 0x2B	; 43
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	ac 01       	movw	r20, r24
     1cc:	24 9f       	mul	r18, r20
     1ce:	c0 01       	movw	r24, r0
     1d0:	25 9f       	mul	r18, r21
     1d2:	90 0d       	add	r25, r0
     1d4:	34 9f       	mul	r19, r20
     1d6:	90 0d       	add	r25, r0
     1d8:	11 24       	eor	r1, r1
     1da:	fc 01       	movw	r30, r24
     1dc:	e5 52       	subi	r30, 0x25	; 37
     1de:	fd 4f       	sbci	r31, 0xFD	; 253
     1e0:	80 81       	ld	r24, Z
     1e2:	91 81       	ldd	r25, Z+1	; 0x01
     1e4:	9a 83       	std	Y+2, r25	; 0x02
     1e6:	89 83       	std	Y+1, r24	; 0x01
    sei();
     1e8:	78 94       	sei
    return ret;
     1ea:	89 81       	ldd	r24, Y+1	; 0x01
     1ec:	9a 81       	ldd	r25, Y+2	; 0x02
}
     1ee:	0f 90       	pop	r0
     1f0:	0f 90       	pop	r0
     1f2:	cf 91       	pop	r28
     1f4:	df 91       	pop	r29
     1f6:	08 95       	ret

000001f8 <current_core>:

core_id_t current_core(void)
{
     1f8:	df 93       	push	r29
     1fa:	cf 93       	push	r28
     1fc:	0f 92       	push	r0
     1fe:	cd b7       	in	r28, 0x3d	; 61
     200:	de b7       	in	r29, 0x3e	; 62
    core_id_t ret;
    cli();
     202:	f8 94       	cli
    ret = current_vm;
     204:	80 91 26 01 	lds	r24, 0x0126
     208:	89 83       	std	Y+1, r24	; 0x01
    sei();
     20a:	78 94       	sei
    return ret;
     20c:	89 81       	ldd	r24, Y+1	; 0x01
}
     20e:	0f 90       	pop	r0
     210:	cf 91       	pop	r28
     212:	df 91       	pop	r29
     214:	08 95       	ret

00000216 <spin_init>:

void spin_init( lock_t * lock )
{
     216:	df 93       	push	r29
     218:	cf 93       	push	r28
     21a:	00 d0       	rcall	.+0      	; 0x21c <spin_init+0x6>
     21c:	cd b7       	in	r28, 0x3d	; 61
     21e:	de b7       	in	r29, 0x3e	; 62
     220:	9a 83       	std	Y+2, r25	; 0x02
     222:	89 83       	std	Y+1, r24	; 0x01
    cli();
     224:	f8 94       	cli
    *lock = (lock_t)0;
     226:	e9 81       	ldd	r30, Y+1	; 0x01
     228:	fa 81       	ldd	r31, Y+2	; 0x02
     22a:	10 82       	st	Z, r1
    sei();
     22c:	78 94       	sei
}
     22e:	0f 90       	pop	r0
     230:	0f 90       	pop	r0
     232:	cf 91       	pop	r28
     234:	df 91       	pop	r29
     236:	08 95       	ret

00000238 <spin_lock>:

void spin_lock( lock_t * lock )
{
     238:	df 93       	push	r29
     23a:	cf 93       	push	r28
     23c:	00 d0       	rcall	.+0      	; 0x23e <spin_lock+0x6>
     23e:	cd b7       	in	r28, 0x3d	; 61
     240:	de b7       	in	r29, 0x3e	; 62
     242:	9a 83       	std	Y+2, r25	; 0x02
     244:	89 83       	std	Y+1, r24	; 0x01
    while(1)
    {
        cli();
     246:	f8 94       	cli
        if(!*lock)
     248:	e9 81       	ldd	r30, Y+1	; 0x01
     24a:	fa 81       	ldd	r31, Y+2	; 0x02
     24c:	80 81       	ld	r24, Z
     24e:	88 23       	and	r24, r24
     250:	51 f4       	brne	.+20     	; 0x266 <spin_lock+0x2e>
        {
            *lock = (lock_t)1;
     252:	e9 81       	ldd	r30, Y+1	; 0x01
     254:	fa 81       	ldd	r31, Y+2	; 0x02
     256:	81 e0       	ldi	r24, 0x01	; 1
     258:	80 83       	st	Z, r24
            sei();
     25a:	78 94       	sei
            return;
        }
        sei();
    }
}
     25c:	0f 90       	pop	r0
     25e:	0f 90       	pop	r0
     260:	cf 91       	pop	r28
     262:	df 91       	pop	r29
     264:	08 95       	ret
        {
            *lock = (lock_t)1;
            sei();
            return;
        }
        sei();
     266:	78 94       	sei
     268:	ee cf       	rjmp	.-36     	; 0x246 <spin_lock+0xe>

0000026a <spin_unlock>:
    }
}
void spin_unlock(lock_t * lock)
{
     26a:	df 93       	push	r29
     26c:	cf 93       	push	r28
     26e:	00 d0       	rcall	.+0      	; 0x270 <spin_unlock+0x6>
     270:	00 d0       	rcall	.+0      	; 0x272 <spin_unlock+0x8>
     272:	cd b7       	in	r28, 0x3d	; 61
     274:	de b7       	in	r29, 0x3e	; 62
     276:	9c 83       	std	Y+4, r25	; 0x04
     278:	8b 83       	std	Y+3, r24	; 0x03
    unsigned short i;
    //for(i = 0; i< 1000; i++);// delay, all other vms must spin for a while
    cli();
     27a:	f8 94       	cli
    *lock = (lock_t)0;
     27c:	eb 81       	ldd	r30, Y+3	; 0x03
     27e:	fc 81       	ldd	r31, Y+4	; 0x04
     280:	10 82       	st	Z, r1
    sei();
     282:	78 94       	sei
}
     284:	0f 90       	pop	r0
     286:	0f 90       	pop	r0
     288:	0f 90       	pop	r0
     28a:	0f 90       	pop	r0
     28c:	cf 91       	pop	r28
     28e:	df 91       	pop	r29
     290:	08 95       	ret

00000292 <stat_init>:
// stat_t is simply prcess counter here!
void stat_init( stat_t * stat )
{
     292:	df 93       	push	r29
     294:	cf 93       	push	r28
     296:	00 d0       	rcall	.+0      	; 0x298 <stat_init+0x6>
     298:	cd b7       	in	r28, 0x3d	; 61
     29a:	de b7       	in	r29, 0x3e	; 62
     29c:	9a 83       	std	Y+2, r25	; 0x02
     29e:	89 83       	std	Y+1, r24	; 0x01
    *stat = 0; // no lad on a system
     2a0:	e9 81       	ldd	r30, Y+1	; 0x01
     2a2:	fa 81       	ldd	r31, Y+2	; 0x02
     2a4:	10 82       	st	Z, r1
}
     2a6:	0f 90       	pop	r0
     2a8:	0f 90       	pop	r0
     2aa:	cf 91       	pop	r28
     2ac:	df 91       	pop	r29
     2ae:	08 95       	ret

000002b0 <stat_dec>:
void stat_dec( proc_t * proc, stat_t * stat )
{
     2b0:	df 93       	push	r29
     2b2:	cf 93       	push	r28
     2b4:	00 d0       	rcall	.+0      	; 0x2b6 <stat_dec+0x6>
     2b6:	00 d0       	rcall	.+0      	; 0x2b8 <stat_dec+0x8>
     2b8:	cd b7       	in	r28, 0x3d	; 61
     2ba:	de b7       	in	r29, 0x3e	; 62
     2bc:	9a 83       	std	Y+2, r25	; 0x02
     2be:	89 83       	std	Y+1, r24	; 0x01
     2c0:	7c 83       	std	Y+4, r23	; 0x04
     2c2:	6b 83       	std	Y+3, r22	; 0x03
    *stat--;
     2c4:	8b 81       	ldd	r24, Y+3	; 0x03
     2c6:	9c 81       	ldd	r25, Y+4	; 0x04
     2c8:	01 97       	sbiw	r24, 0x01	; 1
     2ca:	9c 83       	std	Y+4, r25	; 0x04
     2cc:	8b 83       	std	Y+3, r24	; 0x03
}
     2ce:	0f 90       	pop	r0
     2d0:	0f 90       	pop	r0
     2d2:	0f 90       	pop	r0
     2d4:	0f 90       	pop	r0
     2d6:	cf 91       	pop	r28
     2d8:	df 91       	pop	r29
     2da:	08 95       	ret

000002dc <stat_inc>:
void stat_inc( proc_t * proc, stat_t * stat )
{
     2dc:	df 93       	push	r29
     2de:	cf 93       	push	r28
     2e0:	00 d0       	rcall	.+0      	; 0x2e2 <stat_inc+0x6>
     2e2:	00 d0       	rcall	.+0      	; 0x2e4 <stat_inc+0x8>
     2e4:	cd b7       	in	r28, 0x3d	; 61
     2e6:	de b7       	in	r29, 0x3e	; 62
     2e8:	9a 83       	std	Y+2, r25	; 0x02
     2ea:	89 83       	std	Y+1, r24	; 0x01
     2ec:	7c 83       	std	Y+4, r23	; 0x04
     2ee:	6b 83       	std	Y+3, r22	; 0x03
    *stat++;
     2f0:	8b 81       	ldd	r24, Y+3	; 0x03
     2f2:	9c 81       	ldd	r25, Y+4	; 0x04
     2f4:	01 96       	adiw	r24, 0x01	; 1
     2f6:	9c 83       	std	Y+4, r25	; 0x04
     2f8:	8b 83       	std	Y+3, r24	; 0x03
}
     2fa:	0f 90       	pop	r0
     2fc:	0f 90       	pop	r0
     2fe:	0f 90       	pop	r0
     300:	0f 90       	pop	r0
     302:	cf 91       	pop	r28
     304:	df 91       	pop	r29
     306:	08 95       	ret

00000308 <stat_merge>:
void stat_merge( stat_t *src_stat, stat_t * dst_stat  )
{
     308:	df 93       	push	r29
     30a:	cf 93       	push	r28
     30c:	00 d0       	rcall	.+0      	; 0x30e <stat_merge+0x6>
     30e:	00 d0       	rcall	.+0      	; 0x310 <stat_merge+0x8>
     310:	cd b7       	in	r28, 0x3d	; 61
     312:	de b7       	in	r29, 0x3e	; 62
     314:	9a 83       	std	Y+2, r25	; 0x02
     316:	89 83       	std	Y+1, r24	; 0x01
     318:	7c 83       	std	Y+4, r23	; 0x04
     31a:	6b 83       	std	Y+3, r22	; 0x03
    *dst_stat += *src_stat;
     31c:	eb 81       	ldd	r30, Y+3	; 0x03
     31e:	fc 81       	ldd	r31, Y+4	; 0x04
     320:	90 81       	ld	r25, Z
     322:	e9 81       	ldd	r30, Y+1	; 0x01
     324:	fa 81       	ldd	r31, Y+2	; 0x02
     326:	80 81       	ld	r24, Z
     328:	89 0f       	add	r24, r25
     32a:	eb 81       	ldd	r30, Y+3	; 0x03
     32c:	fc 81       	ldd	r31, Y+4	; 0x04
     32e:	80 83       	st	Z, r24
    *src_stat = (stat_t)0;
     330:	e9 81       	ldd	r30, Y+1	; 0x01
     332:	fa 81       	ldd	r31, Y+2	; 0x02
     334:	10 82       	st	Z, r1
}
     336:	0f 90       	pop	r0
     338:	0f 90       	pop	r0
     33a:	0f 90       	pop	r0
     33c:	0f 90       	pop	r0
     33e:	cf 91       	pop	r28
     340:	df 91       	pop	r29
     342:	08 95       	ret

00000344 <stat_calc_load>:
load_t stat_calc_load(prio_t prio, stat_t * stat)
{
     344:	df 93       	push	r29
     346:	cf 93       	push	r28
     348:	00 d0       	rcall	.+0      	; 0x34a <stat_calc_load+0x6>
     34a:	0f 92       	push	r0
     34c:	cd b7       	in	r28, 0x3d	; 61
     34e:	de b7       	in	r29, 0x3e	; 62
     350:	89 83       	std	Y+1, r24	; 0x01
     352:	7b 83       	std	Y+3, r23	; 0x03
     354:	6a 83       	std	Y+2, r22	; 0x02
    return (load_t)*stat;
     356:	ea 81       	ldd	r30, Y+2	; 0x02
     358:	fb 81       	ldd	r31, Y+3	; 0x03
     35a:	80 81       	ld	r24, Z
}
     35c:	0f 90       	pop	r0
     35e:	0f 90       	pop	r0
     360:	0f 90       	pop	r0
     362:	cf 91       	pop	r28
     364:	df 91       	pop	r29
     366:	08 95       	ret

00000368 <resched>:
void resched(core_id_t core_id)
{
     368:	df 93       	push	r29
     36a:	cf 93       	push	r28
     36c:	0f 92       	push	r0
     36e:	cd b7       	in	r28, 0x3d	; 61
     370:	de b7       	in	r29, 0x3e	; 62
     372:	89 83       	std	Y+1, r24	; 0x01
    vsmp_vinterrupt_isr( core_id, ( vinterrupt_t * )resched_vectors + core_id );
     374:	89 81       	ldd	r24, Y+1	; 0x01
     376:	28 2f       	mov	r18, r24
     378:	30 e0       	ldi	r19, 0x00	; 0
     37a:	c9 01       	movw	r24, r18
     37c:	88 0f       	add	r24, r24
     37e:	99 1f       	adc	r25, r25
     380:	82 0f       	add	r24, r18
     382:	93 1f       	adc	r25, r19
     384:	88 0f       	add	r24, r24
     386:	99 1f       	adc	r25, r25
     388:	9c 01       	movw	r18, r24
     38a:	21 5c       	subi	r18, 0xC1	; 193
     38c:	3e 4f       	sbci	r19, 0xFE	; 254
     38e:	89 81       	ldd	r24, Y+1	; 0x01
     390:	b9 01       	movw	r22, r18
     392:	0e 94 35 0a 	call	0x146a	; 0x146a <vsmp_vinterrupt_isr>
}
     396:	0f 90       	pop	r0
     398:	cf 91       	pop	r28
     39a:	df 91       	pop	r29
     39c:	08 95       	ret

0000039e <resched_isr>:
///!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
stack_t * saved_vm_sp[MAX_CORES];
bool_t is_idle[MAX_CORES];
__MACRO_FUNCTION__(_bugurt_isr_prologue)
{
    cli();
     39e:	f8 94       	cli
    saved_vm_sp[current_vm] = (stack_t *)SP; // I didn't write bugurt_get_stack_pointer();
     3a0:	80 91 26 01 	lds	r24, 0x0126
     3a4:	48 2f       	mov	r20, r24
     3a6:	50 e0       	ldi	r21, 0x00	; 0
     3a8:	ed e5       	ldi	r30, 0x5D	; 93
     3aa:	f0 e0       	ldi	r31, 0x00	; 0
     3ac:	80 81       	ld	r24, Z
     3ae:	91 81       	ldd	r25, Z+1	; 0x01
     3b0:	9c 01       	movw	r18, r24
     3b2:	ca 01       	movw	r24, r20
     3b4:	88 0f       	add	r24, r24
     3b6:	99 1f       	adc	r25, r25
     3b8:	fc 01       	movw	r30, r24
     3ba:	ec 5e       	subi	r30, 0xEC	; 236
     3bc:	fe 4f       	sbci	r31, 0xFE	; 254
     3be:	31 83       	std	Z+1, r19	; 0x01
     3c0:	20 83       	st	Z, r18
    kernel.sched[current_vm].current_proc->spointer = vm_state[current_vm].sp;
     3c2:	80 91 26 01 	lds	r24, 0x0126
     3c6:	28 2f       	mov	r18, r24
     3c8:	30 e0       	ldi	r19, 0x00	; 0
     3ca:	8b e2       	ldi	r24, 0x2B	; 43
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	ac 01       	movw	r20, r24
     3d0:	24 9f       	mul	r18, r20
     3d2:	c0 01       	movw	r24, r0
     3d4:	25 9f       	mul	r18, r21
     3d6:	90 0d       	add	r25, r0
     3d8:	34 9f       	mul	r19, r20
     3da:	90 0d       	add	r25, r0
     3dc:	11 24       	eor	r1, r1
     3de:	fc 01       	movw	r30, r24
     3e0:	e5 52       	subi	r30, 0x25	; 37
     3e2:	fd 4f       	sbci	r31, 0xFD	; 253
     3e4:	a0 81       	ld	r26, Z
     3e6:	b1 81       	ldd	r27, Z+1	; 0x01
     3e8:	80 91 26 01 	lds	r24, 0x0126
     3ec:	28 2f       	mov	r18, r24
     3ee:	30 e0       	ldi	r19, 0x00	; 0
     3f0:	c9 01       	movw	r24, r18
     3f2:	88 0f       	add	r24, r24
     3f4:	99 1f       	adc	r25, r25
     3f6:	88 0f       	add	r24, r24
     3f8:	99 1f       	adc	r25, r25
     3fa:	88 0f       	add	r24, r24
     3fc:	99 1f       	adc	r25, r25
     3fe:	82 0f       	add	r24, r18
     400:	93 1f       	adc	r25, r19
     402:	fc 01       	movw	r30, r24
     404:	e4 5d       	subi	r30, 0xD4	; 212
     406:	fe 4f       	sbci	r31, 0xFE	; 254
     408:	80 81       	ld	r24, Z
     40a:	91 81       	ldd	r25, Z+1	; 0x01
     40c:	9f 96       	adiw	r26, 0x2f	; 47
     40e:	9c 93       	st	X, r25
     410:	8e 93       	st	-X, r24
     412:	9e 97       	sbiw	r26, 0x2e	; 46
    bugurt_set_stack_pointer( kernel.idle[current_vm].spointer );
     414:	80 91 26 01 	lds	r24, 0x0126
     418:	28 2f       	mov	r18, r24
     41a:	30 e0       	ldi	r19, 0x00	; 0
     41c:	80 e3       	ldi	r24, 0x30	; 48
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	bc 01       	movw	r22, r24
     422:	26 9f       	mul	r18, r22
     424:	c0 01       	movw	r24, r0
     426:	27 9f       	mul	r18, r23
     428:	90 0d       	add	r25, r0
     42a:	36 9f       	mul	r19, r22
     42c:	90 0d       	add	r25, r0
     42e:	11 24       	eor	r1, r1
     430:	fc 01       	movw	r30, r24
     432:	e1 5a       	subi	r30, 0xA1	; 161
     434:	fc 4f       	sbci	r31, 0xFC	; 252
     436:	80 81       	ld	r24, Z
     438:	91 81       	ldd	r25, Z+1	; 0x01
     43a:	0e 94 c5 00 	call	0x18a	; 0x18a <bugurt_set_stack_pointer>
    sei();
     43e:	78 94       	sei
vinterrupt_t resched_vectors[MAX_CORES];
__attribute__ (( naked )) void resched_isr(void)
{
    _bugurt_isr_prologue();

    sched_reschedule();
     440:	0e 94 67 18 	call	0x30ce	; 0x30ce <sched_reschedule>
    bugurt_set_stack_pointer( kernel.idle[current_vm].spointer );
    sei();
}
__MACRO_FUNCTION__(_bugurt_isr_epilogue)
{
    cli();
     444:	f8 94       	cli
    vm_state[current_vm].sp = kernel.sched[current_vm].current_proc->spointer;
     446:	80 91 26 01 	lds	r24, 0x0126
     44a:	48 2f       	mov	r20, r24
     44c:	50 e0       	ldi	r21, 0x00	; 0
     44e:	80 91 26 01 	lds	r24, 0x0126
     452:	28 2f       	mov	r18, r24
     454:	30 e0       	ldi	r19, 0x00	; 0
     456:	8b e2       	ldi	r24, 0x2B	; 43
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	bc 01       	movw	r22, r24
     45c:	26 9f       	mul	r18, r22
     45e:	c0 01       	movw	r24, r0
     460:	27 9f       	mul	r18, r23
     462:	90 0d       	add	r25, r0
     464:	36 9f       	mul	r19, r22
     466:	90 0d       	add	r25, r0
     468:	11 24       	eor	r1, r1
     46a:	fc 01       	movw	r30, r24
     46c:	e5 52       	subi	r30, 0x25	; 37
     46e:	fd 4f       	sbci	r31, 0xFD	; 253
     470:	01 90       	ld	r0, Z+
     472:	f0 81       	ld	r31, Z
     474:	e0 2d       	mov	r30, r0
     476:	26 a5       	ldd	r18, Z+46	; 0x2e
     478:	37 a5       	ldd	r19, Z+47	; 0x2f
     47a:	ca 01       	movw	r24, r20
     47c:	88 0f       	add	r24, r24
     47e:	99 1f       	adc	r25, r25
     480:	88 0f       	add	r24, r24
     482:	99 1f       	adc	r25, r25
     484:	88 0f       	add	r24, r24
     486:	99 1f       	adc	r25, r25
     488:	84 0f       	add	r24, r20
     48a:	95 1f       	adc	r25, r21
     48c:	fc 01       	movw	r30, r24
     48e:	e4 5d       	subi	r30, 0xD4	; 212
     490:	fe 4f       	sbci	r31, 0xFE	; 254
     492:	31 83       	std	Z+1, r19	; 0x01
     494:	20 83       	st	Z, r18
    bugurt_set_stack_pointer( saved_vm_sp[current_vm] );
     496:	80 91 26 01 	lds	r24, 0x0126
     49a:	88 2f       	mov	r24, r24
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	88 0f       	add	r24, r24
     4a0:	99 1f       	adc	r25, r25
     4a2:	fc 01       	movw	r30, r24
     4a4:	ec 5e       	subi	r30, 0xEC	; 236
     4a6:	fe 4f       	sbci	r31, 0xFE	; 254
     4a8:	80 81       	ld	r24, Z
     4aa:	91 81       	ldd	r25, Z+1	; 0x01
     4ac:	0e 94 c5 00 	call	0x18a	; 0x18a <bugurt_set_stack_pointer>
    __asm__ __volatile__("reti"::);
     4b0:	18 95       	reti

000004b2 <resched_vectors_init>:
    sched_reschedule();

    _bugurt_isr_epilogue();
}
void resched_vectors_init(void)
{
     4b2:	df 93       	push	r29
     4b4:	cf 93       	push	r28
     4b6:	0f 92       	push	r0
     4b8:	cd b7       	in	r28, 0x3d	; 61
     4ba:	de b7       	in	r29, 0x3e	; 62
    core_id_t i;
    for(i = 0; i < MAX_CORES; i++)
     4bc:	19 82       	std	Y+1, r1	; 0x01
     4be:	14 c0       	rjmp	.+40     	; 0x4e8 <resched_vectors_init+0x36>
    {
        vsmp_vinterrupt_init( ( vinterrupt_t * )resched_vectors + i, resched_isr );
     4c0:	89 81       	ldd	r24, Y+1	; 0x01
     4c2:	28 2f       	mov	r18, r24
     4c4:	30 e0       	ldi	r19, 0x00	; 0
     4c6:	c9 01       	movw	r24, r18
     4c8:	88 0f       	add	r24, r24
     4ca:	99 1f       	adc	r25, r25
     4cc:	82 0f       	add	r24, r18
     4ce:	93 1f       	adc	r25, r19
     4d0:	88 0f       	add	r24, r24
     4d2:	99 1f       	adc	r25, r25
     4d4:	81 5c       	subi	r24, 0xC1	; 193
     4d6:	9e 4f       	sbci	r25, 0xFE	; 254
     4d8:	2f ec       	ldi	r18, 0xCF	; 207
     4da:	31 e0       	ldi	r19, 0x01	; 1
     4dc:	b9 01       	movw	r22, r18
     4de:	0e 94 9a 0a 	call	0x1534	; 0x1534 <vsmp_vinterrupt_init>
    _bugurt_isr_epilogue();
}
void resched_vectors_init(void)
{
    core_id_t i;
    for(i = 0; i < MAX_CORES; i++)
     4e2:	89 81       	ldd	r24, Y+1	; 0x01
     4e4:	8f 5f       	subi	r24, 0xFF	; 255
     4e6:	89 83       	std	Y+1, r24	; 0x01
     4e8:	89 81       	ldd	r24, Y+1	; 0x01
     4ea:	82 30       	cpi	r24, 0x02	; 2
     4ec:	48 f3       	brcs	.-46     	; 0x4c0 <resched_vectors_init+0xe>
    {
        vsmp_vinterrupt_init( ( vinterrupt_t * )resched_vectors + i, resched_isr );
    }
}
     4ee:	0f 90       	pop	r0
     4f0:	cf 91       	pop	r28
     4f2:	df 91       	pop	r29
     4f4:	08 95       	ret

000004f6 <_systimer_tick_isr>:

vinterrupt_t systimer_vectors[MAX_CORES];
void _systimer_tick_isr(void)
{
     4f6:	df 93       	push	r29
     4f8:	cf 93       	push	r28
     4fa:	cd b7       	in	r28, 0x3d	; 61
     4fc:	de b7       	in	r29, 0x3e	; 62
    SPIN_LOCK_KERNEL_TIMER();
     4fe:	84 e9       	ldi	r24, 0x94	; 148
     500:	93 e0       	ldi	r25, 0x03	; 3
     502:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    kernel.timer++;
     506:	80 91 95 03 	lds	r24, 0x0395
     50a:	90 91 96 03 	lds	r25, 0x0396
     50e:	01 96       	adiw	r24, 0x01	; 1
     510:	90 93 96 03 	sts	0x0396, r25
     514:	80 93 95 03 	sts	0x0395, r24
    if( kernel.timer_tick != (void (*)(void))0 ) kernel.timer_tick();
     518:	80 91 97 03 	lds	r24, 0x0397
     51c:	90 91 98 03 	lds	r25, 0x0398
     520:	00 97       	sbiw	r24, 0x00	; 0
     522:	29 f0       	breq	.+10     	; 0x52e <_systimer_tick_isr+0x38>
     524:	e0 91 97 03 	lds	r30, 0x0397
     528:	f0 91 98 03 	lds	r31, 0x0398
     52c:	09 95       	icall
    SPIN_UNLOCK_KERNEL_TIMER();
     52e:	84 e9       	ldi	r24, 0x94	; 148
     530:	93 e0       	ldi	r25, 0x03	; 3
     532:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>

    sched_schedule();
     536:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <sched_schedule>
}
     53a:	cf 91       	pop	r28
     53c:	df 91       	pop	r29
     53e:	08 95       	ret

00000540 <systimer_tick_isr>:
///!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
stack_t * saved_vm_sp[MAX_CORES];
bool_t is_idle[MAX_CORES];
__MACRO_FUNCTION__(_bugurt_isr_prologue)
{
    cli();
     540:	f8 94       	cli
    saved_vm_sp[current_vm] = (stack_t *)SP; // I didn't write bugurt_get_stack_pointer();
     542:	80 91 26 01 	lds	r24, 0x0126
     546:	48 2f       	mov	r20, r24
     548:	50 e0       	ldi	r21, 0x00	; 0
     54a:	ed e5       	ldi	r30, 0x5D	; 93
     54c:	f0 e0       	ldi	r31, 0x00	; 0
     54e:	80 81       	ld	r24, Z
     550:	91 81       	ldd	r25, Z+1	; 0x01
     552:	9c 01       	movw	r18, r24
     554:	ca 01       	movw	r24, r20
     556:	88 0f       	add	r24, r24
     558:	99 1f       	adc	r25, r25
     55a:	fc 01       	movw	r30, r24
     55c:	ec 5e       	subi	r30, 0xEC	; 236
     55e:	fe 4f       	sbci	r31, 0xFE	; 254
     560:	31 83       	std	Z+1, r19	; 0x01
     562:	20 83       	st	Z, r18
    kernel.sched[current_vm].current_proc->spointer = vm_state[current_vm].sp;
     564:	80 91 26 01 	lds	r24, 0x0126
     568:	28 2f       	mov	r18, r24
     56a:	30 e0       	ldi	r19, 0x00	; 0
     56c:	8b e2       	ldi	r24, 0x2B	; 43
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	ac 01       	movw	r20, r24
     572:	24 9f       	mul	r18, r20
     574:	c0 01       	movw	r24, r0
     576:	25 9f       	mul	r18, r21
     578:	90 0d       	add	r25, r0
     57a:	34 9f       	mul	r19, r20
     57c:	90 0d       	add	r25, r0
     57e:	11 24       	eor	r1, r1
     580:	fc 01       	movw	r30, r24
     582:	e5 52       	subi	r30, 0x25	; 37
     584:	fd 4f       	sbci	r31, 0xFD	; 253
     586:	a0 81       	ld	r26, Z
     588:	b1 81       	ldd	r27, Z+1	; 0x01
     58a:	80 91 26 01 	lds	r24, 0x0126
     58e:	28 2f       	mov	r18, r24
     590:	30 e0       	ldi	r19, 0x00	; 0
     592:	c9 01       	movw	r24, r18
     594:	88 0f       	add	r24, r24
     596:	99 1f       	adc	r25, r25
     598:	88 0f       	add	r24, r24
     59a:	99 1f       	adc	r25, r25
     59c:	88 0f       	add	r24, r24
     59e:	99 1f       	adc	r25, r25
     5a0:	82 0f       	add	r24, r18
     5a2:	93 1f       	adc	r25, r19
     5a4:	fc 01       	movw	r30, r24
     5a6:	e4 5d       	subi	r30, 0xD4	; 212
     5a8:	fe 4f       	sbci	r31, 0xFE	; 254
     5aa:	80 81       	ld	r24, Z
     5ac:	91 81       	ldd	r25, Z+1	; 0x01
     5ae:	9f 96       	adiw	r26, 0x2f	; 47
     5b0:	9c 93       	st	X, r25
     5b2:	8e 93       	st	-X, r24
     5b4:	9e 97       	sbiw	r26, 0x2e	; 46
    bugurt_set_stack_pointer( kernel.idle[current_vm].spointer );
     5b6:	80 91 26 01 	lds	r24, 0x0126
     5ba:	28 2f       	mov	r18, r24
     5bc:	30 e0       	ldi	r19, 0x00	; 0
     5be:	80 e3       	ldi	r24, 0x30	; 48
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	bc 01       	movw	r22, r24
     5c4:	26 9f       	mul	r18, r22
     5c6:	c0 01       	movw	r24, r0
     5c8:	27 9f       	mul	r18, r23
     5ca:	90 0d       	add	r25, r0
     5cc:	36 9f       	mul	r19, r22
     5ce:	90 0d       	add	r25, r0
     5d0:	11 24       	eor	r1, r1
     5d2:	fc 01       	movw	r30, r24
     5d4:	e1 5a       	subi	r30, 0xA1	; 161
     5d6:	fc 4f       	sbci	r31, 0xFC	; 252
     5d8:	80 81       	ld	r24, Z
     5da:	91 81       	ldd	r25, Z+1	; 0x01
     5dc:	0e 94 c5 00 	call	0x18a	; 0x18a <bugurt_set_stack_pointer>
    sei();
     5e0:	78 94       	sei
}
__attribute__ (( naked )) void systimer_tick_isr(void)
{
    _bugurt_isr_prologue();

    _systimer_tick_isr();
     5e2:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <_systimer_tick_isr>
    bugurt_set_stack_pointer( kernel.idle[current_vm].spointer );
    sei();
}
__MACRO_FUNCTION__(_bugurt_isr_epilogue)
{
    cli();
     5e6:	f8 94       	cli
    vm_state[current_vm].sp = kernel.sched[current_vm].current_proc->spointer;
     5e8:	80 91 26 01 	lds	r24, 0x0126
     5ec:	48 2f       	mov	r20, r24
     5ee:	50 e0       	ldi	r21, 0x00	; 0
     5f0:	80 91 26 01 	lds	r24, 0x0126
     5f4:	28 2f       	mov	r18, r24
     5f6:	30 e0       	ldi	r19, 0x00	; 0
     5f8:	8b e2       	ldi	r24, 0x2B	; 43
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	bc 01       	movw	r22, r24
     5fe:	26 9f       	mul	r18, r22
     600:	c0 01       	movw	r24, r0
     602:	27 9f       	mul	r18, r23
     604:	90 0d       	add	r25, r0
     606:	36 9f       	mul	r19, r22
     608:	90 0d       	add	r25, r0
     60a:	11 24       	eor	r1, r1
     60c:	fc 01       	movw	r30, r24
     60e:	e5 52       	subi	r30, 0x25	; 37
     610:	fd 4f       	sbci	r31, 0xFD	; 253
     612:	01 90       	ld	r0, Z+
     614:	f0 81       	ld	r31, Z
     616:	e0 2d       	mov	r30, r0
     618:	26 a5       	ldd	r18, Z+46	; 0x2e
     61a:	37 a5       	ldd	r19, Z+47	; 0x2f
     61c:	ca 01       	movw	r24, r20
     61e:	88 0f       	add	r24, r24
     620:	99 1f       	adc	r25, r25
     622:	88 0f       	add	r24, r24
     624:	99 1f       	adc	r25, r25
     626:	88 0f       	add	r24, r24
     628:	99 1f       	adc	r25, r25
     62a:	84 0f       	add	r24, r20
     62c:	95 1f       	adc	r25, r21
     62e:	fc 01       	movw	r30, r24
     630:	e4 5d       	subi	r30, 0xD4	; 212
     632:	fe 4f       	sbci	r31, 0xFE	; 254
     634:	31 83       	std	Z+1, r19	; 0x01
     636:	20 83       	st	Z, r18
    bugurt_set_stack_pointer( saved_vm_sp[current_vm] );
     638:	80 91 26 01 	lds	r24, 0x0126
     63c:	88 2f       	mov	r24, r24
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	88 0f       	add	r24, r24
     642:	99 1f       	adc	r25, r25
     644:	fc 01       	movw	r30, r24
     646:	ec 5e       	subi	r30, 0xEC	; 236
     648:	fe 4f       	sbci	r31, 0xFE	; 254
     64a:	80 81       	ld	r24, Z
     64c:	91 81       	ldd	r25, Z+1	; 0x01
     64e:	0e 94 c5 00 	call	0x18a	; 0x18a <bugurt_set_stack_pointer>
    __asm__ __volatile__("reti"::);
     652:	18 95       	reti

00000654 <systimer_sched_isr>:
///!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
stack_t * saved_vm_sp[MAX_CORES];
bool_t is_idle[MAX_CORES];
__MACRO_FUNCTION__(_bugurt_isr_prologue)
{
    cli();
     654:	f8 94       	cli
    saved_vm_sp[current_vm] = (stack_t *)SP; // I didn't write bugurt_get_stack_pointer();
     656:	80 91 26 01 	lds	r24, 0x0126
     65a:	48 2f       	mov	r20, r24
     65c:	50 e0       	ldi	r21, 0x00	; 0
     65e:	ed e5       	ldi	r30, 0x5D	; 93
     660:	f0 e0       	ldi	r31, 0x00	; 0
     662:	80 81       	ld	r24, Z
     664:	91 81       	ldd	r25, Z+1	; 0x01
     666:	9c 01       	movw	r18, r24
     668:	ca 01       	movw	r24, r20
     66a:	88 0f       	add	r24, r24
     66c:	99 1f       	adc	r25, r25
     66e:	fc 01       	movw	r30, r24
     670:	ec 5e       	subi	r30, 0xEC	; 236
     672:	fe 4f       	sbci	r31, 0xFE	; 254
     674:	31 83       	std	Z+1, r19	; 0x01
     676:	20 83       	st	Z, r18
    kernel.sched[current_vm].current_proc->spointer = vm_state[current_vm].sp;
     678:	80 91 26 01 	lds	r24, 0x0126
     67c:	28 2f       	mov	r18, r24
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	8b e2       	ldi	r24, 0x2B	; 43
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	ac 01       	movw	r20, r24
     686:	24 9f       	mul	r18, r20
     688:	c0 01       	movw	r24, r0
     68a:	25 9f       	mul	r18, r21
     68c:	90 0d       	add	r25, r0
     68e:	34 9f       	mul	r19, r20
     690:	90 0d       	add	r25, r0
     692:	11 24       	eor	r1, r1
     694:	fc 01       	movw	r30, r24
     696:	e5 52       	subi	r30, 0x25	; 37
     698:	fd 4f       	sbci	r31, 0xFD	; 253
     69a:	a0 81       	ld	r26, Z
     69c:	b1 81       	ldd	r27, Z+1	; 0x01
     69e:	80 91 26 01 	lds	r24, 0x0126
     6a2:	28 2f       	mov	r18, r24
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	c9 01       	movw	r24, r18
     6a8:	88 0f       	add	r24, r24
     6aa:	99 1f       	adc	r25, r25
     6ac:	88 0f       	add	r24, r24
     6ae:	99 1f       	adc	r25, r25
     6b0:	88 0f       	add	r24, r24
     6b2:	99 1f       	adc	r25, r25
     6b4:	82 0f       	add	r24, r18
     6b6:	93 1f       	adc	r25, r19
     6b8:	fc 01       	movw	r30, r24
     6ba:	e4 5d       	subi	r30, 0xD4	; 212
     6bc:	fe 4f       	sbci	r31, 0xFE	; 254
     6be:	80 81       	ld	r24, Z
     6c0:	91 81       	ldd	r25, Z+1	; 0x01
     6c2:	9f 96       	adiw	r26, 0x2f	; 47
     6c4:	9c 93       	st	X, r25
     6c6:	8e 93       	st	-X, r24
     6c8:	9e 97       	sbiw	r26, 0x2e	; 46
    bugurt_set_stack_pointer( kernel.idle[current_vm].spointer );
     6ca:	80 91 26 01 	lds	r24, 0x0126
     6ce:	28 2f       	mov	r18, r24
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	80 e3       	ldi	r24, 0x30	; 48
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	bc 01       	movw	r22, r24
     6d8:	26 9f       	mul	r18, r22
     6da:	c0 01       	movw	r24, r0
     6dc:	27 9f       	mul	r18, r23
     6de:	90 0d       	add	r25, r0
     6e0:	36 9f       	mul	r19, r22
     6e2:	90 0d       	add	r25, r0
     6e4:	11 24       	eor	r1, r1
     6e6:	fc 01       	movw	r30, r24
     6e8:	e1 5a       	subi	r30, 0xA1	; 161
     6ea:	fc 4f       	sbci	r31, 0xFC	; 252
     6ec:	80 81       	ld	r24, Z
     6ee:	91 81       	ldd	r25, Z+1	; 0x01
     6f0:	0e 94 c5 00 	call	0x18a	; 0x18a <bugurt_set_stack_pointer>
    sei();
     6f4:	78 94       	sei

__attribute__ (( naked )) void systimer_sched_isr(void)
{
    _bugurt_isr_prologue();

    sched_schedule();
     6f6:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <sched_schedule>
    bugurt_set_stack_pointer( kernel.idle[current_vm].spointer );
    sei();
}
__MACRO_FUNCTION__(_bugurt_isr_epilogue)
{
    cli();
     6fa:	f8 94       	cli
    vm_state[current_vm].sp = kernel.sched[current_vm].current_proc->spointer;
     6fc:	80 91 26 01 	lds	r24, 0x0126
     700:	48 2f       	mov	r20, r24
     702:	50 e0       	ldi	r21, 0x00	; 0
     704:	80 91 26 01 	lds	r24, 0x0126
     708:	28 2f       	mov	r18, r24
     70a:	30 e0       	ldi	r19, 0x00	; 0
     70c:	8b e2       	ldi	r24, 0x2B	; 43
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	bc 01       	movw	r22, r24
     712:	26 9f       	mul	r18, r22
     714:	c0 01       	movw	r24, r0
     716:	27 9f       	mul	r18, r23
     718:	90 0d       	add	r25, r0
     71a:	36 9f       	mul	r19, r22
     71c:	90 0d       	add	r25, r0
     71e:	11 24       	eor	r1, r1
     720:	fc 01       	movw	r30, r24
     722:	e5 52       	subi	r30, 0x25	; 37
     724:	fd 4f       	sbci	r31, 0xFD	; 253
     726:	01 90       	ld	r0, Z+
     728:	f0 81       	ld	r31, Z
     72a:	e0 2d       	mov	r30, r0
     72c:	26 a5       	ldd	r18, Z+46	; 0x2e
     72e:	37 a5       	ldd	r19, Z+47	; 0x2f
     730:	ca 01       	movw	r24, r20
     732:	88 0f       	add	r24, r24
     734:	99 1f       	adc	r25, r25
     736:	88 0f       	add	r24, r24
     738:	99 1f       	adc	r25, r25
     73a:	88 0f       	add	r24, r24
     73c:	99 1f       	adc	r25, r25
     73e:	84 0f       	add	r24, r20
     740:	95 1f       	adc	r25, r21
     742:	fc 01       	movw	r30, r24
     744:	e4 5d       	subi	r30, 0xD4	; 212
     746:	fe 4f       	sbci	r31, 0xFE	; 254
     748:	31 83       	std	Z+1, r19	; 0x01
     74a:	20 83       	st	Z, r18
    bugurt_set_stack_pointer( saved_vm_sp[current_vm] );
     74c:	80 91 26 01 	lds	r24, 0x0126
     750:	88 2f       	mov	r24, r24
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	88 0f       	add	r24, r24
     756:	99 1f       	adc	r25, r25
     758:	fc 01       	movw	r30, r24
     75a:	ec 5e       	subi	r30, 0xEC	; 236
     75c:	fe 4f       	sbci	r31, 0xFE	; 254
     75e:	80 81       	ld	r24, Z
     760:	91 81       	ldd	r25, Z+1	; 0x01
     762:	0e 94 c5 00 	call	0x18a	; 0x18a <bugurt_set_stack_pointer>
    __asm__ __volatile__("reti"::);
     766:	18 95       	reti

00000768 <systimer_vectors_init>:

    _bugurt_isr_epilogue();
}

void systimer_vectors_init(void)
{
     768:	df 93       	push	r29
     76a:	cf 93       	push	r28
     76c:	0f 92       	push	r0
     76e:	cd b7       	in	r28, 0x3d	; 61
     770:	de b7       	in	r29, 0x3e	; 62
    core_id_t i;
    vsmp_vinterrupt_init( (vinterrupt_t *)systimer_vectors, systimer_tick_isr ); // Zero core is "mater", it handles kernel.timer
     772:	8b e4       	ldi	r24, 0x4B	; 75
     774:	91 e0       	ldi	r25, 0x01	; 1
     776:	20 ea       	ldi	r18, 0xA0	; 160
     778:	32 e0       	ldi	r19, 0x02	; 2
     77a:	b9 01       	movw	r22, r18
     77c:	0e 94 9a 0a 	call	0x1534	; 0x1534 <vsmp_vinterrupt_init>
    for(i = 1; i < MAX_CORES; i++)
     780:	81 e0       	ldi	r24, 0x01	; 1
     782:	89 83       	std	Y+1, r24	; 0x01
     784:	14 c0       	rjmp	.+40     	; 0x7ae <systimer_vectors_init+0x46>
    {
        vsmp_vinterrupt_init( (vinterrupt_t *)systimer_vectors + i, systimer_sched_isr ); // Other cores are slaves they just shedule.
     786:	89 81       	ldd	r24, Y+1	; 0x01
     788:	28 2f       	mov	r18, r24
     78a:	30 e0       	ldi	r19, 0x00	; 0
     78c:	c9 01       	movw	r24, r18
     78e:	88 0f       	add	r24, r24
     790:	99 1f       	adc	r25, r25
     792:	82 0f       	add	r24, r18
     794:	93 1f       	adc	r25, r19
     796:	88 0f       	add	r24, r24
     798:	99 1f       	adc	r25, r25
     79a:	85 5b       	subi	r24, 0xB5	; 181
     79c:	9e 4f       	sbci	r25, 0xFE	; 254
     79e:	2a e2       	ldi	r18, 0x2A	; 42
     7a0:	33 e0       	ldi	r19, 0x03	; 3
     7a2:	b9 01       	movw	r22, r18
     7a4:	0e 94 9a 0a 	call	0x1534	; 0x1534 <vsmp_vinterrupt_init>

void systimer_vectors_init(void)
{
    core_id_t i;
    vsmp_vinterrupt_init( (vinterrupt_t *)systimer_vectors, systimer_tick_isr ); // Zero core is "mater", it handles kernel.timer
    for(i = 1; i < MAX_CORES; i++)
     7a8:	89 81       	ldd	r24, Y+1	; 0x01
     7aa:	8f 5f       	subi	r24, 0xFF	; 255
     7ac:	89 83       	std	Y+1, r24	; 0x01
     7ae:	89 81       	ldd	r24, Y+1	; 0x01
     7b0:	82 30       	cpi	r24, 0x02	; 2
     7b2:	48 f3       	brcs	.-46     	; 0x786 <systimer_vectors_init+0x1e>
    {
        vsmp_vinterrupt_init( (vinterrupt_t *)systimer_vectors + i, systimer_sched_isr ); // Other cores are slaves they just shedule.
    }
}
     7b4:	0f 90       	pop	r0
     7b6:	cf 91       	pop	r28
     7b8:	df 91       	pop	r29
     7ba:	08 95       	ret

000007bc <systimer_vectors_fire>:

void systimer_vectors_fire(void)
{
     7bc:	df 93       	push	r29
     7be:	cf 93       	push	r28
     7c0:	0f 92       	push	r0
     7c2:	cd b7       	in	r28, 0x3d	; 61
     7c4:	de b7       	in	r29, 0x3e	; 62
    core_id_t i;
    for(i = 0; i < MAX_CORES; i++)
     7c6:	19 82       	std	Y+1, r1	; 0x01
     7c8:	14 c0       	rjmp	.+40     	; 0x7f2 <systimer_vectors_fire+0x36>
    {
        vsmp_vinterrupt_isr( i, (vinterrupt_t *)systimer_vectors + i );
     7ca:	89 81       	ldd	r24, Y+1	; 0x01
     7cc:	28 2f       	mov	r18, r24
     7ce:	30 e0       	ldi	r19, 0x00	; 0
     7d0:	c9 01       	movw	r24, r18
     7d2:	88 0f       	add	r24, r24
     7d4:	99 1f       	adc	r25, r25
     7d6:	82 0f       	add	r24, r18
     7d8:	93 1f       	adc	r25, r19
     7da:	88 0f       	add	r24, r24
     7dc:	99 1f       	adc	r25, r25
     7de:	9c 01       	movw	r18, r24
     7e0:	25 5b       	subi	r18, 0xB5	; 181
     7e2:	3e 4f       	sbci	r19, 0xFE	; 254
     7e4:	89 81       	ldd	r24, Y+1	; 0x01
     7e6:	b9 01       	movw	r22, r18
     7e8:	0e 94 35 0a 	call	0x146a	; 0x146a <vsmp_vinterrupt_isr>
}

void systimer_vectors_fire(void)
{
    core_id_t i;
    for(i = 0; i < MAX_CORES; i++)
     7ec:	89 81       	ldd	r24, Y+1	; 0x01
     7ee:	8f 5f       	subi	r24, 0xFF	; 255
     7f0:	89 83       	std	Y+1, r24	; 0x01
     7f2:	89 81       	ldd	r24, Y+1	; 0x01
     7f4:	82 30       	cpi	r24, 0x02	; 2
     7f6:	48 f3       	brcs	.-46     	; 0x7ca <systimer_vectors_fire+0xe>
    {
        vsmp_vinterrupt_isr( i, (vinterrupt_t *)systimer_vectors + i );
    }
}
     7f8:	0f 90       	pop	r0
     7fa:	cf 91       	pop	r28
     7fc:	df 91       	pop	r29
     7fe:	08 95       	ret

00000800 <vsmp_systimer_hook_bugurt>:

#define SYSTIMER_HOOK_THR 10
count_t systimer_hook_counter = 0;
void vsmp_systimer_hook_bugurt(void)
{
     800:	df 93       	push	r29
     802:	cf 93       	push	r28
     804:	cd b7       	in	r28, 0x3d	; 61
     806:	de b7       	in	r29, 0x3e	; 62
    if(!current_vm)
     808:	80 91 26 01 	lds	r24, 0x0126
     80c:	88 23       	and	r24, r24
     80e:	b1 f4       	brne	.+44     	; 0x83c <vsmp_systimer_hook_bugurt+0x3c>
    {
        systimer_hook_counter++;
     810:	80 91 12 01 	lds	r24, 0x0112
     814:	90 91 13 01 	lds	r25, 0x0113
     818:	01 96       	adiw	r24, 0x01	; 1
     81a:	90 93 13 01 	sts	0x0113, r25
     81e:	80 93 12 01 	sts	0x0112, r24
        if( systimer_hook_counter >= SYSTIMER_HOOK_THR )
     822:	80 91 12 01 	lds	r24, 0x0112
     826:	90 91 13 01 	lds	r25, 0x0113
     82a:	8a 30       	cpi	r24, 0x0A	; 10
     82c:	91 05       	cpc	r25, r1
     82e:	30 f0       	brcs	.+12     	; 0x83c <vsmp_systimer_hook_bugurt+0x3c>
        {
            systimer_hook_counter = (count_t)0;
     830:	10 92 13 01 	sts	0x0113, r1
     834:	10 92 12 01 	sts	0x0112, r1
            systimer_vectors_fire();
     838:	0e 94 de 03 	call	0x7bc	; 0x7bc <systimer_vectors_fire>
        }

    }
}
     83c:	cf 91       	pop	r28
     83e:	df 91       	pop	r29
     840:	08 95       	ret

00000842 <_syscall_isr>:
syscall_t syscall_num[MAX_CORES];
void * syscall_arg[MAX_CORES];

// Local variable is used compiler generated prologue and epilogue needed
void _syscall_isr(void)
{
     842:	df 93       	push	r29
     844:	cf 93       	push	r28
     846:	0f 92       	push	r0
     848:	cd b7       	in	r28, 0x3d	; 61
     84a:	de b7       	in	r29, 0x3e	; 62
    core_id_t core;
    core = current_core();
     84c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <current_core>
     850:	89 83       	std	Y+1, r24	; 0x01
    do_syscall( syscall_num[core], syscall_arg[core] );
     852:	89 81       	ldd	r24, Y+1	; 0x01
     854:	88 2f       	mov	r24, r24
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	fc 01       	movw	r30, r24
     85a:	e3 5c       	subi	r30, 0xC3	; 195
     85c:	fe 4f       	sbci	r31, 0xFE	; 254
     85e:	40 81       	ld	r20, Z
     860:	89 81       	ldd	r24, Y+1	; 0x01
     862:	88 2f       	mov	r24, r24
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	88 0f       	add	r24, r24
     868:	99 1f       	adc	r25, r25
     86a:	fc 01       	movw	r30, r24
     86c:	e7 5c       	subi	r30, 0xC7	; 199
     86e:	fe 4f       	sbci	r31, 0xFE	; 254
     870:	20 81       	ld	r18, Z
     872:	31 81       	ldd	r19, Z+1	; 0x01
     874:	84 2f       	mov	r24, r20
     876:	b9 01       	movw	r22, r18
     878:	0e 94 f0 1b 	call	0x37e0	; 0x37e0 <do_syscall>
}
     87c:	0f 90       	pop	r0
     87e:	cf 91       	pop	r28
     880:	df 91       	pop	r29
     882:	08 95       	ret

00000884 <syscall_isr>:
///!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
stack_t * saved_vm_sp[MAX_CORES];
bool_t is_idle[MAX_CORES];
__MACRO_FUNCTION__(_bugurt_isr_prologue)
{
    cli();
     884:	f8 94       	cli
    saved_vm_sp[current_vm] = (stack_t *)SP; // I didn't write bugurt_get_stack_pointer();
     886:	80 91 26 01 	lds	r24, 0x0126
     88a:	48 2f       	mov	r20, r24
     88c:	50 e0       	ldi	r21, 0x00	; 0
     88e:	ed e5       	ldi	r30, 0x5D	; 93
     890:	f0 e0       	ldi	r31, 0x00	; 0
     892:	80 81       	ld	r24, Z
     894:	91 81       	ldd	r25, Z+1	; 0x01
     896:	9c 01       	movw	r18, r24
     898:	ca 01       	movw	r24, r20
     89a:	88 0f       	add	r24, r24
     89c:	99 1f       	adc	r25, r25
     89e:	fc 01       	movw	r30, r24
     8a0:	ec 5e       	subi	r30, 0xEC	; 236
     8a2:	fe 4f       	sbci	r31, 0xFE	; 254
     8a4:	31 83       	std	Z+1, r19	; 0x01
     8a6:	20 83       	st	Z, r18
    kernel.sched[current_vm].current_proc->spointer = vm_state[current_vm].sp;
     8a8:	80 91 26 01 	lds	r24, 0x0126
     8ac:	28 2f       	mov	r18, r24
     8ae:	30 e0       	ldi	r19, 0x00	; 0
     8b0:	8b e2       	ldi	r24, 0x2B	; 43
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	ac 01       	movw	r20, r24
     8b6:	24 9f       	mul	r18, r20
     8b8:	c0 01       	movw	r24, r0
     8ba:	25 9f       	mul	r18, r21
     8bc:	90 0d       	add	r25, r0
     8be:	34 9f       	mul	r19, r20
     8c0:	90 0d       	add	r25, r0
     8c2:	11 24       	eor	r1, r1
     8c4:	fc 01       	movw	r30, r24
     8c6:	e5 52       	subi	r30, 0x25	; 37
     8c8:	fd 4f       	sbci	r31, 0xFD	; 253
     8ca:	a0 81       	ld	r26, Z
     8cc:	b1 81       	ldd	r27, Z+1	; 0x01
     8ce:	80 91 26 01 	lds	r24, 0x0126
     8d2:	28 2f       	mov	r18, r24
     8d4:	30 e0       	ldi	r19, 0x00	; 0
     8d6:	c9 01       	movw	r24, r18
     8d8:	88 0f       	add	r24, r24
     8da:	99 1f       	adc	r25, r25
     8dc:	88 0f       	add	r24, r24
     8de:	99 1f       	adc	r25, r25
     8e0:	88 0f       	add	r24, r24
     8e2:	99 1f       	adc	r25, r25
     8e4:	82 0f       	add	r24, r18
     8e6:	93 1f       	adc	r25, r19
     8e8:	fc 01       	movw	r30, r24
     8ea:	e4 5d       	subi	r30, 0xD4	; 212
     8ec:	fe 4f       	sbci	r31, 0xFE	; 254
     8ee:	80 81       	ld	r24, Z
     8f0:	91 81       	ldd	r25, Z+1	; 0x01
     8f2:	9f 96       	adiw	r26, 0x2f	; 47
     8f4:	9c 93       	st	X, r25
     8f6:	8e 93       	st	-X, r24
     8f8:	9e 97       	sbiw	r26, 0x2e	; 46
    bugurt_set_stack_pointer( kernel.idle[current_vm].spointer );
     8fa:	80 91 26 01 	lds	r24, 0x0126
     8fe:	28 2f       	mov	r18, r24
     900:	30 e0       	ldi	r19, 0x00	; 0
     902:	80 e3       	ldi	r24, 0x30	; 48
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	bc 01       	movw	r22, r24
     908:	26 9f       	mul	r18, r22
     90a:	c0 01       	movw	r24, r0
     90c:	27 9f       	mul	r18, r23
     90e:	90 0d       	add	r25, r0
     910:	36 9f       	mul	r19, r22
     912:	90 0d       	add	r25, r0
     914:	11 24       	eor	r1, r1
     916:	fc 01       	movw	r30, r24
     918:	e1 5a       	subi	r30, 0xA1	; 161
     91a:	fc 4f       	sbci	r31, 0xFC	; 252
     91c:	80 81       	ld	r24, Z
     91e:	91 81       	ldd	r25, Z+1	; 0x01
     920:	0e 94 c5 00 	call	0x18a	; 0x18a <bugurt_set_stack_pointer>
    sei();
     924:	78 94       	sei
}
__attribute__ (( naked )) void syscall_isr(void)
{
    _bugurt_isr_prologue();

    _syscall_isr();
     926:	0e 94 21 04 	call	0x842	; 0x842 <_syscall_isr>
    bugurt_set_stack_pointer( kernel.idle[current_vm].spointer );
    sei();
}
__MACRO_FUNCTION__(_bugurt_isr_epilogue)
{
    cli();
     92a:	f8 94       	cli
    vm_state[current_vm].sp = kernel.sched[current_vm].current_proc->spointer;
     92c:	80 91 26 01 	lds	r24, 0x0126
     930:	48 2f       	mov	r20, r24
     932:	50 e0       	ldi	r21, 0x00	; 0
     934:	80 91 26 01 	lds	r24, 0x0126
     938:	28 2f       	mov	r18, r24
     93a:	30 e0       	ldi	r19, 0x00	; 0
     93c:	8b e2       	ldi	r24, 0x2B	; 43
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	bc 01       	movw	r22, r24
     942:	26 9f       	mul	r18, r22
     944:	c0 01       	movw	r24, r0
     946:	27 9f       	mul	r18, r23
     948:	90 0d       	add	r25, r0
     94a:	36 9f       	mul	r19, r22
     94c:	90 0d       	add	r25, r0
     94e:	11 24       	eor	r1, r1
     950:	fc 01       	movw	r30, r24
     952:	e5 52       	subi	r30, 0x25	; 37
     954:	fd 4f       	sbci	r31, 0xFD	; 253
     956:	01 90       	ld	r0, Z+
     958:	f0 81       	ld	r31, Z
     95a:	e0 2d       	mov	r30, r0
     95c:	26 a5       	ldd	r18, Z+46	; 0x2e
     95e:	37 a5       	ldd	r19, Z+47	; 0x2f
     960:	ca 01       	movw	r24, r20
     962:	88 0f       	add	r24, r24
     964:	99 1f       	adc	r25, r25
     966:	88 0f       	add	r24, r24
     968:	99 1f       	adc	r25, r25
     96a:	88 0f       	add	r24, r24
     96c:	99 1f       	adc	r25, r25
     96e:	84 0f       	add	r24, r20
     970:	95 1f       	adc	r25, r21
     972:	fc 01       	movw	r30, r24
     974:	e4 5d       	subi	r30, 0xD4	; 212
     976:	fe 4f       	sbci	r31, 0xFE	; 254
     978:	31 83       	std	Z+1, r19	; 0x01
     97a:	20 83       	st	Z, r18
    bugurt_set_stack_pointer( saved_vm_sp[current_vm] );
     97c:	80 91 26 01 	lds	r24, 0x0126
     980:	88 2f       	mov	r24, r24
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	88 0f       	add	r24, r24
     986:	99 1f       	adc	r25, r25
     988:	fc 01       	movw	r30, r24
     98a:	ec 5e       	subi	r30, 0xEC	; 236
     98c:	fe 4f       	sbci	r31, 0xFE	; 254
     98e:	80 81       	ld	r24, Z
     990:	91 81       	ldd	r25, Z+1	; 0x01
     992:	0e 94 c5 00 	call	0x18a	; 0x18a <bugurt_set_stack_pointer>
    __asm__ __volatile__("reti"::);
     996:	18 95       	reti

00000998 <syscall_vectors_init>:
    _bugurt_isr_epilogue();
}


void syscall_vectors_init(void)
{
     998:	df 93       	push	r29
     99a:	cf 93       	push	r28
     99c:	0f 92       	push	r0
     99e:	cd b7       	in	r28, 0x3d	; 61
     9a0:	de b7       	in	r29, 0x3e	; 62
    core_id_t i;
    for(i = 0; i < MAX_CORES; i++)
     9a2:	19 82       	std	Y+1, r1	; 0x01
     9a4:	25 c0       	rjmp	.+74     	; 0x9f0 <syscall_vectors_init+0x58>
    {
        vsmp_vinterrupt_init( ( vinterrupt_t * )syscall_vectors + i, syscall_isr );
     9a6:	89 81       	ldd	r24, Y+1	; 0x01
     9a8:	28 2f       	mov	r18, r24
     9aa:	30 e0       	ldi	r19, 0x00	; 0
     9ac:	c9 01       	movw	r24, r18
     9ae:	88 0f       	add	r24, r24
     9b0:	99 1f       	adc	r25, r25
     9b2:	82 0f       	add	r24, r18
     9b4:	93 1f       	adc	r25, r19
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	86 5e       	subi	r24, 0xE6	; 230
     9bc:	9e 4f       	sbci	r25, 0xFE	; 254
     9be:	22 e4       	ldi	r18, 0x42	; 66
     9c0:	34 e0       	ldi	r19, 0x04	; 4
     9c2:	b9 01       	movw	r22, r18
     9c4:	0e 94 9a 0a 	call	0x1534	; 0x1534 <vsmp_vinterrupt_init>
        syscall_num[i] = (syscall_t)0;
     9c8:	89 81       	ldd	r24, Y+1	; 0x01
     9ca:	88 2f       	mov	r24, r24
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	fc 01       	movw	r30, r24
     9d0:	e3 5c       	subi	r30, 0xC3	; 195
     9d2:	fe 4f       	sbci	r31, 0xFE	; 254
     9d4:	10 82       	st	Z, r1
        syscall_arg[i] = (void *)0;
     9d6:	89 81       	ldd	r24, Y+1	; 0x01
     9d8:	88 2f       	mov	r24, r24
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	88 0f       	add	r24, r24
     9de:	99 1f       	adc	r25, r25
     9e0:	fc 01       	movw	r30, r24
     9e2:	e7 5c       	subi	r30, 0xC7	; 199
     9e4:	fe 4f       	sbci	r31, 0xFE	; 254
     9e6:	11 82       	std	Z+1, r1	; 0x01
     9e8:	10 82       	st	Z, r1


void syscall_vectors_init(void)
{
    core_id_t i;
    for(i = 0; i < MAX_CORES; i++)
     9ea:	89 81       	ldd	r24, Y+1	; 0x01
     9ec:	8f 5f       	subi	r24, 0xFF	; 255
     9ee:	89 83       	std	Y+1, r24	; 0x01
     9f0:	89 81       	ldd	r24, Y+1	; 0x01
     9f2:	82 30       	cpi	r24, 0x02	; 2
     9f4:	c0 f2       	brcs	.-80     	; 0x9a6 <syscall_vectors_init+0xe>
    {
        vsmp_vinterrupt_init( ( vinterrupt_t * )syscall_vectors + i, syscall_isr );
        syscall_num[i] = (syscall_t)0;
        syscall_arg[i] = (void *)0;
    }
}
     9f6:	0f 90       	pop	r0
     9f8:	cf 91       	pop	r28
     9fa:	df 91       	pop	r29
     9fc:	08 95       	ret

000009fe <syscall_bugurt>:

void syscall_bugurt( unsigned char num, void * arg )
{
     9fe:	df 93       	push	r29
     a00:	cf 93       	push	r28
     a02:	00 d0       	rcall	.+0      	; 0xa04 <syscall_bugurt+0x6>
     a04:	00 d0       	rcall	.+0      	; 0xa06 <syscall_bugurt+0x8>
     a06:	00 d0       	rcall	.+0      	; 0xa08 <syscall_bugurt+0xa>
     a08:	cd b7       	in	r28, 0x3d	; 61
     a0a:	de b7       	in	r29, 0x3e	; 62
     a0c:	8c 83       	std	Y+4, r24	; 0x04
     a0e:	7e 83       	std	Y+6, r23	; 0x06
     a10:	6d 83       	std	Y+5, r22	; 0x05
    core_id_t core;
    item_t * vector;

    disable_interrupts();
     a12:	0e 94 b5 0a 	call	0x156a	; 0x156a <disable_interrupts>

    cli();
     a16:	f8 94       	cli
    core = current_vm;
     a18:	80 91 26 01 	lds	r24, 0x0126
     a1c:	8b 83       	std	Y+3, r24	; 0x03
    sei();
     a1e:	78 94       	sei

    syscall_num[core] = (syscall_t)num;
     a20:	8b 81       	ldd	r24, Y+3	; 0x03
     a22:	88 2f       	mov	r24, r24
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	fc 01       	movw	r30, r24
     a28:	e3 5c       	subi	r30, 0xC3	; 195
     a2a:	fe 4f       	sbci	r31, 0xFE	; 254
     a2c:	8c 81       	ldd	r24, Y+4	; 0x04
     a2e:	80 83       	st	Z, r24
    syscall_arg[core] = (void *)arg;
     a30:	8b 81       	ldd	r24, Y+3	; 0x03
     a32:	88 2f       	mov	r24, r24
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	88 0f       	add	r24, r24
     a38:	99 1f       	adc	r25, r25
     a3a:	fc 01       	movw	r30, r24
     a3c:	e7 5c       	subi	r30, 0xC7	; 199
     a3e:	fe 4f       	sbci	r31, 0xFE	; 254
     a40:	8d 81       	ldd	r24, Y+5	; 0x05
     a42:	9e 81       	ldd	r25, Y+6	; 0x06
     a44:	91 83       	std	Z+1, r25	; 0x01
     a46:	80 83       	st	Z, r24
    vector = (item_t *)( &syscall_vectors[core] );
     a48:	4a e1       	ldi	r20, 0x1A	; 26
     a4a:	51 e0       	ldi	r21, 0x01	; 1
     a4c:	8b 81       	ldd	r24, Y+3	; 0x03
     a4e:	28 2f       	mov	r18, r24
     a50:	30 e0       	ldi	r19, 0x00	; 0
     a52:	c9 01       	movw	r24, r18
     a54:	88 0f       	add	r24, r24
     a56:	99 1f       	adc	r25, r25
     a58:	82 0f       	add	r24, r18
     a5a:	93 1f       	adc	r25, r19
     a5c:	88 0f       	add	r24, r24
     a5e:	99 1f       	adc	r25, r25
     a60:	84 0f       	add	r24, r20
     a62:	95 1f       	adc	r25, r21
     a64:	9a 83       	std	Y+2, r25	; 0x02
     a66:	89 83       	std	Y+1, r24	; 0x01

    cli();
     a68:	f8 94       	cli
    vm_state[current_vm].int_enabled = (bool_t)1; // Virtual interrupts MUST be eanabled !!!
     a6a:	80 91 26 01 	lds	r24, 0x0126
     a6e:	28 2f       	mov	r18, r24
     a70:	30 e0       	ldi	r19, 0x00	; 0
     a72:	c9 01       	movw	r24, r18
     a74:	88 0f       	add	r24, r24
     a76:	99 1f       	adc	r25, r25
     a78:	88 0f       	add	r24, r24
     a7a:	99 1f       	adc	r25, r25
     a7c:	88 0f       	add	r24, r24
     a7e:	99 1f       	adc	r25, r25
     a80:	82 0f       	add	r24, r18
     a82:	93 1f       	adc	r25, r19
     a84:	fc 01       	movw	r30, r24
     a86:	e7 5d       	subi	r30, 0xD7	; 215
     a88:	fe 4f       	sbci	r31, 0xFE	; 254
     a8a:	81 e0       	ldi	r24, 0x01	; 1
     a8c:	80 83       	st	Z, r24
    // System call is not an ordinary interrupt!!!
    // It MUST be serviced FIRST!!!
    if( vm_state[current_vm].int_fifo )
     a8e:	80 91 26 01 	lds	r24, 0x0126
     a92:	28 2f       	mov	r18, r24
     a94:	30 e0       	ldi	r19, 0x00	; 0
     a96:	c9 01       	movw	r24, r18
     a98:	88 0f       	add	r24, r24
     a9a:	99 1f       	adc	r25, r25
     a9c:	88 0f       	add	r24, r24
     a9e:	99 1f       	adc	r25, r25
     aa0:	88 0f       	add	r24, r24
     aa2:	99 1f       	adc	r25, r25
     aa4:	82 0f       	add	r24, r18
     aa6:	93 1f       	adc	r25, r19
     aa8:	fc 01       	movw	r30, r24
     aaa:	e9 5d       	subi	r30, 0xD9	; 217
     aac:	fe 4f       	sbci	r31, 0xFE	; 254
     aae:	80 81       	ld	r24, Z
     ab0:	91 81       	ldd	r25, Z+1	; 0x01
     ab2:	00 97       	sbiw	r24, 0x00	; 0
     ab4:	d1 f0       	breq	.+52     	; 0xaea <syscall_bugurt+0xec>
    {
        item_insert( (item_t *)vector, ((item_t *)vm_state[current_vm].int_fifo)->next );
     ab6:	80 91 26 01 	lds	r24, 0x0126
     aba:	28 2f       	mov	r18, r24
     abc:	30 e0       	ldi	r19, 0x00	; 0
     abe:	c9 01       	movw	r24, r18
     ac0:	88 0f       	add	r24, r24
     ac2:	99 1f       	adc	r25, r25
     ac4:	88 0f       	add	r24, r24
     ac6:	99 1f       	adc	r25, r25
     ac8:	88 0f       	add	r24, r24
     aca:	99 1f       	adc	r25, r25
     acc:	82 0f       	add	r24, r18
     ace:	93 1f       	adc	r25, r19
     ad0:	fc 01       	movw	r30, r24
     ad2:	e9 5d       	subi	r30, 0xD9	; 217
     ad4:	fe 4f       	sbci	r31, 0xFE	; 254
     ad6:	01 90       	ld	r0, Z+
     ad8:	f0 81       	ld	r31, Z
     ada:	e0 2d       	mov	r30, r0
     adc:	20 81       	ld	r18, Z
     ade:	31 81       	ldd	r19, Z+1	; 0x01
     ae0:	89 81       	ldd	r24, Y+1	; 0x01
     ae2:	9a 81       	ldd	r25, Y+2	; 0x02
     ae4:	b9 01       	movw	r22, r18
     ae6:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <item_insert>
    }
    vm_state[current_vm].int_fifo = (item_t *)vector;
     aea:	80 91 26 01 	lds	r24, 0x0126
     aee:	28 2f       	mov	r18, r24
     af0:	30 e0       	ldi	r19, 0x00	; 0
     af2:	c9 01       	movw	r24, r18
     af4:	88 0f       	add	r24, r24
     af6:	99 1f       	adc	r25, r25
     af8:	88 0f       	add	r24, r24
     afa:	99 1f       	adc	r25, r25
     afc:	88 0f       	add	r24, r24
     afe:	99 1f       	adc	r25, r25
     b00:	82 0f       	add	r24, r18
     b02:	93 1f       	adc	r25, r19
     b04:	fc 01       	movw	r30, r24
     b06:	e9 5d       	subi	r30, 0xD9	; 217
     b08:	fe 4f       	sbci	r31, 0xFE	; 254
     b0a:	89 81       	ldd	r24, Y+1	; 0x01
     b0c:	9a 81       	ldd	r25, Y+2	; 0x02
     b0e:	91 83       	std	Z+1, r25	; 0x01
     b10:	80 83       	st	Z, r24
    _vsmp_vinterrupt();
     b12:	0e 94 32 09 	call	0x1264	; 0x1264 <_vsmp_vinterrupt>
}
     b16:	26 96       	adiw	r28, 0x06	; 6
     b18:	0f b6       	in	r0, 0x3f	; 63
     b1a:	f8 94       	cli
     b1c:	de bf       	out	0x3e, r29	; 62
     b1e:	0f be       	out	0x3f, r0	; 63
     b20:	cd bf       	out	0x3d, r28	; 61
     b22:	cf 91       	pop	r28
     b24:	df 91       	pop	r29
     b26:	08 95       	ret

00000b28 <init_bugurt>:
/***************************************************************************************************************/
// Функции общего пользования

void init_bugurt(void)
{
     b28:	df 93       	push	r29
     b2a:	cf 93       	push	r28
     b2c:	0f 92       	push	r0
     b2e:	cd b7       	in	r28, 0x3d	; 61
     b30:	de b7       	in	r29, 0x3e	; 62
    core_id_t i;
    disable_interrupts();
     b32:	0e 94 b5 0a 	call	0x156a	; 0x156a <disable_interrupts>
    resched_vectors_init();
     b36:	0e 94 59 02 	call	0x4b2	; 0x4b2 <resched_vectors_init>
    systimer_vectors_init();
     b3a:	0e 94 b4 03 	call	0x768	; 0x768 <systimer_vectors_init>
    syscall_vectors_init();
     b3e:	0e 94 cc 04 	call	0x998	; 0x998 <syscall_vectors_init>
    kernel_init();
     b42:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <kernel_init>
    kernel.sched[current_core()].nested_crit_sec = (count_t)1;
     b46:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <current_core>
     b4a:	28 2f       	mov	r18, r24
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	8b e2       	ldi	r24, 0x2B	; 43
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	ac 01       	movw	r20, r24
     b54:	24 9f       	mul	r18, r20
     b56:	c0 01       	movw	r24, r0
     b58:	25 9f       	mul	r18, r21
     b5a:	90 0d       	add	r25, r0
     b5c:	34 9f       	mul	r19, r20
     b5e:	90 0d       	add	r25, r0
     b60:	11 24       	eor	r1, r1
     b62:	fc 01       	movw	r30, r24
     b64:	ed 5f       	subi	r30, 0xFD	; 253
     b66:	fc 4f       	sbci	r31, 0xFC	; 252
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	91 83       	std	Z+1, r25	; 0x01
     b6e:	80 83       	st	Z, r24
    for(i = 1; i < MAX_CORES; i++)
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	89 83       	std	Y+1, r24	; 0x01
     b74:	17 c0       	rjmp	.+46     	; 0xba4 <init_bugurt+0x7c>
    {
        kernel.idle[i].pmain = vsmp_idle_main;
     b76:	89 81       	ldd	r24, Y+1	; 0x01
     b78:	28 2f       	mov	r18, r24
     b7a:	30 e0       	ldi	r19, 0x00	; 0
     b7c:	80 e3       	ldi	r24, 0x30	; 48
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	ac 01       	movw	r20, r24
     b82:	24 9f       	mul	r18, r20
     b84:	c0 01       	movw	r24, r0
     b86:	25 9f       	mul	r18, r21
     b88:	90 0d       	add	r25, r0
     b8a:	34 9f       	mul	r19, r20
     b8c:	90 0d       	add	r25, r0
     b8e:	11 24       	eor	r1, r1
     b90:	fc 01       	movw	r30, r24
     b92:	eb 5a       	subi	r30, 0xAB	; 171
     b94:	fc 4f       	sbci	r31, 0xFC	; 252
     b96:	8e eb       	ldi	r24, 0xBE	; 190
     b98:	96 e0       	ldi	r25, 0x06	; 6
     b9a:	91 83       	std	Z+1, r25	; 0x01
     b9c:	80 83       	st	Z, r24
    resched_vectors_init();
    systimer_vectors_init();
    syscall_vectors_init();
    kernel_init();
    kernel.sched[current_core()].nested_crit_sec = (count_t)1;
    for(i = 1; i < MAX_CORES; i++)
     b9e:	89 81       	ldd	r24, Y+1	; 0x01
     ba0:	8f 5f       	subi	r24, 0xFF	; 255
     ba2:	89 83       	std	Y+1, r24	; 0x01
     ba4:	89 81       	ldd	r24, Y+1	; 0x01
     ba6:	82 30       	cpi	r24, 0x02	; 2
     ba8:	30 f3       	brcs	.-52     	; 0xb76 <init_bugurt+0x4e>
    {
        kernel.idle[i].pmain = vsmp_idle_main;
    }
}
     baa:	0f 90       	pop	r0
     bac:	cf 91       	pop	r28
     bae:	df 91       	pop	r29
     bb0:	08 95       	ret

00000bb2 <start_bugurt>:
void start_bugurt(void)
{
     bb2:	df 93       	push	r29
     bb4:	cf 93       	push	r28
     bb6:	cd b7       	in	r28, 0x3d	; 61
     bb8:	de b7       	in	r29, 0x3e	; 62
    kernel.sched[current_core()].nested_crit_sec = (count_t)0;
     bba:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <current_core>
     bbe:	28 2f       	mov	r18, r24
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	8b e2       	ldi	r24, 0x2B	; 43
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	ac 01       	movw	r20, r24
     bc8:	24 9f       	mul	r18, r20
     bca:	c0 01       	movw	r24, r0
     bcc:	25 9f       	mul	r18, r21
     bce:	90 0d       	add	r25, r0
     bd0:	34 9f       	mul	r19, r20
     bd2:	90 0d       	add	r25, r0
     bd4:	11 24       	eor	r1, r1
     bd6:	fc 01       	movw	r30, r24
     bd8:	ed 5f       	subi	r30, 0xFD	; 253
     bda:	fc 4f       	sbci	r31, 0xFC	; 252
     bdc:	11 82       	std	Z+1, r1	; 0x01
     bde:	10 82       	st	Z, r1
    enable_interrupts();
     be0:	0e 94 cf 0a 	call	0x159e	; 0x159e <enable_interrupts>
    cli();
     be4:	f8 94       	cli
    vsmp_systimer_hook = vsmp_systimer_hook_bugurt;
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	94 e0       	ldi	r25, 0x04	; 4
     bea:	90 93 da 02 	sts	0x02DA, r25
     bee:	80 93 d9 02 	sts	0x02D9, r24
    sei();
     bf2:	78 94       	sei
    idle_main( (void *)0 );
     bf4:	80 e0       	ldi	r24, 0x00	; 0
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <idle_main>
}
     bfc:	cf 91       	pop	r28
     bfe:	df 91       	pop	r29
     c00:	08 95       	ret

00000c02 <vsmp_vm_init>:
void (*vsmp_systimer_hook)(void);



void vsmp_vm_init( vsmp_vm_t * vm, stack_t * sp, stack_t * int_sp )
{
     c02:	df 93       	push	r29
     c04:	cf 93       	push	r28
     c06:	00 d0       	rcall	.+0      	; 0xc08 <vsmp_vm_init+0x6>
     c08:	00 d0       	rcall	.+0      	; 0xc0a <vsmp_vm_init+0x8>
     c0a:	00 d0       	rcall	.+0      	; 0xc0c <vsmp_vm_init+0xa>
     c0c:	cd b7       	in	r28, 0x3d	; 61
     c0e:	de b7       	in	r29, 0x3e	; 62
     c10:	9a 83       	std	Y+2, r25	; 0x02
     c12:	89 83       	std	Y+1, r24	; 0x01
     c14:	7c 83       	std	Y+4, r23	; 0x04
     c16:	6b 83       	std	Y+3, r22	; 0x03
     c18:	5e 83       	std	Y+6, r21	; 0x06
     c1a:	4d 83       	std	Y+5, r20	; 0x05
    vm->int_fifo = (item_t *)0; // Нет прерываний;
     c1c:	e9 81       	ldd	r30, Y+1	; 0x01
     c1e:	fa 81       	ldd	r31, Y+2	; 0x02
     c20:	11 82       	std	Z+1, r1	; 0x01
     c22:	10 82       	st	Z, r1
    vm->int_enabled = 1;// прерывания разрешены
     c24:	e9 81       	ldd	r30, Y+1	; 0x01
     c26:	fa 81       	ldd	r31, Y+2	; 0x02
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	82 83       	std	Z+2, r24	; 0x02
    vm->sp = (stack_t *)sp;
     c2c:	e9 81       	ldd	r30, Y+1	; 0x01
     c2e:	fa 81       	ldd	r31, Y+2	; 0x02
     c30:	8b 81       	ldd	r24, Y+3	; 0x03
     c32:	9c 81       	ldd	r25, Y+4	; 0x04
     c34:	96 83       	std	Z+6, r25	; 0x06
     c36:	85 83       	std	Z+5, r24	; 0x05
    vm->int_sp = (stack_t *)int_sp;
     c38:	e9 81       	ldd	r30, Y+1	; 0x01
     c3a:	fa 81       	ldd	r31, Y+2	; 0x02
     c3c:	8d 81       	ldd	r24, Y+5	; 0x05
     c3e:	9e 81       	ldd	r25, Y+6	; 0x06
     c40:	90 87       	std	Z+8, r25	; 0x08
     c42:	87 83       	std	Z+7, r24	; 0x07
    vm->int_nest_count = (count_t)0;
     c44:	e9 81       	ldd	r30, Y+1	; 0x01
     c46:	fa 81       	ldd	r31, Y+2	; 0x02
     c48:	14 82       	std	Z+4, r1	; 0x04
     c4a:	13 82       	std	Z+3, r1	; 0x03
}
     c4c:	26 96       	adiw	r28, 0x06	; 6
     c4e:	0f b6       	in	r0, 0x3f	; 63
     c50:	f8 94       	cli
     c52:	de bf       	out	0x3e, r29	; 62
     c54:	0f be       	out	0x3f, r0	; 63
     c56:	cd bf       	out	0x3d, r28	; 61
     c58:	cf 91       	pop	r28
     c5a:	df 91       	pop	r29
     c5c:	08 95       	ret

00000c5e <vsmp_init>:
void vsmp_init( void )
{
     c5e:	df 93       	push	r29
     c60:	cf 93       	push	r28
     c62:	00 d0       	rcall	.+0      	; 0xc64 <vsmp_init+0x6>
     c64:	00 d0       	rcall	.+0      	; 0xc66 <vsmp_init+0x8>
     c66:	cd b7       	in	r28, 0x3d	; 61
     c68:	de b7       	in	r29, 0x3e	; 62
    cli();
     c6a:	f8 94       	cli
    vsmp_vm_init( &vm_state[0], (stack_t *)0 , &vm_int_stack[0][VM_INT_STACK_SIZE-1] );
     c6c:	89 ed       	ldi	r24, 0xD9	; 217
     c6e:	91 e0       	ldi	r25, 0x01	; 1
     c70:	9c 01       	movw	r18, r24
     c72:	21 58       	subi	r18, 0x81	; 129
     c74:	3f 4f       	sbci	r19, 0xFF	; 255
     c76:	87 e2       	ldi	r24, 0x27	; 39
     c78:	91 e0       	ldi	r25, 0x01	; 1
     c7a:	60 e0       	ldi	r22, 0x00	; 0
     c7c:	70 e0       	ldi	r23, 0x00	; 0
     c7e:	a9 01       	movw	r20, r18
     c80:	0e 94 01 06 	call	0xc02	; 0xc02 <vsmp_vm_init>
    for( current_vm = 1; current_vm < MAX_CORES; current_vm++ )
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	80 93 26 01 	sts	0x0126, r24
     c8a:	62 c0       	rjmp	.+196    	; 0xd50 <vsmp_init+0xf2>
    {
        stack_t * vm_sp;
        unsigned short i;
        for(i = 0; i < VM_STACK_SIZE; i++ )vm_stack[current_vm - 1][i] = 0x55;
     c8c:	1a 82       	std	Y+2, r1	; 0x02
     c8e:	19 82       	std	Y+1, r1	; 0x01
     c90:	18 c0       	rjmp	.+48     	; 0xcc2 <vsmp_init+0x64>
     c92:	80 91 26 01 	lds	r24, 0x0126
     c96:	88 2f       	mov	r24, r24
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	01 97       	sbiw	r24, 0x01	; 1
     c9c:	29 81       	ldd	r18, Y+1	; 0x01
     c9e:	3a 81       	ldd	r19, Y+2	; 0x02
     ca0:	96 95       	lsr	r25
     ca2:	98 2f       	mov	r25, r24
     ca4:	88 27       	eor	r24, r24
     ca6:	97 95       	ror	r25
     ca8:	87 95       	ror	r24
     caa:	82 0f       	add	r24, r18
     cac:	93 1f       	adc	r25, r19
     cae:	fc 01       	movw	r30, r24
     cb0:	e7 5a       	subi	r30, 0xA7	; 167
     cb2:	fe 4f       	sbci	r31, 0xFE	; 254
     cb4:	85 e5       	ldi	r24, 0x55	; 85
     cb6:	80 83       	st	Z, r24
     cb8:	89 81       	ldd	r24, Y+1	; 0x01
     cba:	9a 81       	ldd	r25, Y+2	; 0x02
     cbc:	01 96       	adiw	r24, 0x01	; 1
     cbe:	9a 83       	std	Y+2, r25	; 0x02
     cc0:	89 83       	std	Y+1, r24	; 0x01
     cc2:	89 81       	ldd	r24, Y+1	; 0x01
     cc4:	9a 81       	ldd	r25, Y+2	; 0x02
     cc6:	80 38       	cpi	r24, 0x80	; 128
     cc8:	91 05       	cpc	r25, r1
     cca:	18 f3       	brcs	.-58     	; 0xc92 <vsmp_init+0x34>
        vm_sp = proc_stack_init( &vm_stack[current_vm - 1][VM_STACK_SIZE - 1], (code_t)vsmp_idle_main, (void *)0 );
     ccc:	80 91 26 01 	lds	r24, 0x0126
     cd0:	88 2f       	mov	r24, r24
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	01 97       	sbiw	r24, 0x01	; 1
     cd6:	96 95       	lsr	r25
     cd8:	98 2f       	mov	r25, r24
     cda:	88 27       	eor	r24, r24
     cdc:	97 95       	ror	r25
     cde:	87 95       	ror	r24
     ce0:	81 58       	subi	r24, 0x81	; 129
     ce2:	9f 4f       	sbci	r25, 0xFF	; 255
     ce4:	87 5a       	subi	r24, 0xA7	; 167
     ce6:	9e 4f       	sbci	r25, 0xFE	; 254
     ce8:	2e eb       	ldi	r18, 0xBE	; 190
     cea:	36 e0       	ldi	r19, 0x06	; 6
     cec:	b9 01       	movw	r22, r18
     cee:	40 e0       	ldi	r20, 0x00	; 0
     cf0:	50 e0       	ldi	r21, 0x00	; 0
     cf2:	0e 94 01 0b 	call	0x1602	; 0x1602 <proc_stack_init>
     cf6:	9c 83       	std	Y+4, r25	; 0x04
     cf8:	8b 83       	std	Y+3, r24	; 0x03
        vsmp_vm_init( &vm_state[current_vm], (stack_t *)vm_sp, &vm_int_stack[current_vm][VM_INT_STACK_SIZE-1] );
     cfa:	80 91 26 01 	lds	r24, 0x0126
     cfe:	28 2f       	mov	r18, r24
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	c9 01       	movw	r24, r18
     d04:	88 0f       	add	r24, r24
     d06:	99 1f       	adc	r25, r25
     d08:	88 0f       	add	r24, r24
     d0a:	99 1f       	adc	r25, r25
     d0c:	88 0f       	add	r24, r24
     d0e:	99 1f       	adc	r25, r25
     d10:	82 0f       	add	r24, r18
     d12:	93 1f       	adc	r25, r19
     d14:	bc 01       	movw	r22, r24
     d16:	69 5d       	subi	r22, 0xD9	; 217
     d18:	7e 4f       	sbci	r23, 0xFE	; 254
     d1a:	29 ed       	ldi	r18, 0xD9	; 217
     d1c:	31 e0       	ldi	r19, 0x01	; 1
     d1e:	80 91 26 01 	lds	r24, 0x0126
     d22:	88 2f       	mov	r24, r24
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	96 95       	lsr	r25
     d28:	98 2f       	mov	r25, r24
     d2a:	88 27       	eor	r24, r24
     d2c:	97 95       	ror	r25
     d2e:	87 95       	ror	r24
     d30:	81 58       	subi	r24, 0x81	; 129
     d32:	9f 4f       	sbci	r25, 0xFF	; 255
     d34:	a9 01       	movw	r20, r18
     d36:	48 0f       	add	r20, r24
     d38:	59 1f       	adc	r21, r25
     d3a:	2b 81       	ldd	r18, Y+3	; 0x03
     d3c:	3c 81       	ldd	r19, Y+4	; 0x04
     d3e:	cb 01       	movw	r24, r22
     d40:	b9 01       	movw	r22, r18
     d42:	0e 94 01 06 	call	0xc02	; 0xc02 <vsmp_vm_init>
}
void vsmp_init( void )
{
    cli();
    vsmp_vm_init( &vm_state[0], (stack_t *)0 , &vm_int_stack[0][VM_INT_STACK_SIZE-1] );
    for( current_vm = 1; current_vm < MAX_CORES; current_vm++ )
     d46:	80 91 26 01 	lds	r24, 0x0126
     d4a:	8f 5f       	subi	r24, 0xFF	; 255
     d4c:	80 93 26 01 	sts	0x0126, r24
     d50:	80 91 26 01 	lds	r24, 0x0126
     d54:	82 30       	cpi	r24, 0x02	; 2
     d56:	08 f4       	brcc	.+2      	; 0xd5a <vsmp_init+0xfc>
     d58:	99 cf       	rjmp	.-206    	; 0xc8c <vsmp_init+0x2e>
        unsigned short i;
        for(i = 0; i < VM_STACK_SIZE; i++ )vm_stack[current_vm - 1][i] = 0x55;
        vm_sp = proc_stack_init( &vm_stack[current_vm - 1][VM_STACK_SIZE - 1], (code_t)vsmp_idle_main, (void *)0 );
        vsmp_vm_init( &vm_state[current_vm], (stack_t *)vm_sp, &vm_int_stack[current_vm][VM_INT_STACK_SIZE-1] );
    }
    current_vm = 0;
     d5a:	10 92 26 01 	sts	0x0126, r1
}
     d5e:	0f 90       	pop	r0
     d60:	0f 90       	pop	r0
     d62:	0f 90       	pop	r0
     d64:	0f 90       	pop	r0
     d66:	cf 91       	pop	r28
     d68:	df 91       	pop	r29
     d6a:	08 95       	ret

00000d6c <vsmp_run>:

void vsmp_run( void )
{
     d6c:	df 93       	push	r29
     d6e:	cf 93       	push	r28
     d70:	cd b7       	in	r28, 0x3d	; 61
     d72:	de b7       	in	r29, 0x3e	; 62
    sei();
     d74:	78 94       	sei
}
     d76:	cf 91       	pop	r28
     d78:	df 91       	pop	r29
     d7a:	08 95       	ret

00000d7c <vsmp_idle_main>:
void vsmp_idle_main( void * arg )
{
     d7c:	df 93       	push	r29
     d7e:	cf 93       	push	r28
     d80:	00 d0       	rcall	.+0      	; 0xd82 <vsmp_idle_main+0x6>
     d82:	cd b7       	in	r28, 0x3d	; 61
     d84:	de b7       	in	r29, 0x3e	; 62
     d86:	9a 83       	std	Y+2, r25	; 0x02
     d88:	89 83       	std	Y+1, r24	; 0x01
     d8a:	ff cf       	rjmp	.-2      	; 0xd8a <vsmp_idle_main+0xe>

00000d8c <vsmp_do_interrupt>:
    while(1);
}

bool_t vsmp_do_interrupt(void)
{
     d8c:	df 93       	push	r29
     d8e:	cf 93       	push	r28
     d90:	0f 92       	push	r0
     d92:	cd b7       	in	r28, 0x3d	; 61
     d94:	de b7       	in	r29, 0x3e	; 62
    // if current vm is interruptible and there are some interrupts in fifo,
    if( (vm_state[current_vm].int_enabled) && (vm_state[current_vm].int_fifo) )
     d96:	80 91 26 01 	lds	r24, 0x0126
     d9a:	28 2f       	mov	r18, r24
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	c9 01       	movw	r24, r18
     da0:	88 0f       	add	r24, r24
     da2:	99 1f       	adc	r25, r25
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	88 0f       	add	r24, r24
     daa:	99 1f       	adc	r25, r25
     dac:	82 0f       	add	r24, r18
     dae:	93 1f       	adc	r25, r19
     db0:	fc 01       	movw	r30, r24
     db2:	e7 5d       	subi	r30, 0xD7	; 215
     db4:	fe 4f       	sbci	r31, 0xFE	; 254
     db6:	80 81       	ld	r24, Z
     db8:	88 23       	and	r24, r24
     dba:	09 f4       	brne	.+2      	; 0xdbe <vsmp_do_interrupt+0x32>
     dbc:	79 c0       	rjmp	.+242    	; 0xeb0 <vsmp_do_interrupt+0x124>
     dbe:	80 91 26 01 	lds	r24, 0x0126
     dc2:	28 2f       	mov	r18, r24
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	c9 01       	movw	r24, r18
     dc8:	88 0f       	add	r24, r24
     dca:	99 1f       	adc	r25, r25
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	88 0f       	add	r24, r24
     dd2:	99 1f       	adc	r25, r25
     dd4:	82 0f       	add	r24, r18
     dd6:	93 1f       	adc	r25, r19
     dd8:	fc 01       	movw	r30, r24
     dda:	e9 5d       	subi	r30, 0xD9	; 217
     ddc:	fe 4f       	sbci	r31, 0xFE	; 254
     dde:	80 81       	ld	r24, Z
     de0:	91 81       	ldd	r25, Z+1	; 0x01
     de2:	00 97       	sbiw	r24, 0x00	; 0
     de4:	09 f4       	brne	.+2      	; 0xde8 <vsmp_do_interrupt+0x5c>
     de6:	64 c0       	rjmp	.+200    	; 0xeb0 <vsmp_do_interrupt+0x124>
    {
        // cut head interrupt,
        vm_buf = (void *)vm_state[current_vm].int_fifo;
     de8:	80 91 26 01 	lds	r24, 0x0126
     dec:	28 2f       	mov	r18, r24
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	c9 01       	movw	r24, r18
     df2:	88 0f       	add	r24, r24
     df4:	99 1f       	adc	r25, r25
     df6:	88 0f       	add	r24, r24
     df8:	99 1f       	adc	r25, r25
     dfa:	88 0f       	add	r24, r24
     dfc:	99 1f       	adc	r25, r25
     dfe:	82 0f       	add	r24, r18
     e00:	93 1f       	adc	r25, r19
     e02:	fc 01       	movw	r30, r24
     e04:	e9 5d       	subi	r30, 0xD9	; 217
     e06:	fe 4f       	sbci	r31, 0xFE	; 254
     e08:	80 81       	ld	r24, Z
     e0a:	91 81       	ldd	r25, Z+1	; 0x01
     e0c:	90 93 58 01 	sts	0x0158, r25
     e10:	80 93 57 01 	sts	0x0157, r24
        if( vm_buf == (void *)((item_t *)vm_buf)->next )
     e14:	80 91 57 01 	lds	r24, 0x0157
     e18:	90 91 58 01 	lds	r25, 0x0158
     e1c:	fc 01       	movw	r30, r24
     e1e:	20 81       	ld	r18, Z
     e20:	31 81       	ldd	r19, Z+1	; 0x01
     e22:	80 91 57 01 	lds	r24, 0x0157
     e26:	90 91 58 01 	lds	r25, 0x0158
     e2a:	28 17       	cp	r18, r24
     e2c:	39 07       	cpc	r19, r25
     e2e:	99 f4       	brne	.+38     	; 0xe56 <vsmp_do_interrupt+0xca>
        {
            /* only one interrupt in fifo */
            vm_state[current_vm].int_fifo = (item_t *)0;
     e30:	80 91 26 01 	lds	r24, 0x0126
     e34:	28 2f       	mov	r18, r24
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	c9 01       	movw	r24, r18
     e3a:	88 0f       	add	r24, r24
     e3c:	99 1f       	adc	r25, r25
     e3e:	88 0f       	add	r24, r24
     e40:	99 1f       	adc	r25, r25
     e42:	88 0f       	add	r24, r24
     e44:	99 1f       	adc	r25, r25
     e46:	82 0f       	add	r24, r18
     e48:	93 1f       	adc	r25, r19
     e4a:	fc 01       	movw	r30, r24
     e4c:	e9 5d       	subi	r30, 0xD9	; 217
     e4e:	fe 4f       	sbci	r31, 0xFE	; 254
     e50:	11 82       	std	Z+1, r1	; 0x01
     e52:	10 82       	st	Z, r1
     e54:	1f c0       	rjmp	.+62     	; 0xe94 <vsmp_do_interrupt+0x108>
        }
        else
        {
            /* many interrupts in fifo */
            vm_state[current_vm].int_fifo = (void *)((item_t *)vm_buf)->next;
     e56:	80 91 26 01 	lds	r24, 0x0126
     e5a:	28 2f       	mov	r18, r24
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	80 91 57 01 	lds	r24, 0x0157
     e62:	90 91 58 01 	lds	r25, 0x0158
     e66:	fc 01       	movw	r30, r24
     e68:	40 81       	ld	r20, Z
     e6a:	51 81       	ldd	r21, Z+1	; 0x01
     e6c:	c9 01       	movw	r24, r18
     e6e:	88 0f       	add	r24, r24
     e70:	99 1f       	adc	r25, r25
     e72:	88 0f       	add	r24, r24
     e74:	99 1f       	adc	r25, r25
     e76:	88 0f       	add	r24, r24
     e78:	99 1f       	adc	r25, r25
     e7a:	82 0f       	add	r24, r18
     e7c:	93 1f       	adc	r25, r19
     e7e:	fc 01       	movw	r30, r24
     e80:	e9 5d       	subi	r30, 0xD9	; 217
     e82:	fe 4f       	sbci	r31, 0xFE	; 254
     e84:	51 83       	std	Z+1, r21	; 0x01
     e86:	40 83       	st	Z, r20
            item_cut( (item_t *)vm_buf );
     e88:	80 91 57 01 	lds	r24, 0x0157
     e8c:	90 91 58 01 	lds	r25, 0x0158
     e90:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <item_cut>
        }
        // write its isr pointer to vm_buf,
        vm_buf = (void *)(((vinterrupt_t *)vm_buf)->isr);
     e94:	80 91 57 01 	lds	r24, 0x0157
     e98:	90 91 58 01 	lds	r25, 0x0158
     e9c:	fc 01       	movw	r30, r24
     e9e:	84 81       	ldd	r24, Z+4	; 0x04
     ea0:	95 81       	ldd	r25, Z+5	; 0x05
     ea2:	90 93 58 01 	sts	0x0158, r25
     ea6:	80 93 57 01 	sts	0x0157, r24
        // and return 1;
        return (bool_t)1;
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	89 83       	std	Y+1, r24	; 0x01
     eae:	01 c0       	rjmp	.+2      	; 0xeb2 <vsmp_do_interrupt+0x126>
    }
    // else return 0.
    return (bool_t)0;
     eb0:	19 82       	std	Y+1, r1	; 0x01
     eb2:	89 81       	ldd	r24, Y+1	; 0x01
}
     eb4:	0f 90       	pop	r0
     eb6:	cf 91       	pop	r28
     eb8:	df 91       	pop	r29
     eba:	08 95       	ret

00000ebc <_vinterrupt_wrapper>:
                       Virtual interrupts wrapper functions.
    Local variable is used to call virtual ISR, so wrapper must have two parts.
*/
// Nested part, uses local variables, so compiler generated prologue and epilogue are needed.
static void _vinterrupt_wrapper(void)
{
     ebc:	df 93       	push	r29
     ebe:	cf 93       	push	r28
     ec0:	00 d0       	rcall	.+0      	; 0xec2 <_vinterrupt_wrapper+0x6>
     ec2:	cd b7       	in	r28, 0x3d	; 61
     ec4:	de b7       	in	r29, 0x3e	; 62
    void (*isr)(void);
    vm_state[current_vm].int_enabled = (bool_t)0; // Virtual interrupt nesting is not alowed by default.
     ec6:	80 91 26 01 	lds	r24, 0x0126
     eca:	28 2f       	mov	r18, r24
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	c9 01       	movw	r24, r18
     ed0:	88 0f       	add	r24, r24
     ed2:	99 1f       	adc	r25, r25
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	88 0f       	add	r24, r24
     eda:	99 1f       	adc	r25, r25
     edc:	82 0f       	add	r24, r18
     ede:	93 1f       	adc	r25, r19
     ee0:	fc 01       	movw	r30, r24
     ee2:	e7 5d       	subi	r30, 0xD7	; 215
     ee4:	fe 4f       	sbci	r31, 0xFE	; 254
     ee6:	10 82       	st	Z, r1
    isr = (void (*)(void))vm_buf;
     ee8:	80 91 57 01 	lds	r24, 0x0157
     eec:	90 91 58 01 	lds	r25, 0x0158
     ef0:	9a 83       	std	Y+2, r25	; 0x02
     ef2:	89 83       	std	Y+1, r24	; 0x01
    // After vm-buf read we can reenable real interrupts!
    sei();
     ef4:	78 94       	sei
    isr();
     ef6:	e9 81       	ldd	r30, Y+1	; 0x01
     ef8:	fa 81       	ldd	r31, Y+2	; 0x02
     efa:	09 95       	icall
}
     efc:	0f 90       	pop	r0
     efe:	0f 90       	pop	r0
     f00:	cf 91       	pop	r28
     f02:	df 91       	pop	r29
     f04:	08 95       	ret

00000f06 <vinterrupt_wrapper>:
// Nesting part, no prologue and hand made epilogue.
__attribute__ (( naked )) void vinterrupt_wrapper(void)
{
    _vinterrupt_wrapper();
     f06:	0e 94 5e 07 	call	0xebc	; 0xebc <_vinterrupt_wrapper>
    cli();
     f0a:	f8 94       	cli
    // Virtual interrupts are enabled after interrupt processing.
    vm_state[current_vm].int_enabled = (bool_t)1;
     f0c:	80 91 26 01 	lds	r24, 0x0126
     f10:	28 2f       	mov	r18, r24
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	c9 01       	movw	r24, r18
     f16:	88 0f       	add	r24, r24
     f18:	99 1f       	adc	r25, r25
     f1a:	88 0f       	add	r24, r24
     f1c:	99 1f       	adc	r25, r25
     f1e:	88 0f       	add	r24, r24
     f20:	99 1f       	adc	r25, r25
     f22:	82 0f       	add	r24, r18
     f24:	93 1f       	adc	r25, r19
     f26:	fc 01       	movw	r30, r24
     f28:	e7 5d       	subi	r30, 0xD7	; 215
     f2a:	fe 4f       	sbci	r31, 0xFE	; 254
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	80 83       	st	Z, r24
    }
    bugurt_set_stack_pointer( vm_state[current_vm].int_sp );
}
__MACRO_FUNCTION__( _vsmp_interrupt_epilogue )
{
    if( vsmp_do_interrupt() ) goto chained_vinterrupt_return;
     f30:	0e 94 c6 06 	call	0xd8c	; 0xd8c <vsmp_do_interrupt>
     f34:	88 23       	and	r24, r24
     f36:	09 f0       	breq	.+2      	; 0xf3a <vinterrupt_wrapper+0x34>
     f38:	63 c0       	rjmp	.+198    	; 0x1000 <vinterrupt_wrapper+0xfa>

    if( vm_state[current_vm].int_nest_count )vm_state[current_vm].int_nest_count--;
     f3a:	80 91 26 01 	lds	r24, 0x0126
     f3e:	28 2f       	mov	r18, r24
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	c9 01       	movw	r24, r18
     f44:	88 0f       	add	r24, r24
     f46:	99 1f       	adc	r25, r25
     f48:	88 0f       	add	r24, r24
     f4a:	99 1f       	adc	r25, r25
     f4c:	88 0f       	add	r24, r24
     f4e:	99 1f       	adc	r25, r25
     f50:	82 0f       	add	r24, r18
     f52:	93 1f       	adc	r25, r19
     f54:	fc 01       	movw	r30, r24
     f56:	e6 5d       	subi	r30, 0xD6	; 214
     f58:	fe 4f       	sbci	r31, 0xFE	; 254
     f5a:	80 81       	ld	r24, Z
     f5c:	91 81       	ldd	r25, Z+1	; 0x01
     f5e:	00 97       	sbiw	r24, 0x00	; 0
     f60:	19 f1       	breq	.+70     	; 0xfa8 <vinterrupt_wrapper+0xa2>
     f62:	80 91 26 01 	lds	r24, 0x0126
     f66:	28 2f       	mov	r18, r24
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	c9 01       	movw	r24, r18
     f6c:	88 0f       	add	r24, r24
     f6e:	99 1f       	adc	r25, r25
     f70:	88 0f       	add	r24, r24
     f72:	99 1f       	adc	r25, r25
     f74:	88 0f       	add	r24, r24
     f76:	99 1f       	adc	r25, r25
     f78:	82 0f       	add	r24, r18
     f7a:	93 1f       	adc	r25, r19
     f7c:	fc 01       	movw	r30, r24
     f7e:	e6 5d       	subi	r30, 0xD6	; 214
     f80:	fe 4f       	sbci	r31, 0xFE	; 254
     f82:	80 81       	ld	r24, Z
     f84:	91 81       	ldd	r25, Z+1	; 0x01
     f86:	ac 01       	movw	r20, r24
     f88:	41 50       	subi	r20, 0x01	; 1
     f8a:	50 40       	sbci	r21, 0x00	; 0
     f8c:	c9 01       	movw	r24, r18
     f8e:	88 0f       	add	r24, r24
     f90:	99 1f       	adc	r25, r25
     f92:	88 0f       	add	r24, r24
     f94:	99 1f       	adc	r25, r25
     f96:	88 0f       	add	r24, r24
     f98:	99 1f       	adc	r25, r25
     f9a:	82 0f       	add	r24, r18
     f9c:	93 1f       	adc	r25, r19
     f9e:	fc 01       	movw	r30, r24
     fa0:	e6 5d       	subi	r30, 0xD6	; 214
     fa2:	fe 4f       	sbci	r31, 0xFE	; 254
     fa4:	51 83       	std	Z+1, r21	; 0x01
     fa6:	40 83       	st	Z, r20
    if( vm_state[current_vm].int_nest_count ) goto nesting_vinterrupt_return;
     fa8:	80 91 26 01 	lds	r24, 0x0126
     fac:	28 2f       	mov	r18, r24
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	c9 01       	movw	r24, r18
     fb2:	88 0f       	add	r24, r24
     fb4:	99 1f       	adc	r25, r25
     fb6:	88 0f       	add	r24, r24
     fb8:	99 1f       	adc	r25, r25
     fba:	88 0f       	add	r24, r24
     fbc:	99 1f       	adc	r25, r25
     fbe:	82 0f       	add	r24, r18
     fc0:	93 1f       	adc	r25, r19
     fc2:	fc 01       	movw	r30, r24
     fc4:	e6 5d       	subi	r30, 0xD6	; 214
     fc6:	fe 4f       	sbci	r31, 0xFE	; 254
     fc8:	80 81       	ld	r24, Z
     fca:	91 81       	ldd	r25, Z+1	; 0x01
     fcc:	00 97       	sbiw	r24, 0x00	; 0
     fce:	a9 f4       	brne	.+42     	; 0xffa <vinterrupt_wrapper+0xf4>

    bugurt_restore_context( vm_state[current_vm].sp ); // Will return to current vm operation!
     fd0:	80 91 26 01 	lds	r24, 0x0126
     fd4:	28 2f       	mov	r18, r24
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	c9 01       	movw	r24, r18
     fda:	88 0f       	add	r24, r24
     fdc:	99 1f       	adc	r25, r25
     fde:	88 0f       	add	r24, r24
     fe0:	99 1f       	adc	r25, r25
     fe2:	88 0f       	add	r24, r24
     fe4:	99 1f       	adc	r25, r25
     fe6:	82 0f       	add	r24, r18
     fe8:	93 1f       	adc	r25, r19
     fea:	fc 01       	movw	r30, r24
     fec:	e4 5d       	subi	r30, 0xD4	; 212
     fee:	fe 4f       	sbci	r31, 0xFE	; 254
     ff0:	80 81       	ld	r24, Z
     ff2:	91 81       	ldd	r25, Z+1	; 0x01
     ff4:	0e 94 9a 00 	call	0x134	; 0x134 <bugurt_restore_context>
    __asm__ __volatile__("reti"::);
     ff8:	18 95       	reti

nesting_vinterrupt_return:
    bugurt_pop_context(); //Will return to nesting virtual interrupt;
     ffa:	0e 94 97 00 	call	0x12e	; 0x12e <bugurt_pop_context>
    __asm__ __volatile__("reti"::);
     ffe:	18 95       	reti

chained_vinterrupt_return:
    bugurt_set_stack_pointer( vm_state[current_vm].int_sp );
    1000:	80 91 26 01 	lds	r24, 0x0126
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	c9 01       	movw	r24, r18
    100a:	88 0f       	add	r24, r24
    100c:	99 1f       	adc	r25, r25
    100e:	88 0f       	add	r24, r24
    1010:	99 1f       	adc	r25, r25
    1012:	88 0f       	add	r24, r24
    1014:	99 1f       	adc	r25, r25
    1016:	82 0f       	add	r24, r18
    1018:	93 1f       	adc	r25, r19
    101a:	fc 01       	movw	r30, r24
    101c:	e2 5d       	subi	r30, 0xD2	; 210
    101e:	fe 4f       	sbci	r31, 0xFE	; 254
    1020:	80 81       	ld	r24, Z
    1022:	91 81       	ldd	r25, Z+1	; 0x01
    1024:	0e 94 c5 00 	call	0x18a	; 0x18a <bugurt_set_stack_pointer>
    bugurt_push_pointer( (void *)vinterrupt_wrapper ); // Will return to vinterrupt_wrapper() entry point!
    1028:	83 e8       	ldi	r24, 0x83	; 131
    102a:	97 e0       	ldi	r25, 0x07	; 7
    102c:	0e 94 cd 00 	call	0x19a	; 0x19a <bugurt_push_pointer>
    __asm__ __volatile__("ret"::);
    1030:	08 95       	ret

00001032 <__vector_7>:
}

/* Virtual interrupt prologue and epilogue inline functions (I can,t debug macros !) */
__MACRO_FUNCTION__( _vsmp_interrupt_prologue )
{
    vm_buf = (void *)bugurt_save_context();
    1032:	0e 94 6b 00 	call	0xd6	; 0xd6 <bugurt_save_context>
    1036:	90 93 58 01 	sts	0x0158, r25
    103a:	80 93 57 01 	sts	0x0157, r24
    if( vm_state[current_vm].int_nest_count++ )
    103e:	80 91 26 01 	lds	r24, 0x0126
    1042:	28 2f       	mov	r18, r24
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	3a 83       	std	Y+2, r19	; 0x02
    1048:	29 83       	std	Y+1, r18	; 0x01
    104a:	89 81       	ldd	r24, Y+1	; 0x01
    104c:	9a 81       	ldd	r25, Y+2	; 0x02
    104e:	88 0f       	add	r24, r24
    1050:	99 1f       	adc	r25, r25
    1052:	88 0f       	add	r24, r24
    1054:	99 1f       	adc	r25, r25
    1056:	88 0f       	add	r24, r24
    1058:	99 1f       	adc	r25, r25
    105a:	49 81       	ldd	r20, Y+1	; 0x01
    105c:	5a 81       	ldd	r21, Y+2	; 0x02
    105e:	84 0f       	add	r24, r20
    1060:	95 1f       	adc	r25, r21
    1062:	fc 01       	movw	r30, r24
    1064:	e6 5d       	subi	r30, 0xD6	; 214
    1066:	fe 4f       	sbci	r31, 0xFE	; 254
    1068:	80 81       	ld	r24, Z
    106a:	91 81       	ldd	r25, Z+1	; 0x01
    106c:	9c 83       	std	Y+4, r25	; 0x04
    106e:	8b 83       	std	Y+3, r24	; 0x03
    1070:	1d 82       	std	Y+5, r1	; 0x05
    1072:	2b 81       	ldd	r18, Y+3	; 0x03
    1074:	3c 81       	ldd	r19, Y+4	; 0x04
    1076:	21 15       	cp	r18, r1
    1078:	31 05       	cpc	r19, r1
    107a:	11 f0       	breq	.+4      	; 0x1080 <__vector_7+0x4e>
    107c:	31 e0       	ldi	r19, 0x01	; 1
    107e:	3d 83       	std	Y+5, r19	; 0x05
    1080:	2b 81       	ldd	r18, Y+3	; 0x03
    1082:	3c 81       	ldd	r19, Y+4	; 0x04
    1084:	2f 5f       	subi	r18, 0xFF	; 255
    1086:	3f 4f       	sbci	r19, 0xFF	; 255
    1088:	89 81       	ldd	r24, Y+1	; 0x01
    108a:	9a 81       	ldd	r25, Y+2	; 0x02
    108c:	88 0f       	add	r24, r24
    108e:	99 1f       	adc	r25, r25
    1090:	88 0f       	add	r24, r24
    1092:	99 1f       	adc	r25, r25
    1094:	88 0f       	add	r24, r24
    1096:	99 1f       	adc	r25, r25
    1098:	49 81       	ldd	r20, Y+1	; 0x01
    109a:	5a 81       	ldd	r21, Y+2	; 0x02
    109c:	84 0f       	add	r24, r20
    109e:	95 1f       	adc	r25, r21
    10a0:	fc 01       	movw	r30, r24
    10a2:	e6 5d       	subi	r30, 0xD6	; 214
    10a4:	fe 4f       	sbci	r31, 0xFE	; 254
    10a6:	31 83       	std	Z+1, r19	; 0x01
    10a8:	20 83       	st	Z, r18
    10aa:	5d 81       	ldd	r21, Y+5	; 0x05
    10ac:	55 23       	and	r21, r21
    10ae:	c1 f0       	breq	.+48     	; 0x10e0 <__vector_7+0xae>
    {
        vm_state[current_vm].int_sp = vm_buf;
    10b0:	80 91 26 01 	lds	r24, 0x0126
    10b4:	28 2f       	mov	r18, r24
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	80 91 57 01 	lds	r24, 0x0157
    10bc:	90 91 58 01 	lds	r25, 0x0158
    10c0:	ac 01       	movw	r20, r24
    10c2:	c9 01       	movw	r24, r18
    10c4:	88 0f       	add	r24, r24
    10c6:	99 1f       	adc	r25, r25
    10c8:	88 0f       	add	r24, r24
    10ca:	99 1f       	adc	r25, r25
    10cc:	88 0f       	add	r24, r24
    10ce:	99 1f       	adc	r25, r25
    10d0:	82 0f       	add	r24, r18
    10d2:	93 1f       	adc	r25, r19
    10d4:	fc 01       	movw	r30, r24
    10d6:	e2 5d       	subi	r30, 0xD2	; 210
    10d8:	fe 4f       	sbci	r31, 0xFE	; 254
    10da:	51 83       	std	Z+1, r21	; 0x01
    10dc:	40 83       	st	Z, r20
    10de:	17 c0       	rjmp	.+46     	; 0x110e <__vector_7+0xdc>
    }
    else
    {
        vm_state[current_vm].sp = (stack_t *)vm_buf;
    10e0:	80 91 26 01 	lds	r24, 0x0126
    10e4:	28 2f       	mov	r18, r24
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	80 91 57 01 	lds	r24, 0x0157
    10ec:	90 91 58 01 	lds	r25, 0x0158
    10f0:	ac 01       	movw	r20, r24
    10f2:	c9 01       	movw	r24, r18
    10f4:	88 0f       	add	r24, r24
    10f6:	99 1f       	adc	r25, r25
    10f8:	88 0f       	add	r24, r24
    10fa:	99 1f       	adc	r25, r25
    10fc:	88 0f       	add	r24, r24
    10fe:	99 1f       	adc	r25, r25
    1100:	82 0f       	add	r24, r18
    1102:	93 1f       	adc	r25, r19
    1104:	fc 01       	movw	r30, r24
    1106:	e4 5d       	subi	r30, 0xD4	; 212
    1108:	fe 4f       	sbci	r31, 0xFE	; 254
    110a:	51 83       	std	Z+1, r21	; 0x01
    110c:	40 83       	st	Z, r20
    }
    bugurt_set_stack_pointer( vm_state[current_vm].int_sp );
    110e:	80 91 26 01 	lds	r24, 0x0126
    1112:	28 2f       	mov	r18, r24
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	c9 01       	movw	r24, r18
    1118:	88 0f       	add	r24, r24
    111a:	99 1f       	adc	r25, r25
    111c:	88 0f       	add	r24, r24
    111e:	99 1f       	adc	r25, r25
    1120:	88 0f       	add	r24, r24
    1122:	99 1f       	adc	r25, r25
    1124:	82 0f       	add	r24, r18
    1126:	93 1f       	adc	r25, r19
    1128:	fc 01       	movw	r30, r24
    112a:	e2 5d       	subi	r30, 0xD2	; 210
    112c:	fe 4f       	sbci	r31, 0xFE	; 254
    112e:	80 81       	ld	r24, Z
    1130:	91 81       	ldd	r25, Z+1	; 0x01
    1132:	0e 94 c5 00 	call	0x18a	; 0x18a <bugurt_set_stack_pointer>
__attribute__ (( signal, naked )) void SYSTEM_TIMER_ISR(void);
void SYSTEM_TIMER_ISR(void)
{
    _vsmp_interrupt_prologue();

    current_vm++;
    1136:	80 91 26 01 	lds	r24, 0x0126
    113a:	8f 5f       	subi	r24, 0xFF	; 255
    113c:	80 93 26 01 	sts	0x0126, r24
    if(current_vm >= MAX_CORES)current_vm = (core_id_t)0;
    1140:	80 91 26 01 	lds	r24, 0x0126
    1144:	82 30       	cpi	r24, 0x02	; 2
    1146:	10 f0       	brcs	.+4      	; 0x114c <__vector_7+0x11a>
    1148:	10 92 26 01 	sts	0x0126, r1

    if(vsmp_systimer_hook)
    114c:	80 91 d9 02 	lds	r24, 0x02D9
    1150:	90 91 da 02 	lds	r25, 0x02DA
    1154:	00 97       	sbiw	r24, 0x00	; 0
    1156:	29 f0       	breq	.+10     	; 0x1162 <__vector_7+0x130>
    {
        vsmp_systimer_hook();
    1158:	e0 91 d9 02 	lds	r30, 0x02D9
    115c:	f0 91 da 02 	lds	r31, 0x02DA
    1160:	09 95       	icall
    }
    bugurt_set_stack_pointer( vm_state[current_vm].int_sp );
}
__MACRO_FUNCTION__( _vsmp_interrupt_epilogue )
{
    if( vsmp_do_interrupt() ) goto chained_vinterrupt_return;
    1162:	0e 94 c6 06 	call	0xd8c	; 0xd8c <vsmp_do_interrupt>
    1166:	88 23       	and	r24, r24
    1168:	09 f0       	breq	.+2      	; 0x116c <__vector_7+0x13a>
    116a:	63 c0       	rjmp	.+198    	; 0x1232 <__vector_7+0x200>

    if( vm_state[current_vm].int_nest_count )vm_state[current_vm].int_nest_count--;
    116c:	80 91 26 01 	lds	r24, 0x0126
    1170:	28 2f       	mov	r18, r24
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	c9 01       	movw	r24, r18
    1176:	88 0f       	add	r24, r24
    1178:	99 1f       	adc	r25, r25
    117a:	88 0f       	add	r24, r24
    117c:	99 1f       	adc	r25, r25
    117e:	88 0f       	add	r24, r24
    1180:	99 1f       	adc	r25, r25
    1182:	82 0f       	add	r24, r18
    1184:	93 1f       	adc	r25, r19
    1186:	fc 01       	movw	r30, r24
    1188:	e6 5d       	subi	r30, 0xD6	; 214
    118a:	fe 4f       	sbci	r31, 0xFE	; 254
    118c:	80 81       	ld	r24, Z
    118e:	91 81       	ldd	r25, Z+1	; 0x01
    1190:	00 97       	sbiw	r24, 0x00	; 0
    1192:	19 f1       	breq	.+70     	; 0x11da <__vector_7+0x1a8>
    1194:	80 91 26 01 	lds	r24, 0x0126
    1198:	28 2f       	mov	r18, r24
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	c9 01       	movw	r24, r18
    119e:	88 0f       	add	r24, r24
    11a0:	99 1f       	adc	r25, r25
    11a2:	88 0f       	add	r24, r24
    11a4:	99 1f       	adc	r25, r25
    11a6:	88 0f       	add	r24, r24
    11a8:	99 1f       	adc	r25, r25
    11aa:	82 0f       	add	r24, r18
    11ac:	93 1f       	adc	r25, r19
    11ae:	fc 01       	movw	r30, r24
    11b0:	e6 5d       	subi	r30, 0xD6	; 214
    11b2:	fe 4f       	sbci	r31, 0xFE	; 254
    11b4:	80 81       	ld	r24, Z
    11b6:	91 81       	ldd	r25, Z+1	; 0x01
    11b8:	ac 01       	movw	r20, r24
    11ba:	41 50       	subi	r20, 0x01	; 1
    11bc:	50 40       	sbci	r21, 0x00	; 0
    11be:	c9 01       	movw	r24, r18
    11c0:	88 0f       	add	r24, r24
    11c2:	99 1f       	adc	r25, r25
    11c4:	88 0f       	add	r24, r24
    11c6:	99 1f       	adc	r25, r25
    11c8:	88 0f       	add	r24, r24
    11ca:	99 1f       	adc	r25, r25
    11cc:	82 0f       	add	r24, r18
    11ce:	93 1f       	adc	r25, r19
    11d0:	fc 01       	movw	r30, r24
    11d2:	e6 5d       	subi	r30, 0xD6	; 214
    11d4:	fe 4f       	sbci	r31, 0xFE	; 254
    11d6:	51 83       	std	Z+1, r21	; 0x01
    11d8:	40 83       	st	Z, r20
    if( vm_state[current_vm].int_nest_count ) goto nesting_vinterrupt_return;
    11da:	80 91 26 01 	lds	r24, 0x0126
    11de:	28 2f       	mov	r18, r24
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	c9 01       	movw	r24, r18
    11e4:	88 0f       	add	r24, r24
    11e6:	99 1f       	adc	r25, r25
    11e8:	88 0f       	add	r24, r24
    11ea:	99 1f       	adc	r25, r25
    11ec:	88 0f       	add	r24, r24
    11ee:	99 1f       	adc	r25, r25
    11f0:	82 0f       	add	r24, r18
    11f2:	93 1f       	adc	r25, r19
    11f4:	fc 01       	movw	r30, r24
    11f6:	e6 5d       	subi	r30, 0xD6	; 214
    11f8:	fe 4f       	sbci	r31, 0xFE	; 254
    11fa:	80 81       	ld	r24, Z
    11fc:	91 81       	ldd	r25, Z+1	; 0x01
    11fe:	00 97       	sbiw	r24, 0x00	; 0
    1200:	a9 f4       	brne	.+42     	; 0x122c <__vector_7+0x1fa>

    bugurt_restore_context( vm_state[current_vm].sp ); // Will return to current vm operation!
    1202:	80 91 26 01 	lds	r24, 0x0126
    1206:	28 2f       	mov	r18, r24
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	c9 01       	movw	r24, r18
    120c:	88 0f       	add	r24, r24
    120e:	99 1f       	adc	r25, r25
    1210:	88 0f       	add	r24, r24
    1212:	99 1f       	adc	r25, r25
    1214:	88 0f       	add	r24, r24
    1216:	99 1f       	adc	r25, r25
    1218:	82 0f       	add	r24, r18
    121a:	93 1f       	adc	r25, r19
    121c:	fc 01       	movw	r30, r24
    121e:	e4 5d       	subi	r30, 0xD4	; 212
    1220:	fe 4f       	sbci	r31, 0xFE	; 254
    1222:	80 81       	ld	r24, Z
    1224:	91 81       	ldd	r25, Z+1	; 0x01
    1226:	0e 94 9a 00 	call	0x134	; 0x134 <bugurt_restore_context>
    __asm__ __volatile__("reti"::);
    122a:	18 95       	reti

nesting_vinterrupt_return:
    bugurt_pop_context(); //Will return to nesting virtual interrupt;
    122c:	0e 94 97 00 	call	0x12e	; 0x12e <bugurt_pop_context>
    __asm__ __volatile__("reti"::);
    1230:	18 95       	reti

chained_vinterrupt_return:
    bugurt_set_stack_pointer( vm_state[current_vm].int_sp );
    1232:	80 91 26 01 	lds	r24, 0x0126
    1236:	28 2f       	mov	r18, r24
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	c9 01       	movw	r24, r18
    123c:	88 0f       	add	r24, r24
    123e:	99 1f       	adc	r25, r25
    1240:	88 0f       	add	r24, r24
    1242:	99 1f       	adc	r25, r25
    1244:	88 0f       	add	r24, r24
    1246:	99 1f       	adc	r25, r25
    1248:	82 0f       	add	r24, r18
    124a:	93 1f       	adc	r25, r19
    124c:	fc 01       	movw	r30, r24
    124e:	e2 5d       	subi	r30, 0xD2	; 210
    1250:	fe 4f       	sbci	r31, 0xFE	; 254
    1252:	80 81       	ld	r24, Z
    1254:	91 81       	ldd	r25, Z+1	; 0x01
    1256:	0e 94 c5 00 	call	0x18a	; 0x18a <bugurt_set_stack_pointer>
    bugurt_push_pointer( (void *)vinterrupt_wrapper ); // Will return to vinterrupt_wrapper() entry point!
    125a:	83 e8       	ldi	r24, 0x83	; 131
    125c:	97 e0       	ldi	r25, 0x07	; 7
    125e:	0e 94 cd 00 	call	0x19a	; 0x19a <bugurt_push_pointer>
    __asm__ __volatile__("ret"::);
    1262:	08 95       	ret

00001264 <_vsmp_vinterrupt>:
}

/* Virtual interrupt prologue and epilogue inline functions (I can,t debug macros !) */
__MACRO_FUNCTION__( _vsmp_interrupt_prologue )
{
    vm_buf = (void *)bugurt_save_context();
    1264:	0e 94 6b 00 	call	0xd6	; 0xd6 <bugurt_save_context>
    1268:	90 93 58 01 	sts	0x0158, r25
    126c:	80 93 57 01 	sts	0x0157, r24
    if( vm_state[current_vm].int_nest_count++ )
    1270:	80 91 26 01 	lds	r24, 0x0126
    1274:	28 2f       	mov	r18, r24
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	3a 83       	std	Y+2, r19	; 0x02
    127a:	29 83       	std	Y+1, r18	; 0x01
    127c:	89 81       	ldd	r24, Y+1	; 0x01
    127e:	9a 81       	ldd	r25, Y+2	; 0x02
    1280:	88 0f       	add	r24, r24
    1282:	99 1f       	adc	r25, r25
    1284:	88 0f       	add	r24, r24
    1286:	99 1f       	adc	r25, r25
    1288:	88 0f       	add	r24, r24
    128a:	99 1f       	adc	r25, r25
    128c:	49 81       	ldd	r20, Y+1	; 0x01
    128e:	5a 81       	ldd	r21, Y+2	; 0x02
    1290:	84 0f       	add	r24, r20
    1292:	95 1f       	adc	r25, r21
    1294:	fc 01       	movw	r30, r24
    1296:	e6 5d       	subi	r30, 0xD6	; 214
    1298:	fe 4f       	sbci	r31, 0xFE	; 254
    129a:	80 81       	ld	r24, Z
    129c:	91 81       	ldd	r25, Z+1	; 0x01
    129e:	9c 83       	std	Y+4, r25	; 0x04
    12a0:	8b 83       	std	Y+3, r24	; 0x03
    12a2:	1d 82       	std	Y+5, r1	; 0x05
    12a4:	2b 81       	ldd	r18, Y+3	; 0x03
    12a6:	3c 81       	ldd	r19, Y+4	; 0x04
    12a8:	21 15       	cp	r18, r1
    12aa:	31 05       	cpc	r19, r1
    12ac:	11 f0       	breq	.+4      	; 0x12b2 <_vsmp_vinterrupt+0x4e>
    12ae:	31 e0       	ldi	r19, 0x01	; 1
    12b0:	3d 83       	std	Y+5, r19	; 0x05
    12b2:	2b 81       	ldd	r18, Y+3	; 0x03
    12b4:	3c 81       	ldd	r19, Y+4	; 0x04
    12b6:	2f 5f       	subi	r18, 0xFF	; 255
    12b8:	3f 4f       	sbci	r19, 0xFF	; 255
    12ba:	89 81       	ldd	r24, Y+1	; 0x01
    12bc:	9a 81       	ldd	r25, Y+2	; 0x02
    12be:	88 0f       	add	r24, r24
    12c0:	99 1f       	adc	r25, r25
    12c2:	88 0f       	add	r24, r24
    12c4:	99 1f       	adc	r25, r25
    12c6:	88 0f       	add	r24, r24
    12c8:	99 1f       	adc	r25, r25
    12ca:	49 81       	ldd	r20, Y+1	; 0x01
    12cc:	5a 81       	ldd	r21, Y+2	; 0x02
    12ce:	84 0f       	add	r24, r20
    12d0:	95 1f       	adc	r25, r21
    12d2:	fc 01       	movw	r30, r24
    12d4:	e6 5d       	subi	r30, 0xD6	; 214
    12d6:	fe 4f       	sbci	r31, 0xFE	; 254
    12d8:	31 83       	std	Z+1, r19	; 0x01
    12da:	20 83       	st	Z, r18
    12dc:	5d 81       	ldd	r21, Y+5	; 0x05
    12de:	55 23       	and	r21, r21
    12e0:	c1 f0       	breq	.+48     	; 0x1312 <_vsmp_vinterrupt+0xae>
    {
        vm_state[current_vm].int_sp = vm_buf;
    12e2:	80 91 26 01 	lds	r24, 0x0126
    12e6:	28 2f       	mov	r18, r24
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	80 91 57 01 	lds	r24, 0x0157
    12ee:	90 91 58 01 	lds	r25, 0x0158
    12f2:	ac 01       	movw	r20, r24
    12f4:	c9 01       	movw	r24, r18
    12f6:	88 0f       	add	r24, r24
    12f8:	99 1f       	adc	r25, r25
    12fa:	88 0f       	add	r24, r24
    12fc:	99 1f       	adc	r25, r25
    12fe:	88 0f       	add	r24, r24
    1300:	99 1f       	adc	r25, r25
    1302:	82 0f       	add	r24, r18
    1304:	93 1f       	adc	r25, r19
    1306:	fc 01       	movw	r30, r24
    1308:	e2 5d       	subi	r30, 0xD2	; 210
    130a:	fe 4f       	sbci	r31, 0xFE	; 254
    130c:	51 83       	std	Z+1, r21	; 0x01
    130e:	40 83       	st	Z, r20
    1310:	17 c0       	rjmp	.+46     	; 0x1340 <_vsmp_vinterrupt+0xdc>
    }
    else
    {
        vm_state[current_vm].sp = (stack_t *)vm_buf;
    1312:	80 91 26 01 	lds	r24, 0x0126
    1316:	28 2f       	mov	r18, r24
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	80 91 57 01 	lds	r24, 0x0157
    131e:	90 91 58 01 	lds	r25, 0x0158
    1322:	ac 01       	movw	r20, r24
    1324:	c9 01       	movw	r24, r18
    1326:	88 0f       	add	r24, r24
    1328:	99 1f       	adc	r25, r25
    132a:	88 0f       	add	r24, r24
    132c:	99 1f       	adc	r25, r25
    132e:	88 0f       	add	r24, r24
    1330:	99 1f       	adc	r25, r25
    1332:	82 0f       	add	r24, r18
    1334:	93 1f       	adc	r25, r19
    1336:	fc 01       	movw	r30, r24
    1338:	e4 5d       	subi	r30, 0xD4	; 212
    133a:	fe 4f       	sbci	r31, 0xFE	; 254
    133c:	51 83       	std	Z+1, r21	; 0x01
    133e:	40 83       	st	Z, r20
    }
    bugurt_set_stack_pointer( vm_state[current_vm].int_sp );
    1340:	80 91 26 01 	lds	r24, 0x0126
    1344:	28 2f       	mov	r18, r24
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	c9 01       	movw	r24, r18
    134a:	88 0f       	add	r24, r24
    134c:	99 1f       	adc	r25, r25
    134e:	88 0f       	add	r24, r24
    1350:	99 1f       	adc	r25, r25
    1352:	88 0f       	add	r24, r24
    1354:	99 1f       	adc	r25, r25
    1356:	82 0f       	add	r24, r18
    1358:	93 1f       	adc	r25, r19
    135a:	fc 01       	movw	r30, r24
    135c:	e2 5d       	subi	r30, 0xD2	; 210
    135e:	fe 4f       	sbci	r31, 0xFE	; 254
    1360:	80 81       	ld	r24, Z
    1362:	91 81       	ldd	r25, Z+1	; 0x01
    1364:	0e 94 c5 00 	call	0x18a	; 0x18a <bugurt_set_stack_pointer>
}
__MACRO_FUNCTION__( _vsmp_interrupt_epilogue )
{
    if( vsmp_do_interrupt() ) goto chained_vinterrupt_return;
    1368:	0e 94 c6 06 	call	0xd8c	; 0xd8c <vsmp_do_interrupt>
    136c:	88 23       	and	r24, r24
    136e:	09 f0       	breq	.+2      	; 0x1372 <_vsmp_vinterrupt+0x10e>
    1370:	63 c0       	rjmp	.+198    	; 0x1438 <_vsmp_vinterrupt+0x1d4>

    if( vm_state[current_vm].int_nest_count )vm_state[current_vm].int_nest_count--;
    1372:	80 91 26 01 	lds	r24, 0x0126
    1376:	28 2f       	mov	r18, r24
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	c9 01       	movw	r24, r18
    137c:	88 0f       	add	r24, r24
    137e:	99 1f       	adc	r25, r25
    1380:	88 0f       	add	r24, r24
    1382:	99 1f       	adc	r25, r25
    1384:	88 0f       	add	r24, r24
    1386:	99 1f       	adc	r25, r25
    1388:	82 0f       	add	r24, r18
    138a:	93 1f       	adc	r25, r19
    138c:	fc 01       	movw	r30, r24
    138e:	e6 5d       	subi	r30, 0xD6	; 214
    1390:	fe 4f       	sbci	r31, 0xFE	; 254
    1392:	80 81       	ld	r24, Z
    1394:	91 81       	ldd	r25, Z+1	; 0x01
    1396:	00 97       	sbiw	r24, 0x00	; 0
    1398:	19 f1       	breq	.+70     	; 0x13e0 <_vsmp_vinterrupt+0x17c>
    139a:	80 91 26 01 	lds	r24, 0x0126
    139e:	28 2f       	mov	r18, r24
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	c9 01       	movw	r24, r18
    13a4:	88 0f       	add	r24, r24
    13a6:	99 1f       	adc	r25, r25
    13a8:	88 0f       	add	r24, r24
    13aa:	99 1f       	adc	r25, r25
    13ac:	88 0f       	add	r24, r24
    13ae:	99 1f       	adc	r25, r25
    13b0:	82 0f       	add	r24, r18
    13b2:	93 1f       	adc	r25, r19
    13b4:	fc 01       	movw	r30, r24
    13b6:	e6 5d       	subi	r30, 0xD6	; 214
    13b8:	fe 4f       	sbci	r31, 0xFE	; 254
    13ba:	80 81       	ld	r24, Z
    13bc:	91 81       	ldd	r25, Z+1	; 0x01
    13be:	ac 01       	movw	r20, r24
    13c0:	41 50       	subi	r20, 0x01	; 1
    13c2:	50 40       	sbci	r21, 0x00	; 0
    13c4:	c9 01       	movw	r24, r18
    13c6:	88 0f       	add	r24, r24
    13c8:	99 1f       	adc	r25, r25
    13ca:	88 0f       	add	r24, r24
    13cc:	99 1f       	adc	r25, r25
    13ce:	88 0f       	add	r24, r24
    13d0:	99 1f       	adc	r25, r25
    13d2:	82 0f       	add	r24, r18
    13d4:	93 1f       	adc	r25, r19
    13d6:	fc 01       	movw	r30, r24
    13d8:	e6 5d       	subi	r30, 0xD6	; 214
    13da:	fe 4f       	sbci	r31, 0xFE	; 254
    13dc:	51 83       	std	Z+1, r21	; 0x01
    13de:	40 83       	st	Z, r20
    if( vm_state[current_vm].int_nest_count ) goto nesting_vinterrupt_return;
    13e0:	80 91 26 01 	lds	r24, 0x0126
    13e4:	28 2f       	mov	r18, r24
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	c9 01       	movw	r24, r18
    13ea:	88 0f       	add	r24, r24
    13ec:	99 1f       	adc	r25, r25
    13ee:	88 0f       	add	r24, r24
    13f0:	99 1f       	adc	r25, r25
    13f2:	88 0f       	add	r24, r24
    13f4:	99 1f       	adc	r25, r25
    13f6:	82 0f       	add	r24, r18
    13f8:	93 1f       	adc	r25, r19
    13fa:	fc 01       	movw	r30, r24
    13fc:	e6 5d       	subi	r30, 0xD6	; 214
    13fe:	fe 4f       	sbci	r31, 0xFE	; 254
    1400:	80 81       	ld	r24, Z
    1402:	91 81       	ldd	r25, Z+1	; 0x01
    1404:	00 97       	sbiw	r24, 0x00	; 0
    1406:	a9 f4       	brne	.+42     	; 0x1432 <_vsmp_vinterrupt+0x1ce>

    bugurt_restore_context( vm_state[current_vm].sp ); // Will return to current vm operation!
    1408:	80 91 26 01 	lds	r24, 0x0126
    140c:	28 2f       	mov	r18, r24
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	c9 01       	movw	r24, r18
    1412:	88 0f       	add	r24, r24
    1414:	99 1f       	adc	r25, r25
    1416:	88 0f       	add	r24, r24
    1418:	99 1f       	adc	r25, r25
    141a:	88 0f       	add	r24, r24
    141c:	99 1f       	adc	r25, r25
    141e:	82 0f       	add	r24, r18
    1420:	93 1f       	adc	r25, r19
    1422:	fc 01       	movw	r30, r24
    1424:	e4 5d       	subi	r30, 0xD4	; 212
    1426:	fe 4f       	sbci	r31, 0xFE	; 254
    1428:	80 81       	ld	r24, Z
    142a:	91 81       	ldd	r25, Z+1	; 0x01
    142c:	0e 94 9a 00 	call	0x134	; 0x134 <bugurt_restore_context>
    __asm__ __volatile__("reti"::);
    1430:	18 95       	reti

nesting_vinterrupt_return:
    bugurt_pop_context(); //Will return to nesting virtual interrupt;
    1432:	0e 94 97 00 	call	0x12e	; 0x12e <bugurt_pop_context>
    __asm__ __volatile__("reti"::);
    1436:	18 95       	reti

chained_vinterrupt_return:
    bugurt_set_stack_pointer( vm_state[current_vm].int_sp );
    1438:	80 91 26 01 	lds	r24, 0x0126
    143c:	28 2f       	mov	r18, r24
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	c9 01       	movw	r24, r18
    1442:	88 0f       	add	r24, r24
    1444:	99 1f       	adc	r25, r25
    1446:	88 0f       	add	r24, r24
    1448:	99 1f       	adc	r25, r25
    144a:	88 0f       	add	r24, r24
    144c:	99 1f       	adc	r25, r25
    144e:	82 0f       	add	r24, r18
    1450:	93 1f       	adc	r25, r19
    1452:	fc 01       	movw	r30, r24
    1454:	e2 5d       	subi	r30, 0xD2	; 210
    1456:	fe 4f       	sbci	r31, 0xFE	; 254
    1458:	80 81       	ld	r24, Z
    145a:	91 81       	ldd	r25, Z+1	; 0x01
    145c:	0e 94 c5 00 	call	0x18a	; 0x18a <bugurt_set_stack_pointer>
    bugurt_push_pointer( (void *)vinterrupt_wrapper ); // Will return to vinterrupt_wrapper() entry point!
    1460:	83 e8       	ldi	r24, 0x83	; 131
    1462:	97 e0       	ldi	r25, 0x07	; 7
    1464:	0e 94 cd 00 	call	0x19a	; 0x19a <bugurt_push_pointer>
    __asm__ __volatile__("ret"::);
    1468:	08 95       	ret

0000146a <vsmp_vinterrupt_isr>:
    _vsmp_interrupt_epilogue();
}

// Software virtual interrupt ( For ISR usage only ! Do NOT call from "main"!)
void vsmp_vinterrupt_isr( core_id_t vm, vinterrupt_t * vector )
{
    146a:	df 93       	push	r29
    146c:	cf 93       	push	r28
    146e:	00 d0       	rcall	.+0      	; 0x1470 <vsmp_vinterrupt_isr+0x6>
    1470:	0f 92       	push	r0
    1472:	cd b7       	in	r28, 0x3d	; 61
    1474:	de b7       	in	r29, 0x3e	; 62
    1476:	89 83       	std	Y+1, r24	; 0x01
    1478:	7b 83       	std	Y+3, r23	; 0x03
    147a:	6a 83       	std	Y+2, r22	; 0x02
    if( vm_state[vm].int_fifo )
    147c:	89 81       	ldd	r24, Y+1	; 0x01
    147e:	28 2f       	mov	r18, r24
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	c9 01       	movw	r24, r18
    1484:	88 0f       	add	r24, r24
    1486:	99 1f       	adc	r25, r25
    1488:	88 0f       	add	r24, r24
    148a:	99 1f       	adc	r25, r25
    148c:	88 0f       	add	r24, r24
    148e:	99 1f       	adc	r25, r25
    1490:	82 0f       	add	r24, r18
    1492:	93 1f       	adc	r25, r19
    1494:	fc 01       	movw	r30, r24
    1496:	e9 5d       	subi	r30, 0xD9	; 217
    1498:	fe 4f       	sbci	r31, 0xFE	; 254
    149a:	80 81       	ld	r24, Z
    149c:	91 81       	ldd	r25, Z+1	; 0x01
    149e:	00 97       	sbiw	r24, 0x00	; 0
    14a0:	c1 f0       	breq	.+48     	; 0x14d2 <vsmp_vinterrupt_isr+0x68>
    {
        item_insert( (item_t *)vector, (item_t *)vm_state[vm].int_fifo );
    14a2:	4a 81       	ldd	r20, Y+2	; 0x02
    14a4:	5b 81       	ldd	r21, Y+3	; 0x03
    14a6:	89 81       	ldd	r24, Y+1	; 0x01
    14a8:	28 2f       	mov	r18, r24
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	c9 01       	movw	r24, r18
    14ae:	88 0f       	add	r24, r24
    14b0:	99 1f       	adc	r25, r25
    14b2:	88 0f       	add	r24, r24
    14b4:	99 1f       	adc	r25, r25
    14b6:	88 0f       	add	r24, r24
    14b8:	99 1f       	adc	r25, r25
    14ba:	82 0f       	add	r24, r18
    14bc:	93 1f       	adc	r25, r19
    14be:	fc 01       	movw	r30, r24
    14c0:	e9 5d       	subi	r30, 0xD9	; 217
    14c2:	fe 4f       	sbci	r31, 0xFE	; 254
    14c4:	20 81       	ld	r18, Z
    14c6:	31 81       	ldd	r19, Z+1	; 0x01
    14c8:	ca 01       	movw	r24, r20
    14ca:	b9 01       	movw	r22, r18
    14cc:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <item_insert>
    14d0:	13 c0       	rjmp	.+38     	; 0x14f8 <vsmp_vinterrupt_isr+0x8e>
    }
    else
    {
        vm_state[vm].int_fifo = (item_t *)vector;
    14d2:	89 81       	ldd	r24, Y+1	; 0x01
    14d4:	28 2f       	mov	r18, r24
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	4a 81       	ldd	r20, Y+2	; 0x02
    14da:	5b 81       	ldd	r21, Y+3	; 0x03
    14dc:	c9 01       	movw	r24, r18
    14de:	88 0f       	add	r24, r24
    14e0:	99 1f       	adc	r25, r25
    14e2:	88 0f       	add	r24, r24
    14e4:	99 1f       	adc	r25, r25
    14e6:	88 0f       	add	r24, r24
    14e8:	99 1f       	adc	r25, r25
    14ea:	82 0f       	add	r24, r18
    14ec:	93 1f       	adc	r25, r19
    14ee:	fc 01       	movw	r30, r24
    14f0:	e9 5d       	subi	r30, 0xD9	; 217
    14f2:	fe 4f       	sbci	r31, 0xFE	; 254
    14f4:	51 83       	std	Z+1, r21	; 0x01
    14f6:	40 83       	st	Z, r20
    }
}
    14f8:	0f 90       	pop	r0
    14fa:	0f 90       	pop	r0
    14fc:	0f 90       	pop	r0
    14fe:	cf 91       	pop	r28
    1500:	df 91       	pop	r29
    1502:	08 95       	ret

00001504 <vsmp_vinterrupt>:
// Software virtual interrupt ( Use in "main" only ! Do NOT call from ISR!)
void vsmp_vinterrupt( core_id_t vm, vinterrupt_t * vector )
{
    1504:	df 93       	push	r29
    1506:	cf 93       	push	r28
    1508:	00 d0       	rcall	.+0      	; 0x150a <vsmp_vinterrupt+0x6>
    150a:	0f 92       	push	r0
    150c:	cd b7       	in	r28, 0x3d	; 61
    150e:	de b7       	in	r29, 0x3e	; 62
    1510:	89 83       	std	Y+1, r24	; 0x01
    1512:	7b 83       	std	Y+3, r23	; 0x03
    1514:	6a 83       	std	Y+2, r22	; 0x02
    cli();
    1516:	f8 94       	cli
    vsmp_vinterrupt_isr( vm, vector );
    1518:	2a 81       	ldd	r18, Y+2	; 0x02
    151a:	3b 81       	ldd	r19, Y+3	; 0x03
    151c:	89 81       	ldd	r24, Y+1	; 0x01
    151e:	b9 01       	movw	r22, r18
    1520:	0e 94 35 0a 	call	0x146a	; 0x146a <vsmp_vinterrupt_isr>
    _vsmp_vinterrupt();
    1524:	0e 94 32 09 	call	0x1264	; 0x1264 <_vsmp_vinterrupt>
}
    1528:	0f 90       	pop	r0
    152a:	0f 90       	pop	r0
    152c:	0f 90       	pop	r0
    152e:	cf 91       	pop	r28
    1530:	df 91       	pop	r29
    1532:	08 95       	ret

00001534 <vsmp_vinterrupt_init>:

void vsmp_vinterrupt_init( vinterrupt_t * vector, void (*isr)(void) )
{
    1534:	df 93       	push	r29
    1536:	cf 93       	push	r28
    1538:	00 d0       	rcall	.+0      	; 0x153a <vsmp_vinterrupt_init+0x6>
    153a:	00 d0       	rcall	.+0      	; 0x153c <vsmp_vinterrupt_init+0x8>
    153c:	cd b7       	in	r28, 0x3d	; 61
    153e:	de b7       	in	r29, 0x3e	; 62
    1540:	9a 83       	std	Y+2, r25	; 0x02
    1542:	89 83       	std	Y+1, r24	; 0x01
    1544:	7c 83       	std	Y+4, r23	; 0x04
    1546:	6b 83       	std	Y+3, r22	; 0x03
    item_init( (item_t *)vector );
    1548:	89 81       	ldd	r24, Y+1	; 0x01
    154a:	9a 81       	ldd	r25, Y+2	; 0x02
    154c:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <item_init>
    vector->isr = isr;
    1550:	e9 81       	ldd	r30, Y+1	; 0x01
    1552:	fa 81       	ldd	r31, Y+2	; 0x02
    1554:	8b 81       	ldd	r24, Y+3	; 0x03
    1556:	9c 81       	ldd	r25, Y+4	; 0x04
    1558:	95 83       	std	Z+5, r25	; 0x05
    155a:	84 83       	std	Z+4, r24	; 0x04
}
    155c:	0f 90       	pop	r0
    155e:	0f 90       	pop	r0
    1560:	0f 90       	pop	r0
    1562:	0f 90       	pop	r0
    1564:	cf 91       	pop	r28
    1566:	df 91       	pop	r29
    1568:	08 95       	ret

0000156a <disable_interrupts>:

void disable_interrupts(void)
{
    156a:	df 93       	push	r29
    156c:	cf 93       	push	r28
    156e:	cd b7       	in	r28, 0x3d	; 61
    1570:	de b7       	in	r29, 0x3e	; 62
    cli();
    1572:	f8 94       	cli
    vm_state[current_vm].int_enabled = (bool_t)0;
    1574:	80 91 26 01 	lds	r24, 0x0126
    1578:	28 2f       	mov	r18, r24
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	c9 01       	movw	r24, r18
    157e:	88 0f       	add	r24, r24
    1580:	99 1f       	adc	r25, r25
    1582:	88 0f       	add	r24, r24
    1584:	99 1f       	adc	r25, r25
    1586:	88 0f       	add	r24, r24
    1588:	99 1f       	adc	r25, r25
    158a:	82 0f       	add	r24, r18
    158c:	93 1f       	adc	r25, r19
    158e:	fc 01       	movw	r30, r24
    1590:	e7 5d       	subi	r30, 0xD7	; 215
    1592:	fe 4f       	sbci	r31, 0xFE	; 254
    1594:	10 82       	st	Z, r1
    sei();
    1596:	78 94       	sei
}
    1598:	cf 91       	pop	r28
    159a:	df 91       	pop	r29
    159c:	08 95       	ret

0000159e <enable_interrupts>:

void enable_interrupts(void)
{
    159e:	df 93       	push	r29
    15a0:	cf 93       	push	r28
    15a2:	cd b7       	in	r28, 0x3d	; 61
    15a4:	de b7       	in	r29, 0x3e	; 62
    cli();
    15a6:	f8 94       	cli
    vm_state[current_vm].int_enabled = (bool_t)1;
    15a8:	80 91 26 01 	lds	r24, 0x0126
    15ac:	28 2f       	mov	r18, r24
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	c9 01       	movw	r24, r18
    15b2:	88 0f       	add	r24, r24
    15b4:	99 1f       	adc	r25, r25
    15b6:	88 0f       	add	r24, r24
    15b8:	99 1f       	adc	r25, r25
    15ba:	88 0f       	add	r24, r24
    15bc:	99 1f       	adc	r25, r25
    15be:	82 0f       	add	r24, r18
    15c0:	93 1f       	adc	r25, r19
    15c2:	fc 01       	movw	r30, r24
    15c4:	e7 5d       	subi	r30, 0xD7	; 215
    15c6:	fe 4f       	sbci	r31, 0xFE	; 254
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	80 83       	st	Z, r24
    if(vm_state[current_vm].int_fifo)_vsmp_vinterrupt();
    15cc:	80 91 26 01 	lds	r24, 0x0126
    15d0:	28 2f       	mov	r18, r24
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	c9 01       	movw	r24, r18
    15d6:	88 0f       	add	r24, r24
    15d8:	99 1f       	adc	r25, r25
    15da:	88 0f       	add	r24, r24
    15dc:	99 1f       	adc	r25, r25
    15de:	88 0f       	add	r24, r24
    15e0:	99 1f       	adc	r25, r25
    15e2:	82 0f       	add	r24, r18
    15e4:	93 1f       	adc	r25, r19
    15e6:	fc 01       	movw	r30, r24
    15e8:	e9 5d       	subi	r30, 0xD9	; 217
    15ea:	fe 4f       	sbci	r31, 0xFE	; 254
    15ec:	80 81       	ld	r24, Z
    15ee:	91 81       	ldd	r25, Z+1	; 0x01
    15f0:	00 97       	sbiw	r24, 0x00	; 0
    15f2:	19 f0       	breq	.+6      	; 0x15fa <enable_interrupts+0x5c>
    15f4:	0e 94 32 09 	call	0x1264	; 0x1264 <_vsmp_vinterrupt>
    15f8:	01 c0       	rjmp	.+2      	; 0x15fc <enable_interrupts+0x5e>
    else sei();
    15fa:	78 94       	sei
}
    15fc:	cf 91       	pop	r28
    15fe:	df 91       	pop	r29
    1600:	08 95       	ret

00001602 <proc_stack_init>:
#include"../../../include/bugurt.h"
stack_t * proc_stack_init(stack_t * sstart, code_t code, void * arg)
{
    1602:	df 93       	push	r29
    1604:	cf 93       	push	r28
    1606:	cd b7       	in	r28, 0x3d	; 61
    1608:	de b7       	in	r29, 0x3e	; 62
    160a:	2a 97       	sbiw	r28, 0x0a	; 10
    160c:	0f b6       	in	r0, 0x3f	; 63
    160e:	f8 94       	cli
    1610:	de bf       	out	0x3e, r29	; 62
    1612:	0f be       	out	0x3f, r0	; 63
    1614:	cd bf       	out	0x3d, r28	; 61
    1616:	9e 83       	std	Y+6, r25	; 0x06
    1618:	8d 83       	std	Y+5, r24	; 0x05
    161a:	78 87       	std	Y+8, r23	; 0x08
    161c:	6f 83       	std	Y+7, r22	; 0x07
    161e:	5a 87       	std	Y+10, r21	; 0x0a
    1620:	49 87       	std	Y+9, r20	; 0x09
    stack_t * tos = (stack_t *)sstart;
    1622:	8d 81       	ldd	r24, Y+5	; 0x05
    1624:	9e 81       	ldd	r25, Y+6	; 0x06
    1626:	9c 83       	std	Y+4, r25	; 0x04
    1628:	8b 83       	std	Y+3, r24	; 0x03
    // return address
    unsigned short tmp = (unsigned short)code;
    162a:	8f 81       	ldd	r24, Y+7	; 0x07
    162c:	98 85       	ldd	r25, Y+8	; 0x08
    162e:	9a 83       	std	Y+2, r25	; 0x02
    1630:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (stack_t)(tmp&(unsigned short)0x00ff);
    1632:	89 81       	ldd	r24, Y+1	; 0x01
    1634:	eb 81       	ldd	r30, Y+3	; 0x03
    1636:	fc 81       	ldd	r31, Y+4	; 0x04
    1638:	80 83       	st	Z, r24
    163a:	8b 81       	ldd	r24, Y+3	; 0x03
    163c:	9c 81       	ldd	r25, Y+4	; 0x04
    163e:	01 97       	sbiw	r24, 0x01	; 1
    1640:	9c 83       	std	Y+4, r25	; 0x04
    1642:	8b 83       	std	Y+3, r24	; 0x03
    tmp>>=8;
    1644:	89 81       	ldd	r24, Y+1	; 0x01
    1646:	9a 81       	ldd	r25, Y+2	; 0x02
    1648:	89 2f       	mov	r24, r25
    164a:	99 27       	eor	r25, r25
    164c:	9a 83       	std	Y+2, r25	; 0x02
    164e:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (stack_t)(tmp&(unsigned short)0x00ff);
    1650:	89 81       	ldd	r24, Y+1	; 0x01
    1652:	eb 81       	ldd	r30, Y+3	; 0x03
    1654:	fc 81       	ldd	r31, Y+4	; 0x04
    1656:	80 83       	st	Z, r24
    1658:	8b 81       	ldd	r24, Y+3	; 0x03
    165a:	9c 81       	ldd	r25, Y+4	; 0x04
    165c:	01 97       	sbiw	r24, 0x01	; 1
    165e:	9c 83       	std	Y+4, r25	; 0x04
    1660:	8b 83       	std	Y+3, r24	; 0x03

    // s
    *tos-- = 0x00;
    1662:	eb 81       	ldd	r30, Y+3	; 0x03
    1664:	fc 81       	ldd	r31, Y+4	; 0x04
    1666:	10 82       	st	Z, r1
    1668:	8b 81       	ldd	r24, Y+3	; 0x03
    166a:	9c 81       	ldd	r25, Y+4	; 0x04
    166c:	01 97       	sbiw	r24, 0x01	; 1
    166e:	9c 83       	std	Y+4, r25	; 0x04
    1670:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x00;// r1 must B 0
    1672:	eb 81       	ldd	r30, Y+3	; 0x03
    1674:	fc 81       	ldd	r31, Y+4	; 0x04
    1676:	10 82       	st	Z, r1
    1678:	8b 81       	ldd	r24, Y+3	; 0x03
    167a:	9c 81       	ldd	r25, Y+4	; 0x04
    167c:	01 97       	sbiw	r24, 0x01	; 1
    167e:	9c 83       	std	Y+4, r25	; 0x04
    1680:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x02;// r2
    1682:	eb 81       	ldd	r30, Y+3	; 0x03
    1684:	fc 81       	ldd	r31, Y+4	; 0x04
    1686:	82 e0       	ldi	r24, 0x02	; 2
    1688:	80 83       	st	Z, r24
    168a:	8b 81       	ldd	r24, Y+3	; 0x03
    168c:	9c 81       	ldd	r25, Y+4	; 0x04
    168e:	01 97       	sbiw	r24, 0x01	; 1
    1690:	9c 83       	std	Y+4, r25	; 0x04
    1692:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x80;// SREG: enable interrupts
    1694:	eb 81       	ldd	r30, Y+3	; 0x03
    1696:	fc 81       	ldd	r31, Y+4	; 0x04
    1698:	80 e8       	ldi	r24, 0x80	; 128
    169a:	80 83       	st	Z, r24
    169c:	8b 81       	ldd	r24, Y+3	; 0x03
    169e:	9c 81       	ldd	r25, Y+4	; 0x04
    16a0:	01 97       	sbiw	r24, 0x01	; 1
    16a2:	9c 83       	std	Y+4, r25	; 0x04
    16a4:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x03;
    16a6:	eb 81       	ldd	r30, Y+3	; 0x03
    16a8:	fc 81       	ldd	r31, Y+4	; 0x04
    16aa:	83 e0       	ldi	r24, 0x03	; 3
    16ac:	80 83       	st	Z, r24
    16ae:	8b 81       	ldd	r24, Y+3	; 0x03
    16b0:	9c 81       	ldd	r25, Y+4	; 0x04
    16b2:	01 97       	sbiw	r24, 0x01	; 1
    16b4:	9c 83       	std	Y+4, r25	; 0x04
    16b6:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x04;
    16b8:	eb 81       	ldd	r30, Y+3	; 0x03
    16ba:	fc 81       	ldd	r31, Y+4	; 0x04
    16bc:	84 e0       	ldi	r24, 0x04	; 4
    16be:	80 83       	st	Z, r24
    16c0:	8b 81       	ldd	r24, Y+3	; 0x03
    16c2:	9c 81       	ldd	r25, Y+4	; 0x04
    16c4:	01 97       	sbiw	r24, 0x01	; 1
    16c6:	9c 83       	std	Y+4, r25	; 0x04
    16c8:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x05;
    16ca:	eb 81       	ldd	r30, Y+3	; 0x03
    16cc:	fc 81       	ldd	r31, Y+4	; 0x04
    16ce:	85 e0       	ldi	r24, 0x05	; 5
    16d0:	80 83       	st	Z, r24
    16d2:	8b 81       	ldd	r24, Y+3	; 0x03
    16d4:	9c 81       	ldd	r25, Y+4	; 0x04
    16d6:	01 97       	sbiw	r24, 0x01	; 1
    16d8:	9c 83       	std	Y+4, r25	; 0x04
    16da:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x06;
    16dc:	eb 81       	ldd	r30, Y+3	; 0x03
    16de:	fc 81       	ldd	r31, Y+4	; 0x04
    16e0:	86 e0       	ldi	r24, 0x06	; 6
    16e2:	80 83       	st	Z, r24
    16e4:	8b 81       	ldd	r24, Y+3	; 0x03
    16e6:	9c 81       	ldd	r25, Y+4	; 0x04
    16e8:	01 97       	sbiw	r24, 0x01	; 1
    16ea:	9c 83       	std	Y+4, r25	; 0x04
    16ec:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x07;
    16ee:	eb 81       	ldd	r30, Y+3	; 0x03
    16f0:	fc 81       	ldd	r31, Y+4	; 0x04
    16f2:	87 e0       	ldi	r24, 0x07	; 7
    16f4:	80 83       	st	Z, r24
    16f6:	8b 81       	ldd	r24, Y+3	; 0x03
    16f8:	9c 81       	ldd	r25, Y+4	; 0x04
    16fa:	01 97       	sbiw	r24, 0x01	; 1
    16fc:	9c 83       	std	Y+4, r25	; 0x04
    16fe:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x08;
    1700:	eb 81       	ldd	r30, Y+3	; 0x03
    1702:	fc 81       	ldd	r31, Y+4	; 0x04
    1704:	88 e0       	ldi	r24, 0x08	; 8
    1706:	80 83       	st	Z, r24
    1708:	8b 81       	ldd	r24, Y+3	; 0x03
    170a:	9c 81       	ldd	r25, Y+4	; 0x04
    170c:	01 97       	sbiw	r24, 0x01	; 1
    170e:	9c 83       	std	Y+4, r25	; 0x04
    1710:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x09;
    1712:	eb 81       	ldd	r30, Y+3	; 0x03
    1714:	fc 81       	ldd	r31, Y+4	; 0x04
    1716:	89 e0       	ldi	r24, 0x09	; 9
    1718:	80 83       	st	Z, r24
    171a:	8b 81       	ldd	r24, Y+3	; 0x03
    171c:	9c 81       	ldd	r25, Y+4	; 0x04
    171e:	01 97       	sbiw	r24, 0x01	; 1
    1720:	9c 83       	std	Y+4, r25	; 0x04
    1722:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x10;
    1724:	eb 81       	ldd	r30, Y+3	; 0x03
    1726:	fc 81       	ldd	r31, Y+4	; 0x04
    1728:	80 e1       	ldi	r24, 0x10	; 16
    172a:	80 83       	st	Z, r24
    172c:	8b 81       	ldd	r24, Y+3	; 0x03
    172e:	9c 81       	ldd	r25, Y+4	; 0x04
    1730:	01 97       	sbiw	r24, 0x01	; 1
    1732:	9c 83       	std	Y+4, r25	; 0x04
    1734:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x11;
    1736:	eb 81       	ldd	r30, Y+3	; 0x03
    1738:	fc 81       	ldd	r31, Y+4	; 0x04
    173a:	81 e1       	ldi	r24, 0x11	; 17
    173c:	80 83       	st	Z, r24
    173e:	8b 81       	ldd	r24, Y+3	; 0x03
    1740:	9c 81       	ldd	r25, Y+4	; 0x04
    1742:	01 97       	sbiw	r24, 0x01	; 1
    1744:	9c 83       	std	Y+4, r25	; 0x04
    1746:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x12;
    1748:	eb 81       	ldd	r30, Y+3	; 0x03
    174a:	fc 81       	ldd	r31, Y+4	; 0x04
    174c:	82 e1       	ldi	r24, 0x12	; 18
    174e:	80 83       	st	Z, r24
    1750:	8b 81       	ldd	r24, Y+3	; 0x03
    1752:	9c 81       	ldd	r25, Y+4	; 0x04
    1754:	01 97       	sbiw	r24, 0x01	; 1
    1756:	9c 83       	std	Y+4, r25	; 0x04
    1758:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x13;
    175a:	eb 81       	ldd	r30, Y+3	; 0x03
    175c:	fc 81       	ldd	r31, Y+4	; 0x04
    175e:	83 e1       	ldi	r24, 0x13	; 19
    1760:	80 83       	st	Z, r24
    1762:	8b 81       	ldd	r24, Y+3	; 0x03
    1764:	9c 81       	ldd	r25, Y+4	; 0x04
    1766:	01 97       	sbiw	r24, 0x01	; 1
    1768:	9c 83       	std	Y+4, r25	; 0x04
    176a:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x14;
    176c:	eb 81       	ldd	r30, Y+3	; 0x03
    176e:	fc 81       	ldd	r31, Y+4	; 0x04
    1770:	84 e1       	ldi	r24, 0x14	; 20
    1772:	80 83       	st	Z, r24
    1774:	8b 81       	ldd	r24, Y+3	; 0x03
    1776:	9c 81       	ldd	r25, Y+4	; 0x04
    1778:	01 97       	sbiw	r24, 0x01	; 1
    177a:	9c 83       	std	Y+4, r25	; 0x04
    177c:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x15;
    177e:	eb 81       	ldd	r30, Y+3	; 0x03
    1780:	fc 81       	ldd	r31, Y+4	; 0x04
    1782:	85 e1       	ldi	r24, 0x15	; 21
    1784:	80 83       	st	Z, r24
    1786:	8b 81       	ldd	r24, Y+3	; 0x03
    1788:	9c 81       	ldd	r25, Y+4	; 0x04
    178a:	01 97       	sbiw	r24, 0x01	; 1
    178c:	9c 83       	std	Y+4, r25	; 0x04
    178e:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x16;
    1790:	eb 81       	ldd	r30, Y+3	; 0x03
    1792:	fc 81       	ldd	r31, Y+4	; 0x04
    1794:	86 e1       	ldi	r24, 0x16	; 22
    1796:	80 83       	st	Z, r24
    1798:	8b 81       	ldd	r24, Y+3	; 0x03
    179a:	9c 81       	ldd	r25, Y+4	; 0x04
    179c:	01 97       	sbiw	r24, 0x01	; 1
    179e:	9c 83       	std	Y+4, r25	; 0x04
    17a0:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x17;
    17a2:	eb 81       	ldd	r30, Y+3	; 0x03
    17a4:	fc 81       	ldd	r31, Y+4	; 0x04
    17a6:	87 e1       	ldi	r24, 0x17	; 23
    17a8:	80 83       	st	Z, r24
    17aa:	8b 81       	ldd	r24, Y+3	; 0x03
    17ac:	9c 81       	ldd	r25, Y+4	; 0x04
    17ae:	01 97       	sbiw	r24, 0x01	; 1
    17b0:	9c 83       	std	Y+4, r25	; 0x04
    17b2:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x18;
    17b4:	eb 81       	ldd	r30, Y+3	; 0x03
    17b6:	fc 81       	ldd	r31, Y+4	; 0x04
    17b8:	88 e1       	ldi	r24, 0x18	; 24
    17ba:	80 83       	st	Z, r24
    17bc:	8b 81       	ldd	r24, Y+3	; 0x03
    17be:	9c 81       	ldd	r25, Y+4	; 0x04
    17c0:	01 97       	sbiw	r24, 0x01	; 1
    17c2:	9c 83       	std	Y+4, r25	; 0x04
    17c4:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x19;
    17c6:	eb 81       	ldd	r30, Y+3	; 0x03
    17c8:	fc 81       	ldd	r31, Y+4	; 0x04
    17ca:	89 e1       	ldi	r24, 0x19	; 25
    17cc:	80 83       	st	Z, r24
    17ce:	8b 81       	ldd	r24, Y+3	; 0x03
    17d0:	9c 81       	ldd	r25, Y+4	; 0x04
    17d2:	01 97       	sbiw	r24, 0x01	; 1
    17d4:	9c 83       	std	Y+4, r25	; 0x04
    17d6:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x20;
    17d8:	eb 81       	ldd	r30, Y+3	; 0x03
    17da:	fc 81       	ldd	r31, Y+4	; 0x04
    17dc:	80 e2       	ldi	r24, 0x20	; 32
    17de:	80 83       	st	Z, r24
    17e0:	8b 81       	ldd	r24, Y+3	; 0x03
    17e2:	9c 81       	ldd	r25, Y+4	; 0x04
    17e4:	01 97       	sbiw	r24, 0x01	; 1
    17e6:	9c 83       	std	Y+4, r25	; 0x04
    17e8:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x21;
    17ea:	eb 81       	ldd	r30, Y+3	; 0x03
    17ec:	fc 81       	ldd	r31, Y+4	; 0x04
    17ee:	81 e2       	ldi	r24, 0x21	; 33
    17f0:	80 83       	st	Z, r24
    17f2:	8b 81       	ldd	r24, Y+3	; 0x03
    17f4:	9c 81       	ldd	r25, Y+4	; 0x04
    17f6:	01 97       	sbiw	r24, 0x01	; 1
    17f8:	9c 83       	std	Y+4, r25	; 0x04
    17fa:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x22;
    17fc:	eb 81       	ldd	r30, Y+3	; 0x03
    17fe:	fc 81       	ldd	r31, Y+4	; 0x04
    1800:	82 e2       	ldi	r24, 0x22	; 34
    1802:	80 83       	st	Z, r24
    1804:	8b 81       	ldd	r24, Y+3	; 0x03
    1806:	9c 81       	ldd	r25, Y+4	; 0x04
    1808:	01 97       	sbiw	r24, 0x01	; 1
    180a:	9c 83       	std	Y+4, r25	; 0x04
    180c:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x23;
    180e:	eb 81       	ldd	r30, Y+3	; 0x03
    1810:	fc 81       	ldd	r31, Y+4	; 0x04
    1812:	83 e2       	ldi	r24, 0x23	; 35
    1814:	80 83       	st	Z, r24
    1816:	8b 81       	ldd	r24, Y+3	; 0x03
    1818:	9c 81       	ldd	r25, Y+4	; 0x04
    181a:	01 97       	sbiw	r24, 0x01	; 1
    181c:	9c 83       	std	Y+4, r25	; 0x04
    181e:	8b 83       	std	Y+3, r24	; 0x03

    tmp = (unsigned short)arg;
    1820:	89 85       	ldd	r24, Y+9	; 0x09
    1822:	9a 85       	ldd	r25, Y+10	; 0x0a
    1824:	9a 83       	std	Y+2, r25	; 0x02
    1826:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (stack_t)(tmp&(unsigned short)0x00ff); // r24 LSByte of arg
    1828:	89 81       	ldd	r24, Y+1	; 0x01
    182a:	eb 81       	ldd	r30, Y+3	; 0x03
    182c:	fc 81       	ldd	r31, Y+4	; 0x04
    182e:	80 83       	st	Z, r24
    1830:	8b 81       	ldd	r24, Y+3	; 0x03
    1832:	9c 81       	ldd	r25, Y+4	; 0x04
    1834:	01 97       	sbiw	r24, 0x01	; 1
    1836:	9c 83       	std	Y+4, r25	; 0x04
    1838:	8b 83       	std	Y+3, r24	; 0x03
    tmp>>=8;
    183a:	89 81       	ldd	r24, Y+1	; 0x01
    183c:	9a 81       	ldd	r25, Y+2	; 0x02
    183e:	89 2f       	mov	r24, r25
    1840:	99 27       	eor	r25, r25
    1842:	9a 83       	std	Y+2, r25	; 0x02
    1844:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (stack_t)(tmp&(unsigned short)0x00ff); // r25 MSByte of arg
    1846:	89 81       	ldd	r24, Y+1	; 0x01
    1848:	eb 81       	ldd	r30, Y+3	; 0x03
    184a:	fc 81       	ldd	r31, Y+4	; 0x04
    184c:	80 83       	st	Z, r24
    184e:	8b 81       	ldd	r24, Y+3	; 0x03
    1850:	9c 81       	ldd	r25, Y+4	; 0x04
    1852:	01 97       	sbiw	r24, 0x01	; 1
    1854:	9c 83       	std	Y+4, r25	; 0x04
    1856:	8b 83       	std	Y+3, r24	; 0x03

    *tos-- = 0x26;
    1858:	eb 81       	ldd	r30, Y+3	; 0x03
    185a:	fc 81       	ldd	r31, Y+4	; 0x04
    185c:	86 e2       	ldi	r24, 0x26	; 38
    185e:	80 83       	st	Z, r24
    1860:	8b 81       	ldd	r24, Y+3	; 0x03
    1862:	9c 81       	ldd	r25, Y+4	; 0x04
    1864:	01 97       	sbiw	r24, 0x01	; 1
    1866:	9c 83       	std	Y+4, r25	; 0x04
    1868:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x27;
    186a:	eb 81       	ldd	r30, Y+3	; 0x03
    186c:	fc 81       	ldd	r31, Y+4	; 0x04
    186e:	87 e2       	ldi	r24, 0x27	; 39
    1870:	80 83       	st	Z, r24
    1872:	8b 81       	ldd	r24, Y+3	; 0x03
    1874:	9c 81       	ldd	r25, Y+4	; 0x04
    1876:	01 97       	sbiw	r24, 0x01	; 1
    1878:	9c 83       	std	Y+4, r25	; 0x04
    187a:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x28;
    187c:	eb 81       	ldd	r30, Y+3	; 0x03
    187e:	fc 81       	ldd	r31, Y+4	; 0x04
    1880:	88 e2       	ldi	r24, 0x28	; 40
    1882:	80 83       	st	Z, r24
    1884:	8b 81       	ldd	r24, Y+3	; 0x03
    1886:	9c 81       	ldd	r25, Y+4	; 0x04
    1888:	01 97       	sbiw	r24, 0x01	; 1
    188a:	9c 83       	std	Y+4, r25	; 0x04
    188c:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x29;
    188e:	eb 81       	ldd	r30, Y+3	; 0x03
    1890:	fc 81       	ldd	r31, Y+4	; 0x04
    1892:	89 e2       	ldi	r24, 0x29	; 41
    1894:	80 83       	st	Z, r24
    1896:	8b 81       	ldd	r24, Y+3	; 0x03
    1898:	9c 81       	ldd	r25, Y+4	; 0x04
    189a:	01 97       	sbiw	r24, 0x01	; 1
    189c:	9c 83       	std	Y+4, r25	; 0x04
    189e:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x30;
    18a0:	eb 81       	ldd	r30, Y+3	; 0x03
    18a2:	fc 81       	ldd	r31, Y+4	; 0x04
    18a4:	80 e3       	ldi	r24, 0x30	; 48
    18a6:	80 83       	st	Z, r24
    18a8:	8b 81       	ldd	r24, Y+3	; 0x03
    18aa:	9c 81       	ldd	r25, Y+4	; 0x04
    18ac:	01 97       	sbiw	r24, 0x01	; 1
    18ae:	9c 83       	std	Y+4, r25	; 0x04
    18b0:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x31;
    18b2:	eb 81       	ldd	r30, Y+3	; 0x03
    18b4:	fc 81       	ldd	r31, Y+4	; 0x04
    18b6:	81 e3       	ldi	r24, 0x31	; 49
    18b8:	80 83       	st	Z, r24
    18ba:	8b 81       	ldd	r24, Y+3	; 0x03
    18bc:	9c 81       	ldd	r25, Y+4	; 0x04
    18be:	01 97       	sbiw	r24, 0x01	; 1
    18c0:	9c 83       	std	Y+4, r25	; 0x04
    18c2:	8b 83       	std	Y+3, r24	; 0x03
#ifdef RAMPZ
    *tos-- = 0xff;
#endif
    return tos;
    18c4:	8b 81       	ldd	r24, Y+3	; 0x03
    18c6:	9c 81       	ldd	r25, Y+4	; 0x04
}
    18c8:	2a 96       	adiw	r28, 0x0a	; 10
    18ca:	0f b6       	in	r0, 0x3f	; 63
    18cc:	f8 94       	cli
    18ce:	de bf       	out	0x3e, r29	; 62
    18d0:	0f be       	out	0x3f, r0	; 63
    18d2:	cd bf       	out	0x3d, r28	; 61
    18d4:	cf 91       	pop	r28
    18d6:	df 91       	pop	r29
    18d8:	08 95       	ret

000018da <index_search>:
*                           http://www.0chan.ru/r/res/9996.html                          *
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
prio_t index_search(index_t index)
{
    18da:	df 93       	push	r29
    18dc:	cf 93       	push	r28
    18de:	00 d0       	rcall	.+0      	; 0x18e0 <index_search+0x6>
    18e0:	00 d0       	rcall	.+0      	; 0x18e2 <index_search+0x8>
    18e2:	00 d0       	rcall	.+0      	; 0x18e4 <index_search+0xa>
    18e4:	cd b7       	in	r28, 0x3d	; 61
    18e6:	de b7       	in	r29, 0x3e	; 62
    18e8:	8e 83       	std	Y+6, r24	; 0x06
    prio_t prio = (prio_t)0;
    18ea:	1d 82       	std	Y+5, r1	; 0x05
        но, т.к. BITS_IN_INDEX_T фиксировано для данной конфигурации,
        то получается время выполнения - O(1), ВСЕГДА.

        И да, предсказуемость + переносимость > быстродействие.
        */
    index_t upper = ~(index_t)0, lower = ~(index_t)0, middle;
    18ec:	8f ef       	ldi	r24, 0xFF	; 255
    18ee:	8c 83       	std	Y+4, r24	; 0x04
    18f0:	8f ef       	ldi	r24, 0xFF	; 255
    18f2:	8b 83       	std	Y+3, r24	; 0x03
    prio_t step = (prio_t)BITS_IN_INDEX_T;
    18f4:	88 e0       	ldi	r24, 0x08	; 8
    18f6:	89 83       	std	Y+1, r24	; 0x01
    18f8:	22 c0       	rjmp	.+68     	; 0x193e <index_search+0x64>
    while( step )
    {
        step>>=1; // делим шаг пополам
    18fa:	89 81       	ldd	r24, Y+1	; 0x01
    18fc:	86 95       	lsr	r24
    18fe:	89 83       	std	Y+1, r24	; 0x01
        middle = lower>>step;
    1900:	8b 81       	ldd	r24, Y+3	; 0x03
    1902:	28 2f       	mov	r18, r24
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	89 81       	ldd	r24, Y+1	; 0x01
    1908:	88 2f       	mov	r24, r24
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	a9 01       	movw	r20, r18
    190e:	02 c0       	rjmp	.+4      	; 0x1914 <index_search+0x3a>
    1910:	55 95       	asr	r21
    1912:	47 95       	ror	r20
    1914:	8a 95       	dec	r24
    1916:	e2 f7       	brpl	.-8      	; 0x1910 <index_search+0x36>
    1918:	ca 01       	movw	r24, r20
    191a:	8a 83       	std	Y+2, r24	; 0x02
        if( index & upper & middle )
    191c:	9e 81       	ldd	r25, Y+6	; 0x06
    191e:	8c 81       	ldd	r24, Y+4	; 0x04
    1920:	98 23       	and	r25, r24
    1922:	8a 81       	ldd	r24, Y+2	; 0x02
    1924:	89 23       	and	r24, r25
    1926:	88 23       	and	r24, r24
    1928:	19 f0       	breq	.+6      	; 0x1930 <index_search+0x56>
        {
            lower = middle;
    192a:	8a 81       	ldd	r24, Y+2	; 0x02
    192c:	8b 83       	std	Y+3, r24	; 0x03
    192e:	07 c0       	rjmp	.+14     	; 0x193e <index_search+0x64>
        }
        else
        {
            upper = ~middle;
    1930:	8a 81       	ldd	r24, Y+2	; 0x02
    1932:	80 95       	com	r24
    1934:	8c 83       	std	Y+4, r24	; 0x04
            prio += step;
    1936:	9d 81       	ldd	r25, Y+5	; 0x05
    1938:	89 81       	ldd	r24, Y+1	; 0x01
    193a:	89 0f       	add	r24, r25
    193c:	8d 83       	std	Y+5, r24	; 0x05

        И да, предсказуемость + переносимость > быстродействие.
        */
    index_t upper = ~(index_t)0, lower = ~(index_t)0, middle;
    prio_t step = (prio_t)BITS_IN_INDEX_T;
    while( step )
    193e:	89 81       	ldd	r24, Y+1	; 0x01
    1940:	88 23       	and	r24, r24
    1942:	d9 f6       	brne	.-74     	; 0x18fa <index_search+0x20>
        if ( mask & index )break;
        prio++;
        mask<<=1;
    }
#endif
    return prio;
    1944:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1946:	26 96       	adiw	r28, 0x06	; 6
    1948:	0f b6       	in	r0, 0x3f	; 63
    194a:	f8 94       	cli
    194c:	de bf       	out	0x3e, r29	; 62
    194e:	0f be       	out	0x3f, r0	; 63
    1950:	cd bf       	out	0x3d, r28	; 61
    1952:	cf 91       	pop	r28
    1954:	df 91       	pop	r29
    1956:	08 95       	ret

00001958 <_ipc_wait>:
*                           http://www.0chan.ru/r/res/9996.html                          *
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
void _ipc_wait( void * ipc_pointer )
{
    1958:	df 93       	push	r29
    195a:	cf 93       	push	r28
    195c:	00 d0       	rcall	.+0      	; 0x195e <_ipc_wait+0x6>
    195e:	00 d0       	rcall	.+0      	; 0x1960 <_ipc_wait+0x8>
    1960:	cd b7       	in	r28, 0x3d	; 61
    1962:	de b7       	in	r29, 0x3e	; 62
    1964:	9c 83       	std	Y+4, r25	; 0x04
    1966:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc;
    proc = current_proc();
    1968:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <current_proc>
    196c:	9a 83       	std	Y+2, r25	; 0x02
    196e:	89 83       	std	Y+1, r24	; 0x01
    SPIN_LOCK( proc );
    1970:	89 81       	ldd	r24, Y+1	; 0x01
    1972:	9a 81       	ldd	r25, Y+2	; 0x02
    1974:	83 96       	adiw	r24, 0x23	; 35
    1976:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    // Останавливаем процесс
    proc->flags |= PROC_FLG_IPCW;
    197a:	e9 81       	ldd	r30, Y+1	; 0x01
    197c:	fa 81       	ldd	r31, Y+2	; 0x02
    197e:	87 81       	ldd	r24, Z+7	; 0x07
    1980:	90 85       	ldd	r25, Z+8	; 0x08
    1982:	80 64       	ori	r24, 0x40	; 64
    1984:	e9 81       	ldd	r30, Y+1	; 0x01
    1986:	fa 81       	ldd	r31, Y+2	; 0x02
    1988:	90 87       	std	Z+8, r25	; 0x08
    198a:	87 83       	std	Z+7, r24	; 0x07
    proc->buf = ipc_pointer;
    198c:	e9 81       	ldd	r30, Y+1	; 0x01
    198e:	fa 81       	ldd	r31, Y+2	; 0x02
    1990:	8b 81       	ldd	r24, Y+3	; 0x03
    1992:	9c 81       	ldd	r25, Y+4	; 0x04
    1994:	90 a3       	std	Z+32, r25	; 0x20
    1996:	87 8f       	std	Z+31, r24	; 0x1f
    _proc_stop_( proc );
    1998:	89 81       	ldd	r24, Y+1	; 0x01
    199a:	9a 81       	ldd	r25, Y+2	; 0x02
    199c:	0e 94 df 13 	call	0x27be	; 0x27be <_proc_stop_>
    RESCHED_PROC( proc );
    19a0:	e9 81       	ldd	r30, Y+1	; 0x01
    19a2:	fa 81       	ldd	r31, Y+2	; 0x02
    19a4:	81 a1       	ldd	r24, Z+33	; 0x21
    19a6:	0e 94 b4 01 	call	0x368	; 0x368 <resched>

    SPIN_UNLOCK( proc );
    19aa:	89 81       	ldd	r24, Y+1	; 0x01
    19ac:	9a 81       	ldd	r25, Y+2	; 0x02
    19ae:	83 96       	adiw	r24, 0x23	; 35
    19b0:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
}
    19b4:	0f 90       	pop	r0
    19b6:	0f 90       	pop	r0
    19b8:	0f 90       	pop	r0
    19ba:	0f 90       	pop	r0
    19bc:	cf 91       	pop	r28
    19be:	df 91       	pop	r29
    19c0:	08 95       	ret

000019c2 <ipc_send_isr>:

bool_t ipc_send_isr( proc_t * proc, ipc_data_t data )
{
    19c2:	df 93       	push	r29
    19c4:	cf 93       	push	r28
    19c6:	00 d0       	rcall	.+0      	; 0x19c8 <ipc_send_isr+0x6>
    19c8:	00 d0       	rcall	.+0      	; 0x19ca <ipc_send_isr+0x8>
    19ca:	0f 92       	push	r0
    19cc:	cd b7       	in	r28, 0x3d	; 61
    19ce:	de b7       	in	r29, 0x3e	; 62
    19d0:	9b 83       	std	Y+3, r25	; 0x03
    19d2:	8a 83       	std	Y+2, r24	; 0x02
    19d4:	7d 83       	std	Y+5, r23	; 0x05
    19d6:	6c 83       	std	Y+4, r22	; 0x04
    bool_t ret = (bool_t)0;
    19d8:	19 82       	std	Y+1, r1	; 0x01
    SPIN_LOCK( proc );
    19da:	8a 81       	ldd	r24, Y+2	; 0x02
    19dc:	9b 81       	ldd	r25, Y+3	; 0x03
    19de:	83 96       	adiw	r24, 0x23	; 35
    19e0:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    if( proc->flags & PROC_FLG_IPCW )
    19e4:	ea 81       	ldd	r30, Y+2	; 0x02
    19e6:	fb 81       	ldd	r31, Y+3	; 0x03
    19e8:	87 81       	ldd	r24, Z+7	; 0x07
    19ea:	90 85       	ldd	r25, Z+8	; 0x08
    19ec:	80 74       	andi	r24, 0x40	; 64
    19ee:	90 70       	andi	r25, 0x00	; 0
    19f0:	00 97       	sbiw	r24, 0x00	; 0
    19f2:	91 f1       	breq	.+100    	; 0x1a58 <ipc_send_isr+0x96>
    {
        proc->flags &= ~PROC_FLG_IPCW;
    19f4:	ea 81       	ldd	r30, Y+2	; 0x02
    19f6:	fb 81       	ldd	r31, Y+3	; 0x03
    19f8:	87 81       	ldd	r24, Z+7	; 0x07
    19fa:	90 85       	ldd	r25, Z+8	; 0x08
    19fc:	8f 7b       	andi	r24, 0xBF	; 191
    19fe:	ea 81       	ldd	r30, Y+2	; 0x02
    1a00:	fb 81       	ldd	r31, Y+3	; 0x03
    1a02:	90 87       	std	Z+8, r25	; 0x08
    1a04:	87 83       	std	Z+7, r24	; 0x07
        ///Обработка флага останова целевого процесса
        if(  PROC_PRE_STOP_TEST(proc)  )
    1a06:	ea 81       	ldd	r30, Y+2	; 0x02
    1a08:	fb 81       	ldd	r31, Y+3	; 0x03
    1a0a:	87 81       	ldd	r24, Z+7	; 0x07
    1a0c:	90 85       	ldd	r25, Z+8	; 0x08
    1a0e:	80 78       	andi	r24, 0x80	; 128
    1a10:	90 70       	andi	r25, 0x00	; 0
    1a12:	00 97       	sbiw	r24, 0x00	; 0
    1a14:	91 f0       	breq	.+36     	; 0x1a3a <ipc_send_isr+0x78>
    1a16:	ea 81       	ldd	r30, Y+2	; 0x02
    1a18:	fb 81       	ldd	r31, Y+3	; 0x03
    1a1a:	87 81       	ldd	r24, Z+7	; 0x07
    1a1c:	90 85       	ldd	r25, Z+8	; 0x08
    1a1e:	8c 70       	andi	r24, 0x0C	; 12
    1a20:	90 70       	andi	r25, 0x00	; 0
    1a22:	00 97       	sbiw	r24, 0x00	; 0
    1a24:	51 f4       	brne	.+20     	; 0x1a3a <ipc_send_isr+0x78>
            Если был запрошен останов целевого процесса,
            и целевой процесс не удерживает общие ресурсы,
            то мы не будем возобновлять его работу
            и передавать ему информацию.
            */
            proc->flags &= ~PROC_FLG_PRE_STOP_MASK;
    1a26:	ea 81       	ldd	r30, Y+2	; 0x02
    1a28:	fb 81       	ldd	r31, Y+3	; 0x03
    1a2a:	87 81       	ldd	r24, Z+7	; 0x07
    1a2c:	90 85       	ldd	r25, Z+8	; 0x08
    1a2e:	8d 77       	andi	r24, 0x7D	; 125
    1a30:	ea 81       	ldd	r30, Y+2	; 0x02
    1a32:	fb 81       	ldd	r31, Y+3	; 0x03
    1a34:	90 87       	std	Z+8, r25	; 0x08
    1a36:	87 83       	std	Z+7, r24	; 0x07
    1a38:	0f c0       	rjmp	.+30     	; 0x1a58 <ipc_send_isr+0x96>
            goto end;
        }
        ret = (bool_t)1; // информация будет передана
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	89 83       	std	Y+1, r24	; 0x01
        *(ipc_data_t *)proc->buf = data;
    1a3e:	ea 81       	ldd	r30, Y+2	; 0x02
    1a40:	fb 81       	ldd	r31, Y+3	; 0x03
    1a42:	87 8d       	ldd	r24, Z+31	; 0x1f
    1a44:	90 a1       	ldd	r25, Z+32	; 0x20
    1a46:	fc 01       	movw	r30, r24
    1a48:	8c 81       	ldd	r24, Y+4	; 0x04
    1a4a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a4c:	91 83       	std	Z+1, r25	; 0x01
    1a4e:	80 83       	st	Z, r24
        _proc_run( proc );
    1a50:	8a 81       	ldd	r24, Y+2	; 0x02
    1a52:	9b 81       	ldd	r25, Y+3	; 0x03
    1a54:	0e 94 16 13 	call	0x262c	; 0x262c <_proc_run>
    }
end:
    SPIN_UNLOCK( proc );
    1a58:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5a:	9b 81       	ldd	r25, Y+3	; 0x03
    1a5c:	83 96       	adiw	r24, 0x23	; 35
    1a5e:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
    return ret;
    1a62:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a64:	0f 90       	pop	r0
    1a66:	0f 90       	pop	r0
    1a68:	0f 90       	pop	r0
    1a6a:	0f 90       	pop	r0
    1a6c:	0f 90       	pop	r0
    1a6e:	cf 91       	pop	r28
    1a70:	df 91       	pop	r29
    1a72:	08 95       	ret

00001a74 <_ipc_exchange>:

bool_t _ipc_exchange( proc_t * proc, ipc_data_t send, ipc_data_t * receive )
{
    1a74:	df 93       	push	r29
    1a76:	cf 93       	push	r28
    1a78:	cd b7       	in	r28, 0x3d	; 61
    1a7a:	de b7       	in	r29, 0x3e	; 62
    1a7c:	27 97       	sbiw	r28, 0x07	; 7
    1a7e:	0f b6       	in	r0, 0x3f	; 63
    1a80:	f8 94       	cli
    1a82:	de bf       	out	0x3e, r29	; 62
    1a84:	0f be       	out	0x3f, r0	; 63
    1a86:	cd bf       	out	0x3d, r28	; 61
    1a88:	9b 83       	std	Y+3, r25	; 0x03
    1a8a:	8a 83       	std	Y+2, r24	; 0x02
    1a8c:	7d 83       	std	Y+5, r23	; 0x05
    1a8e:	6c 83       	std	Y+4, r22	; 0x04
    1a90:	5f 83       	std	Y+7, r21	; 0x07
    1a92:	4e 83       	std	Y+6, r20	; 0x06
    bool_t ret = (bool_t)0;
    1a94:	19 82       	std	Y+1, r1	; 0x01
    SPIN_LOCK( proc );
    1a96:	8a 81       	ldd	r24, Y+2	; 0x02
    1a98:	9b 81       	ldd	r25, Y+3	; 0x03
    1a9a:	83 96       	adiw	r24, 0x23	; 35
    1a9c:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    if( proc->flags & PROC_FLG_IPCW )
    1aa0:	ea 81       	ldd	r30, Y+2	; 0x02
    1aa2:	fb 81       	ldd	r31, Y+3	; 0x03
    1aa4:	87 81       	ldd	r24, Z+7	; 0x07
    1aa6:	90 85       	ldd	r25, Z+8	; 0x08
    1aa8:	80 74       	andi	r24, 0x40	; 64
    1aaa:	90 70       	andi	r25, 0x00	; 0
    1aac:	00 97       	sbiw	r24, 0x00	; 0
    1aae:	b1 f1       	breq	.+108    	; 0x1b1c <_ipc_exchange+0xa8>
    {
        proc->flags &= ~PROC_FLG_IPCW;
    1ab0:	ea 81       	ldd	r30, Y+2	; 0x02
    1ab2:	fb 81       	ldd	r31, Y+3	; 0x03
    1ab4:	87 81       	ldd	r24, Z+7	; 0x07
    1ab6:	90 85       	ldd	r25, Z+8	; 0x08
    1ab8:	8f 7b       	andi	r24, 0xBF	; 191
    1aba:	ea 81       	ldd	r30, Y+2	; 0x02
    1abc:	fb 81       	ldd	r31, Y+3	; 0x03
    1abe:	90 87       	std	Z+8, r25	; 0x08
    1ac0:	87 83       	std	Z+7, r24	; 0x07
        ///Обработка флага останова целевого процесса
        if(  PROC_PRE_STOP_TEST(proc)  )
    1ac2:	ea 81       	ldd	r30, Y+2	; 0x02
    1ac4:	fb 81       	ldd	r31, Y+3	; 0x03
    1ac6:	87 81       	ldd	r24, Z+7	; 0x07
    1ac8:	90 85       	ldd	r25, Z+8	; 0x08
    1aca:	80 78       	andi	r24, 0x80	; 128
    1acc:	90 70       	andi	r25, 0x00	; 0
    1ace:	00 97       	sbiw	r24, 0x00	; 0
    1ad0:	91 f0       	breq	.+36     	; 0x1af6 <_ipc_exchange+0x82>
    1ad2:	ea 81       	ldd	r30, Y+2	; 0x02
    1ad4:	fb 81       	ldd	r31, Y+3	; 0x03
    1ad6:	87 81       	ldd	r24, Z+7	; 0x07
    1ad8:	90 85       	ldd	r25, Z+8	; 0x08
    1ada:	8c 70       	andi	r24, 0x0C	; 12
    1adc:	90 70       	andi	r25, 0x00	; 0
    1ade:	00 97       	sbiw	r24, 0x00	; 0
    1ae0:	51 f4       	brne	.+20     	; 0x1af6 <_ipc_exchange+0x82>
            Если был запрошен останов целевого процесса,
            и целевой процесс не удерживает общие ресурсы,
            то мы не будем возобновлять его работу
            и передавать ему информацию.
            */
            proc->flags &= ~PROC_FLG_PRE_STOP_MASK;
    1ae2:	ea 81       	ldd	r30, Y+2	; 0x02
    1ae4:	fb 81       	ldd	r31, Y+3	; 0x03
    1ae6:	87 81       	ldd	r24, Z+7	; 0x07
    1ae8:	90 85       	ldd	r25, Z+8	; 0x08
    1aea:	8d 77       	andi	r24, 0x7D	; 125
    1aec:	ea 81       	ldd	r30, Y+2	; 0x02
    1aee:	fb 81       	ldd	r31, Y+3	; 0x03
    1af0:	90 87       	std	Z+8, r25	; 0x08
    1af2:	87 83       	std	Z+7, r24	; 0x07
    1af4:	13 c0       	rjmp	.+38     	; 0x1b1c <_ipc_exchange+0xa8>
            goto end;
        }
        ret = (bool_t)1; // информация будет передана
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	89 83       	std	Y+1, r24	; 0x01
        *(ipc_data_t *)proc->buf = send;
    1afa:	ea 81       	ldd	r30, Y+2	; 0x02
    1afc:	fb 81       	ldd	r31, Y+3	; 0x03
    1afe:	87 8d       	ldd	r24, Z+31	; 0x1f
    1b00:	90 a1       	ldd	r25, Z+32	; 0x20
    1b02:	fc 01       	movw	r30, r24
    1b04:	8c 81       	ldd	r24, Y+4	; 0x04
    1b06:	9d 81       	ldd	r25, Y+5	; 0x05
    1b08:	91 83       	std	Z+1, r25	; 0x01
    1b0a:	80 83       	st	Z, r24
        _ipc_wait( receive ); // Готовимся к приему данных!
    1b0c:	8e 81       	ldd	r24, Y+6	; 0x06
    1b0e:	9f 81       	ldd	r25, Y+7	; 0x07
    1b10:	0e 94 ac 0c 	call	0x1958	; 0x1958 <_ipc_wait>
        _proc_run( proc );   // И только после этого запускаем процесс-адресат!
    1b14:	8a 81       	ldd	r24, Y+2	; 0x02
    1b16:	9b 81       	ldd	r25, Y+3	; 0x03
    1b18:	0e 94 16 13 	call	0x262c	; 0x262c <_proc_run>
    }
end:
    SPIN_UNLOCK( proc );
    1b1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1e:	9b 81       	ldd	r25, Y+3	; 0x03
    1b20:	83 96       	adiw	r24, 0x23	; 35
    1b22:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
    return ret;
    1b26:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b28:	27 96       	adiw	r28, 0x07	; 7
    1b2a:	0f b6       	in	r0, 0x3f	; 63
    1b2c:	f8 94       	cli
    1b2e:	de bf       	out	0x3e, r29	; 62
    1b30:	0f be       	out	0x3f, r0	; 63
    1b32:	cd bf       	out	0x3d, r28	; 61
    1b34:	cf 91       	pop	r28
    1b36:	df 91       	pop	r29
    1b38:	08 95       	ret

00001b3a <item_init>:
*****************************************************************************************/
#include "../include/bugurt.h"
//Методы элемента 2-связного списка
//инициация элемента
void item_init(item_t *item)
{
    1b3a:	df 93       	push	r29
    1b3c:	cf 93       	push	r28
    1b3e:	00 d0       	rcall	.+0      	; 0x1b40 <item_init+0x6>
    1b40:	cd b7       	in	r28, 0x3d	; 61
    1b42:	de b7       	in	r29, 0x3e	; 62
    1b44:	9a 83       	std	Y+2, r25	; 0x02
    1b46:	89 83       	std	Y+1, r24	; 0x01
    item->prev = item;
    1b48:	e9 81       	ldd	r30, Y+1	; 0x01
    1b4a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b4c:	89 81       	ldd	r24, Y+1	; 0x01
    1b4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b50:	93 83       	std	Z+3, r25	; 0x03
    1b52:	82 83       	std	Z+2, r24	; 0x02
    item->next = item;
    1b54:	e9 81       	ldd	r30, Y+1	; 0x01
    1b56:	fa 81       	ldd	r31, Y+2	; 0x02
    1b58:	89 81       	ldd	r24, Y+1	; 0x01
    1b5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b5c:	91 83       	std	Z+1, r25	; 0x01
    1b5e:	80 83       	st	Z, r24
}
    1b60:	0f 90       	pop	r0
    1b62:	0f 90       	pop	r0
    1b64:	cf 91       	pop	r28
    1b66:	df 91       	pop	r29
    1b68:	08 95       	ret

00001b6a <item_insert>:
//Вставить элемент
void item_insert(item_t *item, item_t *head)
{
    1b6a:	df 93       	push	r29
    1b6c:	cf 93       	push	r28
    1b6e:	00 d0       	rcall	.+0      	; 0x1b70 <item_insert+0x6>
    1b70:	00 d0       	rcall	.+0      	; 0x1b72 <item_insert+0x8>
    1b72:	00 d0       	rcall	.+0      	; 0x1b74 <item_insert+0xa>
    1b74:	cd b7       	in	r28, 0x3d	; 61
    1b76:	de b7       	in	r29, 0x3e	; 62
    1b78:	9c 83       	std	Y+4, r25	; 0x04
    1b7a:	8b 83       	std	Y+3, r24	; 0x03
    1b7c:	7e 83       	std	Y+6, r23	; 0x06
    1b7e:	6d 83       	std	Y+5, r22	; 0x05
    // "хвост" списка
    item_t * tail;
    tail = head->prev;
    1b80:	ed 81       	ldd	r30, Y+5	; 0x05
    1b82:	fe 81       	ldd	r31, Y+6	; 0x06
    1b84:	82 81       	ldd	r24, Z+2	; 0x02
    1b86:	93 81       	ldd	r25, Z+3	; 0x03
    1b88:	9a 83       	std	Y+2, r25	; 0x02
    1b8a:	89 83       	std	Y+1, r24	; 0x01
    // Вставляем элемент между "головой" и "хвостом"
    item->prev = tail;
    1b8c:	eb 81       	ldd	r30, Y+3	; 0x03
    1b8e:	fc 81       	ldd	r31, Y+4	; 0x04
    1b90:	89 81       	ldd	r24, Y+1	; 0x01
    1b92:	9a 81       	ldd	r25, Y+2	; 0x02
    1b94:	93 83       	std	Z+3, r25	; 0x03
    1b96:	82 83       	std	Z+2, r24	; 0x02
    item->next = head;
    1b98:	eb 81       	ldd	r30, Y+3	; 0x03
    1b9a:	fc 81       	ldd	r31, Y+4	; 0x04
    1b9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1ba0:	91 83       	std	Z+1, r25	; 0x01
    1ba2:	80 83       	st	Z, r24

    head->prev = item;
    1ba4:	ed 81       	ldd	r30, Y+5	; 0x05
    1ba6:	fe 81       	ldd	r31, Y+6	; 0x06
    1ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    1baa:	9c 81       	ldd	r25, Y+4	; 0x04
    1bac:	93 83       	std	Z+3, r25	; 0x03
    1bae:	82 83       	std	Z+2, r24	; 0x02
    tail->next = item;
    1bb0:	e9 81       	ldd	r30, Y+1	; 0x01
    1bb2:	fa 81       	ldd	r31, Y+2	; 0x02
    1bb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb8:	91 83       	std	Z+1, r25	; 0x01
    1bba:	80 83       	st	Z, r24
}
    1bbc:	26 96       	adiw	r28, 0x06	; 6
    1bbe:	0f b6       	in	r0, 0x3f	; 63
    1bc0:	f8 94       	cli
    1bc2:	de bf       	out	0x3e, r29	; 62
    1bc4:	0f be       	out	0x3f, r0	; 63
    1bc6:	cd bf       	out	0x3d, r28	; 61
    1bc8:	cf 91       	pop	r28
    1bca:	df 91       	pop	r29
    1bcc:	08 95       	ret

00001bce <item_cut>:
//Вырезать элемент
void item_cut( item_t *item )
{
    1bce:	df 93       	push	r29
    1bd0:	cf 93       	push	r28
    1bd2:	00 d0       	rcall	.+0      	; 0x1bd4 <item_cut+0x6>
    1bd4:	00 d0       	rcall	.+0      	; 0x1bd6 <item_cut+0x8>
    1bd6:	00 d0       	rcall	.+0      	; 0x1bd8 <item_cut+0xa>
    1bd8:	cd b7       	in	r28, 0x3d	; 61
    1bda:	de b7       	in	r29, 0x3e	; 62
    1bdc:	9e 83       	std	Y+6, r25	; 0x06
    1bde:	8d 83       	std	Y+5, r24	; 0x05
    item_t * prev;
    item_t * next;
    prev = item->prev; //Предыдущий элемент
    1be0:	ed 81       	ldd	r30, Y+5	; 0x05
    1be2:	fe 81       	ldd	r31, Y+6	; 0x06
    1be4:	82 81       	ldd	r24, Z+2	; 0x02
    1be6:	93 81       	ldd	r25, Z+3	; 0x03
    1be8:	9c 83       	std	Y+4, r25	; 0x04
    1bea:	8b 83       	std	Y+3, r24	; 0x03
    next = item->next; //Следующий элемент
    1bec:	ed 81       	ldd	r30, Y+5	; 0x05
    1bee:	fe 81       	ldd	r31, Y+6	; 0x06
    1bf0:	80 81       	ld	r24, Z
    1bf2:	91 81       	ldd	r25, Z+1	; 0x01
    1bf4:	9a 83       	std	Y+2, r25	; 0x02
    1bf6:	89 83       	std	Y+1, r24	; 0x01

    next->prev = prev;
    1bf8:	e9 81       	ldd	r30, Y+1	; 0x01
    1bfa:	fa 81       	ldd	r31, Y+2	; 0x02
    1bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfe:	9c 81       	ldd	r25, Y+4	; 0x04
    1c00:	93 83       	std	Z+3, r25	; 0x03
    1c02:	82 83       	std	Z+2, r24	; 0x02
    prev->next = next;
    1c04:	eb 81       	ldd	r30, Y+3	; 0x03
    1c06:	fc 81       	ldd	r31, Y+4	; 0x04
    1c08:	89 81       	ldd	r24, Y+1	; 0x01
    1c0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c0c:	91 83       	std	Z+1, r25	; 0x01
    1c0e:	80 83       	st	Z, r24

    item->prev = item;
    1c10:	ed 81       	ldd	r30, Y+5	; 0x05
    1c12:	fe 81       	ldd	r31, Y+6	; 0x06
    1c14:	8d 81       	ldd	r24, Y+5	; 0x05
    1c16:	9e 81       	ldd	r25, Y+6	; 0x06
    1c18:	93 83       	std	Z+3, r25	; 0x03
    1c1a:	82 83       	std	Z+2, r24	; 0x02
    item->next = item;
    1c1c:	ed 81       	ldd	r30, Y+5	; 0x05
    1c1e:	fe 81       	ldd	r31, Y+6	; 0x06
    1c20:	8d 81       	ldd	r24, Y+5	; 0x05
    1c22:	9e 81       	ldd	r25, Y+6	; 0x06
    1c24:	91 83       	std	Z+1, r25	; 0x01
    1c26:	80 83       	st	Z, r24
}
    1c28:	26 96       	adiw	r28, 0x06	; 6
    1c2a:	0f b6       	in	r0, 0x3f	; 63
    1c2c:	f8 94       	cli
    1c2e:	de bf       	out	0x3e, r29	; 62
    1c30:	0f be       	out	0x3f, r0	; 63
    1c32:	cd bf       	out	0x3d, r28	; 61
    1c34:	cf 91       	pop	r28
    1c36:	df 91       	pop	r29
    1c38:	08 95       	ret

00001c3a <idle_main>:
*****************************************************************************************/
#include "../include/bugurt.h"
kernel_t kernel;// Ядро, оно одно на всю систему!!!

WEAK void idle_main(void * arg)
{
    1c3a:	df 93       	push	r29
    1c3c:	cf 93       	push	r28
    1c3e:	00 d0       	rcall	.+0      	; 0x1c40 <idle_main+0x6>
    1c40:	cd b7       	in	r28, 0x3d	; 61
    1c42:	de b7       	in	r29, 0x3e	; 62
    1c44:	9a 83       	std	Y+2, r25	; 0x02
    1c46:	89 83       	std	Y+1, r24	; 0x01
    1c48:	ff cf       	rjmp	.-2      	; 0x1c48 <idle_main+0xe>

00001c4a <kernel_init>:
    while(1);
}

void kernel_init(void)
{
    1c4a:	8f 92       	push	r8
    1c4c:	af 92       	push	r10
    1c4e:	bf 92       	push	r11
    1c50:	cf 92       	push	r12
    1c52:	ef 92       	push	r14
    1c54:	ff 92       	push	r15
    1c56:	0f 93       	push	r16
    1c58:	1f 93       	push	r17
    1c5a:	df 93       	push	r29
    1c5c:	cf 93       	push	r28
    1c5e:	0f 92       	push	r0
    1c60:	cd b7       	in	r28, 0x3d	; 61
    1c62:	de b7       	in	r29, 0x3e	; 62
#ifdef CONFIG_MP
    core_id_t i;

    spin_init( &kernel.stat_lock );
    1c64:	83 e9       	ldi	r24, 0x93	; 147
    1c66:	93 e0       	ldi	r25, 0x03	; 3
    1c68:	0e 94 0b 01 	call	0x216	; 0x216 <spin_init>
    spin_lock( &kernel.stat_lock );
    1c6c:	83 e9       	ldi	r24, 0x93	; 147
    1c6e:	93 e0       	ldi	r25, 0x03	; 3
    1c70:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    //Инициация собственно ядра
    for( i = (core_id_t)0; i<(core_id_t)MAX_CORES; i++ )
    1c74:	19 82       	std	Y+1, r1	; 0x01
    1c76:	76 c0       	rjmp	.+236    	; 0x1d64 <kernel_init+0x11a>
    {
        proc_init_isr(
    1c78:	89 81       	ldd	r24, Y+1	; 0x01
    1c7a:	28 2f       	mov	r18, r24
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	80 e3       	ldi	r24, 0x30	; 48
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	ac 01       	movw	r20, r24
    1c84:	24 9f       	mul	r18, r20
    1c86:	c0 01       	movw	r24, r0
    1c88:	25 9f       	mul	r18, r21
    1c8a:	90 0d       	add	r25, r0
    1c8c:	34 9f       	mul	r19, r20
    1c8e:	90 0d       	add	r25, r0
    1c90:	11 24       	eor	r1, r1
    1c92:	ac 01       	movw	r20, r24
    1c94:	4f 5c       	subi	r20, 0xCF	; 207
    1c96:	5c 4f       	sbci	r21, 0xFC	; 252
    1c98:	89 81       	ldd	r24, Y+1	; 0x01
    1c9a:	28 2f       	mov	r18, r24
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	02 c0       	rjmp	.+4      	; 0x1ca8 <kernel_init+0x5e>
    1ca4:	88 0f       	add	r24, r24
    1ca6:	99 1f       	adc	r25, r25
    1ca8:	2a 95       	dec	r18
    1caa:	e2 f7       	brpl	.-8      	; 0x1ca4 <kernel_init+0x5a>
    1cac:	0f 92       	push	r0
    1cae:	ed b7       	in	r30, 0x3d	; 61
    1cb0:	fe b7       	in	r31, 0x3e	; 62
    1cb2:	31 96       	adiw	r30, 0x01	; 1
    1cb4:	2d e1       	ldi	r18, 0x1D	; 29
    1cb6:	3e e0       	ldi	r19, 0x0E	; 14
    1cb8:	80 83       	st	Z, r24
    1cba:	ca 01       	movw	r24, r20
    1cbc:	b9 01       	movw	r22, r18
    1cbe:	40 e0       	ldi	r20, 0x00	; 0
    1cc0:	50 e0       	ldi	r21, 0x00	; 0
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	00 e0       	ldi	r16, 0x00	; 0
    1cc8:	10 e0       	ldi	r17, 0x00	; 0
    1cca:	ee 24       	eor	r14, r14
    1ccc:	ff 24       	eor	r15, r15
    1cce:	0f 2e       	mov	r0, r31
    1cd0:	f7 e0       	ldi	r31, 0x07	; 7
    1cd2:	cf 2e       	mov	r12, r31
    1cd4:	f0 2d       	mov	r31, r0
    1cd6:	aa 24       	eor	r10, r10
    1cd8:	bb 24       	eor	r11, r11
    1cda:	a3 94       	inc	r10
    1cdc:	88 24       	eor	r8, r8
    1cde:	0e 94 3e 12 	call	0x247c	; 0x247c <proc_init_isr>
    1ce2:	0f 90       	pop	r0
            ((prio_t)BITS_IN_INDEX_T - (prio_t)1),// низший приоритет
            (timer_t)1,//минимальный квант времени
            (bool_t)0,// не RT
            ((affinity_t)1)<<i // привязка  строго к одному процессору, а то его как сбалансирует отсюда
        );
        kernel.idle[i].core_id = i;
    1ce4:	89 81       	ldd	r24, Y+1	; 0x01
    1ce6:	28 2f       	mov	r18, r24
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	80 e3       	ldi	r24, 0x30	; 48
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	bc 01       	movw	r22, r24
    1cf0:	26 9f       	mul	r18, r22
    1cf2:	c0 01       	movw	r24, r0
    1cf4:	27 9f       	mul	r18, r23
    1cf6:	90 0d       	add	r25, r0
    1cf8:	36 9f       	mul	r19, r22
    1cfa:	90 0d       	add	r25, r0
    1cfc:	11 24       	eor	r1, r1
    1cfe:	fc 01       	movw	r30, r24
    1d00:	ee 5a       	subi	r30, 0xAE	; 174
    1d02:	fc 4f       	sbci	r31, 0xFC	; 252
    1d04:	89 81       	ldd	r24, Y+1	; 0x01
    1d06:	80 83       	st	Z, r24
        stat_init( (stat_t *)kernel.stat + i );
    1d08:	89 81       	ldd	r24, Y+1	; 0x01
    1d0a:	88 2f       	mov	r24, r24
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	8f 56       	subi	r24, 0x6F	; 111
    1d10:	9c 4f       	sbci	r25, 0xFC	; 252
    1d12:	0e 94 49 01 	call	0x292	; 0x292 <stat_init>
        sched_init( (sched_t *)kernel.sched + i, (proc_t *)kernel.idle + i );
    1d16:	89 81       	ldd	r24, Y+1	; 0x01
    1d18:	28 2f       	mov	r18, r24
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	8b e2       	ldi	r24, 0x2B	; 43
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	ac 01       	movw	r20, r24
    1d22:	24 9f       	mul	r18, r20
    1d24:	c0 01       	movw	r24, r0
    1d26:	25 9f       	mul	r18, r21
    1d28:	90 0d       	add	r25, r0
    1d2a:	34 9f       	mul	r19, r20
    1d2c:	90 0d       	add	r25, r0
    1d2e:	11 24       	eor	r1, r1
    1d30:	ac 01       	movw	r20, r24
    1d32:	45 52       	subi	r20, 0x25	; 37
    1d34:	5d 4f       	sbci	r21, 0xFD	; 253
    1d36:	89 81       	ldd	r24, Y+1	; 0x01
    1d38:	28 2f       	mov	r18, r24
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	80 e3       	ldi	r24, 0x30	; 48
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	bc 01       	movw	r22, r24
    1d42:	26 9f       	mul	r18, r22
    1d44:	c0 01       	movw	r24, r0
    1d46:	27 9f       	mul	r18, r23
    1d48:	90 0d       	add	r25, r0
    1d4a:	36 9f       	mul	r19, r22
    1d4c:	90 0d       	add	r25, r0
    1d4e:	11 24       	eor	r1, r1
    1d50:	9c 01       	movw	r18, r24
    1d52:	2f 5c       	subi	r18, 0xCF	; 207
    1d54:	3c 4f       	sbci	r19, 0xFC	; 252
    1d56:	ca 01       	movw	r24, r20
    1d58:	b9 01       	movw	r22, r18
    1d5a:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <sched_init>
    core_id_t i;

    spin_init( &kernel.stat_lock );
    spin_lock( &kernel.stat_lock );
    //Инициация собственно ядра
    for( i = (core_id_t)0; i<(core_id_t)MAX_CORES; i++ )
    1d5e:	89 81       	ldd	r24, Y+1	; 0x01
    1d60:	8f 5f       	subi	r24, 0xFF	; 255
    1d62:	89 83       	std	Y+1, r24	; 0x01
    1d64:	89 81       	ldd	r24, Y+1	; 0x01
    1d66:	82 30       	cpi	r24, 0x02	; 2
    1d68:	08 f4       	brcc	.+2      	; 0x1d6c <kernel_init+0x122>
    1d6a:	86 cf       	rjmp	.-244    	; 0x1c78 <kernel_init+0x2e>
        );
        kernel.idle[i].core_id = i;
        stat_init( (stat_t *)kernel.stat + i );
        sched_init( (sched_t *)kernel.sched + i, (proc_t *)kernel.idle + i );
    }
    spin_unlock( &kernel.stat_lock );
    1d6c:	83 e9       	ldi	r24, 0x93	; 147
    1d6e:	93 e0       	ldi	r25, 0x03	; 3
    1d70:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
        (timer_t)1,//минимальный квант времени
        (bool_t)0// не RT
    );
    sched_init( (sched_t *)&kernel.sched, (proc_t *)&kernel.idle );
#endif // CONFIG_MP
}
    1d74:	0f 90       	pop	r0
    1d76:	cf 91       	pop	r28
    1d78:	df 91       	pop	r29
    1d7a:	1f 91       	pop	r17
    1d7c:	0f 91       	pop	r16
    1d7e:	ff 90       	pop	r15
    1d80:	ef 90       	pop	r14
    1d82:	cf 90       	pop	r12
    1d84:	bf 90       	pop	r11
    1d86:	af 90       	pop	r10
    1d88:	8f 90       	pop	r8
    1d8a:	08 95       	ret

00001d8c <mutex_init_isr>:
    mutex_t * mutex
#ifdef CONFIG_USE_HIGHEST_LOCKER
    ,prio_t prio
#endif // CONFIG_USE_HIGHEST_LOCKER
)
{
    1d8c:	df 93       	push	r29
    1d8e:	cf 93       	push	r28
    1d90:	00 d0       	rcall	.+0      	; 0x1d92 <mutex_init_isr+0x6>
    1d92:	0f 92       	push	r0
    1d94:	cd b7       	in	r28, 0x3d	; 61
    1d96:	de b7       	in	r29, 0x3e	; 62
    1d98:	9a 83       	std	Y+2, r25	; 0x02
    1d9a:	89 83       	std	Y+1, r24	; 0x01
    1d9c:	6b 83       	std	Y+3, r22	; 0x03
    SPIN_INIT( mutex );
    1d9e:	89 81       	ldd	r24, Y+1	; 0x01
    1da0:	9a 81       	ldd	r25, Y+2	; 0x02
    1da2:	43 96       	adiw	r24, 0x13	; 19
    1da4:	0e 94 0b 01 	call	0x216	; 0x216 <spin_init>
    SPIN_LOCK( mutex );
    1da8:	89 81       	ldd	r24, Y+1	; 0x01
    1daa:	9a 81       	ldd	r25, Y+2	; 0x02
    1dac:	43 96       	adiw	r24, 0x13	; 19
    1dae:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    xlist_init( (xlist_t *)mutex );
    1db2:	89 81       	ldd	r24, Y+1	; 0x01
    1db4:	9a 81       	ldd	r25, Y+2	; 0x02
    1db6:	0e 94 a7 1e 	call	0x3d4e	; 0x3d4e <xlist_init>
    mutex->free = (bool_t)1;
    1dba:	e9 81       	ldd	r30, Y+1	; 0x01
    1dbc:	fa 81       	ldd	r31, Y+2	; 0x02
    1dbe:	81 e0       	ldi	r24, 0x01	; 1
    1dc0:	82 8b       	std	Z+18, r24	; 0x12
#ifdef CONFIG_USE_HIGHEST_LOCKER
    mutex->prio = prio;
    1dc2:	e9 81       	ldd	r30, Y+1	; 0x01
    1dc4:	fa 81       	ldd	r31, Y+2	; 0x02
    1dc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc8:	81 8b       	std	Z+17, r24	; 0x11
#endif // CONFIG_USE_HIGHEST_LOCKER
    SPIN_UNLOCK( mutex );
    1dca:	89 81       	ldd	r24, Y+1	; 0x01
    1dcc:	9a 81       	ldd	r25, Y+2	; 0x02
    1dce:	43 96       	adiw	r24, 0x13	; 19
    1dd0:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
}
    1dd4:	0f 90       	pop	r0
    1dd6:	0f 90       	pop	r0
    1dd8:	0f 90       	pop	r0
    1dda:	cf 91       	pop	r28
    1ddc:	df 91       	pop	r29
    1dde:	08 95       	ret

00001de0 <_mutex_lock>:

// К моменту вызова захвачена блокировка mutex-а, запрещены прерывания
bool_t _mutex_lock( mutex_t * mutex )
{
    1de0:	df 93       	push	r29
    1de2:	cf 93       	push	r28
    1de4:	00 d0       	rcall	.+0      	; 0x1de6 <_mutex_lock+0x6>
    1de6:	00 d0       	rcall	.+0      	; 0x1de8 <_mutex_lock+0x8>
    1de8:	0f 92       	push	r0
    1dea:	cd b7       	in	r28, 0x3d	; 61
    1dec:	de b7       	in	r29, 0x3e	; 62
    1dee:	9d 83       	std	Y+5, r25	; 0x05
    1df0:	8c 83       	std	Y+4, r24	; 0x04
    bool_t ret;
    proc_t * proc;
    // Захват блокировки мьютекса
    SPIN_LOCK( mutex );
    1df2:	8c 81       	ldd	r24, Y+4	; 0x04
    1df4:	9d 81       	ldd	r25, Y+5	; 0x05
    1df6:	43 96       	adiw	r24, 0x13	; 19
    1df8:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    ret = mutex->free;
    1dfc:	ec 81       	ldd	r30, Y+4	; 0x04
    1dfe:	fd 81       	ldd	r31, Y+5	; 0x05
    1e00:	82 89       	ldd	r24, Z+18	; 0x12
    1e02:	8b 83       	std	Y+3, r24	; 0x03
    proc = current_proc();
    1e04:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <current_proc>
    1e08:	9a 83       	std	Y+2, r25	; 0x02
    1e0a:	89 83       	std	Y+1, r24	; 0x01
    // Захват блокировки процесса
    SPIN_LOCK( proc );
    1e0c:	89 81       	ldd	r24, Y+1	; 0x01
    1e0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e10:	83 96       	adiw	r24, 0x23	; 35
    1e12:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    PROC_LRES_INC( proc, GET_PRIO( mutex ) );
    1e16:	ec 81       	ldd	r30, Y+4	; 0x04
    1e18:	fd 81       	ldd	r31, Y+5	; 0x05
    1e1a:	21 89       	ldd	r18, Z+17	; 0x11
    1e1c:	89 81       	ldd	r24, Y+1	; 0x01
    1e1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e20:	62 2f       	mov	r22, r18
    1e22:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_proc_lres_inc>

    if( ret )
    1e26:	8b 81       	ldd	r24, Y+3	; 0x03
    1e28:	88 23       	and	r24, r24
    1e2a:	41 f0       	breq	.+16     	; 0x1e3c <_mutex_lock+0x5c>
    {
        mutex->free = (bool_t)0;
    1e2c:	ec 81       	ldd	r30, Y+4	; 0x04
    1e2e:	fd 81       	ldd	r31, Y+5	; 0x05
    1e30:	12 8a       	std	Z+18, r1	; 0x12
        PROC_PRIO_CONTROL_RUNNING( proc );
    1e32:	89 81       	ldd	r24, Y+1	; 0x01
    1e34:	9a 81       	ldd	r25, Y+2	; 0x02
    1e36:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <_proc_prio_control_running>
    1e3a:	14 c0       	rjmp	.+40     	; 0x1e64 <_mutex_lock+0x84>
    }
    else
    {
        proc->flags |= PROC_FLG_QUEUE;
    1e3c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e3e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e40:	87 81       	ldd	r24, Z+7	; 0x07
    1e42:	90 85       	ldd	r25, Z+8	; 0x08
    1e44:	80 61       	ori	r24, 0x10	; 16
    1e46:	e9 81       	ldd	r30, Y+1	; 0x01
    1e48:	fa 81       	ldd	r31, Y+2	; 0x02
    1e4a:	90 87       	std	Z+8, r25	; 0x08
    1e4c:	87 83       	std	Z+7, r24	; 0x07
        _proc_stop( proc );
    1e4e:	89 81       	ldd	r24, Y+1	; 0x01
    1e50:	9a 81       	ldd	r25, Y+2	; 0x02
    1e52:	0e 94 23 14 	call	0x2846	; 0x2846 <_proc_stop>
        pitem_insert( (pitem_t *)proc, (xlist_t *)mutex );
    1e56:	89 81       	ldd	r24, Y+1	; 0x01
    1e58:	9a 81       	ldd	r25, Y+2	; 0x02
    1e5a:	2c 81       	ldd	r18, Y+4	; 0x04
    1e5c:	3d 81       	ldd	r19, Y+5	; 0x05
    1e5e:	b9 01       	movw	r22, r18
    1e60:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <pitem_insert>
    }
    SPIN_UNLOCK( proc );
    1e64:	89 81       	ldd	r24, Y+1	; 0x01
    1e66:	9a 81       	ldd	r25, Y+2	; 0x02
    1e68:	83 96       	adiw	r24, 0x23	; 35
    1e6a:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
    SPIN_UNLOCK( mutex );
    1e6e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e70:	9d 81       	ldd	r25, Y+5	; 0x05
    1e72:	43 96       	adiw	r24, 0x13	; 19
    1e74:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
    return ret;
    1e78:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1e7a:	0f 90       	pop	r0
    1e7c:	0f 90       	pop	r0
    1e7e:	0f 90       	pop	r0
    1e80:	0f 90       	pop	r0
    1e82:	0f 90       	pop	r0
    1e84:	cf 91       	pop	r28
    1e86:	df 91       	pop	r29
    1e88:	08 95       	ret

00001e8a <_mutex_try_lock>:

bool_t _mutex_try_lock( mutex_t * mutex )
{
    1e8a:	df 93       	push	r29
    1e8c:	cf 93       	push	r28
    1e8e:	00 d0       	rcall	.+0      	; 0x1e90 <_mutex_try_lock+0x6>
    1e90:	00 d0       	rcall	.+0      	; 0x1e92 <_mutex_try_lock+0x8>
    1e92:	0f 92       	push	r0
    1e94:	cd b7       	in	r28, 0x3d	; 61
    1e96:	de b7       	in	r29, 0x3e	; 62
    1e98:	9d 83       	std	Y+5, r25	; 0x05
    1e9a:	8c 83       	std	Y+4, r24	; 0x04
    bool_t ret;
    proc_t * proc;

    SPIN_LOCK( mutex );
    1e9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e9e:	9d 81       	ldd	r25, Y+5	; 0x05
    1ea0:	43 96       	adiw	r24, 0x13	; 19
    1ea2:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    ret = mutex->free;
    1ea6:	ec 81       	ldd	r30, Y+4	; 0x04
    1ea8:	fd 81       	ldd	r31, Y+5	; 0x05
    1eaa:	82 89       	ldd	r24, Z+18	; 0x12
    1eac:	8b 83       	std	Y+3, r24	; 0x03
    proc = current_proc();
    1eae:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <current_proc>
    1eb2:	9a 83       	std	Y+2, r25	; 0x02
    1eb4:	89 83       	std	Y+1, r24	; 0x01

    SPIN_LOCK( proc );
    1eb6:	89 81       	ldd	r24, Y+1	; 0x01
    1eb8:	9a 81       	ldd	r25, Y+2	; 0x02
    1eba:	83 96       	adiw	r24, 0x23	; 35
    1ebc:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    if( ret )
    1ec0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec2:	88 23       	and	r24, r24
    1ec4:	79 f0       	breq	.+30     	; 0x1ee4 <_mutex_try_lock+0x5a>
    {
        mutex->free = (bool_t)0;
    1ec6:	ec 81       	ldd	r30, Y+4	; 0x04
    1ec8:	fd 81       	ldd	r31, Y+5	; 0x05
    1eca:	12 8a       	std	Z+18, r1	; 0x12
        PROC_LRES_INC( proc, GET_PRIO( mutex ) );
    1ecc:	ec 81       	ldd	r30, Y+4	; 0x04
    1ece:	fd 81       	ldd	r31, Y+5	; 0x05
    1ed0:	21 89       	ldd	r18, Z+17	; 0x11
    1ed2:	89 81       	ldd	r24, Y+1	; 0x01
    1ed4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ed6:	62 2f       	mov	r22, r18
    1ed8:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_proc_lres_inc>
        PROC_PRIO_CONTROL_RUNNING( proc );
    1edc:	89 81       	ldd	r24, Y+1	; 0x01
    1ede:	9a 81       	ldd	r25, Y+2	; 0x02
    1ee0:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <_proc_prio_control_running>
    }
    SPIN_UNLOCK( proc );
    1ee4:	89 81       	ldd	r24, Y+1	; 0x01
    1ee6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ee8:	83 96       	adiw	r24, 0x23	; 35
    1eea:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
    SPIN_UNLOCK( mutex );
    1eee:	8c 81       	ldd	r24, Y+4	; 0x04
    1ef0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ef2:	43 96       	adiw	r24, 0x13	; 19
    1ef4:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
    return ret;
    1ef8:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1efa:	0f 90       	pop	r0
    1efc:	0f 90       	pop	r0
    1efe:	0f 90       	pop	r0
    1f00:	0f 90       	pop	r0
    1f02:	0f 90       	pop	r0
    1f04:	cf 91       	pop	r28
    1f06:	df 91       	pop	r29
    1f08:	08 95       	ret

00001f0a <_mutex_unlock>:

void _mutex_unlock( mutex_t *  mutex )
{
    1f0a:	df 93       	push	r29
    1f0c:	cf 93       	push	r28
    1f0e:	00 d0       	rcall	.+0      	; 0x1f10 <_mutex_unlock+0x6>
    1f10:	00 d0       	rcall	.+0      	; 0x1f12 <_mutex_unlock+0x8>
    1f12:	cd b7       	in	r28, 0x3d	; 61
    1f14:	de b7       	in	r29, 0x3e	; 62
    1f16:	9c 83       	std	Y+4, r25	; 0x04
    1f18:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc;

    SPIN_LOCK( mutex );
    1f1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f1e:	43 96       	adiw	r24, 0x13	; 19
    1f20:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    proc = current_proc();
    1f24:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <current_proc>
    1f28:	9a 83       	std	Y+2, r25	; 0x02
    1f2a:	89 83       	std	Y+1, r24	; 0x01

    SPIN_LOCK(proc);
    1f2c:	89 81       	ldd	r24, Y+1	; 0x01
    1f2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f30:	83 96       	adiw	r24, 0x23	; 35
    1f32:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    PROC_LRES_DEC( proc, GET_PRIO( mutex ) );
    1f36:	eb 81       	ldd	r30, Y+3	; 0x03
    1f38:	fc 81       	ldd	r31, Y+4	; 0x04
    1f3a:	21 89       	ldd	r18, Z+17	; 0x11
    1f3c:	89 81       	ldd	r24, Y+1	; 0x01
    1f3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f40:	62 2f       	mov	r22, r18
    1f42:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <_proc_lres_dec>
    // Если проготовлен и готов к остановке - останавливаем
    if(  PROC_PRE_STOP_TEST(proc)  )
    1f46:	e9 81       	ldd	r30, Y+1	; 0x01
    1f48:	fa 81       	ldd	r31, Y+2	; 0x02
    1f4a:	87 81       	ldd	r24, Z+7	; 0x07
    1f4c:	90 85       	ldd	r25, Z+8	; 0x08
    1f4e:	80 78       	andi	r24, 0x80	; 128
    1f50:	90 70       	andi	r25, 0x00	; 0
    1f52:	00 97       	sbiw	r24, 0x00	; 0
    1f54:	f9 f0       	breq	.+62     	; 0x1f94 <_mutex_unlock+0x8a>
    1f56:	e9 81       	ldd	r30, Y+1	; 0x01
    1f58:	fa 81       	ldd	r31, Y+2	; 0x02
    1f5a:	87 81       	ldd	r24, Z+7	; 0x07
    1f5c:	90 85       	ldd	r25, Z+8	; 0x08
    1f5e:	8c 70       	andi	r24, 0x0C	; 12
    1f60:	90 70       	andi	r25, 0x00	; 0
    1f62:	00 97       	sbiw	r24, 0x00	; 0
    1f64:	b9 f4       	brne	.+46     	; 0x1f94 <_mutex_unlock+0x8a>
    {
        proc->flags &= ~PROC_FLG_PRE_STOP_MASK;
    1f66:	e9 81       	ldd	r30, Y+1	; 0x01
    1f68:	fa 81       	ldd	r31, Y+2	; 0x02
    1f6a:	87 81       	ldd	r24, Z+7	; 0x07
    1f6c:	90 85       	ldd	r25, Z+8	; 0x08
    1f6e:	8d 77       	andi	r24, 0x7D	; 125
    1f70:	e9 81       	ldd	r30, Y+1	; 0x01
    1f72:	fa 81       	ldd	r31, Y+2	; 0x02
    1f74:	90 87       	std	Z+8, r25	; 0x08
    1f76:	87 83       	std	Z+7, r24	; 0x07
        _proc_stop_( proc );
    1f78:	89 81       	ldd	r24, Y+1	; 0x01
    1f7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f7c:	0e 94 df 13 	call	0x27be	; 0x27be <_proc_stop_>
        PROC_PRIO_CONTROL_STOPED( proc );
    1f80:	89 81       	ldd	r24, Y+1	; 0x01
    1f82:	9a 81       	ldd	r25, Y+2	; 0x02
    1f84:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <_proc_prio_control_stoped>
        // Нужна перепланировка, процесс остановили и не запустили обратно
        RESCHED_PROC( proc );
    1f88:	e9 81       	ldd	r30, Y+1	; 0x01
    1f8a:	fa 81       	ldd	r31, Y+2	; 0x02
    1f8c:	81 a1       	ldd	r24, Z+33	; 0x21
    1f8e:	0e 94 b4 01 	call	0x368	; 0x368 <resched>
    1f92:	04 c0       	rjmp	.+8      	; 0x1f9c <_mutex_unlock+0x92>
    }
    else
    {
        // Не останавливаем - меняем проиритет на ходу
        PROC_PRIO_CONTROL_RUNNING( proc );
    1f94:	89 81       	ldd	r24, Y+1	; 0x01
    1f96:	9a 81       	ldd	r25, Y+2	; 0x02
    1f98:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <_proc_prio_control_running>
    }
    SPIN_UNLOCK( proc );
    1f9c:	89 81       	ldd	r24, Y+1	; 0x01
    1f9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa0:	83 96       	adiw	r24, 0x23	; 35
    1fa2:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
    // Обрабока самого мьютекса
    if( ((xlist_t *)mutex)->index == (index_t)0  )
    1fa6:	eb 81       	ldd	r30, Y+3	; 0x03
    1fa8:	fc 81       	ldd	r31, Y+4	; 0x04
    1faa:	80 89       	ldd	r24, Z+16	; 0x10
    1fac:	88 23       	and	r24, r24
    1fae:	29 f4       	brne	.+10     	; 0x1fba <_mutex_unlock+0xb0>
    {
        // Список ожидающих пуст, выходим
        mutex->free = (bool_t)1;
    1fb0:	eb 81       	ldd	r30, Y+3	; 0x03
    1fb2:	fc 81       	ldd	r31, Y+4	; 0x04
    1fb4:	81 e0       	ldi	r24, 0x01	; 1
    1fb6:	82 8b       	std	Z+18, r24	; 0x12
    1fb8:	25 c0       	rjmp	.+74     	; 0x2004 <_mutex_unlock+0xfa>
        goto end;
    }
    // Список ожидающих не пуст, запускаем голову
    proc = (proc_t *)xlist_head( (xlist_t *)mutex );
    1fba:	8b 81       	ldd	r24, Y+3	; 0x03
    1fbc:	9c 81       	ldd	r25, Y+4	; 0x04
    1fbe:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <xlist_head>
    1fc2:	9a 83       	std	Y+2, r25	; 0x02
    1fc4:	89 83       	std	Y+1, r24	; 0x01
    SPIN_LOCK( proc );
    1fc6:	89 81       	ldd	r24, Y+1	; 0x01
    1fc8:	9a 81       	ldd	r25, Y+2	; 0x02
    1fca:	83 96       	adiw	r24, 0x23	; 35
    1fcc:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    // Сначала надо вырезать
    pitem_cut( (pitem_t *)proc );
    1fd0:	89 81       	ldd	r24, Y+1	; 0x01
    1fd2:	9a 81       	ldd	r25, Y+2	; 0x02
    1fd4:	0e 94 91 11 	call	0x2322	; 0x2322 <pitem_cut>
    proc->flags &= ~PROC_FLG_QUEUE;
    1fd8:	e9 81       	ldd	r30, Y+1	; 0x01
    1fda:	fa 81       	ldd	r31, Y+2	; 0x02
    1fdc:	87 81       	ldd	r24, Z+7	; 0x07
    1fde:	90 85       	ldd	r25, Z+8	; 0x08
    1fe0:	8f 7e       	andi	r24, 0xEF	; 239
    1fe2:	e9 81       	ldd	r30, Y+1	; 0x01
    1fe4:	fa 81       	ldd	r31, Y+2	; 0x02
    1fe6:	90 87       	std	Z+8, r25	; 0x08
    1fe8:	87 83       	std	Z+7, r24	; 0x07
    // Управление приоритетом процесса
    PROC_PRIO_CONTROL_STOPED( proc );
    1fea:	89 81       	ldd	r24, Y+1	; 0x01
    1fec:	9a 81       	ldd	r25, Y+2	; 0x02
    1fee:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <_proc_prio_control_stoped>
    _proc_run( proc );
    1ff2:	89 81       	ldd	r24, Y+1	; 0x01
    1ff4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff6:	0e 94 16 13 	call	0x262c	; 0x262c <_proc_run>
    SPIN_UNLOCK( proc );
    1ffa:	89 81       	ldd	r24, Y+1	; 0x01
    1ffc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ffe:	83 96       	adiw	r24, 0x23	; 35
    2000:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
end:
    SPIN_UNLOCK( mutex );
    2004:	8b 81       	ldd	r24, Y+3	; 0x03
    2006:	9c 81       	ldd	r25, Y+4	; 0x04
    2008:	43 96       	adiw	r24, 0x13	; 19
    200a:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
}
    200e:	0f 90       	pop	r0
    2010:	0f 90       	pop	r0
    2012:	0f 90       	pop	r0
    2014:	0f 90       	pop	r0
    2016:	cf 91       	pop	r28
    2018:	df 91       	pop	r29
    201a:	08 95       	ret

0000201c <pcounter_init>:
*                           http://www.0chan.ru/r/res/9996.html                          *
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
void pcounter_init(pcounter_t * pcounter)
{
    201c:	df 93       	push	r29
    201e:	cf 93       	push	r28
    2020:	00 d0       	rcall	.+0      	; 0x2022 <pcounter_init+0x6>
    2022:	0f 92       	push	r0
    2024:	cd b7       	in	r28, 0x3d	; 61
    2026:	de b7       	in	r29, 0x3e	; 62
    2028:	9b 83       	std	Y+3, r25	; 0x03
    202a:	8a 83       	std	Y+2, r24	; 0x02
    prio_t p;
    pcounter->index = (index_t)0;
    202c:	ea 81       	ldd	r30, Y+2	; 0x02
    202e:	fb 81       	ldd	r31, Y+3	; 0x03
    2030:	10 8a       	std	Z+16, r1	; 0x10
    for(p = 0; p < (index_t)BITS_IN_INDEX_T; p++)pcounter->counter[p] = (count_t)0;
    2032:	19 82       	std	Y+1, r1	; 0x01
    2034:	0f c0       	rjmp	.+30     	; 0x2054 <pcounter_init+0x38>
    2036:	89 81       	ldd	r24, Y+1	; 0x01
    2038:	88 2f       	mov	r24, r24
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	2a 81       	ldd	r18, Y+2	; 0x02
    203e:	3b 81       	ldd	r19, Y+3	; 0x03
    2040:	88 0f       	add	r24, r24
    2042:	99 1f       	adc	r25, r25
    2044:	f9 01       	movw	r30, r18
    2046:	e8 0f       	add	r30, r24
    2048:	f9 1f       	adc	r31, r25
    204a:	11 82       	std	Z+1, r1	; 0x01
    204c:	10 82       	st	Z, r1
    204e:	89 81       	ldd	r24, Y+1	; 0x01
    2050:	8f 5f       	subi	r24, 0xFF	; 255
    2052:	89 83       	std	Y+1, r24	; 0x01
    2054:	89 81       	ldd	r24, Y+1	; 0x01
    2056:	88 30       	cpi	r24, 0x08	; 8
    2058:	70 f3       	brcs	.-36     	; 0x2036 <pcounter_init+0x1a>
}
    205a:	0f 90       	pop	r0
    205c:	0f 90       	pop	r0
    205e:	0f 90       	pop	r0
    2060:	cf 91       	pop	r28
    2062:	df 91       	pop	r29
    2064:	08 95       	ret

00002066 <pcounter_inc>:

void pcounter_inc(pcounter_t * pcounter, prio_t prio)
{
    2066:	df 93       	push	r29
    2068:	cf 93       	push	r28
    206a:	00 d0       	rcall	.+0      	; 0x206c <pcounter_inc+0x6>
    206c:	0f 92       	push	r0
    206e:	cd b7       	in	r28, 0x3d	; 61
    2070:	de b7       	in	r29, 0x3e	; 62
    2072:	9a 83       	std	Y+2, r25	; 0x02
    2074:	89 83       	std	Y+1, r24	; 0x01
    2076:	6b 83       	std	Y+3, r22	; 0x03
    pcounter->counter[prio]++;
    2078:	8b 81       	ldd	r24, Y+3	; 0x03
    207a:	68 2f       	mov	r22, r24
    207c:	70 e0       	ldi	r23, 0x00	; 0
    207e:	29 81       	ldd	r18, Y+1	; 0x01
    2080:	3a 81       	ldd	r19, Y+2	; 0x02
    2082:	cb 01       	movw	r24, r22
    2084:	88 0f       	add	r24, r24
    2086:	99 1f       	adc	r25, r25
    2088:	f9 01       	movw	r30, r18
    208a:	e8 0f       	add	r30, r24
    208c:	f9 1f       	adc	r31, r25
    208e:	80 81       	ld	r24, Z
    2090:	91 81       	ldd	r25, Z+1	; 0x01
    2092:	ac 01       	movw	r20, r24
    2094:	4f 5f       	subi	r20, 0xFF	; 255
    2096:	5f 4f       	sbci	r21, 0xFF	; 255
    2098:	29 81       	ldd	r18, Y+1	; 0x01
    209a:	3a 81       	ldd	r19, Y+2	; 0x02
    209c:	cb 01       	movw	r24, r22
    209e:	88 0f       	add	r24, r24
    20a0:	99 1f       	adc	r25, r25
    20a2:	f9 01       	movw	r30, r18
    20a4:	e8 0f       	add	r30, r24
    20a6:	f9 1f       	adc	r31, r25
    20a8:	51 83       	std	Z+1, r21	; 0x01
    20aa:	40 83       	st	Z, r20
    pcounter->index |= ((index_t)1)<<prio;
    20ac:	e9 81       	ldd	r30, Y+1	; 0x01
    20ae:	fa 81       	ldd	r31, Y+2	; 0x02
    20b0:	80 89       	ldd	r24, Z+16	; 0x10
    20b2:	48 2f       	mov	r20, r24
    20b4:	8b 81       	ldd	r24, Y+3	; 0x03
    20b6:	28 2f       	mov	r18, r24
    20b8:	30 e0       	ldi	r19, 0x00	; 0
    20ba:	81 e0       	ldi	r24, 0x01	; 1
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	02 2e       	mov	r0, r18
    20c0:	02 c0       	rjmp	.+4      	; 0x20c6 <pcounter_inc+0x60>
    20c2:	88 0f       	add	r24, r24
    20c4:	99 1f       	adc	r25, r25
    20c6:	0a 94       	dec	r0
    20c8:	e2 f7       	brpl	.-8      	; 0x20c2 <pcounter_inc+0x5c>
    20ca:	84 2b       	or	r24, r20
    20cc:	e9 81       	ldd	r30, Y+1	; 0x01
    20ce:	fa 81       	ldd	r31, Y+2	; 0x02
    20d0:	80 8b       	std	Z+16, r24	; 0x10
}
    20d2:	0f 90       	pop	r0
    20d4:	0f 90       	pop	r0
    20d6:	0f 90       	pop	r0
    20d8:	cf 91       	pop	r28
    20da:	df 91       	pop	r29
    20dc:	08 95       	ret

000020de <pcounter_dec>:

index_t pcounter_dec(pcounter_t * pcounter, prio_t prio)
{
    20de:	df 93       	push	r29
    20e0:	cf 93       	push	r28
    20e2:	00 d0       	rcall	.+0      	; 0x20e4 <pcounter_dec+0x6>
    20e4:	00 d0       	rcall	.+0      	; 0x20e6 <pcounter_dec+0x8>
    20e6:	cd b7       	in	r28, 0x3d	; 61
    20e8:	de b7       	in	r29, 0x3e	; 62
    20ea:	9b 83       	std	Y+3, r25	; 0x03
    20ec:	8a 83       	std	Y+2, r24	; 0x02
    20ee:	6c 83       	std	Y+4, r22	; 0x04
    index_t mask;
    mask = ((index_t)1)<<prio;
    20f0:	8c 81       	ldd	r24, Y+4	; 0x04
    20f2:	28 2f       	mov	r18, r24
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	81 e0       	ldi	r24, 0x01	; 1
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	02 c0       	rjmp	.+4      	; 0x2100 <pcounter_dec+0x22>
    20fc:	88 0f       	add	r24, r24
    20fe:	99 1f       	adc	r25, r25
    2100:	2a 95       	dec	r18
    2102:	e2 f7       	brpl	.-8      	; 0x20fc <pcounter_dec+0x1e>
    2104:	89 83       	std	Y+1, r24	; 0x01
    pcounter->counter[prio]--;
    2106:	8c 81       	ldd	r24, Y+4	; 0x04
    2108:	68 2f       	mov	r22, r24
    210a:	70 e0       	ldi	r23, 0x00	; 0
    210c:	2a 81       	ldd	r18, Y+2	; 0x02
    210e:	3b 81       	ldd	r19, Y+3	; 0x03
    2110:	cb 01       	movw	r24, r22
    2112:	88 0f       	add	r24, r24
    2114:	99 1f       	adc	r25, r25
    2116:	f9 01       	movw	r30, r18
    2118:	e8 0f       	add	r30, r24
    211a:	f9 1f       	adc	r31, r25
    211c:	80 81       	ld	r24, Z
    211e:	91 81       	ldd	r25, Z+1	; 0x01
    2120:	ac 01       	movw	r20, r24
    2122:	41 50       	subi	r20, 0x01	; 1
    2124:	50 40       	sbci	r21, 0x00	; 0
    2126:	2a 81       	ldd	r18, Y+2	; 0x02
    2128:	3b 81       	ldd	r19, Y+3	; 0x03
    212a:	cb 01       	movw	r24, r22
    212c:	88 0f       	add	r24, r24
    212e:	99 1f       	adc	r25, r25
    2130:	f9 01       	movw	r30, r18
    2132:	e8 0f       	add	r30, r24
    2134:	f9 1f       	adc	r31, r25
    2136:	51 83       	std	Z+1, r21	; 0x01
    2138:	40 83       	st	Z, r20
    if(pcounter->counter[prio] == (count_t)0)pcounter->index &= ~mask;
    213a:	8c 81       	ldd	r24, Y+4	; 0x04
    213c:	88 2f       	mov	r24, r24
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	2a 81       	ldd	r18, Y+2	; 0x02
    2142:	3b 81       	ldd	r19, Y+3	; 0x03
    2144:	88 0f       	add	r24, r24
    2146:	99 1f       	adc	r25, r25
    2148:	f9 01       	movw	r30, r18
    214a:	e8 0f       	add	r30, r24
    214c:	f9 1f       	adc	r31, r25
    214e:	80 81       	ld	r24, Z
    2150:	91 81       	ldd	r25, Z+1	; 0x01
    2152:	00 97       	sbiw	r24, 0x00	; 0
    2154:	51 f4       	brne	.+20     	; 0x216a <pcounter_dec+0x8c>
    2156:	ea 81       	ldd	r30, Y+2	; 0x02
    2158:	fb 81       	ldd	r31, Y+3	; 0x03
    215a:	80 89       	ldd	r24, Z+16	; 0x10
    215c:	98 2f       	mov	r25, r24
    215e:	89 81       	ldd	r24, Y+1	; 0x01
    2160:	80 95       	com	r24
    2162:	89 23       	and	r24, r25
    2164:	ea 81       	ldd	r30, Y+2	; 0x02
    2166:	fb 81       	ldd	r31, Y+3	; 0x03
    2168:	80 8b       	std	Z+16, r24	; 0x10
    return pcounter->index & mask;
    216a:	ea 81       	ldd	r30, Y+2	; 0x02
    216c:	fb 81       	ldd	r31, Y+3	; 0x03
    216e:	90 89       	ldd	r25, Z+16	; 0x10
    2170:	89 81       	ldd	r24, Y+1	; 0x01
    2172:	89 23       	and	r24, r25
}
    2174:	0f 90       	pop	r0
    2176:	0f 90       	pop	r0
    2178:	0f 90       	pop	r0
    217a:	0f 90       	pop	r0
    217c:	cf 91       	pop	r28
    217e:	df 91       	pop	r29
    2180:	08 95       	ret

00002182 <pitem_init>:
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
// Инициация
void pitem_init( pitem_t * pitem, prio_t prio )
{
    2182:	df 93       	push	r29
    2184:	cf 93       	push	r28
    2186:	00 d0       	rcall	.+0      	; 0x2188 <pitem_init+0x6>
    2188:	0f 92       	push	r0
    218a:	cd b7       	in	r28, 0x3d	; 61
    218c:	de b7       	in	r29, 0x3e	; 62
    218e:	9a 83       	std	Y+2, r25	; 0x02
    2190:	89 83       	std	Y+1, r24	; 0x01
    2192:	6b 83       	std	Y+3, r22	; 0x03
    item_init( (item_t *)pitem );
    2194:	89 81       	ldd	r24, Y+1	; 0x01
    2196:	9a 81       	ldd	r25, Y+2	; 0x02
    2198:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <item_init>
    pitem->list = (xlist_t *)0;
    219c:	e9 81       	ldd	r30, Y+1	; 0x01
    219e:	fa 81       	ldd	r31, Y+2	; 0x02
    21a0:	15 82       	std	Z+5, r1	; 0x05
    21a2:	14 82       	std	Z+4, r1	; 0x04
    pitem->prio = prio;
    21a4:	e9 81       	ldd	r30, Y+1	; 0x01
    21a6:	fa 81       	ldd	r31, Y+2	; 0x02
    21a8:	8b 81       	ldd	r24, Y+3	; 0x03
    21aa:	86 83       	std	Z+6, r24	; 0x06
}
    21ac:	0f 90       	pop	r0
    21ae:	0f 90       	pop	r0
    21b0:	0f 90       	pop	r0
    21b2:	cf 91       	pop	r28
    21b4:	df 91       	pop	r29
    21b6:	08 95       	ret

000021b8 <pitem_insert>:
// Вставка в список
void pitem_insert( pitem_t * pitem, xlist_t * xlist )
{
    21b8:	df 93       	push	r29
    21ba:	cf 93       	push	r28
    21bc:	cd b7       	in	r28, 0x3d	; 61
    21be:	de b7       	in	r29, 0x3e	; 62
    21c0:	28 97       	sbiw	r28, 0x08	; 8
    21c2:	0f b6       	in	r0, 0x3f	; 63
    21c4:	f8 94       	cli
    21c6:	de bf       	out	0x3e, r29	; 62
    21c8:	0f be       	out	0x3f, r0	; 63
    21ca:	cd bf       	out	0x3d, r28	; 61
    21cc:	9e 83       	std	Y+6, r25	; 0x06
    21ce:	8d 83       	std	Y+5, r24	; 0x05
    21d0:	78 87       	std	Y+8, r23	; 0x08
    21d2:	6f 83       	std	Y+7, r22	; 0x07
    prio_t prio;
    index_t mask;
    item_t ** head;

    prio = pitem->prio;
    21d4:	ed 81       	ldd	r30, Y+5	; 0x05
    21d6:	fe 81       	ldd	r31, Y+6	; 0x06
    21d8:	86 81       	ldd	r24, Z+6	; 0x06
    21da:	8c 83       	std	Y+4, r24	; 0x04
    mask = ((index_t)1)<<prio;
    21dc:	8c 81       	ldd	r24, Y+4	; 0x04
    21de:	28 2f       	mov	r18, r24
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	81 e0       	ldi	r24, 0x01	; 1
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	02 c0       	rjmp	.+4      	; 0x21ec <pitem_insert+0x34>
    21e8:	88 0f       	add	r24, r24
    21ea:	99 1f       	adc	r25, r25
    21ec:	2a 95       	dec	r18
    21ee:	e2 f7       	brpl	.-8      	; 0x21e8 <pitem_insert+0x30>
    21f0:	8b 83       	std	Y+3, r24	; 0x03
    head = (item_t **)xlist + prio;
    21f2:	2f 81       	ldd	r18, Y+7	; 0x07
    21f4:	38 85       	ldd	r19, Y+8	; 0x08
    21f6:	8c 81       	ldd	r24, Y+4	; 0x04
    21f8:	88 2f       	mov	r24, r24
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	88 0f       	add	r24, r24
    21fe:	99 1f       	adc	r25, r25
    2200:	82 0f       	add	r24, r18
    2202:	93 1f       	adc	r25, r19
    2204:	9a 83       	std	Y+2, r25	; 0x02
    2206:	89 83       	std	Y+1, r24	; 0x01
    // Пуста ли часть списка с таким приоритетом
    if( ( xlist->index )& mask)
    2208:	ef 81       	ldd	r30, Y+7	; 0x07
    220a:	f8 85       	ldd	r31, Y+8	; 0x08
    220c:	90 89       	ldd	r25, Z+16	; 0x10
    220e:	8b 81       	ldd	r24, Y+3	; 0x03
    2210:	89 23       	and	r24, r25
    2212:	88 23       	and	r24, r24
    2214:	51 f0       	breq	.+20     	; 0x222a <pitem_insert+0x72>
    {
        //Не пуста вставляем туда gitem
        item_insert( (item_t *)pitem, *head );
    2216:	8d 81       	ldd	r24, Y+5	; 0x05
    2218:	9e 81       	ldd	r25, Y+6	; 0x06
    221a:	e9 81       	ldd	r30, Y+1	; 0x01
    221c:	fa 81       	ldd	r31, Y+2	; 0x02
    221e:	20 81       	ld	r18, Z
    2220:	31 81       	ldd	r19, Z+1	; 0x01
    2222:	b9 01       	movw	r22, r18
    2224:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <item_insert>
    2228:	0e c0       	rjmp	.+28     	; 0x2246 <pitem_insert+0x8e>
    }
    else
    {
        // Пуста, gitem будет головой
        *head = (item_t *)pitem;
    222a:	8d 81       	ldd	r24, Y+5	; 0x05
    222c:	9e 81       	ldd	r25, Y+6	; 0x06
    222e:	e9 81       	ldd	r30, Y+1	; 0x01
    2230:	fa 81       	ldd	r31, Y+2	; 0x02
    2232:	91 83       	std	Z+1, r25	; 0x01
    2234:	80 83       	st	Z, r24
        xlist->index |= mask;
    2236:	ef 81       	ldd	r30, Y+7	; 0x07
    2238:	f8 85       	ldd	r31, Y+8	; 0x08
    223a:	90 89       	ldd	r25, Z+16	; 0x10
    223c:	8b 81       	ldd	r24, Y+3	; 0x03
    223e:	89 2b       	or	r24, r25
    2240:	ef 81       	ldd	r30, Y+7	; 0x07
    2242:	f8 85       	ldd	r31, Y+8	; 0x08
    2244:	80 8b       	std	Z+16, r24	; 0x10
    }
    pitem->list = xlist;
    2246:	ed 81       	ldd	r30, Y+5	; 0x05
    2248:	fe 81       	ldd	r31, Y+6	; 0x06
    224a:	8f 81       	ldd	r24, Y+7	; 0x07
    224c:	98 85       	ldd	r25, Y+8	; 0x08
    224e:	95 83       	std	Z+5, r25	; 0x05
    2250:	84 83       	std	Z+4, r24	; 0x04
}
    2252:	28 96       	adiw	r28, 0x08	; 8
    2254:	0f b6       	in	r0, 0x3f	; 63
    2256:	f8 94       	cli
    2258:	de bf       	out	0x3e, r29	; 62
    225a:	0f be       	out	0x3f, r0	; 63
    225c:	cd bf       	out	0x3d, r28	; 61
    225e:	cf 91       	pop	r28
    2260:	df 91       	pop	r29
    2262:	08 95       	ret

00002264 <pitem_fast_cut>:
// Быстрая вырезка из списка
void pitem_fast_cut( pitem_t * pitem )
{
    2264:	df 93       	push	r29
    2266:	cf 93       	push	r28
    2268:	00 d0       	rcall	.+0      	; 0x226a <pitem_fast_cut+0x6>
    226a:	00 d0       	rcall	.+0      	; 0x226c <pitem_fast_cut+0x8>
    226c:	0f 92       	push	r0
    226e:	cd b7       	in	r28, 0x3d	; 61
    2270:	de b7       	in	r29, 0x3e	; 62
    2272:	9d 83       	std	Y+5, r25	; 0x05
    2274:	8c 83       	std	Y+4, r24	; 0x04
    prio_t prio;
    xlist_t * xlist;

    prio = pitem->prio;
    2276:	ec 81       	ldd	r30, Y+4	; 0x04
    2278:	fd 81       	ldd	r31, Y+5	; 0x05
    227a:	86 81       	ldd	r24, Z+6	; 0x06
    227c:	8b 83       	std	Y+3, r24	; 0x03
    xlist = (xlist_t *)pitem->list;
    227e:	ec 81       	ldd	r30, Y+4	; 0x04
    2280:	fd 81       	ldd	r31, Y+5	; 0x05
    2282:	84 81       	ldd	r24, Z+4	; 0x04
    2284:	95 81       	ldd	r25, Z+5	; 0x05
    2286:	9a 83       	std	Y+2, r25	; 0x02
    2288:	89 83       	std	Y+1, r24	; 0x01
    //Является ли элемент единственным в своей части списка?
    if( ((item_t *)pitem)->next == (item_t *)pitem )
    228a:	ec 81       	ldd	r30, Y+4	; 0x04
    228c:	fd 81       	ldd	r31, Y+5	; 0x05
    228e:	20 81       	ld	r18, Z
    2290:	31 81       	ldd	r19, Z+1	; 0x01
    2292:	8c 81       	ldd	r24, Y+4	; 0x04
    2294:	9d 81       	ldd	r25, Y+5	; 0x05
    2296:	28 17       	cp	r18, r24
    2298:	39 07       	cpc	r19, r25
    229a:	09 f5       	brne	.+66     	; 0x22de <pitem_fast_cut+0x7a>
    {
        // Да, является!
        xlist->item[prio] = (item_t *)0;
    229c:	8b 81       	ldd	r24, Y+3	; 0x03
    229e:	88 2f       	mov	r24, r24
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	29 81       	ldd	r18, Y+1	; 0x01
    22a4:	3a 81       	ldd	r19, Y+2	; 0x02
    22a6:	88 0f       	add	r24, r24
    22a8:	99 1f       	adc	r25, r25
    22aa:	f9 01       	movw	r30, r18
    22ac:	e8 0f       	add	r30, r24
    22ae:	f9 1f       	adc	r31, r25
    22b0:	11 82       	std	Z+1, r1	; 0x01
    22b2:	10 82       	st	Z, r1
        xlist->index &= ~(((index_t)1)<<prio);
    22b4:	e9 81       	ldd	r30, Y+1	; 0x01
    22b6:	fa 81       	ldd	r31, Y+2	; 0x02
    22b8:	80 89       	ldd	r24, Z+16	; 0x10
    22ba:	48 2f       	mov	r20, r24
    22bc:	8b 81       	ldd	r24, Y+3	; 0x03
    22be:	28 2f       	mov	r18, r24
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	81 e0       	ldi	r24, 0x01	; 1
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	02 2e       	mov	r0, r18
    22c8:	02 c0       	rjmp	.+4      	; 0x22ce <pitem_fast_cut+0x6a>
    22ca:	88 0f       	add	r24, r24
    22cc:	99 1f       	adc	r25, r25
    22ce:	0a 94       	dec	r0
    22d0:	e2 f7       	brpl	.-8      	; 0x22ca <pitem_fast_cut+0x66>
    22d2:	80 95       	com	r24
    22d4:	84 23       	and	r24, r20
    22d6:	e9 81       	ldd	r30, Y+1	; 0x01
    22d8:	fa 81       	ldd	r31, Y+2	; 0x02
    22da:	80 8b       	std	Z+16, r24	; 0x10
    22dc:	1a c0       	rjmp	.+52     	; 0x2312 <pitem_fast_cut+0xae>
    }
    else
    {
        // Нет, не является!
        // Является ли элемент головой своей части списка?
        if( xlist->item[(prio_t)prio] == (item_t *)pitem )
    22de:	8b 81       	ldd	r24, Y+3	; 0x03
    22e0:	88 2f       	mov	r24, r24
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	29 81       	ldd	r18, Y+1	; 0x01
    22e6:	3a 81       	ldd	r19, Y+2	; 0x02
    22e8:	88 0f       	add	r24, r24
    22ea:	99 1f       	adc	r25, r25
    22ec:	f9 01       	movw	r30, r18
    22ee:	e8 0f       	add	r30, r24
    22f0:	f9 1f       	adc	r31, r25
    22f2:	20 81       	ld	r18, Z
    22f4:	31 81       	ldd	r19, Z+1	; 0x01
    22f6:	8c 81       	ldd	r24, Y+4	; 0x04
    22f8:	9d 81       	ldd	r25, Y+5	; 0x05
    22fa:	28 17       	cp	r18, r24
    22fc:	39 07       	cpc	r19, r25
    22fe:	29 f4       	brne	.+10     	; 0x230a <pitem_fast_cut+0xa6>
        {
            // Является, список надо переключить
            xlist_switch( xlist, prio );
    2300:	89 81       	ldd	r24, Y+1	; 0x01
    2302:	9a 81       	ldd	r25, Y+2	; 0x02
    2304:	6b 81       	ldd	r22, Y+3	; 0x03
    2306:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <xlist_switch>
        }
        // Собственно - вырезаем элемент
        item_cut( (item_t *)pitem );
    230a:	8c 81       	ldd	r24, Y+4	; 0x04
    230c:	9d 81       	ldd	r25, Y+5	; 0x05
    230e:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <item_cut>
    }
}
    2312:	0f 90       	pop	r0
    2314:	0f 90       	pop	r0
    2316:	0f 90       	pop	r0
    2318:	0f 90       	pop	r0
    231a:	0f 90       	pop	r0
    231c:	cf 91       	pop	r28
    231e:	df 91       	pop	r29
    2320:	08 95       	ret

00002322 <pitem_cut>:
// Вырезка из списка
void pitem_cut(pitem_t * pitem)
{
    2322:	df 93       	push	r29
    2324:	cf 93       	push	r28
    2326:	00 d0       	rcall	.+0      	; 0x2328 <pitem_cut+0x6>
    2328:	cd b7       	in	r28, 0x3d	; 61
    232a:	de b7       	in	r29, 0x3e	; 62
    232c:	9a 83       	std	Y+2, r25	; 0x02
    232e:	89 83       	std	Y+1, r24	; 0x01
    pitem_fast_cut( pitem );
    2330:	89 81       	ldd	r24, Y+1	; 0x01
    2332:	9a 81       	ldd	r25, Y+2	; 0x02
    2334:	0e 94 32 11 	call	0x2264	; 0x2264 <pitem_fast_cut>
    pitem->list = (xlist_t *)0;
    2338:	e9 81       	ldd	r30, Y+1	; 0x01
    233a:	fa 81       	ldd	r31, Y+2	; 0x02
    233c:	15 82       	std	Z+5, r1	; 0x05
    233e:	14 82       	std	Z+4, r1	; 0x04
}
    2340:	0f 90       	pop	r0
    2342:	0f 90       	pop	r0
    2344:	cf 91       	pop	r28
    2346:	df 91       	pop	r29
    2348:	08 95       	ret

0000234a <pitem_xlist_chain>:

pitem_t * pitem_xlist_chain( xlist_t * src )
{
    234a:	df 93       	push	r29
    234c:	cf 93       	push	r28
    234e:	cd b7       	in	r28, 0x3d	; 61
    2350:	de b7       	in	r29, 0x3e	; 62
    2352:	2d 97       	sbiw	r28, 0x0d	; 13
    2354:	0f b6       	in	r0, 0x3f	; 63
    2356:	f8 94       	cli
    2358:	de bf       	out	0x3e, r29	; 62
    235a:	0f be       	out	0x3f, r0	; 63
    235c:	cd bf       	out	0x3d, r28	; 61
    235e:	9d 87       	std	Y+13, r25	; 0x0d
    2360:	8c 87       	std	Y+12, r24	; 0x0c
    pitem_t * ret;  // return value
    ret = (pitem_t *)xlist_head( src );     // will return former xlist head
    2362:	8c 85       	ldd	r24, Y+12	; 0x0c
    2364:	9d 85       	ldd	r25, Y+13	; 0x0d
    2366:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <xlist_head>
    236a:	9b 87       	std	Y+11, r25	; 0x0b
    236c:	8a 87       	std	Y+10, r24	; 0x0a
    if(ret)
    236e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2370:	9b 85       	ldd	r25, Y+11	; 0x0b
    2372:	00 97       	sbiw	r24, 0x00	; 0
    2374:	09 f4       	brne	.+2      	; 0x2378 <pitem_xlist_chain+0x2e>
    2376:	77 c0       	rjmp	.+238    	; 0x2466 <pitem_xlist_chain+0x11c>
                index;  // buffer for xlist index
        prio_t  prio;   // current working priority
        item_t * tail;  // current list tail;


        tail = ((item_t *)ret)->prev;           // current list tail initial value
    2378:	ea 85       	ldd	r30, Y+10	; 0x0a
    237a:	fb 85       	ldd	r31, Y+11	; 0x0b
    237c:	82 81       	ldd	r24, Z+2	; 0x02
    237e:	93 81       	ldd	r25, Z+3	; 0x03
    2380:	9e 83       	std	Y+6, r25	; 0x06
    2382:	8d 83       	std	Y+5, r24	; 0x05
        prio = ret->prio;                       // initial working prio
    2384:	ea 85       	ldd	r30, Y+10	; 0x0a
    2386:	fb 85       	ldd	r31, Y+11	; 0x0b
    2388:	86 81       	ldd	r24, Z+6	; 0x06
    238a:	8f 83       	std	Y+7, r24	; 0x07
        src->item[prio++] = (item_t *)0;        // cut all items from current xlist part
    238c:	8f 81       	ldd	r24, Y+7	; 0x07
    238e:	88 2f       	mov	r24, r24
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	2c 85       	ldd	r18, Y+12	; 0x0c
    2394:	3d 85       	ldd	r19, Y+13	; 0x0d
    2396:	88 0f       	add	r24, r24
    2398:	99 1f       	adc	r25, r25
    239a:	f9 01       	movw	r30, r18
    239c:	e8 0f       	add	r30, r24
    239e:	f9 1f       	adc	r31, r25
    23a0:	11 82       	std	Z+1, r1	; 0x01
    23a2:	10 82       	st	Z, r1
    23a4:	8f 81       	ldd	r24, Y+7	; 0x07
    23a6:	8f 5f       	subi	r24, 0xFF	; 255
    23a8:	8f 83       	std	Y+7, r24	; 0x07
        index = src->index;                     // remember xlist index to improve performance
    23aa:	ec 85       	ldd	r30, Y+12	; 0x0c
    23ac:	fd 85       	ldd	r31, Y+13	; 0x0d
    23ae:	80 89       	ldd	r24, Z+16	; 0x10
    23b0:	88 87       	std	Y+8, r24	; 0x08
        mask = ((index_t)1) << prio;            // initial mask value
    23b2:	8f 81       	ldd	r24, Y+7	; 0x07
    23b4:	28 2f       	mov	r18, r24
    23b6:	30 e0       	ldi	r19, 0x00	; 0
    23b8:	81 e0       	ldi	r24, 0x01	; 1
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	02 2e       	mov	r0, r18
    23be:	02 c0       	rjmp	.+4      	; 0x23c4 <pitem_xlist_chain+0x7a>
    23c0:	88 0f       	add	r24, r24
    23c2:	99 1f       	adc	r25, r25
    23c4:	0a 94       	dec	r0
    23c6:	e2 f7       	brpl	.-8      	; 0x23c0 <pitem_xlist_chain+0x76>
    23c8:	89 87       	std	Y+9, r24	; 0x09
    23ca:	3b c0       	rjmp	.+118    	; 0x2442 <pitem_xlist_chain+0xf8>
        // cut all items from xlist and form an ordinary list of them
        while(mask)
        {
            if( index & mask )
    23cc:	88 85       	ldd	r24, Y+8	; 0x08
    23ce:	99 85       	ldd	r25, Y+9	; 0x09
    23d0:	89 23       	and	r24, r25
    23d2:	88 23       	and	r24, r24
    23d4:	81 f1       	breq	.+96     	; 0x2436 <pitem_xlist_chain+0xec>
            {
                // current part of xlist has some items to cut
                item_t * xhead;
                item_t * buf;
                xhead = src->item[prio];                    // current xlist head;
    23d6:	8f 81       	ldd	r24, Y+7	; 0x07
    23d8:	88 2f       	mov	r24, r24
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	2c 85       	ldd	r18, Y+12	; 0x0c
    23de:	3d 85       	ldd	r19, Y+13	; 0x0d
    23e0:	88 0f       	add	r24, r24
    23e2:	99 1f       	adc	r25, r25
    23e4:	f9 01       	movw	r30, r18
    23e6:	e8 0f       	add	r30, r24
    23e8:	f9 1f       	adc	r31, r25
    23ea:	80 81       	ld	r24, Z
    23ec:	91 81       	ldd	r25, Z+1	; 0x01
    23ee:	9c 83       	std	Y+4, r25	; 0x04
    23f0:	8b 83       	std	Y+3, r24	; 0x03
                src->item[prio] = (item_t *)0;              // cut all items from current xlist part
    23f2:	8f 81       	ldd	r24, Y+7	; 0x07
    23f4:	88 2f       	mov	r24, r24
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	2c 85       	ldd	r18, Y+12	; 0x0c
    23fa:	3d 85       	ldd	r19, Y+13	; 0x0d
    23fc:	88 0f       	add	r24, r24
    23fe:	99 1f       	adc	r25, r25
    2400:	f9 01       	movw	r30, r18
    2402:	e8 0f       	add	r30, r24
    2404:	f9 1f       	adc	r31, r25
    2406:	11 82       	std	Z+1, r1	; 0x01
    2408:	10 82       	st	Z, r1
                // chain former xlist head to a list tail
                tail->next = xhead;
    240a:	ed 81       	ldd	r30, Y+5	; 0x05
    240c:	fe 81       	ldd	r31, Y+6	; 0x06
    240e:	8b 81       	ldd	r24, Y+3	; 0x03
    2410:	9c 81       	ldd	r25, Y+4	; 0x04
    2412:	91 83       	std	Z+1, r25	; 0x01
    2414:	80 83       	st	Z, r24
                buf = xhead->prev;
    2416:	eb 81       	ldd	r30, Y+3	; 0x03
    2418:	fc 81       	ldd	r31, Y+4	; 0x04
    241a:	82 81       	ldd	r24, Z+2	; 0x02
    241c:	93 81       	ldd	r25, Z+3	; 0x03
    241e:	9a 83       	std	Y+2, r25	; 0x02
    2420:	89 83       	std	Y+1, r24	; 0x01
                xhead->prev = tail;
    2422:	eb 81       	ldd	r30, Y+3	; 0x03
    2424:	fc 81       	ldd	r31, Y+4	; 0x04
    2426:	8d 81       	ldd	r24, Y+5	; 0x05
    2428:	9e 81       	ldd	r25, Y+6	; 0x06
    242a:	93 83       	std	Z+3, r25	; 0x03
    242c:	82 83       	std	Z+2, r24	; 0x02
                tail = buf;
    242e:	89 81       	ldd	r24, Y+1	; 0x01
    2430:	9a 81       	ldd	r25, Y+2	; 0x02
    2432:	9e 83       	std	Y+6, r25	; 0x06
    2434:	8d 83       	std	Y+5, r24	; 0x05
            }
            mask <<= (prio_t)1;
    2436:	89 85       	ldd	r24, Y+9	; 0x09
    2438:	88 0f       	add	r24, r24
    243a:	89 87       	std	Y+9, r24	; 0x09
            prio++;
    243c:	8f 81       	ldd	r24, Y+7	; 0x07
    243e:	8f 5f       	subi	r24, 0xFF	; 255
    2440:	8f 83       	std	Y+7, r24	; 0x07
        prio = ret->prio;                       // initial working prio
        src->item[prio++] = (item_t *)0;        // cut all items from current xlist part
        index = src->index;                     // remember xlist index to improve performance
        mask = ((index_t)1) << prio;            // initial mask value
        // cut all items from xlist and form an ordinary list of them
        while(mask)
    2442:	89 85       	ldd	r24, Y+9	; 0x09
    2444:	88 23       	and	r24, r24
    2446:	11 f6       	brne	.-124    	; 0x23cc <pitem_xlist_chain+0x82>
            }
            mask <<= (prio_t)1;
            prio++;
        }
        // complete the list by chaining tail and head
        ((item_t *)ret)->prev = tail;
    2448:	ea 85       	ldd	r30, Y+10	; 0x0a
    244a:	fb 85       	ldd	r31, Y+11	; 0x0b
    244c:	8d 81       	ldd	r24, Y+5	; 0x05
    244e:	9e 81       	ldd	r25, Y+6	; 0x06
    2450:	93 83       	std	Z+3, r25	; 0x03
    2452:	82 83       	std	Z+2, r24	; 0x02
        tail->next = (item_t *)ret;
    2454:	8a 85       	ldd	r24, Y+10	; 0x0a
    2456:	9b 85       	ldd	r25, Y+11	; 0x0b
    2458:	ed 81       	ldd	r30, Y+5	; 0x05
    245a:	fe 81       	ldd	r31, Y+6	; 0x06
    245c:	91 83       	std	Z+1, r25	; 0x01
    245e:	80 83       	st	Z, r24
        src->index = (index_t)0;        // xlist is empty.
    2460:	ec 85       	ldd	r30, Y+12	; 0x0c
    2462:	fd 85       	ldd	r31, Y+13	; 0x0d
    2464:	10 8a       	std	Z+16, r1	; 0x10
    }
    return ret;                     // return list head;
    2466:	8a 85       	ldd	r24, Y+10	; 0x0a
    2468:	9b 85       	ldd	r25, Y+11	; 0x0b
}
    246a:	2d 96       	adiw	r28, 0x0d	; 13
    246c:	0f b6       	in	r0, 0x3f	; 63
    246e:	f8 94       	cli
    2470:	de bf       	out	0x3e, r29	; 62
    2472:	0f be       	out	0x3f, r0	; 63
    2474:	cd bf       	out	0x3d, r28	; 61
    2476:	cf 91       	pop	r28
    2478:	df 91       	pop	r29
    247a:	08 95       	ret

0000247c <proc_init_isr>:
    bool_t is_rt // если true, значит процесс будет иметть поведение RT
#ifdef CONFIG_MP
    ,affinity_t affinity
#endif // CONFIG_MP
)
{
    247c:	8f 92       	push	r8
    247e:	af 92       	push	r10
    2480:	bf 92       	push	r11
    2482:	cf 92       	push	r12
    2484:	ef 92       	push	r14
    2486:	ff 92       	push	r15
    2488:	0f 93       	push	r16
    248a:	1f 93       	push	r17
    248c:	df 93       	push	r29
    248e:	cf 93       	push	r28
    2490:	cd b7       	in	r28, 0x3d	; 61
    2492:	de b7       	in	r29, 0x3e	; 62
    2494:	62 97       	sbiw	r28, 0x12	; 18
    2496:	0f b6       	in	r0, 0x3f	; 63
    2498:	f8 94       	cli
    249a:	de bf       	out	0x3e, r29	; 62
    249c:	0f be       	out	0x3f, r0	; 63
    249e:	cd bf       	out	0x3d, r28	; 61
    24a0:	9a 83       	std	Y+2, r25	; 0x02
    24a2:	89 83       	std	Y+1, r24	; 0x01
    24a4:	7c 83       	std	Y+4, r23	; 0x04
    24a6:	6b 83       	std	Y+3, r22	; 0x03
    24a8:	5e 83       	std	Y+6, r21	; 0x06
    24aa:	4d 83       	std	Y+5, r20	; 0x05
    24ac:	38 87       	std	Y+8, r19	; 0x08
    24ae:	2f 83       	std	Y+7, r18	; 0x07
    24b0:	1a 87       	std	Y+10, r17	; 0x0a
    24b2:	09 87       	std	Y+9, r16	; 0x09
    24b4:	fc 86       	std	Y+12, r15	; 0x0c
    24b6:	eb 86       	std	Y+11, r14	; 0x0b
    24b8:	cd 86       	std	Y+13, r12	; 0x0d
    24ba:	bf 86       	std	Y+15, r11	; 0x0f
    24bc:	ae 86       	std	Y+14, r10	; 0x0e
    24be:	88 8a       	std	Y+16, r8	; 0x10
    SPIN_INIT( proc );
    24c0:	89 81       	ldd	r24, Y+1	; 0x01
    24c2:	9a 81       	ldd	r25, Y+2	; 0x02
    24c4:	83 96       	adiw	r24, 0x23	; 35
    24c6:	0e 94 0b 01 	call	0x216	; 0x216 <spin_init>
    SPIN_LOCK( proc );
    24ca:	89 81       	ldd	r24, Y+1	; 0x01
    24cc:	9a 81       	ldd	r25, Y+2	; 0x02
    24ce:	83 96       	adiw	r24, 0x23	; 35
    24d0:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>

    pitem_init( (pitem_t *)proc, prio );
    24d4:	89 81       	ldd	r24, Y+1	; 0x01
    24d6:	9a 81       	ldd	r25, Y+2	; 0x02
    24d8:	6d 85       	ldd	r22, Y+13	; 0x0d
    24da:	0e 94 c1 10 	call	0x2182	; 0x2182 <pitem_init>
    proc->flags = ( is_rt )?PROC_FLG_RT:(flag_t)0;
    24de:	88 89       	ldd	r24, Y+16	; 0x10
    24e0:	88 23       	and	r24, r24
    24e2:	29 f0       	breq	.+10     	; 0x24ee <proc_init_isr+0x72>
    24e4:	81 e0       	ldi	r24, 0x01	; 1
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	9a 8b       	std	Y+18, r25	; 0x12
    24ea:	89 8b       	std	Y+17, r24	; 0x11
    24ec:	02 c0       	rjmp	.+4      	; 0x24f2 <proc_init_isr+0x76>
    24ee:	1a 8a       	std	Y+18, r1	; 0x12
    24f0:	19 8a       	std	Y+17, r1	; 0x11
    24f2:	e9 81       	ldd	r30, Y+1	; 0x01
    24f4:	fa 81       	ldd	r31, Y+2	; 0x02
    24f6:	89 89       	ldd	r24, Y+17	; 0x11
    24f8:	9a 89       	ldd	r25, Y+18	; 0x12
    24fa:	90 87       	std	Z+8, r25	; 0x08
    24fc:	87 83       	std	Z+7, r24	; 0x07

    PROC_LRES_INIT( proc );
    24fe:	89 81       	ldd	r24, Y+1	; 0x01
    2500:	9a 81       	ldd	r25, Y+2	; 0x02
    2502:	0a 96       	adiw	r24, 0x0a	; 10
    2504:	0e 94 0e 10 	call	0x201c	; 0x201c <pcounter_init>
#ifdef CONFIG_USE_HIGHEST_LOCKER
    proc->base_prio = prio;
    2508:	e9 81       	ldd	r30, Y+1	; 0x01
    250a:	fa 81       	ldd	r31, Y+2	; 0x02
    250c:	8d 85       	ldd	r24, Y+13	; 0x0d
    250e:	81 87       	std	Z+9, r24	; 0x09
#endif
    proc->time_quant = time_quant;
    2510:	8e 85       	ldd	r24, Y+14	; 0x0e
    2512:	9f 85       	ldd	r25, Y+15	; 0x0f
    2514:	e9 81       	ldd	r30, Y+1	; 0x01
    2516:	fa 81       	ldd	r31, Y+2	; 0x02
    2518:	94 8f       	std	Z+28, r25	; 0x1c
    251a:	83 8f       	std	Z+27, r24	; 0x1b
    proc->timer = time_quant;
    251c:	8e 85       	ldd	r24, Y+14	; 0x0e
    251e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2520:	e9 81       	ldd	r30, Y+1	; 0x01
    2522:	fa 81       	ldd	r31, Y+2	; 0x02
    2524:	96 8f       	std	Z+30, r25	; 0x1e
    2526:	85 8f       	std	Z+29, r24	; 0x1d
#ifdef CONFIG_MP
    proc->core_id = (core_id_t)0;
    2528:	e9 81       	ldd	r30, Y+1	; 0x01
    252a:	fa 81       	ldd	r31, Y+2	; 0x02
    252c:	11 a2       	std	Z+33, r1	; 0x21
    proc->affinity = affinity;
    252e:	e9 81       	ldd	r30, Y+1	; 0x01
    2530:	fa 81       	ldd	r31, Y+2	; 0x02
    2532:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2534:	82 a3       	std	Z+34, r24	; 0x22
#endif // CONFIG_MP
    proc->pmain = pmain;
    2536:	e9 81       	ldd	r30, Y+1	; 0x01
    2538:	fa 81       	ldd	r31, Y+2	; 0x02
    253a:	8b 81       	ldd	r24, Y+3	; 0x03
    253c:	9c 81       	ldd	r25, Y+4	; 0x04
    253e:	95 a3       	std	Z+37, r25	; 0x25
    2540:	84 a3       	std	Z+36, r24	; 0x24
    proc->sv_hook = sv_hook;
    2542:	e9 81       	ldd	r30, Y+1	; 0x01
    2544:	fa 81       	ldd	r31, Y+2	; 0x02
    2546:	8d 81       	ldd	r24, Y+5	; 0x05
    2548:	9e 81       	ldd	r25, Y+6	; 0x06
    254a:	97 a3       	std	Z+39, r25	; 0x27
    254c:	86 a3       	std	Z+38, r24	; 0x26
    proc->rs_hook = rs_hook;
    254e:	e9 81       	ldd	r30, Y+1	; 0x01
    2550:	fa 81       	ldd	r31, Y+2	; 0x02
    2552:	8f 81       	ldd	r24, Y+7	; 0x07
    2554:	98 85       	ldd	r25, Y+8	; 0x08
    2556:	91 a7       	std	Z+41, r25	; 0x29
    2558:	80 a7       	std	Z+40, r24	; 0x28
    proc->arg = arg;
    255a:	e9 81       	ldd	r30, Y+1	; 0x01
    255c:	fa 81       	ldd	r31, Y+2	; 0x02
    255e:	89 85       	ldd	r24, Y+9	; 0x09
    2560:	9a 85       	ldd	r25, Y+10	; 0x0a
    2562:	93 a7       	std	Z+43, r25	; 0x2b
    2564:	82 a7       	std	Z+42, r24	; 0x2a
    proc->sstart = sstart;
    2566:	e9 81       	ldd	r30, Y+1	; 0x01
    2568:	fa 81       	ldd	r31, Y+2	; 0x02
    256a:	8b 85       	ldd	r24, Y+11	; 0x0b
    256c:	9c 85       	ldd	r25, Y+12	; 0x0c
    256e:	95 a7       	std	Z+45, r25	; 0x2d
    2570:	84 a7       	std	Z+44, r24	; 0x2c
    if( sstart )proc->spointer = proc_stack_init(sstart, (code_t)proc_run_wrapper, (void *)proc);
    2572:	8b 85       	ldd	r24, Y+11	; 0x0b
    2574:	9c 85       	ldd	r25, Y+12	; 0x0c
    2576:	00 97       	sbiw	r24, 0x00	; 0
    2578:	71 f0       	breq	.+28     	; 0x2596 <proc_init_isr+0x11a>
    257a:	46 ef       	ldi	r20, 0xF6	; 246
    257c:	5c e1       	ldi	r21, 0x1C	; 28
    257e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2580:	9c 85       	ldd	r25, Y+12	; 0x0c
    2582:	29 81       	ldd	r18, Y+1	; 0x01
    2584:	3a 81       	ldd	r19, Y+2	; 0x02
    2586:	ba 01       	movw	r22, r20
    2588:	a9 01       	movw	r20, r18
    258a:	0e 94 01 0b 	call	0x1602	; 0x1602 <proc_stack_init>
    258e:	e9 81       	ldd	r30, Y+1	; 0x01
    2590:	fa 81       	ldd	r31, Y+2	; 0x02
    2592:	97 a7       	std	Z+47, r25	; 0x2f
    2594:	86 a7       	std	Z+46, r24	; 0x2e

    SPIN_UNLOCK( proc );
    2596:	89 81       	ldd	r24, Y+1	; 0x01
    2598:	9a 81       	ldd	r25, Y+2	; 0x02
    259a:	83 96       	adiw	r24, 0x23	; 35
    259c:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
}
    25a0:	62 96       	adiw	r28, 0x12	; 18
    25a2:	0f b6       	in	r0, 0x3f	; 63
    25a4:	f8 94       	cli
    25a6:	de bf       	out	0x3e, r29	; 62
    25a8:	0f be       	out	0x3f, r0	; 63
    25aa:	cd bf       	out	0x3d, r28	; 61
    25ac:	cf 91       	pop	r28
    25ae:	df 91       	pop	r29
    25b0:	1f 91       	pop	r17
    25b2:	0f 91       	pop	r16
    25b4:	ff 90       	pop	r15
    25b6:	ef 90       	pop	r14
    25b8:	cf 90       	pop	r12
    25ba:	bf 90       	pop	r11
    25bc:	af 90       	pop	r10
    25be:	8f 90       	pop	r8
    25c0:	08 95       	ret

000025c2 <_proc_run_>:
//  Функция для внутреннего использования - собственно запуск процесса
#ifdef CONFIG_MP
void _proc_run_( proc_t * proc )
{
    25c2:	df 93       	push	r29
    25c4:	cf 93       	push	r28
    25c6:	00 d0       	rcall	.+0      	; 0x25c8 <_proc_run_+0x6>
    25c8:	00 d0       	rcall	.+0      	; 0x25ca <_proc_run_+0x8>
    25ca:	cd b7       	in	r28, 0x3d	; 61
    25cc:	de b7       	in	r29, 0x3e	; 62
    25ce:	9c 83       	std	Y+4, r25	; 0x04
    25d0:	8b 83       	std	Y+3, r24	; 0x03
    sched_t * proc_sched;
    proc_sched = (sched_t *)kernel.sched + proc->core_id;
    25d2:	eb 81       	ldd	r30, Y+3	; 0x03
    25d4:	fc 81       	ldd	r31, Y+4	; 0x04
    25d6:	81 a1       	ldd	r24, Z+33	; 0x21
    25d8:	28 2f       	mov	r18, r24
    25da:	30 e0       	ldi	r19, 0x00	; 0
    25dc:	8b e2       	ldi	r24, 0x2B	; 43
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	ac 01       	movw	r20, r24
    25e2:	24 9f       	mul	r18, r20
    25e4:	c0 01       	movw	r24, r0
    25e6:	25 9f       	mul	r18, r21
    25e8:	90 0d       	add	r25, r0
    25ea:	34 9f       	mul	r19, r20
    25ec:	90 0d       	add	r25, r0
    25ee:	11 24       	eor	r1, r1
    25f0:	85 52       	subi	r24, 0x25	; 37
    25f2:	9d 4f       	sbci	r25, 0xFD	; 253
    25f4:	9a 83       	std	Y+2, r25	; 0x02
    25f6:	89 83       	std	Y+1, r24	; 0x01
    SPIN_LOCK( proc_sched );
    25f8:	89 81       	ldd	r24, Y+1	; 0x01
    25fa:	9a 81       	ldd	r25, Y+2	; 0x02
    25fc:	8a 96       	adiw	r24, 0x2a	; 42
    25fe:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    pitem_insert( (pitem_t *)proc, proc_sched->ready );
    2602:	8b 81       	ldd	r24, Y+3	; 0x03
    2604:	9c 81       	ldd	r25, Y+4	; 0x04
    2606:	e9 81       	ldd	r30, Y+1	; 0x01
    2608:	fa 81       	ldd	r31, Y+2	; 0x02
    260a:	22 81       	ldd	r18, Z+2	; 0x02
    260c:	33 81       	ldd	r19, Z+3	; 0x03
    260e:	b9 01       	movw	r22, r18
    2610:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <pitem_insert>
    SPIN_UNLOCK( proc_sched );
    2614:	89 81       	ldd	r24, Y+1	; 0x01
    2616:	9a 81       	ldd	r25, Y+2	; 0x02
    2618:	8a 96       	adiw	r24, 0x2a	; 42
    261a:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
}
    261e:	0f 90       	pop	r0
    2620:	0f 90       	pop	r0
    2622:	0f 90       	pop	r0
    2624:	0f 90       	pop	r0
    2626:	cf 91       	pop	r28
    2628:	df 91       	pop	r29
    262a:	08 95       	ret

0000262c <_proc_run>:
#endif // CONFIG_MP

void _proc_run( proc_t * proc )
{
    262c:	df 93       	push	r29
    262e:	cf 93       	push	r28
    2630:	00 d0       	rcall	.+0      	; 0x2632 <_proc_run+0x6>
    2632:	cd b7       	in	r28, 0x3d	; 61
    2634:	de b7       	in	r29, 0x3e	; 62
    2636:	9a 83       	std	Y+2, r25	; 0x02
    2638:	89 83       	std	Y+1, r24	; 0x01
    proc->flags |= PROC_FLG_RUN;
    263a:	e9 81       	ldd	r30, Y+1	; 0x01
    263c:	fa 81       	ldd	r31, Y+2	; 0x02
    263e:	87 81       	ldd	r24, Z+7	; 0x07
    2640:	90 85       	ldd	r25, Z+8	; 0x08
    2642:	82 60       	ori	r24, 0x02	; 2
    2644:	e9 81       	ldd	r30, Y+1	; 0x01
    2646:	fa 81       	ldd	r31, Y+2	; 0x02
    2648:	90 87       	std	Z+8, r25	; 0x08
    264a:	87 83       	std	Z+7, r24	; 0x07
#ifdef CONFIG_MP
    spin_lock( &kernel.stat_lock );
    264c:	83 e9       	ldi	r24, 0x93	; 147
    264e:	93 e0       	ldi	r25, 0x03	; 3
    2650:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    proc->core_id = sched_load_balancer( proc, (stat_t *)kernel.stat );
    2654:	89 81       	ldd	r24, Y+1	; 0x01
    2656:	9a 81       	ldd	r25, Y+2	; 0x02
    2658:	21 e9       	ldi	r18, 0x91	; 145
    265a:	33 e0       	ldi	r19, 0x03	; 3
    265c:	b9 01       	movw	r22, r18
    265e:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <sched_load_balancer>
    2662:	e9 81       	ldd	r30, Y+1	; 0x01
    2664:	fa 81       	ldd	r31, Y+2	; 0x02
    2666:	81 a3       	std	Z+33, r24	; 0x21
    stat_inc( proc, (stat_t *)kernel.stat+proc->core_id );
    2668:	e9 81       	ldd	r30, Y+1	; 0x01
    266a:	fa 81       	ldd	r31, Y+2	; 0x02
    266c:	81 a1       	ldd	r24, Z+33	; 0x21
    266e:	88 2f       	mov	r24, r24
    2670:	90 e0       	ldi	r25, 0x00	; 0
    2672:	9c 01       	movw	r18, r24
    2674:	2f 56       	subi	r18, 0x6F	; 111
    2676:	3c 4f       	sbci	r19, 0xFC	; 252
    2678:	89 81       	ldd	r24, Y+1	; 0x01
    267a:	9a 81       	ldd	r25, Y+2	; 0x02
    267c:	b9 01       	movw	r22, r18
    267e:	0e 94 6e 01 	call	0x2dc	; 0x2dc <stat_inc>
    spin_unlock( &kernel.stat_lock );
    2682:	83 e9       	ldi	r24, 0x93	; 147
    2684:	93 e0       	ldi	r25, 0x03	; 3
    2686:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
#endif
    _proc_run_( proc );
    268a:	89 81       	ldd	r24, Y+1	; 0x01
    268c:	9a 81       	ldd	r25, Y+2	; 0x02
    268e:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <_proc_run_>

    RESCHED_PROC( proc );
    2692:	e9 81       	ldd	r30, Y+1	; 0x01
    2694:	fa 81       	ldd	r31, Y+2	; 0x02
    2696:	81 a1       	ldd	r24, Z+33	; 0x21
    2698:	0e 94 b4 01 	call	0x368	; 0x368 <resched>
}
    269c:	0f 90       	pop	r0
    269e:	0f 90       	pop	r0
    26a0:	cf 91       	pop	r28
    26a2:	df 91       	pop	r29
    26a4:	08 95       	ret

000026a6 <proc_run_isr>:
// Функция общего пользования - запуск процесса из обработчика прерывания, прерывания должны быть запрещены во время запуска
bool_t proc_run_isr(proc_t * proc)
{
    26a6:	df 93       	push	r29
    26a8:	cf 93       	push	r28
    26aa:	00 d0       	rcall	.+0      	; 0x26ac <proc_run_isr+0x6>
    26ac:	0f 92       	push	r0
    26ae:	cd b7       	in	r28, 0x3d	; 61
    26b0:	de b7       	in	r29, 0x3e	; 62
    26b2:	9b 83       	std	Y+3, r25	; 0x03
    26b4:	8a 83       	std	Y+2, r24	; 0x02
    bool_t ret = (bool_t)1;
    26b6:	81 e0       	ldi	r24, 0x01	; 1
    26b8:	89 83       	std	Y+1, r24	; 0x01

    SPIN_LOCK( proc );
    26ba:	8a 81       	ldd	r24, Y+2	; 0x02
    26bc:	9b 81       	ldd	r25, Y+3	; 0x03
    26be:	83 96       	adiw	r24, 0x23	; 35
    26c0:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>

    if( proc->flags & (PROC_FLG_RUN|PROC_FLG_QUEUE|PROC_FLG_WAIT|PROC_FLG_IPCW|PROC_FLG_END|PROC_FLG_DEAD|PROC_FLG_WD_STOP) )
    26c4:	ea 81       	ldd	r30, Y+2	; 0x02
    26c6:	fb 81       	ldd	r31, Y+3	; 0x03
    26c8:	87 81       	ldd	r24, Z+7	; 0x07
    26ca:	90 85       	ldd	r25, Z+8	; 0x08
    26cc:	82 77       	andi	r24, 0x72	; 114
    26ce:	97 70       	andi	r25, 0x07	; 7
    26d0:	00 97       	sbiw	r24, 0x00	; 0
    26d2:	11 f0       	breq	.+4      	; 0x26d8 <proc_run_isr+0x32>
    {
        ret = (bool_t)0;
    26d4:	19 82       	std	Y+1, r1	; 0x01
    26d6:	04 c0       	rjmp	.+8      	; 0x26e0 <proc_run_isr+0x3a>
        goto end;
    }
    _proc_run( proc );
    26d8:	8a 81       	ldd	r24, Y+2	; 0x02
    26da:	9b 81       	ldd	r25, Y+3	; 0x03
    26dc:	0e 94 16 13 	call	0x262c	; 0x262c <_proc_run>
end:

    SPIN_UNLOCK( proc );
    26e0:	8a 81       	ldd	r24, Y+2	; 0x02
    26e2:	9b 81       	ldd	r25, Y+3	; 0x03
    26e4:	83 96       	adiw	r24, 0x23	; 35
    26e6:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>

    return ret;
    26ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    26ec:	0f 90       	pop	r0
    26ee:	0f 90       	pop	r0
    26f0:	0f 90       	pop	r0
    26f2:	cf 91       	pop	r28
    26f4:	df 91       	pop	r29
    26f6:	08 95       	ret

000026f8 <proc_restart_isr>:
// Перезепуск процесса из обработчика прерываний, прерывания должны быть запрещены
bool_t proc_restart_isr(proc_t * proc)
{
    26f8:	df 93       	push	r29
    26fa:	cf 93       	push	r28
    26fc:	00 d0       	rcall	.+0      	; 0x26fe <proc_restart_isr+0x6>
    26fe:	00 d0       	rcall	.+0      	; 0x2700 <proc_restart_isr+0x8>
    2700:	0f 92       	push	r0
    2702:	cd b7       	in	r28, 0x3d	; 61
    2704:	de b7       	in	r29, 0x3e	; 62
    2706:	9b 83       	std	Y+3, r25	; 0x03
    2708:	8a 83       	std	Y+2, r24	; 0x02
    bool_t ret = (bool_t)1;
    270a:	81 e0       	ldi	r24, 0x01	; 1
    270c:	89 83       	std	Y+1, r24	; 0x01

    SPIN_LOCK( proc );
    270e:	8a 81       	ldd	r24, Y+2	; 0x02
    2710:	9b 81       	ldd	r25, Y+3	; 0x03
    2712:	83 96       	adiw	r24, 0x23	; 35
    2714:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>

    if( proc->flags & (PROC_FLG_RUN|PROC_FLG_MUTEX|PROC_FLG_SEM|PROC_FLG_QUEUE|PROC_FLG_WAIT|PROC_FLG_IPCW|PROC_FLG_DEAD) )
    2718:	ea 81       	ldd	r30, Y+2	; 0x02
    271a:	fb 81       	ldd	r31, Y+3	; 0x03
    271c:	87 81       	ldd	r24, Z+7	; 0x07
    271e:	90 85       	ldd	r25, Z+8	; 0x08
    2720:	8e 77       	andi	r24, 0x7E	; 126
    2722:	94 70       	andi	r25, 0x04	; 4
    2724:	00 97       	sbiw	r24, 0x00	; 0
    2726:	11 f0       	breq	.+4      	; 0x272c <proc_restart_isr+0x34>
    {
        ret = (bool_t)0;
    2728:	19 82       	std	Y+1, r1	; 0x01
    272a:	3b c0       	rjmp	.+118    	; 0x27a2 <proc_restart_isr+0xaa>
        goto end;
    }
    proc->flags = ( proc->flags & PROC_FLG_RT )?PROC_FLG_RT:(flag_t)0;
    272c:	ea 81       	ldd	r30, Y+2	; 0x02
    272e:	fb 81       	ldd	r31, Y+3	; 0x03
    2730:	87 81       	ldd	r24, Z+7	; 0x07
    2732:	90 85       	ldd	r25, Z+8	; 0x08
    2734:	81 70       	andi	r24, 0x01	; 1
    2736:	90 70       	andi	r25, 0x00	; 0
    2738:	88 23       	and	r24, r24
    273a:	29 f0       	breq	.+10     	; 0x2746 <proc_restart_isr+0x4e>
    273c:	81 e0       	ldi	r24, 0x01	; 1
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	9d 83       	std	Y+5, r25	; 0x05
    2742:	8c 83       	std	Y+4, r24	; 0x04
    2744:	02 c0       	rjmp	.+4      	; 0x274a <proc_restart_isr+0x52>
    2746:	1d 82       	std	Y+5, r1	; 0x05
    2748:	1c 82       	std	Y+4, r1	; 0x04
    274a:	ea 81       	ldd	r30, Y+2	; 0x02
    274c:	fb 81       	ldd	r31, Y+3	; 0x03
    274e:	8c 81       	ldd	r24, Y+4	; 0x04
    2750:	9d 81       	ldd	r25, Y+5	; 0x05
    2752:	90 87       	std	Z+8, r25	; 0x08
    2754:	87 83       	std	Z+7, r24	; 0x07

    PROC_LRES_INIT( proc );
    2756:	8a 81       	ldd	r24, Y+2	; 0x02
    2758:	9b 81       	ldd	r25, Y+3	; 0x03
    275a:	0a 96       	adiw	r24, 0x0a	; 10
    275c:	0e 94 0e 10 	call	0x201c	; 0x201c <pcounter_init>

    proc->timer = proc->time_quant;
    2760:	ea 81       	ldd	r30, Y+2	; 0x02
    2762:	fb 81       	ldd	r31, Y+3	; 0x03
    2764:	83 8d       	ldd	r24, Z+27	; 0x1b
    2766:	94 8d       	ldd	r25, Z+28	; 0x1c
    2768:	ea 81       	ldd	r30, Y+2	; 0x02
    276a:	fb 81       	ldd	r31, Y+3	; 0x03
    276c:	96 8f       	std	Z+30, r25	; 0x1e
    276e:	85 8f       	std	Z+29, r24	; 0x1d

    if( proc->sstart )proc->spointer = proc_stack_init( proc->sstart, (code_t)proc_run_wrapper, (void *)proc );
    2770:	ea 81       	ldd	r30, Y+2	; 0x02
    2772:	fb 81       	ldd	r31, Y+3	; 0x03
    2774:	84 a5       	ldd	r24, Z+44	; 0x2c
    2776:	95 a5       	ldd	r25, Z+45	; 0x2d
    2778:	00 97       	sbiw	r24, 0x00	; 0
    277a:	79 f0       	breq	.+30     	; 0x279a <proc_restart_isr+0xa2>
    277c:	ea 81       	ldd	r30, Y+2	; 0x02
    277e:	fb 81       	ldd	r31, Y+3	; 0x03
    2780:	84 a5       	ldd	r24, Z+44	; 0x2c
    2782:	95 a5       	ldd	r25, Z+45	; 0x2d
    2784:	26 ef       	ldi	r18, 0xF6	; 246
    2786:	3c e1       	ldi	r19, 0x1C	; 28
    2788:	4a 81       	ldd	r20, Y+2	; 0x02
    278a:	5b 81       	ldd	r21, Y+3	; 0x03
    278c:	b9 01       	movw	r22, r18
    278e:	0e 94 01 0b 	call	0x1602	; 0x1602 <proc_stack_init>
    2792:	ea 81       	ldd	r30, Y+2	; 0x02
    2794:	fb 81       	ldd	r31, Y+3	; 0x03
    2796:	97 a7       	std	Z+47, r25	; 0x2f
    2798:	86 a7       	std	Z+46, r24	; 0x2e
    _proc_run( proc );
    279a:	8a 81       	ldd	r24, Y+2	; 0x02
    279c:	9b 81       	ldd	r25, Y+3	; 0x03
    279e:	0e 94 16 13 	call	0x262c	; 0x262c <_proc_run>
end:

    SPIN_UNLOCK( proc );
    27a2:	8a 81       	ldd	r24, Y+2	; 0x02
    27a4:	9b 81       	ldd	r25, Y+3	; 0x03
    27a6:	83 96       	adiw	r24, 0x23	; 35
    27a8:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>

    return ret;
    27ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    27ae:	0f 90       	pop	r0
    27b0:	0f 90       	pop	r0
    27b2:	0f 90       	pop	r0
    27b4:	0f 90       	pop	r0
    27b6:	0f 90       	pop	r0
    27b8:	cf 91       	pop	r28
    27ba:	df 91       	pop	r29
    27bc:	08 95       	ret

000027be <_proc_stop_>:
// Функция для внутреннего использования, останов процесса

#ifdef CONFIG_MP
void _proc_stop_(proc_t * proc)
{
    27be:	df 93       	push	r29
    27c0:	cf 93       	push	r28
    27c2:	00 d0       	rcall	.+0      	; 0x27c4 <_proc_stop_+0x6>
    27c4:	00 d0       	rcall	.+0      	; 0x27c6 <_proc_stop_+0x8>
    27c6:	cd b7       	in	r28, 0x3d	; 61
    27c8:	de b7       	in	r29, 0x3e	; 62
    27ca:	9c 83       	std	Y+4, r25	; 0x04
    27cc:	8b 83       	std	Y+3, r24	; 0x03
    spin_lock( &kernel.stat_lock );
    27ce:	83 e9       	ldi	r24, 0x93	; 147
    27d0:	93 e0       	ldi	r25, 0x03	; 3
    27d2:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    stat_dec( proc, (stat_t *)kernel.stat + proc->core_id );
    27d6:	eb 81       	ldd	r30, Y+3	; 0x03
    27d8:	fc 81       	ldd	r31, Y+4	; 0x04
    27da:	81 a1       	ldd	r24, Z+33	; 0x21
    27dc:	88 2f       	mov	r24, r24
    27de:	90 e0       	ldi	r25, 0x00	; 0
    27e0:	9c 01       	movw	r18, r24
    27e2:	2f 56       	subi	r18, 0x6F	; 111
    27e4:	3c 4f       	sbci	r19, 0xFC	; 252
    27e6:	8b 81       	ldd	r24, Y+3	; 0x03
    27e8:	9c 81       	ldd	r25, Y+4	; 0x04
    27ea:	b9 01       	movw	r22, r18
    27ec:	0e 94 58 01 	call	0x2b0	; 0x2b0 <stat_dec>
    spin_unlock( &kernel.stat_lock );
    27f0:	83 e9       	ldi	r24, 0x93	; 147
    27f2:	93 e0       	ldi	r25, 0x03	; 3
    27f4:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
    {
        lock_t * xlist_lock;
        xlist_lock = &((sched_t *)kernel.sched + proc->core_id)->lock;
    27f8:	eb 81       	ldd	r30, Y+3	; 0x03
    27fa:	fc 81       	ldd	r31, Y+4	; 0x04
    27fc:	81 a1       	ldd	r24, Z+33	; 0x21
    27fe:	28 2f       	mov	r18, r24
    2800:	30 e0       	ldi	r19, 0x00	; 0
    2802:	8b e2       	ldi	r24, 0x2B	; 43
    2804:	90 e0       	ldi	r25, 0x00	; 0
    2806:	ac 01       	movw	r20, r24
    2808:	24 9f       	mul	r18, r20
    280a:	c0 01       	movw	r24, r0
    280c:	25 9f       	mul	r18, r21
    280e:	90 0d       	add	r25, r0
    2810:	34 9f       	mul	r19, r20
    2812:	90 0d       	add	r25, r0
    2814:	11 24       	eor	r1, r1
    2816:	85 52       	subi	r24, 0x25	; 37
    2818:	9d 4f       	sbci	r25, 0xFD	; 253
    281a:	8a 96       	adiw	r24, 0x2a	; 42
    281c:	9a 83       	std	Y+2, r25	; 0x02
    281e:	89 83       	std	Y+1, r24	; 0x01
        spin_lock( xlist_lock );
    2820:	89 81       	ldd	r24, Y+1	; 0x01
    2822:	9a 81       	ldd	r25, Y+2	; 0x02
    2824:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
        pitem_cut( (pitem_t *)proc );
    2828:	8b 81       	ldd	r24, Y+3	; 0x03
    282a:	9c 81       	ldd	r25, Y+4	; 0x04
    282c:	0e 94 91 11 	call	0x2322	; 0x2322 <pitem_cut>
        spin_unlock( xlist_lock );
    2830:	89 81       	ldd	r24, Y+1	; 0x01
    2832:	9a 81       	ldd	r25, Y+2	; 0x02
    2834:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
    }
}
    2838:	0f 90       	pop	r0
    283a:	0f 90       	pop	r0
    283c:	0f 90       	pop	r0
    283e:	0f 90       	pop	r0
    2840:	cf 91       	pop	r28
    2842:	df 91       	pop	r29
    2844:	08 95       	ret

00002846 <_proc_stop>:
#endif // CONFIG_MP

void _proc_stop(proc_t * proc)
{
    2846:	df 93       	push	r29
    2848:	cf 93       	push	r28
    284a:	00 d0       	rcall	.+0      	; 0x284c <_proc_stop+0x6>
    284c:	cd b7       	in	r28, 0x3d	; 61
    284e:	de b7       	in	r29, 0x3e	; 62
    2850:	9a 83       	std	Y+2, r25	; 0x02
    2852:	89 83       	std	Y+1, r24	; 0x01
    proc->flags &= ~PROC_FLG_RUN;
    2854:	e9 81       	ldd	r30, Y+1	; 0x01
    2856:	fa 81       	ldd	r31, Y+2	; 0x02
    2858:	87 81       	ldd	r24, Z+7	; 0x07
    285a:	90 85       	ldd	r25, Z+8	; 0x08
    285c:	8d 7f       	andi	r24, 0xFD	; 253
    285e:	e9 81       	ldd	r30, Y+1	; 0x01
    2860:	fa 81       	ldd	r31, Y+2	; 0x02
    2862:	90 87       	std	Z+8, r25	; 0x08
    2864:	87 83       	std	Z+7, r24	; 0x07
    _proc_stop_( proc );
    2866:	89 81       	ldd	r24, Y+1	; 0x01
    2868:	9a 81       	ldd	r25, Y+2	; 0x02
    286a:	0e 94 df 13 	call	0x27be	; 0x27be <_proc_stop_>
    RESCHED_PROC( proc );
    286e:	e9 81       	ldd	r30, Y+1	; 0x01
    2870:	fa 81       	ldd	r31, Y+2	; 0x02
    2872:	81 a1       	ldd	r24, Z+33	; 0x21
    2874:	0e 94 b4 01 	call	0x368	; 0x368 <resched>
}
    2878:	0f 90       	pop	r0
    287a:	0f 90       	pop	r0
    287c:	cf 91       	pop	r28
    287e:	df 91       	pop	r29
    2880:	08 95       	ret

00002882 <proc_stop_isr>:
// Останов процесса из обработчика прерываний, прерывания должны быть запрещены
bool_t proc_stop_isr(proc_t * proc)
{
    2882:	df 93       	push	r29
    2884:	cf 93       	push	r28
    2886:	00 d0       	rcall	.+0      	; 0x2888 <proc_stop_isr+0x6>
    2888:	0f 92       	push	r0
    288a:	cd b7       	in	r28, 0x3d	; 61
    288c:	de b7       	in	r29, 0x3e	; 62
    288e:	9b 83       	std	Y+3, r25	; 0x03
    2890:	8a 83       	std	Y+2, r24	; 0x02
    bool_t ret = (bool_t)0;
    2892:	19 82       	std	Y+1, r1	; 0x01

    SPIN_LOCK( proc );
    2894:	8a 81       	ldd	r24, Y+2	; 0x02
    2896:	9b 81       	ldd	r25, Y+3	; 0x03
    2898:	83 96       	adiw	r24, 0x23	; 35
    289a:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    //Проверка флагов
    //В случчае PROC_FLG_WAIT будем обрабатывать PROC_FLG_PRE_END на выходе из sig_wait.
    //В случае PROC_FLG_MUTEX или PROC_FLG_SEM будем обрабатывать PROC_FLG_PRE_STOP при освобождении общего ресурса.
    //В случае ожидания IPC флаг будем обрабатывать при попытке передать данные или указатель целевому процессу.
    if( proc->flags & (PROC_FLG_MUTEX|PROC_FLG_SEM|PROC_FLG_QUEUE|PROC_FLG_WAIT|PROC_FLG_IPCW) )proc->flags |= PROC_FLG_PRE_STOP;
    289e:	ea 81       	ldd	r30, Y+2	; 0x02
    28a0:	fb 81       	ldd	r31, Y+3	; 0x03
    28a2:	87 81       	ldd	r24, Z+7	; 0x07
    28a4:	90 85       	ldd	r25, Z+8	; 0x08
    28a6:	8c 77       	andi	r24, 0x7C	; 124
    28a8:	90 70       	andi	r25, 0x00	; 0
    28aa:	00 97       	sbiw	r24, 0x00	; 0
    28ac:	51 f0       	breq	.+20     	; 0x28c2 <proc_stop_isr+0x40>
    28ae:	ea 81       	ldd	r30, Y+2	; 0x02
    28b0:	fb 81       	ldd	r31, Y+3	; 0x03
    28b2:	87 81       	ldd	r24, Z+7	; 0x07
    28b4:	90 85       	ldd	r25, Z+8	; 0x08
    28b6:	80 68       	ori	r24, 0x80	; 128
    28b8:	ea 81       	ldd	r30, Y+2	; 0x02
    28ba:	fb 81       	ldd	r31, Y+3	; 0x03
    28bc:	90 87       	std	Z+8, r25	; 0x08
    28be:	87 83       	std	Z+7, r24	; 0x07
    28c0:	0e c0       	rjmp	.+28     	; 0x28de <proc_stop_isr+0x5c>
    else if( proc->flags & PROC_FLG_RUN )
    28c2:	ea 81       	ldd	r30, Y+2	; 0x02
    28c4:	fb 81       	ldd	r31, Y+3	; 0x03
    28c6:	87 81       	ldd	r24, Z+7	; 0x07
    28c8:	90 85       	ldd	r25, Z+8	; 0x08
    28ca:	82 70       	andi	r24, 0x02	; 2
    28cc:	90 70       	andi	r25, 0x00	; 0
    28ce:	00 97       	sbiw	r24, 0x00	; 0
    28d0:	31 f0       	breq	.+12     	; 0x28de <proc_stop_isr+0x5c>
    {
        _proc_stop( proc );
    28d2:	8a 81       	ldd	r24, Y+2	; 0x02
    28d4:	9b 81       	ldd	r25, Y+3	; 0x03
    28d6:	0e 94 23 14 	call	0x2846	; 0x2846 <_proc_stop>
        ret = (bool_t)1;
    28da:	81 e0       	ldi	r24, 0x01	; 1
    28dc:	89 83       	std	Y+1, r24	; 0x01
    }

    SPIN_UNLOCK( proc );
    28de:	8a 81       	ldd	r24, Y+2	; 0x02
    28e0:	9b 81       	ldd	r25, Y+3	; 0x03
    28e2:	83 96       	adiw	r24, 0x23	; 35
    28e4:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>

    return ret;
    28e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    28ea:	0f 90       	pop	r0
    28ec:	0f 90       	pop	r0
    28ee:	0f 90       	pop	r0
    28f0:	cf 91       	pop	r28
    28f2:	df 91       	pop	r29
    28f4:	08 95       	ret

000028f6 <_proc_flag_stop>:
// Обработка флага останова процесса, для использования с семафорами, мьютексами и сигналами.
void _proc_flag_stop( flag_t mask )
{
    28f6:	df 93       	push	r29
    28f8:	cf 93       	push	r28
    28fa:	00 d0       	rcall	.+0      	; 0x28fc <_proc_flag_stop+0x6>
    28fc:	00 d0       	rcall	.+0      	; 0x28fe <_proc_flag_stop+0x8>
    28fe:	cd b7       	in	r28, 0x3d	; 61
    2900:	de b7       	in	r29, 0x3e	; 62
    2902:	9c 83       	std	Y+4, r25	; 0x04
    2904:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc;
    proc = current_proc();
    2906:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <current_proc>
    290a:	9a 83       	std	Y+2, r25	; 0x02
    290c:	89 83       	std	Y+1, r24	; 0x01

    SPIN_LOCK( proc );
    290e:	89 81       	ldd	r24, Y+1	; 0x01
    2910:	9a 81       	ldd	r25, Y+2	; 0x02
    2912:	83 96       	adiw	r24, 0x23	; 35
    2914:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>

    proc->flags &= ~mask;
    2918:	e9 81       	ldd	r30, Y+1	; 0x01
    291a:	fa 81       	ldd	r31, Y+2	; 0x02
    291c:	27 81       	ldd	r18, Z+7	; 0x07
    291e:	30 85       	ldd	r19, Z+8	; 0x08
    2920:	8b 81       	ldd	r24, Y+3	; 0x03
    2922:	9c 81       	ldd	r25, Y+4	; 0x04
    2924:	80 95       	com	r24
    2926:	90 95       	com	r25
    2928:	82 23       	and	r24, r18
    292a:	93 23       	and	r25, r19
    292c:	e9 81       	ldd	r30, Y+1	; 0x01
    292e:	fa 81       	ldd	r31, Y+2	; 0x02
    2930:	90 87       	std	Z+8, r25	; 0x08
    2932:	87 83       	std	Z+7, r24	; 0x07
    if(  PROC_PRE_STOP_TEST(proc)  )
    2934:	e9 81       	ldd	r30, Y+1	; 0x01
    2936:	fa 81       	ldd	r31, Y+2	; 0x02
    2938:	87 81       	ldd	r24, Z+7	; 0x07
    293a:	90 85       	ldd	r25, Z+8	; 0x08
    293c:	80 78       	andi	r24, 0x80	; 128
    293e:	90 70       	andi	r25, 0x00	; 0
    2940:	00 97       	sbiw	r24, 0x00	; 0
    2942:	a9 f0       	breq	.+42     	; 0x296e <_proc_flag_stop+0x78>
    2944:	e9 81       	ldd	r30, Y+1	; 0x01
    2946:	fa 81       	ldd	r31, Y+2	; 0x02
    2948:	87 81       	ldd	r24, Z+7	; 0x07
    294a:	90 85       	ldd	r25, Z+8	; 0x08
    294c:	8c 70       	andi	r24, 0x0C	; 12
    294e:	90 70       	andi	r25, 0x00	; 0
    2950:	00 97       	sbiw	r24, 0x00	; 0
    2952:	69 f4       	brne	.+26     	; 0x296e <_proc_flag_stop+0x78>
        /*
        Если был запрошен останов целевого процесса,
        и целевой процесс не удерживает общие ресурсы,
        то мы остановим процесс
        */
        proc->flags &= ~PROC_FLG_PRE_STOP;
    2954:	e9 81       	ldd	r30, Y+1	; 0x01
    2956:	fa 81       	ldd	r31, Y+2	; 0x02
    2958:	87 81       	ldd	r24, Z+7	; 0x07
    295a:	90 85       	ldd	r25, Z+8	; 0x08
    295c:	8f 77       	andi	r24, 0x7F	; 127
    295e:	e9 81       	ldd	r30, Y+1	; 0x01
    2960:	fa 81       	ldd	r31, Y+2	; 0x02
    2962:	90 87       	std	Z+8, r25	; 0x08
    2964:	87 83       	std	Z+7, r24	; 0x07
        _proc_stop( proc );
    2966:	89 81       	ldd	r24, Y+1	; 0x01
    2968:	9a 81       	ldd	r25, Y+2	; 0x02
    296a:	0e 94 23 14 	call	0x2846	; 0x2846 <_proc_stop>
    }

    SPIN_UNLOCK( proc );
    296e:	89 81       	ldd	r24, Y+1	; 0x01
    2970:	9a 81       	ldd	r25, Y+2	; 0x02
    2972:	83 96       	adiw	r24, 0x23	; 35
    2974:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>

}
    2978:	0f 90       	pop	r0
    297a:	0f 90       	pop	r0
    297c:	0f 90       	pop	r0
    297e:	0f 90       	pop	r0
    2980:	cf 91       	pop	r28
    2982:	df 91       	pop	r29
    2984:	08 95       	ret

00002986 <_proc_terminate>:

void _proc_terminate( proc_t * proc )
{
    2986:	df 93       	push	r29
    2988:	cf 93       	push	r28
    298a:	00 d0       	rcall	.+0      	; 0x298c <_proc_terminate+0x6>
    298c:	cd b7       	in	r28, 0x3d	; 61
    298e:	de b7       	in	r29, 0x3e	; 62
    2990:	9a 83       	std	Y+2, r25	; 0x02
    2992:	89 83       	std	Y+1, r24	; 0x01

    SPIN_LOCK( proc );
    2994:	89 81       	ldd	r24, Y+1	; 0x01
    2996:	9a 81       	ldd	r25, Y+2	; 0x02
    2998:	83 96       	adiw	r24, 0x23	; 35
    299a:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>

    // Обрабатываем флаги
    // Нельзя выходить из pmain не освободив все захваченные ресурсы, за это процесс будет "убит"!
    if( proc->flags & PROC_FLG_LOCK_MASK ) proc->flags |= PROC_FLG_DEAD;
    299e:	e9 81       	ldd	r30, Y+1	; 0x01
    29a0:	fa 81       	ldd	r31, Y+2	; 0x02
    29a2:	87 81       	ldd	r24, Z+7	; 0x07
    29a4:	90 85       	ldd	r25, Z+8	; 0x08
    29a6:	8c 70       	andi	r24, 0x0C	; 12
    29a8:	90 70       	andi	r25, 0x00	; 0
    29aa:	00 97       	sbiw	r24, 0x00	; 0
    29ac:	51 f0       	breq	.+20     	; 0x29c2 <_proc_terminate+0x3c>
    29ae:	e9 81       	ldd	r30, Y+1	; 0x01
    29b0:	fa 81       	ldd	r31, Y+2	; 0x02
    29b2:	87 81       	ldd	r24, Z+7	; 0x07
    29b4:	90 85       	ldd	r25, Z+8	; 0x08
    29b6:	94 60       	ori	r25, 0x04	; 4
    29b8:	e9 81       	ldd	r30, Y+1	; 0x01
    29ba:	fa 81       	ldd	r31, Y+2	; 0x02
    29bc:	90 87       	std	Z+8, r25	; 0x08
    29be:	87 83       	std	Z+7, r24	; 0x07
    29c0:	09 c0       	rjmp	.+18     	; 0x29d4 <_proc_terminate+0x4e>
    // В противном случае - просто завершаем процесс
    else proc->flags |= PROC_FLG_END;
    29c2:	e9 81       	ldd	r30, Y+1	; 0x01
    29c4:	fa 81       	ldd	r31, Y+2	; 0x02
    29c6:	87 81       	ldd	r24, Z+7	; 0x07
    29c8:	90 85       	ldd	r25, Z+8	; 0x08
    29ca:	91 60       	ori	r25, 0x01	; 1
    29cc:	e9 81       	ldd	r30, Y+1	; 0x01
    29ce:	fa 81       	ldd	r31, Y+2	; 0x02
    29d0:	90 87       	std	Z+8, r25	; 0x08
    29d2:	87 83       	std	Z+7, r24	; 0x07
    proc->flags &= ~PROC_FLG_PRE_STOP_MASK;
    29d4:	e9 81       	ldd	r30, Y+1	; 0x01
    29d6:	fa 81       	ldd	r31, Y+2	; 0x02
    29d8:	87 81       	ldd	r24, Z+7	; 0x07
    29da:	90 85       	ldd	r25, Z+8	; 0x08
    29dc:	8d 77       	andi	r24, 0x7D	; 125
    29de:	e9 81       	ldd	r30, Y+1	; 0x01
    29e0:	fa 81       	ldd	r31, Y+2	; 0x02
    29e2:	90 87       	std	Z+8, r25	; 0x08
    29e4:	87 83       	std	Z+7, r24	; 0x07
    // Останов
    _proc_stop_( proc );
    29e6:	89 81       	ldd	r24, Y+1	; 0x01
    29e8:	9a 81       	ldd	r25, Y+2	; 0x02
    29ea:	0e 94 df 13 	call	0x27be	; 0x27be <_proc_stop_>
    // Выполнить перепланировку
    RESCHED_PROC( proc );
    29ee:	e9 81       	ldd	r30, Y+1	; 0x01
    29f0:	fa 81       	ldd	r31, Y+2	; 0x02
    29f2:	81 a1       	ldd	r24, Z+33	; 0x21
    29f4:	0e 94 b4 01 	call	0x368	; 0x368 <resched>

    SPIN_UNLOCK( proc );
    29f8:	89 81       	ldd	r24, Y+1	; 0x01
    29fa:	9a 81       	ldd	r25, Y+2	; 0x02
    29fc:	83 96       	adiw	r24, 0x23	; 35
    29fe:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
}
    2a02:	0f 90       	pop	r0
    2a04:	0f 90       	pop	r0
    2a06:	cf 91       	pop	r28
    2a08:	df 91       	pop	r29
    2a0a:	08 95       	ret

00002a0c <_proc_reset_watchdog>:

void _proc_reset_watchdog( void )
{
    2a0c:	df 93       	push	r29
    2a0e:	cf 93       	push	r28
    2a10:	00 d0       	rcall	.+0      	; 0x2a12 <_proc_reset_watchdog+0x6>
    2a12:	cd b7       	in	r28, 0x3d	; 61
    2a14:	de b7       	in	r29, 0x3e	; 62
    proc_t * proc;
    proc = current_proc();
    2a16:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <current_proc>
    2a1a:	9a 83       	std	Y+2, r25	; 0x02
    2a1c:	89 83       	std	Y+1, r24	; 0x01

    SPIN_LOCK( proc );
    2a1e:	89 81       	ldd	r24, Y+1	; 0x01
    2a20:	9a 81       	ldd	r25, Y+2	; 0x02
    2a22:	83 96       	adiw	r24, 0x23	; 35
    2a24:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>

    if( proc->flags & PROC_FLG_RT )proc->timer = proc->time_quant;
    2a28:	e9 81       	ldd	r30, Y+1	; 0x01
    2a2a:	fa 81       	ldd	r31, Y+2	; 0x02
    2a2c:	87 81       	ldd	r24, Z+7	; 0x07
    2a2e:	90 85       	ldd	r25, Z+8	; 0x08
    2a30:	81 70       	andi	r24, 0x01	; 1
    2a32:	90 70       	andi	r25, 0x00	; 0
    2a34:	88 23       	and	r24, r24
    2a36:	41 f0       	breq	.+16     	; 0x2a48 <_proc_reset_watchdog+0x3c>
    2a38:	e9 81       	ldd	r30, Y+1	; 0x01
    2a3a:	fa 81       	ldd	r31, Y+2	; 0x02
    2a3c:	83 8d       	ldd	r24, Z+27	; 0x1b
    2a3e:	94 8d       	ldd	r25, Z+28	; 0x1c
    2a40:	e9 81       	ldd	r30, Y+1	; 0x01
    2a42:	fa 81       	ldd	r31, Y+2	; 0x02
    2a44:	96 8f       	std	Z+30, r25	; 0x1e
    2a46:	85 8f       	std	Z+29, r24	; 0x1d

    SPIN_UNLOCK( proc );
    2a48:	89 81       	ldd	r24, Y+1	; 0x01
    2a4a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a4c:	83 96       	adiw	r24, 0x23	; 35
    2a4e:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
}
    2a52:	0f 90       	pop	r0
    2a54:	0f 90       	pop	r0
    2a56:	cf 91       	pop	r28
    2a58:	df 91       	pop	r29
    2a5a:	08 95       	ret

00002a5c <_proc_lres_inc>:
    proc_t * proc
#ifdef CONFIG_USE_HIGHEST_LOCKER
    ,prio_t prio
#endif
)
{
    2a5c:	df 93       	push	r29
    2a5e:	cf 93       	push	r28
    2a60:	00 d0       	rcall	.+0      	; 0x2a62 <_proc_lres_inc+0x6>
    2a62:	0f 92       	push	r0
    2a64:	cd b7       	in	r28, 0x3d	; 61
    2a66:	de b7       	in	r29, 0x3e	; 62
    2a68:	9a 83       	std	Y+2, r25	; 0x02
    2a6a:	89 83       	std	Y+1, r24	; 0x01
    2a6c:	6b 83       	std	Y+3, r22	; 0x03
#ifdef CONFIG_USE_HIGHEST_LOCKER
    if( proc->lres.index == (index_t)0 )proc->flags |= PROC_FLG_MUTEX;
    2a6e:	e9 81       	ldd	r30, Y+1	; 0x01
    2a70:	fa 81       	ldd	r31, Y+2	; 0x02
    2a72:	82 8d       	ldd	r24, Z+26	; 0x1a
    2a74:	88 23       	and	r24, r24
    2a76:	49 f4       	brne	.+18     	; 0x2a8a <_proc_lres_inc+0x2e>
    2a78:	e9 81       	ldd	r30, Y+1	; 0x01
    2a7a:	fa 81       	ldd	r31, Y+2	; 0x02
    2a7c:	87 81       	ldd	r24, Z+7	; 0x07
    2a7e:	90 85       	ldd	r25, Z+8	; 0x08
    2a80:	84 60       	ori	r24, 0x04	; 4
    2a82:	e9 81       	ldd	r30, Y+1	; 0x01
    2a84:	fa 81       	ldd	r31, Y+2	; 0x02
    2a86:	90 87       	std	Z+8, r25	; 0x08
    2a88:	87 83       	std	Z+7, r24	; 0x07
    pcounter_inc( &proc->lres, prio );
    2a8a:	89 81       	ldd	r24, Y+1	; 0x01
    2a8c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a8e:	0a 96       	adiw	r24, 0x0a	; 10
    2a90:	6b 81       	ldd	r22, Y+3	; 0x03
    2a92:	0e 94 33 10 	call	0x2066	; 0x2066 <pcounter_inc>
#else
    if( proc->lres == (count_t)0 )proc->flags |= PROC_FLG_MUTEX;
    proc->lres++;
#endif
}
    2a96:	0f 90       	pop	r0
    2a98:	0f 90       	pop	r0
    2a9a:	0f 90       	pop	r0
    2a9c:	cf 91       	pop	r28
    2a9e:	df 91       	pop	r29
    2aa0:	08 95       	ret

00002aa2 <_proc_lres_dec>:
    proc_t * proc
#ifdef CONFIG_USE_HIGHEST_LOCKER
    ,prio_t prio
#endif
)
{
    2aa2:	df 93       	push	r29
    2aa4:	cf 93       	push	r28
    2aa6:	00 d0       	rcall	.+0      	; 0x2aa8 <_proc_lres_dec+0x6>
    2aa8:	0f 92       	push	r0
    2aaa:	cd b7       	in	r28, 0x3d	; 61
    2aac:	de b7       	in	r29, 0x3e	; 62
    2aae:	9a 83       	std	Y+2, r25	; 0x02
    2ab0:	89 83       	std	Y+1, r24	; 0x01
    2ab2:	6b 83       	std	Y+3, r22	; 0x03
#ifdef CONFIG_USE_HIGHEST_LOCKER
    pcounter_dec( &proc->lres, prio );
    2ab4:	89 81       	ldd	r24, Y+1	; 0x01
    2ab6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ab8:	0a 96       	adiw	r24, 0x0a	; 10
    2aba:	6b 81       	ldd	r22, Y+3	; 0x03
    2abc:	0e 94 6f 10 	call	0x20de	; 0x20de <pcounter_dec>
    if( proc->lres.index == (index_t)0 )proc->flags &= ~PROC_FLG_MUTEX;
    2ac0:	e9 81       	ldd	r30, Y+1	; 0x01
    2ac2:	fa 81       	ldd	r31, Y+2	; 0x02
    2ac4:	82 8d       	ldd	r24, Z+26	; 0x1a
    2ac6:	88 23       	and	r24, r24
    2ac8:	49 f4       	brne	.+18     	; 0x2adc <_proc_lres_dec+0x3a>
    2aca:	e9 81       	ldd	r30, Y+1	; 0x01
    2acc:	fa 81       	ldd	r31, Y+2	; 0x02
    2ace:	87 81       	ldd	r24, Z+7	; 0x07
    2ad0:	90 85       	ldd	r25, Z+8	; 0x08
    2ad2:	8b 7f       	andi	r24, 0xFB	; 251
    2ad4:	e9 81       	ldd	r30, Y+1	; 0x01
    2ad6:	fa 81       	ldd	r31, Y+2	; 0x02
    2ad8:	90 87       	std	Z+8, r25	; 0x08
    2ada:	87 83       	std	Z+7, r24	; 0x07
#else
    if( proc->lres!= (count_t)0 )proc->lres--;
    if( proc->lres == (count_t)0 )proc->flags &= ~PROC_FLG_MUTEX;
#endif
}
    2adc:	0f 90       	pop	r0
    2ade:	0f 90       	pop	r0
    2ae0:	0f 90       	pop	r0
    2ae2:	cf 91       	pop	r28
    2ae4:	df 91       	pop	r29
    2ae6:	08 95       	ret

00002ae8 <_proc_prio_control_stoped>:

#ifdef CONFIG_USE_HIGHEST_LOCKER
// Будет использоваться в mutex-ах и т.п., процесс должен сам вызывать эту функцию, при этом он должен быть вырезан из списка выполняющихся.

void _proc_prio_control_stoped( proc_t * proc )
{
    2ae8:	df 93       	push	r29
    2aea:	cf 93       	push	r28
    2aec:	cd b7       	in	r28, 0x3d	; 61
    2aee:	de b7       	in	r29, 0x3e	; 62
    2af0:	27 97       	sbiw	r28, 0x07	; 7
    2af2:	0f b6       	in	r0, 0x3f	; 63
    2af4:	f8 94       	cli
    2af6:	de bf       	out	0x3e, r29	; 62
    2af8:	0f be       	out	0x3f, r0	; 63
    2afa:	cd bf       	out	0x3d, r28	; 61
    2afc:	9b 83       	std	Y+3, r25	; 0x03
    2afe:	8a 83       	std	Y+2, r24	; 0x02
    if(proc->lres.index != (index_t)0)
    2b00:	ea 81       	ldd	r30, Y+2	; 0x02
    2b02:	fb 81       	ldd	r31, Y+3	; 0x03
    2b04:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b06:	88 23       	and	r24, r24
    2b08:	d9 f0       	breq	.+54     	; 0x2b40 <_proc_prio_control_stoped+0x58>
    {

        prio_t locker_prio;
        locker_prio = index_search( proc->lres.index );
    2b0a:	ea 81       	ldd	r30, Y+2	; 0x02
    2b0c:	fb 81       	ldd	r31, Y+3	; 0x03
    2b0e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b10:	0e 94 6d 0c 	call	0x18da	; 0x18da <index_search>
    2b14:	89 83       	std	Y+1, r24	; 0x01
        ((pitem_t *)proc)->prio = ( locker_prio < proc->base_prio )?locker_prio:proc->base_prio;
    2b16:	8a 81       	ldd	r24, Y+2	; 0x02
    2b18:	9b 81       	ldd	r25, Y+3	; 0x03
    2b1a:	9e 83       	std	Y+6, r25	; 0x06
    2b1c:	8d 83       	std	Y+5, r24	; 0x05
    2b1e:	ea 81       	ldd	r30, Y+2	; 0x02
    2b20:	fb 81       	ldd	r31, Y+3	; 0x03
    2b22:	81 85       	ldd	r24, Z+9	; 0x09
    2b24:	99 81       	ldd	r25, Y+1	; 0x01
    2b26:	9f 83       	std	Y+7, r25	; 0x07
    2b28:	8c 83       	std	Y+4, r24	; 0x04
    2b2a:	ec 81       	ldd	r30, Y+4	; 0x04
    2b2c:	ff 81       	ldd	r31, Y+7	; 0x07
    2b2e:	fe 17       	cp	r31, r30
    2b30:	10 f4       	brcc	.+4      	; 0x2b36 <_proc_prio_control_stoped+0x4e>
    2b32:	8f 81       	ldd	r24, Y+7	; 0x07
    2b34:	8c 83       	std	Y+4, r24	; 0x04
    2b36:	8c 81       	ldd	r24, Y+4	; 0x04
    2b38:	ed 81       	ldd	r30, Y+5	; 0x05
    2b3a:	fe 81       	ldd	r31, Y+6	; 0x06
    2b3c:	86 83       	std	Z+6, r24	; 0x06
    2b3e:	08 c0       	rjmp	.+16     	; 0x2b50 <_proc_prio_control_stoped+0x68>
    }
    else
    {
        ((pitem_t *)proc)->prio = proc->base_prio;
    2b40:	ea 81       	ldd	r30, Y+2	; 0x02
    2b42:	fb 81       	ldd	r31, Y+3	; 0x03
    2b44:	aa 81       	ldd	r26, Y+2	; 0x02
    2b46:	bb 81       	ldd	r27, Y+3	; 0x03
    2b48:	19 96       	adiw	r26, 0x09	; 9
    2b4a:	8c 91       	ld	r24, X
    2b4c:	19 97       	sbiw	r26, 0x09	; 9
    2b4e:	86 83       	std	Z+6, r24	; 0x06
    }
}
    2b50:	27 96       	adiw	r28, 0x07	; 7
    2b52:	0f b6       	in	r0, 0x3f	; 63
    2b54:	f8 94       	cli
    2b56:	de bf       	out	0x3e, r29	; 62
    2b58:	0f be       	out	0x3f, r0	; 63
    2b5a:	cd bf       	out	0x3d, r28	; 61
    2b5c:	cf 91       	pop	r28
    2b5e:	df 91       	pop	r29
    2b60:	08 95       	ret

00002b62 <_proc_prio_control_running>:

void _proc_prio_control_running( proc_t * proc )
{
    2b62:	df 93       	push	r29
    2b64:	cf 93       	push	r28
    2b66:	00 d0       	rcall	.+0      	; 0x2b68 <_proc_prio_control_running+0x6>
    2b68:	00 d0       	rcall	.+0      	; 0x2b6a <_proc_prio_control_running+0x8>
    2b6a:	00 d0       	rcall	.+0      	; 0x2b6c <_proc_prio_control_running+0xa>
    2b6c:	cd b7       	in	r28, 0x3d	; 61
    2b6e:	de b7       	in	r29, 0x3e	; 62
    2b70:	9c 83       	std	Y+4, r25	; 0x04
    2b72:	8b 83       	std	Y+3, r24	; 0x03
    prio_t new_prio;
    if(proc->lres.index != (index_t)0)
    2b74:	eb 81       	ldd	r30, Y+3	; 0x03
    2b76:	fc 81       	ldd	r31, Y+4	; 0x04
    2b78:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b7a:	88 23       	and	r24, r24
    2b7c:	a9 f0       	breq	.+42     	; 0x2ba8 <_proc_prio_control_running+0x46>
    {
        prio_t locker_prio;
        locker_prio = index_search( proc->lres.index );
    2b7e:	eb 81       	ldd	r30, Y+3	; 0x03
    2b80:	fc 81       	ldd	r31, Y+4	; 0x04
    2b82:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b84:	0e 94 6d 0c 	call	0x18da	; 0x18da <index_search>
    2b88:	89 83       	std	Y+1, r24	; 0x01
        new_prio = ( locker_prio < proc->base_prio )?locker_prio:proc->base_prio;
    2b8a:	eb 81       	ldd	r30, Y+3	; 0x03
    2b8c:	fc 81       	ldd	r31, Y+4	; 0x04
    2b8e:	81 85       	ldd	r24, Z+9	; 0x09
    2b90:	99 81       	ldd	r25, Y+1	; 0x01
    2b92:	9e 83       	std	Y+6, r25	; 0x06
    2b94:	8d 83       	std	Y+5, r24	; 0x05
    2b96:	8d 81       	ldd	r24, Y+5	; 0x05
    2b98:	9e 81       	ldd	r25, Y+6	; 0x06
    2b9a:	98 17       	cp	r25, r24
    2b9c:	10 f4       	brcc	.+4      	; 0x2ba2 <_proc_prio_control_running+0x40>
    2b9e:	8e 81       	ldd	r24, Y+6	; 0x06
    2ba0:	8d 83       	std	Y+5, r24	; 0x05
    2ba2:	9d 81       	ldd	r25, Y+5	; 0x05
    2ba4:	9a 83       	std	Y+2, r25	; 0x02
    2ba6:	04 c0       	rjmp	.+8      	; 0x2bb0 <_proc_prio_control_running+0x4e>
    }
    else
    {
        new_prio = proc->base_prio;
    2ba8:	eb 81       	ldd	r30, Y+3	; 0x03
    2baa:	fc 81       	ldd	r31, Y+4	; 0x04
    2bac:	81 85       	ldd	r24, Z+9	; 0x09
    2bae:	8a 83       	std	Y+2, r24	; 0x02
    }
    if(((pitem_t *)proc)->prio != new_prio)
    2bb0:	eb 81       	ldd	r30, Y+3	; 0x03
    2bb2:	fc 81       	ldd	r31, Y+4	; 0x04
    2bb4:	96 81       	ldd	r25, Z+6	; 0x06
    2bb6:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb8:	98 17       	cp	r25, r24
    2bba:	31 f1       	breq	.+76     	; 0x2c08 <_proc_prio_control_running+0xa6>
    {
        _proc_stop_( proc );
    2bbc:	8b 81       	ldd	r24, Y+3	; 0x03
    2bbe:	9c 81       	ldd	r25, Y+4	; 0x04
    2bc0:	0e 94 df 13 	call	0x27be	; 0x27be <_proc_stop_>
        ((pitem_t *)proc)->prio = new_prio;
    2bc4:	eb 81       	ldd	r30, Y+3	; 0x03
    2bc6:	fc 81       	ldd	r31, Y+4	; 0x04
    2bc8:	8a 81       	ldd	r24, Y+2	; 0x02
    2bca:	86 83       	std	Z+6, r24	; 0x06
#ifdef CONFIG_MP
        spin_lock( &kernel.stat_lock );
    2bcc:	83 e9       	ldi	r24, 0x93	; 147
    2bce:	93 e0       	ldi	r25, 0x03	; 3
    2bd0:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
        stat_inc( proc, (stat_t *)kernel.stat+proc->core_id );
    2bd4:	eb 81       	ldd	r30, Y+3	; 0x03
    2bd6:	fc 81       	ldd	r31, Y+4	; 0x04
    2bd8:	81 a1       	ldd	r24, Z+33	; 0x21
    2bda:	88 2f       	mov	r24, r24
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	9c 01       	movw	r18, r24
    2be0:	2f 56       	subi	r18, 0x6F	; 111
    2be2:	3c 4f       	sbci	r19, 0xFC	; 252
    2be4:	8b 81       	ldd	r24, Y+3	; 0x03
    2be6:	9c 81       	ldd	r25, Y+4	; 0x04
    2be8:	b9 01       	movw	r22, r18
    2bea:	0e 94 6e 01 	call	0x2dc	; 0x2dc <stat_inc>
        spin_unlock( &kernel.stat_lock );
    2bee:	83 e9       	ldi	r24, 0x93	; 147
    2bf0:	93 e0       	ldi	r25, 0x03	; 3
    2bf2:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
#endif
        _proc_run_( proc );
    2bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    2bf8:	9c 81       	ldd	r25, Y+4	; 0x04
    2bfa:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <_proc_run_>
        RESCHED_PROC( proc );
    2bfe:	eb 81       	ldd	r30, Y+3	; 0x03
    2c00:	fc 81       	ldd	r31, Y+4	; 0x04
    2c02:	81 a1       	ldd	r24, Z+33	; 0x21
    2c04:	0e 94 b4 01 	call	0x368	; 0x368 <resched>
    }
}
    2c08:	26 96       	adiw	r28, 0x06	; 6
    2c0a:	0f b6       	in	r0, 0x3f	; 63
    2c0c:	f8 94       	cli
    2c0e:	de bf       	out	0x3e, r29	; 62
    2c10:	0f be       	out	0x3f, r0	; 63
    2c12:	cd bf       	out	0x3d, r28	; 61
    2c14:	cf 91       	pop	r28
    2c16:	df 91       	pop	r29
    2c18:	08 95       	ret

00002c1a <sched_load_balancer>:

#ifdef CONFIG_MP
//========================================================================================
// Балансировщик нагрузки
WEAK core_id_t sched_load_balancer(proc_t * proc, stat_t * stat)
{
    2c1a:	df 93       	push	r29
    2c1c:	cf 93       	push	r28
    2c1e:	cd b7       	in	r28, 0x3d	; 61
    2c20:	de b7       	in	r29, 0x3e	; 62
    2c22:	2a 97       	sbiw	r28, 0x0a	; 10
    2c24:	0f b6       	in	r0, 0x3f	; 63
    2c26:	f8 94       	cli
    2c28:	de bf       	out	0x3e, r29	; 62
    2c2a:	0f be       	out	0x3f, r0	; 63
    2c2c:	cd bf       	out	0x3d, r28	; 61
    2c2e:	98 87       	std	Y+8, r25	; 0x08
    2c30:	8f 83       	std	Y+7, r24	; 0x07
    2c32:	7a 87       	std	Y+10, r23	; 0x0a
    2c34:	69 87       	std	Y+9, r22	; 0x09
    core_id_t core = (core_id_t)0, ret;
    2c36:	1e 82       	std	Y+6, r1	; 0x06
    affinity_t mask = (affinity_t)1;
    2c38:	81 e0       	ldi	r24, 0x01	; 1
    2c3a:	8c 83       	std	Y+4, r24	; 0x04
    2c3c:	0d c0       	rjmp	.+26     	; 0x2c58 <sched_load_balancer+0x3e>
    while( core < (core_id_t)MAX_CORES )
    {
        if( proc->affinity & mask )break;
    2c3e:	ef 81       	ldd	r30, Y+7	; 0x07
    2c40:	f8 85       	ldd	r31, Y+8	; 0x08
    2c42:	92 a1       	ldd	r25, Z+34	; 0x22
    2c44:	8c 81       	ldd	r24, Y+4	; 0x04
    2c46:	89 23       	and	r24, r25
    2c48:	88 23       	and	r24, r24
    2c4a:	49 f4       	brne	.+18     	; 0x2c5e <sched_load_balancer+0x44>
        mask<<=1;
    2c4c:	8c 81       	ldd	r24, Y+4	; 0x04
    2c4e:	88 0f       	add	r24, r24
    2c50:	8c 83       	std	Y+4, r24	; 0x04
        core++;
    2c52:	8e 81       	ldd	r24, Y+6	; 0x06
    2c54:	8f 5f       	subi	r24, 0xFF	; 255
    2c56:	8e 83       	std	Y+6, r24	; 0x06
// Балансировщик нагрузки
WEAK core_id_t sched_load_balancer(proc_t * proc, stat_t * stat)
{
    core_id_t core = (core_id_t)0, ret;
    affinity_t mask = (affinity_t)1;
    while( core < (core_id_t)MAX_CORES )
    2c58:	8e 81       	ldd	r24, Y+6	; 0x06
    2c5a:	82 30       	cpi	r24, 0x02	; 2
    2c5c:	80 f3       	brcs	.-32     	; 0x2c3e <sched_load_balancer+0x24>
        if( proc->affinity & mask )break;
        mask<<=1;
        core++;
    }
    // Начальное предположение
    stat += (core_id_t)core;
    2c5e:	8e 81       	ldd	r24, Y+6	; 0x06
    2c60:	28 2f       	mov	r18, r24
    2c62:	30 e0       	ldi	r19, 0x00	; 0
    2c64:	89 85       	ldd	r24, Y+9	; 0x09
    2c66:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c68:	82 0f       	add	r24, r18
    2c6a:	93 1f       	adc	r25, r19
    2c6c:	9a 87       	std	Y+10, r25	; 0x0a
    2c6e:	89 87       	std	Y+9, r24	; 0x09
    ret = core++;
    2c70:	8e 81       	ldd	r24, Y+6	; 0x06
    2c72:	8d 83       	std	Y+5, r24	; 0x05
    2c74:	8e 81       	ldd	r24, Y+6	; 0x06
    2c76:	8f 5f       	subi	r24, 0xFF	; 255
    2c78:	8e 83       	std	Y+6, r24	; 0x06
    mask<<=1;
    2c7a:	8c 81       	ldd	r24, Y+4	; 0x04
    2c7c:	88 0f       	add	r24, r24
    2c7e:	8c 83       	std	Y+4, r24	; 0x04
    {
        prio_t proc_prio;
        load_t current_load, min_load;

        proc_prio = ((pitem_t *)proc)->prio;
    2c80:	ef 81       	ldd	r30, Y+7	; 0x07
    2c82:	f8 85       	ldd	r31, Y+8	; 0x08
    2c84:	86 81       	ldd	r24, Z+6	; 0x06
    2c86:	8b 83       	std	Y+3, r24	; 0x03
        min_load = stat_calc_load( proc_prio, stat++ );
    2c88:	29 85       	ldd	r18, Y+9	; 0x09
    2c8a:	3a 85       	ldd	r19, Y+10	; 0x0a
    2c8c:	89 85       	ldd	r24, Y+9	; 0x09
    2c8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c90:	01 96       	adiw	r24, 0x01	; 1
    2c92:	9a 87       	std	Y+10, r25	; 0x0a
    2c94:	89 87       	std	Y+9, r24	; 0x09
    2c96:	8b 81       	ldd	r24, Y+3	; 0x03
    2c98:	b9 01       	movw	r22, r18
    2c9a:	0e 94 a2 01 	call	0x344	; 0x344 <stat_calc_load>
    2c9e:	89 83       	std	Y+1, r24	; 0x01
    2ca0:	21 c0       	rjmp	.+66     	; 0x2ce4 <sched_load_balancer+0xca>
        // Проверка всего остального, тупой поиск минимума
        while( core < (core_id_t)MAX_CORES )
        {
            current_load = stat_calc_load( proc_prio, stat++ );
    2ca2:	29 85       	ldd	r18, Y+9	; 0x09
    2ca4:	3a 85       	ldd	r19, Y+10	; 0x0a
    2ca6:	89 85       	ldd	r24, Y+9	; 0x09
    2ca8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2caa:	01 96       	adiw	r24, 0x01	; 1
    2cac:	9a 87       	std	Y+10, r25	; 0x0a
    2cae:	89 87       	std	Y+9, r24	; 0x09
    2cb0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cb2:	b9 01       	movw	r22, r18
    2cb4:	0e 94 a2 01 	call	0x344	; 0x344 <stat_calc_load>
    2cb8:	8a 83       	std	Y+2, r24	; 0x02
            if( (proc->affinity & mask) && (current_load < min_load) )
    2cba:	ef 81       	ldd	r30, Y+7	; 0x07
    2cbc:	f8 85       	ldd	r31, Y+8	; 0x08
    2cbe:	92 a1       	ldd	r25, Z+34	; 0x22
    2cc0:	8c 81       	ldd	r24, Y+4	; 0x04
    2cc2:	89 23       	and	r24, r25
    2cc4:	88 23       	and	r24, r24
    2cc6:	41 f0       	breq	.+16     	; 0x2cd8 <sched_load_balancer+0xbe>
    2cc8:	9a 81       	ldd	r25, Y+2	; 0x02
    2cca:	89 81       	ldd	r24, Y+1	; 0x01
    2ccc:	98 17       	cp	r25, r24
    2cce:	20 f4       	brcc	.+8      	; 0x2cd8 <sched_load_balancer+0xbe>
            {
                min_load = current_load;
    2cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd2:	89 83       	std	Y+1, r24	; 0x01
                ret = core;
    2cd4:	8e 81       	ldd	r24, Y+6	; 0x06
    2cd6:	8d 83       	std	Y+5, r24	; 0x05
            }
            mask<<=1;
    2cd8:	8c 81       	ldd	r24, Y+4	; 0x04
    2cda:	88 0f       	add	r24, r24
    2cdc:	8c 83       	std	Y+4, r24	; 0x04
            core++;
    2cde:	8e 81       	ldd	r24, Y+6	; 0x06
    2ce0:	8f 5f       	subi	r24, 0xFF	; 255
    2ce2:	8e 83       	std	Y+6, r24	; 0x06
        load_t current_load, min_load;

        proc_prio = ((pitem_t *)proc)->prio;
        min_load = stat_calc_load( proc_prio, stat++ );
        // Проверка всего остального, тупой поиск минимума
        while( core < (core_id_t)MAX_CORES )
    2ce4:	8e 81       	ldd	r24, Y+6	; 0x06
    2ce6:	82 30       	cpi	r24, 0x02	; 2
    2ce8:	e0 f2       	brcs	.-72     	; 0x2ca2 <sched_load_balancer+0x88>
            }
            mask<<=1;
            core++;
        }
    }
    return ret;
    2cea:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2cec:	2a 96       	adiw	r28, 0x0a	; 10
    2cee:	0f b6       	in	r0, 0x3f	; 63
    2cf0:	f8 94       	cli
    2cf2:	de bf       	out	0x3e, r29	; 62
    2cf4:	0f be       	out	0x3f, r0	; 63
    2cf6:	cd bf       	out	0x3d, r28	; 61
    2cf8:	cf 91       	pop	r28
    2cfa:	df 91       	pop	r29
    2cfc:	08 95       	ret

00002cfe <sched_highest_load_core>:
//----------------------------------------------------------------------------------------
//Поиск самой нагруженной структуры stat_t в массиве
WEAK core_id_t sched_highest_load_core( stat_t * stat )
{
    2cfe:	df 93       	push	r29
    2d00:	cf 93       	push	r28
    2d02:	00 d0       	rcall	.+0      	; 0x2d04 <sched_highest_load_core+0x6>
    2d04:	00 d0       	rcall	.+0      	; 0x2d06 <sched_highest_load_core+0x8>
    2d06:	00 d0       	rcall	.+0      	; 0x2d08 <sched_highest_load_core+0xa>
    2d08:	cd b7       	in	r28, 0x3d	; 61
    2d0a:	de b7       	in	r29, 0x3e	; 62
    2d0c:	9e 83       	std	Y+6, r25	; 0x06
    2d0e:	8d 83       	std	Y+5, r24	; 0x05
    // Начальное предположение
    load_t max_load;
    core_id_t object_core = (core_id_t)0; //процессор с максимальной нагрузкой, с которого эту нагрузку будем снимать
    2d10:	1b 82       	std	Y+3, r1	; 0x03
    core_id_t core = (core_id_t)1;
    2d12:	81 e0       	ldi	r24, 0x01	; 1
    2d14:	8a 83       	std	Y+2, r24	; 0x02
    max_load  = stat_calc_load( (prio_t)BITS_IN_INDEX_T, stat ); // максимальная нагрузка
    2d16:	2d 81       	ldd	r18, Y+5	; 0x05
    2d18:	3e 81       	ldd	r19, Y+6	; 0x06
    2d1a:	88 e0       	ldi	r24, 0x08	; 8
    2d1c:	b9 01       	movw	r22, r18
    2d1e:	0e 94 a2 01 	call	0x344	; 0x344 <stat_calc_load>
    2d22:	8c 83       	std	Y+4, r24	; 0x04
    2d24:	17 c0       	rjmp	.+46     	; 0x2d54 <sched_highest_load_core+0x56>

    while( core < (core_id_t)MAX_CORES )
    {
        load_t current_load;
        current_load = stat_calc_load( (prio_t)BITS_IN_INDEX_T, stat + core );
    2d26:	8a 81       	ldd	r24, Y+2	; 0x02
    2d28:	28 2f       	mov	r18, r24
    2d2a:	30 e0       	ldi	r19, 0x00	; 0
    2d2c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d2e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d30:	28 0f       	add	r18, r24
    2d32:	39 1f       	adc	r19, r25
    2d34:	88 e0       	ldi	r24, 0x08	; 8
    2d36:	b9 01       	movw	r22, r18
    2d38:	0e 94 a2 01 	call	0x344	; 0x344 <stat_calc_load>
    2d3c:	89 83       	std	Y+1, r24	; 0x01
        if( current_load > max_load )
    2d3e:	99 81       	ldd	r25, Y+1	; 0x01
    2d40:	8c 81       	ldd	r24, Y+4	; 0x04
    2d42:	89 17       	cp	r24, r25
    2d44:	20 f4       	brcc	.+8      	; 0x2d4e <sched_highest_load_core+0x50>
        {
            max_load = current_load;
    2d46:	89 81       	ldd	r24, Y+1	; 0x01
    2d48:	8c 83       	std	Y+4, r24	; 0x04
            object_core = core;
    2d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d4c:	8b 83       	std	Y+3, r24	; 0x03
        }
        core++;
    2d4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d50:	8f 5f       	subi	r24, 0xFF	; 255
    2d52:	8a 83       	std	Y+2, r24	; 0x02
    load_t max_load;
    core_id_t object_core = (core_id_t)0; //процессор с максимальной нагрузкой, с которого эту нагрузку будем снимать
    core_id_t core = (core_id_t)1;
    max_load  = stat_calc_load( (prio_t)BITS_IN_INDEX_T, stat ); // максимальная нагрузка

    while( core < (core_id_t)MAX_CORES )
    2d54:	8a 81       	ldd	r24, Y+2	; 0x02
    2d56:	82 30       	cpi	r24, 0x02	; 2
    2d58:	30 f3       	brcs	.-52     	; 0x2d26 <sched_highest_load_core+0x28>
            object_core = core;
        }
        core++;
    }

    return object_core;
    2d5a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2d5c:	26 96       	adiw	r28, 0x06	; 6
    2d5e:	0f b6       	in	r0, 0x3f	; 63
    2d60:	f8 94       	cli
    2d62:	de bf       	out	0x3e, r29	; 62
    2d64:	0f be       	out	0x3f, r0	; 63
    2d66:	cd bf       	out	0x3d, r28	; 61
    2d68:	cf 91       	pop	r28
    2d6a:	df 91       	pop	r29
    2d6c:	08 95       	ret

00002d6e <sched_init>:
#endif // CONFIG_MP
//========================================================================================
// Инициация
void sched_init(sched_t * sched, proc_t * idle)
{
    2d6e:	df 93       	push	r29
    2d70:	cf 93       	push	r28
    2d72:	00 d0       	rcall	.+0      	; 0x2d74 <sched_init+0x6>
    2d74:	00 d0       	rcall	.+0      	; 0x2d76 <sched_init+0x8>
    2d76:	00 d0       	rcall	.+0      	; 0x2d78 <sched_init+0xa>
    2d78:	cd b7       	in	r28, 0x3d	; 61
    2d7a:	de b7       	in	r29, 0x3e	; 62
    2d7c:	9c 83       	std	Y+4, r25	; 0x04
    2d7e:	8b 83       	std	Y+3, r24	; 0x03
    2d80:	7e 83       	std	Y+6, r23	; 0x06
    2d82:	6d 83       	std	Y+5, r22	; 0x05
#ifdef CONFIG_MP
    lock_t * sched_lock;
    sched_lock = &sched->lock;
    2d84:	8b 81       	ldd	r24, Y+3	; 0x03
    2d86:	9c 81       	ldd	r25, Y+4	; 0x04
    2d88:	8a 96       	adiw	r24, 0x2a	; 42
    2d8a:	9a 83       	std	Y+2, r25	; 0x02
    2d8c:	89 83       	std	Y+1, r24	; 0x01
    spin_init( sched_lock );
    2d8e:	89 81       	ldd	r24, Y+1	; 0x01
    2d90:	9a 81       	ldd	r25, Y+2	; 0x02
    2d92:	0e 94 0b 01 	call	0x216	; 0x216 <spin_init>
    spin_lock( sched_lock );
    2d96:	89 81       	ldd	r24, Y+1	; 0x01
    2d98:	9a 81       	ldd	r25, Y+2	; 0x02
    2d9a:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
#endif // CONFIG_MP
    sched->ready = (xlist_t *)sched->plst;
    2d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2da0:	9c 81       	ldd	r25, Y+4	; 0x04
    2da2:	06 96       	adiw	r24, 0x06	; 6
    2da4:	eb 81       	ldd	r30, Y+3	; 0x03
    2da6:	fc 81       	ldd	r31, Y+4	; 0x04
    2da8:	93 83       	std	Z+3, r25	; 0x03
    2daa:	82 83       	std	Z+2, r24	; 0x02
    xlist_init( sched->ready );
    2dac:	eb 81       	ldd	r30, Y+3	; 0x03
    2dae:	fc 81       	ldd	r31, Y+4	; 0x04
    2db0:	82 81       	ldd	r24, Z+2	; 0x02
    2db2:	93 81       	ldd	r25, Z+3	; 0x03
    2db4:	0e 94 a7 1e 	call	0x3d4e	; 0x3d4e <xlist_init>
    sched->expired = (xlist_t *)sched->plst + 1;
    2db8:	8b 81       	ldd	r24, Y+3	; 0x03
    2dba:	9c 81       	ldd	r25, Y+4	; 0x04
    2dbc:	47 96       	adiw	r24, 0x17	; 23
    2dbe:	eb 81       	ldd	r30, Y+3	; 0x03
    2dc0:	fc 81       	ldd	r31, Y+4	; 0x04
    2dc2:	95 83       	std	Z+5, r25	; 0x05
    2dc4:	84 83       	std	Z+4, r24	; 0x04
    xlist_init( sched->expired );
    2dc6:	eb 81       	ldd	r30, Y+3	; 0x03
    2dc8:	fc 81       	ldd	r31, Y+4	; 0x04
    2dca:	84 81       	ldd	r24, Z+4	; 0x04
    2dcc:	95 81       	ldd	r25, Z+5	; 0x05
    2dce:	0e 94 a7 1e 	call	0x3d4e	; 0x3d4e <xlist_init>
    pitem_insert( (pitem_t *)idle, sched->ready );
    2dd2:	8d 81       	ldd	r24, Y+5	; 0x05
    2dd4:	9e 81       	ldd	r25, Y+6	; 0x06
    2dd6:	eb 81       	ldd	r30, Y+3	; 0x03
    2dd8:	fc 81       	ldd	r31, Y+4	; 0x04
    2dda:	22 81       	ldd	r18, Z+2	; 0x02
    2ddc:	33 81       	ldd	r19, Z+3	; 0x03
    2dde:	b9 01       	movw	r22, r18
    2de0:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <pitem_insert>
    sched->current_proc = idle;
    2de4:	eb 81       	ldd	r30, Y+3	; 0x03
    2de6:	fc 81       	ldd	r31, Y+4	; 0x04
    2de8:	8d 81       	ldd	r24, Y+5	; 0x05
    2dea:	9e 81       	ldd	r25, Y+6	; 0x06
    2dec:	91 83       	std	Z+1, r25	; 0x01
    2dee:	80 83       	st	Z, r24
    sched->nested_crit_sec = (count_t)0;//вообще это выполняется при запрещенных прерываниях, но не известно, на этом ли процессоре
    2df0:	eb 81       	ldd	r30, Y+3	; 0x03
    2df2:	fc 81       	ldd	r31, Y+4	; 0x04
    2df4:	11 a6       	std	Z+41, r1	; 0x29
    2df6:	10 a6       	std	Z+40, r1	; 0x28
#ifdef CONFIG_MP
    spin_unlock( sched_lock );
    2df8:	89 81       	ldd	r24, Y+1	; 0x01
    2dfa:	9a 81       	ldd	r25, Y+2	; 0x02
    2dfc:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
    stat_inc( idle, (stat_t *)kernel.stat + idle->core_id );
    2e00:	ed 81       	ldd	r30, Y+5	; 0x05
    2e02:	fe 81       	ldd	r31, Y+6	; 0x06
    2e04:	81 a1       	ldd	r24, Z+33	; 0x21
    2e06:	88 2f       	mov	r24, r24
    2e08:	90 e0       	ldi	r25, 0x00	; 0
    2e0a:	9c 01       	movw	r18, r24
    2e0c:	2f 56       	subi	r18, 0x6F	; 111
    2e0e:	3c 4f       	sbci	r19, 0xFC	; 252
    2e10:	8d 81       	ldd	r24, Y+5	; 0x05
    2e12:	9e 81       	ldd	r25, Y+6	; 0x06
    2e14:	b9 01       	movw	r22, r18
    2e16:	0e 94 6e 01 	call	0x2dc	; 0x2dc <stat_inc>
#endif // CONFIG_MP
}
    2e1a:	26 96       	adiw	r28, 0x06	; 6
    2e1c:	0f b6       	in	r0, 0x3f	; 63
    2e1e:	f8 94       	cli
    2e20:	de bf       	out	0x3e, r29	; 62
    2e22:	0f be       	out	0x3f, r0	; 63
    2e24:	cd bf       	out	0x3d, r28	; 61
    2e26:	cf 91       	pop	r28
    2e28:	df 91       	pop	r29
    2e2a:	08 95       	ret

00002e2c <_sched_switch_current>:
static void _sched_switch_current( sched_t * sched, proc_t ** current_proc )
{
    2e2c:	df 93       	push	r29
    2e2e:	cf 93       	push	r28
    2e30:	00 d0       	rcall	.+0      	; 0x2e32 <_sched_switch_current+0x6>
    2e32:	00 d0       	rcall	.+0      	; 0x2e34 <_sched_switch_current+0x8>
    2e34:	00 d0       	rcall	.+0      	; 0x2e36 <_sched_switch_current+0xa>
    2e36:	cd b7       	in	r28, 0x3d	; 61
    2e38:	de b7       	in	r29, 0x3e	; 62
    2e3a:	9c 83       	std	Y+4, r25	; 0x04
    2e3c:	8b 83       	std	Y+3, r24	; 0x03
    2e3e:	7e 83       	std	Y+6, r23	; 0x06
    2e40:	6d 83       	std	Y+5, r22	; 0x05

    SPIN_LOCK( sched );
    2e42:	8b 81       	ldd	r24, Y+3	; 0x03
    2e44:	9c 81       	ldd	r25, Y+4	; 0x04
    2e46:	8a 96       	adiw	r24, 0x2a	; 42
    2e48:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    // Если список ready опустел, - переключаем списки
    if( sched->ready->index == (index_t)0 )
    2e4c:	eb 81       	ldd	r30, Y+3	; 0x03
    2e4e:	fc 81       	ldd	r31, Y+4	; 0x04
    2e50:	02 80       	ldd	r0, Z+2	; 0x02
    2e52:	f3 81       	ldd	r31, Z+3	; 0x03
    2e54:	e0 2d       	mov	r30, r0
    2e56:	80 89       	ldd	r24, Z+16	; 0x10
    2e58:	88 23       	and	r24, r24
    2e5a:	a1 f4       	brne	.+40     	; 0x2e84 <_sched_switch_current+0x58>
    {
        xlist_t * buf;
        buf = sched->ready;
    2e5c:	eb 81       	ldd	r30, Y+3	; 0x03
    2e5e:	fc 81       	ldd	r31, Y+4	; 0x04
    2e60:	82 81       	ldd	r24, Z+2	; 0x02
    2e62:	93 81       	ldd	r25, Z+3	; 0x03
    2e64:	9a 83       	std	Y+2, r25	; 0x02
    2e66:	89 83       	std	Y+1, r24	; 0x01
        sched->ready = sched->expired;
    2e68:	eb 81       	ldd	r30, Y+3	; 0x03
    2e6a:	fc 81       	ldd	r31, Y+4	; 0x04
    2e6c:	84 81       	ldd	r24, Z+4	; 0x04
    2e6e:	95 81       	ldd	r25, Z+5	; 0x05
    2e70:	eb 81       	ldd	r30, Y+3	; 0x03
    2e72:	fc 81       	ldd	r31, Y+4	; 0x04
    2e74:	93 83       	std	Z+3, r25	; 0x03
    2e76:	82 83       	std	Z+2, r24	; 0x02
        sched->expired = buf;
    2e78:	eb 81       	ldd	r30, Y+3	; 0x03
    2e7a:	fc 81       	ldd	r31, Y+4	; 0x04
    2e7c:	89 81       	ldd	r24, Y+1	; 0x01
    2e7e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e80:	95 83       	std	Z+5, r25	; 0x05
    2e82:	84 83       	std	Z+4, r24	; 0x04
    }
    // Изменять указатель будем при захваченной блокировке,
    // чтобы процессы на других процессорах не прочитали неизвестно что.
    sched->current_proc = (proc_t *)xlist_head( sched->ready ); // Вытесняющая многозадачность же!
    2e84:	eb 81       	ldd	r30, Y+3	; 0x03
    2e86:	fc 81       	ldd	r31, Y+4	; 0x04
    2e88:	82 81       	ldd	r24, Z+2	; 0x02
    2e8a:	93 81       	ldd	r25, Z+3	; 0x03
    2e8c:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <xlist_head>
    2e90:	eb 81       	ldd	r30, Y+3	; 0x03
    2e92:	fc 81       	ldd	r31, Y+4	; 0x04
    2e94:	91 83       	std	Z+1, r25	; 0x01
    2e96:	80 83       	st	Z, r24
    *current_proc = sched->current_proc;
    2e98:	eb 81       	ldd	r30, Y+3	; 0x03
    2e9a:	fc 81       	ldd	r31, Y+4	; 0x04
    2e9c:	80 81       	ld	r24, Z
    2e9e:	91 81       	ldd	r25, Z+1	; 0x01
    2ea0:	ed 81       	ldd	r30, Y+5	; 0x05
    2ea2:	fe 81       	ldd	r31, Y+6	; 0x06
    2ea4:	91 83       	std	Z+1, r25	; 0x01
    2ea6:	80 83       	st	Z, r24

    SPIN_UNLOCK( sched );
    2ea8:	8b 81       	ldd	r24, Y+3	; 0x03
    2eaa:	9c 81       	ldd	r25, Y+4	; 0x04
    2eac:	8a 96       	adiw	r24, 0x2a	; 42
    2eae:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
}
    2eb2:	26 96       	adiw	r28, 0x06	; 6
    2eb4:	0f b6       	in	r0, 0x3f	; 63
    2eb6:	f8 94       	cli
    2eb8:	de bf       	out	0x3e, r29	; 62
    2eba:	0f be       	out	0x3f, r0	; 63
    2ebc:	cd bf       	out	0x3d, r28	; 61
    2ebe:	cf 91       	pop	r28
    2ec0:	df 91       	pop	r29
    2ec2:	08 95       	ret

00002ec4 <sched_schedule>:
2) В качестве аргумента передаем только тот объект, который управляет процессами
на исполняющем функции процессоре.
******************************************************************************************/
// Функция планирования, переключает процессы в обработчике системмного таймера
void sched_schedule(void)
{
    2ec4:	df 93       	push	r29
    2ec6:	cf 93       	push	r28
    2ec8:	00 d0       	rcall	.+0      	; 0x2eca <sched_schedule+0x6>
    2eca:	00 d0       	rcall	.+0      	; 0x2ecc <sched_schedule+0x8>
    2ecc:	00 d0       	rcall	.+0      	; 0x2ece <sched_schedule+0xa>
    2ece:	cd b7       	in	r28, 0x3d	; 61
    2ed0:	de b7       	in	r29, 0x3e	; 62
    proc_t * current_proc;
    sched_t * sched;
    sched = _SCHED_INIT();
    2ed2:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <current_core>
    2ed6:	28 2f       	mov	r18, r24
    2ed8:	30 e0       	ldi	r19, 0x00	; 0
    2eda:	8b e2       	ldi	r24, 0x2B	; 43
    2edc:	90 e0       	ldi	r25, 0x00	; 0
    2ede:	ac 01       	movw	r20, r24
    2ee0:	24 9f       	mul	r18, r20
    2ee2:	c0 01       	movw	r24, r0
    2ee4:	25 9f       	mul	r18, r21
    2ee6:	90 0d       	add	r25, r0
    2ee8:	34 9f       	mul	r19, r20
    2eea:	90 0d       	add	r25, r0
    2eec:	11 24       	eor	r1, r1
    2eee:	85 52       	subi	r24, 0x25	; 37
    2ef0:	9d 4f       	sbci	r25, 0xFD	; 253
    2ef2:	9c 83       	std	Y+4, r25	; 0x04
    2ef4:	8b 83       	std	Y+3, r24	; 0x03
    // Меняем только с локального процессора, блокировку sched->lock можно не захватывать!
    current_proc = sched->current_proc;
    2ef6:	eb 81       	ldd	r30, Y+3	; 0x03
    2ef8:	fc 81       	ldd	r31, Y+4	; 0x04
    2efa:	80 81       	ld	r24, Z
    2efc:	91 81       	ldd	r25, Z+1	; 0x01
    2efe:	9e 83       	std	Y+6, r25	; 0x06
    2f00:	8d 83       	std	Y+5, r24	; 0x05
    // А вот эту блокировку обязательно надо захватить!
    SPIN_LOCK( current_proc );
    2f02:	8d 81       	ldd	r24, Y+5	; 0x05
    2f04:	9e 81       	ldd	r25, Y+6	; 0x06
    2f06:	83 96       	adiw	r24, 0x23	; 35
    2f08:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    // Хук "сохранение контекста"
    if( current_proc->sv_hook )current_proc->sv_hook( current_proc->arg );
    2f0c:	ed 81       	ldd	r30, Y+5	; 0x05
    2f0e:	fe 81       	ldd	r31, Y+6	; 0x06
    2f10:	86 a1       	ldd	r24, Z+38	; 0x26
    2f12:	97 a1       	ldd	r25, Z+39	; 0x27
    2f14:	00 97       	sbiw	r24, 0x00	; 0
    2f16:	51 f0       	breq	.+20     	; 0x2f2c <sched_schedule+0x68>
    2f18:	ed 81       	ldd	r30, Y+5	; 0x05
    2f1a:	fe 81       	ldd	r31, Y+6	; 0x06
    2f1c:	26 a1       	ldd	r18, Z+38	; 0x26
    2f1e:	37 a1       	ldd	r19, Z+39	; 0x27
    2f20:	ed 81       	ldd	r30, Y+5	; 0x05
    2f22:	fe 81       	ldd	r31, Y+6	; 0x06
    2f24:	82 a5       	ldd	r24, Z+42	; 0x2a
    2f26:	93 a5       	ldd	r25, Z+43	; 0x2b
    2f28:	f9 01       	movw	r30, r18
    2f2a:	09 95       	icall
    // Проверяем, что процесс находится в списке ready
    if( (xlist_t *)((pitem_t *)current_proc)->list == sched->ready )
    2f2c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f2e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f30:	fc 01       	movw	r30, r24
    2f32:	24 81       	ldd	r18, Z+4	; 0x04
    2f34:	35 81       	ldd	r19, Z+5	; 0x05
    2f36:	eb 81       	ldd	r30, Y+3	; 0x03
    2f38:	fc 81       	ldd	r31, Y+4	; 0x04
    2f3a:	82 81       	ldd	r24, Z+2	; 0x02
    2f3c:	93 81       	ldd	r25, Z+3	; 0x03
    2f3e:	28 17       	cp	r18, r24
    2f40:	39 07       	cpc	r19, r25
    2f42:	09 f0       	breq	.+2      	; 0x2f46 <sched_schedule+0x82>
    2f44:	94 c0       	rjmp	.+296    	; 0x306e <sched_schedule+0x1aa>
    {
        // Переключаем cписок на следующий за текущим процесс
        SPIN_LOCK( sched );
    2f46:	8b 81       	ldd	r24, Y+3	; 0x03
    2f48:	9c 81       	ldd	r25, Y+4	; 0x04
    2f4a:	8a 96       	adiw	r24, 0x2a	; 42
    2f4c:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>

        xlist_switch( sched->ready, ((pitem_t *)current_proc)->prio );
    2f50:	eb 81       	ldd	r30, Y+3	; 0x03
    2f52:	fc 81       	ldd	r31, Y+4	; 0x04
    2f54:	22 81       	ldd	r18, Z+2	; 0x02
    2f56:	33 81       	ldd	r19, Z+3	; 0x03
    2f58:	8d 81       	ldd	r24, Y+5	; 0x05
    2f5a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f5c:	fc 01       	movw	r30, r24
    2f5e:	46 81       	ldd	r20, Z+6	; 0x06
    2f60:	c9 01       	movw	r24, r18
    2f62:	64 2f       	mov	r22, r20
    2f64:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <xlist_switch>

        SPIN_UNLOCK( sched );
    2f68:	8b 81       	ldd	r24, Y+3	; 0x03
    2f6a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f6c:	8a 96       	adiw	r24, 0x2a	; 42
    2f6e:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
        //Проверяем, не истек ли квант времени процесса
        if( current_proc->timer > (timer_t)1 )current_proc->timer--;// Не истек, уменьшаем таймер
    2f72:	ed 81       	ldd	r30, Y+5	; 0x05
    2f74:	fe 81       	ldd	r31, Y+6	; 0x06
    2f76:	85 8d       	ldd	r24, Z+29	; 0x1d
    2f78:	96 8d       	ldd	r25, Z+30	; 0x1e
    2f7a:	82 30       	cpi	r24, 0x02	; 2
    2f7c:	91 05       	cpc	r25, r1
    2f7e:	40 f0       	brcs	.+16     	; 0x2f90 <sched_schedule+0xcc>
    2f80:	ed 81       	ldd	r30, Y+5	; 0x05
    2f82:	fe 81       	ldd	r31, Y+6	; 0x06
    2f84:	85 8d       	ldd	r24, Z+29	; 0x1d
    2f86:	96 8d       	ldd	r25, Z+30	; 0x1e
    2f88:	01 97       	sbiw	r24, 0x01	; 1
    2f8a:	96 8f       	std	Z+30, r25	; 0x1e
    2f8c:	85 8f       	std	Z+29, r24	; 0x1d
    2f8e:	6f c0       	rjmp	.+222    	; 0x306e <sched_schedule+0x1aa>
        else
        {
            flag_t flags;
            // Истек, вырезаем процесс из списка
            SPIN_LOCK( sched );
    2f90:	8b 81       	ldd	r24, Y+3	; 0x03
    2f92:	9c 81       	ldd	r25, Y+4	; 0x04
    2f94:	8a 96       	adiw	r24, 0x2a	; 42
    2f96:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>

            pitem_fast_cut( (pitem_t *)current_proc );
    2f9a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f9c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f9e:	0e 94 32 11 	call	0x2264	; 0x2264 <pitem_fast_cut>

            SPIN_UNLOCK( sched );
    2fa2:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa4:	9c 81       	ldd	r25, Y+4	; 0x04
    2fa6:	8a 96       	adiw	r24, 0x2a	; 42
    2fa8:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
            spin_lock( &kernel.stat_lock );
            // Обновили статистику после удаления процесса из списка ready
            stat_dec( current_proc, (stat_t *)kernel.stat + current_proc->core_id );
#endif // CONFIG_USE_ALB
            // А что за процесс собственно?
            flags = current_proc->flags;
    2fac:	ed 81       	ldd	r30, Y+5	; 0x05
    2fae:	fe 81       	ldd	r31, Y+6	; 0x06
    2fb0:	87 81       	ldd	r24, Z+7	; 0x07
    2fb2:	90 85       	ldd	r25, Z+8	; 0x08
    2fb4:	9a 83       	std	Y+2, r25	; 0x02
    2fb6:	89 83       	std	Y+1, r24	; 0x01
            if(
    2fb8:	89 81       	ldd	r24, Y+1	; 0x01
    2fba:	9a 81       	ldd	r25, Y+2	; 0x02
    2fbc:	81 70       	andi	r24, 0x01	; 1
    2fbe:	90 70       	andi	r25, 0x00	; 0
    2fc0:	00 97       	sbiw	r24, 0x00	; 0
    2fc2:	31 f0       	breq	.+12     	; 0x2fd0 <sched_schedule+0x10c>
    2fc4:	89 81       	ldd	r24, Y+1	; 0x01
    2fc6:	9a 81       	ldd	r25, Y+2	; 0x02
    2fc8:	8c 70       	andi	r24, 0x0C	; 12
    2fca:	90 70       	andi	r25, 0x00	; 0
    2fcc:	00 97       	sbiw	r24, 0x00	; 0
    2fce:	f1 f0       	breq	.+60     	; 0x300c <sched_schedule+0x148>
                SPIN_LOCK( new_sched );
                pitem_insert( (pitem_t *)current_proc, new_sched->expired );
                SPIN_UNLOCK( new_sched );
#else // CONFIG_MP CONFIG_USE_ALB
                // Тупо переносим процесс в список expired
                SPIN_LOCK( sched );
    2fd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2fd2:	9c 81       	ldd	r25, Y+4	; 0x04
    2fd4:	8a 96       	adiw	r24, 0x2a	; 42
    2fd6:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>

                pitem_insert( (pitem_t *)current_proc, sched->expired );
    2fda:	8d 81       	ldd	r24, Y+5	; 0x05
    2fdc:	9e 81       	ldd	r25, Y+6	; 0x06
    2fde:	eb 81       	ldd	r30, Y+3	; 0x03
    2fe0:	fc 81       	ldd	r31, Y+4	; 0x04
    2fe2:	24 81       	ldd	r18, Z+4	; 0x04
    2fe4:	35 81       	ldd	r19, Z+5	; 0x05
    2fe6:	b9 01       	movw	r22, r18
    2fe8:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <pitem_insert>

                SPIN_UNLOCK( sched );
    2fec:	8b 81       	ldd	r24, Y+3	; 0x03
    2fee:	9c 81       	ldd	r25, Y+4	; 0x04
    2ff0:	8a 96       	adiw	r24, 0x2a	; 42
    2ff2:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>

#endif // CONFIG_MP CONFIG_USE_ALB
                current_proc->timer = current_proc->time_quant; // Сбросили таймер!
    2ff6:	ad 81       	ldd	r26, Y+5	; 0x05
    2ff8:	be 81       	ldd	r27, Y+6	; 0x06
    2ffa:	ed 81       	ldd	r30, Y+5	; 0x05
    2ffc:	fe 81       	ldd	r31, Y+6	; 0x06
    2ffe:	83 8d       	ldd	r24, Z+27	; 0x1b
    3000:	94 8d       	ldd	r25, Z+28	; 0x1c
    3002:	5e 96       	adiw	r26, 0x1e	; 30
    3004:	9c 93       	st	X, r25
    3006:	8e 93       	st	-X, r24
    3008:	5d 97       	sbiw	r26, 0x1d	; 29
    300a:	31 c0       	rjmp	.+98     	; 0x306e <sched_schedule+0x1aa>
                /*********************************************************
                Если не используется активная схема балансировки нагрузки,
                то захват нужно делать тут, блокировка захватывается только
                в этой ветви оператора if.
                *********************************************************/
                spin_lock( &kernel.stat_lock );
    300c:	83 e9       	ldi	r24, 0x93	; 147
    300e:	93 e0       	ldi	r25, 0x03	; 3
    3010:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
                stat_dec( current_proc, (stat_t *)kernel.stat + current_proc->core_id );
    3014:	4d 81       	ldd	r20, Y+5	; 0x05
    3016:	5e 81       	ldd	r21, Y+6	; 0x06
    3018:	ed 81       	ldd	r30, Y+5	; 0x05
    301a:	fe 81       	ldd	r31, Y+6	; 0x06
    301c:	81 a1       	ldd	r24, Z+33	; 0x21
    301e:	88 2f       	mov	r24, r24
    3020:	90 e0       	ldi	r25, 0x00	; 0
    3022:	9c 01       	movw	r18, r24
    3024:	2f 56       	subi	r18, 0x6F	; 111
    3026:	3c 4f       	sbci	r19, 0xFC	; 252
    3028:	ca 01       	movw	r24, r20
    302a:	b9 01       	movw	r22, r18
    302c:	0e 94 58 01 	call	0x2b0	; 0x2b0 <stat_dec>
                 - если используется активная схема балансировки нагрузки,
                то блокировка была захвачена до входа в if;
                 - если не используется активная схема балансировки нагрузки,
                то блокировка была захвачена в этой ветви if.
                *********************************************************/
                spin_unlock( &kernel.stat_lock );
    3030:	83 e9       	ldi	r24, 0x93	; 147
    3032:	93 e0       	ldi	r25, 0x03	; 3
    3034:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
#endif // CONFIG_MP
                ((pitem_t *)current_proc)->list = (xlist_t *)0;// Просто вырезали из списка, как в pitem_cut
    3038:	8d 81       	ldd	r24, Y+5	; 0x05
    303a:	9e 81       	ldd	r25, Y+6	; 0x06
    303c:	fc 01       	movw	r30, r24
    303e:	15 82       	std	Z+5, r1	; 0x05
    3040:	14 82       	std	Z+4, r1	; 0x04
                current_proc->flags |= PROC_FLG_WD_STOP;//Остановлен по WD
    3042:	ad 81       	ldd	r26, Y+5	; 0x05
    3044:	be 81       	ldd	r27, Y+6	; 0x06
    3046:	ed 81       	ldd	r30, Y+5	; 0x05
    3048:	fe 81       	ldd	r31, Y+6	; 0x06
    304a:	87 81       	ldd	r24, Z+7	; 0x07
    304c:	90 85       	ldd	r25, Z+8	; 0x08
    304e:	92 60       	ori	r25, 0x02	; 2
    3050:	18 96       	adiw	r26, 0x08	; 8
    3052:	9c 93       	st	X, r25
    3054:	8e 93       	st	-X, r24
    3056:	17 97       	sbiw	r26, 0x07	; 7
                current_proc->flags &= ~PROC_FLG_RUN;
    3058:	ad 81       	ldd	r26, Y+5	; 0x05
    305a:	be 81       	ldd	r27, Y+6	; 0x06
    305c:	ed 81       	ldd	r30, Y+5	; 0x05
    305e:	fe 81       	ldd	r31, Y+6	; 0x06
    3060:	87 81       	ldd	r24, Z+7	; 0x07
    3062:	90 85       	ldd	r25, Z+8	; 0x08
    3064:	8d 7f       	andi	r24, 0xFD	; 253
    3066:	18 96       	adiw	r26, 0x08	; 8
    3068:	9c 93       	st	X, r25
    306a:	8e 93       	st	-X, r24
    306c:	17 97       	sbiw	r26, 0x07	; 7
            }
        }
    }
    //Текущий процесс более не нужен, освобождаем его блокировку
    SPIN_UNLOCK( current_proc );
    306e:	8d 81       	ldd	r24, Y+5	; 0x05
    3070:	9e 81       	ldd	r25, Y+6	; 0x06
    3072:	83 96       	adiw	r24, 0x23	; 35
    3074:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>

    _sched_switch_current( sched, &current_proc );
    3078:	8b 81       	ldd	r24, Y+3	; 0x03
    307a:	9c 81       	ldd	r25, Y+4	; 0x04
    307c:	9e 01       	movw	r18, r28
    307e:	2b 5f       	subi	r18, 0xFB	; 251
    3080:	3f 4f       	sbci	r19, 0xFF	; 255
    3082:	b9 01       	movw	r22, r18
    3084:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_sched_switch_current>

    SPIN_LOCK( current_proc );
    3088:	8d 81       	ldd	r24, Y+5	; 0x05
    308a:	9e 81       	ldd	r25, Y+6	; 0x06
    308c:	83 96       	adiw	r24, 0x23	; 35
    308e:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    //Хук "восстановление контекста"
    if( current_proc->rs_hook )current_proc->rs_hook( current_proc->arg );
    3092:	ed 81       	ldd	r30, Y+5	; 0x05
    3094:	fe 81       	ldd	r31, Y+6	; 0x06
    3096:	80 a5       	ldd	r24, Z+40	; 0x28
    3098:	91 a5       	ldd	r25, Z+41	; 0x29
    309a:	00 97       	sbiw	r24, 0x00	; 0
    309c:	51 f0       	breq	.+20     	; 0x30b2 <sched_schedule+0x1ee>
    309e:	ed 81       	ldd	r30, Y+5	; 0x05
    30a0:	fe 81       	ldd	r31, Y+6	; 0x06
    30a2:	20 a5       	ldd	r18, Z+40	; 0x28
    30a4:	31 a5       	ldd	r19, Z+41	; 0x29
    30a6:	ed 81       	ldd	r30, Y+5	; 0x05
    30a8:	fe 81       	ldd	r31, Y+6	; 0x06
    30aa:	82 a5       	ldd	r24, Z+42	; 0x2a
    30ac:	93 a5       	ldd	r25, Z+43	; 0x2b
    30ae:	f9 01       	movw	r30, r18
    30b0:	09 95       	icall

    SPIN_UNLOCK( current_proc );
    30b2:	8d 81       	ldd	r24, Y+5	; 0x05
    30b4:	9e 81       	ldd	r25, Y+6	; 0x06
    30b6:	83 96       	adiw	r24, 0x23	; 35
    30b8:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
}
    30bc:	26 96       	adiw	r28, 0x06	; 6
    30be:	0f b6       	in	r0, 0x3f	; 63
    30c0:	f8 94       	cli
    30c2:	de bf       	out	0x3e, r29	; 62
    30c4:	0f be       	out	0x3f, r0	; 63
    30c6:	cd bf       	out	0x3d, r28	; 61
    30c8:	cf 91       	pop	r28
    30ca:	df 91       	pop	r29
    30cc:	08 95       	ret

000030ce <sched_reschedule>:
//----------------------------------------------------------------------------------------
// Функция перепланирования, переключает процессы в обработчике прерывания resched
void sched_reschedule(void)
{
    30ce:	df 93       	push	r29
    30d0:	cf 93       	push	r28
    30d2:	00 d0       	rcall	.+0      	; 0x30d4 <sched_reschedule+0x6>
    30d4:	00 d0       	rcall	.+0      	; 0x30d6 <sched_reschedule+0x8>
    30d6:	cd b7       	in	r28, 0x3d	; 61
    30d8:	de b7       	in	r29, 0x3e	; 62
    proc_t * current_proc;
    sched_t * sched;
    sched = _SCHED_INIT();
    30da:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <current_core>
    30de:	28 2f       	mov	r18, r24
    30e0:	30 e0       	ldi	r19, 0x00	; 0
    30e2:	8b e2       	ldi	r24, 0x2B	; 43
    30e4:	90 e0       	ldi	r25, 0x00	; 0
    30e6:	ac 01       	movw	r20, r24
    30e8:	24 9f       	mul	r18, r20
    30ea:	c0 01       	movw	r24, r0
    30ec:	25 9f       	mul	r18, r21
    30ee:	90 0d       	add	r25, r0
    30f0:	34 9f       	mul	r19, r20
    30f2:	90 0d       	add	r25, r0
    30f4:	11 24       	eor	r1, r1
    30f6:	85 52       	subi	r24, 0x25	; 37
    30f8:	9d 4f       	sbci	r25, 0xFD	; 253
    30fa:	9a 83       	std	Y+2, r25	; 0x02
    30fc:	89 83       	std	Y+1, r24	; 0x01
    // Меняем только с локального процессора, блокировку sched->lock можно не захватывать!
    current_proc = sched->current_proc;
    30fe:	e9 81       	ldd	r30, Y+1	; 0x01
    3100:	fa 81       	ldd	r31, Y+2	; 0x02
    3102:	80 81       	ld	r24, Z
    3104:	91 81       	ldd	r25, Z+1	; 0x01
    3106:	9c 83       	std	Y+4, r25	; 0x04
    3108:	8b 83       	std	Y+3, r24	; 0x03
    // А вот эту блокировку обязательно надо захватить!
    SPIN_LOCK( current_proc );
    310a:	8b 81       	ldd	r24, Y+3	; 0x03
    310c:	9c 81       	ldd	r25, Y+4	; 0x04
    310e:	83 96       	adiw	r24, 0x23	; 35
    3110:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    // Хук "сохранение контекста"
    if( current_proc->sv_hook )current_proc->sv_hook( current_proc->arg );
    3114:	eb 81       	ldd	r30, Y+3	; 0x03
    3116:	fc 81       	ldd	r31, Y+4	; 0x04
    3118:	86 a1       	ldd	r24, Z+38	; 0x26
    311a:	97 a1       	ldd	r25, Z+39	; 0x27
    311c:	00 97       	sbiw	r24, 0x00	; 0
    311e:	51 f0       	breq	.+20     	; 0x3134 <sched_reschedule+0x66>
    3120:	eb 81       	ldd	r30, Y+3	; 0x03
    3122:	fc 81       	ldd	r31, Y+4	; 0x04
    3124:	26 a1       	ldd	r18, Z+38	; 0x26
    3126:	37 a1       	ldd	r19, Z+39	; 0x27
    3128:	eb 81       	ldd	r30, Y+3	; 0x03
    312a:	fc 81       	ldd	r31, Y+4	; 0x04
    312c:	82 a5       	ldd	r24, Z+42	; 0x2a
    312e:	93 a5       	ldd	r25, Z+43	; 0x2b
    3130:	f9 01       	movw	r30, r18
    3132:	09 95       	icall

    SPIN_UNLOCK( current_proc );
    3134:	8b 81       	ldd	r24, Y+3	; 0x03
    3136:	9c 81       	ldd	r25, Y+4	; 0x04
    3138:	83 96       	adiw	r24, 0x23	; 35
    313a:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>

    _sched_switch_current( sched, &current_proc );
    313e:	89 81       	ldd	r24, Y+1	; 0x01
    3140:	9a 81       	ldd	r25, Y+2	; 0x02
    3142:	9e 01       	movw	r18, r28
    3144:	2d 5f       	subi	r18, 0xFD	; 253
    3146:	3f 4f       	sbci	r19, 0xFF	; 255
    3148:	b9 01       	movw	r22, r18
    314a:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_sched_switch_current>

    SPIN_LOCK( current_proc );
    314e:	8b 81       	ldd	r24, Y+3	; 0x03
    3150:	9c 81       	ldd	r25, Y+4	; 0x04
    3152:	83 96       	adiw	r24, 0x23	; 35
    3154:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    //Хук "восстановление контекста"
    if( current_proc->rs_hook )current_proc->rs_hook( current_proc->arg );
    3158:	eb 81       	ldd	r30, Y+3	; 0x03
    315a:	fc 81       	ldd	r31, Y+4	; 0x04
    315c:	80 a5       	ldd	r24, Z+40	; 0x28
    315e:	91 a5       	ldd	r25, Z+41	; 0x29
    3160:	00 97       	sbiw	r24, 0x00	; 0
    3162:	51 f0       	breq	.+20     	; 0x3178 <sched_reschedule+0xaa>
    3164:	eb 81       	ldd	r30, Y+3	; 0x03
    3166:	fc 81       	ldd	r31, Y+4	; 0x04
    3168:	20 a5       	ldd	r18, Z+40	; 0x28
    316a:	31 a5       	ldd	r19, Z+41	; 0x29
    316c:	eb 81       	ldd	r30, Y+3	; 0x03
    316e:	fc 81       	ldd	r31, Y+4	; 0x04
    3170:	82 a5       	ldd	r24, Z+42	; 0x2a
    3172:	93 a5       	ldd	r25, Z+43	; 0x2b
    3174:	f9 01       	movw	r30, r18
    3176:	09 95       	icall

    SPIN_UNLOCK( current_proc );
    3178:	8b 81       	ldd	r24, Y+3	; 0x03
    317a:	9c 81       	ldd	r25, Y+4	; 0x04
    317c:	83 96       	adiw	r24, 0x23	; 35
    317e:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
}
    3182:	0f 90       	pop	r0
    3184:	0f 90       	pop	r0
    3186:	0f 90       	pop	r0
    3188:	0f 90       	pop	r0
    318a:	cf 91       	pop	r28
    318c:	df 91       	pop	r29
    318e:	08 95       	ret

00003190 <sem_init_isr>:
*****************************************************************************************/
#include "../include/bugurt.h"

// Инициализация
void sem_init_isr( sem_t * sem, count_t count )
{
    3190:	df 93       	push	r29
    3192:	cf 93       	push	r28
    3194:	00 d0       	rcall	.+0      	; 0x3196 <sem_init_isr+0x6>
    3196:	00 d0       	rcall	.+0      	; 0x3198 <sem_init_isr+0x8>
    3198:	cd b7       	in	r28, 0x3d	; 61
    319a:	de b7       	in	r29, 0x3e	; 62
    319c:	9a 83       	std	Y+2, r25	; 0x02
    319e:	89 83       	std	Y+1, r24	; 0x01
    31a0:	7c 83       	std	Y+4, r23	; 0x04
    31a2:	6b 83       	std	Y+3, r22	; 0x03
    SPIN_INIT( sem );
    31a4:	89 81       	ldd	r24, Y+1	; 0x01
    31a6:	9a 81       	ldd	r25, Y+2	; 0x02
    31a8:	43 96       	adiw	r24, 0x13	; 19
    31aa:	0e 94 0b 01 	call	0x216	; 0x216 <spin_init>
    SPIN_LOCK( sem );
    31ae:	89 81       	ldd	r24, Y+1	; 0x01
    31b0:	9a 81       	ldd	r25, Y+2	; 0x02
    31b2:	43 96       	adiw	r24, 0x13	; 19
    31b4:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>

    xlist_init( (xlist_t *)sem );
    31b8:	89 81       	ldd	r24, Y+1	; 0x01
    31ba:	9a 81       	ldd	r25, Y+2	; 0x02
    31bc:	0e 94 a7 1e 	call	0x3d4e	; 0x3d4e <xlist_init>
    sem->counter = count;
    31c0:	e9 81       	ldd	r30, Y+1	; 0x01
    31c2:	fa 81       	ldd	r31, Y+2	; 0x02
    31c4:	8b 81       	ldd	r24, Y+3	; 0x03
    31c6:	9c 81       	ldd	r25, Y+4	; 0x04
    31c8:	92 8b       	std	Z+18, r25	; 0x12
    31ca:	81 8b       	std	Z+17, r24	; 0x11
    SPIN_UNLOCK( sem );
    31cc:	89 81       	ldd	r24, Y+1	; 0x01
    31ce:	9a 81       	ldd	r25, Y+2	; 0x02
    31d0:	43 96       	adiw	r24, 0x13	; 19
    31d2:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
}
    31d6:	0f 90       	pop	r0
    31d8:	0f 90       	pop	r0
    31da:	0f 90       	pop	r0
    31dc:	0f 90       	pop	r0
    31de:	cf 91       	pop	r28
    31e0:	df 91       	pop	r29
    31e2:	08 95       	ret

000031e4 <_sem_lock>:

bool_t _sem_lock( sem_t * sem )
{
    31e4:	df 93       	push	r29
    31e6:	cf 93       	push	r28
    31e8:	00 d0       	rcall	.+0      	; 0x31ea <_sem_lock+0x6>
    31ea:	00 d0       	rcall	.+0      	; 0x31ec <_sem_lock+0x8>
    31ec:	0f 92       	push	r0
    31ee:	cd b7       	in	r28, 0x3d	; 61
    31f0:	de b7       	in	r29, 0x3e	; 62
    31f2:	9d 83       	std	Y+5, r25	; 0x05
    31f4:	8c 83       	std	Y+4, r24	; 0x04
    bool_t ret = (bool_t)0;
    31f6:	1b 82       	std	Y+3, r1	; 0x03
    proc_t * proc;
    proc = current_proc();
    31f8:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <current_proc>
    31fc:	9a 83       	std	Y+2, r25	; 0x02
    31fe:	89 83       	std	Y+1, r24	; 0x01
    // Выставляем флаг захватат семафора
    SPIN_LOCK( proc );
    3200:	89 81       	ldd	r24, Y+1	; 0x01
    3202:	9a 81       	ldd	r25, Y+2	; 0x02
    3204:	83 96       	adiw	r24, 0x23	; 35
    3206:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    proc->flags |= PROC_FLG_SEM;
    320a:	e9 81       	ldd	r30, Y+1	; 0x01
    320c:	fa 81       	ldd	r31, Y+2	; 0x02
    320e:	87 81       	ldd	r24, Z+7	; 0x07
    3210:	90 85       	ldd	r25, Z+8	; 0x08
    3212:	88 60       	ori	r24, 0x08	; 8
    3214:	e9 81       	ldd	r30, Y+1	; 0x01
    3216:	fa 81       	ldd	r31, Y+2	; 0x02
    3218:	90 87       	std	Z+8, r25	; 0x08
    321a:	87 83       	std	Z+7, r24	; 0x07
    SPIN_UNLOCK( proc );
    321c:	89 81       	ldd	r24, Y+1	; 0x01
    321e:	9a 81       	ldd	r25, Y+2	; 0x02
    3220:	83 96       	adiw	r24, 0x23	; 35
    3222:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
    // Собственно захват семафора
    SPIN_LOCK( sem );
    3226:	8c 81       	ldd	r24, Y+4	; 0x04
    3228:	9d 81       	ldd	r25, Y+5	; 0x05
    322a:	43 96       	adiw	r24, 0x13	; 19
    322c:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    if( sem->counter != 0 )
    3230:	ec 81       	ldd	r30, Y+4	; 0x04
    3232:	fd 81       	ldd	r31, Y+5	; 0x05
    3234:	81 89       	ldd	r24, Z+17	; 0x11
    3236:	92 89       	ldd	r25, Z+18	; 0x12
    3238:	00 97       	sbiw	r24, 0x00	; 0
    323a:	61 f0       	breq	.+24     	; 0x3254 <_sem_lock+0x70>
    {
        sem->counter--;
    323c:	ec 81       	ldd	r30, Y+4	; 0x04
    323e:	fd 81       	ldd	r31, Y+5	; 0x05
    3240:	81 89       	ldd	r24, Z+17	; 0x11
    3242:	92 89       	ldd	r25, Z+18	; 0x12
    3244:	01 97       	sbiw	r24, 0x01	; 1
    3246:	ec 81       	ldd	r30, Y+4	; 0x04
    3248:	fd 81       	ldd	r31, Y+5	; 0x05
    324a:	92 8b       	std	Z+18, r25	; 0x12
    324c:	81 8b       	std	Z+17, r24	; 0x11
        ret = (bool_t)1;
    324e:	81 e0       	ldi	r24, 0x01	; 1
    3250:	8b 83       	std	Y+3, r24	; 0x03
    3252:	1e c0       	rjmp	.+60     	; 0x3290 <_sem_lock+0xac>
    }
    else
    {
        SPIN_LOCK( proc );
    3254:	89 81       	ldd	r24, Y+1	; 0x01
    3256:	9a 81       	ldd	r25, Y+2	; 0x02
    3258:	83 96       	adiw	r24, 0x23	; 35
    325a:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
        proc->flags |= PROC_FLG_QUEUE;
    325e:	e9 81       	ldd	r30, Y+1	; 0x01
    3260:	fa 81       	ldd	r31, Y+2	; 0x02
    3262:	87 81       	ldd	r24, Z+7	; 0x07
    3264:	90 85       	ldd	r25, Z+8	; 0x08
    3266:	80 61       	ori	r24, 0x10	; 16
    3268:	e9 81       	ldd	r30, Y+1	; 0x01
    326a:	fa 81       	ldd	r31, Y+2	; 0x02
    326c:	90 87       	std	Z+8, r25	; 0x08
    326e:	87 83       	std	Z+7, r24	; 0x07
        _proc_stop( proc );
    3270:	89 81       	ldd	r24, Y+1	; 0x01
    3272:	9a 81       	ldd	r25, Y+2	; 0x02
    3274:	0e 94 23 14 	call	0x2846	; 0x2846 <_proc_stop>
        pitem_insert( (pitem_t *)proc, (xlist_t *)sem );
    3278:	89 81       	ldd	r24, Y+1	; 0x01
    327a:	9a 81       	ldd	r25, Y+2	; 0x02
    327c:	2c 81       	ldd	r18, Y+4	; 0x04
    327e:	3d 81       	ldd	r19, Y+5	; 0x05
    3280:	b9 01       	movw	r22, r18
    3282:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <pitem_insert>
        SPIN_UNLOCK( proc );
    3286:	89 81       	ldd	r24, Y+1	; 0x01
    3288:	9a 81       	ldd	r25, Y+2	; 0x02
    328a:	83 96       	adiw	r24, 0x23	; 35
    328c:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
    }
    SPIN_UNLOCK( sem );
    3290:	8c 81       	ldd	r24, Y+4	; 0x04
    3292:	9d 81       	ldd	r25, Y+5	; 0x05
    3294:	43 96       	adiw	r24, 0x13	; 19
    3296:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
    return ret;
    329a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    329c:	0f 90       	pop	r0
    329e:	0f 90       	pop	r0
    32a0:	0f 90       	pop	r0
    32a2:	0f 90       	pop	r0
    32a4:	0f 90       	pop	r0
    32a6:	cf 91       	pop	r28
    32a8:	df 91       	pop	r29
    32aa:	08 95       	ret

000032ac <_sem_try_lock>:

bool_t _sem_try_lock( sem_t * sem )
{
    32ac:	df 93       	push	r29
    32ae:	cf 93       	push	r28
    32b0:	00 d0       	rcall	.+0      	; 0x32b2 <_sem_try_lock+0x6>
    32b2:	00 d0       	rcall	.+0      	; 0x32b4 <_sem_try_lock+0x8>
    32b4:	0f 92       	push	r0
    32b6:	cd b7       	in	r28, 0x3d	; 61
    32b8:	de b7       	in	r29, 0x3e	; 62
    32ba:	9d 83       	std	Y+5, r25	; 0x05
    32bc:	8c 83       	std	Y+4, r24	; 0x04
    bool_t ret = (bool_t)0;
    32be:	1b 82       	std	Y+3, r1	; 0x03
    SPIN_LOCK( sem );
    32c0:	8c 81       	ldd	r24, Y+4	; 0x04
    32c2:	9d 81       	ldd	r25, Y+5	; 0x05
    32c4:	43 96       	adiw	r24, 0x13	; 19
    32c6:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    if( sem->counter != 0 )
    32ca:	ec 81       	ldd	r30, Y+4	; 0x04
    32cc:	fd 81       	ldd	r31, Y+5	; 0x05
    32ce:	81 89       	ldd	r24, Z+17	; 0x11
    32d0:	92 89       	ldd	r25, Z+18	; 0x12
    32d2:	00 97       	sbiw	r24, 0x00	; 0
    32d4:	11 f1       	breq	.+68     	; 0x331a <_sem_try_lock+0x6e>
    {
        proc_t * proc;
        proc = current_proc();
    32d6:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <current_proc>
    32da:	9a 83       	std	Y+2, r25	; 0x02
    32dc:	89 83       	std	Y+1, r24	; 0x01

        sem->counter--;
    32de:	ec 81       	ldd	r30, Y+4	; 0x04
    32e0:	fd 81       	ldd	r31, Y+5	; 0x05
    32e2:	81 89       	ldd	r24, Z+17	; 0x11
    32e4:	92 89       	ldd	r25, Z+18	; 0x12
    32e6:	01 97       	sbiw	r24, 0x01	; 1
    32e8:	ec 81       	ldd	r30, Y+4	; 0x04
    32ea:	fd 81       	ldd	r31, Y+5	; 0x05
    32ec:	92 8b       	std	Z+18, r25	; 0x12
    32ee:	81 8b       	std	Z+17, r24	; 0x11
        ret = (bool_t)1;
    32f0:	81 e0       	ldi	r24, 0x01	; 1
    32f2:	8b 83       	std	Y+3, r24	; 0x03
        // Выставляем флаг захватат семафора
        SPIN_LOCK( proc );
    32f4:	89 81       	ldd	r24, Y+1	; 0x01
    32f6:	9a 81       	ldd	r25, Y+2	; 0x02
    32f8:	83 96       	adiw	r24, 0x23	; 35
    32fa:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
        proc->flags |= PROC_FLG_SEM;
    32fe:	e9 81       	ldd	r30, Y+1	; 0x01
    3300:	fa 81       	ldd	r31, Y+2	; 0x02
    3302:	87 81       	ldd	r24, Z+7	; 0x07
    3304:	90 85       	ldd	r25, Z+8	; 0x08
    3306:	88 60       	ori	r24, 0x08	; 8
    3308:	e9 81       	ldd	r30, Y+1	; 0x01
    330a:	fa 81       	ldd	r31, Y+2	; 0x02
    330c:	90 87       	std	Z+8, r25	; 0x08
    330e:	87 83       	std	Z+7, r24	; 0x07
        SPIN_UNLOCK( proc );
    3310:	89 81       	ldd	r24, Y+1	; 0x01
    3312:	9a 81       	ldd	r25, Y+2	; 0x02
    3314:	83 96       	adiw	r24, 0x23	; 35
    3316:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
    }
    SPIN_UNLOCK( sem );
    331a:	8c 81       	ldd	r24, Y+4	; 0x04
    331c:	9d 81       	ldd	r25, Y+5	; 0x05
    331e:	43 96       	adiw	r24, 0x13	; 19
    3320:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
    return ret;
    3324:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3326:	0f 90       	pop	r0
    3328:	0f 90       	pop	r0
    332a:	0f 90       	pop	r0
    332c:	0f 90       	pop	r0
    332e:	0f 90       	pop	r0
    3330:	cf 91       	pop	r28
    3332:	df 91       	pop	r29
    3334:	08 95       	ret

00003336 <sem_unlock_isr>:

void sem_unlock_isr( sem_t * sem )
{
    3336:	df 93       	push	r29
    3338:	cf 93       	push	r28
    333a:	00 d0       	rcall	.+0      	; 0x333c <sem_unlock_isr+0x6>
    333c:	00 d0       	rcall	.+0      	; 0x333e <sem_unlock_isr+0x8>
    333e:	cd b7       	in	r28, 0x3d	; 61
    3340:	de b7       	in	r29, 0x3e	; 62
    3342:	9c 83       	std	Y+4, r25	; 0x04
    3344:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc;
    SPIN_LOCK( sem );
    3346:	8b 81       	ldd	r24, Y+3	; 0x03
    3348:	9c 81       	ldd	r25, Y+4	; 0x04
    334a:	43 96       	adiw	r24, 0x13	; 19
    334c:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>

    if( ((xlist_t *)sem)->index == (index_t)0  )
    3350:	eb 81       	ldd	r30, Y+3	; 0x03
    3352:	fc 81       	ldd	r31, Y+4	; 0x04
    3354:	80 89       	ldd	r24, Z+16	; 0x10
    3356:	88 23       	and	r24, r24
    3358:	51 f4       	brne	.+20     	; 0x336e <sem_unlock_isr+0x38>
    {
        sem->counter++;
    335a:	eb 81       	ldd	r30, Y+3	; 0x03
    335c:	fc 81       	ldd	r31, Y+4	; 0x04
    335e:	81 89       	ldd	r24, Z+17	; 0x11
    3360:	92 89       	ldd	r25, Z+18	; 0x12
    3362:	01 96       	adiw	r24, 0x01	; 1
    3364:	eb 81       	ldd	r30, Y+3	; 0x03
    3366:	fc 81       	ldd	r31, Y+4	; 0x04
    3368:	92 8b       	std	Z+18, r25	; 0x12
    336a:	81 8b       	std	Z+17, r24	; 0x11
    336c:	21 c0       	rjmp	.+66     	; 0x33b0 <sem_unlock_isr+0x7a>
        goto end;
    }
    proc = (proc_t *)xlist_head((xlist_t *)sem);
    336e:	8b 81       	ldd	r24, Y+3	; 0x03
    3370:	9c 81       	ldd	r25, Y+4	; 0x04
    3372:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <xlist_head>
    3376:	9a 83       	std	Y+2, r25	; 0x02
    3378:	89 83       	std	Y+1, r24	; 0x01

    SPIN_LOCK( proc );
    337a:	89 81       	ldd	r24, Y+1	; 0x01
    337c:	9a 81       	ldd	r25, Y+2	; 0x02
    337e:	83 96       	adiw	r24, 0x23	; 35
    3380:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>

    pitem_cut( (pitem_t *)proc );
    3384:	89 81       	ldd	r24, Y+1	; 0x01
    3386:	9a 81       	ldd	r25, Y+2	; 0x02
    3388:	0e 94 91 11 	call	0x2322	; 0x2322 <pitem_cut>
    proc->flags &= ~PROC_FLG_QUEUE;
    338c:	e9 81       	ldd	r30, Y+1	; 0x01
    338e:	fa 81       	ldd	r31, Y+2	; 0x02
    3390:	87 81       	ldd	r24, Z+7	; 0x07
    3392:	90 85       	ldd	r25, Z+8	; 0x08
    3394:	8f 7e       	andi	r24, 0xEF	; 239
    3396:	e9 81       	ldd	r30, Y+1	; 0x01
    3398:	fa 81       	ldd	r31, Y+2	; 0x02
    339a:	90 87       	std	Z+8, r25	; 0x08
    339c:	87 83       	std	Z+7, r24	; 0x07
    _proc_run( proc );
    339e:	89 81       	ldd	r24, Y+1	; 0x01
    33a0:	9a 81       	ldd	r25, Y+2	; 0x02
    33a2:	0e 94 16 13 	call	0x262c	; 0x262c <_proc_run>

    SPIN_UNLOCK( proc );
    33a6:	89 81       	ldd	r24, Y+1	; 0x01
    33a8:	9a 81       	ldd	r25, Y+2	; 0x02
    33aa:	83 96       	adiw	r24, 0x23	; 35
    33ac:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
end:
    SPIN_UNLOCK( sem );
    33b0:	8b 81       	ldd	r24, Y+3	; 0x03
    33b2:	9c 81       	ldd	r25, Y+4	; 0x04
    33b4:	43 96       	adiw	r24, 0x13	; 19
    33b6:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
}
    33ba:	0f 90       	pop	r0
    33bc:	0f 90       	pop	r0
    33be:	0f 90       	pop	r0
    33c0:	0f 90       	pop	r0
    33c2:	cf 91       	pop	r28
    33c4:	df 91       	pop	r29
    33c6:	08 95       	ret

000033c8 <sig_init_isr>:
*****************************************************************************************/
#include "../include/bugurt.h"
//========================================================================================
// Инициация
void sig_init_isr( sig_t * sig )
{
    33c8:	df 93       	push	r29
    33ca:	cf 93       	push	r28
    33cc:	00 d0       	rcall	.+0      	; 0x33ce <sig_init_isr+0x6>
    33ce:	0f 92       	push	r0
    33d0:	cd b7       	in	r28, 0x3d	; 61
    33d2:	de b7       	in	r29, 0x3e	; 62
    33d4:	9b 83       	std	Y+3, r25	; 0x03
    33d6:	8a 83       	std	Y+2, r24	; 0x02
#ifdef CONFIG_MP
    core_id_t i;
    SPIN_INIT( sig );
    33d8:	8a 81       	ldd	r24, Y+2	; 0x02
    33da:	9b 81       	ldd	r25, Y+3	; 0x03
    33dc:	84 96       	adiw	r24, 0x24	; 36
    33de:	0e 94 0b 01 	call	0x216	; 0x216 <spin_init>
    SPIN_LOCK( sig );
    33e2:	8a 81       	ldd	r24, Y+2	; 0x02
    33e4:	9b 81       	ldd	r25, Y+3	; 0x03
    33e6:	84 96       	adiw	r24, 0x24	; 36
    33e8:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    for( i = 0; i < (core_id_t)MAX_CORES; i++ )
    33ec:	19 82       	std	Y+1, r1	; 0x01
    33ee:	21 c0       	rjmp	.+66     	; 0x3432 <sig_init_isr+0x6a>
    {
        xlist_init( (xlist_t *)sig->sig_list + i );
    33f0:	4a 81       	ldd	r20, Y+2	; 0x02
    33f2:	5b 81       	ldd	r21, Y+3	; 0x03
    33f4:	89 81       	ldd	r24, Y+1	; 0x01
    33f6:	28 2f       	mov	r18, r24
    33f8:	30 e0       	ldi	r19, 0x00	; 0
    33fa:	c9 01       	movw	r24, r18
    33fc:	82 95       	swap	r24
    33fe:	92 95       	swap	r25
    3400:	90 7f       	andi	r25, 0xF0	; 240
    3402:	98 27       	eor	r25, r24
    3404:	80 7f       	andi	r24, 0xF0	; 240
    3406:	98 27       	eor	r25, r24
    3408:	82 0f       	add	r24, r18
    340a:	93 1f       	adc	r25, r19
    340c:	84 0f       	add	r24, r20
    340e:	95 1f       	adc	r25, r21
    3410:	0e 94 a7 1e 	call	0x3d4e	; 0x3d4e <xlist_init>
        stat_init( (stat_t *)sig->sig_stat + i );
    3414:	8a 81       	ldd	r24, Y+2	; 0x02
    3416:	9b 81       	ldd	r25, Y+3	; 0x03
    3418:	9c 01       	movw	r18, r24
    341a:	2e 5d       	subi	r18, 0xDE	; 222
    341c:	3f 4f       	sbci	r19, 0xFF	; 255
    341e:	89 81       	ldd	r24, Y+1	; 0x01
    3420:	88 2f       	mov	r24, r24
    3422:	90 e0       	ldi	r25, 0x00	; 0
    3424:	82 0f       	add	r24, r18
    3426:	93 1f       	adc	r25, r19
    3428:	0e 94 49 01 	call	0x292	; 0x292 <stat_init>
{
#ifdef CONFIG_MP
    core_id_t i;
    SPIN_INIT( sig );
    SPIN_LOCK( sig );
    for( i = 0; i < (core_id_t)MAX_CORES; i++ )
    342c:	89 81       	ldd	r24, Y+1	; 0x01
    342e:	8f 5f       	subi	r24, 0xFF	; 255
    3430:	89 83       	std	Y+1, r24	; 0x01
    3432:	89 81       	ldd	r24, Y+1	; 0x01
    3434:	82 30       	cpi	r24, 0x02	; 2
    3436:	e0 f2       	brcs	.-72     	; 0x33f0 <sig_init_isr+0x28>
    {
        xlist_init( (xlist_t *)sig->sig_list + i );
        stat_init( (stat_t *)sig->sig_stat + i );
    }
    SPIN_UNLOCK( sig );
    3438:	8a 81       	ldd	r24, Y+2	; 0x02
    343a:	9b 81       	ldd	r25, Y+3	; 0x03
    343c:	84 96       	adiw	r24, 0x24	; 36
    343e:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
#else
    xlist_init( (xlist_t *)sig );
#endif
}
    3442:	0f 90       	pop	r0
    3444:	0f 90       	pop	r0
    3446:	0f 90       	pop	r0
    3448:	cf 91       	pop	r28
    344a:	df 91       	pop	r29
    344c:	08 95       	ret

0000344e <_sig_wait_prologue>:
//========================================================================================
// Это выполнится при постановке процесса в список ожидания сигнала
void _sig_wait_prologue( sig_t * sig )
{
    344e:	df 93       	push	r29
    3450:	cf 93       	push	r28
    3452:	00 d0       	rcall	.+0      	; 0x3454 <_sig_wait_prologue+0x6>
    3454:	00 d0       	rcall	.+0      	; 0x3456 <_sig_wait_prologue+0x8>
    3456:	0f 92       	push	r0
    3458:	cd b7       	in	r28, 0x3d	; 61
    345a:	de b7       	in	r29, 0x3e	; 62
    345c:	9d 83       	std	Y+5, r25	; 0x05
    345e:	8c 83       	std	Y+4, r24	; 0x04
    proc_t * proc;

    SPIN_LOCK( sig );
    3460:	8c 81       	ldd	r24, Y+4	; 0x04
    3462:	9d 81       	ldd	r25, Y+5	; 0x05
    3464:	84 96       	adiw	r24, 0x24	; 36
    3466:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>

    proc = current_proc();
    346a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <current_proc>
    346e:	9b 83       	std	Y+3, r25	; 0x03
    3470:	8a 83       	std	Y+2, r24	; 0x02
    SPIN_LOCK( proc );
    3472:	8a 81       	ldd	r24, Y+2	; 0x02
    3474:	9b 81       	ldd	r25, Y+3	; 0x03
    3476:	83 96       	adiw	r24, 0x23	; 35
    3478:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>

    // Останавливаем процесс
    proc->flags |= PROC_FLG_WAIT;
    347c:	ea 81       	ldd	r30, Y+2	; 0x02
    347e:	fb 81       	ldd	r31, Y+3	; 0x03
    3480:	87 81       	ldd	r24, Z+7	; 0x07
    3482:	90 85       	ldd	r25, Z+8	; 0x08
    3484:	80 62       	ori	r24, 0x20	; 32
    3486:	ea 81       	ldd	r30, Y+2	; 0x02
    3488:	fb 81       	ldd	r31, Y+3	; 0x03
    348a:	90 87       	std	Z+8, r25	; 0x08
    348c:	87 83       	std	Z+7, r24	; 0x07
    _proc_stop_( proc );
    348e:	8a 81       	ldd	r24, Y+2	; 0x02
    3490:	9b 81       	ldd	r25, Y+3	; 0x03
    3492:	0e 94 df 13 	call	0x27be	; 0x27be <_proc_stop_>
    RESCHED_PROC( proc );
    3496:	ea 81       	ldd	r30, Y+2	; 0x02
    3498:	fb 81       	ldd	r31, Y+3	; 0x03
    349a:	81 a1       	ldd	r24, Z+33	; 0x21
    349c:	0e 94 b4 01 	call	0x368	; 0x368 <resched>
        Балансировка нагрузки производится заранее,
        в этом случае получается сделать sig_broadcast  с временем выполнения O(1),
        однако про hotplug  придется забыть, ну и ладно.
        */
        core_id_t sig_core;
        sig_core = sched_load_balancer( proc, (stat_t *)sig->sig_stat );
    34a0:	8c 81       	ldd	r24, Y+4	; 0x04
    34a2:	9d 81       	ldd	r25, Y+5	; 0x05
    34a4:	9c 01       	movw	r18, r24
    34a6:	2e 5d       	subi	r18, 0xDE	; 222
    34a8:	3f 4f       	sbci	r19, 0xFF	; 255
    34aa:	8a 81       	ldd	r24, Y+2	; 0x02
    34ac:	9b 81       	ldd	r25, Y+3	; 0x03
    34ae:	b9 01       	movw	r22, r18
    34b0:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <sched_load_balancer>
    34b4:	89 83       	std	Y+1, r24	; 0x01

        proc->core_id = sig_core;
    34b6:	ea 81       	ldd	r30, Y+2	; 0x02
    34b8:	fb 81       	ldd	r31, Y+3	; 0x03
    34ba:	89 81       	ldd	r24, Y+1	; 0x01
    34bc:	81 a3       	std	Z+33, r24	; 0x21
        pitem_insert((pitem_t *)proc, (xlist_t *)sig + sig_core);
    34be:	6a 81       	ldd	r22, Y+2	; 0x02
    34c0:	7b 81       	ldd	r23, Y+3	; 0x03
    34c2:	4c 81       	ldd	r20, Y+4	; 0x04
    34c4:	5d 81       	ldd	r21, Y+5	; 0x05
    34c6:	89 81       	ldd	r24, Y+1	; 0x01
    34c8:	28 2f       	mov	r18, r24
    34ca:	30 e0       	ldi	r19, 0x00	; 0
    34cc:	c9 01       	movw	r24, r18
    34ce:	82 95       	swap	r24
    34d0:	92 95       	swap	r25
    34d2:	90 7f       	andi	r25, 0xF0	; 240
    34d4:	98 27       	eor	r25, r24
    34d6:	80 7f       	andi	r24, 0xF0	; 240
    34d8:	98 27       	eor	r25, r24
    34da:	82 0f       	add	r24, r18
    34dc:	93 1f       	adc	r25, r19
    34de:	9a 01       	movw	r18, r20
    34e0:	28 0f       	add	r18, r24
    34e2:	39 1f       	adc	r19, r25
    34e4:	cb 01       	movw	r24, r22
    34e6:	b9 01       	movw	r22, r18
    34e8:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <pitem_insert>
        stat_inc( proc, (stat_t *)sig->sig_stat + sig_core );
    34ec:	8c 81       	ldd	r24, Y+4	; 0x04
    34ee:	9d 81       	ldd	r25, Y+5	; 0x05
    34f0:	9c 01       	movw	r18, r24
    34f2:	2e 5d       	subi	r18, 0xDE	; 222
    34f4:	3f 4f       	sbci	r19, 0xFF	; 255
    34f6:	89 81       	ldd	r24, Y+1	; 0x01
    34f8:	88 2f       	mov	r24, r24
    34fa:	90 e0       	ldi	r25, 0x00	; 0
    34fc:	28 0f       	add	r18, r24
    34fe:	39 1f       	adc	r19, r25
    3500:	8a 81       	ldd	r24, Y+2	; 0x02
    3502:	9b 81       	ldd	r25, Y+3	; 0x03
    3504:	b9 01       	movw	r22, r18
    3506:	0e 94 6e 01 	call	0x2dc	; 0x2dc <stat_inc>
    }
#else
    pitem_insert( (pitem_t *)proc, (xlist_t *)sig );
#endif //CONFIG_MP
    SPIN_UNLOCK( proc );
    350a:	8a 81       	ldd	r24, Y+2	; 0x02
    350c:	9b 81       	ldd	r25, Y+3	; 0x03
    350e:	83 96       	adiw	r24, 0x23	; 35
    3510:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
    SPIN_UNLOCK( sig );
    3514:	8c 81       	ldd	r24, Y+4	; 0x04
    3516:	9d 81       	ldd	r25, Y+5	; 0x05
    3518:	84 96       	adiw	r24, 0x24	; 36
    351a:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
}
    351e:	0f 90       	pop	r0
    3520:	0f 90       	pop	r0
    3522:	0f 90       	pop	r0
    3524:	0f 90       	pop	r0
    3526:	0f 90       	pop	r0
    3528:	cf 91       	pop	r28
    352a:	df 91       	pop	r29
    352c:	08 95       	ret

0000352e <_sig_wakeup_list_proc>:
//========================================================================================
//
static void _sig_wakeup_list_proc( proc_t * proc )
{
    352e:	df 93       	push	r29
    3530:	cf 93       	push	r28
    3532:	00 d0       	rcall	.+0      	; 0x3534 <_sig_wakeup_list_proc+0x6>
    3534:	cd b7       	in	r28, 0x3d	; 61
    3536:	de b7       	in	r29, 0x3e	; 62
    3538:	9a 83       	std	Y+2, r25	; 0x02
    353a:	89 83       	std	Y+1, r24	; 0x01
    SPIN_LOCK( proc );
    353c:	89 81       	ldd	r24, Y+1	; 0x01
    353e:	9a 81       	ldd	r25, Y+2	; 0x02
    3540:	83 96       	adiw	r24, 0x23	; 35
    3542:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    proc->buf = ((item_t *)proc)->next;
    3546:	e9 81       	ldd	r30, Y+1	; 0x01
    3548:	fa 81       	ldd	r31, Y+2	; 0x02
    354a:	80 81       	ld	r24, Z
    354c:	91 81       	ldd	r25, Z+1	; 0x01
    354e:	e9 81       	ldd	r30, Y+1	; 0x01
    3550:	fa 81       	ldd	r31, Y+2	; 0x02
    3552:	90 a3       	std	Z+32, r25	; 0x20
    3554:	87 8f       	std	Z+31, r24	; 0x1f
    item_cut( (item_t *)proc );                  // Вырезать процесс из простого списка гораздо проще, чем из xlist
    3556:	89 81       	ldd	r24, Y+1	; 0x01
    3558:	9a 81       	ldd	r25, Y+2	; 0x02
    355a:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <item_cut>
    _proc_run_( proc );
    355e:	89 81       	ldd	r24, Y+1	; 0x01
    3560:	9a 81       	ldd	r25, Y+2	; 0x02
    3562:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <_proc_run_>
    SPIN_UNLOCK( proc );
    3566:	89 81       	ldd	r24, Y+1	; 0x01
    3568:	9a 81       	ldd	r25, Y+2	; 0x02
    356a:	83 96       	adiw	r24, 0x23	; 35
    356c:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
}
    3570:	0f 90       	pop	r0
    3572:	0f 90       	pop	r0
    3574:	cf 91       	pop	r28
    3576:	df 91       	pop	r29
    3578:	08 95       	ret

0000357a <_sig_wait_epilogue>:

void _sig_wait_epilogue( void )
{
    357a:	df 93       	push	r29
    357c:	cf 93       	push	r28
    357e:	00 d0       	rcall	.+0      	; 0x3580 <_sig_wait_epilogue+0x6>
    3580:	00 d0       	rcall	.+0      	; 0x3582 <_sig_wait_epilogue+0x8>
    3582:	cd b7       	in	r28, 0x3d	; 61
    3584:	de b7       	in	r29, 0x3e	; 62
    proc_t * proc;
    proc_t * wakeup_proc;
    proc = current_proc();
    3586:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <current_proc>
    358a:	9c 83       	std	Y+4, r25	; 0x04
    358c:	8b 83       	std	Y+3, r24	; 0x03

    SPIN_LOCK( proc );
    358e:	8b 81       	ldd	r24, Y+3	; 0x03
    3590:	9c 81       	ldd	r25, Y+4	; 0x04
    3592:	83 96       	adiw	r24, 0x23	; 35
    3594:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    wakeup_proc = (proc_t *)proc->buf;
    3598:	eb 81       	ldd	r30, Y+3	; 0x03
    359a:	fc 81       	ldd	r31, Y+4	; 0x04
    359c:	87 8d       	ldd	r24, Z+31	; 0x1f
    359e:	90 a1       	ldd	r25, Z+32	; 0x20
    35a0:	9a 83       	std	Y+2, r25	; 0x02
    35a2:	89 83       	std	Y+1, r24	; 0x01
    proc->buf = (void *)0;
    35a4:	eb 81       	ldd	r30, Y+3	; 0x03
    35a6:	fc 81       	ldd	r31, Y+4	; 0x04
    35a8:	10 a2       	std	Z+32, r1	; 0x20
    35aa:	17 8e       	std	Z+31, r1	; 0x1f
    SPIN_UNLOCK( proc );
    35ac:	8b 81       	ldd	r24, Y+3	; 0x03
    35ae:	9c 81       	ldd	r25, Y+4	; 0x04
    35b0:	83 96       	adiw	r24, 0x23	; 35
    35b2:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
    // Надо разбудить следующий процесс в списке.
    if( wakeup_proc )
    35b6:	89 81       	ldd	r24, Y+1	; 0x01
    35b8:	9a 81       	ldd	r25, Y+2	; 0x02
    35ba:	00 97       	sbiw	r24, 0x00	; 0
    35bc:	59 f0       	breq	.+22     	; 0x35d4 <_sig_wait_epilogue+0x5a>
    {
        // Если есть другие процессы для пробуждения, то "будим" самый приоритетный из них, он продолжит "побудку".
        if( wakeup_proc != proc )
    35be:	29 81       	ldd	r18, Y+1	; 0x01
    35c0:	3a 81       	ldd	r19, Y+2	; 0x02
    35c2:	8b 81       	ldd	r24, Y+3	; 0x03
    35c4:	9c 81       	ldd	r25, Y+4	; 0x04
    35c6:	28 17       	cp	r18, r24
    35c8:	39 07       	cpc	r19, r25
    35ca:	21 f0       	breq	.+8      	; 0x35d4 <_sig_wait_epilogue+0x5a>
        {
            //Нельзя будить себя! Будим только другой процесс!
            _sig_wakeup_list_proc( wakeup_proc );
    35cc:	89 81       	ldd	r24, Y+1	; 0x01
    35ce:	9a 81       	ldd	r25, Y+2	; 0x02
    35d0:	0e 94 97 1a 	call	0x352e	; 0x352e <_sig_wakeup_list_proc>
        }
    }
}
    35d4:	0f 90       	pop	r0
    35d6:	0f 90       	pop	r0
    35d8:	0f 90       	pop	r0
    35da:	0f 90       	pop	r0
    35dc:	cf 91       	pop	r28
    35de:	df 91       	pop	r29
    35e0:	08 95       	ret

000035e2 <sig_signal_isr>:
//========================================================================================
// Будит 1 процесс, для вызова из обработчиков прерываний
void sig_signal_isr( sig_t * sig )
{
    35e2:	df 93       	push	r29
    35e4:	cf 93       	push	r28
    35e6:	cd b7       	in	r28, 0x3d	; 61
    35e8:	de b7       	in	r29, 0x3e	; 62
    35ea:	29 97       	sbiw	r28, 0x09	; 9
    35ec:	0f b6       	in	r0, 0x3f	; 63
    35ee:	f8 94       	cli
    35f0:	de bf       	out	0x3e, r29	; 62
    35f2:	0f be       	out	0x3f, r0	; 63
    35f4:	cd bf       	out	0x3d, r28	; 61
    35f6:	99 87       	std	Y+9, r25	; 0x09
    35f8:	88 87       	std	Y+8, r24	; 0x08
#ifdef CONFIG_MP
    core_id_t core;
    proc_t * proc;
    // Поиск процесса для запуска
    SPIN_LOCK( sig );// Захват блокировки сигнала
    35fa:	88 85       	ldd	r24, Y+8	; 0x08
    35fc:	99 85       	ldd	r25, Y+9	; 0x09
    35fe:	84 96       	adiw	r24, 0x24	; 36
    3600:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    // Находим самую нагруженную  структуру stat_t в сигнале
    core = sched_highest_load_core( (stat_t *)sig->sig_stat );
    3604:	88 85       	ldd	r24, Y+8	; 0x08
    3606:	99 85       	ldd	r25, Y+9	; 0x09
    3608:	82 96       	adiw	r24, 0x22	; 34
    360a:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <sched_highest_load_core>
    360e:	8f 83       	std	Y+7, r24	; 0x07
    // Этот процесс мы будем запускать
    {
        xlist_t * sig_list;
        sig_list = (xlist_t *)sig->sig_list + core;
    3610:	48 85       	ldd	r20, Y+8	; 0x08
    3612:	59 85       	ldd	r21, Y+9	; 0x09
    3614:	8f 81       	ldd	r24, Y+7	; 0x07
    3616:	28 2f       	mov	r18, r24
    3618:	30 e0       	ldi	r19, 0x00	; 0
    361a:	c9 01       	movw	r24, r18
    361c:	82 95       	swap	r24
    361e:	92 95       	swap	r25
    3620:	90 7f       	andi	r25, 0xF0	; 240
    3622:	98 27       	eor	r25, r24
    3624:	80 7f       	andi	r24, 0xF0	; 240
    3626:	98 27       	eor	r25, r24
    3628:	82 0f       	add	r24, r18
    362a:	93 1f       	adc	r25, r19
    362c:	84 0f       	add	r24, r20
    362e:	95 1f       	adc	r25, r21
    3630:	9c 83       	std	Y+4, r25	; 0x04
    3632:	8b 83       	std	Y+3, r24	; 0x03
        if(sig_list->index == (index_t)0)
    3634:	eb 81       	ldd	r30, Y+3	; 0x03
    3636:	fc 81       	ldd	r31, Y+4	; 0x04
    3638:	80 89       	ldd	r24, Z+16	; 0x10
    363a:	88 23       	and	r24, r24
    363c:	31 f4       	brne	.+12     	; 0x364a <sig_signal_isr+0x68>
        {
            SPIN_UNLOCK( sig );
    363e:	88 85       	ldd	r24, Y+8	; 0x08
    3640:	99 85       	ldd	r25, Y+9	; 0x09
    3642:	84 96       	adiw	r24, 0x24	; 36
    3644:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
    3648:	62 c0       	rjmp	.+196    	; 0x370e <sig_signal_isr+0x12c>
            return;
        }
        proc = (proc_t *)xlist_head( sig_list );
    364a:	8b 81       	ldd	r24, Y+3	; 0x03
    364c:	9c 81       	ldd	r25, Y+4	; 0x04
    364e:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <xlist_head>
    3652:	9e 83       	std	Y+6, r25	; 0x06
    3654:	8d 83       	std	Y+5, r24	; 0x05
    }
    SPIN_LOCK( proc );// Захват блокировки процесса
    3656:	8d 81       	ldd	r24, Y+5	; 0x05
    3658:	9e 81       	ldd	r25, Y+6	; 0x06
    365a:	83 96       	adiw	r24, 0x23	; 35
    365c:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    // Вырезаем процесс из списка ожидания сигнала
    pitem_fast_cut( (pitem_t *)proc );
    3660:	8d 81       	ldd	r24, Y+5	; 0x05
    3662:	9e 81       	ldd	r25, Y+6	; 0x06
    3664:	0e 94 32 11 	call	0x2264	; 0x2264 <pitem_fast_cut>
    stat_dec( proc, (stat_t *)sig->sig_stat + core );
    3668:	88 85       	ldd	r24, Y+8	; 0x08
    366a:	99 85       	ldd	r25, Y+9	; 0x09
    366c:	9c 01       	movw	r18, r24
    366e:	2e 5d       	subi	r18, 0xDE	; 222
    3670:	3f 4f       	sbci	r19, 0xFF	; 255
    3672:	8f 81       	ldd	r24, Y+7	; 0x07
    3674:	88 2f       	mov	r24, r24
    3676:	90 e0       	ldi	r25, 0x00	; 0
    3678:	28 0f       	add	r18, r24
    367a:	39 1f       	adc	r19, r25
    367c:	8d 81       	ldd	r24, Y+5	; 0x05
    367e:	9e 81       	ldd	r25, Y+6	; 0x06
    3680:	b9 01       	movw	r22, r18
    3682:	0e 94 58 01 	call	0x2b0	; 0x2b0 <stat_dec>
    //Запуск процесса
    // Вставляем его в список ready соответствующего планировщика
    spin_lock( &kernel.stat_lock );
    3686:	83 e9       	ldi	r24, 0x93	; 147
    3688:	93 e0       	ldi	r25, 0x03	; 3
    368a:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    stat_inc( proc, (stat_t *)kernel.stat + core ); // Обновление статистики
    368e:	8f 81       	ldd	r24, Y+7	; 0x07
    3690:	88 2f       	mov	r24, r24
    3692:	90 e0       	ldi	r25, 0x00	; 0
    3694:	9c 01       	movw	r18, r24
    3696:	2f 56       	subi	r18, 0x6F	; 111
    3698:	3c 4f       	sbci	r19, 0xFC	; 252
    369a:	8d 81       	ldd	r24, Y+5	; 0x05
    369c:	9e 81       	ldd	r25, Y+6	; 0x06
    369e:	b9 01       	movw	r22, r18
    36a0:	0e 94 6e 01 	call	0x2dc	; 0x2dc <stat_inc>
    spin_unlock( &kernel.stat_lock );
    36a4:	83 e9       	ldi	r24, 0x93	; 147
    36a6:	93 e0       	ldi	r25, 0x03	; 3
    36a8:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
    {
        sched_t * sched;
        sched = kernel.sched + core;// Дада, нагрузка была сбалансирована на этапе постановки в список ожидания
    36ac:	8f 81       	ldd	r24, Y+7	; 0x07
    36ae:	28 2f       	mov	r18, r24
    36b0:	30 e0       	ldi	r19, 0x00	; 0
    36b2:	8b e2       	ldi	r24, 0x2B	; 43
    36b4:	90 e0       	ldi	r25, 0x00	; 0
    36b6:	ac 01       	movw	r20, r24
    36b8:	24 9f       	mul	r18, r20
    36ba:	c0 01       	movw	r24, r0
    36bc:	25 9f       	mul	r18, r21
    36be:	90 0d       	add	r25, r0
    36c0:	34 9f       	mul	r19, r20
    36c2:	90 0d       	add	r25, r0
    36c4:	11 24       	eor	r1, r1
    36c6:	85 52       	subi	r24, 0x25	; 37
    36c8:	9d 4f       	sbci	r25, 0xFD	; 253
    36ca:	9a 83       	std	Y+2, r25	; 0x02
    36cc:	89 83       	std	Y+1, r24	; 0x01
        SPIN_LOCK( sched );
    36ce:	89 81       	ldd	r24, Y+1	; 0x01
    36d0:	9a 81       	ldd	r25, Y+2	; 0x02
    36d2:	8a 96       	adiw	r24, 0x2a	; 42
    36d4:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
        pitem_insert((pitem_t *)proc, sched->ready );
    36d8:	8d 81       	ldd	r24, Y+5	; 0x05
    36da:	9e 81       	ldd	r25, Y+6	; 0x06
    36dc:	e9 81       	ldd	r30, Y+1	; 0x01
    36de:	fa 81       	ldd	r31, Y+2	; 0x02
    36e0:	22 81       	ldd	r18, Z+2	; 0x02
    36e2:	33 81       	ldd	r19, Z+3	; 0x03
    36e4:	b9 01       	movw	r22, r18
    36e6:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <pitem_insert>
        SPIN_UNLOCK( sched );
    36ea:	89 81       	ldd	r24, Y+1	; 0x01
    36ec:	9a 81       	ldd	r25, Y+2	; 0x02
    36ee:	8a 96       	adiw	r24, 0x2a	; 42
    36f0:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
    }
    resched(core);// Перепланировка
    36f4:	8f 81       	ldd	r24, Y+7	; 0x07
    36f6:	0e 94 b4 01 	call	0x368	; 0x368 <resched>
    SPIN_UNLOCK( proc );// Освобождение блокировки процесса
    36fa:	8d 81       	ldd	r24, Y+5	; 0x05
    36fc:	9e 81       	ldd	r25, Y+6	; 0x06
    36fe:	83 96       	adiw	r24, 0x23	; 35
    3700:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
    SPIN_UNLOCK( sig );// Освобождение блокировки сигнала
    3704:	88 85       	ldd	r24, Y+8	; 0x08
    3706:	99 85       	ldd	r25, Y+9	; 0x09
    3708:	84 96       	adiw	r24, 0x24	; 36
    370a:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
    proc = (proc_t *)xlist_head( (xlist_t *)sig );
    pitem_fast_cut( (pitem_t *)proc );
    pitem_insert( (pitem_t *)proc, kernel.sched.ready );
    resched();
#endif //CONFIG_MP
}
    370e:	29 96       	adiw	r28, 0x09	; 9
    3710:	0f b6       	in	r0, 0x3f	; 63
    3712:	f8 94       	cli
    3714:	de bf       	out	0x3e, r29	; 62
    3716:	0f be       	out	0x3f, r0	; 63
    3718:	cd bf       	out	0x3d, r28	; 61
    371a:	cf 91       	pop	r28
    371c:	df 91       	pop	r29
    371e:	08 95       	ret

00003720 <sig_broadcast_isr>:
//----------------------------------------------------------------------------------------
// Будит все ожидающие процессы
void sig_broadcast_isr( sig_t * sig )
{
    3720:	df 93       	push	r29
    3722:	cf 93       	push	r28
    3724:	00 d0       	rcall	.+0      	; 0x3726 <sig_broadcast_isr+0x6>
    3726:	00 d0       	rcall	.+0      	; 0x3728 <sig_broadcast_isr+0x8>
    3728:	0f 92       	push	r0
    372a:	cd b7       	in	r28, 0x3d	; 61
    372c:	de b7       	in	r29, 0x3e	; 62
    372e:	9d 83       	std	Y+5, r25	; 0x05
    3730:	8c 83       	std	Y+4, r24	; 0x04
#ifdef CONFIG_MP
    core_id_t core;
    SPIN_LOCK( sig );
    3732:	8c 81       	ldd	r24, Y+4	; 0x04
    3734:	9d 81       	ldd	r25, Y+5	; 0x05
    3736:	84 96       	adiw	r24, 0x24	; 36
    3738:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    for(core = 0; core < (core_id_t)MAX_CORES; core++)
    373c:	1b 82       	std	Y+3, r1	; 0x03
    373e:	3f c0       	rjmp	.+126    	; 0x37be <sig_broadcast_isr+0x9e>
        proc_t * wakeup_proc;
        /*
        Фактически процессы еще не поставлены на выполнение,
        но обязательно будут, это надо учитывать при баланисировке нагрузки.
        */
        spin_lock( &kernel.stat_lock );
    3740:	83 e9       	ldi	r24, 0x93	; 147
    3742:	93 e0       	ldi	r25, 0x03	; 3
    3744:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
        stat_merge( (stat_t *)sig->sig_stat + core, (stat_t *)kernel.stat + core );
    3748:	8c 81       	ldd	r24, Y+4	; 0x04
    374a:	9d 81       	ldd	r25, Y+5	; 0x05
    374c:	9c 01       	movw	r18, r24
    374e:	2e 5d       	subi	r18, 0xDE	; 222
    3750:	3f 4f       	sbci	r19, 0xFF	; 255
    3752:	8b 81       	ldd	r24, Y+3	; 0x03
    3754:	88 2f       	mov	r24, r24
    3756:	90 e0       	ldi	r25, 0x00	; 0
    3758:	a9 01       	movw	r20, r18
    375a:	48 0f       	add	r20, r24
    375c:	59 1f       	adc	r21, r25
    375e:	8b 81       	ldd	r24, Y+3	; 0x03
    3760:	88 2f       	mov	r24, r24
    3762:	90 e0       	ldi	r25, 0x00	; 0
    3764:	9c 01       	movw	r18, r24
    3766:	2f 56       	subi	r18, 0x6F	; 111
    3768:	3c 4f       	sbci	r19, 0xFC	; 252
    376a:	ca 01       	movw	r24, r20
    376c:	b9 01       	movw	r22, r18
    376e:	0e 94 84 01 	call	0x308	; 0x308 <stat_merge>
        spin_unlock( &kernel.stat_lock );
    3772:	83 e9       	ldi	r24, 0x93	; 147
    3774:	93 e0       	ldi	r25, 0x03	; 3
    3776:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
        /*
        Сцепляем список и будим его голову.
        */
        wakeup_proc = (proc_t *)pitem_xlist_chain( (xlist_t *)sig + core );
    377a:	4c 81       	ldd	r20, Y+4	; 0x04
    377c:	5d 81       	ldd	r21, Y+5	; 0x05
    377e:	8b 81       	ldd	r24, Y+3	; 0x03
    3780:	28 2f       	mov	r18, r24
    3782:	30 e0       	ldi	r19, 0x00	; 0
    3784:	c9 01       	movw	r24, r18
    3786:	82 95       	swap	r24
    3788:	92 95       	swap	r25
    378a:	90 7f       	andi	r25, 0xF0	; 240
    378c:	98 27       	eor	r25, r24
    378e:	80 7f       	andi	r24, 0xF0	; 240
    3790:	98 27       	eor	r25, r24
    3792:	82 0f       	add	r24, r18
    3794:	93 1f       	adc	r25, r19
    3796:	84 0f       	add	r24, r20
    3798:	95 1f       	adc	r25, r21
    379a:	0e 94 a5 11 	call	0x234a	; 0x234a <pitem_xlist_chain>
    379e:	9a 83       	std	Y+2, r25	; 0x02
    37a0:	89 83       	std	Y+1, r24	; 0x01
        if( wakeup_proc )
    37a2:	89 81       	ldd	r24, Y+1	; 0x01
    37a4:	9a 81       	ldd	r25, Y+2	; 0x02
    37a6:	00 97       	sbiw	r24, 0x00	; 0
    37a8:	21 f0       	breq	.+8      	; 0x37b2 <sig_broadcast_isr+0x92>
        {
            _sig_wakeup_list_proc( wakeup_proc );
    37aa:	89 81       	ldd	r24, Y+1	; 0x01
    37ac:	9a 81       	ldd	r25, Y+2	; 0x02
    37ae:	0e 94 97 1a 	call	0x352e	; 0x352e <_sig_wakeup_list_proc>
        }

        resched(core);
    37b2:	8b 81       	ldd	r24, Y+3	; 0x03
    37b4:	0e 94 b4 01 	call	0x368	; 0x368 <resched>
void sig_broadcast_isr( sig_t * sig )
{
#ifdef CONFIG_MP
    core_id_t core;
    SPIN_LOCK( sig );
    for(core = 0; core < (core_id_t)MAX_CORES; core++)
    37b8:	8b 81       	ldd	r24, Y+3	; 0x03
    37ba:	8f 5f       	subi	r24, 0xFF	; 255
    37bc:	8b 83       	std	Y+3, r24	; 0x03
    37be:	8b 81       	ldd	r24, Y+3	; 0x03
    37c0:	82 30       	cpi	r24, 0x02	; 2
    37c2:	08 f4       	brcc	.+2      	; 0x37c6 <sig_broadcast_isr+0xa6>
    37c4:	bd cf       	rjmp	.-134    	; 0x3740 <sig_broadcast_isr+0x20>
            _sig_wakeup_list_proc( wakeup_proc );
        }

        resched(core);
    }
    SPIN_UNLOCK( sig );
    37c6:	8c 81       	ldd	r24, Y+4	; 0x04
    37c8:	9d 81       	ldd	r25, Y+5	; 0x05
    37ca:	84 96       	adiw	r24, 0x24	; 36
    37cc:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
        _sig_wakeup_list_proc( wakeup_proc );
    }

    resched();
#endif //CONFIG_MP
}
    37d0:	0f 90       	pop	r0
    37d2:	0f 90       	pop	r0
    37d4:	0f 90       	pop	r0
    37d6:	0f 90       	pop	r0
    37d8:	0f 90       	pop	r0
    37da:	cf 91       	pop	r28
    37dc:	df 91       	pop	r29
    37de:	08 95       	ret

000037e0 <do_syscall>:
syscall_t syscall_num = (syscall_t)0;
void * syscall_arg = (void *)0;

void do_syscall( void )
#endif // CONFIG_MP
{
    37e0:	df 93       	push	r29
    37e2:	cf 93       	push	r28
    37e4:	cd b7       	in	r28, 0x3d	; 61
    37e6:	de b7       	in	r29, 0x3e	; 62
    37e8:	27 97       	sbiw	r28, 0x07	; 7
    37ea:	0f b6       	in	r0, 0x3f	; 63
    37ec:	f8 94       	cli
    37ee:	de bf       	out	0x3e, r29	; 62
    37f0:	0f be       	out	0x3f, r0	; 63
    37f2:	cd bf       	out	0x3d, r28	; 61
    37f4:	8d 83       	std	Y+5, r24	; 0x05
    37f6:	7f 83       	std	Y+7, r23	; 0x07
    37f8:	6e 83       	std	Y+6, r22	; 0x06
    if( syscall_num != (syscall_t)0 )
    37fa:	8d 81       	ldd	r24, Y+5	; 0x05
    37fc:	88 23       	and	r24, r24
    37fe:	e1 f0       	breq	.+56     	; 0x3838 <do_syscall+0x58>
    {
        syscall_num--;
    3800:	8d 81       	ldd	r24, Y+5	; 0x05
    3802:	81 50       	subi	r24, 0x01	; 1
    3804:	8d 83       	std	Y+5, r24	; 0x05
        (SYSCALL_TABLE_READ(syscall_routine[syscall_num]))(syscall_arg);
    3806:	8d 81       	ldd	r24, Y+5	; 0x05
    3808:	88 2f       	mov	r24, r24
    380a:	90 e0       	ldi	r25, 0x00	; 0
    380c:	88 0f       	add	r24, r24
    380e:	99 1f       	adc	r25, r25
    3810:	88 59       	subi	r24, 0x98	; 152
    3812:	9f 4f       	sbci	r25, 0xFF	; 255
    3814:	9c 83       	std	Y+4, r25	; 0x04
    3816:	8b 83       	std	Y+3, r24	; 0x03
    3818:	8b 81       	ldd	r24, Y+3	; 0x03
    381a:	9c 81       	ldd	r25, Y+4	; 0x04
    381c:	fc 01       	movw	r30, r24
    381e:	85 91       	lpm	r24, Z+
    3820:	94 91       	lpm	r25, Z+
    3822:	9a 83       	std	Y+2, r25	; 0x02
    3824:	89 83       	std	Y+1, r24	; 0x01
    3826:	fc 83       	std	Y+4, r31	; 0x04
    3828:	eb 83       	std	Y+3, r30	; 0x03
    382a:	89 81       	ldd	r24, Y+1	; 0x01
    382c:	9a 81       	ldd	r25, Y+2	; 0x02
    382e:	fc 01       	movw	r30, r24
    3830:	8e 81       	ldd	r24, Y+6	; 0x06
    3832:	9f 81       	ldd	r25, Y+7	; 0x07
    3834:	09 95       	icall
        syscall_num = (syscall_t)0;
    3836:	1d 82       	std	Y+5, r1	; 0x05
    }
}
    3838:	27 96       	adiw	r28, 0x07	; 7
    383a:	0f b6       	in	r0, 0x3f	; 63
    383c:	f8 94       	cli
    383e:	de bf       	out	0x3e, r29	; 62
    3840:	0f be       	out	0x3f, r0	; 63
    3842:	cd bf       	out	0x3d, r28	; 61
    3844:	cf 91       	pop	r28
    3846:	df 91       	pop	r29
    3848:	08 95       	ret

0000384a <scall_proc_init>:
***********************************************************************************************
                                    Process control !!!
**********************************************************************************************/
/// SYSCALL_PROC_INIT
void scall_proc_init( void * arg )
{
    384a:	8f 92       	push	r8
    384c:	9f 92       	push	r9
    384e:	af 92       	push	r10
    3850:	bf 92       	push	r11
    3852:	cf 92       	push	r12
    3854:	df 92       	push	r13
    3856:	ef 92       	push	r14
    3858:	ff 92       	push	r15
    385a:	0f 93       	push	r16
    385c:	1f 93       	push	r17
    385e:	df 93       	push	r29
    3860:	cf 93       	push	r28
    3862:	00 d0       	rcall	.+0      	; 0x3864 <scall_proc_init+0x1a>
    3864:	cd b7       	in	r28, 0x3d	; 61
    3866:	de b7       	in	r29, 0x3e	; 62
    3868:	9a 83       	std	Y+2, r25	; 0x02
    386a:	89 83       	std	Y+1, r24	; 0x01
    proc_init_isr(
    386c:	e9 81       	ldd	r30, Y+1	; 0x01
    386e:	fa 81       	ldd	r31, Y+2	; 0x02
    3870:	40 81       	ld	r20, Z
    3872:	51 81       	ldd	r21, Z+1	; 0x01
    3874:	e9 81       	ldd	r30, Y+1	; 0x01
    3876:	fa 81       	ldd	r31, Y+2	; 0x02
    3878:	62 81       	ldd	r22, Z+2	; 0x02
    387a:	73 81       	ldd	r23, Z+3	; 0x03
    387c:	e9 81       	ldd	r30, Y+1	; 0x01
    387e:	fa 81       	ldd	r31, Y+2	; 0x02
    3880:	24 81       	ldd	r18, Z+4	; 0x04
    3882:	35 81       	ldd	r19, Z+5	; 0x05
    3884:	e9 81       	ldd	r30, Y+1	; 0x01
    3886:	fa 81       	ldd	r31, Y+2	; 0x02
    3888:	a6 81       	ldd	r26, Z+6	; 0x06
    388a:	b7 81       	ldd	r27, Z+7	; 0x07
    388c:	e9 81       	ldd	r30, Y+1	; 0x01
    388e:	fa 81       	ldd	r31, Y+2	; 0x02
    3890:	00 85       	ldd	r16, Z+8	; 0x08
    3892:	11 85       	ldd	r17, Z+9	; 0x09
    3894:	e9 81       	ldd	r30, Y+1	; 0x01
    3896:	fa 81       	ldd	r31, Y+2	; 0x02
    3898:	e2 84       	ldd	r14, Z+10	; 0x0a
    389a:	f3 84       	ldd	r15, Z+11	; 0x0b
    389c:	e9 81       	ldd	r30, Y+1	; 0x01
    389e:	fa 81       	ldd	r31, Y+2	; 0x02
    38a0:	d4 84       	ldd	r13, Z+12	; 0x0c
    38a2:	e9 81       	ldd	r30, Y+1	; 0x01
    38a4:	fa 81       	ldd	r31, Y+2	; 0x02
    38a6:	a5 84       	ldd	r10, Z+13	; 0x0d
    38a8:	b6 84       	ldd	r11, Z+14	; 0x0e
    38aa:	e9 81       	ldd	r30, Y+1	; 0x01
    38ac:	fa 81       	ldd	r31, Y+2	; 0x02
    38ae:	97 84       	ldd	r9, Z+15	; 0x0f
    38b0:	e9 81       	ldd	r30, Y+1	; 0x01
    38b2:	fa 81       	ldd	r31, Y+2	; 0x02
    38b4:	80 89       	ldd	r24, Z+16	; 0x10
    38b6:	0f 92       	push	r0
    38b8:	ed b7       	in	r30, 0x3d	; 61
    38ba:	fe b7       	in	r31, 0x3e	; 62
    38bc:	31 96       	adiw	r30, 0x01	; 1
    38be:	80 83       	st	Z, r24
    38c0:	ca 01       	movw	r24, r20
    38c2:	a9 01       	movw	r20, r18
    38c4:	9d 01       	movw	r18, r26
    38c6:	cd 2c       	mov	r12, r13
    38c8:	89 2c       	mov	r8, r9
    38ca:	0e 94 3e 12 	call	0x247c	; 0x247c <proc_init_isr>
    38ce:	0f 90       	pop	r0
              ((proc_init_arg_t *)arg)->is_rt
#ifdef CONFIG_MP
              ,((proc_init_arg_t *)arg)-> affinity
#endif // CONFIG_MP
              );
}
    38d0:	0f 90       	pop	r0
    38d2:	0f 90       	pop	r0
    38d4:	cf 91       	pop	r28
    38d6:	df 91       	pop	r29
    38d8:	1f 91       	pop	r17
    38da:	0f 91       	pop	r16
    38dc:	ff 90       	pop	r15
    38de:	ef 90       	pop	r14
    38e0:	df 90       	pop	r13
    38e2:	cf 90       	pop	r12
    38e4:	bf 90       	pop	r11
    38e6:	af 90       	pop	r10
    38e8:	9f 90       	pop	r9
    38ea:	8f 90       	pop	r8
    38ec:	08 95       	ret

000038ee <scall_proc_run>:
}
/**********************************************************************************************
                                       SYSCALL_PROC_RUN
**********************************************************************************************/
void scall_proc_run( void * arg )
{
    38ee:	0f 93       	push	r16
    38f0:	1f 93       	push	r17
    38f2:	df 93       	push	r29
    38f4:	cf 93       	push	r28
    38f6:	00 d0       	rcall	.+0      	; 0x38f8 <scall_proc_run+0xa>
    38f8:	cd b7       	in	r28, 0x3d	; 61
    38fa:	de b7       	in	r29, 0x3e	; 62
    38fc:	9a 83       	std	Y+2, r25	; 0x02
    38fe:	89 83       	std	Y+1, r24	; 0x01
    ((proc_runtime_arg_t *)arg)->ret = proc_run_isr( ((proc_runtime_arg_t *)arg)->proc );
    3900:	09 81       	ldd	r16, Y+1	; 0x01
    3902:	1a 81       	ldd	r17, Y+2	; 0x02
    3904:	e9 81       	ldd	r30, Y+1	; 0x01
    3906:	fa 81       	ldd	r31, Y+2	; 0x02
    3908:	80 81       	ld	r24, Z
    390a:	91 81       	ldd	r25, Z+1	; 0x01
    390c:	0e 94 53 13 	call	0x26a6	; 0x26a6 <proc_run_isr>
    3910:	f8 01       	movw	r30, r16
    3912:	82 83       	std	Z+2, r24	; 0x02
}
    3914:	0f 90       	pop	r0
    3916:	0f 90       	pop	r0
    3918:	cf 91       	pop	r28
    391a:	df 91       	pop	r29
    391c:	1f 91       	pop	r17
    391e:	0f 91       	pop	r16
    3920:	08 95       	ret

00003922 <scall_proc_restart>:
}
/**********************************************************************************************
                                       SYSCALL_PROC_RESTART
**********************************************************************************************/
void scall_proc_restart( void * arg )
{
    3922:	0f 93       	push	r16
    3924:	1f 93       	push	r17
    3926:	df 93       	push	r29
    3928:	cf 93       	push	r28
    392a:	00 d0       	rcall	.+0      	; 0x392c <scall_proc_restart+0xa>
    392c:	cd b7       	in	r28, 0x3d	; 61
    392e:	de b7       	in	r29, 0x3e	; 62
    3930:	9a 83       	std	Y+2, r25	; 0x02
    3932:	89 83       	std	Y+1, r24	; 0x01
    ((proc_runtime_arg_t *)arg)->ret = proc_restart_isr( ((proc_runtime_arg_t *)arg)->proc );
    3934:	09 81       	ldd	r16, Y+1	; 0x01
    3936:	1a 81       	ldd	r17, Y+2	; 0x02
    3938:	e9 81       	ldd	r30, Y+1	; 0x01
    393a:	fa 81       	ldd	r31, Y+2	; 0x02
    393c:	80 81       	ld	r24, Z
    393e:	91 81       	ldd	r25, Z+1	; 0x01
    3940:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <proc_restart_isr>
    3944:	f8 01       	movw	r30, r16
    3946:	82 83       	std	Z+2, r24	; 0x02
}
    3948:	0f 90       	pop	r0
    394a:	0f 90       	pop	r0
    394c:	cf 91       	pop	r28
    394e:	df 91       	pop	r29
    3950:	1f 91       	pop	r17
    3952:	0f 91       	pop	r16
    3954:	08 95       	ret

00003956 <scall_proc_stop>:
}
/**********************************************************************************************
                                        SYSCALL_PROC_STOP
**********************************************************************************************/
void scall_proc_stop( void * arg )
{
    3956:	0f 93       	push	r16
    3958:	1f 93       	push	r17
    395a:	df 93       	push	r29
    395c:	cf 93       	push	r28
    395e:	00 d0       	rcall	.+0      	; 0x3960 <scall_proc_stop+0xa>
    3960:	cd b7       	in	r28, 0x3d	; 61
    3962:	de b7       	in	r29, 0x3e	; 62
    3964:	9a 83       	std	Y+2, r25	; 0x02
    3966:	89 83       	std	Y+1, r24	; 0x01
    ((proc_runtime_arg_t *)arg)->ret = proc_stop_isr( ((proc_runtime_arg_t *)arg)->proc );
    3968:	09 81       	ldd	r16, Y+1	; 0x01
    396a:	1a 81       	ldd	r17, Y+2	; 0x02
    396c:	e9 81       	ldd	r30, Y+1	; 0x01
    396e:	fa 81       	ldd	r31, Y+2	; 0x02
    3970:	80 81       	ld	r24, Z
    3972:	91 81       	ldd	r25, Z+1	; 0x01
    3974:	0e 94 41 14 	call	0x2882	; 0x2882 <proc_stop_isr>
    3978:	f8 01       	movw	r30, r16
    397a:	82 83       	std	Z+2, r24	; 0x02
}
    397c:	0f 90       	pop	r0
    397e:	0f 90       	pop	r0
    3980:	cf 91       	pop	r28
    3982:	df 91       	pop	r29
    3984:	1f 91       	pop	r17
    3986:	0f 91       	pop	r16
    3988:	08 95       	ret

0000398a <scall_proc_self_stop>:
}
/**********************************************************************************************
                                    SYSCALL_PROC_SELF_STOP
**********************************************************************************************/
void scall_proc_self_stop( void * arg )
{
    398a:	df 93       	push	r29
    398c:	cf 93       	push	r28
    398e:	00 d0       	rcall	.+0      	; 0x3990 <scall_proc_self_stop+0x6>
    3990:	00 d0       	rcall	.+0      	; 0x3992 <scall_proc_self_stop+0x8>
    3992:	cd b7       	in	r28, 0x3d	; 61
    3994:	de b7       	in	r29, 0x3e	; 62
    3996:	9c 83       	std	Y+4, r25	; 0x04
    3998:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = current_proc();
    399a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <current_proc>
    399e:	9a 83       	std	Y+2, r25	; 0x02
    39a0:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
    39a2:	89 81       	ldd	r24, Y+1	; 0x01
    39a4:	9a 81       	ldd	r25, Y+2	; 0x02
    39a6:	83 96       	adiw	r24, 0x23	; 35
    39a8:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
#endif
    _proc_stop( proc );
    39ac:	89 81       	ldd	r24, Y+1	; 0x01
    39ae:	9a 81       	ldd	r25, Y+2	; 0x02
    39b0:	0e 94 23 14 	call	0x2846	; 0x2846 <_proc_stop>
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
    39b4:	89 81       	ldd	r24, Y+1	; 0x01
    39b6:	9a 81       	ldd	r25, Y+2	; 0x02
    39b8:	83 96       	adiw	r24, 0x23	; 35
    39ba:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
#endif
}
    39be:	0f 90       	pop	r0
    39c0:	0f 90       	pop	r0
    39c2:	0f 90       	pop	r0
    39c4:	0f 90       	pop	r0
    39c6:	cf 91       	pop	r28
    39c8:	df 91       	pop	r29
    39ca:	08 95       	ret

000039cc <scall_proc_terminate>:
/**********************************************************************************************
                                    SYSCALL_PROC_TERMINATE
**********************************************************************************************/
// Останов процесса после выхода из pmain, для обертки proc_run_wrapper
void scall_proc_terminate( void * arg )
{
    39cc:	df 93       	push	r29
    39ce:	cf 93       	push	r28
    39d0:	00 d0       	rcall	.+0      	; 0x39d2 <scall_proc_terminate+0x6>
    39d2:	cd b7       	in	r28, 0x3d	; 61
    39d4:	de b7       	in	r29, 0x3e	; 62
    39d6:	9a 83       	std	Y+2, r25	; 0x02
    39d8:	89 83       	std	Y+1, r24	; 0x01
    _proc_terminate((proc_t *)arg);
    39da:	89 81       	ldd	r24, Y+1	; 0x01
    39dc:	9a 81       	ldd	r25, Y+2	; 0x02
    39de:	0e 94 c3 14 	call	0x2986	; 0x2986 <_proc_terminate>
}
    39e2:	0f 90       	pop	r0
    39e4:	0f 90       	pop	r0
    39e6:	cf 91       	pop	r28
    39e8:	df 91       	pop	r29
    39ea:	08 95       	ret

000039ec <proc_run_wrapper>:
void proc_run_wrapper( proc_t * proc )
{
    39ec:	df 93       	push	r29
    39ee:	cf 93       	push	r28
    39f0:	00 d0       	rcall	.+0      	; 0x39f2 <proc_run_wrapper+0x6>
    39f2:	00 d0       	rcall	.+0      	; 0x39f4 <proc_run_wrapper+0x8>
    39f4:	00 d0       	rcall	.+0      	; 0x39f6 <proc_run_wrapper+0xa>
    39f6:	cd b7       	in	r28, 0x3d	; 61
    39f8:	de b7       	in	r29, 0x3e	; 62
    39fa:	9e 83       	std	Y+6, r25	; 0x06
    39fc:	8d 83       	std	Y+5, r24	; 0x05
    code_t pmain;
    void * arg;
    //Атомарно читаем pmain и arg
    disable_interrupts();
    39fe:	0e 94 b5 0a 	call	0x156a	; 0x156a <disable_interrupts>
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
    3a02:	8d 81       	ldd	r24, Y+5	; 0x05
    3a04:	9e 81       	ldd	r25, Y+6	; 0x06
    3a06:	83 96       	adiw	r24, 0x23	; 35
    3a08:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
#endif // CONFIG_MP
    pmain = proc->pmain;
    3a0c:	ed 81       	ldd	r30, Y+5	; 0x05
    3a0e:	fe 81       	ldd	r31, Y+6	; 0x06
    3a10:	84 a1       	ldd	r24, Z+36	; 0x24
    3a12:	95 a1       	ldd	r25, Z+37	; 0x25
    3a14:	9c 83       	std	Y+4, r25	; 0x04
    3a16:	8b 83       	std	Y+3, r24	; 0x03
    arg = proc->arg;
    3a18:	ed 81       	ldd	r30, Y+5	; 0x05
    3a1a:	fe 81       	ldd	r31, Y+6	; 0x06
    3a1c:	82 a5       	ldd	r24, Z+42	; 0x2a
    3a1e:	93 a5       	ldd	r25, Z+43	; 0x2b
    3a20:	9a 83       	std	Y+2, r25	; 0x02
    3a22:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
    3a24:	8d 81       	ldd	r24, Y+5	; 0x05
    3a26:	9e 81       	ldd	r25, Y+6	; 0x06
    3a28:	83 96       	adiw	r24, 0x23	; 35
    3a2a:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
#endif // CONFIG_MP
    enable_interrupts();
    3a2e:	0e 94 cf 0a 	call	0x159e	; 0x159e <enable_interrupts>
    //Выполняем pmain
    pmain( arg );
    3a32:	89 81       	ldd	r24, Y+1	; 0x01
    3a34:	9a 81       	ldd	r25, Y+2	; 0x02
    3a36:	eb 81       	ldd	r30, Y+3	; 0x03
    3a38:	fc 81       	ldd	r31, Y+4	; 0x04
    3a3a:	09 95       	icall
    // Завершаем процесс
    syscall_bugurt( SYSCALL_PROC_TERMINATE, (void *)proc );
    3a3c:	2d 81       	ldd	r18, Y+5	; 0x05
    3a3e:	3e 81       	ldd	r19, Y+6	; 0x06
    3a40:	86 e0       	ldi	r24, 0x06	; 6
    3a42:	b9 01       	movw	r22, r18
    3a44:	0e 94 ff 04 	call	0x9fe	; 0x9fe <syscall_bugurt>
}
    3a48:	26 96       	adiw	r28, 0x06	; 6
    3a4a:	0f b6       	in	r0, 0x3f	; 63
    3a4c:	f8 94       	cli
    3a4e:	de bf       	out	0x3e, r29	; 62
    3a50:	0f be       	out	0x3f, r0	; 63
    3a52:	cd bf       	out	0x3d, r28	; 61
    3a54:	cf 91       	pop	r28
    3a56:	df 91       	pop	r29
    3a58:	08 95       	ret

00003a5a <scall_proc_flag_stop>:
/**********************************************************************************************
                                       SYSCALL_PROC_FLAG_STOP
**********************************************************************************************/
void scall_proc_flag_stop( void * arg )
{
    3a5a:	df 93       	push	r29
    3a5c:	cf 93       	push	r28
    3a5e:	00 d0       	rcall	.+0      	; 0x3a60 <scall_proc_flag_stop+0x6>
    3a60:	cd b7       	in	r28, 0x3d	; 61
    3a62:	de b7       	in	r29, 0x3e	; 62
    3a64:	9a 83       	std	Y+2, r25	; 0x02
    3a66:	89 83       	std	Y+1, r24	; 0x01
    _proc_flag_stop( *((flag_t *)arg) );
    3a68:	e9 81       	ldd	r30, Y+1	; 0x01
    3a6a:	fa 81       	ldd	r31, Y+2	; 0x02
    3a6c:	80 81       	ld	r24, Z
    3a6e:	91 81       	ldd	r25, Z+1	; 0x01
    3a70:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <_proc_flag_stop>
}
    3a74:	0f 90       	pop	r0
    3a76:	0f 90       	pop	r0
    3a78:	cf 91       	pop	r28
    3a7a:	df 91       	pop	r29
    3a7c:	08 95       	ret

00003a7e <scall_proc_reset_watchdog>:
}
/**********************************************************************************************
                                       SYSCALL_PROC_RESET_WATCHDOG
**********************************************************************************************/
void scall_proc_reset_watchdog( void * arg )
{
    3a7e:	df 93       	push	r29
    3a80:	cf 93       	push	r28
    3a82:	00 d0       	rcall	.+0      	; 0x3a84 <scall_proc_reset_watchdog+0x6>
    3a84:	cd b7       	in	r28, 0x3d	; 61
    3a86:	de b7       	in	r29, 0x3e	; 62
    3a88:	9a 83       	std	Y+2, r25	; 0x02
    3a8a:	89 83       	std	Y+1, r24	; 0x01
    _proc_reset_watchdog();
    3a8c:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <_proc_reset_watchdog>
}
    3a90:	0f 90       	pop	r0
    3a92:	0f 90       	pop	r0
    3a94:	cf 91       	pop	r28
    3a96:	df 91       	pop	r29
    3a98:	08 95       	ret

00003a9a <scall_sig_init>:
                                            Сигналы
***********************************************************************************************
                                      SYSCALL_PROC_RESTART
**********************************************************************************************/
void scall_sig_init( void * arg )
{
    3a9a:	df 93       	push	r29
    3a9c:	cf 93       	push	r28
    3a9e:	00 d0       	rcall	.+0      	; 0x3aa0 <scall_sig_init+0x6>
    3aa0:	cd b7       	in	r28, 0x3d	; 61
    3aa2:	de b7       	in	r29, 0x3e	; 62
    3aa4:	9a 83       	std	Y+2, r25	; 0x02
    3aa6:	89 83       	std	Y+1, r24	; 0x01
    sig_init_isr( (sig_t *)arg );
    3aa8:	89 81       	ldd	r24, Y+1	; 0x01
    3aaa:	9a 81       	ldd	r25, Y+2	; 0x02
    3aac:	0e 94 e4 19 	call	0x33c8	; 0x33c8 <sig_init_isr>
}
    3ab0:	0f 90       	pop	r0
    3ab2:	0f 90       	pop	r0
    3ab4:	cf 91       	pop	r28
    3ab6:	df 91       	pop	r29
    3ab8:	08 95       	ret

00003aba <scall_sig_wait>:
}
/**********************************************************************************************
                                       SYSCALL_SIG_WAIT
**********************************************************************************************/
void scall_sig_wait( void * arg )
{
    3aba:	df 93       	push	r29
    3abc:	cf 93       	push	r28
    3abe:	00 d0       	rcall	.+0      	; 0x3ac0 <scall_sig_wait+0x6>
    3ac0:	cd b7       	in	r28, 0x3d	; 61
    3ac2:	de b7       	in	r29, 0x3e	; 62
    3ac4:	9a 83       	std	Y+2, r25	; 0x02
    3ac6:	89 83       	std	Y+1, r24	; 0x01
    _sig_wait_prologue( (sig_t *)arg );
    3ac8:	89 81       	ldd	r24, Y+1	; 0x01
    3aca:	9a 81       	ldd	r25, Y+2	; 0x02
    3acc:	0e 94 27 1a 	call	0x344e	; 0x344e <_sig_wait_prologue>
}
    3ad0:	0f 90       	pop	r0
    3ad2:	0f 90       	pop	r0
    3ad4:	cf 91       	pop	r28
    3ad6:	df 91       	pop	r29
    3ad8:	08 95       	ret

00003ada <scall_sig_wakeup>:
/**********************************************************************************************
                                       SYSCALL_SIG_WAKEUP
**********************************************************************************************/
void scall_sig_wakeup( void *arg )
{
    3ada:	df 93       	push	r29
    3adc:	cf 93       	push	r28
    3ade:	00 d0       	rcall	.+0      	; 0x3ae0 <scall_sig_wakeup+0x6>
    3ae0:	cd b7       	in	r28, 0x3d	; 61
    3ae2:	de b7       	in	r29, 0x3e	; 62
    3ae4:	9a 83       	std	Y+2, r25	; 0x02
    3ae6:	89 83       	std	Y+1, r24	; 0x01
    _sig_wait_epilogue();
    3ae8:	0e 94 bd 1a 	call	0x357a	; 0x357a <_sig_wait_epilogue>
    _proc_flag_stop( PROC_FLG_WAIT );
    3aec:	80 e2       	ldi	r24, 0x20	; 32
    3aee:	90 e0       	ldi	r25, 0x00	; 0
    3af0:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <_proc_flag_stop>
}
    3af4:	0f 90       	pop	r0
    3af6:	0f 90       	pop	r0
    3af8:	cf 91       	pop	r28
    3afa:	df 91       	pop	r29
    3afc:	08 95       	ret

00003afe <scall_sig_signal>:
}
/**********************************************************************************************
                                       SYSCALL_SIG_SIGNAL
**********************************************************************************************/
void scall_sig_signal( void * arg )
{
    3afe:	df 93       	push	r29
    3b00:	cf 93       	push	r28
    3b02:	00 d0       	rcall	.+0      	; 0x3b04 <scall_sig_signal+0x6>
    3b04:	cd b7       	in	r28, 0x3d	; 61
    3b06:	de b7       	in	r29, 0x3e	; 62
    3b08:	9a 83       	std	Y+2, r25	; 0x02
    3b0a:	89 83       	std	Y+1, r24	; 0x01
    sig_signal_isr( (sig_t *)arg );
    3b0c:	89 81       	ldd	r24, Y+1	; 0x01
    3b0e:	9a 81       	ldd	r25, Y+2	; 0x02
    3b10:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <sig_signal_isr>
}
    3b14:	0f 90       	pop	r0
    3b16:	0f 90       	pop	r0
    3b18:	cf 91       	pop	r28
    3b1a:	df 91       	pop	r29
    3b1c:	08 95       	ret

00003b1e <scall_sig_broadcast>:
}
/**********************************************************************************************
                                       SYSCALL_SIG_BROADCAST
**********************************************************************************************/
void scall_sig_broadcast( void * arg )
{
    3b1e:	df 93       	push	r29
    3b20:	cf 93       	push	r28
    3b22:	00 d0       	rcall	.+0      	; 0x3b24 <scall_sig_broadcast+0x6>
    3b24:	cd b7       	in	r28, 0x3d	; 61
    3b26:	de b7       	in	r29, 0x3e	; 62
    3b28:	9a 83       	std	Y+2, r25	; 0x02
    3b2a:	89 83       	std	Y+1, r24	; 0x01
    sig_broadcast_isr( (sig_t *)arg );
    3b2c:	89 81       	ldd	r24, Y+1	; 0x01
    3b2e:	9a 81       	ldd	r25, Y+2	; 0x02
    3b30:	0e 94 90 1b 	call	0x3720	; 0x3720 <sig_broadcast_isr>
}
    3b34:	0f 90       	pop	r0
    3b36:	0f 90       	pop	r0
    3b38:	cf 91       	pop	r28
    3b3a:	df 91       	pop	r29
    3b3c:	08 95       	ret

00003b3e <scall_sem_init>:
                                           Семафоры
***********************************************************************************************
                                       SYSCALL_SEM_INIT
**********************************************************************************************/
void scall_sem_init( void * arg )
{
    3b3e:	df 93       	push	r29
    3b40:	cf 93       	push	r28
    3b42:	00 d0       	rcall	.+0      	; 0x3b44 <scall_sem_init+0x6>
    3b44:	cd b7       	in	r28, 0x3d	; 61
    3b46:	de b7       	in	r29, 0x3e	; 62
    3b48:	9a 83       	std	Y+2, r25	; 0x02
    3b4a:	89 83       	std	Y+1, r24	; 0x01
    sem_init_isr( ((sem_init_arg_t *)arg)->sem, ((sem_init_arg_t *)arg)->count );
    3b4c:	e9 81       	ldd	r30, Y+1	; 0x01
    3b4e:	fa 81       	ldd	r31, Y+2	; 0x02
    3b50:	80 81       	ld	r24, Z
    3b52:	91 81       	ldd	r25, Z+1	; 0x01
    3b54:	e9 81       	ldd	r30, Y+1	; 0x01
    3b56:	fa 81       	ldd	r31, Y+2	; 0x02
    3b58:	22 81       	ldd	r18, Z+2	; 0x02
    3b5a:	33 81       	ldd	r19, Z+3	; 0x03
    3b5c:	b9 01       	movw	r22, r18
    3b5e:	0e 94 c8 18 	call	0x3190	; 0x3190 <sem_init_isr>
}
    3b62:	0f 90       	pop	r0
    3b64:	0f 90       	pop	r0
    3b66:	cf 91       	pop	r28
    3b68:	df 91       	pop	r29
    3b6a:	08 95       	ret

00003b6c <scall_sem_lock>:
}
/**********************************************************************************************
                                         SYSCALL_SEM_LOCK
**********************************************************************************************/
void scall_sem_lock( void * arg )
{
    3b6c:	0f 93       	push	r16
    3b6e:	1f 93       	push	r17
    3b70:	df 93       	push	r29
    3b72:	cf 93       	push	r28
    3b74:	00 d0       	rcall	.+0      	; 0x3b76 <scall_sem_lock+0xa>
    3b76:	cd b7       	in	r28, 0x3d	; 61
    3b78:	de b7       	in	r29, 0x3e	; 62
    3b7a:	9a 83       	std	Y+2, r25	; 0x02
    3b7c:	89 83       	std	Y+1, r24	; 0x01
    ((sem_lock_arg_t *)arg)->ret = _sem_lock( ((sem_lock_arg_t *)arg)->sem );
    3b7e:	09 81       	ldd	r16, Y+1	; 0x01
    3b80:	1a 81       	ldd	r17, Y+2	; 0x02
    3b82:	e9 81       	ldd	r30, Y+1	; 0x01
    3b84:	fa 81       	ldd	r31, Y+2	; 0x02
    3b86:	80 81       	ld	r24, Z
    3b88:	91 81       	ldd	r25, Z+1	; 0x01
    3b8a:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <_sem_lock>
    3b8e:	f8 01       	movw	r30, r16
    3b90:	82 83       	std	Z+2, r24	; 0x02
}
    3b92:	0f 90       	pop	r0
    3b94:	0f 90       	pop	r0
    3b96:	cf 91       	pop	r28
    3b98:	df 91       	pop	r29
    3b9a:	1f 91       	pop	r17
    3b9c:	0f 91       	pop	r16
    3b9e:	08 95       	ret

00003ba0 <scall_sem_try_lock>:
}
/**********************************************************************************************
                                       SYSCALL_SEM_TRY_LOCK
**********************************************************************************************/
void scall_sem_try_lock( void * arg )
{
    3ba0:	0f 93       	push	r16
    3ba2:	1f 93       	push	r17
    3ba4:	df 93       	push	r29
    3ba6:	cf 93       	push	r28
    3ba8:	00 d0       	rcall	.+0      	; 0x3baa <scall_sem_try_lock+0xa>
    3baa:	cd b7       	in	r28, 0x3d	; 61
    3bac:	de b7       	in	r29, 0x3e	; 62
    3bae:	9a 83       	std	Y+2, r25	; 0x02
    3bb0:	89 83       	std	Y+1, r24	; 0x01
    ((sem_lock_arg_t *)arg)->ret = _sem_try_lock( ((sem_lock_arg_t *)arg)->sem );
    3bb2:	09 81       	ldd	r16, Y+1	; 0x01
    3bb4:	1a 81       	ldd	r17, Y+2	; 0x02
    3bb6:	e9 81       	ldd	r30, Y+1	; 0x01
    3bb8:	fa 81       	ldd	r31, Y+2	; 0x02
    3bba:	80 81       	ld	r24, Z
    3bbc:	91 81       	ldd	r25, Z+1	; 0x01
    3bbe:	0e 94 56 19 	call	0x32ac	; 0x32ac <_sem_try_lock>
    3bc2:	f8 01       	movw	r30, r16
    3bc4:	82 83       	std	Z+2, r24	; 0x02
}
    3bc6:	0f 90       	pop	r0
    3bc8:	0f 90       	pop	r0
    3bca:	cf 91       	pop	r28
    3bcc:	df 91       	pop	r29
    3bce:	1f 91       	pop	r17
    3bd0:	0f 91       	pop	r16
    3bd2:	08 95       	ret

00003bd4 <scall_sem_unlock>:
}
/**********************************************************************************************
                                       SYSCALL_SEM_UNLOCK
**********************************************************************************************/
void scall_sem_unlock( void * arg )
{
    3bd4:	df 93       	push	r29
    3bd6:	cf 93       	push	r28
    3bd8:	00 d0       	rcall	.+0      	; 0x3bda <scall_sem_unlock+0x6>
    3bda:	cd b7       	in	r28, 0x3d	; 61
    3bdc:	de b7       	in	r29, 0x3e	; 62
    3bde:	9a 83       	std	Y+2, r25	; 0x02
    3be0:	89 83       	std	Y+1, r24	; 0x01
    sem_unlock_isr( (sem_t *)arg );
    3be2:	89 81       	ldd	r24, Y+1	; 0x01
    3be4:	9a 81       	ldd	r25, Y+2	; 0x02
    3be6:	0e 94 9b 19 	call	0x3336	; 0x3336 <sem_unlock_isr>
}
    3bea:	0f 90       	pop	r0
    3bec:	0f 90       	pop	r0
    3bee:	cf 91       	pop	r28
    3bf0:	df 91       	pop	r29
    3bf2:	08 95       	ret

00003bf4 <scall_mutex_init>:
                                          Мьютексы
***********************************************************************************************
                                     SYSCALL_MUTEX_INIT
**********************************************************************************************/
void scall_mutex_init(void * arg)
{
    3bf4:	df 93       	push	r29
    3bf6:	cf 93       	push	r28
    3bf8:	00 d0       	rcall	.+0      	; 0x3bfa <scall_mutex_init+0x6>
    3bfa:	cd b7       	in	r28, 0x3d	; 61
    3bfc:	de b7       	in	r29, 0x3e	; 62
    3bfe:	9a 83       	std	Y+2, r25	; 0x02
    3c00:	89 83       	std	Y+1, r24	; 0x01
    mutex_init_isr(
    3c02:	e9 81       	ldd	r30, Y+1	; 0x01
    3c04:	fa 81       	ldd	r31, Y+2	; 0x02
    3c06:	80 81       	ld	r24, Z
    3c08:	91 81       	ldd	r25, Z+1	; 0x01
    3c0a:	e9 81       	ldd	r30, Y+1	; 0x01
    3c0c:	fa 81       	ldd	r31, Y+2	; 0x02
    3c0e:	22 81       	ldd	r18, Z+2	; 0x02
    3c10:	62 2f       	mov	r22, r18
    3c12:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <mutex_init_isr>
               ((mutex_init_arg_t *)arg)->mutex
#ifdef CONFIG_USE_HIGHEST_LOCKER
               ,((mutex_init_arg_t *)arg)->prio
#endif // CONFIG_USE_HIGHEST_LOCKER
               );
}
    3c16:	0f 90       	pop	r0
    3c18:	0f 90       	pop	r0
    3c1a:	cf 91       	pop	r28
    3c1c:	df 91       	pop	r29
    3c1e:	08 95       	ret

00003c20 <scall_mutex_lock>:
}
/**********************************************************************************************
                                    SYSCALL_MUTEX_LOCK
**********************************************************************************************/
void scall_mutex_lock(void * arg)
{
    3c20:	0f 93       	push	r16
    3c22:	1f 93       	push	r17
    3c24:	df 93       	push	r29
    3c26:	cf 93       	push	r28
    3c28:	00 d0       	rcall	.+0      	; 0x3c2a <scall_mutex_lock+0xa>
    3c2a:	cd b7       	in	r28, 0x3d	; 61
    3c2c:	de b7       	in	r29, 0x3e	; 62
    3c2e:	9a 83       	std	Y+2, r25	; 0x02
    3c30:	89 83       	std	Y+1, r24	; 0x01
    ((mutex_lock_arg_t *)arg)->ret = _mutex_lock( ((mutex_lock_arg_t *)arg)->mutex );
    3c32:	09 81       	ldd	r16, Y+1	; 0x01
    3c34:	1a 81       	ldd	r17, Y+2	; 0x02
    3c36:	e9 81       	ldd	r30, Y+1	; 0x01
    3c38:	fa 81       	ldd	r31, Y+2	; 0x02
    3c3a:	80 81       	ld	r24, Z
    3c3c:	91 81       	ldd	r25, Z+1	; 0x01
    3c3e:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <_mutex_lock>
    3c42:	f8 01       	movw	r30, r16
    3c44:	82 83       	std	Z+2, r24	; 0x02
}
    3c46:	0f 90       	pop	r0
    3c48:	0f 90       	pop	r0
    3c4a:	cf 91       	pop	r28
    3c4c:	df 91       	pop	r29
    3c4e:	1f 91       	pop	r17
    3c50:	0f 91       	pop	r16
    3c52:	08 95       	ret

00003c54 <scall_mutex_try_lock>:
// Захват
/**********************************************************************************************
                                    SYSCALL_MUTEX_TRY_LOCK
**********************************************************************************************/
void scall_mutex_try_lock(void * arg)
{
    3c54:	0f 93       	push	r16
    3c56:	1f 93       	push	r17
    3c58:	df 93       	push	r29
    3c5a:	cf 93       	push	r28
    3c5c:	00 d0       	rcall	.+0      	; 0x3c5e <scall_mutex_try_lock+0xa>
    3c5e:	cd b7       	in	r28, 0x3d	; 61
    3c60:	de b7       	in	r29, 0x3e	; 62
    3c62:	9a 83       	std	Y+2, r25	; 0x02
    3c64:	89 83       	std	Y+1, r24	; 0x01
    ((mutex_lock_arg_t *)arg)->ret = _mutex_try_lock( ((mutex_lock_arg_t *)arg)->mutex );
    3c66:	09 81       	ldd	r16, Y+1	; 0x01
    3c68:	1a 81       	ldd	r17, Y+2	; 0x02
    3c6a:	e9 81       	ldd	r30, Y+1	; 0x01
    3c6c:	fa 81       	ldd	r31, Y+2	; 0x02
    3c6e:	80 81       	ld	r24, Z
    3c70:	91 81       	ldd	r25, Z+1	; 0x01
    3c72:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <_mutex_try_lock>
    3c76:	f8 01       	movw	r30, r16
    3c78:	82 83       	std	Z+2, r24	; 0x02
}
    3c7a:	0f 90       	pop	r0
    3c7c:	0f 90       	pop	r0
    3c7e:	cf 91       	pop	r28
    3c80:	df 91       	pop	r29
    3c82:	1f 91       	pop	r17
    3c84:	0f 91       	pop	r16
    3c86:	08 95       	ret

00003c88 <scall_mutex_unlock>:
}
/**********************************************************************************************
                                   SYSCALL_MUTEX_UNLOCK
**********************************************************************************************/
void scall_mutex_unlock(void * arg)
{
    3c88:	df 93       	push	r29
    3c8a:	cf 93       	push	r28
    3c8c:	00 d0       	rcall	.+0      	; 0x3c8e <scall_mutex_unlock+0x6>
    3c8e:	cd b7       	in	r28, 0x3d	; 61
    3c90:	de b7       	in	r29, 0x3e	; 62
    3c92:	9a 83       	std	Y+2, r25	; 0x02
    3c94:	89 83       	std	Y+1, r24	; 0x01
    _mutex_unlock( (mutex_t *)arg );
    3c96:	89 81       	ldd	r24, Y+1	; 0x01
    3c98:	9a 81       	ldd	r25, Y+2	; 0x02
    3c9a:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <_mutex_unlock>
}
    3c9e:	0f 90       	pop	r0
    3ca0:	0f 90       	pop	r0
    3ca2:	cf 91       	pop	r28
    3ca4:	df 91       	pop	r29
    3ca6:	08 95       	ret

00003ca8 <scall_ipc_wait>:
                                           IPC
***********************************************************************************************
                                       SYSCALL_IPC_WAIT
**********************************************************************************************/
void scall_ipc_wait(void * arg)
{
    3ca8:	df 93       	push	r29
    3caa:	cf 93       	push	r28
    3cac:	00 d0       	rcall	.+0      	; 0x3cae <scall_ipc_wait+0x6>
    3cae:	cd b7       	in	r28, 0x3d	; 61
    3cb0:	de b7       	in	r29, 0x3e	; 62
    3cb2:	9a 83       	std	Y+2, r25	; 0x02
    3cb4:	89 83       	std	Y+1, r24	; 0x01
    _ipc_wait( arg );
    3cb6:	89 81       	ldd	r24, Y+1	; 0x01
    3cb8:	9a 81       	ldd	r25, Y+2	; 0x02
    3cba:	0e 94 ac 0c 	call	0x1958	; 0x1958 <_ipc_wait>
}
    3cbe:	0f 90       	pop	r0
    3cc0:	0f 90       	pop	r0
    3cc2:	cf 91       	pop	r28
    3cc4:	df 91       	pop	r29
    3cc6:	08 95       	ret

00003cc8 <scall_ipc_send>:
}
/**********************************************************************************************
                                       SYSCALL_IPC_SEND
**********************************************************************************************/
void scall_ipc_send(void * arg)
{
    3cc8:	0f 93       	push	r16
    3cca:	1f 93       	push	r17
    3ccc:	df 93       	push	r29
    3cce:	cf 93       	push	r28
    3cd0:	00 d0       	rcall	.+0      	; 0x3cd2 <scall_ipc_send+0xa>
    3cd2:	cd b7       	in	r28, 0x3d	; 61
    3cd4:	de b7       	in	r29, 0x3e	; 62
    3cd6:	9a 83       	std	Y+2, r25	; 0x02
    3cd8:	89 83       	std	Y+1, r24	; 0x01
    ((ipc_send_arg_t *)arg)->ret = ipc_send_isr( ((ipc_send_arg_t *)arg)->proc, ((ipc_send_arg_t *)arg)->data );
    3cda:	09 81       	ldd	r16, Y+1	; 0x01
    3cdc:	1a 81       	ldd	r17, Y+2	; 0x02
    3cde:	e9 81       	ldd	r30, Y+1	; 0x01
    3ce0:	fa 81       	ldd	r31, Y+2	; 0x02
    3ce2:	80 81       	ld	r24, Z
    3ce4:	91 81       	ldd	r25, Z+1	; 0x01
    3ce6:	e9 81       	ldd	r30, Y+1	; 0x01
    3ce8:	fa 81       	ldd	r31, Y+2	; 0x02
    3cea:	23 81       	ldd	r18, Z+3	; 0x03
    3cec:	34 81       	ldd	r19, Z+4	; 0x04
    3cee:	b9 01       	movw	r22, r18
    3cf0:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <ipc_send_isr>
    3cf4:	f8 01       	movw	r30, r16
    3cf6:	82 83       	std	Z+2, r24	; 0x02
}
    3cf8:	0f 90       	pop	r0
    3cfa:	0f 90       	pop	r0
    3cfc:	cf 91       	pop	r28
    3cfe:	df 91       	pop	r29
    3d00:	1f 91       	pop	r17
    3d02:	0f 91       	pop	r16
    3d04:	08 95       	ret

00003d06 <scall_ipc_exchange>:
}
/**********************************************************************************************
                                    SYSCALL_IPC_EXCHANGE
**********************************************************************************************/
void scall_ipc_exchange(void * arg)
{
    3d06:	0f 93       	push	r16
    3d08:	1f 93       	push	r17
    3d0a:	df 93       	push	r29
    3d0c:	cf 93       	push	r28
    3d0e:	00 d0       	rcall	.+0      	; 0x3d10 <scall_ipc_exchange+0xa>
    3d10:	cd b7       	in	r28, 0x3d	; 61
    3d12:	de b7       	in	r29, 0x3e	; 62
    3d14:	9a 83       	std	Y+2, r25	; 0x02
    3d16:	89 83       	std	Y+1, r24	; 0x01
    ((ipc_send_arg_t *)arg)->ret = _ipc_exchange( ((ipc_send_arg_t *)arg)->proc, ((ipc_send_arg_t *)arg)->data, ((ipc_exchange_arg_t *)arg)->receive );
    3d18:	09 81       	ldd	r16, Y+1	; 0x01
    3d1a:	1a 81       	ldd	r17, Y+2	; 0x02
    3d1c:	e9 81       	ldd	r30, Y+1	; 0x01
    3d1e:	fa 81       	ldd	r31, Y+2	; 0x02
    3d20:	80 81       	ld	r24, Z
    3d22:	91 81       	ldd	r25, Z+1	; 0x01
    3d24:	e9 81       	ldd	r30, Y+1	; 0x01
    3d26:	fa 81       	ldd	r31, Y+2	; 0x02
    3d28:	43 81       	ldd	r20, Z+3	; 0x03
    3d2a:	54 81       	ldd	r21, Z+4	; 0x04
    3d2c:	e9 81       	ldd	r30, Y+1	; 0x01
    3d2e:	fa 81       	ldd	r31, Y+2	; 0x02
    3d30:	25 81       	ldd	r18, Z+5	; 0x05
    3d32:	36 81       	ldd	r19, Z+6	; 0x06
    3d34:	ba 01       	movw	r22, r20
    3d36:	a9 01       	movw	r20, r18
    3d38:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <_ipc_exchange>
    3d3c:	f8 01       	movw	r30, r16
    3d3e:	82 83       	std	Z+2, r24	; 0x02
}
    3d40:	0f 90       	pop	r0
    3d42:	0f 90       	pop	r0
    3d44:	cf 91       	pop	r28
    3d46:	df 91       	pop	r29
    3d48:	1f 91       	pop	r17
    3d4a:	0f 91       	pop	r16
    3d4c:	08 95       	ret

00003d4e <xlist_init>:
**********************************************/
//Инициация
void xlist_init(
    xlist_t * xlist
)
{
    3d4e:	df 93       	push	r29
    3d50:	cf 93       	push	r28
    3d52:	00 d0       	rcall	.+0      	; 0x3d54 <xlist_init+0x6>
    3d54:	00 d0       	rcall	.+0      	; 0x3d56 <xlist_init+0x8>
    3d56:	cd b7       	in	r28, 0x3d	; 61
    3d58:	de b7       	in	r29, 0x3e	; 62
    3d5a:	9c 83       	std	Y+4, r25	; 0x04
    3d5c:	8b 83       	std	Y+3, r24	; 0x03
    count_t i;
    //список пуст
    xlist->index = (index_t)0;
    3d5e:	eb 81       	ldd	r30, Y+3	; 0x03
    3d60:	fc 81       	ldd	r31, Y+4	; 0x04
    3d62:	10 8a       	std	Z+16, r1	; 0x10
    //обнуляем указатели
    for( i = 0; i < BITS_IN_INDEX_T; i++ )xlist->item[i] = (item_t *)0;
    3d64:	1a 82       	std	Y+2, r1	; 0x02
    3d66:	19 82       	std	Y+1, r1	; 0x01
    3d68:	10 c0       	rjmp	.+32     	; 0x3d8a <xlist_init+0x3c>
    3d6a:	89 81       	ldd	r24, Y+1	; 0x01
    3d6c:	9a 81       	ldd	r25, Y+2	; 0x02
    3d6e:	2b 81       	ldd	r18, Y+3	; 0x03
    3d70:	3c 81       	ldd	r19, Y+4	; 0x04
    3d72:	88 0f       	add	r24, r24
    3d74:	99 1f       	adc	r25, r25
    3d76:	f9 01       	movw	r30, r18
    3d78:	e8 0f       	add	r30, r24
    3d7a:	f9 1f       	adc	r31, r25
    3d7c:	11 82       	std	Z+1, r1	; 0x01
    3d7e:	10 82       	st	Z, r1
    3d80:	89 81       	ldd	r24, Y+1	; 0x01
    3d82:	9a 81       	ldd	r25, Y+2	; 0x02
    3d84:	01 96       	adiw	r24, 0x01	; 1
    3d86:	9a 83       	std	Y+2, r25	; 0x02
    3d88:	89 83       	std	Y+1, r24	; 0x01
    3d8a:	89 81       	ldd	r24, Y+1	; 0x01
    3d8c:	9a 81       	ldd	r25, Y+2	; 0x02
    3d8e:	88 30       	cpi	r24, 0x08	; 8
    3d90:	91 05       	cpc	r25, r1
    3d92:	58 f3       	brcs	.-42     	; 0x3d6a <xlist_init+0x1c>
}
    3d94:	0f 90       	pop	r0
    3d96:	0f 90       	pop	r0
    3d98:	0f 90       	pop	r0
    3d9a:	0f 90       	pop	r0
    3d9c:	cf 91       	pop	r28
    3d9e:	df 91       	pop	r29
    3da0:	08 95       	ret

00003da2 <xlist_head>:
//===========================================================================
//Поиск головы списка
item_t * xlist_head(xlist_t * xlist)
{
    3da2:	df 93       	push	r29
    3da4:	cf 93       	push	r28
    3da6:	00 d0       	rcall	.+0      	; 0x3da8 <xlist_head+0x6>
    3da8:	00 d0       	rcall	.+0      	; 0x3daa <xlist_head+0x8>
    3daa:	0f 92       	push	r0
    3dac:	cd b7       	in	r28, 0x3d	; 61
    3dae:	de b7       	in	r29, 0x3e	; 62
    3db0:	9d 83       	std	Y+5, r25	; 0x05
    3db2:	8c 83       	std	Y+4, r24	; 0x04
    item_t * ret_val = (item_t *)0;
    3db4:	1b 82       	std	Y+3, r1	; 0x03
    3db6:	1a 82       	std	Y+2, r1	; 0x02
    index_t index;
    index = xlist->index;
    3db8:	ec 81       	ldd	r30, Y+4	; 0x04
    3dba:	fd 81       	ldd	r31, Y+5	; 0x05
    3dbc:	80 89       	ldd	r24, Z+16	; 0x10
    3dbe:	89 83       	std	Y+1, r24	; 0x01

    if( index != (index_t)0 )
    3dc0:	89 81       	ldd	r24, Y+1	; 0x01
    3dc2:	88 23       	and	r24, r24
    3dc4:	81 f0       	breq	.+32     	; 0x3de6 <xlist_head+0x44>
    {
        ret_val = xlist->item[ index_search( index ) ];
    3dc6:	89 81       	ldd	r24, Y+1	; 0x01
    3dc8:	0e 94 6d 0c 	call	0x18da	; 0x18da <index_search>
    3dcc:	88 2f       	mov	r24, r24
    3dce:	90 e0       	ldi	r25, 0x00	; 0
    3dd0:	2c 81       	ldd	r18, Y+4	; 0x04
    3dd2:	3d 81       	ldd	r19, Y+5	; 0x05
    3dd4:	88 0f       	add	r24, r24
    3dd6:	99 1f       	adc	r25, r25
    3dd8:	f9 01       	movw	r30, r18
    3dda:	e8 0f       	add	r30, r24
    3ddc:	f9 1f       	adc	r31, r25
    3dde:	80 81       	ld	r24, Z
    3de0:	91 81       	ldd	r25, Z+1	; 0x01
    3de2:	9b 83       	std	Y+3, r25	; 0x03
    3de4:	8a 83       	std	Y+2, r24	; 0x02
    }
    return ret_val;
    3de6:	8a 81       	ldd	r24, Y+2	; 0x02
    3de8:	9b 81       	ldd	r25, Y+3	; 0x03
}
    3dea:	0f 90       	pop	r0
    3dec:	0f 90       	pop	r0
    3dee:	0f 90       	pop	r0
    3df0:	0f 90       	pop	r0
    3df2:	0f 90       	pop	r0
    3df4:	cf 91       	pop	r28
    3df6:	df 91       	pop	r29
    3df8:	08 95       	ret

00003dfa <xlist_switch>:

//===========================================================================
// переключение указателя в массиве на следующий элемент, пригодится в планировщике
void xlist_switch(xlist_t * xlist, prio_t prio)
{
    3dfa:	df 93       	push	r29
    3dfc:	cf 93       	push	r28
    3dfe:	00 d0       	rcall	.+0      	; 0x3e00 <xlist_switch+0x6>
    3e00:	00 d0       	rcall	.+0      	; 0x3e02 <xlist_switch+0x8>
    3e02:	0f 92       	push	r0
    3e04:	cd b7       	in	r28, 0x3d	; 61
    3e06:	de b7       	in	r29, 0x3e	; 62
    3e08:	9c 83       	std	Y+4, r25	; 0x04
    3e0a:	8b 83       	std	Y+3, r24	; 0x03
    3e0c:	6d 83       	std	Y+5, r22	; 0x05
    item_t ** current;
    current = xlist->item + prio;
    3e0e:	2b 81       	ldd	r18, Y+3	; 0x03
    3e10:	3c 81       	ldd	r19, Y+4	; 0x04
    3e12:	8d 81       	ldd	r24, Y+5	; 0x05
    3e14:	88 2f       	mov	r24, r24
    3e16:	90 e0       	ldi	r25, 0x00	; 0
    3e18:	88 0f       	add	r24, r24
    3e1a:	99 1f       	adc	r25, r25
    3e1c:	82 0f       	add	r24, r18
    3e1e:	93 1f       	adc	r25, r19
    3e20:	9a 83       	std	Y+2, r25	; 0x02
    3e22:	89 83       	std	Y+1, r24	; 0x01
    *current = (*current)->next;
    3e24:	e9 81       	ldd	r30, Y+1	; 0x01
    3e26:	fa 81       	ldd	r31, Y+2	; 0x02
    3e28:	01 90       	ld	r0, Z+
    3e2a:	f0 81       	ld	r31, Z
    3e2c:	e0 2d       	mov	r30, r0
    3e2e:	80 81       	ld	r24, Z
    3e30:	91 81       	ldd	r25, Z+1	; 0x01
    3e32:	e9 81       	ldd	r30, Y+1	; 0x01
    3e34:	fa 81       	ldd	r31, Y+2	; 0x02
    3e36:	91 83       	std	Z+1, r25	; 0x01
    3e38:	80 83       	st	Z, r24
    //*current = (item_t *)*(item_t **)*(item_t ***)current;
}
    3e3a:	0f 90       	pop	r0
    3e3c:	0f 90       	pop	r0
    3e3e:	0f 90       	pop	r0
    3e40:	0f 90       	pop	r0
    3e42:	0f 90       	pop	r0
    3e44:	cf 91       	pop	r28
    3e46:	df 91       	pop	r29
    3e48:	08 95       	ret

00003e4a <test_visr>:
 */

#include "../../arch/avr/gcc-vsmp/vsmp.h"

void test_visr(void)
{
    3e4a:	df 93       	push	r29
    3e4c:	cf 93       	push	r28
    3e4e:	cd b7       	in	r28, 0x3d	; 61
    3e50:	de b7       	in	r29, 0x3e	; 62
    PORTB^=0x10;
    3e52:	a5 e2       	ldi	r26, 0x25	; 37
    3e54:	b0 e0       	ldi	r27, 0x00	; 0
    3e56:	e5 e2       	ldi	r30, 0x25	; 37
    3e58:	f0 e0       	ldi	r31, 0x00	; 0
    3e5a:	90 81       	ld	r25, Z
    3e5c:	80 e1       	ldi	r24, 0x10	; 16
    3e5e:	89 27       	eor	r24, r25
    3e60:	8c 93       	st	X, r24
}
    3e62:	cf 91       	pop	r28
    3e64:	df 91       	pop	r29
    3e66:	08 95       	ret

00003e68 <test_visr3>:
void test_visr3(void)
{
    3e68:	df 93       	push	r29
    3e6a:	cf 93       	push	r28
    3e6c:	cd b7       	in	r28, 0x3d	; 61
    3e6e:	de b7       	in	r29, 0x3e	; 62
    PORTB^=0x10;
    3e70:	a5 e2       	ldi	r26, 0x25	; 37
    3e72:	b0 e0       	ldi	r27, 0x00	; 0
    3e74:	e5 e2       	ldi	r30, 0x25	; 37
    3e76:	f0 e0       	ldi	r31, 0x00	; 0
    3e78:	90 81       	ld	r25, Z
    3e7a:	80 e1       	ldi	r24, 0x10	; 16
    3e7c:	89 27       	eor	r24, r25
    3e7e:	8c 93       	st	X, r24
}
    3e80:	cf 91       	pop	r28
    3e82:	df 91       	pop	r29
    3e84:	08 95       	ret

00003e86 <test_visr2>:
vinterrupt_t test_vector3 = VINTERRUPT_INIT(test_vector3,test_visr3);
void test_visr2(void)
{
    3e86:	df 93       	push	r29
    3e88:	cf 93       	push	r28
    3e8a:	0f 92       	push	r0
    3e8c:	cd b7       	in	r28, 0x3d	; 61
    3e8e:	de b7       	in	r29, 0x3e	; 62
    core_id_t core;
    core = current_core();
    3e90:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <current_core>
    3e94:	89 83       	std	Y+1, r24	; 0x01
    PORTB^=0x10;
    3e96:	a5 e2       	ldi	r26, 0x25	; 37
    3e98:	b0 e0       	ldi	r27, 0x00	; 0
    3e9a:	e5 e2       	ldi	r30, 0x25	; 37
    3e9c:	f0 e0       	ldi	r31, 0x00	; 0
    3e9e:	90 81       	ld	r25, Z
    3ea0:	80 e1       	ldi	r24, 0x10	; 16
    3ea2:	89 27       	eor	r24, r25
    3ea4:	8c 93       	st	X, r24
    vsmp_vinterrupt_isr( core, &test_vector3 ); // nested interrupt
    3ea6:	20 e0       	ldi	r18, 0x00	; 0
    3ea8:	31 e0       	ldi	r19, 0x01	; 1
    3eaa:	89 81       	ldd	r24, Y+1	; 0x01
    3eac:	b9 01       	movw	r22, r18
    3eae:	0e 94 35 0a 	call	0x146a	; 0x146a <vsmp_vinterrupt_isr>
    enable_interrupts();
    3eb2:	0e 94 cf 0a 	call	0x159e	; 0x159e <enable_interrupts>
}
    3eb6:	0f 90       	pop	r0
    3eb8:	cf 91       	pop	r28
    3eba:	df 91       	pop	r29
    3ebc:	08 95       	ret

00003ebe <main>:

core_id_t i;
unsigned short j;

int main(void)
{
    3ebe:	df 93       	push	r29
    3ec0:	cf 93       	push	r28
    3ec2:	cd b7       	in	r28, 0x3d	; 61
    3ec4:	de b7       	in	r29, 0x3e	; 62
    vsmp_init();
    3ec6:	0e 94 2f 06 	call	0xc5e	; 0xc5e <vsmp_init>

    TCCR2A = 0x02;//
    3eca:	e0 eb       	ldi	r30, 0xB0	; 176
    3ecc:	f0 e0       	ldi	r31, 0x00	; 0
    3ece:	82 e0       	ldi	r24, 0x02	; 2
    3ed0:	80 83       	st	Z, r24
    TCCR2B = 0x05;// prescaler=128
    3ed2:	e1 eb       	ldi	r30, 0xB1	; 177
    3ed4:	f0 e0       	ldi	r31, 0x00	; 0
    3ed6:	85 e0       	ldi	r24, 0x05	; 5
    3ed8:	80 83       	st	Z, r24
    OCR2A  = 124;
    3eda:	e3 eb       	ldi	r30, 0xB3	; 179
    3edc:	f0 e0       	ldi	r31, 0x00	; 0
    3ede:	8c e7       	ldi	r24, 0x7C	; 124
    3ee0:	80 83       	st	Z, r24
    OCR2B  = 0x00;
    3ee2:	e4 eb       	ldi	r30, 0xB4	; 180
    3ee4:	f0 e0       	ldi	r31, 0x00	; 0
    3ee6:	10 82       	st	Z, r1
    TIMSK2 = 0x02;
    3ee8:	e0 e7       	ldi	r30, 0x70	; 112
    3eea:	f0 e0       	ldi	r31, 0x00	; 0
    3eec:	82 e0       	ldi	r24, 0x02	; 2
    3eee:	80 83       	st	Z, r24
    TIFR2  = 0x00;
    3ef0:	e7 e3       	ldi	r30, 0x37	; 55
    3ef2:	f0 e0       	ldi	r31, 0x00	; 0
    3ef4:	10 82       	st	Z, r1

    DDRB = 0x3F;
    3ef6:	e4 e2       	ldi	r30, 0x24	; 36
    3ef8:	f0 e0       	ldi	r31, 0x00	; 0
    3efa:	8f e3       	ldi	r24, 0x3F	; 63
    3efc:	80 83       	st	Z, r24
    PORTB = 0x00;
    3efe:	e5 e2       	ldi	r30, 0x25	; 37
    3f00:	f0 e0       	ldi	r31, 0x00	; 0
    3f02:	10 82       	st	Z, r1
    DDRC = 0x3F;
    3f04:	e7 e2       	ldi	r30, 0x27	; 39
    3f06:	f0 e0       	ldi	r31, 0x00	; 0
    3f08:	8f e3       	ldi	r24, 0x3F	; 63
    3f0a:	80 83       	st	Z, r24
    PORTC = 0x00;
    3f0c:	e8 e2       	ldi	r30, 0x28	; 40
    3f0e:	f0 e0       	ldi	r31, 0x00	; 0
    3f10:	10 82       	st	Z, r1
    DDRD = 0xFE;
    3f12:	ea e2       	ldi	r30, 0x2A	; 42
    3f14:	f0 e0       	ldi	r31, 0x00	; 0
    3f16:	8e ef       	ldi	r24, 0xFE	; 254
    3f18:	80 83       	st	Z, r24
    PORTD = 0x00;
    3f1a:	eb e2       	ldi	r30, 0x2B	; 43
    3f1c:	f0 e0       	ldi	r31, 0x00	; 0
    3f1e:	10 82       	st	Z, r1

    vsmp_run();
    3f20:	0e 94 b6 06 	call	0xd6c	; 0xd6c <vsmp_run>

    for(i=0; i<MAX_CORES; i++)
    3f24:	10 92 9b 03 	sts	0x039B, r1
    3f28:	2a c0       	rjmp	.+84     	; 0x3f7e <main+0xc0>
    {
        cli();
    3f2a:	f8 94       	cli
        vsmp_vinterrupt_isr( i, &test_vector );
    3f2c:	80 91 9b 03 	lds	r24, 0x039B
    3f30:	26 e0       	ldi	r18, 0x06	; 6
    3f32:	31 e0       	ldi	r19, 0x01	; 1
    3f34:	b9 01       	movw	r22, r18
    3f36:	0e 94 35 0a 	call	0x146a	; 0x146a <vsmp_vinterrupt_isr>
        vsmp_vinterrupt( i, &test_vector2 );
    3f3a:	80 91 9b 03 	lds	r24, 0x039B
    3f3e:	2c e0       	ldi	r18, 0x0C	; 12
    3f40:	31 e0       	ldi	r19, 0x01	; 1
    3f42:	b9 01       	movw	r22, r18
    3f44:	0e 94 82 0a 	call	0x1504	; 0x1504 <vsmp_vinterrupt>
        for(j=0;j<1000;j++);
    3f48:	10 92 9a 03 	sts	0x039A, r1
    3f4c:	10 92 99 03 	sts	0x0399, r1
    3f50:	09 c0       	rjmp	.+18     	; 0x3f64 <main+0xa6>
    3f52:	80 91 99 03 	lds	r24, 0x0399
    3f56:	90 91 9a 03 	lds	r25, 0x039A
    3f5a:	01 96       	adiw	r24, 0x01	; 1
    3f5c:	90 93 9a 03 	sts	0x039A, r25
    3f60:	80 93 99 03 	sts	0x0399, r24
    3f64:	80 91 99 03 	lds	r24, 0x0399
    3f68:	90 91 9a 03 	lds	r25, 0x039A
    3f6c:	23 e0       	ldi	r18, 0x03	; 3
    3f6e:	88 3e       	cpi	r24, 0xE8	; 232
    3f70:	92 07       	cpc	r25, r18
    3f72:	78 f3       	brcs	.-34     	; 0x3f52 <main+0x94>
    DDRD = 0xFE;
    PORTD = 0x00;

    vsmp_run();

    for(i=0; i<MAX_CORES; i++)
    3f74:	80 91 9b 03 	lds	r24, 0x039B
    3f78:	8f 5f       	subi	r24, 0xFF	; 255
    3f7a:	80 93 9b 03 	sts	0x039B, r24
    3f7e:	80 91 9b 03 	lds	r24, 0x039B
    3f82:	82 30       	cpi	r24, 0x02	; 2
    3f84:	90 f2       	brcs	.-92     	; 0x3f2a <main+0x6c>
        cli();
        vsmp_vinterrupt_isr( i, &test_vector );
        vsmp_vinterrupt( i, &test_vector2 );
        for(j=0;j<1000;j++);
    }
    for(i=0; i<MAX_CORES; i++)
    3f86:	10 92 9b 03 	sts	0x039B, r1
    3f8a:	2a c0       	rjmp	.+84     	; 0x3fe0 <main+0x122>
    {
        cli();
    3f8c:	f8 94       	cli
        vsmp_vinterrupt_isr( i, &test_vector );
    3f8e:	80 91 9b 03 	lds	r24, 0x039B
    3f92:	26 e0       	ldi	r18, 0x06	; 6
    3f94:	31 e0       	ldi	r19, 0x01	; 1
    3f96:	b9 01       	movw	r22, r18
    3f98:	0e 94 35 0a 	call	0x146a	; 0x146a <vsmp_vinterrupt_isr>
        vsmp_vinterrupt( i, &test_vector2 );
    3f9c:	80 91 9b 03 	lds	r24, 0x039B
    3fa0:	2c e0       	ldi	r18, 0x0C	; 12
    3fa2:	31 e0       	ldi	r19, 0x01	; 1
    3fa4:	b9 01       	movw	r22, r18
    3fa6:	0e 94 82 0a 	call	0x1504	; 0x1504 <vsmp_vinterrupt>
        for(j=0;j<1000;j++);
    3faa:	10 92 9a 03 	sts	0x039A, r1
    3fae:	10 92 99 03 	sts	0x0399, r1
    3fb2:	09 c0       	rjmp	.+18     	; 0x3fc6 <main+0x108>
    3fb4:	80 91 99 03 	lds	r24, 0x0399
    3fb8:	90 91 9a 03 	lds	r25, 0x039A
    3fbc:	01 96       	adiw	r24, 0x01	; 1
    3fbe:	90 93 9a 03 	sts	0x039A, r25
    3fc2:	80 93 99 03 	sts	0x0399, r24
    3fc6:	80 91 99 03 	lds	r24, 0x0399
    3fca:	90 91 9a 03 	lds	r25, 0x039A
    3fce:	23 e0       	ldi	r18, 0x03	; 3
    3fd0:	88 3e       	cpi	r24, 0xE8	; 232
    3fd2:	92 07       	cpc	r25, r18
    3fd4:	78 f3       	brcs	.-34     	; 0x3fb4 <main+0xf6>
        cli();
        vsmp_vinterrupt_isr( i, &test_vector );
        vsmp_vinterrupt( i, &test_vector2 );
        for(j=0;j<1000;j++);
    }
    for(i=0; i<MAX_CORES; i++)
    3fd6:	80 91 9b 03 	lds	r24, 0x039B
    3fda:	8f 5f       	subi	r24, 0xFF	; 255
    3fdc:	80 93 9b 03 	sts	0x039B, r24
    3fe0:	80 91 9b 03 	lds	r24, 0x039B
    3fe4:	82 30       	cpi	r24, 0x02	; 2
    3fe6:	90 f2       	brcs	.-92     	; 0x3f8c <main+0xce>
        vsmp_vinterrupt_isr( i, &test_vector );
        vsmp_vinterrupt( i, &test_vector2 );
        for(j=0;j<1000;j++);
    }

    init_bugurt();
    3fe8:	0e 94 94 05 	call	0xb28	; 0xb28 <init_bugurt>
    start_bugurt();
    3fec:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <start_bugurt>

    return 0;
    3ff0:	80 e0       	ldi	r24, 0x00	; 0
    3ff2:	90 e0       	ldi	r25, 0x00	; 0
}
    3ff4:	cf 91       	pop	r28
    3ff6:	df 91       	pop	r29
    3ff8:	08 95       	ret

00003ffa <_exit>:
    3ffa:	f8 94       	cli

00003ffc <__stop_program>:
    3ffc:	ff cf       	rjmp	.-2      	; 0x3ffc <__stop_program>
