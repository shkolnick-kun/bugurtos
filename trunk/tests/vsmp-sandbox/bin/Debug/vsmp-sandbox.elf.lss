
bin/Debug/vsmp-sandbox.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003d28  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000281  00800100  00800100  00003d9c  2**0
                  ALLOC
  2 .stab         00008c70  00000000  00000000  00003d9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00003fa6  00000000  00000000  0000ca0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
       4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      1c:	0c 94 68 07 	jmp	0xed0	; 0xed0 <__vector_7>
      20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      30:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      48:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      54:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000068 <syscall_routine>:
      68:	56 1b a8 1b c2 1b dc 1b f6 1b 17 1c 5e 1c 70 1c     V...........^.p.
      78:	7e 1c 8e 1c 9e 1c b0 1c c0 1c d0 1c e7 1c 01 1d     ~...............
      88:	1b 1d 2b 1d 41 1d 5b 1d 75 1d 85 1d 95 1d b4 1d     ..+.A.[.u.......

00000098 <__ctors_end>:
      98:	11 24       	eor	r1, r1
      9a:	1f be       	out	0x3f, r1	; 63
      9c:	cf ef       	ldi	r28, 0xFF	; 255
      9e:	d8 e0       	ldi	r29, 0x08	; 8
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
      a4:	11 e0       	ldi	r17, 0x01	; 1
      a6:	a0 e0       	ldi	r26, 0x00	; 0
      a8:	b1 e0       	ldi	r27, 0x01	; 1
      aa:	e8 e2       	ldi	r30, 0x28	; 40
      ac:	fd e3       	ldi	r31, 0x3D	; 61
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <.do_copy_data_start>

000000b0 <.do_copy_data_loop>:
      b0:	05 90       	lpm	r0, Z+
      b2:	0d 92       	st	X+, r0

000000b4 <.do_copy_data_start>:
      b4:	a0 30       	cpi	r26, 0x00	; 0
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <.do_copy_data_loop>

000000ba <__do_clear_bss>:
      ba:	13 e0       	ldi	r17, 0x03	; 3
      bc:	a0 e0       	ldi	r26, 0x00	; 0
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	a1 38       	cpi	r26, 0x81	; 129
      c6:	b1 07       	cpc	r27, r17
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	0e 94 56 1e 	call	0x3cac	; 0x3cac <main>
      ce:	0c 94 92 1e 	jmp	0x3d24	; 0x3d24 <_exit>

000000d2 <__bad_interrupt>:
      d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <bugurt_save_context>:
      d6:	2f 92       	push	r2
      d8:	2f b6       	in	r2, 0x3f	; 63
      da:	2f 92       	push	r2
      dc:	3f 92       	push	r3
      de:	4f 92       	push	r4
      e0:	5f 92       	push	r5
      e2:	6f 92       	push	r6
      e4:	7f 92       	push	r7
      e6:	8f 92       	push	r8
      e8:	9f 92       	push	r9
      ea:	af 92       	push	r10
      ec:	bf 92       	push	r11
      ee:	cf 92       	push	r12
      f0:	df 92       	push	r13
      f2:	ef 92       	push	r14
      f4:	ff 92       	push	r15
      f6:	0f 93       	push	r16
      f8:	1f 93       	push	r17
      fa:	2f 93       	push	r18
      fc:	3f 93       	push	r19
      fe:	4f 93       	push	r20
     100:	5f 93       	push	r21
     102:	6f 93       	push	r22
     104:	7f 93       	push	r23
     106:	8f 93       	push	r24
     108:	9f 93       	push	r25
     10a:	af 93       	push	r26
     10c:	bf 93       	push	r27
     10e:	cf 93       	push	r28
     110:	df 93       	push	r29
     112:	ef 93       	push	r30
     114:	ff 93       	push	r31
     116:	ed b7       	in	r30, 0x3d	; 61
     118:	fe b7       	in	r31, 0x3e	; 62
     11a:	21 a1       	ldd	r18, Z+33	; 0x21
     11c:	30 a1       	ldd	r19, Z+32	; 0x20
     11e:	01 a2       	std	Z+33, r0	; 0x21
     120:	10 a2       	std	Z+32, r1	; 0x20
     122:	11 24       	eor	r1, r1
     124:	8d b7       	in	r24, 0x3d	; 61
     126:	9e b7       	in	r25, 0x3e	; 62
     128:	2f 93       	push	r18
     12a:	3f 93       	push	r19
     12c:	08 95       	ret

0000012e <bugurt_pop_context>:
     12e:	3f 91       	pop	r19
     130:	2f 91       	pop	r18
     132:	04 c0       	rjmp	.+8      	; 0x13c <_bugurt_pop_context>

00000134 <bugurt_restore_context>:
     134:	3f 91       	pop	r19
     136:	2f 91       	pop	r18
     138:	9e bf       	out	0x3e, r25	; 62
     13a:	8d bf       	out	0x3d, r24	; 61

0000013c <_bugurt_pop_context>:
     13c:	fe b7       	in	r31, 0x3e	; 62
     13e:	ed b7       	in	r30, 0x3d	; 61
     140:	10 a0       	ldd	r1, Z+32	; 0x20
     142:	01 a0       	ldd	r0, Z+33	; 0x21
     144:	30 a3       	std	Z+32, r19	; 0x20
     146:	21 a3       	std	Z+33, r18	; 0x21
     148:	ff 91       	pop	r31
     14a:	ef 91       	pop	r30
     14c:	df 91       	pop	r29
     14e:	cf 91       	pop	r28
     150:	bf 91       	pop	r27
     152:	af 91       	pop	r26
     154:	9f 91       	pop	r25
     156:	8f 91       	pop	r24
     158:	7f 91       	pop	r23
     15a:	6f 91       	pop	r22
     15c:	5f 91       	pop	r21
     15e:	4f 91       	pop	r20
     160:	3f 91       	pop	r19
     162:	2f 91       	pop	r18
     164:	1f 91       	pop	r17
     166:	0f 91       	pop	r16
     168:	ff 90       	pop	r15
     16a:	ef 90       	pop	r14
     16c:	df 90       	pop	r13
     16e:	cf 90       	pop	r12
     170:	bf 90       	pop	r11
     172:	af 90       	pop	r10
     174:	9f 90       	pop	r9
     176:	8f 90       	pop	r8
     178:	7f 90       	pop	r7
     17a:	6f 90       	pop	r6
     17c:	5f 90       	pop	r5
     17e:	4f 90       	pop	r4
     180:	3f 90       	pop	r3
     182:	2f 90       	pop	r2
     184:	2f be       	out	0x3f, r2	; 63
     186:	2f 90       	pop	r2
     188:	08 95       	ret

0000018a <bugurt_set_stack_pointer>:
     18a:	1f 90       	pop	r1
     18c:	0f 90       	pop	r0
     18e:	9e bf       	out	0x3e, r25	; 62
     190:	8d bf       	out	0x3d, r24	; 61
     192:	0f 92       	push	r0
     194:	1f 92       	push	r1
     196:	11 24       	eor	r1, r1
     198:	08 95       	ret

0000019a <bugurt_push_pointer>:
     19a:	1f 90       	pop	r1
     19c:	0f 90       	pop	r0
     19e:	8f 93       	push	r24
     1a0:	9f 93       	push	r25
     1a2:	0f 92       	push	r0
     1a4:	1f 92       	push	r1
     1a6:	11 24       	eor	r1, r1
     1a8:	08 95       	ret

000001aa <bugurt_reverse_byte_order>:
     1aa:	08 2e       	mov	r0, r24
     1ac:	89 2f       	mov	r24, r25
     1ae:	90 2d       	mov	r25, r0
     1b0:	08 95       	ret

000001b2 <current_proc>:
    vm_state[current_vm].sp = kernel.sched[current_vm].current_proc->spointer;
    __asm__ __volatile__("reti"::);
}
///!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
proc_t * current_proc(void)
{
     1b2:	df 93       	push	r29
     1b4:	cf 93       	push	r28
     1b6:	00 d0       	rcall	.+0      	; 0x1b8 <current_proc+0x6>
     1b8:	cd b7       	in	r28, 0x3d	; 61
     1ba:	de b7       	in	r29, 0x3e	; 62
    proc_t * ret;
    cli();
     1bc:	f8 94       	cli
    ret = kernel.sched[current_vm].current_proc;
     1be:	80 91 0e 01 	lds	r24, 0x010E
     1c2:	28 2f       	mov	r18, r24
     1c4:	30 e0       	ldi	r19, 0x00	; 0
     1c6:	8b e2       	ldi	r24, 0x2B	; 43
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	ac 01       	movw	r20, r24
     1cc:	24 9f       	mul	r18, r20
     1ce:	c0 01       	movw	r24, r0
     1d0:	25 9f       	mul	r18, r21
     1d2:	90 0d       	add	r25, r0
     1d4:	34 9f       	mul	r19, r20
     1d6:	90 0d       	add	r25, r0
     1d8:	11 24       	eor	r1, r1
     1da:	fc 01       	movw	r30, r24
     1dc:	ed 53       	subi	r30, 0x3D	; 61
     1de:	fd 4f       	sbci	r31, 0xFD	; 253
     1e0:	80 81       	ld	r24, Z
     1e2:	91 81       	ldd	r25, Z+1	; 0x01
     1e4:	9a 83       	std	Y+2, r25	; 0x02
     1e6:	89 83       	std	Y+1, r24	; 0x01
    sei();
     1e8:	78 94       	sei
    return ret;
     1ea:	89 81       	ldd	r24, Y+1	; 0x01
     1ec:	9a 81       	ldd	r25, Y+2	; 0x02
}
     1ee:	0f 90       	pop	r0
     1f0:	0f 90       	pop	r0
     1f2:	cf 91       	pop	r28
     1f4:	df 91       	pop	r29
     1f6:	08 95       	ret

000001f8 <current_core>:

core_id_t current_core(void)
{
     1f8:	df 93       	push	r29
     1fa:	cf 93       	push	r28
     1fc:	0f 92       	push	r0
     1fe:	cd b7       	in	r28, 0x3d	; 61
     200:	de b7       	in	r29, 0x3e	; 62
    core_id_t ret;
    cli();
     202:	f8 94       	cli
    ret = current_vm;
     204:	80 91 0e 01 	lds	r24, 0x010E
     208:	89 83       	std	Y+1, r24	; 0x01
    sei();
     20a:	78 94       	sei
    return ret;
     20c:	89 81       	ldd	r24, Y+1	; 0x01
}
     20e:	0f 90       	pop	r0
     210:	cf 91       	pop	r28
     212:	df 91       	pop	r29
     214:	08 95       	ret

00000216 <spin_init>:

void spin_init( lock_t * lock )
{
     216:	df 93       	push	r29
     218:	cf 93       	push	r28
     21a:	00 d0       	rcall	.+0      	; 0x21c <spin_init+0x6>
     21c:	cd b7       	in	r28, 0x3d	; 61
     21e:	de b7       	in	r29, 0x3e	; 62
     220:	9a 83       	std	Y+2, r25	; 0x02
     222:	89 83       	std	Y+1, r24	; 0x01
    cli();
     224:	f8 94       	cli
    *lock = (lock_t)0;
     226:	e9 81       	ldd	r30, Y+1	; 0x01
     228:	fa 81       	ldd	r31, Y+2	; 0x02
     22a:	10 82       	st	Z, r1
    sei();
     22c:	78 94       	sei
}
     22e:	0f 90       	pop	r0
     230:	0f 90       	pop	r0
     232:	cf 91       	pop	r28
     234:	df 91       	pop	r29
     236:	08 95       	ret

00000238 <spin_lock>:

void spin_lock( lock_t * lock )
{
     238:	df 93       	push	r29
     23a:	cf 93       	push	r28
     23c:	00 d0       	rcall	.+0      	; 0x23e <spin_lock+0x6>
     23e:	cd b7       	in	r28, 0x3d	; 61
     240:	de b7       	in	r29, 0x3e	; 62
     242:	9a 83       	std	Y+2, r25	; 0x02
     244:	89 83       	std	Y+1, r24	; 0x01
    while(1)
    {
        cli();
     246:	f8 94       	cli
        if(!*lock)
     248:	e9 81       	ldd	r30, Y+1	; 0x01
     24a:	fa 81       	ldd	r31, Y+2	; 0x02
     24c:	80 81       	ld	r24, Z
     24e:	88 23       	and	r24, r24
     250:	51 f4       	brne	.+20     	; 0x266 <spin_lock+0x2e>
        {
            *lock = (lock_t)1;
     252:	e9 81       	ldd	r30, Y+1	; 0x01
     254:	fa 81       	ldd	r31, Y+2	; 0x02
     256:	81 e0       	ldi	r24, 0x01	; 1
     258:	80 83       	st	Z, r24
            sei();
     25a:	78 94       	sei
            return;
        }
        sei();
    }
}
     25c:	0f 90       	pop	r0
     25e:	0f 90       	pop	r0
     260:	cf 91       	pop	r28
     262:	df 91       	pop	r29
     264:	08 95       	ret
        {
            *lock = (lock_t)1;
            sei();
            return;
        }
        sei();
     266:	78 94       	sei
     268:	ee cf       	rjmp	.-36     	; 0x246 <spin_lock+0xe>

0000026a <spin_unlock>:
    }
}
void spin_unlock(lock_t * lock)
{
     26a:	df 93       	push	r29
     26c:	cf 93       	push	r28
     26e:	00 d0       	rcall	.+0      	; 0x270 <spin_unlock+0x6>
     270:	00 d0       	rcall	.+0      	; 0x272 <spin_unlock+0x8>
     272:	cd b7       	in	r28, 0x3d	; 61
     274:	de b7       	in	r29, 0x3e	; 62
     276:	9c 83       	std	Y+4, r25	; 0x04
     278:	8b 83       	std	Y+3, r24	; 0x03
    unsigned short i;
    //for(i = 0; i< 1000; i++);// delay, all other vms must spin for a while
    cli();
     27a:	f8 94       	cli
    *lock = (lock_t)0;
     27c:	eb 81       	ldd	r30, Y+3	; 0x03
     27e:	fc 81       	ldd	r31, Y+4	; 0x04
     280:	10 82       	st	Z, r1
    sei();
     282:	78 94       	sei
}
     284:	0f 90       	pop	r0
     286:	0f 90       	pop	r0
     288:	0f 90       	pop	r0
     28a:	0f 90       	pop	r0
     28c:	cf 91       	pop	r28
     28e:	df 91       	pop	r29
     290:	08 95       	ret

00000292 <stat_init>:
// stat_t is simply prcess counter here!
void stat_init( stat_t * stat )
{
     292:	df 93       	push	r29
     294:	cf 93       	push	r28
     296:	00 d0       	rcall	.+0      	; 0x298 <stat_init+0x6>
     298:	cd b7       	in	r28, 0x3d	; 61
     29a:	de b7       	in	r29, 0x3e	; 62
     29c:	9a 83       	std	Y+2, r25	; 0x02
     29e:	89 83       	std	Y+1, r24	; 0x01
    *stat = 0; // no lad on a system
     2a0:	e9 81       	ldd	r30, Y+1	; 0x01
     2a2:	fa 81       	ldd	r31, Y+2	; 0x02
     2a4:	10 82       	st	Z, r1
}
     2a6:	0f 90       	pop	r0
     2a8:	0f 90       	pop	r0
     2aa:	cf 91       	pop	r28
     2ac:	df 91       	pop	r29
     2ae:	08 95       	ret

000002b0 <stat_dec>:
void stat_dec( proc_t * proc, stat_t * stat )
{
     2b0:	df 93       	push	r29
     2b2:	cf 93       	push	r28
     2b4:	00 d0       	rcall	.+0      	; 0x2b6 <stat_dec+0x6>
     2b6:	00 d0       	rcall	.+0      	; 0x2b8 <stat_dec+0x8>
     2b8:	cd b7       	in	r28, 0x3d	; 61
     2ba:	de b7       	in	r29, 0x3e	; 62
     2bc:	9a 83       	std	Y+2, r25	; 0x02
     2be:	89 83       	std	Y+1, r24	; 0x01
     2c0:	7c 83       	std	Y+4, r23	; 0x04
     2c2:	6b 83       	std	Y+3, r22	; 0x03
    *stat--;
     2c4:	8b 81       	ldd	r24, Y+3	; 0x03
     2c6:	9c 81       	ldd	r25, Y+4	; 0x04
     2c8:	01 97       	sbiw	r24, 0x01	; 1
     2ca:	9c 83       	std	Y+4, r25	; 0x04
     2cc:	8b 83       	std	Y+3, r24	; 0x03
}
     2ce:	0f 90       	pop	r0
     2d0:	0f 90       	pop	r0
     2d2:	0f 90       	pop	r0
     2d4:	0f 90       	pop	r0
     2d6:	cf 91       	pop	r28
     2d8:	df 91       	pop	r29
     2da:	08 95       	ret

000002dc <stat_inc>:
void stat_inc( proc_t * proc, stat_t * stat )
{
     2dc:	df 93       	push	r29
     2de:	cf 93       	push	r28
     2e0:	00 d0       	rcall	.+0      	; 0x2e2 <stat_inc+0x6>
     2e2:	00 d0       	rcall	.+0      	; 0x2e4 <stat_inc+0x8>
     2e4:	cd b7       	in	r28, 0x3d	; 61
     2e6:	de b7       	in	r29, 0x3e	; 62
     2e8:	9a 83       	std	Y+2, r25	; 0x02
     2ea:	89 83       	std	Y+1, r24	; 0x01
     2ec:	7c 83       	std	Y+4, r23	; 0x04
     2ee:	6b 83       	std	Y+3, r22	; 0x03
    *stat++;
     2f0:	8b 81       	ldd	r24, Y+3	; 0x03
     2f2:	9c 81       	ldd	r25, Y+4	; 0x04
     2f4:	01 96       	adiw	r24, 0x01	; 1
     2f6:	9c 83       	std	Y+4, r25	; 0x04
     2f8:	8b 83       	std	Y+3, r24	; 0x03
}
     2fa:	0f 90       	pop	r0
     2fc:	0f 90       	pop	r0
     2fe:	0f 90       	pop	r0
     300:	0f 90       	pop	r0
     302:	cf 91       	pop	r28
     304:	df 91       	pop	r29
     306:	08 95       	ret

00000308 <stat_merge>:
void stat_merge( stat_t *src_stat, stat_t * dst_stat  )
{
     308:	df 93       	push	r29
     30a:	cf 93       	push	r28
     30c:	00 d0       	rcall	.+0      	; 0x30e <stat_merge+0x6>
     30e:	00 d0       	rcall	.+0      	; 0x310 <stat_merge+0x8>
     310:	cd b7       	in	r28, 0x3d	; 61
     312:	de b7       	in	r29, 0x3e	; 62
     314:	9a 83       	std	Y+2, r25	; 0x02
     316:	89 83       	std	Y+1, r24	; 0x01
     318:	7c 83       	std	Y+4, r23	; 0x04
     31a:	6b 83       	std	Y+3, r22	; 0x03
    *dst_stat += *src_stat;
     31c:	eb 81       	ldd	r30, Y+3	; 0x03
     31e:	fc 81       	ldd	r31, Y+4	; 0x04
     320:	90 81       	ld	r25, Z
     322:	e9 81       	ldd	r30, Y+1	; 0x01
     324:	fa 81       	ldd	r31, Y+2	; 0x02
     326:	80 81       	ld	r24, Z
     328:	89 0f       	add	r24, r25
     32a:	eb 81       	ldd	r30, Y+3	; 0x03
     32c:	fc 81       	ldd	r31, Y+4	; 0x04
     32e:	80 83       	st	Z, r24
    *src_stat = (stat_t)0;
     330:	e9 81       	ldd	r30, Y+1	; 0x01
     332:	fa 81       	ldd	r31, Y+2	; 0x02
     334:	10 82       	st	Z, r1
}
     336:	0f 90       	pop	r0
     338:	0f 90       	pop	r0
     33a:	0f 90       	pop	r0
     33c:	0f 90       	pop	r0
     33e:	cf 91       	pop	r28
     340:	df 91       	pop	r29
     342:	08 95       	ret

00000344 <stat_calc_load>:
load_t stat_calc_load(prio_t prio, stat_t * stat)
{
     344:	df 93       	push	r29
     346:	cf 93       	push	r28
     348:	00 d0       	rcall	.+0      	; 0x34a <stat_calc_load+0x6>
     34a:	0f 92       	push	r0
     34c:	cd b7       	in	r28, 0x3d	; 61
     34e:	de b7       	in	r29, 0x3e	; 62
     350:	89 83       	std	Y+1, r24	; 0x01
     352:	7b 83       	std	Y+3, r23	; 0x03
     354:	6a 83       	std	Y+2, r22	; 0x02
    return (load_t)*stat;
     356:	ea 81       	ldd	r30, Y+2	; 0x02
     358:	fb 81       	ldd	r31, Y+3	; 0x03
     35a:	80 81       	ld	r24, Z
}
     35c:	0f 90       	pop	r0
     35e:	0f 90       	pop	r0
     360:	0f 90       	pop	r0
     362:	cf 91       	pop	r28
     364:	df 91       	pop	r29
     366:	08 95       	ret

00000368 <resched>:
void resched(core_id_t core_id)
{
     368:	df 93       	push	r29
     36a:	cf 93       	push	r28
     36c:	0f 92       	push	r0
     36e:	cd b7       	in	r28, 0x3d	; 61
     370:	de b7       	in	r29, 0x3e	; 62
     372:	89 83       	std	Y+1, r24	; 0x01
    vsmp_vinterrupt_isr( core_id, ( vinterrupt_t * )resched_vectors + core_id );
     374:	89 81       	ldd	r24, Y+1	; 0x01
     376:	28 2f       	mov	r18, r24
     378:	30 e0       	ldi	r19, 0x00	; 0
     37a:	c9 01       	movw	r24, r18
     37c:	88 0f       	add	r24, r24
     37e:	99 1f       	adc	r25, r25
     380:	82 0f       	add	r24, r18
     382:	93 1f       	adc	r25, r19
     384:	88 0f       	add	r24, r24
     386:	99 1f       	adc	r25, r25
     388:	9c 01       	movw	r18, r24
     38a:	29 5d       	subi	r18, 0xD9	; 217
     38c:	3e 4f       	sbci	r19, 0xFE	; 254
     38e:	89 81       	ldd	r24, Y+1	; 0x01
     390:	b9 01       	movw	r22, r18
     392:	0e 94 7e 09 	call	0x12fc	; 0x12fc <vsmp_vinterrupt_isr>
}
     396:	0f 90       	pop	r0
     398:	cf 91       	pop	r28
     39a:	df 91       	pop	r29
     39c:	08 95       	ret

0000039e <resched_isr>:
#include "bugurt_kernel.h"

///!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
__MACRO_FUNCTION__(_bugurt_isr_prologue)
{
    cli();
     39e:	f8 94       	cli
    kernel.sched[current_vm].current_proc->spointer = vm_state[current_vm].sp;
     3a0:	80 91 0e 01 	lds	r24, 0x010E
     3a4:	28 2f       	mov	r18, r24
     3a6:	30 e0       	ldi	r19, 0x00	; 0
     3a8:	8b e2       	ldi	r24, 0x2B	; 43
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	ac 01       	movw	r20, r24
     3ae:	24 9f       	mul	r18, r20
     3b0:	c0 01       	movw	r24, r0
     3b2:	25 9f       	mul	r18, r21
     3b4:	90 0d       	add	r25, r0
     3b6:	34 9f       	mul	r19, r20
     3b8:	90 0d       	add	r25, r0
     3ba:	11 24       	eor	r1, r1
     3bc:	fc 01       	movw	r30, r24
     3be:	ed 53       	subi	r30, 0x3D	; 61
     3c0:	fd 4f       	sbci	r31, 0xFD	; 253
     3c2:	a0 81       	ld	r26, Z
     3c4:	b1 81       	ldd	r27, Z+1	; 0x01
     3c6:	80 91 0e 01 	lds	r24, 0x010E
     3ca:	28 2f       	mov	r18, r24
     3cc:	30 e0       	ldi	r19, 0x00	; 0
     3ce:	c9 01       	movw	r24, r18
     3d0:	88 0f       	add	r24, r24
     3d2:	99 1f       	adc	r25, r25
     3d4:	88 0f       	add	r24, r24
     3d6:	99 1f       	adc	r25, r25
     3d8:	88 0f       	add	r24, r24
     3da:	99 1f       	adc	r25, r25
     3dc:	82 0f       	add	r24, r18
     3de:	93 1f       	adc	r25, r19
     3e0:	fc 01       	movw	r30, r24
     3e2:	ec 5e       	subi	r30, 0xEC	; 236
     3e4:	fe 4f       	sbci	r31, 0xFE	; 254
     3e6:	80 81       	ld	r24, Z
     3e8:	91 81       	ldd	r25, Z+1	; 0x01
     3ea:	9f 96       	adiw	r26, 0x2f	; 47
     3ec:	9c 93       	st	X, r25
     3ee:	8e 93       	st	-X, r24
     3f0:	9e 97       	sbiw	r26, 0x2e	; 46
    sei();
     3f2:	78 94       	sei
vinterrupt_t resched_vectors[MAX_CORES];
__attribute__ (( naked )) void resched_isr(void)
{
    _bugurt_isr_prologue();

    sched_reschedule();
     3f4:	0e 94 98 17 	call	0x2f30	; 0x2f30 <sched_reschedule>
    kernel.sched[current_vm].current_proc->spointer = vm_state[current_vm].sp;
    sei();
}
__MACRO_FUNCTION__(_bugurt_isr_epilogue)
{
    cli();
     3f8:	f8 94       	cli
    vm_state[current_vm].sp = kernel.sched[current_vm].current_proc->spointer;
     3fa:	80 91 0e 01 	lds	r24, 0x010E
     3fe:	48 2f       	mov	r20, r24
     400:	50 e0       	ldi	r21, 0x00	; 0
     402:	80 91 0e 01 	lds	r24, 0x010E
     406:	28 2f       	mov	r18, r24
     408:	30 e0       	ldi	r19, 0x00	; 0
     40a:	8b e2       	ldi	r24, 0x2B	; 43
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	bc 01       	movw	r22, r24
     410:	26 9f       	mul	r18, r22
     412:	c0 01       	movw	r24, r0
     414:	27 9f       	mul	r18, r23
     416:	90 0d       	add	r25, r0
     418:	36 9f       	mul	r19, r22
     41a:	90 0d       	add	r25, r0
     41c:	11 24       	eor	r1, r1
     41e:	fc 01       	movw	r30, r24
     420:	ed 53       	subi	r30, 0x3D	; 61
     422:	fd 4f       	sbci	r31, 0xFD	; 253
     424:	01 90       	ld	r0, Z+
     426:	f0 81       	ld	r31, Z
     428:	e0 2d       	mov	r30, r0
     42a:	26 a5       	ldd	r18, Z+46	; 0x2e
     42c:	37 a5       	ldd	r19, Z+47	; 0x2f
     42e:	ca 01       	movw	r24, r20
     430:	88 0f       	add	r24, r24
     432:	99 1f       	adc	r25, r25
     434:	88 0f       	add	r24, r24
     436:	99 1f       	adc	r25, r25
     438:	88 0f       	add	r24, r24
     43a:	99 1f       	adc	r25, r25
     43c:	84 0f       	add	r24, r20
     43e:	95 1f       	adc	r25, r21
     440:	fc 01       	movw	r30, r24
     442:	ec 5e       	subi	r30, 0xEC	; 236
     444:	fe 4f       	sbci	r31, 0xFE	; 254
     446:	31 83       	std	Z+1, r19	; 0x01
     448:	20 83       	st	Z, r18
    __asm__ __volatile__("reti"::);
     44a:	18 95       	reti

0000044c <resched_vectors_init>:
    sched_reschedule();

    _bugurt_isr_epilogue();
}
void resched_vectors_init(void)
{
     44c:	df 93       	push	r29
     44e:	cf 93       	push	r28
     450:	0f 92       	push	r0
     452:	cd b7       	in	r28, 0x3d	; 61
     454:	de b7       	in	r29, 0x3e	; 62
    core_id_t i;
    for(i = 0; i < MAX_CORES; i++)
     456:	19 82       	std	Y+1, r1	; 0x01
     458:	14 c0       	rjmp	.+40     	; 0x482 <resched_vectors_init+0x36>
    {
        vsmp_vinterrupt_init( ( vinterrupt_t * )resched_vectors + i, resched_isr );
     45a:	89 81       	ldd	r24, Y+1	; 0x01
     45c:	28 2f       	mov	r18, r24
     45e:	30 e0       	ldi	r19, 0x00	; 0
     460:	c9 01       	movw	r24, r18
     462:	88 0f       	add	r24, r24
     464:	99 1f       	adc	r25, r25
     466:	82 0f       	add	r24, r18
     468:	93 1f       	adc	r25, r19
     46a:	88 0f       	add	r24, r24
     46c:	99 1f       	adc	r25, r25
     46e:	89 5d       	subi	r24, 0xD9	; 217
     470:	9e 4f       	sbci	r25, 0xFE	; 254
     472:	2f ec       	ldi	r18, 0xCF	; 207
     474:	31 e0       	ldi	r19, 0x01	; 1
     476:	b9 01       	movw	r22, r18
     478:	0e 94 cb 09 	call	0x1396	; 0x1396 <vsmp_vinterrupt_init>
    _bugurt_isr_epilogue();
}
void resched_vectors_init(void)
{
    core_id_t i;
    for(i = 0; i < MAX_CORES; i++)
     47c:	89 81       	ldd	r24, Y+1	; 0x01
     47e:	8f 5f       	subi	r24, 0xFF	; 255
     480:	89 83       	std	Y+1, r24	; 0x01
     482:	89 81       	ldd	r24, Y+1	; 0x01
     484:	82 30       	cpi	r24, 0x02	; 2
     486:	48 f3       	brcs	.-46     	; 0x45a <resched_vectors_init+0xe>
    {
        vsmp_vinterrupt_init( ( vinterrupt_t * )resched_vectors + i, resched_isr );
    }
}
     488:	0f 90       	pop	r0
     48a:	cf 91       	pop	r28
     48c:	df 91       	pop	r29
     48e:	08 95       	ret

00000490 <_systimer_tick_isr>:

vinterrupt_t systimer_vectors[MAX_CORES];
void _systimer_tick_isr(void)
{
     490:	df 93       	push	r29
     492:	cf 93       	push	r28
     494:	cd b7       	in	r28, 0x3d	; 61
     496:	de b7       	in	r29, 0x3e	; 62
    SPIN_LOCK_KERNEL_TIMER();
     498:	8c e7       	ldi	r24, 0x7C	; 124
     49a:	93 e0       	ldi	r25, 0x03	; 3
     49c:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    kernel.timer++;
     4a0:	80 91 7d 03 	lds	r24, 0x037D
     4a4:	90 91 7e 03 	lds	r25, 0x037E
     4a8:	01 96       	adiw	r24, 0x01	; 1
     4aa:	90 93 7e 03 	sts	0x037E, r25
     4ae:	80 93 7d 03 	sts	0x037D, r24
    if( kernel.timer_tick != (void (*)(void))0 ) kernel.timer_tick();
     4b2:	80 91 7f 03 	lds	r24, 0x037F
     4b6:	90 91 80 03 	lds	r25, 0x0380
     4ba:	00 97       	sbiw	r24, 0x00	; 0
     4bc:	29 f0       	breq	.+10     	; 0x4c8 <_systimer_tick_isr+0x38>
     4be:	e0 91 7f 03 	lds	r30, 0x037F
     4c2:	f0 91 80 03 	lds	r31, 0x0380
     4c6:	09 95       	icall
    SPIN_UNLOCK_KERNEL_TIMER();
     4c8:	8c e7       	ldi	r24, 0x7C	; 124
     4ca:	93 e0       	ldi	r25, 0x03	; 3
     4cc:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>

    sched_schedule();
     4d0:	0e 94 93 16 	call	0x2d26	; 0x2d26 <sched_schedule>
}
     4d4:	cf 91       	pop	r28
     4d6:	df 91       	pop	r29
     4d8:	08 95       	ret

000004da <systimer_tick_isr>:
#include "bugurt_kernel.h"

///!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
__MACRO_FUNCTION__(_bugurt_isr_prologue)
{
    cli();
     4da:	f8 94       	cli
    kernel.sched[current_vm].current_proc->spointer = vm_state[current_vm].sp;
     4dc:	80 91 0e 01 	lds	r24, 0x010E
     4e0:	28 2f       	mov	r18, r24
     4e2:	30 e0       	ldi	r19, 0x00	; 0
     4e4:	8b e2       	ldi	r24, 0x2B	; 43
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	ac 01       	movw	r20, r24
     4ea:	24 9f       	mul	r18, r20
     4ec:	c0 01       	movw	r24, r0
     4ee:	25 9f       	mul	r18, r21
     4f0:	90 0d       	add	r25, r0
     4f2:	34 9f       	mul	r19, r20
     4f4:	90 0d       	add	r25, r0
     4f6:	11 24       	eor	r1, r1
     4f8:	fc 01       	movw	r30, r24
     4fa:	ed 53       	subi	r30, 0x3D	; 61
     4fc:	fd 4f       	sbci	r31, 0xFD	; 253
     4fe:	a0 81       	ld	r26, Z
     500:	b1 81       	ldd	r27, Z+1	; 0x01
     502:	80 91 0e 01 	lds	r24, 0x010E
     506:	28 2f       	mov	r18, r24
     508:	30 e0       	ldi	r19, 0x00	; 0
     50a:	c9 01       	movw	r24, r18
     50c:	88 0f       	add	r24, r24
     50e:	99 1f       	adc	r25, r25
     510:	88 0f       	add	r24, r24
     512:	99 1f       	adc	r25, r25
     514:	88 0f       	add	r24, r24
     516:	99 1f       	adc	r25, r25
     518:	82 0f       	add	r24, r18
     51a:	93 1f       	adc	r25, r19
     51c:	fc 01       	movw	r30, r24
     51e:	ec 5e       	subi	r30, 0xEC	; 236
     520:	fe 4f       	sbci	r31, 0xFE	; 254
     522:	80 81       	ld	r24, Z
     524:	91 81       	ldd	r25, Z+1	; 0x01
     526:	9f 96       	adiw	r26, 0x2f	; 47
     528:	9c 93       	st	X, r25
     52a:	8e 93       	st	-X, r24
     52c:	9e 97       	sbiw	r26, 0x2e	; 46
    sei();
     52e:	78 94       	sei
}
__attribute__ (( naked )) void systimer_tick_isr(void)
{
    _bugurt_isr_prologue();

    _systimer_tick_isr();
     530:	0e 94 48 02 	call	0x490	; 0x490 <_systimer_tick_isr>
    kernel.sched[current_vm].current_proc->spointer = vm_state[current_vm].sp;
    sei();
}
__MACRO_FUNCTION__(_bugurt_isr_epilogue)
{
    cli();
     534:	f8 94       	cli
    vm_state[current_vm].sp = kernel.sched[current_vm].current_proc->spointer;
     536:	80 91 0e 01 	lds	r24, 0x010E
     53a:	48 2f       	mov	r20, r24
     53c:	50 e0       	ldi	r21, 0x00	; 0
     53e:	80 91 0e 01 	lds	r24, 0x010E
     542:	28 2f       	mov	r18, r24
     544:	30 e0       	ldi	r19, 0x00	; 0
     546:	8b e2       	ldi	r24, 0x2B	; 43
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	bc 01       	movw	r22, r24
     54c:	26 9f       	mul	r18, r22
     54e:	c0 01       	movw	r24, r0
     550:	27 9f       	mul	r18, r23
     552:	90 0d       	add	r25, r0
     554:	36 9f       	mul	r19, r22
     556:	90 0d       	add	r25, r0
     558:	11 24       	eor	r1, r1
     55a:	fc 01       	movw	r30, r24
     55c:	ed 53       	subi	r30, 0x3D	; 61
     55e:	fd 4f       	sbci	r31, 0xFD	; 253
     560:	01 90       	ld	r0, Z+
     562:	f0 81       	ld	r31, Z
     564:	e0 2d       	mov	r30, r0
     566:	26 a5       	ldd	r18, Z+46	; 0x2e
     568:	37 a5       	ldd	r19, Z+47	; 0x2f
     56a:	ca 01       	movw	r24, r20
     56c:	88 0f       	add	r24, r24
     56e:	99 1f       	adc	r25, r25
     570:	88 0f       	add	r24, r24
     572:	99 1f       	adc	r25, r25
     574:	88 0f       	add	r24, r24
     576:	99 1f       	adc	r25, r25
     578:	84 0f       	add	r24, r20
     57a:	95 1f       	adc	r25, r21
     57c:	fc 01       	movw	r30, r24
     57e:	ec 5e       	subi	r30, 0xEC	; 236
     580:	fe 4f       	sbci	r31, 0xFE	; 254
     582:	31 83       	std	Z+1, r19	; 0x01
     584:	20 83       	st	Z, r18
    __asm__ __volatile__("reti"::);
     586:	18 95       	reti

00000588 <systimer_sched_isr>:
#include "bugurt_kernel.h"

///!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
__MACRO_FUNCTION__(_bugurt_isr_prologue)
{
    cli();
     588:	f8 94       	cli
    kernel.sched[current_vm].current_proc->spointer = vm_state[current_vm].sp;
     58a:	80 91 0e 01 	lds	r24, 0x010E
     58e:	28 2f       	mov	r18, r24
     590:	30 e0       	ldi	r19, 0x00	; 0
     592:	8b e2       	ldi	r24, 0x2B	; 43
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	ac 01       	movw	r20, r24
     598:	24 9f       	mul	r18, r20
     59a:	c0 01       	movw	r24, r0
     59c:	25 9f       	mul	r18, r21
     59e:	90 0d       	add	r25, r0
     5a0:	34 9f       	mul	r19, r20
     5a2:	90 0d       	add	r25, r0
     5a4:	11 24       	eor	r1, r1
     5a6:	fc 01       	movw	r30, r24
     5a8:	ed 53       	subi	r30, 0x3D	; 61
     5aa:	fd 4f       	sbci	r31, 0xFD	; 253
     5ac:	a0 81       	ld	r26, Z
     5ae:	b1 81       	ldd	r27, Z+1	; 0x01
     5b0:	80 91 0e 01 	lds	r24, 0x010E
     5b4:	28 2f       	mov	r18, r24
     5b6:	30 e0       	ldi	r19, 0x00	; 0
     5b8:	c9 01       	movw	r24, r18
     5ba:	88 0f       	add	r24, r24
     5bc:	99 1f       	adc	r25, r25
     5be:	88 0f       	add	r24, r24
     5c0:	99 1f       	adc	r25, r25
     5c2:	88 0f       	add	r24, r24
     5c4:	99 1f       	adc	r25, r25
     5c6:	82 0f       	add	r24, r18
     5c8:	93 1f       	adc	r25, r19
     5ca:	fc 01       	movw	r30, r24
     5cc:	ec 5e       	subi	r30, 0xEC	; 236
     5ce:	fe 4f       	sbci	r31, 0xFE	; 254
     5d0:	80 81       	ld	r24, Z
     5d2:	91 81       	ldd	r25, Z+1	; 0x01
     5d4:	9f 96       	adiw	r26, 0x2f	; 47
     5d6:	9c 93       	st	X, r25
     5d8:	8e 93       	st	-X, r24
     5da:	9e 97       	sbiw	r26, 0x2e	; 46
    sei();
     5dc:	78 94       	sei

__attribute__ (( naked )) void systimer_sched_isr(void)
{
    _bugurt_isr_prologue();

    sched_schedule();
     5de:	0e 94 93 16 	call	0x2d26	; 0x2d26 <sched_schedule>
    kernel.sched[current_vm].current_proc->spointer = vm_state[current_vm].sp;
    sei();
}
__MACRO_FUNCTION__(_bugurt_isr_epilogue)
{
    cli();
     5e2:	f8 94       	cli
    vm_state[current_vm].sp = kernel.sched[current_vm].current_proc->spointer;
     5e4:	80 91 0e 01 	lds	r24, 0x010E
     5e8:	48 2f       	mov	r20, r24
     5ea:	50 e0       	ldi	r21, 0x00	; 0
     5ec:	80 91 0e 01 	lds	r24, 0x010E
     5f0:	28 2f       	mov	r18, r24
     5f2:	30 e0       	ldi	r19, 0x00	; 0
     5f4:	8b e2       	ldi	r24, 0x2B	; 43
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	bc 01       	movw	r22, r24
     5fa:	26 9f       	mul	r18, r22
     5fc:	c0 01       	movw	r24, r0
     5fe:	27 9f       	mul	r18, r23
     600:	90 0d       	add	r25, r0
     602:	36 9f       	mul	r19, r22
     604:	90 0d       	add	r25, r0
     606:	11 24       	eor	r1, r1
     608:	fc 01       	movw	r30, r24
     60a:	ed 53       	subi	r30, 0x3D	; 61
     60c:	fd 4f       	sbci	r31, 0xFD	; 253
     60e:	01 90       	ld	r0, Z+
     610:	f0 81       	ld	r31, Z
     612:	e0 2d       	mov	r30, r0
     614:	26 a5       	ldd	r18, Z+46	; 0x2e
     616:	37 a5       	ldd	r19, Z+47	; 0x2f
     618:	ca 01       	movw	r24, r20
     61a:	88 0f       	add	r24, r24
     61c:	99 1f       	adc	r25, r25
     61e:	88 0f       	add	r24, r24
     620:	99 1f       	adc	r25, r25
     622:	88 0f       	add	r24, r24
     624:	99 1f       	adc	r25, r25
     626:	84 0f       	add	r24, r20
     628:	95 1f       	adc	r25, r21
     62a:	fc 01       	movw	r30, r24
     62c:	ec 5e       	subi	r30, 0xEC	; 236
     62e:	fe 4f       	sbci	r31, 0xFE	; 254
     630:	31 83       	std	Z+1, r19	; 0x01
     632:	20 83       	st	Z, r18
    __asm__ __volatile__("reti"::);
     634:	18 95       	reti

00000636 <systimer_vectors_init>:

    _bugurt_isr_epilogue();
}

void systimer_vectors_init(void)
{
     636:	df 93       	push	r29
     638:	cf 93       	push	r28
     63a:	0f 92       	push	r0
     63c:	cd b7       	in	r28, 0x3d	; 61
     63e:	de b7       	in	r29, 0x3e	; 62
    core_id_t i;
    vsmp_vinterrupt_init( (vinterrupt_t *)systimer_vectors, systimer_tick_isr ); // Zero core is "mater", it handles kernel.timer
     640:	83 e3       	ldi	r24, 0x33	; 51
     642:	91 e0       	ldi	r25, 0x01	; 1
     644:	2d e6       	ldi	r18, 0x6D	; 109
     646:	32 e0       	ldi	r19, 0x02	; 2
     648:	b9 01       	movw	r22, r18
     64a:	0e 94 cb 09 	call	0x1396	; 0x1396 <vsmp_vinterrupt_init>
    for(i = 1; i < MAX_CORES; i++)
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	89 83       	std	Y+1, r24	; 0x01
     652:	14 c0       	rjmp	.+40     	; 0x67c <systimer_vectors_init+0x46>
    {
        vsmp_vinterrupt_init( (vinterrupt_t *)systimer_vectors + i, systimer_sched_isr ); // Other cores are slaves they just shedule.
     654:	89 81       	ldd	r24, Y+1	; 0x01
     656:	28 2f       	mov	r18, r24
     658:	30 e0       	ldi	r19, 0x00	; 0
     65a:	c9 01       	movw	r24, r18
     65c:	88 0f       	add	r24, r24
     65e:	99 1f       	adc	r25, r25
     660:	82 0f       	add	r24, r18
     662:	93 1f       	adc	r25, r19
     664:	88 0f       	add	r24, r24
     666:	99 1f       	adc	r25, r25
     668:	8d 5c       	subi	r24, 0xCD	; 205
     66a:	9e 4f       	sbci	r25, 0xFE	; 254
     66c:	24 ec       	ldi	r18, 0xC4	; 196
     66e:	32 e0       	ldi	r19, 0x02	; 2
     670:	b9 01       	movw	r22, r18
     672:	0e 94 cb 09 	call	0x1396	; 0x1396 <vsmp_vinterrupt_init>

void systimer_vectors_init(void)
{
    core_id_t i;
    vsmp_vinterrupt_init( (vinterrupt_t *)systimer_vectors, systimer_tick_isr ); // Zero core is "mater", it handles kernel.timer
    for(i = 1; i < MAX_CORES; i++)
     676:	89 81       	ldd	r24, Y+1	; 0x01
     678:	8f 5f       	subi	r24, 0xFF	; 255
     67a:	89 83       	std	Y+1, r24	; 0x01
     67c:	89 81       	ldd	r24, Y+1	; 0x01
     67e:	82 30       	cpi	r24, 0x02	; 2
     680:	48 f3       	brcs	.-46     	; 0x654 <systimer_vectors_init+0x1e>
    {
        vsmp_vinterrupt_init( (vinterrupt_t *)systimer_vectors + i, systimer_sched_isr ); // Other cores are slaves they just shedule.
    }
}
     682:	0f 90       	pop	r0
     684:	cf 91       	pop	r28
     686:	df 91       	pop	r29
     688:	08 95       	ret

0000068a <systimer_vectors_fire>:

void systimer_vectors_fire(void)
{
     68a:	df 93       	push	r29
     68c:	cf 93       	push	r28
     68e:	0f 92       	push	r0
     690:	cd b7       	in	r28, 0x3d	; 61
     692:	de b7       	in	r29, 0x3e	; 62
    core_id_t i;
    for(i = 0; i < MAX_CORES; i++)
     694:	19 82       	std	Y+1, r1	; 0x01
     696:	14 c0       	rjmp	.+40     	; 0x6c0 <systimer_vectors_fire+0x36>
    {
        vsmp_vinterrupt_isr( i, (vinterrupt_t *)systimer_vectors + i );
     698:	89 81       	ldd	r24, Y+1	; 0x01
     69a:	28 2f       	mov	r18, r24
     69c:	30 e0       	ldi	r19, 0x00	; 0
     69e:	c9 01       	movw	r24, r18
     6a0:	88 0f       	add	r24, r24
     6a2:	99 1f       	adc	r25, r25
     6a4:	82 0f       	add	r24, r18
     6a6:	93 1f       	adc	r25, r19
     6a8:	88 0f       	add	r24, r24
     6aa:	99 1f       	adc	r25, r25
     6ac:	9c 01       	movw	r18, r24
     6ae:	2d 5c       	subi	r18, 0xCD	; 205
     6b0:	3e 4f       	sbci	r19, 0xFE	; 254
     6b2:	89 81       	ldd	r24, Y+1	; 0x01
     6b4:	b9 01       	movw	r22, r18
     6b6:	0e 94 7e 09 	call	0x12fc	; 0x12fc <vsmp_vinterrupt_isr>
}

void systimer_vectors_fire(void)
{
    core_id_t i;
    for(i = 0; i < MAX_CORES; i++)
     6ba:	89 81       	ldd	r24, Y+1	; 0x01
     6bc:	8f 5f       	subi	r24, 0xFF	; 255
     6be:	89 83       	std	Y+1, r24	; 0x01
     6c0:	89 81       	ldd	r24, Y+1	; 0x01
     6c2:	82 30       	cpi	r24, 0x02	; 2
     6c4:	48 f3       	brcs	.-46     	; 0x698 <systimer_vectors_fire+0xe>
    {
        vsmp_vinterrupt_isr( i, (vinterrupt_t *)systimer_vectors + i );
    }
}
     6c6:	0f 90       	pop	r0
     6c8:	cf 91       	pop	r28
     6ca:	df 91       	pop	r29
     6cc:	08 95       	ret

000006ce <vsmp_systimer_hook_bugurt>:

#define SYSTIMER_HOOK_THR 10
count_t systimer_hook_counter = 0;
void vsmp_systimer_hook_bugurt(void)
{
     6ce:	df 93       	push	r29
     6d0:	cf 93       	push	r28
     6d2:	cd b7       	in	r28, 0x3d	; 61
     6d4:	de b7       	in	r29, 0x3e	; 62
    if(!current_vm)
     6d6:	80 91 0e 01 	lds	r24, 0x010E
     6da:	88 23       	and	r24, r24
     6dc:	b1 f4       	brne	.+44     	; 0x70a <vsmp_systimer_hook_bugurt+0x3c>
    {
        systimer_hook_counter++;
     6de:	80 91 00 01 	lds	r24, 0x0100
     6e2:	90 91 01 01 	lds	r25, 0x0101
     6e6:	01 96       	adiw	r24, 0x01	; 1
     6e8:	90 93 01 01 	sts	0x0101, r25
     6ec:	80 93 00 01 	sts	0x0100, r24
        if( systimer_hook_counter >= SYSTIMER_HOOK_THR )
     6f0:	80 91 00 01 	lds	r24, 0x0100
     6f4:	90 91 01 01 	lds	r25, 0x0101
     6f8:	8a 30       	cpi	r24, 0x0A	; 10
     6fa:	91 05       	cpc	r25, r1
     6fc:	30 f0       	brcs	.+12     	; 0x70a <vsmp_systimer_hook_bugurt+0x3c>
        {
            systimer_hook_counter = (count_t)0;
     6fe:	10 92 01 01 	sts	0x0101, r1
     702:	10 92 00 01 	sts	0x0100, r1
            systimer_vectors_fire();
     706:	0e 94 45 03 	call	0x68a	; 0x68a <systimer_vectors_fire>
        }

    }
}
     70a:	cf 91       	pop	r28
     70c:	df 91       	pop	r29
     70e:	08 95       	ret

00000710 <_syscall_isr>:
syscall_t syscall_num[MAX_CORES];
void * syscall_arg[MAX_CORES];

// Local variable is used compiler generated prologue and epilogue needed
void _syscall_isr(void)
{
     710:	df 93       	push	r29
     712:	cf 93       	push	r28
     714:	0f 92       	push	r0
     716:	cd b7       	in	r28, 0x3d	; 61
     718:	de b7       	in	r29, 0x3e	; 62
    core_id_t core;
    core = current_core();
     71a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <current_core>
     71e:	89 83       	std	Y+1, r24	; 0x01
    do_syscall( syscall_num[core], syscall_arg[core] );
     720:	89 81       	ldd	r24, Y+1	; 0x01
     722:	88 2f       	mov	r24, r24
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	fc 01       	movw	r30, r24
     728:	eb 5d       	subi	r30, 0xDB	; 219
     72a:	fe 4f       	sbci	r31, 0xFE	; 254
     72c:	40 81       	ld	r20, Z
     72e:	89 81       	ldd	r24, Y+1	; 0x01
     730:	88 2f       	mov	r24, r24
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	88 0f       	add	r24, r24
     736:	99 1f       	adc	r25, r25
     738:	fc 01       	movw	r30, r24
     73a:	ef 5d       	subi	r30, 0xDF	; 223
     73c:	fe 4f       	sbci	r31, 0xFE	; 254
     73e:	20 81       	ld	r18, Z
     740:	31 81       	ldd	r19, Z+1	; 0x01
     742:	84 2f       	mov	r24, r20
     744:	b9 01       	movw	r22, r18
     746:	0e 94 21 1b 	call	0x3642	; 0x3642 <do_syscall>
}
     74a:	0f 90       	pop	r0
     74c:	cf 91       	pop	r28
     74e:	df 91       	pop	r29
     750:	08 95       	ret

00000752 <syscall_isr>:
#include "bugurt_kernel.h"

///!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
__MACRO_FUNCTION__(_bugurt_isr_prologue)
{
    cli();
     752:	f8 94       	cli
    kernel.sched[current_vm].current_proc->spointer = vm_state[current_vm].sp;
     754:	80 91 0e 01 	lds	r24, 0x010E
     758:	28 2f       	mov	r18, r24
     75a:	30 e0       	ldi	r19, 0x00	; 0
     75c:	8b e2       	ldi	r24, 0x2B	; 43
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	ac 01       	movw	r20, r24
     762:	24 9f       	mul	r18, r20
     764:	c0 01       	movw	r24, r0
     766:	25 9f       	mul	r18, r21
     768:	90 0d       	add	r25, r0
     76a:	34 9f       	mul	r19, r20
     76c:	90 0d       	add	r25, r0
     76e:	11 24       	eor	r1, r1
     770:	fc 01       	movw	r30, r24
     772:	ed 53       	subi	r30, 0x3D	; 61
     774:	fd 4f       	sbci	r31, 0xFD	; 253
     776:	a0 81       	ld	r26, Z
     778:	b1 81       	ldd	r27, Z+1	; 0x01
     77a:	80 91 0e 01 	lds	r24, 0x010E
     77e:	28 2f       	mov	r18, r24
     780:	30 e0       	ldi	r19, 0x00	; 0
     782:	c9 01       	movw	r24, r18
     784:	88 0f       	add	r24, r24
     786:	99 1f       	adc	r25, r25
     788:	88 0f       	add	r24, r24
     78a:	99 1f       	adc	r25, r25
     78c:	88 0f       	add	r24, r24
     78e:	99 1f       	adc	r25, r25
     790:	82 0f       	add	r24, r18
     792:	93 1f       	adc	r25, r19
     794:	fc 01       	movw	r30, r24
     796:	ec 5e       	subi	r30, 0xEC	; 236
     798:	fe 4f       	sbci	r31, 0xFE	; 254
     79a:	80 81       	ld	r24, Z
     79c:	91 81       	ldd	r25, Z+1	; 0x01
     79e:	9f 96       	adiw	r26, 0x2f	; 47
     7a0:	9c 93       	st	X, r25
     7a2:	8e 93       	st	-X, r24
     7a4:	9e 97       	sbiw	r26, 0x2e	; 46
    sei();
     7a6:	78 94       	sei
}
__attribute__ (( naked )) void syscall_isr(void)
{
    _bugurt_isr_prologue();

    _syscall_isr();
     7a8:	0e 94 88 03 	call	0x710	; 0x710 <_syscall_isr>
    kernel.sched[current_vm].current_proc->spointer = vm_state[current_vm].sp;
    sei();
}
__MACRO_FUNCTION__(_bugurt_isr_epilogue)
{
    cli();
     7ac:	f8 94       	cli
    vm_state[current_vm].sp = kernel.sched[current_vm].current_proc->spointer;
     7ae:	80 91 0e 01 	lds	r24, 0x010E
     7b2:	48 2f       	mov	r20, r24
     7b4:	50 e0       	ldi	r21, 0x00	; 0
     7b6:	80 91 0e 01 	lds	r24, 0x010E
     7ba:	28 2f       	mov	r18, r24
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	8b e2       	ldi	r24, 0x2B	; 43
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	bc 01       	movw	r22, r24
     7c4:	26 9f       	mul	r18, r22
     7c6:	c0 01       	movw	r24, r0
     7c8:	27 9f       	mul	r18, r23
     7ca:	90 0d       	add	r25, r0
     7cc:	36 9f       	mul	r19, r22
     7ce:	90 0d       	add	r25, r0
     7d0:	11 24       	eor	r1, r1
     7d2:	fc 01       	movw	r30, r24
     7d4:	ed 53       	subi	r30, 0x3D	; 61
     7d6:	fd 4f       	sbci	r31, 0xFD	; 253
     7d8:	01 90       	ld	r0, Z+
     7da:	f0 81       	ld	r31, Z
     7dc:	e0 2d       	mov	r30, r0
     7de:	26 a5       	ldd	r18, Z+46	; 0x2e
     7e0:	37 a5       	ldd	r19, Z+47	; 0x2f
     7e2:	ca 01       	movw	r24, r20
     7e4:	88 0f       	add	r24, r24
     7e6:	99 1f       	adc	r25, r25
     7e8:	88 0f       	add	r24, r24
     7ea:	99 1f       	adc	r25, r25
     7ec:	88 0f       	add	r24, r24
     7ee:	99 1f       	adc	r25, r25
     7f0:	84 0f       	add	r24, r20
     7f2:	95 1f       	adc	r25, r21
     7f4:	fc 01       	movw	r30, r24
     7f6:	ec 5e       	subi	r30, 0xEC	; 236
     7f8:	fe 4f       	sbci	r31, 0xFE	; 254
     7fa:	31 83       	std	Z+1, r19	; 0x01
     7fc:	20 83       	st	Z, r18
    __asm__ __volatile__("reti"::);
     7fe:	18 95       	reti

00000800 <syscall_vectors_init>:
    _bugurt_isr_epilogue();
}


void syscall_vectors_init(void)
{
     800:	df 93       	push	r29
     802:	cf 93       	push	r28
     804:	0f 92       	push	r0
     806:	cd b7       	in	r28, 0x3d	; 61
     808:	de b7       	in	r29, 0x3e	; 62
    core_id_t i;
    for(i = 0; i < MAX_CORES; i++)
     80a:	19 82       	std	Y+1, r1	; 0x01
     80c:	25 c0       	rjmp	.+74     	; 0x858 <syscall_vectors_init+0x58>
    {
        vsmp_vinterrupt_init( ( vinterrupt_t * )syscall_vectors + i, syscall_isr );
     80e:	89 81       	ldd	r24, Y+1	; 0x01
     810:	28 2f       	mov	r18, r24
     812:	30 e0       	ldi	r19, 0x00	; 0
     814:	c9 01       	movw	r24, r18
     816:	88 0f       	add	r24, r24
     818:	99 1f       	adc	r25, r25
     81a:	82 0f       	add	r24, r18
     81c:	93 1f       	adc	r25, r19
     81e:	88 0f       	add	r24, r24
     820:	99 1f       	adc	r25, r25
     822:	8e 5f       	subi	r24, 0xFE	; 254
     824:	9e 4f       	sbci	r25, 0xFE	; 254
     826:	29 ea       	ldi	r18, 0xA9	; 169
     828:	33 e0       	ldi	r19, 0x03	; 3
     82a:	b9 01       	movw	r22, r18
     82c:	0e 94 cb 09 	call	0x1396	; 0x1396 <vsmp_vinterrupt_init>
        syscall_num[i] = (syscall_t)0;
     830:	89 81       	ldd	r24, Y+1	; 0x01
     832:	88 2f       	mov	r24, r24
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	fc 01       	movw	r30, r24
     838:	eb 5d       	subi	r30, 0xDB	; 219
     83a:	fe 4f       	sbci	r31, 0xFE	; 254
     83c:	10 82       	st	Z, r1
        syscall_arg[i] = (void *)0;
     83e:	89 81       	ldd	r24, Y+1	; 0x01
     840:	88 2f       	mov	r24, r24
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	88 0f       	add	r24, r24
     846:	99 1f       	adc	r25, r25
     848:	fc 01       	movw	r30, r24
     84a:	ef 5d       	subi	r30, 0xDF	; 223
     84c:	fe 4f       	sbci	r31, 0xFE	; 254
     84e:	11 82       	std	Z+1, r1	; 0x01
     850:	10 82       	st	Z, r1


void syscall_vectors_init(void)
{
    core_id_t i;
    for(i = 0; i < MAX_CORES; i++)
     852:	89 81       	ldd	r24, Y+1	; 0x01
     854:	8f 5f       	subi	r24, 0xFF	; 255
     856:	89 83       	std	Y+1, r24	; 0x01
     858:	89 81       	ldd	r24, Y+1	; 0x01
     85a:	82 30       	cpi	r24, 0x02	; 2
     85c:	c0 f2       	brcs	.-80     	; 0x80e <syscall_vectors_init+0xe>
    {
        vsmp_vinterrupt_init( ( vinterrupt_t * )syscall_vectors + i, syscall_isr );
        syscall_num[i] = (syscall_t)0;
        syscall_arg[i] = (void *)0;
    }
}
     85e:	0f 90       	pop	r0
     860:	cf 91       	pop	r28
     862:	df 91       	pop	r29
     864:	08 95       	ret

00000866 <syscall_bugurt>:

void syscall_bugurt( unsigned char num, void * arg )
{
     866:	df 93       	push	r29
     868:	cf 93       	push	r28
     86a:	00 d0       	rcall	.+0      	; 0x86c <syscall_bugurt+0x6>
     86c:	00 d0       	rcall	.+0      	; 0x86e <syscall_bugurt+0x8>
     86e:	00 d0       	rcall	.+0      	; 0x870 <syscall_bugurt+0xa>
     870:	cd b7       	in	r28, 0x3d	; 61
     872:	de b7       	in	r29, 0x3e	; 62
     874:	8c 83       	std	Y+4, r24	; 0x04
     876:	7e 83       	std	Y+6, r23	; 0x06
     878:	6d 83       	std	Y+5, r22	; 0x05
    core_id_t core;
    item_t * vector;

    disable_interrupts();
     87a:	0e 94 e6 09 	call	0x13cc	; 0x13cc <disable_interrupts>

    cli();
     87e:	f8 94       	cli
    core = current_vm;
     880:	80 91 0e 01 	lds	r24, 0x010E
     884:	8b 83       	std	Y+3, r24	; 0x03
    sei();
     886:	78 94       	sei

    syscall_num[core] = (syscall_t)num;
     888:	8b 81       	ldd	r24, Y+3	; 0x03
     88a:	88 2f       	mov	r24, r24
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	fc 01       	movw	r30, r24
     890:	eb 5d       	subi	r30, 0xDB	; 219
     892:	fe 4f       	sbci	r31, 0xFE	; 254
     894:	8c 81       	ldd	r24, Y+4	; 0x04
     896:	80 83       	st	Z, r24
    syscall_arg[core] = (void *)arg;
     898:	8b 81       	ldd	r24, Y+3	; 0x03
     89a:	88 2f       	mov	r24, r24
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	88 0f       	add	r24, r24
     8a0:	99 1f       	adc	r25, r25
     8a2:	fc 01       	movw	r30, r24
     8a4:	ef 5d       	subi	r30, 0xDF	; 223
     8a6:	fe 4f       	sbci	r31, 0xFE	; 254
     8a8:	8d 81       	ldd	r24, Y+5	; 0x05
     8aa:	9e 81       	ldd	r25, Y+6	; 0x06
     8ac:	91 83       	std	Z+1, r25	; 0x01
     8ae:	80 83       	st	Z, r24
    vector = (item_t *)( &syscall_vectors[core] );
     8b0:	42 e0       	ldi	r20, 0x02	; 2
     8b2:	51 e0       	ldi	r21, 0x01	; 1
     8b4:	8b 81       	ldd	r24, Y+3	; 0x03
     8b6:	28 2f       	mov	r18, r24
     8b8:	30 e0       	ldi	r19, 0x00	; 0
     8ba:	c9 01       	movw	r24, r18
     8bc:	88 0f       	add	r24, r24
     8be:	99 1f       	adc	r25, r25
     8c0:	82 0f       	add	r24, r18
     8c2:	93 1f       	adc	r25, r19
     8c4:	88 0f       	add	r24, r24
     8c6:	99 1f       	adc	r25, r25
     8c8:	84 0f       	add	r24, r20
     8ca:	95 1f       	adc	r25, r21
     8cc:	9a 83       	std	Y+2, r25	; 0x02
     8ce:	89 83       	std	Y+1, r24	; 0x01

    cli();
     8d0:	f8 94       	cli
    vm_state[current_vm].int_enabled = (bool_t)1; // Virtual interrupts MUST be eanabled !!!
     8d2:	80 91 0e 01 	lds	r24, 0x010E
     8d6:	28 2f       	mov	r18, r24
     8d8:	30 e0       	ldi	r19, 0x00	; 0
     8da:	c9 01       	movw	r24, r18
     8dc:	88 0f       	add	r24, r24
     8de:	99 1f       	adc	r25, r25
     8e0:	88 0f       	add	r24, r24
     8e2:	99 1f       	adc	r25, r25
     8e4:	88 0f       	add	r24, r24
     8e6:	99 1f       	adc	r25, r25
     8e8:	82 0f       	add	r24, r18
     8ea:	93 1f       	adc	r25, r19
     8ec:	fc 01       	movw	r30, r24
     8ee:	ef 5e       	subi	r30, 0xEF	; 239
     8f0:	fe 4f       	sbci	r31, 0xFE	; 254
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	80 83       	st	Z, r24
    // System call is not an ordinary interrupt!!!
    // It MUST be serviced FIRST!!!
    if( vm_state[current_vm].int_fifo )
     8f6:	80 91 0e 01 	lds	r24, 0x010E
     8fa:	28 2f       	mov	r18, r24
     8fc:	30 e0       	ldi	r19, 0x00	; 0
     8fe:	c9 01       	movw	r24, r18
     900:	88 0f       	add	r24, r24
     902:	99 1f       	adc	r25, r25
     904:	88 0f       	add	r24, r24
     906:	99 1f       	adc	r25, r25
     908:	88 0f       	add	r24, r24
     90a:	99 1f       	adc	r25, r25
     90c:	82 0f       	add	r24, r18
     90e:	93 1f       	adc	r25, r19
     910:	fc 01       	movw	r30, r24
     912:	e1 5f       	subi	r30, 0xF1	; 241
     914:	fe 4f       	sbci	r31, 0xFE	; 254
     916:	80 81       	ld	r24, Z
     918:	91 81       	ldd	r25, Z+1	; 0x01
     91a:	00 97       	sbiw	r24, 0x00	; 0
     91c:	d1 f0       	breq	.+52     	; 0x952 <__stack+0x53>
    {
        item_insert( (item_t *)vector, ((item_t *)vm_state[current_vm].int_fifo)->next );
     91e:	80 91 0e 01 	lds	r24, 0x010E
     922:	28 2f       	mov	r18, r24
     924:	30 e0       	ldi	r19, 0x00	; 0
     926:	c9 01       	movw	r24, r18
     928:	88 0f       	add	r24, r24
     92a:	99 1f       	adc	r25, r25
     92c:	88 0f       	add	r24, r24
     92e:	99 1f       	adc	r25, r25
     930:	88 0f       	add	r24, r24
     932:	99 1f       	adc	r25, r25
     934:	82 0f       	add	r24, r18
     936:	93 1f       	adc	r25, r19
     938:	fc 01       	movw	r30, r24
     93a:	e1 5f       	subi	r30, 0xF1	; 241
     93c:	fe 4f       	sbci	r31, 0xFE	; 254
     93e:	01 90       	ld	r0, Z+
     940:	f0 81       	ld	r31, Z
     942:	e0 2d       	mov	r30, r0
     944:	20 81       	ld	r18, Z
     946:	31 81       	ldd	r19, Z+1	; 0x01
     948:	89 81       	ldd	r24, Y+1	; 0x01
     94a:	9a 81       	ldd	r25, Y+2	; 0x02
     94c:	b9 01       	movw	r22, r18
     94e:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <item_insert>
    }
    vm_state[current_vm].int_fifo = (item_t *)vector;
     952:	80 91 0e 01 	lds	r24, 0x010E
     956:	28 2f       	mov	r18, r24
     958:	30 e0       	ldi	r19, 0x00	; 0
     95a:	c9 01       	movw	r24, r18
     95c:	88 0f       	add	r24, r24
     95e:	99 1f       	adc	r25, r25
     960:	88 0f       	add	r24, r24
     962:	99 1f       	adc	r25, r25
     964:	88 0f       	add	r24, r24
     966:	99 1f       	adc	r25, r25
     968:	82 0f       	add	r24, r18
     96a:	93 1f       	adc	r25, r19
     96c:	fc 01       	movw	r30, r24
     96e:	e1 5f       	subi	r30, 0xF1	; 241
     970:	fe 4f       	sbci	r31, 0xFE	; 254
     972:	89 81       	ldd	r24, Y+1	; 0x01
     974:	9a 81       	ldd	r25, Y+2	; 0x02
     976:	91 83       	std	Z+1, r25	; 0x01
     978:	80 83       	st	Z, r24
    _vsmp_vinterrupt();
     97a:	0e 94 88 08 	call	0x1110	; 0x1110 <_vsmp_vinterrupt>
}
     97e:	26 96       	adiw	r28, 0x06	; 6
     980:	0f b6       	in	r0, 0x3f	; 63
     982:	f8 94       	cli
     984:	de bf       	out	0x3e, r29	; 62
     986:	0f be       	out	0x3f, r0	; 63
     988:	cd bf       	out	0x3d, r28	; 61
     98a:	cf 91       	pop	r28
     98c:	df 91       	pop	r29
     98e:	08 95       	ret

00000990 <init_bugurt>:
/***************************************************************************************************************/
// Функции общего пользования

void init_bugurt(void)
{
     990:	df 93       	push	r29
     992:	cf 93       	push	r28
     994:	0f 92       	push	r0
     996:	cd b7       	in	r28, 0x3d	; 61
     998:	de b7       	in	r29, 0x3e	; 62
    core_id_t i;
    disable_interrupts();
     99a:	0e 94 e6 09 	call	0x13cc	; 0x13cc <disable_interrupts>
    resched_vectors_init();
     99e:	0e 94 26 02 	call	0x44c	; 0x44c <resched_vectors_init>
    systimer_vectors_init();
     9a2:	0e 94 1b 03 	call	0x636	; 0x636 <systimer_vectors_init>
    syscall_vectors_init();
     9a6:	0e 94 00 04 	call	0x800	; 0x800 <syscall_vectors_init>
    kernel_init();
     9aa:	0e 94 56 0d 	call	0x1aac	; 0x1aac <kernel_init>
    kernel.sched[current_core()].nested_crit_sec = (count_t)1;
     9ae:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <current_core>
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	8b e2       	ldi	r24, 0x2B	; 43
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	ac 01       	movw	r20, r24
     9bc:	24 9f       	mul	r18, r20
     9be:	c0 01       	movw	r24, r0
     9c0:	25 9f       	mul	r18, r21
     9c2:	90 0d       	add	r25, r0
     9c4:	34 9f       	mul	r19, r20
     9c6:	90 0d       	add	r25, r0
     9c8:	11 24       	eor	r1, r1
     9ca:	fc 01       	movw	r30, r24
     9cc:	e5 51       	subi	r30, 0x15	; 21
     9ce:	fd 4f       	sbci	r31, 0xFD	; 253
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	91 83       	std	Z+1, r25	; 0x01
     9d6:	80 83       	st	Z, r24
    for(i = 1; i < MAX_CORES; i++)
     9d8:	81 e0       	ldi	r24, 0x01	; 1
     9da:	89 83       	std	Y+1, r24	; 0x01
     9dc:	17 c0       	rjmp	.+46     	; 0xa0c <init_bugurt+0x7c>
    {
        kernel.idle[i].pmain = vsmp_idle_main;
     9de:	89 81       	ldd	r24, Y+1	; 0x01
     9e0:	28 2f       	mov	r18, r24
     9e2:	30 e0       	ldi	r19, 0x00	; 0
     9e4:	80 e3       	ldi	r24, 0x30	; 48
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	ac 01       	movw	r20, r24
     9ea:	24 9f       	mul	r18, r20
     9ec:	c0 01       	movw	r24, r0
     9ee:	25 9f       	mul	r18, r21
     9f0:	90 0d       	add	r25, r0
     9f2:	34 9f       	mul	r19, r20
     9f4:	90 0d       	add	r25, r0
     9f6:	11 24       	eor	r1, r1
     9f8:	fc 01       	movw	r30, r24
     9fa:	e3 5c       	subi	r30, 0xC3	; 195
     9fc:	fc 4f       	sbci	r31, 0xFC	; 252
     9fe:	88 e1       	ldi	r24, 0x18	; 24
     a00:	96 e0       	ldi	r25, 0x06	; 6
     a02:	91 83       	std	Z+1, r25	; 0x01
     a04:	80 83       	st	Z, r24
    resched_vectors_init();
    systimer_vectors_init();
    syscall_vectors_init();
    kernel_init();
    kernel.sched[current_core()].nested_crit_sec = (count_t)1;
    for(i = 1; i < MAX_CORES; i++)
     a06:	89 81       	ldd	r24, Y+1	; 0x01
     a08:	8f 5f       	subi	r24, 0xFF	; 255
     a0a:	89 83       	std	Y+1, r24	; 0x01
     a0c:	89 81       	ldd	r24, Y+1	; 0x01
     a0e:	82 30       	cpi	r24, 0x02	; 2
     a10:	30 f3       	brcs	.-52     	; 0x9de <init_bugurt+0x4e>
    {
        kernel.idle[i].pmain = vsmp_idle_main;
    }
}
     a12:	0f 90       	pop	r0
     a14:	cf 91       	pop	r28
     a16:	df 91       	pop	r29
     a18:	08 95       	ret

00000a1a <start_bugurt>:
void start_bugurt(void)
{
     a1a:	df 93       	push	r29
     a1c:	cf 93       	push	r28
     a1e:	cd b7       	in	r28, 0x3d	; 61
     a20:	de b7       	in	r29, 0x3e	; 62
    kernel.sched[current_core()].nested_crit_sec = (count_t)0;
     a22:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <current_core>
     a26:	28 2f       	mov	r18, r24
     a28:	30 e0       	ldi	r19, 0x00	; 0
     a2a:	8b e2       	ldi	r24, 0x2B	; 43
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	ac 01       	movw	r20, r24
     a30:	24 9f       	mul	r18, r20
     a32:	c0 01       	movw	r24, r0
     a34:	25 9f       	mul	r18, r21
     a36:	90 0d       	add	r25, r0
     a38:	34 9f       	mul	r19, r20
     a3a:	90 0d       	add	r25, r0
     a3c:	11 24       	eor	r1, r1
     a3e:	fc 01       	movw	r30, r24
     a40:	e5 51       	subi	r30, 0x15	; 21
     a42:	fd 4f       	sbci	r31, 0xFD	; 253
     a44:	11 82       	std	Z+1, r1	; 0x01
     a46:	10 82       	st	Z, r1
    enable_interrupts();
     a48:	0e 94 00 0a 	call	0x1400	; 0x1400 <enable_interrupts>
    cli();
     a4c:	f8 94       	cli
    vsmp_systimer_hook = vsmp_systimer_hook_bugurt;
     a4e:	87 e6       	ldi	r24, 0x67	; 103
     a50:	93 e0       	ldi	r25, 0x03	; 3
     a52:	90 93 c2 02 	sts	0x02C2, r25
     a56:	80 93 c1 02 	sts	0x02C1, r24
    sei();
     a5a:	78 94       	sei
    idle_main( (void *)0 );
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <idle_main>
}
     a64:	cf 91       	pop	r28
     a66:	df 91       	pop	r29
     a68:	08 95       	ret

00000a6a <vsmp_vm_init>:
void (*vsmp_systimer_hook)(void);



void vsmp_vm_init( vsmp_vm_t * vm, stack_t * sp, stack_t * int_sp )
{
     a6a:	df 93       	push	r29
     a6c:	cf 93       	push	r28
     a6e:	00 d0       	rcall	.+0      	; 0xa70 <vsmp_vm_init+0x6>
     a70:	00 d0       	rcall	.+0      	; 0xa72 <vsmp_vm_init+0x8>
     a72:	00 d0       	rcall	.+0      	; 0xa74 <vsmp_vm_init+0xa>
     a74:	cd b7       	in	r28, 0x3d	; 61
     a76:	de b7       	in	r29, 0x3e	; 62
     a78:	9a 83       	std	Y+2, r25	; 0x02
     a7a:	89 83       	std	Y+1, r24	; 0x01
     a7c:	7c 83       	std	Y+4, r23	; 0x04
     a7e:	6b 83       	std	Y+3, r22	; 0x03
     a80:	5e 83       	std	Y+6, r21	; 0x06
     a82:	4d 83       	std	Y+5, r20	; 0x05
    vm->int_fifo = (item_t *)0; // Нет прерываний;
     a84:	e9 81       	ldd	r30, Y+1	; 0x01
     a86:	fa 81       	ldd	r31, Y+2	; 0x02
     a88:	11 82       	std	Z+1, r1	; 0x01
     a8a:	10 82       	st	Z, r1
    vm->int_enabled = 1;// прерывания разрешены
     a8c:	e9 81       	ldd	r30, Y+1	; 0x01
     a8e:	fa 81       	ldd	r31, Y+2	; 0x02
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	82 83       	std	Z+2, r24	; 0x02
    vm->sp = (stack_t *)sp;
     a94:	e9 81       	ldd	r30, Y+1	; 0x01
     a96:	fa 81       	ldd	r31, Y+2	; 0x02
     a98:	8b 81       	ldd	r24, Y+3	; 0x03
     a9a:	9c 81       	ldd	r25, Y+4	; 0x04
     a9c:	96 83       	std	Z+6, r25	; 0x06
     a9e:	85 83       	std	Z+5, r24	; 0x05
    vm->int_sp = (stack_t *)int_sp;
     aa0:	e9 81       	ldd	r30, Y+1	; 0x01
     aa2:	fa 81       	ldd	r31, Y+2	; 0x02
     aa4:	8d 81       	ldd	r24, Y+5	; 0x05
     aa6:	9e 81       	ldd	r25, Y+6	; 0x06
     aa8:	90 87       	std	Z+8, r25	; 0x08
     aaa:	87 83       	std	Z+7, r24	; 0x07
    vm->int_nest_count = (count_t)0;
     aac:	e9 81       	ldd	r30, Y+1	; 0x01
     aae:	fa 81       	ldd	r31, Y+2	; 0x02
     ab0:	14 82       	std	Z+4, r1	; 0x04
     ab2:	13 82       	std	Z+3, r1	; 0x03
}
     ab4:	26 96       	adiw	r28, 0x06	; 6
     ab6:	0f b6       	in	r0, 0x3f	; 63
     ab8:	f8 94       	cli
     aba:	de bf       	out	0x3e, r29	; 62
     abc:	0f be       	out	0x3f, r0	; 63
     abe:	cd bf       	out	0x3d, r28	; 61
     ac0:	cf 91       	pop	r28
     ac2:	df 91       	pop	r29
     ac4:	08 95       	ret

00000ac6 <vsmp_init>:
void vsmp_init( void )
{
     ac6:	df 93       	push	r29
     ac8:	cf 93       	push	r28
     aca:	00 d0       	rcall	.+0      	; 0xacc <vsmp_init+0x6>
     acc:	00 d0       	rcall	.+0      	; 0xace <vsmp_init+0x8>
     ace:	cd b7       	in	r28, 0x3d	; 61
     ad0:	de b7       	in	r29, 0x3e	; 62
    unsigned short i;
    cli();
     ad2:	f8 94       	cli
    for(i = 0; i < VM_STACK_SIZE; i++ )vm_int_stack[0][i] = 0x55;
     ad4:	1c 82       	std	Y+4, r1	; 0x04
     ad6:	1b 82       	std	Y+3, r1	; 0x03
     ad8:	0c c0       	rjmp	.+24     	; 0xaf2 <vsmp_init+0x2c>
     ada:	8b 81       	ldd	r24, Y+3	; 0x03
     adc:	9c 81       	ldd	r25, Y+4	; 0x04
     ade:	fc 01       	movw	r30, r24
     ae0:	ef 53       	subi	r30, 0x3F	; 63
     ae2:	fe 4f       	sbci	r31, 0xFE	; 254
     ae4:	85 e5       	ldi	r24, 0x55	; 85
     ae6:	80 83       	st	Z, r24
     ae8:	8b 81       	ldd	r24, Y+3	; 0x03
     aea:	9c 81       	ldd	r25, Y+4	; 0x04
     aec:	01 96       	adiw	r24, 0x01	; 1
     aee:	9c 83       	std	Y+4, r25	; 0x04
     af0:	8b 83       	std	Y+3, r24	; 0x03
     af2:	8b 81       	ldd	r24, Y+3	; 0x03
     af4:	9c 81       	ldd	r25, Y+4	; 0x04
     af6:	80 38       	cpi	r24, 0x80	; 128
     af8:	91 05       	cpc	r25, r1
     afa:	78 f3       	brcs	.-34     	; 0xada <vsmp_init+0x14>
    vsmp_vm_init( &vm_state[0], (stack_t *)0 , &vm_int_stack[0][VM_INT_STACK_SIZE-1] );
     afc:	81 ec       	ldi	r24, 0xC1	; 193
     afe:	91 e0       	ldi	r25, 0x01	; 1
     b00:	9c 01       	movw	r18, r24
     b02:	21 58       	subi	r18, 0x81	; 129
     b04:	3f 4f       	sbci	r19, 0xFF	; 255
     b06:	8f e0       	ldi	r24, 0x0F	; 15
     b08:	91 e0       	ldi	r25, 0x01	; 1
     b0a:	60 e0       	ldi	r22, 0x00	; 0
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	a9 01       	movw	r20, r18
     b10:	0e 94 35 05 	call	0xa6a	; 0xa6a <vsmp_vm_init>
    for( current_vm = 1; current_vm < MAX_CORES; current_vm++ )
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	80 93 0e 01 	sts	0x010E, r24
     b1a:	74 c0       	rjmp	.+232    	; 0xc04 <vsmp_init+0x13e>
    {
        stack_t * vm_sp;
        for(i = 0; i < VM_STACK_SIZE; i++ )
     b1c:	1c 82       	std	Y+4, r1	; 0x04
     b1e:	1b 82       	std	Y+3, r1	; 0x03
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <vsmp_init+0xb0>
        {
            vm_stack[current_vm - 1][i] = 0x55;
     b22:	80 91 0e 01 	lds	r24, 0x010E
     b26:	88 2f       	mov	r24, r24
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	01 97       	sbiw	r24, 0x01	; 1
     b2c:	2b 81       	ldd	r18, Y+3	; 0x03
     b2e:	3c 81       	ldd	r19, Y+4	; 0x04
     b30:	96 95       	lsr	r25
     b32:	98 2f       	mov	r25, r24
     b34:	88 27       	eor	r24, r24
     b36:	97 95       	ror	r25
     b38:	87 95       	ror	r24
     b3a:	82 0f       	add	r24, r18
     b3c:	93 1f       	adc	r25, r19
     b3e:	fc 01       	movw	r30, r24
     b40:	ef 5b       	subi	r30, 0xBF	; 191
     b42:	fe 4f       	sbci	r31, 0xFE	; 254
     b44:	85 e5       	ldi	r24, 0x55	; 85
     b46:	80 83       	st	Z, r24
            vm_int_stack[current_vm][i] = 0x55;
     b48:	80 91 0e 01 	lds	r24, 0x010E
     b4c:	88 2f       	mov	r24, r24
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	2b 81       	ldd	r18, Y+3	; 0x03
     b52:	3c 81       	ldd	r19, Y+4	; 0x04
     b54:	96 95       	lsr	r25
     b56:	98 2f       	mov	r25, r24
     b58:	88 27       	eor	r24, r24
     b5a:	97 95       	ror	r25
     b5c:	87 95       	ror	r24
     b5e:	82 0f       	add	r24, r18
     b60:	93 1f       	adc	r25, r19
     b62:	fc 01       	movw	r30, r24
     b64:	ef 53       	subi	r30, 0x3F	; 63
     b66:	fe 4f       	sbci	r31, 0xFE	; 254
     b68:	85 e5       	ldi	r24, 0x55	; 85
     b6a:	80 83       	st	Z, r24
    for(i = 0; i < VM_STACK_SIZE; i++ )vm_int_stack[0][i] = 0x55;
    vsmp_vm_init( &vm_state[0], (stack_t *)0 , &vm_int_stack[0][VM_INT_STACK_SIZE-1] );
    for( current_vm = 1; current_vm < MAX_CORES; current_vm++ )
    {
        stack_t * vm_sp;
        for(i = 0; i < VM_STACK_SIZE; i++ )
     b6c:	8b 81       	ldd	r24, Y+3	; 0x03
     b6e:	9c 81       	ldd	r25, Y+4	; 0x04
     b70:	01 96       	adiw	r24, 0x01	; 1
     b72:	9c 83       	std	Y+4, r25	; 0x04
     b74:	8b 83       	std	Y+3, r24	; 0x03
     b76:	8b 81       	ldd	r24, Y+3	; 0x03
     b78:	9c 81       	ldd	r25, Y+4	; 0x04
     b7a:	80 38       	cpi	r24, 0x80	; 128
     b7c:	91 05       	cpc	r25, r1
     b7e:	88 f2       	brcs	.-94     	; 0xb22 <vsmp_init+0x5c>
        {
            vm_stack[current_vm - 1][i] = 0x55;
            vm_int_stack[current_vm][i] = 0x55;
        }
        vm_sp = proc_stack_init( &vm_stack[current_vm - 1][VM_STACK_SIZE - 1], (code_t)vsmp_idle_main, (void *)0 );
     b80:	80 91 0e 01 	lds	r24, 0x010E
     b84:	88 2f       	mov	r24, r24
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	01 97       	sbiw	r24, 0x01	; 1
     b8a:	96 95       	lsr	r25
     b8c:	98 2f       	mov	r25, r24
     b8e:	88 27       	eor	r24, r24
     b90:	97 95       	ror	r25
     b92:	87 95       	ror	r24
     b94:	81 58       	subi	r24, 0x81	; 129
     b96:	9f 4f       	sbci	r25, 0xFF	; 255
     b98:	8f 5b       	subi	r24, 0xBF	; 191
     b9a:	9e 4f       	sbci	r25, 0xFE	; 254
     b9c:	28 e1       	ldi	r18, 0x18	; 24
     b9e:	36 e0       	ldi	r19, 0x06	; 6
     ba0:	b9 01       	movw	r22, r18
     ba2:	40 e0       	ldi	r20, 0x00	; 0
     ba4:	50 e0       	ldi	r21, 0x00	; 0
     ba6:	0e 94 32 0a 	call	0x1464	; 0x1464 <proc_stack_init>
     baa:	9a 83       	std	Y+2, r25	; 0x02
     bac:	89 83       	std	Y+1, r24	; 0x01
        vsmp_vm_init( &vm_state[current_vm], (stack_t *)vm_sp, &vm_int_stack[current_vm][VM_INT_STACK_SIZE-1] );
     bae:	80 91 0e 01 	lds	r24, 0x010E
     bb2:	28 2f       	mov	r18, r24
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	c9 01       	movw	r24, r18
     bb8:	88 0f       	add	r24, r24
     bba:	99 1f       	adc	r25, r25
     bbc:	88 0f       	add	r24, r24
     bbe:	99 1f       	adc	r25, r25
     bc0:	88 0f       	add	r24, r24
     bc2:	99 1f       	adc	r25, r25
     bc4:	82 0f       	add	r24, r18
     bc6:	93 1f       	adc	r25, r19
     bc8:	bc 01       	movw	r22, r24
     bca:	61 5f       	subi	r22, 0xF1	; 241
     bcc:	7e 4f       	sbci	r23, 0xFE	; 254
     bce:	21 ec       	ldi	r18, 0xC1	; 193
     bd0:	31 e0       	ldi	r19, 0x01	; 1
     bd2:	80 91 0e 01 	lds	r24, 0x010E
     bd6:	88 2f       	mov	r24, r24
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	96 95       	lsr	r25
     bdc:	98 2f       	mov	r25, r24
     bde:	88 27       	eor	r24, r24
     be0:	97 95       	ror	r25
     be2:	87 95       	ror	r24
     be4:	81 58       	subi	r24, 0x81	; 129
     be6:	9f 4f       	sbci	r25, 0xFF	; 255
     be8:	a9 01       	movw	r20, r18
     bea:	48 0f       	add	r20, r24
     bec:	59 1f       	adc	r21, r25
     bee:	29 81       	ldd	r18, Y+1	; 0x01
     bf0:	3a 81       	ldd	r19, Y+2	; 0x02
     bf2:	cb 01       	movw	r24, r22
     bf4:	b9 01       	movw	r22, r18
     bf6:	0e 94 35 05 	call	0xa6a	; 0xa6a <vsmp_vm_init>
{
    unsigned short i;
    cli();
    for(i = 0; i < VM_STACK_SIZE; i++ )vm_int_stack[0][i] = 0x55;
    vsmp_vm_init( &vm_state[0], (stack_t *)0 , &vm_int_stack[0][VM_INT_STACK_SIZE-1] );
    for( current_vm = 1; current_vm < MAX_CORES; current_vm++ )
     bfa:	80 91 0e 01 	lds	r24, 0x010E
     bfe:	8f 5f       	subi	r24, 0xFF	; 255
     c00:	80 93 0e 01 	sts	0x010E, r24
     c04:	80 91 0e 01 	lds	r24, 0x010E
     c08:	82 30       	cpi	r24, 0x02	; 2
     c0a:	08 f4       	brcc	.+2      	; 0xc0e <vsmp_init+0x148>
     c0c:	87 cf       	rjmp	.-242    	; 0xb1c <vsmp_init+0x56>
            vm_int_stack[current_vm][i] = 0x55;
        }
        vm_sp = proc_stack_init( &vm_stack[current_vm - 1][VM_STACK_SIZE - 1], (code_t)vsmp_idle_main, (void *)0 );
        vsmp_vm_init( &vm_state[current_vm], (stack_t *)vm_sp, &vm_int_stack[current_vm][VM_INT_STACK_SIZE-1] );
    }
    current_vm = 0;
     c0e:	10 92 0e 01 	sts	0x010E, r1
}
     c12:	0f 90       	pop	r0
     c14:	0f 90       	pop	r0
     c16:	0f 90       	pop	r0
     c18:	0f 90       	pop	r0
     c1a:	cf 91       	pop	r28
     c1c:	df 91       	pop	r29
     c1e:	08 95       	ret

00000c20 <vsmp_run>:

void vsmp_run( void )
{
     c20:	df 93       	push	r29
     c22:	cf 93       	push	r28
     c24:	cd b7       	in	r28, 0x3d	; 61
     c26:	de b7       	in	r29, 0x3e	; 62
    sei();
     c28:	78 94       	sei
}
     c2a:	cf 91       	pop	r28
     c2c:	df 91       	pop	r29
     c2e:	08 95       	ret

00000c30 <vsmp_idle_main>:
void vsmp_idle_main( void * arg )
{
     c30:	df 93       	push	r29
     c32:	cf 93       	push	r28
     c34:	00 d0       	rcall	.+0      	; 0xc36 <vsmp_idle_main+0x6>
     c36:	cd b7       	in	r28, 0x3d	; 61
     c38:	de b7       	in	r29, 0x3e	; 62
     c3a:	9a 83       	std	Y+2, r25	; 0x02
     c3c:	89 83       	std	Y+1, r24	; 0x01
     c3e:	ff cf       	rjmp	.-2      	; 0xc3e <vsmp_idle_main+0xe>

00000c40 <vsmp_do_interrupt>:
    while(1);
}

bool_t vsmp_do_interrupt(void)
{
     c40:	df 93       	push	r29
     c42:	cf 93       	push	r28
     c44:	0f 92       	push	r0
     c46:	cd b7       	in	r28, 0x3d	; 61
     c48:	de b7       	in	r29, 0x3e	; 62
    // if current vm is interruptible and there are some interrupts in fifo,
    if( (vm_state[current_vm].int_enabled) && (vm_state[current_vm].int_fifo) )
     c4a:	80 91 0e 01 	lds	r24, 0x010E
     c4e:	28 2f       	mov	r18, r24
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	c9 01       	movw	r24, r18
     c54:	88 0f       	add	r24, r24
     c56:	99 1f       	adc	r25, r25
     c58:	88 0f       	add	r24, r24
     c5a:	99 1f       	adc	r25, r25
     c5c:	88 0f       	add	r24, r24
     c5e:	99 1f       	adc	r25, r25
     c60:	82 0f       	add	r24, r18
     c62:	93 1f       	adc	r25, r19
     c64:	fc 01       	movw	r30, r24
     c66:	ef 5e       	subi	r30, 0xEF	; 239
     c68:	fe 4f       	sbci	r31, 0xFE	; 254
     c6a:	80 81       	ld	r24, Z
     c6c:	88 23       	and	r24, r24
     c6e:	09 f4       	brne	.+2      	; 0xc72 <vsmp_do_interrupt+0x32>
     c70:	79 c0       	rjmp	.+242    	; 0xd64 <vsmp_do_interrupt+0x124>
     c72:	80 91 0e 01 	lds	r24, 0x010E
     c76:	28 2f       	mov	r18, r24
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	c9 01       	movw	r24, r18
     c7c:	88 0f       	add	r24, r24
     c7e:	99 1f       	adc	r25, r25
     c80:	88 0f       	add	r24, r24
     c82:	99 1f       	adc	r25, r25
     c84:	88 0f       	add	r24, r24
     c86:	99 1f       	adc	r25, r25
     c88:	82 0f       	add	r24, r18
     c8a:	93 1f       	adc	r25, r19
     c8c:	fc 01       	movw	r30, r24
     c8e:	e1 5f       	subi	r30, 0xF1	; 241
     c90:	fe 4f       	sbci	r31, 0xFE	; 254
     c92:	80 81       	ld	r24, Z
     c94:	91 81       	ldd	r25, Z+1	; 0x01
     c96:	00 97       	sbiw	r24, 0x00	; 0
     c98:	09 f4       	brne	.+2      	; 0xc9c <vsmp_do_interrupt+0x5c>
     c9a:	64 c0       	rjmp	.+200    	; 0xd64 <vsmp_do_interrupt+0x124>
    {
        // cut head interrupt,
        vm_buf = (void *)vm_state[current_vm].int_fifo;
     c9c:	80 91 0e 01 	lds	r24, 0x010E
     ca0:	28 2f       	mov	r18, r24
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	c9 01       	movw	r24, r18
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	88 0f       	add	r24, r24
     cac:	99 1f       	adc	r25, r25
     cae:	88 0f       	add	r24, r24
     cb0:	99 1f       	adc	r25, r25
     cb2:	82 0f       	add	r24, r18
     cb4:	93 1f       	adc	r25, r19
     cb6:	fc 01       	movw	r30, r24
     cb8:	e1 5f       	subi	r30, 0xF1	; 241
     cba:	fe 4f       	sbci	r31, 0xFE	; 254
     cbc:	80 81       	ld	r24, Z
     cbe:	91 81       	ldd	r25, Z+1	; 0x01
     cc0:	90 93 40 01 	sts	0x0140, r25
     cc4:	80 93 3f 01 	sts	0x013F, r24
        if( vm_buf == (void *)((item_t *)vm_buf)->next )
     cc8:	80 91 3f 01 	lds	r24, 0x013F
     ccc:	90 91 40 01 	lds	r25, 0x0140
     cd0:	fc 01       	movw	r30, r24
     cd2:	20 81       	ld	r18, Z
     cd4:	31 81       	ldd	r19, Z+1	; 0x01
     cd6:	80 91 3f 01 	lds	r24, 0x013F
     cda:	90 91 40 01 	lds	r25, 0x0140
     cde:	28 17       	cp	r18, r24
     ce0:	39 07       	cpc	r19, r25
     ce2:	99 f4       	brne	.+38     	; 0xd0a <vsmp_do_interrupt+0xca>
        {
            /* only one interrupt in fifo */
            vm_state[current_vm].int_fifo = (item_t *)0;
     ce4:	80 91 0e 01 	lds	r24, 0x010E
     ce8:	28 2f       	mov	r18, r24
     cea:	30 e0       	ldi	r19, 0x00	; 0
     cec:	c9 01       	movw	r24, r18
     cee:	88 0f       	add	r24, r24
     cf0:	99 1f       	adc	r25, r25
     cf2:	88 0f       	add	r24, r24
     cf4:	99 1f       	adc	r25, r25
     cf6:	88 0f       	add	r24, r24
     cf8:	99 1f       	adc	r25, r25
     cfa:	82 0f       	add	r24, r18
     cfc:	93 1f       	adc	r25, r19
     cfe:	fc 01       	movw	r30, r24
     d00:	e1 5f       	subi	r30, 0xF1	; 241
     d02:	fe 4f       	sbci	r31, 0xFE	; 254
     d04:	11 82       	std	Z+1, r1	; 0x01
     d06:	10 82       	st	Z, r1
     d08:	1f c0       	rjmp	.+62     	; 0xd48 <vsmp_do_interrupt+0x108>
        }
        else
        {
            /* many interrupts in fifo */
            vm_state[current_vm].int_fifo = (void *)((item_t *)vm_buf)->next;
     d0a:	80 91 0e 01 	lds	r24, 0x010E
     d0e:	28 2f       	mov	r18, r24
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	80 91 3f 01 	lds	r24, 0x013F
     d16:	90 91 40 01 	lds	r25, 0x0140
     d1a:	fc 01       	movw	r30, r24
     d1c:	40 81       	ld	r20, Z
     d1e:	51 81       	ldd	r21, Z+1	; 0x01
     d20:	c9 01       	movw	r24, r18
     d22:	88 0f       	add	r24, r24
     d24:	99 1f       	adc	r25, r25
     d26:	88 0f       	add	r24, r24
     d28:	99 1f       	adc	r25, r25
     d2a:	88 0f       	add	r24, r24
     d2c:	99 1f       	adc	r25, r25
     d2e:	82 0f       	add	r24, r18
     d30:	93 1f       	adc	r25, r19
     d32:	fc 01       	movw	r30, r24
     d34:	e1 5f       	subi	r30, 0xF1	; 241
     d36:	fe 4f       	sbci	r31, 0xFE	; 254
     d38:	51 83       	std	Z+1, r21	; 0x01
     d3a:	40 83       	st	Z, r20
            item_cut( (item_t *)vm_buf );
     d3c:	80 91 3f 01 	lds	r24, 0x013F
     d40:	90 91 40 01 	lds	r25, 0x0140
     d44:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <item_cut>
        }
        // write its isr pointer to vm_buf,
        vm_buf = (void *)(((vinterrupt_t *)vm_buf)->isr);
     d48:	80 91 3f 01 	lds	r24, 0x013F
     d4c:	90 91 40 01 	lds	r25, 0x0140
     d50:	fc 01       	movw	r30, r24
     d52:	84 81       	ldd	r24, Z+4	; 0x04
     d54:	95 81       	ldd	r25, Z+5	; 0x05
     d56:	90 93 40 01 	sts	0x0140, r25
     d5a:	80 93 3f 01 	sts	0x013F, r24
        // and return 1;
        return (bool_t)1;
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	89 83       	std	Y+1, r24	; 0x01
     d62:	01 c0       	rjmp	.+2      	; 0xd66 <vsmp_do_interrupt+0x126>
    }
    // else return 0.
    return (bool_t)0;
     d64:	19 82       	std	Y+1, r1	; 0x01
     d66:	89 81       	ldd	r24, Y+1	; 0x01
}
     d68:	0f 90       	pop	r0
     d6a:	cf 91       	pop	r28
     d6c:	df 91       	pop	r29
     d6e:	08 95       	ret

00000d70 <_vinterrupt_wrapper>:
                       Virtual interrupts wrapper functions.
    Local variable is used to call virtual ISR, so wrapper must have two parts.
*/
// Nested part, uses local variables, so compiler generated prologue and epilogue are needed.
static void _vinterrupt_wrapper(void)
{
     d70:	df 93       	push	r29
     d72:	cf 93       	push	r28
     d74:	00 d0       	rcall	.+0      	; 0xd76 <_vinterrupt_wrapper+0x6>
     d76:	cd b7       	in	r28, 0x3d	; 61
     d78:	de b7       	in	r29, 0x3e	; 62
    void (*isr)(void);
    vm_state[current_vm].int_enabled = (bool_t)0; // Virtual interrupt nesting is not alowed by default.
     d7a:	80 91 0e 01 	lds	r24, 0x010E
     d7e:	28 2f       	mov	r18, r24
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	c9 01       	movw	r24, r18
     d84:	88 0f       	add	r24, r24
     d86:	99 1f       	adc	r25, r25
     d88:	88 0f       	add	r24, r24
     d8a:	99 1f       	adc	r25, r25
     d8c:	88 0f       	add	r24, r24
     d8e:	99 1f       	adc	r25, r25
     d90:	82 0f       	add	r24, r18
     d92:	93 1f       	adc	r25, r19
     d94:	fc 01       	movw	r30, r24
     d96:	ef 5e       	subi	r30, 0xEF	; 239
     d98:	fe 4f       	sbci	r31, 0xFE	; 254
     d9a:	10 82       	st	Z, r1
    isr = (void (*)(void))vm_buf;
     d9c:	80 91 3f 01 	lds	r24, 0x013F
     da0:	90 91 40 01 	lds	r25, 0x0140
     da4:	9a 83       	std	Y+2, r25	; 0x02
     da6:	89 83       	std	Y+1, r24	; 0x01
    // After vm-buf read we can reenable real interrupts!
    sei();
     da8:	78 94       	sei
    isr();
     daa:	e9 81       	ldd	r30, Y+1	; 0x01
     dac:	fa 81       	ldd	r31, Y+2	; 0x02
     dae:	09 95       	icall
}
     db0:	0f 90       	pop	r0
     db2:	0f 90       	pop	r0
     db4:	cf 91       	pop	r28
     db6:	df 91       	pop	r29
     db8:	08 95       	ret

00000dba <vinterrupt_wrapper>:
// Nesting part, no prologue and hand made epilogue.
__attribute__ (( naked )) void vinterrupt_wrapper(void)
{
    _vinterrupt_wrapper();
     dba:	0e 94 b8 06 	call	0xd70	; 0xd70 <_vinterrupt_wrapper>
    cli();
     dbe:	f8 94       	cli
    // Virtual interrupts are enabled after interrupt processing.
    vm_state[current_vm].int_enabled = (bool_t)1;
     dc0:	80 91 0e 01 	lds	r24, 0x010E
     dc4:	28 2f       	mov	r18, r24
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	c9 01       	movw	r24, r18
     dca:	88 0f       	add	r24, r24
     dcc:	99 1f       	adc	r25, r25
     dce:	88 0f       	add	r24, r24
     dd0:	99 1f       	adc	r25, r25
     dd2:	88 0f       	add	r24, r24
     dd4:	99 1f       	adc	r25, r25
     dd6:	82 0f       	add	r24, r18
     dd8:	93 1f       	adc	r25, r19
     dda:	fc 01       	movw	r30, r24
     ddc:	ef 5e       	subi	r30, 0xEF	; 239
     dde:	fe 4f       	sbci	r31, 0xFE	; 254
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	80 83       	st	Z, r24
    }
    bugurt_set_stack_pointer( vm_state[current_vm].int_sp );
}
__MACRO_FUNCTION__( _vsmp_interrupt_epilogue )
{
    if( vsmp_do_interrupt() ) goto chained_vinterrupt_return;
     de4:	0e 94 20 06 	call	0xc40	; 0xc40 <vsmp_do_interrupt>
     de8:	88 23       	and	r24, r24
     dea:	09 f0       	breq	.+2      	; 0xdee <vinterrupt_wrapper+0x34>
     dec:	6c c0       	rjmp	.+216    	; 0xec6 <vinterrupt_wrapper+0x10c>

    if( --vm_state[current_vm].int_nest_count )goto nesting_vinterrupt_return;
     dee:	80 91 0e 01 	lds	r24, 0x010E
     df2:	28 2f       	mov	r18, r24
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	c9 01       	movw	r24, r18
     df8:	88 0f       	add	r24, r24
     dfa:	99 1f       	adc	r25, r25
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	88 0f       	add	r24, r24
     e02:	99 1f       	adc	r25, r25
     e04:	82 0f       	add	r24, r18
     e06:	93 1f       	adc	r25, r19
     e08:	fc 01       	movw	r30, r24
     e0a:	ee 5e       	subi	r30, 0xEE	; 238
     e0c:	fe 4f       	sbci	r31, 0xFE	; 254
     e0e:	80 81       	ld	r24, Z
     e10:	91 81       	ldd	r25, Z+1	; 0x01
     e12:	ac 01       	movw	r20, r24
     e14:	41 50       	subi	r20, 0x01	; 1
     e16:	50 40       	sbci	r21, 0x00	; 0
     e18:	c9 01       	movw	r24, r18
     e1a:	88 0f       	add	r24, r24
     e1c:	99 1f       	adc	r25, r25
     e1e:	88 0f       	add	r24, r24
     e20:	99 1f       	adc	r25, r25
     e22:	88 0f       	add	r24, r24
     e24:	99 1f       	adc	r25, r25
     e26:	82 0f       	add	r24, r18
     e28:	93 1f       	adc	r25, r19
     e2a:	fc 01       	movw	r30, r24
     e2c:	ee 5e       	subi	r30, 0xEE	; 238
     e2e:	fe 4f       	sbci	r31, 0xFE	; 254
     e30:	51 83       	std	Z+1, r21	; 0x01
     e32:	40 83       	st	Z, r20
     e34:	c9 01       	movw	r24, r18
     e36:	88 0f       	add	r24, r24
     e38:	99 1f       	adc	r25, r25
     e3a:	88 0f       	add	r24, r24
     e3c:	99 1f       	adc	r25, r25
     e3e:	88 0f       	add	r24, r24
     e40:	99 1f       	adc	r25, r25
     e42:	82 0f       	add	r24, r18
     e44:	93 1f       	adc	r25, r19
     e46:	fc 01       	movw	r30, r24
     e48:	ee 5e       	subi	r30, 0xEE	; 238
     e4a:	fe 4f       	sbci	r31, 0xFE	; 254
     e4c:	80 81       	ld	r24, Z
     e4e:	91 81       	ldd	r25, Z+1	; 0x01
     e50:	00 97       	sbiw	r24, 0x00	; 0
     e52:	b1 f5       	brne	.+108    	; 0xec0 <vinterrupt_wrapper+0x106>

    vm_state[current_vm].int_sp = &vm_int_stack[current_vm][VM_INT_STACK_SIZE-1];
     e54:	80 91 0e 01 	lds	r24, 0x010E
     e58:	48 2f       	mov	r20, r24
     e5a:	50 e0       	ldi	r21, 0x00	; 0
     e5c:	21 ec       	ldi	r18, 0xC1	; 193
     e5e:	31 e0       	ldi	r19, 0x01	; 1
     e60:	80 91 0e 01 	lds	r24, 0x010E
     e64:	88 2f       	mov	r24, r24
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	96 95       	lsr	r25
     e6a:	98 2f       	mov	r25, r24
     e6c:	88 27       	eor	r24, r24
     e6e:	97 95       	ror	r25
     e70:	87 95       	ror	r24
     e72:	81 58       	subi	r24, 0x81	; 129
     e74:	9f 4f       	sbci	r25, 0xFF	; 255
     e76:	28 0f       	add	r18, r24
     e78:	39 1f       	adc	r19, r25
     e7a:	ca 01       	movw	r24, r20
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	88 0f       	add	r24, r24
     e82:	99 1f       	adc	r25, r25
     e84:	88 0f       	add	r24, r24
     e86:	99 1f       	adc	r25, r25
     e88:	84 0f       	add	r24, r20
     e8a:	95 1f       	adc	r25, r21
     e8c:	fc 01       	movw	r30, r24
     e8e:	ea 5e       	subi	r30, 0xEA	; 234
     e90:	fe 4f       	sbci	r31, 0xFE	; 254
     e92:	31 83       	std	Z+1, r19	; 0x01
     e94:	20 83       	st	Z, r18
    bugurt_restore_context( vm_state[current_vm].sp ); // Will return to current vm operation!
     e96:	80 91 0e 01 	lds	r24, 0x010E
     e9a:	28 2f       	mov	r18, r24
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	c9 01       	movw	r24, r18
     ea0:	88 0f       	add	r24, r24
     ea2:	99 1f       	adc	r25, r25
     ea4:	88 0f       	add	r24, r24
     ea6:	99 1f       	adc	r25, r25
     ea8:	88 0f       	add	r24, r24
     eaa:	99 1f       	adc	r25, r25
     eac:	82 0f       	add	r24, r18
     eae:	93 1f       	adc	r25, r19
     eb0:	fc 01       	movw	r30, r24
     eb2:	ec 5e       	subi	r30, 0xEC	; 236
     eb4:	fe 4f       	sbci	r31, 0xFE	; 254
     eb6:	80 81       	ld	r24, Z
     eb8:	91 81       	ldd	r25, Z+1	; 0x01
     eba:	0e 94 9a 00 	call	0x134	; 0x134 <bugurt_restore_context>
    __asm__ __volatile__("reti"::);
     ebe:	18 95       	reti

nesting_vinterrupt_return:

    bugurt_pop_context(); //Will return to nesting virtual interrupt!
     ec0:	0e 94 97 00 	call	0x12e	; 0x12e <bugurt_pop_context>
    __asm__ __volatile__("reti"::);
     ec4:	18 95       	reti

chained_vinterrupt_return:
    bugurt_push_pointer( (void *)vinterrupt_wrapper ); // Will return to vinterrupt_wrapper() entry point!
     ec6:	8d ed       	ldi	r24, 0xDD	; 221
     ec8:	96 e0       	ldi	r25, 0x06	; 6
     eca:	0e 94 cd 00 	call	0x19a	; 0x19a <bugurt_push_pointer>
    __asm__ __volatile__("ret"::);
     ece:	08 95       	ret

00000ed0 <__vector_7>:
}

/* Virtual interrupt prologue and epilogue inline functions (I can,t debug macros !) */
__MACRO_FUNCTION__( _vsmp_interrupt_prologue )
{
    vm_buf = (void *)bugurt_save_context();
     ed0:	0e 94 6b 00 	call	0xd6	; 0xd6 <bugurt_save_context>
     ed4:	90 93 40 01 	sts	0x0140, r25
     ed8:	80 93 3f 01 	sts	0x013F, r24
    if( vm_state[current_vm].int_nest_count )
     edc:	80 91 0e 01 	lds	r24, 0x010E
     ee0:	28 2f       	mov	r18, r24
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	c9 01       	movw	r24, r18
     ee6:	88 0f       	add	r24, r24
     ee8:	99 1f       	adc	r25, r25
     eea:	88 0f       	add	r24, r24
     eec:	99 1f       	adc	r25, r25
     eee:	88 0f       	add	r24, r24
     ef0:	99 1f       	adc	r25, r25
     ef2:	82 0f       	add	r24, r18
     ef4:	93 1f       	adc	r25, r19
     ef6:	fc 01       	movw	r30, r24
     ef8:	ee 5e       	subi	r30, 0xEE	; 238
     efa:	fe 4f       	sbci	r31, 0xFE	; 254
     efc:	80 81       	ld	r24, Z
     efe:	91 81       	ldd	r25, Z+1	; 0x01
     f00:	00 97       	sbiw	r24, 0x00	; 0
     f02:	c1 f0       	breq	.+48     	; 0xf34 <__vector_7+0x64>
    {
        vm_state[current_vm].int_sp = (stack_t *)vm_buf;
     f04:	80 91 0e 01 	lds	r24, 0x010E
     f08:	28 2f       	mov	r18, r24
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	80 91 3f 01 	lds	r24, 0x013F
     f10:	90 91 40 01 	lds	r25, 0x0140
     f14:	ac 01       	movw	r20, r24
     f16:	c9 01       	movw	r24, r18
     f18:	88 0f       	add	r24, r24
     f1a:	99 1f       	adc	r25, r25
     f1c:	88 0f       	add	r24, r24
     f1e:	99 1f       	adc	r25, r25
     f20:	88 0f       	add	r24, r24
     f22:	99 1f       	adc	r25, r25
     f24:	82 0f       	add	r24, r18
     f26:	93 1f       	adc	r25, r19
     f28:	fc 01       	movw	r30, r24
     f2a:	ea 5e       	subi	r30, 0xEA	; 234
     f2c:	fe 4f       	sbci	r31, 0xFE	; 254
     f2e:	51 83       	std	Z+1, r21	; 0x01
     f30:	40 83       	st	Z, r20
     f32:	17 c0       	rjmp	.+46     	; 0xf62 <__vector_7+0x92>
    }
    else
    {
        vm_state[current_vm].sp = (stack_t *)vm_buf;
     f34:	80 91 0e 01 	lds	r24, 0x010E
     f38:	28 2f       	mov	r18, r24
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	80 91 3f 01 	lds	r24, 0x013F
     f40:	90 91 40 01 	lds	r25, 0x0140
     f44:	ac 01       	movw	r20, r24
     f46:	c9 01       	movw	r24, r18
     f48:	88 0f       	add	r24, r24
     f4a:	99 1f       	adc	r25, r25
     f4c:	88 0f       	add	r24, r24
     f4e:	99 1f       	adc	r25, r25
     f50:	88 0f       	add	r24, r24
     f52:	99 1f       	adc	r25, r25
     f54:	82 0f       	add	r24, r18
     f56:	93 1f       	adc	r25, r19
     f58:	fc 01       	movw	r30, r24
     f5a:	ec 5e       	subi	r30, 0xEC	; 236
     f5c:	fe 4f       	sbci	r31, 0xFE	; 254
     f5e:	51 83       	std	Z+1, r21	; 0x01
     f60:	40 83       	st	Z, r20
    }
    bugurt_set_stack_pointer( vm_state[current_vm].int_sp );
     f62:	80 91 0e 01 	lds	r24, 0x010E
     f66:	28 2f       	mov	r18, r24
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	c9 01       	movw	r24, r18
     f6c:	88 0f       	add	r24, r24
     f6e:	99 1f       	adc	r25, r25
     f70:	88 0f       	add	r24, r24
     f72:	99 1f       	adc	r25, r25
     f74:	88 0f       	add	r24, r24
     f76:	99 1f       	adc	r25, r25
     f78:	82 0f       	add	r24, r18
     f7a:	93 1f       	adc	r25, r19
     f7c:	fc 01       	movw	r30, r24
     f7e:	ea 5e       	subi	r30, 0xEA	; 234
     f80:	fe 4f       	sbci	r31, 0xFE	; 254
     f82:	80 81       	ld	r24, Z
     f84:	91 81       	ldd	r25, Z+1	; 0x01
     f86:	0e 94 c5 00 	call	0x18a	; 0x18a <bugurt_set_stack_pointer>
__attribute__ (( signal, naked )) void SYSTEM_TIMER_ISR(void);
void SYSTEM_TIMER_ISR(void)
{
    _vsmp_interrupt_prologue();

    current_vm++;
     f8a:	80 91 0e 01 	lds	r24, 0x010E
     f8e:	8f 5f       	subi	r24, 0xFF	; 255
     f90:	80 93 0e 01 	sts	0x010E, r24
    if(current_vm >= MAX_CORES)current_vm = (core_id_t)0;
     f94:	80 91 0e 01 	lds	r24, 0x010E
     f98:	82 30       	cpi	r24, 0x02	; 2
     f9a:	10 f0       	brcs	.+4      	; 0xfa0 <__vector_7+0xd0>
     f9c:	10 92 0e 01 	sts	0x010E, r1

    if(vsmp_systimer_hook)
     fa0:	80 91 c1 02 	lds	r24, 0x02C1
     fa4:	90 91 c2 02 	lds	r25, 0x02C2
     fa8:	00 97       	sbiw	r24, 0x00	; 0
     faa:	29 f0       	breq	.+10     	; 0xfb6 <__vector_7+0xe6>
    {
        vsmp_systimer_hook();
     fac:	e0 91 c1 02 	lds	r30, 0x02C1
     fb0:	f0 91 c2 02 	lds	r31, 0x02C2
     fb4:	09 95       	icall
    }

    vm_state[current_vm].int_nest_count++;
     fb6:	80 91 0e 01 	lds	r24, 0x010E
     fba:	28 2f       	mov	r18, r24
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	c9 01       	movw	r24, r18
     fc0:	88 0f       	add	r24, r24
     fc2:	99 1f       	adc	r25, r25
     fc4:	88 0f       	add	r24, r24
     fc6:	99 1f       	adc	r25, r25
     fc8:	88 0f       	add	r24, r24
     fca:	99 1f       	adc	r25, r25
     fcc:	82 0f       	add	r24, r18
     fce:	93 1f       	adc	r25, r19
     fd0:	fc 01       	movw	r30, r24
     fd2:	ee 5e       	subi	r30, 0xEE	; 238
     fd4:	fe 4f       	sbci	r31, 0xFE	; 254
     fd6:	80 81       	ld	r24, Z
     fd8:	91 81       	ldd	r25, Z+1	; 0x01
     fda:	ac 01       	movw	r20, r24
     fdc:	4f 5f       	subi	r20, 0xFF	; 255
     fde:	5f 4f       	sbci	r21, 0xFF	; 255
     fe0:	c9 01       	movw	r24, r18
     fe2:	88 0f       	add	r24, r24
     fe4:	99 1f       	adc	r25, r25
     fe6:	88 0f       	add	r24, r24
     fe8:	99 1f       	adc	r25, r25
     fea:	88 0f       	add	r24, r24
     fec:	99 1f       	adc	r25, r25
     fee:	82 0f       	add	r24, r18
     ff0:	93 1f       	adc	r25, r19
     ff2:	fc 01       	movw	r30, r24
     ff4:	ee 5e       	subi	r30, 0xEE	; 238
     ff6:	fe 4f       	sbci	r31, 0xFE	; 254
     ff8:	51 83       	std	Z+1, r21	; 0x01
     ffa:	40 83       	st	Z, r20
    bugurt_set_stack_pointer( vm_state[current_vm].int_sp );
     ffc:	80 91 0e 01 	lds	r24, 0x010E
    1000:	28 2f       	mov	r18, r24
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	c9 01       	movw	r24, r18
    1006:	88 0f       	add	r24, r24
    1008:	99 1f       	adc	r25, r25
    100a:	88 0f       	add	r24, r24
    100c:	99 1f       	adc	r25, r25
    100e:	88 0f       	add	r24, r24
    1010:	99 1f       	adc	r25, r25
    1012:	82 0f       	add	r24, r18
    1014:	93 1f       	adc	r25, r19
    1016:	fc 01       	movw	r30, r24
    1018:	ea 5e       	subi	r30, 0xEA	; 234
    101a:	fe 4f       	sbci	r31, 0xFE	; 254
    101c:	80 81       	ld	r24, Z
    101e:	91 81       	ldd	r25, Z+1	; 0x01
    1020:	0e 94 c5 00 	call	0x18a	; 0x18a <bugurt_set_stack_pointer>
    }
    bugurt_set_stack_pointer( vm_state[current_vm].int_sp );
}
__MACRO_FUNCTION__( _vsmp_interrupt_epilogue )
{
    if( vsmp_do_interrupt() ) goto chained_vinterrupt_return;
    1024:	0e 94 20 06 	call	0xc40	; 0xc40 <vsmp_do_interrupt>
    1028:	88 23       	and	r24, r24
    102a:	09 f0       	breq	.+2      	; 0x102e <__vector_7+0x15e>
    102c:	6c c0       	rjmp	.+216    	; 0x1106 <__vector_7+0x236>

    if( --vm_state[current_vm].int_nest_count )goto nesting_vinterrupt_return;
    102e:	80 91 0e 01 	lds	r24, 0x010E
    1032:	28 2f       	mov	r18, r24
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	c9 01       	movw	r24, r18
    1038:	88 0f       	add	r24, r24
    103a:	99 1f       	adc	r25, r25
    103c:	88 0f       	add	r24, r24
    103e:	99 1f       	adc	r25, r25
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	82 0f       	add	r24, r18
    1046:	93 1f       	adc	r25, r19
    1048:	fc 01       	movw	r30, r24
    104a:	ee 5e       	subi	r30, 0xEE	; 238
    104c:	fe 4f       	sbci	r31, 0xFE	; 254
    104e:	80 81       	ld	r24, Z
    1050:	91 81       	ldd	r25, Z+1	; 0x01
    1052:	ac 01       	movw	r20, r24
    1054:	41 50       	subi	r20, 0x01	; 1
    1056:	50 40       	sbci	r21, 0x00	; 0
    1058:	c9 01       	movw	r24, r18
    105a:	88 0f       	add	r24, r24
    105c:	99 1f       	adc	r25, r25
    105e:	88 0f       	add	r24, r24
    1060:	99 1f       	adc	r25, r25
    1062:	88 0f       	add	r24, r24
    1064:	99 1f       	adc	r25, r25
    1066:	82 0f       	add	r24, r18
    1068:	93 1f       	adc	r25, r19
    106a:	fc 01       	movw	r30, r24
    106c:	ee 5e       	subi	r30, 0xEE	; 238
    106e:	fe 4f       	sbci	r31, 0xFE	; 254
    1070:	51 83       	std	Z+1, r21	; 0x01
    1072:	40 83       	st	Z, r20
    1074:	c9 01       	movw	r24, r18
    1076:	88 0f       	add	r24, r24
    1078:	99 1f       	adc	r25, r25
    107a:	88 0f       	add	r24, r24
    107c:	99 1f       	adc	r25, r25
    107e:	88 0f       	add	r24, r24
    1080:	99 1f       	adc	r25, r25
    1082:	82 0f       	add	r24, r18
    1084:	93 1f       	adc	r25, r19
    1086:	fc 01       	movw	r30, r24
    1088:	ee 5e       	subi	r30, 0xEE	; 238
    108a:	fe 4f       	sbci	r31, 0xFE	; 254
    108c:	80 81       	ld	r24, Z
    108e:	91 81       	ldd	r25, Z+1	; 0x01
    1090:	00 97       	sbiw	r24, 0x00	; 0
    1092:	b1 f5       	brne	.+108    	; 0x1100 <__vector_7+0x230>

    vm_state[current_vm].int_sp = &vm_int_stack[current_vm][VM_INT_STACK_SIZE-1];
    1094:	80 91 0e 01 	lds	r24, 0x010E
    1098:	48 2f       	mov	r20, r24
    109a:	50 e0       	ldi	r21, 0x00	; 0
    109c:	21 ec       	ldi	r18, 0xC1	; 193
    109e:	31 e0       	ldi	r19, 0x01	; 1
    10a0:	80 91 0e 01 	lds	r24, 0x010E
    10a4:	88 2f       	mov	r24, r24
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	96 95       	lsr	r25
    10aa:	98 2f       	mov	r25, r24
    10ac:	88 27       	eor	r24, r24
    10ae:	97 95       	ror	r25
    10b0:	87 95       	ror	r24
    10b2:	81 58       	subi	r24, 0x81	; 129
    10b4:	9f 4f       	sbci	r25, 0xFF	; 255
    10b6:	28 0f       	add	r18, r24
    10b8:	39 1f       	adc	r19, r25
    10ba:	ca 01       	movw	r24, r20
    10bc:	88 0f       	add	r24, r24
    10be:	99 1f       	adc	r25, r25
    10c0:	88 0f       	add	r24, r24
    10c2:	99 1f       	adc	r25, r25
    10c4:	88 0f       	add	r24, r24
    10c6:	99 1f       	adc	r25, r25
    10c8:	84 0f       	add	r24, r20
    10ca:	95 1f       	adc	r25, r21
    10cc:	fc 01       	movw	r30, r24
    10ce:	ea 5e       	subi	r30, 0xEA	; 234
    10d0:	fe 4f       	sbci	r31, 0xFE	; 254
    10d2:	31 83       	std	Z+1, r19	; 0x01
    10d4:	20 83       	st	Z, r18
    bugurt_restore_context( vm_state[current_vm].sp ); // Will return to current vm operation!
    10d6:	80 91 0e 01 	lds	r24, 0x010E
    10da:	28 2f       	mov	r18, r24
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	c9 01       	movw	r24, r18
    10e0:	88 0f       	add	r24, r24
    10e2:	99 1f       	adc	r25, r25
    10e4:	88 0f       	add	r24, r24
    10e6:	99 1f       	adc	r25, r25
    10e8:	88 0f       	add	r24, r24
    10ea:	99 1f       	adc	r25, r25
    10ec:	82 0f       	add	r24, r18
    10ee:	93 1f       	adc	r25, r19
    10f0:	fc 01       	movw	r30, r24
    10f2:	ec 5e       	subi	r30, 0xEC	; 236
    10f4:	fe 4f       	sbci	r31, 0xFE	; 254
    10f6:	80 81       	ld	r24, Z
    10f8:	91 81       	ldd	r25, Z+1	; 0x01
    10fa:	0e 94 9a 00 	call	0x134	; 0x134 <bugurt_restore_context>
    __asm__ __volatile__("reti"::);
    10fe:	18 95       	reti

nesting_vinterrupt_return:

    bugurt_pop_context(); //Will return to nesting virtual interrupt!
    1100:	0e 94 97 00 	call	0x12e	; 0x12e <bugurt_pop_context>
    __asm__ __volatile__("reti"::);
    1104:	18 95       	reti

chained_vinterrupt_return:
    bugurt_push_pointer( (void *)vinterrupt_wrapper ); // Will return to vinterrupt_wrapper() entry point!
    1106:	8d ed       	ldi	r24, 0xDD	; 221
    1108:	96 e0       	ldi	r25, 0x06	; 6
    110a:	0e 94 cd 00 	call	0x19a	; 0x19a <bugurt_push_pointer>
    __asm__ __volatile__("ret"::);
    110e:	08 95       	ret

00001110 <_vsmp_vinterrupt>:
}

/* Virtual interrupt prologue and epilogue inline functions (I can,t debug macros !) */
__MACRO_FUNCTION__( _vsmp_interrupt_prologue )
{
    vm_buf = (void *)bugurt_save_context();
    1110:	0e 94 6b 00 	call	0xd6	; 0xd6 <bugurt_save_context>
    1114:	90 93 40 01 	sts	0x0140, r25
    1118:	80 93 3f 01 	sts	0x013F, r24
    if( vm_state[current_vm].int_nest_count )
    111c:	80 91 0e 01 	lds	r24, 0x010E
    1120:	28 2f       	mov	r18, r24
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	c9 01       	movw	r24, r18
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	88 0f       	add	r24, r24
    112c:	99 1f       	adc	r25, r25
    112e:	88 0f       	add	r24, r24
    1130:	99 1f       	adc	r25, r25
    1132:	82 0f       	add	r24, r18
    1134:	93 1f       	adc	r25, r19
    1136:	fc 01       	movw	r30, r24
    1138:	ee 5e       	subi	r30, 0xEE	; 238
    113a:	fe 4f       	sbci	r31, 0xFE	; 254
    113c:	80 81       	ld	r24, Z
    113e:	91 81       	ldd	r25, Z+1	; 0x01
    1140:	00 97       	sbiw	r24, 0x00	; 0
    1142:	c1 f0       	breq	.+48     	; 0x1174 <_vsmp_vinterrupt+0x64>
    {
        vm_state[current_vm].int_sp = (stack_t *)vm_buf;
    1144:	80 91 0e 01 	lds	r24, 0x010E
    1148:	28 2f       	mov	r18, r24
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	80 91 3f 01 	lds	r24, 0x013F
    1150:	90 91 40 01 	lds	r25, 0x0140
    1154:	ac 01       	movw	r20, r24
    1156:	c9 01       	movw	r24, r18
    1158:	88 0f       	add	r24, r24
    115a:	99 1f       	adc	r25, r25
    115c:	88 0f       	add	r24, r24
    115e:	99 1f       	adc	r25, r25
    1160:	88 0f       	add	r24, r24
    1162:	99 1f       	adc	r25, r25
    1164:	82 0f       	add	r24, r18
    1166:	93 1f       	adc	r25, r19
    1168:	fc 01       	movw	r30, r24
    116a:	ea 5e       	subi	r30, 0xEA	; 234
    116c:	fe 4f       	sbci	r31, 0xFE	; 254
    116e:	51 83       	std	Z+1, r21	; 0x01
    1170:	40 83       	st	Z, r20
    1172:	17 c0       	rjmp	.+46     	; 0x11a2 <_vsmp_vinterrupt+0x92>
    }
    else
    {
        vm_state[current_vm].sp = (stack_t *)vm_buf;
    1174:	80 91 0e 01 	lds	r24, 0x010E
    1178:	28 2f       	mov	r18, r24
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	80 91 3f 01 	lds	r24, 0x013F
    1180:	90 91 40 01 	lds	r25, 0x0140
    1184:	ac 01       	movw	r20, r24
    1186:	c9 01       	movw	r24, r18
    1188:	88 0f       	add	r24, r24
    118a:	99 1f       	adc	r25, r25
    118c:	88 0f       	add	r24, r24
    118e:	99 1f       	adc	r25, r25
    1190:	88 0f       	add	r24, r24
    1192:	99 1f       	adc	r25, r25
    1194:	82 0f       	add	r24, r18
    1196:	93 1f       	adc	r25, r19
    1198:	fc 01       	movw	r30, r24
    119a:	ec 5e       	subi	r30, 0xEC	; 236
    119c:	fe 4f       	sbci	r31, 0xFE	; 254
    119e:	51 83       	std	Z+1, r21	; 0x01
    11a0:	40 83       	st	Z, r20
    }
    bugurt_set_stack_pointer( vm_state[current_vm].int_sp );
    11a2:	80 91 0e 01 	lds	r24, 0x010E
    11a6:	28 2f       	mov	r18, r24
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	c9 01       	movw	r24, r18
    11ac:	88 0f       	add	r24, r24
    11ae:	99 1f       	adc	r25, r25
    11b0:	88 0f       	add	r24, r24
    11b2:	99 1f       	adc	r25, r25
    11b4:	88 0f       	add	r24, r24
    11b6:	99 1f       	adc	r25, r25
    11b8:	82 0f       	add	r24, r18
    11ba:	93 1f       	adc	r25, r19
    11bc:	fc 01       	movw	r30, r24
    11be:	ea 5e       	subi	r30, 0xEA	; 234
    11c0:	fe 4f       	sbci	r31, 0xFE	; 254
    11c2:	80 81       	ld	r24, Z
    11c4:	91 81       	ldd	r25, Z+1	; 0x01
    11c6:	0e 94 c5 00 	call	0x18a	; 0x18a <bugurt_set_stack_pointer>
// Software virtual interrupt tail function
__attribute__ (( naked )) void _vsmp_vinterrupt(void)
{
    _vsmp_interrupt_prologue();

    vm_state[current_vm].int_nest_count++;
    11ca:	80 91 0e 01 	lds	r24, 0x010E
    11ce:	28 2f       	mov	r18, r24
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	c9 01       	movw	r24, r18
    11d4:	88 0f       	add	r24, r24
    11d6:	99 1f       	adc	r25, r25
    11d8:	88 0f       	add	r24, r24
    11da:	99 1f       	adc	r25, r25
    11dc:	88 0f       	add	r24, r24
    11de:	99 1f       	adc	r25, r25
    11e0:	82 0f       	add	r24, r18
    11e2:	93 1f       	adc	r25, r19
    11e4:	fc 01       	movw	r30, r24
    11e6:	ee 5e       	subi	r30, 0xEE	; 238
    11e8:	fe 4f       	sbci	r31, 0xFE	; 254
    11ea:	80 81       	ld	r24, Z
    11ec:	91 81       	ldd	r25, Z+1	; 0x01
    11ee:	ac 01       	movw	r20, r24
    11f0:	4f 5f       	subi	r20, 0xFF	; 255
    11f2:	5f 4f       	sbci	r21, 0xFF	; 255
    11f4:	c9 01       	movw	r24, r18
    11f6:	88 0f       	add	r24, r24
    11f8:	99 1f       	adc	r25, r25
    11fa:	88 0f       	add	r24, r24
    11fc:	99 1f       	adc	r25, r25
    11fe:	88 0f       	add	r24, r24
    1200:	99 1f       	adc	r25, r25
    1202:	82 0f       	add	r24, r18
    1204:	93 1f       	adc	r25, r19
    1206:	fc 01       	movw	r30, r24
    1208:	ee 5e       	subi	r30, 0xEE	; 238
    120a:	fe 4f       	sbci	r31, 0xFE	; 254
    120c:	51 83       	std	Z+1, r21	; 0x01
    120e:	40 83       	st	Z, r20
    }
    bugurt_set_stack_pointer( vm_state[current_vm].int_sp );
}
__MACRO_FUNCTION__( _vsmp_interrupt_epilogue )
{
    if( vsmp_do_interrupt() ) goto chained_vinterrupt_return;
    1210:	0e 94 20 06 	call	0xc40	; 0xc40 <vsmp_do_interrupt>
    1214:	88 23       	and	r24, r24
    1216:	09 f0       	breq	.+2      	; 0x121a <_vsmp_vinterrupt+0x10a>
    1218:	6c c0       	rjmp	.+216    	; 0x12f2 <_vsmp_vinterrupt+0x1e2>

    if( --vm_state[current_vm].int_nest_count )goto nesting_vinterrupt_return;
    121a:	80 91 0e 01 	lds	r24, 0x010E
    121e:	28 2f       	mov	r18, r24
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	c9 01       	movw	r24, r18
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	88 0f       	add	r24, r24
    122a:	99 1f       	adc	r25, r25
    122c:	88 0f       	add	r24, r24
    122e:	99 1f       	adc	r25, r25
    1230:	82 0f       	add	r24, r18
    1232:	93 1f       	adc	r25, r19
    1234:	fc 01       	movw	r30, r24
    1236:	ee 5e       	subi	r30, 0xEE	; 238
    1238:	fe 4f       	sbci	r31, 0xFE	; 254
    123a:	80 81       	ld	r24, Z
    123c:	91 81       	ldd	r25, Z+1	; 0x01
    123e:	ac 01       	movw	r20, r24
    1240:	41 50       	subi	r20, 0x01	; 1
    1242:	50 40       	sbci	r21, 0x00	; 0
    1244:	c9 01       	movw	r24, r18
    1246:	88 0f       	add	r24, r24
    1248:	99 1f       	adc	r25, r25
    124a:	88 0f       	add	r24, r24
    124c:	99 1f       	adc	r25, r25
    124e:	88 0f       	add	r24, r24
    1250:	99 1f       	adc	r25, r25
    1252:	82 0f       	add	r24, r18
    1254:	93 1f       	adc	r25, r19
    1256:	fc 01       	movw	r30, r24
    1258:	ee 5e       	subi	r30, 0xEE	; 238
    125a:	fe 4f       	sbci	r31, 0xFE	; 254
    125c:	51 83       	std	Z+1, r21	; 0x01
    125e:	40 83       	st	Z, r20
    1260:	c9 01       	movw	r24, r18
    1262:	88 0f       	add	r24, r24
    1264:	99 1f       	adc	r25, r25
    1266:	88 0f       	add	r24, r24
    1268:	99 1f       	adc	r25, r25
    126a:	88 0f       	add	r24, r24
    126c:	99 1f       	adc	r25, r25
    126e:	82 0f       	add	r24, r18
    1270:	93 1f       	adc	r25, r19
    1272:	fc 01       	movw	r30, r24
    1274:	ee 5e       	subi	r30, 0xEE	; 238
    1276:	fe 4f       	sbci	r31, 0xFE	; 254
    1278:	80 81       	ld	r24, Z
    127a:	91 81       	ldd	r25, Z+1	; 0x01
    127c:	00 97       	sbiw	r24, 0x00	; 0
    127e:	b1 f5       	brne	.+108    	; 0x12ec <_vsmp_vinterrupt+0x1dc>

    vm_state[current_vm].int_sp = &vm_int_stack[current_vm][VM_INT_STACK_SIZE-1];
    1280:	80 91 0e 01 	lds	r24, 0x010E
    1284:	48 2f       	mov	r20, r24
    1286:	50 e0       	ldi	r21, 0x00	; 0
    1288:	21 ec       	ldi	r18, 0xC1	; 193
    128a:	31 e0       	ldi	r19, 0x01	; 1
    128c:	80 91 0e 01 	lds	r24, 0x010E
    1290:	88 2f       	mov	r24, r24
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	96 95       	lsr	r25
    1296:	98 2f       	mov	r25, r24
    1298:	88 27       	eor	r24, r24
    129a:	97 95       	ror	r25
    129c:	87 95       	ror	r24
    129e:	81 58       	subi	r24, 0x81	; 129
    12a0:	9f 4f       	sbci	r25, 0xFF	; 255
    12a2:	28 0f       	add	r18, r24
    12a4:	39 1f       	adc	r19, r25
    12a6:	ca 01       	movw	r24, r20
    12a8:	88 0f       	add	r24, r24
    12aa:	99 1f       	adc	r25, r25
    12ac:	88 0f       	add	r24, r24
    12ae:	99 1f       	adc	r25, r25
    12b0:	88 0f       	add	r24, r24
    12b2:	99 1f       	adc	r25, r25
    12b4:	84 0f       	add	r24, r20
    12b6:	95 1f       	adc	r25, r21
    12b8:	fc 01       	movw	r30, r24
    12ba:	ea 5e       	subi	r30, 0xEA	; 234
    12bc:	fe 4f       	sbci	r31, 0xFE	; 254
    12be:	31 83       	std	Z+1, r19	; 0x01
    12c0:	20 83       	st	Z, r18
    bugurt_restore_context( vm_state[current_vm].sp ); // Will return to current vm operation!
    12c2:	80 91 0e 01 	lds	r24, 0x010E
    12c6:	28 2f       	mov	r18, r24
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	c9 01       	movw	r24, r18
    12cc:	88 0f       	add	r24, r24
    12ce:	99 1f       	adc	r25, r25
    12d0:	88 0f       	add	r24, r24
    12d2:	99 1f       	adc	r25, r25
    12d4:	88 0f       	add	r24, r24
    12d6:	99 1f       	adc	r25, r25
    12d8:	82 0f       	add	r24, r18
    12da:	93 1f       	adc	r25, r19
    12dc:	fc 01       	movw	r30, r24
    12de:	ec 5e       	subi	r30, 0xEC	; 236
    12e0:	fe 4f       	sbci	r31, 0xFE	; 254
    12e2:	80 81       	ld	r24, Z
    12e4:	91 81       	ldd	r25, Z+1	; 0x01
    12e6:	0e 94 9a 00 	call	0x134	; 0x134 <bugurt_restore_context>
    __asm__ __volatile__("reti"::);
    12ea:	18 95       	reti

nesting_vinterrupt_return:

    bugurt_pop_context(); //Will return to nesting virtual interrupt!
    12ec:	0e 94 97 00 	call	0x12e	; 0x12e <bugurt_pop_context>
    __asm__ __volatile__("reti"::);
    12f0:	18 95       	reti

chained_vinterrupt_return:
    bugurt_push_pointer( (void *)vinterrupt_wrapper ); // Will return to vinterrupt_wrapper() entry point!
    12f2:	8d ed       	ldi	r24, 0xDD	; 221
    12f4:	96 e0       	ldi	r25, 0x06	; 6
    12f6:	0e 94 cd 00 	call	0x19a	; 0x19a <bugurt_push_pointer>
    __asm__ __volatile__("ret"::);
    12fa:	08 95       	ret

000012fc <vsmp_vinterrupt_isr>:
    _vsmp_interrupt_epilogue();
}

// Software virtual interrupt ( For ISR usage only ! Do NOT call from "main"!)
void vsmp_vinterrupt_isr( core_id_t vm, vinterrupt_t * vector )
{
    12fc:	df 93       	push	r29
    12fe:	cf 93       	push	r28
    1300:	00 d0       	rcall	.+0      	; 0x1302 <vsmp_vinterrupt_isr+0x6>
    1302:	0f 92       	push	r0
    1304:	cd b7       	in	r28, 0x3d	; 61
    1306:	de b7       	in	r29, 0x3e	; 62
    1308:	89 83       	std	Y+1, r24	; 0x01
    130a:	7b 83       	std	Y+3, r23	; 0x03
    130c:	6a 83       	std	Y+2, r22	; 0x02
    if( vm_state[vm].int_fifo )
    130e:	89 81       	ldd	r24, Y+1	; 0x01
    1310:	28 2f       	mov	r18, r24
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	c9 01       	movw	r24, r18
    1316:	88 0f       	add	r24, r24
    1318:	99 1f       	adc	r25, r25
    131a:	88 0f       	add	r24, r24
    131c:	99 1f       	adc	r25, r25
    131e:	88 0f       	add	r24, r24
    1320:	99 1f       	adc	r25, r25
    1322:	82 0f       	add	r24, r18
    1324:	93 1f       	adc	r25, r19
    1326:	fc 01       	movw	r30, r24
    1328:	e1 5f       	subi	r30, 0xF1	; 241
    132a:	fe 4f       	sbci	r31, 0xFE	; 254
    132c:	80 81       	ld	r24, Z
    132e:	91 81       	ldd	r25, Z+1	; 0x01
    1330:	00 97       	sbiw	r24, 0x00	; 0
    1332:	c1 f0       	breq	.+48     	; 0x1364 <vsmp_vinterrupt_isr+0x68>
    {
        item_insert( (item_t *)vector, (item_t *)vm_state[vm].int_fifo );
    1334:	4a 81       	ldd	r20, Y+2	; 0x02
    1336:	5b 81       	ldd	r21, Y+3	; 0x03
    1338:	89 81       	ldd	r24, Y+1	; 0x01
    133a:	28 2f       	mov	r18, r24
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	c9 01       	movw	r24, r18
    1340:	88 0f       	add	r24, r24
    1342:	99 1f       	adc	r25, r25
    1344:	88 0f       	add	r24, r24
    1346:	99 1f       	adc	r25, r25
    1348:	88 0f       	add	r24, r24
    134a:	99 1f       	adc	r25, r25
    134c:	82 0f       	add	r24, r18
    134e:	93 1f       	adc	r25, r19
    1350:	fc 01       	movw	r30, r24
    1352:	e1 5f       	subi	r30, 0xF1	; 241
    1354:	fe 4f       	sbci	r31, 0xFE	; 254
    1356:	20 81       	ld	r18, Z
    1358:	31 81       	ldd	r19, Z+1	; 0x01
    135a:	ca 01       	movw	r24, r20
    135c:	b9 01       	movw	r22, r18
    135e:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <item_insert>
    1362:	13 c0       	rjmp	.+38     	; 0x138a <vsmp_vinterrupt_isr+0x8e>
    }
    else
    {
        vm_state[vm].int_fifo = (item_t *)vector;
    1364:	89 81       	ldd	r24, Y+1	; 0x01
    1366:	28 2f       	mov	r18, r24
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	4a 81       	ldd	r20, Y+2	; 0x02
    136c:	5b 81       	ldd	r21, Y+3	; 0x03
    136e:	c9 01       	movw	r24, r18
    1370:	88 0f       	add	r24, r24
    1372:	99 1f       	adc	r25, r25
    1374:	88 0f       	add	r24, r24
    1376:	99 1f       	adc	r25, r25
    1378:	88 0f       	add	r24, r24
    137a:	99 1f       	adc	r25, r25
    137c:	82 0f       	add	r24, r18
    137e:	93 1f       	adc	r25, r19
    1380:	fc 01       	movw	r30, r24
    1382:	e1 5f       	subi	r30, 0xF1	; 241
    1384:	fe 4f       	sbci	r31, 0xFE	; 254
    1386:	51 83       	std	Z+1, r21	; 0x01
    1388:	40 83       	st	Z, r20
    }
}
    138a:	0f 90       	pop	r0
    138c:	0f 90       	pop	r0
    138e:	0f 90       	pop	r0
    1390:	cf 91       	pop	r28
    1392:	df 91       	pop	r29
    1394:	08 95       	ret

00001396 <vsmp_vinterrupt_init>:
    vsmp_vinterrupt_isr( vm, vector );
    _vsmp_vinterrupt();
}

void vsmp_vinterrupt_init( vinterrupt_t * vector, void (*isr)(void) )
{
    1396:	df 93       	push	r29
    1398:	cf 93       	push	r28
    139a:	00 d0       	rcall	.+0      	; 0x139c <vsmp_vinterrupt_init+0x6>
    139c:	00 d0       	rcall	.+0      	; 0x139e <vsmp_vinterrupt_init+0x8>
    139e:	cd b7       	in	r28, 0x3d	; 61
    13a0:	de b7       	in	r29, 0x3e	; 62
    13a2:	9a 83       	std	Y+2, r25	; 0x02
    13a4:	89 83       	std	Y+1, r24	; 0x01
    13a6:	7c 83       	std	Y+4, r23	; 0x04
    13a8:	6b 83       	std	Y+3, r22	; 0x03
    item_init( (item_t *)vector );
    13aa:	89 81       	ldd	r24, Y+1	; 0x01
    13ac:	9a 81       	ldd	r25, Y+2	; 0x02
    13ae:	0e 94 ce 0c 	call	0x199c	; 0x199c <item_init>
    vector->isr = isr;
    13b2:	e9 81       	ldd	r30, Y+1	; 0x01
    13b4:	fa 81       	ldd	r31, Y+2	; 0x02
    13b6:	8b 81       	ldd	r24, Y+3	; 0x03
    13b8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ba:	95 83       	std	Z+5, r25	; 0x05
    13bc:	84 83       	std	Z+4, r24	; 0x04
}
    13be:	0f 90       	pop	r0
    13c0:	0f 90       	pop	r0
    13c2:	0f 90       	pop	r0
    13c4:	0f 90       	pop	r0
    13c6:	cf 91       	pop	r28
    13c8:	df 91       	pop	r29
    13ca:	08 95       	ret

000013cc <disable_interrupts>:

void disable_interrupts(void)
{
    13cc:	df 93       	push	r29
    13ce:	cf 93       	push	r28
    13d0:	cd b7       	in	r28, 0x3d	; 61
    13d2:	de b7       	in	r29, 0x3e	; 62
    cli();
    13d4:	f8 94       	cli
    vm_state[current_vm].int_enabled = (bool_t)0;
    13d6:	80 91 0e 01 	lds	r24, 0x010E
    13da:	28 2f       	mov	r18, r24
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	c9 01       	movw	r24, r18
    13e0:	88 0f       	add	r24, r24
    13e2:	99 1f       	adc	r25, r25
    13e4:	88 0f       	add	r24, r24
    13e6:	99 1f       	adc	r25, r25
    13e8:	88 0f       	add	r24, r24
    13ea:	99 1f       	adc	r25, r25
    13ec:	82 0f       	add	r24, r18
    13ee:	93 1f       	adc	r25, r19
    13f0:	fc 01       	movw	r30, r24
    13f2:	ef 5e       	subi	r30, 0xEF	; 239
    13f4:	fe 4f       	sbci	r31, 0xFE	; 254
    13f6:	10 82       	st	Z, r1
    sei();
    13f8:	78 94       	sei
}
    13fa:	cf 91       	pop	r28
    13fc:	df 91       	pop	r29
    13fe:	08 95       	ret

00001400 <enable_interrupts>:

void enable_interrupts(void)
{
    1400:	df 93       	push	r29
    1402:	cf 93       	push	r28
    1404:	cd b7       	in	r28, 0x3d	; 61
    1406:	de b7       	in	r29, 0x3e	; 62
    cli();
    1408:	f8 94       	cli
    vm_state[current_vm].int_enabled = (bool_t)1;
    140a:	80 91 0e 01 	lds	r24, 0x010E
    140e:	28 2f       	mov	r18, r24
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	c9 01       	movw	r24, r18
    1414:	88 0f       	add	r24, r24
    1416:	99 1f       	adc	r25, r25
    1418:	88 0f       	add	r24, r24
    141a:	99 1f       	adc	r25, r25
    141c:	88 0f       	add	r24, r24
    141e:	99 1f       	adc	r25, r25
    1420:	82 0f       	add	r24, r18
    1422:	93 1f       	adc	r25, r19
    1424:	fc 01       	movw	r30, r24
    1426:	ef 5e       	subi	r30, 0xEF	; 239
    1428:	fe 4f       	sbci	r31, 0xFE	; 254
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	80 83       	st	Z, r24
    if( vm_state[current_vm].int_fifo )_vsmp_vinterrupt();
    142e:	80 91 0e 01 	lds	r24, 0x010E
    1432:	28 2f       	mov	r18, r24
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	c9 01       	movw	r24, r18
    1438:	88 0f       	add	r24, r24
    143a:	99 1f       	adc	r25, r25
    143c:	88 0f       	add	r24, r24
    143e:	99 1f       	adc	r25, r25
    1440:	88 0f       	add	r24, r24
    1442:	99 1f       	adc	r25, r25
    1444:	82 0f       	add	r24, r18
    1446:	93 1f       	adc	r25, r19
    1448:	fc 01       	movw	r30, r24
    144a:	e1 5f       	subi	r30, 0xF1	; 241
    144c:	fe 4f       	sbci	r31, 0xFE	; 254
    144e:	80 81       	ld	r24, Z
    1450:	91 81       	ldd	r25, Z+1	; 0x01
    1452:	00 97       	sbiw	r24, 0x00	; 0
    1454:	19 f0       	breq	.+6      	; 0x145c <enable_interrupts+0x5c>
    1456:	0e 94 88 08 	call	0x1110	; 0x1110 <_vsmp_vinterrupt>
    145a:	01 c0       	rjmp	.+2      	; 0x145e <enable_interrupts+0x5e>
    else sei();
    145c:	78 94       	sei
}
    145e:	cf 91       	pop	r28
    1460:	df 91       	pop	r29
    1462:	08 95       	ret

00001464 <proc_stack_init>:
#include"../../../include/bugurt.h"
stack_t * proc_stack_init(stack_t * sstart, code_t code, void * arg)
{
    1464:	df 93       	push	r29
    1466:	cf 93       	push	r28
    1468:	cd b7       	in	r28, 0x3d	; 61
    146a:	de b7       	in	r29, 0x3e	; 62
    146c:	2a 97       	sbiw	r28, 0x0a	; 10
    146e:	0f b6       	in	r0, 0x3f	; 63
    1470:	f8 94       	cli
    1472:	de bf       	out	0x3e, r29	; 62
    1474:	0f be       	out	0x3f, r0	; 63
    1476:	cd bf       	out	0x3d, r28	; 61
    1478:	9e 83       	std	Y+6, r25	; 0x06
    147a:	8d 83       	std	Y+5, r24	; 0x05
    147c:	78 87       	std	Y+8, r23	; 0x08
    147e:	6f 83       	std	Y+7, r22	; 0x07
    1480:	5a 87       	std	Y+10, r21	; 0x0a
    1482:	49 87       	std	Y+9, r20	; 0x09
    stack_t * tos = (stack_t *)sstart;
    1484:	8d 81       	ldd	r24, Y+5	; 0x05
    1486:	9e 81       	ldd	r25, Y+6	; 0x06
    1488:	9c 83       	std	Y+4, r25	; 0x04
    148a:	8b 83       	std	Y+3, r24	; 0x03
    // return address
    unsigned short tmp = (unsigned short)code;
    148c:	8f 81       	ldd	r24, Y+7	; 0x07
    148e:	98 85       	ldd	r25, Y+8	; 0x08
    1490:	9a 83       	std	Y+2, r25	; 0x02
    1492:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (stack_t)(tmp&(unsigned short)0x00ff);
    1494:	89 81       	ldd	r24, Y+1	; 0x01
    1496:	eb 81       	ldd	r30, Y+3	; 0x03
    1498:	fc 81       	ldd	r31, Y+4	; 0x04
    149a:	80 83       	st	Z, r24
    149c:	8b 81       	ldd	r24, Y+3	; 0x03
    149e:	9c 81       	ldd	r25, Y+4	; 0x04
    14a0:	01 97       	sbiw	r24, 0x01	; 1
    14a2:	9c 83       	std	Y+4, r25	; 0x04
    14a4:	8b 83       	std	Y+3, r24	; 0x03
    tmp>>=8;
    14a6:	89 81       	ldd	r24, Y+1	; 0x01
    14a8:	9a 81       	ldd	r25, Y+2	; 0x02
    14aa:	89 2f       	mov	r24, r25
    14ac:	99 27       	eor	r25, r25
    14ae:	9a 83       	std	Y+2, r25	; 0x02
    14b0:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (stack_t)(tmp&(unsigned short)0x00ff);
    14b2:	89 81       	ldd	r24, Y+1	; 0x01
    14b4:	eb 81       	ldd	r30, Y+3	; 0x03
    14b6:	fc 81       	ldd	r31, Y+4	; 0x04
    14b8:	80 83       	st	Z, r24
    14ba:	8b 81       	ldd	r24, Y+3	; 0x03
    14bc:	9c 81       	ldd	r25, Y+4	; 0x04
    14be:	01 97       	sbiw	r24, 0x01	; 1
    14c0:	9c 83       	std	Y+4, r25	; 0x04
    14c2:	8b 83       	std	Y+3, r24	; 0x03

    // s
    *tos-- = 0x00;
    14c4:	eb 81       	ldd	r30, Y+3	; 0x03
    14c6:	fc 81       	ldd	r31, Y+4	; 0x04
    14c8:	10 82       	st	Z, r1
    14ca:	8b 81       	ldd	r24, Y+3	; 0x03
    14cc:	9c 81       	ldd	r25, Y+4	; 0x04
    14ce:	01 97       	sbiw	r24, 0x01	; 1
    14d0:	9c 83       	std	Y+4, r25	; 0x04
    14d2:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x00;// r1 must B 0
    14d4:	eb 81       	ldd	r30, Y+3	; 0x03
    14d6:	fc 81       	ldd	r31, Y+4	; 0x04
    14d8:	10 82       	st	Z, r1
    14da:	8b 81       	ldd	r24, Y+3	; 0x03
    14dc:	9c 81       	ldd	r25, Y+4	; 0x04
    14de:	01 97       	sbiw	r24, 0x01	; 1
    14e0:	9c 83       	std	Y+4, r25	; 0x04
    14e2:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x02;// r2
    14e4:	eb 81       	ldd	r30, Y+3	; 0x03
    14e6:	fc 81       	ldd	r31, Y+4	; 0x04
    14e8:	82 e0       	ldi	r24, 0x02	; 2
    14ea:	80 83       	st	Z, r24
    14ec:	8b 81       	ldd	r24, Y+3	; 0x03
    14ee:	9c 81       	ldd	r25, Y+4	; 0x04
    14f0:	01 97       	sbiw	r24, 0x01	; 1
    14f2:	9c 83       	std	Y+4, r25	; 0x04
    14f4:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x80;// SREG: enable interrupts
    14f6:	eb 81       	ldd	r30, Y+3	; 0x03
    14f8:	fc 81       	ldd	r31, Y+4	; 0x04
    14fa:	80 e8       	ldi	r24, 0x80	; 128
    14fc:	80 83       	st	Z, r24
    14fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1500:	9c 81       	ldd	r25, Y+4	; 0x04
    1502:	01 97       	sbiw	r24, 0x01	; 1
    1504:	9c 83       	std	Y+4, r25	; 0x04
    1506:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x03;
    1508:	eb 81       	ldd	r30, Y+3	; 0x03
    150a:	fc 81       	ldd	r31, Y+4	; 0x04
    150c:	83 e0       	ldi	r24, 0x03	; 3
    150e:	80 83       	st	Z, r24
    1510:	8b 81       	ldd	r24, Y+3	; 0x03
    1512:	9c 81       	ldd	r25, Y+4	; 0x04
    1514:	01 97       	sbiw	r24, 0x01	; 1
    1516:	9c 83       	std	Y+4, r25	; 0x04
    1518:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x04;
    151a:	eb 81       	ldd	r30, Y+3	; 0x03
    151c:	fc 81       	ldd	r31, Y+4	; 0x04
    151e:	84 e0       	ldi	r24, 0x04	; 4
    1520:	80 83       	st	Z, r24
    1522:	8b 81       	ldd	r24, Y+3	; 0x03
    1524:	9c 81       	ldd	r25, Y+4	; 0x04
    1526:	01 97       	sbiw	r24, 0x01	; 1
    1528:	9c 83       	std	Y+4, r25	; 0x04
    152a:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x05;
    152c:	eb 81       	ldd	r30, Y+3	; 0x03
    152e:	fc 81       	ldd	r31, Y+4	; 0x04
    1530:	85 e0       	ldi	r24, 0x05	; 5
    1532:	80 83       	st	Z, r24
    1534:	8b 81       	ldd	r24, Y+3	; 0x03
    1536:	9c 81       	ldd	r25, Y+4	; 0x04
    1538:	01 97       	sbiw	r24, 0x01	; 1
    153a:	9c 83       	std	Y+4, r25	; 0x04
    153c:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x06;
    153e:	eb 81       	ldd	r30, Y+3	; 0x03
    1540:	fc 81       	ldd	r31, Y+4	; 0x04
    1542:	86 e0       	ldi	r24, 0x06	; 6
    1544:	80 83       	st	Z, r24
    1546:	8b 81       	ldd	r24, Y+3	; 0x03
    1548:	9c 81       	ldd	r25, Y+4	; 0x04
    154a:	01 97       	sbiw	r24, 0x01	; 1
    154c:	9c 83       	std	Y+4, r25	; 0x04
    154e:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x07;
    1550:	eb 81       	ldd	r30, Y+3	; 0x03
    1552:	fc 81       	ldd	r31, Y+4	; 0x04
    1554:	87 e0       	ldi	r24, 0x07	; 7
    1556:	80 83       	st	Z, r24
    1558:	8b 81       	ldd	r24, Y+3	; 0x03
    155a:	9c 81       	ldd	r25, Y+4	; 0x04
    155c:	01 97       	sbiw	r24, 0x01	; 1
    155e:	9c 83       	std	Y+4, r25	; 0x04
    1560:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x08;
    1562:	eb 81       	ldd	r30, Y+3	; 0x03
    1564:	fc 81       	ldd	r31, Y+4	; 0x04
    1566:	88 e0       	ldi	r24, 0x08	; 8
    1568:	80 83       	st	Z, r24
    156a:	8b 81       	ldd	r24, Y+3	; 0x03
    156c:	9c 81       	ldd	r25, Y+4	; 0x04
    156e:	01 97       	sbiw	r24, 0x01	; 1
    1570:	9c 83       	std	Y+4, r25	; 0x04
    1572:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x09;
    1574:	eb 81       	ldd	r30, Y+3	; 0x03
    1576:	fc 81       	ldd	r31, Y+4	; 0x04
    1578:	89 e0       	ldi	r24, 0x09	; 9
    157a:	80 83       	st	Z, r24
    157c:	8b 81       	ldd	r24, Y+3	; 0x03
    157e:	9c 81       	ldd	r25, Y+4	; 0x04
    1580:	01 97       	sbiw	r24, 0x01	; 1
    1582:	9c 83       	std	Y+4, r25	; 0x04
    1584:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x10;
    1586:	eb 81       	ldd	r30, Y+3	; 0x03
    1588:	fc 81       	ldd	r31, Y+4	; 0x04
    158a:	80 e1       	ldi	r24, 0x10	; 16
    158c:	80 83       	st	Z, r24
    158e:	8b 81       	ldd	r24, Y+3	; 0x03
    1590:	9c 81       	ldd	r25, Y+4	; 0x04
    1592:	01 97       	sbiw	r24, 0x01	; 1
    1594:	9c 83       	std	Y+4, r25	; 0x04
    1596:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x11;
    1598:	eb 81       	ldd	r30, Y+3	; 0x03
    159a:	fc 81       	ldd	r31, Y+4	; 0x04
    159c:	81 e1       	ldi	r24, 0x11	; 17
    159e:	80 83       	st	Z, r24
    15a0:	8b 81       	ldd	r24, Y+3	; 0x03
    15a2:	9c 81       	ldd	r25, Y+4	; 0x04
    15a4:	01 97       	sbiw	r24, 0x01	; 1
    15a6:	9c 83       	std	Y+4, r25	; 0x04
    15a8:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x12;
    15aa:	eb 81       	ldd	r30, Y+3	; 0x03
    15ac:	fc 81       	ldd	r31, Y+4	; 0x04
    15ae:	82 e1       	ldi	r24, 0x12	; 18
    15b0:	80 83       	st	Z, r24
    15b2:	8b 81       	ldd	r24, Y+3	; 0x03
    15b4:	9c 81       	ldd	r25, Y+4	; 0x04
    15b6:	01 97       	sbiw	r24, 0x01	; 1
    15b8:	9c 83       	std	Y+4, r25	; 0x04
    15ba:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x13;
    15bc:	eb 81       	ldd	r30, Y+3	; 0x03
    15be:	fc 81       	ldd	r31, Y+4	; 0x04
    15c0:	83 e1       	ldi	r24, 0x13	; 19
    15c2:	80 83       	st	Z, r24
    15c4:	8b 81       	ldd	r24, Y+3	; 0x03
    15c6:	9c 81       	ldd	r25, Y+4	; 0x04
    15c8:	01 97       	sbiw	r24, 0x01	; 1
    15ca:	9c 83       	std	Y+4, r25	; 0x04
    15cc:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x14;
    15ce:	eb 81       	ldd	r30, Y+3	; 0x03
    15d0:	fc 81       	ldd	r31, Y+4	; 0x04
    15d2:	84 e1       	ldi	r24, 0x14	; 20
    15d4:	80 83       	st	Z, r24
    15d6:	8b 81       	ldd	r24, Y+3	; 0x03
    15d8:	9c 81       	ldd	r25, Y+4	; 0x04
    15da:	01 97       	sbiw	r24, 0x01	; 1
    15dc:	9c 83       	std	Y+4, r25	; 0x04
    15de:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x15;
    15e0:	eb 81       	ldd	r30, Y+3	; 0x03
    15e2:	fc 81       	ldd	r31, Y+4	; 0x04
    15e4:	85 e1       	ldi	r24, 0x15	; 21
    15e6:	80 83       	st	Z, r24
    15e8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ea:	9c 81       	ldd	r25, Y+4	; 0x04
    15ec:	01 97       	sbiw	r24, 0x01	; 1
    15ee:	9c 83       	std	Y+4, r25	; 0x04
    15f0:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x16;
    15f2:	eb 81       	ldd	r30, Y+3	; 0x03
    15f4:	fc 81       	ldd	r31, Y+4	; 0x04
    15f6:	86 e1       	ldi	r24, 0x16	; 22
    15f8:	80 83       	st	Z, r24
    15fa:	8b 81       	ldd	r24, Y+3	; 0x03
    15fc:	9c 81       	ldd	r25, Y+4	; 0x04
    15fe:	01 97       	sbiw	r24, 0x01	; 1
    1600:	9c 83       	std	Y+4, r25	; 0x04
    1602:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x17;
    1604:	eb 81       	ldd	r30, Y+3	; 0x03
    1606:	fc 81       	ldd	r31, Y+4	; 0x04
    1608:	87 e1       	ldi	r24, 0x17	; 23
    160a:	80 83       	st	Z, r24
    160c:	8b 81       	ldd	r24, Y+3	; 0x03
    160e:	9c 81       	ldd	r25, Y+4	; 0x04
    1610:	01 97       	sbiw	r24, 0x01	; 1
    1612:	9c 83       	std	Y+4, r25	; 0x04
    1614:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x18;
    1616:	eb 81       	ldd	r30, Y+3	; 0x03
    1618:	fc 81       	ldd	r31, Y+4	; 0x04
    161a:	88 e1       	ldi	r24, 0x18	; 24
    161c:	80 83       	st	Z, r24
    161e:	8b 81       	ldd	r24, Y+3	; 0x03
    1620:	9c 81       	ldd	r25, Y+4	; 0x04
    1622:	01 97       	sbiw	r24, 0x01	; 1
    1624:	9c 83       	std	Y+4, r25	; 0x04
    1626:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x19;
    1628:	eb 81       	ldd	r30, Y+3	; 0x03
    162a:	fc 81       	ldd	r31, Y+4	; 0x04
    162c:	89 e1       	ldi	r24, 0x19	; 25
    162e:	80 83       	st	Z, r24
    1630:	8b 81       	ldd	r24, Y+3	; 0x03
    1632:	9c 81       	ldd	r25, Y+4	; 0x04
    1634:	01 97       	sbiw	r24, 0x01	; 1
    1636:	9c 83       	std	Y+4, r25	; 0x04
    1638:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x20;
    163a:	eb 81       	ldd	r30, Y+3	; 0x03
    163c:	fc 81       	ldd	r31, Y+4	; 0x04
    163e:	80 e2       	ldi	r24, 0x20	; 32
    1640:	80 83       	st	Z, r24
    1642:	8b 81       	ldd	r24, Y+3	; 0x03
    1644:	9c 81       	ldd	r25, Y+4	; 0x04
    1646:	01 97       	sbiw	r24, 0x01	; 1
    1648:	9c 83       	std	Y+4, r25	; 0x04
    164a:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x21;
    164c:	eb 81       	ldd	r30, Y+3	; 0x03
    164e:	fc 81       	ldd	r31, Y+4	; 0x04
    1650:	81 e2       	ldi	r24, 0x21	; 33
    1652:	80 83       	st	Z, r24
    1654:	8b 81       	ldd	r24, Y+3	; 0x03
    1656:	9c 81       	ldd	r25, Y+4	; 0x04
    1658:	01 97       	sbiw	r24, 0x01	; 1
    165a:	9c 83       	std	Y+4, r25	; 0x04
    165c:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x22;
    165e:	eb 81       	ldd	r30, Y+3	; 0x03
    1660:	fc 81       	ldd	r31, Y+4	; 0x04
    1662:	82 e2       	ldi	r24, 0x22	; 34
    1664:	80 83       	st	Z, r24
    1666:	8b 81       	ldd	r24, Y+3	; 0x03
    1668:	9c 81       	ldd	r25, Y+4	; 0x04
    166a:	01 97       	sbiw	r24, 0x01	; 1
    166c:	9c 83       	std	Y+4, r25	; 0x04
    166e:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x23;
    1670:	eb 81       	ldd	r30, Y+3	; 0x03
    1672:	fc 81       	ldd	r31, Y+4	; 0x04
    1674:	83 e2       	ldi	r24, 0x23	; 35
    1676:	80 83       	st	Z, r24
    1678:	8b 81       	ldd	r24, Y+3	; 0x03
    167a:	9c 81       	ldd	r25, Y+4	; 0x04
    167c:	01 97       	sbiw	r24, 0x01	; 1
    167e:	9c 83       	std	Y+4, r25	; 0x04
    1680:	8b 83       	std	Y+3, r24	; 0x03

    tmp = (unsigned short)arg;
    1682:	89 85       	ldd	r24, Y+9	; 0x09
    1684:	9a 85       	ldd	r25, Y+10	; 0x0a
    1686:	9a 83       	std	Y+2, r25	; 0x02
    1688:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (stack_t)(tmp&(unsigned short)0x00ff); // r24 LSByte of arg
    168a:	89 81       	ldd	r24, Y+1	; 0x01
    168c:	eb 81       	ldd	r30, Y+3	; 0x03
    168e:	fc 81       	ldd	r31, Y+4	; 0x04
    1690:	80 83       	st	Z, r24
    1692:	8b 81       	ldd	r24, Y+3	; 0x03
    1694:	9c 81       	ldd	r25, Y+4	; 0x04
    1696:	01 97       	sbiw	r24, 0x01	; 1
    1698:	9c 83       	std	Y+4, r25	; 0x04
    169a:	8b 83       	std	Y+3, r24	; 0x03
    tmp>>=8;
    169c:	89 81       	ldd	r24, Y+1	; 0x01
    169e:	9a 81       	ldd	r25, Y+2	; 0x02
    16a0:	89 2f       	mov	r24, r25
    16a2:	99 27       	eor	r25, r25
    16a4:	9a 83       	std	Y+2, r25	; 0x02
    16a6:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (stack_t)(tmp&(unsigned short)0x00ff); // r25 MSByte of arg
    16a8:	89 81       	ldd	r24, Y+1	; 0x01
    16aa:	eb 81       	ldd	r30, Y+3	; 0x03
    16ac:	fc 81       	ldd	r31, Y+4	; 0x04
    16ae:	80 83       	st	Z, r24
    16b0:	8b 81       	ldd	r24, Y+3	; 0x03
    16b2:	9c 81       	ldd	r25, Y+4	; 0x04
    16b4:	01 97       	sbiw	r24, 0x01	; 1
    16b6:	9c 83       	std	Y+4, r25	; 0x04
    16b8:	8b 83       	std	Y+3, r24	; 0x03

    *tos-- = 0x26;
    16ba:	eb 81       	ldd	r30, Y+3	; 0x03
    16bc:	fc 81       	ldd	r31, Y+4	; 0x04
    16be:	86 e2       	ldi	r24, 0x26	; 38
    16c0:	80 83       	st	Z, r24
    16c2:	8b 81       	ldd	r24, Y+3	; 0x03
    16c4:	9c 81       	ldd	r25, Y+4	; 0x04
    16c6:	01 97       	sbiw	r24, 0x01	; 1
    16c8:	9c 83       	std	Y+4, r25	; 0x04
    16ca:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x27;
    16cc:	eb 81       	ldd	r30, Y+3	; 0x03
    16ce:	fc 81       	ldd	r31, Y+4	; 0x04
    16d0:	87 e2       	ldi	r24, 0x27	; 39
    16d2:	80 83       	st	Z, r24
    16d4:	8b 81       	ldd	r24, Y+3	; 0x03
    16d6:	9c 81       	ldd	r25, Y+4	; 0x04
    16d8:	01 97       	sbiw	r24, 0x01	; 1
    16da:	9c 83       	std	Y+4, r25	; 0x04
    16dc:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x28;
    16de:	eb 81       	ldd	r30, Y+3	; 0x03
    16e0:	fc 81       	ldd	r31, Y+4	; 0x04
    16e2:	88 e2       	ldi	r24, 0x28	; 40
    16e4:	80 83       	st	Z, r24
    16e6:	8b 81       	ldd	r24, Y+3	; 0x03
    16e8:	9c 81       	ldd	r25, Y+4	; 0x04
    16ea:	01 97       	sbiw	r24, 0x01	; 1
    16ec:	9c 83       	std	Y+4, r25	; 0x04
    16ee:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x29;
    16f0:	eb 81       	ldd	r30, Y+3	; 0x03
    16f2:	fc 81       	ldd	r31, Y+4	; 0x04
    16f4:	89 e2       	ldi	r24, 0x29	; 41
    16f6:	80 83       	st	Z, r24
    16f8:	8b 81       	ldd	r24, Y+3	; 0x03
    16fa:	9c 81       	ldd	r25, Y+4	; 0x04
    16fc:	01 97       	sbiw	r24, 0x01	; 1
    16fe:	9c 83       	std	Y+4, r25	; 0x04
    1700:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x30;
    1702:	eb 81       	ldd	r30, Y+3	; 0x03
    1704:	fc 81       	ldd	r31, Y+4	; 0x04
    1706:	80 e3       	ldi	r24, 0x30	; 48
    1708:	80 83       	st	Z, r24
    170a:	8b 81       	ldd	r24, Y+3	; 0x03
    170c:	9c 81       	ldd	r25, Y+4	; 0x04
    170e:	01 97       	sbiw	r24, 0x01	; 1
    1710:	9c 83       	std	Y+4, r25	; 0x04
    1712:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x31;
    1714:	eb 81       	ldd	r30, Y+3	; 0x03
    1716:	fc 81       	ldd	r31, Y+4	; 0x04
    1718:	81 e3       	ldi	r24, 0x31	; 49
    171a:	80 83       	st	Z, r24
    171c:	8b 81       	ldd	r24, Y+3	; 0x03
    171e:	9c 81       	ldd	r25, Y+4	; 0x04
    1720:	01 97       	sbiw	r24, 0x01	; 1
    1722:	9c 83       	std	Y+4, r25	; 0x04
    1724:	8b 83       	std	Y+3, r24	; 0x03
#ifdef RAMPZ
    *tos-- = 0xff;
#endif
    return tos;
    1726:	8b 81       	ldd	r24, Y+3	; 0x03
    1728:	9c 81       	ldd	r25, Y+4	; 0x04
}
    172a:	2a 96       	adiw	r28, 0x0a	; 10
    172c:	0f b6       	in	r0, 0x3f	; 63
    172e:	f8 94       	cli
    1730:	de bf       	out	0x3e, r29	; 62
    1732:	0f be       	out	0x3f, r0	; 63
    1734:	cd bf       	out	0x3d, r28	; 61
    1736:	cf 91       	pop	r28
    1738:	df 91       	pop	r29
    173a:	08 95       	ret

0000173c <index_search>:
*                           http://www.0chan.ru/r/res/9996.html                          *
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
prio_t index_search(index_t index)
{
    173c:	df 93       	push	r29
    173e:	cf 93       	push	r28
    1740:	00 d0       	rcall	.+0      	; 0x1742 <index_search+0x6>
    1742:	00 d0       	rcall	.+0      	; 0x1744 <index_search+0x8>
    1744:	00 d0       	rcall	.+0      	; 0x1746 <index_search+0xa>
    1746:	cd b7       	in	r28, 0x3d	; 61
    1748:	de b7       	in	r29, 0x3e	; 62
    174a:	8e 83       	std	Y+6, r24	; 0x06
    prio_t prio = (prio_t)0;
    174c:	1d 82       	std	Y+5, r1	; 0x05
        но, т.к. BITS_IN_INDEX_T фиксировано для данной конфигурации,
        то получается время выполнения - O(1), ВСЕГДА.

        И да, предсказуемость + переносимость > быстродействие.
        */
    index_t upper = ~(index_t)0, lower = ~(index_t)0, middle;
    174e:	8f ef       	ldi	r24, 0xFF	; 255
    1750:	8c 83       	std	Y+4, r24	; 0x04
    1752:	8f ef       	ldi	r24, 0xFF	; 255
    1754:	8b 83       	std	Y+3, r24	; 0x03
    prio_t step = (prio_t)BITS_IN_INDEX_T;
    1756:	88 e0       	ldi	r24, 0x08	; 8
    1758:	89 83       	std	Y+1, r24	; 0x01
    175a:	22 c0       	rjmp	.+68     	; 0x17a0 <index_search+0x64>
    while( step )
    {
        step>>=1; // делим шаг пополам
    175c:	89 81       	ldd	r24, Y+1	; 0x01
    175e:	86 95       	lsr	r24
    1760:	89 83       	std	Y+1, r24	; 0x01
        middle = lower>>step;
    1762:	8b 81       	ldd	r24, Y+3	; 0x03
    1764:	28 2f       	mov	r18, r24
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	89 81       	ldd	r24, Y+1	; 0x01
    176a:	88 2f       	mov	r24, r24
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	a9 01       	movw	r20, r18
    1770:	02 c0       	rjmp	.+4      	; 0x1776 <index_search+0x3a>
    1772:	55 95       	asr	r21
    1774:	47 95       	ror	r20
    1776:	8a 95       	dec	r24
    1778:	e2 f7       	brpl	.-8      	; 0x1772 <index_search+0x36>
    177a:	ca 01       	movw	r24, r20
    177c:	8a 83       	std	Y+2, r24	; 0x02
        if( index & upper & middle )
    177e:	9e 81       	ldd	r25, Y+6	; 0x06
    1780:	8c 81       	ldd	r24, Y+4	; 0x04
    1782:	98 23       	and	r25, r24
    1784:	8a 81       	ldd	r24, Y+2	; 0x02
    1786:	89 23       	and	r24, r25
    1788:	88 23       	and	r24, r24
    178a:	19 f0       	breq	.+6      	; 0x1792 <index_search+0x56>
        {
            lower = middle;
    178c:	8a 81       	ldd	r24, Y+2	; 0x02
    178e:	8b 83       	std	Y+3, r24	; 0x03
    1790:	07 c0       	rjmp	.+14     	; 0x17a0 <index_search+0x64>
        }
        else
        {
            upper = ~middle;
    1792:	8a 81       	ldd	r24, Y+2	; 0x02
    1794:	80 95       	com	r24
    1796:	8c 83       	std	Y+4, r24	; 0x04
            prio += step;
    1798:	9d 81       	ldd	r25, Y+5	; 0x05
    179a:	89 81       	ldd	r24, Y+1	; 0x01
    179c:	89 0f       	add	r24, r25
    179e:	8d 83       	std	Y+5, r24	; 0x05

        И да, предсказуемость + переносимость > быстродействие.
        */
    index_t upper = ~(index_t)0, lower = ~(index_t)0, middle;
    prio_t step = (prio_t)BITS_IN_INDEX_T;
    while( step )
    17a0:	89 81       	ldd	r24, Y+1	; 0x01
    17a2:	88 23       	and	r24, r24
    17a4:	d9 f6       	brne	.-74     	; 0x175c <index_search+0x20>
        if ( mask & index )break;
        prio++;
        mask<<=1;
    }
#endif
    return prio;
    17a6:	8d 81       	ldd	r24, Y+5	; 0x05
}
    17a8:	26 96       	adiw	r28, 0x06	; 6
    17aa:	0f b6       	in	r0, 0x3f	; 63
    17ac:	f8 94       	cli
    17ae:	de bf       	out	0x3e, r29	; 62
    17b0:	0f be       	out	0x3f, r0	; 63
    17b2:	cd bf       	out	0x3d, r28	; 61
    17b4:	cf 91       	pop	r28
    17b6:	df 91       	pop	r29
    17b8:	08 95       	ret

000017ba <_ipc_wait>:
*                           http://www.0chan.ru/r/res/9996.html                          *
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
void _ipc_wait( void * ipc_pointer )
{
    17ba:	df 93       	push	r29
    17bc:	cf 93       	push	r28
    17be:	00 d0       	rcall	.+0      	; 0x17c0 <_ipc_wait+0x6>
    17c0:	00 d0       	rcall	.+0      	; 0x17c2 <_ipc_wait+0x8>
    17c2:	cd b7       	in	r28, 0x3d	; 61
    17c4:	de b7       	in	r29, 0x3e	; 62
    17c6:	9c 83       	std	Y+4, r25	; 0x04
    17c8:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc;
    proc = current_proc();
    17ca:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <current_proc>
    17ce:	9a 83       	std	Y+2, r25	; 0x02
    17d0:	89 83       	std	Y+1, r24	; 0x01
    SPIN_LOCK( proc );
    17d2:	89 81       	ldd	r24, Y+1	; 0x01
    17d4:	9a 81       	ldd	r25, Y+2	; 0x02
    17d6:	83 96       	adiw	r24, 0x23	; 35
    17d8:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    // Останавливаем процесс
    proc->flags |= PROC_FLG_IPCW;
    17dc:	e9 81       	ldd	r30, Y+1	; 0x01
    17de:	fa 81       	ldd	r31, Y+2	; 0x02
    17e0:	87 81       	ldd	r24, Z+7	; 0x07
    17e2:	90 85       	ldd	r25, Z+8	; 0x08
    17e4:	80 64       	ori	r24, 0x40	; 64
    17e6:	e9 81       	ldd	r30, Y+1	; 0x01
    17e8:	fa 81       	ldd	r31, Y+2	; 0x02
    17ea:	90 87       	std	Z+8, r25	; 0x08
    17ec:	87 83       	std	Z+7, r24	; 0x07
    proc->buf = ipc_pointer;
    17ee:	e9 81       	ldd	r30, Y+1	; 0x01
    17f0:	fa 81       	ldd	r31, Y+2	; 0x02
    17f2:	8b 81       	ldd	r24, Y+3	; 0x03
    17f4:	9c 81       	ldd	r25, Y+4	; 0x04
    17f6:	90 a3       	std	Z+32, r25	; 0x20
    17f8:	87 8f       	std	Z+31, r24	; 0x1f
    _proc_stop_( proc );
    17fa:	89 81       	ldd	r24, Y+1	; 0x01
    17fc:	9a 81       	ldd	r25, Y+2	; 0x02
    17fe:	0e 94 10 13 	call	0x2620	; 0x2620 <_proc_stop_>
    RESCHED_PROC( proc );
    1802:	e9 81       	ldd	r30, Y+1	; 0x01
    1804:	fa 81       	ldd	r31, Y+2	; 0x02
    1806:	81 a1       	ldd	r24, Z+33	; 0x21
    1808:	0e 94 b4 01 	call	0x368	; 0x368 <resched>

    SPIN_UNLOCK( proc );
    180c:	89 81       	ldd	r24, Y+1	; 0x01
    180e:	9a 81       	ldd	r25, Y+2	; 0x02
    1810:	83 96       	adiw	r24, 0x23	; 35
    1812:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
}
    1816:	0f 90       	pop	r0
    1818:	0f 90       	pop	r0
    181a:	0f 90       	pop	r0
    181c:	0f 90       	pop	r0
    181e:	cf 91       	pop	r28
    1820:	df 91       	pop	r29
    1822:	08 95       	ret

00001824 <ipc_send_isr>:

bool_t ipc_send_isr( proc_t * proc, ipc_data_t data )
{
    1824:	df 93       	push	r29
    1826:	cf 93       	push	r28
    1828:	00 d0       	rcall	.+0      	; 0x182a <ipc_send_isr+0x6>
    182a:	00 d0       	rcall	.+0      	; 0x182c <ipc_send_isr+0x8>
    182c:	0f 92       	push	r0
    182e:	cd b7       	in	r28, 0x3d	; 61
    1830:	de b7       	in	r29, 0x3e	; 62
    1832:	9b 83       	std	Y+3, r25	; 0x03
    1834:	8a 83       	std	Y+2, r24	; 0x02
    1836:	7d 83       	std	Y+5, r23	; 0x05
    1838:	6c 83       	std	Y+4, r22	; 0x04
    bool_t ret = (bool_t)0;
    183a:	19 82       	std	Y+1, r1	; 0x01
    SPIN_LOCK( proc );
    183c:	8a 81       	ldd	r24, Y+2	; 0x02
    183e:	9b 81       	ldd	r25, Y+3	; 0x03
    1840:	83 96       	adiw	r24, 0x23	; 35
    1842:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    if( proc->flags & PROC_FLG_IPCW )
    1846:	ea 81       	ldd	r30, Y+2	; 0x02
    1848:	fb 81       	ldd	r31, Y+3	; 0x03
    184a:	87 81       	ldd	r24, Z+7	; 0x07
    184c:	90 85       	ldd	r25, Z+8	; 0x08
    184e:	80 74       	andi	r24, 0x40	; 64
    1850:	90 70       	andi	r25, 0x00	; 0
    1852:	00 97       	sbiw	r24, 0x00	; 0
    1854:	91 f1       	breq	.+100    	; 0x18ba <ipc_send_isr+0x96>
    {
        proc->flags &= ~PROC_FLG_IPCW;
    1856:	ea 81       	ldd	r30, Y+2	; 0x02
    1858:	fb 81       	ldd	r31, Y+3	; 0x03
    185a:	87 81       	ldd	r24, Z+7	; 0x07
    185c:	90 85       	ldd	r25, Z+8	; 0x08
    185e:	8f 7b       	andi	r24, 0xBF	; 191
    1860:	ea 81       	ldd	r30, Y+2	; 0x02
    1862:	fb 81       	ldd	r31, Y+3	; 0x03
    1864:	90 87       	std	Z+8, r25	; 0x08
    1866:	87 83       	std	Z+7, r24	; 0x07
        ///Обработка флага останова целевого процесса
        if(  PROC_PRE_STOP_TEST(proc)  )
    1868:	ea 81       	ldd	r30, Y+2	; 0x02
    186a:	fb 81       	ldd	r31, Y+3	; 0x03
    186c:	87 81       	ldd	r24, Z+7	; 0x07
    186e:	90 85       	ldd	r25, Z+8	; 0x08
    1870:	80 78       	andi	r24, 0x80	; 128
    1872:	90 70       	andi	r25, 0x00	; 0
    1874:	00 97       	sbiw	r24, 0x00	; 0
    1876:	91 f0       	breq	.+36     	; 0x189c <ipc_send_isr+0x78>
    1878:	ea 81       	ldd	r30, Y+2	; 0x02
    187a:	fb 81       	ldd	r31, Y+3	; 0x03
    187c:	87 81       	ldd	r24, Z+7	; 0x07
    187e:	90 85       	ldd	r25, Z+8	; 0x08
    1880:	8c 70       	andi	r24, 0x0C	; 12
    1882:	90 70       	andi	r25, 0x00	; 0
    1884:	00 97       	sbiw	r24, 0x00	; 0
    1886:	51 f4       	brne	.+20     	; 0x189c <ipc_send_isr+0x78>
            Если был запрошен останов целевого процесса,
            и целевой процесс не удерживает общие ресурсы,
            то мы не будем возобновлять его работу
            и передавать ему информацию.
            */
            proc->flags &= ~PROC_FLG_PRE_STOP_MASK;
    1888:	ea 81       	ldd	r30, Y+2	; 0x02
    188a:	fb 81       	ldd	r31, Y+3	; 0x03
    188c:	87 81       	ldd	r24, Z+7	; 0x07
    188e:	90 85       	ldd	r25, Z+8	; 0x08
    1890:	8d 77       	andi	r24, 0x7D	; 125
    1892:	ea 81       	ldd	r30, Y+2	; 0x02
    1894:	fb 81       	ldd	r31, Y+3	; 0x03
    1896:	90 87       	std	Z+8, r25	; 0x08
    1898:	87 83       	std	Z+7, r24	; 0x07
    189a:	0f c0       	rjmp	.+30     	; 0x18ba <ipc_send_isr+0x96>
            goto end;
        }
        ret = (bool_t)1; // информация будет передана
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	89 83       	std	Y+1, r24	; 0x01
        *(ipc_data_t *)proc->buf = data;
    18a0:	ea 81       	ldd	r30, Y+2	; 0x02
    18a2:	fb 81       	ldd	r31, Y+3	; 0x03
    18a4:	87 8d       	ldd	r24, Z+31	; 0x1f
    18a6:	90 a1       	ldd	r25, Z+32	; 0x20
    18a8:	fc 01       	movw	r30, r24
    18aa:	8c 81       	ldd	r24, Y+4	; 0x04
    18ac:	9d 81       	ldd	r25, Y+5	; 0x05
    18ae:	91 83       	std	Z+1, r25	; 0x01
    18b0:	80 83       	st	Z, r24
        _proc_run( proc );
    18b2:	8a 81       	ldd	r24, Y+2	; 0x02
    18b4:	9b 81       	ldd	r25, Y+3	; 0x03
    18b6:	0e 94 47 12 	call	0x248e	; 0x248e <_proc_run>
    }
end:
    SPIN_UNLOCK( proc );
    18ba:	8a 81       	ldd	r24, Y+2	; 0x02
    18bc:	9b 81       	ldd	r25, Y+3	; 0x03
    18be:	83 96       	adiw	r24, 0x23	; 35
    18c0:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
    return ret;
    18c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    18c6:	0f 90       	pop	r0
    18c8:	0f 90       	pop	r0
    18ca:	0f 90       	pop	r0
    18cc:	0f 90       	pop	r0
    18ce:	0f 90       	pop	r0
    18d0:	cf 91       	pop	r28
    18d2:	df 91       	pop	r29
    18d4:	08 95       	ret

000018d6 <_ipc_exchange>:

bool_t _ipc_exchange( proc_t * proc, ipc_data_t send, ipc_data_t * receive )
{
    18d6:	df 93       	push	r29
    18d8:	cf 93       	push	r28
    18da:	cd b7       	in	r28, 0x3d	; 61
    18dc:	de b7       	in	r29, 0x3e	; 62
    18de:	27 97       	sbiw	r28, 0x07	; 7
    18e0:	0f b6       	in	r0, 0x3f	; 63
    18e2:	f8 94       	cli
    18e4:	de bf       	out	0x3e, r29	; 62
    18e6:	0f be       	out	0x3f, r0	; 63
    18e8:	cd bf       	out	0x3d, r28	; 61
    18ea:	9b 83       	std	Y+3, r25	; 0x03
    18ec:	8a 83       	std	Y+2, r24	; 0x02
    18ee:	7d 83       	std	Y+5, r23	; 0x05
    18f0:	6c 83       	std	Y+4, r22	; 0x04
    18f2:	5f 83       	std	Y+7, r21	; 0x07
    18f4:	4e 83       	std	Y+6, r20	; 0x06
    bool_t ret = (bool_t)0;
    18f6:	19 82       	std	Y+1, r1	; 0x01
    SPIN_LOCK( proc );
    18f8:	8a 81       	ldd	r24, Y+2	; 0x02
    18fa:	9b 81       	ldd	r25, Y+3	; 0x03
    18fc:	83 96       	adiw	r24, 0x23	; 35
    18fe:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    if( proc->flags & PROC_FLG_IPCW )
    1902:	ea 81       	ldd	r30, Y+2	; 0x02
    1904:	fb 81       	ldd	r31, Y+3	; 0x03
    1906:	87 81       	ldd	r24, Z+7	; 0x07
    1908:	90 85       	ldd	r25, Z+8	; 0x08
    190a:	80 74       	andi	r24, 0x40	; 64
    190c:	90 70       	andi	r25, 0x00	; 0
    190e:	00 97       	sbiw	r24, 0x00	; 0
    1910:	b1 f1       	breq	.+108    	; 0x197e <_ipc_exchange+0xa8>
    {
        proc->flags &= ~PROC_FLG_IPCW;
    1912:	ea 81       	ldd	r30, Y+2	; 0x02
    1914:	fb 81       	ldd	r31, Y+3	; 0x03
    1916:	87 81       	ldd	r24, Z+7	; 0x07
    1918:	90 85       	ldd	r25, Z+8	; 0x08
    191a:	8f 7b       	andi	r24, 0xBF	; 191
    191c:	ea 81       	ldd	r30, Y+2	; 0x02
    191e:	fb 81       	ldd	r31, Y+3	; 0x03
    1920:	90 87       	std	Z+8, r25	; 0x08
    1922:	87 83       	std	Z+7, r24	; 0x07
        ///Обработка флага останова целевого процесса
        if(  PROC_PRE_STOP_TEST(proc)  )
    1924:	ea 81       	ldd	r30, Y+2	; 0x02
    1926:	fb 81       	ldd	r31, Y+3	; 0x03
    1928:	87 81       	ldd	r24, Z+7	; 0x07
    192a:	90 85       	ldd	r25, Z+8	; 0x08
    192c:	80 78       	andi	r24, 0x80	; 128
    192e:	90 70       	andi	r25, 0x00	; 0
    1930:	00 97       	sbiw	r24, 0x00	; 0
    1932:	91 f0       	breq	.+36     	; 0x1958 <_ipc_exchange+0x82>
    1934:	ea 81       	ldd	r30, Y+2	; 0x02
    1936:	fb 81       	ldd	r31, Y+3	; 0x03
    1938:	87 81       	ldd	r24, Z+7	; 0x07
    193a:	90 85       	ldd	r25, Z+8	; 0x08
    193c:	8c 70       	andi	r24, 0x0C	; 12
    193e:	90 70       	andi	r25, 0x00	; 0
    1940:	00 97       	sbiw	r24, 0x00	; 0
    1942:	51 f4       	brne	.+20     	; 0x1958 <_ipc_exchange+0x82>
            Если был запрошен останов целевого процесса,
            и целевой процесс не удерживает общие ресурсы,
            то мы не будем возобновлять его работу
            и передавать ему информацию.
            */
            proc->flags &= ~PROC_FLG_PRE_STOP_MASK;
    1944:	ea 81       	ldd	r30, Y+2	; 0x02
    1946:	fb 81       	ldd	r31, Y+3	; 0x03
    1948:	87 81       	ldd	r24, Z+7	; 0x07
    194a:	90 85       	ldd	r25, Z+8	; 0x08
    194c:	8d 77       	andi	r24, 0x7D	; 125
    194e:	ea 81       	ldd	r30, Y+2	; 0x02
    1950:	fb 81       	ldd	r31, Y+3	; 0x03
    1952:	90 87       	std	Z+8, r25	; 0x08
    1954:	87 83       	std	Z+7, r24	; 0x07
    1956:	13 c0       	rjmp	.+38     	; 0x197e <_ipc_exchange+0xa8>
            goto end;
        }
        ret = (bool_t)1; // информация будет передана
    1958:	81 e0       	ldi	r24, 0x01	; 1
    195a:	89 83       	std	Y+1, r24	; 0x01
        *(ipc_data_t *)proc->buf = send;
    195c:	ea 81       	ldd	r30, Y+2	; 0x02
    195e:	fb 81       	ldd	r31, Y+3	; 0x03
    1960:	87 8d       	ldd	r24, Z+31	; 0x1f
    1962:	90 a1       	ldd	r25, Z+32	; 0x20
    1964:	fc 01       	movw	r30, r24
    1966:	8c 81       	ldd	r24, Y+4	; 0x04
    1968:	9d 81       	ldd	r25, Y+5	; 0x05
    196a:	91 83       	std	Z+1, r25	; 0x01
    196c:	80 83       	st	Z, r24
        _ipc_wait( receive ); // Готовимся к приему данных!
    196e:	8e 81       	ldd	r24, Y+6	; 0x06
    1970:	9f 81       	ldd	r25, Y+7	; 0x07
    1972:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <_ipc_wait>
        _proc_run( proc );   // И только после этого запускаем процесс-адресат!
    1976:	8a 81       	ldd	r24, Y+2	; 0x02
    1978:	9b 81       	ldd	r25, Y+3	; 0x03
    197a:	0e 94 47 12 	call	0x248e	; 0x248e <_proc_run>
    }
end:
    SPIN_UNLOCK( proc );
    197e:	8a 81       	ldd	r24, Y+2	; 0x02
    1980:	9b 81       	ldd	r25, Y+3	; 0x03
    1982:	83 96       	adiw	r24, 0x23	; 35
    1984:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
    return ret;
    1988:	89 81       	ldd	r24, Y+1	; 0x01
}
    198a:	27 96       	adiw	r28, 0x07	; 7
    198c:	0f b6       	in	r0, 0x3f	; 63
    198e:	f8 94       	cli
    1990:	de bf       	out	0x3e, r29	; 62
    1992:	0f be       	out	0x3f, r0	; 63
    1994:	cd bf       	out	0x3d, r28	; 61
    1996:	cf 91       	pop	r28
    1998:	df 91       	pop	r29
    199a:	08 95       	ret

0000199c <item_init>:
*****************************************************************************************/
#include "../include/bugurt.h"
//Методы элемента 2-связного списка
//инициация элемента
void item_init(item_t *item)
{
    199c:	df 93       	push	r29
    199e:	cf 93       	push	r28
    19a0:	00 d0       	rcall	.+0      	; 0x19a2 <item_init+0x6>
    19a2:	cd b7       	in	r28, 0x3d	; 61
    19a4:	de b7       	in	r29, 0x3e	; 62
    19a6:	9a 83       	std	Y+2, r25	; 0x02
    19a8:	89 83       	std	Y+1, r24	; 0x01
    item->prev = item;
    19aa:	e9 81       	ldd	r30, Y+1	; 0x01
    19ac:	fa 81       	ldd	r31, Y+2	; 0x02
    19ae:	89 81       	ldd	r24, Y+1	; 0x01
    19b0:	9a 81       	ldd	r25, Y+2	; 0x02
    19b2:	93 83       	std	Z+3, r25	; 0x03
    19b4:	82 83       	std	Z+2, r24	; 0x02
    item->next = item;
    19b6:	e9 81       	ldd	r30, Y+1	; 0x01
    19b8:	fa 81       	ldd	r31, Y+2	; 0x02
    19ba:	89 81       	ldd	r24, Y+1	; 0x01
    19bc:	9a 81       	ldd	r25, Y+2	; 0x02
    19be:	91 83       	std	Z+1, r25	; 0x01
    19c0:	80 83       	st	Z, r24
}
    19c2:	0f 90       	pop	r0
    19c4:	0f 90       	pop	r0
    19c6:	cf 91       	pop	r28
    19c8:	df 91       	pop	r29
    19ca:	08 95       	ret

000019cc <item_insert>:
//Вставить элемент
void item_insert(item_t *item, item_t *head)
{
    19cc:	df 93       	push	r29
    19ce:	cf 93       	push	r28
    19d0:	00 d0       	rcall	.+0      	; 0x19d2 <item_insert+0x6>
    19d2:	00 d0       	rcall	.+0      	; 0x19d4 <item_insert+0x8>
    19d4:	00 d0       	rcall	.+0      	; 0x19d6 <item_insert+0xa>
    19d6:	cd b7       	in	r28, 0x3d	; 61
    19d8:	de b7       	in	r29, 0x3e	; 62
    19da:	9c 83       	std	Y+4, r25	; 0x04
    19dc:	8b 83       	std	Y+3, r24	; 0x03
    19de:	7e 83       	std	Y+6, r23	; 0x06
    19e0:	6d 83       	std	Y+5, r22	; 0x05
    // "хвост" списка
    item_t * tail;
    tail = head->prev;
    19e2:	ed 81       	ldd	r30, Y+5	; 0x05
    19e4:	fe 81       	ldd	r31, Y+6	; 0x06
    19e6:	82 81       	ldd	r24, Z+2	; 0x02
    19e8:	93 81       	ldd	r25, Z+3	; 0x03
    19ea:	9a 83       	std	Y+2, r25	; 0x02
    19ec:	89 83       	std	Y+1, r24	; 0x01
    // Вставляем элемент между "головой" и "хвостом"
    item->prev = tail;
    19ee:	eb 81       	ldd	r30, Y+3	; 0x03
    19f0:	fc 81       	ldd	r31, Y+4	; 0x04
    19f2:	89 81       	ldd	r24, Y+1	; 0x01
    19f4:	9a 81       	ldd	r25, Y+2	; 0x02
    19f6:	93 83       	std	Z+3, r25	; 0x03
    19f8:	82 83       	std	Z+2, r24	; 0x02
    item->next = head;
    19fa:	eb 81       	ldd	r30, Y+3	; 0x03
    19fc:	fc 81       	ldd	r31, Y+4	; 0x04
    19fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1a00:	9e 81       	ldd	r25, Y+6	; 0x06
    1a02:	91 83       	std	Z+1, r25	; 0x01
    1a04:	80 83       	st	Z, r24

    head->prev = item;
    1a06:	ed 81       	ldd	r30, Y+5	; 0x05
    1a08:	fe 81       	ldd	r31, Y+6	; 0x06
    1a0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a0e:	93 83       	std	Z+3, r25	; 0x03
    1a10:	82 83       	std	Z+2, r24	; 0x02
    tail->next = item;
    1a12:	e9 81       	ldd	r30, Y+1	; 0x01
    1a14:	fa 81       	ldd	r31, Y+2	; 0x02
    1a16:	8b 81       	ldd	r24, Y+3	; 0x03
    1a18:	9c 81       	ldd	r25, Y+4	; 0x04
    1a1a:	91 83       	std	Z+1, r25	; 0x01
    1a1c:	80 83       	st	Z, r24
}
    1a1e:	26 96       	adiw	r28, 0x06	; 6
    1a20:	0f b6       	in	r0, 0x3f	; 63
    1a22:	f8 94       	cli
    1a24:	de bf       	out	0x3e, r29	; 62
    1a26:	0f be       	out	0x3f, r0	; 63
    1a28:	cd bf       	out	0x3d, r28	; 61
    1a2a:	cf 91       	pop	r28
    1a2c:	df 91       	pop	r29
    1a2e:	08 95       	ret

00001a30 <item_cut>:
//Вырезать элемент
void item_cut( item_t *item )
{
    1a30:	df 93       	push	r29
    1a32:	cf 93       	push	r28
    1a34:	00 d0       	rcall	.+0      	; 0x1a36 <item_cut+0x6>
    1a36:	00 d0       	rcall	.+0      	; 0x1a38 <item_cut+0x8>
    1a38:	00 d0       	rcall	.+0      	; 0x1a3a <item_cut+0xa>
    1a3a:	cd b7       	in	r28, 0x3d	; 61
    1a3c:	de b7       	in	r29, 0x3e	; 62
    1a3e:	9e 83       	std	Y+6, r25	; 0x06
    1a40:	8d 83       	std	Y+5, r24	; 0x05
    item_t * prev;
    item_t * next;
    prev = item->prev; //Предыдущий элемент
    1a42:	ed 81       	ldd	r30, Y+5	; 0x05
    1a44:	fe 81       	ldd	r31, Y+6	; 0x06
    1a46:	82 81       	ldd	r24, Z+2	; 0x02
    1a48:	93 81       	ldd	r25, Z+3	; 0x03
    1a4a:	9c 83       	std	Y+4, r25	; 0x04
    1a4c:	8b 83       	std	Y+3, r24	; 0x03
    next = item->next; //Следующий элемент
    1a4e:	ed 81       	ldd	r30, Y+5	; 0x05
    1a50:	fe 81       	ldd	r31, Y+6	; 0x06
    1a52:	80 81       	ld	r24, Z
    1a54:	91 81       	ldd	r25, Z+1	; 0x01
    1a56:	9a 83       	std	Y+2, r25	; 0x02
    1a58:	89 83       	std	Y+1, r24	; 0x01

    next->prev = prev;
    1a5a:	e9 81       	ldd	r30, Y+1	; 0x01
    1a5c:	fa 81       	ldd	r31, Y+2	; 0x02
    1a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a60:	9c 81       	ldd	r25, Y+4	; 0x04
    1a62:	93 83       	std	Z+3, r25	; 0x03
    1a64:	82 83       	std	Z+2, r24	; 0x02
    prev->next = next;
    1a66:	eb 81       	ldd	r30, Y+3	; 0x03
    1a68:	fc 81       	ldd	r31, Y+4	; 0x04
    1a6a:	89 81       	ldd	r24, Y+1	; 0x01
    1a6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a6e:	91 83       	std	Z+1, r25	; 0x01
    1a70:	80 83       	st	Z, r24

    item->prev = item;
    1a72:	ed 81       	ldd	r30, Y+5	; 0x05
    1a74:	fe 81       	ldd	r31, Y+6	; 0x06
    1a76:	8d 81       	ldd	r24, Y+5	; 0x05
    1a78:	9e 81       	ldd	r25, Y+6	; 0x06
    1a7a:	93 83       	std	Z+3, r25	; 0x03
    1a7c:	82 83       	std	Z+2, r24	; 0x02
    item->next = item;
    1a7e:	ed 81       	ldd	r30, Y+5	; 0x05
    1a80:	fe 81       	ldd	r31, Y+6	; 0x06
    1a82:	8d 81       	ldd	r24, Y+5	; 0x05
    1a84:	9e 81       	ldd	r25, Y+6	; 0x06
    1a86:	91 83       	std	Z+1, r25	; 0x01
    1a88:	80 83       	st	Z, r24
}
    1a8a:	26 96       	adiw	r28, 0x06	; 6
    1a8c:	0f b6       	in	r0, 0x3f	; 63
    1a8e:	f8 94       	cli
    1a90:	de bf       	out	0x3e, r29	; 62
    1a92:	0f be       	out	0x3f, r0	; 63
    1a94:	cd bf       	out	0x3d, r28	; 61
    1a96:	cf 91       	pop	r28
    1a98:	df 91       	pop	r29
    1a9a:	08 95       	ret

00001a9c <idle_main>:
*****************************************************************************************/
#include "../include/bugurt.h"
kernel_t kernel;// Ядро, оно одно на всю систему!!!

WEAK void idle_main(void * arg)
{
    1a9c:	df 93       	push	r29
    1a9e:	cf 93       	push	r28
    1aa0:	00 d0       	rcall	.+0      	; 0x1aa2 <idle_main+0x6>
    1aa2:	cd b7       	in	r28, 0x3d	; 61
    1aa4:	de b7       	in	r29, 0x3e	; 62
    1aa6:	9a 83       	std	Y+2, r25	; 0x02
    1aa8:	89 83       	std	Y+1, r24	; 0x01
    1aaa:	ff cf       	rjmp	.-2      	; 0x1aaa <idle_main+0xe>

00001aac <kernel_init>:
    while(1);
}

void kernel_init(void)
{
    1aac:	8f 92       	push	r8
    1aae:	af 92       	push	r10
    1ab0:	bf 92       	push	r11
    1ab2:	cf 92       	push	r12
    1ab4:	ef 92       	push	r14
    1ab6:	ff 92       	push	r15
    1ab8:	0f 93       	push	r16
    1aba:	1f 93       	push	r17
    1abc:	df 93       	push	r29
    1abe:	cf 93       	push	r28
    1ac0:	0f 92       	push	r0
    1ac2:	cd b7       	in	r28, 0x3d	; 61
    1ac4:	de b7       	in	r29, 0x3e	; 62
#ifdef CONFIG_MP
    core_id_t i;

    spin_init( &kernel.stat_lock );
    1ac6:	8b e7       	ldi	r24, 0x7B	; 123
    1ac8:	93 e0       	ldi	r25, 0x03	; 3
    1aca:	0e 94 0b 01 	call	0x216	; 0x216 <spin_init>
    spin_lock( &kernel.stat_lock );
    1ace:	8b e7       	ldi	r24, 0x7B	; 123
    1ad0:	93 e0       	ldi	r25, 0x03	; 3
    1ad2:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    //Инициация собственно ядра
    for( i = (core_id_t)0; i<(core_id_t)MAX_CORES; i++ )
    1ad6:	19 82       	std	Y+1, r1	; 0x01
    1ad8:	76 c0       	rjmp	.+236    	; 0x1bc6 <kernel_init+0x11a>
    {
        proc_init_isr(
    1ada:	89 81       	ldd	r24, Y+1	; 0x01
    1adc:	28 2f       	mov	r18, r24
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	80 e3       	ldi	r24, 0x30	; 48
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	ac 01       	movw	r20, r24
    1ae6:	24 9f       	mul	r18, r20
    1ae8:	c0 01       	movw	r24, r0
    1aea:	25 9f       	mul	r18, r21
    1aec:	90 0d       	add	r25, r0
    1aee:	34 9f       	mul	r19, r20
    1af0:	90 0d       	add	r25, r0
    1af2:	11 24       	eor	r1, r1
    1af4:	ac 01       	movw	r20, r24
    1af6:	47 5e       	subi	r20, 0xE7	; 231
    1af8:	5c 4f       	sbci	r21, 0xFC	; 252
    1afa:	89 81       	ldd	r24, Y+1	; 0x01
    1afc:	28 2f       	mov	r18, r24
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	81 e0       	ldi	r24, 0x01	; 1
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	02 c0       	rjmp	.+4      	; 0x1b0a <kernel_init+0x5e>
    1b06:	88 0f       	add	r24, r24
    1b08:	99 1f       	adc	r25, r25
    1b0a:	2a 95       	dec	r18
    1b0c:	e2 f7       	brpl	.-8      	; 0x1b06 <kernel_init+0x5a>
    1b0e:	0f 92       	push	r0
    1b10:	ed b7       	in	r30, 0x3d	; 61
    1b12:	fe b7       	in	r31, 0x3e	; 62
    1b14:	31 96       	adiw	r30, 0x01	; 1
    1b16:	2e e4       	ldi	r18, 0x4E	; 78
    1b18:	3d e0       	ldi	r19, 0x0D	; 13
    1b1a:	80 83       	st	Z, r24
    1b1c:	ca 01       	movw	r24, r20
    1b1e:	b9 01       	movw	r22, r18
    1b20:	40 e0       	ldi	r20, 0x00	; 0
    1b22:	50 e0       	ldi	r21, 0x00	; 0
    1b24:	20 e0       	ldi	r18, 0x00	; 0
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	00 e0       	ldi	r16, 0x00	; 0
    1b2a:	10 e0       	ldi	r17, 0x00	; 0
    1b2c:	ee 24       	eor	r14, r14
    1b2e:	ff 24       	eor	r15, r15
    1b30:	0f 2e       	mov	r0, r31
    1b32:	f7 e0       	ldi	r31, 0x07	; 7
    1b34:	cf 2e       	mov	r12, r31
    1b36:	f0 2d       	mov	r31, r0
    1b38:	aa 24       	eor	r10, r10
    1b3a:	bb 24       	eor	r11, r11
    1b3c:	a3 94       	inc	r10
    1b3e:	88 24       	eor	r8, r8
    1b40:	0e 94 6f 11 	call	0x22de	; 0x22de <proc_init_isr>
    1b44:	0f 90       	pop	r0
            ((prio_t)BITS_IN_INDEX_T - (prio_t)1),// низший приоритет
            (timer_t)1,//минимальный квант времени
            (bool_t)0,// не RT
            ((affinity_t)1)<<i // привязка  строго к одному процессору, а то его как сбалансирует отсюда
        );
        kernel.idle[i].core_id = i;
    1b46:	89 81       	ldd	r24, Y+1	; 0x01
    1b48:	28 2f       	mov	r18, r24
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	80 e3       	ldi	r24, 0x30	; 48
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	bc 01       	movw	r22, r24
    1b52:	26 9f       	mul	r18, r22
    1b54:	c0 01       	movw	r24, r0
    1b56:	27 9f       	mul	r18, r23
    1b58:	90 0d       	add	r25, r0
    1b5a:	36 9f       	mul	r19, r22
    1b5c:	90 0d       	add	r25, r0
    1b5e:	11 24       	eor	r1, r1
    1b60:	fc 01       	movw	r30, r24
    1b62:	e6 5c       	subi	r30, 0xC6	; 198
    1b64:	fc 4f       	sbci	r31, 0xFC	; 252
    1b66:	89 81       	ldd	r24, Y+1	; 0x01
    1b68:	80 83       	st	Z, r24
        stat_init( (stat_t *)kernel.stat + i );
    1b6a:	89 81       	ldd	r24, Y+1	; 0x01
    1b6c:	88 2f       	mov	r24, r24
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	87 58       	subi	r24, 0x87	; 135
    1b72:	9c 4f       	sbci	r25, 0xFC	; 252
    1b74:	0e 94 49 01 	call	0x292	; 0x292 <stat_init>
        sched_init( (sched_t *)kernel.sched + i, (proc_t *)kernel.idle + i );
    1b78:	89 81       	ldd	r24, Y+1	; 0x01
    1b7a:	28 2f       	mov	r18, r24
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	8b e2       	ldi	r24, 0x2B	; 43
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	ac 01       	movw	r20, r24
    1b84:	24 9f       	mul	r18, r20
    1b86:	c0 01       	movw	r24, r0
    1b88:	25 9f       	mul	r18, r21
    1b8a:	90 0d       	add	r25, r0
    1b8c:	34 9f       	mul	r19, r20
    1b8e:	90 0d       	add	r25, r0
    1b90:	11 24       	eor	r1, r1
    1b92:	ac 01       	movw	r20, r24
    1b94:	4d 53       	subi	r20, 0x3D	; 61
    1b96:	5d 4f       	sbci	r21, 0xFD	; 253
    1b98:	89 81       	ldd	r24, Y+1	; 0x01
    1b9a:	28 2f       	mov	r18, r24
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	80 e3       	ldi	r24, 0x30	; 48
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	bc 01       	movw	r22, r24
    1ba4:	26 9f       	mul	r18, r22
    1ba6:	c0 01       	movw	r24, r0
    1ba8:	27 9f       	mul	r18, r23
    1baa:	90 0d       	add	r25, r0
    1bac:	36 9f       	mul	r19, r22
    1bae:	90 0d       	add	r25, r0
    1bb0:	11 24       	eor	r1, r1
    1bb2:	9c 01       	movw	r18, r24
    1bb4:	27 5e       	subi	r18, 0xE7	; 231
    1bb6:	3c 4f       	sbci	r19, 0xFC	; 252
    1bb8:	ca 01       	movw	r24, r20
    1bba:	b9 01       	movw	r22, r18
    1bbc:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <sched_init>
    core_id_t i;

    spin_init( &kernel.stat_lock );
    spin_lock( &kernel.stat_lock );
    //Инициация собственно ядра
    for( i = (core_id_t)0; i<(core_id_t)MAX_CORES; i++ )
    1bc0:	89 81       	ldd	r24, Y+1	; 0x01
    1bc2:	8f 5f       	subi	r24, 0xFF	; 255
    1bc4:	89 83       	std	Y+1, r24	; 0x01
    1bc6:	89 81       	ldd	r24, Y+1	; 0x01
    1bc8:	82 30       	cpi	r24, 0x02	; 2
    1bca:	08 f4       	brcc	.+2      	; 0x1bce <kernel_init+0x122>
    1bcc:	86 cf       	rjmp	.-244    	; 0x1ada <kernel_init+0x2e>
        );
        kernel.idle[i].core_id = i;
        stat_init( (stat_t *)kernel.stat + i );
        sched_init( (sched_t *)kernel.sched + i, (proc_t *)kernel.idle + i );
    }
    spin_unlock( &kernel.stat_lock );
    1bce:	8b e7       	ldi	r24, 0x7B	; 123
    1bd0:	93 e0       	ldi	r25, 0x03	; 3
    1bd2:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
        (timer_t)1,//минимальный квант времени
        (bool_t)0// не RT
    );
    sched_init( (sched_t *)&kernel.sched, (proc_t *)&kernel.idle );
#endif // CONFIG_MP
}
    1bd6:	0f 90       	pop	r0
    1bd8:	cf 91       	pop	r28
    1bda:	df 91       	pop	r29
    1bdc:	1f 91       	pop	r17
    1bde:	0f 91       	pop	r16
    1be0:	ff 90       	pop	r15
    1be2:	ef 90       	pop	r14
    1be4:	cf 90       	pop	r12
    1be6:	bf 90       	pop	r11
    1be8:	af 90       	pop	r10
    1bea:	8f 90       	pop	r8
    1bec:	08 95       	ret

00001bee <mutex_init_isr>:
    mutex_t * mutex
#ifdef CONFIG_USE_HIGHEST_LOCKER
    ,prio_t prio
#endif // CONFIG_USE_HIGHEST_LOCKER
)
{
    1bee:	df 93       	push	r29
    1bf0:	cf 93       	push	r28
    1bf2:	00 d0       	rcall	.+0      	; 0x1bf4 <mutex_init_isr+0x6>
    1bf4:	0f 92       	push	r0
    1bf6:	cd b7       	in	r28, 0x3d	; 61
    1bf8:	de b7       	in	r29, 0x3e	; 62
    1bfa:	9a 83       	std	Y+2, r25	; 0x02
    1bfc:	89 83       	std	Y+1, r24	; 0x01
    1bfe:	6b 83       	std	Y+3, r22	; 0x03
    SPIN_INIT( mutex );
    1c00:	89 81       	ldd	r24, Y+1	; 0x01
    1c02:	9a 81       	ldd	r25, Y+2	; 0x02
    1c04:	43 96       	adiw	r24, 0x13	; 19
    1c06:	0e 94 0b 01 	call	0x216	; 0x216 <spin_init>
    SPIN_LOCK( mutex );
    1c0a:	89 81       	ldd	r24, Y+1	; 0x01
    1c0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c0e:	43 96       	adiw	r24, 0x13	; 19
    1c10:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    xlist_init( (xlist_t *)mutex );
    1c14:	89 81       	ldd	r24, Y+1	; 0x01
    1c16:	9a 81       	ldd	r25, Y+2	; 0x02
    1c18:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <xlist_init>
    mutex->free = (bool_t)1;
    1c1c:	e9 81       	ldd	r30, Y+1	; 0x01
    1c1e:	fa 81       	ldd	r31, Y+2	; 0x02
    1c20:	81 e0       	ldi	r24, 0x01	; 1
    1c22:	82 8b       	std	Z+18, r24	; 0x12
#ifdef CONFIG_USE_HIGHEST_LOCKER
    mutex->prio = prio;
    1c24:	e9 81       	ldd	r30, Y+1	; 0x01
    1c26:	fa 81       	ldd	r31, Y+2	; 0x02
    1c28:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2a:	81 8b       	std	Z+17, r24	; 0x11
#endif // CONFIG_USE_HIGHEST_LOCKER
    SPIN_UNLOCK( mutex );
    1c2c:	89 81       	ldd	r24, Y+1	; 0x01
    1c2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c30:	43 96       	adiw	r24, 0x13	; 19
    1c32:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
}
    1c36:	0f 90       	pop	r0
    1c38:	0f 90       	pop	r0
    1c3a:	0f 90       	pop	r0
    1c3c:	cf 91       	pop	r28
    1c3e:	df 91       	pop	r29
    1c40:	08 95       	ret

00001c42 <_mutex_lock>:

// К моменту вызова захвачена блокировка mutex-а, запрещены прерывания
bool_t _mutex_lock( mutex_t * mutex )
{
    1c42:	df 93       	push	r29
    1c44:	cf 93       	push	r28
    1c46:	00 d0       	rcall	.+0      	; 0x1c48 <_mutex_lock+0x6>
    1c48:	00 d0       	rcall	.+0      	; 0x1c4a <_mutex_lock+0x8>
    1c4a:	0f 92       	push	r0
    1c4c:	cd b7       	in	r28, 0x3d	; 61
    1c4e:	de b7       	in	r29, 0x3e	; 62
    1c50:	9d 83       	std	Y+5, r25	; 0x05
    1c52:	8c 83       	std	Y+4, r24	; 0x04
    bool_t ret;
    proc_t * proc;
    // Захват блокировки мьютекса
    SPIN_LOCK( mutex );
    1c54:	8c 81       	ldd	r24, Y+4	; 0x04
    1c56:	9d 81       	ldd	r25, Y+5	; 0x05
    1c58:	43 96       	adiw	r24, 0x13	; 19
    1c5a:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    ret = mutex->free;
    1c5e:	ec 81       	ldd	r30, Y+4	; 0x04
    1c60:	fd 81       	ldd	r31, Y+5	; 0x05
    1c62:	82 89       	ldd	r24, Z+18	; 0x12
    1c64:	8b 83       	std	Y+3, r24	; 0x03
    proc = current_proc();
    1c66:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <current_proc>
    1c6a:	9a 83       	std	Y+2, r25	; 0x02
    1c6c:	89 83       	std	Y+1, r24	; 0x01
    // Захват блокировки процесса
    SPIN_LOCK( proc );
    1c6e:	89 81       	ldd	r24, Y+1	; 0x01
    1c70:	9a 81       	ldd	r25, Y+2	; 0x02
    1c72:	83 96       	adiw	r24, 0x23	; 35
    1c74:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    PROC_LRES_INC( proc, GET_PRIO( mutex ) );
    1c78:	ec 81       	ldd	r30, Y+4	; 0x04
    1c7a:	fd 81       	ldd	r31, Y+5	; 0x05
    1c7c:	21 89       	ldd	r18, Z+17	; 0x11
    1c7e:	89 81       	ldd	r24, Y+1	; 0x01
    1c80:	9a 81       	ldd	r25, Y+2	; 0x02
    1c82:	62 2f       	mov	r22, r18
    1c84:	0e 94 5f 14 	call	0x28be	; 0x28be <_proc_lres_inc>

    if( ret )
    1c88:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8a:	88 23       	and	r24, r24
    1c8c:	41 f0       	breq	.+16     	; 0x1c9e <_mutex_lock+0x5c>
    {
        mutex->free = (bool_t)0;
    1c8e:	ec 81       	ldd	r30, Y+4	; 0x04
    1c90:	fd 81       	ldd	r31, Y+5	; 0x05
    1c92:	12 8a       	std	Z+18, r1	; 0x12
        PROC_PRIO_CONTROL_RUNNING( proc );
    1c94:	89 81       	ldd	r24, Y+1	; 0x01
    1c96:	9a 81       	ldd	r25, Y+2	; 0x02
    1c98:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <_proc_prio_control_running>
    1c9c:	14 c0       	rjmp	.+40     	; 0x1cc6 <_mutex_lock+0x84>
    }
    else
    {
        proc->flags |= PROC_FLG_QUEUE;
    1c9e:	e9 81       	ldd	r30, Y+1	; 0x01
    1ca0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ca2:	87 81       	ldd	r24, Z+7	; 0x07
    1ca4:	90 85       	ldd	r25, Z+8	; 0x08
    1ca6:	80 61       	ori	r24, 0x10	; 16
    1ca8:	e9 81       	ldd	r30, Y+1	; 0x01
    1caa:	fa 81       	ldd	r31, Y+2	; 0x02
    1cac:	90 87       	std	Z+8, r25	; 0x08
    1cae:	87 83       	std	Z+7, r24	; 0x07
        _proc_stop( proc );
    1cb0:	89 81       	ldd	r24, Y+1	; 0x01
    1cb2:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb4:	0e 94 54 13 	call	0x26a8	; 0x26a8 <_proc_stop>
        pitem_insert( (pitem_t *)proc, (xlist_t *)mutex );
    1cb8:	89 81       	ldd	r24, Y+1	; 0x01
    1cba:	9a 81       	ldd	r25, Y+2	; 0x02
    1cbc:	2c 81       	ldd	r18, Y+4	; 0x04
    1cbe:	3d 81       	ldd	r19, Y+5	; 0x05
    1cc0:	b9 01       	movw	r22, r18
    1cc2:	0e 94 0d 10 	call	0x201a	; 0x201a <pitem_insert>
    }
    SPIN_UNLOCK( proc );
    1cc6:	89 81       	ldd	r24, Y+1	; 0x01
    1cc8:	9a 81       	ldd	r25, Y+2	; 0x02
    1cca:	83 96       	adiw	r24, 0x23	; 35
    1ccc:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
    SPIN_UNLOCK( mutex );
    1cd0:	8c 81       	ldd	r24, Y+4	; 0x04
    1cd2:	9d 81       	ldd	r25, Y+5	; 0x05
    1cd4:	43 96       	adiw	r24, 0x13	; 19
    1cd6:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
    return ret;
    1cda:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1cdc:	0f 90       	pop	r0
    1cde:	0f 90       	pop	r0
    1ce0:	0f 90       	pop	r0
    1ce2:	0f 90       	pop	r0
    1ce4:	0f 90       	pop	r0
    1ce6:	cf 91       	pop	r28
    1ce8:	df 91       	pop	r29
    1cea:	08 95       	ret

00001cec <_mutex_try_lock>:

bool_t _mutex_try_lock( mutex_t * mutex )
{
    1cec:	df 93       	push	r29
    1cee:	cf 93       	push	r28
    1cf0:	00 d0       	rcall	.+0      	; 0x1cf2 <_mutex_try_lock+0x6>
    1cf2:	00 d0       	rcall	.+0      	; 0x1cf4 <_mutex_try_lock+0x8>
    1cf4:	0f 92       	push	r0
    1cf6:	cd b7       	in	r28, 0x3d	; 61
    1cf8:	de b7       	in	r29, 0x3e	; 62
    1cfa:	9d 83       	std	Y+5, r25	; 0x05
    1cfc:	8c 83       	std	Y+4, r24	; 0x04
    bool_t ret;
    proc_t * proc;

    SPIN_LOCK( mutex );
    1cfe:	8c 81       	ldd	r24, Y+4	; 0x04
    1d00:	9d 81       	ldd	r25, Y+5	; 0x05
    1d02:	43 96       	adiw	r24, 0x13	; 19
    1d04:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    ret = mutex->free;
    1d08:	ec 81       	ldd	r30, Y+4	; 0x04
    1d0a:	fd 81       	ldd	r31, Y+5	; 0x05
    1d0c:	82 89       	ldd	r24, Z+18	; 0x12
    1d0e:	8b 83       	std	Y+3, r24	; 0x03
    proc = current_proc();
    1d10:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <current_proc>
    1d14:	9a 83       	std	Y+2, r25	; 0x02
    1d16:	89 83       	std	Y+1, r24	; 0x01

    SPIN_LOCK( proc );
    1d18:	89 81       	ldd	r24, Y+1	; 0x01
    1d1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d1c:	83 96       	adiw	r24, 0x23	; 35
    1d1e:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    if( ret )
    1d22:	8b 81       	ldd	r24, Y+3	; 0x03
    1d24:	88 23       	and	r24, r24
    1d26:	79 f0       	breq	.+30     	; 0x1d46 <_mutex_try_lock+0x5a>
    {
        mutex->free = (bool_t)0;
    1d28:	ec 81       	ldd	r30, Y+4	; 0x04
    1d2a:	fd 81       	ldd	r31, Y+5	; 0x05
    1d2c:	12 8a       	std	Z+18, r1	; 0x12
        PROC_LRES_INC( proc, GET_PRIO( mutex ) );
    1d2e:	ec 81       	ldd	r30, Y+4	; 0x04
    1d30:	fd 81       	ldd	r31, Y+5	; 0x05
    1d32:	21 89       	ldd	r18, Z+17	; 0x11
    1d34:	89 81       	ldd	r24, Y+1	; 0x01
    1d36:	9a 81       	ldd	r25, Y+2	; 0x02
    1d38:	62 2f       	mov	r22, r18
    1d3a:	0e 94 5f 14 	call	0x28be	; 0x28be <_proc_lres_inc>
        PROC_PRIO_CONTROL_RUNNING( proc );
    1d3e:	89 81       	ldd	r24, Y+1	; 0x01
    1d40:	9a 81       	ldd	r25, Y+2	; 0x02
    1d42:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <_proc_prio_control_running>
    }
    SPIN_UNLOCK( proc );
    1d46:	89 81       	ldd	r24, Y+1	; 0x01
    1d48:	9a 81       	ldd	r25, Y+2	; 0x02
    1d4a:	83 96       	adiw	r24, 0x23	; 35
    1d4c:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
    SPIN_UNLOCK( mutex );
    1d50:	8c 81       	ldd	r24, Y+4	; 0x04
    1d52:	9d 81       	ldd	r25, Y+5	; 0x05
    1d54:	43 96       	adiw	r24, 0x13	; 19
    1d56:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
    return ret;
    1d5a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1d5c:	0f 90       	pop	r0
    1d5e:	0f 90       	pop	r0
    1d60:	0f 90       	pop	r0
    1d62:	0f 90       	pop	r0
    1d64:	0f 90       	pop	r0
    1d66:	cf 91       	pop	r28
    1d68:	df 91       	pop	r29
    1d6a:	08 95       	ret

00001d6c <_mutex_unlock>:

void _mutex_unlock( mutex_t *  mutex )
{
    1d6c:	df 93       	push	r29
    1d6e:	cf 93       	push	r28
    1d70:	00 d0       	rcall	.+0      	; 0x1d72 <_mutex_unlock+0x6>
    1d72:	00 d0       	rcall	.+0      	; 0x1d74 <_mutex_unlock+0x8>
    1d74:	cd b7       	in	r28, 0x3d	; 61
    1d76:	de b7       	in	r29, 0x3e	; 62
    1d78:	9c 83       	std	Y+4, r25	; 0x04
    1d7a:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc;

    SPIN_LOCK( mutex );
    1d7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d80:	43 96       	adiw	r24, 0x13	; 19
    1d82:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    proc = current_proc();
    1d86:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <current_proc>
    1d8a:	9a 83       	std	Y+2, r25	; 0x02
    1d8c:	89 83       	std	Y+1, r24	; 0x01

    SPIN_LOCK(proc);
    1d8e:	89 81       	ldd	r24, Y+1	; 0x01
    1d90:	9a 81       	ldd	r25, Y+2	; 0x02
    1d92:	83 96       	adiw	r24, 0x23	; 35
    1d94:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    PROC_LRES_DEC( proc, GET_PRIO( mutex ) );
    1d98:	eb 81       	ldd	r30, Y+3	; 0x03
    1d9a:	fc 81       	ldd	r31, Y+4	; 0x04
    1d9c:	21 89       	ldd	r18, Z+17	; 0x11
    1d9e:	89 81       	ldd	r24, Y+1	; 0x01
    1da0:	9a 81       	ldd	r25, Y+2	; 0x02
    1da2:	62 2f       	mov	r22, r18
    1da4:	0e 94 82 14 	call	0x2904	; 0x2904 <_proc_lres_dec>
    // Если проготовлен и готов к остановке - останавливаем
    if(  PROC_PRE_STOP_TEST(proc)  )
    1da8:	e9 81       	ldd	r30, Y+1	; 0x01
    1daa:	fa 81       	ldd	r31, Y+2	; 0x02
    1dac:	87 81       	ldd	r24, Z+7	; 0x07
    1dae:	90 85       	ldd	r25, Z+8	; 0x08
    1db0:	80 78       	andi	r24, 0x80	; 128
    1db2:	90 70       	andi	r25, 0x00	; 0
    1db4:	00 97       	sbiw	r24, 0x00	; 0
    1db6:	f9 f0       	breq	.+62     	; 0x1df6 <_mutex_unlock+0x8a>
    1db8:	e9 81       	ldd	r30, Y+1	; 0x01
    1dba:	fa 81       	ldd	r31, Y+2	; 0x02
    1dbc:	87 81       	ldd	r24, Z+7	; 0x07
    1dbe:	90 85       	ldd	r25, Z+8	; 0x08
    1dc0:	8c 70       	andi	r24, 0x0C	; 12
    1dc2:	90 70       	andi	r25, 0x00	; 0
    1dc4:	00 97       	sbiw	r24, 0x00	; 0
    1dc6:	b9 f4       	brne	.+46     	; 0x1df6 <_mutex_unlock+0x8a>
    {
        proc->flags &= ~PROC_FLG_PRE_STOP_MASK;
    1dc8:	e9 81       	ldd	r30, Y+1	; 0x01
    1dca:	fa 81       	ldd	r31, Y+2	; 0x02
    1dcc:	87 81       	ldd	r24, Z+7	; 0x07
    1dce:	90 85       	ldd	r25, Z+8	; 0x08
    1dd0:	8d 77       	andi	r24, 0x7D	; 125
    1dd2:	e9 81       	ldd	r30, Y+1	; 0x01
    1dd4:	fa 81       	ldd	r31, Y+2	; 0x02
    1dd6:	90 87       	std	Z+8, r25	; 0x08
    1dd8:	87 83       	std	Z+7, r24	; 0x07
        _proc_stop_( proc );
    1dda:	89 81       	ldd	r24, Y+1	; 0x01
    1ddc:	9a 81       	ldd	r25, Y+2	; 0x02
    1dde:	0e 94 10 13 	call	0x2620	; 0x2620 <_proc_stop_>
        PROC_PRIO_CONTROL_STOPED( proc );
    1de2:	89 81       	ldd	r24, Y+1	; 0x01
    1de4:	9a 81       	ldd	r25, Y+2	; 0x02
    1de6:	0e 94 a5 14 	call	0x294a	; 0x294a <_proc_prio_control_stoped>
        // Нужна перепланировка, процесс остановили и не запустили обратно
        RESCHED_PROC( proc );
    1dea:	e9 81       	ldd	r30, Y+1	; 0x01
    1dec:	fa 81       	ldd	r31, Y+2	; 0x02
    1dee:	81 a1       	ldd	r24, Z+33	; 0x21
    1df0:	0e 94 b4 01 	call	0x368	; 0x368 <resched>
    1df4:	04 c0       	rjmp	.+8      	; 0x1dfe <_mutex_unlock+0x92>
    }
    else
    {
        // Не останавливаем - меняем проиритет на ходу
        PROC_PRIO_CONTROL_RUNNING( proc );
    1df6:	89 81       	ldd	r24, Y+1	; 0x01
    1df8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dfa:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <_proc_prio_control_running>
    }
    SPIN_UNLOCK( proc );
    1dfe:	89 81       	ldd	r24, Y+1	; 0x01
    1e00:	9a 81       	ldd	r25, Y+2	; 0x02
    1e02:	83 96       	adiw	r24, 0x23	; 35
    1e04:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
    // Обрабока самого мьютекса
    if( ((xlist_t *)mutex)->index == (index_t)0  )
    1e08:	eb 81       	ldd	r30, Y+3	; 0x03
    1e0a:	fc 81       	ldd	r31, Y+4	; 0x04
    1e0c:	80 89       	ldd	r24, Z+16	; 0x10
    1e0e:	88 23       	and	r24, r24
    1e10:	29 f4       	brne	.+10     	; 0x1e1c <_mutex_unlock+0xb0>
    {
        // Список ожидающих пуст, выходим
        mutex->free = (bool_t)1;
    1e12:	eb 81       	ldd	r30, Y+3	; 0x03
    1e14:	fc 81       	ldd	r31, Y+4	; 0x04
    1e16:	81 e0       	ldi	r24, 0x01	; 1
    1e18:	82 8b       	std	Z+18, r24	; 0x12
    1e1a:	25 c0       	rjmp	.+74     	; 0x1e66 <_mutex_unlock+0xfa>
        goto end;
    }
    // Список ожидающих не пуст, запускаем голову
    proc = (proc_t *)xlist_head( (xlist_t *)mutex );
    1e1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e20:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <xlist_head>
    1e24:	9a 83       	std	Y+2, r25	; 0x02
    1e26:	89 83       	std	Y+1, r24	; 0x01
    SPIN_LOCK( proc );
    1e28:	89 81       	ldd	r24, Y+1	; 0x01
    1e2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e2c:	83 96       	adiw	r24, 0x23	; 35
    1e2e:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    // Сначала надо вырезать
    pitem_cut( (pitem_t *)proc );
    1e32:	89 81       	ldd	r24, Y+1	; 0x01
    1e34:	9a 81       	ldd	r25, Y+2	; 0x02
    1e36:	0e 94 c2 10 	call	0x2184	; 0x2184 <pitem_cut>
    proc->flags &= ~PROC_FLG_QUEUE;
    1e3a:	e9 81       	ldd	r30, Y+1	; 0x01
    1e3c:	fa 81       	ldd	r31, Y+2	; 0x02
    1e3e:	87 81       	ldd	r24, Z+7	; 0x07
    1e40:	90 85       	ldd	r25, Z+8	; 0x08
    1e42:	8f 7e       	andi	r24, 0xEF	; 239
    1e44:	e9 81       	ldd	r30, Y+1	; 0x01
    1e46:	fa 81       	ldd	r31, Y+2	; 0x02
    1e48:	90 87       	std	Z+8, r25	; 0x08
    1e4a:	87 83       	std	Z+7, r24	; 0x07
    // Управление приоритетом процесса
    PROC_PRIO_CONTROL_STOPED( proc );
    1e4c:	89 81       	ldd	r24, Y+1	; 0x01
    1e4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e50:	0e 94 a5 14 	call	0x294a	; 0x294a <_proc_prio_control_stoped>
    _proc_run( proc );
    1e54:	89 81       	ldd	r24, Y+1	; 0x01
    1e56:	9a 81       	ldd	r25, Y+2	; 0x02
    1e58:	0e 94 47 12 	call	0x248e	; 0x248e <_proc_run>
    SPIN_UNLOCK( proc );
    1e5c:	89 81       	ldd	r24, Y+1	; 0x01
    1e5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e60:	83 96       	adiw	r24, 0x23	; 35
    1e62:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
end:
    SPIN_UNLOCK( mutex );
    1e66:	8b 81       	ldd	r24, Y+3	; 0x03
    1e68:	9c 81       	ldd	r25, Y+4	; 0x04
    1e6a:	43 96       	adiw	r24, 0x13	; 19
    1e6c:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
}
    1e70:	0f 90       	pop	r0
    1e72:	0f 90       	pop	r0
    1e74:	0f 90       	pop	r0
    1e76:	0f 90       	pop	r0
    1e78:	cf 91       	pop	r28
    1e7a:	df 91       	pop	r29
    1e7c:	08 95       	ret

00001e7e <pcounter_init>:
*                           http://www.0chan.ru/r/res/9996.html                          *
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
void pcounter_init(pcounter_t * pcounter)
{
    1e7e:	df 93       	push	r29
    1e80:	cf 93       	push	r28
    1e82:	00 d0       	rcall	.+0      	; 0x1e84 <pcounter_init+0x6>
    1e84:	0f 92       	push	r0
    1e86:	cd b7       	in	r28, 0x3d	; 61
    1e88:	de b7       	in	r29, 0x3e	; 62
    1e8a:	9b 83       	std	Y+3, r25	; 0x03
    1e8c:	8a 83       	std	Y+2, r24	; 0x02
    prio_t p;
    pcounter->index = (index_t)0;
    1e8e:	ea 81       	ldd	r30, Y+2	; 0x02
    1e90:	fb 81       	ldd	r31, Y+3	; 0x03
    1e92:	10 8a       	std	Z+16, r1	; 0x10
    for(p = 0; p < (index_t)BITS_IN_INDEX_T; p++)pcounter->counter[p] = (count_t)0;
    1e94:	19 82       	std	Y+1, r1	; 0x01
    1e96:	0f c0       	rjmp	.+30     	; 0x1eb6 <pcounter_init+0x38>
    1e98:	89 81       	ldd	r24, Y+1	; 0x01
    1e9a:	88 2f       	mov	r24, r24
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	2a 81       	ldd	r18, Y+2	; 0x02
    1ea0:	3b 81       	ldd	r19, Y+3	; 0x03
    1ea2:	88 0f       	add	r24, r24
    1ea4:	99 1f       	adc	r25, r25
    1ea6:	f9 01       	movw	r30, r18
    1ea8:	e8 0f       	add	r30, r24
    1eaa:	f9 1f       	adc	r31, r25
    1eac:	11 82       	std	Z+1, r1	; 0x01
    1eae:	10 82       	st	Z, r1
    1eb0:	89 81       	ldd	r24, Y+1	; 0x01
    1eb2:	8f 5f       	subi	r24, 0xFF	; 255
    1eb4:	89 83       	std	Y+1, r24	; 0x01
    1eb6:	89 81       	ldd	r24, Y+1	; 0x01
    1eb8:	88 30       	cpi	r24, 0x08	; 8
    1eba:	70 f3       	brcs	.-36     	; 0x1e98 <pcounter_init+0x1a>
}
    1ebc:	0f 90       	pop	r0
    1ebe:	0f 90       	pop	r0
    1ec0:	0f 90       	pop	r0
    1ec2:	cf 91       	pop	r28
    1ec4:	df 91       	pop	r29
    1ec6:	08 95       	ret

00001ec8 <pcounter_inc>:

void pcounter_inc(pcounter_t * pcounter, prio_t prio)
{
    1ec8:	df 93       	push	r29
    1eca:	cf 93       	push	r28
    1ecc:	00 d0       	rcall	.+0      	; 0x1ece <pcounter_inc+0x6>
    1ece:	0f 92       	push	r0
    1ed0:	cd b7       	in	r28, 0x3d	; 61
    1ed2:	de b7       	in	r29, 0x3e	; 62
    1ed4:	9a 83       	std	Y+2, r25	; 0x02
    1ed6:	89 83       	std	Y+1, r24	; 0x01
    1ed8:	6b 83       	std	Y+3, r22	; 0x03
    pcounter->counter[prio]++;
    1eda:	8b 81       	ldd	r24, Y+3	; 0x03
    1edc:	68 2f       	mov	r22, r24
    1ede:	70 e0       	ldi	r23, 0x00	; 0
    1ee0:	29 81       	ldd	r18, Y+1	; 0x01
    1ee2:	3a 81       	ldd	r19, Y+2	; 0x02
    1ee4:	cb 01       	movw	r24, r22
    1ee6:	88 0f       	add	r24, r24
    1ee8:	99 1f       	adc	r25, r25
    1eea:	f9 01       	movw	r30, r18
    1eec:	e8 0f       	add	r30, r24
    1eee:	f9 1f       	adc	r31, r25
    1ef0:	80 81       	ld	r24, Z
    1ef2:	91 81       	ldd	r25, Z+1	; 0x01
    1ef4:	ac 01       	movw	r20, r24
    1ef6:	4f 5f       	subi	r20, 0xFF	; 255
    1ef8:	5f 4f       	sbci	r21, 0xFF	; 255
    1efa:	29 81       	ldd	r18, Y+1	; 0x01
    1efc:	3a 81       	ldd	r19, Y+2	; 0x02
    1efe:	cb 01       	movw	r24, r22
    1f00:	88 0f       	add	r24, r24
    1f02:	99 1f       	adc	r25, r25
    1f04:	f9 01       	movw	r30, r18
    1f06:	e8 0f       	add	r30, r24
    1f08:	f9 1f       	adc	r31, r25
    1f0a:	51 83       	std	Z+1, r21	; 0x01
    1f0c:	40 83       	st	Z, r20
    pcounter->index |= ((index_t)1)<<prio;
    1f0e:	e9 81       	ldd	r30, Y+1	; 0x01
    1f10:	fa 81       	ldd	r31, Y+2	; 0x02
    1f12:	80 89       	ldd	r24, Z+16	; 0x10
    1f14:	48 2f       	mov	r20, r24
    1f16:	8b 81       	ldd	r24, Y+3	; 0x03
    1f18:	28 2f       	mov	r18, r24
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	81 e0       	ldi	r24, 0x01	; 1
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	02 2e       	mov	r0, r18
    1f22:	02 c0       	rjmp	.+4      	; 0x1f28 <pcounter_inc+0x60>
    1f24:	88 0f       	add	r24, r24
    1f26:	99 1f       	adc	r25, r25
    1f28:	0a 94       	dec	r0
    1f2a:	e2 f7       	brpl	.-8      	; 0x1f24 <pcounter_inc+0x5c>
    1f2c:	84 2b       	or	r24, r20
    1f2e:	e9 81       	ldd	r30, Y+1	; 0x01
    1f30:	fa 81       	ldd	r31, Y+2	; 0x02
    1f32:	80 8b       	std	Z+16, r24	; 0x10
}
    1f34:	0f 90       	pop	r0
    1f36:	0f 90       	pop	r0
    1f38:	0f 90       	pop	r0
    1f3a:	cf 91       	pop	r28
    1f3c:	df 91       	pop	r29
    1f3e:	08 95       	ret

00001f40 <pcounter_dec>:

index_t pcounter_dec(pcounter_t * pcounter, prio_t prio)
{
    1f40:	df 93       	push	r29
    1f42:	cf 93       	push	r28
    1f44:	00 d0       	rcall	.+0      	; 0x1f46 <pcounter_dec+0x6>
    1f46:	00 d0       	rcall	.+0      	; 0x1f48 <pcounter_dec+0x8>
    1f48:	cd b7       	in	r28, 0x3d	; 61
    1f4a:	de b7       	in	r29, 0x3e	; 62
    1f4c:	9b 83       	std	Y+3, r25	; 0x03
    1f4e:	8a 83       	std	Y+2, r24	; 0x02
    1f50:	6c 83       	std	Y+4, r22	; 0x04
    index_t mask;
    mask = ((index_t)1)<<prio;
    1f52:	8c 81       	ldd	r24, Y+4	; 0x04
    1f54:	28 2f       	mov	r18, r24
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	81 e0       	ldi	r24, 0x01	; 1
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	02 c0       	rjmp	.+4      	; 0x1f62 <pcounter_dec+0x22>
    1f5e:	88 0f       	add	r24, r24
    1f60:	99 1f       	adc	r25, r25
    1f62:	2a 95       	dec	r18
    1f64:	e2 f7       	brpl	.-8      	; 0x1f5e <pcounter_dec+0x1e>
    1f66:	89 83       	std	Y+1, r24	; 0x01
    pcounter->counter[prio]--;
    1f68:	8c 81       	ldd	r24, Y+4	; 0x04
    1f6a:	68 2f       	mov	r22, r24
    1f6c:	70 e0       	ldi	r23, 0x00	; 0
    1f6e:	2a 81       	ldd	r18, Y+2	; 0x02
    1f70:	3b 81       	ldd	r19, Y+3	; 0x03
    1f72:	cb 01       	movw	r24, r22
    1f74:	88 0f       	add	r24, r24
    1f76:	99 1f       	adc	r25, r25
    1f78:	f9 01       	movw	r30, r18
    1f7a:	e8 0f       	add	r30, r24
    1f7c:	f9 1f       	adc	r31, r25
    1f7e:	80 81       	ld	r24, Z
    1f80:	91 81       	ldd	r25, Z+1	; 0x01
    1f82:	ac 01       	movw	r20, r24
    1f84:	41 50       	subi	r20, 0x01	; 1
    1f86:	50 40       	sbci	r21, 0x00	; 0
    1f88:	2a 81       	ldd	r18, Y+2	; 0x02
    1f8a:	3b 81       	ldd	r19, Y+3	; 0x03
    1f8c:	cb 01       	movw	r24, r22
    1f8e:	88 0f       	add	r24, r24
    1f90:	99 1f       	adc	r25, r25
    1f92:	f9 01       	movw	r30, r18
    1f94:	e8 0f       	add	r30, r24
    1f96:	f9 1f       	adc	r31, r25
    1f98:	51 83       	std	Z+1, r21	; 0x01
    1f9a:	40 83       	st	Z, r20
    if(pcounter->counter[prio] == (count_t)0)pcounter->index &= ~mask;
    1f9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f9e:	88 2f       	mov	r24, r24
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	2a 81       	ldd	r18, Y+2	; 0x02
    1fa4:	3b 81       	ldd	r19, Y+3	; 0x03
    1fa6:	88 0f       	add	r24, r24
    1fa8:	99 1f       	adc	r25, r25
    1faa:	f9 01       	movw	r30, r18
    1fac:	e8 0f       	add	r30, r24
    1fae:	f9 1f       	adc	r31, r25
    1fb0:	80 81       	ld	r24, Z
    1fb2:	91 81       	ldd	r25, Z+1	; 0x01
    1fb4:	00 97       	sbiw	r24, 0x00	; 0
    1fb6:	51 f4       	brne	.+20     	; 0x1fcc <pcounter_dec+0x8c>
    1fb8:	ea 81       	ldd	r30, Y+2	; 0x02
    1fba:	fb 81       	ldd	r31, Y+3	; 0x03
    1fbc:	80 89       	ldd	r24, Z+16	; 0x10
    1fbe:	98 2f       	mov	r25, r24
    1fc0:	89 81       	ldd	r24, Y+1	; 0x01
    1fc2:	80 95       	com	r24
    1fc4:	89 23       	and	r24, r25
    1fc6:	ea 81       	ldd	r30, Y+2	; 0x02
    1fc8:	fb 81       	ldd	r31, Y+3	; 0x03
    1fca:	80 8b       	std	Z+16, r24	; 0x10
    return pcounter->index & mask;
    1fcc:	ea 81       	ldd	r30, Y+2	; 0x02
    1fce:	fb 81       	ldd	r31, Y+3	; 0x03
    1fd0:	90 89       	ldd	r25, Z+16	; 0x10
    1fd2:	89 81       	ldd	r24, Y+1	; 0x01
    1fd4:	89 23       	and	r24, r25
}
    1fd6:	0f 90       	pop	r0
    1fd8:	0f 90       	pop	r0
    1fda:	0f 90       	pop	r0
    1fdc:	0f 90       	pop	r0
    1fde:	cf 91       	pop	r28
    1fe0:	df 91       	pop	r29
    1fe2:	08 95       	ret

00001fe4 <pitem_init>:
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
// Инициация
void pitem_init( pitem_t * pitem, prio_t prio )
{
    1fe4:	df 93       	push	r29
    1fe6:	cf 93       	push	r28
    1fe8:	00 d0       	rcall	.+0      	; 0x1fea <pitem_init+0x6>
    1fea:	0f 92       	push	r0
    1fec:	cd b7       	in	r28, 0x3d	; 61
    1fee:	de b7       	in	r29, 0x3e	; 62
    1ff0:	9a 83       	std	Y+2, r25	; 0x02
    1ff2:	89 83       	std	Y+1, r24	; 0x01
    1ff4:	6b 83       	std	Y+3, r22	; 0x03
    item_init( (item_t *)pitem );
    1ff6:	89 81       	ldd	r24, Y+1	; 0x01
    1ff8:	9a 81       	ldd	r25, Y+2	; 0x02
    1ffa:	0e 94 ce 0c 	call	0x199c	; 0x199c <item_init>
    pitem->list = (xlist_t *)0;
    1ffe:	e9 81       	ldd	r30, Y+1	; 0x01
    2000:	fa 81       	ldd	r31, Y+2	; 0x02
    2002:	15 82       	std	Z+5, r1	; 0x05
    2004:	14 82       	std	Z+4, r1	; 0x04
    pitem->prio = prio;
    2006:	e9 81       	ldd	r30, Y+1	; 0x01
    2008:	fa 81       	ldd	r31, Y+2	; 0x02
    200a:	8b 81       	ldd	r24, Y+3	; 0x03
    200c:	86 83       	std	Z+6, r24	; 0x06
}
    200e:	0f 90       	pop	r0
    2010:	0f 90       	pop	r0
    2012:	0f 90       	pop	r0
    2014:	cf 91       	pop	r28
    2016:	df 91       	pop	r29
    2018:	08 95       	ret

0000201a <pitem_insert>:
// Вставка в список
void pitem_insert( pitem_t * pitem, xlist_t * xlist )
{
    201a:	df 93       	push	r29
    201c:	cf 93       	push	r28
    201e:	cd b7       	in	r28, 0x3d	; 61
    2020:	de b7       	in	r29, 0x3e	; 62
    2022:	28 97       	sbiw	r28, 0x08	; 8
    2024:	0f b6       	in	r0, 0x3f	; 63
    2026:	f8 94       	cli
    2028:	de bf       	out	0x3e, r29	; 62
    202a:	0f be       	out	0x3f, r0	; 63
    202c:	cd bf       	out	0x3d, r28	; 61
    202e:	9e 83       	std	Y+6, r25	; 0x06
    2030:	8d 83       	std	Y+5, r24	; 0x05
    2032:	78 87       	std	Y+8, r23	; 0x08
    2034:	6f 83       	std	Y+7, r22	; 0x07
    prio_t prio;
    index_t mask;
    item_t ** head;

    prio = pitem->prio;
    2036:	ed 81       	ldd	r30, Y+5	; 0x05
    2038:	fe 81       	ldd	r31, Y+6	; 0x06
    203a:	86 81       	ldd	r24, Z+6	; 0x06
    203c:	8c 83       	std	Y+4, r24	; 0x04
    mask = ((index_t)1)<<prio;
    203e:	8c 81       	ldd	r24, Y+4	; 0x04
    2040:	28 2f       	mov	r18, r24
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	02 c0       	rjmp	.+4      	; 0x204e <pitem_insert+0x34>
    204a:	88 0f       	add	r24, r24
    204c:	99 1f       	adc	r25, r25
    204e:	2a 95       	dec	r18
    2050:	e2 f7       	brpl	.-8      	; 0x204a <pitem_insert+0x30>
    2052:	8b 83       	std	Y+3, r24	; 0x03
    head = (item_t **)xlist + prio;
    2054:	2f 81       	ldd	r18, Y+7	; 0x07
    2056:	38 85       	ldd	r19, Y+8	; 0x08
    2058:	8c 81       	ldd	r24, Y+4	; 0x04
    205a:	88 2f       	mov	r24, r24
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	88 0f       	add	r24, r24
    2060:	99 1f       	adc	r25, r25
    2062:	82 0f       	add	r24, r18
    2064:	93 1f       	adc	r25, r19
    2066:	9a 83       	std	Y+2, r25	; 0x02
    2068:	89 83       	std	Y+1, r24	; 0x01
    // Пуста ли часть списка с таким приоритетом
    if( ( xlist->index )& mask)
    206a:	ef 81       	ldd	r30, Y+7	; 0x07
    206c:	f8 85       	ldd	r31, Y+8	; 0x08
    206e:	90 89       	ldd	r25, Z+16	; 0x10
    2070:	8b 81       	ldd	r24, Y+3	; 0x03
    2072:	89 23       	and	r24, r25
    2074:	88 23       	and	r24, r24
    2076:	51 f0       	breq	.+20     	; 0x208c <pitem_insert+0x72>
    {
        //Не пуста вставляем туда gitem
        item_insert( (item_t *)pitem, *head );
    2078:	8d 81       	ldd	r24, Y+5	; 0x05
    207a:	9e 81       	ldd	r25, Y+6	; 0x06
    207c:	e9 81       	ldd	r30, Y+1	; 0x01
    207e:	fa 81       	ldd	r31, Y+2	; 0x02
    2080:	20 81       	ld	r18, Z
    2082:	31 81       	ldd	r19, Z+1	; 0x01
    2084:	b9 01       	movw	r22, r18
    2086:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <item_insert>
    208a:	0e c0       	rjmp	.+28     	; 0x20a8 <pitem_insert+0x8e>
    }
    else
    {
        // Пуста, gitem будет головой
        *head = (item_t *)pitem;
    208c:	8d 81       	ldd	r24, Y+5	; 0x05
    208e:	9e 81       	ldd	r25, Y+6	; 0x06
    2090:	e9 81       	ldd	r30, Y+1	; 0x01
    2092:	fa 81       	ldd	r31, Y+2	; 0x02
    2094:	91 83       	std	Z+1, r25	; 0x01
    2096:	80 83       	st	Z, r24
        xlist->index |= mask;
    2098:	ef 81       	ldd	r30, Y+7	; 0x07
    209a:	f8 85       	ldd	r31, Y+8	; 0x08
    209c:	90 89       	ldd	r25, Z+16	; 0x10
    209e:	8b 81       	ldd	r24, Y+3	; 0x03
    20a0:	89 2b       	or	r24, r25
    20a2:	ef 81       	ldd	r30, Y+7	; 0x07
    20a4:	f8 85       	ldd	r31, Y+8	; 0x08
    20a6:	80 8b       	std	Z+16, r24	; 0x10
    }
    pitem->list = xlist;
    20a8:	ed 81       	ldd	r30, Y+5	; 0x05
    20aa:	fe 81       	ldd	r31, Y+6	; 0x06
    20ac:	8f 81       	ldd	r24, Y+7	; 0x07
    20ae:	98 85       	ldd	r25, Y+8	; 0x08
    20b0:	95 83       	std	Z+5, r25	; 0x05
    20b2:	84 83       	std	Z+4, r24	; 0x04
}
    20b4:	28 96       	adiw	r28, 0x08	; 8
    20b6:	0f b6       	in	r0, 0x3f	; 63
    20b8:	f8 94       	cli
    20ba:	de bf       	out	0x3e, r29	; 62
    20bc:	0f be       	out	0x3f, r0	; 63
    20be:	cd bf       	out	0x3d, r28	; 61
    20c0:	cf 91       	pop	r28
    20c2:	df 91       	pop	r29
    20c4:	08 95       	ret

000020c6 <pitem_fast_cut>:
// Быстрая вырезка из списка
void pitem_fast_cut( pitem_t * pitem )
{
    20c6:	df 93       	push	r29
    20c8:	cf 93       	push	r28
    20ca:	00 d0       	rcall	.+0      	; 0x20cc <pitem_fast_cut+0x6>
    20cc:	00 d0       	rcall	.+0      	; 0x20ce <pitem_fast_cut+0x8>
    20ce:	0f 92       	push	r0
    20d0:	cd b7       	in	r28, 0x3d	; 61
    20d2:	de b7       	in	r29, 0x3e	; 62
    20d4:	9d 83       	std	Y+5, r25	; 0x05
    20d6:	8c 83       	std	Y+4, r24	; 0x04
    prio_t prio;
    xlist_t * xlist;

    prio = pitem->prio;
    20d8:	ec 81       	ldd	r30, Y+4	; 0x04
    20da:	fd 81       	ldd	r31, Y+5	; 0x05
    20dc:	86 81       	ldd	r24, Z+6	; 0x06
    20de:	8b 83       	std	Y+3, r24	; 0x03
    xlist = (xlist_t *)pitem->list;
    20e0:	ec 81       	ldd	r30, Y+4	; 0x04
    20e2:	fd 81       	ldd	r31, Y+5	; 0x05
    20e4:	84 81       	ldd	r24, Z+4	; 0x04
    20e6:	95 81       	ldd	r25, Z+5	; 0x05
    20e8:	9a 83       	std	Y+2, r25	; 0x02
    20ea:	89 83       	std	Y+1, r24	; 0x01
    //Является ли элемент единственным в своей части списка?
    if( ((item_t *)pitem)->next == (item_t *)pitem )
    20ec:	ec 81       	ldd	r30, Y+4	; 0x04
    20ee:	fd 81       	ldd	r31, Y+5	; 0x05
    20f0:	20 81       	ld	r18, Z
    20f2:	31 81       	ldd	r19, Z+1	; 0x01
    20f4:	8c 81       	ldd	r24, Y+4	; 0x04
    20f6:	9d 81       	ldd	r25, Y+5	; 0x05
    20f8:	28 17       	cp	r18, r24
    20fa:	39 07       	cpc	r19, r25
    20fc:	09 f5       	brne	.+66     	; 0x2140 <pitem_fast_cut+0x7a>
    {
        // Да, является!
        xlist->item[prio] = (item_t *)0;
    20fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2100:	88 2f       	mov	r24, r24
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	29 81       	ldd	r18, Y+1	; 0x01
    2106:	3a 81       	ldd	r19, Y+2	; 0x02
    2108:	88 0f       	add	r24, r24
    210a:	99 1f       	adc	r25, r25
    210c:	f9 01       	movw	r30, r18
    210e:	e8 0f       	add	r30, r24
    2110:	f9 1f       	adc	r31, r25
    2112:	11 82       	std	Z+1, r1	; 0x01
    2114:	10 82       	st	Z, r1
        xlist->index &= ~(((index_t)1)<<prio);
    2116:	e9 81       	ldd	r30, Y+1	; 0x01
    2118:	fa 81       	ldd	r31, Y+2	; 0x02
    211a:	80 89       	ldd	r24, Z+16	; 0x10
    211c:	48 2f       	mov	r20, r24
    211e:	8b 81       	ldd	r24, Y+3	; 0x03
    2120:	28 2f       	mov	r18, r24
    2122:	30 e0       	ldi	r19, 0x00	; 0
    2124:	81 e0       	ldi	r24, 0x01	; 1
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	02 2e       	mov	r0, r18
    212a:	02 c0       	rjmp	.+4      	; 0x2130 <pitem_fast_cut+0x6a>
    212c:	88 0f       	add	r24, r24
    212e:	99 1f       	adc	r25, r25
    2130:	0a 94       	dec	r0
    2132:	e2 f7       	brpl	.-8      	; 0x212c <pitem_fast_cut+0x66>
    2134:	80 95       	com	r24
    2136:	84 23       	and	r24, r20
    2138:	e9 81       	ldd	r30, Y+1	; 0x01
    213a:	fa 81       	ldd	r31, Y+2	; 0x02
    213c:	80 8b       	std	Z+16, r24	; 0x10
    213e:	1a c0       	rjmp	.+52     	; 0x2174 <pitem_fast_cut+0xae>
    }
    else
    {
        // Нет, не является!
        // Является ли элемент головой своей части списка?
        if( xlist->item[(prio_t)prio] == (item_t *)pitem )
    2140:	8b 81       	ldd	r24, Y+3	; 0x03
    2142:	88 2f       	mov	r24, r24
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	29 81       	ldd	r18, Y+1	; 0x01
    2148:	3a 81       	ldd	r19, Y+2	; 0x02
    214a:	88 0f       	add	r24, r24
    214c:	99 1f       	adc	r25, r25
    214e:	f9 01       	movw	r30, r18
    2150:	e8 0f       	add	r30, r24
    2152:	f9 1f       	adc	r31, r25
    2154:	20 81       	ld	r18, Z
    2156:	31 81       	ldd	r19, Z+1	; 0x01
    2158:	8c 81       	ldd	r24, Y+4	; 0x04
    215a:	9d 81       	ldd	r25, Y+5	; 0x05
    215c:	28 17       	cp	r18, r24
    215e:	39 07       	cpc	r19, r25
    2160:	29 f4       	brne	.+10     	; 0x216c <pitem_fast_cut+0xa6>
        {
            // Является, список надо переключить
            xlist_switch( xlist, prio );
    2162:	89 81       	ldd	r24, Y+1	; 0x01
    2164:	9a 81       	ldd	r25, Y+2	; 0x02
    2166:	6b 81       	ldd	r22, Y+3	; 0x03
    2168:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <xlist_switch>
        }
        // Собственно - вырезаем элемент
        item_cut( (item_t *)pitem );
    216c:	8c 81       	ldd	r24, Y+4	; 0x04
    216e:	9d 81       	ldd	r25, Y+5	; 0x05
    2170:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <item_cut>
    }
}
    2174:	0f 90       	pop	r0
    2176:	0f 90       	pop	r0
    2178:	0f 90       	pop	r0
    217a:	0f 90       	pop	r0
    217c:	0f 90       	pop	r0
    217e:	cf 91       	pop	r28
    2180:	df 91       	pop	r29
    2182:	08 95       	ret

00002184 <pitem_cut>:
// Вырезка из списка
void pitem_cut(pitem_t * pitem)
{
    2184:	df 93       	push	r29
    2186:	cf 93       	push	r28
    2188:	00 d0       	rcall	.+0      	; 0x218a <pitem_cut+0x6>
    218a:	cd b7       	in	r28, 0x3d	; 61
    218c:	de b7       	in	r29, 0x3e	; 62
    218e:	9a 83       	std	Y+2, r25	; 0x02
    2190:	89 83       	std	Y+1, r24	; 0x01
    pitem_fast_cut( pitem );
    2192:	89 81       	ldd	r24, Y+1	; 0x01
    2194:	9a 81       	ldd	r25, Y+2	; 0x02
    2196:	0e 94 63 10 	call	0x20c6	; 0x20c6 <pitem_fast_cut>
    pitem->list = (xlist_t *)0;
    219a:	e9 81       	ldd	r30, Y+1	; 0x01
    219c:	fa 81       	ldd	r31, Y+2	; 0x02
    219e:	15 82       	std	Z+5, r1	; 0x05
    21a0:	14 82       	std	Z+4, r1	; 0x04
}
    21a2:	0f 90       	pop	r0
    21a4:	0f 90       	pop	r0
    21a6:	cf 91       	pop	r28
    21a8:	df 91       	pop	r29
    21aa:	08 95       	ret

000021ac <pitem_xlist_chain>:

pitem_t * pitem_xlist_chain( xlist_t * src )
{
    21ac:	df 93       	push	r29
    21ae:	cf 93       	push	r28
    21b0:	cd b7       	in	r28, 0x3d	; 61
    21b2:	de b7       	in	r29, 0x3e	; 62
    21b4:	2d 97       	sbiw	r28, 0x0d	; 13
    21b6:	0f b6       	in	r0, 0x3f	; 63
    21b8:	f8 94       	cli
    21ba:	de bf       	out	0x3e, r29	; 62
    21bc:	0f be       	out	0x3f, r0	; 63
    21be:	cd bf       	out	0x3d, r28	; 61
    21c0:	9d 87       	std	Y+13, r25	; 0x0d
    21c2:	8c 87       	std	Y+12, r24	; 0x0c
    pitem_t * ret;  // return value
    ret = (pitem_t *)xlist_head( src );     // will return former xlist head
    21c4:	8c 85       	ldd	r24, Y+12	; 0x0c
    21c6:	9d 85       	ldd	r25, Y+13	; 0x0d
    21c8:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <xlist_head>
    21cc:	9b 87       	std	Y+11, r25	; 0x0b
    21ce:	8a 87       	std	Y+10, r24	; 0x0a
    if(ret)
    21d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    21d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    21d4:	00 97       	sbiw	r24, 0x00	; 0
    21d6:	09 f4       	brne	.+2      	; 0x21da <pitem_xlist_chain+0x2e>
    21d8:	77 c0       	rjmp	.+238    	; 0x22c8 <pitem_xlist_chain+0x11c>
                index;  // buffer for xlist index
        prio_t  prio;   // current working priority
        item_t * tail;  // current list tail;


        tail = ((item_t *)ret)->prev;           // current list tail initial value
    21da:	ea 85       	ldd	r30, Y+10	; 0x0a
    21dc:	fb 85       	ldd	r31, Y+11	; 0x0b
    21de:	82 81       	ldd	r24, Z+2	; 0x02
    21e0:	93 81       	ldd	r25, Z+3	; 0x03
    21e2:	9e 83       	std	Y+6, r25	; 0x06
    21e4:	8d 83       	std	Y+5, r24	; 0x05
        prio = ret->prio;                       // initial working prio
    21e6:	ea 85       	ldd	r30, Y+10	; 0x0a
    21e8:	fb 85       	ldd	r31, Y+11	; 0x0b
    21ea:	86 81       	ldd	r24, Z+6	; 0x06
    21ec:	8f 83       	std	Y+7, r24	; 0x07
        src->item[prio++] = (item_t *)0;        // cut all items from current xlist part
    21ee:	8f 81       	ldd	r24, Y+7	; 0x07
    21f0:	88 2f       	mov	r24, r24
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	2c 85       	ldd	r18, Y+12	; 0x0c
    21f6:	3d 85       	ldd	r19, Y+13	; 0x0d
    21f8:	88 0f       	add	r24, r24
    21fa:	99 1f       	adc	r25, r25
    21fc:	f9 01       	movw	r30, r18
    21fe:	e8 0f       	add	r30, r24
    2200:	f9 1f       	adc	r31, r25
    2202:	11 82       	std	Z+1, r1	; 0x01
    2204:	10 82       	st	Z, r1
    2206:	8f 81       	ldd	r24, Y+7	; 0x07
    2208:	8f 5f       	subi	r24, 0xFF	; 255
    220a:	8f 83       	std	Y+7, r24	; 0x07
        index = src->index;                     // remember xlist index to improve performance
    220c:	ec 85       	ldd	r30, Y+12	; 0x0c
    220e:	fd 85       	ldd	r31, Y+13	; 0x0d
    2210:	80 89       	ldd	r24, Z+16	; 0x10
    2212:	88 87       	std	Y+8, r24	; 0x08
        mask = ((index_t)1) << prio;            // initial mask value
    2214:	8f 81       	ldd	r24, Y+7	; 0x07
    2216:	28 2f       	mov	r18, r24
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	81 e0       	ldi	r24, 0x01	; 1
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	02 2e       	mov	r0, r18
    2220:	02 c0       	rjmp	.+4      	; 0x2226 <pitem_xlist_chain+0x7a>
    2222:	88 0f       	add	r24, r24
    2224:	99 1f       	adc	r25, r25
    2226:	0a 94       	dec	r0
    2228:	e2 f7       	brpl	.-8      	; 0x2222 <pitem_xlist_chain+0x76>
    222a:	89 87       	std	Y+9, r24	; 0x09
    222c:	3b c0       	rjmp	.+118    	; 0x22a4 <pitem_xlist_chain+0xf8>
        // cut all items from xlist and form an ordinary list of them
        while(mask)
        {
            if( index & mask )
    222e:	88 85       	ldd	r24, Y+8	; 0x08
    2230:	99 85       	ldd	r25, Y+9	; 0x09
    2232:	89 23       	and	r24, r25
    2234:	88 23       	and	r24, r24
    2236:	81 f1       	breq	.+96     	; 0x2298 <pitem_xlist_chain+0xec>
            {
                // current part of xlist has some items to cut
                item_t * xhead;
                item_t * buf;
                xhead = src->item[prio];                    // current xlist head;
    2238:	8f 81       	ldd	r24, Y+7	; 0x07
    223a:	88 2f       	mov	r24, r24
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2240:	3d 85       	ldd	r19, Y+13	; 0x0d
    2242:	88 0f       	add	r24, r24
    2244:	99 1f       	adc	r25, r25
    2246:	f9 01       	movw	r30, r18
    2248:	e8 0f       	add	r30, r24
    224a:	f9 1f       	adc	r31, r25
    224c:	80 81       	ld	r24, Z
    224e:	91 81       	ldd	r25, Z+1	; 0x01
    2250:	9c 83       	std	Y+4, r25	; 0x04
    2252:	8b 83       	std	Y+3, r24	; 0x03
                src->item[prio] = (item_t *)0;              // cut all items from current xlist part
    2254:	8f 81       	ldd	r24, Y+7	; 0x07
    2256:	88 2f       	mov	r24, r24
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	2c 85       	ldd	r18, Y+12	; 0x0c
    225c:	3d 85       	ldd	r19, Y+13	; 0x0d
    225e:	88 0f       	add	r24, r24
    2260:	99 1f       	adc	r25, r25
    2262:	f9 01       	movw	r30, r18
    2264:	e8 0f       	add	r30, r24
    2266:	f9 1f       	adc	r31, r25
    2268:	11 82       	std	Z+1, r1	; 0x01
    226a:	10 82       	st	Z, r1
                // chain former xlist head to a list tail
                tail->next = xhead;
    226c:	ed 81       	ldd	r30, Y+5	; 0x05
    226e:	fe 81       	ldd	r31, Y+6	; 0x06
    2270:	8b 81       	ldd	r24, Y+3	; 0x03
    2272:	9c 81       	ldd	r25, Y+4	; 0x04
    2274:	91 83       	std	Z+1, r25	; 0x01
    2276:	80 83       	st	Z, r24
                buf = xhead->prev;
    2278:	eb 81       	ldd	r30, Y+3	; 0x03
    227a:	fc 81       	ldd	r31, Y+4	; 0x04
    227c:	82 81       	ldd	r24, Z+2	; 0x02
    227e:	93 81       	ldd	r25, Z+3	; 0x03
    2280:	9a 83       	std	Y+2, r25	; 0x02
    2282:	89 83       	std	Y+1, r24	; 0x01
                xhead->prev = tail;
    2284:	eb 81       	ldd	r30, Y+3	; 0x03
    2286:	fc 81       	ldd	r31, Y+4	; 0x04
    2288:	8d 81       	ldd	r24, Y+5	; 0x05
    228a:	9e 81       	ldd	r25, Y+6	; 0x06
    228c:	93 83       	std	Z+3, r25	; 0x03
    228e:	82 83       	std	Z+2, r24	; 0x02
                tail = buf;
    2290:	89 81       	ldd	r24, Y+1	; 0x01
    2292:	9a 81       	ldd	r25, Y+2	; 0x02
    2294:	9e 83       	std	Y+6, r25	; 0x06
    2296:	8d 83       	std	Y+5, r24	; 0x05
            }
            mask <<= (prio_t)1;
    2298:	89 85       	ldd	r24, Y+9	; 0x09
    229a:	88 0f       	add	r24, r24
    229c:	89 87       	std	Y+9, r24	; 0x09
            prio++;
    229e:	8f 81       	ldd	r24, Y+7	; 0x07
    22a0:	8f 5f       	subi	r24, 0xFF	; 255
    22a2:	8f 83       	std	Y+7, r24	; 0x07
        prio = ret->prio;                       // initial working prio
        src->item[prio++] = (item_t *)0;        // cut all items from current xlist part
        index = src->index;                     // remember xlist index to improve performance
        mask = ((index_t)1) << prio;            // initial mask value
        // cut all items from xlist and form an ordinary list of them
        while(mask)
    22a4:	89 85       	ldd	r24, Y+9	; 0x09
    22a6:	88 23       	and	r24, r24
    22a8:	11 f6       	brne	.-124    	; 0x222e <pitem_xlist_chain+0x82>
            }
            mask <<= (prio_t)1;
            prio++;
        }
        // complete the list by chaining tail and head
        ((item_t *)ret)->prev = tail;
    22aa:	ea 85       	ldd	r30, Y+10	; 0x0a
    22ac:	fb 85       	ldd	r31, Y+11	; 0x0b
    22ae:	8d 81       	ldd	r24, Y+5	; 0x05
    22b0:	9e 81       	ldd	r25, Y+6	; 0x06
    22b2:	93 83       	std	Z+3, r25	; 0x03
    22b4:	82 83       	std	Z+2, r24	; 0x02
        tail->next = (item_t *)ret;
    22b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    22b8:	9b 85       	ldd	r25, Y+11	; 0x0b
    22ba:	ed 81       	ldd	r30, Y+5	; 0x05
    22bc:	fe 81       	ldd	r31, Y+6	; 0x06
    22be:	91 83       	std	Z+1, r25	; 0x01
    22c0:	80 83       	st	Z, r24
        src->index = (index_t)0;        // xlist is empty.
    22c2:	ec 85       	ldd	r30, Y+12	; 0x0c
    22c4:	fd 85       	ldd	r31, Y+13	; 0x0d
    22c6:	10 8a       	std	Z+16, r1	; 0x10
    }
    return ret;                     // return list head;
    22c8:	8a 85       	ldd	r24, Y+10	; 0x0a
    22ca:	9b 85       	ldd	r25, Y+11	; 0x0b
}
    22cc:	2d 96       	adiw	r28, 0x0d	; 13
    22ce:	0f b6       	in	r0, 0x3f	; 63
    22d0:	f8 94       	cli
    22d2:	de bf       	out	0x3e, r29	; 62
    22d4:	0f be       	out	0x3f, r0	; 63
    22d6:	cd bf       	out	0x3d, r28	; 61
    22d8:	cf 91       	pop	r28
    22da:	df 91       	pop	r29
    22dc:	08 95       	ret

000022de <proc_init_isr>:
    bool_t is_rt // если true, значит процесс будет иметть поведение RT
#ifdef CONFIG_MP
    ,affinity_t affinity
#endif // CONFIG_MP
)
{
    22de:	8f 92       	push	r8
    22e0:	af 92       	push	r10
    22e2:	bf 92       	push	r11
    22e4:	cf 92       	push	r12
    22e6:	ef 92       	push	r14
    22e8:	ff 92       	push	r15
    22ea:	0f 93       	push	r16
    22ec:	1f 93       	push	r17
    22ee:	df 93       	push	r29
    22f0:	cf 93       	push	r28
    22f2:	cd b7       	in	r28, 0x3d	; 61
    22f4:	de b7       	in	r29, 0x3e	; 62
    22f6:	62 97       	sbiw	r28, 0x12	; 18
    22f8:	0f b6       	in	r0, 0x3f	; 63
    22fa:	f8 94       	cli
    22fc:	de bf       	out	0x3e, r29	; 62
    22fe:	0f be       	out	0x3f, r0	; 63
    2300:	cd bf       	out	0x3d, r28	; 61
    2302:	9a 83       	std	Y+2, r25	; 0x02
    2304:	89 83       	std	Y+1, r24	; 0x01
    2306:	7c 83       	std	Y+4, r23	; 0x04
    2308:	6b 83       	std	Y+3, r22	; 0x03
    230a:	5e 83       	std	Y+6, r21	; 0x06
    230c:	4d 83       	std	Y+5, r20	; 0x05
    230e:	38 87       	std	Y+8, r19	; 0x08
    2310:	2f 83       	std	Y+7, r18	; 0x07
    2312:	1a 87       	std	Y+10, r17	; 0x0a
    2314:	09 87       	std	Y+9, r16	; 0x09
    2316:	fc 86       	std	Y+12, r15	; 0x0c
    2318:	eb 86       	std	Y+11, r14	; 0x0b
    231a:	cd 86       	std	Y+13, r12	; 0x0d
    231c:	bf 86       	std	Y+15, r11	; 0x0f
    231e:	ae 86       	std	Y+14, r10	; 0x0e
    2320:	88 8a       	std	Y+16, r8	; 0x10
    SPIN_INIT( proc );
    2322:	89 81       	ldd	r24, Y+1	; 0x01
    2324:	9a 81       	ldd	r25, Y+2	; 0x02
    2326:	83 96       	adiw	r24, 0x23	; 35
    2328:	0e 94 0b 01 	call	0x216	; 0x216 <spin_init>
    SPIN_LOCK( proc );
    232c:	89 81       	ldd	r24, Y+1	; 0x01
    232e:	9a 81       	ldd	r25, Y+2	; 0x02
    2330:	83 96       	adiw	r24, 0x23	; 35
    2332:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>

    pitem_init( (pitem_t *)proc, prio );
    2336:	89 81       	ldd	r24, Y+1	; 0x01
    2338:	9a 81       	ldd	r25, Y+2	; 0x02
    233a:	6d 85       	ldd	r22, Y+13	; 0x0d
    233c:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <pitem_init>
    proc->flags = ( is_rt )?PROC_FLG_RT:(flag_t)0;
    2340:	88 89       	ldd	r24, Y+16	; 0x10
    2342:	88 23       	and	r24, r24
    2344:	29 f0       	breq	.+10     	; 0x2350 <proc_init_isr+0x72>
    2346:	81 e0       	ldi	r24, 0x01	; 1
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	9a 8b       	std	Y+18, r25	; 0x12
    234c:	89 8b       	std	Y+17, r24	; 0x11
    234e:	02 c0       	rjmp	.+4      	; 0x2354 <proc_init_isr+0x76>
    2350:	1a 8a       	std	Y+18, r1	; 0x12
    2352:	19 8a       	std	Y+17, r1	; 0x11
    2354:	e9 81       	ldd	r30, Y+1	; 0x01
    2356:	fa 81       	ldd	r31, Y+2	; 0x02
    2358:	89 89       	ldd	r24, Y+17	; 0x11
    235a:	9a 89       	ldd	r25, Y+18	; 0x12
    235c:	90 87       	std	Z+8, r25	; 0x08
    235e:	87 83       	std	Z+7, r24	; 0x07

    PROC_LRES_INIT( proc );
    2360:	89 81       	ldd	r24, Y+1	; 0x01
    2362:	9a 81       	ldd	r25, Y+2	; 0x02
    2364:	0a 96       	adiw	r24, 0x0a	; 10
    2366:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <pcounter_init>
#ifdef CONFIG_USE_HIGHEST_LOCKER
    proc->base_prio = prio;
    236a:	e9 81       	ldd	r30, Y+1	; 0x01
    236c:	fa 81       	ldd	r31, Y+2	; 0x02
    236e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2370:	81 87       	std	Z+9, r24	; 0x09
#endif
    proc->time_quant = time_quant;
    2372:	8e 85       	ldd	r24, Y+14	; 0x0e
    2374:	9f 85       	ldd	r25, Y+15	; 0x0f
    2376:	e9 81       	ldd	r30, Y+1	; 0x01
    2378:	fa 81       	ldd	r31, Y+2	; 0x02
    237a:	94 8f       	std	Z+28, r25	; 0x1c
    237c:	83 8f       	std	Z+27, r24	; 0x1b
    proc->timer = time_quant;
    237e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2380:	9f 85       	ldd	r25, Y+15	; 0x0f
    2382:	e9 81       	ldd	r30, Y+1	; 0x01
    2384:	fa 81       	ldd	r31, Y+2	; 0x02
    2386:	96 8f       	std	Z+30, r25	; 0x1e
    2388:	85 8f       	std	Z+29, r24	; 0x1d
#ifdef CONFIG_MP
    proc->core_id = (core_id_t)0;
    238a:	e9 81       	ldd	r30, Y+1	; 0x01
    238c:	fa 81       	ldd	r31, Y+2	; 0x02
    238e:	11 a2       	std	Z+33, r1	; 0x21
    proc->affinity = affinity;
    2390:	e9 81       	ldd	r30, Y+1	; 0x01
    2392:	fa 81       	ldd	r31, Y+2	; 0x02
    2394:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2396:	82 a3       	std	Z+34, r24	; 0x22
#endif // CONFIG_MP
    proc->pmain = pmain;
    2398:	e9 81       	ldd	r30, Y+1	; 0x01
    239a:	fa 81       	ldd	r31, Y+2	; 0x02
    239c:	8b 81       	ldd	r24, Y+3	; 0x03
    239e:	9c 81       	ldd	r25, Y+4	; 0x04
    23a0:	95 a3       	std	Z+37, r25	; 0x25
    23a2:	84 a3       	std	Z+36, r24	; 0x24
    proc->sv_hook = sv_hook;
    23a4:	e9 81       	ldd	r30, Y+1	; 0x01
    23a6:	fa 81       	ldd	r31, Y+2	; 0x02
    23a8:	8d 81       	ldd	r24, Y+5	; 0x05
    23aa:	9e 81       	ldd	r25, Y+6	; 0x06
    23ac:	97 a3       	std	Z+39, r25	; 0x27
    23ae:	86 a3       	std	Z+38, r24	; 0x26
    proc->rs_hook = rs_hook;
    23b0:	e9 81       	ldd	r30, Y+1	; 0x01
    23b2:	fa 81       	ldd	r31, Y+2	; 0x02
    23b4:	8f 81       	ldd	r24, Y+7	; 0x07
    23b6:	98 85       	ldd	r25, Y+8	; 0x08
    23b8:	91 a7       	std	Z+41, r25	; 0x29
    23ba:	80 a7       	std	Z+40, r24	; 0x28
    proc->arg = arg;
    23bc:	e9 81       	ldd	r30, Y+1	; 0x01
    23be:	fa 81       	ldd	r31, Y+2	; 0x02
    23c0:	89 85       	ldd	r24, Y+9	; 0x09
    23c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    23c4:	93 a7       	std	Z+43, r25	; 0x2b
    23c6:	82 a7       	std	Z+42, r24	; 0x2a
    proc->sstart = sstart;
    23c8:	e9 81       	ldd	r30, Y+1	; 0x01
    23ca:	fa 81       	ldd	r31, Y+2	; 0x02
    23cc:	8b 85       	ldd	r24, Y+11	; 0x0b
    23ce:	9c 85       	ldd	r25, Y+12	; 0x0c
    23d0:	95 a7       	std	Z+45, r25	; 0x2d
    23d2:	84 a7       	std	Z+44, r24	; 0x2c
    if( sstart )proc->spointer = proc_stack_init(sstart, (code_t)proc_run_wrapper, (void *)proc);
    23d4:	8b 85       	ldd	r24, Y+11	; 0x0b
    23d6:	9c 85       	ldd	r25, Y+12	; 0x0c
    23d8:	00 97       	sbiw	r24, 0x00	; 0
    23da:	71 f0       	breq	.+28     	; 0x23f8 <proc_init_isr+0x11a>
    23dc:	47 e2       	ldi	r20, 0x27	; 39
    23de:	5c e1       	ldi	r21, 0x1C	; 28
    23e0:	8b 85       	ldd	r24, Y+11	; 0x0b
    23e2:	9c 85       	ldd	r25, Y+12	; 0x0c
    23e4:	29 81       	ldd	r18, Y+1	; 0x01
    23e6:	3a 81       	ldd	r19, Y+2	; 0x02
    23e8:	ba 01       	movw	r22, r20
    23ea:	a9 01       	movw	r20, r18
    23ec:	0e 94 32 0a 	call	0x1464	; 0x1464 <proc_stack_init>
    23f0:	e9 81       	ldd	r30, Y+1	; 0x01
    23f2:	fa 81       	ldd	r31, Y+2	; 0x02
    23f4:	97 a7       	std	Z+47, r25	; 0x2f
    23f6:	86 a7       	std	Z+46, r24	; 0x2e

    SPIN_UNLOCK( proc );
    23f8:	89 81       	ldd	r24, Y+1	; 0x01
    23fa:	9a 81       	ldd	r25, Y+2	; 0x02
    23fc:	83 96       	adiw	r24, 0x23	; 35
    23fe:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
}
    2402:	62 96       	adiw	r28, 0x12	; 18
    2404:	0f b6       	in	r0, 0x3f	; 63
    2406:	f8 94       	cli
    2408:	de bf       	out	0x3e, r29	; 62
    240a:	0f be       	out	0x3f, r0	; 63
    240c:	cd bf       	out	0x3d, r28	; 61
    240e:	cf 91       	pop	r28
    2410:	df 91       	pop	r29
    2412:	1f 91       	pop	r17
    2414:	0f 91       	pop	r16
    2416:	ff 90       	pop	r15
    2418:	ef 90       	pop	r14
    241a:	cf 90       	pop	r12
    241c:	bf 90       	pop	r11
    241e:	af 90       	pop	r10
    2420:	8f 90       	pop	r8
    2422:	08 95       	ret

00002424 <_proc_run_>:
//  Функция для внутреннего использования - собственно запуск процесса
#ifdef CONFIG_MP
void _proc_run_( proc_t * proc )
{
    2424:	df 93       	push	r29
    2426:	cf 93       	push	r28
    2428:	00 d0       	rcall	.+0      	; 0x242a <_proc_run_+0x6>
    242a:	00 d0       	rcall	.+0      	; 0x242c <_proc_run_+0x8>
    242c:	cd b7       	in	r28, 0x3d	; 61
    242e:	de b7       	in	r29, 0x3e	; 62
    2430:	9c 83       	std	Y+4, r25	; 0x04
    2432:	8b 83       	std	Y+3, r24	; 0x03
    sched_t * proc_sched;
    proc_sched = (sched_t *)kernel.sched + proc->core_id;
    2434:	eb 81       	ldd	r30, Y+3	; 0x03
    2436:	fc 81       	ldd	r31, Y+4	; 0x04
    2438:	81 a1       	ldd	r24, Z+33	; 0x21
    243a:	28 2f       	mov	r18, r24
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	8b e2       	ldi	r24, 0x2B	; 43
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	ac 01       	movw	r20, r24
    2444:	24 9f       	mul	r18, r20
    2446:	c0 01       	movw	r24, r0
    2448:	25 9f       	mul	r18, r21
    244a:	90 0d       	add	r25, r0
    244c:	34 9f       	mul	r19, r20
    244e:	90 0d       	add	r25, r0
    2450:	11 24       	eor	r1, r1
    2452:	8d 53       	subi	r24, 0x3D	; 61
    2454:	9d 4f       	sbci	r25, 0xFD	; 253
    2456:	9a 83       	std	Y+2, r25	; 0x02
    2458:	89 83       	std	Y+1, r24	; 0x01
    SPIN_LOCK( proc_sched );
    245a:	89 81       	ldd	r24, Y+1	; 0x01
    245c:	9a 81       	ldd	r25, Y+2	; 0x02
    245e:	8a 96       	adiw	r24, 0x2a	; 42
    2460:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    pitem_insert( (pitem_t *)proc, proc_sched->ready );
    2464:	8b 81       	ldd	r24, Y+3	; 0x03
    2466:	9c 81       	ldd	r25, Y+4	; 0x04
    2468:	e9 81       	ldd	r30, Y+1	; 0x01
    246a:	fa 81       	ldd	r31, Y+2	; 0x02
    246c:	22 81       	ldd	r18, Z+2	; 0x02
    246e:	33 81       	ldd	r19, Z+3	; 0x03
    2470:	b9 01       	movw	r22, r18
    2472:	0e 94 0d 10 	call	0x201a	; 0x201a <pitem_insert>
    SPIN_UNLOCK( proc_sched );
    2476:	89 81       	ldd	r24, Y+1	; 0x01
    2478:	9a 81       	ldd	r25, Y+2	; 0x02
    247a:	8a 96       	adiw	r24, 0x2a	; 42
    247c:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
}
    2480:	0f 90       	pop	r0
    2482:	0f 90       	pop	r0
    2484:	0f 90       	pop	r0
    2486:	0f 90       	pop	r0
    2488:	cf 91       	pop	r28
    248a:	df 91       	pop	r29
    248c:	08 95       	ret

0000248e <_proc_run>:
#endif // CONFIG_MP

void _proc_run( proc_t * proc )
{
    248e:	df 93       	push	r29
    2490:	cf 93       	push	r28
    2492:	00 d0       	rcall	.+0      	; 0x2494 <_proc_run+0x6>
    2494:	cd b7       	in	r28, 0x3d	; 61
    2496:	de b7       	in	r29, 0x3e	; 62
    2498:	9a 83       	std	Y+2, r25	; 0x02
    249a:	89 83       	std	Y+1, r24	; 0x01
    proc->flags |= PROC_FLG_RUN;
    249c:	e9 81       	ldd	r30, Y+1	; 0x01
    249e:	fa 81       	ldd	r31, Y+2	; 0x02
    24a0:	87 81       	ldd	r24, Z+7	; 0x07
    24a2:	90 85       	ldd	r25, Z+8	; 0x08
    24a4:	82 60       	ori	r24, 0x02	; 2
    24a6:	e9 81       	ldd	r30, Y+1	; 0x01
    24a8:	fa 81       	ldd	r31, Y+2	; 0x02
    24aa:	90 87       	std	Z+8, r25	; 0x08
    24ac:	87 83       	std	Z+7, r24	; 0x07
#ifdef CONFIG_MP
    spin_lock( &kernel.stat_lock );
    24ae:	8b e7       	ldi	r24, 0x7B	; 123
    24b0:	93 e0       	ldi	r25, 0x03	; 3
    24b2:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    proc->core_id = sched_load_balancer( proc, (stat_t *)kernel.stat );
    24b6:	89 81       	ldd	r24, Y+1	; 0x01
    24b8:	9a 81       	ldd	r25, Y+2	; 0x02
    24ba:	29 e7       	ldi	r18, 0x79	; 121
    24bc:	33 e0       	ldi	r19, 0x03	; 3
    24be:	b9 01       	movw	r22, r18
    24c0:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <sched_load_balancer>
    24c4:	e9 81       	ldd	r30, Y+1	; 0x01
    24c6:	fa 81       	ldd	r31, Y+2	; 0x02
    24c8:	81 a3       	std	Z+33, r24	; 0x21
    stat_inc( proc, (stat_t *)kernel.stat+proc->core_id );
    24ca:	e9 81       	ldd	r30, Y+1	; 0x01
    24cc:	fa 81       	ldd	r31, Y+2	; 0x02
    24ce:	81 a1       	ldd	r24, Z+33	; 0x21
    24d0:	88 2f       	mov	r24, r24
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	9c 01       	movw	r18, r24
    24d6:	27 58       	subi	r18, 0x87	; 135
    24d8:	3c 4f       	sbci	r19, 0xFC	; 252
    24da:	89 81       	ldd	r24, Y+1	; 0x01
    24dc:	9a 81       	ldd	r25, Y+2	; 0x02
    24de:	b9 01       	movw	r22, r18
    24e0:	0e 94 6e 01 	call	0x2dc	; 0x2dc <stat_inc>
    spin_unlock( &kernel.stat_lock );
    24e4:	8b e7       	ldi	r24, 0x7B	; 123
    24e6:	93 e0       	ldi	r25, 0x03	; 3
    24e8:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
#endif
    _proc_run_( proc );
    24ec:	89 81       	ldd	r24, Y+1	; 0x01
    24ee:	9a 81       	ldd	r25, Y+2	; 0x02
    24f0:	0e 94 12 12 	call	0x2424	; 0x2424 <_proc_run_>

    RESCHED_PROC( proc );
    24f4:	e9 81       	ldd	r30, Y+1	; 0x01
    24f6:	fa 81       	ldd	r31, Y+2	; 0x02
    24f8:	81 a1       	ldd	r24, Z+33	; 0x21
    24fa:	0e 94 b4 01 	call	0x368	; 0x368 <resched>
}
    24fe:	0f 90       	pop	r0
    2500:	0f 90       	pop	r0
    2502:	cf 91       	pop	r28
    2504:	df 91       	pop	r29
    2506:	08 95       	ret

00002508 <proc_run_isr>:
// Функция общего пользования - запуск процесса из обработчика прерывания, прерывания должны быть запрещены во время запуска
bool_t proc_run_isr(proc_t * proc)
{
    2508:	df 93       	push	r29
    250a:	cf 93       	push	r28
    250c:	00 d0       	rcall	.+0      	; 0x250e <proc_run_isr+0x6>
    250e:	0f 92       	push	r0
    2510:	cd b7       	in	r28, 0x3d	; 61
    2512:	de b7       	in	r29, 0x3e	; 62
    2514:	9b 83       	std	Y+3, r25	; 0x03
    2516:	8a 83       	std	Y+2, r24	; 0x02
    bool_t ret = (bool_t)1;
    2518:	81 e0       	ldi	r24, 0x01	; 1
    251a:	89 83       	std	Y+1, r24	; 0x01

    SPIN_LOCK( proc );
    251c:	8a 81       	ldd	r24, Y+2	; 0x02
    251e:	9b 81       	ldd	r25, Y+3	; 0x03
    2520:	83 96       	adiw	r24, 0x23	; 35
    2522:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>

    if( proc->flags & (PROC_FLG_RUN|PROC_FLG_QUEUE|PROC_FLG_WAIT|PROC_FLG_IPCW|PROC_FLG_END|PROC_FLG_DEAD|PROC_FLG_WD_STOP) )
    2526:	ea 81       	ldd	r30, Y+2	; 0x02
    2528:	fb 81       	ldd	r31, Y+3	; 0x03
    252a:	87 81       	ldd	r24, Z+7	; 0x07
    252c:	90 85       	ldd	r25, Z+8	; 0x08
    252e:	82 77       	andi	r24, 0x72	; 114
    2530:	97 70       	andi	r25, 0x07	; 7
    2532:	00 97       	sbiw	r24, 0x00	; 0
    2534:	11 f0       	breq	.+4      	; 0x253a <proc_run_isr+0x32>
    {
        ret = (bool_t)0;
    2536:	19 82       	std	Y+1, r1	; 0x01
    2538:	04 c0       	rjmp	.+8      	; 0x2542 <proc_run_isr+0x3a>
        goto end;
    }
    _proc_run( proc );
    253a:	8a 81       	ldd	r24, Y+2	; 0x02
    253c:	9b 81       	ldd	r25, Y+3	; 0x03
    253e:	0e 94 47 12 	call	0x248e	; 0x248e <_proc_run>
end:

    SPIN_UNLOCK( proc );
    2542:	8a 81       	ldd	r24, Y+2	; 0x02
    2544:	9b 81       	ldd	r25, Y+3	; 0x03
    2546:	83 96       	adiw	r24, 0x23	; 35
    2548:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>

    return ret;
    254c:	89 81       	ldd	r24, Y+1	; 0x01
}
    254e:	0f 90       	pop	r0
    2550:	0f 90       	pop	r0
    2552:	0f 90       	pop	r0
    2554:	cf 91       	pop	r28
    2556:	df 91       	pop	r29
    2558:	08 95       	ret

0000255a <proc_restart_isr>:
// Перезепуск процесса из обработчика прерываний, прерывания должны быть запрещены
bool_t proc_restart_isr(proc_t * proc)
{
    255a:	df 93       	push	r29
    255c:	cf 93       	push	r28
    255e:	00 d0       	rcall	.+0      	; 0x2560 <proc_restart_isr+0x6>
    2560:	00 d0       	rcall	.+0      	; 0x2562 <proc_restart_isr+0x8>
    2562:	0f 92       	push	r0
    2564:	cd b7       	in	r28, 0x3d	; 61
    2566:	de b7       	in	r29, 0x3e	; 62
    2568:	9b 83       	std	Y+3, r25	; 0x03
    256a:	8a 83       	std	Y+2, r24	; 0x02
    bool_t ret = (bool_t)1;
    256c:	81 e0       	ldi	r24, 0x01	; 1
    256e:	89 83       	std	Y+1, r24	; 0x01

    SPIN_LOCK( proc );
    2570:	8a 81       	ldd	r24, Y+2	; 0x02
    2572:	9b 81       	ldd	r25, Y+3	; 0x03
    2574:	83 96       	adiw	r24, 0x23	; 35
    2576:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>

    if( proc->flags & (PROC_FLG_RUN|PROC_FLG_MUTEX|PROC_FLG_SEM|PROC_FLG_QUEUE|PROC_FLG_WAIT|PROC_FLG_IPCW|PROC_FLG_DEAD) )
    257a:	ea 81       	ldd	r30, Y+2	; 0x02
    257c:	fb 81       	ldd	r31, Y+3	; 0x03
    257e:	87 81       	ldd	r24, Z+7	; 0x07
    2580:	90 85       	ldd	r25, Z+8	; 0x08
    2582:	8e 77       	andi	r24, 0x7E	; 126
    2584:	94 70       	andi	r25, 0x04	; 4
    2586:	00 97       	sbiw	r24, 0x00	; 0
    2588:	11 f0       	breq	.+4      	; 0x258e <proc_restart_isr+0x34>
    {
        ret = (bool_t)0;
    258a:	19 82       	std	Y+1, r1	; 0x01
    258c:	3b c0       	rjmp	.+118    	; 0x2604 <proc_restart_isr+0xaa>
        goto end;
    }
    proc->flags = ( proc->flags & PROC_FLG_RT )?PROC_FLG_RT:(flag_t)0;
    258e:	ea 81       	ldd	r30, Y+2	; 0x02
    2590:	fb 81       	ldd	r31, Y+3	; 0x03
    2592:	87 81       	ldd	r24, Z+7	; 0x07
    2594:	90 85       	ldd	r25, Z+8	; 0x08
    2596:	81 70       	andi	r24, 0x01	; 1
    2598:	90 70       	andi	r25, 0x00	; 0
    259a:	88 23       	and	r24, r24
    259c:	29 f0       	breq	.+10     	; 0x25a8 <proc_restart_isr+0x4e>
    259e:	81 e0       	ldi	r24, 0x01	; 1
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	9d 83       	std	Y+5, r25	; 0x05
    25a4:	8c 83       	std	Y+4, r24	; 0x04
    25a6:	02 c0       	rjmp	.+4      	; 0x25ac <proc_restart_isr+0x52>
    25a8:	1d 82       	std	Y+5, r1	; 0x05
    25aa:	1c 82       	std	Y+4, r1	; 0x04
    25ac:	ea 81       	ldd	r30, Y+2	; 0x02
    25ae:	fb 81       	ldd	r31, Y+3	; 0x03
    25b0:	8c 81       	ldd	r24, Y+4	; 0x04
    25b2:	9d 81       	ldd	r25, Y+5	; 0x05
    25b4:	90 87       	std	Z+8, r25	; 0x08
    25b6:	87 83       	std	Z+7, r24	; 0x07

    PROC_LRES_INIT( proc );
    25b8:	8a 81       	ldd	r24, Y+2	; 0x02
    25ba:	9b 81       	ldd	r25, Y+3	; 0x03
    25bc:	0a 96       	adiw	r24, 0x0a	; 10
    25be:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <pcounter_init>

    proc->timer = proc->time_quant;
    25c2:	ea 81       	ldd	r30, Y+2	; 0x02
    25c4:	fb 81       	ldd	r31, Y+3	; 0x03
    25c6:	83 8d       	ldd	r24, Z+27	; 0x1b
    25c8:	94 8d       	ldd	r25, Z+28	; 0x1c
    25ca:	ea 81       	ldd	r30, Y+2	; 0x02
    25cc:	fb 81       	ldd	r31, Y+3	; 0x03
    25ce:	96 8f       	std	Z+30, r25	; 0x1e
    25d0:	85 8f       	std	Z+29, r24	; 0x1d

    if( proc->sstart )proc->spointer = proc_stack_init( proc->sstart, (code_t)proc_run_wrapper, (void *)proc );
    25d2:	ea 81       	ldd	r30, Y+2	; 0x02
    25d4:	fb 81       	ldd	r31, Y+3	; 0x03
    25d6:	84 a5       	ldd	r24, Z+44	; 0x2c
    25d8:	95 a5       	ldd	r25, Z+45	; 0x2d
    25da:	00 97       	sbiw	r24, 0x00	; 0
    25dc:	79 f0       	breq	.+30     	; 0x25fc <proc_restart_isr+0xa2>
    25de:	ea 81       	ldd	r30, Y+2	; 0x02
    25e0:	fb 81       	ldd	r31, Y+3	; 0x03
    25e2:	84 a5       	ldd	r24, Z+44	; 0x2c
    25e4:	95 a5       	ldd	r25, Z+45	; 0x2d
    25e6:	27 e2       	ldi	r18, 0x27	; 39
    25e8:	3c e1       	ldi	r19, 0x1C	; 28
    25ea:	4a 81       	ldd	r20, Y+2	; 0x02
    25ec:	5b 81       	ldd	r21, Y+3	; 0x03
    25ee:	b9 01       	movw	r22, r18
    25f0:	0e 94 32 0a 	call	0x1464	; 0x1464 <proc_stack_init>
    25f4:	ea 81       	ldd	r30, Y+2	; 0x02
    25f6:	fb 81       	ldd	r31, Y+3	; 0x03
    25f8:	97 a7       	std	Z+47, r25	; 0x2f
    25fa:	86 a7       	std	Z+46, r24	; 0x2e
    _proc_run( proc );
    25fc:	8a 81       	ldd	r24, Y+2	; 0x02
    25fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2600:	0e 94 47 12 	call	0x248e	; 0x248e <_proc_run>
end:

    SPIN_UNLOCK( proc );
    2604:	8a 81       	ldd	r24, Y+2	; 0x02
    2606:	9b 81       	ldd	r25, Y+3	; 0x03
    2608:	83 96       	adiw	r24, 0x23	; 35
    260a:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>

    return ret;
    260e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2610:	0f 90       	pop	r0
    2612:	0f 90       	pop	r0
    2614:	0f 90       	pop	r0
    2616:	0f 90       	pop	r0
    2618:	0f 90       	pop	r0
    261a:	cf 91       	pop	r28
    261c:	df 91       	pop	r29
    261e:	08 95       	ret

00002620 <_proc_stop_>:
// Функция для внутреннего использования, останов процесса

#ifdef CONFIG_MP
void _proc_stop_(proc_t * proc)
{
    2620:	df 93       	push	r29
    2622:	cf 93       	push	r28
    2624:	00 d0       	rcall	.+0      	; 0x2626 <_proc_stop_+0x6>
    2626:	00 d0       	rcall	.+0      	; 0x2628 <_proc_stop_+0x8>
    2628:	cd b7       	in	r28, 0x3d	; 61
    262a:	de b7       	in	r29, 0x3e	; 62
    262c:	9c 83       	std	Y+4, r25	; 0x04
    262e:	8b 83       	std	Y+3, r24	; 0x03
    spin_lock( &kernel.stat_lock );
    2630:	8b e7       	ldi	r24, 0x7B	; 123
    2632:	93 e0       	ldi	r25, 0x03	; 3
    2634:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    stat_dec( proc, (stat_t *)kernel.stat + proc->core_id );
    2638:	eb 81       	ldd	r30, Y+3	; 0x03
    263a:	fc 81       	ldd	r31, Y+4	; 0x04
    263c:	81 a1       	ldd	r24, Z+33	; 0x21
    263e:	88 2f       	mov	r24, r24
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	9c 01       	movw	r18, r24
    2644:	27 58       	subi	r18, 0x87	; 135
    2646:	3c 4f       	sbci	r19, 0xFC	; 252
    2648:	8b 81       	ldd	r24, Y+3	; 0x03
    264a:	9c 81       	ldd	r25, Y+4	; 0x04
    264c:	b9 01       	movw	r22, r18
    264e:	0e 94 58 01 	call	0x2b0	; 0x2b0 <stat_dec>
    spin_unlock( &kernel.stat_lock );
    2652:	8b e7       	ldi	r24, 0x7B	; 123
    2654:	93 e0       	ldi	r25, 0x03	; 3
    2656:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
    {
        lock_t * xlist_lock;
        xlist_lock = &((sched_t *)kernel.sched + proc->core_id)->lock;
    265a:	eb 81       	ldd	r30, Y+3	; 0x03
    265c:	fc 81       	ldd	r31, Y+4	; 0x04
    265e:	81 a1       	ldd	r24, Z+33	; 0x21
    2660:	28 2f       	mov	r18, r24
    2662:	30 e0       	ldi	r19, 0x00	; 0
    2664:	8b e2       	ldi	r24, 0x2B	; 43
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	ac 01       	movw	r20, r24
    266a:	24 9f       	mul	r18, r20
    266c:	c0 01       	movw	r24, r0
    266e:	25 9f       	mul	r18, r21
    2670:	90 0d       	add	r25, r0
    2672:	34 9f       	mul	r19, r20
    2674:	90 0d       	add	r25, r0
    2676:	11 24       	eor	r1, r1
    2678:	8d 53       	subi	r24, 0x3D	; 61
    267a:	9d 4f       	sbci	r25, 0xFD	; 253
    267c:	8a 96       	adiw	r24, 0x2a	; 42
    267e:	9a 83       	std	Y+2, r25	; 0x02
    2680:	89 83       	std	Y+1, r24	; 0x01
        spin_lock( xlist_lock );
    2682:	89 81       	ldd	r24, Y+1	; 0x01
    2684:	9a 81       	ldd	r25, Y+2	; 0x02
    2686:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
        pitem_cut( (pitem_t *)proc );
    268a:	8b 81       	ldd	r24, Y+3	; 0x03
    268c:	9c 81       	ldd	r25, Y+4	; 0x04
    268e:	0e 94 c2 10 	call	0x2184	; 0x2184 <pitem_cut>
        spin_unlock( xlist_lock );
    2692:	89 81       	ldd	r24, Y+1	; 0x01
    2694:	9a 81       	ldd	r25, Y+2	; 0x02
    2696:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
    }
}
    269a:	0f 90       	pop	r0
    269c:	0f 90       	pop	r0
    269e:	0f 90       	pop	r0
    26a0:	0f 90       	pop	r0
    26a2:	cf 91       	pop	r28
    26a4:	df 91       	pop	r29
    26a6:	08 95       	ret

000026a8 <_proc_stop>:
#endif // CONFIG_MP

void _proc_stop(proc_t * proc)
{
    26a8:	df 93       	push	r29
    26aa:	cf 93       	push	r28
    26ac:	00 d0       	rcall	.+0      	; 0x26ae <_proc_stop+0x6>
    26ae:	cd b7       	in	r28, 0x3d	; 61
    26b0:	de b7       	in	r29, 0x3e	; 62
    26b2:	9a 83       	std	Y+2, r25	; 0x02
    26b4:	89 83       	std	Y+1, r24	; 0x01
    proc->flags &= ~PROC_FLG_RUN;
    26b6:	e9 81       	ldd	r30, Y+1	; 0x01
    26b8:	fa 81       	ldd	r31, Y+2	; 0x02
    26ba:	87 81       	ldd	r24, Z+7	; 0x07
    26bc:	90 85       	ldd	r25, Z+8	; 0x08
    26be:	8d 7f       	andi	r24, 0xFD	; 253
    26c0:	e9 81       	ldd	r30, Y+1	; 0x01
    26c2:	fa 81       	ldd	r31, Y+2	; 0x02
    26c4:	90 87       	std	Z+8, r25	; 0x08
    26c6:	87 83       	std	Z+7, r24	; 0x07
    _proc_stop_( proc );
    26c8:	89 81       	ldd	r24, Y+1	; 0x01
    26ca:	9a 81       	ldd	r25, Y+2	; 0x02
    26cc:	0e 94 10 13 	call	0x2620	; 0x2620 <_proc_stop_>
    RESCHED_PROC( proc );
    26d0:	e9 81       	ldd	r30, Y+1	; 0x01
    26d2:	fa 81       	ldd	r31, Y+2	; 0x02
    26d4:	81 a1       	ldd	r24, Z+33	; 0x21
    26d6:	0e 94 b4 01 	call	0x368	; 0x368 <resched>
}
    26da:	0f 90       	pop	r0
    26dc:	0f 90       	pop	r0
    26de:	cf 91       	pop	r28
    26e0:	df 91       	pop	r29
    26e2:	08 95       	ret

000026e4 <proc_stop_isr>:
// Останов процесса из обработчика прерываний, прерывания должны быть запрещены
bool_t proc_stop_isr(proc_t * proc)
{
    26e4:	df 93       	push	r29
    26e6:	cf 93       	push	r28
    26e8:	00 d0       	rcall	.+0      	; 0x26ea <proc_stop_isr+0x6>
    26ea:	0f 92       	push	r0
    26ec:	cd b7       	in	r28, 0x3d	; 61
    26ee:	de b7       	in	r29, 0x3e	; 62
    26f0:	9b 83       	std	Y+3, r25	; 0x03
    26f2:	8a 83       	std	Y+2, r24	; 0x02
    bool_t ret = (bool_t)0;
    26f4:	19 82       	std	Y+1, r1	; 0x01

    SPIN_LOCK( proc );
    26f6:	8a 81       	ldd	r24, Y+2	; 0x02
    26f8:	9b 81       	ldd	r25, Y+3	; 0x03
    26fa:	83 96       	adiw	r24, 0x23	; 35
    26fc:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    //Проверка флагов
    //В случчае PROC_FLG_WAIT будем обрабатывать PROC_FLG_PRE_END на выходе из sig_wait.
    //В случае PROC_FLG_MUTEX или PROC_FLG_SEM будем обрабатывать PROC_FLG_PRE_STOP при освобождении общего ресурса.
    //В случае ожидания IPC флаг будем обрабатывать при попытке передать данные или указатель целевому процессу.
    if( proc->flags & (PROC_FLG_MUTEX|PROC_FLG_SEM|PROC_FLG_QUEUE|PROC_FLG_WAIT|PROC_FLG_IPCW) )proc->flags |= PROC_FLG_PRE_STOP;
    2700:	ea 81       	ldd	r30, Y+2	; 0x02
    2702:	fb 81       	ldd	r31, Y+3	; 0x03
    2704:	87 81       	ldd	r24, Z+7	; 0x07
    2706:	90 85       	ldd	r25, Z+8	; 0x08
    2708:	8c 77       	andi	r24, 0x7C	; 124
    270a:	90 70       	andi	r25, 0x00	; 0
    270c:	00 97       	sbiw	r24, 0x00	; 0
    270e:	51 f0       	breq	.+20     	; 0x2724 <proc_stop_isr+0x40>
    2710:	ea 81       	ldd	r30, Y+2	; 0x02
    2712:	fb 81       	ldd	r31, Y+3	; 0x03
    2714:	87 81       	ldd	r24, Z+7	; 0x07
    2716:	90 85       	ldd	r25, Z+8	; 0x08
    2718:	80 68       	ori	r24, 0x80	; 128
    271a:	ea 81       	ldd	r30, Y+2	; 0x02
    271c:	fb 81       	ldd	r31, Y+3	; 0x03
    271e:	90 87       	std	Z+8, r25	; 0x08
    2720:	87 83       	std	Z+7, r24	; 0x07
    2722:	0e c0       	rjmp	.+28     	; 0x2740 <proc_stop_isr+0x5c>
    else if( proc->flags & PROC_FLG_RUN )
    2724:	ea 81       	ldd	r30, Y+2	; 0x02
    2726:	fb 81       	ldd	r31, Y+3	; 0x03
    2728:	87 81       	ldd	r24, Z+7	; 0x07
    272a:	90 85       	ldd	r25, Z+8	; 0x08
    272c:	82 70       	andi	r24, 0x02	; 2
    272e:	90 70       	andi	r25, 0x00	; 0
    2730:	00 97       	sbiw	r24, 0x00	; 0
    2732:	31 f0       	breq	.+12     	; 0x2740 <proc_stop_isr+0x5c>
    {
        _proc_stop( proc );
    2734:	8a 81       	ldd	r24, Y+2	; 0x02
    2736:	9b 81       	ldd	r25, Y+3	; 0x03
    2738:	0e 94 54 13 	call	0x26a8	; 0x26a8 <_proc_stop>
        ret = (bool_t)1;
    273c:	81 e0       	ldi	r24, 0x01	; 1
    273e:	89 83       	std	Y+1, r24	; 0x01
    }

    SPIN_UNLOCK( proc );
    2740:	8a 81       	ldd	r24, Y+2	; 0x02
    2742:	9b 81       	ldd	r25, Y+3	; 0x03
    2744:	83 96       	adiw	r24, 0x23	; 35
    2746:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>

    return ret;
    274a:	89 81       	ldd	r24, Y+1	; 0x01
}
    274c:	0f 90       	pop	r0
    274e:	0f 90       	pop	r0
    2750:	0f 90       	pop	r0
    2752:	cf 91       	pop	r28
    2754:	df 91       	pop	r29
    2756:	08 95       	ret

00002758 <_proc_flag_stop>:
// Обработка флага останова процесса, для использования с семафорами, мьютексами и сигналами.
void _proc_flag_stop( flag_t mask )
{
    2758:	df 93       	push	r29
    275a:	cf 93       	push	r28
    275c:	00 d0       	rcall	.+0      	; 0x275e <_proc_flag_stop+0x6>
    275e:	00 d0       	rcall	.+0      	; 0x2760 <_proc_flag_stop+0x8>
    2760:	cd b7       	in	r28, 0x3d	; 61
    2762:	de b7       	in	r29, 0x3e	; 62
    2764:	9c 83       	std	Y+4, r25	; 0x04
    2766:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc;
    proc = current_proc();
    2768:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <current_proc>
    276c:	9a 83       	std	Y+2, r25	; 0x02
    276e:	89 83       	std	Y+1, r24	; 0x01

    SPIN_LOCK( proc );
    2770:	89 81       	ldd	r24, Y+1	; 0x01
    2772:	9a 81       	ldd	r25, Y+2	; 0x02
    2774:	83 96       	adiw	r24, 0x23	; 35
    2776:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>

    proc->flags &= ~mask;
    277a:	e9 81       	ldd	r30, Y+1	; 0x01
    277c:	fa 81       	ldd	r31, Y+2	; 0x02
    277e:	27 81       	ldd	r18, Z+7	; 0x07
    2780:	30 85       	ldd	r19, Z+8	; 0x08
    2782:	8b 81       	ldd	r24, Y+3	; 0x03
    2784:	9c 81       	ldd	r25, Y+4	; 0x04
    2786:	80 95       	com	r24
    2788:	90 95       	com	r25
    278a:	82 23       	and	r24, r18
    278c:	93 23       	and	r25, r19
    278e:	e9 81       	ldd	r30, Y+1	; 0x01
    2790:	fa 81       	ldd	r31, Y+2	; 0x02
    2792:	90 87       	std	Z+8, r25	; 0x08
    2794:	87 83       	std	Z+7, r24	; 0x07
    if(  PROC_PRE_STOP_TEST(proc)  )
    2796:	e9 81       	ldd	r30, Y+1	; 0x01
    2798:	fa 81       	ldd	r31, Y+2	; 0x02
    279a:	87 81       	ldd	r24, Z+7	; 0x07
    279c:	90 85       	ldd	r25, Z+8	; 0x08
    279e:	80 78       	andi	r24, 0x80	; 128
    27a0:	90 70       	andi	r25, 0x00	; 0
    27a2:	00 97       	sbiw	r24, 0x00	; 0
    27a4:	a9 f0       	breq	.+42     	; 0x27d0 <_proc_flag_stop+0x78>
    27a6:	e9 81       	ldd	r30, Y+1	; 0x01
    27a8:	fa 81       	ldd	r31, Y+2	; 0x02
    27aa:	87 81       	ldd	r24, Z+7	; 0x07
    27ac:	90 85       	ldd	r25, Z+8	; 0x08
    27ae:	8c 70       	andi	r24, 0x0C	; 12
    27b0:	90 70       	andi	r25, 0x00	; 0
    27b2:	00 97       	sbiw	r24, 0x00	; 0
    27b4:	69 f4       	brne	.+26     	; 0x27d0 <_proc_flag_stop+0x78>
        /*
        Если был запрошен останов целевого процесса,
        и целевой процесс не удерживает общие ресурсы,
        то мы остановим процесс
        */
        proc->flags &= ~PROC_FLG_PRE_STOP;
    27b6:	e9 81       	ldd	r30, Y+1	; 0x01
    27b8:	fa 81       	ldd	r31, Y+2	; 0x02
    27ba:	87 81       	ldd	r24, Z+7	; 0x07
    27bc:	90 85       	ldd	r25, Z+8	; 0x08
    27be:	8f 77       	andi	r24, 0x7F	; 127
    27c0:	e9 81       	ldd	r30, Y+1	; 0x01
    27c2:	fa 81       	ldd	r31, Y+2	; 0x02
    27c4:	90 87       	std	Z+8, r25	; 0x08
    27c6:	87 83       	std	Z+7, r24	; 0x07
        _proc_stop( proc );
    27c8:	89 81       	ldd	r24, Y+1	; 0x01
    27ca:	9a 81       	ldd	r25, Y+2	; 0x02
    27cc:	0e 94 54 13 	call	0x26a8	; 0x26a8 <_proc_stop>
    }

    SPIN_UNLOCK( proc );
    27d0:	89 81       	ldd	r24, Y+1	; 0x01
    27d2:	9a 81       	ldd	r25, Y+2	; 0x02
    27d4:	83 96       	adiw	r24, 0x23	; 35
    27d6:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>

}
    27da:	0f 90       	pop	r0
    27dc:	0f 90       	pop	r0
    27de:	0f 90       	pop	r0
    27e0:	0f 90       	pop	r0
    27e2:	cf 91       	pop	r28
    27e4:	df 91       	pop	r29
    27e6:	08 95       	ret

000027e8 <_proc_terminate>:

void _proc_terminate( proc_t * proc )
{
    27e8:	df 93       	push	r29
    27ea:	cf 93       	push	r28
    27ec:	00 d0       	rcall	.+0      	; 0x27ee <_proc_terminate+0x6>
    27ee:	cd b7       	in	r28, 0x3d	; 61
    27f0:	de b7       	in	r29, 0x3e	; 62
    27f2:	9a 83       	std	Y+2, r25	; 0x02
    27f4:	89 83       	std	Y+1, r24	; 0x01

    SPIN_LOCK( proc );
    27f6:	89 81       	ldd	r24, Y+1	; 0x01
    27f8:	9a 81       	ldd	r25, Y+2	; 0x02
    27fa:	83 96       	adiw	r24, 0x23	; 35
    27fc:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>

    // Обрабатываем флаги
    // Нельзя выходить из pmain не освободив все захваченные ресурсы, за это процесс будет "убит"!
    if( proc->flags & PROC_FLG_LOCK_MASK ) proc->flags |= PROC_FLG_DEAD;
    2800:	e9 81       	ldd	r30, Y+1	; 0x01
    2802:	fa 81       	ldd	r31, Y+2	; 0x02
    2804:	87 81       	ldd	r24, Z+7	; 0x07
    2806:	90 85       	ldd	r25, Z+8	; 0x08
    2808:	8c 70       	andi	r24, 0x0C	; 12
    280a:	90 70       	andi	r25, 0x00	; 0
    280c:	00 97       	sbiw	r24, 0x00	; 0
    280e:	51 f0       	breq	.+20     	; 0x2824 <_proc_terminate+0x3c>
    2810:	e9 81       	ldd	r30, Y+1	; 0x01
    2812:	fa 81       	ldd	r31, Y+2	; 0x02
    2814:	87 81       	ldd	r24, Z+7	; 0x07
    2816:	90 85       	ldd	r25, Z+8	; 0x08
    2818:	94 60       	ori	r25, 0x04	; 4
    281a:	e9 81       	ldd	r30, Y+1	; 0x01
    281c:	fa 81       	ldd	r31, Y+2	; 0x02
    281e:	90 87       	std	Z+8, r25	; 0x08
    2820:	87 83       	std	Z+7, r24	; 0x07
    2822:	09 c0       	rjmp	.+18     	; 0x2836 <_proc_terminate+0x4e>
    // В противном случае - просто завершаем процесс
    else proc->flags |= PROC_FLG_END;
    2824:	e9 81       	ldd	r30, Y+1	; 0x01
    2826:	fa 81       	ldd	r31, Y+2	; 0x02
    2828:	87 81       	ldd	r24, Z+7	; 0x07
    282a:	90 85       	ldd	r25, Z+8	; 0x08
    282c:	91 60       	ori	r25, 0x01	; 1
    282e:	e9 81       	ldd	r30, Y+1	; 0x01
    2830:	fa 81       	ldd	r31, Y+2	; 0x02
    2832:	90 87       	std	Z+8, r25	; 0x08
    2834:	87 83       	std	Z+7, r24	; 0x07
    proc->flags &= ~PROC_FLG_PRE_STOP_MASK;
    2836:	e9 81       	ldd	r30, Y+1	; 0x01
    2838:	fa 81       	ldd	r31, Y+2	; 0x02
    283a:	87 81       	ldd	r24, Z+7	; 0x07
    283c:	90 85       	ldd	r25, Z+8	; 0x08
    283e:	8d 77       	andi	r24, 0x7D	; 125
    2840:	e9 81       	ldd	r30, Y+1	; 0x01
    2842:	fa 81       	ldd	r31, Y+2	; 0x02
    2844:	90 87       	std	Z+8, r25	; 0x08
    2846:	87 83       	std	Z+7, r24	; 0x07
    // Останов
    _proc_stop_( proc );
    2848:	89 81       	ldd	r24, Y+1	; 0x01
    284a:	9a 81       	ldd	r25, Y+2	; 0x02
    284c:	0e 94 10 13 	call	0x2620	; 0x2620 <_proc_stop_>
    // Выполнить перепланировку
    RESCHED_PROC( proc );
    2850:	e9 81       	ldd	r30, Y+1	; 0x01
    2852:	fa 81       	ldd	r31, Y+2	; 0x02
    2854:	81 a1       	ldd	r24, Z+33	; 0x21
    2856:	0e 94 b4 01 	call	0x368	; 0x368 <resched>

    SPIN_UNLOCK( proc );
    285a:	89 81       	ldd	r24, Y+1	; 0x01
    285c:	9a 81       	ldd	r25, Y+2	; 0x02
    285e:	83 96       	adiw	r24, 0x23	; 35
    2860:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
}
    2864:	0f 90       	pop	r0
    2866:	0f 90       	pop	r0
    2868:	cf 91       	pop	r28
    286a:	df 91       	pop	r29
    286c:	08 95       	ret

0000286e <_proc_reset_watchdog>:

void _proc_reset_watchdog( void )
{
    286e:	df 93       	push	r29
    2870:	cf 93       	push	r28
    2872:	00 d0       	rcall	.+0      	; 0x2874 <_proc_reset_watchdog+0x6>
    2874:	cd b7       	in	r28, 0x3d	; 61
    2876:	de b7       	in	r29, 0x3e	; 62
    proc_t * proc;
    proc = current_proc();
    2878:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <current_proc>
    287c:	9a 83       	std	Y+2, r25	; 0x02
    287e:	89 83       	std	Y+1, r24	; 0x01

    SPIN_LOCK( proc );
    2880:	89 81       	ldd	r24, Y+1	; 0x01
    2882:	9a 81       	ldd	r25, Y+2	; 0x02
    2884:	83 96       	adiw	r24, 0x23	; 35
    2886:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>

    if( proc->flags & PROC_FLG_RT )proc->timer = proc->time_quant;
    288a:	e9 81       	ldd	r30, Y+1	; 0x01
    288c:	fa 81       	ldd	r31, Y+2	; 0x02
    288e:	87 81       	ldd	r24, Z+7	; 0x07
    2890:	90 85       	ldd	r25, Z+8	; 0x08
    2892:	81 70       	andi	r24, 0x01	; 1
    2894:	90 70       	andi	r25, 0x00	; 0
    2896:	88 23       	and	r24, r24
    2898:	41 f0       	breq	.+16     	; 0x28aa <_proc_reset_watchdog+0x3c>
    289a:	e9 81       	ldd	r30, Y+1	; 0x01
    289c:	fa 81       	ldd	r31, Y+2	; 0x02
    289e:	83 8d       	ldd	r24, Z+27	; 0x1b
    28a0:	94 8d       	ldd	r25, Z+28	; 0x1c
    28a2:	e9 81       	ldd	r30, Y+1	; 0x01
    28a4:	fa 81       	ldd	r31, Y+2	; 0x02
    28a6:	96 8f       	std	Z+30, r25	; 0x1e
    28a8:	85 8f       	std	Z+29, r24	; 0x1d

    SPIN_UNLOCK( proc );
    28aa:	89 81       	ldd	r24, Y+1	; 0x01
    28ac:	9a 81       	ldd	r25, Y+2	; 0x02
    28ae:	83 96       	adiw	r24, 0x23	; 35
    28b0:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
}
    28b4:	0f 90       	pop	r0
    28b6:	0f 90       	pop	r0
    28b8:	cf 91       	pop	r28
    28ba:	df 91       	pop	r29
    28bc:	08 95       	ret

000028be <_proc_lres_inc>:
    proc_t * proc
#ifdef CONFIG_USE_HIGHEST_LOCKER
    ,prio_t prio
#endif
)
{
    28be:	df 93       	push	r29
    28c0:	cf 93       	push	r28
    28c2:	00 d0       	rcall	.+0      	; 0x28c4 <_proc_lres_inc+0x6>
    28c4:	0f 92       	push	r0
    28c6:	cd b7       	in	r28, 0x3d	; 61
    28c8:	de b7       	in	r29, 0x3e	; 62
    28ca:	9a 83       	std	Y+2, r25	; 0x02
    28cc:	89 83       	std	Y+1, r24	; 0x01
    28ce:	6b 83       	std	Y+3, r22	; 0x03
#ifdef CONFIG_USE_HIGHEST_LOCKER
    if( proc->lres.index == (index_t)0 )proc->flags |= PROC_FLG_MUTEX;
    28d0:	e9 81       	ldd	r30, Y+1	; 0x01
    28d2:	fa 81       	ldd	r31, Y+2	; 0x02
    28d4:	82 8d       	ldd	r24, Z+26	; 0x1a
    28d6:	88 23       	and	r24, r24
    28d8:	49 f4       	brne	.+18     	; 0x28ec <_proc_lres_inc+0x2e>
    28da:	e9 81       	ldd	r30, Y+1	; 0x01
    28dc:	fa 81       	ldd	r31, Y+2	; 0x02
    28de:	87 81       	ldd	r24, Z+7	; 0x07
    28e0:	90 85       	ldd	r25, Z+8	; 0x08
    28e2:	84 60       	ori	r24, 0x04	; 4
    28e4:	e9 81       	ldd	r30, Y+1	; 0x01
    28e6:	fa 81       	ldd	r31, Y+2	; 0x02
    28e8:	90 87       	std	Z+8, r25	; 0x08
    28ea:	87 83       	std	Z+7, r24	; 0x07
    pcounter_inc( &proc->lres, prio );
    28ec:	89 81       	ldd	r24, Y+1	; 0x01
    28ee:	9a 81       	ldd	r25, Y+2	; 0x02
    28f0:	0a 96       	adiw	r24, 0x0a	; 10
    28f2:	6b 81       	ldd	r22, Y+3	; 0x03
    28f4:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <pcounter_inc>
#else
    if( proc->lres == (count_t)0 )proc->flags |= PROC_FLG_MUTEX;
    proc->lres++;
#endif
}
    28f8:	0f 90       	pop	r0
    28fa:	0f 90       	pop	r0
    28fc:	0f 90       	pop	r0
    28fe:	cf 91       	pop	r28
    2900:	df 91       	pop	r29
    2902:	08 95       	ret

00002904 <_proc_lres_dec>:
    proc_t * proc
#ifdef CONFIG_USE_HIGHEST_LOCKER
    ,prio_t prio
#endif
)
{
    2904:	df 93       	push	r29
    2906:	cf 93       	push	r28
    2908:	00 d0       	rcall	.+0      	; 0x290a <_proc_lres_dec+0x6>
    290a:	0f 92       	push	r0
    290c:	cd b7       	in	r28, 0x3d	; 61
    290e:	de b7       	in	r29, 0x3e	; 62
    2910:	9a 83       	std	Y+2, r25	; 0x02
    2912:	89 83       	std	Y+1, r24	; 0x01
    2914:	6b 83       	std	Y+3, r22	; 0x03
#ifdef CONFIG_USE_HIGHEST_LOCKER
    pcounter_dec( &proc->lres, prio );
    2916:	89 81       	ldd	r24, Y+1	; 0x01
    2918:	9a 81       	ldd	r25, Y+2	; 0x02
    291a:	0a 96       	adiw	r24, 0x0a	; 10
    291c:	6b 81       	ldd	r22, Y+3	; 0x03
    291e:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <pcounter_dec>
    if( proc->lres.index == (index_t)0 )proc->flags &= ~PROC_FLG_MUTEX;
    2922:	e9 81       	ldd	r30, Y+1	; 0x01
    2924:	fa 81       	ldd	r31, Y+2	; 0x02
    2926:	82 8d       	ldd	r24, Z+26	; 0x1a
    2928:	88 23       	and	r24, r24
    292a:	49 f4       	brne	.+18     	; 0x293e <_proc_lres_dec+0x3a>
    292c:	e9 81       	ldd	r30, Y+1	; 0x01
    292e:	fa 81       	ldd	r31, Y+2	; 0x02
    2930:	87 81       	ldd	r24, Z+7	; 0x07
    2932:	90 85       	ldd	r25, Z+8	; 0x08
    2934:	8b 7f       	andi	r24, 0xFB	; 251
    2936:	e9 81       	ldd	r30, Y+1	; 0x01
    2938:	fa 81       	ldd	r31, Y+2	; 0x02
    293a:	90 87       	std	Z+8, r25	; 0x08
    293c:	87 83       	std	Z+7, r24	; 0x07
#else
    if( proc->lres!= (count_t)0 )proc->lres--;
    if( proc->lres == (count_t)0 )proc->flags &= ~PROC_FLG_MUTEX;
#endif
}
    293e:	0f 90       	pop	r0
    2940:	0f 90       	pop	r0
    2942:	0f 90       	pop	r0
    2944:	cf 91       	pop	r28
    2946:	df 91       	pop	r29
    2948:	08 95       	ret

0000294a <_proc_prio_control_stoped>:

#ifdef CONFIG_USE_HIGHEST_LOCKER
// Будет использоваться в mutex-ах и т.п., процесс должен сам вызывать эту функцию, при этом он должен быть вырезан из списка выполняющихся.

void _proc_prio_control_stoped( proc_t * proc )
{
    294a:	df 93       	push	r29
    294c:	cf 93       	push	r28
    294e:	cd b7       	in	r28, 0x3d	; 61
    2950:	de b7       	in	r29, 0x3e	; 62
    2952:	27 97       	sbiw	r28, 0x07	; 7
    2954:	0f b6       	in	r0, 0x3f	; 63
    2956:	f8 94       	cli
    2958:	de bf       	out	0x3e, r29	; 62
    295a:	0f be       	out	0x3f, r0	; 63
    295c:	cd bf       	out	0x3d, r28	; 61
    295e:	9b 83       	std	Y+3, r25	; 0x03
    2960:	8a 83       	std	Y+2, r24	; 0x02
    if(proc->lres.index != (index_t)0)
    2962:	ea 81       	ldd	r30, Y+2	; 0x02
    2964:	fb 81       	ldd	r31, Y+3	; 0x03
    2966:	82 8d       	ldd	r24, Z+26	; 0x1a
    2968:	88 23       	and	r24, r24
    296a:	d9 f0       	breq	.+54     	; 0x29a2 <_proc_prio_control_stoped+0x58>
    {

        prio_t locker_prio;
        locker_prio = index_search( proc->lres.index );
    296c:	ea 81       	ldd	r30, Y+2	; 0x02
    296e:	fb 81       	ldd	r31, Y+3	; 0x03
    2970:	82 8d       	ldd	r24, Z+26	; 0x1a
    2972:	0e 94 9e 0b 	call	0x173c	; 0x173c <index_search>
    2976:	89 83       	std	Y+1, r24	; 0x01
        ((pitem_t *)proc)->prio = ( locker_prio < proc->base_prio )?locker_prio:proc->base_prio;
    2978:	8a 81       	ldd	r24, Y+2	; 0x02
    297a:	9b 81       	ldd	r25, Y+3	; 0x03
    297c:	9e 83       	std	Y+6, r25	; 0x06
    297e:	8d 83       	std	Y+5, r24	; 0x05
    2980:	ea 81       	ldd	r30, Y+2	; 0x02
    2982:	fb 81       	ldd	r31, Y+3	; 0x03
    2984:	81 85       	ldd	r24, Z+9	; 0x09
    2986:	99 81       	ldd	r25, Y+1	; 0x01
    2988:	9f 83       	std	Y+7, r25	; 0x07
    298a:	8c 83       	std	Y+4, r24	; 0x04
    298c:	ec 81       	ldd	r30, Y+4	; 0x04
    298e:	ff 81       	ldd	r31, Y+7	; 0x07
    2990:	fe 17       	cp	r31, r30
    2992:	10 f4       	brcc	.+4      	; 0x2998 <_proc_prio_control_stoped+0x4e>
    2994:	8f 81       	ldd	r24, Y+7	; 0x07
    2996:	8c 83       	std	Y+4, r24	; 0x04
    2998:	8c 81       	ldd	r24, Y+4	; 0x04
    299a:	ed 81       	ldd	r30, Y+5	; 0x05
    299c:	fe 81       	ldd	r31, Y+6	; 0x06
    299e:	86 83       	std	Z+6, r24	; 0x06
    29a0:	08 c0       	rjmp	.+16     	; 0x29b2 <_proc_prio_control_stoped+0x68>
    }
    else
    {
        ((pitem_t *)proc)->prio = proc->base_prio;
    29a2:	ea 81       	ldd	r30, Y+2	; 0x02
    29a4:	fb 81       	ldd	r31, Y+3	; 0x03
    29a6:	aa 81       	ldd	r26, Y+2	; 0x02
    29a8:	bb 81       	ldd	r27, Y+3	; 0x03
    29aa:	19 96       	adiw	r26, 0x09	; 9
    29ac:	8c 91       	ld	r24, X
    29ae:	19 97       	sbiw	r26, 0x09	; 9
    29b0:	86 83       	std	Z+6, r24	; 0x06
    }
}
    29b2:	27 96       	adiw	r28, 0x07	; 7
    29b4:	0f b6       	in	r0, 0x3f	; 63
    29b6:	f8 94       	cli
    29b8:	de bf       	out	0x3e, r29	; 62
    29ba:	0f be       	out	0x3f, r0	; 63
    29bc:	cd bf       	out	0x3d, r28	; 61
    29be:	cf 91       	pop	r28
    29c0:	df 91       	pop	r29
    29c2:	08 95       	ret

000029c4 <_proc_prio_control_running>:

void _proc_prio_control_running( proc_t * proc )
{
    29c4:	df 93       	push	r29
    29c6:	cf 93       	push	r28
    29c8:	00 d0       	rcall	.+0      	; 0x29ca <_proc_prio_control_running+0x6>
    29ca:	00 d0       	rcall	.+0      	; 0x29cc <_proc_prio_control_running+0x8>
    29cc:	00 d0       	rcall	.+0      	; 0x29ce <_proc_prio_control_running+0xa>
    29ce:	cd b7       	in	r28, 0x3d	; 61
    29d0:	de b7       	in	r29, 0x3e	; 62
    29d2:	9c 83       	std	Y+4, r25	; 0x04
    29d4:	8b 83       	std	Y+3, r24	; 0x03
    prio_t new_prio;
    if(proc->lres.index != (index_t)0)
    29d6:	eb 81       	ldd	r30, Y+3	; 0x03
    29d8:	fc 81       	ldd	r31, Y+4	; 0x04
    29da:	82 8d       	ldd	r24, Z+26	; 0x1a
    29dc:	88 23       	and	r24, r24
    29de:	a9 f0       	breq	.+42     	; 0x2a0a <_proc_prio_control_running+0x46>
    {
        prio_t locker_prio;
        locker_prio = index_search( proc->lres.index );
    29e0:	eb 81       	ldd	r30, Y+3	; 0x03
    29e2:	fc 81       	ldd	r31, Y+4	; 0x04
    29e4:	82 8d       	ldd	r24, Z+26	; 0x1a
    29e6:	0e 94 9e 0b 	call	0x173c	; 0x173c <index_search>
    29ea:	89 83       	std	Y+1, r24	; 0x01
        new_prio = ( locker_prio < proc->base_prio )?locker_prio:proc->base_prio;
    29ec:	eb 81       	ldd	r30, Y+3	; 0x03
    29ee:	fc 81       	ldd	r31, Y+4	; 0x04
    29f0:	81 85       	ldd	r24, Z+9	; 0x09
    29f2:	99 81       	ldd	r25, Y+1	; 0x01
    29f4:	9e 83       	std	Y+6, r25	; 0x06
    29f6:	8d 83       	std	Y+5, r24	; 0x05
    29f8:	8d 81       	ldd	r24, Y+5	; 0x05
    29fa:	9e 81       	ldd	r25, Y+6	; 0x06
    29fc:	98 17       	cp	r25, r24
    29fe:	10 f4       	brcc	.+4      	; 0x2a04 <_proc_prio_control_running+0x40>
    2a00:	8e 81       	ldd	r24, Y+6	; 0x06
    2a02:	8d 83       	std	Y+5, r24	; 0x05
    2a04:	9d 81       	ldd	r25, Y+5	; 0x05
    2a06:	9a 83       	std	Y+2, r25	; 0x02
    2a08:	04 c0       	rjmp	.+8      	; 0x2a12 <_proc_prio_control_running+0x4e>
    }
    else
    {
        new_prio = proc->base_prio;
    2a0a:	eb 81       	ldd	r30, Y+3	; 0x03
    2a0c:	fc 81       	ldd	r31, Y+4	; 0x04
    2a0e:	81 85       	ldd	r24, Z+9	; 0x09
    2a10:	8a 83       	std	Y+2, r24	; 0x02
    }
    if(((pitem_t *)proc)->prio != new_prio)
    2a12:	eb 81       	ldd	r30, Y+3	; 0x03
    2a14:	fc 81       	ldd	r31, Y+4	; 0x04
    2a16:	96 81       	ldd	r25, Z+6	; 0x06
    2a18:	8a 81       	ldd	r24, Y+2	; 0x02
    2a1a:	98 17       	cp	r25, r24
    2a1c:	31 f1       	breq	.+76     	; 0x2a6a <_proc_prio_control_running+0xa6>
    {
        _proc_stop_( proc );
    2a1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a20:	9c 81       	ldd	r25, Y+4	; 0x04
    2a22:	0e 94 10 13 	call	0x2620	; 0x2620 <_proc_stop_>
        ((pitem_t *)proc)->prio = new_prio;
    2a26:	eb 81       	ldd	r30, Y+3	; 0x03
    2a28:	fc 81       	ldd	r31, Y+4	; 0x04
    2a2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a2c:	86 83       	std	Z+6, r24	; 0x06
#ifdef CONFIG_MP
        spin_lock( &kernel.stat_lock );
    2a2e:	8b e7       	ldi	r24, 0x7B	; 123
    2a30:	93 e0       	ldi	r25, 0x03	; 3
    2a32:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
        stat_inc( proc, (stat_t *)kernel.stat+proc->core_id );
    2a36:	eb 81       	ldd	r30, Y+3	; 0x03
    2a38:	fc 81       	ldd	r31, Y+4	; 0x04
    2a3a:	81 a1       	ldd	r24, Z+33	; 0x21
    2a3c:	88 2f       	mov	r24, r24
    2a3e:	90 e0       	ldi	r25, 0x00	; 0
    2a40:	9c 01       	movw	r18, r24
    2a42:	27 58       	subi	r18, 0x87	; 135
    2a44:	3c 4f       	sbci	r19, 0xFC	; 252
    2a46:	8b 81       	ldd	r24, Y+3	; 0x03
    2a48:	9c 81       	ldd	r25, Y+4	; 0x04
    2a4a:	b9 01       	movw	r22, r18
    2a4c:	0e 94 6e 01 	call	0x2dc	; 0x2dc <stat_inc>
        spin_unlock( &kernel.stat_lock );
    2a50:	8b e7       	ldi	r24, 0x7B	; 123
    2a52:	93 e0       	ldi	r25, 0x03	; 3
    2a54:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
#endif
        _proc_run_( proc );
    2a58:	8b 81       	ldd	r24, Y+3	; 0x03
    2a5a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a5c:	0e 94 12 12 	call	0x2424	; 0x2424 <_proc_run_>
        RESCHED_PROC( proc );
    2a60:	eb 81       	ldd	r30, Y+3	; 0x03
    2a62:	fc 81       	ldd	r31, Y+4	; 0x04
    2a64:	81 a1       	ldd	r24, Z+33	; 0x21
    2a66:	0e 94 b4 01 	call	0x368	; 0x368 <resched>
    }
}
    2a6a:	26 96       	adiw	r28, 0x06	; 6
    2a6c:	0f b6       	in	r0, 0x3f	; 63
    2a6e:	f8 94       	cli
    2a70:	de bf       	out	0x3e, r29	; 62
    2a72:	0f be       	out	0x3f, r0	; 63
    2a74:	cd bf       	out	0x3d, r28	; 61
    2a76:	cf 91       	pop	r28
    2a78:	df 91       	pop	r29
    2a7a:	08 95       	ret

00002a7c <sched_load_balancer>:

#ifdef CONFIG_MP
//========================================================================================
// Балансировщик нагрузки
WEAK core_id_t sched_load_balancer(proc_t * proc, stat_t * stat)
{
    2a7c:	df 93       	push	r29
    2a7e:	cf 93       	push	r28
    2a80:	cd b7       	in	r28, 0x3d	; 61
    2a82:	de b7       	in	r29, 0x3e	; 62
    2a84:	2a 97       	sbiw	r28, 0x0a	; 10
    2a86:	0f b6       	in	r0, 0x3f	; 63
    2a88:	f8 94       	cli
    2a8a:	de bf       	out	0x3e, r29	; 62
    2a8c:	0f be       	out	0x3f, r0	; 63
    2a8e:	cd bf       	out	0x3d, r28	; 61
    2a90:	98 87       	std	Y+8, r25	; 0x08
    2a92:	8f 83       	std	Y+7, r24	; 0x07
    2a94:	7a 87       	std	Y+10, r23	; 0x0a
    2a96:	69 87       	std	Y+9, r22	; 0x09
    core_id_t core = (core_id_t)0, ret;
    2a98:	1e 82       	std	Y+6, r1	; 0x06
    affinity_t mask = (affinity_t)1;
    2a9a:	81 e0       	ldi	r24, 0x01	; 1
    2a9c:	8c 83       	std	Y+4, r24	; 0x04
    2a9e:	0d c0       	rjmp	.+26     	; 0x2aba <sched_load_balancer+0x3e>
    while( core < (core_id_t)MAX_CORES )
    {
        if( proc->affinity & mask )break;
    2aa0:	ef 81       	ldd	r30, Y+7	; 0x07
    2aa2:	f8 85       	ldd	r31, Y+8	; 0x08
    2aa4:	92 a1       	ldd	r25, Z+34	; 0x22
    2aa6:	8c 81       	ldd	r24, Y+4	; 0x04
    2aa8:	89 23       	and	r24, r25
    2aaa:	88 23       	and	r24, r24
    2aac:	49 f4       	brne	.+18     	; 0x2ac0 <sched_load_balancer+0x44>
        mask<<=1;
    2aae:	8c 81       	ldd	r24, Y+4	; 0x04
    2ab0:	88 0f       	add	r24, r24
    2ab2:	8c 83       	std	Y+4, r24	; 0x04
        core++;
    2ab4:	8e 81       	ldd	r24, Y+6	; 0x06
    2ab6:	8f 5f       	subi	r24, 0xFF	; 255
    2ab8:	8e 83       	std	Y+6, r24	; 0x06
// Балансировщик нагрузки
WEAK core_id_t sched_load_balancer(proc_t * proc, stat_t * stat)
{
    core_id_t core = (core_id_t)0, ret;
    affinity_t mask = (affinity_t)1;
    while( core < (core_id_t)MAX_CORES )
    2aba:	8e 81       	ldd	r24, Y+6	; 0x06
    2abc:	82 30       	cpi	r24, 0x02	; 2
    2abe:	80 f3       	brcs	.-32     	; 0x2aa0 <sched_load_balancer+0x24>
        if( proc->affinity & mask )break;
        mask<<=1;
        core++;
    }
    // Начальное предположение
    stat += (core_id_t)core;
    2ac0:	8e 81       	ldd	r24, Y+6	; 0x06
    2ac2:	28 2f       	mov	r18, r24
    2ac4:	30 e0       	ldi	r19, 0x00	; 0
    2ac6:	89 85       	ldd	r24, Y+9	; 0x09
    2ac8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2aca:	82 0f       	add	r24, r18
    2acc:	93 1f       	adc	r25, r19
    2ace:	9a 87       	std	Y+10, r25	; 0x0a
    2ad0:	89 87       	std	Y+9, r24	; 0x09
    ret = core++;
    2ad2:	8e 81       	ldd	r24, Y+6	; 0x06
    2ad4:	8d 83       	std	Y+5, r24	; 0x05
    2ad6:	8e 81       	ldd	r24, Y+6	; 0x06
    2ad8:	8f 5f       	subi	r24, 0xFF	; 255
    2ada:	8e 83       	std	Y+6, r24	; 0x06
    mask<<=1;
    2adc:	8c 81       	ldd	r24, Y+4	; 0x04
    2ade:	88 0f       	add	r24, r24
    2ae0:	8c 83       	std	Y+4, r24	; 0x04
    {
        prio_t proc_prio;
        load_t current_load, min_load;

        proc_prio = ((pitem_t *)proc)->prio;
    2ae2:	ef 81       	ldd	r30, Y+7	; 0x07
    2ae4:	f8 85       	ldd	r31, Y+8	; 0x08
    2ae6:	86 81       	ldd	r24, Z+6	; 0x06
    2ae8:	8b 83       	std	Y+3, r24	; 0x03
        min_load = stat_calc_load( proc_prio, stat++ );
    2aea:	29 85       	ldd	r18, Y+9	; 0x09
    2aec:	3a 85       	ldd	r19, Y+10	; 0x0a
    2aee:	89 85       	ldd	r24, Y+9	; 0x09
    2af0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2af2:	01 96       	adiw	r24, 0x01	; 1
    2af4:	9a 87       	std	Y+10, r25	; 0x0a
    2af6:	89 87       	std	Y+9, r24	; 0x09
    2af8:	8b 81       	ldd	r24, Y+3	; 0x03
    2afa:	b9 01       	movw	r22, r18
    2afc:	0e 94 a2 01 	call	0x344	; 0x344 <stat_calc_load>
    2b00:	89 83       	std	Y+1, r24	; 0x01
    2b02:	21 c0       	rjmp	.+66     	; 0x2b46 <sched_load_balancer+0xca>
        // Проверка всего остального, тупой поиск минимума
        while( core < (core_id_t)MAX_CORES )
        {
            current_load = stat_calc_load( proc_prio, stat++ );
    2b04:	29 85       	ldd	r18, Y+9	; 0x09
    2b06:	3a 85       	ldd	r19, Y+10	; 0x0a
    2b08:	89 85       	ldd	r24, Y+9	; 0x09
    2b0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b0c:	01 96       	adiw	r24, 0x01	; 1
    2b0e:	9a 87       	std	Y+10, r25	; 0x0a
    2b10:	89 87       	std	Y+9, r24	; 0x09
    2b12:	8b 81       	ldd	r24, Y+3	; 0x03
    2b14:	b9 01       	movw	r22, r18
    2b16:	0e 94 a2 01 	call	0x344	; 0x344 <stat_calc_load>
    2b1a:	8a 83       	std	Y+2, r24	; 0x02
            if( (proc->affinity & mask) && (current_load < min_load) )
    2b1c:	ef 81       	ldd	r30, Y+7	; 0x07
    2b1e:	f8 85       	ldd	r31, Y+8	; 0x08
    2b20:	92 a1       	ldd	r25, Z+34	; 0x22
    2b22:	8c 81       	ldd	r24, Y+4	; 0x04
    2b24:	89 23       	and	r24, r25
    2b26:	88 23       	and	r24, r24
    2b28:	41 f0       	breq	.+16     	; 0x2b3a <sched_load_balancer+0xbe>
    2b2a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b2c:	89 81       	ldd	r24, Y+1	; 0x01
    2b2e:	98 17       	cp	r25, r24
    2b30:	20 f4       	brcc	.+8      	; 0x2b3a <sched_load_balancer+0xbe>
            {
                min_load = current_load;
    2b32:	8a 81       	ldd	r24, Y+2	; 0x02
    2b34:	89 83       	std	Y+1, r24	; 0x01
                ret = core;
    2b36:	8e 81       	ldd	r24, Y+6	; 0x06
    2b38:	8d 83       	std	Y+5, r24	; 0x05
            }
            mask<<=1;
    2b3a:	8c 81       	ldd	r24, Y+4	; 0x04
    2b3c:	88 0f       	add	r24, r24
    2b3e:	8c 83       	std	Y+4, r24	; 0x04
            core++;
    2b40:	8e 81       	ldd	r24, Y+6	; 0x06
    2b42:	8f 5f       	subi	r24, 0xFF	; 255
    2b44:	8e 83       	std	Y+6, r24	; 0x06
        load_t current_load, min_load;

        proc_prio = ((pitem_t *)proc)->prio;
        min_load = stat_calc_load( proc_prio, stat++ );
        // Проверка всего остального, тупой поиск минимума
        while( core < (core_id_t)MAX_CORES )
    2b46:	8e 81       	ldd	r24, Y+6	; 0x06
    2b48:	82 30       	cpi	r24, 0x02	; 2
    2b4a:	e0 f2       	brcs	.-72     	; 0x2b04 <sched_load_balancer+0x88>
            }
            mask<<=1;
            core++;
        }
    }
    return ret;
    2b4c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2b4e:	2a 96       	adiw	r28, 0x0a	; 10
    2b50:	0f b6       	in	r0, 0x3f	; 63
    2b52:	f8 94       	cli
    2b54:	de bf       	out	0x3e, r29	; 62
    2b56:	0f be       	out	0x3f, r0	; 63
    2b58:	cd bf       	out	0x3d, r28	; 61
    2b5a:	cf 91       	pop	r28
    2b5c:	df 91       	pop	r29
    2b5e:	08 95       	ret

00002b60 <sched_highest_load_core>:
//----------------------------------------------------------------------------------------
//Поиск самой нагруженной структуры stat_t в массиве
WEAK core_id_t sched_highest_load_core( stat_t * stat )
{
    2b60:	df 93       	push	r29
    2b62:	cf 93       	push	r28
    2b64:	00 d0       	rcall	.+0      	; 0x2b66 <sched_highest_load_core+0x6>
    2b66:	00 d0       	rcall	.+0      	; 0x2b68 <sched_highest_load_core+0x8>
    2b68:	00 d0       	rcall	.+0      	; 0x2b6a <sched_highest_load_core+0xa>
    2b6a:	cd b7       	in	r28, 0x3d	; 61
    2b6c:	de b7       	in	r29, 0x3e	; 62
    2b6e:	9e 83       	std	Y+6, r25	; 0x06
    2b70:	8d 83       	std	Y+5, r24	; 0x05
    // Начальное предположение
    load_t max_load;
    core_id_t object_core = (core_id_t)0; //процессор с максимальной нагрузкой, с которого эту нагрузку будем снимать
    2b72:	1b 82       	std	Y+3, r1	; 0x03
    core_id_t core = (core_id_t)1;
    2b74:	81 e0       	ldi	r24, 0x01	; 1
    2b76:	8a 83       	std	Y+2, r24	; 0x02
    max_load  = stat_calc_load( (prio_t)BITS_IN_INDEX_T, stat ); // максимальная нагрузка
    2b78:	2d 81       	ldd	r18, Y+5	; 0x05
    2b7a:	3e 81       	ldd	r19, Y+6	; 0x06
    2b7c:	88 e0       	ldi	r24, 0x08	; 8
    2b7e:	b9 01       	movw	r22, r18
    2b80:	0e 94 a2 01 	call	0x344	; 0x344 <stat_calc_load>
    2b84:	8c 83       	std	Y+4, r24	; 0x04
    2b86:	17 c0       	rjmp	.+46     	; 0x2bb6 <sched_highest_load_core+0x56>

    while( core < (core_id_t)MAX_CORES )
    {
        load_t current_load;
        current_load = stat_calc_load( (prio_t)BITS_IN_INDEX_T, stat + core );
    2b88:	8a 81       	ldd	r24, Y+2	; 0x02
    2b8a:	28 2f       	mov	r18, r24
    2b8c:	30 e0       	ldi	r19, 0x00	; 0
    2b8e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b90:	9e 81       	ldd	r25, Y+6	; 0x06
    2b92:	28 0f       	add	r18, r24
    2b94:	39 1f       	adc	r19, r25
    2b96:	88 e0       	ldi	r24, 0x08	; 8
    2b98:	b9 01       	movw	r22, r18
    2b9a:	0e 94 a2 01 	call	0x344	; 0x344 <stat_calc_load>
    2b9e:	89 83       	std	Y+1, r24	; 0x01
        if( current_load > max_load )
    2ba0:	99 81       	ldd	r25, Y+1	; 0x01
    2ba2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ba4:	89 17       	cp	r24, r25
    2ba6:	20 f4       	brcc	.+8      	; 0x2bb0 <sched_highest_load_core+0x50>
        {
            max_load = current_load;
    2ba8:	89 81       	ldd	r24, Y+1	; 0x01
    2baa:	8c 83       	std	Y+4, r24	; 0x04
            object_core = core;
    2bac:	8a 81       	ldd	r24, Y+2	; 0x02
    2bae:	8b 83       	std	Y+3, r24	; 0x03
        }
        core++;
    2bb0:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb2:	8f 5f       	subi	r24, 0xFF	; 255
    2bb4:	8a 83       	std	Y+2, r24	; 0x02
    load_t max_load;
    core_id_t object_core = (core_id_t)0; //процессор с максимальной нагрузкой, с которого эту нагрузку будем снимать
    core_id_t core = (core_id_t)1;
    max_load  = stat_calc_load( (prio_t)BITS_IN_INDEX_T, stat ); // максимальная нагрузка

    while( core < (core_id_t)MAX_CORES )
    2bb6:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb8:	82 30       	cpi	r24, 0x02	; 2
    2bba:	30 f3       	brcs	.-52     	; 0x2b88 <sched_highest_load_core+0x28>
            object_core = core;
        }
        core++;
    }

    return object_core;
    2bbc:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2bbe:	26 96       	adiw	r28, 0x06	; 6
    2bc0:	0f b6       	in	r0, 0x3f	; 63
    2bc2:	f8 94       	cli
    2bc4:	de bf       	out	0x3e, r29	; 62
    2bc6:	0f be       	out	0x3f, r0	; 63
    2bc8:	cd bf       	out	0x3d, r28	; 61
    2bca:	cf 91       	pop	r28
    2bcc:	df 91       	pop	r29
    2bce:	08 95       	ret

00002bd0 <sched_init>:
#endif // CONFIG_MP
//========================================================================================
// Инициация
void sched_init(sched_t * sched, proc_t * idle)
{
    2bd0:	df 93       	push	r29
    2bd2:	cf 93       	push	r28
    2bd4:	00 d0       	rcall	.+0      	; 0x2bd6 <sched_init+0x6>
    2bd6:	00 d0       	rcall	.+0      	; 0x2bd8 <sched_init+0x8>
    2bd8:	00 d0       	rcall	.+0      	; 0x2bda <sched_init+0xa>
    2bda:	cd b7       	in	r28, 0x3d	; 61
    2bdc:	de b7       	in	r29, 0x3e	; 62
    2bde:	9c 83       	std	Y+4, r25	; 0x04
    2be0:	8b 83       	std	Y+3, r24	; 0x03
    2be2:	7e 83       	std	Y+6, r23	; 0x06
    2be4:	6d 83       	std	Y+5, r22	; 0x05
#ifdef CONFIG_MP
    lock_t * sched_lock;
    sched_lock = &sched->lock;
    2be6:	8b 81       	ldd	r24, Y+3	; 0x03
    2be8:	9c 81       	ldd	r25, Y+4	; 0x04
    2bea:	8a 96       	adiw	r24, 0x2a	; 42
    2bec:	9a 83       	std	Y+2, r25	; 0x02
    2bee:	89 83       	std	Y+1, r24	; 0x01
    spin_init( sched_lock );
    2bf0:	89 81       	ldd	r24, Y+1	; 0x01
    2bf2:	9a 81       	ldd	r25, Y+2	; 0x02
    2bf4:	0e 94 0b 01 	call	0x216	; 0x216 <spin_init>
    spin_lock( sched_lock );
    2bf8:	89 81       	ldd	r24, Y+1	; 0x01
    2bfa:	9a 81       	ldd	r25, Y+2	; 0x02
    2bfc:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
#endif // CONFIG_MP
    sched->ready = (xlist_t *)sched->plst;
    2c00:	8b 81       	ldd	r24, Y+3	; 0x03
    2c02:	9c 81       	ldd	r25, Y+4	; 0x04
    2c04:	06 96       	adiw	r24, 0x06	; 6
    2c06:	eb 81       	ldd	r30, Y+3	; 0x03
    2c08:	fc 81       	ldd	r31, Y+4	; 0x04
    2c0a:	93 83       	std	Z+3, r25	; 0x03
    2c0c:	82 83       	std	Z+2, r24	; 0x02
    xlist_init( sched->ready );
    2c0e:	eb 81       	ldd	r30, Y+3	; 0x03
    2c10:	fc 81       	ldd	r31, Y+4	; 0x04
    2c12:	82 81       	ldd	r24, Z+2	; 0x02
    2c14:	93 81       	ldd	r25, Z+3	; 0x03
    2c16:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <xlist_init>
    sched->expired = (xlist_t *)sched->plst + 1;
    2c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c1c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c1e:	47 96       	adiw	r24, 0x17	; 23
    2c20:	eb 81       	ldd	r30, Y+3	; 0x03
    2c22:	fc 81       	ldd	r31, Y+4	; 0x04
    2c24:	95 83       	std	Z+5, r25	; 0x05
    2c26:	84 83       	std	Z+4, r24	; 0x04
    xlist_init( sched->expired );
    2c28:	eb 81       	ldd	r30, Y+3	; 0x03
    2c2a:	fc 81       	ldd	r31, Y+4	; 0x04
    2c2c:	84 81       	ldd	r24, Z+4	; 0x04
    2c2e:	95 81       	ldd	r25, Z+5	; 0x05
    2c30:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <xlist_init>
    pitem_insert( (pitem_t *)idle, sched->ready );
    2c34:	8d 81       	ldd	r24, Y+5	; 0x05
    2c36:	9e 81       	ldd	r25, Y+6	; 0x06
    2c38:	eb 81       	ldd	r30, Y+3	; 0x03
    2c3a:	fc 81       	ldd	r31, Y+4	; 0x04
    2c3c:	22 81       	ldd	r18, Z+2	; 0x02
    2c3e:	33 81       	ldd	r19, Z+3	; 0x03
    2c40:	b9 01       	movw	r22, r18
    2c42:	0e 94 0d 10 	call	0x201a	; 0x201a <pitem_insert>
    sched->current_proc = idle;
    2c46:	eb 81       	ldd	r30, Y+3	; 0x03
    2c48:	fc 81       	ldd	r31, Y+4	; 0x04
    2c4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c4c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c4e:	91 83       	std	Z+1, r25	; 0x01
    2c50:	80 83       	st	Z, r24
    sched->nested_crit_sec = (count_t)0;//вообще это выполняется при запрещенных прерываниях, но не известно, на этом ли процессоре
    2c52:	eb 81       	ldd	r30, Y+3	; 0x03
    2c54:	fc 81       	ldd	r31, Y+4	; 0x04
    2c56:	11 a6       	std	Z+41, r1	; 0x29
    2c58:	10 a6       	std	Z+40, r1	; 0x28
#ifdef CONFIG_MP
    spin_unlock( sched_lock );
    2c5a:	89 81       	ldd	r24, Y+1	; 0x01
    2c5c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c5e:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
    stat_inc( idle, (stat_t *)kernel.stat + idle->core_id );
    2c62:	ed 81       	ldd	r30, Y+5	; 0x05
    2c64:	fe 81       	ldd	r31, Y+6	; 0x06
    2c66:	81 a1       	ldd	r24, Z+33	; 0x21
    2c68:	88 2f       	mov	r24, r24
    2c6a:	90 e0       	ldi	r25, 0x00	; 0
    2c6c:	9c 01       	movw	r18, r24
    2c6e:	27 58       	subi	r18, 0x87	; 135
    2c70:	3c 4f       	sbci	r19, 0xFC	; 252
    2c72:	8d 81       	ldd	r24, Y+5	; 0x05
    2c74:	9e 81       	ldd	r25, Y+6	; 0x06
    2c76:	b9 01       	movw	r22, r18
    2c78:	0e 94 6e 01 	call	0x2dc	; 0x2dc <stat_inc>
#endif // CONFIG_MP
}
    2c7c:	26 96       	adiw	r28, 0x06	; 6
    2c7e:	0f b6       	in	r0, 0x3f	; 63
    2c80:	f8 94       	cli
    2c82:	de bf       	out	0x3e, r29	; 62
    2c84:	0f be       	out	0x3f, r0	; 63
    2c86:	cd bf       	out	0x3d, r28	; 61
    2c88:	cf 91       	pop	r28
    2c8a:	df 91       	pop	r29
    2c8c:	08 95       	ret

00002c8e <_sched_switch_current>:
static void _sched_switch_current( sched_t * sched, proc_t ** current_proc )
{
    2c8e:	df 93       	push	r29
    2c90:	cf 93       	push	r28
    2c92:	00 d0       	rcall	.+0      	; 0x2c94 <_sched_switch_current+0x6>
    2c94:	00 d0       	rcall	.+0      	; 0x2c96 <_sched_switch_current+0x8>
    2c96:	00 d0       	rcall	.+0      	; 0x2c98 <_sched_switch_current+0xa>
    2c98:	cd b7       	in	r28, 0x3d	; 61
    2c9a:	de b7       	in	r29, 0x3e	; 62
    2c9c:	9c 83       	std	Y+4, r25	; 0x04
    2c9e:	8b 83       	std	Y+3, r24	; 0x03
    2ca0:	7e 83       	std	Y+6, r23	; 0x06
    2ca2:	6d 83       	std	Y+5, r22	; 0x05

    SPIN_LOCK( sched );
    2ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ca8:	8a 96       	adiw	r24, 0x2a	; 42
    2caa:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    // Если список ready опустел, - переключаем списки
    if( sched->ready->index == (index_t)0 )
    2cae:	eb 81       	ldd	r30, Y+3	; 0x03
    2cb0:	fc 81       	ldd	r31, Y+4	; 0x04
    2cb2:	02 80       	ldd	r0, Z+2	; 0x02
    2cb4:	f3 81       	ldd	r31, Z+3	; 0x03
    2cb6:	e0 2d       	mov	r30, r0
    2cb8:	80 89       	ldd	r24, Z+16	; 0x10
    2cba:	88 23       	and	r24, r24
    2cbc:	a1 f4       	brne	.+40     	; 0x2ce6 <_sched_switch_current+0x58>
    {
        xlist_t * buf;
        buf = sched->ready;
    2cbe:	eb 81       	ldd	r30, Y+3	; 0x03
    2cc0:	fc 81       	ldd	r31, Y+4	; 0x04
    2cc2:	82 81       	ldd	r24, Z+2	; 0x02
    2cc4:	93 81       	ldd	r25, Z+3	; 0x03
    2cc6:	9a 83       	std	Y+2, r25	; 0x02
    2cc8:	89 83       	std	Y+1, r24	; 0x01
        sched->ready = sched->expired;
    2cca:	eb 81       	ldd	r30, Y+3	; 0x03
    2ccc:	fc 81       	ldd	r31, Y+4	; 0x04
    2cce:	84 81       	ldd	r24, Z+4	; 0x04
    2cd0:	95 81       	ldd	r25, Z+5	; 0x05
    2cd2:	eb 81       	ldd	r30, Y+3	; 0x03
    2cd4:	fc 81       	ldd	r31, Y+4	; 0x04
    2cd6:	93 83       	std	Z+3, r25	; 0x03
    2cd8:	82 83       	std	Z+2, r24	; 0x02
        sched->expired = buf;
    2cda:	eb 81       	ldd	r30, Y+3	; 0x03
    2cdc:	fc 81       	ldd	r31, Y+4	; 0x04
    2cde:	89 81       	ldd	r24, Y+1	; 0x01
    2ce0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ce2:	95 83       	std	Z+5, r25	; 0x05
    2ce4:	84 83       	std	Z+4, r24	; 0x04
    }
    // Изменять указатель будем при захваченной блокировке,
    // чтобы процессы на других процессорах не прочитали неизвестно что.
    sched->current_proc = (proc_t *)xlist_head( sched->ready ); // Вытесняющая многозадачность же!
    2ce6:	eb 81       	ldd	r30, Y+3	; 0x03
    2ce8:	fc 81       	ldd	r31, Y+4	; 0x04
    2cea:	82 81       	ldd	r24, Z+2	; 0x02
    2cec:	93 81       	ldd	r25, Z+3	; 0x03
    2cee:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <xlist_head>
    2cf2:	eb 81       	ldd	r30, Y+3	; 0x03
    2cf4:	fc 81       	ldd	r31, Y+4	; 0x04
    2cf6:	91 83       	std	Z+1, r25	; 0x01
    2cf8:	80 83       	st	Z, r24
    *current_proc = sched->current_proc;
    2cfa:	eb 81       	ldd	r30, Y+3	; 0x03
    2cfc:	fc 81       	ldd	r31, Y+4	; 0x04
    2cfe:	80 81       	ld	r24, Z
    2d00:	91 81       	ldd	r25, Z+1	; 0x01
    2d02:	ed 81       	ldd	r30, Y+5	; 0x05
    2d04:	fe 81       	ldd	r31, Y+6	; 0x06
    2d06:	91 83       	std	Z+1, r25	; 0x01
    2d08:	80 83       	st	Z, r24

    SPIN_UNLOCK( sched );
    2d0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d0c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d0e:	8a 96       	adiw	r24, 0x2a	; 42
    2d10:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
}
    2d14:	26 96       	adiw	r28, 0x06	; 6
    2d16:	0f b6       	in	r0, 0x3f	; 63
    2d18:	f8 94       	cli
    2d1a:	de bf       	out	0x3e, r29	; 62
    2d1c:	0f be       	out	0x3f, r0	; 63
    2d1e:	cd bf       	out	0x3d, r28	; 61
    2d20:	cf 91       	pop	r28
    2d22:	df 91       	pop	r29
    2d24:	08 95       	ret

00002d26 <sched_schedule>:
2) В качестве аргумента передаем только тот объект, который управляет процессами
на исполняющем функции процессоре.
******************************************************************************************/
// Функция планирования, переключает процессы в обработчике системмного таймера
void sched_schedule(void)
{
    2d26:	df 93       	push	r29
    2d28:	cf 93       	push	r28
    2d2a:	00 d0       	rcall	.+0      	; 0x2d2c <sched_schedule+0x6>
    2d2c:	00 d0       	rcall	.+0      	; 0x2d2e <sched_schedule+0x8>
    2d2e:	00 d0       	rcall	.+0      	; 0x2d30 <sched_schedule+0xa>
    2d30:	cd b7       	in	r28, 0x3d	; 61
    2d32:	de b7       	in	r29, 0x3e	; 62
    proc_t * current_proc;
    sched_t * sched;
    sched = _SCHED_INIT();
    2d34:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <current_core>
    2d38:	28 2f       	mov	r18, r24
    2d3a:	30 e0       	ldi	r19, 0x00	; 0
    2d3c:	8b e2       	ldi	r24, 0x2B	; 43
    2d3e:	90 e0       	ldi	r25, 0x00	; 0
    2d40:	ac 01       	movw	r20, r24
    2d42:	24 9f       	mul	r18, r20
    2d44:	c0 01       	movw	r24, r0
    2d46:	25 9f       	mul	r18, r21
    2d48:	90 0d       	add	r25, r0
    2d4a:	34 9f       	mul	r19, r20
    2d4c:	90 0d       	add	r25, r0
    2d4e:	11 24       	eor	r1, r1
    2d50:	8d 53       	subi	r24, 0x3D	; 61
    2d52:	9d 4f       	sbci	r25, 0xFD	; 253
    2d54:	9c 83       	std	Y+4, r25	; 0x04
    2d56:	8b 83       	std	Y+3, r24	; 0x03
    // Меняем только с локального процессора, блокировку sched->lock можно не захватывать!
    current_proc = sched->current_proc;
    2d58:	eb 81       	ldd	r30, Y+3	; 0x03
    2d5a:	fc 81       	ldd	r31, Y+4	; 0x04
    2d5c:	80 81       	ld	r24, Z
    2d5e:	91 81       	ldd	r25, Z+1	; 0x01
    2d60:	9e 83       	std	Y+6, r25	; 0x06
    2d62:	8d 83       	std	Y+5, r24	; 0x05
    // А вот эту блокировку обязательно надо захватить!
    SPIN_LOCK( current_proc );
    2d64:	8d 81       	ldd	r24, Y+5	; 0x05
    2d66:	9e 81       	ldd	r25, Y+6	; 0x06
    2d68:	83 96       	adiw	r24, 0x23	; 35
    2d6a:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    // Хук "сохранение контекста"
    if( current_proc->sv_hook )current_proc->sv_hook( current_proc->arg );
    2d6e:	ed 81       	ldd	r30, Y+5	; 0x05
    2d70:	fe 81       	ldd	r31, Y+6	; 0x06
    2d72:	86 a1       	ldd	r24, Z+38	; 0x26
    2d74:	97 a1       	ldd	r25, Z+39	; 0x27
    2d76:	00 97       	sbiw	r24, 0x00	; 0
    2d78:	51 f0       	breq	.+20     	; 0x2d8e <sched_schedule+0x68>
    2d7a:	ed 81       	ldd	r30, Y+5	; 0x05
    2d7c:	fe 81       	ldd	r31, Y+6	; 0x06
    2d7e:	26 a1       	ldd	r18, Z+38	; 0x26
    2d80:	37 a1       	ldd	r19, Z+39	; 0x27
    2d82:	ed 81       	ldd	r30, Y+5	; 0x05
    2d84:	fe 81       	ldd	r31, Y+6	; 0x06
    2d86:	82 a5       	ldd	r24, Z+42	; 0x2a
    2d88:	93 a5       	ldd	r25, Z+43	; 0x2b
    2d8a:	f9 01       	movw	r30, r18
    2d8c:	09 95       	icall
    // Проверяем, что процесс находится в списке ready
    if( (xlist_t *)((pitem_t *)current_proc)->list == sched->ready )
    2d8e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d90:	9e 81       	ldd	r25, Y+6	; 0x06
    2d92:	fc 01       	movw	r30, r24
    2d94:	24 81       	ldd	r18, Z+4	; 0x04
    2d96:	35 81       	ldd	r19, Z+5	; 0x05
    2d98:	eb 81       	ldd	r30, Y+3	; 0x03
    2d9a:	fc 81       	ldd	r31, Y+4	; 0x04
    2d9c:	82 81       	ldd	r24, Z+2	; 0x02
    2d9e:	93 81       	ldd	r25, Z+3	; 0x03
    2da0:	28 17       	cp	r18, r24
    2da2:	39 07       	cpc	r19, r25
    2da4:	09 f0       	breq	.+2      	; 0x2da8 <sched_schedule+0x82>
    2da6:	94 c0       	rjmp	.+296    	; 0x2ed0 <sched_schedule+0x1aa>
    {
        // Переключаем cписок на следующий за текущим процесс
        SPIN_LOCK( sched );
    2da8:	8b 81       	ldd	r24, Y+3	; 0x03
    2daa:	9c 81       	ldd	r25, Y+4	; 0x04
    2dac:	8a 96       	adiw	r24, 0x2a	; 42
    2dae:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>

        xlist_switch( sched->ready, ((pitem_t *)current_proc)->prio );
    2db2:	eb 81       	ldd	r30, Y+3	; 0x03
    2db4:	fc 81       	ldd	r31, Y+4	; 0x04
    2db6:	22 81       	ldd	r18, Z+2	; 0x02
    2db8:	33 81       	ldd	r19, Z+3	; 0x03
    2dba:	8d 81       	ldd	r24, Y+5	; 0x05
    2dbc:	9e 81       	ldd	r25, Y+6	; 0x06
    2dbe:	fc 01       	movw	r30, r24
    2dc0:	46 81       	ldd	r20, Z+6	; 0x06
    2dc2:	c9 01       	movw	r24, r18
    2dc4:	64 2f       	mov	r22, r20
    2dc6:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <xlist_switch>

        SPIN_UNLOCK( sched );
    2dca:	8b 81       	ldd	r24, Y+3	; 0x03
    2dcc:	9c 81       	ldd	r25, Y+4	; 0x04
    2dce:	8a 96       	adiw	r24, 0x2a	; 42
    2dd0:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
        //Проверяем, не истек ли квант времени процесса
        if( current_proc->timer > (timer_t)1 )current_proc->timer--;// Не истек, уменьшаем таймер
    2dd4:	ed 81       	ldd	r30, Y+5	; 0x05
    2dd6:	fe 81       	ldd	r31, Y+6	; 0x06
    2dd8:	85 8d       	ldd	r24, Z+29	; 0x1d
    2dda:	96 8d       	ldd	r25, Z+30	; 0x1e
    2ddc:	82 30       	cpi	r24, 0x02	; 2
    2dde:	91 05       	cpc	r25, r1
    2de0:	40 f0       	brcs	.+16     	; 0x2df2 <sched_schedule+0xcc>
    2de2:	ed 81       	ldd	r30, Y+5	; 0x05
    2de4:	fe 81       	ldd	r31, Y+6	; 0x06
    2de6:	85 8d       	ldd	r24, Z+29	; 0x1d
    2de8:	96 8d       	ldd	r25, Z+30	; 0x1e
    2dea:	01 97       	sbiw	r24, 0x01	; 1
    2dec:	96 8f       	std	Z+30, r25	; 0x1e
    2dee:	85 8f       	std	Z+29, r24	; 0x1d
    2df0:	6f c0       	rjmp	.+222    	; 0x2ed0 <sched_schedule+0x1aa>
        else
        {
            flag_t flags;
            // Истек, вырезаем процесс из списка
            SPIN_LOCK( sched );
    2df2:	8b 81       	ldd	r24, Y+3	; 0x03
    2df4:	9c 81       	ldd	r25, Y+4	; 0x04
    2df6:	8a 96       	adiw	r24, 0x2a	; 42
    2df8:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>

            pitem_fast_cut( (pitem_t *)current_proc );
    2dfc:	8d 81       	ldd	r24, Y+5	; 0x05
    2dfe:	9e 81       	ldd	r25, Y+6	; 0x06
    2e00:	0e 94 63 10 	call	0x20c6	; 0x20c6 <pitem_fast_cut>

            SPIN_UNLOCK( sched );
    2e04:	8b 81       	ldd	r24, Y+3	; 0x03
    2e06:	9c 81       	ldd	r25, Y+4	; 0x04
    2e08:	8a 96       	adiw	r24, 0x2a	; 42
    2e0a:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
            spin_lock( &kernel.stat_lock );
            // Обновили статистику после удаления процесса из списка ready
            stat_dec( current_proc, (stat_t *)kernel.stat + current_proc->core_id );
#endif // CONFIG_USE_ALB
            // А что за процесс собственно?
            flags = current_proc->flags;
    2e0e:	ed 81       	ldd	r30, Y+5	; 0x05
    2e10:	fe 81       	ldd	r31, Y+6	; 0x06
    2e12:	87 81       	ldd	r24, Z+7	; 0x07
    2e14:	90 85       	ldd	r25, Z+8	; 0x08
    2e16:	9a 83       	std	Y+2, r25	; 0x02
    2e18:	89 83       	std	Y+1, r24	; 0x01
            if(
    2e1a:	89 81       	ldd	r24, Y+1	; 0x01
    2e1c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e1e:	81 70       	andi	r24, 0x01	; 1
    2e20:	90 70       	andi	r25, 0x00	; 0
    2e22:	00 97       	sbiw	r24, 0x00	; 0
    2e24:	31 f0       	breq	.+12     	; 0x2e32 <sched_schedule+0x10c>
    2e26:	89 81       	ldd	r24, Y+1	; 0x01
    2e28:	9a 81       	ldd	r25, Y+2	; 0x02
    2e2a:	8c 70       	andi	r24, 0x0C	; 12
    2e2c:	90 70       	andi	r25, 0x00	; 0
    2e2e:	00 97       	sbiw	r24, 0x00	; 0
    2e30:	f1 f0       	breq	.+60     	; 0x2e6e <sched_schedule+0x148>
                SPIN_LOCK( new_sched );
                pitem_insert( (pitem_t *)current_proc, new_sched->expired );
                SPIN_UNLOCK( new_sched );
#else // CONFIG_MP CONFIG_USE_ALB
                // Тупо переносим процесс в список expired
                SPIN_LOCK( sched );
    2e32:	8b 81       	ldd	r24, Y+3	; 0x03
    2e34:	9c 81       	ldd	r25, Y+4	; 0x04
    2e36:	8a 96       	adiw	r24, 0x2a	; 42
    2e38:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>

                pitem_insert( (pitem_t *)current_proc, sched->expired );
    2e3c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e3e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e40:	eb 81       	ldd	r30, Y+3	; 0x03
    2e42:	fc 81       	ldd	r31, Y+4	; 0x04
    2e44:	24 81       	ldd	r18, Z+4	; 0x04
    2e46:	35 81       	ldd	r19, Z+5	; 0x05
    2e48:	b9 01       	movw	r22, r18
    2e4a:	0e 94 0d 10 	call	0x201a	; 0x201a <pitem_insert>

                SPIN_UNLOCK( sched );
    2e4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e50:	9c 81       	ldd	r25, Y+4	; 0x04
    2e52:	8a 96       	adiw	r24, 0x2a	; 42
    2e54:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>

#endif // CONFIG_MP CONFIG_USE_ALB
                current_proc->timer = current_proc->time_quant; // Сбросили таймер!
    2e58:	ad 81       	ldd	r26, Y+5	; 0x05
    2e5a:	be 81       	ldd	r27, Y+6	; 0x06
    2e5c:	ed 81       	ldd	r30, Y+5	; 0x05
    2e5e:	fe 81       	ldd	r31, Y+6	; 0x06
    2e60:	83 8d       	ldd	r24, Z+27	; 0x1b
    2e62:	94 8d       	ldd	r25, Z+28	; 0x1c
    2e64:	5e 96       	adiw	r26, 0x1e	; 30
    2e66:	9c 93       	st	X, r25
    2e68:	8e 93       	st	-X, r24
    2e6a:	5d 97       	sbiw	r26, 0x1d	; 29
    2e6c:	31 c0       	rjmp	.+98     	; 0x2ed0 <sched_schedule+0x1aa>
                /*********************************************************
                Если не используется активная схема балансировки нагрузки,
                то захват нужно делать тут, блокировка захватывается только
                в этой ветви оператора if.
                *********************************************************/
                spin_lock( &kernel.stat_lock );
    2e6e:	8b e7       	ldi	r24, 0x7B	; 123
    2e70:	93 e0       	ldi	r25, 0x03	; 3
    2e72:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
                stat_dec( current_proc, (stat_t *)kernel.stat + current_proc->core_id );
    2e76:	4d 81       	ldd	r20, Y+5	; 0x05
    2e78:	5e 81       	ldd	r21, Y+6	; 0x06
    2e7a:	ed 81       	ldd	r30, Y+5	; 0x05
    2e7c:	fe 81       	ldd	r31, Y+6	; 0x06
    2e7e:	81 a1       	ldd	r24, Z+33	; 0x21
    2e80:	88 2f       	mov	r24, r24
    2e82:	90 e0       	ldi	r25, 0x00	; 0
    2e84:	9c 01       	movw	r18, r24
    2e86:	27 58       	subi	r18, 0x87	; 135
    2e88:	3c 4f       	sbci	r19, 0xFC	; 252
    2e8a:	ca 01       	movw	r24, r20
    2e8c:	b9 01       	movw	r22, r18
    2e8e:	0e 94 58 01 	call	0x2b0	; 0x2b0 <stat_dec>
                 - если используется активная схема балансировки нагрузки,
                то блокировка была захвачена до входа в if;
                 - если не используется активная схема балансировки нагрузки,
                то блокировка была захвачена в этой ветви if.
                *********************************************************/
                spin_unlock( &kernel.stat_lock );
    2e92:	8b e7       	ldi	r24, 0x7B	; 123
    2e94:	93 e0       	ldi	r25, 0x03	; 3
    2e96:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
#endif // CONFIG_MP
                ((pitem_t *)current_proc)->list = (xlist_t *)0;// Просто вырезали из списка, как в pitem_cut
    2e9a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e9c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e9e:	fc 01       	movw	r30, r24
    2ea0:	15 82       	std	Z+5, r1	; 0x05
    2ea2:	14 82       	std	Z+4, r1	; 0x04
                current_proc->flags |= PROC_FLG_WD_STOP;//Остановлен по WD
    2ea4:	ad 81       	ldd	r26, Y+5	; 0x05
    2ea6:	be 81       	ldd	r27, Y+6	; 0x06
    2ea8:	ed 81       	ldd	r30, Y+5	; 0x05
    2eaa:	fe 81       	ldd	r31, Y+6	; 0x06
    2eac:	87 81       	ldd	r24, Z+7	; 0x07
    2eae:	90 85       	ldd	r25, Z+8	; 0x08
    2eb0:	92 60       	ori	r25, 0x02	; 2
    2eb2:	18 96       	adiw	r26, 0x08	; 8
    2eb4:	9c 93       	st	X, r25
    2eb6:	8e 93       	st	-X, r24
    2eb8:	17 97       	sbiw	r26, 0x07	; 7
                current_proc->flags &= ~PROC_FLG_RUN;
    2eba:	ad 81       	ldd	r26, Y+5	; 0x05
    2ebc:	be 81       	ldd	r27, Y+6	; 0x06
    2ebe:	ed 81       	ldd	r30, Y+5	; 0x05
    2ec0:	fe 81       	ldd	r31, Y+6	; 0x06
    2ec2:	87 81       	ldd	r24, Z+7	; 0x07
    2ec4:	90 85       	ldd	r25, Z+8	; 0x08
    2ec6:	8d 7f       	andi	r24, 0xFD	; 253
    2ec8:	18 96       	adiw	r26, 0x08	; 8
    2eca:	9c 93       	st	X, r25
    2ecc:	8e 93       	st	-X, r24
    2ece:	17 97       	sbiw	r26, 0x07	; 7
            }
        }
    }
    //Текущий процесс более не нужен, освобождаем его блокировку
    SPIN_UNLOCK( current_proc );
    2ed0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ed2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ed4:	83 96       	adiw	r24, 0x23	; 35
    2ed6:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>

    _sched_switch_current( sched, &current_proc );
    2eda:	8b 81       	ldd	r24, Y+3	; 0x03
    2edc:	9c 81       	ldd	r25, Y+4	; 0x04
    2ede:	9e 01       	movw	r18, r28
    2ee0:	2b 5f       	subi	r18, 0xFB	; 251
    2ee2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ee4:	b9 01       	movw	r22, r18
    2ee6:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <_sched_switch_current>

    SPIN_LOCK( current_proc );
    2eea:	8d 81       	ldd	r24, Y+5	; 0x05
    2eec:	9e 81       	ldd	r25, Y+6	; 0x06
    2eee:	83 96       	adiw	r24, 0x23	; 35
    2ef0:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    //Хук "восстановление контекста"
    if( current_proc->rs_hook )current_proc->rs_hook( current_proc->arg );
    2ef4:	ed 81       	ldd	r30, Y+5	; 0x05
    2ef6:	fe 81       	ldd	r31, Y+6	; 0x06
    2ef8:	80 a5       	ldd	r24, Z+40	; 0x28
    2efa:	91 a5       	ldd	r25, Z+41	; 0x29
    2efc:	00 97       	sbiw	r24, 0x00	; 0
    2efe:	51 f0       	breq	.+20     	; 0x2f14 <sched_schedule+0x1ee>
    2f00:	ed 81       	ldd	r30, Y+5	; 0x05
    2f02:	fe 81       	ldd	r31, Y+6	; 0x06
    2f04:	20 a5       	ldd	r18, Z+40	; 0x28
    2f06:	31 a5       	ldd	r19, Z+41	; 0x29
    2f08:	ed 81       	ldd	r30, Y+5	; 0x05
    2f0a:	fe 81       	ldd	r31, Y+6	; 0x06
    2f0c:	82 a5       	ldd	r24, Z+42	; 0x2a
    2f0e:	93 a5       	ldd	r25, Z+43	; 0x2b
    2f10:	f9 01       	movw	r30, r18
    2f12:	09 95       	icall

    SPIN_UNLOCK( current_proc );
    2f14:	8d 81       	ldd	r24, Y+5	; 0x05
    2f16:	9e 81       	ldd	r25, Y+6	; 0x06
    2f18:	83 96       	adiw	r24, 0x23	; 35
    2f1a:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
}
    2f1e:	26 96       	adiw	r28, 0x06	; 6
    2f20:	0f b6       	in	r0, 0x3f	; 63
    2f22:	f8 94       	cli
    2f24:	de bf       	out	0x3e, r29	; 62
    2f26:	0f be       	out	0x3f, r0	; 63
    2f28:	cd bf       	out	0x3d, r28	; 61
    2f2a:	cf 91       	pop	r28
    2f2c:	df 91       	pop	r29
    2f2e:	08 95       	ret

00002f30 <sched_reschedule>:
//----------------------------------------------------------------------------------------
// Функция перепланирования, переключает процессы в обработчике прерывания resched
void sched_reschedule(void)
{
    2f30:	df 93       	push	r29
    2f32:	cf 93       	push	r28
    2f34:	00 d0       	rcall	.+0      	; 0x2f36 <sched_reschedule+0x6>
    2f36:	00 d0       	rcall	.+0      	; 0x2f38 <sched_reschedule+0x8>
    2f38:	cd b7       	in	r28, 0x3d	; 61
    2f3a:	de b7       	in	r29, 0x3e	; 62
    proc_t * current_proc;
    sched_t * sched;
    sched = _SCHED_INIT();
    2f3c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <current_core>
    2f40:	28 2f       	mov	r18, r24
    2f42:	30 e0       	ldi	r19, 0x00	; 0
    2f44:	8b e2       	ldi	r24, 0x2B	; 43
    2f46:	90 e0       	ldi	r25, 0x00	; 0
    2f48:	ac 01       	movw	r20, r24
    2f4a:	24 9f       	mul	r18, r20
    2f4c:	c0 01       	movw	r24, r0
    2f4e:	25 9f       	mul	r18, r21
    2f50:	90 0d       	add	r25, r0
    2f52:	34 9f       	mul	r19, r20
    2f54:	90 0d       	add	r25, r0
    2f56:	11 24       	eor	r1, r1
    2f58:	8d 53       	subi	r24, 0x3D	; 61
    2f5a:	9d 4f       	sbci	r25, 0xFD	; 253
    2f5c:	9a 83       	std	Y+2, r25	; 0x02
    2f5e:	89 83       	std	Y+1, r24	; 0x01
    // Меняем только с локального процессора, блокировку sched->lock можно не захватывать!
    current_proc = sched->current_proc;
    2f60:	e9 81       	ldd	r30, Y+1	; 0x01
    2f62:	fa 81       	ldd	r31, Y+2	; 0x02
    2f64:	80 81       	ld	r24, Z
    2f66:	91 81       	ldd	r25, Z+1	; 0x01
    2f68:	9c 83       	std	Y+4, r25	; 0x04
    2f6a:	8b 83       	std	Y+3, r24	; 0x03
    // А вот эту блокировку обязательно надо захватить!
    SPIN_LOCK( current_proc );
    2f6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f6e:	9c 81       	ldd	r25, Y+4	; 0x04
    2f70:	83 96       	adiw	r24, 0x23	; 35
    2f72:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    // Хук "сохранение контекста"
    if( current_proc->sv_hook )current_proc->sv_hook( current_proc->arg );
    2f76:	eb 81       	ldd	r30, Y+3	; 0x03
    2f78:	fc 81       	ldd	r31, Y+4	; 0x04
    2f7a:	86 a1       	ldd	r24, Z+38	; 0x26
    2f7c:	97 a1       	ldd	r25, Z+39	; 0x27
    2f7e:	00 97       	sbiw	r24, 0x00	; 0
    2f80:	51 f0       	breq	.+20     	; 0x2f96 <sched_reschedule+0x66>
    2f82:	eb 81       	ldd	r30, Y+3	; 0x03
    2f84:	fc 81       	ldd	r31, Y+4	; 0x04
    2f86:	26 a1       	ldd	r18, Z+38	; 0x26
    2f88:	37 a1       	ldd	r19, Z+39	; 0x27
    2f8a:	eb 81       	ldd	r30, Y+3	; 0x03
    2f8c:	fc 81       	ldd	r31, Y+4	; 0x04
    2f8e:	82 a5       	ldd	r24, Z+42	; 0x2a
    2f90:	93 a5       	ldd	r25, Z+43	; 0x2b
    2f92:	f9 01       	movw	r30, r18
    2f94:	09 95       	icall

    SPIN_UNLOCK( current_proc );
    2f96:	8b 81       	ldd	r24, Y+3	; 0x03
    2f98:	9c 81       	ldd	r25, Y+4	; 0x04
    2f9a:	83 96       	adiw	r24, 0x23	; 35
    2f9c:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>

    _sched_switch_current( sched, &current_proc );
    2fa0:	89 81       	ldd	r24, Y+1	; 0x01
    2fa2:	9a 81       	ldd	r25, Y+2	; 0x02
    2fa4:	9e 01       	movw	r18, r28
    2fa6:	2d 5f       	subi	r18, 0xFD	; 253
    2fa8:	3f 4f       	sbci	r19, 0xFF	; 255
    2faa:	b9 01       	movw	r22, r18
    2fac:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <_sched_switch_current>

    SPIN_LOCK( current_proc );
    2fb0:	8b 81       	ldd	r24, Y+3	; 0x03
    2fb2:	9c 81       	ldd	r25, Y+4	; 0x04
    2fb4:	83 96       	adiw	r24, 0x23	; 35
    2fb6:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    //Хук "восстановление контекста"
    if( current_proc->rs_hook )current_proc->rs_hook( current_proc->arg );
    2fba:	eb 81       	ldd	r30, Y+3	; 0x03
    2fbc:	fc 81       	ldd	r31, Y+4	; 0x04
    2fbe:	80 a5       	ldd	r24, Z+40	; 0x28
    2fc0:	91 a5       	ldd	r25, Z+41	; 0x29
    2fc2:	00 97       	sbiw	r24, 0x00	; 0
    2fc4:	51 f0       	breq	.+20     	; 0x2fda <sched_reschedule+0xaa>
    2fc6:	eb 81       	ldd	r30, Y+3	; 0x03
    2fc8:	fc 81       	ldd	r31, Y+4	; 0x04
    2fca:	20 a5       	ldd	r18, Z+40	; 0x28
    2fcc:	31 a5       	ldd	r19, Z+41	; 0x29
    2fce:	eb 81       	ldd	r30, Y+3	; 0x03
    2fd0:	fc 81       	ldd	r31, Y+4	; 0x04
    2fd2:	82 a5       	ldd	r24, Z+42	; 0x2a
    2fd4:	93 a5       	ldd	r25, Z+43	; 0x2b
    2fd6:	f9 01       	movw	r30, r18
    2fd8:	09 95       	icall

    SPIN_UNLOCK( current_proc );
    2fda:	8b 81       	ldd	r24, Y+3	; 0x03
    2fdc:	9c 81       	ldd	r25, Y+4	; 0x04
    2fde:	83 96       	adiw	r24, 0x23	; 35
    2fe0:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
}
    2fe4:	0f 90       	pop	r0
    2fe6:	0f 90       	pop	r0
    2fe8:	0f 90       	pop	r0
    2fea:	0f 90       	pop	r0
    2fec:	cf 91       	pop	r28
    2fee:	df 91       	pop	r29
    2ff0:	08 95       	ret

00002ff2 <sem_init_isr>:
*****************************************************************************************/
#include "../include/bugurt.h"

// Инициализация
void sem_init_isr( sem_t * sem, count_t count )
{
    2ff2:	df 93       	push	r29
    2ff4:	cf 93       	push	r28
    2ff6:	00 d0       	rcall	.+0      	; 0x2ff8 <sem_init_isr+0x6>
    2ff8:	00 d0       	rcall	.+0      	; 0x2ffa <sem_init_isr+0x8>
    2ffa:	cd b7       	in	r28, 0x3d	; 61
    2ffc:	de b7       	in	r29, 0x3e	; 62
    2ffe:	9a 83       	std	Y+2, r25	; 0x02
    3000:	89 83       	std	Y+1, r24	; 0x01
    3002:	7c 83       	std	Y+4, r23	; 0x04
    3004:	6b 83       	std	Y+3, r22	; 0x03
    SPIN_INIT( sem );
    3006:	89 81       	ldd	r24, Y+1	; 0x01
    3008:	9a 81       	ldd	r25, Y+2	; 0x02
    300a:	43 96       	adiw	r24, 0x13	; 19
    300c:	0e 94 0b 01 	call	0x216	; 0x216 <spin_init>
    SPIN_LOCK( sem );
    3010:	89 81       	ldd	r24, Y+1	; 0x01
    3012:	9a 81       	ldd	r25, Y+2	; 0x02
    3014:	43 96       	adiw	r24, 0x13	; 19
    3016:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>

    xlist_init( (xlist_t *)sem );
    301a:	89 81       	ldd	r24, Y+1	; 0x01
    301c:	9a 81       	ldd	r25, Y+2	; 0x02
    301e:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <xlist_init>
    sem->counter = count;
    3022:	e9 81       	ldd	r30, Y+1	; 0x01
    3024:	fa 81       	ldd	r31, Y+2	; 0x02
    3026:	8b 81       	ldd	r24, Y+3	; 0x03
    3028:	9c 81       	ldd	r25, Y+4	; 0x04
    302a:	92 8b       	std	Z+18, r25	; 0x12
    302c:	81 8b       	std	Z+17, r24	; 0x11
    SPIN_UNLOCK( sem );
    302e:	89 81       	ldd	r24, Y+1	; 0x01
    3030:	9a 81       	ldd	r25, Y+2	; 0x02
    3032:	43 96       	adiw	r24, 0x13	; 19
    3034:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
}
    3038:	0f 90       	pop	r0
    303a:	0f 90       	pop	r0
    303c:	0f 90       	pop	r0
    303e:	0f 90       	pop	r0
    3040:	cf 91       	pop	r28
    3042:	df 91       	pop	r29
    3044:	08 95       	ret

00003046 <_sem_lock>:

bool_t _sem_lock( sem_t * sem )
{
    3046:	df 93       	push	r29
    3048:	cf 93       	push	r28
    304a:	00 d0       	rcall	.+0      	; 0x304c <_sem_lock+0x6>
    304c:	00 d0       	rcall	.+0      	; 0x304e <_sem_lock+0x8>
    304e:	0f 92       	push	r0
    3050:	cd b7       	in	r28, 0x3d	; 61
    3052:	de b7       	in	r29, 0x3e	; 62
    3054:	9d 83       	std	Y+5, r25	; 0x05
    3056:	8c 83       	std	Y+4, r24	; 0x04
    bool_t ret = (bool_t)0;
    3058:	1b 82       	std	Y+3, r1	; 0x03
    proc_t * proc;
    proc = current_proc();
    305a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <current_proc>
    305e:	9a 83       	std	Y+2, r25	; 0x02
    3060:	89 83       	std	Y+1, r24	; 0x01
    // Выставляем флаг захватат семафора
    SPIN_LOCK( proc );
    3062:	89 81       	ldd	r24, Y+1	; 0x01
    3064:	9a 81       	ldd	r25, Y+2	; 0x02
    3066:	83 96       	adiw	r24, 0x23	; 35
    3068:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    proc->flags |= PROC_FLG_SEM;
    306c:	e9 81       	ldd	r30, Y+1	; 0x01
    306e:	fa 81       	ldd	r31, Y+2	; 0x02
    3070:	87 81       	ldd	r24, Z+7	; 0x07
    3072:	90 85       	ldd	r25, Z+8	; 0x08
    3074:	88 60       	ori	r24, 0x08	; 8
    3076:	e9 81       	ldd	r30, Y+1	; 0x01
    3078:	fa 81       	ldd	r31, Y+2	; 0x02
    307a:	90 87       	std	Z+8, r25	; 0x08
    307c:	87 83       	std	Z+7, r24	; 0x07
    SPIN_UNLOCK( proc );
    307e:	89 81       	ldd	r24, Y+1	; 0x01
    3080:	9a 81       	ldd	r25, Y+2	; 0x02
    3082:	83 96       	adiw	r24, 0x23	; 35
    3084:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
    // Собственно захват семафора
    SPIN_LOCK( sem );
    3088:	8c 81       	ldd	r24, Y+4	; 0x04
    308a:	9d 81       	ldd	r25, Y+5	; 0x05
    308c:	43 96       	adiw	r24, 0x13	; 19
    308e:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    if( sem->counter != 0 )
    3092:	ec 81       	ldd	r30, Y+4	; 0x04
    3094:	fd 81       	ldd	r31, Y+5	; 0x05
    3096:	81 89       	ldd	r24, Z+17	; 0x11
    3098:	92 89       	ldd	r25, Z+18	; 0x12
    309a:	00 97       	sbiw	r24, 0x00	; 0
    309c:	61 f0       	breq	.+24     	; 0x30b6 <_sem_lock+0x70>
    {
        sem->counter--;
    309e:	ec 81       	ldd	r30, Y+4	; 0x04
    30a0:	fd 81       	ldd	r31, Y+5	; 0x05
    30a2:	81 89       	ldd	r24, Z+17	; 0x11
    30a4:	92 89       	ldd	r25, Z+18	; 0x12
    30a6:	01 97       	sbiw	r24, 0x01	; 1
    30a8:	ec 81       	ldd	r30, Y+4	; 0x04
    30aa:	fd 81       	ldd	r31, Y+5	; 0x05
    30ac:	92 8b       	std	Z+18, r25	; 0x12
    30ae:	81 8b       	std	Z+17, r24	; 0x11
        ret = (bool_t)1;
    30b0:	81 e0       	ldi	r24, 0x01	; 1
    30b2:	8b 83       	std	Y+3, r24	; 0x03
    30b4:	1e c0       	rjmp	.+60     	; 0x30f2 <_sem_lock+0xac>
    }
    else
    {
        SPIN_LOCK( proc );
    30b6:	89 81       	ldd	r24, Y+1	; 0x01
    30b8:	9a 81       	ldd	r25, Y+2	; 0x02
    30ba:	83 96       	adiw	r24, 0x23	; 35
    30bc:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
        proc->flags |= PROC_FLG_QUEUE;
    30c0:	e9 81       	ldd	r30, Y+1	; 0x01
    30c2:	fa 81       	ldd	r31, Y+2	; 0x02
    30c4:	87 81       	ldd	r24, Z+7	; 0x07
    30c6:	90 85       	ldd	r25, Z+8	; 0x08
    30c8:	80 61       	ori	r24, 0x10	; 16
    30ca:	e9 81       	ldd	r30, Y+1	; 0x01
    30cc:	fa 81       	ldd	r31, Y+2	; 0x02
    30ce:	90 87       	std	Z+8, r25	; 0x08
    30d0:	87 83       	std	Z+7, r24	; 0x07
        _proc_stop( proc );
    30d2:	89 81       	ldd	r24, Y+1	; 0x01
    30d4:	9a 81       	ldd	r25, Y+2	; 0x02
    30d6:	0e 94 54 13 	call	0x26a8	; 0x26a8 <_proc_stop>
        pitem_insert( (pitem_t *)proc, (xlist_t *)sem );
    30da:	89 81       	ldd	r24, Y+1	; 0x01
    30dc:	9a 81       	ldd	r25, Y+2	; 0x02
    30de:	2c 81       	ldd	r18, Y+4	; 0x04
    30e0:	3d 81       	ldd	r19, Y+5	; 0x05
    30e2:	b9 01       	movw	r22, r18
    30e4:	0e 94 0d 10 	call	0x201a	; 0x201a <pitem_insert>
        SPIN_UNLOCK( proc );
    30e8:	89 81       	ldd	r24, Y+1	; 0x01
    30ea:	9a 81       	ldd	r25, Y+2	; 0x02
    30ec:	83 96       	adiw	r24, 0x23	; 35
    30ee:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
    }
    SPIN_UNLOCK( sem );
    30f2:	8c 81       	ldd	r24, Y+4	; 0x04
    30f4:	9d 81       	ldd	r25, Y+5	; 0x05
    30f6:	43 96       	adiw	r24, 0x13	; 19
    30f8:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
    return ret;
    30fc:	8b 81       	ldd	r24, Y+3	; 0x03
}
    30fe:	0f 90       	pop	r0
    3100:	0f 90       	pop	r0
    3102:	0f 90       	pop	r0
    3104:	0f 90       	pop	r0
    3106:	0f 90       	pop	r0
    3108:	cf 91       	pop	r28
    310a:	df 91       	pop	r29
    310c:	08 95       	ret

0000310e <_sem_try_lock>:

bool_t _sem_try_lock( sem_t * sem )
{
    310e:	df 93       	push	r29
    3110:	cf 93       	push	r28
    3112:	00 d0       	rcall	.+0      	; 0x3114 <_sem_try_lock+0x6>
    3114:	00 d0       	rcall	.+0      	; 0x3116 <_sem_try_lock+0x8>
    3116:	0f 92       	push	r0
    3118:	cd b7       	in	r28, 0x3d	; 61
    311a:	de b7       	in	r29, 0x3e	; 62
    311c:	9d 83       	std	Y+5, r25	; 0x05
    311e:	8c 83       	std	Y+4, r24	; 0x04
    bool_t ret = (bool_t)0;
    3120:	1b 82       	std	Y+3, r1	; 0x03
    SPIN_LOCK( sem );
    3122:	8c 81       	ldd	r24, Y+4	; 0x04
    3124:	9d 81       	ldd	r25, Y+5	; 0x05
    3126:	43 96       	adiw	r24, 0x13	; 19
    3128:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    if( sem->counter != 0 )
    312c:	ec 81       	ldd	r30, Y+4	; 0x04
    312e:	fd 81       	ldd	r31, Y+5	; 0x05
    3130:	81 89       	ldd	r24, Z+17	; 0x11
    3132:	92 89       	ldd	r25, Z+18	; 0x12
    3134:	00 97       	sbiw	r24, 0x00	; 0
    3136:	11 f1       	breq	.+68     	; 0x317c <_sem_try_lock+0x6e>
    {
        proc_t * proc;
        proc = current_proc();
    3138:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <current_proc>
    313c:	9a 83       	std	Y+2, r25	; 0x02
    313e:	89 83       	std	Y+1, r24	; 0x01

        sem->counter--;
    3140:	ec 81       	ldd	r30, Y+4	; 0x04
    3142:	fd 81       	ldd	r31, Y+5	; 0x05
    3144:	81 89       	ldd	r24, Z+17	; 0x11
    3146:	92 89       	ldd	r25, Z+18	; 0x12
    3148:	01 97       	sbiw	r24, 0x01	; 1
    314a:	ec 81       	ldd	r30, Y+4	; 0x04
    314c:	fd 81       	ldd	r31, Y+5	; 0x05
    314e:	92 8b       	std	Z+18, r25	; 0x12
    3150:	81 8b       	std	Z+17, r24	; 0x11
        ret = (bool_t)1;
    3152:	81 e0       	ldi	r24, 0x01	; 1
    3154:	8b 83       	std	Y+3, r24	; 0x03
        // Выставляем флаг захватат семафора
        SPIN_LOCK( proc );
    3156:	89 81       	ldd	r24, Y+1	; 0x01
    3158:	9a 81       	ldd	r25, Y+2	; 0x02
    315a:	83 96       	adiw	r24, 0x23	; 35
    315c:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
        proc->flags |= PROC_FLG_SEM;
    3160:	e9 81       	ldd	r30, Y+1	; 0x01
    3162:	fa 81       	ldd	r31, Y+2	; 0x02
    3164:	87 81       	ldd	r24, Z+7	; 0x07
    3166:	90 85       	ldd	r25, Z+8	; 0x08
    3168:	88 60       	ori	r24, 0x08	; 8
    316a:	e9 81       	ldd	r30, Y+1	; 0x01
    316c:	fa 81       	ldd	r31, Y+2	; 0x02
    316e:	90 87       	std	Z+8, r25	; 0x08
    3170:	87 83       	std	Z+7, r24	; 0x07
        SPIN_UNLOCK( proc );
    3172:	89 81       	ldd	r24, Y+1	; 0x01
    3174:	9a 81       	ldd	r25, Y+2	; 0x02
    3176:	83 96       	adiw	r24, 0x23	; 35
    3178:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
    }
    SPIN_UNLOCK( sem );
    317c:	8c 81       	ldd	r24, Y+4	; 0x04
    317e:	9d 81       	ldd	r25, Y+5	; 0x05
    3180:	43 96       	adiw	r24, 0x13	; 19
    3182:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
    return ret;
    3186:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3188:	0f 90       	pop	r0
    318a:	0f 90       	pop	r0
    318c:	0f 90       	pop	r0
    318e:	0f 90       	pop	r0
    3190:	0f 90       	pop	r0
    3192:	cf 91       	pop	r28
    3194:	df 91       	pop	r29
    3196:	08 95       	ret

00003198 <sem_unlock_isr>:

void sem_unlock_isr( sem_t * sem )
{
    3198:	df 93       	push	r29
    319a:	cf 93       	push	r28
    319c:	00 d0       	rcall	.+0      	; 0x319e <sem_unlock_isr+0x6>
    319e:	00 d0       	rcall	.+0      	; 0x31a0 <sem_unlock_isr+0x8>
    31a0:	cd b7       	in	r28, 0x3d	; 61
    31a2:	de b7       	in	r29, 0x3e	; 62
    31a4:	9c 83       	std	Y+4, r25	; 0x04
    31a6:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc;
    SPIN_LOCK( sem );
    31a8:	8b 81       	ldd	r24, Y+3	; 0x03
    31aa:	9c 81       	ldd	r25, Y+4	; 0x04
    31ac:	43 96       	adiw	r24, 0x13	; 19
    31ae:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>

    if( ((xlist_t *)sem)->index == (index_t)0  )
    31b2:	eb 81       	ldd	r30, Y+3	; 0x03
    31b4:	fc 81       	ldd	r31, Y+4	; 0x04
    31b6:	80 89       	ldd	r24, Z+16	; 0x10
    31b8:	88 23       	and	r24, r24
    31ba:	51 f4       	brne	.+20     	; 0x31d0 <sem_unlock_isr+0x38>
    {
        sem->counter++;
    31bc:	eb 81       	ldd	r30, Y+3	; 0x03
    31be:	fc 81       	ldd	r31, Y+4	; 0x04
    31c0:	81 89       	ldd	r24, Z+17	; 0x11
    31c2:	92 89       	ldd	r25, Z+18	; 0x12
    31c4:	01 96       	adiw	r24, 0x01	; 1
    31c6:	eb 81       	ldd	r30, Y+3	; 0x03
    31c8:	fc 81       	ldd	r31, Y+4	; 0x04
    31ca:	92 8b       	std	Z+18, r25	; 0x12
    31cc:	81 8b       	std	Z+17, r24	; 0x11
    31ce:	21 c0       	rjmp	.+66     	; 0x3212 <sem_unlock_isr+0x7a>
        goto end;
    }
    proc = (proc_t *)xlist_head((xlist_t *)sem);
    31d0:	8b 81       	ldd	r24, Y+3	; 0x03
    31d2:	9c 81       	ldd	r25, Y+4	; 0x04
    31d4:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <xlist_head>
    31d8:	9a 83       	std	Y+2, r25	; 0x02
    31da:	89 83       	std	Y+1, r24	; 0x01

    SPIN_LOCK( proc );
    31dc:	89 81       	ldd	r24, Y+1	; 0x01
    31de:	9a 81       	ldd	r25, Y+2	; 0x02
    31e0:	83 96       	adiw	r24, 0x23	; 35
    31e2:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>

    pitem_cut( (pitem_t *)proc );
    31e6:	89 81       	ldd	r24, Y+1	; 0x01
    31e8:	9a 81       	ldd	r25, Y+2	; 0x02
    31ea:	0e 94 c2 10 	call	0x2184	; 0x2184 <pitem_cut>
    proc->flags &= ~PROC_FLG_QUEUE;
    31ee:	e9 81       	ldd	r30, Y+1	; 0x01
    31f0:	fa 81       	ldd	r31, Y+2	; 0x02
    31f2:	87 81       	ldd	r24, Z+7	; 0x07
    31f4:	90 85       	ldd	r25, Z+8	; 0x08
    31f6:	8f 7e       	andi	r24, 0xEF	; 239
    31f8:	e9 81       	ldd	r30, Y+1	; 0x01
    31fa:	fa 81       	ldd	r31, Y+2	; 0x02
    31fc:	90 87       	std	Z+8, r25	; 0x08
    31fe:	87 83       	std	Z+7, r24	; 0x07
    _proc_run( proc );
    3200:	89 81       	ldd	r24, Y+1	; 0x01
    3202:	9a 81       	ldd	r25, Y+2	; 0x02
    3204:	0e 94 47 12 	call	0x248e	; 0x248e <_proc_run>

    SPIN_UNLOCK( proc );
    3208:	89 81       	ldd	r24, Y+1	; 0x01
    320a:	9a 81       	ldd	r25, Y+2	; 0x02
    320c:	83 96       	adiw	r24, 0x23	; 35
    320e:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
end:
    SPIN_UNLOCK( sem );
    3212:	8b 81       	ldd	r24, Y+3	; 0x03
    3214:	9c 81       	ldd	r25, Y+4	; 0x04
    3216:	43 96       	adiw	r24, 0x13	; 19
    3218:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
}
    321c:	0f 90       	pop	r0
    321e:	0f 90       	pop	r0
    3220:	0f 90       	pop	r0
    3222:	0f 90       	pop	r0
    3224:	cf 91       	pop	r28
    3226:	df 91       	pop	r29
    3228:	08 95       	ret

0000322a <sig_init_isr>:
*****************************************************************************************/
#include "../include/bugurt.h"
//========================================================================================
// Инициация
void sig_init_isr( sig_t * sig )
{
    322a:	df 93       	push	r29
    322c:	cf 93       	push	r28
    322e:	00 d0       	rcall	.+0      	; 0x3230 <sig_init_isr+0x6>
    3230:	0f 92       	push	r0
    3232:	cd b7       	in	r28, 0x3d	; 61
    3234:	de b7       	in	r29, 0x3e	; 62
    3236:	9b 83       	std	Y+3, r25	; 0x03
    3238:	8a 83       	std	Y+2, r24	; 0x02
#ifdef CONFIG_MP
    core_id_t i;
    SPIN_INIT( sig );
    323a:	8a 81       	ldd	r24, Y+2	; 0x02
    323c:	9b 81       	ldd	r25, Y+3	; 0x03
    323e:	84 96       	adiw	r24, 0x24	; 36
    3240:	0e 94 0b 01 	call	0x216	; 0x216 <spin_init>
    SPIN_LOCK( sig );
    3244:	8a 81       	ldd	r24, Y+2	; 0x02
    3246:	9b 81       	ldd	r25, Y+3	; 0x03
    3248:	84 96       	adiw	r24, 0x24	; 36
    324a:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    for( i = 0; i < (core_id_t)MAX_CORES; i++ )
    324e:	19 82       	std	Y+1, r1	; 0x01
    3250:	21 c0       	rjmp	.+66     	; 0x3294 <sig_init_isr+0x6a>
    {
        xlist_init( (xlist_t *)sig->sig_list + i );
    3252:	4a 81       	ldd	r20, Y+2	; 0x02
    3254:	5b 81       	ldd	r21, Y+3	; 0x03
    3256:	89 81       	ldd	r24, Y+1	; 0x01
    3258:	28 2f       	mov	r18, r24
    325a:	30 e0       	ldi	r19, 0x00	; 0
    325c:	c9 01       	movw	r24, r18
    325e:	82 95       	swap	r24
    3260:	92 95       	swap	r25
    3262:	90 7f       	andi	r25, 0xF0	; 240
    3264:	98 27       	eor	r25, r24
    3266:	80 7f       	andi	r24, 0xF0	; 240
    3268:	98 27       	eor	r25, r24
    326a:	82 0f       	add	r24, r18
    326c:	93 1f       	adc	r25, r19
    326e:	84 0f       	add	r24, r20
    3270:	95 1f       	adc	r25, r21
    3272:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <xlist_init>
        stat_init( (stat_t *)sig->sig_stat + i );
    3276:	8a 81       	ldd	r24, Y+2	; 0x02
    3278:	9b 81       	ldd	r25, Y+3	; 0x03
    327a:	9c 01       	movw	r18, r24
    327c:	2e 5d       	subi	r18, 0xDE	; 222
    327e:	3f 4f       	sbci	r19, 0xFF	; 255
    3280:	89 81       	ldd	r24, Y+1	; 0x01
    3282:	88 2f       	mov	r24, r24
    3284:	90 e0       	ldi	r25, 0x00	; 0
    3286:	82 0f       	add	r24, r18
    3288:	93 1f       	adc	r25, r19
    328a:	0e 94 49 01 	call	0x292	; 0x292 <stat_init>
{
#ifdef CONFIG_MP
    core_id_t i;
    SPIN_INIT( sig );
    SPIN_LOCK( sig );
    for( i = 0; i < (core_id_t)MAX_CORES; i++ )
    328e:	89 81       	ldd	r24, Y+1	; 0x01
    3290:	8f 5f       	subi	r24, 0xFF	; 255
    3292:	89 83       	std	Y+1, r24	; 0x01
    3294:	89 81       	ldd	r24, Y+1	; 0x01
    3296:	82 30       	cpi	r24, 0x02	; 2
    3298:	e0 f2       	brcs	.-72     	; 0x3252 <sig_init_isr+0x28>
    {
        xlist_init( (xlist_t *)sig->sig_list + i );
        stat_init( (stat_t *)sig->sig_stat + i );
    }
    SPIN_UNLOCK( sig );
    329a:	8a 81       	ldd	r24, Y+2	; 0x02
    329c:	9b 81       	ldd	r25, Y+3	; 0x03
    329e:	84 96       	adiw	r24, 0x24	; 36
    32a0:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
#else
    xlist_init( (xlist_t *)sig );
#endif
}
    32a4:	0f 90       	pop	r0
    32a6:	0f 90       	pop	r0
    32a8:	0f 90       	pop	r0
    32aa:	cf 91       	pop	r28
    32ac:	df 91       	pop	r29
    32ae:	08 95       	ret

000032b0 <_sig_wait_prologue>:
//========================================================================================
// Это выполнится при постановке процесса в список ожидания сигнала
void _sig_wait_prologue( sig_t * sig )
{
    32b0:	df 93       	push	r29
    32b2:	cf 93       	push	r28
    32b4:	00 d0       	rcall	.+0      	; 0x32b6 <_sig_wait_prologue+0x6>
    32b6:	00 d0       	rcall	.+0      	; 0x32b8 <_sig_wait_prologue+0x8>
    32b8:	0f 92       	push	r0
    32ba:	cd b7       	in	r28, 0x3d	; 61
    32bc:	de b7       	in	r29, 0x3e	; 62
    32be:	9d 83       	std	Y+5, r25	; 0x05
    32c0:	8c 83       	std	Y+4, r24	; 0x04
    proc_t * proc;

    SPIN_LOCK( sig );
    32c2:	8c 81       	ldd	r24, Y+4	; 0x04
    32c4:	9d 81       	ldd	r25, Y+5	; 0x05
    32c6:	84 96       	adiw	r24, 0x24	; 36
    32c8:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>

    proc = current_proc();
    32cc:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <current_proc>
    32d0:	9b 83       	std	Y+3, r25	; 0x03
    32d2:	8a 83       	std	Y+2, r24	; 0x02
    SPIN_LOCK( proc );
    32d4:	8a 81       	ldd	r24, Y+2	; 0x02
    32d6:	9b 81       	ldd	r25, Y+3	; 0x03
    32d8:	83 96       	adiw	r24, 0x23	; 35
    32da:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>

    // Останавливаем процесс
    proc->flags |= PROC_FLG_WAIT;
    32de:	ea 81       	ldd	r30, Y+2	; 0x02
    32e0:	fb 81       	ldd	r31, Y+3	; 0x03
    32e2:	87 81       	ldd	r24, Z+7	; 0x07
    32e4:	90 85       	ldd	r25, Z+8	; 0x08
    32e6:	80 62       	ori	r24, 0x20	; 32
    32e8:	ea 81       	ldd	r30, Y+2	; 0x02
    32ea:	fb 81       	ldd	r31, Y+3	; 0x03
    32ec:	90 87       	std	Z+8, r25	; 0x08
    32ee:	87 83       	std	Z+7, r24	; 0x07
    _proc_stop_( proc );
    32f0:	8a 81       	ldd	r24, Y+2	; 0x02
    32f2:	9b 81       	ldd	r25, Y+3	; 0x03
    32f4:	0e 94 10 13 	call	0x2620	; 0x2620 <_proc_stop_>
    RESCHED_PROC( proc );
    32f8:	ea 81       	ldd	r30, Y+2	; 0x02
    32fa:	fb 81       	ldd	r31, Y+3	; 0x03
    32fc:	81 a1       	ldd	r24, Z+33	; 0x21
    32fe:	0e 94 b4 01 	call	0x368	; 0x368 <resched>
        Балансировка нагрузки производится заранее,
        в этом случае получается сделать sig_broadcast  с временем выполнения O(1),
        однако про hotplug  придется забыть, ну и ладно.
        */
        core_id_t sig_core;
        sig_core = sched_load_balancer( proc, (stat_t *)sig->sig_stat );
    3302:	8c 81       	ldd	r24, Y+4	; 0x04
    3304:	9d 81       	ldd	r25, Y+5	; 0x05
    3306:	9c 01       	movw	r18, r24
    3308:	2e 5d       	subi	r18, 0xDE	; 222
    330a:	3f 4f       	sbci	r19, 0xFF	; 255
    330c:	8a 81       	ldd	r24, Y+2	; 0x02
    330e:	9b 81       	ldd	r25, Y+3	; 0x03
    3310:	b9 01       	movw	r22, r18
    3312:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <sched_load_balancer>
    3316:	89 83       	std	Y+1, r24	; 0x01

        proc->core_id = sig_core;
    3318:	ea 81       	ldd	r30, Y+2	; 0x02
    331a:	fb 81       	ldd	r31, Y+3	; 0x03
    331c:	89 81       	ldd	r24, Y+1	; 0x01
    331e:	81 a3       	std	Z+33, r24	; 0x21
        pitem_insert((pitem_t *)proc, (xlist_t *)sig + sig_core);
    3320:	6a 81       	ldd	r22, Y+2	; 0x02
    3322:	7b 81       	ldd	r23, Y+3	; 0x03
    3324:	4c 81       	ldd	r20, Y+4	; 0x04
    3326:	5d 81       	ldd	r21, Y+5	; 0x05
    3328:	89 81       	ldd	r24, Y+1	; 0x01
    332a:	28 2f       	mov	r18, r24
    332c:	30 e0       	ldi	r19, 0x00	; 0
    332e:	c9 01       	movw	r24, r18
    3330:	82 95       	swap	r24
    3332:	92 95       	swap	r25
    3334:	90 7f       	andi	r25, 0xF0	; 240
    3336:	98 27       	eor	r25, r24
    3338:	80 7f       	andi	r24, 0xF0	; 240
    333a:	98 27       	eor	r25, r24
    333c:	82 0f       	add	r24, r18
    333e:	93 1f       	adc	r25, r19
    3340:	9a 01       	movw	r18, r20
    3342:	28 0f       	add	r18, r24
    3344:	39 1f       	adc	r19, r25
    3346:	cb 01       	movw	r24, r22
    3348:	b9 01       	movw	r22, r18
    334a:	0e 94 0d 10 	call	0x201a	; 0x201a <pitem_insert>
        stat_inc( proc, (stat_t *)sig->sig_stat + sig_core );
    334e:	8c 81       	ldd	r24, Y+4	; 0x04
    3350:	9d 81       	ldd	r25, Y+5	; 0x05
    3352:	9c 01       	movw	r18, r24
    3354:	2e 5d       	subi	r18, 0xDE	; 222
    3356:	3f 4f       	sbci	r19, 0xFF	; 255
    3358:	89 81       	ldd	r24, Y+1	; 0x01
    335a:	88 2f       	mov	r24, r24
    335c:	90 e0       	ldi	r25, 0x00	; 0
    335e:	28 0f       	add	r18, r24
    3360:	39 1f       	adc	r19, r25
    3362:	8a 81       	ldd	r24, Y+2	; 0x02
    3364:	9b 81       	ldd	r25, Y+3	; 0x03
    3366:	b9 01       	movw	r22, r18
    3368:	0e 94 6e 01 	call	0x2dc	; 0x2dc <stat_inc>
    }
#else
    pitem_insert( (pitem_t *)proc, (xlist_t *)sig );
#endif //CONFIG_MP
    SPIN_UNLOCK( proc );
    336c:	8a 81       	ldd	r24, Y+2	; 0x02
    336e:	9b 81       	ldd	r25, Y+3	; 0x03
    3370:	83 96       	adiw	r24, 0x23	; 35
    3372:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
    SPIN_UNLOCK( sig );
    3376:	8c 81       	ldd	r24, Y+4	; 0x04
    3378:	9d 81       	ldd	r25, Y+5	; 0x05
    337a:	84 96       	adiw	r24, 0x24	; 36
    337c:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
}
    3380:	0f 90       	pop	r0
    3382:	0f 90       	pop	r0
    3384:	0f 90       	pop	r0
    3386:	0f 90       	pop	r0
    3388:	0f 90       	pop	r0
    338a:	cf 91       	pop	r28
    338c:	df 91       	pop	r29
    338e:	08 95       	ret

00003390 <_sig_wakeup_list_proc>:
//========================================================================================
//
static void _sig_wakeup_list_proc( proc_t * proc )
{
    3390:	df 93       	push	r29
    3392:	cf 93       	push	r28
    3394:	00 d0       	rcall	.+0      	; 0x3396 <_sig_wakeup_list_proc+0x6>
    3396:	cd b7       	in	r28, 0x3d	; 61
    3398:	de b7       	in	r29, 0x3e	; 62
    339a:	9a 83       	std	Y+2, r25	; 0x02
    339c:	89 83       	std	Y+1, r24	; 0x01
    SPIN_LOCK( proc );
    339e:	89 81       	ldd	r24, Y+1	; 0x01
    33a0:	9a 81       	ldd	r25, Y+2	; 0x02
    33a2:	83 96       	adiw	r24, 0x23	; 35
    33a4:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    proc->buf = ((item_t *)proc)->next;
    33a8:	e9 81       	ldd	r30, Y+1	; 0x01
    33aa:	fa 81       	ldd	r31, Y+2	; 0x02
    33ac:	80 81       	ld	r24, Z
    33ae:	91 81       	ldd	r25, Z+1	; 0x01
    33b0:	e9 81       	ldd	r30, Y+1	; 0x01
    33b2:	fa 81       	ldd	r31, Y+2	; 0x02
    33b4:	90 a3       	std	Z+32, r25	; 0x20
    33b6:	87 8f       	std	Z+31, r24	; 0x1f
    item_cut( (item_t *)proc );                  // Вырезать процесс из простого списка гораздо проще, чем из xlist
    33b8:	89 81       	ldd	r24, Y+1	; 0x01
    33ba:	9a 81       	ldd	r25, Y+2	; 0x02
    33bc:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <item_cut>
    _proc_run_( proc );
    33c0:	89 81       	ldd	r24, Y+1	; 0x01
    33c2:	9a 81       	ldd	r25, Y+2	; 0x02
    33c4:	0e 94 12 12 	call	0x2424	; 0x2424 <_proc_run_>
    SPIN_UNLOCK( proc );
    33c8:	89 81       	ldd	r24, Y+1	; 0x01
    33ca:	9a 81       	ldd	r25, Y+2	; 0x02
    33cc:	83 96       	adiw	r24, 0x23	; 35
    33ce:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
}
    33d2:	0f 90       	pop	r0
    33d4:	0f 90       	pop	r0
    33d6:	cf 91       	pop	r28
    33d8:	df 91       	pop	r29
    33da:	08 95       	ret

000033dc <_sig_wait_epilogue>:

void _sig_wait_epilogue( void )
{
    33dc:	df 93       	push	r29
    33de:	cf 93       	push	r28
    33e0:	00 d0       	rcall	.+0      	; 0x33e2 <_sig_wait_epilogue+0x6>
    33e2:	00 d0       	rcall	.+0      	; 0x33e4 <_sig_wait_epilogue+0x8>
    33e4:	cd b7       	in	r28, 0x3d	; 61
    33e6:	de b7       	in	r29, 0x3e	; 62
    proc_t * proc;
    proc_t * wakeup_proc;
    proc = current_proc();
    33e8:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <current_proc>
    33ec:	9c 83       	std	Y+4, r25	; 0x04
    33ee:	8b 83       	std	Y+3, r24	; 0x03

    SPIN_LOCK( proc );
    33f0:	8b 81       	ldd	r24, Y+3	; 0x03
    33f2:	9c 81       	ldd	r25, Y+4	; 0x04
    33f4:	83 96       	adiw	r24, 0x23	; 35
    33f6:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    wakeup_proc = (proc_t *)proc->buf;
    33fa:	eb 81       	ldd	r30, Y+3	; 0x03
    33fc:	fc 81       	ldd	r31, Y+4	; 0x04
    33fe:	87 8d       	ldd	r24, Z+31	; 0x1f
    3400:	90 a1       	ldd	r25, Z+32	; 0x20
    3402:	9a 83       	std	Y+2, r25	; 0x02
    3404:	89 83       	std	Y+1, r24	; 0x01
    proc->buf = (void *)0;
    3406:	eb 81       	ldd	r30, Y+3	; 0x03
    3408:	fc 81       	ldd	r31, Y+4	; 0x04
    340a:	10 a2       	std	Z+32, r1	; 0x20
    340c:	17 8e       	std	Z+31, r1	; 0x1f
    SPIN_UNLOCK( proc );
    340e:	8b 81       	ldd	r24, Y+3	; 0x03
    3410:	9c 81       	ldd	r25, Y+4	; 0x04
    3412:	83 96       	adiw	r24, 0x23	; 35
    3414:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
    // Надо разбудить следующий процесс в списке.
    if( wakeup_proc )
    3418:	89 81       	ldd	r24, Y+1	; 0x01
    341a:	9a 81       	ldd	r25, Y+2	; 0x02
    341c:	00 97       	sbiw	r24, 0x00	; 0
    341e:	59 f0       	breq	.+22     	; 0x3436 <_sig_wait_epilogue+0x5a>
    {
        // Если есть другие процессы для пробуждения, то "будим" самый приоритетный из них, он продолжит "побудку".
        if( wakeup_proc != proc )
    3420:	29 81       	ldd	r18, Y+1	; 0x01
    3422:	3a 81       	ldd	r19, Y+2	; 0x02
    3424:	8b 81       	ldd	r24, Y+3	; 0x03
    3426:	9c 81       	ldd	r25, Y+4	; 0x04
    3428:	28 17       	cp	r18, r24
    342a:	39 07       	cpc	r19, r25
    342c:	21 f0       	breq	.+8      	; 0x3436 <_sig_wait_epilogue+0x5a>
        {
            //Нельзя будить себя! Будим только другой процесс!
            _sig_wakeup_list_proc( wakeup_proc );
    342e:	89 81       	ldd	r24, Y+1	; 0x01
    3430:	9a 81       	ldd	r25, Y+2	; 0x02
    3432:	0e 94 c8 19 	call	0x3390	; 0x3390 <_sig_wakeup_list_proc>
        }
    }
}
    3436:	0f 90       	pop	r0
    3438:	0f 90       	pop	r0
    343a:	0f 90       	pop	r0
    343c:	0f 90       	pop	r0
    343e:	cf 91       	pop	r28
    3440:	df 91       	pop	r29
    3442:	08 95       	ret

00003444 <sig_signal_isr>:
//========================================================================================
// Будит 1 процесс, для вызова из обработчиков прерываний
void sig_signal_isr( sig_t * sig )
{
    3444:	df 93       	push	r29
    3446:	cf 93       	push	r28
    3448:	cd b7       	in	r28, 0x3d	; 61
    344a:	de b7       	in	r29, 0x3e	; 62
    344c:	29 97       	sbiw	r28, 0x09	; 9
    344e:	0f b6       	in	r0, 0x3f	; 63
    3450:	f8 94       	cli
    3452:	de bf       	out	0x3e, r29	; 62
    3454:	0f be       	out	0x3f, r0	; 63
    3456:	cd bf       	out	0x3d, r28	; 61
    3458:	99 87       	std	Y+9, r25	; 0x09
    345a:	88 87       	std	Y+8, r24	; 0x08
#ifdef CONFIG_MP
    core_id_t core;
    proc_t * proc;
    // Поиск процесса для запуска
    SPIN_LOCK( sig );// Захват блокировки сигнала
    345c:	88 85       	ldd	r24, Y+8	; 0x08
    345e:	99 85       	ldd	r25, Y+9	; 0x09
    3460:	84 96       	adiw	r24, 0x24	; 36
    3462:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    // Находим самую нагруженную  структуру stat_t в сигнале
    core = sched_highest_load_core( (stat_t *)sig->sig_stat );
    3466:	88 85       	ldd	r24, Y+8	; 0x08
    3468:	99 85       	ldd	r25, Y+9	; 0x09
    346a:	82 96       	adiw	r24, 0x22	; 34
    346c:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <sched_highest_load_core>
    3470:	8f 83       	std	Y+7, r24	; 0x07
    // Этот процесс мы будем запускать
    {
        xlist_t * sig_list;
        sig_list = (xlist_t *)sig->sig_list + core;
    3472:	48 85       	ldd	r20, Y+8	; 0x08
    3474:	59 85       	ldd	r21, Y+9	; 0x09
    3476:	8f 81       	ldd	r24, Y+7	; 0x07
    3478:	28 2f       	mov	r18, r24
    347a:	30 e0       	ldi	r19, 0x00	; 0
    347c:	c9 01       	movw	r24, r18
    347e:	82 95       	swap	r24
    3480:	92 95       	swap	r25
    3482:	90 7f       	andi	r25, 0xF0	; 240
    3484:	98 27       	eor	r25, r24
    3486:	80 7f       	andi	r24, 0xF0	; 240
    3488:	98 27       	eor	r25, r24
    348a:	82 0f       	add	r24, r18
    348c:	93 1f       	adc	r25, r19
    348e:	84 0f       	add	r24, r20
    3490:	95 1f       	adc	r25, r21
    3492:	9c 83       	std	Y+4, r25	; 0x04
    3494:	8b 83       	std	Y+3, r24	; 0x03
        if(sig_list->index == (index_t)0)
    3496:	eb 81       	ldd	r30, Y+3	; 0x03
    3498:	fc 81       	ldd	r31, Y+4	; 0x04
    349a:	80 89       	ldd	r24, Z+16	; 0x10
    349c:	88 23       	and	r24, r24
    349e:	31 f4       	brne	.+12     	; 0x34ac <sig_signal_isr+0x68>
        {
            SPIN_UNLOCK( sig );
    34a0:	88 85       	ldd	r24, Y+8	; 0x08
    34a2:	99 85       	ldd	r25, Y+9	; 0x09
    34a4:	84 96       	adiw	r24, 0x24	; 36
    34a6:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
    34aa:	62 c0       	rjmp	.+196    	; 0x3570 <sig_signal_isr+0x12c>
            return;
        }
        proc = (proc_t *)xlist_head( sig_list );
    34ac:	8b 81       	ldd	r24, Y+3	; 0x03
    34ae:	9c 81       	ldd	r25, Y+4	; 0x04
    34b0:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <xlist_head>
    34b4:	9e 83       	std	Y+6, r25	; 0x06
    34b6:	8d 83       	std	Y+5, r24	; 0x05
    }
    SPIN_LOCK( proc );// Захват блокировки процесса
    34b8:	8d 81       	ldd	r24, Y+5	; 0x05
    34ba:	9e 81       	ldd	r25, Y+6	; 0x06
    34bc:	83 96       	adiw	r24, 0x23	; 35
    34be:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    // Вырезаем процесс из списка ожидания сигнала
    pitem_fast_cut( (pitem_t *)proc );
    34c2:	8d 81       	ldd	r24, Y+5	; 0x05
    34c4:	9e 81       	ldd	r25, Y+6	; 0x06
    34c6:	0e 94 63 10 	call	0x20c6	; 0x20c6 <pitem_fast_cut>
    stat_dec( proc, (stat_t *)sig->sig_stat + core );
    34ca:	88 85       	ldd	r24, Y+8	; 0x08
    34cc:	99 85       	ldd	r25, Y+9	; 0x09
    34ce:	9c 01       	movw	r18, r24
    34d0:	2e 5d       	subi	r18, 0xDE	; 222
    34d2:	3f 4f       	sbci	r19, 0xFF	; 255
    34d4:	8f 81       	ldd	r24, Y+7	; 0x07
    34d6:	88 2f       	mov	r24, r24
    34d8:	90 e0       	ldi	r25, 0x00	; 0
    34da:	28 0f       	add	r18, r24
    34dc:	39 1f       	adc	r19, r25
    34de:	8d 81       	ldd	r24, Y+5	; 0x05
    34e0:	9e 81       	ldd	r25, Y+6	; 0x06
    34e2:	b9 01       	movw	r22, r18
    34e4:	0e 94 58 01 	call	0x2b0	; 0x2b0 <stat_dec>
    //Запуск процесса
    // Вставляем его в список ready соответствующего планировщика
    spin_lock( &kernel.stat_lock );
    34e8:	8b e7       	ldi	r24, 0x7B	; 123
    34ea:	93 e0       	ldi	r25, 0x03	; 3
    34ec:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    stat_inc( proc, (stat_t *)kernel.stat + core ); // Обновление статистики
    34f0:	8f 81       	ldd	r24, Y+7	; 0x07
    34f2:	88 2f       	mov	r24, r24
    34f4:	90 e0       	ldi	r25, 0x00	; 0
    34f6:	9c 01       	movw	r18, r24
    34f8:	27 58       	subi	r18, 0x87	; 135
    34fa:	3c 4f       	sbci	r19, 0xFC	; 252
    34fc:	8d 81       	ldd	r24, Y+5	; 0x05
    34fe:	9e 81       	ldd	r25, Y+6	; 0x06
    3500:	b9 01       	movw	r22, r18
    3502:	0e 94 6e 01 	call	0x2dc	; 0x2dc <stat_inc>
    spin_unlock( &kernel.stat_lock );
    3506:	8b e7       	ldi	r24, 0x7B	; 123
    3508:	93 e0       	ldi	r25, 0x03	; 3
    350a:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
    {
        sched_t * sched;
        sched = kernel.sched + core;// Дада, нагрузка была сбалансирована на этапе постановки в список ожидания
    350e:	8f 81       	ldd	r24, Y+7	; 0x07
    3510:	28 2f       	mov	r18, r24
    3512:	30 e0       	ldi	r19, 0x00	; 0
    3514:	8b e2       	ldi	r24, 0x2B	; 43
    3516:	90 e0       	ldi	r25, 0x00	; 0
    3518:	ac 01       	movw	r20, r24
    351a:	24 9f       	mul	r18, r20
    351c:	c0 01       	movw	r24, r0
    351e:	25 9f       	mul	r18, r21
    3520:	90 0d       	add	r25, r0
    3522:	34 9f       	mul	r19, r20
    3524:	90 0d       	add	r25, r0
    3526:	11 24       	eor	r1, r1
    3528:	8d 53       	subi	r24, 0x3D	; 61
    352a:	9d 4f       	sbci	r25, 0xFD	; 253
    352c:	9a 83       	std	Y+2, r25	; 0x02
    352e:	89 83       	std	Y+1, r24	; 0x01
        SPIN_LOCK( sched );
    3530:	89 81       	ldd	r24, Y+1	; 0x01
    3532:	9a 81       	ldd	r25, Y+2	; 0x02
    3534:	8a 96       	adiw	r24, 0x2a	; 42
    3536:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
        pitem_insert((pitem_t *)proc, sched->ready );
    353a:	8d 81       	ldd	r24, Y+5	; 0x05
    353c:	9e 81       	ldd	r25, Y+6	; 0x06
    353e:	e9 81       	ldd	r30, Y+1	; 0x01
    3540:	fa 81       	ldd	r31, Y+2	; 0x02
    3542:	22 81       	ldd	r18, Z+2	; 0x02
    3544:	33 81       	ldd	r19, Z+3	; 0x03
    3546:	b9 01       	movw	r22, r18
    3548:	0e 94 0d 10 	call	0x201a	; 0x201a <pitem_insert>
        SPIN_UNLOCK( sched );
    354c:	89 81       	ldd	r24, Y+1	; 0x01
    354e:	9a 81       	ldd	r25, Y+2	; 0x02
    3550:	8a 96       	adiw	r24, 0x2a	; 42
    3552:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
    }
    resched(core);// Перепланировка
    3556:	8f 81       	ldd	r24, Y+7	; 0x07
    3558:	0e 94 b4 01 	call	0x368	; 0x368 <resched>
    SPIN_UNLOCK( proc );// Освобождение блокировки процесса
    355c:	8d 81       	ldd	r24, Y+5	; 0x05
    355e:	9e 81       	ldd	r25, Y+6	; 0x06
    3560:	83 96       	adiw	r24, 0x23	; 35
    3562:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
    SPIN_UNLOCK( sig );// Освобождение блокировки сигнала
    3566:	88 85       	ldd	r24, Y+8	; 0x08
    3568:	99 85       	ldd	r25, Y+9	; 0x09
    356a:	84 96       	adiw	r24, 0x24	; 36
    356c:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
    proc = (proc_t *)xlist_head( (xlist_t *)sig );
    pitem_fast_cut( (pitem_t *)proc );
    pitem_insert( (pitem_t *)proc, kernel.sched.ready );
    resched();
#endif //CONFIG_MP
}
    3570:	29 96       	adiw	r28, 0x09	; 9
    3572:	0f b6       	in	r0, 0x3f	; 63
    3574:	f8 94       	cli
    3576:	de bf       	out	0x3e, r29	; 62
    3578:	0f be       	out	0x3f, r0	; 63
    357a:	cd bf       	out	0x3d, r28	; 61
    357c:	cf 91       	pop	r28
    357e:	df 91       	pop	r29
    3580:	08 95       	ret

00003582 <sig_broadcast_isr>:
//----------------------------------------------------------------------------------------
// Будит все ожидающие процессы
void sig_broadcast_isr( sig_t * sig )
{
    3582:	df 93       	push	r29
    3584:	cf 93       	push	r28
    3586:	00 d0       	rcall	.+0      	; 0x3588 <sig_broadcast_isr+0x6>
    3588:	00 d0       	rcall	.+0      	; 0x358a <sig_broadcast_isr+0x8>
    358a:	0f 92       	push	r0
    358c:	cd b7       	in	r28, 0x3d	; 61
    358e:	de b7       	in	r29, 0x3e	; 62
    3590:	9d 83       	std	Y+5, r25	; 0x05
    3592:	8c 83       	std	Y+4, r24	; 0x04
#ifdef CONFIG_MP
    core_id_t core;
    SPIN_LOCK( sig );
    3594:	8c 81       	ldd	r24, Y+4	; 0x04
    3596:	9d 81       	ldd	r25, Y+5	; 0x05
    3598:	84 96       	adiw	r24, 0x24	; 36
    359a:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
    for(core = 0; core < (core_id_t)MAX_CORES; core++)
    359e:	1b 82       	std	Y+3, r1	; 0x03
    35a0:	3f c0       	rjmp	.+126    	; 0x3620 <sig_broadcast_isr+0x9e>
        proc_t * wakeup_proc;
        /*
        Фактически процессы еще не поставлены на выполнение,
        но обязательно будут, это надо учитывать при баланисировке нагрузки.
        */
        spin_lock( &kernel.stat_lock );
    35a2:	8b e7       	ldi	r24, 0x7B	; 123
    35a4:	93 e0       	ldi	r25, 0x03	; 3
    35a6:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
        stat_merge( (stat_t *)sig->sig_stat + core, (stat_t *)kernel.stat + core );
    35aa:	8c 81       	ldd	r24, Y+4	; 0x04
    35ac:	9d 81       	ldd	r25, Y+5	; 0x05
    35ae:	9c 01       	movw	r18, r24
    35b0:	2e 5d       	subi	r18, 0xDE	; 222
    35b2:	3f 4f       	sbci	r19, 0xFF	; 255
    35b4:	8b 81       	ldd	r24, Y+3	; 0x03
    35b6:	88 2f       	mov	r24, r24
    35b8:	90 e0       	ldi	r25, 0x00	; 0
    35ba:	a9 01       	movw	r20, r18
    35bc:	48 0f       	add	r20, r24
    35be:	59 1f       	adc	r21, r25
    35c0:	8b 81       	ldd	r24, Y+3	; 0x03
    35c2:	88 2f       	mov	r24, r24
    35c4:	90 e0       	ldi	r25, 0x00	; 0
    35c6:	9c 01       	movw	r18, r24
    35c8:	27 58       	subi	r18, 0x87	; 135
    35ca:	3c 4f       	sbci	r19, 0xFC	; 252
    35cc:	ca 01       	movw	r24, r20
    35ce:	b9 01       	movw	r22, r18
    35d0:	0e 94 84 01 	call	0x308	; 0x308 <stat_merge>
        spin_unlock( &kernel.stat_lock );
    35d4:	8b e7       	ldi	r24, 0x7B	; 123
    35d6:	93 e0       	ldi	r25, 0x03	; 3
    35d8:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
        /*
        Сцепляем список и будим его голову.
        */
        wakeup_proc = (proc_t *)pitem_xlist_chain( (xlist_t *)sig + core );
    35dc:	4c 81       	ldd	r20, Y+4	; 0x04
    35de:	5d 81       	ldd	r21, Y+5	; 0x05
    35e0:	8b 81       	ldd	r24, Y+3	; 0x03
    35e2:	28 2f       	mov	r18, r24
    35e4:	30 e0       	ldi	r19, 0x00	; 0
    35e6:	c9 01       	movw	r24, r18
    35e8:	82 95       	swap	r24
    35ea:	92 95       	swap	r25
    35ec:	90 7f       	andi	r25, 0xF0	; 240
    35ee:	98 27       	eor	r25, r24
    35f0:	80 7f       	andi	r24, 0xF0	; 240
    35f2:	98 27       	eor	r25, r24
    35f4:	82 0f       	add	r24, r18
    35f6:	93 1f       	adc	r25, r19
    35f8:	84 0f       	add	r24, r20
    35fa:	95 1f       	adc	r25, r21
    35fc:	0e 94 d6 10 	call	0x21ac	; 0x21ac <pitem_xlist_chain>
    3600:	9a 83       	std	Y+2, r25	; 0x02
    3602:	89 83       	std	Y+1, r24	; 0x01
        if( wakeup_proc )
    3604:	89 81       	ldd	r24, Y+1	; 0x01
    3606:	9a 81       	ldd	r25, Y+2	; 0x02
    3608:	00 97       	sbiw	r24, 0x00	; 0
    360a:	21 f0       	breq	.+8      	; 0x3614 <sig_broadcast_isr+0x92>
        {
            _sig_wakeup_list_proc( wakeup_proc );
    360c:	89 81       	ldd	r24, Y+1	; 0x01
    360e:	9a 81       	ldd	r25, Y+2	; 0x02
    3610:	0e 94 c8 19 	call	0x3390	; 0x3390 <_sig_wakeup_list_proc>
        }

        resched(core);
    3614:	8b 81       	ldd	r24, Y+3	; 0x03
    3616:	0e 94 b4 01 	call	0x368	; 0x368 <resched>
void sig_broadcast_isr( sig_t * sig )
{
#ifdef CONFIG_MP
    core_id_t core;
    SPIN_LOCK( sig );
    for(core = 0; core < (core_id_t)MAX_CORES; core++)
    361a:	8b 81       	ldd	r24, Y+3	; 0x03
    361c:	8f 5f       	subi	r24, 0xFF	; 255
    361e:	8b 83       	std	Y+3, r24	; 0x03
    3620:	8b 81       	ldd	r24, Y+3	; 0x03
    3622:	82 30       	cpi	r24, 0x02	; 2
    3624:	08 f4       	brcc	.+2      	; 0x3628 <sig_broadcast_isr+0xa6>
    3626:	bd cf       	rjmp	.-134    	; 0x35a2 <sig_broadcast_isr+0x20>
            _sig_wakeup_list_proc( wakeup_proc );
        }

        resched(core);
    }
    SPIN_UNLOCK( sig );
    3628:	8c 81       	ldd	r24, Y+4	; 0x04
    362a:	9d 81       	ldd	r25, Y+5	; 0x05
    362c:	84 96       	adiw	r24, 0x24	; 36
    362e:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
        _sig_wakeup_list_proc( wakeup_proc );
    }

    resched();
#endif //CONFIG_MP
}
    3632:	0f 90       	pop	r0
    3634:	0f 90       	pop	r0
    3636:	0f 90       	pop	r0
    3638:	0f 90       	pop	r0
    363a:	0f 90       	pop	r0
    363c:	cf 91       	pop	r28
    363e:	df 91       	pop	r29
    3640:	08 95       	ret

00003642 <do_syscall>:
syscall_t syscall_num = (syscall_t)0;
void * syscall_arg = (void *)0;

void do_syscall( void )
#endif // CONFIG_MP
{
    3642:	df 93       	push	r29
    3644:	cf 93       	push	r28
    3646:	cd b7       	in	r28, 0x3d	; 61
    3648:	de b7       	in	r29, 0x3e	; 62
    364a:	27 97       	sbiw	r28, 0x07	; 7
    364c:	0f b6       	in	r0, 0x3f	; 63
    364e:	f8 94       	cli
    3650:	de bf       	out	0x3e, r29	; 62
    3652:	0f be       	out	0x3f, r0	; 63
    3654:	cd bf       	out	0x3d, r28	; 61
    3656:	8d 83       	std	Y+5, r24	; 0x05
    3658:	7f 83       	std	Y+7, r23	; 0x07
    365a:	6e 83       	std	Y+6, r22	; 0x06
    if( syscall_num != (syscall_t)0 )
    365c:	8d 81       	ldd	r24, Y+5	; 0x05
    365e:	88 23       	and	r24, r24
    3660:	e1 f0       	breq	.+56     	; 0x369a <do_syscall+0x58>
    {
        syscall_num--;
    3662:	8d 81       	ldd	r24, Y+5	; 0x05
    3664:	81 50       	subi	r24, 0x01	; 1
    3666:	8d 83       	std	Y+5, r24	; 0x05
        (SYSCALL_TABLE_READ(syscall_routine[syscall_num]))(syscall_arg);
    3668:	8d 81       	ldd	r24, Y+5	; 0x05
    366a:	88 2f       	mov	r24, r24
    366c:	90 e0       	ldi	r25, 0x00	; 0
    366e:	88 0f       	add	r24, r24
    3670:	99 1f       	adc	r25, r25
    3672:	88 59       	subi	r24, 0x98	; 152
    3674:	9f 4f       	sbci	r25, 0xFF	; 255
    3676:	9c 83       	std	Y+4, r25	; 0x04
    3678:	8b 83       	std	Y+3, r24	; 0x03
    367a:	8b 81       	ldd	r24, Y+3	; 0x03
    367c:	9c 81       	ldd	r25, Y+4	; 0x04
    367e:	fc 01       	movw	r30, r24
    3680:	85 91       	lpm	r24, Z+
    3682:	94 91       	lpm	r25, Z+
    3684:	9a 83       	std	Y+2, r25	; 0x02
    3686:	89 83       	std	Y+1, r24	; 0x01
    3688:	fc 83       	std	Y+4, r31	; 0x04
    368a:	eb 83       	std	Y+3, r30	; 0x03
    368c:	89 81       	ldd	r24, Y+1	; 0x01
    368e:	9a 81       	ldd	r25, Y+2	; 0x02
    3690:	fc 01       	movw	r30, r24
    3692:	8e 81       	ldd	r24, Y+6	; 0x06
    3694:	9f 81       	ldd	r25, Y+7	; 0x07
    3696:	09 95       	icall
        syscall_num = (syscall_t)0;
    3698:	1d 82       	std	Y+5, r1	; 0x05
    }
}
    369a:	27 96       	adiw	r28, 0x07	; 7
    369c:	0f b6       	in	r0, 0x3f	; 63
    369e:	f8 94       	cli
    36a0:	de bf       	out	0x3e, r29	; 62
    36a2:	0f be       	out	0x3f, r0	; 63
    36a4:	cd bf       	out	0x3d, r28	; 61
    36a6:	cf 91       	pop	r28
    36a8:	df 91       	pop	r29
    36aa:	08 95       	ret

000036ac <scall_proc_init>:
***********************************************************************************************
                                    Process control !!!
**********************************************************************************************/
/// SYSCALL_PROC_INIT
void scall_proc_init( void * arg )
{
    36ac:	8f 92       	push	r8
    36ae:	9f 92       	push	r9
    36b0:	af 92       	push	r10
    36b2:	bf 92       	push	r11
    36b4:	cf 92       	push	r12
    36b6:	df 92       	push	r13
    36b8:	ef 92       	push	r14
    36ba:	ff 92       	push	r15
    36bc:	0f 93       	push	r16
    36be:	1f 93       	push	r17
    36c0:	df 93       	push	r29
    36c2:	cf 93       	push	r28
    36c4:	00 d0       	rcall	.+0      	; 0x36c6 <scall_proc_init+0x1a>
    36c6:	cd b7       	in	r28, 0x3d	; 61
    36c8:	de b7       	in	r29, 0x3e	; 62
    36ca:	9a 83       	std	Y+2, r25	; 0x02
    36cc:	89 83       	std	Y+1, r24	; 0x01
    proc_init_isr(
    36ce:	e9 81       	ldd	r30, Y+1	; 0x01
    36d0:	fa 81       	ldd	r31, Y+2	; 0x02
    36d2:	40 81       	ld	r20, Z
    36d4:	51 81       	ldd	r21, Z+1	; 0x01
    36d6:	e9 81       	ldd	r30, Y+1	; 0x01
    36d8:	fa 81       	ldd	r31, Y+2	; 0x02
    36da:	62 81       	ldd	r22, Z+2	; 0x02
    36dc:	73 81       	ldd	r23, Z+3	; 0x03
    36de:	e9 81       	ldd	r30, Y+1	; 0x01
    36e0:	fa 81       	ldd	r31, Y+2	; 0x02
    36e2:	24 81       	ldd	r18, Z+4	; 0x04
    36e4:	35 81       	ldd	r19, Z+5	; 0x05
    36e6:	e9 81       	ldd	r30, Y+1	; 0x01
    36e8:	fa 81       	ldd	r31, Y+2	; 0x02
    36ea:	a6 81       	ldd	r26, Z+6	; 0x06
    36ec:	b7 81       	ldd	r27, Z+7	; 0x07
    36ee:	e9 81       	ldd	r30, Y+1	; 0x01
    36f0:	fa 81       	ldd	r31, Y+2	; 0x02
    36f2:	00 85       	ldd	r16, Z+8	; 0x08
    36f4:	11 85       	ldd	r17, Z+9	; 0x09
    36f6:	e9 81       	ldd	r30, Y+1	; 0x01
    36f8:	fa 81       	ldd	r31, Y+2	; 0x02
    36fa:	e2 84       	ldd	r14, Z+10	; 0x0a
    36fc:	f3 84       	ldd	r15, Z+11	; 0x0b
    36fe:	e9 81       	ldd	r30, Y+1	; 0x01
    3700:	fa 81       	ldd	r31, Y+2	; 0x02
    3702:	d4 84       	ldd	r13, Z+12	; 0x0c
    3704:	e9 81       	ldd	r30, Y+1	; 0x01
    3706:	fa 81       	ldd	r31, Y+2	; 0x02
    3708:	a5 84       	ldd	r10, Z+13	; 0x0d
    370a:	b6 84       	ldd	r11, Z+14	; 0x0e
    370c:	e9 81       	ldd	r30, Y+1	; 0x01
    370e:	fa 81       	ldd	r31, Y+2	; 0x02
    3710:	97 84       	ldd	r9, Z+15	; 0x0f
    3712:	e9 81       	ldd	r30, Y+1	; 0x01
    3714:	fa 81       	ldd	r31, Y+2	; 0x02
    3716:	80 89       	ldd	r24, Z+16	; 0x10
    3718:	0f 92       	push	r0
    371a:	ed b7       	in	r30, 0x3d	; 61
    371c:	fe b7       	in	r31, 0x3e	; 62
    371e:	31 96       	adiw	r30, 0x01	; 1
    3720:	80 83       	st	Z, r24
    3722:	ca 01       	movw	r24, r20
    3724:	a9 01       	movw	r20, r18
    3726:	9d 01       	movw	r18, r26
    3728:	cd 2c       	mov	r12, r13
    372a:	89 2c       	mov	r8, r9
    372c:	0e 94 6f 11 	call	0x22de	; 0x22de <proc_init_isr>
    3730:	0f 90       	pop	r0
              ((proc_init_arg_t *)arg)->is_rt
#ifdef CONFIG_MP
              ,((proc_init_arg_t *)arg)-> affinity
#endif // CONFIG_MP
              );
}
    3732:	0f 90       	pop	r0
    3734:	0f 90       	pop	r0
    3736:	cf 91       	pop	r28
    3738:	df 91       	pop	r29
    373a:	1f 91       	pop	r17
    373c:	0f 91       	pop	r16
    373e:	ff 90       	pop	r15
    3740:	ef 90       	pop	r14
    3742:	df 90       	pop	r13
    3744:	cf 90       	pop	r12
    3746:	bf 90       	pop	r11
    3748:	af 90       	pop	r10
    374a:	9f 90       	pop	r9
    374c:	8f 90       	pop	r8
    374e:	08 95       	ret

00003750 <scall_proc_run>:
}
/**********************************************************************************************
                                       SYSCALL_PROC_RUN
**********************************************************************************************/
void scall_proc_run( void * arg )
{
    3750:	0f 93       	push	r16
    3752:	1f 93       	push	r17
    3754:	df 93       	push	r29
    3756:	cf 93       	push	r28
    3758:	00 d0       	rcall	.+0      	; 0x375a <scall_proc_run+0xa>
    375a:	cd b7       	in	r28, 0x3d	; 61
    375c:	de b7       	in	r29, 0x3e	; 62
    375e:	9a 83       	std	Y+2, r25	; 0x02
    3760:	89 83       	std	Y+1, r24	; 0x01
    ((proc_runtime_arg_t *)arg)->ret = proc_run_isr( ((proc_runtime_arg_t *)arg)->proc );
    3762:	09 81       	ldd	r16, Y+1	; 0x01
    3764:	1a 81       	ldd	r17, Y+2	; 0x02
    3766:	e9 81       	ldd	r30, Y+1	; 0x01
    3768:	fa 81       	ldd	r31, Y+2	; 0x02
    376a:	80 81       	ld	r24, Z
    376c:	91 81       	ldd	r25, Z+1	; 0x01
    376e:	0e 94 84 12 	call	0x2508	; 0x2508 <proc_run_isr>
    3772:	f8 01       	movw	r30, r16
    3774:	82 83       	std	Z+2, r24	; 0x02
}
    3776:	0f 90       	pop	r0
    3778:	0f 90       	pop	r0
    377a:	cf 91       	pop	r28
    377c:	df 91       	pop	r29
    377e:	1f 91       	pop	r17
    3780:	0f 91       	pop	r16
    3782:	08 95       	ret

00003784 <scall_proc_restart>:
}
/**********************************************************************************************
                                       SYSCALL_PROC_RESTART
**********************************************************************************************/
void scall_proc_restart( void * arg )
{
    3784:	0f 93       	push	r16
    3786:	1f 93       	push	r17
    3788:	df 93       	push	r29
    378a:	cf 93       	push	r28
    378c:	00 d0       	rcall	.+0      	; 0x378e <scall_proc_restart+0xa>
    378e:	cd b7       	in	r28, 0x3d	; 61
    3790:	de b7       	in	r29, 0x3e	; 62
    3792:	9a 83       	std	Y+2, r25	; 0x02
    3794:	89 83       	std	Y+1, r24	; 0x01
    ((proc_runtime_arg_t *)arg)->ret = proc_restart_isr( ((proc_runtime_arg_t *)arg)->proc );
    3796:	09 81       	ldd	r16, Y+1	; 0x01
    3798:	1a 81       	ldd	r17, Y+2	; 0x02
    379a:	e9 81       	ldd	r30, Y+1	; 0x01
    379c:	fa 81       	ldd	r31, Y+2	; 0x02
    379e:	80 81       	ld	r24, Z
    37a0:	91 81       	ldd	r25, Z+1	; 0x01
    37a2:	0e 94 ad 12 	call	0x255a	; 0x255a <proc_restart_isr>
    37a6:	f8 01       	movw	r30, r16
    37a8:	82 83       	std	Z+2, r24	; 0x02
}
    37aa:	0f 90       	pop	r0
    37ac:	0f 90       	pop	r0
    37ae:	cf 91       	pop	r28
    37b0:	df 91       	pop	r29
    37b2:	1f 91       	pop	r17
    37b4:	0f 91       	pop	r16
    37b6:	08 95       	ret

000037b8 <scall_proc_stop>:
}
/**********************************************************************************************
                                        SYSCALL_PROC_STOP
**********************************************************************************************/
void scall_proc_stop( void * arg )
{
    37b8:	0f 93       	push	r16
    37ba:	1f 93       	push	r17
    37bc:	df 93       	push	r29
    37be:	cf 93       	push	r28
    37c0:	00 d0       	rcall	.+0      	; 0x37c2 <scall_proc_stop+0xa>
    37c2:	cd b7       	in	r28, 0x3d	; 61
    37c4:	de b7       	in	r29, 0x3e	; 62
    37c6:	9a 83       	std	Y+2, r25	; 0x02
    37c8:	89 83       	std	Y+1, r24	; 0x01
    ((proc_runtime_arg_t *)arg)->ret = proc_stop_isr( ((proc_runtime_arg_t *)arg)->proc );
    37ca:	09 81       	ldd	r16, Y+1	; 0x01
    37cc:	1a 81       	ldd	r17, Y+2	; 0x02
    37ce:	e9 81       	ldd	r30, Y+1	; 0x01
    37d0:	fa 81       	ldd	r31, Y+2	; 0x02
    37d2:	80 81       	ld	r24, Z
    37d4:	91 81       	ldd	r25, Z+1	; 0x01
    37d6:	0e 94 72 13 	call	0x26e4	; 0x26e4 <proc_stop_isr>
    37da:	f8 01       	movw	r30, r16
    37dc:	82 83       	std	Z+2, r24	; 0x02
}
    37de:	0f 90       	pop	r0
    37e0:	0f 90       	pop	r0
    37e2:	cf 91       	pop	r28
    37e4:	df 91       	pop	r29
    37e6:	1f 91       	pop	r17
    37e8:	0f 91       	pop	r16
    37ea:	08 95       	ret

000037ec <scall_proc_self_stop>:
}
/**********************************************************************************************
                                    SYSCALL_PROC_SELF_STOP
**********************************************************************************************/
void scall_proc_self_stop( void * arg )
{
    37ec:	df 93       	push	r29
    37ee:	cf 93       	push	r28
    37f0:	00 d0       	rcall	.+0      	; 0x37f2 <scall_proc_self_stop+0x6>
    37f2:	00 d0       	rcall	.+0      	; 0x37f4 <scall_proc_self_stop+0x8>
    37f4:	cd b7       	in	r28, 0x3d	; 61
    37f6:	de b7       	in	r29, 0x3e	; 62
    37f8:	9c 83       	std	Y+4, r25	; 0x04
    37fa:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = current_proc();
    37fc:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <current_proc>
    3800:	9a 83       	std	Y+2, r25	; 0x02
    3802:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
    3804:	89 81       	ldd	r24, Y+1	; 0x01
    3806:	9a 81       	ldd	r25, Y+2	; 0x02
    3808:	83 96       	adiw	r24, 0x23	; 35
    380a:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
#endif
    _proc_stop( proc );
    380e:	89 81       	ldd	r24, Y+1	; 0x01
    3810:	9a 81       	ldd	r25, Y+2	; 0x02
    3812:	0e 94 54 13 	call	0x26a8	; 0x26a8 <_proc_stop>
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
    3816:	89 81       	ldd	r24, Y+1	; 0x01
    3818:	9a 81       	ldd	r25, Y+2	; 0x02
    381a:	83 96       	adiw	r24, 0x23	; 35
    381c:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
#endif
}
    3820:	0f 90       	pop	r0
    3822:	0f 90       	pop	r0
    3824:	0f 90       	pop	r0
    3826:	0f 90       	pop	r0
    3828:	cf 91       	pop	r28
    382a:	df 91       	pop	r29
    382c:	08 95       	ret

0000382e <scall_proc_terminate>:
/**********************************************************************************************
                                    SYSCALL_PROC_TERMINATE
**********************************************************************************************/
// Останов процесса после выхода из pmain, для обертки proc_run_wrapper
void scall_proc_terminate( void * arg )
{
    382e:	df 93       	push	r29
    3830:	cf 93       	push	r28
    3832:	00 d0       	rcall	.+0      	; 0x3834 <scall_proc_terminate+0x6>
    3834:	cd b7       	in	r28, 0x3d	; 61
    3836:	de b7       	in	r29, 0x3e	; 62
    3838:	9a 83       	std	Y+2, r25	; 0x02
    383a:	89 83       	std	Y+1, r24	; 0x01
    _proc_terminate((proc_t *)arg);
    383c:	89 81       	ldd	r24, Y+1	; 0x01
    383e:	9a 81       	ldd	r25, Y+2	; 0x02
    3840:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <_proc_terminate>
}
    3844:	0f 90       	pop	r0
    3846:	0f 90       	pop	r0
    3848:	cf 91       	pop	r28
    384a:	df 91       	pop	r29
    384c:	08 95       	ret

0000384e <proc_run_wrapper>:
void proc_run_wrapper( proc_t * proc )
{
    384e:	df 93       	push	r29
    3850:	cf 93       	push	r28
    3852:	00 d0       	rcall	.+0      	; 0x3854 <proc_run_wrapper+0x6>
    3854:	00 d0       	rcall	.+0      	; 0x3856 <proc_run_wrapper+0x8>
    3856:	00 d0       	rcall	.+0      	; 0x3858 <proc_run_wrapper+0xa>
    3858:	cd b7       	in	r28, 0x3d	; 61
    385a:	de b7       	in	r29, 0x3e	; 62
    385c:	9e 83       	std	Y+6, r25	; 0x06
    385e:	8d 83       	std	Y+5, r24	; 0x05
    code_t pmain;
    void * arg;
    //Атомарно читаем pmain и arg
    disable_interrupts();
    3860:	0e 94 e6 09 	call	0x13cc	; 0x13cc <disable_interrupts>
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
    3864:	8d 81       	ldd	r24, Y+5	; 0x05
    3866:	9e 81       	ldd	r25, Y+6	; 0x06
    3868:	83 96       	adiw	r24, 0x23	; 35
    386a:	0e 94 1c 01 	call	0x238	; 0x238 <spin_lock>
#endif // CONFIG_MP
    pmain = proc->pmain;
    386e:	ed 81       	ldd	r30, Y+5	; 0x05
    3870:	fe 81       	ldd	r31, Y+6	; 0x06
    3872:	84 a1       	ldd	r24, Z+36	; 0x24
    3874:	95 a1       	ldd	r25, Z+37	; 0x25
    3876:	9c 83       	std	Y+4, r25	; 0x04
    3878:	8b 83       	std	Y+3, r24	; 0x03
    arg = proc->arg;
    387a:	ed 81       	ldd	r30, Y+5	; 0x05
    387c:	fe 81       	ldd	r31, Y+6	; 0x06
    387e:	82 a5       	ldd	r24, Z+42	; 0x2a
    3880:	93 a5       	ldd	r25, Z+43	; 0x2b
    3882:	9a 83       	std	Y+2, r25	; 0x02
    3884:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
    3886:	8d 81       	ldd	r24, Y+5	; 0x05
    3888:	9e 81       	ldd	r25, Y+6	; 0x06
    388a:	83 96       	adiw	r24, 0x23	; 35
    388c:	0e 94 35 01 	call	0x26a	; 0x26a <spin_unlock>
#endif // CONFIG_MP
    enable_interrupts();
    3890:	0e 94 00 0a 	call	0x1400	; 0x1400 <enable_interrupts>
    //Выполняем pmain
    pmain( arg );
    3894:	89 81       	ldd	r24, Y+1	; 0x01
    3896:	9a 81       	ldd	r25, Y+2	; 0x02
    3898:	eb 81       	ldd	r30, Y+3	; 0x03
    389a:	fc 81       	ldd	r31, Y+4	; 0x04
    389c:	09 95       	icall
    // Завершаем процесс
    syscall_bugurt( SYSCALL_PROC_TERMINATE, (void *)proc );
    389e:	2d 81       	ldd	r18, Y+5	; 0x05
    38a0:	3e 81       	ldd	r19, Y+6	; 0x06
    38a2:	86 e0       	ldi	r24, 0x06	; 6
    38a4:	b9 01       	movw	r22, r18
    38a6:	0e 94 33 04 	call	0x866	; 0x866 <syscall_bugurt>
}
    38aa:	26 96       	adiw	r28, 0x06	; 6
    38ac:	0f b6       	in	r0, 0x3f	; 63
    38ae:	f8 94       	cli
    38b0:	de bf       	out	0x3e, r29	; 62
    38b2:	0f be       	out	0x3f, r0	; 63
    38b4:	cd bf       	out	0x3d, r28	; 61
    38b6:	cf 91       	pop	r28
    38b8:	df 91       	pop	r29
    38ba:	08 95       	ret

000038bc <scall_proc_flag_stop>:
/**********************************************************************************************
                                       SYSCALL_PROC_FLAG_STOP
**********************************************************************************************/
void scall_proc_flag_stop( void * arg )
{
    38bc:	df 93       	push	r29
    38be:	cf 93       	push	r28
    38c0:	00 d0       	rcall	.+0      	; 0x38c2 <scall_proc_flag_stop+0x6>
    38c2:	cd b7       	in	r28, 0x3d	; 61
    38c4:	de b7       	in	r29, 0x3e	; 62
    38c6:	9a 83       	std	Y+2, r25	; 0x02
    38c8:	89 83       	std	Y+1, r24	; 0x01
    _proc_flag_stop( *((flag_t *)arg) );
    38ca:	e9 81       	ldd	r30, Y+1	; 0x01
    38cc:	fa 81       	ldd	r31, Y+2	; 0x02
    38ce:	80 81       	ld	r24, Z
    38d0:	91 81       	ldd	r25, Z+1	; 0x01
    38d2:	0e 94 ac 13 	call	0x2758	; 0x2758 <_proc_flag_stop>
}
    38d6:	0f 90       	pop	r0
    38d8:	0f 90       	pop	r0
    38da:	cf 91       	pop	r28
    38dc:	df 91       	pop	r29
    38de:	08 95       	ret

000038e0 <scall_proc_reset_watchdog>:
}
/**********************************************************************************************
                                       SYSCALL_PROC_RESET_WATCHDOG
**********************************************************************************************/
void scall_proc_reset_watchdog( void * arg )
{
    38e0:	df 93       	push	r29
    38e2:	cf 93       	push	r28
    38e4:	00 d0       	rcall	.+0      	; 0x38e6 <scall_proc_reset_watchdog+0x6>
    38e6:	cd b7       	in	r28, 0x3d	; 61
    38e8:	de b7       	in	r29, 0x3e	; 62
    38ea:	9a 83       	std	Y+2, r25	; 0x02
    38ec:	89 83       	std	Y+1, r24	; 0x01
    _proc_reset_watchdog();
    38ee:	0e 94 37 14 	call	0x286e	; 0x286e <_proc_reset_watchdog>
}
    38f2:	0f 90       	pop	r0
    38f4:	0f 90       	pop	r0
    38f6:	cf 91       	pop	r28
    38f8:	df 91       	pop	r29
    38fa:	08 95       	ret

000038fc <scall_sig_init>:
                                            Сигналы
***********************************************************************************************
                                      SYSCALL_PROC_RESTART
**********************************************************************************************/
void scall_sig_init( void * arg )
{
    38fc:	df 93       	push	r29
    38fe:	cf 93       	push	r28
    3900:	00 d0       	rcall	.+0      	; 0x3902 <scall_sig_init+0x6>
    3902:	cd b7       	in	r28, 0x3d	; 61
    3904:	de b7       	in	r29, 0x3e	; 62
    3906:	9a 83       	std	Y+2, r25	; 0x02
    3908:	89 83       	std	Y+1, r24	; 0x01
    sig_init_isr( (sig_t *)arg );
    390a:	89 81       	ldd	r24, Y+1	; 0x01
    390c:	9a 81       	ldd	r25, Y+2	; 0x02
    390e:	0e 94 15 19 	call	0x322a	; 0x322a <sig_init_isr>
}
    3912:	0f 90       	pop	r0
    3914:	0f 90       	pop	r0
    3916:	cf 91       	pop	r28
    3918:	df 91       	pop	r29
    391a:	08 95       	ret

0000391c <scall_sig_wait>:
}
/**********************************************************************************************
                                       SYSCALL_SIG_WAIT
**********************************************************************************************/
void scall_sig_wait( void * arg )
{
    391c:	df 93       	push	r29
    391e:	cf 93       	push	r28
    3920:	00 d0       	rcall	.+0      	; 0x3922 <scall_sig_wait+0x6>
    3922:	cd b7       	in	r28, 0x3d	; 61
    3924:	de b7       	in	r29, 0x3e	; 62
    3926:	9a 83       	std	Y+2, r25	; 0x02
    3928:	89 83       	std	Y+1, r24	; 0x01
    _sig_wait_prologue( (sig_t *)arg );
    392a:	89 81       	ldd	r24, Y+1	; 0x01
    392c:	9a 81       	ldd	r25, Y+2	; 0x02
    392e:	0e 94 58 19 	call	0x32b0	; 0x32b0 <_sig_wait_prologue>
}
    3932:	0f 90       	pop	r0
    3934:	0f 90       	pop	r0
    3936:	cf 91       	pop	r28
    3938:	df 91       	pop	r29
    393a:	08 95       	ret

0000393c <scall_sig_wakeup>:
/**********************************************************************************************
                                       SYSCALL_SIG_WAKEUP
**********************************************************************************************/
void scall_sig_wakeup( void *arg )
{
    393c:	df 93       	push	r29
    393e:	cf 93       	push	r28
    3940:	00 d0       	rcall	.+0      	; 0x3942 <scall_sig_wakeup+0x6>
    3942:	cd b7       	in	r28, 0x3d	; 61
    3944:	de b7       	in	r29, 0x3e	; 62
    3946:	9a 83       	std	Y+2, r25	; 0x02
    3948:	89 83       	std	Y+1, r24	; 0x01
    _sig_wait_epilogue();
    394a:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_sig_wait_epilogue>
    _proc_flag_stop( PROC_FLG_WAIT );
    394e:	80 e2       	ldi	r24, 0x20	; 32
    3950:	90 e0       	ldi	r25, 0x00	; 0
    3952:	0e 94 ac 13 	call	0x2758	; 0x2758 <_proc_flag_stop>
}
    3956:	0f 90       	pop	r0
    3958:	0f 90       	pop	r0
    395a:	cf 91       	pop	r28
    395c:	df 91       	pop	r29
    395e:	08 95       	ret

00003960 <scall_sig_signal>:
}
/**********************************************************************************************
                                       SYSCALL_SIG_SIGNAL
**********************************************************************************************/
void scall_sig_signal( void * arg )
{
    3960:	df 93       	push	r29
    3962:	cf 93       	push	r28
    3964:	00 d0       	rcall	.+0      	; 0x3966 <scall_sig_signal+0x6>
    3966:	cd b7       	in	r28, 0x3d	; 61
    3968:	de b7       	in	r29, 0x3e	; 62
    396a:	9a 83       	std	Y+2, r25	; 0x02
    396c:	89 83       	std	Y+1, r24	; 0x01
    sig_signal_isr( (sig_t *)arg );
    396e:	89 81       	ldd	r24, Y+1	; 0x01
    3970:	9a 81       	ldd	r25, Y+2	; 0x02
    3972:	0e 94 22 1a 	call	0x3444	; 0x3444 <sig_signal_isr>
}
    3976:	0f 90       	pop	r0
    3978:	0f 90       	pop	r0
    397a:	cf 91       	pop	r28
    397c:	df 91       	pop	r29
    397e:	08 95       	ret

00003980 <scall_sig_broadcast>:
}
/**********************************************************************************************
                                       SYSCALL_SIG_BROADCAST
**********************************************************************************************/
void scall_sig_broadcast( void * arg )
{
    3980:	df 93       	push	r29
    3982:	cf 93       	push	r28
    3984:	00 d0       	rcall	.+0      	; 0x3986 <scall_sig_broadcast+0x6>
    3986:	cd b7       	in	r28, 0x3d	; 61
    3988:	de b7       	in	r29, 0x3e	; 62
    398a:	9a 83       	std	Y+2, r25	; 0x02
    398c:	89 83       	std	Y+1, r24	; 0x01
    sig_broadcast_isr( (sig_t *)arg );
    398e:	89 81       	ldd	r24, Y+1	; 0x01
    3990:	9a 81       	ldd	r25, Y+2	; 0x02
    3992:	0e 94 c1 1a 	call	0x3582	; 0x3582 <sig_broadcast_isr>
}
    3996:	0f 90       	pop	r0
    3998:	0f 90       	pop	r0
    399a:	cf 91       	pop	r28
    399c:	df 91       	pop	r29
    399e:	08 95       	ret

000039a0 <scall_sem_init>:
                                           Семафоры
***********************************************************************************************
                                       SYSCALL_SEM_INIT
**********************************************************************************************/
void scall_sem_init( void * arg )
{
    39a0:	df 93       	push	r29
    39a2:	cf 93       	push	r28
    39a4:	00 d0       	rcall	.+0      	; 0x39a6 <scall_sem_init+0x6>
    39a6:	cd b7       	in	r28, 0x3d	; 61
    39a8:	de b7       	in	r29, 0x3e	; 62
    39aa:	9a 83       	std	Y+2, r25	; 0x02
    39ac:	89 83       	std	Y+1, r24	; 0x01
    sem_init_isr( ((sem_init_arg_t *)arg)->sem, ((sem_init_arg_t *)arg)->count );
    39ae:	e9 81       	ldd	r30, Y+1	; 0x01
    39b0:	fa 81       	ldd	r31, Y+2	; 0x02
    39b2:	80 81       	ld	r24, Z
    39b4:	91 81       	ldd	r25, Z+1	; 0x01
    39b6:	e9 81       	ldd	r30, Y+1	; 0x01
    39b8:	fa 81       	ldd	r31, Y+2	; 0x02
    39ba:	22 81       	ldd	r18, Z+2	; 0x02
    39bc:	33 81       	ldd	r19, Z+3	; 0x03
    39be:	b9 01       	movw	r22, r18
    39c0:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <sem_init_isr>
}
    39c4:	0f 90       	pop	r0
    39c6:	0f 90       	pop	r0
    39c8:	cf 91       	pop	r28
    39ca:	df 91       	pop	r29
    39cc:	08 95       	ret

000039ce <scall_sem_lock>:
}
/**********************************************************************************************
                                         SYSCALL_SEM_LOCK
**********************************************************************************************/
void scall_sem_lock( void * arg )
{
    39ce:	0f 93       	push	r16
    39d0:	1f 93       	push	r17
    39d2:	df 93       	push	r29
    39d4:	cf 93       	push	r28
    39d6:	00 d0       	rcall	.+0      	; 0x39d8 <scall_sem_lock+0xa>
    39d8:	cd b7       	in	r28, 0x3d	; 61
    39da:	de b7       	in	r29, 0x3e	; 62
    39dc:	9a 83       	std	Y+2, r25	; 0x02
    39de:	89 83       	std	Y+1, r24	; 0x01
    ((sem_lock_arg_t *)arg)->ret = _sem_lock( ((sem_lock_arg_t *)arg)->sem );
    39e0:	09 81       	ldd	r16, Y+1	; 0x01
    39e2:	1a 81       	ldd	r17, Y+2	; 0x02
    39e4:	e9 81       	ldd	r30, Y+1	; 0x01
    39e6:	fa 81       	ldd	r31, Y+2	; 0x02
    39e8:	80 81       	ld	r24, Z
    39ea:	91 81       	ldd	r25, Z+1	; 0x01
    39ec:	0e 94 23 18 	call	0x3046	; 0x3046 <_sem_lock>
    39f0:	f8 01       	movw	r30, r16
    39f2:	82 83       	std	Z+2, r24	; 0x02
}
    39f4:	0f 90       	pop	r0
    39f6:	0f 90       	pop	r0
    39f8:	cf 91       	pop	r28
    39fa:	df 91       	pop	r29
    39fc:	1f 91       	pop	r17
    39fe:	0f 91       	pop	r16
    3a00:	08 95       	ret

00003a02 <scall_sem_try_lock>:
}
/**********************************************************************************************
                                       SYSCALL_SEM_TRY_LOCK
**********************************************************************************************/
void scall_sem_try_lock( void * arg )
{
    3a02:	0f 93       	push	r16
    3a04:	1f 93       	push	r17
    3a06:	df 93       	push	r29
    3a08:	cf 93       	push	r28
    3a0a:	00 d0       	rcall	.+0      	; 0x3a0c <scall_sem_try_lock+0xa>
    3a0c:	cd b7       	in	r28, 0x3d	; 61
    3a0e:	de b7       	in	r29, 0x3e	; 62
    3a10:	9a 83       	std	Y+2, r25	; 0x02
    3a12:	89 83       	std	Y+1, r24	; 0x01
    ((sem_lock_arg_t *)arg)->ret = _sem_try_lock( ((sem_lock_arg_t *)arg)->sem );
    3a14:	09 81       	ldd	r16, Y+1	; 0x01
    3a16:	1a 81       	ldd	r17, Y+2	; 0x02
    3a18:	e9 81       	ldd	r30, Y+1	; 0x01
    3a1a:	fa 81       	ldd	r31, Y+2	; 0x02
    3a1c:	80 81       	ld	r24, Z
    3a1e:	91 81       	ldd	r25, Z+1	; 0x01
    3a20:	0e 94 87 18 	call	0x310e	; 0x310e <_sem_try_lock>
    3a24:	f8 01       	movw	r30, r16
    3a26:	82 83       	std	Z+2, r24	; 0x02
}
    3a28:	0f 90       	pop	r0
    3a2a:	0f 90       	pop	r0
    3a2c:	cf 91       	pop	r28
    3a2e:	df 91       	pop	r29
    3a30:	1f 91       	pop	r17
    3a32:	0f 91       	pop	r16
    3a34:	08 95       	ret

00003a36 <scall_sem_unlock>:
}
/**********************************************************************************************
                                       SYSCALL_SEM_UNLOCK
**********************************************************************************************/
void scall_sem_unlock( void * arg )
{
    3a36:	df 93       	push	r29
    3a38:	cf 93       	push	r28
    3a3a:	00 d0       	rcall	.+0      	; 0x3a3c <scall_sem_unlock+0x6>
    3a3c:	cd b7       	in	r28, 0x3d	; 61
    3a3e:	de b7       	in	r29, 0x3e	; 62
    3a40:	9a 83       	std	Y+2, r25	; 0x02
    3a42:	89 83       	std	Y+1, r24	; 0x01
    sem_unlock_isr( (sem_t *)arg );
    3a44:	89 81       	ldd	r24, Y+1	; 0x01
    3a46:	9a 81       	ldd	r25, Y+2	; 0x02
    3a48:	0e 94 cc 18 	call	0x3198	; 0x3198 <sem_unlock_isr>
}
    3a4c:	0f 90       	pop	r0
    3a4e:	0f 90       	pop	r0
    3a50:	cf 91       	pop	r28
    3a52:	df 91       	pop	r29
    3a54:	08 95       	ret

00003a56 <scall_mutex_init>:
                                          Мьютексы
***********************************************************************************************
                                     SYSCALL_MUTEX_INIT
**********************************************************************************************/
void scall_mutex_init(void * arg)
{
    3a56:	df 93       	push	r29
    3a58:	cf 93       	push	r28
    3a5a:	00 d0       	rcall	.+0      	; 0x3a5c <scall_mutex_init+0x6>
    3a5c:	cd b7       	in	r28, 0x3d	; 61
    3a5e:	de b7       	in	r29, 0x3e	; 62
    3a60:	9a 83       	std	Y+2, r25	; 0x02
    3a62:	89 83       	std	Y+1, r24	; 0x01
    mutex_init_isr(
    3a64:	e9 81       	ldd	r30, Y+1	; 0x01
    3a66:	fa 81       	ldd	r31, Y+2	; 0x02
    3a68:	80 81       	ld	r24, Z
    3a6a:	91 81       	ldd	r25, Z+1	; 0x01
    3a6c:	e9 81       	ldd	r30, Y+1	; 0x01
    3a6e:	fa 81       	ldd	r31, Y+2	; 0x02
    3a70:	22 81       	ldd	r18, Z+2	; 0x02
    3a72:	62 2f       	mov	r22, r18
    3a74:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <mutex_init_isr>
               ((mutex_init_arg_t *)arg)->mutex
#ifdef CONFIG_USE_HIGHEST_LOCKER
               ,((mutex_init_arg_t *)arg)->prio
#endif // CONFIG_USE_HIGHEST_LOCKER
               );
}
    3a78:	0f 90       	pop	r0
    3a7a:	0f 90       	pop	r0
    3a7c:	cf 91       	pop	r28
    3a7e:	df 91       	pop	r29
    3a80:	08 95       	ret

00003a82 <scall_mutex_lock>:
}
/**********************************************************************************************
                                    SYSCALL_MUTEX_LOCK
**********************************************************************************************/
void scall_mutex_lock(void * arg)
{
    3a82:	0f 93       	push	r16
    3a84:	1f 93       	push	r17
    3a86:	df 93       	push	r29
    3a88:	cf 93       	push	r28
    3a8a:	00 d0       	rcall	.+0      	; 0x3a8c <scall_mutex_lock+0xa>
    3a8c:	cd b7       	in	r28, 0x3d	; 61
    3a8e:	de b7       	in	r29, 0x3e	; 62
    3a90:	9a 83       	std	Y+2, r25	; 0x02
    3a92:	89 83       	std	Y+1, r24	; 0x01
    ((mutex_lock_arg_t *)arg)->ret = _mutex_lock( ((mutex_lock_arg_t *)arg)->mutex );
    3a94:	09 81       	ldd	r16, Y+1	; 0x01
    3a96:	1a 81       	ldd	r17, Y+2	; 0x02
    3a98:	e9 81       	ldd	r30, Y+1	; 0x01
    3a9a:	fa 81       	ldd	r31, Y+2	; 0x02
    3a9c:	80 81       	ld	r24, Z
    3a9e:	91 81       	ldd	r25, Z+1	; 0x01
    3aa0:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <_mutex_lock>
    3aa4:	f8 01       	movw	r30, r16
    3aa6:	82 83       	std	Z+2, r24	; 0x02
}
    3aa8:	0f 90       	pop	r0
    3aaa:	0f 90       	pop	r0
    3aac:	cf 91       	pop	r28
    3aae:	df 91       	pop	r29
    3ab0:	1f 91       	pop	r17
    3ab2:	0f 91       	pop	r16
    3ab4:	08 95       	ret

00003ab6 <scall_mutex_try_lock>:
// Захват
/**********************************************************************************************
                                    SYSCALL_MUTEX_TRY_LOCK
**********************************************************************************************/
void scall_mutex_try_lock(void * arg)
{
    3ab6:	0f 93       	push	r16
    3ab8:	1f 93       	push	r17
    3aba:	df 93       	push	r29
    3abc:	cf 93       	push	r28
    3abe:	00 d0       	rcall	.+0      	; 0x3ac0 <scall_mutex_try_lock+0xa>
    3ac0:	cd b7       	in	r28, 0x3d	; 61
    3ac2:	de b7       	in	r29, 0x3e	; 62
    3ac4:	9a 83       	std	Y+2, r25	; 0x02
    3ac6:	89 83       	std	Y+1, r24	; 0x01
    ((mutex_lock_arg_t *)arg)->ret = _mutex_try_lock( ((mutex_lock_arg_t *)arg)->mutex );
    3ac8:	09 81       	ldd	r16, Y+1	; 0x01
    3aca:	1a 81       	ldd	r17, Y+2	; 0x02
    3acc:	e9 81       	ldd	r30, Y+1	; 0x01
    3ace:	fa 81       	ldd	r31, Y+2	; 0x02
    3ad0:	80 81       	ld	r24, Z
    3ad2:	91 81       	ldd	r25, Z+1	; 0x01
    3ad4:	0e 94 76 0e 	call	0x1cec	; 0x1cec <_mutex_try_lock>
    3ad8:	f8 01       	movw	r30, r16
    3ada:	82 83       	std	Z+2, r24	; 0x02
}
    3adc:	0f 90       	pop	r0
    3ade:	0f 90       	pop	r0
    3ae0:	cf 91       	pop	r28
    3ae2:	df 91       	pop	r29
    3ae4:	1f 91       	pop	r17
    3ae6:	0f 91       	pop	r16
    3ae8:	08 95       	ret

00003aea <scall_mutex_unlock>:
}
/**********************************************************************************************
                                   SYSCALL_MUTEX_UNLOCK
**********************************************************************************************/
void scall_mutex_unlock(void * arg)
{
    3aea:	df 93       	push	r29
    3aec:	cf 93       	push	r28
    3aee:	00 d0       	rcall	.+0      	; 0x3af0 <scall_mutex_unlock+0x6>
    3af0:	cd b7       	in	r28, 0x3d	; 61
    3af2:	de b7       	in	r29, 0x3e	; 62
    3af4:	9a 83       	std	Y+2, r25	; 0x02
    3af6:	89 83       	std	Y+1, r24	; 0x01
    _mutex_unlock( (mutex_t *)arg );
    3af8:	89 81       	ldd	r24, Y+1	; 0x01
    3afa:	9a 81       	ldd	r25, Y+2	; 0x02
    3afc:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <_mutex_unlock>
}
    3b00:	0f 90       	pop	r0
    3b02:	0f 90       	pop	r0
    3b04:	cf 91       	pop	r28
    3b06:	df 91       	pop	r29
    3b08:	08 95       	ret

00003b0a <scall_ipc_wait>:
                                           IPC
***********************************************************************************************
                                       SYSCALL_IPC_WAIT
**********************************************************************************************/
void scall_ipc_wait(void * arg)
{
    3b0a:	df 93       	push	r29
    3b0c:	cf 93       	push	r28
    3b0e:	00 d0       	rcall	.+0      	; 0x3b10 <scall_ipc_wait+0x6>
    3b10:	cd b7       	in	r28, 0x3d	; 61
    3b12:	de b7       	in	r29, 0x3e	; 62
    3b14:	9a 83       	std	Y+2, r25	; 0x02
    3b16:	89 83       	std	Y+1, r24	; 0x01
    _ipc_wait( arg );
    3b18:	89 81       	ldd	r24, Y+1	; 0x01
    3b1a:	9a 81       	ldd	r25, Y+2	; 0x02
    3b1c:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <_ipc_wait>
}
    3b20:	0f 90       	pop	r0
    3b22:	0f 90       	pop	r0
    3b24:	cf 91       	pop	r28
    3b26:	df 91       	pop	r29
    3b28:	08 95       	ret

00003b2a <scall_ipc_send>:
}
/**********************************************************************************************
                                       SYSCALL_IPC_SEND
**********************************************************************************************/
void scall_ipc_send(void * arg)
{
    3b2a:	0f 93       	push	r16
    3b2c:	1f 93       	push	r17
    3b2e:	df 93       	push	r29
    3b30:	cf 93       	push	r28
    3b32:	00 d0       	rcall	.+0      	; 0x3b34 <scall_ipc_send+0xa>
    3b34:	cd b7       	in	r28, 0x3d	; 61
    3b36:	de b7       	in	r29, 0x3e	; 62
    3b38:	9a 83       	std	Y+2, r25	; 0x02
    3b3a:	89 83       	std	Y+1, r24	; 0x01
    ((ipc_send_arg_t *)arg)->ret = ipc_send_isr( ((ipc_send_arg_t *)arg)->proc, ((ipc_send_arg_t *)arg)->data );
    3b3c:	09 81       	ldd	r16, Y+1	; 0x01
    3b3e:	1a 81       	ldd	r17, Y+2	; 0x02
    3b40:	e9 81       	ldd	r30, Y+1	; 0x01
    3b42:	fa 81       	ldd	r31, Y+2	; 0x02
    3b44:	80 81       	ld	r24, Z
    3b46:	91 81       	ldd	r25, Z+1	; 0x01
    3b48:	e9 81       	ldd	r30, Y+1	; 0x01
    3b4a:	fa 81       	ldd	r31, Y+2	; 0x02
    3b4c:	23 81       	ldd	r18, Z+3	; 0x03
    3b4e:	34 81       	ldd	r19, Z+4	; 0x04
    3b50:	b9 01       	movw	r22, r18
    3b52:	0e 94 12 0c 	call	0x1824	; 0x1824 <ipc_send_isr>
    3b56:	f8 01       	movw	r30, r16
    3b58:	82 83       	std	Z+2, r24	; 0x02
}
    3b5a:	0f 90       	pop	r0
    3b5c:	0f 90       	pop	r0
    3b5e:	cf 91       	pop	r28
    3b60:	df 91       	pop	r29
    3b62:	1f 91       	pop	r17
    3b64:	0f 91       	pop	r16
    3b66:	08 95       	ret

00003b68 <scall_ipc_exchange>:
}
/**********************************************************************************************
                                    SYSCALL_IPC_EXCHANGE
**********************************************************************************************/
void scall_ipc_exchange(void * arg)
{
    3b68:	0f 93       	push	r16
    3b6a:	1f 93       	push	r17
    3b6c:	df 93       	push	r29
    3b6e:	cf 93       	push	r28
    3b70:	00 d0       	rcall	.+0      	; 0x3b72 <scall_ipc_exchange+0xa>
    3b72:	cd b7       	in	r28, 0x3d	; 61
    3b74:	de b7       	in	r29, 0x3e	; 62
    3b76:	9a 83       	std	Y+2, r25	; 0x02
    3b78:	89 83       	std	Y+1, r24	; 0x01
    ((ipc_send_arg_t *)arg)->ret = _ipc_exchange( ((ipc_send_arg_t *)arg)->proc, ((ipc_send_arg_t *)arg)->data, ((ipc_exchange_arg_t *)arg)->receive );
    3b7a:	09 81       	ldd	r16, Y+1	; 0x01
    3b7c:	1a 81       	ldd	r17, Y+2	; 0x02
    3b7e:	e9 81       	ldd	r30, Y+1	; 0x01
    3b80:	fa 81       	ldd	r31, Y+2	; 0x02
    3b82:	80 81       	ld	r24, Z
    3b84:	91 81       	ldd	r25, Z+1	; 0x01
    3b86:	e9 81       	ldd	r30, Y+1	; 0x01
    3b88:	fa 81       	ldd	r31, Y+2	; 0x02
    3b8a:	43 81       	ldd	r20, Z+3	; 0x03
    3b8c:	54 81       	ldd	r21, Z+4	; 0x04
    3b8e:	e9 81       	ldd	r30, Y+1	; 0x01
    3b90:	fa 81       	ldd	r31, Y+2	; 0x02
    3b92:	25 81       	ldd	r18, Z+5	; 0x05
    3b94:	36 81       	ldd	r19, Z+6	; 0x06
    3b96:	ba 01       	movw	r22, r20
    3b98:	a9 01       	movw	r20, r18
    3b9a:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <_ipc_exchange>
    3b9e:	f8 01       	movw	r30, r16
    3ba0:	82 83       	std	Z+2, r24	; 0x02
}
    3ba2:	0f 90       	pop	r0
    3ba4:	0f 90       	pop	r0
    3ba6:	cf 91       	pop	r28
    3ba8:	df 91       	pop	r29
    3baa:	1f 91       	pop	r17
    3bac:	0f 91       	pop	r16
    3bae:	08 95       	ret

00003bb0 <xlist_init>:
**********************************************/
//Инициация
void xlist_init(
    xlist_t * xlist
)
{
    3bb0:	df 93       	push	r29
    3bb2:	cf 93       	push	r28
    3bb4:	00 d0       	rcall	.+0      	; 0x3bb6 <xlist_init+0x6>
    3bb6:	00 d0       	rcall	.+0      	; 0x3bb8 <xlist_init+0x8>
    3bb8:	cd b7       	in	r28, 0x3d	; 61
    3bba:	de b7       	in	r29, 0x3e	; 62
    3bbc:	9c 83       	std	Y+4, r25	; 0x04
    3bbe:	8b 83       	std	Y+3, r24	; 0x03
    count_t i;
    //список пуст
    xlist->index = (index_t)0;
    3bc0:	eb 81       	ldd	r30, Y+3	; 0x03
    3bc2:	fc 81       	ldd	r31, Y+4	; 0x04
    3bc4:	10 8a       	std	Z+16, r1	; 0x10
    //обнуляем указатели
    for( i = 0; i < BITS_IN_INDEX_T; i++ )xlist->item[i] = (item_t *)0;
    3bc6:	1a 82       	std	Y+2, r1	; 0x02
    3bc8:	19 82       	std	Y+1, r1	; 0x01
    3bca:	10 c0       	rjmp	.+32     	; 0x3bec <xlist_init+0x3c>
    3bcc:	89 81       	ldd	r24, Y+1	; 0x01
    3bce:	9a 81       	ldd	r25, Y+2	; 0x02
    3bd0:	2b 81       	ldd	r18, Y+3	; 0x03
    3bd2:	3c 81       	ldd	r19, Y+4	; 0x04
    3bd4:	88 0f       	add	r24, r24
    3bd6:	99 1f       	adc	r25, r25
    3bd8:	f9 01       	movw	r30, r18
    3bda:	e8 0f       	add	r30, r24
    3bdc:	f9 1f       	adc	r31, r25
    3bde:	11 82       	std	Z+1, r1	; 0x01
    3be0:	10 82       	st	Z, r1
    3be2:	89 81       	ldd	r24, Y+1	; 0x01
    3be4:	9a 81       	ldd	r25, Y+2	; 0x02
    3be6:	01 96       	adiw	r24, 0x01	; 1
    3be8:	9a 83       	std	Y+2, r25	; 0x02
    3bea:	89 83       	std	Y+1, r24	; 0x01
    3bec:	89 81       	ldd	r24, Y+1	; 0x01
    3bee:	9a 81       	ldd	r25, Y+2	; 0x02
    3bf0:	88 30       	cpi	r24, 0x08	; 8
    3bf2:	91 05       	cpc	r25, r1
    3bf4:	58 f3       	brcs	.-42     	; 0x3bcc <xlist_init+0x1c>
}
    3bf6:	0f 90       	pop	r0
    3bf8:	0f 90       	pop	r0
    3bfa:	0f 90       	pop	r0
    3bfc:	0f 90       	pop	r0
    3bfe:	cf 91       	pop	r28
    3c00:	df 91       	pop	r29
    3c02:	08 95       	ret

00003c04 <xlist_head>:
//===========================================================================
//Поиск головы списка
item_t * xlist_head(xlist_t * xlist)
{
    3c04:	df 93       	push	r29
    3c06:	cf 93       	push	r28
    3c08:	00 d0       	rcall	.+0      	; 0x3c0a <xlist_head+0x6>
    3c0a:	00 d0       	rcall	.+0      	; 0x3c0c <xlist_head+0x8>
    3c0c:	0f 92       	push	r0
    3c0e:	cd b7       	in	r28, 0x3d	; 61
    3c10:	de b7       	in	r29, 0x3e	; 62
    3c12:	9d 83       	std	Y+5, r25	; 0x05
    3c14:	8c 83       	std	Y+4, r24	; 0x04
    item_t * ret_val = (item_t *)0;
    3c16:	1b 82       	std	Y+3, r1	; 0x03
    3c18:	1a 82       	std	Y+2, r1	; 0x02
    index_t index;
    index = xlist->index;
    3c1a:	ec 81       	ldd	r30, Y+4	; 0x04
    3c1c:	fd 81       	ldd	r31, Y+5	; 0x05
    3c1e:	80 89       	ldd	r24, Z+16	; 0x10
    3c20:	89 83       	std	Y+1, r24	; 0x01

    if( index != (index_t)0 )
    3c22:	89 81       	ldd	r24, Y+1	; 0x01
    3c24:	88 23       	and	r24, r24
    3c26:	81 f0       	breq	.+32     	; 0x3c48 <xlist_head+0x44>
    {
        ret_val = xlist->item[ index_search( index ) ];
    3c28:	89 81       	ldd	r24, Y+1	; 0x01
    3c2a:	0e 94 9e 0b 	call	0x173c	; 0x173c <index_search>
    3c2e:	88 2f       	mov	r24, r24
    3c30:	90 e0       	ldi	r25, 0x00	; 0
    3c32:	2c 81       	ldd	r18, Y+4	; 0x04
    3c34:	3d 81       	ldd	r19, Y+5	; 0x05
    3c36:	88 0f       	add	r24, r24
    3c38:	99 1f       	adc	r25, r25
    3c3a:	f9 01       	movw	r30, r18
    3c3c:	e8 0f       	add	r30, r24
    3c3e:	f9 1f       	adc	r31, r25
    3c40:	80 81       	ld	r24, Z
    3c42:	91 81       	ldd	r25, Z+1	; 0x01
    3c44:	9b 83       	std	Y+3, r25	; 0x03
    3c46:	8a 83       	std	Y+2, r24	; 0x02
    }
    return ret_val;
    3c48:	8a 81       	ldd	r24, Y+2	; 0x02
    3c4a:	9b 81       	ldd	r25, Y+3	; 0x03
}
    3c4c:	0f 90       	pop	r0
    3c4e:	0f 90       	pop	r0
    3c50:	0f 90       	pop	r0
    3c52:	0f 90       	pop	r0
    3c54:	0f 90       	pop	r0
    3c56:	cf 91       	pop	r28
    3c58:	df 91       	pop	r29
    3c5a:	08 95       	ret

00003c5c <xlist_switch>:

//===========================================================================
// переключение указателя в массиве на следующий элемент, пригодится в планировщике
void xlist_switch(xlist_t * xlist, prio_t prio)
{
    3c5c:	df 93       	push	r29
    3c5e:	cf 93       	push	r28
    3c60:	00 d0       	rcall	.+0      	; 0x3c62 <xlist_switch+0x6>
    3c62:	00 d0       	rcall	.+0      	; 0x3c64 <xlist_switch+0x8>
    3c64:	0f 92       	push	r0
    3c66:	cd b7       	in	r28, 0x3d	; 61
    3c68:	de b7       	in	r29, 0x3e	; 62
    3c6a:	9c 83       	std	Y+4, r25	; 0x04
    3c6c:	8b 83       	std	Y+3, r24	; 0x03
    3c6e:	6d 83       	std	Y+5, r22	; 0x05
    item_t ** current;
    current = xlist->item + prio;
    3c70:	2b 81       	ldd	r18, Y+3	; 0x03
    3c72:	3c 81       	ldd	r19, Y+4	; 0x04
    3c74:	8d 81       	ldd	r24, Y+5	; 0x05
    3c76:	88 2f       	mov	r24, r24
    3c78:	90 e0       	ldi	r25, 0x00	; 0
    3c7a:	88 0f       	add	r24, r24
    3c7c:	99 1f       	adc	r25, r25
    3c7e:	82 0f       	add	r24, r18
    3c80:	93 1f       	adc	r25, r19
    3c82:	9a 83       	std	Y+2, r25	; 0x02
    3c84:	89 83       	std	Y+1, r24	; 0x01
    *current = (*current)->next;
    3c86:	e9 81       	ldd	r30, Y+1	; 0x01
    3c88:	fa 81       	ldd	r31, Y+2	; 0x02
    3c8a:	01 90       	ld	r0, Z+
    3c8c:	f0 81       	ld	r31, Z
    3c8e:	e0 2d       	mov	r30, r0
    3c90:	80 81       	ld	r24, Z
    3c92:	91 81       	ldd	r25, Z+1	; 0x01
    3c94:	e9 81       	ldd	r30, Y+1	; 0x01
    3c96:	fa 81       	ldd	r31, Y+2	; 0x02
    3c98:	91 83       	std	Z+1, r25	; 0x01
    3c9a:	80 83       	st	Z, r24
    //*current = (item_t *)*(item_t **)*(item_t ***)current;
}
    3c9c:	0f 90       	pop	r0
    3c9e:	0f 90       	pop	r0
    3ca0:	0f 90       	pop	r0
    3ca2:	0f 90       	pop	r0
    3ca4:	0f 90       	pop	r0
    3ca6:	cf 91       	pop	r28
    3ca8:	df 91       	pop	r29
    3caa:	08 95       	ret

00003cac <main>:

core_id_t i;
unsigned short j;
*/
int main(void)
{
    3cac:	df 93       	push	r29
    3cae:	cf 93       	push	r28
    3cb0:	cd b7       	in	r28, 0x3d	; 61
    3cb2:	de b7       	in	r29, 0x3e	; 62
    vsmp_init();
    3cb4:	0e 94 63 05 	call	0xac6	; 0xac6 <vsmp_init>

    TCCR2A = 0x02;//
    3cb8:	e0 eb       	ldi	r30, 0xB0	; 176
    3cba:	f0 e0       	ldi	r31, 0x00	; 0
    3cbc:	82 e0       	ldi	r24, 0x02	; 2
    3cbe:	80 83       	st	Z, r24
    TCCR2B = 0x05;// prescaler=128
    3cc0:	e1 eb       	ldi	r30, 0xB1	; 177
    3cc2:	f0 e0       	ldi	r31, 0x00	; 0
    3cc4:	85 e0       	ldi	r24, 0x05	; 5
    3cc6:	80 83       	st	Z, r24
    OCR2A  = 124;
    3cc8:	e3 eb       	ldi	r30, 0xB3	; 179
    3cca:	f0 e0       	ldi	r31, 0x00	; 0
    3ccc:	8c e7       	ldi	r24, 0x7C	; 124
    3cce:	80 83       	st	Z, r24
    OCR2B  = 0x00;
    3cd0:	e4 eb       	ldi	r30, 0xB4	; 180
    3cd2:	f0 e0       	ldi	r31, 0x00	; 0
    3cd4:	10 82       	st	Z, r1
    TIMSK2 = 0x02;
    3cd6:	e0 e7       	ldi	r30, 0x70	; 112
    3cd8:	f0 e0       	ldi	r31, 0x00	; 0
    3cda:	82 e0       	ldi	r24, 0x02	; 2
    3cdc:	80 83       	st	Z, r24
    TIFR2  = 0x00;
    3cde:	e7 e3       	ldi	r30, 0x37	; 55
    3ce0:	f0 e0       	ldi	r31, 0x00	; 0
    3ce2:	10 82       	st	Z, r1

    DDRB = 0x3F;
    3ce4:	e4 e2       	ldi	r30, 0x24	; 36
    3ce6:	f0 e0       	ldi	r31, 0x00	; 0
    3ce8:	8f e3       	ldi	r24, 0x3F	; 63
    3cea:	80 83       	st	Z, r24
    PORTB = 0x00;
    3cec:	e5 e2       	ldi	r30, 0x25	; 37
    3cee:	f0 e0       	ldi	r31, 0x00	; 0
    3cf0:	10 82       	st	Z, r1
    DDRC = 0x3F;
    3cf2:	e7 e2       	ldi	r30, 0x27	; 39
    3cf4:	f0 e0       	ldi	r31, 0x00	; 0
    3cf6:	8f e3       	ldi	r24, 0x3F	; 63
    3cf8:	80 83       	st	Z, r24
    PORTC = 0x00;
    3cfa:	e8 e2       	ldi	r30, 0x28	; 40
    3cfc:	f0 e0       	ldi	r31, 0x00	; 0
    3cfe:	10 82       	st	Z, r1
    DDRD = 0xFE;
    3d00:	ea e2       	ldi	r30, 0x2A	; 42
    3d02:	f0 e0       	ldi	r31, 0x00	; 0
    3d04:	8e ef       	ldi	r24, 0xFE	; 254
    3d06:	80 83       	st	Z, r24
    PORTD = 0x00;
    3d08:	eb e2       	ldi	r30, 0x2B	; 43
    3d0a:	f0 e0       	ldi	r31, 0x00	; 0
    3d0c:	10 82       	st	Z, r1

    vsmp_run();
    3d0e:	0e 94 10 06 	call	0xc20	; 0xc20 <vsmp_run>
        vsmp_vinterrupt_isr( i, &test_vector );
        vsmp_vinterrupt( i, &test_vector2 );
        for(j=0;j<10000;j++);
    }
    */
    init_bugurt();
    3d12:	0e 94 c8 04 	call	0x990	; 0x990 <init_bugurt>
    start_bugurt();
    3d16:	0e 94 0d 05 	call	0xa1a	; 0xa1a <start_bugurt>

    return 0;
    3d1a:	80 e0       	ldi	r24, 0x00	; 0
    3d1c:	90 e0       	ldi	r25, 0x00	; 0
}
    3d1e:	cf 91       	pop	r28
    3d20:	df 91       	pop	r29
    3d22:	08 95       	ret

00003d24 <_exit>:
    3d24:	f8 94       	cli

00003d26 <__stop_program>:
    3d26:	ff cf       	rjmp	.-2      	; 0x3d26 <__stop_program>
