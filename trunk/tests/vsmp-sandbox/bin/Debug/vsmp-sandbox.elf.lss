
bin/Debug/vsmp-sandbox.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000444e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          000006a7  00800100  00800100  000044c2  2**0
                  ALLOC
  2 .stab         000096c0  00000000  00000000  000044c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00004069  00000000  00000000  0000db84  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
       4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      1c:	0c 94 6e 07 	jmp	0xedc	; 0xedc <__vector_7>
      20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      30:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      48:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      54:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000068 <syscall_routine>:
      68:	c8 1c 1a 1d 51 1d 6b 1d 85 1d b2 1d f9 1d 0b 1e     ....Q.k.........
      78:	25 1e 35 1e 45 1e 57 1e 67 1e 77 1e 8e 1e a8 1e     %.5.E.W.g.w.....
      88:	c2 1e d2 1e e8 1e 02 1f 1c 1f 2c 1f 3c 1f 5b 1f     ..........,.<.[.

00000098 <__ctors_end>:
      98:	11 24       	eor	r1, r1
      9a:	1f be       	out	0x3f, r1	; 63
      9c:	cf ef       	ldi	r28, 0xFF	; 255
      9e:	d8 e0       	ldi	r29, 0x08	; 8
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
      a4:	11 e0       	ldi	r17, 0x01	; 1
      a6:	a0 e0       	ldi	r26, 0x00	; 0
      a8:	b1 e0       	ldi	r27, 0x01	; 1
      aa:	ee e4       	ldi	r30, 0x4E	; 78
      ac:	f4 e4       	ldi	r31, 0x44	; 68
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <.do_copy_data_start>

000000b0 <.do_copy_data_loop>:
      b0:	05 90       	lpm	r0, Z+
      b2:	0d 92       	st	X+, r0

000000b4 <.do_copy_data_start>:
      b4:	a0 30       	cpi	r26, 0x00	; 0
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <.do_copy_data_loop>

000000ba <__do_clear_bss>:
      ba:	17 e0       	ldi	r17, 0x07	; 7
      bc:	a0 e0       	ldi	r26, 0x00	; 0
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	a7 3a       	cpi	r26, 0xA7	; 167
      c6:	b1 07       	cpc	r27, r17
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	0e 94 08 21 	call	0x4210	; 0x4210 <main>
      ce:	0c 94 25 22 	jmp	0x444a	; 0x444a <_exit>

000000d2 <__bad_interrupt>:
      d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <bugurt_save_context>:
      d6:	2f 92       	push	r2
      d8:	2f b6       	in	r2, 0x3f	; 63
      da:	2f 92       	push	r2
      dc:	3f 92       	push	r3
      de:	4f 92       	push	r4
      e0:	5f 92       	push	r5
      e2:	6f 92       	push	r6
      e4:	7f 92       	push	r7
      e6:	8f 92       	push	r8
      e8:	9f 92       	push	r9
      ea:	af 92       	push	r10
      ec:	bf 92       	push	r11
      ee:	cf 92       	push	r12
      f0:	df 92       	push	r13
      f2:	ef 92       	push	r14
      f4:	ff 92       	push	r15
      f6:	0f 93       	push	r16
      f8:	1f 93       	push	r17
      fa:	2f 93       	push	r18
      fc:	3f 93       	push	r19
      fe:	4f 93       	push	r20
     100:	5f 93       	push	r21
     102:	6f 93       	push	r22
     104:	7f 93       	push	r23
     106:	8f 93       	push	r24
     108:	9f 93       	push	r25
     10a:	af 93       	push	r26
     10c:	bf 93       	push	r27
     10e:	cf 93       	push	r28
     110:	df 93       	push	r29
     112:	ef 93       	push	r30
     114:	ff 93       	push	r31
     116:	ed b7       	in	r30, 0x3d	; 61
     118:	fe b7       	in	r31, 0x3e	; 62
     11a:	21 a1       	ldd	r18, Z+33	; 0x21
     11c:	30 a1       	ldd	r19, Z+32	; 0x20
     11e:	01 a2       	std	Z+33, r0	; 0x21
     120:	10 a2       	std	Z+32, r1	; 0x20
     122:	11 24       	eor	r1, r1
     124:	8d b7       	in	r24, 0x3d	; 61
     126:	9e b7       	in	r25, 0x3e	; 62
     128:	2f 93       	push	r18
     12a:	3f 93       	push	r19
     12c:	08 95       	ret

0000012e <bugurt_pop_context>:
     12e:	3f 91       	pop	r19
     130:	2f 91       	pop	r18
     132:	04 c0       	rjmp	.+8      	; 0x13c <_bugurt_pop_context>

00000134 <bugurt_restore_context>:
     134:	3f 91       	pop	r19
     136:	2f 91       	pop	r18
     138:	9e bf       	out	0x3e, r25	; 62
     13a:	8d bf       	out	0x3d, r24	; 61

0000013c <_bugurt_pop_context>:
     13c:	fe b7       	in	r31, 0x3e	; 62
     13e:	ed b7       	in	r30, 0x3d	; 61
     140:	10 a0       	ldd	r1, Z+32	; 0x20
     142:	01 a0       	ldd	r0, Z+33	; 0x21
     144:	30 a3       	std	Z+32, r19	; 0x20
     146:	21 a3       	std	Z+33, r18	; 0x21
     148:	ff 91       	pop	r31
     14a:	ef 91       	pop	r30
     14c:	df 91       	pop	r29
     14e:	cf 91       	pop	r28
     150:	bf 91       	pop	r27
     152:	af 91       	pop	r26
     154:	9f 91       	pop	r25
     156:	8f 91       	pop	r24
     158:	7f 91       	pop	r23
     15a:	6f 91       	pop	r22
     15c:	5f 91       	pop	r21
     15e:	4f 91       	pop	r20
     160:	3f 91       	pop	r19
     162:	2f 91       	pop	r18
     164:	1f 91       	pop	r17
     166:	0f 91       	pop	r16
     168:	ff 90       	pop	r15
     16a:	ef 90       	pop	r14
     16c:	df 90       	pop	r13
     16e:	cf 90       	pop	r12
     170:	bf 90       	pop	r11
     172:	af 90       	pop	r10
     174:	9f 90       	pop	r9
     176:	8f 90       	pop	r8
     178:	7f 90       	pop	r7
     17a:	6f 90       	pop	r6
     17c:	5f 90       	pop	r5
     17e:	4f 90       	pop	r4
     180:	3f 90       	pop	r3
     182:	2f 90       	pop	r2
     184:	2f be       	out	0x3f, r2	; 63
     186:	2f 90       	pop	r2
     188:	08 95       	ret

0000018a <bugurt_set_stack_pointer>:
     18a:	1f 90       	pop	r1
     18c:	0f 90       	pop	r0
     18e:	9e bf       	out	0x3e, r25	; 62
     190:	8d bf       	out	0x3d, r24	; 61
     192:	0f 92       	push	r0
     194:	1f 92       	push	r1
     196:	11 24       	eor	r1, r1
     198:	08 95       	ret

0000019a <bugurt_push_pointer>:
     19a:	1f 90       	pop	r1
     19c:	0f 90       	pop	r0
     19e:	8f 93       	push	r24
     1a0:	9f 93       	push	r25
     1a2:	0f 92       	push	r0
     1a4:	1f 92       	push	r1
     1a6:	11 24       	eor	r1, r1
     1a8:	08 95       	ret

000001aa <bugurt_reverse_byte_order>:
     1aa:	08 2e       	mov	r0, r24
     1ac:	89 2f       	mov	r24, r25
     1ae:	90 2d       	mov	r25, r0
     1b0:	08 95       	ret

000001b2 <current_proc>:
    vm_state[current_vm].sp = kernel.sched[current_vm].current_proc->spointer;
    __asm__ __volatile__("reti"::);
}
///!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
proc_t * current_proc(void)
{
     1b2:	df 93       	push	r29
     1b4:	cf 93       	push	r28
     1b6:	00 d0       	rcall	.+0      	; 0x1b8 <current_proc+0x6>
     1b8:	cd b7       	in	r28, 0x3d	; 61
     1ba:	de b7       	in	r29, 0x3e	; 62
    proc_t * ret;
    cli();
     1bc:	f8 94       	cli
    ret = kernel.sched[current_vm].current_proc;
     1be:	80 91 0e 01 	lds	r24, 0x010E
     1c2:	28 2f       	mov	r18, r24
     1c4:	30 e0       	ldi	r19, 0x00	; 0
     1c6:	8b e2       	ldi	r24, 0x2B	; 43
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	ac 01       	movw	r20, r24
     1cc:	24 9f       	mul	r18, r20
     1ce:	c0 01       	movw	r24, r0
     1d0:	25 9f       	mul	r18, r21
     1d2:	90 0d       	add	r25, r0
     1d4:	34 9f       	mul	r19, r20
     1d6:	90 0d       	add	r25, r0
     1d8:	11 24       	eor	r1, r1
     1da:	fc 01       	movw	r30, r24
     1dc:	e7 53       	subi	r30, 0x37	; 55
     1de:	fd 4f       	sbci	r31, 0xFD	; 253
     1e0:	80 81       	ld	r24, Z
     1e2:	91 81       	ldd	r25, Z+1	; 0x01
     1e4:	9a 83       	std	Y+2, r25	; 0x02
     1e6:	89 83       	std	Y+1, r24	; 0x01
    sei();
     1e8:	78 94       	sei
    return ret;
     1ea:	89 81       	ldd	r24, Y+1	; 0x01
     1ec:	9a 81       	ldd	r25, Y+2	; 0x02
}
     1ee:	0f 90       	pop	r0
     1f0:	0f 90       	pop	r0
     1f2:	cf 91       	pop	r28
     1f4:	df 91       	pop	r29
     1f6:	08 95       	ret

000001f8 <spin_init>:

void spin_init( lock_t * lock )
{
     1f8:	df 93       	push	r29
     1fa:	cf 93       	push	r28
     1fc:	00 d0       	rcall	.+0      	; 0x1fe <spin_init+0x6>
     1fe:	cd b7       	in	r28, 0x3d	; 61
     200:	de b7       	in	r29, 0x3e	; 62
     202:	9a 83       	std	Y+2, r25	; 0x02
     204:	89 83       	std	Y+1, r24	; 0x01
    cli();
     206:	f8 94       	cli
    *lock = (lock_t)0;
     208:	e9 81       	ldd	r30, Y+1	; 0x01
     20a:	fa 81       	ldd	r31, Y+2	; 0x02
     20c:	10 82       	st	Z, r1
    sei();
     20e:	78 94       	sei
}
     210:	0f 90       	pop	r0
     212:	0f 90       	pop	r0
     214:	cf 91       	pop	r28
     216:	df 91       	pop	r29
     218:	08 95       	ret

0000021a <spin_lock>:

void spin_lock( lock_t * lock )
{
     21a:	df 93       	push	r29
     21c:	cf 93       	push	r28
     21e:	00 d0       	rcall	.+0      	; 0x220 <spin_lock+0x6>
     220:	00 d0       	rcall	.+0      	; 0x222 <spin_lock+0x8>
     222:	cd b7       	in	r28, 0x3d	; 61
     224:	de b7       	in	r29, 0x3e	; 62
     226:	9c 83       	std	Y+4, r25	; 0x04
     228:	8b 83       	std	Y+3, r24	; 0x03
    unsigned short i;
    while(1)
    {
        cli();
     22a:	f8 94       	cli
        if(!*lock)
     22c:	eb 81       	ldd	r30, Y+3	; 0x03
     22e:	fc 81       	ldd	r31, Y+4	; 0x04
     230:	80 81       	ld	r24, Z
     232:	88 23       	and	r24, r24
     234:	41 f4       	brne	.+16     	; 0x246 <spin_lock+0x2c>
        {
            *lock = (lock_t)1;
     236:	eb 81       	ldd	r30, Y+3	; 0x03
     238:	fc 81       	ldd	r31, Y+4	; 0x04
     23a:	81 e0       	ldi	r24, 0x01	; 1
     23c:	80 83       	st	Z, r24
            goto end;
        }
        sei();
    }
end:
    sei();
     23e:	78 94       	sei
    for(i = 0; i< 1000; i++);// delay, all other vms must spin for a while
     240:	1a 82       	std	Y+2, r1	; 0x02
     242:	19 82       	std	Y+1, r1	; 0x01
     244:	07 c0       	rjmp	.+14     	; 0x254 <spin_lock+0x3a>
        if(!*lock)
        {
            *lock = (lock_t)1;
            goto end;
        }
        sei();
     246:	78 94       	sei
     248:	f0 cf       	rjmp	.-32     	; 0x22a <spin_lock+0x10>
    }
end:
    sei();
    for(i = 0; i< 1000; i++);// delay, all other vms must spin for a while
     24a:	89 81       	ldd	r24, Y+1	; 0x01
     24c:	9a 81       	ldd	r25, Y+2	; 0x02
     24e:	01 96       	adiw	r24, 0x01	; 1
     250:	9a 83       	std	Y+2, r25	; 0x02
     252:	89 83       	std	Y+1, r24	; 0x01
     254:	89 81       	ldd	r24, Y+1	; 0x01
     256:	9a 81       	ldd	r25, Y+2	; 0x02
     258:	23 e0       	ldi	r18, 0x03	; 3
     25a:	88 3e       	cpi	r24, 0xE8	; 232
     25c:	92 07       	cpc	r25, r18
     25e:	a8 f3       	brcs	.-22     	; 0x24a <spin_lock+0x30>
}
     260:	0f 90       	pop	r0
     262:	0f 90       	pop	r0
     264:	0f 90       	pop	r0
     266:	0f 90       	pop	r0
     268:	cf 91       	pop	r28
     26a:	df 91       	pop	r29
     26c:	08 95       	ret

0000026e <spin_unlock>:
void spin_unlock(lock_t * lock)
{
     26e:	df 93       	push	r29
     270:	cf 93       	push	r28
     272:	00 d0       	rcall	.+0      	; 0x274 <spin_unlock+0x6>
     274:	cd b7       	in	r28, 0x3d	; 61
     276:	de b7       	in	r29, 0x3e	; 62
     278:	9a 83       	std	Y+2, r25	; 0x02
     27a:	89 83       	std	Y+1, r24	; 0x01
    cli();
     27c:	f8 94       	cli
    *lock = (lock_t)0;
     27e:	e9 81       	ldd	r30, Y+1	; 0x01
     280:	fa 81       	ldd	r31, Y+2	; 0x02
     282:	10 82       	st	Z, r1
    sei();
     284:	78 94       	sei
}
     286:	0f 90       	pop	r0
     288:	0f 90       	pop	r0
     28a:	cf 91       	pop	r28
     28c:	df 91       	pop	r29
     28e:	08 95       	ret

00000290 <stat_init>:
// stat_t is simply prcess counter here!
void stat_init( stat_t * stat )
{
     290:	df 93       	push	r29
     292:	cf 93       	push	r28
     294:	00 d0       	rcall	.+0      	; 0x296 <stat_init+0x6>
     296:	cd b7       	in	r28, 0x3d	; 61
     298:	de b7       	in	r29, 0x3e	; 62
     29a:	9a 83       	std	Y+2, r25	; 0x02
     29c:	89 83       	std	Y+1, r24	; 0x01
    *stat = 0; // no lad on a system
     29e:	e9 81       	ldd	r30, Y+1	; 0x01
     2a0:	fa 81       	ldd	r31, Y+2	; 0x02
     2a2:	10 82       	st	Z, r1
}
     2a4:	0f 90       	pop	r0
     2a6:	0f 90       	pop	r0
     2a8:	cf 91       	pop	r28
     2aa:	df 91       	pop	r29
     2ac:	08 95       	ret

000002ae <stat_dec>:
void stat_dec( proc_t * proc, stat_t * stat )
{
     2ae:	df 93       	push	r29
     2b0:	cf 93       	push	r28
     2b2:	00 d0       	rcall	.+0      	; 0x2b4 <stat_dec+0x6>
     2b4:	00 d0       	rcall	.+0      	; 0x2b6 <stat_dec+0x8>
     2b6:	cd b7       	in	r28, 0x3d	; 61
     2b8:	de b7       	in	r29, 0x3e	; 62
     2ba:	9a 83       	std	Y+2, r25	; 0x02
     2bc:	89 83       	std	Y+1, r24	; 0x01
     2be:	7c 83       	std	Y+4, r23	; 0x04
     2c0:	6b 83       	std	Y+3, r22	; 0x03
    (*stat)--;
     2c2:	eb 81       	ldd	r30, Y+3	; 0x03
     2c4:	fc 81       	ldd	r31, Y+4	; 0x04
     2c6:	80 81       	ld	r24, Z
     2c8:	81 50       	subi	r24, 0x01	; 1
     2ca:	eb 81       	ldd	r30, Y+3	; 0x03
     2cc:	fc 81       	ldd	r31, Y+4	; 0x04
     2ce:	80 83       	st	Z, r24
}
     2d0:	0f 90       	pop	r0
     2d2:	0f 90       	pop	r0
     2d4:	0f 90       	pop	r0
     2d6:	0f 90       	pop	r0
     2d8:	cf 91       	pop	r28
     2da:	df 91       	pop	r29
     2dc:	08 95       	ret

000002de <stat_inc>:
void stat_inc( proc_t * proc, stat_t * stat )
{
     2de:	df 93       	push	r29
     2e0:	cf 93       	push	r28
     2e2:	00 d0       	rcall	.+0      	; 0x2e4 <stat_inc+0x6>
     2e4:	00 d0       	rcall	.+0      	; 0x2e6 <stat_inc+0x8>
     2e6:	cd b7       	in	r28, 0x3d	; 61
     2e8:	de b7       	in	r29, 0x3e	; 62
     2ea:	9a 83       	std	Y+2, r25	; 0x02
     2ec:	89 83       	std	Y+1, r24	; 0x01
     2ee:	7c 83       	std	Y+4, r23	; 0x04
     2f0:	6b 83       	std	Y+3, r22	; 0x03
    (*stat)++;
     2f2:	eb 81       	ldd	r30, Y+3	; 0x03
     2f4:	fc 81       	ldd	r31, Y+4	; 0x04
     2f6:	80 81       	ld	r24, Z
     2f8:	8f 5f       	subi	r24, 0xFF	; 255
     2fa:	eb 81       	ldd	r30, Y+3	; 0x03
     2fc:	fc 81       	ldd	r31, Y+4	; 0x04
     2fe:	80 83       	st	Z, r24
}
     300:	0f 90       	pop	r0
     302:	0f 90       	pop	r0
     304:	0f 90       	pop	r0
     306:	0f 90       	pop	r0
     308:	cf 91       	pop	r28
     30a:	df 91       	pop	r29
     30c:	08 95       	ret

0000030e <stat_merge>:
void stat_merge( stat_t *src_stat, stat_t * dst_stat  )
{
     30e:	df 93       	push	r29
     310:	cf 93       	push	r28
     312:	00 d0       	rcall	.+0      	; 0x314 <stat_merge+0x6>
     314:	00 d0       	rcall	.+0      	; 0x316 <stat_merge+0x8>
     316:	cd b7       	in	r28, 0x3d	; 61
     318:	de b7       	in	r29, 0x3e	; 62
     31a:	9a 83       	std	Y+2, r25	; 0x02
     31c:	89 83       	std	Y+1, r24	; 0x01
     31e:	7c 83       	std	Y+4, r23	; 0x04
     320:	6b 83       	std	Y+3, r22	; 0x03
    *dst_stat += *src_stat;
     322:	eb 81       	ldd	r30, Y+3	; 0x03
     324:	fc 81       	ldd	r31, Y+4	; 0x04
     326:	90 81       	ld	r25, Z
     328:	e9 81       	ldd	r30, Y+1	; 0x01
     32a:	fa 81       	ldd	r31, Y+2	; 0x02
     32c:	80 81       	ld	r24, Z
     32e:	89 0f       	add	r24, r25
     330:	eb 81       	ldd	r30, Y+3	; 0x03
     332:	fc 81       	ldd	r31, Y+4	; 0x04
     334:	80 83       	st	Z, r24
    *src_stat = (stat_t)0;
     336:	e9 81       	ldd	r30, Y+1	; 0x01
     338:	fa 81       	ldd	r31, Y+2	; 0x02
     33a:	10 82       	st	Z, r1
}
     33c:	0f 90       	pop	r0
     33e:	0f 90       	pop	r0
     340:	0f 90       	pop	r0
     342:	0f 90       	pop	r0
     344:	cf 91       	pop	r28
     346:	df 91       	pop	r29
     348:	08 95       	ret

0000034a <stat_calc_load>:
load_t stat_calc_load(prio_t prio, stat_t * stat)
{
     34a:	df 93       	push	r29
     34c:	cf 93       	push	r28
     34e:	00 d0       	rcall	.+0      	; 0x350 <stat_calc_load+0x6>
     350:	0f 92       	push	r0
     352:	cd b7       	in	r28, 0x3d	; 61
     354:	de b7       	in	r29, 0x3e	; 62
     356:	89 83       	std	Y+1, r24	; 0x01
     358:	7b 83       	std	Y+3, r23	; 0x03
     35a:	6a 83       	std	Y+2, r22	; 0x02
    return (load_t)*stat;
     35c:	ea 81       	ldd	r30, Y+2	; 0x02
     35e:	fb 81       	ldd	r31, Y+3	; 0x03
     360:	80 81       	ld	r24, Z
}
     362:	0f 90       	pop	r0
     364:	0f 90       	pop	r0
     366:	0f 90       	pop	r0
     368:	cf 91       	pop	r28
     36a:	df 91       	pop	r29
     36c:	08 95       	ret

0000036e <resched>:
void resched(core_id_t core_id)
{
     36e:	df 93       	push	r29
     370:	cf 93       	push	r28
     372:	0f 92       	push	r0
     374:	cd b7       	in	r28, 0x3d	; 61
     376:	de b7       	in	r29, 0x3e	; 62
     378:	89 83       	std	Y+1, r24	; 0x01
    vsmp_vinterrupt_isr( core_id, ( vinterrupt_t * )resched_vectors + core_id );
     37a:	89 81       	ldd	r24, Y+1	; 0x01
     37c:	28 2f       	mov	r18, r24
     37e:	30 e0       	ldi	r19, 0x00	; 0
     380:	c9 01       	movw	r24, r18
     382:	88 0f       	add	r24, r24
     384:	99 1f       	adc	r25, r25
     386:	82 0f       	add	r24, r18
     388:	93 1f       	adc	r25, r19
     38a:	88 0f       	add	r24, r24
     38c:	99 1f       	adc	r25, r25
     38e:	9c 01       	movw	r18, r24
     390:	29 5d       	subi	r18, 0xD9	; 217
     392:	3e 4f       	sbci	r19, 0xFE	; 254
     394:	89 81       	ldd	r24, Y+1	; 0x01
     396:	b9 01       	movw	r22, r18
     398:	0e 94 84 09 	call	0x1308	; 0x1308 <vsmp_vinterrupt_isr>
}
     39c:	0f 90       	pop	r0
     39e:	cf 91       	pop	r28
     3a0:	df 91       	pop	r29
     3a2:	08 95       	ret

000003a4 <resched_isr>:
#include "bugurt_kernel.h"

///!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
__MACRO_FUNCTION__(_bugurt_isr_prologue)
{
    cli();
     3a4:	f8 94       	cli
    kernel.sched[current_vm].current_proc->spointer = vm_state[current_vm].sp;
     3a6:	80 91 0e 01 	lds	r24, 0x010E
     3aa:	28 2f       	mov	r18, r24
     3ac:	30 e0       	ldi	r19, 0x00	; 0
     3ae:	8b e2       	ldi	r24, 0x2B	; 43
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	ac 01       	movw	r20, r24
     3b4:	24 9f       	mul	r18, r20
     3b6:	c0 01       	movw	r24, r0
     3b8:	25 9f       	mul	r18, r21
     3ba:	90 0d       	add	r25, r0
     3bc:	34 9f       	mul	r19, r20
     3be:	90 0d       	add	r25, r0
     3c0:	11 24       	eor	r1, r1
     3c2:	fc 01       	movw	r30, r24
     3c4:	e7 53       	subi	r30, 0x37	; 55
     3c6:	fd 4f       	sbci	r31, 0xFD	; 253
     3c8:	a0 81       	ld	r26, Z
     3ca:	b1 81       	ldd	r27, Z+1	; 0x01
     3cc:	80 91 0e 01 	lds	r24, 0x010E
     3d0:	28 2f       	mov	r18, r24
     3d2:	30 e0       	ldi	r19, 0x00	; 0
     3d4:	c9 01       	movw	r24, r18
     3d6:	88 0f       	add	r24, r24
     3d8:	99 1f       	adc	r25, r25
     3da:	88 0f       	add	r24, r24
     3dc:	99 1f       	adc	r25, r25
     3de:	88 0f       	add	r24, r24
     3e0:	99 1f       	adc	r25, r25
     3e2:	82 0f       	add	r24, r18
     3e4:	93 1f       	adc	r25, r19
     3e6:	fc 01       	movw	r30, r24
     3e8:	ec 5e       	subi	r30, 0xEC	; 236
     3ea:	fe 4f       	sbci	r31, 0xFE	; 254
     3ec:	80 81       	ld	r24, Z
     3ee:	91 81       	ldd	r25, Z+1	; 0x01
     3f0:	9f 96       	adiw	r26, 0x2f	; 47
     3f2:	9c 93       	st	X, r25
     3f4:	8e 93       	st	-X, r24
     3f6:	9e 97       	sbiw	r26, 0x2e	; 46
    sei();
     3f8:	78 94       	sei
vinterrupt_t resched_vectors[MAX_CORES];
__attribute__ (( naked )) void resched_isr(void)
{
    _bugurt_isr_prologue();

    sched_reschedule();
     3fa:	0e 94 0a 19 	call	0x3214	; 0x3214 <sched_reschedule>
    kernel.sched[current_vm].current_proc->spointer = vm_state[current_vm].sp;
    sei();
}
__MACRO_FUNCTION__(_bugurt_isr_epilogue)
{
    cli();
     3fe:	f8 94       	cli
    vm_state[current_vm].sp = kernel.sched[current_vm].current_proc->spointer;
     400:	80 91 0e 01 	lds	r24, 0x010E
     404:	48 2f       	mov	r20, r24
     406:	50 e0       	ldi	r21, 0x00	; 0
     408:	80 91 0e 01 	lds	r24, 0x010E
     40c:	28 2f       	mov	r18, r24
     40e:	30 e0       	ldi	r19, 0x00	; 0
     410:	8b e2       	ldi	r24, 0x2B	; 43
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	bc 01       	movw	r22, r24
     416:	26 9f       	mul	r18, r22
     418:	c0 01       	movw	r24, r0
     41a:	27 9f       	mul	r18, r23
     41c:	90 0d       	add	r25, r0
     41e:	36 9f       	mul	r19, r22
     420:	90 0d       	add	r25, r0
     422:	11 24       	eor	r1, r1
     424:	fc 01       	movw	r30, r24
     426:	e7 53       	subi	r30, 0x37	; 55
     428:	fd 4f       	sbci	r31, 0xFD	; 253
     42a:	01 90       	ld	r0, Z+
     42c:	f0 81       	ld	r31, Z
     42e:	e0 2d       	mov	r30, r0
     430:	26 a5       	ldd	r18, Z+46	; 0x2e
     432:	37 a5       	ldd	r19, Z+47	; 0x2f
     434:	ca 01       	movw	r24, r20
     436:	88 0f       	add	r24, r24
     438:	99 1f       	adc	r25, r25
     43a:	88 0f       	add	r24, r24
     43c:	99 1f       	adc	r25, r25
     43e:	88 0f       	add	r24, r24
     440:	99 1f       	adc	r25, r25
     442:	84 0f       	add	r24, r20
     444:	95 1f       	adc	r25, r21
     446:	fc 01       	movw	r30, r24
     448:	ec 5e       	subi	r30, 0xEC	; 236
     44a:	fe 4f       	sbci	r31, 0xFE	; 254
     44c:	31 83       	std	Z+1, r19	; 0x01
     44e:	20 83       	st	Z, r18
    __asm__ __volatile__("reti"::);
     450:	18 95       	reti

00000452 <resched_vectors_init>:
    sched_reschedule();

    _bugurt_isr_epilogue();
}
void resched_vectors_init(void)
{
     452:	df 93       	push	r29
     454:	cf 93       	push	r28
     456:	0f 92       	push	r0
     458:	cd b7       	in	r28, 0x3d	; 61
     45a:	de b7       	in	r29, 0x3e	; 62
    core_id_t i;
    for(i = 0; i < MAX_CORES; i++)
     45c:	19 82       	std	Y+1, r1	; 0x01
     45e:	14 c0       	rjmp	.+40     	; 0x488 <resched_vectors_init+0x36>
    {
        vsmp_vinterrupt_init( ( vinterrupt_t * )resched_vectors + i, resched_isr );
     460:	89 81       	ldd	r24, Y+1	; 0x01
     462:	28 2f       	mov	r18, r24
     464:	30 e0       	ldi	r19, 0x00	; 0
     466:	c9 01       	movw	r24, r18
     468:	88 0f       	add	r24, r24
     46a:	99 1f       	adc	r25, r25
     46c:	82 0f       	add	r24, r18
     46e:	93 1f       	adc	r25, r19
     470:	88 0f       	add	r24, r24
     472:	99 1f       	adc	r25, r25
     474:	89 5d       	subi	r24, 0xD9	; 217
     476:	9e 4f       	sbci	r25, 0xFE	; 254
     478:	22 ed       	ldi	r18, 0xD2	; 210
     47a:	31 e0       	ldi	r19, 0x01	; 1
     47c:	b9 01       	movw	r22, r18
     47e:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <vsmp_vinterrupt_init>
    _bugurt_isr_epilogue();
}
void resched_vectors_init(void)
{
    core_id_t i;
    for(i = 0; i < MAX_CORES; i++)
     482:	89 81       	ldd	r24, Y+1	; 0x01
     484:	8f 5f       	subi	r24, 0xFF	; 255
     486:	89 83       	std	Y+1, r24	; 0x01
     488:	89 81       	ldd	r24, Y+1	; 0x01
     48a:	82 30       	cpi	r24, 0x02	; 2
     48c:	48 f3       	brcs	.-46     	; 0x460 <resched_vectors_init+0xe>
    {
        vsmp_vinterrupt_init( ( vinterrupt_t * )resched_vectors + i, resched_isr );
    }
}
     48e:	0f 90       	pop	r0
     490:	cf 91       	pop	r28
     492:	df 91       	pop	r29
     494:	08 95       	ret

00000496 <_systimer_tick_isr>:
vinterrupt_t systimer_tick_vector;
vinterrupt_t systimer_vectors[MAX_CORES];
void _systimer_tick_isr(void)
{
     496:	df 93       	push	r29
     498:	cf 93       	push	r28
     49a:	cd b7       	in	r28, 0x3d	; 61
     49c:	de b7       	in	r29, 0x3e	; 62
    SPIN_LOCK_KERNEL_TIMER();
     49e:	82 e8       	ldi	r24, 0x82	; 130
     4a0:	93 e0       	ldi	r25, 0x03	; 3
     4a2:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    kernel.timer++;
     4a6:	80 91 83 03 	lds	r24, 0x0383
     4aa:	90 91 84 03 	lds	r25, 0x0384
     4ae:	01 96       	adiw	r24, 0x01	; 1
     4b0:	90 93 84 03 	sts	0x0384, r25
     4b4:	80 93 83 03 	sts	0x0383, r24
    if( kernel.timer_tick != (void (*)(void))0 ) kernel.timer_tick();
     4b8:	80 91 85 03 	lds	r24, 0x0385
     4bc:	90 91 86 03 	lds	r25, 0x0386
     4c0:	00 97       	sbiw	r24, 0x00	; 0
     4c2:	29 f0       	breq	.+10     	; 0x4ce <_systimer_tick_isr+0x38>
     4c4:	e0 91 85 03 	lds	r30, 0x0385
     4c8:	f0 91 86 03 	lds	r31, 0x0386
     4cc:	09 95       	icall
    SPIN_UNLOCK_KERNEL_TIMER();
     4ce:	82 e8       	ldi	r24, 0x82	; 130
     4d0:	93 e0       	ldi	r25, 0x03	; 3
     4d2:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>

    systimer_vectors_fire();
     4d6:	0e 94 47 03 	call	0x68e	; 0x68e <systimer_vectors_fire>
}
     4da:	cf 91       	pop	r28
     4dc:	df 91       	pop	r29
     4de:	08 95       	ret

000004e0 <systimer_tick_isr>:
#include "bugurt_kernel.h"

///!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
__MACRO_FUNCTION__(_bugurt_isr_prologue)
{
    cli();
     4e0:	f8 94       	cli
    kernel.sched[current_vm].current_proc->spointer = vm_state[current_vm].sp;
     4e2:	80 91 0e 01 	lds	r24, 0x010E
     4e6:	28 2f       	mov	r18, r24
     4e8:	30 e0       	ldi	r19, 0x00	; 0
     4ea:	8b e2       	ldi	r24, 0x2B	; 43
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	ac 01       	movw	r20, r24
     4f0:	24 9f       	mul	r18, r20
     4f2:	c0 01       	movw	r24, r0
     4f4:	25 9f       	mul	r18, r21
     4f6:	90 0d       	add	r25, r0
     4f8:	34 9f       	mul	r19, r20
     4fa:	90 0d       	add	r25, r0
     4fc:	11 24       	eor	r1, r1
     4fe:	fc 01       	movw	r30, r24
     500:	e7 53       	subi	r30, 0x37	; 55
     502:	fd 4f       	sbci	r31, 0xFD	; 253
     504:	a0 81       	ld	r26, Z
     506:	b1 81       	ldd	r27, Z+1	; 0x01
     508:	80 91 0e 01 	lds	r24, 0x010E
     50c:	28 2f       	mov	r18, r24
     50e:	30 e0       	ldi	r19, 0x00	; 0
     510:	c9 01       	movw	r24, r18
     512:	88 0f       	add	r24, r24
     514:	99 1f       	adc	r25, r25
     516:	88 0f       	add	r24, r24
     518:	99 1f       	adc	r25, r25
     51a:	88 0f       	add	r24, r24
     51c:	99 1f       	adc	r25, r25
     51e:	82 0f       	add	r24, r18
     520:	93 1f       	adc	r25, r19
     522:	fc 01       	movw	r30, r24
     524:	ec 5e       	subi	r30, 0xEC	; 236
     526:	fe 4f       	sbci	r31, 0xFE	; 254
     528:	80 81       	ld	r24, Z
     52a:	91 81       	ldd	r25, Z+1	; 0x01
     52c:	9f 96       	adiw	r26, 0x2f	; 47
     52e:	9c 93       	st	X, r25
     530:	8e 93       	st	-X, r24
     532:	9e 97       	sbiw	r26, 0x2e	; 46
    sei();
     534:	78 94       	sei
}
__attribute__ (( naked )) void systimer_tick_isr(void)
{
    _bugurt_isr_prologue();

    _systimer_tick_isr();
     536:	0e 94 4b 02 	call	0x496	; 0x496 <_systimer_tick_isr>
    kernel.sched[current_vm].current_proc->spointer = vm_state[current_vm].sp;
    sei();
}
__MACRO_FUNCTION__(_bugurt_isr_epilogue)
{
    cli();
     53a:	f8 94       	cli
    vm_state[current_vm].sp = kernel.sched[current_vm].current_proc->spointer;
     53c:	80 91 0e 01 	lds	r24, 0x010E
     540:	48 2f       	mov	r20, r24
     542:	50 e0       	ldi	r21, 0x00	; 0
     544:	80 91 0e 01 	lds	r24, 0x010E
     548:	28 2f       	mov	r18, r24
     54a:	30 e0       	ldi	r19, 0x00	; 0
     54c:	8b e2       	ldi	r24, 0x2B	; 43
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	bc 01       	movw	r22, r24
     552:	26 9f       	mul	r18, r22
     554:	c0 01       	movw	r24, r0
     556:	27 9f       	mul	r18, r23
     558:	90 0d       	add	r25, r0
     55a:	36 9f       	mul	r19, r22
     55c:	90 0d       	add	r25, r0
     55e:	11 24       	eor	r1, r1
     560:	fc 01       	movw	r30, r24
     562:	e7 53       	subi	r30, 0x37	; 55
     564:	fd 4f       	sbci	r31, 0xFD	; 253
     566:	01 90       	ld	r0, Z+
     568:	f0 81       	ld	r31, Z
     56a:	e0 2d       	mov	r30, r0
     56c:	26 a5       	ldd	r18, Z+46	; 0x2e
     56e:	37 a5       	ldd	r19, Z+47	; 0x2f
     570:	ca 01       	movw	r24, r20
     572:	88 0f       	add	r24, r24
     574:	99 1f       	adc	r25, r25
     576:	88 0f       	add	r24, r24
     578:	99 1f       	adc	r25, r25
     57a:	88 0f       	add	r24, r24
     57c:	99 1f       	adc	r25, r25
     57e:	84 0f       	add	r24, r20
     580:	95 1f       	adc	r25, r21
     582:	fc 01       	movw	r30, r24
     584:	ec 5e       	subi	r30, 0xEC	; 236
     586:	fe 4f       	sbci	r31, 0xFE	; 254
     588:	31 83       	std	Z+1, r19	; 0x01
     58a:	20 83       	st	Z, r18
    __asm__ __volatile__("reti"::);
     58c:	18 95       	reti

0000058e <systimer_sched_isr>:
#include "bugurt_kernel.h"

///!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
__MACRO_FUNCTION__(_bugurt_isr_prologue)
{
    cli();
     58e:	f8 94       	cli
    kernel.sched[current_vm].current_proc->spointer = vm_state[current_vm].sp;
     590:	80 91 0e 01 	lds	r24, 0x010E
     594:	28 2f       	mov	r18, r24
     596:	30 e0       	ldi	r19, 0x00	; 0
     598:	8b e2       	ldi	r24, 0x2B	; 43
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	ac 01       	movw	r20, r24
     59e:	24 9f       	mul	r18, r20
     5a0:	c0 01       	movw	r24, r0
     5a2:	25 9f       	mul	r18, r21
     5a4:	90 0d       	add	r25, r0
     5a6:	34 9f       	mul	r19, r20
     5a8:	90 0d       	add	r25, r0
     5aa:	11 24       	eor	r1, r1
     5ac:	fc 01       	movw	r30, r24
     5ae:	e7 53       	subi	r30, 0x37	; 55
     5b0:	fd 4f       	sbci	r31, 0xFD	; 253
     5b2:	a0 81       	ld	r26, Z
     5b4:	b1 81       	ldd	r27, Z+1	; 0x01
     5b6:	80 91 0e 01 	lds	r24, 0x010E
     5ba:	28 2f       	mov	r18, r24
     5bc:	30 e0       	ldi	r19, 0x00	; 0
     5be:	c9 01       	movw	r24, r18
     5c0:	88 0f       	add	r24, r24
     5c2:	99 1f       	adc	r25, r25
     5c4:	88 0f       	add	r24, r24
     5c6:	99 1f       	adc	r25, r25
     5c8:	88 0f       	add	r24, r24
     5ca:	99 1f       	adc	r25, r25
     5cc:	82 0f       	add	r24, r18
     5ce:	93 1f       	adc	r25, r19
     5d0:	fc 01       	movw	r30, r24
     5d2:	ec 5e       	subi	r30, 0xEC	; 236
     5d4:	fe 4f       	sbci	r31, 0xFE	; 254
     5d6:	80 81       	ld	r24, Z
     5d8:	91 81       	ldd	r25, Z+1	; 0x01
     5da:	9f 96       	adiw	r26, 0x2f	; 47
     5dc:	9c 93       	st	X, r25
     5de:	8e 93       	st	-X, r24
     5e0:	9e 97       	sbiw	r26, 0x2e	; 46
    sei();
     5e2:	78 94       	sei

__attribute__ (( naked )) void systimer_sched_isr(void)
{
    _bugurt_isr_prologue();

    sched_schedule();
     5e4:	0e 94 05 18 	call	0x300a	; 0x300a <sched_schedule>
    kernel.sched[current_vm].current_proc->spointer = vm_state[current_vm].sp;
    sei();
}
__MACRO_FUNCTION__(_bugurt_isr_epilogue)
{
    cli();
     5e8:	f8 94       	cli
    vm_state[current_vm].sp = kernel.sched[current_vm].current_proc->spointer;
     5ea:	80 91 0e 01 	lds	r24, 0x010E
     5ee:	48 2f       	mov	r20, r24
     5f0:	50 e0       	ldi	r21, 0x00	; 0
     5f2:	80 91 0e 01 	lds	r24, 0x010E
     5f6:	28 2f       	mov	r18, r24
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	8b e2       	ldi	r24, 0x2B	; 43
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	bc 01       	movw	r22, r24
     600:	26 9f       	mul	r18, r22
     602:	c0 01       	movw	r24, r0
     604:	27 9f       	mul	r18, r23
     606:	90 0d       	add	r25, r0
     608:	36 9f       	mul	r19, r22
     60a:	90 0d       	add	r25, r0
     60c:	11 24       	eor	r1, r1
     60e:	fc 01       	movw	r30, r24
     610:	e7 53       	subi	r30, 0x37	; 55
     612:	fd 4f       	sbci	r31, 0xFD	; 253
     614:	01 90       	ld	r0, Z+
     616:	f0 81       	ld	r31, Z
     618:	e0 2d       	mov	r30, r0
     61a:	26 a5       	ldd	r18, Z+46	; 0x2e
     61c:	37 a5       	ldd	r19, Z+47	; 0x2f
     61e:	ca 01       	movw	r24, r20
     620:	88 0f       	add	r24, r24
     622:	99 1f       	adc	r25, r25
     624:	88 0f       	add	r24, r24
     626:	99 1f       	adc	r25, r25
     628:	88 0f       	add	r24, r24
     62a:	99 1f       	adc	r25, r25
     62c:	84 0f       	add	r24, r20
     62e:	95 1f       	adc	r25, r21
     630:	fc 01       	movw	r30, r24
     632:	ec 5e       	subi	r30, 0xEC	; 236
     634:	fe 4f       	sbci	r31, 0xFE	; 254
     636:	31 83       	std	Z+1, r19	; 0x01
     638:	20 83       	st	Z, r18
    __asm__ __volatile__("reti"::);
     63a:	18 95       	reti

0000063c <systimer_vectors_init>:

    _bugurt_isr_epilogue();
}

void systimer_vectors_init(void)
{
     63c:	df 93       	push	r29
     63e:	cf 93       	push	r28
     640:	0f 92       	push	r0
     642:	cd b7       	in	r28, 0x3d	; 61
     644:	de b7       	in	r29, 0x3e	; 62
    core_id_t i;
    vsmp_vinterrupt_init( &systimer_tick_vector, systimer_tick_isr ); // Zero core is "mater", it handles kernel.timer
     646:	8f e3       	ldi	r24, 0x3F	; 63
     648:	91 e0       	ldi	r25, 0x01	; 1
     64a:	20 e7       	ldi	r18, 0x70	; 112
     64c:	32 e0       	ldi	r19, 0x02	; 2
     64e:	b9 01       	movw	r22, r18
     650:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <vsmp_vinterrupt_init>
    for(i = 0; i < MAX_CORES; i++)
     654:	19 82       	std	Y+1, r1	; 0x01
     656:	14 c0       	rjmp	.+40     	; 0x680 <systimer_vectors_init+0x44>
    {
        vsmp_vinterrupt_init( (vinterrupt_t *)systimer_vectors + i, systimer_sched_isr ); // Other cores are slaves they just shedule.
     658:	89 81       	ldd	r24, Y+1	; 0x01
     65a:	28 2f       	mov	r18, r24
     65c:	30 e0       	ldi	r19, 0x00	; 0
     65e:	c9 01       	movw	r24, r18
     660:	88 0f       	add	r24, r24
     662:	99 1f       	adc	r25, r25
     664:	82 0f       	add	r24, r18
     666:	93 1f       	adc	r25, r19
     668:	88 0f       	add	r24, r24
     66a:	99 1f       	adc	r25, r25
     66c:	8d 5c       	subi	r24, 0xCD	; 205
     66e:	9e 4f       	sbci	r25, 0xFE	; 254
     670:	27 ec       	ldi	r18, 0xC7	; 199
     672:	32 e0       	ldi	r19, 0x02	; 2
     674:	b9 01       	movw	r22, r18
     676:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <vsmp_vinterrupt_init>

void systimer_vectors_init(void)
{
    core_id_t i;
    vsmp_vinterrupt_init( &systimer_tick_vector, systimer_tick_isr ); // Zero core is "mater", it handles kernel.timer
    for(i = 0; i < MAX_CORES; i++)
     67a:	89 81       	ldd	r24, Y+1	; 0x01
     67c:	8f 5f       	subi	r24, 0xFF	; 255
     67e:	89 83       	std	Y+1, r24	; 0x01
     680:	89 81       	ldd	r24, Y+1	; 0x01
     682:	82 30       	cpi	r24, 0x02	; 2
     684:	48 f3       	brcs	.-46     	; 0x658 <systimer_vectors_init+0x1c>
    {
        vsmp_vinterrupt_init( (vinterrupt_t *)systimer_vectors + i, systimer_sched_isr ); // Other cores are slaves they just shedule.
    }
}
     686:	0f 90       	pop	r0
     688:	cf 91       	pop	r28
     68a:	df 91       	pop	r29
     68c:	08 95       	ret

0000068e <systimer_vectors_fire>:

void systimer_vectors_fire(void)
{
     68e:	df 93       	push	r29
     690:	cf 93       	push	r28
     692:	0f 92       	push	r0
     694:	cd b7       	in	r28, 0x3d	; 61
     696:	de b7       	in	r29, 0x3e	; 62
    core_id_t i;
    for(i = 0; i < MAX_CORES; i++)
     698:	19 82       	std	Y+1, r1	; 0x01
     69a:	14 c0       	rjmp	.+40     	; 0x6c4 <systimer_vectors_fire+0x36>
    {
        vsmp_vinterrupt_isr( i, (vinterrupt_t *)systimer_vectors + i );
     69c:	89 81       	ldd	r24, Y+1	; 0x01
     69e:	28 2f       	mov	r18, r24
     6a0:	30 e0       	ldi	r19, 0x00	; 0
     6a2:	c9 01       	movw	r24, r18
     6a4:	88 0f       	add	r24, r24
     6a6:	99 1f       	adc	r25, r25
     6a8:	82 0f       	add	r24, r18
     6aa:	93 1f       	adc	r25, r19
     6ac:	88 0f       	add	r24, r24
     6ae:	99 1f       	adc	r25, r25
     6b0:	9c 01       	movw	r18, r24
     6b2:	2d 5c       	subi	r18, 0xCD	; 205
     6b4:	3e 4f       	sbci	r19, 0xFE	; 254
     6b6:	89 81       	ldd	r24, Y+1	; 0x01
     6b8:	b9 01       	movw	r22, r18
     6ba:	0e 94 84 09 	call	0x1308	; 0x1308 <vsmp_vinterrupt_isr>
}

void systimer_vectors_fire(void)
{
    core_id_t i;
    for(i = 0; i < MAX_CORES; i++)
     6be:	89 81       	ldd	r24, Y+1	; 0x01
     6c0:	8f 5f       	subi	r24, 0xFF	; 255
     6c2:	89 83       	std	Y+1, r24	; 0x01
     6c4:	89 81       	ldd	r24, Y+1	; 0x01
     6c6:	82 30       	cpi	r24, 0x02	; 2
     6c8:	48 f3       	brcs	.-46     	; 0x69c <systimer_vectors_fire+0xe>
    {
        vsmp_vinterrupt_isr( i, (vinterrupt_t *)systimer_vectors + i );
    }
}
     6ca:	0f 90       	pop	r0
     6cc:	cf 91       	pop	r28
     6ce:	df 91       	pop	r29
     6d0:	08 95       	ret

000006d2 <vsmp_systimer_hook_bugurt>:


count_t systimer_hook_counter = 0;
void vsmp_systimer_hook_bugurt(void)
{
     6d2:	df 93       	push	r29
     6d4:	cf 93       	push	r28
     6d6:	cd b7       	in	r28, 0x3d	; 61
     6d8:	de b7       	in	r29, 0x3e	; 62
    if(!current_vm)
     6da:	80 91 0e 01 	lds	r24, 0x010E
     6de:	88 23       	and	r24, r24
     6e0:	d1 f4       	brne	.+52     	; 0x716 <vsmp_systimer_hook_bugurt+0x44>
    {
        systimer_hook_counter++;
     6e2:	80 91 00 01 	lds	r24, 0x0100
     6e6:	90 91 01 01 	lds	r25, 0x0101
     6ea:	01 96       	adiw	r24, 0x01	; 1
     6ec:	90 93 01 01 	sts	0x0101, r25
     6f0:	80 93 00 01 	sts	0x0100, r24
        if( systimer_hook_counter >= CONFIG_SYSTIMER_HOOK_THR )
     6f4:	80 91 00 01 	lds	r24, 0x0100
     6f8:	90 91 01 01 	lds	r25, 0x0101
     6fc:	84 36       	cpi	r24, 0x64	; 100
     6fe:	91 05       	cpc	r25, r1
     700:	50 f0       	brcs	.+20     	; 0x716 <vsmp_systimer_hook_bugurt+0x44>
        {
            systimer_hook_counter = (count_t)0;
     702:	10 92 01 01 	sts	0x0101, r1
     706:	10 92 00 01 	sts	0x0100, r1
            vsmp_vinterrupt_isr(0,&systimer_tick_vector);
     70a:	2f e3       	ldi	r18, 0x3F	; 63
     70c:	31 e0       	ldi	r19, 0x01	; 1
     70e:	80 e0       	ldi	r24, 0x00	; 0
     710:	b9 01       	movw	r22, r18
     712:	0e 94 84 09 	call	0x1308	; 0x1308 <vsmp_vinterrupt_isr>
        }

    }
}
     716:	cf 91       	pop	r28
     718:	df 91       	pop	r29
     71a:	08 95       	ret

0000071c <_syscall_isr>:
syscall_t syscall_num[MAX_CORES];
void * syscall_arg[MAX_CORES];

// Local variable is used compiler generated prologue and epilogue needed
void _syscall_isr(void)
{
     71c:	df 93       	push	r29
     71e:	cf 93       	push	r28
     720:	0f 92       	push	r0
     722:	cd b7       	in	r28, 0x3d	; 61
     724:	de b7       	in	r29, 0x3e	; 62
    core_id_t core;
    core = current_core();
     726:	0e 94 38 0a 	call	0x1470	; 0x1470 <current_core>
     72a:	89 83       	std	Y+1, r24	; 0x01
    do_syscall( syscall_num[core], syscall_arg[core] );
     72c:	89 81       	ldd	r24, Y+1	; 0x01
     72e:	88 2f       	mov	r24, r24
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	fc 01       	movw	r30, r24
     734:	eb 5d       	subi	r30, 0xDB	; 219
     736:	fe 4f       	sbci	r31, 0xFE	; 254
     738:	40 81       	ld	r20, Z
     73a:	89 81       	ldd	r24, Y+1	; 0x01
     73c:	88 2f       	mov	r24, r24
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	88 0f       	add	r24, r24
     742:	99 1f       	adc	r25, r25
     744:	fc 01       	movw	r30, r24
     746:	ef 5d       	subi	r30, 0xDF	; 223
     748:	fe 4f       	sbci	r31, 0xFE	; 254
     74a:	20 81       	ld	r18, Z
     74c:	31 81       	ldd	r19, Z+1	; 0x01
     74e:	84 2f       	mov	r24, r20
     750:	b9 01       	movw	r22, r18
     752:	0e 94 93 1c 	call	0x3926	; 0x3926 <do_syscall>
}
     756:	0f 90       	pop	r0
     758:	cf 91       	pop	r28
     75a:	df 91       	pop	r29
     75c:	08 95       	ret

0000075e <syscall_isr>:
#include "bugurt_kernel.h"

///!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
__MACRO_FUNCTION__(_bugurt_isr_prologue)
{
    cli();
     75e:	f8 94       	cli
    kernel.sched[current_vm].current_proc->spointer = vm_state[current_vm].sp;
     760:	80 91 0e 01 	lds	r24, 0x010E
     764:	28 2f       	mov	r18, r24
     766:	30 e0       	ldi	r19, 0x00	; 0
     768:	8b e2       	ldi	r24, 0x2B	; 43
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	ac 01       	movw	r20, r24
     76e:	24 9f       	mul	r18, r20
     770:	c0 01       	movw	r24, r0
     772:	25 9f       	mul	r18, r21
     774:	90 0d       	add	r25, r0
     776:	34 9f       	mul	r19, r20
     778:	90 0d       	add	r25, r0
     77a:	11 24       	eor	r1, r1
     77c:	fc 01       	movw	r30, r24
     77e:	e7 53       	subi	r30, 0x37	; 55
     780:	fd 4f       	sbci	r31, 0xFD	; 253
     782:	a0 81       	ld	r26, Z
     784:	b1 81       	ldd	r27, Z+1	; 0x01
     786:	80 91 0e 01 	lds	r24, 0x010E
     78a:	28 2f       	mov	r18, r24
     78c:	30 e0       	ldi	r19, 0x00	; 0
     78e:	c9 01       	movw	r24, r18
     790:	88 0f       	add	r24, r24
     792:	99 1f       	adc	r25, r25
     794:	88 0f       	add	r24, r24
     796:	99 1f       	adc	r25, r25
     798:	88 0f       	add	r24, r24
     79a:	99 1f       	adc	r25, r25
     79c:	82 0f       	add	r24, r18
     79e:	93 1f       	adc	r25, r19
     7a0:	fc 01       	movw	r30, r24
     7a2:	ec 5e       	subi	r30, 0xEC	; 236
     7a4:	fe 4f       	sbci	r31, 0xFE	; 254
     7a6:	80 81       	ld	r24, Z
     7a8:	91 81       	ldd	r25, Z+1	; 0x01
     7aa:	9f 96       	adiw	r26, 0x2f	; 47
     7ac:	9c 93       	st	X, r25
     7ae:	8e 93       	st	-X, r24
     7b0:	9e 97       	sbiw	r26, 0x2e	; 46
    sei();
     7b2:	78 94       	sei
}
__attribute__ (( naked )) void syscall_isr(void)
{
    _bugurt_isr_prologue();

    _syscall_isr();
     7b4:	0e 94 8e 03 	call	0x71c	; 0x71c <_syscall_isr>
    kernel.sched[current_vm].current_proc->spointer = vm_state[current_vm].sp;
    sei();
}
__MACRO_FUNCTION__(_bugurt_isr_epilogue)
{
    cli();
     7b8:	f8 94       	cli
    vm_state[current_vm].sp = kernel.sched[current_vm].current_proc->spointer;
     7ba:	80 91 0e 01 	lds	r24, 0x010E
     7be:	48 2f       	mov	r20, r24
     7c0:	50 e0       	ldi	r21, 0x00	; 0
     7c2:	80 91 0e 01 	lds	r24, 0x010E
     7c6:	28 2f       	mov	r18, r24
     7c8:	30 e0       	ldi	r19, 0x00	; 0
     7ca:	8b e2       	ldi	r24, 0x2B	; 43
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	bc 01       	movw	r22, r24
     7d0:	26 9f       	mul	r18, r22
     7d2:	c0 01       	movw	r24, r0
     7d4:	27 9f       	mul	r18, r23
     7d6:	90 0d       	add	r25, r0
     7d8:	36 9f       	mul	r19, r22
     7da:	90 0d       	add	r25, r0
     7dc:	11 24       	eor	r1, r1
     7de:	fc 01       	movw	r30, r24
     7e0:	e7 53       	subi	r30, 0x37	; 55
     7e2:	fd 4f       	sbci	r31, 0xFD	; 253
     7e4:	01 90       	ld	r0, Z+
     7e6:	f0 81       	ld	r31, Z
     7e8:	e0 2d       	mov	r30, r0
     7ea:	26 a5       	ldd	r18, Z+46	; 0x2e
     7ec:	37 a5       	ldd	r19, Z+47	; 0x2f
     7ee:	ca 01       	movw	r24, r20
     7f0:	88 0f       	add	r24, r24
     7f2:	99 1f       	adc	r25, r25
     7f4:	88 0f       	add	r24, r24
     7f6:	99 1f       	adc	r25, r25
     7f8:	88 0f       	add	r24, r24
     7fa:	99 1f       	adc	r25, r25
     7fc:	84 0f       	add	r24, r20
     7fe:	95 1f       	adc	r25, r21
     800:	fc 01       	movw	r30, r24
     802:	ec 5e       	subi	r30, 0xEC	; 236
     804:	fe 4f       	sbci	r31, 0xFE	; 254
     806:	31 83       	std	Z+1, r19	; 0x01
     808:	20 83       	st	Z, r18
    __asm__ __volatile__("reti"::);
     80a:	18 95       	reti

0000080c <syscall_vectors_init>:
    _bugurt_isr_epilogue();
}


void syscall_vectors_init(void)
{
     80c:	df 93       	push	r29
     80e:	cf 93       	push	r28
     810:	0f 92       	push	r0
     812:	cd b7       	in	r28, 0x3d	; 61
     814:	de b7       	in	r29, 0x3e	; 62
    core_id_t i;
    for(i = 0; i < MAX_CORES; i++)
     816:	19 82       	std	Y+1, r1	; 0x01
     818:	25 c0       	rjmp	.+74     	; 0x864 <syscall_vectors_init+0x58>
    {
        vsmp_vinterrupt_init( ( vinterrupt_t * )syscall_vectors + i, syscall_isr );
     81a:	89 81       	ldd	r24, Y+1	; 0x01
     81c:	28 2f       	mov	r18, r24
     81e:	30 e0       	ldi	r19, 0x00	; 0
     820:	c9 01       	movw	r24, r18
     822:	88 0f       	add	r24, r24
     824:	99 1f       	adc	r25, r25
     826:	82 0f       	add	r24, r18
     828:	93 1f       	adc	r25, r19
     82a:	88 0f       	add	r24, r24
     82c:	99 1f       	adc	r25, r25
     82e:	8e 5f       	subi	r24, 0xFE	; 254
     830:	9e 4f       	sbci	r25, 0xFE	; 254
     832:	2f ea       	ldi	r18, 0xAF	; 175
     834:	33 e0       	ldi	r19, 0x03	; 3
     836:	b9 01       	movw	r22, r18
     838:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <vsmp_vinterrupt_init>
        syscall_num[i] = (syscall_t)0;
     83c:	89 81       	ldd	r24, Y+1	; 0x01
     83e:	88 2f       	mov	r24, r24
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	fc 01       	movw	r30, r24
     844:	eb 5d       	subi	r30, 0xDB	; 219
     846:	fe 4f       	sbci	r31, 0xFE	; 254
     848:	10 82       	st	Z, r1
        syscall_arg[i] = (void *)0;
     84a:	89 81       	ldd	r24, Y+1	; 0x01
     84c:	88 2f       	mov	r24, r24
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	88 0f       	add	r24, r24
     852:	99 1f       	adc	r25, r25
     854:	fc 01       	movw	r30, r24
     856:	ef 5d       	subi	r30, 0xDF	; 223
     858:	fe 4f       	sbci	r31, 0xFE	; 254
     85a:	11 82       	std	Z+1, r1	; 0x01
     85c:	10 82       	st	Z, r1


void syscall_vectors_init(void)
{
    core_id_t i;
    for(i = 0; i < MAX_CORES; i++)
     85e:	89 81       	ldd	r24, Y+1	; 0x01
     860:	8f 5f       	subi	r24, 0xFF	; 255
     862:	89 83       	std	Y+1, r24	; 0x01
     864:	89 81       	ldd	r24, Y+1	; 0x01
     866:	82 30       	cpi	r24, 0x02	; 2
     868:	c0 f2       	brcs	.-80     	; 0x81a <syscall_vectors_init+0xe>
    {
        vsmp_vinterrupt_init( ( vinterrupt_t * )syscall_vectors + i, syscall_isr );
        syscall_num[i] = (syscall_t)0;
        syscall_arg[i] = (void *)0;
    }
}
     86a:	0f 90       	pop	r0
     86c:	cf 91       	pop	r28
     86e:	df 91       	pop	r29
     870:	08 95       	ret

00000872 <syscall_bugurt>:

void syscall_bugurt( unsigned char num, void * arg )
{
     872:	df 93       	push	r29
     874:	cf 93       	push	r28
     876:	00 d0       	rcall	.+0      	; 0x878 <syscall_bugurt+0x6>
     878:	00 d0       	rcall	.+0      	; 0x87a <syscall_bugurt+0x8>
     87a:	00 d0       	rcall	.+0      	; 0x87c <syscall_bugurt+0xa>
     87c:	cd b7       	in	r28, 0x3d	; 61
     87e:	de b7       	in	r29, 0x3e	; 62
     880:	8c 83       	std	Y+4, r24	; 0x04
     882:	7e 83       	std	Y+6, r23	; 0x06
     884:	6d 83       	std	Y+5, r22	; 0x05
    core_id_t core;
    item_t * vector;

    disable_interrupts();
     886:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <disable_interrupts>

    cli();
     88a:	f8 94       	cli
    core = current_vm;
     88c:	80 91 0e 01 	lds	r24, 0x010E
     890:	8b 83       	std	Y+3, r24	; 0x03
    sei();
     892:	78 94       	sei

    syscall_num[core] = (syscall_t)num;
     894:	8b 81       	ldd	r24, Y+3	; 0x03
     896:	88 2f       	mov	r24, r24
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	fc 01       	movw	r30, r24
     89c:	eb 5d       	subi	r30, 0xDB	; 219
     89e:	fe 4f       	sbci	r31, 0xFE	; 254
     8a0:	8c 81       	ldd	r24, Y+4	; 0x04
     8a2:	80 83       	st	Z, r24
    syscall_arg[core] = (void *)arg;
     8a4:	8b 81       	ldd	r24, Y+3	; 0x03
     8a6:	88 2f       	mov	r24, r24
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	88 0f       	add	r24, r24
     8ac:	99 1f       	adc	r25, r25
     8ae:	fc 01       	movw	r30, r24
     8b0:	ef 5d       	subi	r30, 0xDF	; 223
     8b2:	fe 4f       	sbci	r31, 0xFE	; 254
     8b4:	8d 81       	ldd	r24, Y+5	; 0x05
     8b6:	9e 81       	ldd	r25, Y+6	; 0x06
     8b8:	91 83       	std	Z+1, r25	; 0x01
     8ba:	80 83       	st	Z, r24
    vector = (item_t *)( &syscall_vectors[core] );
     8bc:	42 e0       	ldi	r20, 0x02	; 2
     8be:	51 e0       	ldi	r21, 0x01	; 1
     8c0:	8b 81       	ldd	r24, Y+3	; 0x03
     8c2:	28 2f       	mov	r18, r24
     8c4:	30 e0       	ldi	r19, 0x00	; 0
     8c6:	c9 01       	movw	r24, r18
     8c8:	88 0f       	add	r24, r24
     8ca:	99 1f       	adc	r25, r25
     8cc:	82 0f       	add	r24, r18
     8ce:	93 1f       	adc	r25, r19
     8d0:	88 0f       	add	r24, r24
     8d2:	99 1f       	adc	r25, r25
     8d4:	84 0f       	add	r24, r20
     8d6:	95 1f       	adc	r25, r21
     8d8:	9a 83       	std	Y+2, r25	; 0x02
     8da:	89 83       	std	Y+1, r24	; 0x01

    cli();
     8dc:	f8 94       	cli
    vm_state[current_vm].int_enabled = (bool_t)1; // Virtual interrupts MUST be eanabled !!!
     8de:	80 91 0e 01 	lds	r24, 0x010E
     8e2:	28 2f       	mov	r18, r24
     8e4:	30 e0       	ldi	r19, 0x00	; 0
     8e6:	c9 01       	movw	r24, r18
     8e8:	88 0f       	add	r24, r24
     8ea:	99 1f       	adc	r25, r25
     8ec:	88 0f       	add	r24, r24
     8ee:	99 1f       	adc	r25, r25
     8f0:	88 0f       	add	r24, r24
     8f2:	99 1f       	adc	r25, r25
     8f4:	82 0f       	add	r24, r18
     8f6:	93 1f       	adc	r25, r19
     8f8:	fc 01       	movw	r30, r24
     8fa:	ef 5e       	subi	r30, 0xEF	; 239
     8fc:	fe 4f       	sbci	r31, 0xFE	; 254
     8fe:	81 e0       	ldi	r24, 0x01	; 1
     900:	80 83       	st	Z, r24
    // System call is not an ordinary interrupt!!!
    // It MUST be serviced FIRST!!!
    if( vm_state[current_vm].int_fifo )
     902:	80 91 0e 01 	lds	r24, 0x010E
     906:	28 2f       	mov	r18, r24
     908:	30 e0       	ldi	r19, 0x00	; 0
     90a:	c9 01       	movw	r24, r18
     90c:	88 0f       	add	r24, r24
     90e:	99 1f       	adc	r25, r25
     910:	88 0f       	add	r24, r24
     912:	99 1f       	adc	r25, r25
     914:	88 0f       	add	r24, r24
     916:	99 1f       	adc	r25, r25
     918:	82 0f       	add	r24, r18
     91a:	93 1f       	adc	r25, r19
     91c:	fc 01       	movw	r30, r24
     91e:	e1 5f       	subi	r30, 0xF1	; 241
     920:	fe 4f       	sbci	r31, 0xFE	; 254
     922:	80 81       	ld	r24, Z
     924:	91 81       	ldd	r25, Z+1	; 0x01
     926:	00 97       	sbiw	r24, 0x00	; 0
     928:	d1 f0       	breq	.+52     	; 0x95e <__stack+0x5f>
    {
        item_insert( (item_t *)vector, ((item_t *)vm_state[current_vm].int_fifo)->next );
     92a:	80 91 0e 01 	lds	r24, 0x010E
     92e:	28 2f       	mov	r18, r24
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	c9 01       	movw	r24, r18
     934:	88 0f       	add	r24, r24
     936:	99 1f       	adc	r25, r25
     938:	88 0f       	add	r24, r24
     93a:	99 1f       	adc	r25, r25
     93c:	88 0f       	add	r24, r24
     93e:	99 1f       	adc	r25, r25
     940:	82 0f       	add	r24, r18
     942:	93 1f       	adc	r25, r19
     944:	fc 01       	movw	r30, r24
     946:	e1 5f       	subi	r30, 0xF1	; 241
     948:	fe 4f       	sbci	r31, 0xFE	; 254
     94a:	01 90       	ld	r0, Z+
     94c:	f0 81       	ld	r31, Z
     94e:	e0 2d       	mov	r30, r0
     950:	20 81       	ld	r18, Z
     952:	31 81       	ldd	r19, Z+1	; 0x01
     954:	89 81       	ldd	r24, Y+1	; 0x01
     956:	9a 81       	ldd	r25, Y+2	; 0x02
     958:	b9 01       	movw	r22, r18
     95a:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <item_insert>
    }
    vm_state[current_vm].int_fifo = (item_t *)vector;
     95e:	80 91 0e 01 	lds	r24, 0x010E
     962:	28 2f       	mov	r18, r24
     964:	30 e0       	ldi	r19, 0x00	; 0
     966:	c9 01       	movw	r24, r18
     968:	88 0f       	add	r24, r24
     96a:	99 1f       	adc	r25, r25
     96c:	88 0f       	add	r24, r24
     96e:	99 1f       	adc	r25, r25
     970:	88 0f       	add	r24, r24
     972:	99 1f       	adc	r25, r25
     974:	82 0f       	add	r24, r18
     976:	93 1f       	adc	r25, r19
     978:	fc 01       	movw	r30, r24
     97a:	e1 5f       	subi	r30, 0xF1	; 241
     97c:	fe 4f       	sbci	r31, 0xFE	; 254
     97e:	89 81       	ldd	r24, Y+1	; 0x01
     980:	9a 81       	ldd	r25, Y+2	; 0x02
     982:	91 83       	std	Z+1, r25	; 0x01
     984:	80 83       	st	Z, r24
    _vsmp_vinterrupt();
     986:	0e 94 8e 08 	call	0x111c	; 0x111c <_vsmp_vinterrupt>
}
     98a:	26 96       	adiw	r28, 0x06	; 6
     98c:	0f b6       	in	r0, 0x3f	; 63
     98e:	f8 94       	cli
     990:	de bf       	out	0x3e, r29	; 62
     992:	0f be       	out	0x3f, r0	; 63
     994:	cd bf       	out	0x3d, r28	; 61
     996:	cf 91       	pop	r28
     998:	df 91       	pop	r29
     99a:	08 95       	ret

0000099c <init_bugurt>:
/***************************************************************************************************************/
// Функции общего пользования

void init_bugurt(void)
{
     99c:	df 93       	push	r29
     99e:	cf 93       	push	r28
     9a0:	0f 92       	push	r0
     9a2:	cd b7       	in	r28, 0x3d	; 61
     9a4:	de b7       	in	r29, 0x3e	; 62
    core_id_t i;
    disable_interrupts();
     9a6:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <disable_interrupts>
    resched_vectors_init();
     9aa:	0e 94 29 02 	call	0x452	; 0x452 <resched_vectors_init>
    systimer_vectors_init();
     9ae:	0e 94 1e 03 	call	0x63c	; 0x63c <systimer_vectors_init>
    syscall_vectors_init();
     9b2:	0e 94 06 04 	call	0x80c	; 0x80c <syscall_vectors_init>
    kernel_init();
     9b6:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <kernel_init>
    kernel.sched[current_core()].nested_crit_sec = (count_t)1;
     9ba:	0e 94 38 0a 	call	0x1470	; 0x1470 <current_core>
     9be:	28 2f       	mov	r18, r24
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	8b e2       	ldi	r24, 0x2B	; 43
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	ac 01       	movw	r20, r24
     9c8:	24 9f       	mul	r18, r20
     9ca:	c0 01       	movw	r24, r0
     9cc:	25 9f       	mul	r18, r21
     9ce:	90 0d       	add	r25, r0
     9d0:	34 9f       	mul	r19, r20
     9d2:	90 0d       	add	r25, r0
     9d4:	11 24       	eor	r1, r1
     9d6:	fc 01       	movw	r30, r24
     9d8:	ef 50       	subi	r30, 0x0F	; 15
     9da:	fd 4f       	sbci	r31, 0xFD	; 253
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	91 83       	std	Z+1, r25	; 0x01
     9e2:	80 83       	st	Z, r24
    for(i = 1; i < MAX_CORES; i++)
     9e4:	81 e0       	ldi	r24, 0x01	; 1
     9e6:	89 83       	std	Y+1, r24	; 0x01
     9e8:	17 c0       	rjmp	.+46     	; 0xa18 <init_bugurt+0x7c>
    {
        kernel.idle[i].pmain = vsmp_idle_main;
     9ea:	89 81       	ldd	r24, Y+1	; 0x01
     9ec:	28 2f       	mov	r18, r24
     9ee:	30 e0       	ldi	r19, 0x00	; 0
     9f0:	80 e3       	ldi	r24, 0x30	; 48
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	ac 01       	movw	r20, r24
     9f6:	24 9f       	mul	r18, r20
     9f8:	c0 01       	movw	r24, r0
     9fa:	25 9f       	mul	r18, r21
     9fc:	90 0d       	add	r25, r0
     9fe:	34 9f       	mul	r19, r20
     a00:	90 0d       	add	r25, r0
     a02:	11 24       	eor	r1, r1
     a04:	fc 01       	movw	r30, r24
     a06:	ed 5b       	subi	r30, 0xBD	; 189
     a08:	fc 4f       	sbci	r31, 0xFC	; 252
     a0a:	8e e1       	ldi	r24, 0x1E	; 30
     a0c:	96 e0       	ldi	r25, 0x06	; 6
     a0e:	91 83       	std	Z+1, r25	; 0x01
     a10:	80 83       	st	Z, r24
    resched_vectors_init();
    systimer_vectors_init();
    syscall_vectors_init();
    kernel_init();
    kernel.sched[current_core()].nested_crit_sec = (count_t)1;
    for(i = 1; i < MAX_CORES; i++)
     a12:	89 81       	ldd	r24, Y+1	; 0x01
     a14:	8f 5f       	subi	r24, 0xFF	; 255
     a16:	89 83       	std	Y+1, r24	; 0x01
     a18:	89 81       	ldd	r24, Y+1	; 0x01
     a1a:	82 30       	cpi	r24, 0x02	; 2
     a1c:	30 f3       	brcs	.-52     	; 0x9ea <init_bugurt+0x4e>
    {
        kernel.idle[i].pmain = vsmp_idle_main;
    }
}
     a1e:	0f 90       	pop	r0
     a20:	cf 91       	pop	r28
     a22:	df 91       	pop	r29
     a24:	08 95       	ret

00000a26 <start_bugurt>:
void start_bugurt(void)
{
     a26:	df 93       	push	r29
     a28:	cf 93       	push	r28
     a2a:	cd b7       	in	r28, 0x3d	; 61
     a2c:	de b7       	in	r29, 0x3e	; 62
    kernel.sched[current_core()].nested_crit_sec = (count_t)0;
     a2e:	0e 94 38 0a 	call	0x1470	; 0x1470 <current_core>
     a32:	28 2f       	mov	r18, r24
     a34:	30 e0       	ldi	r19, 0x00	; 0
     a36:	8b e2       	ldi	r24, 0x2B	; 43
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	ac 01       	movw	r20, r24
     a3c:	24 9f       	mul	r18, r20
     a3e:	c0 01       	movw	r24, r0
     a40:	25 9f       	mul	r18, r21
     a42:	90 0d       	add	r25, r0
     a44:	34 9f       	mul	r19, r20
     a46:	90 0d       	add	r25, r0
     a48:	11 24       	eor	r1, r1
     a4a:	fc 01       	movw	r30, r24
     a4c:	ef 50       	subi	r30, 0x0F	; 15
     a4e:	fd 4f       	sbci	r31, 0xFD	; 253
     a50:	11 82       	std	Z+1, r1	; 0x01
     a52:	10 82       	st	Z, r1
    cli();
     a54:	f8 94       	cli
    vsmp_systimer_hook = vsmp_systimer_hook_bugurt;
     a56:	89 e6       	ldi	r24, 0x69	; 105
     a58:	93 e0       	ldi	r25, 0x03	; 3
     a5a:	90 93 c8 02 	sts	0x02C8, r25
     a5e:	80 93 c7 02 	sts	0x02C7, r24
    sei();
     a62:	78 94       	sei
    enable_interrupts();
     a64:	0e 94 06 0a 	call	0x140c	; 0x140c <enable_interrupts>
    idle_main( (void *)0 );
     a68:	80 e0       	ldi	r24, 0x00	; 0
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	0e 94 ca 20 	call	0x4194	; 0x4194 <idle_main>
}
     a70:	cf 91       	pop	r28
     a72:	df 91       	pop	r29
     a74:	08 95       	ret

00000a76 <vsmp_vm_init>:
void (*vsmp_systimer_hook)(void);



void vsmp_vm_init( vsmp_vm_t * vm, stack_t * sp, stack_t * int_sp )
{
     a76:	df 93       	push	r29
     a78:	cf 93       	push	r28
     a7a:	00 d0       	rcall	.+0      	; 0xa7c <vsmp_vm_init+0x6>
     a7c:	00 d0       	rcall	.+0      	; 0xa7e <vsmp_vm_init+0x8>
     a7e:	00 d0       	rcall	.+0      	; 0xa80 <vsmp_vm_init+0xa>
     a80:	cd b7       	in	r28, 0x3d	; 61
     a82:	de b7       	in	r29, 0x3e	; 62
     a84:	9a 83       	std	Y+2, r25	; 0x02
     a86:	89 83       	std	Y+1, r24	; 0x01
     a88:	7c 83       	std	Y+4, r23	; 0x04
     a8a:	6b 83       	std	Y+3, r22	; 0x03
     a8c:	5e 83       	std	Y+6, r21	; 0x06
     a8e:	4d 83       	std	Y+5, r20	; 0x05
    vm->int_fifo = (item_t *)0; // Нет прерываний;
     a90:	e9 81       	ldd	r30, Y+1	; 0x01
     a92:	fa 81       	ldd	r31, Y+2	; 0x02
     a94:	11 82       	std	Z+1, r1	; 0x01
     a96:	10 82       	st	Z, r1
    vm->int_enabled = 1;// прерывания разрешены
     a98:	e9 81       	ldd	r30, Y+1	; 0x01
     a9a:	fa 81       	ldd	r31, Y+2	; 0x02
     a9c:	81 e0       	ldi	r24, 0x01	; 1
     a9e:	82 83       	std	Z+2, r24	; 0x02
    vm->sp = (stack_t *)sp;
     aa0:	e9 81       	ldd	r30, Y+1	; 0x01
     aa2:	fa 81       	ldd	r31, Y+2	; 0x02
     aa4:	8b 81       	ldd	r24, Y+3	; 0x03
     aa6:	9c 81       	ldd	r25, Y+4	; 0x04
     aa8:	96 83       	std	Z+6, r25	; 0x06
     aaa:	85 83       	std	Z+5, r24	; 0x05
    vm->int_sp = (stack_t *)int_sp;
     aac:	e9 81       	ldd	r30, Y+1	; 0x01
     aae:	fa 81       	ldd	r31, Y+2	; 0x02
     ab0:	8d 81       	ldd	r24, Y+5	; 0x05
     ab2:	9e 81       	ldd	r25, Y+6	; 0x06
     ab4:	90 87       	std	Z+8, r25	; 0x08
     ab6:	87 83       	std	Z+7, r24	; 0x07
    vm->int_nest_count = (count_t)0;
     ab8:	e9 81       	ldd	r30, Y+1	; 0x01
     aba:	fa 81       	ldd	r31, Y+2	; 0x02
     abc:	14 82       	std	Z+4, r1	; 0x04
     abe:	13 82       	std	Z+3, r1	; 0x03
}
     ac0:	26 96       	adiw	r28, 0x06	; 6
     ac2:	0f b6       	in	r0, 0x3f	; 63
     ac4:	f8 94       	cli
     ac6:	de bf       	out	0x3e, r29	; 62
     ac8:	0f be       	out	0x3f, r0	; 63
     aca:	cd bf       	out	0x3d, r28	; 61
     acc:	cf 91       	pop	r28
     ace:	df 91       	pop	r29
     ad0:	08 95       	ret

00000ad2 <vsmp_init>:
void vsmp_init( void )
{
     ad2:	df 93       	push	r29
     ad4:	cf 93       	push	r28
     ad6:	00 d0       	rcall	.+0      	; 0xad8 <vsmp_init+0x6>
     ad8:	00 d0       	rcall	.+0      	; 0xada <vsmp_init+0x8>
     ada:	cd b7       	in	r28, 0x3d	; 61
     adc:	de b7       	in	r29, 0x3e	; 62
    unsigned short i;
    cli();
     ade:	f8 94       	cli
    for(i = 0; i < VM_STACK_SIZE; i++ )vm_int_stack[0][i] = 0x55;
     ae0:	1c 82       	std	Y+4, r1	; 0x04
     ae2:	1b 82       	std	Y+3, r1	; 0x03
     ae4:	0c c0       	rjmp	.+24     	; 0xafe <vsmp_init+0x2c>
     ae6:	8b 81       	ldd	r24, Y+3	; 0x03
     ae8:	9c 81       	ldd	r25, Y+4	; 0x04
     aea:	fc 01       	movw	r30, r24
     aec:	e9 53       	subi	r30, 0x39	; 57
     aee:	fe 4f       	sbci	r31, 0xFE	; 254
     af0:	85 e5       	ldi	r24, 0x55	; 85
     af2:	80 83       	st	Z, r24
     af4:	8b 81       	ldd	r24, Y+3	; 0x03
     af6:	9c 81       	ldd	r25, Y+4	; 0x04
     af8:	01 96       	adiw	r24, 0x01	; 1
     afa:	9c 83       	std	Y+4, r25	; 0x04
     afc:	8b 83       	std	Y+3, r24	; 0x03
     afe:	8b 81       	ldd	r24, Y+3	; 0x03
     b00:	9c 81       	ldd	r25, Y+4	; 0x04
     b02:	80 38       	cpi	r24, 0x80	; 128
     b04:	91 05       	cpc	r25, r1
     b06:	78 f3       	brcs	.-34     	; 0xae6 <vsmp_init+0x14>
    vsmp_vm_init( &vm_state[0], (stack_t *)0 , &vm_int_stack[0][VM_INT_STACK_SIZE-1] );
     b08:	87 ec       	ldi	r24, 0xC7	; 199
     b0a:	91 e0       	ldi	r25, 0x01	; 1
     b0c:	9c 01       	movw	r18, r24
     b0e:	21 58       	subi	r18, 0x81	; 129
     b10:	3f 4f       	sbci	r19, 0xFF	; 255
     b12:	8f e0       	ldi	r24, 0x0F	; 15
     b14:	91 e0       	ldi	r25, 0x01	; 1
     b16:	60 e0       	ldi	r22, 0x00	; 0
     b18:	70 e0       	ldi	r23, 0x00	; 0
     b1a:	a9 01       	movw	r20, r18
     b1c:	0e 94 3b 05 	call	0xa76	; 0xa76 <vsmp_vm_init>
    for( current_vm = 1; current_vm < MAX_CORES; current_vm++ )
     b20:	81 e0       	ldi	r24, 0x01	; 1
     b22:	80 93 0e 01 	sts	0x010E, r24
     b26:	74 c0       	rjmp	.+232    	; 0xc10 <vsmp_init+0x13e>
    {
        stack_t * vm_sp;
        for(i = 0; i < VM_STACK_SIZE; i++ )
     b28:	1c 82       	std	Y+4, r1	; 0x04
     b2a:	1b 82       	std	Y+3, r1	; 0x03
     b2c:	2a c0       	rjmp	.+84     	; 0xb82 <vsmp_init+0xb0>
        {
            vm_stack[current_vm - 1][i] = 0x55;
     b2e:	80 91 0e 01 	lds	r24, 0x010E
     b32:	88 2f       	mov	r24, r24
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	01 97       	sbiw	r24, 0x01	; 1
     b38:	2b 81       	ldd	r18, Y+3	; 0x03
     b3a:	3c 81       	ldd	r19, Y+4	; 0x04
     b3c:	96 95       	lsr	r25
     b3e:	98 2f       	mov	r25, r24
     b40:	88 27       	eor	r24, r24
     b42:	97 95       	ror	r25
     b44:	87 95       	ror	r24
     b46:	82 0f       	add	r24, r18
     b48:	93 1f       	adc	r25, r19
     b4a:	fc 01       	movw	r30, r24
     b4c:	e9 5b       	subi	r30, 0xB9	; 185
     b4e:	fe 4f       	sbci	r31, 0xFE	; 254
     b50:	85 e5       	ldi	r24, 0x55	; 85
     b52:	80 83       	st	Z, r24
            vm_int_stack[current_vm][i] = 0x55;
     b54:	80 91 0e 01 	lds	r24, 0x010E
     b58:	88 2f       	mov	r24, r24
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	2b 81       	ldd	r18, Y+3	; 0x03
     b5e:	3c 81       	ldd	r19, Y+4	; 0x04
     b60:	96 95       	lsr	r25
     b62:	98 2f       	mov	r25, r24
     b64:	88 27       	eor	r24, r24
     b66:	97 95       	ror	r25
     b68:	87 95       	ror	r24
     b6a:	82 0f       	add	r24, r18
     b6c:	93 1f       	adc	r25, r19
     b6e:	fc 01       	movw	r30, r24
     b70:	e9 53       	subi	r30, 0x39	; 57
     b72:	fe 4f       	sbci	r31, 0xFE	; 254
     b74:	85 e5       	ldi	r24, 0x55	; 85
     b76:	80 83       	st	Z, r24
    for(i = 0; i < VM_STACK_SIZE; i++ )vm_int_stack[0][i] = 0x55;
    vsmp_vm_init( &vm_state[0], (stack_t *)0 , &vm_int_stack[0][VM_INT_STACK_SIZE-1] );
    for( current_vm = 1; current_vm < MAX_CORES; current_vm++ )
    {
        stack_t * vm_sp;
        for(i = 0; i < VM_STACK_SIZE; i++ )
     b78:	8b 81       	ldd	r24, Y+3	; 0x03
     b7a:	9c 81       	ldd	r25, Y+4	; 0x04
     b7c:	01 96       	adiw	r24, 0x01	; 1
     b7e:	9c 83       	std	Y+4, r25	; 0x04
     b80:	8b 83       	std	Y+3, r24	; 0x03
     b82:	8b 81       	ldd	r24, Y+3	; 0x03
     b84:	9c 81       	ldd	r25, Y+4	; 0x04
     b86:	80 38       	cpi	r24, 0x80	; 128
     b88:	91 05       	cpc	r25, r1
     b8a:	88 f2       	brcs	.-94     	; 0xb2e <vsmp_init+0x5c>
        {
            vm_stack[current_vm - 1][i] = 0x55;
            vm_int_stack[current_vm][i] = 0x55;
        }
        vm_sp = proc_stack_init( &vm_stack[current_vm - 1][VM_STACK_SIZE - 1], (code_t)vsmp_idle_main, (void *)0 );
     b8c:	80 91 0e 01 	lds	r24, 0x010E
     b90:	88 2f       	mov	r24, r24
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	01 97       	sbiw	r24, 0x01	; 1
     b96:	96 95       	lsr	r25
     b98:	98 2f       	mov	r25, r24
     b9a:	88 27       	eor	r24, r24
     b9c:	97 95       	ror	r25
     b9e:	87 95       	ror	r24
     ba0:	81 58       	subi	r24, 0x81	; 129
     ba2:	9f 4f       	sbci	r25, 0xFF	; 255
     ba4:	89 5b       	subi	r24, 0xB9	; 185
     ba6:	9e 4f       	sbci	r25, 0xFE	; 254
     ba8:	2e e1       	ldi	r18, 0x1E	; 30
     baa:	36 e0       	ldi	r19, 0x06	; 6
     bac:	b9 01       	movw	r22, r18
     bae:	40 e0       	ldi	r20, 0x00	; 0
     bb0:	50 e0       	ldi	r21, 0x00	; 0
     bb2:	0e 94 47 0a 	call	0x148e	; 0x148e <proc_stack_init>
     bb6:	9a 83       	std	Y+2, r25	; 0x02
     bb8:	89 83       	std	Y+1, r24	; 0x01
        vsmp_vm_init( &vm_state[current_vm], (stack_t *)vm_sp, &vm_int_stack[current_vm][VM_INT_STACK_SIZE-1] );
     bba:	80 91 0e 01 	lds	r24, 0x010E
     bbe:	28 2f       	mov	r18, r24
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	c9 01       	movw	r24, r18
     bc4:	88 0f       	add	r24, r24
     bc6:	99 1f       	adc	r25, r25
     bc8:	88 0f       	add	r24, r24
     bca:	99 1f       	adc	r25, r25
     bcc:	88 0f       	add	r24, r24
     bce:	99 1f       	adc	r25, r25
     bd0:	82 0f       	add	r24, r18
     bd2:	93 1f       	adc	r25, r19
     bd4:	bc 01       	movw	r22, r24
     bd6:	61 5f       	subi	r22, 0xF1	; 241
     bd8:	7e 4f       	sbci	r23, 0xFE	; 254
     bda:	27 ec       	ldi	r18, 0xC7	; 199
     bdc:	31 e0       	ldi	r19, 0x01	; 1
     bde:	80 91 0e 01 	lds	r24, 0x010E
     be2:	88 2f       	mov	r24, r24
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	96 95       	lsr	r25
     be8:	98 2f       	mov	r25, r24
     bea:	88 27       	eor	r24, r24
     bec:	97 95       	ror	r25
     bee:	87 95       	ror	r24
     bf0:	81 58       	subi	r24, 0x81	; 129
     bf2:	9f 4f       	sbci	r25, 0xFF	; 255
     bf4:	a9 01       	movw	r20, r18
     bf6:	48 0f       	add	r20, r24
     bf8:	59 1f       	adc	r21, r25
     bfa:	29 81       	ldd	r18, Y+1	; 0x01
     bfc:	3a 81       	ldd	r19, Y+2	; 0x02
     bfe:	cb 01       	movw	r24, r22
     c00:	b9 01       	movw	r22, r18
     c02:	0e 94 3b 05 	call	0xa76	; 0xa76 <vsmp_vm_init>
{
    unsigned short i;
    cli();
    for(i = 0; i < VM_STACK_SIZE; i++ )vm_int_stack[0][i] = 0x55;
    vsmp_vm_init( &vm_state[0], (stack_t *)0 , &vm_int_stack[0][VM_INT_STACK_SIZE-1] );
    for( current_vm = 1; current_vm < MAX_CORES; current_vm++ )
     c06:	80 91 0e 01 	lds	r24, 0x010E
     c0a:	8f 5f       	subi	r24, 0xFF	; 255
     c0c:	80 93 0e 01 	sts	0x010E, r24
     c10:	80 91 0e 01 	lds	r24, 0x010E
     c14:	82 30       	cpi	r24, 0x02	; 2
     c16:	08 f4       	brcc	.+2      	; 0xc1a <vsmp_init+0x148>
     c18:	87 cf       	rjmp	.-242    	; 0xb28 <vsmp_init+0x56>
            vm_int_stack[current_vm][i] = 0x55;
        }
        vm_sp = proc_stack_init( &vm_stack[current_vm - 1][VM_STACK_SIZE - 1], (code_t)vsmp_idle_main, (void *)0 );
        vsmp_vm_init( &vm_state[current_vm], (stack_t *)vm_sp, &vm_int_stack[current_vm][VM_INT_STACK_SIZE-1] );
    }
    current_vm = 0;
     c1a:	10 92 0e 01 	sts	0x010E, r1
}
     c1e:	0f 90       	pop	r0
     c20:	0f 90       	pop	r0
     c22:	0f 90       	pop	r0
     c24:	0f 90       	pop	r0
     c26:	cf 91       	pop	r28
     c28:	df 91       	pop	r29
     c2a:	08 95       	ret

00000c2c <vsmp_run>:

void vsmp_run( void )
{
     c2c:	df 93       	push	r29
     c2e:	cf 93       	push	r28
     c30:	cd b7       	in	r28, 0x3d	; 61
     c32:	de b7       	in	r29, 0x3e	; 62
    sei();
     c34:	78 94       	sei
}
     c36:	cf 91       	pop	r28
     c38:	df 91       	pop	r29
     c3a:	08 95       	ret

00000c3c <vsmp_idle_main>:
void vsmp_idle_main( void * arg )
{
     c3c:	df 93       	push	r29
     c3e:	cf 93       	push	r28
     c40:	00 d0       	rcall	.+0      	; 0xc42 <vsmp_idle_main+0x6>
     c42:	cd b7       	in	r28, 0x3d	; 61
     c44:	de b7       	in	r29, 0x3e	; 62
     c46:	9a 83       	std	Y+2, r25	; 0x02
     c48:	89 83       	std	Y+1, r24	; 0x01
     c4a:	ff cf       	rjmp	.-2      	; 0xc4a <vsmp_idle_main+0xe>

00000c4c <vsmp_do_interrupt>:
    while(1);
}

bool_t vsmp_do_interrupt(void)
{
     c4c:	df 93       	push	r29
     c4e:	cf 93       	push	r28
     c50:	0f 92       	push	r0
     c52:	cd b7       	in	r28, 0x3d	; 61
     c54:	de b7       	in	r29, 0x3e	; 62
    // if current vm is interruptible and there are some interrupts in fifo,
    if( (vm_state[current_vm].int_enabled) && (vm_state[current_vm].int_fifo) )
     c56:	80 91 0e 01 	lds	r24, 0x010E
     c5a:	28 2f       	mov	r18, r24
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	c9 01       	movw	r24, r18
     c60:	88 0f       	add	r24, r24
     c62:	99 1f       	adc	r25, r25
     c64:	88 0f       	add	r24, r24
     c66:	99 1f       	adc	r25, r25
     c68:	88 0f       	add	r24, r24
     c6a:	99 1f       	adc	r25, r25
     c6c:	82 0f       	add	r24, r18
     c6e:	93 1f       	adc	r25, r19
     c70:	fc 01       	movw	r30, r24
     c72:	ef 5e       	subi	r30, 0xEF	; 239
     c74:	fe 4f       	sbci	r31, 0xFE	; 254
     c76:	80 81       	ld	r24, Z
     c78:	88 23       	and	r24, r24
     c7a:	09 f4       	brne	.+2      	; 0xc7e <vsmp_do_interrupt+0x32>
     c7c:	79 c0       	rjmp	.+242    	; 0xd70 <vsmp_do_interrupt+0x124>
     c7e:	80 91 0e 01 	lds	r24, 0x010E
     c82:	28 2f       	mov	r18, r24
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	c9 01       	movw	r24, r18
     c88:	88 0f       	add	r24, r24
     c8a:	99 1f       	adc	r25, r25
     c8c:	88 0f       	add	r24, r24
     c8e:	99 1f       	adc	r25, r25
     c90:	88 0f       	add	r24, r24
     c92:	99 1f       	adc	r25, r25
     c94:	82 0f       	add	r24, r18
     c96:	93 1f       	adc	r25, r19
     c98:	fc 01       	movw	r30, r24
     c9a:	e1 5f       	subi	r30, 0xF1	; 241
     c9c:	fe 4f       	sbci	r31, 0xFE	; 254
     c9e:	80 81       	ld	r24, Z
     ca0:	91 81       	ldd	r25, Z+1	; 0x01
     ca2:	00 97       	sbiw	r24, 0x00	; 0
     ca4:	09 f4       	brne	.+2      	; 0xca8 <vsmp_do_interrupt+0x5c>
     ca6:	64 c0       	rjmp	.+200    	; 0xd70 <vsmp_do_interrupt+0x124>
    {
        // cut head interrupt,
        vm_buf = (void *)vm_state[current_vm].int_fifo;
     ca8:	80 91 0e 01 	lds	r24, 0x010E
     cac:	28 2f       	mov	r18, r24
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	c9 01       	movw	r24, r18
     cb2:	88 0f       	add	r24, r24
     cb4:	99 1f       	adc	r25, r25
     cb6:	88 0f       	add	r24, r24
     cb8:	99 1f       	adc	r25, r25
     cba:	88 0f       	add	r24, r24
     cbc:	99 1f       	adc	r25, r25
     cbe:	82 0f       	add	r24, r18
     cc0:	93 1f       	adc	r25, r19
     cc2:	fc 01       	movw	r30, r24
     cc4:	e1 5f       	subi	r30, 0xF1	; 241
     cc6:	fe 4f       	sbci	r31, 0xFE	; 254
     cc8:	80 81       	ld	r24, Z
     cca:	91 81       	ldd	r25, Z+1	; 0x01
     ccc:	90 93 46 01 	sts	0x0146, r25
     cd0:	80 93 45 01 	sts	0x0145, r24
        if( vm_buf == (void *)((item_t *)vm_buf)->next )
     cd4:	80 91 45 01 	lds	r24, 0x0145
     cd8:	90 91 46 01 	lds	r25, 0x0146
     cdc:	fc 01       	movw	r30, r24
     cde:	20 81       	ld	r18, Z
     ce0:	31 81       	ldd	r19, Z+1	; 0x01
     ce2:	80 91 45 01 	lds	r24, 0x0145
     ce6:	90 91 46 01 	lds	r25, 0x0146
     cea:	28 17       	cp	r18, r24
     cec:	39 07       	cpc	r19, r25
     cee:	99 f4       	brne	.+38     	; 0xd16 <vsmp_do_interrupt+0xca>
        {
            /* only one interrupt in fifo */
            vm_state[current_vm].int_fifo = (item_t *)0;
     cf0:	80 91 0e 01 	lds	r24, 0x010E
     cf4:	28 2f       	mov	r18, r24
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	c9 01       	movw	r24, r18
     cfa:	88 0f       	add	r24, r24
     cfc:	99 1f       	adc	r25, r25
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	88 0f       	add	r24, r24
     d04:	99 1f       	adc	r25, r25
     d06:	82 0f       	add	r24, r18
     d08:	93 1f       	adc	r25, r19
     d0a:	fc 01       	movw	r30, r24
     d0c:	e1 5f       	subi	r30, 0xF1	; 241
     d0e:	fe 4f       	sbci	r31, 0xFE	; 254
     d10:	11 82       	std	Z+1, r1	; 0x01
     d12:	10 82       	st	Z, r1
     d14:	1f c0       	rjmp	.+62     	; 0xd54 <vsmp_do_interrupt+0x108>
        }
        else
        {
            /* many interrupts in fifo */
            vm_state[current_vm].int_fifo = (void *)((item_t *)vm_buf)->next;
     d16:	80 91 0e 01 	lds	r24, 0x010E
     d1a:	28 2f       	mov	r18, r24
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	80 91 45 01 	lds	r24, 0x0145
     d22:	90 91 46 01 	lds	r25, 0x0146
     d26:	fc 01       	movw	r30, r24
     d28:	40 81       	ld	r20, Z
     d2a:	51 81       	ldd	r21, Z+1	; 0x01
     d2c:	c9 01       	movw	r24, r18
     d2e:	88 0f       	add	r24, r24
     d30:	99 1f       	adc	r25, r25
     d32:	88 0f       	add	r24, r24
     d34:	99 1f       	adc	r25, r25
     d36:	88 0f       	add	r24, r24
     d38:	99 1f       	adc	r25, r25
     d3a:	82 0f       	add	r24, r18
     d3c:	93 1f       	adc	r25, r19
     d3e:	fc 01       	movw	r30, r24
     d40:	e1 5f       	subi	r30, 0xF1	; 241
     d42:	fe 4f       	sbci	r31, 0xFE	; 254
     d44:	51 83       	std	Z+1, r21	; 0x01
     d46:	40 83       	st	Z, r20
            item_cut( (item_t *)vm_buf );
     d48:	80 91 45 01 	lds	r24, 0x0145
     d4c:	90 91 46 01 	lds	r25, 0x0146
     d50:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <item_cut>
        }
        // write its isr pointer to vm_buf,
        vm_buf = (void *)(((vinterrupt_t *)vm_buf)->isr);
     d54:	80 91 45 01 	lds	r24, 0x0145
     d58:	90 91 46 01 	lds	r25, 0x0146
     d5c:	fc 01       	movw	r30, r24
     d5e:	84 81       	ldd	r24, Z+4	; 0x04
     d60:	95 81       	ldd	r25, Z+5	; 0x05
     d62:	90 93 46 01 	sts	0x0146, r25
     d66:	80 93 45 01 	sts	0x0145, r24
        // and return 1;
        return (bool_t)1;
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	89 83       	std	Y+1, r24	; 0x01
     d6e:	01 c0       	rjmp	.+2      	; 0xd72 <vsmp_do_interrupt+0x126>
    }
    // else return 0.
    return (bool_t)0;
     d70:	19 82       	std	Y+1, r1	; 0x01
     d72:	89 81       	ldd	r24, Y+1	; 0x01
}
     d74:	0f 90       	pop	r0
     d76:	cf 91       	pop	r28
     d78:	df 91       	pop	r29
     d7a:	08 95       	ret

00000d7c <_vinterrupt_wrapper>:
                       Virtual interrupts wrapper functions.
    Local variable is used to call virtual ISR, so wrapper must have two parts.
*/
// Nested part, uses local variables, so compiler generated prologue and epilogue are needed.
static void _vinterrupt_wrapper(void)
{
     d7c:	df 93       	push	r29
     d7e:	cf 93       	push	r28
     d80:	00 d0       	rcall	.+0      	; 0xd82 <_vinterrupt_wrapper+0x6>
     d82:	cd b7       	in	r28, 0x3d	; 61
     d84:	de b7       	in	r29, 0x3e	; 62
    void (*isr)(void);
    vm_state[current_vm].int_enabled = (bool_t)0; // Virtual interrupt nesting is not alowed by default.
     d86:	80 91 0e 01 	lds	r24, 0x010E
     d8a:	28 2f       	mov	r18, r24
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	c9 01       	movw	r24, r18
     d90:	88 0f       	add	r24, r24
     d92:	99 1f       	adc	r25, r25
     d94:	88 0f       	add	r24, r24
     d96:	99 1f       	adc	r25, r25
     d98:	88 0f       	add	r24, r24
     d9a:	99 1f       	adc	r25, r25
     d9c:	82 0f       	add	r24, r18
     d9e:	93 1f       	adc	r25, r19
     da0:	fc 01       	movw	r30, r24
     da2:	ef 5e       	subi	r30, 0xEF	; 239
     da4:	fe 4f       	sbci	r31, 0xFE	; 254
     da6:	10 82       	st	Z, r1
    isr = (void (*)(void))vm_buf;
     da8:	80 91 45 01 	lds	r24, 0x0145
     dac:	90 91 46 01 	lds	r25, 0x0146
     db0:	9a 83       	std	Y+2, r25	; 0x02
     db2:	89 83       	std	Y+1, r24	; 0x01
    // After vm-buf read we can reenable real interrupts!
    sei();
     db4:	78 94       	sei
    isr();
     db6:	e9 81       	ldd	r30, Y+1	; 0x01
     db8:	fa 81       	ldd	r31, Y+2	; 0x02
     dba:	09 95       	icall
}
     dbc:	0f 90       	pop	r0
     dbe:	0f 90       	pop	r0
     dc0:	cf 91       	pop	r28
     dc2:	df 91       	pop	r29
     dc4:	08 95       	ret

00000dc6 <vinterrupt_wrapper>:
// Nesting part, no prologue and hand made epilogue.
__attribute__ (( naked )) void vinterrupt_wrapper(void)
{
    _vinterrupt_wrapper();
     dc6:	0e 94 be 06 	call	0xd7c	; 0xd7c <_vinterrupt_wrapper>
    cli();
     dca:	f8 94       	cli
    // Virtual interrupts are enabled after interrupt processing.
    vm_state[current_vm].int_enabled = (bool_t)1;
     dcc:	80 91 0e 01 	lds	r24, 0x010E
     dd0:	28 2f       	mov	r18, r24
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	c9 01       	movw	r24, r18
     dd6:	88 0f       	add	r24, r24
     dd8:	99 1f       	adc	r25, r25
     dda:	88 0f       	add	r24, r24
     ddc:	99 1f       	adc	r25, r25
     dde:	88 0f       	add	r24, r24
     de0:	99 1f       	adc	r25, r25
     de2:	82 0f       	add	r24, r18
     de4:	93 1f       	adc	r25, r19
     de6:	fc 01       	movw	r30, r24
     de8:	ef 5e       	subi	r30, 0xEF	; 239
     dea:	fe 4f       	sbci	r31, 0xFE	; 254
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	80 83       	st	Z, r24
    }
    bugurt_set_stack_pointer( vm_state[current_vm].int_sp );
}
__MACRO_FUNCTION__( _vsmp_interrupt_epilogue )
{
    if( vsmp_do_interrupt() ) goto chained_vinterrupt_return;
     df0:	0e 94 26 06 	call	0xc4c	; 0xc4c <vsmp_do_interrupt>
     df4:	88 23       	and	r24, r24
     df6:	09 f0       	breq	.+2      	; 0xdfa <vinterrupt_wrapper+0x34>
     df8:	6c c0       	rjmp	.+216    	; 0xed2 <vinterrupt_wrapper+0x10c>

    if( --vm_state[current_vm].int_nest_count )goto nesting_vinterrupt_return;
     dfa:	80 91 0e 01 	lds	r24, 0x010E
     dfe:	28 2f       	mov	r18, r24
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	c9 01       	movw	r24, r18
     e04:	88 0f       	add	r24, r24
     e06:	99 1f       	adc	r25, r25
     e08:	88 0f       	add	r24, r24
     e0a:	99 1f       	adc	r25, r25
     e0c:	88 0f       	add	r24, r24
     e0e:	99 1f       	adc	r25, r25
     e10:	82 0f       	add	r24, r18
     e12:	93 1f       	adc	r25, r19
     e14:	fc 01       	movw	r30, r24
     e16:	ee 5e       	subi	r30, 0xEE	; 238
     e18:	fe 4f       	sbci	r31, 0xFE	; 254
     e1a:	80 81       	ld	r24, Z
     e1c:	91 81       	ldd	r25, Z+1	; 0x01
     e1e:	ac 01       	movw	r20, r24
     e20:	41 50       	subi	r20, 0x01	; 1
     e22:	50 40       	sbci	r21, 0x00	; 0
     e24:	c9 01       	movw	r24, r18
     e26:	88 0f       	add	r24, r24
     e28:	99 1f       	adc	r25, r25
     e2a:	88 0f       	add	r24, r24
     e2c:	99 1f       	adc	r25, r25
     e2e:	88 0f       	add	r24, r24
     e30:	99 1f       	adc	r25, r25
     e32:	82 0f       	add	r24, r18
     e34:	93 1f       	adc	r25, r19
     e36:	fc 01       	movw	r30, r24
     e38:	ee 5e       	subi	r30, 0xEE	; 238
     e3a:	fe 4f       	sbci	r31, 0xFE	; 254
     e3c:	51 83       	std	Z+1, r21	; 0x01
     e3e:	40 83       	st	Z, r20
     e40:	c9 01       	movw	r24, r18
     e42:	88 0f       	add	r24, r24
     e44:	99 1f       	adc	r25, r25
     e46:	88 0f       	add	r24, r24
     e48:	99 1f       	adc	r25, r25
     e4a:	88 0f       	add	r24, r24
     e4c:	99 1f       	adc	r25, r25
     e4e:	82 0f       	add	r24, r18
     e50:	93 1f       	adc	r25, r19
     e52:	fc 01       	movw	r30, r24
     e54:	ee 5e       	subi	r30, 0xEE	; 238
     e56:	fe 4f       	sbci	r31, 0xFE	; 254
     e58:	80 81       	ld	r24, Z
     e5a:	91 81       	ldd	r25, Z+1	; 0x01
     e5c:	00 97       	sbiw	r24, 0x00	; 0
     e5e:	b1 f5       	brne	.+108    	; 0xecc <vinterrupt_wrapper+0x106>

    vm_state[current_vm].int_sp = &vm_int_stack[current_vm][VM_INT_STACK_SIZE-1];
     e60:	80 91 0e 01 	lds	r24, 0x010E
     e64:	48 2f       	mov	r20, r24
     e66:	50 e0       	ldi	r21, 0x00	; 0
     e68:	27 ec       	ldi	r18, 0xC7	; 199
     e6a:	31 e0       	ldi	r19, 0x01	; 1
     e6c:	80 91 0e 01 	lds	r24, 0x010E
     e70:	88 2f       	mov	r24, r24
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	96 95       	lsr	r25
     e76:	98 2f       	mov	r25, r24
     e78:	88 27       	eor	r24, r24
     e7a:	97 95       	ror	r25
     e7c:	87 95       	ror	r24
     e7e:	81 58       	subi	r24, 0x81	; 129
     e80:	9f 4f       	sbci	r25, 0xFF	; 255
     e82:	28 0f       	add	r18, r24
     e84:	39 1f       	adc	r19, r25
     e86:	ca 01       	movw	r24, r20
     e88:	88 0f       	add	r24, r24
     e8a:	99 1f       	adc	r25, r25
     e8c:	88 0f       	add	r24, r24
     e8e:	99 1f       	adc	r25, r25
     e90:	88 0f       	add	r24, r24
     e92:	99 1f       	adc	r25, r25
     e94:	84 0f       	add	r24, r20
     e96:	95 1f       	adc	r25, r21
     e98:	fc 01       	movw	r30, r24
     e9a:	ea 5e       	subi	r30, 0xEA	; 234
     e9c:	fe 4f       	sbci	r31, 0xFE	; 254
     e9e:	31 83       	std	Z+1, r19	; 0x01
     ea0:	20 83       	st	Z, r18
    bugurt_restore_context( vm_state[current_vm].sp ); // Will return to current vm operation!
     ea2:	80 91 0e 01 	lds	r24, 0x010E
     ea6:	28 2f       	mov	r18, r24
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	c9 01       	movw	r24, r18
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	88 0f       	add	r24, r24
     eb2:	99 1f       	adc	r25, r25
     eb4:	88 0f       	add	r24, r24
     eb6:	99 1f       	adc	r25, r25
     eb8:	82 0f       	add	r24, r18
     eba:	93 1f       	adc	r25, r19
     ebc:	fc 01       	movw	r30, r24
     ebe:	ec 5e       	subi	r30, 0xEC	; 236
     ec0:	fe 4f       	sbci	r31, 0xFE	; 254
     ec2:	80 81       	ld	r24, Z
     ec4:	91 81       	ldd	r25, Z+1	; 0x01
     ec6:	0e 94 9a 00 	call	0x134	; 0x134 <bugurt_restore_context>
    __asm__ __volatile__("reti"::);
     eca:	18 95       	reti

nesting_vinterrupt_return:

    bugurt_pop_context(); //Will return to nesting virtual interrupt!
     ecc:	0e 94 97 00 	call	0x12e	; 0x12e <bugurt_pop_context>
    __asm__ __volatile__("reti"::);
     ed0:	18 95       	reti

chained_vinterrupt_return:
    bugurt_push_pointer( (void *)vinterrupt_wrapper ); // Will return to vinterrupt_wrapper() entry point!
     ed2:	83 ee       	ldi	r24, 0xE3	; 227
     ed4:	96 e0       	ldi	r25, 0x06	; 6
     ed6:	0e 94 cd 00 	call	0x19a	; 0x19a <bugurt_push_pointer>
    __asm__ __volatile__("ret"::);
     eda:	08 95       	ret

00000edc <__vector_7>:
}

/* Virtual interrupt prologue and epilogue inline functions (I can,t debug macros !) */
__MACRO_FUNCTION__( _vsmp_interrupt_prologue )
{
    vm_buf = (void *)bugurt_save_context();
     edc:	0e 94 6b 00 	call	0xd6	; 0xd6 <bugurt_save_context>
     ee0:	90 93 46 01 	sts	0x0146, r25
     ee4:	80 93 45 01 	sts	0x0145, r24
    if( vm_state[current_vm].int_nest_count )
     ee8:	80 91 0e 01 	lds	r24, 0x010E
     eec:	28 2f       	mov	r18, r24
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	c9 01       	movw	r24, r18
     ef2:	88 0f       	add	r24, r24
     ef4:	99 1f       	adc	r25, r25
     ef6:	88 0f       	add	r24, r24
     ef8:	99 1f       	adc	r25, r25
     efa:	88 0f       	add	r24, r24
     efc:	99 1f       	adc	r25, r25
     efe:	82 0f       	add	r24, r18
     f00:	93 1f       	adc	r25, r19
     f02:	fc 01       	movw	r30, r24
     f04:	ee 5e       	subi	r30, 0xEE	; 238
     f06:	fe 4f       	sbci	r31, 0xFE	; 254
     f08:	80 81       	ld	r24, Z
     f0a:	91 81       	ldd	r25, Z+1	; 0x01
     f0c:	00 97       	sbiw	r24, 0x00	; 0
     f0e:	c1 f0       	breq	.+48     	; 0xf40 <__vector_7+0x64>
    {
        vm_state[current_vm].int_sp = (stack_t *)vm_buf;
     f10:	80 91 0e 01 	lds	r24, 0x010E
     f14:	28 2f       	mov	r18, r24
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	80 91 45 01 	lds	r24, 0x0145
     f1c:	90 91 46 01 	lds	r25, 0x0146
     f20:	ac 01       	movw	r20, r24
     f22:	c9 01       	movw	r24, r18
     f24:	88 0f       	add	r24, r24
     f26:	99 1f       	adc	r25, r25
     f28:	88 0f       	add	r24, r24
     f2a:	99 1f       	adc	r25, r25
     f2c:	88 0f       	add	r24, r24
     f2e:	99 1f       	adc	r25, r25
     f30:	82 0f       	add	r24, r18
     f32:	93 1f       	adc	r25, r19
     f34:	fc 01       	movw	r30, r24
     f36:	ea 5e       	subi	r30, 0xEA	; 234
     f38:	fe 4f       	sbci	r31, 0xFE	; 254
     f3a:	51 83       	std	Z+1, r21	; 0x01
     f3c:	40 83       	st	Z, r20
     f3e:	17 c0       	rjmp	.+46     	; 0xf6e <__vector_7+0x92>
    }
    else
    {
        vm_state[current_vm].sp = (stack_t *)vm_buf;
     f40:	80 91 0e 01 	lds	r24, 0x010E
     f44:	28 2f       	mov	r18, r24
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	80 91 45 01 	lds	r24, 0x0145
     f4c:	90 91 46 01 	lds	r25, 0x0146
     f50:	ac 01       	movw	r20, r24
     f52:	c9 01       	movw	r24, r18
     f54:	88 0f       	add	r24, r24
     f56:	99 1f       	adc	r25, r25
     f58:	88 0f       	add	r24, r24
     f5a:	99 1f       	adc	r25, r25
     f5c:	88 0f       	add	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	82 0f       	add	r24, r18
     f62:	93 1f       	adc	r25, r19
     f64:	fc 01       	movw	r30, r24
     f66:	ec 5e       	subi	r30, 0xEC	; 236
     f68:	fe 4f       	sbci	r31, 0xFE	; 254
     f6a:	51 83       	std	Z+1, r21	; 0x01
     f6c:	40 83       	st	Z, r20
    }
    bugurt_set_stack_pointer( vm_state[current_vm].int_sp );
     f6e:	80 91 0e 01 	lds	r24, 0x010E
     f72:	28 2f       	mov	r18, r24
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	c9 01       	movw	r24, r18
     f78:	88 0f       	add	r24, r24
     f7a:	99 1f       	adc	r25, r25
     f7c:	88 0f       	add	r24, r24
     f7e:	99 1f       	adc	r25, r25
     f80:	88 0f       	add	r24, r24
     f82:	99 1f       	adc	r25, r25
     f84:	82 0f       	add	r24, r18
     f86:	93 1f       	adc	r25, r19
     f88:	fc 01       	movw	r30, r24
     f8a:	ea 5e       	subi	r30, 0xEA	; 234
     f8c:	fe 4f       	sbci	r31, 0xFE	; 254
     f8e:	80 81       	ld	r24, Z
     f90:	91 81       	ldd	r25, Z+1	; 0x01
     f92:	0e 94 c5 00 	call	0x18a	; 0x18a <bugurt_set_stack_pointer>
__attribute__ (( signal, naked )) void SYSTEM_TIMER_ISR(void);
void SYSTEM_TIMER_ISR(void)
{
    _vsmp_interrupt_prologue();

    current_vm++;
     f96:	80 91 0e 01 	lds	r24, 0x010E
     f9a:	8f 5f       	subi	r24, 0xFF	; 255
     f9c:	80 93 0e 01 	sts	0x010E, r24
    if(current_vm >= MAX_CORES)current_vm = (core_id_t)0;
     fa0:	80 91 0e 01 	lds	r24, 0x010E
     fa4:	82 30       	cpi	r24, 0x02	; 2
     fa6:	10 f0       	brcs	.+4      	; 0xfac <__vector_7+0xd0>
     fa8:	10 92 0e 01 	sts	0x010E, r1

    if(vsmp_systimer_hook)
     fac:	80 91 c7 02 	lds	r24, 0x02C7
     fb0:	90 91 c8 02 	lds	r25, 0x02C8
     fb4:	00 97       	sbiw	r24, 0x00	; 0
     fb6:	29 f0       	breq	.+10     	; 0xfc2 <__vector_7+0xe6>
    {
        vsmp_systimer_hook();
     fb8:	e0 91 c7 02 	lds	r30, 0x02C7
     fbc:	f0 91 c8 02 	lds	r31, 0x02C8
     fc0:	09 95       	icall
    }

    vm_state[current_vm].int_nest_count++;
     fc2:	80 91 0e 01 	lds	r24, 0x010E
     fc6:	28 2f       	mov	r18, r24
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	c9 01       	movw	r24, r18
     fcc:	88 0f       	add	r24, r24
     fce:	99 1f       	adc	r25, r25
     fd0:	88 0f       	add	r24, r24
     fd2:	99 1f       	adc	r25, r25
     fd4:	88 0f       	add	r24, r24
     fd6:	99 1f       	adc	r25, r25
     fd8:	82 0f       	add	r24, r18
     fda:	93 1f       	adc	r25, r19
     fdc:	fc 01       	movw	r30, r24
     fde:	ee 5e       	subi	r30, 0xEE	; 238
     fe0:	fe 4f       	sbci	r31, 0xFE	; 254
     fe2:	80 81       	ld	r24, Z
     fe4:	91 81       	ldd	r25, Z+1	; 0x01
     fe6:	ac 01       	movw	r20, r24
     fe8:	4f 5f       	subi	r20, 0xFF	; 255
     fea:	5f 4f       	sbci	r21, 0xFF	; 255
     fec:	c9 01       	movw	r24, r18
     fee:	88 0f       	add	r24, r24
     ff0:	99 1f       	adc	r25, r25
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	88 0f       	add	r24, r24
     ff8:	99 1f       	adc	r25, r25
     ffa:	82 0f       	add	r24, r18
     ffc:	93 1f       	adc	r25, r19
     ffe:	fc 01       	movw	r30, r24
    1000:	ee 5e       	subi	r30, 0xEE	; 238
    1002:	fe 4f       	sbci	r31, 0xFE	; 254
    1004:	51 83       	std	Z+1, r21	; 0x01
    1006:	40 83       	st	Z, r20
    bugurt_set_stack_pointer( vm_state[current_vm].int_sp );
    1008:	80 91 0e 01 	lds	r24, 0x010E
    100c:	28 2f       	mov	r18, r24
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	c9 01       	movw	r24, r18
    1012:	88 0f       	add	r24, r24
    1014:	99 1f       	adc	r25, r25
    1016:	88 0f       	add	r24, r24
    1018:	99 1f       	adc	r25, r25
    101a:	88 0f       	add	r24, r24
    101c:	99 1f       	adc	r25, r25
    101e:	82 0f       	add	r24, r18
    1020:	93 1f       	adc	r25, r19
    1022:	fc 01       	movw	r30, r24
    1024:	ea 5e       	subi	r30, 0xEA	; 234
    1026:	fe 4f       	sbci	r31, 0xFE	; 254
    1028:	80 81       	ld	r24, Z
    102a:	91 81       	ldd	r25, Z+1	; 0x01
    102c:	0e 94 c5 00 	call	0x18a	; 0x18a <bugurt_set_stack_pointer>
    }
    bugurt_set_stack_pointer( vm_state[current_vm].int_sp );
}
__MACRO_FUNCTION__( _vsmp_interrupt_epilogue )
{
    if( vsmp_do_interrupt() ) goto chained_vinterrupt_return;
    1030:	0e 94 26 06 	call	0xc4c	; 0xc4c <vsmp_do_interrupt>
    1034:	88 23       	and	r24, r24
    1036:	09 f0       	breq	.+2      	; 0x103a <__vector_7+0x15e>
    1038:	6c c0       	rjmp	.+216    	; 0x1112 <__vector_7+0x236>

    if( --vm_state[current_vm].int_nest_count )goto nesting_vinterrupt_return;
    103a:	80 91 0e 01 	lds	r24, 0x010E
    103e:	28 2f       	mov	r18, r24
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	c9 01       	movw	r24, r18
    1044:	88 0f       	add	r24, r24
    1046:	99 1f       	adc	r25, r25
    1048:	88 0f       	add	r24, r24
    104a:	99 1f       	adc	r25, r25
    104c:	88 0f       	add	r24, r24
    104e:	99 1f       	adc	r25, r25
    1050:	82 0f       	add	r24, r18
    1052:	93 1f       	adc	r25, r19
    1054:	fc 01       	movw	r30, r24
    1056:	ee 5e       	subi	r30, 0xEE	; 238
    1058:	fe 4f       	sbci	r31, 0xFE	; 254
    105a:	80 81       	ld	r24, Z
    105c:	91 81       	ldd	r25, Z+1	; 0x01
    105e:	ac 01       	movw	r20, r24
    1060:	41 50       	subi	r20, 0x01	; 1
    1062:	50 40       	sbci	r21, 0x00	; 0
    1064:	c9 01       	movw	r24, r18
    1066:	88 0f       	add	r24, r24
    1068:	99 1f       	adc	r25, r25
    106a:	88 0f       	add	r24, r24
    106c:	99 1f       	adc	r25, r25
    106e:	88 0f       	add	r24, r24
    1070:	99 1f       	adc	r25, r25
    1072:	82 0f       	add	r24, r18
    1074:	93 1f       	adc	r25, r19
    1076:	fc 01       	movw	r30, r24
    1078:	ee 5e       	subi	r30, 0xEE	; 238
    107a:	fe 4f       	sbci	r31, 0xFE	; 254
    107c:	51 83       	std	Z+1, r21	; 0x01
    107e:	40 83       	st	Z, r20
    1080:	c9 01       	movw	r24, r18
    1082:	88 0f       	add	r24, r24
    1084:	99 1f       	adc	r25, r25
    1086:	88 0f       	add	r24, r24
    1088:	99 1f       	adc	r25, r25
    108a:	88 0f       	add	r24, r24
    108c:	99 1f       	adc	r25, r25
    108e:	82 0f       	add	r24, r18
    1090:	93 1f       	adc	r25, r19
    1092:	fc 01       	movw	r30, r24
    1094:	ee 5e       	subi	r30, 0xEE	; 238
    1096:	fe 4f       	sbci	r31, 0xFE	; 254
    1098:	80 81       	ld	r24, Z
    109a:	91 81       	ldd	r25, Z+1	; 0x01
    109c:	00 97       	sbiw	r24, 0x00	; 0
    109e:	b1 f5       	brne	.+108    	; 0x110c <__vector_7+0x230>

    vm_state[current_vm].int_sp = &vm_int_stack[current_vm][VM_INT_STACK_SIZE-1];
    10a0:	80 91 0e 01 	lds	r24, 0x010E
    10a4:	48 2f       	mov	r20, r24
    10a6:	50 e0       	ldi	r21, 0x00	; 0
    10a8:	27 ec       	ldi	r18, 0xC7	; 199
    10aa:	31 e0       	ldi	r19, 0x01	; 1
    10ac:	80 91 0e 01 	lds	r24, 0x010E
    10b0:	88 2f       	mov	r24, r24
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	96 95       	lsr	r25
    10b6:	98 2f       	mov	r25, r24
    10b8:	88 27       	eor	r24, r24
    10ba:	97 95       	ror	r25
    10bc:	87 95       	ror	r24
    10be:	81 58       	subi	r24, 0x81	; 129
    10c0:	9f 4f       	sbci	r25, 0xFF	; 255
    10c2:	28 0f       	add	r18, r24
    10c4:	39 1f       	adc	r19, r25
    10c6:	ca 01       	movw	r24, r20
    10c8:	88 0f       	add	r24, r24
    10ca:	99 1f       	adc	r25, r25
    10cc:	88 0f       	add	r24, r24
    10ce:	99 1f       	adc	r25, r25
    10d0:	88 0f       	add	r24, r24
    10d2:	99 1f       	adc	r25, r25
    10d4:	84 0f       	add	r24, r20
    10d6:	95 1f       	adc	r25, r21
    10d8:	fc 01       	movw	r30, r24
    10da:	ea 5e       	subi	r30, 0xEA	; 234
    10dc:	fe 4f       	sbci	r31, 0xFE	; 254
    10de:	31 83       	std	Z+1, r19	; 0x01
    10e0:	20 83       	st	Z, r18
    bugurt_restore_context( vm_state[current_vm].sp ); // Will return to current vm operation!
    10e2:	80 91 0e 01 	lds	r24, 0x010E
    10e6:	28 2f       	mov	r18, r24
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	c9 01       	movw	r24, r18
    10ec:	88 0f       	add	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	88 0f       	add	r24, r24
    10f2:	99 1f       	adc	r25, r25
    10f4:	88 0f       	add	r24, r24
    10f6:	99 1f       	adc	r25, r25
    10f8:	82 0f       	add	r24, r18
    10fa:	93 1f       	adc	r25, r19
    10fc:	fc 01       	movw	r30, r24
    10fe:	ec 5e       	subi	r30, 0xEC	; 236
    1100:	fe 4f       	sbci	r31, 0xFE	; 254
    1102:	80 81       	ld	r24, Z
    1104:	91 81       	ldd	r25, Z+1	; 0x01
    1106:	0e 94 9a 00 	call	0x134	; 0x134 <bugurt_restore_context>
    __asm__ __volatile__("reti"::);
    110a:	18 95       	reti

nesting_vinterrupt_return:

    bugurt_pop_context(); //Will return to nesting virtual interrupt!
    110c:	0e 94 97 00 	call	0x12e	; 0x12e <bugurt_pop_context>
    __asm__ __volatile__("reti"::);
    1110:	18 95       	reti

chained_vinterrupt_return:
    bugurt_push_pointer( (void *)vinterrupt_wrapper ); // Will return to vinterrupt_wrapper() entry point!
    1112:	83 ee       	ldi	r24, 0xE3	; 227
    1114:	96 e0       	ldi	r25, 0x06	; 6
    1116:	0e 94 cd 00 	call	0x19a	; 0x19a <bugurt_push_pointer>
    __asm__ __volatile__("ret"::);
    111a:	08 95       	ret

0000111c <_vsmp_vinterrupt>:
}

/* Virtual interrupt prologue and epilogue inline functions (I can,t debug macros !) */
__MACRO_FUNCTION__( _vsmp_interrupt_prologue )
{
    vm_buf = (void *)bugurt_save_context();
    111c:	0e 94 6b 00 	call	0xd6	; 0xd6 <bugurt_save_context>
    1120:	90 93 46 01 	sts	0x0146, r25
    1124:	80 93 45 01 	sts	0x0145, r24
    if( vm_state[current_vm].int_nest_count )
    1128:	80 91 0e 01 	lds	r24, 0x010E
    112c:	28 2f       	mov	r18, r24
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	c9 01       	movw	r24, r18
    1132:	88 0f       	add	r24, r24
    1134:	99 1f       	adc	r25, r25
    1136:	88 0f       	add	r24, r24
    1138:	99 1f       	adc	r25, r25
    113a:	88 0f       	add	r24, r24
    113c:	99 1f       	adc	r25, r25
    113e:	82 0f       	add	r24, r18
    1140:	93 1f       	adc	r25, r19
    1142:	fc 01       	movw	r30, r24
    1144:	ee 5e       	subi	r30, 0xEE	; 238
    1146:	fe 4f       	sbci	r31, 0xFE	; 254
    1148:	80 81       	ld	r24, Z
    114a:	91 81       	ldd	r25, Z+1	; 0x01
    114c:	00 97       	sbiw	r24, 0x00	; 0
    114e:	c1 f0       	breq	.+48     	; 0x1180 <_vsmp_vinterrupt+0x64>
    {
        vm_state[current_vm].int_sp = (stack_t *)vm_buf;
    1150:	80 91 0e 01 	lds	r24, 0x010E
    1154:	28 2f       	mov	r18, r24
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	80 91 45 01 	lds	r24, 0x0145
    115c:	90 91 46 01 	lds	r25, 0x0146
    1160:	ac 01       	movw	r20, r24
    1162:	c9 01       	movw	r24, r18
    1164:	88 0f       	add	r24, r24
    1166:	99 1f       	adc	r25, r25
    1168:	88 0f       	add	r24, r24
    116a:	99 1f       	adc	r25, r25
    116c:	88 0f       	add	r24, r24
    116e:	99 1f       	adc	r25, r25
    1170:	82 0f       	add	r24, r18
    1172:	93 1f       	adc	r25, r19
    1174:	fc 01       	movw	r30, r24
    1176:	ea 5e       	subi	r30, 0xEA	; 234
    1178:	fe 4f       	sbci	r31, 0xFE	; 254
    117a:	51 83       	std	Z+1, r21	; 0x01
    117c:	40 83       	st	Z, r20
    117e:	17 c0       	rjmp	.+46     	; 0x11ae <_vsmp_vinterrupt+0x92>
    }
    else
    {
        vm_state[current_vm].sp = (stack_t *)vm_buf;
    1180:	80 91 0e 01 	lds	r24, 0x010E
    1184:	28 2f       	mov	r18, r24
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	80 91 45 01 	lds	r24, 0x0145
    118c:	90 91 46 01 	lds	r25, 0x0146
    1190:	ac 01       	movw	r20, r24
    1192:	c9 01       	movw	r24, r18
    1194:	88 0f       	add	r24, r24
    1196:	99 1f       	adc	r25, r25
    1198:	88 0f       	add	r24, r24
    119a:	99 1f       	adc	r25, r25
    119c:	88 0f       	add	r24, r24
    119e:	99 1f       	adc	r25, r25
    11a0:	82 0f       	add	r24, r18
    11a2:	93 1f       	adc	r25, r19
    11a4:	fc 01       	movw	r30, r24
    11a6:	ec 5e       	subi	r30, 0xEC	; 236
    11a8:	fe 4f       	sbci	r31, 0xFE	; 254
    11aa:	51 83       	std	Z+1, r21	; 0x01
    11ac:	40 83       	st	Z, r20
    }
    bugurt_set_stack_pointer( vm_state[current_vm].int_sp );
    11ae:	80 91 0e 01 	lds	r24, 0x010E
    11b2:	28 2f       	mov	r18, r24
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	c9 01       	movw	r24, r18
    11b8:	88 0f       	add	r24, r24
    11ba:	99 1f       	adc	r25, r25
    11bc:	88 0f       	add	r24, r24
    11be:	99 1f       	adc	r25, r25
    11c0:	88 0f       	add	r24, r24
    11c2:	99 1f       	adc	r25, r25
    11c4:	82 0f       	add	r24, r18
    11c6:	93 1f       	adc	r25, r19
    11c8:	fc 01       	movw	r30, r24
    11ca:	ea 5e       	subi	r30, 0xEA	; 234
    11cc:	fe 4f       	sbci	r31, 0xFE	; 254
    11ce:	80 81       	ld	r24, Z
    11d0:	91 81       	ldd	r25, Z+1	; 0x01
    11d2:	0e 94 c5 00 	call	0x18a	; 0x18a <bugurt_set_stack_pointer>
// Software virtual interrupt tail function
__attribute__ (( naked )) void _vsmp_vinterrupt(void)
{
    _vsmp_interrupt_prologue();

    vm_state[current_vm].int_nest_count++;
    11d6:	80 91 0e 01 	lds	r24, 0x010E
    11da:	28 2f       	mov	r18, r24
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	c9 01       	movw	r24, r18
    11e0:	88 0f       	add	r24, r24
    11e2:	99 1f       	adc	r25, r25
    11e4:	88 0f       	add	r24, r24
    11e6:	99 1f       	adc	r25, r25
    11e8:	88 0f       	add	r24, r24
    11ea:	99 1f       	adc	r25, r25
    11ec:	82 0f       	add	r24, r18
    11ee:	93 1f       	adc	r25, r19
    11f0:	fc 01       	movw	r30, r24
    11f2:	ee 5e       	subi	r30, 0xEE	; 238
    11f4:	fe 4f       	sbci	r31, 0xFE	; 254
    11f6:	80 81       	ld	r24, Z
    11f8:	91 81       	ldd	r25, Z+1	; 0x01
    11fa:	ac 01       	movw	r20, r24
    11fc:	4f 5f       	subi	r20, 0xFF	; 255
    11fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1200:	c9 01       	movw	r24, r18
    1202:	88 0f       	add	r24, r24
    1204:	99 1f       	adc	r25, r25
    1206:	88 0f       	add	r24, r24
    1208:	99 1f       	adc	r25, r25
    120a:	88 0f       	add	r24, r24
    120c:	99 1f       	adc	r25, r25
    120e:	82 0f       	add	r24, r18
    1210:	93 1f       	adc	r25, r19
    1212:	fc 01       	movw	r30, r24
    1214:	ee 5e       	subi	r30, 0xEE	; 238
    1216:	fe 4f       	sbci	r31, 0xFE	; 254
    1218:	51 83       	std	Z+1, r21	; 0x01
    121a:	40 83       	st	Z, r20
    }
    bugurt_set_stack_pointer( vm_state[current_vm].int_sp );
}
__MACRO_FUNCTION__( _vsmp_interrupt_epilogue )
{
    if( vsmp_do_interrupt() ) goto chained_vinterrupt_return;
    121c:	0e 94 26 06 	call	0xc4c	; 0xc4c <vsmp_do_interrupt>
    1220:	88 23       	and	r24, r24
    1222:	09 f0       	breq	.+2      	; 0x1226 <_vsmp_vinterrupt+0x10a>
    1224:	6c c0       	rjmp	.+216    	; 0x12fe <_vsmp_vinterrupt+0x1e2>

    if( --vm_state[current_vm].int_nest_count )goto nesting_vinterrupt_return;
    1226:	80 91 0e 01 	lds	r24, 0x010E
    122a:	28 2f       	mov	r18, r24
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	c9 01       	movw	r24, r18
    1230:	88 0f       	add	r24, r24
    1232:	99 1f       	adc	r25, r25
    1234:	88 0f       	add	r24, r24
    1236:	99 1f       	adc	r25, r25
    1238:	88 0f       	add	r24, r24
    123a:	99 1f       	adc	r25, r25
    123c:	82 0f       	add	r24, r18
    123e:	93 1f       	adc	r25, r19
    1240:	fc 01       	movw	r30, r24
    1242:	ee 5e       	subi	r30, 0xEE	; 238
    1244:	fe 4f       	sbci	r31, 0xFE	; 254
    1246:	80 81       	ld	r24, Z
    1248:	91 81       	ldd	r25, Z+1	; 0x01
    124a:	ac 01       	movw	r20, r24
    124c:	41 50       	subi	r20, 0x01	; 1
    124e:	50 40       	sbci	r21, 0x00	; 0
    1250:	c9 01       	movw	r24, r18
    1252:	88 0f       	add	r24, r24
    1254:	99 1f       	adc	r25, r25
    1256:	88 0f       	add	r24, r24
    1258:	99 1f       	adc	r25, r25
    125a:	88 0f       	add	r24, r24
    125c:	99 1f       	adc	r25, r25
    125e:	82 0f       	add	r24, r18
    1260:	93 1f       	adc	r25, r19
    1262:	fc 01       	movw	r30, r24
    1264:	ee 5e       	subi	r30, 0xEE	; 238
    1266:	fe 4f       	sbci	r31, 0xFE	; 254
    1268:	51 83       	std	Z+1, r21	; 0x01
    126a:	40 83       	st	Z, r20
    126c:	c9 01       	movw	r24, r18
    126e:	88 0f       	add	r24, r24
    1270:	99 1f       	adc	r25, r25
    1272:	88 0f       	add	r24, r24
    1274:	99 1f       	adc	r25, r25
    1276:	88 0f       	add	r24, r24
    1278:	99 1f       	adc	r25, r25
    127a:	82 0f       	add	r24, r18
    127c:	93 1f       	adc	r25, r19
    127e:	fc 01       	movw	r30, r24
    1280:	ee 5e       	subi	r30, 0xEE	; 238
    1282:	fe 4f       	sbci	r31, 0xFE	; 254
    1284:	80 81       	ld	r24, Z
    1286:	91 81       	ldd	r25, Z+1	; 0x01
    1288:	00 97       	sbiw	r24, 0x00	; 0
    128a:	b1 f5       	brne	.+108    	; 0x12f8 <_vsmp_vinterrupt+0x1dc>

    vm_state[current_vm].int_sp = &vm_int_stack[current_vm][VM_INT_STACK_SIZE-1];
    128c:	80 91 0e 01 	lds	r24, 0x010E
    1290:	48 2f       	mov	r20, r24
    1292:	50 e0       	ldi	r21, 0x00	; 0
    1294:	27 ec       	ldi	r18, 0xC7	; 199
    1296:	31 e0       	ldi	r19, 0x01	; 1
    1298:	80 91 0e 01 	lds	r24, 0x010E
    129c:	88 2f       	mov	r24, r24
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	96 95       	lsr	r25
    12a2:	98 2f       	mov	r25, r24
    12a4:	88 27       	eor	r24, r24
    12a6:	97 95       	ror	r25
    12a8:	87 95       	ror	r24
    12aa:	81 58       	subi	r24, 0x81	; 129
    12ac:	9f 4f       	sbci	r25, 0xFF	; 255
    12ae:	28 0f       	add	r18, r24
    12b0:	39 1f       	adc	r19, r25
    12b2:	ca 01       	movw	r24, r20
    12b4:	88 0f       	add	r24, r24
    12b6:	99 1f       	adc	r25, r25
    12b8:	88 0f       	add	r24, r24
    12ba:	99 1f       	adc	r25, r25
    12bc:	88 0f       	add	r24, r24
    12be:	99 1f       	adc	r25, r25
    12c0:	84 0f       	add	r24, r20
    12c2:	95 1f       	adc	r25, r21
    12c4:	fc 01       	movw	r30, r24
    12c6:	ea 5e       	subi	r30, 0xEA	; 234
    12c8:	fe 4f       	sbci	r31, 0xFE	; 254
    12ca:	31 83       	std	Z+1, r19	; 0x01
    12cc:	20 83       	st	Z, r18
    bugurt_restore_context( vm_state[current_vm].sp ); // Will return to current vm operation!
    12ce:	80 91 0e 01 	lds	r24, 0x010E
    12d2:	28 2f       	mov	r18, r24
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	c9 01       	movw	r24, r18
    12d8:	88 0f       	add	r24, r24
    12da:	99 1f       	adc	r25, r25
    12dc:	88 0f       	add	r24, r24
    12de:	99 1f       	adc	r25, r25
    12e0:	88 0f       	add	r24, r24
    12e2:	99 1f       	adc	r25, r25
    12e4:	82 0f       	add	r24, r18
    12e6:	93 1f       	adc	r25, r19
    12e8:	fc 01       	movw	r30, r24
    12ea:	ec 5e       	subi	r30, 0xEC	; 236
    12ec:	fe 4f       	sbci	r31, 0xFE	; 254
    12ee:	80 81       	ld	r24, Z
    12f0:	91 81       	ldd	r25, Z+1	; 0x01
    12f2:	0e 94 9a 00 	call	0x134	; 0x134 <bugurt_restore_context>
    __asm__ __volatile__("reti"::);
    12f6:	18 95       	reti

nesting_vinterrupt_return:

    bugurt_pop_context(); //Will return to nesting virtual interrupt!
    12f8:	0e 94 97 00 	call	0x12e	; 0x12e <bugurt_pop_context>
    __asm__ __volatile__("reti"::);
    12fc:	18 95       	reti

chained_vinterrupt_return:
    bugurt_push_pointer( (void *)vinterrupt_wrapper ); // Will return to vinterrupt_wrapper() entry point!
    12fe:	83 ee       	ldi	r24, 0xE3	; 227
    1300:	96 e0       	ldi	r25, 0x06	; 6
    1302:	0e 94 cd 00 	call	0x19a	; 0x19a <bugurt_push_pointer>
    __asm__ __volatile__("ret"::);
    1306:	08 95       	ret

00001308 <vsmp_vinterrupt_isr>:
    _vsmp_interrupt_epilogue();
}

// Software virtual interrupt ( For ISR usage only ! Do NOT call from "main"!)
void vsmp_vinterrupt_isr( core_id_t vm, vinterrupt_t * vector )
{
    1308:	df 93       	push	r29
    130a:	cf 93       	push	r28
    130c:	00 d0       	rcall	.+0      	; 0x130e <vsmp_vinterrupt_isr+0x6>
    130e:	0f 92       	push	r0
    1310:	cd b7       	in	r28, 0x3d	; 61
    1312:	de b7       	in	r29, 0x3e	; 62
    1314:	89 83       	std	Y+1, r24	; 0x01
    1316:	7b 83       	std	Y+3, r23	; 0x03
    1318:	6a 83       	std	Y+2, r22	; 0x02
    if( vm_state[vm].int_fifo )
    131a:	89 81       	ldd	r24, Y+1	; 0x01
    131c:	28 2f       	mov	r18, r24
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	c9 01       	movw	r24, r18
    1322:	88 0f       	add	r24, r24
    1324:	99 1f       	adc	r25, r25
    1326:	88 0f       	add	r24, r24
    1328:	99 1f       	adc	r25, r25
    132a:	88 0f       	add	r24, r24
    132c:	99 1f       	adc	r25, r25
    132e:	82 0f       	add	r24, r18
    1330:	93 1f       	adc	r25, r19
    1332:	fc 01       	movw	r30, r24
    1334:	e1 5f       	subi	r30, 0xF1	; 241
    1336:	fe 4f       	sbci	r31, 0xFE	; 254
    1338:	80 81       	ld	r24, Z
    133a:	91 81       	ldd	r25, Z+1	; 0x01
    133c:	00 97       	sbiw	r24, 0x00	; 0
    133e:	c1 f0       	breq	.+48     	; 0x1370 <vsmp_vinterrupt_isr+0x68>
    {
        item_insert( (item_t *)vector, (item_t *)vm_state[vm].int_fifo );
    1340:	4a 81       	ldd	r20, Y+2	; 0x02
    1342:	5b 81       	ldd	r21, Y+3	; 0x03
    1344:	89 81       	ldd	r24, Y+1	; 0x01
    1346:	28 2f       	mov	r18, r24
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	c9 01       	movw	r24, r18
    134c:	88 0f       	add	r24, r24
    134e:	99 1f       	adc	r25, r25
    1350:	88 0f       	add	r24, r24
    1352:	99 1f       	adc	r25, r25
    1354:	88 0f       	add	r24, r24
    1356:	99 1f       	adc	r25, r25
    1358:	82 0f       	add	r24, r18
    135a:	93 1f       	adc	r25, r19
    135c:	fc 01       	movw	r30, r24
    135e:	e1 5f       	subi	r30, 0xF1	; 241
    1360:	fe 4f       	sbci	r31, 0xFE	; 254
    1362:	20 81       	ld	r18, Z
    1364:	31 81       	ldd	r19, Z+1	; 0x01
    1366:	ca 01       	movw	r24, r20
    1368:	b9 01       	movw	r22, r18
    136a:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <item_insert>
    136e:	13 c0       	rjmp	.+38     	; 0x1396 <vsmp_vinterrupt_isr+0x8e>
    }
    else
    {
        vm_state[vm].int_fifo = (item_t *)vector;
    1370:	89 81       	ldd	r24, Y+1	; 0x01
    1372:	28 2f       	mov	r18, r24
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	4a 81       	ldd	r20, Y+2	; 0x02
    1378:	5b 81       	ldd	r21, Y+3	; 0x03
    137a:	c9 01       	movw	r24, r18
    137c:	88 0f       	add	r24, r24
    137e:	99 1f       	adc	r25, r25
    1380:	88 0f       	add	r24, r24
    1382:	99 1f       	adc	r25, r25
    1384:	88 0f       	add	r24, r24
    1386:	99 1f       	adc	r25, r25
    1388:	82 0f       	add	r24, r18
    138a:	93 1f       	adc	r25, r19
    138c:	fc 01       	movw	r30, r24
    138e:	e1 5f       	subi	r30, 0xF1	; 241
    1390:	fe 4f       	sbci	r31, 0xFE	; 254
    1392:	51 83       	std	Z+1, r21	; 0x01
    1394:	40 83       	st	Z, r20
    }
}
    1396:	0f 90       	pop	r0
    1398:	0f 90       	pop	r0
    139a:	0f 90       	pop	r0
    139c:	cf 91       	pop	r28
    139e:	df 91       	pop	r29
    13a0:	08 95       	ret

000013a2 <vsmp_vinterrupt_init>:
    vsmp_vinterrupt_isr( vm, vector );
    _vsmp_vinterrupt();
}

void vsmp_vinterrupt_init( vinterrupt_t * vector, void (*isr)(void) )
{
    13a2:	df 93       	push	r29
    13a4:	cf 93       	push	r28
    13a6:	00 d0       	rcall	.+0      	; 0x13a8 <vsmp_vinterrupt_init+0x6>
    13a8:	00 d0       	rcall	.+0      	; 0x13aa <vsmp_vinterrupt_init+0x8>
    13aa:	cd b7       	in	r28, 0x3d	; 61
    13ac:	de b7       	in	r29, 0x3e	; 62
    13ae:	9a 83       	std	Y+2, r25	; 0x02
    13b0:	89 83       	std	Y+1, r24	; 0x01
    13b2:	7c 83       	std	Y+4, r23	; 0x04
    13b4:	6b 83       	std	Y+3, r22	; 0x03
    item_init( (item_t *)vector );
    13b6:	89 81       	ldd	r24, Y+1	; 0x01
    13b8:	9a 81       	ldd	r25, Y+2	; 0x02
    13ba:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <item_init>
    vector->isr = isr;
    13be:	e9 81       	ldd	r30, Y+1	; 0x01
    13c0:	fa 81       	ldd	r31, Y+2	; 0x02
    13c2:	8b 81       	ldd	r24, Y+3	; 0x03
    13c4:	9c 81       	ldd	r25, Y+4	; 0x04
    13c6:	95 83       	std	Z+5, r25	; 0x05
    13c8:	84 83       	std	Z+4, r24	; 0x04
}
    13ca:	0f 90       	pop	r0
    13cc:	0f 90       	pop	r0
    13ce:	0f 90       	pop	r0
    13d0:	0f 90       	pop	r0
    13d2:	cf 91       	pop	r28
    13d4:	df 91       	pop	r29
    13d6:	08 95       	ret

000013d8 <disable_interrupts>:

void disable_interrupts(void)
{
    13d8:	df 93       	push	r29
    13da:	cf 93       	push	r28
    13dc:	cd b7       	in	r28, 0x3d	; 61
    13de:	de b7       	in	r29, 0x3e	; 62
    cli();
    13e0:	f8 94       	cli
    vm_state[current_vm].int_enabled = (bool_t)0;
    13e2:	80 91 0e 01 	lds	r24, 0x010E
    13e6:	28 2f       	mov	r18, r24
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	c9 01       	movw	r24, r18
    13ec:	88 0f       	add	r24, r24
    13ee:	99 1f       	adc	r25, r25
    13f0:	88 0f       	add	r24, r24
    13f2:	99 1f       	adc	r25, r25
    13f4:	88 0f       	add	r24, r24
    13f6:	99 1f       	adc	r25, r25
    13f8:	82 0f       	add	r24, r18
    13fa:	93 1f       	adc	r25, r19
    13fc:	fc 01       	movw	r30, r24
    13fe:	ef 5e       	subi	r30, 0xEF	; 239
    1400:	fe 4f       	sbci	r31, 0xFE	; 254
    1402:	10 82       	st	Z, r1
    sei();
    1404:	78 94       	sei
}
    1406:	cf 91       	pop	r28
    1408:	df 91       	pop	r29
    140a:	08 95       	ret

0000140c <enable_interrupts>:

void enable_interrupts(void)
{
    140c:	df 93       	push	r29
    140e:	cf 93       	push	r28
    1410:	cd b7       	in	r28, 0x3d	; 61
    1412:	de b7       	in	r29, 0x3e	; 62
    cli();
    1414:	f8 94       	cli
    vm_state[current_vm].int_enabled = (bool_t)1;
    1416:	80 91 0e 01 	lds	r24, 0x010E
    141a:	28 2f       	mov	r18, r24
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	c9 01       	movw	r24, r18
    1420:	88 0f       	add	r24, r24
    1422:	99 1f       	adc	r25, r25
    1424:	88 0f       	add	r24, r24
    1426:	99 1f       	adc	r25, r25
    1428:	88 0f       	add	r24, r24
    142a:	99 1f       	adc	r25, r25
    142c:	82 0f       	add	r24, r18
    142e:	93 1f       	adc	r25, r19
    1430:	fc 01       	movw	r30, r24
    1432:	ef 5e       	subi	r30, 0xEF	; 239
    1434:	fe 4f       	sbci	r31, 0xFE	; 254
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	80 83       	st	Z, r24
    if( vm_state[current_vm].int_fifo )_vsmp_vinterrupt();
    143a:	80 91 0e 01 	lds	r24, 0x010E
    143e:	28 2f       	mov	r18, r24
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	c9 01       	movw	r24, r18
    1444:	88 0f       	add	r24, r24
    1446:	99 1f       	adc	r25, r25
    1448:	88 0f       	add	r24, r24
    144a:	99 1f       	adc	r25, r25
    144c:	88 0f       	add	r24, r24
    144e:	99 1f       	adc	r25, r25
    1450:	82 0f       	add	r24, r18
    1452:	93 1f       	adc	r25, r19
    1454:	fc 01       	movw	r30, r24
    1456:	e1 5f       	subi	r30, 0xF1	; 241
    1458:	fe 4f       	sbci	r31, 0xFE	; 254
    145a:	80 81       	ld	r24, Z
    145c:	91 81       	ldd	r25, Z+1	; 0x01
    145e:	00 97       	sbiw	r24, 0x00	; 0
    1460:	19 f0       	breq	.+6      	; 0x1468 <enable_interrupts+0x5c>
    1462:	0e 94 8e 08 	call	0x111c	; 0x111c <_vsmp_vinterrupt>
    1466:	01 c0       	rjmp	.+2      	; 0x146a <enable_interrupts+0x5e>
    else sei();
    1468:	78 94       	sei
}
    146a:	cf 91       	pop	r28
    146c:	df 91       	pop	r29
    146e:	08 95       	ret

00001470 <current_core>:

core_id_t current_core(void)
{
    1470:	df 93       	push	r29
    1472:	cf 93       	push	r28
    1474:	0f 92       	push	r0
    1476:	cd b7       	in	r28, 0x3d	; 61
    1478:	de b7       	in	r29, 0x3e	; 62
    core_id_t ret;
    cli();
    147a:	f8 94       	cli
    ret = current_vm;
    147c:	80 91 0e 01 	lds	r24, 0x010E
    1480:	89 83       	std	Y+1, r24	; 0x01
    sei();
    1482:	78 94       	sei
    return ret;
    1484:	89 81       	ldd	r24, Y+1	; 0x01
}
    1486:	0f 90       	pop	r0
    1488:	cf 91       	pop	r28
    148a:	df 91       	pop	r29
    148c:	08 95       	ret

0000148e <proc_stack_init>:
#include"../../../include/bugurt.h"
stack_t * proc_stack_init(stack_t * sstart, code_t code, void * arg)
{
    148e:	df 93       	push	r29
    1490:	cf 93       	push	r28
    1492:	cd b7       	in	r28, 0x3d	; 61
    1494:	de b7       	in	r29, 0x3e	; 62
    1496:	2a 97       	sbiw	r28, 0x0a	; 10
    1498:	0f b6       	in	r0, 0x3f	; 63
    149a:	f8 94       	cli
    149c:	de bf       	out	0x3e, r29	; 62
    149e:	0f be       	out	0x3f, r0	; 63
    14a0:	cd bf       	out	0x3d, r28	; 61
    14a2:	9e 83       	std	Y+6, r25	; 0x06
    14a4:	8d 83       	std	Y+5, r24	; 0x05
    14a6:	78 87       	std	Y+8, r23	; 0x08
    14a8:	6f 83       	std	Y+7, r22	; 0x07
    14aa:	5a 87       	std	Y+10, r21	; 0x0a
    14ac:	49 87       	std	Y+9, r20	; 0x09
    stack_t * tos = (stack_t *)sstart;
    14ae:	8d 81       	ldd	r24, Y+5	; 0x05
    14b0:	9e 81       	ldd	r25, Y+6	; 0x06
    14b2:	9c 83       	std	Y+4, r25	; 0x04
    14b4:	8b 83       	std	Y+3, r24	; 0x03
    // return address
    unsigned short tmp = (unsigned short)code;
    14b6:	8f 81       	ldd	r24, Y+7	; 0x07
    14b8:	98 85       	ldd	r25, Y+8	; 0x08
    14ba:	9a 83       	std	Y+2, r25	; 0x02
    14bc:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (stack_t)(tmp&(unsigned short)0x00ff);
    14be:	89 81       	ldd	r24, Y+1	; 0x01
    14c0:	eb 81       	ldd	r30, Y+3	; 0x03
    14c2:	fc 81       	ldd	r31, Y+4	; 0x04
    14c4:	80 83       	st	Z, r24
    14c6:	8b 81       	ldd	r24, Y+3	; 0x03
    14c8:	9c 81       	ldd	r25, Y+4	; 0x04
    14ca:	01 97       	sbiw	r24, 0x01	; 1
    14cc:	9c 83       	std	Y+4, r25	; 0x04
    14ce:	8b 83       	std	Y+3, r24	; 0x03
    tmp>>=8;
    14d0:	89 81       	ldd	r24, Y+1	; 0x01
    14d2:	9a 81       	ldd	r25, Y+2	; 0x02
    14d4:	89 2f       	mov	r24, r25
    14d6:	99 27       	eor	r25, r25
    14d8:	9a 83       	std	Y+2, r25	; 0x02
    14da:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (stack_t)(tmp&(unsigned short)0x00ff);
    14dc:	89 81       	ldd	r24, Y+1	; 0x01
    14de:	eb 81       	ldd	r30, Y+3	; 0x03
    14e0:	fc 81       	ldd	r31, Y+4	; 0x04
    14e2:	80 83       	st	Z, r24
    14e4:	8b 81       	ldd	r24, Y+3	; 0x03
    14e6:	9c 81       	ldd	r25, Y+4	; 0x04
    14e8:	01 97       	sbiw	r24, 0x01	; 1
    14ea:	9c 83       	std	Y+4, r25	; 0x04
    14ec:	8b 83       	std	Y+3, r24	; 0x03

    // s
    *tos-- = 0x00;
    14ee:	eb 81       	ldd	r30, Y+3	; 0x03
    14f0:	fc 81       	ldd	r31, Y+4	; 0x04
    14f2:	10 82       	st	Z, r1
    14f4:	8b 81       	ldd	r24, Y+3	; 0x03
    14f6:	9c 81       	ldd	r25, Y+4	; 0x04
    14f8:	01 97       	sbiw	r24, 0x01	; 1
    14fa:	9c 83       	std	Y+4, r25	; 0x04
    14fc:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x00;// r1 must B 0
    14fe:	eb 81       	ldd	r30, Y+3	; 0x03
    1500:	fc 81       	ldd	r31, Y+4	; 0x04
    1502:	10 82       	st	Z, r1
    1504:	8b 81       	ldd	r24, Y+3	; 0x03
    1506:	9c 81       	ldd	r25, Y+4	; 0x04
    1508:	01 97       	sbiw	r24, 0x01	; 1
    150a:	9c 83       	std	Y+4, r25	; 0x04
    150c:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x02;// r2
    150e:	eb 81       	ldd	r30, Y+3	; 0x03
    1510:	fc 81       	ldd	r31, Y+4	; 0x04
    1512:	82 e0       	ldi	r24, 0x02	; 2
    1514:	80 83       	st	Z, r24
    1516:	8b 81       	ldd	r24, Y+3	; 0x03
    1518:	9c 81       	ldd	r25, Y+4	; 0x04
    151a:	01 97       	sbiw	r24, 0x01	; 1
    151c:	9c 83       	std	Y+4, r25	; 0x04
    151e:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x80;// SREG: enable interrupts
    1520:	eb 81       	ldd	r30, Y+3	; 0x03
    1522:	fc 81       	ldd	r31, Y+4	; 0x04
    1524:	80 e8       	ldi	r24, 0x80	; 128
    1526:	80 83       	st	Z, r24
    1528:	8b 81       	ldd	r24, Y+3	; 0x03
    152a:	9c 81       	ldd	r25, Y+4	; 0x04
    152c:	01 97       	sbiw	r24, 0x01	; 1
    152e:	9c 83       	std	Y+4, r25	; 0x04
    1530:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x03;
    1532:	eb 81       	ldd	r30, Y+3	; 0x03
    1534:	fc 81       	ldd	r31, Y+4	; 0x04
    1536:	83 e0       	ldi	r24, 0x03	; 3
    1538:	80 83       	st	Z, r24
    153a:	8b 81       	ldd	r24, Y+3	; 0x03
    153c:	9c 81       	ldd	r25, Y+4	; 0x04
    153e:	01 97       	sbiw	r24, 0x01	; 1
    1540:	9c 83       	std	Y+4, r25	; 0x04
    1542:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x04;
    1544:	eb 81       	ldd	r30, Y+3	; 0x03
    1546:	fc 81       	ldd	r31, Y+4	; 0x04
    1548:	84 e0       	ldi	r24, 0x04	; 4
    154a:	80 83       	st	Z, r24
    154c:	8b 81       	ldd	r24, Y+3	; 0x03
    154e:	9c 81       	ldd	r25, Y+4	; 0x04
    1550:	01 97       	sbiw	r24, 0x01	; 1
    1552:	9c 83       	std	Y+4, r25	; 0x04
    1554:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x05;
    1556:	eb 81       	ldd	r30, Y+3	; 0x03
    1558:	fc 81       	ldd	r31, Y+4	; 0x04
    155a:	85 e0       	ldi	r24, 0x05	; 5
    155c:	80 83       	st	Z, r24
    155e:	8b 81       	ldd	r24, Y+3	; 0x03
    1560:	9c 81       	ldd	r25, Y+4	; 0x04
    1562:	01 97       	sbiw	r24, 0x01	; 1
    1564:	9c 83       	std	Y+4, r25	; 0x04
    1566:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x06;
    1568:	eb 81       	ldd	r30, Y+3	; 0x03
    156a:	fc 81       	ldd	r31, Y+4	; 0x04
    156c:	86 e0       	ldi	r24, 0x06	; 6
    156e:	80 83       	st	Z, r24
    1570:	8b 81       	ldd	r24, Y+3	; 0x03
    1572:	9c 81       	ldd	r25, Y+4	; 0x04
    1574:	01 97       	sbiw	r24, 0x01	; 1
    1576:	9c 83       	std	Y+4, r25	; 0x04
    1578:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x07;
    157a:	eb 81       	ldd	r30, Y+3	; 0x03
    157c:	fc 81       	ldd	r31, Y+4	; 0x04
    157e:	87 e0       	ldi	r24, 0x07	; 7
    1580:	80 83       	st	Z, r24
    1582:	8b 81       	ldd	r24, Y+3	; 0x03
    1584:	9c 81       	ldd	r25, Y+4	; 0x04
    1586:	01 97       	sbiw	r24, 0x01	; 1
    1588:	9c 83       	std	Y+4, r25	; 0x04
    158a:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x08;
    158c:	eb 81       	ldd	r30, Y+3	; 0x03
    158e:	fc 81       	ldd	r31, Y+4	; 0x04
    1590:	88 e0       	ldi	r24, 0x08	; 8
    1592:	80 83       	st	Z, r24
    1594:	8b 81       	ldd	r24, Y+3	; 0x03
    1596:	9c 81       	ldd	r25, Y+4	; 0x04
    1598:	01 97       	sbiw	r24, 0x01	; 1
    159a:	9c 83       	std	Y+4, r25	; 0x04
    159c:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x09;
    159e:	eb 81       	ldd	r30, Y+3	; 0x03
    15a0:	fc 81       	ldd	r31, Y+4	; 0x04
    15a2:	89 e0       	ldi	r24, 0x09	; 9
    15a4:	80 83       	st	Z, r24
    15a6:	8b 81       	ldd	r24, Y+3	; 0x03
    15a8:	9c 81       	ldd	r25, Y+4	; 0x04
    15aa:	01 97       	sbiw	r24, 0x01	; 1
    15ac:	9c 83       	std	Y+4, r25	; 0x04
    15ae:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x10;
    15b0:	eb 81       	ldd	r30, Y+3	; 0x03
    15b2:	fc 81       	ldd	r31, Y+4	; 0x04
    15b4:	80 e1       	ldi	r24, 0x10	; 16
    15b6:	80 83       	st	Z, r24
    15b8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ba:	9c 81       	ldd	r25, Y+4	; 0x04
    15bc:	01 97       	sbiw	r24, 0x01	; 1
    15be:	9c 83       	std	Y+4, r25	; 0x04
    15c0:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x11;
    15c2:	eb 81       	ldd	r30, Y+3	; 0x03
    15c4:	fc 81       	ldd	r31, Y+4	; 0x04
    15c6:	81 e1       	ldi	r24, 0x11	; 17
    15c8:	80 83       	st	Z, r24
    15ca:	8b 81       	ldd	r24, Y+3	; 0x03
    15cc:	9c 81       	ldd	r25, Y+4	; 0x04
    15ce:	01 97       	sbiw	r24, 0x01	; 1
    15d0:	9c 83       	std	Y+4, r25	; 0x04
    15d2:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x12;
    15d4:	eb 81       	ldd	r30, Y+3	; 0x03
    15d6:	fc 81       	ldd	r31, Y+4	; 0x04
    15d8:	82 e1       	ldi	r24, 0x12	; 18
    15da:	80 83       	st	Z, r24
    15dc:	8b 81       	ldd	r24, Y+3	; 0x03
    15de:	9c 81       	ldd	r25, Y+4	; 0x04
    15e0:	01 97       	sbiw	r24, 0x01	; 1
    15e2:	9c 83       	std	Y+4, r25	; 0x04
    15e4:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x13;
    15e6:	eb 81       	ldd	r30, Y+3	; 0x03
    15e8:	fc 81       	ldd	r31, Y+4	; 0x04
    15ea:	83 e1       	ldi	r24, 0x13	; 19
    15ec:	80 83       	st	Z, r24
    15ee:	8b 81       	ldd	r24, Y+3	; 0x03
    15f0:	9c 81       	ldd	r25, Y+4	; 0x04
    15f2:	01 97       	sbiw	r24, 0x01	; 1
    15f4:	9c 83       	std	Y+4, r25	; 0x04
    15f6:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x14;
    15f8:	eb 81       	ldd	r30, Y+3	; 0x03
    15fa:	fc 81       	ldd	r31, Y+4	; 0x04
    15fc:	84 e1       	ldi	r24, 0x14	; 20
    15fe:	80 83       	st	Z, r24
    1600:	8b 81       	ldd	r24, Y+3	; 0x03
    1602:	9c 81       	ldd	r25, Y+4	; 0x04
    1604:	01 97       	sbiw	r24, 0x01	; 1
    1606:	9c 83       	std	Y+4, r25	; 0x04
    1608:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x15;
    160a:	eb 81       	ldd	r30, Y+3	; 0x03
    160c:	fc 81       	ldd	r31, Y+4	; 0x04
    160e:	85 e1       	ldi	r24, 0x15	; 21
    1610:	80 83       	st	Z, r24
    1612:	8b 81       	ldd	r24, Y+3	; 0x03
    1614:	9c 81       	ldd	r25, Y+4	; 0x04
    1616:	01 97       	sbiw	r24, 0x01	; 1
    1618:	9c 83       	std	Y+4, r25	; 0x04
    161a:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x16;
    161c:	eb 81       	ldd	r30, Y+3	; 0x03
    161e:	fc 81       	ldd	r31, Y+4	; 0x04
    1620:	86 e1       	ldi	r24, 0x16	; 22
    1622:	80 83       	st	Z, r24
    1624:	8b 81       	ldd	r24, Y+3	; 0x03
    1626:	9c 81       	ldd	r25, Y+4	; 0x04
    1628:	01 97       	sbiw	r24, 0x01	; 1
    162a:	9c 83       	std	Y+4, r25	; 0x04
    162c:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x17;
    162e:	eb 81       	ldd	r30, Y+3	; 0x03
    1630:	fc 81       	ldd	r31, Y+4	; 0x04
    1632:	87 e1       	ldi	r24, 0x17	; 23
    1634:	80 83       	st	Z, r24
    1636:	8b 81       	ldd	r24, Y+3	; 0x03
    1638:	9c 81       	ldd	r25, Y+4	; 0x04
    163a:	01 97       	sbiw	r24, 0x01	; 1
    163c:	9c 83       	std	Y+4, r25	; 0x04
    163e:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x18;
    1640:	eb 81       	ldd	r30, Y+3	; 0x03
    1642:	fc 81       	ldd	r31, Y+4	; 0x04
    1644:	88 e1       	ldi	r24, 0x18	; 24
    1646:	80 83       	st	Z, r24
    1648:	8b 81       	ldd	r24, Y+3	; 0x03
    164a:	9c 81       	ldd	r25, Y+4	; 0x04
    164c:	01 97       	sbiw	r24, 0x01	; 1
    164e:	9c 83       	std	Y+4, r25	; 0x04
    1650:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x19;
    1652:	eb 81       	ldd	r30, Y+3	; 0x03
    1654:	fc 81       	ldd	r31, Y+4	; 0x04
    1656:	89 e1       	ldi	r24, 0x19	; 25
    1658:	80 83       	st	Z, r24
    165a:	8b 81       	ldd	r24, Y+3	; 0x03
    165c:	9c 81       	ldd	r25, Y+4	; 0x04
    165e:	01 97       	sbiw	r24, 0x01	; 1
    1660:	9c 83       	std	Y+4, r25	; 0x04
    1662:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x20;
    1664:	eb 81       	ldd	r30, Y+3	; 0x03
    1666:	fc 81       	ldd	r31, Y+4	; 0x04
    1668:	80 e2       	ldi	r24, 0x20	; 32
    166a:	80 83       	st	Z, r24
    166c:	8b 81       	ldd	r24, Y+3	; 0x03
    166e:	9c 81       	ldd	r25, Y+4	; 0x04
    1670:	01 97       	sbiw	r24, 0x01	; 1
    1672:	9c 83       	std	Y+4, r25	; 0x04
    1674:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x21;
    1676:	eb 81       	ldd	r30, Y+3	; 0x03
    1678:	fc 81       	ldd	r31, Y+4	; 0x04
    167a:	81 e2       	ldi	r24, 0x21	; 33
    167c:	80 83       	st	Z, r24
    167e:	8b 81       	ldd	r24, Y+3	; 0x03
    1680:	9c 81       	ldd	r25, Y+4	; 0x04
    1682:	01 97       	sbiw	r24, 0x01	; 1
    1684:	9c 83       	std	Y+4, r25	; 0x04
    1686:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x22;
    1688:	eb 81       	ldd	r30, Y+3	; 0x03
    168a:	fc 81       	ldd	r31, Y+4	; 0x04
    168c:	82 e2       	ldi	r24, 0x22	; 34
    168e:	80 83       	st	Z, r24
    1690:	8b 81       	ldd	r24, Y+3	; 0x03
    1692:	9c 81       	ldd	r25, Y+4	; 0x04
    1694:	01 97       	sbiw	r24, 0x01	; 1
    1696:	9c 83       	std	Y+4, r25	; 0x04
    1698:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x23;
    169a:	eb 81       	ldd	r30, Y+3	; 0x03
    169c:	fc 81       	ldd	r31, Y+4	; 0x04
    169e:	83 e2       	ldi	r24, 0x23	; 35
    16a0:	80 83       	st	Z, r24
    16a2:	8b 81       	ldd	r24, Y+3	; 0x03
    16a4:	9c 81       	ldd	r25, Y+4	; 0x04
    16a6:	01 97       	sbiw	r24, 0x01	; 1
    16a8:	9c 83       	std	Y+4, r25	; 0x04
    16aa:	8b 83       	std	Y+3, r24	; 0x03

    tmp = (unsigned short)arg;
    16ac:	89 85       	ldd	r24, Y+9	; 0x09
    16ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    16b0:	9a 83       	std	Y+2, r25	; 0x02
    16b2:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (stack_t)(tmp&(unsigned short)0x00ff); // r24 LSByte of arg
    16b4:	89 81       	ldd	r24, Y+1	; 0x01
    16b6:	eb 81       	ldd	r30, Y+3	; 0x03
    16b8:	fc 81       	ldd	r31, Y+4	; 0x04
    16ba:	80 83       	st	Z, r24
    16bc:	8b 81       	ldd	r24, Y+3	; 0x03
    16be:	9c 81       	ldd	r25, Y+4	; 0x04
    16c0:	01 97       	sbiw	r24, 0x01	; 1
    16c2:	9c 83       	std	Y+4, r25	; 0x04
    16c4:	8b 83       	std	Y+3, r24	; 0x03
    tmp>>=8;
    16c6:	89 81       	ldd	r24, Y+1	; 0x01
    16c8:	9a 81       	ldd	r25, Y+2	; 0x02
    16ca:	89 2f       	mov	r24, r25
    16cc:	99 27       	eor	r25, r25
    16ce:	9a 83       	std	Y+2, r25	; 0x02
    16d0:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (stack_t)(tmp&(unsigned short)0x00ff); // r25 MSByte of arg
    16d2:	89 81       	ldd	r24, Y+1	; 0x01
    16d4:	eb 81       	ldd	r30, Y+3	; 0x03
    16d6:	fc 81       	ldd	r31, Y+4	; 0x04
    16d8:	80 83       	st	Z, r24
    16da:	8b 81       	ldd	r24, Y+3	; 0x03
    16dc:	9c 81       	ldd	r25, Y+4	; 0x04
    16de:	01 97       	sbiw	r24, 0x01	; 1
    16e0:	9c 83       	std	Y+4, r25	; 0x04
    16e2:	8b 83       	std	Y+3, r24	; 0x03

    *tos-- = 0x26;
    16e4:	eb 81       	ldd	r30, Y+3	; 0x03
    16e6:	fc 81       	ldd	r31, Y+4	; 0x04
    16e8:	86 e2       	ldi	r24, 0x26	; 38
    16ea:	80 83       	st	Z, r24
    16ec:	8b 81       	ldd	r24, Y+3	; 0x03
    16ee:	9c 81       	ldd	r25, Y+4	; 0x04
    16f0:	01 97       	sbiw	r24, 0x01	; 1
    16f2:	9c 83       	std	Y+4, r25	; 0x04
    16f4:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x27;
    16f6:	eb 81       	ldd	r30, Y+3	; 0x03
    16f8:	fc 81       	ldd	r31, Y+4	; 0x04
    16fa:	87 e2       	ldi	r24, 0x27	; 39
    16fc:	80 83       	st	Z, r24
    16fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1700:	9c 81       	ldd	r25, Y+4	; 0x04
    1702:	01 97       	sbiw	r24, 0x01	; 1
    1704:	9c 83       	std	Y+4, r25	; 0x04
    1706:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x28;
    1708:	eb 81       	ldd	r30, Y+3	; 0x03
    170a:	fc 81       	ldd	r31, Y+4	; 0x04
    170c:	88 e2       	ldi	r24, 0x28	; 40
    170e:	80 83       	st	Z, r24
    1710:	8b 81       	ldd	r24, Y+3	; 0x03
    1712:	9c 81       	ldd	r25, Y+4	; 0x04
    1714:	01 97       	sbiw	r24, 0x01	; 1
    1716:	9c 83       	std	Y+4, r25	; 0x04
    1718:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x29;
    171a:	eb 81       	ldd	r30, Y+3	; 0x03
    171c:	fc 81       	ldd	r31, Y+4	; 0x04
    171e:	89 e2       	ldi	r24, 0x29	; 41
    1720:	80 83       	st	Z, r24
    1722:	8b 81       	ldd	r24, Y+3	; 0x03
    1724:	9c 81       	ldd	r25, Y+4	; 0x04
    1726:	01 97       	sbiw	r24, 0x01	; 1
    1728:	9c 83       	std	Y+4, r25	; 0x04
    172a:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x30;
    172c:	eb 81       	ldd	r30, Y+3	; 0x03
    172e:	fc 81       	ldd	r31, Y+4	; 0x04
    1730:	80 e3       	ldi	r24, 0x30	; 48
    1732:	80 83       	st	Z, r24
    1734:	8b 81       	ldd	r24, Y+3	; 0x03
    1736:	9c 81       	ldd	r25, Y+4	; 0x04
    1738:	01 97       	sbiw	r24, 0x01	; 1
    173a:	9c 83       	std	Y+4, r25	; 0x04
    173c:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x31;
    173e:	eb 81       	ldd	r30, Y+3	; 0x03
    1740:	fc 81       	ldd	r31, Y+4	; 0x04
    1742:	81 e3       	ldi	r24, 0x31	; 49
    1744:	80 83       	st	Z, r24
    1746:	8b 81       	ldd	r24, Y+3	; 0x03
    1748:	9c 81       	ldd	r25, Y+4	; 0x04
    174a:	01 97       	sbiw	r24, 0x01	; 1
    174c:	9c 83       	std	Y+4, r25	; 0x04
    174e:	8b 83       	std	Y+3, r24	; 0x03
#ifdef RAMPZ
    *tos-- = 0xff;
#endif
    return tos;
    1750:	8b 81       	ldd	r24, Y+3	; 0x03
    1752:	9c 81       	ldd	r25, Y+4	; 0x04
}
    1754:	2a 96       	adiw	r28, 0x0a	; 10
    1756:	0f b6       	in	r0, 0x3f	; 63
    1758:	f8 94       	cli
    175a:	de bf       	out	0x3e, r29	; 62
    175c:	0f be       	out	0x3f, r0	; 63
    175e:	cd bf       	out	0x3d, r28	; 61
    1760:	cf 91       	pop	r28
    1762:	df 91       	pop	r29
    1764:	08 95       	ret

00001766 <_enter_crit_sec>:
*****************************************************************************************/
#include "../include/bugurt.h"
#ifdef CONFIG_MP
// блокировку захватывать не надо - все изменения происходят локально!
core_id_t _enter_crit_sec(void)
{
    1766:	df 93       	push	r29
    1768:	cf 93       	push	r28
    176a:	0f 92       	push	r0
    176c:	cd b7       	in	r28, 0x3d	; 61
    176e:	de b7       	in	r29, 0x3e	; 62
    core_id_t ret;
    disable_interrupts();
    1770:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <disable_interrupts>
    ret = current_core();
    1774:	0e 94 38 0a 	call	0x1470	; 0x1470 <current_core>
    1778:	89 83       	std	Y+1, r24	; 0x01
    kernel.sched[ret].nested_crit_sec++;
    177a:	89 81       	ldd	r24, Y+1	; 0x01
    177c:	48 2f       	mov	r20, r24
    177e:	50 e0       	ldi	r21, 0x00	; 0
    1780:	8b e2       	ldi	r24, 0x2B	; 43
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	9c 01       	movw	r18, r24
    1786:	42 9f       	mul	r20, r18
    1788:	c0 01       	movw	r24, r0
    178a:	43 9f       	mul	r20, r19
    178c:	90 0d       	add	r25, r0
    178e:	52 9f       	mul	r21, r18
    1790:	90 0d       	add	r25, r0
    1792:	11 24       	eor	r1, r1
    1794:	fc 01       	movw	r30, r24
    1796:	ef 50       	subi	r30, 0x0F	; 15
    1798:	fd 4f       	sbci	r31, 0xFD	; 253
    179a:	80 81       	ld	r24, Z
    179c:	91 81       	ldd	r25, Z+1	; 0x01
    179e:	9c 01       	movw	r18, r24
    17a0:	2f 5f       	subi	r18, 0xFF	; 255
    17a2:	3f 4f       	sbci	r19, 0xFF	; 255
    17a4:	8b e2       	ldi	r24, 0x2B	; 43
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	bc 01       	movw	r22, r24
    17aa:	46 9f       	mul	r20, r22
    17ac:	c0 01       	movw	r24, r0
    17ae:	47 9f       	mul	r20, r23
    17b0:	90 0d       	add	r25, r0
    17b2:	56 9f       	mul	r21, r22
    17b4:	90 0d       	add	r25, r0
    17b6:	11 24       	eor	r1, r1
    17b8:	fc 01       	movw	r30, r24
    17ba:	ef 50       	subi	r30, 0x0F	; 15
    17bc:	fd 4f       	sbci	r31, 0xFD	; 253
    17be:	31 83       	std	Z+1, r19	; 0x01
    17c0:	20 83       	st	Z, r18
    return ret;
    17c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    17c4:	0f 90       	pop	r0
    17c6:	cf 91       	pop	r28
    17c8:	df 91       	pop	r29
    17ca:	08 95       	ret

000017cc <_exit_crit_sec>:

void _exit_crit_sec(core_id_t core)
{
    17cc:	df 93       	push	r29
    17ce:	cf 93       	push	r28
    17d0:	0f 92       	push	r0
    17d2:	cd b7       	in	r28, 0x3d	; 61
    17d4:	de b7       	in	r29, 0x3e	; 62
    17d6:	89 83       	std	Y+1, r24	; 0x01
    if( kernel.sched[core].nested_crit_sec != (count_t)0 )kernel.sched[core].nested_crit_sec--;
    17d8:	89 81       	ldd	r24, Y+1	; 0x01
    17da:	28 2f       	mov	r18, r24
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	8b e2       	ldi	r24, 0x2B	; 43
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	ac 01       	movw	r20, r24
    17e4:	24 9f       	mul	r18, r20
    17e6:	c0 01       	movw	r24, r0
    17e8:	25 9f       	mul	r18, r21
    17ea:	90 0d       	add	r25, r0
    17ec:	34 9f       	mul	r19, r20
    17ee:	90 0d       	add	r25, r0
    17f0:	11 24       	eor	r1, r1
    17f2:	fc 01       	movw	r30, r24
    17f4:	ef 50       	subi	r30, 0x0F	; 15
    17f6:	fd 4f       	sbci	r31, 0xFD	; 253
    17f8:	80 81       	ld	r24, Z
    17fa:	91 81       	ldd	r25, Z+1	; 0x01
    17fc:	00 97       	sbiw	r24, 0x00	; 0
    17fe:	21 f1       	breq	.+72     	; 0x1848 <_exit_crit_sec+0x7c>
    1800:	89 81       	ldd	r24, Y+1	; 0x01
    1802:	48 2f       	mov	r20, r24
    1804:	50 e0       	ldi	r21, 0x00	; 0
    1806:	8b e2       	ldi	r24, 0x2B	; 43
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	bc 01       	movw	r22, r24
    180c:	46 9f       	mul	r20, r22
    180e:	c0 01       	movw	r24, r0
    1810:	47 9f       	mul	r20, r23
    1812:	90 0d       	add	r25, r0
    1814:	56 9f       	mul	r21, r22
    1816:	90 0d       	add	r25, r0
    1818:	11 24       	eor	r1, r1
    181a:	fc 01       	movw	r30, r24
    181c:	ef 50       	subi	r30, 0x0F	; 15
    181e:	fd 4f       	sbci	r31, 0xFD	; 253
    1820:	80 81       	ld	r24, Z
    1822:	91 81       	ldd	r25, Z+1	; 0x01
    1824:	9c 01       	movw	r18, r24
    1826:	21 50       	subi	r18, 0x01	; 1
    1828:	30 40       	sbci	r19, 0x00	; 0
    182a:	8b e2       	ldi	r24, 0x2B	; 43
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	bc 01       	movw	r22, r24
    1830:	46 9f       	mul	r20, r22
    1832:	c0 01       	movw	r24, r0
    1834:	47 9f       	mul	r20, r23
    1836:	90 0d       	add	r25, r0
    1838:	56 9f       	mul	r21, r22
    183a:	90 0d       	add	r25, r0
    183c:	11 24       	eor	r1, r1
    183e:	fc 01       	movw	r30, r24
    1840:	ef 50       	subi	r30, 0x0F	; 15
    1842:	fd 4f       	sbci	r31, 0xFD	; 253
    1844:	31 83       	std	Z+1, r19	; 0x01
    1846:	20 83       	st	Z, r18
    if( kernel.sched[core].nested_crit_sec == (count_t)0 )enable_interrupts();
    1848:	89 81       	ldd	r24, Y+1	; 0x01
    184a:	28 2f       	mov	r18, r24
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	8b e2       	ldi	r24, 0x2B	; 43
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	ac 01       	movw	r20, r24
    1854:	24 9f       	mul	r18, r20
    1856:	c0 01       	movw	r24, r0
    1858:	25 9f       	mul	r18, r21
    185a:	90 0d       	add	r25, r0
    185c:	34 9f       	mul	r19, r20
    185e:	90 0d       	add	r25, r0
    1860:	11 24       	eor	r1, r1
    1862:	fc 01       	movw	r30, r24
    1864:	ef 50       	subi	r30, 0x0F	; 15
    1866:	fd 4f       	sbci	r31, 0xFD	; 253
    1868:	80 81       	ld	r24, Z
    186a:	91 81       	ldd	r25, Z+1	; 0x01
    186c:	00 97       	sbiw	r24, 0x00	; 0
    186e:	11 f4       	brne	.+4      	; 0x1874 <_exit_crit_sec+0xa8>
    1870:	0e 94 06 0a 	call	0x140c	; 0x140c <enable_interrupts>
}
    1874:	0f 90       	pop	r0
    1876:	cf 91       	pop	r28
    1878:	df 91       	pop	r29
    187a:	08 95       	ret

0000187c <index_search>:
*                           http://www.0chan.ru/r/res/9996.html                          *
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
prio_t index_search(index_t index)
{
    187c:	df 93       	push	r29
    187e:	cf 93       	push	r28
    1880:	00 d0       	rcall	.+0      	; 0x1882 <index_search+0x6>
    1882:	00 d0       	rcall	.+0      	; 0x1884 <index_search+0x8>
    1884:	00 d0       	rcall	.+0      	; 0x1886 <index_search+0xa>
    1886:	cd b7       	in	r28, 0x3d	; 61
    1888:	de b7       	in	r29, 0x3e	; 62
    188a:	8e 83       	std	Y+6, r24	; 0x06
    prio_t prio = (prio_t)0;
    188c:	1d 82       	std	Y+5, r1	; 0x05
        но, т.к. BITS_IN_INDEX_T фиксировано для данной конфигурации,
        то получается время выполнения - O(1), ВСЕГДА.

        И да, предсказуемость + переносимость > быстродействие.
        */
    index_t upper = ~(index_t)0, lower = ~(index_t)0, middle;
    188e:	8f ef       	ldi	r24, 0xFF	; 255
    1890:	8c 83       	std	Y+4, r24	; 0x04
    1892:	8f ef       	ldi	r24, 0xFF	; 255
    1894:	8b 83       	std	Y+3, r24	; 0x03
    prio_t step = (prio_t)BITS_IN_INDEX_T;
    1896:	88 e0       	ldi	r24, 0x08	; 8
    1898:	89 83       	std	Y+1, r24	; 0x01
    189a:	22 c0       	rjmp	.+68     	; 0x18e0 <index_search+0x64>
    while( step )
    {
        step>>=1; // делим шаг пополам
    189c:	89 81       	ldd	r24, Y+1	; 0x01
    189e:	86 95       	lsr	r24
    18a0:	89 83       	std	Y+1, r24	; 0x01
        middle = lower>>step;
    18a2:	8b 81       	ldd	r24, Y+3	; 0x03
    18a4:	28 2f       	mov	r18, r24
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	89 81       	ldd	r24, Y+1	; 0x01
    18aa:	88 2f       	mov	r24, r24
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	a9 01       	movw	r20, r18
    18b0:	02 c0       	rjmp	.+4      	; 0x18b6 <index_search+0x3a>
    18b2:	55 95       	asr	r21
    18b4:	47 95       	ror	r20
    18b6:	8a 95       	dec	r24
    18b8:	e2 f7       	brpl	.-8      	; 0x18b2 <index_search+0x36>
    18ba:	ca 01       	movw	r24, r20
    18bc:	8a 83       	std	Y+2, r24	; 0x02
        if( index & upper & middle )
    18be:	9e 81       	ldd	r25, Y+6	; 0x06
    18c0:	8c 81       	ldd	r24, Y+4	; 0x04
    18c2:	98 23       	and	r25, r24
    18c4:	8a 81       	ldd	r24, Y+2	; 0x02
    18c6:	89 23       	and	r24, r25
    18c8:	88 23       	and	r24, r24
    18ca:	19 f0       	breq	.+6      	; 0x18d2 <index_search+0x56>
        {
            lower = middle;
    18cc:	8a 81       	ldd	r24, Y+2	; 0x02
    18ce:	8b 83       	std	Y+3, r24	; 0x03
    18d0:	07 c0       	rjmp	.+14     	; 0x18e0 <index_search+0x64>
        }
        else
        {
            upper = ~middle;
    18d2:	8a 81       	ldd	r24, Y+2	; 0x02
    18d4:	80 95       	com	r24
    18d6:	8c 83       	std	Y+4, r24	; 0x04
            prio += step;
    18d8:	9d 81       	ldd	r25, Y+5	; 0x05
    18da:	89 81       	ldd	r24, Y+1	; 0x01
    18dc:	89 0f       	add	r24, r25
    18de:	8d 83       	std	Y+5, r24	; 0x05

        И да, предсказуемость + переносимость > быстродействие.
        */
    index_t upper = ~(index_t)0, lower = ~(index_t)0, middle;
    prio_t step = (prio_t)BITS_IN_INDEX_T;
    while( step )
    18e0:	89 81       	ldd	r24, Y+1	; 0x01
    18e2:	88 23       	and	r24, r24
    18e4:	d9 f6       	brne	.-74     	; 0x189c <index_search+0x20>
        if ( mask & index )break;
        prio++;
        mask<<=1;
    }
#endif
    return prio;
    18e6:	8d 81       	ldd	r24, Y+5	; 0x05
}
    18e8:	26 96       	adiw	r28, 0x06	; 6
    18ea:	0f b6       	in	r0, 0x3f	; 63
    18ec:	f8 94       	cli
    18ee:	de bf       	out	0x3e, r29	; 62
    18f0:	0f be       	out	0x3f, r0	; 63
    18f2:	cd bf       	out	0x3d, r28	; 61
    18f4:	cf 91       	pop	r28
    18f6:	df 91       	pop	r29
    18f8:	08 95       	ret

000018fa <_ipc_wait>:
*                           http://www.0chan.ru/r/res/9996.html                          *
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
void _ipc_wait( void * ipc_pointer )
{
    18fa:	df 93       	push	r29
    18fc:	cf 93       	push	r28
    18fe:	00 d0       	rcall	.+0      	; 0x1900 <_ipc_wait+0x6>
    1900:	00 d0       	rcall	.+0      	; 0x1902 <_ipc_wait+0x8>
    1902:	cd b7       	in	r28, 0x3d	; 61
    1904:	de b7       	in	r29, 0x3e	; 62
    1906:	9c 83       	std	Y+4, r25	; 0x04
    1908:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc;
    proc = current_proc();
    190a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <current_proc>
    190e:	9a 83       	std	Y+2, r25	; 0x02
    1910:	89 83       	std	Y+1, r24	; 0x01
    SPIN_LOCK( proc );
    1912:	89 81       	ldd	r24, Y+1	; 0x01
    1914:	9a 81       	ldd	r25, Y+2	; 0x02
    1916:	83 96       	adiw	r24, 0x23	; 35
    1918:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    // Останавливаем процесс
    proc->flags |= PROC_FLG_IPCW;
    191c:	e9 81       	ldd	r30, Y+1	; 0x01
    191e:	fa 81       	ldd	r31, Y+2	; 0x02
    1920:	87 81       	ldd	r24, Z+7	; 0x07
    1922:	90 85       	ldd	r25, Z+8	; 0x08
    1924:	80 64       	ori	r24, 0x40	; 64
    1926:	e9 81       	ldd	r30, Y+1	; 0x01
    1928:	fa 81       	ldd	r31, Y+2	; 0x02
    192a:	90 87       	std	Z+8, r25	; 0x08
    192c:	87 83       	std	Z+7, r24	; 0x07
    proc->buf = ipc_pointer;
    192e:	e9 81       	ldd	r30, Y+1	; 0x01
    1930:	fa 81       	ldd	r31, Y+2	; 0x02
    1932:	8b 81       	ldd	r24, Y+3	; 0x03
    1934:	9c 81       	ldd	r25, Y+4	; 0x04
    1936:	90 a3       	std	Z+32, r25	; 0x20
    1938:	87 8f       	std	Z+31, r24	; 0x1f
    _proc_stop_( proc );
    193a:	89 81       	ldd	r24, Y+1	; 0x01
    193c:	9a 81       	ldd	r25, Y+2	; 0x02
    193e:	0e 94 a8 13 	call	0x2750	; 0x2750 <_proc_stop_>
    RESCHED_PROC( proc );
    1942:	e9 81       	ldd	r30, Y+1	; 0x01
    1944:	fa 81       	ldd	r31, Y+2	; 0x02
    1946:	81 a1       	ldd	r24, Z+33	; 0x21
    1948:	0e 94 b7 01 	call	0x36e	; 0x36e <resched>

    SPIN_UNLOCK( proc );
    194c:	89 81       	ldd	r24, Y+1	; 0x01
    194e:	9a 81       	ldd	r25, Y+2	; 0x02
    1950:	83 96       	adiw	r24, 0x23	; 35
    1952:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
}
    1956:	0f 90       	pop	r0
    1958:	0f 90       	pop	r0
    195a:	0f 90       	pop	r0
    195c:	0f 90       	pop	r0
    195e:	cf 91       	pop	r28
    1960:	df 91       	pop	r29
    1962:	08 95       	ret

00001964 <ipc_send_isr>:

bool_t ipc_send_isr( proc_t * proc, ipc_data_t data )
{
    1964:	df 93       	push	r29
    1966:	cf 93       	push	r28
    1968:	00 d0       	rcall	.+0      	; 0x196a <ipc_send_isr+0x6>
    196a:	00 d0       	rcall	.+0      	; 0x196c <ipc_send_isr+0x8>
    196c:	0f 92       	push	r0
    196e:	cd b7       	in	r28, 0x3d	; 61
    1970:	de b7       	in	r29, 0x3e	; 62
    1972:	9b 83       	std	Y+3, r25	; 0x03
    1974:	8a 83       	std	Y+2, r24	; 0x02
    1976:	7d 83       	std	Y+5, r23	; 0x05
    1978:	6c 83       	std	Y+4, r22	; 0x04
    bool_t ret = (bool_t)0;
    197a:	19 82       	std	Y+1, r1	; 0x01
    SPIN_LOCK( proc );
    197c:	8a 81       	ldd	r24, Y+2	; 0x02
    197e:	9b 81       	ldd	r25, Y+3	; 0x03
    1980:	83 96       	adiw	r24, 0x23	; 35
    1982:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    if( proc->flags & PROC_FLG_IPCW )
    1986:	ea 81       	ldd	r30, Y+2	; 0x02
    1988:	fb 81       	ldd	r31, Y+3	; 0x03
    198a:	87 81       	ldd	r24, Z+7	; 0x07
    198c:	90 85       	ldd	r25, Z+8	; 0x08
    198e:	80 74       	andi	r24, 0x40	; 64
    1990:	90 70       	andi	r25, 0x00	; 0
    1992:	00 97       	sbiw	r24, 0x00	; 0
    1994:	91 f1       	breq	.+100    	; 0x19fa <ipc_send_isr+0x96>
    {
        proc->flags &= ~PROC_FLG_IPCW;
    1996:	ea 81       	ldd	r30, Y+2	; 0x02
    1998:	fb 81       	ldd	r31, Y+3	; 0x03
    199a:	87 81       	ldd	r24, Z+7	; 0x07
    199c:	90 85       	ldd	r25, Z+8	; 0x08
    199e:	8f 7b       	andi	r24, 0xBF	; 191
    19a0:	ea 81       	ldd	r30, Y+2	; 0x02
    19a2:	fb 81       	ldd	r31, Y+3	; 0x03
    19a4:	90 87       	std	Z+8, r25	; 0x08
    19a6:	87 83       	std	Z+7, r24	; 0x07
        ///Обработка флага останова целевого процесса
        if(  PROC_PRE_STOP_TEST(proc)  )
    19a8:	ea 81       	ldd	r30, Y+2	; 0x02
    19aa:	fb 81       	ldd	r31, Y+3	; 0x03
    19ac:	87 81       	ldd	r24, Z+7	; 0x07
    19ae:	90 85       	ldd	r25, Z+8	; 0x08
    19b0:	80 78       	andi	r24, 0x80	; 128
    19b2:	90 70       	andi	r25, 0x00	; 0
    19b4:	00 97       	sbiw	r24, 0x00	; 0
    19b6:	91 f0       	breq	.+36     	; 0x19dc <ipc_send_isr+0x78>
    19b8:	ea 81       	ldd	r30, Y+2	; 0x02
    19ba:	fb 81       	ldd	r31, Y+3	; 0x03
    19bc:	87 81       	ldd	r24, Z+7	; 0x07
    19be:	90 85       	ldd	r25, Z+8	; 0x08
    19c0:	8c 70       	andi	r24, 0x0C	; 12
    19c2:	90 70       	andi	r25, 0x00	; 0
    19c4:	00 97       	sbiw	r24, 0x00	; 0
    19c6:	51 f4       	brne	.+20     	; 0x19dc <ipc_send_isr+0x78>
            Если был запрошен останов целевого процесса,
            и целевой процесс не удерживает общие ресурсы,
            то мы не будем возобновлять его работу
            и передавать ему информацию.
            */
            proc->flags &= ~PROC_FLG_PRE_STOP_MASK;
    19c8:	ea 81       	ldd	r30, Y+2	; 0x02
    19ca:	fb 81       	ldd	r31, Y+3	; 0x03
    19cc:	87 81       	ldd	r24, Z+7	; 0x07
    19ce:	90 85       	ldd	r25, Z+8	; 0x08
    19d0:	8d 77       	andi	r24, 0x7D	; 125
    19d2:	ea 81       	ldd	r30, Y+2	; 0x02
    19d4:	fb 81       	ldd	r31, Y+3	; 0x03
    19d6:	90 87       	std	Z+8, r25	; 0x08
    19d8:	87 83       	std	Z+7, r24	; 0x07
    19da:	0f c0       	rjmp	.+30     	; 0x19fa <ipc_send_isr+0x96>
            goto end;
        }
        ret = (bool_t)1; // информация будет передана
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	89 83       	std	Y+1, r24	; 0x01
        *(ipc_data_t *)proc->buf = data;
    19e0:	ea 81       	ldd	r30, Y+2	; 0x02
    19e2:	fb 81       	ldd	r31, Y+3	; 0x03
    19e4:	87 8d       	ldd	r24, Z+31	; 0x1f
    19e6:	90 a1       	ldd	r25, Z+32	; 0x20
    19e8:	fc 01       	movw	r30, r24
    19ea:	8c 81       	ldd	r24, Y+4	; 0x04
    19ec:	9d 81       	ldd	r25, Y+5	; 0x05
    19ee:	91 83       	std	Z+1, r25	; 0x01
    19f0:	80 83       	st	Z, r24
        _proc_run( proc );
    19f2:	8a 81       	ldd	r24, Y+2	; 0x02
    19f4:	9b 81       	ldd	r25, Y+3	; 0x03
    19f6:	0e 94 df 12 	call	0x25be	; 0x25be <_proc_run>
    }
end:
    SPIN_UNLOCK( proc );
    19fa:	8a 81       	ldd	r24, Y+2	; 0x02
    19fc:	9b 81       	ldd	r25, Y+3	; 0x03
    19fe:	83 96       	adiw	r24, 0x23	; 35
    1a00:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
    return ret;
    1a04:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a06:	0f 90       	pop	r0
    1a08:	0f 90       	pop	r0
    1a0a:	0f 90       	pop	r0
    1a0c:	0f 90       	pop	r0
    1a0e:	0f 90       	pop	r0
    1a10:	cf 91       	pop	r28
    1a12:	df 91       	pop	r29
    1a14:	08 95       	ret

00001a16 <_ipc_exchange>:

bool_t _ipc_exchange( proc_t * proc, ipc_data_t send, ipc_data_t * receive )
{
    1a16:	df 93       	push	r29
    1a18:	cf 93       	push	r28
    1a1a:	cd b7       	in	r28, 0x3d	; 61
    1a1c:	de b7       	in	r29, 0x3e	; 62
    1a1e:	27 97       	sbiw	r28, 0x07	; 7
    1a20:	0f b6       	in	r0, 0x3f	; 63
    1a22:	f8 94       	cli
    1a24:	de bf       	out	0x3e, r29	; 62
    1a26:	0f be       	out	0x3f, r0	; 63
    1a28:	cd bf       	out	0x3d, r28	; 61
    1a2a:	9b 83       	std	Y+3, r25	; 0x03
    1a2c:	8a 83       	std	Y+2, r24	; 0x02
    1a2e:	7d 83       	std	Y+5, r23	; 0x05
    1a30:	6c 83       	std	Y+4, r22	; 0x04
    1a32:	5f 83       	std	Y+7, r21	; 0x07
    1a34:	4e 83       	std	Y+6, r20	; 0x06
    bool_t ret = (bool_t)0;
    1a36:	19 82       	std	Y+1, r1	; 0x01
    SPIN_LOCK( proc );
    1a38:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3a:	9b 81       	ldd	r25, Y+3	; 0x03
    1a3c:	83 96       	adiw	r24, 0x23	; 35
    1a3e:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    if( proc->flags & PROC_FLG_IPCW )
    1a42:	ea 81       	ldd	r30, Y+2	; 0x02
    1a44:	fb 81       	ldd	r31, Y+3	; 0x03
    1a46:	87 81       	ldd	r24, Z+7	; 0x07
    1a48:	90 85       	ldd	r25, Z+8	; 0x08
    1a4a:	80 74       	andi	r24, 0x40	; 64
    1a4c:	90 70       	andi	r25, 0x00	; 0
    1a4e:	00 97       	sbiw	r24, 0x00	; 0
    1a50:	b1 f1       	breq	.+108    	; 0x1abe <_ipc_exchange+0xa8>
    {
        proc->flags &= ~PROC_FLG_IPCW;
    1a52:	ea 81       	ldd	r30, Y+2	; 0x02
    1a54:	fb 81       	ldd	r31, Y+3	; 0x03
    1a56:	87 81       	ldd	r24, Z+7	; 0x07
    1a58:	90 85       	ldd	r25, Z+8	; 0x08
    1a5a:	8f 7b       	andi	r24, 0xBF	; 191
    1a5c:	ea 81       	ldd	r30, Y+2	; 0x02
    1a5e:	fb 81       	ldd	r31, Y+3	; 0x03
    1a60:	90 87       	std	Z+8, r25	; 0x08
    1a62:	87 83       	std	Z+7, r24	; 0x07
        ///Обработка флага останова целевого процесса
        if(  PROC_PRE_STOP_TEST(proc)  )
    1a64:	ea 81       	ldd	r30, Y+2	; 0x02
    1a66:	fb 81       	ldd	r31, Y+3	; 0x03
    1a68:	87 81       	ldd	r24, Z+7	; 0x07
    1a6a:	90 85       	ldd	r25, Z+8	; 0x08
    1a6c:	80 78       	andi	r24, 0x80	; 128
    1a6e:	90 70       	andi	r25, 0x00	; 0
    1a70:	00 97       	sbiw	r24, 0x00	; 0
    1a72:	91 f0       	breq	.+36     	; 0x1a98 <_ipc_exchange+0x82>
    1a74:	ea 81       	ldd	r30, Y+2	; 0x02
    1a76:	fb 81       	ldd	r31, Y+3	; 0x03
    1a78:	87 81       	ldd	r24, Z+7	; 0x07
    1a7a:	90 85       	ldd	r25, Z+8	; 0x08
    1a7c:	8c 70       	andi	r24, 0x0C	; 12
    1a7e:	90 70       	andi	r25, 0x00	; 0
    1a80:	00 97       	sbiw	r24, 0x00	; 0
    1a82:	51 f4       	brne	.+20     	; 0x1a98 <_ipc_exchange+0x82>
            Если был запрошен останов целевого процесса,
            и целевой процесс не удерживает общие ресурсы,
            то мы не будем возобновлять его работу
            и передавать ему информацию.
            */
            proc->flags &= ~PROC_FLG_PRE_STOP_MASK;
    1a84:	ea 81       	ldd	r30, Y+2	; 0x02
    1a86:	fb 81       	ldd	r31, Y+3	; 0x03
    1a88:	87 81       	ldd	r24, Z+7	; 0x07
    1a8a:	90 85       	ldd	r25, Z+8	; 0x08
    1a8c:	8d 77       	andi	r24, 0x7D	; 125
    1a8e:	ea 81       	ldd	r30, Y+2	; 0x02
    1a90:	fb 81       	ldd	r31, Y+3	; 0x03
    1a92:	90 87       	std	Z+8, r25	; 0x08
    1a94:	87 83       	std	Z+7, r24	; 0x07
    1a96:	13 c0       	rjmp	.+38     	; 0x1abe <_ipc_exchange+0xa8>
            goto end;
        }
        ret = (bool_t)1; // информация будет передана
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	89 83       	std	Y+1, r24	; 0x01
        *(ipc_data_t *)proc->buf = send;
    1a9c:	ea 81       	ldd	r30, Y+2	; 0x02
    1a9e:	fb 81       	ldd	r31, Y+3	; 0x03
    1aa0:	87 8d       	ldd	r24, Z+31	; 0x1f
    1aa2:	90 a1       	ldd	r25, Z+32	; 0x20
    1aa4:	fc 01       	movw	r30, r24
    1aa6:	8c 81       	ldd	r24, Y+4	; 0x04
    1aa8:	9d 81       	ldd	r25, Y+5	; 0x05
    1aaa:	91 83       	std	Z+1, r25	; 0x01
    1aac:	80 83       	st	Z, r24
        _ipc_wait( receive ); // Готовимся к приему данных!
    1aae:	8e 81       	ldd	r24, Y+6	; 0x06
    1ab0:	9f 81       	ldd	r25, Y+7	; 0x07
    1ab2:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ipc_wait>
        _proc_run( proc );   // И только после этого запускаем процесс-адресат!
    1ab6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab8:	9b 81       	ldd	r25, Y+3	; 0x03
    1aba:	0e 94 df 12 	call	0x25be	; 0x25be <_proc_run>
    }
end:
    SPIN_UNLOCK( proc );
    1abe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ac2:	83 96       	adiw	r24, 0x23	; 35
    1ac4:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
    return ret;
    1ac8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1aca:	27 96       	adiw	r28, 0x07	; 7
    1acc:	0f b6       	in	r0, 0x3f	; 63
    1ace:	f8 94       	cli
    1ad0:	de bf       	out	0x3e, r29	; 62
    1ad2:	0f be       	out	0x3f, r0	; 63
    1ad4:	cd bf       	out	0x3d, r28	; 61
    1ad6:	cf 91       	pop	r28
    1ad8:	df 91       	pop	r29
    1ada:	08 95       	ret

00001adc <item_init>:
*****************************************************************************************/
#include "../include/bugurt.h"
//Методы элемента 2-связного списка
//инициация элемента
void item_init(item_t *item)
{
    1adc:	df 93       	push	r29
    1ade:	cf 93       	push	r28
    1ae0:	00 d0       	rcall	.+0      	; 0x1ae2 <item_init+0x6>
    1ae2:	cd b7       	in	r28, 0x3d	; 61
    1ae4:	de b7       	in	r29, 0x3e	; 62
    1ae6:	9a 83       	std	Y+2, r25	; 0x02
    1ae8:	89 83       	std	Y+1, r24	; 0x01
    item->prev = item;
    1aea:	e9 81       	ldd	r30, Y+1	; 0x01
    1aec:	fa 81       	ldd	r31, Y+2	; 0x02
    1aee:	89 81       	ldd	r24, Y+1	; 0x01
    1af0:	9a 81       	ldd	r25, Y+2	; 0x02
    1af2:	93 83       	std	Z+3, r25	; 0x03
    1af4:	82 83       	std	Z+2, r24	; 0x02
    item->next = item;
    1af6:	e9 81       	ldd	r30, Y+1	; 0x01
    1af8:	fa 81       	ldd	r31, Y+2	; 0x02
    1afa:	89 81       	ldd	r24, Y+1	; 0x01
    1afc:	9a 81       	ldd	r25, Y+2	; 0x02
    1afe:	91 83       	std	Z+1, r25	; 0x01
    1b00:	80 83       	st	Z, r24
}
    1b02:	0f 90       	pop	r0
    1b04:	0f 90       	pop	r0
    1b06:	cf 91       	pop	r28
    1b08:	df 91       	pop	r29
    1b0a:	08 95       	ret

00001b0c <item_insert>:
//Вставить элемент
void item_insert(item_t *item, item_t *head)
{
    1b0c:	df 93       	push	r29
    1b0e:	cf 93       	push	r28
    1b10:	00 d0       	rcall	.+0      	; 0x1b12 <item_insert+0x6>
    1b12:	00 d0       	rcall	.+0      	; 0x1b14 <item_insert+0x8>
    1b14:	00 d0       	rcall	.+0      	; 0x1b16 <item_insert+0xa>
    1b16:	cd b7       	in	r28, 0x3d	; 61
    1b18:	de b7       	in	r29, 0x3e	; 62
    1b1a:	9c 83       	std	Y+4, r25	; 0x04
    1b1c:	8b 83       	std	Y+3, r24	; 0x03
    1b1e:	7e 83       	std	Y+6, r23	; 0x06
    1b20:	6d 83       	std	Y+5, r22	; 0x05
    // "хвост" списка
    item_t * tail;
    tail = head->prev;
    1b22:	ed 81       	ldd	r30, Y+5	; 0x05
    1b24:	fe 81       	ldd	r31, Y+6	; 0x06
    1b26:	82 81       	ldd	r24, Z+2	; 0x02
    1b28:	93 81       	ldd	r25, Z+3	; 0x03
    1b2a:	9a 83       	std	Y+2, r25	; 0x02
    1b2c:	89 83       	std	Y+1, r24	; 0x01
    // Вставляем элемент между "головой" и "хвостом"
    item->prev = tail;
    1b2e:	eb 81       	ldd	r30, Y+3	; 0x03
    1b30:	fc 81       	ldd	r31, Y+4	; 0x04
    1b32:	89 81       	ldd	r24, Y+1	; 0x01
    1b34:	9a 81       	ldd	r25, Y+2	; 0x02
    1b36:	93 83       	std	Z+3, r25	; 0x03
    1b38:	82 83       	std	Z+2, r24	; 0x02
    item->next = head;
    1b3a:	eb 81       	ldd	r30, Y+3	; 0x03
    1b3c:	fc 81       	ldd	r31, Y+4	; 0x04
    1b3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b40:	9e 81       	ldd	r25, Y+6	; 0x06
    1b42:	91 83       	std	Z+1, r25	; 0x01
    1b44:	80 83       	st	Z, r24

    head->prev = item;
    1b46:	ed 81       	ldd	r30, Y+5	; 0x05
    1b48:	fe 81       	ldd	r31, Y+6	; 0x06
    1b4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b4e:	93 83       	std	Z+3, r25	; 0x03
    1b50:	82 83       	std	Z+2, r24	; 0x02
    tail->next = item;
    1b52:	e9 81       	ldd	r30, Y+1	; 0x01
    1b54:	fa 81       	ldd	r31, Y+2	; 0x02
    1b56:	8b 81       	ldd	r24, Y+3	; 0x03
    1b58:	9c 81       	ldd	r25, Y+4	; 0x04
    1b5a:	91 83       	std	Z+1, r25	; 0x01
    1b5c:	80 83       	st	Z, r24
}
    1b5e:	26 96       	adiw	r28, 0x06	; 6
    1b60:	0f b6       	in	r0, 0x3f	; 63
    1b62:	f8 94       	cli
    1b64:	de bf       	out	0x3e, r29	; 62
    1b66:	0f be       	out	0x3f, r0	; 63
    1b68:	cd bf       	out	0x3d, r28	; 61
    1b6a:	cf 91       	pop	r28
    1b6c:	df 91       	pop	r29
    1b6e:	08 95       	ret

00001b70 <item_cut>:
//Вырезать элемент
void item_cut( item_t *item )
{
    1b70:	df 93       	push	r29
    1b72:	cf 93       	push	r28
    1b74:	00 d0       	rcall	.+0      	; 0x1b76 <item_cut+0x6>
    1b76:	00 d0       	rcall	.+0      	; 0x1b78 <item_cut+0x8>
    1b78:	00 d0       	rcall	.+0      	; 0x1b7a <item_cut+0xa>
    1b7a:	cd b7       	in	r28, 0x3d	; 61
    1b7c:	de b7       	in	r29, 0x3e	; 62
    1b7e:	9e 83       	std	Y+6, r25	; 0x06
    1b80:	8d 83       	std	Y+5, r24	; 0x05
    item_t * prev;
    item_t * next;
    prev = item->prev; //Предыдущий элемент
    1b82:	ed 81       	ldd	r30, Y+5	; 0x05
    1b84:	fe 81       	ldd	r31, Y+6	; 0x06
    1b86:	82 81       	ldd	r24, Z+2	; 0x02
    1b88:	93 81       	ldd	r25, Z+3	; 0x03
    1b8a:	9c 83       	std	Y+4, r25	; 0x04
    1b8c:	8b 83       	std	Y+3, r24	; 0x03
    next = item->next; //Следующий элемент
    1b8e:	ed 81       	ldd	r30, Y+5	; 0x05
    1b90:	fe 81       	ldd	r31, Y+6	; 0x06
    1b92:	80 81       	ld	r24, Z
    1b94:	91 81       	ldd	r25, Z+1	; 0x01
    1b96:	9a 83       	std	Y+2, r25	; 0x02
    1b98:	89 83       	std	Y+1, r24	; 0x01

    next->prev = prev;
    1b9a:	e9 81       	ldd	r30, Y+1	; 0x01
    1b9c:	fa 81       	ldd	r31, Y+2	; 0x02
    1b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba2:	93 83       	std	Z+3, r25	; 0x03
    1ba4:	82 83       	std	Z+2, r24	; 0x02
    prev->next = next;
    1ba6:	eb 81       	ldd	r30, Y+3	; 0x03
    1ba8:	fc 81       	ldd	r31, Y+4	; 0x04
    1baa:	89 81       	ldd	r24, Y+1	; 0x01
    1bac:	9a 81       	ldd	r25, Y+2	; 0x02
    1bae:	91 83       	std	Z+1, r25	; 0x01
    1bb0:	80 83       	st	Z, r24

    item->prev = item;
    1bb2:	ed 81       	ldd	r30, Y+5	; 0x05
    1bb4:	fe 81       	ldd	r31, Y+6	; 0x06
    1bb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bba:	93 83       	std	Z+3, r25	; 0x03
    1bbc:	82 83       	std	Z+2, r24	; 0x02
    item->next = item;
    1bbe:	ed 81       	ldd	r30, Y+5	; 0x05
    1bc0:	fe 81       	ldd	r31, Y+6	; 0x06
    1bc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc4:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc6:	91 83       	std	Z+1, r25	; 0x01
    1bc8:	80 83       	st	Z, r24
}
    1bca:	26 96       	adiw	r28, 0x06	; 6
    1bcc:	0f b6       	in	r0, 0x3f	; 63
    1bce:	f8 94       	cli
    1bd0:	de bf       	out	0x3e, r29	; 62
    1bd2:	0f be       	out	0x3f, r0	; 63
    1bd4:	cd bf       	out	0x3d, r28	; 61
    1bd6:	cf 91       	pop	r28
    1bd8:	df 91       	pop	r29
    1bda:	08 95       	ret

00001bdc <kernel_init>:
{
    while(1);
}

void kernel_init(void)
{
    1bdc:	8f 92       	push	r8
    1bde:	af 92       	push	r10
    1be0:	bf 92       	push	r11
    1be2:	cf 92       	push	r12
    1be4:	ef 92       	push	r14
    1be6:	ff 92       	push	r15
    1be8:	0f 93       	push	r16
    1bea:	1f 93       	push	r17
    1bec:	df 93       	push	r29
    1bee:	cf 93       	push	r28
    1bf0:	0f 92       	push	r0
    1bf2:	cd b7       	in	r28, 0x3d	; 61
    1bf4:	de b7       	in	r29, 0x3e	; 62
#ifdef CONFIG_MP
    core_id_t i;

    spin_init( &kernel.stat_lock );
    1bf6:	81 e8       	ldi	r24, 0x81	; 129
    1bf8:	93 e0       	ldi	r25, 0x03	; 3
    1bfa:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <spin_init>
    spin_lock( &kernel.stat_lock );
    1bfe:	81 e8       	ldi	r24, 0x81	; 129
    1c00:	93 e0       	ldi	r25, 0x03	; 3
    1c02:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    //Инициация собственно ядра
    for( i = (core_id_t)0; i<(core_id_t)MAX_CORES; i++ )
    1c06:	19 82       	std	Y+1, r1	; 0x01
    1c08:	76 c0       	rjmp	.+236    	; 0x1cf6 <kernel_init+0x11a>
    {
        proc_init_isr(
    1c0a:	89 81       	ldd	r24, Y+1	; 0x01
    1c0c:	28 2f       	mov	r18, r24
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	80 e3       	ldi	r24, 0x30	; 48
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	ac 01       	movw	r20, r24
    1c16:	24 9f       	mul	r18, r20
    1c18:	c0 01       	movw	r24, r0
    1c1a:	25 9f       	mul	r18, r21
    1c1c:	90 0d       	add	r25, r0
    1c1e:	34 9f       	mul	r19, r20
    1c20:	90 0d       	add	r25, r0
    1c22:	11 24       	eor	r1, r1
    1c24:	ac 01       	movw	r20, r24
    1c26:	41 5e       	subi	r20, 0xE1	; 225
    1c28:	5c 4f       	sbci	r21, 0xFC	; 252
    1c2a:	89 81       	ldd	r24, Y+1	; 0x01
    1c2c:	28 2f       	mov	r18, r24
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	81 e0       	ldi	r24, 0x01	; 1
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	02 c0       	rjmp	.+4      	; 0x1c3a <kernel_init+0x5e>
    1c36:	88 0f       	add	r24, r24
    1c38:	99 1f       	adc	r25, r25
    1c3a:	2a 95       	dec	r18
    1c3c:	e2 f7       	brpl	.-8      	; 0x1c36 <kernel_init+0x5a>
    1c3e:	0f 92       	push	r0
    1c40:	ed b7       	in	r30, 0x3d	; 61
    1c42:	fe b7       	in	r31, 0x3e	; 62
    1c44:	31 96       	adiw	r30, 0x01	; 1
    1c46:	2a ec       	ldi	r18, 0xCA	; 202
    1c48:	30 e2       	ldi	r19, 0x20	; 32
    1c4a:	80 83       	st	Z, r24
    1c4c:	ca 01       	movw	r24, r20
    1c4e:	b9 01       	movw	r22, r18
    1c50:	40 e0       	ldi	r20, 0x00	; 0
    1c52:	50 e0       	ldi	r21, 0x00	; 0
    1c54:	20 e0       	ldi	r18, 0x00	; 0
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	00 e0       	ldi	r16, 0x00	; 0
    1c5a:	10 e0       	ldi	r17, 0x00	; 0
    1c5c:	ee 24       	eor	r14, r14
    1c5e:	ff 24       	eor	r15, r15
    1c60:	0f 2e       	mov	r0, r31
    1c62:	f7 e0       	ldi	r31, 0x07	; 7
    1c64:	cf 2e       	mov	r12, r31
    1c66:	f0 2d       	mov	r31, r0
    1c68:	aa 24       	eor	r10, r10
    1c6a:	bb 24       	eor	r11, r11
    1c6c:	a3 94       	inc	r10
    1c6e:	88 24       	eor	r8, r8
    1c70:	0e 94 07 12 	call	0x240e	; 0x240e <proc_init_isr>
    1c74:	0f 90       	pop	r0
            ((prio_t)BITS_IN_INDEX_T - (prio_t)1),// низший приоритет
            (timer_t)1,//минимальный квант времени
            (bool_t)0,// не RT
            ((affinity_t)1)<<i // привязка  строго к одному процессору, а то его как сбалансирует отсюда
        );
        kernel.idle[i].core_id = i;
    1c76:	89 81       	ldd	r24, Y+1	; 0x01
    1c78:	28 2f       	mov	r18, r24
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
    1c7c:	80 e3       	ldi	r24, 0x30	; 48
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	bc 01       	movw	r22, r24
    1c82:	26 9f       	mul	r18, r22
    1c84:	c0 01       	movw	r24, r0
    1c86:	27 9f       	mul	r18, r23
    1c88:	90 0d       	add	r25, r0
    1c8a:	36 9f       	mul	r19, r22
    1c8c:	90 0d       	add	r25, r0
    1c8e:	11 24       	eor	r1, r1
    1c90:	fc 01       	movw	r30, r24
    1c92:	e0 5c       	subi	r30, 0xC0	; 192
    1c94:	fc 4f       	sbci	r31, 0xFC	; 252
    1c96:	89 81       	ldd	r24, Y+1	; 0x01
    1c98:	80 83       	st	Z, r24
        stat_init( (stat_t *)kernel.stat + i );
    1c9a:	89 81       	ldd	r24, Y+1	; 0x01
    1c9c:	88 2f       	mov	r24, r24
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	81 58       	subi	r24, 0x81	; 129
    1ca2:	9c 4f       	sbci	r25, 0xFC	; 252
    1ca4:	0e 94 48 01 	call	0x290	; 0x290 <stat_init>
        sched_init( (sched_t *)kernel.sched + i, (proc_t *)kernel.idle + i );
    1ca8:	89 81       	ldd	r24, Y+1	; 0x01
    1caa:	28 2f       	mov	r18, r24
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	8b e2       	ldi	r24, 0x2B	; 43
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	ac 01       	movw	r20, r24
    1cb4:	24 9f       	mul	r18, r20
    1cb6:	c0 01       	movw	r24, r0
    1cb8:	25 9f       	mul	r18, r21
    1cba:	90 0d       	add	r25, r0
    1cbc:	34 9f       	mul	r19, r20
    1cbe:	90 0d       	add	r25, r0
    1cc0:	11 24       	eor	r1, r1
    1cc2:	ac 01       	movw	r20, r24
    1cc4:	47 53       	subi	r20, 0x37	; 55
    1cc6:	5d 4f       	sbci	r21, 0xFD	; 253
    1cc8:	89 81       	ldd	r24, Y+1	; 0x01
    1cca:	28 2f       	mov	r18, r24
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	80 e3       	ldi	r24, 0x30	; 48
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	bc 01       	movw	r22, r24
    1cd4:	26 9f       	mul	r18, r22
    1cd6:	c0 01       	movw	r24, r0
    1cd8:	27 9f       	mul	r18, r23
    1cda:	90 0d       	add	r25, r0
    1cdc:	36 9f       	mul	r19, r22
    1cde:	90 0d       	add	r25, r0
    1ce0:	11 24       	eor	r1, r1
    1ce2:	9c 01       	movw	r18, r24
    1ce4:	21 5e       	subi	r18, 0xE1	; 225
    1ce6:	3c 4f       	sbci	r19, 0xFC	; 252
    1ce8:	ca 01       	movw	r24, r20
    1cea:	b9 01       	movw	r22, r18
    1cec:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <sched_init>
    core_id_t i;

    spin_init( &kernel.stat_lock );
    spin_lock( &kernel.stat_lock );
    //Инициация собственно ядра
    for( i = (core_id_t)0; i<(core_id_t)MAX_CORES; i++ )
    1cf0:	89 81       	ldd	r24, Y+1	; 0x01
    1cf2:	8f 5f       	subi	r24, 0xFF	; 255
    1cf4:	89 83       	std	Y+1, r24	; 0x01
    1cf6:	89 81       	ldd	r24, Y+1	; 0x01
    1cf8:	82 30       	cpi	r24, 0x02	; 2
    1cfa:	08 f4       	brcc	.+2      	; 0x1cfe <kernel_init+0x122>
    1cfc:	86 cf       	rjmp	.-244    	; 0x1c0a <kernel_init+0x2e>
        );
        kernel.idle[i].core_id = i;
        stat_init( (stat_t *)kernel.stat + i );
        sched_init( (sched_t *)kernel.sched + i, (proc_t *)kernel.idle + i );
    }
    spin_unlock( &kernel.stat_lock );
    1cfe:	81 e8       	ldi	r24, 0x81	; 129
    1d00:	93 e0       	ldi	r25, 0x03	; 3
    1d02:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
        (timer_t)1,//минимальный квант времени
        (bool_t)0// не RT
    );
    sched_init( (sched_t *)&kernel.sched, (proc_t *)&kernel.idle );
#endif // CONFIG_MP
}
    1d06:	0f 90       	pop	r0
    1d08:	cf 91       	pop	r28
    1d0a:	df 91       	pop	r29
    1d0c:	1f 91       	pop	r17
    1d0e:	0f 91       	pop	r16
    1d10:	ff 90       	pop	r15
    1d12:	ef 90       	pop	r14
    1d14:	cf 90       	pop	r12
    1d16:	bf 90       	pop	r11
    1d18:	af 90       	pop	r10
    1d1a:	8f 90       	pop	r8
    1d1c:	08 95       	ret

00001d1e <mutex_init_isr>:
    mutex_t * mutex
#ifdef CONFIG_USE_HIGHEST_LOCKER
    ,prio_t prio
#endif // CONFIG_USE_HIGHEST_LOCKER
)
{
    1d1e:	df 93       	push	r29
    1d20:	cf 93       	push	r28
    1d22:	00 d0       	rcall	.+0      	; 0x1d24 <mutex_init_isr+0x6>
    1d24:	0f 92       	push	r0
    1d26:	cd b7       	in	r28, 0x3d	; 61
    1d28:	de b7       	in	r29, 0x3e	; 62
    1d2a:	9a 83       	std	Y+2, r25	; 0x02
    1d2c:	89 83       	std	Y+1, r24	; 0x01
    1d2e:	6b 83       	std	Y+3, r22	; 0x03
    SPIN_INIT( mutex );
    1d30:	89 81       	ldd	r24, Y+1	; 0x01
    1d32:	9a 81       	ldd	r25, Y+2	; 0x02
    1d34:	43 96       	adiw	r24, 0x13	; 19
    1d36:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <spin_init>
    SPIN_LOCK( mutex );
    1d3a:	89 81       	ldd	r24, Y+1	; 0x01
    1d3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d3e:	43 96       	adiw	r24, 0x13	; 19
    1d40:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    xlist_init( (xlist_t *)mutex );
    1d44:	89 81       	ldd	r24, Y+1	; 0x01
    1d46:	9a 81       	ldd	r25, Y+2	; 0x02
    1d48:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <xlist_init>
    mutex->free = (bool_t)1;
    1d4c:	e9 81       	ldd	r30, Y+1	; 0x01
    1d4e:	fa 81       	ldd	r31, Y+2	; 0x02
    1d50:	81 e0       	ldi	r24, 0x01	; 1
    1d52:	82 8b       	std	Z+18, r24	; 0x12
#ifdef CONFIG_USE_HIGHEST_LOCKER
    mutex->prio = prio;
    1d54:	e9 81       	ldd	r30, Y+1	; 0x01
    1d56:	fa 81       	ldd	r31, Y+2	; 0x02
    1d58:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5a:	81 8b       	std	Z+17, r24	; 0x11
#endif // CONFIG_USE_HIGHEST_LOCKER
    SPIN_UNLOCK( mutex );
    1d5c:	89 81       	ldd	r24, Y+1	; 0x01
    1d5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d60:	43 96       	adiw	r24, 0x13	; 19
    1d62:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
}
    1d66:	0f 90       	pop	r0
    1d68:	0f 90       	pop	r0
    1d6a:	0f 90       	pop	r0
    1d6c:	cf 91       	pop	r28
    1d6e:	df 91       	pop	r29
    1d70:	08 95       	ret

00001d72 <_mutex_lock>:

// К моменту вызова захвачена блокировка mutex-а, запрещены прерывания
bool_t _mutex_lock( mutex_t * mutex )
{
    1d72:	df 93       	push	r29
    1d74:	cf 93       	push	r28
    1d76:	00 d0       	rcall	.+0      	; 0x1d78 <_mutex_lock+0x6>
    1d78:	00 d0       	rcall	.+0      	; 0x1d7a <_mutex_lock+0x8>
    1d7a:	0f 92       	push	r0
    1d7c:	cd b7       	in	r28, 0x3d	; 61
    1d7e:	de b7       	in	r29, 0x3e	; 62
    1d80:	9d 83       	std	Y+5, r25	; 0x05
    1d82:	8c 83       	std	Y+4, r24	; 0x04
    bool_t ret;
    proc_t * proc;
    // Захват блокировки мьютекса
    SPIN_LOCK( mutex );
    1d84:	8c 81       	ldd	r24, Y+4	; 0x04
    1d86:	9d 81       	ldd	r25, Y+5	; 0x05
    1d88:	43 96       	adiw	r24, 0x13	; 19
    1d8a:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    ret = mutex->free;
    1d8e:	ec 81       	ldd	r30, Y+4	; 0x04
    1d90:	fd 81       	ldd	r31, Y+5	; 0x05
    1d92:	82 89       	ldd	r24, Z+18	; 0x12
    1d94:	8b 83       	std	Y+3, r24	; 0x03
    proc = current_proc();
    1d96:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <current_proc>
    1d9a:	9a 83       	std	Y+2, r25	; 0x02
    1d9c:	89 83       	std	Y+1, r24	; 0x01
    // Захват блокировки процесса
    SPIN_LOCK( proc );
    1d9e:	89 81       	ldd	r24, Y+1	; 0x01
    1da0:	9a 81       	ldd	r25, Y+2	; 0x02
    1da2:	83 96       	adiw	r24, 0x23	; 35
    1da4:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    PROC_LRES_INC( proc, GET_PRIO( mutex ) );
    1da8:	ec 81       	ldd	r30, Y+4	; 0x04
    1daa:	fd 81       	ldd	r31, Y+5	; 0x05
    1dac:	21 89       	ldd	r18, Z+17	; 0x11
    1dae:	89 81       	ldd	r24, Y+1	; 0x01
    1db0:	9a 81       	ldd	r25, Y+2	; 0x02
    1db2:	62 2f       	mov	r22, r18
    1db4:	0e 94 f7 14 	call	0x29ee	; 0x29ee <_proc_lres_inc>

    if( ret )
    1db8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dba:	88 23       	and	r24, r24
    1dbc:	41 f0       	breq	.+16     	; 0x1dce <_mutex_lock+0x5c>
    {
        mutex->free = (bool_t)0;
    1dbe:	ec 81       	ldd	r30, Y+4	; 0x04
    1dc0:	fd 81       	ldd	r31, Y+5	; 0x05
    1dc2:	12 8a       	std	Z+18, r1	; 0x12
        PROC_PRIO_CONTROL_RUNNING( proc );
    1dc4:	89 81       	ldd	r24, Y+1	; 0x01
    1dc6:	9a 81       	ldd	r25, Y+2	; 0x02
    1dc8:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <_proc_prio_control_running>
    1dcc:	14 c0       	rjmp	.+40     	; 0x1df6 <_mutex_lock+0x84>
    }
    else
    {
        proc->flags |= PROC_FLG_QUEUE;
    1dce:	e9 81       	ldd	r30, Y+1	; 0x01
    1dd0:	fa 81       	ldd	r31, Y+2	; 0x02
    1dd2:	87 81       	ldd	r24, Z+7	; 0x07
    1dd4:	90 85       	ldd	r25, Z+8	; 0x08
    1dd6:	80 61       	ori	r24, 0x10	; 16
    1dd8:	e9 81       	ldd	r30, Y+1	; 0x01
    1dda:	fa 81       	ldd	r31, Y+2	; 0x02
    1ddc:	90 87       	std	Z+8, r25	; 0x08
    1dde:	87 83       	std	Z+7, r24	; 0x07
        _proc_stop( proc );
    1de0:	89 81       	ldd	r24, Y+1	; 0x01
    1de2:	9a 81       	ldd	r25, Y+2	; 0x02
    1de4:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <_proc_stop>
        pitem_insert( (pitem_t *)proc, (xlist_t *)mutex );
    1de8:	89 81       	ldd	r24, Y+1	; 0x01
    1dea:	9a 81       	ldd	r25, Y+2	; 0x02
    1dec:	2c 81       	ldd	r18, Y+4	; 0x04
    1dee:	3d 81       	ldd	r19, Y+5	; 0x05
    1df0:	b9 01       	movw	r22, r18
    1df2:	0e 94 a5 10 	call	0x214a	; 0x214a <pitem_insert>
    }
    SPIN_UNLOCK( proc );
    1df6:	89 81       	ldd	r24, Y+1	; 0x01
    1df8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dfa:	83 96       	adiw	r24, 0x23	; 35
    1dfc:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
    SPIN_UNLOCK( mutex );
    1e00:	8c 81       	ldd	r24, Y+4	; 0x04
    1e02:	9d 81       	ldd	r25, Y+5	; 0x05
    1e04:	43 96       	adiw	r24, 0x13	; 19
    1e06:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
    return ret;
    1e0a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1e0c:	0f 90       	pop	r0
    1e0e:	0f 90       	pop	r0
    1e10:	0f 90       	pop	r0
    1e12:	0f 90       	pop	r0
    1e14:	0f 90       	pop	r0
    1e16:	cf 91       	pop	r28
    1e18:	df 91       	pop	r29
    1e1a:	08 95       	ret

00001e1c <_mutex_try_lock>:

bool_t _mutex_try_lock( mutex_t * mutex )
{
    1e1c:	df 93       	push	r29
    1e1e:	cf 93       	push	r28
    1e20:	00 d0       	rcall	.+0      	; 0x1e22 <_mutex_try_lock+0x6>
    1e22:	00 d0       	rcall	.+0      	; 0x1e24 <_mutex_try_lock+0x8>
    1e24:	0f 92       	push	r0
    1e26:	cd b7       	in	r28, 0x3d	; 61
    1e28:	de b7       	in	r29, 0x3e	; 62
    1e2a:	9d 83       	std	Y+5, r25	; 0x05
    1e2c:	8c 83       	std	Y+4, r24	; 0x04
    bool_t ret;
    proc_t * proc;

    SPIN_LOCK( mutex );
    1e2e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e30:	9d 81       	ldd	r25, Y+5	; 0x05
    1e32:	43 96       	adiw	r24, 0x13	; 19
    1e34:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    ret = mutex->free;
    1e38:	ec 81       	ldd	r30, Y+4	; 0x04
    1e3a:	fd 81       	ldd	r31, Y+5	; 0x05
    1e3c:	82 89       	ldd	r24, Z+18	; 0x12
    1e3e:	8b 83       	std	Y+3, r24	; 0x03
    proc = current_proc();
    1e40:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <current_proc>
    1e44:	9a 83       	std	Y+2, r25	; 0x02
    1e46:	89 83       	std	Y+1, r24	; 0x01

    SPIN_LOCK( proc );
    1e48:	89 81       	ldd	r24, Y+1	; 0x01
    1e4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e4c:	83 96       	adiw	r24, 0x23	; 35
    1e4e:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    if( ret )
    1e52:	8b 81       	ldd	r24, Y+3	; 0x03
    1e54:	88 23       	and	r24, r24
    1e56:	79 f0       	breq	.+30     	; 0x1e76 <_mutex_try_lock+0x5a>
    {
        mutex->free = (bool_t)0;
    1e58:	ec 81       	ldd	r30, Y+4	; 0x04
    1e5a:	fd 81       	ldd	r31, Y+5	; 0x05
    1e5c:	12 8a       	std	Z+18, r1	; 0x12
        PROC_LRES_INC( proc, GET_PRIO( mutex ) );
    1e5e:	ec 81       	ldd	r30, Y+4	; 0x04
    1e60:	fd 81       	ldd	r31, Y+5	; 0x05
    1e62:	21 89       	ldd	r18, Z+17	; 0x11
    1e64:	89 81       	ldd	r24, Y+1	; 0x01
    1e66:	9a 81       	ldd	r25, Y+2	; 0x02
    1e68:	62 2f       	mov	r22, r18
    1e6a:	0e 94 f7 14 	call	0x29ee	; 0x29ee <_proc_lres_inc>
        PROC_PRIO_CONTROL_RUNNING( proc );
    1e6e:	89 81       	ldd	r24, Y+1	; 0x01
    1e70:	9a 81       	ldd	r25, Y+2	; 0x02
    1e72:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <_proc_prio_control_running>
    }
    SPIN_UNLOCK( proc );
    1e76:	89 81       	ldd	r24, Y+1	; 0x01
    1e78:	9a 81       	ldd	r25, Y+2	; 0x02
    1e7a:	83 96       	adiw	r24, 0x23	; 35
    1e7c:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
    SPIN_UNLOCK( mutex );
    1e80:	8c 81       	ldd	r24, Y+4	; 0x04
    1e82:	9d 81       	ldd	r25, Y+5	; 0x05
    1e84:	43 96       	adiw	r24, 0x13	; 19
    1e86:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
    return ret;
    1e8a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1e8c:	0f 90       	pop	r0
    1e8e:	0f 90       	pop	r0
    1e90:	0f 90       	pop	r0
    1e92:	0f 90       	pop	r0
    1e94:	0f 90       	pop	r0
    1e96:	cf 91       	pop	r28
    1e98:	df 91       	pop	r29
    1e9a:	08 95       	ret

00001e9c <_mutex_unlock>:

void _mutex_unlock( mutex_t *  mutex )
{
    1e9c:	df 93       	push	r29
    1e9e:	cf 93       	push	r28
    1ea0:	00 d0       	rcall	.+0      	; 0x1ea2 <_mutex_unlock+0x6>
    1ea2:	00 d0       	rcall	.+0      	; 0x1ea4 <_mutex_unlock+0x8>
    1ea4:	cd b7       	in	r28, 0x3d	; 61
    1ea6:	de b7       	in	r29, 0x3e	; 62
    1ea8:	9c 83       	std	Y+4, r25	; 0x04
    1eaa:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc;

    SPIN_LOCK( mutex );
    1eac:	8b 81       	ldd	r24, Y+3	; 0x03
    1eae:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb0:	43 96       	adiw	r24, 0x13	; 19
    1eb2:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    proc = current_proc();
    1eb6:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <current_proc>
    1eba:	9a 83       	std	Y+2, r25	; 0x02
    1ebc:	89 83       	std	Y+1, r24	; 0x01

    SPIN_LOCK(proc);
    1ebe:	89 81       	ldd	r24, Y+1	; 0x01
    1ec0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ec2:	83 96       	adiw	r24, 0x23	; 35
    1ec4:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    PROC_LRES_DEC( proc, GET_PRIO( mutex ) );
    1ec8:	eb 81       	ldd	r30, Y+3	; 0x03
    1eca:	fc 81       	ldd	r31, Y+4	; 0x04
    1ecc:	21 89       	ldd	r18, Z+17	; 0x11
    1ece:	89 81       	ldd	r24, Y+1	; 0x01
    1ed0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ed2:	62 2f       	mov	r22, r18
    1ed4:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <_proc_lres_dec>
    // Если проготовлен и готов к остановке - останавливаем
    if(  PROC_PRE_STOP_TEST(proc)  )
    1ed8:	e9 81       	ldd	r30, Y+1	; 0x01
    1eda:	fa 81       	ldd	r31, Y+2	; 0x02
    1edc:	87 81       	ldd	r24, Z+7	; 0x07
    1ede:	90 85       	ldd	r25, Z+8	; 0x08
    1ee0:	80 78       	andi	r24, 0x80	; 128
    1ee2:	90 70       	andi	r25, 0x00	; 0
    1ee4:	00 97       	sbiw	r24, 0x00	; 0
    1ee6:	f9 f0       	breq	.+62     	; 0x1f26 <_mutex_unlock+0x8a>
    1ee8:	e9 81       	ldd	r30, Y+1	; 0x01
    1eea:	fa 81       	ldd	r31, Y+2	; 0x02
    1eec:	87 81       	ldd	r24, Z+7	; 0x07
    1eee:	90 85       	ldd	r25, Z+8	; 0x08
    1ef0:	8c 70       	andi	r24, 0x0C	; 12
    1ef2:	90 70       	andi	r25, 0x00	; 0
    1ef4:	00 97       	sbiw	r24, 0x00	; 0
    1ef6:	b9 f4       	brne	.+46     	; 0x1f26 <_mutex_unlock+0x8a>
    {
        proc->flags &= ~PROC_FLG_PRE_STOP_MASK;
    1ef8:	e9 81       	ldd	r30, Y+1	; 0x01
    1efa:	fa 81       	ldd	r31, Y+2	; 0x02
    1efc:	87 81       	ldd	r24, Z+7	; 0x07
    1efe:	90 85       	ldd	r25, Z+8	; 0x08
    1f00:	8d 77       	andi	r24, 0x7D	; 125
    1f02:	e9 81       	ldd	r30, Y+1	; 0x01
    1f04:	fa 81       	ldd	r31, Y+2	; 0x02
    1f06:	90 87       	std	Z+8, r25	; 0x08
    1f08:	87 83       	std	Z+7, r24	; 0x07
        _proc_stop_( proc );
    1f0a:	89 81       	ldd	r24, Y+1	; 0x01
    1f0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f0e:	0e 94 a8 13 	call	0x2750	; 0x2750 <_proc_stop_>
        PROC_PRIO_CONTROL_STOPED( proc );
    1f12:	89 81       	ldd	r24, Y+1	; 0x01
    1f14:	9a 81       	ldd	r25, Y+2	; 0x02
    1f16:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <_proc_prio_control_stoped>
        // Нужна перепланировка, процесс остановили и не запустили обратно
        RESCHED_PROC( proc );
    1f1a:	e9 81       	ldd	r30, Y+1	; 0x01
    1f1c:	fa 81       	ldd	r31, Y+2	; 0x02
    1f1e:	81 a1       	ldd	r24, Z+33	; 0x21
    1f20:	0e 94 b7 01 	call	0x36e	; 0x36e <resched>
    1f24:	04 c0       	rjmp	.+8      	; 0x1f2e <_mutex_unlock+0x92>
    }
    else
    {
        // Не останавливаем - меняем проиритет на ходу
        PROC_PRIO_CONTROL_RUNNING( proc );
    1f26:	89 81       	ldd	r24, Y+1	; 0x01
    1f28:	9a 81       	ldd	r25, Y+2	; 0x02
    1f2a:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <_proc_prio_control_running>
    }
    SPIN_UNLOCK( proc );
    1f2e:	89 81       	ldd	r24, Y+1	; 0x01
    1f30:	9a 81       	ldd	r25, Y+2	; 0x02
    1f32:	83 96       	adiw	r24, 0x23	; 35
    1f34:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
    // Обрабока самого мьютекса
    if( ((xlist_t *)mutex)->index == (index_t)0  )
    1f38:	eb 81       	ldd	r30, Y+3	; 0x03
    1f3a:	fc 81       	ldd	r31, Y+4	; 0x04
    1f3c:	80 89       	ldd	r24, Z+16	; 0x10
    1f3e:	88 23       	and	r24, r24
    1f40:	29 f4       	brne	.+10     	; 0x1f4c <_mutex_unlock+0xb0>
    {
        // Список ожидающих пуст, выходим
        mutex->free = (bool_t)1;
    1f42:	eb 81       	ldd	r30, Y+3	; 0x03
    1f44:	fc 81       	ldd	r31, Y+4	; 0x04
    1f46:	81 e0       	ldi	r24, 0x01	; 1
    1f48:	82 8b       	std	Z+18, r24	; 0x12
    1f4a:	25 c0       	rjmp	.+74     	; 0x1f96 <_mutex_unlock+0xfa>
        goto end;
    }
    // Список ожидающих не пуст, запускаем голову
    proc = (proc_t *)xlist_head( (xlist_t *)mutex );
    1f4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f50:	0e 94 22 20 	call	0x4044	; 0x4044 <xlist_head>
    1f54:	9a 83       	std	Y+2, r25	; 0x02
    1f56:	89 83       	std	Y+1, r24	; 0x01
    SPIN_LOCK( proc );
    1f58:	89 81       	ldd	r24, Y+1	; 0x01
    1f5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f5c:	83 96       	adiw	r24, 0x23	; 35
    1f5e:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    // Сначала надо вырезать
    pitem_cut( (pitem_t *)proc );
    1f62:	89 81       	ldd	r24, Y+1	; 0x01
    1f64:	9a 81       	ldd	r25, Y+2	; 0x02
    1f66:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <pitem_cut>
    proc->flags &= ~PROC_FLG_QUEUE;
    1f6a:	e9 81       	ldd	r30, Y+1	; 0x01
    1f6c:	fa 81       	ldd	r31, Y+2	; 0x02
    1f6e:	87 81       	ldd	r24, Z+7	; 0x07
    1f70:	90 85       	ldd	r25, Z+8	; 0x08
    1f72:	8f 7e       	andi	r24, 0xEF	; 239
    1f74:	e9 81       	ldd	r30, Y+1	; 0x01
    1f76:	fa 81       	ldd	r31, Y+2	; 0x02
    1f78:	90 87       	std	Z+8, r25	; 0x08
    1f7a:	87 83       	std	Z+7, r24	; 0x07
    // Управление приоритетом процесса
    PROC_PRIO_CONTROL_STOPED( proc );
    1f7c:	89 81       	ldd	r24, Y+1	; 0x01
    1f7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f80:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <_proc_prio_control_stoped>
    _proc_run( proc );
    1f84:	89 81       	ldd	r24, Y+1	; 0x01
    1f86:	9a 81       	ldd	r25, Y+2	; 0x02
    1f88:	0e 94 df 12 	call	0x25be	; 0x25be <_proc_run>
    SPIN_UNLOCK( proc );
    1f8c:	89 81       	ldd	r24, Y+1	; 0x01
    1f8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f90:	83 96       	adiw	r24, 0x23	; 35
    1f92:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
end:
    SPIN_UNLOCK( mutex );
    1f96:	8b 81       	ldd	r24, Y+3	; 0x03
    1f98:	9c 81       	ldd	r25, Y+4	; 0x04
    1f9a:	43 96       	adiw	r24, 0x13	; 19
    1f9c:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
}
    1fa0:	0f 90       	pop	r0
    1fa2:	0f 90       	pop	r0
    1fa4:	0f 90       	pop	r0
    1fa6:	0f 90       	pop	r0
    1fa8:	cf 91       	pop	r28
    1faa:	df 91       	pop	r29
    1fac:	08 95       	ret

00001fae <pcounter_init>:
*                           http://www.0chan.ru/r/res/9996.html                          *
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
void pcounter_init(pcounter_t * pcounter)
{
    1fae:	df 93       	push	r29
    1fb0:	cf 93       	push	r28
    1fb2:	00 d0       	rcall	.+0      	; 0x1fb4 <pcounter_init+0x6>
    1fb4:	0f 92       	push	r0
    1fb6:	cd b7       	in	r28, 0x3d	; 61
    1fb8:	de b7       	in	r29, 0x3e	; 62
    1fba:	9b 83       	std	Y+3, r25	; 0x03
    1fbc:	8a 83       	std	Y+2, r24	; 0x02
    prio_t p;
    pcounter->index = (index_t)0;
    1fbe:	ea 81       	ldd	r30, Y+2	; 0x02
    1fc0:	fb 81       	ldd	r31, Y+3	; 0x03
    1fc2:	10 8a       	std	Z+16, r1	; 0x10
    for(p = 0; p < (index_t)BITS_IN_INDEX_T; p++)pcounter->counter[p] = (count_t)0;
    1fc4:	19 82       	std	Y+1, r1	; 0x01
    1fc6:	0f c0       	rjmp	.+30     	; 0x1fe6 <pcounter_init+0x38>
    1fc8:	89 81       	ldd	r24, Y+1	; 0x01
    1fca:	88 2f       	mov	r24, r24
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	2a 81       	ldd	r18, Y+2	; 0x02
    1fd0:	3b 81       	ldd	r19, Y+3	; 0x03
    1fd2:	88 0f       	add	r24, r24
    1fd4:	99 1f       	adc	r25, r25
    1fd6:	f9 01       	movw	r30, r18
    1fd8:	e8 0f       	add	r30, r24
    1fda:	f9 1f       	adc	r31, r25
    1fdc:	11 82       	std	Z+1, r1	; 0x01
    1fde:	10 82       	st	Z, r1
    1fe0:	89 81       	ldd	r24, Y+1	; 0x01
    1fe2:	8f 5f       	subi	r24, 0xFF	; 255
    1fe4:	89 83       	std	Y+1, r24	; 0x01
    1fe6:	89 81       	ldd	r24, Y+1	; 0x01
    1fe8:	88 30       	cpi	r24, 0x08	; 8
    1fea:	70 f3       	brcs	.-36     	; 0x1fc8 <pcounter_init+0x1a>
}
    1fec:	0f 90       	pop	r0
    1fee:	0f 90       	pop	r0
    1ff0:	0f 90       	pop	r0
    1ff2:	cf 91       	pop	r28
    1ff4:	df 91       	pop	r29
    1ff6:	08 95       	ret

00001ff8 <pcounter_inc>:

void pcounter_inc(pcounter_t * pcounter, prio_t prio)
{
    1ff8:	df 93       	push	r29
    1ffa:	cf 93       	push	r28
    1ffc:	00 d0       	rcall	.+0      	; 0x1ffe <pcounter_inc+0x6>
    1ffe:	0f 92       	push	r0
    2000:	cd b7       	in	r28, 0x3d	; 61
    2002:	de b7       	in	r29, 0x3e	; 62
    2004:	9a 83       	std	Y+2, r25	; 0x02
    2006:	89 83       	std	Y+1, r24	; 0x01
    2008:	6b 83       	std	Y+3, r22	; 0x03
    pcounter->counter[prio]++;
    200a:	8b 81       	ldd	r24, Y+3	; 0x03
    200c:	68 2f       	mov	r22, r24
    200e:	70 e0       	ldi	r23, 0x00	; 0
    2010:	29 81       	ldd	r18, Y+1	; 0x01
    2012:	3a 81       	ldd	r19, Y+2	; 0x02
    2014:	cb 01       	movw	r24, r22
    2016:	88 0f       	add	r24, r24
    2018:	99 1f       	adc	r25, r25
    201a:	f9 01       	movw	r30, r18
    201c:	e8 0f       	add	r30, r24
    201e:	f9 1f       	adc	r31, r25
    2020:	80 81       	ld	r24, Z
    2022:	91 81       	ldd	r25, Z+1	; 0x01
    2024:	ac 01       	movw	r20, r24
    2026:	4f 5f       	subi	r20, 0xFF	; 255
    2028:	5f 4f       	sbci	r21, 0xFF	; 255
    202a:	29 81       	ldd	r18, Y+1	; 0x01
    202c:	3a 81       	ldd	r19, Y+2	; 0x02
    202e:	cb 01       	movw	r24, r22
    2030:	88 0f       	add	r24, r24
    2032:	99 1f       	adc	r25, r25
    2034:	f9 01       	movw	r30, r18
    2036:	e8 0f       	add	r30, r24
    2038:	f9 1f       	adc	r31, r25
    203a:	51 83       	std	Z+1, r21	; 0x01
    203c:	40 83       	st	Z, r20
    pcounter->index |= ((index_t)1)<<prio;
    203e:	e9 81       	ldd	r30, Y+1	; 0x01
    2040:	fa 81       	ldd	r31, Y+2	; 0x02
    2042:	80 89       	ldd	r24, Z+16	; 0x10
    2044:	48 2f       	mov	r20, r24
    2046:	8b 81       	ldd	r24, Y+3	; 0x03
    2048:	28 2f       	mov	r18, r24
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	81 e0       	ldi	r24, 0x01	; 1
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	02 2e       	mov	r0, r18
    2052:	02 c0       	rjmp	.+4      	; 0x2058 <pcounter_inc+0x60>
    2054:	88 0f       	add	r24, r24
    2056:	99 1f       	adc	r25, r25
    2058:	0a 94       	dec	r0
    205a:	e2 f7       	brpl	.-8      	; 0x2054 <pcounter_inc+0x5c>
    205c:	84 2b       	or	r24, r20
    205e:	e9 81       	ldd	r30, Y+1	; 0x01
    2060:	fa 81       	ldd	r31, Y+2	; 0x02
    2062:	80 8b       	std	Z+16, r24	; 0x10
}
    2064:	0f 90       	pop	r0
    2066:	0f 90       	pop	r0
    2068:	0f 90       	pop	r0
    206a:	cf 91       	pop	r28
    206c:	df 91       	pop	r29
    206e:	08 95       	ret

00002070 <pcounter_dec>:

index_t pcounter_dec(pcounter_t * pcounter, prio_t prio)
{
    2070:	df 93       	push	r29
    2072:	cf 93       	push	r28
    2074:	00 d0       	rcall	.+0      	; 0x2076 <pcounter_dec+0x6>
    2076:	00 d0       	rcall	.+0      	; 0x2078 <pcounter_dec+0x8>
    2078:	cd b7       	in	r28, 0x3d	; 61
    207a:	de b7       	in	r29, 0x3e	; 62
    207c:	9b 83       	std	Y+3, r25	; 0x03
    207e:	8a 83       	std	Y+2, r24	; 0x02
    2080:	6c 83       	std	Y+4, r22	; 0x04
    index_t mask;
    mask = ((index_t)1)<<prio;
    2082:	8c 81       	ldd	r24, Y+4	; 0x04
    2084:	28 2f       	mov	r18, r24
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	02 c0       	rjmp	.+4      	; 0x2092 <pcounter_dec+0x22>
    208e:	88 0f       	add	r24, r24
    2090:	99 1f       	adc	r25, r25
    2092:	2a 95       	dec	r18
    2094:	e2 f7       	brpl	.-8      	; 0x208e <pcounter_dec+0x1e>
    2096:	89 83       	std	Y+1, r24	; 0x01
    pcounter->counter[prio]--;
    2098:	8c 81       	ldd	r24, Y+4	; 0x04
    209a:	68 2f       	mov	r22, r24
    209c:	70 e0       	ldi	r23, 0x00	; 0
    209e:	2a 81       	ldd	r18, Y+2	; 0x02
    20a0:	3b 81       	ldd	r19, Y+3	; 0x03
    20a2:	cb 01       	movw	r24, r22
    20a4:	88 0f       	add	r24, r24
    20a6:	99 1f       	adc	r25, r25
    20a8:	f9 01       	movw	r30, r18
    20aa:	e8 0f       	add	r30, r24
    20ac:	f9 1f       	adc	r31, r25
    20ae:	80 81       	ld	r24, Z
    20b0:	91 81       	ldd	r25, Z+1	; 0x01
    20b2:	ac 01       	movw	r20, r24
    20b4:	41 50       	subi	r20, 0x01	; 1
    20b6:	50 40       	sbci	r21, 0x00	; 0
    20b8:	2a 81       	ldd	r18, Y+2	; 0x02
    20ba:	3b 81       	ldd	r19, Y+3	; 0x03
    20bc:	cb 01       	movw	r24, r22
    20be:	88 0f       	add	r24, r24
    20c0:	99 1f       	adc	r25, r25
    20c2:	f9 01       	movw	r30, r18
    20c4:	e8 0f       	add	r30, r24
    20c6:	f9 1f       	adc	r31, r25
    20c8:	51 83       	std	Z+1, r21	; 0x01
    20ca:	40 83       	st	Z, r20
    if(pcounter->counter[prio] == (count_t)0)pcounter->index &= ~mask;
    20cc:	8c 81       	ldd	r24, Y+4	; 0x04
    20ce:	88 2f       	mov	r24, r24
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	2a 81       	ldd	r18, Y+2	; 0x02
    20d4:	3b 81       	ldd	r19, Y+3	; 0x03
    20d6:	88 0f       	add	r24, r24
    20d8:	99 1f       	adc	r25, r25
    20da:	f9 01       	movw	r30, r18
    20dc:	e8 0f       	add	r30, r24
    20de:	f9 1f       	adc	r31, r25
    20e0:	80 81       	ld	r24, Z
    20e2:	91 81       	ldd	r25, Z+1	; 0x01
    20e4:	00 97       	sbiw	r24, 0x00	; 0
    20e6:	51 f4       	brne	.+20     	; 0x20fc <pcounter_dec+0x8c>
    20e8:	ea 81       	ldd	r30, Y+2	; 0x02
    20ea:	fb 81       	ldd	r31, Y+3	; 0x03
    20ec:	80 89       	ldd	r24, Z+16	; 0x10
    20ee:	98 2f       	mov	r25, r24
    20f0:	89 81       	ldd	r24, Y+1	; 0x01
    20f2:	80 95       	com	r24
    20f4:	89 23       	and	r24, r25
    20f6:	ea 81       	ldd	r30, Y+2	; 0x02
    20f8:	fb 81       	ldd	r31, Y+3	; 0x03
    20fa:	80 8b       	std	Z+16, r24	; 0x10
    return pcounter->index & mask;
    20fc:	ea 81       	ldd	r30, Y+2	; 0x02
    20fe:	fb 81       	ldd	r31, Y+3	; 0x03
    2100:	90 89       	ldd	r25, Z+16	; 0x10
    2102:	89 81       	ldd	r24, Y+1	; 0x01
    2104:	89 23       	and	r24, r25
}
    2106:	0f 90       	pop	r0
    2108:	0f 90       	pop	r0
    210a:	0f 90       	pop	r0
    210c:	0f 90       	pop	r0
    210e:	cf 91       	pop	r28
    2110:	df 91       	pop	r29
    2112:	08 95       	ret

00002114 <pitem_init>:
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
// Инициация
void pitem_init( pitem_t * pitem, prio_t prio )
{
    2114:	df 93       	push	r29
    2116:	cf 93       	push	r28
    2118:	00 d0       	rcall	.+0      	; 0x211a <pitem_init+0x6>
    211a:	0f 92       	push	r0
    211c:	cd b7       	in	r28, 0x3d	; 61
    211e:	de b7       	in	r29, 0x3e	; 62
    2120:	9a 83       	std	Y+2, r25	; 0x02
    2122:	89 83       	std	Y+1, r24	; 0x01
    2124:	6b 83       	std	Y+3, r22	; 0x03
    item_init( (item_t *)pitem );
    2126:	89 81       	ldd	r24, Y+1	; 0x01
    2128:	9a 81       	ldd	r25, Y+2	; 0x02
    212a:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <item_init>
    pitem->list = (xlist_t *)0;
    212e:	e9 81       	ldd	r30, Y+1	; 0x01
    2130:	fa 81       	ldd	r31, Y+2	; 0x02
    2132:	15 82       	std	Z+5, r1	; 0x05
    2134:	14 82       	std	Z+4, r1	; 0x04
    pitem->prio = prio;
    2136:	e9 81       	ldd	r30, Y+1	; 0x01
    2138:	fa 81       	ldd	r31, Y+2	; 0x02
    213a:	8b 81       	ldd	r24, Y+3	; 0x03
    213c:	86 83       	std	Z+6, r24	; 0x06
}
    213e:	0f 90       	pop	r0
    2140:	0f 90       	pop	r0
    2142:	0f 90       	pop	r0
    2144:	cf 91       	pop	r28
    2146:	df 91       	pop	r29
    2148:	08 95       	ret

0000214a <pitem_insert>:
// Вставка в список
void pitem_insert( pitem_t * pitem, xlist_t * xlist )
{
    214a:	df 93       	push	r29
    214c:	cf 93       	push	r28
    214e:	cd b7       	in	r28, 0x3d	; 61
    2150:	de b7       	in	r29, 0x3e	; 62
    2152:	28 97       	sbiw	r28, 0x08	; 8
    2154:	0f b6       	in	r0, 0x3f	; 63
    2156:	f8 94       	cli
    2158:	de bf       	out	0x3e, r29	; 62
    215a:	0f be       	out	0x3f, r0	; 63
    215c:	cd bf       	out	0x3d, r28	; 61
    215e:	9e 83       	std	Y+6, r25	; 0x06
    2160:	8d 83       	std	Y+5, r24	; 0x05
    2162:	78 87       	std	Y+8, r23	; 0x08
    2164:	6f 83       	std	Y+7, r22	; 0x07
    prio_t prio;
    index_t mask;
    item_t ** head;

    prio = pitem->prio;
    2166:	ed 81       	ldd	r30, Y+5	; 0x05
    2168:	fe 81       	ldd	r31, Y+6	; 0x06
    216a:	86 81       	ldd	r24, Z+6	; 0x06
    216c:	8c 83       	std	Y+4, r24	; 0x04
    mask = ((index_t)1)<<prio;
    216e:	8c 81       	ldd	r24, Y+4	; 0x04
    2170:	28 2f       	mov	r18, r24
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	81 e0       	ldi	r24, 0x01	; 1
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	02 c0       	rjmp	.+4      	; 0x217e <pitem_insert+0x34>
    217a:	88 0f       	add	r24, r24
    217c:	99 1f       	adc	r25, r25
    217e:	2a 95       	dec	r18
    2180:	e2 f7       	brpl	.-8      	; 0x217a <pitem_insert+0x30>
    2182:	8b 83       	std	Y+3, r24	; 0x03
    head = (item_t **)xlist + prio;
    2184:	2f 81       	ldd	r18, Y+7	; 0x07
    2186:	38 85       	ldd	r19, Y+8	; 0x08
    2188:	8c 81       	ldd	r24, Y+4	; 0x04
    218a:	88 2f       	mov	r24, r24
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	88 0f       	add	r24, r24
    2190:	99 1f       	adc	r25, r25
    2192:	82 0f       	add	r24, r18
    2194:	93 1f       	adc	r25, r19
    2196:	9a 83       	std	Y+2, r25	; 0x02
    2198:	89 83       	std	Y+1, r24	; 0x01
    // Пуста ли часть списка с таким приоритетом
    if( ( xlist->index )& mask)
    219a:	ef 81       	ldd	r30, Y+7	; 0x07
    219c:	f8 85       	ldd	r31, Y+8	; 0x08
    219e:	90 89       	ldd	r25, Z+16	; 0x10
    21a0:	8b 81       	ldd	r24, Y+3	; 0x03
    21a2:	89 23       	and	r24, r25
    21a4:	88 23       	and	r24, r24
    21a6:	51 f0       	breq	.+20     	; 0x21bc <pitem_insert+0x72>
    {
        //Не пуста вставляем туда gitem
        item_insert( (item_t *)pitem, *head );
    21a8:	8d 81       	ldd	r24, Y+5	; 0x05
    21aa:	9e 81       	ldd	r25, Y+6	; 0x06
    21ac:	e9 81       	ldd	r30, Y+1	; 0x01
    21ae:	fa 81       	ldd	r31, Y+2	; 0x02
    21b0:	20 81       	ld	r18, Z
    21b2:	31 81       	ldd	r19, Z+1	; 0x01
    21b4:	b9 01       	movw	r22, r18
    21b6:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <item_insert>
    21ba:	0e c0       	rjmp	.+28     	; 0x21d8 <pitem_insert+0x8e>
    }
    else
    {
        // Пуста, gitem будет головой
        *head = (item_t *)pitem;
    21bc:	8d 81       	ldd	r24, Y+5	; 0x05
    21be:	9e 81       	ldd	r25, Y+6	; 0x06
    21c0:	e9 81       	ldd	r30, Y+1	; 0x01
    21c2:	fa 81       	ldd	r31, Y+2	; 0x02
    21c4:	91 83       	std	Z+1, r25	; 0x01
    21c6:	80 83       	st	Z, r24
        xlist->index |= mask;
    21c8:	ef 81       	ldd	r30, Y+7	; 0x07
    21ca:	f8 85       	ldd	r31, Y+8	; 0x08
    21cc:	90 89       	ldd	r25, Z+16	; 0x10
    21ce:	8b 81       	ldd	r24, Y+3	; 0x03
    21d0:	89 2b       	or	r24, r25
    21d2:	ef 81       	ldd	r30, Y+7	; 0x07
    21d4:	f8 85       	ldd	r31, Y+8	; 0x08
    21d6:	80 8b       	std	Z+16, r24	; 0x10
    }
    pitem->list = xlist;
    21d8:	ed 81       	ldd	r30, Y+5	; 0x05
    21da:	fe 81       	ldd	r31, Y+6	; 0x06
    21dc:	8f 81       	ldd	r24, Y+7	; 0x07
    21de:	98 85       	ldd	r25, Y+8	; 0x08
    21e0:	95 83       	std	Z+5, r25	; 0x05
    21e2:	84 83       	std	Z+4, r24	; 0x04
}
    21e4:	28 96       	adiw	r28, 0x08	; 8
    21e6:	0f b6       	in	r0, 0x3f	; 63
    21e8:	f8 94       	cli
    21ea:	de bf       	out	0x3e, r29	; 62
    21ec:	0f be       	out	0x3f, r0	; 63
    21ee:	cd bf       	out	0x3d, r28	; 61
    21f0:	cf 91       	pop	r28
    21f2:	df 91       	pop	r29
    21f4:	08 95       	ret

000021f6 <pitem_fast_cut>:
// Быстрая вырезка из списка
void pitem_fast_cut( pitem_t * pitem )
{
    21f6:	df 93       	push	r29
    21f8:	cf 93       	push	r28
    21fa:	00 d0       	rcall	.+0      	; 0x21fc <pitem_fast_cut+0x6>
    21fc:	00 d0       	rcall	.+0      	; 0x21fe <pitem_fast_cut+0x8>
    21fe:	0f 92       	push	r0
    2200:	cd b7       	in	r28, 0x3d	; 61
    2202:	de b7       	in	r29, 0x3e	; 62
    2204:	9d 83       	std	Y+5, r25	; 0x05
    2206:	8c 83       	std	Y+4, r24	; 0x04
    prio_t prio;
    xlist_t * xlist;

    prio = pitem->prio;
    2208:	ec 81       	ldd	r30, Y+4	; 0x04
    220a:	fd 81       	ldd	r31, Y+5	; 0x05
    220c:	86 81       	ldd	r24, Z+6	; 0x06
    220e:	8b 83       	std	Y+3, r24	; 0x03
    xlist = (xlist_t *)pitem->list;
    2210:	ec 81       	ldd	r30, Y+4	; 0x04
    2212:	fd 81       	ldd	r31, Y+5	; 0x05
    2214:	84 81       	ldd	r24, Z+4	; 0x04
    2216:	95 81       	ldd	r25, Z+5	; 0x05
    2218:	9a 83       	std	Y+2, r25	; 0x02
    221a:	89 83       	std	Y+1, r24	; 0x01
    //Является ли элемент единственным в своей части списка?
    if( ((item_t *)pitem)->next == (item_t *)pitem )
    221c:	ec 81       	ldd	r30, Y+4	; 0x04
    221e:	fd 81       	ldd	r31, Y+5	; 0x05
    2220:	20 81       	ld	r18, Z
    2222:	31 81       	ldd	r19, Z+1	; 0x01
    2224:	8c 81       	ldd	r24, Y+4	; 0x04
    2226:	9d 81       	ldd	r25, Y+5	; 0x05
    2228:	28 17       	cp	r18, r24
    222a:	39 07       	cpc	r19, r25
    222c:	09 f5       	brne	.+66     	; 0x2270 <pitem_fast_cut+0x7a>
    {
        // Да, является!
        xlist->item[prio] = (item_t *)0;
    222e:	8b 81       	ldd	r24, Y+3	; 0x03
    2230:	88 2f       	mov	r24, r24
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	29 81       	ldd	r18, Y+1	; 0x01
    2236:	3a 81       	ldd	r19, Y+2	; 0x02
    2238:	88 0f       	add	r24, r24
    223a:	99 1f       	adc	r25, r25
    223c:	f9 01       	movw	r30, r18
    223e:	e8 0f       	add	r30, r24
    2240:	f9 1f       	adc	r31, r25
    2242:	11 82       	std	Z+1, r1	; 0x01
    2244:	10 82       	st	Z, r1
        xlist->index &= ~(((index_t)1)<<prio);
    2246:	e9 81       	ldd	r30, Y+1	; 0x01
    2248:	fa 81       	ldd	r31, Y+2	; 0x02
    224a:	80 89       	ldd	r24, Z+16	; 0x10
    224c:	48 2f       	mov	r20, r24
    224e:	8b 81       	ldd	r24, Y+3	; 0x03
    2250:	28 2f       	mov	r18, r24
    2252:	30 e0       	ldi	r19, 0x00	; 0
    2254:	81 e0       	ldi	r24, 0x01	; 1
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	02 2e       	mov	r0, r18
    225a:	02 c0       	rjmp	.+4      	; 0x2260 <pitem_fast_cut+0x6a>
    225c:	88 0f       	add	r24, r24
    225e:	99 1f       	adc	r25, r25
    2260:	0a 94       	dec	r0
    2262:	e2 f7       	brpl	.-8      	; 0x225c <pitem_fast_cut+0x66>
    2264:	80 95       	com	r24
    2266:	84 23       	and	r24, r20
    2268:	e9 81       	ldd	r30, Y+1	; 0x01
    226a:	fa 81       	ldd	r31, Y+2	; 0x02
    226c:	80 8b       	std	Z+16, r24	; 0x10
    226e:	1a c0       	rjmp	.+52     	; 0x22a4 <pitem_fast_cut+0xae>
    }
    else
    {
        // Нет, не является!
        // Является ли элемент головой своей части списка?
        if( xlist->item[(prio_t)prio] == (item_t *)pitem )
    2270:	8b 81       	ldd	r24, Y+3	; 0x03
    2272:	88 2f       	mov	r24, r24
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	29 81       	ldd	r18, Y+1	; 0x01
    2278:	3a 81       	ldd	r19, Y+2	; 0x02
    227a:	88 0f       	add	r24, r24
    227c:	99 1f       	adc	r25, r25
    227e:	f9 01       	movw	r30, r18
    2280:	e8 0f       	add	r30, r24
    2282:	f9 1f       	adc	r31, r25
    2284:	20 81       	ld	r18, Z
    2286:	31 81       	ldd	r19, Z+1	; 0x01
    2288:	8c 81       	ldd	r24, Y+4	; 0x04
    228a:	9d 81       	ldd	r25, Y+5	; 0x05
    228c:	28 17       	cp	r18, r24
    228e:	39 07       	cpc	r19, r25
    2290:	29 f4       	brne	.+10     	; 0x229c <pitem_fast_cut+0xa6>
        {
            // Является, список надо переключить
            xlist_switch( xlist, prio );
    2292:	89 81       	ldd	r24, Y+1	; 0x01
    2294:	9a 81       	ldd	r25, Y+2	; 0x02
    2296:	6b 81       	ldd	r22, Y+3	; 0x03
    2298:	0e 94 4e 20 	call	0x409c	; 0x409c <xlist_switch>
        }
        // Собственно - вырезаем элемент
        item_cut( (item_t *)pitem );
    229c:	8c 81       	ldd	r24, Y+4	; 0x04
    229e:	9d 81       	ldd	r25, Y+5	; 0x05
    22a0:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <item_cut>
    }
}
    22a4:	0f 90       	pop	r0
    22a6:	0f 90       	pop	r0
    22a8:	0f 90       	pop	r0
    22aa:	0f 90       	pop	r0
    22ac:	0f 90       	pop	r0
    22ae:	cf 91       	pop	r28
    22b0:	df 91       	pop	r29
    22b2:	08 95       	ret

000022b4 <pitem_cut>:
// Вырезка из списка
void pitem_cut(pitem_t * pitem)
{
    22b4:	df 93       	push	r29
    22b6:	cf 93       	push	r28
    22b8:	00 d0       	rcall	.+0      	; 0x22ba <pitem_cut+0x6>
    22ba:	cd b7       	in	r28, 0x3d	; 61
    22bc:	de b7       	in	r29, 0x3e	; 62
    22be:	9a 83       	std	Y+2, r25	; 0x02
    22c0:	89 83       	std	Y+1, r24	; 0x01
    pitem_fast_cut( pitem );
    22c2:	89 81       	ldd	r24, Y+1	; 0x01
    22c4:	9a 81       	ldd	r25, Y+2	; 0x02
    22c6:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <pitem_fast_cut>
    pitem->list = (xlist_t *)0;
    22ca:	e9 81       	ldd	r30, Y+1	; 0x01
    22cc:	fa 81       	ldd	r31, Y+2	; 0x02
    22ce:	15 82       	std	Z+5, r1	; 0x05
    22d0:	14 82       	std	Z+4, r1	; 0x04
}
    22d2:	0f 90       	pop	r0
    22d4:	0f 90       	pop	r0
    22d6:	cf 91       	pop	r28
    22d8:	df 91       	pop	r29
    22da:	08 95       	ret

000022dc <pitem_xlist_chain>:

pitem_t * pitem_xlist_chain( xlist_t * src )
{
    22dc:	df 93       	push	r29
    22de:	cf 93       	push	r28
    22e0:	cd b7       	in	r28, 0x3d	; 61
    22e2:	de b7       	in	r29, 0x3e	; 62
    22e4:	2d 97       	sbiw	r28, 0x0d	; 13
    22e6:	0f b6       	in	r0, 0x3f	; 63
    22e8:	f8 94       	cli
    22ea:	de bf       	out	0x3e, r29	; 62
    22ec:	0f be       	out	0x3f, r0	; 63
    22ee:	cd bf       	out	0x3d, r28	; 61
    22f0:	9d 87       	std	Y+13, r25	; 0x0d
    22f2:	8c 87       	std	Y+12, r24	; 0x0c
    pitem_t * ret;  // return value
    ret = (pitem_t *)xlist_head( src );     // will return former xlist head
    22f4:	8c 85       	ldd	r24, Y+12	; 0x0c
    22f6:	9d 85       	ldd	r25, Y+13	; 0x0d
    22f8:	0e 94 22 20 	call	0x4044	; 0x4044 <xlist_head>
    22fc:	9b 87       	std	Y+11, r25	; 0x0b
    22fe:	8a 87       	std	Y+10, r24	; 0x0a
    if(ret)
    2300:	8a 85       	ldd	r24, Y+10	; 0x0a
    2302:	9b 85       	ldd	r25, Y+11	; 0x0b
    2304:	00 97       	sbiw	r24, 0x00	; 0
    2306:	09 f4       	brne	.+2      	; 0x230a <pitem_xlist_chain+0x2e>
    2308:	77 c0       	rjmp	.+238    	; 0x23f8 <pitem_xlist_chain+0x11c>
                index;  // buffer for xlist index
        prio_t  prio;   // current working priority
        item_t * tail;  // current list tail;


        tail = ((item_t *)ret)->prev;           // current list tail initial value
    230a:	ea 85       	ldd	r30, Y+10	; 0x0a
    230c:	fb 85       	ldd	r31, Y+11	; 0x0b
    230e:	82 81       	ldd	r24, Z+2	; 0x02
    2310:	93 81       	ldd	r25, Z+3	; 0x03
    2312:	9e 83       	std	Y+6, r25	; 0x06
    2314:	8d 83       	std	Y+5, r24	; 0x05
        prio = ret->prio;                       // initial working prio
    2316:	ea 85       	ldd	r30, Y+10	; 0x0a
    2318:	fb 85       	ldd	r31, Y+11	; 0x0b
    231a:	86 81       	ldd	r24, Z+6	; 0x06
    231c:	8f 83       	std	Y+7, r24	; 0x07
        src->item[prio++] = (item_t *)0;        // cut all items from current xlist part
    231e:	8f 81       	ldd	r24, Y+7	; 0x07
    2320:	88 2f       	mov	r24, r24
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	2c 85       	ldd	r18, Y+12	; 0x0c
    2326:	3d 85       	ldd	r19, Y+13	; 0x0d
    2328:	88 0f       	add	r24, r24
    232a:	99 1f       	adc	r25, r25
    232c:	f9 01       	movw	r30, r18
    232e:	e8 0f       	add	r30, r24
    2330:	f9 1f       	adc	r31, r25
    2332:	11 82       	std	Z+1, r1	; 0x01
    2334:	10 82       	st	Z, r1
    2336:	8f 81       	ldd	r24, Y+7	; 0x07
    2338:	8f 5f       	subi	r24, 0xFF	; 255
    233a:	8f 83       	std	Y+7, r24	; 0x07
        index = src->index;                     // remember xlist index to improve performance
    233c:	ec 85       	ldd	r30, Y+12	; 0x0c
    233e:	fd 85       	ldd	r31, Y+13	; 0x0d
    2340:	80 89       	ldd	r24, Z+16	; 0x10
    2342:	88 87       	std	Y+8, r24	; 0x08
        mask = ((index_t)1) << prio;            // initial mask value
    2344:	8f 81       	ldd	r24, Y+7	; 0x07
    2346:	28 2f       	mov	r18, r24
    2348:	30 e0       	ldi	r19, 0x00	; 0
    234a:	81 e0       	ldi	r24, 0x01	; 1
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	02 2e       	mov	r0, r18
    2350:	02 c0       	rjmp	.+4      	; 0x2356 <pitem_xlist_chain+0x7a>
    2352:	88 0f       	add	r24, r24
    2354:	99 1f       	adc	r25, r25
    2356:	0a 94       	dec	r0
    2358:	e2 f7       	brpl	.-8      	; 0x2352 <pitem_xlist_chain+0x76>
    235a:	89 87       	std	Y+9, r24	; 0x09
    235c:	3b c0       	rjmp	.+118    	; 0x23d4 <pitem_xlist_chain+0xf8>
        // cut all items from xlist and form an ordinary list of them
        while(mask)
        {
            if( index & mask )
    235e:	88 85       	ldd	r24, Y+8	; 0x08
    2360:	99 85       	ldd	r25, Y+9	; 0x09
    2362:	89 23       	and	r24, r25
    2364:	88 23       	and	r24, r24
    2366:	81 f1       	breq	.+96     	; 0x23c8 <pitem_xlist_chain+0xec>
            {
                // current part of xlist has some items to cut
                item_t * xhead;
                item_t * buf;
                xhead = src->item[prio];                    // current xlist head;
    2368:	8f 81       	ldd	r24, Y+7	; 0x07
    236a:	88 2f       	mov	r24, r24
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2370:	3d 85       	ldd	r19, Y+13	; 0x0d
    2372:	88 0f       	add	r24, r24
    2374:	99 1f       	adc	r25, r25
    2376:	f9 01       	movw	r30, r18
    2378:	e8 0f       	add	r30, r24
    237a:	f9 1f       	adc	r31, r25
    237c:	80 81       	ld	r24, Z
    237e:	91 81       	ldd	r25, Z+1	; 0x01
    2380:	9c 83       	std	Y+4, r25	; 0x04
    2382:	8b 83       	std	Y+3, r24	; 0x03
                src->item[prio] = (item_t *)0;              // cut all items from current xlist part
    2384:	8f 81       	ldd	r24, Y+7	; 0x07
    2386:	88 2f       	mov	r24, r24
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	2c 85       	ldd	r18, Y+12	; 0x0c
    238c:	3d 85       	ldd	r19, Y+13	; 0x0d
    238e:	88 0f       	add	r24, r24
    2390:	99 1f       	adc	r25, r25
    2392:	f9 01       	movw	r30, r18
    2394:	e8 0f       	add	r30, r24
    2396:	f9 1f       	adc	r31, r25
    2398:	11 82       	std	Z+1, r1	; 0x01
    239a:	10 82       	st	Z, r1
                // chain former xlist head to a list tail
                tail->next = xhead;
    239c:	ed 81       	ldd	r30, Y+5	; 0x05
    239e:	fe 81       	ldd	r31, Y+6	; 0x06
    23a0:	8b 81       	ldd	r24, Y+3	; 0x03
    23a2:	9c 81       	ldd	r25, Y+4	; 0x04
    23a4:	91 83       	std	Z+1, r25	; 0x01
    23a6:	80 83       	st	Z, r24
                buf = xhead->prev;
    23a8:	eb 81       	ldd	r30, Y+3	; 0x03
    23aa:	fc 81       	ldd	r31, Y+4	; 0x04
    23ac:	82 81       	ldd	r24, Z+2	; 0x02
    23ae:	93 81       	ldd	r25, Z+3	; 0x03
    23b0:	9a 83       	std	Y+2, r25	; 0x02
    23b2:	89 83       	std	Y+1, r24	; 0x01
                xhead->prev = tail;
    23b4:	eb 81       	ldd	r30, Y+3	; 0x03
    23b6:	fc 81       	ldd	r31, Y+4	; 0x04
    23b8:	8d 81       	ldd	r24, Y+5	; 0x05
    23ba:	9e 81       	ldd	r25, Y+6	; 0x06
    23bc:	93 83       	std	Z+3, r25	; 0x03
    23be:	82 83       	std	Z+2, r24	; 0x02
                tail = buf;
    23c0:	89 81       	ldd	r24, Y+1	; 0x01
    23c2:	9a 81       	ldd	r25, Y+2	; 0x02
    23c4:	9e 83       	std	Y+6, r25	; 0x06
    23c6:	8d 83       	std	Y+5, r24	; 0x05
            }
            mask <<= (prio_t)1;
    23c8:	89 85       	ldd	r24, Y+9	; 0x09
    23ca:	88 0f       	add	r24, r24
    23cc:	89 87       	std	Y+9, r24	; 0x09
            prio++;
    23ce:	8f 81       	ldd	r24, Y+7	; 0x07
    23d0:	8f 5f       	subi	r24, 0xFF	; 255
    23d2:	8f 83       	std	Y+7, r24	; 0x07
        prio = ret->prio;                       // initial working prio
        src->item[prio++] = (item_t *)0;        // cut all items from current xlist part
        index = src->index;                     // remember xlist index to improve performance
        mask = ((index_t)1) << prio;            // initial mask value
        // cut all items from xlist and form an ordinary list of them
        while(mask)
    23d4:	89 85       	ldd	r24, Y+9	; 0x09
    23d6:	88 23       	and	r24, r24
    23d8:	11 f6       	brne	.-124    	; 0x235e <pitem_xlist_chain+0x82>
            }
            mask <<= (prio_t)1;
            prio++;
        }
        // complete the list by chaining tail and head
        ((item_t *)ret)->prev = tail;
    23da:	ea 85       	ldd	r30, Y+10	; 0x0a
    23dc:	fb 85       	ldd	r31, Y+11	; 0x0b
    23de:	8d 81       	ldd	r24, Y+5	; 0x05
    23e0:	9e 81       	ldd	r25, Y+6	; 0x06
    23e2:	93 83       	std	Z+3, r25	; 0x03
    23e4:	82 83       	std	Z+2, r24	; 0x02
        tail->next = (item_t *)ret;
    23e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    23e8:	9b 85       	ldd	r25, Y+11	; 0x0b
    23ea:	ed 81       	ldd	r30, Y+5	; 0x05
    23ec:	fe 81       	ldd	r31, Y+6	; 0x06
    23ee:	91 83       	std	Z+1, r25	; 0x01
    23f0:	80 83       	st	Z, r24
        src->index = (index_t)0;        // xlist is empty.
    23f2:	ec 85       	ldd	r30, Y+12	; 0x0c
    23f4:	fd 85       	ldd	r31, Y+13	; 0x0d
    23f6:	10 8a       	std	Z+16, r1	; 0x10
    }
    return ret;                     // return list head;
    23f8:	8a 85       	ldd	r24, Y+10	; 0x0a
    23fa:	9b 85       	ldd	r25, Y+11	; 0x0b
}
    23fc:	2d 96       	adiw	r28, 0x0d	; 13
    23fe:	0f b6       	in	r0, 0x3f	; 63
    2400:	f8 94       	cli
    2402:	de bf       	out	0x3e, r29	; 62
    2404:	0f be       	out	0x3f, r0	; 63
    2406:	cd bf       	out	0x3d, r28	; 61
    2408:	cf 91       	pop	r28
    240a:	df 91       	pop	r29
    240c:	08 95       	ret

0000240e <proc_init_isr>:
    bool_t is_rt // если true, значит процесс будет иметть поведение RT
#ifdef CONFIG_MP
    ,affinity_t affinity
#endif // CONFIG_MP
)
{
    240e:	8f 92       	push	r8
    2410:	af 92       	push	r10
    2412:	bf 92       	push	r11
    2414:	cf 92       	push	r12
    2416:	ef 92       	push	r14
    2418:	ff 92       	push	r15
    241a:	0f 93       	push	r16
    241c:	1f 93       	push	r17
    241e:	df 93       	push	r29
    2420:	cf 93       	push	r28
    2422:	cd b7       	in	r28, 0x3d	; 61
    2424:	de b7       	in	r29, 0x3e	; 62
    2426:	62 97       	sbiw	r28, 0x12	; 18
    2428:	0f b6       	in	r0, 0x3f	; 63
    242a:	f8 94       	cli
    242c:	de bf       	out	0x3e, r29	; 62
    242e:	0f be       	out	0x3f, r0	; 63
    2430:	cd bf       	out	0x3d, r28	; 61
    2432:	9a 83       	std	Y+2, r25	; 0x02
    2434:	89 83       	std	Y+1, r24	; 0x01
    2436:	7c 83       	std	Y+4, r23	; 0x04
    2438:	6b 83       	std	Y+3, r22	; 0x03
    243a:	5e 83       	std	Y+6, r21	; 0x06
    243c:	4d 83       	std	Y+5, r20	; 0x05
    243e:	38 87       	std	Y+8, r19	; 0x08
    2440:	2f 83       	std	Y+7, r18	; 0x07
    2442:	1a 87       	std	Y+10, r17	; 0x0a
    2444:	09 87       	std	Y+9, r16	; 0x09
    2446:	fc 86       	std	Y+12, r15	; 0x0c
    2448:	eb 86       	std	Y+11, r14	; 0x0b
    244a:	cd 86       	std	Y+13, r12	; 0x0d
    244c:	bf 86       	std	Y+15, r11	; 0x0f
    244e:	ae 86       	std	Y+14, r10	; 0x0e
    2450:	88 8a       	std	Y+16, r8	; 0x10
    SPIN_INIT( proc );
    2452:	89 81       	ldd	r24, Y+1	; 0x01
    2454:	9a 81       	ldd	r25, Y+2	; 0x02
    2456:	83 96       	adiw	r24, 0x23	; 35
    2458:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <spin_init>
    SPIN_LOCK( proc );
    245c:	89 81       	ldd	r24, Y+1	; 0x01
    245e:	9a 81       	ldd	r25, Y+2	; 0x02
    2460:	83 96       	adiw	r24, 0x23	; 35
    2462:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>

    pitem_init( (pitem_t *)proc, prio );
    2466:	89 81       	ldd	r24, Y+1	; 0x01
    2468:	9a 81       	ldd	r25, Y+2	; 0x02
    246a:	6d 85       	ldd	r22, Y+13	; 0x0d
    246c:	0e 94 8a 10 	call	0x2114	; 0x2114 <pitem_init>
    proc->flags = ( is_rt )?PROC_FLG_RT:(flag_t)0;
    2470:	88 89       	ldd	r24, Y+16	; 0x10
    2472:	88 23       	and	r24, r24
    2474:	29 f0       	breq	.+10     	; 0x2480 <proc_init_isr+0x72>
    2476:	81 e0       	ldi	r24, 0x01	; 1
    2478:	90 e0       	ldi	r25, 0x00	; 0
    247a:	9a 8b       	std	Y+18, r25	; 0x12
    247c:	89 8b       	std	Y+17, r24	; 0x11
    247e:	02 c0       	rjmp	.+4      	; 0x2484 <proc_init_isr+0x76>
    2480:	1a 8a       	std	Y+18, r1	; 0x12
    2482:	19 8a       	std	Y+17, r1	; 0x11
    2484:	e9 81       	ldd	r30, Y+1	; 0x01
    2486:	fa 81       	ldd	r31, Y+2	; 0x02
    2488:	89 89       	ldd	r24, Y+17	; 0x11
    248a:	9a 89       	ldd	r25, Y+18	; 0x12
    248c:	90 87       	std	Z+8, r25	; 0x08
    248e:	87 83       	std	Z+7, r24	; 0x07

    PROC_LRES_INIT( proc );
    2490:	89 81       	ldd	r24, Y+1	; 0x01
    2492:	9a 81       	ldd	r25, Y+2	; 0x02
    2494:	0a 96       	adiw	r24, 0x0a	; 10
    2496:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <pcounter_init>
#ifdef CONFIG_USE_HIGHEST_LOCKER
    proc->base_prio = prio;
    249a:	e9 81       	ldd	r30, Y+1	; 0x01
    249c:	fa 81       	ldd	r31, Y+2	; 0x02
    249e:	8d 85       	ldd	r24, Y+13	; 0x0d
    24a0:	81 87       	std	Z+9, r24	; 0x09
#endif
    proc->time_quant = time_quant;
    24a2:	8e 85       	ldd	r24, Y+14	; 0x0e
    24a4:	9f 85       	ldd	r25, Y+15	; 0x0f
    24a6:	e9 81       	ldd	r30, Y+1	; 0x01
    24a8:	fa 81       	ldd	r31, Y+2	; 0x02
    24aa:	94 8f       	std	Z+28, r25	; 0x1c
    24ac:	83 8f       	std	Z+27, r24	; 0x1b
    proc->timer = time_quant;
    24ae:	8e 85       	ldd	r24, Y+14	; 0x0e
    24b0:	9f 85       	ldd	r25, Y+15	; 0x0f
    24b2:	e9 81       	ldd	r30, Y+1	; 0x01
    24b4:	fa 81       	ldd	r31, Y+2	; 0x02
    24b6:	96 8f       	std	Z+30, r25	; 0x1e
    24b8:	85 8f       	std	Z+29, r24	; 0x1d
#ifdef CONFIG_MP
    proc->core_id = (core_id_t)0;
    24ba:	e9 81       	ldd	r30, Y+1	; 0x01
    24bc:	fa 81       	ldd	r31, Y+2	; 0x02
    24be:	11 a2       	std	Z+33, r1	; 0x21
    proc->affinity = affinity;
    24c0:	e9 81       	ldd	r30, Y+1	; 0x01
    24c2:	fa 81       	ldd	r31, Y+2	; 0x02
    24c4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    24c6:	82 a3       	std	Z+34, r24	; 0x22
#endif // CONFIG_MP
    proc->pmain = pmain;
    24c8:	e9 81       	ldd	r30, Y+1	; 0x01
    24ca:	fa 81       	ldd	r31, Y+2	; 0x02
    24cc:	8b 81       	ldd	r24, Y+3	; 0x03
    24ce:	9c 81       	ldd	r25, Y+4	; 0x04
    24d0:	95 a3       	std	Z+37, r25	; 0x25
    24d2:	84 a3       	std	Z+36, r24	; 0x24
    proc->sv_hook = sv_hook;
    24d4:	e9 81       	ldd	r30, Y+1	; 0x01
    24d6:	fa 81       	ldd	r31, Y+2	; 0x02
    24d8:	8d 81       	ldd	r24, Y+5	; 0x05
    24da:	9e 81       	ldd	r25, Y+6	; 0x06
    24dc:	97 a3       	std	Z+39, r25	; 0x27
    24de:	86 a3       	std	Z+38, r24	; 0x26
    proc->rs_hook = rs_hook;
    24e0:	e9 81       	ldd	r30, Y+1	; 0x01
    24e2:	fa 81       	ldd	r31, Y+2	; 0x02
    24e4:	8f 81       	ldd	r24, Y+7	; 0x07
    24e6:	98 85       	ldd	r25, Y+8	; 0x08
    24e8:	91 a7       	std	Z+41, r25	; 0x29
    24ea:	80 a7       	std	Z+40, r24	; 0x28
    proc->arg = arg;
    24ec:	e9 81       	ldd	r30, Y+1	; 0x01
    24ee:	fa 81       	ldd	r31, Y+2	; 0x02
    24f0:	89 85       	ldd	r24, Y+9	; 0x09
    24f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24f4:	93 a7       	std	Z+43, r25	; 0x2b
    24f6:	82 a7       	std	Z+42, r24	; 0x2a
    proc->sstart = sstart;
    24f8:	e9 81       	ldd	r30, Y+1	; 0x01
    24fa:	fa 81       	ldd	r31, Y+2	; 0x02
    24fc:	8b 85       	ldd	r24, Y+11	; 0x0b
    24fe:	9c 85       	ldd	r25, Y+12	; 0x0c
    2500:	95 a7       	std	Z+45, r25	; 0x2d
    2502:	84 a7       	std	Z+44, r24	; 0x2c
    if( sstart )proc->spointer = proc_stack_init(sstart, (code_t)proc_run_wrapper, (void *)proc);
    2504:	8b 85       	ldd	r24, Y+11	; 0x0b
    2506:	9c 85       	ldd	r25, Y+12	; 0x0c
    2508:	00 97       	sbiw	r24, 0x00	; 0
    250a:	71 f0       	breq	.+28     	; 0x2528 <proc_init_isr+0x11a>
    250c:	42 ec       	ldi	r20, 0xC2	; 194
    250e:	5d e1       	ldi	r21, 0x1D	; 29
    2510:	8b 85       	ldd	r24, Y+11	; 0x0b
    2512:	9c 85       	ldd	r25, Y+12	; 0x0c
    2514:	29 81       	ldd	r18, Y+1	; 0x01
    2516:	3a 81       	ldd	r19, Y+2	; 0x02
    2518:	ba 01       	movw	r22, r20
    251a:	a9 01       	movw	r20, r18
    251c:	0e 94 47 0a 	call	0x148e	; 0x148e <proc_stack_init>
    2520:	e9 81       	ldd	r30, Y+1	; 0x01
    2522:	fa 81       	ldd	r31, Y+2	; 0x02
    2524:	97 a7       	std	Z+47, r25	; 0x2f
    2526:	86 a7       	std	Z+46, r24	; 0x2e

    SPIN_UNLOCK( proc );
    2528:	89 81       	ldd	r24, Y+1	; 0x01
    252a:	9a 81       	ldd	r25, Y+2	; 0x02
    252c:	83 96       	adiw	r24, 0x23	; 35
    252e:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
}
    2532:	62 96       	adiw	r28, 0x12	; 18
    2534:	0f b6       	in	r0, 0x3f	; 63
    2536:	f8 94       	cli
    2538:	de bf       	out	0x3e, r29	; 62
    253a:	0f be       	out	0x3f, r0	; 63
    253c:	cd bf       	out	0x3d, r28	; 61
    253e:	cf 91       	pop	r28
    2540:	df 91       	pop	r29
    2542:	1f 91       	pop	r17
    2544:	0f 91       	pop	r16
    2546:	ff 90       	pop	r15
    2548:	ef 90       	pop	r14
    254a:	cf 90       	pop	r12
    254c:	bf 90       	pop	r11
    254e:	af 90       	pop	r10
    2550:	8f 90       	pop	r8
    2552:	08 95       	ret

00002554 <_proc_run_>:
//  Функция для внутреннего использования - собственно запуск процесса
#ifdef CONFIG_MP
void _proc_run_( proc_t * proc )
{
    2554:	df 93       	push	r29
    2556:	cf 93       	push	r28
    2558:	00 d0       	rcall	.+0      	; 0x255a <_proc_run_+0x6>
    255a:	00 d0       	rcall	.+0      	; 0x255c <_proc_run_+0x8>
    255c:	cd b7       	in	r28, 0x3d	; 61
    255e:	de b7       	in	r29, 0x3e	; 62
    2560:	9c 83       	std	Y+4, r25	; 0x04
    2562:	8b 83       	std	Y+3, r24	; 0x03
    sched_t * proc_sched;
    proc_sched = (sched_t *)kernel.sched + proc->core_id;
    2564:	eb 81       	ldd	r30, Y+3	; 0x03
    2566:	fc 81       	ldd	r31, Y+4	; 0x04
    2568:	81 a1       	ldd	r24, Z+33	; 0x21
    256a:	28 2f       	mov	r18, r24
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	8b e2       	ldi	r24, 0x2B	; 43
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	ac 01       	movw	r20, r24
    2574:	24 9f       	mul	r18, r20
    2576:	c0 01       	movw	r24, r0
    2578:	25 9f       	mul	r18, r21
    257a:	90 0d       	add	r25, r0
    257c:	34 9f       	mul	r19, r20
    257e:	90 0d       	add	r25, r0
    2580:	11 24       	eor	r1, r1
    2582:	87 53       	subi	r24, 0x37	; 55
    2584:	9d 4f       	sbci	r25, 0xFD	; 253
    2586:	9a 83       	std	Y+2, r25	; 0x02
    2588:	89 83       	std	Y+1, r24	; 0x01
    SPIN_LOCK( proc_sched );
    258a:	89 81       	ldd	r24, Y+1	; 0x01
    258c:	9a 81       	ldd	r25, Y+2	; 0x02
    258e:	8a 96       	adiw	r24, 0x2a	; 42
    2590:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    pitem_insert( (pitem_t *)proc, proc_sched->ready );
    2594:	8b 81       	ldd	r24, Y+3	; 0x03
    2596:	9c 81       	ldd	r25, Y+4	; 0x04
    2598:	e9 81       	ldd	r30, Y+1	; 0x01
    259a:	fa 81       	ldd	r31, Y+2	; 0x02
    259c:	22 81       	ldd	r18, Z+2	; 0x02
    259e:	33 81       	ldd	r19, Z+3	; 0x03
    25a0:	b9 01       	movw	r22, r18
    25a2:	0e 94 a5 10 	call	0x214a	; 0x214a <pitem_insert>
    SPIN_UNLOCK( proc_sched );
    25a6:	89 81       	ldd	r24, Y+1	; 0x01
    25a8:	9a 81       	ldd	r25, Y+2	; 0x02
    25aa:	8a 96       	adiw	r24, 0x2a	; 42
    25ac:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
}
    25b0:	0f 90       	pop	r0
    25b2:	0f 90       	pop	r0
    25b4:	0f 90       	pop	r0
    25b6:	0f 90       	pop	r0
    25b8:	cf 91       	pop	r28
    25ba:	df 91       	pop	r29
    25bc:	08 95       	ret

000025be <_proc_run>:
#endif // CONFIG_MP

void _proc_run( proc_t * proc )
{
    25be:	df 93       	push	r29
    25c0:	cf 93       	push	r28
    25c2:	00 d0       	rcall	.+0      	; 0x25c4 <_proc_run+0x6>
    25c4:	cd b7       	in	r28, 0x3d	; 61
    25c6:	de b7       	in	r29, 0x3e	; 62
    25c8:	9a 83       	std	Y+2, r25	; 0x02
    25ca:	89 83       	std	Y+1, r24	; 0x01
    proc->flags |= PROC_FLG_RUN;
    25cc:	e9 81       	ldd	r30, Y+1	; 0x01
    25ce:	fa 81       	ldd	r31, Y+2	; 0x02
    25d0:	87 81       	ldd	r24, Z+7	; 0x07
    25d2:	90 85       	ldd	r25, Z+8	; 0x08
    25d4:	82 60       	ori	r24, 0x02	; 2
    25d6:	e9 81       	ldd	r30, Y+1	; 0x01
    25d8:	fa 81       	ldd	r31, Y+2	; 0x02
    25da:	90 87       	std	Z+8, r25	; 0x08
    25dc:	87 83       	std	Z+7, r24	; 0x07
#ifdef CONFIG_MP
    spin_lock( &kernel.stat_lock );
    25de:	81 e8       	ldi	r24, 0x81	; 129
    25e0:	93 e0       	ldi	r25, 0x03	; 3
    25e2:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    proc->core_id = sched_load_balancer( proc, (stat_t *)kernel.stat );
    25e6:	89 81       	ldd	r24, Y+1	; 0x01
    25e8:	9a 81       	ldd	r25, Y+2	; 0x02
    25ea:	2f e7       	ldi	r18, 0x7F	; 127
    25ec:	33 e0       	ldi	r19, 0x03	; 3
    25ee:	b9 01       	movw	r22, r18
    25f0:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <sched_load_balancer>
    25f4:	e9 81       	ldd	r30, Y+1	; 0x01
    25f6:	fa 81       	ldd	r31, Y+2	; 0x02
    25f8:	81 a3       	std	Z+33, r24	; 0x21
    stat_inc( proc, (stat_t *)kernel.stat+proc->core_id );
    25fa:	e9 81       	ldd	r30, Y+1	; 0x01
    25fc:	fa 81       	ldd	r31, Y+2	; 0x02
    25fe:	81 a1       	ldd	r24, Z+33	; 0x21
    2600:	88 2f       	mov	r24, r24
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	9c 01       	movw	r18, r24
    2606:	21 58       	subi	r18, 0x81	; 129
    2608:	3c 4f       	sbci	r19, 0xFC	; 252
    260a:	89 81       	ldd	r24, Y+1	; 0x01
    260c:	9a 81       	ldd	r25, Y+2	; 0x02
    260e:	b9 01       	movw	r22, r18
    2610:	0e 94 6f 01 	call	0x2de	; 0x2de <stat_inc>
    spin_unlock( &kernel.stat_lock );
    2614:	81 e8       	ldi	r24, 0x81	; 129
    2616:	93 e0       	ldi	r25, 0x03	; 3
    2618:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
#endif
    _proc_run_( proc );
    261c:	89 81       	ldd	r24, Y+1	; 0x01
    261e:	9a 81       	ldd	r25, Y+2	; 0x02
    2620:	0e 94 aa 12 	call	0x2554	; 0x2554 <_proc_run_>

    RESCHED_PROC( proc );
    2624:	e9 81       	ldd	r30, Y+1	; 0x01
    2626:	fa 81       	ldd	r31, Y+2	; 0x02
    2628:	81 a1       	ldd	r24, Z+33	; 0x21
    262a:	0e 94 b7 01 	call	0x36e	; 0x36e <resched>
}
    262e:	0f 90       	pop	r0
    2630:	0f 90       	pop	r0
    2632:	cf 91       	pop	r28
    2634:	df 91       	pop	r29
    2636:	08 95       	ret

00002638 <proc_run_isr>:
// Функция общего пользования - запуск процесса из обработчика прерывания, прерывания должны быть запрещены во время запуска
bool_t proc_run_isr(proc_t * proc)
{
    2638:	df 93       	push	r29
    263a:	cf 93       	push	r28
    263c:	00 d0       	rcall	.+0      	; 0x263e <proc_run_isr+0x6>
    263e:	0f 92       	push	r0
    2640:	cd b7       	in	r28, 0x3d	; 61
    2642:	de b7       	in	r29, 0x3e	; 62
    2644:	9b 83       	std	Y+3, r25	; 0x03
    2646:	8a 83       	std	Y+2, r24	; 0x02
    bool_t ret = (bool_t)1;
    2648:	81 e0       	ldi	r24, 0x01	; 1
    264a:	89 83       	std	Y+1, r24	; 0x01

    SPIN_LOCK( proc );
    264c:	8a 81       	ldd	r24, Y+2	; 0x02
    264e:	9b 81       	ldd	r25, Y+3	; 0x03
    2650:	83 96       	adiw	r24, 0x23	; 35
    2652:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>

    if( proc->flags & (PROC_FLG_RUN|PROC_FLG_QUEUE|PROC_FLG_WAIT|PROC_FLG_IPCW|PROC_FLG_END|PROC_FLG_DEAD|PROC_FLG_WD_STOP) )
    2656:	ea 81       	ldd	r30, Y+2	; 0x02
    2658:	fb 81       	ldd	r31, Y+3	; 0x03
    265a:	87 81       	ldd	r24, Z+7	; 0x07
    265c:	90 85       	ldd	r25, Z+8	; 0x08
    265e:	82 77       	andi	r24, 0x72	; 114
    2660:	97 70       	andi	r25, 0x07	; 7
    2662:	00 97       	sbiw	r24, 0x00	; 0
    2664:	11 f0       	breq	.+4      	; 0x266a <proc_run_isr+0x32>
    {
        ret = (bool_t)0;
    2666:	19 82       	std	Y+1, r1	; 0x01
    2668:	04 c0       	rjmp	.+8      	; 0x2672 <proc_run_isr+0x3a>
        goto end;
    }
    _proc_run( proc );
    266a:	8a 81       	ldd	r24, Y+2	; 0x02
    266c:	9b 81       	ldd	r25, Y+3	; 0x03
    266e:	0e 94 df 12 	call	0x25be	; 0x25be <_proc_run>
end:

    SPIN_UNLOCK( proc );
    2672:	8a 81       	ldd	r24, Y+2	; 0x02
    2674:	9b 81       	ldd	r25, Y+3	; 0x03
    2676:	83 96       	adiw	r24, 0x23	; 35
    2678:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>

    return ret;
    267c:	89 81       	ldd	r24, Y+1	; 0x01
}
    267e:	0f 90       	pop	r0
    2680:	0f 90       	pop	r0
    2682:	0f 90       	pop	r0
    2684:	cf 91       	pop	r28
    2686:	df 91       	pop	r29
    2688:	08 95       	ret

0000268a <proc_restart_isr>:
// Перезепуск процесса из обработчика прерываний, прерывания должны быть запрещены
bool_t proc_restart_isr(proc_t * proc)
{
    268a:	df 93       	push	r29
    268c:	cf 93       	push	r28
    268e:	00 d0       	rcall	.+0      	; 0x2690 <proc_restart_isr+0x6>
    2690:	00 d0       	rcall	.+0      	; 0x2692 <proc_restart_isr+0x8>
    2692:	0f 92       	push	r0
    2694:	cd b7       	in	r28, 0x3d	; 61
    2696:	de b7       	in	r29, 0x3e	; 62
    2698:	9b 83       	std	Y+3, r25	; 0x03
    269a:	8a 83       	std	Y+2, r24	; 0x02
    bool_t ret = (bool_t)1;
    269c:	81 e0       	ldi	r24, 0x01	; 1
    269e:	89 83       	std	Y+1, r24	; 0x01

    SPIN_LOCK( proc );
    26a0:	8a 81       	ldd	r24, Y+2	; 0x02
    26a2:	9b 81       	ldd	r25, Y+3	; 0x03
    26a4:	83 96       	adiw	r24, 0x23	; 35
    26a6:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>

    if( proc->flags & (PROC_FLG_RUN|PROC_FLG_MUTEX|PROC_FLG_SEM|PROC_FLG_QUEUE|PROC_FLG_WAIT|PROC_FLG_IPCW|PROC_FLG_DEAD) )
    26aa:	ea 81       	ldd	r30, Y+2	; 0x02
    26ac:	fb 81       	ldd	r31, Y+3	; 0x03
    26ae:	87 81       	ldd	r24, Z+7	; 0x07
    26b0:	90 85       	ldd	r25, Z+8	; 0x08
    26b2:	8e 77       	andi	r24, 0x7E	; 126
    26b4:	94 70       	andi	r25, 0x04	; 4
    26b6:	00 97       	sbiw	r24, 0x00	; 0
    26b8:	11 f0       	breq	.+4      	; 0x26be <proc_restart_isr+0x34>
    {
        ret = (bool_t)0;
    26ba:	19 82       	std	Y+1, r1	; 0x01
    26bc:	3b c0       	rjmp	.+118    	; 0x2734 <proc_restart_isr+0xaa>
        goto end;
    }
    proc->flags = ( proc->flags & PROC_FLG_RT )?PROC_FLG_RT:(flag_t)0;
    26be:	ea 81       	ldd	r30, Y+2	; 0x02
    26c0:	fb 81       	ldd	r31, Y+3	; 0x03
    26c2:	87 81       	ldd	r24, Z+7	; 0x07
    26c4:	90 85       	ldd	r25, Z+8	; 0x08
    26c6:	81 70       	andi	r24, 0x01	; 1
    26c8:	90 70       	andi	r25, 0x00	; 0
    26ca:	88 23       	and	r24, r24
    26cc:	29 f0       	breq	.+10     	; 0x26d8 <proc_restart_isr+0x4e>
    26ce:	81 e0       	ldi	r24, 0x01	; 1
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	9d 83       	std	Y+5, r25	; 0x05
    26d4:	8c 83       	std	Y+4, r24	; 0x04
    26d6:	02 c0       	rjmp	.+4      	; 0x26dc <proc_restart_isr+0x52>
    26d8:	1d 82       	std	Y+5, r1	; 0x05
    26da:	1c 82       	std	Y+4, r1	; 0x04
    26dc:	ea 81       	ldd	r30, Y+2	; 0x02
    26de:	fb 81       	ldd	r31, Y+3	; 0x03
    26e0:	8c 81       	ldd	r24, Y+4	; 0x04
    26e2:	9d 81       	ldd	r25, Y+5	; 0x05
    26e4:	90 87       	std	Z+8, r25	; 0x08
    26e6:	87 83       	std	Z+7, r24	; 0x07

    PROC_LRES_INIT( proc );
    26e8:	8a 81       	ldd	r24, Y+2	; 0x02
    26ea:	9b 81       	ldd	r25, Y+3	; 0x03
    26ec:	0a 96       	adiw	r24, 0x0a	; 10
    26ee:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <pcounter_init>

    proc->timer = proc->time_quant;
    26f2:	ea 81       	ldd	r30, Y+2	; 0x02
    26f4:	fb 81       	ldd	r31, Y+3	; 0x03
    26f6:	83 8d       	ldd	r24, Z+27	; 0x1b
    26f8:	94 8d       	ldd	r25, Z+28	; 0x1c
    26fa:	ea 81       	ldd	r30, Y+2	; 0x02
    26fc:	fb 81       	ldd	r31, Y+3	; 0x03
    26fe:	96 8f       	std	Z+30, r25	; 0x1e
    2700:	85 8f       	std	Z+29, r24	; 0x1d

    if( proc->sstart )proc->spointer = proc_stack_init( proc->sstart, (code_t)proc_run_wrapper, (void *)proc );
    2702:	ea 81       	ldd	r30, Y+2	; 0x02
    2704:	fb 81       	ldd	r31, Y+3	; 0x03
    2706:	84 a5       	ldd	r24, Z+44	; 0x2c
    2708:	95 a5       	ldd	r25, Z+45	; 0x2d
    270a:	00 97       	sbiw	r24, 0x00	; 0
    270c:	79 f0       	breq	.+30     	; 0x272c <proc_restart_isr+0xa2>
    270e:	ea 81       	ldd	r30, Y+2	; 0x02
    2710:	fb 81       	ldd	r31, Y+3	; 0x03
    2712:	84 a5       	ldd	r24, Z+44	; 0x2c
    2714:	95 a5       	ldd	r25, Z+45	; 0x2d
    2716:	22 ec       	ldi	r18, 0xC2	; 194
    2718:	3d e1       	ldi	r19, 0x1D	; 29
    271a:	4a 81       	ldd	r20, Y+2	; 0x02
    271c:	5b 81       	ldd	r21, Y+3	; 0x03
    271e:	b9 01       	movw	r22, r18
    2720:	0e 94 47 0a 	call	0x148e	; 0x148e <proc_stack_init>
    2724:	ea 81       	ldd	r30, Y+2	; 0x02
    2726:	fb 81       	ldd	r31, Y+3	; 0x03
    2728:	97 a7       	std	Z+47, r25	; 0x2f
    272a:	86 a7       	std	Z+46, r24	; 0x2e
    _proc_run( proc );
    272c:	8a 81       	ldd	r24, Y+2	; 0x02
    272e:	9b 81       	ldd	r25, Y+3	; 0x03
    2730:	0e 94 df 12 	call	0x25be	; 0x25be <_proc_run>
end:

    SPIN_UNLOCK( proc );
    2734:	8a 81       	ldd	r24, Y+2	; 0x02
    2736:	9b 81       	ldd	r25, Y+3	; 0x03
    2738:	83 96       	adiw	r24, 0x23	; 35
    273a:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>

    return ret;
    273e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2740:	0f 90       	pop	r0
    2742:	0f 90       	pop	r0
    2744:	0f 90       	pop	r0
    2746:	0f 90       	pop	r0
    2748:	0f 90       	pop	r0
    274a:	cf 91       	pop	r28
    274c:	df 91       	pop	r29
    274e:	08 95       	ret

00002750 <_proc_stop_>:
// Функция для внутреннего использования, останов процесса

#ifdef CONFIG_MP
void _proc_stop_(proc_t * proc)
{
    2750:	df 93       	push	r29
    2752:	cf 93       	push	r28
    2754:	00 d0       	rcall	.+0      	; 0x2756 <_proc_stop_+0x6>
    2756:	00 d0       	rcall	.+0      	; 0x2758 <_proc_stop_+0x8>
    2758:	cd b7       	in	r28, 0x3d	; 61
    275a:	de b7       	in	r29, 0x3e	; 62
    275c:	9c 83       	std	Y+4, r25	; 0x04
    275e:	8b 83       	std	Y+3, r24	; 0x03
    spin_lock( &kernel.stat_lock );
    2760:	81 e8       	ldi	r24, 0x81	; 129
    2762:	93 e0       	ldi	r25, 0x03	; 3
    2764:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    stat_dec( proc, (stat_t *)kernel.stat + proc->core_id );
    2768:	eb 81       	ldd	r30, Y+3	; 0x03
    276a:	fc 81       	ldd	r31, Y+4	; 0x04
    276c:	81 a1       	ldd	r24, Z+33	; 0x21
    276e:	88 2f       	mov	r24, r24
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	9c 01       	movw	r18, r24
    2774:	21 58       	subi	r18, 0x81	; 129
    2776:	3c 4f       	sbci	r19, 0xFC	; 252
    2778:	8b 81       	ldd	r24, Y+3	; 0x03
    277a:	9c 81       	ldd	r25, Y+4	; 0x04
    277c:	b9 01       	movw	r22, r18
    277e:	0e 94 57 01 	call	0x2ae	; 0x2ae <stat_dec>
    spin_unlock( &kernel.stat_lock );
    2782:	81 e8       	ldi	r24, 0x81	; 129
    2784:	93 e0       	ldi	r25, 0x03	; 3
    2786:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
    {
        lock_t * xlist_lock;
        xlist_lock = &((sched_t *)kernel.sched + proc->core_id)->lock;
    278a:	eb 81       	ldd	r30, Y+3	; 0x03
    278c:	fc 81       	ldd	r31, Y+4	; 0x04
    278e:	81 a1       	ldd	r24, Z+33	; 0x21
    2790:	28 2f       	mov	r18, r24
    2792:	30 e0       	ldi	r19, 0x00	; 0
    2794:	8b e2       	ldi	r24, 0x2B	; 43
    2796:	90 e0       	ldi	r25, 0x00	; 0
    2798:	ac 01       	movw	r20, r24
    279a:	24 9f       	mul	r18, r20
    279c:	c0 01       	movw	r24, r0
    279e:	25 9f       	mul	r18, r21
    27a0:	90 0d       	add	r25, r0
    27a2:	34 9f       	mul	r19, r20
    27a4:	90 0d       	add	r25, r0
    27a6:	11 24       	eor	r1, r1
    27a8:	87 53       	subi	r24, 0x37	; 55
    27aa:	9d 4f       	sbci	r25, 0xFD	; 253
    27ac:	8a 96       	adiw	r24, 0x2a	; 42
    27ae:	9a 83       	std	Y+2, r25	; 0x02
    27b0:	89 83       	std	Y+1, r24	; 0x01
        spin_lock( xlist_lock );
    27b2:	89 81       	ldd	r24, Y+1	; 0x01
    27b4:	9a 81       	ldd	r25, Y+2	; 0x02
    27b6:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
        pitem_cut( (pitem_t *)proc );
    27ba:	8b 81       	ldd	r24, Y+3	; 0x03
    27bc:	9c 81       	ldd	r25, Y+4	; 0x04
    27be:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <pitem_cut>
        spin_unlock( xlist_lock );
    27c2:	89 81       	ldd	r24, Y+1	; 0x01
    27c4:	9a 81       	ldd	r25, Y+2	; 0x02
    27c6:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
    }
}
    27ca:	0f 90       	pop	r0
    27cc:	0f 90       	pop	r0
    27ce:	0f 90       	pop	r0
    27d0:	0f 90       	pop	r0
    27d2:	cf 91       	pop	r28
    27d4:	df 91       	pop	r29
    27d6:	08 95       	ret

000027d8 <_proc_stop>:
#endif // CONFIG_MP

void _proc_stop(proc_t * proc)
{
    27d8:	df 93       	push	r29
    27da:	cf 93       	push	r28
    27dc:	00 d0       	rcall	.+0      	; 0x27de <_proc_stop+0x6>
    27de:	cd b7       	in	r28, 0x3d	; 61
    27e0:	de b7       	in	r29, 0x3e	; 62
    27e2:	9a 83       	std	Y+2, r25	; 0x02
    27e4:	89 83       	std	Y+1, r24	; 0x01
    proc->flags &= ~PROC_FLG_RUN;
    27e6:	e9 81       	ldd	r30, Y+1	; 0x01
    27e8:	fa 81       	ldd	r31, Y+2	; 0x02
    27ea:	87 81       	ldd	r24, Z+7	; 0x07
    27ec:	90 85       	ldd	r25, Z+8	; 0x08
    27ee:	8d 7f       	andi	r24, 0xFD	; 253
    27f0:	e9 81       	ldd	r30, Y+1	; 0x01
    27f2:	fa 81       	ldd	r31, Y+2	; 0x02
    27f4:	90 87       	std	Z+8, r25	; 0x08
    27f6:	87 83       	std	Z+7, r24	; 0x07
    _proc_stop_( proc );
    27f8:	89 81       	ldd	r24, Y+1	; 0x01
    27fa:	9a 81       	ldd	r25, Y+2	; 0x02
    27fc:	0e 94 a8 13 	call	0x2750	; 0x2750 <_proc_stop_>
    RESCHED_PROC( proc );
    2800:	e9 81       	ldd	r30, Y+1	; 0x01
    2802:	fa 81       	ldd	r31, Y+2	; 0x02
    2804:	81 a1       	ldd	r24, Z+33	; 0x21
    2806:	0e 94 b7 01 	call	0x36e	; 0x36e <resched>
}
    280a:	0f 90       	pop	r0
    280c:	0f 90       	pop	r0
    280e:	cf 91       	pop	r28
    2810:	df 91       	pop	r29
    2812:	08 95       	ret

00002814 <proc_stop_isr>:
// Останов процесса из обработчика прерываний, прерывания должны быть запрещены
bool_t proc_stop_isr(proc_t * proc)
{
    2814:	df 93       	push	r29
    2816:	cf 93       	push	r28
    2818:	00 d0       	rcall	.+0      	; 0x281a <proc_stop_isr+0x6>
    281a:	0f 92       	push	r0
    281c:	cd b7       	in	r28, 0x3d	; 61
    281e:	de b7       	in	r29, 0x3e	; 62
    2820:	9b 83       	std	Y+3, r25	; 0x03
    2822:	8a 83       	std	Y+2, r24	; 0x02
    bool_t ret = (bool_t)0;
    2824:	19 82       	std	Y+1, r1	; 0x01

    SPIN_LOCK( proc );
    2826:	8a 81       	ldd	r24, Y+2	; 0x02
    2828:	9b 81       	ldd	r25, Y+3	; 0x03
    282a:	83 96       	adiw	r24, 0x23	; 35
    282c:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    //Проверка флагов
    //В случчае PROC_FLG_WAIT будем обрабатывать PROC_FLG_PRE_END на выходе из sig_wait.
    //В случае PROC_FLG_MUTEX или PROC_FLG_SEM будем обрабатывать PROC_FLG_PRE_STOP при освобождении общего ресурса.
    //В случае ожидания IPC флаг будем обрабатывать при попытке передать данные или указатель целевому процессу.
    if( proc->flags & (PROC_FLG_MUTEX|PROC_FLG_SEM|PROC_FLG_QUEUE|PROC_FLG_WAIT|PROC_FLG_IPCW) )proc->flags |= PROC_FLG_PRE_STOP;
    2830:	ea 81       	ldd	r30, Y+2	; 0x02
    2832:	fb 81       	ldd	r31, Y+3	; 0x03
    2834:	87 81       	ldd	r24, Z+7	; 0x07
    2836:	90 85       	ldd	r25, Z+8	; 0x08
    2838:	8c 77       	andi	r24, 0x7C	; 124
    283a:	90 70       	andi	r25, 0x00	; 0
    283c:	00 97       	sbiw	r24, 0x00	; 0
    283e:	51 f0       	breq	.+20     	; 0x2854 <proc_stop_isr+0x40>
    2840:	ea 81       	ldd	r30, Y+2	; 0x02
    2842:	fb 81       	ldd	r31, Y+3	; 0x03
    2844:	87 81       	ldd	r24, Z+7	; 0x07
    2846:	90 85       	ldd	r25, Z+8	; 0x08
    2848:	80 68       	ori	r24, 0x80	; 128
    284a:	ea 81       	ldd	r30, Y+2	; 0x02
    284c:	fb 81       	ldd	r31, Y+3	; 0x03
    284e:	90 87       	std	Z+8, r25	; 0x08
    2850:	87 83       	std	Z+7, r24	; 0x07
    2852:	0e c0       	rjmp	.+28     	; 0x2870 <proc_stop_isr+0x5c>
    else if( proc->flags & PROC_FLG_RUN )
    2854:	ea 81       	ldd	r30, Y+2	; 0x02
    2856:	fb 81       	ldd	r31, Y+3	; 0x03
    2858:	87 81       	ldd	r24, Z+7	; 0x07
    285a:	90 85       	ldd	r25, Z+8	; 0x08
    285c:	82 70       	andi	r24, 0x02	; 2
    285e:	90 70       	andi	r25, 0x00	; 0
    2860:	00 97       	sbiw	r24, 0x00	; 0
    2862:	31 f0       	breq	.+12     	; 0x2870 <proc_stop_isr+0x5c>
    {
        _proc_stop( proc );
    2864:	8a 81       	ldd	r24, Y+2	; 0x02
    2866:	9b 81       	ldd	r25, Y+3	; 0x03
    2868:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <_proc_stop>
        ret = (bool_t)1;
    286c:	81 e0       	ldi	r24, 0x01	; 1
    286e:	89 83       	std	Y+1, r24	; 0x01
    }

    SPIN_UNLOCK( proc );
    2870:	8a 81       	ldd	r24, Y+2	; 0x02
    2872:	9b 81       	ldd	r25, Y+3	; 0x03
    2874:	83 96       	adiw	r24, 0x23	; 35
    2876:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>

    return ret;
    287a:	89 81       	ldd	r24, Y+1	; 0x01
}
    287c:	0f 90       	pop	r0
    287e:	0f 90       	pop	r0
    2880:	0f 90       	pop	r0
    2882:	cf 91       	pop	r28
    2884:	df 91       	pop	r29
    2886:	08 95       	ret

00002888 <_proc_flag_stop>:
// Обработка флага останова процесса, для использования с семафорами, мьютексами и сигналами.
void _proc_flag_stop( flag_t mask )
{
    2888:	df 93       	push	r29
    288a:	cf 93       	push	r28
    288c:	00 d0       	rcall	.+0      	; 0x288e <_proc_flag_stop+0x6>
    288e:	00 d0       	rcall	.+0      	; 0x2890 <_proc_flag_stop+0x8>
    2890:	cd b7       	in	r28, 0x3d	; 61
    2892:	de b7       	in	r29, 0x3e	; 62
    2894:	9c 83       	std	Y+4, r25	; 0x04
    2896:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc;
    proc = current_proc();
    2898:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <current_proc>
    289c:	9a 83       	std	Y+2, r25	; 0x02
    289e:	89 83       	std	Y+1, r24	; 0x01

    SPIN_LOCK( proc );
    28a0:	89 81       	ldd	r24, Y+1	; 0x01
    28a2:	9a 81       	ldd	r25, Y+2	; 0x02
    28a4:	83 96       	adiw	r24, 0x23	; 35
    28a6:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>

    proc->flags &= ~mask;
    28aa:	e9 81       	ldd	r30, Y+1	; 0x01
    28ac:	fa 81       	ldd	r31, Y+2	; 0x02
    28ae:	27 81       	ldd	r18, Z+7	; 0x07
    28b0:	30 85       	ldd	r19, Z+8	; 0x08
    28b2:	8b 81       	ldd	r24, Y+3	; 0x03
    28b4:	9c 81       	ldd	r25, Y+4	; 0x04
    28b6:	80 95       	com	r24
    28b8:	90 95       	com	r25
    28ba:	82 23       	and	r24, r18
    28bc:	93 23       	and	r25, r19
    28be:	e9 81       	ldd	r30, Y+1	; 0x01
    28c0:	fa 81       	ldd	r31, Y+2	; 0x02
    28c2:	90 87       	std	Z+8, r25	; 0x08
    28c4:	87 83       	std	Z+7, r24	; 0x07
    if(  PROC_PRE_STOP_TEST(proc)  )
    28c6:	e9 81       	ldd	r30, Y+1	; 0x01
    28c8:	fa 81       	ldd	r31, Y+2	; 0x02
    28ca:	87 81       	ldd	r24, Z+7	; 0x07
    28cc:	90 85       	ldd	r25, Z+8	; 0x08
    28ce:	80 78       	andi	r24, 0x80	; 128
    28d0:	90 70       	andi	r25, 0x00	; 0
    28d2:	00 97       	sbiw	r24, 0x00	; 0
    28d4:	a9 f0       	breq	.+42     	; 0x2900 <_proc_flag_stop+0x78>
    28d6:	e9 81       	ldd	r30, Y+1	; 0x01
    28d8:	fa 81       	ldd	r31, Y+2	; 0x02
    28da:	87 81       	ldd	r24, Z+7	; 0x07
    28dc:	90 85       	ldd	r25, Z+8	; 0x08
    28de:	8c 70       	andi	r24, 0x0C	; 12
    28e0:	90 70       	andi	r25, 0x00	; 0
    28e2:	00 97       	sbiw	r24, 0x00	; 0
    28e4:	69 f4       	brne	.+26     	; 0x2900 <_proc_flag_stop+0x78>
        /*
        Если был запрошен останов целевого процесса,
        и целевой процесс не удерживает общие ресурсы,
        то мы остановим процесс
        */
        proc->flags &= ~PROC_FLG_PRE_STOP;
    28e6:	e9 81       	ldd	r30, Y+1	; 0x01
    28e8:	fa 81       	ldd	r31, Y+2	; 0x02
    28ea:	87 81       	ldd	r24, Z+7	; 0x07
    28ec:	90 85       	ldd	r25, Z+8	; 0x08
    28ee:	8f 77       	andi	r24, 0x7F	; 127
    28f0:	e9 81       	ldd	r30, Y+1	; 0x01
    28f2:	fa 81       	ldd	r31, Y+2	; 0x02
    28f4:	90 87       	std	Z+8, r25	; 0x08
    28f6:	87 83       	std	Z+7, r24	; 0x07
        _proc_stop( proc );
    28f8:	89 81       	ldd	r24, Y+1	; 0x01
    28fa:	9a 81       	ldd	r25, Y+2	; 0x02
    28fc:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <_proc_stop>
    }

    SPIN_UNLOCK( proc );
    2900:	89 81       	ldd	r24, Y+1	; 0x01
    2902:	9a 81       	ldd	r25, Y+2	; 0x02
    2904:	83 96       	adiw	r24, 0x23	; 35
    2906:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>

}
    290a:	0f 90       	pop	r0
    290c:	0f 90       	pop	r0
    290e:	0f 90       	pop	r0
    2910:	0f 90       	pop	r0
    2912:	cf 91       	pop	r28
    2914:	df 91       	pop	r29
    2916:	08 95       	ret

00002918 <_proc_terminate>:

void _proc_terminate( proc_t * proc )
{
    2918:	df 93       	push	r29
    291a:	cf 93       	push	r28
    291c:	00 d0       	rcall	.+0      	; 0x291e <_proc_terminate+0x6>
    291e:	cd b7       	in	r28, 0x3d	; 61
    2920:	de b7       	in	r29, 0x3e	; 62
    2922:	9a 83       	std	Y+2, r25	; 0x02
    2924:	89 83       	std	Y+1, r24	; 0x01

    SPIN_LOCK( proc );
    2926:	89 81       	ldd	r24, Y+1	; 0x01
    2928:	9a 81       	ldd	r25, Y+2	; 0x02
    292a:	83 96       	adiw	r24, 0x23	; 35
    292c:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>

    // Обрабатываем флаги
    // Нельзя выходить из pmain не освободив все захваченные ресурсы, за это процесс будет "убит"!
    if( proc->flags & PROC_FLG_LOCK_MASK ) proc->flags |= PROC_FLG_DEAD;
    2930:	e9 81       	ldd	r30, Y+1	; 0x01
    2932:	fa 81       	ldd	r31, Y+2	; 0x02
    2934:	87 81       	ldd	r24, Z+7	; 0x07
    2936:	90 85       	ldd	r25, Z+8	; 0x08
    2938:	8c 70       	andi	r24, 0x0C	; 12
    293a:	90 70       	andi	r25, 0x00	; 0
    293c:	00 97       	sbiw	r24, 0x00	; 0
    293e:	51 f0       	breq	.+20     	; 0x2954 <_proc_terminate+0x3c>
    2940:	e9 81       	ldd	r30, Y+1	; 0x01
    2942:	fa 81       	ldd	r31, Y+2	; 0x02
    2944:	87 81       	ldd	r24, Z+7	; 0x07
    2946:	90 85       	ldd	r25, Z+8	; 0x08
    2948:	94 60       	ori	r25, 0x04	; 4
    294a:	e9 81       	ldd	r30, Y+1	; 0x01
    294c:	fa 81       	ldd	r31, Y+2	; 0x02
    294e:	90 87       	std	Z+8, r25	; 0x08
    2950:	87 83       	std	Z+7, r24	; 0x07
    2952:	09 c0       	rjmp	.+18     	; 0x2966 <_proc_terminate+0x4e>
    // В противном случае - просто завершаем процесс
    else proc->flags |= PROC_FLG_END;
    2954:	e9 81       	ldd	r30, Y+1	; 0x01
    2956:	fa 81       	ldd	r31, Y+2	; 0x02
    2958:	87 81       	ldd	r24, Z+7	; 0x07
    295a:	90 85       	ldd	r25, Z+8	; 0x08
    295c:	91 60       	ori	r25, 0x01	; 1
    295e:	e9 81       	ldd	r30, Y+1	; 0x01
    2960:	fa 81       	ldd	r31, Y+2	; 0x02
    2962:	90 87       	std	Z+8, r25	; 0x08
    2964:	87 83       	std	Z+7, r24	; 0x07
    proc->flags &= ~PROC_FLG_PRE_STOP_MASK;
    2966:	e9 81       	ldd	r30, Y+1	; 0x01
    2968:	fa 81       	ldd	r31, Y+2	; 0x02
    296a:	87 81       	ldd	r24, Z+7	; 0x07
    296c:	90 85       	ldd	r25, Z+8	; 0x08
    296e:	8d 77       	andi	r24, 0x7D	; 125
    2970:	e9 81       	ldd	r30, Y+1	; 0x01
    2972:	fa 81       	ldd	r31, Y+2	; 0x02
    2974:	90 87       	std	Z+8, r25	; 0x08
    2976:	87 83       	std	Z+7, r24	; 0x07
    // Останов
    _proc_stop_( proc );
    2978:	89 81       	ldd	r24, Y+1	; 0x01
    297a:	9a 81       	ldd	r25, Y+2	; 0x02
    297c:	0e 94 a8 13 	call	0x2750	; 0x2750 <_proc_stop_>
    // Выполнить перепланировку
    RESCHED_PROC( proc );
    2980:	e9 81       	ldd	r30, Y+1	; 0x01
    2982:	fa 81       	ldd	r31, Y+2	; 0x02
    2984:	81 a1       	ldd	r24, Z+33	; 0x21
    2986:	0e 94 b7 01 	call	0x36e	; 0x36e <resched>

    SPIN_UNLOCK( proc );
    298a:	89 81       	ldd	r24, Y+1	; 0x01
    298c:	9a 81       	ldd	r25, Y+2	; 0x02
    298e:	83 96       	adiw	r24, 0x23	; 35
    2990:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
}
    2994:	0f 90       	pop	r0
    2996:	0f 90       	pop	r0
    2998:	cf 91       	pop	r28
    299a:	df 91       	pop	r29
    299c:	08 95       	ret

0000299e <_proc_reset_watchdog>:

void _proc_reset_watchdog( void )
{
    299e:	df 93       	push	r29
    29a0:	cf 93       	push	r28
    29a2:	00 d0       	rcall	.+0      	; 0x29a4 <_proc_reset_watchdog+0x6>
    29a4:	cd b7       	in	r28, 0x3d	; 61
    29a6:	de b7       	in	r29, 0x3e	; 62
    proc_t * proc;
    proc = current_proc();
    29a8:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <current_proc>
    29ac:	9a 83       	std	Y+2, r25	; 0x02
    29ae:	89 83       	std	Y+1, r24	; 0x01

    SPIN_LOCK( proc );
    29b0:	89 81       	ldd	r24, Y+1	; 0x01
    29b2:	9a 81       	ldd	r25, Y+2	; 0x02
    29b4:	83 96       	adiw	r24, 0x23	; 35
    29b6:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>

    if( proc->flags & PROC_FLG_RT )proc->timer = proc->time_quant;
    29ba:	e9 81       	ldd	r30, Y+1	; 0x01
    29bc:	fa 81       	ldd	r31, Y+2	; 0x02
    29be:	87 81       	ldd	r24, Z+7	; 0x07
    29c0:	90 85       	ldd	r25, Z+8	; 0x08
    29c2:	81 70       	andi	r24, 0x01	; 1
    29c4:	90 70       	andi	r25, 0x00	; 0
    29c6:	88 23       	and	r24, r24
    29c8:	41 f0       	breq	.+16     	; 0x29da <_proc_reset_watchdog+0x3c>
    29ca:	e9 81       	ldd	r30, Y+1	; 0x01
    29cc:	fa 81       	ldd	r31, Y+2	; 0x02
    29ce:	83 8d       	ldd	r24, Z+27	; 0x1b
    29d0:	94 8d       	ldd	r25, Z+28	; 0x1c
    29d2:	e9 81       	ldd	r30, Y+1	; 0x01
    29d4:	fa 81       	ldd	r31, Y+2	; 0x02
    29d6:	96 8f       	std	Z+30, r25	; 0x1e
    29d8:	85 8f       	std	Z+29, r24	; 0x1d

    SPIN_UNLOCK( proc );
    29da:	89 81       	ldd	r24, Y+1	; 0x01
    29dc:	9a 81       	ldd	r25, Y+2	; 0x02
    29de:	83 96       	adiw	r24, 0x23	; 35
    29e0:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
}
    29e4:	0f 90       	pop	r0
    29e6:	0f 90       	pop	r0
    29e8:	cf 91       	pop	r28
    29ea:	df 91       	pop	r29
    29ec:	08 95       	ret

000029ee <_proc_lres_inc>:
    proc_t * proc
#ifdef CONFIG_USE_HIGHEST_LOCKER
    ,prio_t prio
#endif
)
{
    29ee:	df 93       	push	r29
    29f0:	cf 93       	push	r28
    29f2:	00 d0       	rcall	.+0      	; 0x29f4 <_proc_lres_inc+0x6>
    29f4:	0f 92       	push	r0
    29f6:	cd b7       	in	r28, 0x3d	; 61
    29f8:	de b7       	in	r29, 0x3e	; 62
    29fa:	9a 83       	std	Y+2, r25	; 0x02
    29fc:	89 83       	std	Y+1, r24	; 0x01
    29fe:	6b 83       	std	Y+3, r22	; 0x03
#ifdef CONFIG_USE_HIGHEST_LOCKER
    if( proc->lres.index == (index_t)0 )proc->flags |= PROC_FLG_MUTEX;
    2a00:	e9 81       	ldd	r30, Y+1	; 0x01
    2a02:	fa 81       	ldd	r31, Y+2	; 0x02
    2a04:	82 8d       	ldd	r24, Z+26	; 0x1a
    2a06:	88 23       	and	r24, r24
    2a08:	49 f4       	brne	.+18     	; 0x2a1c <_proc_lres_inc+0x2e>
    2a0a:	e9 81       	ldd	r30, Y+1	; 0x01
    2a0c:	fa 81       	ldd	r31, Y+2	; 0x02
    2a0e:	87 81       	ldd	r24, Z+7	; 0x07
    2a10:	90 85       	ldd	r25, Z+8	; 0x08
    2a12:	84 60       	ori	r24, 0x04	; 4
    2a14:	e9 81       	ldd	r30, Y+1	; 0x01
    2a16:	fa 81       	ldd	r31, Y+2	; 0x02
    2a18:	90 87       	std	Z+8, r25	; 0x08
    2a1a:	87 83       	std	Z+7, r24	; 0x07
    pcounter_inc( &proc->lres, prio );
    2a1c:	89 81       	ldd	r24, Y+1	; 0x01
    2a1e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a20:	0a 96       	adiw	r24, 0x0a	; 10
    2a22:	6b 81       	ldd	r22, Y+3	; 0x03
    2a24:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <pcounter_inc>
#else
    if( proc->lres == (count_t)0 )proc->flags |= PROC_FLG_MUTEX;
    proc->lres++;
#endif
}
    2a28:	0f 90       	pop	r0
    2a2a:	0f 90       	pop	r0
    2a2c:	0f 90       	pop	r0
    2a2e:	cf 91       	pop	r28
    2a30:	df 91       	pop	r29
    2a32:	08 95       	ret

00002a34 <_proc_lres_dec>:
    proc_t * proc
#ifdef CONFIG_USE_HIGHEST_LOCKER
    ,prio_t prio
#endif
)
{
    2a34:	df 93       	push	r29
    2a36:	cf 93       	push	r28
    2a38:	00 d0       	rcall	.+0      	; 0x2a3a <_proc_lres_dec+0x6>
    2a3a:	0f 92       	push	r0
    2a3c:	cd b7       	in	r28, 0x3d	; 61
    2a3e:	de b7       	in	r29, 0x3e	; 62
    2a40:	9a 83       	std	Y+2, r25	; 0x02
    2a42:	89 83       	std	Y+1, r24	; 0x01
    2a44:	6b 83       	std	Y+3, r22	; 0x03
#ifdef CONFIG_USE_HIGHEST_LOCKER
    pcounter_dec( &proc->lres, prio );
    2a46:	89 81       	ldd	r24, Y+1	; 0x01
    2a48:	9a 81       	ldd	r25, Y+2	; 0x02
    2a4a:	0a 96       	adiw	r24, 0x0a	; 10
    2a4c:	6b 81       	ldd	r22, Y+3	; 0x03
    2a4e:	0e 94 38 10 	call	0x2070	; 0x2070 <pcounter_dec>
    if( proc->lres.index == (index_t)0 )proc->flags &= ~PROC_FLG_MUTEX;
    2a52:	e9 81       	ldd	r30, Y+1	; 0x01
    2a54:	fa 81       	ldd	r31, Y+2	; 0x02
    2a56:	82 8d       	ldd	r24, Z+26	; 0x1a
    2a58:	88 23       	and	r24, r24
    2a5a:	49 f4       	brne	.+18     	; 0x2a6e <_proc_lres_dec+0x3a>
    2a5c:	e9 81       	ldd	r30, Y+1	; 0x01
    2a5e:	fa 81       	ldd	r31, Y+2	; 0x02
    2a60:	87 81       	ldd	r24, Z+7	; 0x07
    2a62:	90 85       	ldd	r25, Z+8	; 0x08
    2a64:	8b 7f       	andi	r24, 0xFB	; 251
    2a66:	e9 81       	ldd	r30, Y+1	; 0x01
    2a68:	fa 81       	ldd	r31, Y+2	; 0x02
    2a6a:	90 87       	std	Z+8, r25	; 0x08
    2a6c:	87 83       	std	Z+7, r24	; 0x07
#else
    if( proc->lres!= (count_t)0 )proc->lres--;
    if( proc->lres == (count_t)0 )proc->flags &= ~PROC_FLG_MUTEX;
#endif
}
    2a6e:	0f 90       	pop	r0
    2a70:	0f 90       	pop	r0
    2a72:	0f 90       	pop	r0
    2a74:	cf 91       	pop	r28
    2a76:	df 91       	pop	r29
    2a78:	08 95       	ret

00002a7a <_proc_prio_control_stoped>:

#ifdef CONFIG_USE_HIGHEST_LOCKER
// Будет использоваться в mutex-ах и т.п., процесс должен сам вызывать эту функцию, при этом он должен быть вырезан из списка выполняющихся.

void _proc_prio_control_stoped( proc_t * proc )
{
    2a7a:	df 93       	push	r29
    2a7c:	cf 93       	push	r28
    2a7e:	cd b7       	in	r28, 0x3d	; 61
    2a80:	de b7       	in	r29, 0x3e	; 62
    2a82:	27 97       	sbiw	r28, 0x07	; 7
    2a84:	0f b6       	in	r0, 0x3f	; 63
    2a86:	f8 94       	cli
    2a88:	de bf       	out	0x3e, r29	; 62
    2a8a:	0f be       	out	0x3f, r0	; 63
    2a8c:	cd bf       	out	0x3d, r28	; 61
    2a8e:	9b 83       	std	Y+3, r25	; 0x03
    2a90:	8a 83       	std	Y+2, r24	; 0x02
    if(proc->lres.index != (index_t)0)
    2a92:	ea 81       	ldd	r30, Y+2	; 0x02
    2a94:	fb 81       	ldd	r31, Y+3	; 0x03
    2a96:	82 8d       	ldd	r24, Z+26	; 0x1a
    2a98:	88 23       	and	r24, r24
    2a9a:	d9 f0       	breq	.+54     	; 0x2ad2 <_proc_prio_control_stoped+0x58>
    {

        prio_t locker_prio;
        locker_prio = index_search( proc->lres.index );
    2a9c:	ea 81       	ldd	r30, Y+2	; 0x02
    2a9e:	fb 81       	ldd	r31, Y+3	; 0x03
    2aa0:	82 8d       	ldd	r24, Z+26	; 0x1a
    2aa2:	0e 94 3e 0c 	call	0x187c	; 0x187c <index_search>
    2aa6:	89 83       	std	Y+1, r24	; 0x01
        ((pitem_t *)proc)->prio = ( locker_prio < proc->base_prio )?locker_prio:proc->base_prio;
    2aa8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aaa:	9b 81       	ldd	r25, Y+3	; 0x03
    2aac:	9e 83       	std	Y+6, r25	; 0x06
    2aae:	8d 83       	std	Y+5, r24	; 0x05
    2ab0:	ea 81       	ldd	r30, Y+2	; 0x02
    2ab2:	fb 81       	ldd	r31, Y+3	; 0x03
    2ab4:	81 85       	ldd	r24, Z+9	; 0x09
    2ab6:	99 81       	ldd	r25, Y+1	; 0x01
    2ab8:	9f 83       	std	Y+7, r25	; 0x07
    2aba:	8c 83       	std	Y+4, r24	; 0x04
    2abc:	ec 81       	ldd	r30, Y+4	; 0x04
    2abe:	ff 81       	ldd	r31, Y+7	; 0x07
    2ac0:	fe 17       	cp	r31, r30
    2ac2:	10 f4       	brcc	.+4      	; 0x2ac8 <_proc_prio_control_stoped+0x4e>
    2ac4:	8f 81       	ldd	r24, Y+7	; 0x07
    2ac6:	8c 83       	std	Y+4, r24	; 0x04
    2ac8:	8c 81       	ldd	r24, Y+4	; 0x04
    2aca:	ed 81       	ldd	r30, Y+5	; 0x05
    2acc:	fe 81       	ldd	r31, Y+6	; 0x06
    2ace:	86 83       	std	Z+6, r24	; 0x06
    2ad0:	08 c0       	rjmp	.+16     	; 0x2ae2 <_proc_prio_control_stoped+0x68>
    }
    else
    {
        ((pitem_t *)proc)->prio = proc->base_prio;
    2ad2:	ea 81       	ldd	r30, Y+2	; 0x02
    2ad4:	fb 81       	ldd	r31, Y+3	; 0x03
    2ad6:	aa 81       	ldd	r26, Y+2	; 0x02
    2ad8:	bb 81       	ldd	r27, Y+3	; 0x03
    2ada:	19 96       	adiw	r26, 0x09	; 9
    2adc:	8c 91       	ld	r24, X
    2ade:	19 97       	sbiw	r26, 0x09	; 9
    2ae0:	86 83       	std	Z+6, r24	; 0x06
    }
}
    2ae2:	27 96       	adiw	r28, 0x07	; 7
    2ae4:	0f b6       	in	r0, 0x3f	; 63
    2ae6:	f8 94       	cli
    2ae8:	de bf       	out	0x3e, r29	; 62
    2aea:	0f be       	out	0x3f, r0	; 63
    2aec:	cd bf       	out	0x3d, r28	; 61
    2aee:	cf 91       	pop	r28
    2af0:	df 91       	pop	r29
    2af2:	08 95       	ret

00002af4 <_proc_prio_control_running>:

void _proc_prio_control_running( proc_t * proc )
{
    2af4:	df 93       	push	r29
    2af6:	cf 93       	push	r28
    2af8:	00 d0       	rcall	.+0      	; 0x2afa <_proc_prio_control_running+0x6>
    2afa:	00 d0       	rcall	.+0      	; 0x2afc <_proc_prio_control_running+0x8>
    2afc:	00 d0       	rcall	.+0      	; 0x2afe <_proc_prio_control_running+0xa>
    2afe:	cd b7       	in	r28, 0x3d	; 61
    2b00:	de b7       	in	r29, 0x3e	; 62
    2b02:	9c 83       	std	Y+4, r25	; 0x04
    2b04:	8b 83       	std	Y+3, r24	; 0x03
    prio_t new_prio;
    if(proc->lres.index != (index_t)0)
    2b06:	eb 81       	ldd	r30, Y+3	; 0x03
    2b08:	fc 81       	ldd	r31, Y+4	; 0x04
    2b0a:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b0c:	88 23       	and	r24, r24
    2b0e:	a9 f0       	breq	.+42     	; 0x2b3a <_proc_prio_control_running+0x46>
    {
        prio_t locker_prio;
        locker_prio = index_search( proc->lres.index );
    2b10:	eb 81       	ldd	r30, Y+3	; 0x03
    2b12:	fc 81       	ldd	r31, Y+4	; 0x04
    2b14:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b16:	0e 94 3e 0c 	call	0x187c	; 0x187c <index_search>
    2b1a:	89 83       	std	Y+1, r24	; 0x01
        new_prio = ( locker_prio < proc->base_prio )?locker_prio:proc->base_prio;
    2b1c:	eb 81       	ldd	r30, Y+3	; 0x03
    2b1e:	fc 81       	ldd	r31, Y+4	; 0x04
    2b20:	81 85       	ldd	r24, Z+9	; 0x09
    2b22:	99 81       	ldd	r25, Y+1	; 0x01
    2b24:	9e 83       	std	Y+6, r25	; 0x06
    2b26:	8d 83       	std	Y+5, r24	; 0x05
    2b28:	8d 81       	ldd	r24, Y+5	; 0x05
    2b2a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b2c:	98 17       	cp	r25, r24
    2b2e:	10 f4       	brcc	.+4      	; 0x2b34 <_proc_prio_control_running+0x40>
    2b30:	8e 81       	ldd	r24, Y+6	; 0x06
    2b32:	8d 83       	std	Y+5, r24	; 0x05
    2b34:	9d 81       	ldd	r25, Y+5	; 0x05
    2b36:	9a 83       	std	Y+2, r25	; 0x02
    2b38:	04 c0       	rjmp	.+8      	; 0x2b42 <_proc_prio_control_running+0x4e>
    }
    else
    {
        new_prio = proc->base_prio;
    2b3a:	eb 81       	ldd	r30, Y+3	; 0x03
    2b3c:	fc 81       	ldd	r31, Y+4	; 0x04
    2b3e:	81 85       	ldd	r24, Z+9	; 0x09
    2b40:	8a 83       	std	Y+2, r24	; 0x02
    }
    if(((pitem_t *)proc)->prio != new_prio)
    2b42:	eb 81       	ldd	r30, Y+3	; 0x03
    2b44:	fc 81       	ldd	r31, Y+4	; 0x04
    2b46:	96 81       	ldd	r25, Z+6	; 0x06
    2b48:	8a 81       	ldd	r24, Y+2	; 0x02
    2b4a:	98 17       	cp	r25, r24
    2b4c:	31 f1       	breq	.+76     	; 0x2b9a <_proc_prio_control_running+0xa6>
    {
        _proc_stop_( proc );
    2b4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b50:	9c 81       	ldd	r25, Y+4	; 0x04
    2b52:	0e 94 a8 13 	call	0x2750	; 0x2750 <_proc_stop_>
        ((pitem_t *)proc)->prio = new_prio;
    2b56:	eb 81       	ldd	r30, Y+3	; 0x03
    2b58:	fc 81       	ldd	r31, Y+4	; 0x04
    2b5a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b5c:	86 83       	std	Z+6, r24	; 0x06
#ifdef CONFIG_MP
        spin_lock( &kernel.stat_lock );
    2b5e:	81 e8       	ldi	r24, 0x81	; 129
    2b60:	93 e0       	ldi	r25, 0x03	; 3
    2b62:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
        stat_inc( proc, (stat_t *)kernel.stat+proc->core_id );
    2b66:	eb 81       	ldd	r30, Y+3	; 0x03
    2b68:	fc 81       	ldd	r31, Y+4	; 0x04
    2b6a:	81 a1       	ldd	r24, Z+33	; 0x21
    2b6c:	88 2f       	mov	r24, r24
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	9c 01       	movw	r18, r24
    2b72:	21 58       	subi	r18, 0x81	; 129
    2b74:	3c 4f       	sbci	r19, 0xFC	; 252
    2b76:	8b 81       	ldd	r24, Y+3	; 0x03
    2b78:	9c 81       	ldd	r25, Y+4	; 0x04
    2b7a:	b9 01       	movw	r22, r18
    2b7c:	0e 94 6f 01 	call	0x2de	; 0x2de <stat_inc>
        spin_unlock( &kernel.stat_lock );
    2b80:	81 e8       	ldi	r24, 0x81	; 129
    2b82:	93 e0       	ldi	r25, 0x03	; 3
    2b84:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
#endif
        _proc_run_( proc );
    2b88:	8b 81       	ldd	r24, Y+3	; 0x03
    2b8a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b8c:	0e 94 aa 12 	call	0x2554	; 0x2554 <_proc_run_>
        RESCHED_PROC( proc );
    2b90:	eb 81       	ldd	r30, Y+3	; 0x03
    2b92:	fc 81       	ldd	r31, Y+4	; 0x04
    2b94:	81 a1       	ldd	r24, Z+33	; 0x21
    2b96:	0e 94 b7 01 	call	0x36e	; 0x36e <resched>
    }
}
    2b9a:	26 96       	adiw	r28, 0x06	; 6
    2b9c:	0f b6       	in	r0, 0x3f	; 63
    2b9e:	f8 94       	cli
    2ba0:	de bf       	out	0x3e, r29	; 62
    2ba2:	0f be       	out	0x3f, r0	; 63
    2ba4:	cd bf       	out	0x3d, r28	; 61
    2ba6:	cf 91       	pop	r28
    2ba8:	df 91       	pop	r29
    2baa:	08 95       	ret

00002bac <_proc_lazy_load_balancer>:
Можно использовать только один,
или оба в различных комбинациях

************************************/
void _proc_lazy_load_balancer(core_id_t object_core)
{
    2bac:	df 93       	push	r29
    2bae:	cf 93       	push	r28
    2bb0:	00 d0       	rcall	.+0      	; 0x2bb2 <_proc_lazy_load_balancer+0x6>
    2bb2:	00 d0       	rcall	.+0      	; 0x2bb4 <_proc_lazy_load_balancer+0x8>
    2bb4:	0f 92       	push	r0
    2bb6:	cd b7       	in	r28, 0x3d	; 61
    2bb8:	de b7       	in	r29, 0x3e	; 62
    2bba:	8d 83       	std	Y+5, r24	; 0x05
    sched_t * sched;
    proc_t * proc;
    sched = (sched_t *)kernel.sched + object_core;
    2bbc:	8d 81       	ldd	r24, Y+5	; 0x05
    2bbe:	28 2f       	mov	r18, r24
    2bc0:	30 e0       	ldi	r19, 0x00	; 0
    2bc2:	8b e2       	ldi	r24, 0x2B	; 43
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	ac 01       	movw	r20, r24
    2bc8:	24 9f       	mul	r18, r20
    2bca:	c0 01       	movw	r24, r0
    2bcc:	25 9f       	mul	r18, r21
    2bce:	90 0d       	add	r25, r0
    2bd0:	34 9f       	mul	r19, r20
    2bd2:	90 0d       	add	r25, r0
    2bd4:	11 24       	eor	r1, r1
    2bd6:	87 53       	subi	r24, 0x37	; 55
    2bd8:	9d 4f       	sbci	r25, 0xFD	; 253
    2bda:	9c 83       	std	Y+4, r25	; 0x04
    2bdc:	8b 83       	std	Y+3, r24	; 0x03

    //Смотрим, есть чи что в списке expired, если есть, будем переносить нагрузку, если нет - выход
    disable_interrupts();
    2bde:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <disable_interrupts>
    SPIN_LOCK( sched );
    2be2:	8b 81       	ldd	r24, Y+3	; 0x03
    2be4:	9c 81       	ldd	r25, Y+4	; 0x04
    2be6:	8a 96       	adiw	r24, 0x2a	; 42
    2be8:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    if(sched->expired->index == (index_t)0)
    2bec:	eb 81       	ldd	r30, Y+3	; 0x03
    2bee:	fc 81       	ldd	r31, Y+4	; 0x04
    2bf0:	04 80       	ldd	r0, Z+4	; 0x04
    2bf2:	f5 81       	ldd	r31, Z+5	; 0x05
    2bf4:	e0 2d       	mov	r30, r0
    2bf6:	80 89       	ldd	r24, Z+16	; 0x10
    2bf8:	88 23       	and	r24, r24
    2bfa:	41 f4       	brne	.+16     	; 0x2c0c <_proc_lazy_load_balancer+0x60>
    {
        SPIN_UNLOCK( sched );
    2bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    2bfe:	9c 81       	ldd	r25, Y+4	; 0x04
    2c00:	8a 96       	adiw	r24, 0x2a	; 42
    2c02:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
        enable_interrupts();
    2c06:	0e 94 06 0a 	call	0x140c	; 0x140c <enable_interrupts>
    2c0a:	85 c0       	rjmp	.+266    	; 0x2d16 <_proc_lazy_load_balancer+0x16a>
        return;
    }
    proc = (proc_t *)xlist_head( sched->expired );// Процесс, который будем переносить на другой процессор. Требования реального времени этот процесс не выполняет.
    2c0c:	eb 81       	ldd	r30, Y+3	; 0x03
    2c0e:	fc 81       	ldd	r31, Y+4	; 0x04
    2c10:	84 81       	ldd	r24, Z+4	; 0x04
    2c12:	95 81       	ldd	r25, Z+5	; 0x05
    2c14:	0e 94 22 20 	call	0x4044	; 0x4044 <xlist_head>
    2c18:	9a 83       	std	Y+2, r25	; 0x02
    2c1a:	89 83       	std	Y+1, r24	; 0x01
    SPIN_UNLOCK( sched );
    2c1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c1e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c20:	8a 96       	adiw	r24, 0x2a	; 42
    2c22:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
    enable_interrupts();
    2c26:	0e 94 06 0a 	call	0x140c	; 0x140c <enable_interrupts>

    disable_interrupts();
    2c2a:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <disable_interrupts>
    SPIN_LOCK( proc );
    2c2e:	89 81       	ldd	r24, Y+1	; 0x01
    2c30:	9a 81       	ldd	r25, Y+2	; 0x02
    2c32:	83 96       	adiw	r24, 0x23	; 35
    2c34:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    // Пока захватывалась блокировка процесса, его могли остановить, подстраховываемся.
    if( proc->flags & PROC_FLG_RUN )
    2c38:	e9 81       	ldd	r30, Y+1	; 0x01
    2c3a:	fa 81       	ldd	r31, Y+2	; 0x02
    2c3c:	87 81       	ldd	r24, Z+7	; 0x07
    2c3e:	90 85       	ldd	r25, Z+8	; 0x08
    2c40:	82 70       	andi	r24, 0x02	; 2
    2c42:	90 70       	andi	r25, 0x00	; 0
    2c44:	00 97       	sbiw	r24, 0x00	; 0
    2c46:	09 f4       	brne	.+2      	; 0x2c4a <_proc_lazy_load_balancer+0x9e>
    2c48:	5f c0       	rjmp	.+190    	; 0x2d08 <_proc_lazy_load_balancer+0x15c>
    {
        // Остановили выполнение процесса на старом процессоре
        SPIN_LOCK( sched );
    2c4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c4c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c4e:	8a 96       	adiw	r24, 0x2a	; 42
    2c50:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
        pitem_fast_cut( (pitem_t *)proc );
    2c54:	89 81       	ldd	r24, Y+1	; 0x01
    2c56:	9a 81       	ldd	r25, Y+2	; 0x02
    2c58:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <pitem_fast_cut>
        SPIN_UNLOCK( sched );
    2c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c5e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c60:	8a 96       	adiw	r24, 0x2a	; 42
    2c62:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
        resched(object_core); // Процесс мог быть поставлен на выполнение, пока мы захватывали его блокировку, перепланируем
    2c66:	8d 81       	ldd	r24, Y+5	; 0x05
    2c68:	0e 94 b7 01 	call	0x36e	; 0x36e <resched>

        // Проводим операции над статистикой
        spin_lock( &kernel.stat_lock );
    2c6c:	81 e8       	ldi	r24, 0x81	; 129
    2c6e:	93 e0       	ldi	r25, 0x03	; 3
    2c70:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>

        stat_dec( proc, (stat_t *)kernel.stat + object_core );
    2c74:	8d 81       	ldd	r24, Y+5	; 0x05
    2c76:	88 2f       	mov	r24, r24
    2c78:	90 e0       	ldi	r25, 0x00	; 0
    2c7a:	9c 01       	movw	r18, r24
    2c7c:	21 58       	subi	r18, 0x81	; 129
    2c7e:	3c 4f       	sbci	r19, 0xFC	; 252
    2c80:	89 81       	ldd	r24, Y+1	; 0x01
    2c82:	9a 81       	ldd	r25, Y+2	; 0x02
    2c84:	b9 01       	movw	r22, r18
    2c86:	0e 94 57 01 	call	0x2ae	; 0x2ae <stat_dec>

        object_core = sched_load_balancer( proc, (stat_t *)kernel.stat );// Теперь, это тот процессор, на который будем переносить процесс
    2c8a:	89 81       	ldd	r24, Y+1	; 0x01
    2c8c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c8e:	2f e7       	ldi	r18, 0x7F	; 127
    2c90:	33 e0       	ldi	r19, 0x03	; 3
    2c92:	b9 01       	movw	r22, r18
    2c94:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <sched_load_balancer>
    2c98:	8d 83       	std	Y+5, r24	; 0x05
        sched = (sched_t *)kernel.sched + object_core;//Теперь это планировщик, на который мы переносим процесс
    2c9a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c9c:	28 2f       	mov	r18, r24
    2c9e:	30 e0       	ldi	r19, 0x00	; 0
    2ca0:	8b e2       	ldi	r24, 0x2B	; 43
    2ca2:	90 e0       	ldi	r25, 0x00	; 0
    2ca4:	ac 01       	movw	r20, r24
    2ca6:	24 9f       	mul	r18, r20
    2ca8:	c0 01       	movw	r24, r0
    2caa:	25 9f       	mul	r18, r21
    2cac:	90 0d       	add	r25, r0
    2cae:	34 9f       	mul	r19, r20
    2cb0:	90 0d       	add	r25, r0
    2cb2:	11 24       	eor	r1, r1
    2cb4:	87 53       	subi	r24, 0x37	; 55
    2cb6:	9d 4f       	sbci	r25, 0xFD	; 253
    2cb8:	9c 83       	std	Y+4, r25	; 0x04
    2cba:	8b 83       	std	Y+3, r24	; 0x03
        stat_inc( proc, (stat_t *)kernel.stat + object_core );
    2cbc:	8d 81       	ldd	r24, Y+5	; 0x05
    2cbe:	88 2f       	mov	r24, r24
    2cc0:	90 e0       	ldi	r25, 0x00	; 0
    2cc2:	9c 01       	movw	r18, r24
    2cc4:	21 58       	subi	r18, 0x81	; 129
    2cc6:	3c 4f       	sbci	r19, 0xFC	; 252
    2cc8:	89 81       	ldd	r24, Y+1	; 0x01
    2cca:	9a 81       	ldd	r25, Y+2	; 0x02
    2ccc:	b9 01       	movw	r22, r18
    2cce:	0e 94 6f 01 	call	0x2de	; 0x2de <stat_inc>

        spin_unlock( &kernel.stat_lock );
    2cd2:	81 e8       	ldi	r24, 0x81	; 129
    2cd4:	93 e0       	ldi	r25, 0x03	; 3
    2cd6:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>

        // Переносим процесс на новый процессор, продолжаем выполнение там. Перепланировку не делаем, проуесс не выполняет требования реального времени.
        proc->core_id = object_core;
    2cda:	e9 81       	ldd	r30, Y+1	; 0x01
    2cdc:	fa 81       	ldd	r31, Y+2	; 0x02
    2cde:	8d 81       	ldd	r24, Y+5	; 0x05
    2ce0:	81 a3       	std	Z+33, r24	; 0x21
        SPIN_LOCK( sched );
    2ce2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ce6:	8a 96       	adiw	r24, 0x2a	; 42
    2ce8:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
        pitem_insert( (pitem_t *)proc, sched->expired );
    2cec:	89 81       	ldd	r24, Y+1	; 0x01
    2cee:	9a 81       	ldd	r25, Y+2	; 0x02
    2cf0:	eb 81       	ldd	r30, Y+3	; 0x03
    2cf2:	fc 81       	ldd	r31, Y+4	; 0x04
    2cf4:	24 81       	ldd	r18, Z+4	; 0x04
    2cf6:	35 81       	ldd	r19, Z+5	; 0x05
    2cf8:	b9 01       	movw	r22, r18
    2cfa:	0e 94 a5 10 	call	0x214a	; 0x214a <pitem_insert>
        SPIN_UNLOCK( sched );
    2cfe:	8b 81       	ldd	r24, Y+3	; 0x03
    2d00:	9c 81       	ldd	r25, Y+4	; 0x04
    2d02:	8a 96       	adiw	r24, 0x2a	; 42
    2d04:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
    }
    SPIN_UNLOCK( proc );
    2d08:	89 81       	ldd	r24, Y+1	; 0x01
    2d0a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d0c:	83 96       	adiw	r24, 0x23	; 35
    2d0e:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
    enable_interrupts();
    2d12:	0e 94 06 0a 	call	0x140c	; 0x140c <enable_interrupts>
}
    2d16:	0f 90       	pop	r0
    2d18:	0f 90       	pop	r0
    2d1a:	0f 90       	pop	r0
    2d1c:	0f 90       	pop	r0
    2d1e:	0f 90       	pop	r0
    2d20:	cf 91       	pop	r28
    2d22:	df 91       	pop	r29
    2d24:	08 95       	ret

00002d26 <proc_lazy_global_load_balancer>:
// Глобальный
void proc_lazy_global_load_balancer(void)
{
    2d26:	df 93       	push	r29
    2d28:	cf 93       	push	r28
    2d2a:	0f 92       	push	r0
    2d2c:	cd b7       	in	r28, 0x3d	; 61
    2d2e:	de b7       	in	r29, 0x3e	; 62
    core_id_t object_core;
    // Поиск самого нагруженного процессора
    disable_interrupts();
    2d30:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <disable_interrupts>
    spin_lock( &kernel.stat_lock );
    2d34:	81 e8       	ldi	r24, 0x81	; 129
    2d36:	93 e0       	ldi	r25, 0x03	; 3
    2d38:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    object_core = sched_highest_load_core( (stat_t *)kernel.stat );
    2d3c:	8f e7       	ldi	r24, 0x7F	; 127
    2d3e:	93 e0       	ldi	r25, 0x03	; 3
    2d40:	0e 94 22 17 	call	0x2e44	; 0x2e44 <sched_highest_load_core>
    2d44:	89 83       	std	Y+1, r24	; 0x01
    spin_unlock( &kernel.stat_lock );
    2d46:	81 e8       	ldi	r24, 0x81	; 129
    2d48:	93 e0       	ldi	r25, 0x03	; 3
    2d4a:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
    enable_interrupts();
    2d4e:	0e 94 06 0a 	call	0x140c	; 0x140c <enable_interrupts>
    // Перенос нагрузки на самый не нагруженный процессор
    _proc_lazy_load_balancer( object_core );
    2d52:	89 81       	ldd	r24, Y+1	; 0x01
    2d54:	0e 94 d6 15 	call	0x2bac	; 0x2bac <_proc_lazy_load_balancer>
}
    2d58:	0f 90       	pop	r0
    2d5a:	cf 91       	pop	r28
    2d5c:	df 91       	pop	r29
    2d5e:	08 95       	ret

00002d60 <sched_load_balancer>:

#ifdef CONFIG_MP
//========================================================================================
// Балансировщик нагрузки
WEAK core_id_t sched_load_balancer(proc_t * proc, stat_t * stat)
{
    2d60:	df 93       	push	r29
    2d62:	cf 93       	push	r28
    2d64:	cd b7       	in	r28, 0x3d	; 61
    2d66:	de b7       	in	r29, 0x3e	; 62
    2d68:	2a 97       	sbiw	r28, 0x0a	; 10
    2d6a:	0f b6       	in	r0, 0x3f	; 63
    2d6c:	f8 94       	cli
    2d6e:	de bf       	out	0x3e, r29	; 62
    2d70:	0f be       	out	0x3f, r0	; 63
    2d72:	cd bf       	out	0x3d, r28	; 61
    2d74:	98 87       	std	Y+8, r25	; 0x08
    2d76:	8f 83       	std	Y+7, r24	; 0x07
    2d78:	7a 87       	std	Y+10, r23	; 0x0a
    2d7a:	69 87       	std	Y+9, r22	; 0x09
    core_id_t core = (core_id_t)0, ret;
    2d7c:	1e 82       	std	Y+6, r1	; 0x06
    affinity_t mask = (affinity_t)1;
    2d7e:	81 e0       	ldi	r24, 0x01	; 1
    2d80:	8c 83       	std	Y+4, r24	; 0x04
    2d82:	0d c0       	rjmp	.+26     	; 0x2d9e <sched_load_balancer+0x3e>
    while( core < (core_id_t)MAX_CORES )
    {
        if( proc->affinity & mask )break;
    2d84:	ef 81       	ldd	r30, Y+7	; 0x07
    2d86:	f8 85       	ldd	r31, Y+8	; 0x08
    2d88:	92 a1       	ldd	r25, Z+34	; 0x22
    2d8a:	8c 81       	ldd	r24, Y+4	; 0x04
    2d8c:	89 23       	and	r24, r25
    2d8e:	88 23       	and	r24, r24
    2d90:	49 f4       	brne	.+18     	; 0x2da4 <sched_load_balancer+0x44>
        mask<<=1;
    2d92:	8c 81       	ldd	r24, Y+4	; 0x04
    2d94:	88 0f       	add	r24, r24
    2d96:	8c 83       	std	Y+4, r24	; 0x04
        core++;
    2d98:	8e 81       	ldd	r24, Y+6	; 0x06
    2d9a:	8f 5f       	subi	r24, 0xFF	; 255
    2d9c:	8e 83       	std	Y+6, r24	; 0x06
// Балансировщик нагрузки
WEAK core_id_t sched_load_balancer(proc_t * proc, stat_t * stat)
{
    core_id_t core = (core_id_t)0, ret;
    affinity_t mask = (affinity_t)1;
    while( core < (core_id_t)MAX_CORES )
    2d9e:	8e 81       	ldd	r24, Y+6	; 0x06
    2da0:	82 30       	cpi	r24, 0x02	; 2
    2da2:	80 f3       	brcs	.-32     	; 0x2d84 <sched_load_balancer+0x24>
        if( proc->affinity & mask )break;
        mask<<=1;
        core++;
    }
    // Начальное предположение
    stat += (core_id_t)core;
    2da4:	8e 81       	ldd	r24, Y+6	; 0x06
    2da6:	28 2f       	mov	r18, r24
    2da8:	30 e0       	ldi	r19, 0x00	; 0
    2daa:	89 85       	ldd	r24, Y+9	; 0x09
    2dac:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dae:	82 0f       	add	r24, r18
    2db0:	93 1f       	adc	r25, r19
    2db2:	9a 87       	std	Y+10, r25	; 0x0a
    2db4:	89 87       	std	Y+9, r24	; 0x09
    ret = core++;
    2db6:	8e 81       	ldd	r24, Y+6	; 0x06
    2db8:	8d 83       	std	Y+5, r24	; 0x05
    2dba:	8e 81       	ldd	r24, Y+6	; 0x06
    2dbc:	8f 5f       	subi	r24, 0xFF	; 255
    2dbe:	8e 83       	std	Y+6, r24	; 0x06
    mask<<=1;
    2dc0:	8c 81       	ldd	r24, Y+4	; 0x04
    2dc2:	88 0f       	add	r24, r24
    2dc4:	8c 83       	std	Y+4, r24	; 0x04
    {
        prio_t proc_prio;
        load_t current_load, min_load;

        proc_prio = ((pitem_t *)proc)->prio;
    2dc6:	ef 81       	ldd	r30, Y+7	; 0x07
    2dc8:	f8 85       	ldd	r31, Y+8	; 0x08
    2dca:	86 81       	ldd	r24, Z+6	; 0x06
    2dcc:	8b 83       	std	Y+3, r24	; 0x03
        min_load = stat_calc_load( proc_prio, stat++ );
    2dce:	29 85       	ldd	r18, Y+9	; 0x09
    2dd0:	3a 85       	ldd	r19, Y+10	; 0x0a
    2dd2:	89 85       	ldd	r24, Y+9	; 0x09
    2dd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dd6:	01 96       	adiw	r24, 0x01	; 1
    2dd8:	9a 87       	std	Y+10, r25	; 0x0a
    2dda:	89 87       	std	Y+9, r24	; 0x09
    2ddc:	8b 81       	ldd	r24, Y+3	; 0x03
    2dde:	b9 01       	movw	r22, r18
    2de0:	0e 94 a5 01 	call	0x34a	; 0x34a <stat_calc_load>
    2de4:	89 83       	std	Y+1, r24	; 0x01
    2de6:	21 c0       	rjmp	.+66     	; 0x2e2a <sched_load_balancer+0xca>
        // Проверка всего остального, тупой поиск минимума
        while( core < (core_id_t)MAX_CORES )
        {
            current_load = stat_calc_load( proc_prio, stat++ );
    2de8:	29 85       	ldd	r18, Y+9	; 0x09
    2dea:	3a 85       	ldd	r19, Y+10	; 0x0a
    2dec:	89 85       	ldd	r24, Y+9	; 0x09
    2dee:	9a 85       	ldd	r25, Y+10	; 0x0a
    2df0:	01 96       	adiw	r24, 0x01	; 1
    2df2:	9a 87       	std	Y+10, r25	; 0x0a
    2df4:	89 87       	std	Y+9, r24	; 0x09
    2df6:	8b 81       	ldd	r24, Y+3	; 0x03
    2df8:	b9 01       	movw	r22, r18
    2dfa:	0e 94 a5 01 	call	0x34a	; 0x34a <stat_calc_load>
    2dfe:	8a 83       	std	Y+2, r24	; 0x02
            if( (proc->affinity & mask) && (current_load < min_load) )
    2e00:	ef 81       	ldd	r30, Y+7	; 0x07
    2e02:	f8 85       	ldd	r31, Y+8	; 0x08
    2e04:	92 a1       	ldd	r25, Z+34	; 0x22
    2e06:	8c 81       	ldd	r24, Y+4	; 0x04
    2e08:	89 23       	and	r24, r25
    2e0a:	88 23       	and	r24, r24
    2e0c:	41 f0       	breq	.+16     	; 0x2e1e <sched_load_balancer+0xbe>
    2e0e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e10:	89 81       	ldd	r24, Y+1	; 0x01
    2e12:	98 17       	cp	r25, r24
    2e14:	20 f4       	brcc	.+8      	; 0x2e1e <sched_load_balancer+0xbe>
            {
                min_load = current_load;
    2e16:	8a 81       	ldd	r24, Y+2	; 0x02
    2e18:	89 83       	std	Y+1, r24	; 0x01
                ret = core;
    2e1a:	8e 81       	ldd	r24, Y+6	; 0x06
    2e1c:	8d 83       	std	Y+5, r24	; 0x05
            }
            mask<<=1;
    2e1e:	8c 81       	ldd	r24, Y+4	; 0x04
    2e20:	88 0f       	add	r24, r24
    2e22:	8c 83       	std	Y+4, r24	; 0x04
            core++;
    2e24:	8e 81       	ldd	r24, Y+6	; 0x06
    2e26:	8f 5f       	subi	r24, 0xFF	; 255
    2e28:	8e 83       	std	Y+6, r24	; 0x06
        load_t current_load, min_load;

        proc_prio = ((pitem_t *)proc)->prio;
        min_load = stat_calc_load( proc_prio, stat++ );
        // Проверка всего остального, тупой поиск минимума
        while( core < (core_id_t)MAX_CORES )
    2e2a:	8e 81       	ldd	r24, Y+6	; 0x06
    2e2c:	82 30       	cpi	r24, 0x02	; 2
    2e2e:	e0 f2       	brcs	.-72     	; 0x2de8 <sched_load_balancer+0x88>
            }
            mask<<=1;
            core++;
        }
    }
    return ret;
    2e30:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2e32:	2a 96       	adiw	r28, 0x0a	; 10
    2e34:	0f b6       	in	r0, 0x3f	; 63
    2e36:	f8 94       	cli
    2e38:	de bf       	out	0x3e, r29	; 62
    2e3a:	0f be       	out	0x3f, r0	; 63
    2e3c:	cd bf       	out	0x3d, r28	; 61
    2e3e:	cf 91       	pop	r28
    2e40:	df 91       	pop	r29
    2e42:	08 95       	ret

00002e44 <sched_highest_load_core>:
//----------------------------------------------------------------------------------------
//Поиск самой нагруженной структуры stat_t в массиве
WEAK core_id_t sched_highest_load_core( stat_t * stat )
{
    2e44:	df 93       	push	r29
    2e46:	cf 93       	push	r28
    2e48:	00 d0       	rcall	.+0      	; 0x2e4a <sched_highest_load_core+0x6>
    2e4a:	00 d0       	rcall	.+0      	; 0x2e4c <sched_highest_load_core+0x8>
    2e4c:	00 d0       	rcall	.+0      	; 0x2e4e <sched_highest_load_core+0xa>
    2e4e:	cd b7       	in	r28, 0x3d	; 61
    2e50:	de b7       	in	r29, 0x3e	; 62
    2e52:	9e 83       	std	Y+6, r25	; 0x06
    2e54:	8d 83       	std	Y+5, r24	; 0x05
    // Начальное предположение
    load_t max_load;
    core_id_t object_core = (core_id_t)0; //процессор с максимальной нагрузкой, с которого эту нагрузку будем снимать
    2e56:	1b 82       	std	Y+3, r1	; 0x03
    core_id_t core = (core_id_t)1;
    2e58:	81 e0       	ldi	r24, 0x01	; 1
    2e5a:	8a 83       	std	Y+2, r24	; 0x02
    max_load  = stat_calc_load( (prio_t)BITS_IN_INDEX_T, stat ); // максимальная нагрузка
    2e5c:	2d 81       	ldd	r18, Y+5	; 0x05
    2e5e:	3e 81       	ldd	r19, Y+6	; 0x06
    2e60:	88 e0       	ldi	r24, 0x08	; 8
    2e62:	b9 01       	movw	r22, r18
    2e64:	0e 94 a5 01 	call	0x34a	; 0x34a <stat_calc_load>
    2e68:	8c 83       	std	Y+4, r24	; 0x04
    2e6a:	17 c0       	rjmp	.+46     	; 0x2e9a <sched_highest_load_core+0x56>

    while( core < (core_id_t)MAX_CORES )
    {
        load_t current_load;
        current_load = stat_calc_load( (prio_t)BITS_IN_INDEX_T, stat + core );
    2e6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e6e:	28 2f       	mov	r18, r24
    2e70:	30 e0       	ldi	r19, 0x00	; 0
    2e72:	8d 81       	ldd	r24, Y+5	; 0x05
    2e74:	9e 81       	ldd	r25, Y+6	; 0x06
    2e76:	28 0f       	add	r18, r24
    2e78:	39 1f       	adc	r19, r25
    2e7a:	88 e0       	ldi	r24, 0x08	; 8
    2e7c:	b9 01       	movw	r22, r18
    2e7e:	0e 94 a5 01 	call	0x34a	; 0x34a <stat_calc_load>
    2e82:	89 83       	std	Y+1, r24	; 0x01
        if( current_load > max_load )
    2e84:	99 81       	ldd	r25, Y+1	; 0x01
    2e86:	8c 81       	ldd	r24, Y+4	; 0x04
    2e88:	89 17       	cp	r24, r25
    2e8a:	20 f4       	brcc	.+8      	; 0x2e94 <sched_highest_load_core+0x50>
        {
            max_load = current_load;
    2e8c:	89 81       	ldd	r24, Y+1	; 0x01
    2e8e:	8c 83       	std	Y+4, r24	; 0x04
            object_core = core;
    2e90:	8a 81       	ldd	r24, Y+2	; 0x02
    2e92:	8b 83       	std	Y+3, r24	; 0x03
        }
        core++;
    2e94:	8a 81       	ldd	r24, Y+2	; 0x02
    2e96:	8f 5f       	subi	r24, 0xFF	; 255
    2e98:	8a 83       	std	Y+2, r24	; 0x02
    load_t max_load;
    core_id_t object_core = (core_id_t)0; //процессор с максимальной нагрузкой, с которого эту нагрузку будем снимать
    core_id_t core = (core_id_t)1;
    max_load  = stat_calc_load( (prio_t)BITS_IN_INDEX_T, stat ); // максимальная нагрузка

    while( core < (core_id_t)MAX_CORES )
    2e9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e9c:	82 30       	cpi	r24, 0x02	; 2
    2e9e:	30 f3       	brcs	.-52     	; 0x2e6c <sched_highest_load_core+0x28>
            object_core = core;
        }
        core++;
    }

    return object_core;
    2ea0:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2ea2:	26 96       	adiw	r28, 0x06	; 6
    2ea4:	0f b6       	in	r0, 0x3f	; 63
    2ea6:	f8 94       	cli
    2ea8:	de bf       	out	0x3e, r29	; 62
    2eaa:	0f be       	out	0x3f, r0	; 63
    2eac:	cd bf       	out	0x3d, r28	; 61
    2eae:	cf 91       	pop	r28
    2eb0:	df 91       	pop	r29
    2eb2:	08 95       	ret

00002eb4 <sched_init>:
#endif // CONFIG_MP
//========================================================================================
// Инициация
void sched_init(sched_t * sched, proc_t * idle)
{
    2eb4:	df 93       	push	r29
    2eb6:	cf 93       	push	r28
    2eb8:	00 d0       	rcall	.+0      	; 0x2eba <sched_init+0x6>
    2eba:	00 d0       	rcall	.+0      	; 0x2ebc <sched_init+0x8>
    2ebc:	00 d0       	rcall	.+0      	; 0x2ebe <sched_init+0xa>
    2ebe:	cd b7       	in	r28, 0x3d	; 61
    2ec0:	de b7       	in	r29, 0x3e	; 62
    2ec2:	9c 83       	std	Y+4, r25	; 0x04
    2ec4:	8b 83       	std	Y+3, r24	; 0x03
    2ec6:	7e 83       	std	Y+6, r23	; 0x06
    2ec8:	6d 83       	std	Y+5, r22	; 0x05
#ifdef CONFIG_MP
    lock_t * sched_lock;
    sched_lock = &sched->lock;
    2eca:	8b 81       	ldd	r24, Y+3	; 0x03
    2ecc:	9c 81       	ldd	r25, Y+4	; 0x04
    2ece:	8a 96       	adiw	r24, 0x2a	; 42
    2ed0:	9a 83       	std	Y+2, r25	; 0x02
    2ed2:	89 83       	std	Y+1, r24	; 0x01
    spin_init( sched_lock );
    2ed4:	89 81       	ldd	r24, Y+1	; 0x01
    2ed6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ed8:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <spin_init>
    spin_lock( sched_lock );
    2edc:	89 81       	ldd	r24, Y+1	; 0x01
    2ede:	9a 81       	ldd	r25, Y+2	; 0x02
    2ee0:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
#endif // CONFIG_MP
    sched->ready = (xlist_t *)sched->plst;
    2ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ee8:	06 96       	adiw	r24, 0x06	; 6
    2eea:	eb 81       	ldd	r30, Y+3	; 0x03
    2eec:	fc 81       	ldd	r31, Y+4	; 0x04
    2eee:	93 83       	std	Z+3, r25	; 0x03
    2ef0:	82 83       	std	Z+2, r24	; 0x02
    xlist_init( sched->ready );
    2ef2:	eb 81       	ldd	r30, Y+3	; 0x03
    2ef4:	fc 81       	ldd	r31, Y+4	; 0x04
    2ef6:	82 81       	ldd	r24, Z+2	; 0x02
    2ef8:	93 81       	ldd	r25, Z+3	; 0x03
    2efa:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <xlist_init>
    sched->expired = (xlist_t *)sched->plst + 1;
    2efe:	8b 81       	ldd	r24, Y+3	; 0x03
    2f00:	9c 81       	ldd	r25, Y+4	; 0x04
    2f02:	47 96       	adiw	r24, 0x17	; 23
    2f04:	eb 81       	ldd	r30, Y+3	; 0x03
    2f06:	fc 81       	ldd	r31, Y+4	; 0x04
    2f08:	95 83       	std	Z+5, r25	; 0x05
    2f0a:	84 83       	std	Z+4, r24	; 0x04
    xlist_init( sched->expired );
    2f0c:	eb 81       	ldd	r30, Y+3	; 0x03
    2f0e:	fc 81       	ldd	r31, Y+4	; 0x04
    2f10:	84 81       	ldd	r24, Z+4	; 0x04
    2f12:	95 81       	ldd	r25, Z+5	; 0x05
    2f14:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <xlist_init>
    pitem_insert( (pitem_t *)idle, sched->ready );
    2f18:	8d 81       	ldd	r24, Y+5	; 0x05
    2f1a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f1c:	eb 81       	ldd	r30, Y+3	; 0x03
    2f1e:	fc 81       	ldd	r31, Y+4	; 0x04
    2f20:	22 81       	ldd	r18, Z+2	; 0x02
    2f22:	33 81       	ldd	r19, Z+3	; 0x03
    2f24:	b9 01       	movw	r22, r18
    2f26:	0e 94 a5 10 	call	0x214a	; 0x214a <pitem_insert>
    sched->current_proc = idle;
    2f2a:	eb 81       	ldd	r30, Y+3	; 0x03
    2f2c:	fc 81       	ldd	r31, Y+4	; 0x04
    2f2e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f30:	9e 81       	ldd	r25, Y+6	; 0x06
    2f32:	91 83       	std	Z+1, r25	; 0x01
    2f34:	80 83       	st	Z, r24
    sched->nested_crit_sec = (count_t)0;//вообще это выполняется при запрещенных прерываниях, но не известно, на этом ли процессоре
    2f36:	eb 81       	ldd	r30, Y+3	; 0x03
    2f38:	fc 81       	ldd	r31, Y+4	; 0x04
    2f3a:	11 a6       	std	Z+41, r1	; 0x29
    2f3c:	10 a6       	std	Z+40, r1	; 0x28
#ifdef CONFIG_MP
    spin_unlock( sched_lock );
    2f3e:	89 81       	ldd	r24, Y+1	; 0x01
    2f40:	9a 81       	ldd	r25, Y+2	; 0x02
    2f42:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
    stat_inc( idle, (stat_t *)kernel.stat + idle->core_id );
    2f46:	ed 81       	ldd	r30, Y+5	; 0x05
    2f48:	fe 81       	ldd	r31, Y+6	; 0x06
    2f4a:	81 a1       	ldd	r24, Z+33	; 0x21
    2f4c:	88 2f       	mov	r24, r24
    2f4e:	90 e0       	ldi	r25, 0x00	; 0
    2f50:	9c 01       	movw	r18, r24
    2f52:	21 58       	subi	r18, 0x81	; 129
    2f54:	3c 4f       	sbci	r19, 0xFC	; 252
    2f56:	8d 81       	ldd	r24, Y+5	; 0x05
    2f58:	9e 81       	ldd	r25, Y+6	; 0x06
    2f5a:	b9 01       	movw	r22, r18
    2f5c:	0e 94 6f 01 	call	0x2de	; 0x2de <stat_inc>
#endif // CONFIG_MP
}
    2f60:	26 96       	adiw	r28, 0x06	; 6
    2f62:	0f b6       	in	r0, 0x3f	; 63
    2f64:	f8 94       	cli
    2f66:	de bf       	out	0x3e, r29	; 62
    2f68:	0f be       	out	0x3f, r0	; 63
    2f6a:	cd bf       	out	0x3d, r28	; 61
    2f6c:	cf 91       	pop	r28
    2f6e:	df 91       	pop	r29
    2f70:	08 95       	ret

00002f72 <_sched_switch_current>:
static void _sched_switch_current( sched_t * sched, proc_t ** current_proc )
{
    2f72:	df 93       	push	r29
    2f74:	cf 93       	push	r28
    2f76:	00 d0       	rcall	.+0      	; 0x2f78 <_sched_switch_current+0x6>
    2f78:	00 d0       	rcall	.+0      	; 0x2f7a <_sched_switch_current+0x8>
    2f7a:	00 d0       	rcall	.+0      	; 0x2f7c <_sched_switch_current+0xa>
    2f7c:	cd b7       	in	r28, 0x3d	; 61
    2f7e:	de b7       	in	r29, 0x3e	; 62
    2f80:	9c 83       	std	Y+4, r25	; 0x04
    2f82:	8b 83       	std	Y+3, r24	; 0x03
    2f84:	7e 83       	std	Y+6, r23	; 0x06
    2f86:	6d 83       	std	Y+5, r22	; 0x05

    SPIN_LOCK( sched );
    2f88:	8b 81       	ldd	r24, Y+3	; 0x03
    2f8a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f8c:	8a 96       	adiw	r24, 0x2a	; 42
    2f8e:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    // Если список ready опустел, - переключаем списки
    if( sched->ready->index == (index_t)0 )
    2f92:	eb 81       	ldd	r30, Y+3	; 0x03
    2f94:	fc 81       	ldd	r31, Y+4	; 0x04
    2f96:	02 80       	ldd	r0, Z+2	; 0x02
    2f98:	f3 81       	ldd	r31, Z+3	; 0x03
    2f9a:	e0 2d       	mov	r30, r0
    2f9c:	80 89       	ldd	r24, Z+16	; 0x10
    2f9e:	88 23       	and	r24, r24
    2fa0:	a1 f4       	brne	.+40     	; 0x2fca <_sched_switch_current+0x58>
    {
        xlist_t * buf;
        buf = sched->ready;
    2fa2:	eb 81       	ldd	r30, Y+3	; 0x03
    2fa4:	fc 81       	ldd	r31, Y+4	; 0x04
    2fa6:	82 81       	ldd	r24, Z+2	; 0x02
    2fa8:	93 81       	ldd	r25, Z+3	; 0x03
    2faa:	9a 83       	std	Y+2, r25	; 0x02
    2fac:	89 83       	std	Y+1, r24	; 0x01
        sched->ready = sched->expired;
    2fae:	eb 81       	ldd	r30, Y+3	; 0x03
    2fb0:	fc 81       	ldd	r31, Y+4	; 0x04
    2fb2:	84 81       	ldd	r24, Z+4	; 0x04
    2fb4:	95 81       	ldd	r25, Z+5	; 0x05
    2fb6:	eb 81       	ldd	r30, Y+3	; 0x03
    2fb8:	fc 81       	ldd	r31, Y+4	; 0x04
    2fba:	93 83       	std	Z+3, r25	; 0x03
    2fbc:	82 83       	std	Z+2, r24	; 0x02
        sched->expired = buf;
    2fbe:	eb 81       	ldd	r30, Y+3	; 0x03
    2fc0:	fc 81       	ldd	r31, Y+4	; 0x04
    2fc2:	89 81       	ldd	r24, Y+1	; 0x01
    2fc4:	9a 81       	ldd	r25, Y+2	; 0x02
    2fc6:	95 83       	std	Z+5, r25	; 0x05
    2fc8:	84 83       	std	Z+4, r24	; 0x04
    }
    // Изменять указатель будем при захваченной блокировке,
    // чтобы процессы на других процессорах не прочитали неизвестно что.
    sched->current_proc = (proc_t *)xlist_head( sched->ready ); // Вытесняющая многозадачность же!
    2fca:	eb 81       	ldd	r30, Y+3	; 0x03
    2fcc:	fc 81       	ldd	r31, Y+4	; 0x04
    2fce:	82 81       	ldd	r24, Z+2	; 0x02
    2fd0:	93 81       	ldd	r25, Z+3	; 0x03
    2fd2:	0e 94 22 20 	call	0x4044	; 0x4044 <xlist_head>
    2fd6:	eb 81       	ldd	r30, Y+3	; 0x03
    2fd8:	fc 81       	ldd	r31, Y+4	; 0x04
    2fda:	91 83       	std	Z+1, r25	; 0x01
    2fdc:	80 83       	st	Z, r24
    *current_proc = sched->current_proc;
    2fde:	eb 81       	ldd	r30, Y+3	; 0x03
    2fe0:	fc 81       	ldd	r31, Y+4	; 0x04
    2fe2:	80 81       	ld	r24, Z
    2fe4:	91 81       	ldd	r25, Z+1	; 0x01
    2fe6:	ed 81       	ldd	r30, Y+5	; 0x05
    2fe8:	fe 81       	ldd	r31, Y+6	; 0x06
    2fea:	91 83       	std	Z+1, r25	; 0x01
    2fec:	80 83       	st	Z, r24

    SPIN_UNLOCK( sched );
    2fee:	8b 81       	ldd	r24, Y+3	; 0x03
    2ff0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ff2:	8a 96       	adiw	r24, 0x2a	; 42
    2ff4:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
}
    2ff8:	26 96       	adiw	r28, 0x06	; 6
    2ffa:	0f b6       	in	r0, 0x3f	; 63
    2ffc:	f8 94       	cli
    2ffe:	de bf       	out	0x3e, r29	; 62
    3000:	0f be       	out	0x3f, r0	; 63
    3002:	cd bf       	out	0x3d, r28	; 61
    3004:	cf 91       	pop	r28
    3006:	df 91       	pop	r29
    3008:	08 95       	ret

0000300a <sched_schedule>:
2) В качестве аргумента передаем только тот объект, который управляет процессами
на исполняющем функции процессоре.
******************************************************************************************/
// Функция планирования, переключает процессы в обработчике системмного таймера
void sched_schedule(void)
{
    300a:	df 93       	push	r29
    300c:	cf 93       	push	r28
    300e:	00 d0       	rcall	.+0      	; 0x3010 <sched_schedule+0x6>
    3010:	00 d0       	rcall	.+0      	; 0x3012 <sched_schedule+0x8>
    3012:	00 d0       	rcall	.+0      	; 0x3014 <sched_schedule+0xa>
    3014:	cd b7       	in	r28, 0x3d	; 61
    3016:	de b7       	in	r29, 0x3e	; 62
    proc_t * current_proc;
    sched_t * sched;
    sched = _SCHED_INIT();
    3018:	0e 94 38 0a 	call	0x1470	; 0x1470 <current_core>
    301c:	28 2f       	mov	r18, r24
    301e:	30 e0       	ldi	r19, 0x00	; 0
    3020:	8b e2       	ldi	r24, 0x2B	; 43
    3022:	90 e0       	ldi	r25, 0x00	; 0
    3024:	ac 01       	movw	r20, r24
    3026:	24 9f       	mul	r18, r20
    3028:	c0 01       	movw	r24, r0
    302a:	25 9f       	mul	r18, r21
    302c:	90 0d       	add	r25, r0
    302e:	34 9f       	mul	r19, r20
    3030:	90 0d       	add	r25, r0
    3032:	11 24       	eor	r1, r1
    3034:	87 53       	subi	r24, 0x37	; 55
    3036:	9d 4f       	sbci	r25, 0xFD	; 253
    3038:	9c 83       	std	Y+4, r25	; 0x04
    303a:	8b 83       	std	Y+3, r24	; 0x03
    // Меняем только с локального процессора, блокировку sched->lock можно не захватывать!
    current_proc = sched->current_proc;
    303c:	eb 81       	ldd	r30, Y+3	; 0x03
    303e:	fc 81       	ldd	r31, Y+4	; 0x04
    3040:	80 81       	ld	r24, Z
    3042:	91 81       	ldd	r25, Z+1	; 0x01
    3044:	9e 83       	std	Y+6, r25	; 0x06
    3046:	8d 83       	std	Y+5, r24	; 0x05
    // А вот эту блокировку обязательно надо захватить!
    SPIN_LOCK( current_proc );
    3048:	8d 81       	ldd	r24, Y+5	; 0x05
    304a:	9e 81       	ldd	r25, Y+6	; 0x06
    304c:	83 96       	adiw	r24, 0x23	; 35
    304e:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    // Хук "сохранение контекста"
    if( current_proc->sv_hook )current_proc->sv_hook( current_proc->arg );
    3052:	ed 81       	ldd	r30, Y+5	; 0x05
    3054:	fe 81       	ldd	r31, Y+6	; 0x06
    3056:	86 a1       	ldd	r24, Z+38	; 0x26
    3058:	97 a1       	ldd	r25, Z+39	; 0x27
    305a:	00 97       	sbiw	r24, 0x00	; 0
    305c:	51 f0       	breq	.+20     	; 0x3072 <sched_schedule+0x68>
    305e:	ed 81       	ldd	r30, Y+5	; 0x05
    3060:	fe 81       	ldd	r31, Y+6	; 0x06
    3062:	26 a1       	ldd	r18, Z+38	; 0x26
    3064:	37 a1       	ldd	r19, Z+39	; 0x27
    3066:	ed 81       	ldd	r30, Y+5	; 0x05
    3068:	fe 81       	ldd	r31, Y+6	; 0x06
    306a:	82 a5       	ldd	r24, Z+42	; 0x2a
    306c:	93 a5       	ldd	r25, Z+43	; 0x2b
    306e:	f9 01       	movw	r30, r18
    3070:	09 95       	icall
    // Проверяем, что процесс находится в списке ready
    if( (xlist_t *)((pitem_t *)current_proc)->list == sched->ready )
    3072:	8d 81       	ldd	r24, Y+5	; 0x05
    3074:	9e 81       	ldd	r25, Y+6	; 0x06
    3076:	fc 01       	movw	r30, r24
    3078:	24 81       	ldd	r18, Z+4	; 0x04
    307a:	35 81       	ldd	r19, Z+5	; 0x05
    307c:	eb 81       	ldd	r30, Y+3	; 0x03
    307e:	fc 81       	ldd	r31, Y+4	; 0x04
    3080:	82 81       	ldd	r24, Z+2	; 0x02
    3082:	93 81       	ldd	r25, Z+3	; 0x03
    3084:	28 17       	cp	r18, r24
    3086:	39 07       	cpc	r19, r25
    3088:	09 f0       	breq	.+2      	; 0x308c <sched_schedule+0x82>
    308a:	94 c0       	rjmp	.+296    	; 0x31b4 <sched_schedule+0x1aa>
    {
        // Переключаем cписок на следующий за текущим процесс
        SPIN_LOCK( sched );
    308c:	8b 81       	ldd	r24, Y+3	; 0x03
    308e:	9c 81       	ldd	r25, Y+4	; 0x04
    3090:	8a 96       	adiw	r24, 0x2a	; 42
    3092:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>

        xlist_switch( sched->ready, ((pitem_t *)current_proc)->prio );
    3096:	eb 81       	ldd	r30, Y+3	; 0x03
    3098:	fc 81       	ldd	r31, Y+4	; 0x04
    309a:	22 81       	ldd	r18, Z+2	; 0x02
    309c:	33 81       	ldd	r19, Z+3	; 0x03
    309e:	8d 81       	ldd	r24, Y+5	; 0x05
    30a0:	9e 81       	ldd	r25, Y+6	; 0x06
    30a2:	fc 01       	movw	r30, r24
    30a4:	46 81       	ldd	r20, Z+6	; 0x06
    30a6:	c9 01       	movw	r24, r18
    30a8:	64 2f       	mov	r22, r20
    30aa:	0e 94 4e 20 	call	0x409c	; 0x409c <xlist_switch>

        SPIN_UNLOCK( sched );
    30ae:	8b 81       	ldd	r24, Y+3	; 0x03
    30b0:	9c 81       	ldd	r25, Y+4	; 0x04
    30b2:	8a 96       	adiw	r24, 0x2a	; 42
    30b4:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
        //Проверяем, не истек ли квант времени процесса
        if( current_proc->timer > (timer_t)1 )current_proc->timer--;// Не истек, уменьшаем таймер
    30b8:	ed 81       	ldd	r30, Y+5	; 0x05
    30ba:	fe 81       	ldd	r31, Y+6	; 0x06
    30bc:	85 8d       	ldd	r24, Z+29	; 0x1d
    30be:	96 8d       	ldd	r25, Z+30	; 0x1e
    30c0:	82 30       	cpi	r24, 0x02	; 2
    30c2:	91 05       	cpc	r25, r1
    30c4:	40 f0       	brcs	.+16     	; 0x30d6 <sched_schedule+0xcc>
    30c6:	ed 81       	ldd	r30, Y+5	; 0x05
    30c8:	fe 81       	ldd	r31, Y+6	; 0x06
    30ca:	85 8d       	ldd	r24, Z+29	; 0x1d
    30cc:	96 8d       	ldd	r25, Z+30	; 0x1e
    30ce:	01 97       	sbiw	r24, 0x01	; 1
    30d0:	96 8f       	std	Z+30, r25	; 0x1e
    30d2:	85 8f       	std	Z+29, r24	; 0x1d
    30d4:	6f c0       	rjmp	.+222    	; 0x31b4 <sched_schedule+0x1aa>
        else
        {
            flag_t flags;
            // Истек, вырезаем процесс из списка
            SPIN_LOCK( sched );
    30d6:	8b 81       	ldd	r24, Y+3	; 0x03
    30d8:	9c 81       	ldd	r25, Y+4	; 0x04
    30da:	8a 96       	adiw	r24, 0x2a	; 42
    30dc:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>

            pitem_fast_cut( (pitem_t *)current_proc );
    30e0:	8d 81       	ldd	r24, Y+5	; 0x05
    30e2:	9e 81       	ldd	r25, Y+6	; 0x06
    30e4:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <pitem_fast_cut>

            SPIN_UNLOCK( sched );
    30e8:	8b 81       	ldd	r24, Y+3	; 0x03
    30ea:	9c 81       	ldd	r25, Y+4	; 0x04
    30ec:	8a 96       	adiw	r24, 0x2a	; 42
    30ee:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
            spin_lock( &kernel.stat_lock );
            // Обновили статистику после удаления процесса из списка ready
            stat_dec( current_proc, (stat_t *)kernel.stat + current_proc->core_id );
#endif // CONFIG_USE_ALB
            // А что за процесс собственно?
            flags = current_proc->flags;
    30f2:	ed 81       	ldd	r30, Y+5	; 0x05
    30f4:	fe 81       	ldd	r31, Y+6	; 0x06
    30f6:	87 81       	ldd	r24, Z+7	; 0x07
    30f8:	90 85       	ldd	r25, Z+8	; 0x08
    30fa:	9a 83       	std	Y+2, r25	; 0x02
    30fc:	89 83       	std	Y+1, r24	; 0x01
            if(
    30fe:	89 81       	ldd	r24, Y+1	; 0x01
    3100:	9a 81       	ldd	r25, Y+2	; 0x02
    3102:	81 70       	andi	r24, 0x01	; 1
    3104:	90 70       	andi	r25, 0x00	; 0
    3106:	00 97       	sbiw	r24, 0x00	; 0
    3108:	31 f0       	breq	.+12     	; 0x3116 <sched_schedule+0x10c>
    310a:	89 81       	ldd	r24, Y+1	; 0x01
    310c:	9a 81       	ldd	r25, Y+2	; 0x02
    310e:	8c 70       	andi	r24, 0x0C	; 12
    3110:	90 70       	andi	r25, 0x00	; 0
    3112:	00 97       	sbiw	r24, 0x00	; 0
    3114:	f1 f0       	breq	.+60     	; 0x3152 <sched_schedule+0x148>
                SPIN_LOCK( new_sched );
                pitem_insert( (pitem_t *)current_proc, new_sched->expired );
                SPIN_UNLOCK( new_sched );
#else // CONFIG_MP CONFIG_USE_ALB
                // Тупо переносим процесс в список expired
                SPIN_LOCK( sched );
    3116:	8b 81       	ldd	r24, Y+3	; 0x03
    3118:	9c 81       	ldd	r25, Y+4	; 0x04
    311a:	8a 96       	adiw	r24, 0x2a	; 42
    311c:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>

                pitem_insert( (pitem_t *)current_proc, sched->expired );
    3120:	8d 81       	ldd	r24, Y+5	; 0x05
    3122:	9e 81       	ldd	r25, Y+6	; 0x06
    3124:	eb 81       	ldd	r30, Y+3	; 0x03
    3126:	fc 81       	ldd	r31, Y+4	; 0x04
    3128:	24 81       	ldd	r18, Z+4	; 0x04
    312a:	35 81       	ldd	r19, Z+5	; 0x05
    312c:	b9 01       	movw	r22, r18
    312e:	0e 94 a5 10 	call	0x214a	; 0x214a <pitem_insert>

                SPIN_UNLOCK( sched );
    3132:	8b 81       	ldd	r24, Y+3	; 0x03
    3134:	9c 81       	ldd	r25, Y+4	; 0x04
    3136:	8a 96       	adiw	r24, 0x2a	; 42
    3138:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>

#endif // CONFIG_MP CONFIG_USE_ALB
                current_proc->timer = current_proc->time_quant; // Сбросили таймер!
    313c:	ad 81       	ldd	r26, Y+5	; 0x05
    313e:	be 81       	ldd	r27, Y+6	; 0x06
    3140:	ed 81       	ldd	r30, Y+5	; 0x05
    3142:	fe 81       	ldd	r31, Y+6	; 0x06
    3144:	83 8d       	ldd	r24, Z+27	; 0x1b
    3146:	94 8d       	ldd	r25, Z+28	; 0x1c
    3148:	5e 96       	adiw	r26, 0x1e	; 30
    314a:	9c 93       	st	X, r25
    314c:	8e 93       	st	-X, r24
    314e:	5d 97       	sbiw	r26, 0x1d	; 29
    3150:	31 c0       	rjmp	.+98     	; 0x31b4 <sched_schedule+0x1aa>
                /*********************************************************
                Если не используется активная схема балансировки нагрузки,
                то захват нужно делать тут, блокировка захватывается только
                в этой ветви оператора if.
                *********************************************************/
                spin_lock( &kernel.stat_lock );
    3152:	81 e8       	ldi	r24, 0x81	; 129
    3154:	93 e0       	ldi	r25, 0x03	; 3
    3156:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
                stat_dec( current_proc, (stat_t *)kernel.stat + current_proc->core_id );
    315a:	4d 81       	ldd	r20, Y+5	; 0x05
    315c:	5e 81       	ldd	r21, Y+6	; 0x06
    315e:	ed 81       	ldd	r30, Y+5	; 0x05
    3160:	fe 81       	ldd	r31, Y+6	; 0x06
    3162:	81 a1       	ldd	r24, Z+33	; 0x21
    3164:	88 2f       	mov	r24, r24
    3166:	90 e0       	ldi	r25, 0x00	; 0
    3168:	9c 01       	movw	r18, r24
    316a:	21 58       	subi	r18, 0x81	; 129
    316c:	3c 4f       	sbci	r19, 0xFC	; 252
    316e:	ca 01       	movw	r24, r20
    3170:	b9 01       	movw	r22, r18
    3172:	0e 94 57 01 	call	0x2ae	; 0x2ae <stat_dec>
                 - если используется активная схема балансировки нагрузки,
                то блокировка была захвачена до входа в if;
                 - если не используется активная схема балансировки нагрузки,
                то блокировка была захвачена в этой ветви if.
                *********************************************************/
                spin_unlock( &kernel.stat_lock );
    3176:	81 e8       	ldi	r24, 0x81	; 129
    3178:	93 e0       	ldi	r25, 0x03	; 3
    317a:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
#endif // CONFIG_MP
                ((pitem_t *)current_proc)->list = (xlist_t *)0;// Просто вырезали из списка, как в pitem_cut
    317e:	8d 81       	ldd	r24, Y+5	; 0x05
    3180:	9e 81       	ldd	r25, Y+6	; 0x06
    3182:	fc 01       	movw	r30, r24
    3184:	15 82       	std	Z+5, r1	; 0x05
    3186:	14 82       	std	Z+4, r1	; 0x04
                current_proc->flags |= PROC_FLG_WD_STOP;//Остановлен по WD
    3188:	ad 81       	ldd	r26, Y+5	; 0x05
    318a:	be 81       	ldd	r27, Y+6	; 0x06
    318c:	ed 81       	ldd	r30, Y+5	; 0x05
    318e:	fe 81       	ldd	r31, Y+6	; 0x06
    3190:	87 81       	ldd	r24, Z+7	; 0x07
    3192:	90 85       	ldd	r25, Z+8	; 0x08
    3194:	92 60       	ori	r25, 0x02	; 2
    3196:	18 96       	adiw	r26, 0x08	; 8
    3198:	9c 93       	st	X, r25
    319a:	8e 93       	st	-X, r24
    319c:	17 97       	sbiw	r26, 0x07	; 7
                current_proc->flags &= ~PROC_FLG_RUN;
    319e:	ad 81       	ldd	r26, Y+5	; 0x05
    31a0:	be 81       	ldd	r27, Y+6	; 0x06
    31a2:	ed 81       	ldd	r30, Y+5	; 0x05
    31a4:	fe 81       	ldd	r31, Y+6	; 0x06
    31a6:	87 81       	ldd	r24, Z+7	; 0x07
    31a8:	90 85       	ldd	r25, Z+8	; 0x08
    31aa:	8d 7f       	andi	r24, 0xFD	; 253
    31ac:	18 96       	adiw	r26, 0x08	; 8
    31ae:	9c 93       	st	X, r25
    31b0:	8e 93       	st	-X, r24
    31b2:	17 97       	sbiw	r26, 0x07	; 7
            }
        }
    }
    //Текущий процесс более не нужен, освобождаем его блокировку
    SPIN_UNLOCK( current_proc );
    31b4:	8d 81       	ldd	r24, Y+5	; 0x05
    31b6:	9e 81       	ldd	r25, Y+6	; 0x06
    31b8:	83 96       	adiw	r24, 0x23	; 35
    31ba:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>

    _sched_switch_current( sched, &current_proc );
    31be:	8b 81       	ldd	r24, Y+3	; 0x03
    31c0:	9c 81       	ldd	r25, Y+4	; 0x04
    31c2:	9e 01       	movw	r18, r28
    31c4:	2b 5f       	subi	r18, 0xFB	; 251
    31c6:	3f 4f       	sbci	r19, 0xFF	; 255
    31c8:	b9 01       	movw	r22, r18
    31ca:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <_sched_switch_current>

    SPIN_LOCK( current_proc );
    31ce:	8d 81       	ldd	r24, Y+5	; 0x05
    31d0:	9e 81       	ldd	r25, Y+6	; 0x06
    31d2:	83 96       	adiw	r24, 0x23	; 35
    31d4:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    //Хук "восстановление контекста"
    if( current_proc->rs_hook )current_proc->rs_hook( current_proc->arg );
    31d8:	ed 81       	ldd	r30, Y+5	; 0x05
    31da:	fe 81       	ldd	r31, Y+6	; 0x06
    31dc:	80 a5       	ldd	r24, Z+40	; 0x28
    31de:	91 a5       	ldd	r25, Z+41	; 0x29
    31e0:	00 97       	sbiw	r24, 0x00	; 0
    31e2:	51 f0       	breq	.+20     	; 0x31f8 <sched_schedule+0x1ee>
    31e4:	ed 81       	ldd	r30, Y+5	; 0x05
    31e6:	fe 81       	ldd	r31, Y+6	; 0x06
    31e8:	20 a5       	ldd	r18, Z+40	; 0x28
    31ea:	31 a5       	ldd	r19, Z+41	; 0x29
    31ec:	ed 81       	ldd	r30, Y+5	; 0x05
    31ee:	fe 81       	ldd	r31, Y+6	; 0x06
    31f0:	82 a5       	ldd	r24, Z+42	; 0x2a
    31f2:	93 a5       	ldd	r25, Z+43	; 0x2b
    31f4:	f9 01       	movw	r30, r18
    31f6:	09 95       	icall

    SPIN_UNLOCK( current_proc );
    31f8:	8d 81       	ldd	r24, Y+5	; 0x05
    31fa:	9e 81       	ldd	r25, Y+6	; 0x06
    31fc:	83 96       	adiw	r24, 0x23	; 35
    31fe:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
}
    3202:	26 96       	adiw	r28, 0x06	; 6
    3204:	0f b6       	in	r0, 0x3f	; 63
    3206:	f8 94       	cli
    3208:	de bf       	out	0x3e, r29	; 62
    320a:	0f be       	out	0x3f, r0	; 63
    320c:	cd bf       	out	0x3d, r28	; 61
    320e:	cf 91       	pop	r28
    3210:	df 91       	pop	r29
    3212:	08 95       	ret

00003214 <sched_reschedule>:
//----------------------------------------------------------------------------------------
// Функция перепланирования, переключает процессы в обработчике прерывания resched
void sched_reschedule(void)
{
    3214:	df 93       	push	r29
    3216:	cf 93       	push	r28
    3218:	00 d0       	rcall	.+0      	; 0x321a <sched_reschedule+0x6>
    321a:	00 d0       	rcall	.+0      	; 0x321c <sched_reschedule+0x8>
    321c:	cd b7       	in	r28, 0x3d	; 61
    321e:	de b7       	in	r29, 0x3e	; 62
    proc_t * current_proc;
    sched_t * sched;
    sched = _SCHED_INIT();
    3220:	0e 94 38 0a 	call	0x1470	; 0x1470 <current_core>
    3224:	28 2f       	mov	r18, r24
    3226:	30 e0       	ldi	r19, 0x00	; 0
    3228:	8b e2       	ldi	r24, 0x2B	; 43
    322a:	90 e0       	ldi	r25, 0x00	; 0
    322c:	ac 01       	movw	r20, r24
    322e:	24 9f       	mul	r18, r20
    3230:	c0 01       	movw	r24, r0
    3232:	25 9f       	mul	r18, r21
    3234:	90 0d       	add	r25, r0
    3236:	34 9f       	mul	r19, r20
    3238:	90 0d       	add	r25, r0
    323a:	11 24       	eor	r1, r1
    323c:	87 53       	subi	r24, 0x37	; 55
    323e:	9d 4f       	sbci	r25, 0xFD	; 253
    3240:	9a 83       	std	Y+2, r25	; 0x02
    3242:	89 83       	std	Y+1, r24	; 0x01
    // Меняем только с локального процессора, блокировку sched->lock можно не захватывать!
    current_proc = sched->current_proc;
    3244:	e9 81       	ldd	r30, Y+1	; 0x01
    3246:	fa 81       	ldd	r31, Y+2	; 0x02
    3248:	80 81       	ld	r24, Z
    324a:	91 81       	ldd	r25, Z+1	; 0x01
    324c:	9c 83       	std	Y+4, r25	; 0x04
    324e:	8b 83       	std	Y+3, r24	; 0x03
    // А вот эту блокировку обязательно надо захватить!
    SPIN_LOCK( current_proc );
    3250:	8b 81       	ldd	r24, Y+3	; 0x03
    3252:	9c 81       	ldd	r25, Y+4	; 0x04
    3254:	83 96       	adiw	r24, 0x23	; 35
    3256:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    // Хук "сохранение контекста"
    if( current_proc->sv_hook )current_proc->sv_hook( current_proc->arg );
    325a:	eb 81       	ldd	r30, Y+3	; 0x03
    325c:	fc 81       	ldd	r31, Y+4	; 0x04
    325e:	86 a1       	ldd	r24, Z+38	; 0x26
    3260:	97 a1       	ldd	r25, Z+39	; 0x27
    3262:	00 97       	sbiw	r24, 0x00	; 0
    3264:	51 f0       	breq	.+20     	; 0x327a <sched_reschedule+0x66>
    3266:	eb 81       	ldd	r30, Y+3	; 0x03
    3268:	fc 81       	ldd	r31, Y+4	; 0x04
    326a:	26 a1       	ldd	r18, Z+38	; 0x26
    326c:	37 a1       	ldd	r19, Z+39	; 0x27
    326e:	eb 81       	ldd	r30, Y+3	; 0x03
    3270:	fc 81       	ldd	r31, Y+4	; 0x04
    3272:	82 a5       	ldd	r24, Z+42	; 0x2a
    3274:	93 a5       	ldd	r25, Z+43	; 0x2b
    3276:	f9 01       	movw	r30, r18
    3278:	09 95       	icall

    SPIN_UNLOCK( current_proc );
    327a:	8b 81       	ldd	r24, Y+3	; 0x03
    327c:	9c 81       	ldd	r25, Y+4	; 0x04
    327e:	83 96       	adiw	r24, 0x23	; 35
    3280:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>

    _sched_switch_current( sched, &current_proc );
    3284:	89 81       	ldd	r24, Y+1	; 0x01
    3286:	9a 81       	ldd	r25, Y+2	; 0x02
    3288:	9e 01       	movw	r18, r28
    328a:	2d 5f       	subi	r18, 0xFD	; 253
    328c:	3f 4f       	sbci	r19, 0xFF	; 255
    328e:	b9 01       	movw	r22, r18
    3290:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <_sched_switch_current>

    SPIN_LOCK( current_proc );
    3294:	8b 81       	ldd	r24, Y+3	; 0x03
    3296:	9c 81       	ldd	r25, Y+4	; 0x04
    3298:	83 96       	adiw	r24, 0x23	; 35
    329a:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    //Хук "восстановление контекста"
    if( current_proc->rs_hook )current_proc->rs_hook( current_proc->arg );
    329e:	eb 81       	ldd	r30, Y+3	; 0x03
    32a0:	fc 81       	ldd	r31, Y+4	; 0x04
    32a2:	80 a5       	ldd	r24, Z+40	; 0x28
    32a4:	91 a5       	ldd	r25, Z+41	; 0x29
    32a6:	00 97       	sbiw	r24, 0x00	; 0
    32a8:	51 f0       	breq	.+20     	; 0x32be <sched_reschedule+0xaa>
    32aa:	eb 81       	ldd	r30, Y+3	; 0x03
    32ac:	fc 81       	ldd	r31, Y+4	; 0x04
    32ae:	20 a5       	ldd	r18, Z+40	; 0x28
    32b0:	31 a5       	ldd	r19, Z+41	; 0x29
    32b2:	eb 81       	ldd	r30, Y+3	; 0x03
    32b4:	fc 81       	ldd	r31, Y+4	; 0x04
    32b6:	82 a5       	ldd	r24, Z+42	; 0x2a
    32b8:	93 a5       	ldd	r25, Z+43	; 0x2b
    32ba:	f9 01       	movw	r30, r18
    32bc:	09 95       	icall

    SPIN_UNLOCK( current_proc );
    32be:	8b 81       	ldd	r24, Y+3	; 0x03
    32c0:	9c 81       	ldd	r25, Y+4	; 0x04
    32c2:	83 96       	adiw	r24, 0x23	; 35
    32c4:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
}
    32c8:	0f 90       	pop	r0
    32ca:	0f 90       	pop	r0
    32cc:	0f 90       	pop	r0
    32ce:	0f 90       	pop	r0
    32d0:	cf 91       	pop	r28
    32d2:	df 91       	pop	r29
    32d4:	08 95       	ret

000032d6 <sem_init_isr>:
*****************************************************************************************/
#include "../include/bugurt.h"

// Инициализация
void sem_init_isr( sem_t * sem, count_t count )
{
    32d6:	df 93       	push	r29
    32d8:	cf 93       	push	r28
    32da:	00 d0       	rcall	.+0      	; 0x32dc <sem_init_isr+0x6>
    32dc:	00 d0       	rcall	.+0      	; 0x32de <sem_init_isr+0x8>
    32de:	cd b7       	in	r28, 0x3d	; 61
    32e0:	de b7       	in	r29, 0x3e	; 62
    32e2:	9a 83       	std	Y+2, r25	; 0x02
    32e4:	89 83       	std	Y+1, r24	; 0x01
    32e6:	7c 83       	std	Y+4, r23	; 0x04
    32e8:	6b 83       	std	Y+3, r22	; 0x03
    SPIN_INIT( sem );
    32ea:	89 81       	ldd	r24, Y+1	; 0x01
    32ec:	9a 81       	ldd	r25, Y+2	; 0x02
    32ee:	43 96       	adiw	r24, 0x13	; 19
    32f0:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <spin_init>
    SPIN_LOCK( sem );
    32f4:	89 81       	ldd	r24, Y+1	; 0x01
    32f6:	9a 81       	ldd	r25, Y+2	; 0x02
    32f8:	43 96       	adiw	r24, 0x13	; 19
    32fa:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>

    xlist_init( (xlist_t *)sem );
    32fe:	89 81       	ldd	r24, Y+1	; 0x01
    3300:	9a 81       	ldd	r25, Y+2	; 0x02
    3302:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <xlist_init>
    sem->counter = count;
    3306:	e9 81       	ldd	r30, Y+1	; 0x01
    3308:	fa 81       	ldd	r31, Y+2	; 0x02
    330a:	8b 81       	ldd	r24, Y+3	; 0x03
    330c:	9c 81       	ldd	r25, Y+4	; 0x04
    330e:	92 8b       	std	Z+18, r25	; 0x12
    3310:	81 8b       	std	Z+17, r24	; 0x11
    SPIN_UNLOCK( sem );
    3312:	89 81       	ldd	r24, Y+1	; 0x01
    3314:	9a 81       	ldd	r25, Y+2	; 0x02
    3316:	43 96       	adiw	r24, 0x13	; 19
    3318:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
}
    331c:	0f 90       	pop	r0
    331e:	0f 90       	pop	r0
    3320:	0f 90       	pop	r0
    3322:	0f 90       	pop	r0
    3324:	cf 91       	pop	r28
    3326:	df 91       	pop	r29
    3328:	08 95       	ret

0000332a <_sem_lock>:

bool_t _sem_lock( sem_t * sem )
{
    332a:	df 93       	push	r29
    332c:	cf 93       	push	r28
    332e:	00 d0       	rcall	.+0      	; 0x3330 <_sem_lock+0x6>
    3330:	00 d0       	rcall	.+0      	; 0x3332 <_sem_lock+0x8>
    3332:	0f 92       	push	r0
    3334:	cd b7       	in	r28, 0x3d	; 61
    3336:	de b7       	in	r29, 0x3e	; 62
    3338:	9d 83       	std	Y+5, r25	; 0x05
    333a:	8c 83       	std	Y+4, r24	; 0x04
    bool_t ret = (bool_t)0;
    333c:	1b 82       	std	Y+3, r1	; 0x03
    proc_t * proc;
    proc = current_proc();
    333e:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <current_proc>
    3342:	9a 83       	std	Y+2, r25	; 0x02
    3344:	89 83       	std	Y+1, r24	; 0x01
    // Выставляем флаг захватат семафора
    SPIN_LOCK( proc );
    3346:	89 81       	ldd	r24, Y+1	; 0x01
    3348:	9a 81       	ldd	r25, Y+2	; 0x02
    334a:	83 96       	adiw	r24, 0x23	; 35
    334c:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    proc->flags |= PROC_FLG_SEM;
    3350:	e9 81       	ldd	r30, Y+1	; 0x01
    3352:	fa 81       	ldd	r31, Y+2	; 0x02
    3354:	87 81       	ldd	r24, Z+7	; 0x07
    3356:	90 85       	ldd	r25, Z+8	; 0x08
    3358:	88 60       	ori	r24, 0x08	; 8
    335a:	e9 81       	ldd	r30, Y+1	; 0x01
    335c:	fa 81       	ldd	r31, Y+2	; 0x02
    335e:	90 87       	std	Z+8, r25	; 0x08
    3360:	87 83       	std	Z+7, r24	; 0x07
    SPIN_UNLOCK( proc );
    3362:	89 81       	ldd	r24, Y+1	; 0x01
    3364:	9a 81       	ldd	r25, Y+2	; 0x02
    3366:	83 96       	adiw	r24, 0x23	; 35
    3368:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
    // Собственно захват семафора
    SPIN_LOCK( sem );
    336c:	8c 81       	ldd	r24, Y+4	; 0x04
    336e:	9d 81       	ldd	r25, Y+5	; 0x05
    3370:	43 96       	adiw	r24, 0x13	; 19
    3372:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    if( sem->counter != 0 )
    3376:	ec 81       	ldd	r30, Y+4	; 0x04
    3378:	fd 81       	ldd	r31, Y+5	; 0x05
    337a:	81 89       	ldd	r24, Z+17	; 0x11
    337c:	92 89       	ldd	r25, Z+18	; 0x12
    337e:	00 97       	sbiw	r24, 0x00	; 0
    3380:	61 f0       	breq	.+24     	; 0x339a <_sem_lock+0x70>
    {
        sem->counter--;
    3382:	ec 81       	ldd	r30, Y+4	; 0x04
    3384:	fd 81       	ldd	r31, Y+5	; 0x05
    3386:	81 89       	ldd	r24, Z+17	; 0x11
    3388:	92 89       	ldd	r25, Z+18	; 0x12
    338a:	01 97       	sbiw	r24, 0x01	; 1
    338c:	ec 81       	ldd	r30, Y+4	; 0x04
    338e:	fd 81       	ldd	r31, Y+5	; 0x05
    3390:	92 8b       	std	Z+18, r25	; 0x12
    3392:	81 8b       	std	Z+17, r24	; 0x11
        ret = (bool_t)1;
    3394:	81 e0       	ldi	r24, 0x01	; 1
    3396:	8b 83       	std	Y+3, r24	; 0x03
    3398:	1e c0       	rjmp	.+60     	; 0x33d6 <_sem_lock+0xac>
    }
    else
    {
        SPIN_LOCK( proc );
    339a:	89 81       	ldd	r24, Y+1	; 0x01
    339c:	9a 81       	ldd	r25, Y+2	; 0x02
    339e:	83 96       	adiw	r24, 0x23	; 35
    33a0:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
        proc->flags |= PROC_FLG_QUEUE;
    33a4:	e9 81       	ldd	r30, Y+1	; 0x01
    33a6:	fa 81       	ldd	r31, Y+2	; 0x02
    33a8:	87 81       	ldd	r24, Z+7	; 0x07
    33aa:	90 85       	ldd	r25, Z+8	; 0x08
    33ac:	80 61       	ori	r24, 0x10	; 16
    33ae:	e9 81       	ldd	r30, Y+1	; 0x01
    33b0:	fa 81       	ldd	r31, Y+2	; 0x02
    33b2:	90 87       	std	Z+8, r25	; 0x08
    33b4:	87 83       	std	Z+7, r24	; 0x07
        _proc_stop( proc );
    33b6:	89 81       	ldd	r24, Y+1	; 0x01
    33b8:	9a 81       	ldd	r25, Y+2	; 0x02
    33ba:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <_proc_stop>
        pitem_insert( (pitem_t *)proc, (xlist_t *)sem );
    33be:	89 81       	ldd	r24, Y+1	; 0x01
    33c0:	9a 81       	ldd	r25, Y+2	; 0x02
    33c2:	2c 81       	ldd	r18, Y+4	; 0x04
    33c4:	3d 81       	ldd	r19, Y+5	; 0x05
    33c6:	b9 01       	movw	r22, r18
    33c8:	0e 94 a5 10 	call	0x214a	; 0x214a <pitem_insert>
        SPIN_UNLOCK( proc );
    33cc:	89 81       	ldd	r24, Y+1	; 0x01
    33ce:	9a 81       	ldd	r25, Y+2	; 0x02
    33d0:	83 96       	adiw	r24, 0x23	; 35
    33d2:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
    }
    SPIN_UNLOCK( sem );
    33d6:	8c 81       	ldd	r24, Y+4	; 0x04
    33d8:	9d 81       	ldd	r25, Y+5	; 0x05
    33da:	43 96       	adiw	r24, 0x13	; 19
    33dc:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
    return ret;
    33e0:	8b 81       	ldd	r24, Y+3	; 0x03
}
    33e2:	0f 90       	pop	r0
    33e4:	0f 90       	pop	r0
    33e6:	0f 90       	pop	r0
    33e8:	0f 90       	pop	r0
    33ea:	0f 90       	pop	r0
    33ec:	cf 91       	pop	r28
    33ee:	df 91       	pop	r29
    33f0:	08 95       	ret

000033f2 <_sem_try_lock>:

bool_t _sem_try_lock( sem_t * sem )
{
    33f2:	df 93       	push	r29
    33f4:	cf 93       	push	r28
    33f6:	00 d0       	rcall	.+0      	; 0x33f8 <_sem_try_lock+0x6>
    33f8:	00 d0       	rcall	.+0      	; 0x33fa <_sem_try_lock+0x8>
    33fa:	0f 92       	push	r0
    33fc:	cd b7       	in	r28, 0x3d	; 61
    33fe:	de b7       	in	r29, 0x3e	; 62
    3400:	9d 83       	std	Y+5, r25	; 0x05
    3402:	8c 83       	std	Y+4, r24	; 0x04
    bool_t ret = (bool_t)0;
    3404:	1b 82       	std	Y+3, r1	; 0x03
    SPIN_LOCK( sem );
    3406:	8c 81       	ldd	r24, Y+4	; 0x04
    3408:	9d 81       	ldd	r25, Y+5	; 0x05
    340a:	43 96       	adiw	r24, 0x13	; 19
    340c:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    if( sem->counter != 0 )
    3410:	ec 81       	ldd	r30, Y+4	; 0x04
    3412:	fd 81       	ldd	r31, Y+5	; 0x05
    3414:	81 89       	ldd	r24, Z+17	; 0x11
    3416:	92 89       	ldd	r25, Z+18	; 0x12
    3418:	00 97       	sbiw	r24, 0x00	; 0
    341a:	11 f1       	breq	.+68     	; 0x3460 <_sem_try_lock+0x6e>
    {
        proc_t * proc;
        proc = current_proc();
    341c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <current_proc>
    3420:	9a 83       	std	Y+2, r25	; 0x02
    3422:	89 83       	std	Y+1, r24	; 0x01

        sem->counter--;
    3424:	ec 81       	ldd	r30, Y+4	; 0x04
    3426:	fd 81       	ldd	r31, Y+5	; 0x05
    3428:	81 89       	ldd	r24, Z+17	; 0x11
    342a:	92 89       	ldd	r25, Z+18	; 0x12
    342c:	01 97       	sbiw	r24, 0x01	; 1
    342e:	ec 81       	ldd	r30, Y+4	; 0x04
    3430:	fd 81       	ldd	r31, Y+5	; 0x05
    3432:	92 8b       	std	Z+18, r25	; 0x12
    3434:	81 8b       	std	Z+17, r24	; 0x11
        ret = (bool_t)1;
    3436:	81 e0       	ldi	r24, 0x01	; 1
    3438:	8b 83       	std	Y+3, r24	; 0x03
        // Выставляем флаг захватат семафора
        SPIN_LOCK( proc );
    343a:	89 81       	ldd	r24, Y+1	; 0x01
    343c:	9a 81       	ldd	r25, Y+2	; 0x02
    343e:	83 96       	adiw	r24, 0x23	; 35
    3440:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
        proc->flags |= PROC_FLG_SEM;
    3444:	e9 81       	ldd	r30, Y+1	; 0x01
    3446:	fa 81       	ldd	r31, Y+2	; 0x02
    3448:	87 81       	ldd	r24, Z+7	; 0x07
    344a:	90 85       	ldd	r25, Z+8	; 0x08
    344c:	88 60       	ori	r24, 0x08	; 8
    344e:	e9 81       	ldd	r30, Y+1	; 0x01
    3450:	fa 81       	ldd	r31, Y+2	; 0x02
    3452:	90 87       	std	Z+8, r25	; 0x08
    3454:	87 83       	std	Z+7, r24	; 0x07
        SPIN_UNLOCK( proc );
    3456:	89 81       	ldd	r24, Y+1	; 0x01
    3458:	9a 81       	ldd	r25, Y+2	; 0x02
    345a:	83 96       	adiw	r24, 0x23	; 35
    345c:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
    }
    SPIN_UNLOCK( sem );
    3460:	8c 81       	ldd	r24, Y+4	; 0x04
    3462:	9d 81       	ldd	r25, Y+5	; 0x05
    3464:	43 96       	adiw	r24, 0x13	; 19
    3466:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
    return ret;
    346a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    346c:	0f 90       	pop	r0
    346e:	0f 90       	pop	r0
    3470:	0f 90       	pop	r0
    3472:	0f 90       	pop	r0
    3474:	0f 90       	pop	r0
    3476:	cf 91       	pop	r28
    3478:	df 91       	pop	r29
    347a:	08 95       	ret

0000347c <sem_unlock_isr>:

void sem_unlock_isr( sem_t * sem )
{
    347c:	df 93       	push	r29
    347e:	cf 93       	push	r28
    3480:	00 d0       	rcall	.+0      	; 0x3482 <sem_unlock_isr+0x6>
    3482:	00 d0       	rcall	.+0      	; 0x3484 <sem_unlock_isr+0x8>
    3484:	cd b7       	in	r28, 0x3d	; 61
    3486:	de b7       	in	r29, 0x3e	; 62
    3488:	9c 83       	std	Y+4, r25	; 0x04
    348a:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc;
    SPIN_LOCK( sem );
    348c:	8b 81       	ldd	r24, Y+3	; 0x03
    348e:	9c 81       	ldd	r25, Y+4	; 0x04
    3490:	43 96       	adiw	r24, 0x13	; 19
    3492:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>

    if( ((xlist_t *)sem)->index == (index_t)0  )
    3496:	eb 81       	ldd	r30, Y+3	; 0x03
    3498:	fc 81       	ldd	r31, Y+4	; 0x04
    349a:	80 89       	ldd	r24, Z+16	; 0x10
    349c:	88 23       	and	r24, r24
    349e:	51 f4       	brne	.+20     	; 0x34b4 <sem_unlock_isr+0x38>
    {
        sem->counter++;
    34a0:	eb 81       	ldd	r30, Y+3	; 0x03
    34a2:	fc 81       	ldd	r31, Y+4	; 0x04
    34a4:	81 89       	ldd	r24, Z+17	; 0x11
    34a6:	92 89       	ldd	r25, Z+18	; 0x12
    34a8:	01 96       	adiw	r24, 0x01	; 1
    34aa:	eb 81       	ldd	r30, Y+3	; 0x03
    34ac:	fc 81       	ldd	r31, Y+4	; 0x04
    34ae:	92 8b       	std	Z+18, r25	; 0x12
    34b0:	81 8b       	std	Z+17, r24	; 0x11
    34b2:	21 c0       	rjmp	.+66     	; 0x34f6 <sem_unlock_isr+0x7a>
        goto end;
    }
    proc = (proc_t *)xlist_head((xlist_t *)sem);
    34b4:	8b 81       	ldd	r24, Y+3	; 0x03
    34b6:	9c 81       	ldd	r25, Y+4	; 0x04
    34b8:	0e 94 22 20 	call	0x4044	; 0x4044 <xlist_head>
    34bc:	9a 83       	std	Y+2, r25	; 0x02
    34be:	89 83       	std	Y+1, r24	; 0x01

    SPIN_LOCK( proc );
    34c0:	89 81       	ldd	r24, Y+1	; 0x01
    34c2:	9a 81       	ldd	r25, Y+2	; 0x02
    34c4:	83 96       	adiw	r24, 0x23	; 35
    34c6:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>

    pitem_cut( (pitem_t *)proc );
    34ca:	89 81       	ldd	r24, Y+1	; 0x01
    34cc:	9a 81       	ldd	r25, Y+2	; 0x02
    34ce:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <pitem_cut>
    proc->flags &= ~PROC_FLG_QUEUE;
    34d2:	e9 81       	ldd	r30, Y+1	; 0x01
    34d4:	fa 81       	ldd	r31, Y+2	; 0x02
    34d6:	87 81       	ldd	r24, Z+7	; 0x07
    34d8:	90 85       	ldd	r25, Z+8	; 0x08
    34da:	8f 7e       	andi	r24, 0xEF	; 239
    34dc:	e9 81       	ldd	r30, Y+1	; 0x01
    34de:	fa 81       	ldd	r31, Y+2	; 0x02
    34e0:	90 87       	std	Z+8, r25	; 0x08
    34e2:	87 83       	std	Z+7, r24	; 0x07
    _proc_run( proc );
    34e4:	89 81       	ldd	r24, Y+1	; 0x01
    34e6:	9a 81       	ldd	r25, Y+2	; 0x02
    34e8:	0e 94 df 12 	call	0x25be	; 0x25be <_proc_run>

    SPIN_UNLOCK( proc );
    34ec:	89 81       	ldd	r24, Y+1	; 0x01
    34ee:	9a 81       	ldd	r25, Y+2	; 0x02
    34f0:	83 96       	adiw	r24, 0x23	; 35
    34f2:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
end:
    SPIN_UNLOCK( sem );
    34f6:	8b 81       	ldd	r24, Y+3	; 0x03
    34f8:	9c 81       	ldd	r25, Y+4	; 0x04
    34fa:	43 96       	adiw	r24, 0x13	; 19
    34fc:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
}
    3500:	0f 90       	pop	r0
    3502:	0f 90       	pop	r0
    3504:	0f 90       	pop	r0
    3506:	0f 90       	pop	r0
    3508:	cf 91       	pop	r28
    350a:	df 91       	pop	r29
    350c:	08 95       	ret

0000350e <sig_init_isr>:
*****************************************************************************************/
#include "../include/bugurt.h"
//========================================================================================
// Инициация
void sig_init_isr( sig_t * sig )
{
    350e:	df 93       	push	r29
    3510:	cf 93       	push	r28
    3512:	00 d0       	rcall	.+0      	; 0x3514 <sig_init_isr+0x6>
    3514:	0f 92       	push	r0
    3516:	cd b7       	in	r28, 0x3d	; 61
    3518:	de b7       	in	r29, 0x3e	; 62
    351a:	9b 83       	std	Y+3, r25	; 0x03
    351c:	8a 83       	std	Y+2, r24	; 0x02
#ifdef CONFIG_MP
    core_id_t i;
    SPIN_INIT( sig );
    351e:	8a 81       	ldd	r24, Y+2	; 0x02
    3520:	9b 81       	ldd	r25, Y+3	; 0x03
    3522:	84 96       	adiw	r24, 0x24	; 36
    3524:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <spin_init>
    SPIN_LOCK( sig );
    3528:	8a 81       	ldd	r24, Y+2	; 0x02
    352a:	9b 81       	ldd	r25, Y+3	; 0x03
    352c:	84 96       	adiw	r24, 0x24	; 36
    352e:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    for( i = 0; i < (core_id_t)MAX_CORES; i++ )
    3532:	19 82       	std	Y+1, r1	; 0x01
    3534:	21 c0       	rjmp	.+66     	; 0x3578 <sig_init_isr+0x6a>
    {
        xlist_init( (xlist_t *)sig->sig_list + i );
    3536:	4a 81       	ldd	r20, Y+2	; 0x02
    3538:	5b 81       	ldd	r21, Y+3	; 0x03
    353a:	89 81       	ldd	r24, Y+1	; 0x01
    353c:	28 2f       	mov	r18, r24
    353e:	30 e0       	ldi	r19, 0x00	; 0
    3540:	c9 01       	movw	r24, r18
    3542:	82 95       	swap	r24
    3544:	92 95       	swap	r25
    3546:	90 7f       	andi	r25, 0xF0	; 240
    3548:	98 27       	eor	r25, r24
    354a:	80 7f       	andi	r24, 0xF0	; 240
    354c:	98 27       	eor	r25, r24
    354e:	82 0f       	add	r24, r18
    3550:	93 1f       	adc	r25, r19
    3552:	84 0f       	add	r24, r20
    3554:	95 1f       	adc	r25, r21
    3556:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <xlist_init>
        stat_init( (stat_t *)sig->sig_stat + i );
    355a:	8a 81       	ldd	r24, Y+2	; 0x02
    355c:	9b 81       	ldd	r25, Y+3	; 0x03
    355e:	9c 01       	movw	r18, r24
    3560:	2e 5d       	subi	r18, 0xDE	; 222
    3562:	3f 4f       	sbci	r19, 0xFF	; 255
    3564:	89 81       	ldd	r24, Y+1	; 0x01
    3566:	88 2f       	mov	r24, r24
    3568:	90 e0       	ldi	r25, 0x00	; 0
    356a:	82 0f       	add	r24, r18
    356c:	93 1f       	adc	r25, r19
    356e:	0e 94 48 01 	call	0x290	; 0x290 <stat_init>
{
#ifdef CONFIG_MP
    core_id_t i;
    SPIN_INIT( sig );
    SPIN_LOCK( sig );
    for( i = 0; i < (core_id_t)MAX_CORES; i++ )
    3572:	89 81       	ldd	r24, Y+1	; 0x01
    3574:	8f 5f       	subi	r24, 0xFF	; 255
    3576:	89 83       	std	Y+1, r24	; 0x01
    3578:	89 81       	ldd	r24, Y+1	; 0x01
    357a:	82 30       	cpi	r24, 0x02	; 2
    357c:	e0 f2       	brcs	.-72     	; 0x3536 <sig_init_isr+0x28>
    {
        xlist_init( (xlist_t *)sig->sig_list + i );
        stat_init( (stat_t *)sig->sig_stat + i );
    }
    SPIN_UNLOCK( sig );
    357e:	8a 81       	ldd	r24, Y+2	; 0x02
    3580:	9b 81       	ldd	r25, Y+3	; 0x03
    3582:	84 96       	adiw	r24, 0x24	; 36
    3584:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
#else
    xlist_init( (xlist_t *)sig );
#endif
}
    3588:	0f 90       	pop	r0
    358a:	0f 90       	pop	r0
    358c:	0f 90       	pop	r0
    358e:	cf 91       	pop	r28
    3590:	df 91       	pop	r29
    3592:	08 95       	ret

00003594 <_sig_wait_prologue>:
//========================================================================================
// Это выполнится при постановке процесса в список ожидания сигнала
void _sig_wait_prologue( sig_t * sig )
{
    3594:	df 93       	push	r29
    3596:	cf 93       	push	r28
    3598:	00 d0       	rcall	.+0      	; 0x359a <_sig_wait_prologue+0x6>
    359a:	00 d0       	rcall	.+0      	; 0x359c <_sig_wait_prologue+0x8>
    359c:	0f 92       	push	r0
    359e:	cd b7       	in	r28, 0x3d	; 61
    35a0:	de b7       	in	r29, 0x3e	; 62
    35a2:	9d 83       	std	Y+5, r25	; 0x05
    35a4:	8c 83       	std	Y+4, r24	; 0x04
    proc_t * proc;

    SPIN_LOCK( sig );
    35a6:	8c 81       	ldd	r24, Y+4	; 0x04
    35a8:	9d 81       	ldd	r25, Y+5	; 0x05
    35aa:	84 96       	adiw	r24, 0x24	; 36
    35ac:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>

    proc = current_proc();
    35b0:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <current_proc>
    35b4:	9b 83       	std	Y+3, r25	; 0x03
    35b6:	8a 83       	std	Y+2, r24	; 0x02
    SPIN_LOCK( proc );
    35b8:	8a 81       	ldd	r24, Y+2	; 0x02
    35ba:	9b 81       	ldd	r25, Y+3	; 0x03
    35bc:	83 96       	adiw	r24, 0x23	; 35
    35be:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>

    // Останавливаем процесс
    proc->flags |= PROC_FLG_WAIT;
    35c2:	ea 81       	ldd	r30, Y+2	; 0x02
    35c4:	fb 81       	ldd	r31, Y+3	; 0x03
    35c6:	87 81       	ldd	r24, Z+7	; 0x07
    35c8:	90 85       	ldd	r25, Z+8	; 0x08
    35ca:	80 62       	ori	r24, 0x20	; 32
    35cc:	ea 81       	ldd	r30, Y+2	; 0x02
    35ce:	fb 81       	ldd	r31, Y+3	; 0x03
    35d0:	90 87       	std	Z+8, r25	; 0x08
    35d2:	87 83       	std	Z+7, r24	; 0x07
    _proc_stop_( proc );
    35d4:	8a 81       	ldd	r24, Y+2	; 0x02
    35d6:	9b 81       	ldd	r25, Y+3	; 0x03
    35d8:	0e 94 a8 13 	call	0x2750	; 0x2750 <_proc_stop_>
    RESCHED_PROC( proc );
    35dc:	ea 81       	ldd	r30, Y+2	; 0x02
    35de:	fb 81       	ldd	r31, Y+3	; 0x03
    35e0:	81 a1       	ldd	r24, Z+33	; 0x21
    35e2:	0e 94 b7 01 	call	0x36e	; 0x36e <resched>
        Балансировка нагрузки производится заранее,
        в этом случае получается сделать sig_broadcast  с временем выполнения O(1),
        однако про hotplug  придется забыть, ну и ладно.
        */
        core_id_t sig_core;
        sig_core = sched_load_balancer( proc, (stat_t *)sig->sig_stat );
    35e6:	8c 81       	ldd	r24, Y+4	; 0x04
    35e8:	9d 81       	ldd	r25, Y+5	; 0x05
    35ea:	9c 01       	movw	r18, r24
    35ec:	2e 5d       	subi	r18, 0xDE	; 222
    35ee:	3f 4f       	sbci	r19, 0xFF	; 255
    35f0:	8a 81       	ldd	r24, Y+2	; 0x02
    35f2:	9b 81       	ldd	r25, Y+3	; 0x03
    35f4:	b9 01       	movw	r22, r18
    35f6:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <sched_load_balancer>
    35fa:	89 83       	std	Y+1, r24	; 0x01

        proc->core_id = sig_core;
    35fc:	ea 81       	ldd	r30, Y+2	; 0x02
    35fe:	fb 81       	ldd	r31, Y+3	; 0x03
    3600:	89 81       	ldd	r24, Y+1	; 0x01
    3602:	81 a3       	std	Z+33, r24	; 0x21
        pitem_insert((pitem_t *)proc, (xlist_t *)sig + sig_core);
    3604:	6a 81       	ldd	r22, Y+2	; 0x02
    3606:	7b 81       	ldd	r23, Y+3	; 0x03
    3608:	4c 81       	ldd	r20, Y+4	; 0x04
    360a:	5d 81       	ldd	r21, Y+5	; 0x05
    360c:	89 81       	ldd	r24, Y+1	; 0x01
    360e:	28 2f       	mov	r18, r24
    3610:	30 e0       	ldi	r19, 0x00	; 0
    3612:	c9 01       	movw	r24, r18
    3614:	82 95       	swap	r24
    3616:	92 95       	swap	r25
    3618:	90 7f       	andi	r25, 0xF0	; 240
    361a:	98 27       	eor	r25, r24
    361c:	80 7f       	andi	r24, 0xF0	; 240
    361e:	98 27       	eor	r25, r24
    3620:	82 0f       	add	r24, r18
    3622:	93 1f       	adc	r25, r19
    3624:	9a 01       	movw	r18, r20
    3626:	28 0f       	add	r18, r24
    3628:	39 1f       	adc	r19, r25
    362a:	cb 01       	movw	r24, r22
    362c:	b9 01       	movw	r22, r18
    362e:	0e 94 a5 10 	call	0x214a	; 0x214a <pitem_insert>
        stat_inc( proc, (stat_t *)sig->sig_stat + sig_core );
    3632:	8c 81       	ldd	r24, Y+4	; 0x04
    3634:	9d 81       	ldd	r25, Y+5	; 0x05
    3636:	9c 01       	movw	r18, r24
    3638:	2e 5d       	subi	r18, 0xDE	; 222
    363a:	3f 4f       	sbci	r19, 0xFF	; 255
    363c:	89 81       	ldd	r24, Y+1	; 0x01
    363e:	88 2f       	mov	r24, r24
    3640:	90 e0       	ldi	r25, 0x00	; 0
    3642:	28 0f       	add	r18, r24
    3644:	39 1f       	adc	r19, r25
    3646:	8a 81       	ldd	r24, Y+2	; 0x02
    3648:	9b 81       	ldd	r25, Y+3	; 0x03
    364a:	b9 01       	movw	r22, r18
    364c:	0e 94 6f 01 	call	0x2de	; 0x2de <stat_inc>
    }
#else
    pitem_insert( (pitem_t *)proc, (xlist_t *)sig );
#endif //CONFIG_MP
    SPIN_UNLOCK( proc );
    3650:	8a 81       	ldd	r24, Y+2	; 0x02
    3652:	9b 81       	ldd	r25, Y+3	; 0x03
    3654:	83 96       	adiw	r24, 0x23	; 35
    3656:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
    SPIN_UNLOCK( sig );
    365a:	8c 81       	ldd	r24, Y+4	; 0x04
    365c:	9d 81       	ldd	r25, Y+5	; 0x05
    365e:	84 96       	adiw	r24, 0x24	; 36
    3660:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
}
    3664:	0f 90       	pop	r0
    3666:	0f 90       	pop	r0
    3668:	0f 90       	pop	r0
    366a:	0f 90       	pop	r0
    366c:	0f 90       	pop	r0
    366e:	cf 91       	pop	r28
    3670:	df 91       	pop	r29
    3672:	08 95       	ret

00003674 <_sig_wakeup_list_proc>:
//========================================================================================
//
static void _sig_wakeup_list_proc( proc_t * proc )
{
    3674:	df 93       	push	r29
    3676:	cf 93       	push	r28
    3678:	00 d0       	rcall	.+0      	; 0x367a <_sig_wakeup_list_proc+0x6>
    367a:	cd b7       	in	r28, 0x3d	; 61
    367c:	de b7       	in	r29, 0x3e	; 62
    367e:	9a 83       	std	Y+2, r25	; 0x02
    3680:	89 83       	std	Y+1, r24	; 0x01
    SPIN_LOCK( proc );
    3682:	89 81       	ldd	r24, Y+1	; 0x01
    3684:	9a 81       	ldd	r25, Y+2	; 0x02
    3686:	83 96       	adiw	r24, 0x23	; 35
    3688:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    proc->buf = ((item_t *)proc)->next;
    368c:	e9 81       	ldd	r30, Y+1	; 0x01
    368e:	fa 81       	ldd	r31, Y+2	; 0x02
    3690:	80 81       	ld	r24, Z
    3692:	91 81       	ldd	r25, Z+1	; 0x01
    3694:	e9 81       	ldd	r30, Y+1	; 0x01
    3696:	fa 81       	ldd	r31, Y+2	; 0x02
    3698:	90 a3       	std	Z+32, r25	; 0x20
    369a:	87 8f       	std	Z+31, r24	; 0x1f
    item_cut( (item_t *)proc );                  // Вырезать процесс из простого списка гораздо проще, чем из xlist
    369c:	89 81       	ldd	r24, Y+1	; 0x01
    369e:	9a 81       	ldd	r25, Y+2	; 0x02
    36a0:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <item_cut>
    _proc_run_( proc );
    36a4:	89 81       	ldd	r24, Y+1	; 0x01
    36a6:	9a 81       	ldd	r25, Y+2	; 0x02
    36a8:	0e 94 aa 12 	call	0x2554	; 0x2554 <_proc_run_>
    SPIN_UNLOCK( proc );
    36ac:	89 81       	ldd	r24, Y+1	; 0x01
    36ae:	9a 81       	ldd	r25, Y+2	; 0x02
    36b0:	83 96       	adiw	r24, 0x23	; 35
    36b2:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
}
    36b6:	0f 90       	pop	r0
    36b8:	0f 90       	pop	r0
    36ba:	cf 91       	pop	r28
    36bc:	df 91       	pop	r29
    36be:	08 95       	ret

000036c0 <_sig_wait_epilogue>:

void _sig_wait_epilogue( void )
{
    36c0:	df 93       	push	r29
    36c2:	cf 93       	push	r28
    36c4:	00 d0       	rcall	.+0      	; 0x36c6 <_sig_wait_epilogue+0x6>
    36c6:	00 d0       	rcall	.+0      	; 0x36c8 <_sig_wait_epilogue+0x8>
    36c8:	cd b7       	in	r28, 0x3d	; 61
    36ca:	de b7       	in	r29, 0x3e	; 62
    proc_t * proc;
    proc_t * wakeup_proc;
    proc = current_proc();
    36cc:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <current_proc>
    36d0:	9c 83       	std	Y+4, r25	; 0x04
    36d2:	8b 83       	std	Y+3, r24	; 0x03

    SPIN_LOCK( proc );
    36d4:	8b 81       	ldd	r24, Y+3	; 0x03
    36d6:	9c 81       	ldd	r25, Y+4	; 0x04
    36d8:	83 96       	adiw	r24, 0x23	; 35
    36da:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    wakeup_proc = (proc_t *)proc->buf;
    36de:	eb 81       	ldd	r30, Y+3	; 0x03
    36e0:	fc 81       	ldd	r31, Y+4	; 0x04
    36e2:	87 8d       	ldd	r24, Z+31	; 0x1f
    36e4:	90 a1       	ldd	r25, Z+32	; 0x20
    36e6:	9a 83       	std	Y+2, r25	; 0x02
    36e8:	89 83       	std	Y+1, r24	; 0x01
    proc->buf = (void *)0;
    36ea:	eb 81       	ldd	r30, Y+3	; 0x03
    36ec:	fc 81       	ldd	r31, Y+4	; 0x04
    36ee:	10 a2       	std	Z+32, r1	; 0x20
    36f0:	17 8e       	std	Z+31, r1	; 0x1f
    SPIN_UNLOCK( proc );
    36f2:	8b 81       	ldd	r24, Y+3	; 0x03
    36f4:	9c 81       	ldd	r25, Y+4	; 0x04
    36f6:	83 96       	adiw	r24, 0x23	; 35
    36f8:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
    // Надо разбудить следующий процесс в списке.
    if( wakeup_proc )
    36fc:	89 81       	ldd	r24, Y+1	; 0x01
    36fe:	9a 81       	ldd	r25, Y+2	; 0x02
    3700:	00 97       	sbiw	r24, 0x00	; 0
    3702:	59 f0       	breq	.+22     	; 0x371a <_sig_wait_epilogue+0x5a>
    {
        // Если есть другие процессы для пробуждения, то "будим" самый приоритетный из них, он продолжит "побудку".
        if( wakeup_proc != proc )
    3704:	29 81       	ldd	r18, Y+1	; 0x01
    3706:	3a 81       	ldd	r19, Y+2	; 0x02
    3708:	8b 81       	ldd	r24, Y+3	; 0x03
    370a:	9c 81       	ldd	r25, Y+4	; 0x04
    370c:	28 17       	cp	r18, r24
    370e:	39 07       	cpc	r19, r25
    3710:	21 f0       	breq	.+8      	; 0x371a <_sig_wait_epilogue+0x5a>
        {
            //Нельзя будить себя! Будим только другой процесс!
            _sig_wakeup_list_proc( wakeup_proc );
    3712:	89 81       	ldd	r24, Y+1	; 0x01
    3714:	9a 81       	ldd	r25, Y+2	; 0x02
    3716:	0e 94 3a 1b 	call	0x3674	; 0x3674 <_sig_wakeup_list_proc>
        }
    }
}
    371a:	0f 90       	pop	r0
    371c:	0f 90       	pop	r0
    371e:	0f 90       	pop	r0
    3720:	0f 90       	pop	r0
    3722:	cf 91       	pop	r28
    3724:	df 91       	pop	r29
    3726:	08 95       	ret

00003728 <sig_signal_isr>:
//========================================================================================
// Будит 1 процесс, для вызова из обработчиков прерываний
void sig_signal_isr( sig_t * sig )
{
    3728:	df 93       	push	r29
    372a:	cf 93       	push	r28
    372c:	cd b7       	in	r28, 0x3d	; 61
    372e:	de b7       	in	r29, 0x3e	; 62
    3730:	29 97       	sbiw	r28, 0x09	; 9
    3732:	0f b6       	in	r0, 0x3f	; 63
    3734:	f8 94       	cli
    3736:	de bf       	out	0x3e, r29	; 62
    3738:	0f be       	out	0x3f, r0	; 63
    373a:	cd bf       	out	0x3d, r28	; 61
    373c:	99 87       	std	Y+9, r25	; 0x09
    373e:	88 87       	std	Y+8, r24	; 0x08
#ifdef CONFIG_MP
    core_id_t core;
    proc_t * proc;
    // Поиск процесса для запуска
    SPIN_LOCK( sig );// Захват блокировки сигнала
    3740:	88 85       	ldd	r24, Y+8	; 0x08
    3742:	99 85       	ldd	r25, Y+9	; 0x09
    3744:	84 96       	adiw	r24, 0x24	; 36
    3746:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    // Находим самую нагруженную  структуру stat_t в сигнале
    core = sched_highest_load_core( (stat_t *)sig->sig_stat );
    374a:	88 85       	ldd	r24, Y+8	; 0x08
    374c:	99 85       	ldd	r25, Y+9	; 0x09
    374e:	82 96       	adiw	r24, 0x22	; 34
    3750:	0e 94 22 17 	call	0x2e44	; 0x2e44 <sched_highest_load_core>
    3754:	8f 83       	std	Y+7, r24	; 0x07
    // Этот процесс мы будем запускать
    {
        xlist_t * sig_list;
        sig_list = (xlist_t *)sig->sig_list + core;
    3756:	48 85       	ldd	r20, Y+8	; 0x08
    3758:	59 85       	ldd	r21, Y+9	; 0x09
    375a:	8f 81       	ldd	r24, Y+7	; 0x07
    375c:	28 2f       	mov	r18, r24
    375e:	30 e0       	ldi	r19, 0x00	; 0
    3760:	c9 01       	movw	r24, r18
    3762:	82 95       	swap	r24
    3764:	92 95       	swap	r25
    3766:	90 7f       	andi	r25, 0xF0	; 240
    3768:	98 27       	eor	r25, r24
    376a:	80 7f       	andi	r24, 0xF0	; 240
    376c:	98 27       	eor	r25, r24
    376e:	82 0f       	add	r24, r18
    3770:	93 1f       	adc	r25, r19
    3772:	84 0f       	add	r24, r20
    3774:	95 1f       	adc	r25, r21
    3776:	9c 83       	std	Y+4, r25	; 0x04
    3778:	8b 83       	std	Y+3, r24	; 0x03
        if(sig_list->index == (index_t)0)
    377a:	eb 81       	ldd	r30, Y+3	; 0x03
    377c:	fc 81       	ldd	r31, Y+4	; 0x04
    377e:	80 89       	ldd	r24, Z+16	; 0x10
    3780:	88 23       	and	r24, r24
    3782:	31 f4       	brne	.+12     	; 0x3790 <sig_signal_isr+0x68>
        {
            SPIN_UNLOCK( sig );
    3784:	88 85       	ldd	r24, Y+8	; 0x08
    3786:	99 85       	ldd	r25, Y+9	; 0x09
    3788:	84 96       	adiw	r24, 0x24	; 36
    378a:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
    378e:	62 c0       	rjmp	.+196    	; 0x3854 <sig_signal_isr+0x12c>
            return;
        }
        proc = (proc_t *)xlist_head( sig_list );
    3790:	8b 81       	ldd	r24, Y+3	; 0x03
    3792:	9c 81       	ldd	r25, Y+4	; 0x04
    3794:	0e 94 22 20 	call	0x4044	; 0x4044 <xlist_head>
    3798:	9e 83       	std	Y+6, r25	; 0x06
    379a:	8d 83       	std	Y+5, r24	; 0x05
    }
    SPIN_LOCK( proc );// Захват блокировки процесса
    379c:	8d 81       	ldd	r24, Y+5	; 0x05
    379e:	9e 81       	ldd	r25, Y+6	; 0x06
    37a0:	83 96       	adiw	r24, 0x23	; 35
    37a2:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    // Вырезаем процесс из списка ожидания сигнала
    pitem_fast_cut( (pitem_t *)proc );
    37a6:	8d 81       	ldd	r24, Y+5	; 0x05
    37a8:	9e 81       	ldd	r25, Y+6	; 0x06
    37aa:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <pitem_fast_cut>
    stat_dec( proc, (stat_t *)sig->sig_stat + core );
    37ae:	88 85       	ldd	r24, Y+8	; 0x08
    37b0:	99 85       	ldd	r25, Y+9	; 0x09
    37b2:	9c 01       	movw	r18, r24
    37b4:	2e 5d       	subi	r18, 0xDE	; 222
    37b6:	3f 4f       	sbci	r19, 0xFF	; 255
    37b8:	8f 81       	ldd	r24, Y+7	; 0x07
    37ba:	88 2f       	mov	r24, r24
    37bc:	90 e0       	ldi	r25, 0x00	; 0
    37be:	28 0f       	add	r18, r24
    37c0:	39 1f       	adc	r19, r25
    37c2:	8d 81       	ldd	r24, Y+5	; 0x05
    37c4:	9e 81       	ldd	r25, Y+6	; 0x06
    37c6:	b9 01       	movw	r22, r18
    37c8:	0e 94 57 01 	call	0x2ae	; 0x2ae <stat_dec>
    //Запуск процесса
    // Вставляем его в список ready соответствующего планировщика
    spin_lock( &kernel.stat_lock );
    37cc:	81 e8       	ldi	r24, 0x81	; 129
    37ce:	93 e0       	ldi	r25, 0x03	; 3
    37d0:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    stat_inc( proc, (stat_t *)kernel.stat + core ); // Обновление статистики
    37d4:	8f 81       	ldd	r24, Y+7	; 0x07
    37d6:	88 2f       	mov	r24, r24
    37d8:	90 e0       	ldi	r25, 0x00	; 0
    37da:	9c 01       	movw	r18, r24
    37dc:	21 58       	subi	r18, 0x81	; 129
    37de:	3c 4f       	sbci	r19, 0xFC	; 252
    37e0:	8d 81       	ldd	r24, Y+5	; 0x05
    37e2:	9e 81       	ldd	r25, Y+6	; 0x06
    37e4:	b9 01       	movw	r22, r18
    37e6:	0e 94 6f 01 	call	0x2de	; 0x2de <stat_inc>
    spin_unlock( &kernel.stat_lock );
    37ea:	81 e8       	ldi	r24, 0x81	; 129
    37ec:	93 e0       	ldi	r25, 0x03	; 3
    37ee:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
    {
        sched_t * sched;
        sched = kernel.sched + core;// Дада, нагрузка была сбалансирована на этапе постановки в список ожидания
    37f2:	8f 81       	ldd	r24, Y+7	; 0x07
    37f4:	28 2f       	mov	r18, r24
    37f6:	30 e0       	ldi	r19, 0x00	; 0
    37f8:	8b e2       	ldi	r24, 0x2B	; 43
    37fa:	90 e0       	ldi	r25, 0x00	; 0
    37fc:	ac 01       	movw	r20, r24
    37fe:	24 9f       	mul	r18, r20
    3800:	c0 01       	movw	r24, r0
    3802:	25 9f       	mul	r18, r21
    3804:	90 0d       	add	r25, r0
    3806:	34 9f       	mul	r19, r20
    3808:	90 0d       	add	r25, r0
    380a:	11 24       	eor	r1, r1
    380c:	87 53       	subi	r24, 0x37	; 55
    380e:	9d 4f       	sbci	r25, 0xFD	; 253
    3810:	9a 83       	std	Y+2, r25	; 0x02
    3812:	89 83       	std	Y+1, r24	; 0x01
        SPIN_LOCK( sched );
    3814:	89 81       	ldd	r24, Y+1	; 0x01
    3816:	9a 81       	ldd	r25, Y+2	; 0x02
    3818:	8a 96       	adiw	r24, 0x2a	; 42
    381a:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
        pitem_insert((pitem_t *)proc, sched->ready );
    381e:	8d 81       	ldd	r24, Y+5	; 0x05
    3820:	9e 81       	ldd	r25, Y+6	; 0x06
    3822:	e9 81       	ldd	r30, Y+1	; 0x01
    3824:	fa 81       	ldd	r31, Y+2	; 0x02
    3826:	22 81       	ldd	r18, Z+2	; 0x02
    3828:	33 81       	ldd	r19, Z+3	; 0x03
    382a:	b9 01       	movw	r22, r18
    382c:	0e 94 a5 10 	call	0x214a	; 0x214a <pitem_insert>
        SPIN_UNLOCK( sched );
    3830:	89 81       	ldd	r24, Y+1	; 0x01
    3832:	9a 81       	ldd	r25, Y+2	; 0x02
    3834:	8a 96       	adiw	r24, 0x2a	; 42
    3836:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
    }
    resched(core);// Перепланировка
    383a:	8f 81       	ldd	r24, Y+7	; 0x07
    383c:	0e 94 b7 01 	call	0x36e	; 0x36e <resched>
    SPIN_UNLOCK( proc );// Освобождение блокировки процесса
    3840:	8d 81       	ldd	r24, Y+5	; 0x05
    3842:	9e 81       	ldd	r25, Y+6	; 0x06
    3844:	83 96       	adiw	r24, 0x23	; 35
    3846:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
    SPIN_UNLOCK( sig );// Освобождение блокировки сигнала
    384a:	88 85       	ldd	r24, Y+8	; 0x08
    384c:	99 85       	ldd	r25, Y+9	; 0x09
    384e:	84 96       	adiw	r24, 0x24	; 36
    3850:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
    proc = (proc_t *)xlist_head( (xlist_t *)sig );
    pitem_fast_cut( (pitem_t *)proc );
    pitem_insert( (pitem_t *)proc, kernel.sched.ready );
    resched();
#endif //CONFIG_MP
}
    3854:	29 96       	adiw	r28, 0x09	; 9
    3856:	0f b6       	in	r0, 0x3f	; 63
    3858:	f8 94       	cli
    385a:	de bf       	out	0x3e, r29	; 62
    385c:	0f be       	out	0x3f, r0	; 63
    385e:	cd bf       	out	0x3d, r28	; 61
    3860:	cf 91       	pop	r28
    3862:	df 91       	pop	r29
    3864:	08 95       	ret

00003866 <sig_broadcast_isr>:
//----------------------------------------------------------------------------------------
// Будит все ожидающие процессы
void sig_broadcast_isr( sig_t * sig )
{
    3866:	df 93       	push	r29
    3868:	cf 93       	push	r28
    386a:	00 d0       	rcall	.+0      	; 0x386c <sig_broadcast_isr+0x6>
    386c:	00 d0       	rcall	.+0      	; 0x386e <sig_broadcast_isr+0x8>
    386e:	0f 92       	push	r0
    3870:	cd b7       	in	r28, 0x3d	; 61
    3872:	de b7       	in	r29, 0x3e	; 62
    3874:	9d 83       	std	Y+5, r25	; 0x05
    3876:	8c 83       	std	Y+4, r24	; 0x04
#ifdef CONFIG_MP
    core_id_t core;
    SPIN_LOCK( sig );
    3878:	8c 81       	ldd	r24, Y+4	; 0x04
    387a:	9d 81       	ldd	r25, Y+5	; 0x05
    387c:	84 96       	adiw	r24, 0x24	; 36
    387e:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
    for(core = 0; core < (core_id_t)MAX_CORES; core++)
    3882:	1b 82       	std	Y+3, r1	; 0x03
    3884:	3f c0       	rjmp	.+126    	; 0x3904 <sig_broadcast_isr+0x9e>
        proc_t * wakeup_proc;
        /*
        Фактически процессы еще не поставлены на выполнение,
        но обязательно будут, это надо учитывать при баланисировке нагрузки.
        */
        spin_lock( &kernel.stat_lock );
    3886:	81 e8       	ldi	r24, 0x81	; 129
    3888:	93 e0       	ldi	r25, 0x03	; 3
    388a:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
        stat_merge( (stat_t *)sig->sig_stat + core, (stat_t *)kernel.stat + core );
    388e:	8c 81       	ldd	r24, Y+4	; 0x04
    3890:	9d 81       	ldd	r25, Y+5	; 0x05
    3892:	9c 01       	movw	r18, r24
    3894:	2e 5d       	subi	r18, 0xDE	; 222
    3896:	3f 4f       	sbci	r19, 0xFF	; 255
    3898:	8b 81       	ldd	r24, Y+3	; 0x03
    389a:	88 2f       	mov	r24, r24
    389c:	90 e0       	ldi	r25, 0x00	; 0
    389e:	a9 01       	movw	r20, r18
    38a0:	48 0f       	add	r20, r24
    38a2:	59 1f       	adc	r21, r25
    38a4:	8b 81       	ldd	r24, Y+3	; 0x03
    38a6:	88 2f       	mov	r24, r24
    38a8:	90 e0       	ldi	r25, 0x00	; 0
    38aa:	9c 01       	movw	r18, r24
    38ac:	21 58       	subi	r18, 0x81	; 129
    38ae:	3c 4f       	sbci	r19, 0xFC	; 252
    38b0:	ca 01       	movw	r24, r20
    38b2:	b9 01       	movw	r22, r18
    38b4:	0e 94 87 01 	call	0x30e	; 0x30e <stat_merge>
        spin_unlock( &kernel.stat_lock );
    38b8:	81 e8       	ldi	r24, 0x81	; 129
    38ba:	93 e0       	ldi	r25, 0x03	; 3
    38bc:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
        /*
        Сцепляем список и будим его голову.
        */
        wakeup_proc = (proc_t *)pitem_xlist_chain( (xlist_t *)sig + core );
    38c0:	4c 81       	ldd	r20, Y+4	; 0x04
    38c2:	5d 81       	ldd	r21, Y+5	; 0x05
    38c4:	8b 81       	ldd	r24, Y+3	; 0x03
    38c6:	28 2f       	mov	r18, r24
    38c8:	30 e0       	ldi	r19, 0x00	; 0
    38ca:	c9 01       	movw	r24, r18
    38cc:	82 95       	swap	r24
    38ce:	92 95       	swap	r25
    38d0:	90 7f       	andi	r25, 0xF0	; 240
    38d2:	98 27       	eor	r25, r24
    38d4:	80 7f       	andi	r24, 0xF0	; 240
    38d6:	98 27       	eor	r25, r24
    38d8:	82 0f       	add	r24, r18
    38da:	93 1f       	adc	r25, r19
    38dc:	84 0f       	add	r24, r20
    38de:	95 1f       	adc	r25, r21
    38e0:	0e 94 6e 11 	call	0x22dc	; 0x22dc <pitem_xlist_chain>
    38e4:	9a 83       	std	Y+2, r25	; 0x02
    38e6:	89 83       	std	Y+1, r24	; 0x01
        if( wakeup_proc )
    38e8:	89 81       	ldd	r24, Y+1	; 0x01
    38ea:	9a 81       	ldd	r25, Y+2	; 0x02
    38ec:	00 97       	sbiw	r24, 0x00	; 0
    38ee:	21 f0       	breq	.+8      	; 0x38f8 <sig_broadcast_isr+0x92>
        {
            _sig_wakeup_list_proc( wakeup_proc );
    38f0:	89 81       	ldd	r24, Y+1	; 0x01
    38f2:	9a 81       	ldd	r25, Y+2	; 0x02
    38f4:	0e 94 3a 1b 	call	0x3674	; 0x3674 <_sig_wakeup_list_proc>
        }

        resched(core);
    38f8:	8b 81       	ldd	r24, Y+3	; 0x03
    38fa:	0e 94 b7 01 	call	0x36e	; 0x36e <resched>
void sig_broadcast_isr( sig_t * sig )
{
#ifdef CONFIG_MP
    core_id_t core;
    SPIN_LOCK( sig );
    for(core = 0; core < (core_id_t)MAX_CORES; core++)
    38fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3900:	8f 5f       	subi	r24, 0xFF	; 255
    3902:	8b 83       	std	Y+3, r24	; 0x03
    3904:	8b 81       	ldd	r24, Y+3	; 0x03
    3906:	82 30       	cpi	r24, 0x02	; 2
    3908:	08 f4       	brcc	.+2      	; 0x390c <sig_broadcast_isr+0xa6>
    390a:	bd cf       	rjmp	.-134    	; 0x3886 <sig_broadcast_isr+0x20>
            _sig_wakeup_list_proc( wakeup_proc );
        }

        resched(core);
    }
    SPIN_UNLOCK( sig );
    390c:	8c 81       	ldd	r24, Y+4	; 0x04
    390e:	9d 81       	ldd	r25, Y+5	; 0x05
    3910:	84 96       	adiw	r24, 0x24	; 36
    3912:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
        _sig_wakeup_list_proc( wakeup_proc );
    }

    resched();
#endif //CONFIG_MP
}
    3916:	0f 90       	pop	r0
    3918:	0f 90       	pop	r0
    391a:	0f 90       	pop	r0
    391c:	0f 90       	pop	r0
    391e:	0f 90       	pop	r0
    3920:	cf 91       	pop	r28
    3922:	df 91       	pop	r29
    3924:	08 95       	ret

00003926 <do_syscall>:
syscall_t syscall_num = (syscall_t)0;
void * syscall_arg = (void *)0;

void do_syscall( void )
#endif // CONFIG_MP
{
    3926:	df 93       	push	r29
    3928:	cf 93       	push	r28
    392a:	cd b7       	in	r28, 0x3d	; 61
    392c:	de b7       	in	r29, 0x3e	; 62
    392e:	27 97       	sbiw	r28, 0x07	; 7
    3930:	0f b6       	in	r0, 0x3f	; 63
    3932:	f8 94       	cli
    3934:	de bf       	out	0x3e, r29	; 62
    3936:	0f be       	out	0x3f, r0	; 63
    3938:	cd bf       	out	0x3d, r28	; 61
    393a:	8d 83       	std	Y+5, r24	; 0x05
    393c:	7f 83       	std	Y+7, r23	; 0x07
    393e:	6e 83       	std	Y+6, r22	; 0x06
    if( syscall_num != (syscall_t)0 )
    3940:	8d 81       	ldd	r24, Y+5	; 0x05
    3942:	88 23       	and	r24, r24
    3944:	e1 f0       	breq	.+56     	; 0x397e <do_syscall+0x58>
    {
        syscall_num--;
    3946:	8d 81       	ldd	r24, Y+5	; 0x05
    3948:	81 50       	subi	r24, 0x01	; 1
    394a:	8d 83       	std	Y+5, r24	; 0x05
        (SYSCALL_TABLE_READ(syscall_routine[syscall_num]))(syscall_arg);
    394c:	8d 81       	ldd	r24, Y+5	; 0x05
    394e:	88 2f       	mov	r24, r24
    3950:	90 e0       	ldi	r25, 0x00	; 0
    3952:	88 0f       	add	r24, r24
    3954:	99 1f       	adc	r25, r25
    3956:	88 59       	subi	r24, 0x98	; 152
    3958:	9f 4f       	sbci	r25, 0xFF	; 255
    395a:	9c 83       	std	Y+4, r25	; 0x04
    395c:	8b 83       	std	Y+3, r24	; 0x03
    395e:	8b 81       	ldd	r24, Y+3	; 0x03
    3960:	9c 81       	ldd	r25, Y+4	; 0x04
    3962:	fc 01       	movw	r30, r24
    3964:	85 91       	lpm	r24, Z+
    3966:	94 91       	lpm	r25, Z+
    3968:	9a 83       	std	Y+2, r25	; 0x02
    396a:	89 83       	std	Y+1, r24	; 0x01
    396c:	fc 83       	std	Y+4, r31	; 0x04
    396e:	eb 83       	std	Y+3, r30	; 0x03
    3970:	89 81       	ldd	r24, Y+1	; 0x01
    3972:	9a 81       	ldd	r25, Y+2	; 0x02
    3974:	fc 01       	movw	r30, r24
    3976:	8e 81       	ldd	r24, Y+6	; 0x06
    3978:	9f 81       	ldd	r25, Y+7	; 0x07
    397a:	09 95       	icall
        syscall_num = (syscall_t)0;
    397c:	1d 82       	std	Y+5, r1	; 0x05
    }
}
    397e:	27 96       	adiw	r28, 0x07	; 7
    3980:	0f b6       	in	r0, 0x3f	; 63
    3982:	f8 94       	cli
    3984:	de bf       	out	0x3e, r29	; 62
    3986:	0f be       	out	0x3f, r0	; 63
    3988:	cd bf       	out	0x3d, r28	; 61
    398a:	cf 91       	pop	r28
    398c:	df 91       	pop	r29
    398e:	08 95       	ret

00003990 <scall_proc_init>:
***********************************************************************************************
                                    Process control !!!
**********************************************************************************************/
/// SYSCALL_PROC_INIT
void scall_proc_init( void * arg )
{
    3990:	8f 92       	push	r8
    3992:	9f 92       	push	r9
    3994:	af 92       	push	r10
    3996:	bf 92       	push	r11
    3998:	cf 92       	push	r12
    399a:	df 92       	push	r13
    399c:	ef 92       	push	r14
    399e:	ff 92       	push	r15
    39a0:	0f 93       	push	r16
    39a2:	1f 93       	push	r17
    39a4:	df 93       	push	r29
    39a6:	cf 93       	push	r28
    39a8:	00 d0       	rcall	.+0      	; 0x39aa <scall_proc_init+0x1a>
    39aa:	cd b7       	in	r28, 0x3d	; 61
    39ac:	de b7       	in	r29, 0x3e	; 62
    39ae:	9a 83       	std	Y+2, r25	; 0x02
    39b0:	89 83       	std	Y+1, r24	; 0x01
    proc_init_isr(
    39b2:	e9 81       	ldd	r30, Y+1	; 0x01
    39b4:	fa 81       	ldd	r31, Y+2	; 0x02
    39b6:	40 81       	ld	r20, Z
    39b8:	51 81       	ldd	r21, Z+1	; 0x01
    39ba:	e9 81       	ldd	r30, Y+1	; 0x01
    39bc:	fa 81       	ldd	r31, Y+2	; 0x02
    39be:	62 81       	ldd	r22, Z+2	; 0x02
    39c0:	73 81       	ldd	r23, Z+3	; 0x03
    39c2:	e9 81       	ldd	r30, Y+1	; 0x01
    39c4:	fa 81       	ldd	r31, Y+2	; 0x02
    39c6:	24 81       	ldd	r18, Z+4	; 0x04
    39c8:	35 81       	ldd	r19, Z+5	; 0x05
    39ca:	e9 81       	ldd	r30, Y+1	; 0x01
    39cc:	fa 81       	ldd	r31, Y+2	; 0x02
    39ce:	a6 81       	ldd	r26, Z+6	; 0x06
    39d0:	b7 81       	ldd	r27, Z+7	; 0x07
    39d2:	e9 81       	ldd	r30, Y+1	; 0x01
    39d4:	fa 81       	ldd	r31, Y+2	; 0x02
    39d6:	00 85       	ldd	r16, Z+8	; 0x08
    39d8:	11 85       	ldd	r17, Z+9	; 0x09
    39da:	e9 81       	ldd	r30, Y+1	; 0x01
    39dc:	fa 81       	ldd	r31, Y+2	; 0x02
    39de:	e2 84       	ldd	r14, Z+10	; 0x0a
    39e0:	f3 84       	ldd	r15, Z+11	; 0x0b
    39e2:	e9 81       	ldd	r30, Y+1	; 0x01
    39e4:	fa 81       	ldd	r31, Y+2	; 0x02
    39e6:	d4 84       	ldd	r13, Z+12	; 0x0c
    39e8:	e9 81       	ldd	r30, Y+1	; 0x01
    39ea:	fa 81       	ldd	r31, Y+2	; 0x02
    39ec:	a5 84       	ldd	r10, Z+13	; 0x0d
    39ee:	b6 84       	ldd	r11, Z+14	; 0x0e
    39f0:	e9 81       	ldd	r30, Y+1	; 0x01
    39f2:	fa 81       	ldd	r31, Y+2	; 0x02
    39f4:	97 84       	ldd	r9, Z+15	; 0x0f
    39f6:	e9 81       	ldd	r30, Y+1	; 0x01
    39f8:	fa 81       	ldd	r31, Y+2	; 0x02
    39fa:	80 89       	ldd	r24, Z+16	; 0x10
    39fc:	0f 92       	push	r0
    39fe:	ed b7       	in	r30, 0x3d	; 61
    3a00:	fe b7       	in	r31, 0x3e	; 62
    3a02:	31 96       	adiw	r30, 0x01	; 1
    3a04:	80 83       	st	Z, r24
    3a06:	ca 01       	movw	r24, r20
    3a08:	a9 01       	movw	r20, r18
    3a0a:	9d 01       	movw	r18, r26
    3a0c:	cd 2c       	mov	r12, r13
    3a0e:	89 2c       	mov	r8, r9
    3a10:	0e 94 07 12 	call	0x240e	; 0x240e <proc_init_isr>
    3a14:	0f 90       	pop	r0
              ((proc_init_arg_t *)arg)->is_rt
#ifdef CONFIG_MP
              ,((proc_init_arg_t *)arg)-> affinity
#endif // CONFIG_MP
              );
}
    3a16:	0f 90       	pop	r0
    3a18:	0f 90       	pop	r0
    3a1a:	cf 91       	pop	r28
    3a1c:	df 91       	pop	r29
    3a1e:	1f 91       	pop	r17
    3a20:	0f 91       	pop	r16
    3a22:	ff 90       	pop	r15
    3a24:	ef 90       	pop	r14
    3a26:	df 90       	pop	r13
    3a28:	cf 90       	pop	r12
    3a2a:	bf 90       	pop	r11
    3a2c:	af 90       	pop	r10
    3a2e:	9f 90       	pop	r9
    3a30:	8f 90       	pop	r8
    3a32:	08 95       	ret

00003a34 <scall_proc_run>:
}
/**********************************************************************************************
                                       SYSCALL_PROC_RUN
**********************************************************************************************/
void scall_proc_run( void * arg )
{
    3a34:	0f 93       	push	r16
    3a36:	1f 93       	push	r17
    3a38:	df 93       	push	r29
    3a3a:	cf 93       	push	r28
    3a3c:	00 d0       	rcall	.+0      	; 0x3a3e <scall_proc_run+0xa>
    3a3e:	cd b7       	in	r28, 0x3d	; 61
    3a40:	de b7       	in	r29, 0x3e	; 62
    3a42:	9a 83       	std	Y+2, r25	; 0x02
    3a44:	89 83       	std	Y+1, r24	; 0x01
    ((proc_runtime_arg_t *)arg)->ret = proc_run_isr( ((proc_runtime_arg_t *)arg)->proc );
    3a46:	09 81       	ldd	r16, Y+1	; 0x01
    3a48:	1a 81       	ldd	r17, Y+2	; 0x02
    3a4a:	e9 81       	ldd	r30, Y+1	; 0x01
    3a4c:	fa 81       	ldd	r31, Y+2	; 0x02
    3a4e:	80 81       	ld	r24, Z
    3a50:	91 81       	ldd	r25, Z+1	; 0x01
    3a52:	0e 94 1c 13 	call	0x2638	; 0x2638 <proc_run_isr>
    3a56:	f8 01       	movw	r30, r16
    3a58:	82 83       	std	Z+2, r24	; 0x02
}
    3a5a:	0f 90       	pop	r0
    3a5c:	0f 90       	pop	r0
    3a5e:	cf 91       	pop	r28
    3a60:	df 91       	pop	r29
    3a62:	1f 91       	pop	r17
    3a64:	0f 91       	pop	r16
    3a66:	08 95       	ret

00003a68 <proc_run>:
bool_t proc_run( proc_t * proc )
{
    3a68:	df 93       	push	r29
    3a6a:	cf 93       	push	r28
    3a6c:	00 d0       	rcall	.+0      	; 0x3a6e <proc_run+0x6>
    3a6e:	00 d0       	rcall	.+0      	; 0x3a70 <proc_run+0x8>
    3a70:	0f 92       	push	r0
    3a72:	cd b7       	in	r28, 0x3d	; 61
    3a74:	de b7       	in	r29, 0x3e	; 62
    3a76:	9d 83       	std	Y+5, r25	; 0x05
    3a78:	8c 83       	std	Y+4, r24	; 0x04
    proc_runtime_arg_t scarg;
    scarg.proc = proc;
    3a7a:	8c 81       	ldd	r24, Y+4	; 0x04
    3a7c:	9d 81       	ldd	r25, Y+5	; 0x05
    3a7e:	9a 83       	std	Y+2, r25	; 0x02
    3a80:	89 83       	std	Y+1, r24	; 0x01
    syscall_bugurt( SYSCALL_PROC_RUN, (void *)&scarg );
    3a82:	82 e0       	ldi	r24, 0x02	; 2
    3a84:	9e 01       	movw	r18, r28
    3a86:	2f 5f       	subi	r18, 0xFF	; 255
    3a88:	3f 4f       	sbci	r19, 0xFF	; 255
    3a8a:	b9 01       	movw	r22, r18
    3a8c:	0e 94 39 04 	call	0x872	; 0x872 <syscall_bugurt>
    return scarg.ret;
    3a90:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3a92:	0f 90       	pop	r0
    3a94:	0f 90       	pop	r0
    3a96:	0f 90       	pop	r0
    3a98:	0f 90       	pop	r0
    3a9a:	0f 90       	pop	r0
    3a9c:	cf 91       	pop	r28
    3a9e:	df 91       	pop	r29
    3aa0:	08 95       	ret

00003aa2 <scall_proc_restart>:
/**********************************************************************************************
                                       SYSCALL_PROC_RESTART
**********************************************************************************************/
void scall_proc_restart( void * arg )
{
    3aa2:	0f 93       	push	r16
    3aa4:	1f 93       	push	r17
    3aa6:	df 93       	push	r29
    3aa8:	cf 93       	push	r28
    3aaa:	00 d0       	rcall	.+0      	; 0x3aac <scall_proc_restart+0xa>
    3aac:	cd b7       	in	r28, 0x3d	; 61
    3aae:	de b7       	in	r29, 0x3e	; 62
    3ab0:	9a 83       	std	Y+2, r25	; 0x02
    3ab2:	89 83       	std	Y+1, r24	; 0x01
    ((proc_runtime_arg_t *)arg)->ret = proc_restart_isr( ((proc_runtime_arg_t *)arg)->proc );
    3ab4:	09 81       	ldd	r16, Y+1	; 0x01
    3ab6:	1a 81       	ldd	r17, Y+2	; 0x02
    3ab8:	e9 81       	ldd	r30, Y+1	; 0x01
    3aba:	fa 81       	ldd	r31, Y+2	; 0x02
    3abc:	80 81       	ld	r24, Z
    3abe:	91 81       	ldd	r25, Z+1	; 0x01
    3ac0:	0e 94 45 13 	call	0x268a	; 0x268a <proc_restart_isr>
    3ac4:	f8 01       	movw	r30, r16
    3ac6:	82 83       	std	Z+2, r24	; 0x02
}
    3ac8:	0f 90       	pop	r0
    3aca:	0f 90       	pop	r0
    3acc:	cf 91       	pop	r28
    3ace:	df 91       	pop	r29
    3ad0:	1f 91       	pop	r17
    3ad2:	0f 91       	pop	r16
    3ad4:	08 95       	ret

00003ad6 <scall_proc_stop>:
}
/**********************************************************************************************
                                        SYSCALL_PROC_STOP
**********************************************************************************************/
void scall_proc_stop( void * arg )
{
    3ad6:	0f 93       	push	r16
    3ad8:	1f 93       	push	r17
    3ada:	df 93       	push	r29
    3adc:	cf 93       	push	r28
    3ade:	00 d0       	rcall	.+0      	; 0x3ae0 <scall_proc_stop+0xa>
    3ae0:	cd b7       	in	r28, 0x3d	; 61
    3ae2:	de b7       	in	r29, 0x3e	; 62
    3ae4:	9a 83       	std	Y+2, r25	; 0x02
    3ae6:	89 83       	std	Y+1, r24	; 0x01
    ((proc_runtime_arg_t *)arg)->ret = proc_stop_isr( ((proc_runtime_arg_t *)arg)->proc );
    3ae8:	09 81       	ldd	r16, Y+1	; 0x01
    3aea:	1a 81       	ldd	r17, Y+2	; 0x02
    3aec:	e9 81       	ldd	r30, Y+1	; 0x01
    3aee:	fa 81       	ldd	r31, Y+2	; 0x02
    3af0:	80 81       	ld	r24, Z
    3af2:	91 81       	ldd	r25, Z+1	; 0x01
    3af4:	0e 94 0a 14 	call	0x2814	; 0x2814 <proc_stop_isr>
    3af8:	f8 01       	movw	r30, r16
    3afa:	82 83       	std	Z+2, r24	; 0x02
}
    3afc:	0f 90       	pop	r0
    3afe:	0f 90       	pop	r0
    3b00:	cf 91       	pop	r28
    3b02:	df 91       	pop	r29
    3b04:	1f 91       	pop	r17
    3b06:	0f 91       	pop	r16
    3b08:	08 95       	ret

00003b0a <scall_proc_self_stop>:
}
/**********************************************************************************************
                                    SYSCALL_PROC_SELF_STOP
**********************************************************************************************/
void scall_proc_self_stop( void * arg )
{
    3b0a:	df 93       	push	r29
    3b0c:	cf 93       	push	r28
    3b0e:	00 d0       	rcall	.+0      	; 0x3b10 <scall_proc_self_stop+0x6>
    3b10:	00 d0       	rcall	.+0      	; 0x3b12 <scall_proc_self_stop+0x8>
    3b12:	cd b7       	in	r28, 0x3d	; 61
    3b14:	de b7       	in	r29, 0x3e	; 62
    3b16:	9c 83       	std	Y+4, r25	; 0x04
    3b18:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = current_proc();
    3b1a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <current_proc>
    3b1e:	9a 83       	std	Y+2, r25	; 0x02
    3b20:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
    3b22:	89 81       	ldd	r24, Y+1	; 0x01
    3b24:	9a 81       	ldd	r25, Y+2	; 0x02
    3b26:	83 96       	adiw	r24, 0x23	; 35
    3b28:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
#endif
    _proc_stop( proc );
    3b2c:	89 81       	ldd	r24, Y+1	; 0x01
    3b2e:	9a 81       	ldd	r25, Y+2	; 0x02
    3b30:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <_proc_stop>
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
    3b34:	89 81       	ldd	r24, Y+1	; 0x01
    3b36:	9a 81       	ldd	r25, Y+2	; 0x02
    3b38:	83 96       	adiw	r24, 0x23	; 35
    3b3a:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
#endif
}
    3b3e:	0f 90       	pop	r0
    3b40:	0f 90       	pop	r0
    3b42:	0f 90       	pop	r0
    3b44:	0f 90       	pop	r0
    3b46:	cf 91       	pop	r28
    3b48:	df 91       	pop	r29
    3b4a:	08 95       	ret

00003b4c <proc_self_stop>:
void proc_self_stop(void)
{
    3b4c:	df 93       	push	r29
    3b4e:	cf 93       	push	r28
    3b50:	cd b7       	in	r28, 0x3d	; 61
    3b52:	de b7       	in	r29, 0x3e	; 62
    syscall_bugurt( SYSCALL_PROC_SELF_STOP, (void *)1 );
    3b54:	85 e0       	ldi	r24, 0x05	; 5
    3b56:	61 e0       	ldi	r22, 0x01	; 1
    3b58:	70 e0       	ldi	r23, 0x00	; 0
    3b5a:	0e 94 39 04 	call	0x872	; 0x872 <syscall_bugurt>
}
    3b5e:	cf 91       	pop	r28
    3b60:	df 91       	pop	r29
    3b62:	08 95       	ret

00003b64 <scall_proc_terminate>:
/**********************************************************************************************
                                    SYSCALL_PROC_TERMINATE
**********************************************************************************************/
// Останов процесса после выхода из pmain, для обертки proc_run_wrapper
void scall_proc_terminate( void * arg )
{
    3b64:	df 93       	push	r29
    3b66:	cf 93       	push	r28
    3b68:	00 d0       	rcall	.+0      	; 0x3b6a <scall_proc_terminate+0x6>
    3b6a:	cd b7       	in	r28, 0x3d	; 61
    3b6c:	de b7       	in	r29, 0x3e	; 62
    3b6e:	9a 83       	std	Y+2, r25	; 0x02
    3b70:	89 83       	std	Y+1, r24	; 0x01
    _proc_terminate((proc_t *)arg);
    3b72:	89 81       	ldd	r24, Y+1	; 0x01
    3b74:	9a 81       	ldd	r25, Y+2	; 0x02
    3b76:	0e 94 8c 14 	call	0x2918	; 0x2918 <_proc_terminate>
}
    3b7a:	0f 90       	pop	r0
    3b7c:	0f 90       	pop	r0
    3b7e:	cf 91       	pop	r28
    3b80:	df 91       	pop	r29
    3b82:	08 95       	ret

00003b84 <proc_run_wrapper>:
void proc_run_wrapper( proc_t * proc )
{
    3b84:	df 93       	push	r29
    3b86:	cf 93       	push	r28
    3b88:	00 d0       	rcall	.+0      	; 0x3b8a <proc_run_wrapper+0x6>
    3b8a:	00 d0       	rcall	.+0      	; 0x3b8c <proc_run_wrapper+0x8>
    3b8c:	00 d0       	rcall	.+0      	; 0x3b8e <proc_run_wrapper+0xa>
    3b8e:	cd b7       	in	r28, 0x3d	; 61
    3b90:	de b7       	in	r29, 0x3e	; 62
    3b92:	9e 83       	std	Y+6, r25	; 0x06
    3b94:	8d 83       	std	Y+5, r24	; 0x05
    code_t pmain;
    void * arg;
    //Атомарно читаем pmain и arg
    disable_interrupts();
    3b96:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <disable_interrupts>
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
    3b9a:	8d 81       	ldd	r24, Y+5	; 0x05
    3b9c:	9e 81       	ldd	r25, Y+6	; 0x06
    3b9e:	83 96       	adiw	r24, 0x23	; 35
    3ba0:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>
#endif // CONFIG_MP
    pmain = proc->pmain;
    3ba4:	ed 81       	ldd	r30, Y+5	; 0x05
    3ba6:	fe 81       	ldd	r31, Y+6	; 0x06
    3ba8:	84 a1       	ldd	r24, Z+36	; 0x24
    3baa:	95 a1       	ldd	r25, Z+37	; 0x25
    3bac:	9c 83       	std	Y+4, r25	; 0x04
    3bae:	8b 83       	std	Y+3, r24	; 0x03
    arg = proc->arg;
    3bb0:	ed 81       	ldd	r30, Y+5	; 0x05
    3bb2:	fe 81       	ldd	r31, Y+6	; 0x06
    3bb4:	82 a5       	ldd	r24, Z+42	; 0x2a
    3bb6:	93 a5       	ldd	r25, Z+43	; 0x2b
    3bb8:	9a 83       	std	Y+2, r25	; 0x02
    3bba:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
    3bbc:	8d 81       	ldd	r24, Y+5	; 0x05
    3bbe:	9e 81       	ldd	r25, Y+6	; 0x06
    3bc0:	83 96       	adiw	r24, 0x23	; 35
    3bc2:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
#endif // CONFIG_MP
    enable_interrupts();
    3bc6:	0e 94 06 0a 	call	0x140c	; 0x140c <enable_interrupts>
    //Выполняем pmain
    pmain( arg );
    3bca:	89 81       	ldd	r24, Y+1	; 0x01
    3bcc:	9a 81       	ldd	r25, Y+2	; 0x02
    3bce:	eb 81       	ldd	r30, Y+3	; 0x03
    3bd0:	fc 81       	ldd	r31, Y+4	; 0x04
    3bd2:	09 95       	icall
    // Завершаем процесс
    syscall_bugurt( SYSCALL_PROC_TERMINATE, (void *)proc );
    3bd4:	2d 81       	ldd	r18, Y+5	; 0x05
    3bd6:	3e 81       	ldd	r19, Y+6	; 0x06
    3bd8:	86 e0       	ldi	r24, 0x06	; 6
    3bda:	b9 01       	movw	r22, r18
    3bdc:	0e 94 39 04 	call	0x872	; 0x872 <syscall_bugurt>
}
    3be0:	26 96       	adiw	r28, 0x06	; 6
    3be2:	0f b6       	in	r0, 0x3f	; 63
    3be4:	f8 94       	cli
    3be6:	de bf       	out	0x3e, r29	; 62
    3be8:	0f be       	out	0x3f, r0	; 63
    3bea:	cd bf       	out	0x3d, r28	; 61
    3bec:	cf 91       	pop	r28
    3bee:	df 91       	pop	r29
    3bf0:	08 95       	ret

00003bf2 <scall_proc_flag_stop>:
/**********************************************************************************************
                                       SYSCALL_PROC_FLAG_STOP
**********************************************************************************************/
void scall_proc_flag_stop( void * arg )
{
    3bf2:	df 93       	push	r29
    3bf4:	cf 93       	push	r28
    3bf6:	00 d0       	rcall	.+0      	; 0x3bf8 <scall_proc_flag_stop+0x6>
    3bf8:	cd b7       	in	r28, 0x3d	; 61
    3bfa:	de b7       	in	r29, 0x3e	; 62
    3bfc:	9a 83       	std	Y+2, r25	; 0x02
    3bfe:	89 83       	std	Y+1, r24	; 0x01
    _proc_flag_stop( *((flag_t *)arg) );
    3c00:	e9 81       	ldd	r30, Y+1	; 0x01
    3c02:	fa 81       	ldd	r31, Y+2	; 0x02
    3c04:	80 81       	ld	r24, Z
    3c06:	91 81       	ldd	r25, Z+1	; 0x01
    3c08:	0e 94 44 14 	call	0x2888	; 0x2888 <_proc_flag_stop>
}
    3c0c:	0f 90       	pop	r0
    3c0e:	0f 90       	pop	r0
    3c10:	cf 91       	pop	r28
    3c12:	df 91       	pop	r29
    3c14:	08 95       	ret

00003c16 <scall_proc_reset_watchdog>:
}
/**********************************************************************************************
                                       SYSCALL_PROC_RESET_WATCHDOG
**********************************************************************************************/
void scall_proc_reset_watchdog( void * arg )
{
    3c16:	df 93       	push	r29
    3c18:	cf 93       	push	r28
    3c1a:	00 d0       	rcall	.+0      	; 0x3c1c <scall_proc_reset_watchdog+0x6>
    3c1c:	cd b7       	in	r28, 0x3d	; 61
    3c1e:	de b7       	in	r29, 0x3e	; 62
    3c20:	9a 83       	std	Y+2, r25	; 0x02
    3c22:	89 83       	std	Y+1, r24	; 0x01
    _proc_reset_watchdog();
    3c24:	0e 94 cf 14 	call	0x299e	; 0x299e <_proc_reset_watchdog>
}
    3c28:	0f 90       	pop	r0
    3c2a:	0f 90       	pop	r0
    3c2c:	cf 91       	pop	r28
    3c2e:	df 91       	pop	r29
    3c30:	08 95       	ret

00003c32 <proc_reset_watchdog>:
void proc_reset_watchdog(void)
{
    3c32:	df 93       	push	r29
    3c34:	cf 93       	push	r28
    3c36:	cd b7       	in	r28, 0x3d	; 61
    3c38:	de b7       	in	r29, 0x3e	; 62
    syscall_bugurt( SYSCALL_PROC_RESET_WATCHDOG, (void *)0 );
    3c3a:	88 e0       	ldi	r24, 0x08	; 8
    3c3c:	60 e0       	ldi	r22, 0x00	; 0
    3c3e:	70 e0       	ldi	r23, 0x00	; 0
    3c40:	0e 94 39 04 	call	0x872	; 0x872 <syscall_bugurt>
}
    3c44:	cf 91       	pop	r28
    3c46:	df 91       	pop	r29
    3c48:	08 95       	ret

00003c4a <scall_sig_init>:
                                            Сигналы
***********************************************************************************************
                                      SYSCALL_PROC_RESTART
**********************************************************************************************/
void scall_sig_init( void * arg )
{
    3c4a:	df 93       	push	r29
    3c4c:	cf 93       	push	r28
    3c4e:	00 d0       	rcall	.+0      	; 0x3c50 <scall_sig_init+0x6>
    3c50:	cd b7       	in	r28, 0x3d	; 61
    3c52:	de b7       	in	r29, 0x3e	; 62
    3c54:	9a 83       	std	Y+2, r25	; 0x02
    3c56:	89 83       	std	Y+1, r24	; 0x01
    sig_init_isr( (sig_t *)arg );
    3c58:	89 81       	ldd	r24, Y+1	; 0x01
    3c5a:	9a 81       	ldd	r25, Y+2	; 0x02
    3c5c:	0e 94 87 1a 	call	0x350e	; 0x350e <sig_init_isr>
}
    3c60:	0f 90       	pop	r0
    3c62:	0f 90       	pop	r0
    3c64:	cf 91       	pop	r28
    3c66:	df 91       	pop	r29
    3c68:	08 95       	ret

00003c6a <scall_sig_wait>:
}
/**********************************************************************************************
                                       SYSCALL_SIG_WAIT
**********************************************************************************************/
void scall_sig_wait( void * arg )
{
    3c6a:	df 93       	push	r29
    3c6c:	cf 93       	push	r28
    3c6e:	00 d0       	rcall	.+0      	; 0x3c70 <scall_sig_wait+0x6>
    3c70:	cd b7       	in	r28, 0x3d	; 61
    3c72:	de b7       	in	r29, 0x3e	; 62
    3c74:	9a 83       	std	Y+2, r25	; 0x02
    3c76:	89 83       	std	Y+1, r24	; 0x01
    _sig_wait_prologue( (sig_t *)arg );
    3c78:	89 81       	ldd	r24, Y+1	; 0x01
    3c7a:	9a 81       	ldd	r25, Y+2	; 0x02
    3c7c:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_sig_wait_prologue>
}
    3c80:	0f 90       	pop	r0
    3c82:	0f 90       	pop	r0
    3c84:	cf 91       	pop	r28
    3c86:	df 91       	pop	r29
    3c88:	08 95       	ret

00003c8a <scall_sig_wakeup>:
/**********************************************************************************************
                                       SYSCALL_SIG_WAKEUP
**********************************************************************************************/
void scall_sig_wakeup( void *arg )
{
    3c8a:	df 93       	push	r29
    3c8c:	cf 93       	push	r28
    3c8e:	00 d0       	rcall	.+0      	; 0x3c90 <scall_sig_wakeup+0x6>
    3c90:	cd b7       	in	r28, 0x3d	; 61
    3c92:	de b7       	in	r29, 0x3e	; 62
    3c94:	9a 83       	std	Y+2, r25	; 0x02
    3c96:	89 83       	std	Y+1, r24	; 0x01
    _sig_wait_epilogue();
    3c98:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <_sig_wait_epilogue>
    _proc_flag_stop( PROC_FLG_WAIT );
    3c9c:	80 e2       	ldi	r24, 0x20	; 32
    3c9e:	90 e0       	ldi	r25, 0x00	; 0
    3ca0:	0e 94 44 14 	call	0x2888	; 0x2888 <_proc_flag_stop>
}
    3ca4:	0f 90       	pop	r0
    3ca6:	0f 90       	pop	r0
    3ca8:	cf 91       	pop	r28
    3caa:	df 91       	pop	r29
    3cac:	08 95       	ret

00003cae <scall_sig_signal>:
}
/**********************************************************************************************
                                       SYSCALL_SIG_SIGNAL
**********************************************************************************************/
void scall_sig_signal( void * arg )
{
    3cae:	df 93       	push	r29
    3cb0:	cf 93       	push	r28
    3cb2:	00 d0       	rcall	.+0      	; 0x3cb4 <scall_sig_signal+0x6>
    3cb4:	cd b7       	in	r28, 0x3d	; 61
    3cb6:	de b7       	in	r29, 0x3e	; 62
    3cb8:	9a 83       	std	Y+2, r25	; 0x02
    3cba:	89 83       	std	Y+1, r24	; 0x01
    sig_signal_isr( (sig_t *)arg );
    3cbc:	89 81       	ldd	r24, Y+1	; 0x01
    3cbe:	9a 81       	ldd	r25, Y+2	; 0x02
    3cc0:	0e 94 94 1b 	call	0x3728	; 0x3728 <sig_signal_isr>
}
    3cc4:	0f 90       	pop	r0
    3cc6:	0f 90       	pop	r0
    3cc8:	cf 91       	pop	r28
    3cca:	df 91       	pop	r29
    3ccc:	08 95       	ret

00003cce <scall_sig_broadcast>:
}
/**********************************************************************************************
                                       SYSCALL_SIG_BROADCAST
**********************************************************************************************/
void scall_sig_broadcast( void * arg )
{
    3cce:	df 93       	push	r29
    3cd0:	cf 93       	push	r28
    3cd2:	00 d0       	rcall	.+0      	; 0x3cd4 <scall_sig_broadcast+0x6>
    3cd4:	cd b7       	in	r28, 0x3d	; 61
    3cd6:	de b7       	in	r29, 0x3e	; 62
    3cd8:	9a 83       	std	Y+2, r25	; 0x02
    3cda:	89 83       	std	Y+1, r24	; 0x01
    sig_broadcast_isr( (sig_t *)arg );
    3cdc:	89 81       	ldd	r24, Y+1	; 0x01
    3cde:	9a 81       	ldd	r25, Y+2	; 0x02
    3ce0:	0e 94 33 1c 	call	0x3866	; 0x3866 <sig_broadcast_isr>
}
    3ce4:	0f 90       	pop	r0
    3ce6:	0f 90       	pop	r0
    3ce8:	cf 91       	pop	r28
    3cea:	df 91       	pop	r29
    3cec:	08 95       	ret

00003cee <scall_sem_init>:
                                           Семафоры
***********************************************************************************************
                                       SYSCALL_SEM_INIT
**********************************************************************************************/
void scall_sem_init( void * arg )
{
    3cee:	df 93       	push	r29
    3cf0:	cf 93       	push	r28
    3cf2:	00 d0       	rcall	.+0      	; 0x3cf4 <scall_sem_init+0x6>
    3cf4:	cd b7       	in	r28, 0x3d	; 61
    3cf6:	de b7       	in	r29, 0x3e	; 62
    3cf8:	9a 83       	std	Y+2, r25	; 0x02
    3cfa:	89 83       	std	Y+1, r24	; 0x01
    sem_init_isr( ((sem_init_arg_t *)arg)->sem, ((sem_init_arg_t *)arg)->count );
    3cfc:	e9 81       	ldd	r30, Y+1	; 0x01
    3cfe:	fa 81       	ldd	r31, Y+2	; 0x02
    3d00:	80 81       	ld	r24, Z
    3d02:	91 81       	ldd	r25, Z+1	; 0x01
    3d04:	e9 81       	ldd	r30, Y+1	; 0x01
    3d06:	fa 81       	ldd	r31, Y+2	; 0x02
    3d08:	22 81       	ldd	r18, Z+2	; 0x02
    3d0a:	33 81       	ldd	r19, Z+3	; 0x03
    3d0c:	b9 01       	movw	r22, r18
    3d0e:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <sem_init_isr>
}
    3d12:	0f 90       	pop	r0
    3d14:	0f 90       	pop	r0
    3d16:	cf 91       	pop	r28
    3d18:	df 91       	pop	r29
    3d1a:	08 95       	ret

00003d1c <scall_sem_lock>:
}
/**********************************************************************************************
                                         SYSCALL_SEM_LOCK
**********************************************************************************************/
void scall_sem_lock( void * arg )
{
    3d1c:	0f 93       	push	r16
    3d1e:	1f 93       	push	r17
    3d20:	df 93       	push	r29
    3d22:	cf 93       	push	r28
    3d24:	00 d0       	rcall	.+0      	; 0x3d26 <scall_sem_lock+0xa>
    3d26:	cd b7       	in	r28, 0x3d	; 61
    3d28:	de b7       	in	r29, 0x3e	; 62
    3d2a:	9a 83       	std	Y+2, r25	; 0x02
    3d2c:	89 83       	std	Y+1, r24	; 0x01
    ((sem_lock_arg_t *)arg)->ret = _sem_lock( ((sem_lock_arg_t *)arg)->sem );
    3d2e:	09 81       	ldd	r16, Y+1	; 0x01
    3d30:	1a 81       	ldd	r17, Y+2	; 0x02
    3d32:	e9 81       	ldd	r30, Y+1	; 0x01
    3d34:	fa 81       	ldd	r31, Y+2	; 0x02
    3d36:	80 81       	ld	r24, Z
    3d38:	91 81       	ldd	r25, Z+1	; 0x01
    3d3a:	0e 94 95 19 	call	0x332a	; 0x332a <_sem_lock>
    3d3e:	f8 01       	movw	r30, r16
    3d40:	82 83       	std	Z+2, r24	; 0x02
}
    3d42:	0f 90       	pop	r0
    3d44:	0f 90       	pop	r0
    3d46:	cf 91       	pop	r28
    3d48:	df 91       	pop	r29
    3d4a:	1f 91       	pop	r17
    3d4c:	0f 91       	pop	r16
    3d4e:	08 95       	ret

00003d50 <scall_sem_try_lock>:
}
/**********************************************************************************************
                                       SYSCALL_SEM_TRY_LOCK
**********************************************************************************************/
void scall_sem_try_lock( void * arg )
{
    3d50:	0f 93       	push	r16
    3d52:	1f 93       	push	r17
    3d54:	df 93       	push	r29
    3d56:	cf 93       	push	r28
    3d58:	00 d0       	rcall	.+0      	; 0x3d5a <scall_sem_try_lock+0xa>
    3d5a:	cd b7       	in	r28, 0x3d	; 61
    3d5c:	de b7       	in	r29, 0x3e	; 62
    3d5e:	9a 83       	std	Y+2, r25	; 0x02
    3d60:	89 83       	std	Y+1, r24	; 0x01
    ((sem_lock_arg_t *)arg)->ret = _sem_try_lock( ((sem_lock_arg_t *)arg)->sem );
    3d62:	09 81       	ldd	r16, Y+1	; 0x01
    3d64:	1a 81       	ldd	r17, Y+2	; 0x02
    3d66:	e9 81       	ldd	r30, Y+1	; 0x01
    3d68:	fa 81       	ldd	r31, Y+2	; 0x02
    3d6a:	80 81       	ld	r24, Z
    3d6c:	91 81       	ldd	r25, Z+1	; 0x01
    3d6e:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <_sem_try_lock>
    3d72:	f8 01       	movw	r30, r16
    3d74:	82 83       	std	Z+2, r24	; 0x02
}
    3d76:	0f 90       	pop	r0
    3d78:	0f 90       	pop	r0
    3d7a:	cf 91       	pop	r28
    3d7c:	df 91       	pop	r29
    3d7e:	1f 91       	pop	r17
    3d80:	0f 91       	pop	r16
    3d82:	08 95       	ret

00003d84 <scall_sem_unlock>:
}
/**********************************************************************************************
                                       SYSCALL_SEM_UNLOCK
**********************************************************************************************/
void scall_sem_unlock( void * arg )
{
    3d84:	df 93       	push	r29
    3d86:	cf 93       	push	r28
    3d88:	00 d0       	rcall	.+0      	; 0x3d8a <scall_sem_unlock+0x6>
    3d8a:	cd b7       	in	r28, 0x3d	; 61
    3d8c:	de b7       	in	r29, 0x3e	; 62
    3d8e:	9a 83       	std	Y+2, r25	; 0x02
    3d90:	89 83       	std	Y+1, r24	; 0x01
    sem_unlock_isr( (sem_t *)arg );
    3d92:	89 81       	ldd	r24, Y+1	; 0x01
    3d94:	9a 81       	ldd	r25, Y+2	; 0x02
    3d96:	0e 94 3e 1a 	call	0x347c	; 0x347c <sem_unlock_isr>
}
    3d9a:	0f 90       	pop	r0
    3d9c:	0f 90       	pop	r0
    3d9e:	cf 91       	pop	r28
    3da0:	df 91       	pop	r29
    3da2:	08 95       	ret

00003da4 <scall_mutex_init>:
                                          Мьютексы
***********************************************************************************************
                                     SYSCALL_MUTEX_INIT
**********************************************************************************************/
void scall_mutex_init(void * arg)
{
    3da4:	df 93       	push	r29
    3da6:	cf 93       	push	r28
    3da8:	00 d0       	rcall	.+0      	; 0x3daa <scall_mutex_init+0x6>
    3daa:	cd b7       	in	r28, 0x3d	; 61
    3dac:	de b7       	in	r29, 0x3e	; 62
    3dae:	9a 83       	std	Y+2, r25	; 0x02
    3db0:	89 83       	std	Y+1, r24	; 0x01
    mutex_init_isr(
    3db2:	e9 81       	ldd	r30, Y+1	; 0x01
    3db4:	fa 81       	ldd	r31, Y+2	; 0x02
    3db6:	80 81       	ld	r24, Z
    3db8:	91 81       	ldd	r25, Z+1	; 0x01
    3dba:	e9 81       	ldd	r30, Y+1	; 0x01
    3dbc:	fa 81       	ldd	r31, Y+2	; 0x02
    3dbe:	22 81       	ldd	r18, Z+2	; 0x02
    3dc0:	62 2f       	mov	r22, r18
    3dc2:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <mutex_init_isr>
               ((mutex_init_arg_t *)arg)->mutex
#ifdef CONFIG_USE_HIGHEST_LOCKER
               ,((mutex_init_arg_t *)arg)->prio
#endif // CONFIG_USE_HIGHEST_LOCKER
               );
}
    3dc6:	0f 90       	pop	r0
    3dc8:	0f 90       	pop	r0
    3dca:	cf 91       	pop	r28
    3dcc:	df 91       	pop	r29
    3dce:	08 95       	ret

00003dd0 <scall_mutex_lock>:
}
/**********************************************************************************************
                                    SYSCALL_MUTEX_LOCK
**********************************************************************************************/
void scall_mutex_lock(void * arg)
{
    3dd0:	0f 93       	push	r16
    3dd2:	1f 93       	push	r17
    3dd4:	df 93       	push	r29
    3dd6:	cf 93       	push	r28
    3dd8:	00 d0       	rcall	.+0      	; 0x3dda <scall_mutex_lock+0xa>
    3dda:	cd b7       	in	r28, 0x3d	; 61
    3ddc:	de b7       	in	r29, 0x3e	; 62
    3dde:	9a 83       	std	Y+2, r25	; 0x02
    3de0:	89 83       	std	Y+1, r24	; 0x01
    ((mutex_lock_arg_t *)arg)->ret = _mutex_lock( ((mutex_lock_arg_t *)arg)->mutex );
    3de2:	09 81       	ldd	r16, Y+1	; 0x01
    3de4:	1a 81       	ldd	r17, Y+2	; 0x02
    3de6:	e9 81       	ldd	r30, Y+1	; 0x01
    3de8:	fa 81       	ldd	r31, Y+2	; 0x02
    3dea:	80 81       	ld	r24, Z
    3dec:	91 81       	ldd	r25, Z+1	; 0x01
    3dee:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <_mutex_lock>
    3df2:	f8 01       	movw	r30, r16
    3df4:	82 83       	std	Z+2, r24	; 0x02
}
    3df6:	0f 90       	pop	r0
    3df8:	0f 90       	pop	r0
    3dfa:	cf 91       	pop	r28
    3dfc:	df 91       	pop	r29
    3dfe:	1f 91       	pop	r17
    3e00:	0f 91       	pop	r16
    3e02:	08 95       	ret

00003e04 <scall_mutex_try_lock>:
// Захват
/**********************************************************************************************
                                    SYSCALL_MUTEX_TRY_LOCK
**********************************************************************************************/
void scall_mutex_try_lock(void * arg)
{
    3e04:	0f 93       	push	r16
    3e06:	1f 93       	push	r17
    3e08:	df 93       	push	r29
    3e0a:	cf 93       	push	r28
    3e0c:	00 d0       	rcall	.+0      	; 0x3e0e <scall_mutex_try_lock+0xa>
    3e0e:	cd b7       	in	r28, 0x3d	; 61
    3e10:	de b7       	in	r29, 0x3e	; 62
    3e12:	9a 83       	std	Y+2, r25	; 0x02
    3e14:	89 83       	std	Y+1, r24	; 0x01
    ((mutex_lock_arg_t *)arg)->ret = _mutex_try_lock( ((mutex_lock_arg_t *)arg)->mutex );
    3e16:	09 81       	ldd	r16, Y+1	; 0x01
    3e18:	1a 81       	ldd	r17, Y+2	; 0x02
    3e1a:	e9 81       	ldd	r30, Y+1	; 0x01
    3e1c:	fa 81       	ldd	r31, Y+2	; 0x02
    3e1e:	80 81       	ld	r24, Z
    3e20:	91 81       	ldd	r25, Z+1	; 0x01
    3e22:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <_mutex_try_lock>
    3e26:	f8 01       	movw	r30, r16
    3e28:	82 83       	std	Z+2, r24	; 0x02
}
    3e2a:	0f 90       	pop	r0
    3e2c:	0f 90       	pop	r0
    3e2e:	cf 91       	pop	r28
    3e30:	df 91       	pop	r29
    3e32:	1f 91       	pop	r17
    3e34:	0f 91       	pop	r16
    3e36:	08 95       	ret

00003e38 <scall_mutex_unlock>:
}
/**********************************************************************************************
                                   SYSCALL_MUTEX_UNLOCK
**********************************************************************************************/
void scall_mutex_unlock(void * arg)
{
    3e38:	df 93       	push	r29
    3e3a:	cf 93       	push	r28
    3e3c:	00 d0       	rcall	.+0      	; 0x3e3e <scall_mutex_unlock+0x6>
    3e3e:	cd b7       	in	r28, 0x3d	; 61
    3e40:	de b7       	in	r29, 0x3e	; 62
    3e42:	9a 83       	std	Y+2, r25	; 0x02
    3e44:	89 83       	std	Y+1, r24	; 0x01
    _mutex_unlock( (mutex_t *)arg );
    3e46:	89 81       	ldd	r24, Y+1	; 0x01
    3e48:	9a 81       	ldd	r25, Y+2	; 0x02
    3e4a:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <_mutex_unlock>
}
    3e4e:	0f 90       	pop	r0
    3e50:	0f 90       	pop	r0
    3e52:	cf 91       	pop	r28
    3e54:	df 91       	pop	r29
    3e56:	08 95       	ret

00003e58 <scall_ipc_wait>:
                                           IPC
***********************************************************************************************
                                       SYSCALL_IPC_WAIT
**********************************************************************************************/
void scall_ipc_wait(void * arg)
{
    3e58:	df 93       	push	r29
    3e5a:	cf 93       	push	r28
    3e5c:	00 d0       	rcall	.+0      	; 0x3e5e <scall_ipc_wait+0x6>
    3e5e:	cd b7       	in	r28, 0x3d	; 61
    3e60:	de b7       	in	r29, 0x3e	; 62
    3e62:	9a 83       	std	Y+2, r25	; 0x02
    3e64:	89 83       	std	Y+1, r24	; 0x01
    _ipc_wait( arg );
    3e66:	89 81       	ldd	r24, Y+1	; 0x01
    3e68:	9a 81       	ldd	r25, Y+2	; 0x02
    3e6a:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ipc_wait>
}
    3e6e:	0f 90       	pop	r0
    3e70:	0f 90       	pop	r0
    3e72:	cf 91       	pop	r28
    3e74:	df 91       	pop	r29
    3e76:	08 95       	ret

00003e78 <scall_ipc_send>:
}
/**********************************************************************************************
                                       SYSCALL_IPC_SEND
**********************************************************************************************/
void scall_ipc_send(void * arg)
{
    3e78:	0f 93       	push	r16
    3e7a:	1f 93       	push	r17
    3e7c:	df 93       	push	r29
    3e7e:	cf 93       	push	r28
    3e80:	00 d0       	rcall	.+0      	; 0x3e82 <scall_ipc_send+0xa>
    3e82:	cd b7       	in	r28, 0x3d	; 61
    3e84:	de b7       	in	r29, 0x3e	; 62
    3e86:	9a 83       	std	Y+2, r25	; 0x02
    3e88:	89 83       	std	Y+1, r24	; 0x01
    ((ipc_send_arg_t *)arg)->ret = ipc_send_isr( ((ipc_send_arg_t *)arg)->proc, ((ipc_send_arg_t *)arg)->data );
    3e8a:	09 81       	ldd	r16, Y+1	; 0x01
    3e8c:	1a 81       	ldd	r17, Y+2	; 0x02
    3e8e:	e9 81       	ldd	r30, Y+1	; 0x01
    3e90:	fa 81       	ldd	r31, Y+2	; 0x02
    3e92:	80 81       	ld	r24, Z
    3e94:	91 81       	ldd	r25, Z+1	; 0x01
    3e96:	e9 81       	ldd	r30, Y+1	; 0x01
    3e98:	fa 81       	ldd	r31, Y+2	; 0x02
    3e9a:	23 81       	ldd	r18, Z+3	; 0x03
    3e9c:	34 81       	ldd	r19, Z+4	; 0x04
    3e9e:	b9 01       	movw	r22, r18
    3ea0:	0e 94 b2 0c 	call	0x1964	; 0x1964 <ipc_send_isr>
    3ea4:	f8 01       	movw	r30, r16
    3ea6:	82 83       	std	Z+2, r24	; 0x02
}
    3ea8:	0f 90       	pop	r0
    3eaa:	0f 90       	pop	r0
    3eac:	cf 91       	pop	r28
    3eae:	df 91       	pop	r29
    3eb0:	1f 91       	pop	r17
    3eb2:	0f 91       	pop	r16
    3eb4:	08 95       	ret

00003eb6 <scall_ipc_exchange>:
}
/**********************************************************************************************
                                    SYSCALL_IPC_EXCHANGE
**********************************************************************************************/
void scall_ipc_exchange(void * arg)
{
    3eb6:	0f 93       	push	r16
    3eb8:	1f 93       	push	r17
    3eba:	df 93       	push	r29
    3ebc:	cf 93       	push	r28
    3ebe:	00 d0       	rcall	.+0      	; 0x3ec0 <scall_ipc_exchange+0xa>
    3ec0:	cd b7       	in	r28, 0x3d	; 61
    3ec2:	de b7       	in	r29, 0x3e	; 62
    3ec4:	9a 83       	std	Y+2, r25	; 0x02
    3ec6:	89 83       	std	Y+1, r24	; 0x01
    ((ipc_send_arg_t *)arg)->ret = _ipc_exchange( ((ipc_send_arg_t *)arg)->proc, ((ipc_send_arg_t *)arg)->data, ((ipc_exchange_arg_t *)arg)->receive );
    3ec8:	09 81       	ldd	r16, Y+1	; 0x01
    3eca:	1a 81       	ldd	r17, Y+2	; 0x02
    3ecc:	e9 81       	ldd	r30, Y+1	; 0x01
    3ece:	fa 81       	ldd	r31, Y+2	; 0x02
    3ed0:	80 81       	ld	r24, Z
    3ed2:	91 81       	ldd	r25, Z+1	; 0x01
    3ed4:	e9 81       	ldd	r30, Y+1	; 0x01
    3ed6:	fa 81       	ldd	r31, Y+2	; 0x02
    3ed8:	43 81       	ldd	r20, Z+3	; 0x03
    3eda:	54 81       	ldd	r21, Z+4	; 0x04
    3edc:	e9 81       	ldd	r30, Y+1	; 0x01
    3ede:	fa 81       	ldd	r31, Y+2	; 0x02
    3ee0:	25 81       	ldd	r18, Z+5	; 0x05
    3ee2:	36 81       	ldd	r19, Z+6	; 0x06
    3ee4:	ba 01       	movw	r22, r20
    3ee6:	a9 01       	movw	r20, r18
    3ee8:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <_ipc_exchange>
    3eec:	f8 01       	movw	r30, r16
    3eee:	82 83       	std	Z+2, r24	; 0x02
}
    3ef0:	0f 90       	pop	r0
    3ef2:	0f 90       	pop	r0
    3ef4:	cf 91       	pop	r28
    3ef6:	df 91       	pop	r29
    3ef8:	1f 91       	pop	r17
    3efa:	0f 91       	pop	r16
    3efc:	08 95       	ret

00003efe <_clear_timer>:
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
//========================================================================================
void _clear_timer(timer_t * t)
{
    3efe:	df 93       	push	r29
    3f00:	cf 93       	push	r28
    3f02:	00 d0       	rcall	.+0      	; 0x3f04 <_clear_timer+0x6>
    3f04:	0f 92       	push	r0
    3f06:	cd b7       	in	r28, 0x3d	; 61
    3f08:	de b7       	in	r29, 0x3e	; 62
    3f0a:	9b 83       	std	Y+3, r25	; 0x03
    3f0c:	8a 83       	std	Y+2, r24	; 0x02
    ENTER_CRIT_SEC();
    3f0e:	0e 94 b3 0b 	call	0x1766	; 0x1766 <_enter_crit_sec>
    3f12:	89 83       	std	Y+1, r24	; 0x01
    SPIN_LOCK_KERNEL_TIMER();
    3f14:	82 e8       	ldi	r24, 0x82	; 130
    3f16:	93 e0       	ldi	r25, 0x03	; 3
    3f18:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>

    *t = kernel.timer;
    3f1c:	80 91 83 03 	lds	r24, 0x0383
    3f20:	90 91 84 03 	lds	r25, 0x0384
    3f24:	ea 81       	ldd	r30, Y+2	; 0x02
    3f26:	fb 81       	ldd	r31, Y+3	; 0x03
    3f28:	91 83       	std	Z+1, r25	; 0x01
    3f2a:	80 83       	st	Z, r24

    SPIN_UNLOCK_KERNEL_TIMER();
    3f2c:	82 e8       	ldi	r24, 0x82	; 130
    3f2e:	93 e0       	ldi	r25, 0x03	; 3
    3f30:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
    EXIT_CRIT_SEC();
    3f34:	89 81       	ldd	r24, Y+1	; 0x01
    3f36:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <_exit_crit_sec>
}
    3f3a:	0f 90       	pop	r0
    3f3c:	0f 90       	pop	r0
    3f3e:	0f 90       	pop	r0
    3f40:	cf 91       	pop	r28
    3f42:	df 91       	pop	r29
    3f44:	08 95       	ret

00003f46 <_timer>:
//----------------------------------------------------------------------------------------
timer_t _timer(timer_t t)
{
    3f46:	df 93       	push	r29
    3f48:	cf 93       	push	r28
    3f4a:	00 d0       	rcall	.+0      	; 0x3f4c <_timer+0x6>
    3f4c:	00 d0       	rcall	.+0      	; 0x3f4e <_timer+0x8>
    3f4e:	0f 92       	push	r0
    3f50:	cd b7       	in	r28, 0x3d	; 61
    3f52:	de b7       	in	r29, 0x3e	; 62
    3f54:	9d 83       	std	Y+5, r25	; 0x05
    3f56:	8c 83       	std	Y+4, r24	; 0x04
    timer_t ret;
    ENTER_CRIT_SEC();
    3f58:	0e 94 b3 0b 	call	0x1766	; 0x1766 <_enter_crit_sec>
    3f5c:	89 83       	std	Y+1, r24	; 0x01
    SPIN_LOCK_KERNEL_TIMER();
    3f5e:	82 e8       	ldi	r24, 0x82	; 130
    3f60:	93 e0       	ldi	r25, 0x03	; 3
    3f62:	0e 94 0d 01 	call	0x21a	; 0x21a <spin_lock>

    ret = (timer_t)kernel.timer - (timer_t)t;
    3f66:	20 91 83 03 	lds	r18, 0x0383
    3f6a:	30 91 84 03 	lds	r19, 0x0384
    3f6e:	8c 81       	ldd	r24, Y+4	; 0x04
    3f70:	9d 81       	ldd	r25, Y+5	; 0x05
    3f72:	a9 01       	movw	r20, r18
    3f74:	48 1b       	sub	r20, r24
    3f76:	59 0b       	sbc	r21, r25
    3f78:	ca 01       	movw	r24, r20
    3f7a:	9b 83       	std	Y+3, r25	; 0x03
    3f7c:	8a 83       	std	Y+2, r24	; 0x02

    SPIN_UNLOCK_KERNEL_TIMER();
    3f7e:	82 e8       	ldi	r24, 0x82	; 130
    3f80:	93 e0       	ldi	r25, 0x03	; 3
    3f82:	0e 94 37 01 	call	0x26e	; 0x26e <spin_unlock>
    EXIT_CRIT_SEC();
    3f86:	89 81       	ldd	r24, Y+1	; 0x01
    3f88:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <_exit_crit_sec>

    return ret;
    3f8c:	8a 81       	ldd	r24, Y+2	; 0x02
    3f8e:	9b 81       	ldd	r25, Y+3	; 0x03
}
    3f90:	0f 90       	pop	r0
    3f92:	0f 90       	pop	r0
    3f94:	0f 90       	pop	r0
    3f96:	0f 90       	pop	r0
    3f98:	0f 90       	pop	r0
    3f9a:	cf 91       	pop	r28
    3f9c:	df 91       	pop	r29
    3f9e:	08 95       	ret

00003fa0 <wait_time>:

//----------------------------------------------------------------------------------------
void wait_time(timer_t time)
{
    3fa0:	df 93       	push	r29
    3fa2:	cf 93       	push	r28
    3fa4:	00 d0       	rcall	.+0      	; 0x3fa6 <wait_time+0x6>
    3fa6:	00 d0       	rcall	.+0      	; 0x3fa8 <wait_time+0x8>
    3fa8:	0f 92       	push	r0
    3faa:	cd b7       	in	r28, 0x3d	; 61
    3fac:	de b7       	in	r29, 0x3e	; 62
    3fae:	9d 83       	std	Y+5, r25	; 0x05
    3fb0:	8c 83       	std	Y+4, r24	; 0x04
    timer_t tmr;
    bool_t roll=(bool_t)1;
    3fb2:	81 e0       	ldi	r24, 0x01	; 1
    3fb4:	89 83       	std	Y+1, r24	; 0x01
    CLEAR_TIMER(tmr);
    3fb6:	ce 01       	movw	r24, r28
    3fb8:	02 96       	adiw	r24, 0x02	; 2
    3fba:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <_clear_timer>
    3fbe:	0d c0       	rjmp	.+26     	; 0x3fda <wait_time+0x3a>
    while((bool_t)roll)
    {
        roll = (bool_t)( TIMER(tmr) < (timer_t)time );
    3fc0:	8a 81       	ldd	r24, Y+2	; 0x02
    3fc2:	9b 81       	ldd	r25, Y+3	; 0x03
    3fc4:	0e 94 a3 1f 	call	0x3f46	; 0x3f46 <_timer>
    3fc8:	9c 01       	movw	r18, r24
    3fca:	8c 81       	ldd	r24, Y+4	; 0x04
    3fcc:	9d 81       	ldd	r25, Y+5	; 0x05
    3fce:	19 82       	std	Y+1, r1	; 0x01
    3fd0:	28 17       	cp	r18, r24
    3fd2:	39 07       	cpc	r19, r25
    3fd4:	10 f4       	brcc	.+4      	; 0x3fda <wait_time+0x3a>
    3fd6:	81 e0       	ldi	r24, 0x01	; 1
    3fd8:	89 83       	std	Y+1, r24	; 0x01
void wait_time(timer_t time)
{
    timer_t tmr;
    bool_t roll=(bool_t)1;
    CLEAR_TIMER(tmr);
    while((bool_t)roll)
    3fda:	89 81       	ldd	r24, Y+1	; 0x01
    3fdc:	88 23       	and	r24, r24
    3fde:	81 f7       	brne	.-32     	; 0x3fc0 <wait_time+0x20>
    {
        roll = (bool_t)( TIMER(tmr) < (timer_t)time );
    }
}
    3fe0:	0f 90       	pop	r0
    3fe2:	0f 90       	pop	r0
    3fe4:	0f 90       	pop	r0
    3fe6:	0f 90       	pop	r0
    3fe8:	0f 90       	pop	r0
    3fea:	cf 91       	pop	r28
    3fec:	df 91       	pop	r29
    3fee:	08 95       	ret

00003ff0 <xlist_init>:
**********************************************/
//Инициация
void xlist_init(
    xlist_t * xlist
)
{
    3ff0:	df 93       	push	r29
    3ff2:	cf 93       	push	r28
    3ff4:	00 d0       	rcall	.+0      	; 0x3ff6 <xlist_init+0x6>
    3ff6:	00 d0       	rcall	.+0      	; 0x3ff8 <xlist_init+0x8>
    3ff8:	cd b7       	in	r28, 0x3d	; 61
    3ffa:	de b7       	in	r29, 0x3e	; 62
    3ffc:	9c 83       	std	Y+4, r25	; 0x04
    3ffe:	8b 83       	std	Y+3, r24	; 0x03
    count_t i;
    //список пуст
    xlist->index = (index_t)0;
    4000:	eb 81       	ldd	r30, Y+3	; 0x03
    4002:	fc 81       	ldd	r31, Y+4	; 0x04
    4004:	10 8a       	std	Z+16, r1	; 0x10
    //обнуляем указатели
    for( i = 0; i < BITS_IN_INDEX_T; i++ )xlist->item[i] = (item_t *)0;
    4006:	1a 82       	std	Y+2, r1	; 0x02
    4008:	19 82       	std	Y+1, r1	; 0x01
    400a:	10 c0       	rjmp	.+32     	; 0x402c <xlist_init+0x3c>
    400c:	89 81       	ldd	r24, Y+1	; 0x01
    400e:	9a 81       	ldd	r25, Y+2	; 0x02
    4010:	2b 81       	ldd	r18, Y+3	; 0x03
    4012:	3c 81       	ldd	r19, Y+4	; 0x04
    4014:	88 0f       	add	r24, r24
    4016:	99 1f       	adc	r25, r25
    4018:	f9 01       	movw	r30, r18
    401a:	e8 0f       	add	r30, r24
    401c:	f9 1f       	adc	r31, r25
    401e:	11 82       	std	Z+1, r1	; 0x01
    4020:	10 82       	st	Z, r1
    4022:	89 81       	ldd	r24, Y+1	; 0x01
    4024:	9a 81       	ldd	r25, Y+2	; 0x02
    4026:	01 96       	adiw	r24, 0x01	; 1
    4028:	9a 83       	std	Y+2, r25	; 0x02
    402a:	89 83       	std	Y+1, r24	; 0x01
    402c:	89 81       	ldd	r24, Y+1	; 0x01
    402e:	9a 81       	ldd	r25, Y+2	; 0x02
    4030:	88 30       	cpi	r24, 0x08	; 8
    4032:	91 05       	cpc	r25, r1
    4034:	58 f3       	brcs	.-42     	; 0x400c <xlist_init+0x1c>
}
    4036:	0f 90       	pop	r0
    4038:	0f 90       	pop	r0
    403a:	0f 90       	pop	r0
    403c:	0f 90       	pop	r0
    403e:	cf 91       	pop	r28
    4040:	df 91       	pop	r29
    4042:	08 95       	ret

00004044 <xlist_head>:
//===========================================================================
//Поиск головы списка
item_t * xlist_head(xlist_t * xlist)
{
    4044:	df 93       	push	r29
    4046:	cf 93       	push	r28
    4048:	00 d0       	rcall	.+0      	; 0x404a <xlist_head+0x6>
    404a:	00 d0       	rcall	.+0      	; 0x404c <xlist_head+0x8>
    404c:	0f 92       	push	r0
    404e:	cd b7       	in	r28, 0x3d	; 61
    4050:	de b7       	in	r29, 0x3e	; 62
    4052:	9d 83       	std	Y+5, r25	; 0x05
    4054:	8c 83       	std	Y+4, r24	; 0x04
    item_t * ret_val = (item_t *)0;
    4056:	1b 82       	std	Y+3, r1	; 0x03
    4058:	1a 82       	std	Y+2, r1	; 0x02
    index_t index;
    index = xlist->index;
    405a:	ec 81       	ldd	r30, Y+4	; 0x04
    405c:	fd 81       	ldd	r31, Y+5	; 0x05
    405e:	80 89       	ldd	r24, Z+16	; 0x10
    4060:	89 83       	std	Y+1, r24	; 0x01

    if( index != (index_t)0 )
    4062:	89 81       	ldd	r24, Y+1	; 0x01
    4064:	88 23       	and	r24, r24
    4066:	81 f0       	breq	.+32     	; 0x4088 <xlist_head+0x44>
    {
        ret_val = xlist->item[ index_search( index ) ];
    4068:	89 81       	ldd	r24, Y+1	; 0x01
    406a:	0e 94 3e 0c 	call	0x187c	; 0x187c <index_search>
    406e:	88 2f       	mov	r24, r24
    4070:	90 e0       	ldi	r25, 0x00	; 0
    4072:	2c 81       	ldd	r18, Y+4	; 0x04
    4074:	3d 81       	ldd	r19, Y+5	; 0x05
    4076:	88 0f       	add	r24, r24
    4078:	99 1f       	adc	r25, r25
    407a:	f9 01       	movw	r30, r18
    407c:	e8 0f       	add	r30, r24
    407e:	f9 1f       	adc	r31, r25
    4080:	80 81       	ld	r24, Z
    4082:	91 81       	ldd	r25, Z+1	; 0x01
    4084:	9b 83       	std	Y+3, r25	; 0x03
    4086:	8a 83       	std	Y+2, r24	; 0x02
    }
    return ret_val;
    4088:	8a 81       	ldd	r24, Y+2	; 0x02
    408a:	9b 81       	ldd	r25, Y+3	; 0x03
}
    408c:	0f 90       	pop	r0
    408e:	0f 90       	pop	r0
    4090:	0f 90       	pop	r0
    4092:	0f 90       	pop	r0
    4094:	0f 90       	pop	r0
    4096:	cf 91       	pop	r28
    4098:	df 91       	pop	r29
    409a:	08 95       	ret

0000409c <xlist_switch>:

//===========================================================================
// переключение указателя в массиве на следующий элемент, пригодится в планировщике
void xlist_switch(xlist_t * xlist, prio_t prio)
{
    409c:	df 93       	push	r29
    409e:	cf 93       	push	r28
    40a0:	00 d0       	rcall	.+0      	; 0x40a2 <xlist_switch+0x6>
    40a2:	00 d0       	rcall	.+0      	; 0x40a4 <xlist_switch+0x8>
    40a4:	0f 92       	push	r0
    40a6:	cd b7       	in	r28, 0x3d	; 61
    40a8:	de b7       	in	r29, 0x3e	; 62
    40aa:	9c 83       	std	Y+4, r25	; 0x04
    40ac:	8b 83       	std	Y+3, r24	; 0x03
    40ae:	6d 83       	std	Y+5, r22	; 0x05
    item_t ** current;
    current = xlist->item + prio;
    40b0:	2b 81       	ldd	r18, Y+3	; 0x03
    40b2:	3c 81       	ldd	r19, Y+4	; 0x04
    40b4:	8d 81       	ldd	r24, Y+5	; 0x05
    40b6:	88 2f       	mov	r24, r24
    40b8:	90 e0       	ldi	r25, 0x00	; 0
    40ba:	88 0f       	add	r24, r24
    40bc:	99 1f       	adc	r25, r25
    40be:	82 0f       	add	r24, r18
    40c0:	93 1f       	adc	r25, r19
    40c2:	9a 83       	std	Y+2, r25	; 0x02
    40c4:	89 83       	std	Y+1, r24	; 0x01
    *current = (*current)->next;
    40c6:	e9 81       	ldd	r30, Y+1	; 0x01
    40c8:	fa 81       	ldd	r31, Y+2	; 0x02
    40ca:	01 90       	ld	r0, Z+
    40cc:	f0 81       	ld	r31, Z
    40ce:	e0 2d       	mov	r30, r0
    40d0:	80 81       	ld	r24, Z
    40d2:	91 81       	ldd	r25, Z+1	; 0x01
    40d4:	e9 81       	ldd	r30, Y+1	; 0x01
    40d6:	fa 81       	ldd	r31, Y+2	; 0x02
    40d8:	91 83       	std	Z+1, r25	; 0x01
    40da:	80 83       	st	Z, r24
    //*current = (item_t *)*(item_t **)*(item_t ***)current;
}
    40dc:	0f 90       	pop	r0
    40de:	0f 90       	pop	r0
    40e0:	0f 90       	pop	r0
    40e2:	0f 90       	pop	r0
    40e4:	0f 90       	pop	r0
    40e6:	cf 91       	pop	r28
    40e8:	df 91       	pop	r29
    40ea:	08 95       	ret

000040ec <main0>:

proc_t proc[6];
stack_t proc_stack[6][128];

void main0(void * t)
{
    40ec:	df 93       	push	r29
    40ee:	cf 93       	push	r28
    40f0:	00 d0       	rcall	.+0      	; 0x40f2 <main0+0x6>
    40f2:	cd b7       	in	r28, 0x3d	; 61
    40f4:	de b7       	in	r29, 0x3e	; 62
    40f6:	9a 83       	std	Y+2, r25	; 0x02
    40f8:	89 83       	std	Y+1, r24	; 0x01
    while(1)
    {
        wait_time(10);
    40fa:	8a e0       	ldi	r24, 0x0A	; 10
    40fc:	90 e0       	ldi	r25, 0x00	; 0
    40fe:	0e 94 d0 1f 	call	0x3fa0	; 0x3fa0 <wait_time>
    4102:	fb cf       	rjmp	.-10     	; 0x40fa <main0+0xe>

00004104 <main1>:
    }
}

void main1(void * t)
{
    4104:	df 93       	push	r29
    4106:	cf 93       	push	r28
    4108:	00 d0       	rcall	.+0      	; 0x410a <main1+0x6>
    410a:	cd b7       	in	r28, 0x3d	; 61
    410c:	de b7       	in	r29, 0x3e	; 62
    410e:	9a 83       	std	Y+2, r25	; 0x02
    4110:	89 83       	std	Y+1, r24	; 0x01
    while(1)
    {
        wait_time(10);
    4112:	8a e0       	ldi	r24, 0x0A	; 10
    4114:	90 e0       	ldi	r25, 0x00	; 0
    4116:	0e 94 d0 1f 	call	0x3fa0	; 0x3fa0 <wait_time>
    411a:	fb cf       	rjmp	.-10     	; 0x4112 <main1+0xe>

0000411c <main2>:
    }
}

void main2(void * t)
{
    411c:	df 93       	push	r29
    411e:	cf 93       	push	r28
    4120:	00 d0       	rcall	.+0      	; 0x4122 <main2+0x6>
    4122:	cd b7       	in	r28, 0x3d	; 61
    4124:	de b7       	in	r29, 0x3e	; 62
    4126:	9a 83       	std	Y+2, r25	; 0x02
    4128:	89 83       	std	Y+1, r24	; 0x01
    while(1)
    {
        wait_time(3);
    412a:	83 e0       	ldi	r24, 0x03	; 3
    412c:	90 e0       	ldi	r25, 0x00	; 0
    412e:	0e 94 d0 1f 	call	0x3fa0	; 0x3fa0 <wait_time>
        proc_reset_watchdog();
    4132:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <proc_reset_watchdog>
        proc_self_stop();
    4136:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <proc_self_stop>
    413a:	f7 cf       	rjmp	.-18     	; 0x412a <main2+0xe>

0000413c <main3>:
    }
}
void main3(void * t)
{
    413c:	df 93       	push	r29
    413e:	cf 93       	push	r28
    4140:	00 d0       	rcall	.+0      	; 0x4142 <main3+0x6>
    4142:	cd b7       	in	r28, 0x3d	; 61
    4144:	de b7       	in	r29, 0x3e	; 62
    4146:	9a 83       	std	Y+2, r25	; 0x02
    4148:	89 83       	std	Y+1, r24	; 0x01
    while(1)
    {
        wait_time(50);
    414a:	82 e3       	ldi	r24, 0x32	; 50
    414c:	90 e0       	ldi	r25, 0x00	; 0
    414e:	0e 94 d0 1f 	call	0x3fa0	; 0x3fa0 <wait_time>
        proc_run(&proc[2]);
    4152:	87 ee       	ldi	r24, 0xE7	; 231
    4154:	93 e0       	ldi	r25, 0x03	; 3
    4156:	0e 94 34 1d 	call	0x3a68	; 0x3a68 <proc_run>
    415a:	f7 cf       	rjmp	.-18     	; 0x414a <main3+0xe>

0000415c <main4>:
    }
}
void main4(void * t)
{
    415c:	df 93       	push	r29
    415e:	cf 93       	push	r28
    4160:	00 d0       	rcall	.+0      	; 0x4162 <main4+0x6>
    4162:	cd b7       	in	r28, 0x3d	; 61
    4164:	de b7       	in	r29, 0x3e	; 62
    4166:	9a 83       	std	Y+2, r25	; 0x02
    4168:	89 83       	std	Y+1, r24	; 0x01
    while(1)
    {
        wait_time(10);
    416a:	8a e0       	ldi	r24, 0x0A	; 10
    416c:	90 e0       	ldi	r25, 0x00	; 0
    416e:	0e 94 d0 1f 	call	0x3fa0	; 0x3fa0 <wait_time>
    4172:	fb cf       	rjmp	.-10     	; 0x416a <main4+0xe>

00004174 <main5>:
    4174:	df 93       	push	r29
    4176:	cf 93       	push	r28
    4178:	00 d0       	rcall	.+0      	; 0x417a <main5+0x6>
    417a:	cd b7       	in	r28, 0x3d	; 61
    417c:	de b7       	in	r29, 0x3e	; 62
    417e:	9a 83       	std	Y+2, r25	; 0x02
    4180:	89 83       	std	Y+1, r24	; 0x01
    4182:	82 e3       	ldi	r24, 0x32	; 50
    4184:	90 e0       	ldi	r25, 0x00	; 0
    4186:	0e 94 d0 1f 	call	0x3fa0	; 0x3fa0 <wait_time>
    418a:	0f 90       	pop	r0
    418c:	0f 90       	pop	r0
    418e:	cf 91       	pop	r28
    4190:	df 91       	pop	r29
    4192:	08 95       	ret

00004194 <idle_main>:
void main5(void * t)
{
    wait_time(50);
}
void idle_main(void * arg)
{
    4194:	df 93       	push	r29
    4196:	cf 93       	push	r28
    4198:	00 d0       	rcall	.+0      	; 0x419a <idle_main+0x6>
    419a:	cd b7       	in	r28, 0x3d	; 61
    419c:	de b7       	in	r29, 0x3e	; 62
    419e:	9a 83       	std	Y+2, r25	; 0x02
    41a0:	89 83       	std	Y+1, r24	; 0x01
    proc_run(&proc[0]);
    41a2:	87 e8       	ldi	r24, 0x87	; 135
    41a4:	93 e0       	ldi	r25, 0x03	; 3
    41a6:	0e 94 34 1d 	call	0x3a68	; 0x3a68 <proc_run>
    proc_run(&proc[1]);
    41aa:	87 eb       	ldi	r24, 0xB7	; 183
    41ac:	93 e0       	ldi	r25, 0x03	; 3
    41ae:	0e 94 34 1d 	call	0x3a68	; 0x3a68 <proc_run>
    proc_run(&proc[2]);
    41b2:	87 ee       	ldi	r24, 0xE7	; 231
    41b4:	93 e0       	ldi	r25, 0x03	; 3
    41b6:	0e 94 34 1d 	call	0x3a68	; 0x3a68 <proc_run>
    proc_run(&proc[3]);
    41ba:	87 e1       	ldi	r24, 0x17	; 23
    41bc:	94 e0       	ldi	r25, 0x04	; 4
    41be:	0e 94 34 1d 	call	0x3a68	; 0x3a68 <proc_run>
    proc_run(&proc[4]);
    41c2:	87 e4       	ldi	r24, 0x47	; 71
    41c4:	94 e0       	ldi	r25, 0x04	; 4
    41c6:	0e 94 34 1d 	call	0x3a68	; 0x3a68 <proc_run>
    proc_run(&proc[5]);
    41ca:	87 e7       	ldi	r24, 0x77	; 119
    41cc:	94 e0       	ldi	r25, 0x04	; 4
    41ce:	0e 94 34 1d 	call	0x3a68	; 0x3a68 <proc_run>

    wait_time(15);
    41d2:	8f e0       	ldi	r24, 0x0F	; 15
    41d4:	90 e0       	ldi	r25, 0x00	; 0
    41d6:	0e 94 d0 1f 	call	0x3fa0	; 0x3fa0 <wait_time>

    cli();
    41da:	f8 94       	cli
    proc[0].affinity = 0x3;
    41dc:	83 e0       	ldi	r24, 0x03	; 3
    41de:	80 93 a9 03 	sts	0x03A9, r24
    proc[1].affinity = 0x3;
    41e2:	83 e0       	ldi	r24, 0x03	; 3
    41e4:	80 93 d9 03 	sts	0x03D9, r24
    proc[2].affinity = 0x3;
    41e8:	83 e0       	ldi	r24, 0x03	; 3
    41ea:	80 93 09 04 	sts	0x0409, r24
    proc[3].affinity = 0x3;
    41ee:	83 e0       	ldi	r24, 0x03	; 3
    41f0:	80 93 39 04 	sts	0x0439, r24
    proc[4].affinity = 0x3;
    41f4:	83 e0       	ldi	r24, 0x03	; 3
    41f6:	80 93 69 04 	sts	0x0469, r24
    proc[5].affinity = 0x3;
    41fa:	83 e0       	ldi	r24, 0x03	; 3
    41fc:	80 93 99 04 	sts	0x0499, r24
    sei();
    4200:	78 94       	sei

    while(1){
        wait_time(10);
    4202:	8a e0       	ldi	r24, 0x0A	; 10
    4204:	90 e0       	ldi	r25, 0x00	; 0
    4206:	0e 94 d0 1f 	call	0x3fa0	; 0x3fa0 <wait_time>
        proc_lazy_global_load_balancer();
    420a:	0e 94 93 16 	call	0x2d26	; 0x2d26 <proc_lazy_global_load_balancer>
    420e:	f9 cf       	rjmp	.-14     	; 0x4202 <idle_main+0x6e>

00004210 <main>:

core_id_t i;
unsigned short j;
//*/
int main(void)
{
    4210:	8f 92       	push	r8
    4212:	af 92       	push	r10
    4214:	bf 92       	push	r11
    4216:	cf 92       	push	r12
    4218:	ef 92       	push	r14
    421a:	ff 92       	push	r15
    421c:	0f 93       	push	r16
    421e:	1f 93       	push	r17
    4220:	df 93       	push	r29
    4222:	cf 93       	push	r28
    4224:	cd b7       	in	r28, 0x3d	; 61
    4226:	de b7       	in	r29, 0x3e	; 62
    vsmp_init();
    4228:	0e 94 69 05 	call	0xad2	; 0xad2 <vsmp_init>

    TCCR2A = 0x02;//
    422c:	e0 eb       	ldi	r30, 0xB0	; 176
    422e:	f0 e0       	ldi	r31, 0x00	; 0
    4230:	82 e0       	ldi	r24, 0x02	; 2
    4232:	80 83       	st	Z, r24
    TCCR2B = 0x05;// prescaler=128
    4234:	e1 eb       	ldi	r30, 0xB1	; 177
    4236:	f0 e0       	ldi	r31, 0x00	; 0
    4238:	85 e0       	ldi	r24, 0x05	; 5
    423a:	80 83       	st	Z, r24
    OCR2A  = 124;
    423c:	e3 eb       	ldi	r30, 0xB3	; 179
    423e:	f0 e0       	ldi	r31, 0x00	; 0
    4240:	8c e7       	ldi	r24, 0x7C	; 124
    4242:	80 83       	st	Z, r24
    OCR2B  = 0x00;
    4244:	e4 eb       	ldi	r30, 0xB4	; 180
    4246:	f0 e0       	ldi	r31, 0x00	; 0
    4248:	10 82       	st	Z, r1
    TIMSK2 = 0x02;
    424a:	e0 e7       	ldi	r30, 0x70	; 112
    424c:	f0 e0       	ldi	r31, 0x00	; 0
    424e:	82 e0       	ldi	r24, 0x02	; 2
    4250:	80 83       	st	Z, r24
    TIFR2  = 0x00;
    4252:	e7 e3       	ldi	r30, 0x37	; 55
    4254:	f0 e0       	ldi	r31, 0x00	; 0
    4256:	10 82       	st	Z, r1

    DDRB = 0x3F;
    4258:	e4 e2       	ldi	r30, 0x24	; 36
    425a:	f0 e0       	ldi	r31, 0x00	; 0
    425c:	8f e3       	ldi	r24, 0x3F	; 63
    425e:	80 83       	st	Z, r24
    PORTB = 0x00;
    4260:	e5 e2       	ldi	r30, 0x25	; 37
    4262:	f0 e0       	ldi	r31, 0x00	; 0
    4264:	10 82       	st	Z, r1
    DDRC = 0x3F;
    4266:	e7 e2       	ldi	r30, 0x27	; 39
    4268:	f0 e0       	ldi	r31, 0x00	; 0
    426a:	8f e3       	ldi	r24, 0x3F	; 63
    426c:	80 83       	st	Z, r24
    PORTC = 0x00;
    426e:	e8 e2       	ldi	r30, 0x28	; 40
    4270:	f0 e0       	ldi	r31, 0x00	; 0
    4272:	10 82       	st	Z, r1
    DDRD = 0xFE;
    4274:	ea e2       	ldi	r30, 0x2A	; 42
    4276:	f0 e0       	ldi	r31, 0x00	; 0
    4278:	8e ef       	ldi	r24, 0xFE	; 254
    427a:	80 83       	st	Z, r24
    PORTD = 0x00;
    427c:	eb e2       	ldi	r30, 0x2B	; 43
    427e:	f0 e0       	ldi	r31, 0x00	; 0
    4280:	10 82       	st	Z, r1

    vsmp_run();
    4282:	0e 94 16 06 	call	0xc2c	; 0xc2c <vsmp_run>
        vsmp_vinterrupt_isr( i, &test_vector );
        vsmp_vinterrupt( i, &test_vector2 );
        for(j=0;j<1000;j++);
    }
    //*/
    init_bugurt();
    4286:	0e 94 ce 04 	call	0x99c	; 0x99c <init_bugurt>

    proc_init_isr(&proc[0], main0, 0, 0, 0, &proc_stack[0][127], 1, 2, 0, 0x1);
    428a:	87 ea       	ldi	r24, 0xA7	; 167
    428c:	94 e0       	ldi	r25, 0x04	; 4
    428e:	dc 01       	movw	r26, r24
    4290:	a1 58       	subi	r26, 0x81	; 129
    4292:	bf 4f       	sbci	r27, 0xFF	; 255
    4294:	0f 92       	push	r0
    4296:	ed b7       	in	r30, 0x3d	; 61
    4298:	fe b7       	in	r31, 0x3e	; 62
    429a:	31 96       	adiw	r30, 0x01	; 1
    429c:	27 e8       	ldi	r18, 0x87	; 135
    429e:	33 e0       	ldi	r19, 0x03	; 3
    42a0:	46 e7       	ldi	r20, 0x76	; 118
    42a2:	50 e2       	ldi	r21, 0x20	; 32
    42a4:	81 e0       	ldi	r24, 0x01	; 1
    42a6:	80 83       	st	Z, r24
    42a8:	c9 01       	movw	r24, r18
    42aa:	ba 01       	movw	r22, r20
    42ac:	40 e0       	ldi	r20, 0x00	; 0
    42ae:	50 e0       	ldi	r21, 0x00	; 0
    42b0:	20 e0       	ldi	r18, 0x00	; 0
    42b2:	30 e0       	ldi	r19, 0x00	; 0
    42b4:	00 e0       	ldi	r16, 0x00	; 0
    42b6:	10 e0       	ldi	r17, 0x00	; 0
    42b8:	7d 01       	movw	r14, r26
    42ba:	cc 24       	eor	r12, r12
    42bc:	c3 94       	inc	r12
    42be:	aa 24       	eor	r10, r10
    42c0:	bb 24       	eor	r11, r11
    42c2:	68 94       	set
    42c4:	a1 f8       	bld	r10, 1
    42c6:	88 24       	eor	r8, r8
    42c8:	0e 94 07 12 	call	0x240e	; 0x240e <proc_init_isr>
    42cc:	0f 90       	pop	r0
    proc_init_isr(&proc[1], main1, 0, 0, 0, &proc_stack[1][127], 2, 3, 0, 0x1);
    42ce:	87 ea       	ldi	r24, 0xA7	; 167
    42d0:	94 e0       	ldi	r25, 0x04	; 4
    42d2:	dc 01       	movw	r26, r24
    42d4:	a1 50       	subi	r26, 0x01	; 1
    42d6:	bf 4f       	sbci	r27, 0xFF	; 255
    42d8:	0f 92       	push	r0
    42da:	ed b7       	in	r30, 0x3d	; 61
    42dc:	fe b7       	in	r31, 0x3e	; 62
    42de:	31 96       	adiw	r30, 0x01	; 1
    42e0:	27 eb       	ldi	r18, 0xB7	; 183
    42e2:	33 e0       	ldi	r19, 0x03	; 3
    42e4:	42 e8       	ldi	r20, 0x82	; 130
    42e6:	50 e2       	ldi	r21, 0x20	; 32
    42e8:	81 e0       	ldi	r24, 0x01	; 1
    42ea:	80 83       	st	Z, r24
    42ec:	c9 01       	movw	r24, r18
    42ee:	ba 01       	movw	r22, r20
    42f0:	40 e0       	ldi	r20, 0x00	; 0
    42f2:	50 e0       	ldi	r21, 0x00	; 0
    42f4:	20 e0       	ldi	r18, 0x00	; 0
    42f6:	30 e0       	ldi	r19, 0x00	; 0
    42f8:	00 e0       	ldi	r16, 0x00	; 0
    42fa:	10 e0       	ldi	r17, 0x00	; 0
    42fc:	7d 01       	movw	r14, r26
    42fe:	cc 24       	eor	r12, r12
    4300:	68 94       	set
    4302:	c1 f8       	bld	r12, 1
    4304:	0f 2e       	mov	r0, r31
    4306:	f3 e0       	ldi	r31, 0x03	; 3
    4308:	af 2e       	mov	r10, r31
    430a:	bb 24       	eor	r11, r11
    430c:	f0 2d       	mov	r31, r0
    430e:	88 24       	eor	r8, r8
    4310:	0e 94 07 12 	call	0x240e	; 0x240e <proc_init_isr>
    4314:	0f 90       	pop	r0
    proc_init_isr(&proc[2], main2, 0, 0, 0, &proc_stack[2][127], 2, 4, 0, 0x1);
    4316:	87 ea       	ldi	r24, 0xA7	; 167
    4318:	94 e0       	ldi	r25, 0x04	; 4
    431a:	dc 01       	movw	r26, r24
    431c:	a1 58       	subi	r26, 0x81	; 129
    431e:	be 4f       	sbci	r27, 0xFE	; 254
    4320:	0f 92       	push	r0
    4322:	ed b7       	in	r30, 0x3d	; 61
    4324:	fe b7       	in	r31, 0x3e	; 62
    4326:	31 96       	adiw	r30, 0x01	; 1
    4328:	27 ee       	ldi	r18, 0xE7	; 231
    432a:	33 e0       	ldi	r19, 0x03	; 3
    432c:	4e e8       	ldi	r20, 0x8E	; 142
    432e:	50 e2       	ldi	r21, 0x20	; 32
    4330:	81 e0       	ldi	r24, 0x01	; 1
    4332:	80 83       	st	Z, r24
    4334:	c9 01       	movw	r24, r18
    4336:	ba 01       	movw	r22, r20
    4338:	40 e0       	ldi	r20, 0x00	; 0
    433a:	50 e0       	ldi	r21, 0x00	; 0
    433c:	20 e0       	ldi	r18, 0x00	; 0
    433e:	30 e0       	ldi	r19, 0x00	; 0
    4340:	00 e0       	ldi	r16, 0x00	; 0
    4342:	10 e0       	ldi	r17, 0x00	; 0
    4344:	7d 01       	movw	r14, r26
    4346:	cc 24       	eor	r12, r12
    4348:	68 94       	set
    434a:	c1 f8       	bld	r12, 1
    434c:	aa 24       	eor	r10, r10
    434e:	bb 24       	eor	r11, r11
    4350:	68 94       	set
    4352:	a2 f8       	bld	r10, 2
    4354:	88 24       	eor	r8, r8
    4356:	0e 94 07 12 	call	0x240e	; 0x240e <proc_init_isr>
    435a:	0f 90       	pop	r0
    proc_init_isr(&proc[3], main3, 0, 0, 0, &proc_stack[3][127], 1, 2, 0, 0x1);
    435c:	87 ea       	ldi	r24, 0xA7	; 167
    435e:	94 e0       	ldi	r25, 0x04	; 4
    4360:	dc 01       	movw	r26, r24
    4362:	a1 50       	subi	r26, 0x01	; 1
    4364:	be 4f       	sbci	r27, 0xFE	; 254
    4366:	0f 92       	push	r0
    4368:	ed b7       	in	r30, 0x3d	; 61
    436a:	fe b7       	in	r31, 0x3e	; 62
    436c:	31 96       	adiw	r30, 0x01	; 1
    436e:	27 e1       	ldi	r18, 0x17	; 23
    4370:	34 e0       	ldi	r19, 0x04	; 4
    4372:	4e e9       	ldi	r20, 0x9E	; 158
    4374:	50 e2       	ldi	r21, 0x20	; 32
    4376:	81 e0       	ldi	r24, 0x01	; 1
    4378:	80 83       	st	Z, r24
    437a:	c9 01       	movw	r24, r18
    437c:	ba 01       	movw	r22, r20
    437e:	40 e0       	ldi	r20, 0x00	; 0
    4380:	50 e0       	ldi	r21, 0x00	; 0
    4382:	20 e0       	ldi	r18, 0x00	; 0
    4384:	30 e0       	ldi	r19, 0x00	; 0
    4386:	00 e0       	ldi	r16, 0x00	; 0
    4388:	10 e0       	ldi	r17, 0x00	; 0
    438a:	7d 01       	movw	r14, r26
    438c:	cc 24       	eor	r12, r12
    438e:	c3 94       	inc	r12
    4390:	aa 24       	eor	r10, r10
    4392:	bb 24       	eor	r11, r11
    4394:	68 94       	set
    4396:	a1 f8       	bld	r10, 1
    4398:	88 24       	eor	r8, r8
    439a:	0e 94 07 12 	call	0x240e	; 0x240e <proc_init_isr>
    439e:	0f 90       	pop	r0
    proc_init_isr(&proc[4], main4, 0, 0, 0, &proc_stack[4][127], 2, 2, 0, 0x1);
    43a0:	87 ea       	ldi	r24, 0xA7	; 167
    43a2:	94 e0       	ldi	r25, 0x04	; 4
    43a4:	dc 01       	movw	r26, r24
    43a6:	a1 58       	subi	r26, 0x81	; 129
    43a8:	bd 4f       	sbci	r27, 0xFD	; 253
    43aa:	0f 92       	push	r0
    43ac:	ed b7       	in	r30, 0x3d	; 61
    43ae:	fe b7       	in	r31, 0x3e	; 62
    43b0:	31 96       	adiw	r30, 0x01	; 1
    43b2:	27 e4       	ldi	r18, 0x47	; 71
    43b4:	34 e0       	ldi	r19, 0x04	; 4
    43b6:	4e ea       	ldi	r20, 0xAE	; 174
    43b8:	50 e2       	ldi	r21, 0x20	; 32
    43ba:	81 e0       	ldi	r24, 0x01	; 1
    43bc:	80 83       	st	Z, r24
    43be:	c9 01       	movw	r24, r18
    43c0:	ba 01       	movw	r22, r20
    43c2:	40 e0       	ldi	r20, 0x00	; 0
    43c4:	50 e0       	ldi	r21, 0x00	; 0
    43c6:	20 e0       	ldi	r18, 0x00	; 0
    43c8:	30 e0       	ldi	r19, 0x00	; 0
    43ca:	00 e0       	ldi	r16, 0x00	; 0
    43cc:	10 e0       	ldi	r17, 0x00	; 0
    43ce:	7d 01       	movw	r14, r26
    43d0:	cc 24       	eor	r12, r12
    43d2:	68 94       	set
    43d4:	c1 f8       	bld	r12, 1
    43d6:	aa 24       	eor	r10, r10
    43d8:	bb 24       	eor	r11, r11
    43da:	68 94       	set
    43dc:	a1 f8       	bld	r10, 1
    43de:	88 24       	eor	r8, r8
    43e0:	0e 94 07 12 	call	0x240e	; 0x240e <proc_init_isr>
    43e4:	0f 90       	pop	r0
    proc_init_isr(&proc[5], main5, 0, 0, 0, &proc_stack[5][127], 2, 2, 0, 0x1);
    43e6:	87 ea       	ldi	r24, 0xA7	; 167
    43e8:	94 e0       	ldi	r25, 0x04	; 4
    43ea:	dc 01       	movw	r26, r24
    43ec:	a1 50       	subi	r26, 0x01	; 1
    43ee:	bd 4f       	sbci	r27, 0xFD	; 253
    43f0:	0f 92       	push	r0
    43f2:	ed b7       	in	r30, 0x3d	; 61
    43f4:	fe b7       	in	r31, 0x3e	; 62
    43f6:	31 96       	adiw	r30, 0x01	; 1
    43f8:	27 e7       	ldi	r18, 0x77	; 119
    43fa:	34 e0       	ldi	r19, 0x04	; 4
    43fc:	4a eb       	ldi	r20, 0xBA	; 186
    43fe:	50 e2       	ldi	r21, 0x20	; 32
    4400:	81 e0       	ldi	r24, 0x01	; 1
    4402:	80 83       	st	Z, r24
    4404:	c9 01       	movw	r24, r18
    4406:	ba 01       	movw	r22, r20
    4408:	40 e0       	ldi	r20, 0x00	; 0
    440a:	50 e0       	ldi	r21, 0x00	; 0
    440c:	20 e0       	ldi	r18, 0x00	; 0
    440e:	30 e0       	ldi	r19, 0x00	; 0
    4410:	00 e0       	ldi	r16, 0x00	; 0
    4412:	10 e0       	ldi	r17, 0x00	; 0
    4414:	7d 01       	movw	r14, r26
    4416:	cc 24       	eor	r12, r12
    4418:	68 94       	set
    441a:	c1 f8       	bld	r12, 1
    441c:	aa 24       	eor	r10, r10
    441e:	bb 24       	eor	r11, r11
    4420:	68 94       	set
    4422:	a1 f8       	bld	r10, 1
    4424:	88 24       	eor	r8, r8
    4426:	0e 94 07 12 	call	0x240e	; 0x240e <proc_init_isr>
    442a:	0f 90       	pop	r0

    start_bugurt();
    442c:	0e 94 13 05 	call	0xa26	; 0xa26 <start_bugurt>

    return 0;
    4430:	80 e0       	ldi	r24, 0x00	; 0
    4432:	90 e0       	ldi	r25, 0x00	; 0
}
    4434:	cf 91       	pop	r28
    4436:	df 91       	pop	r29
    4438:	1f 91       	pop	r17
    443a:	0f 91       	pop	r16
    443c:	ff 90       	pop	r15
    443e:	ef 90       	pop	r14
    4440:	cf 90       	pop	r12
    4442:	bf 90       	pop	r11
    4444:	af 90       	pop	r10
    4446:	8f 90       	pop	r8
    4448:	08 95       	ret

0000444a <_exit>:
    444a:	f8 94       	cli

0000444c <__stop_program>:
    444c:	ff cf       	rjmp	.-2      	; 0x444c <__stop_program>
