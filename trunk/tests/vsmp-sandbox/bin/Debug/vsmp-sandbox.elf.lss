
bin/Debug/vsmp-sandbox.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000b0a  00000b9e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b0a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000215  0080010c  0080010c  00000baa  2**0
                  ALLOC
  3 .stab         000023e8  00000000  00000000  00000bac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002913  00000000  00000000  00002f94  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 28 02 	jmp	0x450	; 0x450 <__vector_7>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e0       	ldi	r30, 0x0A	; 10
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	13 e0       	ldi	r17, 0x03	; 3
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 32       	cpi	r26, 0x21	; 33
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 16 05 	call	0xa2c	; 0xa2c <main>
  9e:	0c 94 83 05 	jmp	0xb06	; 0xb06 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <bugurt_save_context>:
  a6:	2f 92       	push	r2
  a8:	2f b6       	in	r2, 0x3f	; 63
  aa:	2f 92       	push	r2
  ac:	3f 92       	push	r3
  ae:	4f 92       	push	r4
  b0:	5f 92       	push	r5
  b2:	6f 92       	push	r6
  b4:	7f 92       	push	r7
  b6:	8f 92       	push	r8
  b8:	9f 92       	push	r9
  ba:	af 92       	push	r10
  bc:	bf 92       	push	r11
  be:	cf 92       	push	r12
  c0:	df 92       	push	r13
  c2:	ef 92       	push	r14
  c4:	ff 92       	push	r15
  c6:	0f 93       	push	r16
  c8:	1f 93       	push	r17
  ca:	2f 93       	push	r18
  cc:	3f 93       	push	r19
  ce:	4f 93       	push	r20
  d0:	5f 93       	push	r21
  d2:	6f 93       	push	r22
  d4:	7f 93       	push	r23
  d6:	8f 93       	push	r24
  d8:	9f 93       	push	r25
  da:	af 93       	push	r26
  dc:	bf 93       	push	r27
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
  e2:	ef 93       	push	r30
  e4:	ff 93       	push	r31
  e6:	ed b7       	in	r30, 0x3d	; 61
  e8:	fe b7       	in	r31, 0x3e	; 62
  ea:	21 a1       	ldd	r18, Z+33	; 0x21
  ec:	30 a1       	ldd	r19, Z+32	; 0x20
  ee:	01 a2       	std	Z+33, r0	; 0x21
  f0:	10 a2       	std	Z+32, r1	; 0x20
  f2:	11 24       	eor	r1, r1
  f4:	8d b7       	in	r24, 0x3d	; 61
  f6:	9e b7       	in	r25, 0x3e	; 62
  f8:	2f 93       	push	r18
  fa:	3f 93       	push	r19
  fc:	08 95       	ret

000000fe <bugurt_pop_context>:
  fe:	3f 91       	pop	r19
 100:	2f 91       	pop	r18
 102:	04 c0       	rjmp	.+8      	; 0x10c <_bugurt_pop_context>

00000104 <bugurt_restore_context>:
 104:	3f 91       	pop	r19
 106:	2f 91       	pop	r18
 108:	9e bf       	out	0x3e, r25	; 62
 10a:	8d bf       	out	0x3d, r24	; 61

0000010c <_bugurt_pop_context>:
 10c:	fe b7       	in	r31, 0x3e	; 62
 10e:	ed b7       	in	r30, 0x3d	; 61
 110:	10 a0       	ldd	r1, Z+32	; 0x20
 112:	01 a0       	ldd	r0, Z+33	; 0x21
 114:	30 a3       	std	Z+32, r19	; 0x20
 116:	21 a3       	std	Z+33, r18	; 0x21
 118:	ff 91       	pop	r31
 11a:	ef 91       	pop	r30
 11c:	df 91       	pop	r29
 11e:	cf 91       	pop	r28
 120:	bf 91       	pop	r27
 122:	af 91       	pop	r26
 124:	9f 91       	pop	r25
 126:	8f 91       	pop	r24
 128:	7f 91       	pop	r23
 12a:	6f 91       	pop	r22
 12c:	5f 91       	pop	r21
 12e:	4f 91       	pop	r20
 130:	3f 91       	pop	r19
 132:	2f 91       	pop	r18
 134:	1f 91       	pop	r17
 136:	0f 91       	pop	r16
 138:	ff 90       	pop	r15
 13a:	ef 90       	pop	r14
 13c:	df 90       	pop	r13
 13e:	cf 90       	pop	r12
 140:	bf 90       	pop	r11
 142:	af 90       	pop	r10
 144:	9f 90       	pop	r9
 146:	8f 90       	pop	r8
 148:	7f 90       	pop	r7
 14a:	6f 90       	pop	r6
 14c:	5f 90       	pop	r5
 14e:	4f 90       	pop	r4
 150:	3f 90       	pop	r3
 152:	2f 90       	pop	r2
 154:	2f be       	out	0x3f, r2	; 63
 156:	2f 90       	pop	r2
 158:	08 95       	ret

0000015a <bugurt_set_stack_pointer>:
 15a:	1f 90       	pop	r1
 15c:	0f 90       	pop	r0
 15e:	9e bf       	out	0x3e, r25	; 62
 160:	8d bf       	out	0x3d, r24	; 61
 162:	0f 92       	push	r0
 164:	1f 92       	push	r1
 166:	11 24       	eor	r1, r1
 168:	08 95       	ret

0000016a <bugurt_push_pointer>:
 16a:	1f 90       	pop	r1
 16c:	0f 90       	pop	r0
 16e:	8f 93       	push	r24
 170:	9f 93       	push	r25
 172:	0f 92       	push	r0
 174:	1f 92       	push	r1
 176:	11 24       	eor	r1, r1
 178:	08 95       	ret

0000017a <bugurt_reverse_byte_order>:
 17a:	08 2e       	mov	r0, r24
 17c:	89 2f       	mov	r24, r25
 17e:	90 2d       	mov	r25, r0
 180:	08 95       	ret

00000182 <vsmp_vm_init>:
void * vm_buf;



void vsmp_vm_init( vsmp_vm_t * vm, stack_t * sp )
{
 182:	df 93       	push	r29
 184:	cf 93       	push	r28
 186:	00 d0       	rcall	.+0      	; 0x188 <vsmp_vm_init+0x6>
 188:	00 d0       	rcall	.+0      	; 0x18a <vsmp_vm_init+0x8>
 18a:	cd b7       	in	r28, 0x3d	; 61
 18c:	de b7       	in	r29, 0x3e	; 62
 18e:	9a 83       	std	Y+2, r25	; 0x02
 190:	89 83       	std	Y+1, r24	; 0x01
 192:	7c 83       	std	Y+4, r23	; 0x04
 194:	6b 83       	std	Y+3, r22	; 0x03
    vm->int_fifo = (item_t *)0; // Нет прерываний;
 196:	e9 81       	ldd	r30, Y+1	; 0x01
 198:	fa 81       	ldd	r31, Y+2	; 0x02
 19a:	11 82       	std	Z+1, r1	; 0x01
 19c:	10 82       	st	Z, r1
    vm->int_enabled = 1;// прерывания разрешены
 19e:	e9 81       	ldd	r30, Y+1	; 0x01
 1a0:	fa 81       	ldd	r31, Y+2	; 0x02
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	82 83       	std	Z+2, r24	; 0x02
    vm->sp = (stack_t *)sp;
 1a6:	e9 81       	ldd	r30, Y+1	; 0x01
 1a8:	fa 81       	ldd	r31, Y+2	; 0x02
 1aa:	8b 81       	ldd	r24, Y+3	; 0x03
 1ac:	9c 81       	ldd	r25, Y+4	; 0x04
 1ae:	94 83       	std	Z+4, r25	; 0x04
 1b0:	83 83       	std	Z+3, r24	; 0x03
}
 1b2:	0f 90       	pop	r0
 1b4:	0f 90       	pop	r0
 1b6:	0f 90       	pop	r0
 1b8:	0f 90       	pop	r0
 1ba:	cf 91       	pop	r28
 1bc:	df 91       	pop	r29
 1be:	08 95       	ret

000001c0 <vsmp_init>:
void vsmp_init( void )
{
 1c0:	df 93       	push	r29
 1c2:	cf 93       	push	r28
 1c4:	00 d0       	rcall	.+0      	; 0x1c6 <vsmp_init+0x6>
 1c6:	cd b7       	in	r28, 0x3d	; 61
 1c8:	de b7       	in	r29, 0x3e	; 62
    cli();
 1ca:	f8 94       	cli
    vsmp_vm_init( &vm_state[0], (stack_t *)0 );
 1cc:	8d e0       	ldi	r24, 0x0D	; 13
 1ce:	91 e0       	ldi	r25, 0x01	; 1
 1d0:	60 e0       	ldi	r22, 0x00	; 0
 1d2:	70 e0       	ldi	r23, 0x00	; 0
 1d4:	0e 94 c1 00 	call	0x182	; 0x182 <vsmp_vm_init>
    for( current_vm = 1; current_vm < MAX_CORES; current_vm++ )
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	80 93 0c 01 	sts	0x010C, r24
 1de:	2b c0       	rjmp	.+86     	; 0x236 <vsmp_init+0x76>
    {
        stack_t * vm_sp;
        vm_sp = proc_stack_init( &vm_stack[current_vm - 1][VM_STACK_SIZE - 1], (code_t)vsmp_idle_main, (void *)0 );
 1e0:	80 91 0c 01 	lds	r24, 0x010C
 1e4:	88 2f       	mov	r24, r24
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	98 2f       	mov	r25, r24
 1ec:	88 27       	eor	r24, r24
 1ee:	81 50       	subi	r24, 0x01	; 1
 1f0:	9f 4f       	sbci	r25, 0xFF	; 255
 1f2:	82 5e       	subi	r24, 0xE2	; 226
 1f4:	9e 4f       	sbci	r25, 0xFE	; 254
 1f6:	2e e2       	ldi	r18, 0x2E	; 46
 1f8:	31 e0       	ldi	r19, 0x01	; 1
 1fa:	b9 01       	movw	r22, r18
 1fc:	40 e0       	ldi	r20, 0x00	; 0
 1fe:	50 e0       	ldi	r21, 0x00	; 0
 200:	0e 94 24 03 	call	0x648	; 0x648 <proc_stack_init>
 204:	9a 83       	std	Y+2, r25	; 0x02
 206:	89 83       	std	Y+1, r24	; 0x01
        vsmp_vm_init( &vm_state[current_vm], (stack_t *)vm_sp );
 208:	80 91 0c 01 	lds	r24, 0x010C
 20c:	28 2f       	mov	r18, r24
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	c9 01       	movw	r24, r18
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	82 0f       	add	r24, r18
 21c:	93 1f       	adc	r25, r19
 21e:	83 5f       	subi	r24, 0xF3	; 243
 220:	9e 4f       	sbci	r25, 0xFE	; 254
 222:	29 81       	ldd	r18, Y+1	; 0x01
 224:	3a 81       	ldd	r19, Y+2	; 0x02
 226:	b9 01       	movw	r22, r18
 228:	0e 94 c1 00 	call	0x182	; 0x182 <vsmp_vm_init>
}
void vsmp_init( void )
{
    cli();
    vsmp_vm_init( &vm_state[0], (stack_t *)0 );
    for( current_vm = 1; current_vm < MAX_CORES; current_vm++ )
 22c:	80 91 0c 01 	lds	r24, 0x010C
 230:	8f 5f       	subi	r24, 0xFF	; 255
 232:	80 93 0c 01 	sts	0x010C, r24
 236:	80 91 0c 01 	lds	r24, 0x010C
 23a:	83 30       	cpi	r24, 0x03	; 3
 23c:	88 f2       	brcs	.-94     	; 0x1e0 <vsmp_init+0x20>
    {
        stack_t * vm_sp;
        vm_sp = proc_stack_init( &vm_stack[current_vm - 1][VM_STACK_SIZE - 1], (code_t)vsmp_idle_main, (void *)0 );
        vsmp_vm_init( &vm_state[current_vm], (stack_t *)vm_sp );
    }
    current_vm = 0;
 23e:	10 92 0c 01 	sts	0x010C, r1
}
 242:	0f 90       	pop	r0
 244:	0f 90       	pop	r0
 246:	cf 91       	pop	r28
 248:	df 91       	pop	r29
 24a:	08 95       	ret

0000024c <vsmp_run>:

void vsmp_run( void )
{
 24c:	df 93       	push	r29
 24e:	cf 93       	push	r28
 250:	cd b7       	in	r28, 0x3d	; 61
 252:	de b7       	in	r29, 0x3e	; 62
    sei();
 254:	78 94       	sei
}
 256:	cf 91       	pop	r28
 258:	df 91       	pop	r29
 25a:	08 95       	ret

0000025c <vsmp_idle_main>:
void vsmp_idle_main( void * arg )
{
 25c:	df 93       	push	r29
 25e:	cf 93       	push	r28
 260:	00 d0       	rcall	.+0      	; 0x262 <vsmp_idle_main+0x6>
 262:	cd b7       	in	r28, 0x3d	; 61
 264:	de b7       	in	r29, 0x3e	; 62
 266:	9a 83       	std	Y+2, r25	; 0x02
 268:	89 83       	std	Y+1, r24	; 0x01
 26a:	ff cf       	rjmp	.-2      	; 0x26a <vsmp_idle_main+0xe>

0000026c <vsmp_do_interrupt>:
    while(1);
}

bool_t vsmp_do_interrupt(void)
{
 26c:	df 93       	push	r29
 26e:	cf 93       	push	r28
 270:	0f 92       	push	r0
 272:	cd b7       	in	r28, 0x3d	; 61
 274:	de b7       	in	r29, 0x3e	; 62
    // if current vm is interruptible and there are some interrupts in fifo,
    if( (vm_state[current_vm].int_enabled) && (vm_state[current_vm].int_fifo) )
 276:	80 91 0c 01 	lds	r24, 0x010C
 27a:	28 2f       	mov	r18, r24
 27c:	30 e0       	ldi	r19, 0x00	; 0
 27e:	c9 01       	movw	r24, r18
 280:	88 0f       	add	r24, r24
 282:	99 1f       	adc	r25, r25
 284:	88 0f       	add	r24, r24
 286:	99 1f       	adc	r25, r25
 288:	82 0f       	add	r24, r18
 28a:	93 1f       	adc	r25, r19
 28c:	fc 01       	movw	r30, r24
 28e:	e1 5f       	subi	r30, 0xF1	; 241
 290:	fe 4f       	sbci	r31, 0xFE	; 254
 292:	80 81       	ld	r24, Z
 294:	88 23       	and	r24, r24
 296:	09 f4       	brne	.+2      	; 0x29a <vsmp_do_interrupt+0x2e>
 298:	71 c0       	rjmp	.+226    	; 0x37c <vsmp_do_interrupt+0x110>
 29a:	80 91 0c 01 	lds	r24, 0x010C
 29e:	28 2f       	mov	r18, r24
 2a0:	30 e0       	ldi	r19, 0x00	; 0
 2a2:	c9 01       	movw	r24, r18
 2a4:	88 0f       	add	r24, r24
 2a6:	99 1f       	adc	r25, r25
 2a8:	88 0f       	add	r24, r24
 2aa:	99 1f       	adc	r25, r25
 2ac:	82 0f       	add	r24, r18
 2ae:	93 1f       	adc	r25, r19
 2b0:	fc 01       	movw	r30, r24
 2b2:	e3 5f       	subi	r30, 0xF3	; 243
 2b4:	fe 4f       	sbci	r31, 0xFE	; 254
 2b6:	80 81       	ld	r24, Z
 2b8:	91 81       	ldd	r25, Z+1	; 0x01
 2ba:	00 97       	sbiw	r24, 0x00	; 0
 2bc:	09 f4       	brne	.+2      	; 0x2c0 <vsmp_do_interrupt+0x54>
 2be:	5e c0       	rjmp	.+188    	; 0x37c <vsmp_do_interrupt+0x110>
    {
        // cut head interrupt,
        vm_buf = (void *)vm_state[current_vm].int_fifo;
 2c0:	80 91 0c 01 	lds	r24, 0x010C
 2c4:	28 2f       	mov	r18, r24
 2c6:	30 e0       	ldi	r19, 0x00	; 0
 2c8:	c9 01       	movw	r24, r18
 2ca:	88 0f       	add	r24, r24
 2cc:	99 1f       	adc	r25, r25
 2ce:	88 0f       	add	r24, r24
 2d0:	99 1f       	adc	r25, r25
 2d2:	82 0f       	add	r24, r18
 2d4:	93 1f       	adc	r25, r19
 2d6:	fc 01       	movw	r30, r24
 2d8:	e3 5f       	subi	r30, 0xF3	; 243
 2da:	fe 4f       	sbci	r31, 0xFE	; 254
 2dc:	80 81       	ld	r24, Z
 2de:	91 81       	ldd	r25, Z+1	; 0x01
 2e0:	90 93 1d 01 	sts	0x011D, r25
 2e4:	80 93 1c 01 	sts	0x011C, r24
        if( vm_buf == (void *)((item_t *)vm_buf)->next )
 2e8:	80 91 1c 01 	lds	r24, 0x011C
 2ec:	90 91 1d 01 	lds	r25, 0x011D
 2f0:	fc 01       	movw	r30, r24
 2f2:	20 81       	ld	r18, Z
 2f4:	31 81       	ldd	r19, Z+1	; 0x01
 2f6:	80 91 1c 01 	lds	r24, 0x011C
 2fa:	90 91 1d 01 	lds	r25, 0x011D
 2fe:	28 17       	cp	r18, r24
 300:	39 07       	cpc	r19, r25
 302:	89 f4       	brne	.+34     	; 0x326 <vsmp_do_interrupt+0xba>
        {
            /* only one interrupt in fifo */
            vm_state[current_vm].int_fifo = (item_t *)0;
 304:	80 91 0c 01 	lds	r24, 0x010C
 308:	28 2f       	mov	r18, r24
 30a:	30 e0       	ldi	r19, 0x00	; 0
 30c:	c9 01       	movw	r24, r18
 30e:	88 0f       	add	r24, r24
 310:	99 1f       	adc	r25, r25
 312:	88 0f       	add	r24, r24
 314:	99 1f       	adc	r25, r25
 316:	82 0f       	add	r24, r18
 318:	93 1f       	adc	r25, r19
 31a:	fc 01       	movw	r30, r24
 31c:	e3 5f       	subi	r30, 0xF3	; 243
 31e:	fe 4f       	sbci	r31, 0xFE	; 254
 320:	11 82       	std	Z+1, r1	; 0x01
 322:	10 82       	st	Z, r1
 324:	1d c0       	rjmp	.+58     	; 0x360 <vsmp_do_interrupt+0xf4>
        }
        else
        {
            /* many interrupts in fifo */
            vm_state[current_vm].int_fifo = (void *)((item_t *)vm_buf)->next;
 326:	80 91 0c 01 	lds	r24, 0x010C
 32a:	28 2f       	mov	r18, r24
 32c:	30 e0       	ldi	r19, 0x00	; 0
 32e:	80 91 1c 01 	lds	r24, 0x011C
 332:	90 91 1d 01 	lds	r25, 0x011D
 336:	fc 01       	movw	r30, r24
 338:	40 81       	ld	r20, Z
 33a:	51 81       	ldd	r21, Z+1	; 0x01
 33c:	c9 01       	movw	r24, r18
 33e:	88 0f       	add	r24, r24
 340:	99 1f       	adc	r25, r25
 342:	88 0f       	add	r24, r24
 344:	99 1f       	adc	r25, r25
 346:	82 0f       	add	r24, r18
 348:	93 1f       	adc	r25, r19
 34a:	fc 01       	movw	r30, r24
 34c:	e3 5f       	subi	r30, 0xF3	; 243
 34e:	fe 4f       	sbci	r31, 0xFE	; 254
 350:	51 83       	std	Z+1, r21	; 0x01
 352:	40 83       	st	Z, r20
            item_cut( (item_t *)vm_buf );
 354:	80 91 1c 01 	lds	r24, 0x011C
 358:	90 91 1d 01 	lds	r25, 0x011D
 35c:	0e 94 c2 04 	call	0x984	; 0x984 <item_cut>
        }
        // write its isr pointer to vm_buf,
        vm_buf = (void *)(((vinterrupt_t *)vm_buf)->isr);
 360:	80 91 1c 01 	lds	r24, 0x011C
 364:	90 91 1d 01 	lds	r25, 0x011D
 368:	fc 01       	movw	r30, r24
 36a:	84 81       	ldd	r24, Z+4	; 0x04
 36c:	95 81       	ldd	r25, Z+5	; 0x05
 36e:	90 93 1d 01 	sts	0x011D, r25
 372:	80 93 1c 01 	sts	0x011C, r24
        // and return 1;
        return (bool_t)1;
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	89 83       	std	Y+1, r24	; 0x01
 37a:	01 c0       	rjmp	.+2      	; 0x37e <vsmp_do_interrupt+0x112>
    }
    // else return 0.
    return (bool_t)0;
 37c:	19 82       	std	Y+1, r1	; 0x01
 37e:	89 81       	ldd	r24, Y+1	; 0x01
}
 380:	0f 90       	pop	r0
 382:	cf 91       	pop	r28
 384:	df 91       	pop	r29
 386:	08 95       	ret

00000388 <_vinterrupt_wrapper>:
                       Virtual interrupts wrapper functions.
    Local variable is used to call virtual ISR, so wrapper must have two parts.
*/
// Nested part, uses local variables, so compiler generated prologue and epilogue are needed.
static void _vinterrupt_wrapper(void)
{
 388:	df 93       	push	r29
 38a:	cf 93       	push	r28
 38c:	00 d0       	rcall	.+0      	; 0x38e <_vinterrupt_wrapper+0x6>
 38e:	cd b7       	in	r28, 0x3d	; 61
 390:	de b7       	in	r29, 0x3e	; 62
    void (*isr)(void);
    vm_state[current_vm].int_enabled = (bool_t)0; // Virtual interrupt nesting is not alowed by default.
 392:	80 91 0c 01 	lds	r24, 0x010C
 396:	28 2f       	mov	r18, r24
 398:	30 e0       	ldi	r19, 0x00	; 0
 39a:	c9 01       	movw	r24, r18
 39c:	88 0f       	add	r24, r24
 39e:	99 1f       	adc	r25, r25
 3a0:	88 0f       	add	r24, r24
 3a2:	99 1f       	adc	r25, r25
 3a4:	82 0f       	add	r24, r18
 3a6:	93 1f       	adc	r25, r19
 3a8:	fc 01       	movw	r30, r24
 3aa:	e1 5f       	subi	r30, 0xF1	; 241
 3ac:	fe 4f       	sbci	r31, 0xFE	; 254
 3ae:	10 82       	st	Z, r1
    isr = (void (*)(void))vm_buf;
 3b0:	80 91 1c 01 	lds	r24, 0x011C
 3b4:	90 91 1d 01 	lds	r25, 0x011D
 3b8:	9a 83       	std	Y+2, r25	; 0x02
 3ba:	89 83       	std	Y+1, r24	; 0x01
    // After vm-buf read we can reenable real interrupts!
    sei();
 3bc:	78 94       	sei
    isr();
 3be:	e9 81       	ldd	r30, Y+1	; 0x01
 3c0:	fa 81       	ldd	r31, Y+2	; 0x02
 3c2:	09 95       	icall
}
 3c4:	0f 90       	pop	r0
 3c6:	0f 90       	pop	r0
 3c8:	cf 91       	pop	r28
 3ca:	df 91       	pop	r29
 3cc:	08 95       	ret

000003ce <vinterrupt_wrapper>:
// Nesting part, no prologue and hand made epilogue.
__attribute__ (( naked )) void vinterrupt_wrapper(void)
{
    _vinterrupt_wrapper();
 3ce:	0e 94 c4 01 	call	0x388	; 0x388 <_vinterrupt_wrapper>
    cli();
 3d2:	f8 94       	cli
    // Virtual interrupts are enabled after interrupt processing.
    vm_state[current_vm].int_enabled = (bool_t)1;
 3d4:	80 91 0c 01 	lds	r24, 0x010C
 3d8:	28 2f       	mov	r18, r24
 3da:	30 e0       	ldi	r19, 0x00	; 0
 3dc:	c9 01       	movw	r24, r18
 3de:	88 0f       	add	r24, r24
 3e0:	99 1f       	adc	r25, r25
 3e2:	88 0f       	add	r24, r24
 3e4:	99 1f       	adc	r25, r25
 3e6:	82 0f       	add	r24, r18
 3e8:	93 1f       	adc	r25, r19
 3ea:	fc 01       	movw	r30, r24
 3ec:	e1 5f       	subi	r30, 0xF1	; 241
 3ee:	fe 4f       	sbci	r31, 0xFE	; 254
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	80 83       	st	Z, r24
    vm_buf = (void *)bugurt_save_context();
    vm_state[current_vm].sp = (stack_t *)vm_buf;
}
__MACRO_FUNCTION__( _vsmp_interrupt_epilogue )
{
    if( vsmp_do_interrupt() ) goto vinterrupt_return;
 3f4:	0e 94 36 01 	call	0x26c	; 0x26c <vsmp_do_interrupt>
 3f8:	88 23       	and	r24, r24
 3fa:	99 f4       	brne	.+38     	; 0x422 <vinterrupt_wrapper+0x54>

    bugurt_restore_context( vm_state[current_vm].sp ); // Will return to current vm operation!
 3fc:	80 91 0c 01 	lds	r24, 0x010C
 400:	28 2f       	mov	r18, r24
 402:	30 e0       	ldi	r19, 0x00	; 0
 404:	c9 01       	movw	r24, r18
 406:	88 0f       	add	r24, r24
 408:	99 1f       	adc	r25, r25
 40a:	88 0f       	add	r24, r24
 40c:	99 1f       	adc	r25, r25
 40e:	82 0f       	add	r24, r18
 410:	93 1f       	adc	r25, r19
 412:	fc 01       	movw	r30, r24
 414:	e0 5f       	subi	r30, 0xF0	; 240
 416:	fe 4f       	sbci	r31, 0xFE	; 254
 418:	80 81       	ld	r24, Z
 41a:	91 81       	ldd	r25, Z+1	; 0x01
 41c:	0e 94 82 00 	call	0x104	; 0x104 <bugurt_restore_context>
    __asm__ __volatile__("reti"::);
 420:	18 95       	reti

vinterrupt_return:
    bugurt_set_stack_pointer( vm_state[current_vm].sp );
 422:	80 91 0c 01 	lds	r24, 0x010C
 426:	28 2f       	mov	r18, r24
 428:	30 e0       	ldi	r19, 0x00	; 0
 42a:	c9 01       	movw	r24, r18
 42c:	88 0f       	add	r24, r24
 42e:	99 1f       	adc	r25, r25
 430:	88 0f       	add	r24, r24
 432:	99 1f       	adc	r25, r25
 434:	82 0f       	add	r24, r18
 436:	93 1f       	adc	r25, r19
 438:	fc 01       	movw	r30, r24
 43a:	e0 5f       	subi	r30, 0xF0	; 240
 43c:	fe 4f       	sbci	r31, 0xFE	; 254
 43e:	80 81       	ld	r24, Z
 440:	91 81       	ldd	r25, Z+1	; 0x01
 442:	0e 94 ad 00 	call	0x15a	; 0x15a <bugurt_set_stack_pointer>
    bugurt_push_pointer( (void *)vinterrupt_wrapper ); // Will return to vinterrupt_wrapper() entry point!
 446:	87 ee       	ldi	r24, 0xE7	; 231
 448:	91 e0       	ldi	r25, 0x01	; 1
 44a:	0e 94 b5 00 	call	0x16a	; 0x16a <bugurt_push_pointer>
    __asm__ __volatile__("ret"::);
 44e:	08 95       	ret

00000450 <__vector_7>:
}

/* Virtual interrupt prologue and epilogue inline functions (I can,t debug macros !) */
__MACRO_FUNCTION__( _vsmp_interrupt_prologue )
{
    vm_buf = (void *)bugurt_save_context();
 450:	0e 94 53 00 	call	0xa6	; 0xa6 <bugurt_save_context>
 454:	90 93 1d 01 	sts	0x011D, r25
 458:	80 93 1c 01 	sts	0x011C, r24
    vm_state[current_vm].sp = (stack_t *)vm_buf;
 45c:	80 91 0c 01 	lds	r24, 0x010C
 460:	28 2f       	mov	r18, r24
 462:	30 e0       	ldi	r19, 0x00	; 0
 464:	80 91 1c 01 	lds	r24, 0x011C
 468:	90 91 1d 01 	lds	r25, 0x011D
 46c:	ac 01       	movw	r20, r24
 46e:	c9 01       	movw	r24, r18
 470:	88 0f       	add	r24, r24
 472:	99 1f       	adc	r25, r25
 474:	88 0f       	add	r24, r24
 476:	99 1f       	adc	r25, r25
 478:	82 0f       	add	r24, r18
 47a:	93 1f       	adc	r25, r19
 47c:	fc 01       	movw	r30, r24
 47e:	e0 5f       	subi	r30, 0xF0	; 240
 480:	fe 4f       	sbci	r31, 0xFE	; 254
 482:	51 83       	std	Z+1, r21	; 0x01
 484:	40 83       	st	Z, r20
__attribute__ (( signal, naked )) void SYSTEM_TIMER_ISR(void);
void SYSTEM_TIMER_ISR(void)
{
    _vsmp_interrupt_prologue();

    current_vm++;
 486:	80 91 0c 01 	lds	r24, 0x010C
 48a:	8f 5f       	subi	r24, 0xFF	; 255
 48c:	80 93 0c 01 	sts	0x010C, r24
    if(current_vm >= MAX_CORES)current_vm = (core_id_t)0;
 490:	80 91 0c 01 	lds	r24, 0x010C
 494:	83 30       	cpi	r24, 0x03	; 3
 496:	10 f0       	brcs	.+4      	; 0x49c <__vector_7+0x4c>
 498:	10 92 0c 01 	sts	0x010C, r1
    vm_buf = (void *)bugurt_save_context();
    vm_state[current_vm].sp = (stack_t *)vm_buf;
}
__MACRO_FUNCTION__( _vsmp_interrupt_epilogue )
{
    if( vsmp_do_interrupt() ) goto vinterrupt_return;
 49c:	0e 94 36 01 	call	0x26c	; 0x26c <vsmp_do_interrupt>
 4a0:	88 23       	and	r24, r24
 4a2:	99 f4       	brne	.+38     	; 0x4ca <__vector_7+0x7a>

    bugurt_restore_context( vm_state[current_vm].sp ); // Will return to current vm operation!
 4a4:	80 91 0c 01 	lds	r24, 0x010C
 4a8:	28 2f       	mov	r18, r24
 4aa:	30 e0       	ldi	r19, 0x00	; 0
 4ac:	c9 01       	movw	r24, r18
 4ae:	88 0f       	add	r24, r24
 4b0:	99 1f       	adc	r25, r25
 4b2:	88 0f       	add	r24, r24
 4b4:	99 1f       	adc	r25, r25
 4b6:	82 0f       	add	r24, r18
 4b8:	93 1f       	adc	r25, r19
 4ba:	fc 01       	movw	r30, r24
 4bc:	e0 5f       	subi	r30, 0xF0	; 240
 4be:	fe 4f       	sbci	r31, 0xFE	; 254
 4c0:	80 81       	ld	r24, Z
 4c2:	91 81       	ldd	r25, Z+1	; 0x01
 4c4:	0e 94 82 00 	call	0x104	; 0x104 <bugurt_restore_context>
    __asm__ __volatile__("reti"::);
 4c8:	18 95       	reti

vinterrupt_return:
    bugurt_set_stack_pointer( vm_state[current_vm].sp );
 4ca:	80 91 0c 01 	lds	r24, 0x010C
 4ce:	28 2f       	mov	r18, r24
 4d0:	30 e0       	ldi	r19, 0x00	; 0
 4d2:	c9 01       	movw	r24, r18
 4d4:	88 0f       	add	r24, r24
 4d6:	99 1f       	adc	r25, r25
 4d8:	88 0f       	add	r24, r24
 4da:	99 1f       	adc	r25, r25
 4dc:	82 0f       	add	r24, r18
 4de:	93 1f       	adc	r25, r19
 4e0:	fc 01       	movw	r30, r24
 4e2:	e0 5f       	subi	r30, 0xF0	; 240
 4e4:	fe 4f       	sbci	r31, 0xFE	; 254
 4e6:	80 81       	ld	r24, Z
 4e8:	91 81       	ldd	r25, Z+1	; 0x01
 4ea:	0e 94 ad 00 	call	0x15a	; 0x15a <bugurt_set_stack_pointer>
    bugurt_push_pointer( (void *)vinterrupt_wrapper ); // Will return to vinterrupt_wrapper() entry point!
 4ee:	87 ee       	ldi	r24, 0xE7	; 231
 4f0:	91 e0       	ldi	r25, 0x01	; 1
 4f2:	0e 94 b5 00 	call	0x16a	; 0x16a <bugurt_push_pointer>
    __asm__ __volatile__("ret"::);
 4f6:	08 95       	ret

000004f8 <_vsmp_vinterrupt>:
}

/* Virtual interrupt prologue and epilogue inline functions (I can,t debug macros !) */
__MACRO_FUNCTION__( _vsmp_interrupt_prologue )
{
    vm_buf = (void *)bugurt_save_context();
 4f8:	0e 94 53 00 	call	0xa6	; 0xa6 <bugurt_save_context>
 4fc:	90 93 1d 01 	sts	0x011D, r25
 500:	80 93 1c 01 	sts	0x011C, r24
    vm_state[current_vm].sp = (stack_t *)vm_buf;
 504:	80 91 0c 01 	lds	r24, 0x010C
 508:	28 2f       	mov	r18, r24
 50a:	30 e0       	ldi	r19, 0x00	; 0
 50c:	80 91 1c 01 	lds	r24, 0x011C
 510:	90 91 1d 01 	lds	r25, 0x011D
 514:	ac 01       	movw	r20, r24
 516:	c9 01       	movw	r24, r18
 518:	88 0f       	add	r24, r24
 51a:	99 1f       	adc	r25, r25
 51c:	88 0f       	add	r24, r24
 51e:	99 1f       	adc	r25, r25
 520:	82 0f       	add	r24, r18
 522:	93 1f       	adc	r25, r19
 524:	fc 01       	movw	r30, r24
 526:	e0 5f       	subi	r30, 0xF0	; 240
 528:	fe 4f       	sbci	r31, 0xFE	; 254
 52a:	51 83       	std	Z+1, r21	; 0x01
 52c:	40 83       	st	Z, r20
}
__MACRO_FUNCTION__( _vsmp_interrupt_epilogue )
{
    if( vsmp_do_interrupt() ) goto vinterrupt_return;
 52e:	0e 94 36 01 	call	0x26c	; 0x26c <vsmp_do_interrupt>
 532:	88 23       	and	r24, r24
 534:	99 f4       	brne	.+38     	; 0x55c <_vsmp_vinterrupt+0x64>

    bugurt_restore_context( vm_state[current_vm].sp ); // Will return to current vm operation!
 536:	80 91 0c 01 	lds	r24, 0x010C
 53a:	28 2f       	mov	r18, r24
 53c:	30 e0       	ldi	r19, 0x00	; 0
 53e:	c9 01       	movw	r24, r18
 540:	88 0f       	add	r24, r24
 542:	99 1f       	adc	r25, r25
 544:	88 0f       	add	r24, r24
 546:	99 1f       	adc	r25, r25
 548:	82 0f       	add	r24, r18
 54a:	93 1f       	adc	r25, r19
 54c:	fc 01       	movw	r30, r24
 54e:	e0 5f       	subi	r30, 0xF0	; 240
 550:	fe 4f       	sbci	r31, 0xFE	; 254
 552:	80 81       	ld	r24, Z
 554:	91 81       	ldd	r25, Z+1	; 0x01
 556:	0e 94 82 00 	call	0x104	; 0x104 <bugurt_restore_context>
    __asm__ __volatile__("reti"::);
 55a:	18 95       	reti

vinterrupt_return:
    bugurt_set_stack_pointer( vm_state[current_vm].sp );
 55c:	80 91 0c 01 	lds	r24, 0x010C
 560:	28 2f       	mov	r18, r24
 562:	30 e0       	ldi	r19, 0x00	; 0
 564:	c9 01       	movw	r24, r18
 566:	88 0f       	add	r24, r24
 568:	99 1f       	adc	r25, r25
 56a:	88 0f       	add	r24, r24
 56c:	99 1f       	adc	r25, r25
 56e:	82 0f       	add	r24, r18
 570:	93 1f       	adc	r25, r19
 572:	fc 01       	movw	r30, r24
 574:	e0 5f       	subi	r30, 0xF0	; 240
 576:	fe 4f       	sbci	r31, 0xFE	; 254
 578:	80 81       	ld	r24, Z
 57a:	91 81       	ldd	r25, Z+1	; 0x01
 57c:	0e 94 ad 00 	call	0x15a	; 0x15a <bugurt_set_stack_pointer>
    bugurt_push_pointer( (void *)vinterrupt_wrapper ); // Will return to vinterrupt_wrapper() entry point!
 580:	87 ee       	ldi	r24, 0xE7	; 231
 582:	91 e0       	ldi	r25, 0x01	; 1
 584:	0e 94 b5 00 	call	0x16a	; 0x16a <bugurt_push_pointer>
    __asm__ __volatile__("ret"::);
 588:	08 95       	ret

0000058a <vsmp_vinterrupt_isr>:
    _vsmp_interrupt_epilogue();
}

// Software virtual interrupt ( For ISR usage only ! Do NOT call from "main"!)
void vsmp_vinterrupt_isr( core_id_t vm, vinterrupt_t * vector )
{
 58a:	df 93       	push	r29
 58c:	cf 93       	push	r28
 58e:	00 d0       	rcall	.+0      	; 0x590 <vsmp_vinterrupt_isr+0x6>
 590:	0f 92       	push	r0
 592:	cd b7       	in	r28, 0x3d	; 61
 594:	de b7       	in	r29, 0x3e	; 62
 596:	89 83       	std	Y+1, r24	; 0x01
 598:	7b 83       	std	Y+3, r23	; 0x03
 59a:	6a 83       	std	Y+2, r22	; 0x02
    if( vm_state[vm].int_fifo )
 59c:	89 81       	ldd	r24, Y+1	; 0x01
 59e:	28 2f       	mov	r18, r24
 5a0:	30 e0       	ldi	r19, 0x00	; 0
 5a2:	c9 01       	movw	r24, r18
 5a4:	88 0f       	add	r24, r24
 5a6:	99 1f       	adc	r25, r25
 5a8:	88 0f       	add	r24, r24
 5aa:	99 1f       	adc	r25, r25
 5ac:	82 0f       	add	r24, r18
 5ae:	93 1f       	adc	r25, r19
 5b0:	fc 01       	movw	r30, r24
 5b2:	e3 5f       	subi	r30, 0xF3	; 243
 5b4:	fe 4f       	sbci	r31, 0xFE	; 254
 5b6:	80 81       	ld	r24, Z
 5b8:	91 81       	ldd	r25, Z+1	; 0x01
 5ba:	00 97       	sbiw	r24, 0x00	; 0
 5bc:	b1 f0       	breq	.+44     	; 0x5ea <vsmp_vinterrupt_isr+0x60>
    {
        item_insert( (item_t *)vector, (item_t *)vm_state[vm].int_fifo );
 5be:	4a 81       	ldd	r20, Y+2	; 0x02
 5c0:	5b 81       	ldd	r21, Y+3	; 0x03
 5c2:	89 81       	ldd	r24, Y+1	; 0x01
 5c4:	28 2f       	mov	r18, r24
 5c6:	30 e0       	ldi	r19, 0x00	; 0
 5c8:	c9 01       	movw	r24, r18
 5ca:	88 0f       	add	r24, r24
 5cc:	99 1f       	adc	r25, r25
 5ce:	88 0f       	add	r24, r24
 5d0:	99 1f       	adc	r25, r25
 5d2:	82 0f       	add	r24, r18
 5d4:	93 1f       	adc	r25, r19
 5d6:	fc 01       	movw	r30, r24
 5d8:	e3 5f       	subi	r30, 0xF3	; 243
 5da:	fe 4f       	sbci	r31, 0xFE	; 254
 5dc:	20 81       	ld	r18, Z
 5de:	31 81       	ldd	r19, Z+1	; 0x01
 5e0:	ca 01       	movw	r24, r20
 5e2:	b9 01       	movw	r22, r18
 5e4:	0e 94 90 04 	call	0x920	; 0x920 <item_insert>
 5e8:	11 c0       	rjmp	.+34     	; 0x60c <vsmp_vinterrupt_isr+0x82>
    }
    else
    {
        vm_state[vm].int_fifo = (item_t *)vector;
 5ea:	89 81       	ldd	r24, Y+1	; 0x01
 5ec:	28 2f       	mov	r18, r24
 5ee:	30 e0       	ldi	r19, 0x00	; 0
 5f0:	4a 81       	ldd	r20, Y+2	; 0x02
 5f2:	5b 81       	ldd	r21, Y+3	; 0x03
 5f4:	c9 01       	movw	r24, r18
 5f6:	88 0f       	add	r24, r24
 5f8:	99 1f       	adc	r25, r25
 5fa:	88 0f       	add	r24, r24
 5fc:	99 1f       	adc	r25, r25
 5fe:	82 0f       	add	r24, r18
 600:	93 1f       	adc	r25, r19
 602:	fc 01       	movw	r30, r24
 604:	e3 5f       	subi	r30, 0xF3	; 243
 606:	fe 4f       	sbci	r31, 0xFE	; 254
 608:	51 83       	std	Z+1, r21	; 0x01
 60a:	40 83       	st	Z, r20
    }
}
 60c:	0f 90       	pop	r0
 60e:	0f 90       	pop	r0
 610:	0f 90       	pop	r0
 612:	cf 91       	pop	r28
 614:	df 91       	pop	r29
 616:	08 95       	ret

00000618 <vsmp_vinterrupt>:
// Software virtual interrupt ( Use in "main" only ! Do NOT call from ISR!)
void vsmp_vinterrupt( core_id_t vm, vinterrupt_t * vector )
{
 618:	df 93       	push	r29
 61a:	cf 93       	push	r28
 61c:	00 d0       	rcall	.+0      	; 0x61e <vsmp_vinterrupt+0x6>
 61e:	0f 92       	push	r0
 620:	cd b7       	in	r28, 0x3d	; 61
 622:	de b7       	in	r29, 0x3e	; 62
 624:	89 83       	std	Y+1, r24	; 0x01
 626:	7b 83       	std	Y+3, r23	; 0x03
 628:	6a 83       	std	Y+2, r22	; 0x02
    cli();
 62a:	f8 94       	cli
    vsmp_vinterrupt_isr( vm, vector );
 62c:	2a 81       	ldd	r18, Y+2	; 0x02
 62e:	3b 81       	ldd	r19, Y+3	; 0x03
 630:	89 81       	ldd	r24, Y+1	; 0x01
 632:	b9 01       	movw	r22, r18
 634:	0e 94 c5 02 	call	0x58a	; 0x58a <vsmp_vinterrupt_isr>
    _vsmp_vinterrupt();
 638:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <_vsmp_vinterrupt>
}
 63c:	0f 90       	pop	r0
 63e:	0f 90       	pop	r0
 640:	0f 90       	pop	r0
 642:	cf 91       	pop	r28
 644:	df 91       	pop	r29
 646:	08 95       	ret

00000648 <proc_stack_init>:
#include"../../../include/bugurt.h"
stack_t * proc_stack_init(stack_t * sstart, code_t code, void * arg)
{
 648:	df 93       	push	r29
 64a:	cf 93       	push	r28
 64c:	cd b7       	in	r28, 0x3d	; 61
 64e:	de b7       	in	r29, 0x3e	; 62
 650:	2a 97       	sbiw	r28, 0x0a	; 10
 652:	0f b6       	in	r0, 0x3f	; 63
 654:	f8 94       	cli
 656:	de bf       	out	0x3e, r29	; 62
 658:	0f be       	out	0x3f, r0	; 63
 65a:	cd bf       	out	0x3d, r28	; 61
 65c:	9e 83       	std	Y+6, r25	; 0x06
 65e:	8d 83       	std	Y+5, r24	; 0x05
 660:	78 87       	std	Y+8, r23	; 0x08
 662:	6f 83       	std	Y+7, r22	; 0x07
 664:	5a 87       	std	Y+10, r21	; 0x0a
 666:	49 87       	std	Y+9, r20	; 0x09
    stack_t * tos = (stack_t *)sstart;
 668:	8d 81       	ldd	r24, Y+5	; 0x05
 66a:	9e 81       	ldd	r25, Y+6	; 0x06
 66c:	9c 83       	std	Y+4, r25	; 0x04
 66e:	8b 83       	std	Y+3, r24	; 0x03
    // return address
    unsigned short tmp = (unsigned short)code;
 670:	8f 81       	ldd	r24, Y+7	; 0x07
 672:	98 85       	ldd	r25, Y+8	; 0x08
 674:	9a 83       	std	Y+2, r25	; 0x02
 676:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (stack_t)(tmp&(unsigned short)0x00ff);
 678:	89 81       	ldd	r24, Y+1	; 0x01
 67a:	eb 81       	ldd	r30, Y+3	; 0x03
 67c:	fc 81       	ldd	r31, Y+4	; 0x04
 67e:	80 83       	st	Z, r24
 680:	8b 81       	ldd	r24, Y+3	; 0x03
 682:	9c 81       	ldd	r25, Y+4	; 0x04
 684:	01 97       	sbiw	r24, 0x01	; 1
 686:	9c 83       	std	Y+4, r25	; 0x04
 688:	8b 83       	std	Y+3, r24	; 0x03
    tmp>>=8;
 68a:	89 81       	ldd	r24, Y+1	; 0x01
 68c:	9a 81       	ldd	r25, Y+2	; 0x02
 68e:	89 2f       	mov	r24, r25
 690:	99 27       	eor	r25, r25
 692:	9a 83       	std	Y+2, r25	; 0x02
 694:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (stack_t)(tmp&(unsigned short)0x00ff);
 696:	89 81       	ldd	r24, Y+1	; 0x01
 698:	eb 81       	ldd	r30, Y+3	; 0x03
 69a:	fc 81       	ldd	r31, Y+4	; 0x04
 69c:	80 83       	st	Z, r24
 69e:	8b 81       	ldd	r24, Y+3	; 0x03
 6a0:	9c 81       	ldd	r25, Y+4	; 0x04
 6a2:	01 97       	sbiw	r24, 0x01	; 1
 6a4:	9c 83       	std	Y+4, r25	; 0x04
 6a6:	8b 83       	std	Y+3, r24	; 0x03

    // s
    *tos-- = 0x00;
 6a8:	eb 81       	ldd	r30, Y+3	; 0x03
 6aa:	fc 81       	ldd	r31, Y+4	; 0x04
 6ac:	10 82       	st	Z, r1
 6ae:	8b 81       	ldd	r24, Y+3	; 0x03
 6b0:	9c 81       	ldd	r25, Y+4	; 0x04
 6b2:	01 97       	sbiw	r24, 0x01	; 1
 6b4:	9c 83       	std	Y+4, r25	; 0x04
 6b6:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x00;// r1 must B 0
 6b8:	eb 81       	ldd	r30, Y+3	; 0x03
 6ba:	fc 81       	ldd	r31, Y+4	; 0x04
 6bc:	10 82       	st	Z, r1
 6be:	8b 81       	ldd	r24, Y+3	; 0x03
 6c0:	9c 81       	ldd	r25, Y+4	; 0x04
 6c2:	01 97       	sbiw	r24, 0x01	; 1
 6c4:	9c 83       	std	Y+4, r25	; 0x04
 6c6:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x02;// r2
 6c8:	eb 81       	ldd	r30, Y+3	; 0x03
 6ca:	fc 81       	ldd	r31, Y+4	; 0x04
 6cc:	82 e0       	ldi	r24, 0x02	; 2
 6ce:	80 83       	st	Z, r24
 6d0:	8b 81       	ldd	r24, Y+3	; 0x03
 6d2:	9c 81       	ldd	r25, Y+4	; 0x04
 6d4:	01 97       	sbiw	r24, 0x01	; 1
 6d6:	9c 83       	std	Y+4, r25	; 0x04
 6d8:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x80;// SREG: enable interrupts
 6da:	eb 81       	ldd	r30, Y+3	; 0x03
 6dc:	fc 81       	ldd	r31, Y+4	; 0x04
 6de:	80 e8       	ldi	r24, 0x80	; 128
 6e0:	80 83       	st	Z, r24
 6e2:	8b 81       	ldd	r24, Y+3	; 0x03
 6e4:	9c 81       	ldd	r25, Y+4	; 0x04
 6e6:	01 97       	sbiw	r24, 0x01	; 1
 6e8:	9c 83       	std	Y+4, r25	; 0x04
 6ea:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x03;
 6ec:	eb 81       	ldd	r30, Y+3	; 0x03
 6ee:	fc 81       	ldd	r31, Y+4	; 0x04
 6f0:	83 e0       	ldi	r24, 0x03	; 3
 6f2:	80 83       	st	Z, r24
 6f4:	8b 81       	ldd	r24, Y+3	; 0x03
 6f6:	9c 81       	ldd	r25, Y+4	; 0x04
 6f8:	01 97       	sbiw	r24, 0x01	; 1
 6fa:	9c 83       	std	Y+4, r25	; 0x04
 6fc:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x04;
 6fe:	eb 81       	ldd	r30, Y+3	; 0x03
 700:	fc 81       	ldd	r31, Y+4	; 0x04
 702:	84 e0       	ldi	r24, 0x04	; 4
 704:	80 83       	st	Z, r24
 706:	8b 81       	ldd	r24, Y+3	; 0x03
 708:	9c 81       	ldd	r25, Y+4	; 0x04
 70a:	01 97       	sbiw	r24, 0x01	; 1
 70c:	9c 83       	std	Y+4, r25	; 0x04
 70e:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x05;
 710:	eb 81       	ldd	r30, Y+3	; 0x03
 712:	fc 81       	ldd	r31, Y+4	; 0x04
 714:	85 e0       	ldi	r24, 0x05	; 5
 716:	80 83       	st	Z, r24
 718:	8b 81       	ldd	r24, Y+3	; 0x03
 71a:	9c 81       	ldd	r25, Y+4	; 0x04
 71c:	01 97       	sbiw	r24, 0x01	; 1
 71e:	9c 83       	std	Y+4, r25	; 0x04
 720:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x06;
 722:	eb 81       	ldd	r30, Y+3	; 0x03
 724:	fc 81       	ldd	r31, Y+4	; 0x04
 726:	86 e0       	ldi	r24, 0x06	; 6
 728:	80 83       	st	Z, r24
 72a:	8b 81       	ldd	r24, Y+3	; 0x03
 72c:	9c 81       	ldd	r25, Y+4	; 0x04
 72e:	01 97       	sbiw	r24, 0x01	; 1
 730:	9c 83       	std	Y+4, r25	; 0x04
 732:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x07;
 734:	eb 81       	ldd	r30, Y+3	; 0x03
 736:	fc 81       	ldd	r31, Y+4	; 0x04
 738:	87 e0       	ldi	r24, 0x07	; 7
 73a:	80 83       	st	Z, r24
 73c:	8b 81       	ldd	r24, Y+3	; 0x03
 73e:	9c 81       	ldd	r25, Y+4	; 0x04
 740:	01 97       	sbiw	r24, 0x01	; 1
 742:	9c 83       	std	Y+4, r25	; 0x04
 744:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x08;
 746:	eb 81       	ldd	r30, Y+3	; 0x03
 748:	fc 81       	ldd	r31, Y+4	; 0x04
 74a:	88 e0       	ldi	r24, 0x08	; 8
 74c:	80 83       	st	Z, r24
 74e:	8b 81       	ldd	r24, Y+3	; 0x03
 750:	9c 81       	ldd	r25, Y+4	; 0x04
 752:	01 97       	sbiw	r24, 0x01	; 1
 754:	9c 83       	std	Y+4, r25	; 0x04
 756:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x09;
 758:	eb 81       	ldd	r30, Y+3	; 0x03
 75a:	fc 81       	ldd	r31, Y+4	; 0x04
 75c:	89 e0       	ldi	r24, 0x09	; 9
 75e:	80 83       	st	Z, r24
 760:	8b 81       	ldd	r24, Y+3	; 0x03
 762:	9c 81       	ldd	r25, Y+4	; 0x04
 764:	01 97       	sbiw	r24, 0x01	; 1
 766:	9c 83       	std	Y+4, r25	; 0x04
 768:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x10;
 76a:	eb 81       	ldd	r30, Y+3	; 0x03
 76c:	fc 81       	ldd	r31, Y+4	; 0x04
 76e:	80 e1       	ldi	r24, 0x10	; 16
 770:	80 83       	st	Z, r24
 772:	8b 81       	ldd	r24, Y+3	; 0x03
 774:	9c 81       	ldd	r25, Y+4	; 0x04
 776:	01 97       	sbiw	r24, 0x01	; 1
 778:	9c 83       	std	Y+4, r25	; 0x04
 77a:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x11;
 77c:	eb 81       	ldd	r30, Y+3	; 0x03
 77e:	fc 81       	ldd	r31, Y+4	; 0x04
 780:	81 e1       	ldi	r24, 0x11	; 17
 782:	80 83       	st	Z, r24
 784:	8b 81       	ldd	r24, Y+3	; 0x03
 786:	9c 81       	ldd	r25, Y+4	; 0x04
 788:	01 97       	sbiw	r24, 0x01	; 1
 78a:	9c 83       	std	Y+4, r25	; 0x04
 78c:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x12;
 78e:	eb 81       	ldd	r30, Y+3	; 0x03
 790:	fc 81       	ldd	r31, Y+4	; 0x04
 792:	82 e1       	ldi	r24, 0x12	; 18
 794:	80 83       	st	Z, r24
 796:	8b 81       	ldd	r24, Y+3	; 0x03
 798:	9c 81       	ldd	r25, Y+4	; 0x04
 79a:	01 97       	sbiw	r24, 0x01	; 1
 79c:	9c 83       	std	Y+4, r25	; 0x04
 79e:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x13;
 7a0:	eb 81       	ldd	r30, Y+3	; 0x03
 7a2:	fc 81       	ldd	r31, Y+4	; 0x04
 7a4:	83 e1       	ldi	r24, 0x13	; 19
 7a6:	80 83       	st	Z, r24
 7a8:	8b 81       	ldd	r24, Y+3	; 0x03
 7aa:	9c 81       	ldd	r25, Y+4	; 0x04
 7ac:	01 97       	sbiw	r24, 0x01	; 1
 7ae:	9c 83       	std	Y+4, r25	; 0x04
 7b0:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x14;
 7b2:	eb 81       	ldd	r30, Y+3	; 0x03
 7b4:	fc 81       	ldd	r31, Y+4	; 0x04
 7b6:	84 e1       	ldi	r24, 0x14	; 20
 7b8:	80 83       	st	Z, r24
 7ba:	8b 81       	ldd	r24, Y+3	; 0x03
 7bc:	9c 81       	ldd	r25, Y+4	; 0x04
 7be:	01 97       	sbiw	r24, 0x01	; 1
 7c0:	9c 83       	std	Y+4, r25	; 0x04
 7c2:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x15;
 7c4:	eb 81       	ldd	r30, Y+3	; 0x03
 7c6:	fc 81       	ldd	r31, Y+4	; 0x04
 7c8:	85 e1       	ldi	r24, 0x15	; 21
 7ca:	80 83       	st	Z, r24
 7cc:	8b 81       	ldd	r24, Y+3	; 0x03
 7ce:	9c 81       	ldd	r25, Y+4	; 0x04
 7d0:	01 97       	sbiw	r24, 0x01	; 1
 7d2:	9c 83       	std	Y+4, r25	; 0x04
 7d4:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x16;
 7d6:	eb 81       	ldd	r30, Y+3	; 0x03
 7d8:	fc 81       	ldd	r31, Y+4	; 0x04
 7da:	86 e1       	ldi	r24, 0x16	; 22
 7dc:	80 83       	st	Z, r24
 7de:	8b 81       	ldd	r24, Y+3	; 0x03
 7e0:	9c 81       	ldd	r25, Y+4	; 0x04
 7e2:	01 97       	sbiw	r24, 0x01	; 1
 7e4:	9c 83       	std	Y+4, r25	; 0x04
 7e6:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x17;
 7e8:	eb 81       	ldd	r30, Y+3	; 0x03
 7ea:	fc 81       	ldd	r31, Y+4	; 0x04
 7ec:	87 e1       	ldi	r24, 0x17	; 23
 7ee:	80 83       	st	Z, r24
 7f0:	8b 81       	ldd	r24, Y+3	; 0x03
 7f2:	9c 81       	ldd	r25, Y+4	; 0x04
 7f4:	01 97       	sbiw	r24, 0x01	; 1
 7f6:	9c 83       	std	Y+4, r25	; 0x04
 7f8:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x18;
 7fa:	eb 81       	ldd	r30, Y+3	; 0x03
 7fc:	fc 81       	ldd	r31, Y+4	; 0x04
 7fe:	88 e1       	ldi	r24, 0x18	; 24
 800:	80 83       	st	Z, r24
 802:	8b 81       	ldd	r24, Y+3	; 0x03
 804:	9c 81       	ldd	r25, Y+4	; 0x04
 806:	01 97       	sbiw	r24, 0x01	; 1
 808:	9c 83       	std	Y+4, r25	; 0x04
 80a:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x19;
 80c:	eb 81       	ldd	r30, Y+3	; 0x03
 80e:	fc 81       	ldd	r31, Y+4	; 0x04
 810:	89 e1       	ldi	r24, 0x19	; 25
 812:	80 83       	st	Z, r24
 814:	8b 81       	ldd	r24, Y+3	; 0x03
 816:	9c 81       	ldd	r25, Y+4	; 0x04
 818:	01 97       	sbiw	r24, 0x01	; 1
 81a:	9c 83       	std	Y+4, r25	; 0x04
 81c:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x20;
 81e:	eb 81       	ldd	r30, Y+3	; 0x03
 820:	fc 81       	ldd	r31, Y+4	; 0x04
 822:	80 e2       	ldi	r24, 0x20	; 32
 824:	80 83       	st	Z, r24
 826:	8b 81       	ldd	r24, Y+3	; 0x03
 828:	9c 81       	ldd	r25, Y+4	; 0x04
 82a:	01 97       	sbiw	r24, 0x01	; 1
 82c:	9c 83       	std	Y+4, r25	; 0x04
 82e:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x21;
 830:	eb 81       	ldd	r30, Y+3	; 0x03
 832:	fc 81       	ldd	r31, Y+4	; 0x04
 834:	81 e2       	ldi	r24, 0x21	; 33
 836:	80 83       	st	Z, r24
 838:	8b 81       	ldd	r24, Y+3	; 0x03
 83a:	9c 81       	ldd	r25, Y+4	; 0x04
 83c:	01 97       	sbiw	r24, 0x01	; 1
 83e:	9c 83       	std	Y+4, r25	; 0x04
 840:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x22;
 842:	eb 81       	ldd	r30, Y+3	; 0x03
 844:	fc 81       	ldd	r31, Y+4	; 0x04
 846:	82 e2       	ldi	r24, 0x22	; 34
 848:	80 83       	st	Z, r24
 84a:	8b 81       	ldd	r24, Y+3	; 0x03
 84c:	9c 81       	ldd	r25, Y+4	; 0x04
 84e:	01 97       	sbiw	r24, 0x01	; 1
 850:	9c 83       	std	Y+4, r25	; 0x04
 852:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x23;
 854:	eb 81       	ldd	r30, Y+3	; 0x03
 856:	fc 81       	ldd	r31, Y+4	; 0x04
 858:	83 e2       	ldi	r24, 0x23	; 35
 85a:	80 83       	st	Z, r24
 85c:	8b 81       	ldd	r24, Y+3	; 0x03
 85e:	9c 81       	ldd	r25, Y+4	; 0x04
 860:	01 97       	sbiw	r24, 0x01	; 1
 862:	9c 83       	std	Y+4, r25	; 0x04
 864:	8b 83       	std	Y+3, r24	; 0x03

    tmp = (unsigned short)arg;
 866:	89 85       	ldd	r24, Y+9	; 0x09
 868:	9a 85       	ldd	r25, Y+10	; 0x0a
 86a:	9a 83       	std	Y+2, r25	; 0x02
 86c:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (stack_t)(tmp&(unsigned short)0x00ff); // r24 LSByte of arg
 86e:	89 81       	ldd	r24, Y+1	; 0x01
 870:	eb 81       	ldd	r30, Y+3	; 0x03
 872:	fc 81       	ldd	r31, Y+4	; 0x04
 874:	80 83       	st	Z, r24
 876:	8b 81       	ldd	r24, Y+3	; 0x03
 878:	9c 81       	ldd	r25, Y+4	; 0x04
 87a:	01 97       	sbiw	r24, 0x01	; 1
 87c:	9c 83       	std	Y+4, r25	; 0x04
 87e:	8b 83       	std	Y+3, r24	; 0x03
    tmp>>=8;
 880:	89 81       	ldd	r24, Y+1	; 0x01
 882:	9a 81       	ldd	r25, Y+2	; 0x02
 884:	89 2f       	mov	r24, r25
 886:	99 27       	eor	r25, r25
 888:	9a 83       	std	Y+2, r25	; 0x02
 88a:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (stack_t)(tmp&(unsigned short)0x00ff); // r25 MSByte of arg
 88c:	89 81       	ldd	r24, Y+1	; 0x01
 88e:	eb 81       	ldd	r30, Y+3	; 0x03
 890:	fc 81       	ldd	r31, Y+4	; 0x04
 892:	80 83       	st	Z, r24
 894:	8b 81       	ldd	r24, Y+3	; 0x03
 896:	9c 81       	ldd	r25, Y+4	; 0x04
 898:	01 97       	sbiw	r24, 0x01	; 1
 89a:	9c 83       	std	Y+4, r25	; 0x04
 89c:	8b 83       	std	Y+3, r24	; 0x03

    *tos-- = 0x26;
 89e:	eb 81       	ldd	r30, Y+3	; 0x03
 8a0:	fc 81       	ldd	r31, Y+4	; 0x04
 8a2:	86 e2       	ldi	r24, 0x26	; 38
 8a4:	80 83       	st	Z, r24
 8a6:	8b 81       	ldd	r24, Y+3	; 0x03
 8a8:	9c 81       	ldd	r25, Y+4	; 0x04
 8aa:	01 97       	sbiw	r24, 0x01	; 1
 8ac:	9c 83       	std	Y+4, r25	; 0x04
 8ae:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x27;
 8b0:	eb 81       	ldd	r30, Y+3	; 0x03
 8b2:	fc 81       	ldd	r31, Y+4	; 0x04
 8b4:	87 e2       	ldi	r24, 0x27	; 39
 8b6:	80 83       	st	Z, r24
 8b8:	8b 81       	ldd	r24, Y+3	; 0x03
 8ba:	9c 81       	ldd	r25, Y+4	; 0x04
 8bc:	01 97       	sbiw	r24, 0x01	; 1
 8be:	9c 83       	std	Y+4, r25	; 0x04
 8c0:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x28;
 8c2:	eb 81       	ldd	r30, Y+3	; 0x03
 8c4:	fc 81       	ldd	r31, Y+4	; 0x04
 8c6:	88 e2       	ldi	r24, 0x28	; 40
 8c8:	80 83       	st	Z, r24
 8ca:	8b 81       	ldd	r24, Y+3	; 0x03
 8cc:	9c 81       	ldd	r25, Y+4	; 0x04
 8ce:	01 97       	sbiw	r24, 0x01	; 1
 8d0:	9c 83       	std	Y+4, r25	; 0x04
 8d2:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x29;
 8d4:	eb 81       	ldd	r30, Y+3	; 0x03
 8d6:	fc 81       	ldd	r31, Y+4	; 0x04
 8d8:	89 e2       	ldi	r24, 0x29	; 41
 8da:	80 83       	st	Z, r24
 8dc:	8b 81       	ldd	r24, Y+3	; 0x03
 8de:	9c 81       	ldd	r25, Y+4	; 0x04
 8e0:	01 97       	sbiw	r24, 0x01	; 1
 8e2:	9c 83       	std	Y+4, r25	; 0x04
 8e4:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x30;
 8e6:	eb 81       	ldd	r30, Y+3	; 0x03
 8e8:	fc 81       	ldd	r31, Y+4	; 0x04
 8ea:	80 e3       	ldi	r24, 0x30	; 48
 8ec:	80 83       	st	Z, r24
 8ee:	8b 81       	ldd	r24, Y+3	; 0x03
 8f0:	9c 81       	ldd	r25, Y+4	; 0x04
 8f2:	01 97       	sbiw	r24, 0x01	; 1
 8f4:	9c 83       	std	Y+4, r25	; 0x04
 8f6:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x31;
 8f8:	eb 81       	ldd	r30, Y+3	; 0x03
 8fa:	fc 81       	ldd	r31, Y+4	; 0x04
 8fc:	81 e3       	ldi	r24, 0x31	; 49
 8fe:	80 83       	st	Z, r24
 900:	8b 81       	ldd	r24, Y+3	; 0x03
 902:	9c 81       	ldd	r25, Y+4	; 0x04
 904:	01 97       	sbiw	r24, 0x01	; 1
 906:	9c 83       	std	Y+4, r25	; 0x04
 908:	8b 83       	std	Y+3, r24	; 0x03
#ifdef RAMPZ
    *tos-- = 0xff;
#endif
    return tos;
 90a:	8b 81       	ldd	r24, Y+3	; 0x03
 90c:	9c 81       	ldd	r25, Y+4	; 0x04
}
 90e:	2a 96       	adiw	r28, 0x0a	; 10
 910:	0f b6       	in	r0, 0x3f	; 63
 912:	f8 94       	cli
 914:	de bf       	out	0x3e, r29	; 62
 916:	0f be       	out	0x3f, r0	; 63
 918:	cd bf       	out	0x3d, r28	; 61
 91a:	cf 91       	pop	r28
 91c:	df 91       	pop	r29
 91e:	08 95       	ret

00000920 <item_insert>:
    item->prev = item;
    item->next = item;
}
//Вставить элемент
void item_insert(item_t *item, item_t *head)
{
 920:	df 93       	push	r29
 922:	cf 93       	push	r28
 924:	00 d0       	rcall	.+0      	; 0x926 <item_insert+0x6>
 926:	00 d0       	rcall	.+0      	; 0x928 <item_insert+0x8>
 928:	00 d0       	rcall	.+0      	; 0x92a <item_insert+0xa>
 92a:	cd b7       	in	r28, 0x3d	; 61
 92c:	de b7       	in	r29, 0x3e	; 62
 92e:	9c 83       	std	Y+4, r25	; 0x04
 930:	8b 83       	std	Y+3, r24	; 0x03
 932:	7e 83       	std	Y+6, r23	; 0x06
 934:	6d 83       	std	Y+5, r22	; 0x05
    // "хвост" списка
    item_t * tail;
    tail = head->prev;
 936:	ed 81       	ldd	r30, Y+5	; 0x05
 938:	fe 81       	ldd	r31, Y+6	; 0x06
 93a:	82 81       	ldd	r24, Z+2	; 0x02
 93c:	93 81       	ldd	r25, Z+3	; 0x03
 93e:	9a 83       	std	Y+2, r25	; 0x02
 940:	89 83       	std	Y+1, r24	; 0x01
    // Вставляем элемент между "головой" и "хвостом"
    item->prev = tail;
 942:	eb 81       	ldd	r30, Y+3	; 0x03
 944:	fc 81       	ldd	r31, Y+4	; 0x04
 946:	89 81       	ldd	r24, Y+1	; 0x01
 948:	9a 81       	ldd	r25, Y+2	; 0x02
 94a:	93 83       	std	Z+3, r25	; 0x03
 94c:	82 83       	std	Z+2, r24	; 0x02
    item->next = head;
 94e:	eb 81       	ldd	r30, Y+3	; 0x03
 950:	fc 81       	ldd	r31, Y+4	; 0x04
 952:	8d 81       	ldd	r24, Y+5	; 0x05
 954:	9e 81       	ldd	r25, Y+6	; 0x06
 956:	91 83       	std	Z+1, r25	; 0x01
 958:	80 83       	st	Z, r24

    head->prev = item;
 95a:	ed 81       	ldd	r30, Y+5	; 0x05
 95c:	fe 81       	ldd	r31, Y+6	; 0x06
 95e:	8b 81       	ldd	r24, Y+3	; 0x03
 960:	9c 81       	ldd	r25, Y+4	; 0x04
 962:	93 83       	std	Z+3, r25	; 0x03
 964:	82 83       	std	Z+2, r24	; 0x02
    tail->next = item;
 966:	e9 81       	ldd	r30, Y+1	; 0x01
 968:	fa 81       	ldd	r31, Y+2	; 0x02
 96a:	8b 81       	ldd	r24, Y+3	; 0x03
 96c:	9c 81       	ldd	r25, Y+4	; 0x04
 96e:	91 83       	std	Z+1, r25	; 0x01
 970:	80 83       	st	Z, r24
}
 972:	26 96       	adiw	r28, 0x06	; 6
 974:	0f b6       	in	r0, 0x3f	; 63
 976:	f8 94       	cli
 978:	de bf       	out	0x3e, r29	; 62
 97a:	0f be       	out	0x3f, r0	; 63
 97c:	cd bf       	out	0x3d, r28	; 61
 97e:	cf 91       	pop	r28
 980:	df 91       	pop	r29
 982:	08 95       	ret

00000984 <item_cut>:
//Вырезать элемент
void item_cut( item_t *item )
{
 984:	df 93       	push	r29
 986:	cf 93       	push	r28
 988:	00 d0       	rcall	.+0      	; 0x98a <item_cut+0x6>
 98a:	00 d0       	rcall	.+0      	; 0x98c <item_cut+0x8>
 98c:	00 d0       	rcall	.+0      	; 0x98e <item_cut+0xa>
 98e:	cd b7       	in	r28, 0x3d	; 61
 990:	de b7       	in	r29, 0x3e	; 62
 992:	9e 83       	std	Y+6, r25	; 0x06
 994:	8d 83       	std	Y+5, r24	; 0x05
    item_t * prev;
    item_t * next;
    prev = item->prev; //Предыдущий элемент
 996:	ed 81       	ldd	r30, Y+5	; 0x05
 998:	fe 81       	ldd	r31, Y+6	; 0x06
 99a:	82 81       	ldd	r24, Z+2	; 0x02
 99c:	93 81       	ldd	r25, Z+3	; 0x03
 99e:	9c 83       	std	Y+4, r25	; 0x04
 9a0:	8b 83       	std	Y+3, r24	; 0x03
    next = item->next; //Следующий элемент
 9a2:	ed 81       	ldd	r30, Y+5	; 0x05
 9a4:	fe 81       	ldd	r31, Y+6	; 0x06
 9a6:	80 81       	ld	r24, Z
 9a8:	91 81       	ldd	r25, Z+1	; 0x01
 9aa:	9a 83       	std	Y+2, r25	; 0x02
 9ac:	89 83       	std	Y+1, r24	; 0x01

    next->prev = prev;
 9ae:	e9 81       	ldd	r30, Y+1	; 0x01
 9b0:	fa 81       	ldd	r31, Y+2	; 0x02
 9b2:	8b 81       	ldd	r24, Y+3	; 0x03
 9b4:	9c 81       	ldd	r25, Y+4	; 0x04
 9b6:	93 83       	std	Z+3, r25	; 0x03
 9b8:	82 83       	std	Z+2, r24	; 0x02
    prev->next = next;
 9ba:	eb 81       	ldd	r30, Y+3	; 0x03
 9bc:	fc 81       	ldd	r31, Y+4	; 0x04
 9be:	89 81       	ldd	r24, Y+1	; 0x01
 9c0:	9a 81       	ldd	r25, Y+2	; 0x02
 9c2:	91 83       	std	Z+1, r25	; 0x01
 9c4:	80 83       	st	Z, r24

    item->prev = item;
 9c6:	ed 81       	ldd	r30, Y+5	; 0x05
 9c8:	fe 81       	ldd	r31, Y+6	; 0x06
 9ca:	8d 81       	ldd	r24, Y+5	; 0x05
 9cc:	9e 81       	ldd	r25, Y+6	; 0x06
 9ce:	93 83       	std	Z+3, r25	; 0x03
 9d0:	82 83       	std	Z+2, r24	; 0x02
    item->next = item;
 9d2:	ed 81       	ldd	r30, Y+5	; 0x05
 9d4:	fe 81       	ldd	r31, Y+6	; 0x06
 9d6:	8d 81       	ldd	r24, Y+5	; 0x05
 9d8:	9e 81       	ldd	r25, Y+6	; 0x06
 9da:	91 83       	std	Z+1, r25	; 0x01
 9dc:	80 83       	st	Z, r24
}
 9de:	26 96       	adiw	r28, 0x06	; 6
 9e0:	0f b6       	in	r0, 0x3f	; 63
 9e2:	f8 94       	cli
 9e4:	de bf       	out	0x3e, r29	; 62
 9e6:	0f be       	out	0x3f, r0	; 63
 9e8:	cd bf       	out	0x3d, r28	; 61
 9ea:	cf 91       	pop	r28
 9ec:	df 91       	pop	r29
 9ee:	08 95       	ret

000009f0 <test_visr>:
 */

#include "../../arch/avr/gcc-vsmp/vsmp.h"

void test_visr(void)
{
 9f0:	df 93       	push	r29
 9f2:	cf 93       	push	r28
 9f4:	cd b7       	in	r28, 0x3d	; 61
 9f6:	de b7       	in	r29, 0x3e	; 62
    PORTB^=0x10;
 9f8:	a5 e2       	ldi	r26, 0x25	; 37
 9fa:	b0 e0       	ldi	r27, 0x00	; 0
 9fc:	e5 e2       	ldi	r30, 0x25	; 37
 9fe:	f0 e0       	ldi	r31, 0x00	; 0
 a00:	90 81       	ld	r25, Z
 a02:	80 e1       	ldi	r24, 0x10	; 16
 a04:	89 27       	eor	r24, r25
 a06:	8c 93       	st	X, r24
}
 a08:	cf 91       	pop	r28
 a0a:	df 91       	pop	r29
 a0c:	08 95       	ret

00000a0e <test_visr2>:
void test_visr2(void)
{
 a0e:	df 93       	push	r29
 a10:	cf 93       	push	r28
 a12:	cd b7       	in	r28, 0x3d	; 61
 a14:	de b7       	in	r29, 0x3e	; 62
    PORTB^=0x10;
 a16:	a5 e2       	ldi	r26, 0x25	; 37
 a18:	b0 e0       	ldi	r27, 0x00	; 0
 a1a:	e5 e2       	ldi	r30, 0x25	; 37
 a1c:	f0 e0       	ldi	r31, 0x00	; 0
 a1e:	90 81       	ld	r25, Z
 a20:	80 e1       	ldi	r24, 0x10	; 16
 a22:	89 27       	eor	r24, r25
 a24:	8c 93       	st	X, r24
}
 a26:	cf 91       	pop	r28
 a28:	df 91       	pop	r29
 a2a:	08 95       	ret

00000a2c <main>:
vinterrupt_t test_vector2 = VINTERRUPT_INIT(test_vector2,test_visr2);
core_id_t i;
unsigned short j;

int main(void)
{
 a2c:	df 93       	push	r29
 a2e:	cf 93       	push	r28
 a30:	cd b7       	in	r28, 0x3d	; 61
 a32:	de b7       	in	r29, 0x3e	; 62
    vsmp_init();
 a34:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <vsmp_init>

    TCCR2A = 0x02;//
 a38:	e0 eb       	ldi	r30, 0xB0	; 176
 a3a:	f0 e0       	ldi	r31, 0x00	; 0
 a3c:	82 e0       	ldi	r24, 0x02	; 2
 a3e:	80 83       	st	Z, r24
    TCCR2B = 0x05;// prescaler=128
 a40:	e1 eb       	ldi	r30, 0xB1	; 177
 a42:	f0 e0       	ldi	r31, 0x00	; 0
 a44:	85 e0       	ldi	r24, 0x05	; 5
 a46:	80 83       	st	Z, r24
    OCR2A  = 124;
 a48:	e3 eb       	ldi	r30, 0xB3	; 179
 a4a:	f0 e0       	ldi	r31, 0x00	; 0
 a4c:	8c e7       	ldi	r24, 0x7C	; 124
 a4e:	80 83       	st	Z, r24
    OCR2B  = 0x00;
 a50:	e4 eb       	ldi	r30, 0xB4	; 180
 a52:	f0 e0       	ldi	r31, 0x00	; 0
 a54:	10 82       	st	Z, r1
    TIMSK2 = 0x02;
 a56:	e0 e7       	ldi	r30, 0x70	; 112
 a58:	f0 e0       	ldi	r31, 0x00	; 0
 a5a:	82 e0       	ldi	r24, 0x02	; 2
 a5c:	80 83       	st	Z, r24
    TIFR2  = 0x00;
 a5e:	e7 e3       	ldi	r30, 0x37	; 55
 a60:	f0 e0       	ldi	r31, 0x00	; 0
 a62:	10 82       	st	Z, r1

    DDRB = 0x3F;
 a64:	e4 e2       	ldi	r30, 0x24	; 36
 a66:	f0 e0       	ldi	r31, 0x00	; 0
 a68:	8f e3       	ldi	r24, 0x3F	; 63
 a6a:	80 83       	st	Z, r24
    PORTB = 0x00;
 a6c:	e5 e2       	ldi	r30, 0x25	; 37
 a6e:	f0 e0       	ldi	r31, 0x00	; 0
 a70:	10 82       	st	Z, r1
    DDRC = 0x3F;
 a72:	e7 e2       	ldi	r30, 0x27	; 39
 a74:	f0 e0       	ldi	r31, 0x00	; 0
 a76:	8f e3       	ldi	r24, 0x3F	; 63
 a78:	80 83       	st	Z, r24
    PORTC = 0x00;
 a7a:	e8 e2       	ldi	r30, 0x28	; 40
 a7c:	f0 e0       	ldi	r31, 0x00	; 0
 a7e:	10 82       	st	Z, r1
    DDRD = 0xFE;
 a80:	ea e2       	ldi	r30, 0x2A	; 42
 a82:	f0 e0       	ldi	r31, 0x00	; 0
 a84:	8e ef       	ldi	r24, 0xFE	; 254
 a86:	80 83       	st	Z, r24
    PORTD = 0x00;
 a88:	eb e2       	ldi	r30, 0x2B	; 43
 a8a:	f0 e0       	ldi	r31, 0x00	; 0
 a8c:	10 82       	st	Z, r1

    vsmp_run();
 a8e:	0e 94 26 01 	call	0x24c	; 0x24c <vsmp_run>

    for(i=0; i<MAX_CORES; i++)
 a92:	10 92 20 03 	sts	0x0320, r1
 a96:	2a c0       	rjmp	.+84     	; 0xaec <main+0xc0>
    {
        cli();
 a98:	f8 94       	cli
        vsmp_vinterrupt_isr( i, &test_vector );
 a9a:	80 91 20 03 	lds	r24, 0x0320
 a9e:	20 e0       	ldi	r18, 0x00	; 0
 aa0:	31 e0       	ldi	r19, 0x01	; 1
 aa2:	b9 01       	movw	r22, r18
 aa4:	0e 94 c5 02 	call	0x58a	; 0x58a <vsmp_vinterrupt_isr>
        vsmp_vinterrupt( i, &test_vector2 );
 aa8:	80 91 20 03 	lds	r24, 0x0320
 aac:	26 e0       	ldi	r18, 0x06	; 6
 aae:	31 e0       	ldi	r19, 0x01	; 1
 ab0:	b9 01       	movw	r22, r18
 ab2:	0e 94 0c 03 	call	0x618	; 0x618 <vsmp_vinterrupt>
        for(j=0;j<1000;j++);
 ab6:	10 92 1f 03 	sts	0x031F, r1
 aba:	10 92 1e 03 	sts	0x031E, r1
 abe:	09 c0       	rjmp	.+18     	; 0xad2 <main+0xa6>
 ac0:	80 91 1e 03 	lds	r24, 0x031E
 ac4:	90 91 1f 03 	lds	r25, 0x031F
 ac8:	01 96       	adiw	r24, 0x01	; 1
 aca:	90 93 1f 03 	sts	0x031F, r25
 ace:	80 93 1e 03 	sts	0x031E, r24
 ad2:	80 91 1e 03 	lds	r24, 0x031E
 ad6:	90 91 1f 03 	lds	r25, 0x031F
 ada:	23 e0       	ldi	r18, 0x03	; 3
 adc:	88 3e       	cpi	r24, 0xE8	; 232
 ade:	92 07       	cpc	r25, r18
 ae0:	78 f3       	brcs	.-34     	; 0xac0 <main+0x94>
    DDRD = 0xFE;
    PORTD = 0x00;

    vsmp_run();

    for(i=0; i<MAX_CORES; i++)
 ae2:	80 91 20 03 	lds	r24, 0x0320
 ae6:	8f 5f       	subi	r24, 0xFF	; 255
 ae8:	80 93 20 03 	sts	0x0320, r24
 aec:	80 91 20 03 	lds	r24, 0x0320
 af0:	83 30       	cpi	r24, 0x03	; 3
 af2:	90 f2       	brcs	.-92     	; 0xa98 <main+0x6c>
        for(j=0;j<1000;j++);
    }

    while(1)
    {
        PORTB ^= 0x20;
 af4:	a5 e2       	ldi	r26, 0x25	; 37
 af6:	b0 e0       	ldi	r27, 0x00	; 0
 af8:	e5 e2       	ldi	r30, 0x25	; 37
 afa:	f0 e0       	ldi	r31, 0x00	; 0
 afc:	90 81       	ld	r25, Z
 afe:	80 e2       	ldi	r24, 0x20	; 32
 b00:	89 27       	eor	r24, r25
 b02:	8c 93       	st	X, r24
 b04:	f7 cf       	rjmp	.-18     	; 0xaf4 <main+0xc8>

00000b06 <_exit>:
 b06:	f8 94       	cli

00000b08 <__stop_program>:
 b08:	ff cf       	rjmp	.-2      	; 0xb08 <__stop_program>
