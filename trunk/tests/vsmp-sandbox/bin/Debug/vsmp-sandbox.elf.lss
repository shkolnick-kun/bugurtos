
bin/Debug/vsmp-sandbox.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000038d8  0000396c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000038d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000200  0080010c  0080010c  00003978  2**0
                  ALLOC
  3 .stab         00008cf4  00000000  00000000  00003978  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003f7d  00000000  00000000  0000c66c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
       4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      1c:	0c 94 68 06 	jmp	0xcd0	; 0xcd0 <__vector_7>
      20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      30:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      48:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      54:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000068 <syscall_routine>:
      68:	ae 18 00 19 1a 19 34 19 4e 19 6f 19 b6 19 c8 19     ......4.N.o.....
      78:	d6 19 e6 19 f6 19 08 1a 18 1a 28 1a 3f 1a 59 1a     ..........(.?.Y.
      88:	73 1a 83 1a 99 1a b3 1a cd 1a dd 1a ed 1a 0c 1b     s...............

00000098 <__ctors_end>:
      98:	11 24       	eor	r1, r1
      9a:	1f be       	out	0x3f, r1	; 63
      9c:	cf ef       	ldi	r28, 0xFF	; 255
      9e:	d8 e0       	ldi	r29, 0x08	; 8
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
      a4:	11 e0       	ldi	r17, 0x01	; 1
      a6:	a0 e0       	ldi	r26, 0x00	; 0
      a8:	b1 e0       	ldi	r27, 0x01	; 1
      aa:	e8 ed       	ldi	r30, 0xD8	; 216
      ac:	f8 e3       	ldi	r31, 0x38	; 56
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <.do_copy_data_start>

000000b0 <.do_copy_data_loop>:
      b0:	05 90       	lpm	r0, Z+
      b2:	0d 92       	st	X+, r0

000000b4 <.do_copy_data_start>:
      b4:	ac 30       	cpi	r26, 0x0C	; 12
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <.do_copy_data_loop>

000000ba <__do_clear_bss>:
      ba:	13 e0       	ldi	r17, 0x03	; 3
      bc:	ac e0       	ldi	r26, 0x0C	; 12
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	ac 30       	cpi	r26, 0x0C	; 12
      c6:	b1 07       	cpc	r27, r17
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	0e 94 cc 1b 	call	0x3798	; 0x3798 <main>
      ce:	0c 94 6a 1c 	jmp	0x38d4	; 0x38d4 <_exit>

000000d2 <__bad_interrupt>:
      d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <bugurt_save_context>:
      d6:	2f 92       	push	r2
      d8:	2f b6       	in	r2, 0x3f	; 63
      da:	2f 92       	push	r2
      dc:	3f 92       	push	r3
      de:	4f 92       	push	r4
      e0:	5f 92       	push	r5
      e2:	6f 92       	push	r6
      e4:	7f 92       	push	r7
      e6:	8f 92       	push	r8
      e8:	9f 92       	push	r9
      ea:	af 92       	push	r10
      ec:	bf 92       	push	r11
      ee:	cf 92       	push	r12
      f0:	df 92       	push	r13
      f2:	ef 92       	push	r14
      f4:	ff 92       	push	r15
      f6:	0f 93       	push	r16
      f8:	1f 93       	push	r17
      fa:	2f 93       	push	r18
      fc:	3f 93       	push	r19
      fe:	4f 93       	push	r20
     100:	5f 93       	push	r21
     102:	6f 93       	push	r22
     104:	7f 93       	push	r23
     106:	8f 93       	push	r24
     108:	9f 93       	push	r25
     10a:	af 93       	push	r26
     10c:	bf 93       	push	r27
     10e:	cf 93       	push	r28
     110:	df 93       	push	r29
     112:	ef 93       	push	r30
     114:	ff 93       	push	r31
     116:	ed b7       	in	r30, 0x3d	; 61
     118:	fe b7       	in	r31, 0x3e	; 62
     11a:	21 a1       	ldd	r18, Z+33	; 0x21
     11c:	30 a1       	ldd	r19, Z+32	; 0x20
     11e:	01 a2       	std	Z+33, r0	; 0x21
     120:	10 a2       	std	Z+32, r1	; 0x20
     122:	11 24       	eor	r1, r1
     124:	8d b7       	in	r24, 0x3d	; 61
     126:	9e b7       	in	r25, 0x3e	; 62
     128:	2f 93       	push	r18
     12a:	3f 93       	push	r19
     12c:	08 95       	ret

0000012e <bugurt_pop_context>:
     12e:	3f 91       	pop	r19
     130:	2f 91       	pop	r18
     132:	04 c0       	rjmp	.+8      	; 0x13c <_bugurt_pop_context>

00000134 <bugurt_restore_context>:
     134:	3f 91       	pop	r19
     136:	2f 91       	pop	r18
     138:	9e bf       	out	0x3e, r25	; 62
     13a:	8d bf       	out	0x3d, r24	; 61

0000013c <_bugurt_pop_context>:
     13c:	fe b7       	in	r31, 0x3e	; 62
     13e:	ed b7       	in	r30, 0x3d	; 61
     140:	10 a0       	ldd	r1, Z+32	; 0x20
     142:	01 a0       	ldd	r0, Z+33	; 0x21
     144:	30 a3       	std	Z+32, r19	; 0x20
     146:	21 a3       	std	Z+33, r18	; 0x21
     148:	ff 91       	pop	r31
     14a:	ef 91       	pop	r30
     14c:	df 91       	pop	r29
     14e:	cf 91       	pop	r28
     150:	bf 91       	pop	r27
     152:	af 91       	pop	r26
     154:	9f 91       	pop	r25
     156:	8f 91       	pop	r24
     158:	7f 91       	pop	r23
     15a:	6f 91       	pop	r22
     15c:	5f 91       	pop	r21
     15e:	4f 91       	pop	r20
     160:	3f 91       	pop	r19
     162:	2f 91       	pop	r18
     164:	1f 91       	pop	r17
     166:	0f 91       	pop	r16
     168:	ff 90       	pop	r15
     16a:	ef 90       	pop	r14
     16c:	df 90       	pop	r13
     16e:	cf 90       	pop	r12
     170:	bf 90       	pop	r11
     172:	af 90       	pop	r10
     174:	9f 90       	pop	r9
     176:	8f 90       	pop	r8
     178:	7f 90       	pop	r7
     17a:	6f 90       	pop	r6
     17c:	5f 90       	pop	r5
     17e:	4f 90       	pop	r4
     180:	3f 90       	pop	r3
     182:	2f 90       	pop	r2
     184:	2f be       	out	0x3f, r2	; 63
     186:	2f 90       	pop	r2
     188:	08 95       	ret

0000018a <bugurt_set_stack_pointer>:
     18a:	1f 90       	pop	r1
     18c:	0f 90       	pop	r0
     18e:	9e bf       	out	0x3e, r25	; 62
     190:	8d bf       	out	0x3d, r24	; 61
     192:	0f 92       	push	r0
     194:	1f 92       	push	r1
     196:	11 24       	eor	r1, r1
     198:	08 95       	ret

0000019a <bugurt_push_pointer>:
     19a:	1f 90       	pop	r1
     19c:	0f 90       	pop	r0
     19e:	8f 93       	push	r24
     1a0:	9f 93       	push	r25
     1a2:	0f 92       	push	r0
     1a4:	1f 92       	push	r1
     1a6:	11 24       	eor	r1, r1
     1a8:	08 95       	ret

000001aa <bugurt_reverse_byte_order>:
     1aa:	08 2e       	mov	r0, r24
     1ac:	89 2f       	mov	r24, r25
     1ae:	90 2d       	mov	r25, r0
     1b0:	08 95       	ret

000001b2 <disable_interrupts>:
    bugurt_set_stack_pointer( saved_vm_sp[current_vm] );
    sei();
}
///!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
void disable_interrupts(void)
{
     1b2:	df 93       	push	r29
     1b4:	cf 93       	push	r28
     1b6:	cd b7       	in	r28, 0x3d	; 61
     1b8:	de b7       	in	r29, 0x3e	; 62
    cli();
     1ba:	f8 94       	cli
    vm_state[current_vm].int_enabled = (bool_t)0;
     1bc:	80 91 1c 01 	lds	r24, 0x011C
     1c0:	28 2f       	mov	r18, r24
     1c2:	30 e0       	ldi	r19, 0x00	; 0
     1c4:	c9 01       	movw	r24, r18
     1c6:	88 0f       	add	r24, r24
     1c8:	99 1f       	adc	r25, r25
     1ca:	88 0f       	add	r24, r24
     1cc:	99 1f       	adc	r25, r25
     1ce:	82 0f       	add	r24, r18
     1d0:	93 1f       	adc	r25, r19
     1d2:	fc 01       	movw	r30, r24
     1d4:	e1 5e       	subi	r30, 0xE1	; 225
     1d6:	fe 4f       	sbci	r31, 0xFE	; 254
     1d8:	10 82       	st	Z, r1
    sei();
     1da:	78 94       	sei
}
     1dc:	cf 91       	pop	r28
     1de:	df 91       	pop	r29
     1e0:	08 95       	ret

000001e2 <enable_interrupts>:

void enable_interrupts(void)
{
     1e2:	df 93       	push	r29
     1e4:	cf 93       	push	r28
     1e6:	cd b7       	in	r28, 0x3d	; 61
     1e8:	de b7       	in	r29, 0x3e	; 62
    cli();
     1ea:	f8 94       	cli
    vm_state[current_vm].int_enabled = (bool_t)1;
     1ec:	80 91 1c 01 	lds	r24, 0x011C
     1f0:	28 2f       	mov	r18, r24
     1f2:	30 e0       	ldi	r19, 0x00	; 0
     1f4:	c9 01       	movw	r24, r18
     1f6:	88 0f       	add	r24, r24
     1f8:	99 1f       	adc	r25, r25
     1fa:	88 0f       	add	r24, r24
     1fc:	99 1f       	adc	r25, r25
     1fe:	82 0f       	add	r24, r18
     200:	93 1f       	adc	r25, r19
     202:	fc 01       	movw	r30, r24
     204:	e1 5e       	subi	r30, 0xE1	; 225
     206:	fe 4f       	sbci	r31, 0xFE	; 254
     208:	81 e0       	ldi	r24, 0x01	; 1
     20a:	80 83       	st	Z, r24
    sei();
     20c:	78 94       	sei
}
     20e:	cf 91       	pop	r28
     210:	df 91       	pop	r29
     212:	08 95       	ret

00000214 <current_proc>:

proc_t * current_proc(void)
{
     214:	df 93       	push	r29
     216:	cf 93       	push	r28
     218:	00 d0       	rcall	.+0      	; 0x21a <current_proc+0x6>
     21a:	cd b7       	in	r28, 0x3d	; 61
     21c:	de b7       	in	r29, 0x3e	; 62
    proc_t * ret;
    cli();
     21e:	f8 94       	cli
    ret = kernel.sched[current_vm].current_proc;
     220:	80 91 1c 01 	lds	r24, 0x011C
     224:	28 2f       	mov	r18, r24
     226:	30 e0       	ldi	r19, 0x00	; 0
     228:	8b e2       	ldi	r24, 0x2B	; 43
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	ac 01       	movw	r20, r24
     22e:	24 9f       	mul	r18, r20
     230:	c0 01       	movw	r24, r0
     232:	25 9f       	mul	r18, r21
     234:	90 0d       	add	r25, r0
     236:	34 9f       	mul	r19, r20
     238:	90 0d       	add	r25, r0
     23a:	11 24       	eor	r1, r1
     23c:	fc 01       	movw	r30, r24
     23e:	e5 5b       	subi	r30, 0xB5	; 181
     240:	fd 4f       	sbci	r31, 0xFD	; 253
     242:	80 81       	ld	r24, Z
     244:	91 81       	ldd	r25, Z+1	; 0x01
     246:	9a 83       	std	Y+2, r25	; 0x02
     248:	89 83       	std	Y+1, r24	; 0x01
    sei();
     24a:	78 94       	sei
    return ret;
     24c:	89 81       	ldd	r24, Y+1	; 0x01
     24e:	9a 81       	ldd	r25, Y+2	; 0x02
}
     250:	0f 90       	pop	r0
     252:	0f 90       	pop	r0
     254:	cf 91       	pop	r28
     256:	df 91       	pop	r29
     258:	08 95       	ret

0000025a <current_core>:

core_id_t current_core(void)
{
     25a:	df 93       	push	r29
     25c:	cf 93       	push	r28
     25e:	0f 92       	push	r0
     260:	cd b7       	in	r28, 0x3d	; 61
     262:	de b7       	in	r29, 0x3e	; 62
    core_id_t ret;
    cli();
     264:	f8 94       	cli
    ret = current_vm;
     266:	80 91 1c 01 	lds	r24, 0x011C
     26a:	89 83       	std	Y+1, r24	; 0x01
    sei();
     26c:	78 94       	sei
    return ret;
     26e:	89 81       	ldd	r24, Y+1	; 0x01
}
     270:	0f 90       	pop	r0
     272:	cf 91       	pop	r28
     274:	df 91       	pop	r29
     276:	08 95       	ret

00000278 <spin_init>:

void spin_init( lock_t * lock )
{
     278:	df 93       	push	r29
     27a:	cf 93       	push	r28
     27c:	00 d0       	rcall	.+0      	; 0x27e <spin_init+0x6>
     27e:	cd b7       	in	r28, 0x3d	; 61
     280:	de b7       	in	r29, 0x3e	; 62
     282:	9a 83       	std	Y+2, r25	; 0x02
     284:	89 83       	std	Y+1, r24	; 0x01
    cli();
     286:	f8 94       	cli
    *lock = (lock_t)0;
     288:	e9 81       	ldd	r30, Y+1	; 0x01
     28a:	fa 81       	ldd	r31, Y+2	; 0x02
     28c:	10 82       	st	Z, r1
    sei();
     28e:	78 94       	sei
}
     290:	0f 90       	pop	r0
     292:	0f 90       	pop	r0
     294:	cf 91       	pop	r28
     296:	df 91       	pop	r29
     298:	08 95       	ret

0000029a <spin_lock>:

void spin_lock( lock_t * lock )
{
     29a:	df 93       	push	r29
     29c:	cf 93       	push	r28
     29e:	00 d0       	rcall	.+0      	; 0x2a0 <spin_lock+0x6>
     2a0:	cd b7       	in	r28, 0x3d	; 61
     2a2:	de b7       	in	r29, 0x3e	; 62
     2a4:	9a 83       	std	Y+2, r25	; 0x02
     2a6:	89 83       	std	Y+1, r24	; 0x01
    while(1)
    {
        cli();
     2a8:	f8 94       	cli
        if(!*lock)
     2aa:	e9 81       	ldd	r30, Y+1	; 0x01
     2ac:	fa 81       	ldd	r31, Y+2	; 0x02
     2ae:	80 81       	ld	r24, Z
     2b0:	88 23       	and	r24, r24
     2b2:	51 f4       	brne	.+20     	; 0x2c8 <spin_lock+0x2e>
        {
            *lock = (lock_t)1;
     2b4:	e9 81       	ldd	r30, Y+1	; 0x01
     2b6:	fa 81       	ldd	r31, Y+2	; 0x02
     2b8:	81 e0       	ldi	r24, 0x01	; 1
     2ba:	80 83       	st	Z, r24
            sei();
     2bc:	78 94       	sei
            return;
        }
        sei();
    }
}
     2be:	0f 90       	pop	r0
     2c0:	0f 90       	pop	r0
     2c2:	cf 91       	pop	r28
     2c4:	df 91       	pop	r29
     2c6:	08 95       	ret
        {
            *lock = (lock_t)1;
            sei();
            return;
        }
        sei();
     2c8:	78 94       	sei
     2ca:	ee cf       	rjmp	.-36     	; 0x2a8 <spin_lock+0xe>

000002cc <spin_unlock>:
    }
}
void spin_unlock(lock_t * lock)
{
     2cc:	df 93       	push	r29
     2ce:	cf 93       	push	r28
     2d0:	00 d0       	rcall	.+0      	; 0x2d2 <spin_unlock+0x6>
     2d2:	0f 92       	push	r0
     2d4:	cd b7       	in	r28, 0x3d	; 61
     2d6:	de b7       	in	r29, 0x3e	; 62
     2d8:	9b 83       	std	Y+3, r25	; 0x03
     2da:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char i;
    for(i = 0; i< 1000; i++);// delay, all other vms must spin for a while
     2dc:	19 82       	std	Y+1, r1	; 0x01
     2de:	89 81       	ldd	r24, Y+1	; 0x01
     2e0:	8f 5f       	subi	r24, 0xFF	; 255
     2e2:	89 83       	std	Y+1, r24	; 0x01
     2e4:	fc cf       	rjmp	.-8      	; 0x2de <spin_unlock+0x12>

000002e6 <stat_init>:
    *lock = (lock_t)0;
    sei();
}
// stat_t is simply prcess counter here!
void stat_init( stat_t * stat )
{
     2e6:	df 93       	push	r29
     2e8:	cf 93       	push	r28
     2ea:	00 d0       	rcall	.+0      	; 0x2ec <stat_init+0x6>
     2ec:	cd b7       	in	r28, 0x3d	; 61
     2ee:	de b7       	in	r29, 0x3e	; 62
     2f0:	9a 83       	std	Y+2, r25	; 0x02
     2f2:	89 83       	std	Y+1, r24	; 0x01
    *stat = 0; // no lad on a system
     2f4:	e9 81       	ldd	r30, Y+1	; 0x01
     2f6:	fa 81       	ldd	r31, Y+2	; 0x02
     2f8:	10 82       	st	Z, r1
}
     2fa:	0f 90       	pop	r0
     2fc:	0f 90       	pop	r0
     2fe:	cf 91       	pop	r28
     300:	df 91       	pop	r29
     302:	08 95       	ret

00000304 <stat_dec>:
void stat_dec( proc_t * proc, stat_t * stat )
{
     304:	df 93       	push	r29
     306:	cf 93       	push	r28
     308:	00 d0       	rcall	.+0      	; 0x30a <stat_dec+0x6>
     30a:	00 d0       	rcall	.+0      	; 0x30c <stat_dec+0x8>
     30c:	cd b7       	in	r28, 0x3d	; 61
     30e:	de b7       	in	r29, 0x3e	; 62
     310:	9a 83       	std	Y+2, r25	; 0x02
     312:	89 83       	std	Y+1, r24	; 0x01
     314:	7c 83       	std	Y+4, r23	; 0x04
     316:	6b 83       	std	Y+3, r22	; 0x03
    *stat--;
     318:	8b 81       	ldd	r24, Y+3	; 0x03
     31a:	9c 81       	ldd	r25, Y+4	; 0x04
     31c:	01 97       	sbiw	r24, 0x01	; 1
     31e:	9c 83       	std	Y+4, r25	; 0x04
     320:	8b 83       	std	Y+3, r24	; 0x03
}
     322:	0f 90       	pop	r0
     324:	0f 90       	pop	r0
     326:	0f 90       	pop	r0
     328:	0f 90       	pop	r0
     32a:	cf 91       	pop	r28
     32c:	df 91       	pop	r29
     32e:	08 95       	ret

00000330 <stat_inc>:
void stat_inc( proc_t * proc, stat_t * stat )
{
     330:	df 93       	push	r29
     332:	cf 93       	push	r28
     334:	00 d0       	rcall	.+0      	; 0x336 <stat_inc+0x6>
     336:	00 d0       	rcall	.+0      	; 0x338 <stat_inc+0x8>
     338:	cd b7       	in	r28, 0x3d	; 61
     33a:	de b7       	in	r29, 0x3e	; 62
     33c:	9a 83       	std	Y+2, r25	; 0x02
     33e:	89 83       	std	Y+1, r24	; 0x01
     340:	7c 83       	std	Y+4, r23	; 0x04
     342:	6b 83       	std	Y+3, r22	; 0x03
    *stat++;
     344:	8b 81       	ldd	r24, Y+3	; 0x03
     346:	9c 81       	ldd	r25, Y+4	; 0x04
     348:	01 96       	adiw	r24, 0x01	; 1
     34a:	9c 83       	std	Y+4, r25	; 0x04
     34c:	8b 83       	std	Y+3, r24	; 0x03
}
     34e:	0f 90       	pop	r0
     350:	0f 90       	pop	r0
     352:	0f 90       	pop	r0
     354:	0f 90       	pop	r0
     356:	cf 91       	pop	r28
     358:	df 91       	pop	r29
     35a:	08 95       	ret

0000035c <stat_merge>:
void stat_merge( stat_t *src_stat, stat_t * dst_stat  )
{
     35c:	df 93       	push	r29
     35e:	cf 93       	push	r28
     360:	00 d0       	rcall	.+0      	; 0x362 <stat_merge+0x6>
     362:	00 d0       	rcall	.+0      	; 0x364 <stat_merge+0x8>
     364:	cd b7       	in	r28, 0x3d	; 61
     366:	de b7       	in	r29, 0x3e	; 62
     368:	9a 83       	std	Y+2, r25	; 0x02
     36a:	89 83       	std	Y+1, r24	; 0x01
     36c:	7c 83       	std	Y+4, r23	; 0x04
     36e:	6b 83       	std	Y+3, r22	; 0x03
    *dst_stat += *src_stat;
     370:	eb 81       	ldd	r30, Y+3	; 0x03
     372:	fc 81       	ldd	r31, Y+4	; 0x04
     374:	90 81       	ld	r25, Z
     376:	e9 81       	ldd	r30, Y+1	; 0x01
     378:	fa 81       	ldd	r31, Y+2	; 0x02
     37a:	80 81       	ld	r24, Z
     37c:	89 0f       	add	r24, r25
     37e:	eb 81       	ldd	r30, Y+3	; 0x03
     380:	fc 81       	ldd	r31, Y+4	; 0x04
     382:	80 83       	st	Z, r24
    *src_stat = (stat_t)0;
     384:	e9 81       	ldd	r30, Y+1	; 0x01
     386:	fa 81       	ldd	r31, Y+2	; 0x02
     388:	10 82       	st	Z, r1
}
     38a:	0f 90       	pop	r0
     38c:	0f 90       	pop	r0
     38e:	0f 90       	pop	r0
     390:	0f 90       	pop	r0
     392:	cf 91       	pop	r28
     394:	df 91       	pop	r29
     396:	08 95       	ret

00000398 <stat_calc_load>:
load_t stat_calc_load(prio_t prio, stat_t * stat)
{
     398:	df 93       	push	r29
     39a:	cf 93       	push	r28
     39c:	00 d0       	rcall	.+0      	; 0x39e <stat_calc_load+0x6>
     39e:	0f 92       	push	r0
     3a0:	cd b7       	in	r28, 0x3d	; 61
     3a2:	de b7       	in	r29, 0x3e	; 62
     3a4:	89 83       	std	Y+1, r24	; 0x01
     3a6:	7b 83       	std	Y+3, r23	; 0x03
     3a8:	6a 83       	std	Y+2, r22	; 0x02
    return (load_t)*stat;
     3aa:	ea 81       	ldd	r30, Y+2	; 0x02
     3ac:	fb 81       	ldd	r31, Y+3	; 0x03
     3ae:	80 81       	ld	r24, Z
}
     3b0:	0f 90       	pop	r0
     3b2:	0f 90       	pop	r0
     3b4:	0f 90       	pop	r0
     3b6:	cf 91       	pop	r28
     3b8:	df 91       	pop	r29
     3ba:	08 95       	ret

000003bc <resched>:
void resched(core_id_t core_id)
{
     3bc:	df 93       	push	r29
     3be:	cf 93       	push	r28
     3c0:	0f 92       	push	r0
     3c2:	cd b7       	in	r28, 0x3d	; 61
     3c4:	de b7       	in	r29, 0x3e	; 62
     3c6:	89 83       	std	Y+1, r24	; 0x01
    vsmp_vinterrupt_isr( core_id, ( vinterrupt_t * )resched_vectors + core_id );
     3c8:	89 81       	ldd	r24, Y+1	; 0x01
     3ca:	28 2f       	mov	r18, r24
     3cc:	30 e0       	ldi	r19, 0x00	; 0
     3ce:	c9 01       	movw	r24, r18
     3d0:	88 0f       	add	r24, r24
     3d2:	99 1f       	adc	r25, r25
     3d4:	82 0f       	add	r24, r18
     3d6:	93 1f       	adc	r25, r19
     3d8:	88 0f       	add	r24, r24
     3da:	99 1f       	adc	r25, r25
     3dc:	9c 01       	movw	r18, r24
     3de:	23 5d       	subi	r18, 0xD3	; 211
     3e0:	3e 4f       	sbci	r19, 0xFE	; 254
     3e2:	89 81       	ldd	r24, Y+1	; 0x01
     3e4:	b9 01       	movw	r22, r18
     3e6:	0e 94 10 07 	call	0xe20	; 0xe20 <vsmp_vinterrupt_isr>
}
     3ea:	0f 90       	pop	r0
     3ec:	cf 91       	pop	r28
     3ee:	df 91       	pop	r29
     3f0:	08 95       	ret

000003f2 <resched_isr>:

///!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
stack_t * saved_vm_sp[MAX_CORES];
__MACRO_FUNCTION__(_bugurt_isr_prologue)
{
    cli();
     3f2:	f8 94       	cli
    saved_vm_sp[current_vm] = (stack_t *)SP; // I didn't write bugurt_get_stack_pointer();
     3f4:	80 91 1c 01 	lds	r24, 0x011C
     3f8:	48 2f       	mov	r20, r24
     3fa:	50 e0       	ldi	r21, 0x00	; 0
     3fc:	ed e5       	ldi	r30, 0x5D	; 93
     3fe:	f0 e0       	ldi	r31, 0x00	; 0
     400:	80 81       	ld	r24, Z
     402:	91 81       	ldd	r25, Z+1	; 0x01
     404:	9c 01       	movw	r18, r24
     406:	ca 01       	movw	r24, r20
     408:	88 0f       	add	r24, r24
     40a:	99 1f       	adc	r25, r25
     40c:	fc 01       	movw	r30, r24
     40e:	e4 5f       	subi	r30, 0xF4	; 244
     410:	fe 4f       	sbci	r31, 0xFE	; 254
     412:	31 83       	std	Z+1, r19	; 0x01
     414:	20 83       	st	Z, r18
    bugurt_set_stack_pointer( kernel.idle[current_vm].spointer );
     416:	80 91 1c 01 	lds	r24, 0x011C
     41a:	28 2f       	mov	r18, r24
     41c:	30 e0       	ldi	r19, 0x00	; 0
     41e:	80 e3       	ldi	r24, 0x30	; 48
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	ac 01       	movw	r20, r24
     424:	24 9f       	mul	r18, r20
     426:	c0 01       	movw	r24, r0
     428:	25 9f       	mul	r18, r21
     42a:	90 0d       	add	r25, r0
     42c:	34 9f       	mul	r19, r20
     42e:	90 0d       	add	r25, r0
     430:	11 24       	eor	r1, r1
     432:	fc 01       	movw	r30, r24
     434:	e1 53       	subi	r30, 0x31	; 49
     436:	fd 4f       	sbci	r31, 0xFD	; 253
     438:	80 81       	ld	r24, Z
     43a:	91 81       	ldd	r25, Z+1	; 0x01
     43c:	0e 94 c5 00 	call	0x18a	; 0x18a <bugurt_set_stack_pointer>
    sei();
     440:	78 94       	sei
vinterrupt_t resched_vectors[MAX_CORES];
__attribute__ (( naked )) void resched_isr(void)
{
    _bugurt_isr_prologue();

    sched_reschedule();
     442:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <sched_reschedule>
    bugurt_set_stack_pointer( kernel.idle[current_vm].spointer );
    sei();
}
__MACRO_FUNCTION__(_bugurt_isr_epilogue)
{
    cli();
     446:	f8 94       	cli
    bugurt_set_stack_pointer( saved_vm_sp[current_vm] );
     448:	80 91 1c 01 	lds	r24, 0x011C
     44c:	88 2f       	mov	r24, r24
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	88 0f       	add	r24, r24
     452:	99 1f       	adc	r25, r25
     454:	fc 01       	movw	r30, r24
     456:	e4 5f       	subi	r30, 0xF4	; 244
     458:	fe 4f       	sbci	r31, 0xFE	; 254
     45a:	80 81       	ld	r24, Z
     45c:	91 81       	ldd	r25, Z+1	; 0x01
     45e:	0e 94 c5 00 	call	0x18a	; 0x18a <bugurt_set_stack_pointer>
    sei();
     462:	78 94       	sei

00000464 <resched_vectors_init>:
    sched_reschedule();

    _bugurt_isr_epilogue();
}
void resched_vectors_init(void)
{
     464:	df 93       	push	r29
     466:	cf 93       	push	r28
     468:	0f 92       	push	r0
     46a:	cd b7       	in	r28, 0x3d	; 61
     46c:	de b7       	in	r29, 0x3e	; 62
    core_id_t i;
    for(i = 0; i < MAX_CORES; i++)
     46e:	19 82       	std	Y+1, r1	; 0x01
     470:	14 c0       	rjmp	.+40     	; 0x49a <resched_vectors_init+0x36>
    {
        vsmp_vinterrupt_init( ( vinterrupt_t * )resched_vectors + i, resched_isr );
     472:	89 81       	ldd	r24, Y+1	; 0x01
     474:	28 2f       	mov	r18, r24
     476:	30 e0       	ldi	r19, 0x00	; 0
     478:	c9 01       	movw	r24, r18
     47a:	88 0f       	add	r24, r24
     47c:	99 1f       	adc	r25, r25
     47e:	82 0f       	add	r24, r18
     480:	93 1f       	adc	r25, r19
     482:	88 0f       	add	r24, r24
     484:	99 1f       	adc	r25, r25
     486:	83 5d       	subi	r24, 0xD3	; 211
     488:	9e 4f       	sbci	r25, 0xFE	; 254
     48a:	29 ef       	ldi	r18, 0xF9	; 249
     48c:	31 e0       	ldi	r19, 0x01	; 1
     48e:	b9 01       	movw	r22, r18
     490:	0e 94 6f 07 	call	0xede	; 0xede <vsmp_vinterrupt_init>
    _bugurt_isr_epilogue();
}
void resched_vectors_init(void)
{
    core_id_t i;
    for(i = 0; i < MAX_CORES; i++)
     494:	89 81       	ldd	r24, Y+1	; 0x01
     496:	8f 5f       	subi	r24, 0xFF	; 255
     498:	89 83       	std	Y+1, r24	; 0x01
     49a:	89 81       	ldd	r24, Y+1	; 0x01
     49c:	82 30       	cpi	r24, 0x02	; 2
     49e:	48 f3       	brcs	.-46     	; 0x472 <resched_vectors_init+0xe>
    {
        vsmp_vinterrupt_init( ( vinterrupt_t * )resched_vectors + i, resched_isr );
    }
}
     4a0:	0f 90       	pop	r0
     4a2:	cf 91       	pop	r28
     4a4:	df 91       	pop	r29
     4a6:	08 95       	ret

000004a8 <_systimer_tick_isr>:

vinterrupt_t systimer_vectors[MAX_CORES];
void _systimer_tick_isr(void)
{
     4a8:	df 93       	push	r29
     4aa:	cf 93       	push	r28
     4ac:	cd b7       	in	r28, 0x3d	; 61
     4ae:	de b7       	in	r29, 0x3e	; 62
    SPIN_LOCK_KERNEL_TIMER();
     4b0:	84 e0       	ldi	r24, 0x04	; 4
     4b2:	93 e0       	ldi	r25, 0x03	; 3
     4b4:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
    kernel.timer++;
     4b8:	80 91 05 03 	lds	r24, 0x0305
     4bc:	90 91 06 03 	lds	r25, 0x0306
     4c0:	01 96       	adiw	r24, 0x01	; 1
     4c2:	90 93 06 03 	sts	0x0306, r25
     4c6:	80 93 05 03 	sts	0x0305, r24
    if( kernel.timer_tick != (void (*)(void))0 ) kernel.timer_tick();
     4ca:	80 91 07 03 	lds	r24, 0x0307
     4ce:	90 91 08 03 	lds	r25, 0x0308
     4d2:	00 97       	sbiw	r24, 0x00	; 0
     4d4:	29 f0       	breq	.+10     	; 0x4e0 <_systimer_tick_isr+0x38>
     4d6:	e0 91 07 03 	lds	r30, 0x0307
     4da:	f0 91 08 03 	lds	r31, 0x0308
     4de:	09 95       	icall
    SPIN_UNLOCK_KERNEL_TIMER();
     4e0:	84 e0       	ldi	r24, 0x04	; 4
     4e2:	93 e0       	ldi	r25, 0x03	; 3
     4e4:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>

    sched_schedule();
     4e8:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <sched_schedule>
}
     4ec:	cf 91       	pop	r28
     4ee:	df 91       	pop	r29
     4f0:	08 95       	ret

000004f2 <systimer_tick_isr>:

///!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
stack_t * saved_vm_sp[MAX_CORES];
__MACRO_FUNCTION__(_bugurt_isr_prologue)
{
    cli();
     4f2:	f8 94       	cli
    saved_vm_sp[current_vm] = (stack_t *)SP; // I didn't write bugurt_get_stack_pointer();
     4f4:	80 91 1c 01 	lds	r24, 0x011C
     4f8:	48 2f       	mov	r20, r24
     4fa:	50 e0       	ldi	r21, 0x00	; 0
     4fc:	ed e5       	ldi	r30, 0x5D	; 93
     4fe:	f0 e0       	ldi	r31, 0x00	; 0
     500:	80 81       	ld	r24, Z
     502:	91 81       	ldd	r25, Z+1	; 0x01
     504:	9c 01       	movw	r18, r24
     506:	ca 01       	movw	r24, r20
     508:	88 0f       	add	r24, r24
     50a:	99 1f       	adc	r25, r25
     50c:	fc 01       	movw	r30, r24
     50e:	e4 5f       	subi	r30, 0xF4	; 244
     510:	fe 4f       	sbci	r31, 0xFE	; 254
     512:	31 83       	std	Z+1, r19	; 0x01
     514:	20 83       	st	Z, r18
    bugurt_set_stack_pointer( kernel.idle[current_vm].spointer );
     516:	80 91 1c 01 	lds	r24, 0x011C
     51a:	28 2f       	mov	r18, r24
     51c:	30 e0       	ldi	r19, 0x00	; 0
     51e:	80 e3       	ldi	r24, 0x30	; 48
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	ac 01       	movw	r20, r24
     524:	24 9f       	mul	r18, r20
     526:	c0 01       	movw	r24, r0
     528:	25 9f       	mul	r18, r21
     52a:	90 0d       	add	r25, r0
     52c:	34 9f       	mul	r19, r20
     52e:	90 0d       	add	r25, r0
     530:	11 24       	eor	r1, r1
     532:	fc 01       	movw	r30, r24
     534:	e1 53       	subi	r30, 0x31	; 49
     536:	fd 4f       	sbci	r31, 0xFD	; 253
     538:	80 81       	ld	r24, Z
     53a:	91 81       	ldd	r25, Z+1	; 0x01
     53c:	0e 94 c5 00 	call	0x18a	; 0x18a <bugurt_set_stack_pointer>
    sei();
     540:	78 94       	sei
}
__attribute__ (( naked )) void systimer_tick_isr(void)
{
    _bugurt_isr_prologue();

    _systimer_tick_isr();
     542:	0e 94 54 02 	call	0x4a8	; 0x4a8 <_systimer_tick_isr>
    bugurt_set_stack_pointer( kernel.idle[current_vm].spointer );
    sei();
}
__MACRO_FUNCTION__(_bugurt_isr_epilogue)
{
    cli();
     546:	f8 94       	cli
    bugurt_set_stack_pointer( saved_vm_sp[current_vm] );
     548:	80 91 1c 01 	lds	r24, 0x011C
     54c:	88 2f       	mov	r24, r24
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	88 0f       	add	r24, r24
     552:	99 1f       	adc	r25, r25
     554:	fc 01       	movw	r30, r24
     556:	e4 5f       	subi	r30, 0xF4	; 244
     558:	fe 4f       	sbci	r31, 0xFE	; 254
     55a:	80 81       	ld	r24, Z
     55c:	91 81       	ldd	r25, Z+1	; 0x01
     55e:	0e 94 c5 00 	call	0x18a	; 0x18a <bugurt_set_stack_pointer>
    sei();
     562:	78 94       	sei

00000564 <systimer_sched_isr>:

///!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
stack_t * saved_vm_sp[MAX_CORES];
__MACRO_FUNCTION__(_bugurt_isr_prologue)
{
    cli();
     564:	f8 94       	cli
    saved_vm_sp[current_vm] = (stack_t *)SP; // I didn't write bugurt_get_stack_pointer();
     566:	80 91 1c 01 	lds	r24, 0x011C
     56a:	48 2f       	mov	r20, r24
     56c:	50 e0       	ldi	r21, 0x00	; 0
     56e:	ed e5       	ldi	r30, 0x5D	; 93
     570:	f0 e0       	ldi	r31, 0x00	; 0
     572:	80 81       	ld	r24, Z
     574:	91 81       	ldd	r25, Z+1	; 0x01
     576:	9c 01       	movw	r18, r24
     578:	ca 01       	movw	r24, r20
     57a:	88 0f       	add	r24, r24
     57c:	99 1f       	adc	r25, r25
     57e:	fc 01       	movw	r30, r24
     580:	e4 5f       	subi	r30, 0xF4	; 244
     582:	fe 4f       	sbci	r31, 0xFE	; 254
     584:	31 83       	std	Z+1, r19	; 0x01
     586:	20 83       	st	Z, r18
    bugurt_set_stack_pointer( kernel.idle[current_vm].spointer );
     588:	80 91 1c 01 	lds	r24, 0x011C
     58c:	28 2f       	mov	r18, r24
     58e:	30 e0       	ldi	r19, 0x00	; 0
     590:	80 e3       	ldi	r24, 0x30	; 48
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	ac 01       	movw	r20, r24
     596:	24 9f       	mul	r18, r20
     598:	c0 01       	movw	r24, r0
     59a:	25 9f       	mul	r18, r21
     59c:	90 0d       	add	r25, r0
     59e:	34 9f       	mul	r19, r20
     5a0:	90 0d       	add	r25, r0
     5a2:	11 24       	eor	r1, r1
     5a4:	fc 01       	movw	r30, r24
     5a6:	e1 53       	subi	r30, 0x31	; 49
     5a8:	fd 4f       	sbci	r31, 0xFD	; 253
     5aa:	80 81       	ld	r24, Z
     5ac:	91 81       	ldd	r25, Z+1	; 0x01
     5ae:	0e 94 c5 00 	call	0x18a	; 0x18a <bugurt_set_stack_pointer>
    sei();
     5b2:	78 94       	sei

__attribute__ (( naked )) void systimer_sched_isr(void)
{
    _bugurt_isr_prologue();

    sched_schedule();
     5b4:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <sched_schedule>
    bugurt_set_stack_pointer( kernel.idle[current_vm].spointer );
    sei();
}
__MACRO_FUNCTION__(_bugurt_isr_epilogue)
{
    cli();
     5b8:	f8 94       	cli
    bugurt_set_stack_pointer( saved_vm_sp[current_vm] );
     5ba:	80 91 1c 01 	lds	r24, 0x011C
     5be:	88 2f       	mov	r24, r24
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	88 0f       	add	r24, r24
     5c4:	99 1f       	adc	r25, r25
     5c6:	fc 01       	movw	r30, r24
     5c8:	e4 5f       	subi	r30, 0xF4	; 244
     5ca:	fe 4f       	sbci	r31, 0xFE	; 254
     5cc:	80 81       	ld	r24, Z
     5ce:	91 81       	ldd	r25, Z+1	; 0x01
     5d0:	0e 94 c5 00 	call	0x18a	; 0x18a <bugurt_set_stack_pointer>
    sei();
     5d4:	78 94       	sei

000005d6 <systimer_vectors_init>:

    _bugurt_isr_epilogue();
}

void systimer_vectors_init(void)
{
     5d6:	df 93       	push	r29
     5d8:	cf 93       	push	r28
     5da:	0f 92       	push	r0
     5dc:	cd b7       	in	r28, 0x3d	; 61
     5de:	de b7       	in	r29, 0x3e	; 62
    core_id_t i;
    vsmp_vinterrupt_init( (vinterrupt_t *)systimer_vectors, systimer_tick_isr ); // Zero core is "mater", it handles kernel.timer
     5e0:	89 e3       	ldi	r24, 0x39	; 57
     5e2:	91 e0       	ldi	r25, 0x01	; 1
     5e4:	29 e7       	ldi	r18, 0x79	; 121
     5e6:	32 e0       	ldi	r19, 0x02	; 2
     5e8:	b9 01       	movw	r22, r18
     5ea:	0e 94 6f 07 	call	0xede	; 0xede <vsmp_vinterrupt_init>
    for(i = 1; i < MAX_CORES; i++)
     5ee:	81 e0       	ldi	r24, 0x01	; 1
     5f0:	89 83       	std	Y+1, r24	; 0x01
     5f2:	14 c0       	rjmp	.+40     	; 0x61c <systimer_vectors_init+0x46>
    {
        vsmp_vinterrupt_init( (vinterrupt_t *)systimer_vectors + i, systimer_sched_isr ); // Other cores are slaves they just shedule.
     5f4:	89 81       	ldd	r24, Y+1	; 0x01
     5f6:	28 2f       	mov	r18, r24
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	c9 01       	movw	r24, r18
     5fc:	88 0f       	add	r24, r24
     5fe:	99 1f       	adc	r25, r25
     600:	82 0f       	add	r24, r18
     602:	93 1f       	adc	r25, r19
     604:	88 0f       	add	r24, r24
     606:	99 1f       	adc	r25, r25
     608:	87 5c       	subi	r24, 0xC7	; 199
     60a:	9e 4f       	sbci	r25, 0xFE	; 254
     60c:	22 eb       	ldi	r18, 0xB2	; 178
     60e:	32 e0       	ldi	r19, 0x02	; 2
     610:	b9 01       	movw	r22, r18
     612:	0e 94 6f 07 	call	0xede	; 0xede <vsmp_vinterrupt_init>

void systimer_vectors_init(void)
{
    core_id_t i;
    vsmp_vinterrupt_init( (vinterrupt_t *)systimer_vectors, systimer_tick_isr ); // Zero core is "mater", it handles kernel.timer
    for(i = 1; i < MAX_CORES; i++)
     616:	89 81       	ldd	r24, Y+1	; 0x01
     618:	8f 5f       	subi	r24, 0xFF	; 255
     61a:	89 83       	std	Y+1, r24	; 0x01
     61c:	89 81       	ldd	r24, Y+1	; 0x01
     61e:	82 30       	cpi	r24, 0x02	; 2
     620:	48 f3       	brcs	.-46     	; 0x5f4 <systimer_vectors_init+0x1e>
    {
        vsmp_vinterrupt_init( (vinterrupt_t *)systimer_vectors + i, systimer_sched_isr ); // Other cores are slaves they just shedule.
    }
}
     622:	0f 90       	pop	r0
     624:	cf 91       	pop	r28
     626:	df 91       	pop	r29
     628:	08 95       	ret

0000062a <systimer_vectors_fire>:

void systimer_vectors_fire(void)
{
     62a:	df 93       	push	r29
     62c:	cf 93       	push	r28
     62e:	0f 92       	push	r0
     630:	cd b7       	in	r28, 0x3d	; 61
     632:	de b7       	in	r29, 0x3e	; 62
    core_id_t i;
    for(i = 0; i < MAX_CORES; i++)
     634:	19 82       	std	Y+1, r1	; 0x01
     636:	14 c0       	rjmp	.+40     	; 0x660 <systimer_vectors_fire+0x36>
    {
        vsmp_vinterrupt_isr( i, (vinterrupt_t *)systimer_vectors + i );
     638:	89 81       	ldd	r24, Y+1	; 0x01
     63a:	28 2f       	mov	r18, r24
     63c:	30 e0       	ldi	r19, 0x00	; 0
     63e:	c9 01       	movw	r24, r18
     640:	88 0f       	add	r24, r24
     642:	99 1f       	adc	r25, r25
     644:	82 0f       	add	r24, r18
     646:	93 1f       	adc	r25, r19
     648:	88 0f       	add	r24, r24
     64a:	99 1f       	adc	r25, r25
     64c:	9c 01       	movw	r18, r24
     64e:	27 5c       	subi	r18, 0xC7	; 199
     650:	3e 4f       	sbci	r19, 0xFE	; 254
     652:	89 81       	ldd	r24, Y+1	; 0x01
     654:	b9 01       	movw	r22, r18
     656:	0e 94 10 07 	call	0xe20	; 0xe20 <vsmp_vinterrupt_isr>
}

void systimer_vectors_fire(void)
{
    core_id_t i;
    for(i = 0; i < MAX_CORES; i++)
     65a:	89 81       	ldd	r24, Y+1	; 0x01
     65c:	8f 5f       	subi	r24, 0xFF	; 255
     65e:	89 83       	std	Y+1, r24	; 0x01
     660:	89 81       	ldd	r24, Y+1	; 0x01
     662:	82 30       	cpi	r24, 0x02	; 2
     664:	48 f3       	brcs	.-46     	; 0x638 <systimer_vectors_fire+0xe>
    {
        vsmp_vinterrupt_isr( i, (vinterrupt_t *)systimer_vectors + i );
    }
}
     666:	0f 90       	pop	r0
     668:	cf 91       	pop	r28
     66a:	df 91       	pop	r29
     66c:	08 95       	ret

0000066e <vsmp_systimer_hook_bugurt>:

#define SYSTIMER_HOOK_THR 10
count_t systimer_hook_counter;
void vsmp_systimer_hook_bugurt(void)
{
     66e:	df 93       	push	r29
     670:	cf 93       	push	r28
     672:	cd b7       	in	r28, 0x3d	; 61
     674:	de b7       	in	r29, 0x3e	; 62
    if(!current_vm)
     676:	80 91 1c 01 	lds	r24, 0x011C
     67a:	88 23       	and	r24, r24
     67c:	b1 f4       	brne	.+44     	; 0x6aa <vsmp_systimer_hook_bugurt+0x3c>
    {
        systimer_hook_counter++;
     67e:	80 91 45 01 	lds	r24, 0x0145
     682:	90 91 46 01 	lds	r25, 0x0146
     686:	01 96       	adiw	r24, 0x01	; 1
     688:	90 93 46 01 	sts	0x0146, r25
     68c:	80 93 45 01 	sts	0x0145, r24
        if( systimer_hook_counter >= SYSTIMER_HOOK_THR )
     690:	80 91 45 01 	lds	r24, 0x0145
     694:	90 91 46 01 	lds	r25, 0x0146
     698:	8a 30       	cpi	r24, 0x0A	; 10
     69a:	91 05       	cpc	r25, r1
     69c:	30 f0       	brcs	.+12     	; 0x6aa <vsmp_systimer_hook_bugurt+0x3c>
        {
            systimer_hook_counter = (count_t)0;
     69e:	10 92 46 01 	sts	0x0146, r1
     6a2:	10 92 45 01 	sts	0x0145, r1
            systimer_vectors_fire();
     6a6:	0e 94 15 03 	call	0x62a	; 0x62a <systimer_vectors_fire>
        }

    }
}
     6aa:	cf 91       	pop	r28
     6ac:	df 91       	pop	r29
     6ae:	08 95       	ret

000006b0 <_syscall_isr>:
syscall_t syscall_num[MAX_CORES];
void * syscall_arg[MAX_CORES];

// Local variable is used compiler generated prologue and epilogue needed
void _syscall_isr(void)
{
     6b0:	df 93       	push	r29
     6b2:	cf 93       	push	r28
     6b4:	0f 92       	push	r0
     6b6:	cd b7       	in	r28, 0x3d	; 61
     6b8:	de b7       	in	r29, 0x3e	; 62
    core_id_t core;
    core = current_core();
     6ba:	0e 94 2d 01 	call	0x25a	; 0x25a <current_core>
     6be:	89 83       	std	Y+1, r24	; 0x01
    do_syscall( syscall_num[core], syscall_arg[core] );
     6c0:	89 81       	ldd	r24, Y+1	; 0x01
     6c2:	88 2f       	mov	r24, r24
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	fc 01       	movw	r30, r24
     6c8:	e5 5d       	subi	r30, 0xD5	; 213
     6ca:	fe 4f       	sbci	r31, 0xFE	; 254
     6cc:	40 81       	ld	r20, Z
     6ce:	89 81       	ldd	r24, Y+1	; 0x01
     6d0:	88 2f       	mov	r24, r24
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	88 0f       	add	r24, r24
     6d6:	99 1f       	adc	r25, r25
     6d8:	fc 01       	movw	r30, r24
     6da:	e9 5d       	subi	r30, 0xD9	; 217
     6dc:	fe 4f       	sbci	r31, 0xFE	; 254
     6de:	20 81       	ld	r18, Z
     6e0:	31 81       	ldd	r19, Z+1	; 0x01
     6e2:	84 2f       	mov	r24, r20
     6e4:	b9 01       	movw	r22, r18
     6e6:	0e 94 79 18 	call	0x30f2	; 0x30f2 <do_syscall>
}
     6ea:	0f 90       	pop	r0
     6ec:	cf 91       	pop	r28
     6ee:	df 91       	pop	r29
     6f0:	08 95       	ret

000006f2 <syscall_isr>:

///!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
stack_t * saved_vm_sp[MAX_CORES];
__MACRO_FUNCTION__(_bugurt_isr_prologue)
{
    cli();
     6f2:	f8 94       	cli
    saved_vm_sp[current_vm] = (stack_t *)SP; // I didn't write bugurt_get_stack_pointer();
     6f4:	80 91 1c 01 	lds	r24, 0x011C
     6f8:	48 2f       	mov	r20, r24
     6fa:	50 e0       	ldi	r21, 0x00	; 0
     6fc:	ed e5       	ldi	r30, 0x5D	; 93
     6fe:	f0 e0       	ldi	r31, 0x00	; 0
     700:	80 81       	ld	r24, Z
     702:	91 81       	ldd	r25, Z+1	; 0x01
     704:	9c 01       	movw	r18, r24
     706:	ca 01       	movw	r24, r20
     708:	88 0f       	add	r24, r24
     70a:	99 1f       	adc	r25, r25
     70c:	fc 01       	movw	r30, r24
     70e:	e4 5f       	subi	r30, 0xF4	; 244
     710:	fe 4f       	sbci	r31, 0xFE	; 254
     712:	31 83       	std	Z+1, r19	; 0x01
     714:	20 83       	st	Z, r18
    bugurt_set_stack_pointer( kernel.idle[current_vm].spointer );
     716:	80 91 1c 01 	lds	r24, 0x011C
     71a:	28 2f       	mov	r18, r24
     71c:	30 e0       	ldi	r19, 0x00	; 0
     71e:	80 e3       	ldi	r24, 0x30	; 48
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	ac 01       	movw	r20, r24
     724:	24 9f       	mul	r18, r20
     726:	c0 01       	movw	r24, r0
     728:	25 9f       	mul	r18, r21
     72a:	90 0d       	add	r25, r0
     72c:	34 9f       	mul	r19, r20
     72e:	90 0d       	add	r25, r0
     730:	11 24       	eor	r1, r1
     732:	fc 01       	movw	r30, r24
     734:	e1 53       	subi	r30, 0x31	; 49
     736:	fd 4f       	sbci	r31, 0xFD	; 253
     738:	80 81       	ld	r24, Z
     73a:	91 81       	ldd	r25, Z+1	; 0x01
     73c:	0e 94 c5 00 	call	0x18a	; 0x18a <bugurt_set_stack_pointer>
    sei();
     740:	78 94       	sei
}
__attribute__ (( naked )) void syscall_isr(void)
{
    _bugurt_isr_prologue();

    _syscall_isr();
     742:	0e 94 58 03 	call	0x6b0	; 0x6b0 <_syscall_isr>
    bugurt_set_stack_pointer( kernel.idle[current_vm].spointer );
    sei();
}
__MACRO_FUNCTION__(_bugurt_isr_epilogue)
{
    cli();
     746:	f8 94       	cli
    bugurt_set_stack_pointer( saved_vm_sp[current_vm] );
     748:	80 91 1c 01 	lds	r24, 0x011C
     74c:	88 2f       	mov	r24, r24
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	88 0f       	add	r24, r24
     752:	99 1f       	adc	r25, r25
     754:	fc 01       	movw	r30, r24
     756:	e4 5f       	subi	r30, 0xF4	; 244
     758:	fe 4f       	sbci	r31, 0xFE	; 254
     75a:	80 81       	ld	r24, Z
     75c:	91 81       	ldd	r25, Z+1	; 0x01
     75e:	0e 94 c5 00 	call	0x18a	; 0x18a <bugurt_set_stack_pointer>
    sei();
     762:	78 94       	sei

00000764 <syscall_vectors_init>:
    _bugurt_isr_epilogue();
}


void syscall_vectors_init(void)
{
     764:	df 93       	push	r29
     766:	cf 93       	push	r28
     768:	0f 92       	push	r0
     76a:	cd b7       	in	r28, 0x3d	; 61
     76c:	de b7       	in	r29, 0x3e	; 62
    core_id_t i;
    for(i = 0; i < MAX_CORES; i++)
     76e:	19 82       	std	Y+1, r1	; 0x01
     770:	25 c0       	rjmp	.+74     	; 0x7bc <syscall_vectors_init+0x58>
    {
        vsmp_vinterrupt_init( ( vinterrupt_t * )syscall_vectors + i, syscall_isr );
     772:	89 81       	ldd	r24, Y+1	; 0x01
     774:	28 2f       	mov	r18, r24
     776:	30 e0       	ldi	r19, 0x00	; 0
     778:	c9 01       	movw	r24, r18
     77a:	88 0f       	add	r24, r24
     77c:	99 1f       	adc	r25, r25
     77e:	82 0f       	add	r24, r18
     780:	93 1f       	adc	r25, r19
     782:	88 0f       	add	r24, r24
     784:	99 1f       	adc	r25, r25
     786:	80 5f       	subi	r24, 0xF0	; 240
     788:	9e 4f       	sbci	r25, 0xFE	; 254
     78a:	29 e7       	ldi	r18, 0x79	; 121
     78c:	33 e0       	ldi	r19, 0x03	; 3
     78e:	b9 01       	movw	r22, r18
     790:	0e 94 6f 07 	call	0xede	; 0xede <vsmp_vinterrupt_init>
        syscall_num[i] = (syscall_t)0;
     794:	89 81       	ldd	r24, Y+1	; 0x01
     796:	88 2f       	mov	r24, r24
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	fc 01       	movw	r30, r24
     79c:	e5 5d       	subi	r30, 0xD5	; 213
     79e:	fe 4f       	sbci	r31, 0xFE	; 254
     7a0:	10 82       	st	Z, r1
        syscall_arg[i] = (void *)0;
     7a2:	89 81       	ldd	r24, Y+1	; 0x01
     7a4:	88 2f       	mov	r24, r24
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	88 0f       	add	r24, r24
     7aa:	99 1f       	adc	r25, r25
     7ac:	fc 01       	movw	r30, r24
     7ae:	e9 5d       	subi	r30, 0xD9	; 217
     7b0:	fe 4f       	sbci	r31, 0xFE	; 254
     7b2:	11 82       	std	Z+1, r1	; 0x01
     7b4:	10 82       	st	Z, r1


void syscall_vectors_init(void)
{
    core_id_t i;
    for(i = 0; i < MAX_CORES; i++)
     7b6:	89 81       	ldd	r24, Y+1	; 0x01
     7b8:	8f 5f       	subi	r24, 0xFF	; 255
     7ba:	89 83       	std	Y+1, r24	; 0x01
     7bc:	89 81       	ldd	r24, Y+1	; 0x01
     7be:	82 30       	cpi	r24, 0x02	; 2
     7c0:	c0 f2       	brcs	.-80     	; 0x772 <syscall_vectors_init+0xe>
    {
        vsmp_vinterrupt_init( ( vinterrupt_t * )syscall_vectors + i, syscall_isr );
        syscall_num[i] = (syscall_t)0;
        syscall_arg[i] = (void *)0;
    }
}
     7c2:	0f 90       	pop	r0
     7c4:	cf 91       	pop	r28
     7c6:	df 91       	pop	r29
     7c8:	08 95       	ret

000007ca <syscall_bugurt>:

void syscall_bugurt( unsigned char num, void * arg )
{
     7ca:	df 93       	push	r29
     7cc:	cf 93       	push	r28
     7ce:	00 d0       	rcall	.+0      	; 0x7d0 <syscall_bugurt+0x6>
     7d0:	00 d0       	rcall	.+0      	; 0x7d2 <syscall_bugurt+0x8>
     7d2:	00 d0       	rcall	.+0      	; 0x7d4 <syscall_bugurt+0xa>
     7d4:	cd b7       	in	r28, 0x3d	; 61
     7d6:	de b7       	in	r29, 0x3e	; 62
     7d8:	8c 83       	std	Y+4, r24	; 0x04
     7da:	7e 83       	std	Y+6, r23	; 0x06
     7dc:	6d 83       	std	Y+5, r22	; 0x05
    core_id_t core;
    item_t * vector;

    disable_interrupts();
     7de:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <disable_interrupts>

    cli();
     7e2:	f8 94       	cli
    core = current_vm;
     7e4:	80 91 1c 01 	lds	r24, 0x011C
     7e8:	8b 83       	std	Y+3, r24	; 0x03
    sei();
     7ea:	78 94       	sei

    syscall_num[core] = (syscall_t)num;
     7ec:	8b 81       	ldd	r24, Y+3	; 0x03
     7ee:	88 2f       	mov	r24, r24
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	fc 01       	movw	r30, r24
     7f4:	e5 5d       	subi	r30, 0xD5	; 213
     7f6:	fe 4f       	sbci	r31, 0xFE	; 254
     7f8:	8c 81       	ldd	r24, Y+4	; 0x04
     7fa:	80 83       	st	Z, r24
    syscall_arg[core] = (void *)arg;
     7fc:	8b 81       	ldd	r24, Y+3	; 0x03
     7fe:	88 2f       	mov	r24, r24
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	88 0f       	add	r24, r24
     804:	99 1f       	adc	r25, r25
     806:	fc 01       	movw	r30, r24
     808:	e9 5d       	subi	r30, 0xD9	; 217
     80a:	fe 4f       	sbci	r31, 0xFE	; 254
     80c:	8d 81       	ldd	r24, Y+5	; 0x05
     80e:	9e 81       	ldd	r25, Y+6	; 0x06
     810:	91 83       	std	Z+1, r25	; 0x01
     812:	80 83       	st	Z, r24
    vector = (item_t *)( &syscall_vectors[core] );
     814:	40 e1       	ldi	r20, 0x10	; 16
     816:	51 e0       	ldi	r21, 0x01	; 1
     818:	8b 81       	ldd	r24, Y+3	; 0x03
     81a:	28 2f       	mov	r18, r24
     81c:	30 e0       	ldi	r19, 0x00	; 0
     81e:	c9 01       	movw	r24, r18
     820:	88 0f       	add	r24, r24
     822:	99 1f       	adc	r25, r25
     824:	82 0f       	add	r24, r18
     826:	93 1f       	adc	r25, r19
     828:	88 0f       	add	r24, r24
     82a:	99 1f       	adc	r25, r25
     82c:	84 0f       	add	r24, r20
     82e:	95 1f       	adc	r25, r21
     830:	9a 83       	std	Y+2, r25	; 0x02
     832:	89 83       	std	Y+1, r24	; 0x01

    cli();
     834:	f8 94       	cli
    vm_state[current_vm].int_enabled = (bool_t)1; // Virtual interrupts MUST be eanabled !!!
     836:	80 91 1c 01 	lds	r24, 0x011C
     83a:	28 2f       	mov	r18, r24
     83c:	30 e0       	ldi	r19, 0x00	; 0
     83e:	c9 01       	movw	r24, r18
     840:	88 0f       	add	r24, r24
     842:	99 1f       	adc	r25, r25
     844:	88 0f       	add	r24, r24
     846:	99 1f       	adc	r25, r25
     848:	82 0f       	add	r24, r18
     84a:	93 1f       	adc	r25, r19
     84c:	fc 01       	movw	r30, r24
     84e:	e1 5e       	subi	r30, 0xE1	; 225
     850:	fe 4f       	sbci	r31, 0xFE	; 254
     852:	81 e0       	ldi	r24, 0x01	; 1
     854:	80 83       	st	Z, r24
    // System call is not an ordinary interrupt!!!
    // It MUST be serviced FIRST!!!
    if( vm_state[current_vm].int_fifo )
     856:	80 91 1c 01 	lds	r24, 0x011C
     85a:	28 2f       	mov	r18, r24
     85c:	30 e0       	ldi	r19, 0x00	; 0
     85e:	c9 01       	movw	r24, r18
     860:	88 0f       	add	r24, r24
     862:	99 1f       	adc	r25, r25
     864:	88 0f       	add	r24, r24
     866:	99 1f       	adc	r25, r25
     868:	82 0f       	add	r24, r18
     86a:	93 1f       	adc	r25, r19
     86c:	fc 01       	movw	r30, r24
     86e:	e3 5e       	subi	r30, 0xE3	; 227
     870:	fe 4f       	sbci	r31, 0xFE	; 254
     872:	80 81       	ld	r24, Z
     874:	91 81       	ldd	r25, Z+1	; 0x01
     876:	00 97       	sbiw	r24, 0x00	; 0
     878:	c1 f0       	breq	.+48     	; 0x8aa <syscall_bugurt+0xe0>
    {
        item_insert( (item_t *)vector, ((item_t *)vm_state[current_vm].int_fifo)->next );
     87a:	80 91 1c 01 	lds	r24, 0x011C
     87e:	28 2f       	mov	r18, r24
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	c9 01       	movw	r24, r18
     884:	88 0f       	add	r24, r24
     886:	99 1f       	adc	r25, r25
     888:	88 0f       	add	r24, r24
     88a:	99 1f       	adc	r25, r25
     88c:	82 0f       	add	r24, r18
     88e:	93 1f       	adc	r25, r19
     890:	fc 01       	movw	r30, r24
     892:	e3 5e       	subi	r30, 0xE3	; 227
     894:	fe 4f       	sbci	r31, 0xFE	; 254
     896:	01 90       	ld	r0, Z+
     898:	f0 81       	ld	r31, Z
     89a:	e0 2d       	mov	r30, r0
     89c:	20 81       	ld	r18, Z
     89e:	31 81       	ldd	r19, Z+1	; 0x01
     8a0:	89 81       	ldd	r24, Y+1	; 0x01
     8a2:	9a 81       	ldd	r25, Y+2	; 0x02
     8a4:	b9 01       	movw	r22, r18
     8a6:	0e 94 3e 0a 	call	0x147c	; 0x147c <item_insert>
    }
    vm_state[current_vm].int_fifo = (item_t *)vector;
     8aa:	80 91 1c 01 	lds	r24, 0x011C
     8ae:	28 2f       	mov	r18, r24
     8b0:	30 e0       	ldi	r19, 0x00	; 0
     8b2:	c9 01       	movw	r24, r18
     8b4:	88 0f       	add	r24, r24
     8b6:	99 1f       	adc	r25, r25
     8b8:	88 0f       	add	r24, r24
     8ba:	99 1f       	adc	r25, r25
     8bc:	82 0f       	add	r24, r18
     8be:	93 1f       	adc	r25, r19
     8c0:	fc 01       	movw	r30, r24
     8c2:	e3 5e       	subi	r30, 0xE3	; 227
     8c4:	fe 4f       	sbci	r31, 0xFE	; 254
     8c6:	89 81       	ldd	r24, Y+1	; 0x01
     8c8:	9a 81       	ldd	r25, Y+2	; 0x02
     8ca:	91 83       	std	Z+1, r25	; 0x01
     8cc:	80 83       	st	Z, r24
    _vsmp_vinterrupt();
     8ce:	0e 94 c7 06 	call	0xd8e	; 0xd8e <_vsmp_vinterrupt>
}
     8d2:	26 96       	adiw	r28, 0x06	; 6
     8d4:	0f b6       	in	r0, 0x3f	; 63
     8d6:	f8 94       	cli
     8d8:	de bf       	out	0x3e, r29	; 62
     8da:	0f be       	out	0x3f, r0	; 63
     8dc:	cd bf       	out	0x3d, r28	; 61
     8de:	cf 91       	pop	r28
     8e0:	df 91       	pop	r29
     8e2:	08 95       	ret

000008e4 <init_bugurt>:
/***************************************************************************************************************/
// Функции общего пользования

void init_bugurt(void)
{
     8e4:	df 93       	push	r29
     8e6:	cf 93       	push	r28
     8e8:	0f 92       	push	r0
     8ea:	cd b7       	in	r28, 0x3d	; 61
     8ec:	de b7       	in	r29, 0x3e	; 62
    core_id_t i;
    disable_interrupts();
     8ee:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <disable_interrupts>
    resched_vectors_init();
     8f2:	0e 94 32 02 	call	0x464	; 0x464 <resched_vectors_init>
    systimer_vectors_init();
     8f6:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <systimer_vectors_init>
    syscall_vectors_init();
     8fa:	0e 94 b2 03 	call	0x764	; 0x764 <syscall_vectors_init>
    kernel_init();
     8fe:	0e 94 ae 0a 	call	0x155c	; 0x155c <kernel_init>
    kernel.sched[current_core()].nested_crit_sec = (count_t)1;
     902:	0e 94 2d 01 	call	0x25a	; 0x25a <current_core>
     906:	28 2f       	mov	r18, r24
     908:	30 e0       	ldi	r19, 0x00	; 0
     90a:	8b e2       	ldi	r24, 0x2B	; 43
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	ac 01       	movw	r20, r24
     910:	24 9f       	mul	r18, r20
     912:	c0 01       	movw	r24, r0
     914:	25 9f       	mul	r18, r21
     916:	90 0d       	add	r25, r0
     918:	34 9f       	mul	r19, r20
     91a:	90 0d       	add	r25, r0
     91c:	11 24       	eor	r1, r1
     91e:	fc 01       	movw	r30, r24
     920:	ed 58       	subi	r30, 0x8D	; 141
     922:	fd 4f       	sbci	r31, 0xFD	; 253
     924:	81 e0       	ldi	r24, 0x01	; 1
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	91 83       	std	Z+1, r25	; 0x01
     92a:	80 83       	st	Z, r24
    for(i = 1; i < MAX_CORES; i++)
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	89 83       	std	Y+1, r24	; 0x01
     930:	17 c0       	rjmp	.+46     	; 0x960 <__stack+0x61>
    {
        kernel.idle[i].pmain = vsmp_idle_main;
     932:	89 81       	ldd	r24, Y+1	; 0x01
     934:	28 2f       	mov	r18, r24
     936:	30 e0       	ldi	r19, 0x00	; 0
     938:	80 e3       	ldi	r24, 0x30	; 48
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	ac 01       	movw	r20, r24
     93e:	24 9f       	mul	r18, r20
     940:	c0 01       	movw	r24, r0
     942:	25 9f       	mul	r18, r21
     944:	90 0d       	add	r25, r0
     946:	34 9f       	mul	r19, r20
     948:	90 0d       	add	r25, r0
     94a:	11 24       	eor	r1, r1
     94c:	fc 01       	movw	r30, r24
     94e:	eb 53       	subi	r30, 0x3B	; 59
     950:	fd 4f       	sbci	r31, 0xFD	; 253
     952:	8e e6       	ldi	r24, 0x6E	; 110
     954:	95 e0       	ldi	r25, 0x05	; 5
     956:	91 83       	std	Z+1, r25	; 0x01
     958:	80 83       	st	Z, r24
    resched_vectors_init();
    systimer_vectors_init();
    syscall_vectors_init();
    kernel_init();
    kernel.sched[current_core()].nested_crit_sec = (count_t)1;
    for(i = 1; i < MAX_CORES; i++)
     95a:	89 81       	ldd	r24, Y+1	; 0x01
     95c:	8f 5f       	subi	r24, 0xFF	; 255
     95e:	89 83       	std	Y+1, r24	; 0x01
     960:	89 81       	ldd	r24, Y+1	; 0x01
     962:	82 30       	cpi	r24, 0x02	; 2
     964:	30 f3       	brcs	.-52     	; 0x932 <__stack+0x33>
    {
        kernel.idle[i].pmain = vsmp_idle_main;
    }
}
     966:	0f 90       	pop	r0
     968:	cf 91       	pop	r28
     96a:	df 91       	pop	r29
     96c:	08 95       	ret

0000096e <start_bugurt>:
void start_bugurt(void)
{
     96e:	df 93       	push	r29
     970:	cf 93       	push	r28
     972:	cd b7       	in	r28, 0x3d	; 61
     974:	de b7       	in	r29, 0x3e	; 62
    kernel.sched[current_core()].nested_crit_sec = (count_t)0;
     976:	0e 94 2d 01 	call	0x25a	; 0x25a <current_core>
     97a:	28 2f       	mov	r18, r24
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	8b e2       	ldi	r24, 0x2B	; 43
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	ac 01       	movw	r20, r24
     984:	24 9f       	mul	r18, r20
     986:	c0 01       	movw	r24, r0
     988:	25 9f       	mul	r18, r21
     98a:	90 0d       	add	r25, r0
     98c:	34 9f       	mul	r19, r20
     98e:	90 0d       	add	r25, r0
     990:	11 24       	eor	r1, r1
     992:	fc 01       	movw	r30, r24
     994:	ed 58       	subi	r30, 0x8D	; 141
     996:	fd 4f       	sbci	r31, 0xFD	; 253
     998:	11 82       	std	Z+1, r1	; 0x01
     99a:	10 82       	st	Z, r1
    enable_interrupts();
     99c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <enable_interrupts>
    cli();
     9a0:	f8 94       	cli
    vsmp_systimer_hook = vsmp_systimer_hook_bugurt;
     9a2:	87 e3       	ldi	r24, 0x37	; 55
     9a4:	93 e0       	ldi	r25, 0x03	; 3
     9a6:	90 93 4a 02 	sts	0x024A, r25
     9aa:	80 93 49 02 	sts	0x0249, r24
    sei();
     9ae:	78 94       	sei
    idle_main( (void *)0 );
     9b0:	80 e0       	ldi	r24, 0x00	; 0
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	0e 94 a6 0a 	call	0x154c	; 0x154c <idle_main>
}
     9b8:	cf 91       	pop	r28
     9ba:	df 91       	pop	r29
     9bc:	08 95       	ret

000009be <vsmp_vm_init>:
void (*vsmp_systimer_hook)(void);



void vsmp_vm_init( vsmp_vm_t * vm, stack_t * sp )
{
     9be:	df 93       	push	r29
     9c0:	cf 93       	push	r28
     9c2:	00 d0       	rcall	.+0      	; 0x9c4 <vsmp_vm_init+0x6>
     9c4:	00 d0       	rcall	.+0      	; 0x9c6 <vsmp_vm_init+0x8>
     9c6:	cd b7       	in	r28, 0x3d	; 61
     9c8:	de b7       	in	r29, 0x3e	; 62
     9ca:	9a 83       	std	Y+2, r25	; 0x02
     9cc:	89 83       	std	Y+1, r24	; 0x01
     9ce:	7c 83       	std	Y+4, r23	; 0x04
     9d0:	6b 83       	std	Y+3, r22	; 0x03
    vm->int_fifo = (item_t *)0; // Нет прерываний;
     9d2:	e9 81       	ldd	r30, Y+1	; 0x01
     9d4:	fa 81       	ldd	r31, Y+2	; 0x02
     9d6:	11 82       	std	Z+1, r1	; 0x01
     9d8:	10 82       	st	Z, r1
    vm->int_enabled = 1;// прерывания разрешены
     9da:	e9 81       	ldd	r30, Y+1	; 0x01
     9dc:	fa 81       	ldd	r31, Y+2	; 0x02
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	82 83       	std	Z+2, r24	; 0x02
    vm->sp = (stack_t *)sp;
     9e2:	e9 81       	ldd	r30, Y+1	; 0x01
     9e4:	fa 81       	ldd	r31, Y+2	; 0x02
     9e6:	8b 81       	ldd	r24, Y+3	; 0x03
     9e8:	9c 81       	ldd	r25, Y+4	; 0x04
     9ea:	94 83       	std	Z+4, r25	; 0x04
     9ec:	83 83       	std	Z+3, r24	; 0x03
}
     9ee:	0f 90       	pop	r0
     9f0:	0f 90       	pop	r0
     9f2:	0f 90       	pop	r0
     9f4:	0f 90       	pop	r0
     9f6:	cf 91       	pop	r28
     9f8:	df 91       	pop	r29
     9fa:	08 95       	ret

000009fc <vsmp_init>:
void vsmp_init( void )
{
     9fc:	df 93       	push	r29
     9fe:	cf 93       	push	r28
     a00:	00 d0       	rcall	.+0      	; 0xa02 <vsmp_init+0x6>
     a02:	00 d0       	rcall	.+0      	; 0xa04 <vsmp_init+0x8>
     a04:	cd b7       	in	r28, 0x3d	; 61
     a06:	de b7       	in	r29, 0x3e	; 62
    cli();
     a08:	f8 94       	cli
    vsmp_vm_init( &vm_state[0], (stack_t *)0 );
     a0a:	8d e1       	ldi	r24, 0x1D	; 29
     a0c:	91 e0       	ldi	r25, 0x01	; 1
     a0e:	60 e0       	ldi	r22, 0x00	; 0
     a10:	70 e0       	ldi	r23, 0x00	; 0
     a12:	0e 94 df 04 	call	0x9be	; 0x9be <vsmp_vm_init>
    for( current_vm = 1; current_vm < MAX_CORES; current_vm++ )
     a16:	81 e0       	ldi	r24, 0x01	; 1
     a18:	80 93 1c 01 	sts	0x011C, r24
     a1c:	49 c0       	rjmp	.+146    	; 0xab0 <vsmp_init+0xb4>
    {
        stack_t * vm_sp;
        unsigned short i;
        for(i = 0; i < VM_STACK_SIZE; i++ )vm_stack[current_vm - 1][i] = 0x55;
     a1e:	1a 82       	std	Y+2, r1	; 0x02
     a20:	19 82       	std	Y+1, r1	; 0x01
     a22:	15 c0       	rjmp	.+42     	; 0xa4e <vsmp_init+0x52>
     a24:	80 91 1c 01 	lds	r24, 0x011C
     a28:	88 2f       	mov	r24, r24
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	01 97       	sbiw	r24, 0x01	; 1
     a2e:	29 81       	ldd	r18, Y+1	; 0x01
     a30:	3a 81       	ldd	r19, Y+2	; 0x02
     a32:	98 2f       	mov	r25, r24
     a34:	88 27       	eor	r24, r24
     a36:	82 0f       	add	r24, r18
     a38:	93 1f       	adc	r25, r19
     a3a:	fc 01       	movw	r30, r24
     a3c:	e7 5b       	subi	r30, 0xB7	; 183
     a3e:	fe 4f       	sbci	r31, 0xFE	; 254
     a40:	85 e5       	ldi	r24, 0x55	; 85
     a42:	80 83       	st	Z, r24
     a44:	89 81       	ldd	r24, Y+1	; 0x01
     a46:	9a 81       	ldd	r25, Y+2	; 0x02
     a48:	01 96       	adiw	r24, 0x01	; 1
     a4a:	9a 83       	std	Y+2, r25	; 0x02
     a4c:	89 83       	std	Y+1, r24	; 0x01
     a4e:	89 81       	ldd	r24, Y+1	; 0x01
     a50:	9a 81       	ldd	r25, Y+2	; 0x02
     a52:	8f 3f       	cpi	r24, 0xFF	; 255
     a54:	91 05       	cpc	r25, r1
     a56:	31 f3       	breq	.-52     	; 0xa24 <vsmp_init+0x28>
     a58:	28 f3       	brcs	.-54     	; 0xa24 <vsmp_init+0x28>
        vm_sp = proc_stack_init( &vm_stack[current_vm - 1][VM_STACK_SIZE - 1], (code_t)vsmp_idle_main, (void *)0 );
     a5a:	80 91 1c 01 	lds	r24, 0x011C
     a5e:	88 2f       	mov	r24, r24
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	01 97       	sbiw	r24, 0x01	; 1
     a64:	98 2f       	mov	r25, r24
     a66:	88 27       	eor	r24, r24
     a68:	81 50       	subi	r24, 0x01	; 1
     a6a:	9f 4f       	sbci	r25, 0xFF	; 255
     a6c:	87 5b       	subi	r24, 0xB7	; 183
     a6e:	9e 4f       	sbci	r25, 0xFE	; 254
     a70:	2e e6       	ldi	r18, 0x6E	; 110
     a72:	35 e0       	ldi	r19, 0x05	; 5
     a74:	b9 01       	movw	r22, r18
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	0e 94 8a 07 	call	0xf14	; 0xf14 <proc_stack_init>
     a7e:	9c 83       	std	Y+4, r25	; 0x04
     a80:	8b 83       	std	Y+3, r24	; 0x03
        vsmp_vm_init( &vm_state[current_vm], (stack_t *)vm_sp );
     a82:	80 91 1c 01 	lds	r24, 0x011C
     a86:	28 2f       	mov	r18, r24
     a88:	30 e0       	ldi	r19, 0x00	; 0
     a8a:	c9 01       	movw	r24, r18
     a8c:	88 0f       	add	r24, r24
     a8e:	99 1f       	adc	r25, r25
     a90:	88 0f       	add	r24, r24
     a92:	99 1f       	adc	r25, r25
     a94:	82 0f       	add	r24, r18
     a96:	93 1f       	adc	r25, r19
     a98:	83 5e       	subi	r24, 0xE3	; 227
     a9a:	9e 4f       	sbci	r25, 0xFE	; 254
     a9c:	2b 81       	ldd	r18, Y+3	; 0x03
     a9e:	3c 81       	ldd	r19, Y+4	; 0x04
     aa0:	b9 01       	movw	r22, r18
     aa2:	0e 94 df 04 	call	0x9be	; 0x9be <vsmp_vm_init>
}
void vsmp_init( void )
{
    cli();
    vsmp_vm_init( &vm_state[0], (stack_t *)0 );
    for( current_vm = 1; current_vm < MAX_CORES; current_vm++ )
     aa6:	80 91 1c 01 	lds	r24, 0x011C
     aaa:	8f 5f       	subi	r24, 0xFF	; 255
     aac:	80 93 1c 01 	sts	0x011C, r24
     ab0:	80 91 1c 01 	lds	r24, 0x011C
     ab4:	82 30       	cpi	r24, 0x02	; 2
     ab6:	08 f4       	brcc	.+2      	; 0xaba <vsmp_init+0xbe>
     ab8:	b2 cf       	rjmp	.-156    	; 0xa1e <vsmp_init+0x22>
        unsigned short i;
        for(i = 0; i < VM_STACK_SIZE; i++ )vm_stack[current_vm - 1][i] = 0x55;
        vm_sp = proc_stack_init( &vm_stack[current_vm - 1][VM_STACK_SIZE - 1], (code_t)vsmp_idle_main, (void *)0 );
        vsmp_vm_init( &vm_state[current_vm], (stack_t *)vm_sp );
    }
    current_vm = 0;
     aba:	10 92 1c 01 	sts	0x011C, r1
}
     abe:	0f 90       	pop	r0
     ac0:	0f 90       	pop	r0
     ac2:	0f 90       	pop	r0
     ac4:	0f 90       	pop	r0
     ac6:	cf 91       	pop	r28
     ac8:	df 91       	pop	r29
     aca:	08 95       	ret

00000acc <vsmp_run>:

void vsmp_run( void )
{
     acc:	df 93       	push	r29
     ace:	cf 93       	push	r28
     ad0:	cd b7       	in	r28, 0x3d	; 61
     ad2:	de b7       	in	r29, 0x3e	; 62
    sei();
     ad4:	78 94       	sei
}
     ad6:	cf 91       	pop	r28
     ad8:	df 91       	pop	r29
     ada:	08 95       	ret

00000adc <vsmp_idle_main>:
void vsmp_idle_main( void * arg )
{
     adc:	df 93       	push	r29
     ade:	cf 93       	push	r28
     ae0:	00 d0       	rcall	.+0      	; 0xae2 <vsmp_idle_main+0x6>
     ae2:	cd b7       	in	r28, 0x3d	; 61
     ae4:	de b7       	in	r29, 0x3e	; 62
     ae6:	9a 83       	std	Y+2, r25	; 0x02
     ae8:	89 83       	std	Y+1, r24	; 0x01
     aea:	ff cf       	rjmp	.-2      	; 0xaea <vsmp_idle_main+0xe>

00000aec <vsmp_do_interrupt>:
    while(1);
}

bool_t vsmp_do_interrupt(void)
{
     aec:	df 93       	push	r29
     aee:	cf 93       	push	r28
     af0:	0f 92       	push	r0
     af2:	cd b7       	in	r28, 0x3d	; 61
     af4:	de b7       	in	r29, 0x3e	; 62
    // if current vm is interruptible and there are some interrupts in fifo,
    if( (vm_state[current_vm].int_enabled) && (vm_state[current_vm].int_fifo) )
     af6:	80 91 1c 01 	lds	r24, 0x011C
     afa:	28 2f       	mov	r18, r24
     afc:	30 e0       	ldi	r19, 0x00	; 0
     afe:	c9 01       	movw	r24, r18
     b00:	88 0f       	add	r24, r24
     b02:	99 1f       	adc	r25, r25
     b04:	88 0f       	add	r24, r24
     b06:	99 1f       	adc	r25, r25
     b08:	82 0f       	add	r24, r18
     b0a:	93 1f       	adc	r25, r19
     b0c:	fc 01       	movw	r30, r24
     b0e:	e1 5e       	subi	r30, 0xE1	; 225
     b10:	fe 4f       	sbci	r31, 0xFE	; 254
     b12:	80 81       	ld	r24, Z
     b14:	88 23       	and	r24, r24
     b16:	09 f4       	brne	.+2      	; 0xb1a <vsmp_do_interrupt+0x2e>
     b18:	71 c0       	rjmp	.+226    	; 0xbfc <vsmp_do_interrupt+0x110>
     b1a:	80 91 1c 01 	lds	r24, 0x011C
     b1e:	28 2f       	mov	r18, r24
     b20:	30 e0       	ldi	r19, 0x00	; 0
     b22:	c9 01       	movw	r24, r18
     b24:	88 0f       	add	r24, r24
     b26:	99 1f       	adc	r25, r25
     b28:	88 0f       	add	r24, r24
     b2a:	99 1f       	adc	r25, r25
     b2c:	82 0f       	add	r24, r18
     b2e:	93 1f       	adc	r25, r19
     b30:	fc 01       	movw	r30, r24
     b32:	e3 5e       	subi	r30, 0xE3	; 227
     b34:	fe 4f       	sbci	r31, 0xFE	; 254
     b36:	80 81       	ld	r24, Z
     b38:	91 81       	ldd	r25, Z+1	; 0x01
     b3a:	00 97       	sbiw	r24, 0x00	; 0
     b3c:	09 f4       	brne	.+2      	; 0xb40 <vsmp_do_interrupt+0x54>
     b3e:	5e c0       	rjmp	.+188    	; 0xbfc <vsmp_do_interrupt+0x110>
    {
        // cut head interrupt,
        vm_buf = (void *)vm_state[current_vm].int_fifo;
     b40:	80 91 1c 01 	lds	r24, 0x011C
     b44:	28 2f       	mov	r18, r24
     b46:	30 e0       	ldi	r19, 0x00	; 0
     b48:	c9 01       	movw	r24, r18
     b4a:	88 0f       	add	r24, r24
     b4c:	99 1f       	adc	r25, r25
     b4e:	88 0f       	add	r24, r24
     b50:	99 1f       	adc	r25, r25
     b52:	82 0f       	add	r24, r18
     b54:	93 1f       	adc	r25, r19
     b56:	fc 01       	movw	r30, r24
     b58:	e3 5e       	subi	r30, 0xE3	; 227
     b5a:	fe 4f       	sbci	r31, 0xFE	; 254
     b5c:	80 81       	ld	r24, Z
     b5e:	91 81       	ldd	r25, Z+1	; 0x01
     b60:	90 93 48 01 	sts	0x0148, r25
     b64:	80 93 47 01 	sts	0x0147, r24
        if( vm_buf == (void *)((item_t *)vm_buf)->next )
     b68:	80 91 47 01 	lds	r24, 0x0147
     b6c:	90 91 48 01 	lds	r25, 0x0148
     b70:	fc 01       	movw	r30, r24
     b72:	20 81       	ld	r18, Z
     b74:	31 81       	ldd	r19, Z+1	; 0x01
     b76:	80 91 47 01 	lds	r24, 0x0147
     b7a:	90 91 48 01 	lds	r25, 0x0148
     b7e:	28 17       	cp	r18, r24
     b80:	39 07       	cpc	r19, r25
     b82:	89 f4       	brne	.+34     	; 0xba6 <vsmp_do_interrupt+0xba>
        {
            /* only one interrupt in fifo */
            vm_state[current_vm].int_fifo = (item_t *)0;
     b84:	80 91 1c 01 	lds	r24, 0x011C
     b88:	28 2f       	mov	r18, r24
     b8a:	30 e0       	ldi	r19, 0x00	; 0
     b8c:	c9 01       	movw	r24, r18
     b8e:	88 0f       	add	r24, r24
     b90:	99 1f       	adc	r25, r25
     b92:	88 0f       	add	r24, r24
     b94:	99 1f       	adc	r25, r25
     b96:	82 0f       	add	r24, r18
     b98:	93 1f       	adc	r25, r19
     b9a:	fc 01       	movw	r30, r24
     b9c:	e3 5e       	subi	r30, 0xE3	; 227
     b9e:	fe 4f       	sbci	r31, 0xFE	; 254
     ba0:	11 82       	std	Z+1, r1	; 0x01
     ba2:	10 82       	st	Z, r1
     ba4:	1d c0       	rjmp	.+58     	; 0xbe0 <vsmp_do_interrupt+0xf4>
        }
        else
        {
            /* many interrupts in fifo */
            vm_state[current_vm].int_fifo = (void *)((item_t *)vm_buf)->next;
     ba6:	80 91 1c 01 	lds	r24, 0x011C
     baa:	28 2f       	mov	r18, r24
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	80 91 47 01 	lds	r24, 0x0147
     bb2:	90 91 48 01 	lds	r25, 0x0148
     bb6:	fc 01       	movw	r30, r24
     bb8:	40 81       	ld	r20, Z
     bba:	51 81       	ldd	r21, Z+1	; 0x01
     bbc:	c9 01       	movw	r24, r18
     bbe:	88 0f       	add	r24, r24
     bc0:	99 1f       	adc	r25, r25
     bc2:	88 0f       	add	r24, r24
     bc4:	99 1f       	adc	r25, r25
     bc6:	82 0f       	add	r24, r18
     bc8:	93 1f       	adc	r25, r19
     bca:	fc 01       	movw	r30, r24
     bcc:	e3 5e       	subi	r30, 0xE3	; 227
     bce:	fe 4f       	sbci	r31, 0xFE	; 254
     bd0:	51 83       	std	Z+1, r21	; 0x01
     bd2:	40 83       	st	Z, r20
            item_cut( (item_t *)vm_buf );
     bd4:	80 91 47 01 	lds	r24, 0x0147
     bd8:	90 91 48 01 	lds	r25, 0x0148
     bdc:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <item_cut>
        }
        // write its isr pointer to vm_buf,
        vm_buf = (void *)(((vinterrupt_t *)vm_buf)->isr);
     be0:	80 91 47 01 	lds	r24, 0x0147
     be4:	90 91 48 01 	lds	r25, 0x0148
     be8:	fc 01       	movw	r30, r24
     bea:	84 81       	ldd	r24, Z+4	; 0x04
     bec:	95 81       	ldd	r25, Z+5	; 0x05
     bee:	90 93 48 01 	sts	0x0148, r25
     bf2:	80 93 47 01 	sts	0x0147, r24
        // and return 1;
        return (bool_t)1;
     bf6:	81 e0       	ldi	r24, 0x01	; 1
     bf8:	89 83       	std	Y+1, r24	; 0x01
     bfa:	01 c0       	rjmp	.+2      	; 0xbfe <vsmp_do_interrupt+0x112>
    }
    // else return 0.
    return (bool_t)0;
     bfc:	19 82       	std	Y+1, r1	; 0x01
     bfe:	89 81       	ldd	r24, Y+1	; 0x01
}
     c00:	0f 90       	pop	r0
     c02:	cf 91       	pop	r28
     c04:	df 91       	pop	r29
     c06:	08 95       	ret

00000c08 <_vinterrupt_wrapper>:
                       Virtual interrupts wrapper functions.
    Local variable is used to call virtual ISR, so wrapper must have two parts.
*/
// Nested part, uses local variables, so compiler generated prologue and epilogue are needed.
static void _vinterrupt_wrapper(void)
{
     c08:	df 93       	push	r29
     c0a:	cf 93       	push	r28
     c0c:	00 d0       	rcall	.+0      	; 0xc0e <_vinterrupt_wrapper+0x6>
     c0e:	cd b7       	in	r28, 0x3d	; 61
     c10:	de b7       	in	r29, 0x3e	; 62
    void (*isr)(void);
    vm_state[current_vm].int_enabled = (bool_t)0; // Virtual interrupt nesting is not alowed by default.
     c12:	80 91 1c 01 	lds	r24, 0x011C
     c16:	28 2f       	mov	r18, r24
     c18:	30 e0       	ldi	r19, 0x00	; 0
     c1a:	c9 01       	movw	r24, r18
     c1c:	88 0f       	add	r24, r24
     c1e:	99 1f       	adc	r25, r25
     c20:	88 0f       	add	r24, r24
     c22:	99 1f       	adc	r25, r25
     c24:	82 0f       	add	r24, r18
     c26:	93 1f       	adc	r25, r19
     c28:	fc 01       	movw	r30, r24
     c2a:	e1 5e       	subi	r30, 0xE1	; 225
     c2c:	fe 4f       	sbci	r31, 0xFE	; 254
     c2e:	10 82       	st	Z, r1
    isr = (void (*)(void))vm_buf;
     c30:	80 91 47 01 	lds	r24, 0x0147
     c34:	90 91 48 01 	lds	r25, 0x0148
     c38:	9a 83       	std	Y+2, r25	; 0x02
     c3a:	89 83       	std	Y+1, r24	; 0x01
    // After vm-buf read we can reenable real interrupts!
    sei();
     c3c:	78 94       	sei
    isr();
     c3e:	e9 81       	ldd	r30, Y+1	; 0x01
     c40:	fa 81       	ldd	r31, Y+2	; 0x02
     c42:	09 95       	icall
}
     c44:	0f 90       	pop	r0
     c46:	0f 90       	pop	r0
     c48:	cf 91       	pop	r28
     c4a:	df 91       	pop	r29
     c4c:	08 95       	ret

00000c4e <vinterrupt_wrapper>:
// Nesting part, no prologue and hand made epilogue.
__attribute__ (( naked )) void vinterrupt_wrapper(void)
{
    _vinterrupt_wrapper();
     c4e:	0e 94 04 06 	call	0xc08	; 0xc08 <_vinterrupt_wrapper>
    cli();
     c52:	f8 94       	cli
    // Virtual interrupts are enabled after interrupt processing.
    vm_state[current_vm].int_enabled = (bool_t)1;
     c54:	80 91 1c 01 	lds	r24, 0x011C
     c58:	28 2f       	mov	r18, r24
     c5a:	30 e0       	ldi	r19, 0x00	; 0
     c5c:	c9 01       	movw	r24, r18
     c5e:	88 0f       	add	r24, r24
     c60:	99 1f       	adc	r25, r25
     c62:	88 0f       	add	r24, r24
     c64:	99 1f       	adc	r25, r25
     c66:	82 0f       	add	r24, r18
     c68:	93 1f       	adc	r25, r19
     c6a:	fc 01       	movw	r30, r24
     c6c:	e1 5e       	subi	r30, 0xE1	; 225
     c6e:	fe 4f       	sbci	r31, 0xFE	; 254
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	80 83       	st	Z, r24
    vm_buf = (void *)bugurt_save_context();
    vm_state[current_vm].sp = (stack_t *)vm_buf;
}
__MACRO_FUNCTION__( _vsmp_interrupt_epilogue )
{
    if( vsmp_do_interrupt() ) goto vinterrupt_return;
     c74:	0e 94 76 05 	call	0xaec	; 0xaec <vsmp_do_interrupt>
     c78:	88 23       	and	r24, r24
     c7a:	99 f4       	brne	.+38     	; 0xca2 <vinterrupt_wrapper+0x54>

    bugurt_restore_context( vm_state[current_vm].sp ); // Will return to current vm operation!
     c7c:	80 91 1c 01 	lds	r24, 0x011C
     c80:	28 2f       	mov	r18, r24
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	c9 01       	movw	r24, r18
     c86:	88 0f       	add	r24, r24
     c88:	99 1f       	adc	r25, r25
     c8a:	88 0f       	add	r24, r24
     c8c:	99 1f       	adc	r25, r25
     c8e:	82 0f       	add	r24, r18
     c90:	93 1f       	adc	r25, r19
     c92:	fc 01       	movw	r30, r24
     c94:	e0 5e       	subi	r30, 0xE0	; 224
     c96:	fe 4f       	sbci	r31, 0xFE	; 254
     c98:	80 81       	ld	r24, Z
     c9a:	91 81       	ldd	r25, Z+1	; 0x01
     c9c:	0e 94 9a 00 	call	0x134	; 0x134 <bugurt_restore_context>
    __asm__ __volatile__("reti"::);
     ca0:	18 95       	reti

vinterrupt_return:
    bugurt_set_stack_pointer( vm_state[current_vm].sp );
     ca2:	80 91 1c 01 	lds	r24, 0x011C
     ca6:	28 2f       	mov	r18, r24
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	c9 01       	movw	r24, r18
     cac:	88 0f       	add	r24, r24
     cae:	99 1f       	adc	r25, r25
     cb0:	88 0f       	add	r24, r24
     cb2:	99 1f       	adc	r25, r25
     cb4:	82 0f       	add	r24, r18
     cb6:	93 1f       	adc	r25, r19
     cb8:	fc 01       	movw	r30, r24
     cba:	e0 5e       	subi	r30, 0xE0	; 224
     cbc:	fe 4f       	sbci	r31, 0xFE	; 254
     cbe:	80 81       	ld	r24, Z
     cc0:	91 81       	ldd	r25, Z+1	; 0x01
     cc2:	0e 94 c5 00 	call	0x18a	; 0x18a <bugurt_set_stack_pointer>
    bugurt_push_pointer( (void *)vinterrupt_wrapper ); // Will return to vinterrupt_wrapper() entry point!
     cc6:	87 e2       	ldi	r24, 0x27	; 39
     cc8:	96 e0       	ldi	r25, 0x06	; 6
     cca:	0e 94 cd 00 	call	0x19a	; 0x19a <bugurt_push_pointer>
    __asm__ __volatile__("ret"::);
     cce:	08 95       	ret

00000cd0 <__vector_7>:
}

/* Virtual interrupt prologue and epilogue inline functions (I can,t debug macros !) */
__MACRO_FUNCTION__( _vsmp_interrupt_prologue )
{
    vm_buf = (void *)bugurt_save_context();
     cd0:	0e 94 6b 00 	call	0xd6	; 0xd6 <bugurt_save_context>
     cd4:	90 93 48 01 	sts	0x0148, r25
     cd8:	80 93 47 01 	sts	0x0147, r24
    vm_state[current_vm].sp = (stack_t *)vm_buf;
     cdc:	80 91 1c 01 	lds	r24, 0x011C
     ce0:	28 2f       	mov	r18, r24
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	80 91 47 01 	lds	r24, 0x0147
     ce8:	90 91 48 01 	lds	r25, 0x0148
     cec:	ac 01       	movw	r20, r24
     cee:	c9 01       	movw	r24, r18
     cf0:	88 0f       	add	r24, r24
     cf2:	99 1f       	adc	r25, r25
     cf4:	88 0f       	add	r24, r24
     cf6:	99 1f       	adc	r25, r25
     cf8:	82 0f       	add	r24, r18
     cfa:	93 1f       	adc	r25, r19
     cfc:	fc 01       	movw	r30, r24
     cfe:	e0 5e       	subi	r30, 0xE0	; 224
     d00:	fe 4f       	sbci	r31, 0xFE	; 254
     d02:	51 83       	std	Z+1, r21	; 0x01
     d04:	40 83       	st	Z, r20
__attribute__ (( signal, naked )) void SYSTEM_TIMER_ISR(void);
void SYSTEM_TIMER_ISR(void)
{
    _vsmp_interrupt_prologue();

    current_vm++;
     d06:	80 91 1c 01 	lds	r24, 0x011C
     d0a:	8f 5f       	subi	r24, 0xFF	; 255
     d0c:	80 93 1c 01 	sts	0x011C, r24
    if(current_vm >= MAX_CORES)current_vm = (core_id_t)0;
     d10:	80 91 1c 01 	lds	r24, 0x011C
     d14:	82 30       	cpi	r24, 0x02	; 2
     d16:	10 f0       	brcs	.+4      	; 0xd1c <__vector_7+0x4c>
     d18:	10 92 1c 01 	sts	0x011C, r1

    if(vsmp_systimer_hook)
     d1c:	80 91 49 02 	lds	r24, 0x0249
     d20:	90 91 4a 02 	lds	r25, 0x024A
     d24:	00 97       	sbiw	r24, 0x00	; 0
     d26:	29 f0       	breq	.+10     	; 0xd32 <__vector_7+0x62>
    {
        vsmp_systimer_hook();
     d28:	e0 91 49 02 	lds	r30, 0x0249
     d2c:	f0 91 4a 02 	lds	r31, 0x024A
     d30:	09 95       	icall
    vm_buf = (void *)bugurt_save_context();
    vm_state[current_vm].sp = (stack_t *)vm_buf;
}
__MACRO_FUNCTION__( _vsmp_interrupt_epilogue )
{
    if( vsmp_do_interrupt() ) goto vinterrupt_return;
     d32:	0e 94 76 05 	call	0xaec	; 0xaec <vsmp_do_interrupt>
     d36:	88 23       	and	r24, r24
     d38:	99 f4       	brne	.+38     	; 0xd60 <__vector_7+0x90>

    bugurt_restore_context( vm_state[current_vm].sp ); // Will return to current vm operation!
     d3a:	80 91 1c 01 	lds	r24, 0x011C
     d3e:	28 2f       	mov	r18, r24
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	c9 01       	movw	r24, r18
     d44:	88 0f       	add	r24, r24
     d46:	99 1f       	adc	r25, r25
     d48:	88 0f       	add	r24, r24
     d4a:	99 1f       	adc	r25, r25
     d4c:	82 0f       	add	r24, r18
     d4e:	93 1f       	adc	r25, r19
     d50:	fc 01       	movw	r30, r24
     d52:	e0 5e       	subi	r30, 0xE0	; 224
     d54:	fe 4f       	sbci	r31, 0xFE	; 254
     d56:	80 81       	ld	r24, Z
     d58:	91 81       	ldd	r25, Z+1	; 0x01
     d5a:	0e 94 9a 00 	call	0x134	; 0x134 <bugurt_restore_context>
    __asm__ __volatile__("reti"::);
     d5e:	18 95       	reti

vinterrupt_return:
    bugurt_set_stack_pointer( vm_state[current_vm].sp );
     d60:	80 91 1c 01 	lds	r24, 0x011C
     d64:	28 2f       	mov	r18, r24
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	c9 01       	movw	r24, r18
     d6a:	88 0f       	add	r24, r24
     d6c:	99 1f       	adc	r25, r25
     d6e:	88 0f       	add	r24, r24
     d70:	99 1f       	adc	r25, r25
     d72:	82 0f       	add	r24, r18
     d74:	93 1f       	adc	r25, r19
     d76:	fc 01       	movw	r30, r24
     d78:	e0 5e       	subi	r30, 0xE0	; 224
     d7a:	fe 4f       	sbci	r31, 0xFE	; 254
     d7c:	80 81       	ld	r24, Z
     d7e:	91 81       	ldd	r25, Z+1	; 0x01
     d80:	0e 94 c5 00 	call	0x18a	; 0x18a <bugurt_set_stack_pointer>
    bugurt_push_pointer( (void *)vinterrupt_wrapper ); // Will return to vinterrupt_wrapper() entry point!
     d84:	87 e2       	ldi	r24, 0x27	; 39
     d86:	96 e0       	ldi	r25, 0x06	; 6
     d88:	0e 94 cd 00 	call	0x19a	; 0x19a <bugurt_push_pointer>
    __asm__ __volatile__("ret"::);
     d8c:	08 95       	ret

00000d8e <_vsmp_vinterrupt>:
}

/* Virtual interrupt prologue and epilogue inline functions (I can,t debug macros !) */
__MACRO_FUNCTION__( _vsmp_interrupt_prologue )
{
    vm_buf = (void *)bugurt_save_context();
     d8e:	0e 94 6b 00 	call	0xd6	; 0xd6 <bugurt_save_context>
     d92:	90 93 48 01 	sts	0x0148, r25
     d96:	80 93 47 01 	sts	0x0147, r24
    vm_state[current_vm].sp = (stack_t *)vm_buf;
     d9a:	80 91 1c 01 	lds	r24, 0x011C
     d9e:	28 2f       	mov	r18, r24
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	80 91 47 01 	lds	r24, 0x0147
     da6:	90 91 48 01 	lds	r25, 0x0148
     daa:	ac 01       	movw	r20, r24
     dac:	c9 01       	movw	r24, r18
     dae:	88 0f       	add	r24, r24
     db0:	99 1f       	adc	r25, r25
     db2:	88 0f       	add	r24, r24
     db4:	99 1f       	adc	r25, r25
     db6:	82 0f       	add	r24, r18
     db8:	93 1f       	adc	r25, r19
     dba:	fc 01       	movw	r30, r24
     dbc:	e0 5e       	subi	r30, 0xE0	; 224
     dbe:	fe 4f       	sbci	r31, 0xFE	; 254
     dc0:	51 83       	std	Z+1, r21	; 0x01
     dc2:	40 83       	st	Z, r20
}
__MACRO_FUNCTION__( _vsmp_interrupt_epilogue )
{
    if( vsmp_do_interrupt() ) goto vinterrupt_return;
     dc4:	0e 94 76 05 	call	0xaec	; 0xaec <vsmp_do_interrupt>
     dc8:	88 23       	and	r24, r24
     dca:	99 f4       	brne	.+38     	; 0xdf2 <_vsmp_vinterrupt+0x64>

    bugurt_restore_context( vm_state[current_vm].sp ); // Will return to current vm operation!
     dcc:	80 91 1c 01 	lds	r24, 0x011C
     dd0:	28 2f       	mov	r18, r24
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	c9 01       	movw	r24, r18
     dd6:	88 0f       	add	r24, r24
     dd8:	99 1f       	adc	r25, r25
     dda:	88 0f       	add	r24, r24
     ddc:	99 1f       	adc	r25, r25
     dde:	82 0f       	add	r24, r18
     de0:	93 1f       	adc	r25, r19
     de2:	fc 01       	movw	r30, r24
     de4:	e0 5e       	subi	r30, 0xE0	; 224
     de6:	fe 4f       	sbci	r31, 0xFE	; 254
     de8:	80 81       	ld	r24, Z
     dea:	91 81       	ldd	r25, Z+1	; 0x01
     dec:	0e 94 9a 00 	call	0x134	; 0x134 <bugurt_restore_context>
    __asm__ __volatile__("reti"::);
     df0:	18 95       	reti

vinterrupt_return:
    bugurt_set_stack_pointer( vm_state[current_vm].sp );
     df2:	80 91 1c 01 	lds	r24, 0x011C
     df6:	28 2f       	mov	r18, r24
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	c9 01       	movw	r24, r18
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	88 0f       	add	r24, r24
     e02:	99 1f       	adc	r25, r25
     e04:	82 0f       	add	r24, r18
     e06:	93 1f       	adc	r25, r19
     e08:	fc 01       	movw	r30, r24
     e0a:	e0 5e       	subi	r30, 0xE0	; 224
     e0c:	fe 4f       	sbci	r31, 0xFE	; 254
     e0e:	80 81       	ld	r24, Z
     e10:	91 81       	ldd	r25, Z+1	; 0x01
     e12:	0e 94 c5 00 	call	0x18a	; 0x18a <bugurt_set_stack_pointer>
    bugurt_push_pointer( (void *)vinterrupt_wrapper ); // Will return to vinterrupt_wrapper() entry point!
     e16:	87 e2       	ldi	r24, 0x27	; 39
     e18:	96 e0       	ldi	r25, 0x06	; 6
     e1a:	0e 94 cd 00 	call	0x19a	; 0x19a <bugurt_push_pointer>
    __asm__ __volatile__("ret"::);
     e1e:	08 95       	ret

00000e20 <vsmp_vinterrupt_isr>:
    _vsmp_interrupt_epilogue();
}

// Software virtual interrupt ( For ISR usage only ! Do NOT call from "main"!)
void vsmp_vinterrupt_isr( core_id_t vm, vinterrupt_t * vector )
{
     e20:	df 93       	push	r29
     e22:	cf 93       	push	r28
     e24:	00 d0       	rcall	.+0      	; 0xe26 <vsmp_vinterrupt_isr+0x6>
     e26:	0f 92       	push	r0
     e28:	cd b7       	in	r28, 0x3d	; 61
     e2a:	de b7       	in	r29, 0x3e	; 62
     e2c:	89 83       	std	Y+1, r24	; 0x01
     e2e:	7b 83       	std	Y+3, r23	; 0x03
     e30:	6a 83       	std	Y+2, r22	; 0x02
    if( vm_state[vm].int_fifo )
     e32:	89 81       	ldd	r24, Y+1	; 0x01
     e34:	28 2f       	mov	r18, r24
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	c9 01       	movw	r24, r18
     e3a:	88 0f       	add	r24, r24
     e3c:	99 1f       	adc	r25, r25
     e3e:	88 0f       	add	r24, r24
     e40:	99 1f       	adc	r25, r25
     e42:	82 0f       	add	r24, r18
     e44:	93 1f       	adc	r25, r19
     e46:	fc 01       	movw	r30, r24
     e48:	e3 5e       	subi	r30, 0xE3	; 227
     e4a:	fe 4f       	sbci	r31, 0xFE	; 254
     e4c:	80 81       	ld	r24, Z
     e4e:	91 81       	ldd	r25, Z+1	; 0x01
     e50:	00 97       	sbiw	r24, 0x00	; 0
     e52:	b1 f0       	breq	.+44     	; 0xe80 <vsmp_vinterrupt_isr+0x60>
    {
        item_insert( (item_t *)vector, (item_t *)vm_state[vm].int_fifo );
     e54:	4a 81       	ldd	r20, Y+2	; 0x02
     e56:	5b 81       	ldd	r21, Y+3	; 0x03
     e58:	89 81       	ldd	r24, Y+1	; 0x01
     e5a:	28 2f       	mov	r18, r24
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	c9 01       	movw	r24, r18
     e60:	88 0f       	add	r24, r24
     e62:	99 1f       	adc	r25, r25
     e64:	88 0f       	add	r24, r24
     e66:	99 1f       	adc	r25, r25
     e68:	82 0f       	add	r24, r18
     e6a:	93 1f       	adc	r25, r19
     e6c:	fc 01       	movw	r30, r24
     e6e:	e3 5e       	subi	r30, 0xE3	; 227
     e70:	fe 4f       	sbci	r31, 0xFE	; 254
     e72:	20 81       	ld	r18, Z
     e74:	31 81       	ldd	r19, Z+1	; 0x01
     e76:	ca 01       	movw	r24, r20
     e78:	b9 01       	movw	r22, r18
     e7a:	0e 94 3e 0a 	call	0x147c	; 0x147c <item_insert>
     e7e:	11 c0       	rjmp	.+34     	; 0xea2 <vsmp_vinterrupt_isr+0x82>
    }
    else
    {
        vm_state[vm].int_fifo = (item_t *)vector;
     e80:	89 81       	ldd	r24, Y+1	; 0x01
     e82:	28 2f       	mov	r18, r24
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	4a 81       	ldd	r20, Y+2	; 0x02
     e88:	5b 81       	ldd	r21, Y+3	; 0x03
     e8a:	c9 01       	movw	r24, r18
     e8c:	88 0f       	add	r24, r24
     e8e:	99 1f       	adc	r25, r25
     e90:	88 0f       	add	r24, r24
     e92:	99 1f       	adc	r25, r25
     e94:	82 0f       	add	r24, r18
     e96:	93 1f       	adc	r25, r19
     e98:	fc 01       	movw	r30, r24
     e9a:	e3 5e       	subi	r30, 0xE3	; 227
     e9c:	fe 4f       	sbci	r31, 0xFE	; 254
     e9e:	51 83       	std	Z+1, r21	; 0x01
     ea0:	40 83       	st	Z, r20
    }
}
     ea2:	0f 90       	pop	r0
     ea4:	0f 90       	pop	r0
     ea6:	0f 90       	pop	r0
     ea8:	cf 91       	pop	r28
     eaa:	df 91       	pop	r29
     eac:	08 95       	ret

00000eae <vsmp_vinterrupt>:
// Software virtual interrupt ( Use in "main" only ! Do NOT call from ISR!)
void vsmp_vinterrupt( core_id_t vm, vinterrupt_t * vector )
{
     eae:	df 93       	push	r29
     eb0:	cf 93       	push	r28
     eb2:	00 d0       	rcall	.+0      	; 0xeb4 <vsmp_vinterrupt+0x6>
     eb4:	0f 92       	push	r0
     eb6:	cd b7       	in	r28, 0x3d	; 61
     eb8:	de b7       	in	r29, 0x3e	; 62
     eba:	89 83       	std	Y+1, r24	; 0x01
     ebc:	7b 83       	std	Y+3, r23	; 0x03
     ebe:	6a 83       	std	Y+2, r22	; 0x02
    cli();
     ec0:	f8 94       	cli
    vsmp_vinterrupt_isr( vm, vector );
     ec2:	2a 81       	ldd	r18, Y+2	; 0x02
     ec4:	3b 81       	ldd	r19, Y+3	; 0x03
     ec6:	89 81       	ldd	r24, Y+1	; 0x01
     ec8:	b9 01       	movw	r22, r18
     eca:	0e 94 10 07 	call	0xe20	; 0xe20 <vsmp_vinterrupt_isr>
    _vsmp_vinterrupt();
     ece:	0e 94 c7 06 	call	0xd8e	; 0xd8e <_vsmp_vinterrupt>
}
     ed2:	0f 90       	pop	r0
     ed4:	0f 90       	pop	r0
     ed6:	0f 90       	pop	r0
     ed8:	cf 91       	pop	r28
     eda:	df 91       	pop	r29
     edc:	08 95       	ret

00000ede <vsmp_vinterrupt_init>:

void vsmp_vinterrupt_init( vinterrupt_t * vector, void (*isr)(void) )
{
     ede:	df 93       	push	r29
     ee0:	cf 93       	push	r28
     ee2:	00 d0       	rcall	.+0      	; 0xee4 <vsmp_vinterrupt_init+0x6>
     ee4:	00 d0       	rcall	.+0      	; 0xee6 <vsmp_vinterrupt_init+0x8>
     ee6:	cd b7       	in	r28, 0x3d	; 61
     ee8:	de b7       	in	r29, 0x3e	; 62
     eea:	9a 83       	std	Y+2, r25	; 0x02
     eec:	89 83       	std	Y+1, r24	; 0x01
     eee:	7c 83       	std	Y+4, r23	; 0x04
     ef0:	6b 83       	std	Y+3, r22	; 0x03
    item_init( (item_t *)vector );
     ef2:	89 81       	ldd	r24, Y+1	; 0x01
     ef4:	9a 81       	ldd	r25, Y+2	; 0x02
     ef6:	0e 94 26 0a 	call	0x144c	; 0x144c <item_init>
    vector->isr = isr;
     efa:	e9 81       	ldd	r30, Y+1	; 0x01
     efc:	fa 81       	ldd	r31, Y+2	; 0x02
     efe:	8b 81       	ldd	r24, Y+3	; 0x03
     f00:	9c 81       	ldd	r25, Y+4	; 0x04
     f02:	95 83       	std	Z+5, r25	; 0x05
     f04:	84 83       	std	Z+4, r24	; 0x04
}
     f06:	0f 90       	pop	r0
     f08:	0f 90       	pop	r0
     f0a:	0f 90       	pop	r0
     f0c:	0f 90       	pop	r0
     f0e:	cf 91       	pop	r28
     f10:	df 91       	pop	r29
     f12:	08 95       	ret

00000f14 <proc_stack_init>:
#include"../../../include/bugurt.h"
stack_t * proc_stack_init(stack_t * sstart, code_t code, void * arg)
{
     f14:	df 93       	push	r29
     f16:	cf 93       	push	r28
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
     f1c:	2a 97       	sbiw	r28, 0x0a	; 10
     f1e:	0f b6       	in	r0, 0x3f	; 63
     f20:	f8 94       	cli
     f22:	de bf       	out	0x3e, r29	; 62
     f24:	0f be       	out	0x3f, r0	; 63
     f26:	cd bf       	out	0x3d, r28	; 61
     f28:	9e 83       	std	Y+6, r25	; 0x06
     f2a:	8d 83       	std	Y+5, r24	; 0x05
     f2c:	78 87       	std	Y+8, r23	; 0x08
     f2e:	6f 83       	std	Y+7, r22	; 0x07
     f30:	5a 87       	std	Y+10, r21	; 0x0a
     f32:	49 87       	std	Y+9, r20	; 0x09
    stack_t * tos = (stack_t *)sstart;
     f34:	8d 81       	ldd	r24, Y+5	; 0x05
     f36:	9e 81       	ldd	r25, Y+6	; 0x06
     f38:	9c 83       	std	Y+4, r25	; 0x04
     f3a:	8b 83       	std	Y+3, r24	; 0x03
    // return address
    unsigned short tmp = (unsigned short)code;
     f3c:	8f 81       	ldd	r24, Y+7	; 0x07
     f3e:	98 85       	ldd	r25, Y+8	; 0x08
     f40:	9a 83       	std	Y+2, r25	; 0x02
     f42:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (stack_t)(tmp&(unsigned short)0x00ff);
     f44:	89 81       	ldd	r24, Y+1	; 0x01
     f46:	eb 81       	ldd	r30, Y+3	; 0x03
     f48:	fc 81       	ldd	r31, Y+4	; 0x04
     f4a:	80 83       	st	Z, r24
     f4c:	8b 81       	ldd	r24, Y+3	; 0x03
     f4e:	9c 81       	ldd	r25, Y+4	; 0x04
     f50:	01 97       	sbiw	r24, 0x01	; 1
     f52:	9c 83       	std	Y+4, r25	; 0x04
     f54:	8b 83       	std	Y+3, r24	; 0x03
    tmp>>=8;
     f56:	89 81       	ldd	r24, Y+1	; 0x01
     f58:	9a 81       	ldd	r25, Y+2	; 0x02
     f5a:	89 2f       	mov	r24, r25
     f5c:	99 27       	eor	r25, r25
     f5e:	9a 83       	std	Y+2, r25	; 0x02
     f60:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (stack_t)(tmp&(unsigned short)0x00ff);
     f62:	89 81       	ldd	r24, Y+1	; 0x01
     f64:	eb 81       	ldd	r30, Y+3	; 0x03
     f66:	fc 81       	ldd	r31, Y+4	; 0x04
     f68:	80 83       	st	Z, r24
     f6a:	8b 81       	ldd	r24, Y+3	; 0x03
     f6c:	9c 81       	ldd	r25, Y+4	; 0x04
     f6e:	01 97       	sbiw	r24, 0x01	; 1
     f70:	9c 83       	std	Y+4, r25	; 0x04
     f72:	8b 83       	std	Y+3, r24	; 0x03

    // s
    *tos-- = 0x00;
     f74:	eb 81       	ldd	r30, Y+3	; 0x03
     f76:	fc 81       	ldd	r31, Y+4	; 0x04
     f78:	10 82       	st	Z, r1
     f7a:	8b 81       	ldd	r24, Y+3	; 0x03
     f7c:	9c 81       	ldd	r25, Y+4	; 0x04
     f7e:	01 97       	sbiw	r24, 0x01	; 1
     f80:	9c 83       	std	Y+4, r25	; 0x04
     f82:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x00;// r1 must B 0
     f84:	eb 81       	ldd	r30, Y+3	; 0x03
     f86:	fc 81       	ldd	r31, Y+4	; 0x04
     f88:	10 82       	st	Z, r1
     f8a:	8b 81       	ldd	r24, Y+3	; 0x03
     f8c:	9c 81       	ldd	r25, Y+4	; 0x04
     f8e:	01 97       	sbiw	r24, 0x01	; 1
     f90:	9c 83       	std	Y+4, r25	; 0x04
     f92:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x02;// r2
     f94:	eb 81       	ldd	r30, Y+3	; 0x03
     f96:	fc 81       	ldd	r31, Y+4	; 0x04
     f98:	82 e0       	ldi	r24, 0x02	; 2
     f9a:	80 83       	st	Z, r24
     f9c:	8b 81       	ldd	r24, Y+3	; 0x03
     f9e:	9c 81       	ldd	r25, Y+4	; 0x04
     fa0:	01 97       	sbiw	r24, 0x01	; 1
     fa2:	9c 83       	std	Y+4, r25	; 0x04
     fa4:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x80;// SREG: enable interrupts
     fa6:	eb 81       	ldd	r30, Y+3	; 0x03
     fa8:	fc 81       	ldd	r31, Y+4	; 0x04
     faa:	80 e8       	ldi	r24, 0x80	; 128
     fac:	80 83       	st	Z, r24
     fae:	8b 81       	ldd	r24, Y+3	; 0x03
     fb0:	9c 81       	ldd	r25, Y+4	; 0x04
     fb2:	01 97       	sbiw	r24, 0x01	; 1
     fb4:	9c 83       	std	Y+4, r25	; 0x04
     fb6:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x03;
     fb8:	eb 81       	ldd	r30, Y+3	; 0x03
     fba:	fc 81       	ldd	r31, Y+4	; 0x04
     fbc:	83 e0       	ldi	r24, 0x03	; 3
     fbe:	80 83       	st	Z, r24
     fc0:	8b 81       	ldd	r24, Y+3	; 0x03
     fc2:	9c 81       	ldd	r25, Y+4	; 0x04
     fc4:	01 97       	sbiw	r24, 0x01	; 1
     fc6:	9c 83       	std	Y+4, r25	; 0x04
     fc8:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x04;
     fca:	eb 81       	ldd	r30, Y+3	; 0x03
     fcc:	fc 81       	ldd	r31, Y+4	; 0x04
     fce:	84 e0       	ldi	r24, 0x04	; 4
     fd0:	80 83       	st	Z, r24
     fd2:	8b 81       	ldd	r24, Y+3	; 0x03
     fd4:	9c 81       	ldd	r25, Y+4	; 0x04
     fd6:	01 97       	sbiw	r24, 0x01	; 1
     fd8:	9c 83       	std	Y+4, r25	; 0x04
     fda:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x05;
     fdc:	eb 81       	ldd	r30, Y+3	; 0x03
     fde:	fc 81       	ldd	r31, Y+4	; 0x04
     fe0:	85 e0       	ldi	r24, 0x05	; 5
     fe2:	80 83       	st	Z, r24
     fe4:	8b 81       	ldd	r24, Y+3	; 0x03
     fe6:	9c 81       	ldd	r25, Y+4	; 0x04
     fe8:	01 97       	sbiw	r24, 0x01	; 1
     fea:	9c 83       	std	Y+4, r25	; 0x04
     fec:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x06;
     fee:	eb 81       	ldd	r30, Y+3	; 0x03
     ff0:	fc 81       	ldd	r31, Y+4	; 0x04
     ff2:	86 e0       	ldi	r24, 0x06	; 6
     ff4:	80 83       	st	Z, r24
     ff6:	8b 81       	ldd	r24, Y+3	; 0x03
     ff8:	9c 81       	ldd	r25, Y+4	; 0x04
     ffa:	01 97       	sbiw	r24, 0x01	; 1
     ffc:	9c 83       	std	Y+4, r25	; 0x04
     ffe:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x07;
    1000:	eb 81       	ldd	r30, Y+3	; 0x03
    1002:	fc 81       	ldd	r31, Y+4	; 0x04
    1004:	87 e0       	ldi	r24, 0x07	; 7
    1006:	80 83       	st	Z, r24
    1008:	8b 81       	ldd	r24, Y+3	; 0x03
    100a:	9c 81       	ldd	r25, Y+4	; 0x04
    100c:	01 97       	sbiw	r24, 0x01	; 1
    100e:	9c 83       	std	Y+4, r25	; 0x04
    1010:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x08;
    1012:	eb 81       	ldd	r30, Y+3	; 0x03
    1014:	fc 81       	ldd	r31, Y+4	; 0x04
    1016:	88 e0       	ldi	r24, 0x08	; 8
    1018:	80 83       	st	Z, r24
    101a:	8b 81       	ldd	r24, Y+3	; 0x03
    101c:	9c 81       	ldd	r25, Y+4	; 0x04
    101e:	01 97       	sbiw	r24, 0x01	; 1
    1020:	9c 83       	std	Y+4, r25	; 0x04
    1022:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x09;
    1024:	eb 81       	ldd	r30, Y+3	; 0x03
    1026:	fc 81       	ldd	r31, Y+4	; 0x04
    1028:	89 e0       	ldi	r24, 0x09	; 9
    102a:	80 83       	st	Z, r24
    102c:	8b 81       	ldd	r24, Y+3	; 0x03
    102e:	9c 81       	ldd	r25, Y+4	; 0x04
    1030:	01 97       	sbiw	r24, 0x01	; 1
    1032:	9c 83       	std	Y+4, r25	; 0x04
    1034:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x10;
    1036:	eb 81       	ldd	r30, Y+3	; 0x03
    1038:	fc 81       	ldd	r31, Y+4	; 0x04
    103a:	80 e1       	ldi	r24, 0x10	; 16
    103c:	80 83       	st	Z, r24
    103e:	8b 81       	ldd	r24, Y+3	; 0x03
    1040:	9c 81       	ldd	r25, Y+4	; 0x04
    1042:	01 97       	sbiw	r24, 0x01	; 1
    1044:	9c 83       	std	Y+4, r25	; 0x04
    1046:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x11;
    1048:	eb 81       	ldd	r30, Y+3	; 0x03
    104a:	fc 81       	ldd	r31, Y+4	; 0x04
    104c:	81 e1       	ldi	r24, 0x11	; 17
    104e:	80 83       	st	Z, r24
    1050:	8b 81       	ldd	r24, Y+3	; 0x03
    1052:	9c 81       	ldd	r25, Y+4	; 0x04
    1054:	01 97       	sbiw	r24, 0x01	; 1
    1056:	9c 83       	std	Y+4, r25	; 0x04
    1058:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x12;
    105a:	eb 81       	ldd	r30, Y+3	; 0x03
    105c:	fc 81       	ldd	r31, Y+4	; 0x04
    105e:	82 e1       	ldi	r24, 0x12	; 18
    1060:	80 83       	st	Z, r24
    1062:	8b 81       	ldd	r24, Y+3	; 0x03
    1064:	9c 81       	ldd	r25, Y+4	; 0x04
    1066:	01 97       	sbiw	r24, 0x01	; 1
    1068:	9c 83       	std	Y+4, r25	; 0x04
    106a:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x13;
    106c:	eb 81       	ldd	r30, Y+3	; 0x03
    106e:	fc 81       	ldd	r31, Y+4	; 0x04
    1070:	83 e1       	ldi	r24, 0x13	; 19
    1072:	80 83       	st	Z, r24
    1074:	8b 81       	ldd	r24, Y+3	; 0x03
    1076:	9c 81       	ldd	r25, Y+4	; 0x04
    1078:	01 97       	sbiw	r24, 0x01	; 1
    107a:	9c 83       	std	Y+4, r25	; 0x04
    107c:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x14;
    107e:	eb 81       	ldd	r30, Y+3	; 0x03
    1080:	fc 81       	ldd	r31, Y+4	; 0x04
    1082:	84 e1       	ldi	r24, 0x14	; 20
    1084:	80 83       	st	Z, r24
    1086:	8b 81       	ldd	r24, Y+3	; 0x03
    1088:	9c 81       	ldd	r25, Y+4	; 0x04
    108a:	01 97       	sbiw	r24, 0x01	; 1
    108c:	9c 83       	std	Y+4, r25	; 0x04
    108e:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x15;
    1090:	eb 81       	ldd	r30, Y+3	; 0x03
    1092:	fc 81       	ldd	r31, Y+4	; 0x04
    1094:	85 e1       	ldi	r24, 0x15	; 21
    1096:	80 83       	st	Z, r24
    1098:	8b 81       	ldd	r24, Y+3	; 0x03
    109a:	9c 81       	ldd	r25, Y+4	; 0x04
    109c:	01 97       	sbiw	r24, 0x01	; 1
    109e:	9c 83       	std	Y+4, r25	; 0x04
    10a0:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x16;
    10a2:	eb 81       	ldd	r30, Y+3	; 0x03
    10a4:	fc 81       	ldd	r31, Y+4	; 0x04
    10a6:	86 e1       	ldi	r24, 0x16	; 22
    10a8:	80 83       	st	Z, r24
    10aa:	8b 81       	ldd	r24, Y+3	; 0x03
    10ac:	9c 81       	ldd	r25, Y+4	; 0x04
    10ae:	01 97       	sbiw	r24, 0x01	; 1
    10b0:	9c 83       	std	Y+4, r25	; 0x04
    10b2:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x17;
    10b4:	eb 81       	ldd	r30, Y+3	; 0x03
    10b6:	fc 81       	ldd	r31, Y+4	; 0x04
    10b8:	87 e1       	ldi	r24, 0x17	; 23
    10ba:	80 83       	st	Z, r24
    10bc:	8b 81       	ldd	r24, Y+3	; 0x03
    10be:	9c 81       	ldd	r25, Y+4	; 0x04
    10c0:	01 97       	sbiw	r24, 0x01	; 1
    10c2:	9c 83       	std	Y+4, r25	; 0x04
    10c4:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x18;
    10c6:	eb 81       	ldd	r30, Y+3	; 0x03
    10c8:	fc 81       	ldd	r31, Y+4	; 0x04
    10ca:	88 e1       	ldi	r24, 0x18	; 24
    10cc:	80 83       	st	Z, r24
    10ce:	8b 81       	ldd	r24, Y+3	; 0x03
    10d0:	9c 81       	ldd	r25, Y+4	; 0x04
    10d2:	01 97       	sbiw	r24, 0x01	; 1
    10d4:	9c 83       	std	Y+4, r25	; 0x04
    10d6:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x19;
    10d8:	eb 81       	ldd	r30, Y+3	; 0x03
    10da:	fc 81       	ldd	r31, Y+4	; 0x04
    10dc:	89 e1       	ldi	r24, 0x19	; 25
    10de:	80 83       	st	Z, r24
    10e0:	8b 81       	ldd	r24, Y+3	; 0x03
    10e2:	9c 81       	ldd	r25, Y+4	; 0x04
    10e4:	01 97       	sbiw	r24, 0x01	; 1
    10e6:	9c 83       	std	Y+4, r25	; 0x04
    10e8:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x20;
    10ea:	eb 81       	ldd	r30, Y+3	; 0x03
    10ec:	fc 81       	ldd	r31, Y+4	; 0x04
    10ee:	80 e2       	ldi	r24, 0x20	; 32
    10f0:	80 83       	st	Z, r24
    10f2:	8b 81       	ldd	r24, Y+3	; 0x03
    10f4:	9c 81       	ldd	r25, Y+4	; 0x04
    10f6:	01 97       	sbiw	r24, 0x01	; 1
    10f8:	9c 83       	std	Y+4, r25	; 0x04
    10fa:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x21;
    10fc:	eb 81       	ldd	r30, Y+3	; 0x03
    10fe:	fc 81       	ldd	r31, Y+4	; 0x04
    1100:	81 e2       	ldi	r24, 0x21	; 33
    1102:	80 83       	st	Z, r24
    1104:	8b 81       	ldd	r24, Y+3	; 0x03
    1106:	9c 81       	ldd	r25, Y+4	; 0x04
    1108:	01 97       	sbiw	r24, 0x01	; 1
    110a:	9c 83       	std	Y+4, r25	; 0x04
    110c:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x22;
    110e:	eb 81       	ldd	r30, Y+3	; 0x03
    1110:	fc 81       	ldd	r31, Y+4	; 0x04
    1112:	82 e2       	ldi	r24, 0x22	; 34
    1114:	80 83       	st	Z, r24
    1116:	8b 81       	ldd	r24, Y+3	; 0x03
    1118:	9c 81       	ldd	r25, Y+4	; 0x04
    111a:	01 97       	sbiw	r24, 0x01	; 1
    111c:	9c 83       	std	Y+4, r25	; 0x04
    111e:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x23;
    1120:	eb 81       	ldd	r30, Y+3	; 0x03
    1122:	fc 81       	ldd	r31, Y+4	; 0x04
    1124:	83 e2       	ldi	r24, 0x23	; 35
    1126:	80 83       	st	Z, r24
    1128:	8b 81       	ldd	r24, Y+3	; 0x03
    112a:	9c 81       	ldd	r25, Y+4	; 0x04
    112c:	01 97       	sbiw	r24, 0x01	; 1
    112e:	9c 83       	std	Y+4, r25	; 0x04
    1130:	8b 83       	std	Y+3, r24	; 0x03

    tmp = (unsigned short)arg;
    1132:	89 85       	ldd	r24, Y+9	; 0x09
    1134:	9a 85       	ldd	r25, Y+10	; 0x0a
    1136:	9a 83       	std	Y+2, r25	; 0x02
    1138:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (stack_t)(tmp&(unsigned short)0x00ff); // r24 LSByte of arg
    113a:	89 81       	ldd	r24, Y+1	; 0x01
    113c:	eb 81       	ldd	r30, Y+3	; 0x03
    113e:	fc 81       	ldd	r31, Y+4	; 0x04
    1140:	80 83       	st	Z, r24
    1142:	8b 81       	ldd	r24, Y+3	; 0x03
    1144:	9c 81       	ldd	r25, Y+4	; 0x04
    1146:	01 97       	sbiw	r24, 0x01	; 1
    1148:	9c 83       	std	Y+4, r25	; 0x04
    114a:	8b 83       	std	Y+3, r24	; 0x03
    tmp>>=8;
    114c:	89 81       	ldd	r24, Y+1	; 0x01
    114e:	9a 81       	ldd	r25, Y+2	; 0x02
    1150:	89 2f       	mov	r24, r25
    1152:	99 27       	eor	r25, r25
    1154:	9a 83       	std	Y+2, r25	; 0x02
    1156:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (stack_t)(tmp&(unsigned short)0x00ff); // r25 MSByte of arg
    1158:	89 81       	ldd	r24, Y+1	; 0x01
    115a:	eb 81       	ldd	r30, Y+3	; 0x03
    115c:	fc 81       	ldd	r31, Y+4	; 0x04
    115e:	80 83       	st	Z, r24
    1160:	8b 81       	ldd	r24, Y+3	; 0x03
    1162:	9c 81       	ldd	r25, Y+4	; 0x04
    1164:	01 97       	sbiw	r24, 0x01	; 1
    1166:	9c 83       	std	Y+4, r25	; 0x04
    1168:	8b 83       	std	Y+3, r24	; 0x03

    *tos-- = 0x26;
    116a:	eb 81       	ldd	r30, Y+3	; 0x03
    116c:	fc 81       	ldd	r31, Y+4	; 0x04
    116e:	86 e2       	ldi	r24, 0x26	; 38
    1170:	80 83       	st	Z, r24
    1172:	8b 81       	ldd	r24, Y+3	; 0x03
    1174:	9c 81       	ldd	r25, Y+4	; 0x04
    1176:	01 97       	sbiw	r24, 0x01	; 1
    1178:	9c 83       	std	Y+4, r25	; 0x04
    117a:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x27;
    117c:	eb 81       	ldd	r30, Y+3	; 0x03
    117e:	fc 81       	ldd	r31, Y+4	; 0x04
    1180:	87 e2       	ldi	r24, 0x27	; 39
    1182:	80 83       	st	Z, r24
    1184:	8b 81       	ldd	r24, Y+3	; 0x03
    1186:	9c 81       	ldd	r25, Y+4	; 0x04
    1188:	01 97       	sbiw	r24, 0x01	; 1
    118a:	9c 83       	std	Y+4, r25	; 0x04
    118c:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x28;
    118e:	eb 81       	ldd	r30, Y+3	; 0x03
    1190:	fc 81       	ldd	r31, Y+4	; 0x04
    1192:	88 e2       	ldi	r24, 0x28	; 40
    1194:	80 83       	st	Z, r24
    1196:	8b 81       	ldd	r24, Y+3	; 0x03
    1198:	9c 81       	ldd	r25, Y+4	; 0x04
    119a:	01 97       	sbiw	r24, 0x01	; 1
    119c:	9c 83       	std	Y+4, r25	; 0x04
    119e:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x29;
    11a0:	eb 81       	ldd	r30, Y+3	; 0x03
    11a2:	fc 81       	ldd	r31, Y+4	; 0x04
    11a4:	89 e2       	ldi	r24, 0x29	; 41
    11a6:	80 83       	st	Z, r24
    11a8:	8b 81       	ldd	r24, Y+3	; 0x03
    11aa:	9c 81       	ldd	r25, Y+4	; 0x04
    11ac:	01 97       	sbiw	r24, 0x01	; 1
    11ae:	9c 83       	std	Y+4, r25	; 0x04
    11b0:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x30;
    11b2:	eb 81       	ldd	r30, Y+3	; 0x03
    11b4:	fc 81       	ldd	r31, Y+4	; 0x04
    11b6:	80 e3       	ldi	r24, 0x30	; 48
    11b8:	80 83       	st	Z, r24
    11ba:	8b 81       	ldd	r24, Y+3	; 0x03
    11bc:	9c 81       	ldd	r25, Y+4	; 0x04
    11be:	01 97       	sbiw	r24, 0x01	; 1
    11c0:	9c 83       	std	Y+4, r25	; 0x04
    11c2:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x31;
    11c4:	eb 81       	ldd	r30, Y+3	; 0x03
    11c6:	fc 81       	ldd	r31, Y+4	; 0x04
    11c8:	81 e3       	ldi	r24, 0x31	; 49
    11ca:	80 83       	st	Z, r24
    11cc:	8b 81       	ldd	r24, Y+3	; 0x03
    11ce:	9c 81       	ldd	r25, Y+4	; 0x04
    11d0:	01 97       	sbiw	r24, 0x01	; 1
    11d2:	9c 83       	std	Y+4, r25	; 0x04
    11d4:	8b 83       	std	Y+3, r24	; 0x03
#ifdef RAMPZ
    *tos-- = 0xff;
#endif
    return tos;
    11d6:	8b 81       	ldd	r24, Y+3	; 0x03
    11d8:	9c 81       	ldd	r25, Y+4	; 0x04
}
    11da:	2a 96       	adiw	r28, 0x0a	; 10
    11dc:	0f b6       	in	r0, 0x3f	; 63
    11de:	f8 94       	cli
    11e0:	de bf       	out	0x3e, r29	; 62
    11e2:	0f be       	out	0x3f, r0	; 63
    11e4:	cd bf       	out	0x3d, r28	; 61
    11e6:	cf 91       	pop	r28
    11e8:	df 91       	pop	r29
    11ea:	08 95       	ret

000011ec <index_search>:
*                           http://www.0chan.ru/r/res/9996.html                          *
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
prio_t index_search(index_t index)
{
    11ec:	df 93       	push	r29
    11ee:	cf 93       	push	r28
    11f0:	00 d0       	rcall	.+0      	; 0x11f2 <index_search+0x6>
    11f2:	00 d0       	rcall	.+0      	; 0x11f4 <index_search+0x8>
    11f4:	00 d0       	rcall	.+0      	; 0x11f6 <index_search+0xa>
    11f6:	cd b7       	in	r28, 0x3d	; 61
    11f8:	de b7       	in	r29, 0x3e	; 62
    11fa:	8e 83       	std	Y+6, r24	; 0x06
    prio_t prio = (prio_t)0;
    11fc:	1d 82       	std	Y+5, r1	; 0x05
        но, т.к. BITS_IN_INDEX_T фиксировано для данной конфигурации,
        то получается время выполнения - O(1), ВСЕГДА.

        И да, предсказуемость + переносимость > быстродействие.
        */
    index_t upper = ~(index_t)0, lower = ~(index_t)0, middle;
    11fe:	8f ef       	ldi	r24, 0xFF	; 255
    1200:	8c 83       	std	Y+4, r24	; 0x04
    1202:	8f ef       	ldi	r24, 0xFF	; 255
    1204:	8b 83       	std	Y+3, r24	; 0x03
    prio_t step = (prio_t)BITS_IN_INDEX_T;
    1206:	88 e0       	ldi	r24, 0x08	; 8
    1208:	89 83       	std	Y+1, r24	; 0x01
    120a:	22 c0       	rjmp	.+68     	; 0x1250 <index_search+0x64>
    while( step )
    {
        step>>=1; // делим шаг пополам
    120c:	89 81       	ldd	r24, Y+1	; 0x01
    120e:	86 95       	lsr	r24
    1210:	89 83       	std	Y+1, r24	; 0x01
        middle = lower>>step;
    1212:	8b 81       	ldd	r24, Y+3	; 0x03
    1214:	28 2f       	mov	r18, r24
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	89 81       	ldd	r24, Y+1	; 0x01
    121a:	88 2f       	mov	r24, r24
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	a9 01       	movw	r20, r18
    1220:	02 c0       	rjmp	.+4      	; 0x1226 <index_search+0x3a>
    1222:	55 95       	asr	r21
    1224:	47 95       	ror	r20
    1226:	8a 95       	dec	r24
    1228:	e2 f7       	brpl	.-8      	; 0x1222 <index_search+0x36>
    122a:	ca 01       	movw	r24, r20
    122c:	8a 83       	std	Y+2, r24	; 0x02
        if( index & upper & middle )
    122e:	9e 81       	ldd	r25, Y+6	; 0x06
    1230:	8c 81       	ldd	r24, Y+4	; 0x04
    1232:	98 23       	and	r25, r24
    1234:	8a 81       	ldd	r24, Y+2	; 0x02
    1236:	89 23       	and	r24, r25
    1238:	88 23       	and	r24, r24
    123a:	19 f0       	breq	.+6      	; 0x1242 <index_search+0x56>
        {
            lower = middle;
    123c:	8a 81       	ldd	r24, Y+2	; 0x02
    123e:	8b 83       	std	Y+3, r24	; 0x03
    1240:	07 c0       	rjmp	.+14     	; 0x1250 <index_search+0x64>
        }
        else
        {
            upper = ~middle;
    1242:	8a 81       	ldd	r24, Y+2	; 0x02
    1244:	80 95       	com	r24
    1246:	8c 83       	std	Y+4, r24	; 0x04
            prio += step;
    1248:	9d 81       	ldd	r25, Y+5	; 0x05
    124a:	89 81       	ldd	r24, Y+1	; 0x01
    124c:	89 0f       	add	r24, r25
    124e:	8d 83       	std	Y+5, r24	; 0x05

        И да, предсказуемость + переносимость > быстродействие.
        */
    index_t upper = ~(index_t)0, lower = ~(index_t)0, middle;
    prio_t step = (prio_t)BITS_IN_INDEX_T;
    while( step )
    1250:	89 81       	ldd	r24, Y+1	; 0x01
    1252:	88 23       	and	r24, r24
    1254:	d9 f6       	brne	.-74     	; 0x120c <index_search+0x20>
        if ( mask & index )break;
        prio++;
        mask<<=1;
    }
#endif
    return prio;
    1256:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1258:	26 96       	adiw	r28, 0x06	; 6
    125a:	0f b6       	in	r0, 0x3f	; 63
    125c:	f8 94       	cli
    125e:	de bf       	out	0x3e, r29	; 62
    1260:	0f be       	out	0x3f, r0	; 63
    1262:	cd bf       	out	0x3d, r28	; 61
    1264:	cf 91       	pop	r28
    1266:	df 91       	pop	r29
    1268:	08 95       	ret

0000126a <_ipc_wait>:
*                           http://www.0chan.ru/r/res/9996.html                          *
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
void _ipc_wait( void * ipc_pointer )
{
    126a:	df 93       	push	r29
    126c:	cf 93       	push	r28
    126e:	00 d0       	rcall	.+0      	; 0x1270 <_ipc_wait+0x6>
    1270:	00 d0       	rcall	.+0      	; 0x1272 <_ipc_wait+0x8>
    1272:	cd b7       	in	r28, 0x3d	; 61
    1274:	de b7       	in	r29, 0x3e	; 62
    1276:	9c 83       	std	Y+4, r25	; 0x04
    1278:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc;
    proc = current_proc();
    127a:	0e 94 0a 01 	call	0x214	; 0x214 <current_proc>
    127e:	9a 83       	std	Y+2, r25	; 0x02
    1280:	89 83       	std	Y+1, r24	; 0x01
    SPIN_LOCK( proc );
    1282:	89 81       	ldd	r24, Y+1	; 0x01
    1284:	9a 81       	ldd	r25, Y+2	; 0x02
    1286:	83 96       	adiw	r24, 0x23	; 35
    1288:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
    // Останавливаем процесс
    proc->flags |= PROC_FLG_IPCW;
    128c:	e9 81       	ldd	r30, Y+1	; 0x01
    128e:	fa 81       	ldd	r31, Y+2	; 0x02
    1290:	87 81       	ldd	r24, Z+7	; 0x07
    1292:	90 85       	ldd	r25, Z+8	; 0x08
    1294:	80 64       	ori	r24, 0x40	; 64
    1296:	e9 81       	ldd	r30, Y+1	; 0x01
    1298:	fa 81       	ldd	r31, Y+2	; 0x02
    129a:	90 87       	std	Z+8, r25	; 0x08
    129c:	87 83       	std	Z+7, r24	; 0x07
    proc->buf = ipc_pointer;
    129e:	e9 81       	ldd	r30, Y+1	; 0x01
    12a0:	fa 81       	ldd	r31, Y+2	; 0x02
    12a2:	8b 81       	ldd	r24, Y+3	; 0x03
    12a4:	9c 81       	ldd	r25, Y+4	; 0x04
    12a6:	90 a3       	std	Z+32, r25	; 0x20
    12a8:	87 8f       	std	Z+31, r24	; 0x1f
    _proc_stop_( proc );
    12aa:	89 81       	ldd	r24, Y+1	; 0x01
    12ac:	9a 81       	ldd	r25, Y+2	; 0x02
    12ae:	0e 94 68 10 	call	0x20d0	; 0x20d0 <_proc_stop_>
    RESCHED_PROC( proc );
    12b2:	e9 81       	ldd	r30, Y+1	; 0x01
    12b4:	fa 81       	ldd	r31, Y+2	; 0x02
    12b6:	81 a1       	ldd	r24, Z+33	; 0x21
    12b8:	0e 94 de 01 	call	0x3bc	; 0x3bc <resched>

    SPIN_UNLOCK( proc );
    12bc:	89 81       	ldd	r24, Y+1	; 0x01
    12be:	9a 81       	ldd	r25, Y+2	; 0x02
    12c0:	83 96       	adiw	r24, 0x23	; 35
    12c2:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
}
    12c6:	0f 90       	pop	r0
    12c8:	0f 90       	pop	r0
    12ca:	0f 90       	pop	r0
    12cc:	0f 90       	pop	r0
    12ce:	cf 91       	pop	r28
    12d0:	df 91       	pop	r29
    12d2:	08 95       	ret

000012d4 <ipc_send_isr>:

bool_t ipc_send_isr( proc_t * proc, ipc_data_t data )
{
    12d4:	df 93       	push	r29
    12d6:	cf 93       	push	r28
    12d8:	00 d0       	rcall	.+0      	; 0x12da <ipc_send_isr+0x6>
    12da:	00 d0       	rcall	.+0      	; 0x12dc <ipc_send_isr+0x8>
    12dc:	0f 92       	push	r0
    12de:	cd b7       	in	r28, 0x3d	; 61
    12e0:	de b7       	in	r29, 0x3e	; 62
    12e2:	9b 83       	std	Y+3, r25	; 0x03
    12e4:	8a 83       	std	Y+2, r24	; 0x02
    12e6:	7d 83       	std	Y+5, r23	; 0x05
    12e8:	6c 83       	std	Y+4, r22	; 0x04
    bool_t ret = (bool_t)0;
    12ea:	19 82       	std	Y+1, r1	; 0x01
    SPIN_LOCK( proc );
    12ec:	8a 81       	ldd	r24, Y+2	; 0x02
    12ee:	9b 81       	ldd	r25, Y+3	; 0x03
    12f0:	83 96       	adiw	r24, 0x23	; 35
    12f2:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
    if( proc->flags & PROC_FLG_IPCW )
    12f6:	ea 81       	ldd	r30, Y+2	; 0x02
    12f8:	fb 81       	ldd	r31, Y+3	; 0x03
    12fa:	87 81       	ldd	r24, Z+7	; 0x07
    12fc:	90 85       	ldd	r25, Z+8	; 0x08
    12fe:	80 74       	andi	r24, 0x40	; 64
    1300:	90 70       	andi	r25, 0x00	; 0
    1302:	00 97       	sbiw	r24, 0x00	; 0
    1304:	91 f1       	breq	.+100    	; 0x136a <ipc_send_isr+0x96>
    {
        proc->flags &= ~PROC_FLG_IPCW;
    1306:	ea 81       	ldd	r30, Y+2	; 0x02
    1308:	fb 81       	ldd	r31, Y+3	; 0x03
    130a:	87 81       	ldd	r24, Z+7	; 0x07
    130c:	90 85       	ldd	r25, Z+8	; 0x08
    130e:	8f 7b       	andi	r24, 0xBF	; 191
    1310:	ea 81       	ldd	r30, Y+2	; 0x02
    1312:	fb 81       	ldd	r31, Y+3	; 0x03
    1314:	90 87       	std	Z+8, r25	; 0x08
    1316:	87 83       	std	Z+7, r24	; 0x07
        ///Обработка флага останова целевого процесса
        if(  PROC_PRE_STOP_TEST(proc)  )
    1318:	ea 81       	ldd	r30, Y+2	; 0x02
    131a:	fb 81       	ldd	r31, Y+3	; 0x03
    131c:	87 81       	ldd	r24, Z+7	; 0x07
    131e:	90 85       	ldd	r25, Z+8	; 0x08
    1320:	80 78       	andi	r24, 0x80	; 128
    1322:	90 70       	andi	r25, 0x00	; 0
    1324:	00 97       	sbiw	r24, 0x00	; 0
    1326:	91 f0       	breq	.+36     	; 0x134c <ipc_send_isr+0x78>
    1328:	ea 81       	ldd	r30, Y+2	; 0x02
    132a:	fb 81       	ldd	r31, Y+3	; 0x03
    132c:	87 81       	ldd	r24, Z+7	; 0x07
    132e:	90 85       	ldd	r25, Z+8	; 0x08
    1330:	8c 70       	andi	r24, 0x0C	; 12
    1332:	90 70       	andi	r25, 0x00	; 0
    1334:	00 97       	sbiw	r24, 0x00	; 0
    1336:	51 f4       	brne	.+20     	; 0x134c <ipc_send_isr+0x78>
            Если был запрошен останов целевого процесса,
            и целевой процесс не удерживает общие ресурсы,
            то мы не будем возобновлять его работу
            и передавать ему информацию.
            */
            proc->flags &= ~PROC_FLG_PRE_STOP_MASK;
    1338:	ea 81       	ldd	r30, Y+2	; 0x02
    133a:	fb 81       	ldd	r31, Y+3	; 0x03
    133c:	87 81       	ldd	r24, Z+7	; 0x07
    133e:	90 85       	ldd	r25, Z+8	; 0x08
    1340:	8d 77       	andi	r24, 0x7D	; 125
    1342:	ea 81       	ldd	r30, Y+2	; 0x02
    1344:	fb 81       	ldd	r31, Y+3	; 0x03
    1346:	90 87       	std	Z+8, r25	; 0x08
    1348:	87 83       	std	Z+7, r24	; 0x07
    134a:	0f c0       	rjmp	.+30     	; 0x136a <ipc_send_isr+0x96>
            goto end;
        }
        ret = (bool_t)1; // информация будет передана
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	89 83       	std	Y+1, r24	; 0x01
        *(ipc_data_t *)proc->buf = data;
    1350:	ea 81       	ldd	r30, Y+2	; 0x02
    1352:	fb 81       	ldd	r31, Y+3	; 0x03
    1354:	87 8d       	ldd	r24, Z+31	; 0x1f
    1356:	90 a1       	ldd	r25, Z+32	; 0x20
    1358:	fc 01       	movw	r30, r24
    135a:	8c 81       	ldd	r24, Y+4	; 0x04
    135c:	9d 81       	ldd	r25, Y+5	; 0x05
    135e:	91 83       	std	Z+1, r25	; 0x01
    1360:	80 83       	st	Z, r24
        _proc_run( proc );
    1362:	8a 81       	ldd	r24, Y+2	; 0x02
    1364:	9b 81       	ldd	r25, Y+3	; 0x03
    1366:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <_proc_run>
    }
end:
    SPIN_UNLOCK( proc );
    136a:	8a 81       	ldd	r24, Y+2	; 0x02
    136c:	9b 81       	ldd	r25, Y+3	; 0x03
    136e:	83 96       	adiw	r24, 0x23	; 35
    1370:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
    return ret;
    1374:	89 81       	ldd	r24, Y+1	; 0x01
}
    1376:	0f 90       	pop	r0
    1378:	0f 90       	pop	r0
    137a:	0f 90       	pop	r0
    137c:	0f 90       	pop	r0
    137e:	0f 90       	pop	r0
    1380:	cf 91       	pop	r28
    1382:	df 91       	pop	r29
    1384:	08 95       	ret

00001386 <_ipc_exchange>:

bool_t _ipc_exchange( proc_t * proc, ipc_data_t send, ipc_data_t * receive )
{
    1386:	df 93       	push	r29
    1388:	cf 93       	push	r28
    138a:	cd b7       	in	r28, 0x3d	; 61
    138c:	de b7       	in	r29, 0x3e	; 62
    138e:	27 97       	sbiw	r28, 0x07	; 7
    1390:	0f b6       	in	r0, 0x3f	; 63
    1392:	f8 94       	cli
    1394:	de bf       	out	0x3e, r29	; 62
    1396:	0f be       	out	0x3f, r0	; 63
    1398:	cd bf       	out	0x3d, r28	; 61
    139a:	9b 83       	std	Y+3, r25	; 0x03
    139c:	8a 83       	std	Y+2, r24	; 0x02
    139e:	7d 83       	std	Y+5, r23	; 0x05
    13a0:	6c 83       	std	Y+4, r22	; 0x04
    13a2:	5f 83       	std	Y+7, r21	; 0x07
    13a4:	4e 83       	std	Y+6, r20	; 0x06
    bool_t ret = (bool_t)0;
    13a6:	19 82       	std	Y+1, r1	; 0x01
    SPIN_LOCK( proc );
    13a8:	8a 81       	ldd	r24, Y+2	; 0x02
    13aa:	9b 81       	ldd	r25, Y+3	; 0x03
    13ac:	83 96       	adiw	r24, 0x23	; 35
    13ae:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
    if( proc->flags & PROC_FLG_IPCW )
    13b2:	ea 81       	ldd	r30, Y+2	; 0x02
    13b4:	fb 81       	ldd	r31, Y+3	; 0x03
    13b6:	87 81       	ldd	r24, Z+7	; 0x07
    13b8:	90 85       	ldd	r25, Z+8	; 0x08
    13ba:	80 74       	andi	r24, 0x40	; 64
    13bc:	90 70       	andi	r25, 0x00	; 0
    13be:	00 97       	sbiw	r24, 0x00	; 0
    13c0:	b1 f1       	breq	.+108    	; 0x142e <_ipc_exchange+0xa8>
    {
        proc->flags &= ~PROC_FLG_IPCW;
    13c2:	ea 81       	ldd	r30, Y+2	; 0x02
    13c4:	fb 81       	ldd	r31, Y+3	; 0x03
    13c6:	87 81       	ldd	r24, Z+7	; 0x07
    13c8:	90 85       	ldd	r25, Z+8	; 0x08
    13ca:	8f 7b       	andi	r24, 0xBF	; 191
    13cc:	ea 81       	ldd	r30, Y+2	; 0x02
    13ce:	fb 81       	ldd	r31, Y+3	; 0x03
    13d0:	90 87       	std	Z+8, r25	; 0x08
    13d2:	87 83       	std	Z+7, r24	; 0x07
        ///Обработка флага останова целевого процесса
        if(  PROC_PRE_STOP_TEST(proc)  )
    13d4:	ea 81       	ldd	r30, Y+2	; 0x02
    13d6:	fb 81       	ldd	r31, Y+3	; 0x03
    13d8:	87 81       	ldd	r24, Z+7	; 0x07
    13da:	90 85       	ldd	r25, Z+8	; 0x08
    13dc:	80 78       	andi	r24, 0x80	; 128
    13de:	90 70       	andi	r25, 0x00	; 0
    13e0:	00 97       	sbiw	r24, 0x00	; 0
    13e2:	91 f0       	breq	.+36     	; 0x1408 <_ipc_exchange+0x82>
    13e4:	ea 81       	ldd	r30, Y+2	; 0x02
    13e6:	fb 81       	ldd	r31, Y+3	; 0x03
    13e8:	87 81       	ldd	r24, Z+7	; 0x07
    13ea:	90 85       	ldd	r25, Z+8	; 0x08
    13ec:	8c 70       	andi	r24, 0x0C	; 12
    13ee:	90 70       	andi	r25, 0x00	; 0
    13f0:	00 97       	sbiw	r24, 0x00	; 0
    13f2:	51 f4       	brne	.+20     	; 0x1408 <_ipc_exchange+0x82>
            Если был запрошен останов целевого процесса,
            и целевой процесс не удерживает общие ресурсы,
            то мы не будем возобновлять его работу
            и передавать ему информацию.
            */
            proc->flags &= ~PROC_FLG_PRE_STOP_MASK;
    13f4:	ea 81       	ldd	r30, Y+2	; 0x02
    13f6:	fb 81       	ldd	r31, Y+3	; 0x03
    13f8:	87 81       	ldd	r24, Z+7	; 0x07
    13fa:	90 85       	ldd	r25, Z+8	; 0x08
    13fc:	8d 77       	andi	r24, 0x7D	; 125
    13fe:	ea 81       	ldd	r30, Y+2	; 0x02
    1400:	fb 81       	ldd	r31, Y+3	; 0x03
    1402:	90 87       	std	Z+8, r25	; 0x08
    1404:	87 83       	std	Z+7, r24	; 0x07
    1406:	13 c0       	rjmp	.+38     	; 0x142e <_ipc_exchange+0xa8>
            goto end;
        }
        ret = (bool_t)1; // информация будет передана
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	89 83       	std	Y+1, r24	; 0x01
        *(ipc_data_t *)proc->buf = send;
    140c:	ea 81       	ldd	r30, Y+2	; 0x02
    140e:	fb 81       	ldd	r31, Y+3	; 0x03
    1410:	87 8d       	ldd	r24, Z+31	; 0x1f
    1412:	90 a1       	ldd	r25, Z+32	; 0x20
    1414:	fc 01       	movw	r30, r24
    1416:	8c 81       	ldd	r24, Y+4	; 0x04
    1418:	9d 81       	ldd	r25, Y+5	; 0x05
    141a:	91 83       	std	Z+1, r25	; 0x01
    141c:	80 83       	st	Z, r24
        _ipc_wait( receive ); // Готовимся к приему данных!
    141e:	8e 81       	ldd	r24, Y+6	; 0x06
    1420:	9f 81       	ldd	r25, Y+7	; 0x07
    1422:	0e 94 35 09 	call	0x126a	; 0x126a <_ipc_wait>
        _proc_run( proc );   // И только после этого запускаем процесс-адресат!
    1426:	8a 81       	ldd	r24, Y+2	; 0x02
    1428:	9b 81       	ldd	r25, Y+3	; 0x03
    142a:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <_proc_run>
    }
end:
    SPIN_UNLOCK( proc );
    142e:	8a 81       	ldd	r24, Y+2	; 0x02
    1430:	9b 81       	ldd	r25, Y+3	; 0x03
    1432:	83 96       	adiw	r24, 0x23	; 35
    1434:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
    return ret;
    1438:	89 81       	ldd	r24, Y+1	; 0x01
}
    143a:	27 96       	adiw	r28, 0x07	; 7
    143c:	0f b6       	in	r0, 0x3f	; 63
    143e:	f8 94       	cli
    1440:	de bf       	out	0x3e, r29	; 62
    1442:	0f be       	out	0x3f, r0	; 63
    1444:	cd bf       	out	0x3d, r28	; 61
    1446:	cf 91       	pop	r28
    1448:	df 91       	pop	r29
    144a:	08 95       	ret

0000144c <item_init>:
*****************************************************************************************/
#include "../include/bugurt.h"
//Методы элемента 2-связного списка
//инициация элемента
void item_init(item_t *item)
{
    144c:	df 93       	push	r29
    144e:	cf 93       	push	r28
    1450:	00 d0       	rcall	.+0      	; 0x1452 <item_init+0x6>
    1452:	cd b7       	in	r28, 0x3d	; 61
    1454:	de b7       	in	r29, 0x3e	; 62
    1456:	9a 83       	std	Y+2, r25	; 0x02
    1458:	89 83       	std	Y+1, r24	; 0x01
    item->prev = item;
    145a:	e9 81       	ldd	r30, Y+1	; 0x01
    145c:	fa 81       	ldd	r31, Y+2	; 0x02
    145e:	89 81       	ldd	r24, Y+1	; 0x01
    1460:	9a 81       	ldd	r25, Y+2	; 0x02
    1462:	93 83       	std	Z+3, r25	; 0x03
    1464:	82 83       	std	Z+2, r24	; 0x02
    item->next = item;
    1466:	e9 81       	ldd	r30, Y+1	; 0x01
    1468:	fa 81       	ldd	r31, Y+2	; 0x02
    146a:	89 81       	ldd	r24, Y+1	; 0x01
    146c:	9a 81       	ldd	r25, Y+2	; 0x02
    146e:	91 83       	std	Z+1, r25	; 0x01
    1470:	80 83       	st	Z, r24
}
    1472:	0f 90       	pop	r0
    1474:	0f 90       	pop	r0
    1476:	cf 91       	pop	r28
    1478:	df 91       	pop	r29
    147a:	08 95       	ret

0000147c <item_insert>:
//Вставить элемент
void item_insert(item_t *item, item_t *head)
{
    147c:	df 93       	push	r29
    147e:	cf 93       	push	r28
    1480:	00 d0       	rcall	.+0      	; 0x1482 <item_insert+0x6>
    1482:	00 d0       	rcall	.+0      	; 0x1484 <item_insert+0x8>
    1484:	00 d0       	rcall	.+0      	; 0x1486 <item_insert+0xa>
    1486:	cd b7       	in	r28, 0x3d	; 61
    1488:	de b7       	in	r29, 0x3e	; 62
    148a:	9c 83       	std	Y+4, r25	; 0x04
    148c:	8b 83       	std	Y+3, r24	; 0x03
    148e:	7e 83       	std	Y+6, r23	; 0x06
    1490:	6d 83       	std	Y+5, r22	; 0x05
    // "хвост" списка
    item_t * tail;
    tail = head->prev;
    1492:	ed 81       	ldd	r30, Y+5	; 0x05
    1494:	fe 81       	ldd	r31, Y+6	; 0x06
    1496:	82 81       	ldd	r24, Z+2	; 0x02
    1498:	93 81       	ldd	r25, Z+3	; 0x03
    149a:	9a 83       	std	Y+2, r25	; 0x02
    149c:	89 83       	std	Y+1, r24	; 0x01
    // Вставляем элемент между "головой" и "хвостом"
    item->prev = tail;
    149e:	eb 81       	ldd	r30, Y+3	; 0x03
    14a0:	fc 81       	ldd	r31, Y+4	; 0x04
    14a2:	89 81       	ldd	r24, Y+1	; 0x01
    14a4:	9a 81       	ldd	r25, Y+2	; 0x02
    14a6:	93 83       	std	Z+3, r25	; 0x03
    14a8:	82 83       	std	Z+2, r24	; 0x02
    item->next = head;
    14aa:	eb 81       	ldd	r30, Y+3	; 0x03
    14ac:	fc 81       	ldd	r31, Y+4	; 0x04
    14ae:	8d 81       	ldd	r24, Y+5	; 0x05
    14b0:	9e 81       	ldd	r25, Y+6	; 0x06
    14b2:	91 83       	std	Z+1, r25	; 0x01
    14b4:	80 83       	st	Z, r24

    head->prev = item;
    14b6:	ed 81       	ldd	r30, Y+5	; 0x05
    14b8:	fe 81       	ldd	r31, Y+6	; 0x06
    14ba:	8b 81       	ldd	r24, Y+3	; 0x03
    14bc:	9c 81       	ldd	r25, Y+4	; 0x04
    14be:	93 83       	std	Z+3, r25	; 0x03
    14c0:	82 83       	std	Z+2, r24	; 0x02
    tail->next = item;
    14c2:	e9 81       	ldd	r30, Y+1	; 0x01
    14c4:	fa 81       	ldd	r31, Y+2	; 0x02
    14c6:	8b 81       	ldd	r24, Y+3	; 0x03
    14c8:	9c 81       	ldd	r25, Y+4	; 0x04
    14ca:	91 83       	std	Z+1, r25	; 0x01
    14cc:	80 83       	st	Z, r24
}
    14ce:	26 96       	adiw	r28, 0x06	; 6
    14d0:	0f b6       	in	r0, 0x3f	; 63
    14d2:	f8 94       	cli
    14d4:	de bf       	out	0x3e, r29	; 62
    14d6:	0f be       	out	0x3f, r0	; 63
    14d8:	cd bf       	out	0x3d, r28	; 61
    14da:	cf 91       	pop	r28
    14dc:	df 91       	pop	r29
    14de:	08 95       	ret

000014e0 <item_cut>:
//Вырезать элемент
void item_cut( item_t *item )
{
    14e0:	df 93       	push	r29
    14e2:	cf 93       	push	r28
    14e4:	00 d0       	rcall	.+0      	; 0x14e6 <item_cut+0x6>
    14e6:	00 d0       	rcall	.+0      	; 0x14e8 <item_cut+0x8>
    14e8:	00 d0       	rcall	.+0      	; 0x14ea <item_cut+0xa>
    14ea:	cd b7       	in	r28, 0x3d	; 61
    14ec:	de b7       	in	r29, 0x3e	; 62
    14ee:	9e 83       	std	Y+6, r25	; 0x06
    14f0:	8d 83       	std	Y+5, r24	; 0x05
    item_t * prev;
    item_t * next;
    prev = item->prev; //Предыдущий элемент
    14f2:	ed 81       	ldd	r30, Y+5	; 0x05
    14f4:	fe 81       	ldd	r31, Y+6	; 0x06
    14f6:	82 81       	ldd	r24, Z+2	; 0x02
    14f8:	93 81       	ldd	r25, Z+3	; 0x03
    14fa:	9c 83       	std	Y+4, r25	; 0x04
    14fc:	8b 83       	std	Y+3, r24	; 0x03
    next = item->next; //Следующий элемент
    14fe:	ed 81       	ldd	r30, Y+5	; 0x05
    1500:	fe 81       	ldd	r31, Y+6	; 0x06
    1502:	80 81       	ld	r24, Z
    1504:	91 81       	ldd	r25, Z+1	; 0x01
    1506:	9a 83       	std	Y+2, r25	; 0x02
    1508:	89 83       	std	Y+1, r24	; 0x01

    next->prev = prev;
    150a:	e9 81       	ldd	r30, Y+1	; 0x01
    150c:	fa 81       	ldd	r31, Y+2	; 0x02
    150e:	8b 81       	ldd	r24, Y+3	; 0x03
    1510:	9c 81       	ldd	r25, Y+4	; 0x04
    1512:	93 83       	std	Z+3, r25	; 0x03
    1514:	82 83       	std	Z+2, r24	; 0x02
    prev->next = next;
    1516:	eb 81       	ldd	r30, Y+3	; 0x03
    1518:	fc 81       	ldd	r31, Y+4	; 0x04
    151a:	89 81       	ldd	r24, Y+1	; 0x01
    151c:	9a 81       	ldd	r25, Y+2	; 0x02
    151e:	91 83       	std	Z+1, r25	; 0x01
    1520:	80 83       	st	Z, r24

    item->prev = item;
    1522:	ed 81       	ldd	r30, Y+5	; 0x05
    1524:	fe 81       	ldd	r31, Y+6	; 0x06
    1526:	8d 81       	ldd	r24, Y+5	; 0x05
    1528:	9e 81       	ldd	r25, Y+6	; 0x06
    152a:	93 83       	std	Z+3, r25	; 0x03
    152c:	82 83       	std	Z+2, r24	; 0x02
    item->next = item;
    152e:	ed 81       	ldd	r30, Y+5	; 0x05
    1530:	fe 81       	ldd	r31, Y+6	; 0x06
    1532:	8d 81       	ldd	r24, Y+5	; 0x05
    1534:	9e 81       	ldd	r25, Y+6	; 0x06
    1536:	91 83       	std	Z+1, r25	; 0x01
    1538:	80 83       	st	Z, r24
}
    153a:	26 96       	adiw	r28, 0x06	; 6
    153c:	0f b6       	in	r0, 0x3f	; 63
    153e:	f8 94       	cli
    1540:	de bf       	out	0x3e, r29	; 62
    1542:	0f be       	out	0x3f, r0	; 63
    1544:	cd bf       	out	0x3d, r28	; 61
    1546:	cf 91       	pop	r28
    1548:	df 91       	pop	r29
    154a:	08 95       	ret

0000154c <idle_main>:
*****************************************************************************************/
#include "../include/bugurt.h"
kernel_t kernel;// Ядро, оно одно на всю систему!!!

WEAK void idle_main(void * arg)
{
    154c:	df 93       	push	r29
    154e:	cf 93       	push	r28
    1550:	00 d0       	rcall	.+0      	; 0x1552 <idle_main+0x6>
    1552:	cd b7       	in	r28, 0x3d	; 61
    1554:	de b7       	in	r29, 0x3e	; 62
    1556:	9a 83       	std	Y+2, r25	; 0x02
    1558:	89 83       	std	Y+1, r24	; 0x01
    155a:	ff cf       	rjmp	.-2      	; 0x155a <idle_main+0xe>

0000155c <kernel_init>:
    while(1);
}

void kernel_init(void)
{
    155c:	8f 92       	push	r8
    155e:	af 92       	push	r10
    1560:	bf 92       	push	r11
    1562:	cf 92       	push	r12
    1564:	ef 92       	push	r14
    1566:	ff 92       	push	r15
    1568:	0f 93       	push	r16
    156a:	1f 93       	push	r17
    156c:	df 93       	push	r29
    156e:	cf 93       	push	r28
    1570:	0f 92       	push	r0
    1572:	cd b7       	in	r28, 0x3d	; 61
    1574:	de b7       	in	r29, 0x3e	; 62
#ifdef CONFIG_MP
    core_id_t i;

    spin_init( &kernel.stat_lock );
    1576:	83 e0       	ldi	r24, 0x03	; 3
    1578:	93 e0       	ldi	r25, 0x03	; 3
    157a:	0e 94 3c 01 	call	0x278	; 0x278 <spin_init>
    spin_lock( &kernel.stat_lock );
    157e:	83 e0       	ldi	r24, 0x03	; 3
    1580:	93 e0       	ldi	r25, 0x03	; 3
    1582:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
    //Инициация собственно ядра
    for( i = (core_id_t)0; i<(core_id_t)MAX_CORES; i++ )
    1586:	19 82       	std	Y+1, r1	; 0x01
    1588:	76 c0       	rjmp	.+236    	; 0x1676 <kernel_init+0x11a>
    {
        proc_init_isr(
    158a:	89 81       	ldd	r24, Y+1	; 0x01
    158c:	28 2f       	mov	r18, r24
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	80 e3       	ldi	r24, 0x30	; 48
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	ac 01       	movw	r20, r24
    1596:	24 9f       	mul	r18, r20
    1598:	c0 01       	movw	r24, r0
    159a:	25 9f       	mul	r18, r21
    159c:	90 0d       	add	r25, r0
    159e:	34 9f       	mul	r19, r20
    15a0:	90 0d       	add	r25, r0
    15a2:	11 24       	eor	r1, r1
    15a4:	ac 01       	movw	r20, r24
    15a6:	4f 55       	subi	r20, 0x5F	; 95
    15a8:	5d 4f       	sbci	r21, 0xFD	; 253
    15aa:	89 81       	ldd	r24, Y+1	; 0x01
    15ac:	28 2f       	mov	r18, r24
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	02 c0       	rjmp	.+4      	; 0x15ba <kernel_init+0x5e>
    15b6:	88 0f       	add	r24, r24
    15b8:	99 1f       	adc	r25, r25
    15ba:	2a 95       	dec	r18
    15bc:	e2 f7       	brpl	.-8      	; 0x15b6 <kernel_init+0x5a>
    15be:	0f 92       	push	r0
    15c0:	ed b7       	in	r30, 0x3d	; 61
    15c2:	fe b7       	in	r31, 0x3e	; 62
    15c4:	31 96       	adiw	r30, 0x01	; 1
    15c6:	26 ea       	ldi	r18, 0xA6	; 166
    15c8:	3a e0       	ldi	r19, 0x0A	; 10
    15ca:	80 83       	st	Z, r24
    15cc:	ca 01       	movw	r24, r20
    15ce:	b9 01       	movw	r22, r18
    15d0:	40 e0       	ldi	r20, 0x00	; 0
    15d2:	50 e0       	ldi	r21, 0x00	; 0
    15d4:	20 e0       	ldi	r18, 0x00	; 0
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	00 e0       	ldi	r16, 0x00	; 0
    15da:	10 e0       	ldi	r17, 0x00	; 0
    15dc:	ee 24       	eor	r14, r14
    15de:	ff 24       	eor	r15, r15
    15e0:	0f 2e       	mov	r0, r31
    15e2:	f7 e0       	ldi	r31, 0x07	; 7
    15e4:	cf 2e       	mov	r12, r31
    15e6:	f0 2d       	mov	r31, r0
    15e8:	aa 24       	eor	r10, r10
    15ea:	bb 24       	eor	r11, r11
    15ec:	a3 94       	inc	r10
    15ee:	88 24       	eor	r8, r8
    15f0:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <proc_init_isr>
    15f4:	0f 90       	pop	r0
            ((prio_t)BITS_IN_INDEX_T - (prio_t)1),// низший приоритет
            (timer_t)1,//минимальный квант времени
            (bool_t)0,// не RT
            ((affinity_t)1)<<i // привязка  строго к одному процессору, а то его как сбалансирует отсюда
        );
        kernel.idle[i].core_id = i;
    15f6:	89 81       	ldd	r24, Y+1	; 0x01
    15f8:	28 2f       	mov	r18, r24
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	80 e3       	ldi	r24, 0x30	; 48
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	bc 01       	movw	r22, r24
    1602:	26 9f       	mul	r18, r22
    1604:	c0 01       	movw	r24, r0
    1606:	27 9f       	mul	r18, r23
    1608:	90 0d       	add	r25, r0
    160a:	36 9f       	mul	r19, r22
    160c:	90 0d       	add	r25, r0
    160e:	11 24       	eor	r1, r1
    1610:	fc 01       	movw	r30, r24
    1612:	ee 53       	subi	r30, 0x3E	; 62
    1614:	fd 4f       	sbci	r31, 0xFD	; 253
    1616:	89 81       	ldd	r24, Y+1	; 0x01
    1618:	80 83       	st	Z, r24
        stat_init( (stat_t *)kernel.stat + i );
    161a:	89 81       	ldd	r24, Y+1	; 0x01
    161c:	88 2f       	mov	r24, r24
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	8f 5f       	subi	r24, 0xFF	; 255
    1622:	9c 4f       	sbci	r25, 0xFC	; 252
    1624:	0e 94 73 01 	call	0x2e6	; 0x2e6 <stat_init>
        sched_init( (sched_t *)kernel.sched + i, (proc_t *)kernel.idle + i );
    1628:	89 81       	ldd	r24, Y+1	; 0x01
    162a:	28 2f       	mov	r18, r24
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	8b e2       	ldi	r24, 0x2B	; 43
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	ac 01       	movw	r20, r24
    1634:	24 9f       	mul	r18, r20
    1636:	c0 01       	movw	r24, r0
    1638:	25 9f       	mul	r18, r21
    163a:	90 0d       	add	r25, r0
    163c:	34 9f       	mul	r19, r20
    163e:	90 0d       	add	r25, r0
    1640:	11 24       	eor	r1, r1
    1642:	ac 01       	movw	r20, r24
    1644:	45 5b       	subi	r20, 0xB5	; 181
    1646:	5d 4f       	sbci	r21, 0xFD	; 253
    1648:	89 81       	ldd	r24, Y+1	; 0x01
    164a:	28 2f       	mov	r18, r24
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	80 e3       	ldi	r24, 0x30	; 48
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	bc 01       	movw	r22, r24
    1654:	26 9f       	mul	r18, r22
    1656:	c0 01       	movw	r24, r0
    1658:	27 9f       	mul	r18, r23
    165a:	90 0d       	add	r25, r0
    165c:	36 9f       	mul	r19, r22
    165e:	90 0d       	add	r25, r0
    1660:	11 24       	eor	r1, r1
    1662:	9c 01       	movw	r18, r24
    1664:	2f 55       	subi	r18, 0x5F	; 95
    1666:	3d 4f       	sbci	r19, 0xFD	; 253
    1668:	ca 01       	movw	r24, r20
    166a:	b9 01       	movw	r22, r18
    166c:	0e 94 40 13 	call	0x2680	; 0x2680 <sched_init>
    core_id_t i;

    spin_init( &kernel.stat_lock );
    spin_lock( &kernel.stat_lock );
    //Инициация собственно ядра
    for( i = (core_id_t)0; i<(core_id_t)MAX_CORES; i++ )
    1670:	89 81       	ldd	r24, Y+1	; 0x01
    1672:	8f 5f       	subi	r24, 0xFF	; 255
    1674:	89 83       	std	Y+1, r24	; 0x01
    1676:	89 81       	ldd	r24, Y+1	; 0x01
    1678:	82 30       	cpi	r24, 0x02	; 2
    167a:	08 f4       	brcc	.+2      	; 0x167e <kernel_init+0x122>
    167c:	86 cf       	rjmp	.-244    	; 0x158a <kernel_init+0x2e>
        );
        kernel.idle[i].core_id = i;
        stat_init( (stat_t *)kernel.stat + i );
        sched_init( (sched_t *)kernel.sched + i, (proc_t *)kernel.idle + i );
    }
    spin_unlock( &kernel.stat_lock );
    167e:	83 e0       	ldi	r24, 0x03	; 3
    1680:	93 e0       	ldi	r25, 0x03	; 3
    1682:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
        (timer_t)1,//минимальный квант времени
        (bool_t)0// не RT
    );
    sched_init( (sched_t *)&kernel.sched, (proc_t *)&kernel.idle );
#endif // CONFIG_MP
}
    1686:	0f 90       	pop	r0
    1688:	cf 91       	pop	r28
    168a:	df 91       	pop	r29
    168c:	1f 91       	pop	r17
    168e:	0f 91       	pop	r16
    1690:	ff 90       	pop	r15
    1692:	ef 90       	pop	r14
    1694:	cf 90       	pop	r12
    1696:	bf 90       	pop	r11
    1698:	af 90       	pop	r10
    169a:	8f 90       	pop	r8
    169c:	08 95       	ret

0000169e <mutex_init_isr>:
    mutex_t * mutex
#ifdef CONFIG_USE_HIGHEST_LOCKER
    ,prio_t prio
#endif // CONFIG_USE_HIGHEST_LOCKER
)
{
    169e:	df 93       	push	r29
    16a0:	cf 93       	push	r28
    16a2:	00 d0       	rcall	.+0      	; 0x16a4 <mutex_init_isr+0x6>
    16a4:	0f 92       	push	r0
    16a6:	cd b7       	in	r28, 0x3d	; 61
    16a8:	de b7       	in	r29, 0x3e	; 62
    16aa:	9a 83       	std	Y+2, r25	; 0x02
    16ac:	89 83       	std	Y+1, r24	; 0x01
    16ae:	6b 83       	std	Y+3, r22	; 0x03
    SPIN_INIT( mutex );
    16b0:	89 81       	ldd	r24, Y+1	; 0x01
    16b2:	9a 81       	ldd	r25, Y+2	; 0x02
    16b4:	43 96       	adiw	r24, 0x13	; 19
    16b6:	0e 94 3c 01 	call	0x278	; 0x278 <spin_init>
    SPIN_LOCK( mutex );
    16ba:	89 81       	ldd	r24, Y+1	; 0x01
    16bc:	9a 81       	ldd	r25, Y+2	; 0x02
    16be:	43 96       	adiw	r24, 0x13	; 19
    16c0:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
    xlist_init( (xlist_t *)mutex );
    16c4:	89 81       	ldd	r24, Y+1	; 0x01
    16c6:	9a 81       	ldd	r25, Y+2	; 0x02
    16c8:	0e 94 30 1b 	call	0x3660	; 0x3660 <xlist_init>
    mutex->free = (bool_t)1;
    16cc:	e9 81       	ldd	r30, Y+1	; 0x01
    16ce:	fa 81       	ldd	r31, Y+2	; 0x02
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	82 8b       	std	Z+18, r24	; 0x12
#ifdef CONFIG_USE_HIGHEST_LOCKER
    mutex->prio = prio;
    16d4:	e9 81       	ldd	r30, Y+1	; 0x01
    16d6:	fa 81       	ldd	r31, Y+2	; 0x02
    16d8:	8b 81       	ldd	r24, Y+3	; 0x03
    16da:	81 8b       	std	Z+17, r24	; 0x11
#endif // CONFIG_USE_HIGHEST_LOCKER
    SPIN_UNLOCK( mutex );
    16dc:	89 81       	ldd	r24, Y+1	; 0x01
    16de:	9a 81       	ldd	r25, Y+2	; 0x02
    16e0:	43 96       	adiw	r24, 0x13	; 19
    16e2:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
}
    16e6:	0f 90       	pop	r0
    16e8:	0f 90       	pop	r0
    16ea:	0f 90       	pop	r0
    16ec:	cf 91       	pop	r28
    16ee:	df 91       	pop	r29
    16f0:	08 95       	ret

000016f2 <_mutex_lock>:

// К моменту вызова захвачена блокировка mutex-а, запрещены прерывания
bool_t _mutex_lock( mutex_t * mutex )
{
    16f2:	df 93       	push	r29
    16f4:	cf 93       	push	r28
    16f6:	00 d0       	rcall	.+0      	; 0x16f8 <_mutex_lock+0x6>
    16f8:	00 d0       	rcall	.+0      	; 0x16fa <_mutex_lock+0x8>
    16fa:	0f 92       	push	r0
    16fc:	cd b7       	in	r28, 0x3d	; 61
    16fe:	de b7       	in	r29, 0x3e	; 62
    1700:	9d 83       	std	Y+5, r25	; 0x05
    1702:	8c 83       	std	Y+4, r24	; 0x04
    bool_t ret;
    proc_t * proc;
    // Захват блокировки мьютекса
    SPIN_LOCK( mutex );
    1704:	8c 81       	ldd	r24, Y+4	; 0x04
    1706:	9d 81       	ldd	r25, Y+5	; 0x05
    1708:	43 96       	adiw	r24, 0x13	; 19
    170a:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
    ret = mutex->free;
    170e:	ec 81       	ldd	r30, Y+4	; 0x04
    1710:	fd 81       	ldd	r31, Y+5	; 0x05
    1712:	82 89       	ldd	r24, Z+18	; 0x12
    1714:	8b 83       	std	Y+3, r24	; 0x03
    proc = current_proc();
    1716:	0e 94 0a 01 	call	0x214	; 0x214 <current_proc>
    171a:	9a 83       	std	Y+2, r25	; 0x02
    171c:	89 83       	std	Y+1, r24	; 0x01
    // Захват блокировки процесса
    SPIN_LOCK( proc );
    171e:	89 81       	ldd	r24, Y+1	; 0x01
    1720:	9a 81       	ldd	r25, Y+2	; 0x02
    1722:	83 96       	adiw	r24, 0x23	; 35
    1724:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
    PROC_LRES_INC( proc, GET_PRIO( mutex ) );
    1728:	ec 81       	ldd	r30, Y+4	; 0x04
    172a:	fd 81       	ldd	r31, Y+5	; 0x05
    172c:	21 89       	ldd	r18, Z+17	; 0x11
    172e:	89 81       	ldd	r24, Y+1	; 0x01
    1730:	9a 81       	ldd	r25, Y+2	; 0x02
    1732:	62 2f       	mov	r22, r18
    1734:	0e 94 b7 11 	call	0x236e	; 0x236e <_proc_lres_inc>

    if( ret )
    1738:	8b 81       	ldd	r24, Y+3	; 0x03
    173a:	88 23       	and	r24, r24
    173c:	41 f0       	breq	.+16     	; 0x174e <_mutex_lock+0x5c>
    {
        mutex->free = (bool_t)0;
    173e:	ec 81       	ldd	r30, Y+4	; 0x04
    1740:	fd 81       	ldd	r31, Y+5	; 0x05
    1742:	12 8a       	std	Z+18, r1	; 0x12
        PROC_PRIO_CONTROL_RUNNING( proc );
    1744:	89 81       	ldd	r24, Y+1	; 0x01
    1746:	9a 81       	ldd	r25, Y+2	; 0x02
    1748:	0e 94 3a 12 	call	0x2474	; 0x2474 <_proc_prio_control_running>
    174c:	14 c0       	rjmp	.+40     	; 0x1776 <_mutex_lock+0x84>
    }
    else
    {
        proc->flags |= PROC_FLG_QUEUE;
    174e:	e9 81       	ldd	r30, Y+1	; 0x01
    1750:	fa 81       	ldd	r31, Y+2	; 0x02
    1752:	87 81       	ldd	r24, Z+7	; 0x07
    1754:	90 85       	ldd	r25, Z+8	; 0x08
    1756:	80 61       	ori	r24, 0x10	; 16
    1758:	e9 81       	ldd	r30, Y+1	; 0x01
    175a:	fa 81       	ldd	r31, Y+2	; 0x02
    175c:	90 87       	std	Z+8, r25	; 0x08
    175e:	87 83       	std	Z+7, r24	; 0x07
        _proc_stop( proc );
    1760:	89 81       	ldd	r24, Y+1	; 0x01
    1762:	9a 81       	ldd	r25, Y+2	; 0x02
    1764:	0e 94 ac 10 	call	0x2158	; 0x2158 <_proc_stop>
        pitem_insert( (pitem_t *)proc, (xlist_t *)mutex );
    1768:	89 81       	ldd	r24, Y+1	; 0x01
    176a:	9a 81       	ldd	r25, Y+2	; 0x02
    176c:	2c 81       	ldd	r18, Y+4	; 0x04
    176e:	3d 81       	ldd	r19, Y+5	; 0x05
    1770:	b9 01       	movw	r22, r18
    1772:	0e 94 65 0d 	call	0x1aca	; 0x1aca <pitem_insert>
    }
    SPIN_UNLOCK( proc );
    1776:	89 81       	ldd	r24, Y+1	; 0x01
    1778:	9a 81       	ldd	r25, Y+2	; 0x02
    177a:	83 96       	adiw	r24, 0x23	; 35
    177c:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
    SPIN_UNLOCK( mutex );
    1780:	8c 81       	ldd	r24, Y+4	; 0x04
    1782:	9d 81       	ldd	r25, Y+5	; 0x05
    1784:	43 96       	adiw	r24, 0x13	; 19
    1786:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
    return ret;
    178a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    178c:	0f 90       	pop	r0
    178e:	0f 90       	pop	r0
    1790:	0f 90       	pop	r0
    1792:	0f 90       	pop	r0
    1794:	0f 90       	pop	r0
    1796:	cf 91       	pop	r28
    1798:	df 91       	pop	r29
    179a:	08 95       	ret

0000179c <_mutex_try_lock>:

bool_t _mutex_try_lock( mutex_t * mutex )
{
    179c:	df 93       	push	r29
    179e:	cf 93       	push	r28
    17a0:	00 d0       	rcall	.+0      	; 0x17a2 <_mutex_try_lock+0x6>
    17a2:	00 d0       	rcall	.+0      	; 0x17a4 <_mutex_try_lock+0x8>
    17a4:	0f 92       	push	r0
    17a6:	cd b7       	in	r28, 0x3d	; 61
    17a8:	de b7       	in	r29, 0x3e	; 62
    17aa:	9d 83       	std	Y+5, r25	; 0x05
    17ac:	8c 83       	std	Y+4, r24	; 0x04
    bool_t ret;
    proc_t * proc;

    SPIN_LOCK( mutex );
    17ae:	8c 81       	ldd	r24, Y+4	; 0x04
    17b0:	9d 81       	ldd	r25, Y+5	; 0x05
    17b2:	43 96       	adiw	r24, 0x13	; 19
    17b4:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
    ret = mutex->free;
    17b8:	ec 81       	ldd	r30, Y+4	; 0x04
    17ba:	fd 81       	ldd	r31, Y+5	; 0x05
    17bc:	82 89       	ldd	r24, Z+18	; 0x12
    17be:	8b 83       	std	Y+3, r24	; 0x03
    proc = current_proc();
    17c0:	0e 94 0a 01 	call	0x214	; 0x214 <current_proc>
    17c4:	9a 83       	std	Y+2, r25	; 0x02
    17c6:	89 83       	std	Y+1, r24	; 0x01

    SPIN_LOCK( proc );
    17c8:	89 81       	ldd	r24, Y+1	; 0x01
    17ca:	9a 81       	ldd	r25, Y+2	; 0x02
    17cc:	83 96       	adiw	r24, 0x23	; 35
    17ce:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
    if( ret )
    17d2:	8b 81       	ldd	r24, Y+3	; 0x03
    17d4:	88 23       	and	r24, r24
    17d6:	79 f0       	breq	.+30     	; 0x17f6 <_mutex_try_lock+0x5a>
    {
        mutex->free = (bool_t)0;
    17d8:	ec 81       	ldd	r30, Y+4	; 0x04
    17da:	fd 81       	ldd	r31, Y+5	; 0x05
    17dc:	12 8a       	std	Z+18, r1	; 0x12
        PROC_LRES_INC( proc, GET_PRIO( mutex ) );
    17de:	ec 81       	ldd	r30, Y+4	; 0x04
    17e0:	fd 81       	ldd	r31, Y+5	; 0x05
    17e2:	21 89       	ldd	r18, Z+17	; 0x11
    17e4:	89 81       	ldd	r24, Y+1	; 0x01
    17e6:	9a 81       	ldd	r25, Y+2	; 0x02
    17e8:	62 2f       	mov	r22, r18
    17ea:	0e 94 b7 11 	call	0x236e	; 0x236e <_proc_lres_inc>
        PROC_PRIO_CONTROL_RUNNING( proc );
    17ee:	89 81       	ldd	r24, Y+1	; 0x01
    17f0:	9a 81       	ldd	r25, Y+2	; 0x02
    17f2:	0e 94 3a 12 	call	0x2474	; 0x2474 <_proc_prio_control_running>
    }
    SPIN_UNLOCK( proc );
    17f6:	89 81       	ldd	r24, Y+1	; 0x01
    17f8:	9a 81       	ldd	r25, Y+2	; 0x02
    17fa:	83 96       	adiw	r24, 0x23	; 35
    17fc:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
    SPIN_UNLOCK( mutex );
    1800:	8c 81       	ldd	r24, Y+4	; 0x04
    1802:	9d 81       	ldd	r25, Y+5	; 0x05
    1804:	43 96       	adiw	r24, 0x13	; 19
    1806:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
    return ret;
    180a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    180c:	0f 90       	pop	r0
    180e:	0f 90       	pop	r0
    1810:	0f 90       	pop	r0
    1812:	0f 90       	pop	r0
    1814:	0f 90       	pop	r0
    1816:	cf 91       	pop	r28
    1818:	df 91       	pop	r29
    181a:	08 95       	ret

0000181c <_mutex_unlock>:

void _mutex_unlock( mutex_t *  mutex )
{
    181c:	df 93       	push	r29
    181e:	cf 93       	push	r28
    1820:	00 d0       	rcall	.+0      	; 0x1822 <_mutex_unlock+0x6>
    1822:	00 d0       	rcall	.+0      	; 0x1824 <_mutex_unlock+0x8>
    1824:	cd b7       	in	r28, 0x3d	; 61
    1826:	de b7       	in	r29, 0x3e	; 62
    1828:	9c 83       	std	Y+4, r25	; 0x04
    182a:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc;

    SPIN_LOCK( mutex );
    182c:	8b 81       	ldd	r24, Y+3	; 0x03
    182e:	9c 81       	ldd	r25, Y+4	; 0x04
    1830:	43 96       	adiw	r24, 0x13	; 19
    1832:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
    proc = current_proc();
    1836:	0e 94 0a 01 	call	0x214	; 0x214 <current_proc>
    183a:	9a 83       	std	Y+2, r25	; 0x02
    183c:	89 83       	std	Y+1, r24	; 0x01

    SPIN_LOCK(proc);
    183e:	89 81       	ldd	r24, Y+1	; 0x01
    1840:	9a 81       	ldd	r25, Y+2	; 0x02
    1842:	83 96       	adiw	r24, 0x23	; 35
    1844:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
    PROC_LRES_DEC( proc, GET_PRIO( mutex ) );
    1848:	eb 81       	ldd	r30, Y+3	; 0x03
    184a:	fc 81       	ldd	r31, Y+4	; 0x04
    184c:	21 89       	ldd	r18, Z+17	; 0x11
    184e:	89 81       	ldd	r24, Y+1	; 0x01
    1850:	9a 81       	ldd	r25, Y+2	; 0x02
    1852:	62 2f       	mov	r22, r18
    1854:	0e 94 da 11 	call	0x23b4	; 0x23b4 <_proc_lres_dec>
    // Если проготовлен и готов к остановке - останавливаем
    if(  PROC_PRE_STOP_TEST(proc)  )
    1858:	e9 81       	ldd	r30, Y+1	; 0x01
    185a:	fa 81       	ldd	r31, Y+2	; 0x02
    185c:	87 81       	ldd	r24, Z+7	; 0x07
    185e:	90 85       	ldd	r25, Z+8	; 0x08
    1860:	80 78       	andi	r24, 0x80	; 128
    1862:	90 70       	andi	r25, 0x00	; 0
    1864:	00 97       	sbiw	r24, 0x00	; 0
    1866:	f9 f0       	breq	.+62     	; 0x18a6 <_mutex_unlock+0x8a>
    1868:	e9 81       	ldd	r30, Y+1	; 0x01
    186a:	fa 81       	ldd	r31, Y+2	; 0x02
    186c:	87 81       	ldd	r24, Z+7	; 0x07
    186e:	90 85       	ldd	r25, Z+8	; 0x08
    1870:	8c 70       	andi	r24, 0x0C	; 12
    1872:	90 70       	andi	r25, 0x00	; 0
    1874:	00 97       	sbiw	r24, 0x00	; 0
    1876:	b9 f4       	brne	.+46     	; 0x18a6 <_mutex_unlock+0x8a>
    {
        proc->flags &= ~PROC_FLG_PRE_STOP_MASK;
    1878:	e9 81       	ldd	r30, Y+1	; 0x01
    187a:	fa 81       	ldd	r31, Y+2	; 0x02
    187c:	87 81       	ldd	r24, Z+7	; 0x07
    187e:	90 85       	ldd	r25, Z+8	; 0x08
    1880:	8d 77       	andi	r24, 0x7D	; 125
    1882:	e9 81       	ldd	r30, Y+1	; 0x01
    1884:	fa 81       	ldd	r31, Y+2	; 0x02
    1886:	90 87       	std	Z+8, r25	; 0x08
    1888:	87 83       	std	Z+7, r24	; 0x07
        _proc_stop_( proc );
    188a:	89 81       	ldd	r24, Y+1	; 0x01
    188c:	9a 81       	ldd	r25, Y+2	; 0x02
    188e:	0e 94 68 10 	call	0x20d0	; 0x20d0 <_proc_stop_>
        PROC_PRIO_CONTROL_STOPED( proc );
    1892:	89 81       	ldd	r24, Y+1	; 0x01
    1894:	9a 81       	ldd	r25, Y+2	; 0x02
    1896:	0e 94 fd 11 	call	0x23fa	; 0x23fa <_proc_prio_control_stoped>
        // Нужна перепланировка, процесс остановили и не запустили обратно
        RESCHED_PROC( proc );
    189a:	e9 81       	ldd	r30, Y+1	; 0x01
    189c:	fa 81       	ldd	r31, Y+2	; 0x02
    189e:	81 a1       	ldd	r24, Z+33	; 0x21
    18a0:	0e 94 de 01 	call	0x3bc	; 0x3bc <resched>
    18a4:	04 c0       	rjmp	.+8      	; 0x18ae <_mutex_unlock+0x92>
    }
    else
    {
        // Не останавливаем - меняем проиритет на ходу
        PROC_PRIO_CONTROL_RUNNING( proc );
    18a6:	89 81       	ldd	r24, Y+1	; 0x01
    18a8:	9a 81       	ldd	r25, Y+2	; 0x02
    18aa:	0e 94 3a 12 	call	0x2474	; 0x2474 <_proc_prio_control_running>
    }
    SPIN_UNLOCK( proc );
    18ae:	89 81       	ldd	r24, Y+1	; 0x01
    18b0:	9a 81       	ldd	r25, Y+2	; 0x02
    18b2:	83 96       	adiw	r24, 0x23	; 35
    18b4:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
    // Обрабока самого мьютекса
    if( ((xlist_t *)mutex)->index == (index_t)0  )
    18b8:	eb 81       	ldd	r30, Y+3	; 0x03
    18ba:	fc 81       	ldd	r31, Y+4	; 0x04
    18bc:	80 89       	ldd	r24, Z+16	; 0x10
    18be:	88 23       	and	r24, r24
    18c0:	29 f4       	brne	.+10     	; 0x18cc <_mutex_unlock+0xb0>
    {
        // Список ожидающих пуст, выходим
        mutex->free = (bool_t)1;
    18c2:	eb 81       	ldd	r30, Y+3	; 0x03
    18c4:	fc 81       	ldd	r31, Y+4	; 0x04
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	82 8b       	std	Z+18, r24	; 0x12
    18ca:	25 c0       	rjmp	.+74     	; 0x1916 <_mutex_unlock+0xfa>
        goto end;
    }
    // Список ожидающих не пуст, запускаем голову
    proc = (proc_t *)xlist_head( (xlist_t *)mutex );
    18cc:	8b 81       	ldd	r24, Y+3	; 0x03
    18ce:	9c 81       	ldd	r25, Y+4	; 0x04
    18d0:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xlist_head>
    18d4:	9a 83       	std	Y+2, r25	; 0x02
    18d6:	89 83       	std	Y+1, r24	; 0x01
    SPIN_LOCK( proc );
    18d8:	89 81       	ldd	r24, Y+1	; 0x01
    18da:	9a 81       	ldd	r25, Y+2	; 0x02
    18dc:	83 96       	adiw	r24, 0x23	; 35
    18de:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
    // Сначала надо вырезать
    pitem_cut( (pitem_t *)proc );
    18e2:	89 81       	ldd	r24, Y+1	; 0x01
    18e4:	9a 81       	ldd	r25, Y+2	; 0x02
    18e6:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <pitem_cut>
    proc->flags &= ~PROC_FLG_QUEUE;
    18ea:	e9 81       	ldd	r30, Y+1	; 0x01
    18ec:	fa 81       	ldd	r31, Y+2	; 0x02
    18ee:	87 81       	ldd	r24, Z+7	; 0x07
    18f0:	90 85       	ldd	r25, Z+8	; 0x08
    18f2:	8f 7e       	andi	r24, 0xEF	; 239
    18f4:	e9 81       	ldd	r30, Y+1	; 0x01
    18f6:	fa 81       	ldd	r31, Y+2	; 0x02
    18f8:	90 87       	std	Z+8, r25	; 0x08
    18fa:	87 83       	std	Z+7, r24	; 0x07
    // Управление приоритетом процесса
    PROC_PRIO_CONTROL_STOPED( proc );
    18fc:	89 81       	ldd	r24, Y+1	; 0x01
    18fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1900:	0e 94 fd 11 	call	0x23fa	; 0x23fa <_proc_prio_control_stoped>
    _proc_run( proc );
    1904:	89 81       	ldd	r24, Y+1	; 0x01
    1906:	9a 81       	ldd	r25, Y+2	; 0x02
    1908:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <_proc_run>
    SPIN_UNLOCK( proc );
    190c:	89 81       	ldd	r24, Y+1	; 0x01
    190e:	9a 81       	ldd	r25, Y+2	; 0x02
    1910:	83 96       	adiw	r24, 0x23	; 35
    1912:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
end:
    SPIN_UNLOCK( mutex );
    1916:	8b 81       	ldd	r24, Y+3	; 0x03
    1918:	9c 81       	ldd	r25, Y+4	; 0x04
    191a:	43 96       	adiw	r24, 0x13	; 19
    191c:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
}
    1920:	0f 90       	pop	r0
    1922:	0f 90       	pop	r0
    1924:	0f 90       	pop	r0
    1926:	0f 90       	pop	r0
    1928:	cf 91       	pop	r28
    192a:	df 91       	pop	r29
    192c:	08 95       	ret

0000192e <pcounter_init>:
*                           http://www.0chan.ru/r/res/9996.html                          *
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
void pcounter_init(pcounter_t * pcounter)
{
    192e:	df 93       	push	r29
    1930:	cf 93       	push	r28
    1932:	00 d0       	rcall	.+0      	; 0x1934 <pcounter_init+0x6>
    1934:	0f 92       	push	r0
    1936:	cd b7       	in	r28, 0x3d	; 61
    1938:	de b7       	in	r29, 0x3e	; 62
    193a:	9b 83       	std	Y+3, r25	; 0x03
    193c:	8a 83       	std	Y+2, r24	; 0x02
    prio_t p;
    pcounter->index = (index_t)0;
    193e:	ea 81       	ldd	r30, Y+2	; 0x02
    1940:	fb 81       	ldd	r31, Y+3	; 0x03
    1942:	10 8a       	std	Z+16, r1	; 0x10
    for(p = 0; p < (index_t)BITS_IN_INDEX_T; p++)pcounter->counter[p] = (count_t)0;
    1944:	19 82       	std	Y+1, r1	; 0x01
    1946:	0f c0       	rjmp	.+30     	; 0x1966 <pcounter_init+0x38>
    1948:	89 81       	ldd	r24, Y+1	; 0x01
    194a:	88 2f       	mov	r24, r24
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	2a 81       	ldd	r18, Y+2	; 0x02
    1950:	3b 81       	ldd	r19, Y+3	; 0x03
    1952:	88 0f       	add	r24, r24
    1954:	99 1f       	adc	r25, r25
    1956:	f9 01       	movw	r30, r18
    1958:	e8 0f       	add	r30, r24
    195a:	f9 1f       	adc	r31, r25
    195c:	11 82       	std	Z+1, r1	; 0x01
    195e:	10 82       	st	Z, r1
    1960:	89 81       	ldd	r24, Y+1	; 0x01
    1962:	8f 5f       	subi	r24, 0xFF	; 255
    1964:	89 83       	std	Y+1, r24	; 0x01
    1966:	89 81       	ldd	r24, Y+1	; 0x01
    1968:	88 30       	cpi	r24, 0x08	; 8
    196a:	70 f3       	brcs	.-36     	; 0x1948 <pcounter_init+0x1a>
}
    196c:	0f 90       	pop	r0
    196e:	0f 90       	pop	r0
    1970:	0f 90       	pop	r0
    1972:	cf 91       	pop	r28
    1974:	df 91       	pop	r29
    1976:	08 95       	ret

00001978 <pcounter_inc>:

void pcounter_inc(pcounter_t * pcounter, prio_t prio)
{
    1978:	df 93       	push	r29
    197a:	cf 93       	push	r28
    197c:	00 d0       	rcall	.+0      	; 0x197e <pcounter_inc+0x6>
    197e:	0f 92       	push	r0
    1980:	cd b7       	in	r28, 0x3d	; 61
    1982:	de b7       	in	r29, 0x3e	; 62
    1984:	9a 83       	std	Y+2, r25	; 0x02
    1986:	89 83       	std	Y+1, r24	; 0x01
    1988:	6b 83       	std	Y+3, r22	; 0x03
    pcounter->counter[prio]++;
    198a:	8b 81       	ldd	r24, Y+3	; 0x03
    198c:	68 2f       	mov	r22, r24
    198e:	70 e0       	ldi	r23, 0x00	; 0
    1990:	29 81       	ldd	r18, Y+1	; 0x01
    1992:	3a 81       	ldd	r19, Y+2	; 0x02
    1994:	cb 01       	movw	r24, r22
    1996:	88 0f       	add	r24, r24
    1998:	99 1f       	adc	r25, r25
    199a:	f9 01       	movw	r30, r18
    199c:	e8 0f       	add	r30, r24
    199e:	f9 1f       	adc	r31, r25
    19a0:	80 81       	ld	r24, Z
    19a2:	91 81       	ldd	r25, Z+1	; 0x01
    19a4:	ac 01       	movw	r20, r24
    19a6:	4f 5f       	subi	r20, 0xFF	; 255
    19a8:	5f 4f       	sbci	r21, 0xFF	; 255
    19aa:	29 81       	ldd	r18, Y+1	; 0x01
    19ac:	3a 81       	ldd	r19, Y+2	; 0x02
    19ae:	cb 01       	movw	r24, r22
    19b0:	88 0f       	add	r24, r24
    19b2:	99 1f       	adc	r25, r25
    19b4:	f9 01       	movw	r30, r18
    19b6:	e8 0f       	add	r30, r24
    19b8:	f9 1f       	adc	r31, r25
    19ba:	51 83       	std	Z+1, r21	; 0x01
    19bc:	40 83       	st	Z, r20
    pcounter->index |= ((index_t)1)<<prio;
    19be:	e9 81       	ldd	r30, Y+1	; 0x01
    19c0:	fa 81       	ldd	r31, Y+2	; 0x02
    19c2:	80 89       	ldd	r24, Z+16	; 0x10
    19c4:	48 2f       	mov	r20, r24
    19c6:	8b 81       	ldd	r24, Y+3	; 0x03
    19c8:	28 2f       	mov	r18, r24
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	02 2e       	mov	r0, r18
    19d2:	02 c0       	rjmp	.+4      	; 0x19d8 <pcounter_inc+0x60>
    19d4:	88 0f       	add	r24, r24
    19d6:	99 1f       	adc	r25, r25
    19d8:	0a 94       	dec	r0
    19da:	e2 f7       	brpl	.-8      	; 0x19d4 <pcounter_inc+0x5c>
    19dc:	84 2b       	or	r24, r20
    19de:	e9 81       	ldd	r30, Y+1	; 0x01
    19e0:	fa 81       	ldd	r31, Y+2	; 0x02
    19e2:	80 8b       	std	Z+16, r24	; 0x10
}
    19e4:	0f 90       	pop	r0
    19e6:	0f 90       	pop	r0
    19e8:	0f 90       	pop	r0
    19ea:	cf 91       	pop	r28
    19ec:	df 91       	pop	r29
    19ee:	08 95       	ret

000019f0 <pcounter_dec>:

index_t pcounter_dec(pcounter_t * pcounter, prio_t prio)
{
    19f0:	df 93       	push	r29
    19f2:	cf 93       	push	r28
    19f4:	00 d0       	rcall	.+0      	; 0x19f6 <pcounter_dec+0x6>
    19f6:	00 d0       	rcall	.+0      	; 0x19f8 <pcounter_dec+0x8>
    19f8:	cd b7       	in	r28, 0x3d	; 61
    19fa:	de b7       	in	r29, 0x3e	; 62
    19fc:	9b 83       	std	Y+3, r25	; 0x03
    19fe:	8a 83       	std	Y+2, r24	; 0x02
    1a00:	6c 83       	std	Y+4, r22	; 0x04
    index_t mask;
    mask = ((index_t)1)<<prio;
    1a02:	8c 81       	ldd	r24, Y+4	; 0x04
    1a04:	28 2f       	mov	r18, r24
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	81 e0       	ldi	r24, 0x01	; 1
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	02 c0       	rjmp	.+4      	; 0x1a12 <pcounter_dec+0x22>
    1a0e:	88 0f       	add	r24, r24
    1a10:	99 1f       	adc	r25, r25
    1a12:	2a 95       	dec	r18
    1a14:	e2 f7       	brpl	.-8      	; 0x1a0e <pcounter_dec+0x1e>
    1a16:	89 83       	std	Y+1, r24	; 0x01
    pcounter->counter[prio]--;
    1a18:	8c 81       	ldd	r24, Y+4	; 0x04
    1a1a:	68 2f       	mov	r22, r24
    1a1c:	70 e0       	ldi	r23, 0x00	; 0
    1a1e:	2a 81       	ldd	r18, Y+2	; 0x02
    1a20:	3b 81       	ldd	r19, Y+3	; 0x03
    1a22:	cb 01       	movw	r24, r22
    1a24:	88 0f       	add	r24, r24
    1a26:	99 1f       	adc	r25, r25
    1a28:	f9 01       	movw	r30, r18
    1a2a:	e8 0f       	add	r30, r24
    1a2c:	f9 1f       	adc	r31, r25
    1a2e:	80 81       	ld	r24, Z
    1a30:	91 81       	ldd	r25, Z+1	; 0x01
    1a32:	ac 01       	movw	r20, r24
    1a34:	41 50       	subi	r20, 0x01	; 1
    1a36:	50 40       	sbci	r21, 0x00	; 0
    1a38:	2a 81       	ldd	r18, Y+2	; 0x02
    1a3a:	3b 81       	ldd	r19, Y+3	; 0x03
    1a3c:	cb 01       	movw	r24, r22
    1a3e:	88 0f       	add	r24, r24
    1a40:	99 1f       	adc	r25, r25
    1a42:	f9 01       	movw	r30, r18
    1a44:	e8 0f       	add	r30, r24
    1a46:	f9 1f       	adc	r31, r25
    1a48:	51 83       	std	Z+1, r21	; 0x01
    1a4a:	40 83       	st	Z, r20
    if(pcounter->counter[prio] == (count_t)0)pcounter->index &= ~mask;
    1a4c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a4e:	88 2f       	mov	r24, r24
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	2a 81       	ldd	r18, Y+2	; 0x02
    1a54:	3b 81       	ldd	r19, Y+3	; 0x03
    1a56:	88 0f       	add	r24, r24
    1a58:	99 1f       	adc	r25, r25
    1a5a:	f9 01       	movw	r30, r18
    1a5c:	e8 0f       	add	r30, r24
    1a5e:	f9 1f       	adc	r31, r25
    1a60:	80 81       	ld	r24, Z
    1a62:	91 81       	ldd	r25, Z+1	; 0x01
    1a64:	00 97       	sbiw	r24, 0x00	; 0
    1a66:	51 f4       	brne	.+20     	; 0x1a7c <pcounter_dec+0x8c>
    1a68:	ea 81       	ldd	r30, Y+2	; 0x02
    1a6a:	fb 81       	ldd	r31, Y+3	; 0x03
    1a6c:	80 89       	ldd	r24, Z+16	; 0x10
    1a6e:	98 2f       	mov	r25, r24
    1a70:	89 81       	ldd	r24, Y+1	; 0x01
    1a72:	80 95       	com	r24
    1a74:	89 23       	and	r24, r25
    1a76:	ea 81       	ldd	r30, Y+2	; 0x02
    1a78:	fb 81       	ldd	r31, Y+3	; 0x03
    1a7a:	80 8b       	std	Z+16, r24	; 0x10
    return pcounter->index & mask;
    1a7c:	ea 81       	ldd	r30, Y+2	; 0x02
    1a7e:	fb 81       	ldd	r31, Y+3	; 0x03
    1a80:	90 89       	ldd	r25, Z+16	; 0x10
    1a82:	89 81       	ldd	r24, Y+1	; 0x01
    1a84:	89 23       	and	r24, r25
}
    1a86:	0f 90       	pop	r0
    1a88:	0f 90       	pop	r0
    1a8a:	0f 90       	pop	r0
    1a8c:	0f 90       	pop	r0
    1a8e:	cf 91       	pop	r28
    1a90:	df 91       	pop	r29
    1a92:	08 95       	ret

00001a94 <pitem_init>:
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
// Инициация
void pitem_init( pitem_t * pitem, prio_t prio )
{
    1a94:	df 93       	push	r29
    1a96:	cf 93       	push	r28
    1a98:	00 d0       	rcall	.+0      	; 0x1a9a <pitem_init+0x6>
    1a9a:	0f 92       	push	r0
    1a9c:	cd b7       	in	r28, 0x3d	; 61
    1a9e:	de b7       	in	r29, 0x3e	; 62
    1aa0:	9a 83       	std	Y+2, r25	; 0x02
    1aa2:	89 83       	std	Y+1, r24	; 0x01
    1aa4:	6b 83       	std	Y+3, r22	; 0x03
    item_init( (item_t *)pitem );
    1aa6:	89 81       	ldd	r24, Y+1	; 0x01
    1aa8:	9a 81       	ldd	r25, Y+2	; 0x02
    1aaa:	0e 94 26 0a 	call	0x144c	; 0x144c <item_init>
    pitem->list = (xlist_t *)0;
    1aae:	e9 81       	ldd	r30, Y+1	; 0x01
    1ab0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ab2:	15 82       	std	Z+5, r1	; 0x05
    1ab4:	14 82       	std	Z+4, r1	; 0x04
    pitem->prio = prio;
    1ab6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ab8:	fa 81       	ldd	r31, Y+2	; 0x02
    1aba:	8b 81       	ldd	r24, Y+3	; 0x03
    1abc:	86 83       	std	Z+6, r24	; 0x06
}
    1abe:	0f 90       	pop	r0
    1ac0:	0f 90       	pop	r0
    1ac2:	0f 90       	pop	r0
    1ac4:	cf 91       	pop	r28
    1ac6:	df 91       	pop	r29
    1ac8:	08 95       	ret

00001aca <pitem_insert>:
// Вставка в список
void pitem_insert( pitem_t * pitem, xlist_t * xlist )
{
    1aca:	df 93       	push	r29
    1acc:	cf 93       	push	r28
    1ace:	cd b7       	in	r28, 0x3d	; 61
    1ad0:	de b7       	in	r29, 0x3e	; 62
    1ad2:	28 97       	sbiw	r28, 0x08	; 8
    1ad4:	0f b6       	in	r0, 0x3f	; 63
    1ad6:	f8 94       	cli
    1ad8:	de bf       	out	0x3e, r29	; 62
    1ada:	0f be       	out	0x3f, r0	; 63
    1adc:	cd bf       	out	0x3d, r28	; 61
    1ade:	9e 83       	std	Y+6, r25	; 0x06
    1ae0:	8d 83       	std	Y+5, r24	; 0x05
    1ae2:	78 87       	std	Y+8, r23	; 0x08
    1ae4:	6f 83       	std	Y+7, r22	; 0x07
    prio_t prio;
    index_t mask;
    item_t ** head;

    prio = pitem->prio;
    1ae6:	ed 81       	ldd	r30, Y+5	; 0x05
    1ae8:	fe 81       	ldd	r31, Y+6	; 0x06
    1aea:	86 81       	ldd	r24, Z+6	; 0x06
    1aec:	8c 83       	std	Y+4, r24	; 0x04
    mask = ((index_t)1)<<prio;
    1aee:	8c 81       	ldd	r24, Y+4	; 0x04
    1af0:	28 2f       	mov	r18, r24
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	81 e0       	ldi	r24, 0x01	; 1
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	02 c0       	rjmp	.+4      	; 0x1afe <pitem_insert+0x34>
    1afa:	88 0f       	add	r24, r24
    1afc:	99 1f       	adc	r25, r25
    1afe:	2a 95       	dec	r18
    1b00:	e2 f7       	brpl	.-8      	; 0x1afa <pitem_insert+0x30>
    1b02:	8b 83       	std	Y+3, r24	; 0x03
    head = (item_t **)xlist + prio;
    1b04:	2f 81       	ldd	r18, Y+7	; 0x07
    1b06:	38 85       	ldd	r19, Y+8	; 0x08
    1b08:	8c 81       	ldd	r24, Y+4	; 0x04
    1b0a:	88 2f       	mov	r24, r24
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	88 0f       	add	r24, r24
    1b10:	99 1f       	adc	r25, r25
    1b12:	82 0f       	add	r24, r18
    1b14:	93 1f       	adc	r25, r19
    1b16:	9a 83       	std	Y+2, r25	; 0x02
    1b18:	89 83       	std	Y+1, r24	; 0x01
    // Пуста ли часть списка с таким приоритетом
    if( ( xlist->index )& mask)
    1b1a:	ef 81       	ldd	r30, Y+7	; 0x07
    1b1c:	f8 85       	ldd	r31, Y+8	; 0x08
    1b1e:	90 89       	ldd	r25, Z+16	; 0x10
    1b20:	8b 81       	ldd	r24, Y+3	; 0x03
    1b22:	89 23       	and	r24, r25
    1b24:	88 23       	and	r24, r24
    1b26:	51 f0       	breq	.+20     	; 0x1b3c <pitem_insert+0x72>
    {
        //Не пуста вставляем туда gitem
        item_insert( (item_t *)pitem, *head );
    1b28:	8d 81       	ldd	r24, Y+5	; 0x05
    1b2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b2c:	e9 81       	ldd	r30, Y+1	; 0x01
    1b2e:	fa 81       	ldd	r31, Y+2	; 0x02
    1b30:	20 81       	ld	r18, Z
    1b32:	31 81       	ldd	r19, Z+1	; 0x01
    1b34:	b9 01       	movw	r22, r18
    1b36:	0e 94 3e 0a 	call	0x147c	; 0x147c <item_insert>
    1b3a:	0e c0       	rjmp	.+28     	; 0x1b58 <pitem_insert+0x8e>
    }
    else
    {
        // Пуста, gitem будет головой
        *head = (item_t *)pitem;
    1b3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b40:	e9 81       	ldd	r30, Y+1	; 0x01
    1b42:	fa 81       	ldd	r31, Y+2	; 0x02
    1b44:	91 83       	std	Z+1, r25	; 0x01
    1b46:	80 83       	st	Z, r24
        xlist->index |= mask;
    1b48:	ef 81       	ldd	r30, Y+7	; 0x07
    1b4a:	f8 85       	ldd	r31, Y+8	; 0x08
    1b4c:	90 89       	ldd	r25, Z+16	; 0x10
    1b4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b50:	89 2b       	or	r24, r25
    1b52:	ef 81       	ldd	r30, Y+7	; 0x07
    1b54:	f8 85       	ldd	r31, Y+8	; 0x08
    1b56:	80 8b       	std	Z+16, r24	; 0x10
    }
    pitem->list = xlist;
    1b58:	ed 81       	ldd	r30, Y+5	; 0x05
    1b5a:	fe 81       	ldd	r31, Y+6	; 0x06
    1b5c:	8f 81       	ldd	r24, Y+7	; 0x07
    1b5e:	98 85       	ldd	r25, Y+8	; 0x08
    1b60:	95 83       	std	Z+5, r25	; 0x05
    1b62:	84 83       	std	Z+4, r24	; 0x04
}
    1b64:	28 96       	adiw	r28, 0x08	; 8
    1b66:	0f b6       	in	r0, 0x3f	; 63
    1b68:	f8 94       	cli
    1b6a:	de bf       	out	0x3e, r29	; 62
    1b6c:	0f be       	out	0x3f, r0	; 63
    1b6e:	cd bf       	out	0x3d, r28	; 61
    1b70:	cf 91       	pop	r28
    1b72:	df 91       	pop	r29
    1b74:	08 95       	ret

00001b76 <pitem_fast_cut>:
// Быстрая вырезка из списка
void pitem_fast_cut( pitem_t * pitem )
{
    1b76:	df 93       	push	r29
    1b78:	cf 93       	push	r28
    1b7a:	00 d0       	rcall	.+0      	; 0x1b7c <pitem_fast_cut+0x6>
    1b7c:	00 d0       	rcall	.+0      	; 0x1b7e <pitem_fast_cut+0x8>
    1b7e:	0f 92       	push	r0
    1b80:	cd b7       	in	r28, 0x3d	; 61
    1b82:	de b7       	in	r29, 0x3e	; 62
    1b84:	9d 83       	std	Y+5, r25	; 0x05
    1b86:	8c 83       	std	Y+4, r24	; 0x04
    prio_t prio;
    xlist_t * xlist;

    prio = pitem->prio;
    1b88:	ec 81       	ldd	r30, Y+4	; 0x04
    1b8a:	fd 81       	ldd	r31, Y+5	; 0x05
    1b8c:	86 81       	ldd	r24, Z+6	; 0x06
    1b8e:	8b 83       	std	Y+3, r24	; 0x03
    xlist = (xlist_t *)pitem->list;
    1b90:	ec 81       	ldd	r30, Y+4	; 0x04
    1b92:	fd 81       	ldd	r31, Y+5	; 0x05
    1b94:	84 81       	ldd	r24, Z+4	; 0x04
    1b96:	95 81       	ldd	r25, Z+5	; 0x05
    1b98:	9a 83       	std	Y+2, r25	; 0x02
    1b9a:	89 83       	std	Y+1, r24	; 0x01
    //Является ли элемент единственным в своей части списка?
    if( ((item_t *)pitem)->next == (item_t *)pitem )
    1b9c:	ec 81       	ldd	r30, Y+4	; 0x04
    1b9e:	fd 81       	ldd	r31, Y+5	; 0x05
    1ba0:	20 81       	ld	r18, Z
    1ba2:	31 81       	ldd	r19, Z+1	; 0x01
    1ba4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ba6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ba8:	28 17       	cp	r18, r24
    1baa:	39 07       	cpc	r19, r25
    1bac:	09 f5       	brne	.+66     	; 0x1bf0 <pitem_fast_cut+0x7a>
    {
        // Да, является!
        xlist->item[prio] = (item_t *)0;
    1bae:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb0:	88 2f       	mov	r24, r24
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	29 81       	ldd	r18, Y+1	; 0x01
    1bb6:	3a 81       	ldd	r19, Y+2	; 0x02
    1bb8:	88 0f       	add	r24, r24
    1bba:	99 1f       	adc	r25, r25
    1bbc:	f9 01       	movw	r30, r18
    1bbe:	e8 0f       	add	r30, r24
    1bc0:	f9 1f       	adc	r31, r25
    1bc2:	11 82       	std	Z+1, r1	; 0x01
    1bc4:	10 82       	st	Z, r1
        xlist->index &= ~(((index_t)1)<<prio);
    1bc6:	e9 81       	ldd	r30, Y+1	; 0x01
    1bc8:	fa 81       	ldd	r31, Y+2	; 0x02
    1bca:	80 89       	ldd	r24, Z+16	; 0x10
    1bcc:	48 2f       	mov	r20, r24
    1bce:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd0:	28 2f       	mov	r18, r24
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	02 2e       	mov	r0, r18
    1bda:	02 c0       	rjmp	.+4      	; 0x1be0 <pitem_fast_cut+0x6a>
    1bdc:	88 0f       	add	r24, r24
    1bde:	99 1f       	adc	r25, r25
    1be0:	0a 94       	dec	r0
    1be2:	e2 f7       	brpl	.-8      	; 0x1bdc <pitem_fast_cut+0x66>
    1be4:	80 95       	com	r24
    1be6:	84 23       	and	r24, r20
    1be8:	e9 81       	ldd	r30, Y+1	; 0x01
    1bea:	fa 81       	ldd	r31, Y+2	; 0x02
    1bec:	80 8b       	std	Z+16, r24	; 0x10
    1bee:	1a c0       	rjmp	.+52     	; 0x1c24 <pitem_fast_cut+0xae>
    }
    else
    {
        // Нет, не является!
        // Является ли элемент головой своей части списка?
        if( xlist->item[(prio_t)prio] == (item_t *)pitem )
    1bf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf2:	88 2f       	mov	r24, r24
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	29 81       	ldd	r18, Y+1	; 0x01
    1bf8:	3a 81       	ldd	r19, Y+2	; 0x02
    1bfa:	88 0f       	add	r24, r24
    1bfc:	99 1f       	adc	r25, r25
    1bfe:	f9 01       	movw	r30, r18
    1c00:	e8 0f       	add	r30, r24
    1c02:	f9 1f       	adc	r31, r25
    1c04:	20 81       	ld	r18, Z
    1c06:	31 81       	ldd	r19, Z+1	; 0x01
    1c08:	8c 81       	ldd	r24, Y+4	; 0x04
    1c0a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c0c:	28 17       	cp	r18, r24
    1c0e:	39 07       	cpc	r19, r25
    1c10:	29 f4       	brne	.+10     	; 0x1c1c <pitem_fast_cut+0xa6>
        {
            // Является, список надо переключить
            xlist_switch( xlist, prio );
    1c12:	89 81       	ldd	r24, Y+1	; 0x01
    1c14:	9a 81       	ldd	r25, Y+2	; 0x02
    1c16:	6b 81       	ldd	r22, Y+3	; 0x03
    1c18:	0e 94 86 1b 	call	0x370c	; 0x370c <xlist_switch>
        }
        // Собственно - вырезаем элемент
        item_cut( (item_t *)pitem );
    1c1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c1e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c20:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <item_cut>
    }
}
    1c24:	0f 90       	pop	r0
    1c26:	0f 90       	pop	r0
    1c28:	0f 90       	pop	r0
    1c2a:	0f 90       	pop	r0
    1c2c:	0f 90       	pop	r0
    1c2e:	cf 91       	pop	r28
    1c30:	df 91       	pop	r29
    1c32:	08 95       	ret

00001c34 <pitem_cut>:
// Вырезка из списка
void pitem_cut(pitem_t * pitem)
{
    1c34:	df 93       	push	r29
    1c36:	cf 93       	push	r28
    1c38:	00 d0       	rcall	.+0      	; 0x1c3a <pitem_cut+0x6>
    1c3a:	cd b7       	in	r28, 0x3d	; 61
    1c3c:	de b7       	in	r29, 0x3e	; 62
    1c3e:	9a 83       	std	Y+2, r25	; 0x02
    1c40:	89 83       	std	Y+1, r24	; 0x01
    pitem_fast_cut( pitem );
    1c42:	89 81       	ldd	r24, Y+1	; 0x01
    1c44:	9a 81       	ldd	r25, Y+2	; 0x02
    1c46:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <pitem_fast_cut>
    pitem->list = (xlist_t *)0;
    1c4a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c4c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c4e:	15 82       	std	Z+5, r1	; 0x05
    1c50:	14 82       	std	Z+4, r1	; 0x04
}
    1c52:	0f 90       	pop	r0
    1c54:	0f 90       	pop	r0
    1c56:	cf 91       	pop	r28
    1c58:	df 91       	pop	r29
    1c5a:	08 95       	ret

00001c5c <pitem_xlist_chain>:

pitem_t * pitem_xlist_chain( xlist_t * src )
{
    1c5c:	df 93       	push	r29
    1c5e:	cf 93       	push	r28
    1c60:	cd b7       	in	r28, 0x3d	; 61
    1c62:	de b7       	in	r29, 0x3e	; 62
    1c64:	2d 97       	sbiw	r28, 0x0d	; 13
    1c66:	0f b6       	in	r0, 0x3f	; 63
    1c68:	f8 94       	cli
    1c6a:	de bf       	out	0x3e, r29	; 62
    1c6c:	0f be       	out	0x3f, r0	; 63
    1c6e:	cd bf       	out	0x3d, r28	; 61
    1c70:	9d 87       	std	Y+13, r25	; 0x0d
    1c72:	8c 87       	std	Y+12, r24	; 0x0c
    pitem_t * ret;  // return value
    ret = (pitem_t *)xlist_head( src );     // will return former xlist head
    1c74:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c76:	9d 85       	ldd	r25, Y+13	; 0x0d
    1c78:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xlist_head>
    1c7c:	9b 87       	std	Y+11, r25	; 0x0b
    1c7e:	8a 87       	std	Y+10, r24	; 0x0a
    if(ret)
    1c80:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c82:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c84:	00 97       	sbiw	r24, 0x00	; 0
    1c86:	09 f4       	brne	.+2      	; 0x1c8a <pitem_xlist_chain+0x2e>
    1c88:	77 c0       	rjmp	.+238    	; 0x1d78 <pitem_xlist_chain+0x11c>
                index;  // buffer for xlist index
        prio_t  prio;   // current working priority
        item_t * tail;  // current list tail;


        tail = ((item_t *)ret)->prev;           // current list tail initial value
    1c8a:	ea 85       	ldd	r30, Y+10	; 0x0a
    1c8c:	fb 85       	ldd	r31, Y+11	; 0x0b
    1c8e:	82 81       	ldd	r24, Z+2	; 0x02
    1c90:	93 81       	ldd	r25, Z+3	; 0x03
    1c92:	9e 83       	std	Y+6, r25	; 0x06
    1c94:	8d 83       	std	Y+5, r24	; 0x05
        prio = ret->prio;                       // initial working prio
    1c96:	ea 85       	ldd	r30, Y+10	; 0x0a
    1c98:	fb 85       	ldd	r31, Y+11	; 0x0b
    1c9a:	86 81       	ldd	r24, Z+6	; 0x06
    1c9c:	8f 83       	std	Y+7, r24	; 0x07
        src->item[prio++] = (item_t *)0;        // cut all items from current xlist part
    1c9e:	8f 81       	ldd	r24, Y+7	; 0x07
    1ca0:	88 2f       	mov	r24, r24
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ca6:	3d 85       	ldd	r19, Y+13	; 0x0d
    1ca8:	88 0f       	add	r24, r24
    1caa:	99 1f       	adc	r25, r25
    1cac:	f9 01       	movw	r30, r18
    1cae:	e8 0f       	add	r30, r24
    1cb0:	f9 1f       	adc	r31, r25
    1cb2:	11 82       	std	Z+1, r1	; 0x01
    1cb4:	10 82       	st	Z, r1
    1cb6:	8f 81       	ldd	r24, Y+7	; 0x07
    1cb8:	8f 5f       	subi	r24, 0xFF	; 255
    1cba:	8f 83       	std	Y+7, r24	; 0x07
        index = src->index;                     // remember xlist index to improve performance
    1cbc:	ec 85       	ldd	r30, Y+12	; 0x0c
    1cbe:	fd 85       	ldd	r31, Y+13	; 0x0d
    1cc0:	80 89       	ldd	r24, Z+16	; 0x10
    1cc2:	88 87       	std	Y+8, r24	; 0x08
        mask = ((index_t)1) << prio;            // initial mask value
    1cc4:	8f 81       	ldd	r24, Y+7	; 0x07
    1cc6:	28 2f       	mov	r18, r24
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	02 2e       	mov	r0, r18
    1cd0:	02 c0       	rjmp	.+4      	; 0x1cd6 <pitem_xlist_chain+0x7a>
    1cd2:	88 0f       	add	r24, r24
    1cd4:	99 1f       	adc	r25, r25
    1cd6:	0a 94       	dec	r0
    1cd8:	e2 f7       	brpl	.-8      	; 0x1cd2 <pitem_xlist_chain+0x76>
    1cda:	89 87       	std	Y+9, r24	; 0x09
    1cdc:	3b c0       	rjmp	.+118    	; 0x1d54 <pitem_xlist_chain+0xf8>
        // cut all items from xlist and form an ordinary list of them
        while(mask)
        {
            if( index & mask )
    1cde:	88 85       	ldd	r24, Y+8	; 0x08
    1ce0:	99 85       	ldd	r25, Y+9	; 0x09
    1ce2:	89 23       	and	r24, r25
    1ce4:	88 23       	and	r24, r24
    1ce6:	81 f1       	breq	.+96     	; 0x1d48 <pitem_xlist_chain+0xec>
            {
                // current part of xlist has some items to cut
                item_t * xhead;
                item_t * buf;
                xhead = src->item[prio];                    // current xlist head;
    1ce8:	8f 81       	ldd	r24, Y+7	; 0x07
    1cea:	88 2f       	mov	r24, r24
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	2c 85       	ldd	r18, Y+12	; 0x0c
    1cf0:	3d 85       	ldd	r19, Y+13	; 0x0d
    1cf2:	88 0f       	add	r24, r24
    1cf4:	99 1f       	adc	r25, r25
    1cf6:	f9 01       	movw	r30, r18
    1cf8:	e8 0f       	add	r30, r24
    1cfa:	f9 1f       	adc	r31, r25
    1cfc:	80 81       	ld	r24, Z
    1cfe:	91 81       	ldd	r25, Z+1	; 0x01
    1d00:	9c 83       	std	Y+4, r25	; 0x04
    1d02:	8b 83       	std	Y+3, r24	; 0x03
                src->item[prio] = (item_t *)0;              // cut all items from current xlist part
    1d04:	8f 81       	ldd	r24, Y+7	; 0x07
    1d06:	88 2f       	mov	r24, r24
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d0c:	3d 85       	ldd	r19, Y+13	; 0x0d
    1d0e:	88 0f       	add	r24, r24
    1d10:	99 1f       	adc	r25, r25
    1d12:	f9 01       	movw	r30, r18
    1d14:	e8 0f       	add	r30, r24
    1d16:	f9 1f       	adc	r31, r25
    1d18:	11 82       	std	Z+1, r1	; 0x01
    1d1a:	10 82       	st	Z, r1
                // chain former xlist head to a list tail
                tail->next = xhead;
    1d1c:	ed 81       	ldd	r30, Y+5	; 0x05
    1d1e:	fe 81       	ldd	r31, Y+6	; 0x06
    1d20:	8b 81       	ldd	r24, Y+3	; 0x03
    1d22:	9c 81       	ldd	r25, Y+4	; 0x04
    1d24:	91 83       	std	Z+1, r25	; 0x01
    1d26:	80 83       	st	Z, r24
                buf = xhead->prev;
    1d28:	eb 81       	ldd	r30, Y+3	; 0x03
    1d2a:	fc 81       	ldd	r31, Y+4	; 0x04
    1d2c:	82 81       	ldd	r24, Z+2	; 0x02
    1d2e:	93 81       	ldd	r25, Z+3	; 0x03
    1d30:	9a 83       	std	Y+2, r25	; 0x02
    1d32:	89 83       	std	Y+1, r24	; 0x01
                xhead->prev = tail;
    1d34:	eb 81       	ldd	r30, Y+3	; 0x03
    1d36:	fc 81       	ldd	r31, Y+4	; 0x04
    1d38:	8d 81       	ldd	r24, Y+5	; 0x05
    1d3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d3c:	93 83       	std	Z+3, r25	; 0x03
    1d3e:	82 83       	std	Z+2, r24	; 0x02
                tail = buf;
    1d40:	89 81       	ldd	r24, Y+1	; 0x01
    1d42:	9a 81       	ldd	r25, Y+2	; 0x02
    1d44:	9e 83       	std	Y+6, r25	; 0x06
    1d46:	8d 83       	std	Y+5, r24	; 0x05
            }
            mask <<= (prio_t)1;
    1d48:	89 85       	ldd	r24, Y+9	; 0x09
    1d4a:	88 0f       	add	r24, r24
    1d4c:	89 87       	std	Y+9, r24	; 0x09
            prio++;
    1d4e:	8f 81       	ldd	r24, Y+7	; 0x07
    1d50:	8f 5f       	subi	r24, 0xFF	; 255
    1d52:	8f 83       	std	Y+7, r24	; 0x07
        prio = ret->prio;                       // initial working prio
        src->item[prio++] = (item_t *)0;        // cut all items from current xlist part
        index = src->index;                     // remember xlist index to improve performance
        mask = ((index_t)1) << prio;            // initial mask value
        // cut all items from xlist and form an ordinary list of them
        while(mask)
    1d54:	89 85       	ldd	r24, Y+9	; 0x09
    1d56:	88 23       	and	r24, r24
    1d58:	11 f6       	brne	.-124    	; 0x1cde <pitem_xlist_chain+0x82>
            }
            mask <<= (prio_t)1;
            prio++;
        }
        // complete the list by chaining tail and head
        ((item_t *)ret)->prev = tail;
    1d5a:	ea 85       	ldd	r30, Y+10	; 0x0a
    1d5c:	fb 85       	ldd	r31, Y+11	; 0x0b
    1d5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d60:	9e 81       	ldd	r25, Y+6	; 0x06
    1d62:	93 83       	std	Z+3, r25	; 0x03
    1d64:	82 83       	std	Z+2, r24	; 0x02
        tail->next = (item_t *)ret;
    1d66:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d68:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d6a:	ed 81       	ldd	r30, Y+5	; 0x05
    1d6c:	fe 81       	ldd	r31, Y+6	; 0x06
    1d6e:	91 83       	std	Z+1, r25	; 0x01
    1d70:	80 83       	st	Z, r24
        src->index = (index_t)0;        // xlist is empty.
    1d72:	ec 85       	ldd	r30, Y+12	; 0x0c
    1d74:	fd 85       	ldd	r31, Y+13	; 0x0d
    1d76:	10 8a       	std	Z+16, r1	; 0x10
    }
    return ret;                     // return list head;
    1d78:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d7a:	9b 85       	ldd	r25, Y+11	; 0x0b
}
    1d7c:	2d 96       	adiw	r28, 0x0d	; 13
    1d7e:	0f b6       	in	r0, 0x3f	; 63
    1d80:	f8 94       	cli
    1d82:	de bf       	out	0x3e, r29	; 62
    1d84:	0f be       	out	0x3f, r0	; 63
    1d86:	cd bf       	out	0x3d, r28	; 61
    1d88:	cf 91       	pop	r28
    1d8a:	df 91       	pop	r29
    1d8c:	08 95       	ret

00001d8e <proc_init_isr>:
    bool_t is_rt // если true, значит процесс будет иметть поведение RT
#ifdef CONFIG_MP
    ,affinity_t affinity
#endif // CONFIG_MP
)
{
    1d8e:	8f 92       	push	r8
    1d90:	af 92       	push	r10
    1d92:	bf 92       	push	r11
    1d94:	cf 92       	push	r12
    1d96:	ef 92       	push	r14
    1d98:	ff 92       	push	r15
    1d9a:	0f 93       	push	r16
    1d9c:	1f 93       	push	r17
    1d9e:	df 93       	push	r29
    1da0:	cf 93       	push	r28
    1da2:	cd b7       	in	r28, 0x3d	; 61
    1da4:	de b7       	in	r29, 0x3e	; 62
    1da6:	62 97       	sbiw	r28, 0x12	; 18
    1da8:	0f b6       	in	r0, 0x3f	; 63
    1daa:	f8 94       	cli
    1dac:	de bf       	out	0x3e, r29	; 62
    1dae:	0f be       	out	0x3f, r0	; 63
    1db0:	cd bf       	out	0x3d, r28	; 61
    1db2:	9a 83       	std	Y+2, r25	; 0x02
    1db4:	89 83       	std	Y+1, r24	; 0x01
    1db6:	7c 83       	std	Y+4, r23	; 0x04
    1db8:	6b 83       	std	Y+3, r22	; 0x03
    1dba:	5e 83       	std	Y+6, r21	; 0x06
    1dbc:	4d 83       	std	Y+5, r20	; 0x05
    1dbe:	38 87       	std	Y+8, r19	; 0x08
    1dc0:	2f 83       	std	Y+7, r18	; 0x07
    1dc2:	1a 87       	std	Y+10, r17	; 0x0a
    1dc4:	09 87       	std	Y+9, r16	; 0x09
    1dc6:	fc 86       	std	Y+12, r15	; 0x0c
    1dc8:	eb 86       	std	Y+11, r14	; 0x0b
    1dca:	cd 86       	std	Y+13, r12	; 0x0d
    1dcc:	bf 86       	std	Y+15, r11	; 0x0f
    1dce:	ae 86       	std	Y+14, r10	; 0x0e
    1dd0:	88 8a       	std	Y+16, r8	; 0x10
    SPIN_INIT( proc );
    1dd2:	89 81       	ldd	r24, Y+1	; 0x01
    1dd4:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd6:	83 96       	adiw	r24, 0x23	; 35
    1dd8:	0e 94 3c 01 	call	0x278	; 0x278 <spin_init>
    SPIN_LOCK( proc );
    1ddc:	89 81       	ldd	r24, Y+1	; 0x01
    1dde:	9a 81       	ldd	r25, Y+2	; 0x02
    1de0:	83 96       	adiw	r24, 0x23	; 35
    1de2:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>

    pitem_init( (pitem_t *)proc, prio );
    1de6:	89 81       	ldd	r24, Y+1	; 0x01
    1de8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dea:	6d 85       	ldd	r22, Y+13	; 0x0d
    1dec:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <pitem_init>
    proc->flags = ( is_rt )?PROC_FLG_RT:(flag_t)0;
    1df0:	88 89       	ldd	r24, Y+16	; 0x10
    1df2:	88 23       	and	r24, r24
    1df4:	29 f0       	breq	.+10     	; 0x1e00 <proc_init_isr+0x72>
    1df6:	81 e0       	ldi	r24, 0x01	; 1
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	9a 8b       	std	Y+18, r25	; 0x12
    1dfc:	89 8b       	std	Y+17, r24	; 0x11
    1dfe:	02 c0       	rjmp	.+4      	; 0x1e04 <proc_init_isr+0x76>
    1e00:	1a 8a       	std	Y+18, r1	; 0x12
    1e02:	19 8a       	std	Y+17, r1	; 0x11
    1e04:	e9 81       	ldd	r30, Y+1	; 0x01
    1e06:	fa 81       	ldd	r31, Y+2	; 0x02
    1e08:	89 89       	ldd	r24, Y+17	; 0x11
    1e0a:	9a 89       	ldd	r25, Y+18	; 0x12
    1e0c:	90 87       	std	Z+8, r25	; 0x08
    1e0e:	87 83       	std	Z+7, r24	; 0x07

    PROC_LRES_INIT( proc );
    1e10:	89 81       	ldd	r24, Y+1	; 0x01
    1e12:	9a 81       	ldd	r25, Y+2	; 0x02
    1e14:	0a 96       	adiw	r24, 0x0a	; 10
    1e16:	0e 94 97 0c 	call	0x192e	; 0x192e <pcounter_init>
#ifdef CONFIG_USE_HIGHEST_LOCKER
    proc->base_prio = prio;
    1e1a:	e9 81       	ldd	r30, Y+1	; 0x01
    1e1c:	fa 81       	ldd	r31, Y+2	; 0x02
    1e1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e20:	81 87       	std	Z+9, r24	; 0x09
#endif
    proc->time_quant = time_quant;
    1e22:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e24:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e26:	e9 81       	ldd	r30, Y+1	; 0x01
    1e28:	fa 81       	ldd	r31, Y+2	; 0x02
    1e2a:	94 8f       	std	Z+28, r25	; 0x1c
    1e2c:	83 8f       	std	Z+27, r24	; 0x1b
    proc->timer = time_quant;
    1e2e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e30:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e32:	e9 81       	ldd	r30, Y+1	; 0x01
    1e34:	fa 81       	ldd	r31, Y+2	; 0x02
    1e36:	96 8f       	std	Z+30, r25	; 0x1e
    1e38:	85 8f       	std	Z+29, r24	; 0x1d
#ifdef CONFIG_MP
    proc->core_id = (core_id_t)0;
    1e3a:	e9 81       	ldd	r30, Y+1	; 0x01
    1e3c:	fa 81       	ldd	r31, Y+2	; 0x02
    1e3e:	11 a2       	std	Z+33, r1	; 0x21
    proc->affinity = affinity;
    1e40:	e9 81       	ldd	r30, Y+1	; 0x01
    1e42:	fa 81       	ldd	r31, Y+2	; 0x02
    1e44:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e46:	82 a3       	std	Z+34, r24	; 0x22
#endif // CONFIG_MP
    proc->pmain = pmain;
    1e48:	e9 81       	ldd	r30, Y+1	; 0x01
    1e4a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e50:	95 a3       	std	Z+37, r25	; 0x25
    1e52:	84 a3       	std	Z+36, r24	; 0x24
    proc->sv_hook = sv_hook;
    1e54:	e9 81       	ldd	r30, Y+1	; 0x01
    1e56:	fa 81       	ldd	r31, Y+2	; 0x02
    1e58:	8d 81       	ldd	r24, Y+5	; 0x05
    1e5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e5c:	97 a3       	std	Z+39, r25	; 0x27
    1e5e:	86 a3       	std	Z+38, r24	; 0x26
    proc->rs_hook = rs_hook;
    1e60:	e9 81       	ldd	r30, Y+1	; 0x01
    1e62:	fa 81       	ldd	r31, Y+2	; 0x02
    1e64:	8f 81       	ldd	r24, Y+7	; 0x07
    1e66:	98 85       	ldd	r25, Y+8	; 0x08
    1e68:	91 a7       	std	Z+41, r25	; 0x29
    1e6a:	80 a7       	std	Z+40, r24	; 0x28
    proc->arg = arg;
    1e6c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e6e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e70:	89 85       	ldd	r24, Y+9	; 0x09
    1e72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e74:	93 a7       	std	Z+43, r25	; 0x2b
    1e76:	82 a7       	std	Z+42, r24	; 0x2a
    proc->sstart = sstart;
    1e78:	e9 81       	ldd	r30, Y+1	; 0x01
    1e7a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e7c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e7e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1e80:	95 a7       	std	Z+45, r25	; 0x2d
    1e82:	84 a7       	std	Z+44, r24	; 0x2c
    if( sstart )proc->spointer = proc_stack_init(sstart, (code_t)proc_run_wrapper, (void *)proc);
    1e84:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e86:	9c 85       	ldd	r25, Y+12	; 0x0c
    1e88:	00 97       	sbiw	r24, 0x00	; 0
    1e8a:	71 f0       	breq	.+28     	; 0x1ea8 <proc_init_isr+0x11a>
    1e8c:	4f e7       	ldi	r20, 0x7F	; 127
    1e8e:	59 e1       	ldi	r21, 0x19	; 25
    1e90:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e92:	9c 85       	ldd	r25, Y+12	; 0x0c
    1e94:	29 81       	ldd	r18, Y+1	; 0x01
    1e96:	3a 81       	ldd	r19, Y+2	; 0x02
    1e98:	ba 01       	movw	r22, r20
    1e9a:	a9 01       	movw	r20, r18
    1e9c:	0e 94 8a 07 	call	0xf14	; 0xf14 <proc_stack_init>
    1ea0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ea2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ea4:	97 a7       	std	Z+47, r25	; 0x2f
    1ea6:	86 a7       	std	Z+46, r24	; 0x2e

    SPIN_UNLOCK( proc );
    1ea8:	89 81       	ldd	r24, Y+1	; 0x01
    1eaa:	9a 81       	ldd	r25, Y+2	; 0x02
    1eac:	83 96       	adiw	r24, 0x23	; 35
    1eae:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
}
    1eb2:	62 96       	adiw	r28, 0x12	; 18
    1eb4:	0f b6       	in	r0, 0x3f	; 63
    1eb6:	f8 94       	cli
    1eb8:	de bf       	out	0x3e, r29	; 62
    1eba:	0f be       	out	0x3f, r0	; 63
    1ebc:	cd bf       	out	0x3d, r28	; 61
    1ebe:	cf 91       	pop	r28
    1ec0:	df 91       	pop	r29
    1ec2:	1f 91       	pop	r17
    1ec4:	0f 91       	pop	r16
    1ec6:	ff 90       	pop	r15
    1ec8:	ef 90       	pop	r14
    1eca:	cf 90       	pop	r12
    1ecc:	bf 90       	pop	r11
    1ece:	af 90       	pop	r10
    1ed0:	8f 90       	pop	r8
    1ed2:	08 95       	ret

00001ed4 <_proc_run_>:
//  Функция для внутреннего использования - собственно запуск процесса
#ifdef CONFIG_MP
void _proc_run_( proc_t * proc )
{
    1ed4:	df 93       	push	r29
    1ed6:	cf 93       	push	r28
    1ed8:	00 d0       	rcall	.+0      	; 0x1eda <_proc_run_+0x6>
    1eda:	00 d0       	rcall	.+0      	; 0x1edc <_proc_run_+0x8>
    1edc:	cd b7       	in	r28, 0x3d	; 61
    1ede:	de b7       	in	r29, 0x3e	; 62
    1ee0:	9c 83       	std	Y+4, r25	; 0x04
    1ee2:	8b 83       	std	Y+3, r24	; 0x03
    sched_t * proc_sched;
    proc_sched = (sched_t *)kernel.sched + proc->core_id;
    1ee4:	eb 81       	ldd	r30, Y+3	; 0x03
    1ee6:	fc 81       	ldd	r31, Y+4	; 0x04
    1ee8:	81 a1       	ldd	r24, Z+33	; 0x21
    1eea:	28 2f       	mov	r18, r24
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	8b e2       	ldi	r24, 0x2B	; 43
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	ac 01       	movw	r20, r24
    1ef4:	24 9f       	mul	r18, r20
    1ef6:	c0 01       	movw	r24, r0
    1ef8:	25 9f       	mul	r18, r21
    1efa:	90 0d       	add	r25, r0
    1efc:	34 9f       	mul	r19, r20
    1efe:	90 0d       	add	r25, r0
    1f00:	11 24       	eor	r1, r1
    1f02:	85 5b       	subi	r24, 0xB5	; 181
    1f04:	9d 4f       	sbci	r25, 0xFD	; 253
    1f06:	9a 83       	std	Y+2, r25	; 0x02
    1f08:	89 83       	std	Y+1, r24	; 0x01
    SPIN_LOCK( proc_sched );
    1f0a:	89 81       	ldd	r24, Y+1	; 0x01
    1f0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f0e:	8a 96       	adiw	r24, 0x2a	; 42
    1f10:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
    pitem_insert( (pitem_t *)proc, proc_sched->ready );
    1f14:	8b 81       	ldd	r24, Y+3	; 0x03
    1f16:	9c 81       	ldd	r25, Y+4	; 0x04
    1f18:	e9 81       	ldd	r30, Y+1	; 0x01
    1f1a:	fa 81       	ldd	r31, Y+2	; 0x02
    1f1c:	22 81       	ldd	r18, Z+2	; 0x02
    1f1e:	33 81       	ldd	r19, Z+3	; 0x03
    1f20:	b9 01       	movw	r22, r18
    1f22:	0e 94 65 0d 	call	0x1aca	; 0x1aca <pitem_insert>
    SPIN_UNLOCK( proc_sched );
    1f26:	89 81       	ldd	r24, Y+1	; 0x01
    1f28:	9a 81       	ldd	r25, Y+2	; 0x02
    1f2a:	8a 96       	adiw	r24, 0x2a	; 42
    1f2c:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
}
    1f30:	0f 90       	pop	r0
    1f32:	0f 90       	pop	r0
    1f34:	0f 90       	pop	r0
    1f36:	0f 90       	pop	r0
    1f38:	cf 91       	pop	r28
    1f3a:	df 91       	pop	r29
    1f3c:	08 95       	ret

00001f3e <_proc_run>:
#endif // CONFIG_MP

void _proc_run( proc_t * proc )
{
    1f3e:	df 93       	push	r29
    1f40:	cf 93       	push	r28
    1f42:	00 d0       	rcall	.+0      	; 0x1f44 <_proc_run+0x6>
    1f44:	cd b7       	in	r28, 0x3d	; 61
    1f46:	de b7       	in	r29, 0x3e	; 62
    1f48:	9a 83       	std	Y+2, r25	; 0x02
    1f4a:	89 83       	std	Y+1, r24	; 0x01
    proc->flags |= PROC_FLG_RUN;
    1f4c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f4e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f50:	87 81       	ldd	r24, Z+7	; 0x07
    1f52:	90 85       	ldd	r25, Z+8	; 0x08
    1f54:	82 60       	ori	r24, 0x02	; 2
    1f56:	e9 81       	ldd	r30, Y+1	; 0x01
    1f58:	fa 81       	ldd	r31, Y+2	; 0x02
    1f5a:	90 87       	std	Z+8, r25	; 0x08
    1f5c:	87 83       	std	Z+7, r24	; 0x07
#ifdef CONFIG_MP
    spin_lock( &kernel.stat_lock );
    1f5e:	83 e0       	ldi	r24, 0x03	; 3
    1f60:	93 e0       	ldi	r25, 0x03	; 3
    1f62:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
    proc->core_id = sched_load_balancer( proc, (stat_t *)kernel.stat );
    1f66:	89 81       	ldd	r24, Y+1	; 0x01
    1f68:	9a 81       	ldd	r25, Y+2	; 0x02
    1f6a:	21 e0       	ldi	r18, 0x01	; 1
    1f6c:	33 e0       	ldi	r19, 0x03	; 3
    1f6e:	b9 01       	movw	r22, r18
    1f70:	0e 94 96 12 	call	0x252c	; 0x252c <sched_load_balancer>
    1f74:	e9 81       	ldd	r30, Y+1	; 0x01
    1f76:	fa 81       	ldd	r31, Y+2	; 0x02
    1f78:	81 a3       	std	Z+33, r24	; 0x21
    stat_inc( proc, (stat_t *)kernel.stat+proc->core_id );
    1f7a:	e9 81       	ldd	r30, Y+1	; 0x01
    1f7c:	fa 81       	ldd	r31, Y+2	; 0x02
    1f7e:	81 a1       	ldd	r24, Z+33	; 0x21
    1f80:	88 2f       	mov	r24, r24
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	9c 01       	movw	r18, r24
    1f86:	2f 5f       	subi	r18, 0xFF	; 255
    1f88:	3c 4f       	sbci	r19, 0xFC	; 252
    1f8a:	89 81       	ldd	r24, Y+1	; 0x01
    1f8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f8e:	b9 01       	movw	r22, r18
    1f90:	0e 94 98 01 	call	0x330	; 0x330 <stat_inc>
    spin_unlock( &kernel.stat_lock );
    1f94:	83 e0       	ldi	r24, 0x03	; 3
    1f96:	93 e0       	ldi	r25, 0x03	; 3
    1f98:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
#endif
    _proc_run_( proc );
    1f9c:	89 81       	ldd	r24, Y+1	; 0x01
    1f9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa0:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <_proc_run_>

    RESCHED_PROC( proc );
    1fa4:	e9 81       	ldd	r30, Y+1	; 0x01
    1fa6:	fa 81       	ldd	r31, Y+2	; 0x02
    1fa8:	81 a1       	ldd	r24, Z+33	; 0x21
    1faa:	0e 94 de 01 	call	0x3bc	; 0x3bc <resched>
}
    1fae:	0f 90       	pop	r0
    1fb0:	0f 90       	pop	r0
    1fb2:	cf 91       	pop	r28
    1fb4:	df 91       	pop	r29
    1fb6:	08 95       	ret

00001fb8 <proc_run_isr>:
// Функция общего пользования - запуск процесса из обработчика прерывания, прерывания должны быть запрещены во время запуска
bool_t proc_run_isr(proc_t * proc)
{
    1fb8:	df 93       	push	r29
    1fba:	cf 93       	push	r28
    1fbc:	00 d0       	rcall	.+0      	; 0x1fbe <proc_run_isr+0x6>
    1fbe:	0f 92       	push	r0
    1fc0:	cd b7       	in	r28, 0x3d	; 61
    1fc2:	de b7       	in	r29, 0x3e	; 62
    1fc4:	9b 83       	std	Y+3, r25	; 0x03
    1fc6:	8a 83       	std	Y+2, r24	; 0x02
    bool_t ret = (bool_t)1;
    1fc8:	81 e0       	ldi	r24, 0x01	; 1
    1fca:	89 83       	std	Y+1, r24	; 0x01

    SPIN_LOCK( proc );
    1fcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fce:	9b 81       	ldd	r25, Y+3	; 0x03
    1fd0:	83 96       	adiw	r24, 0x23	; 35
    1fd2:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>

    if( proc->flags & (PROC_FLG_RUN|PROC_FLG_QUEUE|PROC_FLG_WAIT|PROC_FLG_IPCW|PROC_FLG_END|PROC_FLG_DEAD|PROC_FLG_WD_STOP) )
    1fd6:	ea 81       	ldd	r30, Y+2	; 0x02
    1fd8:	fb 81       	ldd	r31, Y+3	; 0x03
    1fda:	87 81       	ldd	r24, Z+7	; 0x07
    1fdc:	90 85       	ldd	r25, Z+8	; 0x08
    1fde:	82 77       	andi	r24, 0x72	; 114
    1fe0:	97 70       	andi	r25, 0x07	; 7
    1fe2:	00 97       	sbiw	r24, 0x00	; 0
    1fe4:	11 f0       	breq	.+4      	; 0x1fea <proc_run_isr+0x32>
    {
        ret = (bool_t)0;
    1fe6:	19 82       	std	Y+1, r1	; 0x01
    1fe8:	04 c0       	rjmp	.+8      	; 0x1ff2 <proc_run_isr+0x3a>
        goto end;
    }
    _proc_run( proc );
    1fea:	8a 81       	ldd	r24, Y+2	; 0x02
    1fec:	9b 81       	ldd	r25, Y+3	; 0x03
    1fee:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <_proc_run>
end:

    SPIN_UNLOCK( proc );
    1ff2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ff6:	83 96       	adiw	r24, 0x23	; 35
    1ff8:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>

    return ret;
    1ffc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ffe:	0f 90       	pop	r0
    2000:	0f 90       	pop	r0
    2002:	0f 90       	pop	r0
    2004:	cf 91       	pop	r28
    2006:	df 91       	pop	r29
    2008:	08 95       	ret

0000200a <proc_restart_isr>:
// Перезепуск процесса из обработчика прерываний, прерывания должны быть запрещены
bool_t proc_restart_isr(proc_t * proc)
{
    200a:	df 93       	push	r29
    200c:	cf 93       	push	r28
    200e:	00 d0       	rcall	.+0      	; 0x2010 <proc_restart_isr+0x6>
    2010:	00 d0       	rcall	.+0      	; 0x2012 <proc_restart_isr+0x8>
    2012:	0f 92       	push	r0
    2014:	cd b7       	in	r28, 0x3d	; 61
    2016:	de b7       	in	r29, 0x3e	; 62
    2018:	9b 83       	std	Y+3, r25	; 0x03
    201a:	8a 83       	std	Y+2, r24	; 0x02
    bool_t ret = (bool_t)1;
    201c:	81 e0       	ldi	r24, 0x01	; 1
    201e:	89 83       	std	Y+1, r24	; 0x01

    SPIN_LOCK( proc );
    2020:	8a 81       	ldd	r24, Y+2	; 0x02
    2022:	9b 81       	ldd	r25, Y+3	; 0x03
    2024:	83 96       	adiw	r24, 0x23	; 35
    2026:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>

    if( proc->flags & (PROC_FLG_RUN|PROC_FLG_MUTEX|PROC_FLG_SEM|PROC_FLG_QUEUE|PROC_FLG_WAIT|PROC_FLG_IPCW|PROC_FLG_DEAD) )
    202a:	ea 81       	ldd	r30, Y+2	; 0x02
    202c:	fb 81       	ldd	r31, Y+3	; 0x03
    202e:	87 81       	ldd	r24, Z+7	; 0x07
    2030:	90 85       	ldd	r25, Z+8	; 0x08
    2032:	8e 77       	andi	r24, 0x7E	; 126
    2034:	94 70       	andi	r25, 0x04	; 4
    2036:	00 97       	sbiw	r24, 0x00	; 0
    2038:	11 f0       	breq	.+4      	; 0x203e <proc_restart_isr+0x34>
    {
        ret = (bool_t)0;
    203a:	19 82       	std	Y+1, r1	; 0x01
    203c:	3b c0       	rjmp	.+118    	; 0x20b4 <proc_restart_isr+0xaa>
        goto end;
    }
    proc->flags = ( proc->flags & PROC_FLG_RT )?PROC_FLG_RT:(flag_t)0;
    203e:	ea 81       	ldd	r30, Y+2	; 0x02
    2040:	fb 81       	ldd	r31, Y+3	; 0x03
    2042:	87 81       	ldd	r24, Z+7	; 0x07
    2044:	90 85       	ldd	r25, Z+8	; 0x08
    2046:	81 70       	andi	r24, 0x01	; 1
    2048:	90 70       	andi	r25, 0x00	; 0
    204a:	88 23       	and	r24, r24
    204c:	29 f0       	breq	.+10     	; 0x2058 <proc_restart_isr+0x4e>
    204e:	81 e0       	ldi	r24, 0x01	; 1
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	9d 83       	std	Y+5, r25	; 0x05
    2054:	8c 83       	std	Y+4, r24	; 0x04
    2056:	02 c0       	rjmp	.+4      	; 0x205c <proc_restart_isr+0x52>
    2058:	1d 82       	std	Y+5, r1	; 0x05
    205a:	1c 82       	std	Y+4, r1	; 0x04
    205c:	ea 81       	ldd	r30, Y+2	; 0x02
    205e:	fb 81       	ldd	r31, Y+3	; 0x03
    2060:	8c 81       	ldd	r24, Y+4	; 0x04
    2062:	9d 81       	ldd	r25, Y+5	; 0x05
    2064:	90 87       	std	Z+8, r25	; 0x08
    2066:	87 83       	std	Z+7, r24	; 0x07

    PROC_LRES_INIT( proc );
    2068:	8a 81       	ldd	r24, Y+2	; 0x02
    206a:	9b 81       	ldd	r25, Y+3	; 0x03
    206c:	0a 96       	adiw	r24, 0x0a	; 10
    206e:	0e 94 97 0c 	call	0x192e	; 0x192e <pcounter_init>

    proc->timer = proc->time_quant;
    2072:	ea 81       	ldd	r30, Y+2	; 0x02
    2074:	fb 81       	ldd	r31, Y+3	; 0x03
    2076:	83 8d       	ldd	r24, Z+27	; 0x1b
    2078:	94 8d       	ldd	r25, Z+28	; 0x1c
    207a:	ea 81       	ldd	r30, Y+2	; 0x02
    207c:	fb 81       	ldd	r31, Y+3	; 0x03
    207e:	96 8f       	std	Z+30, r25	; 0x1e
    2080:	85 8f       	std	Z+29, r24	; 0x1d

    if( proc->sstart )proc->spointer = proc_stack_init( proc->sstart, (code_t)proc_run_wrapper, (void *)proc );
    2082:	ea 81       	ldd	r30, Y+2	; 0x02
    2084:	fb 81       	ldd	r31, Y+3	; 0x03
    2086:	84 a5       	ldd	r24, Z+44	; 0x2c
    2088:	95 a5       	ldd	r25, Z+45	; 0x2d
    208a:	00 97       	sbiw	r24, 0x00	; 0
    208c:	79 f0       	breq	.+30     	; 0x20ac <proc_restart_isr+0xa2>
    208e:	ea 81       	ldd	r30, Y+2	; 0x02
    2090:	fb 81       	ldd	r31, Y+3	; 0x03
    2092:	84 a5       	ldd	r24, Z+44	; 0x2c
    2094:	95 a5       	ldd	r25, Z+45	; 0x2d
    2096:	2f e7       	ldi	r18, 0x7F	; 127
    2098:	39 e1       	ldi	r19, 0x19	; 25
    209a:	4a 81       	ldd	r20, Y+2	; 0x02
    209c:	5b 81       	ldd	r21, Y+3	; 0x03
    209e:	b9 01       	movw	r22, r18
    20a0:	0e 94 8a 07 	call	0xf14	; 0xf14 <proc_stack_init>
    20a4:	ea 81       	ldd	r30, Y+2	; 0x02
    20a6:	fb 81       	ldd	r31, Y+3	; 0x03
    20a8:	97 a7       	std	Z+47, r25	; 0x2f
    20aa:	86 a7       	std	Z+46, r24	; 0x2e
    _proc_run( proc );
    20ac:	8a 81       	ldd	r24, Y+2	; 0x02
    20ae:	9b 81       	ldd	r25, Y+3	; 0x03
    20b0:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <_proc_run>
end:

    SPIN_UNLOCK( proc );
    20b4:	8a 81       	ldd	r24, Y+2	; 0x02
    20b6:	9b 81       	ldd	r25, Y+3	; 0x03
    20b8:	83 96       	adiw	r24, 0x23	; 35
    20ba:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>

    return ret;
    20be:	89 81       	ldd	r24, Y+1	; 0x01
}
    20c0:	0f 90       	pop	r0
    20c2:	0f 90       	pop	r0
    20c4:	0f 90       	pop	r0
    20c6:	0f 90       	pop	r0
    20c8:	0f 90       	pop	r0
    20ca:	cf 91       	pop	r28
    20cc:	df 91       	pop	r29
    20ce:	08 95       	ret

000020d0 <_proc_stop_>:
// Функция для внутреннего использования, останов процесса

#ifdef CONFIG_MP
void _proc_stop_(proc_t * proc)
{
    20d0:	df 93       	push	r29
    20d2:	cf 93       	push	r28
    20d4:	00 d0       	rcall	.+0      	; 0x20d6 <_proc_stop_+0x6>
    20d6:	00 d0       	rcall	.+0      	; 0x20d8 <_proc_stop_+0x8>
    20d8:	cd b7       	in	r28, 0x3d	; 61
    20da:	de b7       	in	r29, 0x3e	; 62
    20dc:	9c 83       	std	Y+4, r25	; 0x04
    20de:	8b 83       	std	Y+3, r24	; 0x03
    spin_lock( &kernel.stat_lock );
    20e0:	83 e0       	ldi	r24, 0x03	; 3
    20e2:	93 e0       	ldi	r25, 0x03	; 3
    20e4:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
    stat_dec( proc, (stat_t *)kernel.stat + proc->core_id );
    20e8:	eb 81       	ldd	r30, Y+3	; 0x03
    20ea:	fc 81       	ldd	r31, Y+4	; 0x04
    20ec:	81 a1       	ldd	r24, Z+33	; 0x21
    20ee:	88 2f       	mov	r24, r24
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	9c 01       	movw	r18, r24
    20f4:	2f 5f       	subi	r18, 0xFF	; 255
    20f6:	3c 4f       	sbci	r19, 0xFC	; 252
    20f8:	8b 81       	ldd	r24, Y+3	; 0x03
    20fa:	9c 81       	ldd	r25, Y+4	; 0x04
    20fc:	b9 01       	movw	r22, r18
    20fe:	0e 94 82 01 	call	0x304	; 0x304 <stat_dec>
    spin_unlock( &kernel.stat_lock );
    2102:	83 e0       	ldi	r24, 0x03	; 3
    2104:	93 e0       	ldi	r25, 0x03	; 3
    2106:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
    {
        lock_t * xlist_lock;
        xlist_lock = &((sched_t *)kernel.sched + proc->core_id)->lock;
    210a:	eb 81       	ldd	r30, Y+3	; 0x03
    210c:	fc 81       	ldd	r31, Y+4	; 0x04
    210e:	81 a1       	ldd	r24, Z+33	; 0x21
    2110:	28 2f       	mov	r18, r24
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	8b e2       	ldi	r24, 0x2B	; 43
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	ac 01       	movw	r20, r24
    211a:	24 9f       	mul	r18, r20
    211c:	c0 01       	movw	r24, r0
    211e:	25 9f       	mul	r18, r21
    2120:	90 0d       	add	r25, r0
    2122:	34 9f       	mul	r19, r20
    2124:	90 0d       	add	r25, r0
    2126:	11 24       	eor	r1, r1
    2128:	85 5b       	subi	r24, 0xB5	; 181
    212a:	9d 4f       	sbci	r25, 0xFD	; 253
    212c:	8a 96       	adiw	r24, 0x2a	; 42
    212e:	9a 83       	std	Y+2, r25	; 0x02
    2130:	89 83       	std	Y+1, r24	; 0x01
        spin_lock( xlist_lock );
    2132:	89 81       	ldd	r24, Y+1	; 0x01
    2134:	9a 81       	ldd	r25, Y+2	; 0x02
    2136:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
        pitem_cut( (pitem_t *)proc );
    213a:	8b 81       	ldd	r24, Y+3	; 0x03
    213c:	9c 81       	ldd	r25, Y+4	; 0x04
    213e:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <pitem_cut>
        spin_unlock( xlist_lock );
    2142:	89 81       	ldd	r24, Y+1	; 0x01
    2144:	9a 81       	ldd	r25, Y+2	; 0x02
    2146:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
    }
}
    214a:	0f 90       	pop	r0
    214c:	0f 90       	pop	r0
    214e:	0f 90       	pop	r0
    2150:	0f 90       	pop	r0
    2152:	cf 91       	pop	r28
    2154:	df 91       	pop	r29
    2156:	08 95       	ret

00002158 <_proc_stop>:
#endif // CONFIG_MP

void _proc_stop(proc_t * proc)
{
    2158:	df 93       	push	r29
    215a:	cf 93       	push	r28
    215c:	00 d0       	rcall	.+0      	; 0x215e <_proc_stop+0x6>
    215e:	cd b7       	in	r28, 0x3d	; 61
    2160:	de b7       	in	r29, 0x3e	; 62
    2162:	9a 83       	std	Y+2, r25	; 0x02
    2164:	89 83       	std	Y+1, r24	; 0x01
    proc->flags &= ~PROC_FLG_RUN;
    2166:	e9 81       	ldd	r30, Y+1	; 0x01
    2168:	fa 81       	ldd	r31, Y+2	; 0x02
    216a:	87 81       	ldd	r24, Z+7	; 0x07
    216c:	90 85       	ldd	r25, Z+8	; 0x08
    216e:	8d 7f       	andi	r24, 0xFD	; 253
    2170:	e9 81       	ldd	r30, Y+1	; 0x01
    2172:	fa 81       	ldd	r31, Y+2	; 0x02
    2174:	90 87       	std	Z+8, r25	; 0x08
    2176:	87 83       	std	Z+7, r24	; 0x07
    _proc_stop_( proc );
    2178:	89 81       	ldd	r24, Y+1	; 0x01
    217a:	9a 81       	ldd	r25, Y+2	; 0x02
    217c:	0e 94 68 10 	call	0x20d0	; 0x20d0 <_proc_stop_>
    RESCHED_PROC( proc );
    2180:	e9 81       	ldd	r30, Y+1	; 0x01
    2182:	fa 81       	ldd	r31, Y+2	; 0x02
    2184:	81 a1       	ldd	r24, Z+33	; 0x21
    2186:	0e 94 de 01 	call	0x3bc	; 0x3bc <resched>
}
    218a:	0f 90       	pop	r0
    218c:	0f 90       	pop	r0
    218e:	cf 91       	pop	r28
    2190:	df 91       	pop	r29
    2192:	08 95       	ret

00002194 <proc_stop_isr>:
// Останов процесса из обработчика прерываний, прерывания должны быть запрещены
bool_t proc_stop_isr(proc_t * proc)
{
    2194:	df 93       	push	r29
    2196:	cf 93       	push	r28
    2198:	00 d0       	rcall	.+0      	; 0x219a <proc_stop_isr+0x6>
    219a:	0f 92       	push	r0
    219c:	cd b7       	in	r28, 0x3d	; 61
    219e:	de b7       	in	r29, 0x3e	; 62
    21a0:	9b 83       	std	Y+3, r25	; 0x03
    21a2:	8a 83       	std	Y+2, r24	; 0x02
    bool_t ret = (bool_t)0;
    21a4:	19 82       	std	Y+1, r1	; 0x01

    SPIN_LOCK( proc );
    21a6:	8a 81       	ldd	r24, Y+2	; 0x02
    21a8:	9b 81       	ldd	r25, Y+3	; 0x03
    21aa:	83 96       	adiw	r24, 0x23	; 35
    21ac:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
    //Проверка флагов
    //В случчае PROC_FLG_WAIT будем обрабатывать PROC_FLG_PRE_END на выходе из sig_wait.
    //В случае PROC_FLG_MUTEX или PROC_FLG_SEM будем обрабатывать PROC_FLG_PRE_STOP при освобождении общего ресурса.
    //В случае ожидания IPC флаг будем обрабатывать при попытке передать данные или указатель целевому процессу.
    if( proc->flags & (PROC_FLG_MUTEX|PROC_FLG_SEM|PROC_FLG_QUEUE|PROC_FLG_WAIT|PROC_FLG_IPCW) )proc->flags |= PROC_FLG_PRE_STOP;
    21b0:	ea 81       	ldd	r30, Y+2	; 0x02
    21b2:	fb 81       	ldd	r31, Y+3	; 0x03
    21b4:	87 81       	ldd	r24, Z+7	; 0x07
    21b6:	90 85       	ldd	r25, Z+8	; 0x08
    21b8:	8c 77       	andi	r24, 0x7C	; 124
    21ba:	90 70       	andi	r25, 0x00	; 0
    21bc:	00 97       	sbiw	r24, 0x00	; 0
    21be:	51 f0       	breq	.+20     	; 0x21d4 <proc_stop_isr+0x40>
    21c0:	ea 81       	ldd	r30, Y+2	; 0x02
    21c2:	fb 81       	ldd	r31, Y+3	; 0x03
    21c4:	87 81       	ldd	r24, Z+7	; 0x07
    21c6:	90 85       	ldd	r25, Z+8	; 0x08
    21c8:	80 68       	ori	r24, 0x80	; 128
    21ca:	ea 81       	ldd	r30, Y+2	; 0x02
    21cc:	fb 81       	ldd	r31, Y+3	; 0x03
    21ce:	90 87       	std	Z+8, r25	; 0x08
    21d0:	87 83       	std	Z+7, r24	; 0x07
    21d2:	0e c0       	rjmp	.+28     	; 0x21f0 <proc_stop_isr+0x5c>
    else if( proc->flags & PROC_FLG_RUN )
    21d4:	ea 81       	ldd	r30, Y+2	; 0x02
    21d6:	fb 81       	ldd	r31, Y+3	; 0x03
    21d8:	87 81       	ldd	r24, Z+7	; 0x07
    21da:	90 85       	ldd	r25, Z+8	; 0x08
    21dc:	82 70       	andi	r24, 0x02	; 2
    21de:	90 70       	andi	r25, 0x00	; 0
    21e0:	00 97       	sbiw	r24, 0x00	; 0
    21e2:	31 f0       	breq	.+12     	; 0x21f0 <proc_stop_isr+0x5c>
    {
        _proc_stop( proc );
    21e4:	8a 81       	ldd	r24, Y+2	; 0x02
    21e6:	9b 81       	ldd	r25, Y+3	; 0x03
    21e8:	0e 94 ac 10 	call	0x2158	; 0x2158 <_proc_stop>
        ret = (bool_t)1;
    21ec:	81 e0       	ldi	r24, 0x01	; 1
    21ee:	89 83       	std	Y+1, r24	; 0x01
    }

    SPIN_UNLOCK( proc );
    21f0:	8a 81       	ldd	r24, Y+2	; 0x02
    21f2:	9b 81       	ldd	r25, Y+3	; 0x03
    21f4:	83 96       	adiw	r24, 0x23	; 35
    21f6:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>

    return ret;
    21fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    21fc:	0f 90       	pop	r0
    21fe:	0f 90       	pop	r0
    2200:	0f 90       	pop	r0
    2202:	cf 91       	pop	r28
    2204:	df 91       	pop	r29
    2206:	08 95       	ret

00002208 <_proc_flag_stop>:
// Обработка флага останова процесса, для использования с семафорами, мьютексами и сигналами.
void _proc_flag_stop( flag_t mask )
{
    2208:	df 93       	push	r29
    220a:	cf 93       	push	r28
    220c:	00 d0       	rcall	.+0      	; 0x220e <_proc_flag_stop+0x6>
    220e:	00 d0       	rcall	.+0      	; 0x2210 <_proc_flag_stop+0x8>
    2210:	cd b7       	in	r28, 0x3d	; 61
    2212:	de b7       	in	r29, 0x3e	; 62
    2214:	9c 83       	std	Y+4, r25	; 0x04
    2216:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc;
    proc = current_proc();
    2218:	0e 94 0a 01 	call	0x214	; 0x214 <current_proc>
    221c:	9a 83       	std	Y+2, r25	; 0x02
    221e:	89 83       	std	Y+1, r24	; 0x01

    SPIN_LOCK( proc );
    2220:	89 81       	ldd	r24, Y+1	; 0x01
    2222:	9a 81       	ldd	r25, Y+2	; 0x02
    2224:	83 96       	adiw	r24, 0x23	; 35
    2226:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>

    proc->flags &= ~mask;
    222a:	e9 81       	ldd	r30, Y+1	; 0x01
    222c:	fa 81       	ldd	r31, Y+2	; 0x02
    222e:	27 81       	ldd	r18, Z+7	; 0x07
    2230:	30 85       	ldd	r19, Z+8	; 0x08
    2232:	8b 81       	ldd	r24, Y+3	; 0x03
    2234:	9c 81       	ldd	r25, Y+4	; 0x04
    2236:	80 95       	com	r24
    2238:	90 95       	com	r25
    223a:	82 23       	and	r24, r18
    223c:	93 23       	and	r25, r19
    223e:	e9 81       	ldd	r30, Y+1	; 0x01
    2240:	fa 81       	ldd	r31, Y+2	; 0x02
    2242:	90 87       	std	Z+8, r25	; 0x08
    2244:	87 83       	std	Z+7, r24	; 0x07
    if(  PROC_PRE_STOP_TEST(proc)  )
    2246:	e9 81       	ldd	r30, Y+1	; 0x01
    2248:	fa 81       	ldd	r31, Y+2	; 0x02
    224a:	87 81       	ldd	r24, Z+7	; 0x07
    224c:	90 85       	ldd	r25, Z+8	; 0x08
    224e:	80 78       	andi	r24, 0x80	; 128
    2250:	90 70       	andi	r25, 0x00	; 0
    2252:	00 97       	sbiw	r24, 0x00	; 0
    2254:	a9 f0       	breq	.+42     	; 0x2280 <_proc_flag_stop+0x78>
    2256:	e9 81       	ldd	r30, Y+1	; 0x01
    2258:	fa 81       	ldd	r31, Y+2	; 0x02
    225a:	87 81       	ldd	r24, Z+7	; 0x07
    225c:	90 85       	ldd	r25, Z+8	; 0x08
    225e:	8c 70       	andi	r24, 0x0C	; 12
    2260:	90 70       	andi	r25, 0x00	; 0
    2262:	00 97       	sbiw	r24, 0x00	; 0
    2264:	69 f4       	brne	.+26     	; 0x2280 <_proc_flag_stop+0x78>
        /*
        Если был запрошен останов целевого процесса,
        и целевой процесс не удерживает общие ресурсы,
        то мы остановим процесс
        */
        proc->flags &= ~PROC_FLG_PRE_STOP;
    2266:	e9 81       	ldd	r30, Y+1	; 0x01
    2268:	fa 81       	ldd	r31, Y+2	; 0x02
    226a:	87 81       	ldd	r24, Z+7	; 0x07
    226c:	90 85       	ldd	r25, Z+8	; 0x08
    226e:	8f 77       	andi	r24, 0x7F	; 127
    2270:	e9 81       	ldd	r30, Y+1	; 0x01
    2272:	fa 81       	ldd	r31, Y+2	; 0x02
    2274:	90 87       	std	Z+8, r25	; 0x08
    2276:	87 83       	std	Z+7, r24	; 0x07
        _proc_stop( proc );
    2278:	89 81       	ldd	r24, Y+1	; 0x01
    227a:	9a 81       	ldd	r25, Y+2	; 0x02
    227c:	0e 94 ac 10 	call	0x2158	; 0x2158 <_proc_stop>
    }

    SPIN_UNLOCK( proc );
    2280:	89 81       	ldd	r24, Y+1	; 0x01
    2282:	9a 81       	ldd	r25, Y+2	; 0x02
    2284:	83 96       	adiw	r24, 0x23	; 35
    2286:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>

}
    228a:	0f 90       	pop	r0
    228c:	0f 90       	pop	r0
    228e:	0f 90       	pop	r0
    2290:	0f 90       	pop	r0
    2292:	cf 91       	pop	r28
    2294:	df 91       	pop	r29
    2296:	08 95       	ret

00002298 <_proc_terminate>:

void _proc_terminate( proc_t * proc )
{
    2298:	df 93       	push	r29
    229a:	cf 93       	push	r28
    229c:	00 d0       	rcall	.+0      	; 0x229e <_proc_terminate+0x6>
    229e:	cd b7       	in	r28, 0x3d	; 61
    22a0:	de b7       	in	r29, 0x3e	; 62
    22a2:	9a 83       	std	Y+2, r25	; 0x02
    22a4:	89 83       	std	Y+1, r24	; 0x01

    SPIN_LOCK( proc );
    22a6:	89 81       	ldd	r24, Y+1	; 0x01
    22a8:	9a 81       	ldd	r25, Y+2	; 0x02
    22aa:	83 96       	adiw	r24, 0x23	; 35
    22ac:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>

    // Обрабатываем флаги
    // Нельзя выходить из pmain не освободив все захваченные ресурсы, за это процесс будет "убит"!
    if( proc->flags & PROC_FLG_LOCK_MASK ) proc->flags |= PROC_FLG_DEAD;
    22b0:	e9 81       	ldd	r30, Y+1	; 0x01
    22b2:	fa 81       	ldd	r31, Y+2	; 0x02
    22b4:	87 81       	ldd	r24, Z+7	; 0x07
    22b6:	90 85       	ldd	r25, Z+8	; 0x08
    22b8:	8c 70       	andi	r24, 0x0C	; 12
    22ba:	90 70       	andi	r25, 0x00	; 0
    22bc:	00 97       	sbiw	r24, 0x00	; 0
    22be:	51 f0       	breq	.+20     	; 0x22d4 <_proc_terminate+0x3c>
    22c0:	e9 81       	ldd	r30, Y+1	; 0x01
    22c2:	fa 81       	ldd	r31, Y+2	; 0x02
    22c4:	87 81       	ldd	r24, Z+7	; 0x07
    22c6:	90 85       	ldd	r25, Z+8	; 0x08
    22c8:	94 60       	ori	r25, 0x04	; 4
    22ca:	e9 81       	ldd	r30, Y+1	; 0x01
    22cc:	fa 81       	ldd	r31, Y+2	; 0x02
    22ce:	90 87       	std	Z+8, r25	; 0x08
    22d0:	87 83       	std	Z+7, r24	; 0x07
    22d2:	09 c0       	rjmp	.+18     	; 0x22e6 <_proc_terminate+0x4e>
    // В противном случае - просто завершаем процесс
    else proc->flags |= PROC_FLG_END;
    22d4:	e9 81       	ldd	r30, Y+1	; 0x01
    22d6:	fa 81       	ldd	r31, Y+2	; 0x02
    22d8:	87 81       	ldd	r24, Z+7	; 0x07
    22da:	90 85       	ldd	r25, Z+8	; 0x08
    22dc:	91 60       	ori	r25, 0x01	; 1
    22de:	e9 81       	ldd	r30, Y+1	; 0x01
    22e0:	fa 81       	ldd	r31, Y+2	; 0x02
    22e2:	90 87       	std	Z+8, r25	; 0x08
    22e4:	87 83       	std	Z+7, r24	; 0x07
    proc->flags &= ~PROC_FLG_PRE_STOP_MASK;
    22e6:	e9 81       	ldd	r30, Y+1	; 0x01
    22e8:	fa 81       	ldd	r31, Y+2	; 0x02
    22ea:	87 81       	ldd	r24, Z+7	; 0x07
    22ec:	90 85       	ldd	r25, Z+8	; 0x08
    22ee:	8d 77       	andi	r24, 0x7D	; 125
    22f0:	e9 81       	ldd	r30, Y+1	; 0x01
    22f2:	fa 81       	ldd	r31, Y+2	; 0x02
    22f4:	90 87       	std	Z+8, r25	; 0x08
    22f6:	87 83       	std	Z+7, r24	; 0x07
    // Останов
    _proc_stop_( proc );
    22f8:	89 81       	ldd	r24, Y+1	; 0x01
    22fa:	9a 81       	ldd	r25, Y+2	; 0x02
    22fc:	0e 94 68 10 	call	0x20d0	; 0x20d0 <_proc_stop_>
    // Выполнить перепланировку
    RESCHED_PROC( proc );
    2300:	e9 81       	ldd	r30, Y+1	; 0x01
    2302:	fa 81       	ldd	r31, Y+2	; 0x02
    2304:	81 a1       	ldd	r24, Z+33	; 0x21
    2306:	0e 94 de 01 	call	0x3bc	; 0x3bc <resched>

    SPIN_UNLOCK( proc );
    230a:	89 81       	ldd	r24, Y+1	; 0x01
    230c:	9a 81       	ldd	r25, Y+2	; 0x02
    230e:	83 96       	adiw	r24, 0x23	; 35
    2310:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
}
    2314:	0f 90       	pop	r0
    2316:	0f 90       	pop	r0
    2318:	cf 91       	pop	r28
    231a:	df 91       	pop	r29
    231c:	08 95       	ret

0000231e <_proc_reset_watchdog>:

void _proc_reset_watchdog( void )
{
    231e:	df 93       	push	r29
    2320:	cf 93       	push	r28
    2322:	00 d0       	rcall	.+0      	; 0x2324 <_proc_reset_watchdog+0x6>
    2324:	cd b7       	in	r28, 0x3d	; 61
    2326:	de b7       	in	r29, 0x3e	; 62
    proc_t * proc;
    proc = current_proc();
    2328:	0e 94 0a 01 	call	0x214	; 0x214 <current_proc>
    232c:	9a 83       	std	Y+2, r25	; 0x02
    232e:	89 83       	std	Y+1, r24	; 0x01

    SPIN_LOCK( proc );
    2330:	89 81       	ldd	r24, Y+1	; 0x01
    2332:	9a 81       	ldd	r25, Y+2	; 0x02
    2334:	83 96       	adiw	r24, 0x23	; 35
    2336:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>

    if( proc->flags & PROC_FLG_RT )proc->timer = proc->time_quant;
    233a:	e9 81       	ldd	r30, Y+1	; 0x01
    233c:	fa 81       	ldd	r31, Y+2	; 0x02
    233e:	87 81       	ldd	r24, Z+7	; 0x07
    2340:	90 85       	ldd	r25, Z+8	; 0x08
    2342:	81 70       	andi	r24, 0x01	; 1
    2344:	90 70       	andi	r25, 0x00	; 0
    2346:	88 23       	and	r24, r24
    2348:	41 f0       	breq	.+16     	; 0x235a <_proc_reset_watchdog+0x3c>
    234a:	e9 81       	ldd	r30, Y+1	; 0x01
    234c:	fa 81       	ldd	r31, Y+2	; 0x02
    234e:	83 8d       	ldd	r24, Z+27	; 0x1b
    2350:	94 8d       	ldd	r25, Z+28	; 0x1c
    2352:	e9 81       	ldd	r30, Y+1	; 0x01
    2354:	fa 81       	ldd	r31, Y+2	; 0x02
    2356:	96 8f       	std	Z+30, r25	; 0x1e
    2358:	85 8f       	std	Z+29, r24	; 0x1d

    SPIN_UNLOCK( proc );
    235a:	89 81       	ldd	r24, Y+1	; 0x01
    235c:	9a 81       	ldd	r25, Y+2	; 0x02
    235e:	83 96       	adiw	r24, 0x23	; 35
    2360:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
}
    2364:	0f 90       	pop	r0
    2366:	0f 90       	pop	r0
    2368:	cf 91       	pop	r28
    236a:	df 91       	pop	r29
    236c:	08 95       	ret

0000236e <_proc_lres_inc>:
    proc_t * proc
#ifdef CONFIG_USE_HIGHEST_LOCKER
    ,prio_t prio
#endif
)
{
    236e:	df 93       	push	r29
    2370:	cf 93       	push	r28
    2372:	00 d0       	rcall	.+0      	; 0x2374 <_proc_lres_inc+0x6>
    2374:	0f 92       	push	r0
    2376:	cd b7       	in	r28, 0x3d	; 61
    2378:	de b7       	in	r29, 0x3e	; 62
    237a:	9a 83       	std	Y+2, r25	; 0x02
    237c:	89 83       	std	Y+1, r24	; 0x01
    237e:	6b 83       	std	Y+3, r22	; 0x03
#ifdef CONFIG_USE_HIGHEST_LOCKER
    if( proc->lres.index == (index_t)0 )proc->flags |= PROC_FLG_MUTEX;
    2380:	e9 81       	ldd	r30, Y+1	; 0x01
    2382:	fa 81       	ldd	r31, Y+2	; 0x02
    2384:	82 8d       	ldd	r24, Z+26	; 0x1a
    2386:	88 23       	and	r24, r24
    2388:	49 f4       	brne	.+18     	; 0x239c <_proc_lres_inc+0x2e>
    238a:	e9 81       	ldd	r30, Y+1	; 0x01
    238c:	fa 81       	ldd	r31, Y+2	; 0x02
    238e:	87 81       	ldd	r24, Z+7	; 0x07
    2390:	90 85       	ldd	r25, Z+8	; 0x08
    2392:	84 60       	ori	r24, 0x04	; 4
    2394:	e9 81       	ldd	r30, Y+1	; 0x01
    2396:	fa 81       	ldd	r31, Y+2	; 0x02
    2398:	90 87       	std	Z+8, r25	; 0x08
    239a:	87 83       	std	Z+7, r24	; 0x07
    pcounter_inc( &proc->lres, prio );
    239c:	89 81       	ldd	r24, Y+1	; 0x01
    239e:	9a 81       	ldd	r25, Y+2	; 0x02
    23a0:	0a 96       	adiw	r24, 0x0a	; 10
    23a2:	6b 81       	ldd	r22, Y+3	; 0x03
    23a4:	0e 94 bc 0c 	call	0x1978	; 0x1978 <pcounter_inc>
#else
    if( proc->lres == (count_t)0 )proc->flags |= PROC_FLG_MUTEX;
    proc->lres++;
#endif
}
    23a8:	0f 90       	pop	r0
    23aa:	0f 90       	pop	r0
    23ac:	0f 90       	pop	r0
    23ae:	cf 91       	pop	r28
    23b0:	df 91       	pop	r29
    23b2:	08 95       	ret

000023b4 <_proc_lres_dec>:
    proc_t * proc
#ifdef CONFIG_USE_HIGHEST_LOCKER
    ,prio_t prio
#endif
)
{
    23b4:	df 93       	push	r29
    23b6:	cf 93       	push	r28
    23b8:	00 d0       	rcall	.+0      	; 0x23ba <_proc_lres_dec+0x6>
    23ba:	0f 92       	push	r0
    23bc:	cd b7       	in	r28, 0x3d	; 61
    23be:	de b7       	in	r29, 0x3e	; 62
    23c0:	9a 83       	std	Y+2, r25	; 0x02
    23c2:	89 83       	std	Y+1, r24	; 0x01
    23c4:	6b 83       	std	Y+3, r22	; 0x03
#ifdef CONFIG_USE_HIGHEST_LOCKER
    pcounter_dec( &proc->lres, prio );
    23c6:	89 81       	ldd	r24, Y+1	; 0x01
    23c8:	9a 81       	ldd	r25, Y+2	; 0x02
    23ca:	0a 96       	adiw	r24, 0x0a	; 10
    23cc:	6b 81       	ldd	r22, Y+3	; 0x03
    23ce:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <pcounter_dec>
    if( proc->lres.index == (index_t)0 )proc->flags &= ~PROC_FLG_MUTEX;
    23d2:	e9 81       	ldd	r30, Y+1	; 0x01
    23d4:	fa 81       	ldd	r31, Y+2	; 0x02
    23d6:	82 8d       	ldd	r24, Z+26	; 0x1a
    23d8:	88 23       	and	r24, r24
    23da:	49 f4       	brne	.+18     	; 0x23ee <_proc_lres_dec+0x3a>
    23dc:	e9 81       	ldd	r30, Y+1	; 0x01
    23de:	fa 81       	ldd	r31, Y+2	; 0x02
    23e0:	87 81       	ldd	r24, Z+7	; 0x07
    23e2:	90 85       	ldd	r25, Z+8	; 0x08
    23e4:	8b 7f       	andi	r24, 0xFB	; 251
    23e6:	e9 81       	ldd	r30, Y+1	; 0x01
    23e8:	fa 81       	ldd	r31, Y+2	; 0x02
    23ea:	90 87       	std	Z+8, r25	; 0x08
    23ec:	87 83       	std	Z+7, r24	; 0x07
#else
    if( proc->lres!= (count_t)0 )proc->lres--;
    if( proc->lres == (count_t)0 )proc->flags &= ~PROC_FLG_MUTEX;
#endif
}
    23ee:	0f 90       	pop	r0
    23f0:	0f 90       	pop	r0
    23f2:	0f 90       	pop	r0
    23f4:	cf 91       	pop	r28
    23f6:	df 91       	pop	r29
    23f8:	08 95       	ret

000023fa <_proc_prio_control_stoped>:

#ifdef CONFIG_USE_HIGHEST_LOCKER
// Будет использоваться в mutex-ах и т.п., процесс должен сам вызывать эту функцию, при этом он должен быть вырезан из списка выполняющихся.

void _proc_prio_control_stoped( proc_t * proc )
{
    23fa:	df 93       	push	r29
    23fc:	cf 93       	push	r28
    23fe:	cd b7       	in	r28, 0x3d	; 61
    2400:	de b7       	in	r29, 0x3e	; 62
    2402:	27 97       	sbiw	r28, 0x07	; 7
    2404:	0f b6       	in	r0, 0x3f	; 63
    2406:	f8 94       	cli
    2408:	de bf       	out	0x3e, r29	; 62
    240a:	0f be       	out	0x3f, r0	; 63
    240c:	cd bf       	out	0x3d, r28	; 61
    240e:	9b 83       	std	Y+3, r25	; 0x03
    2410:	8a 83       	std	Y+2, r24	; 0x02
    if(proc->lres.index != (index_t)0)
    2412:	ea 81       	ldd	r30, Y+2	; 0x02
    2414:	fb 81       	ldd	r31, Y+3	; 0x03
    2416:	82 8d       	ldd	r24, Z+26	; 0x1a
    2418:	88 23       	and	r24, r24
    241a:	d9 f0       	breq	.+54     	; 0x2452 <_proc_prio_control_stoped+0x58>
    {

        prio_t locker_prio;
        locker_prio = index_search( proc->lres.index );
    241c:	ea 81       	ldd	r30, Y+2	; 0x02
    241e:	fb 81       	ldd	r31, Y+3	; 0x03
    2420:	82 8d       	ldd	r24, Z+26	; 0x1a
    2422:	0e 94 f6 08 	call	0x11ec	; 0x11ec <index_search>
    2426:	89 83       	std	Y+1, r24	; 0x01
        ((pitem_t *)proc)->prio = ( locker_prio < proc->base_prio )?locker_prio:proc->base_prio;
    2428:	8a 81       	ldd	r24, Y+2	; 0x02
    242a:	9b 81       	ldd	r25, Y+3	; 0x03
    242c:	9e 83       	std	Y+6, r25	; 0x06
    242e:	8d 83       	std	Y+5, r24	; 0x05
    2430:	ea 81       	ldd	r30, Y+2	; 0x02
    2432:	fb 81       	ldd	r31, Y+3	; 0x03
    2434:	81 85       	ldd	r24, Z+9	; 0x09
    2436:	99 81       	ldd	r25, Y+1	; 0x01
    2438:	9f 83       	std	Y+7, r25	; 0x07
    243a:	8c 83       	std	Y+4, r24	; 0x04
    243c:	ec 81       	ldd	r30, Y+4	; 0x04
    243e:	ff 81       	ldd	r31, Y+7	; 0x07
    2440:	fe 17       	cp	r31, r30
    2442:	10 f4       	brcc	.+4      	; 0x2448 <_proc_prio_control_stoped+0x4e>
    2444:	8f 81       	ldd	r24, Y+7	; 0x07
    2446:	8c 83       	std	Y+4, r24	; 0x04
    2448:	8c 81       	ldd	r24, Y+4	; 0x04
    244a:	ed 81       	ldd	r30, Y+5	; 0x05
    244c:	fe 81       	ldd	r31, Y+6	; 0x06
    244e:	86 83       	std	Z+6, r24	; 0x06
    2450:	08 c0       	rjmp	.+16     	; 0x2462 <_proc_prio_control_stoped+0x68>
    }
    else
    {
        ((pitem_t *)proc)->prio = proc->base_prio;
    2452:	ea 81       	ldd	r30, Y+2	; 0x02
    2454:	fb 81       	ldd	r31, Y+3	; 0x03
    2456:	aa 81       	ldd	r26, Y+2	; 0x02
    2458:	bb 81       	ldd	r27, Y+3	; 0x03
    245a:	19 96       	adiw	r26, 0x09	; 9
    245c:	8c 91       	ld	r24, X
    245e:	19 97       	sbiw	r26, 0x09	; 9
    2460:	86 83       	std	Z+6, r24	; 0x06
    }
}
    2462:	27 96       	adiw	r28, 0x07	; 7
    2464:	0f b6       	in	r0, 0x3f	; 63
    2466:	f8 94       	cli
    2468:	de bf       	out	0x3e, r29	; 62
    246a:	0f be       	out	0x3f, r0	; 63
    246c:	cd bf       	out	0x3d, r28	; 61
    246e:	cf 91       	pop	r28
    2470:	df 91       	pop	r29
    2472:	08 95       	ret

00002474 <_proc_prio_control_running>:

void _proc_prio_control_running( proc_t * proc )
{
    2474:	df 93       	push	r29
    2476:	cf 93       	push	r28
    2478:	00 d0       	rcall	.+0      	; 0x247a <_proc_prio_control_running+0x6>
    247a:	00 d0       	rcall	.+0      	; 0x247c <_proc_prio_control_running+0x8>
    247c:	00 d0       	rcall	.+0      	; 0x247e <_proc_prio_control_running+0xa>
    247e:	cd b7       	in	r28, 0x3d	; 61
    2480:	de b7       	in	r29, 0x3e	; 62
    2482:	9c 83       	std	Y+4, r25	; 0x04
    2484:	8b 83       	std	Y+3, r24	; 0x03
    prio_t new_prio;
    if(proc->lres.index != (index_t)0)
    2486:	eb 81       	ldd	r30, Y+3	; 0x03
    2488:	fc 81       	ldd	r31, Y+4	; 0x04
    248a:	82 8d       	ldd	r24, Z+26	; 0x1a
    248c:	88 23       	and	r24, r24
    248e:	a9 f0       	breq	.+42     	; 0x24ba <_proc_prio_control_running+0x46>
    {
        prio_t locker_prio;
        locker_prio = index_search( proc->lres.index );
    2490:	eb 81       	ldd	r30, Y+3	; 0x03
    2492:	fc 81       	ldd	r31, Y+4	; 0x04
    2494:	82 8d       	ldd	r24, Z+26	; 0x1a
    2496:	0e 94 f6 08 	call	0x11ec	; 0x11ec <index_search>
    249a:	89 83       	std	Y+1, r24	; 0x01
        new_prio = ( locker_prio < proc->base_prio )?locker_prio:proc->base_prio;
    249c:	eb 81       	ldd	r30, Y+3	; 0x03
    249e:	fc 81       	ldd	r31, Y+4	; 0x04
    24a0:	81 85       	ldd	r24, Z+9	; 0x09
    24a2:	99 81       	ldd	r25, Y+1	; 0x01
    24a4:	9e 83       	std	Y+6, r25	; 0x06
    24a6:	8d 83       	std	Y+5, r24	; 0x05
    24a8:	8d 81       	ldd	r24, Y+5	; 0x05
    24aa:	9e 81       	ldd	r25, Y+6	; 0x06
    24ac:	98 17       	cp	r25, r24
    24ae:	10 f4       	brcc	.+4      	; 0x24b4 <_proc_prio_control_running+0x40>
    24b0:	8e 81       	ldd	r24, Y+6	; 0x06
    24b2:	8d 83       	std	Y+5, r24	; 0x05
    24b4:	9d 81       	ldd	r25, Y+5	; 0x05
    24b6:	9a 83       	std	Y+2, r25	; 0x02
    24b8:	04 c0       	rjmp	.+8      	; 0x24c2 <_proc_prio_control_running+0x4e>
    }
    else
    {
        new_prio = proc->base_prio;
    24ba:	eb 81       	ldd	r30, Y+3	; 0x03
    24bc:	fc 81       	ldd	r31, Y+4	; 0x04
    24be:	81 85       	ldd	r24, Z+9	; 0x09
    24c0:	8a 83       	std	Y+2, r24	; 0x02
    }
    if(((pitem_t *)proc)->prio != new_prio)
    24c2:	eb 81       	ldd	r30, Y+3	; 0x03
    24c4:	fc 81       	ldd	r31, Y+4	; 0x04
    24c6:	96 81       	ldd	r25, Z+6	; 0x06
    24c8:	8a 81       	ldd	r24, Y+2	; 0x02
    24ca:	98 17       	cp	r25, r24
    24cc:	31 f1       	breq	.+76     	; 0x251a <_proc_prio_control_running+0xa6>
    {
        _proc_stop_( proc );
    24ce:	8b 81       	ldd	r24, Y+3	; 0x03
    24d0:	9c 81       	ldd	r25, Y+4	; 0x04
    24d2:	0e 94 68 10 	call	0x20d0	; 0x20d0 <_proc_stop_>
        ((pitem_t *)proc)->prio = new_prio;
    24d6:	eb 81       	ldd	r30, Y+3	; 0x03
    24d8:	fc 81       	ldd	r31, Y+4	; 0x04
    24da:	8a 81       	ldd	r24, Y+2	; 0x02
    24dc:	86 83       	std	Z+6, r24	; 0x06
#ifdef CONFIG_MP
        spin_lock( &kernel.stat_lock );
    24de:	83 e0       	ldi	r24, 0x03	; 3
    24e0:	93 e0       	ldi	r25, 0x03	; 3
    24e2:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
        stat_inc( proc, (stat_t *)kernel.stat+proc->core_id );
    24e6:	eb 81       	ldd	r30, Y+3	; 0x03
    24e8:	fc 81       	ldd	r31, Y+4	; 0x04
    24ea:	81 a1       	ldd	r24, Z+33	; 0x21
    24ec:	88 2f       	mov	r24, r24
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	9c 01       	movw	r18, r24
    24f2:	2f 5f       	subi	r18, 0xFF	; 255
    24f4:	3c 4f       	sbci	r19, 0xFC	; 252
    24f6:	8b 81       	ldd	r24, Y+3	; 0x03
    24f8:	9c 81       	ldd	r25, Y+4	; 0x04
    24fa:	b9 01       	movw	r22, r18
    24fc:	0e 94 98 01 	call	0x330	; 0x330 <stat_inc>
        spin_unlock( &kernel.stat_lock );
    2500:	83 e0       	ldi	r24, 0x03	; 3
    2502:	93 e0       	ldi	r25, 0x03	; 3
    2504:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
#endif
        _proc_run_( proc );
    2508:	8b 81       	ldd	r24, Y+3	; 0x03
    250a:	9c 81       	ldd	r25, Y+4	; 0x04
    250c:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <_proc_run_>
        RESCHED_PROC( proc );
    2510:	eb 81       	ldd	r30, Y+3	; 0x03
    2512:	fc 81       	ldd	r31, Y+4	; 0x04
    2514:	81 a1       	ldd	r24, Z+33	; 0x21
    2516:	0e 94 de 01 	call	0x3bc	; 0x3bc <resched>
    }
}
    251a:	26 96       	adiw	r28, 0x06	; 6
    251c:	0f b6       	in	r0, 0x3f	; 63
    251e:	f8 94       	cli
    2520:	de bf       	out	0x3e, r29	; 62
    2522:	0f be       	out	0x3f, r0	; 63
    2524:	cd bf       	out	0x3d, r28	; 61
    2526:	cf 91       	pop	r28
    2528:	df 91       	pop	r29
    252a:	08 95       	ret

0000252c <sched_load_balancer>:

#ifdef CONFIG_MP
//========================================================================================
// Балансировщик нагрузки
WEAK core_id_t sched_load_balancer(proc_t * proc, stat_t * stat)
{
    252c:	df 93       	push	r29
    252e:	cf 93       	push	r28
    2530:	cd b7       	in	r28, 0x3d	; 61
    2532:	de b7       	in	r29, 0x3e	; 62
    2534:	2a 97       	sbiw	r28, 0x0a	; 10
    2536:	0f b6       	in	r0, 0x3f	; 63
    2538:	f8 94       	cli
    253a:	de bf       	out	0x3e, r29	; 62
    253c:	0f be       	out	0x3f, r0	; 63
    253e:	cd bf       	out	0x3d, r28	; 61
    2540:	98 87       	std	Y+8, r25	; 0x08
    2542:	8f 83       	std	Y+7, r24	; 0x07
    2544:	7a 87       	std	Y+10, r23	; 0x0a
    2546:	69 87       	std	Y+9, r22	; 0x09
    core_id_t core = (core_id_t)0, ret;
    2548:	1e 82       	std	Y+6, r1	; 0x06
    affinity_t mask = (affinity_t)1;
    254a:	81 e0       	ldi	r24, 0x01	; 1
    254c:	8c 83       	std	Y+4, r24	; 0x04
    254e:	0d c0       	rjmp	.+26     	; 0x256a <sched_load_balancer+0x3e>
    while( core < (core_id_t)MAX_CORES )
    {
        if( proc->affinity & mask )break;
    2550:	ef 81       	ldd	r30, Y+7	; 0x07
    2552:	f8 85       	ldd	r31, Y+8	; 0x08
    2554:	92 a1       	ldd	r25, Z+34	; 0x22
    2556:	8c 81       	ldd	r24, Y+4	; 0x04
    2558:	89 23       	and	r24, r25
    255a:	88 23       	and	r24, r24
    255c:	49 f4       	brne	.+18     	; 0x2570 <sched_load_balancer+0x44>
        mask<<=1;
    255e:	8c 81       	ldd	r24, Y+4	; 0x04
    2560:	88 0f       	add	r24, r24
    2562:	8c 83       	std	Y+4, r24	; 0x04
        core++;
    2564:	8e 81       	ldd	r24, Y+6	; 0x06
    2566:	8f 5f       	subi	r24, 0xFF	; 255
    2568:	8e 83       	std	Y+6, r24	; 0x06
// Балансировщик нагрузки
WEAK core_id_t sched_load_balancer(proc_t * proc, stat_t * stat)
{
    core_id_t core = (core_id_t)0, ret;
    affinity_t mask = (affinity_t)1;
    while( core < (core_id_t)MAX_CORES )
    256a:	8e 81       	ldd	r24, Y+6	; 0x06
    256c:	82 30       	cpi	r24, 0x02	; 2
    256e:	80 f3       	brcs	.-32     	; 0x2550 <sched_load_balancer+0x24>
        if( proc->affinity & mask )break;
        mask<<=1;
        core++;
    }
    // Начальное предположение
    stat += (core_id_t)core;
    2570:	8e 81       	ldd	r24, Y+6	; 0x06
    2572:	28 2f       	mov	r18, r24
    2574:	30 e0       	ldi	r19, 0x00	; 0
    2576:	89 85       	ldd	r24, Y+9	; 0x09
    2578:	9a 85       	ldd	r25, Y+10	; 0x0a
    257a:	82 0f       	add	r24, r18
    257c:	93 1f       	adc	r25, r19
    257e:	9a 87       	std	Y+10, r25	; 0x0a
    2580:	89 87       	std	Y+9, r24	; 0x09
    ret = core++;
    2582:	8e 81       	ldd	r24, Y+6	; 0x06
    2584:	8d 83       	std	Y+5, r24	; 0x05
    2586:	8e 81       	ldd	r24, Y+6	; 0x06
    2588:	8f 5f       	subi	r24, 0xFF	; 255
    258a:	8e 83       	std	Y+6, r24	; 0x06
    mask<<=1;
    258c:	8c 81       	ldd	r24, Y+4	; 0x04
    258e:	88 0f       	add	r24, r24
    2590:	8c 83       	std	Y+4, r24	; 0x04
    {
        prio_t proc_prio;
        load_t current_load, min_load;

        proc_prio = ((pitem_t *)proc)->prio;
    2592:	ef 81       	ldd	r30, Y+7	; 0x07
    2594:	f8 85       	ldd	r31, Y+8	; 0x08
    2596:	86 81       	ldd	r24, Z+6	; 0x06
    2598:	8b 83       	std	Y+3, r24	; 0x03
        min_load = stat_calc_load( proc_prio, stat++ );
    259a:	29 85       	ldd	r18, Y+9	; 0x09
    259c:	3a 85       	ldd	r19, Y+10	; 0x0a
    259e:	89 85       	ldd	r24, Y+9	; 0x09
    25a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25a2:	01 96       	adiw	r24, 0x01	; 1
    25a4:	9a 87       	std	Y+10, r25	; 0x0a
    25a6:	89 87       	std	Y+9, r24	; 0x09
    25a8:	8b 81       	ldd	r24, Y+3	; 0x03
    25aa:	b9 01       	movw	r22, r18
    25ac:	0e 94 cc 01 	call	0x398	; 0x398 <stat_calc_load>
    25b0:	89 83       	std	Y+1, r24	; 0x01
    25b2:	21 c0       	rjmp	.+66     	; 0x25f6 <sched_load_balancer+0xca>
        // Проверка всего остального, тупой поиск минимума
        while( core < (core_id_t)MAX_CORES )
        {
            current_load = stat_calc_load( proc_prio, stat++ );
    25b4:	29 85       	ldd	r18, Y+9	; 0x09
    25b6:	3a 85       	ldd	r19, Y+10	; 0x0a
    25b8:	89 85       	ldd	r24, Y+9	; 0x09
    25ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    25bc:	01 96       	adiw	r24, 0x01	; 1
    25be:	9a 87       	std	Y+10, r25	; 0x0a
    25c0:	89 87       	std	Y+9, r24	; 0x09
    25c2:	8b 81       	ldd	r24, Y+3	; 0x03
    25c4:	b9 01       	movw	r22, r18
    25c6:	0e 94 cc 01 	call	0x398	; 0x398 <stat_calc_load>
    25ca:	8a 83       	std	Y+2, r24	; 0x02
            if( (proc->affinity & mask) && (current_load < min_load) )
    25cc:	ef 81       	ldd	r30, Y+7	; 0x07
    25ce:	f8 85       	ldd	r31, Y+8	; 0x08
    25d0:	92 a1       	ldd	r25, Z+34	; 0x22
    25d2:	8c 81       	ldd	r24, Y+4	; 0x04
    25d4:	89 23       	and	r24, r25
    25d6:	88 23       	and	r24, r24
    25d8:	41 f0       	breq	.+16     	; 0x25ea <sched_load_balancer+0xbe>
    25da:	9a 81       	ldd	r25, Y+2	; 0x02
    25dc:	89 81       	ldd	r24, Y+1	; 0x01
    25de:	98 17       	cp	r25, r24
    25e0:	20 f4       	brcc	.+8      	; 0x25ea <sched_load_balancer+0xbe>
            {
                min_load = current_load;
    25e2:	8a 81       	ldd	r24, Y+2	; 0x02
    25e4:	89 83       	std	Y+1, r24	; 0x01
                ret = core;
    25e6:	8e 81       	ldd	r24, Y+6	; 0x06
    25e8:	8d 83       	std	Y+5, r24	; 0x05
            }
            mask<<=1;
    25ea:	8c 81       	ldd	r24, Y+4	; 0x04
    25ec:	88 0f       	add	r24, r24
    25ee:	8c 83       	std	Y+4, r24	; 0x04
            core++;
    25f0:	8e 81       	ldd	r24, Y+6	; 0x06
    25f2:	8f 5f       	subi	r24, 0xFF	; 255
    25f4:	8e 83       	std	Y+6, r24	; 0x06
        load_t current_load, min_load;

        proc_prio = ((pitem_t *)proc)->prio;
        min_load = stat_calc_load( proc_prio, stat++ );
        // Проверка всего остального, тупой поиск минимума
        while( core < (core_id_t)MAX_CORES )
    25f6:	8e 81       	ldd	r24, Y+6	; 0x06
    25f8:	82 30       	cpi	r24, 0x02	; 2
    25fa:	e0 f2       	brcs	.-72     	; 0x25b4 <sched_load_balancer+0x88>
            }
            mask<<=1;
            core++;
        }
    }
    return ret;
    25fc:	8d 81       	ldd	r24, Y+5	; 0x05
}
    25fe:	2a 96       	adiw	r28, 0x0a	; 10
    2600:	0f b6       	in	r0, 0x3f	; 63
    2602:	f8 94       	cli
    2604:	de bf       	out	0x3e, r29	; 62
    2606:	0f be       	out	0x3f, r0	; 63
    2608:	cd bf       	out	0x3d, r28	; 61
    260a:	cf 91       	pop	r28
    260c:	df 91       	pop	r29
    260e:	08 95       	ret

00002610 <sched_highest_load_core>:
//----------------------------------------------------------------------------------------
//Поиск самой нагруженной структуры stat_t в массиве
WEAK core_id_t sched_highest_load_core( stat_t * stat )
{
    2610:	df 93       	push	r29
    2612:	cf 93       	push	r28
    2614:	00 d0       	rcall	.+0      	; 0x2616 <sched_highest_load_core+0x6>
    2616:	00 d0       	rcall	.+0      	; 0x2618 <sched_highest_load_core+0x8>
    2618:	00 d0       	rcall	.+0      	; 0x261a <sched_highest_load_core+0xa>
    261a:	cd b7       	in	r28, 0x3d	; 61
    261c:	de b7       	in	r29, 0x3e	; 62
    261e:	9e 83       	std	Y+6, r25	; 0x06
    2620:	8d 83       	std	Y+5, r24	; 0x05
    // Начальное предположение
    load_t max_load;
    core_id_t object_core = (core_id_t)0; //процессор с максимальной нагрузкой, с которого эту нагрузку будем снимать
    2622:	1b 82       	std	Y+3, r1	; 0x03
    core_id_t core = (core_id_t)1;
    2624:	81 e0       	ldi	r24, 0x01	; 1
    2626:	8a 83       	std	Y+2, r24	; 0x02
    max_load  = stat_calc_load( (prio_t)BITS_IN_INDEX_T, stat ); // максимальная нагрузка
    2628:	2d 81       	ldd	r18, Y+5	; 0x05
    262a:	3e 81       	ldd	r19, Y+6	; 0x06
    262c:	88 e0       	ldi	r24, 0x08	; 8
    262e:	b9 01       	movw	r22, r18
    2630:	0e 94 cc 01 	call	0x398	; 0x398 <stat_calc_load>
    2634:	8c 83       	std	Y+4, r24	; 0x04
    2636:	17 c0       	rjmp	.+46     	; 0x2666 <sched_highest_load_core+0x56>

    while( core < (core_id_t)MAX_CORES )
    {
        load_t current_load;
        current_load = stat_calc_load( (prio_t)BITS_IN_INDEX_T, stat + core );
    2638:	8a 81       	ldd	r24, Y+2	; 0x02
    263a:	28 2f       	mov	r18, r24
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	8d 81       	ldd	r24, Y+5	; 0x05
    2640:	9e 81       	ldd	r25, Y+6	; 0x06
    2642:	28 0f       	add	r18, r24
    2644:	39 1f       	adc	r19, r25
    2646:	88 e0       	ldi	r24, 0x08	; 8
    2648:	b9 01       	movw	r22, r18
    264a:	0e 94 cc 01 	call	0x398	; 0x398 <stat_calc_load>
    264e:	89 83       	std	Y+1, r24	; 0x01
        if( current_load > max_load )
    2650:	99 81       	ldd	r25, Y+1	; 0x01
    2652:	8c 81       	ldd	r24, Y+4	; 0x04
    2654:	89 17       	cp	r24, r25
    2656:	20 f4       	brcc	.+8      	; 0x2660 <sched_highest_load_core+0x50>
        {
            max_load = current_load;
    2658:	89 81       	ldd	r24, Y+1	; 0x01
    265a:	8c 83       	std	Y+4, r24	; 0x04
            object_core = core;
    265c:	8a 81       	ldd	r24, Y+2	; 0x02
    265e:	8b 83       	std	Y+3, r24	; 0x03
        }
        core++;
    2660:	8a 81       	ldd	r24, Y+2	; 0x02
    2662:	8f 5f       	subi	r24, 0xFF	; 255
    2664:	8a 83       	std	Y+2, r24	; 0x02
    load_t max_load;
    core_id_t object_core = (core_id_t)0; //процессор с максимальной нагрузкой, с которого эту нагрузку будем снимать
    core_id_t core = (core_id_t)1;
    max_load  = stat_calc_load( (prio_t)BITS_IN_INDEX_T, stat ); // максимальная нагрузка

    while( core < (core_id_t)MAX_CORES )
    2666:	8a 81       	ldd	r24, Y+2	; 0x02
    2668:	82 30       	cpi	r24, 0x02	; 2
    266a:	30 f3       	brcs	.-52     	; 0x2638 <sched_highest_load_core+0x28>
            object_core = core;
        }
        core++;
    }

    return object_core;
    266c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    266e:	26 96       	adiw	r28, 0x06	; 6
    2670:	0f b6       	in	r0, 0x3f	; 63
    2672:	f8 94       	cli
    2674:	de bf       	out	0x3e, r29	; 62
    2676:	0f be       	out	0x3f, r0	; 63
    2678:	cd bf       	out	0x3d, r28	; 61
    267a:	cf 91       	pop	r28
    267c:	df 91       	pop	r29
    267e:	08 95       	ret

00002680 <sched_init>:
#endif // CONFIG_MP
//========================================================================================
// Инициация
void sched_init(sched_t * sched, proc_t * idle)
{
    2680:	df 93       	push	r29
    2682:	cf 93       	push	r28
    2684:	00 d0       	rcall	.+0      	; 0x2686 <sched_init+0x6>
    2686:	00 d0       	rcall	.+0      	; 0x2688 <sched_init+0x8>
    2688:	00 d0       	rcall	.+0      	; 0x268a <sched_init+0xa>
    268a:	cd b7       	in	r28, 0x3d	; 61
    268c:	de b7       	in	r29, 0x3e	; 62
    268e:	9c 83       	std	Y+4, r25	; 0x04
    2690:	8b 83       	std	Y+3, r24	; 0x03
    2692:	7e 83       	std	Y+6, r23	; 0x06
    2694:	6d 83       	std	Y+5, r22	; 0x05
#ifdef CONFIG_MP
    lock_t * sched_lock;
    sched_lock = &sched->lock;
    2696:	8b 81       	ldd	r24, Y+3	; 0x03
    2698:	9c 81       	ldd	r25, Y+4	; 0x04
    269a:	8a 96       	adiw	r24, 0x2a	; 42
    269c:	9a 83       	std	Y+2, r25	; 0x02
    269e:	89 83       	std	Y+1, r24	; 0x01
    spin_init( sched_lock );
    26a0:	89 81       	ldd	r24, Y+1	; 0x01
    26a2:	9a 81       	ldd	r25, Y+2	; 0x02
    26a4:	0e 94 3c 01 	call	0x278	; 0x278 <spin_init>
    spin_lock( sched_lock );
    26a8:	89 81       	ldd	r24, Y+1	; 0x01
    26aa:	9a 81       	ldd	r25, Y+2	; 0x02
    26ac:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
#endif // CONFIG_MP
    sched->ready = (xlist_t *)sched->plst;
    26b0:	8b 81       	ldd	r24, Y+3	; 0x03
    26b2:	9c 81       	ldd	r25, Y+4	; 0x04
    26b4:	06 96       	adiw	r24, 0x06	; 6
    26b6:	eb 81       	ldd	r30, Y+3	; 0x03
    26b8:	fc 81       	ldd	r31, Y+4	; 0x04
    26ba:	93 83       	std	Z+3, r25	; 0x03
    26bc:	82 83       	std	Z+2, r24	; 0x02
    xlist_init( sched->ready );
    26be:	eb 81       	ldd	r30, Y+3	; 0x03
    26c0:	fc 81       	ldd	r31, Y+4	; 0x04
    26c2:	82 81       	ldd	r24, Z+2	; 0x02
    26c4:	93 81       	ldd	r25, Z+3	; 0x03
    26c6:	0e 94 30 1b 	call	0x3660	; 0x3660 <xlist_init>
    sched->expired = (xlist_t *)sched->plst + 1;
    26ca:	8b 81       	ldd	r24, Y+3	; 0x03
    26cc:	9c 81       	ldd	r25, Y+4	; 0x04
    26ce:	47 96       	adiw	r24, 0x17	; 23
    26d0:	eb 81       	ldd	r30, Y+3	; 0x03
    26d2:	fc 81       	ldd	r31, Y+4	; 0x04
    26d4:	95 83       	std	Z+5, r25	; 0x05
    26d6:	84 83       	std	Z+4, r24	; 0x04
    xlist_init( sched->expired );
    26d8:	eb 81       	ldd	r30, Y+3	; 0x03
    26da:	fc 81       	ldd	r31, Y+4	; 0x04
    26dc:	84 81       	ldd	r24, Z+4	; 0x04
    26de:	95 81       	ldd	r25, Z+5	; 0x05
    26e0:	0e 94 30 1b 	call	0x3660	; 0x3660 <xlist_init>
    pitem_insert( (pitem_t *)idle, sched->ready );
    26e4:	8d 81       	ldd	r24, Y+5	; 0x05
    26e6:	9e 81       	ldd	r25, Y+6	; 0x06
    26e8:	eb 81       	ldd	r30, Y+3	; 0x03
    26ea:	fc 81       	ldd	r31, Y+4	; 0x04
    26ec:	22 81       	ldd	r18, Z+2	; 0x02
    26ee:	33 81       	ldd	r19, Z+3	; 0x03
    26f0:	b9 01       	movw	r22, r18
    26f2:	0e 94 65 0d 	call	0x1aca	; 0x1aca <pitem_insert>
    sched->current_proc = idle;
    26f6:	eb 81       	ldd	r30, Y+3	; 0x03
    26f8:	fc 81       	ldd	r31, Y+4	; 0x04
    26fa:	8d 81       	ldd	r24, Y+5	; 0x05
    26fc:	9e 81       	ldd	r25, Y+6	; 0x06
    26fe:	91 83       	std	Z+1, r25	; 0x01
    2700:	80 83       	st	Z, r24
    sched->nested_crit_sec = (count_t)0;//вообще это выполняется при запрещенных прерываниях, но не известно, на этом ли процессоре
    2702:	eb 81       	ldd	r30, Y+3	; 0x03
    2704:	fc 81       	ldd	r31, Y+4	; 0x04
    2706:	11 a6       	std	Z+41, r1	; 0x29
    2708:	10 a6       	std	Z+40, r1	; 0x28
#ifdef CONFIG_MP
    spin_unlock( sched_lock );
    270a:	89 81       	ldd	r24, Y+1	; 0x01
    270c:	9a 81       	ldd	r25, Y+2	; 0x02
    270e:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
    stat_inc( idle, (stat_t *)kernel.stat + idle->core_id );
    2712:	ed 81       	ldd	r30, Y+5	; 0x05
    2714:	fe 81       	ldd	r31, Y+6	; 0x06
    2716:	81 a1       	ldd	r24, Z+33	; 0x21
    2718:	88 2f       	mov	r24, r24
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	9c 01       	movw	r18, r24
    271e:	2f 5f       	subi	r18, 0xFF	; 255
    2720:	3c 4f       	sbci	r19, 0xFC	; 252
    2722:	8d 81       	ldd	r24, Y+5	; 0x05
    2724:	9e 81       	ldd	r25, Y+6	; 0x06
    2726:	b9 01       	movw	r22, r18
    2728:	0e 94 98 01 	call	0x330	; 0x330 <stat_inc>
#endif // CONFIG_MP
}
    272c:	26 96       	adiw	r28, 0x06	; 6
    272e:	0f b6       	in	r0, 0x3f	; 63
    2730:	f8 94       	cli
    2732:	de bf       	out	0x3e, r29	; 62
    2734:	0f be       	out	0x3f, r0	; 63
    2736:	cd bf       	out	0x3d, r28	; 61
    2738:	cf 91       	pop	r28
    273a:	df 91       	pop	r29
    273c:	08 95       	ret

0000273e <_sched_switch_current>:
static void _sched_switch_current( sched_t * sched, proc_t ** current_proc )
{
    273e:	df 93       	push	r29
    2740:	cf 93       	push	r28
    2742:	00 d0       	rcall	.+0      	; 0x2744 <_sched_switch_current+0x6>
    2744:	00 d0       	rcall	.+0      	; 0x2746 <_sched_switch_current+0x8>
    2746:	00 d0       	rcall	.+0      	; 0x2748 <_sched_switch_current+0xa>
    2748:	cd b7       	in	r28, 0x3d	; 61
    274a:	de b7       	in	r29, 0x3e	; 62
    274c:	9c 83       	std	Y+4, r25	; 0x04
    274e:	8b 83       	std	Y+3, r24	; 0x03
    2750:	7e 83       	std	Y+6, r23	; 0x06
    2752:	6d 83       	std	Y+5, r22	; 0x05

    SPIN_LOCK( sched );
    2754:	8b 81       	ldd	r24, Y+3	; 0x03
    2756:	9c 81       	ldd	r25, Y+4	; 0x04
    2758:	8a 96       	adiw	r24, 0x2a	; 42
    275a:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
    // Если список ready опустел, - переключаем списки
    if( sched->ready->index == (index_t)0 )
    275e:	eb 81       	ldd	r30, Y+3	; 0x03
    2760:	fc 81       	ldd	r31, Y+4	; 0x04
    2762:	02 80       	ldd	r0, Z+2	; 0x02
    2764:	f3 81       	ldd	r31, Z+3	; 0x03
    2766:	e0 2d       	mov	r30, r0
    2768:	80 89       	ldd	r24, Z+16	; 0x10
    276a:	88 23       	and	r24, r24
    276c:	a1 f4       	brne	.+40     	; 0x2796 <_sched_switch_current+0x58>
    {
        xlist_t * buf;
        buf = sched->ready;
    276e:	eb 81       	ldd	r30, Y+3	; 0x03
    2770:	fc 81       	ldd	r31, Y+4	; 0x04
    2772:	82 81       	ldd	r24, Z+2	; 0x02
    2774:	93 81       	ldd	r25, Z+3	; 0x03
    2776:	9a 83       	std	Y+2, r25	; 0x02
    2778:	89 83       	std	Y+1, r24	; 0x01
        sched->ready = sched->expired;
    277a:	eb 81       	ldd	r30, Y+3	; 0x03
    277c:	fc 81       	ldd	r31, Y+4	; 0x04
    277e:	84 81       	ldd	r24, Z+4	; 0x04
    2780:	95 81       	ldd	r25, Z+5	; 0x05
    2782:	eb 81       	ldd	r30, Y+3	; 0x03
    2784:	fc 81       	ldd	r31, Y+4	; 0x04
    2786:	93 83       	std	Z+3, r25	; 0x03
    2788:	82 83       	std	Z+2, r24	; 0x02
        sched->expired = buf;
    278a:	eb 81       	ldd	r30, Y+3	; 0x03
    278c:	fc 81       	ldd	r31, Y+4	; 0x04
    278e:	89 81       	ldd	r24, Y+1	; 0x01
    2790:	9a 81       	ldd	r25, Y+2	; 0x02
    2792:	95 83       	std	Z+5, r25	; 0x05
    2794:	84 83       	std	Z+4, r24	; 0x04
    }
    // Изменять указатель будем при захваченной блокировке,
    // чтобы процессы на других процессорах не прочитали неизвестно что.
    sched->current_proc = (proc_t *)xlist_head( sched->ready ); // Вытесняющая многозадачность же!
    2796:	eb 81       	ldd	r30, Y+3	; 0x03
    2798:	fc 81       	ldd	r31, Y+4	; 0x04
    279a:	82 81       	ldd	r24, Z+2	; 0x02
    279c:	93 81       	ldd	r25, Z+3	; 0x03
    279e:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xlist_head>
    27a2:	eb 81       	ldd	r30, Y+3	; 0x03
    27a4:	fc 81       	ldd	r31, Y+4	; 0x04
    27a6:	91 83       	std	Z+1, r25	; 0x01
    27a8:	80 83       	st	Z, r24
    *current_proc = sched->current_proc;
    27aa:	eb 81       	ldd	r30, Y+3	; 0x03
    27ac:	fc 81       	ldd	r31, Y+4	; 0x04
    27ae:	80 81       	ld	r24, Z
    27b0:	91 81       	ldd	r25, Z+1	; 0x01
    27b2:	ed 81       	ldd	r30, Y+5	; 0x05
    27b4:	fe 81       	ldd	r31, Y+6	; 0x06
    27b6:	91 83       	std	Z+1, r25	; 0x01
    27b8:	80 83       	st	Z, r24

    SPIN_UNLOCK( sched );
    27ba:	8b 81       	ldd	r24, Y+3	; 0x03
    27bc:	9c 81       	ldd	r25, Y+4	; 0x04
    27be:	8a 96       	adiw	r24, 0x2a	; 42
    27c0:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
}
    27c4:	26 96       	adiw	r28, 0x06	; 6
    27c6:	0f b6       	in	r0, 0x3f	; 63
    27c8:	f8 94       	cli
    27ca:	de bf       	out	0x3e, r29	; 62
    27cc:	0f be       	out	0x3f, r0	; 63
    27ce:	cd bf       	out	0x3d, r28	; 61
    27d0:	cf 91       	pop	r28
    27d2:	df 91       	pop	r29
    27d4:	08 95       	ret

000027d6 <sched_schedule>:
2) В качестве аргумента передаем только тот объект, который управляет процессами
на исполняющем функции процессоре.
******************************************************************************************/
// Функция планирования, переключает процессы в обработчике системмного таймера
void sched_schedule(void)
{
    27d6:	df 93       	push	r29
    27d8:	cf 93       	push	r28
    27da:	00 d0       	rcall	.+0      	; 0x27dc <sched_schedule+0x6>
    27dc:	00 d0       	rcall	.+0      	; 0x27de <sched_schedule+0x8>
    27de:	00 d0       	rcall	.+0      	; 0x27e0 <sched_schedule+0xa>
    27e0:	cd b7       	in	r28, 0x3d	; 61
    27e2:	de b7       	in	r29, 0x3e	; 62
    proc_t * current_proc;
    sched_t * sched;
    sched = _SCHED_INIT();
    27e4:	0e 94 2d 01 	call	0x25a	; 0x25a <current_core>
    27e8:	28 2f       	mov	r18, r24
    27ea:	30 e0       	ldi	r19, 0x00	; 0
    27ec:	8b e2       	ldi	r24, 0x2B	; 43
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	ac 01       	movw	r20, r24
    27f2:	24 9f       	mul	r18, r20
    27f4:	c0 01       	movw	r24, r0
    27f6:	25 9f       	mul	r18, r21
    27f8:	90 0d       	add	r25, r0
    27fa:	34 9f       	mul	r19, r20
    27fc:	90 0d       	add	r25, r0
    27fe:	11 24       	eor	r1, r1
    2800:	85 5b       	subi	r24, 0xB5	; 181
    2802:	9d 4f       	sbci	r25, 0xFD	; 253
    2804:	9c 83       	std	Y+4, r25	; 0x04
    2806:	8b 83       	std	Y+3, r24	; 0x03
    // Меняем только с локального процессора, блокировку sched->lock можно не захватывать!
    current_proc = sched->current_proc;
    2808:	eb 81       	ldd	r30, Y+3	; 0x03
    280a:	fc 81       	ldd	r31, Y+4	; 0x04
    280c:	80 81       	ld	r24, Z
    280e:	91 81       	ldd	r25, Z+1	; 0x01
    2810:	9e 83       	std	Y+6, r25	; 0x06
    2812:	8d 83       	std	Y+5, r24	; 0x05
    // А вот эту блокировку обязательно надо захватить!
    SPIN_LOCK( current_proc );
    2814:	8d 81       	ldd	r24, Y+5	; 0x05
    2816:	9e 81       	ldd	r25, Y+6	; 0x06
    2818:	83 96       	adiw	r24, 0x23	; 35
    281a:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
    // Хук "сохранение контекста"
    if( current_proc->sv_hook )current_proc->sv_hook( current_proc->arg );
    281e:	ed 81       	ldd	r30, Y+5	; 0x05
    2820:	fe 81       	ldd	r31, Y+6	; 0x06
    2822:	86 a1       	ldd	r24, Z+38	; 0x26
    2824:	97 a1       	ldd	r25, Z+39	; 0x27
    2826:	00 97       	sbiw	r24, 0x00	; 0
    2828:	51 f0       	breq	.+20     	; 0x283e <sched_schedule+0x68>
    282a:	ed 81       	ldd	r30, Y+5	; 0x05
    282c:	fe 81       	ldd	r31, Y+6	; 0x06
    282e:	26 a1       	ldd	r18, Z+38	; 0x26
    2830:	37 a1       	ldd	r19, Z+39	; 0x27
    2832:	ed 81       	ldd	r30, Y+5	; 0x05
    2834:	fe 81       	ldd	r31, Y+6	; 0x06
    2836:	82 a5       	ldd	r24, Z+42	; 0x2a
    2838:	93 a5       	ldd	r25, Z+43	; 0x2b
    283a:	f9 01       	movw	r30, r18
    283c:	09 95       	icall
    // Проверяем, что процесс находится в списке ready
    if( (xlist_t *)((pitem_t *)current_proc)->list == sched->ready )
    283e:	8d 81       	ldd	r24, Y+5	; 0x05
    2840:	9e 81       	ldd	r25, Y+6	; 0x06
    2842:	fc 01       	movw	r30, r24
    2844:	24 81       	ldd	r18, Z+4	; 0x04
    2846:	35 81       	ldd	r19, Z+5	; 0x05
    2848:	eb 81       	ldd	r30, Y+3	; 0x03
    284a:	fc 81       	ldd	r31, Y+4	; 0x04
    284c:	82 81       	ldd	r24, Z+2	; 0x02
    284e:	93 81       	ldd	r25, Z+3	; 0x03
    2850:	28 17       	cp	r18, r24
    2852:	39 07       	cpc	r19, r25
    2854:	09 f0       	breq	.+2      	; 0x2858 <sched_schedule+0x82>
    2856:	94 c0       	rjmp	.+296    	; 0x2980 <sched_schedule+0x1aa>
    {
        // Переключаем cписок на следующий за текущим процесс
        SPIN_LOCK( sched );
    2858:	8b 81       	ldd	r24, Y+3	; 0x03
    285a:	9c 81       	ldd	r25, Y+4	; 0x04
    285c:	8a 96       	adiw	r24, 0x2a	; 42
    285e:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>

        xlist_switch( sched->ready, ((pitem_t *)current_proc)->prio );
    2862:	eb 81       	ldd	r30, Y+3	; 0x03
    2864:	fc 81       	ldd	r31, Y+4	; 0x04
    2866:	22 81       	ldd	r18, Z+2	; 0x02
    2868:	33 81       	ldd	r19, Z+3	; 0x03
    286a:	8d 81       	ldd	r24, Y+5	; 0x05
    286c:	9e 81       	ldd	r25, Y+6	; 0x06
    286e:	fc 01       	movw	r30, r24
    2870:	46 81       	ldd	r20, Z+6	; 0x06
    2872:	c9 01       	movw	r24, r18
    2874:	64 2f       	mov	r22, r20
    2876:	0e 94 86 1b 	call	0x370c	; 0x370c <xlist_switch>

        SPIN_UNLOCK( sched );
    287a:	8b 81       	ldd	r24, Y+3	; 0x03
    287c:	9c 81       	ldd	r25, Y+4	; 0x04
    287e:	8a 96       	adiw	r24, 0x2a	; 42
    2880:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
        //Проверяем, не истек ли квант времени процесса
        if( current_proc->timer > (timer_t)1 )current_proc->timer--;// Не истек, уменьшаем таймер
    2884:	ed 81       	ldd	r30, Y+5	; 0x05
    2886:	fe 81       	ldd	r31, Y+6	; 0x06
    2888:	85 8d       	ldd	r24, Z+29	; 0x1d
    288a:	96 8d       	ldd	r25, Z+30	; 0x1e
    288c:	82 30       	cpi	r24, 0x02	; 2
    288e:	91 05       	cpc	r25, r1
    2890:	40 f0       	brcs	.+16     	; 0x28a2 <sched_schedule+0xcc>
    2892:	ed 81       	ldd	r30, Y+5	; 0x05
    2894:	fe 81       	ldd	r31, Y+6	; 0x06
    2896:	85 8d       	ldd	r24, Z+29	; 0x1d
    2898:	96 8d       	ldd	r25, Z+30	; 0x1e
    289a:	01 97       	sbiw	r24, 0x01	; 1
    289c:	96 8f       	std	Z+30, r25	; 0x1e
    289e:	85 8f       	std	Z+29, r24	; 0x1d
    28a0:	6f c0       	rjmp	.+222    	; 0x2980 <sched_schedule+0x1aa>
        else
        {
            flag_t flags;
            // Истек, вырезаем процесс из списка
            SPIN_LOCK( sched );
    28a2:	8b 81       	ldd	r24, Y+3	; 0x03
    28a4:	9c 81       	ldd	r25, Y+4	; 0x04
    28a6:	8a 96       	adiw	r24, 0x2a	; 42
    28a8:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>

            pitem_fast_cut( (pitem_t *)current_proc );
    28ac:	8d 81       	ldd	r24, Y+5	; 0x05
    28ae:	9e 81       	ldd	r25, Y+6	; 0x06
    28b0:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <pitem_fast_cut>

            SPIN_UNLOCK( sched );
    28b4:	8b 81       	ldd	r24, Y+3	; 0x03
    28b6:	9c 81       	ldd	r25, Y+4	; 0x04
    28b8:	8a 96       	adiw	r24, 0x2a	; 42
    28ba:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
            spin_lock( &kernel.stat_lock );
            // Обновили статистику после удаления процесса из списка ready
            stat_dec( current_proc, (stat_t *)kernel.stat + current_proc->core_id );
#endif // CONFIG_USE_ALB
            // А что за процесс собственно?
            flags = current_proc->flags;
    28be:	ed 81       	ldd	r30, Y+5	; 0x05
    28c0:	fe 81       	ldd	r31, Y+6	; 0x06
    28c2:	87 81       	ldd	r24, Z+7	; 0x07
    28c4:	90 85       	ldd	r25, Z+8	; 0x08
    28c6:	9a 83       	std	Y+2, r25	; 0x02
    28c8:	89 83       	std	Y+1, r24	; 0x01
            if(
    28ca:	89 81       	ldd	r24, Y+1	; 0x01
    28cc:	9a 81       	ldd	r25, Y+2	; 0x02
    28ce:	81 70       	andi	r24, 0x01	; 1
    28d0:	90 70       	andi	r25, 0x00	; 0
    28d2:	00 97       	sbiw	r24, 0x00	; 0
    28d4:	31 f0       	breq	.+12     	; 0x28e2 <sched_schedule+0x10c>
    28d6:	89 81       	ldd	r24, Y+1	; 0x01
    28d8:	9a 81       	ldd	r25, Y+2	; 0x02
    28da:	8c 70       	andi	r24, 0x0C	; 12
    28dc:	90 70       	andi	r25, 0x00	; 0
    28de:	00 97       	sbiw	r24, 0x00	; 0
    28e0:	f1 f0       	breq	.+60     	; 0x291e <sched_schedule+0x148>
                SPIN_LOCK( new_sched );
                pitem_insert( (pitem_t *)current_proc, new_sched->expired );
                SPIN_UNLOCK( new_sched );
#else // CONFIG_MP CONFIG_USE_ALB
                // Тупо переносим процесс в список expired
                SPIN_LOCK( sched );
    28e2:	8b 81       	ldd	r24, Y+3	; 0x03
    28e4:	9c 81       	ldd	r25, Y+4	; 0x04
    28e6:	8a 96       	adiw	r24, 0x2a	; 42
    28e8:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>

                pitem_insert( (pitem_t *)current_proc, sched->expired );
    28ec:	8d 81       	ldd	r24, Y+5	; 0x05
    28ee:	9e 81       	ldd	r25, Y+6	; 0x06
    28f0:	eb 81       	ldd	r30, Y+3	; 0x03
    28f2:	fc 81       	ldd	r31, Y+4	; 0x04
    28f4:	24 81       	ldd	r18, Z+4	; 0x04
    28f6:	35 81       	ldd	r19, Z+5	; 0x05
    28f8:	b9 01       	movw	r22, r18
    28fa:	0e 94 65 0d 	call	0x1aca	; 0x1aca <pitem_insert>

                SPIN_UNLOCK( sched );
    28fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2900:	9c 81       	ldd	r25, Y+4	; 0x04
    2902:	8a 96       	adiw	r24, 0x2a	; 42
    2904:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>

#endif // CONFIG_MP CONFIG_USE_ALB
                current_proc->timer = current_proc->time_quant; // Сбросили таймер!
    2908:	ad 81       	ldd	r26, Y+5	; 0x05
    290a:	be 81       	ldd	r27, Y+6	; 0x06
    290c:	ed 81       	ldd	r30, Y+5	; 0x05
    290e:	fe 81       	ldd	r31, Y+6	; 0x06
    2910:	83 8d       	ldd	r24, Z+27	; 0x1b
    2912:	94 8d       	ldd	r25, Z+28	; 0x1c
    2914:	5e 96       	adiw	r26, 0x1e	; 30
    2916:	9c 93       	st	X, r25
    2918:	8e 93       	st	-X, r24
    291a:	5d 97       	sbiw	r26, 0x1d	; 29
    291c:	31 c0       	rjmp	.+98     	; 0x2980 <sched_schedule+0x1aa>
                /*********************************************************
                Если не используется активная схема балансировки нагрузки,
                то захват нужно делать тут, блокировка захватывается только
                в этой ветви оператора if.
                *********************************************************/
                spin_lock( &kernel.stat_lock );
    291e:	83 e0       	ldi	r24, 0x03	; 3
    2920:	93 e0       	ldi	r25, 0x03	; 3
    2922:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
                stat_dec( current_proc, (stat_t *)kernel.stat + current_proc->core_id );
    2926:	4d 81       	ldd	r20, Y+5	; 0x05
    2928:	5e 81       	ldd	r21, Y+6	; 0x06
    292a:	ed 81       	ldd	r30, Y+5	; 0x05
    292c:	fe 81       	ldd	r31, Y+6	; 0x06
    292e:	81 a1       	ldd	r24, Z+33	; 0x21
    2930:	88 2f       	mov	r24, r24
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	9c 01       	movw	r18, r24
    2936:	2f 5f       	subi	r18, 0xFF	; 255
    2938:	3c 4f       	sbci	r19, 0xFC	; 252
    293a:	ca 01       	movw	r24, r20
    293c:	b9 01       	movw	r22, r18
    293e:	0e 94 82 01 	call	0x304	; 0x304 <stat_dec>
                 - если используется активная схема балансировки нагрузки,
                то блокировка была захвачена до входа в if;
                 - если не используется активная схема балансировки нагрузки,
                то блокировка была захвачена в этой ветви if.
                *********************************************************/
                spin_unlock( &kernel.stat_lock );
    2942:	83 e0       	ldi	r24, 0x03	; 3
    2944:	93 e0       	ldi	r25, 0x03	; 3
    2946:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
#endif // CONFIG_MP
                ((pitem_t *)current_proc)->list = (xlist_t *)0;// Просто вырезали из списка, как в pitem_cut
    294a:	8d 81       	ldd	r24, Y+5	; 0x05
    294c:	9e 81       	ldd	r25, Y+6	; 0x06
    294e:	fc 01       	movw	r30, r24
    2950:	15 82       	std	Z+5, r1	; 0x05
    2952:	14 82       	std	Z+4, r1	; 0x04
                current_proc->flags |= PROC_FLG_WD_STOP;//Остановлен по WD
    2954:	ad 81       	ldd	r26, Y+5	; 0x05
    2956:	be 81       	ldd	r27, Y+6	; 0x06
    2958:	ed 81       	ldd	r30, Y+5	; 0x05
    295a:	fe 81       	ldd	r31, Y+6	; 0x06
    295c:	87 81       	ldd	r24, Z+7	; 0x07
    295e:	90 85       	ldd	r25, Z+8	; 0x08
    2960:	92 60       	ori	r25, 0x02	; 2
    2962:	18 96       	adiw	r26, 0x08	; 8
    2964:	9c 93       	st	X, r25
    2966:	8e 93       	st	-X, r24
    2968:	17 97       	sbiw	r26, 0x07	; 7
                current_proc->flags &= ~PROC_FLG_RUN;
    296a:	ad 81       	ldd	r26, Y+5	; 0x05
    296c:	be 81       	ldd	r27, Y+6	; 0x06
    296e:	ed 81       	ldd	r30, Y+5	; 0x05
    2970:	fe 81       	ldd	r31, Y+6	; 0x06
    2972:	87 81       	ldd	r24, Z+7	; 0x07
    2974:	90 85       	ldd	r25, Z+8	; 0x08
    2976:	8d 7f       	andi	r24, 0xFD	; 253
    2978:	18 96       	adiw	r26, 0x08	; 8
    297a:	9c 93       	st	X, r25
    297c:	8e 93       	st	-X, r24
    297e:	17 97       	sbiw	r26, 0x07	; 7
            }
        }
    }
    //Текущий процесс более не нужен, освобождаем его блокировку
    SPIN_UNLOCK( current_proc );
    2980:	8d 81       	ldd	r24, Y+5	; 0x05
    2982:	9e 81       	ldd	r25, Y+6	; 0x06
    2984:	83 96       	adiw	r24, 0x23	; 35
    2986:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>

    _sched_switch_current( sched, &current_proc );
    298a:	8b 81       	ldd	r24, Y+3	; 0x03
    298c:	9c 81       	ldd	r25, Y+4	; 0x04
    298e:	9e 01       	movw	r18, r28
    2990:	2b 5f       	subi	r18, 0xFB	; 251
    2992:	3f 4f       	sbci	r19, 0xFF	; 255
    2994:	b9 01       	movw	r22, r18
    2996:	0e 94 9f 13 	call	0x273e	; 0x273e <_sched_switch_current>

    SPIN_LOCK( current_proc );
    299a:	8d 81       	ldd	r24, Y+5	; 0x05
    299c:	9e 81       	ldd	r25, Y+6	; 0x06
    299e:	83 96       	adiw	r24, 0x23	; 35
    29a0:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
    //Хук "восстановление контекста"
    if( current_proc->rs_hook )current_proc->rs_hook( current_proc->arg );
    29a4:	ed 81       	ldd	r30, Y+5	; 0x05
    29a6:	fe 81       	ldd	r31, Y+6	; 0x06
    29a8:	80 a5       	ldd	r24, Z+40	; 0x28
    29aa:	91 a5       	ldd	r25, Z+41	; 0x29
    29ac:	00 97       	sbiw	r24, 0x00	; 0
    29ae:	51 f0       	breq	.+20     	; 0x29c4 <sched_schedule+0x1ee>
    29b0:	ed 81       	ldd	r30, Y+5	; 0x05
    29b2:	fe 81       	ldd	r31, Y+6	; 0x06
    29b4:	20 a5       	ldd	r18, Z+40	; 0x28
    29b6:	31 a5       	ldd	r19, Z+41	; 0x29
    29b8:	ed 81       	ldd	r30, Y+5	; 0x05
    29ba:	fe 81       	ldd	r31, Y+6	; 0x06
    29bc:	82 a5       	ldd	r24, Z+42	; 0x2a
    29be:	93 a5       	ldd	r25, Z+43	; 0x2b
    29c0:	f9 01       	movw	r30, r18
    29c2:	09 95       	icall

    SPIN_UNLOCK( current_proc );
    29c4:	8d 81       	ldd	r24, Y+5	; 0x05
    29c6:	9e 81       	ldd	r25, Y+6	; 0x06
    29c8:	83 96       	adiw	r24, 0x23	; 35
    29ca:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
}
    29ce:	26 96       	adiw	r28, 0x06	; 6
    29d0:	0f b6       	in	r0, 0x3f	; 63
    29d2:	f8 94       	cli
    29d4:	de bf       	out	0x3e, r29	; 62
    29d6:	0f be       	out	0x3f, r0	; 63
    29d8:	cd bf       	out	0x3d, r28	; 61
    29da:	cf 91       	pop	r28
    29dc:	df 91       	pop	r29
    29de:	08 95       	ret

000029e0 <sched_reschedule>:
//----------------------------------------------------------------------------------------
// Функция перепланирования, переключает процессы в обработчике прерывания resched
void sched_reschedule(void)
{
    29e0:	df 93       	push	r29
    29e2:	cf 93       	push	r28
    29e4:	00 d0       	rcall	.+0      	; 0x29e6 <sched_reschedule+0x6>
    29e6:	00 d0       	rcall	.+0      	; 0x29e8 <sched_reschedule+0x8>
    29e8:	cd b7       	in	r28, 0x3d	; 61
    29ea:	de b7       	in	r29, 0x3e	; 62
    proc_t * current_proc;
    sched_t * sched;
    sched = _SCHED_INIT();
    29ec:	0e 94 2d 01 	call	0x25a	; 0x25a <current_core>
    29f0:	28 2f       	mov	r18, r24
    29f2:	30 e0       	ldi	r19, 0x00	; 0
    29f4:	8b e2       	ldi	r24, 0x2B	; 43
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	ac 01       	movw	r20, r24
    29fa:	24 9f       	mul	r18, r20
    29fc:	c0 01       	movw	r24, r0
    29fe:	25 9f       	mul	r18, r21
    2a00:	90 0d       	add	r25, r0
    2a02:	34 9f       	mul	r19, r20
    2a04:	90 0d       	add	r25, r0
    2a06:	11 24       	eor	r1, r1
    2a08:	85 5b       	subi	r24, 0xB5	; 181
    2a0a:	9d 4f       	sbci	r25, 0xFD	; 253
    2a0c:	9a 83       	std	Y+2, r25	; 0x02
    2a0e:	89 83       	std	Y+1, r24	; 0x01
    // Меняем только с локального процессора, блокировку sched->lock можно не захватывать!
    current_proc = sched->current_proc;
    2a10:	e9 81       	ldd	r30, Y+1	; 0x01
    2a12:	fa 81       	ldd	r31, Y+2	; 0x02
    2a14:	80 81       	ld	r24, Z
    2a16:	91 81       	ldd	r25, Z+1	; 0x01
    2a18:	9c 83       	std	Y+4, r25	; 0x04
    2a1a:	8b 83       	std	Y+3, r24	; 0x03
    // А вот эту блокировку обязательно надо захватить!
    SPIN_LOCK( current_proc );
    2a1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a1e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a20:	83 96       	adiw	r24, 0x23	; 35
    2a22:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
    // Хук "сохранение контекста"
    if( current_proc->sv_hook )current_proc->sv_hook( current_proc->arg );
    2a26:	eb 81       	ldd	r30, Y+3	; 0x03
    2a28:	fc 81       	ldd	r31, Y+4	; 0x04
    2a2a:	86 a1       	ldd	r24, Z+38	; 0x26
    2a2c:	97 a1       	ldd	r25, Z+39	; 0x27
    2a2e:	00 97       	sbiw	r24, 0x00	; 0
    2a30:	51 f0       	breq	.+20     	; 0x2a46 <sched_reschedule+0x66>
    2a32:	eb 81       	ldd	r30, Y+3	; 0x03
    2a34:	fc 81       	ldd	r31, Y+4	; 0x04
    2a36:	26 a1       	ldd	r18, Z+38	; 0x26
    2a38:	37 a1       	ldd	r19, Z+39	; 0x27
    2a3a:	eb 81       	ldd	r30, Y+3	; 0x03
    2a3c:	fc 81       	ldd	r31, Y+4	; 0x04
    2a3e:	82 a5       	ldd	r24, Z+42	; 0x2a
    2a40:	93 a5       	ldd	r25, Z+43	; 0x2b
    2a42:	f9 01       	movw	r30, r18
    2a44:	09 95       	icall

    SPIN_UNLOCK( current_proc );
    2a46:	8b 81       	ldd	r24, Y+3	; 0x03
    2a48:	9c 81       	ldd	r25, Y+4	; 0x04
    2a4a:	83 96       	adiw	r24, 0x23	; 35
    2a4c:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>

    _sched_switch_current( sched, &current_proc );
    2a50:	89 81       	ldd	r24, Y+1	; 0x01
    2a52:	9a 81       	ldd	r25, Y+2	; 0x02
    2a54:	9e 01       	movw	r18, r28
    2a56:	2d 5f       	subi	r18, 0xFD	; 253
    2a58:	3f 4f       	sbci	r19, 0xFF	; 255
    2a5a:	b9 01       	movw	r22, r18
    2a5c:	0e 94 9f 13 	call	0x273e	; 0x273e <_sched_switch_current>

    SPIN_LOCK( current_proc );
    2a60:	8b 81       	ldd	r24, Y+3	; 0x03
    2a62:	9c 81       	ldd	r25, Y+4	; 0x04
    2a64:	83 96       	adiw	r24, 0x23	; 35
    2a66:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
    //Хук "восстановление контекста"
    if( current_proc->rs_hook )current_proc->rs_hook( current_proc->arg );
    2a6a:	eb 81       	ldd	r30, Y+3	; 0x03
    2a6c:	fc 81       	ldd	r31, Y+4	; 0x04
    2a6e:	80 a5       	ldd	r24, Z+40	; 0x28
    2a70:	91 a5       	ldd	r25, Z+41	; 0x29
    2a72:	00 97       	sbiw	r24, 0x00	; 0
    2a74:	51 f0       	breq	.+20     	; 0x2a8a <sched_reschedule+0xaa>
    2a76:	eb 81       	ldd	r30, Y+3	; 0x03
    2a78:	fc 81       	ldd	r31, Y+4	; 0x04
    2a7a:	20 a5       	ldd	r18, Z+40	; 0x28
    2a7c:	31 a5       	ldd	r19, Z+41	; 0x29
    2a7e:	eb 81       	ldd	r30, Y+3	; 0x03
    2a80:	fc 81       	ldd	r31, Y+4	; 0x04
    2a82:	82 a5       	ldd	r24, Z+42	; 0x2a
    2a84:	93 a5       	ldd	r25, Z+43	; 0x2b
    2a86:	f9 01       	movw	r30, r18
    2a88:	09 95       	icall

    SPIN_UNLOCK( current_proc );
    2a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a8c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a8e:	83 96       	adiw	r24, 0x23	; 35
    2a90:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
}
    2a94:	0f 90       	pop	r0
    2a96:	0f 90       	pop	r0
    2a98:	0f 90       	pop	r0
    2a9a:	0f 90       	pop	r0
    2a9c:	cf 91       	pop	r28
    2a9e:	df 91       	pop	r29
    2aa0:	08 95       	ret

00002aa2 <sem_init_isr>:
*****************************************************************************************/
#include "../include/bugurt.h"

// Инициализация
void sem_init_isr( sem_t * sem, count_t count )
{
    2aa2:	df 93       	push	r29
    2aa4:	cf 93       	push	r28
    2aa6:	00 d0       	rcall	.+0      	; 0x2aa8 <sem_init_isr+0x6>
    2aa8:	00 d0       	rcall	.+0      	; 0x2aaa <sem_init_isr+0x8>
    2aaa:	cd b7       	in	r28, 0x3d	; 61
    2aac:	de b7       	in	r29, 0x3e	; 62
    2aae:	9a 83       	std	Y+2, r25	; 0x02
    2ab0:	89 83       	std	Y+1, r24	; 0x01
    2ab2:	7c 83       	std	Y+4, r23	; 0x04
    2ab4:	6b 83       	std	Y+3, r22	; 0x03
    SPIN_INIT( sem );
    2ab6:	89 81       	ldd	r24, Y+1	; 0x01
    2ab8:	9a 81       	ldd	r25, Y+2	; 0x02
    2aba:	43 96       	adiw	r24, 0x13	; 19
    2abc:	0e 94 3c 01 	call	0x278	; 0x278 <spin_init>
    SPIN_LOCK( sem );
    2ac0:	89 81       	ldd	r24, Y+1	; 0x01
    2ac2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ac4:	43 96       	adiw	r24, 0x13	; 19
    2ac6:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>

    xlist_init( (xlist_t *)sem );
    2aca:	89 81       	ldd	r24, Y+1	; 0x01
    2acc:	9a 81       	ldd	r25, Y+2	; 0x02
    2ace:	0e 94 30 1b 	call	0x3660	; 0x3660 <xlist_init>
    sem->counter = count;
    2ad2:	e9 81       	ldd	r30, Y+1	; 0x01
    2ad4:	fa 81       	ldd	r31, Y+2	; 0x02
    2ad6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad8:	9c 81       	ldd	r25, Y+4	; 0x04
    2ada:	92 8b       	std	Z+18, r25	; 0x12
    2adc:	81 8b       	std	Z+17, r24	; 0x11
    SPIN_UNLOCK( sem );
    2ade:	89 81       	ldd	r24, Y+1	; 0x01
    2ae0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ae2:	43 96       	adiw	r24, 0x13	; 19
    2ae4:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
}
    2ae8:	0f 90       	pop	r0
    2aea:	0f 90       	pop	r0
    2aec:	0f 90       	pop	r0
    2aee:	0f 90       	pop	r0
    2af0:	cf 91       	pop	r28
    2af2:	df 91       	pop	r29
    2af4:	08 95       	ret

00002af6 <_sem_lock>:

bool_t _sem_lock( sem_t * sem )
{
    2af6:	df 93       	push	r29
    2af8:	cf 93       	push	r28
    2afa:	00 d0       	rcall	.+0      	; 0x2afc <_sem_lock+0x6>
    2afc:	00 d0       	rcall	.+0      	; 0x2afe <_sem_lock+0x8>
    2afe:	0f 92       	push	r0
    2b00:	cd b7       	in	r28, 0x3d	; 61
    2b02:	de b7       	in	r29, 0x3e	; 62
    2b04:	9d 83       	std	Y+5, r25	; 0x05
    2b06:	8c 83       	std	Y+4, r24	; 0x04
    bool_t ret = (bool_t)0;
    2b08:	1b 82       	std	Y+3, r1	; 0x03
    proc_t * proc;
    proc = current_proc();
    2b0a:	0e 94 0a 01 	call	0x214	; 0x214 <current_proc>
    2b0e:	9a 83       	std	Y+2, r25	; 0x02
    2b10:	89 83       	std	Y+1, r24	; 0x01
    // Выставляем флаг захватат семафора
    SPIN_LOCK( proc );
    2b12:	89 81       	ldd	r24, Y+1	; 0x01
    2b14:	9a 81       	ldd	r25, Y+2	; 0x02
    2b16:	83 96       	adiw	r24, 0x23	; 35
    2b18:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
    proc->flags |= PROC_FLG_SEM;
    2b1c:	e9 81       	ldd	r30, Y+1	; 0x01
    2b1e:	fa 81       	ldd	r31, Y+2	; 0x02
    2b20:	87 81       	ldd	r24, Z+7	; 0x07
    2b22:	90 85       	ldd	r25, Z+8	; 0x08
    2b24:	88 60       	ori	r24, 0x08	; 8
    2b26:	e9 81       	ldd	r30, Y+1	; 0x01
    2b28:	fa 81       	ldd	r31, Y+2	; 0x02
    2b2a:	90 87       	std	Z+8, r25	; 0x08
    2b2c:	87 83       	std	Z+7, r24	; 0x07
    SPIN_UNLOCK( proc );
    2b2e:	89 81       	ldd	r24, Y+1	; 0x01
    2b30:	9a 81       	ldd	r25, Y+2	; 0x02
    2b32:	83 96       	adiw	r24, 0x23	; 35
    2b34:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
    // Собственно захват семафора
    SPIN_LOCK( sem );
    2b38:	8c 81       	ldd	r24, Y+4	; 0x04
    2b3a:	9d 81       	ldd	r25, Y+5	; 0x05
    2b3c:	43 96       	adiw	r24, 0x13	; 19
    2b3e:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
    if( sem->counter != 0 )
    2b42:	ec 81       	ldd	r30, Y+4	; 0x04
    2b44:	fd 81       	ldd	r31, Y+5	; 0x05
    2b46:	81 89       	ldd	r24, Z+17	; 0x11
    2b48:	92 89       	ldd	r25, Z+18	; 0x12
    2b4a:	00 97       	sbiw	r24, 0x00	; 0
    2b4c:	61 f0       	breq	.+24     	; 0x2b66 <_sem_lock+0x70>
    {
        sem->counter--;
    2b4e:	ec 81       	ldd	r30, Y+4	; 0x04
    2b50:	fd 81       	ldd	r31, Y+5	; 0x05
    2b52:	81 89       	ldd	r24, Z+17	; 0x11
    2b54:	92 89       	ldd	r25, Z+18	; 0x12
    2b56:	01 97       	sbiw	r24, 0x01	; 1
    2b58:	ec 81       	ldd	r30, Y+4	; 0x04
    2b5a:	fd 81       	ldd	r31, Y+5	; 0x05
    2b5c:	92 8b       	std	Z+18, r25	; 0x12
    2b5e:	81 8b       	std	Z+17, r24	; 0x11
        ret = (bool_t)1;
    2b60:	81 e0       	ldi	r24, 0x01	; 1
    2b62:	8b 83       	std	Y+3, r24	; 0x03
    2b64:	1e c0       	rjmp	.+60     	; 0x2ba2 <_sem_lock+0xac>
    }
    else
    {
        SPIN_LOCK( proc );
    2b66:	89 81       	ldd	r24, Y+1	; 0x01
    2b68:	9a 81       	ldd	r25, Y+2	; 0x02
    2b6a:	83 96       	adiw	r24, 0x23	; 35
    2b6c:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
        proc->flags |= PROC_FLG_QUEUE;
    2b70:	e9 81       	ldd	r30, Y+1	; 0x01
    2b72:	fa 81       	ldd	r31, Y+2	; 0x02
    2b74:	87 81       	ldd	r24, Z+7	; 0x07
    2b76:	90 85       	ldd	r25, Z+8	; 0x08
    2b78:	80 61       	ori	r24, 0x10	; 16
    2b7a:	e9 81       	ldd	r30, Y+1	; 0x01
    2b7c:	fa 81       	ldd	r31, Y+2	; 0x02
    2b7e:	90 87       	std	Z+8, r25	; 0x08
    2b80:	87 83       	std	Z+7, r24	; 0x07
        _proc_stop( proc );
    2b82:	89 81       	ldd	r24, Y+1	; 0x01
    2b84:	9a 81       	ldd	r25, Y+2	; 0x02
    2b86:	0e 94 ac 10 	call	0x2158	; 0x2158 <_proc_stop>
        pitem_insert( (pitem_t *)proc, (xlist_t *)sem );
    2b8a:	89 81       	ldd	r24, Y+1	; 0x01
    2b8c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b8e:	2c 81       	ldd	r18, Y+4	; 0x04
    2b90:	3d 81       	ldd	r19, Y+5	; 0x05
    2b92:	b9 01       	movw	r22, r18
    2b94:	0e 94 65 0d 	call	0x1aca	; 0x1aca <pitem_insert>
        SPIN_UNLOCK( proc );
    2b98:	89 81       	ldd	r24, Y+1	; 0x01
    2b9a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b9c:	83 96       	adiw	r24, 0x23	; 35
    2b9e:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
    }
    SPIN_UNLOCK( sem );
    2ba2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ba4:	9d 81       	ldd	r25, Y+5	; 0x05
    2ba6:	43 96       	adiw	r24, 0x13	; 19
    2ba8:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
    return ret;
    2bac:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2bae:	0f 90       	pop	r0
    2bb0:	0f 90       	pop	r0
    2bb2:	0f 90       	pop	r0
    2bb4:	0f 90       	pop	r0
    2bb6:	0f 90       	pop	r0
    2bb8:	cf 91       	pop	r28
    2bba:	df 91       	pop	r29
    2bbc:	08 95       	ret

00002bbe <_sem_try_lock>:

bool_t _sem_try_lock( sem_t * sem )
{
    2bbe:	df 93       	push	r29
    2bc0:	cf 93       	push	r28
    2bc2:	00 d0       	rcall	.+0      	; 0x2bc4 <_sem_try_lock+0x6>
    2bc4:	00 d0       	rcall	.+0      	; 0x2bc6 <_sem_try_lock+0x8>
    2bc6:	0f 92       	push	r0
    2bc8:	cd b7       	in	r28, 0x3d	; 61
    2bca:	de b7       	in	r29, 0x3e	; 62
    2bcc:	9d 83       	std	Y+5, r25	; 0x05
    2bce:	8c 83       	std	Y+4, r24	; 0x04
    bool_t ret = (bool_t)0;
    2bd0:	1b 82       	std	Y+3, r1	; 0x03
    SPIN_LOCK( sem );
    2bd2:	8c 81       	ldd	r24, Y+4	; 0x04
    2bd4:	9d 81       	ldd	r25, Y+5	; 0x05
    2bd6:	43 96       	adiw	r24, 0x13	; 19
    2bd8:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
    if( sem->counter != 0 )
    2bdc:	ec 81       	ldd	r30, Y+4	; 0x04
    2bde:	fd 81       	ldd	r31, Y+5	; 0x05
    2be0:	81 89       	ldd	r24, Z+17	; 0x11
    2be2:	92 89       	ldd	r25, Z+18	; 0x12
    2be4:	00 97       	sbiw	r24, 0x00	; 0
    2be6:	11 f1       	breq	.+68     	; 0x2c2c <_sem_try_lock+0x6e>
    {
        proc_t * proc;
        proc = current_proc();
    2be8:	0e 94 0a 01 	call	0x214	; 0x214 <current_proc>
    2bec:	9a 83       	std	Y+2, r25	; 0x02
    2bee:	89 83       	std	Y+1, r24	; 0x01

        sem->counter--;
    2bf0:	ec 81       	ldd	r30, Y+4	; 0x04
    2bf2:	fd 81       	ldd	r31, Y+5	; 0x05
    2bf4:	81 89       	ldd	r24, Z+17	; 0x11
    2bf6:	92 89       	ldd	r25, Z+18	; 0x12
    2bf8:	01 97       	sbiw	r24, 0x01	; 1
    2bfa:	ec 81       	ldd	r30, Y+4	; 0x04
    2bfc:	fd 81       	ldd	r31, Y+5	; 0x05
    2bfe:	92 8b       	std	Z+18, r25	; 0x12
    2c00:	81 8b       	std	Z+17, r24	; 0x11
        ret = (bool_t)1;
    2c02:	81 e0       	ldi	r24, 0x01	; 1
    2c04:	8b 83       	std	Y+3, r24	; 0x03
        // Выставляем флаг захватат семафора
        SPIN_LOCK( proc );
    2c06:	89 81       	ldd	r24, Y+1	; 0x01
    2c08:	9a 81       	ldd	r25, Y+2	; 0x02
    2c0a:	83 96       	adiw	r24, 0x23	; 35
    2c0c:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
        proc->flags |= PROC_FLG_SEM;
    2c10:	e9 81       	ldd	r30, Y+1	; 0x01
    2c12:	fa 81       	ldd	r31, Y+2	; 0x02
    2c14:	87 81       	ldd	r24, Z+7	; 0x07
    2c16:	90 85       	ldd	r25, Z+8	; 0x08
    2c18:	88 60       	ori	r24, 0x08	; 8
    2c1a:	e9 81       	ldd	r30, Y+1	; 0x01
    2c1c:	fa 81       	ldd	r31, Y+2	; 0x02
    2c1e:	90 87       	std	Z+8, r25	; 0x08
    2c20:	87 83       	std	Z+7, r24	; 0x07
        SPIN_UNLOCK( proc );
    2c22:	89 81       	ldd	r24, Y+1	; 0x01
    2c24:	9a 81       	ldd	r25, Y+2	; 0x02
    2c26:	83 96       	adiw	r24, 0x23	; 35
    2c28:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
    }
    SPIN_UNLOCK( sem );
    2c2c:	8c 81       	ldd	r24, Y+4	; 0x04
    2c2e:	9d 81       	ldd	r25, Y+5	; 0x05
    2c30:	43 96       	adiw	r24, 0x13	; 19
    2c32:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
    return ret;
    2c36:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2c38:	0f 90       	pop	r0
    2c3a:	0f 90       	pop	r0
    2c3c:	0f 90       	pop	r0
    2c3e:	0f 90       	pop	r0
    2c40:	0f 90       	pop	r0
    2c42:	cf 91       	pop	r28
    2c44:	df 91       	pop	r29
    2c46:	08 95       	ret

00002c48 <sem_unlock_isr>:

void sem_unlock_isr( sem_t * sem )
{
    2c48:	df 93       	push	r29
    2c4a:	cf 93       	push	r28
    2c4c:	00 d0       	rcall	.+0      	; 0x2c4e <sem_unlock_isr+0x6>
    2c4e:	00 d0       	rcall	.+0      	; 0x2c50 <sem_unlock_isr+0x8>
    2c50:	cd b7       	in	r28, 0x3d	; 61
    2c52:	de b7       	in	r29, 0x3e	; 62
    2c54:	9c 83       	std	Y+4, r25	; 0x04
    2c56:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc;
    SPIN_LOCK( sem );
    2c58:	8b 81       	ldd	r24, Y+3	; 0x03
    2c5a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c5c:	43 96       	adiw	r24, 0x13	; 19
    2c5e:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>

    if( ((xlist_t *)sem)->index == (index_t)0  )
    2c62:	eb 81       	ldd	r30, Y+3	; 0x03
    2c64:	fc 81       	ldd	r31, Y+4	; 0x04
    2c66:	80 89       	ldd	r24, Z+16	; 0x10
    2c68:	88 23       	and	r24, r24
    2c6a:	51 f4       	brne	.+20     	; 0x2c80 <sem_unlock_isr+0x38>
    {
        sem->counter++;
    2c6c:	eb 81       	ldd	r30, Y+3	; 0x03
    2c6e:	fc 81       	ldd	r31, Y+4	; 0x04
    2c70:	81 89       	ldd	r24, Z+17	; 0x11
    2c72:	92 89       	ldd	r25, Z+18	; 0x12
    2c74:	01 96       	adiw	r24, 0x01	; 1
    2c76:	eb 81       	ldd	r30, Y+3	; 0x03
    2c78:	fc 81       	ldd	r31, Y+4	; 0x04
    2c7a:	92 8b       	std	Z+18, r25	; 0x12
    2c7c:	81 8b       	std	Z+17, r24	; 0x11
    2c7e:	21 c0       	rjmp	.+66     	; 0x2cc2 <sem_unlock_isr+0x7a>
        goto end;
    }
    proc = (proc_t *)xlist_head((xlist_t *)sem);
    2c80:	8b 81       	ldd	r24, Y+3	; 0x03
    2c82:	9c 81       	ldd	r25, Y+4	; 0x04
    2c84:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xlist_head>
    2c88:	9a 83       	std	Y+2, r25	; 0x02
    2c8a:	89 83       	std	Y+1, r24	; 0x01

    SPIN_LOCK( proc );
    2c8c:	89 81       	ldd	r24, Y+1	; 0x01
    2c8e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c90:	83 96       	adiw	r24, 0x23	; 35
    2c92:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>

    pitem_cut( (pitem_t *)proc );
    2c96:	89 81       	ldd	r24, Y+1	; 0x01
    2c98:	9a 81       	ldd	r25, Y+2	; 0x02
    2c9a:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <pitem_cut>
    proc->flags &= ~PROC_FLG_QUEUE;
    2c9e:	e9 81       	ldd	r30, Y+1	; 0x01
    2ca0:	fa 81       	ldd	r31, Y+2	; 0x02
    2ca2:	87 81       	ldd	r24, Z+7	; 0x07
    2ca4:	90 85       	ldd	r25, Z+8	; 0x08
    2ca6:	8f 7e       	andi	r24, 0xEF	; 239
    2ca8:	e9 81       	ldd	r30, Y+1	; 0x01
    2caa:	fa 81       	ldd	r31, Y+2	; 0x02
    2cac:	90 87       	std	Z+8, r25	; 0x08
    2cae:	87 83       	std	Z+7, r24	; 0x07
    _proc_run( proc );
    2cb0:	89 81       	ldd	r24, Y+1	; 0x01
    2cb2:	9a 81       	ldd	r25, Y+2	; 0x02
    2cb4:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <_proc_run>

    SPIN_UNLOCK( proc );
    2cb8:	89 81       	ldd	r24, Y+1	; 0x01
    2cba:	9a 81       	ldd	r25, Y+2	; 0x02
    2cbc:	83 96       	adiw	r24, 0x23	; 35
    2cbe:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
end:
    SPIN_UNLOCK( sem );
    2cc2:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc4:	9c 81       	ldd	r25, Y+4	; 0x04
    2cc6:	43 96       	adiw	r24, 0x13	; 19
    2cc8:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
}
    2ccc:	0f 90       	pop	r0
    2cce:	0f 90       	pop	r0
    2cd0:	0f 90       	pop	r0
    2cd2:	0f 90       	pop	r0
    2cd4:	cf 91       	pop	r28
    2cd6:	df 91       	pop	r29
    2cd8:	08 95       	ret

00002cda <sig_init_isr>:
*****************************************************************************************/
#include "../include/bugurt.h"
//========================================================================================
// Инициация
void sig_init_isr( sig_t * sig )
{
    2cda:	df 93       	push	r29
    2cdc:	cf 93       	push	r28
    2cde:	00 d0       	rcall	.+0      	; 0x2ce0 <sig_init_isr+0x6>
    2ce0:	0f 92       	push	r0
    2ce2:	cd b7       	in	r28, 0x3d	; 61
    2ce4:	de b7       	in	r29, 0x3e	; 62
    2ce6:	9b 83       	std	Y+3, r25	; 0x03
    2ce8:	8a 83       	std	Y+2, r24	; 0x02
#ifdef CONFIG_MP
    core_id_t i;
    SPIN_INIT( sig );
    2cea:	8a 81       	ldd	r24, Y+2	; 0x02
    2cec:	9b 81       	ldd	r25, Y+3	; 0x03
    2cee:	84 96       	adiw	r24, 0x24	; 36
    2cf0:	0e 94 3c 01 	call	0x278	; 0x278 <spin_init>
    SPIN_LOCK( sig );
    2cf4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cf6:	9b 81       	ldd	r25, Y+3	; 0x03
    2cf8:	84 96       	adiw	r24, 0x24	; 36
    2cfa:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
    for( i = 0; i < (core_id_t)MAX_CORES; i++ )
    2cfe:	19 82       	std	Y+1, r1	; 0x01
    2d00:	21 c0       	rjmp	.+66     	; 0x2d44 <sig_init_isr+0x6a>
    {
        xlist_init( (xlist_t *)sig->sig_list + i );
    2d02:	4a 81       	ldd	r20, Y+2	; 0x02
    2d04:	5b 81       	ldd	r21, Y+3	; 0x03
    2d06:	89 81       	ldd	r24, Y+1	; 0x01
    2d08:	28 2f       	mov	r18, r24
    2d0a:	30 e0       	ldi	r19, 0x00	; 0
    2d0c:	c9 01       	movw	r24, r18
    2d0e:	82 95       	swap	r24
    2d10:	92 95       	swap	r25
    2d12:	90 7f       	andi	r25, 0xF0	; 240
    2d14:	98 27       	eor	r25, r24
    2d16:	80 7f       	andi	r24, 0xF0	; 240
    2d18:	98 27       	eor	r25, r24
    2d1a:	82 0f       	add	r24, r18
    2d1c:	93 1f       	adc	r25, r19
    2d1e:	84 0f       	add	r24, r20
    2d20:	95 1f       	adc	r25, r21
    2d22:	0e 94 30 1b 	call	0x3660	; 0x3660 <xlist_init>
        stat_init( (stat_t *)sig->sig_stat + i );
    2d26:	8a 81       	ldd	r24, Y+2	; 0x02
    2d28:	9b 81       	ldd	r25, Y+3	; 0x03
    2d2a:	9c 01       	movw	r18, r24
    2d2c:	2e 5d       	subi	r18, 0xDE	; 222
    2d2e:	3f 4f       	sbci	r19, 0xFF	; 255
    2d30:	89 81       	ldd	r24, Y+1	; 0x01
    2d32:	88 2f       	mov	r24, r24
    2d34:	90 e0       	ldi	r25, 0x00	; 0
    2d36:	82 0f       	add	r24, r18
    2d38:	93 1f       	adc	r25, r19
    2d3a:	0e 94 73 01 	call	0x2e6	; 0x2e6 <stat_init>
{
#ifdef CONFIG_MP
    core_id_t i;
    SPIN_INIT( sig );
    SPIN_LOCK( sig );
    for( i = 0; i < (core_id_t)MAX_CORES; i++ )
    2d3e:	89 81       	ldd	r24, Y+1	; 0x01
    2d40:	8f 5f       	subi	r24, 0xFF	; 255
    2d42:	89 83       	std	Y+1, r24	; 0x01
    2d44:	89 81       	ldd	r24, Y+1	; 0x01
    2d46:	82 30       	cpi	r24, 0x02	; 2
    2d48:	e0 f2       	brcs	.-72     	; 0x2d02 <sig_init_isr+0x28>
    {
        xlist_init( (xlist_t *)sig->sig_list + i );
        stat_init( (stat_t *)sig->sig_stat + i );
    }
    SPIN_UNLOCK( sig );
    2d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d4c:	9b 81       	ldd	r25, Y+3	; 0x03
    2d4e:	84 96       	adiw	r24, 0x24	; 36
    2d50:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
#else
    xlist_init( (xlist_t *)sig );
#endif
}
    2d54:	0f 90       	pop	r0
    2d56:	0f 90       	pop	r0
    2d58:	0f 90       	pop	r0
    2d5a:	cf 91       	pop	r28
    2d5c:	df 91       	pop	r29
    2d5e:	08 95       	ret

00002d60 <_sig_wait_prologue>:
//========================================================================================
// Это выполнится при постановке процесса в список ожидания сигнала
void _sig_wait_prologue( sig_t * sig )
{
    2d60:	df 93       	push	r29
    2d62:	cf 93       	push	r28
    2d64:	00 d0       	rcall	.+0      	; 0x2d66 <_sig_wait_prologue+0x6>
    2d66:	00 d0       	rcall	.+0      	; 0x2d68 <_sig_wait_prologue+0x8>
    2d68:	0f 92       	push	r0
    2d6a:	cd b7       	in	r28, 0x3d	; 61
    2d6c:	de b7       	in	r29, 0x3e	; 62
    2d6e:	9d 83       	std	Y+5, r25	; 0x05
    2d70:	8c 83       	std	Y+4, r24	; 0x04
    proc_t * proc;

    SPIN_LOCK( sig );
    2d72:	8c 81       	ldd	r24, Y+4	; 0x04
    2d74:	9d 81       	ldd	r25, Y+5	; 0x05
    2d76:	84 96       	adiw	r24, 0x24	; 36
    2d78:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>

    proc = current_proc();
    2d7c:	0e 94 0a 01 	call	0x214	; 0x214 <current_proc>
    2d80:	9b 83       	std	Y+3, r25	; 0x03
    2d82:	8a 83       	std	Y+2, r24	; 0x02
    SPIN_LOCK( proc );
    2d84:	8a 81       	ldd	r24, Y+2	; 0x02
    2d86:	9b 81       	ldd	r25, Y+3	; 0x03
    2d88:	83 96       	adiw	r24, 0x23	; 35
    2d8a:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>

    // Останавливаем процесс
    proc->flags |= PROC_FLG_WAIT;
    2d8e:	ea 81       	ldd	r30, Y+2	; 0x02
    2d90:	fb 81       	ldd	r31, Y+3	; 0x03
    2d92:	87 81       	ldd	r24, Z+7	; 0x07
    2d94:	90 85       	ldd	r25, Z+8	; 0x08
    2d96:	80 62       	ori	r24, 0x20	; 32
    2d98:	ea 81       	ldd	r30, Y+2	; 0x02
    2d9a:	fb 81       	ldd	r31, Y+3	; 0x03
    2d9c:	90 87       	std	Z+8, r25	; 0x08
    2d9e:	87 83       	std	Z+7, r24	; 0x07
    _proc_stop_( proc );
    2da0:	8a 81       	ldd	r24, Y+2	; 0x02
    2da2:	9b 81       	ldd	r25, Y+3	; 0x03
    2da4:	0e 94 68 10 	call	0x20d0	; 0x20d0 <_proc_stop_>
    RESCHED_PROC( proc );
    2da8:	ea 81       	ldd	r30, Y+2	; 0x02
    2daa:	fb 81       	ldd	r31, Y+3	; 0x03
    2dac:	81 a1       	ldd	r24, Z+33	; 0x21
    2dae:	0e 94 de 01 	call	0x3bc	; 0x3bc <resched>
        Балансировка нагрузки производится заранее,
        в этом случае получается сделать sig_broadcast  с временем выполнения O(1),
        однако про hotplug  придется забыть, ну и ладно.
        */
        core_id_t sig_core;
        sig_core = sched_load_balancer( proc, (stat_t *)sig->sig_stat );
    2db2:	8c 81       	ldd	r24, Y+4	; 0x04
    2db4:	9d 81       	ldd	r25, Y+5	; 0x05
    2db6:	9c 01       	movw	r18, r24
    2db8:	2e 5d       	subi	r18, 0xDE	; 222
    2dba:	3f 4f       	sbci	r19, 0xFF	; 255
    2dbc:	8a 81       	ldd	r24, Y+2	; 0x02
    2dbe:	9b 81       	ldd	r25, Y+3	; 0x03
    2dc0:	b9 01       	movw	r22, r18
    2dc2:	0e 94 96 12 	call	0x252c	; 0x252c <sched_load_balancer>
    2dc6:	89 83       	std	Y+1, r24	; 0x01

        proc->core_id = sig_core;
    2dc8:	ea 81       	ldd	r30, Y+2	; 0x02
    2dca:	fb 81       	ldd	r31, Y+3	; 0x03
    2dcc:	89 81       	ldd	r24, Y+1	; 0x01
    2dce:	81 a3       	std	Z+33, r24	; 0x21
        pitem_insert((pitem_t *)proc, (xlist_t *)sig + sig_core);
    2dd0:	6a 81       	ldd	r22, Y+2	; 0x02
    2dd2:	7b 81       	ldd	r23, Y+3	; 0x03
    2dd4:	4c 81       	ldd	r20, Y+4	; 0x04
    2dd6:	5d 81       	ldd	r21, Y+5	; 0x05
    2dd8:	89 81       	ldd	r24, Y+1	; 0x01
    2dda:	28 2f       	mov	r18, r24
    2ddc:	30 e0       	ldi	r19, 0x00	; 0
    2dde:	c9 01       	movw	r24, r18
    2de0:	82 95       	swap	r24
    2de2:	92 95       	swap	r25
    2de4:	90 7f       	andi	r25, 0xF0	; 240
    2de6:	98 27       	eor	r25, r24
    2de8:	80 7f       	andi	r24, 0xF0	; 240
    2dea:	98 27       	eor	r25, r24
    2dec:	82 0f       	add	r24, r18
    2dee:	93 1f       	adc	r25, r19
    2df0:	9a 01       	movw	r18, r20
    2df2:	28 0f       	add	r18, r24
    2df4:	39 1f       	adc	r19, r25
    2df6:	cb 01       	movw	r24, r22
    2df8:	b9 01       	movw	r22, r18
    2dfa:	0e 94 65 0d 	call	0x1aca	; 0x1aca <pitem_insert>
        stat_inc( proc, (stat_t *)sig->sig_stat + sig_core );
    2dfe:	8c 81       	ldd	r24, Y+4	; 0x04
    2e00:	9d 81       	ldd	r25, Y+5	; 0x05
    2e02:	9c 01       	movw	r18, r24
    2e04:	2e 5d       	subi	r18, 0xDE	; 222
    2e06:	3f 4f       	sbci	r19, 0xFF	; 255
    2e08:	89 81       	ldd	r24, Y+1	; 0x01
    2e0a:	88 2f       	mov	r24, r24
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    2e0e:	28 0f       	add	r18, r24
    2e10:	39 1f       	adc	r19, r25
    2e12:	8a 81       	ldd	r24, Y+2	; 0x02
    2e14:	9b 81       	ldd	r25, Y+3	; 0x03
    2e16:	b9 01       	movw	r22, r18
    2e18:	0e 94 98 01 	call	0x330	; 0x330 <stat_inc>
    }
#else
    pitem_insert( (pitem_t *)proc, (xlist_t *)sig );
#endif //CONFIG_MP
    SPIN_UNLOCK( proc );
    2e1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e1e:	9b 81       	ldd	r25, Y+3	; 0x03
    2e20:	83 96       	adiw	r24, 0x23	; 35
    2e22:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
    SPIN_UNLOCK( sig );
    2e26:	8c 81       	ldd	r24, Y+4	; 0x04
    2e28:	9d 81       	ldd	r25, Y+5	; 0x05
    2e2a:	84 96       	adiw	r24, 0x24	; 36
    2e2c:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
}
    2e30:	0f 90       	pop	r0
    2e32:	0f 90       	pop	r0
    2e34:	0f 90       	pop	r0
    2e36:	0f 90       	pop	r0
    2e38:	0f 90       	pop	r0
    2e3a:	cf 91       	pop	r28
    2e3c:	df 91       	pop	r29
    2e3e:	08 95       	ret

00002e40 <_sig_wakeup_list_proc>:
//========================================================================================
//
static void _sig_wakeup_list_proc( proc_t * proc )
{
    2e40:	df 93       	push	r29
    2e42:	cf 93       	push	r28
    2e44:	00 d0       	rcall	.+0      	; 0x2e46 <_sig_wakeup_list_proc+0x6>
    2e46:	cd b7       	in	r28, 0x3d	; 61
    2e48:	de b7       	in	r29, 0x3e	; 62
    2e4a:	9a 83       	std	Y+2, r25	; 0x02
    2e4c:	89 83       	std	Y+1, r24	; 0x01
    SPIN_LOCK( proc );
    2e4e:	89 81       	ldd	r24, Y+1	; 0x01
    2e50:	9a 81       	ldd	r25, Y+2	; 0x02
    2e52:	83 96       	adiw	r24, 0x23	; 35
    2e54:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
    proc->buf = ((item_t *)proc)->next;
    2e58:	e9 81       	ldd	r30, Y+1	; 0x01
    2e5a:	fa 81       	ldd	r31, Y+2	; 0x02
    2e5c:	80 81       	ld	r24, Z
    2e5e:	91 81       	ldd	r25, Z+1	; 0x01
    2e60:	e9 81       	ldd	r30, Y+1	; 0x01
    2e62:	fa 81       	ldd	r31, Y+2	; 0x02
    2e64:	90 a3       	std	Z+32, r25	; 0x20
    2e66:	87 8f       	std	Z+31, r24	; 0x1f
    item_cut( (item_t *)proc );                  // Вырезать процесс из простого списка гораздо проще, чем из xlist
    2e68:	89 81       	ldd	r24, Y+1	; 0x01
    2e6a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e6c:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <item_cut>
    _proc_run_( proc );
    2e70:	89 81       	ldd	r24, Y+1	; 0x01
    2e72:	9a 81       	ldd	r25, Y+2	; 0x02
    2e74:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <_proc_run_>
    SPIN_UNLOCK( proc );
    2e78:	89 81       	ldd	r24, Y+1	; 0x01
    2e7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e7c:	83 96       	adiw	r24, 0x23	; 35
    2e7e:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
}
    2e82:	0f 90       	pop	r0
    2e84:	0f 90       	pop	r0
    2e86:	cf 91       	pop	r28
    2e88:	df 91       	pop	r29
    2e8a:	08 95       	ret

00002e8c <_sig_wait_epilogue>:

void _sig_wait_epilogue( void )
{
    2e8c:	df 93       	push	r29
    2e8e:	cf 93       	push	r28
    2e90:	00 d0       	rcall	.+0      	; 0x2e92 <_sig_wait_epilogue+0x6>
    2e92:	00 d0       	rcall	.+0      	; 0x2e94 <_sig_wait_epilogue+0x8>
    2e94:	cd b7       	in	r28, 0x3d	; 61
    2e96:	de b7       	in	r29, 0x3e	; 62
    proc_t * proc;
    proc_t * wakeup_proc;
    proc = current_proc();
    2e98:	0e 94 0a 01 	call	0x214	; 0x214 <current_proc>
    2e9c:	9c 83       	std	Y+4, r25	; 0x04
    2e9e:	8b 83       	std	Y+3, r24	; 0x03

    SPIN_LOCK( proc );
    2ea0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ea4:	83 96       	adiw	r24, 0x23	; 35
    2ea6:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
    wakeup_proc = (proc_t *)proc->buf;
    2eaa:	eb 81       	ldd	r30, Y+3	; 0x03
    2eac:	fc 81       	ldd	r31, Y+4	; 0x04
    2eae:	87 8d       	ldd	r24, Z+31	; 0x1f
    2eb0:	90 a1       	ldd	r25, Z+32	; 0x20
    2eb2:	9a 83       	std	Y+2, r25	; 0x02
    2eb4:	89 83       	std	Y+1, r24	; 0x01
    proc->buf = (void *)0;
    2eb6:	eb 81       	ldd	r30, Y+3	; 0x03
    2eb8:	fc 81       	ldd	r31, Y+4	; 0x04
    2eba:	10 a2       	std	Z+32, r1	; 0x20
    2ebc:	17 8e       	std	Z+31, r1	; 0x1f
    SPIN_UNLOCK( proc );
    2ebe:	8b 81       	ldd	r24, Y+3	; 0x03
    2ec0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ec2:	83 96       	adiw	r24, 0x23	; 35
    2ec4:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
    // Надо разбудить следующий процесс в списке.
    if( wakeup_proc )
    2ec8:	89 81       	ldd	r24, Y+1	; 0x01
    2eca:	9a 81       	ldd	r25, Y+2	; 0x02
    2ecc:	00 97       	sbiw	r24, 0x00	; 0
    2ece:	59 f0       	breq	.+22     	; 0x2ee6 <_sig_wait_epilogue+0x5a>
    {
        // Если есть другие процессы для пробуждения, то "будим" самый приоритетный из них, он продолжит "побудку".
        if( wakeup_proc != proc )
    2ed0:	29 81       	ldd	r18, Y+1	; 0x01
    2ed2:	3a 81       	ldd	r19, Y+2	; 0x02
    2ed4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ed8:	28 17       	cp	r18, r24
    2eda:	39 07       	cpc	r19, r25
    2edc:	21 f0       	breq	.+8      	; 0x2ee6 <_sig_wait_epilogue+0x5a>
        {
            //Нельзя будить себя! Будим только другой процесс!
            _sig_wakeup_list_proc( wakeup_proc );
    2ede:	89 81       	ldd	r24, Y+1	; 0x01
    2ee0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ee2:	0e 94 20 17 	call	0x2e40	; 0x2e40 <_sig_wakeup_list_proc>
        }
    }
}
    2ee6:	0f 90       	pop	r0
    2ee8:	0f 90       	pop	r0
    2eea:	0f 90       	pop	r0
    2eec:	0f 90       	pop	r0
    2eee:	cf 91       	pop	r28
    2ef0:	df 91       	pop	r29
    2ef2:	08 95       	ret

00002ef4 <sig_signal_isr>:
//========================================================================================
// Будит 1 процесс, для вызова из обработчиков прерываний
void sig_signal_isr( sig_t * sig )
{
    2ef4:	df 93       	push	r29
    2ef6:	cf 93       	push	r28
    2ef8:	cd b7       	in	r28, 0x3d	; 61
    2efa:	de b7       	in	r29, 0x3e	; 62
    2efc:	29 97       	sbiw	r28, 0x09	; 9
    2efe:	0f b6       	in	r0, 0x3f	; 63
    2f00:	f8 94       	cli
    2f02:	de bf       	out	0x3e, r29	; 62
    2f04:	0f be       	out	0x3f, r0	; 63
    2f06:	cd bf       	out	0x3d, r28	; 61
    2f08:	99 87       	std	Y+9, r25	; 0x09
    2f0a:	88 87       	std	Y+8, r24	; 0x08
#ifdef CONFIG_MP
    core_id_t core;
    proc_t * proc;
    // Поиск процесса для запуска
    SPIN_LOCK( sig );// Захват блокировки сигнала
    2f0c:	88 85       	ldd	r24, Y+8	; 0x08
    2f0e:	99 85       	ldd	r25, Y+9	; 0x09
    2f10:	84 96       	adiw	r24, 0x24	; 36
    2f12:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
    // Находим самую нагруженную  структуру stat_t в сигнале
    core = sched_highest_load_core( (stat_t *)sig->sig_stat );
    2f16:	88 85       	ldd	r24, Y+8	; 0x08
    2f18:	99 85       	ldd	r25, Y+9	; 0x09
    2f1a:	82 96       	adiw	r24, 0x22	; 34
    2f1c:	0e 94 08 13 	call	0x2610	; 0x2610 <sched_highest_load_core>
    2f20:	8f 83       	std	Y+7, r24	; 0x07
    // Этот процесс мы будем запускать
    {
        xlist_t * sig_list;
        sig_list = (xlist_t *)sig->sig_list + core;
    2f22:	48 85       	ldd	r20, Y+8	; 0x08
    2f24:	59 85       	ldd	r21, Y+9	; 0x09
    2f26:	8f 81       	ldd	r24, Y+7	; 0x07
    2f28:	28 2f       	mov	r18, r24
    2f2a:	30 e0       	ldi	r19, 0x00	; 0
    2f2c:	c9 01       	movw	r24, r18
    2f2e:	82 95       	swap	r24
    2f30:	92 95       	swap	r25
    2f32:	90 7f       	andi	r25, 0xF0	; 240
    2f34:	98 27       	eor	r25, r24
    2f36:	80 7f       	andi	r24, 0xF0	; 240
    2f38:	98 27       	eor	r25, r24
    2f3a:	82 0f       	add	r24, r18
    2f3c:	93 1f       	adc	r25, r19
    2f3e:	84 0f       	add	r24, r20
    2f40:	95 1f       	adc	r25, r21
    2f42:	9c 83       	std	Y+4, r25	; 0x04
    2f44:	8b 83       	std	Y+3, r24	; 0x03
        if(sig_list->index == (index_t)0)
    2f46:	eb 81       	ldd	r30, Y+3	; 0x03
    2f48:	fc 81       	ldd	r31, Y+4	; 0x04
    2f4a:	80 89       	ldd	r24, Z+16	; 0x10
    2f4c:	88 23       	and	r24, r24
    2f4e:	31 f4       	brne	.+12     	; 0x2f5c <sig_signal_isr+0x68>
        {
            SPIN_UNLOCK( sig );
    2f50:	88 85       	ldd	r24, Y+8	; 0x08
    2f52:	99 85       	ldd	r25, Y+9	; 0x09
    2f54:	84 96       	adiw	r24, 0x24	; 36
    2f56:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
    2f5a:	62 c0       	rjmp	.+196    	; 0x3020 <sig_signal_isr+0x12c>
            return;
        }
        proc = (proc_t *)xlist_head( sig_list );
    2f5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f5e:	9c 81       	ldd	r25, Y+4	; 0x04
    2f60:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <xlist_head>
    2f64:	9e 83       	std	Y+6, r25	; 0x06
    2f66:	8d 83       	std	Y+5, r24	; 0x05
    }
    SPIN_LOCK( proc );// Захват блокировки процесса
    2f68:	8d 81       	ldd	r24, Y+5	; 0x05
    2f6a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f6c:	83 96       	adiw	r24, 0x23	; 35
    2f6e:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
    // Вырезаем процесс из списка ожидания сигнала
    pitem_fast_cut( (pitem_t *)proc );
    2f72:	8d 81       	ldd	r24, Y+5	; 0x05
    2f74:	9e 81       	ldd	r25, Y+6	; 0x06
    2f76:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <pitem_fast_cut>
    stat_dec( proc, (stat_t *)sig->sig_stat + core );
    2f7a:	88 85       	ldd	r24, Y+8	; 0x08
    2f7c:	99 85       	ldd	r25, Y+9	; 0x09
    2f7e:	9c 01       	movw	r18, r24
    2f80:	2e 5d       	subi	r18, 0xDE	; 222
    2f82:	3f 4f       	sbci	r19, 0xFF	; 255
    2f84:	8f 81       	ldd	r24, Y+7	; 0x07
    2f86:	88 2f       	mov	r24, r24
    2f88:	90 e0       	ldi	r25, 0x00	; 0
    2f8a:	28 0f       	add	r18, r24
    2f8c:	39 1f       	adc	r19, r25
    2f8e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f90:	9e 81       	ldd	r25, Y+6	; 0x06
    2f92:	b9 01       	movw	r22, r18
    2f94:	0e 94 82 01 	call	0x304	; 0x304 <stat_dec>
    //Запуск процесса
    // Вставляем его в список ready соответствующего планировщика
    spin_lock( &kernel.stat_lock );
    2f98:	83 e0       	ldi	r24, 0x03	; 3
    2f9a:	93 e0       	ldi	r25, 0x03	; 3
    2f9c:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
    stat_inc( proc, (stat_t *)kernel.stat + core ); // Обновление статистики
    2fa0:	8f 81       	ldd	r24, Y+7	; 0x07
    2fa2:	88 2f       	mov	r24, r24
    2fa4:	90 e0       	ldi	r25, 0x00	; 0
    2fa6:	9c 01       	movw	r18, r24
    2fa8:	2f 5f       	subi	r18, 0xFF	; 255
    2faa:	3c 4f       	sbci	r19, 0xFC	; 252
    2fac:	8d 81       	ldd	r24, Y+5	; 0x05
    2fae:	9e 81       	ldd	r25, Y+6	; 0x06
    2fb0:	b9 01       	movw	r22, r18
    2fb2:	0e 94 98 01 	call	0x330	; 0x330 <stat_inc>
    spin_unlock( &kernel.stat_lock );
    2fb6:	83 e0       	ldi	r24, 0x03	; 3
    2fb8:	93 e0       	ldi	r25, 0x03	; 3
    2fba:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
    {
        sched_t * sched;
        sched = kernel.sched + core;// Дада, нагрузка была сбалансирована на этапе постановки в список ожидания
    2fbe:	8f 81       	ldd	r24, Y+7	; 0x07
    2fc0:	28 2f       	mov	r18, r24
    2fc2:	30 e0       	ldi	r19, 0x00	; 0
    2fc4:	8b e2       	ldi	r24, 0x2B	; 43
    2fc6:	90 e0       	ldi	r25, 0x00	; 0
    2fc8:	ac 01       	movw	r20, r24
    2fca:	24 9f       	mul	r18, r20
    2fcc:	c0 01       	movw	r24, r0
    2fce:	25 9f       	mul	r18, r21
    2fd0:	90 0d       	add	r25, r0
    2fd2:	34 9f       	mul	r19, r20
    2fd4:	90 0d       	add	r25, r0
    2fd6:	11 24       	eor	r1, r1
    2fd8:	85 5b       	subi	r24, 0xB5	; 181
    2fda:	9d 4f       	sbci	r25, 0xFD	; 253
    2fdc:	9a 83       	std	Y+2, r25	; 0x02
    2fde:	89 83       	std	Y+1, r24	; 0x01
        SPIN_LOCK( sched );
    2fe0:	89 81       	ldd	r24, Y+1	; 0x01
    2fe2:	9a 81       	ldd	r25, Y+2	; 0x02
    2fe4:	8a 96       	adiw	r24, 0x2a	; 42
    2fe6:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
        pitem_insert((pitem_t *)proc, sched->ready );
    2fea:	8d 81       	ldd	r24, Y+5	; 0x05
    2fec:	9e 81       	ldd	r25, Y+6	; 0x06
    2fee:	e9 81       	ldd	r30, Y+1	; 0x01
    2ff0:	fa 81       	ldd	r31, Y+2	; 0x02
    2ff2:	22 81       	ldd	r18, Z+2	; 0x02
    2ff4:	33 81       	ldd	r19, Z+3	; 0x03
    2ff6:	b9 01       	movw	r22, r18
    2ff8:	0e 94 65 0d 	call	0x1aca	; 0x1aca <pitem_insert>
        SPIN_UNLOCK( sched );
    2ffc:	89 81       	ldd	r24, Y+1	; 0x01
    2ffe:	9a 81       	ldd	r25, Y+2	; 0x02
    3000:	8a 96       	adiw	r24, 0x2a	; 42
    3002:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
    }
    resched(core);// Перепланировка
    3006:	8f 81       	ldd	r24, Y+7	; 0x07
    3008:	0e 94 de 01 	call	0x3bc	; 0x3bc <resched>
    SPIN_UNLOCK( proc );// Освобождение блокировки процесса
    300c:	8d 81       	ldd	r24, Y+5	; 0x05
    300e:	9e 81       	ldd	r25, Y+6	; 0x06
    3010:	83 96       	adiw	r24, 0x23	; 35
    3012:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
    SPIN_UNLOCK( sig );// Освобождение блокировки сигнала
    3016:	88 85       	ldd	r24, Y+8	; 0x08
    3018:	99 85       	ldd	r25, Y+9	; 0x09
    301a:	84 96       	adiw	r24, 0x24	; 36
    301c:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
    proc = (proc_t *)xlist_head( (xlist_t *)sig );
    pitem_fast_cut( (pitem_t *)proc );
    pitem_insert( (pitem_t *)proc, kernel.sched.ready );
    resched();
#endif //CONFIG_MP
}
    3020:	29 96       	adiw	r28, 0x09	; 9
    3022:	0f b6       	in	r0, 0x3f	; 63
    3024:	f8 94       	cli
    3026:	de bf       	out	0x3e, r29	; 62
    3028:	0f be       	out	0x3f, r0	; 63
    302a:	cd bf       	out	0x3d, r28	; 61
    302c:	cf 91       	pop	r28
    302e:	df 91       	pop	r29
    3030:	08 95       	ret

00003032 <sig_broadcast_isr>:
//----------------------------------------------------------------------------------------
// Будит все ожидающие процессы
void sig_broadcast_isr( sig_t * sig )
{
    3032:	df 93       	push	r29
    3034:	cf 93       	push	r28
    3036:	00 d0       	rcall	.+0      	; 0x3038 <sig_broadcast_isr+0x6>
    3038:	00 d0       	rcall	.+0      	; 0x303a <sig_broadcast_isr+0x8>
    303a:	0f 92       	push	r0
    303c:	cd b7       	in	r28, 0x3d	; 61
    303e:	de b7       	in	r29, 0x3e	; 62
    3040:	9d 83       	std	Y+5, r25	; 0x05
    3042:	8c 83       	std	Y+4, r24	; 0x04
#ifdef CONFIG_MP
    core_id_t core;
    SPIN_LOCK( sig );
    3044:	8c 81       	ldd	r24, Y+4	; 0x04
    3046:	9d 81       	ldd	r25, Y+5	; 0x05
    3048:	84 96       	adiw	r24, 0x24	; 36
    304a:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
    for(core = 0; core < (core_id_t)MAX_CORES; core++)
    304e:	1b 82       	std	Y+3, r1	; 0x03
    3050:	3f c0       	rjmp	.+126    	; 0x30d0 <sig_broadcast_isr+0x9e>
        proc_t * wakeup_proc;
        /*
        Фактически процессы еще не поставлены на выполнение,
        но обязательно будут, это надо учитывать при баланисировке нагрузки.
        */
        spin_lock( &kernel.stat_lock );
    3052:	83 e0       	ldi	r24, 0x03	; 3
    3054:	93 e0       	ldi	r25, 0x03	; 3
    3056:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
        stat_merge( (stat_t *)sig->sig_stat + core, (stat_t *)kernel.stat + core );
    305a:	8c 81       	ldd	r24, Y+4	; 0x04
    305c:	9d 81       	ldd	r25, Y+5	; 0x05
    305e:	9c 01       	movw	r18, r24
    3060:	2e 5d       	subi	r18, 0xDE	; 222
    3062:	3f 4f       	sbci	r19, 0xFF	; 255
    3064:	8b 81       	ldd	r24, Y+3	; 0x03
    3066:	88 2f       	mov	r24, r24
    3068:	90 e0       	ldi	r25, 0x00	; 0
    306a:	a9 01       	movw	r20, r18
    306c:	48 0f       	add	r20, r24
    306e:	59 1f       	adc	r21, r25
    3070:	8b 81       	ldd	r24, Y+3	; 0x03
    3072:	88 2f       	mov	r24, r24
    3074:	90 e0       	ldi	r25, 0x00	; 0
    3076:	9c 01       	movw	r18, r24
    3078:	2f 5f       	subi	r18, 0xFF	; 255
    307a:	3c 4f       	sbci	r19, 0xFC	; 252
    307c:	ca 01       	movw	r24, r20
    307e:	b9 01       	movw	r22, r18
    3080:	0e 94 ae 01 	call	0x35c	; 0x35c <stat_merge>
        spin_unlock( &kernel.stat_lock );
    3084:	83 e0       	ldi	r24, 0x03	; 3
    3086:	93 e0       	ldi	r25, 0x03	; 3
    3088:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
        /*
        Сцепляем список и будим его голову.
        */
        wakeup_proc = (proc_t *)pitem_xlist_chain( (xlist_t *)sig + core );
    308c:	4c 81       	ldd	r20, Y+4	; 0x04
    308e:	5d 81       	ldd	r21, Y+5	; 0x05
    3090:	8b 81       	ldd	r24, Y+3	; 0x03
    3092:	28 2f       	mov	r18, r24
    3094:	30 e0       	ldi	r19, 0x00	; 0
    3096:	c9 01       	movw	r24, r18
    3098:	82 95       	swap	r24
    309a:	92 95       	swap	r25
    309c:	90 7f       	andi	r25, 0xF0	; 240
    309e:	98 27       	eor	r25, r24
    30a0:	80 7f       	andi	r24, 0xF0	; 240
    30a2:	98 27       	eor	r25, r24
    30a4:	82 0f       	add	r24, r18
    30a6:	93 1f       	adc	r25, r19
    30a8:	84 0f       	add	r24, r20
    30aa:	95 1f       	adc	r25, r21
    30ac:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <pitem_xlist_chain>
    30b0:	9a 83       	std	Y+2, r25	; 0x02
    30b2:	89 83       	std	Y+1, r24	; 0x01
        if( wakeup_proc )
    30b4:	89 81       	ldd	r24, Y+1	; 0x01
    30b6:	9a 81       	ldd	r25, Y+2	; 0x02
    30b8:	00 97       	sbiw	r24, 0x00	; 0
    30ba:	21 f0       	breq	.+8      	; 0x30c4 <sig_broadcast_isr+0x92>
        {
            _sig_wakeup_list_proc( wakeup_proc );
    30bc:	89 81       	ldd	r24, Y+1	; 0x01
    30be:	9a 81       	ldd	r25, Y+2	; 0x02
    30c0:	0e 94 20 17 	call	0x2e40	; 0x2e40 <_sig_wakeup_list_proc>
        }

        resched(core);
    30c4:	8b 81       	ldd	r24, Y+3	; 0x03
    30c6:	0e 94 de 01 	call	0x3bc	; 0x3bc <resched>
void sig_broadcast_isr( sig_t * sig )
{
#ifdef CONFIG_MP
    core_id_t core;
    SPIN_LOCK( sig );
    for(core = 0; core < (core_id_t)MAX_CORES; core++)
    30ca:	8b 81       	ldd	r24, Y+3	; 0x03
    30cc:	8f 5f       	subi	r24, 0xFF	; 255
    30ce:	8b 83       	std	Y+3, r24	; 0x03
    30d0:	8b 81       	ldd	r24, Y+3	; 0x03
    30d2:	82 30       	cpi	r24, 0x02	; 2
    30d4:	08 f4       	brcc	.+2      	; 0x30d8 <sig_broadcast_isr+0xa6>
    30d6:	bd cf       	rjmp	.-134    	; 0x3052 <sig_broadcast_isr+0x20>
            _sig_wakeup_list_proc( wakeup_proc );
        }

        resched(core);
    }
    SPIN_UNLOCK( sig );
    30d8:	8c 81       	ldd	r24, Y+4	; 0x04
    30da:	9d 81       	ldd	r25, Y+5	; 0x05
    30dc:	84 96       	adiw	r24, 0x24	; 36
    30de:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
        _sig_wakeup_list_proc( wakeup_proc );
    }

    resched();
#endif //CONFIG_MP
}
    30e2:	0f 90       	pop	r0
    30e4:	0f 90       	pop	r0
    30e6:	0f 90       	pop	r0
    30e8:	0f 90       	pop	r0
    30ea:	0f 90       	pop	r0
    30ec:	cf 91       	pop	r28
    30ee:	df 91       	pop	r29
    30f0:	08 95       	ret

000030f2 <do_syscall>:
syscall_t syscall_num = (syscall_t)0;
void * syscall_arg = (void *)0;

void do_syscall( void )
#endif // CONFIG_MP
{
    30f2:	df 93       	push	r29
    30f4:	cf 93       	push	r28
    30f6:	cd b7       	in	r28, 0x3d	; 61
    30f8:	de b7       	in	r29, 0x3e	; 62
    30fa:	27 97       	sbiw	r28, 0x07	; 7
    30fc:	0f b6       	in	r0, 0x3f	; 63
    30fe:	f8 94       	cli
    3100:	de bf       	out	0x3e, r29	; 62
    3102:	0f be       	out	0x3f, r0	; 63
    3104:	cd bf       	out	0x3d, r28	; 61
    3106:	8d 83       	std	Y+5, r24	; 0x05
    3108:	7f 83       	std	Y+7, r23	; 0x07
    310a:	6e 83       	std	Y+6, r22	; 0x06
    if( syscall_num != (syscall_t)0 )
    310c:	8d 81       	ldd	r24, Y+5	; 0x05
    310e:	88 23       	and	r24, r24
    3110:	e1 f0       	breq	.+56     	; 0x314a <do_syscall+0x58>
    {
        syscall_num--;
    3112:	8d 81       	ldd	r24, Y+5	; 0x05
    3114:	81 50       	subi	r24, 0x01	; 1
    3116:	8d 83       	std	Y+5, r24	; 0x05
        (SYSCALL_TABLE_READ(syscall_routine[syscall_num]))(syscall_arg);
    3118:	8d 81       	ldd	r24, Y+5	; 0x05
    311a:	88 2f       	mov	r24, r24
    311c:	90 e0       	ldi	r25, 0x00	; 0
    311e:	88 0f       	add	r24, r24
    3120:	99 1f       	adc	r25, r25
    3122:	88 59       	subi	r24, 0x98	; 152
    3124:	9f 4f       	sbci	r25, 0xFF	; 255
    3126:	9c 83       	std	Y+4, r25	; 0x04
    3128:	8b 83       	std	Y+3, r24	; 0x03
    312a:	8b 81       	ldd	r24, Y+3	; 0x03
    312c:	9c 81       	ldd	r25, Y+4	; 0x04
    312e:	fc 01       	movw	r30, r24
    3130:	85 91       	lpm	r24, Z+
    3132:	94 91       	lpm	r25, Z+
    3134:	9a 83       	std	Y+2, r25	; 0x02
    3136:	89 83       	std	Y+1, r24	; 0x01
    3138:	fc 83       	std	Y+4, r31	; 0x04
    313a:	eb 83       	std	Y+3, r30	; 0x03
    313c:	89 81       	ldd	r24, Y+1	; 0x01
    313e:	9a 81       	ldd	r25, Y+2	; 0x02
    3140:	fc 01       	movw	r30, r24
    3142:	8e 81       	ldd	r24, Y+6	; 0x06
    3144:	9f 81       	ldd	r25, Y+7	; 0x07
    3146:	09 95       	icall
        syscall_num = (syscall_t)0;
    3148:	1d 82       	std	Y+5, r1	; 0x05
    }
}
    314a:	27 96       	adiw	r28, 0x07	; 7
    314c:	0f b6       	in	r0, 0x3f	; 63
    314e:	f8 94       	cli
    3150:	de bf       	out	0x3e, r29	; 62
    3152:	0f be       	out	0x3f, r0	; 63
    3154:	cd bf       	out	0x3d, r28	; 61
    3156:	cf 91       	pop	r28
    3158:	df 91       	pop	r29
    315a:	08 95       	ret

0000315c <scall_proc_init>:
***********************************************************************************************
                                    Process control !!!
**********************************************************************************************/
/// SYSCALL_PROC_INIT
void scall_proc_init( void * arg )
{
    315c:	8f 92       	push	r8
    315e:	9f 92       	push	r9
    3160:	af 92       	push	r10
    3162:	bf 92       	push	r11
    3164:	cf 92       	push	r12
    3166:	df 92       	push	r13
    3168:	ef 92       	push	r14
    316a:	ff 92       	push	r15
    316c:	0f 93       	push	r16
    316e:	1f 93       	push	r17
    3170:	df 93       	push	r29
    3172:	cf 93       	push	r28
    3174:	00 d0       	rcall	.+0      	; 0x3176 <scall_proc_init+0x1a>
    3176:	cd b7       	in	r28, 0x3d	; 61
    3178:	de b7       	in	r29, 0x3e	; 62
    317a:	9a 83       	std	Y+2, r25	; 0x02
    317c:	89 83       	std	Y+1, r24	; 0x01
    proc_init_isr(
    317e:	e9 81       	ldd	r30, Y+1	; 0x01
    3180:	fa 81       	ldd	r31, Y+2	; 0x02
    3182:	40 81       	ld	r20, Z
    3184:	51 81       	ldd	r21, Z+1	; 0x01
    3186:	e9 81       	ldd	r30, Y+1	; 0x01
    3188:	fa 81       	ldd	r31, Y+2	; 0x02
    318a:	62 81       	ldd	r22, Z+2	; 0x02
    318c:	73 81       	ldd	r23, Z+3	; 0x03
    318e:	e9 81       	ldd	r30, Y+1	; 0x01
    3190:	fa 81       	ldd	r31, Y+2	; 0x02
    3192:	24 81       	ldd	r18, Z+4	; 0x04
    3194:	35 81       	ldd	r19, Z+5	; 0x05
    3196:	e9 81       	ldd	r30, Y+1	; 0x01
    3198:	fa 81       	ldd	r31, Y+2	; 0x02
    319a:	a6 81       	ldd	r26, Z+6	; 0x06
    319c:	b7 81       	ldd	r27, Z+7	; 0x07
    319e:	e9 81       	ldd	r30, Y+1	; 0x01
    31a0:	fa 81       	ldd	r31, Y+2	; 0x02
    31a2:	00 85       	ldd	r16, Z+8	; 0x08
    31a4:	11 85       	ldd	r17, Z+9	; 0x09
    31a6:	e9 81       	ldd	r30, Y+1	; 0x01
    31a8:	fa 81       	ldd	r31, Y+2	; 0x02
    31aa:	e2 84       	ldd	r14, Z+10	; 0x0a
    31ac:	f3 84       	ldd	r15, Z+11	; 0x0b
    31ae:	e9 81       	ldd	r30, Y+1	; 0x01
    31b0:	fa 81       	ldd	r31, Y+2	; 0x02
    31b2:	d4 84       	ldd	r13, Z+12	; 0x0c
    31b4:	e9 81       	ldd	r30, Y+1	; 0x01
    31b6:	fa 81       	ldd	r31, Y+2	; 0x02
    31b8:	a5 84       	ldd	r10, Z+13	; 0x0d
    31ba:	b6 84       	ldd	r11, Z+14	; 0x0e
    31bc:	e9 81       	ldd	r30, Y+1	; 0x01
    31be:	fa 81       	ldd	r31, Y+2	; 0x02
    31c0:	97 84       	ldd	r9, Z+15	; 0x0f
    31c2:	e9 81       	ldd	r30, Y+1	; 0x01
    31c4:	fa 81       	ldd	r31, Y+2	; 0x02
    31c6:	80 89       	ldd	r24, Z+16	; 0x10
    31c8:	0f 92       	push	r0
    31ca:	ed b7       	in	r30, 0x3d	; 61
    31cc:	fe b7       	in	r31, 0x3e	; 62
    31ce:	31 96       	adiw	r30, 0x01	; 1
    31d0:	80 83       	st	Z, r24
    31d2:	ca 01       	movw	r24, r20
    31d4:	a9 01       	movw	r20, r18
    31d6:	9d 01       	movw	r18, r26
    31d8:	cd 2c       	mov	r12, r13
    31da:	89 2c       	mov	r8, r9
    31dc:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <proc_init_isr>
    31e0:	0f 90       	pop	r0
              ((proc_init_arg_t *)arg)->is_rt
#ifdef CONFIG_MP
              ,((proc_init_arg_t *)arg)-> affinity
#endif // CONFIG_MP
              );
}
    31e2:	0f 90       	pop	r0
    31e4:	0f 90       	pop	r0
    31e6:	cf 91       	pop	r28
    31e8:	df 91       	pop	r29
    31ea:	1f 91       	pop	r17
    31ec:	0f 91       	pop	r16
    31ee:	ff 90       	pop	r15
    31f0:	ef 90       	pop	r14
    31f2:	df 90       	pop	r13
    31f4:	cf 90       	pop	r12
    31f6:	bf 90       	pop	r11
    31f8:	af 90       	pop	r10
    31fa:	9f 90       	pop	r9
    31fc:	8f 90       	pop	r8
    31fe:	08 95       	ret

00003200 <scall_proc_run>:
}
/**********************************************************************************************
                                       SYSCALL_PROC_RUN
**********************************************************************************************/
void scall_proc_run( void * arg )
{
    3200:	0f 93       	push	r16
    3202:	1f 93       	push	r17
    3204:	df 93       	push	r29
    3206:	cf 93       	push	r28
    3208:	00 d0       	rcall	.+0      	; 0x320a <scall_proc_run+0xa>
    320a:	cd b7       	in	r28, 0x3d	; 61
    320c:	de b7       	in	r29, 0x3e	; 62
    320e:	9a 83       	std	Y+2, r25	; 0x02
    3210:	89 83       	std	Y+1, r24	; 0x01
    ((proc_runtime_arg_t *)arg)->ret = proc_run_isr( ((proc_runtime_arg_t *)arg)->proc );
    3212:	09 81       	ldd	r16, Y+1	; 0x01
    3214:	1a 81       	ldd	r17, Y+2	; 0x02
    3216:	e9 81       	ldd	r30, Y+1	; 0x01
    3218:	fa 81       	ldd	r31, Y+2	; 0x02
    321a:	80 81       	ld	r24, Z
    321c:	91 81       	ldd	r25, Z+1	; 0x01
    321e:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <proc_run_isr>
    3222:	f8 01       	movw	r30, r16
    3224:	82 83       	std	Z+2, r24	; 0x02
}
    3226:	0f 90       	pop	r0
    3228:	0f 90       	pop	r0
    322a:	cf 91       	pop	r28
    322c:	df 91       	pop	r29
    322e:	1f 91       	pop	r17
    3230:	0f 91       	pop	r16
    3232:	08 95       	ret

00003234 <scall_proc_restart>:
}
/**********************************************************************************************
                                       SYSCALL_PROC_RESTART
**********************************************************************************************/
void scall_proc_restart( void * arg )
{
    3234:	0f 93       	push	r16
    3236:	1f 93       	push	r17
    3238:	df 93       	push	r29
    323a:	cf 93       	push	r28
    323c:	00 d0       	rcall	.+0      	; 0x323e <scall_proc_restart+0xa>
    323e:	cd b7       	in	r28, 0x3d	; 61
    3240:	de b7       	in	r29, 0x3e	; 62
    3242:	9a 83       	std	Y+2, r25	; 0x02
    3244:	89 83       	std	Y+1, r24	; 0x01
    ((proc_runtime_arg_t *)arg)->ret = proc_restart_isr( ((proc_runtime_arg_t *)arg)->proc );
    3246:	09 81       	ldd	r16, Y+1	; 0x01
    3248:	1a 81       	ldd	r17, Y+2	; 0x02
    324a:	e9 81       	ldd	r30, Y+1	; 0x01
    324c:	fa 81       	ldd	r31, Y+2	; 0x02
    324e:	80 81       	ld	r24, Z
    3250:	91 81       	ldd	r25, Z+1	; 0x01
    3252:	0e 94 05 10 	call	0x200a	; 0x200a <proc_restart_isr>
    3256:	f8 01       	movw	r30, r16
    3258:	82 83       	std	Z+2, r24	; 0x02
}
    325a:	0f 90       	pop	r0
    325c:	0f 90       	pop	r0
    325e:	cf 91       	pop	r28
    3260:	df 91       	pop	r29
    3262:	1f 91       	pop	r17
    3264:	0f 91       	pop	r16
    3266:	08 95       	ret

00003268 <scall_proc_stop>:
}
/**********************************************************************************************
                                        SYSCALL_PROC_STOP
**********************************************************************************************/
void scall_proc_stop( void * arg )
{
    3268:	0f 93       	push	r16
    326a:	1f 93       	push	r17
    326c:	df 93       	push	r29
    326e:	cf 93       	push	r28
    3270:	00 d0       	rcall	.+0      	; 0x3272 <scall_proc_stop+0xa>
    3272:	cd b7       	in	r28, 0x3d	; 61
    3274:	de b7       	in	r29, 0x3e	; 62
    3276:	9a 83       	std	Y+2, r25	; 0x02
    3278:	89 83       	std	Y+1, r24	; 0x01
    ((proc_runtime_arg_t *)arg)->ret = proc_stop_isr( ((proc_runtime_arg_t *)arg)->proc );
    327a:	09 81       	ldd	r16, Y+1	; 0x01
    327c:	1a 81       	ldd	r17, Y+2	; 0x02
    327e:	e9 81       	ldd	r30, Y+1	; 0x01
    3280:	fa 81       	ldd	r31, Y+2	; 0x02
    3282:	80 81       	ld	r24, Z
    3284:	91 81       	ldd	r25, Z+1	; 0x01
    3286:	0e 94 ca 10 	call	0x2194	; 0x2194 <proc_stop_isr>
    328a:	f8 01       	movw	r30, r16
    328c:	82 83       	std	Z+2, r24	; 0x02
}
    328e:	0f 90       	pop	r0
    3290:	0f 90       	pop	r0
    3292:	cf 91       	pop	r28
    3294:	df 91       	pop	r29
    3296:	1f 91       	pop	r17
    3298:	0f 91       	pop	r16
    329a:	08 95       	ret

0000329c <scall_proc_self_stop>:
}
/**********************************************************************************************
                                    SYSCALL_PROC_SELF_STOP
**********************************************************************************************/
void scall_proc_self_stop( void * arg )
{
    329c:	df 93       	push	r29
    329e:	cf 93       	push	r28
    32a0:	00 d0       	rcall	.+0      	; 0x32a2 <scall_proc_self_stop+0x6>
    32a2:	00 d0       	rcall	.+0      	; 0x32a4 <scall_proc_self_stop+0x8>
    32a4:	cd b7       	in	r28, 0x3d	; 61
    32a6:	de b7       	in	r29, 0x3e	; 62
    32a8:	9c 83       	std	Y+4, r25	; 0x04
    32aa:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = current_proc();
    32ac:	0e 94 0a 01 	call	0x214	; 0x214 <current_proc>
    32b0:	9a 83       	std	Y+2, r25	; 0x02
    32b2:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
    32b4:	89 81       	ldd	r24, Y+1	; 0x01
    32b6:	9a 81       	ldd	r25, Y+2	; 0x02
    32b8:	83 96       	adiw	r24, 0x23	; 35
    32ba:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
#endif
    _proc_stop( proc );
    32be:	89 81       	ldd	r24, Y+1	; 0x01
    32c0:	9a 81       	ldd	r25, Y+2	; 0x02
    32c2:	0e 94 ac 10 	call	0x2158	; 0x2158 <_proc_stop>
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
    32c6:	89 81       	ldd	r24, Y+1	; 0x01
    32c8:	9a 81       	ldd	r25, Y+2	; 0x02
    32ca:	83 96       	adiw	r24, 0x23	; 35
    32cc:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
#endif
}
    32d0:	0f 90       	pop	r0
    32d2:	0f 90       	pop	r0
    32d4:	0f 90       	pop	r0
    32d6:	0f 90       	pop	r0
    32d8:	cf 91       	pop	r28
    32da:	df 91       	pop	r29
    32dc:	08 95       	ret

000032de <scall_proc_terminate>:
/**********************************************************************************************
                                    SYSCALL_PROC_TERMINATE
**********************************************************************************************/
// Останов процесса после выхода из pmain, для обертки proc_run_wrapper
void scall_proc_terminate( void * arg )
{
    32de:	df 93       	push	r29
    32e0:	cf 93       	push	r28
    32e2:	00 d0       	rcall	.+0      	; 0x32e4 <scall_proc_terminate+0x6>
    32e4:	cd b7       	in	r28, 0x3d	; 61
    32e6:	de b7       	in	r29, 0x3e	; 62
    32e8:	9a 83       	std	Y+2, r25	; 0x02
    32ea:	89 83       	std	Y+1, r24	; 0x01
    _proc_terminate((proc_t *)arg);
    32ec:	89 81       	ldd	r24, Y+1	; 0x01
    32ee:	9a 81       	ldd	r25, Y+2	; 0x02
    32f0:	0e 94 4c 11 	call	0x2298	; 0x2298 <_proc_terminate>
}
    32f4:	0f 90       	pop	r0
    32f6:	0f 90       	pop	r0
    32f8:	cf 91       	pop	r28
    32fa:	df 91       	pop	r29
    32fc:	08 95       	ret

000032fe <proc_run_wrapper>:
void proc_run_wrapper( proc_t * proc )
{
    32fe:	df 93       	push	r29
    3300:	cf 93       	push	r28
    3302:	00 d0       	rcall	.+0      	; 0x3304 <proc_run_wrapper+0x6>
    3304:	00 d0       	rcall	.+0      	; 0x3306 <proc_run_wrapper+0x8>
    3306:	00 d0       	rcall	.+0      	; 0x3308 <proc_run_wrapper+0xa>
    3308:	cd b7       	in	r28, 0x3d	; 61
    330a:	de b7       	in	r29, 0x3e	; 62
    330c:	9e 83       	std	Y+6, r25	; 0x06
    330e:	8d 83       	std	Y+5, r24	; 0x05
    code_t pmain;
    void * arg;
    //Атомарно читаем pmain и arg
    disable_interrupts();
    3310:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <disable_interrupts>
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
    3314:	8d 81       	ldd	r24, Y+5	; 0x05
    3316:	9e 81       	ldd	r25, Y+6	; 0x06
    3318:	83 96       	adiw	r24, 0x23	; 35
    331a:	0e 94 4d 01 	call	0x29a	; 0x29a <spin_lock>
#endif // CONFIG_MP
    pmain = proc->pmain;
    331e:	ed 81       	ldd	r30, Y+5	; 0x05
    3320:	fe 81       	ldd	r31, Y+6	; 0x06
    3322:	84 a1       	ldd	r24, Z+36	; 0x24
    3324:	95 a1       	ldd	r25, Z+37	; 0x25
    3326:	9c 83       	std	Y+4, r25	; 0x04
    3328:	8b 83       	std	Y+3, r24	; 0x03
    arg = proc->arg;
    332a:	ed 81       	ldd	r30, Y+5	; 0x05
    332c:	fe 81       	ldd	r31, Y+6	; 0x06
    332e:	82 a5       	ldd	r24, Z+42	; 0x2a
    3330:	93 a5       	ldd	r25, Z+43	; 0x2b
    3332:	9a 83       	std	Y+2, r25	; 0x02
    3334:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
    3336:	8d 81       	ldd	r24, Y+5	; 0x05
    3338:	9e 81       	ldd	r25, Y+6	; 0x06
    333a:	83 96       	adiw	r24, 0x23	; 35
    333c:	0e 94 66 01 	call	0x2cc	; 0x2cc <spin_unlock>
#endif // CONFIG_MP
    enable_interrupts();
    3340:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <enable_interrupts>
    //Выполняем pmain
    pmain( arg );
    3344:	89 81       	ldd	r24, Y+1	; 0x01
    3346:	9a 81       	ldd	r25, Y+2	; 0x02
    3348:	eb 81       	ldd	r30, Y+3	; 0x03
    334a:	fc 81       	ldd	r31, Y+4	; 0x04
    334c:	09 95       	icall
    // Завершаем процесс
    syscall_bugurt( SYSCALL_PROC_TERMINATE, (void *)proc );
    334e:	2d 81       	ldd	r18, Y+5	; 0x05
    3350:	3e 81       	ldd	r19, Y+6	; 0x06
    3352:	86 e0       	ldi	r24, 0x06	; 6
    3354:	b9 01       	movw	r22, r18
    3356:	0e 94 e5 03 	call	0x7ca	; 0x7ca <syscall_bugurt>
}
    335a:	26 96       	adiw	r28, 0x06	; 6
    335c:	0f b6       	in	r0, 0x3f	; 63
    335e:	f8 94       	cli
    3360:	de bf       	out	0x3e, r29	; 62
    3362:	0f be       	out	0x3f, r0	; 63
    3364:	cd bf       	out	0x3d, r28	; 61
    3366:	cf 91       	pop	r28
    3368:	df 91       	pop	r29
    336a:	08 95       	ret

0000336c <scall_proc_flag_stop>:
/**********************************************************************************************
                                       SYSCALL_PROC_FLAG_STOP
**********************************************************************************************/
void scall_proc_flag_stop( void * arg )
{
    336c:	df 93       	push	r29
    336e:	cf 93       	push	r28
    3370:	00 d0       	rcall	.+0      	; 0x3372 <scall_proc_flag_stop+0x6>
    3372:	cd b7       	in	r28, 0x3d	; 61
    3374:	de b7       	in	r29, 0x3e	; 62
    3376:	9a 83       	std	Y+2, r25	; 0x02
    3378:	89 83       	std	Y+1, r24	; 0x01
    _proc_flag_stop( *((flag_t *)arg) );
    337a:	e9 81       	ldd	r30, Y+1	; 0x01
    337c:	fa 81       	ldd	r31, Y+2	; 0x02
    337e:	80 81       	ld	r24, Z
    3380:	91 81       	ldd	r25, Z+1	; 0x01
    3382:	0e 94 04 11 	call	0x2208	; 0x2208 <_proc_flag_stop>
}
    3386:	0f 90       	pop	r0
    3388:	0f 90       	pop	r0
    338a:	cf 91       	pop	r28
    338c:	df 91       	pop	r29
    338e:	08 95       	ret

00003390 <scall_proc_reset_watchdog>:
}
/**********************************************************************************************
                                       SYSCALL_PROC_RESET_WATCHDOG
**********************************************************************************************/
void scall_proc_reset_watchdog( void * arg )
{
    3390:	df 93       	push	r29
    3392:	cf 93       	push	r28
    3394:	00 d0       	rcall	.+0      	; 0x3396 <scall_proc_reset_watchdog+0x6>
    3396:	cd b7       	in	r28, 0x3d	; 61
    3398:	de b7       	in	r29, 0x3e	; 62
    339a:	9a 83       	std	Y+2, r25	; 0x02
    339c:	89 83       	std	Y+1, r24	; 0x01
    _proc_reset_watchdog();
    339e:	0e 94 8f 11 	call	0x231e	; 0x231e <_proc_reset_watchdog>
}
    33a2:	0f 90       	pop	r0
    33a4:	0f 90       	pop	r0
    33a6:	cf 91       	pop	r28
    33a8:	df 91       	pop	r29
    33aa:	08 95       	ret

000033ac <scall_sig_init>:
                                            Сигналы
***********************************************************************************************
                                      SYSCALL_PROC_RESTART
**********************************************************************************************/
void scall_sig_init( void * arg )
{
    33ac:	df 93       	push	r29
    33ae:	cf 93       	push	r28
    33b0:	00 d0       	rcall	.+0      	; 0x33b2 <scall_sig_init+0x6>
    33b2:	cd b7       	in	r28, 0x3d	; 61
    33b4:	de b7       	in	r29, 0x3e	; 62
    33b6:	9a 83       	std	Y+2, r25	; 0x02
    33b8:	89 83       	std	Y+1, r24	; 0x01
    sig_init_isr( (sig_t *)arg );
    33ba:	89 81       	ldd	r24, Y+1	; 0x01
    33bc:	9a 81       	ldd	r25, Y+2	; 0x02
    33be:	0e 94 6d 16 	call	0x2cda	; 0x2cda <sig_init_isr>
}
    33c2:	0f 90       	pop	r0
    33c4:	0f 90       	pop	r0
    33c6:	cf 91       	pop	r28
    33c8:	df 91       	pop	r29
    33ca:	08 95       	ret

000033cc <scall_sig_wait>:
}
/**********************************************************************************************
                                       SYSCALL_SIG_WAIT
**********************************************************************************************/
void scall_sig_wait( void * arg )
{
    33cc:	df 93       	push	r29
    33ce:	cf 93       	push	r28
    33d0:	00 d0       	rcall	.+0      	; 0x33d2 <scall_sig_wait+0x6>
    33d2:	cd b7       	in	r28, 0x3d	; 61
    33d4:	de b7       	in	r29, 0x3e	; 62
    33d6:	9a 83       	std	Y+2, r25	; 0x02
    33d8:	89 83       	std	Y+1, r24	; 0x01
    _sig_wait_prologue( (sig_t *)arg );
    33da:	89 81       	ldd	r24, Y+1	; 0x01
    33dc:	9a 81       	ldd	r25, Y+2	; 0x02
    33de:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <_sig_wait_prologue>
}
    33e2:	0f 90       	pop	r0
    33e4:	0f 90       	pop	r0
    33e6:	cf 91       	pop	r28
    33e8:	df 91       	pop	r29
    33ea:	08 95       	ret

000033ec <scall_sig_wakeup>:
/**********************************************************************************************
                                       SYSCALL_SIG_WAKEUP
**********************************************************************************************/
void scall_sig_wakeup( void *arg )
{
    33ec:	df 93       	push	r29
    33ee:	cf 93       	push	r28
    33f0:	00 d0       	rcall	.+0      	; 0x33f2 <scall_sig_wakeup+0x6>
    33f2:	cd b7       	in	r28, 0x3d	; 61
    33f4:	de b7       	in	r29, 0x3e	; 62
    33f6:	9a 83       	std	Y+2, r25	; 0x02
    33f8:	89 83       	std	Y+1, r24	; 0x01
    _sig_wait_epilogue();
    33fa:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <_sig_wait_epilogue>
    _proc_flag_stop( PROC_FLG_WAIT );
    33fe:	80 e2       	ldi	r24, 0x20	; 32
    3400:	90 e0       	ldi	r25, 0x00	; 0
    3402:	0e 94 04 11 	call	0x2208	; 0x2208 <_proc_flag_stop>
}
    3406:	0f 90       	pop	r0
    3408:	0f 90       	pop	r0
    340a:	cf 91       	pop	r28
    340c:	df 91       	pop	r29
    340e:	08 95       	ret

00003410 <scall_sig_signal>:
}
/**********************************************************************************************
                                       SYSCALL_SIG_SIGNAL
**********************************************************************************************/
void scall_sig_signal( void * arg )
{
    3410:	df 93       	push	r29
    3412:	cf 93       	push	r28
    3414:	00 d0       	rcall	.+0      	; 0x3416 <scall_sig_signal+0x6>
    3416:	cd b7       	in	r28, 0x3d	; 61
    3418:	de b7       	in	r29, 0x3e	; 62
    341a:	9a 83       	std	Y+2, r25	; 0x02
    341c:	89 83       	std	Y+1, r24	; 0x01
    sig_signal_isr( (sig_t *)arg );
    341e:	89 81       	ldd	r24, Y+1	; 0x01
    3420:	9a 81       	ldd	r25, Y+2	; 0x02
    3422:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <sig_signal_isr>
}
    3426:	0f 90       	pop	r0
    3428:	0f 90       	pop	r0
    342a:	cf 91       	pop	r28
    342c:	df 91       	pop	r29
    342e:	08 95       	ret

00003430 <scall_sig_broadcast>:
}
/**********************************************************************************************
                                       SYSCALL_SIG_BROADCAST
**********************************************************************************************/
void scall_sig_broadcast( void * arg )
{
    3430:	df 93       	push	r29
    3432:	cf 93       	push	r28
    3434:	00 d0       	rcall	.+0      	; 0x3436 <scall_sig_broadcast+0x6>
    3436:	cd b7       	in	r28, 0x3d	; 61
    3438:	de b7       	in	r29, 0x3e	; 62
    343a:	9a 83       	std	Y+2, r25	; 0x02
    343c:	89 83       	std	Y+1, r24	; 0x01
    sig_broadcast_isr( (sig_t *)arg );
    343e:	89 81       	ldd	r24, Y+1	; 0x01
    3440:	9a 81       	ldd	r25, Y+2	; 0x02
    3442:	0e 94 19 18 	call	0x3032	; 0x3032 <sig_broadcast_isr>
}
    3446:	0f 90       	pop	r0
    3448:	0f 90       	pop	r0
    344a:	cf 91       	pop	r28
    344c:	df 91       	pop	r29
    344e:	08 95       	ret

00003450 <scall_sem_init>:
                                           Семафоры
***********************************************************************************************
                                       SYSCALL_SEM_INIT
**********************************************************************************************/
void scall_sem_init( void * arg )
{
    3450:	df 93       	push	r29
    3452:	cf 93       	push	r28
    3454:	00 d0       	rcall	.+0      	; 0x3456 <scall_sem_init+0x6>
    3456:	cd b7       	in	r28, 0x3d	; 61
    3458:	de b7       	in	r29, 0x3e	; 62
    345a:	9a 83       	std	Y+2, r25	; 0x02
    345c:	89 83       	std	Y+1, r24	; 0x01
    sem_init_isr( ((sem_init_arg_t *)arg)->sem, ((sem_init_arg_t *)arg)->count );
    345e:	e9 81       	ldd	r30, Y+1	; 0x01
    3460:	fa 81       	ldd	r31, Y+2	; 0x02
    3462:	80 81       	ld	r24, Z
    3464:	91 81       	ldd	r25, Z+1	; 0x01
    3466:	e9 81       	ldd	r30, Y+1	; 0x01
    3468:	fa 81       	ldd	r31, Y+2	; 0x02
    346a:	22 81       	ldd	r18, Z+2	; 0x02
    346c:	33 81       	ldd	r19, Z+3	; 0x03
    346e:	b9 01       	movw	r22, r18
    3470:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <sem_init_isr>
}
    3474:	0f 90       	pop	r0
    3476:	0f 90       	pop	r0
    3478:	cf 91       	pop	r28
    347a:	df 91       	pop	r29
    347c:	08 95       	ret

0000347e <scall_sem_lock>:
}
/**********************************************************************************************
                                         SYSCALL_SEM_LOCK
**********************************************************************************************/
void scall_sem_lock( void * arg )
{
    347e:	0f 93       	push	r16
    3480:	1f 93       	push	r17
    3482:	df 93       	push	r29
    3484:	cf 93       	push	r28
    3486:	00 d0       	rcall	.+0      	; 0x3488 <scall_sem_lock+0xa>
    3488:	cd b7       	in	r28, 0x3d	; 61
    348a:	de b7       	in	r29, 0x3e	; 62
    348c:	9a 83       	std	Y+2, r25	; 0x02
    348e:	89 83       	std	Y+1, r24	; 0x01
    ((sem_lock_arg_t *)arg)->ret = _sem_lock( ((sem_lock_arg_t *)arg)->sem );
    3490:	09 81       	ldd	r16, Y+1	; 0x01
    3492:	1a 81       	ldd	r17, Y+2	; 0x02
    3494:	e9 81       	ldd	r30, Y+1	; 0x01
    3496:	fa 81       	ldd	r31, Y+2	; 0x02
    3498:	80 81       	ld	r24, Z
    349a:	91 81       	ldd	r25, Z+1	; 0x01
    349c:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <_sem_lock>
    34a0:	f8 01       	movw	r30, r16
    34a2:	82 83       	std	Z+2, r24	; 0x02
}
    34a4:	0f 90       	pop	r0
    34a6:	0f 90       	pop	r0
    34a8:	cf 91       	pop	r28
    34aa:	df 91       	pop	r29
    34ac:	1f 91       	pop	r17
    34ae:	0f 91       	pop	r16
    34b0:	08 95       	ret

000034b2 <scall_sem_try_lock>:
}
/**********************************************************************************************
                                       SYSCALL_SEM_TRY_LOCK
**********************************************************************************************/
void scall_sem_try_lock( void * arg )
{
    34b2:	0f 93       	push	r16
    34b4:	1f 93       	push	r17
    34b6:	df 93       	push	r29
    34b8:	cf 93       	push	r28
    34ba:	00 d0       	rcall	.+0      	; 0x34bc <scall_sem_try_lock+0xa>
    34bc:	cd b7       	in	r28, 0x3d	; 61
    34be:	de b7       	in	r29, 0x3e	; 62
    34c0:	9a 83       	std	Y+2, r25	; 0x02
    34c2:	89 83       	std	Y+1, r24	; 0x01
    ((sem_lock_arg_t *)arg)->ret = _sem_try_lock( ((sem_lock_arg_t *)arg)->sem );
    34c4:	09 81       	ldd	r16, Y+1	; 0x01
    34c6:	1a 81       	ldd	r17, Y+2	; 0x02
    34c8:	e9 81       	ldd	r30, Y+1	; 0x01
    34ca:	fa 81       	ldd	r31, Y+2	; 0x02
    34cc:	80 81       	ld	r24, Z
    34ce:	91 81       	ldd	r25, Z+1	; 0x01
    34d0:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_sem_try_lock>
    34d4:	f8 01       	movw	r30, r16
    34d6:	82 83       	std	Z+2, r24	; 0x02
}
    34d8:	0f 90       	pop	r0
    34da:	0f 90       	pop	r0
    34dc:	cf 91       	pop	r28
    34de:	df 91       	pop	r29
    34e0:	1f 91       	pop	r17
    34e2:	0f 91       	pop	r16
    34e4:	08 95       	ret

000034e6 <scall_sem_unlock>:
}
/**********************************************************************************************
                                       SYSCALL_SEM_UNLOCK
**********************************************************************************************/
void scall_sem_unlock( void * arg )
{
    34e6:	df 93       	push	r29
    34e8:	cf 93       	push	r28
    34ea:	00 d0       	rcall	.+0      	; 0x34ec <scall_sem_unlock+0x6>
    34ec:	cd b7       	in	r28, 0x3d	; 61
    34ee:	de b7       	in	r29, 0x3e	; 62
    34f0:	9a 83       	std	Y+2, r25	; 0x02
    34f2:	89 83       	std	Y+1, r24	; 0x01
    sem_unlock_isr( (sem_t *)arg );
    34f4:	89 81       	ldd	r24, Y+1	; 0x01
    34f6:	9a 81       	ldd	r25, Y+2	; 0x02
    34f8:	0e 94 24 16 	call	0x2c48	; 0x2c48 <sem_unlock_isr>
}
    34fc:	0f 90       	pop	r0
    34fe:	0f 90       	pop	r0
    3500:	cf 91       	pop	r28
    3502:	df 91       	pop	r29
    3504:	08 95       	ret

00003506 <scall_mutex_init>:
                                          Мьютексы
***********************************************************************************************
                                     SYSCALL_MUTEX_INIT
**********************************************************************************************/
void scall_mutex_init(void * arg)
{
    3506:	df 93       	push	r29
    3508:	cf 93       	push	r28
    350a:	00 d0       	rcall	.+0      	; 0x350c <scall_mutex_init+0x6>
    350c:	cd b7       	in	r28, 0x3d	; 61
    350e:	de b7       	in	r29, 0x3e	; 62
    3510:	9a 83       	std	Y+2, r25	; 0x02
    3512:	89 83       	std	Y+1, r24	; 0x01
    mutex_init_isr(
    3514:	e9 81       	ldd	r30, Y+1	; 0x01
    3516:	fa 81       	ldd	r31, Y+2	; 0x02
    3518:	80 81       	ld	r24, Z
    351a:	91 81       	ldd	r25, Z+1	; 0x01
    351c:	e9 81       	ldd	r30, Y+1	; 0x01
    351e:	fa 81       	ldd	r31, Y+2	; 0x02
    3520:	22 81       	ldd	r18, Z+2	; 0x02
    3522:	62 2f       	mov	r22, r18
    3524:	0e 94 4f 0b 	call	0x169e	; 0x169e <mutex_init_isr>
               ((mutex_init_arg_t *)arg)->mutex
#ifdef CONFIG_USE_HIGHEST_LOCKER
               ,((mutex_init_arg_t *)arg)->prio
#endif // CONFIG_USE_HIGHEST_LOCKER
               );
}
    3528:	0f 90       	pop	r0
    352a:	0f 90       	pop	r0
    352c:	cf 91       	pop	r28
    352e:	df 91       	pop	r29
    3530:	08 95       	ret

00003532 <scall_mutex_lock>:
}
/**********************************************************************************************
                                    SYSCALL_MUTEX_LOCK
**********************************************************************************************/
void scall_mutex_lock(void * arg)
{
    3532:	0f 93       	push	r16
    3534:	1f 93       	push	r17
    3536:	df 93       	push	r29
    3538:	cf 93       	push	r28
    353a:	00 d0       	rcall	.+0      	; 0x353c <scall_mutex_lock+0xa>
    353c:	cd b7       	in	r28, 0x3d	; 61
    353e:	de b7       	in	r29, 0x3e	; 62
    3540:	9a 83       	std	Y+2, r25	; 0x02
    3542:	89 83       	std	Y+1, r24	; 0x01
    ((mutex_lock_arg_t *)arg)->ret = _mutex_lock( ((mutex_lock_arg_t *)arg)->mutex );
    3544:	09 81       	ldd	r16, Y+1	; 0x01
    3546:	1a 81       	ldd	r17, Y+2	; 0x02
    3548:	e9 81       	ldd	r30, Y+1	; 0x01
    354a:	fa 81       	ldd	r31, Y+2	; 0x02
    354c:	80 81       	ld	r24, Z
    354e:	91 81       	ldd	r25, Z+1	; 0x01
    3550:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <_mutex_lock>
    3554:	f8 01       	movw	r30, r16
    3556:	82 83       	std	Z+2, r24	; 0x02
}
    3558:	0f 90       	pop	r0
    355a:	0f 90       	pop	r0
    355c:	cf 91       	pop	r28
    355e:	df 91       	pop	r29
    3560:	1f 91       	pop	r17
    3562:	0f 91       	pop	r16
    3564:	08 95       	ret

00003566 <scall_mutex_try_lock>:
// Захват
/**********************************************************************************************
                                    SYSCALL_MUTEX_TRY_LOCK
**********************************************************************************************/
void scall_mutex_try_lock(void * arg)
{
    3566:	0f 93       	push	r16
    3568:	1f 93       	push	r17
    356a:	df 93       	push	r29
    356c:	cf 93       	push	r28
    356e:	00 d0       	rcall	.+0      	; 0x3570 <scall_mutex_try_lock+0xa>
    3570:	cd b7       	in	r28, 0x3d	; 61
    3572:	de b7       	in	r29, 0x3e	; 62
    3574:	9a 83       	std	Y+2, r25	; 0x02
    3576:	89 83       	std	Y+1, r24	; 0x01
    ((mutex_lock_arg_t *)arg)->ret = _mutex_try_lock( ((mutex_lock_arg_t *)arg)->mutex );
    3578:	09 81       	ldd	r16, Y+1	; 0x01
    357a:	1a 81       	ldd	r17, Y+2	; 0x02
    357c:	e9 81       	ldd	r30, Y+1	; 0x01
    357e:	fa 81       	ldd	r31, Y+2	; 0x02
    3580:	80 81       	ld	r24, Z
    3582:	91 81       	ldd	r25, Z+1	; 0x01
    3584:	0e 94 ce 0b 	call	0x179c	; 0x179c <_mutex_try_lock>
    3588:	f8 01       	movw	r30, r16
    358a:	82 83       	std	Z+2, r24	; 0x02
}
    358c:	0f 90       	pop	r0
    358e:	0f 90       	pop	r0
    3590:	cf 91       	pop	r28
    3592:	df 91       	pop	r29
    3594:	1f 91       	pop	r17
    3596:	0f 91       	pop	r16
    3598:	08 95       	ret

0000359a <scall_mutex_unlock>:
}
/**********************************************************************************************
                                   SYSCALL_MUTEX_UNLOCK
**********************************************************************************************/
void scall_mutex_unlock(void * arg)
{
    359a:	df 93       	push	r29
    359c:	cf 93       	push	r28
    359e:	00 d0       	rcall	.+0      	; 0x35a0 <scall_mutex_unlock+0x6>
    35a0:	cd b7       	in	r28, 0x3d	; 61
    35a2:	de b7       	in	r29, 0x3e	; 62
    35a4:	9a 83       	std	Y+2, r25	; 0x02
    35a6:	89 83       	std	Y+1, r24	; 0x01
    _mutex_unlock( (mutex_t *)arg );
    35a8:	89 81       	ldd	r24, Y+1	; 0x01
    35aa:	9a 81       	ldd	r25, Y+2	; 0x02
    35ac:	0e 94 0e 0c 	call	0x181c	; 0x181c <_mutex_unlock>
}
    35b0:	0f 90       	pop	r0
    35b2:	0f 90       	pop	r0
    35b4:	cf 91       	pop	r28
    35b6:	df 91       	pop	r29
    35b8:	08 95       	ret

000035ba <scall_ipc_wait>:
                                           IPC
***********************************************************************************************
                                       SYSCALL_IPC_WAIT
**********************************************************************************************/
void scall_ipc_wait(void * arg)
{
    35ba:	df 93       	push	r29
    35bc:	cf 93       	push	r28
    35be:	00 d0       	rcall	.+0      	; 0x35c0 <scall_ipc_wait+0x6>
    35c0:	cd b7       	in	r28, 0x3d	; 61
    35c2:	de b7       	in	r29, 0x3e	; 62
    35c4:	9a 83       	std	Y+2, r25	; 0x02
    35c6:	89 83       	std	Y+1, r24	; 0x01
    _ipc_wait( arg );
    35c8:	89 81       	ldd	r24, Y+1	; 0x01
    35ca:	9a 81       	ldd	r25, Y+2	; 0x02
    35cc:	0e 94 35 09 	call	0x126a	; 0x126a <_ipc_wait>
}
    35d0:	0f 90       	pop	r0
    35d2:	0f 90       	pop	r0
    35d4:	cf 91       	pop	r28
    35d6:	df 91       	pop	r29
    35d8:	08 95       	ret

000035da <scall_ipc_send>:
}
/**********************************************************************************************
                                       SYSCALL_IPC_SEND
**********************************************************************************************/
void scall_ipc_send(void * arg)
{
    35da:	0f 93       	push	r16
    35dc:	1f 93       	push	r17
    35de:	df 93       	push	r29
    35e0:	cf 93       	push	r28
    35e2:	00 d0       	rcall	.+0      	; 0x35e4 <scall_ipc_send+0xa>
    35e4:	cd b7       	in	r28, 0x3d	; 61
    35e6:	de b7       	in	r29, 0x3e	; 62
    35e8:	9a 83       	std	Y+2, r25	; 0x02
    35ea:	89 83       	std	Y+1, r24	; 0x01
    ((ipc_send_arg_t *)arg)->ret = ipc_send_isr( ((ipc_send_arg_t *)arg)->proc, ((ipc_send_arg_t *)arg)->data );
    35ec:	09 81       	ldd	r16, Y+1	; 0x01
    35ee:	1a 81       	ldd	r17, Y+2	; 0x02
    35f0:	e9 81       	ldd	r30, Y+1	; 0x01
    35f2:	fa 81       	ldd	r31, Y+2	; 0x02
    35f4:	80 81       	ld	r24, Z
    35f6:	91 81       	ldd	r25, Z+1	; 0x01
    35f8:	e9 81       	ldd	r30, Y+1	; 0x01
    35fa:	fa 81       	ldd	r31, Y+2	; 0x02
    35fc:	23 81       	ldd	r18, Z+3	; 0x03
    35fe:	34 81       	ldd	r19, Z+4	; 0x04
    3600:	b9 01       	movw	r22, r18
    3602:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <ipc_send_isr>
    3606:	f8 01       	movw	r30, r16
    3608:	82 83       	std	Z+2, r24	; 0x02
}
    360a:	0f 90       	pop	r0
    360c:	0f 90       	pop	r0
    360e:	cf 91       	pop	r28
    3610:	df 91       	pop	r29
    3612:	1f 91       	pop	r17
    3614:	0f 91       	pop	r16
    3616:	08 95       	ret

00003618 <scall_ipc_exchange>:
}
/**********************************************************************************************
                                    SYSCALL_IPC_EXCHANGE
**********************************************************************************************/
void scall_ipc_exchange(void * arg)
{
    3618:	0f 93       	push	r16
    361a:	1f 93       	push	r17
    361c:	df 93       	push	r29
    361e:	cf 93       	push	r28
    3620:	00 d0       	rcall	.+0      	; 0x3622 <scall_ipc_exchange+0xa>
    3622:	cd b7       	in	r28, 0x3d	; 61
    3624:	de b7       	in	r29, 0x3e	; 62
    3626:	9a 83       	std	Y+2, r25	; 0x02
    3628:	89 83       	std	Y+1, r24	; 0x01
    ((ipc_send_arg_t *)arg)->ret = _ipc_exchange( ((ipc_send_arg_t *)arg)->proc, ((ipc_send_arg_t *)arg)->data, ((ipc_exchange_arg_t *)arg)->receive );
    362a:	09 81       	ldd	r16, Y+1	; 0x01
    362c:	1a 81       	ldd	r17, Y+2	; 0x02
    362e:	e9 81       	ldd	r30, Y+1	; 0x01
    3630:	fa 81       	ldd	r31, Y+2	; 0x02
    3632:	80 81       	ld	r24, Z
    3634:	91 81       	ldd	r25, Z+1	; 0x01
    3636:	e9 81       	ldd	r30, Y+1	; 0x01
    3638:	fa 81       	ldd	r31, Y+2	; 0x02
    363a:	43 81       	ldd	r20, Z+3	; 0x03
    363c:	54 81       	ldd	r21, Z+4	; 0x04
    363e:	e9 81       	ldd	r30, Y+1	; 0x01
    3640:	fa 81       	ldd	r31, Y+2	; 0x02
    3642:	25 81       	ldd	r18, Z+5	; 0x05
    3644:	36 81       	ldd	r19, Z+6	; 0x06
    3646:	ba 01       	movw	r22, r20
    3648:	a9 01       	movw	r20, r18
    364a:	0e 94 c3 09 	call	0x1386	; 0x1386 <_ipc_exchange>
    364e:	f8 01       	movw	r30, r16
    3650:	82 83       	std	Z+2, r24	; 0x02
}
    3652:	0f 90       	pop	r0
    3654:	0f 90       	pop	r0
    3656:	cf 91       	pop	r28
    3658:	df 91       	pop	r29
    365a:	1f 91       	pop	r17
    365c:	0f 91       	pop	r16
    365e:	08 95       	ret

00003660 <xlist_init>:
**********************************************/
//Инициация
void xlist_init(
    xlist_t * xlist
)
{
    3660:	df 93       	push	r29
    3662:	cf 93       	push	r28
    3664:	00 d0       	rcall	.+0      	; 0x3666 <xlist_init+0x6>
    3666:	00 d0       	rcall	.+0      	; 0x3668 <xlist_init+0x8>
    3668:	cd b7       	in	r28, 0x3d	; 61
    366a:	de b7       	in	r29, 0x3e	; 62
    366c:	9c 83       	std	Y+4, r25	; 0x04
    366e:	8b 83       	std	Y+3, r24	; 0x03
    count_t i;
    //список пуст
    xlist->index = (index_t)0;
    3670:	eb 81       	ldd	r30, Y+3	; 0x03
    3672:	fc 81       	ldd	r31, Y+4	; 0x04
    3674:	10 8a       	std	Z+16, r1	; 0x10
    //обнуляем указатели
    for( i = 0; i < BITS_IN_INDEX_T; i++ )xlist->item[i] = (item_t *)0;
    3676:	1a 82       	std	Y+2, r1	; 0x02
    3678:	19 82       	std	Y+1, r1	; 0x01
    367a:	10 c0       	rjmp	.+32     	; 0x369c <xlist_init+0x3c>
    367c:	89 81       	ldd	r24, Y+1	; 0x01
    367e:	9a 81       	ldd	r25, Y+2	; 0x02
    3680:	2b 81       	ldd	r18, Y+3	; 0x03
    3682:	3c 81       	ldd	r19, Y+4	; 0x04
    3684:	88 0f       	add	r24, r24
    3686:	99 1f       	adc	r25, r25
    3688:	f9 01       	movw	r30, r18
    368a:	e8 0f       	add	r30, r24
    368c:	f9 1f       	adc	r31, r25
    368e:	11 82       	std	Z+1, r1	; 0x01
    3690:	10 82       	st	Z, r1
    3692:	89 81       	ldd	r24, Y+1	; 0x01
    3694:	9a 81       	ldd	r25, Y+2	; 0x02
    3696:	01 96       	adiw	r24, 0x01	; 1
    3698:	9a 83       	std	Y+2, r25	; 0x02
    369a:	89 83       	std	Y+1, r24	; 0x01
    369c:	89 81       	ldd	r24, Y+1	; 0x01
    369e:	9a 81       	ldd	r25, Y+2	; 0x02
    36a0:	88 30       	cpi	r24, 0x08	; 8
    36a2:	91 05       	cpc	r25, r1
    36a4:	58 f3       	brcs	.-42     	; 0x367c <xlist_init+0x1c>
}
    36a6:	0f 90       	pop	r0
    36a8:	0f 90       	pop	r0
    36aa:	0f 90       	pop	r0
    36ac:	0f 90       	pop	r0
    36ae:	cf 91       	pop	r28
    36b0:	df 91       	pop	r29
    36b2:	08 95       	ret

000036b4 <xlist_head>:
//===========================================================================
//Поиск головы списка
item_t * xlist_head(xlist_t * xlist)
{
    36b4:	df 93       	push	r29
    36b6:	cf 93       	push	r28
    36b8:	00 d0       	rcall	.+0      	; 0x36ba <xlist_head+0x6>
    36ba:	00 d0       	rcall	.+0      	; 0x36bc <xlist_head+0x8>
    36bc:	0f 92       	push	r0
    36be:	cd b7       	in	r28, 0x3d	; 61
    36c0:	de b7       	in	r29, 0x3e	; 62
    36c2:	9d 83       	std	Y+5, r25	; 0x05
    36c4:	8c 83       	std	Y+4, r24	; 0x04
    item_t * ret_val = (item_t *)0;
    36c6:	1b 82       	std	Y+3, r1	; 0x03
    36c8:	1a 82       	std	Y+2, r1	; 0x02
    index_t index;
    index = xlist->index;
    36ca:	ec 81       	ldd	r30, Y+4	; 0x04
    36cc:	fd 81       	ldd	r31, Y+5	; 0x05
    36ce:	80 89       	ldd	r24, Z+16	; 0x10
    36d0:	89 83       	std	Y+1, r24	; 0x01

    if( index != (index_t)0 )
    36d2:	89 81       	ldd	r24, Y+1	; 0x01
    36d4:	88 23       	and	r24, r24
    36d6:	81 f0       	breq	.+32     	; 0x36f8 <xlist_head+0x44>
    {
        ret_val = xlist->item[ index_search( index ) ];
    36d8:	89 81       	ldd	r24, Y+1	; 0x01
    36da:	0e 94 f6 08 	call	0x11ec	; 0x11ec <index_search>
    36de:	88 2f       	mov	r24, r24
    36e0:	90 e0       	ldi	r25, 0x00	; 0
    36e2:	2c 81       	ldd	r18, Y+4	; 0x04
    36e4:	3d 81       	ldd	r19, Y+5	; 0x05
    36e6:	88 0f       	add	r24, r24
    36e8:	99 1f       	adc	r25, r25
    36ea:	f9 01       	movw	r30, r18
    36ec:	e8 0f       	add	r30, r24
    36ee:	f9 1f       	adc	r31, r25
    36f0:	80 81       	ld	r24, Z
    36f2:	91 81       	ldd	r25, Z+1	; 0x01
    36f4:	9b 83       	std	Y+3, r25	; 0x03
    36f6:	8a 83       	std	Y+2, r24	; 0x02
    }
    return ret_val;
    36f8:	8a 81       	ldd	r24, Y+2	; 0x02
    36fa:	9b 81       	ldd	r25, Y+3	; 0x03
}
    36fc:	0f 90       	pop	r0
    36fe:	0f 90       	pop	r0
    3700:	0f 90       	pop	r0
    3702:	0f 90       	pop	r0
    3704:	0f 90       	pop	r0
    3706:	cf 91       	pop	r28
    3708:	df 91       	pop	r29
    370a:	08 95       	ret

0000370c <xlist_switch>:

//===========================================================================
// переключение указателя в массиве на следующий элемент, пригодится в планировщике
void xlist_switch(xlist_t * xlist, prio_t prio)
{
    370c:	df 93       	push	r29
    370e:	cf 93       	push	r28
    3710:	00 d0       	rcall	.+0      	; 0x3712 <xlist_switch+0x6>
    3712:	00 d0       	rcall	.+0      	; 0x3714 <xlist_switch+0x8>
    3714:	0f 92       	push	r0
    3716:	cd b7       	in	r28, 0x3d	; 61
    3718:	de b7       	in	r29, 0x3e	; 62
    371a:	9c 83       	std	Y+4, r25	; 0x04
    371c:	8b 83       	std	Y+3, r24	; 0x03
    371e:	6d 83       	std	Y+5, r22	; 0x05
    item_t ** current;
    current = xlist->item + prio;
    3720:	2b 81       	ldd	r18, Y+3	; 0x03
    3722:	3c 81       	ldd	r19, Y+4	; 0x04
    3724:	8d 81       	ldd	r24, Y+5	; 0x05
    3726:	88 2f       	mov	r24, r24
    3728:	90 e0       	ldi	r25, 0x00	; 0
    372a:	88 0f       	add	r24, r24
    372c:	99 1f       	adc	r25, r25
    372e:	82 0f       	add	r24, r18
    3730:	93 1f       	adc	r25, r19
    3732:	9a 83       	std	Y+2, r25	; 0x02
    3734:	89 83       	std	Y+1, r24	; 0x01
    *current = (*current)->next;
    3736:	e9 81       	ldd	r30, Y+1	; 0x01
    3738:	fa 81       	ldd	r31, Y+2	; 0x02
    373a:	01 90       	ld	r0, Z+
    373c:	f0 81       	ld	r31, Z
    373e:	e0 2d       	mov	r30, r0
    3740:	80 81       	ld	r24, Z
    3742:	91 81       	ldd	r25, Z+1	; 0x01
    3744:	e9 81       	ldd	r30, Y+1	; 0x01
    3746:	fa 81       	ldd	r31, Y+2	; 0x02
    3748:	91 83       	std	Z+1, r25	; 0x01
    374a:	80 83       	st	Z, r24
    //*current = (item_t *)*(item_t **)*(item_t ***)current;
}
    374c:	0f 90       	pop	r0
    374e:	0f 90       	pop	r0
    3750:	0f 90       	pop	r0
    3752:	0f 90       	pop	r0
    3754:	0f 90       	pop	r0
    3756:	cf 91       	pop	r28
    3758:	df 91       	pop	r29
    375a:	08 95       	ret

0000375c <test_visr>:
 */

#include "../../arch/avr/gcc-vsmp/vsmp.h"

void test_visr(void)
{
    375c:	df 93       	push	r29
    375e:	cf 93       	push	r28
    3760:	cd b7       	in	r28, 0x3d	; 61
    3762:	de b7       	in	r29, 0x3e	; 62
    PORTB^=0x10;
    3764:	a5 e2       	ldi	r26, 0x25	; 37
    3766:	b0 e0       	ldi	r27, 0x00	; 0
    3768:	e5 e2       	ldi	r30, 0x25	; 37
    376a:	f0 e0       	ldi	r31, 0x00	; 0
    376c:	90 81       	ld	r25, Z
    376e:	80 e1       	ldi	r24, 0x10	; 16
    3770:	89 27       	eor	r24, r25
    3772:	8c 93       	st	X, r24
}
    3774:	cf 91       	pop	r28
    3776:	df 91       	pop	r29
    3778:	08 95       	ret

0000377a <test_visr2>:
void test_visr2(void)
{
    377a:	df 93       	push	r29
    377c:	cf 93       	push	r28
    377e:	cd b7       	in	r28, 0x3d	; 61
    3780:	de b7       	in	r29, 0x3e	; 62
    PORTB^=0x10;
    3782:	a5 e2       	ldi	r26, 0x25	; 37
    3784:	b0 e0       	ldi	r27, 0x00	; 0
    3786:	e5 e2       	ldi	r30, 0x25	; 37
    3788:	f0 e0       	ldi	r31, 0x00	; 0
    378a:	90 81       	ld	r25, Z
    378c:	80 e1       	ldi	r24, 0x10	; 16
    378e:	89 27       	eor	r24, r25
    3790:	8c 93       	st	X, r24
}
    3792:	cf 91       	pop	r28
    3794:	df 91       	pop	r29
    3796:	08 95       	ret

00003798 <main>:
vinterrupt_t test_vector2 = VINTERRUPT_INIT(test_vector2,test_visr2);
core_id_t i;
unsigned short j;

int main(void)
{
    3798:	df 93       	push	r29
    379a:	cf 93       	push	r28
    379c:	cd b7       	in	r28, 0x3d	; 61
    379e:	de b7       	in	r29, 0x3e	; 62
    vsmp_init();
    37a0:	0e 94 fe 04 	call	0x9fc	; 0x9fc <vsmp_init>

    TCCR2A = 0x02;//
    37a4:	e0 eb       	ldi	r30, 0xB0	; 176
    37a6:	f0 e0       	ldi	r31, 0x00	; 0
    37a8:	82 e0       	ldi	r24, 0x02	; 2
    37aa:	80 83       	st	Z, r24
    TCCR2B = 0x05;// prescaler=128
    37ac:	e1 eb       	ldi	r30, 0xB1	; 177
    37ae:	f0 e0       	ldi	r31, 0x00	; 0
    37b0:	85 e0       	ldi	r24, 0x05	; 5
    37b2:	80 83       	st	Z, r24
    OCR2A  = 124;
    37b4:	e3 eb       	ldi	r30, 0xB3	; 179
    37b6:	f0 e0       	ldi	r31, 0x00	; 0
    37b8:	8c e7       	ldi	r24, 0x7C	; 124
    37ba:	80 83       	st	Z, r24
    OCR2B  = 0x00;
    37bc:	e4 eb       	ldi	r30, 0xB4	; 180
    37be:	f0 e0       	ldi	r31, 0x00	; 0
    37c0:	10 82       	st	Z, r1
    TIMSK2 = 0x02;
    37c2:	e0 e7       	ldi	r30, 0x70	; 112
    37c4:	f0 e0       	ldi	r31, 0x00	; 0
    37c6:	82 e0       	ldi	r24, 0x02	; 2
    37c8:	80 83       	st	Z, r24
    TIFR2  = 0x00;
    37ca:	e7 e3       	ldi	r30, 0x37	; 55
    37cc:	f0 e0       	ldi	r31, 0x00	; 0
    37ce:	10 82       	st	Z, r1

    DDRB = 0x3F;
    37d0:	e4 e2       	ldi	r30, 0x24	; 36
    37d2:	f0 e0       	ldi	r31, 0x00	; 0
    37d4:	8f e3       	ldi	r24, 0x3F	; 63
    37d6:	80 83       	st	Z, r24
    PORTB = 0x00;
    37d8:	e5 e2       	ldi	r30, 0x25	; 37
    37da:	f0 e0       	ldi	r31, 0x00	; 0
    37dc:	10 82       	st	Z, r1
    DDRC = 0x3F;
    37de:	e7 e2       	ldi	r30, 0x27	; 39
    37e0:	f0 e0       	ldi	r31, 0x00	; 0
    37e2:	8f e3       	ldi	r24, 0x3F	; 63
    37e4:	80 83       	st	Z, r24
    PORTC = 0x00;
    37e6:	e8 e2       	ldi	r30, 0x28	; 40
    37e8:	f0 e0       	ldi	r31, 0x00	; 0
    37ea:	10 82       	st	Z, r1
    DDRD = 0xFE;
    37ec:	ea e2       	ldi	r30, 0x2A	; 42
    37ee:	f0 e0       	ldi	r31, 0x00	; 0
    37f0:	8e ef       	ldi	r24, 0xFE	; 254
    37f2:	80 83       	st	Z, r24
    PORTD = 0x00;
    37f4:	eb e2       	ldi	r30, 0x2B	; 43
    37f6:	f0 e0       	ldi	r31, 0x00	; 0
    37f8:	10 82       	st	Z, r1

    vsmp_run();
    37fa:	0e 94 66 05 	call	0xacc	; 0xacc <vsmp_run>

    for(i=0; i<MAX_CORES; i++)
    37fe:	10 92 0b 03 	sts	0x030B, r1
    3802:	2a c0       	rjmp	.+84     	; 0x3858 <main+0xc0>
    {
        cli();
    3804:	f8 94       	cli
        vsmp_vinterrupt_isr( i, &test_vector );
    3806:	80 91 0b 03 	lds	r24, 0x030B
    380a:	20 e0       	ldi	r18, 0x00	; 0
    380c:	31 e0       	ldi	r19, 0x01	; 1
    380e:	b9 01       	movw	r22, r18
    3810:	0e 94 10 07 	call	0xe20	; 0xe20 <vsmp_vinterrupt_isr>
        vsmp_vinterrupt( i, &test_vector2 );
    3814:	80 91 0b 03 	lds	r24, 0x030B
    3818:	26 e0       	ldi	r18, 0x06	; 6
    381a:	31 e0       	ldi	r19, 0x01	; 1
    381c:	b9 01       	movw	r22, r18
    381e:	0e 94 57 07 	call	0xeae	; 0xeae <vsmp_vinterrupt>
        for(j=0;j<1000;j++);
    3822:	10 92 0a 03 	sts	0x030A, r1
    3826:	10 92 09 03 	sts	0x0309, r1
    382a:	09 c0       	rjmp	.+18     	; 0x383e <main+0xa6>
    382c:	80 91 09 03 	lds	r24, 0x0309
    3830:	90 91 0a 03 	lds	r25, 0x030A
    3834:	01 96       	adiw	r24, 0x01	; 1
    3836:	90 93 0a 03 	sts	0x030A, r25
    383a:	80 93 09 03 	sts	0x0309, r24
    383e:	80 91 09 03 	lds	r24, 0x0309
    3842:	90 91 0a 03 	lds	r25, 0x030A
    3846:	23 e0       	ldi	r18, 0x03	; 3
    3848:	88 3e       	cpi	r24, 0xE8	; 232
    384a:	92 07       	cpc	r25, r18
    384c:	78 f3       	brcs	.-34     	; 0x382c <main+0x94>
    DDRD = 0xFE;
    PORTD = 0x00;

    vsmp_run();

    for(i=0; i<MAX_CORES; i++)
    384e:	80 91 0b 03 	lds	r24, 0x030B
    3852:	8f 5f       	subi	r24, 0xFF	; 255
    3854:	80 93 0b 03 	sts	0x030B, r24
    3858:	80 91 0b 03 	lds	r24, 0x030B
    385c:	82 30       	cpi	r24, 0x02	; 2
    385e:	90 f2       	brcs	.-92     	; 0x3804 <main+0x6c>
        cli();
        vsmp_vinterrupt_isr( i, &test_vector );
        vsmp_vinterrupt( i, &test_vector2 );
        for(j=0;j<1000;j++);
    }
    for(i=0; i<MAX_CORES; i++)
    3860:	10 92 0b 03 	sts	0x030B, r1
    3864:	2a c0       	rjmp	.+84     	; 0x38ba <main+0x122>
    {
        cli();
    3866:	f8 94       	cli
        vsmp_vinterrupt_isr( i, &test_vector );
    3868:	80 91 0b 03 	lds	r24, 0x030B
    386c:	20 e0       	ldi	r18, 0x00	; 0
    386e:	31 e0       	ldi	r19, 0x01	; 1
    3870:	b9 01       	movw	r22, r18
    3872:	0e 94 10 07 	call	0xe20	; 0xe20 <vsmp_vinterrupt_isr>
        vsmp_vinterrupt( i, &test_vector2 );
    3876:	80 91 0b 03 	lds	r24, 0x030B
    387a:	26 e0       	ldi	r18, 0x06	; 6
    387c:	31 e0       	ldi	r19, 0x01	; 1
    387e:	b9 01       	movw	r22, r18
    3880:	0e 94 57 07 	call	0xeae	; 0xeae <vsmp_vinterrupt>
        for(j=0;j<1000;j++);
    3884:	10 92 0a 03 	sts	0x030A, r1
    3888:	10 92 09 03 	sts	0x0309, r1
    388c:	09 c0       	rjmp	.+18     	; 0x38a0 <main+0x108>
    388e:	80 91 09 03 	lds	r24, 0x0309
    3892:	90 91 0a 03 	lds	r25, 0x030A
    3896:	01 96       	adiw	r24, 0x01	; 1
    3898:	90 93 0a 03 	sts	0x030A, r25
    389c:	80 93 09 03 	sts	0x0309, r24
    38a0:	80 91 09 03 	lds	r24, 0x0309
    38a4:	90 91 0a 03 	lds	r25, 0x030A
    38a8:	23 e0       	ldi	r18, 0x03	; 3
    38aa:	88 3e       	cpi	r24, 0xE8	; 232
    38ac:	92 07       	cpc	r25, r18
    38ae:	78 f3       	brcs	.-34     	; 0x388e <main+0xf6>
        cli();
        vsmp_vinterrupt_isr( i, &test_vector );
        vsmp_vinterrupt( i, &test_vector2 );
        for(j=0;j<1000;j++);
    }
    for(i=0; i<MAX_CORES; i++)
    38b0:	80 91 0b 03 	lds	r24, 0x030B
    38b4:	8f 5f       	subi	r24, 0xFF	; 255
    38b6:	80 93 0b 03 	sts	0x030B, r24
    38ba:	80 91 0b 03 	lds	r24, 0x030B
    38be:	82 30       	cpi	r24, 0x02	; 2
    38c0:	90 f2       	brcs	.-92     	; 0x3866 <main+0xce>
        vsmp_vinterrupt_isr( i, &test_vector );
        vsmp_vinterrupt( i, &test_vector2 );
        for(j=0;j<1000;j++);
    }

    init_bugurt();
    38c2:	0e 94 72 04 	call	0x8e4	; 0x8e4 <init_bugurt>
    start_bugurt();
    38c6:	0e 94 b7 04 	call	0x96e	; 0x96e <start_bugurt>

    return 0;
    38ca:	80 e0       	ldi	r24, 0x00	; 0
    38cc:	90 e0       	ldi	r25, 0x00	; 0
}
    38ce:	cf 91       	pop	r28
    38d0:	df 91       	pop	r29
    38d2:	08 95       	ret

000038d4 <_exit>:
    38d4:	f8 94       	cli

000038d6 <__stop_program>:
    38d6:	ff cf       	rjmp	.-2      	; 0x38d6 <__stop_program>
