
bin/Debug/arduino328-test-1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000026e6  0000277a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000026e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003b0  00800102  00800102  0000277c  2**0
                  ALLOC
  3 .stab         000071dc  00000000  00000000  0000277c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000365f  00000000  00000000  00009958  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       8:	0c 94 15 02 	jmp	0x42a	; 0x42a <__vector_2>
       c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 42 01 	jmp	0x284	; 0x284 <__vector_7>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      54:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

00000068 <syscall_routine>:
      68:	74 02 bd 02 f5 02 2c 03 46 03 6b 03 ce 03 df 03     t.....,.F.k.....
      78:	ef 03 ff 03 0f 04 1f 04 36 04 50 04 60 04 76 04     ........6.P.`.v.
      88:	90 04 aa 04                                         ....

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e6 ee       	ldi	r30, 0xE6	; 230
      a0:	f6 e2       	ldi	r31, 0x26	; 38
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <.do_copy_data_start>

000000a4 <.do_copy_data_loop>:
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0

000000a8 <.do_copy_data_start>:
      a8:	a2 30       	cpi	r26, 0x02	; 2
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <.do_copy_data_loop>

000000ae <__do_clear_bss>:
      ae:	14 e0       	ldi	r17, 0x04	; 4
      b0:	a2 e0       	ldi	r26, 0x02	; 2
      b2:	b1 e0       	ldi	r27, 0x01	; 1
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	a2 3b       	cpi	r26, 0xB2	; 178
      ba:	b1 07       	cpc	r27, r17
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 80 12 	call	0x2500	; 0x2500 <main>
      c2:	0c 94 71 13 	jmp	0x26e2	; 0x26e2 <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <osbme_store_context>:
      ca:	2f 92       	push	r2
      cc:	2f b6       	in	r2, 0x3f	; 63
      ce:	2f 92       	push	r2
      d0:	3f 92       	push	r3
      d2:	4f 92       	push	r4
      d4:	5f 92       	push	r5
      d6:	6f 92       	push	r6
      d8:	7f 92       	push	r7
      da:	8f 92       	push	r8
      dc:	9f 92       	push	r9
      de:	af 92       	push	r10
      e0:	bf 92       	push	r11
      e2:	cf 92       	push	r12
      e4:	df 92       	push	r13
      e6:	ef 92       	push	r14
      e8:	ff 92       	push	r15
      ea:	0f 93       	push	r16
      ec:	1f 93       	push	r17
      ee:	2f 93       	push	r18
      f0:	3f 93       	push	r19
      f2:	4f 93       	push	r20
      f4:	5f 93       	push	r21
      f6:	6f 93       	push	r22
      f8:	7f 93       	push	r23
      fa:	8f 93       	push	r24
      fc:	9f 93       	push	r25
      fe:	af 93       	push	r26
     100:	bf 93       	push	r27
     102:	cf 93       	push	r28
     104:	df 93       	push	r29
     106:	ef 93       	push	r30
     108:	ff 93       	push	r31
     10a:	ed b7       	in	r30, 0x3d	; 61
     10c:	fe b7       	in	r31, 0x3e	; 62
     10e:	21 a1       	ldd	r18, Z+33	; 0x21
     110:	30 a1       	ldd	r19, Z+32	; 0x20
     112:	01 a2       	std	Z+33, r0	; 0x21
     114:	10 a2       	std	Z+32, r1	; 0x20
     116:	11 24       	eor	r1, r1
     118:	8d b7       	in	r24, 0x3d	; 61
     11a:	9e b7       	in	r25, 0x3e	; 62
     11c:	2f 93       	push	r18
     11e:	3f 93       	push	r19
     120:	08 95       	ret

00000122 <osbme_load_context>:
     122:	3f 91       	pop	r19
     124:	2f 91       	pop	r18
     126:	9e bf       	out	0x3e, r25	; 62
     128:	8d bf       	out	0x3d, r24	; 61
     12a:	fe b7       	in	r31, 0x3e	; 62
     12c:	ed b7       	in	r30, 0x3d	; 61
     12e:	10 a0       	ldd	r1, Z+32	; 0x20
     130:	01 a0       	ldd	r0, Z+33	; 0x21
     132:	30 a3       	std	Z+32, r19	; 0x20
     134:	21 a3       	std	Z+33, r18	; 0x21
     136:	ff 91       	pop	r31
     138:	ef 91       	pop	r30
     13a:	df 91       	pop	r29
     13c:	cf 91       	pop	r28
     13e:	bf 91       	pop	r27
     140:	af 91       	pop	r26
     142:	9f 91       	pop	r25
     144:	8f 91       	pop	r24
     146:	7f 91       	pop	r23
     148:	6f 91       	pop	r22
     14a:	5f 91       	pop	r21
     14c:	4f 91       	pop	r20
     14e:	3f 91       	pop	r19
     150:	2f 91       	pop	r18
     152:	1f 91       	pop	r17
     154:	0f 91       	pop	r16
     156:	ff 90       	pop	r15
     158:	ef 90       	pop	r14
     15a:	df 90       	pop	r13
     15c:	cf 90       	pop	r12
     15e:	bf 90       	pop	r11
     160:	af 90       	pop	r10
     162:	9f 90       	pop	r9
     164:	8f 90       	pop	r8
     166:	7f 90       	pop	r7
     168:	6f 90       	pop	r6
     16a:	5f 90       	pop	r5
     16c:	4f 90       	pop	r4
     16e:	3f 90       	pop	r3
     170:	2f 90       	pop	r2
     172:	2f be       	out	0x3f, r2	; 63
     174:	2f 90       	pop	r2
     176:	08 95       	ret

00000178 <disable_interrupts>:
//Внешние функции, специфичные для AVR
extern void start_scheduler( void );
extern void stop_scheduler( void );
// Просто функции, специфичные для AVR
void disable_interrupts(void)
{
     178:	df 93       	push	r29
     17a:	cf 93       	push	r28
     17c:	cd b7       	in	r28, 0x3d	; 61
     17e:	de b7       	in	r29, 0x3e	; 62
    cli();
     180:	f8 94       	cli
}
     182:	cf 91       	pop	r28
     184:	df 91       	pop	r29
     186:	08 95       	ret

00000188 <enable_interrupts>:
void enable_interrupts(void)
{
     188:	df 93       	push	r29
     18a:	cf 93       	push	r28
     18c:	cd b7       	in	r28, 0x3d	; 61
     18e:	de b7       	in	r29, 0x3e	; 62
    sei();
     190:	78 94       	sei
}
     192:	cf 91       	pop	r28
     194:	df 91       	pop	r29
     196:	08 95       	ret

00000198 <current_proc>:

proc_t * current_proc(void)
{
     198:	df 93       	push	r29
     19a:	cf 93       	push	r28
     19c:	cd b7       	in	r28, 0x3d	; 61
     19e:	de b7       	in	r29, 0x3e	; 62
    return kernel.sched.current_proc;
     1a0:	80 91 9e 01 	lds	r24, 0x019E
     1a4:	90 91 9f 01 	lds	r25, 0x019F
}
     1a8:	cf 91       	pop	r28
     1aa:	df 91       	pop	r29
     1ac:	08 95       	ret

000001ae <proc_stack_init>:

void * proc_stack_init(stack_t * sstart, code_t code, void * arg)
{
     1ae:	df 93       	push	r29
     1b0:	cf 93       	push	r28
     1b2:	00 d0       	rcall	.+0      	; 0x1b4 <proc_stack_init+0x6>
     1b4:	00 d0       	rcall	.+0      	; 0x1b6 <proc_stack_init+0x8>
     1b6:	00 d0       	rcall	.+0      	; 0x1b8 <proc_stack_init+0xa>
     1b8:	cd b7       	in	r28, 0x3d	; 61
     1ba:	de b7       	in	r29, 0x3e	; 62
     1bc:	9a 83       	std	Y+2, r25	; 0x02
     1be:	89 83       	std	Y+1, r24	; 0x01
     1c0:	7c 83       	std	Y+4, r23	; 0x04
     1c2:	6b 83       	std	Y+3, r22	; 0x03
     1c4:	5e 83       	std	Y+6, r21	; 0x06
     1c6:	4d 83       	std	Y+5, r20	; 0x05
    return osbme_init_stack( (void *)sstart, (osbme_code_t)proc_run_wrapper, (void *)arg );
     1c8:	43 ea       	ldi	r20, 0xA3	; 163
     1ca:	53 e0       	ldi	r21, 0x03	; 3
     1cc:	89 81       	ldd	r24, Y+1	; 0x01
     1ce:	9a 81       	ldd	r25, Y+2	; 0x02
     1d0:	2d 81       	ldd	r18, Y+5	; 0x05
     1d2:	3e 81       	ldd	r19, Y+6	; 0x06
     1d4:	ba 01       	movw	r22, r20
     1d6:	a9 01       	movw	r20, r18
     1d8:	0e 94 ba 04 	call	0x974	; 0x974 <osbme_init_stack>
}
     1dc:	26 96       	adiw	r28, 0x06	; 6
     1de:	0f b6       	in	r0, 0x3f	; 63
     1e0:	f8 94       	cli
     1e2:	de bf       	out	0x3e, r29	; 62
     1e4:	0f be       	out	0x3f, r0	; 63
     1e6:	cd bf       	out	0x3d, r28	; 61
     1e8:	cf 91       	pop	r28
     1ea:	df 91       	pop	r29
     1ec:	08 95       	ret

000001ee <resched>:
//Через этот указатель будет вызываться обработчик прерывания
void (*kernel_isr)(void);

// Функция перепланировки
void resched(void)
{
     1ee:	df 93       	push	r29
     1f0:	cf 93       	push	r28
     1f2:	cd b7       	in	r28, 0x3d	; 61
     1f4:	de b7       	in	r29, 0x3e	; 62
    kernel_state |= KRN_FLG_RESCHED;
     1f6:	80 91 00 01 	lds	r24, 0x0100
     1fa:	81 60       	ori	r24, 0x01	; 1
     1fc:	80 93 00 01 	sts	0x0100, r24
}
     200:	cf 91       	pop	r28
     202:	df 91       	pop	r29
     204:	08 95       	ret

00000206 <kernel_process_switch>:

__attribute__((naked)) void kernel_process_switch(void)
{
    //Сразу же после обработки отложенных прерываний передаем управление процессу
    kernel_sp = osbme_store_context();
     206:	0e 94 65 00 	call	0xca	; 0xca <osbme_store_context>
     20a:	90 93 9d 01 	sts	0x019D, r25
     20e:	80 93 9c 01 	sts	0x019C, r24
    osbme_load_context( proc_sp );
     212:	80 91 9a 01 	lds	r24, 0x019A
     216:	90 91 9b 01 	lds	r25, 0x019B
     21a:	0e 94 91 00 	call	0x122	; 0x122 <osbme_load_context>
    __asm__ __volatile__("reti"::);/// Дада, именно reti, мы же типа прерывания счас обрабатывали
     21e:	18 95       	reti

00000220 <kernel_thread>:
    osbme_load_context( kernel_sp );
    __asm__ __volatile__("ret"::);
}
///================================================================
void kernel_thread(void)
{
     220:	df 93       	push	r29
     222:	cf 93       	push	r28
     224:	cd b7       	in	r28, 0x3d	; 61
     226:	de b7       	in	r29, 0x3e	; 62
    while(1)
    {
        // Если надо перепланировать - перепланируем
        if( kernel_state & KRN_FLG_RESCHED )
     228:	80 91 00 01 	lds	r24, 0x0100
     22c:	88 2f       	mov	r24, r24
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	81 70       	andi	r24, 0x01	; 1
     232:	90 70       	andi	r25, 0x00	; 0
     234:	88 23       	and	r24, r24
     236:	79 f0       	breq	.+30     	; 0x256 <kernel_thread+0x36>
        {
            kernel_state &= ~KRN_FLG_RESCHED;
     238:	80 91 00 01 	lds	r24, 0x0100
     23c:	8e 7f       	andi	r24, 0xFE	; 254
     23e:	80 93 00 01 	sts	0x0100, r24
            proc_sp = sched_reschedule( proc_sp );
     242:	80 91 9a 01 	lds	r24, 0x019A
     246:	90 91 9b 01 	lds	r25, 0x019B
     24a:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <sched_reschedule>
     24e:	90 93 9b 01 	sts	0x019B, r25
     252:	80 93 9a 01 	sts	0x019A, r24
        }
        /// Прямая передача управления от ядра к процессу, прерывания запрещены
        kernel_process_switch();//В результате выполнения этого прерывания будут разрешены
     256:	0e 94 03 01 	call	0x206	; 0x206 <kernel_process_switch>
        /// Сюда можно попасть только из прерывания, либо из процесса, при этом прерывания опять таки запрещены

        #ifdef SYSCALL_ISR
        if( kernel_state & KRN_FLG_GET_SDATA )
     25a:	80 91 00 01 	lds	r24, 0x0100
     25e:	88 2f       	mov	r24, r24
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	84 70       	andi	r24, 0x04	; 4
     264:	90 70       	andi	r25, 0x00	; 0
     266:	00 97       	sbiw	r24, 0x00	; 0
     268:	39 f0       	breq	.+14     	; 0x278 <kernel_thread+0x58>
        {
            syscall_data_get();
     26a:	0e 94 d7 01 	call	0x3ae	; 0x3ae <syscall_data_get>
            kernel_state &= ~KRN_FLG_GET_SDATA;
     26e:	80 91 00 01 	lds	r24, 0x0100
     272:	8b 7f       	andi	r24, 0xFB	; 251
     274:	80 93 00 01 	sts	0x0100, r24
        }
        #endif

        // Обработка прерывания
        kernel_isr();
     278:	e0 91 98 01 	lds	r30, 0x0198
     27c:	f0 91 99 01 	lds	r31, 0x0199
     280:	09 95       	icall
     282:	d2 cf       	rjmp	.-92     	; 0x228 <kernel_thread+0x8>

00000284 <__vector_7>:
    }
}

// А вот и первое определение обработчика прерывания
BUGURT_INTERRUPT(SYSTEM_TIMER_ISR)
     284:	0e 94 65 00 	call	0xca	; 0xca <osbme_store_context>
     288:	90 93 9b 01 	sts	0x019B, r25
     28c:	80 93 9a 01 	sts	0x019A, r24
     290:	85 e5       	ldi	r24, 0x55	; 85
     292:	91 e0       	ldi	r25, 0x01	; 1
     294:	90 93 99 01 	sts	0x0199, r25
     298:	80 93 98 01 	sts	0x0198, r24
     29c:	80 91 9c 01 	lds	r24, 0x019C
     2a0:	90 91 9d 01 	lds	r25, 0x019D
     2a4:	0e 94 91 00 	call	0x122	; 0x122 <osbme_load_context>
     2a8:	08 95       	ret

000002aa <__vector_7_func>:
{
     2aa:	df 93       	push	r29
     2ac:	cf 93       	push	r28
     2ae:	cd b7       	in	r28, 0x3d	; 61
     2b0:	de b7       	in	r29, 0x3e	; 62
    kernel.timer++;
     2b2:	80 91 f8 01 	lds	r24, 0x01F8
     2b6:	90 91 f9 01 	lds	r25, 0x01F9
     2ba:	01 96       	adiw	r24, 0x01	; 1
     2bc:	90 93 f9 01 	sts	0x01F9, r25
     2c0:	80 93 f8 01 	sts	0x01F8, r24
    proc_sp = sched_schedule( proc_sp );
     2c4:	80 91 9a 01 	lds	r24, 0x019A
     2c8:	90 91 9b 01 	lds	r25, 0x019B
     2cc:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <sched_schedule>
     2d0:	90 93 9b 01 	sts	0x019B, r25
     2d4:	80 93 9a 01 	sts	0x019A, r24
}
     2d8:	cf 91       	pop	r28
     2da:	df 91       	pop	r29
     2dc:	08 95       	ret

000002de <init_bugurt>:

/***************************************************************************************************************/
// Функции общего пользования

void init_bugurt(void)
{
     2de:	df 93       	push	r29
     2e0:	cf 93       	push	r28
     2e2:	cd b7       	in	r28, 0x3d	; 61
     2e4:	de b7       	in	r29, 0x3e	; 62
    cli();
     2e6:	f8 94       	cli
    kernel_init();
     2e8:	0e 94 bc 09 	call	0x1378	; 0x1378 <kernel_init>
    proc_sp = osbme_init_stack( &idle_stack[CONFIG_IDLE_STACK_SIZE-1], idle_main, 0);
     2ec:	87 e9       	ldi	r24, 0x97	; 151
     2ee:	91 e0       	ldi	r25, 0x01	; 1
     2f0:	28 e5       	ldi	r18, 0x58	; 88
     2f2:	32 e1       	ldi	r19, 0x12	; 18
     2f4:	b9 01       	movw	r22, r18
     2f6:	40 e0       	ldi	r20, 0x00	; 0
     2f8:	50 e0       	ldi	r21, 0x00	; 0
     2fa:	0e 94 ba 04 	call	0x974	; 0x974 <osbme_init_stack>
     2fe:	90 93 9b 01 	sts	0x019B, r25
     302:	80 93 9a 01 	sts	0x019A, r24
    kernel.idle.spointer = proc_sp;
     306:	80 91 9a 01 	lds	r24, 0x019A
     30a:	90 91 9b 01 	lds	r25, 0x019B
     30e:	90 93 f5 01 	sts	0x01F5, r25
     312:	80 93 f4 01 	sts	0x01F4, r24
    kernel.sched.nested_crit_sec = (count_t)1;
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	90 93 c7 01 	sts	0x01C7, r25
     31e:	80 93 c6 01 	sts	0x01C6, r24
}
     322:	cf 91       	pop	r28
     324:	df 91       	pop	r29
     326:	08 95       	ret

00000328 <start_bugurt>:
void start_bugurt(void)
{
     328:	df 93       	push	r29
     32a:	cf 93       	push	r28
     32c:	cd b7       	in	r28, 0x3d	; 61
     32e:	de b7       	in	r29, 0x3e	; 62
    start_scheduler();
     330:	0e 94 90 11 	call	0x2320	; 0x2320 <start_scheduler>
    kernel.sched.nested_crit_sec = (count_t)0;
     334:	10 92 c7 01 	sts	0x01C7, r1
     338:	10 92 c6 01 	sts	0x01C6, r1
    kernel_thread();
     33c:	0e 94 10 01 	call	0x220	; 0x220 <kernel_thread>
}
     340:	cf 91       	pop	r28
     342:	df 91       	pop	r29
     344:	08 95       	ret

00000346 <do_syscall>:
    scall_mutex_try_lock,
    scall_mutex_unlock
};

void do_syscall(void)
{
     346:	df 93       	push	r29
     348:	cf 93       	push	r28
     34a:	00 d0       	rcall	.+0      	; 0x34c <do_syscall+0x6>
     34c:	00 d0       	rcall	.+0      	; 0x34e <do_syscall+0x8>
     34e:	00 d0       	rcall	.+0      	; 0x350 <do_syscall+0xa>
     350:	cd b7       	in	r28, 0x3d	; 61
     352:	de b7       	in	r29, 0x3e	; 62
    if( syscall_num != (unsigned char)0 )
     354:	80 91 02 01 	lds	r24, 0x0102
     358:	88 23       	and	r24, r24
     35a:	01 f1       	breq	.+64     	; 0x39c <do_syscall+0x56>
    {
        code_t syscall_func;
        syscall_func = (code_t)pgm_read_word(syscall_routine + syscall_num);
     35c:	80 91 02 01 	lds	r24, 0x0102
     360:	88 2f       	mov	r24, r24
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	88 0f       	add	r24, r24
     366:	99 1f       	adc	r25, r25
     368:	88 59       	subi	r24, 0x98	; 152
     36a:	9f 4f       	sbci	r25, 0xFF	; 255
     36c:	9c 83       	std	Y+4, r25	; 0x04
     36e:	8b 83       	std	Y+3, r24	; 0x03
     370:	8b 81       	ldd	r24, Y+3	; 0x03
     372:	9c 81       	ldd	r25, Y+4	; 0x04
     374:	fc 01       	movw	r30, r24
     376:	85 91       	lpm	r24, Z+
     378:	94 91       	lpm	r25, Z+
     37a:	9a 83       	std	Y+2, r25	; 0x02
     37c:	89 83       	std	Y+1, r24	; 0x01
     37e:	fc 83       	std	Y+4, r31	; 0x04
     380:	eb 83       	std	Y+3, r30	; 0x03
     382:	89 81       	ldd	r24, Y+1	; 0x01
     384:	9a 81       	ldd	r25, Y+2	; 0x02
     386:	9e 83       	std	Y+6, r25	; 0x06
     388:	8d 83       	std	Y+5, r24	; 0x05
        syscall_func(syscall_arg);
     38a:	80 91 03 01 	lds	r24, 0x0103
     38e:	90 91 04 01 	lds	r25, 0x0104
     392:	ed 81       	ldd	r30, Y+5	; 0x05
     394:	fe 81       	ldd	r31, Y+6	; 0x06
     396:	09 95       	icall
        syscall_num = (unsigned char)0;
     398:	10 92 02 01 	sts	0x0102, r1
    }
}
     39c:	26 96       	adiw	r28, 0x06	; 6
     39e:	0f b6       	in	r0, 0x3f	; 63
     3a0:	f8 94       	cli
     3a2:	de bf       	out	0x3e, r29	; 62
     3a4:	0f be       	out	0x3f, r0	; 63
     3a6:	cd bf       	out	0x3d, r28	; 61
     3a8:	cf 91       	pop	r28
     3aa:	df 91       	pop	r29
     3ac:	08 95       	ret

000003ae <syscall_data_get>:
    unsigned char num;
    void * arg;
} syscall_data_t;

void syscall_data_get(void)
{
     3ae:	df 93       	push	r29
     3b0:	cf 93       	push	r28
     3b2:	00 d0       	rcall	.+0      	; 0x3b4 <syscall_data_get+0x6>
     3b4:	00 d0       	rcall	.+0      	; 0x3b6 <syscall_data_get+0x8>
     3b6:	cd b7       	in	r28, 0x3d	; 61
     3b8:	de b7       	in	r29, 0x3e	; 62
    unsigned char * tos;
    unsigned short temp;
    /// Извлечение syscall_num и syscall_arg из стека процесса
    tos = (unsigned char *)proc_sp + PROC_STACK_OFFSET;
     3ba:	80 91 9a 01 	lds	r24, 0x019A
     3be:	90 91 9b 01 	lds	r25, 0x019B
     3c2:	07 96       	adiw	r24, 0x07	; 7
     3c4:	9c 83       	std	Y+4, r25	; 0x04
     3c6:	8b 83       	std	Y+3, r24	; 0x03
    temp = (unsigned short)*tos++;
     3c8:	eb 81       	ldd	r30, Y+3	; 0x03
     3ca:	fc 81       	ldd	r31, Y+4	; 0x04
     3cc:	80 81       	ld	r24, Z
     3ce:	88 2f       	mov	r24, r24
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	9a 83       	std	Y+2, r25	; 0x02
     3d4:	89 83       	std	Y+1, r24	; 0x01
     3d6:	8b 81       	ldd	r24, Y+3	; 0x03
     3d8:	9c 81       	ldd	r25, Y+4	; 0x04
     3da:	01 96       	adiw	r24, 0x01	; 1
     3dc:	9c 83       	std	Y+4, r25	; 0x04
     3de:	8b 83       	std	Y+3, r24	; 0x03
    temp <<= 8;
     3e0:	89 81       	ldd	r24, Y+1	; 0x01
     3e2:	9a 81       	ldd	r25, Y+2	; 0x02
     3e4:	98 2f       	mov	r25, r24
     3e6:	88 27       	eor	r24, r24
     3e8:	9a 83       	std	Y+2, r25	; 0x02
     3ea:	89 83       	std	Y+1, r24	; 0x01
    temp |= (unsigned short)*tos;
     3ec:	eb 81       	ldd	r30, Y+3	; 0x03
     3ee:	fc 81       	ldd	r31, Y+4	; 0x04
     3f0:	80 81       	ld	r24, Z
     3f2:	28 2f       	mov	r18, r24
     3f4:	30 e0       	ldi	r19, 0x00	; 0
     3f6:	89 81       	ldd	r24, Y+1	; 0x01
     3f8:	9a 81       	ldd	r25, Y+2	; 0x02
     3fa:	82 2b       	or	r24, r18
     3fc:	93 2b       	or	r25, r19
     3fe:	9a 83       	std	Y+2, r25	; 0x02
     400:	89 83       	std	Y+1, r24	; 0x01

    syscall_num = ((syscall_data_t *)temp)->num;
     402:	e9 81       	ldd	r30, Y+1	; 0x01
     404:	fa 81       	ldd	r31, Y+2	; 0x02
     406:	80 81       	ld	r24, Z
     408:	80 93 02 01 	sts	0x0102, r24
    syscall_arg = ((syscall_data_t *)temp)->arg;
     40c:	e9 81       	ldd	r30, Y+1	; 0x01
     40e:	fa 81       	ldd	r31, Y+2	; 0x02
     410:	81 81       	ldd	r24, Z+1	; 0x01
     412:	92 81       	ldd	r25, Z+2	; 0x02
     414:	90 93 04 01 	sts	0x0104, r25
     418:	80 93 03 01 	sts	0x0103, r24
}
     41c:	0f 90       	pop	r0
     41e:	0f 90       	pop	r0
     420:	0f 90       	pop	r0
     422:	0f 90       	pop	r0
     424:	cf 91       	pop	r28
     426:	df 91       	pop	r29
     428:	08 95       	ret

0000042a <__vector_2>:

BUGURT_INTERRUPT(SYSCALL_ISR)
     42a:	0e 94 65 00 	call	0xca	; 0xca <osbme_store_context>
     42e:	90 93 9b 01 	sts	0x019B, r25
     432:	80 93 9a 01 	sts	0x019A, r24
     436:	88 e2       	ldi	r24, 0x28	; 40
     438:	92 e0       	ldi	r25, 0x02	; 2
     43a:	90 93 99 01 	sts	0x0199, r25
     43e:	80 93 98 01 	sts	0x0198, r24
     442:	80 91 9c 01 	lds	r24, 0x019C
     446:	90 91 9d 01 	lds	r25, 0x019D
     44a:	0e 94 91 00 	call	0x122	; 0x122 <osbme_load_context>
     44e:	08 95       	ret

00000450 <__vector_2_func>:
{
     450:	df 93       	push	r29
     452:	cf 93       	push	r28
     454:	cd b7       	in	r28, 0x3d	; 61
     456:	de b7       	in	r29, 0x3e	; 62
    temp |= (unsigned short)*tos;

    syscall_num = ((syscall_data_t *)temp)->num;
    syscall_arg = ((syscall_data_t *)temp)->arg;
    */
    do_syscall();
     458:	0e 94 a3 01 	call	0x346	; 0x346 <do_syscall>
    kernel_state &= ~KRN_FLG_DO_SCALL;
     45c:	80 91 00 01 	lds	r24, 0x0100
     460:	8d 7f       	andi	r24, 0xFD	; 253
     462:	80 93 00 01 	sts	0x0100, r24

}
     466:	cf 91       	pop	r28
     468:	df 91       	pop	r29
     46a:	08 95       	ret

0000046c <_syscall>:

syscall_data_t * _syscall( syscall_data_t * arg )
{
     46c:	df 93       	push	r29
     46e:	cf 93       	push	r28
     470:	00 d0       	rcall	.+0      	; 0x472 <_syscall+0x6>
     472:	cd b7       	in	r28, 0x3d	; 61
     474:	de b7       	in	r29, 0x3e	; 62
     476:	9a 83       	std	Y+2, r25	; 0x02
     478:	89 83       	std	Y+1, r24	; 0x01
    cli();
     47a:	f8 94       	cli
    kernel_state |= (KRN_FLG_DO_SCALL | KRN_FLG_GET_SDATA);
     47c:	80 91 00 01 	lds	r24, 0x0100
     480:	86 60       	ori	r24, 0x06	; 6
     482:	80 93 00 01 	sts	0x0100, r24
    raise_syscall_interrupt();
     486:	0e 94 6d 11 	call	0x22da	; 0x22da <raise_syscall_interrupt>
    sei();
     48a:	78 94       	sei
    return arg;
     48c:	89 81       	ldd	r24, Y+1	; 0x01
     48e:	9a 81       	ldd	r25, Y+2	; 0x02
}
     490:	0f 90       	pop	r0
     492:	0f 90       	pop	r0
     494:	cf 91       	pop	r28
     496:	df 91       	pop	r29
     498:	08 95       	ret

0000049a <syscall>:

static syscall_data_t scdata;
void syscall( unsigned char num, void * arg )
{
     49a:	df 93       	push	r29
     49c:	cf 93       	push	r28
     49e:	00 d0       	rcall	.+0      	; 0x4a0 <syscall+0x6>
     4a0:	0f 92       	push	r0
     4a2:	cd b7       	in	r28, 0x3d	; 61
     4a4:	de b7       	in	r29, 0x3e	; 62
     4a6:	89 83       	std	Y+1, r24	; 0x01
     4a8:	7b 83       	std	Y+3, r23	; 0x03
     4aa:	6a 83       	std	Y+2, r22	; 0x02
     scdata.num = num;
     4ac:	89 81       	ldd	r24, Y+1	; 0x01
     4ae:	80 93 15 01 	sts	0x0115, r24
     scdata.arg = arg;
     4b2:	8a 81       	ldd	r24, Y+2	; 0x02
     4b4:	9b 81       	ldd	r25, Y+3	; 0x03
     4b6:	90 93 17 01 	sts	0x0117, r25
     4ba:	80 93 16 01 	sts	0x0116, r24
     _syscall( &scdata );
     4be:	85 e1       	ldi	r24, 0x15	; 21
     4c0:	91 e0       	ldi	r25, 0x01	; 1
     4c2:	0e 94 36 02 	call	0x46c	; 0x46c <_syscall>
     SYSCALL_DELLAY();
     4c6:	00 00       	nop
     4c8:	00 00       	nop
     4ca:	00 00       	nop
     while( kernel_state & KRN_FLG_DO_SCALL );
     4cc:	80 91 00 01 	lds	r24, 0x0100
     4d0:	88 2f       	mov	r24, r24
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	82 70       	andi	r24, 0x02	; 2
     4d6:	90 70       	andi	r25, 0x00	; 0
     4d8:	00 97       	sbiw	r24, 0x00	; 0
     4da:	c1 f7       	brne	.-16     	; 0x4cc <syscall+0x32>
}
     4dc:	0f 90       	pop	r0
     4de:	0f 90       	pop	r0
     4e0:	0f 90       	pop	r0
     4e2:	cf 91       	pop	r28
     4e4:	df 91       	pop	r29
     4e6:	08 95       	ret

000004e8 <scall_proc_init>:
///                 ОБРАБОТЧИКИ СИСТЕМНЫХ ВЫЗОВОВ
///=================================================================
///                   Управление процессами
//0
void scall_proc_init( void * arg )
{
     4e8:	8f 92       	push	r8
     4ea:	af 92       	push	r10
     4ec:	bf 92       	push	r11
     4ee:	cf 92       	push	r12
     4f0:	df 92       	push	r13
     4f2:	ef 92       	push	r14
     4f4:	ff 92       	push	r15
     4f6:	0f 93       	push	r16
     4f8:	1f 93       	push	r17
     4fa:	df 93       	push	r29
     4fc:	cf 93       	push	r28
     4fe:	00 d0       	rcall	.+0      	; 0x500 <scall_proc_init+0x18>
     500:	cd b7       	in	r28, 0x3d	; 61
     502:	de b7       	in	r29, 0x3e	; 62
     504:	9a 83       	std	Y+2, r25	; 0x02
     506:	89 83       	std	Y+1, r24	; 0x01
    proc_init_isr(
     508:	e9 81       	ldd	r30, Y+1	; 0x01
     50a:	fa 81       	ldd	r31, Y+2	; 0x02
     50c:	80 81       	ld	r24, Z
     50e:	91 81       	ldd	r25, Z+1	; 0x01
     510:	e9 81       	ldd	r30, Y+1	; 0x01
     512:	fa 81       	ldd	r31, Y+2	; 0x02
     514:	22 81       	ldd	r18, Z+2	; 0x02
     516:	33 81       	ldd	r19, Z+3	; 0x03
     518:	e9 81       	ldd	r30, Y+1	; 0x01
     51a:	fa 81       	ldd	r31, Y+2	; 0x02
     51c:	44 81       	ldd	r20, Z+4	; 0x04
     51e:	55 81       	ldd	r21, Z+5	; 0x05
     520:	e9 81       	ldd	r30, Y+1	; 0x01
     522:	fa 81       	ldd	r31, Y+2	; 0x02
     524:	06 81       	ldd	r16, Z+6	; 0x06
     526:	17 81       	ldd	r17, Z+7	; 0x07
     528:	e9 81       	ldd	r30, Y+1	; 0x01
     52a:	fa 81       	ldd	r31, Y+2	; 0x02
     52c:	e0 84       	ldd	r14, Z+8	; 0x08
     52e:	f1 84       	ldd	r15, Z+9	; 0x09
     530:	e9 81       	ldd	r30, Y+1	; 0x01
     532:	fa 81       	ldd	r31, Y+2	; 0x02
     534:	c2 84       	ldd	r12, Z+10	; 0x0a
     536:	d3 84       	ldd	r13, Z+11	; 0x0b
     538:	e9 81       	ldd	r30, Y+1	; 0x01
     53a:	fa 81       	ldd	r31, Y+2	; 0x02
     53c:	b4 84       	ldd	r11, Z+12	; 0x0c
     53e:	e9 81       	ldd	r30, Y+1	; 0x01
     540:	fa 81       	ldd	r31, Y+2	; 0x02
     542:	a5 85       	ldd	r26, Z+13	; 0x0d
     544:	b6 85       	ldd	r27, Z+14	; 0x0e
     546:	e9 81       	ldd	r30, Y+1	; 0x01
     548:	fa 81       	ldd	r31, Y+2	; 0x02
     54a:	e7 85       	ldd	r30, Z+15	; 0x0f
     54c:	b9 01       	movw	r22, r18
     54e:	98 01       	movw	r18, r16
     550:	87 01       	movw	r16, r14
     552:	76 01       	movw	r14, r12
     554:	cb 2c       	mov	r12, r11
     556:	5d 01       	movw	r10, r26
     558:	8e 2e       	mov	r8, r30
     55a:	0e 94 92 0b 	call	0x1724	; 0x1724 <proc_init_isr>
              ((proc_init_arg_t *)arg)->sstart,
              ((proc_init_arg_t *)arg)->prio,
              ((proc_init_arg_t *)arg)->time_quant,
              ((proc_init_arg_t *)arg)->is_rt
              );
}
     55e:	0f 90       	pop	r0
     560:	0f 90       	pop	r0
     562:	cf 91       	pop	r28
     564:	df 91       	pop	r29
     566:	1f 91       	pop	r17
     568:	0f 91       	pop	r16
     56a:	ff 90       	pop	r15
     56c:	ef 90       	pop	r14
     56e:	df 90       	pop	r13
     570:	cf 90       	pop	r12
     572:	bf 90       	pop	r11
     574:	af 90       	pop	r10
     576:	8f 90       	pop	r8
     578:	08 95       	ret

0000057a <scall_proc_run>:
    syscall(0,(void *)&scarg);
}
//---------------------------------------------------------------------------------------------
//1
void scall_proc_run( void * arg )
{
     57a:	0f 93       	push	r16
     57c:	1f 93       	push	r17
     57e:	df 93       	push	r29
     580:	cf 93       	push	r28
     582:	00 d0       	rcall	.+0      	; 0x584 <scall_proc_run+0xa>
     584:	cd b7       	in	r28, 0x3d	; 61
     586:	de b7       	in	r29, 0x3e	; 62
     588:	9a 83       	std	Y+2, r25	; 0x02
     58a:	89 83       	std	Y+1, r24	; 0x01
    ((proc_runtime_arg_t *)arg)->scall_ret = proc_run_isr( ((proc_runtime_arg_t *)arg)->proc );
     58c:	09 81       	ldd	r16, Y+1	; 0x01
     58e:	1a 81       	ldd	r17, Y+2	; 0x02
     590:	e9 81       	ldd	r30, Y+1	; 0x01
     592:	fa 81       	ldd	r31, Y+2	; 0x02
     594:	80 81       	ld	r24, Z
     596:	91 81       	ldd	r25, Z+1	; 0x01
     598:	0e 94 38 0c 	call	0x1870	; 0x1870 <proc_run_isr>
     59c:	f8 01       	movw	r30, r16
     59e:	82 83       	std	Z+2, r24	; 0x02
}
     5a0:	0f 90       	pop	r0
     5a2:	0f 90       	pop	r0
     5a4:	cf 91       	pop	r28
     5a6:	df 91       	pop	r29
     5a8:	1f 91       	pop	r17
     5aa:	0f 91       	pop	r16
     5ac:	08 95       	ret

000005ae <proc_run>:
bool_t proc_run( proc_t * proc )
{
     5ae:	df 93       	push	r29
     5b0:	cf 93       	push	r28
     5b2:	00 d0       	rcall	.+0      	; 0x5b4 <proc_run+0x6>
     5b4:	00 d0       	rcall	.+0      	; 0x5b6 <proc_run+0x8>
     5b6:	0f 92       	push	r0
     5b8:	cd b7       	in	r28, 0x3d	; 61
     5ba:	de b7       	in	r29, 0x3e	; 62
     5bc:	9d 83       	std	Y+5, r25	; 0x05
     5be:	8c 83       	std	Y+4, r24	; 0x04
    proc_runtime_arg_t scarg;
    scarg.proc = proc;
     5c0:	8c 81       	ldd	r24, Y+4	; 0x04
     5c2:	9d 81       	ldd	r25, Y+5	; 0x05
     5c4:	9a 83       	std	Y+2, r25	; 0x02
     5c6:	89 83       	std	Y+1, r24	; 0x01
    scarg.scall_ret = (bool_t)0;
     5c8:	1b 82       	std	Y+3, r1	; 0x03

    syscall(1,(void *)&scarg);
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	9e 01       	movw	r18, r28
     5ce:	2f 5f       	subi	r18, 0xFF	; 255
     5d0:	3f 4f       	sbci	r19, 0xFF	; 255
     5d2:	b9 01       	movw	r22, r18
     5d4:	0e 94 4d 02 	call	0x49a	; 0x49a <syscall>
    return scarg.scall_ret;
     5d8:	8b 81       	ldd	r24, Y+3	; 0x03
}
     5da:	0f 90       	pop	r0
     5dc:	0f 90       	pop	r0
     5de:	0f 90       	pop	r0
     5e0:	0f 90       	pop	r0
     5e2:	0f 90       	pop	r0
     5e4:	cf 91       	pop	r28
     5e6:	df 91       	pop	r29
     5e8:	08 95       	ret

000005ea <scall_proc_restart>:
//---------------------------------------------------------------------------------------------
//2
void scall_proc_restart( void * arg )
{
     5ea:	0f 93       	push	r16
     5ec:	1f 93       	push	r17
     5ee:	df 93       	push	r29
     5f0:	cf 93       	push	r28
     5f2:	00 d0       	rcall	.+0      	; 0x5f4 <scall_proc_restart+0xa>
     5f4:	cd b7       	in	r28, 0x3d	; 61
     5f6:	de b7       	in	r29, 0x3e	; 62
     5f8:	9a 83       	std	Y+2, r25	; 0x02
     5fa:	89 83       	std	Y+1, r24	; 0x01
    ((proc_runtime_arg_t *)arg)->scall_ret = proc_restart_isr( ((proc_runtime_arg_t *)arg)->proc );
     5fc:	09 81       	ldd	r16, Y+1	; 0x01
     5fe:	1a 81       	ldd	r17, Y+2	; 0x02
     600:	e9 81       	ldd	r30, Y+1	; 0x01
     602:	fa 81       	ldd	r31, Y+2	; 0x02
     604:	80 81       	ld	r24, Z
     606:	91 81       	ldd	r25, Z+1	; 0x01
     608:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <proc_restart_isr>
     60c:	f8 01       	movw	r30, r16
     60e:	82 83       	std	Z+2, r24	; 0x02
}
     610:	0f 90       	pop	r0
     612:	0f 90       	pop	r0
     614:	cf 91       	pop	r28
     616:	df 91       	pop	r29
     618:	1f 91       	pop	r17
     61a:	0f 91       	pop	r16
     61c:	08 95       	ret

0000061e <proc_restart>:
bool_t proc_restart( proc_t * proc )
{
     61e:	df 93       	push	r29
     620:	cf 93       	push	r28
     622:	00 d0       	rcall	.+0      	; 0x624 <proc_restart+0x6>
     624:	00 d0       	rcall	.+0      	; 0x626 <proc_restart+0x8>
     626:	0f 92       	push	r0
     628:	cd b7       	in	r28, 0x3d	; 61
     62a:	de b7       	in	r29, 0x3e	; 62
     62c:	9d 83       	std	Y+5, r25	; 0x05
     62e:	8c 83       	std	Y+4, r24	; 0x04
    proc_runtime_arg_t scarg;
    scarg.proc = proc;
     630:	8c 81       	ldd	r24, Y+4	; 0x04
     632:	9d 81       	ldd	r25, Y+5	; 0x05
     634:	9a 83       	std	Y+2, r25	; 0x02
     636:	89 83       	std	Y+1, r24	; 0x01

    syscall(2,(void *)&scarg);
     638:	82 e0       	ldi	r24, 0x02	; 2
     63a:	9e 01       	movw	r18, r28
     63c:	2f 5f       	subi	r18, 0xFF	; 255
     63e:	3f 4f       	sbci	r19, 0xFF	; 255
     640:	b9 01       	movw	r22, r18
     642:	0e 94 4d 02 	call	0x49a	; 0x49a <syscall>
    return scarg.scall_ret;
     646:	8b 81       	ldd	r24, Y+3	; 0x03
}
     648:	0f 90       	pop	r0
     64a:	0f 90       	pop	r0
     64c:	0f 90       	pop	r0
     64e:	0f 90       	pop	r0
     650:	0f 90       	pop	r0
     652:	cf 91       	pop	r28
     654:	df 91       	pop	r29
     656:	08 95       	ret

00000658 <scall_proc_stop>:
//---------------------------------------------------------------------------------------------
//3
void scall_proc_stop( void * arg )
{
     658:	0f 93       	push	r16
     65a:	1f 93       	push	r17
     65c:	df 93       	push	r29
     65e:	cf 93       	push	r28
     660:	00 d0       	rcall	.+0      	; 0x662 <scall_proc_stop+0xa>
     662:	cd b7       	in	r28, 0x3d	; 61
     664:	de b7       	in	r29, 0x3e	; 62
     666:	9a 83       	std	Y+2, r25	; 0x02
     668:	89 83       	std	Y+1, r24	; 0x01
    ((proc_runtime_arg_t *)arg)->scall_ret = proc_stop_isr( ((proc_runtime_arg_t *)arg)->proc );
     66a:	09 81       	ldd	r16, Y+1	; 0x01
     66c:	1a 81       	ldd	r17, Y+2	; 0x02
     66e:	e9 81       	ldd	r30, Y+1	; 0x01
     670:	fa 81       	ldd	r31, Y+2	; 0x02
     672:	80 81       	ld	r24, Z
     674:	91 81       	ldd	r25, Z+1	; 0x01
     676:	0e 94 ba 0c 	call	0x1974	; 0x1974 <proc_stop_isr>
     67a:	f8 01       	movw	r30, r16
     67c:	82 83       	std	Z+2, r24	; 0x02
}
     67e:	0f 90       	pop	r0
     680:	0f 90       	pop	r0
     682:	cf 91       	pop	r28
     684:	df 91       	pop	r29
     686:	1f 91       	pop	r17
     688:	0f 91       	pop	r16
     68a:	08 95       	ret

0000068c <scall_proc_self_stop>:
}

//---------------------------------------------------------------------------------------------
//4
void scall_proc_self_stop( void * arg )
{
     68c:	df 93       	push	r29
     68e:	cf 93       	push	r28
     690:	00 d0       	rcall	.+0      	; 0x692 <scall_proc_self_stop+0x6>
     692:	00 d0       	rcall	.+0      	; 0x694 <scall_proc_self_stop+0x8>
     694:	cd b7       	in	r28, 0x3d	; 61
     696:	de b7       	in	r29, 0x3e	; 62
     698:	9c 83       	std	Y+4, r25	; 0x04
     69a:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = kernel.sched.current_proc;
     69c:	80 91 9e 01 	lds	r24, 0x019E
     6a0:	90 91 9f 01 	lds	r25, 0x019F
     6a4:	9a 83       	std	Y+2, r25	; 0x02
     6a6:	89 83       	std	Y+1, r24	; 0x01
    _proc_stop( proc );
     6a8:	89 81       	ldd	r24, Y+1	; 0x01
     6aa:	9a 81       	ldd	r25, Y+2	; 0x02
     6ac:	0e 94 a1 0c 	call	0x1942	; 0x1942 <_proc_stop>
}
     6b0:	0f 90       	pop	r0
     6b2:	0f 90       	pop	r0
     6b4:	0f 90       	pop	r0
     6b6:	0f 90       	pop	r0
     6b8:	cf 91       	pop	r28
     6ba:	df 91       	pop	r29
     6bc:	08 95       	ret

000006be <proc_self_stop>:
void proc_self_stop(void)
{
     6be:	df 93       	push	r29
     6c0:	cf 93       	push	r28
     6c2:	cd b7       	in	r28, 0x3d	; 61
     6c4:	de b7       	in	r29, 0x3e	; 62
    syscall(4,(void *)1);
     6c6:	84 e0       	ldi	r24, 0x04	; 4
     6c8:	61 e0       	ldi	r22, 0x01	; 1
     6ca:	70 e0       	ldi	r23, 0x00	; 0
     6cc:	0e 94 4d 02 	call	0x49a	; 0x49a <syscall>
}
     6d0:	cf 91       	pop	r28
     6d2:	df 91       	pop	r29
     6d4:	08 95       	ret

000006d6 <scall_proc_terminate>:
//---------------------------------------------------------------------------------------------
//5
/// Останов процесса после выхода из pmain, для обертки proc_run_wrapper
void scall_proc_terminate( void * arg )
{
     6d6:	df 93       	push	r29
     6d8:	cf 93       	push	r28
     6da:	00 d0       	rcall	.+0      	; 0x6dc <scall_proc_terminate+0x6>
     6dc:	00 d0       	rcall	.+0      	; 0x6de <scall_proc_terminate+0x8>
     6de:	cd b7       	in	r28, 0x3d	; 61
     6e0:	de b7       	in	r29, 0x3e	; 62
     6e2:	9c 83       	std	Y+4, r25	; 0x04
     6e4:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = (proc_t *)arg;
     6e6:	8b 81       	ldd	r24, Y+3	; 0x03
     6e8:	9c 81       	ldd	r25, Y+4	; 0x04
     6ea:	9a 83       	std	Y+2, r25	; 0x02
     6ec:	89 83       	std	Y+1, r24	; 0x01
    // Обрабатываем флаги
    // Нельзя выходить из pmain не освободив все захваченные ресурсы, за это процесс будет "убит"!
    if( proc->flags & PROC_FLG_HOLD ) proc->flags |= PROC_FLG_DEAD;
     6ee:	e9 81       	ldd	r30, Y+1	; 0x01
     6f0:	fa 81       	ldd	r31, Y+2	; 0x02
     6f2:	83 85       	ldd	r24, Z+11	; 0x0b
     6f4:	88 2f       	mov	r24, r24
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	84 70       	andi	r24, 0x04	; 4
     6fa:	90 70       	andi	r25, 0x00	; 0
     6fc:	00 97       	sbiw	r24, 0x00	; 0
     6fe:	41 f0       	breq	.+16     	; 0x710 <scall_proc_terminate+0x3a>
     700:	e9 81       	ldd	r30, Y+1	; 0x01
     702:	fa 81       	ldd	r31, Y+2	; 0x02
     704:	83 85       	ldd	r24, Z+11	; 0x0b
     706:	80 68       	ori	r24, 0x80	; 128
     708:	e9 81       	ldd	r30, Y+1	; 0x01
     70a:	fa 81       	ldd	r31, Y+2	; 0x02
     70c:	83 87       	std	Z+11, r24	; 0x0b
     70e:	07 c0       	rjmp	.+14     	; 0x71e <scall_proc_terminate+0x48>
    // В противном случае - просто завершаем процесс
    else proc->flags |= PROC_FLG_END;
     710:	e9 81       	ldd	r30, Y+1	; 0x01
     712:	fa 81       	ldd	r31, Y+2	; 0x02
     714:	83 85       	ldd	r24, Z+11	; 0x0b
     716:	80 64       	ori	r24, 0x40	; 64
     718:	e9 81       	ldd	r30, Y+1	; 0x01
     71a:	fa 81       	ldd	r31, Y+2	; 0x02
     71c:	83 87       	std	Z+11, r24	; 0x0b
    proc->flags &= ~(PROC_FLG_PRE_END|PROC_FLG_RUN);
     71e:	e9 81       	ldd	r30, Y+1	; 0x01
     720:	fa 81       	ldd	r31, Y+2	; 0x02
     722:	83 85       	ldd	r24, Z+11	; 0x0b
     724:	8d 7d       	andi	r24, 0xDD	; 221
     726:	e9 81       	ldd	r30, Y+1	; 0x01
     728:	fa 81       	ldd	r31, Y+2	; 0x02
     72a:	83 87       	std	Z+11, r24	; 0x0b
    // Останов
    _proc_stop_( proc );
     72c:	89 81       	ldd	r24, Y+1	; 0x01
     72e:	9a 81       	ldd	r25, Y+2	; 0x02
     730:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <gitem_cut>
    // Выполнить перепланировку
    resched();
     734:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
}
     738:	0f 90       	pop	r0
     73a:	0f 90       	pop	r0
     73c:	0f 90       	pop	r0
     73e:	0f 90       	pop	r0
     740:	cf 91       	pop	r28
     742:	df 91       	pop	r29
     744:	08 95       	ret

00000746 <proc_run_wrapper>:
void proc_run_wrapper( proc_t * proc )
{
     746:	df 93       	push	r29
     748:	cf 93       	push	r28
     74a:	00 d0       	rcall	.+0      	; 0x74c <proc_run_wrapper+0x6>
     74c:	00 d0       	rcall	.+0      	; 0x74e <proc_run_wrapper+0x8>
     74e:	00 d0       	rcall	.+0      	; 0x750 <proc_run_wrapper+0xa>
     750:	cd b7       	in	r28, 0x3d	; 61
     752:	de b7       	in	r29, 0x3e	; 62
     754:	9e 83       	std	Y+6, r25	; 0x06
     756:	8d 83       	std	Y+5, r24	; 0x05
    //Атомарно читаем pmain и arg
    cli();
     758:	f8 94       	cli
    code_t pmain = proc->pmain;
     75a:	ed 81       	ldd	r30, Y+5	; 0x05
     75c:	fe 81       	ldd	r31, Y+6	; 0x06
     75e:	82 a1       	ldd	r24, Z+34	; 0x22
     760:	93 a1       	ldd	r25, Z+35	; 0x23
     762:	9c 83       	std	Y+4, r25	; 0x04
     764:	8b 83       	std	Y+3, r24	; 0x03
    void * arg = proc->arg;
     766:	ed 81       	ldd	r30, Y+5	; 0x05
     768:	fe 81       	ldd	r31, Y+6	; 0x06
     76a:	80 a5       	ldd	r24, Z+40	; 0x28
     76c:	91 a5       	ldd	r25, Z+41	; 0x29
     76e:	9a 83       	std	Y+2, r25	; 0x02
     770:	89 83       	std	Y+1, r24	; 0x01
    sei();
     772:	78 94       	sei
    //Выполняем pmain
    pmain( arg );
     774:	89 81       	ldd	r24, Y+1	; 0x01
     776:	9a 81       	ldd	r25, Y+2	; 0x02
     778:	eb 81       	ldd	r30, Y+3	; 0x03
     77a:	fc 81       	ldd	r31, Y+4	; 0x04
     77c:	09 95       	icall
    // Завершаем процесс
    syscall(5,(void *)proc);
     77e:	2d 81       	ldd	r18, Y+5	; 0x05
     780:	3e 81       	ldd	r19, Y+6	; 0x06
     782:	85 e0       	ldi	r24, 0x05	; 5
     784:	b9 01       	movw	r22, r18
     786:	0e 94 4d 02 	call	0x49a	; 0x49a <syscall>
}
     78a:	26 96       	adiw	r28, 0x06	; 6
     78c:	0f b6       	in	r0, 0x3f	; 63
     78e:	f8 94       	cli
     790:	de bf       	out	0x3e, r29	; 62
     792:	0f be       	out	0x3f, r0	; 63
     794:	cd bf       	out	0x3d, r28	; 61
     796:	cf 91       	pop	r28
     798:	df 91       	pop	r29
     79a:	08 95       	ret

0000079c <scall_proc_flag_stop>:
//---------------------------------------------------------------------------------------------
//6
void scall_proc_flag_stop( void * arg )
{
     79c:	df 93       	push	r29
     79e:	cf 93       	push	r28
     7a0:	00 d0       	rcall	.+0      	; 0x7a2 <scall_proc_flag_stop+0x6>
     7a2:	cd b7       	in	r28, 0x3d	; 61
     7a4:	de b7       	in	r29, 0x3e	; 62
     7a6:	9a 83       	std	Y+2, r25	; 0x02
     7a8:	89 83       	std	Y+1, r24	; 0x01
    _proc_flag_stop_isr( *((flag_t *)arg) );
     7aa:	e9 81       	ldd	r30, Y+1	; 0x01
     7ac:	fa 81       	ldd	r31, Y+2	; 0x02
     7ae:	80 81       	ld	r24, Z
     7b0:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <_proc_flag_stop_isr>
}
     7b4:	0f 90       	pop	r0
     7b6:	0f 90       	pop	r0
     7b8:	cf 91       	pop	r28
     7ba:	df 91       	pop	r29
     7bc:	08 95       	ret

000007be <scall_sig_init>:
///=================================================================
///                         Сигналы
//7
void scall_sig_init( void * arg )
{
     7be:	df 93       	push	r29
     7c0:	cf 93       	push	r28
     7c2:	00 d0       	rcall	.+0      	; 0x7c4 <scall_sig_init+0x6>
     7c4:	cd b7       	in	r28, 0x3d	; 61
     7c6:	de b7       	in	r29, 0x3e	; 62
     7c8:	9a 83       	std	Y+2, r25	; 0x02
     7ca:	89 83       	std	Y+1, r24	; 0x01
    sig_init_isr( (sig_t *)arg );
     7cc:	89 81       	ldd	r24, Y+1	; 0x01
     7ce:	9a 81       	ldd	r25, Y+2	; 0x02
     7d0:	0e 94 19 10 	call	0x2032	; 0x2032 <sig_init_isr>
}
     7d4:	0f 90       	pop	r0
     7d6:	0f 90       	pop	r0
     7d8:	cf 91       	pop	r28
     7da:	df 91       	pop	r29
     7dc:	08 95       	ret

000007de <scall_sig_wait>:
    syscall( 7, (void *)sig );
}
//---------------------------------------------------------------------------------------------
//8
void scall_sig_wait( void * arg )
{
     7de:	df 93       	push	r29
     7e0:	cf 93       	push	r28
     7e2:	00 d0       	rcall	.+0      	; 0x7e4 <scall_sig_wait+0x6>
     7e4:	cd b7       	in	r28, 0x3d	; 61
     7e6:	de b7       	in	r29, 0x3e	; 62
     7e8:	9a 83       	std	Y+2, r25	; 0x02
     7ea:	89 83       	std	Y+1, r24	; 0x01
    sig_wait_stage_1_isr( (sig_t *)arg );
     7ec:	89 81       	ldd	r24, Y+1	; 0x01
     7ee:	9a 81       	ldd	r25, Y+2	; 0x02
     7f0:	0e 94 29 10 	call	0x2052	; 0x2052 <sig_wait_stage_1_isr>
}
     7f4:	0f 90       	pop	r0
     7f6:	0f 90       	pop	r0
     7f8:	cf 91       	pop	r28
     7fa:	df 91       	pop	r29
     7fc:	08 95       	ret

000007fe <scall_sig_signal>:
    syscall( 6, (void *)&mask );/// Останов в случае необходимости
}
//---------------------------------------------------------------------------------------------
//9
void scall_sig_signal( void * arg )
{
     7fe:	df 93       	push	r29
     800:	cf 93       	push	r28
     802:	00 d0       	rcall	.+0      	; 0x804 <scall_sig_signal+0x6>
     804:	cd b7       	in	r28, 0x3d	; 61
     806:	de b7       	in	r29, 0x3e	; 62
     808:	9a 83       	std	Y+2, r25	; 0x02
     80a:	89 83       	std	Y+1, r24	; 0x01
    sig_signal_isr( (sig_t *)arg );
     80c:	89 81       	ldd	r24, Y+1	; 0x01
     80e:	9a 81       	ldd	r25, Y+2	; 0x02
     810:	0e 94 4e 10 	call	0x209c	; 0x209c <sig_signal_isr>
}
     814:	0f 90       	pop	r0
     816:	0f 90       	pop	r0
     818:	cf 91       	pop	r28
     81a:	df 91       	pop	r29
     81c:	08 95       	ret

0000081e <scall_sig_broadcast>:
    syscall( 9, (void *)sig );
}
//---------------------------------------------------------------------------------------------
//10
void scall_sig_broadcast( void * arg )
{
     81e:	df 93       	push	r29
     820:	cf 93       	push	r28
     822:	00 d0       	rcall	.+0      	; 0x824 <scall_sig_broadcast+0x6>
     824:	cd b7       	in	r28, 0x3d	; 61
     826:	de b7       	in	r29, 0x3e	; 62
     828:	9a 83       	std	Y+2, r25	; 0x02
     82a:	89 83       	std	Y+1, r24	; 0x01
    sig_broadcast_isr( (sig_t *)arg );
     82c:	89 81       	ldd	r24, Y+1	; 0x01
     82e:	9a 81       	ldd	r25, Y+2	; 0x02
     830:	0e 94 77 10 	call	0x20ee	; 0x20ee <sig_broadcast_isr>
}
     834:	0f 90       	pop	r0
     836:	0f 90       	pop	r0
     838:	cf 91       	pop	r28
     83a:	df 91       	pop	r29
     83c:	08 95       	ret

0000083e <scall_sem_init>:
}
///=================================================================
///                         Семафоры
//11
void scall_sem_init( void * arg )
{
     83e:	df 93       	push	r29
     840:	cf 93       	push	r28
     842:	00 d0       	rcall	.+0      	; 0x844 <scall_sem_init+0x6>
     844:	cd b7       	in	r28, 0x3d	; 61
     846:	de b7       	in	r29, 0x3e	; 62
     848:	9a 83       	std	Y+2, r25	; 0x02
     84a:	89 83       	std	Y+1, r24	; 0x01
    sem_init_isr( ((sem_init_arg_t *)arg)->sem, ((sem_init_arg_t *)arg)->count );
     84c:	e9 81       	ldd	r30, Y+1	; 0x01
     84e:	fa 81       	ldd	r31, Y+2	; 0x02
     850:	80 81       	ld	r24, Z
     852:	91 81       	ldd	r25, Z+1	; 0x01
     854:	e9 81       	ldd	r30, Y+1	; 0x01
     856:	fa 81       	ldd	r31, Y+2	; 0x02
     858:	22 81       	ldd	r18, Z+2	; 0x02
     85a:	33 81       	ldd	r19, Z+3	; 0x03
     85c:	b9 01       	movw	r22, r18
     85e:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <sem_init_isr>
}
     862:	0f 90       	pop	r0
     864:	0f 90       	pop	r0
     866:	cf 91       	pop	r28
     868:	df 91       	pop	r29
     86a:	08 95       	ret

0000086c <scall_sem_lock>:
    syscall( 11, (void *)&scarg );
}
//----------------------------------------------------------------------
//12
void scall_sem_lock( void * arg )
{
     86c:	0f 93       	push	r16
     86e:	1f 93       	push	r17
     870:	df 93       	push	r29
     872:	cf 93       	push	r28
     874:	00 d0       	rcall	.+0      	; 0x876 <scall_sem_lock+0xa>
     876:	cd b7       	in	r28, 0x3d	; 61
     878:	de b7       	in	r29, 0x3e	; 62
     87a:	9a 83       	std	Y+2, r25	; 0x02
     87c:	89 83       	std	Y+1, r24	; 0x01
    ((sem_lock_arg_t *)arg)->scall_ret = _sem_lock( ((sem_lock_arg_t *)arg)->sem );
     87e:	09 81       	ldd	r16, Y+1	; 0x01
     880:	1a 81       	ldd	r17, Y+2	; 0x02
     882:	e9 81       	ldd	r30, Y+1	; 0x01
     884:	fa 81       	ldd	r31, Y+2	; 0x02
     886:	80 81       	ld	r24, Z
     888:	91 81       	ldd	r25, Z+1	; 0x01
     88a:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <_sem_lock>
     88e:	f8 01       	movw	r30, r16
     890:	82 83       	std	Z+2, r24	; 0x02
}
     892:	0f 90       	pop	r0
     894:	0f 90       	pop	r0
     896:	cf 91       	pop	r28
     898:	df 91       	pop	r29
     89a:	1f 91       	pop	r17
     89c:	0f 91       	pop	r16
     89e:	08 95       	ret

000008a0 <scall_sem_unlock>:
    return scarg.scall_ret;
}
//----------------------------------------------------------------------
//13
void scall_sem_unlock( void * arg )
{
     8a0:	df 93       	push	r29
     8a2:	cf 93       	push	r28
     8a4:	00 d0       	rcall	.+0      	; 0x8a6 <scall_sem_unlock+0x6>
     8a6:	cd b7       	in	r28, 0x3d	; 61
     8a8:	de b7       	in	r29, 0x3e	; 62
     8aa:	9a 83       	std	Y+2, r25	; 0x02
     8ac:	89 83       	std	Y+1, r24	; 0x01
    _sem_unlock( (sem_t *)arg );
     8ae:	89 81       	ldd	r24, Y+1	; 0x01
     8b0:	9a 81       	ldd	r25, Y+2	; 0x02
     8b2:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <_sem_unlock>
}
     8b6:	0f 90       	pop	r0
     8b8:	0f 90       	pop	r0
     8ba:	cf 91       	pop	r28
     8bc:	df 91       	pop	r29
     8be:	08 95       	ret

000008c0 <scall_mutex_init>:
}
///=================================================================
///                         Мьютексы
//14
void scall_mutex_init(void * arg)
{
     8c0:	df 93       	push	r29
     8c2:	cf 93       	push	r28
     8c4:	00 d0       	rcall	.+0      	; 0x8c6 <scall_mutex_init+0x6>
     8c6:	cd b7       	in	r28, 0x3d	; 61
     8c8:	de b7       	in	r29, 0x3e	; 62
     8ca:	9a 83       	std	Y+2, r25	; 0x02
     8cc:	89 83       	std	Y+1, r24	; 0x01
    mutex_init_isr(
     8ce:	e9 81       	ldd	r30, Y+1	; 0x01
     8d0:	fa 81       	ldd	r31, Y+2	; 0x02
     8d2:	80 81       	ld	r24, Z
     8d4:	91 81       	ldd	r25, Z+1	; 0x01
     8d6:	e9 81       	ldd	r30, Y+1	; 0x01
     8d8:	fa 81       	ldd	r31, Y+2	; 0x02
     8da:	22 81       	ldd	r18, Z+2	; 0x02
     8dc:	62 2f       	mov	r22, r18
     8de:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <mutex_init_isr>
               ((mutex_init_arg_t *)arg)->mutex
#ifdef CONFIG_USE_HIGHEST_LOCKER
               ,((mutex_init_arg_t *)arg)->prio
#endif // CONFIG_USE_HIGHEST_LOCKER
               );
}
     8e2:	0f 90       	pop	r0
     8e4:	0f 90       	pop	r0
     8e6:	cf 91       	pop	r28
     8e8:	df 91       	pop	r29
     8ea:	08 95       	ret

000008ec <scall_mutex_lock>:
    syscall( 14, (void *)&scarg );
}
//----------------------------------------------------------------------
//15
void scall_mutex_lock(void * arg)
{
     8ec:	0f 93       	push	r16
     8ee:	1f 93       	push	r17
     8f0:	df 93       	push	r29
     8f2:	cf 93       	push	r28
     8f4:	00 d0       	rcall	.+0      	; 0x8f6 <scall_mutex_lock+0xa>
     8f6:	cd b7       	in	r28, 0x3d	; 61
     8f8:	de b7       	in	r29, 0x3e	; 62
     8fa:	9a 83       	std	Y+2, r25	; 0x02
     8fc:	89 83       	std	Y+1, r24	; 0x01
    ((mutex_lock_arg_t *)arg)->scall_ret = _mutex_lock( ((mutex_lock_arg_t *)arg)->mutex );
     8fe:	09 81       	ldd	r16, Y+1	; 0x01
     900:	1a 81       	ldd	r17, Y+2	; 0x02
     902:	e9 81       	ldd	r30, Y+1	; 0x01
     904:	fa 81       	ldd	r31, Y+2	; 0x02
     906:	80 81       	ld	r24, Z
     908:	91 81       	ldd	r25, Z+1	; 0x01
     90a:	0e 94 0c 0a 	call	0x1418	; 0x1418 <_mutex_lock>
     90e:	f8 01       	movw	r30, r16
     910:	82 83       	std	Z+2, r24	; 0x02
}
     912:	0f 90       	pop	r0
     914:	0f 90       	pop	r0
     916:	cf 91       	pop	r28
     918:	df 91       	pop	r29
     91a:	1f 91       	pop	r17
     91c:	0f 91       	pop	r16
     91e:	08 95       	ret

00000920 <scall_mutex_try_lock>:
}
// Захват
//----------------------------------------------------------------------
//16
void scall_mutex_try_lock(void * arg)
{
     920:	0f 93       	push	r16
     922:	1f 93       	push	r17
     924:	df 93       	push	r29
     926:	cf 93       	push	r28
     928:	00 d0       	rcall	.+0      	; 0x92a <scall_mutex_try_lock+0xa>
     92a:	cd b7       	in	r28, 0x3d	; 61
     92c:	de b7       	in	r29, 0x3e	; 62
     92e:	9a 83       	std	Y+2, r25	; 0x02
     930:	89 83       	std	Y+1, r24	; 0x01
    ((mutex_lock_arg_t *)arg)->scall_ret = _mutex_try_lock( ((mutex_lock_arg_t *)arg)->mutex );
     932:	09 81       	ldd	r16, Y+1	; 0x01
     934:	1a 81       	ldd	r17, Y+2	; 0x02
     936:	e9 81       	ldd	r30, Y+1	; 0x01
     938:	fa 81       	ldd	r31, Y+2	; 0x02
     93a:	80 81       	ld	r24, Z
     93c:	91 81       	ldd	r25, Z+1	; 0x01
     93e:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <_mutex_try_lock>
     942:	f8 01       	movw	r30, r16
     944:	82 83       	std	Z+2, r24	; 0x02
}
     946:	0f 90       	pop	r0
     948:	0f 90       	pop	r0
     94a:	cf 91       	pop	r28
     94c:	df 91       	pop	r29
     94e:	1f 91       	pop	r17
     950:	0f 91       	pop	r16
     952:	08 95       	ret

00000954 <scall_mutex_unlock>:
    return scarg.scall_ret;
}
//----------------------------------------------------------------------
//17
void scall_mutex_unlock(void * arg)
{
     954:	df 93       	push	r29
     956:	cf 93       	push	r28
     958:	00 d0       	rcall	.+0      	; 0x95a <scall_mutex_unlock+0x6>
     95a:	cd b7       	in	r28, 0x3d	; 61
     95c:	de b7       	in	r29, 0x3e	; 62
     95e:	9a 83       	std	Y+2, r25	; 0x02
     960:	89 83       	std	Y+1, r24	; 0x01
    _mutex_unlock( (mutex_t *)arg );
     962:	89 81       	ldd	r24, Y+1	; 0x01
     964:	9a 81       	ldd	r25, Y+2	; 0x02
     966:	0e 94 80 0a 	call	0x1500	; 0x1500 <_mutex_unlock>
}
     96a:	0f 90       	pop	r0
     96c:	0f 90       	pop	r0
     96e:	cf 91       	pop	r28
     970:	df 91       	pop	r29
     972:	08 95       	ret

00000974 <osbme_init_stack>:
*                                                                                        *
*****************************************************************************************/
#include <avr/io.h>
#include "../../osbme.h"
void * osbme_init_stack( void * top_of_stack, osbme_code_t code, void * arg )
{
     974:	df 93       	push	r29
     976:	cf 93       	push	r28
     978:	cd b7       	in	r28, 0x3d	; 61
     97a:	de b7       	in	r29, 0x3e	; 62
     97c:	2a 97       	sbiw	r28, 0x0a	; 10
     97e:	0f b6       	in	r0, 0x3f	; 63
     980:	f8 94       	cli
     982:	de bf       	out	0x3e, r29	; 62
     984:	0f be       	out	0x3f, r0	; 63
     986:	cd bf       	out	0x3d, r28	; 61
     988:	9e 83       	std	Y+6, r25	; 0x06
     98a:	8d 83       	std	Y+5, r24	; 0x05
     98c:	78 87       	std	Y+8, r23	; 0x08
     98e:	6f 83       	std	Y+7, r22	; 0x07
     990:	5a 87       	std	Y+10, r21	; 0x0a
     992:	49 87       	std	Y+9, r20	; 0x09
    char * tos = (char *)top_of_stack;
     994:	8d 81       	ldd	r24, Y+5	; 0x05
     996:	9e 81       	ldd	r25, Y+6	; 0x06
     998:	9c 83       	std	Y+4, r25	; 0x04
     99a:	8b 83       	std	Y+3, r24	; 0x03
    //*tos-- = 0x11;
    //*tos-- = 0x22;
    //*tos-- = 0x33;

    // return address
    unsigned short tmp = (unsigned short)code;
     99c:	8f 81       	ldd	r24, Y+7	; 0x07
     99e:	98 85       	ldd	r25, Y+8	; 0x08
     9a0:	9a 83       	std	Y+2, r25	; 0x02
     9a2:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (char)(tmp&(unsigned short)0x00ff);
     9a4:	89 81       	ldd	r24, Y+1	; 0x01
     9a6:	eb 81       	ldd	r30, Y+3	; 0x03
     9a8:	fc 81       	ldd	r31, Y+4	; 0x04
     9aa:	80 83       	st	Z, r24
     9ac:	8b 81       	ldd	r24, Y+3	; 0x03
     9ae:	9c 81       	ldd	r25, Y+4	; 0x04
     9b0:	01 97       	sbiw	r24, 0x01	; 1
     9b2:	9c 83       	std	Y+4, r25	; 0x04
     9b4:	8b 83       	std	Y+3, r24	; 0x03
    tmp>>=8;
     9b6:	89 81       	ldd	r24, Y+1	; 0x01
     9b8:	9a 81       	ldd	r25, Y+2	; 0x02
     9ba:	89 2f       	mov	r24, r25
     9bc:	99 27       	eor	r25, r25
     9be:	9a 83       	std	Y+2, r25	; 0x02
     9c0:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (char)(tmp&(unsigned short)0x00ff);
     9c2:	89 81       	ldd	r24, Y+1	; 0x01
     9c4:	eb 81       	ldd	r30, Y+3	; 0x03
     9c6:	fc 81       	ldd	r31, Y+4	; 0x04
     9c8:	80 83       	st	Z, r24
     9ca:	8b 81       	ldd	r24, Y+3	; 0x03
     9cc:	9c 81       	ldd	r25, Y+4	; 0x04
     9ce:	01 97       	sbiw	r24, 0x01	; 1
     9d0:	9c 83       	std	Y+4, r25	; 0x04
     9d2:	8b 83       	std	Y+3, r24	; 0x03

    // s
    *tos-- = 0x00;
     9d4:	eb 81       	ldd	r30, Y+3	; 0x03
     9d6:	fc 81       	ldd	r31, Y+4	; 0x04
     9d8:	10 82       	st	Z, r1
     9da:	8b 81       	ldd	r24, Y+3	; 0x03
     9dc:	9c 81       	ldd	r25, Y+4	; 0x04
     9de:	01 97       	sbiw	r24, 0x01	; 1
     9e0:	9c 83       	std	Y+4, r25	; 0x04
     9e2:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x00;// r1 must B 0
     9e4:	eb 81       	ldd	r30, Y+3	; 0x03
     9e6:	fc 81       	ldd	r31, Y+4	; 0x04
     9e8:	10 82       	st	Z, r1
     9ea:	8b 81       	ldd	r24, Y+3	; 0x03
     9ec:	9c 81       	ldd	r25, Y+4	; 0x04
     9ee:	01 97       	sbiw	r24, 0x01	; 1
     9f0:	9c 83       	std	Y+4, r25	; 0x04
     9f2:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x02;// r2
     9f4:	eb 81       	ldd	r30, Y+3	; 0x03
     9f6:	fc 81       	ldd	r31, Y+4	; 0x04
     9f8:	82 e0       	ldi	r24, 0x02	; 2
     9fa:	80 83       	st	Z, r24
     9fc:	8b 81       	ldd	r24, Y+3	; 0x03
     9fe:	9c 81       	ldd	r25, Y+4	; 0x04
     a00:	01 97       	sbiw	r24, 0x01	; 1
     a02:	9c 83       	std	Y+4, r25	; 0x04
     a04:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x80;// SREG: enable interrupts
     a06:	eb 81       	ldd	r30, Y+3	; 0x03
     a08:	fc 81       	ldd	r31, Y+4	; 0x04
     a0a:	80 e8       	ldi	r24, 0x80	; 128
     a0c:	80 83       	st	Z, r24
     a0e:	8b 81       	ldd	r24, Y+3	; 0x03
     a10:	9c 81       	ldd	r25, Y+4	; 0x04
     a12:	01 97       	sbiw	r24, 0x01	; 1
     a14:	9c 83       	std	Y+4, r25	; 0x04
     a16:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x03;
     a18:	eb 81       	ldd	r30, Y+3	; 0x03
     a1a:	fc 81       	ldd	r31, Y+4	; 0x04
     a1c:	83 e0       	ldi	r24, 0x03	; 3
     a1e:	80 83       	st	Z, r24
     a20:	8b 81       	ldd	r24, Y+3	; 0x03
     a22:	9c 81       	ldd	r25, Y+4	; 0x04
     a24:	01 97       	sbiw	r24, 0x01	; 1
     a26:	9c 83       	std	Y+4, r25	; 0x04
     a28:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x04;
     a2a:	eb 81       	ldd	r30, Y+3	; 0x03
     a2c:	fc 81       	ldd	r31, Y+4	; 0x04
     a2e:	84 e0       	ldi	r24, 0x04	; 4
     a30:	80 83       	st	Z, r24
     a32:	8b 81       	ldd	r24, Y+3	; 0x03
     a34:	9c 81       	ldd	r25, Y+4	; 0x04
     a36:	01 97       	sbiw	r24, 0x01	; 1
     a38:	9c 83       	std	Y+4, r25	; 0x04
     a3a:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x05;
     a3c:	eb 81       	ldd	r30, Y+3	; 0x03
     a3e:	fc 81       	ldd	r31, Y+4	; 0x04
     a40:	85 e0       	ldi	r24, 0x05	; 5
     a42:	80 83       	st	Z, r24
     a44:	8b 81       	ldd	r24, Y+3	; 0x03
     a46:	9c 81       	ldd	r25, Y+4	; 0x04
     a48:	01 97       	sbiw	r24, 0x01	; 1
     a4a:	9c 83       	std	Y+4, r25	; 0x04
     a4c:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x06;
     a4e:	eb 81       	ldd	r30, Y+3	; 0x03
     a50:	fc 81       	ldd	r31, Y+4	; 0x04
     a52:	86 e0       	ldi	r24, 0x06	; 6
     a54:	80 83       	st	Z, r24
     a56:	8b 81       	ldd	r24, Y+3	; 0x03
     a58:	9c 81       	ldd	r25, Y+4	; 0x04
     a5a:	01 97       	sbiw	r24, 0x01	; 1
     a5c:	9c 83       	std	Y+4, r25	; 0x04
     a5e:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x07;
     a60:	eb 81       	ldd	r30, Y+3	; 0x03
     a62:	fc 81       	ldd	r31, Y+4	; 0x04
     a64:	87 e0       	ldi	r24, 0x07	; 7
     a66:	80 83       	st	Z, r24
     a68:	8b 81       	ldd	r24, Y+3	; 0x03
     a6a:	9c 81       	ldd	r25, Y+4	; 0x04
     a6c:	01 97       	sbiw	r24, 0x01	; 1
     a6e:	9c 83       	std	Y+4, r25	; 0x04
     a70:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x08;
     a72:	eb 81       	ldd	r30, Y+3	; 0x03
     a74:	fc 81       	ldd	r31, Y+4	; 0x04
     a76:	88 e0       	ldi	r24, 0x08	; 8
     a78:	80 83       	st	Z, r24
     a7a:	8b 81       	ldd	r24, Y+3	; 0x03
     a7c:	9c 81       	ldd	r25, Y+4	; 0x04
     a7e:	01 97       	sbiw	r24, 0x01	; 1
     a80:	9c 83       	std	Y+4, r25	; 0x04
     a82:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x09;
     a84:	eb 81       	ldd	r30, Y+3	; 0x03
     a86:	fc 81       	ldd	r31, Y+4	; 0x04
     a88:	89 e0       	ldi	r24, 0x09	; 9
     a8a:	80 83       	st	Z, r24
     a8c:	8b 81       	ldd	r24, Y+3	; 0x03
     a8e:	9c 81       	ldd	r25, Y+4	; 0x04
     a90:	01 97       	sbiw	r24, 0x01	; 1
     a92:	9c 83       	std	Y+4, r25	; 0x04
     a94:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x10;
     a96:	eb 81       	ldd	r30, Y+3	; 0x03
     a98:	fc 81       	ldd	r31, Y+4	; 0x04
     a9a:	80 e1       	ldi	r24, 0x10	; 16
     a9c:	80 83       	st	Z, r24
     a9e:	8b 81       	ldd	r24, Y+3	; 0x03
     aa0:	9c 81       	ldd	r25, Y+4	; 0x04
     aa2:	01 97       	sbiw	r24, 0x01	; 1
     aa4:	9c 83       	std	Y+4, r25	; 0x04
     aa6:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x11;
     aa8:	eb 81       	ldd	r30, Y+3	; 0x03
     aaa:	fc 81       	ldd	r31, Y+4	; 0x04
     aac:	81 e1       	ldi	r24, 0x11	; 17
     aae:	80 83       	st	Z, r24
     ab0:	8b 81       	ldd	r24, Y+3	; 0x03
     ab2:	9c 81       	ldd	r25, Y+4	; 0x04
     ab4:	01 97       	sbiw	r24, 0x01	; 1
     ab6:	9c 83       	std	Y+4, r25	; 0x04
     ab8:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x12;
     aba:	eb 81       	ldd	r30, Y+3	; 0x03
     abc:	fc 81       	ldd	r31, Y+4	; 0x04
     abe:	82 e1       	ldi	r24, 0x12	; 18
     ac0:	80 83       	st	Z, r24
     ac2:	8b 81       	ldd	r24, Y+3	; 0x03
     ac4:	9c 81       	ldd	r25, Y+4	; 0x04
     ac6:	01 97       	sbiw	r24, 0x01	; 1
     ac8:	9c 83       	std	Y+4, r25	; 0x04
     aca:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x13;
     acc:	eb 81       	ldd	r30, Y+3	; 0x03
     ace:	fc 81       	ldd	r31, Y+4	; 0x04
     ad0:	83 e1       	ldi	r24, 0x13	; 19
     ad2:	80 83       	st	Z, r24
     ad4:	8b 81       	ldd	r24, Y+3	; 0x03
     ad6:	9c 81       	ldd	r25, Y+4	; 0x04
     ad8:	01 97       	sbiw	r24, 0x01	; 1
     ada:	9c 83       	std	Y+4, r25	; 0x04
     adc:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x14;
     ade:	eb 81       	ldd	r30, Y+3	; 0x03
     ae0:	fc 81       	ldd	r31, Y+4	; 0x04
     ae2:	84 e1       	ldi	r24, 0x14	; 20
     ae4:	80 83       	st	Z, r24
     ae6:	8b 81       	ldd	r24, Y+3	; 0x03
     ae8:	9c 81       	ldd	r25, Y+4	; 0x04
     aea:	01 97       	sbiw	r24, 0x01	; 1
     aec:	9c 83       	std	Y+4, r25	; 0x04
     aee:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x15;
     af0:	eb 81       	ldd	r30, Y+3	; 0x03
     af2:	fc 81       	ldd	r31, Y+4	; 0x04
     af4:	85 e1       	ldi	r24, 0x15	; 21
     af6:	80 83       	st	Z, r24
     af8:	8b 81       	ldd	r24, Y+3	; 0x03
     afa:	9c 81       	ldd	r25, Y+4	; 0x04
     afc:	01 97       	sbiw	r24, 0x01	; 1
     afe:	9c 83       	std	Y+4, r25	; 0x04
     b00:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x16;
     b02:	eb 81       	ldd	r30, Y+3	; 0x03
     b04:	fc 81       	ldd	r31, Y+4	; 0x04
     b06:	86 e1       	ldi	r24, 0x16	; 22
     b08:	80 83       	st	Z, r24
     b0a:	8b 81       	ldd	r24, Y+3	; 0x03
     b0c:	9c 81       	ldd	r25, Y+4	; 0x04
     b0e:	01 97       	sbiw	r24, 0x01	; 1
     b10:	9c 83       	std	Y+4, r25	; 0x04
     b12:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x17;
     b14:	eb 81       	ldd	r30, Y+3	; 0x03
     b16:	fc 81       	ldd	r31, Y+4	; 0x04
     b18:	87 e1       	ldi	r24, 0x17	; 23
     b1a:	80 83       	st	Z, r24
     b1c:	8b 81       	ldd	r24, Y+3	; 0x03
     b1e:	9c 81       	ldd	r25, Y+4	; 0x04
     b20:	01 97       	sbiw	r24, 0x01	; 1
     b22:	9c 83       	std	Y+4, r25	; 0x04
     b24:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x18;
     b26:	eb 81       	ldd	r30, Y+3	; 0x03
     b28:	fc 81       	ldd	r31, Y+4	; 0x04
     b2a:	88 e1       	ldi	r24, 0x18	; 24
     b2c:	80 83       	st	Z, r24
     b2e:	8b 81       	ldd	r24, Y+3	; 0x03
     b30:	9c 81       	ldd	r25, Y+4	; 0x04
     b32:	01 97       	sbiw	r24, 0x01	; 1
     b34:	9c 83       	std	Y+4, r25	; 0x04
     b36:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x19;
     b38:	eb 81       	ldd	r30, Y+3	; 0x03
     b3a:	fc 81       	ldd	r31, Y+4	; 0x04
     b3c:	89 e1       	ldi	r24, 0x19	; 25
     b3e:	80 83       	st	Z, r24
     b40:	8b 81       	ldd	r24, Y+3	; 0x03
     b42:	9c 81       	ldd	r25, Y+4	; 0x04
     b44:	01 97       	sbiw	r24, 0x01	; 1
     b46:	9c 83       	std	Y+4, r25	; 0x04
     b48:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x20;
     b4a:	eb 81       	ldd	r30, Y+3	; 0x03
     b4c:	fc 81       	ldd	r31, Y+4	; 0x04
     b4e:	80 e2       	ldi	r24, 0x20	; 32
     b50:	80 83       	st	Z, r24
     b52:	8b 81       	ldd	r24, Y+3	; 0x03
     b54:	9c 81       	ldd	r25, Y+4	; 0x04
     b56:	01 97       	sbiw	r24, 0x01	; 1
     b58:	9c 83       	std	Y+4, r25	; 0x04
     b5a:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x21;
     b5c:	eb 81       	ldd	r30, Y+3	; 0x03
     b5e:	fc 81       	ldd	r31, Y+4	; 0x04
     b60:	81 e2       	ldi	r24, 0x21	; 33
     b62:	80 83       	st	Z, r24
     b64:	8b 81       	ldd	r24, Y+3	; 0x03
     b66:	9c 81       	ldd	r25, Y+4	; 0x04
     b68:	01 97       	sbiw	r24, 0x01	; 1
     b6a:	9c 83       	std	Y+4, r25	; 0x04
     b6c:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x22;
     b6e:	eb 81       	ldd	r30, Y+3	; 0x03
     b70:	fc 81       	ldd	r31, Y+4	; 0x04
     b72:	82 e2       	ldi	r24, 0x22	; 34
     b74:	80 83       	st	Z, r24
     b76:	8b 81       	ldd	r24, Y+3	; 0x03
     b78:	9c 81       	ldd	r25, Y+4	; 0x04
     b7a:	01 97       	sbiw	r24, 0x01	; 1
     b7c:	9c 83       	std	Y+4, r25	; 0x04
     b7e:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x23;
     b80:	eb 81       	ldd	r30, Y+3	; 0x03
     b82:	fc 81       	ldd	r31, Y+4	; 0x04
     b84:	83 e2       	ldi	r24, 0x23	; 35
     b86:	80 83       	st	Z, r24
     b88:	8b 81       	ldd	r24, Y+3	; 0x03
     b8a:	9c 81       	ldd	r25, Y+4	; 0x04
     b8c:	01 97       	sbiw	r24, 0x01	; 1
     b8e:	9c 83       	std	Y+4, r25	; 0x04
     b90:	8b 83       	std	Y+3, r24	; 0x03

    tmp = (unsigned short)arg;
     b92:	89 85       	ldd	r24, Y+9	; 0x09
     b94:	9a 85       	ldd	r25, Y+10	; 0x0a
     b96:	9a 83       	std	Y+2, r25	; 0x02
     b98:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (char)(tmp&(unsigned short)0x00ff); // r24 LSByte of arg
     b9a:	89 81       	ldd	r24, Y+1	; 0x01
     b9c:	eb 81       	ldd	r30, Y+3	; 0x03
     b9e:	fc 81       	ldd	r31, Y+4	; 0x04
     ba0:	80 83       	st	Z, r24
     ba2:	8b 81       	ldd	r24, Y+3	; 0x03
     ba4:	9c 81       	ldd	r25, Y+4	; 0x04
     ba6:	01 97       	sbiw	r24, 0x01	; 1
     ba8:	9c 83       	std	Y+4, r25	; 0x04
     baa:	8b 83       	std	Y+3, r24	; 0x03
    tmp>>=8;
     bac:	89 81       	ldd	r24, Y+1	; 0x01
     bae:	9a 81       	ldd	r25, Y+2	; 0x02
     bb0:	89 2f       	mov	r24, r25
     bb2:	99 27       	eor	r25, r25
     bb4:	9a 83       	std	Y+2, r25	; 0x02
     bb6:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (char)(tmp&(unsigned short)0x00ff); // r25 MSByte of arg
     bb8:	89 81       	ldd	r24, Y+1	; 0x01
     bba:	eb 81       	ldd	r30, Y+3	; 0x03
     bbc:	fc 81       	ldd	r31, Y+4	; 0x04
     bbe:	80 83       	st	Z, r24
     bc0:	8b 81       	ldd	r24, Y+3	; 0x03
     bc2:	9c 81       	ldd	r25, Y+4	; 0x04
     bc4:	01 97       	sbiw	r24, 0x01	; 1
     bc6:	9c 83       	std	Y+4, r25	; 0x04
     bc8:	8b 83       	std	Y+3, r24	; 0x03

    *tos-- = 0x26;
     bca:	eb 81       	ldd	r30, Y+3	; 0x03
     bcc:	fc 81       	ldd	r31, Y+4	; 0x04
     bce:	86 e2       	ldi	r24, 0x26	; 38
     bd0:	80 83       	st	Z, r24
     bd2:	8b 81       	ldd	r24, Y+3	; 0x03
     bd4:	9c 81       	ldd	r25, Y+4	; 0x04
     bd6:	01 97       	sbiw	r24, 0x01	; 1
     bd8:	9c 83       	std	Y+4, r25	; 0x04
     bda:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x27;
     bdc:	eb 81       	ldd	r30, Y+3	; 0x03
     bde:	fc 81       	ldd	r31, Y+4	; 0x04
     be0:	87 e2       	ldi	r24, 0x27	; 39
     be2:	80 83       	st	Z, r24
     be4:	8b 81       	ldd	r24, Y+3	; 0x03
     be6:	9c 81       	ldd	r25, Y+4	; 0x04
     be8:	01 97       	sbiw	r24, 0x01	; 1
     bea:	9c 83       	std	Y+4, r25	; 0x04
     bec:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x28;
     bee:	eb 81       	ldd	r30, Y+3	; 0x03
     bf0:	fc 81       	ldd	r31, Y+4	; 0x04
     bf2:	88 e2       	ldi	r24, 0x28	; 40
     bf4:	80 83       	st	Z, r24
     bf6:	8b 81       	ldd	r24, Y+3	; 0x03
     bf8:	9c 81       	ldd	r25, Y+4	; 0x04
     bfa:	01 97       	sbiw	r24, 0x01	; 1
     bfc:	9c 83       	std	Y+4, r25	; 0x04
     bfe:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x29;
     c00:	eb 81       	ldd	r30, Y+3	; 0x03
     c02:	fc 81       	ldd	r31, Y+4	; 0x04
     c04:	89 e2       	ldi	r24, 0x29	; 41
     c06:	80 83       	st	Z, r24
     c08:	8b 81       	ldd	r24, Y+3	; 0x03
     c0a:	9c 81       	ldd	r25, Y+4	; 0x04
     c0c:	01 97       	sbiw	r24, 0x01	; 1
     c0e:	9c 83       	std	Y+4, r25	; 0x04
     c10:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x30;
     c12:	eb 81       	ldd	r30, Y+3	; 0x03
     c14:	fc 81       	ldd	r31, Y+4	; 0x04
     c16:	80 e3       	ldi	r24, 0x30	; 48
     c18:	80 83       	st	Z, r24
     c1a:	8b 81       	ldd	r24, Y+3	; 0x03
     c1c:	9c 81       	ldd	r25, Y+4	; 0x04
     c1e:	01 97       	sbiw	r24, 0x01	; 1
     c20:	9c 83       	std	Y+4, r25	; 0x04
     c22:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x31;
     c24:	eb 81       	ldd	r30, Y+3	; 0x03
     c26:	fc 81       	ldd	r31, Y+4	; 0x04
     c28:	81 e3       	ldi	r24, 0x31	; 49
     c2a:	80 83       	st	Z, r24
     c2c:	8b 81       	ldd	r24, Y+3	; 0x03
     c2e:	9c 81       	ldd	r25, Y+4	; 0x04
     c30:	01 97       	sbiw	r24, 0x01	; 1
     c32:	9c 83       	std	Y+4, r25	; 0x04
     c34:	8b 83       	std	Y+3, r24	; 0x03
#ifdef RAMPZ
    *tos-- = 0xff;
#endif
    return((void *)tos);
     c36:	8b 81       	ldd	r24, Y+3	; 0x03
     c38:	9c 81       	ldd	r25, Y+4	; 0x04
}
     c3a:	2a 96       	adiw	r28, 0x0a	; 10
     c3c:	0f b6       	in	r0, 0x3f	; 63
     c3e:	f8 94       	cli
     c40:	de bf       	out	0x3e, r29	; 62
     c42:	0f be       	out	0x3f, r0	; 63
     c44:	cd bf       	out	0x3d, r28	; 61
     c46:	cf 91       	pop	r28
     c48:	df 91       	pop	r29
     c4a:	08 95       	ret

00000c4c <enter_crit_sec>:
    if( kernel.sched[core].nested_crit_sec == (count_t)0 )enable_interrupts();
}

#else
void enter_crit_sec(void)
{
     c4c:	df 93       	push	r29
     c4e:	cf 93       	push	r28
     c50:	cd b7       	in	r28, 0x3d	; 61
     c52:	de b7       	in	r29, 0x3e	; 62
    disable_interrupts();
     c54:	0e 94 bc 00 	call	0x178	; 0x178 <disable_interrupts>
    kernel.sched.nested_crit_sec++;
     c58:	80 91 c6 01 	lds	r24, 0x01C6
     c5c:	90 91 c7 01 	lds	r25, 0x01C7
     c60:	01 96       	adiw	r24, 0x01	; 1
     c62:	90 93 c7 01 	sts	0x01C7, r25
     c66:	80 93 c6 01 	sts	0x01C6, r24
}
     c6a:	cf 91       	pop	r28
     c6c:	df 91       	pop	r29
     c6e:	08 95       	ret

00000c70 <exit_crit_sec>:
void exit_crit_sec(void)
{
     c70:	df 93       	push	r29
     c72:	cf 93       	push	r28
     c74:	cd b7       	in	r28, 0x3d	; 61
     c76:	de b7       	in	r29, 0x3e	; 62
    if( kernel.sched.nested_crit_sec != (count_t)0 )kernel.sched.nested_crit_sec--;
     c78:	80 91 c6 01 	lds	r24, 0x01C6
     c7c:	90 91 c7 01 	lds	r25, 0x01C7
     c80:	00 97       	sbiw	r24, 0x00	; 0
     c82:	49 f0       	breq	.+18     	; 0xc96 <exit_crit_sec+0x26>
     c84:	80 91 c6 01 	lds	r24, 0x01C6
     c88:	90 91 c7 01 	lds	r25, 0x01C7
     c8c:	01 97       	sbiw	r24, 0x01	; 1
     c8e:	90 93 c7 01 	sts	0x01C7, r25
     c92:	80 93 c6 01 	sts	0x01C6, r24
    if( kernel.sched.nested_crit_sec == (count_t)0 )enable_interrupts();
     c96:	80 91 c6 01 	lds	r24, 0x01C6
     c9a:	90 91 c7 01 	lds	r25, 0x01C7
     c9e:	00 97       	sbiw	r24, 0x00	; 0
     ca0:	11 f4       	brne	.+4      	; 0xca6 <exit_crit_sec+0x36>
     ca2:	0e 94 c4 00 	call	0x188	; 0x188 <enable_interrupts>
}
     ca6:	cf 91       	pop	r28
     ca8:	df 91       	pop	r29
     caa:	08 95       	ret

00000cac <gitem_init>:
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
// Инициация
void gitem_init(gitem_t * gitem, prio_t prio)
{
     cac:	df 93       	push	r29
     cae:	cf 93       	push	r28
     cb0:	00 d0       	rcall	.+0      	; 0xcb2 <gitem_init+0x6>
     cb2:	00 d0       	rcall	.+0      	; 0xcb4 <gitem_init+0x8>
     cb4:	0f 92       	push	r0
     cb6:	cd b7       	in	r28, 0x3d	; 61
     cb8:	de b7       	in	r29, 0x3e	; 62
     cba:	9c 83       	std	Y+4, r25	; 0x04
     cbc:	8b 83       	std	Y+3, r24	; 0x03
     cbe:	6d 83       	std	Y+5, r22	; 0x05
    group_t * group = &gitem->grp;
     cc0:	8b 81       	ldd	r24, Y+3	; 0x03
     cc2:	9c 81       	ldd	r25, Y+4	; 0x04
     cc4:	06 96       	adiw	r24, 0x06	; 6
     cc6:	9a 83       	std	Y+2, r25	; 0x02
     cc8:	89 83       	std	Y+1, r24	; 0x01
    item_init( (item_t *)gitem );
     cca:	8b 81       	ldd	r24, Y+3	; 0x03
     ccc:	9c 81       	ldd	r25, Y+4	; 0x04
     cce:	0e 94 3c 09 	call	0x1278	; 0x1278 <item_init>
    group_init( group, prio );
     cd2:	89 81       	ldd	r24, Y+1	; 0x01
     cd4:	9a 81       	ldd	r25, Y+2	; 0x02
     cd6:	6d 81       	ldd	r22, Y+5	; 0x05
     cd8:	0e 94 ac 08 	call	0x1158	; 0x1158 <group_init>
    gitem->group = group;
     cdc:	eb 81       	ldd	r30, Y+3	; 0x03
     cde:	fc 81       	ldd	r31, Y+4	; 0x04
     ce0:	89 81       	ldd	r24, Y+1	; 0x01
     ce2:	9a 81       	ldd	r25, Y+2	; 0x02
     ce4:	95 83       	std	Z+5, r25	; 0x05
     ce6:	84 83       	std	Z+4, r24	; 0x04
}
     ce8:	0f 90       	pop	r0
     cea:	0f 90       	pop	r0
     cec:	0f 90       	pop	r0
     cee:	0f 90       	pop	r0
     cf0:	0f 90       	pop	r0
     cf2:	cf 91       	pop	r28
     cf4:	df 91       	pop	r29
     cf6:	08 95       	ret

00000cf8 <gitem_insert>:
// Вставить в список
void gitem_insert(gitem_t * gitem, xlist_t *xlist)
{
     cf8:	df 93       	push	r29
     cfa:	cf 93       	push	r28
     cfc:	cd b7       	in	r28, 0x3d	; 61
     cfe:	de b7       	in	r29, 0x3e	; 62
     d00:	28 97       	sbiw	r28, 0x08	; 8
     d02:	0f b6       	in	r0, 0x3f	; 63
     d04:	f8 94       	cli
     d06:	de bf       	out	0x3e, r29	; 62
     d08:	0f be       	out	0x3f, r0	; 63
     d0a:	cd bf       	out	0x3d, r28	; 61
     d0c:	9e 83       	std	Y+6, r25	; 0x06
     d0e:	8d 83       	std	Y+5, r24	; 0x05
     d10:	78 87       	std	Y+8, r23	; 0x08
     d12:	6f 83       	std	Y+7, r22	; 0x07
    prio_t prio = gitem->group->prio;
     d14:	ed 81       	ldd	r30, Y+5	; 0x05
     d16:	fe 81       	ldd	r31, Y+6	; 0x06
     d18:	04 80       	ldd	r0, Z+4	; 0x04
     d1a:	f5 81       	ldd	r31, Z+5	; 0x05
     d1c:	e0 2d       	mov	r30, r0
     d1e:	82 81       	ldd	r24, Z+2	; 0x02
     d20:	8c 83       	std	Y+4, r24	; 0x04
    index_t mask = ((index_t)1)<<prio;
     d22:	8c 81       	ldd	r24, Y+4	; 0x04
     d24:	28 2f       	mov	r18, r24
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	02 c0       	rjmp	.+4      	; 0xd32 <gitem_insert+0x3a>
     d2e:	88 0f       	add	r24, r24
     d30:	99 1f       	adc	r25, r25
     d32:	2a 95       	dec	r18
     d34:	e2 f7       	brpl	.-8      	; 0xd2e <gitem_insert+0x36>
     d36:	8b 83       	std	Y+3, r24	; 0x03
    item_t ** head = (item_t **)xlist + prio;
     d38:	2f 81       	ldd	r18, Y+7	; 0x07
     d3a:	38 85       	ldd	r19, Y+8	; 0x08
     d3c:	8c 81       	ldd	r24, Y+4	; 0x04
     d3e:	88 2f       	mov	r24, r24
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	88 0f       	add	r24, r24
     d44:	99 1f       	adc	r25, r25
     d46:	82 0f       	add	r24, r18
     d48:	93 1f       	adc	r25, r19
     d4a:	9a 83       	std	Y+2, r25	; 0x02
     d4c:	89 83       	std	Y+1, r24	; 0x01
    // Пуста ли часть списка с таким приоритетом
    if( ( xlist->index )& mask)
     d4e:	ef 81       	ldd	r30, Y+7	; 0x07
     d50:	f8 85       	ldd	r31, Y+8	; 0x08
     d52:	90 89       	ldd	r25, Z+16	; 0x10
     d54:	8b 81       	ldd	r24, Y+3	; 0x03
     d56:	89 23       	and	r24, r25
     d58:	88 23       	and	r24, r24
     d5a:	51 f0       	breq	.+20     	; 0xd70 <gitem_insert+0x78>
    {
        //Не пуста вставляем туда gitem
        item_insert( (item_t *)gitem, *head );
     d5c:	8d 81       	ldd	r24, Y+5	; 0x05
     d5e:	9e 81       	ldd	r25, Y+6	; 0x06
     d60:	e9 81       	ldd	r30, Y+1	; 0x01
     d62:	fa 81       	ldd	r31, Y+2	; 0x02
     d64:	20 81       	ld	r18, Z
     d66:	31 81       	ldd	r19, Z+1	; 0x01
     d68:	b9 01       	movw	r22, r18
     d6a:	0e 94 54 09 	call	0x12a8	; 0x12a8 <item_insert>
     d6e:	0e c0       	rjmp	.+28     	; 0xd8c <gitem_insert+0x94>
    }
    else
    {
        // Пуста, gitem будет головой
        *head = (item_t *)gitem;
     d70:	8d 81       	ldd	r24, Y+5	; 0x05
     d72:	9e 81       	ldd	r25, Y+6	; 0x06
     d74:	e9 81       	ldd	r30, Y+1	; 0x01
     d76:	fa 81       	ldd	r31, Y+2	; 0x02
     d78:	91 83       	std	Z+1, r25	; 0x01
     d7a:	80 83       	st	Z, r24
        xlist->index |= mask;
     d7c:	ef 81       	ldd	r30, Y+7	; 0x07
     d7e:	f8 85       	ldd	r31, Y+8	; 0x08
     d80:	90 89       	ldd	r25, Z+16	; 0x10
     d82:	8b 81       	ldd	r24, Y+3	; 0x03
     d84:	89 2b       	or	r24, r25
     d86:	ef 81       	ldd	r30, Y+7	; 0x07
     d88:	f8 85       	ldd	r31, Y+8	; 0x08
     d8a:	80 8b       	std	Z+16, r24	; 0x10
    }
    gitem->group->link = (void *)xlist;
     d8c:	ed 81       	ldd	r30, Y+5	; 0x05
     d8e:	fe 81       	ldd	r31, Y+6	; 0x06
     d90:	04 80       	ldd	r0, Z+4	; 0x04
     d92:	f5 81       	ldd	r31, Z+5	; 0x05
     d94:	e0 2d       	mov	r30, r0
     d96:	8f 81       	ldd	r24, Y+7	; 0x07
     d98:	98 85       	ldd	r25, Y+8	; 0x08
     d9a:	91 83       	std	Z+1, r25	; 0x01
     d9c:	80 83       	st	Z, r24
}
     d9e:	28 96       	adiw	r28, 0x08	; 8
     da0:	0f b6       	in	r0, 0x3f	; 63
     da2:	f8 94       	cli
     da4:	de bf       	out	0x3e, r29	; 62
     da6:	0f be       	out	0x3f, r0	; 63
     da8:	cd bf       	out	0x3d, r28	; 61
     daa:	cf 91       	pop	r28
     dac:	df 91       	pop	r29
     dae:	08 95       	ret

00000db0 <gitem_insert_group>:
 при этом gitem->group переходит в Пул

 Ограничения на gitem - он не должен быть сгруппирован в момент встаки в группу.
*/
void gitem_insert_group(gitem_t * gitem, xlist_t *xlist)
{
     db0:	df 93       	push	r29
     db2:	cf 93       	push	r28
     db4:	cd b7       	in	r28, 0x3d	; 61
     db6:	de b7       	in	r29, 0x3e	; 62
     db8:	2a 97       	sbiw	r28, 0x0a	; 10
     dba:	0f b6       	in	r0, 0x3f	; 63
     dbc:	f8 94       	cli
     dbe:	de bf       	out	0x3e, r29	; 62
     dc0:	0f be       	out	0x3f, r0	; 63
     dc2:	cd bf       	out	0x3d, r28	; 61
     dc4:	98 87       	std	Y+8, r25	; 0x08
     dc6:	8f 83       	std	Y+7, r24	; 0x07
     dc8:	7a 87       	std	Y+10, r23	; 0x0a
     dca:	69 87       	std	Y+9, r22	; 0x09
    prio_t prio = gitem->group->prio;
     dcc:	ef 81       	ldd	r30, Y+7	; 0x07
     dce:	f8 85       	ldd	r31, Y+8	; 0x08
     dd0:	04 80       	ldd	r0, Z+4	; 0x04
     dd2:	f5 81       	ldd	r31, Z+5	; 0x05
     dd4:	e0 2d       	mov	r30, r0
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	8e 83       	std	Y+6, r24	; 0x06
    index_t mask = ((index_t)1)<<prio;
     dda:	8e 81       	ldd	r24, Y+6	; 0x06
     ddc:	28 2f       	mov	r18, r24
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	02 c0       	rjmp	.+4      	; 0xdea <gitem_insert_group+0x3a>
     de6:	88 0f       	add	r24, r24
     de8:	99 1f       	adc	r25, r25
     dea:	2a 95       	dec	r18
     dec:	e2 f7       	brpl	.-8      	; 0xde6 <gitem_insert_group+0x36>
     dee:	8d 83       	std	Y+5, r24	; 0x05
    item_t ** head = (item_t **)xlist + prio;
     df0:	29 85       	ldd	r18, Y+9	; 0x09
     df2:	3a 85       	ldd	r19, Y+10	; 0x0a
     df4:	8e 81       	ldd	r24, Y+6	; 0x06
     df6:	88 2f       	mov	r24, r24
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	88 0f       	add	r24, r24
     dfc:	99 1f       	adc	r25, r25
     dfe:	82 0f       	add	r24, r18
     e00:	93 1f       	adc	r25, r19
     e02:	9c 83       	std	Y+4, r25	; 0x04
     e04:	8b 83       	std	Y+3, r24	; 0x03
    group_t * group = gitem->group;
     e06:	ef 81       	ldd	r30, Y+7	; 0x07
     e08:	f8 85       	ldd	r31, Y+8	; 0x08
     e0a:	84 81       	ldd	r24, Z+4	; 0x04
     e0c:	95 81       	ldd	r25, Z+5	; 0x05
     e0e:	9a 83       	std	Y+2, r25	; 0x02
     e10:	89 83       	std	Y+1, r24	; 0x01
    // Пуста ли часть списка с таким приоритетом
    if( ( xlist->index )& mask)
     e12:	e9 85       	ldd	r30, Y+9	; 0x09
     e14:	fa 85       	ldd	r31, Y+10	; 0x0a
     e16:	90 89       	ldd	r25, Z+16	; 0x10
     e18:	8d 81       	ldd	r24, Y+5	; 0x05
     e1a:	89 23       	and	r24, r25
     e1c:	88 23       	and	r24, r24
     e1e:	31 f1       	breq	.+76     	; 0xe6c <gitem_insert_group+0xbc>
    {
        //Не пуста вставляем туда gitem
        item_insert((item_t *)gitem, *head );
     e20:	8f 81       	ldd	r24, Y+7	; 0x07
     e22:	98 85       	ldd	r25, Y+8	; 0x08
     e24:	eb 81       	ldd	r30, Y+3	; 0x03
     e26:	fc 81       	ldd	r31, Y+4	; 0x04
     e28:	20 81       	ld	r18, Z
     e2a:	31 81       	ldd	r19, Z+1	; 0x01
     e2c:	b9 01       	movw	r22, r18
     e2e:	0e 94 54 09 	call	0x12a8	; 0x12a8 <item_insert>
        //Передаем старую группу в пул
        group_push(group);
     e32:	89 81       	ldd	r24, Y+1	; 0x01
     e34:	9a 81       	ldd	r25, Y+2	; 0x02
     e36:	0e 94 c9 08 	call	0x1192	; 0x1192 <group_push>
        //назначаем новую группу - ту, в которой голова
        group = ((gitem_t *)*head)->group;
     e3a:	eb 81       	ldd	r30, Y+3	; 0x03
     e3c:	fc 81       	ldd	r31, Y+4	; 0x04
     e3e:	80 81       	ld	r24, Z
     e40:	91 81       	ldd	r25, Z+1	; 0x01
     e42:	fc 01       	movw	r30, r24
     e44:	84 81       	ldd	r24, Z+4	; 0x04
     e46:	95 81       	ldd	r25, Z+5	; 0x05
     e48:	9a 83       	std	Y+2, r25	; 0x02
     e4a:	89 83       	std	Y+1, r24	; 0x01
        gitem->group = group;
     e4c:	ef 81       	ldd	r30, Y+7	; 0x07
     e4e:	f8 85       	ldd	r31, Y+8	; 0x08
     e50:	89 81       	ldd	r24, Y+1	; 0x01
     e52:	9a 81       	ldd	r25, Y+2	; 0x02
     e54:	95 83       	std	Z+5, r25	; 0x05
     e56:	84 83       	std	Z+4, r24	; 0x04
        //количество элементов в группе увеличилось на 1
        group->el_num++;
     e58:	e9 81       	ldd	r30, Y+1	; 0x01
     e5a:	fa 81       	ldd	r31, Y+2	; 0x02
     e5c:	83 81       	ldd	r24, Z+3	; 0x03
     e5e:	94 81       	ldd	r25, Z+4	; 0x04
     e60:	01 96       	adiw	r24, 0x01	; 1
     e62:	e9 81       	ldd	r30, Y+1	; 0x01
     e64:	fa 81       	ldd	r31, Y+2	; 0x02
     e66:	94 83       	std	Z+4, r25	; 0x04
     e68:	83 83       	std	Z+3, r24	; 0x03
     e6a:	14 c0       	rjmp	.+40     	; 0xe94 <gitem_insert_group+0xe4>
    }
    else
    {
        // Пуста, gitem будет головой
        *head = (item_t *)gitem;
     e6c:	8f 81       	ldd	r24, Y+7	; 0x07
     e6e:	98 85       	ldd	r25, Y+8	; 0x08
     e70:	eb 81       	ldd	r30, Y+3	; 0x03
     e72:	fc 81       	ldd	r31, Y+4	; 0x04
     e74:	91 83       	std	Z+1, r25	; 0x01
     e76:	80 83       	st	Z, r24
        xlist->index |= mask;
     e78:	e9 85       	ldd	r30, Y+9	; 0x09
     e7a:	fa 85       	ldd	r31, Y+10	; 0x0a
     e7c:	90 89       	ldd	r25, Z+16	; 0x10
     e7e:	8d 81       	ldd	r24, Y+5	; 0x05
     e80:	89 2b       	or	r24, r25
     e82:	e9 85       	ldd	r30, Y+9	; 0x09
     e84:	fa 85       	ldd	r31, Y+10	; 0x0a
     e86:	80 8b       	std	Z+16, r24	; 0x10
        group->link = (void *)xlist;
     e88:	e9 81       	ldd	r30, Y+1	; 0x01
     e8a:	fa 81       	ldd	r31, Y+2	; 0x02
     e8c:	89 85       	ldd	r24, Y+9	; 0x09
     e8e:	9a 85       	ldd	r25, Y+10	; 0x0a
     e90:	91 83       	std	Z+1, r25	; 0x01
     e92:	80 83       	st	Z, r24
    }
}
     e94:	2a 96       	adiw	r28, 0x0a	; 10
     e96:	0f b6       	in	r0, 0x3f	; 63
     e98:	f8 94       	cli
     e9a:	de bf       	out	0x3e, r29	; 62
     e9c:	0f be       	out	0x3f, r0	; 63
     e9e:	cd bf       	out	0x3d, r28	; 61
     ea0:	cf 91       	pop	r28
     ea2:	df 91       	pop	r29
     ea4:	08 95       	ret

00000ea6 <gitem_fast_cut>:
// Быстро вырезать из списка (не обнуляется указатель gitem->group->link)
void gitem_fast_cut(gitem_t * gitem)
{
     ea6:	df 93       	push	r29
     ea8:	cf 93       	push	r28
     eaa:	00 d0       	rcall	.+0      	; 0xeac <gitem_fast_cut+0x6>
     eac:	00 d0       	rcall	.+0      	; 0xeae <gitem_fast_cut+0x8>
     eae:	0f 92       	push	r0
     eb0:	cd b7       	in	r28, 0x3d	; 61
     eb2:	de b7       	in	r29, 0x3e	; 62
     eb4:	9d 83       	std	Y+5, r25	; 0x05
     eb6:	8c 83       	std	Y+4, r24	; 0x04
    prio_t prio = gitem->group->prio;
     eb8:	ec 81       	ldd	r30, Y+4	; 0x04
     eba:	fd 81       	ldd	r31, Y+5	; 0x05
     ebc:	04 80       	ldd	r0, Z+4	; 0x04
     ebe:	f5 81       	ldd	r31, Z+5	; 0x05
     ec0:	e0 2d       	mov	r30, r0
     ec2:	82 81       	ldd	r24, Z+2	; 0x02
     ec4:	8b 83       	std	Y+3, r24	; 0x03
    xlist_t * xlist = (xlist_t *)gitem->group->link;
     ec6:	ec 81       	ldd	r30, Y+4	; 0x04
     ec8:	fd 81       	ldd	r31, Y+5	; 0x05
     eca:	04 80       	ldd	r0, Z+4	; 0x04
     ecc:	f5 81       	ldd	r31, Z+5	; 0x05
     ece:	e0 2d       	mov	r30, r0
     ed0:	80 81       	ld	r24, Z
     ed2:	91 81       	ldd	r25, Z+1	; 0x01
     ed4:	9a 83       	std	Y+2, r25	; 0x02
     ed6:	89 83       	std	Y+1, r24	; 0x01
    // Является ли эта часть списка группированной?
    if( gitem->group->el_num > (count_t)1 )
     ed8:	ec 81       	ldd	r30, Y+4	; 0x04
     eda:	fd 81       	ldd	r31, Y+5	; 0x05
     edc:	04 80       	ldd	r0, Z+4	; 0x04
     ede:	f5 81       	ldd	r31, Z+5	; 0x05
     ee0:	e0 2d       	mov	r30, r0
     ee2:	83 81       	ldd	r24, Z+3	; 0x03
     ee4:	94 81       	ldd	r25, Z+4	; 0x04
     ee6:	82 30       	cpi	r24, 0x02	; 2
     ee8:	91 05       	cpc	r25, r1
     eea:	b8 f0       	brcs	.+46     	; 0xf1a <gitem_fast_cut+0x74>
    {
        //Группированная часть списка, будем вырезать из группы с выделением новой группы из Пула
        // В текущей группе стало на 1 элемент меньше
        gitem->group->el_num--;
     eec:	ec 81       	ldd	r30, Y+4	; 0x04
     eee:	fd 81       	ldd	r31, Y+5	; 0x05
     ef0:	04 80       	ldd	r0, Z+4	; 0x04
     ef2:	f5 81       	ldd	r31, Z+5	; 0x05
     ef4:	e0 2d       	mov	r30, r0
     ef6:	83 81       	ldd	r24, Z+3	; 0x03
     ef8:	94 81       	ldd	r25, Z+4	; 0x04
     efa:	01 97       	sbiw	r24, 0x01	; 1
     efc:	94 83       	std	Z+4, r25	; 0x04
     efe:	83 83       	std	Z+3, r24	; 0x03
        //выделяем новую группу
        gitem->group = group_pop();
     f00:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <group_pop>
     f04:	ec 81       	ldd	r30, Y+4	; 0x04
     f06:	fd 81       	ldd	r31, Y+5	; 0x05
     f08:	95 83       	std	Z+5, r25	; 0x05
     f0a:	84 83       	std	Z+4, r24	; 0x04
        // Правильный приоритет, количество элементов в группе, выделенной из пула должно быть равно 1
        gitem->group->prio = (prio_t)prio;
     f0c:	ec 81       	ldd	r30, Y+4	; 0x04
     f0e:	fd 81       	ldd	r31, Y+5	; 0x05
     f10:	04 80       	ldd	r0, Z+4	; 0x04
     f12:	f5 81       	ldd	r31, Z+5	; 0x05
     f14:	e0 2d       	mov	r30, r0
     f16:	8b 81       	ldd	r24, Y+3	; 0x03
     f18:	82 83       	std	Z+2, r24	; 0x02
    }
    //Является ли элемент единственным в своей части списка?
    if( ((item_t *)gitem)->next == (item_t *)gitem )
     f1a:	ec 81       	ldd	r30, Y+4	; 0x04
     f1c:	fd 81       	ldd	r31, Y+5	; 0x05
     f1e:	20 81       	ld	r18, Z
     f20:	31 81       	ldd	r19, Z+1	; 0x01
     f22:	8c 81       	ldd	r24, Y+4	; 0x04
     f24:	9d 81       	ldd	r25, Y+5	; 0x05
     f26:	28 17       	cp	r18, r24
     f28:	39 07       	cpc	r19, r25
     f2a:	09 f5       	brne	.+66     	; 0xf6e <gitem_fast_cut+0xc8>
    {
        // Да, является!
        xlist->item[prio] = (item_t *)0;
     f2c:	8b 81       	ldd	r24, Y+3	; 0x03
     f2e:	88 2f       	mov	r24, r24
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	29 81       	ldd	r18, Y+1	; 0x01
     f34:	3a 81       	ldd	r19, Y+2	; 0x02
     f36:	88 0f       	add	r24, r24
     f38:	99 1f       	adc	r25, r25
     f3a:	f9 01       	movw	r30, r18
     f3c:	e8 0f       	add	r30, r24
     f3e:	f9 1f       	adc	r31, r25
     f40:	11 82       	std	Z+1, r1	; 0x01
     f42:	10 82       	st	Z, r1
        xlist->index &= ~(((index_t)1)<<prio);
     f44:	e9 81       	ldd	r30, Y+1	; 0x01
     f46:	fa 81       	ldd	r31, Y+2	; 0x02
     f48:	80 89       	ldd	r24, Z+16	; 0x10
     f4a:	48 2f       	mov	r20, r24
     f4c:	8b 81       	ldd	r24, Y+3	; 0x03
     f4e:	28 2f       	mov	r18, r24
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	02 2e       	mov	r0, r18
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <gitem_fast_cut+0xb8>
     f5a:	88 0f       	add	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	0a 94       	dec	r0
     f60:	e2 f7       	brpl	.-8      	; 0xf5a <gitem_fast_cut+0xb4>
     f62:	80 95       	com	r24
     f64:	84 23       	and	r24, r20
     f66:	e9 81       	ldd	r30, Y+1	; 0x01
     f68:	fa 81       	ldd	r31, Y+2	; 0x02
     f6a:	80 8b       	std	Z+16, r24	; 0x10
     f6c:	1a c0       	rjmp	.+52     	; 0xfa2 <gitem_fast_cut+0xfc>
    }
    else
    {
        // Нет, не является!
        // Является ли элемент головой своей части списка?
        if( xlist->item[(prio_t)prio] == (item_t *)gitem )
     f6e:	8b 81       	ldd	r24, Y+3	; 0x03
     f70:	88 2f       	mov	r24, r24
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	29 81       	ldd	r18, Y+1	; 0x01
     f76:	3a 81       	ldd	r19, Y+2	; 0x02
     f78:	88 0f       	add	r24, r24
     f7a:	99 1f       	adc	r25, r25
     f7c:	f9 01       	movw	r30, r18
     f7e:	e8 0f       	add	r30, r24
     f80:	f9 1f       	adc	r31, r25
     f82:	20 81       	ld	r18, Z
     f84:	31 81       	ldd	r19, Z+1	; 0x01
     f86:	8c 81       	ldd	r24, Y+4	; 0x04
     f88:	9d 81       	ldd	r25, Y+5	; 0x05
     f8a:	28 17       	cp	r18, r24
     f8c:	39 07       	cpc	r19, r25
     f8e:	29 f4       	brne	.+10     	; 0xf9a <gitem_fast_cut+0xf4>
        {
            // Является, список надо переключить
            xlist_switch( xlist, prio );
     f90:	89 81       	ldd	r24, Y+1	; 0x01
     f92:	9a 81       	ldd	r25, Y+2	; 0x02
     f94:	6b 81       	ldd	r22, Y+3	; 0x03
     f96:	0e 94 45 11 	call	0x228a	; 0x228a <xlist_switch>
        }
        // Собственно - вырезаем элемент
        item_cut( (item_t *)gitem );
     f9a:	8c 81       	ldd	r24, Y+4	; 0x04
     f9c:	9d 81       	ldd	r25, Y+5	; 0x05
     f9e:	0e 94 86 09 	call	0x130c	; 0x130c <item_cut>
    }
}
     fa2:	0f 90       	pop	r0
     fa4:	0f 90       	pop	r0
     fa6:	0f 90       	pop	r0
     fa8:	0f 90       	pop	r0
     faa:	0f 90       	pop	r0
     fac:	cf 91       	pop	r28
     fae:	df 91       	pop	r29
     fb0:	08 95       	ret

00000fb2 <gitem_cut>:
// Вырезать из списка
void gitem_cut(gitem_t * gitem)
{
     fb2:	df 93       	push	r29
     fb4:	cf 93       	push	r28
     fb6:	00 d0       	rcall	.+0      	; 0xfb8 <gitem_cut+0x6>
     fb8:	cd b7       	in	r28, 0x3d	; 61
     fba:	de b7       	in	r29, 0x3e	; 62
     fbc:	9a 83       	std	Y+2, r25	; 0x02
     fbe:	89 83       	std	Y+1, r24	; 0x01
    gitem_fast_cut( gitem );
     fc0:	89 81       	ldd	r24, Y+1	; 0x01
     fc2:	9a 81       	ldd	r25, Y+2	; 0x02
     fc4:	0e 94 53 07 	call	0xea6	; 0xea6 <gitem_fast_cut>
    gitem->group->link = (void *)0;
     fc8:	e9 81       	ldd	r30, Y+1	; 0x01
     fca:	fa 81       	ldd	r31, Y+2	; 0x02
     fcc:	04 80       	ldd	r0, Z+4	; 0x04
     fce:	f5 81       	ldd	r31, Z+5	; 0x05
     fd0:	e0 2d       	mov	r30, r0
     fd2:	11 82       	std	Z+1, r1	; 0x01
     fd4:	10 82       	st	Z, r1
}
     fd6:	0f 90       	pop	r0
     fd8:	0f 90       	pop	r0
     fda:	cf 91       	pop	r28
     fdc:	df 91       	pop	r29
     fde:	08 95       	ret

00000fe0 <gitem_xlist_merge>:
 1) Оба списка содержат только объекты типа gitem_t
 2) В списке source на каждом уровне приоритета все объекты типа gitem_t приенадлежат к одной группе.
 3) Элементы списка source, находящиеся на разных уровнях приоритета, пренадлежат разным группам.
*/
void gitem_xlist_merge(xlist_t * source, xlist_t * destignation)
{
     fe0:	df 93       	push	r29
     fe2:	cf 93       	push	r28
     fe4:	cd b7       	in	r28, 0x3d	; 61
     fe6:	de b7       	in	r29, 0x3e	; 62
     fe8:	2c 97       	sbiw	r28, 0x0c	; 12
     fea:	0f b6       	in	r0, 0x3f	; 63
     fec:	f8 94       	cli
     fee:	de bf       	out	0x3e, r29	; 62
     ff0:	0f be       	out	0x3f, r0	; 63
     ff2:	cd bf       	out	0x3d, r28	; 61
     ff4:	9a 87       	std	Y+10, r25	; 0x0a
     ff6:	89 87       	std	Y+9, r24	; 0x09
     ff8:	7c 87       	std	Y+12, r23	; 0x0c
     ffa:	6b 87       	std	Y+11, r22	; 0x0b
    index_t mask = (index_t)1;
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	88 87       	std	Y+8, r24	; 0x08
    prio_t current_prio = (prio_t)0;
    1000:	1f 82       	std	Y+7, r1	; 0x07
    1002:	9a c0       	rjmp	.+308    	; 0x1138 <gitem_xlist_merge+0x158>
    while( mask )
    {
        // Есть че перенести?
        if( mask & source->index )
    1004:	e9 85       	ldd	r30, Y+9	; 0x09
    1006:	fa 85       	ldd	r31, Y+10	; 0x0a
    1008:	90 89       	ldd	r25, Z+16	; 0x10
    100a:	88 85       	ldd	r24, Y+8	; 0x08
    100c:	89 23       	and	r24, r25
    100e:	88 23       	and	r24, r24
    1010:	09 f4       	brne	.+2      	; 0x1014 <gitem_xlist_merge+0x34>
    1012:	8c c0       	rjmp	.+280    	; 0x112c <gitem_xlist_merge+0x14c>
        {
            // Есть!
            // Есть куда переносить?
            if( mask & destignation->index )
    1014:	eb 85       	ldd	r30, Y+11	; 0x0b
    1016:	fc 85       	ldd	r31, Y+12	; 0x0c
    1018:	90 89       	ldd	r25, Z+16	; 0x10
    101a:	88 85       	ldd	r24, Y+8	; 0x08
    101c:	89 23       	and	r24, r25
    101e:	88 23       	and	r24, r24
    1020:	09 f4       	brne	.+2      	; 0x1024 <gitem_xlist_merge+0x44>
    1022:	43 c0       	rjmp	.+134    	; 0x10aa <gitem_xlist_merge+0xca>
            {
                //Есть!
                // Сшиваем 2 2-связных списка!!!
                item_t * src = source->item[current_prio];
    1024:	8f 81       	ldd	r24, Y+7	; 0x07
    1026:	88 2f       	mov	r24, r24
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	29 85       	ldd	r18, Y+9	; 0x09
    102c:	3a 85       	ldd	r19, Y+10	; 0x0a
    102e:	88 0f       	add	r24, r24
    1030:	99 1f       	adc	r25, r25
    1032:	f9 01       	movw	r30, r18
    1034:	e8 0f       	add	r30, r24
    1036:	f9 1f       	adc	r31, r25
    1038:	80 81       	ld	r24, Z
    103a:	91 81       	ldd	r25, Z+1	; 0x01
    103c:	9e 83       	std	Y+6, r25	; 0x06
    103e:	8d 83       	std	Y+5, r24	; 0x05
                item_t * dst = destignation->item[current_prio];
    1040:	8f 81       	ldd	r24, Y+7	; 0x07
    1042:	88 2f       	mov	r24, r24
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	2b 85       	ldd	r18, Y+11	; 0x0b
    1048:	3c 85       	ldd	r19, Y+12	; 0x0c
    104a:	88 0f       	add	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	f9 01       	movw	r30, r18
    1050:	e8 0f       	add	r30, r24
    1052:	f9 1f       	adc	r31, r25
    1054:	80 81       	ld	r24, Z
    1056:	91 81       	ldd	r25, Z+1	; 0x01
    1058:	9c 83       	std	Y+4, r25	; 0x04
    105a:	8b 83       	std	Y+3, r24	; 0x03
                src->prev->next = dst;
    105c:	ed 81       	ldd	r30, Y+5	; 0x05
    105e:	fe 81       	ldd	r31, Y+6	; 0x06
    1060:	02 80       	ldd	r0, Z+2	; 0x02
    1062:	f3 81       	ldd	r31, Z+3	; 0x03
    1064:	e0 2d       	mov	r30, r0
    1066:	8b 81       	ldd	r24, Y+3	; 0x03
    1068:	9c 81       	ldd	r25, Y+4	; 0x04
    106a:	91 83       	std	Z+1, r25	; 0x01
    106c:	80 83       	st	Z, r24
                dst->prev->next = src;
    106e:	eb 81       	ldd	r30, Y+3	; 0x03
    1070:	fc 81       	ldd	r31, Y+4	; 0x04
    1072:	02 80       	ldd	r0, Z+2	; 0x02
    1074:	f3 81       	ldd	r31, Z+3	; 0x03
    1076:	e0 2d       	mov	r30, r0
    1078:	8d 81       	ldd	r24, Y+5	; 0x05
    107a:	9e 81       	ldd	r25, Y+6	; 0x06
    107c:	91 83       	std	Z+1, r25	; 0x01
    107e:	80 83       	st	Z, r24
                item_t * buf = dst->prev;
    1080:	eb 81       	ldd	r30, Y+3	; 0x03
    1082:	fc 81       	ldd	r31, Y+4	; 0x04
    1084:	82 81       	ldd	r24, Z+2	; 0x02
    1086:	93 81       	ldd	r25, Z+3	; 0x03
    1088:	9a 83       	std	Y+2, r25	; 0x02
    108a:	89 83       	std	Y+1, r24	; 0x01
                dst->prev = src->prev;
    108c:	ed 81       	ldd	r30, Y+5	; 0x05
    108e:	fe 81       	ldd	r31, Y+6	; 0x06
    1090:	82 81       	ldd	r24, Z+2	; 0x02
    1092:	93 81       	ldd	r25, Z+3	; 0x03
    1094:	eb 81       	ldd	r30, Y+3	; 0x03
    1096:	fc 81       	ldd	r31, Y+4	; 0x04
    1098:	93 83       	std	Z+3, r25	; 0x03
    109a:	82 83       	std	Z+2, r24	; 0x02
                src->prev = buf;
    109c:	ed 81       	ldd	r30, Y+5	; 0x05
    109e:	fe 81       	ldd	r31, Y+6	; 0x06
    10a0:	89 81       	ldd	r24, Y+1	; 0x01
    10a2:	9a 81       	ldd	r25, Y+2	; 0x02
    10a4:	93 83       	std	Z+3, r25	; 0x03
    10a6:	82 83       	std	Z+2, r24	; 0x02
    10a8:	21 c0       	rjmp	.+66     	; 0x10ec <gitem_xlist_merge+0x10c>
            }
            else
            {
                //Нет, тупо переносим всю группу.
                destignation->item[current_prio] = source->item[current_prio];
    10aa:	8f 81       	ldd	r24, Y+7	; 0x07
    10ac:	68 2f       	mov	r22, r24
    10ae:	70 e0       	ldi	r23, 0x00	; 0
    10b0:	8f 81       	ldd	r24, Y+7	; 0x07
    10b2:	88 2f       	mov	r24, r24
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	29 85       	ldd	r18, Y+9	; 0x09
    10b8:	3a 85       	ldd	r19, Y+10	; 0x0a
    10ba:	88 0f       	add	r24, r24
    10bc:	99 1f       	adc	r25, r25
    10be:	f9 01       	movw	r30, r18
    10c0:	e8 0f       	add	r30, r24
    10c2:	f9 1f       	adc	r31, r25
    10c4:	40 81       	ld	r20, Z
    10c6:	51 81       	ldd	r21, Z+1	; 0x01
    10c8:	2b 85       	ldd	r18, Y+11	; 0x0b
    10ca:	3c 85       	ldd	r19, Y+12	; 0x0c
    10cc:	cb 01       	movw	r24, r22
    10ce:	88 0f       	add	r24, r24
    10d0:	99 1f       	adc	r25, r25
    10d2:	f9 01       	movw	r30, r18
    10d4:	e8 0f       	add	r30, r24
    10d6:	f9 1f       	adc	r31, r25
    10d8:	51 83       	std	Z+1, r21	; 0x01
    10da:	40 83       	st	Z, r20
                destignation->index |= mask;
    10dc:	eb 85       	ldd	r30, Y+11	; 0x0b
    10de:	fc 85       	ldd	r31, Y+12	; 0x0c
    10e0:	90 89       	ldd	r25, Z+16	; 0x10
    10e2:	88 85       	ldd	r24, Y+8	; 0x08
    10e4:	89 2b       	or	r24, r25
    10e6:	eb 85       	ldd	r30, Y+11	; 0x0b
    10e8:	fc 85       	ldd	r31, Y+12	; 0x0c
    10ea:	80 8b       	std	Z+16, r24	; 0x10
            }
            // Вот почему эта функция отнесена к методам gitem_t
            ((gitem_t *)source->item[current_prio])->group->link = (void *)destignation;
    10ec:	8f 81       	ldd	r24, Y+7	; 0x07
    10ee:	88 2f       	mov	r24, r24
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	29 85       	ldd	r18, Y+9	; 0x09
    10f4:	3a 85       	ldd	r19, Y+10	; 0x0a
    10f6:	88 0f       	add	r24, r24
    10f8:	99 1f       	adc	r25, r25
    10fa:	f9 01       	movw	r30, r18
    10fc:	e8 0f       	add	r30, r24
    10fe:	f9 1f       	adc	r31, r25
    1100:	80 81       	ld	r24, Z
    1102:	91 81       	ldd	r25, Z+1	; 0x01
    1104:	fc 01       	movw	r30, r24
    1106:	04 80       	ldd	r0, Z+4	; 0x04
    1108:	f5 81       	ldd	r31, Z+5	; 0x05
    110a:	e0 2d       	mov	r30, r0
    110c:	8b 85       	ldd	r24, Y+11	; 0x0b
    110e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1110:	91 83       	std	Z+1, r25	; 0x01
    1112:	80 83       	st	Z, r24
            // Перенос закончен, обнуляем указатель
            source->item[(prio_t)current_prio] = (item_t *)0;
    1114:	8f 81       	ldd	r24, Y+7	; 0x07
    1116:	88 2f       	mov	r24, r24
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	29 85       	ldd	r18, Y+9	; 0x09
    111c:	3a 85       	ldd	r19, Y+10	; 0x0a
    111e:	88 0f       	add	r24, r24
    1120:	99 1f       	adc	r25, r25
    1122:	f9 01       	movw	r30, r18
    1124:	e8 0f       	add	r30, r24
    1126:	f9 1f       	adc	r31, r25
    1128:	11 82       	std	Z+1, r1	; 0x01
    112a:	10 82       	st	Z, r1
        }
        mask<<=1;
    112c:	88 85       	ldd	r24, Y+8	; 0x08
    112e:	88 0f       	add	r24, r24
    1130:	88 87       	std	Y+8, r24	; 0x08
        current_prio++;
    1132:	8f 81       	ldd	r24, Y+7	; 0x07
    1134:	8f 5f       	subi	r24, 0xFF	; 255
    1136:	8f 83       	std	Y+7, r24	; 0x07
*/
void gitem_xlist_merge(xlist_t * source, xlist_t * destignation)
{
    index_t mask = (index_t)1;
    prio_t current_prio = (prio_t)0;
    while( mask )
    1138:	88 85       	ldd	r24, Y+8	; 0x08
    113a:	88 23       	and	r24, r24
    113c:	09 f0       	breq	.+2      	; 0x1140 <gitem_xlist_merge+0x160>
    113e:	62 cf       	rjmp	.-316    	; 0x1004 <gitem_xlist_merge+0x24>
        }
        mask<<=1;
        current_prio++;
    }
    // Список полностью перенесен, обнуляем индекс
    source->index = (index_t)0;
    1140:	e9 85       	ldd	r30, Y+9	; 0x09
    1142:	fa 85       	ldd	r31, Y+10	; 0x0a
    1144:	10 8a       	std	Z+16, r1	; 0x10
}
    1146:	2c 96       	adiw	r28, 0x0c	; 12
    1148:	0f b6       	in	r0, 0x3f	; 63
    114a:	f8 94       	cli
    114c:	de bf       	out	0x3e, r29	; 62
    114e:	0f be       	out	0x3f, r0	; 63
    1150:	cd bf       	out	0x3d, r28	; 61
    1152:	cf 91       	pop	r28
    1154:	df 91       	pop	r29
    1156:	08 95       	ret

00001158 <group_init>:
*****************************************************************************************/
#include "../include/bugurt.h"
//Методы group_t
// инициация
void group_init(group_t * group, prio_t prio)
{
    1158:	df 93       	push	r29
    115a:	cf 93       	push	r28
    115c:	00 d0       	rcall	.+0      	; 0x115e <group_init+0x6>
    115e:	0f 92       	push	r0
    1160:	cd b7       	in	r28, 0x3d	; 61
    1162:	de b7       	in	r29, 0x3e	; 62
    1164:	9a 83       	std	Y+2, r25	; 0x02
    1166:	89 83       	std	Y+1, r24	; 0x01
    1168:	6b 83       	std	Y+3, r22	; 0x03
    group->link = (void *)0;
    116a:	e9 81       	ldd	r30, Y+1	; 0x01
    116c:	fa 81       	ldd	r31, Y+2	; 0x02
    116e:	11 82       	std	Z+1, r1	; 0x01
    1170:	10 82       	st	Z, r1
    group->prio = prio;
    1172:	e9 81       	ldd	r30, Y+1	; 0x01
    1174:	fa 81       	ldd	r31, Y+2	; 0x02
    1176:	8b 81       	ldd	r24, Y+3	; 0x03
    1178:	82 83       	std	Z+2, r24	; 0x02
    // группа - часть gitem_t, количество элементов - 1
    group->el_num = (count_t)1;
    117a:	e9 81       	ldd	r30, Y+1	; 0x01
    117c:	fa 81       	ldd	r31, Y+2	; 0x02
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	94 83       	std	Z+4, r25	; 0x04
    1184:	83 83       	std	Z+3, r24	; 0x03
}
    1186:	0f 90       	pop	r0
    1188:	0f 90       	pop	r0
    118a:	0f 90       	pop	r0
    118c:	cf 91       	pop	r28
    118e:	df 91       	pop	r29
    1190:	08 95       	ret

00001192 <group_push>:
// положить в ПУЛ
void group_push(group_t * group)
{
    1192:	df 93       	push	r29
    1194:	cf 93       	push	r28
    1196:	00 d0       	rcall	.+0      	; 0x1198 <group_push+0x6>
    1198:	cd b7       	in	r28, 0x3d	; 61
    119a:	de b7       	in	r29, 0x3e	; 62
    119c:	9a 83       	std	Y+2, r25	; 0x02
    119e:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    // блокируем пул
    spin_lock( &kernel.pool_lock );
#endif
    group->link = (void *)kernel.pool;
    11a0:	80 91 f6 01 	lds	r24, 0x01F6
    11a4:	90 91 f7 01 	lds	r25, 0x01F7
    11a8:	e9 81       	ldd	r30, Y+1	; 0x01
    11aa:	fa 81       	ldd	r31, Y+2	; 0x02
    11ac:	91 83       	std	Z+1, r25	; 0x01
    11ae:	80 83       	st	Z, r24
    kernel.pool = group;
    11b0:	89 81       	ldd	r24, Y+1	; 0x01
    11b2:	9a 81       	ldd	r25, Y+2	; 0x02
    11b4:	90 93 f7 01 	sts	0x01F7, r25
    11b8:	80 93 f6 01 	sts	0x01F6, r24
#ifdef CONFIG_MP
    // разблокируем пул
    spin_unlock( &kernel.pool_lock );
#endif
}
    11bc:	0f 90       	pop	r0
    11be:	0f 90       	pop	r0
    11c0:	cf 91       	pop	r28
    11c2:	df 91       	pop	r29
    11c4:	08 95       	ret

000011c6 <group_pop>:
// взять из пула, если есть, а есть всегда, избыточность же!
group_t * group_pop(void)
{
    11c6:	df 93       	push	r29
    11c8:	cf 93       	push	r28
    11ca:	00 d0       	rcall	.+0      	; 0x11cc <group_pop+0x6>
    11cc:	cd b7       	in	r28, 0x3d	; 61
    11ce:	de b7       	in	r29, 0x3e	; 62
#ifdef CONFIG_MP
    // блокируем пул
    spin_lock( &kernel.pool_lock );
#endif
    group_t * group = kernel.pool;
    11d0:	80 91 f6 01 	lds	r24, 0x01F6
    11d4:	90 91 f7 01 	lds	r25, 0x01F7
    11d8:	9a 83       	std	Y+2, r25	; 0x02
    11da:	89 83       	std	Y+1, r24	; 0x01
    kernel.pool = (group_t *)group->link;
    11dc:	e9 81       	ldd	r30, Y+1	; 0x01
    11de:	fa 81       	ldd	r31, Y+2	; 0x02
    11e0:	80 81       	ld	r24, Z
    11e2:	91 81       	ldd	r25, Z+1	; 0x01
    11e4:	90 93 f7 01 	sts	0x01F7, r25
    11e8:	80 93 f6 01 	sts	0x01F6, r24
#ifdef CONFIG_MP
    // разблокируем пул
    spin_unlock( &kernel.pool_lock );
#endif
    return group;
    11ec:	89 81       	ldd	r24, Y+1	; 0x01
    11ee:	9a 81       	ldd	r25, Y+2	; 0x02
}
    11f0:	0f 90       	pop	r0
    11f2:	0f 90       	pop	r0
    11f4:	cf 91       	pop	r28
    11f6:	df 91       	pop	r29
    11f8:	08 95       	ret

000011fa <index_search>:
*                           http://www.0chan.ru/r/res/9996.html                          *
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
prio_t index_search(index_t index)
{
    11fa:	df 93       	push	r29
    11fc:	cf 93       	push	r28
    11fe:	00 d0       	rcall	.+0      	; 0x1200 <index_search+0x6>
    1200:	00 d0       	rcall	.+0      	; 0x1202 <index_search+0x8>
    1202:	00 d0       	rcall	.+0      	; 0x1204 <index_search+0xa>
    1204:	cd b7       	in	r28, 0x3d	; 61
    1206:	de b7       	in	r29, 0x3e	; 62
    1208:	8e 83       	std	Y+6, r24	; 0x06
    prio_t prio = (prio_t)0;
    120a:	1d 82       	std	Y+5, r1	; 0x05
        но, т.к. BITS_IN_INDEX_T фиксировано для данной конфигурации,
        то получается время выполнения - O(1), ВСЕГДА.

        И да, предсказуемость + переносимость > быстродействие.
        */
    index_t upper = ~(index_t)0, lower = ~(index_t)0, middle;
    120c:	8f ef       	ldi	r24, 0xFF	; 255
    120e:	8c 83       	std	Y+4, r24	; 0x04
    1210:	8f ef       	ldi	r24, 0xFF	; 255
    1212:	8b 83       	std	Y+3, r24	; 0x03
    prio_t step = (prio_t)BITS_IN_INDEX_T;
    1214:	88 e0       	ldi	r24, 0x08	; 8
    1216:	89 83       	std	Y+1, r24	; 0x01
    1218:	22 c0       	rjmp	.+68     	; 0x125e <index_search+0x64>
    while( step )
    {
        step>>=1; // делим шаг пополам
    121a:	89 81       	ldd	r24, Y+1	; 0x01
    121c:	86 95       	lsr	r24
    121e:	89 83       	std	Y+1, r24	; 0x01
        middle = lower>>step;
    1220:	8b 81       	ldd	r24, Y+3	; 0x03
    1222:	28 2f       	mov	r18, r24
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	89 81       	ldd	r24, Y+1	; 0x01
    1228:	88 2f       	mov	r24, r24
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	a9 01       	movw	r20, r18
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <index_search+0x3a>
    1230:	55 95       	asr	r21
    1232:	47 95       	ror	r20
    1234:	8a 95       	dec	r24
    1236:	e2 f7       	brpl	.-8      	; 0x1230 <index_search+0x36>
    1238:	ca 01       	movw	r24, r20
    123a:	8a 83       	std	Y+2, r24	; 0x02
        if( index & upper & middle )
    123c:	9e 81       	ldd	r25, Y+6	; 0x06
    123e:	8c 81       	ldd	r24, Y+4	; 0x04
    1240:	98 23       	and	r25, r24
    1242:	8a 81       	ldd	r24, Y+2	; 0x02
    1244:	89 23       	and	r24, r25
    1246:	88 23       	and	r24, r24
    1248:	19 f0       	breq	.+6      	; 0x1250 <index_search+0x56>
        {
            lower = middle;
    124a:	8a 81       	ldd	r24, Y+2	; 0x02
    124c:	8b 83       	std	Y+3, r24	; 0x03
    124e:	07 c0       	rjmp	.+14     	; 0x125e <index_search+0x64>
        }
        else
        {
            upper = ~middle;
    1250:	8a 81       	ldd	r24, Y+2	; 0x02
    1252:	80 95       	com	r24
    1254:	8c 83       	std	Y+4, r24	; 0x04
            prio += step;
    1256:	9d 81       	ldd	r25, Y+5	; 0x05
    1258:	89 81       	ldd	r24, Y+1	; 0x01
    125a:	89 0f       	add	r24, r25
    125c:	8d 83       	std	Y+5, r24	; 0x05

        И да, предсказуемость + переносимость > быстродействие.
        */
    index_t upper = ~(index_t)0, lower = ~(index_t)0, middle;
    prio_t step = (prio_t)BITS_IN_INDEX_T;
    while( step )
    125e:	89 81       	ldd	r24, Y+1	; 0x01
    1260:	88 23       	and	r24, r24
    1262:	d9 f6       	brne	.-74     	; 0x121a <index_search+0x20>
        if ( mask & index )break;
        prio++;
        mask<<=1;
    }
#endif
    return prio;
    1264:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1266:	26 96       	adiw	r28, 0x06	; 6
    1268:	0f b6       	in	r0, 0x3f	; 63
    126a:	f8 94       	cli
    126c:	de bf       	out	0x3e, r29	; 62
    126e:	0f be       	out	0x3f, r0	; 63
    1270:	cd bf       	out	0x3d, r28	; 61
    1272:	cf 91       	pop	r28
    1274:	df 91       	pop	r29
    1276:	08 95       	ret

00001278 <item_init>:
*****************************************************************************************/
#include "../include/bugurt.h"
//Методы элемента 2-связного списка
//инициация элемента
void item_init(item_t *item)
{
    1278:	df 93       	push	r29
    127a:	cf 93       	push	r28
    127c:	00 d0       	rcall	.+0      	; 0x127e <item_init+0x6>
    127e:	cd b7       	in	r28, 0x3d	; 61
    1280:	de b7       	in	r29, 0x3e	; 62
    1282:	9a 83       	std	Y+2, r25	; 0x02
    1284:	89 83       	std	Y+1, r24	; 0x01
    item->prev = item;
    1286:	e9 81       	ldd	r30, Y+1	; 0x01
    1288:	fa 81       	ldd	r31, Y+2	; 0x02
    128a:	89 81       	ldd	r24, Y+1	; 0x01
    128c:	9a 81       	ldd	r25, Y+2	; 0x02
    128e:	93 83       	std	Z+3, r25	; 0x03
    1290:	82 83       	std	Z+2, r24	; 0x02
    item->next = item;
    1292:	e9 81       	ldd	r30, Y+1	; 0x01
    1294:	fa 81       	ldd	r31, Y+2	; 0x02
    1296:	89 81       	ldd	r24, Y+1	; 0x01
    1298:	9a 81       	ldd	r25, Y+2	; 0x02
    129a:	91 83       	std	Z+1, r25	; 0x01
    129c:	80 83       	st	Z, r24
}
    129e:	0f 90       	pop	r0
    12a0:	0f 90       	pop	r0
    12a2:	cf 91       	pop	r28
    12a4:	df 91       	pop	r29
    12a6:	08 95       	ret

000012a8 <item_insert>:
//Вставить элемент
void item_insert(item_t *item, item_t *head)
{
    12a8:	df 93       	push	r29
    12aa:	cf 93       	push	r28
    12ac:	00 d0       	rcall	.+0      	; 0x12ae <item_insert+0x6>
    12ae:	00 d0       	rcall	.+0      	; 0x12b0 <item_insert+0x8>
    12b0:	00 d0       	rcall	.+0      	; 0x12b2 <item_insert+0xa>
    12b2:	cd b7       	in	r28, 0x3d	; 61
    12b4:	de b7       	in	r29, 0x3e	; 62
    12b6:	9c 83       	std	Y+4, r25	; 0x04
    12b8:	8b 83       	std	Y+3, r24	; 0x03
    12ba:	7e 83       	std	Y+6, r23	; 0x06
    12bc:	6d 83       	std	Y+5, r22	; 0x05
    // "хвост" списка
    item_t * tail = head->prev;
    12be:	ed 81       	ldd	r30, Y+5	; 0x05
    12c0:	fe 81       	ldd	r31, Y+6	; 0x06
    12c2:	82 81       	ldd	r24, Z+2	; 0x02
    12c4:	93 81       	ldd	r25, Z+3	; 0x03
    12c6:	9a 83       	std	Y+2, r25	; 0x02
    12c8:	89 83       	std	Y+1, r24	; 0x01

    // Вставляем элемент между "головой" и "хвостом"
    item->prev = tail;
    12ca:	eb 81       	ldd	r30, Y+3	; 0x03
    12cc:	fc 81       	ldd	r31, Y+4	; 0x04
    12ce:	89 81       	ldd	r24, Y+1	; 0x01
    12d0:	9a 81       	ldd	r25, Y+2	; 0x02
    12d2:	93 83       	std	Z+3, r25	; 0x03
    12d4:	82 83       	std	Z+2, r24	; 0x02
    item->next = head;
    12d6:	eb 81       	ldd	r30, Y+3	; 0x03
    12d8:	fc 81       	ldd	r31, Y+4	; 0x04
    12da:	8d 81       	ldd	r24, Y+5	; 0x05
    12dc:	9e 81       	ldd	r25, Y+6	; 0x06
    12de:	91 83       	std	Z+1, r25	; 0x01
    12e0:	80 83       	st	Z, r24

    head->prev = item;
    12e2:	ed 81       	ldd	r30, Y+5	; 0x05
    12e4:	fe 81       	ldd	r31, Y+6	; 0x06
    12e6:	8b 81       	ldd	r24, Y+3	; 0x03
    12e8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ea:	93 83       	std	Z+3, r25	; 0x03
    12ec:	82 83       	std	Z+2, r24	; 0x02
    tail->next = item;
    12ee:	e9 81       	ldd	r30, Y+1	; 0x01
    12f0:	fa 81       	ldd	r31, Y+2	; 0x02
    12f2:	8b 81       	ldd	r24, Y+3	; 0x03
    12f4:	9c 81       	ldd	r25, Y+4	; 0x04
    12f6:	91 83       	std	Z+1, r25	; 0x01
    12f8:	80 83       	st	Z, r24
}
    12fa:	26 96       	adiw	r28, 0x06	; 6
    12fc:	0f b6       	in	r0, 0x3f	; 63
    12fe:	f8 94       	cli
    1300:	de bf       	out	0x3e, r29	; 62
    1302:	0f be       	out	0x3f, r0	; 63
    1304:	cd bf       	out	0x3d, r28	; 61
    1306:	cf 91       	pop	r28
    1308:	df 91       	pop	r29
    130a:	08 95       	ret

0000130c <item_cut>:
//Вырезать элемент
void item_cut( item_t *item )
{
    130c:	df 93       	push	r29
    130e:	cf 93       	push	r28
    1310:	00 d0       	rcall	.+0      	; 0x1312 <item_cut+0x6>
    1312:	00 d0       	rcall	.+0      	; 0x1314 <item_cut+0x8>
    1314:	00 d0       	rcall	.+0      	; 0x1316 <item_cut+0xa>
    1316:	cd b7       	in	r28, 0x3d	; 61
    1318:	de b7       	in	r29, 0x3e	; 62
    131a:	9e 83       	std	Y+6, r25	; 0x06
    131c:	8d 83       	std	Y+5, r24	; 0x05
    item_t * prev = item->prev; //Предыдущий элемент
    131e:	ed 81       	ldd	r30, Y+5	; 0x05
    1320:	fe 81       	ldd	r31, Y+6	; 0x06
    1322:	82 81       	ldd	r24, Z+2	; 0x02
    1324:	93 81       	ldd	r25, Z+3	; 0x03
    1326:	9c 83       	std	Y+4, r25	; 0x04
    1328:	8b 83       	std	Y+3, r24	; 0x03
    item_t * next = item->next; //Следующий элемент
    132a:	ed 81       	ldd	r30, Y+5	; 0x05
    132c:	fe 81       	ldd	r31, Y+6	; 0x06
    132e:	80 81       	ld	r24, Z
    1330:	91 81       	ldd	r25, Z+1	; 0x01
    1332:	9a 83       	std	Y+2, r25	; 0x02
    1334:	89 83       	std	Y+1, r24	; 0x01

    next->prev = prev;
    1336:	e9 81       	ldd	r30, Y+1	; 0x01
    1338:	fa 81       	ldd	r31, Y+2	; 0x02
    133a:	8b 81       	ldd	r24, Y+3	; 0x03
    133c:	9c 81       	ldd	r25, Y+4	; 0x04
    133e:	93 83       	std	Z+3, r25	; 0x03
    1340:	82 83       	std	Z+2, r24	; 0x02
    prev->next = next;
    1342:	eb 81       	ldd	r30, Y+3	; 0x03
    1344:	fc 81       	ldd	r31, Y+4	; 0x04
    1346:	89 81       	ldd	r24, Y+1	; 0x01
    1348:	9a 81       	ldd	r25, Y+2	; 0x02
    134a:	91 83       	std	Z+1, r25	; 0x01
    134c:	80 83       	st	Z, r24

    item->prev = item;
    134e:	ed 81       	ldd	r30, Y+5	; 0x05
    1350:	fe 81       	ldd	r31, Y+6	; 0x06
    1352:	8d 81       	ldd	r24, Y+5	; 0x05
    1354:	9e 81       	ldd	r25, Y+6	; 0x06
    1356:	93 83       	std	Z+3, r25	; 0x03
    1358:	82 83       	std	Z+2, r24	; 0x02
    item->next = item;
    135a:	ed 81       	ldd	r30, Y+5	; 0x05
    135c:	fe 81       	ldd	r31, Y+6	; 0x06
    135e:	8d 81       	ldd	r24, Y+5	; 0x05
    1360:	9e 81       	ldd	r25, Y+6	; 0x06
    1362:	91 83       	std	Z+1, r25	; 0x01
    1364:	80 83       	st	Z, r24
}
    1366:	26 96       	adiw	r28, 0x06	; 6
    1368:	0f b6       	in	r0, 0x3f	; 63
    136a:	f8 94       	cli
    136c:	de bf       	out	0x3e, r29	; 62
    136e:	0f be       	out	0x3f, r0	; 63
    1370:	cd bf       	out	0x3d, r28	; 61
    1372:	cf 91       	pop	r28
    1374:	df 91       	pop	r29
    1376:	08 95       	ret

00001378 <kernel_init>:
{
    while(1);
}

void kernel_init(void)
{
    1378:	8f 92       	push	r8
    137a:	af 92       	push	r10
    137c:	bf 92       	push	r11
    137e:	cf 92       	push	r12
    1380:	ef 92       	push	r14
    1382:	ff 92       	push	r15
    1384:	0f 93       	push	r16
    1386:	1f 93       	push	r17
    1388:	df 93       	push	r29
    138a:	cf 93       	push	r28
    138c:	cd b7       	in	r28, 0x3d	; 61
    138e:	de b7       	in	r29, 0x3e	; 62
        stat_init( (stat_t *)kernel.stat + i );
        sched_init( (sched_t *)kernel.sched + i, (proc_t *)kernel.idle + i );
    }
    spin_unlock( &kernel.stat_lock );
#else
    proc_init_isr(
    1390:	88 ec       	ldi	r24, 0xC8	; 200
    1392:	91 e0       	ldi	r25, 0x01	; 1
    1394:	28 e5       	ldi	r18, 0x58	; 88
    1396:	32 e1       	ldi	r19, 0x12	; 18
    1398:	b9 01       	movw	r22, r18
    139a:	40 e0       	ldi	r20, 0x00	; 0
    139c:	50 e0       	ldi	r21, 0x00	; 0
    139e:	20 e0       	ldi	r18, 0x00	; 0
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	00 e0       	ldi	r16, 0x00	; 0
    13a4:	10 e0       	ldi	r17, 0x00	; 0
    13a6:	ee 24       	eor	r14, r14
    13a8:	ff 24       	eor	r15, r15
    13aa:	0f 2e       	mov	r0, r31
    13ac:	f7 e0       	ldi	r31, 0x07	; 7
    13ae:	cf 2e       	mov	r12, r31
    13b0:	f0 2d       	mov	r31, r0
    13b2:	aa 24       	eor	r10, r10
    13b4:	bb 24       	eor	r11, r11
    13b6:	a3 94       	inc	r10
    13b8:	88 24       	eor	r8, r8
    13ba:	0e 94 92 0b 	call	0x1724	; 0x1724 <proc_init_isr>
        0, // это не важно, при первой же смене контекста будет сохранен текущий указатель стека
        ((prio_t)BITS_IN_INDEX_T - (prio_t)1),// низший приоритет
        (timer_t)1,//минимальный квант времени
        (bool_t)0// не RT
    );
    sched_init( (sched_t *)&kernel.sched, (proc_t *)&kernel.idle );
    13be:	8e e9       	ldi	r24, 0x9E	; 158
    13c0:	91 e0       	ldi	r25, 0x01	; 1
    13c2:	28 ec       	ldi	r18, 0xC8	; 200
    13c4:	31 e0       	ldi	r19, 0x01	; 1
    13c6:	b9 01       	movw	r22, r18
    13c8:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <sched_init>
#endif // CONFIG_MP
}
    13cc:	cf 91       	pop	r28
    13ce:	df 91       	pop	r29
    13d0:	1f 91       	pop	r17
    13d2:	0f 91       	pop	r16
    13d4:	ff 90       	pop	r15
    13d6:	ef 90       	pop	r14
    13d8:	cf 90       	pop	r12
    13da:	bf 90       	pop	r11
    13dc:	af 90       	pop	r10
    13de:	8f 90       	pop	r8
    13e0:	08 95       	ret

000013e2 <mutex_init_isr>:
    mutex_t * mutex
#ifdef CONFIG_USE_HIGHEST_LOCKER
    ,prio_t prio
#endif // CONFIG_USE_HIGHEST_LOCKER
)
{
    13e2:	df 93       	push	r29
    13e4:	cf 93       	push	r28
    13e6:	00 d0       	rcall	.+0      	; 0x13e8 <mutex_init_isr+0x6>
    13e8:	0f 92       	push	r0
    13ea:	cd b7       	in	r28, 0x3d	; 61
    13ec:	de b7       	in	r29, 0x3e	; 62
    13ee:	9a 83       	std	Y+2, r25	; 0x02
    13f0:	89 83       	std	Y+1, r24	; 0x01
    13f2:	6b 83       	std	Y+3, r22	; 0x03
    xlist_init( (xlist_t *)mutex );
    13f4:	89 81       	ldd	r24, Y+1	; 0x01
    13f6:	9a 81       	ldd	r25, Y+2	; 0x02
    13f8:	0e 94 ef 10 	call	0x21de	; 0x21de <xlist_init>
    mutex->free = (bool_t)1;
    13fc:	e9 81       	ldd	r30, Y+1	; 0x01
    13fe:	fa 81       	ldd	r31, Y+2	; 0x02
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	82 8b       	std	Z+18, r24	; 0x12
#ifdef CONFIG_USE_HIGHEST_LOCKER
    mutex->prio = prio;
    1404:	e9 81       	ldd	r30, Y+1	; 0x01
    1406:	fa 81       	ldd	r31, Y+2	; 0x02
    1408:	8b 81       	ldd	r24, Y+3	; 0x03
    140a:	81 8b       	std	Z+17, r24	; 0x11
#endif // CONFIG_USE_HIGHEST_LOCKER
}
    140c:	0f 90       	pop	r0
    140e:	0f 90       	pop	r0
    1410:	0f 90       	pop	r0
    1412:	cf 91       	pop	r28
    1414:	df 91       	pop	r29
    1416:	08 95       	ret

00001418 <_mutex_lock>:

// К моменту вызова захвачена блокировка mutex-а, запрещены прерывания
bool_t _mutex_lock( mutex_t * mutex )
{
    1418:	df 93       	push	r29
    141a:	cf 93       	push	r28
    141c:	00 d0       	rcall	.+0      	; 0x141e <_mutex_lock+0x6>
    141e:	00 d0       	rcall	.+0      	; 0x1420 <_mutex_lock+0x8>
    1420:	0f 92       	push	r0
    1422:	cd b7       	in	r28, 0x3d	; 61
    1424:	de b7       	in	r29, 0x3e	; 62
    1426:	9d 83       	std	Y+5, r25	; 0x05
    1428:	8c 83       	std	Y+4, r24	; 0x04
    bool_t ret = mutex->free;
    142a:	ec 81       	ldd	r30, Y+4	; 0x04
    142c:	fd 81       	ldd	r31, Y+5	; 0x05
    142e:	82 89       	ldd	r24, Z+18	; 0x12
    1430:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = current_proc();
    1432:	0e 94 cc 00 	call	0x198	; 0x198 <current_proc>
    1436:	9a 83       	std	Y+2, r25	; 0x02
    1438:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
#ifdef CONFIG_USE_HIGHEST_LOCKER
    _proc_lres_inc( proc, mutex->prio );
    143a:	ec 81       	ldd	r30, Y+4	; 0x04
    143c:	fd 81       	ldd	r31, Y+5	; 0x05
    143e:	21 89       	ldd	r18, Z+17	; 0x11
    1440:	89 81       	ldd	r24, Y+1	; 0x01
    1442:	9a 81       	ldd	r25, Y+2	; 0x02
    1444:	62 2f       	mov	r22, r18
    1446:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <_proc_lres_inc>
#else // !CONFIG_USE_HIGHEST_LOCKER
    _proc_lres_inc( proc );
#endif // CONFIG_USE_HIGHEST_LOCKER
    if( ret )
    144a:	8b 81       	ldd	r24, Y+3	; 0x03
    144c:	88 23       	and	r24, r24
    144e:	41 f0       	breq	.+16     	; 0x1460 <_mutex_lock+0x48>
    {
        mutex->free = (bool_t)0;
    1450:	ec 81       	ldd	r30, Y+4	; 0x04
    1452:	fd 81       	ldd	r31, Y+5	; 0x05
    1454:	12 8a       	std	Z+18, r1	; 0x12
#ifdef CONFIG_USE_HIGHEST_LOCKER
        // Меняем приоритет только здесь
        _proc_prio_control_running( proc );
    1456:	89 81       	ldd	r24, Y+1	; 0x01
    1458:	9a 81       	ldd	r25, Y+2	; 0x02
    145a:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <_proc_prio_control_running>
    145e:	1b c0       	rjmp	.+54     	; 0x1496 <_mutex_lock+0x7e>
#endif // CONFIG_USE_HIGHEST_LOCKER
    }
    else
    {
        proc->flags |= PROC_FLG_QUEUE;
    1460:	e9 81       	ldd	r30, Y+1	; 0x01
    1462:	fa 81       	ldd	r31, Y+2	; 0x02
    1464:	83 85       	ldd	r24, Z+11	; 0x0b
    1466:	88 60       	ori	r24, 0x08	; 8
    1468:	e9 81       	ldd	r30, Y+1	; 0x01
    146a:	fa 81       	ldd	r31, Y+2	; 0x02
    146c:	83 87       	std	Z+11, r24	; 0x0b
        proc->flags &= ~PROC_FLG_RUN;
    146e:	e9 81       	ldd	r30, Y+1	; 0x01
    1470:	fa 81       	ldd	r31, Y+2	; 0x02
    1472:	83 85       	ldd	r24, Z+11	; 0x0b
    1474:	8d 7f       	andi	r24, 0xFD	; 253
    1476:	e9 81       	ldd	r30, Y+1	; 0x01
    1478:	fa 81       	ldd	r31, Y+2	; 0x02
    147a:	83 87       	std	Z+11, r24	; 0x0b
        _proc_stop_( proc );
    147c:	89 81       	ldd	r24, Y+1	; 0x01
    147e:	9a 81       	ldd	r25, Y+2	; 0x02
    1480:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <gitem_cut>
        gitem_insert( (gitem_t *)proc, (xlist_t *)mutex );
    1484:	89 81       	ldd	r24, Y+1	; 0x01
    1486:	9a 81       	ldd	r25, Y+2	; 0x02
    1488:	2c 81       	ldd	r18, Y+4	; 0x04
    148a:	3d 81       	ldd	r19, Y+5	; 0x05
    148c:	b9 01       	movw	r22, r18
    148e:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <gitem_insert>
        // Нужна перепланировка
#ifdef CONFIG_MP
        resched( proc->core_id );
#else
        resched();
    1492:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
#endif // CONFIG_MP
    }
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    return ret;
    1496:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1498:	0f 90       	pop	r0
    149a:	0f 90       	pop	r0
    149c:	0f 90       	pop	r0
    149e:	0f 90       	pop	r0
    14a0:	0f 90       	pop	r0
    14a2:	cf 91       	pop	r28
    14a4:	df 91       	pop	r29
    14a6:	08 95       	ret

000014a8 <_mutex_try_lock>:

bool_t _mutex_try_lock( mutex_t * mutex )
{
    14a8:	df 93       	push	r29
    14aa:	cf 93       	push	r28
    14ac:	00 d0       	rcall	.+0      	; 0x14ae <_mutex_try_lock+0x6>
    14ae:	00 d0       	rcall	.+0      	; 0x14b0 <_mutex_try_lock+0x8>
    14b0:	0f 92       	push	r0
    14b2:	cd b7       	in	r28, 0x3d	; 61
    14b4:	de b7       	in	r29, 0x3e	; 62
    14b6:	9d 83       	std	Y+5, r25	; 0x05
    14b8:	8c 83       	std	Y+4, r24	; 0x04
    bool_t ret = mutex->free;
    14ba:	ec 81       	ldd	r30, Y+4	; 0x04
    14bc:	fd 81       	ldd	r31, Y+5	; 0x05
    14be:	82 89       	ldd	r24, Z+18	; 0x12
    14c0:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = current_proc();
    14c2:	0e 94 cc 00 	call	0x198	; 0x198 <current_proc>
    14c6:	9a 83       	std	Y+2, r25	; 0x02
    14c8:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    if( ret )
    14ca:	8b 81       	ldd	r24, Y+3	; 0x03
    14cc:	88 23       	and	r24, r24
    14ce:	79 f0       	breq	.+30     	; 0x14ee <_mutex_try_lock+0x46>
    {
        mutex->free = (bool_t)0;
    14d0:	ec 81       	ldd	r30, Y+4	; 0x04
    14d2:	fd 81       	ldd	r31, Y+5	; 0x05
    14d4:	12 8a       	std	Z+18, r1	; 0x12
#ifdef CONFIG_USE_HIGHEST_LOCKER
        _proc_lres_inc( proc, mutex->prio );
    14d6:	ec 81       	ldd	r30, Y+4	; 0x04
    14d8:	fd 81       	ldd	r31, Y+5	; 0x05
    14da:	21 89       	ldd	r18, Z+17	; 0x11
    14dc:	89 81       	ldd	r24, Y+1	; 0x01
    14de:	9a 81       	ldd	r25, Y+2	; 0x02
    14e0:	62 2f       	mov	r22, r18
    14e2:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <_proc_lres_inc>
        _proc_prio_control_running( proc );
    14e6:	89 81       	ldd	r24, Y+1	; 0x01
    14e8:	9a 81       	ldd	r25, Y+2	; 0x02
    14ea:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <_proc_prio_control_running>
#endif // CONFIG_USE_HIGHEST_LOCKER
    }
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    return ret;
    14ee:	8b 81       	ldd	r24, Y+3	; 0x03
}
    14f0:	0f 90       	pop	r0
    14f2:	0f 90       	pop	r0
    14f4:	0f 90       	pop	r0
    14f6:	0f 90       	pop	r0
    14f8:	0f 90       	pop	r0
    14fa:	cf 91       	pop	r28
    14fc:	df 91       	pop	r29
    14fe:	08 95       	ret

00001500 <_mutex_unlock>:

void _mutex_unlock( mutex_t *  mutex )
{
    1500:	df 93       	push	r29
    1502:	cf 93       	push	r28
    1504:	00 d0       	rcall	.+0      	; 0x1506 <_mutex_unlock+0x6>
    1506:	00 d0       	rcall	.+0      	; 0x1508 <_mutex_unlock+0x8>
    1508:	cd b7       	in	r28, 0x3d	; 61
    150a:	de b7       	in	r29, 0x3e	; 62
    150c:	9c 83       	std	Y+4, r25	; 0x04
    150e:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = current_proc();
    1510:	0e 94 cc 00 	call	0x198	; 0x198 <current_proc>
    1514:	9a 83       	std	Y+2, r25	; 0x02
    1516:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
#ifdef CONFIG_USE_HIGHEST_LOCKER

    _proc_lres_dec( proc, mutex->prio );
    1518:	eb 81       	ldd	r30, Y+3	; 0x03
    151a:	fc 81       	ldd	r31, Y+4	; 0x04
    151c:	21 89       	ldd	r18, Z+17	; 0x11
    151e:	89 81       	ldd	r24, Y+1	; 0x01
    1520:	9a 81       	ldd	r25, Y+2	; 0x02
    1522:	62 2f       	mov	r22, r18
    1524:	0e 94 66 0d 	call	0x1acc	; 0x1acc <_proc_lres_dec>
    // Если проготовлен и готов к остановке - останавливаем
    if(  ( proc->flags & PROC_FLG_PRE_END ) && (!(proc->flags & PROC_FLG_HOLD))  )
    1528:	e9 81       	ldd	r30, Y+1	; 0x01
    152a:	fa 81       	ldd	r31, Y+2	; 0x02
    152c:	83 85       	ldd	r24, Z+11	; 0x0b
    152e:	88 2f       	mov	r24, r24
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	80 72       	andi	r24, 0x20	; 32
    1534:	90 70       	andi	r25, 0x00	; 0
    1536:	00 97       	sbiw	r24, 0x00	; 0
    1538:	a1 f0       	breq	.+40     	; 0x1562 <_mutex_unlock+0x62>
    153a:	e9 81       	ldd	r30, Y+1	; 0x01
    153c:	fa 81       	ldd	r31, Y+2	; 0x02
    153e:	83 85       	ldd	r24, Z+11	; 0x0b
    1540:	88 2f       	mov	r24, r24
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	84 70       	andi	r24, 0x04	; 4
    1546:	90 70       	andi	r25, 0x00	; 0
    1548:	00 97       	sbiw	r24, 0x00	; 0
    154a:	59 f4       	brne	.+22     	; 0x1562 <_mutex_unlock+0x62>
    {
        _proc_stop_( proc );
    154c:	89 81       	ldd	r24, Y+1	; 0x01
    154e:	9a 81       	ldd	r25, Y+2	; 0x02
    1550:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <gitem_cut>
        _proc_prio_control_stoped( proc );
    1554:	89 81       	ldd	r24, Y+1	; 0x01
    1556:	9a 81       	ldd	r25, Y+2	; 0x02
    1558:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <_proc_prio_control_stoped>
        // Нужна перепланировка, процесс остановили и не запустили обратно
#ifdef CONFIG_MP
        resched( proc->core_id );
#else
        resched();
    155c:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
    1560:	04 c0       	rjmp	.+8      	; 0x156a <_mutex_unlock+0x6a>
#endif // CONFIG_MP
    }
    // Не останавливаем - меняем проиритет на ходу
    else _proc_prio_control_running( proc );
    1562:	89 81       	ldd	r24, Y+1	; 0x01
    1564:	9a 81       	ldd	r25, Y+2	; 0x02
    1566:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <_proc_prio_control_running>
#endif // CONFIG_USE_HIGHEST_LOCKER
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    // Обрабока самого мьютекса
    if( ((xlist_t *)mutex)->index == (index_t)0  )
    156a:	eb 81       	ldd	r30, Y+3	; 0x03
    156c:	fc 81       	ldd	r31, Y+4	; 0x04
    156e:	80 89       	ldd	r24, Z+16	; 0x10
    1570:	88 23       	and	r24, r24
    1572:	29 f4       	brne	.+10     	; 0x157e <_mutex_unlock+0x7e>
    {
        // Список ожидающих пуст, выходим
        mutex->free = (bool_t)1;
    1574:	eb 81       	ldd	r30, Y+3	; 0x03
    1576:	fc 81       	ldd	r31, Y+4	; 0x04
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	82 8b       	std	Z+18, r24	; 0x12
    157c:	19 c0       	rjmp	.+50     	; 0x15b0 <_mutex_unlock+0xb0>
        return;
    }
    // Список ожидающих не пуст, запускаем голову
    proc = (proc_t *)xlist_head((xlist_t *)mutex);
    157e:	8b 81       	ldd	r24, Y+3	; 0x03
    1580:	9c 81       	ldd	r25, Y+4	; 0x04
    1582:	0e 94 19 11 	call	0x2232	; 0x2232 <xlist_head>
    1586:	9a 83       	std	Y+2, r25	; 0x02
    1588:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    // Сначала надо вырезать
    proc->flags &= ~PROC_FLG_QUEUE;
    158a:	e9 81       	ldd	r30, Y+1	; 0x01
    158c:	fa 81       	ldd	r31, Y+2	; 0x02
    158e:	83 85       	ldd	r24, Z+11	; 0x0b
    1590:	87 7f       	andi	r24, 0xF7	; 247
    1592:	e9 81       	ldd	r30, Y+1	; 0x01
    1594:	fa 81       	ldd	r31, Y+2	; 0x02
    1596:	83 87       	std	Z+11, r24	; 0x0b
    gitem_cut( (gitem_t *)proc );
    1598:	89 81       	ldd	r24, Y+1	; 0x01
    159a:	9a 81       	ldd	r25, Y+2	; 0x02
    159c:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <gitem_cut>
#ifdef CONFIG_USE_HIGHEST_LOCKER
    // Меняем приоритет
    _proc_prio_control_stoped( proc );
    15a0:	89 81       	ldd	r24, Y+1	; 0x01
    15a2:	9a 81       	ldd	r25, Y+2	; 0x02
    15a4:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <_proc_prio_control_stoped>
#endif // CONFIG_USE_HIGHEST_LOCKER
    _proc_run( proc );
    15a8:	89 81       	ldd	r24, Y+1	; 0x01
    15aa:	9a 81       	ldd	r25, Y+2	; 0x02
    15ac:	0e 94 1a 0c 	call	0x1834	; 0x1834 <_proc_run>
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
}
    15b0:	0f 90       	pop	r0
    15b2:	0f 90       	pop	r0
    15b4:	0f 90       	pop	r0
    15b6:	0f 90       	pop	r0
    15b8:	cf 91       	pop	r28
    15ba:	df 91       	pop	r29
    15bc:	08 95       	ret

000015be <pcounter_init>:
*                           http://www.0chan.ru/r/res/9996.html                          *
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
void pcounter_init(pcounter_t * pcounter)
{
    15be:	df 93       	push	r29
    15c0:	cf 93       	push	r28
    15c2:	00 d0       	rcall	.+0      	; 0x15c4 <pcounter_init+0x6>
    15c4:	0f 92       	push	r0
    15c6:	cd b7       	in	r28, 0x3d	; 61
    15c8:	de b7       	in	r29, 0x3e	; 62
    15ca:	9b 83       	std	Y+3, r25	; 0x03
    15cc:	8a 83       	std	Y+2, r24	; 0x02
    prio_t p;
    pcounter->index = (index_t)0;
    15ce:	ea 81       	ldd	r30, Y+2	; 0x02
    15d0:	fb 81       	ldd	r31, Y+3	; 0x03
    15d2:	10 8a       	std	Z+16, r1	; 0x10
    for(p = 0; p < (index_t)BITS_IN_INDEX_T; p++)pcounter->counter[p] = (count_t)0;
    15d4:	19 82       	std	Y+1, r1	; 0x01
    15d6:	0f c0       	rjmp	.+30     	; 0x15f6 <pcounter_init+0x38>
    15d8:	89 81       	ldd	r24, Y+1	; 0x01
    15da:	88 2f       	mov	r24, r24
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	2a 81       	ldd	r18, Y+2	; 0x02
    15e0:	3b 81       	ldd	r19, Y+3	; 0x03
    15e2:	88 0f       	add	r24, r24
    15e4:	99 1f       	adc	r25, r25
    15e6:	f9 01       	movw	r30, r18
    15e8:	e8 0f       	add	r30, r24
    15ea:	f9 1f       	adc	r31, r25
    15ec:	11 82       	std	Z+1, r1	; 0x01
    15ee:	10 82       	st	Z, r1
    15f0:	89 81       	ldd	r24, Y+1	; 0x01
    15f2:	8f 5f       	subi	r24, 0xFF	; 255
    15f4:	89 83       	std	Y+1, r24	; 0x01
    15f6:	89 81       	ldd	r24, Y+1	; 0x01
    15f8:	88 30       	cpi	r24, 0x08	; 8
    15fa:	70 f3       	brcs	.-36     	; 0x15d8 <pcounter_init+0x1a>
}
    15fc:	0f 90       	pop	r0
    15fe:	0f 90       	pop	r0
    1600:	0f 90       	pop	r0
    1602:	cf 91       	pop	r28
    1604:	df 91       	pop	r29
    1606:	08 95       	ret

00001608 <pcounter_inc>:

void pcounter_inc(pcounter_t * pcounter, prio_t prio)
{
    1608:	df 93       	push	r29
    160a:	cf 93       	push	r28
    160c:	00 d0       	rcall	.+0      	; 0x160e <pcounter_inc+0x6>
    160e:	0f 92       	push	r0
    1610:	cd b7       	in	r28, 0x3d	; 61
    1612:	de b7       	in	r29, 0x3e	; 62
    1614:	9a 83       	std	Y+2, r25	; 0x02
    1616:	89 83       	std	Y+1, r24	; 0x01
    1618:	6b 83       	std	Y+3, r22	; 0x03
    pcounter->counter[prio]++;
    161a:	8b 81       	ldd	r24, Y+3	; 0x03
    161c:	68 2f       	mov	r22, r24
    161e:	70 e0       	ldi	r23, 0x00	; 0
    1620:	29 81       	ldd	r18, Y+1	; 0x01
    1622:	3a 81       	ldd	r19, Y+2	; 0x02
    1624:	cb 01       	movw	r24, r22
    1626:	88 0f       	add	r24, r24
    1628:	99 1f       	adc	r25, r25
    162a:	f9 01       	movw	r30, r18
    162c:	e8 0f       	add	r30, r24
    162e:	f9 1f       	adc	r31, r25
    1630:	80 81       	ld	r24, Z
    1632:	91 81       	ldd	r25, Z+1	; 0x01
    1634:	ac 01       	movw	r20, r24
    1636:	4f 5f       	subi	r20, 0xFF	; 255
    1638:	5f 4f       	sbci	r21, 0xFF	; 255
    163a:	29 81       	ldd	r18, Y+1	; 0x01
    163c:	3a 81       	ldd	r19, Y+2	; 0x02
    163e:	cb 01       	movw	r24, r22
    1640:	88 0f       	add	r24, r24
    1642:	99 1f       	adc	r25, r25
    1644:	f9 01       	movw	r30, r18
    1646:	e8 0f       	add	r30, r24
    1648:	f9 1f       	adc	r31, r25
    164a:	51 83       	std	Z+1, r21	; 0x01
    164c:	40 83       	st	Z, r20
    pcounter->index |= ((index_t)1)<<prio;
    164e:	e9 81       	ldd	r30, Y+1	; 0x01
    1650:	fa 81       	ldd	r31, Y+2	; 0x02
    1652:	80 89       	ldd	r24, Z+16	; 0x10
    1654:	48 2f       	mov	r20, r24
    1656:	8b 81       	ldd	r24, Y+3	; 0x03
    1658:	28 2f       	mov	r18, r24
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	02 2e       	mov	r0, r18
    1662:	02 c0       	rjmp	.+4      	; 0x1668 <pcounter_inc+0x60>
    1664:	88 0f       	add	r24, r24
    1666:	99 1f       	adc	r25, r25
    1668:	0a 94       	dec	r0
    166a:	e2 f7       	brpl	.-8      	; 0x1664 <pcounter_inc+0x5c>
    166c:	84 2b       	or	r24, r20
    166e:	e9 81       	ldd	r30, Y+1	; 0x01
    1670:	fa 81       	ldd	r31, Y+2	; 0x02
    1672:	80 8b       	std	Z+16, r24	; 0x10
}
    1674:	0f 90       	pop	r0
    1676:	0f 90       	pop	r0
    1678:	0f 90       	pop	r0
    167a:	cf 91       	pop	r28
    167c:	df 91       	pop	r29
    167e:	08 95       	ret

00001680 <pcounter_dec>:

index_t pcounter_dec(pcounter_t * pcounter, prio_t prio)
{
    1680:	df 93       	push	r29
    1682:	cf 93       	push	r28
    1684:	00 d0       	rcall	.+0      	; 0x1686 <pcounter_dec+0x6>
    1686:	00 d0       	rcall	.+0      	; 0x1688 <pcounter_dec+0x8>
    1688:	cd b7       	in	r28, 0x3d	; 61
    168a:	de b7       	in	r29, 0x3e	; 62
    168c:	9b 83       	std	Y+3, r25	; 0x03
    168e:	8a 83       	std	Y+2, r24	; 0x02
    1690:	6c 83       	std	Y+4, r22	; 0x04
    index_t mask = ((index_t)1)<<prio;
    1692:	8c 81       	ldd	r24, Y+4	; 0x04
    1694:	28 2f       	mov	r18, r24
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	02 c0       	rjmp	.+4      	; 0x16a2 <pcounter_dec+0x22>
    169e:	88 0f       	add	r24, r24
    16a0:	99 1f       	adc	r25, r25
    16a2:	2a 95       	dec	r18
    16a4:	e2 f7       	brpl	.-8      	; 0x169e <pcounter_dec+0x1e>
    16a6:	89 83       	std	Y+1, r24	; 0x01
    pcounter->counter[prio]--;
    16a8:	8c 81       	ldd	r24, Y+4	; 0x04
    16aa:	68 2f       	mov	r22, r24
    16ac:	70 e0       	ldi	r23, 0x00	; 0
    16ae:	2a 81       	ldd	r18, Y+2	; 0x02
    16b0:	3b 81       	ldd	r19, Y+3	; 0x03
    16b2:	cb 01       	movw	r24, r22
    16b4:	88 0f       	add	r24, r24
    16b6:	99 1f       	adc	r25, r25
    16b8:	f9 01       	movw	r30, r18
    16ba:	e8 0f       	add	r30, r24
    16bc:	f9 1f       	adc	r31, r25
    16be:	80 81       	ld	r24, Z
    16c0:	91 81       	ldd	r25, Z+1	; 0x01
    16c2:	ac 01       	movw	r20, r24
    16c4:	41 50       	subi	r20, 0x01	; 1
    16c6:	50 40       	sbci	r21, 0x00	; 0
    16c8:	2a 81       	ldd	r18, Y+2	; 0x02
    16ca:	3b 81       	ldd	r19, Y+3	; 0x03
    16cc:	cb 01       	movw	r24, r22
    16ce:	88 0f       	add	r24, r24
    16d0:	99 1f       	adc	r25, r25
    16d2:	f9 01       	movw	r30, r18
    16d4:	e8 0f       	add	r30, r24
    16d6:	f9 1f       	adc	r31, r25
    16d8:	51 83       	std	Z+1, r21	; 0x01
    16da:	40 83       	st	Z, r20
    if(pcounter->counter[prio] == (count_t)0)pcounter->index &= ~mask;
    16dc:	8c 81       	ldd	r24, Y+4	; 0x04
    16de:	88 2f       	mov	r24, r24
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	2a 81       	ldd	r18, Y+2	; 0x02
    16e4:	3b 81       	ldd	r19, Y+3	; 0x03
    16e6:	88 0f       	add	r24, r24
    16e8:	99 1f       	adc	r25, r25
    16ea:	f9 01       	movw	r30, r18
    16ec:	e8 0f       	add	r30, r24
    16ee:	f9 1f       	adc	r31, r25
    16f0:	80 81       	ld	r24, Z
    16f2:	91 81       	ldd	r25, Z+1	; 0x01
    16f4:	00 97       	sbiw	r24, 0x00	; 0
    16f6:	51 f4       	brne	.+20     	; 0x170c <pcounter_dec+0x8c>
    16f8:	ea 81       	ldd	r30, Y+2	; 0x02
    16fa:	fb 81       	ldd	r31, Y+3	; 0x03
    16fc:	80 89       	ldd	r24, Z+16	; 0x10
    16fe:	98 2f       	mov	r25, r24
    1700:	89 81       	ldd	r24, Y+1	; 0x01
    1702:	80 95       	com	r24
    1704:	89 23       	and	r24, r25
    1706:	ea 81       	ldd	r30, Y+2	; 0x02
    1708:	fb 81       	ldd	r31, Y+3	; 0x03
    170a:	80 8b       	std	Z+16, r24	; 0x10
    return pcounter->index & mask;
    170c:	ea 81       	ldd	r30, Y+2	; 0x02
    170e:	fb 81       	ldd	r31, Y+3	; 0x03
    1710:	90 89       	ldd	r25, Z+16	; 0x10
    1712:	89 81       	ldd	r24, Y+1	; 0x01
    1714:	89 23       	and	r24, r25
}
    1716:	0f 90       	pop	r0
    1718:	0f 90       	pop	r0
    171a:	0f 90       	pop	r0
    171c:	0f 90       	pop	r0
    171e:	cf 91       	pop	r28
    1720:	df 91       	pop	r29
    1722:	08 95       	ret

00001724 <proc_init_isr>:
    bool_t is_rt // если true, значит процесс будет иметть поведение RT
#ifdef CONFIG_MP
    ,affinity_t affinity
#endif // CONFIG_MP
)
{
    1724:	8f 92       	push	r8
    1726:	af 92       	push	r10
    1728:	bf 92       	push	r11
    172a:	cf 92       	push	r12
    172c:	ef 92       	push	r14
    172e:	ff 92       	push	r15
    1730:	0f 93       	push	r16
    1732:	1f 93       	push	r17
    1734:	df 93       	push	r29
    1736:	cf 93       	push	r28
    1738:	cd b7       	in	r28, 0x3d	; 61
    173a:	de b7       	in	r29, 0x3e	; 62
    173c:	61 97       	sbiw	r28, 0x11	; 17
    173e:	0f b6       	in	r0, 0x3f	; 63
    1740:	f8 94       	cli
    1742:	de bf       	out	0x3e, r29	; 62
    1744:	0f be       	out	0x3f, r0	; 63
    1746:	cd bf       	out	0x3d, r28	; 61
    1748:	9a 83       	std	Y+2, r25	; 0x02
    174a:	89 83       	std	Y+1, r24	; 0x01
    174c:	7c 83       	std	Y+4, r23	; 0x04
    174e:	6b 83       	std	Y+3, r22	; 0x03
    1750:	5e 83       	std	Y+6, r21	; 0x06
    1752:	4d 83       	std	Y+5, r20	; 0x05
    1754:	38 87       	std	Y+8, r19	; 0x08
    1756:	2f 83       	std	Y+7, r18	; 0x07
    1758:	1a 87       	std	Y+10, r17	; 0x0a
    175a:	09 87       	std	Y+9, r16	; 0x09
    175c:	fc 86       	std	Y+12, r15	; 0x0c
    175e:	eb 86       	std	Y+11, r14	; 0x0b
    1760:	cd 86       	std	Y+13, r12	; 0x0d
    1762:	bf 86       	std	Y+15, r11	; 0x0f
    1764:	ae 86       	std	Y+14, r10	; 0x0e
    1766:	88 8a       	std	Y+16, r8	; 0x10
    gitem_init( (gitem_t *)proc, prio );
    1768:	89 81       	ldd	r24, Y+1	; 0x01
    176a:	9a 81       	ldd	r25, Y+2	; 0x02
    176c:	6d 85       	ldd	r22, Y+13	; 0x0d
    176e:	0e 94 56 06 	call	0xcac	; 0xcac <gitem_init>
    proc->flags = ( is_rt )?PROC_FLG_RT:(flag_t)0;
    1772:	88 89       	ldd	r24, Y+16	; 0x10
    1774:	89 8b       	std	Y+17, r24	; 0x11
    1776:	89 89       	ldd	r24, Y+17	; 0x11
    1778:	88 23       	and	r24, r24
    177a:	11 f0       	breq	.+4      	; 0x1780 <proc_init_isr+0x5c>
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	89 8b       	std	Y+17, r24	; 0x11
    1780:	89 89       	ldd	r24, Y+17	; 0x11
    1782:	e9 81       	ldd	r30, Y+1	; 0x01
    1784:	fa 81       	ldd	r31, Y+2	; 0x02
    1786:	83 87       	std	Z+11, r24	; 0x0b
#ifdef CONFIG_USE_HIGHEST_LOCKER
    pcounter_init(&proc->lres);
    1788:	89 81       	ldd	r24, Y+1	; 0x01
    178a:	9a 81       	ldd	r25, Y+2	; 0x02
    178c:	0d 96       	adiw	r24, 0x0d	; 13
    178e:	0e 94 df 0a 	call	0x15be	; 0x15be <pcounter_init>
    proc->base_prio = prio;
    1792:	e9 81       	ldd	r30, Y+1	; 0x01
    1794:	fa 81       	ldd	r31, Y+2	; 0x02
    1796:	8d 85       	ldd	r24, Y+13	; 0x0d
    1798:	84 87       	std	Z+12, r24	; 0x0c
#else
    proc->lres = (count_t)0;
#endif
    proc->time_quant = time_quant;
    179a:	e9 81       	ldd	r30, Y+1	; 0x01
    179c:	fa 81       	ldd	r31, Y+2	; 0x02
    179e:	8e 85       	ldd	r24, Y+14	; 0x0e
    17a0:	9f 85       	ldd	r25, Y+15	; 0x0f
    17a2:	97 8f       	std	Z+31, r25	; 0x1f
    17a4:	86 8f       	std	Z+30, r24	; 0x1e
    proc->timer = time_quant;
    17a6:	e9 81       	ldd	r30, Y+1	; 0x01
    17a8:	fa 81       	ldd	r31, Y+2	; 0x02
    17aa:	8e 85       	ldd	r24, Y+14	; 0x0e
    17ac:	9f 85       	ldd	r25, Y+15	; 0x0f
    17ae:	91 a3       	std	Z+33, r25	; 0x21
    17b0:	80 a3       	std	Z+32, r24	; 0x20
#ifdef CONFIG_MP
    proc->core_id = (core_id_t)0;
    proc->affinity = affinity;
#endif // CONFIG_MP
    proc->pmain = pmain;
    17b2:	e9 81       	ldd	r30, Y+1	; 0x01
    17b4:	fa 81       	ldd	r31, Y+2	; 0x02
    17b6:	8b 81       	ldd	r24, Y+3	; 0x03
    17b8:	9c 81       	ldd	r25, Y+4	; 0x04
    17ba:	93 a3       	std	Z+35, r25	; 0x23
    17bc:	82 a3       	std	Z+34, r24	; 0x22
    proc->sv_hook = sv_hook;
    17be:	e9 81       	ldd	r30, Y+1	; 0x01
    17c0:	fa 81       	ldd	r31, Y+2	; 0x02
    17c2:	8d 81       	ldd	r24, Y+5	; 0x05
    17c4:	9e 81       	ldd	r25, Y+6	; 0x06
    17c6:	95 a3       	std	Z+37, r25	; 0x25
    17c8:	84 a3       	std	Z+36, r24	; 0x24
    proc->rs_hook = rs_hook;
    17ca:	e9 81       	ldd	r30, Y+1	; 0x01
    17cc:	fa 81       	ldd	r31, Y+2	; 0x02
    17ce:	8f 81       	ldd	r24, Y+7	; 0x07
    17d0:	98 85       	ldd	r25, Y+8	; 0x08
    17d2:	97 a3       	std	Z+39, r25	; 0x27
    17d4:	86 a3       	std	Z+38, r24	; 0x26
    proc->arg = arg;
    17d6:	e9 81       	ldd	r30, Y+1	; 0x01
    17d8:	fa 81       	ldd	r31, Y+2	; 0x02
    17da:	89 85       	ldd	r24, Y+9	; 0x09
    17dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    17de:	91 a7       	std	Z+41, r25	; 0x29
    17e0:	80 a7       	std	Z+40, r24	; 0x28
    proc->sstart = sstart;
    17e2:	e9 81       	ldd	r30, Y+1	; 0x01
    17e4:	fa 81       	ldd	r31, Y+2	; 0x02
    17e6:	8b 85       	ldd	r24, Y+11	; 0x0b
    17e8:	9c 85       	ldd	r25, Y+12	; 0x0c
    17ea:	93 a7       	std	Z+43, r25	; 0x2b
    17ec:	82 a7       	std	Z+42, r24	; 0x2a
    if( sstart )proc->spointer = proc_stack_init(sstart, (code_t)proc_run_wrapper, (void *)proc);
    17ee:	8b 85       	ldd	r24, Y+11	; 0x0b
    17f0:	9c 85       	ldd	r25, Y+12	; 0x0c
    17f2:	00 97       	sbiw	r24, 0x00	; 0
    17f4:	71 f0       	breq	.+28     	; 0x1812 <proc_init_isr+0xee>
    17f6:	43 ea       	ldi	r20, 0xA3	; 163
    17f8:	53 e0       	ldi	r21, 0x03	; 3
    17fa:	8b 85       	ldd	r24, Y+11	; 0x0b
    17fc:	9c 85       	ldd	r25, Y+12	; 0x0c
    17fe:	29 81       	ldd	r18, Y+1	; 0x01
    1800:	3a 81       	ldd	r19, Y+2	; 0x02
    1802:	ba 01       	movw	r22, r20
    1804:	a9 01       	movw	r20, r18
    1806:	0e 94 d7 00 	call	0x1ae	; 0x1ae <proc_stack_init>
    180a:	e9 81       	ldd	r30, Y+1	; 0x01
    180c:	fa 81       	ldd	r31, Y+2	; 0x02
    180e:	95 a7       	std	Z+45, r25	; 0x2d
    1810:	84 a7       	std	Z+44, r24	; 0x2c
}
    1812:	61 96       	adiw	r28, 0x11	; 17
    1814:	0f b6       	in	r0, 0x3f	; 63
    1816:	f8 94       	cli
    1818:	de bf       	out	0x3e, r29	; 62
    181a:	0f be       	out	0x3f, r0	; 63
    181c:	cd bf       	out	0x3d, r28	; 61
    181e:	cf 91       	pop	r28
    1820:	df 91       	pop	r29
    1822:	1f 91       	pop	r17
    1824:	0f 91       	pop	r16
    1826:	ff 90       	pop	r15
    1828:	ef 90       	pop	r14
    182a:	cf 90       	pop	r12
    182c:	bf 90       	pop	r11
    182e:	af 90       	pop	r10
    1830:	8f 90       	pop	r8
    1832:	08 95       	ret

00001834 <_proc_run>:
    spin_unlock( &proc_sched->lock );
}
#endif // CONFIG_MP

void _proc_run( proc_t * proc )
{
    1834:	df 93       	push	r29
    1836:	cf 93       	push	r28
    1838:	00 d0       	rcall	.+0      	; 0x183a <_proc_run+0x6>
    183a:	cd b7       	in	r28, 0x3d	; 61
    183c:	de b7       	in	r29, 0x3e	; 62
    183e:	9a 83       	std	Y+2, r25	; 0x02
    1840:	89 83       	std	Y+1, r24	; 0x01
    proc->flags |= PROC_FLG_RUN;
    1842:	e9 81       	ldd	r30, Y+1	; 0x01
    1844:	fa 81       	ldd	r31, Y+2	; 0x02
    1846:	83 85       	ldd	r24, Z+11	; 0x0b
    1848:	82 60       	ori	r24, 0x02	; 2
    184a:	e9 81       	ldd	r30, Y+1	; 0x01
    184c:	fa 81       	ldd	r31, Y+2	; 0x02
    184e:	83 87       	std	Z+11, r24	; 0x0b
    spin_lock( &kernel.stat_lock );
    proc->core_id = sched_load_balancer( proc, (stat_t *)kernel.stat );
    stat_inc( proc, (stat_t *)kernel.stat+proc->core_id );
    spin_unlock( &kernel.stat_lock );
#endif
    _proc_run_( proc );
    1850:	89 81       	ldd	r24, Y+1	; 0x01
    1852:	9a 81       	ldd	r25, Y+2	; 0x02
    1854:	20 91 a0 01 	lds	r18, 0x01A0
    1858:	30 91 a1 01 	lds	r19, 0x01A1
    185c:	b9 01       	movw	r22, r18
    185e:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <gitem_insert>
#ifdef CONFIG_MP
    resched( proc->core_id );
#else
    resched();
    1862:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
#endif // CONFIG_MP
}
    1866:	0f 90       	pop	r0
    1868:	0f 90       	pop	r0
    186a:	cf 91       	pop	r28
    186c:	df 91       	pop	r29
    186e:	08 95       	ret

00001870 <proc_run_isr>:
// Функция общего пользования - запуск процесса из обработчика прерывания, прерывания должны быть запрещены во время запуска
bool_t proc_run_isr(proc_t * proc)
{
    1870:	df 93       	push	r29
    1872:	cf 93       	push	r28
    1874:	00 d0       	rcall	.+0      	; 0x1876 <proc_run_isr+0x6>
    1876:	0f 92       	push	r0
    1878:	cd b7       	in	r28, 0x3d	; 61
    187a:	de b7       	in	r29, 0x3e	; 62
    187c:	9b 83       	std	Y+3, r25	; 0x03
    187e:	8a 83       	std	Y+2, r24	; 0x02
    bool_t ret = (bool_t)1;
    1880:	81 e0       	ldi	r24, 0x01	; 1
    1882:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    if( proc->flags & (PROC_FLG_RUN|PROC_FLG_QUEUE|PROC_FLG_WAIT|PROC_FLG_END|PROC_FLG_DEAD) )
    1884:	ea 81       	ldd	r30, Y+2	; 0x02
    1886:	fb 81       	ldd	r31, Y+3	; 0x03
    1888:	83 85       	ldd	r24, Z+11	; 0x0b
    188a:	88 2f       	mov	r24, r24
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	8a 7d       	andi	r24, 0xDA	; 218
    1890:	90 70       	andi	r25, 0x00	; 0
    1892:	00 97       	sbiw	r24, 0x00	; 0
    1894:	11 f0       	breq	.+4      	; 0x189a <proc_run_isr+0x2a>
    {
        ret = (bool_t)0;
    1896:	19 82       	std	Y+1, r1	; 0x01
    1898:	04 c0       	rjmp	.+8      	; 0x18a2 <proc_run_isr+0x32>
        goto end;
    }
    _proc_run( proc );
    189a:	8a 81       	ldd	r24, Y+2	; 0x02
    189c:	9b 81       	ldd	r25, Y+3	; 0x03
    189e:	0e 94 1a 0c 	call	0x1834	; 0x1834 <_proc_run>
end:
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    return ret;
    18a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    18a4:	0f 90       	pop	r0
    18a6:	0f 90       	pop	r0
    18a8:	0f 90       	pop	r0
    18aa:	cf 91       	pop	r28
    18ac:	df 91       	pop	r29
    18ae:	08 95       	ret

000018b0 <proc_restart_isr>:
// Перезепуск процесса из обработчика прерываний, прерывания должны быть запрещены
bool_t proc_restart_isr(proc_t * proc)
{
    18b0:	df 93       	push	r29
    18b2:	cf 93       	push	r28
    18b4:	00 d0       	rcall	.+0      	; 0x18b6 <proc_restart_isr+0x6>
    18b6:	0f 92       	push	r0
    18b8:	cd b7       	in	r28, 0x3d	; 61
    18ba:	de b7       	in	r29, 0x3e	; 62
    18bc:	9b 83       	std	Y+3, r25	; 0x03
    18be:	8a 83       	std	Y+2, r24	; 0x02
    bool_t ret = (bool_t)1;
    18c0:	81 e0       	ldi	r24, 0x01	; 1
    18c2:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif
    if( proc->flags & (PROC_FLG_RUN|PROC_FLG_HOLD|PROC_FLG_QUEUE|PROC_FLG_WAIT|PROC_FLG_PRE_END|PROC_FLG_DEAD) )
    18c4:	ea 81       	ldd	r30, Y+2	; 0x02
    18c6:	fb 81       	ldd	r31, Y+3	; 0x03
    18c8:	83 85       	ldd	r24, Z+11	; 0x0b
    18ca:	88 2f       	mov	r24, r24
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	8e 7b       	andi	r24, 0xBE	; 190
    18d0:	90 70       	andi	r25, 0x00	; 0
    18d2:	00 97       	sbiw	r24, 0x00	; 0
    18d4:	11 f0       	breq	.+4      	; 0x18da <proc_restart_isr+0x2a>
    {
        ret = (bool_t)0;
    18d6:	19 82       	std	Y+1, r1	; 0x01
    18d8:	2d c0       	rjmp	.+90     	; 0x1934 <proc_restart_isr+0x84>
        goto end;
    }
    proc->flags = ( proc->flags & PROC_FLG_RT )?PROC_FLG_RT:(flag_t)0;
    18da:	ea 81       	ldd	r30, Y+2	; 0x02
    18dc:	fb 81       	ldd	r31, Y+3	; 0x03
    18de:	83 85       	ldd	r24, Z+11	; 0x0b
    18e0:	81 70       	andi	r24, 0x01	; 1
    18e2:	ea 81       	ldd	r30, Y+2	; 0x02
    18e4:	fb 81       	ldd	r31, Y+3	; 0x03
    18e6:	83 87       	std	Z+11, r24	; 0x0b
#ifdef CONFIG_USE_HIGHEST_LOCKER
    pcounter_init(&proc->lres);
    18e8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ea:	9b 81       	ldd	r25, Y+3	; 0x03
    18ec:	0d 96       	adiw	r24, 0x0d	; 13
    18ee:	0e 94 df 0a 	call	0x15be	; 0x15be <pcounter_init>
#else
    proc->lres = (count_t)0;
#endif
    proc->timer = proc->time_quant;
    18f2:	ea 81       	ldd	r30, Y+2	; 0x02
    18f4:	fb 81       	ldd	r31, Y+3	; 0x03
    18f6:	86 8d       	ldd	r24, Z+30	; 0x1e
    18f8:	97 8d       	ldd	r25, Z+31	; 0x1f
    18fa:	ea 81       	ldd	r30, Y+2	; 0x02
    18fc:	fb 81       	ldd	r31, Y+3	; 0x03
    18fe:	91 a3       	std	Z+33, r25	; 0x21
    1900:	80 a3       	std	Z+32, r24	; 0x20

    if( proc->sstart )proc->spointer = proc_stack_init( proc->sstart, (code_t)proc_run_wrapper, (void *)proc );
    1902:	ea 81       	ldd	r30, Y+2	; 0x02
    1904:	fb 81       	ldd	r31, Y+3	; 0x03
    1906:	82 a5       	ldd	r24, Z+42	; 0x2a
    1908:	93 a5       	ldd	r25, Z+43	; 0x2b
    190a:	00 97       	sbiw	r24, 0x00	; 0
    190c:	79 f0       	breq	.+30     	; 0x192c <proc_restart_isr+0x7c>
    190e:	ea 81       	ldd	r30, Y+2	; 0x02
    1910:	fb 81       	ldd	r31, Y+3	; 0x03
    1912:	82 a5       	ldd	r24, Z+42	; 0x2a
    1914:	93 a5       	ldd	r25, Z+43	; 0x2b
    1916:	23 ea       	ldi	r18, 0xA3	; 163
    1918:	33 e0       	ldi	r19, 0x03	; 3
    191a:	4a 81       	ldd	r20, Y+2	; 0x02
    191c:	5b 81       	ldd	r21, Y+3	; 0x03
    191e:	b9 01       	movw	r22, r18
    1920:	0e 94 d7 00 	call	0x1ae	; 0x1ae <proc_stack_init>
    1924:	ea 81       	ldd	r30, Y+2	; 0x02
    1926:	fb 81       	ldd	r31, Y+3	; 0x03
    1928:	95 a7       	std	Z+45, r25	; 0x2d
    192a:	84 a7       	std	Z+44, r24	; 0x2c
    _proc_run( proc );
    192c:	8a 81       	ldd	r24, Y+2	; 0x02
    192e:	9b 81       	ldd	r25, Y+3	; 0x03
    1930:	0e 94 1a 0c 	call	0x1834	; 0x1834 <_proc_run>
end:
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif
    return ret;
    1934:	89 81       	ldd	r24, Y+1	; 0x01
}
    1936:	0f 90       	pop	r0
    1938:	0f 90       	pop	r0
    193a:	0f 90       	pop	r0
    193c:	cf 91       	pop	r28
    193e:	df 91       	pop	r29
    1940:	08 95       	ret

00001942 <_proc_stop>:
        spin_unlock( xlist_lock );
    }
}
#endif // CONFIG_MP
void _proc_stop(proc_t * proc)
{
    1942:	df 93       	push	r29
    1944:	cf 93       	push	r28
    1946:	00 d0       	rcall	.+0      	; 0x1948 <_proc_stop+0x6>
    1948:	cd b7       	in	r28, 0x3d	; 61
    194a:	de b7       	in	r29, 0x3e	; 62
    194c:	9a 83       	std	Y+2, r25	; 0x02
    194e:	89 83       	std	Y+1, r24	; 0x01
    proc->flags &= ~PROC_FLG_RUN;
    1950:	e9 81       	ldd	r30, Y+1	; 0x01
    1952:	fa 81       	ldd	r31, Y+2	; 0x02
    1954:	83 85       	ldd	r24, Z+11	; 0x0b
    1956:	8d 7f       	andi	r24, 0xFD	; 253
    1958:	e9 81       	ldd	r30, Y+1	; 0x01
    195a:	fa 81       	ldd	r31, Y+2	; 0x02
    195c:	83 87       	std	Z+11, r24	; 0x0b
    _proc_stop_( proc );
    195e:	89 81       	ldd	r24, Y+1	; 0x01
    1960:	9a 81       	ldd	r25, Y+2	; 0x02
    1962:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <gitem_cut>
#ifdef CONFIG_MP
    resched( proc->core_id );
#else
    resched();
    1966:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
#endif // CONFIG_MP
}
    196a:	0f 90       	pop	r0
    196c:	0f 90       	pop	r0
    196e:	cf 91       	pop	r28
    1970:	df 91       	pop	r29
    1972:	08 95       	ret

00001974 <proc_stop_isr>:
// Останов процесса из обработчика прерываний, прерывания должны быть запрещены
bool_t proc_stop_isr(proc_t * proc)
{
    1974:	df 93       	push	r29
    1976:	cf 93       	push	r28
    1978:	00 d0       	rcall	.+0      	; 0x197a <proc_stop_isr+0x6>
    197a:	0f 92       	push	r0
    197c:	cd b7       	in	r28, 0x3d	; 61
    197e:	de b7       	in	r29, 0x3e	; 62
    1980:	9b 83       	std	Y+3, r25	; 0x03
    1982:	8a 83       	std	Y+2, r24	; 0x02
    bool_t ret = (bool_t)0;
    1984:	19 82       	std	Y+1, r1	; 0x01
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    //Проверка флагов
    //В случчае PROC_FLG_WAIT будем обрабатывать PROC_FLG_PRE_END на выходе из sig_wait.
    //В случае PROC_FLG_HOLD или PROC_FLG_QUEUE будем обрабатывать PROC_FLG_PRE_END на выходе из функции, освобождающей общий ресурс.
    if( proc->flags & (PROC_FLG_HOLD|PROC_FLG_QUEUE|PROC_FLG_WAIT) )proc->flags |= PROC_FLG_PRE_END;
    1986:	ea 81       	ldd	r30, Y+2	; 0x02
    1988:	fb 81       	ldd	r31, Y+3	; 0x03
    198a:	83 85       	ldd	r24, Z+11	; 0x0b
    198c:	88 2f       	mov	r24, r24
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	8c 71       	andi	r24, 0x1C	; 28
    1992:	90 70       	andi	r25, 0x00	; 0
    1994:	00 97       	sbiw	r24, 0x00	; 0
    1996:	41 f0       	breq	.+16     	; 0x19a8 <proc_stop_isr+0x34>
    1998:	ea 81       	ldd	r30, Y+2	; 0x02
    199a:	fb 81       	ldd	r31, Y+3	; 0x03
    199c:	83 85       	ldd	r24, Z+11	; 0x0b
    199e:	80 62       	ori	r24, 0x20	; 32
    19a0:	ea 81       	ldd	r30, Y+2	; 0x02
    19a2:	fb 81       	ldd	r31, Y+3	; 0x03
    19a4:	83 87       	std	Z+11, r24	; 0x0b
    19a6:	0f c0       	rjmp	.+30     	; 0x19c6 <proc_stop_isr+0x52>
    else if( proc->flags & PROC_FLG_RUN )
    19a8:	ea 81       	ldd	r30, Y+2	; 0x02
    19aa:	fb 81       	ldd	r31, Y+3	; 0x03
    19ac:	83 85       	ldd	r24, Z+11	; 0x0b
    19ae:	88 2f       	mov	r24, r24
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	82 70       	andi	r24, 0x02	; 2
    19b4:	90 70       	andi	r25, 0x00	; 0
    19b6:	00 97       	sbiw	r24, 0x00	; 0
    19b8:	31 f0       	breq	.+12     	; 0x19c6 <proc_stop_isr+0x52>
    {
        _proc_stop( proc );
    19ba:	8a 81       	ldd	r24, Y+2	; 0x02
    19bc:	9b 81       	ldd	r25, Y+3	; 0x03
    19be:	0e 94 a1 0c 	call	0x1942	; 0x1942 <_proc_stop>
        ret = (bool_t)1;
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	89 83       	std	Y+1, r24	; 0x01
    }
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    return ret;
    19c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    19c8:	0f 90       	pop	r0
    19ca:	0f 90       	pop	r0
    19cc:	0f 90       	pop	r0
    19ce:	cf 91       	pop	r28
    19d0:	df 91       	pop	r29
    19d2:	08 95       	ret

000019d4 <proc_reset_watchdog>:
void proc_reset_watchdog(void)
{
    19d4:	df 93       	push	r29
    19d6:	cf 93       	push	r28
    19d8:	00 d0       	rcall	.+0      	; 0x19da <proc_reset_watchdog+0x6>
    19da:	cd b7       	in	r28, 0x3d	; 61
    19dc:	de b7       	in	r29, 0x3e	; 62
#ifdef CONFIG_MP
    core_id_t current_core = _enter_crit_sec();
    proc = ((sched_t *)kernel.sched + current_core)->current_proc;
    spin_lock(&proc->lock);
#else
    enter_crit_sec();
    19de:	0e 94 26 06 	call	0xc4c	; 0xc4c <enter_crit_sec>
    proc = kernel.sched.current_proc;
    19e2:	80 91 9e 01 	lds	r24, 0x019E
    19e6:	90 91 9f 01 	lds	r25, 0x019F
    19ea:	9a 83       	std	Y+2, r25	; 0x02
    19ec:	89 83       	std	Y+1, r24	; 0x01
#endif
    if( proc->flags & PROC_FLG_RT )proc->timer = proc->time_quant;
    19ee:	e9 81       	ldd	r30, Y+1	; 0x01
    19f0:	fa 81       	ldd	r31, Y+2	; 0x02
    19f2:	83 85       	ldd	r24, Z+11	; 0x0b
    19f4:	88 2f       	mov	r24, r24
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	81 70       	andi	r24, 0x01	; 1
    19fa:	90 70       	andi	r25, 0x00	; 0
    19fc:	88 23       	and	r24, r24
    19fe:	41 f0       	breq	.+16     	; 0x1a10 <proc_reset_watchdog+0x3c>
    1a00:	e9 81       	ldd	r30, Y+1	; 0x01
    1a02:	fa 81       	ldd	r31, Y+2	; 0x02
    1a04:	86 8d       	ldd	r24, Z+30	; 0x1e
    1a06:	97 8d       	ldd	r25, Z+31	; 0x1f
    1a08:	e9 81       	ldd	r30, Y+1	; 0x01
    1a0a:	fa 81       	ldd	r31, Y+2	; 0x02
    1a0c:	91 a3       	std	Z+33, r25	; 0x21
    1a0e:	80 a3       	std	Z+32, r24	; 0x20
#ifdef CONFIG_MP
    spin_lock(&proc->lock);
    _exit_crit_sec(current_core);
#else
    exit_crit_sec();
    1a10:	0e 94 38 06 	call	0xc70	; 0xc70 <exit_crit_sec>
#endif
}
    1a14:	0f 90       	pop	r0
    1a16:	0f 90       	pop	r0
    1a18:	cf 91       	pop	r28
    1a1a:	df 91       	pop	r29
    1a1c:	08 95       	ret

00001a1e <_proc_flag_stop_isr>:

void _proc_flag_stop_isr( flag_t mask )
{
    1a1e:	df 93       	push	r29
    1a20:	cf 93       	push	r28
    1a22:	00 d0       	rcall	.+0      	; 0x1a24 <_proc_flag_stop_isr+0x6>
    1a24:	0f 92       	push	r0
    1a26:	cd b7       	in	r28, 0x3d	; 61
    1a28:	de b7       	in	r29, 0x3e	; 62
    1a2a:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = current_proc();
    1a2c:	0e 94 cc 00 	call	0x198	; 0x198 <current_proc>
    1a30:	9a 83       	std	Y+2, r25	; 0x02
    1a32:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif //CONFIG_MP
    proc->flags &= mask;
    1a34:	e9 81       	ldd	r30, Y+1	; 0x01
    1a36:	fa 81       	ldd	r31, Y+2	; 0x02
    1a38:	93 85       	ldd	r25, Z+11	; 0x0b
    1a3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3c:	89 23       	and	r24, r25
    1a3e:	e9 81       	ldd	r30, Y+1	; 0x01
    1a40:	fa 81       	ldd	r31, Y+2	; 0x02
    1a42:	83 87       	std	Z+11, r24	; 0x0b
    if(  ( proc->flags & PROC_FLG_PRE_END ) && (!(proc->flags & PROC_FLG_HOLD))  )
    1a44:	e9 81       	ldd	r30, Y+1	; 0x01
    1a46:	fa 81       	ldd	r31, Y+2	; 0x02
    1a48:	83 85       	ldd	r24, Z+11	; 0x0b
    1a4a:	88 2f       	mov	r24, r24
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	80 72       	andi	r24, 0x20	; 32
    1a50:	90 70       	andi	r25, 0x00	; 0
    1a52:	00 97       	sbiw	r24, 0x00	; 0
    1a54:	a1 f0       	breq	.+40     	; 0x1a7e <_proc_flag_stop_isr+0x60>
    1a56:	e9 81       	ldd	r30, Y+1	; 0x01
    1a58:	fa 81       	ldd	r31, Y+2	; 0x02
    1a5a:	83 85       	ldd	r24, Z+11	; 0x0b
    1a5c:	88 2f       	mov	r24, r24
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	84 70       	andi	r24, 0x04	; 4
    1a62:	90 70       	andi	r25, 0x00	; 0
    1a64:	00 97       	sbiw	r24, 0x00	; 0
    1a66:	59 f4       	brne	.+22     	; 0x1a7e <_proc_flag_stop_isr+0x60>
    {
        proc->flags &= ~PROC_FLG_PRE_END;
    1a68:	e9 81       	ldd	r30, Y+1	; 0x01
    1a6a:	fa 81       	ldd	r31, Y+2	; 0x02
    1a6c:	83 85       	ldd	r24, Z+11	; 0x0b
    1a6e:	8f 7d       	andi	r24, 0xDF	; 223
    1a70:	e9 81       	ldd	r30, Y+1	; 0x01
    1a72:	fa 81       	ldd	r31, Y+2	; 0x02
    1a74:	83 87       	std	Z+11, r24	; 0x0b
        _proc_stop( proc );
    1a76:	89 81       	ldd	r24, Y+1	; 0x01
    1a78:	9a 81       	ldd	r25, Y+2	; 0x02
    1a7a:	0e 94 a1 0c 	call	0x1942	; 0x1942 <_proc_stop>
    }
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif //CONFIG_MP
}
    1a7e:	0f 90       	pop	r0
    1a80:	0f 90       	pop	r0
    1a82:	0f 90       	pop	r0
    1a84:	cf 91       	pop	r28
    1a86:	df 91       	pop	r29
    1a88:	08 95       	ret

00001a8a <_proc_lres_inc>:
    proc_t * proc
#ifdef CONFIG_USE_HIGHEST_LOCKER
    ,prio_t prio
#endif
)
{
    1a8a:	df 93       	push	r29
    1a8c:	cf 93       	push	r28
    1a8e:	00 d0       	rcall	.+0      	; 0x1a90 <_proc_lres_inc+0x6>
    1a90:	0f 92       	push	r0
    1a92:	cd b7       	in	r28, 0x3d	; 61
    1a94:	de b7       	in	r29, 0x3e	; 62
    1a96:	9a 83       	std	Y+2, r25	; 0x02
    1a98:	89 83       	std	Y+1, r24	; 0x01
    1a9a:	6b 83       	std	Y+3, r22	; 0x03
#ifdef CONFIG_USE_HIGHEST_LOCKER
    if( proc->lres.index == (index_t)0 )proc->flags |= PROC_FLG_HOLD;
    1a9c:	e9 81       	ldd	r30, Y+1	; 0x01
    1a9e:	fa 81       	ldd	r31, Y+2	; 0x02
    1aa0:	85 8d       	ldd	r24, Z+29	; 0x1d
    1aa2:	88 23       	and	r24, r24
    1aa4:	39 f4       	brne	.+14     	; 0x1ab4 <_proc_lres_inc+0x2a>
    1aa6:	e9 81       	ldd	r30, Y+1	; 0x01
    1aa8:	fa 81       	ldd	r31, Y+2	; 0x02
    1aaa:	83 85       	ldd	r24, Z+11	; 0x0b
    1aac:	84 60       	ori	r24, 0x04	; 4
    1aae:	e9 81       	ldd	r30, Y+1	; 0x01
    1ab0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ab2:	83 87       	std	Z+11, r24	; 0x0b
    pcounter_inc( &proc->lres, prio );
    1ab4:	89 81       	ldd	r24, Y+1	; 0x01
    1ab6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab8:	0d 96       	adiw	r24, 0x0d	; 13
    1aba:	6b 81       	ldd	r22, Y+3	; 0x03
    1abc:	0e 94 04 0b 	call	0x1608	; 0x1608 <pcounter_inc>
#else
    if( proc->lres == (count_t)0 )proc->flags |= PROC_FLG_HOLD;
    proc->lres++;
#endif
}
    1ac0:	0f 90       	pop	r0
    1ac2:	0f 90       	pop	r0
    1ac4:	0f 90       	pop	r0
    1ac6:	cf 91       	pop	r28
    1ac8:	df 91       	pop	r29
    1aca:	08 95       	ret

00001acc <_proc_lres_dec>:
    proc_t * proc
#ifdef CONFIG_USE_HIGHEST_LOCKER
    ,prio_t prio
#endif
)
{
    1acc:	df 93       	push	r29
    1ace:	cf 93       	push	r28
    1ad0:	00 d0       	rcall	.+0      	; 0x1ad2 <_proc_lres_dec+0x6>
    1ad2:	0f 92       	push	r0
    1ad4:	cd b7       	in	r28, 0x3d	; 61
    1ad6:	de b7       	in	r29, 0x3e	; 62
    1ad8:	9a 83       	std	Y+2, r25	; 0x02
    1ada:	89 83       	std	Y+1, r24	; 0x01
    1adc:	6b 83       	std	Y+3, r22	; 0x03
#ifdef CONFIG_USE_HIGHEST_LOCKER
    pcounter_dec( &proc->lres, prio );
    1ade:	89 81       	ldd	r24, Y+1	; 0x01
    1ae0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae2:	0d 96       	adiw	r24, 0x0d	; 13
    1ae4:	6b 81       	ldd	r22, Y+3	; 0x03
    1ae6:	0e 94 40 0b 	call	0x1680	; 0x1680 <pcounter_dec>
    if( proc->lres.index == (index_t)0 )proc->flags &= ~PROC_FLG_HOLD;
    1aea:	e9 81       	ldd	r30, Y+1	; 0x01
    1aec:	fa 81       	ldd	r31, Y+2	; 0x02
    1aee:	85 8d       	ldd	r24, Z+29	; 0x1d
    1af0:	88 23       	and	r24, r24
    1af2:	39 f4       	brne	.+14     	; 0x1b02 <_proc_lres_dec+0x36>
    1af4:	e9 81       	ldd	r30, Y+1	; 0x01
    1af6:	fa 81       	ldd	r31, Y+2	; 0x02
    1af8:	83 85       	ldd	r24, Z+11	; 0x0b
    1afa:	8b 7f       	andi	r24, 0xFB	; 251
    1afc:	e9 81       	ldd	r30, Y+1	; 0x01
    1afe:	fa 81       	ldd	r31, Y+2	; 0x02
    1b00:	83 87       	std	Z+11, r24	; 0x0b
#else
    if( proc->lres!= (count_t)0 )proc->lres--;
    if( proc->lres == (count_t)0 )proc->flags &= ~PROC_FLG_HOLD;
#endif
}
    1b02:	0f 90       	pop	r0
    1b04:	0f 90       	pop	r0
    1b06:	0f 90       	pop	r0
    1b08:	cf 91       	pop	r28
    1b0a:	df 91       	pop	r29
    1b0c:	08 95       	ret

00001b0e <_proc_prio_control_stoped>:
#ifdef CONFIG_USE_HIGHEST_LOCKER
// Будет использоваться в mutex-ах и т.п., процесс должен сам вызывать эту функцию, при этом он должен быть вырезан из списка выполняющихся.
void _proc_prio_control_stoped( proc_t * proc )
{
    1b0e:	df 93       	push	r29
    1b10:	cf 93       	push	r28
    1b12:	cd b7       	in	r28, 0x3d	; 61
    1b14:	de b7       	in	r29, 0x3e	; 62
    1b16:	27 97       	sbiw	r28, 0x07	; 7
    1b18:	0f b6       	in	r0, 0x3f	; 63
    1b1a:	f8 94       	cli
    1b1c:	de bf       	out	0x3e, r29	; 62
    1b1e:	0f be       	out	0x3f, r0	; 63
    1b20:	cd bf       	out	0x3d, r28	; 61
    1b22:	9b 83       	std	Y+3, r25	; 0x03
    1b24:	8a 83       	std	Y+2, r24	; 0x02
    if(proc->lres.index != (index_t)0)
    1b26:	ea 81       	ldd	r30, Y+2	; 0x02
    1b28:	fb 81       	ldd	r31, Y+3	; 0x03
    1b2a:	85 8d       	ldd	r24, Z+29	; 0x1d
    1b2c:	88 23       	and	r24, r24
    1b2e:	e9 f0       	breq	.+58     	; 0x1b6a <_proc_prio_control_stoped+0x5c>
    {
        prio_t locker_prio = index_search( proc->lres.index );
    1b30:	ea 81       	ldd	r30, Y+2	; 0x02
    1b32:	fb 81       	ldd	r31, Y+3	; 0x03
    1b34:	85 8d       	ldd	r24, Z+29	; 0x1d
    1b36:	0e 94 fd 08 	call	0x11fa	; 0x11fa <index_search>
    1b3a:	89 83       	std	Y+1, r24	; 0x01
        ((gitem_t *)proc)->group->prio = ( locker_prio < proc->base_prio )?locker_prio:proc->base_prio;
    1b3c:	ea 81       	ldd	r30, Y+2	; 0x02
    1b3e:	fb 81       	ldd	r31, Y+3	; 0x03
    1b40:	84 81       	ldd	r24, Z+4	; 0x04
    1b42:	95 81       	ldd	r25, Z+5	; 0x05
    1b44:	9e 83       	std	Y+6, r25	; 0x06
    1b46:	8d 83       	std	Y+5, r24	; 0x05
    1b48:	ea 81       	ldd	r30, Y+2	; 0x02
    1b4a:	fb 81       	ldd	r31, Y+3	; 0x03
    1b4c:	84 85       	ldd	r24, Z+12	; 0x0c
    1b4e:	99 81       	ldd	r25, Y+1	; 0x01
    1b50:	9f 83       	std	Y+7, r25	; 0x07
    1b52:	8c 83       	std	Y+4, r24	; 0x04
    1b54:	ec 81       	ldd	r30, Y+4	; 0x04
    1b56:	ff 81       	ldd	r31, Y+7	; 0x07
    1b58:	fe 17       	cp	r31, r30
    1b5a:	10 f4       	brcc	.+4      	; 0x1b60 <_proc_prio_control_stoped+0x52>
    1b5c:	8f 81       	ldd	r24, Y+7	; 0x07
    1b5e:	8c 83       	std	Y+4, r24	; 0x04
    1b60:	8c 81       	ldd	r24, Y+4	; 0x04
    1b62:	ed 81       	ldd	r30, Y+5	; 0x05
    1b64:	fe 81       	ldd	r31, Y+6	; 0x06
    1b66:	82 83       	std	Z+2, r24	; 0x02
    1b68:	0a c0       	rjmp	.+20     	; 0x1b7e <_proc_prio_control_stoped+0x70>
    }
    else
    {
        ((gitem_t *)proc)->group->prio = proc->base_prio;
    1b6a:	ea 81       	ldd	r30, Y+2	; 0x02
    1b6c:	fb 81       	ldd	r31, Y+3	; 0x03
    1b6e:	a4 81       	ldd	r26, Z+4	; 0x04
    1b70:	b5 81       	ldd	r27, Z+5	; 0x05
    1b72:	ea 81       	ldd	r30, Y+2	; 0x02
    1b74:	fb 81       	ldd	r31, Y+3	; 0x03
    1b76:	84 85       	ldd	r24, Z+12	; 0x0c
    1b78:	12 96       	adiw	r26, 0x02	; 2
    1b7a:	8c 93       	st	X, r24
    1b7c:	12 97       	sbiw	r26, 0x02	; 2
    }
}
    1b7e:	27 96       	adiw	r28, 0x07	; 7
    1b80:	0f b6       	in	r0, 0x3f	; 63
    1b82:	f8 94       	cli
    1b84:	de bf       	out	0x3e, r29	; 62
    1b86:	0f be       	out	0x3f, r0	; 63
    1b88:	cd bf       	out	0x3d, r28	; 61
    1b8a:	cf 91       	pop	r28
    1b8c:	df 91       	pop	r29
    1b8e:	08 95       	ret

00001b90 <_proc_prio_control_running>:
void _proc_prio_control_running( proc_t * proc )
{
    1b90:	df 93       	push	r29
    1b92:	cf 93       	push	r28
    1b94:	00 d0       	rcall	.+0      	; 0x1b96 <_proc_prio_control_running+0x6>
    1b96:	00 d0       	rcall	.+0      	; 0x1b98 <_proc_prio_control_running+0x8>
    1b98:	00 d0       	rcall	.+0      	; 0x1b9a <_proc_prio_control_running+0xa>
    1b9a:	cd b7       	in	r28, 0x3d	; 61
    1b9c:	de b7       	in	r29, 0x3e	; 62
    1b9e:	9c 83       	std	Y+4, r25	; 0x04
    1ba0:	8b 83       	std	Y+3, r24	; 0x03
    prio_t new_prio;
    if(proc->lres.index != (index_t)0)
    1ba2:	eb 81       	ldd	r30, Y+3	; 0x03
    1ba4:	fc 81       	ldd	r31, Y+4	; 0x04
    1ba6:	85 8d       	ldd	r24, Z+29	; 0x1d
    1ba8:	88 23       	and	r24, r24
    1baa:	a9 f0       	breq	.+42     	; 0x1bd6 <_proc_prio_control_running+0x46>
    {
        prio_t locker_prio = index_search( proc->lres.index );
    1bac:	eb 81       	ldd	r30, Y+3	; 0x03
    1bae:	fc 81       	ldd	r31, Y+4	; 0x04
    1bb0:	85 8d       	ldd	r24, Z+29	; 0x1d
    1bb2:	0e 94 fd 08 	call	0x11fa	; 0x11fa <index_search>
    1bb6:	89 83       	std	Y+1, r24	; 0x01
        new_prio = ( locker_prio < proc->base_prio )?locker_prio:proc->base_prio;
    1bb8:	eb 81       	ldd	r30, Y+3	; 0x03
    1bba:	fc 81       	ldd	r31, Y+4	; 0x04
    1bbc:	84 85       	ldd	r24, Z+12	; 0x0c
    1bbe:	99 81       	ldd	r25, Y+1	; 0x01
    1bc0:	9e 83       	std	Y+6, r25	; 0x06
    1bc2:	8d 83       	std	Y+5, r24	; 0x05
    1bc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc6:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc8:	98 17       	cp	r25, r24
    1bca:	10 f4       	brcc	.+4      	; 0x1bd0 <_proc_prio_control_running+0x40>
    1bcc:	8e 81       	ldd	r24, Y+6	; 0x06
    1bce:	8d 83       	std	Y+5, r24	; 0x05
    1bd0:	9d 81       	ldd	r25, Y+5	; 0x05
    1bd2:	9a 83       	std	Y+2, r25	; 0x02
    1bd4:	04 c0       	rjmp	.+8      	; 0x1bde <_proc_prio_control_running+0x4e>
    }
    else
    {
        new_prio = proc->base_prio;
    1bd6:	eb 81       	ldd	r30, Y+3	; 0x03
    1bd8:	fc 81       	ldd	r31, Y+4	; 0x04
    1bda:	84 85       	ldd	r24, Z+12	; 0x0c
    1bdc:	8a 83       	std	Y+2, r24	; 0x02
    }
    if(((gitem_t *)proc)->group->prio != new_prio)
    1bde:	eb 81       	ldd	r30, Y+3	; 0x03
    1be0:	fc 81       	ldd	r31, Y+4	; 0x04
    1be2:	04 80       	ldd	r0, Z+4	; 0x04
    1be4:	f5 81       	ldd	r31, Z+5	; 0x05
    1be6:	e0 2d       	mov	r30, r0
    1be8:	92 81       	ldd	r25, Z+2	; 0x02
    1bea:	8a 81       	ldd	r24, Y+2	; 0x02
    1bec:	98 17       	cp	r25, r24
    1bee:	b1 f0       	breq	.+44     	; 0x1c1c <_proc_prio_control_running+0x8c>
    {
        _proc_stop_( proc );
    1bf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf4:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <gitem_cut>
        ((gitem_t *)proc)->group->prio = new_prio;
    1bf8:	eb 81       	ldd	r30, Y+3	; 0x03
    1bfa:	fc 81       	ldd	r31, Y+4	; 0x04
    1bfc:	04 80       	ldd	r0, Z+4	; 0x04
    1bfe:	f5 81       	ldd	r31, Z+5	; 0x05
    1c00:	e0 2d       	mov	r30, r0
    1c02:	8a 81       	ldd	r24, Y+2	; 0x02
    1c04:	82 83       	std	Z+2, r24	; 0x02
#ifdef CONFIG_MP
        spin_lock( &kernel.stat_lock );
        stat_inc( proc, (stat_t *)kernel.stat+proc->core_id );
        spin_unlock( &kernel.stat_lock );
#endif
        _proc_run_( proc );
    1c06:	8b 81       	ldd	r24, Y+3	; 0x03
    1c08:	9c 81       	ldd	r25, Y+4	; 0x04
    1c0a:	20 91 a0 01 	lds	r18, 0x01A0
    1c0e:	30 91 a1 01 	lds	r19, 0x01A1
    1c12:	b9 01       	movw	r22, r18
    1c14:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <gitem_insert>
#ifdef CONFIG_MP
        resched(proc->core_id);
#else
        resched();
    1c18:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
#endif
    }
}
    1c1c:	26 96       	adiw	r28, 0x06	; 6
    1c1e:	0f b6       	in	r0, 0x3f	; 63
    1c20:	f8 94       	cli
    1c22:	de bf       	out	0x3e, r29	; 62
    1c24:	0f be       	out	0x3f, r0	; 63
    1c26:	cd bf       	out	0x3d, r28	; 61
    1c28:	cf 91       	pop	r28
    1c2a:	df 91       	pop	r29
    1c2c:	08 95       	ret

00001c2e <sched_init>:
*****************************************************************************************/
#include "../include/bugurt.h"
///========================================================================================
// Инициация
void sched_init(sched_t * sched, proc_t * idle)
{
    1c2e:	df 93       	push	r29
    1c30:	cf 93       	push	r28
    1c32:	00 d0       	rcall	.+0      	; 0x1c34 <sched_init+0x6>
    1c34:	00 d0       	rcall	.+0      	; 0x1c36 <sched_init+0x8>
    1c36:	cd b7       	in	r28, 0x3d	; 61
    1c38:	de b7       	in	r29, 0x3e	; 62
    1c3a:	9a 83       	std	Y+2, r25	; 0x02
    1c3c:	89 83       	std	Y+1, r24	; 0x01
    1c3e:	7c 83       	std	Y+4, r23	; 0x04
    1c40:	6b 83       	std	Y+3, r22	; 0x03
#ifdef CONFIG_MP
    lock_t * sched_lock = &sched->lock;
    spin_init( sched_lock );
    spin_lock( sched_lock );
#endif // CONFIG_MP
    sched->ready = (xlist_t *)sched->plst;
    1c42:	89 81       	ldd	r24, Y+1	; 0x01
    1c44:	9a 81       	ldd	r25, Y+2	; 0x02
    1c46:	06 96       	adiw	r24, 0x06	; 6
    1c48:	e9 81       	ldd	r30, Y+1	; 0x01
    1c4a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c4c:	93 83       	std	Z+3, r25	; 0x03
    1c4e:	82 83       	std	Z+2, r24	; 0x02
    xlist_init( sched->ready );
    1c50:	e9 81       	ldd	r30, Y+1	; 0x01
    1c52:	fa 81       	ldd	r31, Y+2	; 0x02
    1c54:	82 81       	ldd	r24, Z+2	; 0x02
    1c56:	93 81       	ldd	r25, Z+3	; 0x03
    1c58:	0e 94 ef 10 	call	0x21de	; 0x21de <xlist_init>
    sched->expired = (xlist_t *)sched->plst + 1;
    1c5c:	89 81       	ldd	r24, Y+1	; 0x01
    1c5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c60:	47 96       	adiw	r24, 0x17	; 23
    1c62:	e9 81       	ldd	r30, Y+1	; 0x01
    1c64:	fa 81       	ldd	r31, Y+2	; 0x02
    1c66:	95 83       	std	Z+5, r25	; 0x05
    1c68:	84 83       	std	Z+4, r24	; 0x04
    xlist_init( sched->expired );
    1c6a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c6c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c6e:	84 81       	ldd	r24, Z+4	; 0x04
    1c70:	95 81       	ldd	r25, Z+5	; 0x05
    1c72:	0e 94 ef 10 	call	0x21de	; 0x21de <xlist_init>
    gitem_insert( (gitem_t *)idle, sched->ready );
    1c76:	8b 81       	ldd	r24, Y+3	; 0x03
    1c78:	9c 81       	ldd	r25, Y+4	; 0x04
    1c7a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c7c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c7e:	22 81       	ldd	r18, Z+2	; 0x02
    1c80:	33 81       	ldd	r19, Z+3	; 0x03
    1c82:	b9 01       	movw	r22, r18
    1c84:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <gitem_insert>
    sched->current_proc = idle;
    1c88:	e9 81       	ldd	r30, Y+1	; 0x01
    1c8a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c90:	91 83       	std	Z+1, r25	; 0x01
    1c92:	80 83       	st	Z, r24
    sched->nested_crit_sec = (count_t)0;//вообще это выполняется при запрещенных прерываниях, но не известно, на этом ли процессоре
    1c94:	e9 81       	ldd	r30, Y+1	; 0x01
    1c96:	fa 81       	ldd	r31, Y+2	; 0x02
    1c98:	11 a6       	std	Z+41, r1	; 0x29
    1c9a:	10 a6       	std	Z+40, r1	; 0x28
#ifdef CONFIG_MP
    spin_unlock( sched_lock );
    stat_inc( idle, (stat_t *)kernel.stat + idle->core_id );
#endif // CONFIG_MP
}
    1c9c:	0f 90       	pop	r0
    1c9e:	0f 90       	pop	r0
    1ca0:	0f 90       	pop	r0
    1ca2:	0f 90       	pop	r0
    1ca4:	cf 91       	pop	r28
    1ca6:	df 91       	pop	r29
    1ca8:	08 95       	ret

00001caa <_sched_list_switch>:
static void _sched_list_switch( sched_t * sched )
{
    1caa:	df 93       	push	r29
    1cac:	cf 93       	push	r28
    1cae:	00 d0       	rcall	.+0      	; 0x1cb0 <_sched_list_switch+0x6>
    1cb0:	00 d0       	rcall	.+0      	; 0x1cb2 <_sched_list_switch+0x8>
    1cb2:	cd b7       	in	r28, 0x3d	; 61
    1cb4:	de b7       	in	r29, 0x3e	; 62
    1cb6:	9c 83       	std	Y+4, r25	; 0x04
    1cb8:	8b 83       	std	Y+3, r24	; 0x03
    // Список ready опустел, переключаем списки
    if( sched->ready->index == (index_t)0 )
    1cba:	eb 81       	ldd	r30, Y+3	; 0x03
    1cbc:	fc 81       	ldd	r31, Y+4	; 0x04
    1cbe:	02 80       	ldd	r0, Z+2	; 0x02
    1cc0:	f3 81       	ldd	r31, Z+3	; 0x03
    1cc2:	e0 2d       	mov	r30, r0
    1cc4:	80 89       	ldd	r24, Z+16	; 0x10
    1cc6:	88 23       	and	r24, r24
    1cc8:	a1 f4       	brne	.+40     	; 0x1cf2 <_sched_list_switch+0x48>
    {
        xlist_t * buf = sched->ready;
    1cca:	eb 81       	ldd	r30, Y+3	; 0x03
    1ccc:	fc 81       	ldd	r31, Y+4	; 0x04
    1cce:	82 81       	ldd	r24, Z+2	; 0x02
    1cd0:	93 81       	ldd	r25, Z+3	; 0x03
    1cd2:	9a 83       	std	Y+2, r25	; 0x02
    1cd4:	89 83       	std	Y+1, r24	; 0x01
        sched->ready = sched->expired;
    1cd6:	eb 81       	ldd	r30, Y+3	; 0x03
    1cd8:	fc 81       	ldd	r31, Y+4	; 0x04
    1cda:	84 81       	ldd	r24, Z+4	; 0x04
    1cdc:	95 81       	ldd	r25, Z+5	; 0x05
    1cde:	eb 81       	ldd	r30, Y+3	; 0x03
    1ce0:	fc 81       	ldd	r31, Y+4	; 0x04
    1ce2:	93 83       	std	Z+3, r25	; 0x03
    1ce4:	82 83       	std	Z+2, r24	; 0x02
        sched->expired = buf;
    1ce6:	eb 81       	ldd	r30, Y+3	; 0x03
    1ce8:	fc 81       	ldd	r31, Y+4	; 0x04
    1cea:	89 81       	ldd	r24, Y+1	; 0x01
    1cec:	9a 81       	ldd	r25, Y+2	; 0x02
    1cee:	95 83       	std	Z+5, r25	; 0x05
    1cf0:	84 83       	std	Z+4, r24	; 0x04
    }
}
    1cf2:	0f 90       	pop	r0
    1cf4:	0f 90       	pop	r0
    1cf6:	0f 90       	pop	r0
    1cf8:	0f 90       	pop	r0
    1cfa:	cf 91       	pop	r28
    1cfc:	df 91       	pop	r29
    1cfe:	08 95       	ret

00001d00 <sched_schedule>:
2) В качестве аргумента передаем только тот объект, который управляет процессами
на исполняющем функции процессоре.
******************************************************************************************/
// Функция планирования, переключает процессы в обработчике системмного таймера
stack_t * sched_schedule( stack_t * current_sp )
{
    1d00:	df 93       	push	r29
    1d02:	cf 93       	push	r28
    1d04:	cd b7       	in	r28, 0x3d	; 61
    1d06:	de b7       	in	r29, 0x3e	; 62
    1d08:	27 97       	sbiw	r28, 0x07	; 7
    1d0a:	0f b6       	in	r0, 0x3f	; 63
    1d0c:	f8 94       	cli
    1d0e:	de bf       	out	0x3e, r29	; 62
    1d10:	0f be       	out	0x3f, r0	; 63
    1d12:	cd bf       	out	0x3d, r28	; 61
    1d14:	9f 83       	std	Y+7, r25	; 0x07
    1d16:	8e 83       	std	Y+6, r24	; 0x06
#ifdef CONFIG_MP
    sched_t * sched = (sched_t *)kernel.sched + current_core();
#else
    sched_t * sched = (sched_t *)&kernel.sched;
    1d18:	8e e9       	ldi	r24, 0x9E	; 158
    1d1a:	91 e0       	ldi	r25, 0x01	; 1
    1d1c:	9d 83       	std	Y+5, r25	; 0x05
    1d1e:	8c 83       	std	Y+4, r24	; 0x04
#endif // CONFIG_MP
    // Меняем только с локального процессора, блокировку sched->lock можно не захватывать!
    proc_t * current_proc = sched->current_proc;
    1d20:	ec 81       	ldd	r30, Y+4	; 0x04
    1d22:	fd 81       	ldd	r31, Y+5	; 0x05
    1d24:	80 81       	ld	r24, Z
    1d26:	91 81       	ldd	r25, Z+1	; 0x01
    1d28:	9b 83       	std	Y+3, r25	; 0x03
    1d2a:	8a 83       	std	Y+2, r24	; 0x02
#ifdef CONFIG_MP
    // А вот эту блокировку обязательно надо захватить!
    spin_lock( &current_proc->lock );
#endif // CONFIG_MP
    // Сохранение указателя стека
    current_proc->spointer = current_sp;
    1d2c:	ea 81       	ldd	r30, Y+2	; 0x02
    1d2e:	fb 81       	ldd	r31, Y+3	; 0x03
    1d30:	8e 81       	ldd	r24, Y+6	; 0x06
    1d32:	9f 81       	ldd	r25, Y+7	; 0x07
    1d34:	95 a7       	std	Z+45, r25	; 0x2d
    1d36:	84 a7       	std	Z+44, r24	; 0x2c
    // Хук "сохранение контекста"
    if( current_proc->sv_hook )current_proc->sv_hook( current_proc->arg );
    1d38:	ea 81       	ldd	r30, Y+2	; 0x02
    1d3a:	fb 81       	ldd	r31, Y+3	; 0x03
    1d3c:	84 a1       	ldd	r24, Z+36	; 0x24
    1d3e:	95 a1       	ldd	r25, Z+37	; 0x25
    1d40:	00 97       	sbiw	r24, 0x00	; 0
    1d42:	51 f0       	breq	.+20     	; 0x1d58 <sched_schedule+0x58>
    1d44:	ea 81       	ldd	r30, Y+2	; 0x02
    1d46:	fb 81       	ldd	r31, Y+3	; 0x03
    1d48:	24 a1       	ldd	r18, Z+36	; 0x24
    1d4a:	35 a1       	ldd	r19, Z+37	; 0x25
    1d4c:	ea 81       	ldd	r30, Y+2	; 0x02
    1d4e:	fb 81       	ldd	r31, Y+3	; 0x03
    1d50:	80 a5       	ldd	r24, Z+40	; 0x28
    1d52:	91 a5       	ldd	r25, Z+41	; 0x29
    1d54:	f9 01       	movw	r30, r18
    1d56:	09 95       	icall
    // Проверяем, что процесс находится в списке ready
    if( (xlist_t *)((gitem_t *)current_proc)->group->link == sched->ready )
    1d58:	ea 81       	ldd	r30, Y+2	; 0x02
    1d5a:	fb 81       	ldd	r31, Y+3	; 0x03
    1d5c:	04 80       	ldd	r0, Z+4	; 0x04
    1d5e:	f5 81       	ldd	r31, Z+5	; 0x05
    1d60:	e0 2d       	mov	r30, r0
    1d62:	80 81       	ld	r24, Z
    1d64:	91 81       	ldd	r25, Z+1	; 0x01
    1d66:	9c 01       	movw	r18, r24
    1d68:	ec 81       	ldd	r30, Y+4	; 0x04
    1d6a:	fd 81       	ldd	r31, Y+5	; 0x05
    1d6c:	82 81       	ldd	r24, Z+2	; 0x02
    1d6e:	93 81       	ldd	r25, Z+3	; 0x03
    1d70:	28 17       	cp	r18, r24
    1d72:	39 07       	cpc	r19, r25
    1d74:	09 f0       	breq	.+2      	; 0x1d78 <sched_schedule+0x78>
    1d76:	4d c0       	rjmp	.+154    	; 0x1e12 <sched_schedule+0x112>
    {
        // Переключаем cписок на следующий за текущим процесс
#ifdef CONFIG_MP
        spin_lock( &sched->lock );
#endif // CONFIG_MP
        xlist_switch( sched->ready, ((gitem_t *)current_proc)->group->prio );
    1d78:	ec 81       	ldd	r30, Y+4	; 0x04
    1d7a:	fd 81       	ldd	r31, Y+5	; 0x05
    1d7c:	82 81       	ldd	r24, Z+2	; 0x02
    1d7e:	93 81       	ldd	r25, Z+3	; 0x03
    1d80:	ea 81       	ldd	r30, Y+2	; 0x02
    1d82:	fb 81       	ldd	r31, Y+3	; 0x03
    1d84:	04 80       	ldd	r0, Z+4	; 0x04
    1d86:	f5 81       	ldd	r31, Z+5	; 0x05
    1d88:	e0 2d       	mov	r30, r0
    1d8a:	22 81       	ldd	r18, Z+2	; 0x02
    1d8c:	62 2f       	mov	r22, r18
    1d8e:	0e 94 45 11 	call	0x228a	; 0x228a <xlist_switch>
#ifdef CONFIG_MP
        spin_unlock( &sched->lock );
#endif // CONFIG_MP
        //Проверяем, не истек ли квант времени процесса
        if( current_proc->timer > (timer_t)1 )current_proc->timer--;// Не истек, уменьшаем таймер
    1d92:	ea 81       	ldd	r30, Y+2	; 0x02
    1d94:	fb 81       	ldd	r31, Y+3	; 0x03
    1d96:	80 a1       	ldd	r24, Z+32	; 0x20
    1d98:	91 a1       	ldd	r25, Z+33	; 0x21
    1d9a:	82 30       	cpi	r24, 0x02	; 2
    1d9c:	91 05       	cpc	r25, r1
    1d9e:	50 f0       	brcs	.+20     	; 0x1db4 <sched_schedule+0xb4>
    1da0:	ea 81       	ldd	r30, Y+2	; 0x02
    1da2:	fb 81       	ldd	r31, Y+3	; 0x03
    1da4:	80 a1       	ldd	r24, Z+32	; 0x20
    1da6:	91 a1       	ldd	r25, Z+33	; 0x21
    1da8:	01 97       	sbiw	r24, 0x01	; 1
    1daa:	ea 81       	ldd	r30, Y+2	; 0x02
    1dac:	fb 81       	ldd	r31, Y+3	; 0x03
    1dae:	91 a3       	std	Z+33, r25	; 0x21
    1db0:	80 a3       	std	Z+32, r24	; 0x20
    1db2:	2f c0       	rjmp	.+94     	; 0x1e12 <sched_schedule+0x112>
        {
            // Истек, вырезаем процесс из списка
#ifdef CONFIG_MP
            spin_lock( &sched->lock );
#endif // CONFIG_MP
            gitem_fast_cut( (gitem_t *)current_proc );
    1db4:	8a 81       	ldd	r24, Y+2	; 0x02
    1db6:	9b 81       	ldd	r25, Y+3	; 0x03
    1db8:	0e 94 53 07 	call	0xea6	; 0xea6 <gitem_fast_cut>
            // Обновили статистику после удаления процесса из списка ready
            stat_dec( current_proc, (stat_t *)kernel.stat + current_proc->core_id );
#endif // CONFIG_USE_ALB
#endif // CONFIG_MP
            // А что за процесс собственно?
            flag_t flags = current_proc->flags;
    1dbc:	ea 81       	ldd	r30, Y+2	; 0x02
    1dbe:	fb 81       	ldd	r31, Y+3	; 0x03
    1dc0:	83 85       	ldd	r24, Z+11	; 0x0b
    1dc2:	89 83       	std	Y+1, r24	; 0x01
            if(
                (!(flags & PROC_FLG_RT))
    1dc4:	89 81       	ldd	r24, Y+1	; 0x01
    1dc6:	88 2f       	mov	r24, r24
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	81 70       	andi	r24, 0x01	; 1
    1dcc:	90 70       	andi	r25, 0x00	; 0
            stat_dec( current_proc, (stat_t *)kernel.stat + current_proc->core_id );
#endif // CONFIG_USE_ALB
#endif // CONFIG_MP
            // А что за процесс собственно?
            flag_t flags = current_proc->flags;
            if(
    1dce:	00 97       	sbiw	r24, 0x00	; 0
    1dd0:	91 f4       	brne	.+36     	; 0x1df6 <sched_schedule+0xf6>
                ||(flags & PROC_FLG_HOLD)
#endif // CONFIG_HARD_RT
            )
            {
                //Процесс общего назначения, либо он удерживает общий ресурс, сбрасываем таймер и переносим в очередь expired
                current_proc->timer = current_proc->time_quant;
    1dd2:	ea 81       	ldd	r30, Y+2	; 0x02
    1dd4:	fb 81       	ldd	r31, Y+3	; 0x03
    1dd6:	86 8d       	ldd	r24, Z+30	; 0x1e
    1dd8:	97 8d       	ldd	r25, Z+31	; 0x1f
    1dda:	ea 81       	ldd	r30, Y+2	; 0x02
    1ddc:	fb 81       	ldd	r31, Y+3	; 0x03
    1dde:	91 a3       	std	Z+33, r25	; 0x21
    1de0:	80 a3       	std	Z+32, r24	; 0x20
#else // CONFIG_MP CONFIG_USE_ALB
                // Тупо переносим процесс в список expired
#ifdef CONFIG_MP
                spin_lock( &sched->lock );
#endif // CONFIG_MP
                gitem_insert( (gitem_t *)current_proc, sched->expired );
    1de2:	8a 81       	ldd	r24, Y+2	; 0x02
    1de4:	9b 81       	ldd	r25, Y+3	; 0x03
    1de6:	ec 81       	ldd	r30, Y+4	; 0x04
    1de8:	fd 81       	ldd	r31, Y+5	; 0x05
    1dea:	24 81       	ldd	r18, Z+4	; 0x04
    1dec:	35 81       	ldd	r19, Z+5	; 0x05
    1dee:	b9 01       	movw	r22, r18
    1df0:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <gitem_insert>
    1df4:	0e c0       	rjmp	.+28     	; 0x1e12 <sched_schedule+0x112>
                spin_lock( &kernel.stat_lock );
                stat_dec( current_proc, (stat_t *)kernel.stat + current_proc->core_id );
#endif // nCONFIG_USE_ALB
                spin_unlock( &kernel.stat_lock );
#endif // CONFIG_MP
                ((gitem_t *)current_proc)->group->link = (void *)0;// Просто вырезали из списка, как в gitem_cut
    1df6:	ea 81       	ldd	r30, Y+2	; 0x02
    1df8:	fb 81       	ldd	r31, Y+3	; 0x03
    1dfa:	04 80       	ldd	r0, Z+4	; 0x04
    1dfc:	f5 81       	ldd	r31, Z+5	; 0x05
    1dfe:	e0 2d       	mov	r30, r0
    1e00:	11 82       	std	Z+1, r1	; 0x01
    1e02:	10 82       	st	Z, r1
                current_proc->flags &= ~PROC_FLG_RUN;
    1e04:	ea 81       	ldd	r30, Y+2	; 0x02
    1e06:	fb 81       	ldd	r31, Y+3	; 0x03
    1e08:	83 85       	ldd	r24, Z+11	; 0x0b
    1e0a:	8d 7f       	andi	r24, 0xFD	; 253
    1e0c:	ea 81       	ldd	r30, Y+2	; 0x02
    1e0e:	fb 81       	ldd	r31, Y+3	; 0x03
    1e10:	83 87       	std	Z+11, r24	; 0x0b
#ifdef CONFIG_MP
    //Текущий процесс более не нужен, освобождаем его блокировку
    spin_unlock( &current_proc->lock );
    spin_lock( &sched->lock );
#endif // CONFIG_MP
    _sched_list_switch( sched );
    1e12:	8c 81       	ldd	r24, Y+4	; 0x04
    1e14:	9d 81       	ldd	r25, Y+5	; 0x05
    1e16:	0e 94 55 0e 	call	0x1caa	; 0x1caa <_sched_list_switch>
    // Изменять указатель будем при захваченной блокировке,
    // чтобы процессы на других процессорах не прочитали неизвестно что.
    current_proc = (proc_t *)xlist_head( sched->ready ); // Вытесняющая многозадачность же!
    1e1a:	ec 81       	ldd	r30, Y+4	; 0x04
    1e1c:	fd 81       	ldd	r31, Y+5	; 0x05
    1e1e:	82 81       	ldd	r24, Z+2	; 0x02
    1e20:	93 81       	ldd	r25, Z+3	; 0x03
    1e22:	0e 94 19 11 	call	0x2232	; 0x2232 <xlist_head>
    1e26:	9b 83       	std	Y+3, r25	; 0x03
    1e28:	8a 83       	std	Y+2, r24	; 0x02
    sched->current_proc = current_proc;
    1e2a:	ec 81       	ldd	r30, Y+4	; 0x04
    1e2c:	fd 81       	ldd	r31, Y+5	; 0x05
    1e2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e30:	9b 81       	ldd	r25, Y+3	; 0x03
    1e32:	91 83       	std	Z+1, r25	; 0x01
    1e34:	80 83       	st	Z, r24
#ifdef CONFIG_MP
    spin_unlock( &sched->lock );
    spin_lock( &current_proc->lock );
#endif // CONFIG_MP
    //Хук "восстановление контекста"
    if( current_proc->rs_hook )current_proc->rs_hook( current_proc->arg );
    1e36:	ea 81       	ldd	r30, Y+2	; 0x02
    1e38:	fb 81       	ldd	r31, Y+3	; 0x03
    1e3a:	86 a1       	ldd	r24, Z+38	; 0x26
    1e3c:	97 a1       	ldd	r25, Z+39	; 0x27
    1e3e:	00 97       	sbiw	r24, 0x00	; 0
    1e40:	51 f0       	breq	.+20     	; 0x1e56 <sched_schedule+0x156>
    1e42:	ea 81       	ldd	r30, Y+2	; 0x02
    1e44:	fb 81       	ldd	r31, Y+3	; 0x03
    1e46:	26 a1       	ldd	r18, Z+38	; 0x26
    1e48:	37 a1       	ldd	r19, Z+39	; 0x27
    1e4a:	ea 81       	ldd	r30, Y+2	; 0x02
    1e4c:	fb 81       	ldd	r31, Y+3	; 0x03
    1e4e:	80 a5       	ldd	r24, Z+40	; 0x28
    1e50:	91 a5       	ldd	r25, Z+41	; 0x29
    1e52:	f9 01       	movw	r30, r18
    1e54:	09 95       	icall
#ifdef CONFIG_MP
    stack_t * ret_sp = current_proc->spointer;
    spin_unlock( &current_proc->lock );
    return ret_sp;
#else
    return current_proc->spointer;
    1e56:	ea 81       	ldd	r30, Y+2	; 0x02
    1e58:	fb 81       	ldd	r31, Y+3	; 0x03
    1e5a:	84 a5       	ldd	r24, Z+44	; 0x2c
    1e5c:	95 a5       	ldd	r25, Z+45	; 0x2d
#endif // CONFIG_MP
}
    1e5e:	27 96       	adiw	r28, 0x07	; 7
    1e60:	0f b6       	in	r0, 0x3f	; 63
    1e62:	f8 94       	cli
    1e64:	de bf       	out	0x3e, r29	; 62
    1e66:	0f be       	out	0x3f, r0	; 63
    1e68:	cd bf       	out	0x3d, r28	; 61
    1e6a:	cf 91       	pop	r28
    1e6c:	df 91       	pop	r29
    1e6e:	08 95       	ret

00001e70 <sched_reschedule>:
//----------------------------------------------------------------------------------------
// Функция перепланирования, переключает процессы в обработчике прерывания resched
stack_t * sched_reschedule( stack_t * current_sp )
{
    1e70:	df 93       	push	r29
    1e72:	cf 93       	push	r28
    1e74:	00 d0       	rcall	.+0      	; 0x1e76 <sched_reschedule+0x6>
    1e76:	00 d0       	rcall	.+0      	; 0x1e78 <sched_reschedule+0x8>
    1e78:	00 d0       	rcall	.+0      	; 0x1e7a <sched_reschedule+0xa>
    1e7a:	cd b7       	in	r28, 0x3d	; 61
    1e7c:	de b7       	in	r29, 0x3e	; 62
    1e7e:	9e 83       	std	Y+6, r25	; 0x06
    1e80:	8d 83       	std	Y+5, r24	; 0x05
#ifdef CONFIG_MP
    sched_t * sched = (sched_t *)kernel.sched + current_core();
#else
    sched_t * sched = (sched_t *)&kernel.sched;
    1e82:	8e e9       	ldi	r24, 0x9E	; 158
    1e84:	91 e0       	ldi	r25, 0x01	; 1
    1e86:	9c 83       	std	Y+4, r25	; 0x04
    1e88:	8b 83       	std	Y+3, r24	; 0x03
#endif // CONFIG_MP
    // Меняем только с локального процессора, блокировку sched->lock можно не захватывать!
    proc_t * current_proc = sched->current_proc;
    1e8a:	eb 81       	ldd	r30, Y+3	; 0x03
    1e8c:	fc 81       	ldd	r31, Y+4	; 0x04
    1e8e:	80 81       	ld	r24, Z
    1e90:	91 81       	ldd	r25, Z+1	; 0x01
    1e92:	9a 83       	std	Y+2, r25	; 0x02
    1e94:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    // А вот эту блокировку обязательно надо захватить!
    spin_lock( &current_proc->lock );
#endif // CONFIG_MP
    // Сохранение указателя стека
    current_proc->spointer = current_sp;
    1e96:	e9 81       	ldd	r30, Y+1	; 0x01
    1e98:	fa 81       	ldd	r31, Y+2	; 0x02
    1e9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e9c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e9e:	95 a7       	std	Z+45, r25	; 0x2d
    1ea0:	84 a7       	std	Z+44, r24	; 0x2c
    // Хук "сохранение контекста"
    if( current_proc->sv_hook )current_proc->sv_hook( current_proc->arg );
    1ea2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ea4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ea6:	84 a1       	ldd	r24, Z+36	; 0x24
    1ea8:	95 a1       	ldd	r25, Z+37	; 0x25
    1eaa:	00 97       	sbiw	r24, 0x00	; 0
    1eac:	51 f0       	breq	.+20     	; 0x1ec2 <sched_reschedule+0x52>
    1eae:	e9 81       	ldd	r30, Y+1	; 0x01
    1eb0:	fa 81       	ldd	r31, Y+2	; 0x02
    1eb2:	24 a1       	ldd	r18, Z+36	; 0x24
    1eb4:	35 a1       	ldd	r19, Z+37	; 0x25
    1eb6:	e9 81       	ldd	r30, Y+1	; 0x01
    1eb8:	fa 81       	ldd	r31, Y+2	; 0x02
    1eba:	80 a5       	ldd	r24, Z+40	; 0x28
    1ebc:	91 a5       	ldd	r25, Z+41	; 0x29
    1ebe:	f9 01       	movw	r30, r18
    1ec0:	09 95       	icall
#ifdef CONFIG_MP
    spin_unlock( &current_proc->lock );
    spin_lock( &sched->lock );
#endif // CONFIG_MP
    _sched_list_switch( sched );
    1ec2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec6:	0e 94 55 0e 	call	0x1caa	; 0x1caa <_sched_list_switch>
    current_proc = (proc_t *)xlist_head( sched->ready ); // Вытесняющая многозадачность же!
    1eca:	eb 81       	ldd	r30, Y+3	; 0x03
    1ecc:	fc 81       	ldd	r31, Y+4	; 0x04
    1ece:	82 81       	ldd	r24, Z+2	; 0x02
    1ed0:	93 81       	ldd	r25, Z+3	; 0x03
    1ed2:	0e 94 19 11 	call	0x2232	; 0x2232 <xlist_head>
    1ed6:	9a 83       	std	Y+2, r25	; 0x02
    1ed8:	89 83       	std	Y+1, r24	; 0x01
    sched->current_proc = current_proc;
    1eda:	eb 81       	ldd	r30, Y+3	; 0x03
    1edc:	fc 81       	ldd	r31, Y+4	; 0x04
    1ede:	89 81       	ldd	r24, Y+1	; 0x01
    1ee0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ee2:	91 83       	std	Z+1, r25	; 0x01
    1ee4:	80 83       	st	Z, r24

#ifdef CONFIG_MP
    spin_lock(&current_proc->lock);
#endif // CONFIG_MP
    //Хук "восстановление контекста"
    if( current_proc->rs_hook )current_proc->rs_hook( current_proc->arg );
    1ee6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ee8:	fa 81       	ldd	r31, Y+2	; 0x02
    1eea:	86 a1       	ldd	r24, Z+38	; 0x26
    1eec:	97 a1       	ldd	r25, Z+39	; 0x27
    1eee:	00 97       	sbiw	r24, 0x00	; 0
    1ef0:	51 f0       	breq	.+20     	; 0x1f06 <sched_reschedule+0x96>
    1ef2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ef4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ef6:	26 a1       	ldd	r18, Z+38	; 0x26
    1ef8:	37 a1       	ldd	r19, Z+39	; 0x27
    1efa:	e9 81       	ldd	r30, Y+1	; 0x01
    1efc:	fa 81       	ldd	r31, Y+2	; 0x02
    1efe:	80 a5       	ldd	r24, Z+40	; 0x28
    1f00:	91 a5       	ldd	r25, Z+41	; 0x29
    1f02:	f9 01       	movw	r30, r18
    1f04:	09 95       	icall
#ifdef CONFIG_MP
    stack_t * ret_sp = current_proc->spointer;
    spin_unlock( &current_proc->lock );
    return ret_sp;
#else
    return current_proc->spointer;
    1f06:	e9 81       	ldd	r30, Y+1	; 0x01
    1f08:	fa 81       	ldd	r31, Y+2	; 0x02
    1f0a:	84 a5       	ldd	r24, Z+44	; 0x2c
    1f0c:	95 a5       	ldd	r25, Z+45	; 0x2d
#endif // CONFIG_MP
}
    1f0e:	26 96       	adiw	r28, 0x06	; 6
    1f10:	0f b6       	in	r0, 0x3f	; 63
    1f12:	f8 94       	cli
    1f14:	de bf       	out	0x3e, r29	; 62
    1f16:	0f be       	out	0x3f, r0	; 63
    1f18:	cd bf       	out	0x3d, r28	; 61
    1f1a:	cf 91       	pop	r28
    1f1c:	df 91       	pop	r29
    1f1e:	08 95       	ret

00001f20 <sem_init_isr>:
*****************************************************************************************/
#include "../include/bugurt.h"

// Инициализация
void sem_init_isr( sem_t * sem, count_t count )
{
    1f20:	df 93       	push	r29
    1f22:	cf 93       	push	r28
    1f24:	00 d0       	rcall	.+0      	; 0x1f26 <sem_init_isr+0x6>
    1f26:	00 d0       	rcall	.+0      	; 0x1f28 <sem_init_isr+0x8>
    1f28:	cd b7       	in	r28, 0x3d	; 61
    1f2a:	de b7       	in	r29, 0x3e	; 62
    1f2c:	9a 83       	std	Y+2, r25	; 0x02
    1f2e:	89 83       	std	Y+1, r24	; 0x01
    1f30:	7c 83       	std	Y+4, r23	; 0x04
    1f32:	6b 83       	std	Y+3, r22	; 0x03
    xlist_init( (xlist_t *)sem );
    1f34:	89 81       	ldd	r24, Y+1	; 0x01
    1f36:	9a 81       	ldd	r25, Y+2	; 0x02
    1f38:	0e 94 ef 10 	call	0x21de	; 0x21de <xlist_init>
    sem->counter = count;
    1f3c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f3e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f40:	8b 81       	ldd	r24, Y+3	; 0x03
    1f42:	9c 81       	ldd	r25, Y+4	; 0x04
    1f44:	92 8b       	std	Z+18, r25	; 0x12
    1f46:	81 8b       	std	Z+17, r24	; 0x11
}
    1f48:	0f 90       	pop	r0
    1f4a:	0f 90       	pop	r0
    1f4c:	0f 90       	pop	r0
    1f4e:	0f 90       	pop	r0
    1f50:	cf 91       	pop	r28
    1f52:	df 91       	pop	r29
    1f54:	08 95       	ret

00001f56 <_sem_lock>:

// То же, для внутреннего использования
bool_t _sem_lock( sem_t * sem )
{
    1f56:	df 93       	push	r29
    1f58:	cf 93       	push	r28
    1f5a:	00 d0       	rcall	.+0      	; 0x1f5c <_sem_lock+0x6>
    1f5c:	00 d0       	rcall	.+0      	; 0x1f5e <_sem_lock+0x8>
    1f5e:	0f 92       	push	r0
    1f60:	cd b7       	in	r28, 0x3d	; 61
    1f62:	de b7       	in	r29, 0x3e	; 62
    1f64:	9d 83       	std	Y+5, r25	; 0x05
    1f66:	8c 83       	std	Y+4, r24	; 0x04

    bool_t ret = 0;
    1f68:	1b 82       	std	Y+3, r1	; 0x03
    if( sem->counter != 0 )
    1f6a:	ec 81       	ldd	r30, Y+4	; 0x04
    1f6c:	fd 81       	ldd	r31, Y+5	; 0x05
    1f6e:	81 89       	ldd	r24, Z+17	; 0x11
    1f70:	92 89       	ldd	r25, Z+18	; 0x12
    1f72:	00 97       	sbiw	r24, 0x00	; 0
    1f74:	61 f0       	breq	.+24     	; 0x1f8e <_sem_lock+0x38>
    {
        sem->counter--;
    1f76:	ec 81       	ldd	r30, Y+4	; 0x04
    1f78:	fd 81       	ldd	r31, Y+5	; 0x05
    1f7a:	81 89       	ldd	r24, Z+17	; 0x11
    1f7c:	92 89       	ldd	r25, Z+18	; 0x12
    1f7e:	01 97       	sbiw	r24, 0x01	; 1
    1f80:	ec 81       	ldd	r30, Y+4	; 0x04
    1f82:	fd 81       	ldd	r31, Y+5	; 0x05
    1f84:	92 8b       	std	Z+18, r25	; 0x12
    1f86:	81 8b       	std	Z+17, r24	; 0x11
#ifdef CONFIG_MP
        spin_unlock( &sem->lock );// Освобождение блокировки семафора
#endif //CONFIG_MP
        ret = (bool_t)1;
    1f88:	81 e0       	ldi	r24, 0x01	; 1
    1f8a:	8b 83       	std	Y+3, r24	; 0x03
    1f8c:	16 c0       	rjmp	.+44     	; 0x1fba <_sem_lock+0x64>
    }
    else
    {
        proc_t * proc = current_proc();
    1f8e:	0e 94 cc 00 	call	0x198	; 0x198 <current_proc>
    1f92:	9a 83       	std	Y+2, r25	; 0x02
    1f94:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
        spin_lock( &proc->lock );// Захват блокировки процесса
#endif //CONFIG_MP
        proc->flags |= PROC_FLG_QUEUE;
    1f96:	e9 81       	ldd	r30, Y+1	; 0x01
    1f98:	fa 81       	ldd	r31, Y+2	; 0x02
    1f9a:	83 85       	ldd	r24, Z+11	; 0x0b
    1f9c:	88 60       	ori	r24, 0x08	; 8
    1f9e:	e9 81       	ldd	r30, Y+1	; 0x01
    1fa0:	fa 81       	ldd	r31, Y+2	; 0x02
    1fa2:	83 87       	std	Z+11, r24	; 0x0b
        _proc_stop( proc );
    1fa4:	89 81       	ldd	r24, Y+1	; 0x01
    1fa6:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa8:	0e 94 a1 0c 	call	0x1942	; 0x1942 <_proc_stop>
        gitem_insert( (gitem_t *)proc, (xlist_t *)sem );
    1fac:	89 81       	ldd	r24, Y+1	; 0x01
    1fae:	9a 81       	ldd	r25, Y+2	; 0x02
    1fb0:	2c 81       	ldd	r18, Y+4	; 0x04
    1fb2:	3d 81       	ldd	r19, Y+5	; 0x05
    1fb4:	b9 01       	movw	r22, r18
    1fb6:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <gitem_insert>
#ifdef CONFIG_MP
        spin_unlock( &proc->lock );// Освобождение блокировки процесса
#endif //CONFIG_MP
    }
    return ret;
    1fba:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1fbc:	0f 90       	pop	r0
    1fbe:	0f 90       	pop	r0
    1fc0:	0f 90       	pop	r0
    1fc2:	0f 90       	pop	r0
    1fc4:	0f 90       	pop	r0
    1fc6:	cf 91       	pop	r28
    1fc8:	df 91       	pop	r29
    1fca:	08 95       	ret

00001fcc <_sem_unlock>:

void _sem_unlock( sem_t * sem )
{
    1fcc:	df 93       	push	r29
    1fce:	cf 93       	push	r28
    1fd0:	00 d0       	rcall	.+0      	; 0x1fd2 <_sem_unlock+0x6>
    1fd2:	00 d0       	rcall	.+0      	; 0x1fd4 <_sem_unlock+0x8>
    1fd4:	cd b7       	in	r28, 0x3d	; 61
    1fd6:	de b7       	in	r29, 0x3e	; 62
    1fd8:	9c 83       	std	Y+4, r25	; 0x04
    1fda:	8b 83       	std	Y+3, r24	; 0x03
    if( ((xlist_t *)sem)->index == (index_t)0  )
    1fdc:	eb 81       	ldd	r30, Y+3	; 0x03
    1fde:	fc 81       	ldd	r31, Y+4	; 0x04
    1fe0:	80 89       	ldd	r24, Z+16	; 0x10
    1fe2:	88 23       	and	r24, r24
    1fe4:	51 f4       	brne	.+20     	; 0x1ffa <_sem_unlock+0x2e>
    {
        sem->counter++;
    1fe6:	eb 81       	ldd	r30, Y+3	; 0x03
    1fe8:	fc 81       	ldd	r31, Y+4	; 0x04
    1fea:	81 89       	ldd	r24, Z+17	; 0x11
    1fec:	92 89       	ldd	r25, Z+18	; 0x12
    1fee:	01 96       	adiw	r24, 0x01	; 1
    1ff0:	eb 81       	ldd	r30, Y+3	; 0x03
    1ff2:	fc 81       	ldd	r31, Y+4	; 0x04
    1ff4:	92 8b       	std	Z+18, r25	; 0x12
    1ff6:	81 8b       	std	Z+17, r24	; 0x11
    1ff8:	15 c0       	rjmp	.+42     	; 0x2024 <_sem_unlock+0x58>
#ifdef CONFIG_MP
        spin_unlock( &sem->lock );
#endif //CONFIG_MP
        return;
    }
    proc_t * proc = (proc_t *)xlist_head((xlist_t *)sem);
    1ffa:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ffe:	0e 94 19 11 	call	0x2232	; 0x2232 <xlist_head>
    2002:	9a 83       	std	Y+2, r25	; 0x02
    2004:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );// Захват спин-блокировки процесса
#endif //CONFIG_MP
    proc->flags &= ~PROC_FLG_QUEUE;
    2006:	e9 81       	ldd	r30, Y+1	; 0x01
    2008:	fa 81       	ldd	r31, Y+2	; 0x02
    200a:	83 85       	ldd	r24, Z+11	; 0x0b
    200c:	87 7f       	andi	r24, 0xF7	; 247
    200e:	e9 81       	ldd	r30, Y+1	; 0x01
    2010:	fa 81       	ldd	r31, Y+2	; 0x02
    2012:	83 87       	std	Z+11, r24	; 0x0b
    gitem_cut( (gitem_t *)proc );
    2014:	89 81       	ldd	r24, Y+1	; 0x01
    2016:	9a 81       	ldd	r25, Y+2	; 0x02
    2018:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <gitem_cut>
    _proc_run( proc );
    201c:	89 81       	ldd	r24, Y+1	; 0x01
    201e:	9a 81       	ldd	r25, Y+2	; 0x02
    2020:	0e 94 1a 0c 	call	0x1834	; 0x1834 <_proc_run>
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );// Освобождение спин-блокировки процесса
#endif //CONFIG_MP
}
    2024:	0f 90       	pop	r0
    2026:	0f 90       	pop	r0
    2028:	0f 90       	pop	r0
    202a:	0f 90       	pop	r0
    202c:	cf 91       	pop	r28
    202e:	df 91       	pop	r29
    2030:	08 95       	ret

00002032 <sig_init_isr>:
*****************************************************************************************/
#include "../include/bugurt.h"
//========================================================================================
// Инициация
void sig_init_isr( sig_t * sig )
{
    2032:	df 93       	push	r29
    2034:	cf 93       	push	r28
    2036:	00 d0       	rcall	.+0      	; 0x2038 <sig_init_isr+0x6>
    2038:	cd b7       	in	r28, 0x3d	; 61
    203a:	de b7       	in	r29, 0x3e	; 62
    203c:	9a 83       	std	Y+2, r25	; 0x02
    203e:	89 83       	std	Y+1, r24	; 0x01
    {
        xlist_init( (xlist_t *)sig->sig_list + i );
        stat_init( (stat_t *)sig->sig_stat + i );
    }
#else
    xlist_init( (xlist_t *)sig );
    2040:	89 81       	ldd	r24, Y+1	; 0x01
    2042:	9a 81       	ldd	r25, Y+2	; 0x02
    2044:	0e 94 ef 10 	call	0x21de	; 0x21de <xlist_init>
#endif
}
    2048:	0f 90       	pop	r0
    204a:	0f 90       	pop	r0
    204c:	cf 91       	pop	r28
    204e:	df 91       	pop	r29
    2050:	08 95       	ret

00002052 <sig_wait_stage_1_isr>:
//========================================================================================
// Это выполнится при постановке процесса в список ожидания сигнала
void sig_wait_stage_1_isr( sig_t * sig )
{
    2052:	df 93       	push	r29
    2054:	cf 93       	push	r28
    2056:	00 d0       	rcall	.+0      	; 0x2058 <sig_wait_stage_1_isr+0x6>
    2058:	00 d0       	rcall	.+0      	; 0x205a <sig_wait_stage_1_isr+0x8>
    205a:	cd b7       	in	r28, 0x3d	; 61
    205c:	de b7       	in	r29, 0x3e	; 62
    205e:	9c 83       	std	Y+4, r25	; 0x04
    2060:	8b 83       	std	Y+3, r24	; 0x03
#ifdef CONFIG_MP
    spin_lock( &sig->lock );
#endif // CONFIG_MP
    proc_t * proc = current_proc();
    2062:	0e 94 cc 00 	call	0x198	; 0x198 <current_proc>
    2066:	9a 83       	std	Y+2, r25	; 0x02
    2068:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    // Останавливаем процесс
    _proc_stop(proc);
    206a:	89 81       	ldd	r24, Y+1	; 0x01
    206c:	9a 81       	ldd	r25, Y+2	; 0x02
    206e:	0e 94 a1 0c 	call	0x1942	; 0x1942 <_proc_stop>
    proc->flags |= PROC_FLG_WAIT;
    2072:	e9 81       	ldd	r30, Y+1	; 0x01
    2074:	fa 81       	ldd	r31, Y+2	; 0x02
    2076:	83 85       	ldd	r24, Z+11	; 0x0b
    2078:	80 61       	ori	r24, 0x10	; 16
    207a:	e9 81       	ldd	r30, Y+1	; 0x01
    207c:	fa 81       	ldd	r31, Y+2	; 0x02
    207e:	83 87       	std	Z+11, r24	; 0x0b
        stat_inc( proc, (stat_t *)sig->sig_stat + sig_core );
    }
    spin_unlock( &proc->lock );
    spin_unlock( &sig->lock );
#else
    gitem_insert_group( (gitem_t *)proc, (xlist_t *)sig );
    2080:	89 81       	ldd	r24, Y+1	; 0x01
    2082:	9a 81       	ldd	r25, Y+2	; 0x02
    2084:	2b 81       	ldd	r18, Y+3	; 0x03
    2086:	3c 81       	ldd	r19, Y+4	; 0x04
    2088:	b9 01       	movw	r22, r18
    208a:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <gitem_insert_group>
#endif //CONFIG_MP
}
    208e:	0f 90       	pop	r0
    2090:	0f 90       	pop	r0
    2092:	0f 90       	pop	r0
    2094:	0f 90       	pop	r0
    2096:	cf 91       	pop	r28
    2098:	df 91       	pop	r29
    209a:	08 95       	ret

0000209c <sig_signal_isr>:
    enable_interrupts();
}
//========================================================================================
// Тоже самое что и предыдущие, олько для вызова из обработчиков прерываний и из критических секций
void sig_signal_isr( sig_t * sig )
{
    209c:	df 93       	push	r29
    209e:	cf 93       	push	r28
    20a0:	00 d0       	rcall	.+0      	; 0x20a2 <sig_signal_isr+0x6>
    20a2:	00 d0       	rcall	.+0      	; 0x20a4 <sig_signal_isr+0x8>
    20a4:	cd b7       	in	r28, 0x3d	; 61
    20a6:	de b7       	in	r29, 0x3e	; 62
    20a8:	9c 83       	std	Y+4, r25	; 0x04
    20aa:	8b 83       	std	Y+3, r24	; 0x03
    }
    resched(core);// Перепланировка
    spin_unlock( &proc->lock );// Освобождение блокировки процесса
    spin_unlock( &sig->lock );// Освобождение блокировки сигнала
#else
    if( ((xlist_t *)sig)->index == (index_t)0 )return;
    20ac:	eb 81       	ldd	r30, Y+3	; 0x03
    20ae:	fc 81       	ldd	r31, Y+4	; 0x04
    20b0:	80 89       	ldd	r24, Z+16	; 0x10
    20b2:	88 23       	and	r24, r24
    20b4:	a9 f0       	breq	.+42     	; 0x20e0 <sig_signal_isr+0x44>
    proc_t * proc = (proc_t *)xlist_head( (xlist_t *)sig );
    20b6:	8b 81       	ldd	r24, Y+3	; 0x03
    20b8:	9c 81       	ldd	r25, Y+4	; 0x04
    20ba:	0e 94 19 11 	call	0x2232	; 0x2232 <xlist_head>
    20be:	9a 83       	std	Y+2, r25	; 0x02
    20c0:	89 83       	std	Y+1, r24	; 0x01
    gitem_fast_cut( (gitem_t *)proc );
    20c2:	89 81       	ldd	r24, Y+1	; 0x01
    20c4:	9a 81       	ldd	r25, Y+2	; 0x02
    20c6:	0e 94 53 07 	call	0xea6	; 0xea6 <gitem_fast_cut>
    gitem_insert( (gitem_t *)proc, kernel.sched.ready );
    20ca:	89 81       	ldd	r24, Y+1	; 0x01
    20cc:	9a 81       	ldd	r25, Y+2	; 0x02
    20ce:	20 91 a0 01 	lds	r18, 0x01A0
    20d2:	30 91 a1 01 	lds	r19, 0x01A1
    20d6:	b9 01       	movw	r22, r18
    20d8:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <gitem_insert>
    resched();
    20dc:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
#endif //CONFIG_MP
}
    20e0:	0f 90       	pop	r0
    20e2:	0f 90       	pop	r0
    20e4:	0f 90       	pop	r0
    20e6:	0f 90       	pop	r0
    20e8:	cf 91       	pop	r28
    20ea:	df 91       	pop	r29
    20ec:	08 95       	ret

000020ee <sig_broadcast_isr>:
//----------------------------------------------------------------------------------------
void sig_broadcast_isr( sig_t * sig )
{
    20ee:	df 93       	push	r29
    20f0:	cf 93       	push	r28
    20f2:	00 d0       	rcall	.+0      	; 0x20f4 <sig_broadcast_isr+0x6>
    20f4:	cd b7       	in	r28, 0x3d	; 61
    20f6:	de b7       	in	r29, 0x3e	; 62
    20f8:	9a 83       	std	Y+2, r25	; 0x02
    20fa:	89 83       	std	Y+1, r24	; 0x01

        resched(core);
    }
    spin_unlock( &sig->lock );
#else
    gitem_xlist_merge( (xlist_t *)sig, kernel.sched.ready );
    20fc:	20 91 a0 01 	lds	r18, 0x01A0
    2100:	30 91 a1 01 	lds	r19, 0x01A1
    2104:	89 81       	ldd	r24, Y+1	; 0x01
    2106:	9a 81       	ldd	r25, Y+2	; 0x02
    2108:	b9 01       	movw	r22, r18
    210a:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <gitem_xlist_merge>
    resched();
    210e:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
#endif //CONFIG_MP
}
    2112:	0f 90       	pop	r0
    2114:	0f 90       	pop	r0
    2116:	cf 91       	pop	r28
    2118:	df 91       	pop	r29
    211a:	08 95       	ret

0000211c <_clear_timer>:
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
//========================================================================================
void _clear_timer(timer_t * t)
{
    211c:	df 93       	push	r29
    211e:	cf 93       	push	r28
    2120:	00 d0       	rcall	.+0      	; 0x2122 <_clear_timer+0x6>
    2122:	cd b7       	in	r28, 0x3d	; 61
    2124:	de b7       	in	r29, 0x3e	; 62
    2126:	9a 83       	std	Y+2, r25	; 0x02
    2128:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    core_id_t current_core = _enter_crit_sec();
    spin_lock( &kernel.timer_lock );
#else
    enter_crit_sec();
    212a:	0e 94 26 06 	call	0xc4c	; 0xc4c <enter_crit_sec>
#endif //CONFIG_MP
    *t = kernel.timer;
    212e:	80 91 f8 01 	lds	r24, 0x01F8
    2132:	90 91 f9 01 	lds	r25, 0x01F9
    2136:	e9 81       	ldd	r30, Y+1	; 0x01
    2138:	fa 81       	ldd	r31, Y+2	; 0x02
    213a:	91 83       	std	Z+1, r25	; 0x01
    213c:	80 83       	st	Z, r24
#ifdef CONFIG_MP
    spin_unlock( &kernel.timer_lock );
    _exit_crit_sec(current_core);
#else
    exit_crit_sec();
    213e:	0e 94 38 06 	call	0xc70	; 0xc70 <exit_crit_sec>
#endif //CONFIG_MP
}
    2142:	0f 90       	pop	r0
    2144:	0f 90       	pop	r0
    2146:	cf 91       	pop	r28
    2148:	df 91       	pop	r29
    214a:	08 95       	ret

0000214c <_timer>:
//----------------------------------------------------------------------------------------
timer_t _timer(timer_t t)
{
    214c:	df 93       	push	r29
    214e:	cf 93       	push	r28
    2150:	00 d0       	rcall	.+0      	; 0x2152 <_timer+0x6>
    2152:	00 d0       	rcall	.+0      	; 0x2154 <_timer+0x8>
    2154:	cd b7       	in	r28, 0x3d	; 61
    2156:	de b7       	in	r29, 0x3e	; 62
    2158:	9c 83       	std	Y+4, r25	; 0x04
    215a:	8b 83       	std	Y+3, r24	; 0x03
    timer_t ret;
#ifdef CONFIG_MP
    core_id_t current_core = _enter_crit_sec();
    spin_lock( &kernel.timer_lock );
#else
    enter_crit_sec();
    215c:	0e 94 26 06 	call	0xc4c	; 0xc4c <enter_crit_sec>
#endif //CONFIG_MP
    ret = kernel.timer - t;
    2160:	20 91 f8 01 	lds	r18, 0x01F8
    2164:	30 91 f9 01 	lds	r19, 0x01F9
    2168:	8b 81       	ldd	r24, Y+3	; 0x03
    216a:	9c 81       	ldd	r25, Y+4	; 0x04
    216c:	a9 01       	movw	r20, r18
    216e:	48 1b       	sub	r20, r24
    2170:	59 0b       	sbc	r21, r25
    2172:	ca 01       	movw	r24, r20
    2174:	9a 83       	std	Y+2, r25	; 0x02
    2176:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_unlock( &kernel.timer_lock );
    _exit_crit_sec(current_core);
#else
    exit_crit_sec();
    2178:	0e 94 38 06 	call	0xc70	; 0xc70 <exit_crit_sec>
#endif //CONFIG_MP
    return ret;
    217c:	89 81       	ldd	r24, Y+1	; 0x01
    217e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2180:	0f 90       	pop	r0
    2182:	0f 90       	pop	r0
    2184:	0f 90       	pop	r0
    2186:	0f 90       	pop	r0
    2188:	cf 91       	pop	r28
    218a:	df 91       	pop	r29
    218c:	08 95       	ret

0000218e <wait_time>:

//----------------------------------------------------------------------------------------
void wait_time(timer_t time)
{
    218e:	df 93       	push	r29
    2190:	cf 93       	push	r28
    2192:	00 d0       	rcall	.+0      	; 0x2194 <wait_time+0x6>
    2194:	00 d0       	rcall	.+0      	; 0x2196 <wait_time+0x8>
    2196:	0f 92       	push	r0
    2198:	cd b7       	in	r28, 0x3d	; 61
    219a:	de b7       	in	r29, 0x3e	; 62
    219c:	9d 83       	std	Y+5, r25	; 0x05
    219e:	8c 83       	std	Y+4, r24	; 0x04
    timer_t tmr;
    bool_t roll=(bool_t)1;
    21a0:	81 e0       	ldi	r24, 0x01	; 1
    21a2:	89 83       	std	Y+1, r24	; 0x01
    CLEAR_TIMER(tmr);
    21a4:	ce 01       	movw	r24, r28
    21a6:	02 96       	adiw	r24, 0x02	; 2
    21a8:	0e 94 8e 10 	call	0x211c	; 0x211c <_clear_timer>
    21ac:	0d c0       	rjmp	.+26     	; 0x21c8 <wait_time+0x3a>
    while((bool_t)roll)
    {
        roll = (bool_t)( TIMER(tmr) < (timer_t)time );
    21ae:	8a 81       	ldd	r24, Y+2	; 0x02
    21b0:	9b 81       	ldd	r25, Y+3	; 0x03
    21b2:	0e 94 a6 10 	call	0x214c	; 0x214c <_timer>
    21b6:	9c 01       	movw	r18, r24
    21b8:	19 82       	std	Y+1, r1	; 0x01
    21ba:	8c 81       	ldd	r24, Y+4	; 0x04
    21bc:	9d 81       	ldd	r25, Y+5	; 0x05
    21be:	28 17       	cp	r18, r24
    21c0:	39 07       	cpc	r19, r25
    21c2:	10 f4       	brcc	.+4      	; 0x21c8 <wait_time+0x3a>
    21c4:	81 e0       	ldi	r24, 0x01	; 1
    21c6:	89 83       	std	Y+1, r24	; 0x01
void wait_time(timer_t time)
{
    timer_t tmr;
    bool_t roll=(bool_t)1;
    CLEAR_TIMER(tmr);
    while((bool_t)roll)
    21c8:	89 81       	ldd	r24, Y+1	; 0x01
    21ca:	88 23       	and	r24, r24
    21cc:	81 f7       	brne	.-32     	; 0x21ae <wait_time+0x20>
    {
        roll = (bool_t)( TIMER(tmr) < (timer_t)time );
    }
}
    21ce:	0f 90       	pop	r0
    21d0:	0f 90       	pop	r0
    21d2:	0f 90       	pop	r0
    21d4:	0f 90       	pop	r0
    21d6:	0f 90       	pop	r0
    21d8:	cf 91       	pop	r28
    21da:	df 91       	pop	r29
    21dc:	08 95       	ret

000021de <xlist_init>:
**********************************************/
//Инициация
void xlist_init(
    xlist_t * xlist
)
{
    21de:	df 93       	push	r29
    21e0:	cf 93       	push	r28
    21e2:	00 d0       	rcall	.+0      	; 0x21e4 <xlist_init+0x6>
    21e4:	00 d0       	rcall	.+0      	; 0x21e6 <xlist_init+0x8>
    21e6:	cd b7       	in	r28, 0x3d	; 61
    21e8:	de b7       	in	r29, 0x3e	; 62
    21ea:	9c 83       	std	Y+4, r25	; 0x04
    21ec:	8b 83       	std	Y+3, r24	; 0x03
    count_t i;
    //список пуст
    xlist->index = (index_t)0;
    21ee:	eb 81       	ldd	r30, Y+3	; 0x03
    21f0:	fc 81       	ldd	r31, Y+4	; 0x04
    21f2:	10 8a       	std	Z+16, r1	; 0x10
    //обнуляем указатели
    for( i = 0; i < BITS_IN_INDEX_T; i++ )xlist->item[i] = (item_t *)0;
    21f4:	1a 82       	std	Y+2, r1	; 0x02
    21f6:	19 82       	std	Y+1, r1	; 0x01
    21f8:	10 c0       	rjmp	.+32     	; 0x221a <xlist_init+0x3c>
    21fa:	89 81       	ldd	r24, Y+1	; 0x01
    21fc:	9a 81       	ldd	r25, Y+2	; 0x02
    21fe:	2b 81       	ldd	r18, Y+3	; 0x03
    2200:	3c 81       	ldd	r19, Y+4	; 0x04
    2202:	88 0f       	add	r24, r24
    2204:	99 1f       	adc	r25, r25
    2206:	f9 01       	movw	r30, r18
    2208:	e8 0f       	add	r30, r24
    220a:	f9 1f       	adc	r31, r25
    220c:	11 82       	std	Z+1, r1	; 0x01
    220e:	10 82       	st	Z, r1
    2210:	89 81       	ldd	r24, Y+1	; 0x01
    2212:	9a 81       	ldd	r25, Y+2	; 0x02
    2214:	01 96       	adiw	r24, 0x01	; 1
    2216:	9a 83       	std	Y+2, r25	; 0x02
    2218:	89 83       	std	Y+1, r24	; 0x01
    221a:	89 81       	ldd	r24, Y+1	; 0x01
    221c:	9a 81       	ldd	r25, Y+2	; 0x02
    221e:	88 30       	cpi	r24, 0x08	; 8
    2220:	91 05       	cpc	r25, r1
    2222:	58 f3       	brcs	.-42     	; 0x21fa <xlist_init+0x1c>
}
    2224:	0f 90       	pop	r0
    2226:	0f 90       	pop	r0
    2228:	0f 90       	pop	r0
    222a:	0f 90       	pop	r0
    222c:	cf 91       	pop	r28
    222e:	df 91       	pop	r29
    2230:	08 95       	ret

00002232 <xlist_head>:
//===========================================================================
//Поиск головы списка
item_t * xlist_head(xlist_t * xlist)
{
    2232:	df 93       	push	r29
    2234:	cf 93       	push	r28
    2236:	00 d0       	rcall	.+0      	; 0x2238 <xlist_head+0x6>
    2238:	00 d0       	rcall	.+0      	; 0x223a <xlist_head+0x8>
    223a:	0f 92       	push	r0
    223c:	cd b7       	in	r28, 0x3d	; 61
    223e:	de b7       	in	r29, 0x3e	; 62
    2240:	9d 83       	std	Y+5, r25	; 0x05
    2242:	8c 83       	std	Y+4, r24	; 0x04
    item_t * ret_val = (item_t *)0;
    2244:	1b 82       	std	Y+3, r1	; 0x03
    2246:	1a 82       	std	Y+2, r1	; 0x02
    index_t index = xlist->index;
    2248:	ec 81       	ldd	r30, Y+4	; 0x04
    224a:	fd 81       	ldd	r31, Y+5	; 0x05
    224c:	80 89       	ldd	r24, Z+16	; 0x10
    224e:	89 83       	std	Y+1, r24	; 0x01

    if( index != (index_t)0 )
    2250:	89 81       	ldd	r24, Y+1	; 0x01
    2252:	88 23       	and	r24, r24
    2254:	81 f0       	breq	.+32     	; 0x2276 <xlist_head+0x44>
    {
        ret_val = xlist->item[ index_search( index ) ];
    2256:	89 81       	ldd	r24, Y+1	; 0x01
    2258:	0e 94 fd 08 	call	0x11fa	; 0x11fa <index_search>
    225c:	88 2f       	mov	r24, r24
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	2c 81       	ldd	r18, Y+4	; 0x04
    2262:	3d 81       	ldd	r19, Y+5	; 0x05
    2264:	88 0f       	add	r24, r24
    2266:	99 1f       	adc	r25, r25
    2268:	f9 01       	movw	r30, r18
    226a:	e8 0f       	add	r30, r24
    226c:	f9 1f       	adc	r31, r25
    226e:	80 81       	ld	r24, Z
    2270:	91 81       	ldd	r25, Z+1	; 0x01
    2272:	9b 83       	std	Y+3, r25	; 0x03
    2274:	8a 83       	std	Y+2, r24	; 0x02
    }
    return ret_val;
    2276:	8a 81       	ldd	r24, Y+2	; 0x02
    2278:	9b 81       	ldd	r25, Y+3	; 0x03
}
    227a:	0f 90       	pop	r0
    227c:	0f 90       	pop	r0
    227e:	0f 90       	pop	r0
    2280:	0f 90       	pop	r0
    2282:	0f 90       	pop	r0
    2284:	cf 91       	pop	r28
    2286:	df 91       	pop	r29
    2288:	08 95       	ret

0000228a <xlist_switch>:

//===========================================================================
// переключение указателя в массиве на следующий элемент, пригодится в планировщике
void xlist_switch(xlist_t * xlist, prio_t prio)
{
    228a:	df 93       	push	r29
    228c:	cf 93       	push	r28
    228e:	00 d0       	rcall	.+0      	; 0x2290 <xlist_switch+0x6>
    2290:	00 d0       	rcall	.+0      	; 0x2292 <xlist_switch+0x8>
    2292:	0f 92       	push	r0
    2294:	cd b7       	in	r28, 0x3d	; 61
    2296:	de b7       	in	r29, 0x3e	; 62
    2298:	9c 83       	std	Y+4, r25	; 0x04
    229a:	8b 83       	std	Y+3, r24	; 0x03
    229c:	6d 83       	std	Y+5, r22	; 0x05
    item_t ** current = xlist->item + prio;
    229e:	2b 81       	ldd	r18, Y+3	; 0x03
    22a0:	3c 81       	ldd	r19, Y+4	; 0x04
    22a2:	8d 81       	ldd	r24, Y+5	; 0x05
    22a4:	88 2f       	mov	r24, r24
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	88 0f       	add	r24, r24
    22aa:	99 1f       	adc	r25, r25
    22ac:	82 0f       	add	r24, r18
    22ae:	93 1f       	adc	r25, r19
    22b0:	9a 83       	std	Y+2, r25	; 0x02
    22b2:	89 83       	std	Y+1, r24	; 0x01
    *current = (*current)->next;
    22b4:	e9 81       	ldd	r30, Y+1	; 0x01
    22b6:	fa 81       	ldd	r31, Y+2	; 0x02
    22b8:	01 90       	ld	r0, Z+
    22ba:	f0 81       	ld	r31, Z
    22bc:	e0 2d       	mov	r30, r0
    22be:	80 81       	ld	r24, Z
    22c0:	91 81       	ldd	r25, Z+1	; 0x01
    22c2:	e9 81       	ldd	r30, Y+1	; 0x01
    22c4:	fa 81       	ldd	r31, Y+2	; 0x02
    22c6:	91 83       	std	Z+1, r25	; 0x01
    22c8:	80 83       	st	Z, r24
    //*current = (item_t *)*(item_t **)*(item_t ***)current;
}
    22ca:	0f 90       	pop	r0
    22cc:	0f 90       	pop	r0
    22ce:	0f 90       	pop	r0
    22d0:	0f 90       	pop	r0
    22d2:	0f 90       	pop	r0
    22d4:	cf 91       	pop	r28
    22d6:	df 91       	pop	r29
    22d8:	08 95       	ret

000022da <raise_syscall_interrupt>:
 */
#include <bugurt.h>
//#include "../../arch/avr-gcc/init_syscalls.h"

void raise_syscall_interrupt(void)
{
    22da:	df 93       	push	r29
    22dc:	cf 93       	push	r28
    22de:	cd b7       	in	r28, 0x3d	; 61
    22e0:	de b7       	in	r29, 0x3e	; 62
    R2_on();
    22e2:	ab e2       	ldi	r26, 0x2B	; 43
    22e4:	b0 e0       	ldi	r27, 0x00	; 0
    22e6:	eb e2       	ldi	r30, 0x2B	; 43
    22e8:	f0 e0       	ldi	r31, 0x00	; 0
    22ea:	80 81       	ld	r24, Z
    22ec:	84 60       	ori	r24, 0x04	; 4
    22ee:	8c 93       	st	X, r24
    G2_off();
    22f0:	ab e2       	ldi	r26, 0x2B	; 43
    22f2:	b0 e0       	ldi	r27, 0x00	; 0
    22f4:	eb e2       	ldi	r30, 0x2B	; 43
    22f6:	f0 e0       	ldi	r31, 0x00	; 0
    22f8:	80 81       	ld	r24, Z
    22fa:	87 7f       	andi	r24, 0xF7	; 247
    22fc:	8c 93       	st	X, r24
    R2_off();
    22fe:	ab e2       	ldi	r26, 0x2B	; 43
    2300:	b0 e0       	ldi	r27, 0x00	; 0
    2302:	eb e2       	ldi	r30, 0x2B	; 43
    2304:	f0 e0       	ldi	r31, 0x00	; 0
    2306:	80 81       	ld	r24, Z
    2308:	8b 7f       	andi	r24, 0xFB	; 251
    230a:	8c 93       	st	X, r24
    G2_on();
    230c:	ab e2       	ldi	r26, 0x2B	; 43
    230e:	b0 e0       	ldi	r27, 0x00	; 0
    2310:	eb e2       	ldi	r30, 0x2B	; 43
    2312:	f0 e0       	ldi	r31, 0x00	; 0
    2314:	80 81       	ld	r24, Z
    2316:	88 60       	ori	r24, 0x08	; 8
    2318:	8c 93       	st	X, r24
}
    231a:	cf 91       	pop	r28
    231c:	df 91       	pop	r29
    231e:	08 95       	ret

00002320 <start_scheduler>:

void start_scheduler( void ){
    2320:	df 93       	push	r29
    2322:	cf 93       	push	r28
    2324:	cd b7       	in	r28, 0x3d	; 61
    2326:	de b7       	in	r29, 0x3e	; 62
    TIMSK2 |= 0x02;
    2328:	a0 e7       	ldi	r26, 0x70	; 112
    232a:	b0 e0       	ldi	r27, 0x00	; 0
    232c:	e0 e7       	ldi	r30, 0x70	; 112
    232e:	f0 e0       	ldi	r31, 0x00	; 0
    2330:	80 81       	ld	r24, Z
    2332:	82 60       	ori	r24, 0x02	; 2
    2334:	8c 93       	st	X, r24
    EIMSK |= 0x02;
    2336:	ad e3       	ldi	r26, 0x3D	; 61
    2338:	b0 e0       	ldi	r27, 0x00	; 0
    233a:	ed e3       	ldi	r30, 0x3D	; 61
    233c:	f0 e0       	ldi	r31, 0x00	; 0
    233e:	80 81       	ld	r24, Z
    2340:	82 60       	ori	r24, 0x02	; 2
    2342:	8c 93       	st	X, r24
    EIFR |= 0x02;
    2344:	ac e3       	ldi	r26, 0x3C	; 60
    2346:	b0 e0       	ldi	r27, 0x00	; 0
    2348:	ec e3       	ldi	r30, 0x3C	; 60
    234a:	f0 e0       	ldi	r31, 0x00	; 0
    234c:	80 81       	ld	r24, Z
    234e:	82 60       	ori	r24, 0x02	; 2
    2350:	8c 93       	st	X, r24
}
    2352:	cf 91       	pop	r28
    2354:	df 91       	pop	r29
    2356:	08 95       	ret

00002358 <blink_1>:
    TIMSK2 &= ~0x02;
    EIMSK &= ~0x02;
}

///----------------------------------------------------------------------------------------
void blink_1(void * t) {PORTB ^= 0x10;}
    2358:	df 93       	push	r29
    235a:	cf 93       	push	r28
    235c:	00 d0       	rcall	.+0      	; 0x235e <blink_1+0x6>
    235e:	cd b7       	in	r28, 0x3d	; 61
    2360:	de b7       	in	r29, 0x3e	; 62
    2362:	9a 83       	std	Y+2, r25	; 0x02
    2364:	89 83       	std	Y+1, r24	; 0x01
    2366:	a5 e2       	ldi	r26, 0x25	; 37
    2368:	b0 e0       	ldi	r27, 0x00	; 0
    236a:	e5 e2       	ldi	r30, 0x25	; 37
    236c:	f0 e0       	ldi	r31, 0x00	; 0
    236e:	90 81       	ld	r25, Z
    2370:	80 e1       	ldi	r24, 0x10	; 16
    2372:	89 27       	eor	r24, r25
    2374:	8c 93       	st	X, r24
    2376:	0f 90       	pop	r0
    2378:	0f 90       	pop	r0
    237a:	cf 91       	pop	r28
    237c:	df 91       	pop	r29
    237e:	08 95       	ret

00002380 <blink_2>:
void blink_2(void * t) {PORTB ^= 0x08;}
    2380:	df 93       	push	r29
    2382:	cf 93       	push	r28
    2384:	00 d0       	rcall	.+0      	; 0x2386 <blink_2+0x6>
    2386:	cd b7       	in	r28, 0x3d	; 61
    2388:	de b7       	in	r29, 0x3e	; 62
    238a:	9a 83       	std	Y+2, r25	; 0x02
    238c:	89 83       	std	Y+1, r24	; 0x01
    238e:	a5 e2       	ldi	r26, 0x25	; 37
    2390:	b0 e0       	ldi	r27, 0x00	; 0
    2392:	e5 e2       	ldi	r30, 0x25	; 37
    2394:	f0 e0       	ldi	r31, 0x00	; 0
    2396:	90 81       	ld	r25, Z
    2398:	88 e0       	ldi	r24, 0x08	; 8
    239a:	89 27       	eor	r24, r25
    239c:	8c 93       	st	X, r24
    239e:	0f 90       	pop	r0
    23a0:	0f 90       	pop	r0
    23a2:	cf 91       	pop	r28
    23a4:	df 91       	pop	r29
    23a6:	08 95       	ret

000023a8 <blink_3>:
void blink_3(void * t) {PORTB ^= 0x04;}
    23a8:	df 93       	push	r29
    23aa:	cf 93       	push	r28
    23ac:	00 d0       	rcall	.+0      	; 0x23ae <blink_3+0x6>
    23ae:	cd b7       	in	r28, 0x3d	; 61
    23b0:	de b7       	in	r29, 0x3e	; 62
    23b2:	9a 83       	std	Y+2, r25	; 0x02
    23b4:	89 83       	std	Y+1, r24	; 0x01
    23b6:	a5 e2       	ldi	r26, 0x25	; 37
    23b8:	b0 e0       	ldi	r27, 0x00	; 0
    23ba:	e5 e2       	ldi	r30, 0x25	; 37
    23bc:	f0 e0       	ldi	r31, 0x00	; 0
    23be:	90 81       	ld	r25, Z
    23c0:	84 e0       	ldi	r24, 0x04	; 4
    23c2:	89 27       	eor	r24, r25
    23c4:	8c 93       	st	X, r24
    23c6:	0f 90       	pop	r0
    23c8:	0f 90       	pop	r0
    23ca:	cf 91       	pop	r28
    23cc:	df 91       	pop	r29
    23ce:	08 95       	ret

000023d0 <blink_4>:
void blink_4(void * t) {PORTB ^= 0x02;}
    23d0:	df 93       	push	r29
    23d2:	cf 93       	push	r28
    23d4:	00 d0       	rcall	.+0      	; 0x23d6 <blink_4+0x6>
    23d6:	cd b7       	in	r28, 0x3d	; 61
    23d8:	de b7       	in	r29, 0x3e	; 62
    23da:	9a 83       	std	Y+2, r25	; 0x02
    23dc:	89 83       	std	Y+1, r24	; 0x01
    23de:	a5 e2       	ldi	r26, 0x25	; 37
    23e0:	b0 e0       	ldi	r27, 0x00	; 0
    23e2:	e5 e2       	ldi	r30, 0x25	; 37
    23e4:	f0 e0       	ldi	r31, 0x00	; 0
    23e6:	90 81       	ld	r25, Z
    23e8:	82 e0       	ldi	r24, 0x02	; 2
    23ea:	89 27       	eor	r24, r25
    23ec:	8c 93       	st	X, r24
    23ee:	0f 90       	pop	r0
    23f0:	0f 90       	pop	r0
    23f2:	cf 91       	pop	r28
    23f4:	df 91       	pop	r29
    23f6:	08 95       	ret

000023f8 <blink_12>:
void blink_7(void * t) {PORTC ^= 0x10;}
void blink_8(void * t) {PORTC ^= 0x08;}
void blink_9(void * t) {PORTC ^= 0x04;}
void blink_10(void * t) {PORTC ^= 0x02;}
void blink_11(void * t) {PORTC ^= 0x01;}
void blink_12(void * t) {
    23f8:	df 93       	push	r29
    23fa:	cf 93       	push	r28
    23fc:	00 d0       	rcall	.+0      	; 0x23fe <blink_12+0x6>
    23fe:	cd b7       	in	r28, 0x3d	; 61
    2400:	de b7       	in	r29, 0x3e	; 62
    2402:	9a 83       	std	Y+2, r25	; 0x02
    2404:	89 83       	std	Y+1, r24	; 0x01
    PORTB ^= 0x20;
    2406:	a5 e2       	ldi	r26, 0x25	; 37
    2408:	b0 e0       	ldi	r27, 0x00	; 0
    240a:	e5 e2       	ldi	r30, 0x25	; 37
    240c:	f0 e0       	ldi	r31, 0x00	; 0
    240e:	90 81       	ld	r25, Z
    2410:	80 e2       	ldi	r24, 0x20	; 32
    2412:	89 27       	eor	r24, r25
    2414:	8c 93       	st	X, r24
    blink_G3();
    2416:	ab e2       	ldi	r26, 0x2B	; 43
    2418:	b0 e0       	ldi	r27, 0x00	; 0
    241a:	eb e2       	ldi	r30, 0x2B	; 43
    241c:	f0 e0       	ldi	r31, 0x00	; 0
    241e:	90 81       	ld	r25, Z
    2420:	80 e4       	ldi	r24, 0x40	; 64
    2422:	89 27       	eor	r24, r25
    2424:	8c 93       	st	X, r24
    blink_R3();
    2426:	ab e2       	ldi	r26, 0x2B	; 43
    2428:	b0 e0       	ldi	r27, 0x00	; 0
    242a:	eb e2       	ldi	r30, 0x2B	; 43
    242c:	f0 e0       	ldi	r31, 0x00	; 0
    242e:	90 81       	ld	r25, Z
    2430:	80 e2       	ldi	r24, 0x20	; 32
    2432:	89 27       	eor	r24, r25
    2434:	8c 93       	st	X, r24
    }
    2436:	0f 90       	pop	r0
    2438:	0f 90       	pop	r0
    243a:	cf 91       	pop	r28
    243c:	df 91       	pop	r29
    243e:	08 95       	ret

00002440 <main0>:

proc_t proc[4];
stack_t stack[4][128];

void main0(void * t)
{
    2440:	df 93       	push	r29
    2442:	cf 93       	push	r28
    2444:	00 d0       	rcall	.+0      	; 0x2446 <main0+0x6>
    2446:	cd b7       	in	r28, 0x3d	; 61
    2448:	de b7       	in	r29, 0x3e	; 62
    244a:	9a 83       	std	Y+2, r25	; 0x02
    244c:	89 83       	std	Y+1, r24	; 0x01
    while(1)
    {
        wait_time(500);
    244e:	84 ef       	ldi	r24, 0xF4	; 244
    2450:	91 e0       	ldi	r25, 0x01	; 1
    2452:	0e 94 c7 10 	call	0x218e	; 0x218e <wait_time>
    2456:	fb cf       	rjmp	.-10     	; 0x244e <main0+0xe>

00002458 <main1>:
    }
}
void main1(void * t)
{
    2458:	df 93       	push	r29
    245a:	cf 93       	push	r28
    245c:	00 d0       	rcall	.+0      	; 0x245e <main1+0x6>
    245e:	cd b7       	in	r28, 0x3d	; 61
    2460:	de b7       	in	r29, 0x3e	; 62
    2462:	9a 83       	std	Y+2, r25	; 0x02
    2464:	89 83       	std	Y+1, r24	; 0x01
    while(1)
    {
        wait_time(500);
    2466:	84 ef       	ldi	r24, 0xF4	; 244
    2468:	91 e0       	ldi	r25, 0x01	; 1
    246a:	0e 94 c7 10 	call	0x218e	; 0x218e <wait_time>
    246e:	fb cf       	rjmp	.-10     	; 0x2466 <main1+0xe>

00002470 <main2>:
    }
}
void main2(void * t)
{
    2470:	df 93       	push	r29
    2472:	cf 93       	push	r28
    2474:	00 d0       	rcall	.+0      	; 0x2476 <main2+0x6>
    2476:	cd b7       	in	r28, 0x3d	; 61
    2478:	de b7       	in	r29, 0x3e	; 62
    247a:	9a 83       	std	Y+2, r25	; 0x02
    247c:	89 83       	std	Y+1, r24	; 0x01
    while(1)
    {
        wait_time(1);
    247e:	81 e0       	ldi	r24, 0x01	; 1
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	0e 94 c7 10 	call	0x218e	; 0x218e <wait_time>
        proc_reset_watchdog();
    2486:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <proc_reset_watchdog>
        proc_self_stop();
    248a:	0e 94 5f 03 	call	0x6be	; 0x6be <proc_self_stop>
    248e:	f7 cf       	rjmp	.-18     	; 0x247e <main2+0xe>

00002490 <main3>:
    2490:	df 93       	push	r29
    2492:	cf 93       	push	r28
    2494:	00 d0       	rcall	.+0      	; 0x2496 <main3+0x6>
    2496:	cd b7       	in	r28, 0x3d	; 61
    2498:	de b7       	in	r29, 0x3e	; 62
    249a:	9a 83       	std	Y+2, r25	; 0x02
    249c:	89 83       	std	Y+1, r24	; 0x01
    249e:	84 ef       	ldi	r24, 0xF4	; 244
    24a0:	91 e0       	ldi	r25, 0x01	; 1
    24a2:	0e 94 c7 10 	call	0x218e	; 0x218e <wait_time>
    24a6:	0f 90       	pop	r0
    24a8:	0f 90       	pop	r0
    24aa:	cf 91       	pop	r28
    24ac:	df 91       	pop	r29
    24ae:	08 95       	ret

000024b0 <idle_main>:
void main3(void * t)
{
    wait_time(500);
}
void idle_main(void * t)
{
    24b0:	df 93       	push	r29
    24b2:	cf 93       	push	r28
    24b4:	00 d0       	rcall	.+0      	; 0x24b6 <idle_main+0x6>
    24b6:	cd b7       	in	r28, 0x3d	; 61
    24b8:	de b7       	in	r29, 0x3e	; 62
    24ba:	9a 83       	std	Y+2, r25	; 0x02
    24bc:	89 83       	std	Y+1, r24	; 0x01
    // Insert code
    wait_time(1000);
    24be:	88 ee       	ldi	r24, 0xE8	; 232
    24c0:	93 e0       	ldi	r25, 0x03	; 3
    24c2:	0e 94 c7 10 	call	0x218e	; 0x218e <wait_time>
    proc_run( &proc[3] );
    24c6:	84 e8       	ldi	r24, 0x84	; 132
    24c8:	92 e0       	ldi	r25, 0x02	; 2
    24ca:	0e 94 d7 02 	call	0x5ae	; 0x5ae <proc_run>
    wait_time(1000);
    24ce:	88 ee       	ldi	r24, 0xE8	; 232
    24d0:	93 e0       	ldi	r25, 0x03	; 3
    24d2:	0e 94 c7 10 	call	0x218e	; 0x218e <wait_time>
    proc_restart( &proc[3] );
    24d6:	84 e8       	ldi	r24, 0x84	; 132
    24d8:	92 e0       	ldi	r25, 0x02	; 2
    24da:	0e 94 0f 03 	call	0x61e	; 0x61e <proc_restart>
    wait_time(500);
    24de:	84 ef       	ldi	r24, 0xF4	; 244
    24e0:	91 e0       	ldi	r25, 0x01	; 1
    24e2:	0e 94 c7 10 	call	0x218e	; 0x218e <wait_time>
    proc_run( &proc[3] );
    24e6:	84 e8       	ldi	r24, 0x84	; 132
    24e8:	92 e0       	ldi	r25, 0x02	; 2
    24ea:	0e 94 d7 02 	call	0x5ae	; 0x5ae <proc_run>
    while(1)
    {
         wait_time(1000);
    24ee:	88 ee       	ldi	r24, 0xE8	; 232
    24f0:	93 e0       	ldi	r25, 0x03	; 3
    24f2:	0e 94 c7 10 	call	0x218e	; 0x218e <wait_time>
         proc_run(&proc[2]);
    24f6:	86 e5       	ldi	r24, 0x56	; 86
    24f8:	92 e0       	ldi	r25, 0x02	; 2
    24fa:	0e 94 d7 02 	call	0x5ae	; 0x5ae <proc_run>
    24fe:	f7 cf       	rjmp	.-18     	; 0x24ee <idle_main+0x3e>

00002500 <main>:
    }
}

int main(void)
{
    2500:	8f 92       	push	r8
    2502:	af 92       	push	r10
    2504:	bf 92       	push	r11
    2506:	cf 92       	push	r12
    2508:	ef 92       	push	r14
    250a:	ff 92       	push	r15
    250c:	0f 93       	push	r16
    250e:	1f 93       	push	r17
    2510:	df 93       	push	r29
    2512:	cf 93       	push	r28
    2514:	cd b7       	in	r28, 0x3d	; 61
    2516:	de b7       	in	r29, 0x3e	; 62
    init_bugurt();
    2518:	0e 94 6f 01 	call	0x2de	; 0x2de <init_bugurt>

    TCCR2A = 0x02;//
    251c:	e0 eb       	ldi	r30, 0xB0	; 176
    251e:	f0 e0       	ldi	r31, 0x00	; 0
    2520:	82 e0       	ldi	r24, 0x02	; 2
    2522:	80 83       	st	Z, r24
    TCCR2B = 0x05;// prescaler=128
    2524:	e1 eb       	ldi	r30, 0xB1	; 177
    2526:	f0 e0       	ldi	r31, 0x00	; 0
    2528:	85 e0       	ldi	r24, 0x05	; 5
    252a:	80 83       	st	Z, r24
    OCR2A  = 124;
    252c:	e3 eb       	ldi	r30, 0xB3	; 179
    252e:	f0 e0       	ldi	r31, 0x00	; 0
    2530:	8c e7       	ldi	r24, 0x7C	; 124
    2532:	80 83       	st	Z, r24
    OCR2B  = 0x00;
    2534:	e4 eb       	ldi	r30, 0xB4	; 180
    2536:	f0 e0       	ldi	r31, 0x00	; 0
    2538:	10 82       	st	Z, r1
    TIMSK2 = 0x00; // shceduler not started
    253a:	e0 e7       	ldi	r30, 0x70	; 112
    253c:	f0 e0       	ldi	r31, 0x00	; 0
    253e:	10 82       	st	Z, r1
    TIFR2  = 0x00;
    2540:	e7 e3       	ldi	r30, 0x37	; 55
    2542:	f0 e0       	ldi	r31, 0x00	; 0
    2544:	10 82       	st	Z, r1

    EICRA = 0x08; //falling edge
    2546:	e9 e6       	ldi	r30, 0x69	; 105
    2548:	f0 e0       	ldi	r31, 0x00	; 0
    254a:	88 e0       	ldi	r24, 0x08	; 8
    254c:	80 83       	st	Z, r24
    EIMSK = 0x00; //resched generates int1, mask 0x02
    254e:	ed e3       	ldi	r30, 0x3D	; 61
    2550:	f0 e0       	ldi	r31, 0x00	; 0
    2552:	10 82       	st	Z, r1

    DDRB = 0x3F;
    2554:	e4 e2       	ldi	r30, 0x24	; 36
    2556:	f0 e0       	ldi	r31, 0x00	; 0
    2558:	8f e3       	ldi	r24, 0x3F	; 63
    255a:	80 83       	st	Z, r24
    PORTB = 0x00;
    255c:	e5 e2       	ldi	r30, 0x25	; 37
    255e:	f0 e0       	ldi	r31, 0x00	; 0
    2560:	10 82       	st	Z, r1
    DDRC = 0x3F;
    2562:	e7 e2       	ldi	r30, 0x27	; 39
    2564:	f0 e0       	ldi	r31, 0x00	; 0
    2566:	8f e3       	ldi	r24, 0x3F	; 63
    2568:	80 83       	st	Z, r24
    PORTC = 0x00;
    256a:	e8 e2       	ldi	r30, 0x28	; 40
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	10 82       	st	Z, r1
    DDRD = 0xFE;
    2570:	ea e2       	ldi	r30, 0x2A	; 42
    2572:	f0 e0       	ldi	r31, 0x00	; 0
    2574:	8e ef       	ldi	r24, 0xFE	; 254
    2576:	80 83       	st	Z, r24
    PORTD = 0x00;
    2578:	eb e2       	ldi	r30, 0x2B	; 43
    257a:	f0 e0       	ldi	r31, 0x00	; 0
    257c:	10 82       	st	Z, r1

    G1_on();
    257e:	ab e2       	ldi	r26, 0x2B	; 43
    2580:	b0 e0       	ldi	r27, 0x00	; 0
    2582:	eb e2       	ldi	r30, 0x2B	; 43
    2584:	f0 e0       	ldi	r31, 0x00	; 0
    2586:	80 81       	ld	r24, Z
    2588:	80 61       	ori	r24, 0x10	; 16
    258a:	8c 93       	st	X, r24
    G2_on();
    258c:	ab e2       	ldi	r26, 0x2B	; 43
    258e:	b0 e0       	ldi	r27, 0x00	; 0
    2590:	eb e2       	ldi	r30, 0x2B	; 43
    2592:	f0 e0       	ldi	r31, 0x00	; 0
    2594:	80 81       	ld	r24, Z
    2596:	88 60       	ori	r24, 0x08	; 8
    2598:	8c 93       	st	X, r24
    R3_on();
    259a:	ab e2       	ldi	r26, 0x2B	; 43
    259c:	b0 e0       	ldi	r27, 0x00	; 0
    259e:	eb e2       	ldi	r30, 0x2B	; 43
    25a0:	f0 e0       	ldi	r31, 0x00	; 0
    25a2:	80 81       	ld	r24, Z
    25a4:	80 62       	ori	r24, 0x20	; 32
    25a6:	8c 93       	st	X, r24

    proc_init_isr(&proc[0], main0, blink_1, blink_1, 0, &stack[0][127], 1, 2, 0);
    25a8:	82 eb       	ldi	r24, 0xB2	; 178
    25aa:	92 e0       	ldi	r25, 0x02	; 2
    25ac:	dc 01       	movw	r26, r24
    25ae:	a1 58       	subi	r26, 0x81	; 129
    25b0:	bf 4f       	sbci	r27, 0xFF	; 255
    25b2:	8a ef       	ldi	r24, 0xFA	; 250
    25b4:	91 e0       	ldi	r25, 0x01	; 1
    25b6:	20 e2       	ldi	r18, 0x20	; 32
    25b8:	32 e1       	ldi	r19, 0x12	; 18
    25ba:	4c ea       	ldi	r20, 0xAC	; 172
    25bc:	51 e1       	ldi	r21, 0x11	; 17
    25be:	ec ea       	ldi	r30, 0xAC	; 172
    25c0:	f1 e1       	ldi	r31, 0x11	; 17
    25c2:	b9 01       	movw	r22, r18
    25c4:	9f 01       	movw	r18, r30
    25c6:	00 e0       	ldi	r16, 0x00	; 0
    25c8:	10 e0       	ldi	r17, 0x00	; 0
    25ca:	7d 01       	movw	r14, r26
    25cc:	cc 24       	eor	r12, r12
    25ce:	c3 94       	inc	r12
    25d0:	aa 24       	eor	r10, r10
    25d2:	bb 24       	eor	r11, r11
    25d4:	68 94       	set
    25d6:	a1 f8       	bld	r10, 1
    25d8:	88 24       	eor	r8, r8
    25da:	0e 94 92 0b 	call	0x1724	; 0x1724 <proc_init_isr>
    proc_init_isr(&proc[1], main1, blink_2, blink_2, 0, &stack[1][127], 2, 3, 0);
    25de:	82 eb       	ldi	r24, 0xB2	; 178
    25e0:	92 e0       	ldi	r25, 0x02	; 2
    25e2:	dc 01       	movw	r26, r24
    25e4:	a1 50       	subi	r26, 0x01	; 1
    25e6:	bf 4f       	sbci	r27, 0xFF	; 255
    25e8:	88 e2       	ldi	r24, 0x28	; 40
    25ea:	92 e0       	ldi	r25, 0x02	; 2
    25ec:	2c e2       	ldi	r18, 0x2C	; 44
    25ee:	32 e1       	ldi	r19, 0x12	; 18
    25f0:	40 ec       	ldi	r20, 0xC0	; 192
    25f2:	51 e1       	ldi	r21, 0x11	; 17
    25f4:	e0 ec       	ldi	r30, 0xC0	; 192
    25f6:	f1 e1       	ldi	r31, 0x11	; 17
    25f8:	b9 01       	movw	r22, r18
    25fa:	9f 01       	movw	r18, r30
    25fc:	00 e0       	ldi	r16, 0x00	; 0
    25fe:	10 e0       	ldi	r17, 0x00	; 0
    2600:	7d 01       	movw	r14, r26
    2602:	cc 24       	eor	r12, r12
    2604:	68 94       	set
    2606:	c1 f8       	bld	r12, 1
    2608:	0f 2e       	mov	r0, r31
    260a:	f3 e0       	ldi	r31, 0x03	; 3
    260c:	af 2e       	mov	r10, r31
    260e:	bb 24       	eor	r11, r11
    2610:	f0 2d       	mov	r31, r0
    2612:	88 24       	eor	r8, r8
    2614:	0e 94 92 0b 	call	0x1724	; 0x1724 <proc_init_isr>
    proc_init_isr(&proc[2], main2, blink_3, blink_3, 0, &stack[2][127], 2, 4, 1);// Типа реального времени
    2618:	82 eb       	ldi	r24, 0xB2	; 178
    261a:	92 e0       	ldi	r25, 0x02	; 2
    261c:	dc 01       	movw	r26, r24
    261e:	a1 58       	subi	r26, 0x81	; 129
    2620:	be 4f       	sbci	r27, 0xFE	; 254
    2622:	86 e5       	ldi	r24, 0x56	; 86
    2624:	92 e0       	ldi	r25, 0x02	; 2
    2626:	28 e3       	ldi	r18, 0x38	; 56
    2628:	32 e1       	ldi	r19, 0x12	; 18
    262a:	44 ed       	ldi	r20, 0xD4	; 212
    262c:	51 e1       	ldi	r21, 0x11	; 17
    262e:	e4 ed       	ldi	r30, 0xD4	; 212
    2630:	f1 e1       	ldi	r31, 0x11	; 17
    2632:	b9 01       	movw	r22, r18
    2634:	9f 01       	movw	r18, r30
    2636:	00 e0       	ldi	r16, 0x00	; 0
    2638:	10 e0       	ldi	r17, 0x00	; 0
    263a:	7d 01       	movw	r14, r26
    263c:	cc 24       	eor	r12, r12
    263e:	68 94       	set
    2640:	c1 f8       	bld	r12, 1
    2642:	aa 24       	eor	r10, r10
    2644:	bb 24       	eor	r11, r11
    2646:	68 94       	set
    2648:	a2 f8       	bld	r10, 2
    264a:	88 24       	eor	r8, r8
    264c:	83 94       	inc	r8
    264e:	0e 94 92 0b 	call	0x1724	; 0x1724 <proc_init_isr>
    proc_init_isr(&proc[3], main3, blink_4, blink_4, 0, &stack[3][127], 3, 4, 0);
    2652:	82 eb       	ldi	r24, 0xB2	; 178
    2654:	92 e0       	ldi	r25, 0x02	; 2
    2656:	dc 01       	movw	r26, r24
    2658:	a1 50       	subi	r26, 0x01	; 1
    265a:	be 4f       	sbci	r27, 0xFE	; 254
    265c:	84 e8       	ldi	r24, 0x84	; 132
    265e:	92 e0       	ldi	r25, 0x02	; 2
    2660:	28 e4       	ldi	r18, 0x48	; 72
    2662:	32 e1       	ldi	r19, 0x12	; 18
    2664:	48 ee       	ldi	r20, 0xE8	; 232
    2666:	51 e1       	ldi	r21, 0x11	; 17
    2668:	e8 ee       	ldi	r30, 0xE8	; 232
    266a:	f1 e1       	ldi	r31, 0x11	; 17
    266c:	b9 01       	movw	r22, r18
    266e:	9f 01       	movw	r18, r30
    2670:	00 e0       	ldi	r16, 0x00	; 0
    2672:	10 e0       	ldi	r17, 0x00	; 0
    2674:	7d 01       	movw	r14, r26
    2676:	0f 2e       	mov	r0, r31
    2678:	f3 e0       	ldi	r31, 0x03	; 3
    267a:	cf 2e       	mov	r12, r31
    267c:	f0 2d       	mov	r31, r0
    267e:	aa 24       	eor	r10, r10
    2680:	bb 24       	eor	r11, r11
    2682:	68 94       	set
    2684:	a2 f8       	bld	r10, 2
    2686:	88 24       	eor	r8, r8
    2688:	0e 94 92 0b 	call	0x1724	; 0x1724 <proc_init_isr>

    kernel.idle.rs_hook = blink_12;
    268c:	8c ef       	ldi	r24, 0xFC	; 252
    268e:	91 e1       	ldi	r25, 0x11	; 17
    2690:	90 93 ef 01 	sts	0x01EF, r25
    2694:	80 93 ee 01 	sts	0x01EE, r24
    kernel.idle.sv_hook = blink_12;
    2698:	8c ef       	ldi	r24, 0xFC	; 252
    269a:	91 e1       	ldi	r25, 0x11	; 17
    269c:	90 93 ed 01 	sts	0x01ED, r25
    26a0:	80 93 ec 01 	sts	0x01EC, r24

    proc_run_isr(&proc[0]);
    26a4:	8a ef       	ldi	r24, 0xFA	; 250
    26a6:	91 e0       	ldi	r25, 0x01	; 1
    26a8:	0e 94 38 0c 	call	0x1870	; 0x1870 <proc_run_isr>
    proc_run_isr(&proc[1]);
    26ac:	88 e2       	ldi	r24, 0x28	; 40
    26ae:	92 e0       	ldi	r25, 0x02	; 2
    26b0:	0e 94 38 0c 	call	0x1870	; 0x1870 <proc_run_isr>
    proc_run_isr(&proc[2]);
    26b4:	86 e5       	ldi	r24, 0x56	; 86
    26b6:	92 e0       	ldi	r25, 0x02	; 2
    26b8:	0e 94 38 0c 	call	0x1870	; 0x1870 <proc_run_isr>
    proc_run_isr(&proc[3]);
    26bc:	84 e8       	ldi	r24, 0x84	; 132
    26be:	92 e0       	ldi	r25, 0x02	; 2
    26c0:	0e 94 38 0c 	call	0x1870	; 0x1870 <proc_run_isr>

    start_bugurt();
    26c4:	0e 94 94 01 	call	0x328	; 0x328 <start_bugurt>
    return 0;
    26c8:	80 e0       	ldi	r24, 0x00	; 0
    26ca:	90 e0       	ldi	r25, 0x00	; 0
}
    26cc:	cf 91       	pop	r28
    26ce:	df 91       	pop	r29
    26d0:	1f 91       	pop	r17
    26d2:	0f 91       	pop	r16
    26d4:	ff 90       	pop	r15
    26d6:	ef 90       	pop	r14
    26d8:	cf 90       	pop	r12
    26da:	bf 90       	pop	r11
    26dc:	af 90       	pop	r10
    26de:	8f 90       	pop	r8
    26e0:	08 95       	ret

000026e2 <_exit>:
    26e2:	f8 94       	cli

000026e4 <__stop_program>:
    26e4:	ff cf       	rjmp	.-2      	; 0x26e4 <__stop_program>
