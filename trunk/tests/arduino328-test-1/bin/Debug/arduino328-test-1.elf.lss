
bin/Debug/arduino328-test-1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00002fee  00003082  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002fee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000032e  0080010e  0080010e  00003090  2**0
                  ALLOC
  3 .stab         000071a0  00000000  00000000  00003090  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003535  00000000  00000000  0000a230  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       8:	0c 94 79 05 	jmp	0xaf2	; 0xaf2 <__vector_2>
       c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 fb 04 	jmp	0x9f6	; 0x9f6 <__vector_7>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      54:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

00000068 <syscall_routine>:
      68:	1b 06 ce 06 07 07 3f 07 59 07 7f 07 e3 07 f4 07     ......?.Y.......
      78:	04 08 14 08 24 08 34 08 4b 08 65 08 75 08 8b 08     ....$.4.K.e.u...
      88:	a5 08 bf 08                                         ....

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ee ee       	ldi	r30, 0xEE	; 238
      a0:	ff e2       	ldi	r31, 0x2F	; 47
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <.do_copy_data_start>

000000a4 <.do_copy_data_loop>:
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0

000000a8 <.do_copy_data_start>:
      a8:	ae 30       	cpi	r26, 0x0E	; 14
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <.do_copy_data_loop>

000000ae <__do_clear_bss>:
      ae:	14 e0       	ldi	r17, 0x04	; 4
      b0:	ae e0       	ldi	r26, 0x0E	; 14
      b2:	b1 e0       	ldi	r27, 0x01	; 1
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	ac 33       	cpi	r26, 0x3C	; 60
      ba:	b1 07       	cpc	r27, r17
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <main>
      c2:	0c 94 f5 17 	jmp	0x2fea	; 0x2fea <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <osbme_store_context>:
      ca:	2f 92       	push	r2
      cc:	2f b6       	in	r2, 0x3f	; 63
      ce:	2f 92       	push	r2
      d0:	3f 92       	push	r3
      d2:	4f 92       	push	r4
      d4:	5f 92       	push	r5
      d6:	6f 92       	push	r6
      d8:	7f 92       	push	r7
      da:	8f 92       	push	r8
      dc:	9f 92       	push	r9
      de:	af 92       	push	r10
      e0:	bf 92       	push	r11
      e2:	cf 92       	push	r12
      e4:	df 92       	push	r13
      e6:	ef 92       	push	r14
      e8:	ff 92       	push	r15
      ea:	0f 93       	push	r16
      ec:	1f 93       	push	r17
      ee:	2f 93       	push	r18
      f0:	3f 93       	push	r19
      f2:	4f 93       	push	r20
      f4:	5f 93       	push	r21
      f6:	6f 93       	push	r22
      f8:	7f 93       	push	r23
      fa:	8f 93       	push	r24
      fc:	9f 93       	push	r25
      fe:	af 93       	push	r26
     100:	bf 93       	push	r27
     102:	cf 93       	push	r28
     104:	df 93       	push	r29
     106:	ef 93       	push	r30
     108:	ff 93       	push	r31
     10a:	ed b7       	in	r30, 0x3d	; 61
     10c:	fe b7       	in	r31, 0x3e	; 62
     10e:	21 a1       	ldd	r18, Z+33	; 0x21
     110:	30 a1       	ldd	r19, Z+32	; 0x20
     112:	01 a2       	std	Z+33, r0	; 0x21
     114:	10 a2       	std	Z+32, r1	; 0x20
     116:	11 24       	eor	r1, r1
     118:	8d b7       	in	r24, 0x3d	; 61
     11a:	9e b7       	in	r25, 0x3e	; 62
     11c:	2f 93       	push	r18
     11e:	3f 93       	push	r19
     120:	08 95       	ret

00000122 <osbme_load_context>:
     122:	3f 91       	pop	r19
     124:	2f 91       	pop	r18
     126:	9e bf       	out	0x3e, r25	; 62
     128:	8d bf       	out	0x3d, r24	; 61
     12a:	fe b7       	in	r31, 0x3e	; 62
     12c:	ed b7       	in	r30, 0x3d	; 61
     12e:	10 a0       	ldd	r1, Z+32	; 0x20
     130:	01 a0       	ldd	r0, Z+33	; 0x21
     132:	30 a3       	std	Z+32, r19	; 0x20
     134:	21 a3       	std	Z+33, r18	; 0x21
     136:	ff 91       	pop	r31
     138:	ef 91       	pop	r30
     13a:	df 91       	pop	r29
     13c:	cf 91       	pop	r28
     13e:	bf 91       	pop	r27
     140:	af 91       	pop	r26
     142:	9f 91       	pop	r25
     144:	8f 91       	pop	r24
     146:	7f 91       	pop	r23
     148:	6f 91       	pop	r22
     14a:	5f 91       	pop	r21
     14c:	4f 91       	pop	r20
     14e:	3f 91       	pop	r19
     150:	2f 91       	pop	r18
     152:	1f 91       	pop	r17
     154:	0f 91       	pop	r16
     156:	ff 90       	pop	r15
     158:	ef 90       	pop	r14
     15a:	df 90       	pop	r13
     15c:	cf 90       	pop	r12
     15e:	bf 90       	pop	r11
     160:	af 90       	pop	r10
     162:	9f 90       	pop	r9
     164:	8f 90       	pop	r8
     166:	7f 90       	pop	r7
     168:	6f 90       	pop	r6
     16a:	5f 90       	pop	r5
     16c:	4f 90       	pop	r4
     16e:	3f 90       	pop	r3
     170:	2f 90       	pop	r2
     172:	2f be       	out	0x3f, r2	; 63
     174:	2f 90       	pop	r2
     176:	08 95       	ret

00000178 <osbme_set_stack_pointer>:
     178:	1f 90       	pop	r1
     17a:	0f 90       	pop	r0
     17c:	9e bf       	out	0x3e, r25	; 62
     17e:	8d bf       	out	0x3d, r24	; 61
     180:	0f 92       	push	r0
     182:	1f 92       	push	r1
     184:	11 24       	eor	r1, r1
     186:	08 95       	ret

00000188 <_fpadd_parts>:
     188:	a0 e0       	ldi	r26, 0x00	; 0
     18a:	b0 e0       	ldi	r27, 0x00	; 0
     18c:	ea ec       	ldi	r30, 0xCA	; 202
     18e:	f0 e0       	ldi	r31, 0x00	; 0
     190:	0c 94 be 17 	jmp	0x2f7c	; 0x2f7c <__prologue_saves__>
     194:	dc 01       	movw	r26, r24
     196:	2b 01       	movw	r4, r22
     198:	fa 01       	movw	r30, r20
     19a:	9c 91       	ld	r25, X
     19c:	92 30       	cpi	r25, 0x02	; 2
     19e:	08 f4       	brcc	.+2      	; 0x1a2 <_fpadd_parts+0x1a>
     1a0:	39 c1       	rjmp	.+626    	; 0x414 <_fpadd_parts+0x28c>
     1a2:	eb 01       	movw	r28, r22
     1a4:	88 81       	ld	r24, Y
     1a6:	82 30       	cpi	r24, 0x02	; 2
     1a8:	08 f4       	brcc	.+2      	; 0x1ac <_fpadd_parts+0x24>
     1aa:	33 c1       	rjmp	.+614    	; 0x412 <_fpadd_parts+0x28a>
     1ac:	94 30       	cpi	r25, 0x04	; 4
     1ae:	69 f4       	brne	.+26     	; 0x1ca <_fpadd_parts+0x42>
     1b0:	84 30       	cpi	r24, 0x04	; 4
     1b2:	09 f0       	breq	.+2      	; 0x1b6 <_fpadd_parts+0x2e>
     1b4:	2f c1       	rjmp	.+606    	; 0x414 <_fpadd_parts+0x28c>
     1b6:	11 96       	adiw	r26, 0x01	; 1
     1b8:	9c 91       	ld	r25, X
     1ba:	11 97       	sbiw	r26, 0x01	; 1
     1bc:	89 81       	ldd	r24, Y+1	; 0x01
     1be:	98 17       	cp	r25, r24
     1c0:	09 f4       	brne	.+2      	; 0x1c4 <_fpadd_parts+0x3c>
     1c2:	28 c1       	rjmp	.+592    	; 0x414 <_fpadd_parts+0x28c>
     1c4:	a5 e0       	ldi	r26, 0x05	; 5
     1c6:	b1 e0       	ldi	r27, 0x01	; 1
     1c8:	25 c1       	rjmp	.+586    	; 0x414 <_fpadd_parts+0x28c>
     1ca:	84 30       	cpi	r24, 0x04	; 4
     1cc:	09 f4       	brne	.+2      	; 0x1d0 <_fpadd_parts+0x48>
     1ce:	21 c1       	rjmp	.+578    	; 0x412 <_fpadd_parts+0x28a>
     1d0:	82 30       	cpi	r24, 0x02	; 2
     1d2:	a9 f4       	brne	.+42     	; 0x1fe <_fpadd_parts+0x76>
     1d4:	92 30       	cpi	r25, 0x02	; 2
     1d6:	09 f0       	breq	.+2      	; 0x1da <_fpadd_parts+0x52>
     1d8:	1d c1       	rjmp	.+570    	; 0x414 <_fpadd_parts+0x28c>
     1da:	9a 01       	movw	r18, r20
     1dc:	ad 01       	movw	r20, r26
     1de:	88 e0       	ldi	r24, 0x08	; 8
     1e0:	ea 01       	movw	r28, r20
     1e2:	09 90       	ld	r0, Y+
     1e4:	ae 01       	movw	r20, r28
     1e6:	e9 01       	movw	r28, r18
     1e8:	09 92       	st	Y+, r0
     1ea:	9e 01       	movw	r18, r28
     1ec:	81 50       	subi	r24, 0x01	; 1
     1ee:	c1 f7       	brne	.-16     	; 0x1e0 <_fpadd_parts+0x58>
     1f0:	e2 01       	movw	r28, r4
     1f2:	89 81       	ldd	r24, Y+1	; 0x01
     1f4:	11 96       	adiw	r26, 0x01	; 1
     1f6:	9c 91       	ld	r25, X
     1f8:	89 23       	and	r24, r25
     1fa:	81 83       	std	Z+1, r24	; 0x01
     1fc:	08 c1       	rjmp	.+528    	; 0x40e <_fpadd_parts+0x286>
     1fe:	92 30       	cpi	r25, 0x02	; 2
     200:	09 f4       	brne	.+2      	; 0x204 <_fpadd_parts+0x7c>
     202:	07 c1       	rjmp	.+526    	; 0x412 <_fpadd_parts+0x28a>
     204:	12 96       	adiw	r26, 0x02	; 2
     206:	2d 90       	ld	r2, X+
     208:	3c 90       	ld	r3, X
     20a:	13 97       	sbiw	r26, 0x03	; 3
     20c:	eb 01       	movw	r28, r22
     20e:	8a 81       	ldd	r24, Y+2	; 0x02
     210:	9b 81       	ldd	r25, Y+3	; 0x03
     212:	14 96       	adiw	r26, 0x04	; 4
     214:	ad 90       	ld	r10, X+
     216:	bd 90       	ld	r11, X+
     218:	cd 90       	ld	r12, X+
     21a:	dc 90       	ld	r13, X
     21c:	17 97       	sbiw	r26, 0x07	; 7
     21e:	ec 80       	ldd	r14, Y+4	; 0x04
     220:	fd 80       	ldd	r15, Y+5	; 0x05
     222:	0e 81       	ldd	r16, Y+6	; 0x06
     224:	1f 81       	ldd	r17, Y+7	; 0x07
     226:	91 01       	movw	r18, r2
     228:	28 1b       	sub	r18, r24
     22a:	39 0b       	sbc	r19, r25
     22c:	b9 01       	movw	r22, r18
     22e:	37 ff       	sbrs	r19, 7
     230:	04 c0       	rjmp	.+8      	; 0x23a <_fpadd_parts+0xb2>
     232:	66 27       	eor	r22, r22
     234:	77 27       	eor	r23, r23
     236:	62 1b       	sub	r22, r18
     238:	73 0b       	sbc	r23, r19
     23a:	60 32       	cpi	r22, 0x20	; 32
     23c:	71 05       	cpc	r23, r1
     23e:	0c f0       	brlt	.+2      	; 0x242 <_fpadd_parts+0xba>
     240:	61 c0       	rjmp	.+194    	; 0x304 <_fpadd_parts+0x17c>
     242:	12 16       	cp	r1, r18
     244:	13 06       	cpc	r1, r19
     246:	6c f5       	brge	.+90     	; 0x2a2 <_fpadd_parts+0x11a>
     248:	37 01       	movw	r6, r14
     24a:	48 01       	movw	r8, r16
     24c:	06 2e       	mov	r0, r22
     24e:	04 c0       	rjmp	.+8      	; 0x258 <_fpadd_parts+0xd0>
     250:	96 94       	lsr	r9
     252:	87 94       	ror	r8
     254:	77 94       	ror	r7
     256:	67 94       	ror	r6
     258:	0a 94       	dec	r0
     25a:	d2 f7       	brpl	.-12     	; 0x250 <_fpadd_parts+0xc8>
     25c:	21 e0       	ldi	r18, 0x01	; 1
     25e:	30 e0       	ldi	r19, 0x00	; 0
     260:	40 e0       	ldi	r20, 0x00	; 0
     262:	50 e0       	ldi	r21, 0x00	; 0
     264:	04 c0       	rjmp	.+8      	; 0x26e <_fpadd_parts+0xe6>
     266:	22 0f       	add	r18, r18
     268:	33 1f       	adc	r19, r19
     26a:	44 1f       	adc	r20, r20
     26c:	55 1f       	adc	r21, r21
     26e:	6a 95       	dec	r22
     270:	d2 f7       	brpl	.-12     	; 0x266 <_fpadd_parts+0xde>
     272:	21 50       	subi	r18, 0x01	; 1
     274:	30 40       	sbci	r19, 0x00	; 0
     276:	40 40       	sbci	r20, 0x00	; 0
     278:	50 40       	sbci	r21, 0x00	; 0
     27a:	2e 21       	and	r18, r14
     27c:	3f 21       	and	r19, r15
     27e:	40 23       	and	r20, r16
     280:	51 23       	and	r21, r17
     282:	21 15       	cp	r18, r1
     284:	31 05       	cpc	r19, r1
     286:	41 05       	cpc	r20, r1
     288:	51 05       	cpc	r21, r1
     28a:	21 f0       	breq	.+8      	; 0x294 <_fpadd_parts+0x10c>
     28c:	21 e0       	ldi	r18, 0x01	; 1
     28e:	30 e0       	ldi	r19, 0x00	; 0
     290:	40 e0       	ldi	r20, 0x00	; 0
     292:	50 e0       	ldi	r21, 0x00	; 0
     294:	79 01       	movw	r14, r18
     296:	8a 01       	movw	r16, r20
     298:	e6 28       	or	r14, r6
     29a:	f7 28       	or	r15, r7
     29c:	08 29       	or	r16, r8
     29e:	19 29       	or	r17, r9
     2a0:	3c c0       	rjmp	.+120    	; 0x31a <_fpadd_parts+0x192>
     2a2:	23 2b       	or	r18, r19
     2a4:	d1 f1       	breq	.+116    	; 0x31a <_fpadd_parts+0x192>
     2a6:	26 0e       	add	r2, r22
     2a8:	37 1e       	adc	r3, r23
     2aa:	35 01       	movw	r6, r10
     2ac:	46 01       	movw	r8, r12
     2ae:	06 2e       	mov	r0, r22
     2b0:	04 c0       	rjmp	.+8      	; 0x2ba <_fpadd_parts+0x132>
     2b2:	96 94       	lsr	r9
     2b4:	87 94       	ror	r8
     2b6:	77 94       	ror	r7
     2b8:	67 94       	ror	r6
     2ba:	0a 94       	dec	r0
     2bc:	d2 f7       	brpl	.-12     	; 0x2b2 <_fpadd_parts+0x12a>
     2be:	21 e0       	ldi	r18, 0x01	; 1
     2c0:	30 e0       	ldi	r19, 0x00	; 0
     2c2:	40 e0       	ldi	r20, 0x00	; 0
     2c4:	50 e0       	ldi	r21, 0x00	; 0
     2c6:	04 c0       	rjmp	.+8      	; 0x2d0 <_fpadd_parts+0x148>
     2c8:	22 0f       	add	r18, r18
     2ca:	33 1f       	adc	r19, r19
     2cc:	44 1f       	adc	r20, r20
     2ce:	55 1f       	adc	r21, r21
     2d0:	6a 95       	dec	r22
     2d2:	d2 f7       	brpl	.-12     	; 0x2c8 <_fpadd_parts+0x140>
     2d4:	21 50       	subi	r18, 0x01	; 1
     2d6:	30 40       	sbci	r19, 0x00	; 0
     2d8:	40 40       	sbci	r20, 0x00	; 0
     2da:	50 40       	sbci	r21, 0x00	; 0
     2dc:	2a 21       	and	r18, r10
     2de:	3b 21       	and	r19, r11
     2e0:	4c 21       	and	r20, r12
     2e2:	5d 21       	and	r21, r13
     2e4:	21 15       	cp	r18, r1
     2e6:	31 05       	cpc	r19, r1
     2e8:	41 05       	cpc	r20, r1
     2ea:	51 05       	cpc	r21, r1
     2ec:	21 f0       	breq	.+8      	; 0x2f6 <_fpadd_parts+0x16e>
     2ee:	21 e0       	ldi	r18, 0x01	; 1
     2f0:	30 e0       	ldi	r19, 0x00	; 0
     2f2:	40 e0       	ldi	r20, 0x00	; 0
     2f4:	50 e0       	ldi	r21, 0x00	; 0
     2f6:	59 01       	movw	r10, r18
     2f8:	6a 01       	movw	r12, r20
     2fa:	a6 28       	or	r10, r6
     2fc:	b7 28       	or	r11, r7
     2fe:	c8 28       	or	r12, r8
     300:	d9 28       	or	r13, r9
     302:	0b c0       	rjmp	.+22     	; 0x31a <_fpadd_parts+0x192>
     304:	82 15       	cp	r24, r2
     306:	93 05       	cpc	r25, r3
     308:	2c f0       	brlt	.+10     	; 0x314 <_fpadd_parts+0x18c>
     30a:	1c 01       	movw	r2, r24
     30c:	aa 24       	eor	r10, r10
     30e:	bb 24       	eor	r11, r11
     310:	65 01       	movw	r12, r10
     312:	03 c0       	rjmp	.+6      	; 0x31a <_fpadd_parts+0x192>
     314:	ee 24       	eor	r14, r14
     316:	ff 24       	eor	r15, r15
     318:	87 01       	movw	r16, r14
     31a:	11 96       	adiw	r26, 0x01	; 1
     31c:	9c 91       	ld	r25, X
     31e:	d2 01       	movw	r26, r4
     320:	11 96       	adiw	r26, 0x01	; 1
     322:	8c 91       	ld	r24, X
     324:	98 17       	cp	r25, r24
     326:	09 f4       	brne	.+2      	; 0x32a <_fpadd_parts+0x1a2>
     328:	45 c0       	rjmp	.+138    	; 0x3b4 <_fpadd_parts+0x22c>
     32a:	99 23       	and	r25, r25
     32c:	39 f0       	breq	.+14     	; 0x33c <_fpadd_parts+0x1b4>
     32e:	a8 01       	movw	r20, r16
     330:	97 01       	movw	r18, r14
     332:	2a 19       	sub	r18, r10
     334:	3b 09       	sbc	r19, r11
     336:	4c 09       	sbc	r20, r12
     338:	5d 09       	sbc	r21, r13
     33a:	06 c0       	rjmp	.+12     	; 0x348 <_fpadd_parts+0x1c0>
     33c:	a6 01       	movw	r20, r12
     33e:	95 01       	movw	r18, r10
     340:	2e 19       	sub	r18, r14
     342:	3f 09       	sbc	r19, r15
     344:	40 0b       	sbc	r20, r16
     346:	51 0b       	sbc	r21, r17
     348:	57 fd       	sbrc	r21, 7
     34a:	08 c0       	rjmp	.+16     	; 0x35c <_fpadd_parts+0x1d4>
     34c:	11 82       	std	Z+1, r1	; 0x01
     34e:	33 82       	std	Z+3, r3	; 0x03
     350:	22 82       	std	Z+2, r2	; 0x02
     352:	24 83       	std	Z+4, r18	; 0x04
     354:	35 83       	std	Z+5, r19	; 0x05
     356:	46 83       	std	Z+6, r20	; 0x06
     358:	57 83       	std	Z+7, r21	; 0x07
     35a:	1d c0       	rjmp	.+58     	; 0x396 <_fpadd_parts+0x20e>
     35c:	81 e0       	ldi	r24, 0x01	; 1
     35e:	81 83       	std	Z+1, r24	; 0x01
     360:	33 82       	std	Z+3, r3	; 0x03
     362:	22 82       	std	Z+2, r2	; 0x02
     364:	88 27       	eor	r24, r24
     366:	99 27       	eor	r25, r25
     368:	dc 01       	movw	r26, r24
     36a:	82 1b       	sub	r24, r18
     36c:	93 0b       	sbc	r25, r19
     36e:	a4 0b       	sbc	r26, r20
     370:	b5 0b       	sbc	r27, r21
     372:	84 83       	std	Z+4, r24	; 0x04
     374:	95 83       	std	Z+5, r25	; 0x05
     376:	a6 83       	std	Z+6, r26	; 0x06
     378:	b7 83       	std	Z+7, r27	; 0x07
     37a:	0d c0       	rjmp	.+26     	; 0x396 <_fpadd_parts+0x20e>
     37c:	22 0f       	add	r18, r18
     37e:	33 1f       	adc	r19, r19
     380:	44 1f       	adc	r20, r20
     382:	55 1f       	adc	r21, r21
     384:	24 83       	std	Z+4, r18	; 0x04
     386:	35 83       	std	Z+5, r19	; 0x05
     388:	46 83       	std	Z+6, r20	; 0x06
     38a:	57 83       	std	Z+7, r21	; 0x07
     38c:	82 81       	ldd	r24, Z+2	; 0x02
     38e:	93 81       	ldd	r25, Z+3	; 0x03
     390:	01 97       	sbiw	r24, 0x01	; 1
     392:	93 83       	std	Z+3, r25	; 0x03
     394:	82 83       	std	Z+2, r24	; 0x02
     396:	24 81       	ldd	r18, Z+4	; 0x04
     398:	35 81       	ldd	r19, Z+5	; 0x05
     39a:	46 81       	ldd	r20, Z+6	; 0x06
     39c:	57 81       	ldd	r21, Z+7	; 0x07
     39e:	da 01       	movw	r26, r20
     3a0:	c9 01       	movw	r24, r18
     3a2:	01 97       	sbiw	r24, 0x01	; 1
     3a4:	a1 09       	sbc	r26, r1
     3a6:	b1 09       	sbc	r27, r1
     3a8:	8f 5f       	subi	r24, 0xFF	; 255
     3aa:	9f 4f       	sbci	r25, 0xFF	; 255
     3ac:	af 4f       	sbci	r26, 0xFF	; 255
     3ae:	bf 43       	sbci	r27, 0x3F	; 63
     3b0:	28 f3       	brcs	.-54     	; 0x37c <_fpadd_parts+0x1f4>
     3b2:	0b c0       	rjmp	.+22     	; 0x3ca <_fpadd_parts+0x242>
     3b4:	91 83       	std	Z+1, r25	; 0x01
     3b6:	33 82       	std	Z+3, r3	; 0x03
     3b8:	22 82       	std	Z+2, r2	; 0x02
     3ba:	ea 0c       	add	r14, r10
     3bc:	fb 1c       	adc	r15, r11
     3be:	0c 1d       	adc	r16, r12
     3c0:	1d 1d       	adc	r17, r13
     3c2:	e4 82       	std	Z+4, r14	; 0x04
     3c4:	f5 82       	std	Z+5, r15	; 0x05
     3c6:	06 83       	std	Z+6, r16	; 0x06
     3c8:	17 83       	std	Z+7, r17	; 0x07
     3ca:	83 e0       	ldi	r24, 0x03	; 3
     3cc:	80 83       	st	Z, r24
     3ce:	24 81       	ldd	r18, Z+4	; 0x04
     3d0:	35 81       	ldd	r19, Z+5	; 0x05
     3d2:	46 81       	ldd	r20, Z+6	; 0x06
     3d4:	57 81       	ldd	r21, Z+7	; 0x07
     3d6:	57 ff       	sbrs	r21, 7
     3d8:	1a c0       	rjmp	.+52     	; 0x40e <_fpadd_parts+0x286>
     3da:	c9 01       	movw	r24, r18
     3dc:	aa 27       	eor	r26, r26
     3de:	97 fd       	sbrc	r25, 7
     3e0:	a0 95       	com	r26
     3e2:	ba 2f       	mov	r27, r26
     3e4:	81 70       	andi	r24, 0x01	; 1
     3e6:	90 70       	andi	r25, 0x00	; 0
     3e8:	a0 70       	andi	r26, 0x00	; 0
     3ea:	b0 70       	andi	r27, 0x00	; 0
     3ec:	56 95       	lsr	r21
     3ee:	47 95       	ror	r20
     3f0:	37 95       	ror	r19
     3f2:	27 95       	ror	r18
     3f4:	82 2b       	or	r24, r18
     3f6:	93 2b       	or	r25, r19
     3f8:	a4 2b       	or	r26, r20
     3fa:	b5 2b       	or	r27, r21
     3fc:	84 83       	std	Z+4, r24	; 0x04
     3fe:	95 83       	std	Z+5, r25	; 0x05
     400:	a6 83       	std	Z+6, r26	; 0x06
     402:	b7 83       	std	Z+7, r27	; 0x07
     404:	82 81       	ldd	r24, Z+2	; 0x02
     406:	93 81       	ldd	r25, Z+3	; 0x03
     408:	01 96       	adiw	r24, 0x01	; 1
     40a:	93 83       	std	Z+3, r25	; 0x03
     40c:	82 83       	std	Z+2, r24	; 0x02
     40e:	df 01       	movw	r26, r30
     410:	01 c0       	rjmp	.+2      	; 0x414 <_fpadd_parts+0x28c>
     412:	d2 01       	movw	r26, r4
     414:	cd 01       	movw	r24, r26
     416:	cd b7       	in	r28, 0x3d	; 61
     418:	de b7       	in	r29, 0x3e	; 62
     41a:	e2 e1       	ldi	r30, 0x12	; 18
     41c:	0c 94 da 17 	jmp	0x2fb4	; 0x2fb4 <__epilogue_restores__>

00000420 <__subsf3>:
     420:	a0 e2       	ldi	r26, 0x20	; 32
     422:	b0 e0       	ldi	r27, 0x00	; 0
     424:	e6 e1       	ldi	r30, 0x16	; 22
     426:	f2 e0       	ldi	r31, 0x02	; 2
     428:	0c 94 ca 17 	jmp	0x2f94	; 0x2f94 <__prologue_saves__+0x18>
     42c:	69 83       	std	Y+1, r22	; 0x01
     42e:	7a 83       	std	Y+2, r23	; 0x02
     430:	8b 83       	std	Y+3, r24	; 0x03
     432:	9c 83       	std	Y+4, r25	; 0x04
     434:	2d 83       	std	Y+5, r18	; 0x05
     436:	3e 83       	std	Y+6, r19	; 0x06
     438:	4f 83       	std	Y+7, r20	; 0x07
     43a:	58 87       	std	Y+8, r21	; 0x08
     43c:	e9 e0       	ldi	r30, 0x09	; 9
     43e:	ee 2e       	mov	r14, r30
     440:	f1 2c       	mov	r15, r1
     442:	ec 0e       	add	r14, r28
     444:	fd 1e       	adc	r15, r29
     446:	ce 01       	movw	r24, r28
     448:	01 96       	adiw	r24, 0x01	; 1
     44a:	b7 01       	movw	r22, r14
     44c:	0e 94 3d 04 	call	0x87a	; 0x87a <__unpack_f>
     450:	8e 01       	movw	r16, r28
     452:	0f 5e       	subi	r16, 0xEF	; 239
     454:	1f 4f       	sbci	r17, 0xFF	; 255
     456:	ce 01       	movw	r24, r28
     458:	05 96       	adiw	r24, 0x05	; 5
     45a:	b8 01       	movw	r22, r16
     45c:	0e 94 3d 04 	call	0x87a	; 0x87a <__unpack_f>
     460:	8a 89       	ldd	r24, Y+18	; 0x12
     462:	91 e0       	ldi	r25, 0x01	; 1
     464:	89 27       	eor	r24, r25
     466:	8a 8b       	std	Y+18, r24	; 0x12
     468:	c7 01       	movw	r24, r14
     46a:	b8 01       	movw	r22, r16
     46c:	ae 01       	movw	r20, r28
     46e:	47 5e       	subi	r20, 0xE7	; 231
     470:	5f 4f       	sbci	r21, 0xFF	; 255
     472:	0e 94 c4 00 	call	0x188	; 0x188 <_fpadd_parts>
     476:	0e 94 68 03 	call	0x6d0	; 0x6d0 <__pack_f>
     47a:	a0 96       	adiw	r28, 0x20	; 32
     47c:	e6 e0       	ldi	r30, 0x06	; 6
     47e:	0c 94 e6 17 	jmp	0x2fcc	; 0x2fcc <__epilogue_restores__+0x18>

00000482 <__addsf3>:
     482:	a0 e2       	ldi	r26, 0x20	; 32
     484:	b0 e0       	ldi	r27, 0x00	; 0
     486:	e7 e4       	ldi	r30, 0x47	; 71
     488:	f2 e0       	ldi	r31, 0x02	; 2
     48a:	0c 94 ca 17 	jmp	0x2f94	; 0x2f94 <__prologue_saves__+0x18>
     48e:	69 83       	std	Y+1, r22	; 0x01
     490:	7a 83       	std	Y+2, r23	; 0x02
     492:	8b 83       	std	Y+3, r24	; 0x03
     494:	9c 83       	std	Y+4, r25	; 0x04
     496:	2d 83       	std	Y+5, r18	; 0x05
     498:	3e 83       	std	Y+6, r19	; 0x06
     49a:	4f 83       	std	Y+7, r20	; 0x07
     49c:	58 87       	std	Y+8, r21	; 0x08
     49e:	f9 e0       	ldi	r31, 0x09	; 9
     4a0:	ef 2e       	mov	r14, r31
     4a2:	f1 2c       	mov	r15, r1
     4a4:	ec 0e       	add	r14, r28
     4a6:	fd 1e       	adc	r15, r29
     4a8:	ce 01       	movw	r24, r28
     4aa:	01 96       	adiw	r24, 0x01	; 1
     4ac:	b7 01       	movw	r22, r14
     4ae:	0e 94 3d 04 	call	0x87a	; 0x87a <__unpack_f>
     4b2:	8e 01       	movw	r16, r28
     4b4:	0f 5e       	subi	r16, 0xEF	; 239
     4b6:	1f 4f       	sbci	r17, 0xFF	; 255
     4b8:	ce 01       	movw	r24, r28
     4ba:	05 96       	adiw	r24, 0x05	; 5
     4bc:	b8 01       	movw	r22, r16
     4be:	0e 94 3d 04 	call	0x87a	; 0x87a <__unpack_f>
     4c2:	c7 01       	movw	r24, r14
     4c4:	b8 01       	movw	r22, r16
     4c6:	ae 01       	movw	r20, r28
     4c8:	47 5e       	subi	r20, 0xE7	; 231
     4ca:	5f 4f       	sbci	r21, 0xFF	; 255
     4cc:	0e 94 c4 00 	call	0x188	; 0x188 <_fpadd_parts>
     4d0:	0e 94 68 03 	call	0x6d0	; 0x6d0 <__pack_f>
     4d4:	a0 96       	adiw	r28, 0x20	; 32
     4d6:	e6 e0       	ldi	r30, 0x06	; 6
     4d8:	0c 94 e6 17 	jmp	0x2fcc	; 0x2fcc <__epilogue_restores__+0x18>

000004dc <__mulsf3>:
     4dc:	a0 e2       	ldi	r26, 0x20	; 32
     4de:	b0 e0       	ldi	r27, 0x00	; 0
     4e0:	e4 e7       	ldi	r30, 0x74	; 116
     4e2:	f2 e0       	ldi	r31, 0x02	; 2
     4e4:	0c 94 be 17 	jmp	0x2f7c	; 0x2f7c <__prologue_saves__>
     4e8:	69 83       	std	Y+1, r22	; 0x01
     4ea:	7a 83       	std	Y+2, r23	; 0x02
     4ec:	8b 83       	std	Y+3, r24	; 0x03
     4ee:	9c 83       	std	Y+4, r25	; 0x04
     4f0:	2d 83       	std	Y+5, r18	; 0x05
     4f2:	3e 83       	std	Y+6, r19	; 0x06
     4f4:	4f 83       	std	Y+7, r20	; 0x07
     4f6:	58 87       	std	Y+8, r21	; 0x08
     4f8:	ce 01       	movw	r24, r28
     4fa:	01 96       	adiw	r24, 0x01	; 1
     4fc:	be 01       	movw	r22, r28
     4fe:	67 5f       	subi	r22, 0xF7	; 247
     500:	7f 4f       	sbci	r23, 0xFF	; 255
     502:	0e 94 3d 04 	call	0x87a	; 0x87a <__unpack_f>
     506:	ce 01       	movw	r24, r28
     508:	05 96       	adiw	r24, 0x05	; 5
     50a:	be 01       	movw	r22, r28
     50c:	6f 5e       	subi	r22, 0xEF	; 239
     50e:	7f 4f       	sbci	r23, 0xFF	; 255
     510:	0e 94 3d 04 	call	0x87a	; 0x87a <__unpack_f>
     514:	99 85       	ldd	r25, Y+9	; 0x09
     516:	92 30       	cpi	r25, 0x02	; 2
     518:	88 f0       	brcs	.+34     	; 0x53c <__mulsf3+0x60>
     51a:	89 89       	ldd	r24, Y+17	; 0x11
     51c:	82 30       	cpi	r24, 0x02	; 2
     51e:	c8 f0       	brcs	.+50     	; 0x552 <__mulsf3+0x76>
     520:	94 30       	cpi	r25, 0x04	; 4
     522:	19 f4       	brne	.+6      	; 0x52a <__mulsf3+0x4e>
     524:	82 30       	cpi	r24, 0x02	; 2
     526:	51 f4       	brne	.+20     	; 0x53c <__mulsf3+0x60>
     528:	04 c0       	rjmp	.+8      	; 0x532 <__mulsf3+0x56>
     52a:	84 30       	cpi	r24, 0x04	; 4
     52c:	29 f4       	brne	.+10     	; 0x538 <__mulsf3+0x5c>
     52e:	92 30       	cpi	r25, 0x02	; 2
     530:	81 f4       	brne	.+32     	; 0x552 <__mulsf3+0x76>
     532:	85 e0       	ldi	r24, 0x05	; 5
     534:	91 e0       	ldi	r25, 0x01	; 1
     536:	c6 c0       	rjmp	.+396    	; 0x6c4 <__mulsf3+0x1e8>
     538:	92 30       	cpi	r25, 0x02	; 2
     53a:	49 f4       	brne	.+18     	; 0x54e <__mulsf3+0x72>
     53c:	20 e0       	ldi	r18, 0x00	; 0
     53e:	9a 85       	ldd	r25, Y+10	; 0x0a
     540:	8a 89       	ldd	r24, Y+18	; 0x12
     542:	98 13       	cpse	r25, r24
     544:	21 e0       	ldi	r18, 0x01	; 1
     546:	2a 87       	std	Y+10, r18	; 0x0a
     548:	ce 01       	movw	r24, r28
     54a:	09 96       	adiw	r24, 0x09	; 9
     54c:	bb c0       	rjmp	.+374    	; 0x6c4 <__mulsf3+0x1e8>
     54e:	82 30       	cpi	r24, 0x02	; 2
     550:	49 f4       	brne	.+18     	; 0x564 <__mulsf3+0x88>
     552:	20 e0       	ldi	r18, 0x00	; 0
     554:	9a 85       	ldd	r25, Y+10	; 0x0a
     556:	8a 89       	ldd	r24, Y+18	; 0x12
     558:	98 13       	cpse	r25, r24
     55a:	21 e0       	ldi	r18, 0x01	; 1
     55c:	2a 8b       	std	Y+18, r18	; 0x12
     55e:	ce 01       	movw	r24, r28
     560:	41 96       	adiw	r24, 0x11	; 17
     562:	b0 c0       	rjmp	.+352    	; 0x6c4 <__mulsf3+0x1e8>
     564:	2d 84       	ldd	r2, Y+13	; 0x0d
     566:	3e 84       	ldd	r3, Y+14	; 0x0e
     568:	4f 84       	ldd	r4, Y+15	; 0x0f
     56a:	58 88       	ldd	r5, Y+16	; 0x10
     56c:	6d 88       	ldd	r6, Y+21	; 0x15
     56e:	7e 88       	ldd	r7, Y+22	; 0x16
     570:	8f 88       	ldd	r8, Y+23	; 0x17
     572:	98 8c       	ldd	r9, Y+24	; 0x18
     574:	ee 24       	eor	r14, r14
     576:	ff 24       	eor	r15, r15
     578:	87 01       	movw	r16, r14
     57a:	aa 24       	eor	r10, r10
     57c:	bb 24       	eor	r11, r11
     57e:	65 01       	movw	r12, r10
     580:	40 e0       	ldi	r20, 0x00	; 0
     582:	50 e0       	ldi	r21, 0x00	; 0
     584:	60 e0       	ldi	r22, 0x00	; 0
     586:	70 e0       	ldi	r23, 0x00	; 0
     588:	e0 e0       	ldi	r30, 0x00	; 0
     58a:	f0 e0       	ldi	r31, 0x00	; 0
     58c:	c1 01       	movw	r24, r2
     58e:	81 70       	andi	r24, 0x01	; 1
     590:	90 70       	andi	r25, 0x00	; 0
     592:	89 2b       	or	r24, r25
     594:	e9 f0       	breq	.+58     	; 0x5d0 <__mulsf3+0xf4>
     596:	e6 0c       	add	r14, r6
     598:	f7 1c       	adc	r15, r7
     59a:	08 1d       	adc	r16, r8
     59c:	19 1d       	adc	r17, r9
     59e:	9a 01       	movw	r18, r20
     5a0:	ab 01       	movw	r20, r22
     5a2:	2a 0d       	add	r18, r10
     5a4:	3b 1d       	adc	r19, r11
     5a6:	4c 1d       	adc	r20, r12
     5a8:	5d 1d       	adc	r21, r13
     5aa:	80 e0       	ldi	r24, 0x00	; 0
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	a0 e0       	ldi	r26, 0x00	; 0
     5b0:	b0 e0       	ldi	r27, 0x00	; 0
     5b2:	e6 14       	cp	r14, r6
     5b4:	f7 04       	cpc	r15, r7
     5b6:	08 05       	cpc	r16, r8
     5b8:	19 05       	cpc	r17, r9
     5ba:	20 f4       	brcc	.+8      	; 0x5c4 <__mulsf3+0xe8>
     5bc:	81 e0       	ldi	r24, 0x01	; 1
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	a0 e0       	ldi	r26, 0x00	; 0
     5c2:	b0 e0       	ldi	r27, 0x00	; 0
     5c4:	ba 01       	movw	r22, r20
     5c6:	a9 01       	movw	r20, r18
     5c8:	48 0f       	add	r20, r24
     5ca:	59 1f       	adc	r21, r25
     5cc:	6a 1f       	adc	r22, r26
     5ce:	7b 1f       	adc	r23, r27
     5d0:	aa 0c       	add	r10, r10
     5d2:	bb 1c       	adc	r11, r11
     5d4:	cc 1c       	adc	r12, r12
     5d6:	dd 1c       	adc	r13, r13
     5d8:	97 fe       	sbrs	r9, 7
     5da:	08 c0       	rjmp	.+16     	; 0x5ec <__mulsf3+0x110>
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	a0 e0       	ldi	r26, 0x00	; 0
     5e2:	b0 e0       	ldi	r27, 0x00	; 0
     5e4:	a8 2a       	or	r10, r24
     5e6:	b9 2a       	or	r11, r25
     5e8:	ca 2a       	or	r12, r26
     5ea:	db 2a       	or	r13, r27
     5ec:	31 96       	adiw	r30, 0x01	; 1
     5ee:	e0 32       	cpi	r30, 0x20	; 32
     5f0:	f1 05       	cpc	r31, r1
     5f2:	49 f0       	breq	.+18     	; 0x606 <__mulsf3+0x12a>
     5f4:	66 0c       	add	r6, r6
     5f6:	77 1c       	adc	r7, r7
     5f8:	88 1c       	adc	r8, r8
     5fa:	99 1c       	adc	r9, r9
     5fc:	56 94       	lsr	r5
     5fe:	47 94       	ror	r4
     600:	37 94       	ror	r3
     602:	27 94       	ror	r2
     604:	c3 cf       	rjmp	.-122    	; 0x58c <__mulsf3+0xb0>
     606:	fa 85       	ldd	r31, Y+10	; 0x0a
     608:	ea 89       	ldd	r30, Y+18	; 0x12
     60a:	2b 89       	ldd	r18, Y+19	; 0x13
     60c:	3c 89       	ldd	r19, Y+20	; 0x14
     60e:	8b 85       	ldd	r24, Y+11	; 0x0b
     610:	9c 85       	ldd	r25, Y+12	; 0x0c
     612:	28 0f       	add	r18, r24
     614:	39 1f       	adc	r19, r25
     616:	2e 5f       	subi	r18, 0xFE	; 254
     618:	3f 4f       	sbci	r19, 0xFF	; 255
     61a:	17 c0       	rjmp	.+46     	; 0x64a <__mulsf3+0x16e>
     61c:	ca 01       	movw	r24, r20
     61e:	81 70       	andi	r24, 0x01	; 1
     620:	90 70       	andi	r25, 0x00	; 0
     622:	89 2b       	or	r24, r25
     624:	61 f0       	breq	.+24     	; 0x63e <__mulsf3+0x162>
     626:	16 95       	lsr	r17
     628:	07 95       	ror	r16
     62a:	f7 94       	ror	r15
     62c:	e7 94       	ror	r14
     62e:	80 e0       	ldi	r24, 0x00	; 0
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	a0 e0       	ldi	r26, 0x00	; 0
     634:	b0 e8       	ldi	r27, 0x80	; 128
     636:	e8 2a       	or	r14, r24
     638:	f9 2a       	or	r15, r25
     63a:	0a 2b       	or	r16, r26
     63c:	1b 2b       	or	r17, r27
     63e:	76 95       	lsr	r23
     640:	67 95       	ror	r22
     642:	57 95       	ror	r21
     644:	47 95       	ror	r20
     646:	2f 5f       	subi	r18, 0xFF	; 255
     648:	3f 4f       	sbci	r19, 0xFF	; 255
     64a:	77 fd       	sbrc	r23, 7
     64c:	e7 cf       	rjmp	.-50     	; 0x61c <__mulsf3+0x140>
     64e:	0c c0       	rjmp	.+24     	; 0x668 <__mulsf3+0x18c>
     650:	44 0f       	add	r20, r20
     652:	55 1f       	adc	r21, r21
     654:	66 1f       	adc	r22, r22
     656:	77 1f       	adc	r23, r23
     658:	17 fd       	sbrc	r17, 7
     65a:	41 60       	ori	r20, 0x01	; 1
     65c:	ee 0c       	add	r14, r14
     65e:	ff 1c       	adc	r15, r15
     660:	00 1f       	adc	r16, r16
     662:	11 1f       	adc	r17, r17
     664:	21 50       	subi	r18, 0x01	; 1
     666:	30 40       	sbci	r19, 0x00	; 0
     668:	40 30       	cpi	r20, 0x00	; 0
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	59 07       	cpc	r21, r25
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	69 07       	cpc	r22, r25
     672:	90 e4       	ldi	r25, 0x40	; 64
     674:	79 07       	cpc	r23, r25
     676:	60 f3       	brcs	.-40     	; 0x650 <__mulsf3+0x174>
     678:	2b 8f       	std	Y+27, r18	; 0x1b
     67a:	3c 8f       	std	Y+28, r19	; 0x1c
     67c:	db 01       	movw	r26, r22
     67e:	ca 01       	movw	r24, r20
     680:	8f 77       	andi	r24, 0x7F	; 127
     682:	90 70       	andi	r25, 0x00	; 0
     684:	a0 70       	andi	r26, 0x00	; 0
     686:	b0 70       	andi	r27, 0x00	; 0
     688:	80 34       	cpi	r24, 0x40	; 64
     68a:	91 05       	cpc	r25, r1
     68c:	a1 05       	cpc	r26, r1
     68e:	b1 05       	cpc	r27, r1
     690:	61 f4       	brne	.+24     	; 0x6aa <__mulsf3+0x1ce>
     692:	47 fd       	sbrc	r20, 7
     694:	0a c0       	rjmp	.+20     	; 0x6aa <__mulsf3+0x1ce>
     696:	e1 14       	cp	r14, r1
     698:	f1 04       	cpc	r15, r1
     69a:	01 05       	cpc	r16, r1
     69c:	11 05       	cpc	r17, r1
     69e:	29 f0       	breq	.+10     	; 0x6aa <__mulsf3+0x1ce>
     6a0:	40 5c       	subi	r20, 0xC0	; 192
     6a2:	5f 4f       	sbci	r21, 0xFF	; 255
     6a4:	6f 4f       	sbci	r22, 0xFF	; 255
     6a6:	7f 4f       	sbci	r23, 0xFF	; 255
     6a8:	40 78       	andi	r20, 0x80	; 128
     6aa:	1a 8e       	std	Y+26, r1	; 0x1a
     6ac:	fe 17       	cp	r31, r30
     6ae:	11 f0       	breq	.+4      	; 0x6b4 <__mulsf3+0x1d8>
     6b0:	81 e0       	ldi	r24, 0x01	; 1
     6b2:	8a 8f       	std	Y+26, r24	; 0x1a
     6b4:	4d 8f       	std	Y+29, r20	; 0x1d
     6b6:	5e 8f       	std	Y+30, r21	; 0x1e
     6b8:	6f 8f       	std	Y+31, r22	; 0x1f
     6ba:	78 a3       	std	Y+32, r23	; 0x20
     6bc:	83 e0       	ldi	r24, 0x03	; 3
     6be:	89 8f       	std	Y+25, r24	; 0x19
     6c0:	ce 01       	movw	r24, r28
     6c2:	49 96       	adiw	r24, 0x19	; 25
     6c4:	0e 94 68 03 	call	0x6d0	; 0x6d0 <__pack_f>
     6c8:	a0 96       	adiw	r28, 0x20	; 32
     6ca:	e2 e1       	ldi	r30, 0x12	; 18
     6cc:	0c 94 da 17 	jmp	0x2fb4	; 0x2fb4 <__epilogue_restores__>

000006d0 <__pack_f>:
     6d0:	df 92       	push	r13
     6d2:	ef 92       	push	r14
     6d4:	ff 92       	push	r15
     6d6:	0f 93       	push	r16
     6d8:	1f 93       	push	r17
     6da:	fc 01       	movw	r30, r24
     6dc:	e4 80       	ldd	r14, Z+4	; 0x04
     6de:	f5 80       	ldd	r15, Z+5	; 0x05
     6e0:	06 81       	ldd	r16, Z+6	; 0x06
     6e2:	17 81       	ldd	r17, Z+7	; 0x07
     6e4:	d1 80       	ldd	r13, Z+1	; 0x01
     6e6:	80 81       	ld	r24, Z
     6e8:	82 30       	cpi	r24, 0x02	; 2
     6ea:	48 f4       	brcc	.+18     	; 0x6fe <__pack_f+0x2e>
     6ec:	80 e0       	ldi	r24, 0x00	; 0
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	a0 e1       	ldi	r26, 0x10	; 16
     6f2:	b0 e0       	ldi	r27, 0x00	; 0
     6f4:	e8 2a       	or	r14, r24
     6f6:	f9 2a       	or	r15, r25
     6f8:	0a 2b       	or	r16, r26
     6fa:	1b 2b       	or	r17, r27
     6fc:	a5 c0       	rjmp	.+330    	; 0x848 <__pack_f+0x178>
     6fe:	84 30       	cpi	r24, 0x04	; 4
     700:	09 f4       	brne	.+2      	; 0x704 <__pack_f+0x34>
     702:	9f c0       	rjmp	.+318    	; 0x842 <__pack_f+0x172>
     704:	82 30       	cpi	r24, 0x02	; 2
     706:	21 f4       	brne	.+8      	; 0x710 <__pack_f+0x40>
     708:	ee 24       	eor	r14, r14
     70a:	ff 24       	eor	r15, r15
     70c:	87 01       	movw	r16, r14
     70e:	05 c0       	rjmp	.+10     	; 0x71a <__pack_f+0x4a>
     710:	e1 14       	cp	r14, r1
     712:	f1 04       	cpc	r15, r1
     714:	01 05       	cpc	r16, r1
     716:	11 05       	cpc	r17, r1
     718:	19 f4       	brne	.+6      	; 0x720 <__pack_f+0x50>
     71a:	e0 e0       	ldi	r30, 0x00	; 0
     71c:	f0 e0       	ldi	r31, 0x00	; 0
     71e:	96 c0       	rjmp	.+300    	; 0x84c <__pack_f+0x17c>
     720:	62 81       	ldd	r22, Z+2	; 0x02
     722:	73 81       	ldd	r23, Z+3	; 0x03
     724:	9f ef       	ldi	r25, 0xFF	; 255
     726:	62 38       	cpi	r22, 0x82	; 130
     728:	79 07       	cpc	r23, r25
     72a:	0c f0       	brlt	.+2      	; 0x72e <__pack_f+0x5e>
     72c:	5b c0       	rjmp	.+182    	; 0x7e4 <__pack_f+0x114>
     72e:	22 e8       	ldi	r18, 0x82	; 130
     730:	3f ef       	ldi	r19, 0xFF	; 255
     732:	26 1b       	sub	r18, r22
     734:	37 0b       	sbc	r19, r23
     736:	2a 31       	cpi	r18, 0x1A	; 26
     738:	31 05       	cpc	r19, r1
     73a:	2c f0       	brlt	.+10     	; 0x746 <__pack_f+0x76>
     73c:	20 e0       	ldi	r18, 0x00	; 0
     73e:	30 e0       	ldi	r19, 0x00	; 0
     740:	40 e0       	ldi	r20, 0x00	; 0
     742:	50 e0       	ldi	r21, 0x00	; 0
     744:	2a c0       	rjmp	.+84     	; 0x79a <__pack_f+0xca>
     746:	b8 01       	movw	r22, r16
     748:	a7 01       	movw	r20, r14
     74a:	02 2e       	mov	r0, r18
     74c:	04 c0       	rjmp	.+8      	; 0x756 <__pack_f+0x86>
     74e:	76 95       	lsr	r23
     750:	67 95       	ror	r22
     752:	57 95       	ror	r21
     754:	47 95       	ror	r20
     756:	0a 94       	dec	r0
     758:	d2 f7       	brpl	.-12     	; 0x74e <__pack_f+0x7e>
     75a:	81 e0       	ldi	r24, 0x01	; 1
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	a0 e0       	ldi	r26, 0x00	; 0
     760:	b0 e0       	ldi	r27, 0x00	; 0
     762:	04 c0       	rjmp	.+8      	; 0x76c <__pack_f+0x9c>
     764:	88 0f       	add	r24, r24
     766:	99 1f       	adc	r25, r25
     768:	aa 1f       	adc	r26, r26
     76a:	bb 1f       	adc	r27, r27
     76c:	2a 95       	dec	r18
     76e:	d2 f7       	brpl	.-12     	; 0x764 <__pack_f+0x94>
     770:	01 97       	sbiw	r24, 0x01	; 1
     772:	a1 09       	sbc	r26, r1
     774:	b1 09       	sbc	r27, r1
     776:	8e 21       	and	r24, r14
     778:	9f 21       	and	r25, r15
     77a:	a0 23       	and	r26, r16
     77c:	b1 23       	and	r27, r17
     77e:	00 97       	sbiw	r24, 0x00	; 0
     780:	a1 05       	cpc	r26, r1
     782:	b1 05       	cpc	r27, r1
     784:	21 f0       	breq	.+8      	; 0x78e <__pack_f+0xbe>
     786:	81 e0       	ldi	r24, 0x01	; 1
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	a0 e0       	ldi	r26, 0x00	; 0
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	9a 01       	movw	r18, r20
     790:	ab 01       	movw	r20, r22
     792:	28 2b       	or	r18, r24
     794:	39 2b       	or	r19, r25
     796:	4a 2b       	or	r20, r26
     798:	5b 2b       	or	r21, r27
     79a:	da 01       	movw	r26, r20
     79c:	c9 01       	movw	r24, r18
     79e:	8f 77       	andi	r24, 0x7F	; 127
     7a0:	90 70       	andi	r25, 0x00	; 0
     7a2:	a0 70       	andi	r26, 0x00	; 0
     7a4:	b0 70       	andi	r27, 0x00	; 0
     7a6:	80 34       	cpi	r24, 0x40	; 64
     7a8:	91 05       	cpc	r25, r1
     7aa:	a1 05       	cpc	r26, r1
     7ac:	b1 05       	cpc	r27, r1
     7ae:	39 f4       	brne	.+14     	; 0x7be <__pack_f+0xee>
     7b0:	27 ff       	sbrs	r18, 7
     7b2:	09 c0       	rjmp	.+18     	; 0x7c6 <__pack_f+0xf6>
     7b4:	20 5c       	subi	r18, 0xC0	; 192
     7b6:	3f 4f       	sbci	r19, 0xFF	; 255
     7b8:	4f 4f       	sbci	r20, 0xFF	; 255
     7ba:	5f 4f       	sbci	r21, 0xFF	; 255
     7bc:	04 c0       	rjmp	.+8      	; 0x7c6 <__pack_f+0xf6>
     7be:	21 5c       	subi	r18, 0xC1	; 193
     7c0:	3f 4f       	sbci	r19, 0xFF	; 255
     7c2:	4f 4f       	sbci	r20, 0xFF	; 255
     7c4:	5f 4f       	sbci	r21, 0xFF	; 255
     7c6:	e0 e0       	ldi	r30, 0x00	; 0
     7c8:	f0 e0       	ldi	r31, 0x00	; 0
     7ca:	20 30       	cpi	r18, 0x00	; 0
     7cc:	a0 e0       	ldi	r26, 0x00	; 0
     7ce:	3a 07       	cpc	r19, r26
     7d0:	a0 e0       	ldi	r26, 0x00	; 0
     7d2:	4a 07       	cpc	r20, r26
     7d4:	a0 e4       	ldi	r26, 0x40	; 64
     7d6:	5a 07       	cpc	r21, r26
     7d8:	10 f0       	brcs	.+4      	; 0x7de <__pack_f+0x10e>
     7da:	e1 e0       	ldi	r30, 0x01	; 1
     7dc:	f0 e0       	ldi	r31, 0x00	; 0
     7de:	79 01       	movw	r14, r18
     7e0:	8a 01       	movw	r16, r20
     7e2:	27 c0       	rjmp	.+78     	; 0x832 <__pack_f+0x162>
     7e4:	60 38       	cpi	r22, 0x80	; 128
     7e6:	71 05       	cpc	r23, r1
     7e8:	64 f5       	brge	.+88     	; 0x842 <__pack_f+0x172>
     7ea:	fb 01       	movw	r30, r22
     7ec:	e1 58       	subi	r30, 0x81	; 129
     7ee:	ff 4f       	sbci	r31, 0xFF	; 255
     7f0:	d8 01       	movw	r26, r16
     7f2:	c7 01       	movw	r24, r14
     7f4:	8f 77       	andi	r24, 0x7F	; 127
     7f6:	90 70       	andi	r25, 0x00	; 0
     7f8:	a0 70       	andi	r26, 0x00	; 0
     7fa:	b0 70       	andi	r27, 0x00	; 0
     7fc:	80 34       	cpi	r24, 0x40	; 64
     7fe:	91 05       	cpc	r25, r1
     800:	a1 05       	cpc	r26, r1
     802:	b1 05       	cpc	r27, r1
     804:	39 f4       	brne	.+14     	; 0x814 <__pack_f+0x144>
     806:	e7 fe       	sbrs	r14, 7
     808:	0d c0       	rjmp	.+26     	; 0x824 <__pack_f+0x154>
     80a:	80 e4       	ldi	r24, 0x40	; 64
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	a0 e0       	ldi	r26, 0x00	; 0
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	04 c0       	rjmp	.+8      	; 0x81c <__pack_f+0x14c>
     814:	8f e3       	ldi	r24, 0x3F	; 63
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	a0 e0       	ldi	r26, 0x00	; 0
     81a:	b0 e0       	ldi	r27, 0x00	; 0
     81c:	e8 0e       	add	r14, r24
     81e:	f9 1e       	adc	r15, r25
     820:	0a 1f       	adc	r16, r26
     822:	1b 1f       	adc	r17, r27
     824:	17 ff       	sbrs	r17, 7
     826:	05 c0       	rjmp	.+10     	; 0x832 <__pack_f+0x162>
     828:	16 95       	lsr	r17
     82a:	07 95       	ror	r16
     82c:	f7 94       	ror	r15
     82e:	e7 94       	ror	r14
     830:	31 96       	adiw	r30, 0x01	; 1
     832:	87 e0       	ldi	r24, 0x07	; 7
     834:	16 95       	lsr	r17
     836:	07 95       	ror	r16
     838:	f7 94       	ror	r15
     83a:	e7 94       	ror	r14
     83c:	8a 95       	dec	r24
     83e:	d1 f7       	brne	.-12     	; 0x834 <__pack_f+0x164>
     840:	05 c0       	rjmp	.+10     	; 0x84c <__pack_f+0x17c>
     842:	ee 24       	eor	r14, r14
     844:	ff 24       	eor	r15, r15
     846:	87 01       	movw	r16, r14
     848:	ef ef       	ldi	r30, 0xFF	; 255
     84a:	f0 e0       	ldi	r31, 0x00	; 0
     84c:	6e 2f       	mov	r22, r30
     84e:	67 95       	ror	r22
     850:	66 27       	eor	r22, r22
     852:	67 95       	ror	r22
     854:	90 2f       	mov	r25, r16
     856:	9f 77       	andi	r25, 0x7F	; 127
     858:	d7 94       	ror	r13
     85a:	dd 24       	eor	r13, r13
     85c:	d7 94       	ror	r13
     85e:	8e 2f       	mov	r24, r30
     860:	86 95       	lsr	r24
     862:	49 2f       	mov	r20, r25
     864:	46 2b       	or	r20, r22
     866:	58 2f       	mov	r21, r24
     868:	5d 29       	or	r21, r13
     86a:	b7 01       	movw	r22, r14
     86c:	ca 01       	movw	r24, r20
     86e:	1f 91       	pop	r17
     870:	0f 91       	pop	r16
     872:	ff 90       	pop	r15
     874:	ef 90       	pop	r14
     876:	df 90       	pop	r13
     878:	08 95       	ret

0000087a <__unpack_f>:
     87a:	fc 01       	movw	r30, r24
     87c:	db 01       	movw	r26, r22
     87e:	40 81       	ld	r20, Z
     880:	51 81       	ldd	r21, Z+1	; 0x01
     882:	22 81       	ldd	r18, Z+2	; 0x02
     884:	62 2f       	mov	r22, r18
     886:	6f 77       	andi	r22, 0x7F	; 127
     888:	70 e0       	ldi	r23, 0x00	; 0
     88a:	22 1f       	adc	r18, r18
     88c:	22 27       	eor	r18, r18
     88e:	22 1f       	adc	r18, r18
     890:	93 81       	ldd	r25, Z+3	; 0x03
     892:	89 2f       	mov	r24, r25
     894:	88 0f       	add	r24, r24
     896:	82 2b       	or	r24, r18
     898:	28 2f       	mov	r18, r24
     89a:	30 e0       	ldi	r19, 0x00	; 0
     89c:	99 1f       	adc	r25, r25
     89e:	99 27       	eor	r25, r25
     8a0:	99 1f       	adc	r25, r25
     8a2:	11 96       	adiw	r26, 0x01	; 1
     8a4:	9c 93       	st	X, r25
     8a6:	11 97       	sbiw	r26, 0x01	; 1
     8a8:	21 15       	cp	r18, r1
     8aa:	31 05       	cpc	r19, r1
     8ac:	a9 f5       	brne	.+106    	; 0x918 <__stack+0x19>
     8ae:	41 15       	cp	r20, r1
     8b0:	51 05       	cpc	r21, r1
     8b2:	61 05       	cpc	r22, r1
     8b4:	71 05       	cpc	r23, r1
     8b6:	11 f4       	brne	.+4      	; 0x8bc <__unpack_f+0x42>
     8b8:	82 e0       	ldi	r24, 0x02	; 2
     8ba:	37 c0       	rjmp	.+110    	; 0x92a <__stack+0x2b>
     8bc:	82 e8       	ldi	r24, 0x82	; 130
     8be:	9f ef       	ldi	r25, 0xFF	; 255
     8c0:	13 96       	adiw	r26, 0x03	; 3
     8c2:	9c 93       	st	X, r25
     8c4:	8e 93       	st	-X, r24
     8c6:	12 97       	sbiw	r26, 0x02	; 2
     8c8:	9a 01       	movw	r18, r20
     8ca:	ab 01       	movw	r20, r22
     8cc:	67 e0       	ldi	r22, 0x07	; 7
     8ce:	22 0f       	add	r18, r18
     8d0:	33 1f       	adc	r19, r19
     8d2:	44 1f       	adc	r20, r20
     8d4:	55 1f       	adc	r21, r21
     8d6:	6a 95       	dec	r22
     8d8:	d1 f7       	brne	.-12     	; 0x8ce <__unpack_f+0x54>
     8da:	83 e0       	ldi	r24, 0x03	; 3
     8dc:	8c 93       	st	X, r24
     8de:	0d c0       	rjmp	.+26     	; 0x8fa <__unpack_f+0x80>
     8e0:	22 0f       	add	r18, r18
     8e2:	33 1f       	adc	r19, r19
     8e4:	44 1f       	adc	r20, r20
     8e6:	55 1f       	adc	r21, r21
     8e8:	12 96       	adiw	r26, 0x02	; 2
     8ea:	8d 91       	ld	r24, X+
     8ec:	9c 91       	ld	r25, X
     8ee:	13 97       	sbiw	r26, 0x03	; 3
     8f0:	01 97       	sbiw	r24, 0x01	; 1
     8f2:	13 96       	adiw	r26, 0x03	; 3
     8f4:	9c 93       	st	X, r25
     8f6:	8e 93       	st	-X, r24
     8f8:	12 97       	sbiw	r26, 0x02	; 2
     8fa:	20 30       	cpi	r18, 0x00	; 0
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	38 07       	cpc	r19, r24
     900:	80 e0       	ldi	r24, 0x00	; 0
     902:	48 07       	cpc	r20, r24
     904:	80 e4       	ldi	r24, 0x40	; 64
     906:	58 07       	cpc	r21, r24
     908:	58 f3       	brcs	.-42     	; 0x8e0 <__unpack_f+0x66>
     90a:	14 96       	adiw	r26, 0x04	; 4
     90c:	2d 93       	st	X+, r18
     90e:	3d 93       	st	X+, r19
     910:	4d 93       	st	X+, r20
     912:	5c 93       	st	X, r21
     914:	17 97       	sbiw	r26, 0x07	; 7
     916:	08 95       	ret
     918:	2f 3f       	cpi	r18, 0xFF	; 255
     91a:	31 05       	cpc	r19, r1
     91c:	79 f4       	brne	.+30     	; 0x93c <__stack+0x3d>
     91e:	41 15       	cp	r20, r1
     920:	51 05       	cpc	r21, r1
     922:	61 05       	cpc	r22, r1
     924:	71 05       	cpc	r23, r1
     926:	19 f4       	brne	.+6      	; 0x92e <__stack+0x2f>
     928:	84 e0       	ldi	r24, 0x04	; 4
     92a:	8c 93       	st	X, r24
     92c:	08 95       	ret
     92e:	64 ff       	sbrs	r22, 4
     930:	03 c0       	rjmp	.+6      	; 0x938 <__stack+0x39>
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	8c 93       	st	X, r24
     936:	12 c0       	rjmp	.+36     	; 0x95c <__stack+0x5d>
     938:	1c 92       	st	X, r1
     93a:	10 c0       	rjmp	.+32     	; 0x95c <__stack+0x5d>
     93c:	2f 57       	subi	r18, 0x7F	; 127
     93e:	30 40       	sbci	r19, 0x00	; 0
     940:	13 96       	adiw	r26, 0x03	; 3
     942:	3c 93       	st	X, r19
     944:	2e 93       	st	-X, r18
     946:	12 97       	sbiw	r26, 0x02	; 2
     948:	83 e0       	ldi	r24, 0x03	; 3
     94a:	8c 93       	st	X, r24
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	44 0f       	add	r20, r20
     950:	55 1f       	adc	r21, r21
     952:	66 1f       	adc	r22, r22
     954:	77 1f       	adc	r23, r23
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0x4f>
     95a:	70 64       	ori	r23, 0x40	; 64
     95c:	14 96       	adiw	r26, 0x04	; 4
     95e:	4d 93       	st	X+, r20
     960:	5d 93       	st	X+, r21
     962:	6d 93       	st	X+, r22
     964:	7c 93       	st	X, r23
     966:	17 97       	sbiw	r26, 0x07	; 7
     968:	08 95       	ret

0000096a <disable_interrupts>:
#include"bugurt_kernel.h"

// Платформеннозависимый код
// Просто функции, специфичные для AVR
void disable_interrupts(void)
{
     96a:	df 93       	push	r29
     96c:	cf 93       	push	r28
     96e:	cd b7       	in	r28, 0x3d	; 61
     970:	de b7       	in	r29, 0x3e	; 62
    cli();
     972:	f8 94       	cli
}
     974:	cf 91       	pop	r28
     976:	df 91       	pop	r29
     978:	08 95       	ret

0000097a <enable_interrupts>:
void enable_interrupts(void)
{
     97a:	df 93       	push	r29
     97c:	cf 93       	push	r28
     97e:	cd b7       	in	r28, 0x3d	; 61
     980:	de b7       	in	r29, 0x3e	; 62
    sei();
     982:	78 94       	sei
}
     984:	cf 91       	pop	r28
     986:	df 91       	pop	r29
     988:	08 95       	ret

0000098a <current_proc>:

proc_t * current_proc(void)
{
     98a:	df 93       	push	r29
     98c:	cf 93       	push	r28
     98e:	cd b7       	in	r28, 0x3d	; 61
     990:	de b7       	in	r29, 0x3e	; 62
    return kernel.sched.current_proc;
     992:	80 91 28 01 	lds	r24, 0x0128
     996:	90 91 29 01 	lds	r25, 0x0129
}
     99a:	cf 91       	pop	r28
     99c:	df 91       	pop	r29
     99e:	08 95       	ret

000009a0 <proc_stack_init>:

stack_t * proc_stack_init(stack_t * sstart, code_t code, void * arg)
{
     9a0:	df 93       	push	r29
     9a2:	cf 93       	push	r28
     9a4:	00 d0       	rcall	.+0      	; 0x9a6 <proc_stack_init+0x6>
     9a6:	00 d0       	rcall	.+0      	; 0x9a8 <proc_stack_init+0x8>
     9a8:	00 d0       	rcall	.+0      	; 0x9aa <proc_stack_init+0xa>
     9aa:	cd b7       	in	r28, 0x3d	; 61
     9ac:	de b7       	in	r29, 0x3e	; 62
     9ae:	9a 83       	std	Y+2, r25	; 0x02
     9b0:	89 83       	std	Y+1, r24	; 0x01
     9b2:	7c 83       	std	Y+4, r23	; 0x04
     9b4:	6b 83       	std	Y+3, r22	; 0x03
     9b6:	5e 83       	std	Y+6, r21	; 0x06
     9b8:	4d 83       	std	Y+5, r20	; 0x05
    return (stack_t *)osbme_init_stack( (void *)sstart, (osbme_code_t)code, (void *)arg );
     9ba:	89 81       	ldd	r24, Y+1	; 0x01
     9bc:	9a 81       	ldd	r25, Y+2	; 0x02
     9be:	2b 81       	ldd	r18, Y+3	; 0x03
     9c0:	3c 81       	ldd	r19, Y+4	; 0x04
     9c2:	4d 81       	ldd	r20, Y+5	; 0x05
     9c4:	5e 81       	ldd	r21, Y+6	; 0x06
     9c6:	b9 01       	movw	r22, r18
     9c8:	0e 94 cf 08 	call	0x119e	; 0x119e <osbme_init_stack>
}
     9cc:	26 96       	adiw	r28, 0x06	; 6
     9ce:	0f b6       	in	r0, 0x3f	; 63
     9d0:	f8 94       	cli
     9d2:	de bf       	out	0x3e, r29	; 62
     9d4:	0f be       	out	0x3f, r0	; 63
     9d6:	cd bf       	out	0x3d, r28	; 61
     9d8:	cf 91       	pop	r28
     9da:	df 91       	pop	r29
     9dc:	08 95       	ret

000009de <resched>:

// Состояние ядра, выполняем перепланиировку
unsigned char kernel_state = KRN_FLG_RESCHED;
// Функция перепланировки
void resched( void )
{
     9de:	df 93       	push	r29
     9e0:	cf 93       	push	r28
     9e2:	cd b7       	in	r28, 0x3d	; 61
     9e4:	de b7       	in	r29, 0x3e	; 62
    kernel_state |= KRN_FLG_RESCHED;
     9e6:	80 91 00 01 	lds	r24, 0x0100
     9ea:	81 60       	ori	r24, 0x01	; 1
     9ec:	80 93 00 01 	sts	0x0100, r24
}
     9f0:	cf 91       	pop	r28
     9f2:	df 91       	pop	r29
     9f4:	08 95       	ret

000009f6 <__vector_7>:
        sched_reschedule();
    }
}
__attribute__ (( signal, naked )) void SYSTEM_TIMER_ISR(void)
{
    BUGURT_ISR_START();
     9f6:	00 91 28 01 	lds	r16, 0x0128
     9fa:	10 91 29 01 	lds	r17, 0x0129
     9fe:	0e 94 65 00 	call	0xca	; 0xca <osbme_store_context>
     a02:	f8 01       	movw	r30, r16
     a04:	95 a7       	std	Z+45, r25	; 0x2d
     a06:	84 a7       	std	Z+44, r24	; 0x2c
     a08:	80 91 7e 01 	lds	r24, 0x017E
     a0c:	90 91 7f 01 	lds	r25, 0x017F
     a10:	0e 94 bc 00 	call	0x178	; 0x178 <osbme_set_stack_pointer>

    kernel.timer++;
     a14:	80 91 82 01 	lds	r24, 0x0182
     a18:	90 91 83 01 	lds	r25, 0x0183
     a1c:	01 96       	adiw	r24, 0x01	; 1
     a1e:	90 93 83 01 	sts	0x0183, r25
     a22:	80 93 82 01 	sts	0x0182, r24
    sched_schedule();
     a26:	0e 94 95 12 	call	0x252a	; 0x252a <sched_schedule>

    BUGURT_ISR_EXIT();
     a2a:	e0 91 28 01 	lds	r30, 0x0128
     a2e:	f0 91 29 01 	lds	r31, 0x0129
     a32:	84 a5       	ldd	r24, Z+44	; 0x2c
     a34:	95 a5       	ldd	r25, Z+45	; 0x2d
     a36:	0e 94 91 00 	call	0x122	; 0x122 <osbme_load_context>
     a3a:	18 95       	reti

00000a3c <init_bugurt>:
}
/***************************************************************************************************************/
// Функции общего пользования

void init_bugurt(void)
{
     a3c:	df 93       	push	r29
     a3e:	cf 93       	push	r28
     a40:	cd b7       	in	r28, 0x3d	; 61
     a42:	de b7       	in	r29, 0x3e	; 62
    cli();
     a44:	f8 94       	cli
    kernel.sched.nested_crit_sec = (count_t)1;
     a46:	81 e0       	ldi	r24, 0x01	; 1
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	90 93 51 01 	sts	0x0151, r25
     a4e:	80 93 50 01 	sts	0x0150, r24
    kernel_init();
     a52:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <kernel_init>
}
     a56:	cf 91       	pop	r28
     a58:	df 91       	pop	r29
     a5a:	08 95       	ret

00000a5c <start_bugurt>:
void start_bugurt(void)
{
     a5c:	df 93       	push	r29
     a5e:	cf 93       	push	r28
     a60:	cd b7       	in	r28, 0x3d	; 61
     a62:	de b7       	in	r29, 0x3e	; 62
    start_scheduler();
     a64:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <start_scheduler>
    kernel.sched.nested_crit_sec = (count_t)0;
     a68:	10 92 51 01 	sts	0x0151, r1
     a6c:	10 92 50 01 	sts	0x0150, r1
    sei();
     a70:	78 94       	sei
    idle_main( (void *)0 );
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <idle_main>
}
     a7a:	cf 91       	pop	r28
     a7c:	df 91       	pop	r29
     a7e:	08 95       	ret

00000a80 <do_syscall>:
    scall_mutex_try_lock,
    scall_mutex_unlock
};

void do_syscall(void)
{
     a80:	df 93       	push	r29
     a82:	cf 93       	push	r28
     a84:	00 d0       	rcall	.+0      	; 0xa86 <do_syscall+0x6>
     a86:	00 d0       	rcall	.+0      	; 0xa88 <do_syscall+0x8>
     a88:	00 d0       	rcall	.+0      	; 0xa8a <do_syscall+0xa>
     a8a:	cd b7       	in	r28, 0x3d	; 61
     a8c:	de b7       	in	r29, 0x3e	; 62
    if( syscall_num != (unsigned char)0 )
     a8e:	80 91 0e 01 	lds	r24, 0x010E
     a92:	88 23       	and	r24, r24
     a94:	29 f1       	breq	.+74     	; 0xae0 <do_syscall+0x60>
    {
        syscall_num--;
     a96:	80 91 0e 01 	lds	r24, 0x010E
     a9a:	81 50       	subi	r24, 0x01	; 1
     a9c:	80 93 0e 01 	sts	0x010E, r24
        code_t syscall_func;
        syscall_func = (code_t)pgm_read_word(syscall_routine + syscall_num);
     aa0:	80 91 0e 01 	lds	r24, 0x010E
     aa4:	88 2f       	mov	r24, r24
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	88 0f       	add	r24, r24
     aaa:	99 1f       	adc	r25, r25
     aac:	88 59       	subi	r24, 0x98	; 152
     aae:	9f 4f       	sbci	r25, 0xFF	; 255
     ab0:	9c 83       	std	Y+4, r25	; 0x04
     ab2:	8b 83       	std	Y+3, r24	; 0x03
     ab4:	8b 81       	ldd	r24, Y+3	; 0x03
     ab6:	9c 81       	ldd	r25, Y+4	; 0x04
     ab8:	fc 01       	movw	r30, r24
     aba:	85 91       	lpm	r24, Z+
     abc:	94 91       	lpm	r25, Z+
     abe:	9a 83       	std	Y+2, r25	; 0x02
     ac0:	89 83       	std	Y+1, r24	; 0x01
     ac2:	fc 83       	std	Y+4, r31	; 0x04
     ac4:	eb 83       	std	Y+3, r30	; 0x03
     ac6:	89 81       	ldd	r24, Y+1	; 0x01
     ac8:	9a 81       	ldd	r25, Y+2	; 0x02
     aca:	9e 83       	std	Y+6, r25	; 0x06
     acc:	8d 83       	std	Y+5, r24	; 0x05
        syscall_func(syscall_arg);
     ace:	80 91 0f 01 	lds	r24, 0x010F
     ad2:	90 91 10 01 	lds	r25, 0x0110
     ad6:	ed 81       	ldd	r30, Y+5	; 0x05
     ad8:	fe 81       	ldd	r31, Y+6	; 0x06
     ada:	09 95       	icall
        syscall_num = (unsigned char)0;
     adc:	10 92 0e 01 	sts	0x010E, r1
    }
}
     ae0:	26 96       	adiw	r28, 0x06	; 6
     ae2:	0f b6       	in	r0, 0x3f	; 63
     ae4:	f8 94       	cli
     ae6:	de bf       	out	0x3e, r29	; 62
     ae8:	0f be       	out	0x3f, r0	; 63
     aea:	cd bf       	out	0x3d, r28	; 61
     aec:	cf 91       	pop	r28
     aee:	df 91       	pop	r29
     af0:	08 95       	ret

00000af2 <__vector_2>:
    unsigned char num;
    void * arg;
} syscall_data_t;
__attribute__ (( signal, naked )) void SYSCALL_ISR(void)
{
    BUGURT_ISR_START();
     af2:	00 91 28 01 	lds	r16, 0x0128
     af6:	10 91 29 01 	lds	r17, 0x0129
     afa:	0e 94 65 00 	call	0xca	; 0xca <osbme_store_context>
     afe:	f8 01       	movw	r30, r16
     b00:	95 a7       	std	Z+45, r25	; 0x2d
     b02:	84 a7       	std	Z+44, r24	; 0x2c
     b04:	80 91 7e 01 	lds	r24, 0x017E
     b08:	90 91 7f 01 	lds	r25, 0x017F
     b0c:	0e 94 bc 00 	call	0x178	; 0x178 <osbme_set_stack_pointer>

    // Получаем информацию о системном вызове из стека процесса
    unsigned char * tos;
    unsigned short temp;
    /// Извлечение syscall_num и syscall_arg из стека процесса
    tos = (unsigned char *)kernel.sched.current_proc->spointer + PROC_STACK_OFFSET;
     b10:	e0 91 28 01 	lds	r30, 0x0128
     b14:	f0 91 29 01 	lds	r31, 0x0129
     b18:	84 a5       	ldd	r24, Z+44	; 0x2c
     b1a:	95 a5       	ldd	r25, Z+45	; 0x2d
     b1c:	07 96       	adiw	r24, 0x07	; 7
     b1e:	9c 83       	std	Y+4, r25	; 0x04
     b20:	8b 83       	std	Y+3, r24	; 0x03
    temp = (unsigned short)*tos++;
     b22:	eb 81       	ldd	r30, Y+3	; 0x03
     b24:	fc 81       	ldd	r31, Y+4	; 0x04
     b26:	80 81       	ld	r24, Z
     b28:	88 2f       	mov	r24, r24
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	9a 83       	std	Y+2, r25	; 0x02
     b2e:	89 83       	std	Y+1, r24	; 0x01
     b30:	8b 81       	ldd	r24, Y+3	; 0x03
     b32:	9c 81       	ldd	r25, Y+4	; 0x04
     b34:	01 96       	adiw	r24, 0x01	; 1
     b36:	9c 83       	std	Y+4, r25	; 0x04
     b38:	8b 83       	std	Y+3, r24	; 0x03
    temp <<= 8;
     b3a:	89 81       	ldd	r24, Y+1	; 0x01
     b3c:	9a 81       	ldd	r25, Y+2	; 0x02
     b3e:	98 2f       	mov	r25, r24
     b40:	88 27       	eor	r24, r24
     b42:	9a 83       	std	Y+2, r25	; 0x02
     b44:	89 83       	std	Y+1, r24	; 0x01
    temp |= (unsigned short)*tos;
     b46:	eb 81       	ldd	r30, Y+3	; 0x03
     b48:	fc 81       	ldd	r31, Y+4	; 0x04
     b4a:	80 81       	ld	r24, Z
     b4c:	28 2f       	mov	r18, r24
     b4e:	30 e0       	ldi	r19, 0x00	; 0
     b50:	89 81       	ldd	r24, Y+1	; 0x01
     b52:	9a 81       	ldd	r25, Y+2	; 0x02
     b54:	82 2b       	or	r24, r18
     b56:	93 2b       	or	r25, r19
     b58:	9a 83       	std	Y+2, r25	; 0x02
     b5a:	89 83       	std	Y+1, r24	; 0x01

    syscall_num = ((syscall_data_t *)temp)->num;
     b5c:	e9 81       	ldd	r30, Y+1	; 0x01
     b5e:	fa 81       	ldd	r31, Y+2	; 0x02
     b60:	80 81       	ld	r24, Z
     b62:	80 93 0e 01 	sts	0x010E, r24
    syscall_arg = ((syscall_data_t *)temp)->arg;
     b66:	e9 81       	ldd	r30, Y+1	; 0x01
     b68:	fa 81       	ldd	r31, Y+2	; 0x02
     b6a:	81 81       	ldd	r24, Z+1	; 0x01
     b6c:	92 81       	ldd	r25, Z+2	; 0x02
     b6e:	90 93 10 01 	sts	0x0110, r25
     b72:	80 93 0f 01 	sts	0x010F, r24

    // Обрабатываем системный вызов
    do_syscall();
     b76:	0e 94 40 05 	call	0xa80	; 0xa80 <do_syscall>
    kernel_state &= ~KRN_FLG_DO_SCALL;
     b7a:	80 91 00 01 	lds	r24, 0x0100
     b7e:	8d 7f       	andi	r24, 0xFD	; 253
     b80:	80 93 00 01 	sts	0x0100, r24

    // Перепланировка при необходимости
    if( kernel_state & KRN_FLG_RESCHED )
     b84:	80 91 00 01 	lds	r24, 0x0100
     b88:	88 2f       	mov	r24, r24
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	81 70       	andi	r24, 0x01	; 1
     b8e:	90 70       	andi	r25, 0x00	; 0
     b90:	88 23       	and	r24, r24
     b92:	39 f0       	breq	.+14     	; 0xba2 <__vector_2+0xb0>
    {
        kernel_state &= ~KRN_FLG_RESCHED;
     b94:	80 91 00 01 	lds	r24, 0x0100
     b98:	8e 7f       	andi	r24, 0xFE	; 254
     b9a:	80 93 00 01 	sts	0x0100, r24
        sched_reschedule();
     b9e:	0e 94 3d 13 	call	0x267a	; 0x267a <sched_reschedule>
    }

    // Разрешаем обработку прерывания системного таймера.
    start_scheduler();
     ba2:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <start_scheduler>

    BUGURT_ISR_EXIT();
     ba6:	e0 91 28 01 	lds	r30, 0x0128
     baa:	f0 91 29 01 	lds	r31, 0x0129
     bae:	84 a5       	ldd	r24, Z+44	; 0x2c
     bb0:	95 a5       	ldd	r25, Z+45	; 0x2d
     bb2:	0e 94 91 00 	call	0x122	; 0x122 <osbme_load_context>
     bb6:	18 95       	reti

00000bb8 <_syscall>:
}

syscall_data_t * _syscall( syscall_data_t * arg )
{
     bb8:	df 93       	push	r29
     bba:	cf 93       	push	r28
     bbc:	00 d0       	rcall	.+0      	; 0xbbe <_syscall+0x6>
     bbe:	cd b7       	in	r28, 0x3d	; 61
     bc0:	de b7       	in	r29, 0x3e	; 62
     bc2:	9a 83       	std	Y+2, r25	; 0x02
     bc4:	89 83       	std	Y+1, r24	; 0x01
    kernel_state |= KRN_FLG_DO_SCALL;
     bc6:	80 91 00 01 	lds	r24, 0x0100
     bca:	82 60       	ori	r24, 0x02	; 2
     bcc:	80 93 00 01 	sts	0x0100, r24
    stop_scheduler(); // Чтобы не было гонок с обработчиком прерывания системного таймера.
     bd0:	0e 94 94 15 	call	0x2b28	; 0x2b28 <stop_scheduler>
    raise_syscall_interrupt();
     bd4:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <raise_syscall_interrupt>
    sei();
     bd8:	78 94       	sei
    return arg;
     bda:	89 81       	ldd	r24, Y+1	; 0x01
     bdc:	9a 81       	ldd	r25, Y+2	; 0x02
}
     bde:	0f 90       	pop	r0
     be0:	0f 90       	pop	r0
     be2:	cf 91       	pop	r28
     be4:	df 91       	pop	r29
     be6:	08 95       	ret

00000be8 <syscall>:

static syscall_data_t scdata;
void syscall( unsigned char num, void * arg )
{
     be8:	df 93       	push	r29
     bea:	cf 93       	push	r28
     bec:	00 d0       	rcall	.+0      	; 0xbee <syscall+0x6>
     bee:	0f 92       	push	r0
     bf0:	cd b7       	in	r28, 0x3d	; 61
     bf2:	de b7       	in	r29, 0x3e	; 62
     bf4:	89 83       	std	Y+1, r24	; 0x01
     bf6:	7b 83       	std	Y+3, r23	; 0x03
     bf8:	6a 83       	std	Y+2, r22	; 0x02
     scdata.num = num;
     bfa:	89 81       	ldd	r24, Y+1	; 0x01
     bfc:	80 93 21 01 	sts	0x0121, r24
     scdata.arg = arg;
     c00:	8a 81       	ldd	r24, Y+2	; 0x02
     c02:	9b 81       	ldd	r25, Y+3	; 0x03
     c04:	90 93 23 01 	sts	0x0123, r25
     c08:	80 93 22 01 	sts	0x0122, r24
     _syscall( &scdata );
     c0c:	81 e2       	ldi	r24, 0x21	; 33
     c0e:	91 e0       	ldi	r25, 0x01	; 1
     c10:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <_syscall>
     SYSCALL_DELLAY();
     c14:	00 00       	nop
     c16:	00 00       	nop
     c18:	00 00       	nop
     while( kernel_state & KRN_FLG_DO_SCALL );
     c1a:	80 91 00 01 	lds	r24, 0x0100
     c1e:	88 2f       	mov	r24, r24
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	82 70       	andi	r24, 0x02	; 2
     c24:	90 70       	andi	r25, 0x00	; 0
     c26:	00 97       	sbiw	r24, 0x00	; 0
     c28:	c1 f7       	brne	.-16     	; 0xc1a <syscall+0x32>
}
     c2a:	0f 90       	pop	r0
     c2c:	0f 90       	pop	r0
     c2e:	0f 90       	pop	r0
     c30:	cf 91       	pop	r28
     c32:	df 91       	pop	r29
     c34:	08 95       	ret

00000c36 <scall_proc_init>:
///                 ОБРАБОТЧИКИ СИСТЕМНЫХ ВЫЗОВОВ
///=================================================================
///                   Управление процессами
//1
void scall_proc_init( void * arg )
{
     c36:	8f 92       	push	r8
     c38:	af 92       	push	r10
     c3a:	bf 92       	push	r11
     c3c:	cf 92       	push	r12
     c3e:	df 92       	push	r13
     c40:	ef 92       	push	r14
     c42:	ff 92       	push	r15
     c44:	0f 93       	push	r16
     c46:	1f 93       	push	r17
     c48:	df 93       	push	r29
     c4a:	cf 93       	push	r28
     c4c:	00 d0       	rcall	.+0      	; 0xc4e <scall_proc_init+0x18>
     c4e:	cd b7       	in	r28, 0x3d	; 61
     c50:	de b7       	in	r29, 0x3e	; 62
     c52:	9a 83       	std	Y+2, r25	; 0x02
     c54:	89 83       	std	Y+1, r24	; 0x01
    proc_init_isr(
     c56:	e9 81       	ldd	r30, Y+1	; 0x01
     c58:	fa 81       	ldd	r31, Y+2	; 0x02
     c5a:	80 81       	ld	r24, Z
     c5c:	91 81       	ldd	r25, Z+1	; 0x01
     c5e:	e9 81       	ldd	r30, Y+1	; 0x01
     c60:	fa 81       	ldd	r31, Y+2	; 0x02
     c62:	22 81       	ldd	r18, Z+2	; 0x02
     c64:	33 81       	ldd	r19, Z+3	; 0x03
     c66:	e9 81       	ldd	r30, Y+1	; 0x01
     c68:	fa 81       	ldd	r31, Y+2	; 0x02
     c6a:	44 81       	ldd	r20, Z+4	; 0x04
     c6c:	55 81       	ldd	r21, Z+5	; 0x05
     c6e:	e9 81       	ldd	r30, Y+1	; 0x01
     c70:	fa 81       	ldd	r31, Y+2	; 0x02
     c72:	06 81       	ldd	r16, Z+6	; 0x06
     c74:	17 81       	ldd	r17, Z+7	; 0x07
     c76:	e9 81       	ldd	r30, Y+1	; 0x01
     c78:	fa 81       	ldd	r31, Y+2	; 0x02
     c7a:	e0 84       	ldd	r14, Z+8	; 0x08
     c7c:	f1 84       	ldd	r15, Z+9	; 0x09
     c7e:	e9 81       	ldd	r30, Y+1	; 0x01
     c80:	fa 81       	ldd	r31, Y+2	; 0x02
     c82:	c2 84       	ldd	r12, Z+10	; 0x0a
     c84:	d3 84       	ldd	r13, Z+11	; 0x0b
     c86:	e9 81       	ldd	r30, Y+1	; 0x01
     c88:	fa 81       	ldd	r31, Y+2	; 0x02
     c8a:	b4 84       	ldd	r11, Z+12	; 0x0c
     c8c:	e9 81       	ldd	r30, Y+1	; 0x01
     c8e:	fa 81       	ldd	r31, Y+2	; 0x02
     c90:	a5 85       	ldd	r26, Z+13	; 0x0d
     c92:	b6 85       	ldd	r27, Z+14	; 0x0e
     c94:	e9 81       	ldd	r30, Y+1	; 0x01
     c96:	fa 81       	ldd	r31, Y+2	; 0x02
     c98:	e7 85       	ldd	r30, Z+15	; 0x0f
     c9a:	b9 01       	movw	r22, r18
     c9c:	98 01       	movw	r18, r16
     c9e:	87 01       	movw	r16, r14
     ca0:	76 01       	movw	r14, r12
     ca2:	cb 2c       	mov	r12, r11
     ca4:	5d 01       	movw	r10, r26
     ca6:	8e 2e       	mov	r8, r30
     ca8:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <proc_init_isr>
              ((proc_init_arg_t *)arg)->sstart,
              ((proc_init_arg_t *)arg)->prio,
              ((proc_init_arg_t *)arg)->time_quant,
              ((proc_init_arg_t *)arg)->is_rt
              );
}
     cac:	0f 90       	pop	r0
     cae:	0f 90       	pop	r0
     cb0:	cf 91       	pop	r28
     cb2:	df 91       	pop	r29
     cb4:	1f 91       	pop	r17
     cb6:	0f 91       	pop	r16
     cb8:	ff 90       	pop	r15
     cba:	ef 90       	pop	r14
     cbc:	df 90       	pop	r13
     cbe:	cf 90       	pop	r12
     cc0:	bf 90       	pop	r11
     cc2:	af 90       	pop	r10
     cc4:	8f 90       	pop	r8
     cc6:	08 95       	ret

00000cc8 <proc_init>:
                    stack_t *sstart,
                    prio_t prio,
                    timer_t time_quant,
                    bool_t is_rt // если true, значит процесс будет иметть поведение RT
                  )
{
     cc8:	8f 92       	push	r8
     cca:	af 92       	push	r10
     ccc:	bf 92       	push	r11
     cce:	cf 92       	push	r12
     cd0:	ef 92       	push	r14
     cd2:	ff 92       	push	r15
     cd4:	0f 93       	push	r16
     cd6:	1f 93       	push	r17
     cd8:	df 93       	push	r29
     cda:	cf 93       	push	r28
     cdc:	cd b7       	in	r28, 0x3d	; 61
     cde:	de b7       	in	r29, 0x3e	; 62
     ce0:	60 97       	sbiw	r28, 0x10	; 16
     ce2:	0f b6       	in	r0, 0x3f	; 63
     ce4:	f8 94       	cli
     ce6:	de bf       	out	0x3e, r29	; 62
     ce8:	0f be       	out	0x3f, r0	; 63
     cea:	cd bf       	out	0x3d, r28	; 61
     cec:	9a 83       	std	Y+2, r25	; 0x02
     cee:	89 83       	std	Y+1, r24	; 0x01
     cf0:	7c 83       	std	Y+4, r23	; 0x04
     cf2:	6b 83       	std	Y+3, r22	; 0x03
     cf4:	5e 83       	std	Y+6, r21	; 0x06
     cf6:	4d 83       	std	Y+5, r20	; 0x05
     cf8:	38 87       	std	Y+8, r19	; 0x08
     cfa:	2f 83       	std	Y+7, r18	; 0x07
     cfc:	1a 87       	std	Y+10, r17	; 0x0a
     cfe:	09 87       	std	Y+9, r16	; 0x09
     d00:	fc 86       	std	Y+12, r15	; 0x0c
     d02:	eb 86       	std	Y+11, r14	; 0x0b
     d04:	cd 86       	std	Y+13, r12	; 0x0d
     d06:	bf 86       	std	Y+15, r11	; 0x0f
     d08:	ae 86       	std	Y+14, r10	; 0x0e
     d0a:	88 8a       	std	Y+16, r8	; 0x10
    static proc_init_arg_t scarg;
    cli(); // прерывания будут разрешены на выходе из _syscall()
     d0c:	f8 94       	cli
    scarg.proc = proc;
     d0e:	89 81       	ldd	r24, Y+1	; 0x01
     d10:	9a 81       	ldd	r25, Y+2	; 0x02
     d12:	90 93 12 01 	sts	0x0112, r25
     d16:	80 93 11 01 	sts	0x0111, r24
    scarg.pmain = pmain;
     d1a:	8b 81       	ldd	r24, Y+3	; 0x03
     d1c:	9c 81       	ldd	r25, Y+4	; 0x04
     d1e:	90 93 14 01 	sts	0x0114, r25
     d22:	80 93 13 01 	sts	0x0113, r24
    scarg.sv_hook = sv_hook;
     d26:	8d 81       	ldd	r24, Y+5	; 0x05
     d28:	9e 81       	ldd	r25, Y+6	; 0x06
     d2a:	90 93 16 01 	sts	0x0116, r25
     d2e:	80 93 15 01 	sts	0x0115, r24
    scarg.rs_hook = rs_hook;
     d32:	8f 81       	ldd	r24, Y+7	; 0x07
     d34:	98 85       	ldd	r25, Y+8	; 0x08
     d36:	90 93 18 01 	sts	0x0118, r25
     d3a:	80 93 17 01 	sts	0x0117, r24
    scarg.arg = arg;
     d3e:	89 85       	ldd	r24, Y+9	; 0x09
     d40:	9a 85       	ldd	r25, Y+10	; 0x0a
     d42:	90 93 1a 01 	sts	0x011A, r25
     d46:	80 93 19 01 	sts	0x0119, r24
    scarg.sstart = sstart;
     d4a:	8b 85       	ldd	r24, Y+11	; 0x0b
     d4c:	9c 85       	ldd	r25, Y+12	; 0x0c
     d4e:	90 93 1c 01 	sts	0x011C, r25
     d52:	80 93 1b 01 	sts	0x011B, r24
    scarg.prio = prio;
     d56:	8d 85       	ldd	r24, Y+13	; 0x0d
     d58:	80 93 1d 01 	sts	0x011D, r24
    scarg.time_quant = time_quant;
     d5c:	8e 85       	ldd	r24, Y+14	; 0x0e
     d5e:	9f 85       	ldd	r25, Y+15	; 0x0f
     d60:	90 93 1f 01 	sts	0x011F, r25
     d64:	80 93 1e 01 	sts	0x011E, r24
    scarg.is_rt = is_rt;
     d68:	88 89       	ldd	r24, Y+16	; 0x10
     d6a:	80 93 20 01 	sts	0x0120, r24
    syscall(1,(void *)&scarg);
     d6e:	21 e1       	ldi	r18, 0x11	; 17
     d70:	31 e0       	ldi	r19, 0x01	; 1
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	b9 01       	movw	r22, r18
     d76:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <syscall>
}
     d7a:	60 96       	adiw	r28, 0x10	; 16
     d7c:	0f b6       	in	r0, 0x3f	; 63
     d7e:	f8 94       	cli
     d80:	de bf       	out	0x3e, r29	; 62
     d82:	0f be       	out	0x3f, r0	; 63
     d84:	cd bf       	out	0x3d, r28	; 61
     d86:	cf 91       	pop	r28
     d88:	df 91       	pop	r29
     d8a:	1f 91       	pop	r17
     d8c:	0f 91       	pop	r16
     d8e:	ff 90       	pop	r15
     d90:	ef 90       	pop	r14
     d92:	cf 90       	pop	r12
     d94:	bf 90       	pop	r11
     d96:	af 90       	pop	r10
     d98:	8f 90       	pop	r8
     d9a:	08 95       	ret

00000d9c <scall_proc_run>:
//---------------------------------------------------------------------------------------------
//2
void scall_proc_run( void * arg )
{
     d9c:	0f 93       	push	r16
     d9e:	1f 93       	push	r17
     da0:	df 93       	push	r29
     da2:	cf 93       	push	r28
     da4:	00 d0       	rcall	.+0      	; 0xda6 <scall_proc_run+0xa>
     da6:	cd b7       	in	r28, 0x3d	; 61
     da8:	de b7       	in	r29, 0x3e	; 62
     daa:	9a 83       	std	Y+2, r25	; 0x02
     dac:	89 83       	std	Y+1, r24	; 0x01
    ((proc_runtime_arg_t *)arg)->scall_ret = proc_run_isr( ((proc_runtime_arg_t *)arg)->proc );
     dae:	09 81       	ldd	r16, Y+1	; 0x01
     db0:	1a 81       	ldd	r17, Y+2	; 0x02
     db2:	e9 81       	ldd	r30, Y+1	; 0x01
     db4:	fa 81       	ldd	r31, Y+2	; 0x02
     db6:	80 81       	ld	r24, Z
     db8:	91 81       	ldd	r25, Z+1	; 0x01
     dba:	0e 94 4d 10 	call	0x209a	; 0x209a <proc_run_isr>
     dbe:	f8 01       	movw	r30, r16
     dc0:	82 83       	std	Z+2, r24	; 0x02
}
     dc2:	0f 90       	pop	r0
     dc4:	0f 90       	pop	r0
     dc6:	cf 91       	pop	r28
     dc8:	df 91       	pop	r29
     dca:	1f 91       	pop	r17
     dcc:	0f 91       	pop	r16
     dce:	08 95       	ret

00000dd0 <proc_run>:
bool_t proc_run( proc_t * proc )
{
     dd0:	df 93       	push	r29
     dd2:	cf 93       	push	r28
     dd4:	00 d0       	rcall	.+0      	; 0xdd6 <proc_run+0x6>
     dd6:	00 d0       	rcall	.+0      	; 0xdd8 <proc_run+0x8>
     dd8:	0f 92       	push	r0
     dda:	cd b7       	in	r28, 0x3d	; 61
     ddc:	de b7       	in	r29, 0x3e	; 62
     dde:	9d 83       	std	Y+5, r25	; 0x05
     de0:	8c 83       	std	Y+4, r24	; 0x04
    proc_runtime_arg_t scarg;
    scarg.proc = proc;
     de2:	8c 81       	ldd	r24, Y+4	; 0x04
     de4:	9d 81       	ldd	r25, Y+5	; 0x05
     de6:	9a 83       	std	Y+2, r25	; 0x02
     de8:	89 83       	std	Y+1, r24	; 0x01
    scarg.scall_ret = (bool_t)0;
     dea:	1b 82       	std	Y+3, r1	; 0x03
    cli(); // прерывания будут разрешены на выходе из _syscall()
     dec:	f8 94       	cli
    syscall(2,(void *)&scarg);
     dee:	82 e0       	ldi	r24, 0x02	; 2
     df0:	9e 01       	movw	r18, r28
     df2:	2f 5f       	subi	r18, 0xFF	; 255
     df4:	3f 4f       	sbci	r19, 0xFF	; 255
     df6:	b9 01       	movw	r22, r18
     df8:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <syscall>
    return scarg.scall_ret;
     dfc:	8b 81       	ldd	r24, Y+3	; 0x03
}
     dfe:	0f 90       	pop	r0
     e00:	0f 90       	pop	r0
     e02:	0f 90       	pop	r0
     e04:	0f 90       	pop	r0
     e06:	0f 90       	pop	r0
     e08:	cf 91       	pop	r28
     e0a:	df 91       	pop	r29
     e0c:	08 95       	ret

00000e0e <scall_proc_restart>:
//---------------------------------------------------------------------------------------------
//3
void scall_proc_restart( void * arg )
{
     e0e:	0f 93       	push	r16
     e10:	1f 93       	push	r17
     e12:	df 93       	push	r29
     e14:	cf 93       	push	r28
     e16:	00 d0       	rcall	.+0      	; 0xe18 <scall_proc_restart+0xa>
     e18:	cd b7       	in	r28, 0x3d	; 61
     e1a:	de b7       	in	r29, 0x3e	; 62
     e1c:	9a 83       	std	Y+2, r25	; 0x02
     e1e:	89 83       	std	Y+1, r24	; 0x01
    ((proc_runtime_arg_t *)arg)->scall_ret = proc_restart_isr( ((proc_runtime_arg_t *)arg)->proc );
     e20:	09 81       	ldd	r16, Y+1	; 0x01
     e22:	1a 81       	ldd	r17, Y+2	; 0x02
     e24:	e9 81       	ldd	r30, Y+1	; 0x01
     e26:	fa 81       	ldd	r31, Y+2	; 0x02
     e28:	80 81       	ld	r24, Z
     e2a:	91 81       	ldd	r25, Z+1	; 0x01
     e2c:	0e 94 6d 10 	call	0x20da	; 0x20da <proc_restart_isr>
     e30:	f8 01       	movw	r30, r16
     e32:	82 83       	std	Z+2, r24	; 0x02
}
     e34:	0f 90       	pop	r0
     e36:	0f 90       	pop	r0
     e38:	cf 91       	pop	r28
     e3a:	df 91       	pop	r29
     e3c:	1f 91       	pop	r17
     e3e:	0f 91       	pop	r16
     e40:	08 95       	ret

00000e42 <proc_restart>:
bool_t proc_restart( proc_t * proc )
{
     e42:	df 93       	push	r29
     e44:	cf 93       	push	r28
     e46:	00 d0       	rcall	.+0      	; 0xe48 <proc_restart+0x6>
     e48:	00 d0       	rcall	.+0      	; 0xe4a <proc_restart+0x8>
     e4a:	0f 92       	push	r0
     e4c:	cd b7       	in	r28, 0x3d	; 61
     e4e:	de b7       	in	r29, 0x3e	; 62
     e50:	9d 83       	std	Y+5, r25	; 0x05
     e52:	8c 83       	std	Y+4, r24	; 0x04
    proc_runtime_arg_t scarg;
    scarg.proc = proc;
     e54:	8c 81       	ldd	r24, Y+4	; 0x04
     e56:	9d 81       	ldd	r25, Y+5	; 0x05
     e58:	9a 83       	std	Y+2, r25	; 0x02
     e5a:	89 83       	std	Y+1, r24	; 0x01
    cli(); // прерывания будут разрешены на выходе из _syscall()
     e5c:	f8 94       	cli
    syscall(3,(void *)&scarg);
     e5e:	83 e0       	ldi	r24, 0x03	; 3
     e60:	9e 01       	movw	r18, r28
     e62:	2f 5f       	subi	r18, 0xFF	; 255
     e64:	3f 4f       	sbci	r19, 0xFF	; 255
     e66:	b9 01       	movw	r22, r18
     e68:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <syscall>
    return scarg.scall_ret;
     e6c:	8b 81       	ldd	r24, Y+3	; 0x03
}
     e6e:	0f 90       	pop	r0
     e70:	0f 90       	pop	r0
     e72:	0f 90       	pop	r0
     e74:	0f 90       	pop	r0
     e76:	0f 90       	pop	r0
     e78:	cf 91       	pop	r28
     e7a:	df 91       	pop	r29
     e7c:	08 95       	ret

00000e7e <scall_proc_stop>:
//---------------------------------------------------------------------------------------------
//4
void scall_proc_stop( void * arg )
{
     e7e:	0f 93       	push	r16
     e80:	1f 93       	push	r17
     e82:	df 93       	push	r29
     e84:	cf 93       	push	r28
     e86:	00 d0       	rcall	.+0      	; 0xe88 <scall_proc_stop+0xa>
     e88:	cd b7       	in	r28, 0x3d	; 61
     e8a:	de b7       	in	r29, 0x3e	; 62
     e8c:	9a 83       	std	Y+2, r25	; 0x02
     e8e:	89 83       	std	Y+1, r24	; 0x01
    ((proc_runtime_arg_t *)arg)->scall_ret = proc_stop_isr( ((proc_runtime_arg_t *)arg)->proc );
     e90:	09 81       	ldd	r16, Y+1	; 0x01
     e92:	1a 81       	ldd	r17, Y+2	; 0x02
     e94:	e9 81       	ldd	r30, Y+1	; 0x01
     e96:	fa 81       	ldd	r31, Y+2	; 0x02
     e98:	80 81       	ld	r24, Z
     e9a:	91 81       	ldd	r25, Z+1	; 0x01
     e9c:	0e 94 cf 10 	call	0x219e	; 0x219e <proc_stop_isr>
     ea0:	f8 01       	movw	r30, r16
     ea2:	82 83       	std	Z+2, r24	; 0x02
}
     ea4:	0f 90       	pop	r0
     ea6:	0f 90       	pop	r0
     ea8:	cf 91       	pop	r28
     eaa:	df 91       	pop	r29
     eac:	1f 91       	pop	r17
     eae:	0f 91       	pop	r16
     eb0:	08 95       	ret

00000eb2 <scall_proc_self_stop>:
}

//---------------------------------------------------------------------------------------------
//5
void scall_proc_self_stop( void * arg )
{
     eb2:	df 93       	push	r29
     eb4:	cf 93       	push	r28
     eb6:	00 d0       	rcall	.+0      	; 0xeb8 <scall_proc_self_stop+0x6>
     eb8:	00 d0       	rcall	.+0      	; 0xeba <scall_proc_self_stop+0x8>
     eba:	cd b7       	in	r28, 0x3d	; 61
     ebc:	de b7       	in	r29, 0x3e	; 62
     ebe:	9c 83       	std	Y+4, r25	; 0x04
     ec0:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = kernel.sched.current_proc;
     ec2:	80 91 28 01 	lds	r24, 0x0128
     ec6:	90 91 29 01 	lds	r25, 0x0129
     eca:	9a 83       	std	Y+2, r25	; 0x02
     ecc:	89 83       	std	Y+1, r24	; 0x01
    _proc_stop( proc );
     ece:	89 81       	ldd	r24, Y+1	; 0x01
     ed0:	9a 81       	ldd	r25, Y+2	; 0x02
     ed2:	0e 94 b6 10 	call	0x216c	; 0x216c <_proc_stop>
}
     ed6:	0f 90       	pop	r0
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	0f 90       	pop	r0
     ede:	cf 91       	pop	r28
     ee0:	df 91       	pop	r29
     ee2:	08 95       	ret

00000ee4 <proc_self_stop>:
void proc_self_stop(void)
{
     ee4:	df 93       	push	r29
     ee6:	cf 93       	push	r28
     ee8:	cd b7       	in	r28, 0x3d	; 61
     eea:	de b7       	in	r29, 0x3e	; 62
    cli(); // прерывания будут разрешены на выходе из _syscall()
     eec:	f8 94       	cli
    syscall(5,(void *)1);
     eee:	85 e0       	ldi	r24, 0x05	; 5
     ef0:	61 e0       	ldi	r22, 0x01	; 1
     ef2:	70 e0       	ldi	r23, 0x00	; 0
     ef4:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <syscall>
}
     ef8:	cf 91       	pop	r28
     efa:	df 91       	pop	r29
     efc:	08 95       	ret

00000efe <scall_proc_terminate>:
//---------------------------------------------------------------------------------------------
//6
/// Останов процесса после выхода из pmain, для обертки proc_run_wrapper
void scall_proc_terminate( void * arg )
{
     efe:	df 93       	push	r29
     f00:	cf 93       	push	r28
     f02:	00 d0       	rcall	.+0      	; 0xf04 <scall_proc_terminate+0x6>
     f04:	00 d0       	rcall	.+0      	; 0xf06 <scall_proc_terminate+0x8>
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62
     f0a:	9c 83       	std	Y+4, r25	; 0x04
     f0c:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = (proc_t *)arg;
     f0e:	8b 81       	ldd	r24, Y+3	; 0x03
     f10:	9c 81       	ldd	r25, Y+4	; 0x04
     f12:	9a 83       	std	Y+2, r25	; 0x02
     f14:	89 83       	std	Y+1, r24	; 0x01
    // Обрабатываем флаги
    // Нельзя выходить из pmain не освободив все захваченные ресурсы, за это процесс будет "убит"!
    if( proc->flags & PROC_FLG_HOLD ) proc->flags |= PROC_FLG_DEAD;
     f16:	e9 81       	ldd	r30, Y+1	; 0x01
     f18:	fa 81       	ldd	r31, Y+2	; 0x02
     f1a:	83 85       	ldd	r24, Z+11	; 0x0b
     f1c:	88 2f       	mov	r24, r24
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	84 70       	andi	r24, 0x04	; 4
     f22:	90 70       	andi	r25, 0x00	; 0
     f24:	00 97       	sbiw	r24, 0x00	; 0
     f26:	41 f0       	breq	.+16     	; 0xf38 <scall_proc_terminate+0x3a>
     f28:	e9 81       	ldd	r30, Y+1	; 0x01
     f2a:	fa 81       	ldd	r31, Y+2	; 0x02
     f2c:	83 85       	ldd	r24, Z+11	; 0x0b
     f2e:	80 68       	ori	r24, 0x80	; 128
     f30:	e9 81       	ldd	r30, Y+1	; 0x01
     f32:	fa 81       	ldd	r31, Y+2	; 0x02
     f34:	83 87       	std	Z+11, r24	; 0x0b
     f36:	07 c0       	rjmp	.+14     	; 0xf46 <scall_proc_terminate+0x48>
    // В противном случае - просто завершаем процесс
    else proc->flags |= PROC_FLG_END;
     f38:	e9 81       	ldd	r30, Y+1	; 0x01
     f3a:	fa 81       	ldd	r31, Y+2	; 0x02
     f3c:	83 85       	ldd	r24, Z+11	; 0x0b
     f3e:	80 64       	ori	r24, 0x40	; 64
     f40:	e9 81       	ldd	r30, Y+1	; 0x01
     f42:	fa 81       	ldd	r31, Y+2	; 0x02
     f44:	83 87       	std	Z+11, r24	; 0x0b
    proc->flags &= ~(PROC_FLG_PRE_END|PROC_FLG_RUN);
     f46:	e9 81       	ldd	r30, Y+1	; 0x01
     f48:	fa 81       	ldd	r31, Y+2	; 0x02
     f4a:	83 85       	ldd	r24, Z+11	; 0x0b
     f4c:	8d 7d       	andi	r24, 0xDD	; 221
     f4e:	e9 81       	ldd	r30, Y+1	; 0x01
     f50:	fa 81       	ldd	r31, Y+2	; 0x02
     f52:	83 87       	std	Z+11, r24	; 0x0b
    // Останов
    _proc_stop_( proc );
     f54:	89 81       	ldd	r24, Y+1	; 0x01
     f56:	9a 81       	ldd	r25, Y+2	; 0x02
     f58:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <gitem_cut>
    // Выполнить перепланировку
    resched();
     f5c:	0e 94 ef 04 	call	0x9de	; 0x9de <resched>
}
     f60:	0f 90       	pop	r0
     f62:	0f 90       	pop	r0
     f64:	0f 90       	pop	r0
     f66:	0f 90       	pop	r0
     f68:	cf 91       	pop	r28
     f6a:	df 91       	pop	r29
     f6c:	08 95       	ret

00000f6e <proc_run_wrapper>:
void proc_run_wrapper( proc_t * proc )
{
     f6e:	df 93       	push	r29
     f70:	cf 93       	push	r28
     f72:	00 d0       	rcall	.+0      	; 0xf74 <proc_run_wrapper+0x6>
     f74:	00 d0       	rcall	.+0      	; 0xf76 <proc_run_wrapper+0x8>
     f76:	00 d0       	rcall	.+0      	; 0xf78 <proc_run_wrapper+0xa>
     f78:	cd b7       	in	r28, 0x3d	; 61
     f7a:	de b7       	in	r29, 0x3e	; 62
     f7c:	9e 83       	std	Y+6, r25	; 0x06
     f7e:	8d 83       	std	Y+5, r24	; 0x05
    //Атомарно читаем pmain и arg
    cli();
     f80:	f8 94       	cli
    code_t pmain = proc->pmain;
     f82:	ed 81       	ldd	r30, Y+5	; 0x05
     f84:	fe 81       	ldd	r31, Y+6	; 0x06
     f86:	82 a1       	ldd	r24, Z+34	; 0x22
     f88:	93 a1       	ldd	r25, Z+35	; 0x23
     f8a:	9c 83       	std	Y+4, r25	; 0x04
     f8c:	8b 83       	std	Y+3, r24	; 0x03
    void * arg = proc->arg;
     f8e:	ed 81       	ldd	r30, Y+5	; 0x05
     f90:	fe 81       	ldd	r31, Y+6	; 0x06
     f92:	80 a5       	ldd	r24, Z+40	; 0x28
     f94:	91 a5       	ldd	r25, Z+41	; 0x29
     f96:	9a 83       	std	Y+2, r25	; 0x02
     f98:	89 83       	std	Y+1, r24	; 0x01
    sei();
     f9a:	78 94       	sei
    //Выполняем pmain
    pmain( arg );
     f9c:	89 81       	ldd	r24, Y+1	; 0x01
     f9e:	9a 81       	ldd	r25, Y+2	; 0x02
     fa0:	eb 81       	ldd	r30, Y+3	; 0x03
     fa2:	fc 81       	ldd	r31, Y+4	; 0x04
     fa4:	09 95       	icall
    // Завершаем процесс
    cli(); // прерывания будут разрешены на выходе из _syscall()
     fa6:	f8 94       	cli
    syscall(6,(void *)proc);
     fa8:	2d 81       	ldd	r18, Y+5	; 0x05
     faa:	3e 81       	ldd	r19, Y+6	; 0x06
     fac:	86 e0       	ldi	r24, 0x06	; 6
     fae:	b9 01       	movw	r22, r18
     fb0:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <syscall>
}
     fb4:	26 96       	adiw	r28, 0x06	; 6
     fb6:	0f b6       	in	r0, 0x3f	; 63
     fb8:	f8 94       	cli
     fba:	de bf       	out	0x3e, r29	; 62
     fbc:	0f be       	out	0x3f, r0	; 63
     fbe:	cd bf       	out	0x3d, r28	; 61
     fc0:	cf 91       	pop	r28
     fc2:	df 91       	pop	r29
     fc4:	08 95       	ret

00000fc6 <scall_proc_flag_stop>:
//---------------------------------------------------------------------------------------------
//7
void scall_proc_flag_stop( void * arg )
{
     fc6:	df 93       	push	r29
     fc8:	cf 93       	push	r28
     fca:	00 d0       	rcall	.+0      	; 0xfcc <scall_proc_flag_stop+0x6>
     fcc:	cd b7       	in	r28, 0x3d	; 61
     fce:	de b7       	in	r29, 0x3e	; 62
     fd0:	9a 83       	std	Y+2, r25	; 0x02
     fd2:	89 83       	std	Y+1, r24	; 0x01
    _proc_flag_stop_isr( *((flag_t *)arg) );
     fd4:	e9 81       	ldd	r30, Y+1	; 0x01
     fd6:	fa 81       	ldd	r31, Y+2	; 0x02
     fd8:	80 81       	ld	r24, Z
     fda:	0e 94 24 11 	call	0x2248	; 0x2248 <_proc_flag_stop_isr>
}
     fde:	0f 90       	pop	r0
     fe0:	0f 90       	pop	r0
     fe2:	cf 91       	pop	r28
     fe4:	df 91       	pop	r29
     fe6:	08 95       	ret

00000fe8 <scall_sig_init>:
///=================================================================
///                         Сигналы
//8
void scall_sig_init( void * arg )
{
     fe8:	df 93       	push	r29
     fea:	cf 93       	push	r28
     fec:	00 d0       	rcall	.+0      	; 0xfee <scall_sig_init+0x6>
     fee:	cd b7       	in	r28, 0x3d	; 61
     ff0:	de b7       	in	r29, 0x3e	; 62
     ff2:	9a 83       	std	Y+2, r25	; 0x02
     ff4:	89 83       	std	Y+1, r24	; 0x01
    sig_init_isr( (sig_t *)arg );
     ff6:	89 81       	ldd	r24, Y+1	; 0x01
     ff8:	9a 81       	ldd	r25, Y+2	; 0x02
     ffa:	0e 94 0f 14 	call	0x281e	; 0x281e <sig_init_isr>
}
     ffe:	0f 90       	pop	r0
    1000:	0f 90       	pop	r0
    1002:	cf 91       	pop	r28
    1004:	df 91       	pop	r29
    1006:	08 95       	ret

00001008 <scall_sig_wait>:
    syscall( 8, (void *)sig );
}
//---------------------------------------------------------------------------------------------
//9
void scall_sig_wait( void * arg )
{
    1008:	df 93       	push	r29
    100a:	cf 93       	push	r28
    100c:	00 d0       	rcall	.+0      	; 0x100e <scall_sig_wait+0x6>
    100e:	cd b7       	in	r28, 0x3d	; 61
    1010:	de b7       	in	r29, 0x3e	; 62
    1012:	9a 83       	std	Y+2, r25	; 0x02
    1014:	89 83       	std	Y+1, r24	; 0x01
    sig_wait_stage_1_isr( (sig_t *)arg );
    1016:	89 81       	ldd	r24, Y+1	; 0x01
    1018:	9a 81       	ldd	r25, Y+2	; 0x02
    101a:	0e 94 1f 14 	call	0x283e	; 0x283e <sig_wait_stage_1_isr>
}
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	08 95       	ret

00001028 <scall_sig_signal>:
    syscall( 7, (void *)&mask );/// Останов в случае необходимости
}
//---------------------------------------------------------------------------------------------
//10
void scall_sig_signal( void * arg )
{
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	00 d0       	rcall	.+0      	; 0x102e <scall_sig_signal+0x6>
    102e:	cd b7       	in	r28, 0x3d	; 61
    1030:	de b7       	in	r29, 0x3e	; 62
    1032:	9a 83       	std	Y+2, r25	; 0x02
    1034:	89 83       	std	Y+1, r24	; 0x01
    sig_signal_isr( (sig_t *)arg );
    1036:	89 81       	ldd	r24, Y+1	; 0x01
    1038:	9a 81       	ldd	r25, Y+2	; 0x02
    103a:	0e 94 44 14 	call	0x2888	; 0x2888 <sig_signal_isr>
}
    103e:	0f 90       	pop	r0
    1040:	0f 90       	pop	r0
    1042:	cf 91       	pop	r28
    1044:	df 91       	pop	r29
    1046:	08 95       	ret

00001048 <scall_sig_broadcast>:
    syscall( 10, (void *)sig );
}
//---------------------------------------------------------------------------------------------
//11
void scall_sig_broadcast( void * arg )
{
    1048:	df 93       	push	r29
    104a:	cf 93       	push	r28
    104c:	00 d0       	rcall	.+0      	; 0x104e <scall_sig_broadcast+0x6>
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
    1052:	9a 83       	std	Y+2, r25	; 0x02
    1054:	89 83       	std	Y+1, r24	; 0x01
    sig_broadcast_isr( (sig_t *)arg );
    1056:	89 81       	ldd	r24, Y+1	; 0x01
    1058:	9a 81       	ldd	r25, Y+2	; 0x02
    105a:	0e 94 6d 14 	call	0x28da	; 0x28da <sig_broadcast_isr>
}
    105e:	0f 90       	pop	r0
    1060:	0f 90       	pop	r0
    1062:	cf 91       	pop	r28
    1064:	df 91       	pop	r29
    1066:	08 95       	ret

00001068 <scall_sem_init>:
}
///=================================================================
///                         Семафоры
//12
void scall_sem_init( void * arg )
{
    1068:	df 93       	push	r29
    106a:	cf 93       	push	r28
    106c:	00 d0       	rcall	.+0      	; 0x106e <scall_sem_init+0x6>
    106e:	cd b7       	in	r28, 0x3d	; 61
    1070:	de b7       	in	r29, 0x3e	; 62
    1072:	9a 83       	std	Y+2, r25	; 0x02
    1074:	89 83       	std	Y+1, r24	; 0x01
    sem_init_isr( ((sem_init_arg_t *)arg)->sem, ((sem_init_arg_t *)arg)->count );
    1076:	e9 81       	ldd	r30, Y+1	; 0x01
    1078:	fa 81       	ldd	r31, Y+2	; 0x02
    107a:	80 81       	ld	r24, Z
    107c:	91 81       	ldd	r25, Z+1	; 0x01
    107e:	e9 81       	ldd	r30, Y+1	; 0x01
    1080:	fa 81       	ldd	r31, Y+2	; 0x02
    1082:	22 81       	ldd	r18, Z+2	; 0x02
    1084:	33 81       	ldd	r19, Z+3	; 0x03
    1086:	b9 01       	movw	r22, r18
    1088:	0e 94 86 13 	call	0x270c	; 0x270c <sem_init_isr>
}
    108c:	0f 90       	pop	r0
    108e:	0f 90       	pop	r0
    1090:	cf 91       	pop	r28
    1092:	df 91       	pop	r29
    1094:	08 95       	ret

00001096 <scall_sem_lock>:
    syscall( 12, (void *)&scarg );
}
//----------------------------------------------------------------------
//13
void scall_sem_lock( void * arg )
{
    1096:	0f 93       	push	r16
    1098:	1f 93       	push	r17
    109a:	df 93       	push	r29
    109c:	cf 93       	push	r28
    109e:	00 d0       	rcall	.+0      	; 0x10a0 <scall_sem_lock+0xa>
    10a0:	cd b7       	in	r28, 0x3d	; 61
    10a2:	de b7       	in	r29, 0x3e	; 62
    10a4:	9a 83       	std	Y+2, r25	; 0x02
    10a6:	89 83       	std	Y+1, r24	; 0x01
    ((sem_lock_arg_t *)arg)->scall_ret = _sem_lock( ((sem_lock_arg_t *)arg)->sem );
    10a8:	09 81       	ldd	r16, Y+1	; 0x01
    10aa:	1a 81       	ldd	r17, Y+2	; 0x02
    10ac:	e9 81       	ldd	r30, Y+1	; 0x01
    10ae:	fa 81       	ldd	r31, Y+2	; 0x02
    10b0:	80 81       	ld	r24, Z
    10b2:	91 81       	ldd	r25, Z+1	; 0x01
    10b4:	0e 94 a1 13 	call	0x2742	; 0x2742 <_sem_lock>
    10b8:	f8 01       	movw	r30, r16
    10ba:	82 83       	std	Z+2, r24	; 0x02
}
    10bc:	0f 90       	pop	r0
    10be:	0f 90       	pop	r0
    10c0:	cf 91       	pop	r28
    10c2:	df 91       	pop	r29
    10c4:	1f 91       	pop	r17
    10c6:	0f 91       	pop	r16
    10c8:	08 95       	ret

000010ca <scall_sem_unlock>:
    return scarg.scall_ret;
}
//----------------------------------------------------------------------
//14
void scall_sem_unlock( void * arg )
{
    10ca:	df 93       	push	r29
    10cc:	cf 93       	push	r28
    10ce:	00 d0       	rcall	.+0      	; 0x10d0 <scall_sem_unlock+0x6>
    10d0:	cd b7       	in	r28, 0x3d	; 61
    10d2:	de b7       	in	r29, 0x3e	; 62
    10d4:	9a 83       	std	Y+2, r25	; 0x02
    10d6:	89 83       	std	Y+1, r24	; 0x01
    _sem_unlock( (sem_t *)arg );
    10d8:	89 81       	ldd	r24, Y+1	; 0x01
    10da:	9a 81       	ldd	r25, Y+2	; 0x02
    10dc:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <_sem_unlock>
}
    10e0:	0f 90       	pop	r0
    10e2:	0f 90       	pop	r0
    10e4:	cf 91       	pop	r28
    10e6:	df 91       	pop	r29
    10e8:	08 95       	ret

000010ea <scall_mutex_init>:
}
///=================================================================
///                         Мьютексы
//15
void scall_mutex_init(void * arg)
{
    10ea:	df 93       	push	r29
    10ec:	cf 93       	push	r28
    10ee:	00 d0       	rcall	.+0      	; 0x10f0 <scall_mutex_init+0x6>
    10f0:	cd b7       	in	r28, 0x3d	; 61
    10f2:	de b7       	in	r29, 0x3e	; 62
    10f4:	9a 83       	std	Y+2, r25	; 0x02
    10f6:	89 83       	std	Y+1, r24	; 0x01
    mutex_init_isr(
    10f8:	e9 81       	ldd	r30, Y+1	; 0x01
    10fa:	fa 81       	ldd	r31, Y+2	; 0x02
    10fc:	80 81       	ld	r24, Z
    10fe:	91 81       	ldd	r25, Z+1	; 0x01
    1100:	e9 81       	ldd	r30, Y+1	; 0x01
    1102:	fa 81       	ldd	r31, Y+2	; 0x02
    1104:	22 81       	ldd	r18, Z+2	; 0x02
    1106:	62 2f       	mov	r22, r18
    1108:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <mutex_init_isr>
               ((mutex_init_arg_t *)arg)->mutex
#ifdef CONFIG_USE_HIGHEST_LOCKER
               ,((mutex_init_arg_t *)arg)->prio
#endif // CONFIG_USE_HIGHEST_LOCKER
               );
}
    110c:	0f 90       	pop	r0
    110e:	0f 90       	pop	r0
    1110:	cf 91       	pop	r28
    1112:	df 91       	pop	r29
    1114:	08 95       	ret

00001116 <scall_mutex_lock>:
    syscall( 15, (void *)&scarg );
}
//----------------------------------------------------------------------
//16
void scall_mutex_lock(void * arg)
{
    1116:	0f 93       	push	r16
    1118:	1f 93       	push	r17
    111a:	df 93       	push	r29
    111c:	cf 93       	push	r28
    111e:	00 d0       	rcall	.+0      	; 0x1120 <scall_mutex_lock+0xa>
    1120:	cd b7       	in	r28, 0x3d	; 61
    1122:	de b7       	in	r29, 0x3e	; 62
    1124:	9a 83       	std	Y+2, r25	; 0x02
    1126:	89 83       	std	Y+1, r24	; 0x01
    ((mutex_lock_arg_t *)arg)->scall_ret = _mutex_lock( ((mutex_lock_arg_t *)arg)->mutex );
    1128:	09 81       	ldd	r16, Y+1	; 0x01
    112a:	1a 81       	ldd	r17, Y+2	; 0x02
    112c:	e9 81       	ldd	r30, Y+1	; 0x01
    112e:	fa 81       	ldd	r31, Y+2	; 0x02
    1130:	80 81       	ld	r24, Z
    1132:	91 81       	ldd	r25, Z+1	; 0x01
    1134:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <_mutex_lock>
    1138:	f8 01       	movw	r30, r16
    113a:	82 83       	std	Z+2, r24	; 0x02
}
    113c:	0f 90       	pop	r0
    113e:	0f 90       	pop	r0
    1140:	cf 91       	pop	r28
    1142:	df 91       	pop	r29
    1144:	1f 91       	pop	r17
    1146:	0f 91       	pop	r16
    1148:	08 95       	ret

0000114a <scall_mutex_try_lock>:
}
// Захват
//----------------------------------------------------------------------
//17
void scall_mutex_try_lock(void * arg)
{
    114a:	0f 93       	push	r16
    114c:	1f 93       	push	r17
    114e:	df 93       	push	r29
    1150:	cf 93       	push	r28
    1152:	00 d0       	rcall	.+0      	; 0x1154 <scall_mutex_try_lock+0xa>
    1154:	cd b7       	in	r28, 0x3d	; 61
    1156:	de b7       	in	r29, 0x3e	; 62
    1158:	9a 83       	std	Y+2, r25	; 0x02
    115a:	89 83       	std	Y+1, r24	; 0x01
    ((mutex_lock_arg_t *)arg)->scall_ret = _mutex_try_lock( ((mutex_lock_arg_t *)arg)->mutex );
    115c:	09 81       	ldd	r16, Y+1	; 0x01
    115e:	1a 81       	ldd	r17, Y+2	; 0x02
    1160:	e9 81       	ldd	r30, Y+1	; 0x01
    1162:	fa 81       	ldd	r31, Y+2	; 0x02
    1164:	80 81       	ld	r24, Z
    1166:	91 81       	ldd	r25, Z+1	; 0x01
    1168:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <_mutex_try_lock>
    116c:	f8 01       	movw	r30, r16
    116e:	82 83       	std	Z+2, r24	; 0x02
}
    1170:	0f 90       	pop	r0
    1172:	0f 90       	pop	r0
    1174:	cf 91       	pop	r28
    1176:	df 91       	pop	r29
    1178:	1f 91       	pop	r17
    117a:	0f 91       	pop	r16
    117c:	08 95       	ret

0000117e <scall_mutex_unlock>:
    return scarg.scall_ret;
}
//----------------------------------------------------------------------
//18
void scall_mutex_unlock(void * arg)
{
    117e:	df 93       	push	r29
    1180:	cf 93       	push	r28
    1182:	00 d0       	rcall	.+0      	; 0x1184 <scall_mutex_unlock+0x6>
    1184:	cd b7       	in	r28, 0x3d	; 61
    1186:	de b7       	in	r29, 0x3e	; 62
    1188:	9a 83       	std	Y+2, r25	; 0x02
    118a:	89 83       	std	Y+1, r24	; 0x01
    _mutex_unlock( (mutex_t *)arg );
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	9a 81       	ldd	r25, Y+2	; 0x02
    1190:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <_mutex_unlock>
}
    1194:	0f 90       	pop	r0
    1196:	0f 90       	pop	r0
    1198:	cf 91       	pop	r28
    119a:	df 91       	pop	r29
    119c:	08 95       	ret

0000119e <osbme_init_stack>:
*                                                                                        *
*****************************************************************************************/
#include <avr/io.h>
#include "../../osbme.h"
void * osbme_init_stack( void * top_of_stack, osbme_code_t code, void * arg )
{
    119e:	df 93       	push	r29
    11a0:	cf 93       	push	r28
    11a2:	cd b7       	in	r28, 0x3d	; 61
    11a4:	de b7       	in	r29, 0x3e	; 62
    11a6:	2a 97       	sbiw	r28, 0x0a	; 10
    11a8:	0f b6       	in	r0, 0x3f	; 63
    11aa:	f8 94       	cli
    11ac:	de bf       	out	0x3e, r29	; 62
    11ae:	0f be       	out	0x3f, r0	; 63
    11b0:	cd bf       	out	0x3d, r28	; 61
    11b2:	9e 83       	std	Y+6, r25	; 0x06
    11b4:	8d 83       	std	Y+5, r24	; 0x05
    11b6:	78 87       	std	Y+8, r23	; 0x08
    11b8:	6f 83       	std	Y+7, r22	; 0x07
    11ba:	5a 87       	std	Y+10, r21	; 0x0a
    11bc:	49 87       	std	Y+9, r20	; 0x09
    char * tos = (char *)top_of_stack;
    11be:	8d 81       	ldd	r24, Y+5	; 0x05
    11c0:	9e 81       	ldd	r25, Y+6	; 0x06
    11c2:	9c 83       	std	Y+4, r25	; 0x04
    11c4:	8b 83       	std	Y+3, r24	; 0x03
    //*tos-- = 0x11;
    //*tos-- = 0x22;
    //*tos-- = 0x33;

    // return address
    unsigned short tmp = (unsigned short)code;
    11c6:	8f 81       	ldd	r24, Y+7	; 0x07
    11c8:	98 85       	ldd	r25, Y+8	; 0x08
    11ca:	9a 83       	std	Y+2, r25	; 0x02
    11cc:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (char)(tmp&(unsigned short)0x00ff);
    11ce:	89 81       	ldd	r24, Y+1	; 0x01
    11d0:	eb 81       	ldd	r30, Y+3	; 0x03
    11d2:	fc 81       	ldd	r31, Y+4	; 0x04
    11d4:	80 83       	st	Z, r24
    11d6:	8b 81       	ldd	r24, Y+3	; 0x03
    11d8:	9c 81       	ldd	r25, Y+4	; 0x04
    11da:	01 97       	sbiw	r24, 0x01	; 1
    11dc:	9c 83       	std	Y+4, r25	; 0x04
    11de:	8b 83       	std	Y+3, r24	; 0x03
    tmp>>=8;
    11e0:	89 81       	ldd	r24, Y+1	; 0x01
    11e2:	9a 81       	ldd	r25, Y+2	; 0x02
    11e4:	89 2f       	mov	r24, r25
    11e6:	99 27       	eor	r25, r25
    11e8:	9a 83       	std	Y+2, r25	; 0x02
    11ea:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (char)(tmp&(unsigned short)0x00ff);
    11ec:	89 81       	ldd	r24, Y+1	; 0x01
    11ee:	eb 81       	ldd	r30, Y+3	; 0x03
    11f0:	fc 81       	ldd	r31, Y+4	; 0x04
    11f2:	80 83       	st	Z, r24
    11f4:	8b 81       	ldd	r24, Y+3	; 0x03
    11f6:	9c 81       	ldd	r25, Y+4	; 0x04
    11f8:	01 97       	sbiw	r24, 0x01	; 1
    11fa:	9c 83       	std	Y+4, r25	; 0x04
    11fc:	8b 83       	std	Y+3, r24	; 0x03

    // s
    *tos-- = 0x00;
    11fe:	eb 81       	ldd	r30, Y+3	; 0x03
    1200:	fc 81       	ldd	r31, Y+4	; 0x04
    1202:	10 82       	st	Z, r1
    1204:	8b 81       	ldd	r24, Y+3	; 0x03
    1206:	9c 81       	ldd	r25, Y+4	; 0x04
    1208:	01 97       	sbiw	r24, 0x01	; 1
    120a:	9c 83       	std	Y+4, r25	; 0x04
    120c:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x00;// r1 must B 0
    120e:	eb 81       	ldd	r30, Y+3	; 0x03
    1210:	fc 81       	ldd	r31, Y+4	; 0x04
    1212:	10 82       	st	Z, r1
    1214:	8b 81       	ldd	r24, Y+3	; 0x03
    1216:	9c 81       	ldd	r25, Y+4	; 0x04
    1218:	01 97       	sbiw	r24, 0x01	; 1
    121a:	9c 83       	std	Y+4, r25	; 0x04
    121c:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x02;// r2
    121e:	eb 81       	ldd	r30, Y+3	; 0x03
    1220:	fc 81       	ldd	r31, Y+4	; 0x04
    1222:	82 e0       	ldi	r24, 0x02	; 2
    1224:	80 83       	st	Z, r24
    1226:	8b 81       	ldd	r24, Y+3	; 0x03
    1228:	9c 81       	ldd	r25, Y+4	; 0x04
    122a:	01 97       	sbiw	r24, 0x01	; 1
    122c:	9c 83       	std	Y+4, r25	; 0x04
    122e:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x80;// SREG: enable interrupts
    1230:	eb 81       	ldd	r30, Y+3	; 0x03
    1232:	fc 81       	ldd	r31, Y+4	; 0x04
    1234:	80 e8       	ldi	r24, 0x80	; 128
    1236:	80 83       	st	Z, r24
    1238:	8b 81       	ldd	r24, Y+3	; 0x03
    123a:	9c 81       	ldd	r25, Y+4	; 0x04
    123c:	01 97       	sbiw	r24, 0x01	; 1
    123e:	9c 83       	std	Y+4, r25	; 0x04
    1240:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x03;
    1242:	eb 81       	ldd	r30, Y+3	; 0x03
    1244:	fc 81       	ldd	r31, Y+4	; 0x04
    1246:	83 e0       	ldi	r24, 0x03	; 3
    1248:	80 83       	st	Z, r24
    124a:	8b 81       	ldd	r24, Y+3	; 0x03
    124c:	9c 81       	ldd	r25, Y+4	; 0x04
    124e:	01 97       	sbiw	r24, 0x01	; 1
    1250:	9c 83       	std	Y+4, r25	; 0x04
    1252:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x04;
    1254:	eb 81       	ldd	r30, Y+3	; 0x03
    1256:	fc 81       	ldd	r31, Y+4	; 0x04
    1258:	84 e0       	ldi	r24, 0x04	; 4
    125a:	80 83       	st	Z, r24
    125c:	8b 81       	ldd	r24, Y+3	; 0x03
    125e:	9c 81       	ldd	r25, Y+4	; 0x04
    1260:	01 97       	sbiw	r24, 0x01	; 1
    1262:	9c 83       	std	Y+4, r25	; 0x04
    1264:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x05;
    1266:	eb 81       	ldd	r30, Y+3	; 0x03
    1268:	fc 81       	ldd	r31, Y+4	; 0x04
    126a:	85 e0       	ldi	r24, 0x05	; 5
    126c:	80 83       	st	Z, r24
    126e:	8b 81       	ldd	r24, Y+3	; 0x03
    1270:	9c 81       	ldd	r25, Y+4	; 0x04
    1272:	01 97       	sbiw	r24, 0x01	; 1
    1274:	9c 83       	std	Y+4, r25	; 0x04
    1276:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x06;
    1278:	eb 81       	ldd	r30, Y+3	; 0x03
    127a:	fc 81       	ldd	r31, Y+4	; 0x04
    127c:	86 e0       	ldi	r24, 0x06	; 6
    127e:	80 83       	st	Z, r24
    1280:	8b 81       	ldd	r24, Y+3	; 0x03
    1282:	9c 81       	ldd	r25, Y+4	; 0x04
    1284:	01 97       	sbiw	r24, 0x01	; 1
    1286:	9c 83       	std	Y+4, r25	; 0x04
    1288:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x07;
    128a:	eb 81       	ldd	r30, Y+3	; 0x03
    128c:	fc 81       	ldd	r31, Y+4	; 0x04
    128e:	87 e0       	ldi	r24, 0x07	; 7
    1290:	80 83       	st	Z, r24
    1292:	8b 81       	ldd	r24, Y+3	; 0x03
    1294:	9c 81       	ldd	r25, Y+4	; 0x04
    1296:	01 97       	sbiw	r24, 0x01	; 1
    1298:	9c 83       	std	Y+4, r25	; 0x04
    129a:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x08;
    129c:	eb 81       	ldd	r30, Y+3	; 0x03
    129e:	fc 81       	ldd	r31, Y+4	; 0x04
    12a0:	88 e0       	ldi	r24, 0x08	; 8
    12a2:	80 83       	st	Z, r24
    12a4:	8b 81       	ldd	r24, Y+3	; 0x03
    12a6:	9c 81       	ldd	r25, Y+4	; 0x04
    12a8:	01 97       	sbiw	r24, 0x01	; 1
    12aa:	9c 83       	std	Y+4, r25	; 0x04
    12ac:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x09;
    12ae:	eb 81       	ldd	r30, Y+3	; 0x03
    12b0:	fc 81       	ldd	r31, Y+4	; 0x04
    12b2:	89 e0       	ldi	r24, 0x09	; 9
    12b4:	80 83       	st	Z, r24
    12b6:	8b 81       	ldd	r24, Y+3	; 0x03
    12b8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ba:	01 97       	sbiw	r24, 0x01	; 1
    12bc:	9c 83       	std	Y+4, r25	; 0x04
    12be:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x10;
    12c0:	eb 81       	ldd	r30, Y+3	; 0x03
    12c2:	fc 81       	ldd	r31, Y+4	; 0x04
    12c4:	80 e1       	ldi	r24, 0x10	; 16
    12c6:	80 83       	st	Z, r24
    12c8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ca:	9c 81       	ldd	r25, Y+4	; 0x04
    12cc:	01 97       	sbiw	r24, 0x01	; 1
    12ce:	9c 83       	std	Y+4, r25	; 0x04
    12d0:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x11;
    12d2:	eb 81       	ldd	r30, Y+3	; 0x03
    12d4:	fc 81       	ldd	r31, Y+4	; 0x04
    12d6:	81 e1       	ldi	r24, 0x11	; 17
    12d8:	80 83       	st	Z, r24
    12da:	8b 81       	ldd	r24, Y+3	; 0x03
    12dc:	9c 81       	ldd	r25, Y+4	; 0x04
    12de:	01 97       	sbiw	r24, 0x01	; 1
    12e0:	9c 83       	std	Y+4, r25	; 0x04
    12e2:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x12;
    12e4:	eb 81       	ldd	r30, Y+3	; 0x03
    12e6:	fc 81       	ldd	r31, Y+4	; 0x04
    12e8:	82 e1       	ldi	r24, 0x12	; 18
    12ea:	80 83       	st	Z, r24
    12ec:	8b 81       	ldd	r24, Y+3	; 0x03
    12ee:	9c 81       	ldd	r25, Y+4	; 0x04
    12f0:	01 97       	sbiw	r24, 0x01	; 1
    12f2:	9c 83       	std	Y+4, r25	; 0x04
    12f4:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x13;
    12f6:	eb 81       	ldd	r30, Y+3	; 0x03
    12f8:	fc 81       	ldd	r31, Y+4	; 0x04
    12fa:	83 e1       	ldi	r24, 0x13	; 19
    12fc:	80 83       	st	Z, r24
    12fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1300:	9c 81       	ldd	r25, Y+4	; 0x04
    1302:	01 97       	sbiw	r24, 0x01	; 1
    1304:	9c 83       	std	Y+4, r25	; 0x04
    1306:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x14;
    1308:	eb 81       	ldd	r30, Y+3	; 0x03
    130a:	fc 81       	ldd	r31, Y+4	; 0x04
    130c:	84 e1       	ldi	r24, 0x14	; 20
    130e:	80 83       	st	Z, r24
    1310:	8b 81       	ldd	r24, Y+3	; 0x03
    1312:	9c 81       	ldd	r25, Y+4	; 0x04
    1314:	01 97       	sbiw	r24, 0x01	; 1
    1316:	9c 83       	std	Y+4, r25	; 0x04
    1318:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x15;
    131a:	eb 81       	ldd	r30, Y+3	; 0x03
    131c:	fc 81       	ldd	r31, Y+4	; 0x04
    131e:	85 e1       	ldi	r24, 0x15	; 21
    1320:	80 83       	st	Z, r24
    1322:	8b 81       	ldd	r24, Y+3	; 0x03
    1324:	9c 81       	ldd	r25, Y+4	; 0x04
    1326:	01 97       	sbiw	r24, 0x01	; 1
    1328:	9c 83       	std	Y+4, r25	; 0x04
    132a:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x16;
    132c:	eb 81       	ldd	r30, Y+3	; 0x03
    132e:	fc 81       	ldd	r31, Y+4	; 0x04
    1330:	86 e1       	ldi	r24, 0x16	; 22
    1332:	80 83       	st	Z, r24
    1334:	8b 81       	ldd	r24, Y+3	; 0x03
    1336:	9c 81       	ldd	r25, Y+4	; 0x04
    1338:	01 97       	sbiw	r24, 0x01	; 1
    133a:	9c 83       	std	Y+4, r25	; 0x04
    133c:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x17;
    133e:	eb 81       	ldd	r30, Y+3	; 0x03
    1340:	fc 81       	ldd	r31, Y+4	; 0x04
    1342:	87 e1       	ldi	r24, 0x17	; 23
    1344:	80 83       	st	Z, r24
    1346:	8b 81       	ldd	r24, Y+3	; 0x03
    1348:	9c 81       	ldd	r25, Y+4	; 0x04
    134a:	01 97       	sbiw	r24, 0x01	; 1
    134c:	9c 83       	std	Y+4, r25	; 0x04
    134e:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x18;
    1350:	eb 81       	ldd	r30, Y+3	; 0x03
    1352:	fc 81       	ldd	r31, Y+4	; 0x04
    1354:	88 e1       	ldi	r24, 0x18	; 24
    1356:	80 83       	st	Z, r24
    1358:	8b 81       	ldd	r24, Y+3	; 0x03
    135a:	9c 81       	ldd	r25, Y+4	; 0x04
    135c:	01 97       	sbiw	r24, 0x01	; 1
    135e:	9c 83       	std	Y+4, r25	; 0x04
    1360:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x19;
    1362:	eb 81       	ldd	r30, Y+3	; 0x03
    1364:	fc 81       	ldd	r31, Y+4	; 0x04
    1366:	89 e1       	ldi	r24, 0x19	; 25
    1368:	80 83       	st	Z, r24
    136a:	8b 81       	ldd	r24, Y+3	; 0x03
    136c:	9c 81       	ldd	r25, Y+4	; 0x04
    136e:	01 97       	sbiw	r24, 0x01	; 1
    1370:	9c 83       	std	Y+4, r25	; 0x04
    1372:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x20;
    1374:	eb 81       	ldd	r30, Y+3	; 0x03
    1376:	fc 81       	ldd	r31, Y+4	; 0x04
    1378:	80 e2       	ldi	r24, 0x20	; 32
    137a:	80 83       	st	Z, r24
    137c:	8b 81       	ldd	r24, Y+3	; 0x03
    137e:	9c 81       	ldd	r25, Y+4	; 0x04
    1380:	01 97       	sbiw	r24, 0x01	; 1
    1382:	9c 83       	std	Y+4, r25	; 0x04
    1384:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x21;
    1386:	eb 81       	ldd	r30, Y+3	; 0x03
    1388:	fc 81       	ldd	r31, Y+4	; 0x04
    138a:	81 e2       	ldi	r24, 0x21	; 33
    138c:	80 83       	st	Z, r24
    138e:	8b 81       	ldd	r24, Y+3	; 0x03
    1390:	9c 81       	ldd	r25, Y+4	; 0x04
    1392:	01 97       	sbiw	r24, 0x01	; 1
    1394:	9c 83       	std	Y+4, r25	; 0x04
    1396:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x22;
    1398:	eb 81       	ldd	r30, Y+3	; 0x03
    139a:	fc 81       	ldd	r31, Y+4	; 0x04
    139c:	82 e2       	ldi	r24, 0x22	; 34
    139e:	80 83       	st	Z, r24
    13a0:	8b 81       	ldd	r24, Y+3	; 0x03
    13a2:	9c 81       	ldd	r25, Y+4	; 0x04
    13a4:	01 97       	sbiw	r24, 0x01	; 1
    13a6:	9c 83       	std	Y+4, r25	; 0x04
    13a8:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x23;
    13aa:	eb 81       	ldd	r30, Y+3	; 0x03
    13ac:	fc 81       	ldd	r31, Y+4	; 0x04
    13ae:	83 e2       	ldi	r24, 0x23	; 35
    13b0:	80 83       	st	Z, r24
    13b2:	8b 81       	ldd	r24, Y+3	; 0x03
    13b4:	9c 81       	ldd	r25, Y+4	; 0x04
    13b6:	01 97       	sbiw	r24, 0x01	; 1
    13b8:	9c 83       	std	Y+4, r25	; 0x04
    13ba:	8b 83       	std	Y+3, r24	; 0x03

    tmp = (unsigned short)arg;
    13bc:	89 85       	ldd	r24, Y+9	; 0x09
    13be:	9a 85       	ldd	r25, Y+10	; 0x0a
    13c0:	9a 83       	std	Y+2, r25	; 0x02
    13c2:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (char)(tmp&(unsigned short)0x00ff); // r24 LSByte of arg
    13c4:	89 81       	ldd	r24, Y+1	; 0x01
    13c6:	eb 81       	ldd	r30, Y+3	; 0x03
    13c8:	fc 81       	ldd	r31, Y+4	; 0x04
    13ca:	80 83       	st	Z, r24
    13cc:	8b 81       	ldd	r24, Y+3	; 0x03
    13ce:	9c 81       	ldd	r25, Y+4	; 0x04
    13d0:	01 97       	sbiw	r24, 0x01	; 1
    13d2:	9c 83       	std	Y+4, r25	; 0x04
    13d4:	8b 83       	std	Y+3, r24	; 0x03
    tmp>>=8;
    13d6:	89 81       	ldd	r24, Y+1	; 0x01
    13d8:	9a 81       	ldd	r25, Y+2	; 0x02
    13da:	89 2f       	mov	r24, r25
    13dc:	99 27       	eor	r25, r25
    13de:	9a 83       	std	Y+2, r25	; 0x02
    13e0:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (char)(tmp&(unsigned short)0x00ff); // r25 MSByte of arg
    13e2:	89 81       	ldd	r24, Y+1	; 0x01
    13e4:	eb 81       	ldd	r30, Y+3	; 0x03
    13e6:	fc 81       	ldd	r31, Y+4	; 0x04
    13e8:	80 83       	st	Z, r24
    13ea:	8b 81       	ldd	r24, Y+3	; 0x03
    13ec:	9c 81       	ldd	r25, Y+4	; 0x04
    13ee:	01 97       	sbiw	r24, 0x01	; 1
    13f0:	9c 83       	std	Y+4, r25	; 0x04
    13f2:	8b 83       	std	Y+3, r24	; 0x03

    *tos-- = 0x26;
    13f4:	eb 81       	ldd	r30, Y+3	; 0x03
    13f6:	fc 81       	ldd	r31, Y+4	; 0x04
    13f8:	86 e2       	ldi	r24, 0x26	; 38
    13fa:	80 83       	st	Z, r24
    13fc:	8b 81       	ldd	r24, Y+3	; 0x03
    13fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1400:	01 97       	sbiw	r24, 0x01	; 1
    1402:	9c 83       	std	Y+4, r25	; 0x04
    1404:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x27;
    1406:	eb 81       	ldd	r30, Y+3	; 0x03
    1408:	fc 81       	ldd	r31, Y+4	; 0x04
    140a:	87 e2       	ldi	r24, 0x27	; 39
    140c:	80 83       	st	Z, r24
    140e:	8b 81       	ldd	r24, Y+3	; 0x03
    1410:	9c 81       	ldd	r25, Y+4	; 0x04
    1412:	01 97       	sbiw	r24, 0x01	; 1
    1414:	9c 83       	std	Y+4, r25	; 0x04
    1416:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x28;
    1418:	eb 81       	ldd	r30, Y+3	; 0x03
    141a:	fc 81       	ldd	r31, Y+4	; 0x04
    141c:	88 e2       	ldi	r24, 0x28	; 40
    141e:	80 83       	st	Z, r24
    1420:	8b 81       	ldd	r24, Y+3	; 0x03
    1422:	9c 81       	ldd	r25, Y+4	; 0x04
    1424:	01 97       	sbiw	r24, 0x01	; 1
    1426:	9c 83       	std	Y+4, r25	; 0x04
    1428:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x29;
    142a:	eb 81       	ldd	r30, Y+3	; 0x03
    142c:	fc 81       	ldd	r31, Y+4	; 0x04
    142e:	89 e2       	ldi	r24, 0x29	; 41
    1430:	80 83       	st	Z, r24
    1432:	8b 81       	ldd	r24, Y+3	; 0x03
    1434:	9c 81       	ldd	r25, Y+4	; 0x04
    1436:	01 97       	sbiw	r24, 0x01	; 1
    1438:	9c 83       	std	Y+4, r25	; 0x04
    143a:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x30;
    143c:	eb 81       	ldd	r30, Y+3	; 0x03
    143e:	fc 81       	ldd	r31, Y+4	; 0x04
    1440:	80 e3       	ldi	r24, 0x30	; 48
    1442:	80 83       	st	Z, r24
    1444:	8b 81       	ldd	r24, Y+3	; 0x03
    1446:	9c 81       	ldd	r25, Y+4	; 0x04
    1448:	01 97       	sbiw	r24, 0x01	; 1
    144a:	9c 83       	std	Y+4, r25	; 0x04
    144c:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x31;
    144e:	eb 81       	ldd	r30, Y+3	; 0x03
    1450:	fc 81       	ldd	r31, Y+4	; 0x04
    1452:	81 e3       	ldi	r24, 0x31	; 49
    1454:	80 83       	st	Z, r24
    1456:	8b 81       	ldd	r24, Y+3	; 0x03
    1458:	9c 81       	ldd	r25, Y+4	; 0x04
    145a:	01 97       	sbiw	r24, 0x01	; 1
    145c:	9c 83       	std	Y+4, r25	; 0x04
    145e:	8b 83       	std	Y+3, r24	; 0x03
#ifdef RAMPZ
    *tos-- = 0xff;
#endif
    return((void *)tos);
    1460:	8b 81       	ldd	r24, Y+3	; 0x03
    1462:	9c 81       	ldd	r25, Y+4	; 0x04
}
    1464:	2a 96       	adiw	r28, 0x0a	; 10
    1466:	0f b6       	in	r0, 0x3f	; 63
    1468:	f8 94       	cli
    146a:	de bf       	out	0x3e, r29	; 62
    146c:	0f be       	out	0x3f, r0	; 63
    146e:	cd bf       	out	0x3d, r28	; 61
    1470:	cf 91       	pop	r28
    1472:	df 91       	pop	r29
    1474:	08 95       	ret

00001476 <enter_crit_sec>:
    if( kernel.sched[core].nested_crit_sec == (count_t)0 )enable_interrupts();
}

#else
void enter_crit_sec(void)
{
    1476:	df 93       	push	r29
    1478:	cf 93       	push	r28
    147a:	cd b7       	in	r28, 0x3d	; 61
    147c:	de b7       	in	r29, 0x3e	; 62
    disable_interrupts();
    147e:	0e 94 b5 04 	call	0x96a	; 0x96a <disable_interrupts>
    kernel.sched.nested_crit_sec++;
    1482:	80 91 50 01 	lds	r24, 0x0150
    1486:	90 91 51 01 	lds	r25, 0x0151
    148a:	01 96       	adiw	r24, 0x01	; 1
    148c:	90 93 51 01 	sts	0x0151, r25
    1490:	80 93 50 01 	sts	0x0150, r24
}
    1494:	cf 91       	pop	r28
    1496:	df 91       	pop	r29
    1498:	08 95       	ret

0000149a <exit_crit_sec>:
void exit_crit_sec(void)
{
    149a:	df 93       	push	r29
    149c:	cf 93       	push	r28
    149e:	cd b7       	in	r28, 0x3d	; 61
    14a0:	de b7       	in	r29, 0x3e	; 62
    if( kernel.sched.nested_crit_sec != (count_t)0 )kernel.sched.nested_crit_sec--;
    14a2:	80 91 50 01 	lds	r24, 0x0150
    14a6:	90 91 51 01 	lds	r25, 0x0151
    14aa:	00 97       	sbiw	r24, 0x00	; 0
    14ac:	49 f0       	breq	.+18     	; 0x14c0 <exit_crit_sec+0x26>
    14ae:	80 91 50 01 	lds	r24, 0x0150
    14b2:	90 91 51 01 	lds	r25, 0x0151
    14b6:	01 97       	sbiw	r24, 0x01	; 1
    14b8:	90 93 51 01 	sts	0x0151, r25
    14bc:	80 93 50 01 	sts	0x0150, r24
    if( kernel.sched.nested_crit_sec == (count_t)0 )enable_interrupts();
    14c0:	80 91 50 01 	lds	r24, 0x0150
    14c4:	90 91 51 01 	lds	r25, 0x0151
    14c8:	00 97       	sbiw	r24, 0x00	; 0
    14ca:	11 f4       	brne	.+4      	; 0x14d0 <exit_crit_sec+0x36>
    14cc:	0e 94 bd 04 	call	0x97a	; 0x97a <enable_interrupts>
}
    14d0:	cf 91       	pop	r28
    14d2:	df 91       	pop	r29
    14d4:	08 95       	ret

000014d6 <gitem_init>:
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
// Инициация
void gitem_init(gitem_t * gitem, prio_t prio)
{
    14d6:	df 93       	push	r29
    14d8:	cf 93       	push	r28
    14da:	00 d0       	rcall	.+0      	; 0x14dc <gitem_init+0x6>
    14dc:	00 d0       	rcall	.+0      	; 0x14de <gitem_init+0x8>
    14de:	0f 92       	push	r0
    14e0:	cd b7       	in	r28, 0x3d	; 61
    14e2:	de b7       	in	r29, 0x3e	; 62
    14e4:	9c 83       	std	Y+4, r25	; 0x04
    14e6:	8b 83       	std	Y+3, r24	; 0x03
    14e8:	6d 83       	std	Y+5, r22	; 0x05
    group_t * group = &gitem->grp;
    14ea:	8b 81       	ldd	r24, Y+3	; 0x03
    14ec:	9c 81       	ldd	r25, Y+4	; 0x04
    14ee:	06 96       	adiw	r24, 0x06	; 6
    14f0:	9a 83       	std	Y+2, r25	; 0x02
    14f2:	89 83       	std	Y+1, r24	; 0x01
    item_init( (item_t *)gitem );
    14f4:	8b 81       	ldd	r24, Y+3	; 0x03
    14f6:	9c 81       	ldd	r25, Y+4	; 0x04
    14f8:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <item_init>
    group_init( group, prio );
    14fc:	89 81       	ldd	r24, Y+1	; 0x01
    14fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1500:	6d 81       	ldd	r22, Y+5	; 0x05
    1502:	0e 94 c1 0c 	call	0x1982	; 0x1982 <group_init>
    gitem->group = group;
    1506:	eb 81       	ldd	r30, Y+3	; 0x03
    1508:	fc 81       	ldd	r31, Y+4	; 0x04
    150a:	89 81       	ldd	r24, Y+1	; 0x01
    150c:	9a 81       	ldd	r25, Y+2	; 0x02
    150e:	95 83       	std	Z+5, r25	; 0x05
    1510:	84 83       	std	Z+4, r24	; 0x04
}
    1512:	0f 90       	pop	r0
    1514:	0f 90       	pop	r0
    1516:	0f 90       	pop	r0
    1518:	0f 90       	pop	r0
    151a:	0f 90       	pop	r0
    151c:	cf 91       	pop	r28
    151e:	df 91       	pop	r29
    1520:	08 95       	ret

00001522 <gitem_insert>:
// Вставить в список
void gitem_insert(gitem_t * gitem, xlist_t *xlist)
{
    1522:	df 93       	push	r29
    1524:	cf 93       	push	r28
    1526:	cd b7       	in	r28, 0x3d	; 61
    1528:	de b7       	in	r29, 0x3e	; 62
    152a:	28 97       	sbiw	r28, 0x08	; 8
    152c:	0f b6       	in	r0, 0x3f	; 63
    152e:	f8 94       	cli
    1530:	de bf       	out	0x3e, r29	; 62
    1532:	0f be       	out	0x3f, r0	; 63
    1534:	cd bf       	out	0x3d, r28	; 61
    1536:	9e 83       	std	Y+6, r25	; 0x06
    1538:	8d 83       	std	Y+5, r24	; 0x05
    153a:	78 87       	std	Y+8, r23	; 0x08
    153c:	6f 83       	std	Y+7, r22	; 0x07
    prio_t prio = gitem->group->prio;
    153e:	ed 81       	ldd	r30, Y+5	; 0x05
    1540:	fe 81       	ldd	r31, Y+6	; 0x06
    1542:	04 80       	ldd	r0, Z+4	; 0x04
    1544:	f5 81       	ldd	r31, Z+5	; 0x05
    1546:	e0 2d       	mov	r30, r0
    1548:	82 81       	ldd	r24, Z+2	; 0x02
    154a:	8c 83       	std	Y+4, r24	; 0x04
    index_t mask = ((index_t)1)<<prio;
    154c:	8c 81       	ldd	r24, Y+4	; 0x04
    154e:	28 2f       	mov	r18, r24
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	02 c0       	rjmp	.+4      	; 0x155c <gitem_insert+0x3a>
    1558:	88 0f       	add	r24, r24
    155a:	99 1f       	adc	r25, r25
    155c:	2a 95       	dec	r18
    155e:	e2 f7       	brpl	.-8      	; 0x1558 <gitem_insert+0x36>
    1560:	8b 83       	std	Y+3, r24	; 0x03
    item_t ** head = (item_t **)xlist + prio;
    1562:	2f 81       	ldd	r18, Y+7	; 0x07
    1564:	38 85       	ldd	r19, Y+8	; 0x08
    1566:	8c 81       	ldd	r24, Y+4	; 0x04
    1568:	88 2f       	mov	r24, r24
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	88 0f       	add	r24, r24
    156e:	99 1f       	adc	r25, r25
    1570:	82 0f       	add	r24, r18
    1572:	93 1f       	adc	r25, r19
    1574:	9a 83       	std	Y+2, r25	; 0x02
    1576:	89 83       	std	Y+1, r24	; 0x01
    // Пуста ли часть списка с таким приоритетом
    if( ( xlist->index )& mask)
    1578:	ef 81       	ldd	r30, Y+7	; 0x07
    157a:	f8 85       	ldd	r31, Y+8	; 0x08
    157c:	90 89       	ldd	r25, Z+16	; 0x10
    157e:	8b 81       	ldd	r24, Y+3	; 0x03
    1580:	89 23       	and	r24, r25
    1582:	88 23       	and	r24, r24
    1584:	51 f0       	breq	.+20     	; 0x159a <gitem_insert+0x78>
    {
        //Не пуста вставляем туда gitem
        item_insert( (item_t *)gitem, *head );
    1586:	8d 81       	ldd	r24, Y+5	; 0x05
    1588:	9e 81       	ldd	r25, Y+6	; 0x06
    158a:	e9 81       	ldd	r30, Y+1	; 0x01
    158c:	fa 81       	ldd	r31, Y+2	; 0x02
    158e:	20 81       	ld	r18, Z
    1590:	31 81       	ldd	r19, Z+1	; 0x01
    1592:	b9 01       	movw	r22, r18
    1594:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <item_insert>
    1598:	0e c0       	rjmp	.+28     	; 0x15b6 <gitem_insert+0x94>
    }
    else
    {
        // Пуста, gitem будет головой
        *head = (item_t *)gitem;
    159a:	8d 81       	ldd	r24, Y+5	; 0x05
    159c:	9e 81       	ldd	r25, Y+6	; 0x06
    159e:	e9 81       	ldd	r30, Y+1	; 0x01
    15a0:	fa 81       	ldd	r31, Y+2	; 0x02
    15a2:	91 83       	std	Z+1, r25	; 0x01
    15a4:	80 83       	st	Z, r24
        xlist->index |= mask;
    15a6:	ef 81       	ldd	r30, Y+7	; 0x07
    15a8:	f8 85       	ldd	r31, Y+8	; 0x08
    15aa:	90 89       	ldd	r25, Z+16	; 0x10
    15ac:	8b 81       	ldd	r24, Y+3	; 0x03
    15ae:	89 2b       	or	r24, r25
    15b0:	ef 81       	ldd	r30, Y+7	; 0x07
    15b2:	f8 85       	ldd	r31, Y+8	; 0x08
    15b4:	80 8b       	std	Z+16, r24	; 0x10
    }
    gitem->group->link = (void *)xlist;
    15b6:	ed 81       	ldd	r30, Y+5	; 0x05
    15b8:	fe 81       	ldd	r31, Y+6	; 0x06
    15ba:	04 80       	ldd	r0, Z+4	; 0x04
    15bc:	f5 81       	ldd	r31, Z+5	; 0x05
    15be:	e0 2d       	mov	r30, r0
    15c0:	8f 81       	ldd	r24, Y+7	; 0x07
    15c2:	98 85       	ldd	r25, Y+8	; 0x08
    15c4:	91 83       	std	Z+1, r25	; 0x01
    15c6:	80 83       	st	Z, r24
}
    15c8:	28 96       	adiw	r28, 0x08	; 8
    15ca:	0f b6       	in	r0, 0x3f	; 63
    15cc:	f8 94       	cli
    15ce:	de bf       	out	0x3e, r29	; 62
    15d0:	0f be       	out	0x3f, r0	; 63
    15d2:	cd bf       	out	0x3d, r28	; 61
    15d4:	cf 91       	pop	r28
    15d6:	df 91       	pop	r29
    15d8:	08 95       	ret

000015da <gitem_insert_group>:
 при этом gitem->group переходит в Пул

 Ограничения на gitem - он не должен быть сгруппирован в момент встаки в группу.
*/
void gitem_insert_group(gitem_t * gitem, xlist_t *xlist)
{
    15da:	df 93       	push	r29
    15dc:	cf 93       	push	r28
    15de:	cd b7       	in	r28, 0x3d	; 61
    15e0:	de b7       	in	r29, 0x3e	; 62
    15e2:	2a 97       	sbiw	r28, 0x0a	; 10
    15e4:	0f b6       	in	r0, 0x3f	; 63
    15e6:	f8 94       	cli
    15e8:	de bf       	out	0x3e, r29	; 62
    15ea:	0f be       	out	0x3f, r0	; 63
    15ec:	cd bf       	out	0x3d, r28	; 61
    15ee:	98 87       	std	Y+8, r25	; 0x08
    15f0:	8f 83       	std	Y+7, r24	; 0x07
    15f2:	7a 87       	std	Y+10, r23	; 0x0a
    15f4:	69 87       	std	Y+9, r22	; 0x09
    prio_t prio = gitem->group->prio;
    15f6:	ef 81       	ldd	r30, Y+7	; 0x07
    15f8:	f8 85       	ldd	r31, Y+8	; 0x08
    15fa:	04 80       	ldd	r0, Z+4	; 0x04
    15fc:	f5 81       	ldd	r31, Z+5	; 0x05
    15fe:	e0 2d       	mov	r30, r0
    1600:	82 81       	ldd	r24, Z+2	; 0x02
    1602:	8e 83       	std	Y+6, r24	; 0x06
    index_t mask = ((index_t)1)<<prio;
    1604:	8e 81       	ldd	r24, Y+6	; 0x06
    1606:	28 2f       	mov	r18, r24
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	02 c0       	rjmp	.+4      	; 0x1614 <gitem_insert_group+0x3a>
    1610:	88 0f       	add	r24, r24
    1612:	99 1f       	adc	r25, r25
    1614:	2a 95       	dec	r18
    1616:	e2 f7       	brpl	.-8      	; 0x1610 <gitem_insert_group+0x36>
    1618:	8d 83       	std	Y+5, r24	; 0x05
    item_t ** head = (item_t **)xlist + prio;
    161a:	29 85       	ldd	r18, Y+9	; 0x09
    161c:	3a 85       	ldd	r19, Y+10	; 0x0a
    161e:	8e 81       	ldd	r24, Y+6	; 0x06
    1620:	88 2f       	mov	r24, r24
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	88 0f       	add	r24, r24
    1626:	99 1f       	adc	r25, r25
    1628:	82 0f       	add	r24, r18
    162a:	93 1f       	adc	r25, r19
    162c:	9c 83       	std	Y+4, r25	; 0x04
    162e:	8b 83       	std	Y+3, r24	; 0x03
    group_t * group = gitem->group;
    1630:	ef 81       	ldd	r30, Y+7	; 0x07
    1632:	f8 85       	ldd	r31, Y+8	; 0x08
    1634:	84 81       	ldd	r24, Z+4	; 0x04
    1636:	95 81       	ldd	r25, Z+5	; 0x05
    1638:	9a 83       	std	Y+2, r25	; 0x02
    163a:	89 83       	std	Y+1, r24	; 0x01
    // Пуста ли часть списка с таким приоритетом
    if( ( xlist->index )& mask)
    163c:	e9 85       	ldd	r30, Y+9	; 0x09
    163e:	fa 85       	ldd	r31, Y+10	; 0x0a
    1640:	90 89       	ldd	r25, Z+16	; 0x10
    1642:	8d 81       	ldd	r24, Y+5	; 0x05
    1644:	89 23       	and	r24, r25
    1646:	88 23       	and	r24, r24
    1648:	31 f1       	breq	.+76     	; 0x1696 <gitem_insert_group+0xbc>
    {
        //Не пуста вставляем туда gitem
        item_insert((item_t *)gitem, *head );
    164a:	8f 81       	ldd	r24, Y+7	; 0x07
    164c:	98 85       	ldd	r25, Y+8	; 0x08
    164e:	eb 81       	ldd	r30, Y+3	; 0x03
    1650:	fc 81       	ldd	r31, Y+4	; 0x04
    1652:	20 81       	ld	r18, Z
    1654:	31 81       	ldd	r19, Z+1	; 0x01
    1656:	b9 01       	movw	r22, r18
    1658:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <item_insert>
        //Передаем старую группу в пул
        group_push(group);
    165c:	89 81       	ldd	r24, Y+1	; 0x01
    165e:	9a 81       	ldd	r25, Y+2	; 0x02
    1660:	0e 94 de 0c 	call	0x19bc	; 0x19bc <group_push>
        //назначаем новую группу - ту, в которой голова
        group = ((gitem_t *)*head)->group;
    1664:	eb 81       	ldd	r30, Y+3	; 0x03
    1666:	fc 81       	ldd	r31, Y+4	; 0x04
    1668:	80 81       	ld	r24, Z
    166a:	91 81       	ldd	r25, Z+1	; 0x01
    166c:	fc 01       	movw	r30, r24
    166e:	84 81       	ldd	r24, Z+4	; 0x04
    1670:	95 81       	ldd	r25, Z+5	; 0x05
    1672:	9a 83       	std	Y+2, r25	; 0x02
    1674:	89 83       	std	Y+1, r24	; 0x01
        gitem->group = group;
    1676:	ef 81       	ldd	r30, Y+7	; 0x07
    1678:	f8 85       	ldd	r31, Y+8	; 0x08
    167a:	89 81       	ldd	r24, Y+1	; 0x01
    167c:	9a 81       	ldd	r25, Y+2	; 0x02
    167e:	95 83       	std	Z+5, r25	; 0x05
    1680:	84 83       	std	Z+4, r24	; 0x04
        //количество элементов в группе увеличилось на 1
        group->el_num++;
    1682:	e9 81       	ldd	r30, Y+1	; 0x01
    1684:	fa 81       	ldd	r31, Y+2	; 0x02
    1686:	83 81       	ldd	r24, Z+3	; 0x03
    1688:	94 81       	ldd	r25, Z+4	; 0x04
    168a:	01 96       	adiw	r24, 0x01	; 1
    168c:	e9 81       	ldd	r30, Y+1	; 0x01
    168e:	fa 81       	ldd	r31, Y+2	; 0x02
    1690:	94 83       	std	Z+4, r25	; 0x04
    1692:	83 83       	std	Z+3, r24	; 0x03
    1694:	14 c0       	rjmp	.+40     	; 0x16be <gitem_insert_group+0xe4>
    }
    else
    {
        // Пуста, gitem будет головой
        *head = (item_t *)gitem;
    1696:	8f 81       	ldd	r24, Y+7	; 0x07
    1698:	98 85       	ldd	r25, Y+8	; 0x08
    169a:	eb 81       	ldd	r30, Y+3	; 0x03
    169c:	fc 81       	ldd	r31, Y+4	; 0x04
    169e:	91 83       	std	Z+1, r25	; 0x01
    16a0:	80 83       	st	Z, r24
        xlist->index |= mask;
    16a2:	e9 85       	ldd	r30, Y+9	; 0x09
    16a4:	fa 85       	ldd	r31, Y+10	; 0x0a
    16a6:	90 89       	ldd	r25, Z+16	; 0x10
    16a8:	8d 81       	ldd	r24, Y+5	; 0x05
    16aa:	89 2b       	or	r24, r25
    16ac:	e9 85       	ldd	r30, Y+9	; 0x09
    16ae:	fa 85       	ldd	r31, Y+10	; 0x0a
    16b0:	80 8b       	std	Z+16, r24	; 0x10
        group->link = (void *)xlist;
    16b2:	e9 81       	ldd	r30, Y+1	; 0x01
    16b4:	fa 81       	ldd	r31, Y+2	; 0x02
    16b6:	89 85       	ldd	r24, Y+9	; 0x09
    16b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ba:	91 83       	std	Z+1, r25	; 0x01
    16bc:	80 83       	st	Z, r24
    }
}
    16be:	2a 96       	adiw	r28, 0x0a	; 10
    16c0:	0f b6       	in	r0, 0x3f	; 63
    16c2:	f8 94       	cli
    16c4:	de bf       	out	0x3e, r29	; 62
    16c6:	0f be       	out	0x3f, r0	; 63
    16c8:	cd bf       	out	0x3d, r28	; 61
    16ca:	cf 91       	pop	r28
    16cc:	df 91       	pop	r29
    16ce:	08 95       	ret

000016d0 <gitem_fast_cut>:
// Быстро вырезать из списка (не обнуляется указатель gitem->group->link)
void gitem_fast_cut(gitem_t * gitem)
{
    16d0:	df 93       	push	r29
    16d2:	cf 93       	push	r28
    16d4:	00 d0       	rcall	.+0      	; 0x16d6 <gitem_fast_cut+0x6>
    16d6:	00 d0       	rcall	.+0      	; 0x16d8 <gitem_fast_cut+0x8>
    16d8:	0f 92       	push	r0
    16da:	cd b7       	in	r28, 0x3d	; 61
    16dc:	de b7       	in	r29, 0x3e	; 62
    16de:	9d 83       	std	Y+5, r25	; 0x05
    16e0:	8c 83       	std	Y+4, r24	; 0x04
    prio_t prio = gitem->group->prio;
    16e2:	ec 81       	ldd	r30, Y+4	; 0x04
    16e4:	fd 81       	ldd	r31, Y+5	; 0x05
    16e6:	04 80       	ldd	r0, Z+4	; 0x04
    16e8:	f5 81       	ldd	r31, Z+5	; 0x05
    16ea:	e0 2d       	mov	r30, r0
    16ec:	82 81       	ldd	r24, Z+2	; 0x02
    16ee:	8b 83       	std	Y+3, r24	; 0x03
    xlist_t * xlist = (xlist_t *)gitem->group->link;
    16f0:	ec 81       	ldd	r30, Y+4	; 0x04
    16f2:	fd 81       	ldd	r31, Y+5	; 0x05
    16f4:	04 80       	ldd	r0, Z+4	; 0x04
    16f6:	f5 81       	ldd	r31, Z+5	; 0x05
    16f8:	e0 2d       	mov	r30, r0
    16fa:	80 81       	ld	r24, Z
    16fc:	91 81       	ldd	r25, Z+1	; 0x01
    16fe:	9a 83       	std	Y+2, r25	; 0x02
    1700:	89 83       	std	Y+1, r24	; 0x01
    // Является ли эта часть списка группированной?
    if( gitem->group->el_num > (count_t)1 )
    1702:	ec 81       	ldd	r30, Y+4	; 0x04
    1704:	fd 81       	ldd	r31, Y+5	; 0x05
    1706:	04 80       	ldd	r0, Z+4	; 0x04
    1708:	f5 81       	ldd	r31, Z+5	; 0x05
    170a:	e0 2d       	mov	r30, r0
    170c:	83 81       	ldd	r24, Z+3	; 0x03
    170e:	94 81       	ldd	r25, Z+4	; 0x04
    1710:	82 30       	cpi	r24, 0x02	; 2
    1712:	91 05       	cpc	r25, r1
    1714:	b8 f0       	brcs	.+46     	; 0x1744 <gitem_fast_cut+0x74>
    {
        //Группированная часть списка, будем вырезать из группы с выделением новой группы из Пула
        // В текущей группе стало на 1 элемент меньше
        gitem->group->el_num--;
    1716:	ec 81       	ldd	r30, Y+4	; 0x04
    1718:	fd 81       	ldd	r31, Y+5	; 0x05
    171a:	04 80       	ldd	r0, Z+4	; 0x04
    171c:	f5 81       	ldd	r31, Z+5	; 0x05
    171e:	e0 2d       	mov	r30, r0
    1720:	83 81       	ldd	r24, Z+3	; 0x03
    1722:	94 81       	ldd	r25, Z+4	; 0x04
    1724:	01 97       	sbiw	r24, 0x01	; 1
    1726:	94 83       	std	Z+4, r25	; 0x04
    1728:	83 83       	std	Z+3, r24	; 0x03
        //выделяем новую группу
        gitem->group = group_pop();
    172a:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <group_pop>
    172e:	ec 81       	ldd	r30, Y+4	; 0x04
    1730:	fd 81       	ldd	r31, Y+5	; 0x05
    1732:	95 83       	std	Z+5, r25	; 0x05
    1734:	84 83       	std	Z+4, r24	; 0x04
        // Правильный приоритет, количество элементов в группе, выделенной из пула должно быть равно 1
        gitem->group->prio = (prio_t)prio;
    1736:	ec 81       	ldd	r30, Y+4	; 0x04
    1738:	fd 81       	ldd	r31, Y+5	; 0x05
    173a:	04 80       	ldd	r0, Z+4	; 0x04
    173c:	f5 81       	ldd	r31, Z+5	; 0x05
    173e:	e0 2d       	mov	r30, r0
    1740:	8b 81       	ldd	r24, Y+3	; 0x03
    1742:	82 83       	std	Z+2, r24	; 0x02
    }
    //Является ли элемент единственным в своей части списка?
    if( ((item_t *)gitem)->next == (item_t *)gitem )
    1744:	ec 81       	ldd	r30, Y+4	; 0x04
    1746:	fd 81       	ldd	r31, Y+5	; 0x05
    1748:	20 81       	ld	r18, Z
    174a:	31 81       	ldd	r19, Z+1	; 0x01
    174c:	8c 81       	ldd	r24, Y+4	; 0x04
    174e:	9d 81       	ldd	r25, Y+5	; 0x05
    1750:	28 17       	cp	r18, r24
    1752:	39 07       	cpc	r19, r25
    1754:	09 f5       	brne	.+66     	; 0x1798 <gitem_fast_cut+0xc8>
    {
        // Да, является!
        xlist->item[prio] = (item_t *)0;
    1756:	8b 81       	ldd	r24, Y+3	; 0x03
    1758:	88 2f       	mov	r24, r24
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	29 81       	ldd	r18, Y+1	; 0x01
    175e:	3a 81       	ldd	r19, Y+2	; 0x02
    1760:	88 0f       	add	r24, r24
    1762:	99 1f       	adc	r25, r25
    1764:	f9 01       	movw	r30, r18
    1766:	e8 0f       	add	r30, r24
    1768:	f9 1f       	adc	r31, r25
    176a:	11 82       	std	Z+1, r1	; 0x01
    176c:	10 82       	st	Z, r1
        xlist->index &= ~(((index_t)1)<<prio);
    176e:	e9 81       	ldd	r30, Y+1	; 0x01
    1770:	fa 81       	ldd	r31, Y+2	; 0x02
    1772:	80 89       	ldd	r24, Z+16	; 0x10
    1774:	48 2f       	mov	r20, r24
    1776:	8b 81       	ldd	r24, Y+3	; 0x03
    1778:	28 2f       	mov	r18, r24
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	02 2e       	mov	r0, r18
    1782:	02 c0       	rjmp	.+4      	; 0x1788 <gitem_fast_cut+0xb8>
    1784:	88 0f       	add	r24, r24
    1786:	99 1f       	adc	r25, r25
    1788:	0a 94       	dec	r0
    178a:	e2 f7       	brpl	.-8      	; 0x1784 <gitem_fast_cut+0xb4>
    178c:	80 95       	com	r24
    178e:	84 23       	and	r24, r20
    1790:	e9 81       	ldd	r30, Y+1	; 0x01
    1792:	fa 81       	ldd	r31, Y+2	; 0x02
    1794:	80 8b       	std	Z+16, r24	; 0x10
    1796:	1a c0       	rjmp	.+52     	; 0x17cc <gitem_fast_cut+0xfc>
    }
    else
    {
        // Нет, не является!
        // Является ли элемент головой своей части списка?
        if( xlist->item[(prio_t)prio] == (item_t *)gitem )
    1798:	8b 81       	ldd	r24, Y+3	; 0x03
    179a:	88 2f       	mov	r24, r24
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	29 81       	ldd	r18, Y+1	; 0x01
    17a0:	3a 81       	ldd	r19, Y+2	; 0x02
    17a2:	88 0f       	add	r24, r24
    17a4:	99 1f       	adc	r25, r25
    17a6:	f9 01       	movw	r30, r18
    17a8:	e8 0f       	add	r30, r24
    17aa:	f9 1f       	adc	r31, r25
    17ac:	20 81       	ld	r18, Z
    17ae:	31 81       	ldd	r19, Z+1	; 0x01
    17b0:	8c 81       	ldd	r24, Y+4	; 0x04
    17b2:	9d 81       	ldd	r25, Y+5	; 0x05
    17b4:	28 17       	cp	r18, r24
    17b6:	39 07       	cpc	r19, r25
    17b8:	29 f4       	brne	.+10     	; 0x17c4 <gitem_fast_cut+0xf4>
        {
            // Является, список надо переключить
            xlist_switch( xlist, prio );
    17ba:	89 81       	ldd	r24, Y+1	; 0x01
    17bc:	9a 81       	ldd	r25, Y+2	; 0x02
    17be:	6b 81       	ldd	r22, Y+3	; 0x03
    17c0:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <xlist_switch>
        }
        // Собственно - вырезаем элемент
        item_cut( (item_t *)gitem );
    17c4:	8c 81       	ldd	r24, Y+4	; 0x04
    17c6:	9d 81       	ldd	r25, Y+5	; 0x05
    17c8:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <item_cut>
    }
}
    17cc:	0f 90       	pop	r0
    17ce:	0f 90       	pop	r0
    17d0:	0f 90       	pop	r0
    17d2:	0f 90       	pop	r0
    17d4:	0f 90       	pop	r0
    17d6:	cf 91       	pop	r28
    17d8:	df 91       	pop	r29
    17da:	08 95       	ret

000017dc <gitem_cut>:
// Вырезать из списка
void gitem_cut(gitem_t * gitem)
{
    17dc:	df 93       	push	r29
    17de:	cf 93       	push	r28
    17e0:	00 d0       	rcall	.+0      	; 0x17e2 <gitem_cut+0x6>
    17e2:	cd b7       	in	r28, 0x3d	; 61
    17e4:	de b7       	in	r29, 0x3e	; 62
    17e6:	9a 83       	std	Y+2, r25	; 0x02
    17e8:	89 83       	std	Y+1, r24	; 0x01
    gitem_fast_cut( gitem );
    17ea:	89 81       	ldd	r24, Y+1	; 0x01
    17ec:	9a 81       	ldd	r25, Y+2	; 0x02
    17ee:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <gitem_fast_cut>
    gitem->group->link = (void *)0;
    17f2:	e9 81       	ldd	r30, Y+1	; 0x01
    17f4:	fa 81       	ldd	r31, Y+2	; 0x02
    17f6:	04 80       	ldd	r0, Z+4	; 0x04
    17f8:	f5 81       	ldd	r31, Z+5	; 0x05
    17fa:	e0 2d       	mov	r30, r0
    17fc:	11 82       	std	Z+1, r1	; 0x01
    17fe:	10 82       	st	Z, r1
}
    1800:	0f 90       	pop	r0
    1802:	0f 90       	pop	r0
    1804:	cf 91       	pop	r28
    1806:	df 91       	pop	r29
    1808:	08 95       	ret

0000180a <gitem_xlist_merge>:
 1) Оба списка содержат только объекты типа gitem_t
 2) В списке source на каждом уровне приоритета все объекты типа gitem_t приенадлежат к одной группе.
 3) Элементы списка source, находящиеся на разных уровнях приоритета, пренадлежат разным группам.
*/
void gitem_xlist_merge(xlist_t * source, xlist_t * destignation)
{
    180a:	df 93       	push	r29
    180c:	cf 93       	push	r28
    180e:	cd b7       	in	r28, 0x3d	; 61
    1810:	de b7       	in	r29, 0x3e	; 62
    1812:	2c 97       	sbiw	r28, 0x0c	; 12
    1814:	0f b6       	in	r0, 0x3f	; 63
    1816:	f8 94       	cli
    1818:	de bf       	out	0x3e, r29	; 62
    181a:	0f be       	out	0x3f, r0	; 63
    181c:	cd bf       	out	0x3d, r28	; 61
    181e:	9a 87       	std	Y+10, r25	; 0x0a
    1820:	89 87       	std	Y+9, r24	; 0x09
    1822:	7c 87       	std	Y+12, r23	; 0x0c
    1824:	6b 87       	std	Y+11, r22	; 0x0b
    index_t mask = (index_t)1;
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	88 87       	std	Y+8, r24	; 0x08
    prio_t current_prio = (prio_t)0;
    182a:	1f 82       	std	Y+7, r1	; 0x07
    182c:	9a c0       	rjmp	.+308    	; 0x1962 <gitem_xlist_merge+0x158>
    while( mask )
    {
        // Есть че перенести?
        if( mask & source->index )
    182e:	e9 85       	ldd	r30, Y+9	; 0x09
    1830:	fa 85       	ldd	r31, Y+10	; 0x0a
    1832:	90 89       	ldd	r25, Z+16	; 0x10
    1834:	88 85       	ldd	r24, Y+8	; 0x08
    1836:	89 23       	and	r24, r25
    1838:	88 23       	and	r24, r24
    183a:	09 f4       	brne	.+2      	; 0x183e <gitem_xlist_merge+0x34>
    183c:	8c c0       	rjmp	.+280    	; 0x1956 <gitem_xlist_merge+0x14c>
        {
            // Есть!
            // Есть куда переносить?
            if( mask & destignation->index )
    183e:	eb 85       	ldd	r30, Y+11	; 0x0b
    1840:	fc 85       	ldd	r31, Y+12	; 0x0c
    1842:	90 89       	ldd	r25, Z+16	; 0x10
    1844:	88 85       	ldd	r24, Y+8	; 0x08
    1846:	89 23       	and	r24, r25
    1848:	88 23       	and	r24, r24
    184a:	09 f4       	brne	.+2      	; 0x184e <gitem_xlist_merge+0x44>
    184c:	43 c0       	rjmp	.+134    	; 0x18d4 <gitem_xlist_merge+0xca>
            {
                //Есть!
                // Сшиваем 2 2-связных списка!!!
                item_t * src = source->item[current_prio];
    184e:	8f 81       	ldd	r24, Y+7	; 0x07
    1850:	88 2f       	mov	r24, r24
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	29 85       	ldd	r18, Y+9	; 0x09
    1856:	3a 85       	ldd	r19, Y+10	; 0x0a
    1858:	88 0f       	add	r24, r24
    185a:	99 1f       	adc	r25, r25
    185c:	f9 01       	movw	r30, r18
    185e:	e8 0f       	add	r30, r24
    1860:	f9 1f       	adc	r31, r25
    1862:	80 81       	ld	r24, Z
    1864:	91 81       	ldd	r25, Z+1	; 0x01
    1866:	9e 83       	std	Y+6, r25	; 0x06
    1868:	8d 83       	std	Y+5, r24	; 0x05
                item_t * dst = destignation->item[current_prio];
    186a:	8f 81       	ldd	r24, Y+7	; 0x07
    186c:	88 2f       	mov	r24, r24
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	2b 85       	ldd	r18, Y+11	; 0x0b
    1872:	3c 85       	ldd	r19, Y+12	; 0x0c
    1874:	88 0f       	add	r24, r24
    1876:	99 1f       	adc	r25, r25
    1878:	f9 01       	movw	r30, r18
    187a:	e8 0f       	add	r30, r24
    187c:	f9 1f       	adc	r31, r25
    187e:	80 81       	ld	r24, Z
    1880:	91 81       	ldd	r25, Z+1	; 0x01
    1882:	9c 83       	std	Y+4, r25	; 0x04
    1884:	8b 83       	std	Y+3, r24	; 0x03
                src->prev->next = dst;
    1886:	ed 81       	ldd	r30, Y+5	; 0x05
    1888:	fe 81       	ldd	r31, Y+6	; 0x06
    188a:	02 80       	ldd	r0, Z+2	; 0x02
    188c:	f3 81       	ldd	r31, Z+3	; 0x03
    188e:	e0 2d       	mov	r30, r0
    1890:	8b 81       	ldd	r24, Y+3	; 0x03
    1892:	9c 81       	ldd	r25, Y+4	; 0x04
    1894:	91 83       	std	Z+1, r25	; 0x01
    1896:	80 83       	st	Z, r24
                dst->prev->next = src;
    1898:	eb 81       	ldd	r30, Y+3	; 0x03
    189a:	fc 81       	ldd	r31, Y+4	; 0x04
    189c:	02 80       	ldd	r0, Z+2	; 0x02
    189e:	f3 81       	ldd	r31, Z+3	; 0x03
    18a0:	e0 2d       	mov	r30, r0
    18a2:	8d 81       	ldd	r24, Y+5	; 0x05
    18a4:	9e 81       	ldd	r25, Y+6	; 0x06
    18a6:	91 83       	std	Z+1, r25	; 0x01
    18a8:	80 83       	st	Z, r24
                item_t * buf = dst->prev;
    18aa:	eb 81       	ldd	r30, Y+3	; 0x03
    18ac:	fc 81       	ldd	r31, Y+4	; 0x04
    18ae:	82 81       	ldd	r24, Z+2	; 0x02
    18b0:	93 81       	ldd	r25, Z+3	; 0x03
    18b2:	9a 83       	std	Y+2, r25	; 0x02
    18b4:	89 83       	std	Y+1, r24	; 0x01
                dst->prev = src->prev;
    18b6:	ed 81       	ldd	r30, Y+5	; 0x05
    18b8:	fe 81       	ldd	r31, Y+6	; 0x06
    18ba:	82 81       	ldd	r24, Z+2	; 0x02
    18bc:	93 81       	ldd	r25, Z+3	; 0x03
    18be:	eb 81       	ldd	r30, Y+3	; 0x03
    18c0:	fc 81       	ldd	r31, Y+4	; 0x04
    18c2:	93 83       	std	Z+3, r25	; 0x03
    18c4:	82 83       	std	Z+2, r24	; 0x02
                src->prev = buf;
    18c6:	ed 81       	ldd	r30, Y+5	; 0x05
    18c8:	fe 81       	ldd	r31, Y+6	; 0x06
    18ca:	89 81       	ldd	r24, Y+1	; 0x01
    18cc:	9a 81       	ldd	r25, Y+2	; 0x02
    18ce:	93 83       	std	Z+3, r25	; 0x03
    18d0:	82 83       	std	Z+2, r24	; 0x02
    18d2:	21 c0       	rjmp	.+66     	; 0x1916 <gitem_xlist_merge+0x10c>
            }
            else
            {
                //Нет, тупо переносим всю группу.
                destignation->item[current_prio] = source->item[current_prio];
    18d4:	8f 81       	ldd	r24, Y+7	; 0x07
    18d6:	68 2f       	mov	r22, r24
    18d8:	70 e0       	ldi	r23, 0x00	; 0
    18da:	8f 81       	ldd	r24, Y+7	; 0x07
    18dc:	88 2f       	mov	r24, r24
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	29 85       	ldd	r18, Y+9	; 0x09
    18e2:	3a 85       	ldd	r19, Y+10	; 0x0a
    18e4:	88 0f       	add	r24, r24
    18e6:	99 1f       	adc	r25, r25
    18e8:	f9 01       	movw	r30, r18
    18ea:	e8 0f       	add	r30, r24
    18ec:	f9 1f       	adc	r31, r25
    18ee:	40 81       	ld	r20, Z
    18f0:	51 81       	ldd	r21, Z+1	; 0x01
    18f2:	2b 85       	ldd	r18, Y+11	; 0x0b
    18f4:	3c 85       	ldd	r19, Y+12	; 0x0c
    18f6:	cb 01       	movw	r24, r22
    18f8:	88 0f       	add	r24, r24
    18fa:	99 1f       	adc	r25, r25
    18fc:	f9 01       	movw	r30, r18
    18fe:	e8 0f       	add	r30, r24
    1900:	f9 1f       	adc	r31, r25
    1902:	51 83       	std	Z+1, r21	; 0x01
    1904:	40 83       	st	Z, r20
                destignation->index |= mask;
    1906:	eb 85       	ldd	r30, Y+11	; 0x0b
    1908:	fc 85       	ldd	r31, Y+12	; 0x0c
    190a:	90 89       	ldd	r25, Z+16	; 0x10
    190c:	88 85       	ldd	r24, Y+8	; 0x08
    190e:	89 2b       	or	r24, r25
    1910:	eb 85       	ldd	r30, Y+11	; 0x0b
    1912:	fc 85       	ldd	r31, Y+12	; 0x0c
    1914:	80 8b       	std	Z+16, r24	; 0x10
            }
            // Вот почему эта функция отнесена к методам gitem_t
            ((gitem_t *)source->item[current_prio])->group->link = (void *)destignation;
    1916:	8f 81       	ldd	r24, Y+7	; 0x07
    1918:	88 2f       	mov	r24, r24
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	29 85       	ldd	r18, Y+9	; 0x09
    191e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1920:	88 0f       	add	r24, r24
    1922:	99 1f       	adc	r25, r25
    1924:	f9 01       	movw	r30, r18
    1926:	e8 0f       	add	r30, r24
    1928:	f9 1f       	adc	r31, r25
    192a:	80 81       	ld	r24, Z
    192c:	91 81       	ldd	r25, Z+1	; 0x01
    192e:	fc 01       	movw	r30, r24
    1930:	04 80       	ldd	r0, Z+4	; 0x04
    1932:	f5 81       	ldd	r31, Z+5	; 0x05
    1934:	e0 2d       	mov	r30, r0
    1936:	8b 85       	ldd	r24, Y+11	; 0x0b
    1938:	9c 85       	ldd	r25, Y+12	; 0x0c
    193a:	91 83       	std	Z+1, r25	; 0x01
    193c:	80 83       	st	Z, r24
            // Перенос закончен, обнуляем указатель
            source->item[(prio_t)current_prio] = (item_t *)0;
    193e:	8f 81       	ldd	r24, Y+7	; 0x07
    1940:	88 2f       	mov	r24, r24
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	29 85       	ldd	r18, Y+9	; 0x09
    1946:	3a 85       	ldd	r19, Y+10	; 0x0a
    1948:	88 0f       	add	r24, r24
    194a:	99 1f       	adc	r25, r25
    194c:	f9 01       	movw	r30, r18
    194e:	e8 0f       	add	r30, r24
    1950:	f9 1f       	adc	r31, r25
    1952:	11 82       	std	Z+1, r1	; 0x01
    1954:	10 82       	st	Z, r1
        }
        mask<<=1;
    1956:	88 85       	ldd	r24, Y+8	; 0x08
    1958:	88 0f       	add	r24, r24
    195a:	88 87       	std	Y+8, r24	; 0x08
        current_prio++;
    195c:	8f 81       	ldd	r24, Y+7	; 0x07
    195e:	8f 5f       	subi	r24, 0xFF	; 255
    1960:	8f 83       	std	Y+7, r24	; 0x07
*/
void gitem_xlist_merge(xlist_t * source, xlist_t * destignation)
{
    index_t mask = (index_t)1;
    prio_t current_prio = (prio_t)0;
    while( mask )
    1962:	88 85       	ldd	r24, Y+8	; 0x08
    1964:	88 23       	and	r24, r24
    1966:	09 f0       	breq	.+2      	; 0x196a <gitem_xlist_merge+0x160>
    1968:	62 cf       	rjmp	.-316    	; 0x182e <gitem_xlist_merge+0x24>
        }
        mask<<=1;
        current_prio++;
    }
    // Список полностью перенесен, обнуляем индекс
    source->index = (index_t)0;
    196a:	e9 85       	ldd	r30, Y+9	; 0x09
    196c:	fa 85       	ldd	r31, Y+10	; 0x0a
    196e:	10 8a       	std	Z+16, r1	; 0x10
}
    1970:	2c 96       	adiw	r28, 0x0c	; 12
    1972:	0f b6       	in	r0, 0x3f	; 63
    1974:	f8 94       	cli
    1976:	de bf       	out	0x3e, r29	; 62
    1978:	0f be       	out	0x3f, r0	; 63
    197a:	cd bf       	out	0x3d, r28	; 61
    197c:	cf 91       	pop	r28
    197e:	df 91       	pop	r29
    1980:	08 95       	ret

00001982 <group_init>:
*****************************************************************************************/
#include "../include/bugurt.h"
//Методы group_t
// инициация
void group_init(group_t * group, prio_t prio)
{
    1982:	df 93       	push	r29
    1984:	cf 93       	push	r28
    1986:	00 d0       	rcall	.+0      	; 0x1988 <group_init+0x6>
    1988:	0f 92       	push	r0
    198a:	cd b7       	in	r28, 0x3d	; 61
    198c:	de b7       	in	r29, 0x3e	; 62
    198e:	9a 83       	std	Y+2, r25	; 0x02
    1990:	89 83       	std	Y+1, r24	; 0x01
    1992:	6b 83       	std	Y+3, r22	; 0x03
    group->link = (void *)0;
    1994:	e9 81       	ldd	r30, Y+1	; 0x01
    1996:	fa 81       	ldd	r31, Y+2	; 0x02
    1998:	11 82       	std	Z+1, r1	; 0x01
    199a:	10 82       	st	Z, r1
    group->prio = prio;
    199c:	e9 81       	ldd	r30, Y+1	; 0x01
    199e:	fa 81       	ldd	r31, Y+2	; 0x02
    19a0:	8b 81       	ldd	r24, Y+3	; 0x03
    19a2:	82 83       	std	Z+2, r24	; 0x02
    // группа - часть gitem_t, количество элементов - 1
    group->el_num = (count_t)1;
    19a4:	e9 81       	ldd	r30, Y+1	; 0x01
    19a6:	fa 81       	ldd	r31, Y+2	; 0x02
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	94 83       	std	Z+4, r25	; 0x04
    19ae:	83 83       	std	Z+3, r24	; 0x03
}
    19b0:	0f 90       	pop	r0
    19b2:	0f 90       	pop	r0
    19b4:	0f 90       	pop	r0
    19b6:	cf 91       	pop	r28
    19b8:	df 91       	pop	r29
    19ba:	08 95       	ret

000019bc <group_push>:
// положить в ПУЛ
void group_push(group_t * group)
{
    19bc:	df 93       	push	r29
    19be:	cf 93       	push	r28
    19c0:	00 d0       	rcall	.+0      	; 0x19c2 <group_push+0x6>
    19c2:	cd b7       	in	r28, 0x3d	; 61
    19c4:	de b7       	in	r29, 0x3e	; 62
    19c6:	9a 83       	std	Y+2, r25	; 0x02
    19c8:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    // блокируем пул
    spin_lock( &kernel.pool_lock );
#endif
    group->link = (void *)kernel.pool;
    19ca:	80 91 80 01 	lds	r24, 0x0180
    19ce:	90 91 81 01 	lds	r25, 0x0181
    19d2:	e9 81       	ldd	r30, Y+1	; 0x01
    19d4:	fa 81       	ldd	r31, Y+2	; 0x02
    19d6:	91 83       	std	Z+1, r25	; 0x01
    19d8:	80 83       	st	Z, r24
    kernel.pool = group;
    19da:	89 81       	ldd	r24, Y+1	; 0x01
    19dc:	9a 81       	ldd	r25, Y+2	; 0x02
    19de:	90 93 81 01 	sts	0x0181, r25
    19e2:	80 93 80 01 	sts	0x0180, r24
#ifdef CONFIG_MP
    // разблокируем пул
    spin_unlock( &kernel.pool_lock );
#endif
}
    19e6:	0f 90       	pop	r0
    19e8:	0f 90       	pop	r0
    19ea:	cf 91       	pop	r28
    19ec:	df 91       	pop	r29
    19ee:	08 95       	ret

000019f0 <group_pop>:
// взять из пула, если есть, а есть всегда, избыточность же!
group_t * group_pop(void)
{
    19f0:	df 93       	push	r29
    19f2:	cf 93       	push	r28
    19f4:	00 d0       	rcall	.+0      	; 0x19f6 <group_pop+0x6>
    19f6:	cd b7       	in	r28, 0x3d	; 61
    19f8:	de b7       	in	r29, 0x3e	; 62
#ifdef CONFIG_MP
    // блокируем пул
    spin_lock( &kernel.pool_lock );
#endif
    group_t * group = kernel.pool;
    19fa:	80 91 80 01 	lds	r24, 0x0180
    19fe:	90 91 81 01 	lds	r25, 0x0181
    1a02:	9a 83       	std	Y+2, r25	; 0x02
    1a04:	89 83       	std	Y+1, r24	; 0x01
    kernel.pool = (group_t *)group->link;
    1a06:	e9 81       	ldd	r30, Y+1	; 0x01
    1a08:	fa 81       	ldd	r31, Y+2	; 0x02
    1a0a:	80 81       	ld	r24, Z
    1a0c:	91 81       	ldd	r25, Z+1	; 0x01
    1a0e:	90 93 81 01 	sts	0x0181, r25
    1a12:	80 93 80 01 	sts	0x0180, r24
#ifdef CONFIG_MP
    // разблокируем пул
    spin_unlock( &kernel.pool_lock );
#endif
    return group;
    1a16:	89 81       	ldd	r24, Y+1	; 0x01
    1a18:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1a1a:	0f 90       	pop	r0
    1a1c:	0f 90       	pop	r0
    1a1e:	cf 91       	pop	r28
    1a20:	df 91       	pop	r29
    1a22:	08 95       	ret

00001a24 <index_search>:
*                           http://www.0chan.ru/r/res/9996.html                          *
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
prio_t index_search(index_t index)
{
    1a24:	df 93       	push	r29
    1a26:	cf 93       	push	r28
    1a28:	00 d0       	rcall	.+0      	; 0x1a2a <index_search+0x6>
    1a2a:	00 d0       	rcall	.+0      	; 0x1a2c <index_search+0x8>
    1a2c:	00 d0       	rcall	.+0      	; 0x1a2e <index_search+0xa>
    1a2e:	cd b7       	in	r28, 0x3d	; 61
    1a30:	de b7       	in	r29, 0x3e	; 62
    1a32:	8e 83       	std	Y+6, r24	; 0x06
    prio_t prio = (prio_t)0;
    1a34:	1d 82       	std	Y+5, r1	; 0x05
        но, т.к. BITS_IN_INDEX_T фиксировано для данной конфигурации,
        то получается время выполнения - O(1), ВСЕГДА.

        И да, предсказуемость + переносимость > быстродействие.
        */
    index_t upper = ~(index_t)0, lower = ~(index_t)0, middle;
    1a36:	8f ef       	ldi	r24, 0xFF	; 255
    1a38:	8c 83       	std	Y+4, r24	; 0x04
    1a3a:	8f ef       	ldi	r24, 0xFF	; 255
    1a3c:	8b 83       	std	Y+3, r24	; 0x03
    prio_t step = (prio_t)BITS_IN_INDEX_T;
    1a3e:	88 e0       	ldi	r24, 0x08	; 8
    1a40:	89 83       	std	Y+1, r24	; 0x01
    1a42:	22 c0       	rjmp	.+68     	; 0x1a88 <index_search+0x64>
    while( step )
    {
        step>>=1; // делим шаг пополам
    1a44:	89 81       	ldd	r24, Y+1	; 0x01
    1a46:	86 95       	lsr	r24
    1a48:	89 83       	std	Y+1, r24	; 0x01
        middle = lower>>step;
    1a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4c:	28 2f       	mov	r18, r24
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	89 81       	ldd	r24, Y+1	; 0x01
    1a52:	88 2f       	mov	r24, r24
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	a9 01       	movw	r20, r18
    1a58:	02 c0       	rjmp	.+4      	; 0x1a5e <index_search+0x3a>
    1a5a:	55 95       	asr	r21
    1a5c:	47 95       	ror	r20
    1a5e:	8a 95       	dec	r24
    1a60:	e2 f7       	brpl	.-8      	; 0x1a5a <index_search+0x36>
    1a62:	ca 01       	movw	r24, r20
    1a64:	8a 83       	std	Y+2, r24	; 0x02
        if( index & upper & middle )
    1a66:	9e 81       	ldd	r25, Y+6	; 0x06
    1a68:	8c 81       	ldd	r24, Y+4	; 0x04
    1a6a:	98 23       	and	r25, r24
    1a6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6e:	89 23       	and	r24, r25
    1a70:	88 23       	and	r24, r24
    1a72:	19 f0       	breq	.+6      	; 0x1a7a <index_search+0x56>
        {
            lower = middle;
    1a74:	8a 81       	ldd	r24, Y+2	; 0x02
    1a76:	8b 83       	std	Y+3, r24	; 0x03
    1a78:	07 c0       	rjmp	.+14     	; 0x1a88 <index_search+0x64>
        }
        else
        {
            upper = ~middle;
    1a7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7c:	80 95       	com	r24
    1a7e:	8c 83       	std	Y+4, r24	; 0x04
            prio += step;
    1a80:	9d 81       	ldd	r25, Y+5	; 0x05
    1a82:	89 81       	ldd	r24, Y+1	; 0x01
    1a84:	89 0f       	add	r24, r25
    1a86:	8d 83       	std	Y+5, r24	; 0x05

        И да, предсказуемость + переносимость > быстродействие.
        */
    index_t upper = ~(index_t)0, lower = ~(index_t)0, middle;
    prio_t step = (prio_t)BITS_IN_INDEX_T;
    while( step )
    1a88:	89 81       	ldd	r24, Y+1	; 0x01
    1a8a:	88 23       	and	r24, r24
    1a8c:	d9 f6       	brne	.-74     	; 0x1a44 <index_search+0x20>
        if ( mask & index )break;
        prio++;
        mask<<=1;
    }
#endif
    return prio;
    1a8e:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1a90:	26 96       	adiw	r28, 0x06	; 6
    1a92:	0f b6       	in	r0, 0x3f	; 63
    1a94:	f8 94       	cli
    1a96:	de bf       	out	0x3e, r29	; 62
    1a98:	0f be       	out	0x3f, r0	; 63
    1a9a:	cd bf       	out	0x3d, r28	; 61
    1a9c:	cf 91       	pop	r28
    1a9e:	df 91       	pop	r29
    1aa0:	08 95       	ret

00001aa2 <item_init>:
*****************************************************************************************/
#include "../include/bugurt.h"
//Методы элемента 2-связного списка
//инициация элемента
void item_init(item_t *item)
{
    1aa2:	df 93       	push	r29
    1aa4:	cf 93       	push	r28
    1aa6:	00 d0       	rcall	.+0      	; 0x1aa8 <item_init+0x6>
    1aa8:	cd b7       	in	r28, 0x3d	; 61
    1aaa:	de b7       	in	r29, 0x3e	; 62
    1aac:	9a 83       	std	Y+2, r25	; 0x02
    1aae:	89 83       	std	Y+1, r24	; 0x01
    item->prev = item;
    1ab0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ab2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ab4:	89 81       	ldd	r24, Y+1	; 0x01
    1ab6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab8:	93 83       	std	Z+3, r25	; 0x03
    1aba:	82 83       	std	Z+2, r24	; 0x02
    item->next = item;
    1abc:	e9 81       	ldd	r30, Y+1	; 0x01
    1abe:	fa 81       	ldd	r31, Y+2	; 0x02
    1ac0:	89 81       	ldd	r24, Y+1	; 0x01
    1ac2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac4:	91 83       	std	Z+1, r25	; 0x01
    1ac6:	80 83       	st	Z, r24
}
    1ac8:	0f 90       	pop	r0
    1aca:	0f 90       	pop	r0
    1acc:	cf 91       	pop	r28
    1ace:	df 91       	pop	r29
    1ad0:	08 95       	ret

00001ad2 <item_insert>:
//Вставить элемент
void item_insert(item_t *item, item_t *head)
{
    1ad2:	df 93       	push	r29
    1ad4:	cf 93       	push	r28
    1ad6:	00 d0       	rcall	.+0      	; 0x1ad8 <item_insert+0x6>
    1ad8:	00 d0       	rcall	.+0      	; 0x1ada <item_insert+0x8>
    1ada:	00 d0       	rcall	.+0      	; 0x1adc <item_insert+0xa>
    1adc:	cd b7       	in	r28, 0x3d	; 61
    1ade:	de b7       	in	r29, 0x3e	; 62
    1ae0:	9c 83       	std	Y+4, r25	; 0x04
    1ae2:	8b 83       	std	Y+3, r24	; 0x03
    1ae4:	7e 83       	std	Y+6, r23	; 0x06
    1ae6:	6d 83       	std	Y+5, r22	; 0x05
    // "хвост" списка
    item_t * tail = head->prev;
    1ae8:	ed 81       	ldd	r30, Y+5	; 0x05
    1aea:	fe 81       	ldd	r31, Y+6	; 0x06
    1aec:	82 81       	ldd	r24, Z+2	; 0x02
    1aee:	93 81       	ldd	r25, Z+3	; 0x03
    1af0:	9a 83       	std	Y+2, r25	; 0x02
    1af2:	89 83       	std	Y+1, r24	; 0x01

    // Вставляем элемент между "головой" и "хвостом"
    item->prev = tail;
    1af4:	eb 81       	ldd	r30, Y+3	; 0x03
    1af6:	fc 81       	ldd	r31, Y+4	; 0x04
    1af8:	89 81       	ldd	r24, Y+1	; 0x01
    1afa:	9a 81       	ldd	r25, Y+2	; 0x02
    1afc:	93 83       	std	Z+3, r25	; 0x03
    1afe:	82 83       	std	Z+2, r24	; 0x02
    item->next = head;
    1b00:	eb 81       	ldd	r30, Y+3	; 0x03
    1b02:	fc 81       	ldd	r31, Y+4	; 0x04
    1b04:	8d 81       	ldd	r24, Y+5	; 0x05
    1b06:	9e 81       	ldd	r25, Y+6	; 0x06
    1b08:	91 83       	std	Z+1, r25	; 0x01
    1b0a:	80 83       	st	Z, r24

    head->prev = item;
    1b0c:	ed 81       	ldd	r30, Y+5	; 0x05
    1b0e:	fe 81       	ldd	r31, Y+6	; 0x06
    1b10:	8b 81       	ldd	r24, Y+3	; 0x03
    1b12:	9c 81       	ldd	r25, Y+4	; 0x04
    1b14:	93 83       	std	Z+3, r25	; 0x03
    1b16:	82 83       	std	Z+2, r24	; 0x02
    tail->next = item;
    1b18:	e9 81       	ldd	r30, Y+1	; 0x01
    1b1a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b20:	91 83       	std	Z+1, r25	; 0x01
    1b22:	80 83       	st	Z, r24
}
    1b24:	26 96       	adiw	r28, 0x06	; 6
    1b26:	0f b6       	in	r0, 0x3f	; 63
    1b28:	f8 94       	cli
    1b2a:	de bf       	out	0x3e, r29	; 62
    1b2c:	0f be       	out	0x3f, r0	; 63
    1b2e:	cd bf       	out	0x3d, r28	; 61
    1b30:	cf 91       	pop	r28
    1b32:	df 91       	pop	r29
    1b34:	08 95       	ret

00001b36 <item_cut>:
//Вырезать элемент
void item_cut( item_t *item )
{
    1b36:	df 93       	push	r29
    1b38:	cf 93       	push	r28
    1b3a:	00 d0       	rcall	.+0      	; 0x1b3c <item_cut+0x6>
    1b3c:	00 d0       	rcall	.+0      	; 0x1b3e <item_cut+0x8>
    1b3e:	00 d0       	rcall	.+0      	; 0x1b40 <item_cut+0xa>
    1b40:	cd b7       	in	r28, 0x3d	; 61
    1b42:	de b7       	in	r29, 0x3e	; 62
    1b44:	9e 83       	std	Y+6, r25	; 0x06
    1b46:	8d 83       	std	Y+5, r24	; 0x05
    item_t * prev = item->prev; //Предыдущий элемент
    1b48:	ed 81       	ldd	r30, Y+5	; 0x05
    1b4a:	fe 81       	ldd	r31, Y+6	; 0x06
    1b4c:	82 81       	ldd	r24, Z+2	; 0x02
    1b4e:	93 81       	ldd	r25, Z+3	; 0x03
    1b50:	9c 83       	std	Y+4, r25	; 0x04
    1b52:	8b 83       	std	Y+3, r24	; 0x03
    item_t * next = item->next; //Следующий элемент
    1b54:	ed 81       	ldd	r30, Y+5	; 0x05
    1b56:	fe 81       	ldd	r31, Y+6	; 0x06
    1b58:	80 81       	ld	r24, Z
    1b5a:	91 81       	ldd	r25, Z+1	; 0x01
    1b5c:	9a 83       	std	Y+2, r25	; 0x02
    1b5e:	89 83       	std	Y+1, r24	; 0x01

    next->prev = prev;
    1b60:	e9 81       	ldd	r30, Y+1	; 0x01
    1b62:	fa 81       	ldd	r31, Y+2	; 0x02
    1b64:	8b 81       	ldd	r24, Y+3	; 0x03
    1b66:	9c 81       	ldd	r25, Y+4	; 0x04
    1b68:	93 83       	std	Z+3, r25	; 0x03
    1b6a:	82 83       	std	Z+2, r24	; 0x02
    prev->next = next;
    1b6c:	eb 81       	ldd	r30, Y+3	; 0x03
    1b6e:	fc 81       	ldd	r31, Y+4	; 0x04
    1b70:	89 81       	ldd	r24, Y+1	; 0x01
    1b72:	9a 81       	ldd	r25, Y+2	; 0x02
    1b74:	91 83       	std	Z+1, r25	; 0x01
    1b76:	80 83       	st	Z, r24

    item->prev = item;
    1b78:	ed 81       	ldd	r30, Y+5	; 0x05
    1b7a:	fe 81       	ldd	r31, Y+6	; 0x06
    1b7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b80:	93 83       	std	Z+3, r25	; 0x03
    1b82:	82 83       	std	Z+2, r24	; 0x02
    item->next = item;
    1b84:	ed 81       	ldd	r30, Y+5	; 0x05
    1b86:	fe 81       	ldd	r31, Y+6	; 0x06
    1b88:	8d 81       	ldd	r24, Y+5	; 0x05
    1b8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b8c:	91 83       	std	Z+1, r25	; 0x01
    1b8e:	80 83       	st	Z, r24
}
    1b90:	26 96       	adiw	r28, 0x06	; 6
    1b92:	0f b6       	in	r0, 0x3f	; 63
    1b94:	f8 94       	cli
    1b96:	de bf       	out	0x3e, r29	; 62
    1b98:	0f be       	out	0x3f, r0	; 63
    1b9a:	cd bf       	out	0x3d, r28	; 61
    1b9c:	cf 91       	pop	r28
    1b9e:	df 91       	pop	r29
    1ba0:	08 95       	ret

00001ba2 <kernel_init>:
{
    while(1);
}

void kernel_init(void)
{
    1ba2:	8f 92       	push	r8
    1ba4:	af 92       	push	r10
    1ba6:	bf 92       	push	r11
    1ba8:	cf 92       	push	r12
    1baa:	ef 92       	push	r14
    1bac:	ff 92       	push	r15
    1bae:	0f 93       	push	r16
    1bb0:	1f 93       	push	r17
    1bb2:	df 93       	push	r29
    1bb4:	cf 93       	push	r28
    1bb6:	cd b7       	in	r28, 0x3d	; 61
    1bb8:	de b7       	in	r29, 0x3e	; 62
        stat_init( (stat_t *)kernel.stat + i );
        sched_init( (sched_t *)kernel.sched + i, (proc_t *)kernel.idle + i );
    }
    spin_unlock( &kernel.stat_lock );
#else
    proc_init_isr(
    1bba:	82 e5       	ldi	r24, 0x52	; 82
    1bbc:	91 e0       	ldi	r25, 0x01	; 1
    1bbe:	25 e9       	ldi	r18, 0x95	; 149
    1bc0:	36 e1       	ldi	r19, 0x16	; 22
    1bc2:	b9 01       	movw	r22, r18
    1bc4:	40 e0       	ldi	r20, 0x00	; 0
    1bc6:	50 e0       	ldi	r21, 0x00	; 0
    1bc8:	20 e0       	ldi	r18, 0x00	; 0
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	00 e0       	ldi	r16, 0x00	; 0
    1bce:	10 e0       	ldi	r17, 0x00	; 0
    1bd0:	ee 24       	eor	r14, r14
    1bd2:	ff 24       	eor	r15, r15
    1bd4:	0f 2e       	mov	r0, r31
    1bd6:	f7 e0       	ldi	r31, 0x07	; 7
    1bd8:	cf 2e       	mov	r12, r31
    1bda:	f0 2d       	mov	r31, r0
    1bdc:	aa 24       	eor	r10, r10
    1bde:	bb 24       	eor	r11, r11
    1be0:	a3 94       	inc	r10
    1be2:	88 24       	eor	r8, r8
    1be4:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <proc_init_isr>
        0, // это не важно, при первой же смене контекста будет сохранен текущий указатель стека
        ((prio_t)BITS_IN_INDEX_T - (prio_t)1),// низший приоритет
        (timer_t)1,//минимальный квант времени
        (bool_t)0// не RT
    );
    sched_init( (sched_t *)&kernel.sched, (proc_t *)&kernel.idle );
    1be8:	88 e2       	ldi	r24, 0x28	; 40
    1bea:	91 e0       	ldi	r25, 0x01	; 1
    1bec:	22 e5       	ldi	r18, 0x52	; 82
    1bee:	31 e0       	ldi	r19, 0x01	; 1
    1bf0:	b9 01       	movw	r22, r18
    1bf2:	0e 94 2c 12 	call	0x2458	; 0x2458 <sched_init>
#endif // CONFIG_MP
}
    1bf6:	cf 91       	pop	r28
    1bf8:	df 91       	pop	r29
    1bfa:	1f 91       	pop	r17
    1bfc:	0f 91       	pop	r16
    1bfe:	ff 90       	pop	r15
    1c00:	ef 90       	pop	r14
    1c02:	cf 90       	pop	r12
    1c04:	bf 90       	pop	r11
    1c06:	af 90       	pop	r10
    1c08:	8f 90       	pop	r8
    1c0a:	08 95       	ret

00001c0c <mutex_init_isr>:
    mutex_t * mutex
#ifdef CONFIG_USE_HIGHEST_LOCKER
    ,prio_t prio
#endif // CONFIG_USE_HIGHEST_LOCKER
)
{
    1c0c:	df 93       	push	r29
    1c0e:	cf 93       	push	r28
    1c10:	00 d0       	rcall	.+0      	; 0x1c12 <mutex_init_isr+0x6>
    1c12:	0f 92       	push	r0
    1c14:	cd b7       	in	r28, 0x3d	; 61
    1c16:	de b7       	in	r29, 0x3e	; 62
    1c18:	9a 83       	std	Y+2, r25	; 0x02
    1c1a:	89 83       	std	Y+1, r24	; 0x01
    1c1c:	6b 83       	std	Y+3, r22	; 0x03
    xlist_init( (xlist_t *)mutex );
    1c1e:	89 81       	ldd	r24, Y+1	; 0x01
    1c20:	9a 81       	ldd	r25, Y+2	; 0x02
    1c22:	0e 94 e5 14 	call	0x29ca	; 0x29ca <xlist_init>
    mutex->free = (bool_t)1;
    1c26:	e9 81       	ldd	r30, Y+1	; 0x01
    1c28:	fa 81       	ldd	r31, Y+2	; 0x02
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	82 8b       	std	Z+18, r24	; 0x12
#ifdef CONFIG_USE_HIGHEST_LOCKER
    mutex->prio = prio;
    1c2e:	e9 81       	ldd	r30, Y+1	; 0x01
    1c30:	fa 81       	ldd	r31, Y+2	; 0x02
    1c32:	8b 81       	ldd	r24, Y+3	; 0x03
    1c34:	81 8b       	std	Z+17, r24	; 0x11
#endif // CONFIG_USE_HIGHEST_LOCKER
}
    1c36:	0f 90       	pop	r0
    1c38:	0f 90       	pop	r0
    1c3a:	0f 90       	pop	r0
    1c3c:	cf 91       	pop	r28
    1c3e:	df 91       	pop	r29
    1c40:	08 95       	ret

00001c42 <_mutex_lock>:

// К моменту вызова захвачена блокировка mutex-а, запрещены прерывания
bool_t _mutex_lock( mutex_t * mutex )
{
    1c42:	df 93       	push	r29
    1c44:	cf 93       	push	r28
    1c46:	00 d0       	rcall	.+0      	; 0x1c48 <_mutex_lock+0x6>
    1c48:	00 d0       	rcall	.+0      	; 0x1c4a <_mutex_lock+0x8>
    1c4a:	0f 92       	push	r0
    1c4c:	cd b7       	in	r28, 0x3d	; 61
    1c4e:	de b7       	in	r29, 0x3e	; 62
    1c50:	9d 83       	std	Y+5, r25	; 0x05
    1c52:	8c 83       	std	Y+4, r24	; 0x04
    bool_t ret = mutex->free;
    1c54:	ec 81       	ldd	r30, Y+4	; 0x04
    1c56:	fd 81       	ldd	r31, Y+5	; 0x05
    1c58:	82 89       	ldd	r24, Z+18	; 0x12
    1c5a:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = current_proc();
    1c5c:	0e 94 c5 04 	call	0x98a	; 0x98a <current_proc>
    1c60:	9a 83       	std	Y+2, r25	; 0x02
    1c62:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
#ifdef CONFIG_USE_HIGHEST_LOCKER
    _proc_lres_inc( proc, mutex->prio );
    1c64:	ec 81       	ldd	r30, Y+4	; 0x04
    1c66:	fd 81       	ldd	r31, Y+5	; 0x05
    1c68:	21 89       	ldd	r18, Z+17	; 0x11
    1c6a:	89 81       	ldd	r24, Y+1	; 0x01
    1c6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c6e:	62 2f       	mov	r22, r18
    1c70:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <_proc_lres_inc>
#else // !CONFIG_USE_HIGHEST_LOCKER
    _proc_lres_inc( proc );
#endif // CONFIG_USE_HIGHEST_LOCKER
    if( ret )
    1c74:	8b 81       	ldd	r24, Y+3	; 0x03
    1c76:	88 23       	and	r24, r24
    1c78:	41 f0       	breq	.+16     	; 0x1c8a <_mutex_lock+0x48>
    {
        mutex->free = (bool_t)0;
    1c7a:	ec 81       	ldd	r30, Y+4	; 0x04
    1c7c:	fd 81       	ldd	r31, Y+5	; 0x05
    1c7e:	12 8a       	std	Z+18, r1	; 0x12
#ifdef CONFIG_USE_HIGHEST_LOCKER
        // Меняем приоритет только здесь
        _proc_prio_control_running( proc );
    1c80:	89 81       	ldd	r24, Y+1	; 0x01
    1c82:	9a 81       	ldd	r25, Y+2	; 0x02
    1c84:	0e 94 dd 11 	call	0x23ba	; 0x23ba <_proc_prio_control_running>
    1c88:	1b c0       	rjmp	.+54     	; 0x1cc0 <_mutex_lock+0x7e>
#endif // CONFIG_USE_HIGHEST_LOCKER
    }
    else
    {
        proc->flags |= PROC_FLG_QUEUE;
    1c8a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c8c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c8e:	83 85       	ldd	r24, Z+11	; 0x0b
    1c90:	88 60       	ori	r24, 0x08	; 8
    1c92:	e9 81       	ldd	r30, Y+1	; 0x01
    1c94:	fa 81       	ldd	r31, Y+2	; 0x02
    1c96:	83 87       	std	Z+11, r24	; 0x0b
        proc->flags &= ~PROC_FLG_RUN;
    1c98:	e9 81       	ldd	r30, Y+1	; 0x01
    1c9a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c9c:	83 85       	ldd	r24, Z+11	; 0x0b
    1c9e:	8d 7f       	andi	r24, 0xFD	; 253
    1ca0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ca2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ca4:	83 87       	std	Z+11, r24	; 0x0b
        _proc_stop_( proc );
    1ca6:	89 81       	ldd	r24, Y+1	; 0x01
    1ca8:	9a 81       	ldd	r25, Y+2	; 0x02
    1caa:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <gitem_cut>
        gitem_insert( (gitem_t *)proc, (xlist_t *)mutex );
    1cae:	89 81       	ldd	r24, Y+1	; 0x01
    1cb0:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb2:	2c 81       	ldd	r18, Y+4	; 0x04
    1cb4:	3d 81       	ldd	r19, Y+5	; 0x05
    1cb6:	b9 01       	movw	r22, r18
    1cb8:	0e 94 91 0a 	call	0x1522	; 0x1522 <gitem_insert>
        // Нужна перепланировка
#ifdef CONFIG_MP
        resched( proc->core_id );
#else
        resched();
    1cbc:	0e 94 ef 04 	call	0x9de	; 0x9de <resched>
#endif // CONFIG_MP
    }
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    return ret;
    1cc0:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1cc2:	0f 90       	pop	r0
    1cc4:	0f 90       	pop	r0
    1cc6:	0f 90       	pop	r0
    1cc8:	0f 90       	pop	r0
    1cca:	0f 90       	pop	r0
    1ccc:	cf 91       	pop	r28
    1cce:	df 91       	pop	r29
    1cd0:	08 95       	ret

00001cd2 <_mutex_try_lock>:

bool_t _mutex_try_lock( mutex_t * mutex )
{
    1cd2:	df 93       	push	r29
    1cd4:	cf 93       	push	r28
    1cd6:	00 d0       	rcall	.+0      	; 0x1cd8 <_mutex_try_lock+0x6>
    1cd8:	00 d0       	rcall	.+0      	; 0x1cda <_mutex_try_lock+0x8>
    1cda:	0f 92       	push	r0
    1cdc:	cd b7       	in	r28, 0x3d	; 61
    1cde:	de b7       	in	r29, 0x3e	; 62
    1ce0:	9d 83       	std	Y+5, r25	; 0x05
    1ce2:	8c 83       	std	Y+4, r24	; 0x04
    bool_t ret = mutex->free;
    1ce4:	ec 81       	ldd	r30, Y+4	; 0x04
    1ce6:	fd 81       	ldd	r31, Y+5	; 0x05
    1ce8:	82 89       	ldd	r24, Z+18	; 0x12
    1cea:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = current_proc();
    1cec:	0e 94 c5 04 	call	0x98a	; 0x98a <current_proc>
    1cf0:	9a 83       	std	Y+2, r25	; 0x02
    1cf2:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    if( ret )
    1cf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf6:	88 23       	and	r24, r24
    1cf8:	79 f0       	breq	.+30     	; 0x1d18 <_mutex_try_lock+0x46>
    {
        mutex->free = (bool_t)0;
    1cfa:	ec 81       	ldd	r30, Y+4	; 0x04
    1cfc:	fd 81       	ldd	r31, Y+5	; 0x05
    1cfe:	12 8a       	std	Z+18, r1	; 0x12
#ifdef CONFIG_USE_HIGHEST_LOCKER
        _proc_lres_inc( proc, mutex->prio );
    1d00:	ec 81       	ldd	r30, Y+4	; 0x04
    1d02:	fd 81       	ldd	r31, Y+5	; 0x05
    1d04:	21 89       	ldd	r18, Z+17	; 0x11
    1d06:	89 81       	ldd	r24, Y+1	; 0x01
    1d08:	9a 81       	ldd	r25, Y+2	; 0x02
    1d0a:	62 2f       	mov	r22, r18
    1d0c:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <_proc_lres_inc>
        _proc_prio_control_running( proc );
    1d10:	89 81       	ldd	r24, Y+1	; 0x01
    1d12:	9a 81       	ldd	r25, Y+2	; 0x02
    1d14:	0e 94 dd 11 	call	0x23ba	; 0x23ba <_proc_prio_control_running>
#endif // CONFIG_USE_HIGHEST_LOCKER
    }
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    return ret;
    1d18:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1d1a:	0f 90       	pop	r0
    1d1c:	0f 90       	pop	r0
    1d1e:	0f 90       	pop	r0
    1d20:	0f 90       	pop	r0
    1d22:	0f 90       	pop	r0
    1d24:	cf 91       	pop	r28
    1d26:	df 91       	pop	r29
    1d28:	08 95       	ret

00001d2a <_mutex_unlock>:

void _mutex_unlock( mutex_t *  mutex )
{
    1d2a:	df 93       	push	r29
    1d2c:	cf 93       	push	r28
    1d2e:	00 d0       	rcall	.+0      	; 0x1d30 <_mutex_unlock+0x6>
    1d30:	00 d0       	rcall	.+0      	; 0x1d32 <_mutex_unlock+0x8>
    1d32:	cd b7       	in	r28, 0x3d	; 61
    1d34:	de b7       	in	r29, 0x3e	; 62
    1d36:	9c 83       	std	Y+4, r25	; 0x04
    1d38:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = current_proc();
    1d3a:	0e 94 c5 04 	call	0x98a	; 0x98a <current_proc>
    1d3e:	9a 83       	std	Y+2, r25	; 0x02
    1d40:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
#ifdef CONFIG_USE_HIGHEST_LOCKER

    _proc_lres_dec( proc, mutex->prio );
    1d42:	eb 81       	ldd	r30, Y+3	; 0x03
    1d44:	fc 81       	ldd	r31, Y+4	; 0x04
    1d46:	21 89       	ldd	r18, Z+17	; 0x11
    1d48:	89 81       	ldd	r24, Y+1	; 0x01
    1d4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d4c:	62 2f       	mov	r22, r18
    1d4e:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <_proc_lres_dec>
    // Если проготовлен и готов к остановке - останавливаем
    if(  ( proc->flags & PROC_FLG_PRE_END ) && (!(proc->flags & PROC_FLG_HOLD))  )
    1d52:	e9 81       	ldd	r30, Y+1	; 0x01
    1d54:	fa 81       	ldd	r31, Y+2	; 0x02
    1d56:	83 85       	ldd	r24, Z+11	; 0x0b
    1d58:	88 2f       	mov	r24, r24
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	80 72       	andi	r24, 0x20	; 32
    1d5e:	90 70       	andi	r25, 0x00	; 0
    1d60:	00 97       	sbiw	r24, 0x00	; 0
    1d62:	a1 f0       	breq	.+40     	; 0x1d8c <_mutex_unlock+0x62>
    1d64:	e9 81       	ldd	r30, Y+1	; 0x01
    1d66:	fa 81       	ldd	r31, Y+2	; 0x02
    1d68:	83 85       	ldd	r24, Z+11	; 0x0b
    1d6a:	88 2f       	mov	r24, r24
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	84 70       	andi	r24, 0x04	; 4
    1d70:	90 70       	andi	r25, 0x00	; 0
    1d72:	00 97       	sbiw	r24, 0x00	; 0
    1d74:	59 f4       	brne	.+22     	; 0x1d8c <_mutex_unlock+0x62>
    {
        _proc_stop_( proc );
    1d76:	89 81       	ldd	r24, Y+1	; 0x01
    1d78:	9a 81       	ldd	r25, Y+2	; 0x02
    1d7a:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <gitem_cut>
        _proc_prio_control_stoped( proc );
    1d7e:	89 81       	ldd	r24, Y+1	; 0x01
    1d80:	9a 81       	ldd	r25, Y+2	; 0x02
    1d82:	0e 94 9c 11 	call	0x2338	; 0x2338 <_proc_prio_control_stoped>
        // Нужна перепланировка, процесс остановили и не запустили обратно
#ifdef CONFIG_MP
        resched( proc->core_id );
#else
        resched();
    1d86:	0e 94 ef 04 	call	0x9de	; 0x9de <resched>
    1d8a:	04 c0       	rjmp	.+8      	; 0x1d94 <_mutex_unlock+0x6a>
#endif // CONFIG_MP
    }
    // Не останавливаем - меняем проиритет на ходу
    else _proc_prio_control_running( proc );
    1d8c:	89 81       	ldd	r24, Y+1	; 0x01
    1d8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d90:	0e 94 dd 11 	call	0x23ba	; 0x23ba <_proc_prio_control_running>
#endif // CONFIG_USE_HIGHEST_LOCKER
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    // Обрабока самого мьютекса
    if( ((xlist_t *)mutex)->index == (index_t)0  )
    1d94:	eb 81       	ldd	r30, Y+3	; 0x03
    1d96:	fc 81       	ldd	r31, Y+4	; 0x04
    1d98:	80 89       	ldd	r24, Z+16	; 0x10
    1d9a:	88 23       	and	r24, r24
    1d9c:	29 f4       	brne	.+10     	; 0x1da8 <_mutex_unlock+0x7e>
    {
        // Список ожидающих пуст, выходим
        mutex->free = (bool_t)1;
    1d9e:	eb 81       	ldd	r30, Y+3	; 0x03
    1da0:	fc 81       	ldd	r31, Y+4	; 0x04
    1da2:	81 e0       	ldi	r24, 0x01	; 1
    1da4:	82 8b       	std	Z+18, r24	; 0x12
    1da6:	19 c0       	rjmp	.+50     	; 0x1dda <_mutex_unlock+0xb0>
        return;
    }
    // Список ожидающих не пуст, запускаем голову
    proc = (proc_t *)xlist_head((xlist_t *)mutex);
    1da8:	8b 81       	ldd	r24, Y+3	; 0x03
    1daa:	9c 81       	ldd	r25, Y+4	; 0x04
    1dac:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <xlist_head>
    1db0:	9a 83       	std	Y+2, r25	; 0x02
    1db2:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    // Сначала надо вырезать
    proc->flags &= ~PROC_FLG_QUEUE;
    1db4:	e9 81       	ldd	r30, Y+1	; 0x01
    1db6:	fa 81       	ldd	r31, Y+2	; 0x02
    1db8:	83 85       	ldd	r24, Z+11	; 0x0b
    1dba:	87 7f       	andi	r24, 0xF7	; 247
    1dbc:	e9 81       	ldd	r30, Y+1	; 0x01
    1dbe:	fa 81       	ldd	r31, Y+2	; 0x02
    1dc0:	83 87       	std	Z+11, r24	; 0x0b
    gitem_cut( (gitem_t *)proc );
    1dc2:	89 81       	ldd	r24, Y+1	; 0x01
    1dc4:	9a 81       	ldd	r25, Y+2	; 0x02
    1dc6:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <gitem_cut>
#ifdef CONFIG_USE_HIGHEST_LOCKER
    // Меняем приоритет
    _proc_prio_control_stoped( proc );
    1dca:	89 81       	ldd	r24, Y+1	; 0x01
    1dcc:	9a 81       	ldd	r25, Y+2	; 0x02
    1dce:	0e 94 9c 11 	call	0x2338	; 0x2338 <_proc_prio_control_stoped>
#endif // CONFIG_USE_HIGHEST_LOCKER
    _proc_run( proc );
    1dd2:	89 81       	ldd	r24, Y+1	; 0x01
    1dd4:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd6:	0e 94 2f 10 	call	0x205e	; 0x205e <_proc_run>
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
}
    1dda:	0f 90       	pop	r0
    1ddc:	0f 90       	pop	r0
    1dde:	0f 90       	pop	r0
    1de0:	0f 90       	pop	r0
    1de2:	cf 91       	pop	r28
    1de4:	df 91       	pop	r29
    1de6:	08 95       	ret

00001de8 <pcounter_init>:
*                           http://www.0chan.ru/r/res/9996.html                          *
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
void pcounter_init(pcounter_t * pcounter)
{
    1de8:	df 93       	push	r29
    1dea:	cf 93       	push	r28
    1dec:	00 d0       	rcall	.+0      	; 0x1dee <pcounter_init+0x6>
    1dee:	0f 92       	push	r0
    1df0:	cd b7       	in	r28, 0x3d	; 61
    1df2:	de b7       	in	r29, 0x3e	; 62
    1df4:	9b 83       	std	Y+3, r25	; 0x03
    1df6:	8a 83       	std	Y+2, r24	; 0x02
    prio_t p;
    pcounter->index = (index_t)0;
    1df8:	ea 81       	ldd	r30, Y+2	; 0x02
    1dfa:	fb 81       	ldd	r31, Y+3	; 0x03
    1dfc:	10 8a       	std	Z+16, r1	; 0x10
    for(p = 0; p < (index_t)BITS_IN_INDEX_T; p++)pcounter->counter[p] = (count_t)0;
    1dfe:	19 82       	std	Y+1, r1	; 0x01
    1e00:	0f c0       	rjmp	.+30     	; 0x1e20 <pcounter_init+0x38>
    1e02:	89 81       	ldd	r24, Y+1	; 0x01
    1e04:	88 2f       	mov	r24, r24
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	2a 81       	ldd	r18, Y+2	; 0x02
    1e0a:	3b 81       	ldd	r19, Y+3	; 0x03
    1e0c:	88 0f       	add	r24, r24
    1e0e:	99 1f       	adc	r25, r25
    1e10:	f9 01       	movw	r30, r18
    1e12:	e8 0f       	add	r30, r24
    1e14:	f9 1f       	adc	r31, r25
    1e16:	11 82       	std	Z+1, r1	; 0x01
    1e18:	10 82       	st	Z, r1
    1e1a:	89 81       	ldd	r24, Y+1	; 0x01
    1e1c:	8f 5f       	subi	r24, 0xFF	; 255
    1e1e:	89 83       	std	Y+1, r24	; 0x01
    1e20:	89 81       	ldd	r24, Y+1	; 0x01
    1e22:	88 30       	cpi	r24, 0x08	; 8
    1e24:	70 f3       	brcs	.-36     	; 0x1e02 <pcounter_init+0x1a>
}
    1e26:	0f 90       	pop	r0
    1e28:	0f 90       	pop	r0
    1e2a:	0f 90       	pop	r0
    1e2c:	cf 91       	pop	r28
    1e2e:	df 91       	pop	r29
    1e30:	08 95       	ret

00001e32 <pcounter_inc>:

void pcounter_inc(pcounter_t * pcounter, prio_t prio)
{
    1e32:	df 93       	push	r29
    1e34:	cf 93       	push	r28
    1e36:	00 d0       	rcall	.+0      	; 0x1e38 <pcounter_inc+0x6>
    1e38:	0f 92       	push	r0
    1e3a:	cd b7       	in	r28, 0x3d	; 61
    1e3c:	de b7       	in	r29, 0x3e	; 62
    1e3e:	9a 83       	std	Y+2, r25	; 0x02
    1e40:	89 83       	std	Y+1, r24	; 0x01
    1e42:	6b 83       	std	Y+3, r22	; 0x03
    pcounter->counter[prio]++;
    1e44:	8b 81       	ldd	r24, Y+3	; 0x03
    1e46:	68 2f       	mov	r22, r24
    1e48:	70 e0       	ldi	r23, 0x00	; 0
    1e4a:	29 81       	ldd	r18, Y+1	; 0x01
    1e4c:	3a 81       	ldd	r19, Y+2	; 0x02
    1e4e:	cb 01       	movw	r24, r22
    1e50:	88 0f       	add	r24, r24
    1e52:	99 1f       	adc	r25, r25
    1e54:	f9 01       	movw	r30, r18
    1e56:	e8 0f       	add	r30, r24
    1e58:	f9 1f       	adc	r31, r25
    1e5a:	80 81       	ld	r24, Z
    1e5c:	91 81       	ldd	r25, Z+1	; 0x01
    1e5e:	ac 01       	movw	r20, r24
    1e60:	4f 5f       	subi	r20, 0xFF	; 255
    1e62:	5f 4f       	sbci	r21, 0xFF	; 255
    1e64:	29 81       	ldd	r18, Y+1	; 0x01
    1e66:	3a 81       	ldd	r19, Y+2	; 0x02
    1e68:	cb 01       	movw	r24, r22
    1e6a:	88 0f       	add	r24, r24
    1e6c:	99 1f       	adc	r25, r25
    1e6e:	f9 01       	movw	r30, r18
    1e70:	e8 0f       	add	r30, r24
    1e72:	f9 1f       	adc	r31, r25
    1e74:	51 83       	std	Z+1, r21	; 0x01
    1e76:	40 83       	st	Z, r20
    pcounter->index |= ((index_t)1)<<prio;
    1e78:	e9 81       	ldd	r30, Y+1	; 0x01
    1e7a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e7c:	80 89       	ldd	r24, Z+16	; 0x10
    1e7e:	48 2f       	mov	r20, r24
    1e80:	8b 81       	ldd	r24, Y+3	; 0x03
    1e82:	28 2f       	mov	r18, r24
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	81 e0       	ldi	r24, 0x01	; 1
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	02 2e       	mov	r0, r18
    1e8c:	02 c0       	rjmp	.+4      	; 0x1e92 <pcounter_inc+0x60>
    1e8e:	88 0f       	add	r24, r24
    1e90:	99 1f       	adc	r25, r25
    1e92:	0a 94       	dec	r0
    1e94:	e2 f7       	brpl	.-8      	; 0x1e8e <pcounter_inc+0x5c>
    1e96:	84 2b       	or	r24, r20
    1e98:	e9 81       	ldd	r30, Y+1	; 0x01
    1e9a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e9c:	80 8b       	std	Z+16, r24	; 0x10
}
    1e9e:	0f 90       	pop	r0
    1ea0:	0f 90       	pop	r0
    1ea2:	0f 90       	pop	r0
    1ea4:	cf 91       	pop	r28
    1ea6:	df 91       	pop	r29
    1ea8:	08 95       	ret

00001eaa <pcounter_dec>:

index_t pcounter_dec(pcounter_t * pcounter, prio_t prio)
{
    1eaa:	df 93       	push	r29
    1eac:	cf 93       	push	r28
    1eae:	00 d0       	rcall	.+0      	; 0x1eb0 <pcounter_dec+0x6>
    1eb0:	00 d0       	rcall	.+0      	; 0x1eb2 <pcounter_dec+0x8>
    1eb2:	cd b7       	in	r28, 0x3d	; 61
    1eb4:	de b7       	in	r29, 0x3e	; 62
    1eb6:	9b 83       	std	Y+3, r25	; 0x03
    1eb8:	8a 83       	std	Y+2, r24	; 0x02
    1eba:	6c 83       	std	Y+4, r22	; 0x04
    index_t mask = ((index_t)1)<<prio;
    1ebc:	8c 81       	ldd	r24, Y+4	; 0x04
    1ebe:	28 2f       	mov	r18, r24
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	02 c0       	rjmp	.+4      	; 0x1ecc <pcounter_dec+0x22>
    1ec8:	88 0f       	add	r24, r24
    1eca:	99 1f       	adc	r25, r25
    1ecc:	2a 95       	dec	r18
    1ece:	e2 f7       	brpl	.-8      	; 0x1ec8 <pcounter_dec+0x1e>
    1ed0:	89 83       	std	Y+1, r24	; 0x01
    pcounter->counter[prio]--;
    1ed2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ed4:	68 2f       	mov	r22, r24
    1ed6:	70 e0       	ldi	r23, 0x00	; 0
    1ed8:	2a 81       	ldd	r18, Y+2	; 0x02
    1eda:	3b 81       	ldd	r19, Y+3	; 0x03
    1edc:	cb 01       	movw	r24, r22
    1ede:	88 0f       	add	r24, r24
    1ee0:	99 1f       	adc	r25, r25
    1ee2:	f9 01       	movw	r30, r18
    1ee4:	e8 0f       	add	r30, r24
    1ee6:	f9 1f       	adc	r31, r25
    1ee8:	80 81       	ld	r24, Z
    1eea:	91 81       	ldd	r25, Z+1	; 0x01
    1eec:	ac 01       	movw	r20, r24
    1eee:	41 50       	subi	r20, 0x01	; 1
    1ef0:	50 40       	sbci	r21, 0x00	; 0
    1ef2:	2a 81       	ldd	r18, Y+2	; 0x02
    1ef4:	3b 81       	ldd	r19, Y+3	; 0x03
    1ef6:	cb 01       	movw	r24, r22
    1ef8:	88 0f       	add	r24, r24
    1efa:	99 1f       	adc	r25, r25
    1efc:	f9 01       	movw	r30, r18
    1efe:	e8 0f       	add	r30, r24
    1f00:	f9 1f       	adc	r31, r25
    1f02:	51 83       	std	Z+1, r21	; 0x01
    1f04:	40 83       	st	Z, r20
    if(pcounter->counter[prio] == (count_t)0)pcounter->index &= ~mask;
    1f06:	8c 81       	ldd	r24, Y+4	; 0x04
    1f08:	88 2f       	mov	r24, r24
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	2a 81       	ldd	r18, Y+2	; 0x02
    1f0e:	3b 81       	ldd	r19, Y+3	; 0x03
    1f10:	88 0f       	add	r24, r24
    1f12:	99 1f       	adc	r25, r25
    1f14:	f9 01       	movw	r30, r18
    1f16:	e8 0f       	add	r30, r24
    1f18:	f9 1f       	adc	r31, r25
    1f1a:	80 81       	ld	r24, Z
    1f1c:	91 81       	ldd	r25, Z+1	; 0x01
    1f1e:	00 97       	sbiw	r24, 0x00	; 0
    1f20:	51 f4       	brne	.+20     	; 0x1f36 <pcounter_dec+0x8c>
    1f22:	ea 81       	ldd	r30, Y+2	; 0x02
    1f24:	fb 81       	ldd	r31, Y+3	; 0x03
    1f26:	80 89       	ldd	r24, Z+16	; 0x10
    1f28:	98 2f       	mov	r25, r24
    1f2a:	89 81       	ldd	r24, Y+1	; 0x01
    1f2c:	80 95       	com	r24
    1f2e:	89 23       	and	r24, r25
    1f30:	ea 81       	ldd	r30, Y+2	; 0x02
    1f32:	fb 81       	ldd	r31, Y+3	; 0x03
    1f34:	80 8b       	std	Z+16, r24	; 0x10
    return pcounter->index & mask;
    1f36:	ea 81       	ldd	r30, Y+2	; 0x02
    1f38:	fb 81       	ldd	r31, Y+3	; 0x03
    1f3a:	90 89       	ldd	r25, Z+16	; 0x10
    1f3c:	89 81       	ldd	r24, Y+1	; 0x01
    1f3e:	89 23       	and	r24, r25
}
    1f40:	0f 90       	pop	r0
    1f42:	0f 90       	pop	r0
    1f44:	0f 90       	pop	r0
    1f46:	0f 90       	pop	r0
    1f48:	cf 91       	pop	r28
    1f4a:	df 91       	pop	r29
    1f4c:	08 95       	ret

00001f4e <proc_init_isr>:
    bool_t is_rt // если true, значит процесс будет иметть поведение RT
#ifdef CONFIG_MP
    ,affinity_t affinity
#endif // CONFIG_MP
)
{
    1f4e:	8f 92       	push	r8
    1f50:	af 92       	push	r10
    1f52:	bf 92       	push	r11
    1f54:	cf 92       	push	r12
    1f56:	ef 92       	push	r14
    1f58:	ff 92       	push	r15
    1f5a:	0f 93       	push	r16
    1f5c:	1f 93       	push	r17
    1f5e:	df 93       	push	r29
    1f60:	cf 93       	push	r28
    1f62:	cd b7       	in	r28, 0x3d	; 61
    1f64:	de b7       	in	r29, 0x3e	; 62
    1f66:	61 97       	sbiw	r28, 0x11	; 17
    1f68:	0f b6       	in	r0, 0x3f	; 63
    1f6a:	f8 94       	cli
    1f6c:	de bf       	out	0x3e, r29	; 62
    1f6e:	0f be       	out	0x3f, r0	; 63
    1f70:	cd bf       	out	0x3d, r28	; 61
    1f72:	9a 83       	std	Y+2, r25	; 0x02
    1f74:	89 83       	std	Y+1, r24	; 0x01
    1f76:	7c 83       	std	Y+4, r23	; 0x04
    1f78:	6b 83       	std	Y+3, r22	; 0x03
    1f7a:	5e 83       	std	Y+6, r21	; 0x06
    1f7c:	4d 83       	std	Y+5, r20	; 0x05
    1f7e:	38 87       	std	Y+8, r19	; 0x08
    1f80:	2f 83       	std	Y+7, r18	; 0x07
    1f82:	1a 87       	std	Y+10, r17	; 0x0a
    1f84:	09 87       	std	Y+9, r16	; 0x09
    1f86:	fc 86       	std	Y+12, r15	; 0x0c
    1f88:	eb 86       	std	Y+11, r14	; 0x0b
    1f8a:	cd 86       	std	Y+13, r12	; 0x0d
    1f8c:	bf 86       	std	Y+15, r11	; 0x0f
    1f8e:	ae 86       	std	Y+14, r10	; 0x0e
    1f90:	88 8a       	std	Y+16, r8	; 0x10
    gitem_init( (gitem_t *)proc, prio );
    1f92:	89 81       	ldd	r24, Y+1	; 0x01
    1f94:	9a 81       	ldd	r25, Y+2	; 0x02
    1f96:	6d 85       	ldd	r22, Y+13	; 0x0d
    1f98:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <gitem_init>
    proc->flags = ( is_rt )?PROC_FLG_RT:(flag_t)0;
    1f9c:	88 89       	ldd	r24, Y+16	; 0x10
    1f9e:	89 8b       	std	Y+17, r24	; 0x11
    1fa0:	89 89       	ldd	r24, Y+17	; 0x11
    1fa2:	88 23       	and	r24, r24
    1fa4:	11 f0       	breq	.+4      	; 0x1faa <proc_init_isr+0x5c>
    1fa6:	81 e0       	ldi	r24, 0x01	; 1
    1fa8:	89 8b       	std	Y+17, r24	; 0x11
    1faa:	89 89       	ldd	r24, Y+17	; 0x11
    1fac:	e9 81       	ldd	r30, Y+1	; 0x01
    1fae:	fa 81       	ldd	r31, Y+2	; 0x02
    1fb0:	83 87       	std	Z+11, r24	; 0x0b
#ifdef CONFIG_USE_HIGHEST_LOCKER
    pcounter_init(&proc->lres);
    1fb2:	89 81       	ldd	r24, Y+1	; 0x01
    1fb4:	9a 81       	ldd	r25, Y+2	; 0x02
    1fb6:	0d 96       	adiw	r24, 0x0d	; 13
    1fb8:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <pcounter_init>
    proc->base_prio = prio;
    1fbc:	e9 81       	ldd	r30, Y+1	; 0x01
    1fbe:	fa 81       	ldd	r31, Y+2	; 0x02
    1fc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fc2:	84 87       	std	Z+12, r24	; 0x0c
#else
    proc->lres = (count_t)0;
#endif
    proc->time_quant = time_quant;
    1fc4:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fc6:	9f 85       	ldd	r25, Y+15	; 0x0f
    1fc8:	e9 81       	ldd	r30, Y+1	; 0x01
    1fca:	fa 81       	ldd	r31, Y+2	; 0x02
    1fcc:	97 8f       	std	Z+31, r25	; 0x1f
    1fce:	86 8f       	std	Z+30, r24	; 0x1e
    proc->timer = time_quant;
    1fd0:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fd2:	9f 85       	ldd	r25, Y+15	; 0x0f
    1fd4:	e9 81       	ldd	r30, Y+1	; 0x01
    1fd6:	fa 81       	ldd	r31, Y+2	; 0x02
    1fd8:	91 a3       	std	Z+33, r25	; 0x21
    1fda:	80 a3       	std	Z+32, r24	; 0x20
#ifdef CONFIG_MP
    proc->core_id = (core_id_t)0;
    proc->affinity = affinity;
#endif // CONFIG_MP
    proc->pmain = pmain;
    1fdc:	e9 81       	ldd	r30, Y+1	; 0x01
    1fde:	fa 81       	ldd	r31, Y+2	; 0x02
    1fe0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe4:	93 a3       	std	Z+35, r25	; 0x23
    1fe6:	82 a3       	std	Z+34, r24	; 0x22
    proc->sv_hook = sv_hook;
    1fe8:	e9 81       	ldd	r30, Y+1	; 0x01
    1fea:	fa 81       	ldd	r31, Y+2	; 0x02
    1fec:	8d 81       	ldd	r24, Y+5	; 0x05
    1fee:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff0:	95 a3       	std	Z+37, r25	; 0x25
    1ff2:	84 a3       	std	Z+36, r24	; 0x24
    proc->rs_hook = rs_hook;
    1ff4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ff6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ff8:	8f 81       	ldd	r24, Y+7	; 0x07
    1ffa:	98 85       	ldd	r25, Y+8	; 0x08
    1ffc:	97 a3       	std	Z+39, r25	; 0x27
    1ffe:	86 a3       	std	Z+38, r24	; 0x26
    proc->arg = arg;
    2000:	e9 81       	ldd	r30, Y+1	; 0x01
    2002:	fa 81       	ldd	r31, Y+2	; 0x02
    2004:	89 85       	ldd	r24, Y+9	; 0x09
    2006:	9a 85       	ldd	r25, Y+10	; 0x0a
    2008:	91 a7       	std	Z+41, r25	; 0x29
    200a:	80 a7       	std	Z+40, r24	; 0x28
    proc->sstart = sstart;
    200c:	e9 81       	ldd	r30, Y+1	; 0x01
    200e:	fa 81       	ldd	r31, Y+2	; 0x02
    2010:	8b 85       	ldd	r24, Y+11	; 0x0b
    2012:	9c 85       	ldd	r25, Y+12	; 0x0c
    2014:	93 a7       	std	Z+43, r25	; 0x2b
    2016:	82 a7       	std	Z+42, r24	; 0x2a
    if( sstart )proc->spointer = proc_stack_init(sstart, (code_t)proc_run_wrapper, (void *)proc);
    2018:	8b 85       	ldd	r24, Y+11	; 0x0b
    201a:	9c 85       	ldd	r25, Y+12	; 0x0c
    201c:	00 97       	sbiw	r24, 0x00	; 0
    201e:	71 f0       	breq	.+28     	; 0x203c <proc_init_isr+0xee>
    2020:	47 eb       	ldi	r20, 0xB7	; 183
    2022:	57 e0       	ldi	r21, 0x07	; 7
    2024:	8b 85       	ldd	r24, Y+11	; 0x0b
    2026:	9c 85       	ldd	r25, Y+12	; 0x0c
    2028:	29 81       	ldd	r18, Y+1	; 0x01
    202a:	3a 81       	ldd	r19, Y+2	; 0x02
    202c:	ba 01       	movw	r22, r20
    202e:	a9 01       	movw	r20, r18
    2030:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <proc_stack_init>
    2034:	e9 81       	ldd	r30, Y+1	; 0x01
    2036:	fa 81       	ldd	r31, Y+2	; 0x02
    2038:	95 a7       	std	Z+45, r25	; 0x2d
    203a:	84 a7       	std	Z+44, r24	; 0x2c
}
    203c:	61 96       	adiw	r28, 0x11	; 17
    203e:	0f b6       	in	r0, 0x3f	; 63
    2040:	f8 94       	cli
    2042:	de bf       	out	0x3e, r29	; 62
    2044:	0f be       	out	0x3f, r0	; 63
    2046:	cd bf       	out	0x3d, r28	; 61
    2048:	cf 91       	pop	r28
    204a:	df 91       	pop	r29
    204c:	1f 91       	pop	r17
    204e:	0f 91       	pop	r16
    2050:	ff 90       	pop	r15
    2052:	ef 90       	pop	r14
    2054:	cf 90       	pop	r12
    2056:	bf 90       	pop	r11
    2058:	af 90       	pop	r10
    205a:	8f 90       	pop	r8
    205c:	08 95       	ret

0000205e <_proc_run>:
    spin_unlock( &proc_sched->lock );
}
#endif // CONFIG_MP

void _proc_run( proc_t * proc )
{
    205e:	df 93       	push	r29
    2060:	cf 93       	push	r28
    2062:	00 d0       	rcall	.+0      	; 0x2064 <_proc_run+0x6>
    2064:	cd b7       	in	r28, 0x3d	; 61
    2066:	de b7       	in	r29, 0x3e	; 62
    2068:	9a 83       	std	Y+2, r25	; 0x02
    206a:	89 83       	std	Y+1, r24	; 0x01
    proc->flags |= PROC_FLG_RUN;
    206c:	e9 81       	ldd	r30, Y+1	; 0x01
    206e:	fa 81       	ldd	r31, Y+2	; 0x02
    2070:	83 85       	ldd	r24, Z+11	; 0x0b
    2072:	82 60       	ori	r24, 0x02	; 2
    2074:	e9 81       	ldd	r30, Y+1	; 0x01
    2076:	fa 81       	ldd	r31, Y+2	; 0x02
    2078:	83 87       	std	Z+11, r24	; 0x0b
    spin_lock( &kernel.stat_lock );
    proc->core_id = sched_load_balancer( proc, (stat_t *)kernel.stat );
    stat_inc( proc, (stat_t *)kernel.stat+proc->core_id );
    spin_unlock( &kernel.stat_lock );
#endif
    _proc_run_( proc );
    207a:	89 81       	ldd	r24, Y+1	; 0x01
    207c:	9a 81       	ldd	r25, Y+2	; 0x02
    207e:	20 91 2a 01 	lds	r18, 0x012A
    2082:	30 91 2b 01 	lds	r19, 0x012B
    2086:	b9 01       	movw	r22, r18
    2088:	0e 94 91 0a 	call	0x1522	; 0x1522 <gitem_insert>
#ifdef CONFIG_MP
    resched( proc->core_id );
#else
    resched();
    208c:	0e 94 ef 04 	call	0x9de	; 0x9de <resched>
#endif // CONFIG_MP
}
    2090:	0f 90       	pop	r0
    2092:	0f 90       	pop	r0
    2094:	cf 91       	pop	r28
    2096:	df 91       	pop	r29
    2098:	08 95       	ret

0000209a <proc_run_isr>:
// Функция общего пользования - запуск процесса из обработчика прерывания, прерывания должны быть запрещены во время запуска
bool_t proc_run_isr(proc_t * proc)
{
    209a:	df 93       	push	r29
    209c:	cf 93       	push	r28
    209e:	00 d0       	rcall	.+0      	; 0x20a0 <proc_run_isr+0x6>
    20a0:	0f 92       	push	r0
    20a2:	cd b7       	in	r28, 0x3d	; 61
    20a4:	de b7       	in	r29, 0x3e	; 62
    20a6:	9b 83       	std	Y+3, r25	; 0x03
    20a8:	8a 83       	std	Y+2, r24	; 0x02
    bool_t ret = (bool_t)1;
    20aa:	81 e0       	ldi	r24, 0x01	; 1
    20ac:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    if( proc->flags & (PROC_FLG_RUN|PROC_FLG_QUEUE|PROC_FLG_WAIT|PROC_FLG_END|PROC_FLG_DEAD) )
    20ae:	ea 81       	ldd	r30, Y+2	; 0x02
    20b0:	fb 81       	ldd	r31, Y+3	; 0x03
    20b2:	83 85       	ldd	r24, Z+11	; 0x0b
    20b4:	88 2f       	mov	r24, r24
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	8a 7d       	andi	r24, 0xDA	; 218
    20ba:	90 70       	andi	r25, 0x00	; 0
    20bc:	00 97       	sbiw	r24, 0x00	; 0
    20be:	11 f0       	breq	.+4      	; 0x20c4 <proc_run_isr+0x2a>
    {
        ret = (bool_t)0;
    20c0:	19 82       	std	Y+1, r1	; 0x01
    20c2:	04 c0       	rjmp	.+8      	; 0x20cc <proc_run_isr+0x32>
        goto end;
    }
    _proc_run( proc );
    20c4:	8a 81       	ldd	r24, Y+2	; 0x02
    20c6:	9b 81       	ldd	r25, Y+3	; 0x03
    20c8:	0e 94 2f 10 	call	0x205e	; 0x205e <_proc_run>
end:
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    return ret;
    20cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    20ce:	0f 90       	pop	r0
    20d0:	0f 90       	pop	r0
    20d2:	0f 90       	pop	r0
    20d4:	cf 91       	pop	r28
    20d6:	df 91       	pop	r29
    20d8:	08 95       	ret

000020da <proc_restart_isr>:
// Перезепуск процесса из обработчика прерываний, прерывания должны быть запрещены
bool_t proc_restart_isr(proc_t * proc)
{
    20da:	df 93       	push	r29
    20dc:	cf 93       	push	r28
    20de:	00 d0       	rcall	.+0      	; 0x20e0 <proc_restart_isr+0x6>
    20e0:	0f 92       	push	r0
    20e2:	cd b7       	in	r28, 0x3d	; 61
    20e4:	de b7       	in	r29, 0x3e	; 62
    20e6:	9b 83       	std	Y+3, r25	; 0x03
    20e8:	8a 83       	std	Y+2, r24	; 0x02
    bool_t ret = (bool_t)1;
    20ea:	81 e0       	ldi	r24, 0x01	; 1
    20ec:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif
    if( proc->flags & (PROC_FLG_RUN|PROC_FLG_HOLD|PROC_FLG_QUEUE|PROC_FLG_WAIT|PROC_FLG_PRE_END|PROC_FLG_DEAD) )
    20ee:	ea 81       	ldd	r30, Y+2	; 0x02
    20f0:	fb 81       	ldd	r31, Y+3	; 0x03
    20f2:	83 85       	ldd	r24, Z+11	; 0x0b
    20f4:	88 2f       	mov	r24, r24
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	8e 7b       	andi	r24, 0xBE	; 190
    20fa:	90 70       	andi	r25, 0x00	; 0
    20fc:	00 97       	sbiw	r24, 0x00	; 0
    20fe:	11 f0       	breq	.+4      	; 0x2104 <proc_restart_isr+0x2a>
    {
        ret = (bool_t)0;
    2100:	19 82       	std	Y+1, r1	; 0x01
    2102:	2d c0       	rjmp	.+90     	; 0x215e <proc_restart_isr+0x84>
        goto end;
    }
    proc->flags = ( proc->flags & PROC_FLG_RT )?PROC_FLG_RT:(flag_t)0;
    2104:	ea 81       	ldd	r30, Y+2	; 0x02
    2106:	fb 81       	ldd	r31, Y+3	; 0x03
    2108:	83 85       	ldd	r24, Z+11	; 0x0b
    210a:	81 70       	andi	r24, 0x01	; 1
    210c:	ea 81       	ldd	r30, Y+2	; 0x02
    210e:	fb 81       	ldd	r31, Y+3	; 0x03
    2110:	83 87       	std	Z+11, r24	; 0x0b
#ifdef CONFIG_USE_HIGHEST_LOCKER
    pcounter_init(&proc->lres);
    2112:	8a 81       	ldd	r24, Y+2	; 0x02
    2114:	9b 81       	ldd	r25, Y+3	; 0x03
    2116:	0d 96       	adiw	r24, 0x0d	; 13
    2118:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <pcounter_init>
#else
    proc->lres = (count_t)0;
#endif
    proc->timer = proc->time_quant;
    211c:	ea 81       	ldd	r30, Y+2	; 0x02
    211e:	fb 81       	ldd	r31, Y+3	; 0x03
    2120:	86 8d       	ldd	r24, Z+30	; 0x1e
    2122:	97 8d       	ldd	r25, Z+31	; 0x1f
    2124:	ea 81       	ldd	r30, Y+2	; 0x02
    2126:	fb 81       	ldd	r31, Y+3	; 0x03
    2128:	91 a3       	std	Z+33, r25	; 0x21
    212a:	80 a3       	std	Z+32, r24	; 0x20

    if( proc->sstart )proc->spointer = proc_stack_init( proc->sstart, (code_t)proc_run_wrapper, (void *)proc );
    212c:	ea 81       	ldd	r30, Y+2	; 0x02
    212e:	fb 81       	ldd	r31, Y+3	; 0x03
    2130:	82 a5       	ldd	r24, Z+42	; 0x2a
    2132:	93 a5       	ldd	r25, Z+43	; 0x2b
    2134:	00 97       	sbiw	r24, 0x00	; 0
    2136:	79 f0       	breq	.+30     	; 0x2156 <proc_restart_isr+0x7c>
    2138:	ea 81       	ldd	r30, Y+2	; 0x02
    213a:	fb 81       	ldd	r31, Y+3	; 0x03
    213c:	82 a5       	ldd	r24, Z+42	; 0x2a
    213e:	93 a5       	ldd	r25, Z+43	; 0x2b
    2140:	27 eb       	ldi	r18, 0xB7	; 183
    2142:	37 e0       	ldi	r19, 0x07	; 7
    2144:	4a 81       	ldd	r20, Y+2	; 0x02
    2146:	5b 81       	ldd	r21, Y+3	; 0x03
    2148:	b9 01       	movw	r22, r18
    214a:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <proc_stack_init>
    214e:	ea 81       	ldd	r30, Y+2	; 0x02
    2150:	fb 81       	ldd	r31, Y+3	; 0x03
    2152:	95 a7       	std	Z+45, r25	; 0x2d
    2154:	84 a7       	std	Z+44, r24	; 0x2c
    _proc_run( proc );
    2156:	8a 81       	ldd	r24, Y+2	; 0x02
    2158:	9b 81       	ldd	r25, Y+3	; 0x03
    215a:	0e 94 2f 10 	call	0x205e	; 0x205e <_proc_run>
end:
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif
    return ret;
    215e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2160:	0f 90       	pop	r0
    2162:	0f 90       	pop	r0
    2164:	0f 90       	pop	r0
    2166:	cf 91       	pop	r28
    2168:	df 91       	pop	r29
    216a:	08 95       	ret

0000216c <_proc_stop>:
        spin_unlock( xlist_lock );
    }
}
#endif // CONFIG_MP
void _proc_stop(proc_t * proc)
{
    216c:	df 93       	push	r29
    216e:	cf 93       	push	r28
    2170:	00 d0       	rcall	.+0      	; 0x2172 <_proc_stop+0x6>
    2172:	cd b7       	in	r28, 0x3d	; 61
    2174:	de b7       	in	r29, 0x3e	; 62
    2176:	9a 83       	std	Y+2, r25	; 0x02
    2178:	89 83       	std	Y+1, r24	; 0x01
    proc->flags &= ~PROC_FLG_RUN;
    217a:	e9 81       	ldd	r30, Y+1	; 0x01
    217c:	fa 81       	ldd	r31, Y+2	; 0x02
    217e:	83 85       	ldd	r24, Z+11	; 0x0b
    2180:	8d 7f       	andi	r24, 0xFD	; 253
    2182:	e9 81       	ldd	r30, Y+1	; 0x01
    2184:	fa 81       	ldd	r31, Y+2	; 0x02
    2186:	83 87       	std	Z+11, r24	; 0x0b
    _proc_stop_( proc );
    2188:	89 81       	ldd	r24, Y+1	; 0x01
    218a:	9a 81       	ldd	r25, Y+2	; 0x02
    218c:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <gitem_cut>
#ifdef CONFIG_MP
    resched( proc->core_id );
#else
    resched();
    2190:	0e 94 ef 04 	call	0x9de	; 0x9de <resched>
#endif // CONFIG_MP
}
    2194:	0f 90       	pop	r0
    2196:	0f 90       	pop	r0
    2198:	cf 91       	pop	r28
    219a:	df 91       	pop	r29
    219c:	08 95       	ret

0000219e <proc_stop_isr>:
// Останов процесса из обработчика прерываний, прерывания должны быть запрещены
bool_t proc_stop_isr(proc_t * proc)
{
    219e:	df 93       	push	r29
    21a0:	cf 93       	push	r28
    21a2:	00 d0       	rcall	.+0      	; 0x21a4 <proc_stop_isr+0x6>
    21a4:	0f 92       	push	r0
    21a6:	cd b7       	in	r28, 0x3d	; 61
    21a8:	de b7       	in	r29, 0x3e	; 62
    21aa:	9b 83       	std	Y+3, r25	; 0x03
    21ac:	8a 83       	std	Y+2, r24	; 0x02
    bool_t ret = (bool_t)0;
    21ae:	19 82       	std	Y+1, r1	; 0x01
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    //Проверка флагов
    //В случчае PROC_FLG_WAIT будем обрабатывать PROC_FLG_PRE_END на выходе из sig_wait.
    //В случае PROC_FLG_HOLD или PROC_FLG_QUEUE будем обрабатывать PROC_FLG_PRE_END на выходе из функции, освобождающей общий ресурс.
    if( proc->flags & (PROC_FLG_HOLD|PROC_FLG_QUEUE|PROC_FLG_WAIT) )proc->flags |= PROC_FLG_PRE_END;
    21b0:	ea 81       	ldd	r30, Y+2	; 0x02
    21b2:	fb 81       	ldd	r31, Y+3	; 0x03
    21b4:	83 85       	ldd	r24, Z+11	; 0x0b
    21b6:	88 2f       	mov	r24, r24
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	8c 71       	andi	r24, 0x1C	; 28
    21bc:	90 70       	andi	r25, 0x00	; 0
    21be:	00 97       	sbiw	r24, 0x00	; 0
    21c0:	41 f0       	breq	.+16     	; 0x21d2 <proc_stop_isr+0x34>
    21c2:	ea 81       	ldd	r30, Y+2	; 0x02
    21c4:	fb 81       	ldd	r31, Y+3	; 0x03
    21c6:	83 85       	ldd	r24, Z+11	; 0x0b
    21c8:	80 62       	ori	r24, 0x20	; 32
    21ca:	ea 81       	ldd	r30, Y+2	; 0x02
    21cc:	fb 81       	ldd	r31, Y+3	; 0x03
    21ce:	83 87       	std	Z+11, r24	; 0x0b
    21d0:	0f c0       	rjmp	.+30     	; 0x21f0 <proc_stop_isr+0x52>
    else if( proc->flags & PROC_FLG_RUN )
    21d2:	ea 81       	ldd	r30, Y+2	; 0x02
    21d4:	fb 81       	ldd	r31, Y+3	; 0x03
    21d6:	83 85       	ldd	r24, Z+11	; 0x0b
    21d8:	88 2f       	mov	r24, r24
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	82 70       	andi	r24, 0x02	; 2
    21de:	90 70       	andi	r25, 0x00	; 0
    21e0:	00 97       	sbiw	r24, 0x00	; 0
    21e2:	31 f0       	breq	.+12     	; 0x21f0 <proc_stop_isr+0x52>
    {
        _proc_stop( proc );
    21e4:	8a 81       	ldd	r24, Y+2	; 0x02
    21e6:	9b 81       	ldd	r25, Y+3	; 0x03
    21e8:	0e 94 b6 10 	call	0x216c	; 0x216c <_proc_stop>
        ret = (bool_t)1;
    21ec:	81 e0       	ldi	r24, 0x01	; 1
    21ee:	89 83       	std	Y+1, r24	; 0x01
    }
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    return ret;
    21f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    21f2:	0f 90       	pop	r0
    21f4:	0f 90       	pop	r0
    21f6:	0f 90       	pop	r0
    21f8:	cf 91       	pop	r28
    21fa:	df 91       	pop	r29
    21fc:	08 95       	ret

000021fe <proc_reset_watchdog>:
void proc_reset_watchdog(void)
{
    21fe:	df 93       	push	r29
    2200:	cf 93       	push	r28
    2202:	00 d0       	rcall	.+0      	; 0x2204 <proc_reset_watchdog+0x6>
    2204:	cd b7       	in	r28, 0x3d	; 61
    2206:	de b7       	in	r29, 0x3e	; 62
#ifdef CONFIG_MP
    core_id_t current_core = _enter_crit_sec();
    proc = ((sched_t *)kernel.sched + current_core)->current_proc;
    spin_lock(&proc->lock);
#else
    enter_crit_sec();
    2208:	0e 94 3b 0a 	call	0x1476	; 0x1476 <enter_crit_sec>
    proc = kernel.sched.current_proc;
    220c:	80 91 28 01 	lds	r24, 0x0128
    2210:	90 91 29 01 	lds	r25, 0x0129
    2214:	9a 83       	std	Y+2, r25	; 0x02
    2216:	89 83       	std	Y+1, r24	; 0x01
#endif
    if( proc->flags & PROC_FLG_RT )proc->timer = proc->time_quant;
    2218:	e9 81       	ldd	r30, Y+1	; 0x01
    221a:	fa 81       	ldd	r31, Y+2	; 0x02
    221c:	83 85       	ldd	r24, Z+11	; 0x0b
    221e:	88 2f       	mov	r24, r24
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	81 70       	andi	r24, 0x01	; 1
    2224:	90 70       	andi	r25, 0x00	; 0
    2226:	88 23       	and	r24, r24
    2228:	41 f0       	breq	.+16     	; 0x223a <proc_reset_watchdog+0x3c>
    222a:	e9 81       	ldd	r30, Y+1	; 0x01
    222c:	fa 81       	ldd	r31, Y+2	; 0x02
    222e:	86 8d       	ldd	r24, Z+30	; 0x1e
    2230:	97 8d       	ldd	r25, Z+31	; 0x1f
    2232:	e9 81       	ldd	r30, Y+1	; 0x01
    2234:	fa 81       	ldd	r31, Y+2	; 0x02
    2236:	91 a3       	std	Z+33, r25	; 0x21
    2238:	80 a3       	std	Z+32, r24	; 0x20
#ifdef CONFIG_MP
    spin_lock(&proc->lock);
    _exit_crit_sec(current_core);
#else
    exit_crit_sec();
    223a:	0e 94 4d 0a 	call	0x149a	; 0x149a <exit_crit_sec>
#endif
}
    223e:	0f 90       	pop	r0
    2240:	0f 90       	pop	r0
    2242:	cf 91       	pop	r28
    2244:	df 91       	pop	r29
    2246:	08 95       	ret

00002248 <_proc_flag_stop_isr>:

void _proc_flag_stop_isr( flag_t mask )
{
    2248:	df 93       	push	r29
    224a:	cf 93       	push	r28
    224c:	00 d0       	rcall	.+0      	; 0x224e <_proc_flag_stop_isr+0x6>
    224e:	0f 92       	push	r0
    2250:	cd b7       	in	r28, 0x3d	; 61
    2252:	de b7       	in	r29, 0x3e	; 62
    2254:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = current_proc();
    2256:	0e 94 c5 04 	call	0x98a	; 0x98a <current_proc>
    225a:	9a 83       	std	Y+2, r25	; 0x02
    225c:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif //CONFIG_MP
    proc->flags &= mask;
    225e:	e9 81       	ldd	r30, Y+1	; 0x01
    2260:	fa 81       	ldd	r31, Y+2	; 0x02
    2262:	93 85       	ldd	r25, Z+11	; 0x0b
    2264:	8b 81       	ldd	r24, Y+3	; 0x03
    2266:	89 23       	and	r24, r25
    2268:	e9 81       	ldd	r30, Y+1	; 0x01
    226a:	fa 81       	ldd	r31, Y+2	; 0x02
    226c:	83 87       	std	Z+11, r24	; 0x0b
    if(  ( proc->flags & PROC_FLG_PRE_END ) && (!(proc->flags & PROC_FLG_HOLD))  )
    226e:	e9 81       	ldd	r30, Y+1	; 0x01
    2270:	fa 81       	ldd	r31, Y+2	; 0x02
    2272:	83 85       	ldd	r24, Z+11	; 0x0b
    2274:	88 2f       	mov	r24, r24
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	80 72       	andi	r24, 0x20	; 32
    227a:	90 70       	andi	r25, 0x00	; 0
    227c:	00 97       	sbiw	r24, 0x00	; 0
    227e:	a1 f0       	breq	.+40     	; 0x22a8 <_proc_flag_stop_isr+0x60>
    2280:	e9 81       	ldd	r30, Y+1	; 0x01
    2282:	fa 81       	ldd	r31, Y+2	; 0x02
    2284:	83 85       	ldd	r24, Z+11	; 0x0b
    2286:	88 2f       	mov	r24, r24
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	84 70       	andi	r24, 0x04	; 4
    228c:	90 70       	andi	r25, 0x00	; 0
    228e:	00 97       	sbiw	r24, 0x00	; 0
    2290:	59 f4       	brne	.+22     	; 0x22a8 <_proc_flag_stop_isr+0x60>
    {
        proc->flags &= ~PROC_FLG_PRE_END;
    2292:	e9 81       	ldd	r30, Y+1	; 0x01
    2294:	fa 81       	ldd	r31, Y+2	; 0x02
    2296:	83 85       	ldd	r24, Z+11	; 0x0b
    2298:	8f 7d       	andi	r24, 0xDF	; 223
    229a:	e9 81       	ldd	r30, Y+1	; 0x01
    229c:	fa 81       	ldd	r31, Y+2	; 0x02
    229e:	83 87       	std	Z+11, r24	; 0x0b
        _proc_stop( proc );
    22a0:	89 81       	ldd	r24, Y+1	; 0x01
    22a2:	9a 81       	ldd	r25, Y+2	; 0x02
    22a4:	0e 94 b6 10 	call	0x216c	; 0x216c <_proc_stop>
    }
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif //CONFIG_MP
}
    22a8:	0f 90       	pop	r0
    22aa:	0f 90       	pop	r0
    22ac:	0f 90       	pop	r0
    22ae:	cf 91       	pop	r28
    22b0:	df 91       	pop	r29
    22b2:	08 95       	ret

000022b4 <_proc_lres_inc>:
    proc_t * proc
#ifdef CONFIG_USE_HIGHEST_LOCKER
    ,prio_t prio
#endif
)
{
    22b4:	df 93       	push	r29
    22b6:	cf 93       	push	r28
    22b8:	00 d0       	rcall	.+0      	; 0x22ba <_proc_lres_inc+0x6>
    22ba:	0f 92       	push	r0
    22bc:	cd b7       	in	r28, 0x3d	; 61
    22be:	de b7       	in	r29, 0x3e	; 62
    22c0:	9a 83       	std	Y+2, r25	; 0x02
    22c2:	89 83       	std	Y+1, r24	; 0x01
    22c4:	6b 83       	std	Y+3, r22	; 0x03
#ifdef CONFIG_USE_HIGHEST_LOCKER
    if( proc->lres.index == (index_t)0 )proc->flags |= PROC_FLG_HOLD;
    22c6:	e9 81       	ldd	r30, Y+1	; 0x01
    22c8:	fa 81       	ldd	r31, Y+2	; 0x02
    22ca:	85 8d       	ldd	r24, Z+29	; 0x1d
    22cc:	88 23       	and	r24, r24
    22ce:	39 f4       	brne	.+14     	; 0x22de <_proc_lres_inc+0x2a>
    22d0:	e9 81       	ldd	r30, Y+1	; 0x01
    22d2:	fa 81       	ldd	r31, Y+2	; 0x02
    22d4:	83 85       	ldd	r24, Z+11	; 0x0b
    22d6:	84 60       	ori	r24, 0x04	; 4
    22d8:	e9 81       	ldd	r30, Y+1	; 0x01
    22da:	fa 81       	ldd	r31, Y+2	; 0x02
    22dc:	83 87       	std	Z+11, r24	; 0x0b
    pcounter_inc( &proc->lres, prio );
    22de:	89 81       	ldd	r24, Y+1	; 0x01
    22e0:	9a 81       	ldd	r25, Y+2	; 0x02
    22e2:	0d 96       	adiw	r24, 0x0d	; 13
    22e4:	6b 81       	ldd	r22, Y+3	; 0x03
    22e6:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <pcounter_inc>
#else
    if( proc->lres == (count_t)0 )proc->flags |= PROC_FLG_HOLD;
    proc->lres++;
#endif
}
    22ea:	0f 90       	pop	r0
    22ec:	0f 90       	pop	r0
    22ee:	0f 90       	pop	r0
    22f0:	cf 91       	pop	r28
    22f2:	df 91       	pop	r29
    22f4:	08 95       	ret

000022f6 <_proc_lres_dec>:
    proc_t * proc
#ifdef CONFIG_USE_HIGHEST_LOCKER
    ,prio_t prio
#endif
)
{
    22f6:	df 93       	push	r29
    22f8:	cf 93       	push	r28
    22fa:	00 d0       	rcall	.+0      	; 0x22fc <_proc_lres_dec+0x6>
    22fc:	0f 92       	push	r0
    22fe:	cd b7       	in	r28, 0x3d	; 61
    2300:	de b7       	in	r29, 0x3e	; 62
    2302:	9a 83       	std	Y+2, r25	; 0x02
    2304:	89 83       	std	Y+1, r24	; 0x01
    2306:	6b 83       	std	Y+3, r22	; 0x03
#ifdef CONFIG_USE_HIGHEST_LOCKER
    pcounter_dec( &proc->lres, prio );
    2308:	89 81       	ldd	r24, Y+1	; 0x01
    230a:	9a 81       	ldd	r25, Y+2	; 0x02
    230c:	0d 96       	adiw	r24, 0x0d	; 13
    230e:	6b 81       	ldd	r22, Y+3	; 0x03
    2310:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <pcounter_dec>
    if( proc->lres.index == (index_t)0 )proc->flags &= ~PROC_FLG_HOLD;
    2314:	e9 81       	ldd	r30, Y+1	; 0x01
    2316:	fa 81       	ldd	r31, Y+2	; 0x02
    2318:	85 8d       	ldd	r24, Z+29	; 0x1d
    231a:	88 23       	and	r24, r24
    231c:	39 f4       	brne	.+14     	; 0x232c <_proc_lres_dec+0x36>
    231e:	e9 81       	ldd	r30, Y+1	; 0x01
    2320:	fa 81       	ldd	r31, Y+2	; 0x02
    2322:	83 85       	ldd	r24, Z+11	; 0x0b
    2324:	8b 7f       	andi	r24, 0xFB	; 251
    2326:	e9 81       	ldd	r30, Y+1	; 0x01
    2328:	fa 81       	ldd	r31, Y+2	; 0x02
    232a:	83 87       	std	Z+11, r24	; 0x0b
#else
    if( proc->lres!= (count_t)0 )proc->lres--;
    if( proc->lres == (count_t)0 )proc->flags &= ~PROC_FLG_HOLD;
#endif
}
    232c:	0f 90       	pop	r0
    232e:	0f 90       	pop	r0
    2330:	0f 90       	pop	r0
    2332:	cf 91       	pop	r28
    2334:	df 91       	pop	r29
    2336:	08 95       	ret

00002338 <_proc_prio_control_stoped>:
#ifdef CONFIG_USE_HIGHEST_LOCKER
// Будет использоваться в mutex-ах и т.п., процесс должен сам вызывать эту функцию, при этом он должен быть вырезан из списка выполняющихся.
void _proc_prio_control_stoped( proc_t * proc )
{
    2338:	df 93       	push	r29
    233a:	cf 93       	push	r28
    233c:	cd b7       	in	r28, 0x3d	; 61
    233e:	de b7       	in	r29, 0x3e	; 62
    2340:	27 97       	sbiw	r28, 0x07	; 7
    2342:	0f b6       	in	r0, 0x3f	; 63
    2344:	f8 94       	cli
    2346:	de bf       	out	0x3e, r29	; 62
    2348:	0f be       	out	0x3f, r0	; 63
    234a:	cd bf       	out	0x3d, r28	; 61
    234c:	9b 83       	std	Y+3, r25	; 0x03
    234e:	8a 83       	std	Y+2, r24	; 0x02
    if(proc->lres.index != (index_t)0)
    2350:	ea 81       	ldd	r30, Y+2	; 0x02
    2352:	fb 81       	ldd	r31, Y+3	; 0x03
    2354:	85 8d       	ldd	r24, Z+29	; 0x1d
    2356:	88 23       	and	r24, r24
    2358:	e9 f0       	breq	.+58     	; 0x2394 <_proc_prio_control_stoped+0x5c>
    {
        prio_t locker_prio = index_search( proc->lres.index );
    235a:	ea 81       	ldd	r30, Y+2	; 0x02
    235c:	fb 81       	ldd	r31, Y+3	; 0x03
    235e:	85 8d       	ldd	r24, Z+29	; 0x1d
    2360:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <index_search>
    2364:	89 83       	std	Y+1, r24	; 0x01
        ((gitem_t *)proc)->group->prio = ( locker_prio < proc->base_prio )?locker_prio:proc->base_prio;
    2366:	ea 81       	ldd	r30, Y+2	; 0x02
    2368:	fb 81       	ldd	r31, Y+3	; 0x03
    236a:	84 81       	ldd	r24, Z+4	; 0x04
    236c:	95 81       	ldd	r25, Z+5	; 0x05
    236e:	9e 83       	std	Y+6, r25	; 0x06
    2370:	8d 83       	std	Y+5, r24	; 0x05
    2372:	ea 81       	ldd	r30, Y+2	; 0x02
    2374:	fb 81       	ldd	r31, Y+3	; 0x03
    2376:	84 85       	ldd	r24, Z+12	; 0x0c
    2378:	99 81       	ldd	r25, Y+1	; 0x01
    237a:	9f 83       	std	Y+7, r25	; 0x07
    237c:	8c 83       	std	Y+4, r24	; 0x04
    237e:	ec 81       	ldd	r30, Y+4	; 0x04
    2380:	ff 81       	ldd	r31, Y+7	; 0x07
    2382:	fe 17       	cp	r31, r30
    2384:	10 f4       	brcc	.+4      	; 0x238a <_proc_prio_control_stoped+0x52>
    2386:	8f 81       	ldd	r24, Y+7	; 0x07
    2388:	8c 83       	std	Y+4, r24	; 0x04
    238a:	8c 81       	ldd	r24, Y+4	; 0x04
    238c:	ed 81       	ldd	r30, Y+5	; 0x05
    238e:	fe 81       	ldd	r31, Y+6	; 0x06
    2390:	82 83       	std	Z+2, r24	; 0x02
    2392:	0a c0       	rjmp	.+20     	; 0x23a8 <_proc_prio_control_stoped+0x70>
    }
    else
    {
        ((gitem_t *)proc)->group->prio = proc->base_prio;
    2394:	ea 81       	ldd	r30, Y+2	; 0x02
    2396:	fb 81       	ldd	r31, Y+3	; 0x03
    2398:	a4 81       	ldd	r26, Z+4	; 0x04
    239a:	b5 81       	ldd	r27, Z+5	; 0x05
    239c:	ea 81       	ldd	r30, Y+2	; 0x02
    239e:	fb 81       	ldd	r31, Y+3	; 0x03
    23a0:	84 85       	ldd	r24, Z+12	; 0x0c
    23a2:	12 96       	adiw	r26, 0x02	; 2
    23a4:	8c 93       	st	X, r24
    23a6:	12 97       	sbiw	r26, 0x02	; 2
    }
}
    23a8:	27 96       	adiw	r28, 0x07	; 7
    23aa:	0f b6       	in	r0, 0x3f	; 63
    23ac:	f8 94       	cli
    23ae:	de bf       	out	0x3e, r29	; 62
    23b0:	0f be       	out	0x3f, r0	; 63
    23b2:	cd bf       	out	0x3d, r28	; 61
    23b4:	cf 91       	pop	r28
    23b6:	df 91       	pop	r29
    23b8:	08 95       	ret

000023ba <_proc_prio_control_running>:
void _proc_prio_control_running( proc_t * proc )
{
    23ba:	df 93       	push	r29
    23bc:	cf 93       	push	r28
    23be:	00 d0       	rcall	.+0      	; 0x23c0 <_proc_prio_control_running+0x6>
    23c0:	00 d0       	rcall	.+0      	; 0x23c2 <_proc_prio_control_running+0x8>
    23c2:	00 d0       	rcall	.+0      	; 0x23c4 <_proc_prio_control_running+0xa>
    23c4:	cd b7       	in	r28, 0x3d	; 61
    23c6:	de b7       	in	r29, 0x3e	; 62
    23c8:	9c 83       	std	Y+4, r25	; 0x04
    23ca:	8b 83       	std	Y+3, r24	; 0x03
    prio_t new_prio;
    if(proc->lres.index != (index_t)0)
    23cc:	eb 81       	ldd	r30, Y+3	; 0x03
    23ce:	fc 81       	ldd	r31, Y+4	; 0x04
    23d0:	85 8d       	ldd	r24, Z+29	; 0x1d
    23d2:	88 23       	and	r24, r24
    23d4:	a9 f0       	breq	.+42     	; 0x2400 <_proc_prio_control_running+0x46>
    {
        prio_t locker_prio = index_search( proc->lres.index );
    23d6:	eb 81       	ldd	r30, Y+3	; 0x03
    23d8:	fc 81       	ldd	r31, Y+4	; 0x04
    23da:	85 8d       	ldd	r24, Z+29	; 0x1d
    23dc:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <index_search>
    23e0:	89 83       	std	Y+1, r24	; 0x01
        new_prio = ( locker_prio < proc->base_prio )?locker_prio:proc->base_prio;
    23e2:	eb 81       	ldd	r30, Y+3	; 0x03
    23e4:	fc 81       	ldd	r31, Y+4	; 0x04
    23e6:	84 85       	ldd	r24, Z+12	; 0x0c
    23e8:	99 81       	ldd	r25, Y+1	; 0x01
    23ea:	9e 83       	std	Y+6, r25	; 0x06
    23ec:	8d 83       	std	Y+5, r24	; 0x05
    23ee:	8d 81       	ldd	r24, Y+5	; 0x05
    23f0:	9e 81       	ldd	r25, Y+6	; 0x06
    23f2:	98 17       	cp	r25, r24
    23f4:	10 f4       	brcc	.+4      	; 0x23fa <_proc_prio_control_running+0x40>
    23f6:	8e 81       	ldd	r24, Y+6	; 0x06
    23f8:	8d 83       	std	Y+5, r24	; 0x05
    23fa:	9d 81       	ldd	r25, Y+5	; 0x05
    23fc:	9a 83       	std	Y+2, r25	; 0x02
    23fe:	04 c0       	rjmp	.+8      	; 0x2408 <_proc_prio_control_running+0x4e>
    }
    else
    {
        new_prio = proc->base_prio;
    2400:	eb 81       	ldd	r30, Y+3	; 0x03
    2402:	fc 81       	ldd	r31, Y+4	; 0x04
    2404:	84 85       	ldd	r24, Z+12	; 0x0c
    2406:	8a 83       	std	Y+2, r24	; 0x02
    }
    if(((gitem_t *)proc)->group->prio != new_prio)
    2408:	eb 81       	ldd	r30, Y+3	; 0x03
    240a:	fc 81       	ldd	r31, Y+4	; 0x04
    240c:	04 80       	ldd	r0, Z+4	; 0x04
    240e:	f5 81       	ldd	r31, Z+5	; 0x05
    2410:	e0 2d       	mov	r30, r0
    2412:	92 81       	ldd	r25, Z+2	; 0x02
    2414:	8a 81       	ldd	r24, Y+2	; 0x02
    2416:	98 17       	cp	r25, r24
    2418:	b1 f0       	breq	.+44     	; 0x2446 <_proc_prio_control_running+0x8c>
    {
        _proc_stop_( proc );
    241a:	8b 81       	ldd	r24, Y+3	; 0x03
    241c:	9c 81       	ldd	r25, Y+4	; 0x04
    241e:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <gitem_cut>
        ((gitem_t *)proc)->group->prio = new_prio;
    2422:	eb 81       	ldd	r30, Y+3	; 0x03
    2424:	fc 81       	ldd	r31, Y+4	; 0x04
    2426:	04 80       	ldd	r0, Z+4	; 0x04
    2428:	f5 81       	ldd	r31, Z+5	; 0x05
    242a:	e0 2d       	mov	r30, r0
    242c:	8a 81       	ldd	r24, Y+2	; 0x02
    242e:	82 83       	std	Z+2, r24	; 0x02
#ifdef CONFIG_MP
        spin_lock( &kernel.stat_lock );
        stat_inc( proc, (stat_t *)kernel.stat+proc->core_id );
        spin_unlock( &kernel.stat_lock );
#endif
        _proc_run_( proc );
    2430:	8b 81       	ldd	r24, Y+3	; 0x03
    2432:	9c 81       	ldd	r25, Y+4	; 0x04
    2434:	20 91 2a 01 	lds	r18, 0x012A
    2438:	30 91 2b 01 	lds	r19, 0x012B
    243c:	b9 01       	movw	r22, r18
    243e:	0e 94 91 0a 	call	0x1522	; 0x1522 <gitem_insert>
#ifdef CONFIG_MP
        resched(proc->core_id);
#else
        resched();
    2442:	0e 94 ef 04 	call	0x9de	; 0x9de <resched>
#endif
    }
}
    2446:	26 96       	adiw	r28, 0x06	; 6
    2448:	0f b6       	in	r0, 0x3f	; 63
    244a:	f8 94       	cli
    244c:	de bf       	out	0x3e, r29	; 62
    244e:	0f be       	out	0x3f, r0	; 63
    2450:	cd bf       	out	0x3d, r28	; 61
    2452:	cf 91       	pop	r28
    2454:	df 91       	pop	r29
    2456:	08 95       	ret

00002458 <sched_init>:
*****************************************************************************************/
#include "../include/bugurt.h"
///========================================================================================
// Инициация
void sched_init(sched_t * sched, proc_t * idle)
{
    2458:	df 93       	push	r29
    245a:	cf 93       	push	r28
    245c:	00 d0       	rcall	.+0      	; 0x245e <sched_init+0x6>
    245e:	00 d0       	rcall	.+0      	; 0x2460 <sched_init+0x8>
    2460:	cd b7       	in	r28, 0x3d	; 61
    2462:	de b7       	in	r29, 0x3e	; 62
    2464:	9a 83       	std	Y+2, r25	; 0x02
    2466:	89 83       	std	Y+1, r24	; 0x01
    2468:	7c 83       	std	Y+4, r23	; 0x04
    246a:	6b 83       	std	Y+3, r22	; 0x03
#ifdef CONFIG_MP
    lock_t * sched_lock = &sched->lock;
    spin_init( sched_lock );
    spin_lock( sched_lock );
#endif // CONFIG_MP
    sched->ready = (xlist_t *)sched->plst;
    246c:	89 81       	ldd	r24, Y+1	; 0x01
    246e:	9a 81       	ldd	r25, Y+2	; 0x02
    2470:	06 96       	adiw	r24, 0x06	; 6
    2472:	e9 81       	ldd	r30, Y+1	; 0x01
    2474:	fa 81       	ldd	r31, Y+2	; 0x02
    2476:	93 83       	std	Z+3, r25	; 0x03
    2478:	82 83       	std	Z+2, r24	; 0x02
    xlist_init( sched->ready );
    247a:	e9 81       	ldd	r30, Y+1	; 0x01
    247c:	fa 81       	ldd	r31, Y+2	; 0x02
    247e:	82 81       	ldd	r24, Z+2	; 0x02
    2480:	93 81       	ldd	r25, Z+3	; 0x03
    2482:	0e 94 e5 14 	call	0x29ca	; 0x29ca <xlist_init>
    sched->expired = (xlist_t *)sched->plst + 1;
    2486:	89 81       	ldd	r24, Y+1	; 0x01
    2488:	9a 81       	ldd	r25, Y+2	; 0x02
    248a:	47 96       	adiw	r24, 0x17	; 23
    248c:	e9 81       	ldd	r30, Y+1	; 0x01
    248e:	fa 81       	ldd	r31, Y+2	; 0x02
    2490:	95 83       	std	Z+5, r25	; 0x05
    2492:	84 83       	std	Z+4, r24	; 0x04
    xlist_init( sched->expired );
    2494:	e9 81       	ldd	r30, Y+1	; 0x01
    2496:	fa 81       	ldd	r31, Y+2	; 0x02
    2498:	84 81       	ldd	r24, Z+4	; 0x04
    249a:	95 81       	ldd	r25, Z+5	; 0x05
    249c:	0e 94 e5 14 	call	0x29ca	; 0x29ca <xlist_init>
    gitem_insert( (gitem_t *)idle, sched->ready );
    24a0:	8b 81       	ldd	r24, Y+3	; 0x03
    24a2:	9c 81       	ldd	r25, Y+4	; 0x04
    24a4:	e9 81       	ldd	r30, Y+1	; 0x01
    24a6:	fa 81       	ldd	r31, Y+2	; 0x02
    24a8:	22 81       	ldd	r18, Z+2	; 0x02
    24aa:	33 81       	ldd	r19, Z+3	; 0x03
    24ac:	b9 01       	movw	r22, r18
    24ae:	0e 94 91 0a 	call	0x1522	; 0x1522 <gitem_insert>
    sched->current_proc = idle;
    24b2:	e9 81       	ldd	r30, Y+1	; 0x01
    24b4:	fa 81       	ldd	r31, Y+2	; 0x02
    24b6:	8b 81       	ldd	r24, Y+3	; 0x03
    24b8:	9c 81       	ldd	r25, Y+4	; 0x04
    24ba:	91 83       	std	Z+1, r25	; 0x01
    24bc:	80 83       	st	Z, r24
    sched->nested_crit_sec = (count_t)0;//вообще это выполняется при запрещенных прерываниях, но не известно, на этом ли процессоре
    24be:	e9 81       	ldd	r30, Y+1	; 0x01
    24c0:	fa 81       	ldd	r31, Y+2	; 0x02
    24c2:	11 a6       	std	Z+41, r1	; 0x29
    24c4:	10 a6       	std	Z+40, r1	; 0x28
#ifdef CONFIG_MP
    spin_unlock( sched_lock );
    stat_inc( idle, (stat_t *)kernel.stat + idle->core_id );
#endif // CONFIG_MP
}
    24c6:	0f 90       	pop	r0
    24c8:	0f 90       	pop	r0
    24ca:	0f 90       	pop	r0
    24cc:	0f 90       	pop	r0
    24ce:	cf 91       	pop	r28
    24d0:	df 91       	pop	r29
    24d2:	08 95       	ret

000024d4 <_sched_list_switch>:
static void _sched_list_switch( sched_t * sched )
{
    24d4:	df 93       	push	r29
    24d6:	cf 93       	push	r28
    24d8:	00 d0       	rcall	.+0      	; 0x24da <_sched_list_switch+0x6>
    24da:	00 d0       	rcall	.+0      	; 0x24dc <_sched_list_switch+0x8>
    24dc:	cd b7       	in	r28, 0x3d	; 61
    24de:	de b7       	in	r29, 0x3e	; 62
    24e0:	9c 83       	std	Y+4, r25	; 0x04
    24e2:	8b 83       	std	Y+3, r24	; 0x03
    // Список ready опустел, переключаем списки
    if( sched->ready->index == (index_t)0 )
    24e4:	eb 81       	ldd	r30, Y+3	; 0x03
    24e6:	fc 81       	ldd	r31, Y+4	; 0x04
    24e8:	02 80       	ldd	r0, Z+2	; 0x02
    24ea:	f3 81       	ldd	r31, Z+3	; 0x03
    24ec:	e0 2d       	mov	r30, r0
    24ee:	80 89       	ldd	r24, Z+16	; 0x10
    24f0:	88 23       	and	r24, r24
    24f2:	a1 f4       	brne	.+40     	; 0x251c <_sched_list_switch+0x48>
    {
        xlist_t * buf = sched->ready;
    24f4:	eb 81       	ldd	r30, Y+3	; 0x03
    24f6:	fc 81       	ldd	r31, Y+4	; 0x04
    24f8:	82 81       	ldd	r24, Z+2	; 0x02
    24fa:	93 81       	ldd	r25, Z+3	; 0x03
    24fc:	9a 83       	std	Y+2, r25	; 0x02
    24fe:	89 83       	std	Y+1, r24	; 0x01
        sched->ready = sched->expired;
    2500:	eb 81       	ldd	r30, Y+3	; 0x03
    2502:	fc 81       	ldd	r31, Y+4	; 0x04
    2504:	84 81       	ldd	r24, Z+4	; 0x04
    2506:	95 81       	ldd	r25, Z+5	; 0x05
    2508:	eb 81       	ldd	r30, Y+3	; 0x03
    250a:	fc 81       	ldd	r31, Y+4	; 0x04
    250c:	93 83       	std	Z+3, r25	; 0x03
    250e:	82 83       	std	Z+2, r24	; 0x02
        sched->expired = buf;
    2510:	eb 81       	ldd	r30, Y+3	; 0x03
    2512:	fc 81       	ldd	r31, Y+4	; 0x04
    2514:	89 81       	ldd	r24, Y+1	; 0x01
    2516:	9a 81       	ldd	r25, Y+2	; 0x02
    2518:	95 83       	std	Z+5, r25	; 0x05
    251a:	84 83       	std	Z+4, r24	; 0x04
    }
}
    251c:	0f 90       	pop	r0
    251e:	0f 90       	pop	r0
    2520:	0f 90       	pop	r0
    2522:	0f 90       	pop	r0
    2524:	cf 91       	pop	r28
    2526:	df 91       	pop	r29
    2528:	08 95       	ret

0000252a <sched_schedule>:
                    sched_t * sched
#else
                    void
#endif // CONFIG_MP
                    )
{
    252a:	df 93       	push	r29
    252c:	cf 93       	push	r28
    252e:	00 d0       	rcall	.+0      	; 0x2530 <sched_schedule+0x6>
    2530:	00 d0       	rcall	.+0      	; 0x2532 <sched_schedule+0x8>
    2532:	0f 92       	push	r0
    2534:	cd b7       	in	r28, 0x3d	; 61
    2536:	de b7       	in	r29, 0x3e	; 62
#ifndef CONFIG_MP
    sched_t * sched = (sched_t *)&kernel.sched;
    2538:	88 e2       	ldi	r24, 0x28	; 40
    253a:	91 e0       	ldi	r25, 0x01	; 1
    253c:	9d 83       	std	Y+5, r25	; 0x05
    253e:	8c 83       	std	Y+4, r24	; 0x04
#endif // nCONFIG_MP
    // Меняем только с локального процессора, блокировку sched->lock можно не захватывать!
    proc_t * current_proc = sched->current_proc;
    2540:	ec 81       	ldd	r30, Y+4	; 0x04
    2542:	fd 81       	ldd	r31, Y+5	; 0x05
    2544:	80 81       	ld	r24, Z
    2546:	91 81       	ldd	r25, Z+1	; 0x01
    2548:	9b 83       	std	Y+3, r25	; 0x03
    254a:	8a 83       	std	Y+2, r24	; 0x02
#ifdef CONFIG_MP
    // А вот эту блокировку обязательно надо захватить!
    spin_lock( &current_proc->lock );
#endif // CONFIG_MP
    // Хук "сохранение контекста"
    if( current_proc->sv_hook )current_proc->sv_hook( current_proc->arg );
    254c:	ea 81       	ldd	r30, Y+2	; 0x02
    254e:	fb 81       	ldd	r31, Y+3	; 0x03
    2550:	84 a1       	ldd	r24, Z+36	; 0x24
    2552:	95 a1       	ldd	r25, Z+37	; 0x25
    2554:	00 97       	sbiw	r24, 0x00	; 0
    2556:	51 f0       	breq	.+20     	; 0x256c <sched_schedule+0x42>
    2558:	ea 81       	ldd	r30, Y+2	; 0x02
    255a:	fb 81       	ldd	r31, Y+3	; 0x03
    255c:	24 a1       	ldd	r18, Z+36	; 0x24
    255e:	35 a1       	ldd	r19, Z+37	; 0x25
    2560:	ea 81       	ldd	r30, Y+2	; 0x02
    2562:	fb 81       	ldd	r31, Y+3	; 0x03
    2564:	80 a5       	ldd	r24, Z+40	; 0x28
    2566:	91 a5       	ldd	r25, Z+41	; 0x29
    2568:	f9 01       	movw	r30, r18
    256a:	09 95       	icall
    // Проверяем, что процесс находится в списке ready
    if( (xlist_t *)((gitem_t *)current_proc)->group->link == sched->ready )
    256c:	ea 81       	ldd	r30, Y+2	; 0x02
    256e:	fb 81       	ldd	r31, Y+3	; 0x03
    2570:	04 80       	ldd	r0, Z+4	; 0x04
    2572:	f5 81       	ldd	r31, Z+5	; 0x05
    2574:	e0 2d       	mov	r30, r0
    2576:	80 81       	ld	r24, Z
    2578:	91 81       	ldd	r25, Z+1	; 0x01
    257a:	9c 01       	movw	r18, r24
    257c:	ec 81       	ldd	r30, Y+4	; 0x04
    257e:	fd 81       	ldd	r31, Y+5	; 0x05
    2580:	82 81       	ldd	r24, Z+2	; 0x02
    2582:	93 81       	ldd	r25, Z+3	; 0x03
    2584:	28 17       	cp	r18, r24
    2586:	39 07       	cpc	r19, r25
    2588:	09 f0       	breq	.+2      	; 0x258c <sched_schedule+0x62>
    258a:	4d c0       	rjmp	.+154    	; 0x2626 <sched_schedule+0xfc>
    {
        // Переключаем cписок на следующий за текущим процесс
#ifdef CONFIG_MP
        spin_lock( &sched->lock );
#endif // CONFIG_MP
        xlist_switch( sched->ready, ((gitem_t *)current_proc)->group->prio );
    258c:	ec 81       	ldd	r30, Y+4	; 0x04
    258e:	fd 81       	ldd	r31, Y+5	; 0x05
    2590:	82 81       	ldd	r24, Z+2	; 0x02
    2592:	93 81       	ldd	r25, Z+3	; 0x03
    2594:	ea 81       	ldd	r30, Y+2	; 0x02
    2596:	fb 81       	ldd	r31, Y+3	; 0x03
    2598:	04 80       	ldd	r0, Z+4	; 0x04
    259a:	f5 81       	ldd	r31, Z+5	; 0x05
    259c:	e0 2d       	mov	r30, r0
    259e:	22 81       	ldd	r18, Z+2	; 0x02
    25a0:	62 2f       	mov	r22, r18
    25a2:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <xlist_switch>
#ifdef CONFIG_MP
        spin_unlock( &sched->lock );
#endif // CONFIG_MP
        //Проверяем, не истек ли квант времени процесса
        if( current_proc->timer > (timer_t)1 )current_proc->timer--;// Не истек, уменьшаем таймер
    25a6:	ea 81       	ldd	r30, Y+2	; 0x02
    25a8:	fb 81       	ldd	r31, Y+3	; 0x03
    25aa:	80 a1       	ldd	r24, Z+32	; 0x20
    25ac:	91 a1       	ldd	r25, Z+33	; 0x21
    25ae:	82 30       	cpi	r24, 0x02	; 2
    25b0:	91 05       	cpc	r25, r1
    25b2:	50 f0       	brcs	.+20     	; 0x25c8 <sched_schedule+0x9e>
    25b4:	ea 81       	ldd	r30, Y+2	; 0x02
    25b6:	fb 81       	ldd	r31, Y+3	; 0x03
    25b8:	80 a1       	ldd	r24, Z+32	; 0x20
    25ba:	91 a1       	ldd	r25, Z+33	; 0x21
    25bc:	01 97       	sbiw	r24, 0x01	; 1
    25be:	ea 81       	ldd	r30, Y+2	; 0x02
    25c0:	fb 81       	ldd	r31, Y+3	; 0x03
    25c2:	91 a3       	std	Z+33, r25	; 0x21
    25c4:	80 a3       	std	Z+32, r24	; 0x20
    25c6:	2f c0       	rjmp	.+94     	; 0x2626 <sched_schedule+0xfc>
        {
            // Истек, вырезаем процесс из списка
#ifdef CONFIG_MP
            spin_lock( &sched->lock );
#endif // CONFIG_MP
            gitem_fast_cut( (gitem_t *)current_proc );
    25c8:	8a 81       	ldd	r24, Y+2	; 0x02
    25ca:	9b 81       	ldd	r25, Y+3	; 0x03
    25cc:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <gitem_fast_cut>
            // Обновили статистику после удаления процесса из списка ready
            stat_dec( current_proc, (stat_t *)kernel.stat + current_proc->core_id );
#endif // CONFIG_USE_ALB
#endif // CONFIG_MP
            // А что за процесс собственно?
            flag_t flags = current_proc->flags;
    25d0:	ea 81       	ldd	r30, Y+2	; 0x02
    25d2:	fb 81       	ldd	r31, Y+3	; 0x03
    25d4:	83 85       	ldd	r24, Z+11	; 0x0b
    25d6:	89 83       	std	Y+1, r24	; 0x01
            if(
                (!(flags & PROC_FLG_RT))
    25d8:	89 81       	ldd	r24, Y+1	; 0x01
    25da:	88 2f       	mov	r24, r24
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	81 70       	andi	r24, 0x01	; 1
    25e0:	90 70       	andi	r25, 0x00	; 0
            stat_dec( current_proc, (stat_t *)kernel.stat + current_proc->core_id );
#endif // CONFIG_USE_ALB
#endif // CONFIG_MP
            // А что за процесс собственно?
            flag_t flags = current_proc->flags;
            if(
    25e2:	00 97       	sbiw	r24, 0x00	; 0
    25e4:	91 f4       	brne	.+36     	; 0x260a <sched_schedule+0xe0>
                ||(flags & PROC_FLG_HOLD)
#endif // CONFIG_HARD_RT
            )
            {
                //Процесс общего назначения, либо он удерживает общий ресурс, сбрасываем таймер и переносим в очередь expired
                current_proc->timer = current_proc->time_quant;
    25e6:	ea 81       	ldd	r30, Y+2	; 0x02
    25e8:	fb 81       	ldd	r31, Y+3	; 0x03
    25ea:	86 8d       	ldd	r24, Z+30	; 0x1e
    25ec:	97 8d       	ldd	r25, Z+31	; 0x1f
    25ee:	ea 81       	ldd	r30, Y+2	; 0x02
    25f0:	fb 81       	ldd	r31, Y+3	; 0x03
    25f2:	91 a3       	std	Z+33, r25	; 0x21
    25f4:	80 a3       	std	Z+32, r24	; 0x20
#else // CONFIG_MP CONFIG_USE_ALB
                // Тупо переносим процесс в список expired
#ifdef CONFIG_MP
                spin_lock( &sched->lock );
#endif // CONFIG_MP
                gitem_insert( (gitem_t *)current_proc, sched->expired );
    25f6:	8a 81       	ldd	r24, Y+2	; 0x02
    25f8:	9b 81       	ldd	r25, Y+3	; 0x03
    25fa:	ec 81       	ldd	r30, Y+4	; 0x04
    25fc:	fd 81       	ldd	r31, Y+5	; 0x05
    25fe:	24 81       	ldd	r18, Z+4	; 0x04
    2600:	35 81       	ldd	r19, Z+5	; 0x05
    2602:	b9 01       	movw	r22, r18
    2604:	0e 94 91 0a 	call	0x1522	; 0x1522 <gitem_insert>
    2608:	0e c0       	rjmp	.+28     	; 0x2626 <sched_schedule+0xfc>
                spin_lock( &kernel.stat_lock );
                stat_dec( current_proc, (stat_t *)kernel.stat + current_proc->core_id );
#endif // nCONFIG_USE_ALB
                spin_unlock( &kernel.stat_lock );
#endif // CONFIG_MP
                ((gitem_t *)current_proc)->group->link = (void *)0;// Просто вырезали из списка, как в gitem_cut
    260a:	ea 81       	ldd	r30, Y+2	; 0x02
    260c:	fb 81       	ldd	r31, Y+3	; 0x03
    260e:	04 80       	ldd	r0, Z+4	; 0x04
    2610:	f5 81       	ldd	r31, Z+5	; 0x05
    2612:	e0 2d       	mov	r30, r0
    2614:	11 82       	std	Z+1, r1	; 0x01
    2616:	10 82       	st	Z, r1
                current_proc->flags &= ~PROC_FLG_RUN;
    2618:	ea 81       	ldd	r30, Y+2	; 0x02
    261a:	fb 81       	ldd	r31, Y+3	; 0x03
    261c:	83 85       	ldd	r24, Z+11	; 0x0b
    261e:	8d 7f       	andi	r24, 0xFD	; 253
    2620:	ea 81       	ldd	r30, Y+2	; 0x02
    2622:	fb 81       	ldd	r31, Y+3	; 0x03
    2624:	83 87       	std	Z+11, r24	; 0x0b
#ifdef CONFIG_MP
    //Текущий процесс более не нужен, освобождаем его блокировку
    spin_unlock( &current_proc->lock );
    spin_lock( &sched->lock );
#endif // CONFIG_MP
    _sched_list_switch( sched );
    2626:	8c 81       	ldd	r24, Y+4	; 0x04
    2628:	9d 81       	ldd	r25, Y+5	; 0x05
    262a:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <_sched_list_switch>
    // Изменять указатель будем при захваченной блокировке,
    // чтобы процессы на других процессорах не прочитали неизвестно что.
    current_proc = (proc_t *)xlist_head( sched->ready ); // Вытесняющая многозадачность же!
    262e:	ec 81       	ldd	r30, Y+4	; 0x04
    2630:	fd 81       	ldd	r31, Y+5	; 0x05
    2632:	82 81       	ldd	r24, Z+2	; 0x02
    2634:	93 81       	ldd	r25, Z+3	; 0x03
    2636:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <xlist_head>
    263a:	9b 83       	std	Y+3, r25	; 0x03
    263c:	8a 83       	std	Y+2, r24	; 0x02
    sched->current_proc = current_proc;
    263e:	ec 81       	ldd	r30, Y+4	; 0x04
    2640:	fd 81       	ldd	r31, Y+5	; 0x05
    2642:	8a 81       	ldd	r24, Y+2	; 0x02
    2644:	9b 81       	ldd	r25, Y+3	; 0x03
    2646:	91 83       	std	Z+1, r25	; 0x01
    2648:	80 83       	st	Z, r24
#ifdef CONFIG_MP
    spin_unlock( &sched->lock );
    spin_lock( &current_proc->lock );
#endif // CONFIG_MP
    //Хук "восстановление контекста"
    if( current_proc->rs_hook )current_proc->rs_hook( current_proc->arg );
    264a:	ea 81       	ldd	r30, Y+2	; 0x02
    264c:	fb 81       	ldd	r31, Y+3	; 0x03
    264e:	86 a1       	ldd	r24, Z+38	; 0x26
    2650:	97 a1       	ldd	r25, Z+39	; 0x27
    2652:	00 97       	sbiw	r24, 0x00	; 0
    2654:	51 f0       	breq	.+20     	; 0x266a <sched_schedule+0x140>
    2656:	ea 81       	ldd	r30, Y+2	; 0x02
    2658:	fb 81       	ldd	r31, Y+3	; 0x03
    265a:	26 a1       	ldd	r18, Z+38	; 0x26
    265c:	37 a1       	ldd	r19, Z+39	; 0x27
    265e:	ea 81       	ldd	r30, Y+2	; 0x02
    2660:	fb 81       	ldd	r31, Y+3	; 0x03
    2662:	80 a5       	ldd	r24, Z+40	; 0x28
    2664:	91 a5       	ldd	r25, Z+41	; 0x29
    2666:	f9 01       	movw	r30, r18
    2668:	09 95       	icall
#ifdef CONFIG_MP
    spin_unlock( &current_proc->lock );
#endif // CONFIG_MP
}
    266a:	0f 90       	pop	r0
    266c:	0f 90       	pop	r0
    266e:	0f 90       	pop	r0
    2670:	0f 90       	pop	r0
    2672:	0f 90       	pop	r0
    2674:	cf 91       	pop	r28
    2676:	df 91       	pop	r29
    2678:	08 95       	ret

0000267a <sched_reschedule>:
                        sched_t * sched
#else
                        void
#endif // CONFIG_MP
                       )
{
    267a:	df 93       	push	r29
    267c:	cf 93       	push	r28
    267e:	00 d0       	rcall	.+0      	; 0x2680 <sched_reschedule+0x6>
    2680:	00 d0       	rcall	.+0      	; 0x2682 <sched_reschedule+0x8>
    2682:	cd b7       	in	r28, 0x3d	; 61
    2684:	de b7       	in	r29, 0x3e	; 62
#ifndef CONFIG_MP
    sched_t * sched = (sched_t *)&kernel.sched;
    2686:	88 e2       	ldi	r24, 0x28	; 40
    2688:	91 e0       	ldi	r25, 0x01	; 1
    268a:	9c 83       	std	Y+4, r25	; 0x04
    268c:	8b 83       	std	Y+3, r24	; 0x03
#endif // nCONFIG_MP
    // Меняем только с локального процессора, блокировку sched->lock можно не захватывать!
    proc_t * current_proc = sched->current_proc;
    268e:	eb 81       	ldd	r30, Y+3	; 0x03
    2690:	fc 81       	ldd	r31, Y+4	; 0x04
    2692:	80 81       	ld	r24, Z
    2694:	91 81       	ldd	r25, Z+1	; 0x01
    2696:	9a 83       	std	Y+2, r25	; 0x02
    2698:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    // А вот эту блокировку обязательно надо захватить!
    spin_lock( &current_proc->lock );
#endif // CONFIG_MP
    // Хук "сохранение контекста"
    if( current_proc->sv_hook )current_proc->sv_hook( current_proc->arg );
    269a:	e9 81       	ldd	r30, Y+1	; 0x01
    269c:	fa 81       	ldd	r31, Y+2	; 0x02
    269e:	84 a1       	ldd	r24, Z+36	; 0x24
    26a0:	95 a1       	ldd	r25, Z+37	; 0x25
    26a2:	00 97       	sbiw	r24, 0x00	; 0
    26a4:	51 f0       	breq	.+20     	; 0x26ba <sched_reschedule+0x40>
    26a6:	e9 81       	ldd	r30, Y+1	; 0x01
    26a8:	fa 81       	ldd	r31, Y+2	; 0x02
    26aa:	24 a1       	ldd	r18, Z+36	; 0x24
    26ac:	35 a1       	ldd	r19, Z+37	; 0x25
    26ae:	e9 81       	ldd	r30, Y+1	; 0x01
    26b0:	fa 81       	ldd	r31, Y+2	; 0x02
    26b2:	80 a5       	ldd	r24, Z+40	; 0x28
    26b4:	91 a5       	ldd	r25, Z+41	; 0x29
    26b6:	f9 01       	movw	r30, r18
    26b8:	09 95       	icall
#ifdef CONFIG_MP
    spin_unlock( &current_proc->lock );
    spin_lock( &sched->lock );
#endif // CONFIG_MP
    _sched_list_switch( sched );
    26ba:	8b 81       	ldd	r24, Y+3	; 0x03
    26bc:	9c 81       	ldd	r25, Y+4	; 0x04
    26be:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <_sched_list_switch>
    current_proc = (proc_t *)xlist_head( sched->ready ); // Вытесняющая многозадачность же!
    26c2:	eb 81       	ldd	r30, Y+3	; 0x03
    26c4:	fc 81       	ldd	r31, Y+4	; 0x04
    26c6:	82 81       	ldd	r24, Z+2	; 0x02
    26c8:	93 81       	ldd	r25, Z+3	; 0x03
    26ca:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <xlist_head>
    26ce:	9a 83       	std	Y+2, r25	; 0x02
    26d0:	89 83       	std	Y+1, r24	; 0x01
    sched->current_proc = current_proc;
    26d2:	eb 81       	ldd	r30, Y+3	; 0x03
    26d4:	fc 81       	ldd	r31, Y+4	; 0x04
    26d6:	89 81       	ldd	r24, Y+1	; 0x01
    26d8:	9a 81       	ldd	r25, Y+2	; 0x02
    26da:	91 83       	std	Z+1, r25	; 0x01
    26dc:	80 83       	st	Z, r24

#ifdef CONFIG_MP
    spin_lock(&current_proc->lock);
#endif // CONFIG_MP
    //Хук "восстановление контекста"
    if( current_proc->rs_hook )current_proc->rs_hook( current_proc->arg );
    26de:	e9 81       	ldd	r30, Y+1	; 0x01
    26e0:	fa 81       	ldd	r31, Y+2	; 0x02
    26e2:	86 a1       	ldd	r24, Z+38	; 0x26
    26e4:	97 a1       	ldd	r25, Z+39	; 0x27
    26e6:	00 97       	sbiw	r24, 0x00	; 0
    26e8:	51 f0       	breq	.+20     	; 0x26fe <sched_reschedule+0x84>
    26ea:	e9 81       	ldd	r30, Y+1	; 0x01
    26ec:	fa 81       	ldd	r31, Y+2	; 0x02
    26ee:	26 a1       	ldd	r18, Z+38	; 0x26
    26f0:	37 a1       	ldd	r19, Z+39	; 0x27
    26f2:	e9 81       	ldd	r30, Y+1	; 0x01
    26f4:	fa 81       	ldd	r31, Y+2	; 0x02
    26f6:	80 a5       	ldd	r24, Z+40	; 0x28
    26f8:	91 a5       	ldd	r25, Z+41	; 0x29
    26fa:	f9 01       	movw	r30, r18
    26fc:	09 95       	icall
#ifdef CONFIG_MP
    spin_unlock( &current_proc->lock );
#endif // CONFIG_MP
}
    26fe:	0f 90       	pop	r0
    2700:	0f 90       	pop	r0
    2702:	0f 90       	pop	r0
    2704:	0f 90       	pop	r0
    2706:	cf 91       	pop	r28
    2708:	df 91       	pop	r29
    270a:	08 95       	ret

0000270c <sem_init_isr>:
*****************************************************************************************/
#include "../include/bugurt.h"

// Инициализация
void sem_init_isr( sem_t * sem, count_t count )
{
    270c:	df 93       	push	r29
    270e:	cf 93       	push	r28
    2710:	00 d0       	rcall	.+0      	; 0x2712 <sem_init_isr+0x6>
    2712:	00 d0       	rcall	.+0      	; 0x2714 <sem_init_isr+0x8>
    2714:	cd b7       	in	r28, 0x3d	; 61
    2716:	de b7       	in	r29, 0x3e	; 62
    2718:	9a 83       	std	Y+2, r25	; 0x02
    271a:	89 83       	std	Y+1, r24	; 0x01
    271c:	7c 83       	std	Y+4, r23	; 0x04
    271e:	6b 83       	std	Y+3, r22	; 0x03
    xlist_init( (xlist_t *)sem );
    2720:	89 81       	ldd	r24, Y+1	; 0x01
    2722:	9a 81       	ldd	r25, Y+2	; 0x02
    2724:	0e 94 e5 14 	call	0x29ca	; 0x29ca <xlist_init>
    sem->counter = count;
    2728:	e9 81       	ldd	r30, Y+1	; 0x01
    272a:	fa 81       	ldd	r31, Y+2	; 0x02
    272c:	8b 81       	ldd	r24, Y+3	; 0x03
    272e:	9c 81       	ldd	r25, Y+4	; 0x04
    2730:	92 8b       	std	Z+18, r25	; 0x12
    2732:	81 8b       	std	Z+17, r24	; 0x11
}
    2734:	0f 90       	pop	r0
    2736:	0f 90       	pop	r0
    2738:	0f 90       	pop	r0
    273a:	0f 90       	pop	r0
    273c:	cf 91       	pop	r28
    273e:	df 91       	pop	r29
    2740:	08 95       	ret

00002742 <_sem_lock>:

// То же, для внутреннего использования
bool_t _sem_lock( sem_t * sem )
{
    2742:	df 93       	push	r29
    2744:	cf 93       	push	r28
    2746:	00 d0       	rcall	.+0      	; 0x2748 <_sem_lock+0x6>
    2748:	00 d0       	rcall	.+0      	; 0x274a <_sem_lock+0x8>
    274a:	0f 92       	push	r0
    274c:	cd b7       	in	r28, 0x3d	; 61
    274e:	de b7       	in	r29, 0x3e	; 62
    2750:	9d 83       	std	Y+5, r25	; 0x05
    2752:	8c 83       	std	Y+4, r24	; 0x04

    bool_t ret = 0;
    2754:	1b 82       	std	Y+3, r1	; 0x03
    if( sem->counter != 0 )
    2756:	ec 81       	ldd	r30, Y+4	; 0x04
    2758:	fd 81       	ldd	r31, Y+5	; 0x05
    275a:	81 89       	ldd	r24, Z+17	; 0x11
    275c:	92 89       	ldd	r25, Z+18	; 0x12
    275e:	00 97       	sbiw	r24, 0x00	; 0
    2760:	61 f0       	breq	.+24     	; 0x277a <_sem_lock+0x38>
    {
        sem->counter--;
    2762:	ec 81       	ldd	r30, Y+4	; 0x04
    2764:	fd 81       	ldd	r31, Y+5	; 0x05
    2766:	81 89       	ldd	r24, Z+17	; 0x11
    2768:	92 89       	ldd	r25, Z+18	; 0x12
    276a:	01 97       	sbiw	r24, 0x01	; 1
    276c:	ec 81       	ldd	r30, Y+4	; 0x04
    276e:	fd 81       	ldd	r31, Y+5	; 0x05
    2770:	92 8b       	std	Z+18, r25	; 0x12
    2772:	81 8b       	std	Z+17, r24	; 0x11
#ifdef CONFIG_MP
        spin_unlock( &sem->lock );// Освобождение блокировки семафора
#endif //CONFIG_MP
        ret = (bool_t)1;
    2774:	81 e0       	ldi	r24, 0x01	; 1
    2776:	8b 83       	std	Y+3, r24	; 0x03
    2778:	16 c0       	rjmp	.+44     	; 0x27a6 <_sem_lock+0x64>
    }
    else
    {
        proc_t * proc = current_proc();
    277a:	0e 94 c5 04 	call	0x98a	; 0x98a <current_proc>
    277e:	9a 83       	std	Y+2, r25	; 0x02
    2780:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
        spin_lock( &proc->lock );// Захват блокировки процесса
#endif //CONFIG_MP
        proc->flags |= PROC_FLG_QUEUE;
    2782:	e9 81       	ldd	r30, Y+1	; 0x01
    2784:	fa 81       	ldd	r31, Y+2	; 0x02
    2786:	83 85       	ldd	r24, Z+11	; 0x0b
    2788:	88 60       	ori	r24, 0x08	; 8
    278a:	e9 81       	ldd	r30, Y+1	; 0x01
    278c:	fa 81       	ldd	r31, Y+2	; 0x02
    278e:	83 87       	std	Z+11, r24	; 0x0b
        _proc_stop( proc );
    2790:	89 81       	ldd	r24, Y+1	; 0x01
    2792:	9a 81       	ldd	r25, Y+2	; 0x02
    2794:	0e 94 b6 10 	call	0x216c	; 0x216c <_proc_stop>
        gitem_insert( (gitem_t *)proc, (xlist_t *)sem );
    2798:	89 81       	ldd	r24, Y+1	; 0x01
    279a:	9a 81       	ldd	r25, Y+2	; 0x02
    279c:	2c 81       	ldd	r18, Y+4	; 0x04
    279e:	3d 81       	ldd	r19, Y+5	; 0x05
    27a0:	b9 01       	movw	r22, r18
    27a2:	0e 94 91 0a 	call	0x1522	; 0x1522 <gitem_insert>
#ifdef CONFIG_MP
        spin_unlock( &proc->lock );// Освобождение блокировки процесса
#endif //CONFIG_MP
    }
    return ret;
    27a6:	8b 81       	ldd	r24, Y+3	; 0x03
}
    27a8:	0f 90       	pop	r0
    27aa:	0f 90       	pop	r0
    27ac:	0f 90       	pop	r0
    27ae:	0f 90       	pop	r0
    27b0:	0f 90       	pop	r0
    27b2:	cf 91       	pop	r28
    27b4:	df 91       	pop	r29
    27b6:	08 95       	ret

000027b8 <_sem_unlock>:

void _sem_unlock( sem_t * sem )
{
    27b8:	df 93       	push	r29
    27ba:	cf 93       	push	r28
    27bc:	00 d0       	rcall	.+0      	; 0x27be <_sem_unlock+0x6>
    27be:	00 d0       	rcall	.+0      	; 0x27c0 <_sem_unlock+0x8>
    27c0:	cd b7       	in	r28, 0x3d	; 61
    27c2:	de b7       	in	r29, 0x3e	; 62
    27c4:	9c 83       	std	Y+4, r25	; 0x04
    27c6:	8b 83       	std	Y+3, r24	; 0x03
    if( ((xlist_t *)sem)->index == (index_t)0  )
    27c8:	eb 81       	ldd	r30, Y+3	; 0x03
    27ca:	fc 81       	ldd	r31, Y+4	; 0x04
    27cc:	80 89       	ldd	r24, Z+16	; 0x10
    27ce:	88 23       	and	r24, r24
    27d0:	51 f4       	brne	.+20     	; 0x27e6 <_sem_unlock+0x2e>
    {
        sem->counter++;
    27d2:	eb 81       	ldd	r30, Y+3	; 0x03
    27d4:	fc 81       	ldd	r31, Y+4	; 0x04
    27d6:	81 89       	ldd	r24, Z+17	; 0x11
    27d8:	92 89       	ldd	r25, Z+18	; 0x12
    27da:	01 96       	adiw	r24, 0x01	; 1
    27dc:	eb 81       	ldd	r30, Y+3	; 0x03
    27de:	fc 81       	ldd	r31, Y+4	; 0x04
    27e0:	92 8b       	std	Z+18, r25	; 0x12
    27e2:	81 8b       	std	Z+17, r24	; 0x11
    27e4:	15 c0       	rjmp	.+42     	; 0x2810 <_sem_unlock+0x58>
#ifdef CONFIG_MP
        spin_unlock( &sem->lock );
#endif //CONFIG_MP
        return;
    }
    proc_t * proc = (proc_t *)xlist_head((xlist_t *)sem);
    27e6:	8b 81       	ldd	r24, Y+3	; 0x03
    27e8:	9c 81       	ldd	r25, Y+4	; 0x04
    27ea:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <xlist_head>
    27ee:	9a 83       	std	Y+2, r25	; 0x02
    27f0:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );// Захват спин-блокировки процесса
#endif //CONFIG_MP
    proc->flags &= ~PROC_FLG_QUEUE;
    27f2:	e9 81       	ldd	r30, Y+1	; 0x01
    27f4:	fa 81       	ldd	r31, Y+2	; 0x02
    27f6:	83 85       	ldd	r24, Z+11	; 0x0b
    27f8:	87 7f       	andi	r24, 0xF7	; 247
    27fa:	e9 81       	ldd	r30, Y+1	; 0x01
    27fc:	fa 81       	ldd	r31, Y+2	; 0x02
    27fe:	83 87       	std	Z+11, r24	; 0x0b
    gitem_cut( (gitem_t *)proc );
    2800:	89 81       	ldd	r24, Y+1	; 0x01
    2802:	9a 81       	ldd	r25, Y+2	; 0x02
    2804:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <gitem_cut>
    _proc_run( proc );
    2808:	89 81       	ldd	r24, Y+1	; 0x01
    280a:	9a 81       	ldd	r25, Y+2	; 0x02
    280c:	0e 94 2f 10 	call	0x205e	; 0x205e <_proc_run>
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );// Освобождение спин-блокировки процесса
#endif //CONFIG_MP
}
    2810:	0f 90       	pop	r0
    2812:	0f 90       	pop	r0
    2814:	0f 90       	pop	r0
    2816:	0f 90       	pop	r0
    2818:	cf 91       	pop	r28
    281a:	df 91       	pop	r29
    281c:	08 95       	ret

0000281e <sig_init_isr>:
*****************************************************************************************/
#include "../include/bugurt.h"
//========================================================================================
// Инициация
void sig_init_isr( sig_t * sig )
{
    281e:	df 93       	push	r29
    2820:	cf 93       	push	r28
    2822:	00 d0       	rcall	.+0      	; 0x2824 <sig_init_isr+0x6>
    2824:	cd b7       	in	r28, 0x3d	; 61
    2826:	de b7       	in	r29, 0x3e	; 62
    2828:	9a 83       	std	Y+2, r25	; 0x02
    282a:	89 83       	std	Y+1, r24	; 0x01
    {
        xlist_init( (xlist_t *)sig->sig_list + i );
        stat_init( (stat_t *)sig->sig_stat + i );
    }
#else
    xlist_init( (xlist_t *)sig );
    282c:	89 81       	ldd	r24, Y+1	; 0x01
    282e:	9a 81       	ldd	r25, Y+2	; 0x02
    2830:	0e 94 e5 14 	call	0x29ca	; 0x29ca <xlist_init>
#endif
}
    2834:	0f 90       	pop	r0
    2836:	0f 90       	pop	r0
    2838:	cf 91       	pop	r28
    283a:	df 91       	pop	r29
    283c:	08 95       	ret

0000283e <sig_wait_stage_1_isr>:
//========================================================================================
// Это выполнится при постановке процесса в список ожидания сигнала
void sig_wait_stage_1_isr( sig_t * sig )
{
    283e:	df 93       	push	r29
    2840:	cf 93       	push	r28
    2842:	00 d0       	rcall	.+0      	; 0x2844 <sig_wait_stage_1_isr+0x6>
    2844:	00 d0       	rcall	.+0      	; 0x2846 <sig_wait_stage_1_isr+0x8>
    2846:	cd b7       	in	r28, 0x3d	; 61
    2848:	de b7       	in	r29, 0x3e	; 62
    284a:	9c 83       	std	Y+4, r25	; 0x04
    284c:	8b 83       	std	Y+3, r24	; 0x03
#ifdef CONFIG_MP
    spin_lock( &sig->lock );
#endif // CONFIG_MP
    proc_t * proc = current_proc();
    284e:	0e 94 c5 04 	call	0x98a	; 0x98a <current_proc>
    2852:	9a 83       	std	Y+2, r25	; 0x02
    2854:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    // Останавливаем процесс
    _proc_stop(proc);
    2856:	89 81       	ldd	r24, Y+1	; 0x01
    2858:	9a 81       	ldd	r25, Y+2	; 0x02
    285a:	0e 94 b6 10 	call	0x216c	; 0x216c <_proc_stop>
    proc->flags |= PROC_FLG_WAIT;
    285e:	e9 81       	ldd	r30, Y+1	; 0x01
    2860:	fa 81       	ldd	r31, Y+2	; 0x02
    2862:	83 85       	ldd	r24, Z+11	; 0x0b
    2864:	80 61       	ori	r24, 0x10	; 16
    2866:	e9 81       	ldd	r30, Y+1	; 0x01
    2868:	fa 81       	ldd	r31, Y+2	; 0x02
    286a:	83 87       	std	Z+11, r24	; 0x0b
        stat_inc( proc, (stat_t *)sig->sig_stat + sig_core );
    }
    spin_unlock( &proc->lock );
    spin_unlock( &sig->lock );
#else
    gitem_insert_group( (gitem_t *)proc, (xlist_t *)sig );
    286c:	89 81       	ldd	r24, Y+1	; 0x01
    286e:	9a 81       	ldd	r25, Y+2	; 0x02
    2870:	2b 81       	ldd	r18, Y+3	; 0x03
    2872:	3c 81       	ldd	r19, Y+4	; 0x04
    2874:	b9 01       	movw	r22, r18
    2876:	0e 94 ed 0a 	call	0x15da	; 0x15da <gitem_insert_group>
#endif //CONFIG_MP
}
    287a:	0f 90       	pop	r0
    287c:	0f 90       	pop	r0
    287e:	0f 90       	pop	r0
    2880:	0f 90       	pop	r0
    2882:	cf 91       	pop	r28
    2884:	df 91       	pop	r29
    2886:	08 95       	ret

00002888 <sig_signal_isr>:
    enable_interrupts();
}
//========================================================================================
// Тоже самое что и предыдущие, олько для вызова из обработчиков прерываний и из критических секций
void sig_signal_isr( sig_t * sig )
{
    2888:	df 93       	push	r29
    288a:	cf 93       	push	r28
    288c:	00 d0       	rcall	.+0      	; 0x288e <sig_signal_isr+0x6>
    288e:	00 d0       	rcall	.+0      	; 0x2890 <sig_signal_isr+0x8>
    2890:	cd b7       	in	r28, 0x3d	; 61
    2892:	de b7       	in	r29, 0x3e	; 62
    2894:	9c 83       	std	Y+4, r25	; 0x04
    2896:	8b 83       	std	Y+3, r24	; 0x03
    }
    resched(core);// Перепланировка
    spin_unlock( &proc->lock );// Освобождение блокировки процесса
    spin_unlock( &sig->lock );// Освобождение блокировки сигнала
#else
    if( ((xlist_t *)sig)->index == (index_t)0 )return;
    2898:	eb 81       	ldd	r30, Y+3	; 0x03
    289a:	fc 81       	ldd	r31, Y+4	; 0x04
    289c:	80 89       	ldd	r24, Z+16	; 0x10
    289e:	88 23       	and	r24, r24
    28a0:	a9 f0       	breq	.+42     	; 0x28cc <sig_signal_isr+0x44>
    proc_t * proc = (proc_t *)xlist_head( (xlist_t *)sig );
    28a2:	8b 81       	ldd	r24, Y+3	; 0x03
    28a4:	9c 81       	ldd	r25, Y+4	; 0x04
    28a6:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <xlist_head>
    28aa:	9a 83       	std	Y+2, r25	; 0x02
    28ac:	89 83       	std	Y+1, r24	; 0x01
    gitem_fast_cut( (gitem_t *)proc );
    28ae:	89 81       	ldd	r24, Y+1	; 0x01
    28b0:	9a 81       	ldd	r25, Y+2	; 0x02
    28b2:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <gitem_fast_cut>
    gitem_insert( (gitem_t *)proc, kernel.sched.ready );
    28b6:	89 81       	ldd	r24, Y+1	; 0x01
    28b8:	9a 81       	ldd	r25, Y+2	; 0x02
    28ba:	20 91 2a 01 	lds	r18, 0x012A
    28be:	30 91 2b 01 	lds	r19, 0x012B
    28c2:	b9 01       	movw	r22, r18
    28c4:	0e 94 91 0a 	call	0x1522	; 0x1522 <gitem_insert>
    resched();
    28c8:	0e 94 ef 04 	call	0x9de	; 0x9de <resched>
#endif //CONFIG_MP
}
    28cc:	0f 90       	pop	r0
    28ce:	0f 90       	pop	r0
    28d0:	0f 90       	pop	r0
    28d2:	0f 90       	pop	r0
    28d4:	cf 91       	pop	r28
    28d6:	df 91       	pop	r29
    28d8:	08 95       	ret

000028da <sig_broadcast_isr>:
//----------------------------------------------------------------------------------------
void sig_broadcast_isr( sig_t * sig )
{
    28da:	df 93       	push	r29
    28dc:	cf 93       	push	r28
    28de:	00 d0       	rcall	.+0      	; 0x28e0 <sig_broadcast_isr+0x6>
    28e0:	cd b7       	in	r28, 0x3d	; 61
    28e2:	de b7       	in	r29, 0x3e	; 62
    28e4:	9a 83       	std	Y+2, r25	; 0x02
    28e6:	89 83       	std	Y+1, r24	; 0x01

        resched(core);
    }
    spin_unlock( &sig->lock );
#else
    gitem_xlist_merge( (xlist_t *)sig, kernel.sched.ready );
    28e8:	20 91 2a 01 	lds	r18, 0x012A
    28ec:	30 91 2b 01 	lds	r19, 0x012B
    28f0:	89 81       	ldd	r24, Y+1	; 0x01
    28f2:	9a 81       	ldd	r25, Y+2	; 0x02
    28f4:	b9 01       	movw	r22, r18
    28f6:	0e 94 05 0c 	call	0x180a	; 0x180a <gitem_xlist_merge>
    resched();
    28fa:	0e 94 ef 04 	call	0x9de	; 0x9de <resched>
#endif //CONFIG_MP
}
    28fe:	0f 90       	pop	r0
    2900:	0f 90       	pop	r0
    2902:	cf 91       	pop	r28
    2904:	df 91       	pop	r29
    2906:	08 95       	ret

00002908 <_clear_timer>:
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
//========================================================================================
void _clear_timer(timer_t * t)
{
    2908:	df 93       	push	r29
    290a:	cf 93       	push	r28
    290c:	00 d0       	rcall	.+0      	; 0x290e <_clear_timer+0x6>
    290e:	cd b7       	in	r28, 0x3d	; 61
    2910:	de b7       	in	r29, 0x3e	; 62
    2912:	9a 83       	std	Y+2, r25	; 0x02
    2914:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    core_id_t current_core = _enter_crit_sec();
    spin_lock( &kernel.timer_lock );
#else
    enter_crit_sec();
    2916:	0e 94 3b 0a 	call	0x1476	; 0x1476 <enter_crit_sec>
#endif //CONFIG_MP
    *t = kernel.timer;
    291a:	80 91 82 01 	lds	r24, 0x0182
    291e:	90 91 83 01 	lds	r25, 0x0183
    2922:	e9 81       	ldd	r30, Y+1	; 0x01
    2924:	fa 81       	ldd	r31, Y+2	; 0x02
    2926:	91 83       	std	Z+1, r25	; 0x01
    2928:	80 83       	st	Z, r24
#ifdef CONFIG_MP
    spin_unlock( &kernel.timer_lock );
    _exit_crit_sec(current_core);
#else
    exit_crit_sec();
    292a:	0e 94 4d 0a 	call	0x149a	; 0x149a <exit_crit_sec>
#endif //CONFIG_MP
}
    292e:	0f 90       	pop	r0
    2930:	0f 90       	pop	r0
    2932:	cf 91       	pop	r28
    2934:	df 91       	pop	r29
    2936:	08 95       	ret

00002938 <_timer>:
//----------------------------------------------------------------------------------------
timer_t _timer(timer_t t)
{
    2938:	df 93       	push	r29
    293a:	cf 93       	push	r28
    293c:	00 d0       	rcall	.+0      	; 0x293e <_timer+0x6>
    293e:	00 d0       	rcall	.+0      	; 0x2940 <_timer+0x8>
    2940:	cd b7       	in	r28, 0x3d	; 61
    2942:	de b7       	in	r29, 0x3e	; 62
    2944:	9c 83       	std	Y+4, r25	; 0x04
    2946:	8b 83       	std	Y+3, r24	; 0x03
    timer_t ret;
#ifdef CONFIG_MP
    core_id_t current_core = _enter_crit_sec();
    spin_lock( &kernel.timer_lock );
#else
    enter_crit_sec();
    2948:	0e 94 3b 0a 	call	0x1476	; 0x1476 <enter_crit_sec>
#endif //CONFIG_MP
    ret = (timer_t)kernel.timer - (timer_t)t;
    294c:	20 91 82 01 	lds	r18, 0x0182
    2950:	30 91 83 01 	lds	r19, 0x0183
    2954:	8b 81       	ldd	r24, Y+3	; 0x03
    2956:	9c 81       	ldd	r25, Y+4	; 0x04
    2958:	a9 01       	movw	r20, r18
    295a:	48 1b       	sub	r20, r24
    295c:	59 0b       	sbc	r21, r25
    295e:	ca 01       	movw	r24, r20
    2960:	9a 83       	std	Y+2, r25	; 0x02
    2962:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_unlock( &kernel.timer_lock );
    _exit_crit_sec(current_core);
#else
    exit_crit_sec();
    2964:	0e 94 4d 0a 	call	0x149a	; 0x149a <exit_crit_sec>
#endif //CONFIG_MP
    return ret;
    2968:	89 81       	ldd	r24, Y+1	; 0x01
    296a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    296c:	0f 90       	pop	r0
    296e:	0f 90       	pop	r0
    2970:	0f 90       	pop	r0
    2972:	0f 90       	pop	r0
    2974:	cf 91       	pop	r28
    2976:	df 91       	pop	r29
    2978:	08 95       	ret

0000297a <wait_time>:

//----------------------------------------------------------------------------------------
void wait_time(timer_t time)
{
    297a:	df 93       	push	r29
    297c:	cf 93       	push	r28
    297e:	00 d0       	rcall	.+0      	; 0x2980 <wait_time+0x6>
    2980:	00 d0       	rcall	.+0      	; 0x2982 <wait_time+0x8>
    2982:	0f 92       	push	r0
    2984:	cd b7       	in	r28, 0x3d	; 61
    2986:	de b7       	in	r29, 0x3e	; 62
    2988:	9d 83       	std	Y+5, r25	; 0x05
    298a:	8c 83       	std	Y+4, r24	; 0x04
    timer_t tmr;
    bool_t roll=(bool_t)1;
    298c:	81 e0       	ldi	r24, 0x01	; 1
    298e:	89 83       	std	Y+1, r24	; 0x01
    CLEAR_TIMER(tmr);
    2990:	ce 01       	movw	r24, r28
    2992:	02 96       	adiw	r24, 0x02	; 2
    2994:	0e 94 84 14 	call	0x2908	; 0x2908 <_clear_timer>
    2998:	0d c0       	rjmp	.+26     	; 0x29b4 <wait_time+0x3a>
    while((bool_t)roll)
    {
        roll = (bool_t)( TIMER(tmr) < (timer_t)time );
    299a:	8a 81       	ldd	r24, Y+2	; 0x02
    299c:	9b 81       	ldd	r25, Y+3	; 0x03
    299e:	0e 94 9c 14 	call	0x2938	; 0x2938 <_timer>
    29a2:	9c 01       	movw	r18, r24
    29a4:	8c 81       	ldd	r24, Y+4	; 0x04
    29a6:	9d 81       	ldd	r25, Y+5	; 0x05
    29a8:	19 82       	std	Y+1, r1	; 0x01
    29aa:	28 17       	cp	r18, r24
    29ac:	39 07       	cpc	r19, r25
    29ae:	10 f4       	brcc	.+4      	; 0x29b4 <wait_time+0x3a>
    29b0:	81 e0       	ldi	r24, 0x01	; 1
    29b2:	89 83       	std	Y+1, r24	; 0x01
void wait_time(timer_t time)
{
    timer_t tmr;
    bool_t roll=(bool_t)1;
    CLEAR_TIMER(tmr);
    while((bool_t)roll)
    29b4:	89 81       	ldd	r24, Y+1	; 0x01
    29b6:	88 23       	and	r24, r24
    29b8:	81 f7       	brne	.-32     	; 0x299a <wait_time+0x20>
    {
        roll = (bool_t)( TIMER(tmr) < (timer_t)time );
    }
}
    29ba:	0f 90       	pop	r0
    29bc:	0f 90       	pop	r0
    29be:	0f 90       	pop	r0
    29c0:	0f 90       	pop	r0
    29c2:	0f 90       	pop	r0
    29c4:	cf 91       	pop	r28
    29c6:	df 91       	pop	r29
    29c8:	08 95       	ret

000029ca <xlist_init>:
**********************************************/
//Инициация
void xlist_init(
    xlist_t * xlist
)
{
    29ca:	df 93       	push	r29
    29cc:	cf 93       	push	r28
    29ce:	00 d0       	rcall	.+0      	; 0x29d0 <xlist_init+0x6>
    29d0:	00 d0       	rcall	.+0      	; 0x29d2 <xlist_init+0x8>
    29d2:	cd b7       	in	r28, 0x3d	; 61
    29d4:	de b7       	in	r29, 0x3e	; 62
    29d6:	9c 83       	std	Y+4, r25	; 0x04
    29d8:	8b 83       	std	Y+3, r24	; 0x03
    count_t i;
    //список пуст
    xlist->index = (index_t)0;
    29da:	eb 81       	ldd	r30, Y+3	; 0x03
    29dc:	fc 81       	ldd	r31, Y+4	; 0x04
    29de:	10 8a       	std	Z+16, r1	; 0x10
    //обнуляем указатели
    for( i = 0; i < BITS_IN_INDEX_T; i++ )xlist->item[i] = (item_t *)0;
    29e0:	1a 82       	std	Y+2, r1	; 0x02
    29e2:	19 82       	std	Y+1, r1	; 0x01
    29e4:	10 c0       	rjmp	.+32     	; 0x2a06 <xlist_init+0x3c>
    29e6:	89 81       	ldd	r24, Y+1	; 0x01
    29e8:	9a 81       	ldd	r25, Y+2	; 0x02
    29ea:	2b 81       	ldd	r18, Y+3	; 0x03
    29ec:	3c 81       	ldd	r19, Y+4	; 0x04
    29ee:	88 0f       	add	r24, r24
    29f0:	99 1f       	adc	r25, r25
    29f2:	f9 01       	movw	r30, r18
    29f4:	e8 0f       	add	r30, r24
    29f6:	f9 1f       	adc	r31, r25
    29f8:	11 82       	std	Z+1, r1	; 0x01
    29fa:	10 82       	st	Z, r1
    29fc:	89 81       	ldd	r24, Y+1	; 0x01
    29fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2a00:	01 96       	adiw	r24, 0x01	; 1
    2a02:	9a 83       	std	Y+2, r25	; 0x02
    2a04:	89 83       	std	Y+1, r24	; 0x01
    2a06:	89 81       	ldd	r24, Y+1	; 0x01
    2a08:	9a 81       	ldd	r25, Y+2	; 0x02
    2a0a:	88 30       	cpi	r24, 0x08	; 8
    2a0c:	91 05       	cpc	r25, r1
    2a0e:	58 f3       	brcs	.-42     	; 0x29e6 <xlist_init+0x1c>
}
    2a10:	0f 90       	pop	r0
    2a12:	0f 90       	pop	r0
    2a14:	0f 90       	pop	r0
    2a16:	0f 90       	pop	r0
    2a18:	cf 91       	pop	r28
    2a1a:	df 91       	pop	r29
    2a1c:	08 95       	ret

00002a1e <xlist_head>:
//===========================================================================
//Поиск головы списка
item_t * xlist_head(xlist_t * xlist)
{
    2a1e:	df 93       	push	r29
    2a20:	cf 93       	push	r28
    2a22:	00 d0       	rcall	.+0      	; 0x2a24 <xlist_head+0x6>
    2a24:	00 d0       	rcall	.+0      	; 0x2a26 <xlist_head+0x8>
    2a26:	0f 92       	push	r0
    2a28:	cd b7       	in	r28, 0x3d	; 61
    2a2a:	de b7       	in	r29, 0x3e	; 62
    2a2c:	9d 83       	std	Y+5, r25	; 0x05
    2a2e:	8c 83       	std	Y+4, r24	; 0x04
    item_t * ret_val = (item_t *)0;
    2a30:	1b 82       	std	Y+3, r1	; 0x03
    2a32:	1a 82       	std	Y+2, r1	; 0x02
    index_t index = xlist->index;
    2a34:	ec 81       	ldd	r30, Y+4	; 0x04
    2a36:	fd 81       	ldd	r31, Y+5	; 0x05
    2a38:	80 89       	ldd	r24, Z+16	; 0x10
    2a3a:	89 83       	std	Y+1, r24	; 0x01

    if( index != (index_t)0 )
    2a3c:	89 81       	ldd	r24, Y+1	; 0x01
    2a3e:	88 23       	and	r24, r24
    2a40:	81 f0       	breq	.+32     	; 0x2a62 <xlist_head+0x44>
    {
        ret_val = xlist->item[ index_search( index ) ];
    2a42:	89 81       	ldd	r24, Y+1	; 0x01
    2a44:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <index_search>
    2a48:	88 2f       	mov	r24, r24
    2a4a:	90 e0       	ldi	r25, 0x00	; 0
    2a4c:	2c 81       	ldd	r18, Y+4	; 0x04
    2a4e:	3d 81       	ldd	r19, Y+5	; 0x05
    2a50:	88 0f       	add	r24, r24
    2a52:	99 1f       	adc	r25, r25
    2a54:	f9 01       	movw	r30, r18
    2a56:	e8 0f       	add	r30, r24
    2a58:	f9 1f       	adc	r31, r25
    2a5a:	80 81       	ld	r24, Z
    2a5c:	91 81       	ldd	r25, Z+1	; 0x01
    2a5e:	9b 83       	std	Y+3, r25	; 0x03
    2a60:	8a 83       	std	Y+2, r24	; 0x02
    }
    return ret_val;
    2a62:	8a 81       	ldd	r24, Y+2	; 0x02
    2a64:	9b 81       	ldd	r25, Y+3	; 0x03
}
    2a66:	0f 90       	pop	r0
    2a68:	0f 90       	pop	r0
    2a6a:	0f 90       	pop	r0
    2a6c:	0f 90       	pop	r0
    2a6e:	0f 90       	pop	r0
    2a70:	cf 91       	pop	r28
    2a72:	df 91       	pop	r29
    2a74:	08 95       	ret

00002a76 <xlist_switch>:

//===========================================================================
// переключение указателя в массиве на следующий элемент, пригодится в планировщике
void xlist_switch(xlist_t * xlist, prio_t prio)
{
    2a76:	df 93       	push	r29
    2a78:	cf 93       	push	r28
    2a7a:	00 d0       	rcall	.+0      	; 0x2a7c <xlist_switch+0x6>
    2a7c:	00 d0       	rcall	.+0      	; 0x2a7e <xlist_switch+0x8>
    2a7e:	0f 92       	push	r0
    2a80:	cd b7       	in	r28, 0x3d	; 61
    2a82:	de b7       	in	r29, 0x3e	; 62
    2a84:	9c 83       	std	Y+4, r25	; 0x04
    2a86:	8b 83       	std	Y+3, r24	; 0x03
    2a88:	6d 83       	std	Y+5, r22	; 0x05
    item_t ** current = xlist->item + prio;
    2a8a:	2b 81       	ldd	r18, Y+3	; 0x03
    2a8c:	3c 81       	ldd	r19, Y+4	; 0x04
    2a8e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a90:	88 2f       	mov	r24, r24
    2a92:	90 e0       	ldi	r25, 0x00	; 0
    2a94:	88 0f       	add	r24, r24
    2a96:	99 1f       	adc	r25, r25
    2a98:	82 0f       	add	r24, r18
    2a9a:	93 1f       	adc	r25, r19
    2a9c:	9a 83       	std	Y+2, r25	; 0x02
    2a9e:	89 83       	std	Y+1, r24	; 0x01
    *current = (*current)->next;
    2aa0:	e9 81       	ldd	r30, Y+1	; 0x01
    2aa2:	fa 81       	ldd	r31, Y+2	; 0x02
    2aa4:	01 90       	ld	r0, Z+
    2aa6:	f0 81       	ld	r31, Z
    2aa8:	e0 2d       	mov	r30, r0
    2aaa:	80 81       	ld	r24, Z
    2aac:	91 81       	ldd	r25, Z+1	; 0x01
    2aae:	e9 81       	ldd	r30, Y+1	; 0x01
    2ab0:	fa 81       	ldd	r31, Y+2	; 0x02
    2ab2:	91 83       	std	Z+1, r25	; 0x01
    2ab4:	80 83       	st	Z, r24
    //*current = (item_t *)*(item_t **)*(item_t ***)current;
}
    2ab6:	0f 90       	pop	r0
    2ab8:	0f 90       	pop	r0
    2aba:	0f 90       	pop	r0
    2abc:	0f 90       	pop	r0
    2abe:	0f 90       	pop	r0
    2ac0:	cf 91       	pop	r28
    2ac2:	df 91       	pop	r29
    2ac4:	08 95       	ret

00002ac6 <raise_syscall_interrupt>:
/*
 */
#include <bugurt.h>

void raise_syscall_interrupt(void)
{
    2ac6:	df 93       	push	r29
    2ac8:	cf 93       	push	r28
    2aca:	cd b7       	in	r28, 0x3d	; 61
    2acc:	de b7       	in	r29, 0x3e	; 62
    R2_on();
    2ace:	ab e2       	ldi	r26, 0x2B	; 43
    2ad0:	b0 e0       	ldi	r27, 0x00	; 0
    2ad2:	eb e2       	ldi	r30, 0x2B	; 43
    2ad4:	f0 e0       	ldi	r31, 0x00	; 0
    2ad6:	80 81       	ld	r24, Z
    2ad8:	84 60       	ori	r24, 0x04	; 4
    2ada:	8c 93       	st	X, r24
    G2_off();
    2adc:	ab e2       	ldi	r26, 0x2B	; 43
    2ade:	b0 e0       	ldi	r27, 0x00	; 0
    2ae0:	eb e2       	ldi	r30, 0x2B	; 43
    2ae2:	f0 e0       	ldi	r31, 0x00	; 0
    2ae4:	80 81       	ld	r24, Z
    2ae6:	87 7f       	andi	r24, 0xF7	; 247
    2ae8:	8c 93       	st	X, r24
    R2_off();
    2aea:	ab e2       	ldi	r26, 0x2B	; 43
    2aec:	b0 e0       	ldi	r27, 0x00	; 0
    2aee:	eb e2       	ldi	r30, 0x2B	; 43
    2af0:	f0 e0       	ldi	r31, 0x00	; 0
    2af2:	80 81       	ld	r24, Z
    2af4:	8b 7f       	andi	r24, 0xFB	; 251
    2af6:	8c 93       	st	X, r24
    G2_on();
    2af8:	ab e2       	ldi	r26, 0x2B	; 43
    2afa:	b0 e0       	ldi	r27, 0x00	; 0
    2afc:	eb e2       	ldi	r30, 0x2B	; 43
    2afe:	f0 e0       	ldi	r31, 0x00	; 0
    2b00:	80 81       	ld	r24, Z
    2b02:	88 60       	ori	r24, 0x08	; 8
    2b04:	8c 93       	st	X, r24
}
    2b06:	cf 91       	pop	r28
    2b08:	df 91       	pop	r29
    2b0a:	08 95       	ret

00002b0c <start_scheduler>:

void start_scheduler( void )
{
    2b0c:	df 93       	push	r29
    2b0e:	cf 93       	push	r28
    2b10:	cd b7       	in	r28, 0x3d	; 61
    2b12:	de b7       	in	r29, 0x3e	; 62
    TIMSK2 |= 0x02;
    2b14:	a0 e7       	ldi	r26, 0x70	; 112
    2b16:	b0 e0       	ldi	r27, 0x00	; 0
    2b18:	e0 e7       	ldi	r30, 0x70	; 112
    2b1a:	f0 e0       	ldi	r31, 0x00	; 0
    2b1c:	80 81       	ld	r24, Z
    2b1e:	82 60       	ori	r24, 0x02	; 2
    2b20:	8c 93       	st	X, r24
}
    2b22:	cf 91       	pop	r28
    2b24:	df 91       	pop	r29
    2b26:	08 95       	ret

00002b28 <stop_scheduler>:

void stop_scheduler( void )
{
    2b28:	df 93       	push	r29
    2b2a:	cf 93       	push	r28
    2b2c:	cd b7       	in	r28, 0x3d	; 61
    2b2e:	de b7       	in	r29, 0x3e	; 62
    TIMSK2 &= ~0x02;
    2b30:	a0 e7       	ldi	r26, 0x70	; 112
    2b32:	b0 e0       	ldi	r27, 0x00	; 0
    2b34:	e0 e7       	ldi	r30, 0x70	; 112
    2b36:	f0 e0       	ldi	r31, 0x00	; 0
    2b38:	80 81       	ld	r24, Z
    2b3a:	8d 7f       	andi	r24, 0xFD	; 253
    2b3c:	8c 93       	st	X, r24
}
    2b3e:	cf 91       	pop	r28
    2b40:	df 91       	pop	r29
    2b42:	08 95       	ret

00002b44 <blink_1>:

///----------------------------------------------------------------------------------------
void blink_1(void * t) {PORTB ^= 0x10;}
    2b44:	df 93       	push	r29
    2b46:	cf 93       	push	r28
    2b48:	00 d0       	rcall	.+0      	; 0x2b4a <blink_1+0x6>
    2b4a:	cd b7       	in	r28, 0x3d	; 61
    2b4c:	de b7       	in	r29, 0x3e	; 62
    2b4e:	9a 83       	std	Y+2, r25	; 0x02
    2b50:	89 83       	std	Y+1, r24	; 0x01
    2b52:	a5 e2       	ldi	r26, 0x25	; 37
    2b54:	b0 e0       	ldi	r27, 0x00	; 0
    2b56:	e5 e2       	ldi	r30, 0x25	; 37
    2b58:	f0 e0       	ldi	r31, 0x00	; 0
    2b5a:	90 81       	ld	r25, Z
    2b5c:	80 e1       	ldi	r24, 0x10	; 16
    2b5e:	89 27       	eor	r24, r25
    2b60:	8c 93       	st	X, r24
    2b62:	0f 90       	pop	r0
    2b64:	0f 90       	pop	r0
    2b66:	cf 91       	pop	r28
    2b68:	df 91       	pop	r29
    2b6a:	08 95       	ret

00002b6c <blink_2>:
void blink_2(void * t) {PORTB ^= 0x08;}
    2b6c:	df 93       	push	r29
    2b6e:	cf 93       	push	r28
    2b70:	00 d0       	rcall	.+0      	; 0x2b72 <blink_2+0x6>
    2b72:	cd b7       	in	r28, 0x3d	; 61
    2b74:	de b7       	in	r29, 0x3e	; 62
    2b76:	9a 83       	std	Y+2, r25	; 0x02
    2b78:	89 83       	std	Y+1, r24	; 0x01
    2b7a:	a5 e2       	ldi	r26, 0x25	; 37
    2b7c:	b0 e0       	ldi	r27, 0x00	; 0
    2b7e:	e5 e2       	ldi	r30, 0x25	; 37
    2b80:	f0 e0       	ldi	r31, 0x00	; 0
    2b82:	90 81       	ld	r25, Z
    2b84:	88 e0       	ldi	r24, 0x08	; 8
    2b86:	89 27       	eor	r24, r25
    2b88:	8c 93       	st	X, r24
    2b8a:	0f 90       	pop	r0
    2b8c:	0f 90       	pop	r0
    2b8e:	cf 91       	pop	r28
    2b90:	df 91       	pop	r29
    2b92:	08 95       	ret

00002b94 <blink_3>:
void blink_3(void * t) {PORTB ^= 0x04;}
    2b94:	df 93       	push	r29
    2b96:	cf 93       	push	r28
    2b98:	00 d0       	rcall	.+0      	; 0x2b9a <blink_3+0x6>
    2b9a:	cd b7       	in	r28, 0x3d	; 61
    2b9c:	de b7       	in	r29, 0x3e	; 62
    2b9e:	9a 83       	std	Y+2, r25	; 0x02
    2ba0:	89 83       	std	Y+1, r24	; 0x01
    2ba2:	a5 e2       	ldi	r26, 0x25	; 37
    2ba4:	b0 e0       	ldi	r27, 0x00	; 0
    2ba6:	e5 e2       	ldi	r30, 0x25	; 37
    2ba8:	f0 e0       	ldi	r31, 0x00	; 0
    2baa:	90 81       	ld	r25, Z
    2bac:	84 e0       	ldi	r24, 0x04	; 4
    2bae:	89 27       	eor	r24, r25
    2bb0:	8c 93       	st	X, r24
    2bb2:	0f 90       	pop	r0
    2bb4:	0f 90       	pop	r0
    2bb6:	cf 91       	pop	r28
    2bb8:	df 91       	pop	r29
    2bba:	08 95       	ret

00002bbc <blink_4>:
void blink_4(void * t) {PORTB ^= 0x02;}
    2bbc:	df 93       	push	r29
    2bbe:	cf 93       	push	r28
    2bc0:	00 d0       	rcall	.+0      	; 0x2bc2 <blink_4+0x6>
    2bc2:	cd b7       	in	r28, 0x3d	; 61
    2bc4:	de b7       	in	r29, 0x3e	; 62
    2bc6:	9a 83       	std	Y+2, r25	; 0x02
    2bc8:	89 83       	std	Y+1, r24	; 0x01
    2bca:	a5 e2       	ldi	r26, 0x25	; 37
    2bcc:	b0 e0       	ldi	r27, 0x00	; 0
    2bce:	e5 e2       	ldi	r30, 0x25	; 37
    2bd0:	f0 e0       	ldi	r31, 0x00	; 0
    2bd2:	90 81       	ld	r25, Z
    2bd4:	82 e0       	ldi	r24, 0x02	; 2
    2bd6:	89 27       	eor	r24, r25
    2bd8:	8c 93       	st	X, r24
    2bda:	0f 90       	pop	r0
    2bdc:	0f 90       	pop	r0
    2bde:	cf 91       	pop	r28
    2be0:	df 91       	pop	r29
    2be2:	08 95       	ret

00002be4 <blink_12>:
void blink_7(void * t) {PORTC ^= 0x10;}
void blink_8(void * t) {PORTC ^= 0x08;}
void blink_9(void * t) {PORTC ^= 0x04;}
void blink_10(void * t) {PORTC ^= 0x02;}
void blink_11(void * t) {PORTC ^= 0x01;}
void blink_12(void * t) {
    2be4:	df 93       	push	r29
    2be6:	cf 93       	push	r28
    2be8:	00 d0       	rcall	.+0      	; 0x2bea <blink_12+0x6>
    2bea:	cd b7       	in	r28, 0x3d	; 61
    2bec:	de b7       	in	r29, 0x3e	; 62
    2bee:	9a 83       	std	Y+2, r25	; 0x02
    2bf0:	89 83       	std	Y+1, r24	; 0x01
    PORTB ^= 0x20;
    2bf2:	a5 e2       	ldi	r26, 0x25	; 37
    2bf4:	b0 e0       	ldi	r27, 0x00	; 0
    2bf6:	e5 e2       	ldi	r30, 0x25	; 37
    2bf8:	f0 e0       	ldi	r31, 0x00	; 0
    2bfa:	90 81       	ld	r25, Z
    2bfc:	80 e2       	ldi	r24, 0x20	; 32
    2bfe:	89 27       	eor	r24, r25
    2c00:	8c 93       	st	X, r24
    blink_G3();
    2c02:	ab e2       	ldi	r26, 0x2B	; 43
    2c04:	b0 e0       	ldi	r27, 0x00	; 0
    2c06:	eb e2       	ldi	r30, 0x2B	; 43
    2c08:	f0 e0       	ldi	r31, 0x00	; 0
    2c0a:	90 81       	ld	r25, Z
    2c0c:	80 e4       	ldi	r24, 0x40	; 64
    2c0e:	89 27       	eor	r24, r25
    2c10:	8c 93       	st	X, r24
    blink_R3();
    2c12:	ab e2       	ldi	r26, 0x2B	; 43
    2c14:	b0 e0       	ldi	r27, 0x00	; 0
    2c16:	eb e2       	ldi	r30, 0x2B	; 43
    2c18:	f0 e0       	ldi	r31, 0x00	; 0
    2c1a:	90 81       	ld	r25, Z
    2c1c:	80 e2       	ldi	r24, 0x20	; 32
    2c1e:	89 27       	eor	r24, r25
    2c20:	8c 93       	st	X, r24
    }
    2c22:	0f 90       	pop	r0
    2c24:	0f 90       	pop	r0
    2c26:	cf 91       	pop	r28
    2c28:	df 91       	pop	r29
    2c2a:	08 95       	ret

00002c2c <main0>:
stack_t stack[4][128];

static float fil = 0.0;
static float sig = 1023.0;
void main0(void * t)
{
    2c2c:	df 93       	push	r29
    2c2e:	cf 93       	push	r28
    2c30:	00 d0       	rcall	.+0      	; 0x2c32 <main0+0x6>
    2c32:	cd b7       	in	r28, 0x3d	; 61
    2c34:	de b7       	in	r29, 0x3e	; 62
    2c36:	9a 83       	std	Y+2, r25	; 0x02
    2c38:	89 83       	std	Y+1, r24	; 0x01
    while(1)
    {
        wait_time(50);
    2c3a:	82 e3       	ldi	r24, 0x32	; 50
    2c3c:	90 e0       	ldi	r25, 0x00	; 0
    2c3e:	0e 94 bd 14 	call	0x297a	; 0x297a <wait_time>
        fil += (sig - fil)*0.3;
    2c42:	80 91 01 01 	lds	r24, 0x0101
    2c46:	90 91 02 01 	lds	r25, 0x0102
    2c4a:	a0 91 03 01 	lds	r26, 0x0103
    2c4e:	b0 91 04 01 	lds	r27, 0x0104
    2c52:	20 91 24 01 	lds	r18, 0x0124
    2c56:	30 91 25 01 	lds	r19, 0x0125
    2c5a:	40 91 26 01 	lds	r20, 0x0126
    2c5e:	50 91 27 01 	lds	r21, 0x0127
    2c62:	bc 01       	movw	r22, r24
    2c64:	cd 01       	movw	r24, r26
    2c66:	0e 94 10 02 	call	0x420	; 0x420 <__subsf3>
    2c6a:	dc 01       	movw	r26, r24
    2c6c:	cb 01       	movw	r24, r22
    2c6e:	bc 01       	movw	r22, r24
    2c70:	cd 01       	movw	r24, r26
    2c72:	2a e9       	ldi	r18, 0x9A	; 154
    2c74:	39 e9       	ldi	r19, 0x99	; 153
    2c76:	49 e9       	ldi	r20, 0x99	; 153
    2c78:	5e e3       	ldi	r21, 0x3E	; 62
    2c7a:	0e 94 6e 02 	call	0x4dc	; 0x4dc <__mulsf3>
    2c7e:	dc 01       	movw	r26, r24
    2c80:	cb 01       	movw	r24, r22
    2c82:	20 91 24 01 	lds	r18, 0x0124
    2c86:	30 91 25 01 	lds	r19, 0x0125
    2c8a:	40 91 26 01 	lds	r20, 0x0126
    2c8e:	50 91 27 01 	lds	r21, 0x0127
    2c92:	bc 01       	movw	r22, r24
    2c94:	cd 01       	movw	r24, r26
    2c96:	0e 94 41 02 	call	0x482	; 0x482 <__addsf3>
    2c9a:	dc 01       	movw	r26, r24
    2c9c:	cb 01       	movw	r24, r22
    2c9e:	80 93 24 01 	sts	0x0124, r24
    2ca2:	90 93 25 01 	sts	0x0125, r25
    2ca6:	a0 93 26 01 	sts	0x0126, r26
    2caa:	b0 93 27 01 	sts	0x0127, r27
    2cae:	c5 cf       	rjmp	.-118    	; 0x2c3a <main0+0xe>

00002cb0 <main1>:
    }
}
void main1(void * t)
{
    2cb0:	df 93       	push	r29
    2cb2:	cf 93       	push	r28
    2cb4:	00 d0       	rcall	.+0      	; 0x2cb6 <main1+0x6>
    2cb6:	cd b7       	in	r28, 0x3d	; 61
    2cb8:	de b7       	in	r29, 0x3e	; 62
    2cba:	9a 83       	std	Y+2, r25	; 0x02
    2cbc:	89 83       	std	Y+1, r24	; 0x01
    while(1)
    {
        wait_time(500);
    2cbe:	84 ef       	ldi	r24, 0xF4	; 244
    2cc0:	91 e0       	ldi	r25, 0x01	; 1
    2cc2:	0e 94 bd 14 	call	0x297a	; 0x297a <wait_time>
        sig*=-1.0;
    2cc6:	80 91 01 01 	lds	r24, 0x0101
    2cca:	90 91 02 01 	lds	r25, 0x0102
    2cce:	a0 91 03 01 	lds	r26, 0x0103
    2cd2:	b0 91 04 01 	lds	r27, 0x0104
    2cd6:	b0 58       	subi	r27, 0x80	; 128
    2cd8:	80 93 01 01 	sts	0x0101, r24
    2cdc:	90 93 02 01 	sts	0x0102, r25
    2ce0:	a0 93 03 01 	sts	0x0103, r26
    2ce4:	b0 93 04 01 	sts	0x0104, r27
    2ce8:	ea cf       	rjmp	.-44     	; 0x2cbe <main1+0xe>

00002cea <main2>:
    }
}
void main2(void * t)
{
    2cea:	df 93       	push	r29
    2cec:	cf 93       	push	r28
    2cee:	00 d0       	rcall	.+0      	; 0x2cf0 <main2+0x6>
    2cf0:	cd b7       	in	r28, 0x3d	; 61
    2cf2:	de b7       	in	r29, 0x3e	; 62
    2cf4:	9a 83       	std	Y+2, r25	; 0x02
    2cf6:	89 83       	std	Y+1, r24	; 0x01
    while(1)
    {
        wait_time(1);
    2cf8:	81 e0       	ldi	r24, 0x01	; 1
    2cfa:	90 e0       	ldi	r25, 0x00	; 0
    2cfc:	0e 94 bd 14 	call	0x297a	; 0x297a <wait_time>
        proc_reset_watchdog();
    2d00:	0e 94 ff 10 	call	0x21fe	; 0x21fe <proc_reset_watchdog>
        proc_self_stop();
    2d04:	0e 94 72 07 	call	0xee4	; 0xee4 <proc_self_stop>
    2d08:	f7 cf       	rjmp	.-18     	; 0x2cf8 <main2+0xe>

00002d0a <main3>:
    2d0a:	df 93       	push	r29
    2d0c:	cf 93       	push	r28
    2d0e:	00 d0       	rcall	.+0      	; 0x2d10 <main3+0x6>
    2d10:	cd b7       	in	r28, 0x3d	; 61
    2d12:	de b7       	in	r29, 0x3e	; 62
    2d14:	9a 83       	std	Y+2, r25	; 0x02
    2d16:	89 83       	std	Y+1, r24	; 0x01
    2d18:	84 ef       	ldi	r24, 0xF4	; 244
    2d1a:	91 e0       	ldi	r25, 0x01	; 1
    2d1c:	0e 94 bd 14 	call	0x297a	; 0x297a <wait_time>
    2d20:	0f 90       	pop	r0
    2d22:	0f 90       	pop	r0
    2d24:	cf 91       	pop	r28
    2d26:	df 91       	pop	r29
    2d28:	08 95       	ret

00002d2a <idle_main>:
void main3(void * t)
{
    wait_time(500);
}
void idle_main(void * t)
{
    2d2a:	8f 92       	push	r8
    2d2c:	af 92       	push	r10
    2d2e:	bf 92       	push	r11
    2d30:	cf 92       	push	r12
    2d32:	ef 92       	push	r14
    2d34:	ff 92       	push	r15
    2d36:	0f 93       	push	r16
    2d38:	1f 93       	push	r17
    2d3a:	df 93       	push	r29
    2d3c:	cf 93       	push	r28
    2d3e:	00 d0       	rcall	.+0      	; 0x2d40 <idle_main+0x16>
    2d40:	cd b7       	in	r28, 0x3d	; 61
    2d42:	de b7       	in	r29, 0x3e	; 62
    2d44:	9a 83       	std	Y+2, r25	; 0x02
    2d46:	89 83       	std	Y+1, r24	; 0x01
    // Insert code
    proc_init(&proc[3], main3, blink_4, blink_4, 0, &stack[3][127], 3, 4, 0);
    2d48:	8c e3       	ldi	r24, 0x3C	; 60
    2d4a:	92 e0       	ldi	r25, 0x02	; 2
    2d4c:	dc 01       	movw	r26, r24
    2d4e:	a1 50       	subi	r26, 0x01	; 1
    2d50:	be 4f       	sbci	r27, 0xFE	; 254
    2d52:	8e e0       	ldi	r24, 0x0E	; 14
    2d54:	92 e0       	ldi	r25, 0x02	; 2
    2d56:	25 e8       	ldi	r18, 0x85	; 133
    2d58:	36 e1       	ldi	r19, 0x16	; 22
    2d5a:	4e ed       	ldi	r20, 0xDE	; 222
    2d5c:	55 e1       	ldi	r21, 0x15	; 21
    2d5e:	ee ed       	ldi	r30, 0xDE	; 222
    2d60:	f5 e1       	ldi	r31, 0x15	; 21
    2d62:	b9 01       	movw	r22, r18
    2d64:	9f 01       	movw	r18, r30
    2d66:	00 e0       	ldi	r16, 0x00	; 0
    2d68:	10 e0       	ldi	r17, 0x00	; 0
    2d6a:	7d 01       	movw	r14, r26
    2d6c:	0f 2e       	mov	r0, r31
    2d6e:	f3 e0       	ldi	r31, 0x03	; 3
    2d70:	cf 2e       	mov	r12, r31
    2d72:	f0 2d       	mov	r31, r0
    2d74:	aa 24       	eor	r10, r10
    2d76:	bb 24       	eor	r11, r11
    2d78:	68 94       	set
    2d7a:	a2 f8       	bld	r10, 2
    2d7c:	88 24       	eor	r8, r8
    2d7e:	0e 94 64 06 	call	0xcc8	; 0xcc8 <proc_init>
    proc_run( &proc[3] );
    2d82:	8e e0       	ldi	r24, 0x0E	; 14
    2d84:	92 e0       	ldi	r25, 0x02	; 2
    2d86:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <proc_run>
    wait_time(1000);
    2d8a:	88 ee       	ldi	r24, 0xE8	; 232
    2d8c:	93 e0       	ldi	r25, 0x03	; 3
    2d8e:	0e 94 bd 14 	call	0x297a	; 0x297a <wait_time>
    proc_run( &proc[3] );
    2d92:	8e e0       	ldi	r24, 0x0E	; 14
    2d94:	92 e0       	ldi	r25, 0x02	; 2
    2d96:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <proc_run>
    wait_time(1000);
    2d9a:	88 ee       	ldi	r24, 0xE8	; 232
    2d9c:	93 e0       	ldi	r25, 0x03	; 3
    2d9e:	0e 94 bd 14 	call	0x297a	; 0x297a <wait_time>
    proc_restart( &proc[3] );
    2da2:	8e e0       	ldi	r24, 0x0E	; 14
    2da4:	92 e0       	ldi	r25, 0x02	; 2
    2da6:	0e 94 21 07 	call	0xe42	; 0xe42 <proc_restart>
    wait_time(500);
    2daa:	84 ef       	ldi	r24, 0xF4	; 244
    2dac:	91 e0       	ldi	r25, 0x01	; 1
    2dae:	0e 94 bd 14 	call	0x297a	; 0x297a <wait_time>
    proc_run( &proc[3] );
    2db2:	8e e0       	ldi	r24, 0x0E	; 14
    2db4:	92 e0       	ldi	r25, 0x02	; 2
    2db6:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <proc_run>
    while(1)
    {
         wait_time(1000);
    2dba:	88 ee       	ldi	r24, 0xE8	; 232
    2dbc:	93 e0       	ldi	r25, 0x03	; 3
    2dbe:	0e 94 bd 14 	call	0x297a	; 0x297a <wait_time>
         proc_run(&proc[2]);
    2dc2:	80 ee       	ldi	r24, 0xE0	; 224
    2dc4:	91 e0       	ldi	r25, 0x01	; 1
    2dc6:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <proc_run>
    2dca:	f7 cf       	rjmp	.-18     	; 0x2dba <idle_main+0x90>

00002dcc <main>:
    }
}

int main(void)
{
    2dcc:	8f 92       	push	r8
    2dce:	af 92       	push	r10
    2dd0:	bf 92       	push	r11
    2dd2:	cf 92       	push	r12
    2dd4:	ef 92       	push	r14
    2dd6:	ff 92       	push	r15
    2dd8:	0f 93       	push	r16
    2dda:	1f 93       	push	r17
    2ddc:	df 93       	push	r29
    2dde:	cf 93       	push	r28
    2de0:	cd b7       	in	r28, 0x3d	; 61
    2de2:	de b7       	in	r29, 0x3e	; 62
    init_bugurt();
    2de4:	0e 94 1e 05 	call	0xa3c	; 0xa3c <init_bugurt>

    TCCR2A = 0x02;//
    2de8:	e0 eb       	ldi	r30, 0xB0	; 176
    2dea:	f0 e0       	ldi	r31, 0x00	; 0
    2dec:	82 e0       	ldi	r24, 0x02	; 2
    2dee:	80 83       	st	Z, r24
    TCCR2B = 0x05;// prescaler=128
    2df0:	e1 eb       	ldi	r30, 0xB1	; 177
    2df2:	f0 e0       	ldi	r31, 0x00	; 0
    2df4:	85 e0       	ldi	r24, 0x05	; 5
    2df6:	80 83       	st	Z, r24
    OCR2A  = 124;
    2df8:	e3 eb       	ldi	r30, 0xB3	; 179
    2dfa:	f0 e0       	ldi	r31, 0x00	; 0
    2dfc:	8c e7       	ldi	r24, 0x7C	; 124
    2dfe:	80 83       	st	Z, r24
    OCR2B  = 0x00;
    2e00:	e4 eb       	ldi	r30, 0xB4	; 180
    2e02:	f0 e0       	ldi	r31, 0x00	; 0
    2e04:	10 82       	st	Z, r1
    TIMSK2 = 0x00; // shceduler not started
    2e06:	e0 e7       	ldi	r30, 0x70	; 112
    2e08:	f0 e0       	ldi	r31, 0x00	; 0
    2e0a:	10 82       	st	Z, r1
    TIFR2  = 0x00;
    2e0c:	e7 e3       	ldi	r30, 0x37	; 55
    2e0e:	f0 e0       	ldi	r31, 0x00	; 0
    2e10:	10 82       	st	Z, r1

    EICRA = 0x08; //falling edge
    2e12:	e9 e6       	ldi	r30, 0x69	; 105
    2e14:	f0 e0       	ldi	r31, 0x00	; 0
    2e16:	88 e0       	ldi	r24, 0x08	; 8
    2e18:	80 83       	st	Z, r24
    EIMSK = 0x02; //resched generates int1, mask 0x02
    2e1a:	ed e3       	ldi	r30, 0x3D	; 61
    2e1c:	f0 e0       	ldi	r31, 0x00	; 0
    2e1e:	82 e0       	ldi	r24, 0x02	; 2
    2e20:	80 83       	st	Z, r24
    EIFR  |= 0x02;
    2e22:	ac e3       	ldi	r26, 0x3C	; 60
    2e24:	b0 e0       	ldi	r27, 0x00	; 0
    2e26:	ec e3       	ldi	r30, 0x3C	; 60
    2e28:	f0 e0       	ldi	r31, 0x00	; 0
    2e2a:	80 81       	ld	r24, Z
    2e2c:	82 60       	ori	r24, 0x02	; 2
    2e2e:	8c 93       	st	X, r24

    DDRB = 0x3F;
    2e30:	e4 e2       	ldi	r30, 0x24	; 36
    2e32:	f0 e0       	ldi	r31, 0x00	; 0
    2e34:	8f e3       	ldi	r24, 0x3F	; 63
    2e36:	80 83       	st	Z, r24
    PORTB = 0x00;
    2e38:	e5 e2       	ldi	r30, 0x25	; 37
    2e3a:	f0 e0       	ldi	r31, 0x00	; 0
    2e3c:	10 82       	st	Z, r1
    DDRC = 0x3F;
    2e3e:	e7 e2       	ldi	r30, 0x27	; 39
    2e40:	f0 e0       	ldi	r31, 0x00	; 0
    2e42:	8f e3       	ldi	r24, 0x3F	; 63
    2e44:	80 83       	st	Z, r24
    PORTC = 0x00;
    2e46:	e8 e2       	ldi	r30, 0x28	; 40
    2e48:	f0 e0       	ldi	r31, 0x00	; 0
    2e4a:	10 82       	st	Z, r1
    DDRD = 0xFE;
    2e4c:	ea e2       	ldi	r30, 0x2A	; 42
    2e4e:	f0 e0       	ldi	r31, 0x00	; 0
    2e50:	8e ef       	ldi	r24, 0xFE	; 254
    2e52:	80 83       	st	Z, r24
    PORTD = 0x00;
    2e54:	eb e2       	ldi	r30, 0x2B	; 43
    2e56:	f0 e0       	ldi	r31, 0x00	; 0
    2e58:	10 82       	st	Z, r1

    G1_on();
    2e5a:	ab e2       	ldi	r26, 0x2B	; 43
    2e5c:	b0 e0       	ldi	r27, 0x00	; 0
    2e5e:	eb e2       	ldi	r30, 0x2B	; 43
    2e60:	f0 e0       	ldi	r31, 0x00	; 0
    2e62:	80 81       	ld	r24, Z
    2e64:	80 61       	ori	r24, 0x10	; 16
    2e66:	8c 93       	st	X, r24
    G2_on();
    2e68:	ab e2       	ldi	r26, 0x2B	; 43
    2e6a:	b0 e0       	ldi	r27, 0x00	; 0
    2e6c:	eb e2       	ldi	r30, 0x2B	; 43
    2e6e:	f0 e0       	ldi	r31, 0x00	; 0
    2e70:	80 81       	ld	r24, Z
    2e72:	88 60       	ori	r24, 0x08	; 8
    2e74:	8c 93       	st	X, r24
    R3_on();
    2e76:	ab e2       	ldi	r26, 0x2B	; 43
    2e78:	b0 e0       	ldi	r27, 0x00	; 0
    2e7a:	eb e2       	ldi	r30, 0x2B	; 43
    2e7c:	f0 e0       	ldi	r31, 0x00	; 0
    2e7e:	80 81       	ld	r24, Z
    2e80:	80 62       	ori	r24, 0x20	; 32
    2e82:	8c 93       	st	X, r24

    proc_init_isr(&proc[0], main0, blink_1, blink_1, 0, &stack[0][127], 1, 2, 0);
    2e84:	8c e3       	ldi	r24, 0x3C	; 60
    2e86:	92 e0       	ldi	r25, 0x02	; 2
    2e88:	dc 01       	movw	r26, r24
    2e8a:	a1 58       	subi	r26, 0x81	; 129
    2e8c:	bf 4f       	sbci	r27, 0xFF	; 255
    2e8e:	84 e8       	ldi	r24, 0x84	; 132
    2e90:	91 e0       	ldi	r25, 0x01	; 1
    2e92:	26 e1       	ldi	r18, 0x16	; 22
    2e94:	36 e1       	ldi	r19, 0x16	; 22
    2e96:	42 ea       	ldi	r20, 0xA2	; 162
    2e98:	55 e1       	ldi	r21, 0x15	; 21
    2e9a:	e2 ea       	ldi	r30, 0xA2	; 162
    2e9c:	f5 e1       	ldi	r31, 0x15	; 21
    2e9e:	b9 01       	movw	r22, r18
    2ea0:	9f 01       	movw	r18, r30
    2ea2:	00 e0       	ldi	r16, 0x00	; 0
    2ea4:	10 e0       	ldi	r17, 0x00	; 0
    2ea6:	7d 01       	movw	r14, r26
    2ea8:	cc 24       	eor	r12, r12
    2eaa:	c3 94       	inc	r12
    2eac:	aa 24       	eor	r10, r10
    2eae:	bb 24       	eor	r11, r11
    2eb0:	68 94       	set
    2eb2:	a1 f8       	bld	r10, 1
    2eb4:	88 24       	eor	r8, r8
    2eb6:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <proc_init_isr>
    proc_init_isr(&proc[1], main1, blink_2, blink_2, 0, &stack[1][127], 2, 3, 0);
    2eba:	8c e3       	ldi	r24, 0x3C	; 60
    2ebc:	92 e0       	ldi	r25, 0x02	; 2
    2ebe:	dc 01       	movw	r26, r24
    2ec0:	a1 50       	subi	r26, 0x01	; 1
    2ec2:	bf 4f       	sbci	r27, 0xFF	; 255
    2ec4:	82 eb       	ldi	r24, 0xB2	; 178
    2ec6:	91 e0       	ldi	r25, 0x01	; 1
    2ec8:	28 e5       	ldi	r18, 0x58	; 88
    2eca:	36 e1       	ldi	r19, 0x16	; 22
    2ecc:	46 eb       	ldi	r20, 0xB6	; 182
    2ece:	55 e1       	ldi	r21, 0x15	; 21
    2ed0:	e6 eb       	ldi	r30, 0xB6	; 182
    2ed2:	f5 e1       	ldi	r31, 0x15	; 21
    2ed4:	b9 01       	movw	r22, r18
    2ed6:	9f 01       	movw	r18, r30
    2ed8:	00 e0       	ldi	r16, 0x00	; 0
    2eda:	10 e0       	ldi	r17, 0x00	; 0
    2edc:	7d 01       	movw	r14, r26
    2ede:	cc 24       	eor	r12, r12
    2ee0:	68 94       	set
    2ee2:	c1 f8       	bld	r12, 1
    2ee4:	0f 2e       	mov	r0, r31
    2ee6:	f3 e0       	ldi	r31, 0x03	; 3
    2ee8:	af 2e       	mov	r10, r31
    2eea:	bb 24       	eor	r11, r11
    2eec:	f0 2d       	mov	r31, r0
    2eee:	88 24       	eor	r8, r8
    2ef0:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <proc_init_isr>
    proc_init_isr(&proc[2], main2, blink_3, blink_3, 0, &stack[2][127], 2, 4, 1);// Типа реального времени
    2ef4:	8c e3       	ldi	r24, 0x3C	; 60
    2ef6:	92 e0       	ldi	r25, 0x02	; 2
    2ef8:	dc 01       	movw	r26, r24
    2efa:	a1 58       	subi	r26, 0x81	; 129
    2efc:	be 4f       	sbci	r27, 0xFE	; 254
    2efe:	80 ee       	ldi	r24, 0xE0	; 224
    2f00:	91 e0       	ldi	r25, 0x01	; 1
    2f02:	25 e7       	ldi	r18, 0x75	; 117
    2f04:	36 e1       	ldi	r19, 0x16	; 22
    2f06:	4a ec       	ldi	r20, 0xCA	; 202
    2f08:	55 e1       	ldi	r21, 0x15	; 21
    2f0a:	ea ec       	ldi	r30, 0xCA	; 202
    2f0c:	f5 e1       	ldi	r31, 0x15	; 21
    2f0e:	b9 01       	movw	r22, r18
    2f10:	9f 01       	movw	r18, r30
    2f12:	00 e0       	ldi	r16, 0x00	; 0
    2f14:	10 e0       	ldi	r17, 0x00	; 0
    2f16:	7d 01       	movw	r14, r26
    2f18:	cc 24       	eor	r12, r12
    2f1a:	68 94       	set
    2f1c:	c1 f8       	bld	r12, 1
    2f1e:	aa 24       	eor	r10, r10
    2f20:	bb 24       	eor	r11, r11
    2f22:	68 94       	set
    2f24:	a2 f8       	bld	r10, 2
    2f26:	88 24       	eor	r8, r8
    2f28:	83 94       	inc	r8
    2f2a:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <proc_init_isr>
    //proc_init_isr(&proc[3], main3, blink_4, blink_4, 0, &stack[3][127], 3, 4, 0);

    kernel.idle.rs_hook = blink_12;
    2f2e:	82 ef       	ldi	r24, 0xF2	; 242
    2f30:	95 e1       	ldi	r25, 0x15	; 21
    2f32:	90 93 79 01 	sts	0x0179, r25
    2f36:	80 93 78 01 	sts	0x0178, r24
    kernel.idle.sv_hook = blink_12;
    2f3a:	82 ef       	ldi	r24, 0xF2	; 242
    2f3c:	95 e1       	ldi	r25, 0x15	; 21
    2f3e:	90 93 77 01 	sts	0x0177, r25
    2f42:	80 93 76 01 	sts	0x0176, r24

    proc_run_isr(&proc[0]);
    2f46:	84 e8       	ldi	r24, 0x84	; 132
    2f48:	91 e0       	ldi	r25, 0x01	; 1
    2f4a:	0e 94 4d 10 	call	0x209a	; 0x209a <proc_run_isr>
    proc_run_isr(&proc[1]);
    2f4e:	82 eb       	ldi	r24, 0xB2	; 178
    2f50:	91 e0       	ldi	r25, 0x01	; 1
    2f52:	0e 94 4d 10 	call	0x209a	; 0x209a <proc_run_isr>
    proc_run_isr(&proc[2]);
    2f56:	80 ee       	ldi	r24, 0xE0	; 224
    2f58:	91 e0       	ldi	r25, 0x01	; 1
    2f5a:	0e 94 4d 10 	call	0x209a	; 0x209a <proc_run_isr>
    //proc_run_isr(&proc[3]);

    start_bugurt();
    2f5e:	0e 94 2e 05 	call	0xa5c	; 0xa5c <start_bugurt>
    return 0;
    2f62:	80 e0       	ldi	r24, 0x00	; 0
    2f64:	90 e0       	ldi	r25, 0x00	; 0
}
    2f66:	cf 91       	pop	r28
    2f68:	df 91       	pop	r29
    2f6a:	1f 91       	pop	r17
    2f6c:	0f 91       	pop	r16
    2f6e:	ff 90       	pop	r15
    2f70:	ef 90       	pop	r14
    2f72:	cf 90       	pop	r12
    2f74:	bf 90       	pop	r11
    2f76:	af 90       	pop	r10
    2f78:	8f 90       	pop	r8
    2f7a:	08 95       	ret

00002f7c <__prologue_saves__>:
    2f7c:	2f 92       	push	r2
    2f7e:	3f 92       	push	r3
    2f80:	4f 92       	push	r4
    2f82:	5f 92       	push	r5
    2f84:	6f 92       	push	r6
    2f86:	7f 92       	push	r7
    2f88:	8f 92       	push	r8
    2f8a:	9f 92       	push	r9
    2f8c:	af 92       	push	r10
    2f8e:	bf 92       	push	r11
    2f90:	cf 92       	push	r12
    2f92:	df 92       	push	r13
    2f94:	ef 92       	push	r14
    2f96:	ff 92       	push	r15
    2f98:	0f 93       	push	r16
    2f9a:	1f 93       	push	r17
    2f9c:	cf 93       	push	r28
    2f9e:	df 93       	push	r29
    2fa0:	cd b7       	in	r28, 0x3d	; 61
    2fa2:	de b7       	in	r29, 0x3e	; 62
    2fa4:	ca 1b       	sub	r28, r26
    2fa6:	db 0b       	sbc	r29, r27
    2fa8:	0f b6       	in	r0, 0x3f	; 63
    2faa:	f8 94       	cli
    2fac:	de bf       	out	0x3e, r29	; 62
    2fae:	0f be       	out	0x3f, r0	; 63
    2fb0:	cd bf       	out	0x3d, r28	; 61
    2fb2:	09 94       	ijmp

00002fb4 <__epilogue_restores__>:
    2fb4:	2a 88       	ldd	r2, Y+18	; 0x12
    2fb6:	39 88       	ldd	r3, Y+17	; 0x11
    2fb8:	48 88       	ldd	r4, Y+16	; 0x10
    2fba:	5f 84       	ldd	r5, Y+15	; 0x0f
    2fbc:	6e 84       	ldd	r6, Y+14	; 0x0e
    2fbe:	7d 84       	ldd	r7, Y+13	; 0x0d
    2fc0:	8c 84       	ldd	r8, Y+12	; 0x0c
    2fc2:	9b 84       	ldd	r9, Y+11	; 0x0b
    2fc4:	aa 84       	ldd	r10, Y+10	; 0x0a
    2fc6:	b9 84       	ldd	r11, Y+9	; 0x09
    2fc8:	c8 84       	ldd	r12, Y+8	; 0x08
    2fca:	df 80       	ldd	r13, Y+7	; 0x07
    2fcc:	ee 80       	ldd	r14, Y+6	; 0x06
    2fce:	fd 80       	ldd	r15, Y+5	; 0x05
    2fd0:	0c 81       	ldd	r16, Y+4	; 0x04
    2fd2:	1b 81       	ldd	r17, Y+3	; 0x03
    2fd4:	aa 81       	ldd	r26, Y+2	; 0x02
    2fd6:	b9 81       	ldd	r27, Y+1	; 0x01
    2fd8:	ce 0f       	add	r28, r30
    2fda:	d1 1d       	adc	r29, r1
    2fdc:	0f b6       	in	r0, 0x3f	; 63
    2fde:	f8 94       	cli
    2fe0:	de bf       	out	0x3e, r29	; 62
    2fe2:	0f be       	out	0x3f, r0	; 63
    2fe4:	cd bf       	out	0x3d, r28	; 61
    2fe6:	ed 01       	movw	r28, r26
    2fe8:	08 95       	ret

00002fea <_exit>:
    2fea:	f8 94       	cli

00002fec <__stop_program>:
    2fec:	ff cf       	rjmp	.-2      	; 0x2fec <__stop_program>
