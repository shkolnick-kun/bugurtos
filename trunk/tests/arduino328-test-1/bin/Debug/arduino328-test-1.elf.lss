
bin/Debug/arduino328-test-1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000026d0  00002764  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000026d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003b1  00800102  00800102  00002766  2**0
                  ALLOC
  3 .stab         000071f4  00000000  00000000  00002768  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003674  00000000  00000000  0000995c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       8:	0c 94 0c 02 	jmp	0x418	; 0x418 <__vector_2>
       c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 39 01 	jmp	0x272	; 0x272 <__vector_7>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      54:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

00000068 <syscall_routine>:
      68:	69 02 b2 02 ea 02 21 03 3b 03 60 03 c3 03 d4 03     i.....!.;.`.....
      78:	e4 03 f4 03 04 04 14 04 2b 04 45 04 55 04 6b 04     ........+.E.U.k.
      88:	85 04 9f 04                                         ....

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e0 ed       	ldi	r30, 0xD0	; 208
      a0:	f6 e2       	ldi	r31, 0x26	; 38
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <.do_copy_data_start>

000000a4 <.do_copy_data_loop>:
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0

000000a8 <.do_copy_data_start>:
      a8:	a2 30       	cpi	r26, 0x02	; 2
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <.do_copy_data_loop>

000000ae <__do_clear_bss>:
      ae:	14 e0       	ldi	r17, 0x04	; 4
      b0:	a2 e0       	ldi	r26, 0x02	; 2
      b2:	b1 e0       	ldi	r27, 0x01	; 1
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	a3 3b       	cpi	r26, 0xB3	; 179
      ba:	b1 07       	cpc	r27, r17
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 75 12 	call	0x24ea	; 0x24ea <main>
      c2:	0c 94 66 13 	jmp	0x26cc	; 0x26cc <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <osbme_store_context>:
      ca:	2f 92       	push	r2
      cc:	2f b6       	in	r2, 0x3f	; 63
      ce:	2f 92       	push	r2
      d0:	3f 92       	push	r3
      d2:	4f 92       	push	r4
      d4:	5f 92       	push	r5
      d6:	6f 92       	push	r6
      d8:	7f 92       	push	r7
      da:	8f 92       	push	r8
      dc:	9f 92       	push	r9
      de:	af 92       	push	r10
      e0:	bf 92       	push	r11
      e2:	cf 92       	push	r12
      e4:	df 92       	push	r13
      e6:	ef 92       	push	r14
      e8:	ff 92       	push	r15
      ea:	0f 93       	push	r16
      ec:	1f 93       	push	r17
      ee:	2f 93       	push	r18
      f0:	3f 93       	push	r19
      f2:	4f 93       	push	r20
      f4:	5f 93       	push	r21
      f6:	6f 93       	push	r22
      f8:	7f 93       	push	r23
      fa:	8f 93       	push	r24
      fc:	9f 93       	push	r25
      fe:	af 93       	push	r26
     100:	bf 93       	push	r27
     102:	cf 93       	push	r28
     104:	df 93       	push	r29
     106:	ef 93       	push	r30
     108:	ff 93       	push	r31
     10a:	ed b7       	in	r30, 0x3d	; 61
     10c:	fe b7       	in	r31, 0x3e	; 62
     10e:	21 a1       	ldd	r18, Z+33	; 0x21
     110:	30 a1       	ldd	r19, Z+32	; 0x20
     112:	01 a2       	std	Z+33, r0	; 0x21
     114:	10 a2       	std	Z+32, r1	; 0x20
     116:	11 24       	eor	r1, r1
     118:	8d b7       	in	r24, 0x3d	; 61
     11a:	9e b7       	in	r25, 0x3e	; 62
     11c:	2f 93       	push	r18
     11e:	3f 93       	push	r19
     120:	08 95       	ret

00000122 <osbme_load_context>:
     122:	3f 91       	pop	r19
     124:	2f 91       	pop	r18
     126:	9e bf       	out	0x3e, r25	; 62
     128:	8d bf       	out	0x3d, r24	; 61
     12a:	fe b7       	in	r31, 0x3e	; 62
     12c:	ed b7       	in	r30, 0x3d	; 61
     12e:	10 a0       	ldd	r1, Z+32	; 0x20
     130:	01 a0       	ldd	r0, Z+33	; 0x21
     132:	30 a3       	std	Z+32, r19	; 0x20
     134:	21 a3       	std	Z+33, r18	; 0x21
     136:	ff 91       	pop	r31
     138:	ef 91       	pop	r30
     13a:	df 91       	pop	r29
     13c:	cf 91       	pop	r28
     13e:	bf 91       	pop	r27
     140:	af 91       	pop	r26
     142:	9f 91       	pop	r25
     144:	8f 91       	pop	r24
     146:	7f 91       	pop	r23
     148:	6f 91       	pop	r22
     14a:	5f 91       	pop	r21
     14c:	4f 91       	pop	r20
     14e:	3f 91       	pop	r19
     150:	2f 91       	pop	r18
     152:	1f 91       	pop	r17
     154:	0f 91       	pop	r16
     156:	ff 90       	pop	r15
     158:	ef 90       	pop	r14
     15a:	df 90       	pop	r13
     15c:	cf 90       	pop	r12
     15e:	bf 90       	pop	r11
     160:	af 90       	pop	r10
     162:	9f 90       	pop	r9
     164:	8f 90       	pop	r8
     166:	7f 90       	pop	r7
     168:	6f 90       	pop	r6
     16a:	5f 90       	pop	r5
     16c:	4f 90       	pop	r4
     16e:	3f 90       	pop	r3
     170:	2f 90       	pop	r2
     172:	2f be       	out	0x3f, r2	; 63
     174:	2f 90       	pop	r2
     176:	08 95       	ret

00000178 <disable_interrupts>:
//Внешние функции, специфичные для AVR
extern void start_scheduler( void );
extern void stop_scheduler( void );
// Просто функции, специфичные для AVR
void disable_interrupts(void)
{
     178:	df 93       	push	r29
     17a:	cf 93       	push	r28
     17c:	cd b7       	in	r28, 0x3d	; 61
     17e:	de b7       	in	r29, 0x3e	; 62
    cli();
     180:	f8 94       	cli
}
     182:	cf 91       	pop	r28
     184:	df 91       	pop	r29
     186:	08 95       	ret

00000188 <enable_interrupts>:
void enable_interrupts(void)
{
     188:	df 93       	push	r29
     18a:	cf 93       	push	r28
     18c:	cd b7       	in	r28, 0x3d	; 61
     18e:	de b7       	in	r29, 0x3e	; 62
    sei();
     190:	78 94       	sei
}
     192:	cf 91       	pop	r28
     194:	df 91       	pop	r29
     196:	08 95       	ret

00000198 <current_proc>:

proc_t * current_proc(void)
{
     198:	df 93       	push	r29
     19a:	cf 93       	push	r28
     19c:	cd b7       	in	r28, 0x3d	; 61
     19e:	de b7       	in	r29, 0x3e	; 62
    return kernel.sched.current_proc;
     1a0:	80 91 9f 01 	lds	r24, 0x019F
     1a4:	90 91 a0 01 	lds	r25, 0x01A0
}
     1a8:	cf 91       	pop	r28
     1aa:	df 91       	pop	r29
     1ac:	08 95       	ret

000001ae <proc_stack_init>:

void * proc_stack_init(stack_t * sstart, code_t code, void * arg)
{
     1ae:	df 93       	push	r29
     1b0:	cf 93       	push	r28
     1b2:	00 d0       	rcall	.+0      	; 0x1b4 <proc_stack_init+0x6>
     1b4:	00 d0       	rcall	.+0      	; 0x1b6 <proc_stack_init+0x8>
     1b6:	00 d0       	rcall	.+0      	; 0x1b8 <proc_stack_init+0xa>
     1b8:	cd b7       	in	r28, 0x3d	; 61
     1ba:	de b7       	in	r29, 0x3e	; 62
     1bc:	9a 83       	std	Y+2, r25	; 0x02
     1be:	89 83       	std	Y+1, r24	; 0x01
     1c0:	7c 83       	std	Y+4, r23	; 0x04
     1c2:	6b 83       	std	Y+3, r22	; 0x03
     1c4:	5e 83       	std	Y+6, r21	; 0x06
     1c6:	4d 83       	std	Y+5, r20	; 0x05
    return osbme_init_stack( (void *)sstart, (osbme_code_t)proc_run_wrapper, (void *)arg );
     1c8:	48 e9       	ldi	r20, 0x98	; 152
     1ca:	53 e0       	ldi	r21, 0x03	; 3
     1cc:	89 81       	ldd	r24, Y+1	; 0x01
     1ce:	9a 81       	ldd	r25, Y+2	; 0x02
     1d0:	2d 81       	ldd	r18, Y+5	; 0x05
     1d2:	3e 81       	ldd	r19, Y+6	; 0x06
     1d4:	ba 01       	movw	r22, r20
     1d6:	a9 01       	movw	r20, r18
     1d8:	0e 94 af 04 	call	0x95e	; 0x95e <osbme_init_stack>
}
     1dc:	26 96       	adiw	r28, 0x06	; 6
     1de:	0f b6       	in	r0, 0x3f	; 63
     1e0:	f8 94       	cli
     1e2:	de bf       	out	0x3e, r29	; 62
     1e4:	0f be       	out	0x3f, r0	; 63
     1e6:	cd bf       	out	0x3d, r28	; 61
     1e8:	cf 91       	pop	r28
     1ea:	df 91       	pop	r29
     1ec:	08 95       	ret

000001ee <resched>:
//Через этот указатель будет вызываться обработчик прерывания
void (*kernel_isr)(void);

// Функция перепланировки
void resched(void)
{
     1ee:	df 93       	push	r29
     1f0:	cf 93       	push	r28
     1f2:	cd b7       	in	r28, 0x3d	; 61
     1f4:	de b7       	in	r29, 0x3e	; 62
    resched_flag = (bool_t)1;
     1f6:	81 e0       	ldi	r24, 0x01	; 1
     1f8:	80 93 00 01 	sts	0x0100, r24
}
     1fc:	cf 91       	pop	r28
     1fe:	df 91       	pop	r29
     200:	08 95       	ret

00000202 <kernel_process_switch>:

__attribute__((naked)) void kernel_process_switch(void)
{
    //Сразу же после обработки отложенных прерываний передаем управление процессу
    kernel_sp = osbme_store_context();
     202:	0e 94 65 00 	call	0xca	; 0xca <osbme_store_context>
     206:	90 93 9e 01 	sts	0x019E, r25
     20a:	80 93 9d 01 	sts	0x019D, r24
    osbme_load_context( proc_sp );
     20e:	80 91 9b 01 	lds	r24, 0x019B
     212:	90 91 9c 01 	lds	r25, 0x019C
     216:	0e 94 91 00 	call	0x122	; 0x122 <osbme_load_context>
    __asm__ __volatile__("reti"::);/// Дада, именно reti, мы же типа прерывания счас обрабатывали
     21a:	18 95       	reti

0000021c <kernel_thread>:
    osbme_load_context( kernel_sp );
    __asm__ __volatile__("ret"::);
}
///================================================================
void kernel_thread(void)
{
     21c:	df 93       	push	r29
     21e:	cf 93       	push	r28
     220:	cd b7       	in	r28, 0x3d	; 61
     222:	de b7       	in	r29, 0x3e	; 62
    while(1)
    {
        // Если надо перепланировать - перепланируем
        if( resched_flag != (bool_t)0 )
     224:	80 91 00 01 	lds	r24, 0x0100
     228:	88 23       	and	r24, r24
     22a:	61 f0       	breq	.+24     	; 0x244 <kernel_thread+0x28>
        {
            resched_flag = (bool_t)0;
     22c:	10 92 00 01 	sts	0x0100, r1
            proc_sp = sched_reschedule( proc_sp );
     230:	80 91 9b 01 	lds	r24, 0x019B
     234:	90 91 9c 01 	lds	r25, 0x019C
     238:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <sched_reschedule>
     23c:	90 93 9c 01 	sts	0x019C, r25
     240:	80 93 9b 01 	sts	0x019B, r24
        }
        /// Прямая передача управления от ядра к процессу, прерывания запрещены
        kernel_process_switch();//В результате выполнения этого прерывания будут разрешены
     244:	0e 94 01 01 	call	0x202	; 0x202 <kernel_process_switch>
        /// Сюда можно попасть только из прерывания, либо из процесса, при этом прерывания опять таки запрещены

        #ifdef SYSCALL_ISR
        if( syscall_flags & SYSCALL_FLG_GET_DATA )
     248:	80 91 05 01 	lds	r24, 0x0105
     24c:	88 2f       	mov	r24, r24
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	82 70       	andi	r24, 0x02	; 2
     252:	90 70       	andi	r25, 0x00	; 0
     254:	00 97       	sbiw	r24, 0x00	; 0
     256:	39 f0       	breq	.+14     	; 0x266 <kernel_thread+0x4a>
        {
            syscall_data_get();
     258:	0e 94 ce 01 	call	0x39c	; 0x39c <syscall_data_get>
            syscall_flags &= ~SYSCALL_FLG_GET_DATA;
     25c:	80 91 05 01 	lds	r24, 0x0105
     260:	8d 7f       	andi	r24, 0xFD	; 253
     262:	80 93 05 01 	sts	0x0105, r24
        }
        #endif

        // Обработка прерывания
        kernel_isr();
     266:	e0 91 99 01 	lds	r30, 0x0199
     26a:	f0 91 9a 01 	lds	r31, 0x019A
     26e:	09 95       	icall
     270:	d9 cf       	rjmp	.-78     	; 0x224 <kernel_thread+0x8>

00000272 <__vector_7>:
    }
}

// А вот и первое определение обработчика прерывания
BUGURT_INTERRUPT(SYSTEM_TIMER_ISR)
     272:	0e 94 65 00 	call	0xca	; 0xca <osbme_store_context>
     276:	90 93 9c 01 	sts	0x019C, r25
     27a:	80 93 9b 01 	sts	0x019B, r24
     27e:	8c e4       	ldi	r24, 0x4C	; 76
     280:	91 e0       	ldi	r25, 0x01	; 1
     282:	90 93 9a 01 	sts	0x019A, r25
     286:	80 93 99 01 	sts	0x0199, r24
     28a:	80 91 9d 01 	lds	r24, 0x019D
     28e:	90 91 9e 01 	lds	r25, 0x019E
     292:	0e 94 91 00 	call	0x122	; 0x122 <osbme_load_context>
     296:	08 95       	ret

00000298 <__vector_7_func>:
{
     298:	df 93       	push	r29
     29a:	cf 93       	push	r28
     29c:	cd b7       	in	r28, 0x3d	; 61
     29e:	de b7       	in	r29, 0x3e	; 62
    kernel.timer++;
     2a0:	80 91 f9 01 	lds	r24, 0x01F9
     2a4:	90 91 fa 01 	lds	r25, 0x01FA
     2a8:	01 96       	adiw	r24, 0x01	; 1
     2aa:	90 93 fa 01 	sts	0x01FA, r25
     2ae:	80 93 f9 01 	sts	0x01F9, r24
    proc_sp = sched_schedule( proc_sp );
     2b2:	80 91 9b 01 	lds	r24, 0x019B
     2b6:	90 91 9c 01 	lds	r25, 0x019C
     2ba:	0e 94 75 0e 	call	0x1cea	; 0x1cea <sched_schedule>
     2be:	90 93 9c 01 	sts	0x019C, r25
     2c2:	80 93 9b 01 	sts	0x019B, r24
}
     2c6:	cf 91       	pop	r28
     2c8:	df 91       	pop	r29
     2ca:	08 95       	ret

000002cc <init_bugurt>:

/***************************************************************************************************************/
// Функции общего пользования

void init_bugurt(void)
{
     2cc:	df 93       	push	r29
     2ce:	cf 93       	push	r28
     2d0:	cd b7       	in	r28, 0x3d	; 61
     2d2:	de b7       	in	r29, 0x3e	; 62
    cli();
     2d4:	f8 94       	cli
    kernel_init();
     2d6:	0e 94 b1 09 	call	0x1362	; 0x1362 <kernel_init>
    proc_sp = osbme_init_stack( &idle_stack[CONFIG_IDLE_STACK_SIZE-1], idle_main, 0);
     2da:	88 e9       	ldi	r24, 0x98	; 152
     2dc:	91 e0       	ldi	r25, 0x01	; 1
     2de:	2d e4       	ldi	r18, 0x4D	; 77
     2e0:	32 e1       	ldi	r19, 0x12	; 18
     2e2:	b9 01       	movw	r22, r18
     2e4:	40 e0       	ldi	r20, 0x00	; 0
     2e6:	50 e0       	ldi	r21, 0x00	; 0
     2e8:	0e 94 af 04 	call	0x95e	; 0x95e <osbme_init_stack>
     2ec:	90 93 9c 01 	sts	0x019C, r25
     2f0:	80 93 9b 01 	sts	0x019B, r24
    kernel.idle.spointer = proc_sp;
     2f4:	80 91 9b 01 	lds	r24, 0x019B
     2f8:	90 91 9c 01 	lds	r25, 0x019C
     2fc:	90 93 f6 01 	sts	0x01F6, r25
     300:	80 93 f5 01 	sts	0x01F5, r24
    kernel.sched.nested_crit_sec = (count_t)1;
     304:	81 e0       	ldi	r24, 0x01	; 1
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	90 93 c8 01 	sts	0x01C8, r25
     30c:	80 93 c7 01 	sts	0x01C7, r24
}
     310:	cf 91       	pop	r28
     312:	df 91       	pop	r29
     314:	08 95       	ret

00000316 <start_bugurt>:
void start_bugurt(void)
{
     316:	df 93       	push	r29
     318:	cf 93       	push	r28
     31a:	cd b7       	in	r28, 0x3d	; 61
     31c:	de b7       	in	r29, 0x3e	; 62
    start_scheduler();
     31e:	0e 94 85 11 	call	0x230a	; 0x230a <start_scheduler>
    kernel.sched.nested_crit_sec = (count_t)0;
     322:	10 92 c8 01 	sts	0x01C8, r1
     326:	10 92 c7 01 	sts	0x01C7, r1
    kernel_thread();
     32a:	0e 94 0e 01 	call	0x21c	; 0x21c <kernel_thread>
}
     32e:	cf 91       	pop	r28
     330:	df 91       	pop	r29
     332:	08 95       	ret

00000334 <do_syscall>:
    scall_mutex_try_lock,
    scall_mutex_unlock
};

void do_syscall(void)
{
     334:	df 93       	push	r29
     336:	cf 93       	push	r28
     338:	00 d0       	rcall	.+0      	; 0x33a <do_syscall+0x6>
     33a:	00 d0       	rcall	.+0      	; 0x33c <do_syscall+0x8>
     33c:	00 d0       	rcall	.+0      	; 0x33e <do_syscall+0xa>
     33e:	cd b7       	in	r28, 0x3d	; 61
     340:	de b7       	in	r29, 0x3e	; 62
    if( syscall_num != (unsigned char)0 )
     342:	80 91 02 01 	lds	r24, 0x0102
     346:	88 23       	and	r24, r24
     348:	01 f1       	breq	.+64     	; 0x38a <do_syscall+0x56>
    {
        code_t syscall_func;
        syscall_func = (code_t)pgm_read_word(syscall_routine + syscall_num);
     34a:	80 91 02 01 	lds	r24, 0x0102
     34e:	88 2f       	mov	r24, r24
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	88 0f       	add	r24, r24
     354:	99 1f       	adc	r25, r25
     356:	88 59       	subi	r24, 0x98	; 152
     358:	9f 4f       	sbci	r25, 0xFF	; 255
     35a:	9c 83       	std	Y+4, r25	; 0x04
     35c:	8b 83       	std	Y+3, r24	; 0x03
     35e:	8b 81       	ldd	r24, Y+3	; 0x03
     360:	9c 81       	ldd	r25, Y+4	; 0x04
     362:	fc 01       	movw	r30, r24
     364:	85 91       	lpm	r24, Z+
     366:	94 91       	lpm	r25, Z+
     368:	9a 83       	std	Y+2, r25	; 0x02
     36a:	89 83       	std	Y+1, r24	; 0x01
     36c:	fc 83       	std	Y+4, r31	; 0x04
     36e:	eb 83       	std	Y+3, r30	; 0x03
     370:	89 81       	ldd	r24, Y+1	; 0x01
     372:	9a 81       	ldd	r25, Y+2	; 0x02
     374:	9e 83       	std	Y+6, r25	; 0x06
     376:	8d 83       	std	Y+5, r24	; 0x05
        syscall_func(syscall_arg);
     378:	80 91 03 01 	lds	r24, 0x0103
     37c:	90 91 04 01 	lds	r25, 0x0104
     380:	ed 81       	ldd	r30, Y+5	; 0x05
     382:	fe 81       	ldd	r31, Y+6	; 0x06
     384:	09 95       	icall
        syscall_num = (unsigned char)0;
     386:	10 92 02 01 	sts	0x0102, r1
    }
}
     38a:	26 96       	adiw	r28, 0x06	; 6
     38c:	0f b6       	in	r0, 0x3f	; 63
     38e:	f8 94       	cli
     390:	de bf       	out	0x3e, r29	; 62
     392:	0f be       	out	0x3f, r0	; 63
     394:	cd bf       	out	0x3d, r28	; 61
     396:	cf 91       	pop	r28
     398:	df 91       	pop	r29
     39a:	08 95       	ret

0000039c <syscall_data_get>:
} syscall_data_t;

unsigned char syscall_flags = (unsigned char)0;

void syscall_data_get(void)
{
     39c:	df 93       	push	r29
     39e:	cf 93       	push	r28
     3a0:	00 d0       	rcall	.+0      	; 0x3a2 <syscall_data_get+0x6>
     3a2:	00 d0       	rcall	.+0      	; 0x3a4 <syscall_data_get+0x8>
     3a4:	cd b7       	in	r28, 0x3d	; 61
     3a6:	de b7       	in	r29, 0x3e	; 62
    unsigned char * tos;
    unsigned short temp;
    /// Извлечение syscall_num и syscall_arg из стека процесса
    tos = (unsigned char *)proc_sp + PROC_STACK_OFFSET;
     3a8:	80 91 9b 01 	lds	r24, 0x019B
     3ac:	90 91 9c 01 	lds	r25, 0x019C
     3b0:	07 96       	adiw	r24, 0x07	; 7
     3b2:	9c 83       	std	Y+4, r25	; 0x04
     3b4:	8b 83       	std	Y+3, r24	; 0x03
    temp = (unsigned short)*tos++;
     3b6:	eb 81       	ldd	r30, Y+3	; 0x03
     3b8:	fc 81       	ldd	r31, Y+4	; 0x04
     3ba:	80 81       	ld	r24, Z
     3bc:	88 2f       	mov	r24, r24
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	9a 83       	std	Y+2, r25	; 0x02
     3c2:	89 83       	std	Y+1, r24	; 0x01
     3c4:	8b 81       	ldd	r24, Y+3	; 0x03
     3c6:	9c 81       	ldd	r25, Y+4	; 0x04
     3c8:	01 96       	adiw	r24, 0x01	; 1
     3ca:	9c 83       	std	Y+4, r25	; 0x04
     3cc:	8b 83       	std	Y+3, r24	; 0x03
    temp <<= 8;
     3ce:	89 81       	ldd	r24, Y+1	; 0x01
     3d0:	9a 81       	ldd	r25, Y+2	; 0x02
     3d2:	98 2f       	mov	r25, r24
     3d4:	88 27       	eor	r24, r24
     3d6:	9a 83       	std	Y+2, r25	; 0x02
     3d8:	89 83       	std	Y+1, r24	; 0x01
    temp |= (unsigned short)*tos;
     3da:	eb 81       	ldd	r30, Y+3	; 0x03
     3dc:	fc 81       	ldd	r31, Y+4	; 0x04
     3de:	80 81       	ld	r24, Z
     3e0:	28 2f       	mov	r18, r24
     3e2:	30 e0       	ldi	r19, 0x00	; 0
     3e4:	89 81       	ldd	r24, Y+1	; 0x01
     3e6:	9a 81       	ldd	r25, Y+2	; 0x02
     3e8:	82 2b       	or	r24, r18
     3ea:	93 2b       	or	r25, r19
     3ec:	9a 83       	std	Y+2, r25	; 0x02
     3ee:	89 83       	std	Y+1, r24	; 0x01

    syscall_num = ((syscall_data_t *)temp)->num;
     3f0:	e9 81       	ldd	r30, Y+1	; 0x01
     3f2:	fa 81       	ldd	r31, Y+2	; 0x02
     3f4:	80 81       	ld	r24, Z
     3f6:	80 93 02 01 	sts	0x0102, r24
    syscall_arg = ((syscall_data_t *)temp)->arg;
     3fa:	e9 81       	ldd	r30, Y+1	; 0x01
     3fc:	fa 81       	ldd	r31, Y+2	; 0x02
     3fe:	81 81       	ldd	r24, Z+1	; 0x01
     400:	92 81       	ldd	r25, Z+2	; 0x02
     402:	90 93 04 01 	sts	0x0104, r25
     406:	80 93 03 01 	sts	0x0103, r24
}
     40a:	0f 90       	pop	r0
     40c:	0f 90       	pop	r0
     40e:	0f 90       	pop	r0
     410:	0f 90       	pop	r0
     412:	cf 91       	pop	r28
     414:	df 91       	pop	r29
     416:	08 95       	ret

00000418 <__vector_2>:

BUGURT_INTERRUPT(SYSCALL_ISR)
     418:	0e 94 65 00 	call	0xca	; 0xca <osbme_store_context>
     41c:	90 93 9c 01 	sts	0x019C, r25
     420:	80 93 9b 01 	sts	0x019B, r24
     424:	8f e1       	ldi	r24, 0x1F	; 31
     426:	92 e0       	ldi	r25, 0x02	; 2
     428:	90 93 9a 01 	sts	0x019A, r25
     42c:	80 93 99 01 	sts	0x0199, r24
     430:	80 91 9d 01 	lds	r24, 0x019D
     434:	90 91 9e 01 	lds	r25, 0x019E
     438:	0e 94 91 00 	call	0x122	; 0x122 <osbme_load_context>
     43c:	08 95       	ret

0000043e <__vector_2_func>:
{
     43e:	df 93       	push	r29
     440:	cf 93       	push	r28
     442:	cd b7       	in	r28, 0x3d	; 61
     444:	de b7       	in	r29, 0x3e	; 62
    temp |= (unsigned short)*tos;

    syscall_num = ((syscall_data_t *)temp)->num;
    syscall_arg = ((syscall_data_t *)temp)->arg;
    */
    do_syscall();
     446:	0e 94 9a 01 	call	0x334	; 0x334 <do_syscall>
    syscall_flags &= ~SYSCALL_FLG_DO_SCALL;
     44a:	80 91 05 01 	lds	r24, 0x0105
     44e:	8e 7f       	andi	r24, 0xFE	; 254
     450:	80 93 05 01 	sts	0x0105, r24

}
     454:	cf 91       	pop	r28
     456:	df 91       	pop	r29
     458:	08 95       	ret

0000045a <_syscall>:

syscall_data_t * _syscall( syscall_data_t * arg )
{
     45a:	df 93       	push	r29
     45c:	cf 93       	push	r28
     45e:	00 d0       	rcall	.+0      	; 0x460 <_syscall+0x6>
     460:	cd b7       	in	r28, 0x3d	; 61
     462:	de b7       	in	r29, 0x3e	; 62
     464:	9a 83       	std	Y+2, r25	; 0x02
     466:	89 83       	std	Y+1, r24	; 0x01
    cli();
     468:	f8 94       	cli
    syscall_flags = (SYSCALL_FLG_DO_SCALL | SYSCALL_FLG_GET_DATA);
     46a:	83 e0       	ldi	r24, 0x03	; 3
     46c:	80 93 05 01 	sts	0x0105, r24
    raise_syscall_interrupt();
     470:	0e 94 62 11 	call	0x22c4	; 0x22c4 <raise_syscall_interrupt>
    sei();
     474:	78 94       	sei
    return arg;
     476:	89 81       	ldd	r24, Y+1	; 0x01
     478:	9a 81       	ldd	r25, Y+2	; 0x02
}
     47a:	0f 90       	pop	r0
     47c:	0f 90       	pop	r0
     47e:	cf 91       	pop	r28
     480:	df 91       	pop	r29
     482:	08 95       	ret

00000484 <syscall>:

static syscall_data_t scdata;
void syscall( unsigned char num, void * arg )
{
     484:	df 93       	push	r29
     486:	cf 93       	push	r28
     488:	00 d0       	rcall	.+0      	; 0x48a <syscall+0x6>
     48a:	0f 92       	push	r0
     48c:	cd b7       	in	r28, 0x3d	; 61
     48e:	de b7       	in	r29, 0x3e	; 62
     490:	89 83       	std	Y+1, r24	; 0x01
     492:	7b 83       	std	Y+3, r23	; 0x03
     494:	6a 83       	std	Y+2, r22	; 0x02
     scdata.num = num;
     496:	89 81       	ldd	r24, Y+1	; 0x01
     498:	80 93 16 01 	sts	0x0116, r24
     scdata.arg = arg;
     49c:	8a 81       	ldd	r24, Y+2	; 0x02
     49e:	9b 81       	ldd	r25, Y+3	; 0x03
     4a0:	90 93 18 01 	sts	0x0118, r25
     4a4:	80 93 17 01 	sts	0x0117, r24
     _syscall( &scdata );
     4a8:	86 e1       	ldi	r24, 0x16	; 22
     4aa:	91 e0       	ldi	r25, 0x01	; 1
     4ac:	0e 94 2d 02 	call	0x45a	; 0x45a <_syscall>
     SYSCALL_DELLAY();
     4b0:	00 00       	nop
     4b2:	00 00       	nop
     4b4:	00 00       	nop
     while( syscall_flags & SYSCALL_FLG_DO_SCALL );
     4b6:	80 91 05 01 	lds	r24, 0x0105
     4ba:	88 2f       	mov	r24, r24
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	81 70       	andi	r24, 0x01	; 1
     4c0:	90 70       	andi	r25, 0x00	; 0
     4c2:	88 23       	and	r24, r24
     4c4:	c1 f7       	brne	.-16     	; 0x4b6 <syscall+0x32>
}
     4c6:	0f 90       	pop	r0
     4c8:	0f 90       	pop	r0
     4ca:	0f 90       	pop	r0
     4cc:	cf 91       	pop	r28
     4ce:	df 91       	pop	r29
     4d0:	08 95       	ret

000004d2 <scall_proc_init>:
///                 ОБРАБОТЧИКИ СИСТЕМНЫХ ВЫЗОВОВ
///=================================================================
///                   Управление процессами
//0
void scall_proc_init( void * arg )
{
     4d2:	8f 92       	push	r8
     4d4:	af 92       	push	r10
     4d6:	bf 92       	push	r11
     4d8:	cf 92       	push	r12
     4da:	df 92       	push	r13
     4dc:	ef 92       	push	r14
     4de:	ff 92       	push	r15
     4e0:	0f 93       	push	r16
     4e2:	1f 93       	push	r17
     4e4:	df 93       	push	r29
     4e6:	cf 93       	push	r28
     4e8:	00 d0       	rcall	.+0      	; 0x4ea <scall_proc_init+0x18>
     4ea:	cd b7       	in	r28, 0x3d	; 61
     4ec:	de b7       	in	r29, 0x3e	; 62
     4ee:	9a 83       	std	Y+2, r25	; 0x02
     4f0:	89 83       	std	Y+1, r24	; 0x01
    proc_init_isr(
     4f2:	e9 81       	ldd	r30, Y+1	; 0x01
     4f4:	fa 81       	ldd	r31, Y+2	; 0x02
     4f6:	80 81       	ld	r24, Z
     4f8:	91 81       	ldd	r25, Z+1	; 0x01
     4fa:	e9 81       	ldd	r30, Y+1	; 0x01
     4fc:	fa 81       	ldd	r31, Y+2	; 0x02
     4fe:	22 81       	ldd	r18, Z+2	; 0x02
     500:	33 81       	ldd	r19, Z+3	; 0x03
     502:	e9 81       	ldd	r30, Y+1	; 0x01
     504:	fa 81       	ldd	r31, Y+2	; 0x02
     506:	44 81       	ldd	r20, Z+4	; 0x04
     508:	55 81       	ldd	r21, Z+5	; 0x05
     50a:	e9 81       	ldd	r30, Y+1	; 0x01
     50c:	fa 81       	ldd	r31, Y+2	; 0x02
     50e:	06 81       	ldd	r16, Z+6	; 0x06
     510:	17 81       	ldd	r17, Z+7	; 0x07
     512:	e9 81       	ldd	r30, Y+1	; 0x01
     514:	fa 81       	ldd	r31, Y+2	; 0x02
     516:	e0 84       	ldd	r14, Z+8	; 0x08
     518:	f1 84       	ldd	r15, Z+9	; 0x09
     51a:	e9 81       	ldd	r30, Y+1	; 0x01
     51c:	fa 81       	ldd	r31, Y+2	; 0x02
     51e:	c2 84       	ldd	r12, Z+10	; 0x0a
     520:	d3 84       	ldd	r13, Z+11	; 0x0b
     522:	e9 81       	ldd	r30, Y+1	; 0x01
     524:	fa 81       	ldd	r31, Y+2	; 0x02
     526:	b4 84       	ldd	r11, Z+12	; 0x0c
     528:	e9 81       	ldd	r30, Y+1	; 0x01
     52a:	fa 81       	ldd	r31, Y+2	; 0x02
     52c:	a5 85       	ldd	r26, Z+13	; 0x0d
     52e:	b6 85       	ldd	r27, Z+14	; 0x0e
     530:	e9 81       	ldd	r30, Y+1	; 0x01
     532:	fa 81       	ldd	r31, Y+2	; 0x02
     534:	e7 85       	ldd	r30, Z+15	; 0x0f
     536:	b9 01       	movw	r22, r18
     538:	98 01       	movw	r18, r16
     53a:	87 01       	movw	r16, r14
     53c:	76 01       	movw	r14, r12
     53e:	cb 2c       	mov	r12, r11
     540:	5d 01       	movw	r10, r26
     542:	8e 2e       	mov	r8, r30
     544:	0e 94 87 0b 	call	0x170e	; 0x170e <proc_init_isr>
              ((proc_init_arg_t *)arg)->sstart,
              ((proc_init_arg_t *)arg)->prio,
              ((proc_init_arg_t *)arg)->time_quant,
              ((proc_init_arg_t *)arg)->is_rt
              );
}
     548:	0f 90       	pop	r0
     54a:	0f 90       	pop	r0
     54c:	cf 91       	pop	r28
     54e:	df 91       	pop	r29
     550:	1f 91       	pop	r17
     552:	0f 91       	pop	r16
     554:	ff 90       	pop	r15
     556:	ef 90       	pop	r14
     558:	df 90       	pop	r13
     55a:	cf 90       	pop	r12
     55c:	bf 90       	pop	r11
     55e:	af 90       	pop	r10
     560:	8f 90       	pop	r8
     562:	08 95       	ret

00000564 <scall_proc_run>:
    syscall(0,(void *)&scarg);
}
//---------------------------------------------------------------------------------------------
//1
void scall_proc_run( void * arg )
{
     564:	0f 93       	push	r16
     566:	1f 93       	push	r17
     568:	df 93       	push	r29
     56a:	cf 93       	push	r28
     56c:	00 d0       	rcall	.+0      	; 0x56e <scall_proc_run+0xa>
     56e:	cd b7       	in	r28, 0x3d	; 61
     570:	de b7       	in	r29, 0x3e	; 62
     572:	9a 83       	std	Y+2, r25	; 0x02
     574:	89 83       	std	Y+1, r24	; 0x01
    ((proc_runtime_arg_t *)arg)->scall_ret = proc_run_isr( ((proc_runtime_arg_t *)arg)->proc );
     576:	09 81       	ldd	r16, Y+1	; 0x01
     578:	1a 81       	ldd	r17, Y+2	; 0x02
     57a:	e9 81       	ldd	r30, Y+1	; 0x01
     57c:	fa 81       	ldd	r31, Y+2	; 0x02
     57e:	80 81       	ld	r24, Z
     580:	91 81       	ldd	r25, Z+1	; 0x01
     582:	0e 94 2d 0c 	call	0x185a	; 0x185a <proc_run_isr>
     586:	f8 01       	movw	r30, r16
     588:	82 83       	std	Z+2, r24	; 0x02
}
     58a:	0f 90       	pop	r0
     58c:	0f 90       	pop	r0
     58e:	cf 91       	pop	r28
     590:	df 91       	pop	r29
     592:	1f 91       	pop	r17
     594:	0f 91       	pop	r16
     596:	08 95       	ret

00000598 <proc_run>:
bool_t proc_run( proc_t * proc )
{
     598:	df 93       	push	r29
     59a:	cf 93       	push	r28
     59c:	00 d0       	rcall	.+0      	; 0x59e <proc_run+0x6>
     59e:	00 d0       	rcall	.+0      	; 0x5a0 <proc_run+0x8>
     5a0:	0f 92       	push	r0
     5a2:	cd b7       	in	r28, 0x3d	; 61
     5a4:	de b7       	in	r29, 0x3e	; 62
     5a6:	9d 83       	std	Y+5, r25	; 0x05
     5a8:	8c 83       	std	Y+4, r24	; 0x04
    proc_runtime_arg_t scarg;
    scarg.proc = proc;
     5aa:	8c 81       	ldd	r24, Y+4	; 0x04
     5ac:	9d 81       	ldd	r25, Y+5	; 0x05
     5ae:	9a 83       	std	Y+2, r25	; 0x02
     5b0:	89 83       	std	Y+1, r24	; 0x01
    scarg.scall_ret = (bool_t)0;
     5b2:	1b 82       	std	Y+3, r1	; 0x03

    syscall(1,(void *)&scarg);
     5b4:	81 e0       	ldi	r24, 0x01	; 1
     5b6:	9e 01       	movw	r18, r28
     5b8:	2f 5f       	subi	r18, 0xFF	; 255
     5ba:	3f 4f       	sbci	r19, 0xFF	; 255
     5bc:	b9 01       	movw	r22, r18
     5be:	0e 94 42 02 	call	0x484	; 0x484 <syscall>
    return scarg.scall_ret;
     5c2:	8b 81       	ldd	r24, Y+3	; 0x03
}
     5c4:	0f 90       	pop	r0
     5c6:	0f 90       	pop	r0
     5c8:	0f 90       	pop	r0
     5ca:	0f 90       	pop	r0
     5cc:	0f 90       	pop	r0
     5ce:	cf 91       	pop	r28
     5d0:	df 91       	pop	r29
     5d2:	08 95       	ret

000005d4 <scall_proc_restart>:
//---------------------------------------------------------------------------------------------
//2
void scall_proc_restart( void * arg )
{
     5d4:	0f 93       	push	r16
     5d6:	1f 93       	push	r17
     5d8:	df 93       	push	r29
     5da:	cf 93       	push	r28
     5dc:	00 d0       	rcall	.+0      	; 0x5de <scall_proc_restart+0xa>
     5de:	cd b7       	in	r28, 0x3d	; 61
     5e0:	de b7       	in	r29, 0x3e	; 62
     5e2:	9a 83       	std	Y+2, r25	; 0x02
     5e4:	89 83       	std	Y+1, r24	; 0x01
    ((proc_runtime_arg_t *)arg)->scall_ret = proc_restart_isr( ((proc_runtime_arg_t *)arg)->proc );
     5e6:	09 81       	ldd	r16, Y+1	; 0x01
     5e8:	1a 81       	ldd	r17, Y+2	; 0x02
     5ea:	e9 81       	ldd	r30, Y+1	; 0x01
     5ec:	fa 81       	ldd	r31, Y+2	; 0x02
     5ee:	80 81       	ld	r24, Z
     5f0:	91 81       	ldd	r25, Z+1	; 0x01
     5f2:	0e 94 4d 0c 	call	0x189a	; 0x189a <proc_restart_isr>
     5f6:	f8 01       	movw	r30, r16
     5f8:	82 83       	std	Z+2, r24	; 0x02
}
     5fa:	0f 90       	pop	r0
     5fc:	0f 90       	pop	r0
     5fe:	cf 91       	pop	r28
     600:	df 91       	pop	r29
     602:	1f 91       	pop	r17
     604:	0f 91       	pop	r16
     606:	08 95       	ret

00000608 <proc_restart>:
bool_t proc_restart( proc_t * proc )
{
     608:	df 93       	push	r29
     60a:	cf 93       	push	r28
     60c:	00 d0       	rcall	.+0      	; 0x60e <proc_restart+0x6>
     60e:	00 d0       	rcall	.+0      	; 0x610 <proc_restart+0x8>
     610:	0f 92       	push	r0
     612:	cd b7       	in	r28, 0x3d	; 61
     614:	de b7       	in	r29, 0x3e	; 62
     616:	9d 83       	std	Y+5, r25	; 0x05
     618:	8c 83       	std	Y+4, r24	; 0x04
    proc_runtime_arg_t scarg;
    scarg.proc = proc;
     61a:	8c 81       	ldd	r24, Y+4	; 0x04
     61c:	9d 81       	ldd	r25, Y+5	; 0x05
     61e:	9a 83       	std	Y+2, r25	; 0x02
     620:	89 83       	std	Y+1, r24	; 0x01

    syscall(2,(void *)&scarg);
     622:	82 e0       	ldi	r24, 0x02	; 2
     624:	9e 01       	movw	r18, r28
     626:	2f 5f       	subi	r18, 0xFF	; 255
     628:	3f 4f       	sbci	r19, 0xFF	; 255
     62a:	b9 01       	movw	r22, r18
     62c:	0e 94 42 02 	call	0x484	; 0x484 <syscall>
    return scarg.scall_ret;
     630:	8b 81       	ldd	r24, Y+3	; 0x03
}
     632:	0f 90       	pop	r0
     634:	0f 90       	pop	r0
     636:	0f 90       	pop	r0
     638:	0f 90       	pop	r0
     63a:	0f 90       	pop	r0
     63c:	cf 91       	pop	r28
     63e:	df 91       	pop	r29
     640:	08 95       	ret

00000642 <scall_proc_stop>:
//---------------------------------------------------------------------------------------------
//3
void scall_proc_stop( void * arg )
{
     642:	0f 93       	push	r16
     644:	1f 93       	push	r17
     646:	df 93       	push	r29
     648:	cf 93       	push	r28
     64a:	00 d0       	rcall	.+0      	; 0x64c <scall_proc_stop+0xa>
     64c:	cd b7       	in	r28, 0x3d	; 61
     64e:	de b7       	in	r29, 0x3e	; 62
     650:	9a 83       	std	Y+2, r25	; 0x02
     652:	89 83       	std	Y+1, r24	; 0x01
    ((proc_runtime_arg_t *)arg)->scall_ret = proc_stop_isr( ((proc_runtime_arg_t *)arg)->proc );
     654:	09 81       	ldd	r16, Y+1	; 0x01
     656:	1a 81       	ldd	r17, Y+2	; 0x02
     658:	e9 81       	ldd	r30, Y+1	; 0x01
     65a:	fa 81       	ldd	r31, Y+2	; 0x02
     65c:	80 81       	ld	r24, Z
     65e:	91 81       	ldd	r25, Z+1	; 0x01
     660:	0e 94 af 0c 	call	0x195e	; 0x195e <proc_stop_isr>
     664:	f8 01       	movw	r30, r16
     666:	82 83       	std	Z+2, r24	; 0x02
}
     668:	0f 90       	pop	r0
     66a:	0f 90       	pop	r0
     66c:	cf 91       	pop	r28
     66e:	df 91       	pop	r29
     670:	1f 91       	pop	r17
     672:	0f 91       	pop	r16
     674:	08 95       	ret

00000676 <scall_proc_self_stop>:
}

//---------------------------------------------------------------------------------------------
//4
void scall_proc_self_stop( void * arg )
{
     676:	df 93       	push	r29
     678:	cf 93       	push	r28
     67a:	00 d0       	rcall	.+0      	; 0x67c <scall_proc_self_stop+0x6>
     67c:	00 d0       	rcall	.+0      	; 0x67e <scall_proc_self_stop+0x8>
     67e:	cd b7       	in	r28, 0x3d	; 61
     680:	de b7       	in	r29, 0x3e	; 62
     682:	9c 83       	std	Y+4, r25	; 0x04
     684:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = kernel.sched.current_proc;
     686:	80 91 9f 01 	lds	r24, 0x019F
     68a:	90 91 a0 01 	lds	r25, 0x01A0
     68e:	9a 83       	std	Y+2, r25	; 0x02
     690:	89 83       	std	Y+1, r24	; 0x01
    _proc_stop( proc );
     692:	89 81       	ldd	r24, Y+1	; 0x01
     694:	9a 81       	ldd	r25, Y+2	; 0x02
     696:	0e 94 96 0c 	call	0x192c	; 0x192c <_proc_stop>
}
     69a:	0f 90       	pop	r0
     69c:	0f 90       	pop	r0
     69e:	0f 90       	pop	r0
     6a0:	0f 90       	pop	r0
     6a2:	cf 91       	pop	r28
     6a4:	df 91       	pop	r29
     6a6:	08 95       	ret

000006a8 <proc_self_stop>:
void proc_self_stop(void)
{
     6a8:	df 93       	push	r29
     6aa:	cf 93       	push	r28
     6ac:	cd b7       	in	r28, 0x3d	; 61
     6ae:	de b7       	in	r29, 0x3e	; 62
    syscall(4,(void *)1);
     6b0:	84 e0       	ldi	r24, 0x04	; 4
     6b2:	61 e0       	ldi	r22, 0x01	; 1
     6b4:	70 e0       	ldi	r23, 0x00	; 0
     6b6:	0e 94 42 02 	call	0x484	; 0x484 <syscall>
}
     6ba:	cf 91       	pop	r28
     6bc:	df 91       	pop	r29
     6be:	08 95       	ret

000006c0 <scall_proc_terminate>:
//---------------------------------------------------------------------------------------------
//5
/// Останов процесса после выхода из pmain, для обертки proc_run_wrapper
void scall_proc_terminate( void * arg )
{
     6c0:	df 93       	push	r29
     6c2:	cf 93       	push	r28
     6c4:	00 d0       	rcall	.+0      	; 0x6c6 <scall_proc_terminate+0x6>
     6c6:	00 d0       	rcall	.+0      	; 0x6c8 <scall_proc_terminate+0x8>
     6c8:	cd b7       	in	r28, 0x3d	; 61
     6ca:	de b7       	in	r29, 0x3e	; 62
     6cc:	9c 83       	std	Y+4, r25	; 0x04
     6ce:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = (proc_t *)arg;
     6d0:	8b 81       	ldd	r24, Y+3	; 0x03
     6d2:	9c 81       	ldd	r25, Y+4	; 0x04
     6d4:	9a 83       	std	Y+2, r25	; 0x02
     6d6:	89 83       	std	Y+1, r24	; 0x01
    // Обрабатываем флаги
    // Нельзя выходить из pmain не освободив все захваченные ресурсы, за это процесс будет "убит"!
    if( proc->flags & PROC_FLG_HOLD ) proc->flags |= PROC_FLG_DEAD;
     6d8:	e9 81       	ldd	r30, Y+1	; 0x01
     6da:	fa 81       	ldd	r31, Y+2	; 0x02
     6dc:	83 85       	ldd	r24, Z+11	; 0x0b
     6de:	88 2f       	mov	r24, r24
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	84 70       	andi	r24, 0x04	; 4
     6e4:	90 70       	andi	r25, 0x00	; 0
     6e6:	00 97       	sbiw	r24, 0x00	; 0
     6e8:	41 f0       	breq	.+16     	; 0x6fa <scall_proc_terminate+0x3a>
     6ea:	e9 81       	ldd	r30, Y+1	; 0x01
     6ec:	fa 81       	ldd	r31, Y+2	; 0x02
     6ee:	83 85       	ldd	r24, Z+11	; 0x0b
     6f0:	80 68       	ori	r24, 0x80	; 128
     6f2:	e9 81       	ldd	r30, Y+1	; 0x01
     6f4:	fa 81       	ldd	r31, Y+2	; 0x02
     6f6:	83 87       	std	Z+11, r24	; 0x0b
     6f8:	07 c0       	rjmp	.+14     	; 0x708 <scall_proc_terminate+0x48>
    // В противном случае - просто завершаем процесс
    else proc->flags |= PROC_FLG_END;
     6fa:	e9 81       	ldd	r30, Y+1	; 0x01
     6fc:	fa 81       	ldd	r31, Y+2	; 0x02
     6fe:	83 85       	ldd	r24, Z+11	; 0x0b
     700:	80 64       	ori	r24, 0x40	; 64
     702:	e9 81       	ldd	r30, Y+1	; 0x01
     704:	fa 81       	ldd	r31, Y+2	; 0x02
     706:	83 87       	std	Z+11, r24	; 0x0b
    proc->flags &= ~(PROC_FLG_PRE_END|PROC_FLG_RUN);
     708:	e9 81       	ldd	r30, Y+1	; 0x01
     70a:	fa 81       	ldd	r31, Y+2	; 0x02
     70c:	83 85       	ldd	r24, Z+11	; 0x0b
     70e:	8d 7d       	andi	r24, 0xDD	; 221
     710:	e9 81       	ldd	r30, Y+1	; 0x01
     712:	fa 81       	ldd	r31, Y+2	; 0x02
     714:	83 87       	std	Z+11, r24	; 0x0b
    // Останов
    _proc_stop_( proc );
     716:	89 81       	ldd	r24, Y+1	; 0x01
     718:	9a 81       	ldd	r25, Y+2	; 0x02
     71a:	0e 94 ce 07 	call	0xf9c	; 0xf9c <gitem_cut>
    // Выполнить перепланировку
    resched();
     71e:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
}
     722:	0f 90       	pop	r0
     724:	0f 90       	pop	r0
     726:	0f 90       	pop	r0
     728:	0f 90       	pop	r0
     72a:	cf 91       	pop	r28
     72c:	df 91       	pop	r29
     72e:	08 95       	ret

00000730 <proc_run_wrapper>:
void proc_run_wrapper( proc_t * proc )
{
     730:	df 93       	push	r29
     732:	cf 93       	push	r28
     734:	00 d0       	rcall	.+0      	; 0x736 <proc_run_wrapper+0x6>
     736:	00 d0       	rcall	.+0      	; 0x738 <proc_run_wrapper+0x8>
     738:	00 d0       	rcall	.+0      	; 0x73a <proc_run_wrapper+0xa>
     73a:	cd b7       	in	r28, 0x3d	; 61
     73c:	de b7       	in	r29, 0x3e	; 62
     73e:	9e 83       	std	Y+6, r25	; 0x06
     740:	8d 83       	std	Y+5, r24	; 0x05
    //Атомарно читаем pmain и arg
    cli();
     742:	f8 94       	cli
    code_t pmain = proc->pmain;
     744:	ed 81       	ldd	r30, Y+5	; 0x05
     746:	fe 81       	ldd	r31, Y+6	; 0x06
     748:	82 a1       	ldd	r24, Z+34	; 0x22
     74a:	93 a1       	ldd	r25, Z+35	; 0x23
     74c:	9c 83       	std	Y+4, r25	; 0x04
     74e:	8b 83       	std	Y+3, r24	; 0x03
    void * arg = proc->arg;
     750:	ed 81       	ldd	r30, Y+5	; 0x05
     752:	fe 81       	ldd	r31, Y+6	; 0x06
     754:	80 a5       	ldd	r24, Z+40	; 0x28
     756:	91 a5       	ldd	r25, Z+41	; 0x29
     758:	9a 83       	std	Y+2, r25	; 0x02
     75a:	89 83       	std	Y+1, r24	; 0x01
    sei();
     75c:	78 94       	sei
    //Выполняем pmain
    pmain( arg );
     75e:	89 81       	ldd	r24, Y+1	; 0x01
     760:	9a 81       	ldd	r25, Y+2	; 0x02
     762:	eb 81       	ldd	r30, Y+3	; 0x03
     764:	fc 81       	ldd	r31, Y+4	; 0x04
     766:	09 95       	icall
    // Завершаем процесс
    syscall(5,(void *)proc);
     768:	2d 81       	ldd	r18, Y+5	; 0x05
     76a:	3e 81       	ldd	r19, Y+6	; 0x06
     76c:	85 e0       	ldi	r24, 0x05	; 5
     76e:	b9 01       	movw	r22, r18
     770:	0e 94 42 02 	call	0x484	; 0x484 <syscall>
}
     774:	26 96       	adiw	r28, 0x06	; 6
     776:	0f b6       	in	r0, 0x3f	; 63
     778:	f8 94       	cli
     77a:	de bf       	out	0x3e, r29	; 62
     77c:	0f be       	out	0x3f, r0	; 63
     77e:	cd bf       	out	0x3d, r28	; 61
     780:	cf 91       	pop	r28
     782:	df 91       	pop	r29
     784:	08 95       	ret

00000786 <scall_proc_flag_stop>:
//---------------------------------------------------------------------------------------------
//6
void scall_proc_flag_stop( void * arg )
{
     786:	df 93       	push	r29
     788:	cf 93       	push	r28
     78a:	00 d0       	rcall	.+0      	; 0x78c <scall_proc_flag_stop+0x6>
     78c:	cd b7       	in	r28, 0x3d	; 61
     78e:	de b7       	in	r29, 0x3e	; 62
     790:	9a 83       	std	Y+2, r25	; 0x02
     792:	89 83       	std	Y+1, r24	; 0x01
    _proc_flag_stop_isr( *((flag_t *)arg) );
     794:	e9 81       	ldd	r30, Y+1	; 0x01
     796:	fa 81       	ldd	r31, Y+2	; 0x02
     798:	80 81       	ld	r24, Z
     79a:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <_proc_flag_stop_isr>
}
     79e:	0f 90       	pop	r0
     7a0:	0f 90       	pop	r0
     7a2:	cf 91       	pop	r28
     7a4:	df 91       	pop	r29
     7a6:	08 95       	ret

000007a8 <scall_sig_init>:
///=================================================================
///                         Сигналы
//7
void scall_sig_init( void * arg )
{
     7a8:	df 93       	push	r29
     7aa:	cf 93       	push	r28
     7ac:	00 d0       	rcall	.+0      	; 0x7ae <scall_sig_init+0x6>
     7ae:	cd b7       	in	r28, 0x3d	; 61
     7b0:	de b7       	in	r29, 0x3e	; 62
     7b2:	9a 83       	std	Y+2, r25	; 0x02
     7b4:	89 83       	std	Y+1, r24	; 0x01
    sig_init_isr( (sig_t *)arg );
     7b6:	89 81       	ldd	r24, Y+1	; 0x01
     7b8:	9a 81       	ldd	r25, Y+2	; 0x02
     7ba:	0e 94 0e 10 	call	0x201c	; 0x201c <sig_init_isr>
}
     7be:	0f 90       	pop	r0
     7c0:	0f 90       	pop	r0
     7c2:	cf 91       	pop	r28
     7c4:	df 91       	pop	r29
     7c6:	08 95       	ret

000007c8 <scall_sig_wait>:
    syscall( 7, (void *)sig );
}
//---------------------------------------------------------------------------------------------
//8
void scall_sig_wait( void * arg )
{
     7c8:	df 93       	push	r29
     7ca:	cf 93       	push	r28
     7cc:	00 d0       	rcall	.+0      	; 0x7ce <scall_sig_wait+0x6>
     7ce:	cd b7       	in	r28, 0x3d	; 61
     7d0:	de b7       	in	r29, 0x3e	; 62
     7d2:	9a 83       	std	Y+2, r25	; 0x02
     7d4:	89 83       	std	Y+1, r24	; 0x01
    sig_wait_stage_1_isr( (sig_t *)arg );
     7d6:	89 81       	ldd	r24, Y+1	; 0x01
     7d8:	9a 81       	ldd	r25, Y+2	; 0x02
     7da:	0e 94 1e 10 	call	0x203c	; 0x203c <sig_wait_stage_1_isr>
}
     7de:	0f 90       	pop	r0
     7e0:	0f 90       	pop	r0
     7e2:	cf 91       	pop	r28
     7e4:	df 91       	pop	r29
     7e6:	08 95       	ret

000007e8 <scall_sig_signal>:
    syscall( 6, (void *)&mask );/// Останов в случае необходимости
}
//---------------------------------------------------------------------------------------------
//9
void scall_sig_signal( void * arg )
{
     7e8:	df 93       	push	r29
     7ea:	cf 93       	push	r28
     7ec:	00 d0       	rcall	.+0      	; 0x7ee <scall_sig_signal+0x6>
     7ee:	cd b7       	in	r28, 0x3d	; 61
     7f0:	de b7       	in	r29, 0x3e	; 62
     7f2:	9a 83       	std	Y+2, r25	; 0x02
     7f4:	89 83       	std	Y+1, r24	; 0x01
    sig_signal_isr( (sig_t *)arg );
     7f6:	89 81       	ldd	r24, Y+1	; 0x01
     7f8:	9a 81       	ldd	r25, Y+2	; 0x02
     7fa:	0e 94 43 10 	call	0x2086	; 0x2086 <sig_signal_isr>
}
     7fe:	0f 90       	pop	r0
     800:	0f 90       	pop	r0
     802:	cf 91       	pop	r28
     804:	df 91       	pop	r29
     806:	08 95       	ret

00000808 <scall_sig_broadcast>:
    syscall( 9, (void *)sig );
}
//---------------------------------------------------------------------------------------------
//10
void scall_sig_broadcast( void * arg )
{
     808:	df 93       	push	r29
     80a:	cf 93       	push	r28
     80c:	00 d0       	rcall	.+0      	; 0x80e <scall_sig_broadcast+0x6>
     80e:	cd b7       	in	r28, 0x3d	; 61
     810:	de b7       	in	r29, 0x3e	; 62
     812:	9a 83       	std	Y+2, r25	; 0x02
     814:	89 83       	std	Y+1, r24	; 0x01
    sig_broadcast_isr( (sig_t *)arg );
     816:	89 81       	ldd	r24, Y+1	; 0x01
     818:	9a 81       	ldd	r25, Y+2	; 0x02
     81a:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <sig_broadcast_isr>
}
     81e:	0f 90       	pop	r0
     820:	0f 90       	pop	r0
     822:	cf 91       	pop	r28
     824:	df 91       	pop	r29
     826:	08 95       	ret

00000828 <scall_sem_init>:
}
///=================================================================
///                         Семафоры
//11
void scall_sem_init( void * arg )
{
     828:	df 93       	push	r29
     82a:	cf 93       	push	r28
     82c:	00 d0       	rcall	.+0      	; 0x82e <scall_sem_init+0x6>
     82e:	cd b7       	in	r28, 0x3d	; 61
     830:	de b7       	in	r29, 0x3e	; 62
     832:	9a 83       	std	Y+2, r25	; 0x02
     834:	89 83       	std	Y+1, r24	; 0x01
    sem_init_isr( ((sem_init_arg_t *)arg)->sem, ((sem_init_arg_t *)arg)->count );
     836:	e9 81       	ldd	r30, Y+1	; 0x01
     838:	fa 81       	ldd	r31, Y+2	; 0x02
     83a:	80 81       	ld	r24, Z
     83c:	91 81       	ldd	r25, Z+1	; 0x01
     83e:	e9 81       	ldd	r30, Y+1	; 0x01
     840:	fa 81       	ldd	r31, Y+2	; 0x02
     842:	22 81       	ldd	r18, Z+2	; 0x02
     844:	33 81       	ldd	r19, Z+3	; 0x03
     846:	b9 01       	movw	r22, r18
     848:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <sem_init_isr>
}
     84c:	0f 90       	pop	r0
     84e:	0f 90       	pop	r0
     850:	cf 91       	pop	r28
     852:	df 91       	pop	r29
     854:	08 95       	ret

00000856 <scall_sem_lock>:
    syscall( 11, (void *)&scarg );
}
//----------------------------------------------------------------------
//12
void scall_sem_lock( void * arg )
{
     856:	0f 93       	push	r16
     858:	1f 93       	push	r17
     85a:	df 93       	push	r29
     85c:	cf 93       	push	r28
     85e:	00 d0       	rcall	.+0      	; 0x860 <scall_sem_lock+0xa>
     860:	cd b7       	in	r28, 0x3d	; 61
     862:	de b7       	in	r29, 0x3e	; 62
     864:	9a 83       	std	Y+2, r25	; 0x02
     866:	89 83       	std	Y+1, r24	; 0x01
    ((sem_lock_arg_t *)arg)->scall_ret = _sem_lock( ((sem_lock_arg_t *)arg)->sem );
     868:	09 81       	ldd	r16, Y+1	; 0x01
     86a:	1a 81       	ldd	r17, Y+2	; 0x02
     86c:	e9 81       	ldd	r30, Y+1	; 0x01
     86e:	fa 81       	ldd	r31, Y+2	; 0x02
     870:	80 81       	ld	r24, Z
     872:	91 81       	ldd	r25, Z+1	; 0x01
     874:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <_sem_lock>
     878:	f8 01       	movw	r30, r16
     87a:	82 83       	std	Z+2, r24	; 0x02
}
     87c:	0f 90       	pop	r0
     87e:	0f 90       	pop	r0
     880:	cf 91       	pop	r28
     882:	df 91       	pop	r29
     884:	1f 91       	pop	r17
     886:	0f 91       	pop	r16
     888:	08 95       	ret

0000088a <scall_sem_unlock>:
    return scarg.scall_ret;
}
//----------------------------------------------------------------------
//13
void scall_sem_unlock( void * arg )
{
     88a:	df 93       	push	r29
     88c:	cf 93       	push	r28
     88e:	00 d0       	rcall	.+0      	; 0x890 <scall_sem_unlock+0x6>
     890:	cd b7       	in	r28, 0x3d	; 61
     892:	de b7       	in	r29, 0x3e	; 62
     894:	9a 83       	std	Y+2, r25	; 0x02
     896:	89 83       	std	Y+1, r24	; 0x01
    _sem_unlock( (sem_t *)arg );
     898:	89 81       	ldd	r24, Y+1	; 0x01
     89a:	9a 81       	ldd	r25, Y+2	; 0x02
     89c:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <_sem_unlock>
}
     8a0:	0f 90       	pop	r0
     8a2:	0f 90       	pop	r0
     8a4:	cf 91       	pop	r28
     8a6:	df 91       	pop	r29
     8a8:	08 95       	ret

000008aa <scall_mutex_init>:
}
///=================================================================
///                         Мьютексы
//14
void scall_mutex_init(void * arg)
{
     8aa:	df 93       	push	r29
     8ac:	cf 93       	push	r28
     8ae:	00 d0       	rcall	.+0      	; 0x8b0 <scall_mutex_init+0x6>
     8b0:	cd b7       	in	r28, 0x3d	; 61
     8b2:	de b7       	in	r29, 0x3e	; 62
     8b4:	9a 83       	std	Y+2, r25	; 0x02
     8b6:	89 83       	std	Y+1, r24	; 0x01
    mutex_init_isr(
     8b8:	e9 81       	ldd	r30, Y+1	; 0x01
     8ba:	fa 81       	ldd	r31, Y+2	; 0x02
     8bc:	80 81       	ld	r24, Z
     8be:	91 81       	ldd	r25, Z+1	; 0x01
     8c0:	e9 81       	ldd	r30, Y+1	; 0x01
     8c2:	fa 81       	ldd	r31, Y+2	; 0x02
     8c4:	22 81       	ldd	r18, Z+2	; 0x02
     8c6:	62 2f       	mov	r22, r18
     8c8:	0e 94 e6 09 	call	0x13cc	; 0x13cc <mutex_init_isr>
               ((mutex_init_arg_t *)arg)->mutex
#ifdef CONFIG_USE_HIGHEST_LOCKER
               ,((mutex_init_arg_t *)arg)->prio
#endif // CONFIG_USE_HIGHEST_LOCKER
               );
}
     8cc:	0f 90       	pop	r0
     8ce:	0f 90       	pop	r0
     8d0:	cf 91       	pop	r28
     8d2:	df 91       	pop	r29
     8d4:	08 95       	ret

000008d6 <scall_mutex_lock>:
    syscall( 14, (void *)&scarg );
}
//----------------------------------------------------------------------
//15
void scall_mutex_lock(void * arg)
{
     8d6:	0f 93       	push	r16
     8d8:	1f 93       	push	r17
     8da:	df 93       	push	r29
     8dc:	cf 93       	push	r28
     8de:	00 d0       	rcall	.+0      	; 0x8e0 <scall_mutex_lock+0xa>
     8e0:	cd b7       	in	r28, 0x3d	; 61
     8e2:	de b7       	in	r29, 0x3e	; 62
     8e4:	9a 83       	std	Y+2, r25	; 0x02
     8e6:	89 83       	std	Y+1, r24	; 0x01
    ((mutex_lock_arg_t *)arg)->scall_ret = _mutex_lock( ((mutex_lock_arg_t *)arg)->mutex );
     8e8:	09 81       	ldd	r16, Y+1	; 0x01
     8ea:	1a 81       	ldd	r17, Y+2	; 0x02
     8ec:	e9 81       	ldd	r30, Y+1	; 0x01
     8ee:	fa 81       	ldd	r31, Y+2	; 0x02
     8f0:	80 81       	ld	r24, Z
     8f2:	91 81       	ldd	r25, Z+1	; 0x01
     8f4:	0e 94 01 0a 	call	0x1402	; 0x1402 <_mutex_lock>
     8f8:	f8 01       	movw	r30, r16
     8fa:	82 83       	std	Z+2, r24	; 0x02
}
     8fc:	0f 90       	pop	r0
     8fe:	0f 90       	pop	r0
     900:	cf 91       	pop	r28
     902:	df 91       	pop	r29
     904:	1f 91       	pop	r17
     906:	0f 91       	pop	r16
     908:	08 95       	ret

0000090a <scall_mutex_try_lock>:
}
// Захват
//----------------------------------------------------------------------
//16
void scall_mutex_try_lock(void * arg)
{
     90a:	0f 93       	push	r16
     90c:	1f 93       	push	r17
     90e:	df 93       	push	r29
     910:	cf 93       	push	r28
     912:	00 d0       	rcall	.+0      	; 0x914 <scall_mutex_try_lock+0xa>
     914:	cd b7       	in	r28, 0x3d	; 61
     916:	de b7       	in	r29, 0x3e	; 62
     918:	9a 83       	std	Y+2, r25	; 0x02
     91a:	89 83       	std	Y+1, r24	; 0x01
    ((mutex_lock_arg_t *)arg)->scall_ret = _mutex_try_lock( ((mutex_lock_arg_t *)arg)->mutex );
     91c:	09 81       	ldd	r16, Y+1	; 0x01
     91e:	1a 81       	ldd	r17, Y+2	; 0x02
     920:	e9 81       	ldd	r30, Y+1	; 0x01
     922:	fa 81       	ldd	r31, Y+2	; 0x02
     924:	80 81       	ld	r24, Z
     926:	91 81       	ldd	r25, Z+1	; 0x01
     928:	0e 94 49 0a 	call	0x1492	; 0x1492 <_mutex_try_lock>
     92c:	f8 01       	movw	r30, r16
     92e:	82 83       	std	Z+2, r24	; 0x02
}
     930:	0f 90       	pop	r0
     932:	0f 90       	pop	r0
     934:	cf 91       	pop	r28
     936:	df 91       	pop	r29
     938:	1f 91       	pop	r17
     93a:	0f 91       	pop	r16
     93c:	08 95       	ret

0000093e <scall_mutex_unlock>:
    return scarg.scall_ret;
}
//----------------------------------------------------------------------
//17
void scall_mutex_unlock(void * arg)
{
     93e:	df 93       	push	r29
     940:	cf 93       	push	r28
     942:	00 d0       	rcall	.+0      	; 0x944 <scall_mutex_unlock+0x6>
     944:	cd b7       	in	r28, 0x3d	; 61
     946:	de b7       	in	r29, 0x3e	; 62
     948:	9a 83       	std	Y+2, r25	; 0x02
     94a:	89 83       	std	Y+1, r24	; 0x01
    _mutex_unlock( (mutex_t *)arg );
     94c:	89 81       	ldd	r24, Y+1	; 0x01
     94e:	9a 81       	ldd	r25, Y+2	; 0x02
     950:	0e 94 75 0a 	call	0x14ea	; 0x14ea <_mutex_unlock>
}
     954:	0f 90       	pop	r0
     956:	0f 90       	pop	r0
     958:	cf 91       	pop	r28
     95a:	df 91       	pop	r29
     95c:	08 95       	ret

0000095e <osbme_init_stack>:
*                                                                                        *
*****************************************************************************************/
#include <avr/io.h>
#include "../../osbme.h"
void * osbme_init_stack( void * top_of_stack, osbme_code_t code, void * arg )
{
     95e:	df 93       	push	r29
     960:	cf 93       	push	r28
     962:	cd b7       	in	r28, 0x3d	; 61
     964:	de b7       	in	r29, 0x3e	; 62
     966:	2a 97       	sbiw	r28, 0x0a	; 10
     968:	0f b6       	in	r0, 0x3f	; 63
     96a:	f8 94       	cli
     96c:	de bf       	out	0x3e, r29	; 62
     96e:	0f be       	out	0x3f, r0	; 63
     970:	cd bf       	out	0x3d, r28	; 61
     972:	9e 83       	std	Y+6, r25	; 0x06
     974:	8d 83       	std	Y+5, r24	; 0x05
     976:	78 87       	std	Y+8, r23	; 0x08
     978:	6f 83       	std	Y+7, r22	; 0x07
     97a:	5a 87       	std	Y+10, r21	; 0x0a
     97c:	49 87       	std	Y+9, r20	; 0x09
    char * tos = (char *)top_of_stack;
     97e:	8d 81       	ldd	r24, Y+5	; 0x05
     980:	9e 81       	ldd	r25, Y+6	; 0x06
     982:	9c 83       	std	Y+4, r25	; 0x04
     984:	8b 83       	std	Y+3, r24	; 0x03
    //*tos-- = 0x11;
    //*tos-- = 0x22;
    //*tos-- = 0x33;

    // return address
    unsigned short tmp = (unsigned short)code;
     986:	8f 81       	ldd	r24, Y+7	; 0x07
     988:	98 85       	ldd	r25, Y+8	; 0x08
     98a:	9a 83       	std	Y+2, r25	; 0x02
     98c:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (char)(tmp&(unsigned short)0x00ff);
     98e:	89 81       	ldd	r24, Y+1	; 0x01
     990:	eb 81       	ldd	r30, Y+3	; 0x03
     992:	fc 81       	ldd	r31, Y+4	; 0x04
     994:	80 83       	st	Z, r24
     996:	8b 81       	ldd	r24, Y+3	; 0x03
     998:	9c 81       	ldd	r25, Y+4	; 0x04
     99a:	01 97       	sbiw	r24, 0x01	; 1
     99c:	9c 83       	std	Y+4, r25	; 0x04
     99e:	8b 83       	std	Y+3, r24	; 0x03
    tmp>>=8;
     9a0:	89 81       	ldd	r24, Y+1	; 0x01
     9a2:	9a 81       	ldd	r25, Y+2	; 0x02
     9a4:	89 2f       	mov	r24, r25
     9a6:	99 27       	eor	r25, r25
     9a8:	9a 83       	std	Y+2, r25	; 0x02
     9aa:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (char)(tmp&(unsigned short)0x00ff);
     9ac:	89 81       	ldd	r24, Y+1	; 0x01
     9ae:	eb 81       	ldd	r30, Y+3	; 0x03
     9b0:	fc 81       	ldd	r31, Y+4	; 0x04
     9b2:	80 83       	st	Z, r24
     9b4:	8b 81       	ldd	r24, Y+3	; 0x03
     9b6:	9c 81       	ldd	r25, Y+4	; 0x04
     9b8:	01 97       	sbiw	r24, 0x01	; 1
     9ba:	9c 83       	std	Y+4, r25	; 0x04
     9bc:	8b 83       	std	Y+3, r24	; 0x03

    // s
    *tos-- = 0x00;
     9be:	eb 81       	ldd	r30, Y+3	; 0x03
     9c0:	fc 81       	ldd	r31, Y+4	; 0x04
     9c2:	10 82       	st	Z, r1
     9c4:	8b 81       	ldd	r24, Y+3	; 0x03
     9c6:	9c 81       	ldd	r25, Y+4	; 0x04
     9c8:	01 97       	sbiw	r24, 0x01	; 1
     9ca:	9c 83       	std	Y+4, r25	; 0x04
     9cc:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x00;// r1 must B 0
     9ce:	eb 81       	ldd	r30, Y+3	; 0x03
     9d0:	fc 81       	ldd	r31, Y+4	; 0x04
     9d2:	10 82       	st	Z, r1
     9d4:	8b 81       	ldd	r24, Y+3	; 0x03
     9d6:	9c 81       	ldd	r25, Y+4	; 0x04
     9d8:	01 97       	sbiw	r24, 0x01	; 1
     9da:	9c 83       	std	Y+4, r25	; 0x04
     9dc:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x02;// r2
     9de:	eb 81       	ldd	r30, Y+3	; 0x03
     9e0:	fc 81       	ldd	r31, Y+4	; 0x04
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	80 83       	st	Z, r24
     9e6:	8b 81       	ldd	r24, Y+3	; 0x03
     9e8:	9c 81       	ldd	r25, Y+4	; 0x04
     9ea:	01 97       	sbiw	r24, 0x01	; 1
     9ec:	9c 83       	std	Y+4, r25	; 0x04
     9ee:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x80;// SREG: enable interrupts
     9f0:	eb 81       	ldd	r30, Y+3	; 0x03
     9f2:	fc 81       	ldd	r31, Y+4	; 0x04
     9f4:	80 e8       	ldi	r24, 0x80	; 128
     9f6:	80 83       	st	Z, r24
     9f8:	8b 81       	ldd	r24, Y+3	; 0x03
     9fa:	9c 81       	ldd	r25, Y+4	; 0x04
     9fc:	01 97       	sbiw	r24, 0x01	; 1
     9fe:	9c 83       	std	Y+4, r25	; 0x04
     a00:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x03;
     a02:	eb 81       	ldd	r30, Y+3	; 0x03
     a04:	fc 81       	ldd	r31, Y+4	; 0x04
     a06:	83 e0       	ldi	r24, 0x03	; 3
     a08:	80 83       	st	Z, r24
     a0a:	8b 81       	ldd	r24, Y+3	; 0x03
     a0c:	9c 81       	ldd	r25, Y+4	; 0x04
     a0e:	01 97       	sbiw	r24, 0x01	; 1
     a10:	9c 83       	std	Y+4, r25	; 0x04
     a12:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x04;
     a14:	eb 81       	ldd	r30, Y+3	; 0x03
     a16:	fc 81       	ldd	r31, Y+4	; 0x04
     a18:	84 e0       	ldi	r24, 0x04	; 4
     a1a:	80 83       	st	Z, r24
     a1c:	8b 81       	ldd	r24, Y+3	; 0x03
     a1e:	9c 81       	ldd	r25, Y+4	; 0x04
     a20:	01 97       	sbiw	r24, 0x01	; 1
     a22:	9c 83       	std	Y+4, r25	; 0x04
     a24:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x05;
     a26:	eb 81       	ldd	r30, Y+3	; 0x03
     a28:	fc 81       	ldd	r31, Y+4	; 0x04
     a2a:	85 e0       	ldi	r24, 0x05	; 5
     a2c:	80 83       	st	Z, r24
     a2e:	8b 81       	ldd	r24, Y+3	; 0x03
     a30:	9c 81       	ldd	r25, Y+4	; 0x04
     a32:	01 97       	sbiw	r24, 0x01	; 1
     a34:	9c 83       	std	Y+4, r25	; 0x04
     a36:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x06;
     a38:	eb 81       	ldd	r30, Y+3	; 0x03
     a3a:	fc 81       	ldd	r31, Y+4	; 0x04
     a3c:	86 e0       	ldi	r24, 0x06	; 6
     a3e:	80 83       	st	Z, r24
     a40:	8b 81       	ldd	r24, Y+3	; 0x03
     a42:	9c 81       	ldd	r25, Y+4	; 0x04
     a44:	01 97       	sbiw	r24, 0x01	; 1
     a46:	9c 83       	std	Y+4, r25	; 0x04
     a48:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x07;
     a4a:	eb 81       	ldd	r30, Y+3	; 0x03
     a4c:	fc 81       	ldd	r31, Y+4	; 0x04
     a4e:	87 e0       	ldi	r24, 0x07	; 7
     a50:	80 83       	st	Z, r24
     a52:	8b 81       	ldd	r24, Y+3	; 0x03
     a54:	9c 81       	ldd	r25, Y+4	; 0x04
     a56:	01 97       	sbiw	r24, 0x01	; 1
     a58:	9c 83       	std	Y+4, r25	; 0x04
     a5a:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x08;
     a5c:	eb 81       	ldd	r30, Y+3	; 0x03
     a5e:	fc 81       	ldd	r31, Y+4	; 0x04
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	80 83       	st	Z, r24
     a64:	8b 81       	ldd	r24, Y+3	; 0x03
     a66:	9c 81       	ldd	r25, Y+4	; 0x04
     a68:	01 97       	sbiw	r24, 0x01	; 1
     a6a:	9c 83       	std	Y+4, r25	; 0x04
     a6c:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x09;
     a6e:	eb 81       	ldd	r30, Y+3	; 0x03
     a70:	fc 81       	ldd	r31, Y+4	; 0x04
     a72:	89 e0       	ldi	r24, 0x09	; 9
     a74:	80 83       	st	Z, r24
     a76:	8b 81       	ldd	r24, Y+3	; 0x03
     a78:	9c 81       	ldd	r25, Y+4	; 0x04
     a7a:	01 97       	sbiw	r24, 0x01	; 1
     a7c:	9c 83       	std	Y+4, r25	; 0x04
     a7e:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x10;
     a80:	eb 81       	ldd	r30, Y+3	; 0x03
     a82:	fc 81       	ldd	r31, Y+4	; 0x04
     a84:	80 e1       	ldi	r24, 0x10	; 16
     a86:	80 83       	st	Z, r24
     a88:	8b 81       	ldd	r24, Y+3	; 0x03
     a8a:	9c 81       	ldd	r25, Y+4	; 0x04
     a8c:	01 97       	sbiw	r24, 0x01	; 1
     a8e:	9c 83       	std	Y+4, r25	; 0x04
     a90:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x11;
     a92:	eb 81       	ldd	r30, Y+3	; 0x03
     a94:	fc 81       	ldd	r31, Y+4	; 0x04
     a96:	81 e1       	ldi	r24, 0x11	; 17
     a98:	80 83       	st	Z, r24
     a9a:	8b 81       	ldd	r24, Y+3	; 0x03
     a9c:	9c 81       	ldd	r25, Y+4	; 0x04
     a9e:	01 97       	sbiw	r24, 0x01	; 1
     aa0:	9c 83       	std	Y+4, r25	; 0x04
     aa2:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x12;
     aa4:	eb 81       	ldd	r30, Y+3	; 0x03
     aa6:	fc 81       	ldd	r31, Y+4	; 0x04
     aa8:	82 e1       	ldi	r24, 0x12	; 18
     aaa:	80 83       	st	Z, r24
     aac:	8b 81       	ldd	r24, Y+3	; 0x03
     aae:	9c 81       	ldd	r25, Y+4	; 0x04
     ab0:	01 97       	sbiw	r24, 0x01	; 1
     ab2:	9c 83       	std	Y+4, r25	; 0x04
     ab4:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x13;
     ab6:	eb 81       	ldd	r30, Y+3	; 0x03
     ab8:	fc 81       	ldd	r31, Y+4	; 0x04
     aba:	83 e1       	ldi	r24, 0x13	; 19
     abc:	80 83       	st	Z, r24
     abe:	8b 81       	ldd	r24, Y+3	; 0x03
     ac0:	9c 81       	ldd	r25, Y+4	; 0x04
     ac2:	01 97       	sbiw	r24, 0x01	; 1
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x14;
     ac8:	eb 81       	ldd	r30, Y+3	; 0x03
     aca:	fc 81       	ldd	r31, Y+4	; 0x04
     acc:	84 e1       	ldi	r24, 0x14	; 20
     ace:	80 83       	st	Z, r24
     ad0:	8b 81       	ldd	r24, Y+3	; 0x03
     ad2:	9c 81       	ldd	r25, Y+4	; 0x04
     ad4:	01 97       	sbiw	r24, 0x01	; 1
     ad6:	9c 83       	std	Y+4, r25	; 0x04
     ad8:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x15;
     ada:	eb 81       	ldd	r30, Y+3	; 0x03
     adc:	fc 81       	ldd	r31, Y+4	; 0x04
     ade:	85 e1       	ldi	r24, 0x15	; 21
     ae0:	80 83       	st	Z, r24
     ae2:	8b 81       	ldd	r24, Y+3	; 0x03
     ae4:	9c 81       	ldd	r25, Y+4	; 0x04
     ae6:	01 97       	sbiw	r24, 0x01	; 1
     ae8:	9c 83       	std	Y+4, r25	; 0x04
     aea:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x16;
     aec:	eb 81       	ldd	r30, Y+3	; 0x03
     aee:	fc 81       	ldd	r31, Y+4	; 0x04
     af0:	86 e1       	ldi	r24, 0x16	; 22
     af2:	80 83       	st	Z, r24
     af4:	8b 81       	ldd	r24, Y+3	; 0x03
     af6:	9c 81       	ldd	r25, Y+4	; 0x04
     af8:	01 97       	sbiw	r24, 0x01	; 1
     afa:	9c 83       	std	Y+4, r25	; 0x04
     afc:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x17;
     afe:	eb 81       	ldd	r30, Y+3	; 0x03
     b00:	fc 81       	ldd	r31, Y+4	; 0x04
     b02:	87 e1       	ldi	r24, 0x17	; 23
     b04:	80 83       	st	Z, r24
     b06:	8b 81       	ldd	r24, Y+3	; 0x03
     b08:	9c 81       	ldd	r25, Y+4	; 0x04
     b0a:	01 97       	sbiw	r24, 0x01	; 1
     b0c:	9c 83       	std	Y+4, r25	; 0x04
     b0e:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x18;
     b10:	eb 81       	ldd	r30, Y+3	; 0x03
     b12:	fc 81       	ldd	r31, Y+4	; 0x04
     b14:	88 e1       	ldi	r24, 0x18	; 24
     b16:	80 83       	st	Z, r24
     b18:	8b 81       	ldd	r24, Y+3	; 0x03
     b1a:	9c 81       	ldd	r25, Y+4	; 0x04
     b1c:	01 97       	sbiw	r24, 0x01	; 1
     b1e:	9c 83       	std	Y+4, r25	; 0x04
     b20:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x19;
     b22:	eb 81       	ldd	r30, Y+3	; 0x03
     b24:	fc 81       	ldd	r31, Y+4	; 0x04
     b26:	89 e1       	ldi	r24, 0x19	; 25
     b28:	80 83       	st	Z, r24
     b2a:	8b 81       	ldd	r24, Y+3	; 0x03
     b2c:	9c 81       	ldd	r25, Y+4	; 0x04
     b2e:	01 97       	sbiw	r24, 0x01	; 1
     b30:	9c 83       	std	Y+4, r25	; 0x04
     b32:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x20;
     b34:	eb 81       	ldd	r30, Y+3	; 0x03
     b36:	fc 81       	ldd	r31, Y+4	; 0x04
     b38:	80 e2       	ldi	r24, 0x20	; 32
     b3a:	80 83       	st	Z, r24
     b3c:	8b 81       	ldd	r24, Y+3	; 0x03
     b3e:	9c 81       	ldd	r25, Y+4	; 0x04
     b40:	01 97       	sbiw	r24, 0x01	; 1
     b42:	9c 83       	std	Y+4, r25	; 0x04
     b44:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x21;
     b46:	eb 81       	ldd	r30, Y+3	; 0x03
     b48:	fc 81       	ldd	r31, Y+4	; 0x04
     b4a:	81 e2       	ldi	r24, 0x21	; 33
     b4c:	80 83       	st	Z, r24
     b4e:	8b 81       	ldd	r24, Y+3	; 0x03
     b50:	9c 81       	ldd	r25, Y+4	; 0x04
     b52:	01 97       	sbiw	r24, 0x01	; 1
     b54:	9c 83       	std	Y+4, r25	; 0x04
     b56:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x22;
     b58:	eb 81       	ldd	r30, Y+3	; 0x03
     b5a:	fc 81       	ldd	r31, Y+4	; 0x04
     b5c:	82 e2       	ldi	r24, 0x22	; 34
     b5e:	80 83       	st	Z, r24
     b60:	8b 81       	ldd	r24, Y+3	; 0x03
     b62:	9c 81       	ldd	r25, Y+4	; 0x04
     b64:	01 97       	sbiw	r24, 0x01	; 1
     b66:	9c 83       	std	Y+4, r25	; 0x04
     b68:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x23;
     b6a:	eb 81       	ldd	r30, Y+3	; 0x03
     b6c:	fc 81       	ldd	r31, Y+4	; 0x04
     b6e:	83 e2       	ldi	r24, 0x23	; 35
     b70:	80 83       	st	Z, r24
     b72:	8b 81       	ldd	r24, Y+3	; 0x03
     b74:	9c 81       	ldd	r25, Y+4	; 0x04
     b76:	01 97       	sbiw	r24, 0x01	; 1
     b78:	9c 83       	std	Y+4, r25	; 0x04
     b7a:	8b 83       	std	Y+3, r24	; 0x03

    tmp = (unsigned short)arg;
     b7c:	89 85       	ldd	r24, Y+9	; 0x09
     b7e:	9a 85       	ldd	r25, Y+10	; 0x0a
     b80:	9a 83       	std	Y+2, r25	; 0x02
     b82:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (char)(tmp&(unsigned short)0x00ff); // r24 LSByte of arg
     b84:	89 81       	ldd	r24, Y+1	; 0x01
     b86:	eb 81       	ldd	r30, Y+3	; 0x03
     b88:	fc 81       	ldd	r31, Y+4	; 0x04
     b8a:	80 83       	st	Z, r24
     b8c:	8b 81       	ldd	r24, Y+3	; 0x03
     b8e:	9c 81       	ldd	r25, Y+4	; 0x04
     b90:	01 97       	sbiw	r24, 0x01	; 1
     b92:	9c 83       	std	Y+4, r25	; 0x04
     b94:	8b 83       	std	Y+3, r24	; 0x03
    tmp>>=8;
     b96:	89 81       	ldd	r24, Y+1	; 0x01
     b98:	9a 81       	ldd	r25, Y+2	; 0x02
     b9a:	89 2f       	mov	r24, r25
     b9c:	99 27       	eor	r25, r25
     b9e:	9a 83       	std	Y+2, r25	; 0x02
     ba0:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (char)(tmp&(unsigned short)0x00ff); // r25 MSByte of arg
     ba2:	89 81       	ldd	r24, Y+1	; 0x01
     ba4:	eb 81       	ldd	r30, Y+3	; 0x03
     ba6:	fc 81       	ldd	r31, Y+4	; 0x04
     ba8:	80 83       	st	Z, r24
     baa:	8b 81       	ldd	r24, Y+3	; 0x03
     bac:	9c 81       	ldd	r25, Y+4	; 0x04
     bae:	01 97       	sbiw	r24, 0x01	; 1
     bb0:	9c 83       	std	Y+4, r25	; 0x04
     bb2:	8b 83       	std	Y+3, r24	; 0x03

    *tos-- = 0x26;
     bb4:	eb 81       	ldd	r30, Y+3	; 0x03
     bb6:	fc 81       	ldd	r31, Y+4	; 0x04
     bb8:	86 e2       	ldi	r24, 0x26	; 38
     bba:	80 83       	st	Z, r24
     bbc:	8b 81       	ldd	r24, Y+3	; 0x03
     bbe:	9c 81       	ldd	r25, Y+4	; 0x04
     bc0:	01 97       	sbiw	r24, 0x01	; 1
     bc2:	9c 83       	std	Y+4, r25	; 0x04
     bc4:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x27;
     bc6:	eb 81       	ldd	r30, Y+3	; 0x03
     bc8:	fc 81       	ldd	r31, Y+4	; 0x04
     bca:	87 e2       	ldi	r24, 0x27	; 39
     bcc:	80 83       	st	Z, r24
     bce:	8b 81       	ldd	r24, Y+3	; 0x03
     bd0:	9c 81       	ldd	r25, Y+4	; 0x04
     bd2:	01 97       	sbiw	r24, 0x01	; 1
     bd4:	9c 83       	std	Y+4, r25	; 0x04
     bd6:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x28;
     bd8:	eb 81       	ldd	r30, Y+3	; 0x03
     bda:	fc 81       	ldd	r31, Y+4	; 0x04
     bdc:	88 e2       	ldi	r24, 0x28	; 40
     bde:	80 83       	st	Z, r24
     be0:	8b 81       	ldd	r24, Y+3	; 0x03
     be2:	9c 81       	ldd	r25, Y+4	; 0x04
     be4:	01 97       	sbiw	r24, 0x01	; 1
     be6:	9c 83       	std	Y+4, r25	; 0x04
     be8:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x29;
     bea:	eb 81       	ldd	r30, Y+3	; 0x03
     bec:	fc 81       	ldd	r31, Y+4	; 0x04
     bee:	89 e2       	ldi	r24, 0x29	; 41
     bf0:	80 83       	st	Z, r24
     bf2:	8b 81       	ldd	r24, Y+3	; 0x03
     bf4:	9c 81       	ldd	r25, Y+4	; 0x04
     bf6:	01 97       	sbiw	r24, 0x01	; 1
     bf8:	9c 83       	std	Y+4, r25	; 0x04
     bfa:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x30;
     bfc:	eb 81       	ldd	r30, Y+3	; 0x03
     bfe:	fc 81       	ldd	r31, Y+4	; 0x04
     c00:	80 e3       	ldi	r24, 0x30	; 48
     c02:	80 83       	st	Z, r24
     c04:	8b 81       	ldd	r24, Y+3	; 0x03
     c06:	9c 81       	ldd	r25, Y+4	; 0x04
     c08:	01 97       	sbiw	r24, 0x01	; 1
     c0a:	9c 83       	std	Y+4, r25	; 0x04
     c0c:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x31;
     c0e:	eb 81       	ldd	r30, Y+3	; 0x03
     c10:	fc 81       	ldd	r31, Y+4	; 0x04
     c12:	81 e3       	ldi	r24, 0x31	; 49
     c14:	80 83       	st	Z, r24
     c16:	8b 81       	ldd	r24, Y+3	; 0x03
     c18:	9c 81       	ldd	r25, Y+4	; 0x04
     c1a:	01 97       	sbiw	r24, 0x01	; 1
     c1c:	9c 83       	std	Y+4, r25	; 0x04
     c1e:	8b 83       	std	Y+3, r24	; 0x03
#ifdef RAMPZ
    *tos-- = 0xff;
#endif
    return((void *)tos);
     c20:	8b 81       	ldd	r24, Y+3	; 0x03
     c22:	9c 81       	ldd	r25, Y+4	; 0x04
}
     c24:	2a 96       	adiw	r28, 0x0a	; 10
     c26:	0f b6       	in	r0, 0x3f	; 63
     c28:	f8 94       	cli
     c2a:	de bf       	out	0x3e, r29	; 62
     c2c:	0f be       	out	0x3f, r0	; 63
     c2e:	cd bf       	out	0x3d, r28	; 61
     c30:	cf 91       	pop	r28
     c32:	df 91       	pop	r29
     c34:	08 95       	ret

00000c36 <enter_crit_sec>:
    if( kernel.sched[core].nested_crit_sec == (count_t)0 )enable_interrupts();
}

#else
void enter_crit_sec(void)
{
     c36:	df 93       	push	r29
     c38:	cf 93       	push	r28
     c3a:	cd b7       	in	r28, 0x3d	; 61
     c3c:	de b7       	in	r29, 0x3e	; 62
    disable_interrupts();
     c3e:	0e 94 bc 00 	call	0x178	; 0x178 <disable_interrupts>
    kernel.sched.nested_crit_sec++;
     c42:	80 91 c7 01 	lds	r24, 0x01C7
     c46:	90 91 c8 01 	lds	r25, 0x01C8
     c4a:	01 96       	adiw	r24, 0x01	; 1
     c4c:	90 93 c8 01 	sts	0x01C8, r25
     c50:	80 93 c7 01 	sts	0x01C7, r24
}
     c54:	cf 91       	pop	r28
     c56:	df 91       	pop	r29
     c58:	08 95       	ret

00000c5a <exit_crit_sec>:
void exit_crit_sec(void)
{
     c5a:	df 93       	push	r29
     c5c:	cf 93       	push	r28
     c5e:	cd b7       	in	r28, 0x3d	; 61
     c60:	de b7       	in	r29, 0x3e	; 62
    if( kernel.sched.nested_crit_sec != (count_t)0 )kernel.sched.nested_crit_sec--;
     c62:	80 91 c7 01 	lds	r24, 0x01C7
     c66:	90 91 c8 01 	lds	r25, 0x01C8
     c6a:	00 97       	sbiw	r24, 0x00	; 0
     c6c:	49 f0       	breq	.+18     	; 0xc80 <exit_crit_sec+0x26>
     c6e:	80 91 c7 01 	lds	r24, 0x01C7
     c72:	90 91 c8 01 	lds	r25, 0x01C8
     c76:	01 97       	sbiw	r24, 0x01	; 1
     c78:	90 93 c8 01 	sts	0x01C8, r25
     c7c:	80 93 c7 01 	sts	0x01C7, r24
    if( kernel.sched.nested_crit_sec == (count_t)0 )enable_interrupts();
     c80:	80 91 c7 01 	lds	r24, 0x01C7
     c84:	90 91 c8 01 	lds	r25, 0x01C8
     c88:	00 97       	sbiw	r24, 0x00	; 0
     c8a:	11 f4       	brne	.+4      	; 0xc90 <exit_crit_sec+0x36>
     c8c:	0e 94 c4 00 	call	0x188	; 0x188 <enable_interrupts>
}
     c90:	cf 91       	pop	r28
     c92:	df 91       	pop	r29
     c94:	08 95       	ret

00000c96 <gitem_init>:
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
// Инициация
void gitem_init(gitem_t * gitem, prio_t prio)
{
     c96:	df 93       	push	r29
     c98:	cf 93       	push	r28
     c9a:	00 d0       	rcall	.+0      	; 0xc9c <gitem_init+0x6>
     c9c:	00 d0       	rcall	.+0      	; 0xc9e <gitem_init+0x8>
     c9e:	0f 92       	push	r0
     ca0:	cd b7       	in	r28, 0x3d	; 61
     ca2:	de b7       	in	r29, 0x3e	; 62
     ca4:	9c 83       	std	Y+4, r25	; 0x04
     ca6:	8b 83       	std	Y+3, r24	; 0x03
     ca8:	6d 83       	std	Y+5, r22	; 0x05
    group_t * group = &gitem->grp;
     caa:	8b 81       	ldd	r24, Y+3	; 0x03
     cac:	9c 81       	ldd	r25, Y+4	; 0x04
     cae:	06 96       	adiw	r24, 0x06	; 6
     cb0:	9a 83       	std	Y+2, r25	; 0x02
     cb2:	89 83       	std	Y+1, r24	; 0x01
    item_init( (item_t *)gitem );
     cb4:	8b 81       	ldd	r24, Y+3	; 0x03
     cb6:	9c 81       	ldd	r25, Y+4	; 0x04
     cb8:	0e 94 31 09 	call	0x1262	; 0x1262 <item_init>
    group_init( group, prio );
     cbc:	89 81       	ldd	r24, Y+1	; 0x01
     cbe:	9a 81       	ldd	r25, Y+2	; 0x02
     cc0:	6d 81       	ldd	r22, Y+5	; 0x05
     cc2:	0e 94 a1 08 	call	0x1142	; 0x1142 <group_init>
    gitem->group = group;
     cc6:	eb 81       	ldd	r30, Y+3	; 0x03
     cc8:	fc 81       	ldd	r31, Y+4	; 0x04
     cca:	89 81       	ldd	r24, Y+1	; 0x01
     ccc:	9a 81       	ldd	r25, Y+2	; 0x02
     cce:	95 83       	std	Z+5, r25	; 0x05
     cd0:	84 83       	std	Z+4, r24	; 0x04
}
     cd2:	0f 90       	pop	r0
     cd4:	0f 90       	pop	r0
     cd6:	0f 90       	pop	r0
     cd8:	0f 90       	pop	r0
     cda:	0f 90       	pop	r0
     cdc:	cf 91       	pop	r28
     cde:	df 91       	pop	r29
     ce0:	08 95       	ret

00000ce2 <gitem_insert>:
// Вставить в список
void gitem_insert(gitem_t * gitem, xlist_t *xlist)
{
     ce2:	df 93       	push	r29
     ce4:	cf 93       	push	r28
     ce6:	cd b7       	in	r28, 0x3d	; 61
     ce8:	de b7       	in	r29, 0x3e	; 62
     cea:	28 97       	sbiw	r28, 0x08	; 8
     cec:	0f b6       	in	r0, 0x3f	; 63
     cee:	f8 94       	cli
     cf0:	de bf       	out	0x3e, r29	; 62
     cf2:	0f be       	out	0x3f, r0	; 63
     cf4:	cd bf       	out	0x3d, r28	; 61
     cf6:	9e 83       	std	Y+6, r25	; 0x06
     cf8:	8d 83       	std	Y+5, r24	; 0x05
     cfa:	78 87       	std	Y+8, r23	; 0x08
     cfc:	6f 83       	std	Y+7, r22	; 0x07
    prio_t prio = gitem->group->prio;
     cfe:	ed 81       	ldd	r30, Y+5	; 0x05
     d00:	fe 81       	ldd	r31, Y+6	; 0x06
     d02:	04 80       	ldd	r0, Z+4	; 0x04
     d04:	f5 81       	ldd	r31, Z+5	; 0x05
     d06:	e0 2d       	mov	r30, r0
     d08:	82 81       	ldd	r24, Z+2	; 0x02
     d0a:	8c 83       	std	Y+4, r24	; 0x04
    index_t mask = ((index_t)1)<<prio;
     d0c:	8c 81       	ldd	r24, Y+4	; 0x04
     d0e:	28 2f       	mov	r18, r24
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	02 c0       	rjmp	.+4      	; 0xd1c <gitem_insert+0x3a>
     d18:	88 0f       	add	r24, r24
     d1a:	99 1f       	adc	r25, r25
     d1c:	2a 95       	dec	r18
     d1e:	e2 f7       	brpl	.-8      	; 0xd18 <gitem_insert+0x36>
     d20:	8b 83       	std	Y+3, r24	; 0x03
    item_t ** head = (item_t **)xlist + prio;
     d22:	2f 81       	ldd	r18, Y+7	; 0x07
     d24:	38 85       	ldd	r19, Y+8	; 0x08
     d26:	8c 81       	ldd	r24, Y+4	; 0x04
     d28:	88 2f       	mov	r24, r24
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	88 0f       	add	r24, r24
     d2e:	99 1f       	adc	r25, r25
     d30:	82 0f       	add	r24, r18
     d32:	93 1f       	adc	r25, r19
     d34:	9a 83       	std	Y+2, r25	; 0x02
     d36:	89 83       	std	Y+1, r24	; 0x01
    // Пуста ли часть списка с таким приоритетом
    if( ( xlist->index )& mask)
     d38:	ef 81       	ldd	r30, Y+7	; 0x07
     d3a:	f8 85       	ldd	r31, Y+8	; 0x08
     d3c:	90 89       	ldd	r25, Z+16	; 0x10
     d3e:	8b 81       	ldd	r24, Y+3	; 0x03
     d40:	89 23       	and	r24, r25
     d42:	88 23       	and	r24, r24
     d44:	51 f0       	breq	.+20     	; 0xd5a <gitem_insert+0x78>
    {
        //Не пуста вставляем туда gitem
        item_insert( (item_t *)gitem, *head );
     d46:	8d 81       	ldd	r24, Y+5	; 0x05
     d48:	9e 81       	ldd	r25, Y+6	; 0x06
     d4a:	e9 81       	ldd	r30, Y+1	; 0x01
     d4c:	fa 81       	ldd	r31, Y+2	; 0x02
     d4e:	20 81       	ld	r18, Z
     d50:	31 81       	ldd	r19, Z+1	; 0x01
     d52:	b9 01       	movw	r22, r18
     d54:	0e 94 49 09 	call	0x1292	; 0x1292 <item_insert>
     d58:	0e c0       	rjmp	.+28     	; 0xd76 <gitem_insert+0x94>
    }
    else
    {
        // Пуста, gitem будет головой
        *head = (item_t *)gitem;
     d5a:	8d 81       	ldd	r24, Y+5	; 0x05
     d5c:	9e 81       	ldd	r25, Y+6	; 0x06
     d5e:	e9 81       	ldd	r30, Y+1	; 0x01
     d60:	fa 81       	ldd	r31, Y+2	; 0x02
     d62:	91 83       	std	Z+1, r25	; 0x01
     d64:	80 83       	st	Z, r24
        xlist->index |= mask;
     d66:	ef 81       	ldd	r30, Y+7	; 0x07
     d68:	f8 85       	ldd	r31, Y+8	; 0x08
     d6a:	90 89       	ldd	r25, Z+16	; 0x10
     d6c:	8b 81       	ldd	r24, Y+3	; 0x03
     d6e:	89 2b       	or	r24, r25
     d70:	ef 81       	ldd	r30, Y+7	; 0x07
     d72:	f8 85       	ldd	r31, Y+8	; 0x08
     d74:	80 8b       	std	Z+16, r24	; 0x10
    }
    gitem->group->link = (void *)xlist;
     d76:	ed 81       	ldd	r30, Y+5	; 0x05
     d78:	fe 81       	ldd	r31, Y+6	; 0x06
     d7a:	04 80       	ldd	r0, Z+4	; 0x04
     d7c:	f5 81       	ldd	r31, Z+5	; 0x05
     d7e:	e0 2d       	mov	r30, r0
     d80:	8f 81       	ldd	r24, Y+7	; 0x07
     d82:	98 85       	ldd	r25, Y+8	; 0x08
     d84:	91 83       	std	Z+1, r25	; 0x01
     d86:	80 83       	st	Z, r24
}
     d88:	28 96       	adiw	r28, 0x08	; 8
     d8a:	0f b6       	in	r0, 0x3f	; 63
     d8c:	f8 94       	cli
     d8e:	de bf       	out	0x3e, r29	; 62
     d90:	0f be       	out	0x3f, r0	; 63
     d92:	cd bf       	out	0x3d, r28	; 61
     d94:	cf 91       	pop	r28
     d96:	df 91       	pop	r29
     d98:	08 95       	ret

00000d9a <gitem_insert_group>:
 при этом gitem->group переходит в Пул

 Ограничения на gitem - он не должен быть сгруппирован в момент встаки в группу.
*/
void gitem_insert_group(gitem_t * gitem, xlist_t *xlist)
{
     d9a:	df 93       	push	r29
     d9c:	cf 93       	push	r28
     d9e:	cd b7       	in	r28, 0x3d	; 61
     da0:	de b7       	in	r29, 0x3e	; 62
     da2:	2a 97       	sbiw	r28, 0x0a	; 10
     da4:	0f b6       	in	r0, 0x3f	; 63
     da6:	f8 94       	cli
     da8:	de bf       	out	0x3e, r29	; 62
     daa:	0f be       	out	0x3f, r0	; 63
     dac:	cd bf       	out	0x3d, r28	; 61
     dae:	98 87       	std	Y+8, r25	; 0x08
     db0:	8f 83       	std	Y+7, r24	; 0x07
     db2:	7a 87       	std	Y+10, r23	; 0x0a
     db4:	69 87       	std	Y+9, r22	; 0x09
    prio_t prio = gitem->group->prio;
     db6:	ef 81       	ldd	r30, Y+7	; 0x07
     db8:	f8 85       	ldd	r31, Y+8	; 0x08
     dba:	04 80       	ldd	r0, Z+4	; 0x04
     dbc:	f5 81       	ldd	r31, Z+5	; 0x05
     dbe:	e0 2d       	mov	r30, r0
     dc0:	82 81       	ldd	r24, Z+2	; 0x02
     dc2:	8e 83       	std	Y+6, r24	; 0x06
    index_t mask = ((index_t)1)<<prio;
     dc4:	8e 81       	ldd	r24, Y+6	; 0x06
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	02 c0       	rjmp	.+4      	; 0xdd4 <gitem_insert_group+0x3a>
     dd0:	88 0f       	add	r24, r24
     dd2:	99 1f       	adc	r25, r25
     dd4:	2a 95       	dec	r18
     dd6:	e2 f7       	brpl	.-8      	; 0xdd0 <gitem_insert_group+0x36>
     dd8:	8d 83       	std	Y+5, r24	; 0x05
    item_t ** head = (item_t **)xlist + prio;
     dda:	29 85       	ldd	r18, Y+9	; 0x09
     ddc:	3a 85       	ldd	r19, Y+10	; 0x0a
     dde:	8e 81       	ldd	r24, Y+6	; 0x06
     de0:	88 2f       	mov	r24, r24
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	88 0f       	add	r24, r24
     de6:	99 1f       	adc	r25, r25
     de8:	82 0f       	add	r24, r18
     dea:	93 1f       	adc	r25, r19
     dec:	9c 83       	std	Y+4, r25	; 0x04
     dee:	8b 83       	std	Y+3, r24	; 0x03
    group_t * group = gitem->group;
     df0:	ef 81       	ldd	r30, Y+7	; 0x07
     df2:	f8 85       	ldd	r31, Y+8	; 0x08
     df4:	84 81       	ldd	r24, Z+4	; 0x04
     df6:	95 81       	ldd	r25, Z+5	; 0x05
     df8:	9a 83       	std	Y+2, r25	; 0x02
     dfa:	89 83       	std	Y+1, r24	; 0x01
    // Пуста ли часть списка с таким приоритетом
    if( ( xlist->index )& mask)
     dfc:	e9 85       	ldd	r30, Y+9	; 0x09
     dfe:	fa 85       	ldd	r31, Y+10	; 0x0a
     e00:	90 89       	ldd	r25, Z+16	; 0x10
     e02:	8d 81       	ldd	r24, Y+5	; 0x05
     e04:	89 23       	and	r24, r25
     e06:	88 23       	and	r24, r24
     e08:	31 f1       	breq	.+76     	; 0xe56 <gitem_insert_group+0xbc>
    {
        //Не пуста вставляем туда gitem
        item_insert((item_t *)gitem, *head );
     e0a:	8f 81       	ldd	r24, Y+7	; 0x07
     e0c:	98 85       	ldd	r25, Y+8	; 0x08
     e0e:	eb 81       	ldd	r30, Y+3	; 0x03
     e10:	fc 81       	ldd	r31, Y+4	; 0x04
     e12:	20 81       	ld	r18, Z
     e14:	31 81       	ldd	r19, Z+1	; 0x01
     e16:	b9 01       	movw	r22, r18
     e18:	0e 94 49 09 	call	0x1292	; 0x1292 <item_insert>
        //Передаем старую группу в пул
        group_push(group);
     e1c:	89 81       	ldd	r24, Y+1	; 0x01
     e1e:	9a 81       	ldd	r25, Y+2	; 0x02
     e20:	0e 94 be 08 	call	0x117c	; 0x117c <group_push>
        //назначаем новую группу - ту, в которой голова
        group = ((gitem_t *)*head)->group;
     e24:	eb 81       	ldd	r30, Y+3	; 0x03
     e26:	fc 81       	ldd	r31, Y+4	; 0x04
     e28:	80 81       	ld	r24, Z
     e2a:	91 81       	ldd	r25, Z+1	; 0x01
     e2c:	fc 01       	movw	r30, r24
     e2e:	84 81       	ldd	r24, Z+4	; 0x04
     e30:	95 81       	ldd	r25, Z+5	; 0x05
     e32:	9a 83       	std	Y+2, r25	; 0x02
     e34:	89 83       	std	Y+1, r24	; 0x01
        gitem->group = group;
     e36:	ef 81       	ldd	r30, Y+7	; 0x07
     e38:	f8 85       	ldd	r31, Y+8	; 0x08
     e3a:	89 81       	ldd	r24, Y+1	; 0x01
     e3c:	9a 81       	ldd	r25, Y+2	; 0x02
     e3e:	95 83       	std	Z+5, r25	; 0x05
     e40:	84 83       	std	Z+4, r24	; 0x04
        //количество элементов в группе увеличилось на 1
        group->el_num++;
     e42:	e9 81       	ldd	r30, Y+1	; 0x01
     e44:	fa 81       	ldd	r31, Y+2	; 0x02
     e46:	83 81       	ldd	r24, Z+3	; 0x03
     e48:	94 81       	ldd	r25, Z+4	; 0x04
     e4a:	01 96       	adiw	r24, 0x01	; 1
     e4c:	e9 81       	ldd	r30, Y+1	; 0x01
     e4e:	fa 81       	ldd	r31, Y+2	; 0x02
     e50:	94 83       	std	Z+4, r25	; 0x04
     e52:	83 83       	std	Z+3, r24	; 0x03
     e54:	14 c0       	rjmp	.+40     	; 0xe7e <gitem_insert_group+0xe4>
    }
    else
    {
        // Пуста, gitem будет головой
        *head = (item_t *)gitem;
     e56:	8f 81       	ldd	r24, Y+7	; 0x07
     e58:	98 85       	ldd	r25, Y+8	; 0x08
     e5a:	eb 81       	ldd	r30, Y+3	; 0x03
     e5c:	fc 81       	ldd	r31, Y+4	; 0x04
     e5e:	91 83       	std	Z+1, r25	; 0x01
     e60:	80 83       	st	Z, r24
        xlist->index |= mask;
     e62:	e9 85       	ldd	r30, Y+9	; 0x09
     e64:	fa 85       	ldd	r31, Y+10	; 0x0a
     e66:	90 89       	ldd	r25, Z+16	; 0x10
     e68:	8d 81       	ldd	r24, Y+5	; 0x05
     e6a:	89 2b       	or	r24, r25
     e6c:	e9 85       	ldd	r30, Y+9	; 0x09
     e6e:	fa 85       	ldd	r31, Y+10	; 0x0a
     e70:	80 8b       	std	Z+16, r24	; 0x10
        group->link = (void *)xlist;
     e72:	e9 81       	ldd	r30, Y+1	; 0x01
     e74:	fa 81       	ldd	r31, Y+2	; 0x02
     e76:	89 85       	ldd	r24, Y+9	; 0x09
     e78:	9a 85       	ldd	r25, Y+10	; 0x0a
     e7a:	91 83       	std	Z+1, r25	; 0x01
     e7c:	80 83       	st	Z, r24
    }
}
     e7e:	2a 96       	adiw	r28, 0x0a	; 10
     e80:	0f b6       	in	r0, 0x3f	; 63
     e82:	f8 94       	cli
     e84:	de bf       	out	0x3e, r29	; 62
     e86:	0f be       	out	0x3f, r0	; 63
     e88:	cd bf       	out	0x3d, r28	; 61
     e8a:	cf 91       	pop	r28
     e8c:	df 91       	pop	r29
     e8e:	08 95       	ret

00000e90 <gitem_fast_cut>:
// Быстро вырезать из списка (не обнуляется указатель gitem->group->link)
void gitem_fast_cut(gitem_t * gitem)
{
     e90:	df 93       	push	r29
     e92:	cf 93       	push	r28
     e94:	00 d0       	rcall	.+0      	; 0xe96 <gitem_fast_cut+0x6>
     e96:	00 d0       	rcall	.+0      	; 0xe98 <gitem_fast_cut+0x8>
     e98:	0f 92       	push	r0
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
     e9e:	9d 83       	std	Y+5, r25	; 0x05
     ea0:	8c 83       	std	Y+4, r24	; 0x04
    prio_t prio = gitem->group->prio;
     ea2:	ec 81       	ldd	r30, Y+4	; 0x04
     ea4:	fd 81       	ldd	r31, Y+5	; 0x05
     ea6:	04 80       	ldd	r0, Z+4	; 0x04
     ea8:	f5 81       	ldd	r31, Z+5	; 0x05
     eaa:	e0 2d       	mov	r30, r0
     eac:	82 81       	ldd	r24, Z+2	; 0x02
     eae:	8b 83       	std	Y+3, r24	; 0x03
    xlist_t * xlist = (xlist_t *)gitem->group->link;
     eb0:	ec 81       	ldd	r30, Y+4	; 0x04
     eb2:	fd 81       	ldd	r31, Y+5	; 0x05
     eb4:	04 80       	ldd	r0, Z+4	; 0x04
     eb6:	f5 81       	ldd	r31, Z+5	; 0x05
     eb8:	e0 2d       	mov	r30, r0
     eba:	80 81       	ld	r24, Z
     ebc:	91 81       	ldd	r25, Z+1	; 0x01
     ebe:	9a 83       	std	Y+2, r25	; 0x02
     ec0:	89 83       	std	Y+1, r24	; 0x01
    // Является ли эта часть списка группированной?
    if( gitem->group->el_num > (count_t)1 )
     ec2:	ec 81       	ldd	r30, Y+4	; 0x04
     ec4:	fd 81       	ldd	r31, Y+5	; 0x05
     ec6:	04 80       	ldd	r0, Z+4	; 0x04
     ec8:	f5 81       	ldd	r31, Z+5	; 0x05
     eca:	e0 2d       	mov	r30, r0
     ecc:	83 81       	ldd	r24, Z+3	; 0x03
     ece:	94 81       	ldd	r25, Z+4	; 0x04
     ed0:	82 30       	cpi	r24, 0x02	; 2
     ed2:	91 05       	cpc	r25, r1
     ed4:	b8 f0       	brcs	.+46     	; 0xf04 <gitem_fast_cut+0x74>
    {
        //Группированная часть списка, будем вырезать из группы с выделением новой группы из Пула
        // В текущей группе стало на 1 элемент меньше
        gitem->group->el_num--;
     ed6:	ec 81       	ldd	r30, Y+4	; 0x04
     ed8:	fd 81       	ldd	r31, Y+5	; 0x05
     eda:	04 80       	ldd	r0, Z+4	; 0x04
     edc:	f5 81       	ldd	r31, Z+5	; 0x05
     ede:	e0 2d       	mov	r30, r0
     ee0:	83 81       	ldd	r24, Z+3	; 0x03
     ee2:	94 81       	ldd	r25, Z+4	; 0x04
     ee4:	01 97       	sbiw	r24, 0x01	; 1
     ee6:	94 83       	std	Z+4, r25	; 0x04
     ee8:	83 83       	std	Z+3, r24	; 0x03
        //выделяем новую группу
        gitem->group = group_pop();
     eea:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <group_pop>
     eee:	ec 81       	ldd	r30, Y+4	; 0x04
     ef0:	fd 81       	ldd	r31, Y+5	; 0x05
     ef2:	95 83       	std	Z+5, r25	; 0x05
     ef4:	84 83       	std	Z+4, r24	; 0x04
        // Правильный приоритет, количество элементов в группе, выделенной из пула должно быть равно 1
        gitem->group->prio = (prio_t)prio;
     ef6:	ec 81       	ldd	r30, Y+4	; 0x04
     ef8:	fd 81       	ldd	r31, Y+5	; 0x05
     efa:	04 80       	ldd	r0, Z+4	; 0x04
     efc:	f5 81       	ldd	r31, Z+5	; 0x05
     efe:	e0 2d       	mov	r30, r0
     f00:	8b 81       	ldd	r24, Y+3	; 0x03
     f02:	82 83       	std	Z+2, r24	; 0x02
    }
    //Является ли элемент единственным в своей части списка?
    if( ((item_t *)gitem)->next == (item_t *)gitem )
     f04:	ec 81       	ldd	r30, Y+4	; 0x04
     f06:	fd 81       	ldd	r31, Y+5	; 0x05
     f08:	20 81       	ld	r18, Z
     f0a:	31 81       	ldd	r19, Z+1	; 0x01
     f0c:	8c 81       	ldd	r24, Y+4	; 0x04
     f0e:	9d 81       	ldd	r25, Y+5	; 0x05
     f10:	28 17       	cp	r18, r24
     f12:	39 07       	cpc	r19, r25
     f14:	09 f5       	brne	.+66     	; 0xf58 <gitem_fast_cut+0xc8>
    {
        // Да, является!
        xlist->item[prio] = (item_t *)0;
     f16:	8b 81       	ldd	r24, Y+3	; 0x03
     f18:	88 2f       	mov	r24, r24
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	29 81       	ldd	r18, Y+1	; 0x01
     f1e:	3a 81       	ldd	r19, Y+2	; 0x02
     f20:	88 0f       	add	r24, r24
     f22:	99 1f       	adc	r25, r25
     f24:	f9 01       	movw	r30, r18
     f26:	e8 0f       	add	r30, r24
     f28:	f9 1f       	adc	r31, r25
     f2a:	11 82       	std	Z+1, r1	; 0x01
     f2c:	10 82       	st	Z, r1
        xlist->index &= ~(((index_t)1)<<prio);
     f2e:	e9 81       	ldd	r30, Y+1	; 0x01
     f30:	fa 81       	ldd	r31, Y+2	; 0x02
     f32:	80 89       	ldd	r24, Z+16	; 0x10
     f34:	48 2f       	mov	r20, r24
     f36:	8b 81       	ldd	r24, Y+3	; 0x03
     f38:	28 2f       	mov	r18, r24
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	02 2e       	mov	r0, r18
     f42:	02 c0       	rjmp	.+4      	; 0xf48 <gitem_fast_cut+0xb8>
     f44:	88 0f       	add	r24, r24
     f46:	99 1f       	adc	r25, r25
     f48:	0a 94       	dec	r0
     f4a:	e2 f7       	brpl	.-8      	; 0xf44 <gitem_fast_cut+0xb4>
     f4c:	80 95       	com	r24
     f4e:	84 23       	and	r24, r20
     f50:	e9 81       	ldd	r30, Y+1	; 0x01
     f52:	fa 81       	ldd	r31, Y+2	; 0x02
     f54:	80 8b       	std	Z+16, r24	; 0x10
     f56:	1a c0       	rjmp	.+52     	; 0xf8c <gitem_fast_cut+0xfc>
    }
    else
    {
        // Нет, не является!
        // Является ли элемент головой своей части списка?
        if( xlist->item[(prio_t)prio] == (item_t *)gitem )
     f58:	8b 81       	ldd	r24, Y+3	; 0x03
     f5a:	88 2f       	mov	r24, r24
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	29 81       	ldd	r18, Y+1	; 0x01
     f60:	3a 81       	ldd	r19, Y+2	; 0x02
     f62:	88 0f       	add	r24, r24
     f64:	99 1f       	adc	r25, r25
     f66:	f9 01       	movw	r30, r18
     f68:	e8 0f       	add	r30, r24
     f6a:	f9 1f       	adc	r31, r25
     f6c:	20 81       	ld	r18, Z
     f6e:	31 81       	ldd	r19, Z+1	; 0x01
     f70:	8c 81       	ldd	r24, Y+4	; 0x04
     f72:	9d 81       	ldd	r25, Y+5	; 0x05
     f74:	28 17       	cp	r18, r24
     f76:	39 07       	cpc	r19, r25
     f78:	29 f4       	brne	.+10     	; 0xf84 <gitem_fast_cut+0xf4>
        {
            // Является, список надо переключить
            xlist_switch( xlist, prio );
     f7a:	89 81       	ldd	r24, Y+1	; 0x01
     f7c:	9a 81       	ldd	r25, Y+2	; 0x02
     f7e:	6b 81       	ldd	r22, Y+3	; 0x03
     f80:	0e 94 3a 11 	call	0x2274	; 0x2274 <xlist_switch>
        }
        // Собственно - вырезаем элемент
        item_cut( (item_t *)gitem );
     f84:	8c 81       	ldd	r24, Y+4	; 0x04
     f86:	9d 81       	ldd	r25, Y+5	; 0x05
     f88:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <item_cut>
    }
}
     f8c:	0f 90       	pop	r0
     f8e:	0f 90       	pop	r0
     f90:	0f 90       	pop	r0
     f92:	0f 90       	pop	r0
     f94:	0f 90       	pop	r0
     f96:	cf 91       	pop	r28
     f98:	df 91       	pop	r29
     f9a:	08 95       	ret

00000f9c <gitem_cut>:
// Вырезать из списка
void gitem_cut(gitem_t * gitem)
{
     f9c:	df 93       	push	r29
     f9e:	cf 93       	push	r28
     fa0:	00 d0       	rcall	.+0      	; 0xfa2 <gitem_cut+0x6>
     fa2:	cd b7       	in	r28, 0x3d	; 61
     fa4:	de b7       	in	r29, 0x3e	; 62
     fa6:	9a 83       	std	Y+2, r25	; 0x02
     fa8:	89 83       	std	Y+1, r24	; 0x01
    gitem_fast_cut( gitem );
     faa:	89 81       	ldd	r24, Y+1	; 0x01
     fac:	9a 81       	ldd	r25, Y+2	; 0x02
     fae:	0e 94 48 07 	call	0xe90	; 0xe90 <gitem_fast_cut>
    gitem->group->link = (void *)0;
     fb2:	e9 81       	ldd	r30, Y+1	; 0x01
     fb4:	fa 81       	ldd	r31, Y+2	; 0x02
     fb6:	04 80       	ldd	r0, Z+4	; 0x04
     fb8:	f5 81       	ldd	r31, Z+5	; 0x05
     fba:	e0 2d       	mov	r30, r0
     fbc:	11 82       	std	Z+1, r1	; 0x01
     fbe:	10 82       	st	Z, r1
}
     fc0:	0f 90       	pop	r0
     fc2:	0f 90       	pop	r0
     fc4:	cf 91       	pop	r28
     fc6:	df 91       	pop	r29
     fc8:	08 95       	ret

00000fca <gitem_xlist_merge>:
 1) Оба списка содержат только объекты типа gitem_t
 2) В списке source на каждом уровне приоритета все объекты типа gitem_t приенадлежат к одной группе.
 3) Элементы списка source, находящиеся на разных уровнях приоритета, пренадлежат разным группам.
*/
void gitem_xlist_merge(xlist_t * source, xlist_t * destignation)
{
     fca:	df 93       	push	r29
     fcc:	cf 93       	push	r28
     fce:	cd b7       	in	r28, 0x3d	; 61
     fd0:	de b7       	in	r29, 0x3e	; 62
     fd2:	2c 97       	sbiw	r28, 0x0c	; 12
     fd4:	0f b6       	in	r0, 0x3f	; 63
     fd6:	f8 94       	cli
     fd8:	de bf       	out	0x3e, r29	; 62
     fda:	0f be       	out	0x3f, r0	; 63
     fdc:	cd bf       	out	0x3d, r28	; 61
     fde:	9a 87       	std	Y+10, r25	; 0x0a
     fe0:	89 87       	std	Y+9, r24	; 0x09
     fe2:	7c 87       	std	Y+12, r23	; 0x0c
     fe4:	6b 87       	std	Y+11, r22	; 0x0b
    index_t mask = (index_t)1;
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	88 87       	std	Y+8, r24	; 0x08
    prio_t current_prio = (prio_t)0;
     fea:	1f 82       	std	Y+7, r1	; 0x07
     fec:	9a c0       	rjmp	.+308    	; 0x1122 <gitem_xlist_merge+0x158>
    while( mask )
    {
        // Есть че перенести?
        if( mask & source->index )
     fee:	e9 85       	ldd	r30, Y+9	; 0x09
     ff0:	fa 85       	ldd	r31, Y+10	; 0x0a
     ff2:	90 89       	ldd	r25, Z+16	; 0x10
     ff4:	88 85       	ldd	r24, Y+8	; 0x08
     ff6:	89 23       	and	r24, r25
     ff8:	88 23       	and	r24, r24
     ffa:	09 f4       	brne	.+2      	; 0xffe <gitem_xlist_merge+0x34>
     ffc:	8c c0       	rjmp	.+280    	; 0x1116 <gitem_xlist_merge+0x14c>
        {
            // Есть!
            // Есть куда переносить?
            if( mask & destignation->index )
     ffe:	eb 85       	ldd	r30, Y+11	; 0x0b
    1000:	fc 85       	ldd	r31, Y+12	; 0x0c
    1002:	90 89       	ldd	r25, Z+16	; 0x10
    1004:	88 85       	ldd	r24, Y+8	; 0x08
    1006:	89 23       	and	r24, r25
    1008:	88 23       	and	r24, r24
    100a:	09 f4       	brne	.+2      	; 0x100e <gitem_xlist_merge+0x44>
    100c:	43 c0       	rjmp	.+134    	; 0x1094 <gitem_xlist_merge+0xca>
            {
                //Есть!
                // Сшиваем 2 2-связных списка!!!
                item_t * src = source->item[current_prio];
    100e:	8f 81       	ldd	r24, Y+7	; 0x07
    1010:	88 2f       	mov	r24, r24
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	29 85       	ldd	r18, Y+9	; 0x09
    1016:	3a 85       	ldd	r19, Y+10	; 0x0a
    1018:	88 0f       	add	r24, r24
    101a:	99 1f       	adc	r25, r25
    101c:	f9 01       	movw	r30, r18
    101e:	e8 0f       	add	r30, r24
    1020:	f9 1f       	adc	r31, r25
    1022:	80 81       	ld	r24, Z
    1024:	91 81       	ldd	r25, Z+1	; 0x01
    1026:	9e 83       	std	Y+6, r25	; 0x06
    1028:	8d 83       	std	Y+5, r24	; 0x05
                item_t * dst = destignation->item[current_prio];
    102a:	8f 81       	ldd	r24, Y+7	; 0x07
    102c:	88 2f       	mov	r24, r24
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	2b 85       	ldd	r18, Y+11	; 0x0b
    1032:	3c 85       	ldd	r19, Y+12	; 0x0c
    1034:	88 0f       	add	r24, r24
    1036:	99 1f       	adc	r25, r25
    1038:	f9 01       	movw	r30, r18
    103a:	e8 0f       	add	r30, r24
    103c:	f9 1f       	adc	r31, r25
    103e:	80 81       	ld	r24, Z
    1040:	91 81       	ldd	r25, Z+1	; 0x01
    1042:	9c 83       	std	Y+4, r25	; 0x04
    1044:	8b 83       	std	Y+3, r24	; 0x03
                src->prev->next = dst;
    1046:	ed 81       	ldd	r30, Y+5	; 0x05
    1048:	fe 81       	ldd	r31, Y+6	; 0x06
    104a:	02 80       	ldd	r0, Z+2	; 0x02
    104c:	f3 81       	ldd	r31, Z+3	; 0x03
    104e:	e0 2d       	mov	r30, r0
    1050:	8b 81       	ldd	r24, Y+3	; 0x03
    1052:	9c 81       	ldd	r25, Y+4	; 0x04
    1054:	91 83       	std	Z+1, r25	; 0x01
    1056:	80 83       	st	Z, r24
                dst->prev->next = src;
    1058:	eb 81       	ldd	r30, Y+3	; 0x03
    105a:	fc 81       	ldd	r31, Y+4	; 0x04
    105c:	02 80       	ldd	r0, Z+2	; 0x02
    105e:	f3 81       	ldd	r31, Z+3	; 0x03
    1060:	e0 2d       	mov	r30, r0
    1062:	8d 81       	ldd	r24, Y+5	; 0x05
    1064:	9e 81       	ldd	r25, Y+6	; 0x06
    1066:	91 83       	std	Z+1, r25	; 0x01
    1068:	80 83       	st	Z, r24
                item_t * buf = dst->prev;
    106a:	eb 81       	ldd	r30, Y+3	; 0x03
    106c:	fc 81       	ldd	r31, Y+4	; 0x04
    106e:	82 81       	ldd	r24, Z+2	; 0x02
    1070:	93 81       	ldd	r25, Z+3	; 0x03
    1072:	9a 83       	std	Y+2, r25	; 0x02
    1074:	89 83       	std	Y+1, r24	; 0x01
                dst->prev = src->prev;
    1076:	ed 81       	ldd	r30, Y+5	; 0x05
    1078:	fe 81       	ldd	r31, Y+6	; 0x06
    107a:	82 81       	ldd	r24, Z+2	; 0x02
    107c:	93 81       	ldd	r25, Z+3	; 0x03
    107e:	eb 81       	ldd	r30, Y+3	; 0x03
    1080:	fc 81       	ldd	r31, Y+4	; 0x04
    1082:	93 83       	std	Z+3, r25	; 0x03
    1084:	82 83       	std	Z+2, r24	; 0x02
                src->prev = buf;
    1086:	ed 81       	ldd	r30, Y+5	; 0x05
    1088:	fe 81       	ldd	r31, Y+6	; 0x06
    108a:	89 81       	ldd	r24, Y+1	; 0x01
    108c:	9a 81       	ldd	r25, Y+2	; 0x02
    108e:	93 83       	std	Z+3, r25	; 0x03
    1090:	82 83       	std	Z+2, r24	; 0x02
    1092:	21 c0       	rjmp	.+66     	; 0x10d6 <gitem_xlist_merge+0x10c>
            }
            else
            {
                //Нет, тупо переносим всю группу.
                destignation->item[current_prio] = source->item[current_prio];
    1094:	8f 81       	ldd	r24, Y+7	; 0x07
    1096:	68 2f       	mov	r22, r24
    1098:	70 e0       	ldi	r23, 0x00	; 0
    109a:	8f 81       	ldd	r24, Y+7	; 0x07
    109c:	88 2f       	mov	r24, r24
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	29 85       	ldd	r18, Y+9	; 0x09
    10a2:	3a 85       	ldd	r19, Y+10	; 0x0a
    10a4:	88 0f       	add	r24, r24
    10a6:	99 1f       	adc	r25, r25
    10a8:	f9 01       	movw	r30, r18
    10aa:	e8 0f       	add	r30, r24
    10ac:	f9 1f       	adc	r31, r25
    10ae:	40 81       	ld	r20, Z
    10b0:	51 81       	ldd	r21, Z+1	; 0x01
    10b2:	2b 85       	ldd	r18, Y+11	; 0x0b
    10b4:	3c 85       	ldd	r19, Y+12	; 0x0c
    10b6:	cb 01       	movw	r24, r22
    10b8:	88 0f       	add	r24, r24
    10ba:	99 1f       	adc	r25, r25
    10bc:	f9 01       	movw	r30, r18
    10be:	e8 0f       	add	r30, r24
    10c0:	f9 1f       	adc	r31, r25
    10c2:	51 83       	std	Z+1, r21	; 0x01
    10c4:	40 83       	st	Z, r20
                destignation->index |= mask;
    10c6:	eb 85       	ldd	r30, Y+11	; 0x0b
    10c8:	fc 85       	ldd	r31, Y+12	; 0x0c
    10ca:	90 89       	ldd	r25, Z+16	; 0x10
    10cc:	88 85       	ldd	r24, Y+8	; 0x08
    10ce:	89 2b       	or	r24, r25
    10d0:	eb 85       	ldd	r30, Y+11	; 0x0b
    10d2:	fc 85       	ldd	r31, Y+12	; 0x0c
    10d4:	80 8b       	std	Z+16, r24	; 0x10
            }
            // Вот почему эта функция отнесена к методам gitem_t
            ((gitem_t *)source->item[current_prio])->group->link = (void *)destignation;
    10d6:	8f 81       	ldd	r24, Y+7	; 0x07
    10d8:	88 2f       	mov	r24, r24
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	29 85       	ldd	r18, Y+9	; 0x09
    10de:	3a 85       	ldd	r19, Y+10	; 0x0a
    10e0:	88 0f       	add	r24, r24
    10e2:	99 1f       	adc	r25, r25
    10e4:	f9 01       	movw	r30, r18
    10e6:	e8 0f       	add	r30, r24
    10e8:	f9 1f       	adc	r31, r25
    10ea:	80 81       	ld	r24, Z
    10ec:	91 81       	ldd	r25, Z+1	; 0x01
    10ee:	fc 01       	movw	r30, r24
    10f0:	04 80       	ldd	r0, Z+4	; 0x04
    10f2:	f5 81       	ldd	r31, Z+5	; 0x05
    10f4:	e0 2d       	mov	r30, r0
    10f6:	8b 85       	ldd	r24, Y+11	; 0x0b
    10f8:	9c 85       	ldd	r25, Y+12	; 0x0c
    10fa:	91 83       	std	Z+1, r25	; 0x01
    10fc:	80 83       	st	Z, r24
            // Перенос закончен, обнуляем указатель
            source->item[(prio_t)current_prio] = (item_t *)0;
    10fe:	8f 81       	ldd	r24, Y+7	; 0x07
    1100:	88 2f       	mov	r24, r24
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	29 85       	ldd	r18, Y+9	; 0x09
    1106:	3a 85       	ldd	r19, Y+10	; 0x0a
    1108:	88 0f       	add	r24, r24
    110a:	99 1f       	adc	r25, r25
    110c:	f9 01       	movw	r30, r18
    110e:	e8 0f       	add	r30, r24
    1110:	f9 1f       	adc	r31, r25
    1112:	11 82       	std	Z+1, r1	; 0x01
    1114:	10 82       	st	Z, r1
        }
        mask<<=1;
    1116:	88 85       	ldd	r24, Y+8	; 0x08
    1118:	88 0f       	add	r24, r24
    111a:	88 87       	std	Y+8, r24	; 0x08
        current_prio++;
    111c:	8f 81       	ldd	r24, Y+7	; 0x07
    111e:	8f 5f       	subi	r24, 0xFF	; 255
    1120:	8f 83       	std	Y+7, r24	; 0x07
*/
void gitem_xlist_merge(xlist_t * source, xlist_t * destignation)
{
    index_t mask = (index_t)1;
    prio_t current_prio = (prio_t)0;
    while( mask )
    1122:	88 85       	ldd	r24, Y+8	; 0x08
    1124:	88 23       	and	r24, r24
    1126:	09 f0       	breq	.+2      	; 0x112a <gitem_xlist_merge+0x160>
    1128:	62 cf       	rjmp	.-316    	; 0xfee <gitem_xlist_merge+0x24>
        }
        mask<<=1;
        current_prio++;
    }
    // Список полностью перенесен, обнуляем индекс
    source->index = (index_t)0;
    112a:	e9 85       	ldd	r30, Y+9	; 0x09
    112c:	fa 85       	ldd	r31, Y+10	; 0x0a
    112e:	10 8a       	std	Z+16, r1	; 0x10
}
    1130:	2c 96       	adiw	r28, 0x0c	; 12
    1132:	0f b6       	in	r0, 0x3f	; 63
    1134:	f8 94       	cli
    1136:	de bf       	out	0x3e, r29	; 62
    1138:	0f be       	out	0x3f, r0	; 63
    113a:	cd bf       	out	0x3d, r28	; 61
    113c:	cf 91       	pop	r28
    113e:	df 91       	pop	r29
    1140:	08 95       	ret

00001142 <group_init>:
*****************************************************************************************/
#include "../include/bugurt.h"
//Методы group_t
// инициация
void group_init(group_t * group, prio_t prio)
{
    1142:	df 93       	push	r29
    1144:	cf 93       	push	r28
    1146:	00 d0       	rcall	.+0      	; 0x1148 <group_init+0x6>
    1148:	0f 92       	push	r0
    114a:	cd b7       	in	r28, 0x3d	; 61
    114c:	de b7       	in	r29, 0x3e	; 62
    114e:	9a 83       	std	Y+2, r25	; 0x02
    1150:	89 83       	std	Y+1, r24	; 0x01
    1152:	6b 83       	std	Y+3, r22	; 0x03
    group->link = (void *)0;
    1154:	e9 81       	ldd	r30, Y+1	; 0x01
    1156:	fa 81       	ldd	r31, Y+2	; 0x02
    1158:	11 82       	std	Z+1, r1	; 0x01
    115a:	10 82       	st	Z, r1
    group->prio = prio;
    115c:	e9 81       	ldd	r30, Y+1	; 0x01
    115e:	fa 81       	ldd	r31, Y+2	; 0x02
    1160:	8b 81       	ldd	r24, Y+3	; 0x03
    1162:	82 83       	std	Z+2, r24	; 0x02
    // группа - часть gitem_t, количество элементов - 1
    group->el_num = (count_t)1;
    1164:	e9 81       	ldd	r30, Y+1	; 0x01
    1166:	fa 81       	ldd	r31, Y+2	; 0x02
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	94 83       	std	Z+4, r25	; 0x04
    116e:	83 83       	std	Z+3, r24	; 0x03
}
    1170:	0f 90       	pop	r0
    1172:	0f 90       	pop	r0
    1174:	0f 90       	pop	r0
    1176:	cf 91       	pop	r28
    1178:	df 91       	pop	r29
    117a:	08 95       	ret

0000117c <group_push>:
// положить в ПУЛ
void group_push(group_t * group)
{
    117c:	df 93       	push	r29
    117e:	cf 93       	push	r28
    1180:	00 d0       	rcall	.+0      	; 0x1182 <group_push+0x6>
    1182:	cd b7       	in	r28, 0x3d	; 61
    1184:	de b7       	in	r29, 0x3e	; 62
    1186:	9a 83       	std	Y+2, r25	; 0x02
    1188:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    // блокируем пул
    spin_lock( &kernel.pool_lock );
#endif
    group->link = (void *)kernel.pool;
    118a:	80 91 f7 01 	lds	r24, 0x01F7
    118e:	90 91 f8 01 	lds	r25, 0x01F8
    1192:	e9 81       	ldd	r30, Y+1	; 0x01
    1194:	fa 81       	ldd	r31, Y+2	; 0x02
    1196:	91 83       	std	Z+1, r25	; 0x01
    1198:	80 83       	st	Z, r24
    kernel.pool = group;
    119a:	89 81       	ldd	r24, Y+1	; 0x01
    119c:	9a 81       	ldd	r25, Y+2	; 0x02
    119e:	90 93 f8 01 	sts	0x01F8, r25
    11a2:	80 93 f7 01 	sts	0x01F7, r24
#ifdef CONFIG_MP
    // разблокируем пул
    spin_unlock( &kernel.pool_lock );
#endif
}
    11a6:	0f 90       	pop	r0
    11a8:	0f 90       	pop	r0
    11aa:	cf 91       	pop	r28
    11ac:	df 91       	pop	r29
    11ae:	08 95       	ret

000011b0 <group_pop>:
// взять из пула, если есть, а есть всегда, избыточность же!
group_t * group_pop(void)
{
    11b0:	df 93       	push	r29
    11b2:	cf 93       	push	r28
    11b4:	00 d0       	rcall	.+0      	; 0x11b6 <group_pop+0x6>
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
#ifdef CONFIG_MP
    // блокируем пул
    spin_lock( &kernel.pool_lock );
#endif
    group_t * group = kernel.pool;
    11ba:	80 91 f7 01 	lds	r24, 0x01F7
    11be:	90 91 f8 01 	lds	r25, 0x01F8
    11c2:	9a 83       	std	Y+2, r25	; 0x02
    11c4:	89 83       	std	Y+1, r24	; 0x01
    kernel.pool = (group_t *)group->link;
    11c6:	e9 81       	ldd	r30, Y+1	; 0x01
    11c8:	fa 81       	ldd	r31, Y+2	; 0x02
    11ca:	80 81       	ld	r24, Z
    11cc:	91 81       	ldd	r25, Z+1	; 0x01
    11ce:	90 93 f8 01 	sts	0x01F8, r25
    11d2:	80 93 f7 01 	sts	0x01F7, r24
#ifdef CONFIG_MP
    // разблокируем пул
    spin_unlock( &kernel.pool_lock );
#endif
    return group;
    11d6:	89 81       	ldd	r24, Y+1	; 0x01
    11d8:	9a 81       	ldd	r25, Y+2	; 0x02
}
    11da:	0f 90       	pop	r0
    11dc:	0f 90       	pop	r0
    11de:	cf 91       	pop	r28
    11e0:	df 91       	pop	r29
    11e2:	08 95       	ret

000011e4 <index_search>:
*                           http://www.0chan.ru/r/res/9996.html                          *
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
prio_t index_search(index_t index)
{
    11e4:	df 93       	push	r29
    11e6:	cf 93       	push	r28
    11e8:	00 d0       	rcall	.+0      	; 0x11ea <index_search+0x6>
    11ea:	00 d0       	rcall	.+0      	; 0x11ec <index_search+0x8>
    11ec:	00 d0       	rcall	.+0      	; 0x11ee <index_search+0xa>
    11ee:	cd b7       	in	r28, 0x3d	; 61
    11f0:	de b7       	in	r29, 0x3e	; 62
    11f2:	8e 83       	std	Y+6, r24	; 0x06
    prio_t prio = (prio_t)0;
    11f4:	1d 82       	std	Y+5, r1	; 0x05
        но, т.к. BITS_IN_INDEX_T фиксировано для данной конфигурации,
        то получается время выполнения - O(1), ВСЕГДА.

        И да, предсказуемость + переносимость > быстродействие.
        */
    index_t upper = ~(index_t)0, lower = ~(index_t)0, middle;
    11f6:	8f ef       	ldi	r24, 0xFF	; 255
    11f8:	8c 83       	std	Y+4, r24	; 0x04
    11fa:	8f ef       	ldi	r24, 0xFF	; 255
    11fc:	8b 83       	std	Y+3, r24	; 0x03
    prio_t step = (prio_t)BITS_IN_INDEX_T;
    11fe:	88 e0       	ldi	r24, 0x08	; 8
    1200:	89 83       	std	Y+1, r24	; 0x01
    1202:	22 c0       	rjmp	.+68     	; 0x1248 <index_search+0x64>
    while( step )
    {
        step>>=1; // делим шаг пополам
    1204:	89 81       	ldd	r24, Y+1	; 0x01
    1206:	86 95       	lsr	r24
    1208:	89 83       	std	Y+1, r24	; 0x01
        middle = lower>>step;
    120a:	8b 81       	ldd	r24, Y+3	; 0x03
    120c:	28 2f       	mov	r18, r24
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	89 81       	ldd	r24, Y+1	; 0x01
    1212:	88 2f       	mov	r24, r24
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	a9 01       	movw	r20, r18
    1218:	02 c0       	rjmp	.+4      	; 0x121e <index_search+0x3a>
    121a:	55 95       	asr	r21
    121c:	47 95       	ror	r20
    121e:	8a 95       	dec	r24
    1220:	e2 f7       	brpl	.-8      	; 0x121a <index_search+0x36>
    1222:	ca 01       	movw	r24, r20
    1224:	8a 83       	std	Y+2, r24	; 0x02
        if( index & upper & middle )
    1226:	9e 81       	ldd	r25, Y+6	; 0x06
    1228:	8c 81       	ldd	r24, Y+4	; 0x04
    122a:	98 23       	and	r25, r24
    122c:	8a 81       	ldd	r24, Y+2	; 0x02
    122e:	89 23       	and	r24, r25
    1230:	88 23       	and	r24, r24
    1232:	19 f0       	breq	.+6      	; 0x123a <index_search+0x56>
        {
            lower = middle;
    1234:	8a 81       	ldd	r24, Y+2	; 0x02
    1236:	8b 83       	std	Y+3, r24	; 0x03
    1238:	07 c0       	rjmp	.+14     	; 0x1248 <index_search+0x64>
        }
        else
        {
            upper = ~middle;
    123a:	8a 81       	ldd	r24, Y+2	; 0x02
    123c:	80 95       	com	r24
    123e:	8c 83       	std	Y+4, r24	; 0x04
            prio += step;
    1240:	9d 81       	ldd	r25, Y+5	; 0x05
    1242:	89 81       	ldd	r24, Y+1	; 0x01
    1244:	89 0f       	add	r24, r25
    1246:	8d 83       	std	Y+5, r24	; 0x05

        И да, предсказуемость + переносимость > быстродействие.
        */
    index_t upper = ~(index_t)0, lower = ~(index_t)0, middle;
    prio_t step = (prio_t)BITS_IN_INDEX_T;
    while( step )
    1248:	89 81       	ldd	r24, Y+1	; 0x01
    124a:	88 23       	and	r24, r24
    124c:	d9 f6       	brne	.-74     	; 0x1204 <index_search+0x20>
        if ( mask & index )break;
        prio++;
        mask<<=1;
    }
#endif
    return prio;
    124e:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1250:	26 96       	adiw	r28, 0x06	; 6
    1252:	0f b6       	in	r0, 0x3f	; 63
    1254:	f8 94       	cli
    1256:	de bf       	out	0x3e, r29	; 62
    1258:	0f be       	out	0x3f, r0	; 63
    125a:	cd bf       	out	0x3d, r28	; 61
    125c:	cf 91       	pop	r28
    125e:	df 91       	pop	r29
    1260:	08 95       	ret

00001262 <item_init>:
*****************************************************************************************/
#include "../include/bugurt.h"
//Методы элемента 2-связного списка
//инициация элемента
void item_init(item_t *item)
{
    1262:	df 93       	push	r29
    1264:	cf 93       	push	r28
    1266:	00 d0       	rcall	.+0      	; 0x1268 <item_init+0x6>
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
    126c:	9a 83       	std	Y+2, r25	; 0x02
    126e:	89 83       	std	Y+1, r24	; 0x01
    item->prev = item;
    1270:	e9 81       	ldd	r30, Y+1	; 0x01
    1272:	fa 81       	ldd	r31, Y+2	; 0x02
    1274:	89 81       	ldd	r24, Y+1	; 0x01
    1276:	9a 81       	ldd	r25, Y+2	; 0x02
    1278:	93 83       	std	Z+3, r25	; 0x03
    127a:	82 83       	std	Z+2, r24	; 0x02
    item->next = item;
    127c:	e9 81       	ldd	r30, Y+1	; 0x01
    127e:	fa 81       	ldd	r31, Y+2	; 0x02
    1280:	89 81       	ldd	r24, Y+1	; 0x01
    1282:	9a 81       	ldd	r25, Y+2	; 0x02
    1284:	91 83       	std	Z+1, r25	; 0x01
    1286:	80 83       	st	Z, r24
}
    1288:	0f 90       	pop	r0
    128a:	0f 90       	pop	r0
    128c:	cf 91       	pop	r28
    128e:	df 91       	pop	r29
    1290:	08 95       	ret

00001292 <item_insert>:
//Вставить элемент
void item_insert(item_t *item, item_t *head)
{
    1292:	df 93       	push	r29
    1294:	cf 93       	push	r28
    1296:	00 d0       	rcall	.+0      	; 0x1298 <item_insert+0x6>
    1298:	00 d0       	rcall	.+0      	; 0x129a <item_insert+0x8>
    129a:	00 d0       	rcall	.+0      	; 0x129c <item_insert+0xa>
    129c:	cd b7       	in	r28, 0x3d	; 61
    129e:	de b7       	in	r29, 0x3e	; 62
    12a0:	9c 83       	std	Y+4, r25	; 0x04
    12a2:	8b 83       	std	Y+3, r24	; 0x03
    12a4:	7e 83       	std	Y+6, r23	; 0x06
    12a6:	6d 83       	std	Y+5, r22	; 0x05
    // "хвост" списка
    item_t * tail = head->prev;
    12a8:	ed 81       	ldd	r30, Y+5	; 0x05
    12aa:	fe 81       	ldd	r31, Y+6	; 0x06
    12ac:	82 81       	ldd	r24, Z+2	; 0x02
    12ae:	93 81       	ldd	r25, Z+3	; 0x03
    12b0:	9a 83       	std	Y+2, r25	; 0x02
    12b2:	89 83       	std	Y+1, r24	; 0x01

    // Вставляем элемент между "головой" и "хвостом"
    item->prev = tail;
    12b4:	eb 81       	ldd	r30, Y+3	; 0x03
    12b6:	fc 81       	ldd	r31, Y+4	; 0x04
    12b8:	89 81       	ldd	r24, Y+1	; 0x01
    12ba:	9a 81       	ldd	r25, Y+2	; 0x02
    12bc:	93 83       	std	Z+3, r25	; 0x03
    12be:	82 83       	std	Z+2, r24	; 0x02
    item->next = head;
    12c0:	eb 81       	ldd	r30, Y+3	; 0x03
    12c2:	fc 81       	ldd	r31, Y+4	; 0x04
    12c4:	8d 81       	ldd	r24, Y+5	; 0x05
    12c6:	9e 81       	ldd	r25, Y+6	; 0x06
    12c8:	91 83       	std	Z+1, r25	; 0x01
    12ca:	80 83       	st	Z, r24

    head->prev = item;
    12cc:	ed 81       	ldd	r30, Y+5	; 0x05
    12ce:	fe 81       	ldd	r31, Y+6	; 0x06
    12d0:	8b 81       	ldd	r24, Y+3	; 0x03
    12d2:	9c 81       	ldd	r25, Y+4	; 0x04
    12d4:	93 83       	std	Z+3, r25	; 0x03
    12d6:	82 83       	std	Z+2, r24	; 0x02
    tail->next = item;
    12d8:	e9 81       	ldd	r30, Y+1	; 0x01
    12da:	fa 81       	ldd	r31, Y+2	; 0x02
    12dc:	8b 81       	ldd	r24, Y+3	; 0x03
    12de:	9c 81       	ldd	r25, Y+4	; 0x04
    12e0:	91 83       	std	Z+1, r25	; 0x01
    12e2:	80 83       	st	Z, r24
}
    12e4:	26 96       	adiw	r28, 0x06	; 6
    12e6:	0f b6       	in	r0, 0x3f	; 63
    12e8:	f8 94       	cli
    12ea:	de bf       	out	0x3e, r29	; 62
    12ec:	0f be       	out	0x3f, r0	; 63
    12ee:	cd bf       	out	0x3d, r28	; 61
    12f0:	cf 91       	pop	r28
    12f2:	df 91       	pop	r29
    12f4:	08 95       	ret

000012f6 <item_cut>:
//Вырезать элемент
void item_cut( item_t *item )
{
    12f6:	df 93       	push	r29
    12f8:	cf 93       	push	r28
    12fa:	00 d0       	rcall	.+0      	; 0x12fc <item_cut+0x6>
    12fc:	00 d0       	rcall	.+0      	; 0x12fe <item_cut+0x8>
    12fe:	00 d0       	rcall	.+0      	; 0x1300 <item_cut+0xa>
    1300:	cd b7       	in	r28, 0x3d	; 61
    1302:	de b7       	in	r29, 0x3e	; 62
    1304:	9e 83       	std	Y+6, r25	; 0x06
    1306:	8d 83       	std	Y+5, r24	; 0x05
    item_t * prev = item->prev; //Предыдущий элемент
    1308:	ed 81       	ldd	r30, Y+5	; 0x05
    130a:	fe 81       	ldd	r31, Y+6	; 0x06
    130c:	82 81       	ldd	r24, Z+2	; 0x02
    130e:	93 81       	ldd	r25, Z+3	; 0x03
    1310:	9c 83       	std	Y+4, r25	; 0x04
    1312:	8b 83       	std	Y+3, r24	; 0x03
    item_t * next = item->next; //Следующий элемент
    1314:	ed 81       	ldd	r30, Y+5	; 0x05
    1316:	fe 81       	ldd	r31, Y+6	; 0x06
    1318:	80 81       	ld	r24, Z
    131a:	91 81       	ldd	r25, Z+1	; 0x01
    131c:	9a 83       	std	Y+2, r25	; 0x02
    131e:	89 83       	std	Y+1, r24	; 0x01

    next->prev = prev;
    1320:	e9 81       	ldd	r30, Y+1	; 0x01
    1322:	fa 81       	ldd	r31, Y+2	; 0x02
    1324:	8b 81       	ldd	r24, Y+3	; 0x03
    1326:	9c 81       	ldd	r25, Y+4	; 0x04
    1328:	93 83       	std	Z+3, r25	; 0x03
    132a:	82 83       	std	Z+2, r24	; 0x02
    prev->next = next;
    132c:	eb 81       	ldd	r30, Y+3	; 0x03
    132e:	fc 81       	ldd	r31, Y+4	; 0x04
    1330:	89 81       	ldd	r24, Y+1	; 0x01
    1332:	9a 81       	ldd	r25, Y+2	; 0x02
    1334:	91 83       	std	Z+1, r25	; 0x01
    1336:	80 83       	st	Z, r24

    item->prev = item;
    1338:	ed 81       	ldd	r30, Y+5	; 0x05
    133a:	fe 81       	ldd	r31, Y+6	; 0x06
    133c:	8d 81       	ldd	r24, Y+5	; 0x05
    133e:	9e 81       	ldd	r25, Y+6	; 0x06
    1340:	93 83       	std	Z+3, r25	; 0x03
    1342:	82 83       	std	Z+2, r24	; 0x02
    item->next = item;
    1344:	ed 81       	ldd	r30, Y+5	; 0x05
    1346:	fe 81       	ldd	r31, Y+6	; 0x06
    1348:	8d 81       	ldd	r24, Y+5	; 0x05
    134a:	9e 81       	ldd	r25, Y+6	; 0x06
    134c:	91 83       	std	Z+1, r25	; 0x01
    134e:	80 83       	st	Z, r24
}
    1350:	26 96       	adiw	r28, 0x06	; 6
    1352:	0f b6       	in	r0, 0x3f	; 63
    1354:	f8 94       	cli
    1356:	de bf       	out	0x3e, r29	; 62
    1358:	0f be       	out	0x3f, r0	; 63
    135a:	cd bf       	out	0x3d, r28	; 61
    135c:	cf 91       	pop	r28
    135e:	df 91       	pop	r29
    1360:	08 95       	ret

00001362 <kernel_init>:
{
    while(1);
}

void kernel_init(void)
{
    1362:	8f 92       	push	r8
    1364:	af 92       	push	r10
    1366:	bf 92       	push	r11
    1368:	cf 92       	push	r12
    136a:	ef 92       	push	r14
    136c:	ff 92       	push	r15
    136e:	0f 93       	push	r16
    1370:	1f 93       	push	r17
    1372:	df 93       	push	r29
    1374:	cf 93       	push	r28
    1376:	cd b7       	in	r28, 0x3d	; 61
    1378:	de b7       	in	r29, 0x3e	; 62
        stat_init( (stat_t *)kernel.stat + i );
        sched_init( (sched_t *)kernel.sched + i, (proc_t *)kernel.idle + i );
    }
    spin_unlock( &kernel.stat_lock );
#else
    proc_init_isr(
    137a:	89 ec       	ldi	r24, 0xC9	; 201
    137c:	91 e0       	ldi	r25, 0x01	; 1
    137e:	2d e4       	ldi	r18, 0x4D	; 77
    1380:	32 e1       	ldi	r19, 0x12	; 18
    1382:	b9 01       	movw	r22, r18
    1384:	40 e0       	ldi	r20, 0x00	; 0
    1386:	50 e0       	ldi	r21, 0x00	; 0
    1388:	20 e0       	ldi	r18, 0x00	; 0
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	00 e0       	ldi	r16, 0x00	; 0
    138e:	10 e0       	ldi	r17, 0x00	; 0
    1390:	ee 24       	eor	r14, r14
    1392:	ff 24       	eor	r15, r15
    1394:	0f 2e       	mov	r0, r31
    1396:	f7 e0       	ldi	r31, 0x07	; 7
    1398:	cf 2e       	mov	r12, r31
    139a:	f0 2d       	mov	r31, r0
    139c:	aa 24       	eor	r10, r10
    139e:	bb 24       	eor	r11, r11
    13a0:	a3 94       	inc	r10
    13a2:	88 24       	eor	r8, r8
    13a4:	0e 94 87 0b 	call	0x170e	; 0x170e <proc_init_isr>
        0, // это не важно, при первой же смене контекста будет сохранен текущий указатель стека
        ((prio_t)BITS_IN_INDEX_T - (prio_t)1),// низший приоритет
        (timer_t)1,//минимальный квант времени
        (bool_t)0// не RT
    );
    sched_init( (sched_t *)&kernel.sched, (proc_t *)&kernel.idle );
    13a8:	8f e9       	ldi	r24, 0x9F	; 159
    13aa:	91 e0       	ldi	r25, 0x01	; 1
    13ac:	29 ec       	ldi	r18, 0xC9	; 201
    13ae:	31 e0       	ldi	r19, 0x01	; 1
    13b0:	b9 01       	movw	r22, r18
    13b2:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <sched_init>
#endif // CONFIG_MP
}
    13b6:	cf 91       	pop	r28
    13b8:	df 91       	pop	r29
    13ba:	1f 91       	pop	r17
    13bc:	0f 91       	pop	r16
    13be:	ff 90       	pop	r15
    13c0:	ef 90       	pop	r14
    13c2:	cf 90       	pop	r12
    13c4:	bf 90       	pop	r11
    13c6:	af 90       	pop	r10
    13c8:	8f 90       	pop	r8
    13ca:	08 95       	ret

000013cc <mutex_init_isr>:
    mutex_t * mutex
#ifdef CONFIG_USE_HIGHEST_LOCKER
    ,prio_t prio
#endif // CONFIG_USE_HIGHEST_LOCKER
)
{
    13cc:	df 93       	push	r29
    13ce:	cf 93       	push	r28
    13d0:	00 d0       	rcall	.+0      	; 0x13d2 <mutex_init_isr+0x6>
    13d2:	0f 92       	push	r0
    13d4:	cd b7       	in	r28, 0x3d	; 61
    13d6:	de b7       	in	r29, 0x3e	; 62
    13d8:	9a 83       	std	Y+2, r25	; 0x02
    13da:	89 83       	std	Y+1, r24	; 0x01
    13dc:	6b 83       	std	Y+3, r22	; 0x03
    xlist_init( (xlist_t *)mutex );
    13de:	89 81       	ldd	r24, Y+1	; 0x01
    13e0:	9a 81       	ldd	r25, Y+2	; 0x02
    13e2:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <xlist_init>
    mutex->free = (bool_t)1;
    13e6:	e9 81       	ldd	r30, Y+1	; 0x01
    13e8:	fa 81       	ldd	r31, Y+2	; 0x02
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	82 8b       	std	Z+18, r24	; 0x12
#ifdef CONFIG_USE_HIGHEST_LOCKER
    mutex->prio = prio;
    13ee:	e9 81       	ldd	r30, Y+1	; 0x01
    13f0:	fa 81       	ldd	r31, Y+2	; 0x02
    13f2:	8b 81       	ldd	r24, Y+3	; 0x03
    13f4:	81 8b       	std	Z+17, r24	; 0x11
#endif // CONFIG_USE_HIGHEST_LOCKER
}
    13f6:	0f 90       	pop	r0
    13f8:	0f 90       	pop	r0
    13fa:	0f 90       	pop	r0
    13fc:	cf 91       	pop	r28
    13fe:	df 91       	pop	r29
    1400:	08 95       	ret

00001402 <_mutex_lock>:

// К моменту вызова захвачена блокировка mutex-а, запрещены прерывания
bool_t _mutex_lock( mutex_t * mutex )
{
    1402:	df 93       	push	r29
    1404:	cf 93       	push	r28
    1406:	00 d0       	rcall	.+0      	; 0x1408 <_mutex_lock+0x6>
    1408:	00 d0       	rcall	.+0      	; 0x140a <_mutex_lock+0x8>
    140a:	0f 92       	push	r0
    140c:	cd b7       	in	r28, 0x3d	; 61
    140e:	de b7       	in	r29, 0x3e	; 62
    1410:	9d 83       	std	Y+5, r25	; 0x05
    1412:	8c 83       	std	Y+4, r24	; 0x04
    bool_t ret = mutex->free;
    1414:	ec 81       	ldd	r30, Y+4	; 0x04
    1416:	fd 81       	ldd	r31, Y+5	; 0x05
    1418:	82 89       	ldd	r24, Z+18	; 0x12
    141a:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = current_proc();
    141c:	0e 94 cc 00 	call	0x198	; 0x198 <current_proc>
    1420:	9a 83       	std	Y+2, r25	; 0x02
    1422:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
#ifdef CONFIG_USE_HIGHEST_LOCKER
    _proc_lres_inc( proc, mutex->prio );
    1424:	ec 81       	ldd	r30, Y+4	; 0x04
    1426:	fd 81       	ldd	r31, Y+5	; 0x05
    1428:	21 89       	ldd	r18, Z+17	; 0x11
    142a:	89 81       	ldd	r24, Y+1	; 0x01
    142c:	9a 81       	ldd	r25, Y+2	; 0x02
    142e:	62 2f       	mov	r22, r18
    1430:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <_proc_lres_inc>
#else // !CONFIG_USE_HIGHEST_LOCKER
    _proc_lres_inc( proc );
#endif // CONFIG_USE_HIGHEST_LOCKER
    if( ret )
    1434:	8b 81       	ldd	r24, Y+3	; 0x03
    1436:	88 23       	and	r24, r24
    1438:	41 f0       	breq	.+16     	; 0x144a <_mutex_lock+0x48>
    {
        mutex->free = (bool_t)0;
    143a:	ec 81       	ldd	r30, Y+4	; 0x04
    143c:	fd 81       	ldd	r31, Y+5	; 0x05
    143e:	12 8a       	std	Z+18, r1	; 0x12
#ifdef CONFIG_USE_HIGHEST_LOCKER
        // Меняем приоритет только здесь
        _proc_prio_control_running( proc );
    1440:	89 81       	ldd	r24, Y+1	; 0x01
    1442:	9a 81       	ldd	r25, Y+2	; 0x02
    1444:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <_proc_prio_control_running>
    1448:	1b c0       	rjmp	.+54     	; 0x1480 <_mutex_lock+0x7e>
#endif // CONFIG_USE_HIGHEST_LOCKER
    }
    else
    {
        proc->flags |= PROC_FLG_QUEUE;
    144a:	e9 81       	ldd	r30, Y+1	; 0x01
    144c:	fa 81       	ldd	r31, Y+2	; 0x02
    144e:	83 85       	ldd	r24, Z+11	; 0x0b
    1450:	88 60       	ori	r24, 0x08	; 8
    1452:	e9 81       	ldd	r30, Y+1	; 0x01
    1454:	fa 81       	ldd	r31, Y+2	; 0x02
    1456:	83 87       	std	Z+11, r24	; 0x0b
        proc->flags &= ~PROC_FLG_RUN;
    1458:	e9 81       	ldd	r30, Y+1	; 0x01
    145a:	fa 81       	ldd	r31, Y+2	; 0x02
    145c:	83 85       	ldd	r24, Z+11	; 0x0b
    145e:	8d 7f       	andi	r24, 0xFD	; 253
    1460:	e9 81       	ldd	r30, Y+1	; 0x01
    1462:	fa 81       	ldd	r31, Y+2	; 0x02
    1464:	83 87       	std	Z+11, r24	; 0x0b
        _proc_stop_( proc );
    1466:	89 81       	ldd	r24, Y+1	; 0x01
    1468:	9a 81       	ldd	r25, Y+2	; 0x02
    146a:	0e 94 ce 07 	call	0xf9c	; 0xf9c <gitem_cut>
        gitem_insert( (gitem_t *)proc, (xlist_t *)mutex );
    146e:	89 81       	ldd	r24, Y+1	; 0x01
    1470:	9a 81       	ldd	r25, Y+2	; 0x02
    1472:	2c 81       	ldd	r18, Y+4	; 0x04
    1474:	3d 81       	ldd	r19, Y+5	; 0x05
    1476:	b9 01       	movw	r22, r18
    1478:	0e 94 71 06 	call	0xce2	; 0xce2 <gitem_insert>
        // Нужна перепланировка
#ifdef CONFIG_MP
        resched( proc->core_id );
#else
        resched();
    147c:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
#endif // CONFIG_MP
    }
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    return ret;
    1480:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1482:	0f 90       	pop	r0
    1484:	0f 90       	pop	r0
    1486:	0f 90       	pop	r0
    1488:	0f 90       	pop	r0
    148a:	0f 90       	pop	r0
    148c:	cf 91       	pop	r28
    148e:	df 91       	pop	r29
    1490:	08 95       	ret

00001492 <_mutex_try_lock>:

bool_t _mutex_try_lock( mutex_t * mutex )
{
    1492:	df 93       	push	r29
    1494:	cf 93       	push	r28
    1496:	00 d0       	rcall	.+0      	; 0x1498 <_mutex_try_lock+0x6>
    1498:	00 d0       	rcall	.+0      	; 0x149a <_mutex_try_lock+0x8>
    149a:	0f 92       	push	r0
    149c:	cd b7       	in	r28, 0x3d	; 61
    149e:	de b7       	in	r29, 0x3e	; 62
    14a0:	9d 83       	std	Y+5, r25	; 0x05
    14a2:	8c 83       	std	Y+4, r24	; 0x04
    bool_t ret = mutex->free;
    14a4:	ec 81       	ldd	r30, Y+4	; 0x04
    14a6:	fd 81       	ldd	r31, Y+5	; 0x05
    14a8:	82 89       	ldd	r24, Z+18	; 0x12
    14aa:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = current_proc();
    14ac:	0e 94 cc 00 	call	0x198	; 0x198 <current_proc>
    14b0:	9a 83       	std	Y+2, r25	; 0x02
    14b2:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    if( ret )
    14b4:	8b 81       	ldd	r24, Y+3	; 0x03
    14b6:	88 23       	and	r24, r24
    14b8:	79 f0       	breq	.+30     	; 0x14d8 <_mutex_try_lock+0x46>
    {
        mutex->free = (bool_t)0;
    14ba:	ec 81       	ldd	r30, Y+4	; 0x04
    14bc:	fd 81       	ldd	r31, Y+5	; 0x05
    14be:	12 8a       	std	Z+18, r1	; 0x12
#ifdef CONFIG_USE_HIGHEST_LOCKER
        _proc_lres_inc( proc, mutex->prio );
    14c0:	ec 81       	ldd	r30, Y+4	; 0x04
    14c2:	fd 81       	ldd	r31, Y+5	; 0x05
    14c4:	21 89       	ldd	r18, Z+17	; 0x11
    14c6:	89 81       	ldd	r24, Y+1	; 0x01
    14c8:	9a 81       	ldd	r25, Y+2	; 0x02
    14ca:	62 2f       	mov	r22, r18
    14cc:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <_proc_lres_inc>
        _proc_prio_control_running( proc );
    14d0:	89 81       	ldd	r24, Y+1	; 0x01
    14d2:	9a 81       	ldd	r25, Y+2	; 0x02
    14d4:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <_proc_prio_control_running>
#endif // CONFIG_USE_HIGHEST_LOCKER
    }
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    return ret;
    14d8:	8b 81       	ldd	r24, Y+3	; 0x03
}
    14da:	0f 90       	pop	r0
    14dc:	0f 90       	pop	r0
    14de:	0f 90       	pop	r0
    14e0:	0f 90       	pop	r0
    14e2:	0f 90       	pop	r0
    14e4:	cf 91       	pop	r28
    14e6:	df 91       	pop	r29
    14e8:	08 95       	ret

000014ea <_mutex_unlock>:

void _mutex_unlock( mutex_t *  mutex )
{
    14ea:	df 93       	push	r29
    14ec:	cf 93       	push	r28
    14ee:	00 d0       	rcall	.+0      	; 0x14f0 <_mutex_unlock+0x6>
    14f0:	00 d0       	rcall	.+0      	; 0x14f2 <_mutex_unlock+0x8>
    14f2:	cd b7       	in	r28, 0x3d	; 61
    14f4:	de b7       	in	r29, 0x3e	; 62
    14f6:	9c 83       	std	Y+4, r25	; 0x04
    14f8:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = current_proc();
    14fa:	0e 94 cc 00 	call	0x198	; 0x198 <current_proc>
    14fe:	9a 83       	std	Y+2, r25	; 0x02
    1500:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
#ifdef CONFIG_USE_HIGHEST_LOCKER

    _proc_lres_dec( proc, mutex->prio );
    1502:	eb 81       	ldd	r30, Y+3	; 0x03
    1504:	fc 81       	ldd	r31, Y+4	; 0x04
    1506:	21 89       	ldd	r18, Z+17	; 0x11
    1508:	89 81       	ldd	r24, Y+1	; 0x01
    150a:	9a 81       	ldd	r25, Y+2	; 0x02
    150c:	62 2f       	mov	r22, r18
    150e:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <_proc_lres_dec>
    // Если проготовлен и готов к остановке - останавливаем
    if(  ( proc->flags & PROC_FLG_PRE_END ) && (!(proc->flags & PROC_FLG_HOLD))  )
    1512:	e9 81       	ldd	r30, Y+1	; 0x01
    1514:	fa 81       	ldd	r31, Y+2	; 0x02
    1516:	83 85       	ldd	r24, Z+11	; 0x0b
    1518:	88 2f       	mov	r24, r24
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	80 72       	andi	r24, 0x20	; 32
    151e:	90 70       	andi	r25, 0x00	; 0
    1520:	00 97       	sbiw	r24, 0x00	; 0
    1522:	a1 f0       	breq	.+40     	; 0x154c <_mutex_unlock+0x62>
    1524:	e9 81       	ldd	r30, Y+1	; 0x01
    1526:	fa 81       	ldd	r31, Y+2	; 0x02
    1528:	83 85       	ldd	r24, Z+11	; 0x0b
    152a:	88 2f       	mov	r24, r24
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	84 70       	andi	r24, 0x04	; 4
    1530:	90 70       	andi	r25, 0x00	; 0
    1532:	00 97       	sbiw	r24, 0x00	; 0
    1534:	59 f4       	brne	.+22     	; 0x154c <_mutex_unlock+0x62>
    {
        _proc_stop_( proc );
    1536:	89 81       	ldd	r24, Y+1	; 0x01
    1538:	9a 81       	ldd	r25, Y+2	; 0x02
    153a:	0e 94 ce 07 	call	0xf9c	; 0xf9c <gitem_cut>
        _proc_prio_control_stoped( proc );
    153e:	89 81       	ldd	r24, Y+1	; 0x01
    1540:	9a 81       	ldd	r25, Y+2	; 0x02
    1542:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <_proc_prio_control_stoped>
        // Нужна перепланировка, процесс остановили и не запустили обратно
#ifdef CONFIG_MP
        resched( proc->core_id );
#else
        resched();
    1546:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
    154a:	04 c0       	rjmp	.+8      	; 0x1554 <_mutex_unlock+0x6a>
#endif // CONFIG_MP
    }
    // Не останавливаем - меняем проиритет на ходу
    else _proc_prio_control_running( proc );
    154c:	89 81       	ldd	r24, Y+1	; 0x01
    154e:	9a 81       	ldd	r25, Y+2	; 0x02
    1550:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <_proc_prio_control_running>
#endif // CONFIG_USE_HIGHEST_LOCKER
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    // Обрабока самого мьютекса
    if( ((xlist_t *)mutex)->index == (index_t)0  )
    1554:	eb 81       	ldd	r30, Y+3	; 0x03
    1556:	fc 81       	ldd	r31, Y+4	; 0x04
    1558:	80 89       	ldd	r24, Z+16	; 0x10
    155a:	88 23       	and	r24, r24
    155c:	29 f4       	brne	.+10     	; 0x1568 <_mutex_unlock+0x7e>
    {
        // Список ожидающих пуст, выходим
        mutex->free = (bool_t)1;
    155e:	eb 81       	ldd	r30, Y+3	; 0x03
    1560:	fc 81       	ldd	r31, Y+4	; 0x04
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	82 8b       	std	Z+18, r24	; 0x12
    1566:	19 c0       	rjmp	.+50     	; 0x159a <_mutex_unlock+0xb0>
        return;
    }
    // Список ожидающих не пуст, запускаем голову
    proc = (proc_t *)xlist_head((xlist_t *)mutex);
    1568:	8b 81       	ldd	r24, Y+3	; 0x03
    156a:	9c 81       	ldd	r25, Y+4	; 0x04
    156c:	0e 94 0e 11 	call	0x221c	; 0x221c <xlist_head>
    1570:	9a 83       	std	Y+2, r25	; 0x02
    1572:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    // Сначала надо вырезать
    proc->flags &= ~PROC_FLG_QUEUE;
    1574:	e9 81       	ldd	r30, Y+1	; 0x01
    1576:	fa 81       	ldd	r31, Y+2	; 0x02
    1578:	83 85       	ldd	r24, Z+11	; 0x0b
    157a:	87 7f       	andi	r24, 0xF7	; 247
    157c:	e9 81       	ldd	r30, Y+1	; 0x01
    157e:	fa 81       	ldd	r31, Y+2	; 0x02
    1580:	83 87       	std	Z+11, r24	; 0x0b
    gitem_cut( (gitem_t *)proc );
    1582:	89 81       	ldd	r24, Y+1	; 0x01
    1584:	9a 81       	ldd	r25, Y+2	; 0x02
    1586:	0e 94 ce 07 	call	0xf9c	; 0xf9c <gitem_cut>
#ifdef CONFIG_USE_HIGHEST_LOCKER
    // Меняем приоритет
    _proc_prio_control_stoped( proc );
    158a:	89 81       	ldd	r24, Y+1	; 0x01
    158c:	9a 81       	ldd	r25, Y+2	; 0x02
    158e:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <_proc_prio_control_stoped>
#endif // CONFIG_USE_HIGHEST_LOCKER
    _proc_run( proc );
    1592:	89 81       	ldd	r24, Y+1	; 0x01
    1594:	9a 81       	ldd	r25, Y+2	; 0x02
    1596:	0e 94 0f 0c 	call	0x181e	; 0x181e <_proc_run>
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
}
    159a:	0f 90       	pop	r0
    159c:	0f 90       	pop	r0
    159e:	0f 90       	pop	r0
    15a0:	0f 90       	pop	r0
    15a2:	cf 91       	pop	r28
    15a4:	df 91       	pop	r29
    15a6:	08 95       	ret

000015a8 <pcounter_init>:
*                           http://www.0chan.ru/r/res/9996.html                          *
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
void pcounter_init(pcounter_t * pcounter)
{
    15a8:	df 93       	push	r29
    15aa:	cf 93       	push	r28
    15ac:	00 d0       	rcall	.+0      	; 0x15ae <pcounter_init+0x6>
    15ae:	0f 92       	push	r0
    15b0:	cd b7       	in	r28, 0x3d	; 61
    15b2:	de b7       	in	r29, 0x3e	; 62
    15b4:	9b 83       	std	Y+3, r25	; 0x03
    15b6:	8a 83       	std	Y+2, r24	; 0x02
    prio_t p;
    pcounter->index = (index_t)0;
    15b8:	ea 81       	ldd	r30, Y+2	; 0x02
    15ba:	fb 81       	ldd	r31, Y+3	; 0x03
    15bc:	10 8a       	std	Z+16, r1	; 0x10
    for(p = 0; p < (index_t)BITS_IN_INDEX_T; p++)pcounter->counter[p] = (count_t)0;
    15be:	19 82       	std	Y+1, r1	; 0x01
    15c0:	0f c0       	rjmp	.+30     	; 0x15e0 <pcounter_init+0x38>
    15c2:	89 81       	ldd	r24, Y+1	; 0x01
    15c4:	88 2f       	mov	r24, r24
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	2a 81       	ldd	r18, Y+2	; 0x02
    15ca:	3b 81       	ldd	r19, Y+3	; 0x03
    15cc:	88 0f       	add	r24, r24
    15ce:	99 1f       	adc	r25, r25
    15d0:	f9 01       	movw	r30, r18
    15d2:	e8 0f       	add	r30, r24
    15d4:	f9 1f       	adc	r31, r25
    15d6:	11 82       	std	Z+1, r1	; 0x01
    15d8:	10 82       	st	Z, r1
    15da:	89 81       	ldd	r24, Y+1	; 0x01
    15dc:	8f 5f       	subi	r24, 0xFF	; 255
    15de:	89 83       	std	Y+1, r24	; 0x01
    15e0:	89 81       	ldd	r24, Y+1	; 0x01
    15e2:	88 30       	cpi	r24, 0x08	; 8
    15e4:	70 f3       	brcs	.-36     	; 0x15c2 <pcounter_init+0x1a>
}
    15e6:	0f 90       	pop	r0
    15e8:	0f 90       	pop	r0
    15ea:	0f 90       	pop	r0
    15ec:	cf 91       	pop	r28
    15ee:	df 91       	pop	r29
    15f0:	08 95       	ret

000015f2 <pcounter_inc>:

void pcounter_inc(pcounter_t * pcounter, prio_t prio)
{
    15f2:	df 93       	push	r29
    15f4:	cf 93       	push	r28
    15f6:	00 d0       	rcall	.+0      	; 0x15f8 <pcounter_inc+0x6>
    15f8:	0f 92       	push	r0
    15fa:	cd b7       	in	r28, 0x3d	; 61
    15fc:	de b7       	in	r29, 0x3e	; 62
    15fe:	9a 83       	std	Y+2, r25	; 0x02
    1600:	89 83       	std	Y+1, r24	; 0x01
    1602:	6b 83       	std	Y+3, r22	; 0x03
    pcounter->counter[prio]++;
    1604:	8b 81       	ldd	r24, Y+3	; 0x03
    1606:	68 2f       	mov	r22, r24
    1608:	70 e0       	ldi	r23, 0x00	; 0
    160a:	29 81       	ldd	r18, Y+1	; 0x01
    160c:	3a 81       	ldd	r19, Y+2	; 0x02
    160e:	cb 01       	movw	r24, r22
    1610:	88 0f       	add	r24, r24
    1612:	99 1f       	adc	r25, r25
    1614:	f9 01       	movw	r30, r18
    1616:	e8 0f       	add	r30, r24
    1618:	f9 1f       	adc	r31, r25
    161a:	80 81       	ld	r24, Z
    161c:	91 81       	ldd	r25, Z+1	; 0x01
    161e:	ac 01       	movw	r20, r24
    1620:	4f 5f       	subi	r20, 0xFF	; 255
    1622:	5f 4f       	sbci	r21, 0xFF	; 255
    1624:	29 81       	ldd	r18, Y+1	; 0x01
    1626:	3a 81       	ldd	r19, Y+2	; 0x02
    1628:	cb 01       	movw	r24, r22
    162a:	88 0f       	add	r24, r24
    162c:	99 1f       	adc	r25, r25
    162e:	f9 01       	movw	r30, r18
    1630:	e8 0f       	add	r30, r24
    1632:	f9 1f       	adc	r31, r25
    1634:	51 83       	std	Z+1, r21	; 0x01
    1636:	40 83       	st	Z, r20
    pcounter->index |= ((index_t)1)<<prio;
    1638:	e9 81       	ldd	r30, Y+1	; 0x01
    163a:	fa 81       	ldd	r31, Y+2	; 0x02
    163c:	80 89       	ldd	r24, Z+16	; 0x10
    163e:	48 2f       	mov	r20, r24
    1640:	8b 81       	ldd	r24, Y+3	; 0x03
    1642:	28 2f       	mov	r18, r24
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	02 2e       	mov	r0, r18
    164c:	02 c0       	rjmp	.+4      	; 0x1652 <pcounter_inc+0x60>
    164e:	88 0f       	add	r24, r24
    1650:	99 1f       	adc	r25, r25
    1652:	0a 94       	dec	r0
    1654:	e2 f7       	brpl	.-8      	; 0x164e <pcounter_inc+0x5c>
    1656:	84 2b       	or	r24, r20
    1658:	e9 81       	ldd	r30, Y+1	; 0x01
    165a:	fa 81       	ldd	r31, Y+2	; 0x02
    165c:	80 8b       	std	Z+16, r24	; 0x10
}
    165e:	0f 90       	pop	r0
    1660:	0f 90       	pop	r0
    1662:	0f 90       	pop	r0
    1664:	cf 91       	pop	r28
    1666:	df 91       	pop	r29
    1668:	08 95       	ret

0000166a <pcounter_dec>:

index_t pcounter_dec(pcounter_t * pcounter, prio_t prio)
{
    166a:	df 93       	push	r29
    166c:	cf 93       	push	r28
    166e:	00 d0       	rcall	.+0      	; 0x1670 <pcounter_dec+0x6>
    1670:	00 d0       	rcall	.+0      	; 0x1672 <pcounter_dec+0x8>
    1672:	cd b7       	in	r28, 0x3d	; 61
    1674:	de b7       	in	r29, 0x3e	; 62
    1676:	9b 83       	std	Y+3, r25	; 0x03
    1678:	8a 83       	std	Y+2, r24	; 0x02
    167a:	6c 83       	std	Y+4, r22	; 0x04
    index_t mask = ((index_t)1)<<prio;
    167c:	8c 81       	ldd	r24, Y+4	; 0x04
    167e:	28 2f       	mov	r18, r24
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	81 e0       	ldi	r24, 0x01	; 1
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	02 c0       	rjmp	.+4      	; 0x168c <pcounter_dec+0x22>
    1688:	88 0f       	add	r24, r24
    168a:	99 1f       	adc	r25, r25
    168c:	2a 95       	dec	r18
    168e:	e2 f7       	brpl	.-8      	; 0x1688 <pcounter_dec+0x1e>
    1690:	89 83       	std	Y+1, r24	; 0x01
    pcounter->counter[prio]--;
    1692:	8c 81       	ldd	r24, Y+4	; 0x04
    1694:	68 2f       	mov	r22, r24
    1696:	70 e0       	ldi	r23, 0x00	; 0
    1698:	2a 81       	ldd	r18, Y+2	; 0x02
    169a:	3b 81       	ldd	r19, Y+3	; 0x03
    169c:	cb 01       	movw	r24, r22
    169e:	88 0f       	add	r24, r24
    16a0:	99 1f       	adc	r25, r25
    16a2:	f9 01       	movw	r30, r18
    16a4:	e8 0f       	add	r30, r24
    16a6:	f9 1f       	adc	r31, r25
    16a8:	80 81       	ld	r24, Z
    16aa:	91 81       	ldd	r25, Z+1	; 0x01
    16ac:	ac 01       	movw	r20, r24
    16ae:	41 50       	subi	r20, 0x01	; 1
    16b0:	50 40       	sbci	r21, 0x00	; 0
    16b2:	2a 81       	ldd	r18, Y+2	; 0x02
    16b4:	3b 81       	ldd	r19, Y+3	; 0x03
    16b6:	cb 01       	movw	r24, r22
    16b8:	88 0f       	add	r24, r24
    16ba:	99 1f       	adc	r25, r25
    16bc:	f9 01       	movw	r30, r18
    16be:	e8 0f       	add	r30, r24
    16c0:	f9 1f       	adc	r31, r25
    16c2:	51 83       	std	Z+1, r21	; 0x01
    16c4:	40 83       	st	Z, r20
    if(pcounter->counter[prio] == (count_t)0)pcounter->index &= ~mask;
    16c6:	8c 81       	ldd	r24, Y+4	; 0x04
    16c8:	88 2f       	mov	r24, r24
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	2a 81       	ldd	r18, Y+2	; 0x02
    16ce:	3b 81       	ldd	r19, Y+3	; 0x03
    16d0:	88 0f       	add	r24, r24
    16d2:	99 1f       	adc	r25, r25
    16d4:	f9 01       	movw	r30, r18
    16d6:	e8 0f       	add	r30, r24
    16d8:	f9 1f       	adc	r31, r25
    16da:	80 81       	ld	r24, Z
    16dc:	91 81       	ldd	r25, Z+1	; 0x01
    16de:	00 97       	sbiw	r24, 0x00	; 0
    16e0:	51 f4       	brne	.+20     	; 0x16f6 <pcounter_dec+0x8c>
    16e2:	ea 81       	ldd	r30, Y+2	; 0x02
    16e4:	fb 81       	ldd	r31, Y+3	; 0x03
    16e6:	80 89       	ldd	r24, Z+16	; 0x10
    16e8:	98 2f       	mov	r25, r24
    16ea:	89 81       	ldd	r24, Y+1	; 0x01
    16ec:	80 95       	com	r24
    16ee:	89 23       	and	r24, r25
    16f0:	ea 81       	ldd	r30, Y+2	; 0x02
    16f2:	fb 81       	ldd	r31, Y+3	; 0x03
    16f4:	80 8b       	std	Z+16, r24	; 0x10
    return pcounter->index & mask;
    16f6:	ea 81       	ldd	r30, Y+2	; 0x02
    16f8:	fb 81       	ldd	r31, Y+3	; 0x03
    16fa:	90 89       	ldd	r25, Z+16	; 0x10
    16fc:	89 81       	ldd	r24, Y+1	; 0x01
    16fe:	89 23       	and	r24, r25
}
    1700:	0f 90       	pop	r0
    1702:	0f 90       	pop	r0
    1704:	0f 90       	pop	r0
    1706:	0f 90       	pop	r0
    1708:	cf 91       	pop	r28
    170a:	df 91       	pop	r29
    170c:	08 95       	ret

0000170e <proc_init_isr>:
    bool_t is_rt // если true, значит процесс будет иметть поведение RT
#ifdef CONFIG_MP
    ,affinity_t affinity
#endif // CONFIG_MP
)
{
    170e:	8f 92       	push	r8
    1710:	af 92       	push	r10
    1712:	bf 92       	push	r11
    1714:	cf 92       	push	r12
    1716:	ef 92       	push	r14
    1718:	ff 92       	push	r15
    171a:	0f 93       	push	r16
    171c:	1f 93       	push	r17
    171e:	df 93       	push	r29
    1720:	cf 93       	push	r28
    1722:	cd b7       	in	r28, 0x3d	; 61
    1724:	de b7       	in	r29, 0x3e	; 62
    1726:	61 97       	sbiw	r28, 0x11	; 17
    1728:	0f b6       	in	r0, 0x3f	; 63
    172a:	f8 94       	cli
    172c:	de bf       	out	0x3e, r29	; 62
    172e:	0f be       	out	0x3f, r0	; 63
    1730:	cd bf       	out	0x3d, r28	; 61
    1732:	9a 83       	std	Y+2, r25	; 0x02
    1734:	89 83       	std	Y+1, r24	; 0x01
    1736:	7c 83       	std	Y+4, r23	; 0x04
    1738:	6b 83       	std	Y+3, r22	; 0x03
    173a:	5e 83       	std	Y+6, r21	; 0x06
    173c:	4d 83       	std	Y+5, r20	; 0x05
    173e:	38 87       	std	Y+8, r19	; 0x08
    1740:	2f 83       	std	Y+7, r18	; 0x07
    1742:	1a 87       	std	Y+10, r17	; 0x0a
    1744:	09 87       	std	Y+9, r16	; 0x09
    1746:	fc 86       	std	Y+12, r15	; 0x0c
    1748:	eb 86       	std	Y+11, r14	; 0x0b
    174a:	cd 86       	std	Y+13, r12	; 0x0d
    174c:	bf 86       	std	Y+15, r11	; 0x0f
    174e:	ae 86       	std	Y+14, r10	; 0x0e
    1750:	88 8a       	std	Y+16, r8	; 0x10
    gitem_init( (gitem_t *)proc, prio );
    1752:	89 81       	ldd	r24, Y+1	; 0x01
    1754:	9a 81       	ldd	r25, Y+2	; 0x02
    1756:	6d 85       	ldd	r22, Y+13	; 0x0d
    1758:	0e 94 4b 06 	call	0xc96	; 0xc96 <gitem_init>
    proc->flags = ( is_rt )?PROC_FLG_RT:(flag_t)0;
    175c:	88 89       	ldd	r24, Y+16	; 0x10
    175e:	89 8b       	std	Y+17, r24	; 0x11
    1760:	89 89       	ldd	r24, Y+17	; 0x11
    1762:	88 23       	and	r24, r24
    1764:	11 f0       	breq	.+4      	; 0x176a <proc_init_isr+0x5c>
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	89 8b       	std	Y+17, r24	; 0x11
    176a:	89 89       	ldd	r24, Y+17	; 0x11
    176c:	e9 81       	ldd	r30, Y+1	; 0x01
    176e:	fa 81       	ldd	r31, Y+2	; 0x02
    1770:	83 87       	std	Z+11, r24	; 0x0b
#ifdef CONFIG_USE_HIGHEST_LOCKER
    pcounter_init(&proc->lres);
    1772:	89 81       	ldd	r24, Y+1	; 0x01
    1774:	9a 81       	ldd	r25, Y+2	; 0x02
    1776:	0d 96       	adiw	r24, 0x0d	; 13
    1778:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <pcounter_init>
    proc->base_prio = prio;
    177c:	e9 81       	ldd	r30, Y+1	; 0x01
    177e:	fa 81       	ldd	r31, Y+2	; 0x02
    1780:	8d 85       	ldd	r24, Y+13	; 0x0d
    1782:	84 87       	std	Z+12, r24	; 0x0c
#else
    proc->lres = (count_t)0;
#endif
    proc->time_quant = time_quant;
    1784:	e9 81       	ldd	r30, Y+1	; 0x01
    1786:	fa 81       	ldd	r31, Y+2	; 0x02
    1788:	8e 85       	ldd	r24, Y+14	; 0x0e
    178a:	9f 85       	ldd	r25, Y+15	; 0x0f
    178c:	97 8f       	std	Z+31, r25	; 0x1f
    178e:	86 8f       	std	Z+30, r24	; 0x1e
    proc->timer = time_quant;
    1790:	e9 81       	ldd	r30, Y+1	; 0x01
    1792:	fa 81       	ldd	r31, Y+2	; 0x02
    1794:	8e 85       	ldd	r24, Y+14	; 0x0e
    1796:	9f 85       	ldd	r25, Y+15	; 0x0f
    1798:	91 a3       	std	Z+33, r25	; 0x21
    179a:	80 a3       	std	Z+32, r24	; 0x20
#ifdef CONFIG_MP
    proc->core_id = (core_id_t)0;
    proc->affinity = affinity;
#endif // CONFIG_MP
    proc->pmain = pmain;
    179c:	e9 81       	ldd	r30, Y+1	; 0x01
    179e:	fa 81       	ldd	r31, Y+2	; 0x02
    17a0:	8b 81       	ldd	r24, Y+3	; 0x03
    17a2:	9c 81       	ldd	r25, Y+4	; 0x04
    17a4:	93 a3       	std	Z+35, r25	; 0x23
    17a6:	82 a3       	std	Z+34, r24	; 0x22
    proc->sv_hook = sv_hook;
    17a8:	e9 81       	ldd	r30, Y+1	; 0x01
    17aa:	fa 81       	ldd	r31, Y+2	; 0x02
    17ac:	8d 81       	ldd	r24, Y+5	; 0x05
    17ae:	9e 81       	ldd	r25, Y+6	; 0x06
    17b0:	95 a3       	std	Z+37, r25	; 0x25
    17b2:	84 a3       	std	Z+36, r24	; 0x24
    proc->rs_hook = rs_hook;
    17b4:	e9 81       	ldd	r30, Y+1	; 0x01
    17b6:	fa 81       	ldd	r31, Y+2	; 0x02
    17b8:	8f 81       	ldd	r24, Y+7	; 0x07
    17ba:	98 85       	ldd	r25, Y+8	; 0x08
    17bc:	97 a3       	std	Z+39, r25	; 0x27
    17be:	86 a3       	std	Z+38, r24	; 0x26
    proc->arg = arg;
    17c0:	e9 81       	ldd	r30, Y+1	; 0x01
    17c2:	fa 81       	ldd	r31, Y+2	; 0x02
    17c4:	89 85       	ldd	r24, Y+9	; 0x09
    17c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17c8:	91 a7       	std	Z+41, r25	; 0x29
    17ca:	80 a7       	std	Z+40, r24	; 0x28
    proc->sstart = sstart;
    17cc:	e9 81       	ldd	r30, Y+1	; 0x01
    17ce:	fa 81       	ldd	r31, Y+2	; 0x02
    17d0:	8b 85       	ldd	r24, Y+11	; 0x0b
    17d2:	9c 85       	ldd	r25, Y+12	; 0x0c
    17d4:	93 a7       	std	Z+43, r25	; 0x2b
    17d6:	82 a7       	std	Z+42, r24	; 0x2a
    if( sstart )proc->spointer = proc_stack_init(sstart, (code_t)proc_run_wrapper, (void *)proc);
    17d8:	8b 85       	ldd	r24, Y+11	; 0x0b
    17da:	9c 85       	ldd	r25, Y+12	; 0x0c
    17dc:	00 97       	sbiw	r24, 0x00	; 0
    17de:	71 f0       	breq	.+28     	; 0x17fc <proc_init_isr+0xee>
    17e0:	48 e9       	ldi	r20, 0x98	; 152
    17e2:	53 e0       	ldi	r21, 0x03	; 3
    17e4:	8b 85       	ldd	r24, Y+11	; 0x0b
    17e6:	9c 85       	ldd	r25, Y+12	; 0x0c
    17e8:	29 81       	ldd	r18, Y+1	; 0x01
    17ea:	3a 81       	ldd	r19, Y+2	; 0x02
    17ec:	ba 01       	movw	r22, r20
    17ee:	a9 01       	movw	r20, r18
    17f0:	0e 94 d7 00 	call	0x1ae	; 0x1ae <proc_stack_init>
    17f4:	e9 81       	ldd	r30, Y+1	; 0x01
    17f6:	fa 81       	ldd	r31, Y+2	; 0x02
    17f8:	95 a7       	std	Z+45, r25	; 0x2d
    17fa:	84 a7       	std	Z+44, r24	; 0x2c
}
    17fc:	61 96       	adiw	r28, 0x11	; 17
    17fe:	0f b6       	in	r0, 0x3f	; 63
    1800:	f8 94       	cli
    1802:	de bf       	out	0x3e, r29	; 62
    1804:	0f be       	out	0x3f, r0	; 63
    1806:	cd bf       	out	0x3d, r28	; 61
    1808:	cf 91       	pop	r28
    180a:	df 91       	pop	r29
    180c:	1f 91       	pop	r17
    180e:	0f 91       	pop	r16
    1810:	ff 90       	pop	r15
    1812:	ef 90       	pop	r14
    1814:	cf 90       	pop	r12
    1816:	bf 90       	pop	r11
    1818:	af 90       	pop	r10
    181a:	8f 90       	pop	r8
    181c:	08 95       	ret

0000181e <_proc_run>:
    spin_unlock( &proc_sched->lock );
}
#endif // CONFIG_MP

void _proc_run( proc_t * proc )
{
    181e:	df 93       	push	r29
    1820:	cf 93       	push	r28
    1822:	00 d0       	rcall	.+0      	; 0x1824 <_proc_run+0x6>
    1824:	cd b7       	in	r28, 0x3d	; 61
    1826:	de b7       	in	r29, 0x3e	; 62
    1828:	9a 83       	std	Y+2, r25	; 0x02
    182a:	89 83       	std	Y+1, r24	; 0x01
    proc->flags |= PROC_FLG_RUN;
    182c:	e9 81       	ldd	r30, Y+1	; 0x01
    182e:	fa 81       	ldd	r31, Y+2	; 0x02
    1830:	83 85       	ldd	r24, Z+11	; 0x0b
    1832:	82 60       	ori	r24, 0x02	; 2
    1834:	e9 81       	ldd	r30, Y+1	; 0x01
    1836:	fa 81       	ldd	r31, Y+2	; 0x02
    1838:	83 87       	std	Z+11, r24	; 0x0b
    spin_lock( &kernel.stat_lock );
    proc->core_id = sched_load_balancer( proc, (stat_t *)kernel.stat );
    stat_inc( proc, (stat_t *)kernel.stat+proc->core_id );
    spin_unlock( &kernel.stat_lock );
#endif
    _proc_run_( proc );
    183a:	89 81       	ldd	r24, Y+1	; 0x01
    183c:	9a 81       	ldd	r25, Y+2	; 0x02
    183e:	20 91 a1 01 	lds	r18, 0x01A1
    1842:	30 91 a2 01 	lds	r19, 0x01A2
    1846:	b9 01       	movw	r22, r18
    1848:	0e 94 71 06 	call	0xce2	; 0xce2 <gitem_insert>
#ifdef CONFIG_MP
    resched( proc->core_id );
#else
    resched();
    184c:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
#endif // CONFIG_MP
}
    1850:	0f 90       	pop	r0
    1852:	0f 90       	pop	r0
    1854:	cf 91       	pop	r28
    1856:	df 91       	pop	r29
    1858:	08 95       	ret

0000185a <proc_run_isr>:
// Функция общего пользования - запуск процесса из обработчика прерывания, прерывания должны быть запрещены во время запуска
bool_t proc_run_isr(proc_t * proc)
{
    185a:	df 93       	push	r29
    185c:	cf 93       	push	r28
    185e:	00 d0       	rcall	.+0      	; 0x1860 <proc_run_isr+0x6>
    1860:	0f 92       	push	r0
    1862:	cd b7       	in	r28, 0x3d	; 61
    1864:	de b7       	in	r29, 0x3e	; 62
    1866:	9b 83       	std	Y+3, r25	; 0x03
    1868:	8a 83       	std	Y+2, r24	; 0x02
    bool_t ret = (bool_t)1;
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    if( proc->flags & (PROC_FLG_RUN|PROC_FLG_QUEUE|PROC_FLG_WAIT|PROC_FLG_END|PROC_FLG_DEAD) )
    186e:	ea 81       	ldd	r30, Y+2	; 0x02
    1870:	fb 81       	ldd	r31, Y+3	; 0x03
    1872:	83 85       	ldd	r24, Z+11	; 0x0b
    1874:	88 2f       	mov	r24, r24
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	8a 7d       	andi	r24, 0xDA	; 218
    187a:	90 70       	andi	r25, 0x00	; 0
    187c:	00 97       	sbiw	r24, 0x00	; 0
    187e:	11 f0       	breq	.+4      	; 0x1884 <proc_run_isr+0x2a>
    {
        ret = (bool_t)0;
    1880:	19 82       	std	Y+1, r1	; 0x01
    1882:	04 c0       	rjmp	.+8      	; 0x188c <proc_run_isr+0x32>
        goto end;
    }
    _proc_run( proc );
    1884:	8a 81       	ldd	r24, Y+2	; 0x02
    1886:	9b 81       	ldd	r25, Y+3	; 0x03
    1888:	0e 94 0f 0c 	call	0x181e	; 0x181e <_proc_run>
end:
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    return ret;
    188c:	89 81       	ldd	r24, Y+1	; 0x01
}
    188e:	0f 90       	pop	r0
    1890:	0f 90       	pop	r0
    1892:	0f 90       	pop	r0
    1894:	cf 91       	pop	r28
    1896:	df 91       	pop	r29
    1898:	08 95       	ret

0000189a <proc_restart_isr>:
// Перезепуск процесса из обработчика прерываний, прерывания должны быть запрещены
bool_t proc_restart_isr(proc_t * proc)
{
    189a:	df 93       	push	r29
    189c:	cf 93       	push	r28
    189e:	00 d0       	rcall	.+0      	; 0x18a0 <proc_restart_isr+0x6>
    18a0:	0f 92       	push	r0
    18a2:	cd b7       	in	r28, 0x3d	; 61
    18a4:	de b7       	in	r29, 0x3e	; 62
    18a6:	9b 83       	std	Y+3, r25	; 0x03
    18a8:	8a 83       	std	Y+2, r24	; 0x02
    bool_t ret = (bool_t)1;
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif
    if( proc->flags & (PROC_FLG_RUN|PROC_FLG_HOLD|PROC_FLG_QUEUE|PROC_FLG_WAIT|PROC_FLG_PRE_END|PROC_FLG_DEAD) )
    18ae:	ea 81       	ldd	r30, Y+2	; 0x02
    18b0:	fb 81       	ldd	r31, Y+3	; 0x03
    18b2:	83 85       	ldd	r24, Z+11	; 0x0b
    18b4:	88 2f       	mov	r24, r24
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	8e 7b       	andi	r24, 0xBE	; 190
    18ba:	90 70       	andi	r25, 0x00	; 0
    18bc:	00 97       	sbiw	r24, 0x00	; 0
    18be:	11 f0       	breq	.+4      	; 0x18c4 <proc_restart_isr+0x2a>
    {
        ret = (bool_t)0;
    18c0:	19 82       	std	Y+1, r1	; 0x01
    18c2:	2d c0       	rjmp	.+90     	; 0x191e <proc_restart_isr+0x84>
        goto end;
    }
    proc->flags = ( proc->flags & PROC_FLG_RT )?PROC_FLG_RT:(flag_t)0;
    18c4:	ea 81       	ldd	r30, Y+2	; 0x02
    18c6:	fb 81       	ldd	r31, Y+3	; 0x03
    18c8:	83 85       	ldd	r24, Z+11	; 0x0b
    18ca:	81 70       	andi	r24, 0x01	; 1
    18cc:	ea 81       	ldd	r30, Y+2	; 0x02
    18ce:	fb 81       	ldd	r31, Y+3	; 0x03
    18d0:	83 87       	std	Z+11, r24	; 0x0b
#ifdef CONFIG_USE_HIGHEST_LOCKER
    pcounter_init(&proc->lres);
    18d2:	8a 81       	ldd	r24, Y+2	; 0x02
    18d4:	9b 81       	ldd	r25, Y+3	; 0x03
    18d6:	0d 96       	adiw	r24, 0x0d	; 13
    18d8:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <pcounter_init>
#else
    proc->lres = (count_t)0;
#endif
    proc->timer = proc->time_quant;
    18dc:	ea 81       	ldd	r30, Y+2	; 0x02
    18de:	fb 81       	ldd	r31, Y+3	; 0x03
    18e0:	86 8d       	ldd	r24, Z+30	; 0x1e
    18e2:	97 8d       	ldd	r25, Z+31	; 0x1f
    18e4:	ea 81       	ldd	r30, Y+2	; 0x02
    18e6:	fb 81       	ldd	r31, Y+3	; 0x03
    18e8:	91 a3       	std	Z+33, r25	; 0x21
    18ea:	80 a3       	std	Z+32, r24	; 0x20

    if( proc->sstart )proc->spointer = proc_stack_init( proc->sstart, (code_t)proc_run_wrapper, (void *)proc );
    18ec:	ea 81       	ldd	r30, Y+2	; 0x02
    18ee:	fb 81       	ldd	r31, Y+3	; 0x03
    18f0:	82 a5       	ldd	r24, Z+42	; 0x2a
    18f2:	93 a5       	ldd	r25, Z+43	; 0x2b
    18f4:	00 97       	sbiw	r24, 0x00	; 0
    18f6:	79 f0       	breq	.+30     	; 0x1916 <proc_restart_isr+0x7c>
    18f8:	ea 81       	ldd	r30, Y+2	; 0x02
    18fa:	fb 81       	ldd	r31, Y+3	; 0x03
    18fc:	82 a5       	ldd	r24, Z+42	; 0x2a
    18fe:	93 a5       	ldd	r25, Z+43	; 0x2b
    1900:	28 e9       	ldi	r18, 0x98	; 152
    1902:	33 e0       	ldi	r19, 0x03	; 3
    1904:	4a 81       	ldd	r20, Y+2	; 0x02
    1906:	5b 81       	ldd	r21, Y+3	; 0x03
    1908:	b9 01       	movw	r22, r18
    190a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <proc_stack_init>
    190e:	ea 81       	ldd	r30, Y+2	; 0x02
    1910:	fb 81       	ldd	r31, Y+3	; 0x03
    1912:	95 a7       	std	Z+45, r25	; 0x2d
    1914:	84 a7       	std	Z+44, r24	; 0x2c
    _proc_run( proc );
    1916:	8a 81       	ldd	r24, Y+2	; 0x02
    1918:	9b 81       	ldd	r25, Y+3	; 0x03
    191a:	0e 94 0f 0c 	call	0x181e	; 0x181e <_proc_run>
end:
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif
    return ret;
    191e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1920:	0f 90       	pop	r0
    1922:	0f 90       	pop	r0
    1924:	0f 90       	pop	r0
    1926:	cf 91       	pop	r28
    1928:	df 91       	pop	r29
    192a:	08 95       	ret

0000192c <_proc_stop>:
        spin_unlock( xlist_lock );
    }
}
#endif // CONFIG_MP
void _proc_stop(proc_t * proc)
{
    192c:	df 93       	push	r29
    192e:	cf 93       	push	r28
    1930:	00 d0       	rcall	.+0      	; 0x1932 <_proc_stop+0x6>
    1932:	cd b7       	in	r28, 0x3d	; 61
    1934:	de b7       	in	r29, 0x3e	; 62
    1936:	9a 83       	std	Y+2, r25	; 0x02
    1938:	89 83       	std	Y+1, r24	; 0x01
    proc->flags &= ~PROC_FLG_RUN;
    193a:	e9 81       	ldd	r30, Y+1	; 0x01
    193c:	fa 81       	ldd	r31, Y+2	; 0x02
    193e:	83 85       	ldd	r24, Z+11	; 0x0b
    1940:	8d 7f       	andi	r24, 0xFD	; 253
    1942:	e9 81       	ldd	r30, Y+1	; 0x01
    1944:	fa 81       	ldd	r31, Y+2	; 0x02
    1946:	83 87       	std	Z+11, r24	; 0x0b
    _proc_stop_( proc );
    1948:	89 81       	ldd	r24, Y+1	; 0x01
    194a:	9a 81       	ldd	r25, Y+2	; 0x02
    194c:	0e 94 ce 07 	call	0xf9c	; 0xf9c <gitem_cut>
#ifdef CONFIG_MP
    resched( proc->core_id );
#else
    resched();
    1950:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
#endif // CONFIG_MP
}
    1954:	0f 90       	pop	r0
    1956:	0f 90       	pop	r0
    1958:	cf 91       	pop	r28
    195a:	df 91       	pop	r29
    195c:	08 95       	ret

0000195e <proc_stop_isr>:
// Останов процесса из обработчика прерываний, прерывания должны быть запрещены
bool_t proc_stop_isr(proc_t * proc)
{
    195e:	df 93       	push	r29
    1960:	cf 93       	push	r28
    1962:	00 d0       	rcall	.+0      	; 0x1964 <proc_stop_isr+0x6>
    1964:	0f 92       	push	r0
    1966:	cd b7       	in	r28, 0x3d	; 61
    1968:	de b7       	in	r29, 0x3e	; 62
    196a:	9b 83       	std	Y+3, r25	; 0x03
    196c:	8a 83       	std	Y+2, r24	; 0x02
    bool_t ret = (bool_t)0;
    196e:	19 82       	std	Y+1, r1	; 0x01
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    //Проверка флагов
    //В случчае PROC_FLG_WAIT будем обрабатывать PROC_FLG_PRE_END на выходе из sig_wait.
    //В случае PROC_FLG_HOLD или PROC_FLG_QUEUE будем обрабатывать PROC_FLG_PRE_END на выходе из функции, освобождающей общий ресурс.
    if( proc->flags & (PROC_FLG_HOLD|PROC_FLG_QUEUE|PROC_FLG_WAIT) )proc->flags |= PROC_FLG_PRE_END;
    1970:	ea 81       	ldd	r30, Y+2	; 0x02
    1972:	fb 81       	ldd	r31, Y+3	; 0x03
    1974:	83 85       	ldd	r24, Z+11	; 0x0b
    1976:	88 2f       	mov	r24, r24
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	8c 71       	andi	r24, 0x1C	; 28
    197c:	90 70       	andi	r25, 0x00	; 0
    197e:	00 97       	sbiw	r24, 0x00	; 0
    1980:	41 f0       	breq	.+16     	; 0x1992 <proc_stop_isr+0x34>
    1982:	ea 81       	ldd	r30, Y+2	; 0x02
    1984:	fb 81       	ldd	r31, Y+3	; 0x03
    1986:	83 85       	ldd	r24, Z+11	; 0x0b
    1988:	80 62       	ori	r24, 0x20	; 32
    198a:	ea 81       	ldd	r30, Y+2	; 0x02
    198c:	fb 81       	ldd	r31, Y+3	; 0x03
    198e:	83 87       	std	Z+11, r24	; 0x0b
    1990:	0f c0       	rjmp	.+30     	; 0x19b0 <proc_stop_isr+0x52>
    else if( proc->flags & PROC_FLG_RUN )
    1992:	ea 81       	ldd	r30, Y+2	; 0x02
    1994:	fb 81       	ldd	r31, Y+3	; 0x03
    1996:	83 85       	ldd	r24, Z+11	; 0x0b
    1998:	88 2f       	mov	r24, r24
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	82 70       	andi	r24, 0x02	; 2
    199e:	90 70       	andi	r25, 0x00	; 0
    19a0:	00 97       	sbiw	r24, 0x00	; 0
    19a2:	31 f0       	breq	.+12     	; 0x19b0 <proc_stop_isr+0x52>
    {
        _proc_stop( proc );
    19a4:	8a 81       	ldd	r24, Y+2	; 0x02
    19a6:	9b 81       	ldd	r25, Y+3	; 0x03
    19a8:	0e 94 96 0c 	call	0x192c	; 0x192c <_proc_stop>
        ret = (bool_t)1;
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	89 83       	std	Y+1, r24	; 0x01
    }
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    return ret;
    19b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    19b2:	0f 90       	pop	r0
    19b4:	0f 90       	pop	r0
    19b6:	0f 90       	pop	r0
    19b8:	cf 91       	pop	r28
    19ba:	df 91       	pop	r29
    19bc:	08 95       	ret

000019be <proc_reset_watchdog>:
void proc_reset_watchdog(void)
{
    19be:	df 93       	push	r29
    19c0:	cf 93       	push	r28
    19c2:	00 d0       	rcall	.+0      	; 0x19c4 <proc_reset_watchdog+0x6>
    19c4:	cd b7       	in	r28, 0x3d	; 61
    19c6:	de b7       	in	r29, 0x3e	; 62
#ifdef CONFIG_MP
    core_id_t current_core = _enter_crit_sec();
    proc = ((sched_t *)kernel.sched + current_core)->current_proc;
    spin_lock(&proc->lock);
#else
    enter_crit_sec();
    19c8:	0e 94 1b 06 	call	0xc36	; 0xc36 <enter_crit_sec>
    proc = kernel.sched.current_proc;
    19cc:	80 91 9f 01 	lds	r24, 0x019F
    19d0:	90 91 a0 01 	lds	r25, 0x01A0
    19d4:	9a 83       	std	Y+2, r25	; 0x02
    19d6:	89 83       	std	Y+1, r24	; 0x01
#endif
    if( proc->flags & PROC_FLG_RT )proc->timer = proc->time_quant;
    19d8:	e9 81       	ldd	r30, Y+1	; 0x01
    19da:	fa 81       	ldd	r31, Y+2	; 0x02
    19dc:	83 85       	ldd	r24, Z+11	; 0x0b
    19de:	88 2f       	mov	r24, r24
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	81 70       	andi	r24, 0x01	; 1
    19e4:	90 70       	andi	r25, 0x00	; 0
    19e6:	88 23       	and	r24, r24
    19e8:	41 f0       	breq	.+16     	; 0x19fa <proc_reset_watchdog+0x3c>
    19ea:	e9 81       	ldd	r30, Y+1	; 0x01
    19ec:	fa 81       	ldd	r31, Y+2	; 0x02
    19ee:	86 8d       	ldd	r24, Z+30	; 0x1e
    19f0:	97 8d       	ldd	r25, Z+31	; 0x1f
    19f2:	e9 81       	ldd	r30, Y+1	; 0x01
    19f4:	fa 81       	ldd	r31, Y+2	; 0x02
    19f6:	91 a3       	std	Z+33, r25	; 0x21
    19f8:	80 a3       	std	Z+32, r24	; 0x20
#ifdef CONFIG_MP
    spin_lock(&proc->lock);
    _exit_crit_sec(current_core);
#else
    exit_crit_sec();
    19fa:	0e 94 2d 06 	call	0xc5a	; 0xc5a <exit_crit_sec>
#endif
}
    19fe:	0f 90       	pop	r0
    1a00:	0f 90       	pop	r0
    1a02:	cf 91       	pop	r28
    1a04:	df 91       	pop	r29
    1a06:	08 95       	ret

00001a08 <_proc_flag_stop_isr>:

void _proc_flag_stop_isr( flag_t mask )
{
    1a08:	df 93       	push	r29
    1a0a:	cf 93       	push	r28
    1a0c:	00 d0       	rcall	.+0      	; 0x1a0e <_proc_flag_stop_isr+0x6>
    1a0e:	0f 92       	push	r0
    1a10:	cd b7       	in	r28, 0x3d	; 61
    1a12:	de b7       	in	r29, 0x3e	; 62
    1a14:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = current_proc();
    1a16:	0e 94 cc 00 	call	0x198	; 0x198 <current_proc>
    1a1a:	9a 83       	std	Y+2, r25	; 0x02
    1a1c:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif //CONFIG_MP
    proc->flags &= mask;
    1a1e:	e9 81       	ldd	r30, Y+1	; 0x01
    1a20:	fa 81       	ldd	r31, Y+2	; 0x02
    1a22:	93 85       	ldd	r25, Z+11	; 0x0b
    1a24:	8b 81       	ldd	r24, Y+3	; 0x03
    1a26:	89 23       	and	r24, r25
    1a28:	e9 81       	ldd	r30, Y+1	; 0x01
    1a2a:	fa 81       	ldd	r31, Y+2	; 0x02
    1a2c:	83 87       	std	Z+11, r24	; 0x0b
    if(  ( proc->flags & PROC_FLG_PRE_END ) && (!(proc->flags & PROC_FLG_HOLD))  )
    1a2e:	e9 81       	ldd	r30, Y+1	; 0x01
    1a30:	fa 81       	ldd	r31, Y+2	; 0x02
    1a32:	83 85       	ldd	r24, Z+11	; 0x0b
    1a34:	88 2f       	mov	r24, r24
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	80 72       	andi	r24, 0x20	; 32
    1a3a:	90 70       	andi	r25, 0x00	; 0
    1a3c:	00 97       	sbiw	r24, 0x00	; 0
    1a3e:	a1 f0       	breq	.+40     	; 0x1a68 <_proc_flag_stop_isr+0x60>
    1a40:	e9 81       	ldd	r30, Y+1	; 0x01
    1a42:	fa 81       	ldd	r31, Y+2	; 0x02
    1a44:	83 85       	ldd	r24, Z+11	; 0x0b
    1a46:	88 2f       	mov	r24, r24
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	84 70       	andi	r24, 0x04	; 4
    1a4c:	90 70       	andi	r25, 0x00	; 0
    1a4e:	00 97       	sbiw	r24, 0x00	; 0
    1a50:	59 f4       	brne	.+22     	; 0x1a68 <_proc_flag_stop_isr+0x60>
    {
        proc->flags &= ~PROC_FLG_PRE_END;
    1a52:	e9 81       	ldd	r30, Y+1	; 0x01
    1a54:	fa 81       	ldd	r31, Y+2	; 0x02
    1a56:	83 85       	ldd	r24, Z+11	; 0x0b
    1a58:	8f 7d       	andi	r24, 0xDF	; 223
    1a5a:	e9 81       	ldd	r30, Y+1	; 0x01
    1a5c:	fa 81       	ldd	r31, Y+2	; 0x02
    1a5e:	83 87       	std	Z+11, r24	; 0x0b
        _proc_stop( proc );
    1a60:	89 81       	ldd	r24, Y+1	; 0x01
    1a62:	9a 81       	ldd	r25, Y+2	; 0x02
    1a64:	0e 94 96 0c 	call	0x192c	; 0x192c <_proc_stop>
    }
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif //CONFIG_MP
}
    1a68:	0f 90       	pop	r0
    1a6a:	0f 90       	pop	r0
    1a6c:	0f 90       	pop	r0
    1a6e:	cf 91       	pop	r28
    1a70:	df 91       	pop	r29
    1a72:	08 95       	ret

00001a74 <_proc_lres_inc>:
    proc_t * proc
#ifdef CONFIG_USE_HIGHEST_LOCKER
    ,prio_t prio
#endif
)
{
    1a74:	df 93       	push	r29
    1a76:	cf 93       	push	r28
    1a78:	00 d0       	rcall	.+0      	; 0x1a7a <_proc_lres_inc+0x6>
    1a7a:	0f 92       	push	r0
    1a7c:	cd b7       	in	r28, 0x3d	; 61
    1a7e:	de b7       	in	r29, 0x3e	; 62
    1a80:	9a 83       	std	Y+2, r25	; 0x02
    1a82:	89 83       	std	Y+1, r24	; 0x01
    1a84:	6b 83       	std	Y+3, r22	; 0x03
#ifdef CONFIG_USE_HIGHEST_LOCKER
    if( proc->lres.index == (index_t)0 )proc->flags |= PROC_FLG_HOLD;
    1a86:	e9 81       	ldd	r30, Y+1	; 0x01
    1a88:	fa 81       	ldd	r31, Y+2	; 0x02
    1a8a:	85 8d       	ldd	r24, Z+29	; 0x1d
    1a8c:	88 23       	and	r24, r24
    1a8e:	39 f4       	brne	.+14     	; 0x1a9e <_proc_lres_inc+0x2a>
    1a90:	e9 81       	ldd	r30, Y+1	; 0x01
    1a92:	fa 81       	ldd	r31, Y+2	; 0x02
    1a94:	83 85       	ldd	r24, Z+11	; 0x0b
    1a96:	84 60       	ori	r24, 0x04	; 4
    1a98:	e9 81       	ldd	r30, Y+1	; 0x01
    1a9a:	fa 81       	ldd	r31, Y+2	; 0x02
    1a9c:	83 87       	std	Z+11, r24	; 0x0b
    pcounter_inc( &proc->lres, prio );
    1a9e:	89 81       	ldd	r24, Y+1	; 0x01
    1aa0:	9a 81       	ldd	r25, Y+2	; 0x02
    1aa2:	0d 96       	adiw	r24, 0x0d	; 13
    1aa4:	6b 81       	ldd	r22, Y+3	; 0x03
    1aa6:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <pcounter_inc>
#else
    if( proc->lres == (count_t)0 )proc->flags |= PROC_FLG_HOLD;
    proc->lres++;
#endif
}
    1aaa:	0f 90       	pop	r0
    1aac:	0f 90       	pop	r0
    1aae:	0f 90       	pop	r0
    1ab0:	cf 91       	pop	r28
    1ab2:	df 91       	pop	r29
    1ab4:	08 95       	ret

00001ab6 <_proc_lres_dec>:
    proc_t * proc
#ifdef CONFIG_USE_HIGHEST_LOCKER
    ,prio_t prio
#endif
)
{
    1ab6:	df 93       	push	r29
    1ab8:	cf 93       	push	r28
    1aba:	00 d0       	rcall	.+0      	; 0x1abc <_proc_lres_dec+0x6>
    1abc:	0f 92       	push	r0
    1abe:	cd b7       	in	r28, 0x3d	; 61
    1ac0:	de b7       	in	r29, 0x3e	; 62
    1ac2:	9a 83       	std	Y+2, r25	; 0x02
    1ac4:	89 83       	std	Y+1, r24	; 0x01
    1ac6:	6b 83       	std	Y+3, r22	; 0x03
#ifdef CONFIG_USE_HIGHEST_LOCKER
    pcounter_dec( &proc->lres, prio );
    1ac8:	89 81       	ldd	r24, Y+1	; 0x01
    1aca:	9a 81       	ldd	r25, Y+2	; 0x02
    1acc:	0d 96       	adiw	r24, 0x0d	; 13
    1ace:	6b 81       	ldd	r22, Y+3	; 0x03
    1ad0:	0e 94 35 0b 	call	0x166a	; 0x166a <pcounter_dec>
    if( proc->lres.index == (index_t)0 )proc->flags &= ~PROC_FLG_HOLD;
    1ad4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ad6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ad8:	85 8d       	ldd	r24, Z+29	; 0x1d
    1ada:	88 23       	and	r24, r24
    1adc:	39 f4       	brne	.+14     	; 0x1aec <_proc_lres_dec+0x36>
    1ade:	e9 81       	ldd	r30, Y+1	; 0x01
    1ae0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ae2:	83 85       	ldd	r24, Z+11	; 0x0b
    1ae4:	8b 7f       	andi	r24, 0xFB	; 251
    1ae6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ae8:	fa 81       	ldd	r31, Y+2	; 0x02
    1aea:	83 87       	std	Z+11, r24	; 0x0b
#else
    if( proc->lres!= (count_t)0 )proc->lres--;
    if( proc->lres == (count_t)0 )proc->flags &= ~PROC_FLG_HOLD;
#endif
}
    1aec:	0f 90       	pop	r0
    1aee:	0f 90       	pop	r0
    1af0:	0f 90       	pop	r0
    1af2:	cf 91       	pop	r28
    1af4:	df 91       	pop	r29
    1af6:	08 95       	ret

00001af8 <_proc_prio_control_stoped>:
#ifdef CONFIG_USE_HIGHEST_LOCKER
// Будет использоваться в mutex-ах и т.п., процесс должен сам вызывать эту функцию, при этом он должен быть вырезан из списка выполняющихся.
void _proc_prio_control_stoped( proc_t * proc )
{
    1af8:	df 93       	push	r29
    1afa:	cf 93       	push	r28
    1afc:	cd b7       	in	r28, 0x3d	; 61
    1afe:	de b7       	in	r29, 0x3e	; 62
    1b00:	27 97       	sbiw	r28, 0x07	; 7
    1b02:	0f b6       	in	r0, 0x3f	; 63
    1b04:	f8 94       	cli
    1b06:	de bf       	out	0x3e, r29	; 62
    1b08:	0f be       	out	0x3f, r0	; 63
    1b0a:	cd bf       	out	0x3d, r28	; 61
    1b0c:	9b 83       	std	Y+3, r25	; 0x03
    1b0e:	8a 83       	std	Y+2, r24	; 0x02
    if(proc->lres.index != (index_t)0)
    1b10:	ea 81       	ldd	r30, Y+2	; 0x02
    1b12:	fb 81       	ldd	r31, Y+3	; 0x03
    1b14:	85 8d       	ldd	r24, Z+29	; 0x1d
    1b16:	88 23       	and	r24, r24
    1b18:	e9 f0       	breq	.+58     	; 0x1b54 <_proc_prio_control_stoped+0x5c>
    {
        prio_t locker_prio = index_search( proc->lres.index );
    1b1a:	ea 81       	ldd	r30, Y+2	; 0x02
    1b1c:	fb 81       	ldd	r31, Y+3	; 0x03
    1b1e:	85 8d       	ldd	r24, Z+29	; 0x1d
    1b20:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <index_search>
    1b24:	89 83       	std	Y+1, r24	; 0x01
        ((gitem_t *)proc)->group->prio = ( locker_prio < proc->base_prio )?locker_prio:proc->base_prio;
    1b26:	ea 81       	ldd	r30, Y+2	; 0x02
    1b28:	fb 81       	ldd	r31, Y+3	; 0x03
    1b2a:	84 81       	ldd	r24, Z+4	; 0x04
    1b2c:	95 81       	ldd	r25, Z+5	; 0x05
    1b2e:	9e 83       	std	Y+6, r25	; 0x06
    1b30:	8d 83       	std	Y+5, r24	; 0x05
    1b32:	ea 81       	ldd	r30, Y+2	; 0x02
    1b34:	fb 81       	ldd	r31, Y+3	; 0x03
    1b36:	84 85       	ldd	r24, Z+12	; 0x0c
    1b38:	99 81       	ldd	r25, Y+1	; 0x01
    1b3a:	9f 83       	std	Y+7, r25	; 0x07
    1b3c:	8c 83       	std	Y+4, r24	; 0x04
    1b3e:	ec 81       	ldd	r30, Y+4	; 0x04
    1b40:	ff 81       	ldd	r31, Y+7	; 0x07
    1b42:	fe 17       	cp	r31, r30
    1b44:	10 f4       	brcc	.+4      	; 0x1b4a <_proc_prio_control_stoped+0x52>
    1b46:	8f 81       	ldd	r24, Y+7	; 0x07
    1b48:	8c 83       	std	Y+4, r24	; 0x04
    1b4a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b4c:	ed 81       	ldd	r30, Y+5	; 0x05
    1b4e:	fe 81       	ldd	r31, Y+6	; 0x06
    1b50:	82 83       	std	Z+2, r24	; 0x02
    1b52:	0a c0       	rjmp	.+20     	; 0x1b68 <_proc_prio_control_stoped+0x70>
    }
    else
    {
        ((gitem_t *)proc)->group->prio = proc->base_prio;
    1b54:	ea 81       	ldd	r30, Y+2	; 0x02
    1b56:	fb 81       	ldd	r31, Y+3	; 0x03
    1b58:	a4 81       	ldd	r26, Z+4	; 0x04
    1b5a:	b5 81       	ldd	r27, Z+5	; 0x05
    1b5c:	ea 81       	ldd	r30, Y+2	; 0x02
    1b5e:	fb 81       	ldd	r31, Y+3	; 0x03
    1b60:	84 85       	ldd	r24, Z+12	; 0x0c
    1b62:	12 96       	adiw	r26, 0x02	; 2
    1b64:	8c 93       	st	X, r24
    1b66:	12 97       	sbiw	r26, 0x02	; 2
    }
}
    1b68:	27 96       	adiw	r28, 0x07	; 7
    1b6a:	0f b6       	in	r0, 0x3f	; 63
    1b6c:	f8 94       	cli
    1b6e:	de bf       	out	0x3e, r29	; 62
    1b70:	0f be       	out	0x3f, r0	; 63
    1b72:	cd bf       	out	0x3d, r28	; 61
    1b74:	cf 91       	pop	r28
    1b76:	df 91       	pop	r29
    1b78:	08 95       	ret

00001b7a <_proc_prio_control_running>:
void _proc_prio_control_running( proc_t * proc )
{
    1b7a:	df 93       	push	r29
    1b7c:	cf 93       	push	r28
    1b7e:	00 d0       	rcall	.+0      	; 0x1b80 <_proc_prio_control_running+0x6>
    1b80:	00 d0       	rcall	.+0      	; 0x1b82 <_proc_prio_control_running+0x8>
    1b82:	00 d0       	rcall	.+0      	; 0x1b84 <_proc_prio_control_running+0xa>
    1b84:	cd b7       	in	r28, 0x3d	; 61
    1b86:	de b7       	in	r29, 0x3e	; 62
    1b88:	9c 83       	std	Y+4, r25	; 0x04
    1b8a:	8b 83       	std	Y+3, r24	; 0x03
    prio_t new_prio;
    if(proc->lres.index != (index_t)0)
    1b8c:	eb 81       	ldd	r30, Y+3	; 0x03
    1b8e:	fc 81       	ldd	r31, Y+4	; 0x04
    1b90:	85 8d       	ldd	r24, Z+29	; 0x1d
    1b92:	88 23       	and	r24, r24
    1b94:	a9 f0       	breq	.+42     	; 0x1bc0 <_proc_prio_control_running+0x46>
    {
        prio_t locker_prio = index_search( proc->lres.index );
    1b96:	eb 81       	ldd	r30, Y+3	; 0x03
    1b98:	fc 81       	ldd	r31, Y+4	; 0x04
    1b9a:	85 8d       	ldd	r24, Z+29	; 0x1d
    1b9c:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <index_search>
    1ba0:	89 83       	std	Y+1, r24	; 0x01
        new_prio = ( locker_prio < proc->base_prio )?locker_prio:proc->base_prio;
    1ba2:	eb 81       	ldd	r30, Y+3	; 0x03
    1ba4:	fc 81       	ldd	r31, Y+4	; 0x04
    1ba6:	84 85       	ldd	r24, Z+12	; 0x0c
    1ba8:	99 81       	ldd	r25, Y+1	; 0x01
    1baa:	9e 83       	std	Y+6, r25	; 0x06
    1bac:	8d 83       	std	Y+5, r24	; 0x05
    1bae:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb0:	9e 81       	ldd	r25, Y+6	; 0x06
    1bb2:	98 17       	cp	r25, r24
    1bb4:	10 f4       	brcc	.+4      	; 0x1bba <_proc_prio_control_running+0x40>
    1bb6:	8e 81       	ldd	r24, Y+6	; 0x06
    1bb8:	8d 83       	std	Y+5, r24	; 0x05
    1bba:	9d 81       	ldd	r25, Y+5	; 0x05
    1bbc:	9a 83       	std	Y+2, r25	; 0x02
    1bbe:	04 c0       	rjmp	.+8      	; 0x1bc8 <_proc_prio_control_running+0x4e>
    }
    else
    {
        new_prio = proc->base_prio;
    1bc0:	eb 81       	ldd	r30, Y+3	; 0x03
    1bc2:	fc 81       	ldd	r31, Y+4	; 0x04
    1bc4:	84 85       	ldd	r24, Z+12	; 0x0c
    1bc6:	8a 83       	std	Y+2, r24	; 0x02
    }
    if(((gitem_t *)proc)->group->prio != new_prio)
    1bc8:	eb 81       	ldd	r30, Y+3	; 0x03
    1bca:	fc 81       	ldd	r31, Y+4	; 0x04
    1bcc:	04 80       	ldd	r0, Z+4	; 0x04
    1bce:	f5 81       	ldd	r31, Z+5	; 0x05
    1bd0:	e0 2d       	mov	r30, r0
    1bd2:	92 81       	ldd	r25, Z+2	; 0x02
    1bd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd6:	98 17       	cp	r25, r24
    1bd8:	b1 f0       	breq	.+44     	; 0x1c06 <_proc_prio_control_running+0x8c>
    {
        _proc_stop_( proc );
    1bda:	8b 81       	ldd	r24, Y+3	; 0x03
    1bdc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bde:	0e 94 ce 07 	call	0xf9c	; 0xf9c <gitem_cut>
        ((gitem_t *)proc)->group->prio = new_prio;
    1be2:	eb 81       	ldd	r30, Y+3	; 0x03
    1be4:	fc 81       	ldd	r31, Y+4	; 0x04
    1be6:	04 80       	ldd	r0, Z+4	; 0x04
    1be8:	f5 81       	ldd	r31, Z+5	; 0x05
    1bea:	e0 2d       	mov	r30, r0
    1bec:	8a 81       	ldd	r24, Y+2	; 0x02
    1bee:	82 83       	std	Z+2, r24	; 0x02
#ifdef CONFIG_MP
        spin_lock( &kernel.stat_lock );
        stat_inc( proc, (stat_t *)kernel.stat+proc->core_id );
        spin_unlock( &kernel.stat_lock );
#endif
        _proc_run_( proc );
    1bf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf4:	20 91 a1 01 	lds	r18, 0x01A1
    1bf8:	30 91 a2 01 	lds	r19, 0x01A2
    1bfc:	b9 01       	movw	r22, r18
    1bfe:	0e 94 71 06 	call	0xce2	; 0xce2 <gitem_insert>
#ifdef CONFIG_MP
        resched(proc->core_id);
#else
        resched();
    1c02:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
#endif
    }
}
    1c06:	26 96       	adiw	r28, 0x06	; 6
    1c08:	0f b6       	in	r0, 0x3f	; 63
    1c0a:	f8 94       	cli
    1c0c:	de bf       	out	0x3e, r29	; 62
    1c0e:	0f be       	out	0x3f, r0	; 63
    1c10:	cd bf       	out	0x3d, r28	; 61
    1c12:	cf 91       	pop	r28
    1c14:	df 91       	pop	r29
    1c16:	08 95       	ret

00001c18 <sched_init>:
*****************************************************************************************/
#include "../include/bugurt.h"
///========================================================================================
// Инициация
void sched_init(sched_t * sched, proc_t * idle)
{
    1c18:	df 93       	push	r29
    1c1a:	cf 93       	push	r28
    1c1c:	00 d0       	rcall	.+0      	; 0x1c1e <sched_init+0x6>
    1c1e:	00 d0       	rcall	.+0      	; 0x1c20 <sched_init+0x8>
    1c20:	cd b7       	in	r28, 0x3d	; 61
    1c22:	de b7       	in	r29, 0x3e	; 62
    1c24:	9a 83       	std	Y+2, r25	; 0x02
    1c26:	89 83       	std	Y+1, r24	; 0x01
    1c28:	7c 83       	std	Y+4, r23	; 0x04
    1c2a:	6b 83       	std	Y+3, r22	; 0x03
#ifdef CONFIG_MP
    lock_t * sched_lock = &sched->lock;
    spin_init( sched_lock );
    spin_lock( sched_lock );
#endif // CONFIG_MP
    sched->ready = (xlist_t *)sched->plst;
    1c2c:	89 81       	ldd	r24, Y+1	; 0x01
    1c2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c30:	06 96       	adiw	r24, 0x06	; 6
    1c32:	e9 81       	ldd	r30, Y+1	; 0x01
    1c34:	fa 81       	ldd	r31, Y+2	; 0x02
    1c36:	93 83       	std	Z+3, r25	; 0x03
    1c38:	82 83       	std	Z+2, r24	; 0x02
    xlist_init( sched->ready );
    1c3a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c3c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c3e:	82 81       	ldd	r24, Z+2	; 0x02
    1c40:	93 81       	ldd	r25, Z+3	; 0x03
    1c42:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <xlist_init>
    sched->expired = (xlist_t *)sched->plst + 1;
    1c46:	89 81       	ldd	r24, Y+1	; 0x01
    1c48:	9a 81       	ldd	r25, Y+2	; 0x02
    1c4a:	47 96       	adiw	r24, 0x17	; 23
    1c4c:	e9 81       	ldd	r30, Y+1	; 0x01
    1c4e:	fa 81       	ldd	r31, Y+2	; 0x02
    1c50:	95 83       	std	Z+5, r25	; 0x05
    1c52:	84 83       	std	Z+4, r24	; 0x04
    xlist_init( sched->expired );
    1c54:	e9 81       	ldd	r30, Y+1	; 0x01
    1c56:	fa 81       	ldd	r31, Y+2	; 0x02
    1c58:	84 81       	ldd	r24, Z+4	; 0x04
    1c5a:	95 81       	ldd	r25, Z+5	; 0x05
    1c5c:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <xlist_init>
    gitem_insert( (gitem_t *)idle, sched->ready );
    1c60:	8b 81       	ldd	r24, Y+3	; 0x03
    1c62:	9c 81       	ldd	r25, Y+4	; 0x04
    1c64:	e9 81       	ldd	r30, Y+1	; 0x01
    1c66:	fa 81       	ldd	r31, Y+2	; 0x02
    1c68:	22 81       	ldd	r18, Z+2	; 0x02
    1c6a:	33 81       	ldd	r19, Z+3	; 0x03
    1c6c:	b9 01       	movw	r22, r18
    1c6e:	0e 94 71 06 	call	0xce2	; 0xce2 <gitem_insert>
    sched->current_proc = idle;
    1c72:	e9 81       	ldd	r30, Y+1	; 0x01
    1c74:	fa 81       	ldd	r31, Y+2	; 0x02
    1c76:	8b 81       	ldd	r24, Y+3	; 0x03
    1c78:	9c 81       	ldd	r25, Y+4	; 0x04
    1c7a:	91 83       	std	Z+1, r25	; 0x01
    1c7c:	80 83       	st	Z, r24
    sched->nested_crit_sec = (count_t)0;//вообще это выполняется при запрещенных прерываниях, но не известно, на этом ли процессоре
    1c7e:	e9 81       	ldd	r30, Y+1	; 0x01
    1c80:	fa 81       	ldd	r31, Y+2	; 0x02
    1c82:	11 a6       	std	Z+41, r1	; 0x29
    1c84:	10 a6       	std	Z+40, r1	; 0x28
#ifdef CONFIG_MP
    spin_unlock( sched_lock );
    stat_inc( idle, (stat_t *)kernel.stat + idle->core_id );
#endif // CONFIG_MP
}
    1c86:	0f 90       	pop	r0
    1c88:	0f 90       	pop	r0
    1c8a:	0f 90       	pop	r0
    1c8c:	0f 90       	pop	r0
    1c8e:	cf 91       	pop	r28
    1c90:	df 91       	pop	r29
    1c92:	08 95       	ret

00001c94 <_sched_list_switch>:
static void _sched_list_switch( sched_t * sched )
{
    1c94:	df 93       	push	r29
    1c96:	cf 93       	push	r28
    1c98:	00 d0       	rcall	.+0      	; 0x1c9a <_sched_list_switch+0x6>
    1c9a:	00 d0       	rcall	.+0      	; 0x1c9c <_sched_list_switch+0x8>
    1c9c:	cd b7       	in	r28, 0x3d	; 61
    1c9e:	de b7       	in	r29, 0x3e	; 62
    1ca0:	9c 83       	std	Y+4, r25	; 0x04
    1ca2:	8b 83       	std	Y+3, r24	; 0x03
    // Список ready опустел, переключаем списки
    if( sched->ready->index == (index_t)0 )
    1ca4:	eb 81       	ldd	r30, Y+3	; 0x03
    1ca6:	fc 81       	ldd	r31, Y+4	; 0x04
    1ca8:	02 80       	ldd	r0, Z+2	; 0x02
    1caa:	f3 81       	ldd	r31, Z+3	; 0x03
    1cac:	e0 2d       	mov	r30, r0
    1cae:	80 89       	ldd	r24, Z+16	; 0x10
    1cb0:	88 23       	and	r24, r24
    1cb2:	a1 f4       	brne	.+40     	; 0x1cdc <_sched_list_switch+0x48>
    {
        xlist_t * buf = sched->ready;
    1cb4:	eb 81       	ldd	r30, Y+3	; 0x03
    1cb6:	fc 81       	ldd	r31, Y+4	; 0x04
    1cb8:	82 81       	ldd	r24, Z+2	; 0x02
    1cba:	93 81       	ldd	r25, Z+3	; 0x03
    1cbc:	9a 83       	std	Y+2, r25	; 0x02
    1cbe:	89 83       	std	Y+1, r24	; 0x01
        sched->ready = sched->expired;
    1cc0:	eb 81       	ldd	r30, Y+3	; 0x03
    1cc2:	fc 81       	ldd	r31, Y+4	; 0x04
    1cc4:	84 81       	ldd	r24, Z+4	; 0x04
    1cc6:	95 81       	ldd	r25, Z+5	; 0x05
    1cc8:	eb 81       	ldd	r30, Y+3	; 0x03
    1cca:	fc 81       	ldd	r31, Y+4	; 0x04
    1ccc:	93 83       	std	Z+3, r25	; 0x03
    1cce:	82 83       	std	Z+2, r24	; 0x02
        sched->expired = buf;
    1cd0:	eb 81       	ldd	r30, Y+3	; 0x03
    1cd2:	fc 81       	ldd	r31, Y+4	; 0x04
    1cd4:	89 81       	ldd	r24, Y+1	; 0x01
    1cd6:	9a 81       	ldd	r25, Y+2	; 0x02
    1cd8:	95 83       	std	Z+5, r25	; 0x05
    1cda:	84 83       	std	Z+4, r24	; 0x04
    }
}
    1cdc:	0f 90       	pop	r0
    1cde:	0f 90       	pop	r0
    1ce0:	0f 90       	pop	r0
    1ce2:	0f 90       	pop	r0
    1ce4:	cf 91       	pop	r28
    1ce6:	df 91       	pop	r29
    1ce8:	08 95       	ret

00001cea <sched_schedule>:
2) В качестве аргумента передаем только тот объект, который управляет процессами
на исполняющем функции процессоре.
******************************************************************************************/
// Функция планирования, переключает процессы в обработчике системмного таймера
stack_t * sched_schedule( stack_t * current_sp )
{
    1cea:	df 93       	push	r29
    1cec:	cf 93       	push	r28
    1cee:	cd b7       	in	r28, 0x3d	; 61
    1cf0:	de b7       	in	r29, 0x3e	; 62
    1cf2:	27 97       	sbiw	r28, 0x07	; 7
    1cf4:	0f b6       	in	r0, 0x3f	; 63
    1cf6:	f8 94       	cli
    1cf8:	de bf       	out	0x3e, r29	; 62
    1cfa:	0f be       	out	0x3f, r0	; 63
    1cfc:	cd bf       	out	0x3d, r28	; 61
    1cfe:	9f 83       	std	Y+7, r25	; 0x07
    1d00:	8e 83       	std	Y+6, r24	; 0x06
#ifdef CONFIG_MP
    sched_t * sched = (sched_t *)kernel.sched + current_core();
#else
    sched_t * sched = (sched_t *)&kernel.sched;
    1d02:	8f e9       	ldi	r24, 0x9F	; 159
    1d04:	91 e0       	ldi	r25, 0x01	; 1
    1d06:	9d 83       	std	Y+5, r25	; 0x05
    1d08:	8c 83       	std	Y+4, r24	; 0x04
#endif // CONFIG_MP
    // Меняем только с локального процессора, блокировку sched->lock можно не захватывать!
    proc_t * current_proc = sched->current_proc;
    1d0a:	ec 81       	ldd	r30, Y+4	; 0x04
    1d0c:	fd 81       	ldd	r31, Y+5	; 0x05
    1d0e:	80 81       	ld	r24, Z
    1d10:	91 81       	ldd	r25, Z+1	; 0x01
    1d12:	9b 83       	std	Y+3, r25	; 0x03
    1d14:	8a 83       	std	Y+2, r24	; 0x02
#ifdef CONFIG_MP
    // А вот эту блокировку обязательно надо захватить!
    spin_lock( &current_proc->lock );
#endif // CONFIG_MP
    // Сохранение указателя стека
    current_proc->spointer = current_sp;
    1d16:	ea 81       	ldd	r30, Y+2	; 0x02
    1d18:	fb 81       	ldd	r31, Y+3	; 0x03
    1d1a:	8e 81       	ldd	r24, Y+6	; 0x06
    1d1c:	9f 81       	ldd	r25, Y+7	; 0x07
    1d1e:	95 a7       	std	Z+45, r25	; 0x2d
    1d20:	84 a7       	std	Z+44, r24	; 0x2c
    // Хук "сохранение контекста"
    if( current_proc->sv_hook )current_proc->sv_hook( current_proc->arg );
    1d22:	ea 81       	ldd	r30, Y+2	; 0x02
    1d24:	fb 81       	ldd	r31, Y+3	; 0x03
    1d26:	84 a1       	ldd	r24, Z+36	; 0x24
    1d28:	95 a1       	ldd	r25, Z+37	; 0x25
    1d2a:	00 97       	sbiw	r24, 0x00	; 0
    1d2c:	51 f0       	breq	.+20     	; 0x1d42 <sched_schedule+0x58>
    1d2e:	ea 81       	ldd	r30, Y+2	; 0x02
    1d30:	fb 81       	ldd	r31, Y+3	; 0x03
    1d32:	24 a1       	ldd	r18, Z+36	; 0x24
    1d34:	35 a1       	ldd	r19, Z+37	; 0x25
    1d36:	ea 81       	ldd	r30, Y+2	; 0x02
    1d38:	fb 81       	ldd	r31, Y+3	; 0x03
    1d3a:	80 a5       	ldd	r24, Z+40	; 0x28
    1d3c:	91 a5       	ldd	r25, Z+41	; 0x29
    1d3e:	f9 01       	movw	r30, r18
    1d40:	09 95       	icall
    // Проверяем, что процесс находится в списке ready
    if( (xlist_t *)((gitem_t *)current_proc)->group->link == sched->ready )
    1d42:	ea 81       	ldd	r30, Y+2	; 0x02
    1d44:	fb 81       	ldd	r31, Y+3	; 0x03
    1d46:	04 80       	ldd	r0, Z+4	; 0x04
    1d48:	f5 81       	ldd	r31, Z+5	; 0x05
    1d4a:	e0 2d       	mov	r30, r0
    1d4c:	80 81       	ld	r24, Z
    1d4e:	91 81       	ldd	r25, Z+1	; 0x01
    1d50:	9c 01       	movw	r18, r24
    1d52:	ec 81       	ldd	r30, Y+4	; 0x04
    1d54:	fd 81       	ldd	r31, Y+5	; 0x05
    1d56:	82 81       	ldd	r24, Z+2	; 0x02
    1d58:	93 81       	ldd	r25, Z+3	; 0x03
    1d5a:	28 17       	cp	r18, r24
    1d5c:	39 07       	cpc	r19, r25
    1d5e:	09 f0       	breq	.+2      	; 0x1d62 <sched_schedule+0x78>
    1d60:	4d c0       	rjmp	.+154    	; 0x1dfc <sched_schedule+0x112>
    {
        // Переключаем cписок на следующий за текущим процесс
#ifdef CONFIG_MP
        spin_lock( &sched->lock );
#endif // CONFIG_MP
        xlist_switch( sched->ready, ((gitem_t *)current_proc)->group->prio );
    1d62:	ec 81       	ldd	r30, Y+4	; 0x04
    1d64:	fd 81       	ldd	r31, Y+5	; 0x05
    1d66:	82 81       	ldd	r24, Z+2	; 0x02
    1d68:	93 81       	ldd	r25, Z+3	; 0x03
    1d6a:	ea 81       	ldd	r30, Y+2	; 0x02
    1d6c:	fb 81       	ldd	r31, Y+3	; 0x03
    1d6e:	04 80       	ldd	r0, Z+4	; 0x04
    1d70:	f5 81       	ldd	r31, Z+5	; 0x05
    1d72:	e0 2d       	mov	r30, r0
    1d74:	22 81       	ldd	r18, Z+2	; 0x02
    1d76:	62 2f       	mov	r22, r18
    1d78:	0e 94 3a 11 	call	0x2274	; 0x2274 <xlist_switch>
#ifdef CONFIG_MP
        spin_unlock( &sched->lock );
#endif // CONFIG_MP
        //Проверяем, не истек ли квант времени процесса
        if( current_proc->timer > (timer_t)1 )current_proc->timer--;// Не истек, уменьшаем таймер
    1d7c:	ea 81       	ldd	r30, Y+2	; 0x02
    1d7e:	fb 81       	ldd	r31, Y+3	; 0x03
    1d80:	80 a1       	ldd	r24, Z+32	; 0x20
    1d82:	91 a1       	ldd	r25, Z+33	; 0x21
    1d84:	82 30       	cpi	r24, 0x02	; 2
    1d86:	91 05       	cpc	r25, r1
    1d88:	50 f0       	brcs	.+20     	; 0x1d9e <sched_schedule+0xb4>
    1d8a:	ea 81       	ldd	r30, Y+2	; 0x02
    1d8c:	fb 81       	ldd	r31, Y+3	; 0x03
    1d8e:	80 a1       	ldd	r24, Z+32	; 0x20
    1d90:	91 a1       	ldd	r25, Z+33	; 0x21
    1d92:	01 97       	sbiw	r24, 0x01	; 1
    1d94:	ea 81       	ldd	r30, Y+2	; 0x02
    1d96:	fb 81       	ldd	r31, Y+3	; 0x03
    1d98:	91 a3       	std	Z+33, r25	; 0x21
    1d9a:	80 a3       	std	Z+32, r24	; 0x20
    1d9c:	2f c0       	rjmp	.+94     	; 0x1dfc <sched_schedule+0x112>
        {
            // Истек, вырезаем процесс из списка
#ifdef CONFIG_MP
            spin_lock( &sched->lock );
#endif // CONFIG_MP
            gitem_fast_cut( (gitem_t *)current_proc );
    1d9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1da0:	9b 81       	ldd	r25, Y+3	; 0x03
    1da2:	0e 94 48 07 	call	0xe90	; 0xe90 <gitem_fast_cut>
            // Обновили статистику после удаления процесса из списка ready
            stat_dec( current_proc, (stat_t *)kernel.stat + current_proc->core_id );
#endif // CONFIG_USE_ALB
#endif // CONFIG_MP
            // А что за процесс собственно?
            flag_t flags = current_proc->flags;
    1da6:	ea 81       	ldd	r30, Y+2	; 0x02
    1da8:	fb 81       	ldd	r31, Y+3	; 0x03
    1daa:	83 85       	ldd	r24, Z+11	; 0x0b
    1dac:	89 83       	std	Y+1, r24	; 0x01
            if(
                (!(flags & PROC_FLG_RT))
    1dae:	89 81       	ldd	r24, Y+1	; 0x01
    1db0:	88 2f       	mov	r24, r24
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	81 70       	andi	r24, 0x01	; 1
    1db6:	90 70       	andi	r25, 0x00	; 0
            stat_dec( current_proc, (stat_t *)kernel.stat + current_proc->core_id );
#endif // CONFIG_USE_ALB
#endif // CONFIG_MP
            // А что за процесс собственно?
            flag_t flags = current_proc->flags;
            if(
    1db8:	00 97       	sbiw	r24, 0x00	; 0
    1dba:	91 f4       	brne	.+36     	; 0x1de0 <sched_schedule+0xf6>
                ||(flags & PROC_FLG_HOLD)
#endif // CONFIG_HARD_RT
            )
            {
                //Процесс общего назначения, либо он удерживает общий ресурс, сбрасываем таймер и переносим в очередь expired
                current_proc->timer = current_proc->time_quant;
    1dbc:	ea 81       	ldd	r30, Y+2	; 0x02
    1dbe:	fb 81       	ldd	r31, Y+3	; 0x03
    1dc0:	86 8d       	ldd	r24, Z+30	; 0x1e
    1dc2:	97 8d       	ldd	r25, Z+31	; 0x1f
    1dc4:	ea 81       	ldd	r30, Y+2	; 0x02
    1dc6:	fb 81       	ldd	r31, Y+3	; 0x03
    1dc8:	91 a3       	std	Z+33, r25	; 0x21
    1dca:	80 a3       	std	Z+32, r24	; 0x20
#else // CONFIG_MP CONFIG_USE_ALB
                // Тупо переносим процесс в список expired
#ifdef CONFIG_MP
                spin_lock( &sched->lock );
#endif // CONFIG_MP
                gitem_insert( (gitem_t *)current_proc, sched->expired );
    1dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dce:	9b 81       	ldd	r25, Y+3	; 0x03
    1dd0:	ec 81       	ldd	r30, Y+4	; 0x04
    1dd2:	fd 81       	ldd	r31, Y+5	; 0x05
    1dd4:	24 81       	ldd	r18, Z+4	; 0x04
    1dd6:	35 81       	ldd	r19, Z+5	; 0x05
    1dd8:	b9 01       	movw	r22, r18
    1dda:	0e 94 71 06 	call	0xce2	; 0xce2 <gitem_insert>
    1dde:	0e c0       	rjmp	.+28     	; 0x1dfc <sched_schedule+0x112>
                spin_lock( &kernel.stat_lock );
                stat_dec( current_proc, (stat_t *)kernel.stat + current_proc->core_id );
#endif // nCONFIG_USE_ALB
                spin_unlock( &kernel.stat_lock );
#endif // CONFIG_MP
                ((gitem_t *)current_proc)->group->link = (void *)0;// Просто вырезали из списка, как в gitem_cut
    1de0:	ea 81       	ldd	r30, Y+2	; 0x02
    1de2:	fb 81       	ldd	r31, Y+3	; 0x03
    1de4:	04 80       	ldd	r0, Z+4	; 0x04
    1de6:	f5 81       	ldd	r31, Z+5	; 0x05
    1de8:	e0 2d       	mov	r30, r0
    1dea:	11 82       	std	Z+1, r1	; 0x01
    1dec:	10 82       	st	Z, r1
                current_proc->flags &= ~PROC_FLG_RUN;
    1dee:	ea 81       	ldd	r30, Y+2	; 0x02
    1df0:	fb 81       	ldd	r31, Y+3	; 0x03
    1df2:	83 85       	ldd	r24, Z+11	; 0x0b
    1df4:	8d 7f       	andi	r24, 0xFD	; 253
    1df6:	ea 81       	ldd	r30, Y+2	; 0x02
    1df8:	fb 81       	ldd	r31, Y+3	; 0x03
    1dfa:	83 87       	std	Z+11, r24	; 0x0b
#ifdef CONFIG_MP
    //Текущий процесс более не нужен, освобождаем его блокировку
    spin_unlock( &current_proc->lock );
    spin_lock( &sched->lock );
#endif // CONFIG_MP
    _sched_list_switch( sched );
    1dfc:	8c 81       	ldd	r24, Y+4	; 0x04
    1dfe:	9d 81       	ldd	r25, Y+5	; 0x05
    1e00:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <_sched_list_switch>
    // Изменять указатель будем при захваченной блокировке,
    // чтобы процессы на других процессорах не прочитали неизвестно что.
    current_proc = (proc_t *)xlist_head( sched->ready ); // Вытесняющая многозадачность же!
    1e04:	ec 81       	ldd	r30, Y+4	; 0x04
    1e06:	fd 81       	ldd	r31, Y+5	; 0x05
    1e08:	82 81       	ldd	r24, Z+2	; 0x02
    1e0a:	93 81       	ldd	r25, Z+3	; 0x03
    1e0c:	0e 94 0e 11 	call	0x221c	; 0x221c <xlist_head>
    1e10:	9b 83       	std	Y+3, r25	; 0x03
    1e12:	8a 83       	std	Y+2, r24	; 0x02
    sched->current_proc = current_proc;
    1e14:	ec 81       	ldd	r30, Y+4	; 0x04
    1e16:	fd 81       	ldd	r31, Y+5	; 0x05
    1e18:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e1c:	91 83       	std	Z+1, r25	; 0x01
    1e1e:	80 83       	st	Z, r24
#ifdef CONFIG_MP
    spin_unlock( &sched->lock );
    spin_lock( &current_proc->lock );
#endif // CONFIG_MP
    //Хук "восстановление контекста"
    if( current_proc->rs_hook )current_proc->rs_hook( current_proc->arg );
    1e20:	ea 81       	ldd	r30, Y+2	; 0x02
    1e22:	fb 81       	ldd	r31, Y+3	; 0x03
    1e24:	86 a1       	ldd	r24, Z+38	; 0x26
    1e26:	97 a1       	ldd	r25, Z+39	; 0x27
    1e28:	00 97       	sbiw	r24, 0x00	; 0
    1e2a:	51 f0       	breq	.+20     	; 0x1e40 <sched_schedule+0x156>
    1e2c:	ea 81       	ldd	r30, Y+2	; 0x02
    1e2e:	fb 81       	ldd	r31, Y+3	; 0x03
    1e30:	26 a1       	ldd	r18, Z+38	; 0x26
    1e32:	37 a1       	ldd	r19, Z+39	; 0x27
    1e34:	ea 81       	ldd	r30, Y+2	; 0x02
    1e36:	fb 81       	ldd	r31, Y+3	; 0x03
    1e38:	80 a5       	ldd	r24, Z+40	; 0x28
    1e3a:	91 a5       	ldd	r25, Z+41	; 0x29
    1e3c:	f9 01       	movw	r30, r18
    1e3e:	09 95       	icall
#ifdef CONFIG_MP
    stack_t * ret_sp = current_proc->spointer;
    spin_unlock( &current_proc->lock );
    return ret_sp;
#else
    return current_proc->spointer;
    1e40:	ea 81       	ldd	r30, Y+2	; 0x02
    1e42:	fb 81       	ldd	r31, Y+3	; 0x03
    1e44:	84 a5       	ldd	r24, Z+44	; 0x2c
    1e46:	95 a5       	ldd	r25, Z+45	; 0x2d
#endif // CONFIG_MP
}
    1e48:	27 96       	adiw	r28, 0x07	; 7
    1e4a:	0f b6       	in	r0, 0x3f	; 63
    1e4c:	f8 94       	cli
    1e4e:	de bf       	out	0x3e, r29	; 62
    1e50:	0f be       	out	0x3f, r0	; 63
    1e52:	cd bf       	out	0x3d, r28	; 61
    1e54:	cf 91       	pop	r28
    1e56:	df 91       	pop	r29
    1e58:	08 95       	ret

00001e5a <sched_reschedule>:
//----------------------------------------------------------------------------------------
// Функция перепланирования, переключает процессы в обработчике прерывания resched
stack_t * sched_reschedule( stack_t * current_sp )
{
    1e5a:	df 93       	push	r29
    1e5c:	cf 93       	push	r28
    1e5e:	00 d0       	rcall	.+0      	; 0x1e60 <sched_reschedule+0x6>
    1e60:	00 d0       	rcall	.+0      	; 0x1e62 <sched_reschedule+0x8>
    1e62:	00 d0       	rcall	.+0      	; 0x1e64 <sched_reschedule+0xa>
    1e64:	cd b7       	in	r28, 0x3d	; 61
    1e66:	de b7       	in	r29, 0x3e	; 62
    1e68:	9e 83       	std	Y+6, r25	; 0x06
    1e6a:	8d 83       	std	Y+5, r24	; 0x05
#ifdef CONFIG_MP
    sched_t * sched = (sched_t *)kernel.sched + current_core();
#else
    sched_t * sched = (sched_t *)&kernel.sched;
    1e6c:	8f e9       	ldi	r24, 0x9F	; 159
    1e6e:	91 e0       	ldi	r25, 0x01	; 1
    1e70:	9c 83       	std	Y+4, r25	; 0x04
    1e72:	8b 83       	std	Y+3, r24	; 0x03
#endif // CONFIG_MP
    // Меняем только с локального процессора, блокировку sched->lock можно не захватывать!
    proc_t * current_proc = sched->current_proc;
    1e74:	eb 81       	ldd	r30, Y+3	; 0x03
    1e76:	fc 81       	ldd	r31, Y+4	; 0x04
    1e78:	80 81       	ld	r24, Z
    1e7a:	91 81       	ldd	r25, Z+1	; 0x01
    1e7c:	9a 83       	std	Y+2, r25	; 0x02
    1e7e:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    // А вот эту блокировку обязательно надо захватить!
    spin_lock( &current_proc->lock );
#endif // CONFIG_MP
    // Сохранение указателя стека
    current_proc->spointer = current_sp;
    1e80:	e9 81       	ldd	r30, Y+1	; 0x01
    1e82:	fa 81       	ldd	r31, Y+2	; 0x02
    1e84:	8d 81       	ldd	r24, Y+5	; 0x05
    1e86:	9e 81       	ldd	r25, Y+6	; 0x06
    1e88:	95 a7       	std	Z+45, r25	; 0x2d
    1e8a:	84 a7       	std	Z+44, r24	; 0x2c
    // Хук "сохранение контекста"
    if( current_proc->sv_hook )current_proc->sv_hook( current_proc->arg );
    1e8c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e8e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e90:	84 a1       	ldd	r24, Z+36	; 0x24
    1e92:	95 a1       	ldd	r25, Z+37	; 0x25
    1e94:	00 97       	sbiw	r24, 0x00	; 0
    1e96:	51 f0       	breq	.+20     	; 0x1eac <sched_reschedule+0x52>
    1e98:	e9 81       	ldd	r30, Y+1	; 0x01
    1e9a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e9c:	24 a1       	ldd	r18, Z+36	; 0x24
    1e9e:	35 a1       	ldd	r19, Z+37	; 0x25
    1ea0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ea2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ea4:	80 a5       	ldd	r24, Z+40	; 0x28
    1ea6:	91 a5       	ldd	r25, Z+41	; 0x29
    1ea8:	f9 01       	movw	r30, r18
    1eaa:	09 95       	icall
#ifdef CONFIG_MP
    spin_unlock( &current_proc->lock );
    spin_lock( &sched->lock );
#endif // CONFIG_MP
    _sched_list_switch( sched );
    1eac:	8b 81       	ldd	r24, Y+3	; 0x03
    1eae:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb0:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <_sched_list_switch>
    current_proc = (proc_t *)xlist_head( sched->ready ); // Вытесняющая многозадачность же!
    1eb4:	eb 81       	ldd	r30, Y+3	; 0x03
    1eb6:	fc 81       	ldd	r31, Y+4	; 0x04
    1eb8:	82 81       	ldd	r24, Z+2	; 0x02
    1eba:	93 81       	ldd	r25, Z+3	; 0x03
    1ebc:	0e 94 0e 11 	call	0x221c	; 0x221c <xlist_head>
    1ec0:	9a 83       	std	Y+2, r25	; 0x02
    1ec2:	89 83       	std	Y+1, r24	; 0x01
    sched->current_proc = current_proc;
    1ec4:	eb 81       	ldd	r30, Y+3	; 0x03
    1ec6:	fc 81       	ldd	r31, Y+4	; 0x04
    1ec8:	89 81       	ldd	r24, Y+1	; 0x01
    1eca:	9a 81       	ldd	r25, Y+2	; 0x02
    1ecc:	91 83       	std	Z+1, r25	; 0x01
    1ece:	80 83       	st	Z, r24

#ifdef CONFIG_MP
    spin_lock(&current_proc->lock);
#endif // CONFIG_MP
    //Хук "восстановление контекста"
    if( current_proc->rs_hook )current_proc->rs_hook( current_proc->arg );
    1ed0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ed2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ed4:	86 a1       	ldd	r24, Z+38	; 0x26
    1ed6:	97 a1       	ldd	r25, Z+39	; 0x27
    1ed8:	00 97       	sbiw	r24, 0x00	; 0
    1eda:	51 f0       	breq	.+20     	; 0x1ef0 <sched_reschedule+0x96>
    1edc:	e9 81       	ldd	r30, Y+1	; 0x01
    1ede:	fa 81       	ldd	r31, Y+2	; 0x02
    1ee0:	26 a1       	ldd	r18, Z+38	; 0x26
    1ee2:	37 a1       	ldd	r19, Z+39	; 0x27
    1ee4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ee6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ee8:	80 a5       	ldd	r24, Z+40	; 0x28
    1eea:	91 a5       	ldd	r25, Z+41	; 0x29
    1eec:	f9 01       	movw	r30, r18
    1eee:	09 95       	icall
#ifdef CONFIG_MP
    stack_t * ret_sp = current_proc->spointer;
    spin_unlock( &current_proc->lock );
    return ret_sp;
#else
    return current_proc->spointer;
    1ef0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ef2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ef4:	84 a5       	ldd	r24, Z+44	; 0x2c
    1ef6:	95 a5       	ldd	r25, Z+45	; 0x2d
#endif // CONFIG_MP
}
    1ef8:	26 96       	adiw	r28, 0x06	; 6
    1efa:	0f b6       	in	r0, 0x3f	; 63
    1efc:	f8 94       	cli
    1efe:	de bf       	out	0x3e, r29	; 62
    1f00:	0f be       	out	0x3f, r0	; 63
    1f02:	cd bf       	out	0x3d, r28	; 61
    1f04:	cf 91       	pop	r28
    1f06:	df 91       	pop	r29
    1f08:	08 95       	ret

00001f0a <sem_init_isr>:
*****************************************************************************************/
#include "../include/bugurt.h"

// Инициализация
void sem_init_isr( sem_t * sem, count_t count )
{
    1f0a:	df 93       	push	r29
    1f0c:	cf 93       	push	r28
    1f0e:	00 d0       	rcall	.+0      	; 0x1f10 <sem_init_isr+0x6>
    1f10:	00 d0       	rcall	.+0      	; 0x1f12 <sem_init_isr+0x8>
    1f12:	cd b7       	in	r28, 0x3d	; 61
    1f14:	de b7       	in	r29, 0x3e	; 62
    1f16:	9a 83       	std	Y+2, r25	; 0x02
    1f18:	89 83       	std	Y+1, r24	; 0x01
    1f1a:	7c 83       	std	Y+4, r23	; 0x04
    1f1c:	6b 83       	std	Y+3, r22	; 0x03
    xlist_init( (xlist_t *)sem );
    1f1e:	89 81       	ldd	r24, Y+1	; 0x01
    1f20:	9a 81       	ldd	r25, Y+2	; 0x02
    1f22:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <xlist_init>
    sem->counter = count;
    1f26:	e9 81       	ldd	r30, Y+1	; 0x01
    1f28:	fa 81       	ldd	r31, Y+2	; 0x02
    1f2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f2e:	92 8b       	std	Z+18, r25	; 0x12
    1f30:	81 8b       	std	Z+17, r24	; 0x11
}
    1f32:	0f 90       	pop	r0
    1f34:	0f 90       	pop	r0
    1f36:	0f 90       	pop	r0
    1f38:	0f 90       	pop	r0
    1f3a:	cf 91       	pop	r28
    1f3c:	df 91       	pop	r29
    1f3e:	08 95       	ret

00001f40 <_sem_lock>:

// То же, для внутреннего использования
bool_t _sem_lock( sem_t * sem )
{
    1f40:	df 93       	push	r29
    1f42:	cf 93       	push	r28
    1f44:	00 d0       	rcall	.+0      	; 0x1f46 <_sem_lock+0x6>
    1f46:	00 d0       	rcall	.+0      	; 0x1f48 <_sem_lock+0x8>
    1f48:	0f 92       	push	r0
    1f4a:	cd b7       	in	r28, 0x3d	; 61
    1f4c:	de b7       	in	r29, 0x3e	; 62
    1f4e:	9d 83       	std	Y+5, r25	; 0x05
    1f50:	8c 83       	std	Y+4, r24	; 0x04

    bool_t ret = 0;
    1f52:	1b 82       	std	Y+3, r1	; 0x03
    if( sem->counter != 0 )
    1f54:	ec 81       	ldd	r30, Y+4	; 0x04
    1f56:	fd 81       	ldd	r31, Y+5	; 0x05
    1f58:	81 89       	ldd	r24, Z+17	; 0x11
    1f5a:	92 89       	ldd	r25, Z+18	; 0x12
    1f5c:	00 97       	sbiw	r24, 0x00	; 0
    1f5e:	61 f0       	breq	.+24     	; 0x1f78 <_sem_lock+0x38>
    {
        sem->counter--;
    1f60:	ec 81       	ldd	r30, Y+4	; 0x04
    1f62:	fd 81       	ldd	r31, Y+5	; 0x05
    1f64:	81 89       	ldd	r24, Z+17	; 0x11
    1f66:	92 89       	ldd	r25, Z+18	; 0x12
    1f68:	01 97       	sbiw	r24, 0x01	; 1
    1f6a:	ec 81       	ldd	r30, Y+4	; 0x04
    1f6c:	fd 81       	ldd	r31, Y+5	; 0x05
    1f6e:	92 8b       	std	Z+18, r25	; 0x12
    1f70:	81 8b       	std	Z+17, r24	; 0x11
#ifdef CONFIG_MP
        spin_unlock( &sem->lock );// Освобождение блокировки семафора
#endif //CONFIG_MP
        ret = (bool_t)1;
    1f72:	81 e0       	ldi	r24, 0x01	; 1
    1f74:	8b 83       	std	Y+3, r24	; 0x03
    1f76:	16 c0       	rjmp	.+44     	; 0x1fa4 <_sem_lock+0x64>
    }
    else
    {
        proc_t * proc = current_proc();
    1f78:	0e 94 cc 00 	call	0x198	; 0x198 <current_proc>
    1f7c:	9a 83       	std	Y+2, r25	; 0x02
    1f7e:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
        spin_lock( &proc->lock );// Захват блокировки процесса
#endif //CONFIG_MP
        proc->flags |= PROC_FLG_QUEUE;
    1f80:	e9 81       	ldd	r30, Y+1	; 0x01
    1f82:	fa 81       	ldd	r31, Y+2	; 0x02
    1f84:	83 85       	ldd	r24, Z+11	; 0x0b
    1f86:	88 60       	ori	r24, 0x08	; 8
    1f88:	e9 81       	ldd	r30, Y+1	; 0x01
    1f8a:	fa 81       	ldd	r31, Y+2	; 0x02
    1f8c:	83 87       	std	Z+11, r24	; 0x0b
        _proc_stop( proc );
    1f8e:	89 81       	ldd	r24, Y+1	; 0x01
    1f90:	9a 81       	ldd	r25, Y+2	; 0x02
    1f92:	0e 94 96 0c 	call	0x192c	; 0x192c <_proc_stop>
        gitem_insert( (gitem_t *)proc, (xlist_t *)sem );
    1f96:	89 81       	ldd	r24, Y+1	; 0x01
    1f98:	9a 81       	ldd	r25, Y+2	; 0x02
    1f9a:	2c 81       	ldd	r18, Y+4	; 0x04
    1f9c:	3d 81       	ldd	r19, Y+5	; 0x05
    1f9e:	b9 01       	movw	r22, r18
    1fa0:	0e 94 71 06 	call	0xce2	; 0xce2 <gitem_insert>
#ifdef CONFIG_MP
        spin_unlock( &proc->lock );// Освобождение блокировки процесса
#endif //CONFIG_MP
    }
    return ret;
    1fa4:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1fa6:	0f 90       	pop	r0
    1fa8:	0f 90       	pop	r0
    1faa:	0f 90       	pop	r0
    1fac:	0f 90       	pop	r0
    1fae:	0f 90       	pop	r0
    1fb0:	cf 91       	pop	r28
    1fb2:	df 91       	pop	r29
    1fb4:	08 95       	ret

00001fb6 <_sem_unlock>:

void _sem_unlock( sem_t * sem )
{
    1fb6:	df 93       	push	r29
    1fb8:	cf 93       	push	r28
    1fba:	00 d0       	rcall	.+0      	; 0x1fbc <_sem_unlock+0x6>
    1fbc:	00 d0       	rcall	.+0      	; 0x1fbe <_sem_unlock+0x8>
    1fbe:	cd b7       	in	r28, 0x3d	; 61
    1fc0:	de b7       	in	r29, 0x3e	; 62
    1fc2:	9c 83       	std	Y+4, r25	; 0x04
    1fc4:	8b 83       	std	Y+3, r24	; 0x03
    if( ((xlist_t *)sem)->index == (index_t)0  )
    1fc6:	eb 81       	ldd	r30, Y+3	; 0x03
    1fc8:	fc 81       	ldd	r31, Y+4	; 0x04
    1fca:	80 89       	ldd	r24, Z+16	; 0x10
    1fcc:	88 23       	and	r24, r24
    1fce:	51 f4       	brne	.+20     	; 0x1fe4 <_sem_unlock+0x2e>
    {
        sem->counter++;
    1fd0:	eb 81       	ldd	r30, Y+3	; 0x03
    1fd2:	fc 81       	ldd	r31, Y+4	; 0x04
    1fd4:	81 89       	ldd	r24, Z+17	; 0x11
    1fd6:	92 89       	ldd	r25, Z+18	; 0x12
    1fd8:	01 96       	adiw	r24, 0x01	; 1
    1fda:	eb 81       	ldd	r30, Y+3	; 0x03
    1fdc:	fc 81       	ldd	r31, Y+4	; 0x04
    1fde:	92 8b       	std	Z+18, r25	; 0x12
    1fe0:	81 8b       	std	Z+17, r24	; 0x11
    1fe2:	15 c0       	rjmp	.+42     	; 0x200e <_sem_unlock+0x58>
#ifdef CONFIG_MP
        spin_unlock( &sem->lock );
#endif //CONFIG_MP
        return;
    }
    proc_t * proc = (proc_t *)xlist_head((xlist_t *)sem);
    1fe4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe8:	0e 94 0e 11 	call	0x221c	; 0x221c <xlist_head>
    1fec:	9a 83       	std	Y+2, r25	; 0x02
    1fee:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );// Захват спин-блокировки процесса
#endif //CONFIG_MP
    proc->flags &= ~PROC_FLG_QUEUE;
    1ff0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ff2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ff4:	83 85       	ldd	r24, Z+11	; 0x0b
    1ff6:	87 7f       	andi	r24, 0xF7	; 247
    1ff8:	e9 81       	ldd	r30, Y+1	; 0x01
    1ffa:	fa 81       	ldd	r31, Y+2	; 0x02
    1ffc:	83 87       	std	Z+11, r24	; 0x0b
    gitem_cut( (gitem_t *)proc );
    1ffe:	89 81       	ldd	r24, Y+1	; 0x01
    2000:	9a 81       	ldd	r25, Y+2	; 0x02
    2002:	0e 94 ce 07 	call	0xf9c	; 0xf9c <gitem_cut>
    _proc_run( proc );
    2006:	89 81       	ldd	r24, Y+1	; 0x01
    2008:	9a 81       	ldd	r25, Y+2	; 0x02
    200a:	0e 94 0f 0c 	call	0x181e	; 0x181e <_proc_run>
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );// Освобождение спин-блокировки процесса
#endif //CONFIG_MP
}
    200e:	0f 90       	pop	r0
    2010:	0f 90       	pop	r0
    2012:	0f 90       	pop	r0
    2014:	0f 90       	pop	r0
    2016:	cf 91       	pop	r28
    2018:	df 91       	pop	r29
    201a:	08 95       	ret

0000201c <sig_init_isr>:
*****************************************************************************************/
#include "../include/bugurt.h"
//========================================================================================
// Инициация
void sig_init_isr( sig_t * sig )
{
    201c:	df 93       	push	r29
    201e:	cf 93       	push	r28
    2020:	00 d0       	rcall	.+0      	; 0x2022 <sig_init_isr+0x6>
    2022:	cd b7       	in	r28, 0x3d	; 61
    2024:	de b7       	in	r29, 0x3e	; 62
    2026:	9a 83       	std	Y+2, r25	; 0x02
    2028:	89 83       	std	Y+1, r24	; 0x01
    {
        xlist_init( (xlist_t *)sig->sig_list + i );
        stat_init( (stat_t *)sig->sig_stat + i );
    }
#else
    xlist_init( (xlist_t *)sig );
    202a:	89 81       	ldd	r24, Y+1	; 0x01
    202c:	9a 81       	ldd	r25, Y+2	; 0x02
    202e:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <xlist_init>
#endif
}
    2032:	0f 90       	pop	r0
    2034:	0f 90       	pop	r0
    2036:	cf 91       	pop	r28
    2038:	df 91       	pop	r29
    203a:	08 95       	ret

0000203c <sig_wait_stage_1_isr>:
//========================================================================================
// Это выполнится при постановке процесса в список ожидания сигнала
void sig_wait_stage_1_isr( sig_t * sig )
{
    203c:	df 93       	push	r29
    203e:	cf 93       	push	r28
    2040:	00 d0       	rcall	.+0      	; 0x2042 <sig_wait_stage_1_isr+0x6>
    2042:	00 d0       	rcall	.+0      	; 0x2044 <sig_wait_stage_1_isr+0x8>
    2044:	cd b7       	in	r28, 0x3d	; 61
    2046:	de b7       	in	r29, 0x3e	; 62
    2048:	9c 83       	std	Y+4, r25	; 0x04
    204a:	8b 83       	std	Y+3, r24	; 0x03
#ifdef CONFIG_MP
    spin_lock( &sig->lock );
#endif // CONFIG_MP
    proc_t * proc = current_proc();
    204c:	0e 94 cc 00 	call	0x198	; 0x198 <current_proc>
    2050:	9a 83       	std	Y+2, r25	; 0x02
    2052:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    // Останавливаем процесс
    _proc_stop(proc);
    2054:	89 81       	ldd	r24, Y+1	; 0x01
    2056:	9a 81       	ldd	r25, Y+2	; 0x02
    2058:	0e 94 96 0c 	call	0x192c	; 0x192c <_proc_stop>
    proc->flags |= PROC_FLG_WAIT;
    205c:	e9 81       	ldd	r30, Y+1	; 0x01
    205e:	fa 81       	ldd	r31, Y+2	; 0x02
    2060:	83 85       	ldd	r24, Z+11	; 0x0b
    2062:	80 61       	ori	r24, 0x10	; 16
    2064:	e9 81       	ldd	r30, Y+1	; 0x01
    2066:	fa 81       	ldd	r31, Y+2	; 0x02
    2068:	83 87       	std	Z+11, r24	; 0x0b
        stat_inc( proc, (stat_t *)sig->sig_stat + sig_core );
    }
    spin_unlock( &proc->lock );
    spin_unlock( &sig->lock );
#else
    gitem_insert_group( (gitem_t *)proc, (xlist_t *)sig );
    206a:	89 81       	ldd	r24, Y+1	; 0x01
    206c:	9a 81       	ldd	r25, Y+2	; 0x02
    206e:	2b 81       	ldd	r18, Y+3	; 0x03
    2070:	3c 81       	ldd	r19, Y+4	; 0x04
    2072:	b9 01       	movw	r22, r18
    2074:	0e 94 cd 06 	call	0xd9a	; 0xd9a <gitem_insert_group>
#endif //CONFIG_MP
}
    2078:	0f 90       	pop	r0
    207a:	0f 90       	pop	r0
    207c:	0f 90       	pop	r0
    207e:	0f 90       	pop	r0
    2080:	cf 91       	pop	r28
    2082:	df 91       	pop	r29
    2084:	08 95       	ret

00002086 <sig_signal_isr>:
    enable_interrupts();
}
//========================================================================================
// Тоже самое что и предыдущие, олько для вызова из обработчиков прерываний и из критических секций
void sig_signal_isr( sig_t * sig )
{
    2086:	df 93       	push	r29
    2088:	cf 93       	push	r28
    208a:	00 d0       	rcall	.+0      	; 0x208c <sig_signal_isr+0x6>
    208c:	00 d0       	rcall	.+0      	; 0x208e <sig_signal_isr+0x8>
    208e:	cd b7       	in	r28, 0x3d	; 61
    2090:	de b7       	in	r29, 0x3e	; 62
    2092:	9c 83       	std	Y+4, r25	; 0x04
    2094:	8b 83       	std	Y+3, r24	; 0x03
    }
    resched(core);// Перепланировка
    spin_unlock( &proc->lock );// Освобождение блокировки процесса
    spin_unlock( &sig->lock );// Освобождение блокировки сигнала
#else
    if( ((xlist_t *)sig)->index == (index_t)0 )return;
    2096:	eb 81       	ldd	r30, Y+3	; 0x03
    2098:	fc 81       	ldd	r31, Y+4	; 0x04
    209a:	80 89       	ldd	r24, Z+16	; 0x10
    209c:	88 23       	and	r24, r24
    209e:	a9 f0       	breq	.+42     	; 0x20ca <sig_signal_isr+0x44>
    proc_t * proc = (proc_t *)xlist_head( (xlist_t *)sig );
    20a0:	8b 81       	ldd	r24, Y+3	; 0x03
    20a2:	9c 81       	ldd	r25, Y+4	; 0x04
    20a4:	0e 94 0e 11 	call	0x221c	; 0x221c <xlist_head>
    20a8:	9a 83       	std	Y+2, r25	; 0x02
    20aa:	89 83       	std	Y+1, r24	; 0x01
    gitem_fast_cut( (gitem_t *)proc );
    20ac:	89 81       	ldd	r24, Y+1	; 0x01
    20ae:	9a 81       	ldd	r25, Y+2	; 0x02
    20b0:	0e 94 48 07 	call	0xe90	; 0xe90 <gitem_fast_cut>
    gitem_insert( (gitem_t *)proc, kernel.sched.ready );
    20b4:	89 81       	ldd	r24, Y+1	; 0x01
    20b6:	9a 81       	ldd	r25, Y+2	; 0x02
    20b8:	20 91 a1 01 	lds	r18, 0x01A1
    20bc:	30 91 a2 01 	lds	r19, 0x01A2
    20c0:	b9 01       	movw	r22, r18
    20c2:	0e 94 71 06 	call	0xce2	; 0xce2 <gitem_insert>
    resched();
    20c6:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
#endif //CONFIG_MP
}
    20ca:	0f 90       	pop	r0
    20cc:	0f 90       	pop	r0
    20ce:	0f 90       	pop	r0
    20d0:	0f 90       	pop	r0
    20d2:	cf 91       	pop	r28
    20d4:	df 91       	pop	r29
    20d6:	08 95       	ret

000020d8 <sig_broadcast_isr>:
//----------------------------------------------------------------------------------------
void sig_broadcast_isr( sig_t * sig )
{
    20d8:	df 93       	push	r29
    20da:	cf 93       	push	r28
    20dc:	00 d0       	rcall	.+0      	; 0x20de <sig_broadcast_isr+0x6>
    20de:	cd b7       	in	r28, 0x3d	; 61
    20e0:	de b7       	in	r29, 0x3e	; 62
    20e2:	9a 83       	std	Y+2, r25	; 0x02
    20e4:	89 83       	std	Y+1, r24	; 0x01

        resched(core);
    }
    spin_unlock( &sig->lock );
#else
    gitem_xlist_merge( (xlist_t *)sig, kernel.sched.ready );
    20e6:	20 91 a1 01 	lds	r18, 0x01A1
    20ea:	30 91 a2 01 	lds	r19, 0x01A2
    20ee:	89 81       	ldd	r24, Y+1	; 0x01
    20f0:	9a 81       	ldd	r25, Y+2	; 0x02
    20f2:	b9 01       	movw	r22, r18
    20f4:	0e 94 e5 07 	call	0xfca	; 0xfca <gitem_xlist_merge>
    resched();
    20f8:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
#endif //CONFIG_MP
}
    20fc:	0f 90       	pop	r0
    20fe:	0f 90       	pop	r0
    2100:	cf 91       	pop	r28
    2102:	df 91       	pop	r29
    2104:	08 95       	ret

00002106 <_clear_timer>:
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
//========================================================================================
void _clear_timer(timer_t * t)
{
    2106:	df 93       	push	r29
    2108:	cf 93       	push	r28
    210a:	00 d0       	rcall	.+0      	; 0x210c <_clear_timer+0x6>
    210c:	cd b7       	in	r28, 0x3d	; 61
    210e:	de b7       	in	r29, 0x3e	; 62
    2110:	9a 83       	std	Y+2, r25	; 0x02
    2112:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    core_id_t current_core = _enter_crit_sec();
    spin_lock( &kernel.timer_lock );
#else
    enter_crit_sec();
    2114:	0e 94 1b 06 	call	0xc36	; 0xc36 <enter_crit_sec>
#endif //CONFIG_MP
    *t = kernel.timer;
    2118:	80 91 f9 01 	lds	r24, 0x01F9
    211c:	90 91 fa 01 	lds	r25, 0x01FA
    2120:	e9 81       	ldd	r30, Y+1	; 0x01
    2122:	fa 81       	ldd	r31, Y+2	; 0x02
    2124:	91 83       	std	Z+1, r25	; 0x01
    2126:	80 83       	st	Z, r24
#ifdef CONFIG_MP
    spin_unlock( &kernel.timer_lock );
    _exit_crit_sec(current_core);
#else
    exit_crit_sec();
    2128:	0e 94 2d 06 	call	0xc5a	; 0xc5a <exit_crit_sec>
#endif //CONFIG_MP
}
    212c:	0f 90       	pop	r0
    212e:	0f 90       	pop	r0
    2130:	cf 91       	pop	r28
    2132:	df 91       	pop	r29
    2134:	08 95       	ret

00002136 <_timer>:
//----------------------------------------------------------------------------------------
timer_t _timer(timer_t t)
{
    2136:	df 93       	push	r29
    2138:	cf 93       	push	r28
    213a:	00 d0       	rcall	.+0      	; 0x213c <_timer+0x6>
    213c:	00 d0       	rcall	.+0      	; 0x213e <_timer+0x8>
    213e:	cd b7       	in	r28, 0x3d	; 61
    2140:	de b7       	in	r29, 0x3e	; 62
    2142:	9c 83       	std	Y+4, r25	; 0x04
    2144:	8b 83       	std	Y+3, r24	; 0x03
    timer_t ret;
#ifdef CONFIG_MP
    core_id_t current_core = _enter_crit_sec();
    spin_lock( &kernel.timer_lock );
#else
    enter_crit_sec();
    2146:	0e 94 1b 06 	call	0xc36	; 0xc36 <enter_crit_sec>
#endif //CONFIG_MP
    ret = kernel.timer - t;
    214a:	20 91 f9 01 	lds	r18, 0x01F9
    214e:	30 91 fa 01 	lds	r19, 0x01FA
    2152:	8b 81       	ldd	r24, Y+3	; 0x03
    2154:	9c 81       	ldd	r25, Y+4	; 0x04
    2156:	a9 01       	movw	r20, r18
    2158:	48 1b       	sub	r20, r24
    215a:	59 0b       	sbc	r21, r25
    215c:	ca 01       	movw	r24, r20
    215e:	9a 83       	std	Y+2, r25	; 0x02
    2160:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_unlock( &kernel.timer_lock );
    _exit_crit_sec(current_core);
#else
    exit_crit_sec();
    2162:	0e 94 2d 06 	call	0xc5a	; 0xc5a <exit_crit_sec>
#endif //CONFIG_MP
    return ret;
    2166:	89 81       	ldd	r24, Y+1	; 0x01
    2168:	9a 81       	ldd	r25, Y+2	; 0x02
}
    216a:	0f 90       	pop	r0
    216c:	0f 90       	pop	r0
    216e:	0f 90       	pop	r0
    2170:	0f 90       	pop	r0
    2172:	cf 91       	pop	r28
    2174:	df 91       	pop	r29
    2176:	08 95       	ret

00002178 <wait_time>:

//----------------------------------------------------------------------------------------
void wait_time(timer_t time)
{
    2178:	df 93       	push	r29
    217a:	cf 93       	push	r28
    217c:	00 d0       	rcall	.+0      	; 0x217e <wait_time+0x6>
    217e:	00 d0       	rcall	.+0      	; 0x2180 <wait_time+0x8>
    2180:	0f 92       	push	r0
    2182:	cd b7       	in	r28, 0x3d	; 61
    2184:	de b7       	in	r29, 0x3e	; 62
    2186:	9d 83       	std	Y+5, r25	; 0x05
    2188:	8c 83       	std	Y+4, r24	; 0x04
    timer_t tmr;
    bool_t roll=(bool_t)1;
    218a:	81 e0       	ldi	r24, 0x01	; 1
    218c:	89 83       	std	Y+1, r24	; 0x01
    CLEAR_TIMER(tmr);
    218e:	ce 01       	movw	r24, r28
    2190:	02 96       	adiw	r24, 0x02	; 2
    2192:	0e 94 83 10 	call	0x2106	; 0x2106 <_clear_timer>
    2196:	0d c0       	rjmp	.+26     	; 0x21b2 <wait_time+0x3a>
    while((bool_t)roll)
    {
        roll = (bool_t)( TIMER(tmr) < (timer_t)time );
    2198:	8a 81       	ldd	r24, Y+2	; 0x02
    219a:	9b 81       	ldd	r25, Y+3	; 0x03
    219c:	0e 94 9b 10 	call	0x2136	; 0x2136 <_timer>
    21a0:	9c 01       	movw	r18, r24
    21a2:	19 82       	std	Y+1, r1	; 0x01
    21a4:	8c 81       	ldd	r24, Y+4	; 0x04
    21a6:	9d 81       	ldd	r25, Y+5	; 0x05
    21a8:	28 17       	cp	r18, r24
    21aa:	39 07       	cpc	r19, r25
    21ac:	10 f4       	brcc	.+4      	; 0x21b2 <wait_time+0x3a>
    21ae:	81 e0       	ldi	r24, 0x01	; 1
    21b0:	89 83       	std	Y+1, r24	; 0x01
void wait_time(timer_t time)
{
    timer_t tmr;
    bool_t roll=(bool_t)1;
    CLEAR_TIMER(tmr);
    while((bool_t)roll)
    21b2:	89 81       	ldd	r24, Y+1	; 0x01
    21b4:	88 23       	and	r24, r24
    21b6:	81 f7       	brne	.-32     	; 0x2198 <wait_time+0x20>
    {
        roll = (bool_t)( TIMER(tmr) < (timer_t)time );
    }
}
    21b8:	0f 90       	pop	r0
    21ba:	0f 90       	pop	r0
    21bc:	0f 90       	pop	r0
    21be:	0f 90       	pop	r0
    21c0:	0f 90       	pop	r0
    21c2:	cf 91       	pop	r28
    21c4:	df 91       	pop	r29
    21c6:	08 95       	ret

000021c8 <xlist_init>:
**********************************************/
//Инициация
void xlist_init(
    xlist_t * xlist
)
{
    21c8:	df 93       	push	r29
    21ca:	cf 93       	push	r28
    21cc:	00 d0       	rcall	.+0      	; 0x21ce <xlist_init+0x6>
    21ce:	00 d0       	rcall	.+0      	; 0x21d0 <xlist_init+0x8>
    21d0:	cd b7       	in	r28, 0x3d	; 61
    21d2:	de b7       	in	r29, 0x3e	; 62
    21d4:	9c 83       	std	Y+4, r25	; 0x04
    21d6:	8b 83       	std	Y+3, r24	; 0x03
    count_t i;
    //список пуст
    xlist->index = (index_t)0;
    21d8:	eb 81       	ldd	r30, Y+3	; 0x03
    21da:	fc 81       	ldd	r31, Y+4	; 0x04
    21dc:	10 8a       	std	Z+16, r1	; 0x10
    //обнуляем указатели
    for( i = 0; i < BITS_IN_INDEX_T; i++ )xlist->item[i] = (item_t *)0;
    21de:	1a 82       	std	Y+2, r1	; 0x02
    21e0:	19 82       	std	Y+1, r1	; 0x01
    21e2:	10 c0       	rjmp	.+32     	; 0x2204 <xlist_init+0x3c>
    21e4:	89 81       	ldd	r24, Y+1	; 0x01
    21e6:	9a 81       	ldd	r25, Y+2	; 0x02
    21e8:	2b 81       	ldd	r18, Y+3	; 0x03
    21ea:	3c 81       	ldd	r19, Y+4	; 0x04
    21ec:	88 0f       	add	r24, r24
    21ee:	99 1f       	adc	r25, r25
    21f0:	f9 01       	movw	r30, r18
    21f2:	e8 0f       	add	r30, r24
    21f4:	f9 1f       	adc	r31, r25
    21f6:	11 82       	std	Z+1, r1	; 0x01
    21f8:	10 82       	st	Z, r1
    21fa:	89 81       	ldd	r24, Y+1	; 0x01
    21fc:	9a 81       	ldd	r25, Y+2	; 0x02
    21fe:	01 96       	adiw	r24, 0x01	; 1
    2200:	9a 83       	std	Y+2, r25	; 0x02
    2202:	89 83       	std	Y+1, r24	; 0x01
    2204:	89 81       	ldd	r24, Y+1	; 0x01
    2206:	9a 81       	ldd	r25, Y+2	; 0x02
    2208:	88 30       	cpi	r24, 0x08	; 8
    220a:	91 05       	cpc	r25, r1
    220c:	58 f3       	brcs	.-42     	; 0x21e4 <xlist_init+0x1c>
}
    220e:	0f 90       	pop	r0
    2210:	0f 90       	pop	r0
    2212:	0f 90       	pop	r0
    2214:	0f 90       	pop	r0
    2216:	cf 91       	pop	r28
    2218:	df 91       	pop	r29
    221a:	08 95       	ret

0000221c <xlist_head>:
//===========================================================================
//Поиск головы списка
item_t * xlist_head(xlist_t * xlist)
{
    221c:	df 93       	push	r29
    221e:	cf 93       	push	r28
    2220:	00 d0       	rcall	.+0      	; 0x2222 <xlist_head+0x6>
    2222:	00 d0       	rcall	.+0      	; 0x2224 <xlist_head+0x8>
    2224:	0f 92       	push	r0
    2226:	cd b7       	in	r28, 0x3d	; 61
    2228:	de b7       	in	r29, 0x3e	; 62
    222a:	9d 83       	std	Y+5, r25	; 0x05
    222c:	8c 83       	std	Y+4, r24	; 0x04
    item_t * ret_val = (item_t *)0;
    222e:	1b 82       	std	Y+3, r1	; 0x03
    2230:	1a 82       	std	Y+2, r1	; 0x02
    index_t index = xlist->index;
    2232:	ec 81       	ldd	r30, Y+4	; 0x04
    2234:	fd 81       	ldd	r31, Y+5	; 0x05
    2236:	80 89       	ldd	r24, Z+16	; 0x10
    2238:	89 83       	std	Y+1, r24	; 0x01

    if( index != (index_t)0 )
    223a:	89 81       	ldd	r24, Y+1	; 0x01
    223c:	88 23       	and	r24, r24
    223e:	81 f0       	breq	.+32     	; 0x2260 <xlist_head+0x44>
    {
        ret_val = xlist->item[ index_search( index ) ];
    2240:	89 81       	ldd	r24, Y+1	; 0x01
    2242:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <index_search>
    2246:	88 2f       	mov	r24, r24
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	2c 81       	ldd	r18, Y+4	; 0x04
    224c:	3d 81       	ldd	r19, Y+5	; 0x05
    224e:	88 0f       	add	r24, r24
    2250:	99 1f       	adc	r25, r25
    2252:	f9 01       	movw	r30, r18
    2254:	e8 0f       	add	r30, r24
    2256:	f9 1f       	adc	r31, r25
    2258:	80 81       	ld	r24, Z
    225a:	91 81       	ldd	r25, Z+1	; 0x01
    225c:	9b 83       	std	Y+3, r25	; 0x03
    225e:	8a 83       	std	Y+2, r24	; 0x02
    }
    return ret_val;
    2260:	8a 81       	ldd	r24, Y+2	; 0x02
    2262:	9b 81       	ldd	r25, Y+3	; 0x03
}
    2264:	0f 90       	pop	r0
    2266:	0f 90       	pop	r0
    2268:	0f 90       	pop	r0
    226a:	0f 90       	pop	r0
    226c:	0f 90       	pop	r0
    226e:	cf 91       	pop	r28
    2270:	df 91       	pop	r29
    2272:	08 95       	ret

00002274 <xlist_switch>:

//===========================================================================
// переключение указателя в массиве на следующий элемент, пригодится в планировщике
void xlist_switch(xlist_t * xlist, prio_t prio)
{
    2274:	df 93       	push	r29
    2276:	cf 93       	push	r28
    2278:	00 d0       	rcall	.+0      	; 0x227a <xlist_switch+0x6>
    227a:	00 d0       	rcall	.+0      	; 0x227c <xlist_switch+0x8>
    227c:	0f 92       	push	r0
    227e:	cd b7       	in	r28, 0x3d	; 61
    2280:	de b7       	in	r29, 0x3e	; 62
    2282:	9c 83       	std	Y+4, r25	; 0x04
    2284:	8b 83       	std	Y+3, r24	; 0x03
    2286:	6d 83       	std	Y+5, r22	; 0x05
    item_t ** current = xlist->item + prio;
    2288:	2b 81       	ldd	r18, Y+3	; 0x03
    228a:	3c 81       	ldd	r19, Y+4	; 0x04
    228c:	8d 81       	ldd	r24, Y+5	; 0x05
    228e:	88 2f       	mov	r24, r24
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	88 0f       	add	r24, r24
    2294:	99 1f       	adc	r25, r25
    2296:	82 0f       	add	r24, r18
    2298:	93 1f       	adc	r25, r19
    229a:	9a 83       	std	Y+2, r25	; 0x02
    229c:	89 83       	std	Y+1, r24	; 0x01
    *current = (*current)->next;
    229e:	e9 81       	ldd	r30, Y+1	; 0x01
    22a0:	fa 81       	ldd	r31, Y+2	; 0x02
    22a2:	01 90       	ld	r0, Z+
    22a4:	f0 81       	ld	r31, Z
    22a6:	e0 2d       	mov	r30, r0
    22a8:	80 81       	ld	r24, Z
    22aa:	91 81       	ldd	r25, Z+1	; 0x01
    22ac:	e9 81       	ldd	r30, Y+1	; 0x01
    22ae:	fa 81       	ldd	r31, Y+2	; 0x02
    22b0:	91 83       	std	Z+1, r25	; 0x01
    22b2:	80 83       	st	Z, r24
    //*current = (item_t *)*(item_t **)*(item_t ***)current;
}
    22b4:	0f 90       	pop	r0
    22b6:	0f 90       	pop	r0
    22b8:	0f 90       	pop	r0
    22ba:	0f 90       	pop	r0
    22bc:	0f 90       	pop	r0
    22be:	cf 91       	pop	r28
    22c0:	df 91       	pop	r29
    22c2:	08 95       	ret

000022c4 <raise_syscall_interrupt>:
 */
#include <bugurt.h>
//#include "../../arch/avr-gcc/init_syscalls.h"

void raise_syscall_interrupt(void)
{
    22c4:	df 93       	push	r29
    22c6:	cf 93       	push	r28
    22c8:	cd b7       	in	r28, 0x3d	; 61
    22ca:	de b7       	in	r29, 0x3e	; 62
    R2_on();
    22cc:	ab e2       	ldi	r26, 0x2B	; 43
    22ce:	b0 e0       	ldi	r27, 0x00	; 0
    22d0:	eb e2       	ldi	r30, 0x2B	; 43
    22d2:	f0 e0       	ldi	r31, 0x00	; 0
    22d4:	80 81       	ld	r24, Z
    22d6:	84 60       	ori	r24, 0x04	; 4
    22d8:	8c 93       	st	X, r24
    G2_off();
    22da:	ab e2       	ldi	r26, 0x2B	; 43
    22dc:	b0 e0       	ldi	r27, 0x00	; 0
    22de:	eb e2       	ldi	r30, 0x2B	; 43
    22e0:	f0 e0       	ldi	r31, 0x00	; 0
    22e2:	80 81       	ld	r24, Z
    22e4:	87 7f       	andi	r24, 0xF7	; 247
    22e6:	8c 93       	st	X, r24
    R2_off();
    22e8:	ab e2       	ldi	r26, 0x2B	; 43
    22ea:	b0 e0       	ldi	r27, 0x00	; 0
    22ec:	eb e2       	ldi	r30, 0x2B	; 43
    22ee:	f0 e0       	ldi	r31, 0x00	; 0
    22f0:	80 81       	ld	r24, Z
    22f2:	8b 7f       	andi	r24, 0xFB	; 251
    22f4:	8c 93       	st	X, r24
    G2_on();
    22f6:	ab e2       	ldi	r26, 0x2B	; 43
    22f8:	b0 e0       	ldi	r27, 0x00	; 0
    22fa:	eb e2       	ldi	r30, 0x2B	; 43
    22fc:	f0 e0       	ldi	r31, 0x00	; 0
    22fe:	80 81       	ld	r24, Z
    2300:	88 60       	ori	r24, 0x08	; 8
    2302:	8c 93       	st	X, r24
}
    2304:	cf 91       	pop	r28
    2306:	df 91       	pop	r29
    2308:	08 95       	ret

0000230a <start_scheduler>:

void start_scheduler( void ){
    230a:	df 93       	push	r29
    230c:	cf 93       	push	r28
    230e:	cd b7       	in	r28, 0x3d	; 61
    2310:	de b7       	in	r29, 0x3e	; 62
    TIMSK2 |= 0x02;
    2312:	a0 e7       	ldi	r26, 0x70	; 112
    2314:	b0 e0       	ldi	r27, 0x00	; 0
    2316:	e0 e7       	ldi	r30, 0x70	; 112
    2318:	f0 e0       	ldi	r31, 0x00	; 0
    231a:	80 81       	ld	r24, Z
    231c:	82 60       	ori	r24, 0x02	; 2
    231e:	8c 93       	st	X, r24
    EIMSK |= 0x02;
    2320:	ad e3       	ldi	r26, 0x3D	; 61
    2322:	b0 e0       	ldi	r27, 0x00	; 0
    2324:	ed e3       	ldi	r30, 0x3D	; 61
    2326:	f0 e0       	ldi	r31, 0x00	; 0
    2328:	80 81       	ld	r24, Z
    232a:	82 60       	ori	r24, 0x02	; 2
    232c:	8c 93       	st	X, r24
    EIFR |= 0x02;
    232e:	ac e3       	ldi	r26, 0x3C	; 60
    2330:	b0 e0       	ldi	r27, 0x00	; 0
    2332:	ec e3       	ldi	r30, 0x3C	; 60
    2334:	f0 e0       	ldi	r31, 0x00	; 0
    2336:	80 81       	ld	r24, Z
    2338:	82 60       	ori	r24, 0x02	; 2
    233a:	8c 93       	st	X, r24
}
    233c:	cf 91       	pop	r28
    233e:	df 91       	pop	r29
    2340:	08 95       	ret

00002342 <blink_1>:
    TIMSK2 &= ~0x02;
    EIMSK &= ~0x02;
}

///----------------------------------------------------------------------------------------
void blink_1(void * t) {PORTB ^= 0x10;}
    2342:	df 93       	push	r29
    2344:	cf 93       	push	r28
    2346:	00 d0       	rcall	.+0      	; 0x2348 <blink_1+0x6>
    2348:	cd b7       	in	r28, 0x3d	; 61
    234a:	de b7       	in	r29, 0x3e	; 62
    234c:	9a 83       	std	Y+2, r25	; 0x02
    234e:	89 83       	std	Y+1, r24	; 0x01
    2350:	a5 e2       	ldi	r26, 0x25	; 37
    2352:	b0 e0       	ldi	r27, 0x00	; 0
    2354:	e5 e2       	ldi	r30, 0x25	; 37
    2356:	f0 e0       	ldi	r31, 0x00	; 0
    2358:	90 81       	ld	r25, Z
    235a:	80 e1       	ldi	r24, 0x10	; 16
    235c:	89 27       	eor	r24, r25
    235e:	8c 93       	st	X, r24
    2360:	0f 90       	pop	r0
    2362:	0f 90       	pop	r0
    2364:	cf 91       	pop	r28
    2366:	df 91       	pop	r29
    2368:	08 95       	ret

0000236a <blink_2>:
void blink_2(void * t) {PORTB ^= 0x08;}
    236a:	df 93       	push	r29
    236c:	cf 93       	push	r28
    236e:	00 d0       	rcall	.+0      	; 0x2370 <blink_2+0x6>
    2370:	cd b7       	in	r28, 0x3d	; 61
    2372:	de b7       	in	r29, 0x3e	; 62
    2374:	9a 83       	std	Y+2, r25	; 0x02
    2376:	89 83       	std	Y+1, r24	; 0x01
    2378:	a5 e2       	ldi	r26, 0x25	; 37
    237a:	b0 e0       	ldi	r27, 0x00	; 0
    237c:	e5 e2       	ldi	r30, 0x25	; 37
    237e:	f0 e0       	ldi	r31, 0x00	; 0
    2380:	90 81       	ld	r25, Z
    2382:	88 e0       	ldi	r24, 0x08	; 8
    2384:	89 27       	eor	r24, r25
    2386:	8c 93       	st	X, r24
    2388:	0f 90       	pop	r0
    238a:	0f 90       	pop	r0
    238c:	cf 91       	pop	r28
    238e:	df 91       	pop	r29
    2390:	08 95       	ret

00002392 <blink_3>:
void blink_3(void * t) {PORTB ^= 0x04;}
    2392:	df 93       	push	r29
    2394:	cf 93       	push	r28
    2396:	00 d0       	rcall	.+0      	; 0x2398 <blink_3+0x6>
    2398:	cd b7       	in	r28, 0x3d	; 61
    239a:	de b7       	in	r29, 0x3e	; 62
    239c:	9a 83       	std	Y+2, r25	; 0x02
    239e:	89 83       	std	Y+1, r24	; 0x01
    23a0:	a5 e2       	ldi	r26, 0x25	; 37
    23a2:	b0 e0       	ldi	r27, 0x00	; 0
    23a4:	e5 e2       	ldi	r30, 0x25	; 37
    23a6:	f0 e0       	ldi	r31, 0x00	; 0
    23a8:	90 81       	ld	r25, Z
    23aa:	84 e0       	ldi	r24, 0x04	; 4
    23ac:	89 27       	eor	r24, r25
    23ae:	8c 93       	st	X, r24
    23b0:	0f 90       	pop	r0
    23b2:	0f 90       	pop	r0
    23b4:	cf 91       	pop	r28
    23b6:	df 91       	pop	r29
    23b8:	08 95       	ret

000023ba <blink_4>:
void blink_4(void * t) {PORTB ^= 0x02;}
    23ba:	df 93       	push	r29
    23bc:	cf 93       	push	r28
    23be:	00 d0       	rcall	.+0      	; 0x23c0 <blink_4+0x6>
    23c0:	cd b7       	in	r28, 0x3d	; 61
    23c2:	de b7       	in	r29, 0x3e	; 62
    23c4:	9a 83       	std	Y+2, r25	; 0x02
    23c6:	89 83       	std	Y+1, r24	; 0x01
    23c8:	a5 e2       	ldi	r26, 0x25	; 37
    23ca:	b0 e0       	ldi	r27, 0x00	; 0
    23cc:	e5 e2       	ldi	r30, 0x25	; 37
    23ce:	f0 e0       	ldi	r31, 0x00	; 0
    23d0:	90 81       	ld	r25, Z
    23d2:	82 e0       	ldi	r24, 0x02	; 2
    23d4:	89 27       	eor	r24, r25
    23d6:	8c 93       	st	X, r24
    23d8:	0f 90       	pop	r0
    23da:	0f 90       	pop	r0
    23dc:	cf 91       	pop	r28
    23de:	df 91       	pop	r29
    23e0:	08 95       	ret

000023e2 <blink_12>:
void blink_7(void * t) {PORTC ^= 0x10;}
void blink_8(void * t) {PORTC ^= 0x08;}
void blink_9(void * t) {PORTC ^= 0x04;}
void blink_10(void * t) {PORTC ^= 0x02;}
void blink_11(void * t) {PORTC ^= 0x01;}
void blink_12(void * t) {
    23e2:	df 93       	push	r29
    23e4:	cf 93       	push	r28
    23e6:	00 d0       	rcall	.+0      	; 0x23e8 <blink_12+0x6>
    23e8:	cd b7       	in	r28, 0x3d	; 61
    23ea:	de b7       	in	r29, 0x3e	; 62
    23ec:	9a 83       	std	Y+2, r25	; 0x02
    23ee:	89 83       	std	Y+1, r24	; 0x01
    PORTB ^= 0x20;
    23f0:	a5 e2       	ldi	r26, 0x25	; 37
    23f2:	b0 e0       	ldi	r27, 0x00	; 0
    23f4:	e5 e2       	ldi	r30, 0x25	; 37
    23f6:	f0 e0       	ldi	r31, 0x00	; 0
    23f8:	90 81       	ld	r25, Z
    23fa:	80 e2       	ldi	r24, 0x20	; 32
    23fc:	89 27       	eor	r24, r25
    23fe:	8c 93       	st	X, r24
    blink_G3();
    2400:	ab e2       	ldi	r26, 0x2B	; 43
    2402:	b0 e0       	ldi	r27, 0x00	; 0
    2404:	eb e2       	ldi	r30, 0x2B	; 43
    2406:	f0 e0       	ldi	r31, 0x00	; 0
    2408:	90 81       	ld	r25, Z
    240a:	80 e4       	ldi	r24, 0x40	; 64
    240c:	89 27       	eor	r24, r25
    240e:	8c 93       	st	X, r24
    blink_R3();
    2410:	ab e2       	ldi	r26, 0x2B	; 43
    2412:	b0 e0       	ldi	r27, 0x00	; 0
    2414:	eb e2       	ldi	r30, 0x2B	; 43
    2416:	f0 e0       	ldi	r31, 0x00	; 0
    2418:	90 81       	ld	r25, Z
    241a:	80 e2       	ldi	r24, 0x20	; 32
    241c:	89 27       	eor	r24, r25
    241e:	8c 93       	st	X, r24
    }
    2420:	0f 90       	pop	r0
    2422:	0f 90       	pop	r0
    2424:	cf 91       	pop	r28
    2426:	df 91       	pop	r29
    2428:	08 95       	ret

0000242a <main0>:

proc_t proc[4];
stack_t stack[4][128];

void main0(void * t)
{
    242a:	df 93       	push	r29
    242c:	cf 93       	push	r28
    242e:	00 d0       	rcall	.+0      	; 0x2430 <main0+0x6>
    2430:	cd b7       	in	r28, 0x3d	; 61
    2432:	de b7       	in	r29, 0x3e	; 62
    2434:	9a 83       	std	Y+2, r25	; 0x02
    2436:	89 83       	std	Y+1, r24	; 0x01
    while(1)
    {
        wait_time(500);
    2438:	84 ef       	ldi	r24, 0xF4	; 244
    243a:	91 e0       	ldi	r25, 0x01	; 1
    243c:	0e 94 bc 10 	call	0x2178	; 0x2178 <wait_time>
    2440:	fb cf       	rjmp	.-10     	; 0x2438 <main0+0xe>

00002442 <main1>:
    }
}
void main1(void * t)
{
    2442:	df 93       	push	r29
    2444:	cf 93       	push	r28
    2446:	00 d0       	rcall	.+0      	; 0x2448 <main1+0x6>
    2448:	cd b7       	in	r28, 0x3d	; 61
    244a:	de b7       	in	r29, 0x3e	; 62
    244c:	9a 83       	std	Y+2, r25	; 0x02
    244e:	89 83       	std	Y+1, r24	; 0x01
    while(1)
    {
        wait_time(500);
    2450:	84 ef       	ldi	r24, 0xF4	; 244
    2452:	91 e0       	ldi	r25, 0x01	; 1
    2454:	0e 94 bc 10 	call	0x2178	; 0x2178 <wait_time>
    2458:	fb cf       	rjmp	.-10     	; 0x2450 <main1+0xe>

0000245a <main2>:
    }
}
void main2(void * t)
{
    245a:	df 93       	push	r29
    245c:	cf 93       	push	r28
    245e:	00 d0       	rcall	.+0      	; 0x2460 <main2+0x6>
    2460:	cd b7       	in	r28, 0x3d	; 61
    2462:	de b7       	in	r29, 0x3e	; 62
    2464:	9a 83       	std	Y+2, r25	; 0x02
    2466:	89 83       	std	Y+1, r24	; 0x01
    while(1)
    {
        wait_time(1);
    2468:	81 e0       	ldi	r24, 0x01	; 1
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	0e 94 bc 10 	call	0x2178	; 0x2178 <wait_time>
        proc_reset_watchdog();
    2470:	0e 94 df 0c 	call	0x19be	; 0x19be <proc_reset_watchdog>
        proc_self_stop();
    2474:	0e 94 54 03 	call	0x6a8	; 0x6a8 <proc_self_stop>
    2478:	f7 cf       	rjmp	.-18     	; 0x2468 <main2+0xe>

0000247a <main3>:
    247a:	df 93       	push	r29
    247c:	cf 93       	push	r28
    247e:	00 d0       	rcall	.+0      	; 0x2480 <main3+0x6>
    2480:	cd b7       	in	r28, 0x3d	; 61
    2482:	de b7       	in	r29, 0x3e	; 62
    2484:	9a 83       	std	Y+2, r25	; 0x02
    2486:	89 83       	std	Y+1, r24	; 0x01
    2488:	84 ef       	ldi	r24, 0xF4	; 244
    248a:	91 e0       	ldi	r25, 0x01	; 1
    248c:	0e 94 bc 10 	call	0x2178	; 0x2178 <wait_time>
    2490:	0f 90       	pop	r0
    2492:	0f 90       	pop	r0
    2494:	cf 91       	pop	r28
    2496:	df 91       	pop	r29
    2498:	08 95       	ret

0000249a <idle_main>:
void main3(void * t)
{
    wait_time(500);
}
void idle_main(void * t)
{
    249a:	df 93       	push	r29
    249c:	cf 93       	push	r28
    249e:	00 d0       	rcall	.+0      	; 0x24a0 <idle_main+0x6>
    24a0:	cd b7       	in	r28, 0x3d	; 61
    24a2:	de b7       	in	r29, 0x3e	; 62
    24a4:	9a 83       	std	Y+2, r25	; 0x02
    24a6:	89 83       	std	Y+1, r24	; 0x01
    // Insert code
    wait_time(1000);
    24a8:	88 ee       	ldi	r24, 0xE8	; 232
    24aa:	93 e0       	ldi	r25, 0x03	; 3
    24ac:	0e 94 bc 10 	call	0x2178	; 0x2178 <wait_time>
    proc_run( &proc[3] );
    24b0:	85 e8       	ldi	r24, 0x85	; 133
    24b2:	92 e0       	ldi	r25, 0x02	; 2
    24b4:	0e 94 cc 02 	call	0x598	; 0x598 <proc_run>
    wait_time(1000);
    24b8:	88 ee       	ldi	r24, 0xE8	; 232
    24ba:	93 e0       	ldi	r25, 0x03	; 3
    24bc:	0e 94 bc 10 	call	0x2178	; 0x2178 <wait_time>
    proc_restart( &proc[3] );
    24c0:	85 e8       	ldi	r24, 0x85	; 133
    24c2:	92 e0       	ldi	r25, 0x02	; 2
    24c4:	0e 94 04 03 	call	0x608	; 0x608 <proc_restart>
    wait_time(500);
    24c8:	84 ef       	ldi	r24, 0xF4	; 244
    24ca:	91 e0       	ldi	r25, 0x01	; 1
    24cc:	0e 94 bc 10 	call	0x2178	; 0x2178 <wait_time>
    proc_run( &proc[3] );
    24d0:	85 e8       	ldi	r24, 0x85	; 133
    24d2:	92 e0       	ldi	r25, 0x02	; 2
    24d4:	0e 94 cc 02 	call	0x598	; 0x598 <proc_run>
    while(1)
    {
         wait_time(1000);
    24d8:	88 ee       	ldi	r24, 0xE8	; 232
    24da:	93 e0       	ldi	r25, 0x03	; 3
    24dc:	0e 94 bc 10 	call	0x2178	; 0x2178 <wait_time>
         proc_run(&proc[2]);
    24e0:	87 e5       	ldi	r24, 0x57	; 87
    24e2:	92 e0       	ldi	r25, 0x02	; 2
    24e4:	0e 94 cc 02 	call	0x598	; 0x598 <proc_run>
    24e8:	f7 cf       	rjmp	.-18     	; 0x24d8 <idle_main+0x3e>

000024ea <main>:
    }
}

int main(void)
{
    24ea:	8f 92       	push	r8
    24ec:	af 92       	push	r10
    24ee:	bf 92       	push	r11
    24f0:	cf 92       	push	r12
    24f2:	ef 92       	push	r14
    24f4:	ff 92       	push	r15
    24f6:	0f 93       	push	r16
    24f8:	1f 93       	push	r17
    24fa:	df 93       	push	r29
    24fc:	cf 93       	push	r28
    24fe:	cd b7       	in	r28, 0x3d	; 61
    2500:	de b7       	in	r29, 0x3e	; 62
    init_bugurt();
    2502:	0e 94 66 01 	call	0x2cc	; 0x2cc <init_bugurt>

    TCCR2A = 0x02;//
    2506:	e0 eb       	ldi	r30, 0xB0	; 176
    2508:	f0 e0       	ldi	r31, 0x00	; 0
    250a:	82 e0       	ldi	r24, 0x02	; 2
    250c:	80 83       	st	Z, r24
    TCCR2B = 0x05;// prescaler=128
    250e:	e1 eb       	ldi	r30, 0xB1	; 177
    2510:	f0 e0       	ldi	r31, 0x00	; 0
    2512:	85 e0       	ldi	r24, 0x05	; 5
    2514:	80 83       	st	Z, r24
    OCR2A  = 124;
    2516:	e3 eb       	ldi	r30, 0xB3	; 179
    2518:	f0 e0       	ldi	r31, 0x00	; 0
    251a:	8c e7       	ldi	r24, 0x7C	; 124
    251c:	80 83       	st	Z, r24
    OCR2B  = 0x00;
    251e:	e4 eb       	ldi	r30, 0xB4	; 180
    2520:	f0 e0       	ldi	r31, 0x00	; 0
    2522:	10 82       	st	Z, r1
    TIMSK2 = 0x00; // shceduler not started
    2524:	e0 e7       	ldi	r30, 0x70	; 112
    2526:	f0 e0       	ldi	r31, 0x00	; 0
    2528:	10 82       	st	Z, r1
    TIFR2  = 0x00;
    252a:	e7 e3       	ldi	r30, 0x37	; 55
    252c:	f0 e0       	ldi	r31, 0x00	; 0
    252e:	10 82       	st	Z, r1

    EICRA = 0x08; //falling edge
    2530:	e9 e6       	ldi	r30, 0x69	; 105
    2532:	f0 e0       	ldi	r31, 0x00	; 0
    2534:	88 e0       	ldi	r24, 0x08	; 8
    2536:	80 83       	st	Z, r24
    EIMSK = 0x00; //resched generates int1, mask 0x02
    2538:	ed e3       	ldi	r30, 0x3D	; 61
    253a:	f0 e0       	ldi	r31, 0x00	; 0
    253c:	10 82       	st	Z, r1

    DDRB = 0x3F;
    253e:	e4 e2       	ldi	r30, 0x24	; 36
    2540:	f0 e0       	ldi	r31, 0x00	; 0
    2542:	8f e3       	ldi	r24, 0x3F	; 63
    2544:	80 83       	st	Z, r24
    PORTB = 0x00;
    2546:	e5 e2       	ldi	r30, 0x25	; 37
    2548:	f0 e0       	ldi	r31, 0x00	; 0
    254a:	10 82       	st	Z, r1
    DDRC = 0x3F;
    254c:	e7 e2       	ldi	r30, 0x27	; 39
    254e:	f0 e0       	ldi	r31, 0x00	; 0
    2550:	8f e3       	ldi	r24, 0x3F	; 63
    2552:	80 83       	st	Z, r24
    PORTC = 0x00;
    2554:	e8 e2       	ldi	r30, 0x28	; 40
    2556:	f0 e0       	ldi	r31, 0x00	; 0
    2558:	10 82       	st	Z, r1
    DDRD = 0xFE;
    255a:	ea e2       	ldi	r30, 0x2A	; 42
    255c:	f0 e0       	ldi	r31, 0x00	; 0
    255e:	8e ef       	ldi	r24, 0xFE	; 254
    2560:	80 83       	st	Z, r24
    PORTD = 0x00;
    2562:	eb e2       	ldi	r30, 0x2B	; 43
    2564:	f0 e0       	ldi	r31, 0x00	; 0
    2566:	10 82       	st	Z, r1

    G1_on();
    2568:	ab e2       	ldi	r26, 0x2B	; 43
    256a:	b0 e0       	ldi	r27, 0x00	; 0
    256c:	eb e2       	ldi	r30, 0x2B	; 43
    256e:	f0 e0       	ldi	r31, 0x00	; 0
    2570:	80 81       	ld	r24, Z
    2572:	80 61       	ori	r24, 0x10	; 16
    2574:	8c 93       	st	X, r24
    G2_on();
    2576:	ab e2       	ldi	r26, 0x2B	; 43
    2578:	b0 e0       	ldi	r27, 0x00	; 0
    257a:	eb e2       	ldi	r30, 0x2B	; 43
    257c:	f0 e0       	ldi	r31, 0x00	; 0
    257e:	80 81       	ld	r24, Z
    2580:	88 60       	ori	r24, 0x08	; 8
    2582:	8c 93       	st	X, r24
    R3_on();
    2584:	ab e2       	ldi	r26, 0x2B	; 43
    2586:	b0 e0       	ldi	r27, 0x00	; 0
    2588:	eb e2       	ldi	r30, 0x2B	; 43
    258a:	f0 e0       	ldi	r31, 0x00	; 0
    258c:	80 81       	ld	r24, Z
    258e:	80 62       	ori	r24, 0x20	; 32
    2590:	8c 93       	st	X, r24

    proc_init_isr(&proc[0], main0, blink_1, blink_1, 0, &stack[0][127], 1, 2, 0);
    2592:	83 eb       	ldi	r24, 0xB3	; 179
    2594:	92 e0       	ldi	r25, 0x02	; 2
    2596:	dc 01       	movw	r26, r24
    2598:	a1 58       	subi	r26, 0x81	; 129
    259a:	bf 4f       	sbci	r27, 0xFF	; 255
    259c:	8b ef       	ldi	r24, 0xFB	; 251
    259e:	91 e0       	ldi	r25, 0x01	; 1
    25a0:	25 e1       	ldi	r18, 0x15	; 21
    25a2:	32 e1       	ldi	r19, 0x12	; 18
    25a4:	41 ea       	ldi	r20, 0xA1	; 161
    25a6:	51 e1       	ldi	r21, 0x11	; 17
    25a8:	e1 ea       	ldi	r30, 0xA1	; 161
    25aa:	f1 e1       	ldi	r31, 0x11	; 17
    25ac:	b9 01       	movw	r22, r18
    25ae:	9f 01       	movw	r18, r30
    25b0:	00 e0       	ldi	r16, 0x00	; 0
    25b2:	10 e0       	ldi	r17, 0x00	; 0
    25b4:	7d 01       	movw	r14, r26
    25b6:	cc 24       	eor	r12, r12
    25b8:	c3 94       	inc	r12
    25ba:	aa 24       	eor	r10, r10
    25bc:	bb 24       	eor	r11, r11
    25be:	68 94       	set
    25c0:	a1 f8       	bld	r10, 1
    25c2:	88 24       	eor	r8, r8
    25c4:	0e 94 87 0b 	call	0x170e	; 0x170e <proc_init_isr>
    proc_init_isr(&proc[1], main1, blink_2, blink_2, 0, &stack[1][127], 2, 3, 0);
    25c8:	83 eb       	ldi	r24, 0xB3	; 179
    25ca:	92 e0       	ldi	r25, 0x02	; 2
    25cc:	dc 01       	movw	r26, r24
    25ce:	a1 50       	subi	r26, 0x01	; 1
    25d0:	bf 4f       	sbci	r27, 0xFF	; 255
    25d2:	89 e2       	ldi	r24, 0x29	; 41
    25d4:	92 e0       	ldi	r25, 0x02	; 2
    25d6:	21 e2       	ldi	r18, 0x21	; 33
    25d8:	32 e1       	ldi	r19, 0x12	; 18
    25da:	45 eb       	ldi	r20, 0xB5	; 181
    25dc:	51 e1       	ldi	r21, 0x11	; 17
    25de:	e5 eb       	ldi	r30, 0xB5	; 181
    25e0:	f1 e1       	ldi	r31, 0x11	; 17
    25e2:	b9 01       	movw	r22, r18
    25e4:	9f 01       	movw	r18, r30
    25e6:	00 e0       	ldi	r16, 0x00	; 0
    25e8:	10 e0       	ldi	r17, 0x00	; 0
    25ea:	7d 01       	movw	r14, r26
    25ec:	cc 24       	eor	r12, r12
    25ee:	68 94       	set
    25f0:	c1 f8       	bld	r12, 1
    25f2:	0f 2e       	mov	r0, r31
    25f4:	f3 e0       	ldi	r31, 0x03	; 3
    25f6:	af 2e       	mov	r10, r31
    25f8:	bb 24       	eor	r11, r11
    25fa:	f0 2d       	mov	r31, r0
    25fc:	88 24       	eor	r8, r8
    25fe:	0e 94 87 0b 	call	0x170e	; 0x170e <proc_init_isr>
    proc_init_isr(&proc[2], main2, blink_3, blink_3, 0, &stack[2][127], 2, 4, 1);// Типа реального времени
    2602:	83 eb       	ldi	r24, 0xB3	; 179
    2604:	92 e0       	ldi	r25, 0x02	; 2
    2606:	dc 01       	movw	r26, r24
    2608:	a1 58       	subi	r26, 0x81	; 129
    260a:	be 4f       	sbci	r27, 0xFE	; 254
    260c:	87 e5       	ldi	r24, 0x57	; 87
    260e:	92 e0       	ldi	r25, 0x02	; 2
    2610:	2d e2       	ldi	r18, 0x2D	; 45
    2612:	32 e1       	ldi	r19, 0x12	; 18
    2614:	49 ec       	ldi	r20, 0xC9	; 201
    2616:	51 e1       	ldi	r21, 0x11	; 17
    2618:	e9 ec       	ldi	r30, 0xC9	; 201
    261a:	f1 e1       	ldi	r31, 0x11	; 17
    261c:	b9 01       	movw	r22, r18
    261e:	9f 01       	movw	r18, r30
    2620:	00 e0       	ldi	r16, 0x00	; 0
    2622:	10 e0       	ldi	r17, 0x00	; 0
    2624:	7d 01       	movw	r14, r26
    2626:	cc 24       	eor	r12, r12
    2628:	68 94       	set
    262a:	c1 f8       	bld	r12, 1
    262c:	aa 24       	eor	r10, r10
    262e:	bb 24       	eor	r11, r11
    2630:	68 94       	set
    2632:	a2 f8       	bld	r10, 2
    2634:	88 24       	eor	r8, r8
    2636:	83 94       	inc	r8
    2638:	0e 94 87 0b 	call	0x170e	; 0x170e <proc_init_isr>
    proc_init_isr(&proc[3], main3, blink_4, blink_4, 0, &stack[3][127], 3, 4, 0);
    263c:	83 eb       	ldi	r24, 0xB3	; 179
    263e:	92 e0       	ldi	r25, 0x02	; 2
    2640:	dc 01       	movw	r26, r24
    2642:	a1 50       	subi	r26, 0x01	; 1
    2644:	be 4f       	sbci	r27, 0xFE	; 254
    2646:	85 e8       	ldi	r24, 0x85	; 133
    2648:	92 e0       	ldi	r25, 0x02	; 2
    264a:	2d e3       	ldi	r18, 0x3D	; 61
    264c:	32 e1       	ldi	r19, 0x12	; 18
    264e:	4d ed       	ldi	r20, 0xDD	; 221
    2650:	51 e1       	ldi	r21, 0x11	; 17
    2652:	ed ed       	ldi	r30, 0xDD	; 221
    2654:	f1 e1       	ldi	r31, 0x11	; 17
    2656:	b9 01       	movw	r22, r18
    2658:	9f 01       	movw	r18, r30
    265a:	00 e0       	ldi	r16, 0x00	; 0
    265c:	10 e0       	ldi	r17, 0x00	; 0
    265e:	7d 01       	movw	r14, r26
    2660:	0f 2e       	mov	r0, r31
    2662:	f3 e0       	ldi	r31, 0x03	; 3
    2664:	cf 2e       	mov	r12, r31
    2666:	f0 2d       	mov	r31, r0
    2668:	aa 24       	eor	r10, r10
    266a:	bb 24       	eor	r11, r11
    266c:	68 94       	set
    266e:	a2 f8       	bld	r10, 2
    2670:	88 24       	eor	r8, r8
    2672:	0e 94 87 0b 	call	0x170e	; 0x170e <proc_init_isr>

    kernel.idle.rs_hook = blink_12;
    2676:	81 ef       	ldi	r24, 0xF1	; 241
    2678:	91 e1       	ldi	r25, 0x11	; 17
    267a:	90 93 f0 01 	sts	0x01F0, r25
    267e:	80 93 ef 01 	sts	0x01EF, r24
    kernel.idle.sv_hook = blink_12;
    2682:	81 ef       	ldi	r24, 0xF1	; 241
    2684:	91 e1       	ldi	r25, 0x11	; 17
    2686:	90 93 ee 01 	sts	0x01EE, r25
    268a:	80 93 ed 01 	sts	0x01ED, r24

    proc_run_isr(&proc[0]);
    268e:	8b ef       	ldi	r24, 0xFB	; 251
    2690:	91 e0       	ldi	r25, 0x01	; 1
    2692:	0e 94 2d 0c 	call	0x185a	; 0x185a <proc_run_isr>
    proc_run_isr(&proc[1]);
    2696:	89 e2       	ldi	r24, 0x29	; 41
    2698:	92 e0       	ldi	r25, 0x02	; 2
    269a:	0e 94 2d 0c 	call	0x185a	; 0x185a <proc_run_isr>
    proc_run_isr(&proc[2]);
    269e:	87 e5       	ldi	r24, 0x57	; 87
    26a0:	92 e0       	ldi	r25, 0x02	; 2
    26a2:	0e 94 2d 0c 	call	0x185a	; 0x185a <proc_run_isr>
    proc_run_isr(&proc[3]);
    26a6:	85 e8       	ldi	r24, 0x85	; 133
    26a8:	92 e0       	ldi	r25, 0x02	; 2
    26aa:	0e 94 2d 0c 	call	0x185a	; 0x185a <proc_run_isr>

    start_bugurt();
    26ae:	0e 94 8b 01 	call	0x316	; 0x316 <start_bugurt>
    return 0;
    26b2:	80 e0       	ldi	r24, 0x00	; 0
    26b4:	90 e0       	ldi	r25, 0x00	; 0
}
    26b6:	cf 91       	pop	r28
    26b8:	df 91       	pop	r29
    26ba:	1f 91       	pop	r17
    26bc:	0f 91       	pop	r16
    26be:	ff 90       	pop	r15
    26c0:	ef 90       	pop	r14
    26c2:	cf 90       	pop	r12
    26c4:	bf 90       	pop	r11
    26c6:	af 90       	pop	r10
    26c8:	8f 90       	pop	r8
    26ca:	08 95       	ret

000026cc <_exit>:
    26cc:	f8 94       	cli

000026ce <__stop_program>:
    26ce:	ff cf       	rjmp	.-2      	; 0x26ce <__stop_program>
