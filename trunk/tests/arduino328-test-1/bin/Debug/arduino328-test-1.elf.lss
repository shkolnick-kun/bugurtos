
bin/Debug/arduino328-test-1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000027c2  00002856  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000027c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000430  00800102  00800102  00002858  2**0
                  ALLOC
  3 .stab         000072f0  00000000  00000000  00002858  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003647  00000000  00000000  00009b48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       8:	0c 94 26 02 	jmp	0x44c	; 0x44c <__vector_2>
       c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__vector_7>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      54:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

00000068 <syscall_routine>:
      68:	71 02 23 03 5b 03 92 03 ac 03 d1 03 34 04 45 04     q.#.[.......4.E.
      78:	55 04 65 04 75 04 85 04 9c 04 b6 04 c6 04 dc 04     U.e.u...........
      88:	f6 04 10 05                                         ....

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e2 ec       	ldi	r30, 0xC2	; 194
      a0:	f7 e2       	ldi	r31, 0x27	; 39
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <.do_copy_data_start>

000000a4 <.do_copy_data_loop>:
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0

000000a8 <.do_copy_data_start>:
      a8:	a2 30       	cpi	r26, 0x02	; 2
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <.do_copy_data_loop>

000000ae <__do_clear_bss>:
      ae:	15 e0       	ldi	r17, 0x05	; 5
      b0:	a2 e0       	ldi	r26, 0x02	; 2
      b2:	b1 e0       	ldi	r27, 0x01	; 1
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	a2 33       	cpi	r26, 0x32	; 50
      ba:	b1 07       	cpc	r27, r17
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 0f 13 	call	0x261e	; 0x261e <main>
      c2:	0c 94 df 13 	jmp	0x27be	; 0x27be <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <osbme_store_context>:
      ca:	2f 92       	push	r2
      cc:	2f b6       	in	r2, 0x3f	; 63
      ce:	2f 92       	push	r2
      d0:	3f 92       	push	r3
      d2:	4f 92       	push	r4
      d4:	5f 92       	push	r5
      d6:	6f 92       	push	r6
      d8:	7f 92       	push	r7
      da:	8f 92       	push	r8
      dc:	9f 92       	push	r9
      de:	af 92       	push	r10
      e0:	bf 92       	push	r11
      e2:	cf 92       	push	r12
      e4:	df 92       	push	r13
      e6:	ef 92       	push	r14
      e8:	ff 92       	push	r15
      ea:	0f 93       	push	r16
      ec:	1f 93       	push	r17
      ee:	2f 93       	push	r18
      f0:	3f 93       	push	r19
      f2:	4f 93       	push	r20
      f4:	5f 93       	push	r21
      f6:	6f 93       	push	r22
      f8:	7f 93       	push	r23
      fa:	8f 93       	push	r24
      fc:	9f 93       	push	r25
      fe:	af 93       	push	r26
     100:	bf 93       	push	r27
     102:	cf 93       	push	r28
     104:	df 93       	push	r29
     106:	ef 93       	push	r30
     108:	ff 93       	push	r31
     10a:	ed b7       	in	r30, 0x3d	; 61
     10c:	fe b7       	in	r31, 0x3e	; 62
     10e:	21 a1       	ldd	r18, Z+33	; 0x21
     110:	30 a1       	ldd	r19, Z+32	; 0x20
     112:	01 a2       	std	Z+33, r0	; 0x21
     114:	10 a2       	std	Z+32, r1	; 0x20
     116:	11 24       	eor	r1, r1
     118:	8d b7       	in	r24, 0x3d	; 61
     11a:	9e b7       	in	r25, 0x3e	; 62
     11c:	2f 93       	push	r18
     11e:	3f 93       	push	r19
     120:	08 95       	ret

00000122 <osbme_load_context>:
     122:	3f 91       	pop	r19
     124:	2f 91       	pop	r18
     126:	9e bf       	out	0x3e, r25	; 62
     128:	8d bf       	out	0x3d, r24	; 61
     12a:	fe b7       	in	r31, 0x3e	; 62
     12c:	ed b7       	in	r30, 0x3d	; 61
     12e:	10 a0       	ldd	r1, Z+32	; 0x20
     130:	01 a0       	ldd	r0, Z+33	; 0x21
     132:	30 a3       	std	Z+32, r19	; 0x20
     134:	21 a3       	std	Z+33, r18	; 0x21
     136:	ff 91       	pop	r31
     138:	ef 91       	pop	r30
     13a:	df 91       	pop	r29
     13c:	cf 91       	pop	r28
     13e:	bf 91       	pop	r27
     140:	af 91       	pop	r26
     142:	9f 91       	pop	r25
     144:	8f 91       	pop	r24
     146:	7f 91       	pop	r23
     148:	6f 91       	pop	r22
     14a:	5f 91       	pop	r21
     14c:	4f 91       	pop	r20
     14e:	3f 91       	pop	r19
     150:	2f 91       	pop	r18
     152:	1f 91       	pop	r17
     154:	0f 91       	pop	r16
     156:	ff 90       	pop	r15
     158:	ef 90       	pop	r14
     15a:	df 90       	pop	r13
     15c:	cf 90       	pop	r12
     15e:	bf 90       	pop	r11
     160:	af 90       	pop	r10
     162:	9f 90       	pop	r9
     164:	8f 90       	pop	r8
     166:	7f 90       	pop	r7
     168:	6f 90       	pop	r6
     16a:	5f 90       	pop	r5
     16c:	4f 90       	pop	r4
     16e:	3f 90       	pop	r3
     170:	2f 90       	pop	r2
     172:	2f be       	out	0x3f, r2	; 63
     174:	2f 90       	pop	r2
     176:	08 95       	ret

00000178 <disable_interrupts>:
//Внешние функции, специфичные для AVR
extern void start_scheduler( void );
extern void stop_scheduler( void );
// Просто функции, специфичные для AVR
void disable_interrupts(void)
{
     178:	df 93       	push	r29
     17a:	cf 93       	push	r28
     17c:	cd b7       	in	r28, 0x3d	; 61
     17e:	de b7       	in	r29, 0x3e	; 62
    cli();
     180:	f8 94       	cli
}
     182:	cf 91       	pop	r28
     184:	df 91       	pop	r29
     186:	08 95       	ret

00000188 <enable_interrupts>:
void enable_interrupts(void)
{
     188:	df 93       	push	r29
     18a:	cf 93       	push	r28
     18c:	cd b7       	in	r28, 0x3d	; 61
     18e:	de b7       	in	r29, 0x3e	; 62
    sei();
     190:	78 94       	sei
}
     192:	cf 91       	pop	r28
     194:	df 91       	pop	r29
     196:	08 95       	ret

00000198 <current_proc>:

proc_t * current_proc(void)
{
     198:	df 93       	push	r29
     19a:	cf 93       	push	r28
     19c:	cd b7       	in	r28, 0x3d	; 61
     19e:	de b7       	in	r29, 0x3e	; 62
    return kernel.sched.current_proc;
     1a0:	80 91 1e 02 	lds	r24, 0x021E
     1a4:	90 91 1f 02 	lds	r25, 0x021F
}
     1a8:	cf 91       	pop	r28
     1aa:	df 91       	pop	r29
     1ac:	08 95       	ret

000001ae <proc_stack_init>:

void * proc_stack_init(stack_t * sstart, code_t code, void * arg)
{
     1ae:	df 93       	push	r29
     1b0:	cf 93       	push	r28
     1b2:	00 d0       	rcall	.+0      	; 0x1b4 <proc_stack_init+0x6>
     1b4:	00 d0       	rcall	.+0      	; 0x1b6 <proc_stack_init+0x8>
     1b6:	00 d0       	rcall	.+0      	; 0x1b8 <proc_stack_init+0xa>
     1b8:	cd b7       	in	r28, 0x3d	; 61
     1ba:	de b7       	in	r29, 0x3e	; 62
     1bc:	9a 83       	std	Y+2, r25	; 0x02
     1be:	89 83       	std	Y+1, r24	; 0x01
     1c0:	7c 83       	std	Y+4, r23	; 0x04
     1c2:	6b 83       	std	Y+3, r22	; 0x03
     1c4:	5e 83       	std	Y+6, r21	; 0x06
     1c6:	4d 83       	std	Y+5, r20	; 0x05
    return osbme_init_stack( (void *)sstart, (osbme_code_t)proc_run_wrapper, (void *)arg );
     1c8:	49 e0       	ldi	r20, 0x09	; 9
     1ca:	54 e0       	ldi	r21, 0x04	; 4
     1cc:	89 81       	ldd	r24, Y+1	; 0x01
     1ce:	9a 81       	ldd	r25, Y+2	; 0x02
     1d0:	2d 81       	ldd	r18, Y+5	; 0x05
     1d2:	3e 81       	ldd	r19, Y+6	; 0x06
     1d4:	ba 01       	movw	r22, r20
     1d6:	a9 01       	movw	r20, r18
     1d8:	0e 94 20 05 	call	0xa40	; 0xa40 <osbme_init_stack>
}
     1dc:	26 96       	adiw	r28, 0x06	; 6
     1de:	0f b6       	in	r0, 0x3f	; 63
     1e0:	f8 94       	cli
     1e2:	de bf       	out	0x3e, r29	; 62
     1e4:	0f be       	out	0x3f, r0	; 63
     1e6:	cd bf       	out	0x3d, r28	; 61
     1e8:	cf 91       	pop	r28
     1ea:	df 91       	pop	r29
     1ec:	08 95       	ret

000001ee <resched>:
//Через этот указатель будет вызываться обработчик прерывания
void (*kernel_isr)(void);

// Функция перепланировки
void resched(void)
{
     1ee:	df 93       	push	r29
     1f0:	cf 93       	push	r28
     1f2:	cd b7       	in	r28, 0x3d	; 61
     1f4:	de b7       	in	r29, 0x3e	; 62
    kernel_state |= KRN_FLG_RESCHED;
     1f6:	80 91 00 01 	lds	r24, 0x0100
     1fa:	81 60       	ori	r24, 0x01	; 1
     1fc:	80 93 00 01 	sts	0x0100, r24
}
     200:	cf 91       	pop	r28
     202:	df 91       	pop	r29
     204:	08 95       	ret

00000206 <kernel_process_switch>:

__attribute__((naked)) void kernel_process_switch(void)
{
    //Сразу же после обработки отложенных прерываний передаем управление процессу
    kernel_sp = osbme_store_context();
     206:	0e 94 65 00 	call	0xca	; 0xca <osbme_store_context>
     20a:	90 93 1d 02 	sts	0x021D, r25
     20e:	80 93 1c 02 	sts	0x021C, r24
    osbme_load_context( proc_sp );
     212:	80 91 1a 02 	lds	r24, 0x021A
     216:	90 91 1b 02 	lds	r25, 0x021B
     21a:	0e 94 91 00 	call	0x122	; 0x122 <osbme_load_context>
    __asm__ __volatile__("reti"::);/// Дада, именно reti, мы же типа прерывания счас обрабатывали
     21e:	18 95       	reti

00000220 <kernel_thread>:
    osbme_load_context( kernel_sp );
    __asm__ __volatile__("ret"::);
}
///================================================================
void kernel_thread(void)
{
     220:	df 93       	push	r29
     222:	cf 93       	push	r28
     224:	cd b7       	in	r28, 0x3d	; 61
     226:	de b7       	in	r29, 0x3e	; 62
    while(1)
    {
        // Если надо перепланировать - перепланируем
        if( kernel_state & KRN_FLG_RESCHED )
     228:	80 91 00 01 	lds	r24, 0x0100
     22c:	88 2f       	mov	r24, r24
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	81 70       	andi	r24, 0x01	; 1
     232:	90 70       	andi	r25, 0x00	; 0
     234:	88 23       	and	r24, r24
     236:	79 f0       	breq	.+30     	; 0x256 <kernel_thread+0x36>
        {
            kernel_state &= ~KRN_FLG_RESCHED;
     238:	80 91 00 01 	lds	r24, 0x0100
     23c:	8e 7f       	andi	r24, 0xFE	; 254
     23e:	80 93 00 01 	sts	0x0100, r24
            proc_sp = sched_reschedule( proc_sp );
     242:	80 91 1a 02 	lds	r24, 0x021A
     246:	90 91 1b 02 	lds	r25, 0x021B
     24a:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <sched_reschedule>
     24e:	90 93 1b 02 	sts	0x021B, r25
     252:	80 93 1a 02 	sts	0x021A, r24
        }
        /// Прямая передача управления от ядра к процессу, прерывания запрещены
        kernel_process_switch();//В результате выполнения этого прерывания будут разрешены
     256:	0e 94 03 01 	call	0x206	; 0x206 <kernel_process_switch>
        /// Сюда можно попасть только из прерывания, либо из процесса, при этом прерывания опять таки запрещены
        if( kernel_state & KRN_FLG_DO_SCALL )
     25a:	80 91 00 01 	lds	r24, 0x0100
     25e:	88 2f       	mov	r24, r24
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	82 70       	andi	r24, 0x02	; 2
     264:	90 70       	andi	r25, 0x00	; 0
     266:	00 97       	sbiw	r24, 0x00	; 0
     268:	49 f0       	breq	.+18     	; 0x27c <kernel_thread+0x5c>
        {
#ifdef SYSCALL_ISR
            syscall_data_get();
     26a:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <syscall_data_get>
#endif
            do_syscall();
     26e:	0e 94 af 01 	call	0x35e	; 0x35e <do_syscall>
            kernel_state &= ~KRN_FLG_DO_SCALL;
     272:	80 91 00 01 	lds	r24, 0x0100
     276:	8d 7f       	andi	r24, 0xFD	; 253
     278:	80 93 00 01 	sts	0x0100, r24
        }
        // Обработка прерывания
        if( kernel_isr != (void (*)(void))0 )
     27c:	80 91 18 02 	lds	r24, 0x0218
     280:	90 91 19 02 	lds	r25, 0x0219
     284:	00 97       	sbiw	r24, 0x00	; 0
     286:	81 f2       	breq	.-96     	; 0x228 <kernel_thread+0x8>
        {
            kernel_isr();
     288:	e0 91 18 02 	lds	r30, 0x0218
     28c:	f0 91 19 02 	lds	r31, 0x0219
     290:	09 95       	icall
            kernel_isr = (void (*)(void))0;
     292:	10 92 19 02 	sts	0x0219, r1
     296:	10 92 18 02 	sts	0x0218, r1
     29a:	c6 cf       	rjmp	.-116    	; 0x228 <kernel_thread+0x8>

0000029c <__vector_7>:
        }
    }
}

// А вот и первое определение обработчика прерывания
BUGURT_INTERRUPT(SYSTEM_TIMER_ISR)
     29c:	0e 94 65 00 	call	0xca	; 0xca <osbme_store_context>
     2a0:	90 93 1b 02 	sts	0x021B, r25
     2a4:	80 93 1a 02 	sts	0x021A, r24
     2a8:	81 e6       	ldi	r24, 0x61	; 97
     2aa:	91 e0       	ldi	r25, 0x01	; 1
     2ac:	90 93 19 02 	sts	0x0219, r25
     2b0:	80 93 18 02 	sts	0x0218, r24
     2b4:	80 91 1c 02 	lds	r24, 0x021C
     2b8:	90 91 1d 02 	lds	r25, 0x021D
     2bc:	0e 94 91 00 	call	0x122	; 0x122 <osbme_load_context>
     2c0:	08 95       	ret

000002c2 <__vector_7_func>:
{
     2c2:	df 93       	push	r29
     2c4:	cf 93       	push	r28
     2c6:	cd b7       	in	r28, 0x3d	; 61
     2c8:	de b7       	in	r29, 0x3e	; 62
    kernel.timer++;
     2ca:	80 91 78 02 	lds	r24, 0x0278
     2ce:	90 91 79 02 	lds	r25, 0x0279
     2d2:	01 96       	adiw	r24, 0x01	; 1
     2d4:	90 93 79 02 	sts	0x0279, r25
     2d8:	80 93 78 02 	sts	0x0278, r24
    proc_sp = sched_schedule( proc_sp );
     2dc:	80 91 1a 02 	lds	r24, 0x021A
     2e0:	90 91 1b 02 	lds	r25, 0x021B
     2e4:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <sched_schedule>
     2e8:	90 93 1b 02 	sts	0x021B, r25
     2ec:	80 93 1a 02 	sts	0x021A, r24
}
     2f0:	cf 91       	pop	r28
     2f2:	df 91       	pop	r29
     2f4:	08 95       	ret

000002f6 <init_bugurt>:

/***************************************************************************************************************/
// Функции общего пользования

void init_bugurt(void)
{
     2f6:	df 93       	push	r29
     2f8:	cf 93       	push	r28
     2fa:	cd b7       	in	r28, 0x3d	; 61
     2fc:	de b7       	in	r29, 0x3e	; 62
    cli();
     2fe:	f8 94       	cli
    kernel_init();
     300:	0e 94 22 0a 	call	0x1444	; 0x1444 <kernel_init>
    proc_sp = osbme_init_stack( &idle_stack[CONFIG_IDLE_STACK_SIZE-1], idle_main, 0);
     304:	87 e1       	ldi	r24, 0x17	; 23
     306:	92 e0       	ldi	r25, 0x02	; 2
     308:	2e eb       	ldi	r18, 0xBE	; 190
     30a:	32 e1       	ldi	r19, 0x12	; 18
     30c:	b9 01       	movw	r22, r18
     30e:	40 e0       	ldi	r20, 0x00	; 0
     310:	50 e0       	ldi	r21, 0x00	; 0
     312:	0e 94 20 05 	call	0xa40	; 0xa40 <osbme_init_stack>
     316:	90 93 1b 02 	sts	0x021B, r25
     31a:	80 93 1a 02 	sts	0x021A, r24
    kernel.idle.spointer = proc_sp;
     31e:	80 91 1a 02 	lds	r24, 0x021A
     322:	90 91 1b 02 	lds	r25, 0x021B
     326:	90 93 75 02 	sts	0x0275, r25
     32a:	80 93 74 02 	sts	0x0274, r24
    kernel.sched.nested_crit_sec = (count_t)1;
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	90 93 47 02 	sts	0x0247, r25
     336:	80 93 46 02 	sts	0x0246, r24
}
     33a:	cf 91       	pop	r28
     33c:	df 91       	pop	r29
     33e:	08 95       	ret

00000340 <start_bugurt>:
void start_bugurt(void)
{
     340:	df 93       	push	r29
     342:	cf 93       	push	r28
     344:	cd b7       	in	r28, 0x3d	; 61
     346:	de b7       	in	r29, 0x3e	; 62
    start_scheduler();
     348:	0e 94 f6 11 	call	0x23ec	; 0x23ec <start_scheduler>
    kernel.sched.nested_crit_sec = (count_t)0;
     34c:	10 92 47 02 	sts	0x0247, r1
     350:	10 92 46 02 	sts	0x0246, r1
    kernel_thread();
     354:	0e 94 10 01 	call	0x220	; 0x220 <kernel_thread>
}
     358:	cf 91       	pop	r28
     35a:	df 91       	pop	r29
     35c:	08 95       	ret

0000035e <do_syscall>:
    scall_mutex_try_lock,
    scall_mutex_unlock
};

void do_syscall(void)
{
     35e:	df 93       	push	r29
     360:	cf 93       	push	r28
     362:	00 d0       	rcall	.+0      	; 0x364 <do_syscall+0x6>
     364:	00 d0       	rcall	.+0      	; 0x366 <do_syscall+0x8>
     366:	00 d0       	rcall	.+0      	; 0x368 <do_syscall+0xa>
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
    if( syscall_num != (unsigned char)0 )
     36c:	80 91 02 01 	lds	r24, 0x0102
     370:	88 23       	and	r24, r24
     372:	29 f1       	breq	.+74     	; 0x3be <do_syscall+0x60>
    {
        syscall_num--;
     374:	80 91 02 01 	lds	r24, 0x0102
     378:	81 50       	subi	r24, 0x01	; 1
     37a:	80 93 02 01 	sts	0x0102, r24
        code_t syscall_func;
        syscall_func = (code_t)pgm_read_word(syscall_routine + syscall_num);
     37e:	80 91 02 01 	lds	r24, 0x0102
     382:	88 2f       	mov	r24, r24
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	88 0f       	add	r24, r24
     388:	99 1f       	adc	r25, r25
     38a:	88 59       	subi	r24, 0x98	; 152
     38c:	9f 4f       	sbci	r25, 0xFF	; 255
     38e:	9c 83       	std	Y+4, r25	; 0x04
     390:	8b 83       	std	Y+3, r24	; 0x03
     392:	8b 81       	ldd	r24, Y+3	; 0x03
     394:	9c 81       	ldd	r25, Y+4	; 0x04
     396:	fc 01       	movw	r30, r24
     398:	85 91       	lpm	r24, Z+
     39a:	94 91       	lpm	r25, Z+
     39c:	9a 83       	std	Y+2, r25	; 0x02
     39e:	89 83       	std	Y+1, r24	; 0x01
     3a0:	fc 83       	std	Y+4, r31	; 0x04
     3a2:	eb 83       	std	Y+3, r30	; 0x03
     3a4:	89 81       	ldd	r24, Y+1	; 0x01
     3a6:	9a 81       	ldd	r25, Y+2	; 0x02
     3a8:	9e 83       	std	Y+6, r25	; 0x06
     3aa:	8d 83       	std	Y+5, r24	; 0x05
        syscall_func(syscall_arg);
     3ac:	80 91 03 01 	lds	r24, 0x0103
     3b0:	90 91 04 01 	lds	r25, 0x0104
     3b4:	ed 81       	ldd	r30, Y+5	; 0x05
     3b6:	fe 81       	ldd	r31, Y+6	; 0x06
     3b8:	09 95       	icall
        syscall_num = (unsigned char)0;
     3ba:	10 92 02 01 	sts	0x0102, r1
    }
}
     3be:	26 96       	adiw	r28, 0x06	; 6
     3c0:	0f b6       	in	r0, 0x3f	; 63
     3c2:	f8 94       	cli
     3c4:	de bf       	out	0x3e, r29	; 62
     3c6:	0f be       	out	0x3f, r0	; 63
     3c8:	cd bf       	out	0x3d, r28	; 61
     3ca:	cf 91       	pop	r28
     3cc:	df 91       	pop	r29
     3ce:	08 95       	ret

000003d0 <syscall_data_get>:
    unsigned char num;
    void * arg;
} syscall_data_t;

void syscall_data_get(void)
{
     3d0:	df 93       	push	r29
     3d2:	cf 93       	push	r28
     3d4:	00 d0       	rcall	.+0      	; 0x3d6 <syscall_data_get+0x6>
     3d6:	00 d0       	rcall	.+0      	; 0x3d8 <syscall_data_get+0x8>
     3d8:	cd b7       	in	r28, 0x3d	; 61
     3da:	de b7       	in	r29, 0x3e	; 62
    unsigned char * tos;
    unsigned short temp;
    /// Извлечение syscall_num и syscall_arg из стека процесса
    tos = (unsigned char *)proc_sp + PROC_STACK_OFFSET;
     3dc:	80 91 1a 02 	lds	r24, 0x021A
     3e0:	90 91 1b 02 	lds	r25, 0x021B
     3e4:	07 96       	adiw	r24, 0x07	; 7
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	8b 83       	std	Y+3, r24	; 0x03
    temp = (unsigned short)*tos++;
     3ea:	eb 81       	ldd	r30, Y+3	; 0x03
     3ec:	fc 81       	ldd	r31, Y+4	; 0x04
     3ee:	80 81       	ld	r24, Z
     3f0:	88 2f       	mov	r24, r24
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	9a 83       	std	Y+2, r25	; 0x02
     3f6:	89 83       	std	Y+1, r24	; 0x01
     3f8:	8b 81       	ldd	r24, Y+3	; 0x03
     3fa:	9c 81       	ldd	r25, Y+4	; 0x04
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	9c 83       	std	Y+4, r25	; 0x04
     400:	8b 83       	std	Y+3, r24	; 0x03
    temp <<= 8;
     402:	89 81       	ldd	r24, Y+1	; 0x01
     404:	9a 81       	ldd	r25, Y+2	; 0x02
     406:	98 2f       	mov	r25, r24
     408:	88 27       	eor	r24, r24
     40a:	9a 83       	std	Y+2, r25	; 0x02
     40c:	89 83       	std	Y+1, r24	; 0x01
    temp |= (unsigned short)*tos;
     40e:	eb 81       	ldd	r30, Y+3	; 0x03
     410:	fc 81       	ldd	r31, Y+4	; 0x04
     412:	80 81       	ld	r24, Z
     414:	28 2f       	mov	r18, r24
     416:	30 e0       	ldi	r19, 0x00	; 0
     418:	89 81       	ldd	r24, Y+1	; 0x01
     41a:	9a 81       	ldd	r25, Y+2	; 0x02
     41c:	82 2b       	or	r24, r18
     41e:	93 2b       	or	r25, r19
     420:	9a 83       	std	Y+2, r25	; 0x02
     422:	89 83       	std	Y+1, r24	; 0x01

    syscall_num = ((syscall_data_t *)temp)->num;
     424:	e9 81       	ldd	r30, Y+1	; 0x01
     426:	fa 81       	ldd	r31, Y+2	; 0x02
     428:	80 81       	ld	r24, Z
     42a:	80 93 02 01 	sts	0x0102, r24
    syscall_arg = ((syscall_data_t *)temp)->arg;
     42e:	e9 81       	ldd	r30, Y+1	; 0x01
     430:	fa 81       	ldd	r31, Y+2	; 0x02
     432:	81 81       	ldd	r24, Z+1	; 0x01
     434:	92 81       	ldd	r25, Z+2	; 0x02
     436:	90 93 04 01 	sts	0x0104, r25
     43a:	80 93 03 01 	sts	0x0103, r24
}
     43e:	0f 90       	pop	r0
     440:	0f 90       	pop	r0
     442:	0f 90       	pop	r0
     444:	0f 90       	pop	r0
     446:	cf 91       	pop	r28
     448:	df 91       	pop	r29
     44a:	08 95       	ret

0000044c <__vector_2>:

__attribute__ (( signal, naked )) void SYSCALL_ISR(void)
{
    proc_sp = osbme_store_context();
     44c:	0e 94 65 00 	call	0xca	; 0xca <osbme_store_context>
     450:	90 93 1b 02 	sts	0x021B, r25
     454:	80 93 1a 02 	sts	0x021A, r24
    osbme_load_context( kernel_sp );
     458:	80 91 1c 02 	lds	r24, 0x021C
     45c:	90 91 1d 02 	lds	r25, 0x021D
     460:	0e 94 91 00 	call	0x122	; 0x122 <osbme_load_context>
    __asm__ __volatile__("ret"::);
     464:	08 95       	ret

00000466 <_syscall>:
}

syscall_data_t * _syscall( syscall_data_t * arg )
{
     466:	df 93       	push	r29
     468:	cf 93       	push	r28
     46a:	00 d0       	rcall	.+0      	; 0x46c <_syscall+0x6>
     46c:	cd b7       	in	r28, 0x3d	; 61
     46e:	de b7       	in	r29, 0x3e	; 62
     470:	9a 83       	std	Y+2, r25	; 0x02
     472:	89 83       	std	Y+1, r24	; 0x01
    cli();
     474:	f8 94       	cli
    kernel_state |= KRN_FLG_DO_SCALL;
     476:	80 91 00 01 	lds	r24, 0x0100
     47a:	82 60       	ori	r24, 0x02	; 2
     47c:	80 93 00 01 	sts	0x0100, r24
    raise_syscall_interrupt();
     480:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <raise_syscall_interrupt>
    sei();
     484:	78 94       	sei
    return arg;
     486:	89 81       	ldd	r24, Y+1	; 0x01
     488:	9a 81       	ldd	r25, Y+2	; 0x02
}
     48a:	0f 90       	pop	r0
     48c:	0f 90       	pop	r0
     48e:	cf 91       	pop	r28
     490:	df 91       	pop	r29
     492:	08 95       	ret

00000494 <syscall>:

static syscall_data_t scdata;
void syscall( unsigned char num, void * arg )
{
     494:	df 93       	push	r29
     496:	cf 93       	push	r28
     498:	00 d0       	rcall	.+0      	; 0x49a <syscall+0x6>
     49a:	0f 92       	push	r0
     49c:	cd b7       	in	r28, 0x3d	; 61
     49e:	de b7       	in	r29, 0x3e	; 62
     4a0:	89 83       	std	Y+1, r24	; 0x01
     4a2:	7b 83       	std	Y+3, r23	; 0x03
     4a4:	6a 83       	std	Y+2, r22	; 0x02
     scdata.num = num;
     4a6:	89 81       	ldd	r24, Y+1	; 0x01
     4a8:	80 93 05 01 	sts	0x0105, r24
     scdata.arg = arg;
     4ac:	8a 81       	ldd	r24, Y+2	; 0x02
     4ae:	9b 81       	ldd	r25, Y+3	; 0x03
     4b0:	90 93 07 01 	sts	0x0107, r25
     4b4:	80 93 06 01 	sts	0x0106, r24
     _syscall( &scdata );
     4b8:	85 e0       	ldi	r24, 0x05	; 5
     4ba:	91 e0       	ldi	r25, 0x01	; 1
     4bc:	0e 94 33 02 	call	0x466	; 0x466 <_syscall>
     SYSCALL_DELLAY();
     4c0:	00 00       	nop
     4c2:	00 00       	nop
     4c4:	00 00       	nop
     while( kernel_state & KRN_FLG_DO_SCALL );
     4c6:	80 91 00 01 	lds	r24, 0x0100
     4ca:	88 2f       	mov	r24, r24
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	82 70       	andi	r24, 0x02	; 2
     4d0:	90 70       	andi	r25, 0x00	; 0
     4d2:	00 97       	sbiw	r24, 0x00	; 0
     4d4:	c1 f7       	brne	.-16     	; 0x4c6 <syscall+0x32>
}
     4d6:	0f 90       	pop	r0
     4d8:	0f 90       	pop	r0
     4da:	0f 90       	pop	r0
     4dc:	cf 91       	pop	r28
     4de:	df 91       	pop	r29
     4e0:	08 95       	ret

000004e2 <scall_proc_init>:
///                 ОБРАБОТЧИКИ СИСТЕМНЫХ ВЫЗОВОВ
///=================================================================
///                   Управление процессами
//1
void scall_proc_init( void * arg )
{
     4e2:	8f 92       	push	r8
     4e4:	af 92       	push	r10
     4e6:	bf 92       	push	r11
     4e8:	cf 92       	push	r12
     4ea:	df 92       	push	r13
     4ec:	ef 92       	push	r14
     4ee:	ff 92       	push	r15
     4f0:	0f 93       	push	r16
     4f2:	1f 93       	push	r17
     4f4:	df 93       	push	r29
     4f6:	cf 93       	push	r28
     4f8:	00 d0       	rcall	.+0      	; 0x4fa <scall_proc_init+0x18>
     4fa:	cd b7       	in	r28, 0x3d	; 61
     4fc:	de b7       	in	r29, 0x3e	; 62
     4fe:	9a 83       	std	Y+2, r25	; 0x02
     500:	89 83       	std	Y+1, r24	; 0x01
    proc_init_isr(
     502:	e9 81       	ldd	r30, Y+1	; 0x01
     504:	fa 81       	ldd	r31, Y+2	; 0x02
     506:	80 81       	ld	r24, Z
     508:	91 81       	ldd	r25, Z+1	; 0x01
     50a:	e9 81       	ldd	r30, Y+1	; 0x01
     50c:	fa 81       	ldd	r31, Y+2	; 0x02
     50e:	22 81       	ldd	r18, Z+2	; 0x02
     510:	33 81       	ldd	r19, Z+3	; 0x03
     512:	e9 81       	ldd	r30, Y+1	; 0x01
     514:	fa 81       	ldd	r31, Y+2	; 0x02
     516:	44 81       	ldd	r20, Z+4	; 0x04
     518:	55 81       	ldd	r21, Z+5	; 0x05
     51a:	e9 81       	ldd	r30, Y+1	; 0x01
     51c:	fa 81       	ldd	r31, Y+2	; 0x02
     51e:	06 81       	ldd	r16, Z+6	; 0x06
     520:	17 81       	ldd	r17, Z+7	; 0x07
     522:	e9 81       	ldd	r30, Y+1	; 0x01
     524:	fa 81       	ldd	r31, Y+2	; 0x02
     526:	e0 84       	ldd	r14, Z+8	; 0x08
     528:	f1 84       	ldd	r15, Z+9	; 0x09
     52a:	e9 81       	ldd	r30, Y+1	; 0x01
     52c:	fa 81       	ldd	r31, Y+2	; 0x02
     52e:	c2 84       	ldd	r12, Z+10	; 0x0a
     530:	d3 84       	ldd	r13, Z+11	; 0x0b
     532:	e9 81       	ldd	r30, Y+1	; 0x01
     534:	fa 81       	ldd	r31, Y+2	; 0x02
     536:	b4 84       	ldd	r11, Z+12	; 0x0c
     538:	e9 81       	ldd	r30, Y+1	; 0x01
     53a:	fa 81       	ldd	r31, Y+2	; 0x02
     53c:	a5 85       	ldd	r26, Z+13	; 0x0d
     53e:	b6 85       	ldd	r27, Z+14	; 0x0e
     540:	e9 81       	ldd	r30, Y+1	; 0x01
     542:	fa 81       	ldd	r31, Y+2	; 0x02
     544:	e7 85       	ldd	r30, Z+15	; 0x0f
     546:	b9 01       	movw	r22, r18
     548:	98 01       	movw	r18, r16
     54a:	87 01       	movw	r16, r14
     54c:	76 01       	movw	r14, r12
     54e:	cb 2c       	mov	r12, r11
     550:	5d 01       	movw	r10, r26
     552:	8e 2e       	mov	r8, r30
     554:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <proc_init_isr>
              ((proc_init_arg_t *)arg)->sstart,
              ((proc_init_arg_t *)arg)->prio,
              ((proc_init_arg_t *)arg)->time_quant,
              ((proc_init_arg_t *)arg)->is_rt
              );
}
     558:	0f 90       	pop	r0
     55a:	0f 90       	pop	r0
     55c:	cf 91       	pop	r28
     55e:	df 91       	pop	r29
     560:	1f 91       	pop	r17
     562:	0f 91       	pop	r16
     564:	ff 90       	pop	r15
     566:	ef 90       	pop	r14
     568:	df 90       	pop	r13
     56a:	cf 90       	pop	r12
     56c:	bf 90       	pop	r11
     56e:	af 90       	pop	r10
     570:	8f 90       	pop	r8
     572:	08 95       	ret

00000574 <proc_init>:
                    stack_t *sstart,
                    prio_t prio,
                    timer_t time_quant,
                    bool_t is_rt // если true, значит процесс будет иметть поведение RT
                  )
{
     574:	8f 92       	push	r8
     576:	af 92       	push	r10
     578:	bf 92       	push	r11
     57a:	cf 92       	push	r12
     57c:	ef 92       	push	r14
     57e:	ff 92       	push	r15
     580:	0f 93       	push	r16
     582:	1f 93       	push	r17
     584:	df 93       	push	r29
     586:	cf 93       	push	r28
     588:	cd b7       	in	r28, 0x3d	; 61
     58a:	de b7       	in	r29, 0x3e	; 62
     58c:	60 97       	sbiw	r28, 0x10	; 16
     58e:	0f b6       	in	r0, 0x3f	; 63
     590:	f8 94       	cli
     592:	de bf       	out	0x3e, r29	; 62
     594:	0f be       	out	0x3f, r0	; 63
     596:	cd bf       	out	0x3d, r28	; 61
     598:	9a 83       	std	Y+2, r25	; 0x02
     59a:	89 83       	std	Y+1, r24	; 0x01
     59c:	7c 83       	std	Y+4, r23	; 0x04
     59e:	6b 83       	std	Y+3, r22	; 0x03
     5a0:	5e 83       	std	Y+6, r21	; 0x06
     5a2:	4d 83       	std	Y+5, r20	; 0x05
     5a4:	38 87       	std	Y+8, r19	; 0x08
     5a6:	2f 83       	std	Y+7, r18	; 0x07
     5a8:	1a 87       	std	Y+10, r17	; 0x0a
     5aa:	09 87       	std	Y+9, r16	; 0x09
     5ac:	fc 86       	std	Y+12, r15	; 0x0c
     5ae:	eb 86       	std	Y+11, r14	; 0x0b
     5b0:	cd 86       	std	Y+13, r12	; 0x0d
     5b2:	bf 86       	std	Y+15, r11	; 0x0f
     5b4:	ae 86       	std	Y+14, r10	; 0x0e
     5b6:	88 8a       	std	Y+16, r8	; 0x10
    scarg.proc = proc;
     5b8:	89 81       	ldd	r24, Y+1	; 0x01
     5ba:	9a 81       	ldd	r25, Y+2	; 0x02
     5bc:	90 93 09 01 	sts	0x0109, r25
     5c0:	80 93 08 01 	sts	0x0108, r24
    scarg.pmain = pmain;
     5c4:	8b 81       	ldd	r24, Y+3	; 0x03
     5c6:	9c 81       	ldd	r25, Y+4	; 0x04
     5c8:	90 93 0b 01 	sts	0x010B, r25
     5cc:	80 93 0a 01 	sts	0x010A, r24
    scarg.sv_hook = sv_hook;
     5d0:	8d 81       	ldd	r24, Y+5	; 0x05
     5d2:	9e 81       	ldd	r25, Y+6	; 0x06
     5d4:	90 93 0d 01 	sts	0x010D, r25
     5d8:	80 93 0c 01 	sts	0x010C, r24
    scarg.rs_hook = rs_hook;
     5dc:	8f 81       	ldd	r24, Y+7	; 0x07
     5de:	98 85       	ldd	r25, Y+8	; 0x08
     5e0:	90 93 0f 01 	sts	0x010F, r25
     5e4:	80 93 0e 01 	sts	0x010E, r24
    scarg.arg = arg;
     5e8:	89 85       	ldd	r24, Y+9	; 0x09
     5ea:	9a 85       	ldd	r25, Y+10	; 0x0a
     5ec:	90 93 11 01 	sts	0x0111, r25
     5f0:	80 93 10 01 	sts	0x0110, r24
    scarg.sstart = sstart;
     5f4:	8b 85       	ldd	r24, Y+11	; 0x0b
     5f6:	9c 85       	ldd	r25, Y+12	; 0x0c
     5f8:	90 93 13 01 	sts	0x0113, r25
     5fc:	80 93 12 01 	sts	0x0112, r24
    scarg.prio = prio;
     600:	8d 85       	ldd	r24, Y+13	; 0x0d
     602:	80 93 14 01 	sts	0x0114, r24
    scarg.time_quant = time_quant;
     606:	8e 85       	ldd	r24, Y+14	; 0x0e
     608:	9f 85       	ldd	r25, Y+15	; 0x0f
     60a:	90 93 16 01 	sts	0x0116, r25
     60e:	80 93 15 01 	sts	0x0115, r24
    scarg.is_rt = is_rt;
     612:	88 89       	ldd	r24, Y+16	; 0x10
     614:	80 93 17 01 	sts	0x0117, r24

    syscall(1,(void *)&scarg);
     618:	28 e0       	ldi	r18, 0x08	; 8
     61a:	31 e0       	ldi	r19, 0x01	; 1
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	b9 01       	movw	r22, r18
     620:	0e 94 4a 02 	call	0x494	; 0x494 <syscall>
}
     624:	60 96       	adiw	r28, 0x10	; 16
     626:	0f b6       	in	r0, 0x3f	; 63
     628:	f8 94       	cli
     62a:	de bf       	out	0x3e, r29	; 62
     62c:	0f be       	out	0x3f, r0	; 63
     62e:	cd bf       	out	0x3d, r28	; 61
     630:	cf 91       	pop	r28
     632:	df 91       	pop	r29
     634:	1f 91       	pop	r17
     636:	0f 91       	pop	r16
     638:	ff 90       	pop	r15
     63a:	ef 90       	pop	r14
     63c:	cf 90       	pop	r12
     63e:	bf 90       	pop	r11
     640:	af 90       	pop	r10
     642:	8f 90       	pop	r8
     644:	08 95       	ret

00000646 <scall_proc_run>:
//---------------------------------------------------------------------------------------------
//2
void scall_proc_run( void * arg )
{
     646:	0f 93       	push	r16
     648:	1f 93       	push	r17
     64a:	df 93       	push	r29
     64c:	cf 93       	push	r28
     64e:	00 d0       	rcall	.+0      	; 0x650 <scall_proc_run+0xa>
     650:	cd b7       	in	r28, 0x3d	; 61
     652:	de b7       	in	r29, 0x3e	; 62
     654:	9a 83       	std	Y+2, r25	; 0x02
     656:	89 83       	std	Y+1, r24	; 0x01
    ((proc_runtime_arg_t *)arg)->scall_ret = proc_run_isr( ((proc_runtime_arg_t *)arg)->proc );
     658:	09 81       	ldd	r16, Y+1	; 0x01
     65a:	1a 81       	ldd	r17, Y+2	; 0x02
     65c:	e9 81       	ldd	r30, Y+1	; 0x01
     65e:	fa 81       	ldd	r31, Y+2	; 0x02
     660:	80 81       	ld	r24, Z
     662:	91 81       	ldd	r25, Z+1	; 0x01
     664:	0e 94 9e 0c 	call	0x193c	; 0x193c <proc_run_isr>
     668:	f8 01       	movw	r30, r16
     66a:	82 83       	std	Z+2, r24	; 0x02
}
     66c:	0f 90       	pop	r0
     66e:	0f 90       	pop	r0
     670:	cf 91       	pop	r28
     672:	df 91       	pop	r29
     674:	1f 91       	pop	r17
     676:	0f 91       	pop	r16
     678:	08 95       	ret

0000067a <proc_run>:
bool_t proc_run( proc_t * proc )
{
     67a:	df 93       	push	r29
     67c:	cf 93       	push	r28
     67e:	00 d0       	rcall	.+0      	; 0x680 <proc_run+0x6>
     680:	00 d0       	rcall	.+0      	; 0x682 <proc_run+0x8>
     682:	0f 92       	push	r0
     684:	cd b7       	in	r28, 0x3d	; 61
     686:	de b7       	in	r29, 0x3e	; 62
     688:	9d 83       	std	Y+5, r25	; 0x05
     68a:	8c 83       	std	Y+4, r24	; 0x04
    proc_runtime_arg_t scarg;
    scarg.proc = proc;
     68c:	8c 81       	ldd	r24, Y+4	; 0x04
     68e:	9d 81       	ldd	r25, Y+5	; 0x05
     690:	9a 83       	std	Y+2, r25	; 0x02
     692:	89 83       	std	Y+1, r24	; 0x01
    scarg.scall_ret = (bool_t)0;
     694:	1b 82       	std	Y+3, r1	; 0x03

    syscall(2,(void *)&scarg);
     696:	82 e0       	ldi	r24, 0x02	; 2
     698:	9e 01       	movw	r18, r28
     69a:	2f 5f       	subi	r18, 0xFF	; 255
     69c:	3f 4f       	sbci	r19, 0xFF	; 255
     69e:	b9 01       	movw	r22, r18
     6a0:	0e 94 4a 02 	call	0x494	; 0x494 <syscall>
    return scarg.scall_ret;
     6a4:	8b 81       	ldd	r24, Y+3	; 0x03
}
     6a6:	0f 90       	pop	r0
     6a8:	0f 90       	pop	r0
     6aa:	0f 90       	pop	r0
     6ac:	0f 90       	pop	r0
     6ae:	0f 90       	pop	r0
     6b0:	cf 91       	pop	r28
     6b2:	df 91       	pop	r29
     6b4:	08 95       	ret

000006b6 <scall_proc_restart>:
//---------------------------------------------------------------------------------------------
//3
void scall_proc_restart( void * arg )
{
     6b6:	0f 93       	push	r16
     6b8:	1f 93       	push	r17
     6ba:	df 93       	push	r29
     6bc:	cf 93       	push	r28
     6be:	00 d0       	rcall	.+0      	; 0x6c0 <scall_proc_restart+0xa>
     6c0:	cd b7       	in	r28, 0x3d	; 61
     6c2:	de b7       	in	r29, 0x3e	; 62
     6c4:	9a 83       	std	Y+2, r25	; 0x02
     6c6:	89 83       	std	Y+1, r24	; 0x01
    ((proc_runtime_arg_t *)arg)->scall_ret = proc_restart_isr( ((proc_runtime_arg_t *)arg)->proc );
     6c8:	09 81       	ldd	r16, Y+1	; 0x01
     6ca:	1a 81       	ldd	r17, Y+2	; 0x02
     6cc:	e9 81       	ldd	r30, Y+1	; 0x01
     6ce:	fa 81       	ldd	r31, Y+2	; 0x02
     6d0:	80 81       	ld	r24, Z
     6d2:	91 81       	ldd	r25, Z+1	; 0x01
     6d4:	0e 94 be 0c 	call	0x197c	; 0x197c <proc_restart_isr>
     6d8:	f8 01       	movw	r30, r16
     6da:	82 83       	std	Z+2, r24	; 0x02
}
     6dc:	0f 90       	pop	r0
     6de:	0f 90       	pop	r0
     6e0:	cf 91       	pop	r28
     6e2:	df 91       	pop	r29
     6e4:	1f 91       	pop	r17
     6e6:	0f 91       	pop	r16
     6e8:	08 95       	ret

000006ea <proc_restart>:
bool_t proc_restart( proc_t * proc )
{
     6ea:	df 93       	push	r29
     6ec:	cf 93       	push	r28
     6ee:	00 d0       	rcall	.+0      	; 0x6f0 <proc_restart+0x6>
     6f0:	00 d0       	rcall	.+0      	; 0x6f2 <proc_restart+0x8>
     6f2:	0f 92       	push	r0
     6f4:	cd b7       	in	r28, 0x3d	; 61
     6f6:	de b7       	in	r29, 0x3e	; 62
     6f8:	9d 83       	std	Y+5, r25	; 0x05
     6fa:	8c 83       	std	Y+4, r24	; 0x04
    proc_runtime_arg_t scarg;
    scarg.proc = proc;
     6fc:	8c 81       	ldd	r24, Y+4	; 0x04
     6fe:	9d 81       	ldd	r25, Y+5	; 0x05
     700:	9a 83       	std	Y+2, r25	; 0x02
     702:	89 83       	std	Y+1, r24	; 0x01

    syscall(3,(void *)&scarg);
     704:	83 e0       	ldi	r24, 0x03	; 3
     706:	9e 01       	movw	r18, r28
     708:	2f 5f       	subi	r18, 0xFF	; 255
     70a:	3f 4f       	sbci	r19, 0xFF	; 255
     70c:	b9 01       	movw	r22, r18
     70e:	0e 94 4a 02 	call	0x494	; 0x494 <syscall>
    return scarg.scall_ret;
     712:	8b 81       	ldd	r24, Y+3	; 0x03
}
     714:	0f 90       	pop	r0
     716:	0f 90       	pop	r0
     718:	0f 90       	pop	r0
     71a:	0f 90       	pop	r0
     71c:	0f 90       	pop	r0
     71e:	cf 91       	pop	r28
     720:	df 91       	pop	r29
     722:	08 95       	ret

00000724 <scall_proc_stop>:
//---------------------------------------------------------------------------------------------
//4
void scall_proc_stop( void * arg )
{
     724:	0f 93       	push	r16
     726:	1f 93       	push	r17
     728:	df 93       	push	r29
     72a:	cf 93       	push	r28
     72c:	00 d0       	rcall	.+0      	; 0x72e <scall_proc_stop+0xa>
     72e:	cd b7       	in	r28, 0x3d	; 61
     730:	de b7       	in	r29, 0x3e	; 62
     732:	9a 83       	std	Y+2, r25	; 0x02
     734:	89 83       	std	Y+1, r24	; 0x01
    ((proc_runtime_arg_t *)arg)->scall_ret = proc_stop_isr( ((proc_runtime_arg_t *)arg)->proc );
     736:	09 81       	ldd	r16, Y+1	; 0x01
     738:	1a 81       	ldd	r17, Y+2	; 0x02
     73a:	e9 81       	ldd	r30, Y+1	; 0x01
     73c:	fa 81       	ldd	r31, Y+2	; 0x02
     73e:	80 81       	ld	r24, Z
     740:	91 81       	ldd	r25, Z+1	; 0x01
     742:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <proc_stop_isr>
     746:	f8 01       	movw	r30, r16
     748:	82 83       	std	Z+2, r24	; 0x02
}
     74a:	0f 90       	pop	r0
     74c:	0f 90       	pop	r0
     74e:	cf 91       	pop	r28
     750:	df 91       	pop	r29
     752:	1f 91       	pop	r17
     754:	0f 91       	pop	r16
     756:	08 95       	ret

00000758 <scall_proc_self_stop>:
}

//---------------------------------------------------------------------------------------------
//5
void scall_proc_self_stop( void * arg )
{
     758:	df 93       	push	r29
     75a:	cf 93       	push	r28
     75c:	00 d0       	rcall	.+0      	; 0x75e <scall_proc_self_stop+0x6>
     75e:	00 d0       	rcall	.+0      	; 0x760 <scall_proc_self_stop+0x8>
     760:	cd b7       	in	r28, 0x3d	; 61
     762:	de b7       	in	r29, 0x3e	; 62
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = kernel.sched.current_proc;
     768:	80 91 1e 02 	lds	r24, 0x021E
     76c:	90 91 1f 02 	lds	r25, 0x021F
     770:	9a 83       	std	Y+2, r25	; 0x02
     772:	89 83       	std	Y+1, r24	; 0x01
    _proc_stop( proc );
     774:	89 81       	ldd	r24, Y+1	; 0x01
     776:	9a 81       	ldd	r25, Y+2	; 0x02
     778:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <_proc_stop>
}
     77c:	0f 90       	pop	r0
     77e:	0f 90       	pop	r0
     780:	0f 90       	pop	r0
     782:	0f 90       	pop	r0
     784:	cf 91       	pop	r28
     786:	df 91       	pop	r29
     788:	08 95       	ret

0000078a <proc_self_stop>:
void proc_self_stop(void)
{
     78a:	df 93       	push	r29
     78c:	cf 93       	push	r28
     78e:	cd b7       	in	r28, 0x3d	; 61
     790:	de b7       	in	r29, 0x3e	; 62
    syscall(5,(void *)1);
     792:	85 e0       	ldi	r24, 0x05	; 5
     794:	61 e0       	ldi	r22, 0x01	; 1
     796:	70 e0       	ldi	r23, 0x00	; 0
     798:	0e 94 4a 02 	call	0x494	; 0x494 <syscall>
}
     79c:	cf 91       	pop	r28
     79e:	df 91       	pop	r29
     7a0:	08 95       	ret

000007a2 <scall_proc_terminate>:
//---------------------------------------------------------------------------------------------
//6
/// Останов процесса после выхода из pmain, для обертки proc_run_wrapper
void scall_proc_terminate( void * arg )
{
     7a2:	df 93       	push	r29
     7a4:	cf 93       	push	r28
     7a6:	00 d0       	rcall	.+0      	; 0x7a8 <scall_proc_terminate+0x6>
     7a8:	00 d0       	rcall	.+0      	; 0x7aa <scall_proc_terminate+0x8>
     7aa:	cd b7       	in	r28, 0x3d	; 61
     7ac:	de b7       	in	r29, 0x3e	; 62
     7ae:	9c 83       	std	Y+4, r25	; 0x04
     7b0:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = (proc_t *)arg;
     7b2:	8b 81       	ldd	r24, Y+3	; 0x03
     7b4:	9c 81       	ldd	r25, Y+4	; 0x04
     7b6:	9a 83       	std	Y+2, r25	; 0x02
     7b8:	89 83       	std	Y+1, r24	; 0x01
    // Обрабатываем флаги
    // Нельзя выходить из pmain не освободив все захваченные ресурсы, за это процесс будет "убит"!
    if( proc->flags & PROC_FLG_HOLD ) proc->flags |= PROC_FLG_DEAD;
     7ba:	e9 81       	ldd	r30, Y+1	; 0x01
     7bc:	fa 81       	ldd	r31, Y+2	; 0x02
     7be:	83 85       	ldd	r24, Z+11	; 0x0b
     7c0:	88 2f       	mov	r24, r24
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	84 70       	andi	r24, 0x04	; 4
     7c6:	90 70       	andi	r25, 0x00	; 0
     7c8:	00 97       	sbiw	r24, 0x00	; 0
     7ca:	41 f0       	breq	.+16     	; 0x7dc <scall_proc_terminate+0x3a>
     7cc:	e9 81       	ldd	r30, Y+1	; 0x01
     7ce:	fa 81       	ldd	r31, Y+2	; 0x02
     7d0:	83 85       	ldd	r24, Z+11	; 0x0b
     7d2:	80 68       	ori	r24, 0x80	; 128
     7d4:	e9 81       	ldd	r30, Y+1	; 0x01
     7d6:	fa 81       	ldd	r31, Y+2	; 0x02
     7d8:	83 87       	std	Z+11, r24	; 0x0b
     7da:	07 c0       	rjmp	.+14     	; 0x7ea <scall_proc_terminate+0x48>
    // В противном случае - просто завершаем процесс
    else proc->flags |= PROC_FLG_END;
     7dc:	e9 81       	ldd	r30, Y+1	; 0x01
     7de:	fa 81       	ldd	r31, Y+2	; 0x02
     7e0:	83 85       	ldd	r24, Z+11	; 0x0b
     7e2:	80 64       	ori	r24, 0x40	; 64
     7e4:	e9 81       	ldd	r30, Y+1	; 0x01
     7e6:	fa 81       	ldd	r31, Y+2	; 0x02
     7e8:	83 87       	std	Z+11, r24	; 0x0b
    proc->flags &= ~(PROC_FLG_PRE_END|PROC_FLG_RUN);
     7ea:	e9 81       	ldd	r30, Y+1	; 0x01
     7ec:	fa 81       	ldd	r31, Y+2	; 0x02
     7ee:	83 85       	ldd	r24, Z+11	; 0x0b
     7f0:	8d 7d       	andi	r24, 0xDD	; 221
     7f2:	e9 81       	ldd	r30, Y+1	; 0x01
     7f4:	fa 81       	ldd	r31, Y+2	; 0x02
     7f6:	83 87       	std	Z+11, r24	; 0x0b
    // Останов
    _proc_stop_( proc );
     7f8:	89 81       	ldd	r24, Y+1	; 0x01
     7fa:	9a 81       	ldd	r25, Y+2	; 0x02
     7fc:	0e 94 3f 08 	call	0x107e	; 0x107e <gitem_cut>
    // Выполнить перепланировку
    resched();
     800:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
}
     804:	0f 90       	pop	r0
     806:	0f 90       	pop	r0
     808:	0f 90       	pop	r0
     80a:	0f 90       	pop	r0
     80c:	cf 91       	pop	r28
     80e:	df 91       	pop	r29
     810:	08 95       	ret

00000812 <proc_run_wrapper>:
void proc_run_wrapper( proc_t * proc )
{
     812:	df 93       	push	r29
     814:	cf 93       	push	r28
     816:	00 d0       	rcall	.+0      	; 0x818 <proc_run_wrapper+0x6>
     818:	00 d0       	rcall	.+0      	; 0x81a <proc_run_wrapper+0x8>
     81a:	00 d0       	rcall	.+0      	; 0x81c <proc_run_wrapper+0xa>
     81c:	cd b7       	in	r28, 0x3d	; 61
     81e:	de b7       	in	r29, 0x3e	; 62
     820:	9e 83       	std	Y+6, r25	; 0x06
     822:	8d 83       	std	Y+5, r24	; 0x05
    //Атомарно читаем pmain и arg
    cli();
     824:	f8 94       	cli
    code_t pmain = proc->pmain;
     826:	ed 81       	ldd	r30, Y+5	; 0x05
     828:	fe 81       	ldd	r31, Y+6	; 0x06
     82a:	82 a1       	ldd	r24, Z+34	; 0x22
     82c:	93 a1       	ldd	r25, Z+35	; 0x23
     82e:	9c 83       	std	Y+4, r25	; 0x04
     830:	8b 83       	std	Y+3, r24	; 0x03
    void * arg = proc->arg;
     832:	ed 81       	ldd	r30, Y+5	; 0x05
     834:	fe 81       	ldd	r31, Y+6	; 0x06
     836:	80 a5       	ldd	r24, Z+40	; 0x28
     838:	91 a5       	ldd	r25, Z+41	; 0x29
     83a:	9a 83       	std	Y+2, r25	; 0x02
     83c:	89 83       	std	Y+1, r24	; 0x01
    sei();
     83e:	78 94       	sei
    //Выполняем pmain
    pmain( arg );
     840:	89 81       	ldd	r24, Y+1	; 0x01
     842:	9a 81       	ldd	r25, Y+2	; 0x02
     844:	eb 81       	ldd	r30, Y+3	; 0x03
     846:	fc 81       	ldd	r31, Y+4	; 0x04
     848:	09 95       	icall
    // Завершаем процесс
    syscall(6,(void *)proc);
     84a:	2d 81       	ldd	r18, Y+5	; 0x05
     84c:	3e 81       	ldd	r19, Y+6	; 0x06
     84e:	86 e0       	ldi	r24, 0x06	; 6
     850:	b9 01       	movw	r22, r18
     852:	0e 94 4a 02 	call	0x494	; 0x494 <syscall>
}
     856:	26 96       	adiw	r28, 0x06	; 6
     858:	0f b6       	in	r0, 0x3f	; 63
     85a:	f8 94       	cli
     85c:	de bf       	out	0x3e, r29	; 62
     85e:	0f be       	out	0x3f, r0	; 63
     860:	cd bf       	out	0x3d, r28	; 61
     862:	cf 91       	pop	r28
     864:	df 91       	pop	r29
     866:	08 95       	ret

00000868 <scall_proc_flag_stop>:
//---------------------------------------------------------------------------------------------
//7
void scall_proc_flag_stop( void * arg )
{
     868:	df 93       	push	r29
     86a:	cf 93       	push	r28
     86c:	00 d0       	rcall	.+0      	; 0x86e <scall_proc_flag_stop+0x6>
     86e:	cd b7       	in	r28, 0x3d	; 61
     870:	de b7       	in	r29, 0x3e	; 62
     872:	9a 83       	std	Y+2, r25	; 0x02
     874:	89 83       	std	Y+1, r24	; 0x01
    _proc_flag_stop_isr( *((flag_t *)arg) );
     876:	e9 81       	ldd	r30, Y+1	; 0x01
     878:	fa 81       	ldd	r31, Y+2	; 0x02
     87a:	80 81       	ld	r24, Z
     87c:	0e 94 75 0d 	call	0x1aea	; 0x1aea <_proc_flag_stop_isr>
}
     880:	0f 90       	pop	r0
     882:	0f 90       	pop	r0
     884:	cf 91       	pop	r28
     886:	df 91       	pop	r29
     888:	08 95       	ret

0000088a <scall_sig_init>:
///=================================================================
///                         Сигналы
//8
void scall_sig_init( void * arg )
{
     88a:	df 93       	push	r29
     88c:	cf 93       	push	r28
     88e:	00 d0       	rcall	.+0      	; 0x890 <scall_sig_init+0x6>
     890:	cd b7       	in	r28, 0x3d	; 61
     892:	de b7       	in	r29, 0x3e	; 62
     894:	9a 83       	std	Y+2, r25	; 0x02
     896:	89 83       	std	Y+1, r24	; 0x01
    sig_init_isr( (sig_t *)arg );
     898:	89 81       	ldd	r24, Y+1	; 0x01
     89a:	9a 81       	ldd	r25, Y+2	; 0x02
     89c:	0e 94 7f 10 	call	0x20fe	; 0x20fe <sig_init_isr>
}
     8a0:	0f 90       	pop	r0
     8a2:	0f 90       	pop	r0
     8a4:	cf 91       	pop	r28
     8a6:	df 91       	pop	r29
     8a8:	08 95       	ret

000008aa <scall_sig_wait>:
    syscall( 8, (void *)sig );
}
//---------------------------------------------------------------------------------------------
//9
void scall_sig_wait( void * arg )
{
     8aa:	df 93       	push	r29
     8ac:	cf 93       	push	r28
     8ae:	00 d0       	rcall	.+0      	; 0x8b0 <scall_sig_wait+0x6>
     8b0:	cd b7       	in	r28, 0x3d	; 61
     8b2:	de b7       	in	r29, 0x3e	; 62
     8b4:	9a 83       	std	Y+2, r25	; 0x02
     8b6:	89 83       	std	Y+1, r24	; 0x01
    sig_wait_stage_1_isr( (sig_t *)arg );
     8b8:	89 81       	ldd	r24, Y+1	; 0x01
     8ba:	9a 81       	ldd	r25, Y+2	; 0x02
     8bc:	0e 94 8f 10 	call	0x211e	; 0x211e <sig_wait_stage_1_isr>
}
     8c0:	0f 90       	pop	r0
     8c2:	0f 90       	pop	r0
     8c4:	cf 91       	pop	r28
     8c6:	df 91       	pop	r29
     8c8:	08 95       	ret

000008ca <scall_sig_signal>:
    syscall( 7, (void *)&mask );/// Останов в случае необходимости
}
//---------------------------------------------------------------------------------------------
//10
void scall_sig_signal( void * arg )
{
     8ca:	df 93       	push	r29
     8cc:	cf 93       	push	r28
     8ce:	00 d0       	rcall	.+0      	; 0x8d0 <scall_sig_signal+0x6>
     8d0:	cd b7       	in	r28, 0x3d	; 61
     8d2:	de b7       	in	r29, 0x3e	; 62
     8d4:	9a 83       	std	Y+2, r25	; 0x02
     8d6:	89 83       	std	Y+1, r24	; 0x01
    sig_signal_isr( (sig_t *)arg );
     8d8:	89 81       	ldd	r24, Y+1	; 0x01
     8da:	9a 81       	ldd	r25, Y+2	; 0x02
     8dc:	0e 94 b4 10 	call	0x2168	; 0x2168 <sig_signal_isr>
}
     8e0:	0f 90       	pop	r0
     8e2:	0f 90       	pop	r0
     8e4:	cf 91       	pop	r28
     8e6:	df 91       	pop	r29
     8e8:	08 95       	ret

000008ea <scall_sig_broadcast>:
    syscall( 10, (void *)sig );
}
//---------------------------------------------------------------------------------------------
//11
void scall_sig_broadcast( void * arg )
{
     8ea:	df 93       	push	r29
     8ec:	cf 93       	push	r28
     8ee:	00 d0       	rcall	.+0      	; 0x8f0 <scall_sig_broadcast+0x6>
     8f0:	cd b7       	in	r28, 0x3d	; 61
     8f2:	de b7       	in	r29, 0x3e	; 62
     8f4:	9a 83       	std	Y+2, r25	; 0x02
     8f6:	89 83       	std	Y+1, r24	; 0x01
    sig_broadcast_isr( (sig_t *)arg );
     8f8:	89 81       	ldd	r24, Y+1	; 0x01
     8fa:	9a 81       	ldd	r25, Y+2	; 0x02
     8fc:	0e 94 dd 10 	call	0x21ba	; 0x21ba <sig_broadcast_isr>
}
     900:	0f 90       	pop	r0
     902:	0f 90       	pop	r0
     904:	cf 91       	pop	r28
     906:	df 91       	pop	r29
     908:	08 95       	ret

0000090a <scall_sem_init>:
}
///=================================================================
///                         Семафоры
//12
void scall_sem_init( void * arg )
{
     90a:	df 93       	push	r29
     90c:	cf 93       	push	r28
     90e:	00 d0       	rcall	.+0      	; 0x910 <scall_sem_init+0x6>
     910:	cd b7       	in	r28, 0x3d	; 61
     912:	de b7       	in	r29, 0x3e	; 62
     914:	9a 83       	std	Y+2, r25	; 0x02
     916:	89 83       	std	Y+1, r24	; 0x01
    sem_init_isr( ((sem_init_arg_t *)arg)->sem, ((sem_init_arg_t *)arg)->count );
     918:	e9 81       	ldd	r30, Y+1	; 0x01
     91a:	fa 81       	ldd	r31, Y+2	; 0x02
     91c:	80 81       	ld	r24, Z
     91e:	91 81       	ldd	r25, Z+1	; 0x01
     920:	e9 81       	ldd	r30, Y+1	; 0x01
     922:	fa 81       	ldd	r31, Y+2	; 0x02
     924:	22 81       	ldd	r18, Z+2	; 0x02
     926:	33 81       	ldd	r19, Z+3	; 0x03
     928:	b9 01       	movw	r22, r18
     92a:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <sem_init_isr>
}
     92e:	0f 90       	pop	r0
     930:	0f 90       	pop	r0
     932:	cf 91       	pop	r28
     934:	df 91       	pop	r29
     936:	08 95       	ret

00000938 <scall_sem_lock>:
    syscall( 12, (void *)&scarg );
}
//----------------------------------------------------------------------
//13
void scall_sem_lock( void * arg )
{
     938:	0f 93       	push	r16
     93a:	1f 93       	push	r17
     93c:	df 93       	push	r29
     93e:	cf 93       	push	r28
     940:	00 d0       	rcall	.+0      	; 0x942 <scall_sem_lock+0xa>
     942:	cd b7       	in	r28, 0x3d	; 61
     944:	de b7       	in	r29, 0x3e	; 62
     946:	9a 83       	std	Y+2, r25	; 0x02
     948:	89 83       	std	Y+1, r24	; 0x01
    ((sem_lock_arg_t *)arg)->scall_ret = _sem_lock( ((sem_lock_arg_t *)arg)->sem );
     94a:	09 81       	ldd	r16, Y+1	; 0x01
     94c:	1a 81       	ldd	r17, Y+2	; 0x02
     94e:	e9 81       	ldd	r30, Y+1	; 0x01
     950:	fa 81       	ldd	r31, Y+2	; 0x02
     952:	80 81       	ld	r24, Z
     954:	91 81       	ldd	r25, Z+1	; 0x01
     956:	0e 94 11 10 	call	0x2022	; 0x2022 <_sem_lock>
     95a:	f8 01       	movw	r30, r16
     95c:	82 83       	std	Z+2, r24	; 0x02
}
     95e:	0f 90       	pop	r0
     960:	0f 90       	pop	r0
     962:	cf 91       	pop	r28
     964:	df 91       	pop	r29
     966:	1f 91       	pop	r17
     968:	0f 91       	pop	r16
     96a:	08 95       	ret

0000096c <scall_sem_unlock>:
    return scarg.scall_ret;
}
//----------------------------------------------------------------------
//14
void scall_sem_unlock( void * arg )
{
     96c:	df 93       	push	r29
     96e:	cf 93       	push	r28
     970:	00 d0       	rcall	.+0      	; 0x972 <scall_sem_unlock+0x6>
     972:	cd b7       	in	r28, 0x3d	; 61
     974:	de b7       	in	r29, 0x3e	; 62
     976:	9a 83       	std	Y+2, r25	; 0x02
     978:	89 83       	std	Y+1, r24	; 0x01
    _sem_unlock( (sem_t *)arg );
     97a:	89 81       	ldd	r24, Y+1	; 0x01
     97c:	9a 81       	ldd	r25, Y+2	; 0x02
     97e:	0e 94 4c 10 	call	0x2098	; 0x2098 <_sem_unlock>
}
     982:	0f 90       	pop	r0
     984:	0f 90       	pop	r0
     986:	cf 91       	pop	r28
     988:	df 91       	pop	r29
     98a:	08 95       	ret

0000098c <scall_mutex_init>:
}
///=================================================================
///                         Мьютексы
//15
void scall_mutex_init(void * arg)
{
     98c:	df 93       	push	r29
     98e:	cf 93       	push	r28
     990:	00 d0       	rcall	.+0      	; 0x992 <scall_mutex_init+0x6>
     992:	cd b7       	in	r28, 0x3d	; 61
     994:	de b7       	in	r29, 0x3e	; 62
     996:	9a 83       	std	Y+2, r25	; 0x02
     998:	89 83       	std	Y+1, r24	; 0x01
    mutex_init_isr(
     99a:	e9 81       	ldd	r30, Y+1	; 0x01
     99c:	fa 81       	ldd	r31, Y+2	; 0x02
     99e:	80 81       	ld	r24, Z
     9a0:	91 81       	ldd	r25, Z+1	; 0x01
     9a2:	e9 81       	ldd	r30, Y+1	; 0x01
     9a4:	fa 81       	ldd	r31, Y+2	; 0x02
     9a6:	22 81       	ldd	r18, Z+2	; 0x02
     9a8:	62 2f       	mov	r22, r18
     9aa:	0e 94 57 0a 	call	0x14ae	; 0x14ae <mutex_init_isr>
               ((mutex_init_arg_t *)arg)->mutex
#ifdef CONFIG_USE_HIGHEST_LOCKER
               ,((mutex_init_arg_t *)arg)->prio
#endif // CONFIG_USE_HIGHEST_LOCKER
               );
}
     9ae:	0f 90       	pop	r0
     9b0:	0f 90       	pop	r0
     9b2:	cf 91       	pop	r28
     9b4:	df 91       	pop	r29
     9b6:	08 95       	ret

000009b8 <scall_mutex_lock>:
    syscall( 15, (void *)&scarg );
}
//----------------------------------------------------------------------
//16
void scall_mutex_lock(void * arg)
{
     9b8:	0f 93       	push	r16
     9ba:	1f 93       	push	r17
     9bc:	df 93       	push	r29
     9be:	cf 93       	push	r28
     9c0:	00 d0       	rcall	.+0      	; 0x9c2 <scall_mutex_lock+0xa>
     9c2:	cd b7       	in	r28, 0x3d	; 61
     9c4:	de b7       	in	r29, 0x3e	; 62
     9c6:	9a 83       	std	Y+2, r25	; 0x02
     9c8:	89 83       	std	Y+1, r24	; 0x01
    ((mutex_lock_arg_t *)arg)->scall_ret = _mutex_lock( ((mutex_lock_arg_t *)arg)->mutex );
     9ca:	09 81       	ldd	r16, Y+1	; 0x01
     9cc:	1a 81       	ldd	r17, Y+2	; 0x02
     9ce:	e9 81       	ldd	r30, Y+1	; 0x01
     9d0:	fa 81       	ldd	r31, Y+2	; 0x02
     9d2:	80 81       	ld	r24, Z
     9d4:	91 81       	ldd	r25, Z+1	; 0x01
     9d6:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <_mutex_lock>
     9da:	f8 01       	movw	r30, r16
     9dc:	82 83       	std	Z+2, r24	; 0x02
}
     9de:	0f 90       	pop	r0
     9e0:	0f 90       	pop	r0
     9e2:	cf 91       	pop	r28
     9e4:	df 91       	pop	r29
     9e6:	1f 91       	pop	r17
     9e8:	0f 91       	pop	r16
     9ea:	08 95       	ret

000009ec <scall_mutex_try_lock>:
}
// Захват
//----------------------------------------------------------------------
//17
void scall_mutex_try_lock(void * arg)
{
     9ec:	0f 93       	push	r16
     9ee:	1f 93       	push	r17
     9f0:	df 93       	push	r29
     9f2:	cf 93       	push	r28
     9f4:	00 d0       	rcall	.+0      	; 0x9f6 <scall_mutex_try_lock+0xa>
     9f6:	cd b7       	in	r28, 0x3d	; 61
     9f8:	de b7       	in	r29, 0x3e	; 62
     9fa:	9a 83       	std	Y+2, r25	; 0x02
     9fc:	89 83       	std	Y+1, r24	; 0x01
    ((mutex_lock_arg_t *)arg)->scall_ret = _mutex_try_lock( ((mutex_lock_arg_t *)arg)->mutex );
     9fe:	09 81       	ldd	r16, Y+1	; 0x01
     a00:	1a 81       	ldd	r17, Y+2	; 0x02
     a02:	e9 81       	ldd	r30, Y+1	; 0x01
     a04:	fa 81       	ldd	r31, Y+2	; 0x02
     a06:	80 81       	ld	r24, Z
     a08:	91 81       	ldd	r25, Z+1	; 0x01
     a0a:	0e 94 ba 0a 	call	0x1574	; 0x1574 <_mutex_try_lock>
     a0e:	f8 01       	movw	r30, r16
     a10:	82 83       	std	Z+2, r24	; 0x02
}
     a12:	0f 90       	pop	r0
     a14:	0f 90       	pop	r0
     a16:	cf 91       	pop	r28
     a18:	df 91       	pop	r29
     a1a:	1f 91       	pop	r17
     a1c:	0f 91       	pop	r16
     a1e:	08 95       	ret

00000a20 <scall_mutex_unlock>:
    return scarg.scall_ret;
}
//----------------------------------------------------------------------
//18
void scall_mutex_unlock(void * arg)
{
     a20:	df 93       	push	r29
     a22:	cf 93       	push	r28
     a24:	00 d0       	rcall	.+0      	; 0xa26 <scall_mutex_unlock+0x6>
     a26:	cd b7       	in	r28, 0x3d	; 61
     a28:	de b7       	in	r29, 0x3e	; 62
     a2a:	9a 83       	std	Y+2, r25	; 0x02
     a2c:	89 83       	std	Y+1, r24	; 0x01
    _mutex_unlock( (mutex_t *)arg );
     a2e:	89 81       	ldd	r24, Y+1	; 0x01
     a30:	9a 81       	ldd	r25, Y+2	; 0x02
     a32:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <_mutex_unlock>
}
     a36:	0f 90       	pop	r0
     a38:	0f 90       	pop	r0
     a3a:	cf 91       	pop	r28
     a3c:	df 91       	pop	r29
     a3e:	08 95       	ret

00000a40 <osbme_init_stack>:
*                                                                                        *
*****************************************************************************************/
#include <avr/io.h>
#include "../../osbme.h"
void * osbme_init_stack( void * top_of_stack, osbme_code_t code, void * arg )
{
     a40:	df 93       	push	r29
     a42:	cf 93       	push	r28
     a44:	cd b7       	in	r28, 0x3d	; 61
     a46:	de b7       	in	r29, 0x3e	; 62
     a48:	2a 97       	sbiw	r28, 0x0a	; 10
     a4a:	0f b6       	in	r0, 0x3f	; 63
     a4c:	f8 94       	cli
     a4e:	de bf       	out	0x3e, r29	; 62
     a50:	0f be       	out	0x3f, r0	; 63
     a52:	cd bf       	out	0x3d, r28	; 61
     a54:	9e 83       	std	Y+6, r25	; 0x06
     a56:	8d 83       	std	Y+5, r24	; 0x05
     a58:	78 87       	std	Y+8, r23	; 0x08
     a5a:	6f 83       	std	Y+7, r22	; 0x07
     a5c:	5a 87       	std	Y+10, r21	; 0x0a
     a5e:	49 87       	std	Y+9, r20	; 0x09
    char * tos = (char *)top_of_stack;
     a60:	8d 81       	ldd	r24, Y+5	; 0x05
     a62:	9e 81       	ldd	r25, Y+6	; 0x06
     a64:	9c 83       	std	Y+4, r25	; 0x04
     a66:	8b 83       	std	Y+3, r24	; 0x03
    //*tos-- = 0x11;
    //*tos-- = 0x22;
    //*tos-- = 0x33;

    // return address
    unsigned short tmp = (unsigned short)code;
     a68:	8f 81       	ldd	r24, Y+7	; 0x07
     a6a:	98 85       	ldd	r25, Y+8	; 0x08
     a6c:	9a 83       	std	Y+2, r25	; 0x02
     a6e:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (char)(tmp&(unsigned short)0x00ff);
     a70:	89 81       	ldd	r24, Y+1	; 0x01
     a72:	eb 81       	ldd	r30, Y+3	; 0x03
     a74:	fc 81       	ldd	r31, Y+4	; 0x04
     a76:	80 83       	st	Z, r24
     a78:	8b 81       	ldd	r24, Y+3	; 0x03
     a7a:	9c 81       	ldd	r25, Y+4	; 0x04
     a7c:	01 97       	sbiw	r24, 0x01	; 1
     a7e:	9c 83       	std	Y+4, r25	; 0x04
     a80:	8b 83       	std	Y+3, r24	; 0x03
    tmp>>=8;
     a82:	89 81       	ldd	r24, Y+1	; 0x01
     a84:	9a 81       	ldd	r25, Y+2	; 0x02
     a86:	89 2f       	mov	r24, r25
     a88:	99 27       	eor	r25, r25
     a8a:	9a 83       	std	Y+2, r25	; 0x02
     a8c:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (char)(tmp&(unsigned short)0x00ff);
     a8e:	89 81       	ldd	r24, Y+1	; 0x01
     a90:	eb 81       	ldd	r30, Y+3	; 0x03
     a92:	fc 81       	ldd	r31, Y+4	; 0x04
     a94:	80 83       	st	Z, r24
     a96:	8b 81       	ldd	r24, Y+3	; 0x03
     a98:	9c 81       	ldd	r25, Y+4	; 0x04
     a9a:	01 97       	sbiw	r24, 0x01	; 1
     a9c:	9c 83       	std	Y+4, r25	; 0x04
     a9e:	8b 83       	std	Y+3, r24	; 0x03

    // s
    *tos-- = 0x00;
     aa0:	eb 81       	ldd	r30, Y+3	; 0x03
     aa2:	fc 81       	ldd	r31, Y+4	; 0x04
     aa4:	10 82       	st	Z, r1
     aa6:	8b 81       	ldd	r24, Y+3	; 0x03
     aa8:	9c 81       	ldd	r25, Y+4	; 0x04
     aaa:	01 97       	sbiw	r24, 0x01	; 1
     aac:	9c 83       	std	Y+4, r25	; 0x04
     aae:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x00;// r1 must B 0
     ab0:	eb 81       	ldd	r30, Y+3	; 0x03
     ab2:	fc 81       	ldd	r31, Y+4	; 0x04
     ab4:	10 82       	st	Z, r1
     ab6:	8b 81       	ldd	r24, Y+3	; 0x03
     ab8:	9c 81       	ldd	r25, Y+4	; 0x04
     aba:	01 97       	sbiw	r24, 0x01	; 1
     abc:	9c 83       	std	Y+4, r25	; 0x04
     abe:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x02;// r2
     ac0:	eb 81       	ldd	r30, Y+3	; 0x03
     ac2:	fc 81       	ldd	r31, Y+4	; 0x04
     ac4:	82 e0       	ldi	r24, 0x02	; 2
     ac6:	80 83       	st	Z, r24
     ac8:	8b 81       	ldd	r24, Y+3	; 0x03
     aca:	9c 81       	ldd	r25, Y+4	; 0x04
     acc:	01 97       	sbiw	r24, 0x01	; 1
     ace:	9c 83       	std	Y+4, r25	; 0x04
     ad0:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x80;// SREG: enable interrupts
     ad2:	eb 81       	ldd	r30, Y+3	; 0x03
     ad4:	fc 81       	ldd	r31, Y+4	; 0x04
     ad6:	80 e8       	ldi	r24, 0x80	; 128
     ad8:	80 83       	st	Z, r24
     ada:	8b 81       	ldd	r24, Y+3	; 0x03
     adc:	9c 81       	ldd	r25, Y+4	; 0x04
     ade:	01 97       	sbiw	r24, 0x01	; 1
     ae0:	9c 83       	std	Y+4, r25	; 0x04
     ae2:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x03;
     ae4:	eb 81       	ldd	r30, Y+3	; 0x03
     ae6:	fc 81       	ldd	r31, Y+4	; 0x04
     ae8:	83 e0       	ldi	r24, 0x03	; 3
     aea:	80 83       	st	Z, r24
     aec:	8b 81       	ldd	r24, Y+3	; 0x03
     aee:	9c 81       	ldd	r25, Y+4	; 0x04
     af0:	01 97       	sbiw	r24, 0x01	; 1
     af2:	9c 83       	std	Y+4, r25	; 0x04
     af4:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x04;
     af6:	eb 81       	ldd	r30, Y+3	; 0x03
     af8:	fc 81       	ldd	r31, Y+4	; 0x04
     afa:	84 e0       	ldi	r24, 0x04	; 4
     afc:	80 83       	st	Z, r24
     afe:	8b 81       	ldd	r24, Y+3	; 0x03
     b00:	9c 81       	ldd	r25, Y+4	; 0x04
     b02:	01 97       	sbiw	r24, 0x01	; 1
     b04:	9c 83       	std	Y+4, r25	; 0x04
     b06:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x05;
     b08:	eb 81       	ldd	r30, Y+3	; 0x03
     b0a:	fc 81       	ldd	r31, Y+4	; 0x04
     b0c:	85 e0       	ldi	r24, 0x05	; 5
     b0e:	80 83       	st	Z, r24
     b10:	8b 81       	ldd	r24, Y+3	; 0x03
     b12:	9c 81       	ldd	r25, Y+4	; 0x04
     b14:	01 97       	sbiw	r24, 0x01	; 1
     b16:	9c 83       	std	Y+4, r25	; 0x04
     b18:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x06;
     b1a:	eb 81       	ldd	r30, Y+3	; 0x03
     b1c:	fc 81       	ldd	r31, Y+4	; 0x04
     b1e:	86 e0       	ldi	r24, 0x06	; 6
     b20:	80 83       	st	Z, r24
     b22:	8b 81       	ldd	r24, Y+3	; 0x03
     b24:	9c 81       	ldd	r25, Y+4	; 0x04
     b26:	01 97       	sbiw	r24, 0x01	; 1
     b28:	9c 83       	std	Y+4, r25	; 0x04
     b2a:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x07;
     b2c:	eb 81       	ldd	r30, Y+3	; 0x03
     b2e:	fc 81       	ldd	r31, Y+4	; 0x04
     b30:	87 e0       	ldi	r24, 0x07	; 7
     b32:	80 83       	st	Z, r24
     b34:	8b 81       	ldd	r24, Y+3	; 0x03
     b36:	9c 81       	ldd	r25, Y+4	; 0x04
     b38:	01 97       	sbiw	r24, 0x01	; 1
     b3a:	9c 83       	std	Y+4, r25	; 0x04
     b3c:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x08;
     b3e:	eb 81       	ldd	r30, Y+3	; 0x03
     b40:	fc 81       	ldd	r31, Y+4	; 0x04
     b42:	88 e0       	ldi	r24, 0x08	; 8
     b44:	80 83       	st	Z, r24
     b46:	8b 81       	ldd	r24, Y+3	; 0x03
     b48:	9c 81       	ldd	r25, Y+4	; 0x04
     b4a:	01 97       	sbiw	r24, 0x01	; 1
     b4c:	9c 83       	std	Y+4, r25	; 0x04
     b4e:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x09;
     b50:	eb 81       	ldd	r30, Y+3	; 0x03
     b52:	fc 81       	ldd	r31, Y+4	; 0x04
     b54:	89 e0       	ldi	r24, 0x09	; 9
     b56:	80 83       	st	Z, r24
     b58:	8b 81       	ldd	r24, Y+3	; 0x03
     b5a:	9c 81       	ldd	r25, Y+4	; 0x04
     b5c:	01 97       	sbiw	r24, 0x01	; 1
     b5e:	9c 83       	std	Y+4, r25	; 0x04
     b60:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x10;
     b62:	eb 81       	ldd	r30, Y+3	; 0x03
     b64:	fc 81       	ldd	r31, Y+4	; 0x04
     b66:	80 e1       	ldi	r24, 0x10	; 16
     b68:	80 83       	st	Z, r24
     b6a:	8b 81       	ldd	r24, Y+3	; 0x03
     b6c:	9c 81       	ldd	r25, Y+4	; 0x04
     b6e:	01 97       	sbiw	r24, 0x01	; 1
     b70:	9c 83       	std	Y+4, r25	; 0x04
     b72:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x11;
     b74:	eb 81       	ldd	r30, Y+3	; 0x03
     b76:	fc 81       	ldd	r31, Y+4	; 0x04
     b78:	81 e1       	ldi	r24, 0x11	; 17
     b7a:	80 83       	st	Z, r24
     b7c:	8b 81       	ldd	r24, Y+3	; 0x03
     b7e:	9c 81       	ldd	r25, Y+4	; 0x04
     b80:	01 97       	sbiw	r24, 0x01	; 1
     b82:	9c 83       	std	Y+4, r25	; 0x04
     b84:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x12;
     b86:	eb 81       	ldd	r30, Y+3	; 0x03
     b88:	fc 81       	ldd	r31, Y+4	; 0x04
     b8a:	82 e1       	ldi	r24, 0x12	; 18
     b8c:	80 83       	st	Z, r24
     b8e:	8b 81       	ldd	r24, Y+3	; 0x03
     b90:	9c 81       	ldd	r25, Y+4	; 0x04
     b92:	01 97       	sbiw	r24, 0x01	; 1
     b94:	9c 83       	std	Y+4, r25	; 0x04
     b96:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x13;
     b98:	eb 81       	ldd	r30, Y+3	; 0x03
     b9a:	fc 81       	ldd	r31, Y+4	; 0x04
     b9c:	83 e1       	ldi	r24, 0x13	; 19
     b9e:	80 83       	st	Z, r24
     ba0:	8b 81       	ldd	r24, Y+3	; 0x03
     ba2:	9c 81       	ldd	r25, Y+4	; 0x04
     ba4:	01 97       	sbiw	r24, 0x01	; 1
     ba6:	9c 83       	std	Y+4, r25	; 0x04
     ba8:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x14;
     baa:	eb 81       	ldd	r30, Y+3	; 0x03
     bac:	fc 81       	ldd	r31, Y+4	; 0x04
     bae:	84 e1       	ldi	r24, 0x14	; 20
     bb0:	80 83       	st	Z, r24
     bb2:	8b 81       	ldd	r24, Y+3	; 0x03
     bb4:	9c 81       	ldd	r25, Y+4	; 0x04
     bb6:	01 97       	sbiw	r24, 0x01	; 1
     bb8:	9c 83       	std	Y+4, r25	; 0x04
     bba:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x15;
     bbc:	eb 81       	ldd	r30, Y+3	; 0x03
     bbe:	fc 81       	ldd	r31, Y+4	; 0x04
     bc0:	85 e1       	ldi	r24, 0x15	; 21
     bc2:	80 83       	st	Z, r24
     bc4:	8b 81       	ldd	r24, Y+3	; 0x03
     bc6:	9c 81       	ldd	r25, Y+4	; 0x04
     bc8:	01 97       	sbiw	r24, 0x01	; 1
     bca:	9c 83       	std	Y+4, r25	; 0x04
     bcc:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x16;
     bce:	eb 81       	ldd	r30, Y+3	; 0x03
     bd0:	fc 81       	ldd	r31, Y+4	; 0x04
     bd2:	86 e1       	ldi	r24, 0x16	; 22
     bd4:	80 83       	st	Z, r24
     bd6:	8b 81       	ldd	r24, Y+3	; 0x03
     bd8:	9c 81       	ldd	r25, Y+4	; 0x04
     bda:	01 97       	sbiw	r24, 0x01	; 1
     bdc:	9c 83       	std	Y+4, r25	; 0x04
     bde:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x17;
     be0:	eb 81       	ldd	r30, Y+3	; 0x03
     be2:	fc 81       	ldd	r31, Y+4	; 0x04
     be4:	87 e1       	ldi	r24, 0x17	; 23
     be6:	80 83       	st	Z, r24
     be8:	8b 81       	ldd	r24, Y+3	; 0x03
     bea:	9c 81       	ldd	r25, Y+4	; 0x04
     bec:	01 97       	sbiw	r24, 0x01	; 1
     bee:	9c 83       	std	Y+4, r25	; 0x04
     bf0:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x18;
     bf2:	eb 81       	ldd	r30, Y+3	; 0x03
     bf4:	fc 81       	ldd	r31, Y+4	; 0x04
     bf6:	88 e1       	ldi	r24, 0x18	; 24
     bf8:	80 83       	st	Z, r24
     bfa:	8b 81       	ldd	r24, Y+3	; 0x03
     bfc:	9c 81       	ldd	r25, Y+4	; 0x04
     bfe:	01 97       	sbiw	r24, 0x01	; 1
     c00:	9c 83       	std	Y+4, r25	; 0x04
     c02:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x19;
     c04:	eb 81       	ldd	r30, Y+3	; 0x03
     c06:	fc 81       	ldd	r31, Y+4	; 0x04
     c08:	89 e1       	ldi	r24, 0x19	; 25
     c0a:	80 83       	st	Z, r24
     c0c:	8b 81       	ldd	r24, Y+3	; 0x03
     c0e:	9c 81       	ldd	r25, Y+4	; 0x04
     c10:	01 97       	sbiw	r24, 0x01	; 1
     c12:	9c 83       	std	Y+4, r25	; 0x04
     c14:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x20;
     c16:	eb 81       	ldd	r30, Y+3	; 0x03
     c18:	fc 81       	ldd	r31, Y+4	; 0x04
     c1a:	80 e2       	ldi	r24, 0x20	; 32
     c1c:	80 83       	st	Z, r24
     c1e:	8b 81       	ldd	r24, Y+3	; 0x03
     c20:	9c 81       	ldd	r25, Y+4	; 0x04
     c22:	01 97       	sbiw	r24, 0x01	; 1
     c24:	9c 83       	std	Y+4, r25	; 0x04
     c26:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x21;
     c28:	eb 81       	ldd	r30, Y+3	; 0x03
     c2a:	fc 81       	ldd	r31, Y+4	; 0x04
     c2c:	81 e2       	ldi	r24, 0x21	; 33
     c2e:	80 83       	st	Z, r24
     c30:	8b 81       	ldd	r24, Y+3	; 0x03
     c32:	9c 81       	ldd	r25, Y+4	; 0x04
     c34:	01 97       	sbiw	r24, 0x01	; 1
     c36:	9c 83       	std	Y+4, r25	; 0x04
     c38:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x22;
     c3a:	eb 81       	ldd	r30, Y+3	; 0x03
     c3c:	fc 81       	ldd	r31, Y+4	; 0x04
     c3e:	82 e2       	ldi	r24, 0x22	; 34
     c40:	80 83       	st	Z, r24
     c42:	8b 81       	ldd	r24, Y+3	; 0x03
     c44:	9c 81       	ldd	r25, Y+4	; 0x04
     c46:	01 97       	sbiw	r24, 0x01	; 1
     c48:	9c 83       	std	Y+4, r25	; 0x04
     c4a:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x23;
     c4c:	eb 81       	ldd	r30, Y+3	; 0x03
     c4e:	fc 81       	ldd	r31, Y+4	; 0x04
     c50:	83 e2       	ldi	r24, 0x23	; 35
     c52:	80 83       	st	Z, r24
     c54:	8b 81       	ldd	r24, Y+3	; 0x03
     c56:	9c 81       	ldd	r25, Y+4	; 0x04
     c58:	01 97       	sbiw	r24, 0x01	; 1
     c5a:	9c 83       	std	Y+4, r25	; 0x04
     c5c:	8b 83       	std	Y+3, r24	; 0x03

    tmp = (unsigned short)arg;
     c5e:	89 85       	ldd	r24, Y+9	; 0x09
     c60:	9a 85       	ldd	r25, Y+10	; 0x0a
     c62:	9a 83       	std	Y+2, r25	; 0x02
     c64:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (char)(tmp&(unsigned short)0x00ff); // r24 LSByte of arg
     c66:	89 81       	ldd	r24, Y+1	; 0x01
     c68:	eb 81       	ldd	r30, Y+3	; 0x03
     c6a:	fc 81       	ldd	r31, Y+4	; 0x04
     c6c:	80 83       	st	Z, r24
     c6e:	8b 81       	ldd	r24, Y+3	; 0x03
     c70:	9c 81       	ldd	r25, Y+4	; 0x04
     c72:	01 97       	sbiw	r24, 0x01	; 1
     c74:	9c 83       	std	Y+4, r25	; 0x04
     c76:	8b 83       	std	Y+3, r24	; 0x03
    tmp>>=8;
     c78:	89 81       	ldd	r24, Y+1	; 0x01
     c7a:	9a 81       	ldd	r25, Y+2	; 0x02
     c7c:	89 2f       	mov	r24, r25
     c7e:	99 27       	eor	r25, r25
     c80:	9a 83       	std	Y+2, r25	; 0x02
     c82:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (char)(tmp&(unsigned short)0x00ff); // r25 MSByte of arg
     c84:	89 81       	ldd	r24, Y+1	; 0x01
     c86:	eb 81       	ldd	r30, Y+3	; 0x03
     c88:	fc 81       	ldd	r31, Y+4	; 0x04
     c8a:	80 83       	st	Z, r24
     c8c:	8b 81       	ldd	r24, Y+3	; 0x03
     c8e:	9c 81       	ldd	r25, Y+4	; 0x04
     c90:	01 97       	sbiw	r24, 0x01	; 1
     c92:	9c 83       	std	Y+4, r25	; 0x04
     c94:	8b 83       	std	Y+3, r24	; 0x03

    *tos-- = 0x26;
     c96:	eb 81       	ldd	r30, Y+3	; 0x03
     c98:	fc 81       	ldd	r31, Y+4	; 0x04
     c9a:	86 e2       	ldi	r24, 0x26	; 38
     c9c:	80 83       	st	Z, r24
     c9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ca0:	9c 81       	ldd	r25, Y+4	; 0x04
     ca2:	01 97       	sbiw	r24, 0x01	; 1
     ca4:	9c 83       	std	Y+4, r25	; 0x04
     ca6:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x27;
     ca8:	eb 81       	ldd	r30, Y+3	; 0x03
     caa:	fc 81       	ldd	r31, Y+4	; 0x04
     cac:	87 e2       	ldi	r24, 0x27	; 39
     cae:	80 83       	st	Z, r24
     cb0:	8b 81       	ldd	r24, Y+3	; 0x03
     cb2:	9c 81       	ldd	r25, Y+4	; 0x04
     cb4:	01 97       	sbiw	r24, 0x01	; 1
     cb6:	9c 83       	std	Y+4, r25	; 0x04
     cb8:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x28;
     cba:	eb 81       	ldd	r30, Y+3	; 0x03
     cbc:	fc 81       	ldd	r31, Y+4	; 0x04
     cbe:	88 e2       	ldi	r24, 0x28	; 40
     cc0:	80 83       	st	Z, r24
     cc2:	8b 81       	ldd	r24, Y+3	; 0x03
     cc4:	9c 81       	ldd	r25, Y+4	; 0x04
     cc6:	01 97       	sbiw	r24, 0x01	; 1
     cc8:	9c 83       	std	Y+4, r25	; 0x04
     cca:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x29;
     ccc:	eb 81       	ldd	r30, Y+3	; 0x03
     cce:	fc 81       	ldd	r31, Y+4	; 0x04
     cd0:	89 e2       	ldi	r24, 0x29	; 41
     cd2:	80 83       	st	Z, r24
     cd4:	8b 81       	ldd	r24, Y+3	; 0x03
     cd6:	9c 81       	ldd	r25, Y+4	; 0x04
     cd8:	01 97       	sbiw	r24, 0x01	; 1
     cda:	9c 83       	std	Y+4, r25	; 0x04
     cdc:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x30;
     cde:	eb 81       	ldd	r30, Y+3	; 0x03
     ce0:	fc 81       	ldd	r31, Y+4	; 0x04
     ce2:	80 e3       	ldi	r24, 0x30	; 48
     ce4:	80 83       	st	Z, r24
     ce6:	8b 81       	ldd	r24, Y+3	; 0x03
     ce8:	9c 81       	ldd	r25, Y+4	; 0x04
     cea:	01 97       	sbiw	r24, 0x01	; 1
     cec:	9c 83       	std	Y+4, r25	; 0x04
     cee:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x31;
     cf0:	eb 81       	ldd	r30, Y+3	; 0x03
     cf2:	fc 81       	ldd	r31, Y+4	; 0x04
     cf4:	81 e3       	ldi	r24, 0x31	; 49
     cf6:	80 83       	st	Z, r24
     cf8:	8b 81       	ldd	r24, Y+3	; 0x03
     cfa:	9c 81       	ldd	r25, Y+4	; 0x04
     cfc:	01 97       	sbiw	r24, 0x01	; 1
     cfe:	9c 83       	std	Y+4, r25	; 0x04
     d00:	8b 83       	std	Y+3, r24	; 0x03
#ifdef RAMPZ
    *tos-- = 0xff;
#endif
    return((void *)tos);
     d02:	8b 81       	ldd	r24, Y+3	; 0x03
     d04:	9c 81       	ldd	r25, Y+4	; 0x04
}
     d06:	2a 96       	adiw	r28, 0x0a	; 10
     d08:	0f b6       	in	r0, 0x3f	; 63
     d0a:	f8 94       	cli
     d0c:	de bf       	out	0x3e, r29	; 62
     d0e:	0f be       	out	0x3f, r0	; 63
     d10:	cd bf       	out	0x3d, r28	; 61
     d12:	cf 91       	pop	r28
     d14:	df 91       	pop	r29
     d16:	08 95       	ret

00000d18 <enter_crit_sec>:
    if( kernel.sched[core].nested_crit_sec == (count_t)0 )enable_interrupts();
}

#else
void enter_crit_sec(void)
{
     d18:	df 93       	push	r29
     d1a:	cf 93       	push	r28
     d1c:	cd b7       	in	r28, 0x3d	; 61
     d1e:	de b7       	in	r29, 0x3e	; 62
    disable_interrupts();
     d20:	0e 94 bc 00 	call	0x178	; 0x178 <disable_interrupts>
    kernel.sched.nested_crit_sec++;
     d24:	80 91 46 02 	lds	r24, 0x0246
     d28:	90 91 47 02 	lds	r25, 0x0247
     d2c:	01 96       	adiw	r24, 0x01	; 1
     d2e:	90 93 47 02 	sts	0x0247, r25
     d32:	80 93 46 02 	sts	0x0246, r24
}
     d36:	cf 91       	pop	r28
     d38:	df 91       	pop	r29
     d3a:	08 95       	ret

00000d3c <exit_crit_sec>:
void exit_crit_sec(void)
{
     d3c:	df 93       	push	r29
     d3e:	cf 93       	push	r28
     d40:	cd b7       	in	r28, 0x3d	; 61
     d42:	de b7       	in	r29, 0x3e	; 62
    if( kernel.sched.nested_crit_sec != (count_t)0 )kernel.sched.nested_crit_sec--;
     d44:	80 91 46 02 	lds	r24, 0x0246
     d48:	90 91 47 02 	lds	r25, 0x0247
     d4c:	00 97       	sbiw	r24, 0x00	; 0
     d4e:	49 f0       	breq	.+18     	; 0xd62 <exit_crit_sec+0x26>
     d50:	80 91 46 02 	lds	r24, 0x0246
     d54:	90 91 47 02 	lds	r25, 0x0247
     d58:	01 97       	sbiw	r24, 0x01	; 1
     d5a:	90 93 47 02 	sts	0x0247, r25
     d5e:	80 93 46 02 	sts	0x0246, r24
    if( kernel.sched.nested_crit_sec == (count_t)0 )enable_interrupts();
     d62:	80 91 46 02 	lds	r24, 0x0246
     d66:	90 91 47 02 	lds	r25, 0x0247
     d6a:	00 97       	sbiw	r24, 0x00	; 0
     d6c:	11 f4       	brne	.+4      	; 0xd72 <exit_crit_sec+0x36>
     d6e:	0e 94 c4 00 	call	0x188	; 0x188 <enable_interrupts>
}
     d72:	cf 91       	pop	r28
     d74:	df 91       	pop	r29
     d76:	08 95       	ret

00000d78 <gitem_init>:
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
// Инициация
void gitem_init(gitem_t * gitem, prio_t prio)
{
     d78:	df 93       	push	r29
     d7a:	cf 93       	push	r28
     d7c:	00 d0       	rcall	.+0      	; 0xd7e <gitem_init+0x6>
     d7e:	00 d0       	rcall	.+0      	; 0xd80 <gitem_init+0x8>
     d80:	0f 92       	push	r0
     d82:	cd b7       	in	r28, 0x3d	; 61
     d84:	de b7       	in	r29, 0x3e	; 62
     d86:	9c 83       	std	Y+4, r25	; 0x04
     d88:	8b 83       	std	Y+3, r24	; 0x03
     d8a:	6d 83       	std	Y+5, r22	; 0x05
    group_t * group = &gitem->grp;
     d8c:	8b 81       	ldd	r24, Y+3	; 0x03
     d8e:	9c 81       	ldd	r25, Y+4	; 0x04
     d90:	06 96       	adiw	r24, 0x06	; 6
     d92:	9a 83       	std	Y+2, r25	; 0x02
     d94:	89 83       	std	Y+1, r24	; 0x01
    item_init( (item_t *)gitem );
     d96:	8b 81       	ldd	r24, Y+3	; 0x03
     d98:	9c 81       	ldd	r25, Y+4	; 0x04
     d9a:	0e 94 a2 09 	call	0x1344	; 0x1344 <item_init>
    group_init( group, prio );
     d9e:	89 81       	ldd	r24, Y+1	; 0x01
     da0:	9a 81       	ldd	r25, Y+2	; 0x02
     da2:	6d 81       	ldd	r22, Y+5	; 0x05
     da4:	0e 94 12 09 	call	0x1224	; 0x1224 <group_init>
    gitem->group = group;
     da8:	eb 81       	ldd	r30, Y+3	; 0x03
     daa:	fc 81       	ldd	r31, Y+4	; 0x04
     dac:	89 81       	ldd	r24, Y+1	; 0x01
     dae:	9a 81       	ldd	r25, Y+2	; 0x02
     db0:	95 83       	std	Z+5, r25	; 0x05
     db2:	84 83       	std	Z+4, r24	; 0x04
}
     db4:	0f 90       	pop	r0
     db6:	0f 90       	pop	r0
     db8:	0f 90       	pop	r0
     dba:	0f 90       	pop	r0
     dbc:	0f 90       	pop	r0
     dbe:	cf 91       	pop	r28
     dc0:	df 91       	pop	r29
     dc2:	08 95       	ret

00000dc4 <gitem_insert>:
// Вставить в список
void gitem_insert(gitem_t * gitem, xlist_t *xlist)
{
     dc4:	df 93       	push	r29
     dc6:	cf 93       	push	r28
     dc8:	cd b7       	in	r28, 0x3d	; 61
     dca:	de b7       	in	r29, 0x3e	; 62
     dcc:	28 97       	sbiw	r28, 0x08	; 8
     dce:	0f b6       	in	r0, 0x3f	; 63
     dd0:	f8 94       	cli
     dd2:	de bf       	out	0x3e, r29	; 62
     dd4:	0f be       	out	0x3f, r0	; 63
     dd6:	cd bf       	out	0x3d, r28	; 61
     dd8:	9e 83       	std	Y+6, r25	; 0x06
     dda:	8d 83       	std	Y+5, r24	; 0x05
     ddc:	78 87       	std	Y+8, r23	; 0x08
     dde:	6f 83       	std	Y+7, r22	; 0x07
    prio_t prio = gitem->group->prio;
     de0:	ed 81       	ldd	r30, Y+5	; 0x05
     de2:	fe 81       	ldd	r31, Y+6	; 0x06
     de4:	04 80       	ldd	r0, Z+4	; 0x04
     de6:	f5 81       	ldd	r31, Z+5	; 0x05
     de8:	e0 2d       	mov	r30, r0
     dea:	82 81       	ldd	r24, Z+2	; 0x02
     dec:	8c 83       	std	Y+4, r24	; 0x04
    index_t mask = ((index_t)1)<<prio;
     dee:	8c 81       	ldd	r24, Y+4	; 0x04
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 c0       	rjmp	.+4      	; 0xdfe <gitem_insert+0x3a>
     dfa:	88 0f       	add	r24, r24
     dfc:	99 1f       	adc	r25, r25
     dfe:	2a 95       	dec	r18
     e00:	e2 f7       	brpl	.-8      	; 0xdfa <gitem_insert+0x36>
     e02:	8b 83       	std	Y+3, r24	; 0x03
    item_t ** head = (item_t **)xlist + prio;
     e04:	2f 81       	ldd	r18, Y+7	; 0x07
     e06:	38 85       	ldd	r19, Y+8	; 0x08
     e08:	8c 81       	ldd	r24, Y+4	; 0x04
     e0a:	88 2f       	mov	r24, r24
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	88 0f       	add	r24, r24
     e10:	99 1f       	adc	r25, r25
     e12:	82 0f       	add	r24, r18
     e14:	93 1f       	adc	r25, r19
     e16:	9a 83       	std	Y+2, r25	; 0x02
     e18:	89 83       	std	Y+1, r24	; 0x01
    // Пуста ли часть списка с таким приоритетом
    if( ( xlist->index )& mask)
     e1a:	ef 81       	ldd	r30, Y+7	; 0x07
     e1c:	f8 85       	ldd	r31, Y+8	; 0x08
     e1e:	90 89       	ldd	r25, Z+16	; 0x10
     e20:	8b 81       	ldd	r24, Y+3	; 0x03
     e22:	89 23       	and	r24, r25
     e24:	88 23       	and	r24, r24
     e26:	51 f0       	breq	.+20     	; 0xe3c <gitem_insert+0x78>
    {
        //Не пуста вставляем туда gitem
        item_insert( (item_t *)gitem, *head );
     e28:	8d 81       	ldd	r24, Y+5	; 0x05
     e2a:	9e 81       	ldd	r25, Y+6	; 0x06
     e2c:	e9 81       	ldd	r30, Y+1	; 0x01
     e2e:	fa 81       	ldd	r31, Y+2	; 0x02
     e30:	20 81       	ld	r18, Z
     e32:	31 81       	ldd	r19, Z+1	; 0x01
     e34:	b9 01       	movw	r22, r18
     e36:	0e 94 ba 09 	call	0x1374	; 0x1374 <item_insert>
     e3a:	0e c0       	rjmp	.+28     	; 0xe58 <gitem_insert+0x94>
    }
    else
    {
        // Пуста, gitem будет головой
        *head = (item_t *)gitem;
     e3c:	8d 81       	ldd	r24, Y+5	; 0x05
     e3e:	9e 81       	ldd	r25, Y+6	; 0x06
     e40:	e9 81       	ldd	r30, Y+1	; 0x01
     e42:	fa 81       	ldd	r31, Y+2	; 0x02
     e44:	91 83       	std	Z+1, r25	; 0x01
     e46:	80 83       	st	Z, r24
        xlist->index |= mask;
     e48:	ef 81       	ldd	r30, Y+7	; 0x07
     e4a:	f8 85       	ldd	r31, Y+8	; 0x08
     e4c:	90 89       	ldd	r25, Z+16	; 0x10
     e4e:	8b 81       	ldd	r24, Y+3	; 0x03
     e50:	89 2b       	or	r24, r25
     e52:	ef 81       	ldd	r30, Y+7	; 0x07
     e54:	f8 85       	ldd	r31, Y+8	; 0x08
     e56:	80 8b       	std	Z+16, r24	; 0x10
    }
    gitem->group->link = (void *)xlist;
     e58:	ed 81       	ldd	r30, Y+5	; 0x05
     e5a:	fe 81       	ldd	r31, Y+6	; 0x06
     e5c:	04 80       	ldd	r0, Z+4	; 0x04
     e5e:	f5 81       	ldd	r31, Z+5	; 0x05
     e60:	e0 2d       	mov	r30, r0
     e62:	8f 81       	ldd	r24, Y+7	; 0x07
     e64:	98 85       	ldd	r25, Y+8	; 0x08
     e66:	91 83       	std	Z+1, r25	; 0x01
     e68:	80 83       	st	Z, r24
}
     e6a:	28 96       	adiw	r28, 0x08	; 8
     e6c:	0f b6       	in	r0, 0x3f	; 63
     e6e:	f8 94       	cli
     e70:	de bf       	out	0x3e, r29	; 62
     e72:	0f be       	out	0x3f, r0	; 63
     e74:	cd bf       	out	0x3d, r28	; 61
     e76:	cf 91       	pop	r28
     e78:	df 91       	pop	r29
     e7a:	08 95       	ret

00000e7c <gitem_insert_group>:
 при этом gitem->group переходит в Пул

 Ограничения на gitem - он не должен быть сгруппирован в момент встаки в группу.
*/
void gitem_insert_group(gitem_t * gitem, xlist_t *xlist)
{
     e7c:	df 93       	push	r29
     e7e:	cf 93       	push	r28
     e80:	cd b7       	in	r28, 0x3d	; 61
     e82:	de b7       	in	r29, 0x3e	; 62
     e84:	2a 97       	sbiw	r28, 0x0a	; 10
     e86:	0f b6       	in	r0, 0x3f	; 63
     e88:	f8 94       	cli
     e8a:	de bf       	out	0x3e, r29	; 62
     e8c:	0f be       	out	0x3f, r0	; 63
     e8e:	cd bf       	out	0x3d, r28	; 61
     e90:	98 87       	std	Y+8, r25	; 0x08
     e92:	8f 83       	std	Y+7, r24	; 0x07
     e94:	7a 87       	std	Y+10, r23	; 0x0a
     e96:	69 87       	std	Y+9, r22	; 0x09
    prio_t prio = gitem->group->prio;
     e98:	ef 81       	ldd	r30, Y+7	; 0x07
     e9a:	f8 85       	ldd	r31, Y+8	; 0x08
     e9c:	04 80       	ldd	r0, Z+4	; 0x04
     e9e:	f5 81       	ldd	r31, Z+5	; 0x05
     ea0:	e0 2d       	mov	r30, r0
     ea2:	82 81       	ldd	r24, Z+2	; 0x02
     ea4:	8e 83       	std	Y+6, r24	; 0x06
    index_t mask = ((index_t)1)<<prio;
     ea6:	8e 81       	ldd	r24, Y+6	; 0x06
     ea8:	28 2f       	mov	r18, r24
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	02 c0       	rjmp	.+4      	; 0xeb6 <gitem_insert_group+0x3a>
     eb2:	88 0f       	add	r24, r24
     eb4:	99 1f       	adc	r25, r25
     eb6:	2a 95       	dec	r18
     eb8:	e2 f7       	brpl	.-8      	; 0xeb2 <gitem_insert_group+0x36>
     eba:	8d 83       	std	Y+5, r24	; 0x05
    item_t ** head = (item_t **)xlist + prio;
     ebc:	29 85       	ldd	r18, Y+9	; 0x09
     ebe:	3a 85       	ldd	r19, Y+10	; 0x0a
     ec0:	8e 81       	ldd	r24, Y+6	; 0x06
     ec2:	88 2f       	mov	r24, r24
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	88 0f       	add	r24, r24
     ec8:	99 1f       	adc	r25, r25
     eca:	82 0f       	add	r24, r18
     ecc:	93 1f       	adc	r25, r19
     ece:	9c 83       	std	Y+4, r25	; 0x04
     ed0:	8b 83       	std	Y+3, r24	; 0x03
    group_t * group = gitem->group;
     ed2:	ef 81       	ldd	r30, Y+7	; 0x07
     ed4:	f8 85       	ldd	r31, Y+8	; 0x08
     ed6:	84 81       	ldd	r24, Z+4	; 0x04
     ed8:	95 81       	ldd	r25, Z+5	; 0x05
     eda:	9a 83       	std	Y+2, r25	; 0x02
     edc:	89 83       	std	Y+1, r24	; 0x01
    // Пуста ли часть списка с таким приоритетом
    if( ( xlist->index )& mask)
     ede:	e9 85       	ldd	r30, Y+9	; 0x09
     ee0:	fa 85       	ldd	r31, Y+10	; 0x0a
     ee2:	90 89       	ldd	r25, Z+16	; 0x10
     ee4:	8d 81       	ldd	r24, Y+5	; 0x05
     ee6:	89 23       	and	r24, r25
     ee8:	88 23       	and	r24, r24
     eea:	31 f1       	breq	.+76     	; 0xf38 <gitem_insert_group+0xbc>
    {
        //Не пуста вставляем туда gitem
        item_insert((item_t *)gitem, *head );
     eec:	8f 81       	ldd	r24, Y+7	; 0x07
     eee:	98 85       	ldd	r25, Y+8	; 0x08
     ef0:	eb 81       	ldd	r30, Y+3	; 0x03
     ef2:	fc 81       	ldd	r31, Y+4	; 0x04
     ef4:	20 81       	ld	r18, Z
     ef6:	31 81       	ldd	r19, Z+1	; 0x01
     ef8:	b9 01       	movw	r22, r18
     efa:	0e 94 ba 09 	call	0x1374	; 0x1374 <item_insert>
        //Передаем старую группу в пул
        group_push(group);
     efe:	89 81       	ldd	r24, Y+1	; 0x01
     f00:	9a 81       	ldd	r25, Y+2	; 0x02
     f02:	0e 94 2f 09 	call	0x125e	; 0x125e <group_push>
        //назначаем новую группу - ту, в которой голова
        group = ((gitem_t *)*head)->group;
     f06:	eb 81       	ldd	r30, Y+3	; 0x03
     f08:	fc 81       	ldd	r31, Y+4	; 0x04
     f0a:	80 81       	ld	r24, Z
     f0c:	91 81       	ldd	r25, Z+1	; 0x01
     f0e:	fc 01       	movw	r30, r24
     f10:	84 81       	ldd	r24, Z+4	; 0x04
     f12:	95 81       	ldd	r25, Z+5	; 0x05
     f14:	9a 83       	std	Y+2, r25	; 0x02
     f16:	89 83       	std	Y+1, r24	; 0x01
        gitem->group = group;
     f18:	ef 81       	ldd	r30, Y+7	; 0x07
     f1a:	f8 85       	ldd	r31, Y+8	; 0x08
     f1c:	89 81       	ldd	r24, Y+1	; 0x01
     f1e:	9a 81       	ldd	r25, Y+2	; 0x02
     f20:	95 83       	std	Z+5, r25	; 0x05
     f22:	84 83       	std	Z+4, r24	; 0x04
        //количество элементов в группе увеличилось на 1
        group->el_num++;
     f24:	e9 81       	ldd	r30, Y+1	; 0x01
     f26:	fa 81       	ldd	r31, Y+2	; 0x02
     f28:	83 81       	ldd	r24, Z+3	; 0x03
     f2a:	94 81       	ldd	r25, Z+4	; 0x04
     f2c:	01 96       	adiw	r24, 0x01	; 1
     f2e:	e9 81       	ldd	r30, Y+1	; 0x01
     f30:	fa 81       	ldd	r31, Y+2	; 0x02
     f32:	94 83       	std	Z+4, r25	; 0x04
     f34:	83 83       	std	Z+3, r24	; 0x03
     f36:	14 c0       	rjmp	.+40     	; 0xf60 <gitem_insert_group+0xe4>
    }
    else
    {
        // Пуста, gitem будет головой
        *head = (item_t *)gitem;
     f38:	8f 81       	ldd	r24, Y+7	; 0x07
     f3a:	98 85       	ldd	r25, Y+8	; 0x08
     f3c:	eb 81       	ldd	r30, Y+3	; 0x03
     f3e:	fc 81       	ldd	r31, Y+4	; 0x04
     f40:	91 83       	std	Z+1, r25	; 0x01
     f42:	80 83       	st	Z, r24
        xlist->index |= mask;
     f44:	e9 85       	ldd	r30, Y+9	; 0x09
     f46:	fa 85       	ldd	r31, Y+10	; 0x0a
     f48:	90 89       	ldd	r25, Z+16	; 0x10
     f4a:	8d 81       	ldd	r24, Y+5	; 0x05
     f4c:	89 2b       	or	r24, r25
     f4e:	e9 85       	ldd	r30, Y+9	; 0x09
     f50:	fa 85       	ldd	r31, Y+10	; 0x0a
     f52:	80 8b       	std	Z+16, r24	; 0x10
        group->link = (void *)xlist;
     f54:	e9 81       	ldd	r30, Y+1	; 0x01
     f56:	fa 81       	ldd	r31, Y+2	; 0x02
     f58:	89 85       	ldd	r24, Y+9	; 0x09
     f5a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f5c:	91 83       	std	Z+1, r25	; 0x01
     f5e:	80 83       	st	Z, r24
    }
}
     f60:	2a 96       	adiw	r28, 0x0a	; 10
     f62:	0f b6       	in	r0, 0x3f	; 63
     f64:	f8 94       	cli
     f66:	de bf       	out	0x3e, r29	; 62
     f68:	0f be       	out	0x3f, r0	; 63
     f6a:	cd bf       	out	0x3d, r28	; 61
     f6c:	cf 91       	pop	r28
     f6e:	df 91       	pop	r29
     f70:	08 95       	ret

00000f72 <gitem_fast_cut>:
// Быстро вырезать из списка (не обнуляется указатель gitem->group->link)
void gitem_fast_cut(gitem_t * gitem)
{
     f72:	df 93       	push	r29
     f74:	cf 93       	push	r28
     f76:	00 d0       	rcall	.+0      	; 0xf78 <gitem_fast_cut+0x6>
     f78:	00 d0       	rcall	.+0      	; 0xf7a <gitem_fast_cut+0x8>
     f7a:	0f 92       	push	r0
     f7c:	cd b7       	in	r28, 0x3d	; 61
     f7e:	de b7       	in	r29, 0x3e	; 62
     f80:	9d 83       	std	Y+5, r25	; 0x05
     f82:	8c 83       	std	Y+4, r24	; 0x04
    prio_t prio = gitem->group->prio;
     f84:	ec 81       	ldd	r30, Y+4	; 0x04
     f86:	fd 81       	ldd	r31, Y+5	; 0x05
     f88:	04 80       	ldd	r0, Z+4	; 0x04
     f8a:	f5 81       	ldd	r31, Z+5	; 0x05
     f8c:	e0 2d       	mov	r30, r0
     f8e:	82 81       	ldd	r24, Z+2	; 0x02
     f90:	8b 83       	std	Y+3, r24	; 0x03
    xlist_t * xlist = (xlist_t *)gitem->group->link;
     f92:	ec 81       	ldd	r30, Y+4	; 0x04
     f94:	fd 81       	ldd	r31, Y+5	; 0x05
     f96:	04 80       	ldd	r0, Z+4	; 0x04
     f98:	f5 81       	ldd	r31, Z+5	; 0x05
     f9a:	e0 2d       	mov	r30, r0
     f9c:	80 81       	ld	r24, Z
     f9e:	91 81       	ldd	r25, Z+1	; 0x01
     fa0:	9a 83       	std	Y+2, r25	; 0x02
     fa2:	89 83       	std	Y+1, r24	; 0x01
    // Является ли эта часть списка группированной?
    if( gitem->group->el_num > (count_t)1 )
     fa4:	ec 81       	ldd	r30, Y+4	; 0x04
     fa6:	fd 81       	ldd	r31, Y+5	; 0x05
     fa8:	04 80       	ldd	r0, Z+4	; 0x04
     faa:	f5 81       	ldd	r31, Z+5	; 0x05
     fac:	e0 2d       	mov	r30, r0
     fae:	83 81       	ldd	r24, Z+3	; 0x03
     fb0:	94 81       	ldd	r25, Z+4	; 0x04
     fb2:	82 30       	cpi	r24, 0x02	; 2
     fb4:	91 05       	cpc	r25, r1
     fb6:	b8 f0       	brcs	.+46     	; 0xfe6 <gitem_fast_cut+0x74>
    {
        //Группированная часть списка, будем вырезать из группы с выделением новой группы из Пула
        // В текущей группе стало на 1 элемент меньше
        gitem->group->el_num--;
     fb8:	ec 81       	ldd	r30, Y+4	; 0x04
     fba:	fd 81       	ldd	r31, Y+5	; 0x05
     fbc:	04 80       	ldd	r0, Z+4	; 0x04
     fbe:	f5 81       	ldd	r31, Z+5	; 0x05
     fc0:	e0 2d       	mov	r30, r0
     fc2:	83 81       	ldd	r24, Z+3	; 0x03
     fc4:	94 81       	ldd	r25, Z+4	; 0x04
     fc6:	01 97       	sbiw	r24, 0x01	; 1
     fc8:	94 83       	std	Z+4, r25	; 0x04
     fca:	83 83       	std	Z+3, r24	; 0x03
        //выделяем новую группу
        gitem->group = group_pop();
     fcc:	0e 94 49 09 	call	0x1292	; 0x1292 <group_pop>
     fd0:	ec 81       	ldd	r30, Y+4	; 0x04
     fd2:	fd 81       	ldd	r31, Y+5	; 0x05
     fd4:	95 83       	std	Z+5, r25	; 0x05
     fd6:	84 83       	std	Z+4, r24	; 0x04
        // Правильный приоритет, количество элементов в группе, выделенной из пула должно быть равно 1
        gitem->group->prio = (prio_t)prio;
     fd8:	ec 81       	ldd	r30, Y+4	; 0x04
     fda:	fd 81       	ldd	r31, Y+5	; 0x05
     fdc:	04 80       	ldd	r0, Z+4	; 0x04
     fde:	f5 81       	ldd	r31, Z+5	; 0x05
     fe0:	e0 2d       	mov	r30, r0
     fe2:	8b 81       	ldd	r24, Y+3	; 0x03
     fe4:	82 83       	std	Z+2, r24	; 0x02
    }
    //Является ли элемент единственным в своей части списка?
    if( ((item_t *)gitem)->next == (item_t *)gitem )
     fe6:	ec 81       	ldd	r30, Y+4	; 0x04
     fe8:	fd 81       	ldd	r31, Y+5	; 0x05
     fea:	20 81       	ld	r18, Z
     fec:	31 81       	ldd	r19, Z+1	; 0x01
     fee:	8c 81       	ldd	r24, Y+4	; 0x04
     ff0:	9d 81       	ldd	r25, Y+5	; 0x05
     ff2:	28 17       	cp	r18, r24
     ff4:	39 07       	cpc	r19, r25
     ff6:	09 f5       	brne	.+66     	; 0x103a <gitem_fast_cut+0xc8>
    {
        // Да, является!
        xlist->item[prio] = (item_t *)0;
     ff8:	8b 81       	ldd	r24, Y+3	; 0x03
     ffa:	88 2f       	mov	r24, r24
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	29 81       	ldd	r18, Y+1	; 0x01
    1000:	3a 81       	ldd	r19, Y+2	; 0x02
    1002:	88 0f       	add	r24, r24
    1004:	99 1f       	adc	r25, r25
    1006:	f9 01       	movw	r30, r18
    1008:	e8 0f       	add	r30, r24
    100a:	f9 1f       	adc	r31, r25
    100c:	11 82       	std	Z+1, r1	; 0x01
    100e:	10 82       	st	Z, r1
        xlist->index &= ~(((index_t)1)<<prio);
    1010:	e9 81       	ldd	r30, Y+1	; 0x01
    1012:	fa 81       	ldd	r31, Y+2	; 0x02
    1014:	80 89       	ldd	r24, Z+16	; 0x10
    1016:	48 2f       	mov	r20, r24
    1018:	8b 81       	ldd	r24, Y+3	; 0x03
    101a:	28 2f       	mov	r18, r24
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	81 e0       	ldi	r24, 0x01	; 1
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	02 2e       	mov	r0, r18
    1024:	02 c0       	rjmp	.+4      	; 0x102a <gitem_fast_cut+0xb8>
    1026:	88 0f       	add	r24, r24
    1028:	99 1f       	adc	r25, r25
    102a:	0a 94       	dec	r0
    102c:	e2 f7       	brpl	.-8      	; 0x1026 <gitem_fast_cut+0xb4>
    102e:	80 95       	com	r24
    1030:	84 23       	and	r24, r20
    1032:	e9 81       	ldd	r30, Y+1	; 0x01
    1034:	fa 81       	ldd	r31, Y+2	; 0x02
    1036:	80 8b       	std	Z+16, r24	; 0x10
    1038:	1a c0       	rjmp	.+52     	; 0x106e <gitem_fast_cut+0xfc>
    }
    else
    {
        // Нет, не является!
        // Является ли элемент головой своей части списка?
        if( xlist->item[(prio_t)prio] == (item_t *)gitem )
    103a:	8b 81       	ldd	r24, Y+3	; 0x03
    103c:	88 2f       	mov	r24, r24
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	29 81       	ldd	r18, Y+1	; 0x01
    1042:	3a 81       	ldd	r19, Y+2	; 0x02
    1044:	88 0f       	add	r24, r24
    1046:	99 1f       	adc	r25, r25
    1048:	f9 01       	movw	r30, r18
    104a:	e8 0f       	add	r30, r24
    104c:	f9 1f       	adc	r31, r25
    104e:	20 81       	ld	r18, Z
    1050:	31 81       	ldd	r19, Z+1	; 0x01
    1052:	8c 81       	ldd	r24, Y+4	; 0x04
    1054:	9d 81       	ldd	r25, Y+5	; 0x05
    1056:	28 17       	cp	r18, r24
    1058:	39 07       	cpc	r19, r25
    105a:	29 f4       	brne	.+10     	; 0x1066 <gitem_fast_cut+0xf4>
        {
            // Является, список надо переключить
            xlist_switch( xlist, prio );
    105c:	89 81       	ldd	r24, Y+1	; 0x01
    105e:	9a 81       	ldd	r25, Y+2	; 0x02
    1060:	6b 81       	ldd	r22, Y+3	; 0x03
    1062:	0e 94 ab 11 	call	0x2356	; 0x2356 <xlist_switch>
        }
        // Собственно - вырезаем элемент
        item_cut( (item_t *)gitem );
    1066:	8c 81       	ldd	r24, Y+4	; 0x04
    1068:	9d 81       	ldd	r25, Y+5	; 0x05
    106a:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <item_cut>
    }
}
    106e:	0f 90       	pop	r0
    1070:	0f 90       	pop	r0
    1072:	0f 90       	pop	r0
    1074:	0f 90       	pop	r0
    1076:	0f 90       	pop	r0
    1078:	cf 91       	pop	r28
    107a:	df 91       	pop	r29
    107c:	08 95       	ret

0000107e <gitem_cut>:
// Вырезать из списка
void gitem_cut(gitem_t * gitem)
{
    107e:	df 93       	push	r29
    1080:	cf 93       	push	r28
    1082:	00 d0       	rcall	.+0      	; 0x1084 <gitem_cut+0x6>
    1084:	cd b7       	in	r28, 0x3d	; 61
    1086:	de b7       	in	r29, 0x3e	; 62
    1088:	9a 83       	std	Y+2, r25	; 0x02
    108a:	89 83       	std	Y+1, r24	; 0x01
    gitem_fast_cut( gitem );
    108c:	89 81       	ldd	r24, Y+1	; 0x01
    108e:	9a 81       	ldd	r25, Y+2	; 0x02
    1090:	0e 94 b9 07 	call	0xf72	; 0xf72 <gitem_fast_cut>
    gitem->group->link = (void *)0;
    1094:	e9 81       	ldd	r30, Y+1	; 0x01
    1096:	fa 81       	ldd	r31, Y+2	; 0x02
    1098:	04 80       	ldd	r0, Z+4	; 0x04
    109a:	f5 81       	ldd	r31, Z+5	; 0x05
    109c:	e0 2d       	mov	r30, r0
    109e:	11 82       	std	Z+1, r1	; 0x01
    10a0:	10 82       	st	Z, r1
}
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	cf 91       	pop	r28
    10a8:	df 91       	pop	r29
    10aa:	08 95       	ret

000010ac <gitem_xlist_merge>:
 1) Оба списка содержат только объекты типа gitem_t
 2) В списке source на каждом уровне приоритета все объекты типа gitem_t приенадлежат к одной группе.
 3) Элементы списка source, находящиеся на разных уровнях приоритета, пренадлежат разным группам.
*/
void gitem_xlist_merge(xlist_t * source, xlist_t * destignation)
{
    10ac:	df 93       	push	r29
    10ae:	cf 93       	push	r28
    10b0:	cd b7       	in	r28, 0x3d	; 61
    10b2:	de b7       	in	r29, 0x3e	; 62
    10b4:	2c 97       	sbiw	r28, 0x0c	; 12
    10b6:	0f b6       	in	r0, 0x3f	; 63
    10b8:	f8 94       	cli
    10ba:	de bf       	out	0x3e, r29	; 62
    10bc:	0f be       	out	0x3f, r0	; 63
    10be:	cd bf       	out	0x3d, r28	; 61
    10c0:	9a 87       	std	Y+10, r25	; 0x0a
    10c2:	89 87       	std	Y+9, r24	; 0x09
    10c4:	7c 87       	std	Y+12, r23	; 0x0c
    10c6:	6b 87       	std	Y+11, r22	; 0x0b
    index_t mask = (index_t)1;
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	88 87       	std	Y+8, r24	; 0x08
    prio_t current_prio = (prio_t)0;
    10cc:	1f 82       	std	Y+7, r1	; 0x07
    10ce:	9a c0       	rjmp	.+308    	; 0x1204 <gitem_xlist_merge+0x158>
    while( mask )
    {
        // Есть че перенести?
        if( mask & source->index )
    10d0:	e9 85       	ldd	r30, Y+9	; 0x09
    10d2:	fa 85       	ldd	r31, Y+10	; 0x0a
    10d4:	90 89       	ldd	r25, Z+16	; 0x10
    10d6:	88 85       	ldd	r24, Y+8	; 0x08
    10d8:	89 23       	and	r24, r25
    10da:	88 23       	and	r24, r24
    10dc:	09 f4       	brne	.+2      	; 0x10e0 <gitem_xlist_merge+0x34>
    10de:	8c c0       	rjmp	.+280    	; 0x11f8 <gitem_xlist_merge+0x14c>
        {
            // Есть!
            // Есть куда переносить?
            if( mask & destignation->index )
    10e0:	eb 85       	ldd	r30, Y+11	; 0x0b
    10e2:	fc 85       	ldd	r31, Y+12	; 0x0c
    10e4:	90 89       	ldd	r25, Z+16	; 0x10
    10e6:	88 85       	ldd	r24, Y+8	; 0x08
    10e8:	89 23       	and	r24, r25
    10ea:	88 23       	and	r24, r24
    10ec:	09 f4       	brne	.+2      	; 0x10f0 <gitem_xlist_merge+0x44>
    10ee:	43 c0       	rjmp	.+134    	; 0x1176 <gitem_xlist_merge+0xca>
            {
                //Есть!
                // Сшиваем 2 2-связных списка!!!
                item_t * src = source->item[current_prio];
    10f0:	8f 81       	ldd	r24, Y+7	; 0x07
    10f2:	88 2f       	mov	r24, r24
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	29 85       	ldd	r18, Y+9	; 0x09
    10f8:	3a 85       	ldd	r19, Y+10	; 0x0a
    10fa:	88 0f       	add	r24, r24
    10fc:	99 1f       	adc	r25, r25
    10fe:	f9 01       	movw	r30, r18
    1100:	e8 0f       	add	r30, r24
    1102:	f9 1f       	adc	r31, r25
    1104:	80 81       	ld	r24, Z
    1106:	91 81       	ldd	r25, Z+1	; 0x01
    1108:	9e 83       	std	Y+6, r25	; 0x06
    110a:	8d 83       	std	Y+5, r24	; 0x05
                item_t * dst = destignation->item[current_prio];
    110c:	8f 81       	ldd	r24, Y+7	; 0x07
    110e:	88 2f       	mov	r24, r24
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	2b 85       	ldd	r18, Y+11	; 0x0b
    1114:	3c 85       	ldd	r19, Y+12	; 0x0c
    1116:	88 0f       	add	r24, r24
    1118:	99 1f       	adc	r25, r25
    111a:	f9 01       	movw	r30, r18
    111c:	e8 0f       	add	r30, r24
    111e:	f9 1f       	adc	r31, r25
    1120:	80 81       	ld	r24, Z
    1122:	91 81       	ldd	r25, Z+1	; 0x01
    1124:	9c 83       	std	Y+4, r25	; 0x04
    1126:	8b 83       	std	Y+3, r24	; 0x03
                src->prev->next = dst;
    1128:	ed 81       	ldd	r30, Y+5	; 0x05
    112a:	fe 81       	ldd	r31, Y+6	; 0x06
    112c:	02 80       	ldd	r0, Z+2	; 0x02
    112e:	f3 81       	ldd	r31, Z+3	; 0x03
    1130:	e0 2d       	mov	r30, r0
    1132:	8b 81       	ldd	r24, Y+3	; 0x03
    1134:	9c 81       	ldd	r25, Y+4	; 0x04
    1136:	91 83       	std	Z+1, r25	; 0x01
    1138:	80 83       	st	Z, r24
                dst->prev->next = src;
    113a:	eb 81       	ldd	r30, Y+3	; 0x03
    113c:	fc 81       	ldd	r31, Y+4	; 0x04
    113e:	02 80       	ldd	r0, Z+2	; 0x02
    1140:	f3 81       	ldd	r31, Z+3	; 0x03
    1142:	e0 2d       	mov	r30, r0
    1144:	8d 81       	ldd	r24, Y+5	; 0x05
    1146:	9e 81       	ldd	r25, Y+6	; 0x06
    1148:	91 83       	std	Z+1, r25	; 0x01
    114a:	80 83       	st	Z, r24
                item_t * buf = dst->prev;
    114c:	eb 81       	ldd	r30, Y+3	; 0x03
    114e:	fc 81       	ldd	r31, Y+4	; 0x04
    1150:	82 81       	ldd	r24, Z+2	; 0x02
    1152:	93 81       	ldd	r25, Z+3	; 0x03
    1154:	9a 83       	std	Y+2, r25	; 0x02
    1156:	89 83       	std	Y+1, r24	; 0x01
                dst->prev = src->prev;
    1158:	ed 81       	ldd	r30, Y+5	; 0x05
    115a:	fe 81       	ldd	r31, Y+6	; 0x06
    115c:	82 81       	ldd	r24, Z+2	; 0x02
    115e:	93 81       	ldd	r25, Z+3	; 0x03
    1160:	eb 81       	ldd	r30, Y+3	; 0x03
    1162:	fc 81       	ldd	r31, Y+4	; 0x04
    1164:	93 83       	std	Z+3, r25	; 0x03
    1166:	82 83       	std	Z+2, r24	; 0x02
                src->prev = buf;
    1168:	ed 81       	ldd	r30, Y+5	; 0x05
    116a:	fe 81       	ldd	r31, Y+6	; 0x06
    116c:	89 81       	ldd	r24, Y+1	; 0x01
    116e:	9a 81       	ldd	r25, Y+2	; 0x02
    1170:	93 83       	std	Z+3, r25	; 0x03
    1172:	82 83       	std	Z+2, r24	; 0x02
    1174:	21 c0       	rjmp	.+66     	; 0x11b8 <gitem_xlist_merge+0x10c>
            }
            else
            {
                //Нет, тупо переносим всю группу.
                destignation->item[current_prio] = source->item[current_prio];
    1176:	8f 81       	ldd	r24, Y+7	; 0x07
    1178:	68 2f       	mov	r22, r24
    117a:	70 e0       	ldi	r23, 0x00	; 0
    117c:	8f 81       	ldd	r24, Y+7	; 0x07
    117e:	88 2f       	mov	r24, r24
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	29 85       	ldd	r18, Y+9	; 0x09
    1184:	3a 85       	ldd	r19, Y+10	; 0x0a
    1186:	88 0f       	add	r24, r24
    1188:	99 1f       	adc	r25, r25
    118a:	f9 01       	movw	r30, r18
    118c:	e8 0f       	add	r30, r24
    118e:	f9 1f       	adc	r31, r25
    1190:	40 81       	ld	r20, Z
    1192:	51 81       	ldd	r21, Z+1	; 0x01
    1194:	2b 85       	ldd	r18, Y+11	; 0x0b
    1196:	3c 85       	ldd	r19, Y+12	; 0x0c
    1198:	cb 01       	movw	r24, r22
    119a:	88 0f       	add	r24, r24
    119c:	99 1f       	adc	r25, r25
    119e:	f9 01       	movw	r30, r18
    11a0:	e8 0f       	add	r30, r24
    11a2:	f9 1f       	adc	r31, r25
    11a4:	51 83       	std	Z+1, r21	; 0x01
    11a6:	40 83       	st	Z, r20
                destignation->index |= mask;
    11a8:	eb 85       	ldd	r30, Y+11	; 0x0b
    11aa:	fc 85       	ldd	r31, Y+12	; 0x0c
    11ac:	90 89       	ldd	r25, Z+16	; 0x10
    11ae:	88 85       	ldd	r24, Y+8	; 0x08
    11b0:	89 2b       	or	r24, r25
    11b2:	eb 85       	ldd	r30, Y+11	; 0x0b
    11b4:	fc 85       	ldd	r31, Y+12	; 0x0c
    11b6:	80 8b       	std	Z+16, r24	; 0x10
            }
            // Вот почему эта функция отнесена к методам gitem_t
            ((gitem_t *)source->item[current_prio])->group->link = (void *)destignation;
    11b8:	8f 81       	ldd	r24, Y+7	; 0x07
    11ba:	88 2f       	mov	r24, r24
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	29 85       	ldd	r18, Y+9	; 0x09
    11c0:	3a 85       	ldd	r19, Y+10	; 0x0a
    11c2:	88 0f       	add	r24, r24
    11c4:	99 1f       	adc	r25, r25
    11c6:	f9 01       	movw	r30, r18
    11c8:	e8 0f       	add	r30, r24
    11ca:	f9 1f       	adc	r31, r25
    11cc:	80 81       	ld	r24, Z
    11ce:	91 81       	ldd	r25, Z+1	; 0x01
    11d0:	fc 01       	movw	r30, r24
    11d2:	04 80       	ldd	r0, Z+4	; 0x04
    11d4:	f5 81       	ldd	r31, Z+5	; 0x05
    11d6:	e0 2d       	mov	r30, r0
    11d8:	8b 85       	ldd	r24, Y+11	; 0x0b
    11da:	9c 85       	ldd	r25, Y+12	; 0x0c
    11dc:	91 83       	std	Z+1, r25	; 0x01
    11de:	80 83       	st	Z, r24
            // Перенос закончен, обнуляем указатель
            source->item[(prio_t)current_prio] = (item_t *)0;
    11e0:	8f 81       	ldd	r24, Y+7	; 0x07
    11e2:	88 2f       	mov	r24, r24
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	29 85       	ldd	r18, Y+9	; 0x09
    11e8:	3a 85       	ldd	r19, Y+10	; 0x0a
    11ea:	88 0f       	add	r24, r24
    11ec:	99 1f       	adc	r25, r25
    11ee:	f9 01       	movw	r30, r18
    11f0:	e8 0f       	add	r30, r24
    11f2:	f9 1f       	adc	r31, r25
    11f4:	11 82       	std	Z+1, r1	; 0x01
    11f6:	10 82       	st	Z, r1
        }
        mask<<=1;
    11f8:	88 85       	ldd	r24, Y+8	; 0x08
    11fa:	88 0f       	add	r24, r24
    11fc:	88 87       	std	Y+8, r24	; 0x08
        current_prio++;
    11fe:	8f 81       	ldd	r24, Y+7	; 0x07
    1200:	8f 5f       	subi	r24, 0xFF	; 255
    1202:	8f 83       	std	Y+7, r24	; 0x07
*/
void gitem_xlist_merge(xlist_t * source, xlist_t * destignation)
{
    index_t mask = (index_t)1;
    prio_t current_prio = (prio_t)0;
    while( mask )
    1204:	88 85       	ldd	r24, Y+8	; 0x08
    1206:	88 23       	and	r24, r24
    1208:	09 f0       	breq	.+2      	; 0x120c <gitem_xlist_merge+0x160>
    120a:	62 cf       	rjmp	.-316    	; 0x10d0 <gitem_xlist_merge+0x24>
        }
        mask<<=1;
        current_prio++;
    }
    // Список полностью перенесен, обнуляем индекс
    source->index = (index_t)0;
    120c:	e9 85       	ldd	r30, Y+9	; 0x09
    120e:	fa 85       	ldd	r31, Y+10	; 0x0a
    1210:	10 8a       	std	Z+16, r1	; 0x10
}
    1212:	2c 96       	adiw	r28, 0x0c	; 12
    1214:	0f b6       	in	r0, 0x3f	; 63
    1216:	f8 94       	cli
    1218:	de bf       	out	0x3e, r29	; 62
    121a:	0f be       	out	0x3f, r0	; 63
    121c:	cd bf       	out	0x3d, r28	; 61
    121e:	cf 91       	pop	r28
    1220:	df 91       	pop	r29
    1222:	08 95       	ret

00001224 <group_init>:
*****************************************************************************************/
#include "../include/bugurt.h"
//Методы group_t
// инициация
void group_init(group_t * group, prio_t prio)
{
    1224:	df 93       	push	r29
    1226:	cf 93       	push	r28
    1228:	00 d0       	rcall	.+0      	; 0x122a <group_init+0x6>
    122a:	0f 92       	push	r0
    122c:	cd b7       	in	r28, 0x3d	; 61
    122e:	de b7       	in	r29, 0x3e	; 62
    1230:	9a 83       	std	Y+2, r25	; 0x02
    1232:	89 83       	std	Y+1, r24	; 0x01
    1234:	6b 83       	std	Y+3, r22	; 0x03
    group->link = (void *)0;
    1236:	e9 81       	ldd	r30, Y+1	; 0x01
    1238:	fa 81       	ldd	r31, Y+2	; 0x02
    123a:	11 82       	std	Z+1, r1	; 0x01
    123c:	10 82       	st	Z, r1
    group->prio = prio;
    123e:	e9 81       	ldd	r30, Y+1	; 0x01
    1240:	fa 81       	ldd	r31, Y+2	; 0x02
    1242:	8b 81       	ldd	r24, Y+3	; 0x03
    1244:	82 83       	std	Z+2, r24	; 0x02
    // группа - часть gitem_t, количество элементов - 1
    group->el_num = (count_t)1;
    1246:	e9 81       	ldd	r30, Y+1	; 0x01
    1248:	fa 81       	ldd	r31, Y+2	; 0x02
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	94 83       	std	Z+4, r25	; 0x04
    1250:	83 83       	std	Z+3, r24	; 0x03
}
    1252:	0f 90       	pop	r0
    1254:	0f 90       	pop	r0
    1256:	0f 90       	pop	r0
    1258:	cf 91       	pop	r28
    125a:	df 91       	pop	r29
    125c:	08 95       	ret

0000125e <group_push>:
// положить в ПУЛ
void group_push(group_t * group)
{
    125e:	df 93       	push	r29
    1260:	cf 93       	push	r28
    1262:	00 d0       	rcall	.+0      	; 0x1264 <group_push+0x6>
    1264:	cd b7       	in	r28, 0x3d	; 61
    1266:	de b7       	in	r29, 0x3e	; 62
    1268:	9a 83       	std	Y+2, r25	; 0x02
    126a:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    // блокируем пул
    spin_lock( &kernel.pool_lock );
#endif
    group->link = (void *)kernel.pool;
    126c:	80 91 76 02 	lds	r24, 0x0276
    1270:	90 91 77 02 	lds	r25, 0x0277
    1274:	e9 81       	ldd	r30, Y+1	; 0x01
    1276:	fa 81       	ldd	r31, Y+2	; 0x02
    1278:	91 83       	std	Z+1, r25	; 0x01
    127a:	80 83       	st	Z, r24
    kernel.pool = group;
    127c:	89 81       	ldd	r24, Y+1	; 0x01
    127e:	9a 81       	ldd	r25, Y+2	; 0x02
    1280:	90 93 77 02 	sts	0x0277, r25
    1284:	80 93 76 02 	sts	0x0276, r24
#ifdef CONFIG_MP
    // разблокируем пул
    spin_unlock( &kernel.pool_lock );
#endif
}
    1288:	0f 90       	pop	r0
    128a:	0f 90       	pop	r0
    128c:	cf 91       	pop	r28
    128e:	df 91       	pop	r29
    1290:	08 95       	ret

00001292 <group_pop>:
// взять из пула, если есть, а есть всегда, избыточность же!
group_t * group_pop(void)
{
    1292:	df 93       	push	r29
    1294:	cf 93       	push	r28
    1296:	00 d0       	rcall	.+0      	; 0x1298 <group_pop+0x6>
    1298:	cd b7       	in	r28, 0x3d	; 61
    129a:	de b7       	in	r29, 0x3e	; 62
#ifdef CONFIG_MP
    // блокируем пул
    spin_lock( &kernel.pool_lock );
#endif
    group_t * group = kernel.pool;
    129c:	80 91 76 02 	lds	r24, 0x0276
    12a0:	90 91 77 02 	lds	r25, 0x0277
    12a4:	9a 83       	std	Y+2, r25	; 0x02
    12a6:	89 83       	std	Y+1, r24	; 0x01
    kernel.pool = (group_t *)group->link;
    12a8:	e9 81       	ldd	r30, Y+1	; 0x01
    12aa:	fa 81       	ldd	r31, Y+2	; 0x02
    12ac:	80 81       	ld	r24, Z
    12ae:	91 81       	ldd	r25, Z+1	; 0x01
    12b0:	90 93 77 02 	sts	0x0277, r25
    12b4:	80 93 76 02 	sts	0x0276, r24
#ifdef CONFIG_MP
    // разблокируем пул
    spin_unlock( &kernel.pool_lock );
#endif
    return group;
    12b8:	89 81       	ldd	r24, Y+1	; 0x01
    12ba:	9a 81       	ldd	r25, Y+2	; 0x02
}
    12bc:	0f 90       	pop	r0
    12be:	0f 90       	pop	r0
    12c0:	cf 91       	pop	r28
    12c2:	df 91       	pop	r29
    12c4:	08 95       	ret

000012c6 <index_search>:
*                           http://www.0chan.ru/r/res/9996.html                          *
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
prio_t index_search(index_t index)
{
    12c6:	df 93       	push	r29
    12c8:	cf 93       	push	r28
    12ca:	00 d0       	rcall	.+0      	; 0x12cc <index_search+0x6>
    12cc:	00 d0       	rcall	.+0      	; 0x12ce <index_search+0x8>
    12ce:	00 d0       	rcall	.+0      	; 0x12d0 <index_search+0xa>
    12d0:	cd b7       	in	r28, 0x3d	; 61
    12d2:	de b7       	in	r29, 0x3e	; 62
    12d4:	8e 83       	std	Y+6, r24	; 0x06
    prio_t prio = (prio_t)0;
    12d6:	1d 82       	std	Y+5, r1	; 0x05
        но, т.к. BITS_IN_INDEX_T фиксировано для данной конфигурации,
        то получается время выполнения - O(1), ВСЕГДА.

        И да, предсказуемость + переносимость > быстродействие.
        */
    index_t upper = ~(index_t)0, lower = ~(index_t)0, middle;
    12d8:	8f ef       	ldi	r24, 0xFF	; 255
    12da:	8c 83       	std	Y+4, r24	; 0x04
    12dc:	8f ef       	ldi	r24, 0xFF	; 255
    12de:	8b 83       	std	Y+3, r24	; 0x03
    prio_t step = (prio_t)BITS_IN_INDEX_T;
    12e0:	88 e0       	ldi	r24, 0x08	; 8
    12e2:	89 83       	std	Y+1, r24	; 0x01
    12e4:	22 c0       	rjmp	.+68     	; 0x132a <index_search+0x64>
    while( step )
    {
        step>>=1; // делим шаг пополам
    12e6:	89 81       	ldd	r24, Y+1	; 0x01
    12e8:	86 95       	lsr	r24
    12ea:	89 83       	std	Y+1, r24	; 0x01
        middle = lower>>step;
    12ec:	8b 81       	ldd	r24, Y+3	; 0x03
    12ee:	28 2f       	mov	r18, r24
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	89 81       	ldd	r24, Y+1	; 0x01
    12f4:	88 2f       	mov	r24, r24
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	a9 01       	movw	r20, r18
    12fa:	02 c0       	rjmp	.+4      	; 0x1300 <index_search+0x3a>
    12fc:	55 95       	asr	r21
    12fe:	47 95       	ror	r20
    1300:	8a 95       	dec	r24
    1302:	e2 f7       	brpl	.-8      	; 0x12fc <index_search+0x36>
    1304:	ca 01       	movw	r24, r20
    1306:	8a 83       	std	Y+2, r24	; 0x02
        if( index & upper & middle )
    1308:	9e 81       	ldd	r25, Y+6	; 0x06
    130a:	8c 81       	ldd	r24, Y+4	; 0x04
    130c:	98 23       	and	r25, r24
    130e:	8a 81       	ldd	r24, Y+2	; 0x02
    1310:	89 23       	and	r24, r25
    1312:	88 23       	and	r24, r24
    1314:	19 f0       	breq	.+6      	; 0x131c <index_search+0x56>
        {
            lower = middle;
    1316:	8a 81       	ldd	r24, Y+2	; 0x02
    1318:	8b 83       	std	Y+3, r24	; 0x03
    131a:	07 c0       	rjmp	.+14     	; 0x132a <index_search+0x64>
        }
        else
        {
            upper = ~middle;
    131c:	8a 81       	ldd	r24, Y+2	; 0x02
    131e:	80 95       	com	r24
    1320:	8c 83       	std	Y+4, r24	; 0x04
            prio += step;
    1322:	9d 81       	ldd	r25, Y+5	; 0x05
    1324:	89 81       	ldd	r24, Y+1	; 0x01
    1326:	89 0f       	add	r24, r25
    1328:	8d 83       	std	Y+5, r24	; 0x05

        И да, предсказуемость + переносимость > быстродействие.
        */
    index_t upper = ~(index_t)0, lower = ~(index_t)0, middle;
    prio_t step = (prio_t)BITS_IN_INDEX_T;
    while( step )
    132a:	89 81       	ldd	r24, Y+1	; 0x01
    132c:	88 23       	and	r24, r24
    132e:	d9 f6       	brne	.-74     	; 0x12e6 <index_search+0x20>
        if ( mask & index )break;
        prio++;
        mask<<=1;
    }
#endif
    return prio;
    1330:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1332:	26 96       	adiw	r28, 0x06	; 6
    1334:	0f b6       	in	r0, 0x3f	; 63
    1336:	f8 94       	cli
    1338:	de bf       	out	0x3e, r29	; 62
    133a:	0f be       	out	0x3f, r0	; 63
    133c:	cd bf       	out	0x3d, r28	; 61
    133e:	cf 91       	pop	r28
    1340:	df 91       	pop	r29
    1342:	08 95       	ret

00001344 <item_init>:
*****************************************************************************************/
#include "../include/bugurt.h"
//Методы элемента 2-связного списка
//инициация элемента
void item_init(item_t *item)
{
    1344:	df 93       	push	r29
    1346:	cf 93       	push	r28
    1348:	00 d0       	rcall	.+0      	; 0x134a <item_init+0x6>
    134a:	cd b7       	in	r28, 0x3d	; 61
    134c:	de b7       	in	r29, 0x3e	; 62
    134e:	9a 83       	std	Y+2, r25	; 0x02
    1350:	89 83       	std	Y+1, r24	; 0x01
    item->prev = item;
    1352:	e9 81       	ldd	r30, Y+1	; 0x01
    1354:	fa 81       	ldd	r31, Y+2	; 0x02
    1356:	89 81       	ldd	r24, Y+1	; 0x01
    1358:	9a 81       	ldd	r25, Y+2	; 0x02
    135a:	93 83       	std	Z+3, r25	; 0x03
    135c:	82 83       	std	Z+2, r24	; 0x02
    item->next = item;
    135e:	e9 81       	ldd	r30, Y+1	; 0x01
    1360:	fa 81       	ldd	r31, Y+2	; 0x02
    1362:	89 81       	ldd	r24, Y+1	; 0x01
    1364:	9a 81       	ldd	r25, Y+2	; 0x02
    1366:	91 83       	std	Z+1, r25	; 0x01
    1368:	80 83       	st	Z, r24
}
    136a:	0f 90       	pop	r0
    136c:	0f 90       	pop	r0
    136e:	cf 91       	pop	r28
    1370:	df 91       	pop	r29
    1372:	08 95       	ret

00001374 <item_insert>:
//Вставить элемент
void item_insert(item_t *item, item_t *head)
{
    1374:	df 93       	push	r29
    1376:	cf 93       	push	r28
    1378:	00 d0       	rcall	.+0      	; 0x137a <item_insert+0x6>
    137a:	00 d0       	rcall	.+0      	; 0x137c <item_insert+0x8>
    137c:	00 d0       	rcall	.+0      	; 0x137e <item_insert+0xa>
    137e:	cd b7       	in	r28, 0x3d	; 61
    1380:	de b7       	in	r29, 0x3e	; 62
    1382:	9c 83       	std	Y+4, r25	; 0x04
    1384:	8b 83       	std	Y+3, r24	; 0x03
    1386:	7e 83       	std	Y+6, r23	; 0x06
    1388:	6d 83       	std	Y+5, r22	; 0x05
    // "хвост" списка
    item_t * tail = head->prev;
    138a:	ed 81       	ldd	r30, Y+5	; 0x05
    138c:	fe 81       	ldd	r31, Y+6	; 0x06
    138e:	82 81       	ldd	r24, Z+2	; 0x02
    1390:	93 81       	ldd	r25, Z+3	; 0x03
    1392:	9a 83       	std	Y+2, r25	; 0x02
    1394:	89 83       	std	Y+1, r24	; 0x01

    // Вставляем элемент между "головой" и "хвостом"
    item->prev = tail;
    1396:	eb 81       	ldd	r30, Y+3	; 0x03
    1398:	fc 81       	ldd	r31, Y+4	; 0x04
    139a:	89 81       	ldd	r24, Y+1	; 0x01
    139c:	9a 81       	ldd	r25, Y+2	; 0x02
    139e:	93 83       	std	Z+3, r25	; 0x03
    13a0:	82 83       	std	Z+2, r24	; 0x02
    item->next = head;
    13a2:	eb 81       	ldd	r30, Y+3	; 0x03
    13a4:	fc 81       	ldd	r31, Y+4	; 0x04
    13a6:	8d 81       	ldd	r24, Y+5	; 0x05
    13a8:	9e 81       	ldd	r25, Y+6	; 0x06
    13aa:	91 83       	std	Z+1, r25	; 0x01
    13ac:	80 83       	st	Z, r24

    head->prev = item;
    13ae:	ed 81       	ldd	r30, Y+5	; 0x05
    13b0:	fe 81       	ldd	r31, Y+6	; 0x06
    13b2:	8b 81       	ldd	r24, Y+3	; 0x03
    13b4:	9c 81       	ldd	r25, Y+4	; 0x04
    13b6:	93 83       	std	Z+3, r25	; 0x03
    13b8:	82 83       	std	Z+2, r24	; 0x02
    tail->next = item;
    13ba:	e9 81       	ldd	r30, Y+1	; 0x01
    13bc:	fa 81       	ldd	r31, Y+2	; 0x02
    13be:	8b 81       	ldd	r24, Y+3	; 0x03
    13c0:	9c 81       	ldd	r25, Y+4	; 0x04
    13c2:	91 83       	std	Z+1, r25	; 0x01
    13c4:	80 83       	st	Z, r24
}
    13c6:	26 96       	adiw	r28, 0x06	; 6
    13c8:	0f b6       	in	r0, 0x3f	; 63
    13ca:	f8 94       	cli
    13cc:	de bf       	out	0x3e, r29	; 62
    13ce:	0f be       	out	0x3f, r0	; 63
    13d0:	cd bf       	out	0x3d, r28	; 61
    13d2:	cf 91       	pop	r28
    13d4:	df 91       	pop	r29
    13d6:	08 95       	ret

000013d8 <item_cut>:
//Вырезать элемент
void item_cut( item_t *item )
{
    13d8:	df 93       	push	r29
    13da:	cf 93       	push	r28
    13dc:	00 d0       	rcall	.+0      	; 0x13de <item_cut+0x6>
    13de:	00 d0       	rcall	.+0      	; 0x13e0 <item_cut+0x8>
    13e0:	00 d0       	rcall	.+0      	; 0x13e2 <item_cut+0xa>
    13e2:	cd b7       	in	r28, 0x3d	; 61
    13e4:	de b7       	in	r29, 0x3e	; 62
    13e6:	9e 83       	std	Y+6, r25	; 0x06
    13e8:	8d 83       	std	Y+5, r24	; 0x05
    item_t * prev = item->prev; //Предыдущий элемент
    13ea:	ed 81       	ldd	r30, Y+5	; 0x05
    13ec:	fe 81       	ldd	r31, Y+6	; 0x06
    13ee:	82 81       	ldd	r24, Z+2	; 0x02
    13f0:	93 81       	ldd	r25, Z+3	; 0x03
    13f2:	9c 83       	std	Y+4, r25	; 0x04
    13f4:	8b 83       	std	Y+3, r24	; 0x03
    item_t * next = item->next; //Следующий элемент
    13f6:	ed 81       	ldd	r30, Y+5	; 0x05
    13f8:	fe 81       	ldd	r31, Y+6	; 0x06
    13fa:	80 81       	ld	r24, Z
    13fc:	91 81       	ldd	r25, Z+1	; 0x01
    13fe:	9a 83       	std	Y+2, r25	; 0x02
    1400:	89 83       	std	Y+1, r24	; 0x01

    next->prev = prev;
    1402:	e9 81       	ldd	r30, Y+1	; 0x01
    1404:	fa 81       	ldd	r31, Y+2	; 0x02
    1406:	8b 81       	ldd	r24, Y+3	; 0x03
    1408:	9c 81       	ldd	r25, Y+4	; 0x04
    140a:	93 83       	std	Z+3, r25	; 0x03
    140c:	82 83       	std	Z+2, r24	; 0x02
    prev->next = next;
    140e:	eb 81       	ldd	r30, Y+3	; 0x03
    1410:	fc 81       	ldd	r31, Y+4	; 0x04
    1412:	89 81       	ldd	r24, Y+1	; 0x01
    1414:	9a 81       	ldd	r25, Y+2	; 0x02
    1416:	91 83       	std	Z+1, r25	; 0x01
    1418:	80 83       	st	Z, r24

    item->prev = item;
    141a:	ed 81       	ldd	r30, Y+5	; 0x05
    141c:	fe 81       	ldd	r31, Y+6	; 0x06
    141e:	8d 81       	ldd	r24, Y+5	; 0x05
    1420:	9e 81       	ldd	r25, Y+6	; 0x06
    1422:	93 83       	std	Z+3, r25	; 0x03
    1424:	82 83       	std	Z+2, r24	; 0x02
    item->next = item;
    1426:	ed 81       	ldd	r30, Y+5	; 0x05
    1428:	fe 81       	ldd	r31, Y+6	; 0x06
    142a:	8d 81       	ldd	r24, Y+5	; 0x05
    142c:	9e 81       	ldd	r25, Y+6	; 0x06
    142e:	91 83       	std	Z+1, r25	; 0x01
    1430:	80 83       	st	Z, r24
}
    1432:	26 96       	adiw	r28, 0x06	; 6
    1434:	0f b6       	in	r0, 0x3f	; 63
    1436:	f8 94       	cli
    1438:	de bf       	out	0x3e, r29	; 62
    143a:	0f be       	out	0x3f, r0	; 63
    143c:	cd bf       	out	0x3d, r28	; 61
    143e:	cf 91       	pop	r28
    1440:	df 91       	pop	r29
    1442:	08 95       	ret

00001444 <kernel_init>:
{
    while(1);
}

void kernel_init(void)
{
    1444:	8f 92       	push	r8
    1446:	af 92       	push	r10
    1448:	bf 92       	push	r11
    144a:	cf 92       	push	r12
    144c:	ef 92       	push	r14
    144e:	ff 92       	push	r15
    1450:	0f 93       	push	r16
    1452:	1f 93       	push	r17
    1454:	df 93       	push	r29
    1456:	cf 93       	push	r28
    1458:	cd b7       	in	r28, 0x3d	; 61
    145a:	de b7       	in	r29, 0x3e	; 62
        stat_init( (stat_t *)kernel.stat + i );
        sched_init( (sched_t *)kernel.sched + i, (proc_t *)kernel.idle + i );
    }
    spin_unlock( &kernel.stat_lock );
#else
    proc_init_isr(
    145c:	88 e4       	ldi	r24, 0x48	; 72
    145e:	92 e0       	ldi	r25, 0x02	; 2
    1460:	2e eb       	ldi	r18, 0xBE	; 190
    1462:	32 e1       	ldi	r19, 0x12	; 18
    1464:	b9 01       	movw	r22, r18
    1466:	40 e0       	ldi	r20, 0x00	; 0
    1468:	50 e0       	ldi	r21, 0x00	; 0
    146a:	20 e0       	ldi	r18, 0x00	; 0
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	00 e0       	ldi	r16, 0x00	; 0
    1470:	10 e0       	ldi	r17, 0x00	; 0
    1472:	ee 24       	eor	r14, r14
    1474:	ff 24       	eor	r15, r15
    1476:	0f 2e       	mov	r0, r31
    1478:	f7 e0       	ldi	r31, 0x07	; 7
    147a:	cf 2e       	mov	r12, r31
    147c:	f0 2d       	mov	r31, r0
    147e:	aa 24       	eor	r10, r10
    1480:	bb 24       	eor	r11, r11
    1482:	a3 94       	inc	r10
    1484:	88 24       	eor	r8, r8
    1486:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <proc_init_isr>
        0, // это не важно, при первой же смене контекста будет сохранен текущий указатель стека
        ((prio_t)BITS_IN_INDEX_T - (prio_t)1),// низший приоритет
        (timer_t)1,//минимальный квант времени
        (bool_t)0// не RT
    );
    sched_init( (sched_t *)&kernel.sched, (proc_t *)&kernel.idle );
    148a:	8e e1       	ldi	r24, 0x1E	; 30
    148c:	92 e0       	ldi	r25, 0x02	; 2
    148e:	28 e4       	ldi	r18, 0x48	; 72
    1490:	32 e0       	ldi	r19, 0x02	; 2
    1492:	b9 01       	movw	r22, r18
    1494:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <sched_init>
#endif // CONFIG_MP
}
    1498:	cf 91       	pop	r28
    149a:	df 91       	pop	r29
    149c:	1f 91       	pop	r17
    149e:	0f 91       	pop	r16
    14a0:	ff 90       	pop	r15
    14a2:	ef 90       	pop	r14
    14a4:	cf 90       	pop	r12
    14a6:	bf 90       	pop	r11
    14a8:	af 90       	pop	r10
    14aa:	8f 90       	pop	r8
    14ac:	08 95       	ret

000014ae <mutex_init_isr>:
    mutex_t * mutex
#ifdef CONFIG_USE_HIGHEST_LOCKER
    ,prio_t prio
#endif // CONFIG_USE_HIGHEST_LOCKER
)
{
    14ae:	df 93       	push	r29
    14b0:	cf 93       	push	r28
    14b2:	00 d0       	rcall	.+0      	; 0x14b4 <mutex_init_isr+0x6>
    14b4:	0f 92       	push	r0
    14b6:	cd b7       	in	r28, 0x3d	; 61
    14b8:	de b7       	in	r29, 0x3e	; 62
    14ba:	9a 83       	std	Y+2, r25	; 0x02
    14bc:	89 83       	std	Y+1, r24	; 0x01
    14be:	6b 83       	std	Y+3, r22	; 0x03
    xlist_init( (xlist_t *)mutex );
    14c0:	89 81       	ldd	r24, Y+1	; 0x01
    14c2:	9a 81       	ldd	r25, Y+2	; 0x02
    14c4:	0e 94 55 11 	call	0x22aa	; 0x22aa <xlist_init>
    mutex->free = (bool_t)1;
    14c8:	e9 81       	ldd	r30, Y+1	; 0x01
    14ca:	fa 81       	ldd	r31, Y+2	; 0x02
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	82 8b       	std	Z+18, r24	; 0x12
#ifdef CONFIG_USE_HIGHEST_LOCKER
    mutex->prio = prio;
    14d0:	e9 81       	ldd	r30, Y+1	; 0x01
    14d2:	fa 81       	ldd	r31, Y+2	; 0x02
    14d4:	8b 81       	ldd	r24, Y+3	; 0x03
    14d6:	81 8b       	std	Z+17, r24	; 0x11
#endif // CONFIG_USE_HIGHEST_LOCKER
}
    14d8:	0f 90       	pop	r0
    14da:	0f 90       	pop	r0
    14dc:	0f 90       	pop	r0
    14de:	cf 91       	pop	r28
    14e0:	df 91       	pop	r29
    14e2:	08 95       	ret

000014e4 <_mutex_lock>:

// К моменту вызова захвачена блокировка mutex-а, запрещены прерывания
bool_t _mutex_lock( mutex_t * mutex )
{
    14e4:	df 93       	push	r29
    14e6:	cf 93       	push	r28
    14e8:	00 d0       	rcall	.+0      	; 0x14ea <_mutex_lock+0x6>
    14ea:	00 d0       	rcall	.+0      	; 0x14ec <_mutex_lock+0x8>
    14ec:	0f 92       	push	r0
    14ee:	cd b7       	in	r28, 0x3d	; 61
    14f0:	de b7       	in	r29, 0x3e	; 62
    14f2:	9d 83       	std	Y+5, r25	; 0x05
    14f4:	8c 83       	std	Y+4, r24	; 0x04
    bool_t ret = mutex->free;
    14f6:	ec 81       	ldd	r30, Y+4	; 0x04
    14f8:	fd 81       	ldd	r31, Y+5	; 0x05
    14fa:	82 89       	ldd	r24, Z+18	; 0x12
    14fc:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = current_proc();
    14fe:	0e 94 cc 00 	call	0x198	; 0x198 <current_proc>
    1502:	9a 83       	std	Y+2, r25	; 0x02
    1504:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
#ifdef CONFIG_USE_HIGHEST_LOCKER
    _proc_lres_inc( proc, mutex->prio );
    1506:	ec 81       	ldd	r30, Y+4	; 0x04
    1508:	fd 81       	ldd	r31, Y+5	; 0x05
    150a:	21 89       	ldd	r18, Z+17	; 0x11
    150c:	89 81       	ldd	r24, Y+1	; 0x01
    150e:	9a 81       	ldd	r25, Y+2	; 0x02
    1510:	62 2f       	mov	r22, r18
    1512:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <_proc_lres_inc>
#else // !CONFIG_USE_HIGHEST_LOCKER
    _proc_lres_inc( proc );
#endif // CONFIG_USE_HIGHEST_LOCKER
    if( ret )
    1516:	8b 81       	ldd	r24, Y+3	; 0x03
    1518:	88 23       	and	r24, r24
    151a:	41 f0       	breq	.+16     	; 0x152c <_mutex_lock+0x48>
    {
        mutex->free = (bool_t)0;
    151c:	ec 81       	ldd	r30, Y+4	; 0x04
    151e:	fd 81       	ldd	r31, Y+5	; 0x05
    1520:	12 8a       	std	Z+18, r1	; 0x12
#ifdef CONFIG_USE_HIGHEST_LOCKER
        // Меняем приоритет только здесь
        _proc_prio_control_running( proc );
    1522:	89 81       	ldd	r24, Y+1	; 0x01
    1524:	9a 81       	ldd	r25, Y+2	; 0x02
    1526:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <_proc_prio_control_running>
    152a:	1b c0       	rjmp	.+54     	; 0x1562 <_mutex_lock+0x7e>
#endif // CONFIG_USE_HIGHEST_LOCKER
    }
    else
    {
        proc->flags |= PROC_FLG_QUEUE;
    152c:	e9 81       	ldd	r30, Y+1	; 0x01
    152e:	fa 81       	ldd	r31, Y+2	; 0x02
    1530:	83 85       	ldd	r24, Z+11	; 0x0b
    1532:	88 60       	ori	r24, 0x08	; 8
    1534:	e9 81       	ldd	r30, Y+1	; 0x01
    1536:	fa 81       	ldd	r31, Y+2	; 0x02
    1538:	83 87       	std	Z+11, r24	; 0x0b
        proc->flags &= ~PROC_FLG_RUN;
    153a:	e9 81       	ldd	r30, Y+1	; 0x01
    153c:	fa 81       	ldd	r31, Y+2	; 0x02
    153e:	83 85       	ldd	r24, Z+11	; 0x0b
    1540:	8d 7f       	andi	r24, 0xFD	; 253
    1542:	e9 81       	ldd	r30, Y+1	; 0x01
    1544:	fa 81       	ldd	r31, Y+2	; 0x02
    1546:	83 87       	std	Z+11, r24	; 0x0b
        _proc_stop_( proc );
    1548:	89 81       	ldd	r24, Y+1	; 0x01
    154a:	9a 81       	ldd	r25, Y+2	; 0x02
    154c:	0e 94 3f 08 	call	0x107e	; 0x107e <gitem_cut>
        gitem_insert( (gitem_t *)proc, (xlist_t *)mutex );
    1550:	89 81       	ldd	r24, Y+1	; 0x01
    1552:	9a 81       	ldd	r25, Y+2	; 0x02
    1554:	2c 81       	ldd	r18, Y+4	; 0x04
    1556:	3d 81       	ldd	r19, Y+5	; 0x05
    1558:	b9 01       	movw	r22, r18
    155a:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <gitem_insert>
        // Нужна перепланировка
#ifdef CONFIG_MP
        resched( proc->core_id );
#else
        resched();
    155e:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
#endif // CONFIG_MP
    }
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    return ret;
    1562:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1564:	0f 90       	pop	r0
    1566:	0f 90       	pop	r0
    1568:	0f 90       	pop	r0
    156a:	0f 90       	pop	r0
    156c:	0f 90       	pop	r0
    156e:	cf 91       	pop	r28
    1570:	df 91       	pop	r29
    1572:	08 95       	ret

00001574 <_mutex_try_lock>:

bool_t _mutex_try_lock( mutex_t * mutex )
{
    1574:	df 93       	push	r29
    1576:	cf 93       	push	r28
    1578:	00 d0       	rcall	.+0      	; 0x157a <_mutex_try_lock+0x6>
    157a:	00 d0       	rcall	.+0      	; 0x157c <_mutex_try_lock+0x8>
    157c:	0f 92       	push	r0
    157e:	cd b7       	in	r28, 0x3d	; 61
    1580:	de b7       	in	r29, 0x3e	; 62
    1582:	9d 83       	std	Y+5, r25	; 0x05
    1584:	8c 83       	std	Y+4, r24	; 0x04
    bool_t ret = mutex->free;
    1586:	ec 81       	ldd	r30, Y+4	; 0x04
    1588:	fd 81       	ldd	r31, Y+5	; 0x05
    158a:	82 89       	ldd	r24, Z+18	; 0x12
    158c:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = current_proc();
    158e:	0e 94 cc 00 	call	0x198	; 0x198 <current_proc>
    1592:	9a 83       	std	Y+2, r25	; 0x02
    1594:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    if( ret )
    1596:	8b 81       	ldd	r24, Y+3	; 0x03
    1598:	88 23       	and	r24, r24
    159a:	79 f0       	breq	.+30     	; 0x15ba <_mutex_try_lock+0x46>
    {
        mutex->free = (bool_t)0;
    159c:	ec 81       	ldd	r30, Y+4	; 0x04
    159e:	fd 81       	ldd	r31, Y+5	; 0x05
    15a0:	12 8a       	std	Z+18, r1	; 0x12
#ifdef CONFIG_USE_HIGHEST_LOCKER
        _proc_lres_inc( proc, mutex->prio );
    15a2:	ec 81       	ldd	r30, Y+4	; 0x04
    15a4:	fd 81       	ldd	r31, Y+5	; 0x05
    15a6:	21 89       	ldd	r18, Z+17	; 0x11
    15a8:	89 81       	ldd	r24, Y+1	; 0x01
    15aa:	9a 81       	ldd	r25, Y+2	; 0x02
    15ac:	62 2f       	mov	r22, r18
    15ae:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <_proc_lres_inc>
        _proc_prio_control_running( proc );
    15b2:	89 81       	ldd	r24, Y+1	; 0x01
    15b4:	9a 81       	ldd	r25, Y+2	; 0x02
    15b6:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <_proc_prio_control_running>
#endif // CONFIG_USE_HIGHEST_LOCKER
    }
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    return ret;
    15ba:	8b 81       	ldd	r24, Y+3	; 0x03
}
    15bc:	0f 90       	pop	r0
    15be:	0f 90       	pop	r0
    15c0:	0f 90       	pop	r0
    15c2:	0f 90       	pop	r0
    15c4:	0f 90       	pop	r0
    15c6:	cf 91       	pop	r28
    15c8:	df 91       	pop	r29
    15ca:	08 95       	ret

000015cc <_mutex_unlock>:

void _mutex_unlock( mutex_t *  mutex )
{
    15cc:	df 93       	push	r29
    15ce:	cf 93       	push	r28
    15d0:	00 d0       	rcall	.+0      	; 0x15d2 <_mutex_unlock+0x6>
    15d2:	00 d0       	rcall	.+0      	; 0x15d4 <_mutex_unlock+0x8>
    15d4:	cd b7       	in	r28, 0x3d	; 61
    15d6:	de b7       	in	r29, 0x3e	; 62
    15d8:	9c 83       	std	Y+4, r25	; 0x04
    15da:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = current_proc();
    15dc:	0e 94 cc 00 	call	0x198	; 0x198 <current_proc>
    15e0:	9a 83       	std	Y+2, r25	; 0x02
    15e2:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
#ifdef CONFIG_USE_HIGHEST_LOCKER

    _proc_lres_dec( proc, mutex->prio );
    15e4:	eb 81       	ldd	r30, Y+3	; 0x03
    15e6:	fc 81       	ldd	r31, Y+4	; 0x04
    15e8:	21 89       	ldd	r18, Z+17	; 0x11
    15ea:	89 81       	ldd	r24, Y+1	; 0x01
    15ec:	9a 81       	ldd	r25, Y+2	; 0x02
    15ee:	62 2f       	mov	r22, r18
    15f0:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <_proc_lres_dec>
    // Если проготовлен и готов к остановке - останавливаем
    if(  ( proc->flags & PROC_FLG_PRE_END ) && (!(proc->flags & PROC_FLG_HOLD))  )
    15f4:	e9 81       	ldd	r30, Y+1	; 0x01
    15f6:	fa 81       	ldd	r31, Y+2	; 0x02
    15f8:	83 85       	ldd	r24, Z+11	; 0x0b
    15fa:	88 2f       	mov	r24, r24
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	80 72       	andi	r24, 0x20	; 32
    1600:	90 70       	andi	r25, 0x00	; 0
    1602:	00 97       	sbiw	r24, 0x00	; 0
    1604:	a1 f0       	breq	.+40     	; 0x162e <_mutex_unlock+0x62>
    1606:	e9 81       	ldd	r30, Y+1	; 0x01
    1608:	fa 81       	ldd	r31, Y+2	; 0x02
    160a:	83 85       	ldd	r24, Z+11	; 0x0b
    160c:	88 2f       	mov	r24, r24
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	84 70       	andi	r24, 0x04	; 4
    1612:	90 70       	andi	r25, 0x00	; 0
    1614:	00 97       	sbiw	r24, 0x00	; 0
    1616:	59 f4       	brne	.+22     	; 0x162e <_mutex_unlock+0x62>
    {
        _proc_stop_( proc );
    1618:	89 81       	ldd	r24, Y+1	; 0x01
    161a:	9a 81       	ldd	r25, Y+2	; 0x02
    161c:	0e 94 3f 08 	call	0x107e	; 0x107e <gitem_cut>
        _proc_prio_control_stoped( proc );
    1620:	89 81       	ldd	r24, Y+1	; 0x01
    1622:	9a 81       	ldd	r25, Y+2	; 0x02
    1624:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <_proc_prio_control_stoped>
        // Нужна перепланировка, процесс остановили и не запустили обратно
#ifdef CONFIG_MP
        resched( proc->core_id );
#else
        resched();
    1628:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
    162c:	04 c0       	rjmp	.+8      	; 0x1636 <_mutex_unlock+0x6a>
#endif // CONFIG_MP
    }
    // Не останавливаем - меняем проиритет на ходу
    else _proc_prio_control_running( proc );
    162e:	89 81       	ldd	r24, Y+1	; 0x01
    1630:	9a 81       	ldd	r25, Y+2	; 0x02
    1632:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <_proc_prio_control_running>
#endif // CONFIG_USE_HIGHEST_LOCKER
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    // Обрабока самого мьютекса
    if( ((xlist_t *)mutex)->index == (index_t)0  )
    1636:	eb 81       	ldd	r30, Y+3	; 0x03
    1638:	fc 81       	ldd	r31, Y+4	; 0x04
    163a:	80 89       	ldd	r24, Z+16	; 0x10
    163c:	88 23       	and	r24, r24
    163e:	29 f4       	brne	.+10     	; 0x164a <_mutex_unlock+0x7e>
    {
        // Список ожидающих пуст, выходим
        mutex->free = (bool_t)1;
    1640:	eb 81       	ldd	r30, Y+3	; 0x03
    1642:	fc 81       	ldd	r31, Y+4	; 0x04
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	82 8b       	std	Z+18, r24	; 0x12
    1648:	19 c0       	rjmp	.+50     	; 0x167c <_mutex_unlock+0xb0>
        return;
    }
    // Список ожидающих не пуст, запускаем голову
    proc = (proc_t *)xlist_head((xlist_t *)mutex);
    164a:	8b 81       	ldd	r24, Y+3	; 0x03
    164c:	9c 81       	ldd	r25, Y+4	; 0x04
    164e:	0e 94 7f 11 	call	0x22fe	; 0x22fe <xlist_head>
    1652:	9a 83       	std	Y+2, r25	; 0x02
    1654:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    // Сначала надо вырезать
    proc->flags &= ~PROC_FLG_QUEUE;
    1656:	e9 81       	ldd	r30, Y+1	; 0x01
    1658:	fa 81       	ldd	r31, Y+2	; 0x02
    165a:	83 85       	ldd	r24, Z+11	; 0x0b
    165c:	87 7f       	andi	r24, 0xF7	; 247
    165e:	e9 81       	ldd	r30, Y+1	; 0x01
    1660:	fa 81       	ldd	r31, Y+2	; 0x02
    1662:	83 87       	std	Z+11, r24	; 0x0b
    gitem_cut( (gitem_t *)proc );
    1664:	89 81       	ldd	r24, Y+1	; 0x01
    1666:	9a 81       	ldd	r25, Y+2	; 0x02
    1668:	0e 94 3f 08 	call	0x107e	; 0x107e <gitem_cut>
#ifdef CONFIG_USE_HIGHEST_LOCKER
    // Меняем приоритет
    _proc_prio_control_stoped( proc );
    166c:	89 81       	ldd	r24, Y+1	; 0x01
    166e:	9a 81       	ldd	r25, Y+2	; 0x02
    1670:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <_proc_prio_control_stoped>
#endif // CONFIG_USE_HIGHEST_LOCKER
    _proc_run( proc );
    1674:	89 81       	ldd	r24, Y+1	; 0x01
    1676:	9a 81       	ldd	r25, Y+2	; 0x02
    1678:	0e 94 80 0c 	call	0x1900	; 0x1900 <_proc_run>
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
}
    167c:	0f 90       	pop	r0
    167e:	0f 90       	pop	r0
    1680:	0f 90       	pop	r0
    1682:	0f 90       	pop	r0
    1684:	cf 91       	pop	r28
    1686:	df 91       	pop	r29
    1688:	08 95       	ret

0000168a <pcounter_init>:
*                           http://www.0chan.ru/r/res/9996.html                          *
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
void pcounter_init(pcounter_t * pcounter)
{
    168a:	df 93       	push	r29
    168c:	cf 93       	push	r28
    168e:	00 d0       	rcall	.+0      	; 0x1690 <pcounter_init+0x6>
    1690:	0f 92       	push	r0
    1692:	cd b7       	in	r28, 0x3d	; 61
    1694:	de b7       	in	r29, 0x3e	; 62
    1696:	9b 83       	std	Y+3, r25	; 0x03
    1698:	8a 83       	std	Y+2, r24	; 0x02
    prio_t p;
    pcounter->index = (index_t)0;
    169a:	ea 81       	ldd	r30, Y+2	; 0x02
    169c:	fb 81       	ldd	r31, Y+3	; 0x03
    169e:	10 8a       	std	Z+16, r1	; 0x10
    for(p = 0; p < (index_t)BITS_IN_INDEX_T; p++)pcounter->counter[p] = (count_t)0;
    16a0:	19 82       	std	Y+1, r1	; 0x01
    16a2:	0f c0       	rjmp	.+30     	; 0x16c2 <pcounter_init+0x38>
    16a4:	89 81       	ldd	r24, Y+1	; 0x01
    16a6:	88 2f       	mov	r24, r24
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	2a 81       	ldd	r18, Y+2	; 0x02
    16ac:	3b 81       	ldd	r19, Y+3	; 0x03
    16ae:	88 0f       	add	r24, r24
    16b0:	99 1f       	adc	r25, r25
    16b2:	f9 01       	movw	r30, r18
    16b4:	e8 0f       	add	r30, r24
    16b6:	f9 1f       	adc	r31, r25
    16b8:	11 82       	std	Z+1, r1	; 0x01
    16ba:	10 82       	st	Z, r1
    16bc:	89 81       	ldd	r24, Y+1	; 0x01
    16be:	8f 5f       	subi	r24, 0xFF	; 255
    16c0:	89 83       	std	Y+1, r24	; 0x01
    16c2:	89 81       	ldd	r24, Y+1	; 0x01
    16c4:	88 30       	cpi	r24, 0x08	; 8
    16c6:	70 f3       	brcs	.-36     	; 0x16a4 <pcounter_init+0x1a>
}
    16c8:	0f 90       	pop	r0
    16ca:	0f 90       	pop	r0
    16cc:	0f 90       	pop	r0
    16ce:	cf 91       	pop	r28
    16d0:	df 91       	pop	r29
    16d2:	08 95       	ret

000016d4 <pcounter_inc>:

void pcounter_inc(pcounter_t * pcounter, prio_t prio)
{
    16d4:	df 93       	push	r29
    16d6:	cf 93       	push	r28
    16d8:	00 d0       	rcall	.+0      	; 0x16da <pcounter_inc+0x6>
    16da:	0f 92       	push	r0
    16dc:	cd b7       	in	r28, 0x3d	; 61
    16de:	de b7       	in	r29, 0x3e	; 62
    16e0:	9a 83       	std	Y+2, r25	; 0x02
    16e2:	89 83       	std	Y+1, r24	; 0x01
    16e4:	6b 83       	std	Y+3, r22	; 0x03
    pcounter->counter[prio]++;
    16e6:	8b 81       	ldd	r24, Y+3	; 0x03
    16e8:	68 2f       	mov	r22, r24
    16ea:	70 e0       	ldi	r23, 0x00	; 0
    16ec:	29 81       	ldd	r18, Y+1	; 0x01
    16ee:	3a 81       	ldd	r19, Y+2	; 0x02
    16f0:	cb 01       	movw	r24, r22
    16f2:	88 0f       	add	r24, r24
    16f4:	99 1f       	adc	r25, r25
    16f6:	f9 01       	movw	r30, r18
    16f8:	e8 0f       	add	r30, r24
    16fa:	f9 1f       	adc	r31, r25
    16fc:	80 81       	ld	r24, Z
    16fe:	91 81       	ldd	r25, Z+1	; 0x01
    1700:	ac 01       	movw	r20, r24
    1702:	4f 5f       	subi	r20, 0xFF	; 255
    1704:	5f 4f       	sbci	r21, 0xFF	; 255
    1706:	29 81       	ldd	r18, Y+1	; 0x01
    1708:	3a 81       	ldd	r19, Y+2	; 0x02
    170a:	cb 01       	movw	r24, r22
    170c:	88 0f       	add	r24, r24
    170e:	99 1f       	adc	r25, r25
    1710:	f9 01       	movw	r30, r18
    1712:	e8 0f       	add	r30, r24
    1714:	f9 1f       	adc	r31, r25
    1716:	51 83       	std	Z+1, r21	; 0x01
    1718:	40 83       	st	Z, r20
    pcounter->index |= ((index_t)1)<<prio;
    171a:	e9 81       	ldd	r30, Y+1	; 0x01
    171c:	fa 81       	ldd	r31, Y+2	; 0x02
    171e:	80 89       	ldd	r24, Z+16	; 0x10
    1720:	48 2f       	mov	r20, r24
    1722:	8b 81       	ldd	r24, Y+3	; 0x03
    1724:	28 2f       	mov	r18, r24
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	02 2e       	mov	r0, r18
    172e:	02 c0       	rjmp	.+4      	; 0x1734 <pcounter_inc+0x60>
    1730:	88 0f       	add	r24, r24
    1732:	99 1f       	adc	r25, r25
    1734:	0a 94       	dec	r0
    1736:	e2 f7       	brpl	.-8      	; 0x1730 <pcounter_inc+0x5c>
    1738:	84 2b       	or	r24, r20
    173a:	e9 81       	ldd	r30, Y+1	; 0x01
    173c:	fa 81       	ldd	r31, Y+2	; 0x02
    173e:	80 8b       	std	Z+16, r24	; 0x10
}
    1740:	0f 90       	pop	r0
    1742:	0f 90       	pop	r0
    1744:	0f 90       	pop	r0
    1746:	cf 91       	pop	r28
    1748:	df 91       	pop	r29
    174a:	08 95       	ret

0000174c <pcounter_dec>:

index_t pcounter_dec(pcounter_t * pcounter, prio_t prio)
{
    174c:	df 93       	push	r29
    174e:	cf 93       	push	r28
    1750:	00 d0       	rcall	.+0      	; 0x1752 <pcounter_dec+0x6>
    1752:	00 d0       	rcall	.+0      	; 0x1754 <pcounter_dec+0x8>
    1754:	cd b7       	in	r28, 0x3d	; 61
    1756:	de b7       	in	r29, 0x3e	; 62
    1758:	9b 83       	std	Y+3, r25	; 0x03
    175a:	8a 83       	std	Y+2, r24	; 0x02
    175c:	6c 83       	std	Y+4, r22	; 0x04
    index_t mask = ((index_t)1)<<prio;
    175e:	8c 81       	ldd	r24, Y+4	; 0x04
    1760:	28 2f       	mov	r18, r24
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	02 c0       	rjmp	.+4      	; 0x176e <pcounter_dec+0x22>
    176a:	88 0f       	add	r24, r24
    176c:	99 1f       	adc	r25, r25
    176e:	2a 95       	dec	r18
    1770:	e2 f7       	brpl	.-8      	; 0x176a <pcounter_dec+0x1e>
    1772:	89 83       	std	Y+1, r24	; 0x01
    pcounter->counter[prio]--;
    1774:	8c 81       	ldd	r24, Y+4	; 0x04
    1776:	68 2f       	mov	r22, r24
    1778:	70 e0       	ldi	r23, 0x00	; 0
    177a:	2a 81       	ldd	r18, Y+2	; 0x02
    177c:	3b 81       	ldd	r19, Y+3	; 0x03
    177e:	cb 01       	movw	r24, r22
    1780:	88 0f       	add	r24, r24
    1782:	99 1f       	adc	r25, r25
    1784:	f9 01       	movw	r30, r18
    1786:	e8 0f       	add	r30, r24
    1788:	f9 1f       	adc	r31, r25
    178a:	80 81       	ld	r24, Z
    178c:	91 81       	ldd	r25, Z+1	; 0x01
    178e:	ac 01       	movw	r20, r24
    1790:	41 50       	subi	r20, 0x01	; 1
    1792:	50 40       	sbci	r21, 0x00	; 0
    1794:	2a 81       	ldd	r18, Y+2	; 0x02
    1796:	3b 81       	ldd	r19, Y+3	; 0x03
    1798:	cb 01       	movw	r24, r22
    179a:	88 0f       	add	r24, r24
    179c:	99 1f       	adc	r25, r25
    179e:	f9 01       	movw	r30, r18
    17a0:	e8 0f       	add	r30, r24
    17a2:	f9 1f       	adc	r31, r25
    17a4:	51 83       	std	Z+1, r21	; 0x01
    17a6:	40 83       	st	Z, r20
    if(pcounter->counter[prio] == (count_t)0)pcounter->index &= ~mask;
    17a8:	8c 81       	ldd	r24, Y+4	; 0x04
    17aa:	88 2f       	mov	r24, r24
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	2a 81       	ldd	r18, Y+2	; 0x02
    17b0:	3b 81       	ldd	r19, Y+3	; 0x03
    17b2:	88 0f       	add	r24, r24
    17b4:	99 1f       	adc	r25, r25
    17b6:	f9 01       	movw	r30, r18
    17b8:	e8 0f       	add	r30, r24
    17ba:	f9 1f       	adc	r31, r25
    17bc:	80 81       	ld	r24, Z
    17be:	91 81       	ldd	r25, Z+1	; 0x01
    17c0:	00 97       	sbiw	r24, 0x00	; 0
    17c2:	51 f4       	brne	.+20     	; 0x17d8 <pcounter_dec+0x8c>
    17c4:	ea 81       	ldd	r30, Y+2	; 0x02
    17c6:	fb 81       	ldd	r31, Y+3	; 0x03
    17c8:	80 89       	ldd	r24, Z+16	; 0x10
    17ca:	98 2f       	mov	r25, r24
    17cc:	89 81       	ldd	r24, Y+1	; 0x01
    17ce:	80 95       	com	r24
    17d0:	89 23       	and	r24, r25
    17d2:	ea 81       	ldd	r30, Y+2	; 0x02
    17d4:	fb 81       	ldd	r31, Y+3	; 0x03
    17d6:	80 8b       	std	Z+16, r24	; 0x10
    return pcounter->index & mask;
    17d8:	ea 81       	ldd	r30, Y+2	; 0x02
    17da:	fb 81       	ldd	r31, Y+3	; 0x03
    17dc:	90 89       	ldd	r25, Z+16	; 0x10
    17de:	89 81       	ldd	r24, Y+1	; 0x01
    17e0:	89 23       	and	r24, r25
}
    17e2:	0f 90       	pop	r0
    17e4:	0f 90       	pop	r0
    17e6:	0f 90       	pop	r0
    17e8:	0f 90       	pop	r0
    17ea:	cf 91       	pop	r28
    17ec:	df 91       	pop	r29
    17ee:	08 95       	ret

000017f0 <proc_init_isr>:
    bool_t is_rt // если true, значит процесс будет иметть поведение RT
#ifdef CONFIG_MP
    ,affinity_t affinity
#endif // CONFIG_MP
)
{
    17f0:	8f 92       	push	r8
    17f2:	af 92       	push	r10
    17f4:	bf 92       	push	r11
    17f6:	cf 92       	push	r12
    17f8:	ef 92       	push	r14
    17fa:	ff 92       	push	r15
    17fc:	0f 93       	push	r16
    17fe:	1f 93       	push	r17
    1800:	df 93       	push	r29
    1802:	cf 93       	push	r28
    1804:	cd b7       	in	r28, 0x3d	; 61
    1806:	de b7       	in	r29, 0x3e	; 62
    1808:	61 97       	sbiw	r28, 0x11	; 17
    180a:	0f b6       	in	r0, 0x3f	; 63
    180c:	f8 94       	cli
    180e:	de bf       	out	0x3e, r29	; 62
    1810:	0f be       	out	0x3f, r0	; 63
    1812:	cd bf       	out	0x3d, r28	; 61
    1814:	9a 83       	std	Y+2, r25	; 0x02
    1816:	89 83       	std	Y+1, r24	; 0x01
    1818:	7c 83       	std	Y+4, r23	; 0x04
    181a:	6b 83       	std	Y+3, r22	; 0x03
    181c:	5e 83       	std	Y+6, r21	; 0x06
    181e:	4d 83       	std	Y+5, r20	; 0x05
    1820:	38 87       	std	Y+8, r19	; 0x08
    1822:	2f 83       	std	Y+7, r18	; 0x07
    1824:	1a 87       	std	Y+10, r17	; 0x0a
    1826:	09 87       	std	Y+9, r16	; 0x09
    1828:	fc 86       	std	Y+12, r15	; 0x0c
    182a:	eb 86       	std	Y+11, r14	; 0x0b
    182c:	cd 86       	std	Y+13, r12	; 0x0d
    182e:	bf 86       	std	Y+15, r11	; 0x0f
    1830:	ae 86       	std	Y+14, r10	; 0x0e
    1832:	88 8a       	std	Y+16, r8	; 0x10
    gitem_init( (gitem_t *)proc, prio );
    1834:	89 81       	ldd	r24, Y+1	; 0x01
    1836:	9a 81       	ldd	r25, Y+2	; 0x02
    1838:	6d 85       	ldd	r22, Y+13	; 0x0d
    183a:	0e 94 bc 06 	call	0xd78	; 0xd78 <gitem_init>
    proc->flags = ( is_rt )?PROC_FLG_RT:(flag_t)0;
    183e:	88 89       	ldd	r24, Y+16	; 0x10
    1840:	89 8b       	std	Y+17, r24	; 0x11
    1842:	89 89       	ldd	r24, Y+17	; 0x11
    1844:	88 23       	and	r24, r24
    1846:	11 f0       	breq	.+4      	; 0x184c <proc_init_isr+0x5c>
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	89 8b       	std	Y+17, r24	; 0x11
    184c:	89 89       	ldd	r24, Y+17	; 0x11
    184e:	e9 81       	ldd	r30, Y+1	; 0x01
    1850:	fa 81       	ldd	r31, Y+2	; 0x02
    1852:	83 87       	std	Z+11, r24	; 0x0b
#ifdef CONFIG_USE_HIGHEST_LOCKER
    pcounter_init(&proc->lres);
    1854:	89 81       	ldd	r24, Y+1	; 0x01
    1856:	9a 81       	ldd	r25, Y+2	; 0x02
    1858:	0d 96       	adiw	r24, 0x0d	; 13
    185a:	0e 94 45 0b 	call	0x168a	; 0x168a <pcounter_init>
    proc->base_prio = prio;
    185e:	e9 81       	ldd	r30, Y+1	; 0x01
    1860:	fa 81       	ldd	r31, Y+2	; 0x02
    1862:	8d 85       	ldd	r24, Y+13	; 0x0d
    1864:	84 87       	std	Z+12, r24	; 0x0c
#else
    proc->lres = (count_t)0;
#endif
    proc->time_quant = time_quant;
    1866:	e9 81       	ldd	r30, Y+1	; 0x01
    1868:	fa 81       	ldd	r31, Y+2	; 0x02
    186a:	8e 85       	ldd	r24, Y+14	; 0x0e
    186c:	9f 85       	ldd	r25, Y+15	; 0x0f
    186e:	97 8f       	std	Z+31, r25	; 0x1f
    1870:	86 8f       	std	Z+30, r24	; 0x1e
    proc->timer = time_quant;
    1872:	e9 81       	ldd	r30, Y+1	; 0x01
    1874:	fa 81       	ldd	r31, Y+2	; 0x02
    1876:	8e 85       	ldd	r24, Y+14	; 0x0e
    1878:	9f 85       	ldd	r25, Y+15	; 0x0f
    187a:	91 a3       	std	Z+33, r25	; 0x21
    187c:	80 a3       	std	Z+32, r24	; 0x20
#ifdef CONFIG_MP
    proc->core_id = (core_id_t)0;
    proc->affinity = affinity;
#endif // CONFIG_MP
    proc->pmain = pmain;
    187e:	e9 81       	ldd	r30, Y+1	; 0x01
    1880:	fa 81       	ldd	r31, Y+2	; 0x02
    1882:	8b 81       	ldd	r24, Y+3	; 0x03
    1884:	9c 81       	ldd	r25, Y+4	; 0x04
    1886:	93 a3       	std	Z+35, r25	; 0x23
    1888:	82 a3       	std	Z+34, r24	; 0x22
    proc->sv_hook = sv_hook;
    188a:	e9 81       	ldd	r30, Y+1	; 0x01
    188c:	fa 81       	ldd	r31, Y+2	; 0x02
    188e:	8d 81       	ldd	r24, Y+5	; 0x05
    1890:	9e 81       	ldd	r25, Y+6	; 0x06
    1892:	95 a3       	std	Z+37, r25	; 0x25
    1894:	84 a3       	std	Z+36, r24	; 0x24
    proc->rs_hook = rs_hook;
    1896:	e9 81       	ldd	r30, Y+1	; 0x01
    1898:	fa 81       	ldd	r31, Y+2	; 0x02
    189a:	8f 81       	ldd	r24, Y+7	; 0x07
    189c:	98 85       	ldd	r25, Y+8	; 0x08
    189e:	97 a3       	std	Z+39, r25	; 0x27
    18a0:	86 a3       	std	Z+38, r24	; 0x26
    proc->arg = arg;
    18a2:	e9 81       	ldd	r30, Y+1	; 0x01
    18a4:	fa 81       	ldd	r31, Y+2	; 0x02
    18a6:	89 85       	ldd	r24, Y+9	; 0x09
    18a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    18aa:	91 a7       	std	Z+41, r25	; 0x29
    18ac:	80 a7       	std	Z+40, r24	; 0x28
    proc->sstart = sstart;
    18ae:	e9 81       	ldd	r30, Y+1	; 0x01
    18b0:	fa 81       	ldd	r31, Y+2	; 0x02
    18b2:	8b 85       	ldd	r24, Y+11	; 0x0b
    18b4:	9c 85       	ldd	r25, Y+12	; 0x0c
    18b6:	93 a7       	std	Z+43, r25	; 0x2b
    18b8:	82 a7       	std	Z+42, r24	; 0x2a
    if( sstart )proc->spointer = proc_stack_init(sstart, (code_t)proc_run_wrapper, (void *)proc);
    18ba:	8b 85       	ldd	r24, Y+11	; 0x0b
    18bc:	9c 85       	ldd	r25, Y+12	; 0x0c
    18be:	00 97       	sbiw	r24, 0x00	; 0
    18c0:	71 f0       	breq	.+28     	; 0x18de <proc_init_isr+0xee>
    18c2:	49 e0       	ldi	r20, 0x09	; 9
    18c4:	54 e0       	ldi	r21, 0x04	; 4
    18c6:	8b 85       	ldd	r24, Y+11	; 0x0b
    18c8:	9c 85       	ldd	r25, Y+12	; 0x0c
    18ca:	29 81       	ldd	r18, Y+1	; 0x01
    18cc:	3a 81       	ldd	r19, Y+2	; 0x02
    18ce:	ba 01       	movw	r22, r20
    18d0:	a9 01       	movw	r20, r18
    18d2:	0e 94 d7 00 	call	0x1ae	; 0x1ae <proc_stack_init>
    18d6:	e9 81       	ldd	r30, Y+1	; 0x01
    18d8:	fa 81       	ldd	r31, Y+2	; 0x02
    18da:	95 a7       	std	Z+45, r25	; 0x2d
    18dc:	84 a7       	std	Z+44, r24	; 0x2c
}
    18de:	61 96       	adiw	r28, 0x11	; 17
    18e0:	0f b6       	in	r0, 0x3f	; 63
    18e2:	f8 94       	cli
    18e4:	de bf       	out	0x3e, r29	; 62
    18e6:	0f be       	out	0x3f, r0	; 63
    18e8:	cd bf       	out	0x3d, r28	; 61
    18ea:	cf 91       	pop	r28
    18ec:	df 91       	pop	r29
    18ee:	1f 91       	pop	r17
    18f0:	0f 91       	pop	r16
    18f2:	ff 90       	pop	r15
    18f4:	ef 90       	pop	r14
    18f6:	cf 90       	pop	r12
    18f8:	bf 90       	pop	r11
    18fa:	af 90       	pop	r10
    18fc:	8f 90       	pop	r8
    18fe:	08 95       	ret

00001900 <_proc_run>:
    spin_unlock( &proc_sched->lock );
}
#endif // CONFIG_MP

void _proc_run( proc_t * proc )
{
    1900:	df 93       	push	r29
    1902:	cf 93       	push	r28
    1904:	00 d0       	rcall	.+0      	; 0x1906 <_proc_run+0x6>
    1906:	cd b7       	in	r28, 0x3d	; 61
    1908:	de b7       	in	r29, 0x3e	; 62
    190a:	9a 83       	std	Y+2, r25	; 0x02
    190c:	89 83       	std	Y+1, r24	; 0x01
    proc->flags |= PROC_FLG_RUN;
    190e:	e9 81       	ldd	r30, Y+1	; 0x01
    1910:	fa 81       	ldd	r31, Y+2	; 0x02
    1912:	83 85       	ldd	r24, Z+11	; 0x0b
    1914:	82 60       	ori	r24, 0x02	; 2
    1916:	e9 81       	ldd	r30, Y+1	; 0x01
    1918:	fa 81       	ldd	r31, Y+2	; 0x02
    191a:	83 87       	std	Z+11, r24	; 0x0b
    spin_lock( &kernel.stat_lock );
    proc->core_id = sched_load_balancer( proc, (stat_t *)kernel.stat );
    stat_inc( proc, (stat_t *)kernel.stat+proc->core_id );
    spin_unlock( &kernel.stat_lock );
#endif
    _proc_run_( proc );
    191c:	89 81       	ldd	r24, Y+1	; 0x01
    191e:	9a 81       	ldd	r25, Y+2	; 0x02
    1920:	20 91 20 02 	lds	r18, 0x0220
    1924:	30 91 21 02 	lds	r19, 0x0221
    1928:	b9 01       	movw	r22, r18
    192a:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <gitem_insert>
#ifdef CONFIG_MP
    resched( proc->core_id );
#else
    resched();
    192e:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
#endif // CONFIG_MP
}
    1932:	0f 90       	pop	r0
    1934:	0f 90       	pop	r0
    1936:	cf 91       	pop	r28
    1938:	df 91       	pop	r29
    193a:	08 95       	ret

0000193c <proc_run_isr>:
// Функция общего пользования - запуск процесса из обработчика прерывания, прерывания должны быть запрещены во время запуска
bool_t proc_run_isr(proc_t * proc)
{
    193c:	df 93       	push	r29
    193e:	cf 93       	push	r28
    1940:	00 d0       	rcall	.+0      	; 0x1942 <proc_run_isr+0x6>
    1942:	0f 92       	push	r0
    1944:	cd b7       	in	r28, 0x3d	; 61
    1946:	de b7       	in	r29, 0x3e	; 62
    1948:	9b 83       	std	Y+3, r25	; 0x03
    194a:	8a 83       	std	Y+2, r24	; 0x02
    bool_t ret = (bool_t)1;
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    if( proc->flags & (PROC_FLG_RUN|PROC_FLG_QUEUE|PROC_FLG_WAIT|PROC_FLG_END|PROC_FLG_DEAD) )
    1950:	ea 81       	ldd	r30, Y+2	; 0x02
    1952:	fb 81       	ldd	r31, Y+3	; 0x03
    1954:	83 85       	ldd	r24, Z+11	; 0x0b
    1956:	88 2f       	mov	r24, r24
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	8a 7d       	andi	r24, 0xDA	; 218
    195c:	90 70       	andi	r25, 0x00	; 0
    195e:	00 97       	sbiw	r24, 0x00	; 0
    1960:	11 f0       	breq	.+4      	; 0x1966 <proc_run_isr+0x2a>
    {
        ret = (bool_t)0;
    1962:	19 82       	std	Y+1, r1	; 0x01
    1964:	04 c0       	rjmp	.+8      	; 0x196e <proc_run_isr+0x32>
        goto end;
    }
    _proc_run( proc );
    1966:	8a 81       	ldd	r24, Y+2	; 0x02
    1968:	9b 81       	ldd	r25, Y+3	; 0x03
    196a:	0e 94 80 0c 	call	0x1900	; 0x1900 <_proc_run>
end:
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    return ret;
    196e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1970:	0f 90       	pop	r0
    1972:	0f 90       	pop	r0
    1974:	0f 90       	pop	r0
    1976:	cf 91       	pop	r28
    1978:	df 91       	pop	r29
    197a:	08 95       	ret

0000197c <proc_restart_isr>:
// Перезепуск процесса из обработчика прерываний, прерывания должны быть запрещены
bool_t proc_restart_isr(proc_t * proc)
{
    197c:	df 93       	push	r29
    197e:	cf 93       	push	r28
    1980:	00 d0       	rcall	.+0      	; 0x1982 <proc_restart_isr+0x6>
    1982:	0f 92       	push	r0
    1984:	cd b7       	in	r28, 0x3d	; 61
    1986:	de b7       	in	r29, 0x3e	; 62
    1988:	9b 83       	std	Y+3, r25	; 0x03
    198a:	8a 83       	std	Y+2, r24	; 0x02
    bool_t ret = (bool_t)1;
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif
    if( proc->flags & (PROC_FLG_RUN|PROC_FLG_HOLD|PROC_FLG_QUEUE|PROC_FLG_WAIT|PROC_FLG_PRE_END|PROC_FLG_DEAD) )
    1990:	ea 81       	ldd	r30, Y+2	; 0x02
    1992:	fb 81       	ldd	r31, Y+3	; 0x03
    1994:	83 85       	ldd	r24, Z+11	; 0x0b
    1996:	88 2f       	mov	r24, r24
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	8e 7b       	andi	r24, 0xBE	; 190
    199c:	90 70       	andi	r25, 0x00	; 0
    199e:	00 97       	sbiw	r24, 0x00	; 0
    19a0:	11 f0       	breq	.+4      	; 0x19a6 <proc_restart_isr+0x2a>
    {
        ret = (bool_t)0;
    19a2:	19 82       	std	Y+1, r1	; 0x01
    19a4:	2d c0       	rjmp	.+90     	; 0x1a00 <proc_restart_isr+0x84>
        goto end;
    }
    proc->flags = ( proc->flags & PROC_FLG_RT )?PROC_FLG_RT:(flag_t)0;
    19a6:	ea 81       	ldd	r30, Y+2	; 0x02
    19a8:	fb 81       	ldd	r31, Y+3	; 0x03
    19aa:	83 85       	ldd	r24, Z+11	; 0x0b
    19ac:	81 70       	andi	r24, 0x01	; 1
    19ae:	ea 81       	ldd	r30, Y+2	; 0x02
    19b0:	fb 81       	ldd	r31, Y+3	; 0x03
    19b2:	83 87       	std	Z+11, r24	; 0x0b
#ifdef CONFIG_USE_HIGHEST_LOCKER
    pcounter_init(&proc->lres);
    19b4:	8a 81       	ldd	r24, Y+2	; 0x02
    19b6:	9b 81       	ldd	r25, Y+3	; 0x03
    19b8:	0d 96       	adiw	r24, 0x0d	; 13
    19ba:	0e 94 45 0b 	call	0x168a	; 0x168a <pcounter_init>
#else
    proc->lres = (count_t)0;
#endif
    proc->timer = proc->time_quant;
    19be:	ea 81       	ldd	r30, Y+2	; 0x02
    19c0:	fb 81       	ldd	r31, Y+3	; 0x03
    19c2:	86 8d       	ldd	r24, Z+30	; 0x1e
    19c4:	97 8d       	ldd	r25, Z+31	; 0x1f
    19c6:	ea 81       	ldd	r30, Y+2	; 0x02
    19c8:	fb 81       	ldd	r31, Y+3	; 0x03
    19ca:	91 a3       	std	Z+33, r25	; 0x21
    19cc:	80 a3       	std	Z+32, r24	; 0x20

    if( proc->sstart )proc->spointer = proc_stack_init( proc->sstart, (code_t)proc_run_wrapper, (void *)proc );
    19ce:	ea 81       	ldd	r30, Y+2	; 0x02
    19d0:	fb 81       	ldd	r31, Y+3	; 0x03
    19d2:	82 a5       	ldd	r24, Z+42	; 0x2a
    19d4:	93 a5       	ldd	r25, Z+43	; 0x2b
    19d6:	00 97       	sbiw	r24, 0x00	; 0
    19d8:	79 f0       	breq	.+30     	; 0x19f8 <proc_restart_isr+0x7c>
    19da:	ea 81       	ldd	r30, Y+2	; 0x02
    19dc:	fb 81       	ldd	r31, Y+3	; 0x03
    19de:	82 a5       	ldd	r24, Z+42	; 0x2a
    19e0:	93 a5       	ldd	r25, Z+43	; 0x2b
    19e2:	29 e0       	ldi	r18, 0x09	; 9
    19e4:	34 e0       	ldi	r19, 0x04	; 4
    19e6:	4a 81       	ldd	r20, Y+2	; 0x02
    19e8:	5b 81       	ldd	r21, Y+3	; 0x03
    19ea:	b9 01       	movw	r22, r18
    19ec:	0e 94 d7 00 	call	0x1ae	; 0x1ae <proc_stack_init>
    19f0:	ea 81       	ldd	r30, Y+2	; 0x02
    19f2:	fb 81       	ldd	r31, Y+3	; 0x03
    19f4:	95 a7       	std	Z+45, r25	; 0x2d
    19f6:	84 a7       	std	Z+44, r24	; 0x2c
    _proc_run( proc );
    19f8:	8a 81       	ldd	r24, Y+2	; 0x02
    19fa:	9b 81       	ldd	r25, Y+3	; 0x03
    19fc:	0e 94 80 0c 	call	0x1900	; 0x1900 <_proc_run>
end:
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif
    return ret;
    1a00:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a02:	0f 90       	pop	r0
    1a04:	0f 90       	pop	r0
    1a06:	0f 90       	pop	r0
    1a08:	cf 91       	pop	r28
    1a0a:	df 91       	pop	r29
    1a0c:	08 95       	ret

00001a0e <_proc_stop>:
        spin_unlock( xlist_lock );
    }
}
#endif // CONFIG_MP
void _proc_stop(proc_t * proc)
{
    1a0e:	df 93       	push	r29
    1a10:	cf 93       	push	r28
    1a12:	00 d0       	rcall	.+0      	; 0x1a14 <_proc_stop+0x6>
    1a14:	cd b7       	in	r28, 0x3d	; 61
    1a16:	de b7       	in	r29, 0x3e	; 62
    1a18:	9a 83       	std	Y+2, r25	; 0x02
    1a1a:	89 83       	std	Y+1, r24	; 0x01
    proc->flags &= ~PROC_FLG_RUN;
    1a1c:	e9 81       	ldd	r30, Y+1	; 0x01
    1a1e:	fa 81       	ldd	r31, Y+2	; 0x02
    1a20:	83 85       	ldd	r24, Z+11	; 0x0b
    1a22:	8d 7f       	andi	r24, 0xFD	; 253
    1a24:	e9 81       	ldd	r30, Y+1	; 0x01
    1a26:	fa 81       	ldd	r31, Y+2	; 0x02
    1a28:	83 87       	std	Z+11, r24	; 0x0b
    _proc_stop_( proc );
    1a2a:	89 81       	ldd	r24, Y+1	; 0x01
    1a2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a2e:	0e 94 3f 08 	call	0x107e	; 0x107e <gitem_cut>
#ifdef CONFIG_MP
    resched( proc->core_id );
#else
    resched();
    1a32:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
#endif // CONFIG_MP
}
    1a36:	0f 90       	pop	r0
    1a38:	0f 90       	pop	r0
    1a3a:	cf 91       	pop	r28
    1a3c:	df 91       	pop	r29
    1a3e:	08 95       	ret

00001a40 <proc_stop_isr>:
// Останов процесса из обработчика прерываний, прерывания должны быть запрещены
bool_t proc_stop_isr(proc_t * proc)
{
    1a40:	df 93       	push	r29
    1a42:	cf 93       	push	r28
    1a44:	00 d0       	rcall	.+0      	; 0x1a46 <proc_stop_isr+0x6>
    1a46:	0f 92       	push	r0
    1a48:	cd b7       	in	r28, 0x3d	; 61
    1a4a:	de b7       	in	r29, 0x3e	; 62
    1a4c:	9b 83       	std	Y+3, r25	; 0x03
    1a4e:	8a 83       	std	Y+2, r24	; 0x02
    bool_t ret = (bool_t)0;
    1a50:	19 82       	std	Y+1, r1	; 0x01
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    //Проверка флагов
    //В случчае PROC_FLG_WAIT будем обрабатывать PROC_FLG_PRE_END на выходе из sig_wait.
    //В случае PROC_FLG_HOLD или PROC_FLG_QUEUE будем обрабатывать PROC_FLG_PRE_END на выходе из функции, освобождающей общий ресурс.
    if( proc->flags & (PROC_FLG_HOLD|PROC_FLG_QUEUE|PROC_FLG_WAIT) )proc->flags |= PROC_FLG_PRE_END;
    1a52:	ea 81       	ldd	r30, Y+2	; 0x02
    1a54:	fb 81       	ldd	r31, Y+3	; 0x03
    1a56:	83 85       	ldd	r24, Z+11	; 0x0b
    1a58:	88 2f       	mov	r24, r24
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	8c 71       	andi	r24, 0x1C	; 28
    1a5e:	90 70       	andi	r25, 0x00	; 0
    1a60:	00 97       	sbiw	r24, 0x00	; 0
    1a62:	41 f0       	breq	.+16     	; 0x1a74 <proc_stop_isr+0x34>
    1a64:	ea 81       	ldd	r30, Y+2	; 0x02
    1a66:	fb 81       	ldd	r31, Y+3	; 0x03
    1a68:	83 85       	ldd	r24, Z+11	; 0x0b
    1a6a:	80 62       	ori	r24, 0x20	; 32
    1a6c:	ea 81       	ldd	r30, Y+2	; 0x02
    1a6e:	fb 81       	ldd	r31, Y+3	; 0x03
    1a70:	83 87       	std	Z+11, r24	; 0x0b
    1a72:	0f c0       	rjmp	.+30     	; 0x1a92 <proc_stop_isr+0x52>
    else if( proc->flags & PROC_FLG_RUN )
    1a74:	ea 81       	ldd	r30, Y+2	; 0x02
    1a76:	fb 81       	ldd	r31, Y+3	; 0x03
    1a78:	83 85       	ldd	r24, Z+11	; 0x0b
    1a7a:	88 2f       	mov	r24, r24
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	82 70       	andi	r24, 0x02	; 2
    1a80:	90 70       	andi	r25, 0x00	; 0
    1a82:	00 97       	sbiw	r24, 0x00	; 0
    1a84:	31 f0       	breq	.+12     	; 0x1a92 <proc_stop_isr+0x52>
    {
        _proc_stop( proc );
    1a86:	8a 81       	ldd	r24, Y+2	; 0x02
    1a88:	9b 81       	ldd	r25, Y+3	; 0x03
    1a8a:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <_proc_stop>
        ret = (bool_t)1;
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	89 83       	std	Y+1, r24	; 0x01
    }
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    return ret;
    1a92:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a94:	0f 90       	pop	r0
    1a96:	0f 90       	pop	r0
    1a98:	0f 90       	pop	r0
    1a9a:	cf 91       	pop	r28
    1a9c:	df 91       	pop	r29
    1a9e:	08 95       	ret

00001aa0 <proc_reset_watchdog>:
void proc_reset_watchdog(void)
{
    1aa0:	df 93       	push	r29
    1aa2:	cf 93       	push	r28
    1aa4:	00 d0       	rcall	.+0      	; 0x1aa6 <proc_reset_watchdog+0x6>
    1aa6:	cd b7       	in	r28, 0x3d	; 61
    1aa8:	de b7       	in	r29, 0x3e	; 62
#ifdef CONFIG_MP
    core_id_t current_core = _enter_crit_sec();
    proc = ((sched_t *)kernel.sched + current_core)->current_proc;
    spin_lock(&proc->lock);
#else
    enter_crit_sec();
    1aaa:	0e 94 8c 06 	call	0xd18	; 0xd18 <enter_crit_sec>
    proc = kernel.sched.current_proc;
    1aae:	80 91 1e 02 	lds	r24, 0x021E
    1ab2:	90 91 1f 02 	lds	r25, 0x021F
    1ab6:	9a 83       	std	Y+2, r25	; 0x02
    1ab8:	89 83       	std	Y+1, r24	; 0x01
#endif
    if( proc->flags & PROC_FLG_RT )proc->timer = proc->time_quant;
    1aba:	e9 81       	ldd	r30, Y+1	; 0x01
    1abc:	fa 81       	ldd	r31, Y+2	; 0x02
    1abe:	83 85       	ldd	r24, Z+11	; 0x0b
    1ac0:	88 2f       	mov	r24, r24
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	81 70       	andi	r24, 0x01	; 1
    1ac6:	90 70       	andi	r25, 0x00	; 0
    1ac8:	88 23       	and	r24, r24
    1aca:	41 f0       	breq	.+16     	; 0x1adc <proc_reset_watchdog+0x3c>
    1acc:	e9 81       	ldd	r30, Y+1	; 0x01
    1ace:	fa 81       	ldd	r31, Y+2	; 0x02
    1ad0:	86 8d       	ldd	r24, Z+30	; 0x1e
    1ad2:	97 8d       	ldd	r25, Z+31	; 0x1f
    1ad4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ad6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ad8:	91 a3       	std	Z+33, r25	; 0x21
    1ada:	80 a3       	std	Z+32, r24	; 0x20
#ifdef CONFIG_MP
    spin_lock(&proc->lock);
    _exit_crit_sec(current_core);
#else
    exit_crit_sec();
    1adc:	0e 94 9e 06 	call	0xd3c	; 0xd3c <exit_crit_sec>
#endif
}
    1ae0:	0f 90       	pop	r0
    1ae2:	0f 90       	pop	r0
    1ae4:	cf 91       	pop	r28
    1ae6:	df 91       	pop	r29
    1ae8:	08 95       	ret

00001aea <_proc_flag_stop_isr>:

void _proc_flag_stop_isr( flag_t mask )
{
    1aea:	df 93       	push	r29
    1aec:	cf 93       	push	r28
    1aee:	00 d0       	rcall	.+0      	; 0x1af0 <_proc_flag_stop_isr+0x6>
    1af0:	0f 92       	push	r0
    1af2:	cd b7       	in	r28, 0x3d	; 61
    1af4:	de b7       	in	r29, 0x3e	; 62
    1af6:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = current_proc();
    1af8:	0e 94 cc 00 	call	0x198	; 0x198 <current_proc>
    1afc:	9a 83       	std	Y+2, r25	; 0x02
    1afe:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif //CONFIG_MP
    proc->flags &= mask;
    1b00:	e9 81       	ldd	r30, Y+1	; 0x01
    1b02:	fa 81       	ldd	r31, Y+2	; 0x02
    1b04:	93 85       	ldd	r25, Z+11	; 0x0b
    1b06:	8b 81       	ldd	r24, Y+3	; 0x03
    1b08:	89 23       	and	r24, r25
    1b0a:	e9 81       	ldd	r30, Y+1	; 0x01
    1b0c:	fa 81       	ldd	r31, Y+2	; 0x02
    1b0e:	83 87       	std	Z+11, r24	; 0x0b
    if(  ( proc->flags & PROC_FLG_PRE_END ) && (!(proc->flags & PROC_FLG_HOLD))  )
    1b10:	e9 81       	ldd	r30, Y+1	; 0x01
    1b12:	fa 81       	ldd	r31, Y+2	; 0x02
    1b14:	83 85       	ldd	r24, Z+11	; 0x0b
    1b16:	88 2f       	mov	r24, r24
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	80 72       	andi	r24, 0x20	; 32
    1b1c:	90 70       	andi	r25, 0x00	; 0
    1b1e:	00 97       	sbiw	r24, 0x00	; 0
    1b20:	a1 f0       	breq	.+40     	; 0x1b4a <_proc_flag_stop_isr+0x60>
    1b22:	e9 81       	ldd	r30, Y+1	; 0x01
    1b24:	fa 81       	ldd	r31, Y+2	; 0x02
    1b26:	83 85       	ldd	r24, Z+11	; 0x0b
    1b28:	88 2f       	mov	r24, r24
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	84 70       	andi	r24, 0x04	; 4
    1b2e:	90 70       	andi	r25, 0x00	; 0
    1b30:	00 97       	sbiw	r24, 0x00	; 0
    1b32:	59 f4       	brne	.+22     	; 0x1b4a <_proc_flag_stop_isr+0x60>
    {
        proc->flags &= ~PROC_FLG_PRE_END;
    1b34:	e9 81       	ldd	r30, Y+1	; 0x01
    1b36:	fa 81       	ldd	r31, Y+2	; 0x02
    1b38:	83 85       	ldd	r24, Z+11	; 0x0b
    1b3a:	8f 7d       	andi	r24, 0xDF	; 223
    1b3c:	e9 81       	ldd	r30, Y+1	; 0x01
    1b3e:	fa 81       	ldd	r31, Y+2	; 0x02
    1b40:	83 87       	std	Z+11, r24	; 0x0b
        _proc_stop( proc );
    1b42:	89 81       	ldd	r24, Y+1	; 0x01
    1b44:	9a 81       	ldd	r25, Y+2	; 0x02
    1b46:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <_proc_stop>
    }
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif //CONFIG_MP
}
    1b4a:	0f 90       	pop	r0
    1b4c:	0f 90       	pop	r0
    1b4e:	0f 90       	pop	r0
    1b50:	cf 91       	pop	r28
    1b52:	df 91       	pop	r29
    1b54:	08 95       	ret

00001b56 <_proc_lres_inc>:
    proc_t * proc
#ifdef CONFIG_USE_HIGHEST_LOCKER
    ,prio_t prio
#endif
)
{
    1b56:	df 93       	push	r29
    1b58:	cf 93       	push	r28
    1b5a:	00 d0       	rcall	.+0      	; 0x1b5c <_proc_lres_inc+0x6>
    1b5c:	0f 92       	push	r0
    1b5e:	cd b7       	in	r28, 0x3d	; 61
    1b60:	de b7       	in	r29, 0x3e	; 62
    1b62:	9a 83       	std	Y+2, r25	; 0x02
    1b64:	89 83       	std	Y+1, r24	; 0x01
    1b66:	6b 83       	std	Y+3, r22	; 0x03
#ifdef CONFIG_USE_HIGHEST_LOCKER
    if( proc->lres.index == (index_t)0 )proc->flags |= PROC_FLG_HOLD;
    1b68:	e9 81       	ldd	r30, Y+1	; 0x01
    1b6a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b6c:	85 8d       	ldd	r24, Z+29	; 0x1d
    1b6e:	88 23       	and	r24, r24
    1b70:	39 f4       	brne	.+14     	; 0x1b80 <_proc_lres_inc+0x2a>
    1b72:	e9 81       	ldd	r30, Y+1	; 0x01
    1b74:	fa 81       	ldd	r31, Y+2	; 0x02
    1b76:	83 85       	ldd	r24, Z+11	; 0x0b
    1b78:	84 60       	ori	r24, 0x04	; 4
    1b7a:	e9 81       	ldd	r30, Y+1	; 0x01
    1b7c:	fa 81       	ldd	r31, Y+2	; 0x02
    1b7e:	83 87       	std	Z+11, r24	; 0x0b
    pcounter_inc( &proc->lres, prio );
    1b80:	89 81       	ldd	r24, Y+1	; 0x01
    1b82:	9a 81       	ldd	r25, Y+2	; 0x02
    1b84:	0d 96       	adiw	r24, 0x0d	; 13
    1b86:	6b 81       	ldd	r22, Y+3	; 0x03
    1b88:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <pcounter_inc>
#else
    if( proc->lres == (count_t)0 )proc->flags |= PROC_FLG_HOLD;
    proc->lres++;
#endif
}
    1b8c:	0f 90       	pop	r0
    1b8e:	0f 90       	pop	r0
    1b90:	0f 90       	pop	r0
    1b92:	cf 91       	pop	r28
    1b94:	df 91       	pop	r29
    1b96:	08 95       	ret

00001b98 <_proc_lres_dec>:
    proc_t * proc
#ifdef CONFIG_USE_HIGHEST_LOCKER
    ,prio_t prio
#endif
)
{
    1b98:	df 93       	push	r29
    1b9a:	cf 93       	push	r28
    1b9c:	00 d0       	rcall	.+0      	; 0x1b9e <_proc_lres_dec+0x6>
    1b9e:	0f 92       	push	r0
    1ba0:	cd b7       	in	r28, 0x3d	; 61
    1ba2:	de b7       	in	r29, 0x3e	; 62
    1ba4:	9a 83       	std	Y+2, r25	; 0x02
    1ba6:	89 83       	std	Y+1, r24	; 0x01
    1ba8:	6b 83       	std	Y+3, r22	; 0x03
#ifdef CONFIG_USE_HIGHEST_LOCKER
    pcounter_dec( &proc->lres, prio );
    1baa:	89 81       	ldd	r24, Y+1	; 0x01
    1bac:	9a 81       	ldd	r25, Y+2	; 0x02
    1bae:	0d 96       	adiw	r24, 0x0d	; 13
    1bb0:	6b 81       	ldd	r22, Y+3	; 0x03
    1bb2:	0e 94 a6 0b 	call	0x174c	; 0x174c <pcounter_dec>
    if( proc->lres.index == (index_t)0 )proc->flags &= ~PROC_FLG_HOLD;
    1bb6:	e9 81       	ldd	r30, Y+1	; 0x01
    1bb8:	fa 81       	ldd	r31, Y+2	; 0x02
    1bba:	85 8d       	ldd	r24, Z+29	; 0x1d
    1bbc:	88 23       	and	r24, r24
    1bbe:	39 f4       	brne	.+14     	; 0x1bce <_proc_lres_dec+0x36>
    1bc0:	e9 81       	ldd	r30, Y+1	; 0x01
    1bc2:	fa 81       	ldd	r31, Y+2	; 0x02
    1bc4:	83 85       	ldd	r24, Z+11	; 0x0b
    1bc6:	8b 7f       	andi	r24, 0xFB	; 251
    1bc8:	e9 81       	ldd	r30, Y+1	; 0x01
    1bca:	fa 81       	ldd	r31, Y+2	; 0x02
    1bcc:	83 87       	std	Z+11, r24	; 0x0b
#else
    if( proc->lres!= (count_t)0 )proc->lres--;
    if( proc->lres == (count_t)0 )proc->flags &= ~PROC_FLG_HOLD;
#endif
}
    1bce:	0f 90       	pop	r0
    1bd0:	0f 90       	pop	r0
    1bd2:	0f 90       	pop	r0
    1bd4:	cf 91       	pop	r28
    1bd6:	df 91       	pop	r29
    1bd8:	08 95       	ret

00001bda <_proc_prio_control_stoped>:
#ifdef CONFIG_USE_HIGHEST_LOCKER
// Будет использоваться в mutex-ах и т.п., процесс должен сам вызывать эту функцию, при этом он должен быть вырезан из списка выполняющихся.
void _proc_prio_control_stoped( proc_t * proc )
{
    1bda:	df 93       	push	r29
    1bdc:	cf 93       	push	r28
    1bde:	cd b7       	in	r28, 0x3d	; 61
    1be0:	de b7       	in	r29, 0x3e	; 62
    1be2:	27 97       	sbiw	r28, 0x07	; 7
    1be4:	0f b6       	in	r0, 0x3f	; 63
    1be6:	f8 94       	cli
    1be8:	de bf       	out	0x3e, r29	; 62
    1bea:	0f be       	out	0x3f, r0	; 63
    1bec:	cd bf       	out	0x3d, r28	; 61
    1bee:	9b 83       	std	Y+3, r25	; 0x03
    1bf0:	8a 83       	std	Y+2, r24	; 0x02
    if(proc->lres.index != (index_t)0)
    1bf2:	ea 81       	ldd	r30, Y+2	; 0x02
    1bf4:	fb 81       	ldd	r31, Y+3	; 0x03
    1bf6:	85 8d       	ldd	r24, Z+29	; 0x1d
    1bf8:	88 23       	and	r24, r24
    1bfa:	e9 f0       	breq	.+58     	; 0x1c36 <_proc_prio_control_stoped+0x5c>
    {
        prio_t locker_prio = index_search( proc->lres.index );
    1bfc:	ea 81       	ldd	r30, Y+2	; 0x02
    1bfe:	fb 81       	ldd	r31, Y+3	; 0x03
    1c00:	85 8d       	ldd	r24, Z+29	; 0x1d
    1c02:	0e 94 63 09 	call	0x12c6	; 0x12c6 <index_search>
    1c06:	89 83       	std	Y+1, r24	; 0x01
        ((gitem_t *)proc)->group->prio = ( locker_prio < proc->base_prio )?locker_prio:proc->base_prio;
    1c08:	ea 81       	ldd	r30, Y+2	; 0x02
    1c0a:	fb 81       	ldd	r31, Y+3	; 0x03
    1c0c:	84 81       	ldd	r24, Z+4	; 0x04
    1c0e:	95 81       	ldd	r25, Z+5	; 0x05
    1c10:	9e 83       	std	Y+6, r25	; 0x06
    1c12:	8d 83       	std	Y+5, r24	; 0x05
    1c14:	ea 81       	ldd	r30, Y+2	; 0x02
    1c16:	fb 81       	ldd	r31, Y+3	; 0x03
    1c18:	84 85       	ldd	r24, Z+12	; 0x0c
    1c1a:	99 81       	ldd	r25, Y+1	; 0x01
    1c1c:	9f 83       	std	Y+7, r25	; 0x07
    1c1e:	8c 83       	std	Y+4, r24	; 0x04
    1c20:	ec 81       	ldd	r30, Y+4	; 0x04
    1c22:	ff 81       	ldd	r31, Y+7	; 0x07
    1c24:	fe 17       	cp	r31, r30
    1c26:	10 f4       	brcc	.+4      	; 0x1c2c <_proc_prio_control_stoped+0x52>
    1c28:	8f 81       	ldd	r24, Y+7	; 0x07
    1c2a:	8c 83       	std	Y+4, r24	; 0x04
    1c2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c2e:	ed 81       	ldd	r30, Y+5	; 0x05
    1c30:	fe 81       	ldd	r31, Y+6	; 0x06
    1c32:	82 83       	std	Z+2, r24	; 0x02
    1c34:	0a c0       	rjmp	.+20     	; 0x1c4a <_proc_prio_control_stoped+0x70>
    }
    else
    {
        ((gitem_t *)proc)->group->prio = proc->base_prio;
    1c36:	ea 81       	ldd	r30, Y+2	; 0x02
    1c38:	fb 81       	ldd	r31, Y+3	; 0x03
    1c3a:	a4 81       	ldd	r26, Z+4	; 0x04
    1c3c:	b5 81       	ldd	r27, Z+5	; 0x05
    1c3e:	ea 81       	ldd	r30, Y+2	; 0x02
    1c40:	fb 81       	ldd	r31, Y+3	; 0x03
    1c42:	84 85       	ldd	r24, Z+12	; 0x0c
    1c44:	12 96       	adiw	r26, 0x02	; 2
    1c46:	8c 93       	st	X, r24
    1c48:	12 97       	sbiw	r26, 0x02	; 2
    }
}
    1c4a:	27 96       	adiw	r28, 0x07	; 7
    1c4c:	0f b6       	in	r0, 0x3f	; 63
    1c4e:	f8 94       	cli
    1c50:	de bf       	out	0x3e, r29	; 62
    1c52:	0f be       	out	0x3f, r0	; 63
    1c54:	cd bf       	out	0x3d, r28	; 61
    1c56:	cf 91       	pop	r28
    1c58:	df 91       	pop	r29
    1c5a:	08 95       	ret

00001c5c <_proc_prio_control_running>:
void _proc_prio_control_running( proc_t * proc )
{
    1c5c:	df 93       	push	r29
    1c5e:	cf 93       	push	r28
    1c60:	00 d0       	rcall	.+0      	; 0x1c62 <_proc_prio_control_running+0x6>
    1c62:	00 d0       	rcall	.+0      	; 0x1c64 <_proc_prio_control_running+0x8>
    1c64:	00 d0       	rcall	.+0      	; 0x1c66 <_proc_prio_control_running+0xa>
    1c66:	cd b7       	in	r28, 0x3d	; 61
    1c68:	de b7       	in	r29, 0x3e	; 62
    1c6a:	9c 83       	std	Y+4, r25	; 0x04
    1c6c:	8b 83       	std	Y+3, r24	; 0x03
    prio_t new_prio;
    if(proc->lres.index != (index_t)0)
    1c6e:	eb 81       	ldd	r30, Y+3	; 0x03
    1c70:	fc 81       	ldd	r31, Y+4	; 0x04
    1c72:	85 8d       	ldd	r24, Z+29	; 0x1d
    1c74:	88 23       	and	r24, r24
    1c76:	a9 f0       	breq	.+42     	; 0x1ca2 <_proc_prio_control_running+0x46>
    {
        prio_t locker_prio = index_search( proc->lres.index );
    1c78:	eb 81       	ldd	r30, Y+3	; 0x03
    1c7a:	fc 81       	ldd	r31, Y+4	; 0x04
    1c7c:	85 8d       	ldd	r24, Z+29	; 0x1d
    1c7e:	0e 94 63 09 	call	0x12c6	; 0x12c6 <index_search>
    1c82:	89 83       	std	Y+1, r24	; 0x01
        new_prio = ( locker_prio < proc->base_prio )?locker_prio:proc->base_prio;
    1c84:	eb 81       	ldd	r30, Y+3	; 0x03
    1c86:	fc 81       	ldd	r31, Y+4	; 0x04
    1c88:	84 85       	ldd	r24, Z+12	; 0x0c
    1c8a:	99 81       	ldd	r25, Y+1	; 0x01
    1c8c:	9e 83       	std	Y+6, r25	; 0x06
    1c8e:	8d 83       	std	Y+5, r24	; 0x05
    1c90:	8d 81       	ldd	r24, Y+5	; 0x05
    1c92:	9e 81       	ldd	r25, Y+6	; 0x06
    1c94:	98 17       	cp	r25, r24
    1c96:	10 f4       	brcc	.+4      	; 0x1c9c <_proc_prio_control_running+0x40>
    1c98:	8e 81       	ldd	r24, Y+6	; 0x06
    1c9a:	8d 83       	std	Y+5, r24	; 0x05
    1c9c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c9e:	9a 83       	std	Y+2, r25	; 0x02
    1ca0:	04 c0       	rjmp	.+8      	; 0x1caa <_proc_prio_control_running+0x4e>
    }
    else
    {
        new_prio = proc->base_prio;
    1ca2:	eb 81       	ldd	r30, Y+3	; 0x03
    1ca4:	fc 81       	ldd	r31, Y+4	; 0x04
    1ca6:	84 85       	ldd	r24, Z+12	; 0x0c
    1ca8:	8a 83       	std	Y+2, r24	; 0x02
    }
    if(((gitem_t *)proc)->group->prio != new_prio)
    1caa:	eb 81       	ldd	r30, Y+3	; 0x03
    1cac:	fc 81       	ldd	r31, Y+4	; 0x04
    1cae:	04 80       	ldd	r0, Z+4	; 0x04
    1cb0:	f5 81       	ldd	r31, Z+5	; 0x05
    1cb2:	e0 2d       	mov	r30, r0
    1cb4:	92 81       	ldd	r25, Z+2	; 0x02
    1cb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb8:	98 17       	cp	r25, r24
    1cba:	b1 f0       	breq	.+44     	; 0x1ce8 <_proc_prio_control_running+0x8c>
    {
        _proc_stop_( proc );
    1cbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cbe:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc0:	0e 94 3f 08 	call	0x107e	; 0x107e <gitem_cut>
        ((gitem_t *)proc)->group->prio = new_prio;
    1cc4:	eb 81       	ldd	r30, Y+3	; 0x03
    1cc6:	fc 81       	ldd	r31, Y+4	; 0x04
    1cc8:	04 80       	ldd	r0, Z+4	; 0x04
    1cca:	f5 81       	ldd	r31, Z+5	; 0x05
    1ccc:	e0 2d       	mov	r30, r0
    1cce:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd0:	82 83       	std	Z+2, r24	; 0x02
#ifdef CONFIG_MP
        spin_lock( &kernel.stat_lock );
        stat_inc( proc, (stat_t *)kernel.stat+proc->core_id );
        spin_unlock( &kernel.stat_lock );
#endif
        _proc_run_( proc );
    1cd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd6:	20 91 20 02 	lds	r18, 0x0220
    1cda:	30 91 21 02 	lds	r19, 0x0221
    1cde:	b9 01       	movw	r22, r18
    1ce0:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <gitem_insert>
#ifdef CONFIG_MP
        resched(proc->core_id);
#else
        resched();
    1ce4:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
#endif
    }
}
    1ce8:	26 96       	adiw	r28, 0x06	; 6
    1cea:	0f b6       	in	r0, 0x3f	; 63
    1cec:	f8 94       	cli
    1cee:	de bf       	out	0x3e, r29	; 62
    1cf0:	0f be       	out	0x3f, r0	; 63
    1cf2:	cd bf       	out	0x3d, r28	; 61
    1cf4:	cf 91       	pop	r28
    1cf6:	df 91       	pop	r29
    1cf8:	08 95       	ret

00001cfa <sched_init>:
*****************************************************************************************/
#include "../include/bugurt.h"
///========================================================================================
// Инициация
void sched_init(sched_t * sched, proc_t * idle)
{
    1cfa:	df 93       	push	r29
    1cfc:	cf 93       	push	r28
    1cfe:	00 d0       	rcall	.+0      	; 0x1d00 <sched_init+0x6>
    1d00:	00 d0       	rcall	.+0      	; 0x1d02 <sched_init+0x8>
    1d02:	cd b7       	in	r28, 0x3d	; 61
    1d04:	de b7       	in	r29, 0x3e	; 62
    1d06:	9a 83       	std	Y+2, r25	; 0x02
    1d08:	89 83       	std	Y+1, r24	; 0x01
    1d0a:	7c 83       	std	Y+4, r23	; 0x04
    1d0c:	6b 83       	std	Y+3, r22	; 0x03
#ifdef CONFIG_MP
    lock_t * sched_lock = &sched->lock;
    spin_init( sched_lock );
    spin_lock( sched_lock );
#endif // CONFIG_MP
    sched->ready = (xlist_t *)sched->plst;
    1d0e:	89 81       	ldd	r24, Y+1	; 0x01
    1d10:	9a 81       	ldd	r25, Y+2	; 0x02
    1d12:	06 96       	adiw	r24, 0x06	; 6
    1d14:	e9 81       	ldd	r30, Y+1	; 0x01
    1d16:	fa 81       	ldd	r31, Y+2	; 0x02
    1d18:	93 83       	std	Z+3, r25	; 0x03
    1d1a:	82 83       	std	Z+2, r24	; 0x02
    xlist_init( sched->ready );
    1d1c:	e9 81       	ldd	r30, Y+1	; 0x01
    1d1e:	fa 81       	ldd	r31, Y+2	; 0x02
    1d20:	82 81       	ldd	r24, Z+2	; 0x02
    1d22:	93 81       	ldd	r25, Z+3	; 0x03
    1d24:	0e 94 55 11 	call	0x22aa	; 0x22aa <xlist_init>
    sched->expired = (xlist_t *)sched->plst + 1;
    1d28:	89 81       	ldd	r24, Y+1	; 0x01
    1d2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d2c:	47 96       	adiw	r24, 0x17	; 23
    1d2e:	e9 81       	ldd	r30, Y+1	; 0x01
    1d30:	fa 81       	ldd	r31, Y+2	; 0x02
    1d32:	95 83       	std	Z+5, r25	; 0x05
    1d34:	84 83       	std	Z+4, r24	; 0x04
    xlist_init( sched->expired );
    1d36:	e9 81       	ldd	r30, Y+1	; 0x01
    1d38:	fa 81       	ldd	r31, Y+2	; 0x02
    1d3a:	84 81       	ldd	r24, Z+4	; 0x04
    1d3c:	95 81       	ldd	r25, Z+5	; 0x05
    1d3e:	0e 94 55 11 	call	0x22aa	; 0x22aa <xlist_init>
    gitem_insert( (gitem_t *)idle, sched->ready );
    1d42:	8b 81       	ldd	r24, Y+3	; 0x03
    1d44:	9c 81       	ldd	r25, Y+4	; 0x04
    1d46:	e9 81       	ldd	r30, Y+1	; 0x01
    1d48:	fa 81       	ldd	r31, Y+2	; 0x02
    1d4a:	22 81       	ldd	r18, Z+2	; 0x02
    1d4c:	33 81       	ldd	r19, Z+3	; 0x03
    1d4e:	b9 01       	movw	r22, r18
    1d50:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <gitem_insert>
    sched->current_proc = idle;
    1d54:	e9 81       	ldd	r30, Y+1	; 0x01
    1d56:	fa 81       	ldd	r31, Y+2	; 0x02
    1d58:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d5c:	91 83       	std	Z+1, r25	; 0x01
    1d5e:	80 83       	st	Z, r24
    sched->nested_crit_sec = (count_t)0;//вообще это выполняется при запрещенных прерываниях, но не известно, на этом ли процессоре
    1d60:	e9 81       	ldd	r30, Y+1	; 0x01
    1d62:	fa 81       	ldd	r31, Y+2	; 0x02
    1d64:	11 a6       	std	Z+41, r1	; 0x29
    1d66:	10 a6       	std	Z+40, r1	; 0x28
#ifdef CONFIG_MP
    spin_unlock( sched_lock );
    stat_inc( idle, (stat_t *)kernel.stat + idle->core_id );
#endif // CONFIG_MP
}
    1d68:	0f 90       	pop	r0
    1d6a:	0f 90       	pop	r0
    1d6c:	0f 90       	pop	r0
    1d6e:	0f 90       	pop	r0
    1d70:	cf 91       	pop	r28
    1d72:	df 91       	pop	r29
    1d74:	08 95       	ret

00001d76 <_sched_list_switch>:
static void _sched_list_switch( sched_t * sched )
{
    1d76:	df 93       	push	r29
    1d78:	cf 93       	push	r28
    1d7a:	00 d0       	rcall	.+0      	; 0x1d7c <_sched_list_switch+0x6>
    1d7c:	00 d0       	rcall	.+0      	; 0x1d7e <_sched_list_switch+0x8>
    1d7e:	cd b7       	in	r28, 0x3d	; 61
    1d80:	de b7       	in	r29, 0x3e	; 62
    1d82:	9c 83       	std	Y+4, r25	; 0x04
    1d84:	8b 83       	std	Y+3, r24	; 0x03
    // Список ready опустел, переключаем списки
    if( sched->ready->index == (index_t)0 )
    1d86:	eb 81       	ldd	r30, Y+3	; 0x03
    1d88:	fc 81       	ldd	r31, Y+4	; 0x04
    1d8a:	02 80       	ldd	r0, Z+2	; 0x02
    1d8c:	f3 81       	ldd	r31, Z+3	; 0x03
    1d8e:	e0 2d       	mov	r30, r0
    1d90:	80 89       	ldd	r24, Z+16	; 0x10
    1d92:	88 23       	and	r24, r24
    1d94:	a1 f4       	brne	.+40     	; 0x1dbe <_sched_list_switch+0x48>
    {
        xlist_t * buf = sched->ready;
    1d96:	eb 81       	ldd	r30, Y+3	; 0x03
    1d98:	fc 81       	ldd	r31, Y+4	; 0x04
    1d9a:	82 81       	ldd	r24, Z+2	; 0x02
    1d9c:	93 81       	ldd	r25, Z+3	; 0x03
    1d9e:	9a 83       	std	Y+2, r25	; 0x02
    1da0:	89 83       	std	Y+1, r24	; 0x01
        sched->ready = sched->expired;
    1da2:	eb 81       	ldd	r30, Y+3	; 0x03
    1da4:	fc 81       	ldd	r31, Y+4	; 0x04
    1da6:	84 81       	ldd	r24, Z+4	; 0x04
    1da8:	95 81       	ldd	r25, Z+5	; 0x05
    1daa:	eb 81       	ldd	r30, Y+3	; 0x03
    1dac:	fc 81       	ldd	r31, Y+4	; 0x04
    1dae:	93 83       	std	Z+3, r25	; 0x03
    1db0:	82 83       	std	Z+2, r24	; 0x02
        sched->expired = buf;
    1db2:	eb 81       	ldd	r30, Y+3	; 0x03
    1db4:	fc 81       	ldd	r31, Y+4	; 0x04
    1db6:	89 81       	ldd	r24, Y+1	; 0x01
    1db8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dba:	95 83       	std	Z+5, r25	; 0x05
    1dbc:	84 83       	std	Z+4, r24	; 0x04
    }
}
    1dbe:	0f 90       	pop	r0
    1dc0:	0f 90       	pop	r0
    1dc2:	0f 90       	pop	r0
    1dc4:	0f 90       	pop	r0
    1dc6:	cf 91       	pop	r28
    1dc8:	df 91       	pop	r29
    1dca:	08 95       	ret

00001dcc <sched_schedule>:
2) В качестве аргумента передаем только тот объект, который управляет процессами
на исполняющем функции процессоре.
******************************************************************************************/
// Функция планирования, переключает процессы в обработчике системмного таймера
stack_t * sched_schedule( stack_t * current_sp )
{
    1dcc:	df 93       	push	r29
    1dce:	cf 93       	push	r28
    1dd0:	cd b7       	in	r28, 0x3d	; 61
    1dd2:	de b7       	in	r29, 0x3e	; 62
    1dd4:	27 97       	sbiw	r28, 0x07	; 7
    1dd6:	0f b6       	in	r0, 0x3f	; 63
    1dd8:	f8 94       	cli
    1dda:	de bf       	out	0x3e, r29	; 62
    1ddc:	0f be       	out	0x3f, r0	; 63
    1dde:	cd bf       	out	0x3d, r28	; 61
    1de0:	9f 83       	std	Y+7, r25	; 0x07
    1de2:	8e 83       	std	Y+6, r24	; 0x06
#ifdef CONFIG_MP
    sched_t * sched = (sched_t *)kernel.sched + current_core();
#else
    sched_t * sched = (sched_t *)&kernel.sched;
    1de4:	8e e1       	ldi	r24, 0x1E	; 30
    1de6:	92 e0       	ldi	r25, 0x02	; 2
    1de8:	9d 83       	std	Y+5, r25	; 0x05
    1dea:	8c 83       	std	Y+4, r24	; 0x04
#endif // CONFIG_MP
    // Меняем только с локального процессора, блокировку sched->lock можно не захватывать!
    proc_t * current_proc = sched->current_proc;
    1dec:	ec 81       	ldd	r30, Y+4	; 0x04
    1dee:	fd 81       	ldd	r31, Y+5	; 0x05
    1df0:	80 81       	ld	r24, Z
    1df2:	91 81       	ldd	r25, Z+1	; 0x01
    1df4:	9b 83       	std	Y+3, r25	; 0x03
    1df6:	8a 83       	std	Y+2, r24	; 0x02
#ifdef CONFIG_MP
    // А вот эту блокировку обязательно надо захватить!
    spin_lock( &current_proc->lock );
#endif // CONFIG_MP
    // Сохранение указателя стека
    current_proc->spointer = current_sp;
    1df8:	ea 81       	ldd	r30, Y+2	; 0x02
    1dfa:	fb 81       	ldd	r31, Y+3	; 0x03
    1dfc:	8e 81       	ldd	r24, Y+6	; 0x06
    1dfe:	9f 81       	ldd	r25, Y+7	; 0x07
    1e00:	95 a7       	std	Z+45, r25	; 0x2d
    1e02:	84 a7       	std	Z+44, r24	; 0x2c
    // Хук "сохранение контекста"
    if( current_proc->sv_hook )current_proc->sv_hook( current_proc->arg );
    1e04:	ea 81       	ldd	r30, Y+2	; 0x02
    1e06:	fb 81       	ldd	r31, Y+3	; 0x03
    1e08:	84 a1       	ldd	r24, Z+36	; 0x24
    1e0a:	95 a1       	ldd	r25, Z+37	; 0x25
    1e0c:	00 97       	sbiw	r24, 0x00	; 0
    1e0e:	51 f0       	breq	.+20     	; 0x1e24 <sched_schedule+0x58>
    1e10:	ea 81       	ldd	r30, Y+2	; 0x02
    1e12:	fb 81       	ldd	r31, Y+3	; 0x03
    1e14:	24 a1       	ldd	r18, Z+36	; 0x24
    1e16:	35 a1       	ldd	r19, Z+37	; 0x25
    1e18:	ea 81       	ldd	r30, Y+2	; 0x02
    1e1a:	fb 81       	ldd	r31, Y+3	; 0x03
    1e1c:	80 a5       	ldd	r24, Z+40	; 0x28
    1e1e:	91 a5       	ldd	r25, Z+41	; 0x29
    1e20:	f9 01       	movw	r30, r18
    1e22:	09 95       	icall
    // Проверяем, что процесс находится в списке ready
    if( (xlist_t *)((gitem_t *)current_proc)->group->link == sched->ready )
    1e24:	ea 81       	ldd	r30, Y+2	; 0x02
    1e26:	fb 81       	ldd	r31, Y+3	; 0x03
    1e28:	04 80       	ldd	r0, Z+4	; 0x04
    1e2a:	f5 81       	ldd	r31, Z+5	; 0x05
    1e2c:	e0 2d       	mov	r30, r0
    1e2e:	80 81       	ld	r24, Z
    1e30:	91 81       	ldd	r25, Z+1	; 0x01
    1e32:	9c 01       	movw	r18, r24
    1e34:	ec 81       	ldd	r30, Y+4	; 0x04
    1e36:	fd 81       	ldd	r31, Y+5	; 0x05
    1e38:	82 81       	ldd	r24, Z+2	; 0x02
    1e3a:	93 81       	ldd	r25, Z+3	; 0x03
    1e3c:	28 17       	cp	r18, r24
    1e3e:	39 07       	cpc	r19, r25
    1e40:	09 f0       	breq	.+2      	; 0x1e44 <sched_schedule+0x78>
    1e42:	4d c0       	rjmp	.+154    	; 0x1ede <sched_schedule+0x112>
    {
        // Переключаем cписок на следующий за текущим процесс
#ifdef CONFIG_MP
        spin_lock( &sched->lock );
#endif // CONFIG_MP
        xlist_switch( sched->ready, ((gitem_t *)current_proc)->group->prio );
    1e44:	ec 81       	ldd	r30, Y+4	; 0x04
    1e46:	fd 81       	ldd	r31, Y+5	; 0x05
    1e48:	82 81       	ldd	r24, Z+2	; 0x02
    1e4a:	93 81       	ldd	r25, Z+3	; 0x03
    1e4c:	ea 81       	ldd	r30, Y+2	; 0x02
    1e4e:	fb 81       	ldd	r31, Y+3	; 0x03
    1e50:	04 80       	ldd	r0, Z+4	; 0x04
    1e52:	f5 81       	ldd	r31, Z+5	; 0x05
    1e54:	e0 2d       	mov	r30, r0
    1e56:	22 81       	ldd	r18, Z+2	; 0x02
    1e58:	62 2f       	mov	r22, r18
    1e5a:	0e 94 ab 11 	call	0x2356	; 0x2356 <xlist_switch>
#ifdef CONFIG_MP
        spin_unlock( &sched->lock );
#endif // CONFIG_MP
        //Проверяем, не истек ли квант времени процесса
        if( current_proc->timer > (timer_t)1 )current_proc->timer--;// Не истек, уменьшаем таймер
    1e5e:	ea 81       	ldd	r30, Y+2	; 0x02
    1e60:	fb 81       	ldd	r31, Y+3	; 0x03
    1e62:	80 a1       	ldd	r24, Z+32	; 0x20
    1e64:	91 a1       	ldd	r25, Z+33	; 0x21
    1e66:	82 30       	cpi	r24, 0x02	; 2
    1e68:	91 05       	cpc	r25, r1
    1e6a:	50 f0       	brcs	.+20     	; 0x1e80 <sched_schedule+0xb4>
    1e6c:	ea 81       	ldd	r30, Y+2	; 0x02
    1e6e:	fb 81       	ldd	r31, Y+3	; 0x03
    1e70:	80 a1       	ldd	r24, Z+32	; 0x20
    1e72:	91 a1       	ldd	r25, Z+33	; 0x21
    1e74:	01 97       	sbiw	r24, 0x01	; 1
    1e76:	ea 81       	ldd	r30, Y+2	; 0x02
    1e78:	fb 81       	ldd	r31, Y+3	; 0x03
    1e7a:	91 a3       	std	Z+33, r25	; 0x21
    1e7c:	80 a3       	std	Z+32, r24	; 0x20
    1e7e:	2f c0       	rjmp	.+94     	; 0x1ede <sched_schedule+0x112>
        {
            // Истек, вырезаем процесс из списка
#ifdef CONFIG_MP
            spin_lock( &sched->lock );
#endif // CONFIG_MP
            gitem_fast_cut( (gitem_t *)current_proc );
    1e80:	8a 81       	ldd	r24, Y+2	; 0x02
    1e82:	9b 81       	ldd	r25, Y+3	; 0x03
    1e84:	0e 94 b9 07 	call	0xf72	; 0xf72 <gitem_fast_cut>
            // Обновили статистику после удаления процесса из списка ready
            stat_dec( current_proc, (stat_t *)kernel.stat + current_proc->core_id );
#endif // CONFIG_USE_ALB
#endif // CONFIG_MP
            // А что за процесс собственно?
            flag_t flags = current_proc->flags;
    1e88:	ea 81       	ldd	r30, Y+2	; 0x02
    1e8a:	fb 81       	ldd	r31, Y+3	; 0x03
    1e8c:	83 85       	ldd	r24, Z+11	; 0x0b
    1e8e:	89 83       	std	Y+1, r24	; 0x01
            if(
                (!(flags & PROC_FLG_RT))
    1e90:	89 81       	ldd	r24, Y+1	; 0x01
    1e92:	88 2f       	mov	r24, r24
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	81 70       	andi	r24, 0x01	; 1
    1e98:	90 70       	andi	r25, 0x00	; 0
            stat_dec( current_proc, (stat_t *)kernel.stat + current_proc->core_id );
#endif // CONFIG_USE_ALB
#endif // CONFIG_MP
            // А что за процесс собственно?
            flag_t flags = current_proc->flags;
            if(
    1e9a:	00 97       	sbiw	r24, 0x00	; 0
    1e9c:	91 f4       	brne	.+36     	; 0x1ec2 <sched_schedule+0xf6>
                ||(flags & PROC_FLG_HOLD)
#endif // CONFIG_HARD_RT
            )
            {
                //Процесс общего назначения, либо он удерживает общий ресурс, сбрасываем таймер и переносим в очередь expired
                current_proc->timer = current_proc->time_quant;
    1e9e:	ea 81       	ldd	r30, Y+2	; 0x02
    1ea0:	fb 81       	ldd	r31, Y+3	; 0x03
    1ea2:	86 8d       	ldd	r24, Z+30	; 0x1e
    1ea4:	97 8d       	ldd	r25, Z+31	; 0x1f
    1ea6:	ea 81       	ldd	r30, Y+2	; 0x02
    1ea8:	fb 81       	ldd	r31, Y+3	; 0x03
    1eaa:	91 a3       	std	Z+33, r25	; 0x21
    1eac:	80 a3       	std	Z+32, r24	; 0x20
#else // CONFIG_MP CONFIG_USE_ALB
                // Тупо переносим процесс в список expired
#ifdef CONFIG_MP
                spin_lock( &sched->lock );
#endif // CONFIG_MP
                gitem_insert( (gitem_t *)current_proc, sched->expired );
    1eae:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb0:	9b 81       	ldd	r25, Y+3	; 0x03
    1eb2:	ec 81       	ldd	r30, Y+4	; 0x04
    1eb4:	fd 81       	ldd	r31, Y+5	; 0x05
    1eb6:	24 81       	ldd	r18, Z+4	; 0x04
    1eb8:	35 81       	ldd	r19, Z+5	; 0x05
    1eba:	b9 01       	movw	r22, r18
    1ebc:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <gitem_insert>
    1ec0:	0e c0       	rjmp	.+28     	; 0x1ede <sched_schedule+0x112>
                spin_lock( &kernel.stat_lock );
                stat_dec( current_proc, (stat_t *)kernel.stat + current_proc->core_id );
#endif // nCONFIG_USE_ALB
                spin_unlock( &kernel.stat_lock );
#endif // CONFIG_MP
                ((gitem_t *)current_proc)->group->link = (void *)0;// Просто вырезали из списка, как в gitem_cut
    1ec2:	ea 81       	ldd	r30, Y+2	; 0x02
    1ec4:	fb 81       	ldd	r31, Y+3	; 0x03
    1ec6:	04 80       	ldd	r0, Z+4	; 0x04
    1ec8:	f5 81       	ldd	r31, Z+5	; 0x05
    1eca:	e0 2d       	mov	r30, r0
    1ecc:	11 82       	std	Z+1, r1	; 0x01
    1ece:	10 82       	st	Z, r1
                current_proc->flags &= ~PROC_FLG_RUN;
    1ed0:	ea 81       	ldd	r30, Y+2	; 0x02
    1ed2:	fb 81       	ldd	r31, Y+3	; 0x03
    1ed4:	83 85       	ldd	r24, Z+11	; 0x0b
    1ed6:	8d 7f       	andi	r24, 0xFD	; 253
    1ed8:	ea 81       	ldd	r30, Y+2	; 0x02
    1eda:	fb 81       	ldd	r31, Y+3	; 0x03
    1edc:	83 87       	std	Z+11, r24	; 0x0b
#ifdef CONFIG_MP
    //Текущий процесс более не нужен, освобождаем его блокировку
    spin_unlock( &current_proc->lock );
    spin_lock( &sched->lock );
#endif // CONFIG_MP
    _sched_list_switch( sched );
    1ede:	8c 81       	ldd	r24, Y+4	; 0x04
    1ee0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ee2:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_sched_list_switch>
    // Изменять указатель будем при захваченной блокировке,
    // чтобы процессы на других процессорах не прочитали неизвестно что.
    current_proc = (proc_t *)xlist_head( sched->ready ); // Вытесняющая многозадачность же!
    1ee6:	ec 81       	ldd	r30, Y+4	; 0x04
    1ee8:	fd 81       	ldd	r31, Y+5	; 0x05
    1eea:	82 81       	ldd	r24, Z+2	; 0x02
    1eec:	93 81       	ldd	r25, Z+3	; 0x03
    1eee:	0e 94 7f 11 	call	0x22fe	; 0x22fe <xlist_head>
    1ef2:	9b 83       	std	Y+3, r25	; 0x03
    1ef4:	8a 83       	std	Y+2, r24	; 0x02
    sched->current_proc = current_proc;
    1ef6:	ec 81       	ldd	r30, Y+4	; 0x04
    1ef8:	fd 81       	ldd	r31, Y+5	; 0x05
    1efa:	8a 81       	ldd	r24, Y+2	; 0x02
    1efc:	9b 81       	ldd	r25, Y+3	; 0x03
    1efe:	91 83       	std	Z+1, r25	; 0x01
    1f00:	80 83       	st	Z, r24
#ifdef CONFIG_MP
    spin_unlock( &sched->lock );
    spin_lock( &current_proc->lock );
#endif // CONFIG_MP
    //Хук "восстановление контекста"
    if( current_proc->rs_hook )current_proc->rs_hook( current_proc->arg );
    1f02:	ea 81       	ldd	r30, Y+2	; 0x02
    1f04:	fb 81       	ldd	r31, Y+3	; 0x03
    1f06:	86 a1       	ldd	r24, Z+38	; 0x26
    1f08:	97 a1       	ldd	r25, Z+39	; 0x27
    1f0a:	00 97       	sbiw	r24, 0x00	; 0
    1f0c:	51 f0       	breq	.+20     	; 0x1f22 <sched_schedule+0x156>
    1f0e:	ea 81       	ldd	r30, Y+2	; 0x02
    1f10:	fb 81       	ldd	r31, Y+3	; 0x03
    1f12:	26 a1       	ldd	r18, Z+38	; 0x26
    1f14:	37 a1       	ldd	r19, Z+39	; 0x27
    1f16:	ea 81       	ldd	r30, Y+2	; 0x02
    1f18:	fb 81       	ldd	r31, Y+3	; 0x03
    1f1a:	80 a5       	ldd	r24, Z+40	; 0x28
    1f1c:	91 a5       	ldd	r25, Z+41	; 0x29
    1f1e:	f9 01       	movw	r30, r18
    1f20:	09 95       	icall
#ifdef CONFIG_MP
    stack_t * ret_sp = current_proc->spointer;
    spin_unlock( &current_proc->lock );
    return ret_sp;
#else
    return current_proc->spointer;
    1f22:	ea 81       	ldd	r30, Y+2	; 0x02
    1f24:	fb 81       	ldd	r31, Y+3	; 0x03
    1f26:	84 a5       	ldd	r24, Z+44	; 0x2c
    1f28:	95 a5       	ldd	r25, Z+45	; 0x2d
#endif // CONFIG_MP
}
    1f2a:	27 96       	adiw	r28, 0x07	; 7
    1f2c:	0f b6       	in	r0, 0x3f	; 63
    1f2e:	f8 94       	cli
    1f30:	de bf       	out	0x3e, r29	; 62
    1f32:	0f be       	out	0x3f, r0	; 63
    1f34:	cd bf       	out	0x3d, r28	; 61
    1f36:	cf 91       	pop	r28
    1f38:	df 91       	pop	r29
    1f3a:	08 95       	ret

00001f3c <sched_reschedule>:
//----------------------------------------------------------------------------------------
// Функция перепланирования, переключает процессы в обработчике прерывания resched
stack_t * sched_reschedule( stack_t * current_sp )
{
    1f3c:	df 93       	push	r29
    1f3e:	cf 93       	push	r28
    1f40:	00 d0       	rcall	.+0      	; 0x1f42 <sched_reschedule+0x6>
    1f42:	00 d0       	rcall	.+0      	; 0x1f44 <sched_reschedule+0x8>
    1f44:	00 d0       	rcall	.+0      	; 0x1f46 <sched_reschedule+0xa>
    1f46:	cd b7       	in	r28, 0x3d	; 61
    1f48:	de b7       	in	r29, 0x3e	; 62
    1f4a:	9e 83       	std	Y+6, r25	; 0x06
    1f4c:	8d 83       	std	Y+5, r24	; 0x05
#ifdef CONFIG_MP
    sched_t * sched = (sched_t *)kernel.sched + current_core();
#else
    sched_t * sched = (sched_t *)&kernel.sched;
    1f4e:	8e e1       	ldi	r24, 0x1E	; 30
    1f50:	92 e0       	ldi	r25, 0x02	; 2
    1f52:	9c 83       	std	Y+4, r25	; 0x04
    1f54:	8b 83       	std	Y+3, r24	; 0x03
#endif // CONFIG_MP
    // Меняем только с локального процессора, блокировку sched->lock можно не захватывать!
    proc_t * current_proc = sched->current_proc;
    1f56:	eb 81       	ldd	r30, Y+3	; 0x03
    1f58:	fc 81       	ldd	r31, Y+4	; 0x04
    1f5a:	80 81       	ld	r24, Z
    1f5c:	91 81       	ldd	r25, Z+1	; 0x01
    1f5e:	9a 83       	std	Y+2, r25	; 0x02
    1f60:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    // А вот эту блокировку обязательно надо захватить!
    spin_lock( &current_proc->lock );
#endif // CONFIG_MP
    // Сохранение указателя стека
    current_proc->spointer = current_sp;
    1f62:	e9 81       	ldd	r30, Y+1	; 0x01
    1f64:	fa 81       	ldd	r31, Y+2	; 0x02
    1f66:	8d 81       	ldd	r24, Y+5	; 0x05
    1f68:	9e 81       	ldd	r25, Y+6	; 0x06
    1f6a:	95 a7       	std	Z+45, r25	; 0x2d
    1f6c:	84 a7       	std	Z+44, r24	; 0x2c
    // Хук "сохранение контекста"
    if( current_proc->sv_hook )current_proc->sv_hook( current_proc->arg );
    1f6e:	e9 81       	ldd	r30, Y+1	; 0x01
    1f70:	fa 81       	ldd	r31, Y+2	; 0x02
    1f72:	84 a1       	ldd	r24, Z+36	; 0x24
    1f74:	95 a1       	ldd	r25, Z+37	; 0x25
    1f76:	00 97       	sbiw	r24, 0x00	; 0
    1f78:	51 f0       	breq	.+20     	; 0x1f8e <sched_reschedule+0x52>
    1f7a:	e9 81       	ldd	r30, Y+1	; 0x01
    1f7c:	fa 81       	ldd	r31, Y+2	; 0x02
    1f7e:	24 a1       	ldd	r18, Z+36	; 0x24
    1f80:	35 a1       	ldd	r19, Z+37	; 0x25
    1f82:	e9 81       	ldd	r30, Y+1	; 0x01
    1f84:	fa 81       	ldd	r31, Y+2	; 0x02
    1f86:	80 a5       	ldd	r24, Z+40	; 0x28
    1f88:	91 a5       	ldd	r25, Z+41	; 0x29
    1f8a:	f9 01       	movw	r30, r18
    1f8c:	09 95       	icall
#ifdef CONFIG_MP
    spin_unlock( &current_proc->lock );
    spin_lock( &sched->lock );
#endif // CONFIG_MP
    _sched_list_switch( sched );
    1f8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f90:	9c 81       	ldd	r25, Y+4	; 0x04
    1f92:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_sched_list_switch>
    current_proc = (proc_t *)xlist_head( sched->ready ); // Вытесняющая многозадачность же!
    1f96:	eb 81       	ldd	r30, Y+3	; 0x03
    1f98:	fc 81       	ldd	r31, Y+4	; 0x04
    1f9a:	82 81       	ldd	r24, Z+2	; 0x02
    1f9c:	93 81       	ldd	r25, Z+3	; 0x03
    1f9e:	0e 94 7f 11 	call	0x22fe	; 0x22fe <xlist_head>
    1fa2:	9a 83       	std	Y+2, r25	; 0x02
    1fa4:	89 83       	std	Y+1, r24	; 0x01
    sched->current_proc = current_proc;
    1fa6:	eb 81       	ldd	r30, Y+3	; 0x03
    1fa8:	fc 81       	ldd	r31, Y+4	; 0x04
    1faa:	89 81       	ldd	r24, Y+1	; 0x01
    1fac:	9a 81       	ldd	r25, Y+2	; 0x02
    1fae:	91 83       	std	Z+1, r25	; 0x01
    1fb0:	80 83       	st	Z, r24

#ifdef CONFIG_MP
    spin_lock(&current_proc->lock);
#endif // CONFIG_MP
    //Хук "восстановление контекста"
    if( current_proc->rs_hook )current_proc->rs_hook( current_proc->arg );
    1fb2:	e9 81       	ldd	r30, Y+1	; 0x01
    1fb4:	fa 81       	ldd	r31, Y+2	; 0x02
    1fb6:	86 a1       	ldd	r24, Z+38	; 0x26
    1fb8:	97 a1       	ldd	r25, Z+39	; 0x27
    1fba:	00 97       	sbiw	r24, 0x00	; 0
    1fbc:	51 f0       	breq	.+20     	; 0x1fd2 <sched_reschedule+0x96>
    1fbe:	e9 81       	ldd	r30, Y+1	; 0x01
    1fc0:	fa 81       	ldd	r31, Y+2	; 0x02
    1fc2:	26 a1       	ldd	r18, Z+38	; 0x26
    1fc4:	37 a1       	ldd	r19, Z+39	; 0x27
    1fc6:	e9 81       	ldd	r30, Y+1	; 0x01
    1fc8:	fa 81       	ldd	r31, Y+2	; 0x02
    1fca:	80 a5       	ldd	r24, Z+40	; 0x28
    1fcc:	91 a5       	ldd	r25, Z+41	; 0x29
    1fce:	f9 01       	movw	r30, r18
    1fd0:	09 95       	icall
#ifdef CONFIG_MP
    stack_t * ret_sp = current_proc->spointer;
    spin_unlock( &current_proc->lock );
    return ret_sp;
#else
    return current_proc->spointer;
    1fd2:	e9 81       	ldd	r30, Y+1	; 0x01
    1fd4:	fa 81       	ldd	r31, Y+2	; 0x02
    1fd6:	84 a5       	ldd	r24, Z+44	; 0x2c
    1fd8:	95 a5       	ldd	r25, Z+45	; 0x2d
#endif // CONFIG_MP
}
    1fda:	26 96       	adiw	r28, 0x06	; 6
    1fdc:	0f b6       	in	r0, 0x3f	; 63
    1fde:	f8 94       	cli
    1fe0:	de bf       	out	0x3e, r29	; 62
    1fe2:	0f be       	out	0x3f, r0	; 63
    1fe4:	cd bf       	out	0x3d, r28	; 61
    1fe6:	cf 91       	pop	r28
    1fe8:	df 91       	pop	r29
    1fea:	08 95       	ret

00001fec <sem_init_isr>:
*****************************************************************************************/
#include "../include/bugurt.h"

// Инициализация
void sem_init_isr( sem_t * sem, count_t count )
{
    1fec:	df 93       	push	r29
    1fee:	cf 93       	push	r28
    1ff0:	00 d0       	rcall	.+0      	; 0x1ff2 <sem_init_isr+0x6>
    1ff2:	00 d0       	rcall	.+0      	; 0x1ff4 <sem_init_isr+0x8>
    1ff4:	cd b7       	in	r28, 0x3d	; 61
    1ff6:	de b7       	in	r29, 0x3e	; 62
    1ff8:	9a 83       	std	Y+2, r25	; 0x02
    1ffa:	89 83       	std	Y+1, r24	; 0x01
    1ffc:	7c 83       	std	Y+4, r23	; 0x04
    1ffe:	6b 83       	std	Y+3, r22	; 0x03
    xlist_init( (xlist_t *)sem );
    2000:	89 81       	ldd	r24, Y+1	; 0x01
    2002:	9a 81       	ldd	r25, Y+2	; 0x02
    2004:	0e 94 55 11 	call	0x22aa	; 0x22aa <xlist_init>
    sem->counter = count;
    2008:	e9 81       	ldd	r30, Y+1	; 0x01
    200a:	fa 81       	ldd	r31, Y+2	; 0x02
    200c:	8b 81       	ldd	r24, Y+3	; 0x03
    200e:	9c 81       	ldd	r25, Y+4	; 0x04
    2010:	92 8b       	std	Z+18, r25	; 0x12
    2012:	81 8b       	std	Z+17, r24	; 0x11
}
    2014:	0f 90       	pop	r0
    2016:	0f 90       	pop	r0
    2018:	0f 90       	pop	r0
    201a:	0f 90       	pop	r0
    201c:	cf 91       	pop	r28
    201e:	df 91       	pop	r29
    2020:	08 95       	ret

00002022 <_sem_lock>:

// То же, для внутреннего использования
bool_t _sem_lock( sem_t * sem )
{
    2022:	df 93       	push	r29
    2024:	cf 93       	push	r28
    2026:	00 d0       	rcall	.+0      	; 0x2028 <_sem_lock+0x6>
    2028:	00 d0       	rcall	.+0      	; 0x202a <_sem_lock+0x8>
    202a:	0f 92       	push	r0
    202c:	cd b7       	in	r28, 0x3d	; 61
    202e:	de b7       	in	r29, 0x3e	; 62
    2030:	9d 83       	std	Y+5, r25	; 0x05
    2032:	8c 83       	std	Y+4, r24	; 0x04

    bool_t ret = 0;
    2034:	1b 82       	std	Y+3, r1	; 0x03
    if( sem->counter != 0 )
    2036:	ec 81       	ldd	r30, Y+4	; 0x04
    2038:	fd 81       	ldd	r31, Y+5	; 0x05
    203a:	81 89       	ldd	r24, Z+17	; 0x11
    203c:	92 89       	ldd	r25, Z+18	; 0x12
    203e:	00 97       	sbiw	r24, 0x00	; 0
    2040:	61 f0       	breq	.+24     	; 0x205a <_sem_lock+0x38>
    {
        sem->counter--;
    2042:	ec 81       	ldd	r30, Y+4	; 0x04
    2044:	fd 81       	ldd	r31, Y+5	; 0x05
    2046:	81 89       	ldd	r24, Z+17	; 0x11
    2048:	92 89       	ldd	r25, Z+18	; 0x12
    204a:	01 97       	sbiw	r24, 0x01	; 1
    204c:	ec 81       	ldd	r30, Y+4	; 0x04
    204e:	fd 81       	ldd	r31, Y+5	; 0x05
    2050:	92 8b       	std	Z+18, r25	; 0x12
    2052:	81 8b       	std	Z+17, r24	; 0x11
#ifdef CONFIG_MP
        spin_unlock( &sem->lock );// Освобождение блокировки семафора
#endif //CONFIG_MP
        ret = (bool_t)1;
    2054:	81 e0       	ldi	r24, 0x01	; 1
    2056:	8b 83       	std	Y+3, r24	; 0x03
    2058:	16 c0       	rjmp	.+44     	; 0x2086 <_sem_lock+0x64>
    }
    else
    {
        proc_t * proc = current_proc();
    205a:	0e 94 cc 00 	call	0x198	; 0x198 <current_proc>
    205e:	9a 83       	std	Y+2, r25	; 0x02
    2060:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
        spin_lock( &proc->lock );// Захват блокировки процесса
#endif //CONFIG_MP
        proc->flags |= PROC_FLG_QUEUE;
    2062:	e9 81       	ldd	r30, Y+1	; 0x01
    2064:	fa 81       	ldd	r31, Y+2	; 0x02
    2066:	83 85       	ldd	r24, Z+11	; 0x0b
    2068:	88 60       	ori	r24, 0x08	; 8
    206a:	e9 81       	ldd	r30, Y+1	; 0x01
    206c:	fa 81       	ldd	r31, Y+2	; 0x02
    206e:	83 87       	std	Z+11, r24	; 0x0b
        _proc_stop( proc );
    2070:	89 81       	ldd	r24, Y+1	; 0x01
    2072:	9a 81       	ldd	r25, Y+2	; 0x02
    2074:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <_proc_stop>
        gitem_insert( (gitem_t *)proc, (xlist_t *)sem );
    2078:	89 81       	ldd	r24, Y+1	; 0x01
    207a:	9a 81       	ldd	r25, Y+2	; 0x02
    207c:	2c 81       	ldd	r18, Y+4	; 0x04
    207e:	3d 81       	ldd	r19, Y+5	; 0x05
    2080:	b9 01       	movw	r22, r18
    2082:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <gitem_insert>
#ifdef CONFIG_MP
        spin_unlock( &proc->lock );// Освобождение блокировки процесса
#endif //CONFIG_MP
    }
    return ret;
    2086:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2088:	0f 90       	pop	r0
    208a:	0f 90       	pop	r0
    208c:	0f 90       	pop	r0
    208e:	0f 90       	pop	r0
    2090:	0f 90       	pop	r0
    2092:	cf 91       	pop	r28
    2094:	df 91       	pop	r29
    2096:	08 95       	ret

00002098 <_sem_unlock>:

void _sem_unlock( sem_t * sem )
{
    2098:	df 93       	push	r29
    209a:	cf 93       	push	r28
    209c:	00 d0       	rcall	.+0      	; 0x209e <_sem_unlock+0x6>
    209e:	00 d0       	rcall	.+0      	; 0x20a0 <_sem_unlock+0x8>
    20a0:	cd b7       	in	r28, 0x3d	; 61
    20a2:	de b7       	in	r29, 0x3e	; 62
    20a4:	9c 83       	std	Y+4, r25	; 0x04
    20a6:	8b 83       	std	Y+3, r24	; 0x03
    if( ((xlist_t *)sem)->index == (index_t)0  )
    20a8:	eb 81       	ldd	r30, Y+3	; 0x03
    20aa:	fc 81       	ldd	r31, Y+4	; 0x04
    20ac:	80 89       	ldd	r24, Z+16	; 0x10
    20ae:	88 23       	and	r24, r24
    20b0:	51 f4       	brne	.+20     	; 0x20c6 <_sem_unlock+0x2e>
    {
        sem->counter++;
    20b2:	eb 81       	ldd	r30, Y+3	; 0x03
    20b4:	fc 81       	ldd	r31, Y+4	; 0x04
    20b6:	81 89       	ldd	r24, Z+17	; 0x11
    20b8:	92 89       	ldd	r25, Z+18	; 0x12
    20ba:	01 96       	adiw	r24, 0x01	; 1
    20bc:	eb 81       	ldd	r30, Y+3	; 0x03
    20be:	fc 81       	ldd	r31, Y+4	; 0x04
    20c0:	92 8b       	std	Z+18, r25	; 0x12
    20c2:	81 8b       	std	Z+17, r24	; 0x11
    20c4:	15 c0       	rjmp	.+42     	; 0x20f0 <_sem_unlock+0x58>
#ifdef CONFIG_MP
        spin_unlock( &sem->lock );
#endif //CONFIG_MP
        return;
    }
    proc_t * proc = (proc_t *)xlist_head((xlist_t *)sem);
    20c6:	8b 81       	ldd	r24, Y+3	; 0x03
    20c8:	9c 81       	ldd	r25, Y+4	; 0x04
    20ca:	0e 94 7f 11 	call	0x22fe	; 0x22fe <xlist_head>
    20ce:	9a 83       	std	Y+2, r25	; 0x02
    20d0:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );// Захват спин-блокировки процесса
#endif //CONFIG_MP
    proc->flags &= ~PROC_FLG_QUEUE;
    20d2:	e9 81       	ldd	r30, Y+1	; 0x01
    20d4:	fa 81       	ldd	r31, Y+2	; 0x02
    20d6:	83 85       	ldd	r24, Z+11	; 0x0b
    20d8:	87 7f       	andi	r24, 0xF7	; 247
    20da:	e9 81       	ldd	r30, Y+1	; 0x01
    20dc:	fa 81       	ldd	r31, Y+2	; 0x02
    20de:	83 87       	std	Z+11, r24	; 0x0b
    gitem_cut( (gitem_t *)proc );
    20e0:	89 81       	ldd	r24, Y+1	; 0x01
    20e2:	9a 81       	ldd	r25, Y+2	; 0x02
    20e4:	0e 94 3f 08 	call	0x107e	; 0x107e <gitem_cut>
    _proc_run( proc );
    20e8:	89 81       	ldd	r24, Y+1	; 0x01
    20ea:	9a 81       	ldd	r25, Y+2	; 0x02
    20ec:	0e 94 80 0c 	call	0x1900	; 0x1900 <_proc_run>
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );// Освобождение спин-блокировки процесса
#endif //CONFIG_MP
}
    20f0:	0f 90       	pop	r0
    20f2:	0f 90       	pop	r0
    20f4:	0f 90       	pop	r0
    20f6:	0f 90       	pop	r0
    20f8:	cf 91       	pop	r28
    20fa:	df 91       	pop	r29
    20fc:	08 95       	ret

000020fe <sig_init_isr>:
*****************************************************************************************/
#include "../include/bugurt.h"
//========================================================================================
// Инициация
void sig_init_isr( sig_t * sig )
{
    20fe:	df 93       	push	r29
    2100:	cf 93       	push	r28
    2102:	00 d0       	rcall	.+0      	; 0x2104 <sig_init_isr+0x6>
    2104:	cd b7       	in	r28, 0x3d	; 61
    2106:	de b7       	in	r29, 0x3e	; 62
    2108:	9a 83       	std	Y+2, r25	; 0x02
    210a:	89 83       	std	Y+1, r24	; 0x01
    {
        xlist_init( (xlist_t *)sig->sig_list + i );
        stat_init( (stat_t *)sig->sig_stat + i );
    }
#else
    xlist_init( (xlist_t *)sig );
    210c:	89 81       	ldd	r24, Y+1	; 0x01
    210e:	9a 81       	ldd	r25, Y+2	; 0x02
    2110:	0e 94 55 11 	call	0x22aa	; 0x22aa <xlist_init>
#endif
}
    2114:	0f 90       	pop	r0
    2116:	0f 90       	pop	r0
    2118:	cf 91       	pop	r28
    211a:	df 91       	pop	r29
    211c:	08 95       	ret

0000211e <sig_wait_stage_1_isr>:
//========================================================================================
// Это выполнится при постановке процесса в список ожидания сигнала
void sig_wait_stage_1_isr( sig_t * sig )
{
    211e:	df 93       	push	r29
    2120:	cf 93       	push	r28
    2122:	00 d0       	rcall	.+0      	; 0x2124 <sig_wait_stage_1_isr+0x6>
    2124:	00 d0       	rcall	.+0      	; 0x2126 <sig_wait_stage_1_isr+0x8>
    2126:	cd b7       	in	r28, 0x3d	; 61
    2128:	de b7       	in	r29, 0x3e	; 62
    212a:	9c 83       	std	Y+4, r25	; 0x04
    212c:	8b 83       	std	Y+3, r24	; 0x03
#ifdef CONFIG_MP
    spin_lock( &sig->lock );
#endif // CONFIG_MP
    proc_t * proc = current_proc();
    212e:	0e 94 cc 00 	call	0x198	; 0x198 <current_proc>
    2132:	9a 83       	std	Y+2, r25	; 0x02
    2134:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    // Останавливаем процесс
    _proc_stop(proc);
    2136:	89 81       	ldd	r24, Y+1	; 0x01
    2138:	9a 81       	ldd	r25, Y+2	; 0x02
    213a:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <_proc_stop>
    proc->flags |= PROC_FLG_WAIT;
    213e:	e9 81       	ldd	r30, Y+1	; 0x01
    2140:	fa 81       	ldd	r31, Y+2	; 0x02
    2142:	83 85       	ldd	r24, Z+11	; 0x0b
    2144:	80 61       	ori	r24, 0x10	; 16
    2146:	e9 81       	ldd	r30, Y+1	; 0x01
    2148:	fa 81       	ldd	r31, Y+2	; 0x02
    214a:	83 87       	std	Z+11, r24	; 0x0b
        stat_inc( proc, (stat_t *)sig->sig_stat + sig_core );
    }
    spin_unlock( &proc->lock );
    spin_unlock( &sig->lock );
#else
    gitem_insert_group( (gitem_t *)proc, (xlist_t *)sig );
    214c:	89 81       	ldd	r24, Y+1	; 0x01
    214e:	9a 81       	ldd	r25, Y+2	; 0x02
    2150:	2b 81       	ldd	r18, Y+3	; 0x03
    2152:	3c 81       	ldd	r19, Y+4	; 0x04
    2154:	b9 01       	movw	r22, r18
    2156:	0e 94 3e 07 	call	0xe7c	; 0xe7c <gitem_insert_group>
#endif //CONFIG_MP
}
    215a:	0f 90       	pop	r0
    215c:	0f 90       	pop	r0
    215e:	0f 90       	pop	r0
    2160:	0f 90       	pop	r0
    2162:	cf 91       	pop	r28
    2164:	df 91       	pop	r29
    2166:	08 95       	ret

00002168 <sig_signal_isr>:
    enable_interrupts();
}
//========================================================================================
// Тоже самое что и предыдущие, олько для вызова из обработчиков прерываний и из критических секций
void sig_signal_isr( sig_t * sig )
{
    2168:	df 93       	push	r29
    216a:	cf 93       	push	r28
    216c:	00 d0       	rcall	.+0      	; 0x216e <sig_signal_isr+0x6>
    216e:	00 d0       	rcall	.+0      	; 0x2170 <sig_signal_isr+0x8>
    2170:	cd b7       	in	r28, 0x3d	; 61
    2172:	de b7       	in	r29, 0x3e	; 62
    2174:	9c 83       	std	Y+4, r25	; 0x04
    2176:	8b 83       	std	Y+3, r24	; 0x03
    }
    resched(core);// Перепланировка
    spin_unlock( &proc->lock );// Освобождение блокировки процесса
    spin_unlock( &sig->lock );// Освобождение блокировки сигнала
#else
    if( ((xlist_t *)sig)->index == (index_t)0 )return;
    2178:	eb 81       	ldd	r30, Y+3	; 0x03
    217a:	fc 81       	ldd	r31, Y+4	; 0x04
    217c:	80 89       	ldd	r24, Z+16	; 0x10
    217e:	88 23       	and	r24, r24
    2180:	a9 f0       	breq	.+42     	; 0x21ac <sig_signal_isr+0x44>
    proc_t * proc = (proc_t *)xlist_head( (xlist_t *)sig );
    2182:	8b 81       	ldd	r24, Y+3	; 0x03
    2184:	9c 81       	ldd	r25, Y+4	; 0x04
    2186:	0e 94 7f 11 	call	0x22fe	; 0x22fe <xlist_head>
    218a:	9a 83       	std	Y+2, r25	; 0x02
    218c:	89 83       	std	Y+1, r24	; 0x01
    gitem_fast_cut( (gitem_t *)proc );
    218e:	89 81       	ldd	r24, Y+1	; 0x01
    2190:	9a 81       	ldd	r25, Y+2	; 0x02
    2192:	0e 94 b9 07 	call	0xf72	; 0xf72 <gitem_fast_cut>
    gitem_insert( (gitem_t *)proc, kernel.sched.ready );
    2196:	89 81       	ldd	r24, Y+1	; 0x01
    2198:	9a 81       	ldd	r25, Y+2	; 0x02
    219a:	20 91 20 02 	lds	r18, 0x0220
    219e:	30 91 21 02 	lds	r19, 0x0221
    21a2:	b9 01       	movw	r22, r18
    21a4:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <gitem_insert>
    resched();
    21a8:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
#endif //CONFIG_MP
}
    21ac:	0f 90       	pop	r0
    21ae:	0f 90       	pop	r0
    21b0:	0f 90       	pop	r0
    21b2:	0f 90       	pop	r0
    21b4:	cf 91       	pop	r28
    21b6:	df 91       	pop	r29
    21b8:	08 95       	ret

000021ba <sig_broadcast_isr>:
//----------------------------------------------------------------------------------------
void sig_broadcast_isr( sig_t * sig )
{
    21ba:	df 93       	push	r29
    21bc:	cf 93       	push	r28
    21be:	00 d0       	rcall	.+0      	; 0x21c0 <sig_broadcast_isr+0x6>
    21c0:	cd b7       	in	r28, 0x3d	; 61
    21c2:	de b7       	in	r29, 0x3e	; 62
    21c4:	9a 83       	std	Y+2, r25	; 0x02
    21c6:	89 83       	std	Y+1, r24	; 0x01

        resched(core);
    }
    spin_unlock( &sig->lock );
#else
    gitem_xlist_merge( (xlist_t *)sig, kernel.sched.ready );
    21c8:	20 91 20 02 	lds	r18, 0x0220
    21cc:	30 91 21 02 	lds	r19, 0x0221
    21d0:	89 81       	ldd	r24, Y+1	; 0x01
    21d2:	9a 81       	ldd	r25, Y+2	; 0x02
    21d4:	b9 01       	movw	r22, r18
    21d6:	0e 94 56 08 	call	0x10ac	; 0x10ac <gitem_xlist_merge>
    resched();
    21da:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
#endif //CONFIG_MP
}
    21de:	0f 90       	pop	r0
    21e0:	0f 90       	pop	r0
    21e2:	cf 91       	pop	r28
    21e4:	df 91       	pop	r29
    21e6:	08 95       	ret

000021e8 <_clear_timer>:
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
//========================================================================================
void _clear_timer(timer_t * t)
{
    21e8:	df 93       	push	r29
    21ea:	cf 93       	push	r28
    21ec:	00 d0       	rcall	.+0      	; 0x21ee <_clear_timer+0x6>
    21ee:	cd b7       	in	r28, 0x3d	; 61
    21f0:	de b7       	in	r29, 0x3e	; 62
    21f2:	9a 83       	std	Y+2, r25	; 0x02
    21f4:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    core_id_t current_core = _enter_crit_sec();
    spin_lock( &kernel.timer_lock );
#else
    enter_crit_sec();
    21f6:	0e 94 8c 06 	call	0xd18	; 0xd18 <enter_crit_sec>
#endif //CONFIG_MP
    *t = kernel.timer;
    21fa:	80 91 78 02 	lds	r24, 0x0278
    21fe:	90 91 79 02 	lds	r25, 0x0279
    2202:	e9 81       	ldd	r30, Y+1	; 0x01
    2204:	fa 81       	ldd	r31, Y+2	; 0x02
    2206:	91 83       	std	Z+1, r25	; 0x01
    2208:	80 83       	st	Z, r24
#ifdef CONFIG_MP
    spin_unlock( &kernel.timer_lock );
    _exit_crit_sec(current_core);
#else
    exit_crit_sec();
    220a:	0e 94 9e 06 	call	0xd3c	; 0xd3c <exit_crit_sec>
#endif //CONFIG_MP
}
    220e:	0f 90       	pop	r0
    2210:	0f 90       	pop	r0
    2212:	cf 91       	pop	r28
    2214:	df 91       	pop	r29
    2216:	08 95       	ret

00002218 <_timer>:
//----------------------------------------------------------------------------------------
timer_t _timer(timer_t t)
{
    2218:	df 93       	push	r29
    221a:	cf 93       	push	r28
    221c:	00 d0       	rcall	.+0      	; 0x221e <_timer+0x6>
    221e:	00 d0       	rcall	.+0      	; 0x2220 <_timer+0x8>
    2220:	cd b7       	in	r28, 0x3d	; 61
    2222:	de b7       	in	r29, 0x3e	; 62
    2224:	9c 83       	std	Y+4, r25	; 0x04
    2226:	8b 83       	std	Y+3, r24	; 0x03
    timer_t ret;
#ifdef CONFIG_MP
    core_id_t current_core = _enter_crit_sec();
    spin_lock( &kernel.timer_lock );
#else
    enter_crit_sec();
    2228:	0e 94 8c 06 	call	0xd18	; 0xd18 <enter_crit_sec>
#endif //CONFIG_MP
    ret = kernel.timer - t;
    222c:	20 91 78 02 	lds	r18, 0x0278
    2230:	30 91 79 02 	lds	r19, 0x0279
    2234:	8b 81       	ldd	r24, Y+3	; 0x03
    2236:	9c 81       	ldd	r25, Y+4	; 0x04
    2238:	a9 01       	movw	r20, r18
    223a:	48 1b       	sub	r20, r24
    223c:	59 0b       	sbc	r21, r25
    223e:	ca 01       	movw	r24, r20
    2240:	9a 83       	std	Y+2, r25	; 0x02
    2242:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_unlock( &kernel.timer_lock );
    _exit_crit_sec(current_core);
#else
    exit_crit_sec();
    2244:	0e 94 9e 06 	call	0xd3c	; 0xd3c <exit_crit_sec>
#endif //CONFIG_MP
    return ret;
    2248:	89 81       	ldd	r24, Y+1	; 0x01
    224a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    224c:	0f 90       	pop	r0
    224e:	0f 90       	pop	r0
    2250:	0f 90       	pop	r0
    2252:	0f 90       	pop	r0
    2254:	cf 91       	pop	r28
    2256:	df 91       	pop	r29
    2258:	08 95       	ret

0000225a <wait_time>:

//----------------------------------------------------------------------------------------
void wait_time(timer_t time)
{
    225a:	df 93       	push	r29
    225c:	cf 93       	push	r28
    225e:	00 d0       	rcall	.+0      	; 0x2260 <wait_time+0x6>
    2260:	00 d0       	rcall	.+0      	; 0x2262 <wait_time+0x8>
    2262:	0f 92       	push	r0
    2264:	cd b7       	in	r28, 0x3d	; 61
    2266:	de b7       	in	r29, 0x3e	; 62
    2268:	9d 83       	std	Y+5, r25	; 0x05
    226a:	8c 83       	std	Y+4, r24	; 0x04
    timer_t tmr;
    bool_t roll=(bool_t)1;
    226c:	81 e0       	ldi	r24, 0x01	; 1
    226e:	89 83       	std	Y+1, r24	; 0x01
    CLEAR_TIMER(tmr);
    2270:	ce 01       	movw	r24, r28
    2272:	02 96       	adiw	r24, 0x02	; 2
    2274:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <_clear_timer>
    2278:	0d c0       	rjmp	.+26     	; 0x2294 <wait_time+0x3a>
    while((bool_t)roll)
    {
        roll = (bool_t)( TIMER(tmr) < (timer_t)time );
    227a:	8a 81       	ldd	r24, Y+2	; 0x02
    227c:	9b 81       	ldd	r25, Y+3	; 0x03
    227e:	0e 94 0c 11 	call	0x2218	; 0x2218 <_timer>
    2282:	9c 01       	movw	r18, r24
    2284:	19 82       	std	Y+1, r1	; 0x01
    2286:	8c 81       	ldd	r24, Y+4	; 0x04
    2288:	9d 81       	ldd	r25, Y+5	; 0x05
    228a:	28 17       	cp	r18, r24
    228c:	39 07       	cpc	r19, r25
    228e:	10 f4       	brcc	.+4      	; 0x2294 <wait_time+0x3a>
    2290:	81 e0       	ldi	r24, 0x01	; 1
    2292:	89 83       	std	Y+1, r24	; 0x01
void wait_time(timer_t time)
{
    timer_t tmr;
    bool_t roll=(bool_t)1;
    CLEAR_TIMER(tmr);
    while((bool_t)roll)
    2294:	89 81       	ldd	r24, Y+1	; 0x01
    2296:	88 23       	and	r24, r24
    2298:	81 f7       	brne	.-32     	; 0x227a <wait_time+0x20>
    {
        roll = (bool_t)( TIMER(tmr) < (timer_t)time );
    }
}
    229a:	0f 90       	pop	r0
    229c:	0f 90       	pop	r0
    229e:	0f 90       	pop	r0
    22a0:	0f 90       	pop	r0
    22a2:	0f 90       	pop	r0
    22a4:	cf 91       	pop	r28
    22a6:	df 91       	pop	r29
    22a8:	08 95       	ret

000022aa <xlist_init>:
**********************************************/
//Инициация
void xlist_init(
    xlist_t * xlist
)
{
    22aa:	df 93       	push	r29
    22ac:	cf 93       	push	r28
    22ae:	00 d0       	rcall	.+0      	; 0x22b0 <xlist_init+0x6>
    22b0:	00 d0       	rcall	.+0      	; 0x22b2 <xlist_init+0x8>
    22b2:	cd b7       	in	r28, 0x3d	; 61
    22b4:	de b7       	in	r29, 0x3e	; 62
    22b6:	9c 83       	std	Y+4, r25	; 0x04
    22b8:	8b 83       	std	Y+3, r24	; 0x03
    count_t i;
    //список пуст
    xlist->index = (index_t)0;
    22ba:	eb 81       	ldd	r30, Y+3	; 0x03
    22bc:	fc 81       	ldd	r31, Y+4	; 0x04
    22be:	10 8a       	std	Z+16, r1	; 0x10
    //обнуляем указатели
    for( i = 0; i < BITS_IN_INDEX_T; i++ )xlist->item[i] = (item_t *)0;
    22c0:	1a 82       	std	Y+2, r1	; 0x02
    22c2:	19 82       	std	Y+1, r1	; 0x01
    22c4:	10 c0       	rjmp	.+32     	; 0x22e6 <xlist_init+0x3c>
    22c6:	89 81       	ldd	r24, Y+1	; 0x01
    22c8:	9a 81       	ldd	r25, Y+2	; 0x02
    22ca:	2b 81       	ldd	r18, Y+3	; 0x03
    22cc:	3c 81       	ldd	r19, Y+4	; 0x04
    22ce:	88 0f       	add	r24, r24
    22d0:	99 1f       	adc	r25, r25
    22d2:	f9 01       	movw	r30, r18
    22d4:	e8 0f       	add	r30, r24
    22d6:	f9 1f       	adc	r31, r25
    22d8:	11 82       	std	Z+1, r1	; 0x01
    22da:	10 82       	st	Z, r1
    22dc:	89 81       	ldd	r24, Y+1	; 0x01
    22de:	9a 81       	ldd	r25, Y+2	; 0x02
    22e0:	01 96       	adiw	r24, 0x01	; 1
    22e2:	9a 83       	std	Y+2, r25	; 0x02
    22e4:	89 83       	std	Y+1, r24	; 0x01
    22e6:	89 81       	ldd	r24, Y+1	; 0x01
    22e8:	9a 81       	ldd	r25, Y+2	; 0x02
    22ea:	88 30       	cpi	r24, 0x08	; 8
    22ec:	91 05       	cpc	r25, r1
    22ee:	58 f3       	brcs	.-42     	; 0x22c6 <xlist_init+0x1c>
}
    22f0:	0f 90       	pop	r0
    22f2:	0f 90       	pop	r0
    22f4:	0f 90       	pop	r0
    22f6:	0f 90       	pop	r0
    22f8:	cf 91       	pop	r28
    22fa:	df 91       	pop	r29
    22fc:	08 95       	ret

000022fe <xlist_head>:
//===========================================================================
//Поиск головы списка
item_t * xlist_head(xlist_t * xlist)
{
    22fe:	df 93       	push	r29
    2300:	cf 93       	push	r28
    2302:	00 d0       	rcall	.+0      	; 0x2304 <xlist_head+0x6>
    2304:	00 d0       	rcall	.+0      	; 0x2306 <xlist_head+0x8>
    2306:	0f 92       	push	r0
    2308:	cd b7       	in	r28, 0x3d	; 61
    230a:	de b7       	in	r29, 0x3e	; 62
    230c:	9d 83       	std	Y+5, r25	; 0x05
    230e:	8c 83       	std	Y+4, r24	; 0x04
    item_t * ret_val = (item_t *)0;
    2310:	1b 82       	std	Y+3, r1	; 0x03
    2312:	1a 82       	std	Y+2, r1	; 0x02
    index_t index = xlist->index;
    2314:	ec 81       	ldd	r30, Y+4	; 0x04
    2316:	fd 81       	ldd	r31, Y+5	; 0x05
    2318:	80 89       	ldd	r24, Z+16	; 0x10
    231a:	89 83       	std	Y+1, r24	; 0x01

    if( index != (index_t)0 )
    231c:	89 81       	ldd	r24, Y+1	; 0x01
    231e:	88 23       	and	r24, r24
    2320:	81 f0       	breq	.+32     	; 0x2342 <xlist_head+0x44>
    {
        ret_val = xlist->item[ index_search( index ) ];
    2322:	89 81       	ldd	r24, Y+1	; 0x01
    2324:	0e 94 63 09 	call	0x12c6	; 0x12c6 <index_search>
    2328:	88 2f       	mov	r24, r24
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	2c 81       	ldd	r18, Y+4	; 0x04
    232e:	3d 81       	ldd	r19, Y+5	; 0x05
    2330:	88 0f       	add	r24, r24
    2332:	99 1f       	adc	r25, r25
    2334:	f9 01       	movw	r30, r18
    2336:	e8 0f       	add	r30, r24
    2338:	f9 1f       	adc	r31, r25
    233a:	80 81       	ld	r24, Z
    233c:	91 81       	ldd	r25, Z+1	; 0x01
    233e:	9b 83       	std	Y+3, r25	; 0x03
    2340:	8a 83       	std	Y+2, r24	; 0x02
    }
    return ret_val;
    2342:	8a 81       	ldd	r24, Y+2	; 0x02
    2344:	9b 81       	ldd	r25, Y+3	; 0x03
}
    2346:	0f 90       	pop	r0
    2348:	0f 90       	pop	r0
    234a:	0f 90       	pop	r0
    234c:	0f 90       	pop	r0
    234e:	0f 90       	pop	r0
    2350:	cf 91       	pop	r28
    2352:	df 91       	pop	r29
    2354:	08 95       	ret

00002356 <xlist_switch>:

//===========================================================================
// переключение указателя в массиве на следующий элемент, пригодится в планировщике
void xlist_switch(xlist_t * xlist, prio_t prio)
{
    2356:	df 93       	push	r29
    2358:	cf 93       	push	r28
    235a:	00 d0       	rcall	.+0      	; 0x235c <xlist_switch+0x6>
    235c:	00 d0       	rcall	.+0      	; 0x235e <xlist_switch+0x8>
    235e:	0f 92       	push	r0
    2360:	cd b7       	in	r28, 0x3d	; 61
    2362:	de b7       	in	r29, 0x3e	; 62
    2364:	9c 83       	std	Y+4, r25	; 0x04
    2366:	8b 83       	std	Y+3, r24	; 0x03
    2368:	6d 83       	std	Y+5, r22	; 0x05
    item_t ** current = xlist->item + prio;
    236a:	2b 81       	ldd	r18, Y+3	; 0x03
    236c:	3c 81       	ldd	r19, Y+4	; 0x04
    236e:	8d 81       	ldd	r24, Y+5	; 0x05
    2370:	88 2f       	mov	r24, r24
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	88 0f       	add	r24, r24
    2376:	99 1f       	adc	r25, r25
    2378:	82 0f       	add	r24, r18
    237a:	93 1f       	adc	r25, r19
    237c:	9a 83       	std	Y+2, r25	; 0x02
    237e:	89 83       	std	Y+1, r24	; 0x01
    *current = (*current)->next;
    2380:	e9 81       	ldd	r30, Y+1	; 0x01
    2382:	fa 81       	ldd	r31, Y+2	; 0x02
    2384:	01 90       	ld	r0, Z+
    2386:	f0 81       	ld	r31, Z
    2388:	e0 2d       	mov	r30, r0
    238a:	80 81       	ld	r24, Z
    238c:	91 81       	ldd	r25, Z+1	; 0x01
    238e:	e9 81       	ldd	r30, Y+1	; 0x01
    2390:	fa 81       	ldd	r31, Y+2	; 0x02
    2392:	91 83       	std	Z+1, r25	; 0x01
    2394:	80 83       	st	Z, r24
    //*current = (item_t *)*(item_t **)*(item_t ***)current;
}
    2396:	0f 90       	pop	r0
    2398:	0f 90       	pop	r0
    239a:	0f 90       	pop	r0
    239c:	0f 90       	pop	r0
    239e:	0f 90       	pop	r0
    23a0:	cf 91       	pop	r28
    23a2:	df 91       	pop	r29
    23a4:	08 95       	ret

000023a6 <raise_syscall_interrupt>:
/*
 */
#include <bugurt.h>

void raise_syscall_interrupt(void)
{
    23a6:	df 93       	push	r29
    23a8:	cf 93       	push	r28
    23aa:	cd b7       	in	r28, 0x3d	; 61
    23ac:	de b7       	in	r29, 0x3e	; 62
    R2_on();
    23ae:	ab e2       	ldi	r26, 0x2B	; 43
    23b0:	b0 e0       	ldi	r27, 0x00	; 0
    23b2:	eb e2       	ldi	r30, 0x2B	; 43
    23b4:	f0 e0       	ldi	r31, 0x00	; 0
    23b6:	80 81       	ld	r24, Z
    23b8:	84 60       	ori	r24, 0x04	; 4
    23ba:	8c 93       	st	X, r24
    G2_off();
    23bc:	ab e2       	ldi	r26, 0x2B	; 43
    23be:	b0 e0       	ldi	r27, 0x00	; 0
    23c0:	eb e2       	ldi	r30, 0x2B	; 43
    23c2:	f0 e0       	ldi	r31, 0x00	; 0
    23c4:	80 81       	ld	r24, Z
    23c6:	87 7f       	andi	r24, 0xF7	; 247
    23c8:	8c 93       	st	X, r24
    R2_off();
    23ca:	ab e2       	ldi	r26, 0x2B	; 43
    23cc:	b0 e0       	ldi	r27, 0x00	; 0
    23ce:	eb e2       	ldi	r30, 0x2B	; 43
    23d0:	f0 e0       	ldi	r31, 0x00	; 0
    23d2:	80 81       	ld	r24, Z
    23d4:	8b 7f       	andi	r24, 0xFB	; 251
    23d6:	8c 93       	st	X, r24
    G2_on();
    23d8:	ab e2       	ldi	r26, 0x2B	; 43
    23da:	b0 e0       	ldi	r27, 0x00	; 0
    23dc:	eb e2       	ldi	r30, 0x2B	; 43
    23de:	f0 e0       	ldi	r31, 0x00	; 0
    23e0:	80 81       	ld	r24, Z
    23e2:	88 60       	ori	r24, 0x08	; 8
    23e4:	8c 93       	st	X, r24
}
    23e6:	cf 91       	pop	r28
    23e8:	df 91       	pop	r29
    23ea:	08 95       	ret

000023ec <start_scheduler>:

void start_scheduler( void ){
    23ec:	df 93       	push	r29
    23ee:	cf 93       	push	r28
    23f0:	cd b7       	in	r28, 0x3d	; 61
    23f2:	de b7       	in	r29, 0x3e	; 62
    TIMSK2 |= 0x02;
    23f4:	a0 e7       	ldi	r26, 0x70	; 112
    23f6:	b0 e0       	ldi	r27, 0x00	; 0
    23f8:	e0 e7       	ldi	r30, 0x70	; 112
    23fa:	f0 e0       	ldi	r31, 0x00	; 0
    23fc:	80 81       	ld	r24, Z
    23fe:	82 60       	ori	r24, 0x02	; 2
    2400:	8c 93       	st	X, r24
    EIMSK |= 0x02;
    2402:	ad e3       	ldi	r26, 0x3D	; 61
    2404:	b0 e0       	ldi	r27, 0x00	; 0
    2406:	ed e3       	ldi	r30, 0x3D	; 61
    2408:	f0 e0       	ldi	r31, 0x00	; 0
    240a:	80 81       	ld	r24, Z
    240c:	82 60       	ori	r24, 0x02	; 2
    240e:	8c 93       	st	X, r24
    EIFR |= 0x02;
    2410:	ac e3       	ldi	r26, 0x3C	; 60
    2412:	b0 e0       	ldi	r27, 0x00	; 0
    2414:	ec e3       	ldi	r30, 0x3C	; 60
    2416:	f0 e0       	ldi	r31, 0x00	; 0
    2418:	80 81       	ld	r24, Z
    241a:	82 60       	ori	r24, 0x02	; 2
    241c:	8c 93       	st	X, r24
}
    241e:	cf 91       	pop	r28
    2420:	df 91       	pop	r29
    2422:	08 95       	ret

00002424 <blink_1>:
    TIMSK2 &= ~0x02;
    EIMSK &= ~0x02;
}

///----------------------------------------------------------------------------------------
void blink_1(void * t) {PORTB ^= 0x10;}
    2424:	df 93       	push	r29
    2426:	cf 93       	push	r28
    2428:	00 d0       	rcall	.+0      	; 0x242a <blink_1+0x6>
    242a:	cd b7       	in	r28, 0x3d	; 61
    242c:	de b7       	in	r29, 0x3e	; 62
    242e:	9a 83       	std	Y+2, r25	; 0x02
    2430:	89 83       	std	Y+1, r24	; 0x01
    2432:	a5 e2       	ldi	r26, 0x25	; 37
    2434:	b0 e0       	ldi	r27, 0x00	; 0
    2436:	e5 e2       	ldi	r30, 0x25	; 37
    2438:	f0 e0       	ldi	r31, 0x00	; 0
    243a:	90 81       	ld	r25, Z
    243c:	80 e1       	ldi	r24, 0x10	; 16
    243e:	89 27       	eor	r24, r25
    2440:	8c 93       	st	X, r24
    2442:	0f 90       	pop	r0
    2444:	0f 90       	pop	r0
    2446:	cf 91       	pop	r28
    2448:	df 91       	pop	r29
    244a:	08 95       	ret

0000244c <blink_2>:
void blink_2(void * t) {PORTB ^= 0x08;}
    244c:	df 93       	push	r29
    244e:	cf 93       	push	r28
    2450:	00 d0       	rcall	.+0      	; 0x2452 <blink_2+0x6>
    2452:	cd b7       	in	r28, 0x3d	; 61
    2454:	de b7       	in	r29, 0x3e	; 62
    2456:	9a 83       	std	Y+2, r25	; 0x02
    2458:	89 83       	std	Y+1, r24	; 0x01
    245a:	a5 e2       	ldi	r26, 0x25	; 37
    245c:	b0 e0       	ldi	r27, 0x00	; 0
    245e:	e5 e2       	ldi	r30, 0x25	; 37
    2460:	f0 e0       	ldi	r31, 0x00	; 0
    2462:	90 81       	ld	r25, Z
    2464:	88 e0       	ldi	r24, 0x08	; 8
    2466:	89 27       	eor	r24, r25
    2468:	8c 93       	st	X, r24
    246a:	0f 90       	pop	r0
    246c:	0f 90       	pop	r0
    246e:	cf 91       	pop	r28
    2470:	df 91       	pop	r29
    2472:	08 95       	ret

00002474 <blink_3>:
void blink_3(void * t) {PORTB ^= 0x04;}
    2474:	df 93       	push	r29
    2476:	cf 93       	push	r28
    2478:	00 d0       	rcall	.+0      	; 0x247a <blink_3+0x6>
    247a:	cd b7       	in	r28, 0x3d	; 61
    247c:	de b7       	in	r29, 0x3e	; 62
    247e:	9a 83       	std	Y+2, r25	; 0x02
    2480:	89 83       	std	Y+1, r24	; 0x01
    2482:	a5 e2       	ldi	r26, 0x25	; 37
    2484:	b0 e0       	ldi	r27, 0x00	; 0
    2486:	e5 e2       	ldi	r30, 0x25	; 37
    2488:	f0 e0       	ldi	r31, 0x00	; 0
    248a:	90 81       	ld	r25, Z
    248c:	84 e0       	ldi	r24, 0x04	; 4
    248e:	89 27       	eor	r24, r25
    2490:	8c 93       	st	X, r24
    2492:	0f 90       	pop	r0
    2494:	0f 90       	pop	r0
    2496:	cf 91       	pop	r28
    2498:	df 91       	pop	r29
    249a:	08 95       	ret

0000249c <blink_4>:
void blink_4(void * t) {PORTB ^= 0x02;}
    249c:	df 93       	push	r29
    249e:	cf 93       	push	r28
    24a0:	00 d0       	rcall	.+0      	; 0x24a2 <blink_4+0x6>
    24a2:	cd b7       	in	r28, 0x3d	; 61
    24a4:	de b7       	in	r29, 0x3e	; 62
    24a6:	9a 83       	std	Y+2, r25	; 0x02
    24a8:	89 83       	std	Y+1, r24	; 0x01
    24aa:	a5 e2       	ldi	r26, 0x25	; 37
    24ac:	b0 e0       	ldi	r27, 0x00	; 0
    24ae:	e5 e2       	ldi	r30, 0x25	; 37
    24b0:	f0 e0       	ldi	r31, 0x00	; 0
    24b2:	90 81       	ld	r25, Z
    24b4:	82 e0       	ldi	r24, 0x02	; 2
    24b6:	89 27       	eor	r24, r25
    24b8:	8c 93       	st	X, r24
    24ba:	0f 90       	pop	r0
    24bc:	0f 90       	pop	r0
    24be:	cf 91       	pop	r28
    24c0:	df 91       	pop	r29
    24c2:	08 95       	ret

000024c4 <blink_12>:
void blink_7(void * t) {PORTC ^= 0x10;}
void blink_8(void * t) {PORTC ^= 0x08;}
void blink_9(void * t) {PORTC ^= 0x04;}
void blink_10(void * t) {PORTC ^= 0x02;}
void blink_11(void * t) {PORTC ^= 0x01;}
void blink_12(void * t) {
    24c4:	df 93       	push	r29
    24c6:	cf 93       	push	r28
    24c8:	00 d0       	rcall	.+0      	; 0x24ca <blink_12+0x6>
    24ca:	cd b7       	in	r28, 0x3d	; 61
    24cc:	de b7       	in	r29, 0x3e	; 62
    24ce:	9a 83       	std	Y+2, r25	; 0x02
    24d0:	89 83       	std	Y+1, r24	; 0x01
    PORTB ^= 0x20;
    24d2:	a5 e2       	ldi	r26, 0x25	; 37
    24d4:	b0 e0       	ldi	r27, 0x00	; 0
    24d6:	e5 e2       	ldi	r30, 0x25	; 37
    24d8:	f0 e0       	ldi	r31, 0x00	; 0
    24da:	90 81       	ld	r25, Z
    24dc:	80 e2       	ldi	r24, 0x20	; 32
    24de:	89 27       	eor	r24, r25
    24e0:	8c 93       	st	X, r24
    blink_G3();
    24e2:	ab e2       	ldi	r26, 0x2B	; 43
    24e4:	b0 e0       	ldi	r27, 0x00	; 0
    24e6:	eb e2       	ldi	r30, 0x2B	; 43
    24e8:	f0 e0       	ldi	r31, 0x00	; 0
    24ea:	90 81       	ld	r25, Z
    24ec:	80 e4       	ldi	r24, 0x40	; 64
    24ee:	89 27       	eor	r24, r25
    24f0:	8c 93       	st	X, r24
    blink_R3();
    24f2:	ab e2       	ldi	r26, 0x2B	; 43
    24f4:	b0 e0       	ldi	r27, 0x00	; 0
    24f6:	eb e2       	ldi	r30, 0x2B	; 43
    24f8:	f0 e0       	ldi	r31, 0x00	; 0
    24fa:	90 81       	ld	r25, Z
    24fc:	80 e2       	ldi	r24, 0x20	; 32
    24fe:	89 27       	eor	r24, r25
    2500:	8c 93       	st	X, r24
    }
    2502:	0f 90       	pop	r0
    2504:	0f 90       	pop	r0
    2506:	cf 91       	pop	r28
    2508:	df 91       	pop	r29
    250a:	08 95       	ret

0000250c <main0>:

proc_t proc[4];
stack_t stack[4][128];

void main0(void * t)
{
    250c:	df 93       	push	r29
    250e:	cf 93       	push	r28
    2510:	00 d0       	rcall	.+0      	; 0x2512 <main0+0x6>
    2512:	cd b7       	in	r28, 0x3d	; 61
    2514:	de b7       	in	r29, 0x3e	; 62
    2516:	9a 83       	std	Y+2, r25	; 0x02
    2518:	89 83       	std	Y+1, r24	; 0x01
    while(1)
    {
        wait_time(500);
    251a:	84 ef       	ldi	r24, 0xF4	; 244
    251c:	91 e0       	ldi	r25, 0x01	; 1
    251e:	0e 94 2d 11 	call	0x225a	; 0x225a <wait_time>
    2522:	fb cf       	rjmp	.-10     	; 0x251a <main0+0xe>

00002524 <main1>:
    }
}
void main1(void * t)
{
    2524:	df 93       	push	r29
    2526:	cf 93       	push	r28
    2528:	00 d0       	rcall	.+0      	; 0x252a <main1+0x6>
    252a:	cd b7       	in	r28, 0x3d	; 61
    252c:	de b7       	in	r29, 0x3e	; 62
    252e:	9a 83       	std	Y+2, r25	; 0x02
    2530:	89 83       	std	Y+1, r24	; 0x01
    while(1)
    {
        wait_time(500);
    2532:	84 ef       	ldi	r24, 0xF4	; 244
    2534:	91 e0       	ldi	r25, 0x01	; 1
    2536:	0e 94 2d 11 	call	0x225a	; 0x225a <wait_time>
    253a:	fb cf       	rjmp	.-10     	; 0x2532 <main1+0xe>

0000253c <main2>:
    }
}
void main2(void * t)
{
    253c:	df 93       	push	r29
    253e:	cf 93       	push	r28
    2540:	00 d0       	rcall	.+0      	; 0x2542 <main2+0x6>
    2542:	cd b7       	in	r28, 0x3d	; 61
    2544:	de b7       	in	r29, 0x3e	; 62
    2546:	9a 83       	std	Y+2, r25	; 0x02
    2548:	89 83       	std	Y+1, r24	; 0x01
    while(1)
    {
        wait_time(1);
    254a:	81 e0       	ldi	r24, 0x01	; 1
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	0e 94 2d 11 	call	0x225a	; 0x225a <wait_time>
        proc_reset_watchdog();
    2552:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <proc_reset_watchdog>
        proc_self_stop();
    2556:	0e 94 c5 03 	call	0x78a	; 0x78a <proc_self_stop>
    255a:	f7 cf       	rjmp	.-18     	; 0x254a <main2+0xe>

0000255c <main3>:
    255c:	df 93       	push	r29
    255e:	cf 93       	push	r28
    2560:	00 d0       	rcall	.+0      	; 0x2562 <main3+0x6>
    2562:	cd b7       	in	r28, 0x3d	; 61
    2564:	de b7       	in	r29, 0x3e	; 62
    2566:	9a 83       	std	Y+2, r25	; 0x02
    2568:	89 83       	std	Y+1, r24	; 0x01
    256a:	84 ef       	ldi	r24, 0xF4	; 244
    256c:	91 e0       	ldi	r25, 0x01	; 1
    256e:	0e 94 2d 11 	call	0x225a	; 0x225a <wait_time>
    2572:	0f 90       	pop	r0
    2574:	0f 90       	pop	r0
    2576:	cf 91       	pop	r28
    2578:	df 91       	pop	r29
    257a:	08 95       	ret

0000257c <idle_main>:
void main3(void * t)
{
    wait_time(500);
}
void idle_main(void * t)
{
    257c:	8f 92       	push	r8
    257e:	af 92       	push	r10
    2580:	bf 92       	push	r11
    2582:	cf 92       	push	r12
    2584:	ef 92       	push	r14
    2586:	ff 92       	push	r15
    2588:	0f 93       	push	r16
    258a:	1f 93       	push	r17
    258c:	df 93       	push	r29
    258e:	cf 93       	push	r28
    2590:	00 d0       	rcall	.+0      	; 0x2592 <idle_main+0x16>
    2592:	cd b7       	in	r28, 0x3d	; 61
    2594:	de b7       	in	r29, 0x3e	; 62
    2596:	9a 83       	std	Y+2, r25	; 0x02
    2598:	89 83       	std	Y+1, r24	; 0x01
    // Insert code
    proc_init(&proc[3], main3, blink_4, blink_4, 0, &stack[3][127], 3, 4, 0);
    259a:	82 e3       	ldi	r24, 0x32	; 50
    259c:	93 e0       	ldi	r25, 0x03	; 3
    259e:	dc 01       	movw	r26, r24
    25a0:	a1 50       	subi	r26, 0x01	; 1
    25a2:	be 4f       	sbci	r27, 0xFE	; 254
    25a4:	84 e0       	ldi	r24, 0x04	; 4
    25a6:	93 e0       	ldi	r25, 0x03	; 3
    25a8:	2e ea       	ldi	r18, 0xAE	; 174
    25aa:	32 e1       	ldi	r19, 0x12	; 18
    25ac:	4e e4       	ldi	r20, 0x4E	; 78
    25ae:	52 e1       	ldi	r21, 0x12	; 18
    25b0:	ee e4       	ldi	r30, 0x4E	; 78
    25b2:	f2 e1       	ldi	r31, 0x12	; 18
    25b4:	b9 01       	movw	r22, r18
    25b6:	9f 01       	movw	r18, r30
    25b8:	00 e0       	ldi	r16, 0x00	; 0
    25ba:	10 e0       	ldi	r17, 0x00	; 0
    25bc:	7d 01       	movw	r14, r26
    25be:	0f 2e       	mov	r0, r31
    25c0:	f3 e0       	ldi	r31, 0x03	; 3
    25c2:	cf 2e       	mov	r12, r31
    25c4:	f0 2d       	mov	r31, r0
    25c6:	aa 24       	eor	r10, r10
    25c8:	bb 24       	eor	r11, r11
    25ca:	68 94       	set
    25cc:	a2 f8       	bld	r10, 2
    25ce:	88 24       	eor	r8, r8
    25d0:	0e 94 ba 02 	call	0x574	; 0x574 <proc_init>
    proc_run( &proc[3] );
    25d4:	84 e0       	ldi	r24, 0x04	; 4
    25d6:	93 e0       	ldi	r25, 0x03	; 3
    25d8:	0e 94 3d 03 	call	0x67a	; 0x67a <proc_run>
    wait_time(1000);
    25dc:	88 ee       	ldi	r24, 0xE8	; 232
    25de:	93 e0       	ldi	r25, 0x03	; 3
    25e0:	0e 94 2d 11 	call	0x225a	; 0x225a <wait_time>
    proc_run( &proc[3] );
    25e4:	84 e0       	ldi	r24, 0x04	; 4
    25e6:	93 e0       	ldi	r25, 0x03	; 3
    25e8:	0e 94 3d 03 	call	0x67a	; 0x67a <proc_run>
    wait_time(1000);
    25ec:	88 ee       	ldi	r24, 0xE8	; 232
    25ee:	93 e0       	ldi	r25, 0x03	; 3
    25f0:	0e 94 2d 11 	call	0x225a	; 0x225a <wait_time>
    proc_restart( &proc[3] );
    25f4:	84 e0       	ldi	r24, 0x04	; 4
    25f6:	93 e0       	ldi	r25, 0x03	; 3
    25f8:	0e 94 75 03 	call	0x6ea	; 0x6ea <proc_restart>
    wait_time(500);
    25fc:	84 ef       	ldi	r24, 0xF4	; 244
    25fe:	91 e0       	ldi	r25, 0x01	; 1
    2600:	0e 94 2d 11 	call	0x225a	; 0x225a <wait_time>
    proc_run( &proc[3] );
    2604:	84 e0       	ldi	r24, 0x04	; 4
    2606:	93 e0       	ldi	r25, 0x03	; 3
    2608:	0e 94 3d 03 	call	0x67a	; 0x67a <proc_run>
    while(1)
    {
         wait_time(1000);
    260c:	88 ee       	ldi	r24, 0xE8	; 232
    260e:	93 e0       	ldi	r25, 0x03	; 3
    2610:	0e 94 2d 11 	call	0x225a	; 0x225a <wait_time>
         proc_run(&proc[2]);
    2614:	86 ed       	ldi	r24, 0xD6	; 214
    2616:	92 e0       	ldi	r25, 0x02	; 2
    2618:	0e 94 3d 03 	call	0x67a	; 0x67a <proc_run>
    261c:	f7 cf       	rjmp	.-18     	; 0x260c <idle_main+0x90>

0000261e <main>:
    }
}

int main(void)
{
    261e:	8f 92       	push	r8
    2620:	af 92       	push	r10
    2622:	bf 92       	push	r11
    2624:	cf 92       	push	r12
    2626:	ef 92       	push	r14
    2628:	ff 92       	push	r15
    262a:	0f 93       	push	r16
    262c:	1f 93       	push	r17
    262e:	df 93       	push	r29
    2630:	cf 93       	push	r28
    2632:	cd b7       	in	r28, 0x3d	; 61
    2634:	de b7       	in	r29, 0x3e	; 62
    init_bugurt();
    2636:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <init_bugurt>

    TCCR2A = 0x02;//
    263a:	e0 eb       	ldi	r30, 0xB0	; 176
    263c:	f0 e0       	ldi	r31, 0x00	; 0
    263e:	82 e0       	ldi	r24, 0x02	; 2
    2640:	80 83       	st	Z, r24
    TCCR2B = 0x05;// prescaler=128
    2642:	e1 eb       	ldi	r30, 0xB1	; 177
    2644:	f0 e0       	ldi	r31, 0x00	; 0
    2646:	85 e0       	ldi	r24, 0x05	; 5
    2648:	80 83       	st	Z, r24
    OCR2A  = 124;
    264a:	e3 eb       	ldi	r30, 0xB3	; 179
    264c:	f0 e0       	ldi	r31, 0x00	; 0
    264e:	8c e7       	ldi	r24, 0x7C	; 124
    2650:	80 83       	st	Z, r24
    OCR2B  = 0x00;
    2652:	e4 eb       	ldi	r30, 0xB4	; 180
    2654:	f0 e0       	ldi	r31, 0x00	; 0
    2656:	10 82       	st	Z, r1
    TIMSK2 = 0x00; // shceduler not started
    2658:	e0 e7       	ldi	r30, 0x70	; 112
    265a:	f0 e0       	ldi	r31, 0x00	; 0
    265c:	10 82       	st	Z, r1
    TIFR2  = 0x00;
    265e:	e7 e3       	ldi	r30, 0x37	; 55
    2660:	f0 e0       	ldi	r31, 0x00	; 0
    2662:	10 82       	st	Z, r1

    EICRA = 0x08; //falling edge
    2664:	e9 e6       	ldi	r30, 0x69	; 105
    2666:	f0 e0       	ldi	r31, 0x00	; 0
    2668:	88 e0       	ldi	r24, 0x08	; 8
    266a:	80 83       	st	Z, r24
    EIMSK = 0x00; //resched generates int1, mask 0x02
    266c:	ed e3       	ldi	r30, 0x3D	; 61
    266e:	f0 e0       	ldi	r31, 0x00	; 0
    2670:	10 82       	st	Z, r1

    DDRB = 0x3F;
    2672:	e4 e2       	ldi	r30, 0x24	; 36
    2674:	f0 e0       	ldi	r31, 0x00	; 0
    2676:	8f e3       	ldi	r24, 0x3F	; 63
    2678:	80 83       	st	Z, r24
    PORTB = 0x00;
    267a:	e5 e2       	ldi	r30, 0x25	; 37
    267c:	f0 e0       	ldi	r31, 0x00	; 0
    267e:	10 82       	st	Z, r1
    DDRC = 0x3F;
    2680:	e7 e2       	ldi	r30, 0x27	; 39
    2682:	f0 e0       	ldi	r31, 0x00	; 0
    2684:	8f e3       	ldi	r24, 0x3F	; 63
    2686:	80 83       	st	Z, r24
    PORTC = 0x00;
    2688:	e8 e2       	ldi	r30, 0x28	; 40
    268a:	f0 e0       	ldi	r31, 0x00	; 0
    268c:	10 82       	st	Z, r1
    DDRD = 0xFE;
    268e:	ea e2       	ldi	r30, 0x2A	; 42
    2690:	f0 e0       	ldi	r31, 0x00	; 0
    2692:	8e ef       	ldi	r24, 0xFE	; 254
    2694:	80 83       	st	Z, r24
    PORTD = 0x00;
    2696:	eb e2       	ldi	r30, 0x2B	; 43
    2698:	f0 e0       	ldi	r31, 0x00	; 0
    269a:	10 82       	st	Z, r1

    G1_on();
    269c:	ab e2       	ldi	r26, 0x2B	; 43
    269e:	b0 e0       	ldi	r27, 0x00	; 0
    26a0:	eb e2       	ldi	r30, 0x2B	; 43
    26a2:	f0 e0       	ldi	r31, 0x00	; 0
    26a4:	80 81       	ld	r24, Z
    26a6:	80 61       	ori	r24, 0x10	; 16
    26a8:	8c 93       	st	X, r24
    G2_on();
    26aa:	ab e2       	ldi	r26, 0x2B	; 43
    26ac:	b0 e0       	ldi	r27, 0x00	; 0
    26ae:	eb e2       	ldi	r30, 0x2B	; 43
    26b0:	f0 e0       	ldi	r31, 0x00	; 0
    26b2:	80 81       	ld	r24, Z
    26b4:	88 60       	ori	r24, 0x08	; 8
    26b6:	8c 93       	st	X, r24
    R3_on();
    26b8:	ab e2       	ldi	r26, 0x2B	; 43
    26ba:	b0 e0       	ldi	r27, 0x00	; 0
    26bc:	eb e2       	ldi	r30, 0x2B	; 43
    26be:	f0 e0       	ldi	r31, 0x00	; 0
    26c0:	80 81       	ld	r24, Z
    26c2:	80 62       	ori	r24, 0x20	; 32
    26c4:	8c 93       	st	X, r24

    proc_init_isr(&proc[0], main0, blink_1, blink_1, 0, &stack[0][127], 1, 2, 0);
    26c6:	82 e3       	ldi	r24, 0x32	; 50
    26c8:	93 e0       	ldi	r25, 0x03	; 3
    26ca:	dc 01       	movw	r26, r24
    26cc:	a1 58       	subi	r26, 0x81	; 129
    26ce:	bf 4f       	sbci	r27, 0xFF	; 255
    26d0:	8a e7       	ldi	r24, 0x7A	; 122
    26d2:	92 e0       	ldi	r25, 0x02	; 2
    26d4:	26 e8       	ldi	r18, 0x86	; 134
    26d6:	32 e1       	ldi	r19, 0x12	; 18
    26d8:	42 e1       	ldi	r20, 0x12	; 18
    26da:	52 e1       	ldi	r21, 0x12	; 18
    26dc:	e2 e1       	ldi	r30, 0x12	; 18
    26de:	f2 e1       	ldi	r31, 0x12	; 18
    26e0:	b9 01       	movw	r22, r18
    26e2:	9f 01       	movw	r18, r30
    26e4:	00 e0       	ldi	r16, 0x00	; 0
    26e6:	10 e0       	ldi	r17, 0x00	; 0
    26e8:	7d 01       	movw	r14, r26
    26ea:	cc 24       	eor	r12, r12
    26ec:	c3 94       	inc	r12
    26ee:	aa 24       	eor	r10, r10
    26f0:	bb 24       	eor	r11, r11
    26f2:	68 94       	set
    26f4:	a1 f8       	bld	r10, 1
    26f6:	88 24       	eor	r8, r8
    26f8:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <proc_init_isr>
    proc_init_isr(&proc[1], main1, blink_2, blink_2, 0, &stack[1][127], 2, 3, 0);
    26fc:	82 e3       	ldi	r24, 0x32	; 50
    26fe:	93 e0       	ldi	r25, 0x03	; 3
    2700:	dc 01       	movw	r26, r24
    2702:	a1 50       	subi	r26, 0x01	; 1
    2704:	bf 4f       	sbci	r27, 0xFF	; 255
    2706:	88 ea       	ldi	r24, 0xA8	; 168
    2708:	92 e0       	ldi	r25, 0x02	; 2
    270a:	22 e9       	ldi	r18, 0x92	; 146
    270c:	32 e1       	ldi	r19, 0x12	; 18
    270e:	46 e2       	ldi	r20, 0x26	; 38
    2710:	52 e1       	ldi	r21, 0x12	; 18
    2712:	e6 e2       	ldi	r30, 0x26	; 38
    2714:	f2 e1       	ldi	r31, 0x12	; 18
    2716:	b9 01       	movw	r22, r18
    2718:	9f 01       	movw	r18, r30
    271a:	00 e0       	ldi	r16, 0x00	; 0
    271c:	10 e0       	ldi	r17, 0x00	; 0
    271e:	7d 01       	movw	r14, r26
    2720:	cc 24       	eor	r12, r12
    2722:	68 94       	set
    2724:	c1 f8       	bld	r12, 1
    2726:	0f 2e       	mov	r0, r31
    2728:	f3 e0       	ldi	r31, 0x03	; 3
    272a:	af 2e       	mov	r10, r31
    272c:	bb 24       	eor	r11, r11
    272e:	f0 2d       	mov	r31, r0
    2730:	88 24       	eor	r8, r8
    2732:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <proc_init_isr>
    proc_init_isr(&proc[2], main2, blink_3, blink_3, 0, &stack[2][127], 2, 4, 1);// Типа реального времени
    2736:	82 e3       	ldi	r24, 0x32	; 50
    2738:	93 e0       	ldi	r25, 0x03	; 3
    273a:	dc 01       	movw	r26, r24
    273c:	a1 58       	subi	r26, 0x81	; 129
    273e:	be 4f       	sbci	r27, 0xFE	; 254
    2740:	86 ed       	ldi	r24, 0xD6	; 214
    2742:	92 e0       	ldi	r25, 0x02	; 2
    2744:	2e e9       	ldi	r18, 0x9E	; 158
    2746:	32 e1       	ldi	r19, 0x12	; 18
    2748:	4a e3       	ldi	r20, 0x3A	; 58
    274a:	52 e1       	ldi	r21, 0x12	; 18
    274c:	ea e3       	ldi	r30, 0x3A	; 58
    274e:	f2 e1       	ldi	r31, 0x12	; 18
    2750:	b9 01       	movw	r22, r18
    2752:	9f 01       	movw	r18, r30
    2754:	00 e0       	ldi	r16, 0x00	; 0
    2756:	10 e0       	ldi	r17, 0x00	; 0
    2758:	7d 01       	movw	r14, r26
    275a:	cc 24       	eor	r12, r12
    275c:	68 94       	set
    275e:	c1 f8       	bld	r12, 1
    2760:	aa 24       	eor	r10, r10
    2762:	bb 24       	eor	r11, r11
    2764:	68 94       	set
    2766:	a2 f8       	bld	r10, 2
    2768:	88 24       	eor	r8, r8
    276a:	83 94       	inc	r8
    276c:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <proc_init_isr>
    //proc_init_isr(&proc[3], main3, blink_4, blink_4, 0, &stack[3][127], 3, 4, 0);

    kernel.idle.rs_hook = blink_12;
    2770:	82 e6       	ldi	r24, 0x62	; 98
    2772:	92 e1       	ldi	r25, 0x12	; 18
    2774:	90 93 6f 02 	sts	0x026F, r25
    2778:	80 93 6e 02 	sts	0x026E, r24
    kernel.idle.sv_hook = blink_12;
    277c:	82 e6       	ldi	r24, 0x62	; 98
    277e:	92 e1       	ldi	r25, 0x12	; 18
    2780:	90 93 6d 02 	sts	0x026D, r25
    2784:	80 93 6c 02 	sts	0x026C, r24

    proc_run_isr(&proc[0]);
    2788:	8a e7       	ldi	r24, 0x7A	; 122
    278a:	92 e0       	ldi	r25, 0x02	; 2
    278c:	0e 94 9e 0c 	call	0x193c	; 0x193c <proc_run_isr>
    proc_run_isr(&proc[1]);
    2790:	88 ea       	ldi	r24, 0xA8	; 168
    2792:	92 e0       	ldi	r25, 0x02	; 2
    2794:	0e 94 9e 0c 	call	0x193c	; 0x193c <proc_run_isr>
    proc_run_isr(&proc[2]);
    2798:	86 ed       	ldi	r24, 0xD6	; 214
    279a:	92 e0       	ldi	r25, 0x02	; 2
    279c:	0e 94 9e 0c 	call	0x193c	; 0x193c <proc_run_isr>
    //proc_run_isr(&proc[3]);

    start_bugurt();
    27a0:	0e 94 a0 01 	call	0x340	; 0x340 <start_bugurt>
    return 0;
    27a4:	80 e0       	ldi	r24, 0x00	; 0
    27a6:	90 e0       	ldi	r25, 0x00	; 0
}
    27a8:	cf 91       	pop	r28
    27aa:	df 91       	pop	r29
    27ac:	1f 91       	pop	r17
    27ae:	0f 91       	pop	r16
    27b0:	ff 90       	pop	r15
    27b2:	ef 90       	pop	r14
    27b4:	cf 90       	pop	r12
    27b6:	bf 90       	pop	r11
    27b8:	af 90       	pop	r10
    27ba:	8f 90       	pop	r8
    27bc:	08 95       	ret

000027be <_exit>:
    27be:	f8 94       	cli

000027c0 <__stop_program>:
    27c0:	ff cf       	rjmp	.-2      	; 0x27c0 <__stop_program>
