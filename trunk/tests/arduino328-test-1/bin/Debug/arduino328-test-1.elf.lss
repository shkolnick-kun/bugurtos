
bin/Debug/arduino328-test-1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00002710  000027a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002710  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000032a  00800102  00800102  000027a6  2**0
                  ALLOC
  3 .stab         00007170  00000000  00000000  000027a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000351d  00000000  00000000  00009918  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       8:	0c 94 88 01 	jmp	0x310	; 0x310 <__vector_2>
       c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__vector_7>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      54:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

00000068 <syscall_routine>:
      68:	2a 02 dd 02 16 03 4e 03 68 03 8e 03 f2 03 03 04     *.....N.h.......
      78:	13 04 23 04 33 04 43 04 5a 04 74 04 84 04 9a 04     ..#.3.C.Z.t.....
      88:	b4 04 ce 04                                         ....

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e0 e1       	ldi	r30, 0x10	; 16
      a0:	f7 e2       	ldi	r31, 0x27	; 39
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <.do_copy_data_start>

000000a4 <.do_copy_data_loop>:
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0

000000a8 <.do_copy_data_start>:
      a8:	a2 30       	cpi	r26, 0x02	; 2
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <.do_copy_data_loop>

000000ae <__do_clear_bss>:
      ae:	14 e0       	ldi	r17, 0x04	; 4
      b0:	a2 e0       	ldi	r26, 0x02	; 2
      b2:	b1 e0       	ldi	r27, 0x01	; 1
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	ac 32       	cpi	r26, 0x2C	; 44
      ba:	b1 07       	cpc	r27, r17
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 ae 12 	call	0x255c	; 0x255c <main>
      c2:	0c 94 86 13 	jmp	0x270c	; 0x270c <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <osbme_store_context>:
      ca:	2f 92       	push	r2
      cc:	2f b6       	in	r2, 0x3f	; 63
      ce:	2f 92       	push	r2
      d0:	3f 92       	push	r3
      d2:	4f 92       	push	r4
      d4:	5f 92       	push	r5
      d6:	6f 92       	push	r6
      d8:	7f 92       	push	r7
      da:	8f 92       	push	r8
      dc:	9f 92       	push	r9
      de:	af 92       	push	r10
      e0:	bf 92       	push	r11
      e2:	cf 92       	push	r12
      e4:	df 92       	push	r13
      e6:	ef 92       	push	r14
      e8:	ff 92       	push	r15
      ea:	0f 93       	push	r16
      ec:	1f 93       	push	r17
      ee:	2f 93       	push	r18
      f0:	3f 93       	push	r19
      f2:	4f 93       	push	r20
      f4:	5f 93       	push	r21
      f6:	6f 93       	push	r22
      f8:	7f 93       	push	r23
      fa:	8f 93       	push	r24
      fc:	9f 93       	push	r25
      fe:	af 93       	push	r26
     100:	bf 93       	push	r27
     102:	cf 93       	push	r28
     104:	df 93       	push	r29
     106:	ef 93       	push	r30
     108:	ff 93       	push	r31
     10a:	ed b7       	in	r30, 0x3d	; 61
     10c:	fe b7       	in	r31, 0x3e	; 62
     10e:	21 a1       	ldd	r18, Z+33	; 0x21
     110:	30 a1       	ldd	r19, Z+32	; 0x20
     112:	01 a2       	std	Z+33, r0	; 0x21
     114:	10 a2       	std	Z+32, r1	; 0x20
     116:	11 24       	eor	r1, r1
     118:	8d b7       	in	r24, 0x3d	; 61
     11a:	9e b7       	in	r25, 0x3e	; 62
     11c:	2f 93       	push	r18
     11e:	3f 93       	push	r19
     120:	08 95       	ret

00000122 <osbme_load_context>:
     122:	3f 91       	pop	r19
     124:	2f 91       	pop	r18
     126:	9e bf       	out	0x3e, r25	; 62
     128:	8d bf       	out	0x3d, r24	; 61
     12a:	fe b7       	in	r31, 0x3e	; 62
     12c:	ed b7       	in	r30, 0x3d	; 61
     12e:	10 a0       	ldd	r1, Z+32	; 0x20
     130:	01 a0       	ldd	r0, Z+33	; 0x21
     132:	30 a3       	std	Z+32, r19	; 0x20
     134:	21 a3       	std	Z+33, r18	; 0x21
     136:	ff 91       	pop	r31
     138:	ef 91       	pop	r30
     13a:	df 91       	pop	r29
     13c:	cf 91       	pop	r28
     13e:	bf 91       	pop	r27
     140:	af 91       	pop	r26
     142:	9f 91       	pop	r25
     144:	8f 91       	pop	r24
     146:	7f 91       	pop	r23
     148:	6f 91       	pop	r22
     14a:	5f 91       	pop	r21
     14c:	4f 91       	pop	r20
     14e:	3f 91       	pop	r19
     150:	2f 91       	pop	r18
     152:	1f 91       	pop	r17
     154:	0f 91       	pop	r16
     156:	ff 90       	pop	r15
     158:	ef 90       	pop	r14
     15a:	df 90       	pop	r13
     15c:	cf 90       	pop	r12
     15e:	bf 90       	pop	r11
     160:	af 90       	pop	r10
     162:	9f 90       	pop	r9
     164:	8f 90       	pop	r8
     166:	7f 90       	pop	r7
     168:	6f 90       	pop	r6
     16a:	5f 90       	pop	r5
     16c:	4f 90       	pop	r4
     16e:	3f 90       	pop	r3
     170:	2f 90       	pop	r2
     172:	2f be       	out	0x3f, r2	; 63
     174:	2f 90       	pop	r2
     176:	08 95       	ret

00000178 <osbme_set_stack_pointer>:
     178:	1f 90       	pop	r1
     17a:	0f 90       	pop	r0
     17c:	9e bf       	out	0x3e, r25	; 62
     17e:	8d bf       	out	0x3d, r24	; 61
     180:	0f 92       	push	r0
     182:	1f 92       	push	r1
     184:	11 24       	eor	r1, r1
     186:	08 95       	ret

00000188 <disable_interrupts>:
#include"bugurt_kernel.h"

// Платформеннозависимый код
// Просто функции, специфичные для AVR
void disable_interrupts(void)
{
     188:	df 93       	push	r29
     18a:	cf 93       	push	r28
     18c:	cd b7       	in	r28, 0x3d	; 61
     18e:	de b7       	in	r29, 0x3e	; 62
    cli();
     190:	f8 94       	cli
}
     192:	cf 91       	pop	r28
     194:	df 91       	pop	r29
     196:	08 95       	ret

00000198 <enable_interrupts>:
void enable_interrupts(void)
{
     198:	df 93       	push	r29
     19a:	cf 93       	push	r28
     19c:	cd b7       	in	r28, 0x3d	; 61
     19e:	de b7       	in	r29, 0x3e	; 62
    sei();
     1a0:	78 94       	sei
}
     1a2:	cf 91       	pop	r28
     1a4:	df 91       	pop	r29
     1a6:	08 95       	ret

000001a8 <current_proc>:

proc_t * current_proc(void)
{
     1a8:	df 93       	push	r29
     1aa:	cf 93       	push	r28
     1ac:	cd b7       	in	r28, 0x3d	; 61
     1ae:	de b7       	in	r29, 0x3e	; 62
    return kernel.sched.current_proc;
     1b0:	80 91 18 01 	lds	r24, 0x0118
     1b4:	90 91 19 01 	lds	r25, 0x0119
}
     1b8:	cf 91       	pop	r28
     1ba:	df 91       	pop	r29
     1bc:	08 95       	ret

000001be <proc_stack_init>:

stack_t * proc_stack_init(stack_t * sstart, code_t code, void * arg)
{
     1be:	df 93       	push	r29
     1c0:	cf 93       	push	r28
     1c2:	00 d0       	rcall	.+0      	; 0x1c4 <proc_stack_init+0x6>
     1c4:	00 d0       	rcall	.+0      	; 0x1c6 <proc_stack_init+0x8>
     1c6:	00 d0       	rcall	.+0      	; 0x1c8 <proc_stack_init+0xa>
     1c8:	cd b7       	in	r28, 0x3d	; 61
     1ca:	de b7       	in	r29, 0x3e	; 62
     1cc:	9a 83       	std	Y+2, r25	; 0x02
     1ce:	89 83       	std	Y+1, r24	; 0x01
     1d0:	7c 83       	std	Y+4, r23	; 0x04
     1d2:	6b 83       	std	Y+3, r22	; 0x03
     1d4:	5e 83       	std	Y+6, r21	; 0x06
     1d6:	4d 83       	std	Y+5, r20	; 0x05
    return (stack_t *)osbme_init_stack( (void *)sstart, (osbme_code_t)code, (void *)arg );
     1d8:	89 81       	ldd	r24, Y+1	; 0x01
     1da:	9a 81       	ldd	r25, Y+2	; 0x02
     1dc:	2b 81       	ldd	r18, Y+3	; 0x03
     1de:	3c 81       	ldd	r19, Y+4	; 0x04
     1e0:	4d 81       	ldd	r20, Y+5	; 0x05
     1e2:	5e 81       	ldd	r21, Y+6	; 0x06
     1e4:	b9 01       	movw	r22, r18
     1e6:	0e 94 de 04 	call	0x9bc	; 0x9bc <osbme_init_stack>
}
     1ea:	26 96       	adiw	r28, 0x06	; 6
     1ec:	0f b6       	in	r0, 0x3f	; 63
     1ee:	f8 94       	cli
     1f0:	de bf       	out	0x3e, r29	; 62
     1f2:	0f be       	out	0x3f, r0	; 63
     1f4:	cd bf       	out	0x3d, r28	; 61
     1f6:	cf 91       	pop	r28
     1f8:	df 91       	pop	r29
     1fa:	08 95       	ret

000001fc <resched>:

// Состояние ядра, выполняем перепланиировку
unsigned char kernel_state = KRN_FLG_RESCHED;
// Функция перепланировки
void resched( void )
{
     1fc:	df 93       	push	r29
     1fe:	cf 93       	push	r28
     200:	cd b7       	in	r28, 0x3d	; 61
     202:	de b7       	in	r29, 0x3e	; 62
    kernel_state |= KRN_FLG_RESCHED;
     204:	80 91 00 01 	lds	r24, 0x0100
     208:	81 60       	ori	r24, 0x01	; 1
     20a:	80 93 00 01 	sts	0x0100, r24
}
     20e:	cf 91       	pop	r28
     210:	df 91       	pop	r29
     212:	08 95       	ret

00000214 <__vector_7>:
        sched_reschedule();
    }
}
__attribute__ (( signal, naked )) void SYSTEM_TIMER_ISR(void)
{
    BUGURT_ISR_START();
     214:	00 91 18 01 	lds	r16, 0x0118
     218:	10 91 19 01 	lds	r17, 0x0119
     21c:	0e 94 65 00 	call	0xca	; 0xca <osbme_store_context>
     220:	f8 01       	movw	r30, r16
     222:	95 a7       	std	Z+45, r25	; 0x2d
     224:	84 a7       	std	Z+44, r24	; 0x2c
     226:	80 91 6e 01 	lds	r24, 0x016E
     22a:	90 91 6f 01 	lds	r25, 0x016F
     22e:	0e 94 bc 00 	call	0x178	; 0x178 <osbme_set_stack_pointer>

    kernel.timer++;
     232:	80 91 72 01 	lds	r24, 0x0172
     236:	90 91 73 01 	lds	r25, 0x0173
     23a:	01 96       	adiw	r24, 0x01	; 1
     23c:	90 93 73 01 	sts	0x0173, r25
     240:	80 93 72 01 	sts	0x0172, r24
    sched_schedule();
     244:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <sched_schedule>

    BUGURT_ISR_EXIT();
     248:	e0 91 18 01 	lds	r30, 0x0118
     24c:	f0 91 19 01 	lds	r31, 0x0119
     250:	84 a5       	ldd	r24, Z+44	; 0x2c
     252:	95 a5       	ldd	r25, Z+45	; 0x2d
     254:	0e 94 91 00 	call	0x122	; 0x122 <osbme_load_context>
     258:	18 95       	reti

0000025a <init_bugurt>:
}
/***************************************************************************************************************/
// Функции общего пользования

void init_bugurt(void)
{
     25a:	df 93       	push	r29
     25c:	cf 93       	push	r28
     25e:	cd b7       	in	r28, 0x3d	; 61
     260:	de b7       	in	r29, 0x3e	; 62
    cli();
     262:	f8 94       	cli
    kernel.sched.nested_crit_sec = (count_t)1;
     264:	81 e0       	ldi	r24, 0x01	; 1
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	90 93 41 01 	sts	0x0141, r25
     26c:	80 93 40 01 	sts	0x0140, r24
    kernel_init();
     270:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <kernel_init>
}
     274:	cf 91       	pop	r28
     276:	df 91       	pop	r29
     278:	08 95       	ret

0000027a <start_bugurt>:
void start_bugurt(void)
{
     27a:	df 93       	push	r29
     27c:	cf 93       	push	r28
     27e:	cd b7       	in	r28, 0x3d	; 61
     280:	de b7       	in	r29, 0x3e	; 62
    start_scheduler();
     282:	0e 94 95 11 	call	0x232a	; 0x232a <start_scheduler>
    kernel.sched.nested_crit_sec = (count_t)0;
     286:	10 92 41 01 	sts	0x0141, r1
     28a:	10 92 40 01 	sts	0x0140, r1
    sei();
     28e:	78 94       	sei
    idle_main( (void *)0 );
     290:	80 e0       	ldi	r24, 0x00	; 0
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	0e 94 5d 12 	call	0x24ba	; 0x24ba <idle_main>
}
     298:	cf 91       	pop	r28
     29a:	df 91       	pop	r29
     29c:	08 95       	ret

0000029e <do_syscall>:
    scall_mutex_try_lock,
    scall_mutex_unlock
};

void do_syscall(void)
{
     29e:	df 93       	push	r29
     2a0:	cf 93       	push	r28
     2a2:	00 d0       	rcall	.+0      	; 0x2a4 <do_syscall+0x6>
     2a4:	00 d0       	rcall	.+0      	; 0x2a6 <do_syscall+0x8>
     2a6:	00 d0       	rcall	.+0      	; 0x2a8 <do_syscall+0xa>
     2a8:	cd b7       	in	r28, 0x3d	; 61
     2aa:	de b7       	in	r29, 0x3e	; 62
    if( syscall_num != (unsigned char)0 )
     2ac:	80 91 02 01 	lds	r24, 0x0102
     2b0:	88 23       	and	r24, r24
     2b2:	29 f1       	breq	.+74     	; 0x2fe <do_syscall+0x60>
    {
        syscall_num--;
     2b4:	80 91 02 01 	lds	r24, 0x0102
     2b8:	81 50       	subi	r24, 0x01	; 1
     2ba:	80 93 02 01 	sts	0x0102, r24
        code_t syscall_func;
        syscall_func = (code_t)pgm_read_word(syscall_routine + syscall_num);
     2be:	80 91 02 01 	lds	r24, 0x0102
     2c2:	88 2f       	mov	r24, r24
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	88 0f       	add	r24, r24
     2c8:	99 1f       	adc	r25, r25
     2ca:	88 59       	subi	r24, 0x98	; 152
     2cc:	9f 4f       	sbci	r25, 0xFF	; 255
     2ce:	9c 83       	std	Y+4, r25	; 0x04
     2d0:	8b 83       	std	Y+3, r24	; 0x03
     2d2:	8b 81       	ldd	r24, Y+3	; 0x03
     2d4:	9c 81       	ldd	r25, Y+4	; 0x04
     2d6:	fc 01       	movw	r30, r24
     2d8:	85 91       	lpm	r24, Z+
     2da:	94 91       	lpm	r25, Z+
     2dc:	9a 83       	std	Y+2, r25	; 0x02
     2de:	89 83       	std	Y+1, r24	; 0x01
     2e0:	fc 83       	std	Y+4, r31	; 0x04
     2e2:	eb 83       	std	Y+3, r30	; 0x03
     2e4:	89 81       	ldd	r24, Y+1	; 0x01
     2e6:	9a 81       	ldd	r25, Y+2	; 0x02
     2e8:	9e 83       	std	Y+6, r25	; 0x06
     2ea:	8d 83       	std	Y+5, r24	; 0x05
        syscall_func(syscall_arg);
     2ec:	80 91 03 01 	lds	r24, 0x0103
     2f0:	90 91 04 01 	lds	r25, 0x0104
     2f4:	ed 81       	ldd	r30, Y+5	; 0x05
     2f6:	fe 81       	ldd	r31, Y+6	; 0x06
     2f8:	09 95       	icall
        syscall_num = (unsigned char)0;
     2fa:	10 92 02 01 	sts	0x0102, r1
    }
}
     2fe:	26 96       	adiw	r28, 0x06	; 6
     300:	0f b6       	in	r0, 0x3f	; 63
     302:	f8 94       	cli
     304:	de bf       	out	0x3e, r29	; 62
     306:	0f be       	out	0x3f, r0	; 63
     308:	cd bf       	out	0x3d, r28	; 61
     30a:	cf 91       	pop	r28
     30c:	df 91       	pop	r29
     30e:	08 95       	ret

00000310 <__vector_2>:
    unsigned char num;
    void * arg;
} syscall_data_t;
__attribute__ (( signal, naked )) void SYSCALL_ISR(void)
{
    BUGURT_ISR_START();
     310:	00 91 18 01 	lds	r16, 0x0118
     314:	10 91 19 01 	lds	r17, 0x0119
     318:	0e 94 65 00 	call	0xca	; 0xca <osbme_store_context>
     31c:	f8 01       	movw	r30, r16
     31e:	95 a7       	std	Z+45, r25	; 0x2d
     320:	84 a7       	std	Z+44, r24	; 0x2c
     322:	80 91 6e 01 	lds	r24, 0x016E
     326:	90 91 6f 01 	lds	r25, 0x016F
     32a:	0e 94 bc 00 	call	0x178	; 0x178 <osbme_set_stack_pointer>

    // Получаем информацию о системном вызове из стека процесса
    unsigned char * tos;
    unsigned short temp;
    /// Извлечение syscall_num и syscall_arg из стека процесса
    tos = (unsigned char *)kernel.sched.current_proc->spointer + PROC_STACK_OFFSET;
     32e:	e0 91 18 01 	lds	r30, 0x0118
     332:	f0 91 19 01 	lds	r31, 0x0119
     336:	84 a5       	ldd	r24, Z+44	; 0x2c
     338:	95 a5       	ldd	r25, Z+45	; 0x2d
     33a:	07 96       	adiw	r24, 0x07	; 7
     33c:	9c 83       	std	Y+4, r25	; 0x04
     33e:	8b 83       	std	Y+3, r24	; 0x03
    temp = (unsigned short)*tos++;
     340:	eb 81       	ldd	r30, Y+3	; 0x03
     342:	fc 81       	ldd	r31, Y+4	; 0x04
     344:	80 81       	ld	r24, Z
     346:	88 2f       	mov	r24, r24
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	9a 83       	std	Y+2, r25	; 0x02
     34c:	89 83       	std	Y+1, r24	; 0x01
     34e:	8b 81       	ldd	r24, Y+3	; 0x03
     350:	9c 81       	ldd	r25, Y+4	; 0x04
     352:	01 96       	adiw	r24, 0x01	; 1
     354:	9c 83       	std	Y+4, r25	; 0x04
     356:	8b 83       	std	Y+3, r24	; 0x03
    temp <<= 8;
     358:	89 81       	ldd	r24, Y+1	; 0x01
     35a:	9a 81       	ldd	r25, Y+2	; 0x02
     35c:	98 2f       	mov	r25, r24
     35e:	88 27       	eor	r24, r24
     360:	9a 83       	std	Y+2, r25	; 0x02
     362:	89 83       	std	Y+1, r24	; 0x01
    temp |= (unsigned short)*tos;
     364:	eb 81       	ldd	r30, Y+3	; 0x03
     366:	fc 81       	ldd	r31, Y+4	; 0x04
     368:	80 81       	ld	r24, Z
     36a:	28 2f       	mov	r18, r24
     36c:	30 e0       	ldi	r19, 0x00	; 0
     36e:	89 81       	ldd	r24, Y+1	; 0x01
     370:	9a 81       	ldd	r25, Y+2	; 0x02
     372:	82 2b       	or	r24, r18
     374:	93 2b       	or	r25, r19
     376:	9a 83       	std	Y+2, r25	; 0x02
     378:	89 83       	std	Y+1, r24	; 0x01

    syscall_num = ((syscall_data_t *)temp)->num;
     37a:	e9 81       	ldd	r30, Y+1	; 0x01
     37c:	fa 81       	ldd	r31, Y+2	; 0x02
     37e:	80 81       	ld	r24, Z
     380:	80 93 02 01 	sts	0x0102, r24
    syscall_arg = ((syscall_data_t *)temp)->arg;
     384:	e9 81       	ldd	r30, Y+1	; 0x01
     386:	fa 81       	ldd	r31, Y+2	; 0x02
     388:	81 81       	ldd	r24, Z+1	; 0x01
     38a:	92 81       	ldd	r25, Z+2	; 0x02
     38c:	90 93 04 01 	sts	0x0104, r25
     390:	80 93 03 01 	sts	0x0103, r24

    // Обрабатываем системный вызов
    do_syscall();
     394:	0e 94 4f 01 	call	0x29e	; 0x29e <do_syscall>
    kernel_state &= ~KRN_FLG_DO_SCALL;
     398:	80 91 00 01 	lds	r24, 0x0100
     39c:	8d 7f       	andi	r24, 0xFD	; 253
     39e:	80 93 00 01 	sts	0x0100, r24

    // Перепланировка при необходимости
    if( kernel_state & KRN_FLG_RESCHED )
     3a2:	80 91 00 01 	lds	r24, 0x0100
     3a6:	88 2f       	mov	r24, r24
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	81 70       	andi	r24, 0x01	; 1
     3ac:	90 70       	andi	r25, 0x00	; 0
     3ae:	88 23       	and	r24, r24
     3b0:	39 f0       	breq	.+14     	; 0x3c0 <__vector_2+0xb0>
    {
        kernel_state &= ~KRN_FLG_RESCHED;
     3b2:	80 91 00 01 	lds	r24, 0x0100
     3b6:	8e 7f       	andi	r24, 0xFE	; 254
     3b8:	80 93 00 01 	sts	0x0100, r24
        sched_reschedule();
     3bc:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <sched_reschedule>
    }

    // Разрешаем обработку прерывания системного таймера.
    start_scheduler();
     3c0:	0e 94 95 11 	call	0x232a	; 0x232a <start_scheduler>

    BUGURT_ISR_EXIT();
     3c4:	e0 91 18 01 	lds	r30, 0x0118
     3c8:	f0 91 19 01 	lds	r31, 0x0119
     3cc:	84 a5       	ldd	r24, Z+44	; 0x2c
     3ce:	95 a5       	ldd	r25, Z+45	; 0x2d
     3d0:	0e 94 91 00 	call	0x122	; 0x122 <osbme_load_context>
     3d4:	18 95       	reti

000003d6 <_syscall>:
}

syscall_data_t * _syscall( syscall_data_t * arg )
{
     3d6:	df 93       	push	r29
     3d8:	cf 93       	push	r28
     3da:	00 d0       	rcall	.+0      	; 0x3dc <_syscall+0x6>
     3dc:	cd b7       	in	r28, 0x3d	; 61
     3de:	de b7       	in	r29, 0x3e	; 62
     3e0:	9a 83       	std	Y+2, r25	; 0x02
     3e2:	89 83       	std	Y+1, r24	; 0x01
    kernel_state |= KRN_FLG_DO_SCALL;
     3e4:	80 91 00 01 	lds	r24, 0x0100
     3e8:	82 60       	ori	r24, 0x02	; 2
     3ea:	80 93 00 01 	sts	0x0100, r24
    stop_scheduler(); // Чтобы не было гонок с обработчиком прерывания системного таймера.
     3ee:	0e 94 a3 11 	call	0x2346	; 0x2346 <stop_scheduler>
    raise_syscall_interrupt();
     3f2:	0e 94 72 11 	call	0x22e4	; 0x22e4 <raise_syscall_interrupt>
    sei();
     3f6:	78 94       	sei
    return arg;
     3f8:	89 81       	ldd	r24, Y+1	; 0x01
     3fa:	9a 81       	ldd	r25, Y+2	; 0x02
}
     3fc:	0f 90       	pop	r0
     3fe:	0f 90       	pop	r0
     400:	cf 91       	pop	r28
     402:	df 91       	pop	r29
     404:	08 95       	ret

00000406 <syscall>:

static syscall_data_t scdata;
void syscall( unsigned char num, void * arg )
{
     406:	df 93       	push	r29
     408:	cf 93       	push	r28
     40a:	00 d0       	rcall	.+0      	; 0x40c <syscall+0x6>
     40c:	0f 92       	push	r0
     40e:	cd b7       	in	r28, 0x3d	; 61
     410:	de b7       	in	r29, 0x3e	; 62
     412:	89 83       	std	Y+1, r24	; 0x01
     414:	7b 83       	std	Y+3, r23	; 0x03
     416:	6a 83       	std	Y+2, r22	; 0x02
     scdata.num = num;
     418:	89 81       	ldd	r24, Y+1	; 0x01
     41a:	80 93 15 01 	sts	0x0115, r24
     scdata.arg = arg;
     41e:	8a 81       	ldd	r24, Y+2	; 0x02
     420:	9b 81       	ldd	r25, Y+3	; 0x03
     422:	90 93 17 01 	sts	0x0117, r25
     426:	80 93 16 01 	sts	0x0116, r24
     _syscall( &scdata );
     42a:	85 e1       	ldi	r24, 0x15	; 21
     42c:	91 e0       	ldi	r25, 0x01	; 1
     42e:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <_syscall>
     SYSCALL_DELLAY();
     432:	00 00       	nop
     434:	00 00       	nop
     436:	00 00       	nop
     while( kernel_state & KRN_FLG_DO_SCALL );
     438:	80 91 00 01 	lds	r24, 0x0100
     43c:	88 2f       	mov	r24, r24
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	82 70       	andi	r24, 0x02	; 2
     442:	90 70       	andi	r25, 0x00	; 0
     444:	00 97       	sbiw	r24, 0x00	; 0
     446:	c1 f7       	brne	.-16     	; 0x438 <syscall+0x32>
}
     448:	0f 90       	pop	r0
     44a:	0f 90       	pop	r0
     44c:	0f 90       	pop	r0
     44e:	cf 91       	pop	r28
     450:	df 91       	pop	r29
     452:	08 95       	ret

00000454 <scall_proc_init>:
///                 ОБРАБОТЧИКИ СИСТЕМНЫХ ВЫЗОВОВ
///=================================================================
///                   Управление процессами
//1
void scall_proc_init( void * arg )
{
     454:	8f 92       	push	r8
     456:	af 92       	push	r10
     458:	bf 92       	push	r11
     45a:	cf 92       	push	r12
     45c:	df 92       	push	r13
     45e:	ef 92       	push	r14
     460:	ff 92       	push	r15
     462:	0f 93       	push	r16
     464:	1f 93       	push	r17
     466:	df 93       	push	r29
     468:	cf 93       	push	r28
     46a:	00 d0       	rcall	.+0      	; 0x46c <scall_proc_init+0x18>
     46c:	cd b7       	in	r28, 0x3d	; 61
     46e:	de b7       	in	r29, 0x3e	; 62
     470:	9a 83       	std	Y+2, r25	; 0x02
     472:	89 83       	std	Y+1, r24	; 0x01
    proc_init_isr(
     474:	e9 81       	ldd	r30, Y+1	; 0x01
     476:	fa 81       	ldd	r31, Y+2	; 0x02
     478:	80 81       	ld	r24, Z
     47a:	91 81       	ldd	r25, Z+1	; 0x01
     47c:	e9 81       	ldd	r30, Y+1	; 0x01
     47e:	fa 81       	ldd	r31, Y+2	; 0x02
     480:	22 81       	ldd	r18, Z+2	; 0x02
     482:	33 81       	ldd	r19, Z+3	; 0x03
     484:	e9 81       	ldd	r30, Y+1	; 0x01
     486:	fa 81       	ldd	r31, Y+2	; 0x02
     488:	44 81       	ldd	r20, Z+4	; 0x04
     48a:	55 81       	ldd	r21, Z+5	; 0x05
     48c:	e9 81       	ldd	r30, Y+1	; 0x01
     48e:	fa 81       	ldd	r31, Y+2	; 0x02
     490:	06 81       	ldd	r16, Z+6	; 0x06
     492:	17 81       	ldd	r17, Z+7	; 0x07
     494:	e9 81       	ldd	r30, Y+1	; 0x01
     496:	fa 81       	ldd	r31, Y+2	; 0x02
     498:	e0 84       	ldd	r14, Z+8	; 0x08
     49a:	f1 84       	ldd	r15, Z+9	; 0x09
     49c:	e9 81       	ldd	r30, Y+1	; 0x01
     49e:	fa 81       	ldd	r31, Y+2	; 0x02
     4a0:	c2 84       	ldd	r12, Z+10	; 0x0a
     4a2:	d3 84       	ldd	r13, Z+11	; 0x0b
     4a4:	e9 81       	ldd	r30, Y+1	; 0x01
     4a6:	fa 81       	ldd	r31, Y+2	; 0x02
     4a8:	b4 84       	ldd	r11, Z+12	; 0x0c
     4aa:	e9 81       	ldd	r30, Y+1	; 0x01
     4ac:	fa 81       	ldd	r31, Y+2	; 0x02
     4ae:	a5 85       	ldd	r26, Z+13	; 0x0d
     4b0:	b6 85       	ldd	r27, Z+14	; 0x0e
     4b2:	e9 81       	ldd	r30, Y+1	; 0x01
     4b4:	fa 81       	ldd	r31, Y+2	; 0x02
     4b6:	e7 85       	ldd	r30, Z+15	; 0x0f
     4b8:	b9 01       	movw	r22, r18
     4ba:	98 01       	movw	r18, r16
     4bc:	87 01       	movw	r16, r14
     4be:	76 01       	movw	r14, r12
     4c0:	cb 2c       	mov	r12, r11
     4c2:	5d 01       	movw	r10, r26
     4c4:	8e 2e       	mov	r8, r30
     4c6:	0e 94 b6 0b 	call	0x176c	; 0x176c <proc_init_isr>
              ((proc_init_arg_t *)arg)->sstart,
              ((proc_init_arg_t *)arg)->prio,
              ((proc_init_arg_t *)arg)->time_quant,
              ((proc_init_arg_t *)arg)->is_rt
              );
}
     4ca:	0f 90       	pop	r0
     4cc:	0f 90       	pop	r0
     4ce:	cf 91       	pop	r28
     4d0:	df 91       	pop	r29
     4d2:	1f 91       	pop	r17
     4d4:	0f 91       	pop	r16
     4d6:	ff 90       	pop	r15
     4d8:	ef 90       	pop	r14
     4da:	df 90       	pop	r13
     4dc:	cf 90       	pop	r12
     4de:	bf 90       	pop	r11
     4e0:	af 90       	pop	r10
     4e2:	8f 90       	pop	r8
     4e4:	08 95       	ret

000004e6 <proc_init>:
                    stack_t *sstart,
                    prio_t prio,
                    timer_t time_quant,
                    bool_t is_rt // если true, значит процесс будет иметть поведение RT
                  )
{
     4e6:	8f 92       	push	r8
     4e8:	af 92       	push	r10
     4ea:	bf 92       	push	r11
     4ec:	cf 92       	push	r12
     4ee:	ef 92       	push	r14
     4f0:	ff 92       	push	r15
     4f2:	0f 93       	push	r16
     4f4:	1f 93       	push	r17
     4f6:	df 93       	push	r29
     4f8:	cf 93       	push	r28
     4fa:	cd b7       	in	r28, 0x3d	; 61
     4fc:	de b7       	in	r29, 0x3e	; 62
     4fe:	60 97       	sbiw	r28, 0x10	; 16
     500:	0f b6       	in	r0, 0x3f	; 63
     502:	f8 94       	cli
     504:	de bf       	out	0x3e, r29	; 62
     506:	0f be       	out	0x3f, r0	; 63
     508:	cd bf       	out	0x3d, r28	; 61
     50a:	9a 83       	std	Y+2, r25	; 0x02
     50c:	89 83       	std	Y+1, r24	; 0x01
     50e:	7c 83       	std	Y+4, r23	; 0x04
     510:	6b 83       	std	Y+3, r22	; 0x03
     512:	5e 83       	std	Y+6, r21	; 0x06
     514:	4d 83       	std	Y+5, r20	; 0x05
     516:	38 87       	std	Y+8, r19	; 0x08
     518:	2f 83       	std	Y+7, r18	; 0x07
     51a:	1a 87       	std	Y+10, r17	; 0x0a
     51c:	09 87       	std	Y+9, r16	; 0x09
     51e:	fc 86       	std	Y+12, r15	; 0x0c
     520:	eb 86       	std	Y+11, r14	; 0x0b
     522:	cd 86       	std	Y+13, r12	; 0x0d
     524:	bf 86       	std	Y+15, r11	; 0x0f
     526:	ae 86       	std	Y+14, r10	; 0x0e
     528:	88 8a       	std	Y+16, r8	; 0x10
    static proc_init_arg_t scarg;
    cli(); // прерывания будут разрешены на выходе из _syscall()
     52a:	f8 94       	cli
    scarg.proc = proc;
     52c:	89 81       	ldd	r24, Y+1	; 0x01
     52e:	9a 81       	ldd	r25, Y+2	; 0x02
     530:	90 93 06 01 	sts	0x0106, r25
     534:	80 93 05 01 	sts	0x0105, r24
    scarg.pmain = pmain;
     538:	8b 81       	ldd	r24, Y+3	; 0x03
     53a:	9c 81       	ldd	r25, Y+4	; 0x04
     53c:	90 93 08 01 	sts	0x0108, r25
     540:	80 93 07 01 	sts	0x0107, r24
    scarg.sv_hook = sv_hook;
     544:	8d 81       	ldd	r24, Y+5	; 0x05
     546:	9e 81       	ldd	r25, Y+6	; 0x06
     548:	90 93 0a 01 	sts	0x010A, r25
     54c:	80 93 09 01 	sts	0x0109, r24
    scarg.rs_hook = rs_hook;
     550:	8f 81       	ldd	r24, Y+7	; 0x07
     552:	98 85       	ldd	r25, Y+8	; 0x08
     554:	90 93 0c 01 	sts	0x010C, r25
     558:	80 93 0b 01 	sts	0x010B, r24
    scarg.arg = arg;
     55c:	89 85       	ldd	r24, Y+9	; 0x09
     55e:	9a 85       	ldd	r25, Y+10	; 0x0a
     560:	90 93 0e 01 	sts	0x010E, r25
     564:	80 93 0d 01 	sts	0x010D, r24
    scarg.sstart = sstart;
     568:	8b 85       	ldd	r24, Y+11	; 0x0b
     56a:	9c 85       	ldd	r25, Y+12	; 0x0c
     56c:	90 93 10 01 	sts	0x0110, r25
     570:	80 93 0f 01 	sts	0x010F, r24
    scarg.prio = prio;
     574:	8d 85       	ldd	r24, Y+13	; 0x0d
     576:	80 93 11 01 	sts	0x0111, r24
    scarg.time_quant = time_quant;
     57a:	8e 85       	ldd	r24, Y+14	; 0x0e
     57c:	9f 85       	ldd	r25, Y+15	; 0x0f
     57e:	90 93 13 01 	sts	0x0113, r25
     582:	80 93 12 01 	sts	0x0112, r24
    scarg.is_rt = is_rt;
     586:	88 89       	ldd	r24, Y+16	; 0x10
     588:	80 93 14 01 	sts	0x0114, r24
    syscall(1,(void *)&scarg);
     58c:	25 e0       	ldi	r18, 0x05	; 5
     58e:	31 e0       	ldi	r19, 0x01	; 1
     590:	81 e0       	ldi	r24, 0x01	; 1
     592:	b9 01       	movw	r22, r18
     594:	0e 94 03 02 	call	0x406	; 0x406 <syscall>
}
     598:	60 96       	adiw	r28, 0x10	; 16
     59a:	0f b6       	in	r0, 0x3f	; 63
     59c:	f8 94       	cli
     59e:	de bf       	out	0x3e, r29	; 62
     5a0:	0f be       	out	0x3f, r0	; 63
     5a2:	cd bf       	out	0x3d, r28	; 61
     5a4:	cf 91       	pop	r28
     5a6:	df 91       	pop	r29
     5a8:	1f 91       	pop	r17
     5aa:	0f 91       	pop	r16
     5ac:	ff 90       	pop	r15
     5ae:	ef 90       	pop	r14
     5b0:	cf 90       	pop	r12
     5b2:	bf 90       	pop	r11
     5b4:	af 90       	pop	r10
     5b6:	8f 90       	pop	r8
     5b8:	08 95       	ret

000005ba <scall_proc_run>:
//---------------------------------------------------------------------------------------------
//2
void scall_proc_run( void * arg )
{
     5ba:	0f 93       	push	r16
     5bc:	1f 93       	push	r17
     5be:	df 93       	push	r29
     5c0:	cf 93       	push	r28
     5c2:	00 d0       	rcall	.+0      	; 0x5c4 <scall_proc_run+0xa>
     5c4:	cd b7       	in	r28, 0x3d	; 61
     5c6:	de b7       	in	r29, 0x3e	; 62
     5c8:	9a 83       	std	Y+2, r25	; 0x02
     5ca:	89 83       	std	Y+1, r24	; 0x01
    ((proc_runtime_arg_t *)arg)->scall_ret = proc_run_isr( ((proc_runtime_arg_t *)arg)->proc );
     5cc:	09 81       	ldd	r16, Y+1	; 0x01
     5ce:	1a 81       	ldd	r17, Y+2	; 0x02
     5d0:	e9 81       	ldd	r30, Y+1	; 0x01
     5d2:	fa 81       	ldd	r31, Y+2	; 0x02
     5d4:	80 81       	ld	r24, Z
     5d6:	91 81       	ldd	r25, Z+1	; 0x01
     5d8:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <proc_run_isr>
     5dc:	f8 01       	movw	r30, r16
     5de:	82 83       	std	Z+2, r24	; 0x02
}
     5e0:	0f 90       	pop	r0
     5e2:	0f 90       	pop	r0
     5e4:	cf 91       	pop	r28
     5e6:	df 91       	pop	r29
     5e8:	1f 91       	pop	r17
     5ea:	0f 91       	pop	r16
     5ec:	08 95       	ret

000005ee <proc_run>:
bool_t proc_run( proc_t * proc )
{
     5ee:	df 93       	push	r29
     5f0:	cf 93       	push	r28
     5f2:	00 d0       	rcall	.+0      	; 0x5f4 <proc_run+0x6>
     5f4:	00 d0       	rcall	.+0      	; 0x5f6 <proc_run+0x8>
     5f6:	0f 92       	push	r0
     5f8:	cd b7       	in	r28, 0x3d	; 61
     5fa:	de b7       	in	r29, 0x3e	; 62
     5fc:	9d 83       	std	Y+5, r25	; 0x05
     5fe:	8c 83       	std	Y+4, r24	; 0x04
    proc_runtime_arg_t scarg;
    scarg.proc = proc;
     600:	8c 81       	ldd	r24, Y+4	; 0x04
     602:	9d 81       	ldd	r25, Y+5	; 0x05
     604:	9a 83       	std	Y+2, r25	; 0x02
     606:	89 83       	std	Y+1, r24	; 0x01
    scarg.scall_ret = (bool_t)0;
     608:	1b 82       	std	Y+3, r1	; 0x03
    cli(); // прерывания будут разрешены на выходе из _syscall()
     60a:	f8 94       	cli
    syscall(2,(void *)&scarg);
     60c:	82 e0       	ldi	r24, 0x02	; 2
     60e:	9e 01       	movw	r18, r28
     610:	2f 5f       	subi	r18, 0xFF	; 255
     612:	3f 4f       	sbci	r19, 0xFF	; 255
     614:	b9 01       	movw	r22, r18
     616:	0e 94 03 02 	call	0x406	; 0x406 <syscall>
    return scarg.scall_ret;
     61a:	8b 81       	ldd	r24, Y+3	; 0x03
}
     61c:	0f 90       	pop	r0
     61e:	0f 90       	pop	r0
     620:	0f 90       	pop	r0
     622:	0f 90       	pop	r0
     624:	0f 90       	pop	r0
     626:	cf 91       	pop	r28
     628:	df 91       	pop	r29
     62a:	08 95       	ret

0000062c <scall_proc_restart>:
//---------------------------------------------------------------------------------------------
//3
void scall_proc_restart( void * arg )
{
     62c:	0f 93       	push	r16
     62e:	1f 93       	push	r17
     630:	df 93       	push	r29
     632:	cf 93       	push	r28
     634:	00 d0       	rcall	.+0      	; 0x636 <scall_proc_restart+0xa>
     636:	cd b7       	in	r28, 0x3d	; 61
     638:	de b7       	in	r29, 0x3e	; 62
     63a:	9a 83       	std	Y+2, r25	; 0x02
     63c:	89 83       	std	Y+1, r24	; 0x01
    ((proc_runtime_arg_t *)arg)->scall_ret = proc_restart_isr( ((proc_runtime_arg_t *)arg)->proc );
     63e:	09 81       	ldd	r16, Y+1	; 0x01
     640:	1a 81       	ldd	r17, Y+2	; 0x02
     642:	e9 81       	ldd	r30, Y+1	; 0x01
     644:	fa 81       	ldd	r31, Y+2	; 0x02
     646:	80 81       	ld	r24, Z
     648:	91 81       	ldd	r25, Z+1	; 0x01
     64a:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <proc_restart_isr>
     64e:	f8 01       	movw	r30, r16
     650:	82 83       	std	Z+2, r24	; 0x02
}
     652:	0f 90       	pop	r0
     654:	0f 90       	pop	r0
     656:	cf 91       	pop	r28
     658:	df 91       	pop	r29
     65a:	1f 91       	pop	r17
     65c:	0f 91       	pop	r16
     65e:	08 95       	ret

00000660 <proc_restart>:
bool_t proc_restart( proc_t * proc )
{
     660:	df 93       	push	r29
     662:	cf 93       	push	r28
     664:	00 d0       	rcall	.+0      	; 0x666 <proc_restart+0x6>
     666:	00 d0       	rcall	.+0      	; 0x668 <proc_restart+0x8>
     668:	0f 92       	push	r0
     66a:	cd b7       	in	r28, 0x3d	; 61
     66c:	de b7       	in	r29, 0x3e	; 62
     66e:	9d 83       	std	Y+5, r25	; 0x05
     670:	8c 83       	std	Y+4, r24	; 0x04
    proc_runtime_arg_t scarg;
    scarg.proc = proc;
     672:	8c 81       	ldd	r24, Y+4	; 0x04
     674:	9d 81       	ldd	r25, Y+5	; 0x05
     676:	9a 83       	std	Y+2, r25	; 0x02
     678:	89 83       	std	Y+1, r24	; 0x01
    cli(); // прерывания будут разрешены на выходе из _syscall()
     67a:	f8 94       	cli
    syscall(3,(void *)&scarg);
     67c:	83 e0       	ldi	r24, 0x03	; 3
     67e:	9e 01       	movw	r18, r28
     680:	2f 5f       	subi	r18, 0xFF	; 255
     682:	3f 4f       	sbci	r19, 0xFF	; 255
     684:	b9 01       	movw	r22, r18
     686:	0e 94 03 02 	call	0x406	; 0x406 <syscall>
    return scarg.scall_ret;
     68a:	8b 81       	ldd	r24, Y+3	; 0x03
}
     68c:	0f 90       	pop	r0
     68e:	0f 90       	pop	r0
     690:	0f 90       	pop	r0
     692:	0f 90       	pop	r0
     694:	0f 90       	pop	r0
     696:	cf 91       	pop	r28
     698:	df 91       	pop	r29
     69a:	08 95       	ret

0000069c <scall_proc_stop>:
//---------------------------------------------------------------------------------------------
//4
void scall_proc_stop( void * arg )
{
     69c:	0f 93       	push	r16
     69e:	1f 93       	push	r17
     6a0:	df 93       	push	r29
     6a2:	cf 93       	push	r28
     6a4:	00 d0       	rcall	.+0      	; 0x6a6 <scall_proc_stop+0xa>
     6a6:	cd b7       	in	r28, 0x3d	; 61
     6a8:	de b7       	in	r29, 0x3e	; 62
     6aa:	9a 83       	std	Y+2, r25	; 0x02
     6ac:	89 83       	std	Y+1, r24	; 0x01
    ((proc_runtime_arg_t *)arg)->scall_ret = proc_stop_isr( ((proc_runtime_arg_t *)arg)->proc );
     6ae:	09 81       	ldd	r16, Y+1	; 0x01
     6b0:	1a 81       	ldd	r17, Y+2	; 0x02
     6b2:	e9 81       	ldd	r30, Y+1	; 0x01
     6b4:	fa 81       	ldd	r31, Y+2	; 0x02
     6b6:	80 81       	ld	r24, Z
     6b8:	91 81       	ldd	r25, Z+1	; 0x01
     6ba:	0e 94 de 0c 	call	0x19bc	; 0x19bc <proc_stop_isr>
     6be:	f8 01       	movw	r30, r16
     6c0:	82 83       	std	Z+2, r24	; 0x02
}
     6c2:	0f 90       	pop	r0
     6c4:	0f 90       	pop	r0
     6c6:	cf 91       	pop	r28
     6c8:	df 91       	pop	r29
     6ca:	1f 91       	pop	r17
     6cc:	0f 91       	pop	r16
     6ce:	08 95       	ret

000006d0 <scall_proc_self_stop>:
}

//---------------------------------------------------------------------------------------------
//5
void scall_proc_self_stop( void * arg )
{
     6d0:	df 93       	push	r29
     6d2:	cf 93       	push	r28
     6d4:	00 d0       	rcall	.+0      	; 0x6d6 <scall_proc_self_stop+0x6>
     6d6:	00 d0       	rcall	.+0      	; 0x6d8 <scall_proc_self_stop+0x8>
     6d8:	cd b7       	in	r28, 0x3d	; 61
     6da:	de b7       	in	r29, 0x3e	; 62
     6dc:	9c 83       	std	Y+4, r25	; 0x04
     6de:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = kernel.sched.current_proc;
     6e0:	80 91 18 01 	lds	r24, 0x0118
     6e4:	90 91 19 01 	lds	r25, 0x0119
     6e8:	9a 83       	std	Y+2, r25	; 0x02
     6ea:	89 83       	std	Y+1, r24	; 0x01
    _proc_stop( proc );
     6ec:	89 81       	ldd	r24, Y+1	; 0x01
     6ee:	9a 81       	ldd	r25, Y+2	; 0x02
     6f0:	0e 94 c5 0c 	call	0x198a	; 0x198a <_proc_stop>
}
     6f4:	0f 90       	pop	r0
     6f6:	0f 90       	pop	r0
     6f8:	0f 90       	pop	r0
     6fa:	0f 90       	pop	r0
     6fc:	cf 91       	pop	r28
     6fe:	df 91       	pop	r29
     700:	08 95       	ret

00000702 <proc_self_stop>:
void proc_self_stop(void)
{
     702:	df 93       	push	r29
     704:	cf 93       	push	r28
     706:	cd b7       	in	r28, 0x3d	; 61
     708:	de b7       	in	r29, 0x3e	; 62
    cli(); // прерывания будут разрешены на выходе из _syscall()
     70a:	f8 94       	cli
    syscall(5,(void *)1);
     70c:	85 e0       	ldi	r24, 0x05	; 5
     70e:	61 e0       	ldi	r22, 0x01	; 1
     710:	70 e0       	ldi	r23, 0x00	; 0
     712:	0e 94 03 02 	call	0x406	; 0x406 <syscall>
}
     716:	cf 91       	pop	r28
     718:	df 91       	pop	r29
     71a:	08 95       	ret

0000071c <scall_proc_terminate>:
//---------------------------------------------------------------------------------------------
//6
/// Останов процесса после выхода из pmain, для обертки proc_run_wrapper
void scall_proc_terminate( void * arg )
{
     71c:	df 93       	push	r29
     71e:	cf 93       	push	r28
     720:	00 d0       	rcall	.+0      	; 0x722 <scall_proc_terminate+0x6>
     722:	00 d0       	rcall	.+0      	; 0x724 <scall_proc_terminate+0x8>
     724:	cd b7       	in	r28, 0x3d	; 61
     726:	de b7       	in	r29, 0x3e	; 62
     728:	9c 83       	std	Y+4, r25	; 0x04
     72a:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = (proc_t *)arg;
     72c:	8b 81       	ldd	r24, Y+3	; 0x03
     72e:	9c 81       	ldd	r25, Y+4	; 0x04
     730:	9a 83       	std	Y+2, r25	; 0x02
     732:	89 83       	std	Y+1, r24	; 0x01
    // Обрабатываем флаги
    // Нельзя выходить из pmain не освободив все захваченные ресурсы, за это процесс будет "убит"!
    if( proc->flags & PROC_FLG_HOLD ) proc->flags |= PROC_FLG_DEAD;
     734:	e9 81       	ldd	r30, Y+1	; 0x01
     736:	fa 81       	ldd	r31, Y+2	; 0x02
     738:	83 85       	ldd	r24, Z+11	; 0x0b
     73a:	88 2f       	mov	r24, r24
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	84 70       	andi	r24, 0x04	; 4
     740:	90 70       	andi	r25, 0x00	; 0
     742:	00 97       	sbiw	r24, 0x00	; 0
     744:	41 f0       	breq	.+16     	; 0x756 <scall_proc_terminate+0x3a>
     746:	e9 81       	ldd	r30, Y+1	; 0x01
     748:	fa 81       	ldd	r31, Y+2	; 0x02
     74a:	83 85       	ldd	r24, Z+11	; 0x0b
     74c:	80 68       	ori	r24, 0x80	; 128
     74e:	e9 81       	ldd	r30, Y+1	; 0x01
     750:	fa 81       	ldd	r31, Y+2	; 0x02
     752:	83 87       	std	Z+11, r24	; 0x0b
     754:	07 c0       	rjmp	.+14     	; 0x764 <scall_proc_terminate+0x48>
    // В противном случае - просто завершаем процесс
    else proc->flags |= PROC_FLG_END;
     756:	e9 81       	ldd	r30, Y+1	; 0x01
     758:	fa 81       	ldd	r31, Y+2	; 0x02
     75a:	83 85       	ldd	r24, Z+11	; 0x0b
     75c:	80 64       	ori	r24, 0x40	; 64
     75e:	e9 81       	ldd	r30, Y+1	; 0x01
     760:	fa 81       	ldd	r31, Y+2	; 0x02
     762:	83 87       	std	Z+11, r24	; 0x0b
    proc->flags &= ~(PROC_FLG_PRE_END|PROC_FLG_RUN);
     764:	e9 81       	ldd	r30, Y+1	; 0x01
     766:	fa 81       	ldd	r31, Y+2	; 0x02
     768:	83 85       	ldd	r24, Z+11	; 0x0b
     76a:	8d 7d       	andi	r24, 0xDD	; 221
     76c:	e9 81       	ldd	r30, Y+1	; 0x01
     76e:	fa 81       	ldd	r31, Y+2	; 0x02
     770:	83 87       	std	Z+11, r24	; 0x0b
    // Останов
    _proc_stop_( proc );
     772:	89 81       	ldd	r24, Y+1	; 0x01
     774:	9a 81       	ldd	r25, Y+2	; 0x02
     776:	0e 94 fd 07 	call	0xffa	; 0xffa <gitem_cut>
    // Выполнить перепланировку
    resched();
     77a:	0e 94 fe 00 	call	0x1fc	; 0x1fc <resched>
}
     77e:	0f 90       	pop	r0
     780:	0f 90       	pop	r0
     782:	0f 90       	pop	r0
     784:	0f 90       	pop	r0
     786:	cf 91       	pop	r28
     788:	df 91       	pop	r29
     78a:	08 95       	ret

0000078c <proc_run_wrapper>:
void proc_run_wrapper( proc_t * proc )
{
     78c:	df 93       	push	r29
     78e:	cf 93       	push	r28
     790:	00 d0       	rcall	.+0      	; 0x792 <proc_run_wrapper+0x6>
     792:	00 d0       	rcall	.+0      	; 0x794 <proc_run_wrapper+0x8>
     794:	00 d0       	rcall	.+0      	; 0x796 <proc_run_wrapper+0xa>
     796:	cd b7       	in	r28, 0x3d	; 61
     798:	de b7       	in	r29, 0x3e	; 62
     79a:	9e 83       	std	Y+6, r25	; 0x06
     79c:	8d 83       	std	Y+5, r24	; 0x05
    //Атомарно читаем pmain и arg
    cli();
     79e:	f8 94       	cli
    code_t pmain = proc->pmain;
     7a0:	ed 81       	ldd	r30, Y+5	; 0x05
     7a2:	fe 81       	ldd	r31, Y+6	; 0x06
     7a4:	82 a1       	ldd	r24, Z+34	; 0x22
     7a6:	93 a1       	ldd	r25, Z+35	; 0x23
     7a8:	9c 83       	std	Y+4, r25	; 0x04
     7aa:	8b 83       	std	Y+3, r24	; 0x03
    void * arg = proc->arg;
     7ac:	ed 81       	ldd	r30, Y+5	; 0x05
     7ae:	fe 81       	ldd	r31, Y+6	; 0x06
     7b0:	80 a5       	ldd	r24, Z+40	; 0x28
     7b2:	91 a5       	ldd	r25, Z+41	; 0x29
     7b4:	9a 83       	std	Y+2, r25	; 0x02
     7b6:	89 83       	std	Y+1, r24	; 0x01
    sei();
     7b8:	78 94       	sei
    //Выполняем pmain
    pmain( arg );
     7ba:	89 81       	ldd	r24, Y+1	; 0x01
     7bc:	9a 81       	ldd	r25, Y+2	; 0x02
     7be:	eb 81       	ldd	r30, Y+3	; 0x03
     7c0:	fc 81       	ldd	r31, Y+4	; 0x04
     7c2:	09 95       	icall
    // Завершаем процесс
    cli(); // прерывания будут разрешены на выходе из _syscall()
     7c4:	f8 94       	cli
    syscall(6,(void *)proc);
     7c6:	2d 81       	ldd	r18, Y+5	; 0x05
     7c8:	3e 81       	ldd	r19, Y+6	; 0x06
     7ca:	86 e0       	ldi	r24, 0x06	; 6
     7cc:	b9 01       	movw	r22, r18
     7ce:	0e 94 03 02 	call	0x406	; 0x406 <syscall>
}
     7d2:	26 96       	adiw	r28, 0x06	; 6
     7d4:	0f b6       	in	r0, 0x3f	; 63
     7d6:	f8 94       	cli
     7d8:	de bf       	out	0x3e, r29	; 62
     7da:	0f be       	out	0x3f, r0	; 63
     7dc:	cd bf       	out	0x3d, r28	; 61
     7de:	cf 91       	pop	r28
     7e0:	df 91       	pop	r29
     7e2:	08 95       	ret

000007e4 <scall_proc_flag_stop>:
//---------------------------------------------------------------------------------------------
//7
void scall_proc_flag_stop( void * arg )
{
     7e4:	df 93       	push	r29
     7e6:	cf 93       	push	r28
     7e8:	00 d0       	rcall	.+0      	; 0x7ea <scall_proc_flag_stop+0x6>
     7ea:	cd b7       	in	r28, 0x3d	; 61
     7ec:	de b7       	in	r29, 0x3e	; 62
     7ee:	9a 83       	std	Y+2, r25	; 0x02
     7f0:	89 83       	std	Y+1, r24	; 0x01
    _proc_flag_stop_isr( *((flag_t *)arg) );
     7f2:	e9 81       	ldd	r30, Y+1	; 0x01
     7f4:	fa 81       	ldd	r31, Y+2	; 0x02
     7f6:	80 81       	ld	r24, Z
     7f8:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <_proc_flag_stop_isr>
}
     7fc:	0f 90       	pop	r0
     7fe:	0f 90       	pop	r0
     800:	cf 91       	pop	r28
     802:	df 91       	pop	r29
     804:	08 95       	ret

00000806 <scall_sig_init>:
///=================================================================
///                         Сигналы
//8
void scall_sig_init( void * arg )
{
     806:	df 93       	push	r29
     808:	cf 93       	push	r28
     80a:	00 d0       	rcall	.+0      	; 0x80c <scall_sig_init+0x6>
     80c:	cd b7       	in	r28, 0x3d	; 61
     80e:	de b7       	in	r29, 0x3e	; 62
     810:	9a 83       	std	Y+2, r25	; 0x02
     812:	89 83       	std	Y+1, r24	; 0x01
    sig_init_isr( (sig_t *)arg );
     814:	89 81       	ldd	r24, Y+1	; 0x01
     816:	9a 81       	ldd	r25, Y+2	; 0x02
     818:	0e 94 1e 10 	call	0x203c	; 0x203c <sig_init_isr>
}
     81c:	0f 90       	pop	r0
     81e:	0f 90       	pop	r0
     820:	cf 91       	pop	r28
     822:	df 91       	pop	r29
     824:	08 95       	ret

00000826 <scall_sig_wait>:
    syscall( 8, (void *)sig );
}
//---------------------------------------------------------------------------------------------
//9
void scall_sig_wait( void * arg )
{
     826:	df 93       	push	r29
     828:	cf 93       	push	r28
     82a:	00 d0       	rcall	.+0      	; 0x82c <scall_sig_wait+0x6>
     82c:	cd b7       	in	r28, 0x3d	; 61
     82e:	de b7       	in	r29, 0x3e	; 62
     830:	9a 83       	std	Y+2, r25	; 0x02
     832:	89 83       	std	Y+1, r24	; 0x01
    sig_wait_stage_1_isr( (sig_t *)arg );
     834:	89 81       	ldd	r24, Y+1	; 0x01
     836:	9a 81       	ldd	r25, Y+2	; 0x02
     838:	0e 94 2e 10 	call	0x205c	; 0x205c <sig_wait_stage_1_isr>
}
     83c:	0f 90       	pop	r0
     83e:	0f 90       	pop	r0
     840:	cf 91       	pop	r28
     842:	df 91       	pop	r29
     844:	08 95       	ret

00000846 <scall_sig_signal>:
    syscall( 7, (void *)&mask );/// Останов в случае необходимости
}
//---------------------------------------------------------------------------------------------
//10
void scall_sig_signal( void * arg )
{
     846:	df 93       	push	r29
     848:	cf 93       	push	r28
     84a:	00 d0       	rcall	.+0      	; 0x84c <scall_sig_signal+0x6>
     84c:	cd b7       	in	r28, 0x3d	; 61
     84e:	de b7       	in	r29, 0x3e	; 62
     850:	9a 83       	std	Y+2, r25	; 0x02
     852:	89 83       	std	Y+1, r24	; 0x01
    sig_signal_isr( (sig_t *)arg );
     854:	89 81       	ldd	r24, Y+1	; 0x01
     856:	9a 81       	ldd	r25, Y+2	; 0x02
     858:	0e 94 53 10 	call	0x20a6	; 0x20a6 <sig_signal_isr>
}
     85c:	0f 90       	pop	r0
     85e:	0f 90       	pop	r0
     860:	cf 91       	pop	r28
     862:	df 91       	pop	r29
     864:	08 95       	ret

00000866 <scall_sig_broadcast>:
    syscall( 10, (void *)sig );
}
//---------------------------------------------------------------------------------------------
//11
void scall_sig_broadcast( void * arg )
{
     866:	df 93       	push	r29
     868:	cf 93       	push	r28
     86a:	00 d0       	rcall	.+0      	; 0x86c <scall_sig_broadcast+0x6>
     86c:	cd b7       	in	r28, 0x3d	; 61
     86e:	de b7       	in	r29, 0x3e	; 62
     870:	9a 83       	std	Y+2, r25	; 0x02
     872:	89 83       	std	Y+1, r24	; 0x01
    sig_broadcast_isr( (sig_t *)arg );
     874:	89 81       	ldd	r24, Y+1	; 0x01
     876:	9a 81       	ldd	r25, Y+2	; 0x02
     878:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <sig_broadcast_isr>
}
     87c:	0f 90       	pop	r0
     87e:	0f 90       	pop	r0
     880:	cf 91       	pop	r28
     882:	df 91       	pop	r29
     884:	08 95       	ret

00000886 <scall_sem_init>:
}
///=================================================================
///                         Семафоры
//12
void scall_sem_init( void * arg )
{
     886:	df 93       	push	r29
     888:	cf 93       	push	r28
     88a:	00 d0       	rcall	.+0      	; 0x88c <scall_sem_init+0x6>
     88c:	cd b7       	in	r28, 0x3d	; 61
     88e:	de b7       	in	r29, 0x3e	; 62
     890:	9a 83       	std	Y+2, r25	; 0x02
     892:	89 83       	std	Y+1, r24	; 0x01
    sem_init_isr( ((sem_init_arg_t *)arg)->sem, ((sem_init_arg_t *)arg)->count );
     894:	e9 81       	ldd	r30, Y+1	; 0x01
     896:	fa 81       	ldd	r31, Y+2	; 0x02
     898:	80 81       	ld	r24, Z
     89a:	91 81       	ldd	r25, Z+1	; 0x01
     89c:	e9 81       	ldd	r30, Y+1	; 0x01
     89e:	fa 81       	ldd	r31, Y+2	; 0x02
     8a0:	22 81       	ldd	r18, Z+2	; 0x02
     8a2:	33 81       	ldd	r19, Z+3	; 0x03
     8a4:	b9 01       	movw	r22, r18
     8a6:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <sem_init_isr>
}
     8aa:	0f 90       	pop	r0
     8ac:	0f 90       	pop	r0
     8ae:	cf 91       	pop	r28
     8b0:	df 91       	pop	r29
     8b2:	08 95       	ret

000008b4 <scall_sem_lock>:
    syscall( 12, (void *)&scarg );
}
//----------------------------------------------------------------------
//13
void scall_sem_lock( void * arg )
{
     8b4:	0f 93       	push	r16
     8b6:	1f 93       	push	r17
     8b8:	df 93       	push	r29
     8ba:	cf 93       	push	r28
     8bc:	00 d0       	rcall	.+0      	; 0x8be <scall_sem_lock+0xa>
     8be:	cd b7       	in	r28, 0x3d	; 61
     8c0:	de b7       	in	r29, 0x3e	; 62
     8c2:	9a 83       	std	Y+2, r25	; 0x02
     8c4:	89 83       	std	Y+1, r24	; 0x01
    ((sem_lock_arg_t *)arg)->scall_ret = _sem_lock( ((sem_lock_arg_t *)arg)->sem );
     8c6:	09 81       	ldd	r16, Y+1	; 0x01
     8c8:	1a 81       	ldd	r17, Y+2	; 0x02
     8ca:	e9 81       	ldd	r30, Y+1	; 0x01
     8cc:	fa 81       	ldd	r31, Y+2	; 0x02
     8ce:	80 81       	ld	r24, Z
     8d0:	91 81       	ldd	r25, Z+1	; 0x01
     8d2:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <_sem_lock>
     8d6:	f8 01       	movw	r30, r16
     8d8:	82 83       	std	Z+2, r24	; 0x02
}
     8da:	0f 90       	pop	r0
     8dc:	0f 90       	pop	r0
     8de:	cf 91       	pop	r28
     8e0:	df 91       	pop	r29
     8e2:	1f 91       	pop	r17
     8e4:	0f 91       	pop	r16
     8e6:	08 95       	ret

000008e8 <scall_sem_unlock>:
    return scarg.scall_ret;
}
//----------------------------------------------------------------------
//14
void scall_sem_unlock( void * arg )
{
     8e8:	df 93       	push	r29
     8ea:	cf 93       	push	r28
     8ec:	00 d0       	rcall	.+0      	; 0x8ee <scall_sem_unlock+0x6>
     8ee:	cd b7       	in	r28, 0x3d	; 61
     8f0:	de b7       	in	r29, 0x3e	; 62
     8f2:	9a 83       	std	Y+2, r25	; 0x02
     8f4:	89 83       	std	Y+1, r24	; 0x01
    _sem_unlock( (sem_t *)arg );
     8f6:	89 81       	ldd	r24, Y+1	; 0x01
     8f8:	9a 81       	ldd	r25, Y+2	; 0x02
     8fa:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <_sem_unlock>
}
     8fe:	0f 90       	pop	r0
     900:	0f 90       	pop	r0
     902:	cf 91       	pop	r28
     904:	df 91       	pop	r29
     906:	08 95       	ret

00000908 <scall_mutex_init>:
}
///=================================================================
///                         Мьютексы
//15
void scall_mutex_init(void * arg)
{
     908:	df 93       	push	r29
     90a:	cf 93       	push	r28
     90c:	00 d0       	rcall	.+0      	; 0x90e <scall_mutex_init+0x6>
     90e:	cd b7       	in	r28, 0x3d	; 61
     910:	de b7       	in	r29, 0x3e	; 62
     912:	9a 83       	std	Y+2, r25	; 0x02
     914:	89 83       	std	Y+1, r24	; 0x01
    mutex_init_isr(
     916:	e9 81       	ldd	r30, Y+1	; 0x01
     918:	fa 81       	ldd	r31, Y+2	; 0x02
     91a:	80 81       	ld	r24, Z
     91c:	91 81       	ldd	r25, Z+1	; 0x01
     91e:	e9 81       	ldd	r30, Y+1	; 0x01
     920:	fa 81       	ldd	r31, Y+2	; 0x02
     922:	22 81       	ldd	r18, Z+2	; 0x02
     924:	62 2f       	mov	r22, r18
     926:	0e 94 15 0a 	call	0x142a	; 0x142a <mutex_init_isr>
               ((mutex_init_arg_t *)arg)->mutex
#ifdef CONFIG_USE_HIGHEST_LOCKER
               ,((mutex_init_arg_t *)arg)->prio
#endif // CONFIG_USE_HIGHEST_LOCKER
               );
}
     92a:	0f 90       	pop	r0
     92c:	0f 90       	pop	r0
     92e:	cf 91       	pop	r28
     930:	df 91       	pop	r29
     932:	08 95       	ret

00000934 <scall_mutex_lock>:
    syscall( 15, (void *)&scarg );
}
//----------------------------------------------------------------------
//16
void scall_mutex_lock(void * arg)
{
     934:	0f 93       	push	r16
     936:	1f 93       	push	r17
     938:	df 93       	push	r29
     93a:	cf 93       	push	r28
     93c:	00 d0       	rcall	.+0      	; 0x93e <scall_mutex_lock+0xa>
     93e:	cd b7       	in	r28, 0x3d	; 61
     940:	de b7       	in	r29, 0x3e	; 62
     942:	9a 83       	std	Y+2, r25	; 0x02
     944:	89 83       	std	Y+1, r24	; 0x01
    ((mutex_lock_arg_t *)arg)->scall_ret = _mutex_lock( ((mutex_lock_arg_t *)arg)->mutex );
     946:	09 81       	ldd	r16, Y+1	; 0x01
     948:	1a 81       	ldd	r17, Y+2	; 0x02
     94a:	e9 81       	ldd	r30, Y+1	; 0x01
     94c:	fa 81       	ldd	r31, Y+2	; 0x02
     94e:	80 81       	ld	r24, Z
     950:	91 81       	ldd	r25, Z+1	; 0x01
     952:	0e 94 30 0a 	call	0x1460	; 0x1460 <_mutex_lock>
     956:	f8 01       	movw	r30, r16
     958:	82 83       	std	Z+2, r24	; 0x02
}
     95a:	0f 90       	pop	r0
     95c:	0f 90       	pop	r0
     95e:	cf 91       	pop	r28
     960:	df 91       	pop	r29
     962:	1f 91       	pop	r17
     964:	0f 91       	pop	r16
     966:	08 95       	ret

00000968 <scall_mutex_try_lock>:
}
// Захват
//----------------------------------------------------------------------
//17
void scall_mutex_try_lock(void * arg)
{
     968:	0f 93       	push	r16
     96a:	1f 93       	push	r17
     96c:	df 93       	push	r29
     96e:	cf 93       	push	r28
     970:	00 d0       	rcall	.+0      	; 0x972 <scall_mutex_try_lock+0xa>
     972:	cd b7       	in	r28, 0x3d	; 61
     974:	de b7       	in	r29, 0x3e	; 62
     976:	9a 83       	std	Y+2, r25	; 0x02
     978:	89 83       	std	Y+1, r24	; 0x01
    ((mutex_lock_arg_t *)arg)->scall_ret = _mutex_try_lock( ((mutex_lock_arg_t *)arg)->mutex );
     97a:	09 81       	ldd	r16, Y+1	; 0x01
     97c:	1a 81       	ldd	r17, Y+2	; 0x02
     97e:	e9 81       	ldd	r30, Y+1	; 0x01
     980:	fa 81       	ldd	r31, Y+2	; 0x02
     982:	80 81       	ld	r24, Z
     984:	91 81       	ldd	r25, Z+1	; 0x01
     986:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <_mutex_try_lock>
     98a:	f8 01       	movw	r30, r16
     98c:	82 83       	std	Z+2, r24	; 0x02
}
     98e:	0f 90       	pop	r0
     990:	0f 90       	pop	r0
     992:	cf 91       	pop	r28
     994:	df 91       	pop	r29
     996:	1f 91       	pop	r17
     998:	0f 91       	pop	r16
     99a:	08 95       	ret

0000099c <scall_mutex_unlock>:
    return scarg.scall_ret;
}
//----------------------------------------------------------------------
//18
void scall_mutex_unlock(void * arg)
{
     99c:	df 93       	push	r29
     99e:	cf 93       	push	r28
     9a0:	00 d0       	rcall	.+0      	; 0x9a2 <scall_mutex_unlock+0x6>
     9a2:	cd b7       	in	r28, 0x3d	; 61
     9a4:	de b7       	in	r29, 0x3e	; 62
     9a6:	9a 83       	std	Y+2, r25	; 0x02
     9a8:	89 83       	std	Y+1, r24	; 0x01
    _mutex_unlock( (mutex_t *)arg );
     9aa:	89 81       	ldd	r24, Y+1	; 0x01
     9ac:	9a 81       	ldd	r25, Y+2	; 0x02
     9ae:	0e 94 a4 0a 	call	0x1548	; 0x1548 <_mutex_unlock>
}
     9b2:	0f 90       	pop	r0
     9b4:	0f 90       	pop	r0
     9b6:	cf 91       	pop	r28
     9b8:	df 91       	pop	r29
     9ba:	08 95       	ret

000009bc <osbme_init_stack>:
*                                                                                        *
*****************************************************************************************/
#include <avr/io.h>
#include "../../osbme.h"
void * osbme_init_stack( void * top_of_stack, osbme_code_t code, void * arg )
{
     9bc:	df 93       	push	r29
     9be:	cf 93       	push	r28
     9c0:	cd b7       	in	r28, 0x3d	; 61
     9c2:	de b7       	in	r29, 0x3e	; 62
     9c4:	2a 97       	sbiw	r28, 0x0a	; 10
     9c6:	0f b6       	in	r0, 0x3f	; 63
     9c8:	f8 94       	cli
     9ca:	de bf       	out	0x3e, r29	; 62
     9cc:	0f be       	out	0x3f, r0	; 63
     9ce:	cd bf       	out	0x3d, r28	; 61
     9d0:	9e 83       	std	Y+6, r25	; 0x06
     9d2:	8d 83       	std	Y+5, r24	; 0x05
     9d4:	78 87       	std	Y+8, r23	; 0x08
     9d6:	6f 83       	std	Y+7, r22	; 0x07
     9d8:	5a 87       	std	Y+10, r21	; 0x0a
     9da:	49 87       	std	Y+9, r20	; 0x09
    char * tos = (char *)top_of_stack;
     9dc:	8d 81       	ldd	r24, Y+5	; 0x05
     9de:	9e 81       	ldd	r25, Y+6	; 0x06
     9e0:	9c 83       	std	Y+4, r25	; 0x04
     9e2:	8b 83       	std	Y+3, r24	; 0x03
    //*tos-- = 0x11;
    //*tos-- = 0x22;
    //*tos-- = 0x33;

    // return address
    unsigned short tmp = (unsigned short)code;
     9e4:	8f 81       	ldd	r24, Y+7	; 0x07
     9e6:	98 85       	ldd	r25, Y+8	; 0x08
     9e8:	9a 83       	std	Y+2, r25	; 0x02
     9ea:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (char)(tmp&(unsigned short)0x00ff);
     9ec:	89 81       	ldd	r24, Y+1	; 0x01
     9ee:	eb 81       	ldd	r30, Y+3	; 0x03
     9f0:	fc 81       	ldd	r31, Y+4	; 0x04
     9f2:	80 83       	st	Z, r24
     9f4:	8b 81       	ldd	r24, Y+3	; 0x03
     9f6:	9c 81       	ldd	r25, Y+4	; 0x04
     9f8:	01 97       	sbiw	r24, 0x01	; 1
     9fa:	9c 83       	std	Y+4, r25	; 0x04
     9fc:	8b 83       	std	Y+3, r24	; 0x03
    tmp>>=8;
     9fe:	89 81       	ldd	r24, Y+1	; 0x01
     a00:	9a 81       	ldd	r25, Y+2	; 0x02
     a02:	89 2f       	mov	r24, r25
     a04:	99 27       	eor	r25, r25
     a06:	9a 83       	std	Y+2, r25	; 0x02
     a08:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (char)(tmp&(unsigned short)0x00ff);
     a0a:	89 81       	ldd	r24, Y+1	; 0x01
     a0c:	eb 81       	ldd	r30, Y+3	; 0x03
     a0e:	fc 81       	ldd	r31, Y+4	; 0x04
     a10:	80 83       	st	Z, r24
     a12:	8b 81       	ldd	r24, Y+3	; 0x03
     a14:	9c 81       	ldd	r25, Y+4	; 0x04
     a16:	01 97       	sbiw	r24, 0x01	; 1
     a18:	9c 83       	std	Y+4, r25	; 0x04
     a1a:	8b 83       	std	Y+3, r24	; 0x03

    // s
    *tos-- = 0x00;
     a1c:	eb 81       	ldd	r30, Y+3	; 0x03
     a1e:	fc 81       	ldd	r31, Y+4	; 0x04
     a20:	10 82       	st	Z, r1
     a22:	8b 81       	ldd	r24, Y+3	; 0x03
     a24:	9c 81       	ldd	r25, Y+4	; 0x04
     a26:	01 97       	sbiw	r24, 0x01	; 1
     a28:	9c 83       	std	Y+4, r25	; 0x04
     a2a:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x00;// r1 must B 0
     a2c:	eb 81       	ldd	r30, Y+3	; 0x03
     a2e:	fc 81       	ldd	r31, Y+4	; 0x04
     a30:	10 82       	st	Z, r1
     a32:	8b 81       	ldd	r24, Y+3	; 0x03
     a34:	9c 81       	ldd	r25, Y+4	; 0x04
     a36:	01 97       	sbiw	r24, 0x01	; 1
     a38:	9c 83       	std	Y+4, r25	; 0x04
     a3a:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x02;// r2
     a3c:	eb 81       	ldd	r30, Y+3	; 0x03
     a3e:	fc 81       	ldd	r31, Y+4	; 0x04
     a40:	82 e0       	ldi	r24, 0x02	; 2
     a42:	80 83       	st	Z, r24
     a44:	8b 81       	ldd	r24, Y+3	; 0x03
     a46:	9c 81       	ldd	r25, Y+4	; 0x04
     a48:	01 97       	sbiw	r24, 0x01	; 1
     a4a:	9c 83       	std	Y+4, r25	; 0x04
     a4c:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x80;// SREG: enable interrupts
     a4e:	eb 81       	ldd	r30, Y+3	; 0x03
     a50:	fc 81       	ldd	r31, Y+4	; 0x04
     a52:	80 e8       	ldi	r24, 0x80	; 128
     a54:	80 83       	st	Z, r24
     a56:	8b 81       	ldd	r24, Y+3	; 0x03
     a58:	9c 81       	ldd	r25, Y+4	; 0x04
     a5a:	01 97       	sbiw	r24, 0x01	; 1
     a5c:	9c 83       	std	Y+4, r25	; 0x04
     a5e:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x03;
     a60:	eb 81       	ldd	r30, Y+3	; 0x03
     a62:	fc 81       	ldd	r31, Y+4	; 0x04
     a64:	83 e0       	ldi	r24, 0x03	; 3
     a66:	80 83       	st	Z, r24
     a68:	8b 81       	ldd	r24, Y+3	; 0x03
     a6a:	9c 81       	ldd	r25, Y+4	; 0x04
     a6c:	01 97       	sbiw	r24, 0x01	; 1
     a6e:	9c 83       	std	Y+4, r25	; 0x04
     a70:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x04;
     a72:	eb 81       	ldd	r30, Y+3	; 0x03
     a74:	fc 81       	ldd	r31, Y+4	; 0x04
     a76:	84 e0       	ldi	r24, 0x04	; 4
     a78:	80 83       	st	Z, r24
     a7a:	8b 81       	ldd	r24, Y+3	; 0x03
     a7c:	9c 81       	ldd	r25, Y+4	; 0x04
     a7e:	01 97       	sbiw	r24, 0x01	; 1
     a80:	9c 83       	std	Y+4, r25	; 0x04
     a82:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x05;
     a84:	eb 81       	ldd	r30, Y+3	; 0x03
     a86:	fc 81       	ldd	r31, Y+4	; 0x04
     a88:	85 e0       	ldi	r24, 0x05	; 5
     a8a:	80 83       	st	Z, r24
     a8c:	8b 81       	ldd	r24, Y+3	; 0x03
     a8e:	9c 81       	ldd	r25, Y+4	; 0x04
     a90:	01 97       	sbiw	r24, 0x01	; 1
     a92:	9c 83       	std	Y+4, r25	; 0x04
     a94:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x06;
     a96:	eb 81       	ldd	r30, Y+3	; 0x03
     a98:	fc 81       	ldd	r31, Y+4	; 0x04
     a9a:	86 e0       	ldi	r24, 0x06	; 6
     a9c:	80 83       	st	Z, r24
     a9e:	8b 81       	ldd	r24, Y+3	; 0x03
     aa0:	9c 81       	ldd	r25, Y+4	; 0x04
     aa2:	01 97       	sbiw	r24, 0x01	; 1
     aa4:	9c 83       	std	Y+4, r25	; 0x04
     aa6:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x07;
     aa8:	eb 81       	ldd	r30, Y+3	; 0x03
     aaa:	fc 81       	ldd	r31, Y+4	; 0x04
     aac:	87 e0       	ldi	r24, 0x07	; 7
     aae:	80 83       	st	Z, r24
     ab0:	8b 81       	ldd	r24, Y+3	; 0x03
     ab2:	9c 81       	ldd	r25, Y+4	; 0x04
     ab4:	01 97       	sbiw	r24, 0x01	; 1
     ab6:	9c 83       	std	Y+4, r25	; 0x04
     ab8:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x08;
     aba:	eb 81       	ldd	r30, Y+3	; 0x03
     abc:	fc 81       	ldd	r31, Y+4	; 0x04
     abe:	88 e0       	ldi	r24, 0x08	; 8
     ac0:	80 83       	st	Z, r24
     ac2:	8b 81       	ldd	r24, Y+3	; 0x03
     ac4:	9c 81       	ldd	r25, Y+4	; 0x04
     ac6:	01 97       	sbiw	r24, 0x01	; 1
     ac8:	9c 83       	std	Y+4, r25	; 0x04
     aca:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x09;
     acc:	eb 81       	ldd	r30, Y+3	; 0x03
     ace:	fc 81       	ldd	r31, Y+4	; 0x04
     ad0:	89 e0       	ldi	r24, 0x09	; 9
     ad2:	80 83       	st	Z, r24
     ad4:	8b 81       	ldd	r24, Y+3	; 0x03
     ad6:	9c 81       	ldd	r25, Y+4	; 0x04
     ad8:	01 97       	sbiw	r24, 0x01	; 1
     ada:	9c 83       	std	Y+4, r25	; 0x04
     adc:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x10;
     ade:	eb 81       	ldd	r30, Y+3	; 0x03
     ae0:	fc 81       	ldd	r31, Y+4	; 0x04
     ae2:	80 e1       	ldi	r24, 0x10	; 16
     ae4:	80 83       	st	Z, r24
     ae6:	8b 81       	ldd	r24, Y+3	; 0x03
     ae8:	9c 81       	ldd	r25, Y+4	; 0x04
     aea:	01 97       	sbiw	r24, 0x01	; 1
     aec:	9c 83       	std	Y+4, r25	; 0x04
     aee:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x11;
     af0:	eb 81       	ldd	r30, Y+3	; 0x03
     af2:	fc 81       	ldd	r31, Y+4	; 0x04
     af4:	81 e1       	ldi	r24, 0x11	; 17
     af6:	80 83       	st	Z, r24
     af8:	8b 81       	ldd	r24, Y+3	; 0x03
     afa:	9c 81       	ldd	r25, Y+4	; 0x04
     afc:	01 97       	sbiw	r24, 0x01	; 1
     afe:	9c 83       	std	Y+4, r25	; 0x04
     b00:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x12;
     b02:	eb 81       	ldd	r30, Y+3	; 0x03
     b04:	fc 81       	ldd	r31, Y+4	; 0x04
     b06:	82 e1       	ldi	r24, 0x12	; 18
     b08:	80 83       	st	Z, r24
     b0a:	8b 81       	ldd	r24, Y+3	; 0x03
     b0c:	9c 81       	ldd	r25, Y+4	; 0x04
     b0e:	01 97       	sbiw	r24, 0x01	; 1
     b10:	9c 83       	std	Y+4, r25	; 0x04
     b12:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x13;
     b14:	eb 81       	ldd	r30, Y+3	; 0x03
     b16:	fc 81       	ldd	r31, Y+4	; 0x04
     b18:	83 e1       	ldi	r24, 0x13	; 19
     b1a:	80 83       	st	Z, r24
     b1c:	8b 81       	ldd	r24, Y+3	; 0x03
     b1e:	9c 81       	ldd	r25, Y+4	; 0x04
     b20:	01 97       	sbiw	r24, 0x01	; 1
     b22:	9c 83       	std	Y+4, r25	; 0x04
     b24:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x14;
     b26:	eb 81       	ldd	r30, Y+3	; 0x03
     b28:	fc 81       	ldd	r31, Y+4	; 0x04
     b2a:	84 e1       	ldi	r24, 0x14	; 20
     b2c:	80 83       	st	Z, r24
     b2e:	8b 81       	ldd	r24, Y+3	; 0x03
     b30:	9c 81       	ldd	r25, Y+4	; 0x04
     b32:	01 97       	sbiw	r24, 0x01	; 1
     b34:	9c 83       	std	Y+4, r25	; 0x04
     b36:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x15;
     b38:	eb 81       	ldd	r30, Y+3	; 0x03
     b3a:	fc 81       	ldd	r31, Y+4	; 0x04
     b3c:	85 e1       	ldi	r24, 0x15	; 21
     b3e:	80 83       	st	Z, r24
     b40:	8b 81       	ldd	r24, Y+3	; 0x03
     b42:	9c 81       	ldd	r25, Y+4	; 0x04
     b44:	01 97       	sbiw	r24, 0x01	; 1
     b46:	9c 83       	std	Y+4, r25	; 0x04
     b48:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x16;
     b4a:	eb 81       	ldd	r30, Y+3	; 0x03
     b4c:	fc 81       	ldd	r31, Y+4	; 0x04
     b4e:	86 e1       	ldi	r24, 0x16	; 22
     b50:	80 83       	st	Z, r24
     b52:	8b 81       	ldd	r24, Y+3	; 0x03
     b54:	9c 81       	ldd	r25, Y+4	; 0x04
     b56:	01 97       	sbiw	r24, 0x01	; 1
     b58:	9c 83       	std	Y+4, r25	; 0x04
     b5a:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x17;
     b5c:	eb 81       	ldd	r30, Y+3	; 0x03
     b5e:	fc 81       	ldd	r31, Y+4	; 0x04
     b60:	87 e1       	ldi	r24, 0x17	; 23
     b62:	80 83       	st	Z, r24
     b64:	8b 81       	ldd	r24, Y+3	; 0x03
     b66:	9c 81       	ldd	r25, Y+4	; 0x04
     b68:	01 97       	sbiw	r24, 0x01	; 1
     b6a:	9c 83       	std	Y+4, r25	; 0x04
     b6c:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x18;
     b6e:	eb 81       	ldd	r30, Y+3	; 0x03
     b70:	fc 81       	ldd	r31, Y+4	; 0x04
     b72:	88 e1       	ldi	r24, 0x18	; 24
     b74:	80 83       	st	Z, r24
     b76:	8b 81       	ldd	r24, Y+3	; 0x03
     b78:	9c 81       	ldd	r25, Y+4	; 0x04
     b7a:	01 97       	sbiw	r24, 0x01	; 1
     b7c:	9c 83       	std	Y+4, r25	; 0x04
     b7e:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x19;
     b80:	eb 81       	ldd	r30, Y+3	; 0x03
     b82:	fc 81       	ldd	r31, Y+4	; 0x04
     b84:	89 e1       	ldi	r24, 0x19	; 25
     b86:	80 83       	st	Z, r24
     b88:	8b 81       	ldd	r24, Y+3	; 0x03
     b8a:	9c 81       	ldd	r25, Y+4	; 0x04
     b8c:	01 97       	sbiw	r24, 0x01	; 1
     b8e:	9c 83       	std	Y+4, r25	; 0x04
     b90:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x20;
     b92:	eb 81       	ldd	r30, Y+3	; 0x03
     b94:	fc 81       	ldd	r31, Y+4	; 0x04
     b96:	80 e2       	ldi	r24, 0x20	; 32
     b98:	80 83       	st	Z, r24
     b9a:	8b 81       	ldd	r24, Y+3	; 0x03
     b9c:	9c 81       	ldd	r25, Y+4	; 0x04
     b9e:	01 97       	sbiw	r24, 0x01	; 1
     ba0:	9c 83       	std	Y+4, r25	; 0x04
     ba2:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x21;
     ba4:	eb 81       	ldd	r30, Y+3	; 0x03
     ba6:	fc 81       	ldd	r31, Y+4	; 0x04
     ba8:	81 e2       	ldi	r24, 0x21	; 33
     baa:	80 83       	st	Z, r24
     bac:	8b 81       	ldd	r24, Y+3	; 0x03
     bae:	9c 81       	ldd	r25, Y+4	; 0x04
     bb0:	01 97       	sbiw	r24, 0x01	; 1
     bb2:	9c 83       	std	Y+4, r25	; 0x04
     bb4:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x22;
     bb6:	eb 81       	ldd	r30, Y+3	; 0x03
     bb8:	fc 81       	ldd	r31, Y+4	; 0x04
     bba:	82 e2       	ldi	r24, 0x22	; 34
     bbc:	80 83       	st	Z, r24
     bbe:	8b 81       	ldd	r24, Y+3	; 0x03
     bc0:	9c 81       	ldd	r25, Y+4	; 0x04
     bc2:	01 97       	sbiw	r24, 0x01	; 1
     bc4:	9c 83       	std	Y+4, r25	; 0x04
     bc6:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x23;
     bc8:	eb 81       	ldd	r30, Y+3	; 0x03
     bca:	fc 81       	ldd	r31, Y+4	; 0x04
     bcc:	83 e2       	ldi	r24, 0x23	; 35
     bce:	80 83       	st	Z, r24
     bd0:	8b 81       	ldd	r24, Y+3	; 0x03
     bd2:	9c 81       	ldd	r25, Y+4	; 0x04
     bd4:	01 97       	sbiw	r24, 0x01	; 1
     bd6:	9c 83       	std	Y+4, r25	; 0x04
     bd8:	8b 83       	std	Y+3, r24	; 0x03

    tmp = (unsigned short)arg;
     bda:	89 85       	ldd	r24, Y+9	; 0x09
     bdc:	9a 85       	ldd	r25, Y+10	; 0x0a
     bde:	9a 83       	std	Y+2, r25	; 0x02
     be0:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (char)(tmp&(unsigned short)0x00ff); // r24 LSByte of arg
     be2:	89 81       	ldd	r24, Y+1	; 0x01
     be4:	eb 81       	ldd	r30, Y+3	; 0x03
     be6:	fc 81       	ldd	r31, Y+4	; 0x04
     be8:	80 83       	st	Z, r24
     bea:	8b 81       	ldd	r24, Y+3	; 0x03
     bec:	9c 81       	ldd	r25, Y+4	; 0x04
     bee:	01 97       	sbiw	r24, 0x01	; 1
     bf0:	9c 83       	std	Y+4, r25	; 0x04
     bf2:	8b 83       	std	Y+3, r24	; 0x03
    tmp>>=8;
     bf4:	89 81       	ldd	r24, Y+1	; 0x01
     bf6:	9a 81       	ldd	r25, Y+2	; 0x02
     bf8:	89 2f       	mov	r24, r25
     bfa:	99 27       	eor	r25, r25
     bfc:	9a 83       	std	Y+2, r25	; 0x02
     bfe:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (char)(tmp&(unsigned short)0x00ff); // r25 MSByte of arg
     c00:	89 81       	ldd	r24, Y+1	; 0x01
     c02:	eb 81       	ldd	r30, Y+3	; 0x03
     c04:	fc 81       	ldd	r31, Y+4	; 0x04
     c06:	80 83       	st	Z, r24
     c08:	8b 81       	ldd	r24, Y+3	; 0x03
     c0a:	9c 81       	ldd	r25, Y+4	; 0x04
     c0c:	01 97       	sbiw	r24, 0x01	; 1
     c0e:	9c 83       	std	Y+4, r25	; 0x04
     c10:	8b 83       	std	Y+3, r24	; 0x03

    *tos-- = 0x26;
     c12:	eb 81       	ldd	r30, Y+3	; 0x03
     c14:	fc 81       	ldd	r31, Y+4	; 0x04
     c16:	86 e2       	ldi	r24, 0x26	; 38
     c18:	80 83       	st	Z, r24
     c1a:	8b 81       	ldd	r24, Y+3	; 0x03
     c1c:	9c 81       	ldd	r25, Y+4	; 0x04
     c1e:	01 97       	sbiw	r24, 0x01	; 1
     c20:	9c 83       	std	Y+4, r25	; 0x04
     c22:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x27;
     c24:	eb 81       	ldd	r30, Y+3	; 0x03
     c26:	fc 81       	ldd	r31, Y+4	; 0x04
     c28:	87 e2       	ldi	r24, 0x27	; 39
     c2a:	80 83       	st	Z, r24
     c2c:	8b 81       	ldd	r24, Y+3	; 0x03
     c2e:	9c 81       	ldd	r25, Y+4	; 0x04
     c30:	01 97       	sbiw	r24, 0x01	; 1
     c32:	9c 83       	std	Y+4, r25	; 0x04
     c34:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x28;
     c36:	eb 81       	ldd	r30, Y+3	; 0x03
     c38:	fc 81       	ldd	r31, Y+4	; 0x04
     c3a:	88 e2       	ldi	r24, 0x28	; 40
     c3c:	80 83       	st	Z, r24
     c3e:	8b 81       	ldd	r24, Y+3	; 0x03
     c40:	9c 81       	ldd	r25, Y+4	; 0x04
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	9c 83       	std	Y+4, r25	; 0x04
     c46:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x29;
     c48:	eb 81       	ldd	r30, Y+3	; 0x03
     c4a:	fc 81       	ldd	r31, Y+4	; 0x04
     c4c:	89 e2       	ldi	r24, 0x29	; 41
     c4e:	80 83       	st	Z, r24
     c50:	8b 81       	ldd	r24, Y+3	; 0x03
     c52:	9c 81       	ldd	r25, Y+4	; 0x04
     c54:	01 97       	sbiw	r24, 0x01	; 1
     c56:	9c 83       	std	Y+4, r25	; 0x04
     c58:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x30;
     c5a:	eb 81       	ldd	r30, Y+3	; 0x03
     c5c:	fc 81       	ldd	r31, Y+4	; 0x04
     c5e:	80 e3       	ldi	r24, 0x30	; 48
     c60:	80 83       	st	Z, r24
     c62:	8b 81       	ldd	r24, Y+3	; 0x03
     c64:	9c 81       	ldd	r25, Y+4	; 0x04
     c66:	01 97       	sbiw	r24, 0x01	; 1
     c68:	9c 83       	std	Y+4, r25	; 0x04
     c6a:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x31;
     c6c:	eb 81       	ldd	r30, Y+3	; 0x03
     c6e:	fc 81       	ldd	r31, Y+4	; 0x04
     c70:	81 e3       	ldi	r24, 0x31	; 49
     c72:	80 83       	st	Z, r24
     c74:	8b 81       	ldd	r24, Y+3	; 0x03
     c76:	9c 81       	ldd	r25, Y+4	; 0x04
     c78:	01 97       	sbiw	r24, 0x01	; 1
     c7a:	9c 83       	std	Y+4, r25	; 0x04
     c7c:	8b 83       	std	Y+3, r24	; 0x03
#ifdef RAMPZ
    *tos-- = 0xff;
#endif
    return((void *)tos);
     c7e:	8b 81       	ldd	r24, Y+3	; 0x03
     c80:	9c 81       	ldd	r25, Y+4	; 0x04
}
     c82:	2a 96       	adiw	r28, 0x0a	; 10
     c84:	0f b6       	in	r0, 0x3f	; 63
     c86:	f8 94       	cli
     c88:	de bf       	out	0x3e, r29	; 62
     c8a:	0f be       	out	0x3f, r0	; 63
     c8c:	cd bf       	out	0x3d, r28	; 61
     c8e:	cf 91       	pop	r28
     c90:	df 91       	pop	r29
     c92:	08 95       	ret

00000c94 <enter_crit_sec>:
    if( kernel.sched[core].nested_crit_sec == (count_t)0 )enable_interrupts();
}

#else
void enter_crit_sec(void)
{
     c94:	df 93       	push	r29
     c96:	cf 93       	push	r28
     c98:	cd b7       	in	r28, 0x3d	; 61
     c9a:	de b7       	in	r29, 0x3e	; 62
    disable_interrupts();
     c9c:	0e 94 c4 00 	call	0x188	; 0x188 <disable_interrupts>
    kernel.sched.nested_crit_sec++;
     ca0:	80 91 40 01 	lds	r24, 0x0140
     ca4:	90 91 41 01 	lds	r25, 0x0141
     ca8:	01 96       	adiw	r24, 0x01	; 1
     caa:	90 93 41 01 	sts	0x0141, r25
     cae:	80 93 40 01 	sts	0x0140, r24
}
     cb2:	cf 91       	pop	r28
     cb4:	df 91       	pop	r29
     cb6:	08 95       	ret

00000cb8 <exit_crit_sec>:
void exit_crit_sec(void)
{
     cb8:	df 93       	push	r29
     cba:	cf 93       	push	r28
     cbc:	cd b7       	in	r28, 0x3d	; 61
     cbe:	de b7       	in	r29, 0x3e	; 62
    if( kernel.sched.nested_crit_sec != (count_t)0 )kernel.sched.nested_crit_sec--;
     cc0:	80 91 40 01 	lds	r24, 0x0140
     cc4:	90 91 41 01 	lds	r25, 0x0141
     cc8:	00 97       	sbiw	r24, 0x00	; 0
     cca:	49 f0       	breq	.+18     	; 0xcde <exit_crit_sec+0x26>
     ccc:	80 91 40 01 	lds	r24, 0x0140
     cd0:	90 91 41 01 	lds	r25, 0x0141
     cd4:	01 97       	sbiw	r24, 0x01	; 1
     cd6:	90 93 41 01 	sts	0x0141, r25
     cda:	80 93 40 01 	sts	0x0140, r24
    if( kernel.sched.nested_crit_sec == (count_t)0 )enable_interrupts();
     cde:	80 91 40 01 	lds	r24, 0x0140
     ce2:	90 91 41 01 	lds	r25, 0x0141
     ce6:	00 97       	sbiw	r24, 0x00	; 0
     ce8:	11 f4       	brne	.+4      	; 0xcee <exit_crit_sec+0x36>
     cea:	0e 94 cc 00 	call	0x198	; 0x198 <enable_interrupts>
}
     cee:	cf 91       	pop	r28
     cf0:	df 91       	pop	r29
     cf2:	08 95       	ret

00000cf4 <gitem_init>:
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
// Инициация
void gitem_init(gitem_t * gitem, prio_t prio)
{
     cf4:	df 93       	push	r29
     cf6:	cf 93       	push	r28
     cf8:	00 d0       	rcall	.+0      	; 0xcfa <gitem_init+0x6>
     cfa:	00 d0       	rcall	.+0      	; 0xcfc <gitem_init+0x8>
     cfc:	0f 92       	push	r0
     cfe:	cd b7       	in	r28, 0x3d	; 61
     d00:	de b7       	in	r29, 0x3e	; 62
     d02:	9c 83       	std	Y+4, r25	; 0x04
     d04:	8b 83       	std	Y+3, r24	; 0x03
     d06:	6d 83       	std	Y+5, r22	; 0x05
    group_t * group = &gitem->grp;
     d08:	8b 81       	ldd	r24, Y+3	; 0x03
     d0a:	9c 81       	ldd	r25, Y+4	; 0x04
     d0c:	06 96       	adiw	r24, 0x06	; 6
     d0e:	9a 83       	std	Y+2, r25	; 0x02
     d10:	89 83       	std	Y+1, r24	; 0x01
    item_init( (item_t *)gitem );
     d12:	8b 81       	ldd	r24, Y+3	; 0x03
     d14:	9c 81       	ldd	r25, Y+4	; 0x04
     d16:	0e 94 60 09 	call	0x12c0	; 0x12c0 <item_init>
    group_init( group, prio );
     d1a:	89 81       	ldd	r24, Y+1	; 0x01
     d1c:	9a 81       	ldd	r25, Y+2	; 0x02
     d1e:	6d 81       	ldd	r22, Y+5	; 0x05
     d20:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <group_init>
    gitem->group = group;
     d24:	eb 81       	ldd	r30, Y+3	; 0x03
     d26:	fc 81       	ldd	r31, Y+4	; 0x04
     d28:	89 81       	ldd	r24, Y+1	; 0x01
     d2a:	9a 81       	ldd	r25, Y+2	; 0x02
     d2c:	95 83       	std	Z+5, r25	; 0x05
     d2e:	84 83       	std	Z+4, r24	; 0x04
}
     d30:	0f 90       	pop	r0
     d32:	0f 90       	pop	r0
     d34:	0f 90       	pop	r0
     d36:	0f 90       	pop	r0
     d38:	0f 90       	pop	r0
     d3a:	cf 91       	pop	r28
     d3c:	df 91       	pop	r29
     d3e:	08 95       	ret

00000d40 <gitem_insert>:
// Вставить в список
void gitem_insert(gitem_t * gitem, xlist_t *xlist)
{
     d40:	df 93       	push	r29
     d42:	cf 93       	push	r28
     d44:	cd b7       	in	r28, 0x3d	; 61
     d46:	de b7       	in	r29, 0x3e	; 62
     d48:	28 97       	sbiw	r28, 0x08	; 8
     d4a:	0f b6       	in	r0, 0x3f	; 63
     d4c:	f8 94       	cli
     d4e:	de bf       	out	0x3e, r29	; 62
     d50:	0f be       	out	0x3f, r0	; 63
     d52:	cd bf       	out	0x3d, r28	; 61
     d54:	9e 83       	std	Y+6, r25	; 0x06
     d56:	8d 83       	std	Y+5, r24	; 0x05
     d58:	78 87       	std	Y+8, r23	; 0x08
     d5a:	6f 83       	std	Y+7, r22	; 0x07
    prio_t prio = gitem->group->prio;
     d5c:	ed 81       	ldd	r30, Y+5	; 0x05
     d5e:	fe 81       	ldd	r31, Y+6	; 0x06
     d60:	04 80       	ldd	r0, Z+4	; 0x04
     d62:	f5 81       	ldd	r31, Z+5	; 0x05
     d64:	e0 2d       	mov	r30, r0
     d66:	82 81       	ldd	r24, Z+2	; 0x02
     d68:	8c 83       	std	Y+4, r24	; 0x04
    index_t mask = ((index_t)1)<<prio;
     d6a:	8c 81       	ldd	r24, Y+4	; 0x04
     d6c:	28 2f       	mov	r18, r24
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	02 c0       	rjmp	.+4      	; 0xd7a <gitem_insert+0x3a>
     d76:	88 0f       	add	r24, r24
     d78:	99 1f       	adc	r25, r25
     d7a:	2a 95       	dec	r18
     d7c:	e2 f7       	brpl	.-8      	; 0xd76 <gitem_insert+0x36>
     d7e:	8b 83       	std	Y+3, r24	; 0x03
    item_t ** head = (item_t **)xlist + prio;
     d80:	2f 81       	ldd	r18, Y+7	; 0x07
     d82:	38 85       	ldd	r19, Y+8	; 0x08
     d84:	8c 81       	ldd	r24, Y+4	; 0x04
     d86:	88 2f       	mov	r24, r24
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	88 0f       	add	r24, r24
     d8c:	99 1f       	adc	r25, r25
     d8e:	82 0f       	add	r24, r18
     d90:	93 1f       	adc	r25, r19
     d92:	9a 83       	std	Y+2, r25	; 0x02
     d94:	89 83       	std	Y+1, r24	; 0x01
    // Пуста ли часть списка с таким приоритетом
    if( ( xlist->index )& mask)
     d96:	ef 81       	ldd	r30, Y+7	; 0x07
     d98:	f8 85       	ldd	r31, Y+8	; 0x08
     d9a:	90 89       	ldd	r25, Z+16	; 0x10
     d9c:	8b 81       	ldd	r24, Y+3	; 0x03
     d9e:	89 23       	and	r24, r25
     da0:	88 23       	and	r24, r24
     da2:	51 f0       	breq	.+20     	; 0xdb8 <gitem_insert+0x78>
    {
        //Не пуста вставляем туда gitem
        item_insert( (item_t *)gitem, *head );
     da4:	8d 81       	ldd	r24, Y+5	; 0x05
     da6:	9e 81       	ldd	r25, Y+6	; 0x06
     da8:	e9 81       	ldd	r30, Y+1	; 0x01
     daa:	fa 81       	ldd	r31, Y+2	; 0x02
     dac:	20 81       	ld	r18, Z
     dae:	31 81       	ldd	r19, Z+1	; 0x01
     db0:	b9 01       	movw	r22, r18
     db2:	0e 94 78 09 	call	0x12f0	; 0x12f0 <item_insert>
     db6:	0e c0       	rjmp	.+28     	; 0xdd4 <gitem_insert+0x94>
    }
    else
    {
        // Пуста, gitem будет головой
        *head = (item_t *)gitem;
     db8:	8d 81       	ldd	r24, Y+5	; 0x05
     dba:	9e 81       	ldd	r25, Y+6	; 0x06
     dbc:	e9 81       	ldd	r30, Y+1	; 0x01
     dbe:	fa 81       	ldd	r31, Y+2	; 0x02
     dc0:	91 83       	std	Z+1, r25	; 0x01
     dc2:	80 83       	st	Z, r24
        xlist->index |= mask;
     dc4:	ef 81       	ldd	r30, Y+7	; 0x07
     dc6:	f8 85       	ldd	r31, Y+8	; 0x08
     dc8:	90 89       	ldd	r25, Z+16	; 0x10
     dca:	8b 81       	ldd	r24, Y+3	; 0x03
     dcc:	89 2b       	or	r24, r25
     dce:	ef 81       	ldd	r30, Y+7	; 0x07
     dd0:	f8 85       	ldd	r31, Y+8	; 0x08
     dd2:	80 8b       	std	Z+16, r24	; 0x10
    }
    gitem->group->link = (void *)xlist;
     dd4:	ed 81       	ldd	r30, Y+5	; 0x05
     dd6:	fe 81       	ldd	r31, Y+6	; 0x06
     dd8:	04 80       	ldd	r0, Z+4	; 0x04
     dda:	f5 81       	ldd	r31, Z+5	; 0x05
     ddc:	e0 2d       	mov	r30, r0
     dde:	8f 81       	ldd	r24, Y+7	; 0x07
     de0:	98 85       	ldd	r25, Y+8	; 0x08
     de2:	91 83       	std	Z+1, r25	; 0x01
     de4:	80 83       	st	Z, r24
}
     de6:	28 96       	adiw	r28, 0x08	; 8
     de8:	0f b6       	in	r0, 0x3f	; 63
     dea:	f8 94       	cli
     dec:	de bf       	out	0x3e, r29	; 62
     dee:	0f be       	out	0x3f, r0	; 63
     df0:	cd bf       	out	0x3d, r28	; 61
     df2:	cf 91       	pop	r28
     df4:	df 91       	pop	r29
     df6:	08 95       	ret

00000df8 <gitem_insert_group>:
 при этом gitem->group переходит в Пул

 Ограничения на gitem - он не должен быть сгруппирован в момент встаки в группу.
*/
void gitem_insert_group(gitem_t * gitem, xlist_t *xlist)
{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
     e00:	2a 97       	sbiw	r28, 0x0a	; 10
     e02:	0f b6       	in	r0, 0x3f	; 63
     e04:	f8 94       	cli
     e06:	de bf       	out	0x3e, r29	; 62
     e08:	0f be       	out	0x3f, r0	; 63
     e0a:	cd bf       	out	0x3d, r28	; 61
     e0c:	98 87       	std	Y+8, r25	; 0x08
     e0e:	8f 83       	std	Y+7, r24	; 0x07
     e10:	7a 87       	std	Y+10, r23	; 0x0a
     e12:	69 87       	std	Y+9, r22	; 0x09
    prio_t prio = gitem->group->prio;
     e14:	ef 81       	ldd	r30, Y+7	; 0x07
     e16:	f8 85       	ldd	r31, Y+8	; 0x08
     e18:	04 80       	ldd	r0, Z+4	; 0x04
     e1a:	f5 81       	ldd	r31, Z+5	; 0x05
     e1c:	e0 2d       	mov	r30, r0
     e1e:	82 81       	ldd	r24, Z+2	; 0x02
     e20:	8e 83       	std	Y+6, r24	; 0x06
    index_t mask = ((index_t)1)<<prio;
     e22:	8e 81       	ldd	r24, Y+6	; 0x06
     e24:	28 2f       	mov	r18, r24
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <gitem_insert_group+0x3a>
     e2e:	88 0f       	add	r24, r24
     e30:	99 1f       	adc	r25, r25
     e32:	2a 95       	dec	r18
     e34:	e2 f7       	brpl	.-8      	; 0xe2e <gitem_insert_group+0x36>
     e36:	8d 83       	std	Y+5, r24	; 0x05
    item_t ** head = (item_t **)xlist + prio;
     e38:	29 85       	ldd	r18, Y+9	; 0x09
     e3a:	3a 85       	ldd	r19, Y+10	; 0x0a
     e3c:	8e 81       	ldd	r24, Y+6	; 0x06
     e3e:	88 2f       	mov	r24, r24
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	88 0f       	add	r24, r24
     e44:	99 1f       	adc	r25, r25
     e46:	82 0f       	add	r24, r18
     e48:	93 1f       	adc	r25, r19
     e4a:	9c 83       	std	Y+4, r25	; 0x04
     e4c:	8b 83       	std	Y+3, r24	; 0x03
    group_t * group = gitem->group;
     e4e:	ef 81       	ldd	r30, Y+7	; 0x07
     e50:	f8 85       	ldd	r31, Y+8	; 0x08
     e52:	84 81       	ldd	r24, Z+4	; 0x04
     e54:	95 81       	ldd	r25, Z+5	; 0x05
     e56:	9a 83       	std	Y+2, r25	; 0x02
     e58:	89 83       	std	Y+1, r24	; 0x01
    // Пуста ли часть списка с таким приоритетом
    if( ( xlist->index )& mask)
     e5a:	e9 85       	ldd	r30, Y+9	; 0x09
     e5c:	fa 85       	ldd	r31, Y+10	; 0x0a
     e5e:	90 89       	ldd	r25, Z+16	; 0x10
     e60:	8d 81       	ldd	r24, Y+5	; 0x05
     e62:	89 23       	and	r24, r25
     e64:	88 23       	and	r24, r24
     e66:	31 f1       	breq	.+76     	; 0xeb4 <gitem_insert_group+0xbc>
    {
        //Не пуста вставляем туда gitem
        item_insert((item_t *)gitem, *head );
     e68:	8f 81       	ldd	r24, Y+7	; 0x07
     e6a:	98 85       	ldd	r25, Y+8	; 0x08
     e6c:	eb 81       	ldd	r30, Y+3	; 0x03
     e6e:	fc 81       	ldd	r31, Y+4	; 0x04
     e70:	20 81       	ld	r18, Z
     e72:	31 81       	ldd	r19, Z+1	; 0x01
     e74:	b9 01       	movw	r22, r18
     e76:	0e 94 78 09 	call	0x12f0	; 0x12f0 <item_insert>
        //Передаем старую группу в пул
        group_push(group);
     e7a:	89 81       	ldd	r24, Y+1	; 0x01
     e7c:	9a 81       	ldd	r25, Y+2	; 0x02
     e7e:	0e 94 ed 08 	call	0x11da	; 0x11da <group_push>
        //назначаем новую группу - ту, в которой голова
        group = ((gitem_t *)*head)->group;
     e82:	eb 81       	ldd	r30, Y+3	; 0x03
     e84:	fc 81       	ldd	r31, Y+4	; 0x04
     e86:	80 81       	ld	r24, Z
     e88:	91 81       	ldd	r25, Z+1	; 0x01
     e8a:	fc 01       	movw	r30, r24
     e8c:	84 81       	ldd	r24, Z+4	; 0x04
     e8e:	95 81       	ldd	r25, Z+5	; 0x05
     e90:	9a 83       	std	Y+2, r25	; 0x02
     e92:	89 83       	std	Y+1, r24	; 0x01
        gitem->group = group;
     e94:	ef 81       	ldd	r30, Y+7	; 0x07
     e96:	f8 85       	ldd	r31, Y+8	; 0x08
     e98:	89 81       	ldd	r24, Y+1	; 0x01
     e9a:	9a 81       	ldd	r25, Y+2	; 0x02
     e9c:	95 83       	std	Z+5, r25	; 0x05
     e9e:	84 83       	std	Z+4, r24	; 0x04
        //количество элементов в группе увеличилось на 1
        group->el_num++;
     ea0:	e9 81       	ldd	r30, Y+1	; 0x01
     ea2:	fa 81       	ldd	r31, Y+2	; 0x02
     ea4:	83 81       	ldd	r24, Z+3	; 0x03
     ea6:	94 81       	ldd	r25, Z+4	; 0x04
     ea8:	01 96       	adiw	r24, 0x01	; 1
     eaa:	e9 81       	ldd	r30, Y+1	; 0x01
     eac:	fa 81       	ldd	r31, Y+2	; 0x02
     eae:	94 83       	std	Z+4, r25	; 0x04
     eb0:	83 83       	std	Z+3, r24	; 0x03
     eb2:	14 c0       	rjmp	.+40     	; 0xedc <gitem_insert_group+0xe4>
    }
    else
    {
        // Пуста, gitem будет головой
        *head = (item_t *)gitem;
     eb4:	8f 81       	ldd	r24, Y+7	; 0x07
     eb6:	98 85       	ldd	r25, Y+8	; 0x08
     eb8:	eb 81       	ldd	r30, Y+3	; 0x03
     eba:	fc 81       	ldd	r31, Y+4	; 0x04
     ebc:	91 83       	std	Z+1, r25	; 0x01
     ebe:	80 83       	st	Z, r24
        xlist->index |= mask;
     ec0:	e9 85       	ldd	r30, Y+9	; 0x09
     ec2:	fa 85       	ldd	r31, Y+10	; 0x0a
     ec4:	90 89       	ldd	r25, Z+16	; 0x10
     ec6:	8d 81       	ldd	r24, Y+5	; 0x05
     ec8:	89 2b       	or	r24, r25
     eca:	e9 85       	ldd	r30, Y+9	; 0x09
     ecc:	fa 85       	ldd	r31, Y+10	; 0x0a
     ece:	80 8b       	std	Z+16, r24	; 0x10
        group->link = (void *)xlist;
     ed0:	e9 81       	ldd	r30, Y+1	; 0x01
     ed2:	fa 81       	ldd	r31, Y+2	; 0x02
     ed4:	89 85       	ldd	r24, Y+9	; 0x09
     ed6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ed8:	91 83       	std	Z+1, r25	; 0x01
     eda:	80 83       	st	Z, r24
    }
}
     edc:	2a 96       	adiw	r28, 0x0a	; 10
     ede:	0f b6       	in	r0, 0x3f	; 63
     ee0:	f8 94       	cli
     ee2:	de bf       	out	0x3e, r29	; 62
     ee4:	0f be       	out	0x3f, r0	; 63
     ee6:	cd bf       	out	0x3d, r28	; 61
     ee8:	cf 91       	pop	r28
     eea:	df 91       	pop	r29
     eec:	08 95       	ret

00000eee <gitem_fast_cut>:
// Быстро вырезать из списка (не обнуляется указатель gitem->group->link)
void gitem_fast_cut(gitem_t * gitem)
{
     eee:	df 93       	push	r29
     ef0:	cf 93       	push	r28
     ef2:	00 d0       	rcall	.+0      	; 0xef4 <gitem_fast_cut+0x6>
     ef4:	00 d0       	rcall	.+0      	; 0xef6 <gitem_fast_cut+0x8>
     ef6:	0f 92       	push	r0
     ef8:	cd b7       	in	r28, 0x3d	; 61
     efa:	de b7       	in	r29, 0x3e	; 62
     efc:	9d 83       	std	Y+5, r25	; 0x05
     efe:	8c 83       	std	Y+4, r24	; 0x04
    prio_t prio = gitem->group->prio;
     f00:	ec 81       	ldd	r30, Y+4	; 0x04
     f02:	fd 81       	ldd	r31, Y+5	; 0x05
     f04:	04 80       	ldd	r0, Z+4	; 0x04
     f06:	f5 81       	ldd	r31, Z+5	; 0x05
     f08:	e0 2d       	mov	r30, r0
     f0a:	82 81       	ldd	r24, Z+2	; 0x02
     f0c:	8b 83       	std	Y+3, r24	; 0x03
    xlist_t * xlist = (xlist_t *)gitem->group->link;
     f0e:	ec 81       	ldd	r30, Y+4	; 0x04
     f10:	fd 81       	ldd	r31, Y+5	; 0x05
     f12:	04 80       	ldd	r0, Z+4	; 0x04
     f14:	f5 81       	ldd	r31, Z+5	; 0x05
     f16:	e0 2d       	mov	r30, r0
     f18:	80 81       	ld	r24, Z
     f1a:	91 81       	ldd	r25, Z+1	; 0x01
     f1c:	9a 83       	std	Y+2, r25	; 0x02
     f1e:	89 83       	std	Y+1, r24	; 0x01
    // Является ли эта часть списка группированной?
    if( gitem->group->el_num > (count_t)1 )
     f20:	ec 81       	ldd	r30, Y+4	; 0x04
     f22:	fd 81       	ldd	r31, Y+5	; 0x05
     f24:	04 80       	ldd	r0, Z+4	; 0x04
     f26:	f5 81       	ldd	r31, Z+5	; 0x05
     f28:	e0 2d       	mov	r30, r0
     f2a:	83 81       	ldd	r24, Z+3	; 0x03
     f2c:	94 81       	ldd	r25, Z+4	; 0x04
     f2e:	82 30       	cpi	r24, 0x02	; 2
     f30:	91 05       	cpc	r25, r1
     f32:	b8 f0       	brcs	.+46     	; 0xf62 <gitem_fast_cut+0x74>
    {
        //Группированная часть списка, будем вырезать из группы с выделением новой группы из Пула
        // В текущей группе стало на 1 элемент меньше
        gitem->group->el_num--;
     f34:	ec 81       	ldd	r30, Y+4	; 0x04
     f36:	fd 81       	ldd	r31, Y+5	; 0x05
     f38:	04 80       	ldd	r0, Z+4	; 0x04
     f3a:	f5 81       	ldd	r31, Z+5	; 0x05
     f3c:	e0 2d       	mov	r30, r0
     f3e:	83 81       	ldd	r24, Z+3	; 0x03
     f40:	94 81       	ldd	r25, Z+4	; 0x04
     f42:	01 97       	sbiw	r24, 0x01	; 1
     f44:	94 83       	std	Z+4, r25	; 0x04
     f46:	83 83       	std	Z+3, r24	; 0x03
        //выделяем новую группу
        gitem->group = group_pop();
     f48:	0e 94 07 09 	call	0x120e	; 0x120e <group_pop>
     f4c:	ec 81       	ldd	r30, Y+4	; 0x04
     f4e:	fd 81       	ldd	r31, Y+5	; 0x05
     f50:	95 83       	std	Z+5, r25	; 0x05
     f52:	84 83       	std	Z+4, r24	; 0x04
        // Правильный приоритет, количество элементов в группе, выделенной из пула должно быть равно 1
        gitem->group->prio = (prio_t)prio;
     f54:	ec 81       	ldd	r30, Y+4	; 0x04
     f56:	fd 81       	ldd	r31, Y+5	; 0x05
     f58:	04 80       	ldd	r0, Z+4	; 0x04
     f5a:	f5 81       	ldd	r31, Z+5	; 0x05
     f5c:	e0 2d       	mov	r30, r0
     f5e:	8b 81       	ldd	r24, Y+3	; 0x03
     f60:	82 83       	std	Z+2, r24	; 0x02
    }
    //Является ли элемент единственным в своей части списка?
    if( ((item_t *)gitem)->next == (item_t *)gitem )
     f62:	ec 81       	ldd	r30, Y+4	; 0x04
     f64:	fd 81       	ldd	r31, Y+5	; 0x05
     f66:	20 81       	ld	r18, Z
     f68:	31 81       	ldd	r19, Z+1	; 0x01
     f6a:	8c 81       	ldd	r24, Y+4	; 0x04
     f6c:	9d 81       	ldd	r25, Y+5	; 0x05
     f6e:	28 17       	cp	r18, r24
     f70:	39 07       	cpc	r19, r25
     f72:	09 f5       	brne	.+66     	; 0xfb6 <gitem_fast_cut+0xc8>
    {
        // Да, является!
        xlist->item[prio] = (item_t *)0;
     f74:	8b 81       	ldd	r24, Y+3	; 0x03
     f76:	88 2f       	mov	r24, r24
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	29 81       	ldd	r18, Y+1	; 0x01
     f7c:	3a 81       	ldd	r19, Y+2	; 0x02
     f7e:	88 0f       	add	r24, r24
     f80:	99 1f       	adc	r25, r25
     f82:	f9 01       	movw	r30, r18
     f84:	e8 0f       	add	r30, r24
     f86:	f9 1f       	adc	r31, r25
     f88:	11 82       	std	Z+1, r1	; 0x01
     f8a:	10 82       	st	Z, r1
        xlist->index &= ~(((index_t)1)<<prio);
     f8c:	e9 81       	ldd	r30, Y+1	; 0x01
     f8e:	fa 81       	ldd	r31, Y+2	; 0x02
     f90:	80 89       	ldd	r24, Z+16	; 0x10
     f92:	48 2f       	mov	r20, r24
     f94:	8b 81       	ldd	r24, Y+3	; 0x03
     f96:	28 2f       	mov	r18, r24
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	02 2e       	mov	r0, r18
     fa0:	02 c0       	rjmp	.+4      	; 0xfa6 <gitem_fast_cut+0xb8>
     fa2:	88 0f       	add	r24, r24
     fa4:	99 1f       	adc	r25, r25
     fa6:	0a 94       	dec	r0
     fa8:	e2 f7       	brpl	.-8      	; 0xfa2 <gitem_fast_cut+0xb4>
     faa:	80 95       	com	r24
     fac:	84 23       	and	r24, r20
     fae:	e9 81       	ldd	r30, Y+1	; 0x01
     fb0:	fa 81       	ldd	r31, Y+2	; 0x02
     fb2:	80 8b       	std	Z+16, r24	; 0x10
     fb4:	1a c0       	rjmp	.+52     	; 0xfea <gitem_fast_cut+0xfc>
    }
    else
    {
        // Нет, не является!
        // Является ли элемент головой своей части списка?
        if( xlist->item[(prio_t)prio] == (item_t *)gitem )
     fb6:	8b 81       	ldd	r24, Y+3	; 0x03
     fb8:	88 2f       	mov	r24, r24
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	29 81       	ldd	r18, Y+1	; 0x01
     fbe:	3a 81       	ldd	r19, Y+2	; 0x02
     fc0:	88 0f       	add	r24, r24
     fc2:	99 1f       	adc	r25, r25
     fc4:	f9 01       	movw	r30, r18
     fc6:	e8 0f       	add	r30, r24
     fc8:	f9 1f       	adc	r31, r25
     fca:	20 81       	ld	r18, Z
     fcc:	31 81       	ldd	r19, Z+1	; 0x01
     fce:	8c 81       	ldd	r24, Y+4	; 0x04
     fd0:	9d 81       	ldd	r25, Y+5	; 0x05
     fd2:	28 17       	cp	r18, r24
     fd4:	39 07       	cpc	r19, r25
     fd6:	29 f4       	brne	.+10     	; 0xfe2 <gitem_fast_cut+0xf4>
        {
            // Является, список надо переключить
            xlist_switch( xlist, prio );
     fd8:	89 81       	ldd	r24, Y+1	; 0x01
     fda:	9a 81       	ldd	r25, Y+2	; 0x02
     fdc:	6b 81       	ldd	r22, Y+3	; 0x03
     fde:	0e 94 4a 11 	call	0x2294	; 0x2294 <xlist_switch>
        }
        // Собственно - вырезаем элемент
        item_cut( (item_t *)gitem );
     fe2:	8c 81       	ldd	r24, Y+4	; 0x04
     fe4:	9d 81       	ldd	r25, Y+5	; 0x05
     fe6:	0e 94 aa 09 	call	0x1354	; 0x1354 <item_cut>
    }
}
     fea:	0f 90       	pop	r0
     fec:	0f 90       	pop	r0
     fee:	0f 90       	pop	r0
     ff0:	0f 90       	pop	r0
     ff2:	0f 90       	pop	r0
     ff4:	cf 91       	pop	r28
     ff6:	df 91       	pop	r29
     ff8:	08 95       	ret

00000ffa <gitem_cut>:
// Вырезать из списка
void gitem_cut(gitem_t * gitem)
{
     ffa:	df 93       	push	r29
     ffc:	cf 93       	push	r28
     ffe:	00 d0       	rcall	.+0      	; 0x1000 <gitem_cut+0x6>
    1000:	cd b7       	in	r28, 0x3d	; 61
    1002:	de b7       	in	r29, 0x3e	; 62
    1004:	9a 83       	std	Y+2, r25	; 0x02
    1006:	89 83       	std	Y+1, r24	; 0x01
    gitem_fast_cut( gitem );
    1008:	89 81       	ldd	r24, Y+1	; 0x01
    100a:	9a 81       	ldd	r25, Y+2	; 0x02
    100c:	0e 94 77 07 	call	0xeee	; 0xeee <gitem_fast_cut>
    gitem->group->link = (void *)0;
    1010:	e9 81       	ldd	r30, Y+1	; 0x01
    1012:	fa 81       	ldd	r31, Y+2	; 0x02
    1014:	04 80       	ldd	r0, Z+4	; 0x04
    1016:	f5 81       	ldd	r31, Z+5	; 0x05
    1018:	e0 2d       	mov	r30, r0
    101a:	11 82       	std	Z+1, r1	; 0x01
    101c:	10 82       	st	Z, r1
}
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	08 95       	ret

00001028 <gitem_xlist_merge>:
 1) Оба списка содержат только объекты типа gitem_t
 2) В списке source на каждом уровне приоритета все объекты типа gitem_t приенадлежат к одной группе.
 3) Элементы списка source, находящиеся на разных уровнях приоритета, пренадлежат разным группам.
*/
void gitem_xlist_merge(xlist_t * source, xlist_t * destignation)
{
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	cd b7       	in	r28, 0x3d	; 61
    102e:	de b7       	in	r29, 0x3e	; 62
    1030:	2c 97       	sbiw	r28, 0x0c	; 12
    1032:	0f b6       	in	r0, 0x3f	; 63
    1034:	f8 94       	cli
    1036:	de bf       	out	0x3e, r29	; 62
    1038:	0f be       	out	0x3f, r0	; 63
    103a:	cd bf       	out	0x3d, r28	; 61
    103c:	9a 87       	std	Y+10, r25	; 0x0a
    103e:	89 87       	std	Y+9, r24	; 0x09
    1040:	7c 87       	std	Y+12, r23	; 0x0c
    1042:	6b 87       	std	Y+11, r22	; 0x0b
    index_t mask = (index_t)1;
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	88 87       	std	Y+8, r24	; 0x08
    prio_t current_prio = (prio_t)0;
    1048:	1f 82       	std	Y+7, r1	; 0x07
    104a:	9a c0       	rjmp	.+308    	; 0x1180 <gitem_xlist_merge+0x158>
    while( mask )
    {
        // Есть че перенести?
        if( mask & source->index )
    104c:	e9 85       	ldd	r30, Y+9	; 0x09
    104e:	fa 85       	ldd	r31, Y+10	; 0x0a
    1050:	90 89       	ldd	r25, Z+16	; 0x10
    1052:	88 85       	ldd	r24, Y+8	; 0x08
    1054:	89 23       	and	r24, r25
    1056:	88 23       	and	r24, r24
    1058:	09 f4       	brne	.+2      	; 0x105c <gitem_xlist_merge+0x34>
    105a:	8c c0       	rjmp	.+280    	; 0x1174 <gitem_xlist_merge+0x14c>
        {
            // Есть!
            // Есть куда переносить?
            if( mask & destignation->index )
    105c:	eb 85       	ldd	r30, Y+11	; 0x0b
    105e:	fc 85       	ldd	r31, Y+12	; 0x0c
    1060:	90 89       	ldd	r25, Z+16	; 0x10
    1062:	88 85       	ldd	r24, Y+8	; 0x08
    1064:	89 23       	and	r24, r25
    1066:	88 23       	and	r24, r24
    1068:	09 f4       	brne	.+2      	; 0x106c <gitem_xlist_merge+0x44>
    106a:	43 c0       	rjmp	.+134    	; 0x10f2 <gitem_xlist_merge+0xca>
            {
                //Есть!
                // Сшиваем 2 2-связных списка!!!
                item_t * src = source->item[current_prio];
    106c:	8f 81       	ldd	r24, Y+7	; 0x07
    106e:	88 2f       	mov	r24, r24
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	29 85       	ldd	r18, Y+9	; 0x09
    1074:	3a 85       	ldd	r19, Y+10	; 0x0a
    1076:	88 0f       	add	r24, r24
    1078:	99 1f       	adc	r25, r25
    107a:	f9 01       	movw	r30, r18
    107c:	e8 0f       	add	r30, r24
    107e:	f9 1f       	adc	r31, r25
    1080:	80 81       	ld	r24, Z
    1082:	91 81       	ldd	r25, Z+1	; 0x01
    1084:	9e 83       	std	Y+6, r25	; 0x06
    1086:	8d 83       	std	Y+5, r24	; 0x05
                item_t * dst = destignation->item[current_prio];
    1088:	8f 81       	ldd	r24, Y+7	; 0x07
    108a:	88 2f       	mov	r24, r24
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	2b 85       	ldd	r18, Y+11	; 0x0b
    1090:	3c 85       	ldd	r19, Y+12	; 0x0c
    1092:	88 0f       	add	r24, r24
    1094:	99 1f       	adc	r25, r25
    1096:	f9 01       	movw	r30, r18
    1098:	e8 0f       	add	r30, r24
    109a:	f9 1f       	adc	r31, r25
    109c:	80 81       	ld	r24, Z
    109e:	91 81       	ldd	r25, Z+1	; 0x01
    10a0:	9c 83       	std	Y+4, r25	; 0x04
    10a2:	8b 83       	std	Y+3, r24	; 0x03
                src->prev->next = dst;
    10a4:	ed 81       	ldd	r30, Y+5	; 0x05
    10a6:	fe 81       	ldd	r31, Y+6	; 0x06
    10a8:	02 80       	ldd	r0, Z+2	; 0x02
    10aa:	f3 81       	ldd	r31, Z+3	; 0x03
    10ac:	e0 2d       	mov	r30, r0
    10ae:	8b 81       	ldd	r24, Y+3	; 0x03
    10b0:	9c 81       	ldd	r25, Y+4	; 0x04
    10b2:	91 83       	std	Z+1, r25	; 0x01
    10b4:	80 83       	st	Z, r24
                dst->prev->next = src;
    10b6:	eb 81       	ldd	r30, Y+3	; 0x03
    10b8:	fc 81       	ldd	r31, Y+4	; 0x04
    10ba:	02 80       	ldd	r0, Z+2	; 0x02
    10bc:	f3 81       	ldd	r31, Z+3	; 0x03
    10be:	e0 2d       	mov	r30, r0
    10c0:	8d 81       	ldd	r24, Y+5	; 0x05
    10c2:	9e 81       	ldd	r25, Y+6	; 0x06
    10c4:	91 83       	std	Z+1, r25	; 0x01
    10c6:	80 83       	st	Z, r24
                item_t * buf = dst->prev;
    10c8:	eb 81       	ldd	r30, Y+3	; 0x03
    10ca:	fc 81       	ldd	r31, Y+4	; 0x04
    10cc:	82 81       	ldd	r24, Z+2	; 0x02
    10ce:	93 81       	ldd	r25, Z+3	; 0x03
    10d0:	9a 83       	std	Y+2, r25	; 0x02
    10d2:	89 83       	std	Y+1, r24	; 0x01
                dst->prev = src->prev;
    10d4:	ed 81       	ldd	r30, Y+5	; 0x05
    10d6:	fe 81       	ldd	r31, Y+6	; 0x06
    10d8:	82 81       	ldd	r24, Z+2	; 0x02
    10da:	93 81       	ldd	r25, Z+3	; 0x03
    10dc:	eb 81       	ldd	r30, Y+3	; 0x03
    10de:	fc 81       	ldd	r31, Y+4	; 0x04
    10e0:	93 83       	std	Z+3, r25	; 0x03
    10e2:	82 83       	std	Z+2, r24	; 0x02
                src->prev = buf;
    10e4:	ed 81       	ldd	r30, Y+5	; 0x05
    10e6:	fe 81       	ldd	r31, Y+6	; 0x06
    10e8:	89 81       	ldd	r24, Y+1	; 0x01
    10ea:	9a 81       	ldd	r25, Y+2	; 0x02
    10ec:	93 83       	std	Z+3, r25	; 0x03
    10ee:	82 83       	std	Z+2, r24	; 0x02
    10f0:	21 c0       	rjmp	.+66     	; 0x1134 <gitem_xlist_merge+0x10c>
            }
            else
            {
                //Нет, тупо переносим всю группу.
                destignation->item[current_prio] = source->item[current_prio];
    10f2:	8f 81       	ldd	r24, Y+7	; 0x07
    10f4:	68 2f       	mov	r22, r24
    10f6:	70 e0       	ldi	r23, 0x00	; 0
    10f8:	8f 81       	ldd	r24, Y+7	; 0x07
    10fa:	88 2f       	mov	r24, r24
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	29 85       	ldd	r18, Y+9	; 0x09
    1100:	3a 85       	ldd	r19, Y+10	; 0x0a
    1102:	88 0f       	add	r24, r24
    1104:	99 1f       	adc	r25, r25
    1106:	f9 01       	movw	r30, r18
    1108:	e8 0f       	add	r30, r24
    110a:	f9 1f       	adc	r31, r25
    110c:	40 81       	ld	r20, Z
    110e:	51 81       	ldd	r21, Z+1	; 0x01
    1110:	2b 85       	ldd	r18, Y+11	; 0x0b
    1112:	3c 85       	ldd	r19, Y+12	; 0x0c
    1114:	cb 01       	movw	r24, r22
    1116:	88 0f       	add	r24, r24
    1118:	99 1f       	adc	r25, r25
    111a:	f9 01       	movw	r30, r18
    111c:	e8 0f       	add	r30, r24
    111e:	f9 1f       	adc	r31, r25
    1120:	51 83       	std	Z+1, r21	; 0x01
    1122:	40 83       	st	Z, r20
                destignation->index |= mask;
    1124:	eb 85       	ldd	r30, Y+11	; 0x0b
    1126:	fc 85       	ldd	r31, Y+12	; 0x0c
    1128:	90 89       	ldd	r25, Z+16	; 0x10
    112a:	88 85       	ldd	r24, Y+8	; 0x08
    112c:	89 2b       	or	r24, r25
    112e:	eb 85       	ldd	r30, Y+11	; 0x0b
    1130:	fc 85       	ldd	r31, Y+12	; 0x0c
    1132:	80 8b       	std	Z+16, r24	; 0x10
            }
            // Вот почему эта функция отнесена к методам gitem_t
            ((gitem_t *)source->item[current_prio])->group->link = (void *)destignation;
    1134:	8f 81       	ldd	r24, Y+7	; 0x07
    1136:	88 2f       	mov	r24, r24
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	29 85       	ldd	r18, Y+9	; 0x09
    113c:	3a 85       	ldd	r19, Y+10	; 0x0a
    113e:	88 0f       	add	r24, r24
    1140:	99 1f       	adc	r25, r25
    1142:	f9 01       	movw	r30, r18
    1144:	e8 0f       	add	r30, r24
    1146:	f9 1f       	adc	r31, r25
    1148:	80 81       	ld	r24, Z
    114a:	91 81       	ldd	r25, Z+1	; 0x01
    114c:	fc 01       	movw	r30, r24
    114e:	04 80       	ldd	r0, Z+4	; 0x04
    1150:	f5 81       	ldd	r31, Z+5	; 0x05
    1152:	e0 2d       	mov	r30, r0
    1154:	8b 85       	ldd	r24, Y+11	; 0x0b
    1156:	9c 85       	ldd	r25, Y+12	; 0x0c
    1158:	91 83       	std	Z+1, r25	; 0x01
    115a:	80 83       	st	Z, r24
            // Перенос закончен, обнуляем указатель
            source->item[(prio_t)current_prio] = (item_t *)0;
    115c:	8f 81       	ldd	r24, Y+7	; 0x07
    115e:	88 2f       	mov	r24, r24
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	29 85       	ldd	r18, Y+9	; 0x09
    1164:	3a 85       	ldd	r19, Y+10	; 0x0a
    1166:	88 0f       	add	r24, r24
    1168:	99 1f       	adc	r25, r25
    116a:	f9 01       	movw	r30, r18
    116c:	e8 0f       	add	r30, r24
    116e:	f9 1f       	adc	r31, r25
    1170:	11 82       	std	Z+1, r1	; 0x01
    1172:	10 82       	st	Z, r1
        }
        mask<<=1;
    1174:	88 85       	ldd	r24, Y+8	; 0x08
    1176:	88 0f       	add	r24, r24
    1178:	88 87       	std	Y+8, r24	; 0x08
        current_prio++;
    117a:	8f 81       	ldd	r24, Y+7	; 0x07
    117c:	8f 5f       	subi	r24, 0xFF	; 255
    117e:	8f 83       	std	Y+7, r24	; 0x07
*/
void gitem_xlist_merge(xlist_t * source, xlist_t * destignation)
{
    index_t mask = (index_t)1;
    prio_t current_prio = (prio_t)0;
    while( mask )
    1180:	88 85       	ldd	r24, Y+8	; 0x08
    1182:	88 23       	and	r24, r24
    1184:	09 f0       	breq	.+2      	; 0x1188 <gitem_xlist_merge+0x160>
    1186:	62 cf       	rjmp	.-316    	; 0x104c <gitem_xlist_merge+0x24>
        }
        mask<<=1;
        current_prio++;
    }
    // Список полностью перенесен, обнуляем индекс
    source->index = (index_t)0;
    1188:	e9 85       	ldd	r30, Y+9	; 0x09
    118a:	fa 85       	ldd	r31, Y+10	; 0x0a
    118c:	10 8a       	std	Z+16, r1	; 0x10
}
    118e:	2c 96       	adiw	r28, 0x0c	; 12
    1190:	0f b6       	in	r0, 0x3f	; 63
    1192:	f8 94       	cli
    1194:	de bf       	out	0x3e, r29	; 62
    1196:	0f be       	out	0x3f, r0	; 63
    1198:	cd bf       	out	0x3d, r28	; 61
    119a:	cf 91       	pop	r28
    119c:	df 91       	pop	r29
    119e:	08 95       	ret

000011a0 <group_init>:
*****************************************************************************************/
#include "../include/bugurt.h"
//Методы group_t
// инициация
void group_init(group_t * group, prio_t prio)
{
    11a0:	df 93       	push	r29
    11a2:	cf 93       	push	r28
    11a4:	00 d0       	rcall	.+0      	; 0x11a6 <group_init+0x6>
    11a6:	0f 92       	push	r0
    11a8:	cd b7       	in	r28, 0x3d	; 61
    11aa:	de b7       	in	r29, 0x3e	; 62
    11ac:	9a 83       	std	Y+2, r25	; 0x02
    11ae:	89 83       	std	Y+1, r24	; 0x01
    11b0:	6b 83       	std	Y+3, r22	; 0x03
    group->link = (void *)0;
    11b2:	e9 81       	ldd	r30, Y+1	; 0x01
    11b4:	fa 81       	ldd	r31, Y+2	; 0x02
    11b6:	11 82       	std	Z+1, r1	; 0x01
    11b8:	10 82       	st	Z, r1
    group->prio = prio;
    11ba:	e9 81       	ldd	r30, Y+1	; 0x01
    11bc:	fa 81       	ldd	r31, Y+2	; 0x02
    11be:	8b 81       	ldd	r24, Y+3	; 0x03
    11c0:	82 83       	std	Z+2, r24	; 0x02
    // группа - часть gitem_t, количество элементов - 1
    group->el_num = (count_t)1;
    11c2:	e9 81       	ldd	r30, Y+1	; 0x01
    11c4:	fa 81       	ldd	r31, Y+2	; 0x02
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	94 83       	std	Z+4, r25	; 0x04
    11cc:	83 83       	std	Z+3, r24	; 0x03
}
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	cf 91       	pop	r28
    11d6:	df 91       	pop	r29
    11d8:	08 95       	ret

000011da <group_push>:
// положить в ПУЛ
void group_push(group_t * group)
{
    11da:	df 93       	push	r29
    11dc:	cf 93       	push	r28
    11de:	00 d0       	rcall	.+0      	; 0x11e0 <group_push+0x6>
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
    11e4:	9a 83       	std	Y+2, r25	; 0x02
    11e6:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    // блокируем пул
    spin_lock( &kernel.pool_lock );
#endif
    group->link = (void *)kernel.pool;
    11e8:	80 91 70 01 	lds	r24, 0x0170
    11ec:	90 91 71 01 	lds	r25, 0x0171
    11f0:	e9 81       	ldd	r30, Y+1	; 0x01
    11f2:	fa 81       	ldd	r31, Y+2	; 0x02
    11f4:	91 83       	std	Z+1, r25	; 0x01
    11f6:	80 83       	st	Z, r24
    kernel.pool = group;
    11f8:	89 81       	ldd	r24, Y+1	; 0x01
    11fa:	9a 81       	ldd	r25, Y+2	; 0x02
    11fc:	90 93 71 01 	sts	0x0171, r25
    1200:	80 93 70 01 	sts	0x0170, r24
#ifdef CONFIG_MP
    // разблокируем пул
    spin_unlock( &kernel.pool_lock );
#endif
}
    1204:	0f 90       	pop	r0
    1206:	0f 90       	pop	r0
    1208:	cf 91       	pop	r28
    120a:	df 91       	pop	r29
    120c:	08 95       	ret

0000120e <group_pop>:
// взять из пула, если есть, а есть всегда, избыточность же!
group_t * group_pop(void)
{
    120e:	df 93       	push	r29
    1210:	cf 93       	push	r28
    1212:	00 d0       	rcall	.+0      	; 0x1214 <group_pop+0x6>
    1214:	cd b7       	in	r28, 0x3d	; 61
    1216:	de b7       	in	r29, 0x3e	; 62
#ifdef CONFIG_MP
    // блокируем пул
    spin_lock( &kernel.pool_lock );
#endif
    group_t * group = kernel.pool;
    1218:	80 91 70 01 	lds	r24, 0x0170
    121c:	90 91 71 01 	lds	r25, 0x0171
    1220:	9a 83       	std	Y+2, r25	; 0x02
    1222:	89 83       	std	Y+1, r24	; 0x01
    kernel.pool = (group_t *)group->link;
    1224:	e9 81       	ldd	r30, Y+1	; 0x01
    1226:	fa 81       	ldd	r31, Y+2	; 0x02
    1228:	80 81       	ld	r24, Z
    122a:	91 81       	ldd	r25, Z+1	; 0x01
    122c:	90 93 71 01 	sts	0x0171, r25
    1230:	80 93 70 01 	sts	0x0170, r24
#ifdef CONFIG_MP
    // разблокируем пул
    spin_unlock( &kernel.pool_lock );
#endif
    return group;
    1234:	89 81       	ldd	r24, Y+1	; 0x01
    1236:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1238:	0f 90       	pop	r0
    123a:	0f 90       	pop	r0
    123c:	cf 91       	pop	r28
    123e:	df 91       	pop	r29
    1240:	08 95       	ret

00001242 <index_search>:
*                           http://www.0chan.ru/r/res/9996.html                          *
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
prio_t index_search(index_t index)
{
    1242:	df 93       	push	r29
    1244:	cf 93       	push	r28
    1246:	00 d0       	rcall	.+0      	; 0x1248 <index_search+0x6>
    1248:	00 d0       	rcall	.+0      	; 0x124a <index_search+0x8>
    124a:	00 d0       	rcall	.+0      	; 0x124c <index_search+0xa>
    124c:	cd b7       	in	r28, 0x3d	; 61
    124e:	de b7       	in	r29, 0x3e	; 62
    1250:	8e 83       	std	Y+6, r24	; 0x06
    prio_t prio = (prio_t)0;
    1252:	1d 82       	std	Y+5, r1	; 0x05
        но, т.к. BITS_IN_INDEX_T фиксировано для данной конфигурации,
        то получается время выполнения - O(1), ВСЕГДА.

        И да, предсказуемость + переносимость > быстродействие.
        */
    index_t upper = ~(index_t)0, lower = ~(index_t)0, middle;
    1254:	8f ef       	ldi	r24, 0xFF	; 255
    1256:	8c 83       	std	Y+4, r24	; 0x04
    1258:	8f ef       	ldi	r24, 0xFF	; 255
    125a:	8b 83       	std	Y+3, r24	; 0x03
    prio_t step = (prio_t)BITS_IN_INDEX_T;
    125c:	88 e0       	ldi	r24, 0x08	; 8
    125e:	89 83       	std	Y+1, r24	; 0x01
    1260:	22 c0       	rjmp	.+68     	; 0x12a6 <index_search+0x64>
    while( step )
    {
        step>>=1; // делим шаг пополам
    1262:	89 81       	ldd	r24, Y+1	; 0x01
    1264:	86 95       	lsr	r24
    1266:	89 83       	std	Y+1, r24	; 0x01
        middle = lower>>step;
    1268:	8b 81       	ldd	r24, Y+3	; 0x03
    126a:	28 2f       	mov	r18, r24
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	89 81       	ldd	r24, Y+1	; 0x01
    1270:	88 2f       	mov	r24, r24
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	a9 01       	movw	r20, r18
    1276:	02 c0       	rjmp	.+4      	; 0x127c <index_search+0x3a>
    1278:	55 95       	asr	r21
    127a:	47 95       	ror	r20
    127c:	8a 95       	dec	r24
    127e:	e2 f7       	brpl	.-8      	; 0x1278 <index_search+0x36>
    1280:	ca 01       	movw	r24, r20
    1282:	8a 83       	std	Y+2, r24	; 0x02
        if( index & upper & middle )
    1284:	9e 81       	ldd	r25, Y+6	; 0x06
    1286:	8c 81       	ldd	r24, Y+4	; 0x04
    1288:	98 23       	and	r25, r24
    128a:	8a 81       	ldd	r24, Y+2	; 0x02
    128c:	89 23       	and	r24, r25
    128e:	88 23       	and	r24, r24
    1290:	19 f0       	breq	.+6      	; 0x1298 <index_search+0x56>
        {
            lower = middle;
    1292:	8a 81       	ldd	r24, Y+2	; 0x02
    1294:	8b 83       	std	Y+3, r24	; 0x03
    1296:	07 c0       	rjmp	.+14     	; 0x12a6 <index_search+0x64>
        }
        else
        {
            upper = ~middle;
    1298:	8a 81       	ldd	r24, Y+2	; 0x02
    129a:	80 95       	com	r24
    129c:	8c 83       	std	Y+4, r24	; 0x04
            prio += step;
    129e:	9d 81       	ldd	r25, Y+5	; 0x05
    12a0:	89 81       	ldd	r24, Y+1	; 0x01
    12a2:	89 0f       	add	r24, r25
    12a4:	8d 83       	std	Y+5, r24	; 0x05

        И да, предсказуемость + переносимость > быстродействие.
        */
    index_t upper = ~(index_t)0, lower = ~(index_t)0, middle;
    prio_t step = (prio_t)BITS_IN_INDEX_T;
    while( step )
    12a6:	89 81       	ldd	r24, Y+1	; 0x01
    12a8:	88 23       	and	r24, r24
    12aa:	d9 f6       	brne	.-74     	; 0x1262 <index_search+0x20>
        if ( mask & index )break;
        prio++;
        mask<<=1;
    }
#endif
    return prio;
    12ac:	8d 81       	ldd	r24, Y+5	; 0x05
}
    12ae:	26 96       	adiw	r28, 0x06	; 6
    12b0:	0f b6       	in	r0, 0x3f	; 63
    12b2:	f8 94       	cli
    12b4:	de bf       	out	0x3e, r29	; 62
    12b6:	0f be       	out	0x3f, r0	; 63
    12b8:	cd bf       	out	0x3d, r28	; 61
    12ba:	cf 91       	pop	r28
    12bc:	df 91       	pop	r29
    12be:	08 95       	ret

000012c0 <item_init>:
*****************************************************************************************/
#include "../include/bugurt.h"
//Методы элемента 2-связного списка
//инициация элемента
void item_init(item_t *item)
{
    12c0:	df 93       	push	r29
    12c2:	cf 93       	push	r28
    12c4:	00 d0       	rcall	.+0      	; 0x12c6 <item_init+0x6>
    12c6:	cd b7       	in	r28, 0x3d	; 61
    12c8:	de b7       	in	r29, 0x3e	; 62
    12ca:	9a 83       	std	Y+2, r25	; 0x02
    12cc:	89 83       	std	Y+1, r24	; 0x01
    item->prev = item;
    12ce:	e9 81       	ldd	r30, Y+1	; 0x01
    12d0:	fa 81       	ldd	r31, Y+2	; 0x02
    12d2:	89 81       	ldd	r24, Y+1	; 0x01
    12d4:	9a 81       	ldd	r25, Y+2	; 0x02
    12d6:	93 83       	std	Z+3, r25	; 0x03
    12d8:	82 83       	std	Z+2, r24	; 0x02
    item->next = item;
    12da:	e9 81       	ldd	r30, Y+1	; 0x01
    12dc:	fa 81       	ldd	r31, Y+2	; 0x02
    12de:	89 81       	ldd	r24, Y+1	; 0x01
    12e0:	9a 81       	ldd	r25, Y+2	; 0x02
    12e2:	91 83       	std	Z+1, r25	; 0x01
    12e4:	80 83       	st	Z, r24
}
    12e6:	0f 90       	pop	r0
    12e8:	0f 90       	pop	r0
    12ea:	cf 91       	pop	r28
    12ec:	df 91       	pop	r29
    12ee:	08 95       	ret

000012f0 <item_insert>:
//Вставить элемент
void item_insert(item_t *item, item_t *head)
{
    12f0:	df 93       	push	r29
    12f2:	cf 93       	push	r28
    12f4:	00 d0       	rcall	.+0      	; 0x12f6 <item_insert+0x6>
    12f6:	00 d0       	rcall	.+0      	; 0x12f8 <item_insert+0x8>
    12f8:	00 d0       	rcall	.+0      	; 0x12fa <item_insert+0xa>
    12fa:	cd b7       	in	r28, 0x3d	; 61
    12fc:	de b7       	in	r29, 0x3e	; 62
    12fe:	9c 83       	std	Y+4, r25	; 0x04
    1300:	8b 83       	std	Y+3, r24	; 0x03
    1302:	7e 83       	std	Y+6, r23	; 0x06
    1304:	6d 83       	std	Y+5, r22	; 0x05
    // "хвост" списка
    item_t * tail = head->prev;
    1306:	ed 81       	ldd	r30, Y+5	; 0x05
    1308:	fe 81       	ldd	r31, Y+6	; 0x06
    130a:	82 81       	ldd	r24, Z+2	; 0x02
    130c:	93 81       	ldd	r25, Z+3	; 0x03
    130e:	9a 83       	std	Y+2, r25	; 0x02
    1310:	89 83       	std	Y+1, r24	; 0x01

    // Вставляем элемент между "головой" и "хвостом"
    item->prev = tail;
    1312:	eb 81       	ldd	r30, Y+3	; 0x03
    1314:	fc 81       	ldd	r31, Y+4	; 0x04
    1316:	89 81       	ldd	r24, Y+1	; 0x01
    1318:	9a 81       	ldd	r25, Y+2	; 0x02
    131a:	93 83       	std	Z+3, r25	; 0x03
    131c:	82 83       	std	Z+2, r24	; 0x02
    item->next = head;
    131e:	eb 81       	ldd	r30, Y+3	; 0x03
    1320:	fc 81       	ldd	r31, Y+4	; 0x04
    1322:	8d 81       	ldd	r24, Y+5	; 0x05
    1324:	9e 81       	ldd	r25, Y+6	; 0x06
    1326:	91 83       	std	Z+1, r25	; 0x01
    1328:	80 83       	st	Z, r24

    head->prev = item;
    132a:	ed 81       	ldd	r30, Y+5	; 0x05
    132c:	fe 81       	ldd	r31, Y+6	; 0x06
    132e:	8b 81       	ldd	r24, Y+3	; 0x03
    1330:	9c 81       	ldd	r25, Y+4	; 0x04
    1332:	93 83       	std	Z+3, r25	; 0x03
    1334:	82 83       	std	Z+2, r24	; 0x02
    tail->next = item;
    1336:	e9 81       	ldd	r30, Y+1	; 0x01
    1338:	fa 81       	ldd	r31, Y+2	; 0x02
    133a:	8b 81       	ldd	r24, Y+3	; 0x03
    133c:	9c 81       	ldd	r25, Y+4	; 0x04
    133e:	91 83       	std	Z+1, r25	; 0x01
    1340:	80 83       	st	Z, r24
}
    1342:	26 96       	adiw	r28, 0x06	; 6
    1344:	0f b6       	in	r0, 0x3f	; 63
    1346:	f8 94       	cli
    1348:	de bf       	out	0x3e, r29	; 62
    134a:	0f be       	out	0x3f, r0	; 63
    134c:	cd bf       	out	0x3d, r28	; 61
    134e:	cf 91       	pop	r28
    1350:	df 91       	pop	r29
    1352:	08 95       	ret

00001354 <item_cut>:
//Вырезать элемент
void item_cut( item_t *item )
{
    1354:	df 93       	push	r29
    1356:	cf 93       	push	r28
    1358:	00 d0       	rcall	.+0      	; 0x135a <item_cut+0x6>
    135a:	00 d0       	rcall	.+0      	; 0x135c <item_cut+0x8>
    135c:	00 d0       	rcall	.+0      	; 0x135e <item_cut+0xa>
    135e:	cd b7       	in	r28, 0x3d	; 61
    1360:	de b7       	in	r29, 0x3e	; 62
    1362:	9e 83       	std	Y+6, r25	; 0x06
    1364:	8d 83       	std	Y+5, r24	; 0x05
    item_t * prev = item->prev; //Предыдущий элемент
    1366:	ed 81       	ldd	r30, Y+5	; 0x05
    1368:	fe 81       	ldd	r31, Y+6	; 0x06
    136a:	82 81       	ldd	r24, Z+2	; 0x02
    136c:	93 81       	ldd	r25, Z+3	; 0x03
    136e:	9c 83       	std	Y+4, r25	; 0x04
    1370:	8b 83       	std	Y+3, r24	; 0x03
    item_t * next = item->next; //Следующий элемент
    1372:	ed 81       	ldd	r30, Y+5	; 0x05
    1374:	fe 81       	ldd	r31, Y+6	; 0x06
    1376:	80 81       	ld	r24, Z
    1378:	91 81       	ldd	r25, Z+1	; 0x01
    137a:	9a 83       	std	Y+2, r25	; 0x02
    137c:	89 83       	std	Y+1, r24	; 0x01

    next->prev = prev;
    137e:	e9 81       	ldd	r30, Y+1	; 0x01
    1380:	fa 81       	ldd	r31, Y+2	; 0x02
    1382:	8b 81       	ldd	r24, Y+3	; 0x03
    1384:	9c 81       	ldd	r25, Y+4	; 0x04
    1386:	93 83       	std	Z+3, r25	; 0x03
    1388:	82 83       	std	Z+2, r24	; 0x02
    prev->next = next;
    138a:	eb 81       	ldd	r30, Y+3	; 0x03
    138c:	fc 81       	ldd	r31, Y+4	; 0x04
    138e:	89 81       	ldd	r24, Y+1	; 0x01
    1390:	9a 81       	ldd	r25, Y+2	; 0x02
    1392:	91 83       	std	Z+1, r25	; 0x01
    1394:	80 83       	st	Z, r24

    item->prev = item;
    1396:	ed 81       	ldd	r30, Y+5	; 0x05
    1398:	fe 81       	ldd	r31, Y+6	; 0x06
    139a:	8d 81       	ldd	r24, Y+5	; 0x05
    139c:	9e 81       	ldd	r25, Y+6	; 0x06
    139e:	93 83       	std	Z+3, r25	; 0x03
    13a0:	82 83       	std	Z+2, r24	; 0x02
    item->next = item;
    13a2:	ed 81       	ldd	r30, Y+5	; 0x05
    13a4:	fe 81       	ldd	r31, Y+6	; 0x06
    13a6:	8d 81       	ldd	r24, Y+5	; 0x05
    13a8:	9e 81       	ldd	r25, Y+6	; 0x06
    13aa:	91 83       	std	Z+1, r25	; 0x01
    13ac:	80 83       	st	Z, r24
}
    13ae:	26 96       	adiw	r28, 0x06	; 6
    13b0:	0f b6       	in	r0, 0x3f	; 63
    13b2:	f8 94       	cli
    13b4:	de bf       	out	0x3e, r29	; 62
    13b6:	0f be       	out	0x3f, r0	; 63
    13b8:	cd bf       	out	0x3d, r28	; 61
    13ba:	cf 91       	pop	r28
    13bc:	df 91       	pop	r29
    13be:	08 95       	ret

000013c0 <kernel_init>:
{
    while(1);
}

void kernel_init(void)
{
    13c0:	8f 92       	push	r8
    13c2:	af 92       	push	r10
    13c4:	bf 92       	push	r11
    13c6:	cf 92       	push	r12
    13c8:	ef 92       	push	r14
    13ca:	ff 92       	push	r15
    13cc:	0f 93       	push	r16
    13ce:	1f 93       	push	r17
    13d0:	df 93       	push	r29
    13d2:	cf 93       	push	r28
    13d4:	cd b7       	in	r28, 0x3d	; 61
    13d6:	de b7       	in	r29, 0x3e	; 62
        stat_init( (stat_t *)kernel.stat + i );
        sched_init( (sched_t *)kernel.sched + i, (proc_t *)kernel.idle + i );
    }
    spin_unlock( &kernel.stat_lock );
#else
    proc_init_isr(
    13d8:	82 e4       	ldi	r24, 0x42	; 66
    13da:	91 e0       	ldi	r25, 0x01	; 1
    13dc:	2d e5       	ldi	r18, 0x5D	; 93
    13de:	32 e1       	ldi	r19, 0x12	; 18
    13e0:	b9 01       	movw	r22, r18
    13e2:	40 e0       	ldi	r20, 0x00	; 0
    13e4:	50 e0       	ldi	r21, 0x00	; 0
    13e6:	20 e0       	ldi	r18, 0x00	; 0
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	00 e0       	ldi	r16, 0x00	; 0
    13ec:	10 e0       	ldi	r17, 0x00	; 0
    13ee:	ee 24       	eor	r14, r14
    13f0:	ff 24       	eor	r15, r15
    13f2:	0f 2e       	mov	r0, r31
    13f4:	f7 e0       	ldi	r31, 0x07	; 7
    13f6:	cf 2e       	mov	r12, r31
    13f8:	f0 2d       	mov	r31, r0
    13fa:	aa 24       	eor	r10, r10
    13fc:	bb 24       	eor	r11, r11
    13fe:	a3 94       	inc	r10
    1400:	88 24       	eor	r8, r8
    1402:	0e 94 b6 0b 	call	0x176c	; 0x176c <proc_init_isr>
        0, // это не важно, при первой же смене контекста будет сохранен текущий указатель стека
        ((prio_t)BITS_IN_INDEX_T - (prio_t)1),// низший приоритет
        (timer_t)1,//минимальный квант времени
        (bool_t)0// не RT
    );
    sched_init( (sched_t *)&kernel.sched, (proc_t *)&kernel.idle );
    1406:	88 e1       	ldi	r24, 0x18	; 24
    1408:	91 e0       	ldi	r25, 0x01	; 1
    140a:	22 e4       	ldi	r18, 0x42	; 66
    140c:	31 e0       	ldi	r19, 0x01	; 1
    140e:	b9 01       	movw	r22, r18
    1410:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <sched_init>
#endif // CONFIG_MP
}
    1414:	cf 91       	pop	r28
    1416:	df 91       	pop	r29
    1418:	1f 91       	pop	r17
    141a:	0f 91       	pop	r16
    141c:	ff 90       	pop	r15
    141e:	ef 90       	pop	r14
    1420:	cf 90       	pop	r12
    1422:	bf 90       	pop	r11
    1424:	af 90       	pop	r10
    1426:	8f 90       	pop	r8
    1428:	08 95       	ret

0000142a <mutex_init_isr>:
    mutex_t * mutex
#ifdef CONFIG_USE_HIGHEST_LOCKER
    ,prio_t prio
#endif // CONFIG_USE_HIGHEST_LOCKER
)
{
    142a:	df 93       	push	r29
    142c:	cf 93       	push	r28
    142e:	00 d0       	rcall	.+0      	; 0x1430 <mutex_init_isr+0x6>
    1430:	0f 92       	push	r0
    1432:	cd b7       	in	r28, 0x3d	; 61
    1434:	de b7       	in	r29, 0x3e	; 62
    1436:	9a 83       	std	Y+2, r25	; 0x02
    1438:	89 83       	std	Y+1, r24	; 0x01
    143a:	6b 83       	std	Y+3, r22	; 0x03
    xlist_init( (xlist_t *)mutex );
    143c:	89 81       	ldd	r24, Y+1	; 0x01
    143e:	9a 81       	ldd	r25, Y+2	; 0x02
    1440:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <xlist_init>
    mutex->free = (bool_t)1;
    1444:	e9 81       	ldd	r30, Y+1	; 0x01
    1446:	fa 81       	ldd	r31, Y+2	; 0x02
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	82 8b       	std	Z+18, r24	; 0x12
#ifdef CONFIG_USE_HIGHEST_LOCKER
    mutex->prio = prio;
    144c:	e9 81       	ldd	r30, Y+1	; 0x01
    144e:	fa 81       	ldd	r31, Y+2	; 0x02
    1450:	8b 81       	ldd	r24, Y+3	; 0x03
    1452:	81 8b       	std	Z+17, r24	; 0x11
#endif // CONFIG_USE_HIGHEST_LOCKER
}
    1454:	0f 90       	pop	r0
    1456:	0f 90       	pop	r0
    1458:	0f 90       	pop	r0
    145a:	cf 91       	pop	r28
    145c:	df 91       	pop	r29
    145e:	08 95       	ret

00001460 <_mutex_lock>:

// К моменту вызова захвачена блокировка mutex-а, запрещены прерывания
bool_t _mutex_lock( mutex_t * mutex )
{
    1460:	df 93       	push	r29
    1462:	cf 93       	push	r28
    1464:	00 d0       	rcall	.+0      	; 0x1466 <_mutex_lock+0x6>
    1466:	00 d0       	rcall	.+0      	; 0x1468 <_mutex_lock+0x8>
    1468:	0f 92       	push	r0
    146a:	cd b7       	in	r28, 0x3d	; 61
    146c:	de b7       	in	r29, 0x3e	; 62
    146e:	9d 83       	std	Y+5, r25	; 0x05
    1470:	8c 83       	std	Y+4, r24	; 0x04
    bool_t ret = mutex->free;
    1472:	ec 81       	ldd	r30, Y+4	; 0x04
    1474:	fd 81       	ldd	r31, Y+5	; 0x05
    1476:	82 89       	ldd	r24, Z+18	; 0x12
    1478:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = current_proc();
    147a:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <current_proc>
    147e:	9a 83       	std	Y+2, r25	; 0x02
    1480:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
#ifdef CONFIG_USE_HIGHEST_LOCKER
    _proc_lres_inc( proc, mutex->prio );
    1482:	ec 81       	ldd	r30, Y+4	; 0x04
    1484:	fd 81       	ldd	r31, Y+5	; 0x05
    1486:	21 89       	ldd	r18, Z+17	; 0x11
    1488:	89 81       	ldd	r24, Y+1	; 0x01
    148a:	9a 81       	ldd	r25, Y+2	; 0x02
    148c:	62 2f       	mov	r22, r18
    148e:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <_proc_lres_inc>
#else // !CONFIG_USE_HIGHEST_LOCKER
    _proc_lres_inc( proc );
#endif // CONFIG_USE_HIGHEST_LOCKER
    if( ret )
    1492:	8b 81       	ldd	r24, Y+3	; 0x03
    1494:	88 23       	and	r24, r24
    1496:	41 f0       	breq	.+16     	; 0x14a8 <_mutex_lock+0x48>
    {
        mutex->free = (bool_t)0;
    1498:	ec 81       	ldd	r30, Y+4	; 0x04
    149a:	fd 81       	ldd	r31, Y+5	; 0x05
    149c:	12 8a       	std	Z+18, r1	; 0x12
#ifdef CONFIG_USE_HIGHEST_LOCKER
        // Меняем приоритет только здесь
        _proc_prio_control_running( proc );
    149e:	89 81       	ldd	r24, Y+1	; 0x01
    14a0:	9a 81       	ldd	r25, Y+2	; 0x02
    14a2:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <_proc_prio_control_running>
    14a6:	1b c0       	rjmp	.+54     	; 0x14de <_mutex_lock+0x7e>
#endif // CONFIG_USE_HIGHEST_LOCKER
    }
    else
    {
        proc->flags |= PROC_FLG_QUEUE;
    14a8:	e9 81       	ldd	r30, Y+1	; 0x01
    14aa:	fa 81       	ldd	r31, Y+2	; 0x02
    14ac:	83 85       	ldd	r24, Z+11	; 0x0b
    14ae:	88 60       	ori	r24, 0x08	; 8
    14b0:	e9 81       	ldd	r30, Y+1	; 0x01
    14b2:	fa 81       	ldd	r31, Y+2	; 0x02
    14b4:	83 87       	std	Z+11, r24	; 0x0b
        proc->flags &= ~PROC_FLG_RUN;
    14b6:	e9 81       	ldd	r30, Y+1	; 0x01
    14b8:	fa 81       	ldd	r31, Y+2	; 0x02
    14ba:	83 85       	ldd	r24, Z+11	; 0x0b
    14bc:	8d 7f       	andi	r24, 0xFD	; 253
    14be:	e9 81       	ldd	r30, Y+1	; 0x01
    14c0:	fa 81       	ldd	r31, Y+2	; 0x02
    14c2:	83 87       	std	Z+11, r24	; 0x0b
        _proc_stop_( proc );
    14c4:	89 81       	ldd	r24, Y+1	; 0x01
    14c6:	9a 81       	ldd	r25, Y+2	; 0x02
    14c8:	0e 94 fd 07 	call	0xffa	; 0xffa <gitem_cut>
        gitem_insert( (gitem_t *)proc, (xlist_t *)mutex );
    14cc:	89 81       	ldd	r24, Y+1	; 0x01
    14ce:	9a 81       	ldd	r25, Y+2	; 0x02
    14d0:	2c 81       	ldd	r18, Y+4	; 0x04
    14d2:	3d 81       	ldd	r19, Y+5	; 0x05
    14d4:	b9 01       	movw	r22, r18
    14d6:	0e 94 a0 06 	call	0xd40	; 0xd40 <gitem_insert>
        // Нужна перепланировка
#ifdef CONFIG_MP
        resched( proc->core_id );
#else
        resched();
    14da:	0e 94 fe 00 	call	0x1fc	; 0x1fc <resched>
#endif // CONFIG_MP
    }
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    return ret;
    14de:	8b 81       	ldd	r24, Y+3	; 0x03
}
    14e0:	0f 90       	pop	r0
    14e2:	0f 90       	pop	r0
    14e4:	0f 90       	pop	r0
    14e6:	0f 90       	pop	r0
    14e8:	0f 90       	pop	r0
    14ea:	cf 91       	pop	r28
    14ec:	df 91       	pop	r29
    14ee:	08 95       	ret

000014f0 <_mutex_try_lock>:

bool_t _mutex_try_lock( mutex_t * mutex )
{
    14f0:	df 93       	push	r29
    14f2:	cf 93       	push	r28
    14f4:	00 d0       	rcall	.+0      	; 0x14f6 <_mutex_try_lock+0x6>
    14f6:	00 d0       	rcall	.+0      	; 0x14f8 <_mutex_try_lock+0x8>
    14f8:	0f 92       	push	r0
    14fa:	cd b7       	in	r28, 0x3d	; 61
    14fc:	de b7       	in	r29, 0x3e	; 62
    14fe:	9d 83       	std	Y+5, r25	; 0x05
    1500:	8c 83       	std	Y+4, r24	; 0x04
    bool_t ret = mutex->free;
    1502:	ec 81       	ldd	r30, Y+4	; 0x04
    1504:	fd 81       	ldd	r31, Y+5	; 0x05
    1506:	82 89       	ldd	r24, Z+18	; 0x12
    1508:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = current_proc();
    150a:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <current_proc>
    150e:	9a 83       	std	Y+2, r25	; 0x02
    1510:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    if( ret )
    1512:	8b 81       	ldd	r24, Y+3	; 0x03
    1514:	88 23       	and	r24, r24
    1516:	79 f0       	breq	.+30     	; 0x1536 <_mutex_try_lock+0x46>
    {
        mutex->free = (bool_t)0;
    1518:	ec 81       	ldd	r30, Y+4	; 0x04
    151a:	fd 81       	ldd	r31, Y+5	; 0x05
    151c:	12 8a       	std	Z+18, r1	; 0x12
#ifdef CONFIG_USE_HIGHEST_LOCKER
        _proc_lres_inc( proc, mutex->prio );
    151e:	ec 81       	ldd	r30, Y+4	; 0x04
    1520:	fd 81       	ldd	r31, Y+5	; 0x05
    1522:	21 89       	ldd	r18, Z+17	; 0x11
    1524:	89 81       	ldd	r24, Y+1	; 0x01
    1526:	9a 81       	ldd	r25, Y+2	; 0x02
    1528:	62 2f       	mov	r22, r18
    152a:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <_proc_lres_inc>
        _proc_prio_control_running( proc );
    152e:	89 81       	ldd	r24, Y+1	; 0x01
    1530:	9a 81       	ldd	r25, Y+2	; 0x02
    1532:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <_proc_prio_control_running>
#endif // CONFIG_USE_HIGHEST_LOCKER
    }
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    return ret;
    1536:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1538:	0f 90       	pop	r0
    153a:	0f 90       	pop	r0
    153c:	0f 90       	pop	r0
    153e:	0f 90       	pop	r0
    1540:	0f 90       	pop	r0
    1542:	cf 91       	pop	r28
    1544:	df 91       	pop	r29
    1546:	08 95       	ret

00001548 <_mutex_unlock>:

void _mutex_unlock( mutex_t *  mutex )
{
    1548:	df 93       	push	r29
    154a:	cf 93       	push	r28
    154c:	00 d0       	rcall	.+0      	; 0x154e <_mutex_unlock+0x6>
    154e:	00 d0       	rcall	.+0      	; 0x1550 <_mutex_unlock+0x8>
    1550:	cd b7       	in	r28, 0x3d	; 61
    1552:	de b7       	in	r29, 0x3e	; 62
    1554:	9c 83       	std	Y+4, r25	; 0x04
    1556:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = current_proc();
    1558:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <current_proc>
    155c:	9a 83       	std	Y+2, r25	; 0x02
    155e:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
#ifdef CONFIG_USE_HIGHEST_LOCKER

    _proc_lres_dec( proc, mutex->prio );
    1560:	eb 81       	ldd	r30, Y+3	; 0x03
    1562:	fc 81       	ldd	r31, Y+4	; 0x04
    1564:	21 89       	ldd	r18, Z+17	; 0x11
    1566:	89 81       	ldd	r24, Y+1	; 0x01
    1568:	9a 81       	ldd	r25, Y+2	; 0x02
    156a:	62 2f       	mov	r22, r18
    156c:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <_proc_lres_dec>
    // Если проготовлен и готов к остановке - останавливаем
    if(  ( proc->flags & PROC_FLG_PRE_END ) && (!(proc->flags & PROC_FLG_HOLD))  )
    1570:	e9 81       	ldd	r30, Y+1	; 0x01
    1572:	fa 81       	ldd	r31, Y+2	; 0x02
    1574:	83 85       	ldd	r24, Z+11	; 0x0b
    1576:	88 2f       	mov	r24, r24
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	80 72       	andi	r24, 0x20	; 32
    157c:	90 70       	andi	r25, 0x00	; 0
    157e:	00 97       	sbiw	r24, 0x00	; 0
    1580:	a1 f0       	breq	.+40     	; 0x15aa <_mutex_unlock+0x62>
    1582:	e9 81       	ldd	r30, Y+1	; 0x01
    1584:	fa 81       	ldd	r31, Y+2	; 0x02
    1586:	83 85       	ldd	r24, Z+11	; 0x0b
    1588:	88 2f       	mov	r24, r24
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	84 70       	andi	r24, 0x04	; 4
    158e:	90 70       	andi	r25, 0x00	; 0
    1590:	00 97       	sbiw	r24, 0x00	; 0
    1592:	59 f4       	brne	.+22     	; 0x15aa <_mutex_unlock+0x62>
    {
        _proc_stop_( proc );
    1594:	89 81       	ldd	r24, Y+1	; 0x01
    1596:	9a 81       	ldd	r25, Y+2	; 0x02
    1598:	0e 94 fd 07 	call	0xffa	; 0xffa <gitem_cut>
        _proc_prio_control_stoped( proc );
    159c:	89 81       	ldd	r24, Y+1	; 0x01
    159e:	9a 81       	ldd	r25, Y+2	; 0x02
    15a0:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <_proc_prio_control_stoped>
        // Нужна перепланировка, процесс остановили и не запустили обратно
#ifdef CONFIG_MP
        resched( proc->core_id );
#else
        resched();
    15a4:	0e 94 fe 00 	call	0x1fc	; 0x1fc <resched>
    15a8:	04 c0       	rjmp	.+8      	; 0x15b2 <_mutex_unlock+0x6a>
#endif // CONFIG_MP
    }
    // Не останавливаем - меняем проиритет на ходу
    else _proc_prio_control_running( proc );
    15aa:	89 81       	ldd	r24, Y+1	; 0x01
    15ac:	9a 81       	ldd	r25, Y+2	; 0x02
    15ae:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <_proc_prio_control_running>
#endif // CONFIG_USE_HIGHEST_LOCKER
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    // Обрабока самого мьютекса
    if( ((xlist_t *)mutex)->index == (index_t)0  )
    15b2:	eb 81       	ldd	r30, Y+3	; 0x03
    15b4:	fc 81       	ldd	r31, Y+4	; 0x04
    15b6:	80 89       	ldd	r24, Z+16	; 0x10
    15b8:	88 23       	and	r24, r24
    15ba:	29 f4       	brne	.+10     	; 0x15c6 <_mutex_unlock+0x7e>
    {
        // Список ожидающих пуст, выходим
        mutex->free = (bool_t)1;
    15bc:	eb 81       	ldd	r30, Y+3	; 0x03
    15be:	fc 81       	ldd	r31, Y+4	; 0x04
    15c0:	81 e0       	ldi	r24, 0x01	; 1
    15c2:	82 8b       	std	Z+18, r24	; 0x12
    15c4:	19 c0       	rjmp	.+50     	; 0x15f8 <_mutex_unlock+0xb0>
        return;
    }
    // Список ожидающих не пуст, запускаем голову
    proc = (proc_t *)xlist_head((xlist_t *)mutex);
    15c6:	8b 81       	ldd	r24, Y+3	; 0x03
    15c8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ca:	0e 94 1e 11 	call	0x223c	; 0x223c <xlist_head>
    15ce:	9a 83       	std	Y+2, r25	; 0x02
    15d0:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    // Сначала надо вырезать
    proc->flags &= ~PROC_FLG_QUEUE;
    15d2:	e9 81       	ldd	r30, Y+1	; 0x01
    15d4:	fa 81       	ldd	r31, Y+2	; 0x02
    15d6:	83 85       	ldd	r24, Z+11	; 0x0b
    15d8:	87 7f       	andi	r24, 0xF7	; 247
    15da:	e9 81       	ldd	r30, Y+1	; 0x01
    15dc:	fa 81       	ldd	r31, Y+2	; 0x02
    15de:	83 87       	std	Z+11, r24	; 0x0b
    gitem_cut( (gitem_t *)proc );
    15e0:	89 81       	ldd	r24, Y+1	; 0x01
    15e2:	9a 81       	ldd	r25, Y+2	; 0x02
    15e4:	0e 94 fd 07 	call	0xffa	; 0xffa <gitem_cut>
#ifdef CONFIG_USE_HIGHEST_LOCKER
    // Меняем приоритет
    _proc_prio_control_stoped( proc );
    15e8:	89 81       	ldd	r24, Y+1	; 0x01
    15ea:	9a 81       	ldd	r25, Y+2	; 0x02
    15ec:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <_proc_prio_control_stoped>
#endif // CONFIG_USE_HIGHEST_LOCKER
    _proc_run( proc );
    15f0:	89 81       	ldd	r24, Y+1	; 0x01
    15f2:	9a 81       	ldd	r25, Y+2	; 0x02
    15f4:	0e 94 3e 0c 	call	0x187c	; 0x187c <_proc_run>
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
}
    15f8:	0f 90       	pop	r0
    15fa:	0f 90       	pop	r0
    15fc:	0f 90       	pop	r0
    15fe:	0f 90       	pop	r0
    1600:	cf 91       	pop	r28
    1602:	df 91       	pop	r29
    1604:	08 95       	ret

00001606 <pcounter_init>:
*                           http://www.0chan.ru/r/res/9996.html                          *
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
void pcounter_init(pcounter_t * pcounter)
{
    1606:	df 93       	push	r29
    1608:	cf 93       	push	r28
    160a:	00 d0       	rcall	.+0      	; 0x160c <pcounter_init+0x6>
    160c:	0f 92       	push	r0
    160e:	cd b7       	in	r28, 0x3d	; 61
    1610:	de b7       	in	r29, 0x3e	; 62
    1612:	9b 83       	std	Y+3, r25	; 0x03
    1614:	8a 83       	std	Y+2, r24	; 0x02
    prio_t p;
    pcounter->index = (index_t)0;
    1616:	ea 81       	ldd	r30, Y+2	; 0x02
    1618:	fb 81       	ldd	r31, Y+3	; 0x03
    161a:	10 8a       	std	Z+16, r1	; 0x10
    for(p = 0; p < (index_t)BITS_IN_INDEX_T; p++)pcounter->counter[p] = (count_t)0;
    161c:	19 82       	std	Y+1, r1	; 0x01
    161e:	0f c0       	rjmp	.+30     	; 0x163e <pcounter_init+0x38>
    1620:	89 81       	ldd	r24, Y+1	; 0x01
    1622:	88 2f       	mov	r24, r24
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	2a 81       	ldd	r18, Y+2	; 0x02
    1628:	3b 81       	ldd	r19, Y+3	; 0x03
    162a:	88 0f       	add	r24, r24
    162c:	99 1f       	adc	r25, r25
    162e:	f9 01       	movw	r30, r18
    1630:	e8 0f       	add	r30, r24
    1632:	f9 1f       	adc	r31, r25
    1634:	11 82       	std	Z+1, r1	; 0x01
    1636:	10 82       	st	Z, r1
    1638:	89 81       	ldd	r24, Y+1	; 0x01
    163a:	8f 5f       	subi	r24, 0xFF	; 255
    163c:	89 83       	std	Y+1, r24	; 0x01
    163e:	89 81       	ldd	r24, Y+1	; 0x01
    1640:	88 30       	cpi	r24, 0x08	; 8
    1642:	70 f3       	brcs	.-36     	; 0x1620 <pcounter_init+0x1a>
}
    1644:	0f 90       	pop	r0
    1646:	0f 90       	pop	r0
    1648:	0f 90       	pop	r0
    164a:	cf 91       	pop	r28
    164c:	df 91       	pop	r29
    164e:	08 95       	ret

00001650 <pcounter_inc>:

void pcounter_inc(pcounter_t * pcounter, prio_t prio)
{
    1650:	df 93       	push	r29
    1652:	cf 93       	push	r28
    1654:	00 d0       	rcall	.+0      	; 0x1656 <pcounter_inc+0x6>
    1656:	0f 92       	push	r0
    1658:	cd b7       	in	r28, 0x3d	; 61
    165a:	de b7       	in	r29, 0x3e	; 62
    165c:	9a 83       	std	Y+2, r25	; 0x02
    165e:	89 83       	std	Y+1, r24	; 0x01
    1660:	6b 83       	std	Y+3, r22	; 0x03
    pcounter->counter[prio]++;
    1662:	8b 81       	ldd	r24, Y+3	; 0x03
    1664:	68 2f       	mov	r22, r24
    1666:	70 e0       	ldi	r23, 0x00	; 0
    1668:	29 81       	ldd	r18, Y+1	; 0x01
    166a:	3a 81       	ldd	r19, Y+2	; 0x02
    166c:	cb 01       	movw	r24, r22
    166e:	88 0f       	add	r24, r24
    1670:	99 1f       	adc	r25, r25
    1672:	f9 01       	movw	r30, r18
    1674:	e8 0f       	add	r30, r24
    1676:	f9 1f       	adc	r31, r25
    1678:	80 81       	ld	r24, Z
    167a:	91 81       	ldd	r25, Z+1	; 0x01
    167c:	ac 01       	movw	r20, r24
    167e:	4f 5f       	subi	r20, 0xFF	; 255
    1680:	5f 4f       	sbci	r21, 0xFF	; 255
    1682:	29 81       	ldd	r18, Y+1	; 0x01
    1684:	3a 81       	ldd	r19, Y+2	; 0x02
    1686:	cb 01       	movw	r24, r22
    1688:	88 0f       	add	r24, r24
    168a:	99 1f       	adc	r25, r25
    168c:	f9 01       	movw	r30, r18
    168e:	e8 0f       	add	r30, r24
    1690:	f9 1f       	adc	r31, r25
    1692:	51 83       	std	Z+1, r21	; 0x01
    1694:	40 83       	st	Z, r20
    pcounter->index |= ((index_t)1)<<prio;
    1696:	e9 81       	ldd	r30, Y+1	; 0x01
    1698:	fa 81       	ldd	r31, Y+2	; 0x02
    169a:	80 89       	ldd	r24, Z+16	; 0x10
    169c:	48 2f       	mov	r20, r24
    169e:	8b 81       	ldd	r24, Y+3	; 0x03
    16a0:	28 2f       	mov	r18, r24
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	02 2e       	mov	r0, r18
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <pcounter_inc+0x60>
    16ac:	88 0f       	add	r24, r24
    16ae:	99 1f       	adc	r25, r25
    16b0:	0a 94       	dec	r0
    16b2:	e2 f7       	brpl	.-8      	; 0x16ac <pcounter_inc+0x5c>
    16b4:	84 2b       	or	r24, r20
    16b6:	e9 81       	ldd	r30, Y+1	; 0x01
    16b8:	fa 81       	ldd	r31, Y+2	; 0x02
    16ba:	80 8b       	std	Z+16, r24	; 0x10
}
    16bc:	0f 90       	pop	r0
    16be:	0f 90       	pop	r0
    16c0:	0f 90       	pop	r0
    16c2:	cf 91       	pop	r28
    16c4:	df 91       	pop	r29
    16c6:	08 95       	ret

000016c8 <pcounter_dec>:

index_t pcounter_dec(pcounter_t * pcounter, prio_t prio)
{
    16c8:	df 93       	push	r29
    16ca:	cf 93       	push	r28
    16cc:	00 d0       	rcall	.+0      	; 0x16ce <pcounter_dec+0x6>
    16ce:	00 d0       	rcall	.+0      	; 0x16d0 <pcounter_dec+0x8>
    16d0:	cd b7       	in	r28, 0x3d	; 61
    16d2:	de b7       	in	r29, 0x3e	; 62
    16d4:	9b 83       	std	Y+3, r25	; 0x03
    16d6:	8a 83       	std	Y+2, r24	; 0x02
    16d8:	6c 83       	std	Y+4, r22	; 0x04
    index_t mask = ((index_t)1)<<prio;
    16da:	8c 81       	ldd	r24, Y+4	; 0x04
    16dc:	28 2f       	mov	r18, r24
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	02 c0       	rjmp	.+4      	; 0x16ea <pcounter_dec+0x22>
    16e6:	88 0f       	add	r24, r24
    16e8:	99 1f       	adc	r25, r25
    16ea:	2a 95       	dec	r18
    16ec:	e2 f7       	brpl	.-8      	; 0x16e6 <pcounter_dec+0x1e>
    16ee:	89 83       	std	Y+1, r24	; 0x01
    pcounter->counter[prio]--;
    16f0:	8c 81       	ldd	r24, Y+4	; 0x04
    16f2:	68 2f       	mov	r22, r24
    16f4:	70 e0       	ldi	r23, 0x00	; 0
    16f6:	2a 81       	ldd	r18, Y+2	; 0x02
    16f8:	3b 81       	ldd	r19, Y+3	; 0x03
    16fa:	cb 01       	movw	r24, r22
    16fc:	88 0f       	add	r24, r24
    16fe:	99 1f       	adc	r25, r25
    1700:	f9 01       	movw	r30, r18
    1702:	e8 0f       	add	r30, r24
    1704:	f9 1f       	adc	r31, r25
    1706:	80 81       	ld	r24, Z
    1708:	91 81       	ldd	r25, Z+1	; 0x01
    170a:	ac 01       	movw	r20, r24
    170c:	41 50       	subi	r20, 0x01	; 1
    170e:	50 40       	sbci	r21, 0x00	; 0
    1710:	2a 81       	ldd	r18, Y+2	; 0x02
    1712:	3b 81       	ldd	r19, Y+3	; 0x03
    1714:	cb 01       	movw	r24, r22
    1716:	88 0f       	add	r24, r24
    1718:	99 1f       	adc	r25, r25
    171a:	f9 01       	movw	r30, r18
    171c:	e8 0f       	add	r30, r24
    171e:	f9 1f       	adc	r31, r25
    1720:	51 83       	std	Z+1, r21	; 0x01
    1722:	40 83       	st	Z, r20
    if(pcounter->counter[prio] == (count_t)0)pcounter->index &= ~mask;
    1724:	8c 81       	ldd	r24, Y+4	; 0x04
    1726:	88 2f       	mov	r24, r24
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	2a 81       	ldd	r18, Y+2	; 0x02
    172c:	3b 81       	ldd	r19, Y+3	; 0x03
    172e:	88 0f       	add	r24, r24
    1730:	99 1f       	adc	r25, r25
    1732:	f9 01       	movw	r30, r18
    1734:	e8 0f       	add	r30, r24
    1736:	f9 1f       	adc	r31, r25
    1738:	80 81       	ld	r24, Z
    173a:	91 81       	ldd	r25, Z+1	; 0x01
    173c:	00 97       	sbiw	r24, 0x00	; 0
    173e:	51 f4       	brne	.+20     	; 0x1754 <pcounter_dec+0x8c>
    1740:	ea 81       	ldd	r30, Y+2	; 0x02
    1742:	fb 81       	ldd	r31, Y+3	; 0x03
    1744:	80 89       	ldd	r24, Z+16	; 0x10
    1746:	98 2f       	mov	r25, r24
    1748:	89 81       	ldd	r24, Y+1	; 0x01
    174a:	80 95       	com	r24
    174c:	89 23       	and	r24, r25
    174e:	ea 81       	ldd	r30, Y+2	; 0x02
    1750:	fb 81       	ldd	r31, Y+3	; 0x03
    1752:	80 8b       	std	Z+16, r24	; 0x10
    return pcounter->index & mask;
    1754:	ea 81       	ldd	r30, Y+2	; 0x02
    1756:	fb 81       	ldd	r31, Y+3	; 0x03
    1758:	90 89       	ldd	r25, Z+16	; 0x10
    175a:	89 81       	ldd	r24, Y+1	; 0x01
    175c:	89 23       	and	r24, r25
}
    175e:	0f 90       	pop	r0
    1760:	0f 90       	pop	r0
    1762:	0f 90       	pop	r0
    1764:	0f 90       	pop	r0
    1766:	cf 91       	pop	r28
    1768:	df 91       	pop	r29
    176a:	08 95       	ret

0000176c <proc_init_isr>:
    bool_t is_rt // если true, значит процесс будет иметть поведение RT
#ifdef CONFIG_MP
    ,affinity_t affinity
#endif // CONFIG_MP
)
{
    176c:	8f 92       	push	r8
    176e:	af 92       	push	r10
    1770:	bf 92       	push	r11
    1772:	cf 92       	push	r12
    1774:	ef 92       	push	r14
    1776:	ff 92       	push	r15
    1778:	0f 93       	push	r16
    177a:	1f 93       	push	r17
    177c:	df 93       	push	r29
    177e:	cf 93       	push	r28
    1780:	cd b7       	in	r28, 0x3d	; 61
    1782:	de b7       	in	r29, 0x3e	; 62
    1784:	61 97       	sbiw	r28, 0x11	; 17
    1786:	0f b6       	in	r0, 0x3f	; 63
    1788:	f8 94       	cli
    178a:	de bf       	out	0x3e, r29	; 62
    178c:	0f be       	out	0x3f, r0	; 63
    178e:	cd bf       	out	0x3d, r28	; 61
    1790:	9a 83       	std	Y+2, r25	; 0x02
    1792:	89 83       	std	Y+1, r24	; 0x01
    1794:	7c 83       	std	Y+4, r23	; 0x04
    1796:	6b 83       	std	Y+3, r22	; 0x03
    1798:	5e 83       	std	Y+6, r21	; 0x06
    179a:	4d 83       	std	Y+5, r20	; 0x05
    179c:	38 87       	std	Y+8, r19	; 0x08
    179e:	2f 83       	std	Y+7, r18	; 0x07
    17a0:	1a 87       	std	Y+10, r17	; 0x0a
    17a2:	09 87       	std	Y+9, r16	; 0x09
    17a4:	fc 86       	std	Y+12, r15	; 0x0c
    17a6:	eb 86       	std	Y+11, r14	; 0x0b
    17a8:	cd 86       	std	Y+13, r12	; 0x0d
    17aa:	bf 86       	std	Y+15, r11	; 0x0f
    17ac:	ae 86       	std	Y+14, r10	; 0x0e
    17ae:	88 8a       	std	Y+16, r8	; 0x10
    gitem_init( (gitem_t *)proc, prio );
    17b0:	89 81       	ldd	r24, Y+1	; 0x01
    17b2:	9a 81       	ldd	r25, Y+2	; 0x02
    17b4:	6d 85       	ldd	r22, Y+13	; 0x0d
    17b6:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <gitem_init>
    proc->flags = ( is_rt )?PROC_FLG_RT:(flag_t)0;
    17ba:	88 89       	ldd	r24, Y+16	; 0x10
    17bc:	89 8b       	std	Y+17, r24	; 0x11
    17be:	89 89       	ldd	r24, Y+17	; 0x11
    17c0:	88 23       	and	r24, r24
    17c2:	11 f0       	breq	.+4      	; 0x17c8 <proc_init_isr+0x5c>
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	89 8b       	std	Y+17, r24	; 0x11
    17c8:	89 89       	ldd	r24, Y+17	; 0x11
    17ca:	e9 81       	ldd	r30, Y+1	; 0x01
    17cc:	fa 81       	ldd	r31, Y+2	; 0x02
    17ce:	83 87       	std	Z+11, r24	; 0x0b
#ifdef CONFIG_USE_HIGHEST_LOCKER
    pcounter_init(&proc->lres);
    17d0:	89 81       	ldd	r24, Y+1	; 0x01
    17d2:	9a 81       	ldd	r25, Y+2	; 0x02
    17d4:	0d 96       	adiw	r24, 0x0d	; 13
    17d6:	0e 94 03 0b 	call	0x1606	; 0x1606 <pcounter_init>
    proc->base_prio = prio;
    17da:	e9 81       	ldd	r30, Y+1	; 0x01
    17dc:	fa 81       	ldd	r31, Y+2	; 0x02
    17de:	8d 85       	ldd	r24, Y+13	; 0x0d
    17e0:	84 87       	std	Z+12, r24	; 0x0c
#else
    proc->lres = (count_t)0;
#endif
    proc->time_quant = time_quant;
    17e2:	8e 85       	ldd	r24, Y+14	; 0x0e
    17e4:	9f 85       	ldd	r25, Y+15	; 0x0f
    17e6:	e9 81       	ldd	r30, Y+1	; 0x01
    17e8:	fa 81       	ldd	r31, Y+2	; 0x02
    17ea:	97 8f       	std	Z+31, r25	; 0x1f
    17ec:	86 8f       	std	Z+30, r24	; 0x1e
    proc->timer = time_quant;
    17ee:	8e 85       	ldd	r24, Y+14	; 0x0e
    17f0:	9f 85       	ldd	r25, Y+15	; 0x0f
    17f2:	e9 81       	ldd	r30, Y+1	; 0x01
    17f4:	fa 81       	ldd	r31, Y+2	; 0x02
    17f6:	91 a3       	std	Z+33, r25	; 0x21
    17f8:	80 a3       	std	Z+32, r24	; 0x20
#ifdef CONFIG_MP
    proc->core_id = (core_id_t)0;
    proc->affinity = affinity;
#endif // CONFIG_MP
    proc->pmain = pmain;
    17fa:	e9 81       	ldd	r30, Y+1	; 0x01
    17fc:	fa 81       	ldd	r31, Y+2	; 0x02
    17fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1800:	9c 81       	ldd	r25, Y+4	; 0x04
    1802:	93 a3       	std	Z+35, r25	; 0x23
    1804:	82 a3       	std	Z+34, r24	; 0x22
    proc->sv_hook = sv_hook;
    1806:	e9 81       	ldd	r30, Y+1	; 0x01
    1808:	fa 81       	ldd	r31, Y+2	; 0x02
    180a:	8d 81       	ldd	r24, Y+5	; 0x05
    180c:	9e 81       	ldd	r25, Y+6	; 0x06
    180e:	95 a3       	std	Z+37, r25	; 0x25
    1810:	84 a3       	std	Z+36, r24	; 0x24
    proc->rs_hook = rs_hook;
    1812:	e9 81       	ldd	r30, Y+1	; 0x01
    1814:	fa 81       	ldd	r31, Y+2	; 0x02
    1816:	8f 81       	ldd	r24, Y+7	; 0x07
    1818:	98 85       	ldd	r25, Y+8	; 0x08
    181a:	97 a3       	std	Z+39, r25	; 0x27
    181c:	86 a3       	std	Z+38, r24	; 0x26
    proc->arg = arg;
    181e:	e9 81       	ldd	r30, Y+1	; 0x01
    1820:	fa 81       	ldd	r31, Y+2	; 0x02
    1822:	89 85       	ldd	r24, Y+9	; 0x09
    1824:	9a 85       	ldd	r25, Y+10	; 0x0a
    1826:	91 a7       	std	Z+41, r25	; 0x29
    1828:	80 a7       	std	Z+40, r24	; 0x28
    proc->sstart = sstart;
    182a:	e9 81       	ldd	r30, Y+1	; 0x01
    182c:	fa 81       	ldd	r31, Y+2	; 0x02
    182e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1830:	9c 85       	ldd	r25, Y+12	; 0x0c
    1832:	93 a7       	std	Z+43, r25	; 0x2b
    1834:	82 a7       	std	Z+42, r24	; 0x2a
    if( sstart )proc->spointer = proc_stack_init(sstart, (code_t)proc_run_wrapper, (void *)proc);
    1836:	8b 85       	ldd	r24, Y+11	; 0x0b
    1838:	9c 85       	ldd	r25, Y+12	; 0x0c
    183a:	00 97       	sbiw	r24, 0x00	; 0
    183c:	71 f0       	breq	.+28     	; 0x185a <proc_init_isr+0xee>
    183e:	46 ec       	ldi	r20, 0xC6	; 198
    1840:	53 e0       	ldi	r21, 0x03	; 3
    1842:	8b 85       	ldd	r24, Y+11	; 0x0b
    1844:	9c 85       	ldd	r25, Y+12	; 0x0c
    1846:	29 81       	ldd	r18, Y+1	; 0x01
    1848:	3a 81       	ldd	r19, Y+2	; 0x02
    184a:	ba 01       	movw	r22, r20
    184c:	a9 01       	movw	r20, r18
    184e:	0e 94 df 00 	call	0x1be	; 0x1be <proc_stack_init>
    1852:	e9 81       	ldd	r30, Y+1	; 0x01
    1854:	fa 81       	ldd	r31, Y+2	; 0x02
    1856:	95 a7       	std	Z+45, r25	; 0x2d
    1858:	84 a7       	std	Z+44, r24	; 0x2c
}
    185a:	61 96       	adiw	r28, 0x11	; 17
    185c:	0f b6       	in	r0, 0x3f	; 63
    185e:	f8 94       	cli
    1860:	de bf       	out	0x3e, r29	; 62
    1862:	0f be       	out	0x3f, r0	; 63
    1864:	cd bf       	out	0x3d, r28	; 61
    1866:	cf 91       	pop	r28
    1868:	df 91       	pop	r29
    186a:	1f 91       	pop	r17
    186c:	0f 91       	pop	r16
    186e:	ff 90       	pop	r15
    1870:	ef 90       	pop	r14
    1872:	cf 90       	pop	r12
    1874:	bf 90       	pop	r11
    1876:	af 90       	pop	r10
    1878:	8f 90       	pop	r8
    187a:	08 95       	ret

0000187c <_proc_run>:
    spin_unlock( &proc_sched->lock );
}
#endif // CONFIG_MP

void _proc_run( proc_t * proc )
{
    187c:	df 93       	push	r29
    187e:	cf 93       	push	r28
    1880:	00 d0       	rcall	.+0      	; 0x1882 <_proc_run+0x6>
    1882:	cd b7       	in	r28, 0x3d	; 61
    1884:	de b7       	in	r29, 0x3e	; 62
    1886:	9a 83       	std	Y+2, r25	; 0x02
    1888:	89 83       	std	Y+1, r24	; 0x01
    proc->flags |= PROC_FLG_RUN;
    188a:	e9 81       	ldd	r30, Y+1	; 0x01
    188c:	fa 81       	ldd	r31, Y+2	; 0x02
    188e:	83 85       	ldd	r24, Z+11	; 0x0b
    1890:	82 60       	ori	r24, 0x02	; 2
    1892:	e9 81       	ldd	r30, Y+1	; 0x01
    1894:	fa 81       	ldd	r31, Y+2	; 0x02
    1896:	83 87       	std	Z+11, r24	; 0x0b
    spin_lock( &kernel.stat_lock );
    proc->core_id = sched_load_balancer( proc, (stat_t *)kernel.stat );
    stat_inc( proc, (stat_t *)kernel.stat+proc->core_id );
    spin_unlock( &kernel.stat_lock );
#endif
    _proc_run_( proc );
    1898:	89 81       	ldd	r24, Y+1	; 0x01
    189a:	9a 81       	ldd	r25, Y+2	; 0x02
    189c:	20 91 1a 01 	lds	r18, 0x011A
    18a0:	30 91 1b 01 	lds	r19, 0x011B
    18a4:	b9 01       	movw	r22, r18
    18a6:	0e 94 a0 06 	call	0xd40	; 0xd40 <gitem_insert>
#ifdef CONFIG_MP
    resched( proc->core_id );
#else
    resched();
    18aa:	0e 94 fe 00 	call	0x1fc	; 0x1fc <resched>
#endif // CONFIG_MP
}
    18ae:	0f 90       	pop	r0
    18b0:	0f 90       	pop	r0
    18b2:	cf 91       	pop	r28
    18b4:	df 91       	pop	r29
    18b6:	08 95       	ret

000018b8 <proc_run_isr>:
// Функция общего пользования - запуск процесса из обработчика прерывания, прерывания должны быть запрещены во время запуска
bool_t proc_run_isr(proc_t * proc)
{
    18b8:	df 93       	push	r29
    18ba:	cf 93       	push	r28
    18bc:	00 d0       	rcall	.+0      	; 0x18be <proc_run_isr+0x6>
    18be:	0f 92       	push	r0
    18c0:	cd b7       	in	r28, 0x3d	; 61
    18c2:	de b7       	in	r29, 0x3e	; 62
    18c4:	9b 83       	std	Y+3, r25	; 0x03
    18c6:	8a 83       	std	Y+2, r24	; 0x02
    bool_t ret = (bool_t)1;
    18c8:	81 e0       	ldi	r24, 0x01	; 1
    18ca:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    if( proc->flags & (PROC_FLG_RUN|PROC_FLG_QUEUE|PROC_FLG_WAIT|PROC_FLG_END|PROC_FLG_DEAD) )
    18cc:	ea 81       	ldd	r30, Y+2	; 0x02
    18ce:	fb 81       	ldd	r31, Y+3	; 0x03
    18d0:	83 85       	ldd	r24, Z+11	; 0x0b
    18d2:	88 2f       	mov	r24, r24
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	8a 7d       	andi	r24, 0xDA	; 218
    18d8:	90 70       	andi	r25, 0x00	; 0
    18da:	00 97       	sbiw	r24, 0x00	; 0
    18dc:	11 f0       	breq	.+4      	; 0x18e2 <proc_run_isr+0x2a>
    {
        ret = (bool_t)0;
    18de:	19 82       	std	Y+1, r1	; 0x01
    18e0:	04 c0       	rjmp	.+8      	; 0x18ea <proc_run_isr+0x32>
        goto end;
    }
    _proc_run( proc );
    18e2:	8a 81       	ldd	r24, Y+2	; 0x02
    18e4:	9b 81       	ldd	r25, Y+3	; 0x03
    18e6:	0e 94 3e 0c 	call	0x187c	; 0x187c <_proc_run>
end:
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    return ret;
    18ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    18ec:	0f 90       	pop	r0
    18ee:	0f 90       	pop	r0
    18f0:	0f 90       	pop	r0
    18f2:	cf 91       	pop	r28
    18f4:	df 91       	pop	r29
    18f6:	08 95       	ret

000018f8 <proc_restart_isr>:
// Перезепуск процесса из обработчика прерываний, прерывания должны быть запрещены
bool_t proc_restart_isr(proc_t * proc)
{
    18f8:	df 93       	push	r29
    18fa:	cf 93       	push	r28
    18fc:	00 d0       	rcall	.+0      	; 0x18fe <proc_restart_isr+0x6>
    18fe:	0f 92       	push	r0
    1900:	cd b7       	in	r28, 0x3d	; 61
    1902:	de b7       	in	r29, 0x3e	; 62
    1904:	9b 83       	std	Y+3, r25	; 0x03
    1906:	8a 83       	std	Y+2, r24	; 0x02
    bool_t ret = (bool_t)1;
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif
    if( proc->flags & (PROC_FLG_RUN|PROC_FLG_HOLD|PROC_FLG_QUEUE|PROC_FLG_WAIT|PROC_FLG_PRE_END|PROC_FLG_DEAD) )
    190c:	ea 81       	ldd	r30, Y+2	; 0x02
    190e:	fb 81       	ldd	r31, Y+3	; 0x03
    1910:	83 85       	ldd	r24, Z+11	; 0x0b
    1912:	88 2f       	mov	r24, r24
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	8e 7b       	andi	r24, 0xBE	; 190
    1918:	90 70       	andi	r25, 0x00	; 0
    191a:	00 97       	sbiw	r24, 0x00	; 0
    191c:	11 f0       	breq	.+4      	; 0x1922 <proc_restart_isr+0x2a>
    {
        ret = (bool_t)0;
    191e:	19 82       	std	Y+1, r1	; 0x01
    1920:	2d c0       	rjmp	.+90     	; 0x197c <proc_restart_isr+0x84>
        goto end;
    }
    proc->flags = ( proc->flags & PROC_FLG_RT )?PROC_FLG_RT:(flag_t)0;
    1922:	ea 81       	ldd	r30, Y+2	; 0x02
    1924:	fb 81       	ldd	r31, Y+3	; 0x03
    1926:	83 85       	ldd	r24, Z+11	; 0x0b
    1928:	81 70       	andi	r24, 0x01	; 1
    192a:	ea 81       	ldd	r30, Y+2	; 0x02
    192c:	fb 81       	ldd	r31, Y+3	; 0x03
    192e:	83 87       	std	Z+11, r24	; 0x0b
#ifdef CONFIG_USE_HIGHEST_LOCKER
    pcounter_init(&proc->lres);
    1930:	8a 81       	ldd	r24, Y+2	; 0x02
    1932:	9b 81       	ldd	r25, Y+3	; 0x03
    1934:	0d 96       	adiw	r24, 0x0d	; 13
    1936:	0e 94 03 0b 	call	0x1606	; 0x1606 <pcounter_init>
#else
    proc->lres = (count_t)0;
#endif
    proc->timer = proc->time_quant;
    193a:	ea 81       	ldd	r30, Y+2	; 0x02
    193c:	fb 81       	ldd	r31, Y+3	; 0x03
    193e:	86 8d       	ldd	r24, Z+30	; 0x1e
    1940:	97 8d       	ldd	r25, Z+31	; 0x1f
    1942:	ea 81       	ldd	r30, Y+2	; 0x02
    1944:	fb 81       	ldd	r31, Y+3	; 0x03
    1946:	91 a3       	std	Z+33, r25	; 0x21
    1948:	80 a3       	std	Z+32, r24	; 0x20

    if( proc->sstart )proc->spointer = proc_stack_init( proc->sstart, (code_t)proc_run_wrapper, (void *)proc );
    194a:	ea 81       	ldd	r30, Y+2	; 0x02
    194c:	fb 81       	ldd	r31, Y+3	; 0x03
    194e:	82 a5       	ldd	r24, Z+42	; 0x2a
    1950:	93 a5       	ldd	r25, Z+43	; 0x2b
    1952:	00 97       	sbiw	r24, 0x00	; 0
    1954:	79 f0       	breq	.+30     	; 0x1974 <proc_restart_isr+0x7c>
    1956:	ea 81       	ldd	r30, Y+2	; 0x02
    1958:	fb 81       	ldd	r31, Y+3	; 0x03
    195a:	82 a5       	ldd	r24, Z+42	; 0x2a
    195c:	93 a5       	ldd	r25, Z+43	; 0x2b
    195e:	26 ec       	ldi	r18, 0xC6	; 198
    1960:	33 e0       	ldi	r19, 0x03	; 3
    1962:	4a 81       	ldd	r20, Y+2	; 0x02
    1964:	5b 81       	ldd	r21, Y+3	; 0x03
    1966:	b9 01       	movw	r22, r18
    1968:	0e 94 df 00 	call	0x1be	; 0x1be <proc_stack_init>
    196c:	ea 81       	ldd	r30, Y+2	; 0x02
    196e:	fb 81       	ldd	r31, Y+3	; 0x03
    1970:	95 a7       	std	Z+45, r25	; 0x2d
    1972:	84 a7       	std	Z+44, r24	; 0x2c
    _proc_run( proc );
    1974:	8a 81       	ldd	r24, Y+2	; 0x02
    1976:	9b 81       	ldd	r25, Y+3	; 0x03
    1978:	0e 94 3e 0c 	call	0x187c	; 0x187c <_proc_run>
end:
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif
    return ret;
    197c:	89 81       	ldd	r24, Y+1	; 0x01
}
    197e:	0f 90       	pop	r0
    1980:	0f 90       	pop	r0
    1982:	0f 90       	pop	r0
    1984:	cf 91       	pop	r28
    1986:	df 91       	pop	r29
    1988:	08 95       	ret

0000198a <_proc_stop>:
        spin_unlock( xlist_lock );
    }
}
#endif // CONFIG_MP
void _proc_stop(proc_t * proc)
{
    198a:	df 93       	push	r29
    198c:	cf 93       	push	r28
    198e:	00 d0       	rcall	.+0      	; 0x1990 <_proc_stop+0x6>
    1990:	cd b7       	in	r28, 0x3d	; 61
    1992:	de b7       	in	r29, 0x3e	; 62
    1994:	9a 83       	std	Y+2, r25	; 0x02
    1996:	89 83       	std	Y+1, r24	; 0x01
    proc->flags &= ~PROC_FLG_RUN;
    1998:	e9 81       	ldd	r30, Y+1	; 0x01
    199a:	fa 81       	ldd	r31, Y+2	; 0x02
    199c:	83 85       	ldd	r24, Z+11	; 0x0b
    199e:	8d 7f       	andi	r24, 0xFD	; 253
    19a0:	e9 81       	ldd	r30, Y+1	; 0x01
    19a2:	fa 81       	ldd	r31, Y+2	; 0x02
    19a4:	83 87       	std	Z+11, r24	; 0x0b
    _proc_stop_( proc );
    19a6:	89 81       	ldd	r24, Y+1	; 0x01
    19a8:	9a 81       	ldd	r25, Y+2	; 0x02
    19aa:	0e 94 fd 07 	call	0xffa	; 0xffa <gitem_cut>
#ifdef CONFIG_MP
    resched( proc->core_id );
#else
    resched();
    19ae:	0e 94 fe 00 	call	0x1fc	; 0x1fc <resched>
#endif // CONFIG_MP
}
    19b2:	0f 90       	pop	r0
    19b4:	0f 90       	pop	r0
    19b6:	cf 91       	pop	r28
    19b8:	df 91       	pop	r29
    19ba:	08 95       	ret

000019bc <proc_stop_isr>:
// Останов процесса из обработчика прерываний, прерывания должны быть запрещены
bool_t proc_stop_isr(proc_t * proc)
{
    19bc:	df 93       	push	r29
    19be:	cf 93       	push	r28
    19c0:	00 d0       	rcall	.+0      	; 0x19c2 <proc_stop_isr+0x6>
    19c2:	0f 92       	push	r0
    19c4:	cd b7       	in	r28, 0x3d	; 61
    19c6:	de b7       	in	r29, 0x3e	; 62
    19c8:	9b 83       	std	Y+3, r25	; 0x03
    19ca:	8a 83       	std	Y+2, r24	; 0x02
    bool_t ret = (bool_t)0;
    19cc:	19 82       	std	Y+1, r1	; 0x01
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    //Проверка флагов
    //В случчае PROC_FLG_WAIT будем обрабатывать PROC_FLG_PRE_END на выходе из sig_wait.
    //В случае PROC_FLG_HOLD или PROC_FLG_QUEUE будем обрабатывать PROC_FLG_PRE_END на выходе из функции, освобождающей общий ресурс.
    if( proc->flags & (PROC_FLG_HOLD|PROC_FLG_QUEUE|PROC_FLG_WAIT) )proc->flags |= PROC_FLG_PRE_END;
    19ce:	ea 81       	ldd	r30, Y+2	; 0x02
    19d0:	fb 81       	ldd	r31, Y+3	; 0x03
    19d2:	83 85       	ldd	r24, Z+11	; 0x0b
    19d4:	88 2f       	mov	r24, r24
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	8c 71       	andi	r24, 0x1C	; 28
    19da:	90 70       	andi	r25, 0x00	; 0
    19dc:	00 97       	sbiw	r24, 0x00	; 0
    19de:	41 f0       	breq	.+16     	; 0x19f0 <proc_stop_isr+0x34>
    19e0:	ea 81       	ldd	r30, Y+2	; 0x02
    19e2:	fb 81       	ldd	r31, Y+3	; 0x03
    19e4:	83 85       	ldd	r24, Z+11	; 0x0b
    19e6:	80 62       	ori	r24, 0x20	; 32
    19e8:	ea 81       	ldd	r30, Y+2	; 0x02
    19ea:	fb 81       	ldd	r31, Y+3	; 0x03
    19ec:	83 87       	std	Z+11, r24	; 0x0b
    19ee:	0f c0       	rjmp	.+30     	; 0x1a0e <proc_stop_isr+0x52>
    else if( proc->flags & PROC_FLG_RUN )
    19f0:	ea 81       	ldd	r30, Y+2	; 0x02
    19f2:	fb 81       	ldd	r31, Y+3	; 0x03
    19f4:	83 85       	ldd	r24, Z+11	; 0x0b
    19f6:	88 2f       	mov	r24, r24
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	82 70       	andi	r24, 0x02	; 2
    19fc:	90 70       	andi	r25, 0x00	; 0
    19fe:	00 97       	sbiw	r24, 0x00	; 0
    1a00:	31 f0       	breq	.+12     	; 0x1a0e <proc_stop_isr+0x52>
    {
        _proc_stop( proc );
    1a02:	8a 81       	ldd	r24, Y+2	; 0x02
    1a04:	9b 81       	ldd	r25, Y+3	; 0x03
    1a06:	0e 94 c5 0c 	call	0x198a	; 0x198a <_proc_stop>
        ret = (bool_t)1;
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	89 83       	std	Y+1, r24	; 0x01
    }
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    return ret;
    1a0e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a10:	0f 90       	pop	r0
    1a12:	0f 90       	pop	r0
    1a14:	0f 90       	pop	r0
    1a16:	cf 91       	pop	r28
    1a18:	df 91       	pop	r29
    1a1a:	08 95       	ret

00001a1c <proc_reset_watchdog>:
void proc_reset_watchdog(void)
{
    1a1c:	df 93       	push	r29
    1a1e:	cf 93       	push	r28
    1a20:	00 d0       	rcall	.+0      	; 0x1a22 <proc_reset_watchdog+0x6>
    1a22:	cd b7       	in	r28, 0x3d	; 61
    1a24:	de b7       	in	r29, 0x3e	; 62
#ifdef CONFIG_MP
    core_id_t current_core = _enter_crit_sec();
    proc = ((sched_t *)kernel.sched + current_core)->current_proc;
    spin_lock(&proc->lock);
#else
    enter_crit_sec();
    1a26:	0e 94 4a 06 	call	0xc94	; 0xc94 <enter_crit_sec>
    proc = kernel.sched.current_proc;
    1a2a:	80 91 18 01 	lds	r24, 0x0118
    1a2e:	90 91 19 01 	lds	r25, 0x0119
    1a32:	9a 83       	std	Y+2, r25	; 0x02
    1a34:	89 83       	std	Y+1, r24	; 0x01
#endif
    if( proc->flags & PROC_FLG_RT )proc->timer = proc->time_quant;
    1a36:	e9 81       	ldd	r30, Y+1	; 0x01
    1a38:	fa 81       	ldd	r31, Y+2	; 0x02
    1a3a:	83 85       	ldd	r24, Z+11	; 0x0b
    1a3c:	88 2f       	mov	r24, r24
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	81 70       	andi	r24, 0x01	; 1
    1a42:	90 70       	andi	r25, 0x00	; 0
    1a44:	88 23       	and	r24, r24
    1a46:	41 f0       	breq	.+16     	; 0x1a58 <proc_reset_watchdog+0x3c>
    1a48:	e9 81       	ldd	r30, Y+1	; 0x01
    1a4a:	fa 81       	ldd	r31, Y+2	; 0x02
    1a4c:	86 8d       	ldd	r24, Z+30	; 0x1e
    1a4e:	97 8d       	ldd	r25, Z+31	; 0x1f
    1a50:	e9 81       	ldd	r30, Y+1	; 0x01
    1a52:	fa 81       	ldd	r31, Y+2	; 0x02
    1a54:	91 a3       	std	Z+33, r25	; 0x21
    1a56:	80 a3       	std	Z+32, r24	; 0x20
#ifdef CONFIG_MP
    spin_lock(&proc->lock);
    _exit_crit_sec(current_core);
#else
    exit_crit_sec();
    1a58:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <exit_crit_sec>
#endif
}
    1a5c:	0f 90       	pop	r0
    1a5e:	0f 90       	pop	r0
    1a60:	cf 91       	pop	r28
    1a62:	df 91       	pop	r29
    1a64:	08 95       	ret

00001a66 <_proc_flag_stop_isr>:

void _proc_flag_stop_isr( flag_t mask )
{
    1a66:	df 93       	push	r29
    1a68:	cf 93       	push	r28
    1a6a:	00 d0       	rcall	.+0      	; 0x1a6c <_proc_flag_stop_isr+0x6>
    1a6c:	0f 92       	push	r0
    1a6e:	cd b7       	in	r28, 0x3d	; 61
    1a70:	de b7       	in	r29, 0x3e	; 62
    1a72:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = current_proc();
    1a74:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <current_proc>
    1a78:	9a 83       	std	Y+2, r25	; 0x02
    1a7a:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif //CONFIG_MP
    proc->flags &= mask;
    1a7c:	e9 81       	ldd	r30, Y+1	; 0x01
    1a7e:	fa 81       	ldd	r31, Y+2	; 0x02
    1a80:	93 85       	ldd	r25, Z+11	; 0x0b
    1a82:	8b 81       	ldd	r24, Y+3	; 0x03
    1a84:	89 23       	and	r24, r25
    1a86:	e9 81       	ldd	r30, Y+1	; 0x01
    1a88:	fa 81       	ldd	r31, Y+2	; 0x02
    1a8a:	83 87       	std	Z+11, r24	; 0x0b
    if(  ( proc->flags & PROC_FLG_PRE_END ) && (!(proc->flags & PROC_FLG_HOLD))  )
    1a8c:	e9 81       	ldd	r30, Y+1	; 0x01
    1a8e:	fa 81       	ldd	r31, Y+2	; 0x02
    1a90:	83 85       	ldd	r24, Z+11	; 0x0b
    1a92:	88 2f       	mov	r24, r24
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	80 72       	andi	r24, 0x20	; 32
    1a98:	90 70       	andi	r25, 0x00	; 0
    1a9a:	00 97       	sbiw	r24, 0x00	; 0
    1a9c:	a1 f0       	breq	.+40     	; 0x1ac6 <_proc_flag_stop_isr+0x60>
    1a9e:	e9 81       	ldd	r30, Y+1	; 0x01
    1aa0:	fa 81       	ldd	r31, Y+2	; 0x02
    1aa2:	83 85       	ldd	r24, Z+11	; 0x0b
    1aa4:	88 2f       	mov	r24, r24
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	84 70       	andi	r24, 0x04	; 4
    1aaa:	90 70       	andi	r25, 0x00	; 0
    1aac:	00 97       	sbiw	r24, 0x00	; 0
    1aae:	59 f4       	brne	.+22     	; 0x1ac6 <_proc_flag_stop_isr+0x60>
    {
        proc->flags &= ~PROC_FLG_PRE_END;
    1ab0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ab2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ab4:	83 85       	ldd	r24, Z+11	; 0x0b
    1ab6:	8f 7d       	andi	r24, 0xDF	; 223
    1ab8:	e9 81       	ldd	r30, Y+1	; 0x01
    1aba:	fa 81       	ldd	r31, Y+2	; 0x02
    1abc:	83 87       	std	Z+11, r24	; 0x0b
        _proc_stop( proc );
    1abe:	89 81       	ldd	r24, Y+1	; 0x01
    1ac0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac2:	0e 94 c5 0c 	call	0x198a	; 0x198a <_proc_stop>
    }
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif //CONFIG_MP
}
    1ac6:	0f 90       	pop	r0
    1ac8:	0f 90       	pop	r0
    1aca:	0f 90       	pop	r0
    1acc:	cf 91       	pop	r28
    1ace:	df 91       	pop	r29
    1ad0:	08 95       	ret

00001ad2 <_proc_lres_inc>:
    proc_t * proc
#ifdef CONFIG_USE_HIGHEST_LOCKER
    ,prio_t prio
#endif
)
{
    1ad2:	df 93       	push	r29
    1ad4:	cf 93       	push	r28
    1ad6:	00 d0       	rcall	.+0      	; 0x1ad8 <_proc_lres_inc+0x6>
    1ad8:	0f 92       	push	r0
    1ada:	cd b7       	in	r28, 0x3d	; 61
    1adc:	de b7       	in	r29, 0x3e	; 62
    1ade:	9a 83       	std	Y+2, r25	; 0x02
    1ae0:	89 83       	std	Y+1, r24	; 0x01
    1ae2:	6b 83       	std	Y+3, r22	; 0x03
#ifdef CONFIG_USE_HIGHEST_LOCKER
    if( proc->lres.index == (index_t)0 )proc->flags |= PROC_FLG_HOLD;
    1ae4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ae6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ae8:	85 8d       	ldd	r24, Z+29	; 0x1d
    1aea:	88 23       	and	r24, r24
    1aec:	39 f4       	brne	.+14     	; 0x1afc <_proc_lres_inc+0x2a>
    1aee:	e9 81       	ldd	r30, Y+1	; 0x01
    1af0:	fa 81       	ldd	r31, Y+2	; 0x02
    1af2:	83 85       	ldd	r24, Z+11	; 0x0b
    1af4:	84 60       	ori	r24, 0x04	; 4
    1af6:	e9 81       	ldd	r30, Y+1	; 0x01
    1af8:	fa 81       	ldd	r31, Y+2	; 0x02
    1afa:	83 87       	std	Z+11, r24	; 0x0b
    pcounter_inc( &proc->lres, prio );
    1afc:	89 81       	ldd	r24, Y+1	; 0x01
    1afe:	9a 81       	ldd	r25, Y+2	; 0x02
    1b00:	0d 96       	adiw	r24, 0x0d	; 13
    1b02:	6b 81       	ldd	r22, Y+3	; 0x03
    1b04:	0e 94 28 0b 	call	0x1650	; 0x1650 <pcounter_inc>
#else
    if( proc->lres == (count_t)0 )proc->flags |= PROC_FLG_HOLD;
    proc->lres++;
#endif
}
    1b08:	0f 90       	pop	r0
    1b0a:	0f 90       	pop	r0
    1b0c:	0f 90       	pop	r0
    1b0e:	cf 91       	pop	r28
    1b10:	df 91       	pop	r29
    1b12:	08 95       	ret

00001b14 <_proc_lres_dec>:
    proc_t * proc
#ifdef CONFIG_USE_HIGHEST_LOCKER
    ,prio_t prio
#endif
)
{
    1b14:	df 93       	push	r29
    1b16:	cf 93       	push	r28
    1b18:	00 d0       	rcall	.+0      	; 0x1b1a <_proc_lres_dec+0x6>
    1b1a:	0f 92       	push	r0
    1b1c:	cd b7       	in	r28, 0x3d	; 61
    1b1e:	de b7       	in	r29, 0x3e	; 62
    1b20:	9a 83       	std	Y+2, r25	; 0x02
    1b22:	89 83       	std	Y+1, r24	; 0x01
    1b24:	6b 83       	std	Y+3, r22	; 0x03
#ifdef CONFIG_USE_HIGHEST_LOCKER
    pcounter_dec( &proc->lres, prio );
    1b26:	89 81       	ldd	r24, Y+1	; 0x01
    1b28:	9a 81       	ldd	r25, Y+2	; 0x02
    1b2a:	0d 96       	adiw	r24, 0x0d	; 13
    1b2c:	6b 81       	ldd	r22, Y+3	; 0x03
    1b2e:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <pcounter_dec>
    if( proc->lres.index == (index_t)0 )proc->flags &= ~PROC_FLG_HOLD;
    1b32:	e9 81       	ldd	r30, Y+1	; 0x01
    1b34:	fa 81       	ldd	r31, Y+2	; 0x02
    1b36:	85 8d       	ldd	r24, Z+29	; 0x1d
    1b38:	88 23       	and	r24, r24
    1b3a:	39 f4       	brne	.+14     	; 0x1b4a <_proc_lres_dec+0x36>
    1b3c:	e9 81       	ldd	r30, Y+1	; 0x01
    1b3e:	fa 81       	ldd	r31, Y+2	; 0x02
    1b40:	83 85       	ldd	r24, Z+11	; 0x0b
    1b42:	8b 7f       	andi	r24, 0xFB	; 251
    1b44:	e9 81       	ldd	r30, Y+1	; 0x01
    1b46:	fa 81       	ldd	r31, Y+2	; 0x02
    1b48:	83 87       	std	Z+11, r24	; 0x0b
#else
    if( proc->lres!= (count_t)0 )proc->lres--;
    if( proc->lres == (count_t)0 )proc->flags &= ~PROC_FLG_HOLD;
#endif
}
    1b4a:	0f 90       	pop	r0
    1b4c:	0f 90       	pop	r0
    1b4e:	0f 90       	pop	r0
    1b50:	cf 91       	pop	r28
    1b52:	df 91       	pop	r29
    1b54:	08 95       	ret

00001b56 <_proc_prio_control_stoped>:
#ifdef CONFIG_USE_HIGHEST_LOCKER
// Будет использоваться в mutex-ах и т.п., процесс должен сам вызывать эту функцию, при этом он должен быть вырезан из списка выполняющихся.
void _proc_prio_control_stoped( proc_t * proc )
{
    1b56:	df 93       	push	r29
    1b58:	cf 93       	push	r28
    1b5a:	cd b7       	in	r28, 0x3d	; 61
    1b5c:	de b7       	in	r29, 0x3e	; 62
    1b5e:	27 97       	sbiw	r28, 0x07	; 7
    1b60:	0f b6       	in	r0, 0x3f	; 63
    1b62:	f8 94       	cli
    1b64:	de bf       	out	0x3e, r29	; 62
    1b66:	0f be       	out	0x3f, r0	; 63
    1b68:	cd bf       	out	0x3d, r28	; 61
    1b6a:	9b 83       	std	Y+3, r25	; 0x03
    1b6c:	8a 83       	std	Y+2, r24	; 0x02
    if(proc->lres.index != (index_t)0)
    1b6e:	ea 81       	ldd	r30, Y+2	; 0x02
    1b70:	fb 81       	ldd	r31, Y+3	; 0x03
    1b72:	85 8d       	ldd	r24, Z+29	; 0x1d
    1b74:	88 23       	and	r24, r24
    1b76:	e9 f0       	breq	.+58     	; 0x1bb2 <_proc_prio_control_stoped+0x5c>
    {
        prio_t locker_prio = index_search( proc->lres.index );
    1b78:	ea 81       	ldd	r30, Y+2	; 0x02
    1b7a:	fb 81       	ldd	r31, Y+3	; 0x03
    1b7c:	85 8d       	ldd	r24, Z+29	; 0x1d
    1b7e:	0e 94 21 09 	call	0x1242	; 0x1242 <index_search>
    1b82:	89 83       	std	Y+1, r24	; 0x01
        ((gitem_t *)proc)->group->prio = ( locker_prio < proc->base_prio )?locker_prio:proc->base_prio;
    1b84:	ea 81       	ldd	r30, Y+2	; 0x02
    1b86:	fb 81       	ldd	r31, Y+3	; 0x03
    1b88:	84 81       	ldd	r24, Z+4	; 0x04
    1b8a:	95 81       	ldd	r25, Z+5	; 0x05
    1b8c:	9e 83       	std	Y+6, r25	; 0x06
    1b8e:	8d 83       	std	Y+5, r24	; 0x05
    1b90:	ea 81       	ldd	r30, Y+2	; 0x02
    1b92:	fb 81       	ldd	r31, Y+3	; 0x03
    1b94:	84 85       	ldd	r24, Z+12	; 0x0c
    1b96:	99 81       	ldd	r25, Y+1	; 0x01
    1b98:	9f 83       	std	Y+7, r25	; 0x07
    1b9a:	8c 83       	std	Y+4, r24	; 0x04
    1b9c:	ec 81       	ldd	r30, Y+4	; 0x04
    1b9e:	ff 81       	ldd	r31, Y+7	; 0x07
    1ba0:	fe 17       	cp	r31, r30
    1ba2:	10 f4       	brcc	.+4      	; 0x1ba8 <_proc_prio_control_stoped+0x52>
    1ba4:	8f 81       	ldd	r24, Y+7	; 0x07
    1ba6:	8c 83       	std	Y+4, r24	; 0x04
    1ba8:	8c 81       	ldd	r24, Y+4	; 0x04
    1baa:	ed 81       	ldd	r30, Y+5	; 0x05
    1bac:	fe 81       	ldd	r31, Y+6	; 0x06
    1bae:	82 83       	std	Z+2, r24	; 0x02
    1bb0:	0a c0       	rjmp	.+20     	; 0x1bc6 <_proc_prio_control_stoped+0x70>
    }
    else
    {
        ((gitem_t *)proc)->group->prio = proc->base_prio;
    1bb2:	ea 81       	ldd	r30, Y+2	; 0x02
    1bb4:	fb 81       	ldd	r31, Y+3	; 0x03
    1bb6:	a4 81       	ldd	r26, Z+4	; 0x04
    1bb8:	b5 81       	ldd	r27, Z+5	; 0x05
    1bba:	ea 81       	ldd	r30, Y+2	; 0x02
    1bbc:	fb 81       	ldd	r31, Y+3	; 0x03
    1bbe:	84 85       	ldd	r24, Z+12	; 0x0c
    1bc0:	12 96       	adiw	r26, 0x02	; 2
    1bc2:	8c 93       	st	X, r24
    1bc4:	12 97       	sbiw	r26, 0x02	; 2
    }
}
    1bc6:	27 96       	adiw	r28, 0x07	; 7
    1bc8:	0f b6       	in	r0, 0x3f	; 63
    1bca:	f8 94       	cli
    1bcc:	de bf       	out	0x3e, r29	; 62
    1bce:	0f be       	out	0x3f, r0	; 63
    1bd0:	cd bf       	out	0x3d, r28	; 61
    1bd2:	cf 91       	pop	r28
    1bd4:	df 91       	pop	r29
    1bd6:	08 95       	ret

00001bd8 <_proc_prio_control_running>:
void _proc_prio_control_running( proc_t * proc )
{
    1bd8:	df 93       	push	r29
    1bda:	cf 93       	push	r28
    1bdc:	00 d0       	rcall	.+0      	; 0x1bde <_proc_prio_control_running+0x6>
    1bde:	00 d0       	rcall	.+0      	; 0x1be0 <_proc_prio_control_running+0x8>
    1be0:	00 d0       	rcall	.+0      	; 0x1be2 <_proc_prio_control_running+0xa>
    1be2:	cd b7       	in	r28, 0x3d	; 61
    1be4:	de b7       	in	r29, 0x3e	; 62
    1be6:	9c 83       	std	Y+4, r25	; 0x04
    1be8:	8b 83       	std	Y+3, r24	; 0x03
    prio_t new_prio;
    if(proc->lres.index != (index_t)0)
    1bea:	eb 81       	ldd	r30, Y+3	; 0x03
    1bec:	fc 81       	ldd	r31, Y+4	; 0x04
    1bee:	85 8d       	ldd	r24, Z+29	; 0x1d
    1bf0:	88 23       	and	r24, r24
    1bf2:	a9 f0       	breq	.+42     	; 0x1c1e <_proc_prio_control_running+0x46>
    {
        prio_t locker_prio = index_search( proc->lres.index );
    1bf4:	eb 81       	ldd	r30, Y+3	; 0x03
    1bf6:	fc 81       	ldd	r31, Y+4	; 0x04
    1bf8:	85 8d       	ldd	r24, Z+29	; 0x1d
    1bfa:	0e 94 21 09 	call	0x1242	; 0x1242 <index_search>
    1bfe:	89 83       	std	Y+1, r24	; 0x01
        new_prio = ( locker_prio < proc->base_prio )?locker_prio:proc->base_prio;
    1c00:	eb 81       	ldd	r30, Y+3	; 0x03
    1c02:	fc 81       	ldd	r31, Y+4	; 0x04
    1c04:	84 85       	ldd	r24, Z+12	; 0x0c
    1c06:	99 81       	ldd	r25, Y+1	; 0x01
    1c08:	9e 83       	std	Y+6, r25	; 0x06
    1c0a:	8d 83       	std	Y+5, r24	; 0x05
    1c0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c10:	98 17       	cp	r25, r24
    1c12:	10 f4       	brcc	.+4      	; 0x1c18 <_proc_prio_control_running+0x40>
    1c14:	8e 81       	ldd	r24, Y+6	; 0x06
    1c16:	8d 83       	std	Y+5, r24	; 0x05
    1c18:	9d 81       	ldd	r25, Y+5	; 0x05
    1c1a:	9a 83       	std	Y+2, r25	; 0x02
    1c1c:	04 c0       	rjmp	.+8      	; 0x1c26 <_proc_prio_control_running+0x4e>
    }
    else
    {
        new_prio = proc->base_prio;
    1c1e:	eb 81       	ldd	r30, Y+3	; 0x03
    1c20:	fc 81       	ldd	r31, Y+4	; 0x04
    1c22:	84 85       	ldd	r24, Z+12	; 0x0c
    1c24:	8a 83       	std	Y+2, r24	; 0x02
    }
    if(((gitem_t *)proc)->group->prio != new_prio)
    1c26:	eb 81       	ldd	r30, Y+3	; 0x03
    1c28:	fc 81       	ldd	r31, Y+4	; 0x04
    1c2a:	04 80       	ldd	r0, Z+4	; 0x04
    1c2c:	f5 81       	ldd	r31, Z+5	; 0x05
    1c2e:	e0 2d       	mov	r30, r0
    1c30:	92 81       	ldd	r25, Z+2	; 0x02
    1c32:	8a 81       	ldd	r24, Y+2	; 0x02
    1c34:	98 17       	cp	r25, r24
    1c36:	b1 f0       	breq	.+44     	; 0x1c64 <_proc_prio_control_running+0x8c>
    {
        _proc_stop_( proc );
    1c38:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c3c:	0e 94 fd 07 	call	0xffa	; 0xffa <gitem_cut>
        ((gitem_t *)proc)->group->prio = new_prio;
    1c40:	eb 81       	ldd	r30, Y+3	; 0x03
    1c42:	fc 81       	ldd	r31, Y+4	; 0x04
    1c44:	04 80       	ldd	r0, Z+4	; 0x04
    1c46:	f5 81       	ldd	r31, Z+5	; 0x05
    1c48:	e0 2d       	mov	r30, r0
    1c4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4c:	82 83       	std	Z+2, r24	; 0x02
#ifdef CONFIG_MP
        spin_lock( &kernel.stat_lock );
        stat_inc( proc, (stat_t *)kernel.stat+proc->core_id );
        spin_unlock( &kernel.stat_lock );
#endif
        _proc_run_( proc );
    1c4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c50:	9c 81       	ldd	r25, Y+4	; 0x04
    1c52:	20 91 1a 01 	lds	r18, 0x011A
    1c56:	30 91 1b 01 	lds	r19, 0x011B
    1c5a:	b9 01       	movw	r22, r18
    1c5c:	0e 94 a0 06 	call	0xd40	; 0xd40 <gitem_insert>
#ifdef CONFIG_MP
        resched(proc->core_id);
#else
        resched();
    1c60:	0e 94 fe 00 	call	0x1fc	; 0x1fc <resched>
#endif
    }
}
    1c64:	26 96       	adiw	r28, 0x06	; 6
    1c66:	0f b6       	in	r0, 0x3f	; 63
    1c68:	f8 94       	cli
    1c6a:	de bf       	out	0x3e, r29	; 62
    1c6c:	0f be       	out	0x3f, r0	; 63
    1c6e:	cd bf       	out	0x3d, r28	; 61
    1c70:	cf 91       	pop	r28
    1c72:	df 91       	pop	r29
    1c74:	08 95       	ret

00001c76 <sched_init>:
*****************************************************************************************/
#include "../include/bugurt.h"
///========================================================================================
// Инициация
void sched_init(sched_t * sched, proc_t * idle)
{
    1c76:	df 93       	push	r29
    1c78:	cf 93       	push	r28
    1c7a:	00 d0       	rcall	.+0      	; 0x1c7c <sched_init+0x6>
    1c7c:	00 d0       	rcall	.+0      	; 0x1c7e <sched_init+0x8>
    1c7e:	cd b7       	in	r28, 0x3d	; 61
    1c80:	de b7       	in	r29, 0x3e	; 62
    1c82:	9a 83       	std	Y+2, r25	; 0x02
    1c84:	89 83       	std	Y+1, r24	; 0x01
    1c86:	7c 83       	std	Y+4, r23	; 0x04
    1c88:	6b 83       	std	Y+3, r22	; 0x03
#ifdef CONFIG_MP
    lock_t * sched_lock = &sched->lock;
    spin_init( sched_lock );
    spin_lock( sched_lock );
#endif // CONFIG_MP
    sched->ready = (xlist_t *)sched->plst;
    1c8a:	89 81       	ldd	r24, Y+1	; 0x01
    1c8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c8e:	06 96       	adiw	r24, 0x06	; 6
    1c90:	e9 81       	ldd	r30, Y+1	; 0x01
    1c92:	fa 81       	ldd	r31, Y+2	; 0x02
    1c94:	93 83       	std	Z+3, r25	; 0x03
    1c96:	82 83       	std	Z+2, r24	; 0x02
    xlist_init( sched->ready );
    1c98:	e9 81       	ldd	r30, Y+1	; 0x01
    1c9a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c9c:	82 81       	ldd	r24, Z+2	; 0x02
    1c9e:	93 81       	ldd	r25, Z+3	; 0x03
    1ca0:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <xlist_init>
    sched->expired = (xlist_t *)sched->plst + 1;
    1ca4:	89 81       	ldd	r24, Y+1	; 0x01
    1ca6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ca8:	47 96       	adiw	r24, 0x17	; 23
    1caa:	e9 81       	ldd	r30, Y+1	; 0x01
    1cac:	fa 81       	ldd	r31, Y+2	; 0x02
    1cae:	95 83       	std	Z+5, r25	; 0x05
    1cb0:	84 83       	std	Z+4, r24	; 0x04
    xlist_init( sched->expired );
    1cb2:	e9 81       	ldd	r30, Y+1	; 0x01
    1cb4:	fa 81       	ldd	r31, Y+2	; 0x02
    1cb6:	84 81       	ldd	r24, Z+4	; 0x04
    1cb8:	95 81       	ldd	r25, Z+5	; 0x05
    1cba:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <xlist_init>
    gitem_insert( (gitem_t *)idle, sched->ready );
    1cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc2:	e9 81       	ldd	r30, Y+1	; 0x01
    1cc4:	fa 81       	ldd	r31, Y+2	; 0x02
    1cc6:	22 81       	ldd	r18, Z+2	; 0x02
    1cc8:	33 81       	ldd	r19, Z+3	; 0x03
    1cca:	b9 01       	movw	r22, r18
    1ccc:	0e 94 a0 06 	call	0xd40	; 0xd40 <gitem_insert>
    sched->current_proc = idle;
    1cd0:	e9 81       	ldd	r30, Y+1	; 0x01
    1cd2:	fa 81       	ldd	r31, Y+2	; 0x02
    1cd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd8:	91 83       	std	Z+1, r25	; 0x01
    1cda:	80 83       	st	Z, r24
    sched->nested_crit_sec = (count_t)0;//вообще это выполняется при запрещенных прерываниях, но не известно, на этом ли процессоре
    1cdc:	e9 81       	ldd	r30, Y+1	; 0x01
    1cde:	fa 81       	ldd	r31, Y+2	; 0x02
    1ce0:	11 a6       	std	Z+41, r1	; 0x29
    1ce2:	10 a6       	std	Z+40, r1	; 0x28
#ifdef CONFIG_MP
    spin_unlock( sched_lock );
    stat_inc( idle, (stat_t *)kernel.stat + idle->core_id );
#endif // CONFIG_MP
}
    1ce4:	0f 90       	pop	r0
    1ce6:	0f 90       	pop	r0
    1ce8:	0f 90       	pop	r0
    1cea:	0f 90       	pop	r0
    1cec:	cf 91       	pop	r28
    1cee:	df 91       	pop	r29
    1cf0:	08 95       	ret

00001cf2 <_sched_list_switch>:
static void _sched_list_switch( sched_t * sched )
{
    1cf2:	df 93       	push	r29
    1cf4:	cf 93       	push	r28
    1cf6:	00 d0       	rcall	.+0      	; 0x1cf8 <_sched_list_switch+0x6>
    1cf8:	00 d0       	rcall	.+0      	; 0x1cfa <_sched_list_switch+0x8>
    1cfa:	cd b7       	in	r28, 0x3d	; 61
    1cfc:	de b7       	in	r29, 0x3e	; 62
    1cfe:	9c 83       	std	Y+4, r25	; 0x04
    1d00:	8b 83       	std	Y+3, r24	; 0x03
    // Список ready опустел, переключаем списки
    if( sched->ready->index == (index_t)0 )
    1d02:	eb 81       	ldd	r30, Y+3	; 0x03
    1d04:	fc 81       	ldd	r31, Y+4	; 0x04
    1d06:	02 80       	ldd	r0, Z+2	; 0x02
    1d08:	f3 81       	ldd	r31, Z+3	; 0x03
    1d0a:	e0 2d       	mov	r30, r0
    1d0c:	80 89       	ldd	r24, Z+16	; 0x10
    1d0e:	88 23       	and	r24, r24
    1d10:	a1 f4       	brne	.+40     	; 0x1d3a <_sched_list_switch+0x48>
    {
        xlist_t * buf = sched->ready;
    1d12:	eb 81       	ldd	r30, Y+3	; 0x03
    1d14:	fc 81       	ldd	r31, Y+4	; 0x04
    1d16:	82 81       	ldd	r24, Z+2	; 0x02
    1d18:	93 81       	ldd	r25, Z+3	; 0x03
    1d1a:	9a 83       	std	Y+2, r25	; 0x02
    1d1c:	89 83       	std	Y+1, r24	; 0x01
        sched->ready = sched->expired;
    1d1e:	eb 81       	ldd	r30, Y+3	; 0x03
    1d20:	fc 81       	ldd	r31, Y+4	; 0x04
    1d22:	84 81       	ldd	r24, Z+4	; 0x04
    1d24:	95 81       	ldd	r25, Z+5	; 0x05
    1d26:	eb 81       	ldd	r30, Y+3	; 0x03
    1d28:	fc 81       	ldd	r31, Y+4	; 0x04
    1d2a:	93 83       	std	Z+3, r25	; 0x03
    1d2c:	82 83       	std	Z+2, r24	; 0x02
        sched->expired = buf;
    1d2e:	eb 81       	ldd	r30, Y+3	; 0x03
    1d30:	fc 81       	ldd	r31, Y+4	; 0x04
    1d32:	89 81       	ldd	r24, Y+1	; 0x01
    1d34:	9a 81       	ldd	r25, Y+2	; 0x02
    1d36:	95 83       	std	Z+5, r25	; 0x05
    1d38:	84 83       	std	Z+4, r24	; 0x04
    }
}
    1d3a:	0f 90       	pop	r0
    1d3c:	0f 90       	pop	r0
    1d3e:	0f 90       	pop	r0
    1d40:	0f 90       	pop	r0
    1d42:	cf 91       	pop	r28
    1d44:	df 91       	pop	r29
    1d46:	08 95       	ret

00001d48 <sched_schedule>:
                    sched_t * sched
#else
                    void
#endif // CONFIG_MP
                    )
{
    1d48:	df 93       	push	r29
    1d4a:	cf 93       	push	r28
    1d4c:	00 d0       	rcall	.+0      	; 0x1d4e <sched_schedule+0x6>
    1d4e:	00 d0       	rcall	.+0      	; 0x1d50 <sched_schedule+0x8>
    1d50:	0f 92       	push	r0
    1d52:	cd b7       	in	r28, 0x3d	; 61
    1d54:	de b7       	in	r29, 0x3e	; 62
#ifndef CONFIG_MP
    sched_t * sched = (sched_t *)&kernel.sched;
    1d56:	88 e1       	ldi	r24, 0x18	; 24
    1d58:	91 e0       	ldi	r25, 0x01	; 1
    1d5a:	9d 83       	std	Y+5, r25	; 0x05
    1d5c:	8c 83       	std	Y+4, r24	; 0x04
#endif // nCONFIG_MP
    // Меняем только с локального процессора, блокировку sched->lock можно не захватывать!
    proc_t * current_proc = sched->current_proc;
    1d5e:	ec 81       	ldd	r30, Y+4	; 0x04
    1d60:	fd 81       	ldd	r31, Y+5	; 0x05
    1d62:	80 81       	ld	r24, Z
    1d64:	91 81       	ldd	r25, Z+1	; 0x01
    1d66:	9b 83       	std	Y+3, r25	; 0x03
    1d68:	8a 83       	std	Y+2, r24	; 0x02
#ifdef CONFIG_MP
    // А вот эту блокировку обязательно надо захватить!
    spin_lock( &current_proc->lock );
#endif // CONFIG_MP
    // Хук "сохранение контекста"
    if( current_proc->sv_hook )current_proc->sv_hook( current_proc->arg );
    1d6a:	ea 81       	ldd	r30, Y+2	; 0x02
    1d6c:	fb 81       	ldd	r31, Y+3	; 0x03
    1d6e:	84 a1       	ldd	r24, Z+36	; 0x24
    1d70:	95 a1       	ldd	r25, Z+37	; 0x25
    1d72:	00 97       	sbiw	r24, 0x00	; 0
    1d74:	51 f0       	breq	.+20     	; 0x1d8a <sched_schedule+0x42>
    1d76:	ea 81       	ldd	r30, Y+2	; 0x02
    1d78:	fb 81       	ldd	r31, Y+3	; 0x03
    1d7a:	24 a1       	ldd	r18, Z+36	; 0x24
    1d7c:	35 a1       	ldd	r19, Z+37	; 0x25
    1d7e:	ea 81       	ldd	r30, Y+2	; 0x02
    1d80:	fb 81       	ldd	r31, Y+3	; 0x03
    1d82:	80 a5       	ldd	r24, Z+40	; 0x28
    1d84:	91 a5       	ldd	r25, Z+41	; 0x29
    1d86:	f9 01       	movw	r30, r18
    1d88:	09 95       	icall
    // Проверяем, что процесс находится в списке ready
    if( (xlist_t *)((gitem_t *)current_proc)->group->link == sched->ready )
    1d8a:	ea 81       	ldd	r30, Y+2	; 0x02
    1d8c:	fb 81       	ldd	r31, Y+3	; 0x03
    1d8e:	04 80       	ldd	r0, Z+4	; 0x04
    1d90:	f5 81       	ldd	r31, Z+5	; 0x05
    1d92:	e0 2d       	mov	r30, r0
    1d94:	80 81       	ld	r24, Z
    1d96:	91 81       	ldd	r25, Z+1	; 0x01
    1d98:	9c 01       	movw	r18, r24
    1d9a:	ec 81       	ldd	r30, Y+4	; 0x04
    1d9c:	fd 81       	ldd	r31, Y+5	; 0x05
    1d9e:	82 81       	ldd	r24, Z+2	; 0x02
    1da0:	93 81       	ldd	r25, Z+3	; 0x03
    1da2:	28 17       	cp	r18, r24
    1da4:	39 07       	cpc	r19, r25
    1da6:	09 f0       	breq	.+2      	; 0x1daa <sched_schedule+0x62>
    1da8:	4d c0       	rjmp	.+154    	; 0x1e44 <sched_schedule+0xfc>
    {
        // Переключаем cписок на следующий за текущим процесс
#ifdef CONFIG_MP
        spin_lock( &sched->lock );
#endif // CONFIG_MP
        xlist_switch( sched->ready, ((gitem_t *)current_proc)->group->prio );
    1daa:	ec 81       	ldd	r30, Y+4	; 0x04
    1dac:	fd 81       	ldd	r31, Y+5	; 0x05
    1dae:	82 81       	ldd	r24, Z+2	; 0x02
    1db0:	93 81       	ldd	r25, Z+3	; 0x03
    1db2:	ea 81       	ldd	r30, Y+2	; 0x02
    1db4:	fb 81       	ldd	r31, Y+3	; 0x03
    1db6:	04 80       	ldd	r0, Z+4	; 0x04
    1db8:	f5 81       	ldd	r31, Z+5	; 0x05
    1dba:	e0 2d       	mov	r30, r0
    1dbc:	22 81       	ldd	r18, Z+2	; 0x02
    1dbe:	62 2f       	mov	r22, r18
    1dc0:	0e 94 4a 11 	call	0x2294	; 0x2294 <xlist_switch>
#ifdef CONFIG_MP
        spin_unlock( &sched->lock );
#endif // CONFIG_MP
        //Проверяем, не истек ли квант времени процесса
        if( current_proc->timer > (timer_t)1 )current_proc->timer--;// Не истек, уменьшаем таймер
    1dc4:	ea 81       	ldd	r30, Y+2	; 0x02
    1dc6:	fb 81       	ldd	r31, Y+3	; 0x03
    1dc8:	80 a1       	ldd	r24, Z+32	; 0x20
    1dca:	91 a1       	ldd	r25, Z+33	; 0x21
    1dcc:	82 30       	cpi	r24, 0x02	; 2
    1dce:	91 05       	cpc	r25, r1
    1dd0:	50 f0       	brcs	.+20     	; 0x1de6 <sched_schedule+0x9e>
    1dd2:	ea 81       	ldd	r30, Y+2	; 0x02
    1dd4:	fb 81       	ldd	r31, Y+3	; 0x03
    1dd6:	80 a1       	ldd	r24, Z+32	; 0x20
    1dd8:	91 a1       	ldd	r25, Z+33	; 0x21
    1dda:	01 97       	sbiw	r24, 0x01	; 1
    1ddc:	ea 81       	ldd	r30, Y+2	; 0x02
    1dde:	fb 81       	ldd	r31, Y+3	; 0x03
    1de0:	91 a3       	std	Z+33, r25	; 0x21
    1de2:	80 a3       	std	Z+32, r24	; 0x20
    1de4:	2f c0       	rjmp	.+94     	; 0x1e44 <sched_schedule+0xfc>
        {
            // Истек, вырезаем процесс из списка
#ifdef CONFIG_MP
            spin_lock( &sched->lock );
#endif // CONFIG_MP
            gitem_fast_cut( (gitem_t *)current_proc );
    1de6:	8a 81       	ldd	r24, Y+2	; 0x02
    1de8:	9b 81       	ldd	r25, Y+3	; 0x03
    1dea:	0e 94 77 07 	call	0xeee	; 0xeee <gitem_fast_cut>
            // Обновили статистику после удаления процесса из списка ready
            stat_dec( current_proc, (stat_t *)kernel.stat + current_proc->core_id );
#endif // CONFIG_USE_ALB
#endif // CONFIG_MP
            // А что за процесс собственно?
            flag_t flags = current_proc->flags;
    1dee:	ea 81       	ldd	r30, Y+2	; 0x02
    1df0:	fb 81       	ldd	r31, Y+3	; 0x03
    1df2:	83 85       	ldd	r24, Z+11	; 0x0b
    1df4:	89 83       	std	Y+1, r24	; 0x01
            if(
                (!(flags & PROC_FLG_RT))
    1df6:	89 81       	ldd	r24, Y+1	; 0x01
    1df8:	88 2f       	mov	r24, r24
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	81 70       	andi	r24, 0x01	; 1
    1dfe:	90 70       	andi	r25, 0x00	; 0
            stat_dec( current_proc, (stat_t *)kernel.stat + current_proc->core_id );
#endif // CONFIG_USE_ALB
#endif // CONFIG_MP
            // А что за процесс собственно?
            flag_t flags = current_proc->flags;
            if(
    1e00:	00 97       	sbiw	r24, 0x00	; 0
    1e02:	91 f4       	brne	.+36     	; 0x1e28 <sched_schedule+0xe0>
                ||(flags & PROC_FLG_HOLD)
#endif // CONFIG_HARD_RT
            )
            {
                //Процесс общего назначения, либо он удерживает общий ресурс, сбрасываем таймер и переносим в очередь expired
                current_proc->timer = current_proc->time_quant;
    1e04:	ea 81       	ldd	r30, Y+2	; 0x02
    1e06:	fb 81       	ldd	r31, Y+3	; 0x03
    1e08:	86 8d       	ldd	r24, Z+30	; 0x1e
    1e0a:	97 8d       	ldd	r25, Z+31	; 0x1f
    1e0c:	ea 81       	ldd	r30, Y+2	; 0x02
    1e0e:	fb 81       	ldd	r31, Y+3	; 0x03
    1e10:	91 a3       	std	Z+33, r25	; 0x21
    1e12:	80 a3       	std	Z+32, r24	; 0x20
#else // CONFIG_MP CONFIG_USE_ALB
                // Тупо переносим процесс в список expired
#ifdef CONFIG_MP
                spin_lock( &sched->lock );
#endif // CONFIG_MP
                gitem_insert( (gitem_t *)current_proc, sched->expired );
    1e14:	8a 81       	ldd	r24, Y+2	; 0x02
    1e16:	9b 81       	ldd	r25, Y+3	; 0x03
    1e18:	ec 81       	ldd	r30, Y+4	; 0x04
    1e1a:	fd 81       	ldd	r31, Y+5	; 0x05
    1e1c:	24 81       	ldd	r18, Z+4	; 0x04
    1e1e:	35 81       	ldd	r19, Z+5	; 0x05
    1e20:	b9 01       	movw	r22, r18
    1e22:	0e 94 a0 06 	call	0xd40	; 0xd40 <gitem_insert>
    1e26:	0e c0       	rjmp	.+28     	; 0x1e44 <sched_schedule+0xfc>
                spin_lock( &kernel.stat_lock );
                stat_dec( current_proc, (stat_t *)kernel.stat + current_proc->core_id );
#endif // nCONFIG_USE_ALB
                spin_unlock( &kernel.stat_lock );
#endif // CONFIG_MP
                ((gitem_t *)current_proc)->group->link = (void *)0;// Просто вырезали из списка, как в gitem_cut
    1e28:	ea 81       	ldd	r30, Y+2	; 0x02
    1e2a:	fb 81       	ldd	r31, Y+3	; 0x03
    1e2c:	04 80       	ldd	r0, Z+4	; 0x04
    1e2e:	f5 81       	ldd	r31, Z+5	; 0x05
    1e30:	e0 2d       	mov	r30, r0
    1e32:	11 82       	std	Z+1, r1	; 0x01
    1e34:	10 82       	st	Z, r1
                current_proc->flags &= ~PROC_FLG_RUN;
    1e36:	ea 81       	ldd	r30, Y+2	; 0x02
    1e38:	fb 81       	ldd	r31, Y+3	; 0x03
    1e3a:	83 85       	ldd	r24, Z+11	; 0x0b
    1e3c:	8d 7f       	andi	r24, 0xFD	; 253
    1e3e:	ea 81       	ldd	r30, Y+2	; 0x02
    1e40:	fb 81       	ldd	r31, Y+3	; 0x03
    1e42:	83 87       	std	Z+11, r24	; 0x0b
#ifdef CONFIG_MP
    //Текущий процесс более не нужен, освобождаем его блокировку
    spin_unlock( &current_proc->lock );
    spin_lock( &sched->lock );
#endif // CONFIG_MP
    _sched_list_switch( sched );
    1e44:	8c 81       	ldd	r24, Y+4	; 0x04
    1e46:	9d 81       	ldd	r25, Y+5	; 0x05
    1e48:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <_sched_list_switch>
    // Изменять указатель будем при захваченной блокировке,
    // чтобы процессы на других процессорах не прочитали неизвестно что.
    current_proc = (proc_t *)xlist_head( sched->ready ); // Вытесняющая многозадачность же!
    1e4c:	ec 81       	ldd	r30, Y+4	; 0x04
    1e4e:	fd 81       	ldd	r31, Y+5	; 0x05
    1e50:	82 81       	ldd	r24, Z+2	; 0x02
    1e52:	93 81       	ldd	r25, Z+3	; 0x03
    1e54:	0e 94 1e 11 	call	0x223c	; 0x223c <xlist_head>
    1e58:	9b 83       	std	Y+3, r25	; 0x03
    1e5a:	8a 83       	std	Y+2, r24	; 0x02
    sched->current_proc = current_proc;
    1e5c:	ec 81       	ldd	r30, Y+4	; 0x04
    1e5e:	fd 81       	ldd	r31, Y+5	; 0x05
    1e60:	8a 81       	ldd	r24, Y+2	; 0x02
    1e62:	9b 81       	ldd	r25, Y+3	; 0x03
    1e64:	91 83       	std	Z+1, r25	; 0x01
    1e66:	80 83       	st	Z, r24
#ifdef CONFIG_MP
    spin_unlock( &sched->lock );
    spin_lock( &current_proc->lock );
#endif // CONFIG_MP
    //Хук "восстановление контекста"
    if( current_proc->rs_hook )current_proc->rs_hook( current_proc->arg );
    1e68:	ea 81       	ldd	r30, Y+2	; 0x02
    1e6a:	fb 81       	ldd	r31, Y+3	; 0x03
    1e6c:	86 a1       	ldd	r24, Z+38	; 0x26
    1e6e:	97 a1       	ldd	r25, Z+39	; 0x27
    1e70:	00 97       	sbiw	r24, 0x00	; 0
    1e72:	51 f0       	breq	.+20     	; 0x1e88 <sched_schedule+0x140>
    1e74:	ea 81       	ldd	r30, Y+2	; 0x02
    1e76:	fb 81       	ldd	r31, Y+3	; 0x03
    1e78:	26 a1       	ldd	r18, Z+38	; 0x26
    1e7a:	37 a1       	ldd	r19, Z+39	; 0x27
    1e7c:	ea 81       	ldd	r30, Y+2	; 0x02
    1e7e:	fb 81       	ldd	r31, Y+3	; 0x03
    1e80:	80 a5       	ldd	r24, Z+40	; 0x28
    1e82:	91 a5       	ldd	r25, Z+41	; 0x29
    1e84:	f9 01       	movw	r30, r18
    1e86:	09 95       	icall
#ifdef CONFIG_MP
    spin_unlock( &current_proc->lock );
#endif // CONFIG_MP
}
    1e88:	0f 90       	pop	r0
    1e8a:	0f 90       	pop	r0
    1e8c:	0f 90       	pop	r0
    1e8e:	0f 90       	pop	r0
    1e90:	0f 90       	pop	r0
    1e92:	cf 91       	pop	r28
    1e94:	df 91       	pop	r29
    1e96:	08 95       	ret

00001e98 <sched_reschedule>:
                        sched_t * sched
#else
                        void
#endif // CONFIG_MP
                       )
{
    1e98:	df 93       	push	r29
    1e9a:	cf 93       	push	r28
    1e9c:	00 d0       	rcall	.+0      	; 0x1e9e <sched_reschedule+0x6>
    1e9e:	00 d0       	rcall	.+0      	; 0x1ea0 <sched_reschedule+0x8>
    1ea0:	cd b7       	in	r28, 0x3d	; 61
    1ea2:	de b7       	in	r29, 0x3e	; 62
#ifndef CONFIG_MP
    sched_t * sched = (sched_t *)&kernel.sched;
    1ea4:	88 e1       	ldi	r24, 0x18	; 24
    1ea6:	91 e0       	ldi	r25, 0x01	; 1
    1ea8:	9c 83       	std	Y+4, r25	; 0x04
    1eaa:	8b 83       	std	Y+3, r24	; 0x03
#endif // nCONFIG_MP
    // Меняем только с локального процессора, блокировку sched->lock можно не захватывать!
    proc_t * current_proc = sched->current_proc;
    1eac:	eb 81       	ldd	r30, Y+3	; 0x03
    1eae:	fc 81       	ldd	r31, Y+4	; 0x04
    1eb0:	80 81       	ld	r24, Z
    1eb2:	91 81       	ldd	r25, Z+1	; 0x01
    1eb4:	9a 83       	std	Y+2, r25	; 0x02
    1eb6:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    // А вот эту блокировку обязательно надо захватить!
    spin_lock( &current_proc->lock );
#endif // CONFIG_MP
    // Хук "сохранение контекста"
    if( current_proc->sv_hook )current_proc->sv_hook( current_proc->arg );
    1eb8:	e9 81       	ldd	r30, Y+1	; 0x01
    1eba:	fa 81       	ldd	r31, Y+2	; 0x02
    1ebc:	84 a1       	ldd	r24, Z+36	; 0x24
    1ebe:	95 a1       	ldd	r25, Z+37	; 0x25
    1ec0:	00 97       	sbiw	r24, 0x00	; 0
    1ec2:	51 f0       	breq	.+20     	; 0x1ed8 <sched_reschedule+0x40>
    1ec4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ec6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ec8:	24 a1       	ldd	r18, Z+36	; 0x24
    1eca:	35 a1       	ldd	r19, Z+37	; 0x25
    1ecc:	e9 81       	ldd	r30, Y+1	; 0x01
    1ece:	fa 81       	ldd	r31, Y+2	; 0x02
    1ed0:	80 a5       	ldd	r24, Z+40	; 0x28
    1ed2:	91 a5       	ldd	r25, Z+41	; 0x29
    1ed4:	f9 01       	movw	r30, r18
    1ed6:	09 95       	icall
#ifdef CONFIG_MP
    spin_unlock( &current_proc->lock );
    spin_lock( &sched->lock );
#endif // CONFIG_MP
    _sched_list_switch( sched );
    1ed8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eda:	9c 81       	ldd	r25, Y+4	; 0x04
    1edc:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <_sched_list_switch>
    current_proc = (proc_t *)xlist_head( sched->ready ); // Вытесняющая многозадачность же!
    1ee0:	eb 81       	ldd	r30, Y+3	; 0x03
    1ee2:	fc 81       	ldd	r31, Y+4	; 0x04
    1ee4:	82 81       	ldd	r24, Z+2	; 0x02
    1ee6:	93 81       	ldd	r25, Z+3	; 0x03
    1ee8:	0e 94 1e 11 	call	0x223c	; 0x223c <xlist_head>
    1eec:	9a 83       	std	Y+2, r25	; 0x02
    1eee:	89 83       	std	Y+1, r24	; 0x01
    sched->current_proc = current_proc;
    1ef0:	eb 81       	ldd	r30, Y+3	; 0x03
    1ef2:	fc 81       	ldd	r31, Y+4	; 0x04
    1ef4:	89 81       	ldd	r24, Y+1	; 0x01
    1ef6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef8:	91 83       	std	Z+1, r25	; 0x01
    1efa:	80 83       	st	Z, r24

#ifdef CONFIG_MP
    spin_lock(&current_proc->lock);
#endif // CONFIG_MP
    //Хук "восстановление контекста"
    if( current_proc->rs_hook )current_proc->rs_hook( current_proc->arg );
    1efc:	e9 81       	ldd	r30, Y+1	; 0x01
    1efe:	fa 81       	ldd	r31, Y+2	; 0x02
    1f00:	86 a1       	ldd	r24, Z+38	; 0x26
    1f02:	97 a1       	ldd	r25, Z+39	; 0x27
    1f04:	00 97       	sbiw	r24, 0x00	; 0
    1f06:	51 f0       	breq	.+20     	; 0x1f1c <sched_reschedule+0x84>
    1f08:	e9 81       	ldd	r30, Y+1	; 0x01
    1f0a:	fa 81       	ldd	r31, Y+2	; 0x02
    1f0c:	26 a1       	ldd	r18, Z+38	; 0x26
    1f0e:	37 a1       	ldd	r19, Z+39	; 0x27
    1f10:	e9 81       	ldd	r30, Y+1	; 0x01
    1f12:	fa 81       	ldd	r31, Y+2	; 0x02
    1f14:	80 a5       	ldd	r24, Z+40	; 0x28
    1f16:	91 a5       	ldd	r25, Z+41	; 0x29
    1f18:	f9 01       	movw	r30, r18
    1f1a:	09 95       	icall
#ifdef CONFIG_MP
    spin_unlock( &current_proc->lock );
#endif // CONFIG_MP
}
    1f1c:	0f 90       	pop	r0
    1f1e:	0f 90       	pop	r0
    1f20:	0f 90       	pop	r0
    1f22:	0f 90       	pop	r0
    1f24:	cf 91       	pop	r28
    1f26:	df 91       	pop	r29
    1f28:	08 95       	ret

00001f2a <sem_init_isr>:
*****************************************************************************************/
#include "../include/bugurt.h"

// Инициализация
void sem_init_isr( sem_t * sem, count_t count )
{
    1f2a:	df 93       	push	r29
    1f2c:	cf 93       	push	r28
    1f2e:	00 d0       	rcall	.+0      	; 0x1f30 <sem_init_isr+0x6>
    1f30:	00 d0       	rcall	.+0      	; 0x1f32 <sem_init_isr+0x8>
    1f32:	cd b7       	in	r28, 0x3d	; 61
    1f34:	de b7       	in	r29, 0x3e	; 62
    1f36:	9a 83       	std	Y+2, r25	; 0x02
    1f38:	89 83       	std	Y+1, r24	; 0x01
    1f3a:	7c 83       	std	Y+4, r23	; 0x04
    1f3c:	6b 83       	std	Y+3, r22	; 0x03
    xlist_init( (xlist_t *)sem );
    1f3e:	89 81       	ldd	r24, Y+1	; 0x01
    1f40:	9a 81       	ldd	r25, Y+2	; 0x02
    1f42:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <xlist_init>
    sem->counter = count;
    1f46:	e9 81       	ldd	r30, Y+1	; 0x01
    1f48:	fa 81       	ldd	r31, Y+2	; 0x02
    1f4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f4e:	92 8b       	std	Z+18, r25	; 0x12
    1f50:	81 8b       	std	Z+17, r24	; 0x11
}
    1f52:	0f 90       	pop	r0
    1f54:	0f 90       	pop	r0
    1f56:	0f 90       	pop	r0
    1f58:	0f 90       	pop	r0
    1f5a:	cf 91       	pop	r28
    1f5c:	df 91       	pop	r29
    1f5e:	08 95       	ret

00001f60 <_sem_lock>:

// То же, для внутреннего использования
bool_t _sem_lock( sem_t * sem )
{
    1f60:	df 93       	push	r29
    1f62:	cf 93       	push	r28
    1f64:	00 d0       	rcall	.+0      	; 0x1f66 <_sem_lock+0x6>
    1f66:	00 d0       	rcall	.+0      	; 0x1f68 <_sem_lock+0x8>
    1f68:	0f 92       	push	r0
    1f6a:	cd b7       	in	r28, 0x3d	; 61
    1f6c:	de b7       	in	r29, 0x3e	; 62
    1f6e:	9d 83       	std	Y+5, r25	; 0x05
    1f70:	8c 83       	std	Y+4, r24	; 0x04

    bool_t ret = 0;
    1f72:	1b 82       	std	Y+3, r1	; 0x03
    if( sem->counter != 0 )
    1f74:	ec 81       	ldd	r30, Y+4	; 0x04
    1f76:	fd 81       	ldd	r31, Y+5	; 0x05
    1f78:	81 89       	ldd	r24, Z+17	; 0x11
    1f7a:	92 89       	ldd	r25, Z+18	; 0x12
    1f7c:	00 97       	sbiw	r24, 0x00	; 0
    1f7e:	61 f0       	breq	.+24     	; 0x1f98 <_sem_lock+0x38>
    {
        sem->counter--;
    1f80:	ec 81       	ldd	r30, Y+4	; 0x04
    1f82:	fd 81       	ldd	r31, Y+5	; 0x05
    1f84:	81 89       	ldd	r24, Z+17	; 0x11
    1f86:	92 89       	ldd	r25, Z+18	; 0x12
    1f88:	01 97       	sbiw	r24, 0x01	; 1
    1f8a:	ec 81       	ldd	r30, Y+4	; 0x04
    1f8c:	fd 81       	ldd	r31, Y+5	; 0x05
    1f8e:	92 8b       	std	Z+18, r25	; 0x12
    1f90:	81 8b       	std	Z+17, r24	; 0x11
#ifdef CONFIG_MP
        spin_unlock( &sem->lock );// Освобождение блокировки семафора
#endif //CONFIG_MP
        ret = (bool_t)1;
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	8b 83       	std	Y+3, r24	; 0x03
    1f96:	16 c0       	rjmp	.+44     	; 0x1fc4 <_sem_lock+0x64>
    }
    else
    {
        proc_t * proc = current_proc();
    1f98:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <current_proc>
    1f9c:	9a 83       	std	Y+2, r25	; 0x02
    1f9e:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
        spin_lock( &proc->lock );// Захват блокировки процесса
#endif //CONFIG_MP
        proc->flags |= PROC_FLG_QUEUE;
    1fa0:	e9 81       	ldd	r30, Y+1	; 0x01
    1fa2:	fa 81       	ldd	r31, Y+2	; 0x02
    1fa4:	83 85       	ldd	r24, Z+11	; 0x0b
    1fa6:	88 60       	ori	r24, 0x08	; 8
    1fa8:	e9 81       	ldd	r30, Y+1	; 0x01
    1faa:	fa 81       	ldd	r31, Y+2	; 0x02
    1fac:	83 87       	std	Z+11, r24	; 0x0b
        _proc_stop( proc );
    1fae:	89 81       	ldd	r24, Y+1	; 0x01
    1fb0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fb2:	0e 94 c5 0c 	call	0x198a	; 0x198a <_proc_stop>
        gitem_insert( (gitem_t *)proc, (xlist_t *)sem );
    1fb6:	89 81       	ldd	r24, Y+1	; 0x01
    1fb8:	9a 81       	ldd	r25, Y+2	; 0x02
    1fba:	2c 81       	ldd	r18, Y+4	; 0x04
    1fbc:	3d 81       	ldd	r19, Y+5	; 0x05
    1fbe:	b9 01       	movw	r22, r18
    1fc0:	0e 94 a0 06 	call	0xd40	; 0xd40 <gitem_insert>
#ifdef CONFIG_MP
        spin_unlock( &proc->lock );// Освобождение блокировки процесса
#endif //CONFIG_MP
    }
    return ret;
    1fc4:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1fc6:	0f 90       	pop	r0
    1fc8:	0f 90       	pop	r0
    1fca:	0f 90       	pop	r0
    1fcc:	0f 90       	pop	r0
    1fce:	0f 90       	pop	r0
    1fd0:	cf 91       	pop	r28
    1fd2:	df 91       	pop	r29
    1fd4:	08 95       	ret

00001fd6 <_sem_unlock>:

void _sem_unlock( sem_t * sem )
{
    1fd6:	df 93       	push	r29
    1fd8:	cf 93       	push	r28
    1fda:	00 d0       	rcall	.+0      	; 0x1fdc <_sem_unlock+0x6>
    1fdc:	00 d0       	rcall	.+0      	; 0x1fde <_sem_unlock+0x8>
    1fde:	cd b7       	in	r28, 0x3d	; 61
    1fe0:	de b7       	in	r29, 0x3e	; 62
    1fe2:	9c 83       	std	Y+4, r25	; 0x04
    1fe4:	8b 83       	std	Y+3, r24	; 0x03
    if( ((xlist_t *)sem)->index == (index_t)0  )
    1fe6:	eb 81       	ldd	r30, Y+3	; 0x03
    1fe8:	fc 81       	ldd	r31, Y+4	; 0x04
    1fea:	80 89       	ldd	r24, Z+16	; 0x10
    1fec:	88 23       	and	r24, r24
    1fee:	51 f4       	brne	.+20     	; 0x2004 <_sem_unlock+0x2e>
    {
        sem->counter++;
    1ff0:	eb 81       	ldd	r30, Y+3	; 0x03
    1ff2:	fc 81       	ldd	r31, Y+4	; 0x04
    1ff4:	81 89       	ldd	r24, Z+17	; 0x11
    1ff6:	92 89       	ldd	r25, Z+18	; 0x12
    1ff8:	01 96       	adiw	r24, 0x01	; 1
    1ffa:	eb 81       	ldd	r30, Y+3	; 0x03
    1ffc:	fc 81       	ldd	r31, Y+4	; 0x04
    1ffe:	92 8b       	std	Z+18, r25	; 0x12
    2000:	81 8b       	std	Z+17, r24	; 0x11
    2002:	15 c0       	rjmp	.+42     	; 0x202e <_sem_unlock+0x58>
#ifdef CONFIG_MP
        spin_unlock( &sem->lock );
#endif //CONFIG_MP
        return;
    }
    proc_t * proc = (proc_t *)xlist_head((xlist_t *)sem);
    2004:	8b 81       	ldd	r24, Y+3	; 0x03
    2006:	9c 81       	ldd	r25, Y+4	; 0x04
    2008:	0e 94 1e 11 	call	0x223c	; 0x223c <xlist_head>
    200c:	9a 83       	std	Y+2, r25	; 0x02
    200e:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );// Захват спин-блокировки процесса
#endif //CONFIG_MP
    proc->flags &= ~PROC_FLG_QUEUE;
    2010:	e9 81       	ldd	r30, Y+1	; 0x01
    2012:	fa 81       	ldd	r31, Y+2	; 0x02
    2014:	83 85       	ldd	r24, Z+11	; 0x0b
    2016:	87 7f       	andi	r24, 0xF7	; 247
    2018:	e9 81       	ldd	r30, Y+1	; 0x01
    201a:	fa 81       	ldd	r31, Y+2	; 0x02
    201c:	83 87       	std	Z+11, r24	; 0x0b
    gitem_cut( (gitem_t *)proc );
    201e:	89 81       	ldd	r24, Y+1	; 0x01
    2020:	9a 81       	ldd	r25, Y+2	; 0x02
    2022:	0e 94 fd 07 	call	0xffa	; 0xffa <gitem_cut>
    _proc_run( proc );
    2026:	89 81       	ldd	r24, Y+1	; 0x01
    2028:	9a 81       	ldd	r25, Y+2	; 0x02
    202a:	0e 94 3e 0c 	call	0x187c	; 0x187c <_proc_run>
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );// Освобождение спин-блокировки процесса
#endif //CONFIG_MP
}
    202e:	0f 90       	pop	r0
    2030:	0f 90       	pop	r0
    2032:	0f 90       	pop	r0
    2034:	0f 90       	pop	r0
    2036:	cf 91       	pop	r28
    2038:	df 91       	pop	r29
    203a:	08 95       	ret

0000203c <sig_init_isr>:
*****************************************************************************************/
#include "../include/bugurt.h"
//========================================================================================
// Инициация
void sig_init_isr( sig_t * sig )
{
    203c:	df 93       	push	r29
    203e:	cf 93       	push	r28
    2040:	00 d0       	rcall	.+0      	; 0x2042 <sig_init_isr+0x6>
    2042:	cd b7       	in	r28, 0x3d	; 61
    2044:	de b7       	in	r29, 0x3e	; 62
    2046:	9a 83       	std	Y+2, r25	; 0x02
    2048:	89 83       	std	Y+1, r24	; 0x01
    {
        xlist_init( (xlist_t *)sig->sig_list + i );
        stat_init( (stat_t *)sig->sig_stat + i );
    }
#else
    xlist_init( (xlist_t *)sig );
    204a:	89 81       	ldd	r24, Y+1	; 0x01
    204c:	9a 81       	ldd	r25, Y+2	; 0x02
    204e:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <xlist_init>
#endif
}
    2052:	0f 90       	pop	r0
    2054:	0f 90       	pop	r0
    2056:	cf 91       	pop	r28
    2058:	df 91       	pop	r29
    205a:	08 95       	ret

0000205c <sig_wait_stage_1_isr>:
//========================================================================================
// Это выполнится при постановке процесса в список ожидания сигнала
void sig_wait_stage_1_isr( sig_t * sig )
{
    205c:	df 93       	push	r29
    205e:	cf 93       	push	r28
    2060:	00 d0       	rcall	.+0      	; 0x2062 <sig_wait_stage_1_isr+0x6>
    2062:	00 d0       	rcall	.+0      	; 0x2064 <sig_wait_stage_1_isr+0x8>
    2064:	cd b7       	in	r28, 0x3d	; 61
    2066:	de b7       	in	r29, 0x3e	; 62
    2068:	9c 83       	std	Y+4, r25	; 0x04
    206a:	8b 83       	std	Y+3, r24	; 0x03
#ifdef CONFIG_MP
    spin_lock( &sig->lock );
#endif // CONFIG_MP
    proc_t * proc = current_proc();
    206c:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <current_proc>
    2070:	9a 83       	std	Y+2, r25	; 0x02
    2072:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    // Останавливаем процесс
    _proc_stop(proc);
    2074:	89 81       	ldd	r24, Y+1	; 0x01
    2076:	9a 81       	ldd	r25, Y+2	; 0x02
    2078:	0e 94 c5 0c 	call	0x198a	; 0x198a <_proc_stop>
    proc->flags |= PROC_FLG_WAIT;
    207c:	e9 81       	ldd	r30, Y+1	; 0x01
    207e:	fa 81       	ldd	r31, Y+2	; 0x02
    2080:	83 85       	ldd	r24, Z+11	; 0x0b
    2082:	80 61       	ori	r24, 0x10	; 16
    2084:	e9 81       	ldd	r30, Y+1	; 0x01
    2086:	fa 81       	ldd	r31, Y+2	; 0x02
    2088:	83 87       	std	Z+11, r24	; 0x0b
        stat_inc( proc, (stat_t *)sig->sig_stat + sig_core );
    }
    spin_unlock( &proc->lock );
    spin_unlock( &sig->lock );
#else
    gitem_insert_group( (gitem_t *)proc, (xlist_t *)sig );
    208a:	89 81       	ldd	r24, Y+1	; 0x01
    208c:	9a 81       	ldd	r25, Y+2	; 0x02
    208e:	2b 81       	ldd	r18, Y+3	; 0x03
    2090:	3c 81       	ldd	r19, Y+4	; 0x04
    2092:	b9 01       	movw	r22, r18
    2094:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <gitem_insert_group>
#endif //CONFIG_MP
}
    2098:	0f 90       	pop	r0
    209a:	0f 90       	pop	r0
    209c:	0f 90       	pop	r0
    209e:	0f 90       	pop	r0
    20a0:	cf 91       	pop	r28
    20a2:	df 91       	pop	r29
    20a4:	08 95       	ret

000020a6 <sig_signal_isr>:
    enable_interrupts();
}
//========================================================================================
// Тоже самое что и предыдущие, олько для вызова из обработчиков прерываний и из критических секций
void sig_signal_isr( sig_t * sig )
{
    20a6:	df 93       	push	r29
    20a8:	cf 93       	push	r28
    20aa:	00 d0       	rcall	.+0      	; 0x20ac <sig_signal_isr+0x6>
    20ac:	00 d0       	rcall	.+0      	; 0x20ae <sig_signal_isr+0x8>
    20ae:	cd b7       	in	r28, 0x3d	; 61
    20b0:	de b7       	in	r29, 0x3e	; 62
    20b2:	9c 83       	std	Y+4, r25	; 0x04
    20b4:	8b 83       	std	Y+3, r24	; 0x03
    }
    resched(core);// Перепланировка
    spin_unlock( &proc->lock );// Освобождение блокировки процесса
    spin_unlock( &sig->lock );// Освобождение блокировки сигнала
#else
    if( ((xlist_t *)sig)->index == (index_t)0 )return;
    20b6:	eb 81       	ldd	r30, Y+3	; 0x03
    20b8:	fc 81       	ldd	r31, Y+4	; 0x04
    20ba:	80 89       	ldd	r24, Z+16	; 0x10
    20bc:	88 23       	and	r24, r24
    20be:	a9 f0       	breq	.+42     	; 0x20ea <sig_signal_isr+0x44>
    proc_t * proc = (proc_t *)xlist_head( (xlist_t *)sig );
    20c0:	8b 81       	ldd	r24, Y+3	; 0x03
    20c2:	9c 81       	ldd	r25, Y+4	; 0x04
    20c4:	0e 94 1e 11 	call	0x223c	; 0x223c <xlist_head>
    20c8:	9a 83       	std	Y+2, r25	; 0x02
    20ca:	89 83       	std	Y+1, r24	; 0x01
    gitem_fast_cut( (gitem_t *)proc );
    20cc:	89 81       	ldd	r24, Y+1	; 0x01
    20ce:	9a 81       	ldd	r25, Y+2	; 0x02
    20d0:	0e 94 77 07 	call	0xeee	; 0xeee <gitem_fast_cut>
    gitem_insert( (gitem_t *)proc, kernel.sched.ready );
    20d4:	89 81       	ldd	r24, Y+1	; 0x01
    20d6:	9a 81       	ldd	r25, Y+2	; 0x02
    20d8:	20 91 1a 01 	lds	r18, 0x011A
    20dc:	30 91 1b 01 	lds	r19, 0x011B
    20e0:	b9 01       	movw	r22, r18
    20e2:	0e 94 a0 06 	call	0xd40	; 0xd40 <gitem_insert>
    resched();
    20e6:	0e 94 fe 00 	call	0x1fc	; 0x1fc <resched>
#endif //CONFIG_MP
}
    20ea:	0f 90       	pop	r0
    20ec:	0f 90       	pop	r0
    20ee:	0f 90       	pop	r0
    20f0:	0f 90       	pop	r0
    20f2:	cf 91       	pop	r28
    20f4:	df 91       	pop	r29
    20f6:	08 95       	ret

000020f8 <sig_broadcast_isr>:
//----------------------------------------------------------------------------------------
void sig_broadcast_isr( sig_t * sig )
{
    20f8:	df 93       	push	r29
    20fa:	cf 93       	push	r28
    20fc:	00 d0       	rcall	.+0      	; 0x20fe <sig_broadcast_isr+0x6>
    20fe:	cd b7       	in	r28, 0x3d	; 61
    2100:	de b7       	in	r29, 0x3e	; 62
    2102:	9a 83       	std	Y+2, r25	; 0x02
    2104:	89 83       	std	Y+1, r24	; 0x01

        resched(core);
    }
    spin_unlock( &sig->lock );
#else
    gitem_xlist_merge( (xlist_t *)sig, kernel.sched.ready );
    2106:	20 91 1a 01 	lds	r18, 0x011A
    210a:	30 91 1b 01 	lds	r19, 0x011B
    210e:	89 81       	ldd	r24, Y+1	; 0x01
    2110:	9a 81       	ldd	r25, Y+2	; 0x02
    2112:	b9 01       	movw	r22, r18
    2114:	0e 94 14 08 	call	0x1028	; 0x1028 <gitem_xlist_merge>
    resched();
    2118:	0e 94 fe 00 	call	0x1fc	; 0x1fc <resched>
#endif //CONFIG_MP
}
    211c:	0f 90       	pop	r0
    211e:	0f 90       	pop	r0
    2120:	cf 91       	pop	r28
    2122:	df 91       	pop	r29
    2124:	08 95       	ret

00002126 <_clear_timer>:
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
//========================================================================================
void _clear_timer(timer_t * t)
{
    2126:	df 93       	push	r29
    2128:	cf 93       	push	r28
    212a:	00 d0       	rcall	.+0      	; 0x212c <_clear_timer+0x6>
    212c:	cd b7       	in	r28, 0x3d	; 61
    212e:	de b7       	in	r29, 0x3e	; 62
    2130:	9a 83       	std	Y+2, r25	; 0x02
    2132:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    core_id_t current_core = _enter_crit_sec();
    spin_lock( &kernel.timer_lock );
#else
    enter_crit_sec();
    2134:	0e 94 4a 06 	call	0xc94	; 0xc94 <enter_crit_sec>
#endif //CONFIG_MP
    *t = kernel.timer;
    2138:	80 91 72 01 	lds	r24, 0x0172
    213c:	90 91 73 01 	lds	r25, 0x0173
    2140:	e9 81       	ldd	r30, Y+1	; 0x01
    2142:	fa 81       	ldd	r31, Y+2	; 0x02
    2144:	91 83       	std	Z+1, r25	; 0x01
    2146:	80 83       	st	Z, r24
#ifdef CONFIG_MP
    spin_unlock( &kernel.timer_lock );
    _exit_crit_sec(current_core);
#else
    exit_crit_sec();
    2148:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <exit_crit_sec>
#endif //CONFIG_MP
}
    214c:	0f 90       	pop	r0
    214e:	0f 90       	pop	r0
    2150:	cf 91       	pop	r28
    2152:	df 91       	pop	r29
    2154:	08 95       	ret

00002156 <_timer>:
//----------------------------------------------------------------------------------------
timer_t _timer(timer_t t)
{
    2156:	df 93       	push	r29
    2158:	cf 93       	push	r28
    215a:	00 d0       	rcall	.+0      	; 0x215c <_timer+0x6>
    215c:	00 d0       	rcall	.+0      	; 0x215e <_timer+0x8>
    215e:	cd b7       	in	r28, 0x3d	; 61
    2160:	de b7       	in	r29, 0x3e	; 62
    2162:	9c 83       	std	Y+4, r25	; 0x04
    2164:	8b 83       	std	Y+3, r24	; 0x03
    timer_t ret;
#ifdef CONFIG_MP
    core_id_t current_core = _enter_crit_sec();
    spin_lock( &kernel.timer_lock );
#else
    enter_crit_sec();
    2166:	0e 94 4a 06 	call	0xc94	; 0xc94 <enter_crit_sec>
#endif //CONFIG_MP
    ret = (timer_t)kernel.timer - (timer_t)t;
    216a:	20 91 72 01 	lds	r18, 0x0172
    216e:	30 91 73 01 	lds	r19, 0x0173
    2172:	8b 81       	ldd	r24, Y+3	; 0x03
    2174:	9c 81       	ldd	r25, Y+4	; 0x04
    2176:	a9 01       	movw	r20, r18
    2178:	48 1b       	sub	r20, r24
    217a:	59 0b       	sbc	r21, r25
    217c:	ca 01       	movw	r24, r20
    217e:	9a 83       	std	Y+2, r25	; 0x02
    2180:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_unlock( &kernel.timer_lock );
    _exit_crit_sec(current_core);
#else
    exit_crit_sec();
    2182:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <exit_crit_sec>
#endif //CONFIG_MP
    return ret;
    2186:	89 81       	ldd	r24, Y+1	; 0x01
    2188:	9a 81       	ldd	r25, Y+2	; 0x02
}
    218a:	0f 90       	pop	r0
    218c:	0f 90       	pop	r0
    218e:	0f 90       	pop	r0
    2190:	0f 90       	pop	r0
    2192:	cf 91       	pop	r28
    2194:	df 91       	pop	r29
    2196:	08 95       	ret

00002198 <wait_time>:

//----------------------------------------------------------------------------------------
void wait_time(timer_t time)
{
    2198:	df 93       	push	r29
    219a:	cf 93       	push	r28
    219c:	00 d0       	rcall	.+0      	; 0x219e <wait_time+0x6>
    219e:	00 d0       	rcall	.+0      	; 0x21a0 <wait_time+0x8>
    21a0:	0f 92       	push	r0
    21a2:	cd b7       	in	r28, 0x3d	; 61
    21a4:	de b7       	in	r29, 0x3e	; 62
    21a6:	9d 83       	std	Y+5, r25	; 0x05
    21a8:	8c 83       	std	Y+4, r24	; 0x04
    timer_t tmr;
    bool_t roll=(bool_t)1;
    21aa:	81 e0       	ldi	r24, 0x01	; 1
    21ac:	89 83       	std	Y+1, r24	; 0x01
    CLEAR_TIMER(tmr);
    21ae:	ce 01       	movw	r24, r28
    21b0:	02 96       	adiw	r24, 0x02	; 2
    21b2:	0e 94 93 10 	call	0x2126	; 0x2126 <_clear_timer>
    21b6:	0d c0       	rjmp	.+26     	; 0x21d2 <wait_time+0x3a>
    while((bool_t)roll)
    {
        roll = (bool_t)( TIMER(tmr) < (timer_t)time );
    21b8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ba:	9b 81       	ldd	r25, Y+3	; 0x03
    21bc:	0e 94 ab 10 	call	0x2156	; 0x2156 <_timer>
    21c0:	9c 01       	movw	r18, r24
    21c2:	8c 81       	ldd	r24, Y+4	; 0x04
    21c4:	9d 81       	ldd	r25, Y+5	; 0x05
    21c6:	19 82       	std	Y+1, r1	; 0x01
    21c8:	28 17       	cp	r18, r24
    21ca:	39 07       	cpc	r19, r25
    21cc:	10 f4       	brcc	.+4      	; 0x21d2 <wait_time+0x3a>
    21ce:	81 e0       	ldi	r24, 0x01	; 1
    21d0:	89 83       	std	Y+1, r24	; 0x01
void wait_time(timer_t time)
{
    timer_t tmr;
    bool_t roll=(bool_t)1;
    CLEAR_TIMER(tmr);
    while((bool_t)roll)
    21d2:	89 81       	ldd	r24, Y+1	; 0x01
    21d4:	88 23       	and	r24, r24
    21d6:	81 f7       	brne	.-32     	; 0x21b8 <wait_time+0x20>
    {
        roll = (bool_t)( TIMER(tmr) < (timer_t)time );
    }
}
    21d8:	0f 90       	pop	r0
    21da:	0f 90       	pop	r0
    21dc:	0f 90       	pop	r0
    21de:	0f 90       	pop	r0
    21e0:	0f 90       	pop	r0
    21e2:	cf 91       	pop	r28
    21e4:	df 91       	pop	r29
    21e6:	08 95       	ret

000021e8 <xlist_init>:
**********************************************/
//Инициация
void xlist_init(
    xlist_t * xlist
)
{
    21e8:	df 93       	push	r29
    21ea:	cf 93       	push	r28
    21ec:	00 d0       	rcall	.+0      	; 0x21ee <xlist_init+0x6>
    21ee:	00 d0       	rcall	.+0      	; 0x21f0 <xlist_init+0x8>
    21f0:	cd b7       	in	r28, 0x3d	; 61
    21f2:	de b7       	in	r29, 0x3e	; 62
    21f4:	9c 83       	std	Y+4, r25	; 0x04
    21f6:	8b 83       	std	Y+3, r24	; 0x03
    count_t i;
    //список пуст
    xlist->index = (index_t)0;
    21f8:	eb 81       	ldd	r30, Y+3	; 0x03
    21fa:	fc 81       	ldd	r31, Y+4	; 0x04
    21fc:	10 8a       	std	Z+16, r1	; 0x10
    //обнуляем указатели
    for( i = 0; i < BITS_IN_INDEX_T; i++ )xlist->item[i] = (item_t *)0;
    21fe:	1a 82       	std	Y+2, r1	; 0x02
    2200:	19 82       	std	Y+1, r1	; 0x01
    2202:	10 c0       	rjmp	.+32     	; 0x2224 <xlist_init+0x3c>
    2204:	89 81       	ldd	r24, Y+1	; 0x01
    2206:	9a 81       	ldd	r25, Y+2	; 0x02
    2208:	2b 81       	ldd	r18, Y+3	; 0x03
    220a:	3c 81       	ldd	r19, Y+4	; 0x04
    220c:	88 0f       	add	r24, r24
    220e:	99 1f       	adc	r25, r25
    2210:	f9 01       	movw	r30, r18
    2212:	e8 0f       	add	r30, r24
    2214:	f9 1f       	adc	r31, r25
    2216:	11 82       	std	Z+1, r1	; 0x01
    2218:	10 82       	st	Z, r1
    221a:	89 81       	ldd	r24, Y+1	; 0x01
    221c:	9a 81       	ldd	r25, Y+2	; 0x02
    221e:	01 96       	adiw	r24, 0x01	; 1
    2220:	9a 83       	std	Y+2, r25	; 0x02
    2222:	89 83       	std	Y+1, r24	; 0x01
    2224:	89 81       	ldd	r24, Y+1	; 0x01
    2226:	9a 81       	ldd	r25, Y+2	; 0x02
    2228:	88 30       	cpi	r24, 0x08	; 8
    222a:	91 05       	cpc	r25, r1
    222c:	58 f3       	brcs	.-42     	; 0x2204 <xlist_init+0x1c>
}
    222e:	0f 90       	pop	r0
    2230:	0f 90       	pop	r0
    2232:	0f 90       	pop	r0
    2234:	0f 90       	pop	r0
    2236:	cf 91       	pop	r28
    2238:	df 91       	pop	r29
    223a:	08 95       	ret

0000223c <xlist_head>:
//===========================================================================
//Поиск головы списка
item_t * xlist_head(xlist_t * xlist)
{
    223c:	df 93       	push	r29
    223e:	cf 93       	push	r28
    2240:	00 d0       	rcall	.+0      	; 0x2242 <xlist_head+0x6>
    2242:	00 d0       	rcall	.+0      	; 0x2244 <xlist_head+0x8>
    2244:	0f 92       	push	r0
    2246:	cd b7       	in	r28, 0x3d	; 61
    2248:	de b7       	in	r29, 0x3e	; 62
    224a:	9d 83       	std	Y+5, r25	; 0x05
    224c:	8c 83       	std	Y+4, r24	; 0x04
    item_t * ret_val = (item_t *)0;
    224e:	1b 82       	std	Y+3, r1	; 0x03
    2250:	1a 82       	std	Y+2, r1	; 0x02
    index_t index = xlist->index;
    2252:	ec 81       	ldd	r30, Y+4	; 0x04
    2254:	fd 81       	ldd	r31, Y+5	; 0x05
    2256:	80 89       	ldd	r24, Z+16	; 0x10
    2258:	89 83       	std	Y+1, r24	; 0x01

    if( index != (index_t)0 )
    225a:	89 81       	ldd	r24, Y+1	; 0x01
    225c:	88 23       	and	r24, r24
    225e:	81 f0       	breq	.+32     	; 0x2280 <xlist_head+0x44>
    {
        ret_val = xlist->item[ index_search( index ) ];
    2260:	89 81       	ldd	r24, Y+1	; 0x01
    2262:	0e 94 21 09 	call	0x1242	; 0x1242 <index_search>
    2266:	88 2f       	mov	r24, r24
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	2c 81       	ldd	r18, Y+4	; 0x04
    226c:	3d 81       	ldd	r19, Y+5	; 0x05
    226e:	88 0f       	add	r24, r24
    2270:	99 1f       	adc	r25, r25
    2272:	f9 01       	movw	r30, r18
    2274:	e8 0f       	add	r30, r24
    2276:	f9 1f       	adc	r31, r25
    2278:	80 81       	ld	r24, Z
    227a:	91 81       	ldd	r25, Z+1	; 0x01
    227c:	9b 83       	std	Y+3, r25	; 0x03
    227e:	8a 83       	std	Y+2, r24	; 0x02
    }
    return ret_val;
    2280:	8a 81       	ldd	r24, Y+2	; 0x02
    2282:	9b 81       	ldd	r25, Y+3	; 0x03
}
    2284:	0f 90       	pop	r0
    2286:	0f 90       	pop	r0
    2288:	0f 90       	pop	r0
    228a:	0f 90       	pop	r0
    228c:	0f 90       	pop	r0
    228e:	cf 91       	pop	r28
    2290:	df 91       	pop	r29
    2292:	08 95       	ret

00002294 <xlist_switch>:

//===========================================================================
// переключение указателя в массиве на следующий элемент, пригодится в планировщике
void xlist_switch(xlist_t * xlist, prio_t prio)
{
    2294:	df 93       	push	r29
    2296:	cf 93       	push	r28
    2298:	00 d0       	rcall	.+0      	; 0x229a <xlist_switch+0x6>
    229a:	00 d0       	rcall	.+0      	; 0x229c <xlist_switch+0x8>
    229c:	0f 92       	push	r0
    229e:	cd b7       	in	r28, 0x3d	; 61
    22a0:	de b7       	in	r29, 0x3e	; 62
    22a2:	9c 83       	std	Y+4, r25	; 0x04
    22a4:	8b 83       	std	Y+3, r24	; 0x03
    22a6:	6d 83       	std	Y+5, r22	; 0x05
    item_t ** current = xlist->item + prio;
    22a8:	2b 81       	ldd	r18, Y+3	; 0x03
    22aa:	3c 81       	ldd	r19, Y+4	; 0x04
    22ac:	8d 81       	ldd	r24, Y+5	; 0x05
    22ae:	88 2f       	mov	r24, r24
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	88 0f       	add	r24, r24
    22b4:	99 1f       	adc	r25, r25
    22b6:	82 0f       	add	r24, r18
    22b8:	93 1f       	adc	r25, r19
    22ba:	9a 83       	std	Y+2, r25	; 0x02
    22bc:	89 83       	std	Y+1, r24	; 0x01
    *current = (*current)->next;
    22be:	e9 81       	ldd	r30, Y+1	; 0x01
    22c0:	fa 81       	ldd	r31, Y+2	; 0x02
    22c2:	01 90       	ld	r0, Z+
    22c4:	f0 81       	ld	r31, Z
    22c6:	e0 2d       	mov	r30, r0
    22c8:	80 81       	ld	r24, Z
    22ca:	91 81       	ldd	r25, Z+1	; 0x01
    22cc:	e9 81       	ldd	r30, Y+1	; 0x01
    22ce:	fa 81       	ldd	r31, Y+2	; 0x02
    22d0:	91 83       	std	Z+1, r25	; 0x01
    22d2:	80 83       	st	Z, r24
    //*current = (item_t *)*(item_t **)*(item_t ***)current;
}
    22d4:	0f 90       	pop	r0
    22d6:	0f 90       	pop	r0
    22d8:	0f 90       	pop	r0
    22da:	0f 90       	pop	r0
    22dc:	0f 90       	pop	r0
    22de:	cf 91       	pop	r28
    22e0:	df 91       	pop	r29
    22e2:	08 95       	ret

000022e4 <raise_syscall_interrupt>:
/*
 */
#include <bugurt.h>

void raise_syscall_interrupt(void)
{
    22e4:	df 93       	push	r29
    22e6:	cf 93       	push	r28
    22e8:	cd b7       	in	r28, 0x3d	; 61
    22ea:	de b7       	in	r29, 0x3e	; 62
    R2_on();
    22ec:	ab e2       	ldi	r26, 0x2B	; 43
    22ee:	b0 e0       	ldi	r27, 0x00	; 0
    22f0:	eb e2       	ldi	r30, 0x2B	; 43
    22f2:	f0 e0       	ldi	r31, 0x00	; 0
    22f4:	80 81       	ld	r24, Z
    22f6:	84 60       	ori	r24, 0x04	; 4
    22f8:	8c 93       	st	X, r24
    G2_off();
    22fa:	ab e2       	ldi	r26, 0x2B	; 43
    22fc:	b0 e0       	ldi	r27, 0x00	; 0
    22fe:	eb e2       	ldi	r30, 0x2B	; 43
    2300:	f0 e0       	ldi	r31, 0x00	; 0
    2302:	80 81       	ld	r24, Z
    2304:	87 7f       	andi	r24, 0xF7	; 247
    2306:	8c 93       	st	X, r24
    R2_off();
    2308:	ab e2       	ldi	r26, 0x2B	; 43
    230a:	b0 e0       	ldi	r27, 0x00	; 0
    230c:	eb e2       	ldi	r30, 0x2B	; 43
    230e:	f0 e0       	ldi	r31, 0x00	; 0
    2310:	80 81       	ld	r24, Z
    2312:	8b 7f       	andi	r24, 0xFB	; 251
    2314:	8c 93       	st	X, r24
    G2_on();
    2316:	ab e2       	ldi	r26, 0x2B	; 43
    2318:	b0 e0       	ldi	r27, 0x00	; 0
    231a:	eb e2       	ldi	r30, 0x2B	; 43
    231c:	f0 e0       	ldi	r31, 0x00	; 0
    231e:	80 81       	ld	r24, Z
    2320:	88 60       	ori	r24, 0x08	; 8
    2322:	8c 93       	st	X, r24
}
    2324:	cf 91       	pop	r28
    2326:	df 91       	pop	r29
    2328:	08 95       	ret

0000232a <start_scheduler>:

void start_scheduler( void )
{
    232a:	df 93       	push	r29
    232c:	cf 93       	push	r28
    232e:	cd b7       	in	r28, 0x3d	; 61
    2330:	de b7       	in	r29, 0x3e	; 62
    TIMSK2 |= 0x02;
    2332:	a0 e7       	ldi	r26, 0x70	; 112
    2334:	b0 e0       	ldi	r27, 0x00	; 0
    2336:	e0 e7       	ldi	r30, 0x70	; 112
    2338:	f0 e0       	ldi	r31, 0x00	; 0
    233a:	80 81       	ld	r24, Z
    233c:	82 60       	ori	r24, 0x02	; 2
    233e:	8c 93       	st	X, r24
}
    2340:	cf 91       	pop	r28
    2342:	df 91       	pop	r29
    2344:	08 95       	ret

00002346 <stop_scheduler>:

void stop_scheduler( void )
{
    2346:	df 93       	push	r29
    2348:	cf 93       	push	r28
    234a:	cd b7       	in	r28, 0x3d	; 61
    234c:	de b7       	in	r29, 0x3e	; 62
    TIMSK2 &= ~0x02;
    234e:	a0 e7       	ldi	r26, 0x70	; 112
    2350:	b0 e0       	ldi	r27, 0x00	; 0
    2352:	e0 e7       	ldi	r30, 0x70	; 112
    2354:	f0 e0       	ldi	r31, 0x00	; 0
    2356:	80 81       	ld	r24, Z
    2358:	8d 7f       	andi	r24, 0xFD	; 253
    235a:	8c 93       	st	X, r24
}
    235c:	cf 91       	pop	r28
    235e:	df 91       	pop	r29
    2360:	08 95       	ret

00002362 <blink_1>:

///----------------------------------------------------------------------------------------
void blink_1(void * t) {PORTB ^= 0x10;}
    2362:	df 93       	push	r29
    2364:	cf 93       	push	r28
    2366:	00 d0       	rcall	.+0      	; 0x2368 <blink_1+0x6>
    2368:	cd b7       	in	r28, 0x3d	; 61
    236a:	de b7       	in	r29, 0x3e	; 62
    236c:	9a 83       	std	Y+2, r25	; 0x02
    236e:	89 83       	std	Y+1, r24	; 0x01
    2370:	a5 e2       	ldi	r26, 0x25	; 37
    2372:	b0 e0       	ldi	r27, 0x00	; 0
    2374:	e5 e2       	ldi	r30, 0x25	; 37
    2376:	f0 e0       	ldi	r31, 0x00	; 0
    2378:	90 81       	ld	r25, Z
    237a:	80 e1       	ldi	r24, 0x10	; 16
    237c:	89 27       	eor	r24, r25
    237e:	8c 93       	st	X, r24
    2380:	0f 90       	pop	r0
    2382:	0f 90       	pop	r0
    2384:	cf 91       	pop	r28
    2386:	df 91       	pop	r29
    2388:	08 95       	ret

0000238a <blink_2>:
void blink_2(void * t) {PORTB ^= 0x08;}
    238a:	df 93       	push	r29
    238c:	cf 93       	push	r28
    238e:	00 d0       	rcall	.+0      	; 0x2390 <blink_2+0x6>
    2390:	cd b7       	in	r28, 0x3d	; 61
    2392:	de b7       	in	r29, 0x3e	; 62
    2394:	9a 83       	std	Y+2, r25	; 0x02
    2396:	89 83       	std	Y+1, r24	; 0x01
    2398:	a5 e2       	ldi	r26, 0x25	; 37
    239a:	b0 e0       	ldi	r27, 0x00	; 0
    239c:	e5 e2       	ldi	r30, 0x25	; 37
    239e:	f0 e0       	ldi	r31, 0x00	; 0
    23a0:	90 81       	ld	r25, Z
    23a2:	88 e0       	ldi	r24, 0x08	; 8
    23a4:	89 27       	eor	r24, r25
    23a6:	8c 93       	st	X, r24
    23a8:	0f 90       	pop	r0
    23aa:	0f 90       	pop	r0
    23ac:	cf 91       	pop	r28
    23ae:	df 91       	pop	r29
    23b0:	08 95       	ret

000023b2 <blink_3>:
void blink_3(void * t) {PORTB ^= 0x04;}
    23b2:	df 93       	push	r29
    23b4:	cf 93       	push	r28
    23b6:	00 d0       	rcall	.+0      	; 0x23b8 <blink_3+0x6>
    23b8:	cd b7       	in	r28, 0x3d	; 61
    23ba:	de b7       	in	r29, 0x3e	; 62
    23bc:	9a 83       	std	Y+2, r25	; 0x02
    23be:	89 83       	std	Y+1, r24	; 0x01
    23c0:	a5 e2       	ldi	r26, 0x25	; 37
    23c2:	b0 e0       	ldi	r27, 0x00	; 0
    23c4:	e5 e2       	ldi	r30, 0x25	; 37
    23c6:	f0 e0       	ldi	r31, 0x00	; 0
    23c8:	90 81       	ld	r25, Z
    23ca:	84 e0       	ldi	r24, 0x04	; 4
    23cc:	89 27       	eor	r24, r25
    23ce:	8c 93       	st	X, r24
    23d0:	0f 90       	pop	r0
    23d2:	0f 90       	pop	r0
    23d4:	cf 91       	pop	r28
    23d6:	df 91       	pop	r29
    23d8:	08 95       	ret

000023da <blink_4>:
void blink_4(void * t) {PORTB ^= 0x02;}
    23da:	df 93       	push	r29
    23dc:	cf 93       	push	r28
    23de:	00 d0       	rcall	.+0      	; 0x23e0 <blink_4+0x6>
    23e0:	cd b7       	in	r28, 0x3d	; 61
    23e2:	de b7       	in	r29, 0x3e	; 62
    23e4:	9a 83       	std	Y+2, r25	; 0x02
    23e6:	89 83       	std	Y+1, r24	; 0x01
    23e8:	a5 e2       	ldi	r26, 0x25	; 37
    23ea:	b0 e0       	ldi	r27, 0x00	; 0
    23ec:	e5 e2       	ldi	r30, 0x25	; 37
    23ee:	f0 e0       	ldi	r31, 0x00	; 0
    23f0:	90 81       	ld	r25, Z
    23f2:	82 e0       	ldi	r24, 0x02	; 2
    23f4:	89 27       	eor	r24, r25
    23f6:	8c 93       	st	X, r24
    23f8:	0f 90       	pop	r0
    23fa:	0f 90       	pop	r0
    23fc:	cf 91       	pop	r28
    23fe:	df 91       	pop	r29
    2400:	08 95       	ret

00002402 <blink_12>:
void blink_7(void * t) {PORTC ^= 0x10;}
void blink_8(void * t) {PORTC ^= 0x08;}
void blink_9(void * t) {PORTC ^= 0x04;}
void blink_10(void * t) {PORTC ^= 0x02;}
void blink_11(void * t) {PORTC ^= 0x01;}
void blink_12(void * t) {
    2402:	df 93       	push	r29
    2404:	cf 93       	push	r28
    2406:	00 d0       	rcall	.+0      	; 0x2408 <blink_12+0x6>
    2408:	cd b7       	in	r28, 0x3d	; 61
    240a:	de b7       	in	r29, 0x3e	; 62
    240c:	9a 83       	std	Y+2, r25	; 0x02
    240e:	89 83       	std	Y+1, r24	; 0x01
    PORTB ^= 0x20;
    2410:	a5 e2       	ldi	r26, 0x25	; 37
    2412:	b0 e0       	ldi	r27, 0x00	; 0
    2414:	e5 e2       	ldi	r30, 0x25	; 37
    2416:	f0 e0       	ldi	r31, 0x00	; 0
    2418:	90 81       	ld	r25, Z
    241a:	80 e2       	ldi	r24, 0x20	; 32
    241c:	89 27       	eor	r24, r25
    241e:	8c 93       	st	X, r24
    blink_G3();
    2420:	ab e2       	ldi	r26, 0x2B	; 43
    2422:	b0 e0       	ldi	r27, 0x00	; 0
    2424:	eb e2       	ldi	r30, 0x2B	; 43
    2426:	f0 e0       	ldi	r31, 0x00	; 0
    2428:	90 81       	ld	r25, Z
    242a:	80 e4       	ldi	r24, 0x40	; 64
    242c:	89 27       	eor	r24, r25
    242e:	8c 93       	st	X, r24
    blink_R3();
    2430:	ab e2       	ldi	r26, 0x2B	; 43
    2432:	b0 e0       	ldi	r27, 0x00	; 0
    2434:	eb e2       	ldi	r30, 0x2B	; 43
    2436:	f0 e0       	ldi	r31, 0x00	; 0
    2438:	90 81       	ld	r25, Z
    243a:	80 e2       	ldi	r24, 0x20	; 32
    243c:	89 27       	eor	r24, r25
    243e:	8c 93       	st	X, r24
    }
    2440:	0f 90       	pop	r0
    2442:	0f 90       	pop	r0
    2444:	cf 91       	pop	r28
    2446:	df 91       	pop	r29
    2448:	08 95       	ret

0000244a <main0>:
///----------------------------------------------------------------------------------------

proc_t proc[4];
stack_t stack[4][128];
void main0(void * t)
{
    244a:	df 93       	push	r29
    244c:	cf 93       	push	r28
    244e:	00 d0       	rcall	.+0      	; 0x2450 <main0+0x6>
    2450:	cd b7       	in	r28, 0x3d	; 61
    2452:	de b7       	in	r29, 0x3e	; 62
    2454:	9a 83       	std	Y+2, r25	; 0x02
    2456:	89 83       	std	Y+1, r24	; 0x01
    while(1)
    {
        wait_time(50);
    2458:	82 e3       	ldi	r24, 0x32	; 50
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	0e 94 cc 10 	call	0x2198	; 0x2198 <wait_time>
    2460:	fb cf       	rjmp	.-10     	; 0x2458 <main0+0xe>

00002462 <main1>:
    }
}

void main1(void * t)
{
    2462:	df 93       	push	r29
    2464:	cf 93       	push	r28
    2466:	00 d0       	rcall	.+0      	; 0x2468 <main1+0x6>
    2468:	cd b7       	in	r28, 0x3d	; 61
    246a:	de b7       	in	r29, 0x3e	; 62
    246c:	9a 83       	std	Y+2, r25	; 0x02
    246e:	89 83       	std	Y+1, r24	; 0x01
    while(1)
    {
        wait_time(50);
    2470:	82 e3       	ldi	r24, 0x32	; 50
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	0e 94 cc 10 	call	0x2198	; 0x2198 <wait_time>
    2478:	fb cf       	rjmp	.-10     	; 0x2470 <main1+0xe>

0000247a <main2>:
    }
}

void main2(void * t)
{
    247a:	df 93       	push	r29
    247c:	cf 93       	push	r28
    247e:	00 d0       	rcall	.+0      	; 0x2480 <main2+0x6>
    2480:	cd b7       	in	r28, 0x3d	; 61
    2482:	de b7       	in	r29, 0x3e	; 62
    2484:	9a 83       	std	Y+2, r25	; 0x02
    2486:	89 83       	std	Y+1, r24	; 0x01
    while(1)
    {
        wait_time(1);
    2488:	81 e0       	ldi	r24, 0x01	; 1
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	0e 94 cc 10 	call	0x2198	; 0x2198 <wait_time>
        proc_reset_watchdog();
    2490:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <proc_reset_watchdog>
        proc_self_stop();
    2494:	0e 94 81 03 	call	0x702	; 0x702 <proc_self_stop>
    2498:	f7 cf       	rjmp	.-18     	; 0x2488 <main2+0xe>

0000249a <main3>:
    249a:	df 93       	push	r29
    249c:	cf 93       	push	r28
    249e:	00 d0       	rcall	.+0      	; 0x24a0 <main3+0x6>
    24a0:	cd b7       	in	r28, 0x3d	; 61
    24a2:	de b7       	in	r29, 0x3e	; 62
    24a4:	9a 83       	std	Y+2, r25	; 0x02
    24a6:	89 83       	std	Y+1, r24	; 0x01
    24a8:	84 ef       	ldi	r24, 0xF4	; 244
    24aa:	91 e0       	ldi	r25, 0x01	; 1
    24ac:	0e 94 cc 10 	call	0x2198	; 0x2198 <wait_time>
    24b0:	0f 90       	pop	r0
    24b2:	0f 90       	pop	r0
    24b4:	cf 91       	pop	r28
    24b6:	df 91       	pop	r29
    24b8:	08 95       	ret

000024ba <idle_main>:
void main3(void * t)
{
    wait_time(500);
}
void idle_main(void * t)
{
    24ba:	8f 92       	push	r8
    24bc:	af 92       	push	r10
    24be:	bf 92       	push	r11
    24c0:	cf 92       	push	r12
    24c2:	ef 92       	push	r14
    24c4:	ff 92       	push	r15
    24c6:	0f 93       	push	r16
    24c8:	1f 93       	push	r17
    24ca:	df 93       	push	r29
    24cc:	cf 93       	push	r28
    24ce:	00 d0       	rcall	.+0      	; 0x24d0 <idle_main+0x16>
    24d0:	cd b7       	in	r28, 0x3d	; 61
    24d2:	de b7       	in	r29, 0x3e	; 62
    24d4:	9a 83       	std	Y+2, r25	; 0x02
    24d6:	89 83       	std	Y+1, r24	; 0x01
    // Insert code
    proc_init(&proc[3], main3, blink_4, blink_4, 0, &stack[3][127], 3, 4, 0);
    24d8:	8c e2       	ldi	r24, 0x2C	; 44
    24da:	92 e0       	ldi	r25, 0x02	; 2
    24dc:	dc 01       	movw	r26, r24
    24de:	a1 50       	subi	r26, 0x01	; 1
    24e0:	be 4f       	sbci	r27, 0xFE	; 254
    24e2:	8e ef       	ldi	r24, 0xFE	; 254
    24e4:	91 e0       	ldi	r25, 0x01	; 1
    24e6:	2d e4       	ldi	r18, 0x4D	; 77
    24e8:	32 e1       	ldi	r19, 0x12	; 18
    24ea:	4d ee       	ldi	r20, 0xED	; 237
    24ec:	51 e1       	ldi	r21, 0x11	; 17
    24ee:	ed ee       	ldi	r30, 0xED	; 237
    24f0:	f1 e1       	ldi	r31, 0x11	; 17
    24f2:	b9 01       	movw	r22, r18
    24f4:	9f 01       	movw	r18, r30
    24f6:	00 e0       	ldi	r16, 0x00	; 0
    24f8:	10 e0       	ldi	r17, 0x00	; 0
    24fa:	7d 01       	movw	r14, r26
    24fc:	0f 2e       	mov	r0, r31
    24fe:	f3 e0       	ldi	r31, 0x03	; 3
    2500:	cf 2e       	mov	r12, r31
    2502:	f0 2d       	mov	r31, r0
    2504:	aa 24       	eor	r10, r10
    2506:	bb 24       	eor	r11, r11
    2508:	68 94       	set
    250a:	a2 f8       	bld	r10, 2
    250c:	88 24       	eor	r8, r8
    250e:	0e 94 73 02 	call	0x4e6	; 0x4e6 <proc_init>
    proc_run( &proc[3] );
    2512:	8e ef       	ldi	r24, 0xFE	; 254
    2514:	91 e0       	ldi	r25, 0x01	; 1
    2516:	0e 94 f7 02 	call	0x5ee	; 0x5ee <proc_run>
    wait_time(1000);
    251a:	88 ee       	ldi	r24, 0xE8	; 232
    251c:	93 e0       	ldi	r25, 0x03	; 3
    251e:	0e 94 cc 10 	call	0x2198	; 0x2198 <wait_time>
    proc_run( &proc[3] );
    2522:	8e ef       	ldi	r24, 0xFE	; 254
    2524:	91 e0       	ldi	r25, 0x01	; 1
    2526:	0e 94 f7 02 	call	0x5ee	; 0x5ee <proc_run>
    wait_time(1000);
    252a:	88 ee       	ldi	r24, 0xE8	; 232
    252c:	93 e0       	ldi	r25, 0x03	; 3
    252e:	0e 94 cc 10 	call	0x2198	; 0x2198 <wait_time>
    proc_restart( &proc[3] );
    2532:	8e ef       	ldi	r24, 0xFE	; 254
    2534:	91 e0       	ldi	r25, 0x01	; 1
    2536:	0e 94 30 03 	call	0x660	; 0x660 <proc_restart>
    wait_time(500);
    253a:	84 ef       	ldi	r24, 0xF4	; 244
    253c:	91 e0       	ldi	r25, 0x01	; 1
    253e:	0e 94 cc 10 	call	0x2198	; 0x2198 <wait_time>
    proc_run( &proc[3] );
    2542:	8e ef       	ldi	r24, 0xFE	; 254
    2544:	91 e0       	ldi	r25, 0x01	; 1
    2546:	0e 94 f7 02 	call	0x5ee	; 0x5ee <proc_run>
    while(1)
    {
         wait_time(1000);
    254a:	88 ee       	ldi	r24, 0xE8	; 232
    254c:	93 e0       	ldi	r25, 0x03	; 3
    254e:	0e 94 cc 10 	call	0x2198	; 0x2198 <wait_time>
         proc_run(&proc[2]);
    2552:	80 ed       	ldi	r24, 0xD0	; 208
    2554:	91 e0       	ldi	r25, 0x01	; 1
    2556:	0e 94 f7 02 	call	0x5ee	; 0x5ee <proc_run>
    255a:	f7 cf       	rjmp	.-18     	; 0x254a <idle_main+0x90>

0000255c <main>:
    }
}
int main(void)
{
    255c:	8f 92       	push	r8
    255e:	af 92       	push	r10
    2560:	bf 92       	push	r11
    2562:	cf 92       	push	r12
    2564:	ef 92       	push	r14
    2566:	ff 92       	push	r15
    2568:	0f 93       	push	r16
    256a:	1f 93       	push	r17
    256c:	df 93       	push	r29
    256e:	cf 93       	push	r28
    2570:	cd b7       	in	r28, 0x3d	; 61
    2572:	de b7       	in	r29, 0x3e	; 62
    init_bugurt();
    2574:	0e 94 2d 01 	call	0x25a	; 0x25a <init_bugurt>

    TCCR2A = 0x02;//
    2578:	e0 eb       	ldi	r30, 0xB0	; 176
    257a:	f0 e0       	ldi	r31, 0x00	; 0
    257c:	82 e0       	ldi	r24, 0x02	; 2
    257e:	80 83       	st	Z, r24
    TCCR2B = 0x05;// prescaler=128
    2580:	e1 eb       	ldi	r30, 0xB1	; 177
    2582:	f0 e0       	ldi	r31, 0x00	; 0
    2584:	85 e0       	ldi	r24, 0x05	; 5
    2586:	80 83       	st	Z, r24
    OCR2A  = 124;
    2588:	e3 eb       	ldi	r30, 0xB3	; 179
    258a:	f0 e0       	ldi	r31, 0x00	; 0
    258c:	8c e7       	ldi	r24, 0x7C	; 124
    258e:	80 83       	st	Z, r24
    OCR2B  = 0x00;
    2590:	e4 eb       	ldi	r30, 0xB4	; 180
    2592:	f0 e0       	ldi	r31, 0x00	; 0
    2594:	10 82       	st	Z, r1
    TIMSK2 = 0x00; // shceduler not started
    2596:	e0 e7       	ldi	r30, 0x70	; 112
    2598:	f0 e0       	ldi	r31, 0x00	; 0
    259a:	10 82       	st	Z, r1
    TIFR2  = 0x00;
    259c:	e7 e3       	ldi	r30, 0x37	; 55
    259e:	f0 e0       	ldi	r31, 0x00	; 0
    25a0:	10 82       	st	Z, r1

    EICRA = 0x08; //falling edge
    25a2:	e9 e6       	ldi	r30, 0x69	; 105
    25a4:	f0 e0       	ldi	r31, 0x00	; 0
    25a6:	88 e0       	ldi	r24, 0x08	; 8
    25a8:	80 83       	st	Z, r24
    EIMSK = 0x02; //resched generates int1, mask 0x02
    25aa:	ed e3       	ldi	r30, 0x3D	; 61
    25ac:	f0 e0       	ldi	r31, 0x00	; 0
    25ae:	82 e0       	ldi	r24, 0x02	; 2
    25b0:	80 83       	st	Z, r24
    EIFR  |= 0x02;
    25b2:	ac e3       	ldi	r26, 0x3C	; 60
    25b4:	b0 e0       	ldi	r27, 0x00	; 0
    25b6:	ec e3       	ldi	r30, 0x3C	; 60
    25b8:	f0 e0       	ldi	r31, 0x00	; 0
    25ba:	80 81       	ld	r24, Z
    25bc:	82 60       	ori	r24, 0x02	; 2
    25be:	8c 93       	st	X, r24

    DDRB = 0x3F;
    25c0:	e4 e2       	ldi	r30, 0x24	; 36
    25c2:	f0 e0       	ldi	r31, 0x00	; 0
    25c4:	8f e3       	ldi	r24, 0x3F	; 63
    25c6:	80 83       	st	Z, r24
    PORTB = 0x00;
    25c8:	e5 e2       	ldi	r30, 0x25	; 37
    25ca:	f0 e0       	ldi	r31, 0x00	; 0
    25cc:	10 82       	st	Z, r1
    DDRC = 0x3F;
    25ce:	e7 e2       	ldi	r30, 0x27	; 39
    25d0:	f0 e0       	ldi	r31, 0x00	; 0
    25d2:	8f e3       	ldi	r24, 0x3F	; 63
    25d4:	80 83       	st	Z, r24
    PORTC = 0x00;
    25d6:	e8 e2       	ldi	r30, 0x28	; 40
    25d8:	f0 e0       	ldi	r31, 0x00	; 0
    25da:	10 82       	st	Z, r1
    DDRD = 0xFE;
    25dc:	ea e2       	ldi	r30, 0x2A	; 42
    25de:	f0 e0       	ldi	r31, 0x00	; 0
    25e0:	8e ef       	ldi	r24, 0xFE	; 254
    25e2:	80 83       	st	Z, r24
    PORTD = 0x00;
    25e4:	eb e2       	ldi	r30, 0x2B	; 43
    25e6:	f0 e0       	ldi	r31, 0x00	; 0
    25e8:	10 82       	st	Z, r1

    G1_on();
    25ea:	ab e2       	ldi	r26, 0x2B	; 43
    25ec:	b0 e0       	ldi	r27, 0x00	; 0
    25ee:	eb e2       	ldi	r30, 0x2B	; 43
    25f0:	f0 e0       	ldi	r31, 0x00	; 0
    25f2:	80 81       	ld	r24, Z
    25f4:	80 61       	ori	r24, 0x10	; 16
    25f6:	8c 93       	st	X, r24
    G2_on();
    25f8:	ab e2       	ldi	r26, 0x2B	; 43
    25fa:	b0 e0       	ldi	r27, 0x00	; 0
    25fc:	eb e2       	ldi	r30, 0x2B	; 43
    25fe:	f0 e0       	ldi	r31, 0x00	; 0
    2600:	80 81       	ld	r24, Z
    2602:	88 60       	ori	r24, 0x08	; 8
    2604:	8c 93       	st	X, r24
    R3_on();
    2606:	ab e2       	ldi	r26, 0x2B	; 43
    2608:	b0 e0       	ldi	r27, 0x00	; 0
    260a:	eb e2       	ldi	r30, 0x2B	; 43
    260c:	f0 e0       	ldi	r31, 0x00	; 0
    260e:	80 81       	ld	r24, Z
    2610:	80 62       	ori	r24, 0x20	; 32
    2612:	8c 93       	st	X, r24

    proc_init_isr(&proc[0], main0, blink_1, blink_1, 0, &stack[0][127], 1, 2, 0);
    2614:	8c e2       	ldi	r24, 0x2C	; 44
    2616:	92 e0       	ldi	r25, 0x02	; 2
    2618:	dc 01       	movw	r26, r24
    261a:	a1 58       	subi	r26, 0x81	; 129
    261c:	bf 4f       	sbci	r27, 0xFF	; 255
    261e:	84 e7       	ldi	r24, 0x74	; 116
    2620:	91 e0       	ldi	r25, 0x01	; 1
    2622:	25 e2       	ldi	r18, 0x25	; 37
    2624:	32 e1       	ldi	r19, 0x12	; 18
    2626:	41 eb       	ldi	r20, 0xB1	; 177
    2628:	51 e1       	ldi	r21, 0x11	; 17
    262a:	e1 eb       	ldi	r30, 0xB1	; 177
    262c:	f1 e1       	ldi	r31, 0x11	; 17
    262e:	b9 01       	movw	r22, r18
    2630:	9f 01       	movw	r18, r30
    2632:	00 e0       	ldi	r16, 0x00	; 0
    2634:	10 e0       	ldi	r17, 0x00	; 0
    2636:	7d 01       	movw	r14, r26
    2638:	cc 24       	eor	r12, r12
    263a:	c3 94       	inc	r12
    263c:	aa 24       	eor	r10, r10
    263e:	bb 24       	eor	r11, r11
    2640:	68 94       	set
    2642:	a1 f8       	bld	r10, 1
    2644:	88 24       	eor	r8, r8
    2646:	0e 94 b6 0b 	call	0x176c	; 0x176c <proc_init_isr>
    proc_init_isr(&proc[1], main1, blink_2, blink_2, 0, &stack[1][127], 2, 3, 0);
    264a:	8c e2       	ldi	r24, 0x2C	; 44
    264c:	92 e0       	ldi	r25, 0x02	; 2
    264e:	dc 01       	movw	r26, r24
    2650:	a1 50       	subi	r26, 0x01	; 1
    2652:	bf 4f       	sbci	r27, 0xFF	; 255
    2654:	82 ea       	ldi	r24, 0xA2	; 162
    2656:	91 e0       	ldi	r25, 0x01	; 1
    2658:	21 e3       	ldi	r18, 0x31	; 49
    265a:	32 e1       	ldi	r19, 0x12	; 18
    265c:	45 ec       	ldi	r20, 0xC5	; 197
    265e:	51 e1       	ldi	r21, 0x11	; 17
    2660:	e5 ec       	ldi	r30, 0xC5	; 197
    2662:	f1 e1       	ldi	r31, 0x11	; 17
    2664:	b9 01       	movw	r22, r18
    2666:	9f 01       	movw	r18, r30
    2668:	00 e0       	ldi	r16, 0x00	; 0
    266a:	10 e0       	ldi	r17, 0x00	; 0
    266c:	7d 01       	movw	r14, r26
    266e:	cc 24       	eor	r12, r12
    2670:	68 94       	set
    2672:	c1 f8       	bld	r12, 1
    2674:	0f 2e       	mov	r0, r31
    2676:	f3 e0       	ldi	r31, 0x03	; 3
    2678:	af 2e       	mov	r10, r31
    267a:	bb 24       	eor	r11, r11
    267c:	f0 2d       	mov	r31, r0
    267e:	88 24       	eor	r8, r8
    2680:	0e 94 b6 0b 	call	0x176c	; 0x176c <proc_init_isr>
    proc_init_isr(&proc[2], main2, blink_3, blink_3, 0, &stack[2][127], 2, 4, 1);// Типа реального времени
    2684:	8c e2       	ldi	r24, 0x2C	; 44
    2686:	92 e0       	ldi	r25, 0x02	; 2
    2688:	dc 01       	movw	r26, r24
    268a:	a1 58       	subi	r26, 0x81	; 129
    268c:	be 4f       	sbci	r27, 0xFE	; 254
    268e:	80 ed       	ldi	r24, 0xD0	; 208
    2690:	91 e0       	ldi	r25, 0x01	; 1
    2692:	2d e3       	ldi	r18, 0x3D	; 61
    2694:	32 e1       	ldi	r19, 0x12	; 18
    2696:	49 ed       	ldi	r20, 0xD9	; 217
    2698:	51 e1       	ldi	r21, 0x11	; 17
    269a:	e9 ed       	ldi	r30, 0xD9	; 217
    269c:	f1 e1       	ldi	r31, 0x11	; 17
    269e:	b9 01       	movw	r22, r18
    26a0:	9f 01       	movw	r18, r30
    26a2:	00 e0       	ldi	r16, 0x00	; 0
    26a4:	10 e0       	ldi	r17, 0x00	; 0
    26a6:	7d 01       	movw	r14, r26
    26a8:	cc 24       	eor	r12, r12
    26aa:	68 94       	set
    26ac:	c1 f8       	bld	r12, 1
    26ae:	aa 24       	eor	r10, r10
    26b0:	bb 24       	eor	r11, r11
    26b2:	68 94       	set
    26b4:	a2 f8       	bld	r10, 2
    26b6:	88 24       	eor	r8, r8
    26b8:	83 94       	inc	r8
    26ba:	0e 94 b6 0b 	call	0x176c	; 0x176c <proc_init_isr>
    //proc_init_isr(&proc[3], main3, blink_4, blink_4, 0, &stack[3][127], 3, 4, 0);

    kernel.idle.rs_hook = blink_12;
    26be:	81 e0       	ldi	r24, 0x01	; 1
    26c0:	92 e1       	ldi	r25, 0x12	; 18
    26c2:	90 93 69 01 	sts	0x0169, r25
    26c6:	80 93 68 01 	sts	0x0168, r24
    kernel.idle.sv_hook = blink_12;
    26ca:	81 e0       	ldi	r24, 0x01	; 1
    26cc:	92 e1       	ldi	r25, 0x12	; 18
    26ce:	90 93 67 01 	sts	0x0167, r25
    26d2:	80 93 66 01 	sts	0x0166, r24

    proc_run_isr(&proc[0]);
    26d6:	84 e7       	ldi	r24, 0x74	; 116
    26d8:	91 e0       	ldi	r25, 0x01	; 1
    26da:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <proc_run_isr>
    proc_run_isr(&proc[1]);
    26de:	82 ea       	ldi	r24, 0xA2	; 162
    26e0:	91 e0       	ldi	r25, 0x01	; 1
    26e2:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <proc_run_isr>
    proc_run_isr(&proc[2]);
    26e6:	80 ed       	ldi	r24, 0xD0	; 208
    26e8:	91 e0       	ldi	r25, 0x01	; 1
    26ea:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <proc_run_isr>
    //proc_run_isr(&proc[3]);

    start_bugurt();
    26ee:	0e 94 3d 01 	call	0x27a	; 0x27a <start_bugurt>
    return 0;
    26f2:	80 e0       	ldi	r24, 0x00	; 0
    26f4:	90 e0       	ldi	r25, 0x00	; 0
}
    26f6:	cf 91       	pop	r28
    26f8:	df 91       	pop	r29
    26fa:	1f 91       	pop	r17
    26fc:	0f 91       	pop	r16
    26fe:	ff 90       	pop	r15
    2700:	ef 90       	pop	r14
    2702:	cf 90       	pop	r12
    2704:	bf 90       	pop	r11
    2706:	af 90       	pop	r10
    2708:	8f 90       	pop	r8
    270a:	08 95       	ret

0000270c <_exit>:
    270c:	f8 94       	cli

0000270e <__stop_program>:
    270e:	ff cf       	rjmp	.-2      	; 0x270e <__stop_program>
