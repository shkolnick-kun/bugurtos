
bin/Debug/arduino328-test-1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00002684  00002718  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002684  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003b0  00800102  00800102  0000271a  2**0
                  ALLOC
  3 .stab         00007140  00000000  00000000  0000271c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003642  00000000  00000000  0000985c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       8:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__vector_2>
       c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 2a 01 	jmp	0x254	; 0x254 <__vector_7>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      54:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

00000068 <syscall_routine>:
      68:	43 02 8c 02 c4 02 fb 02 15 03 3a 03 9d 03 ae 03     C.........:.....
      78:	be 03 ce 03 de 03 ee 03 05 04 1f 04 2f 04 45 04     ............/.E.
      88:	5f 04 79 04                                         _.y.

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e4 e8       	ldi	r30, 0x84	; 132
      a0:	f6 e2       	ldi	r31, 0x26	; 38
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <.do_copy_data_start>

000000a4 <.do_copy_data_loop>:
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0

000000a8 <.do_copy_data_start>:
      a8:	a2 30       	cpi	r26, 0x02	; 2
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <.do_copy_data_loop>

000000ae <__do_clear_bss>:
      ae:	14 e0       	ldi	r17, 0x04	; 4
      b0:	a2 e0       	ldi	r26, 0x02	; 2
      b2:	b1 e0       	ldi	r27, 0x01	; 1
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	a2 3b       	cpi	r26, 0xB2	; 178
      ba:	b1 07       	cpc	r27, r17
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 4f 12 	call	0x249e	; 0x249e <main>
      c2:	0c 94 40 13 	jmp	0x2680	; 0x2680 <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <osbme_store_context>:
      ca:	2f 92       	push	r2
      cc:	2f b6       	in	r2, 0x3f	; 63
      ce:	2f 92       	push	r2
      d0:	3f 92       	push	r3
      d2:	4f 92       	push	r4
      d4:	5f 92       	push	r5
      d6:	6f 92       	push	r6
      d8:	7f 92       	push	r7
      da:	8f 92       	push	r8
      dc:	9f 92       	push	r9
      de:	af 92       	push	r10
      e0:	bf 92       	push	r11
      e2:	cf 92       	push	r12
      e4:	df 92       	push	r13
      e6:	ef 92       	push	r14
      e8:	ff 92       	push	r15
      ea:	0f 93       	push	r16
      ec:	1f 93       	push	r17
      ee:	2f 93       	push	r18
      f0:	3f 93       	push	r19
      f2:	4f 93       	push	r20
      f4:	5f 93       	push	r21
      f6:	6f 93       	push	r22
      f8:	7f 93       	push	r23
      fa:	8f 93       	push	r24
      fc:	9f 93       	push	r25
      fe:	af 93       	push	r26
     100:	bf 93       	push	r27
     102:	cf 93       	push	r28
     104:	df 93       	push	r29
     106:	ef 93       	push	r30
     108:	ff 93       	push	r31
     10a:	ed b7       	in	r30, 0x3d	; 61
     10c:	fe b7       	in	r31, 0x3e	; 62
     10e:	21 a1       	ldd	r18, Z+33	; 0x21
     110:	30 a1       	ldd	r19, Z+32	; 0x20
     112:	01 a2       	std	Z+33, r0	; 0x21
     114:	10 a2       	std	Z+32, r1	; 0x20
     116:	11 24       	eor	r1, r1
     118:	8d b7       	in	r24, 0x3d	; 61
     11a:	9e b7       	in	r25, 0x3e	; 62
     11c:	2f 93       	push	r18
     11e:	3f 93       	push	r19
     120:	08 95       	ret

00000122 <osbme_load_context>:
     122:	3f 91       	pop	r19
     124:	2f 91       	pop	r18
     126:	9e bf       	out	0x3e, r25	; 62
     128:	8d bf       	out	0x3d, r24	; 61
     12a:	fe b7       	in	r31, 0x3e	; 62
     12c:	ed b7       	in	r30, 0x3d	; 61
     12e:	10 a0       	ldd	r1, Z+32	; 0x20
     130:	01 a0       	ldd	r0, Z+33	; 0x21
     132:	30 a3       	std	Z+32, r19	; 0x20
     134:	21 a3       	std	Z+33, r18	; 0x21
     136:	ff 91       	pop	r31
     138:	ef 91       	pop	r30
     13a:	df 91       	pop	r29
     13c:	cf 91       	pop	r28
     13e:	bf 91       	pop	r27
     140:	af 91       	pop	r26
     142:	9f 91       	pop	r25
     144:	8f 91       	pop	r24
     146:	7f 91       	pop	r23
     148:	6f 91       	pop	r22
     14a:	5f 91       	pop	r21
     14c:	4f 91       	pop	r20
     14e:	3f 91       	pop	r19
     150:	2f 91       	pop	r18
     152:	1f 91       	pop	r17
     154:	0f 91       	pop	r16
     156:	ff 90       	pop	r15
     158:	ef 90       	pop	r14
     15a:	df 90       	pop	r13
     15c:	cf 90       	pop	r12
     15e:	bf 90       	pop	r11
     160:	af 90       	pop	r10
     162:	9f 90       	pop	r9
     164:	8f 90       	pop	r8
     166:	7f 90       	pop	r7
     168:	6f 90       	pop	r6
     16a:	5f 90       	pop	r5
     16c:	4f 90       	pop	r4
     16e:	3f 90       	pop	r3
     170:	2f 90       	pop	r2
     172:	2f be       	out	0x3f, r2	; 63
     174:	2f 90       	pop	r2
     176:	08 95       	ret

00000178 <disable_interrupts>:
//Внешние функции, специфичные для AVR
extern void start_scheduler( void );
extern void stop_scheduler( void );
// Просто функции, специфичные для AVR
void disable_interrupts(void)
{
     178:	df 93       	push	r29
     17a:	cf 93       	push	r28
     17c:	cd b7       	in	r28, 0x3d	; 61
     17e:	de b7       	in	r29, 0x3e	; 62
    cli();
     180:	f8 94       	cli
}
     182:	cf 91       	pop	r28
     184:	df 91       	pop	r29
     186:	08 95       	ret

00000188 <enable_interrupts>:
void enable_interrupts(void)
{
     188:	df 93       	push	r29
     18a:	cf 93       	push	r28
     18c:	cd b7       	in	r28, 0x3d	; 61
     18e:	de b7       	in	r29, 0x3e	; 62
    sei();
     190:	78 94       	sei
}
     192:	cf 91       	pop	r28
     194:	df 91       	pop	r29
     196:	08 95       	ret

00000198 <current_proc>:

proc_t * current_proc(void)
{
     198:	df 93       	push	r29
     19a:	cf 93       	push	r28
     19c:	cd b7       	in	r28, 0x3d	; 61
     19e:	de b7       	in	r29, 0x3e	; 62
    return kernel.sched.current_proc;
     1a0:	80 91 9e 01 	lds	r24, 0x019E
     1a4:	90 91 9f 01 	lds	r25, 0x019F
}
     1a8:	cf 91       	pop	r28
     1aa:	df 91       	pop	r29
     1ac:	08 95       	ret

000001ae <proc_stack_init>:

void * proc_stack_init(stack_t * sstart, code_t code, void * arg)
{
     1ae:	df 93       	push	r29
     1b0:	cf 93       	push	r28
     1b2:	00 d0       	rcall	.+0      	; 0x1b4 <proc_stack_init+0x6>
     1b4:	00 d0       	rcall	.+0      	; 0x1b6 <proc_stack_init+0x8>
     1b6:	00 d0       	rcall	.+0      	; 0x1b8 <proc_stack_init+0xa>
     1b8:	cd b7       	in	r28, 0x3d	; 61
     1ba:	de b7       	in	r29, 0x3e	; 62
     1bc:	9a 83       	std	Y+2, r25	; 0x02
     1be:	89 83       	std	Y+1, r24	; 0x01
     1c0:	7c 83       	std	Y+4, r23	; 0x04
     1c2:	6b 83       	std	Y+3, r22	; 0x03
     1c4:	5e 83       	std	Y+6, r21	; 0x06
     1c6:	4d 83       	std	Y+5, r20	; 0x05
    return osbme_init_stack( (void *)sstart, (osbme_code_t)proc_run_wrapper, (void *)arg );
     1c8:	42 e7       	ldi	r20, 0x72	; 114
     1ca:	53 e0       	ldi	r21, 0x03	; 3
     1cc:	89 81       	ldd	r24, Y+1	; 0x01
     1ce:	9a 81       	ldd	r25, Y+2	; 0x02
     1d0:	2d 81       	ldd	r18, Y+5	; 0x05
     1d2:	3e 81       	ldd	r19, Y+6	; 0x06
     1d4:	ba 01       	movw	r22, r20
     1d6:	a9 01       	movw	r20, r18
     1d8:	0e 94 89 04 	call	0x912	; 0x912 <osbme_init_stack>
}
     1dc:	26 96       	adiw	r28, 0x06	; 6
     1de:	0f b6       	in	r0, 0x3f	; 63
     1e0:	f8 94       	cli
     1e2:	de bf       	out	0x3e, r29	; 62
     1e4:	0f be       	out	0x3f, r0	; 63
     1e6:	cd bf       	out	0x3d, r28	; 61
     1e8:	cf 91       	pop	r28
     1ea:	df 91       	pop	r29
     1ec:	08 95       	ret

000001ee <resched>:
//Через этот указатель будет вызываться обработчик прерывания
void (*kernel_isr)(void);

// Функция перепланировки
void resched(void)
{
     1ee:	df 93       	push	r29
     1f0:	cf 93       	push	r28
     1f2:	cd b7       	in	r28, 0x3d	; 61
     1f4:	de b7       	in	r29, 0x3e	; 62
    resched_flag = (bool_t)1;
     1f6:	81 e0       	ldi	r24, 0x01	; 1
     1f8:	80 93 00 01 	sts	0x0100, r24
}
     1fc:	cf 91       	pop	r28
     1fe:	df 91       	pop	r29
     200:	08 95       	ret

00000202 <kernel_process_switch>:

__attribute__((naked)) void kernel_process_switch(void)
{
    //Сразу же после обработки отложенных прерываний передаем управление процессу
    kernel_sp = osbme_store_context();
     202:	0e 94 65 00 	call	0xca	; 0xca <osbme_store_context>
     206:	90 93 9d 01 	sts	0x019D, r25
     20a:	80 93 9c 01 	sts	0x019C, r24
    osbme_load_context( proc_sp );
     20e:	80 91 9a 01 	lds	r24, 0x019A
     212:	90 91 9b 01 	lds	r25, 0x019B
     216:	0e 94 91 00 	call	0x122	; 0x122 <osbme_load_context>
    __asm__ __volatile__("reti"::);/// Дада, именно reti, мы же типа прерывания счас обрабатывали
     21a:	18 95       	reti

0000021c <kernel_thread>:
    osbme_load_context( kernel_sp );
    __asm__ __volatile__("ret"::);
}
///================================================================
void kernel_thread(void)
{
     21c:	df 93       	push	r29
     21e:	cf 93       	push	r28
     220:	cd b7       	in	r28, 0x3d	; 61
     222:	de b7       	in	r29, 0x3e	; 62
    while(1)
    {
        // Если надо перепланировать - перепланируем
        if( resched_flag != (bool_t)0 )
     224:	80 91 00 01 	lds	r24, 0x0100
     228:	88 23       	and	r24, r24
     22a:	61 f0       	breq	.+24     	; 0x244 <kernel_thread+0x28>
        {
            resched_flag = (bool_t)0;
     22c:	10 92 00 01 	sts	0x0100, r1
            proc_sp = sched_reschedule( proc_sp );
     230:	80 91 9a 01 	lds	r24, 0x019A
     234:	90 91 9b 01 	lds	r25, 0x019B
     238:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <sched_reschedule>
     23c:	90 93 9b 01 	sts	0x019B, r25
     240:	80 93 9a 01 	sts	0x019A, r24
        }
        /// Прямая передача управления от ядра к процессу, прерывания запрещены
        kernel_process_switch();//В результате выполнения этого прерывания будут разрешены
     244:	0e 94 01 01 	call	0x202	; 0x202 <kernel_process_switch>
        /// Сюда можно попасть только из прерывания, либо из процесса, при этом прерывания опять таки запрещены
        // Обработка прерывания
        kernel_isr();
     248:	e0 91 98 01 	lds	r30, 0x0198
     24c:	f0 91 99 01 	lds	r31, 0x0199
     250:	09 95       	icall
     252:	e8 cf       	rjmp	.-48     	; 0x224 <kernel_thread+0x8>

00000254 <__vector_7>:
    }
}

// А вот и первое определение обработчика прерывания
BUGURT_INTERRUPT(SYSTEM_TIMER_ISR)
     254:	0e 94 65 00 	call	0xca	; 0xca <osbme_store_context>
     258:	90 93 9b 01 	sts	0x019B, r25
     25c:	80 93 9a 01 	sts	0x019A, r24
     260:	8d e3       	ldi	r24, 0x3D	; 61
     262:	91 e0       	ldi	r25, 0x01	; 1
     264:	90 93 99 01 	sts	0x0199, r25
     268:	80 93 98 01 	sts	0x0198, r24
     26c:	80 91 9c 01 	lds	r24, 0x019C
     270:	90 91 9d 01 	lds	r25, 0x019D
     274:	0e 94 91 00 	call	0x122	; 0x122 <osbme_load_context>
     278:	08 95       	ret

0000027a <__vector_7_func>:
{
     27a:	df 93       	push	r29
     27c:	cf 93       	push	r28
     27e:	cd b7       	in	r28, 0x3d	; 61
     280:	de b7       	in	r29, 0x3e	; 62
    kernel.timer++;
     282:	80 91 f8 01 	lds	r24, 0x01F8
     286:	90 91 f9 01 	lds	r25, 0x01F9
     28a:	01 96       	adiw	r24, 0x01	; 1
     28c:	90 93 f9 01 	sts	0x01F9, r25
     290:	80 93 f8 01 	sts	0x01F8, r24
    proc_sp = sched_schedule( proc_sp );
     294:	80 91 9a 01 	lds	r24, 0x019A
     298:	90 91 9b 01 	lds	r25, 0x019B
     29c:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <sched_schedule>
     2a0:	90 93 9b 01 	sts	0x019B, r25
     2a4:	80 93 9a 01 	sts	0x019A, r24
}
     2a8:	cf 91       	pop	r28
     2aa:	df 91       	pop	r29
     2ac:	08 95       	ret

000002ae <init_bugurt>:

/***************************************************************************************************************/
// Функции общего пользования

void init_bugurt(void)
{
     2ae:	df 93       	push	r29
     2b0:	cf 93       	push	r28
     2b2:	cd b7       	in	r28, 0x3d	; 61
     2b4:	de b7       	in	r29, 0x3e	; 62
    cli();
     2b6:	f8 94       	cli
    kernel_init();
     2b8:	0e 94 8b 09 	call	0x1316	; 0x1316 <kernel_init>
    proc_sp = osbme_init_stack( &idle_stack[CONFIG_IDLE_STACK_SIZE-1], idle_main, 0);
     2bc:	87 e9       	ldi	r24, 0x97	; 151
     2be:	91 e0       	ldi	r25, 0x01	; 1
     2c0:	27 e2       	ldi	r18, 0x27	; 39
     2c2:	32 e1       	ldi	r19, 0x12	; 18
     2c4:	b9 01       	movw	r22, r18
     2c6:	40 e0       	ldi	r20, 0x00	; 0
     2c8:	50 e0       	ldi	r21, 0x00	; 0
     2ca:	0e 94 89 04 	call	0x912	; 0x912 <osbme_init_stack>
     2ce:	90 93 9b 01 	sts	0x019B, r25
     2d2:	80 93 9a 01 	sts	0x019A, r24
    kernel.idle.spointer = proc_sp;
     2d6:	80 91 9a 01 	lds	r24, 0x019A
     2da:	90 91 9b 01 	lds	r25, 0x019B
     2de:	90 93 f5 01 	sts	0x01F5, r25
     2e2:	80 93 f4 01 	sts	0x01F4, r24
    kernel.sched.nested_crit_sec = (count_t)1;
     2e6:	81 e0       	ldi	r24, 0x01	; 1
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	90 93 c7 01 	sts	0x01C7, r25
     2ee:	80 93 c6 01 	sts	0x01C6, r24
}
     2f2:	cf 91       	pop	r28
     2f4:	df 91       	pop	r29
     2f6:	08 95       	ret

000002f8 <start_bugurt>:
void start_bugurt(void)
{
     2f8:	df 93       	push	r29
     2fa:	cf 93       	push	r28
     2fc:	cd b7       	in	r28, 0x3d	; 61
     2fe:	de b7       	in	r29, 0x3e	; 62
    start_scheduler();
     300:	0e 94 5f 11 	call	0x22be	; 0x22be <start_scheduler>
    kernel.sched.nested_crit_sec = (count_t)0;
     304:	10 92 c7 01 	sts	0x01C7, r1
     308:	10 92 c6 01 	sts	0x01C6, r1
    kernel_thread();
     30c:	0e 94 0e 01 	call	0x21c	; 0x21c <kernel_thread>
}
     310:	cf 91       	pop	r28
     312:	df 91       	pop	r29
     314:	08 95       	ret

00000316 <do_syscall>:
    scall_mutex_try_lock,
    scall_mutex_unlock
};

void do_syscall(void)
{
     316:	df 93       	push	r29
     318:	cf 93       	push	r28
     31a:	00 d0       	rcall	.+0      	; 0x31c <do_syscall+0x6>
     31c:	00 d0       	rcall	.+0      	; 0x31e <do_syscall+0x8>
     31e:	00 d0       	rcall	.+0      	; 0x320 <do_syscall+0xa>
     320:	cd b7       	in	r28, 0x3d	; 61
     322:	de b7       	in	r29, 0x3e	; 62
    if( syscall_num != (unsigned char)0 )
     324:	80 91 02 01 	lds	r24, 0x0102
     328:	88 23       	and	r24, r24
     32a:	01 f1       	breq	.+64     	; 0x36c <do_syscall+0x56>
    {
        code_t syscall_func;
        syscall_func = (code_t)pgm_read_word(syscall_routine + syscall_num);
     32c:	80 91 02 01 	lds	r24, 0x0102
     330:	88 2f       	mov	r24, r24
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	88 0f       	add	r24, r24
     336:	99 1f       	adc	r25, r25
     338:	88 59       	subi	r24, 0x98	; 152
     33a:	9f 4f       	sbci	r25, 0xFF	; 255
     33c:	9c 83       	std	Y+4, r25	; 0x04
     33e:	8b 83       	std	Y+3, r24	; 0x03
     340:	8b 81       	ldd	r24, Y+3	; 0x03
     342:	9c 81       	ldd	r25, Y+4	; 0x04
     344:	fc 01       	movw	r30, r24
     346:	85 91       	lpm	r24, Z+
     348:	94 91       	lpm	r25, Z+
     34a:	9a 83       	std	Y+2, r25	; 0x02
     34c:	89 83       	std	Y+1, r24	; 0x01
     34e:	fc 83       	std	Y+4, r31	; 0x04
     350:	eb 83       	std	Y+3, r30	; 0x03
     352:	89 81       	ldd	r24, Y+1	; 0x01
     354:	9a 81       	ldd	r25, Y+2	; 0x02
     356:	9e 83       	std	Y+6, r25	; 0x06
     358:	8d 83       	std	Y+5, r24	; 0x05
        syscall_func(syscall_arg);
     35a:	80 91 03 01 	lds	r24, 0x0103
     35e:	90 91 04 01 	lds	r25, 0x0104
     362:	ed 81       	ldd	r30, Y+5	; 0x05
     364:	fe 81       	ldd	r31, Y+6	; 0x06
     366:	09 95       	icall
        syscall_num = (unsigned char)0;
     368:	10 92 02 01 	sts	0x0102, r1
    }
}
     36c:	26 96       	adiw	r28, 0x06	; 6
     36e:	0f b6       	in	r0, 0x3f	; 63
     370:	f8 94       	cli
     372:	de bf       	out	0x3e, r29	; 62
     374:	0f be       	out	0x3f, r0	; 63
     376:	cd bf       	out	0x3d, r28	; 61
     378:	cf 91       	pop	r28
     37a:	df 91       	pop	r29
     37c:	08 95       	ret

0000037e <__vector_2>:
{
    unsigned char num;
    void * arg;
} syscall_data_t;

BUGURT_INTERRUPT(SYSCALL_ISR)
     37e:	0e 94 65 00 	call	0xca	; 0xca <osbme_store_context>
     382:	90 93 9b 01 	sts	0x019B, r25
     386:	80 93 9a 01 	sts	0x019A, r24
     38a:	82 ed       	ldi	r24, 0xD2	; 210
     38c:	91 e0       	ldi	r25, 0x01	; 1
     38e:	90 93 99 01 	sts	0x0199, r25
     392:	80 93 98 01 	sts	0x0198, r24
     396:	80 91 9c 01 	lds	r24, 0x019C
     39a:	90 91 9d 01 	lds	r25, 0x019D
     39e:	0e 94 91 00 	call	0x122	; 0x122 <osbme_load_context>
     3a2:	08 95       	ret

000003a4 <__vector_2_func>:
{
     3a4:	df 93       	push	r29
     3a6:	cf 93       	push	r28
     3a8:	00 d0       	rcall	.+0      	; 0x3aa <__vector_2_func+0x6>
     3aa:	00 d0       	rcall	.+0      	; 0x3ac <__vector_2_func+0x8>
     3ac:	cd b7       	in	r28, 0x3d	; 61
     3ae:	de b7       	in	r29, 0x3e	; 62
    unsigned char * tos;
    unsigned short temp;
    /// Извлечение syscall_num и syscall_arg из стека процесса
    tos = (unsigned char *)proc_sp + PROC_STACK_OFFSET;
     3b0:	80 91 9a 01 	lds	r24, 0x019A
     3b4:	90 91 9b 01 	lds	r25, 0x019B
     3b8:	07 96       	adiw	r24, 0x07	; 7
     3ba:	9c 83       	std	Y+4, r25	; 0x04
     3bc:	8b 83       	std	Y+3, r24	; 0x03
    temp = (unsigned short)*tos++;
     3be:	eb 81       	ldd	r30, Y+3	; 0x03
     3c0:	fc 81       	ldd	r31, Y+4	; 0x04
     3c2:	80 81       	ld	r24, Z
     3c4:	88 2f       	mov	r24, r24
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	9a 83       	std	Y+2, r25	; 0x02
     3ca:	89 83       	std	Y+1, r24	; 0x01
     3cc:	8b 81       	ldd	r24, Y+3	; 0x03
     3ce:	9c 81       	ldd	r25, Y+4	; 0x04
     3d0:	01 96       	adiw	r24, 0x01	; 1
     3d2:	9c 83       	std	Y+4, r25	; 0x04
     3d4:	8b 83       	std	Y+3, r24	; 0x03
    temp <<= 8;
     3d6:	89 81       	ldd	r24, Y+1	; 0x01
     3d8:	9a 81       	ldd	r25, Y+2	; 0x02
     3da:	98 2f       	mov	r25, r24
     3dc:	88 27       	eor	r24, r24
     3de:	9a 83       	std	Y+2, r25	; 0x02
     3e0:	89 83       	std	Y+1, r24	; 0x01
    temp |= (unsigned short)*tos;
     3e2:	eb 81       	ldd	r30, Y+3	; 0x03
     3e4:	fc 81       	ldd	r31, Y+4	; 0x04
     3e6:	80 81       	ld	r24, Z
     3e8:	28 2f       	mov	r18, r24
     3ea:	30 e0       	ldi	r19, 0x00	; 0
     3ec:	89 81       	ldd	r24, Y+1	; 0x01
     3ee:	9a 81       	ldd	r25, Y+2	; 0x02
     3f0:	82 2b       	or	r24, r18
     3f2:	93 2b       	or	r25, r19
     3f4:	9a 83       	std	Y+2, r25	; 0x02
     3f6:	89 83       	std	Y+1, r24	; 0x01

    syscall_num = ((syscall_data_t *)temp)->num;
     3f8:	e9 81       	ldd	r30, Y+1	; 0x01
     3fa:	fa 81       	ldd	r31, Y+2	; 0x02
     3fc:	80 81       	ld	r24, Z
     3fe:	80 93 02 01 	sts	0x0102, r24
    syscall_arg = ((syscall_data_t *)temp)->arg;
     402:	e9 81       	ldd	r30, Y+1	; 0x01
     404:	fa 81       	ldd	r31, Y+2	; 0x02
     406:	81 81       	ldd	r24, Z+1	; 0x01
     408:	92 81       	ldd	r25, Z+2	; 0x02
     40a:	90 93 04 01 	sts	0x0104, r25
     40e:	80 93 03 01 	sts	0x0103, r24

    do_syscall();
     412:	0e 94 8b 01 	call	0x316	; 0x316 <do_syscall>
}
     416:	0f 90       	pop	r0
     418:	0f 90       	pop	r0
     41a:	0f 90       	pop	r0
     41c:	0f 90       	pop	r0
     41e:	cf 91       	pop	r28
     420:	df 91       	pop	r29
     422:	08 95       	ret

00000424 <_syscall>:

syscall_data_t * _syscall( syscall_data_t * arg )
{
     424:	df 93       	push	r29
     426:	cf 93       	push	r28
     428:	00 d0       	rcall	.+0      	; 0x42a <_syscall+0x6>
     42a:	cd b7       	in	r28, 0x3d	; 61
     42c:	de b7       	in	r29, 0x3e	; 62
     42e:	9a 83       	std	Y+2, r25	; 0x02
     430:	89 83       	std	Y+1, r24	; 0x01
    cli();
     432:	f8 94       	cli
    raise_syscall_interrupt();
     434:	0e 94 3c 11 	call	0x2278	; 0x2278 <raise_syscall_interrupt>
    sei();
     438:	78 94       	sei
    return arg;
     43a:	89 81       	ldd	r24, Y+1	; 0x01
     43c:	9a 81       	ldd	r25, Y+2	; 0x02
}
     43e:	0f 90       	pop	r0
     440:	0f 90       	pop	r0
     442:	cf 91       	pop	r28
     444:	df 91       	pop	r29
     446:	08 95       	ret

00000448 <syscall>:

static syscall_data_t scdata;
void syscall( unsigned char num, void * arg )
{
     448:	df 93       	push	r29
     44a:	cf 93       	push	r28
     44c:	00 d0       	rcall	.+0      	; 0x44e <syscall+0x6>
     44e:	0f 92       	push	r0
     450:	cd b7       	in	r28, 0x3d	; 61
     452:	de b7       	in	r29, 0x3e	; 62
     454:	89 83       	std	Y+1, r24	; 0x01
     456:	7b 83       	std	Y+3, r23	; 0x03
     458:	6a 83       	std	Y+2, r22	; 0x02
     scdata.num = num;
     45a:	89 81       	ldd	r24, Y+1	; 0x01
     45c:	80 93 15 01 	sts	0x0115, r24
     scdata.arg = arg;
     460:	8a 81       	ldd	r24, Y+2	; 0x02
     462:	9b 81       	ldd	r25, Y+3	; 0x03
     464:	90 93 17 01 	sts	0x0117, r25
     468:	80 93 16 01 	sts	0x0116, r24
     _syscall( &scdata );
     46c:	85 e1       	ldi	r24, 0x15	; 21
     46e:	91 e0       	ldi	r25, 0x01	; 1
     470:	0e 94 12 02 	call	0x424	; 0x424 <_syscall>
     SYSCALL_DELLAY();
     474:	00 00       	nop
     476:	00 00       	nop
     478:	00 00       	nop
}
     47a:	0f 90       	pop	r0
     47c:	0f 90       	pop	r0
     47e:	0f 90       	pop	r0
     480:	cf 91       	pop	r28
     482:	df 91       	pop	r29
     484:	08 95       	ret

00000486 <scall_proc_init>:
///                 ОБРАБОТЧИКИ СИСТЕМНЫХ ВЫЗОВОВ
///=================================================================
///                   Управление процессами
//0
void scall_proc_init( void * arg )
{
     486:	8f 92       	push	r8
     488:	af 92       	push	r10
     48a:	bf 92       	push	r11
     48c:	cf 92       	push	r12
     48e:	df 92       	push	r13
     490:	ef 92       	push	r14
     492:	ff 92       	push	r15
     494:	0f 93       	push	r16
     496:	1f 93       	push	r17
     498:	df 93       	push	r29
     49a:	cf 93       	push	r28
     49c:	00 d0       	rcall	.+0      	; 0x49e <scall_proc_init+0x18>
     49e:	cd b7       	in	r28, 0x3d	; 61
     4a0:	de b7       	in	r29, 0x3e	; 62
     4a2:	9a 83       	std	Y+2, r25	; 0x02
     4a4:	89 83       	std	Y+1, r24	; 0x01
    proc_init_isr(
     4a6:	e9 81       	ldd	r30, Y+1	; 0x01
     4a8:	fa 81       	ldd	r31, Y+2	; 0x02
     4aa:	80 81       	ld	r24, Z
     4ac:	91 81       	ldd	r25, Z+1	; 0x01
     4ae:	e9 81       	ldd	r30, Y+1	; 0x01
     4b0:	fa 81       	ldd	r31, Y+2	; 0x02
     4b2:	22 81       	ldd	r18, Z+2	; 0x02
     4b4:	33 81       	ldd	r19, Z+3	; 0x03
     4b6:	e9 81       	ldd	r30, Y+1	; 0x01
     4b8:	fa 81       	ldd	r31, Y+2	; 0x02
     4ba:	44 81       	ldd	r20, Z+4	; 0x04
     4bc:	55 81       	ldd	r21, Z+5	; 0x05
     4be:	e9 81       	ldd	r30, Y+1	; 0x01
     4c0:	fa 81       	ldd	r31, Y+2	; 0x02
     4c2:	06 81       	ldd	r16, Z+6	; 0x06
     4c4:	17 81       	ldd	r17, Z+7	; 0x07
     4c6:	e9 81       	ldd	r30, Y+1	; 0x01
     4c8:	fa 81       	ldd	r31, Y+2	; 0x02
     4ca:	e0 84       	ldd	r14, Z+8	; 0x08
     4cc:	f1 84       	ldd	r15, Z+9	; 0x09
     4ce:	e9 81       	ldd	r30, Y+1	; 0x01
     4d0:	fa 81       	ldd	r31, Y+2	; 0x02
     4d2:	c2 84       	ldd	r12, Z+10	; 0x0a
     4d4:	d3 84       	ldd	r13, Z+11	; 0x0b
     4d6:	e9 81       	ldd	r30, Y+1	; 0x01
     4d8:	fa 81       	ldd	r31, Y+2	; 0x02
     4da:	b4 84       	ldd	r11, Z+12	; 0x0c
     4dc:	e9 81       	ldd	r30, Y+1	; 0x01
     4de:	fa 81       	ldd	r31, Y+2	; 0x02
     4e0:	a5 85       	ldd	r26, Z+13	; 0x0d
     4e2:	b6 85       	ldd	r27, Z+14	; 0x0e
     4e4:	e9 81       	ldd	r30, Y+1	; 0x01
     4e6:	fa 81       	ldd	r31, Y+2	; 0x02
     4e8:	e7 85       	ldd	r30, Z+15	; 0x0f
     4ea:	b9 01       	movw	r22, r18
     4ec:	98 01       	movw	r18, r16
     4ee:	87 01       	movw	r16, r14
     4f0:	76 01       	movw	r14, r12
     4f2:	cb 2c       	mov	r12, r11
     4f4:	5d 01       	movw	r10, r26
     4f6:	8e 2e       	mov	r8, r30
     4f8:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <proc_init_isr>
              ((proc_init_arg_t *)arg)->sstart,
              ((proc_init_arg_t *)arg)->prio,
              ((proc_init_arg_t *)arg)->time_quant,
              ((proc_init_arg_t *)arg)->is_rt
              );
}
     4fc:	0f 90       	pop	r0
     4fe:	0f 90       	pop	r0
     500:	cf 91       	pop	r28
     502:	df 91       	pop	r29
     504:	1f 91       	pop	r17
     506:	0f 91       	pop	r16
     508:	ff 90       	pop	r15
     50a:	ef 90       	pop	r14
     50c:	df 90       	pop	r13
     50e:	cf 90       	pop	r12
     510:	bf 90       	pop	r11
     512:	af 90       	pop	r10
     514:	8f 90       	pop	r8
     516:	08 95       	ret

00000518 <scall_proc_run>:
    syscall(0,(void *)&scarg);
}
//---------------------------------------------------------------------------------------------
//1
void scall_proc_run( void * arg )
{
     518:	0f 93       	push	r16
     51a:	1f 93       	push	r17
     51c:	df 93       	push	r29
     51e:	cf 93       	push	r28
     520:	00 d0       	rcall	.+0      	; 0x522 <scall_proc_run+0xa>
     522:	cd b7       	in	r28, 0x3d	; 61
     524:	de b7       	in	r29, 0x3e	; 62
     526:	9a 83       	std	Y+2, r25	; 0x02
     528:	89 83       	std	Y+1, r24	; 0x01
    ((proc_runtime_arg_t *)arg)->scall_ret = proc_run_isr( ((proc_runtime_arg_t *)arg)->proc );
     52a:	09 81       	ldd	r16, Y+1	; 0x01
     52c:	1a 81       	ldd	r17, Y+2	; 0x02
     52e:	e9 81       	ldd	r30, Y+1	; 0x01
     530:	fa 81       	ldd	r31, Y+2	; 0x02
     532:	80 81       	ld	r24, Z
     534:	91 81       	ldd	r25, Z+1	; 0x01
     536:	0e 94 07 0c 	call	0x180e	; 0x180e <proc_run_isr>
     53a:	f8 01       	movw	r30, r16
     53c:	82 83       	std	Z+2, r24	; 0x02
}
     53e:	0f 90       	pop	r0
     540:	0f 90       	pop	r0
     542:	cf 91       	pop	r28
     544:	df 91       	pop	r29
     546:	1f 91       	pop	r17
     548:	0f 91       	pop	r16
     54a:	08 95       	ret

0000054c <proc_run>:
bool_t proc_run( proc_t * proc )
{
     54c:	df 93       	push	r29
     54e:	cf 93       	push	r28
     550:	00 d0       	rcall	.+0      	; 0x552 <proc_run+0x6>
     552:	00 d0       	rcall	.+0      	; 0x554 <proc_run+0x8>
     554:	0f 92       	push	r0
     556:	cd b7       	in	r28, 0x3d	; 61
     558:	de b7       	in	r29, 0x3e	; 62
     55a:	9d 83       	std	Y+5, r25	; 0x05
     55c:	8c 83       	std	Y+4, r24	; 0x04
    proc_runtime_arg_t scarg;
    scarg.proc = proc;
     55e:	8c 81       	ldd	r24, Y+4	; 0x04
     560:	9d 81       	ldd	r25, Y+5	; 0x05
     562:	9a 83       	std	Y+2, r25	; 0x02
     564:	89 83       	std	Y+1, r24	; 0x01
    scarg.scall_ret = (bool_t)0;
     566:	1b 82       	std	Y+3, r1	; 0x03

    syscall(1,(void *)&scarg);
     568:	81 e0       	ldi	r24, 0x01	; 1
     56a:	9e 01       	movw	r18, r28
     56c:	2f 5f       	subi	r18, 0xFF	; 255
     56e:	3f 4f       	sbci	r19, 0xFF	; 255
     570:	b9 01       	movw	r22, r18
     572:	0e 94 24 02 	call	0x448	; 0x448 <syscall>
    return scarg.scall_ret;
     576:	8b 81       	ldd	r24, Y+3	; 0x03
}
     578:	0f 90       	pop	r0
     57a:	0f 90       	pop	r0
     57c:	0f 90       	pop	r0
     57e:	0f 90       	pop	r0
     580:	0f 90       	pop	r0
     582:	cf 91       	pop	r28
     584:	df 91       	pop	r29
     586:	08 95       	ret

00000588 <scall_proc_restart>:
//---------------------------------------------------------------------------------------------
//2
void scall_proc_restart( void * arg )
{
     588:	0f 93       	push	r16
     58a:	1f 93       	push	r17
     58c:	df 93       	push	r29
     58e:	cf 93       	push	r28
     590:	00 d0       	rcall	.+0      	; 0x592 <scall_proc_restart+0xa>
     592:	cd b7       	in	r28, 0x3d	; 61
     594:	de b7       	in	r29, 0x3e	; 62
     596:	9a 83       	std	Y+2, r25	; 0x02
     598:	89 83       	std	Y+1, r24	; 0x01
    ((proc_runtime_arg_t *)arg)->scall_ret = proc_restart_isr( ((proc_runtime_arg_t *)arg)->proc );
     59a:	09 81       	ldd	r16, Y+1	; 0x01
     59c:	1a 81       	ldd	r17, Y+2	; 0x02
     59e:	e9 81       	ldd	r30, Y+1	; 0x01
     5a0:	fa 81       	ldd	r31, Y+2	; 0x02
     5a2:	80 81       	ld	r24, Z
     5a4:	91 81       	ldd	r25, Z+1	; 0x01
     5a6:	0e 94 27 0c 	call	0x184e	; 0x184e <proc_restart_isr>
     5aa:	f8 01       	movw	r30, r16
     5ac:	82 83       	std	Z+2, r24	; 0x02
}
     5ae:	0f 90       	pop	r0
     5b0:	0f 90       	pop	r0
     5b2:	cf 91       	pop	r28
     5b4:	df 91       	pop	r29
     5b6:	1f 91       	pop	r17
     5b8:	0f 91       	pop	r16
     5ba:	08 95       	ret

000005bc <proc_restart>:
bool_t proc_restart( proc_t * proc )
{
     5bc:	df 93       	push	r29
     5be:	cf 93       	push	r28
     5c0:	00 d0       	rcall	.+0      	; 0x5c2 <proc_restart+0x6>
     5c2:	00 d0       	rcall	.+0      	; 0x5c4 <proc_restart+0x8>
     5c4:	0f 92       	push	r0
     5c6:	cd b7       	in	r28, 0x3d	; 61
     5c8:	de b7       	in	r29, 0x3e	; 62
     5ca:	9d 83       	std	Y+5, r25	; 0x05
     5cc:	8c 83       	std	Y+4, r24	; 0x04
    proc_runtime_arg_t scarg;
    scarg.proc = proc;
     5ce:	8c 81       	ldd	r24, Y+4	; 0x04
     5d0:	9d 81       	ldd	r25, Y+5	; 0x05
     5d2:	9a 83       	std	Y+2, r25	; 0x02
     5d4:	89 83       	std	Y+1, r24	; 0x01

    syscall(2,(void *)&scarg);
     5d6:	82 e0       	ldi	r24, 0x02	; 2
     5d8:	9e 01       	movw	r18, r28
     5da:	2f 5f       	subi	r18, 0xFF	; 255
     5dc:	3f 4f       	sbci	r19, 0xFF	; 255
     5de:	b9 01       	movw	r22, r18
     5e0:	0e 94 24 02 	call	0x448	; 0x448 <syscall>
    return scarg.scall_ret;
     5e4:	8b 81       	ldd	r24, Y+3	; 0x03
}
     5e6:	0f 90       	pop	r0
     5e8:	0f 90       	pop	r0
     5ea:	0f 90       	pop	r0
     5ec:	0f 90       	pop	r0
     5ee:	0f 90       	pop	r0
     5f0:	cf 91       	pop	r28
     5f2:	df 91       	pop	r29
     5f4:	08 95       	ret

000005f6 <scall_proc_stop>:
//---------------------------------------------------------------------------------------------
//3
void scall_proc_stop( void * arg )
{
     5f6:	0f 93       	push	r16
     5f8:	1f 93       	push	r17
     5fa:	df 93       	push	r29
     5fc:	cf 93       	push	r28
     5fe:	00 d0       	rcall	.+0      	; 0x600 <scall_proc_stop+0xa>
     600:	cd b7       	in	r28, 0x3d	; 61
     602:	de b7       	in	r29, 0x3e	; 62
     604:	9a 83       	std	Y+2, r25	; 0x02
     606:	89 83       	std	Y+1, r24	; 0x01
    ((proc_runtime_arg_t *)arg)->scall_ret = proc_stop_isr( ((proc_runtime_arg_t *)arg)->proc );
     608:	09 81       	ldd	r16, Y+1	; 0x01
     60a:	1a 81       	ldd	r17, Y+2	; 0x02
     60c:	e9 81       	ldd	r30, Y+1	; 0x01
     60e:	fa 81       	ldd	r31, Y+2	; 0x02
     610:	80 81       	ld	r24, Z
     612:	91 81       	ldd	r25, Z+1	; 0x01
     614:	0e 94 89 0c 	call	0x1912	; 0x1912 <proc_stop_isr>
     618:	f8 01       	movw	r30, r16
     61a:	82 83       	std	Z+2, r24	; 0x02
}
     61c:	0f 90       	pop	r0
     61e:	0f 90       	pop	r0
     620:	cf 91       	pop	r28
     622:	df 91       	pop	r29
     624:	1f 91       	pop	r17
     626:	0f 91       	pop	r16
     628:	08 95       	ret

0000062a <scall_proc_self_stop>:
}

//---------------------------------------------------------------------------------------------
//4
void scall_proc_self_stop( void * arg )
{
     62a:	df 93       	push	r29
     62c:	cf 93       	push	r28
     62e:	00 d0       	rcall	.+0      	; 0x630 <scall_proc_self_stop+0x6>
     630:	00 d0       	rcall	.+0      	; 0x632 <scall_proc_self_stop+0x8>
     632:	cd b7       	in	r28, 0x3d	; 61
     634:	de b7       	in	r29, 0x3e	; 62
     636:	9c 83       	std	Y+4, r25	; 0x04
     638:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = kernel.sched.current_proc;
     63a:	80 91 9e 01 	lds	r24, 0x019E
     63e:	90 91 9f 01 	lds	r25, 0x019F
     642:	9a 83       	std	Y+2, r25	; 0x02
     644:	89 83       	std	Y+1, r24	; 0x01
    _proc_stop( proc );
     646:	89 81       	ldd	r24, Y+1	; 0x01
     648:	9a 81       	ldd	r25, Y+2	; 0x02
     64a:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <_proc_stop>
}
     64e:	0f 90       	pop	r0
     650:	0f 90       	pop	r0
     652:	0f 90       	pop	r0
     654:	0f 90       	pop	r0
     656:	cf 91       	pop	r28
     658:	df 91       	pop	r29
     65a:	08 95       	ret

0000065c <proc_self_stop>:
void proc_self_stop(void)
{
     65c:	df 93       	push	r29
     65e:	cf 93       	push	r28
     660:	cd b7       	in	r28, 0x3d	; 61
     662:	de b7       	in	r29, 0x3e	; 62
    syscall(4,(void *)1);
     664:	84 e0       	ldi	r24, 0x04	; 4
     666:	61 e0       	ldi	r22, 0x01	; 1
     668:	70 e0       	ldi	r23, 0x00	; 0
     66a:	0e 94 24 02 	call	0x448	; 0x448 <syscall>
}
     66e:	cf 91       	pop	r28
     670:	df 91       	pop	r29
     672:	08 95       	ret

00000674 <scall_proc_terminate>:
//---------------------------------------------------------------------------------------------
//5
/// Останов процесса после выхода из pmain, для обертки proc_run_wrapper
void scall_proc_terminate( void * arg )
{
     674:	df 93       	push	r29
     676:	cf 93       	push	r28
     678:	00 d0       	rcall	.+0      	; 0x67a <scall_proc_terminate+0x6>
     67a:	00 d0       	rcall	.+0      	; 0x67c <scall_proc_terminate+0x8>
     67c:	cd b7       	in	r28, 0x3d	; 61
     67e:	de b7       	in	r29, 0x3e	; 62
     680:	9c 83       	std	Y+4, r25	; 0x04
     682:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = (proc_t *)arg;
     684:	8b 81       	ldd	r24, Y+3	; 0x03
     686:	9c 81       	ldd	r25, Y+4	; 0x04
     688:	9a 83       	std	Y+2, r25	; 0x02
     68a:	89 83       	std	Y+1, r24	; 0x01
    // Обрабатываем флаги
    // Нельзя выходить из pmain не освободив все захваченные ресурсы, за это процесс будет "убит"!
    if( proc->flags & PROC_FLG_HOLD ) proc->flags |= PROC_FLG_DEAD;
     68c:	e9 81       	ldd	r30, Y+1	; 0x01
     68e:	fa 81       	ldd	r31, Y+2	; 0x02
     690:	83 85       	ldd	r24, Z+11	; 0x0b
     692:	88 2f       	mov	r24, r24
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	84 70       	andi	r24, 0x04	; 4
     698:	90 70       	andi	r25, 0x00	; 0
     69a:	00 97       	sbiw	r24, 0x00	; 0
     69c:	41 f0       	breq	.+16     	; 0x6ae <scall_proc_terminate+0x3a>
     69e:	e9 81       	ldd	r30, Y+1	; 0x01
     6a0:	fa 81       	ldd	r31, Y+2	; 0x02
     6a2:	83 85       	ldd	r24, Z+11	; 0x0b
     6a4:	80 68       	ori	r24, 0x80	; 128
     6a6:	e9 81       	ldd	r30, Y+1	; 0x01
     6a8:	fa 81       	ldd	r31, Y+2	; 0x02
     6aa:	83 87       	std	Z+11, r24	; 0x0b
     6ac:	07 c0       	rjmp	.+14     	; 0x6bc <scall_proc_terminate+0x48>
    // В противном случае - просто завершаем процесс
    else proc->flags |= PROC_FLG_END;
     6ae:	e9 81       	ldd	r30, Y+1	; 0x01
     6b0:	fa 81       	ldd	r31, Y+2	; 0x02
     6b2:	83 85       	ldd	r24, Z+11	; 0x0b
     6b4:	80 64       	ori	r24, 0x40	; 64
     6b6:	e9 81       	ldd	r30, Y+1	; 0x01
     6b8:	fa 81       	ldd	r31, Y+2	; 0x02
     6ba:	83 87       	std	Z+11, r24	; 0x0b
    proc->flags &= ~(PROC_FLG_PRE_END|PROC_FLG_RUN);
     6bc:	e9 81       	ldd	r30, Y+1	; 0x01
     6be:	fa 81       	ldd	r31, Y+2	; 0x02
     6c0:	83 85       	ldd	r24, Z+11	; 0x0b
     6c2:	8d 7d       	andi	r24, 0xDD	; 221
     6c4:	e9 81       	ldd	r30, Y+1	; 0x01
     6c6:	fa 81       	ldd	r31, Y+2	; 0x02
     6c8:	83 87       	std	Z+11, r24	; 0x0b
    // Останов
    _proc_stop_( proc );
     6ca:	89 81       	ldd	r24, Y+1	; 0x01
     6cc:	9a 81       	ldd	r25, Y+2	; 0x02
     6ce:	0e 94 a8 07 	call	0xf50	; 0xf50 <gitem_cut>
    // Выполнить перепланировку
    resched();
     6d2:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
}
     6d6:	0f 90       	pop	r0
     6d8:	0f 90       	pop	r0
     6da:	0f 90       	pop	r0
     6dc:	0f 90       	pop	r0
     6de:	cf 91       	pop	r28
     6e0:	df 91       	pop	r29
     6e2:	08 95       	ret

000006e4 <proc_run_wrapper>:
void proc_run_wrapper( proc_t * proc )
{
     6e4:	df 93       	push	r29
     6e6:	cf 93       	push	r28
     6e8:	00 d0       	rcall	.+0      	; 0x6ea <proc_run_wrapper+0x6>
     6ea:	00 d0       	rcall	.+0      	; 0x6ec <proc_run_wrapper+0x8>
     6ec:	00 d0       	rcall	.+0      	; 0x6ee <proc_run_wrapper+0xa>
     6ee:	cd b7       	in	r28, 0x3d	; 61
     6f0:	de b7       	in	r29, 0x3e	; 62
     6f2:	9e 83       	std	Y+6, r25	; 0x06
     6f4:	8d 83       	std	Y+5, r24	; 0x05
    //Атомарно читаем pmain и arg
    cli();
     6f6:	f8 94       	cli
    code_t pmain = proc->pmain;
     6f8:	ed 81       	ldd	r30, Y+5	; 0x05
     6fa:	fe 81       	ldd	r31, Y+6	; 0x06
     6fc:	82 a1       	ldd	r24, Z+34	; 0x22
     6fe:	93 a1       	ldd	r25, Z+35	; 0x23
     700:	9c 83       	std	Y+4, r25	; 0x04
     702:	8b 83       	std	Y+3, r24	; 0x03
    void * arg = proc->arg;
     704:	ed 81       	ldd	r30, Y+5	; 0x05
     706:	fe 81       	ldd	r31, Y+6	; 0x06
     708:	80 a5       	ldd	r24, Z+40	; 0x28
     70a:	91 a5       	ldd	r25, Z+41	; 0x29
     70c:	9a 83       	std	Y+2, r25	; 0x02
     70e:	89 83       	std	Y+1, r24	; 0x01
    sei();
     710:	78 94       	sei
    //Выполняем pmain
    pmain( arg );
     712:	89 81       	ldd	r24, Y+1	; 0x01
     714:	9a 81       	ldd	r25, Y+2	; 0x02
     716:	eb 81       	ldd	r30, Y+3	; 0x03
     718:	fc 81       	ldd	r31, Y+4	; 0x04
     71a:	09 95       	icall
    // Завершаем процесс
    syscall(5,(void *)proc);
     71c:	2d 81       	ldd	r18, Y+5	; 0x05
     71e:	3e 81       	ldd	r19, Y+6	; 0x06
     720:	85 e0       	ldi	r24, 0x05	; 5
     722:	b9 01       	movw	r22, r18
     724:	0e 94 24 02 	call	0x448	; 0x448 <syscall>
}
     728:	26 96       	adiw	r28, 0x06	; 6
     72a:	0f b6       	in	r0, 0x3f	; 63
     72c:	f8 94       	cli
     72e:	de bf       	out	0x3e, r29	; 62
     730:	0f be       	out	0x3f, r0	; 63
     732:	cd bf       	out	0x3d, r28	; 61
     734:	cf 91       	pop	r28
     736:	df 91       	pop	r29
     738:	08 95       	ret

0000073a <scall_proc_flag_stop>:
//---------------------------------------------------------------------------------------------
//6
void scall_proc_flag_stop( void * arg )
{
     73a:	df 93       	push	r29
     73c:	cf 93       	push	r28
     73e:	00 d0       	rcall	.+0      	; 0x740 <scall_proc_flag_stop+0x6>
     740:	cd b7       	in	r28, 0x3d	; 61
     742:	de b7       	in	r29, 0x3e	; 62
     744:	9a 83       	std	Y+2, r25	; 0x02
     746:	89 83       	std	Y+1, r24	; 0x01
    _proc_flag_stop_isr( *((flag_t *)arg) );
     748:	e9 81       	ldd	r30, Y+1	; 0x01
     74a:	fa 81       	ldd	r31, Y+2	; 0x02
     74c:	80 81       	ld	r24, Z
     74e:	0e 94 de 0c 	call	0x19bc	; 0x19bc <_proc_flag_stop_isr>
}
     752:	0f 90       	pop	r0
     754:	0f 90       	pop	r0
     756:	cf 91       	pop	r28
     758:	df 91       	pop	r29
     75a:	08 95       	ret

0000075c <scall_sig_init>:
///=================================================================
///                         Сигналы
//7
void scall_sig_init( void * arg )
{
     75c:	df 93       	push	r29
     75e:	cf 93       	push	r28
     760:	00 d0       	rcall	.+0      	; 0x762 <scall_sig_init+0x6>
     762:	cd b7       	in	r28, 0x3d	; 61
     764:	de b7       	in	r29, 0x3e	; 62
     766:	9a 83       	std	Y+2, r25	; 0x02
     768:	89 83       	std	Y+1, r24	; 0x01
    sig_init_isr( (sig_t *)arg );
     76a:	89 81       	ldd	r24, Y+1	; 0x01
     76c:	9a 81       	ldd	r25, Y+2	; 0x02
     76e:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <sig_init_isr>
}
     772:	0f 90       	pop	r0
     774:	0f 90       	pop	r0
     776:	cf 91       	pop	r28
     778:	df 91       	pop	r29
     77a:	08 95       	ret

0000077c <scall_sig_wait>:
    syscall( 7, (void *)sig );
}
//---------------------------------------------------------------------------------------------
//8
void scall_sig_wait( void * arg )
{
     77c:	df 93       	push	r29
     77e:	cf 93       	push	r28
     780:	00 d0       	rcall	.+0      	; 0x782 <scall_sig_wait+0x6>
     782:	cd b7       	in	r28, 0x3d	; 61
     784:	de b7       	in	r29, 0x3e	; 62
     786:	9a 83       	std	Y+2, r25	; 0x02
     788:	89 83       	std	Y+1, r24	; 0x01
    sig_wait_stage_1_isr( (sig_t *)arg );
     78a:	89 81       	ldd	r24, Y+1	; 0x01
     78c:	9a 81       	ldd	r25, Y+2	; 0x02
     78e:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <sig_wait_stage_1_isr>
}
     792:	0f 90       	pop	r0
     794:	0f 90       	pop	r0
     796:	cf 91       	pop	r28
     798:	df 91       	pop	r29
     79a:	08 95       	ret

0000079c <scall_sig_signal>:
    syscall( 6, (void *)&mask );/// Останов в случае необходимости
}
//---------------------------------------------------------------------------------------------
//9
void scall_sig_signal( void * arg )
{
     79c:	df 93       	push	r29
     79e:	cf 93       	push	r28
     7a0:	00 d0       	rcall	.+0      	; 0x7a2 <scall_sig_signal+0x6>
     7a2:	cd b7       	in	r28, 0x3d	; 61
     7a4:	de b7       	in	r29, 0x3e	; 62
     7a6:	9a 83       	std	Y+2, r25	; 0x02
     7a8:	89 83       	std	Y+1, r24	; 0x01
    sig_signal_isr( (sig_t *)arg );
     7aa:	89 81       	ldd	r24, Y+1	; 0x01
     7ac:	9a 81       	ldd	r25, Y+2	; 0x02
     7ae:	0e 94 1d 10 	call	0x203a	; 0x203a <sig_signal_isr>
}
     7b2:	0f 90       	pop	r0
     7b4:	0f 90       	pop	r0
     7b6:	cf 91       	pop	r28
     7b8:	df 91       	pop	r29
     7ba:	08 95       	ret

000007bc <scall_sig_broadcast>:
    syscall( 9, (void *)sig );
}
//---------------------------------------------------------------------------------------------
//10
void scall_sig_broadcast( void * arg )
{
     7bc:	df 93       	push	r29
     7be:	cf 93       	push	r28
     7c0:	00 d0       	rcall	.+0      	; 0x7c2 <scall_sig_broadcast+0x6>
     7c2:	cd b7       	in	r28, 0x3d	; 61
     7c4:	de b7       	in	r29, 0x3e	; 62
     7c6:	9a 83       	std	Y+2, r25	; 0x02
     7c8:	89 83       	std	Y+1, r24	; 0x01
    sig_broadcast_isr( (sig_t *)arg );
     7ca:	89 81       	ldd	r24, Y+1	; 0x01
     7cc:	9a 81       	ldd	r25, Y+2	; 0x02
     7ce:	0e 94 46 10 	call	0x208c	; 0x208c <sig_broadcast_isr>
}
     7d2:	0f 90       	pop	r0
     7d4:	0f 90       	pop	r0
     7d6:	cf 91       	pop	r28
     7d8:	df 91       	pop	r29
     7da:	08 95       	ret

000007dc <scall_sem_init>:
}
///=================================================================
///                         Семафоры
//11
void scall_sem_init( void * arg )
{
     7dc:	df 93       	push	r29
     7de:	cf 93       	push	r28
     7e0:	00 d0       	rcall	.+0      	; 0x7e2 <scall_sem_init+0x6>
     7e2:	cd b7       	in	r28, 0x3d	; 61
     7e4:	de b7       	in	r29, 0x3e	; 62
     7e6:	9a 83       	std	Y+2, r25	; 0x02
     7e8:	89 83       	std	Y+1, r24	; 0x01
    sem_init_isr( ((sem_init_arg_t *)arg)->sem, ((sem_init_arg_t *)arg)->count );
     7ea:	e9 81       	ldd	r30, Y+1	; 0x01
     7ec:	fa 81       	ldd	r31, Y+2	; 0x02
     7ee:	80 81       	ld	r24, Z
     7f0:	91 81       	ldd	r25, Z+1	; 0x01
     7f2:	e9 81       	ldd	r30, Y+1	; 0x01
     7f4:	fa 81       	ldd	r31, Y+2	; 0x02
     7f6:	22 81       	ldd	r18, Z+2	; 0x02
     7f8:	33 81       	ldd	r19, Z+3	; 0x03
     7fa:	b9 01       	movw	r22, r18
     7fc:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <sem_init_isr>
}
     800:	0f 90       	pop	r0
     802:	0f 90       	pop	r0
     804:	cf 91       	pop	r28
     806:	df 91       	pop	r29
     808:	08 95       	ret

0000080a <scall_sem_lock>:
    syscall( 11, (void *)&scarg );
}
//----------------------------------------------------------------------
//12
void scall_sem_lock( void * arg )
{
     80a:	0f 93       	push	r16
     80c:	1f 93       	push	r17
     80e:	df 93       	push	r29
     810:	cf 93       	push	r28
     812:	00 d0       	rcall	.+0      	; 0x814 <scall_sem_lock+0xa>
     814:	cd b7       	in	r28, 0x3d	; 61
     816:	de b7       	in	r29, 0x3e	; 62
     818:	9a 83       	std	Y+2, r25	; 0x02
     81a:	89 83       	std	Y+1, r24	; 0x01
    ((sem_lock_arg_t *)arg)->scall_ret = _sem_lock_stage_1( ((sem_lock_arg_t *)arg)->sem );
     81c:	09 81       	ldd	r16, Y+1	; 0x01
     81e:	1a 81       	ldd	r17, Y+2	; 0x02
     820:	e9 81       	ldd	r30, Y+1	; 0x01
     822:	fa 81       	ldd	r31, Y+2	; 0x02
     824:	80 81       	ld	r24, Z
     826:	91 81       	ldd	r25, Z+1	; 0x01
     828:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <_sem_lock_stage_1>
     82c:	f8 01       	movw	r30, r16
     82e:	82 83       	std	Z+2, r24	; 0x02
}
     830:	0f 90       	pop	r0
     832:	0f 90       	pop	r0
     834:	cf 91       	pop	r28
     836:	df 91       	pop	r29
     838:	1f 91       	pop	r17
     83a:	0f 91       	pop	r16
     83c:	08 95       	ret

0000083e <scall_sem_unlock>:
    return scarg.scall_ret;
}
//----------------------------------------------------------------------
//13
void scall_sem_unlock( void * arg )
{
     83e:	df 93       	push	r29
     840:	cf 93       	push	r28
     842:	00 d0       	rcall	.+0      	; 0x844 <scall_sem_unlock+0x6>
     844:	cd b7       	in	r28, 0x3d	; 61
     846:	de b7       	in	r29, 0x3e	; 62
     848:	9a 83       	std	Y+2, r25	; 0x02
     84a:	89 83       	std	Y+1, r24	; 0x01
    _sem_unlock( (sem_t *)arg );
     84c:	89 81       	ldd	r24, Y+1	; 0x01
     84e:	9a 81       	ldd	r25, Y+2	; 0x02
     850:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <_sem_unlock>
}
     854:	0f 90       	pop	r0
     856:	0f 90       	pop	r0
     858:	cf 91       	pop	r28
     85a:	df 91       	pop	r29
     85c:	08 95       	ret

0000085e <scall_mutex_init>:
}
///=================================================================
///                         Мьютексы
//14
void scall_mutex_init(void * arg)
{
     85e:	df 93       	push	r29
     860:	cf 93       	push	r28
     862:	00 d0       	rcall	.+0      	; 0x864 <scall_mutex_init+0x6>
     864:	cd b7       	in	r28, 0x3d	; 61
     866:	de b7       	in	r29, 0x3e	; 62
     868:	9a 83       	std	Y+2, r25	; 0x02
     86a:	89 83       	std	Y+1, r24	; 0x01
    mutex_init_isr(
     86c:	e9 81       	ldd	r30, Y+1	; 0x01
     86e:	fa 81       	ldd	r31, Y+2	; 0x02
     870:	80 81       	ld	r24, Z
     872:	91 81       	ldd	r25, Z+1	; 0x01
     874:	e9 81       	ldd	r30, Y+1	; 0x01
     876:	fa 81       	ldd	r31, Y+2	; 0x02
     878:	22 81       	ldd	r18, Z+2	; 0x02
     87a:	62 2f       	mov	r22, r18
     87c:	0e 94 c0 09 	call	0x1380	; 0x1380 <mutex_init_isr>
               ((mutex_init_arg_t *)arg)->mutex
#ifdef CONFIG_USE_HIGHEST_LOCKER
               ,((mutex_init_arg_t *)arg)->prio
#endif // CONFIG_USE_HIGHEST_LOCKER
               );
}
     880:	0f 90       	pop	r0
     882:	0f 90       	pop	r0
     884:	cf 91       	pop	r28
     886:	df 91       	pop	r29
     888:	08 95       	ret

0000088a <scall_mutex_lock>:
    syscall( 14, (void *)&scarg );
}
//----------------------------------------------------------------------
//15
void scall_mutex_lock(void * arg)
{
     88a:	0f 93       	push	r16
     88c:	1f 93       	push	r17
     88e:	df 93       	push	r29
     890:	cf 93       	push	r28
     892:	00 d0       	rcall	.+0      	; 0x894 <scall_mutex_lock+0xa>
     894:	cd b7       	in	r28, 0x3d	; 61
     896:	de b7       	in	r29, 0x3e	; 62
     898:	9a 83       	std	Y+2, r25	; 0x02
     89a:	89 83       	std	Y+1, r24	; 0x01
    ((mutex_lock_arg_t *)arg)->scall_ret = _mutex_lock( ((mutex_lock_arg_t *)arg)->mutex );
     89c:	09 81       	ldd	r16, Y+1	; 0x01
     89e:	1a 81       	ldd	r17, Y+2	; 0x02
     8a0:	e9 81       	ldd	r30, Y+1	; 0x01
     8a2:	fa 81       	ldd	r31, Y+2	; 0x02
     8a4:	80 81       	ld	r24, Z
     8a6:	91 81       	ldd	r25, Z+1	; 0x01
     8a8:	0e 94 db 09 	call	0x13b6	; 0x13b6 <_mutex_lock>
     8ac:	f8 01       	movw	r30, r16
     8ae:	82 83       	std	Z+2, r24	; 0x02
}
     8b0:	0f 90       	pop	r0
     8b2:	0f 90       	pop	r0
     8b4:	cf 91       	pop	r28
     8b6:	df 91       	pop	r29
     8b8:	1f 91       	pop	r17
     8ba:	0f 91       	pop	r16
     8bc:	08 95       	ret

000008be <scall_mutex_try_lock>:
}
// Захват
//----------------------------------------------------------------------
//16
void scall_mutex_try_lock(void * arg)
{
     8be:	0f 93       	push	r16
     8c0:	1f 93       	push	r17
     8c2:	df 93       	push	r29
     8c4:	cf 93       	push	r28
     8c6:	00 d0       	rcall	.+0      	; 0x8c8 <scall_mutex_try_lock+0xa>
     8c8:	cd b7       	in	r28, 0x3d	; 61
     8ca:	de b7       	in	r29, 0x3e	; 62
     8cc:	9a 83       	std	Y+2, r25	; 0x02
     8ce:	89 83       	std	Y+1, r24	; 0x01
    ((mutex_lock_arg_t *)arg)->scall_ret = _mutex_try_lock( ((mutex_lock_arg_t *)arg)->mutex );
     8d0:	09 81       	ldd	r16, Y+1	; 0x01
     8d2:	1a 81       	ldd	r17, Y+2	; 0x02
     8d4:	e9 81       	ldd	r30, Y+1	; 0x01
     8d6:	fa 81       	ldd	r31, Y+2	; 0x02
     8d8:	80 81       	ld	r24, Z
     8da:	91 81       	ldd	r25, Z+1	; 0x01
     8dc:	0e 94 23 0a 	call	0x1446	; 0x1446 <_mutex_try_lock>
     8e0:	f8 01       	movw	r30, r16
     8e2:	82 83       	std	Z+2, r24	; 0x02
}
     8e4:	0f 90       	pop	r0
     8e6:	0f 90       	pop	r0
     8e8:	cf 91       	pop	r28
     8ea:	df 91       	pop	r29
     8ec:	1f 91       	pop	r17
     8ee:	0f 91       	pop	r16
     8f0:	08 95       	ret

000008f2 <scall_mutex_unlock>:
    return scarg.scall_ret;
}
//----------------------------------------------------------------------
//17
void scall_mutex_unlock(void * arg)
{
     8f2:	df 93       	push	r29
     8f4:	cf 93       	push	r28
     8f6:	00 d0       	rcall	.+0      	; 0x8f8 <scall_mutex_unlock+0x6>
     8f8:	cd b7       	in	r28, 0x3d	; 61
     8fa:	de b7       	in	r29, 0x3e	; 62
     8fc:	9a 83       	std	Y+2, r25	; 0x02
     8fe:	89 83       	std	Y+1, r24	; 0x01
    _mutex_unlock( (mutex_t *)arg );
     900:	89 81       	ldd	r24, Y+1	; 0x01
     902:	9a 81       	ldd	r25, Y+2	; 0x02
     904:	0e 94 4f 0a 	call	0x149e	; 0x149e <_mutex_unlock>
}
     908:	0f 90       	pop	r0
     90a:	0f 90       	pop	r0
     90c:	cf 91       	pop	r28
     90e:	df 91       	pop	r29
     910:	08 95       	ret

00000912 <osbme_init_stack>:
*                                                                                        *
*****************************************************************************************/
#include <avr/io.h>
#include "../../osbme.h"
void * osbme_init_stack( void * top_of_stack, osbme_code_t code, void * arg )
{
     912:	df 93       	push	r29
     914:	cf 93       	push	r28
     916:	cd b7       	in	r28, 0x3d	; 61
     918:	de b7       	in	r29, 0x3e	; 62
     91a:	2a 97       	sbiw	r28, 0x0a	; 10
     91c:	0f b6       	in	r0, 0x3f	; 63
     91e:	f8 94       	cli
     920:	de bf       	out	0x3e, r29	; 62
     922:	0f be       	out	0x3f, r0	; 63
     924:	cd bf       	out	0x3d, r28	; 61
     926:	9e 83       	std	Y+6, r25	; 0x06
     928:	8d 83       	std	Y+5, r24	; 0x05
     92a:	78 87       	std	Y+8, r23	; 0x08
     92c:	6f 83       	std	Y+7, r22	; 0x07
     92e:	5a 87       	std	Y+10, r21	; 0x0a
     930:	49 87       	std	Y+9, r20	; 0x09
    char * tos = (char *)top_of_stack;
     932:	8d 81       	ldd	r24, Y+5	; 0x05
     934:	9e 81       	ldd	r25, Y+6	; 0x06
     936:	9c 83       	std	Y+4, r25	; 0x04
     938:	8b 83       	std	Y+3, r24	; 0x03
    //*tos-- = 0x11;
    //*tos-- = 0x22;
    //*tos-- = 0x33;

    // return address
    unsigned short tmp = (unsigned short)code;
     93a:	8f 81       	ldd	r24, Y+7	; 0x07
     93c:	98 85       	ldd	r25, Y+8	; 0x08
     93e:	9a 83       	std	Y+2, r25	; 0x02
     940:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (char)(tmp&(unsigned short)0x00ff);
     942:	89 81       	ldd	r24, Y+1	; 0x01
     944:	eb 81       	ldd	r30, Y+3	; 0x03
     946:	fc 81       	ldd	r31, Y+4	; 0x04
     948:	80 83       	st	Z, r24
     94a:	8b 81       	ldd	r24, Y+3	; 0x03
     94c:	9c 81       	ldd	r25, Y+4	; 0x04
     94e:	01 97       	sbiw	r24, 0x01	; 1
     950:	9c 83       	std	Y+4, r25	; 0x04
     952:	8b 83       	std	Y+3, r24	; 0x03
    tmp>>=8;
     954:	89 81       	ldd	r24, Y+1	; 0x01
     956:	9a 81       	ldd	r25, Y+2	; 0x02
     958:	89 2f       	mov	r24, r25
     95a:	99 27       	eor	r25, r25
     95c:	9a 83       	std	Y+2, r25	; 0x02
     95e:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (char)(tmp&(unsigned short)0x00ff);
     960:	89 81       	ldd	r24, Y+1	; 0x01
     962:	eb 81       	ldd	r30, Y+3	; 0x03
     964:	fc 81       	ldd	r31, Y+4	; 0x04
     966:	80 83       	st	Z, r24
     968:	8b 81       	ldd	r24, Y+3	; 0x03
     96a:	9c 81       	ldd	r25, Y+4	; 0x04
     96c:	01 97       	sbiw	r24, 0x01	; 1
     96e:	9c 83       	std	Y+4, r25	; 0x04
     970:	8b 83       	std	Y+3, r24	; 0x03

    // s
    *tos-- = 0x00;
     972:	eb 81       	ldd	r30, Y+3	; 0x03
     974:	fc 81       	ldd	r31, Y+4	; 0x04
     976:	10 82       	st	Z, r1
     978:	8b 81       	ldd	r24, Y+3	; 0x03
     97a:	9c 81       	ldd	r25, Y+4	; 0x04
     97c:	01 97       	sbiw	r24, 0x01	; 1
     97e:	9c 83       	std	Y+4, r25	; 0x04
     980:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x00;// r1 must B 0
     982:	eb 81       	ldd	r30, Y+3	; 0x03
     984:	fc 81       	ldd	r31, Y+4	; 0x04
     986:	10 82       	st	Z, r1
     988:	8b 81       	ldd	r24, Y+3	; 0x03
     98a:	9c 81       	ldd	r25, Y+4	; 0x04
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	9c 83       	std	Y+4, r25	; 0x04
     990:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x02;// r2
     992:	eb 81       	ldd	r30, Y+3	; 0x03
     994:	fc 81       	ldd	r31, Y+4	; 0x04
     996:	82 e0       	ldi	r24, 0x02	; 2
     998:	80 83       	st	Z, r24
     99a:	8b 81       	ldd	r24, Y+3	; 0x03
     99c:	9c 81       	ldd	r25, Y+4	; 0x04
     99e:	01 97       	sbiw	r24, 0x01	; 1
     9a0:	9c 83       	std	Y+4, r25	; 0x04
     9a2:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x80;// SREG: enable interrupts
     9a4:	eb 81       	ldd	r30, Y+3	; 0x03
     9a6:	fc 81       	ldd	r31, Y+4	; 0x04
     9a8:	80 e8       	ldi	r24, 0x80	; 128
     9aa:	80 83       	st	Z, r24
     9ac:	8b 81       	ldd	r24, Y+3	; 0x03
     9ae:	9c 81       	ldd	r25, Y+4	; 0x04
     9b0:	01 97       	sbiw	r24, 0x01	; 1
     9b2:	9c 83       	std	Y+4, r25	; 0x04
     9b4:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x03;
     9b6:	eb 81       	ldd	r30, Y+3	; 0x03
     9b8:	fc 81       	ldd	r31, Y+4	; 0x04
     9ba:	83 e0       	ldi	r24, 0x03	; 3
     9bc:	80 83       	st	Z, r24
     9be:	8b 81       	ldd	r24, Y+3	; 0x03
     9c0:	9c 81       	ldd	r25, Y+4	; 0x04
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	9c 83       	std	Y+4, r25	; 0x04
     9c6:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x04;
     9c8:	eb 81       	ldd	r30, Y+3	; 0x03
     9ca:	fc 81       	ldd	r31, Y+4	; 0x04
     9cc:	84 e0       	ldi	r24, 0x04	; 4
     9ce:	80 83       	st	Z, r24
     9d0:	8b 81       	ldd	r24, Y+3	; 0x03
     9d2:	9c 81       	ldd	r25, Y+4	; 0x04
     9d4:	01 97       	sbiw	r24, 0x01	; 1
     9d6:	9c 83       	std	Y+4, r25	; 0x04
     9d8:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x05;
     9da:	eb 81       	ldd	r30, Y+3	; 0x03
     9dc:	fc 81       	ldd	r31, Y+4	; 0x04
     9de:	85 e0       	ldi	r24, 0x05	; 5
     9e0:	80 83       	st	Z, r24
     9e2:	8b 81       	ldd	r24, Y+3	; 0x03
     9e4:	9c 81       	ldd	r25, Y+4	; 0x04
     9e6:	01 97       	sbiw	r24, 0x01	; 1
     9e8:	9c 83       	std	Y+4, r25	; 0x04
     9ea:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x06;
     9ec:	eb 81       	ldd	r30, Y+3	; 0x03
     9ee:	fc 81       	ldd	r31, Y+4	; 0x04
     9f0:	86 e0       	ldi	r24, 0x06	; 6
     9f2:	80 83       	st	Z, r24
     9f4:	8b 81       	ldd	r24, Y+3	; 0x03
     9f6:	9c 81       	ldd	r25, Y+4	; 0x04
     9f8:	01 97       	sbiw	r24, 0x01	; 1
     9fa:	9c 83       	std	Y+4, r25	; 0x04
     9fc:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x07;
     9fe:	eb 81       	ldd	r30, Y+3	; 0x03
     a00:	fc 81       	ldd	r31, Y+4	; 0x04
     a02:	87 e0       	ldi	r24, 0x07	; 7
     a04:	80 83       	st	Z, r24
     a06:	8b 81       	ldd	r24, Y+3	; 0x03
     a08:	9c 81       	ldd	r25, Y+4	; 0x04
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	9c 83       	std	Y+4, r25	; 0x04
     a0e:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x08;
     a10:	eb 81       	ldd	r30, Y+3	; 0x03
     a12:	fc 81       	ldd	r31, Y+4	; 0x04
     a14:	88 e0       	ldi	r24, 0x08	; 8
     a16:	80 83       	st	Z, r24
     a18:	8b 81       	ldd	r24, Y+3	; 0x03
     a1a:	9c 81       	ldd	r25, Y+4	; 0x04
     a1c:	01 97       	sbiw	r24, 0x01	; 1
     a1e:	9c 83       	std	Y+4, r25	; 0x04
     a20:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x09;
     a22:	eb 81       	ldd	r30, Y+3	; 0x03
     a24:	fc 81       	ldd	r31, Y+4	; 0x04
     a26:	89 e0       	ldi	r24, 0x09	; 9
     a28:	80 83       	st	Z, r24
     a2a:	8b 81       	ldd	r24, Y+3	; 0x03
     a2c:	9c 81       	ldd	r25, Y+4	; 0x04
     a2e:	01 97       	sbiw	r24, 0x01	; 1
     a30:	9c 83       	std	Y+4, r25	; 0x04
     a32:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x10;
     a34:	eb 81       	ldd	r30, Y+3	; 0x03
     a36:	fc 81       	ldd	r31, Y+4	; 0x04
     a38:	80 e1       	ldi	r24, 0x10	; 16
     a3a:	80 83       	st	Z, r24
     a3c:	8b 81       	ldd	r24, Y+3	; 0x03
     a3e:	9c 81       	ldd	r25, Y+4	; 0x04
     a40:	01 97       	sbiw	r24, 0x01	; 1
     a42:	9c 83       	std	Y+4, r25	; 0x04
     a44:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x11;
     a46:	eb 81       	ldd	r30, Y+3	; 0x03
     a48:	fc 81       	ldd	r31, Y+4	; 0x04
     a4a:	81 e1       	ldi	r24, 0x11	; 17
     a4c:	80 83       	st	Z, r24
     a4e:	8b 81       	ldd	r24, Y+3	; 0x03
     a50:	9c 81       	ldd	r25, Y+4	; 0x04
     a52:	01 97       	sbiw	r24, 0x01	; 1
     a54:	9c 83       	std	Y+4, r25	; 0x04
     a56:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x12;
     a58:	eb 81       	ldd	r30, Y+3	; 0x03
     a5a:	fc 81       	ldd	r31, Y+4	; 0x04
     a5c:	82 e1       	ldi	r24, 0x12	; 18
     a5e:	80 83       	st	Z, r24
     a60:	8b 81       	ldd	r24, Y+3	; 0x03
     a62:	9c 81       	ldd	r25, Y+4	; 0x04
     a64:	01 97       	sbiw	r24, 0x01	; 1
     a66:	9c 83       	std	Y+4, r25	; 0x04
     a68:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x13;
     a6a:	eb 81       	ldd	r30, Y+3	; 0x03
     a6c:	fc 81       	ldd	r31, Y+4	; 0x04
     a6e:	83 e1       	ldi	r24, 0x13	; 19
     a70:	80 83       	st	Z, r24
     a72:	8b 81       	ldd	r24, Y+3	; 0x03
     a74:	9c 81       	ldd	r25, Y+4	; 0x04
     a76:	01 97       	sbiw	r24, 0x01	; 1
     a78:	9c 83       	std	Y+4, r25	; 0x04
     a7a:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x14;
     a7c:	eb 81       	ldd	r30, Y+3	; 0x03
     a7e:	fc 81       	ldd	r31, Y+4	; 0x04
     a80:	84 e1       	ldi	r24, 0x14	; 20
     a82:	80 83       	st	Z, r24
     a84:	8b 81       	ldd	r24, Y+3	; 0x03
     a86:	9c 81       	ldd	r25, Y+4	; 0x04
     a88:	01 97       	sbiw	r24, 0x01	; 1
     a8a:	9c 83       	std	Y+4, r25	; 0x04
     a8c:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x15;
     a8e:	eb 81       	ldd	r30, Y+3	; 0x03
     a90:	fc 81       	ldd	r31, Y+4	; 0x04
     a92:	85 e1       	ldi	r24, 0x15	; 21
     a94:	80 83       	st	Z, r24
     a96:	8b 81       	ldd	r24, Y+3	; 0x03
     a98:	9c 81       	ldd	r25, Y+4	; 0x04
     a9a:	01 97       	sbiw	r24, 0x01	; 1
     a9c:	9c 83       	std	Y+4, r25	; 0x04
     a9e:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x16;
     aa0:	eb 81       	ldd	r30, Y+3	; 0x03
     aa2:	fc 81       	ldd	r31, Y+4	; 0x04
     aa4:	86 e1       	ldi	r24, 0x16	; 22
     aa6:	80 83       	st	Z, r24
     aa8:	8b 81       	ldd	r24, Y+3	; 0x03
     aaa:	9c 81       	ldd	r25, Y+4	; 0x04
     aac:	01 97       	sbiw	r24, 0x01	; 1
     aae:	9c 83       	std	Y+4, r25	; 0x04
     ab0:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x17;
     ab2:	eb 81       	ldd	r30, Y+3	; 0x03
     ab4:	fc 81       	ldd	r31, Y+4	; 0x04
     ab6:	87 e1       	ldi	r24, 0x17	; 23
     ab8:	80 83       	st	Z, r24
     aba:	8b 81       	ldd	r24, Y+3	; 0x03
     abc:	9c 81       	ldd	r25, Y+4	; 0x04
     abe:	01 97       	sbiw	r24, 0x01	; 1
     ac0:	9c 83       	std	Y+4, r25	; 0x04
     ac2:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x18;
     ac4:	eb 81       	ldd	r30, Y+3	; 0x03
     ac6:	fc 81       	ldd	r31, Y+4	; 0x04
     ac8:	88 e1       	ldi	r24, 0x18	; 24
     aca:	80 83       	st	Z, r24
     acc:	8b 81       	ldd	r24, Y+3	; 0x03
     ace:	9c 81       	ldd	r25, Y+4	; 0x04
     ad0:	01 97       	sbiw	r24, 0x01	; 1
     ad2:	9c 83       	std	Y+4, r25	; 0x04
     ad4:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x19;
     ad6:	eb 81       	ldd	r30, Y+3	; 0x03
     ad8:	fc 81       	ldd	r31, Y+4	; 0x04
     ada:	89 e1       	ldi	r24, 0x19	; 25
     adc:	80 83       	st	Z, r24
     ade:	8b 81       	ldd	r24, Y+3	; 0x03
     ae0:	9c 81       	ldd	r25, Y+4	; 0x04
     ae2:	01 97       	sbiw	r24, 0x01	; 1
     ae4:	9c 83       	std	Y+4, r25	; 0x04
     ae6:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x20;
     ae8:	eb 81       	ldd	r30, Y+3	; 0x03
     aea:	fc 81       	ldd	r31, Y+4	; 0x04
     aec:	80 e2       	ldi	r24, 0x20	; 32
     aee:	80 83       	st	Z, r24
     af0:	8b 81       	ldd	r24, Y+3	; 0x03
     af2:	9c 81       	ldd	r25, Y+4	; 0x04
     af4:	01 97       	sbiw	r24, 0x01	; 1
     af6:	9c 83       	std	Y+4, r25	; 0x04
     af8:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x21;
     afa:	eb 81       	ldd	r30, Y+3	; 0x03
     afc:	fc 81       	ldd	r31, Y+4	; 0x04
     afe:	81 e2       	ldi	r24, 0x21	; 33
     b00:	80 83       	st	Z, r24
     b02:	8b 81       	ldd	r24, Y+3	; 0x03
     b04:	9c 81       	ldd	r25, Y+4	; 0x04
     b06:	01 97       	sbiw	r24, 0x01	; 1
     b08:	9c 83       	std	Y+4, r25	; 0x04
     b0a:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x22;
     b0c:	eb 81       	ldd	r30, Y+3	; 0x03
     b0e:	fc 81       	ldd	r31, Y+4	; 0x04
     b10:	82 e2       	ldi	r24, 0x22	; 34
     b12:	80 83       	st	Z, r24
     b14:	8b 81       	ldd	r24, Y+3	; 0x03
     b16:	9c 81       	ldd	r25, Y+4	; 0x04
     b18:	01 97       	sbiw	r24, 0x01	; 1
     b1a:	9c 83       	std	Y+4, r25	; 0x04
     b1c:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x23;
     b1e:	eb 81       	ldd	r30, Y+3	; 0x03
     b20:	fc 81       	ldd	r31, Y+4	; 0x04
     b22:	83 e2       	ldi	r24, 0x23	; 35
     b24:	80 83       	st	Z, r24
     b26:	8b 81       	ldd	r24, Y+3	; 0x03
     b28:	9c 81       	ldd	r25, Y+4	; 0x04
     b2a:	01 97       	sbiw	r24, 0x01	; 1
     b2c:	9c 83       	std	Y+4, r25	; 0x04
     b2e:	8b 83       	std	Y+3, r24	; 0x03

    tmp = (unsigned short)arg;
     b30:	89 85       	ldd	r24, Y+9	; 0x09
     b32:	9a 85       	ldd	r25, Y+10	; 0x0a
     b34:	9a 83       	std	Y+2, r25	; 0x02
     b36:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (char)(tmp&(unsigned short)0x00ff); // r24 LSByte of arg
     b38:	89 81       	ldd	r24, Y+1	; 0x01
     b3a:	eb 81       	ldd	r30, Y+3	; 0x03
     b3c:	fc 81       	ldd	r31, Y+4	; 0x04
     b3e:	80 83       	st	Z, r24
     b40:	8b 81       	ldd	r24, Y+3	; 0x03
     b42:	9c 81       	ldd	r25, Y+4	; 0x04
     b44:	01 97       	sbiw	r24, 0x01	; 1
     b46:	9c 83       	std	Y+4, r25	; 0x04
     b48:	8b 83       	std	Y+3, r24	; 0x03
    tmp>>=8;
     b4a:	89 81       	ldd	r24, Y+1	; 0x01
     b4c:	9a 81       	ldd	r25, Y+2	; 0x02
     b4e:	89 2f       	mov	r24, r25
     b50:	99 27       	eor	r25, r25
     b52:	9a 83       	std	Y+2, r25	; 0x02
     b54:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (char)(tmp&(unsigned short)0x00ff); // r25 MSByte of arg
     b56:	89 81       	ldd	r24, Y+1	; 0x01
     b58:	eb 81       	ldd	r30, Y+3	; 0x03
     b5a:	fc 81       	ldd	r31, Y+4	; 0x04
     b5c:	80 83       	st	Z, r24
     b5e:	8b 81       	ldd	r24, Y+3	; 0x03
     b60:	9c 81       	ldd	r25, Y+4	; 0x04
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	9c 83       	std	Y+4, r25	; 0x04
     b66:	8b 83       	std	Y+3, r24	; 0x03

    *tos-- = 0x26;
     b68:	eb 81       	ldd	r30, Y+3	; 0x03
     b6a:	fc 81       	ldd	r31, Y+4	; 0x04
     b6c:	86 e2       	ldi	r24, 0x26	; 38
     b6e:	80 83       	st	Z, r24
     b70:	8b 81       	ldd	r24, Y+3	; 0x03
     b72:	9c 81       	ldd	r25, Y+4	; 0x04
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	9c 83       	std	Y+4, r25	; 0x04
     b78:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x27;
     b7a:	eb 81       	ldd	r30, Y+3	; 0x03
     b7c:	fc 81       	ldd	r31, Y+4	; 0x04
     b7e:	87 e2       	ldi	r24, 0x27	; 39
     b80:	80 83       	st	Z, r24
     b82:	8b 81       	ldd	r24, Y+3	; 0x03
     b84:	9c 81       	ldd	r25, Y+4	; 0x04
     b86:	01 97       	sbiw	r24, 0x01	; 1
     b88:	9c 83       	std	Y+4, r25	; 0x04
     b8a:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x28;
     b8c:	eb 81       	ldd	r30, Y+3	; 0x03
     b8e:	fc 81       	ldd	r31, Y+4	; 0x04
     b90:	88 e2       	ldi	r24, 0x28	; 40
     b92:	80 83       	st	Z, r24
     b94:	8b 81       	ldd	r24, Y+3	; 0x03
     b96:	9c 81       	ldd	r25, Y+4	; 0x04
     b98:	01 97       	sbiw	r24, 0x01	; 1
     b9a:	9c 83       	std	Y+4, r25	; 0x04
     b9c:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x29;
     b9e:	eb 81       	ldd	r30, Y+3	; 0x03
     ba0:	fc 81       	ldd	r31, Y+4	; 0x04
     ba2:	89 e2       	ldi	r24, 0x29	; 41
     ba4:	80 83       	st	Z, r24
     ba6:	8b 81       	ldd	r24, Y+3	; 0x03
     ba8:	9c 81       	ldd	r25, Y+4	; 0x04
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	9c 83       	std	Y+4, r25	; 0x04
     bae:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x30;
     bb0:	eb 81       	ldd	r30, Y+3	; 0x03
     bb2:	fc 81       	ldd	r31, Y+4	; 0x04
     bb4:	80 e3       	ldi	r24, 0x30	; 48
     bb6:	80 83       	st	Z, r24
     bb8:	8b 81       	ldd	r24, Y+3	; 0x03
     bba:	9c 81       	ldd	r25, Y+4	; 0x04
     bbc:	01 97       	sbiw	r24, 0x01	; 1
     bbe:	9c 83       	std	Y+4, r25	; 0x04
     bc0:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x31;
     bc2:	eb 81       	ldd	r30, Y+3	; 0x03
     bc4:	fc 81       	ldd	r31, Y+4	; 0x04
     bc6:	81 e3       	ldi	r24, 0x31	; 49
     bc8:	80 83       	st	Z, r24
     bca:	8b 81       	ldd	r24, Y+3	; 0x03
     bcc:	9c 81       	ldd	r25, Y+4	; 0x04
     bce:	01 97       	sbiw	r24, 0x01	; 1
     bd0:	9c 83       	std	Y+4, r25	; 0x04
     bd2:	8b 83       	std	Y+3, r24	; 0x03
#ifdef RAMPZ
    *tos-- = 0xff;
#endif
    return((void *)tos);
     bd4:	8b 81       	ldd	r24, Y+3	; 0x03
     bd6:	9c 81       	ldd	r25, Y+4	; 0x04
}
     bd8:	2a 96       	adiw	r28, 0x0a	; 10
     bda:	0f b6       	in	r0, 0x3f	; 63
     bdc:	f8 94       	cli
     bde:	de bf       	out	0x3e, r29	; 62
     be0:	0f be       	out	0x3f, r0	; 63
     be2:	cd bf       	out	0x3d, r28	; 61
     be4:	cf 91       	pop	r28
     be6:	df 91       	pop	r29
     be8:	08 95       	ret

00000bea <enter_crit_sec>:
    if( kernel.sched[core].nested_crit_sec == (count_t)0 )enable_interrupts();
}

#else
void enter_crit_sec(void)
{
     bea:	df 93       	push	r29
     bec:	cf 93       	push	r28
     bee:	cd b7       	in	r28, 0x3d	; 61
     bf0:	de b7       	in	r29, 0x3e	; 62
    disable_interrupts();
     bf2:	0e 94 bc 00 	call	0x178	; 0x178 <disable_interrupts>
    kernel.sched.nested_crit_sec++;
     bf6:	80 91 c6 01 	lds	r24, 0x01C6
     bfa:	90 91 c7 01 	lds	r25, 0x01C7
     bfe:	01 96       	adiw	r24, 0x01	; 1
     c00:	90 93 c7 01 	sts	0x01C7, r25
     c04:	80 93 c6 01 	sts	0x01C6, r24
}
     c08:	cf 91       	pop	r28
     c0a:	df 91       	pop	r29
     c0c:	08 95       	ret

00000c0e <exit_crit_sec>:
void exit_crit_sec(void)
{
     c0e:	df 93       	push	r29
     c10:	cf 93       	push	r28
     c12:	cd b7       	in	r28, 0x3d	; 61
     c14:	de b7       	in	r29, 0x3e	; 62
    if( kernel.sched.nested_crit_sec != (count_t)0 )kernel.sched.nested_crit_sec--;
     c16:	80 91 c6 01 	lds	r24, 0x01C6
     c1a:	90 91 c7 01 	lds	r25, 0x01C7
     c1e:	00 97       	sbiw	r24, 0x00	; 0
     c20:	49 f0       	breq	.+18     	; 0xc34 <exit_crit_sec+0x26>
     c22:	80 91 c6 01 	lds	r24, 0x01C6
     c26:	90 91 c7 01 	lds	r25, 0x01C7
     c2a:	01 97       	sbiw	r24, 0x01	; 1
     c2c:	90 93 c7 01 	sts	0x01C7, r25
     c30:	80 93 c6 01 	sts	0x01C6, r24
    if( kernel.sched.nested_crit_sec == (count_t)0 )enable_interrupts();
     c34:	80 91 c6 01 	lds	r24, 0x01C6
     c38:	90 91 c7 01 	lds	r25, 0x01C7
     c3c:	00 97       	sbiw	r24, 0x00	; 0
     c3e:	11 f4       	brne	.+4      	; 0xc44 <exit_crit_sec+0x36>
     c40:	0e 94 c4 00 	call	0x188	; 0x188 <enable_interrupts>
}
     c44:	cf 91       	pop	r28
     c46:	df 91       	pop	r29
     c48:	08 95       	ret

00000c4a <gitem_init>:
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
// Инициация
void gitem_init(gitem_t * gitem, prio_t prio)
{
     c4a:	df 93       	push	r29
     c4c:	cf 93       	push	r28
     c4e:	00 d0       	rcall	.+0      	; 0xc50 <gitem_init+0x6>
     c50:	00 d0       	rcall	.+0      	; 0xc52 <gitem_init+0x8>
     c52:	0f 92       	push	r0
     c54:	cd b7       	in	r28, 0x3d	; 61
     c56:	de b7       	in	r29, 0x3e	; 62
     c58:	9c 83       	std	Y+4, r25	; 0x04
     c5a:	8b 83       	std	Y+3, r24	; 0x03
     c5c:	6d 83       	std	Y+5, r22	; 0x05
    group_t * group = &gitem->grp;
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	9c 81       	ldd	r25, Y+4	; 0x04
     c62:	06 96       	adiw	r24, 0x06	; 6
     c64:	9a 83       	std	Y+2, r25	; 0x02
     c66:	89 83       	std	Y+1, r24	; 0x01
    item_init( (item_t *)gitem );
     c68:	8b 81       	ldd	r24, Y+3	; 0x03
     c6a:	9c 81       	ldd	r25, Y+4	; 0x04
     c6c:	0e 94 0b 09 	call	0x1216	; 0x1216 <item_init>
    group_init( group, prio );
     c70:	89 81       	ldd	r24, Y+1	; 0x01
     c72:	9a 81       	ldd	r25, Y+2	; 0x02
     c74:	6d 81       	ldd	r22, Y+5	; 0x05
     c76:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <group_init>
    gitem->group = group;
     c7a:	eb 81       	ldd	r30, Y+3	; 0x03
     c7c:	fc 81       	ldd	r31, Y+4	; 0x04
     c7e:	89 81       	ldd	r24, Y+1	; 0x01
     c80:	9a 81       	ldd	r25, Y+2	; 0x02
     c82:	95 83       	std	Z+5, r25	; 0x05
     c84:	84 83       	std	Z+4, r24	; 0x04
}
     c86:	0f 90       	pop	r0
     c88:	0f 90       	pop	r0
     c8a:	0f 90       	pop	r0
     c8c:	0f 90       	pop	r0
     c8e:	0f 90       	pop	r0
     c90:	cf 91       	pop	r28
     c92:	df 91       	pop	r29
     c94:	08 95       	ret

00000c96 <gitem_insert>:
// Вставить в список
void gitem_insert(gitem_t * gitem, xlist_t *xlist)
{
     c96:	df 93       	push	r29
     c98:	cf 93       	push	r28
     c9a:	cd b7       	in	r28, 0x3d	; 61
     c9c:	de b7       	in	r29, 0x3e	; 62
     c9e:	28 97       	sbiw	r28, 0x08	; 8
     ca0:	0f b6       	in	r0, 0x3f	; 63
     ca2:	f8 94       	cli
     ca4:	de bf       	out	0x3e, r29	; 62
     ca6:	0f be       	out	0x3f, r0	; 63
     ca8:	cd bf       	out	0x3d, r28	; 61
     caa:	9e 83       	std	Y+6, r25	; 0x06
     cac:	8d 83       	std	Y+5, r24	; 0x05
     cae:	78 87       	std	Y+8, r23	; 0x08
     cb0:	6f 83       	std	Y+7, r22	; 0x07
    prio_t prio = gitem->group->prio;
     cb2:	ed 81       	ldd	r30, Y+5	; 0x05
     cb4:	fe 81       	ldd	r31, Y+6	; 0x06
     cb6:	04 80       	ldd	r0, Z+4	; 0x04
     cb8:	f5 81       	ldd	r31, Z+5	; 0x05
     cba:	e0 2d       	mov	r30, r0
     cbc:	82 81       	ldd	r24, Z+2	; 0x02
     cbe:	8c 83       	std	Y+4, r24	; 0x04
    index_t mask = ((index_t)1)<<prio;
     cc0:	8c 81       	ldd	r24, Y+4	; 0x04
     cc2:	28 2f       	mov	r18, r24
     cc4:	30 e0       	ldi	r19, 0x00	; 0
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <gitem_insert+0x3a>
     ccc:	88 0f       	add	r24, r24
     cce:	99 1f       	adc	r25, r25
     cd0:	2a 95       	dec	r18
     cd2:	e2 f7       	brpl	.-8      	; 0xccc <gitem_insert+0x36>
     cd4:	8b 83       	std	Y+3, r24	; 0x03
    item_t ** head = (item_t **)xlist + prio;
     cd6:	2f 81       	ldd	r18, Y+7	; 0x07
     cd8:	38 85       	ldd	r19, Y+8	; 0x08
     cda:	8c 81       	ldd	r24, Y+4	; 0x04
     cdc:	88 2f       	mov	r24, r24
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	88 0f       	add	r24, r24
     ce2:	99 1f       	adc	r25, r25
     ce4:	82 0f       	add	r24, r18
     ce6:	93 1f       	adc	r25, r19
     ce8:	9a 83       	std	Y+2, r25	; 0x02
     cea:	89 83       	std	Y+1, r24	; 0x01
    // Пуста ли часть списка с таким приоритетом
    if( ( xlist->index )& mask)
     cec:	ef 81       	ldd	r30, Y+7	; 0x07
     cee:	f8 85       	ldd	r31, Y+8	; 0x08
     cf0:	90 89       	ldd	r25, Z+16	; 0x10
     cf2:	8b 81       	ldd	r24, Y+3	; 0x03
     cf4:	89 23       	and	r24, r25
     cf6:	88 23       	and	r24, r24
     cf8:	51 f0       	breq	.+20     	; 0xd0e <gitem_insert+0x78>
    {
        //Не пуста вставляем туда gitem
        item_insert( (item_t *)gitem, *head );
     cfa:	8d 81       	ldd	r24, Y+5	; 0x05
     cfc:	9e 81       	ldd	r25, Y+6	; 0x06
     cfe:	e9 81       	ldd	r30, Y+1	; 0x01
     d00:	fa 81       	ldd	r31, Y+2	; 0x02
     d02:	20 81       	ld	r18, Z
     d04:	31 81       	ldd	r19, Z+1	; 0x01
     d06:	b9 01       	movw	r22, r18
     d08:	0e 94 23 09 	call	0x1246	; 0x1246 <item_insert>
     d0c:	0e c0       	rjmp	.+28     	; 0xd2a <gitem_insert+0x94>
    }
    else
    {
        // Пуста, gitem будет головой
        *head = (item_t *)gitem;
     d0e:	8d 81       	ldd	r24, Y+5	; 0x05
     d10:	9e 81       	ldd	r25, Y+6	; 0x06
     d12:	e9 81       	ldd	r30, Y+1	; 0x01
     d14:	fa 81       	ldd	r31, Y+2	; 0x02
     d16:	91 83       	std	Z+1, r25	; 0x01
     d18:	80 83       	st	Z, r24
        xlist->index |= mask;
     d1a:	ef 81       	ldd	r30, Y+7	; 0x07
     d1c:	f8 85       	ldd	r31, Y+8	; 0x08
     d1e:	90 89       	ldd	r25, Z+16	; 0x10
     d20:	8b 81       	ldd	r24, Y+3	; 0x03
     d22:	89 2b       	or	r24, r25
     d24:	ef 81       	ldd	r30, Y+7	; 0x07
     d26:	f8 85       	ldd	r31, Y+8	; 0x08
     d28:	80 8b       	std	Z+16, r24	; 0x10
    }
    gitem->group->link = (void *)xlist;
     d2a:	ed 81       	ldd	r30, Y+5	; 0x05
     d2c:	fe 81       	ldd	r31, Y+6	; 0x06
     d2e:	04 80       	ldd	r0, Z+4	; 0x04
     d30:	f5 81       	ldd	r31, Z+5	; 0x05
     d32:	e0 2d       	mov	r30, r0
     d34:	8f 81       	ldd	r24, Y+7	; 0x07
     d36:	98 85       	ldd	r25, Y+8	; 0x08
     d38:	91 83       	std	Z+1, r25	; 0x01
     d3a:	80 83       	st	Z, r24
}
     d3c:	28 96       	adiw	r28, 0x08	; 8
     d3e:	0f b6       	in	r0, 0x3f	; 63
     d40:	f8 94       	cli
     d42:	de bf       	out	0x3e, r29	; 62
     d44:	0f be       	out	0x3f, r0	; 63
     d46:	cd bf       	out	0x3d, r28	; 61
     d48:	cf 91       	pop	r28
     d4a:	df 91       	pop	r29
     d4c:	08 95       	ret

00000d4e <gitem_insert_group>:
 при этом gitem->group переходит в Пул

 Ограничения на gitem - он не должен быть сгруппирован в момент встаки в группу.
*/
void gitem_insert_group(gitem_t * gitem, xlist_t *xlist)
{
     d4e:	df 93       	push	r29
     d50:	cf 93       	push	r28
     d52:	cd b7       	in	r28, 0x3d	; 61
     d54:	de b7       	in	r29, 0x3e	; 62
     d56:	2a 97       	sbiw	r28, 0x0a	; 10
     d58:	0f b6       	in	r0, 0x3f	; 63
     d5a:	f8 94       	cli
     d5c:	de bf       	out	0x3e, r29	; 62
     d5e:	0f be       	out	0x3f, r0	; 63
     d60:	cd bf       	out	0x3d, r28	; 61
     d62:	98 87       	std	Y+8, r25	; 0x08
     d64:	8f 83       	std	Y+7, r24	; 0x07
     d66:	7a 87       	std	Y+10, r23	; 0x0a
     d68:	69 87       	std	Y+9, r22	; 0x09
    prio_t prio = gitem->group->prio;
     d6a:	ef 81       	ldd	r30, Y+7	; 0x07
     d6c:	f8 85       	ldd	r31, Y+8	; 0x08
     d6e:	04 80       	ldd	r0, Z+4	; 0x04
     d70:	f5 81       	ldd	r31, Z+5	; 0x05
     d72:	e0 2d       	mov	r30, r0
     d74:	82 81       	ldd	r24, Z+2	; 0x02
     d76:	8e 83       	std	Y+6, r24	; 0x06
    index_t mask = ((index_t)1)<<prio;
     d78:	8e 81       	ldd	r24, Y+6	; 0x06
     d7a:	28 2f       	mov	r18, r24
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	02 c0       	rjmp	.+4      	; 0xd88 <gitem_insert_group+0x3a>
     d84:	88 0f       	add	r24, r24
     d86:	99 1f       	adc	r25, r25
     d88:	2a 95       	dec	r18
     d8a:	e2 f7       	brpl	.-8      	; 0xd84 <gitem_insert_group+0x36>
     d8c:	8d 83       	std	Y+5, r24	; 0x05
    item_t ** head = (item_t **)xlist + prio;
     d8e:	29 85       	ldd	r18, Y+9	; 0x09
     d90:	3a 85       	ldd	r19, Y+10	; 0x0a
     d92:	8e 81       	ldd	r24, Y+6	; 0x06
     d94:	88 2f       	mov	r24, r24
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	88 0f       	add	r24, r24
     d9a:	99 1f       	adc	r25, r25
     d9c:	82 0f       	add	r24, r18
     d9e:	93 1f       	adc	r25, r19
     da0:	9c 83       	std	Y+4, r25	; 0x04
     da2:	8b 83       	std	Y+3, r24	; 0x03
    group_t * group = gitem->group;
     da4:	ef 81       	ldd	r30, Y+7	; 0x07
     da6:	f8 85       	ldd	r31, Y+8	; 0x08
     da8:	84 81       	ldd	r24, Z+4	; 0x04
     daa:	95 81       	ldd	r25, Z+5	; 0x05
     dac:	9a 83       	std	Y+2, r25	; 0x02
     dae:	89 83       	std	Y+1, r24	; 0x01
    // Пуста ли часть списка с таким приоритетом
    if( ( xlist->index )& mask)
     db0:	e9 85       	ldd	r30, Y+9	; 0x09
     db2:	fa 85       	ldd	r31, Y+10	; 0x0a
     db4:	90 89       	ldd	r25, Z+16	; 0x10
     db6:	8d 81       	ldd	r24, Y+5	; 0x05
     db8:	89 23       	and	r24, r25
     dba:	88 23       	and	r24, r24
     dbc:	31 f1       	breq	.+76     	; 0xe0a <gitem_insert_group+0xbc>
    {
        //Не пуста вставляем туда gitem
        item_insert((item_t *)gitem, *head );
     dbe:	8f 81       	ldd	r24, Y+7	; 0x07
     dc0:	98 85       	ldd	r25, Y+8	; 0x08
     dc2:	eb 81       	ldd	r30, Y+3	; 0x03
     dc4:	fc 81       	ldd	r31, Y+4	; 0x04
     dc6:	20 81       	ld	r18, Z
     dc8:	31 81       	ldd	r19, Z+1	; 0x01
     dca:	b9 01       	movw	r22, r18
     dcc:	0e 94 23 09 	call	0x1246	; 0x1246 <item_insert>
        //Передаем старую группу в пул
        group_push(group);
     dd0:	89 81       	ldd	r24, Y+1	; 0x01
     dd2:	9a 81       	ldd	r25, Y+2	; 0x02
     dd4:	0e 94 98 08 	call	0x1130	; 0x1130 <group_push>
        //назначаем новую группу - ту, в которой голова
        group = ((gitem_t *)*head)->group;
     dd8:	eb 81       	ldd	r30, Y+3	; 0x03
     dda:	fc 81       	ldd	r31, Y+4	; 0x04
     ddc:	80 81       	ld	r24, Z
     dde:	91 81       	ldd	r25, Z+1	; 0x01
     de0:	fc 01       	movw	r30, r24
     de2:	84 81       	ldd	r24, Z+4	; 0x04
     de4:	95 81       	ldd	r25, Z+5	; 0x05
     de6:	9a 83       	std	Y+2, r25	; 0x02
     de8:	89 83       	std	Y+1, r24	; 0x01
        gitem->group = group;
     dea:	ef 81       	ldd	r30, Y+7	; 0x07
     dec:	f8 85       	ldd	r31, Y+8	; 0x08
     dee:	89 81       	ldd	r24, Y+1	; 0x01
     df0:	9a 81       	ldd	r25, Y+2	; 0x02
     df2:	95 83       	std	Z+5, r25	; 0x05
     df4:	84 83       	std	Z+4, r24	; 0x04
        //количество элементов в группе увеличилось на 1
        group->el_num++;
     df6:	e9 81       	ldd	r30, Y+1	; 0x01
     df8:	fa 81       	ldd	r31, Y+2	; 0x02
     dfa:	83 81       	ldd	r24, Z+3	; 0x03
     dfc:	94 81       	ldd	r25, Z+4	; 0x04
     dfe:	01 96       	adiw	r24, 0x01	; 1
     e00:	e9 81       	ldd	r30, Y+1	; 0x01
     e02:	fa 81       	ldd	r31, Y+2	; 0x02
     e04:	94 83       	std	Z+4, r25	; 0x04
     e06:	83 83       	std	Z+3, r24	; 0x03
     e08:	14 c0       	rjmp	.+40     	; 0xe32 <gitem_insert_group+0xe4>
    }
    else
    {
        // Пуста, gitem будет головой
        *head = (item_t *)gitem;
     e0a:	8f 81       	ldd	r24, Y+7	; 0x07
     e0c:	98 85       	ldd	r25, Y+8	; 0x08
     e0e:	eb 81       	ldd	r30, Y+3	; 0x03
     e10:	fc 81       	ldd	r31, Y+4	; 0x04
     e12:	91 83       	std	Z+1, r25	; 0x01
     e14:	80 83       	st	Z, r24
        xlist->index |= mask;
     e16:	e9 85       	ldd	r30, Y+9	; 0x09
     e18:	fa 85       	ldd	r31, Y+10	; 0x0a
     e1a:	90 89       	ldd	r25, Z+16	; 0x10
     e1c:	8d 81       	ldd	r24, Y+5	; 0x05
     e1e:	89 2b       	or	r24, r25
     e20:	e9 85       	ldd	r30, Y+9	; 0x09
     e22:	fa 85       	ldd	r31, Y+10	; 0x0a
     e24:	80 8b       	std	Z+16, r24	; 0x10
        group->link = (void *)xlist;
     e26:	e9 81       	ldd	r30, Y+1	; 0x01
     e28:	fa 81       	ldd	r31, Y+2	; 0x02
     e2a:	89 85       	ldd	r24, Y+9	; 0x09
     e2c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e2e:	91 83       	std	Z+1, r25	; 0x01
     e30:	80 83       	st	Z, r24
    }
}
     e32:	2a 96       	adiw	r28, 0x0a	; 10
     e34:	0f b6       	in	r0, 0x3f	; 63
     e36:	f8 94       	cli
     e38:	de bf       	out	0x3e, r29	; 62
     e3a:	0f be       	out	0x3f, r0	; 63
     e3c:	cd bf       	out	0x3d, r28	; 61
     e3e:	cf 91       	pop	r28
     e40:	df 91       	pop	r29
     e42:	08 95       	ret

00000e44 <gitem_fast_cut>:
// Быстро вырезать из списка (не обнуляется указатель gitem->group->link)
void gitem_fast_cut(gitem_t * gitem)
{
     e44:	df 93       	push	r29
     e46:	cf 93       	push	r28
     e48:	00 d0       	rcall	.+0      	; 0xe4a <gitem_fast_cut+0x6>
     e4a:	00 d0       	rcall	.+0      	; 0xe4c <gitem_fast_cut+0x8>
     e4c:	0f 92       	push	r0
     e4e:	cd b7       	in	r28, 0x3d	; 61
     e50:	de b7       	in	r29, 0x3e	; 62
     e52:	9d 83       	std	Y+5, r25	; 0x05
     e54:	8c 83       	std	Y+4, r24	; 0x04
    prio_t prio = gitem->group->prio;
     e56:	ec 81       	ldd	r30, Y+4	; 0x04
     e58:	fd 81       	ldd	r31, Y+5	; 0x05
     e5a:	04 80       	ldd	r0, Z+4	; 0x04
     e5c:	f5 81       	ldd	r31, Z+5	; 0x05
     e5e:	e0 2d       	mov	r30, r0
     e60:	82 81       	ldd	r24, Z+2	; 0x02
     e62:	8b 83       	std	Y+3, r24	; 0x03
    xlist_t * xlist = (xlist_t *)gitem->group->link;
     e64:	ec 81       	ldd	r30, Y+4	; 0x04
     e66:	fd 81       	ldd	r31, Y+5	; 0x05
     e68:	04 80       	ldd	r0, Z+4	; 0x04
     e6a:	f5 81       	ldd	r31, Z+5	; 0x05
     e6c:	e0 2d       	mov	r30, r0
     e6e:	80 81       	ld	r24, Z
     e70:	91 81       	ldd	r25, Z+1	; 0x01
     e72:	9a 83       	std	Y+2, r25	; 0x02
     e74:	89 83       	std	Y+1, r24	; 0x01
    // Является ли эта часть списка группированной?
    if( gitem->group->el_num > (count_t)1 )
     e76:	ec 81       	ldd	r30, Y+4	; 0x04
     e78:	fd 81       	ldd	r31, Y+5	; 0x05
     e7a:	04 80       	ldd	r0, Z+4	; 0x04
     e7c:	f5 81       	ldd	r31, Z+5	; 0x05
     e7e:	e0 2d       	mov	r30, r0
     e80:	83 81       	ldd	r24, Z+3	; 0x03
     e82:	94 81       	ldd	r25, Z+4	; 0x04
     e84:	82 30       	cpi	r24, 0x02	; 2
     e86:	91 05       	cpc	r25, r1
     e88:	b8 f0       	brcs	.+46     	; 0xeb8 <gitem_fast_cut+0x74>
    {
        //Группированная часть списка, будем вырезать из группы с выделением новой группы из Пула
        // В текущей группе стало на 1 элемент меньше
        gitem->group->el_num--;
     e8a:	ec 81       	ldd	r30, Y+4	; 0x04
     e8c:	fd 81       	ldd	r31, Y+5	; 0x05
     e8e:	04 80       	ldd	r0, Z+4	; 0x04
     e90:	f5 81       	ldd	r31, Z+5	; 0x05
     e92:	e0 2d       	mov	r30, r0
     e94:	83 81       	ldd	r24, Z+3	; 0x03
     e96:	94 81       	ldd	r25, Z+4	; 0x04
     e98:	01 97       	sbiw	r24, 0x01	; 1
     e9a:	94 83       	std	Z+4, r25	; 0x04
     e9c:	83 83       	std	Z+3, r24	; 0x03
        //выделяем новую группу
        gitem->group = group_pop();
     e9e:	0e 94 b2 08 	call	0x1164	; 0x1164 <group_pop>
     ea2:	ec 81       	ldd	r30, Y+4	; 0x04
     ea4:	fd 81       	ldd	r31, Y+5	; 0x05
     ea6:	95 83       	std	Z+5, r25	; 0x05
     ea8:	84 83       	std	Z+4, r24	; 0x04
        // Правильный приоритет, количество элементов в группе, выделенной из пула должно быть равно 1
        gitem->group->prio = (prio_t)prio;
     eaa:	ec 81       	ldd	r30, Y+4	; 0x04
     eac:	fd 81       	ldd	r31, Y+5	; 0x05
     eae:	04 80       	ldd	r0, Z+4	; 0x04
     eb0:	f5 81       	ldd	r31, Z+5	; 0x05
     eb2:	e0 2d       	mov	r30, r0
     eb4:	8b 81       	ldd	r24, Y+3	; 0x03
     eb6:	82 83       	std	Z+2, r24	; 0x02
    }
    //Является ли элемент единственным в своей части списка?
    if( ((item_t *)gitem)->next == (item_t *)gitem )
     eb8:	ec 81       	ldd	r30, Y+4	; 0x04
     eba:	fd 81       	ldd	r31, Y+5	; 0x05
     ebc:	20 81       	ld	r18, Z
     ebe:	31 81       	ldd	r19, Z+1	; 0x01
     ec0:	8c 81       	ldd	r24, Y+4	; 0x04
     ec2:	9d 81       	ldd	r25, Y+5	; 0x05
     ec4:	28 17       	cp	r18, r24
     ec6:	39 07       	cpc	r19, r25
     ec8:	09 f5       	brne	.+66     	; 0xf0c <gitem_fast_cut+0xc8>
    {
        // Да, является!
        xlist->item[prio] = (item_t *)0;
     eca:	8b 81       	ldd	r24, Y+3	; 0x03
     ecc:	88 2f       	mov	r24, r24
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	29 81       	ldd	r18, Y+1	; 0x01
     ed2:	3a 81       	ldd	r19, Y+2	; 0x02
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	f9 01       	movw	r30, r18
     eda:	e8 0f       	add	r30, r24
     edc:	f9 1f       	adc	r31, r25
     ede:	11 82       	std	Z+1, r1	; 0x01
     ee0:	10 82       	st	Z, r1
        xlist->index &= ~(((index_t)1)<<prio);
     ee2:	e9 81       	ldd	r30, Y+1	; 0x01
     ee4:	fa 81       	ldd	r31, Y+2	; 0x02
     ee6:	80 89       	ldd	r24, Z+16	; 0x10
     ee8:	48 2f       	mov	r20, r24
     eea:	8b 81       	ldd	r24, Y+3	; 0x03
     eec:	28 2f       	mov	r18, r24
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	02 2e       	mov	r0, r18
     ef6:	02 c0       	rjmp	.+4      	; 0xefc <gitem_fast_cut+0xb8>
     ef8:	88 0f       	add	r24, r24
     efa:	99 1f       	adc	r25, r25
     efc:	0a 94       	dec	r0
     efe:	e2 f7       	brpl	.-8      	; 0xef8 <gitem_fast_cut+0xb4>
     f00:	80 95       	com	r24
     f02:	84 23       	and	r24, r20
     f04:	e9 81       	ldd	r30, Y+1	; 0x01
     f06:	fa 81       	ldd	r31, Y+2	; 0x02
     f08:	80 8b       	std	Z+16, r24	; 0x10
     f0a:	1a c0       	rjmp	.+52     	; 0xf40 <gitem_fast_cut+0xfc>
    }
    else
    {
        // Нет, не является!
        // Является ли элемент головой своей части списка?
        if( xlist->item[(prio_t)prio] == (item_t *)gitem )
     f0c:	8b 81       	ldd	r24, Y+3	; 0x03
     f0e:	88 2f       	mov	r24, r24
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	29 81       	ldd	r18, Y+1	; 0x01
     f14:	3a 81       	ldd	r19, Y+2	; 0x02
     f16:	88 0f       	add	r24, r24
     f18:	99 1f       	adc	r25, r25
     f1a:	f9 01       	movw	r30, r18
     f1c:	e8 0f       	add	r30, r24
     f1e:	f9 1f       	adc	r31, r25
     f20:	20 81       	ld	r18, Z
     f22:	31 81       	ldd	r19, Z+1	; 0x01
     f24:	8c 81       	ldd	r24, Y+4	; 0x04
     f26:	9d 81       	ldd	r25, Y+5	; 0x05
     f28:	28 17       	cp	r18, r24
     f2a:	39 07       	cpc	r19, r25
     f2c:	29 f4       	brne	.+10     	; 0xf38 <gitem_fast_cut+0xf4>
        {
            // Является, список надо переключить
            xlist_switch( xlist, prio );
     f2e:	89 81       	ldd	r24, Y+1	; 0x01
     f30:	9a 81       	ldd	r25, Y+2	; 0x02
     f32:	6b 81       	ldd	r22, Y+3	; 0x03
     f34:	0e 94 14 11 	call	0x2228	; 0x2228 <xlist_switch>
        }
        // Собственно - вырезаем элемент
        item_cut( (item_t *)gitem );
     f38:	8c 81       	ldd	r24, Y+4	; 0x04
     f3a:	9d 81       	ldd	r25, Y+5	; 0x05
     f3c:	0e 94 55 09 	call	0x12aa	; 0x12aa <item_cut>
    }
}
     f40:	0f 90       	pop	r0
     f42:	0f 90       	pop	r0
     f44:	0f 90       	pop	r0
     f46:	0f 90       	pop	r0
     f48:	0f 90       	pop	r0
     f4a:	cf 91       	pop	r28
     f4c:	df 91       	pop	r29
     f4e:	08 95       	ret

00000f50 <gitem_cut>:
// Вырезать из списка
void gitem_cut(gitem_t * gitem)
{
     f50:	df 93       	push	r29
     f52:	cf 93       	push	r28
     f54:	00 d0       	rcall	.+0      	; 0xf56 <gitem_cut+0x6>
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62
     f5a:	9a 83       	std	Y+2, r25	; 0x02
     f5c:	89 83       	std	Y+1, r24	; 0x01
    gitem_fast_cut( gitem );
     f5e:	89 81       	ldd	r24, Y+1	; 0x01
     f60:	9a 81       	ldd	r25, Y+2	; 0x02
     f62:	0e 94 22 07 	call	0xe44	; 0xe44 <gitem_fast_cut>
    gitem->group->link = (void *)0;
     f66:	e9 81       	ldd	r30, Y+1	; 0x01
     f68:	fa 81       	ldd	r31, Y+2	; 0x02
     f6a:	04 80       	ldd	r0, Z+4	; 0x04
     f6c:	f5 81       	ldd	r31, Z+5	; 0x05
     f6e:	e0 2d       	mov	r30, r0
     f70:	11 82       	std	Z+1, r1	; 0x01
     f72:	10 82       	st	Z, r1
}
     f74:	0f 90       	pop	r0
     f76:	0f 90       	pop	r0
     f78:	cf 91       	pop	r28
     f7a:	df 91       	pop	r29
     f7c:	08 95       	ret

00000f7e <gitem_xlist_merge>:
 1) Оба списка содержат только объекты типа gitem_t
 2) В списке source на каждом уровне приоритета все объекты типа gitem_t приенадлежат к одной группе.
 3) Элементы списка source, находящиеся на разных уровнях приоритета, пренадлежат разным группам.
*/
void gitem_xlist_merge(xlist_t * source, xlist_t * destignation)
{
     f7e:	df 93       	push	r29
     f80:	cf 93       	push	r28
     f82:	cd b7       	in	r28, 0x3d	; 61
     f84:	de b7       	in	r29, 0x3e	; 62
     f86:	2c 97       	sbiw	r28, 0x0c	; 12
     f88:	0f b6       	in	r0, 0x3f	; 63
     f8a:	f8 94       	cli
     f8c:	de bf       	out	0x3e, r29	; 62
     f8e:	0f be       	out	0x3f, r0	; 63
     f90:	cd bf       	out	0x3d, r28	; 61
     f92:	9a 87       	std	Y+10, r25	; 0x0a
     f94:	89 87       	std	Y+9, r24	; 0x09
     f96:	7c 87       	std	Y+12, r23	; 0x0c
     f98:	6b 87       	std	Y+11, r22	; 0x0b
    index_t mask = (index_t)1;
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	88 87       	std	Y+8, r24	; 0x08
    prio_t current_prio = (prio_t)0;
     f9e:	1f 82       	std	Y+7, r1	; 0x07
     fa0:	9a c0       	rjmp	.+308    	; 0x10d6 <gitem_xlist_merge+0x158>
    while( mask )
    {
        // Есть че перенести?
        if( mask & source->index )
     fa2:	e9 85       	ldd	r30, Y+9	; 0x09
     fa4:	fa 85       	ldd	r31, Y+10	; 0x0a
     fa6:	90 89       	ldd	r25, Z+16	; 0x10
     fa8:	88 85       	ldd	r24, Y+8	; 0x08
     faa:	89 23       	and	r24, r25
     fac:	88 23       	and	r24, r24
     fae:	09 f4       	brne	.+2      	; 0xfb2 <gitem_xlist_merge+0x34>
     fb0:	8c c0       	rjmp	.+280    	; 0x10ca <gitem_xlist_merge+0x14c>
        {
            // Есть!
            // Есть куда переносить?
            if( mask & destignation->index )
     fb2:	eb 85       	ldd	r30, Y+11	; 0x0b
     fb4:	fc 85       	ldd	r31, Y+12	; 0x0c
     fb6:	90 89       	ldd	r25, Z+16	; 0x10
     fb8:	88 85       	ldd	r24, Y+8	; 0x08
     fba:	89 23       	and	r24, r25
     fbc:	88 23       	and	r24, r24
     fbe:	09 f4       	brne	.+2      	; 0xfc2 <gitem_xlist_merge+0x44>
     fc0:	43 c0       	rjmp	.+134    	; 0x1048 <gitem_xlist_merge+0xca>
            {
                //Есть!
                // Сшиваем 2 2-связных списка!!!
                item_t * src = source->item[current_prio];
     fc2:	8f 81       	ldd	r24, Y+7	; 0x07
     fc4:	88 2f       	mov	r24, r24
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	29 85       	ldd	r18, Y+9	; 0x09
     fca:	3a 85       	ldd	r19, Y+10	; 0x0a
     fcc:	88 0f       	add	r24, r24
     fce:	99 1f       	adc	r25, r25
     fd0:	f9 01       	movw	r30, r18
     fd2:	e8 0f       	add	r30, r24
     fd4:	f9 1f       	adc	r31, r25
     fd6:	80 81       	ld	r24, Z
     fd8:	91 81       	ldd	r25, Z+1	; 0x01
     fda:	9e 83       	std	Y+6, r25	; 0x06
     fdc:	8d 83       	std	Y+5, r24	; 0x05
                item_t * dst = destignation->item[current_prio];
     fde:	8f 81       	ldd	r24, Y+7	; 0x07
     fe0:	88 2f       	mov	r24, r24
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	2b 85       	ldd	r18, Y+11	; 0x0b
     fe6:	3c 85       	ldd	r19, Y+12	; 0x0c
     fe8:	88 0f       	add	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	f9 01       	movw	r30, r18
     fee:	e8 0f       	add	r30, r24
     ff0:	f9 1f       	adc	r31, r25
     ff2:	80 81       	ld	r24, Z
     ff4:	91 81       	ldd	r25, Z+1	; 0x01
     ff6:	9c 83       	std	Y+4, r25	; 0x04
     ff8:	8b 83       	std	Y+3, r24	; 0x03
                src->prev->next = dst;
     ffa:	ed 81       	ldd	r30, Y+5	; 0x05
     ffc:	fe 81       	ldd	r31, Y+6	; 0x06
     ffe:	02 80       	ldd	r0, Z+2	; 0x02
    1000:	f3 81       	ldd	r31, Z+3	; 0x03
    1002:	e0 2d       	mov	r30, r0
    1004:	8b 81       	ldd	r24, Y+3	; 0x03
    1006:	9c 81       	ldd	r25, Y+4	; 0x04
    1008:	91 83       	std	Z+1, r25	; 0x01
    100a:	80 83       	st	Z, r24
                dst->prev->next = src;
    100c:	eb 81       	ldd	r30, Y+3	; 0x03
    100e:	fc 81       	ldd	r31, Y+4	; 0x04
    1010:	02 80       	ldd	r0, Z+2	; 0x02
    1012:	f3 81       	ldd	r31, Z+3	; 0x03
    1014:	e0 2d       	mov	r30, r0
    1016:	8d 81       	ldd	r24, Y+5	; 0x05
    1018:	9e 81       	ldd	r25, Y+6	; 0x06
    101a:	91 83       	std	Z+1, r25	; 0x01
    101c:	80 83       	st	Z, r24
                item_t * buf = dst->prev;
    101e:	eb 81       	ldd	r30, Y+3	; 0x03
    1020:	fc 81       	ldd	r31, Y+4	; 0x04
    1022:	82 81       	ldd	r24, Z+2	; 0x02
    1024:	93 81       	ldd	r25, Z+3	; 0x03
    1026:	9a 83       	std	Y+2, r25	; 0x02
    1028:	89 83       	std	Y+1, r24	; 0x01
                dst->prev = src->prev;
    102a:	ed 81       	ldd	r30, Y+5	; 0x05
    102c:	fe 81       	ldd	r31, Y+6	; 0x06
    102e:	82 81       	ldd	r24, Z+2	; 0x02
    1030:	93 81       	ldd	r25, Z+3	; 0x03
    1032:	eb 81       	ldd	r30, Y+3	; 0x03
    1034:	fc 81       	ldd	r31, Y+4	; 0x04
    1036:	93 83       	std	Z+3, r25	; 0x03
    1038:	82 83       	std	Z+2, r24	; 0x02
                src->prev = buf;
    103a:	ed 81       	ldd	r30, Y+5	; 0x05
    103c:	fe 81       	ldd	r31, Y+6	; 0x06
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	9a 81       	ldd	r25, Y+2	; 0x02
    1042:	93 83       	std	Z+3, r25	; 0x03
    1044:	82 83       	std	Z+2, r24	; 0x02
    1046:	21 c0       	rjmp	.+66     	; 0x108a <gitem_xlist_merge+0x10c>
            }
            else
            {
                //Нет, тупо переносим всю группу.
                destignation->item[current_prio] = source->item[current_prio];
    1048:	8f 81       	ldd	r24, Y+7	; 0x07
    104a:	68 2f       	mov	r22, r24
    104c:	70 e0       	ldi	r23, 0x00	; 0
    104e:	8f 81       	ldd	r24, Y+7	; 0x07
    1050:	88 2f       	mov	r24, r24
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	29 85       	ldd	r18, Y+9	; 0x09
    1056:	3a 85       	ldd	r19, Y+10	; 0x0a
    1058:	88 0f       	add	r24, r24
    105a:	99 1f       	adc	r25, r25
    105c:	f9 01       	movw	r30, r18
    105e:	e8 0f       	add	r30, r24
    1060:	f9 1f       	adc	r31, r25
    1062:	40 81       	ld	r20, Z
    1064:	51 81       	ldd	r21, Z+1	; 0x01
    1066:	2b 85       	ldd	r18, Y+11	; 0x0b
    1068:	3c 85       	ldd	r19, Y+12	; 0x0c
    106a:	cb 01       	movw	r24, r22
    106c:	88 0f       	add	r24, r24
    106e:	99 1f       	adc	r25, r25
    1070:	f9 01       	movw	r30, r18
    1072:	e8 0f       	add	r30, r24
    1074:	f9 1f       	adc	r31, r25
    1076:	51 83       	std	Z+1, r21	; 0x01
    1078:	40 83       	st	Z, r20
                destignation->index |= mask;
    107a:	eb 85       	ldd	r30, Y+11	; 0x0b
    107c:	fc 85       	ldd	r31, Y+12	; 0x0c
    107e:	90 89       	ldd	r25, Z+16	; 0x10
    1080:	88 85       	ldd	r24, Y+8	; 0x08
    1082:	89 2b       	or	r24, r25
    1084:	eb 85       	ldd	r30, Y+11	; 0x0b
    1086:	fc 85       	ldd	r31, Y+12	; 0x0c
    1088:	80 8b       	std	Z+16, r24	; 0x10
            }
            // Вот почему эта функция отнесена к методам gitem_t
            ((gitem_t *)source->item[current_prio])->group->link = (void *)destignation;
    108a:	8f 81       	ldd	r24, Y+7	; 0x07
    108c:	88 2f       	mov	r24, r24
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	29 85       	ldd	r18, Y+9	; 0x09
    1092:	3a 85       	ldd	r19, Y+10	; 0x0a
    1094:	88 0f       	add	r24, r24
    1096:	99 1f       	adc	r25, r25
    1098:	f9 01       	movw	r30, r18
    109a:	e8 0f       	add	r30, r24
    109c:	f9 1f       	adc	r31, r25
    109e:	80 81       	ld	r24, Z
    10a0:	91 81       	ldd	r25, Z+1	; 0x01
    10a2:	fc 01       	movw	r30, r24
    10a4:	04 80       	ldd	r0, Z+4	; 0x04
    10a6:	f5 81       	ldd	r31, Z+5	; 0x05
    10a8:	e0 2d       	mov	r30, r0
    10aa:	8b 85       	ldd	r24, Y+11	; 0x0b
    10ac:	9c 85       	ldd	r25, Y+12	; 0x0c
    10ae:	91 83       	std	Z+1, r25	; 0x01
    10b0:	80 83       	st	Z, r24
            // Перенос закончен, обнуляем указатель
            source->item[(prio_t)current_prio] = (item_t *)0;
    10b2:	8f 81       	ldd	r24, Y+7	; 0x07
    10b4:	88 2f       	mov	r24, r24
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	29 85       	ldd	r18, Y+9	; 0x09
    10ba:	3a 85       	ldd	r19, Y+10	; 0x0a
    10bc:	88 0f       	add	r24, r24
    10be:	99 1f       	adc	r25, r25
    10c0:	f9 01       	movw	r30, r18
    10c2:	e8 0f       	add	r30, r24
    10c4:	f9 1f       	adc	r31, r25
    10c6:	11 82       	std	Z+1, r1	; 0x01
    10c8:	10 82       	st	Z, r1
        }
        mask<<=1;
    10ca:	88 85       	ldd	r24, Y+8	; 0x08
    10cc:	88 0f       	add	r24, r24
    10ce:	88 87       	std	Y+8, r24	; 0x08
        current_prio++;
    10d0:	8f 81       	ldd	r24, Y+7	; 0x07
    10d2:	8f 5f       	subi	r24, 0xFF	; 255
    10d4:	8f 83       	std	Y+7, r24	; 0x07
*/
void gitem_xlist_merge(xlist_t * source, xlist_t * destignation)
{
    index_t mask = (index_t)1;
    prio_t current_prio = (prio_t)0;
    while( mask )
    10d6:	88 85       	ldd	r24, Y+8	; 0x08
    10d8:	88 23       	and	r24, r24
    10da:	09 f0       	breq	.+2      	; 0x10de <gitem_xlist_merge+0x160>
    10dc:	62 cf       	rjmp	.-316    	; 0xfa2 <gitem_xlist_merge+0x24>
        }
        mask<<=1;
        current_prio++;
    }
    // Список полностью перенесен, обнуляем индекс
    source->index = (index_t)0;
    10de:	e9 85       	ldd	r30, Y+9	; 0x09
    10e0:	fa 85       	ldd	r31, Y+10	; 0x0a
    10e2:	10 8a       	std	Z+16, r1	; 0x10
}
    10e4:	2c 96       	adiw	r28, 0x0c	; 12
    10e6:	0f b6       	in	r0, 0x3f	; 63
    10e8:	f8 94       	cli
    10ea:	de bf       	out	0x3e, r29	; 62
    10ec:	0f be       	out	0x3f, r0	; 63
    10ee:	cd bf       	out	0x3d, r28	; 61
    10f0:	cf 91       	pop	r28
    10f2:	df 91       	pop	r29
    10f4:	08 95       	ret

000010f6 <group_init>:
*****************************************************************************************/
#include "../include/bugurt.h"
//Методы group_t
// инициация
void group_init(group_t * group, prio_t prio)
{
    10f6:	df 93       	push	r29
    10f8:	cf 93       	push	r28
    10fa:	00 d0       	rcall	.+0      	; 0x10fc <group_init+0x6>
    10fc:	0f 92       	push	r0
    10fe:	cd b7       	in	r28, 0x3d	; 61
    1100:	de b7       	in	r29, 0x3e	; 62
    1102:	9a 83       	std	Y+2, r25	; 0x02
    1104:	89 83       	std	Y+1, r24	; 0x01
    1106:	6b 83       	std	Y+3, r22	; 0x03
    group->link = (void *)0;
    1108:	e9 81       	ldd	r30, Y+1	; 0x01
    110a:	fa 81       	ldd	r31, Y+2	; 0x02
    110c:	11 82       	std	Z+1, r1	; 0x01
    110e:	10 82       	st	Z, r1
    group->prio = prio;
    1110:	e9 81       	ldd	r30, Y+1	; 0x01
    1112:	fa 81       	ldd	r31, Y+2	; 0x02
    1114:	8b 81       	ldd	r24, Y+3	; 0x03
    1116:	82 83       	std	Z+2, r24	; 0x02
    // группа - часть gitem_t, количество элементов - 1
    group->el_num = (count_t)1;
    1118:	e9 81       	ldd	r30, Y+1	; 0x01
    111a:	fa 81       	ldd	r31, Y+2	; 0x02
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	94 83       	std	Z+4, r25	; 0x04
    1122:	83 83       	std	Z+3, r24	; 0x03
}
    1124:	0f 90       	pop	r0
    1126:	0f 90       	pop	r0
    1128:	0f 90       	pop	r0
    112a:	cf 91       	pop	r28
    112c:	df 91       	pop	r29
    112e:	08 95       	ret

00001130 <group_push>:
// положить в ПУЛ
void group_push(group_t * group)
{
    1130:	df 93       	push	r29
    1132:	cf 93       	push	r28
    1134:	00 d0       	rcall	.+0      	; 0x1136 <group_push+0x6>
    1136:	cd b7       	in	r28, 0x3d	; 61
    1138:	de b7       	in	r29, 0x3e	; 62
    113a:	9a 83       	std	Y+2, r25	; 0x02
    113c:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    // блокируем пул
    spin_lock( &kernel.pool_lock );
#endif
    group->link = (void *)kernel.pool;
    113e:	80 91 f6 01 	lds	r24, 0x01F6
    1142:	90 91 f7 01 	lds	r25, 0x01F7
    1146:	e9 81       	ldd	r30, Y+1	; 0x01
    1148:	fa 81       	ldd	r31, Y+2	; 0x02
    114a:	91 83       	std	Z+1, r25	; 0x01
    114c:	80 83       	st	Z, r24
    kernel.pool = group;
    114e:	89 81       	ldd	r24, Y+1	; 0x01
    1150:	9a 81       	ldd	r25, Y+2	; 0x02
    1152:	90 93 f7 01 	sts	0x01F7, r25
    1156:	80 93 f6 01 	sts	0x01F6, r24
#ifdef CONFIG_MP
    // разблокируем пул
    spin_unlock( &kernel.pool_lock );
#endif
}
    115a:	0f 90       	pop	r0
    115c:	0f 90       	pop	r0
    115e:	cf 91       	pop	r28
    1160:	df 91       	pop	r29
    1162:	08 95       	ret

00001164 <group_pop>:
// взять из пула, если есть, а есть всегда, избыточность же!
group_t * group_pop(void)
{
    1164:	df 93       	push	r29
    1166:	cf 93       	push	r28
    1168:	00 d0       	rcall	.+0      	; 0x116a <group_pop+0x6>
    116a:	cd b7       	in	r28, 0x3d	; 61
    116c:	de b7       	in	r29, 0x3e	; 62
#ifdef CONFIG_MP
    // блокируем пул
    spin_lock( &kernel.pool_lock );
#endif
    group_t * group = kernel.pool;
    116e:	80 91 f6 01 	lds	r24, 0x01F6
    1172:	90 91 f7 01 	lds	r25, 0x01F7
    1176:	9a 83       	std	Y+2, r25	; 0x02
    1178:	89 83       	std	Y+1, r24	; 0x01
    kernel.pool = (group_t *)group->link;
    117a:	e9 81       	ldd	r30, Y+1	; 0x01
    117c:	fa 81       	ldd	r31, Y+2	; 0x02
    117e:	80 81       	ld	r24, Z
    1180:	91 81       	ldd	r25, Z+1	; 0x01
    1182:	90 93 f7 01 	sts	0x01F7, r25
    1186:	80 93 f6 01 	sts	0x01F6, r24
#ifdef CONFIG_MP
    // разблокируем пул
    spin_unlock( &kernel.pool_lock );
#endif
    return group;
    118a:	89 81       	ldd	r24, Y+1	; 0x01
    118c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    118e:	0f 90       	pop	r0
    1190:	0f 90       	pop	r0
    1192:	cf 91       	pop	r28
    1194:	df 91       	pop	r29
    1196:	08 95       	ret

00001198 <index_search>:
*                           http://www.0chan.ru/r/res/9996.html                          *
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
prio_t index_search(index_t index)
{
    1198:	df 93       	push	r29
    119a:	cf 93       	push	r28
    119c:	00 d0       	rcall	.+0      	; 0x119e <index_search+0x6>
    119e:	00 d0       	rcall	.+0      	; 0x11a0 <index_search+0x8>
    11a0:	00 d0       	rcall	.+0      	; 0x11a2 <index_search+0xa>
    11a2:	cd b7       	in	r28, 0x3d	; 61
    11a4:	de b7       	in	r29, 0x3e	; 62
    11a6:	8e 83       	std	Y+6, r24	; 0x06
    prio_t prio = (prio_t)0;
    11a8:	1d 82       	std	Y+5, r1	; 0x05
        но, т.к. BITS_IN_INDEX_T фиксировано для данной конфигурации,
        то получается время выполнения - O(1), ВСЕГДА.

        И да, предсказуемость + переносимость > быстродействие.
        */
    index_t upper = ~(index_t)0, lower = ~(index_t)0, middle;
    11aa:	8f ef       	ldi	r24, 0xFF	; 255
    11ac:	8c 83       	std	Y+4, r24	; 0x04
    11ae:	8f ef       	ldi	r24, 0xFF	; 255
    11b0:	8b 83       	std	Y+3, r24	; 0x03
    prio_t step = (prio_t)BITS_IN_INDEX_T;
    11b2:	88 e0       	ldi	r24, 0x08	; 8
    11b4:	89 83       	std	Y+1, r24	; 0x01
    11b6:	22 c0       	rjmp	.+68     	; 0x11fc <index_search+0x64>
    while( step )
    {
        step>>=1; // делим шаг пополам
    11b8:	89 81       	ldd	r24, Y+1	; 0x01
    11ba:	86 95       	lsr	r24
    11bc:	89 83       	std	Y+1, r24	; 0x01
        middle = lower>>step;
    11be:	8b 81       	ldd	r24, Y+3	; 0x03
    11c0:	28 2f       	mov	r18, r24
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	89 81       	ldd	r24, Y+1	; 0x01
    11c6:	88 2f       	mov	r24, r24
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	a9 01       	movw	r20, r18
    11cc:	02 c0       	rjmp	.+4      	; 0x11d2 <index_search+0x3a>
    11ce:	55 95       	asr	r21
    11d0:	47 95       	ror	r20
    11d2:	8a 95       	dec	r24
    11d4:	e2 f7       	brpl	.-8      	; 0x11ce <index_search+0x36>
    11d6:	ca 01       	movw	r24, r20
    11d8:	8a 83       	std	Y+2, r24	; 0x02
        if( index & upper & middle )
    11da:	9e 81       	ldd	r25, Y+6	; 0x06
    11dc:	8c 81       	ldd	r24, Y+4	; 0x04
    11de:	98 23       	and	r25, r24
    11e0:	8a 81       	ldd	r24, Y+2	; 0x02
    11e2:	89 23       	and	r24, r25
    11e4:	88 23       	and	r24, r24
    11e6:	19 f0       	breq	.+6      	; 0x11ee <index_search+0x56>
        {
            lower = middle;
    11e8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ea:	8b 83       	std	Y+3, r24	; 0x03
    11ec:	07 c0       	rjmp	.+14     	; 0x11fc <index_search+0x64>
        }
        else
        {
            upper = ~middle;
    11ee:	8a 81       	ldd	r24, Y+2	; 0x02
    11f0:	80 95       	com	r24
    11f2:	8c 83       	std	Y+4, r24	; 0x04
            prio += step;
    11f4:	9d 81       	ldd	r25, Y+5	; 0x05
    11f6:	89 81       	ldd	r24, Y+1	; 0x01
    11f8:	89 0f       	add	r24, r25
    11fa:	8d 83       	std	Y+5, r24	; 0x05

        И да, предсказуемость + переносимость > быстродействие.
        */
    index_t upper = ~(index_t)0, lower = ~(index_t)0, middle;
    prio_t step = (prio_t)BITS_IN_INDEX_T;
    while( step )
    11fc:	89 81       	ldd	r24, Y+1	; 0x01
    11fe:	88 23       	and	r24, r24
    1200:	d9 f6       	brne	.-74     	; 0x11b8 <index_search+0x20>
        if ( mask & index )break;
        prio++;
        mask<<=1;
    }
#endif
    return prio;
    1202:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1204:	26 96       	adiw	r28, 0x06	; 6
    1206:	0f b6       	in	r0, 0x3f	; 63
    1208:	f8 94       	cli
    120a:	de bf       	out	0x3e, r29	; 62
    120c:	0f be       	out	0x3f, r0	; 63
    120e:	cd bf       	out	0x3d, r28	; 61
    1210:	cf 91       	pop	r28
    1212:	df 91       	pop	r29
    1214:	08 95       	ret

00001216 <item_init>:
*****************************************************************************************/
#include "../include/bugurt.h"
//Методы элемента 2-связного списка
//инициация элемента
void item_init(item_t *item)
{
    1216:	df 93       	push	r29
    1218:	cf 93       	push	r28
    121a:	00 d0       	rcall	.+0      	; 0x121c <item_init+0x6>
    121c:	cd b7       	in	r28, 0x3d	; 61
    121e:	de b7       	in	r29, 0x3e	; 62
    1220:	9a 83       	std	Y+2, r25	; 0x02
    1222:	89 83       	std	Y+1, r24	; 0x01
    item->prev = item;
    1224:	e9 81       	ldd	r30, Y+1	; 0x01
    1226:	fa 81       	ldd	r31, Y+2	; 0x02
    1228:	89 81       	ldd	r24, Y+1	; 0x01
    122a:	9a 81       	ldd	r25, Y+2	; 0x02
    122c:	93 83       	std	Z+3, r25	; 0x03
    122e:	82 83       	std	Z+2, r24	; 0x02
    item->next = item;
    1230:	e9 81       	ldd	r30, Y+1	; 0x01
    1232:	fa 81       	ldd	r31, Y+2	; 0x02
    1234:	89 81       	ldd	r24, Y+1	; 0x01
    1236:	9a 81       	ldd	r25, Y+2	; 0x02
    1238:	91 83       	std	Z+1, r25	; 0x01
    123a:	80 83       	st	Z, r24
}
    123c:	0f 90       	pop	r0
    123e:	0f 90       	pop	r0
    1240:	cf 91       	pop	r28
    1242:	df 91       	pop	r29
    1244:	08 95       	ret

00001246 <item_insert>:
//Вставить элемент
void item_insert(item_t *item, item_t *head)
{
    1246:	df 93       	push	r29
    1248:	cf 93       	push	r28
    124a:	00 d0       	rcall	.+0      	; 0x124c <item_insert+0x6>
    124c:	00 d0       	rcall	.+0      	; 0x124e <item_insert+0x8>
    124e:	00 d0       	rcall	.+0      	; 0x1250 <item_insert+0xa>
    1250:	cd b7       	in	r28, 0x3d	; 61
    1252:	de b7       	in	r29, 0x3e	; 62
    1254:	9c 83       	std	Y+4, r25	; 0x04
    1256:	8b 83       	std	Y+3, r24	; 0x03
    1258:	7e 83       	std	Y+6, r23	; 0x06
    125a:	6d 83       	std	Y+5, r22	; 0x05
    // "хвост" списка
    item_t * tail = head->prev;
    125c:	ed 81       	ldd	r30, Y+5	; 0x05
    125e:	fe 81       	ldd	r31, Y+6	; 0x06
    1260:	82 81       	ldd	r24, Z+2	; 0x02
    1262:	93 81       	ldd	r25, Z+3	; 0x03
    1264:	9a 83       	std	Y+2, r25	; 0x02
    1266:	89 83       	std	Y+1, r24	; 0x01

    // Вставляем элемент между "головой" и "хвостом"
    item->prev = tail;
    1268:	eb 81       	ldd	r30, Y+3	; 0x03
    126a:	fc 81       	ldd	r31, Y+4	; 0x04
    126c:	89 81       	ldd	r24, Y+1	; 0x01
    126e:	9a 81       	ldd	r25, Y+2	; 0x02
    1270:	93 83       	std	Z+3, r25	; 0x03
    1272:	82 83       	std	Z+2, r24	; 0x02
    item->next = head;
    1274:	eb 81       	ldd	r30, Y+3	; 0x03
    1276:	fc 81       	ldd	r31, Y+4	; 0x04
    1278:	8d 81       	ldd	r24, Y+5	; 0x05
    127a:	9e 81       	ldd	r25, Y+6	; 0x06
    127c:	91 83       	std	Z+1, r25	; 0x01
    127e:	80 83       	st	Z, r24

    head->prev = item;
    1280:	ed 81       	ldd	r30, Y+5	; 0x05
    1282:	fe 81       	ldd	r31, Y+6	; 0x06
    1284:	8b 81       	ldd	r24, Y+3	; 0x03
    1286:	9c 81       	ldd	r25, Y+4	; 0x04
    1288:	93 83       	std	Z+3, r25	; 0x03
    128a:	82 83       	std	Z+2, r24	; 0x02
    tail->next = item;
    128c:	e9 81       	ldd	r30, Y+1	; 0x01
    128e:	fa 81       	ldd	r31, Y+2	; 0x02
    1290:	8b 81       	ldd	r24, Y+3	; 0x03
    1292:	9c 81       	ldd	r25, Y+4	; 0x04
    1294:	91 83       	std	Z+1, r25	; 0x01
    1296:	80 83       	st	Z, r24
}
    1298:	26 96       	adiw	r28, 0x06	; 6
    129a:	0f b6       	in	r0, 0x3f	; 63
    129c:	f8 94       	cli
    129e:	de bf       	out	0x3e, r29	; 62
    12a0:	0f be       	out	0x3f, r0	; 63
    12a2:	cd bf       	out	0x3d, r28	; 61
    12a4:	cf 91       	pop	r28
    12a6:	df 91       	pop	r29
    12a8:	08 95       	ret

000012aa <item_cut>:
//Вырезать элемент
void item_cut( item_t *item )
{
    12aa:	df 93       	push	r29
    12ac:	cf 93       	push	r28
    12ae:	00 d0       	rcall	.+0      	; 0x12b0 <item_cut+0x6>
    12b0:	00 d0       	rcall	.+0      	; 0x12b2 <item_cut+0x8>
    12b2:	00 d0       	rcall	.+0      	; 0x12b4 <item_cut+0xa>
    12b4:	cd b7       	in	r28, 0x3d	; 61
    12b6:	de b7       	in	r29, 0x3e	; 62
    12b8:	9e 83       	std	Y+6, r25	; 0x06
    12ba:	8d 83       	std	Y+5, r24	; 0x05
    item_t * prev = item->prev; //Предыдущий элемент
    12bc:	ed 81       	ldd	r30, Y+5	; 0x05
    12be:	fe 81       	ldd	r31, Y+6	; 0x06
    12c0:	82 81       	ldd	r24, Z+2	; 0x02
    12c2:	93 81       	ldd	r25, Z+3	; 0x03
    12c4:	9c 83       	std	Y+4, r25	; 0x04
    12c6:	8b 83       	std	Y+3, r24	; 0x03
    item_t * next = item->next; //Следующий элемент
    12c8:	ed 81       	ldd	r30, Y+5	; 0x05
    12ca:	fe 81       	ldd	r31, Y+6	; 0x06
    12cc:	80 81       	ld	r24, Z
    12ce:	91 81       	ldd	r25, Z+1	; 0x01
    12d0:	9a 83       	std	Y+2, r25	; 0x02
    12d2:	89 83       	std	Y+1, r24	; 0x01

    next->prev = prev;
    12d4:	e9 81       	ldd	r30, Y+1	; 0x01
    12d6:	fa 81       	ldd	r31, Y+2	; 0x02
    12d8:	8b 81       	ldd	r24, Y+3	; 0x03
    12da:	9c 81       	ldd	r25, Y+4	; 0x04
    12dc:	93 83       	std	Z+3, r25	; 0x03
    12de:	82 83       	std	Z+2, r24	; 0x02
    prev->next = next;
    12e0:	eb 81       	ldd	r30, Y+3	; 0x03
    12e2:	fc 81       	ldd	r31, Y+4	; 0x04
    12e4:	89 81       	ldd	r24, Y+1	; 0x01
    12e6:	9a 81       	ldd	r25, Y+2	; 0x02
    12e8:	91 83       	std	Z+1, r25	; 0x01
    12ea:	80 83       	st	Z, r24

    item->prev = item;
    12ec:	ed 81       	ldd	r30, Y+5	; 0x05
    12ee:	fe 81       	ldd	r31, Y+6	; 0x06
    12f0:	8d 81       	ldd	r24, Y+5	; 0x05
    12f2:	9e 81       	ldd	r25, Y+6	; 0x06
    12f4:	93 83       	std	Z+3, r25	; 0x03
    12f6:	82 83       	std	Z+2, r24	; 0x02
    item->next = item;
    12f8:	ed 81       	ldd	r30, Y+5	; 0x05
    12fa:	fe 81       	ldd	r31, Y+6	; 0x06
    12fc:	8d 81       	ldd	r24, Y+5	; 0x05
    12fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1300:	91 83       	std	Z+1, r25	; 0x01
    1302:	80 83       	st	Z, r24
}
    1304:	26 96       	adiw	r28, 0x06	; 6
    1306:	0f b6       	in	r0, 0x3f	; 63
    1308:	f8 94       	cli
    130a:	de bf       	out	0x3e, r29	; 62
    130c:	0f be       	out	0x3f, r0	; 63
    130e:	cd bf       	out	0x3d, r28	; 61
    1310:	cf 91       	pop	r28
    1312:	df 91       	pop	r29
    1314:	08 95       	ret

00001316 <kernel_init>:
{
    while(1);
}

void kernel_init(void)
{
    1316:	8f 92       	push	r8
    1318:	af 92       	push	r10
    131a:	bf 92       	push	r11
    131c:	cf 92       	push	r12
    131e:	ef 92       	push	r14
    1320:	ff 92       	push	r15
    1322:	0f 93       	push	r16
    1324:	1f 93       	push	r17
    1326:	df 93       	push	r29
    1328:	cf 93       	push	r28
    132a:	cd b7       	in	r28, 0x3d	; 61
    132c:	de b7       	in	r29, 0x3e	; 62
        stat_init( (stat_t *)kernel.stat + i );
        sched_init( (sched_t *)kernel.sched + i, (proc_t *)kernel.idle + i );
    }
    spin_unlock( &kernel.stat_lock );
#else
    proc_init_isr(
    132e:	88 ec       	ldi	r24, 0xC8	; 200
    1330:	91 e0       	ldi	r25, 0x01	; 1
    1332:	27 e2       	ldi	r18, 0x27	; 39
    1334:	32 e1       	ldi	r19, 0x12	; 18
    1336:	b9 01       	movw	r22, r18
    1338:	40 e0       	ldi	r20, 0x00	; 0
    133a:	50 e0       	ldi	r21, 0x00	; 0
    133c:	20 e0       	ldi	r18, 0x00	; 0
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	00 e0       	ldi	r16, 0x00	; 0
    1342:	10 e0       	ldi	r17, 0x00	; 0
    1344:	ee 24       	eor	r14, r14
    1346:	ff 24       	eor	r15, r15
    1348:	0f 2e       	mov	r0, r31
    134a:	f7 e0       	ldi	r31, 0x07	; 7
    134c:	cf 2e       	mov	r12, r31
    134e:	f0 2d       	mov	r31, r0
    1350:	aa 24       	eor	r10, r10
    1352:	bb 24       	eor	r11, r11
    1354:	a3 94       	inc	r10
    1356:	88 24       	eor	r8, r8
    1358:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <proc_init_isr>
        0, // это не важно, при первой же смене контекста будет сохранен текущий указатель стека
        ((prio_t)BITS_IN_INDEX_T - (prio_t)1),// низший приоритет
        (timer_t)1,//минимальный квант времени
        (bool_t)0// не RT
    );
    sched_init( (sched_t *)&kernel.sched, (proc_t *)&kernel.idle );
    135c:	8e e9       	ldi	r24, 0x9E	; 158
    135e:	91 e0       	ldi	r25, 0x01	; 1
    1360:	28 ec       	ldi	r18, 0xC8	; 200
    1362:	31 e0       	ldi	r19, 0x01	; 1
    1364:	b9 01       	movw	r22, r18
    1366:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <sched_init>
#endif // CONFIG_MP
}
    136a:	cf 91       	pop	r28
    136c:	df 91       	pop	r29
    136e:	1f 91       	pop	r17
    1370:	0f 91       	pop	r16
    1372:	ff 90       	pop	r15
    1374:	ef 90       	pop	r14
    1376:	cf 90       	pop	r12
    1378:	bf 90       	pop	r11
    137a:	af 90       	pop	r10
    137c:	8f 90       	pop	r8
    137e:	08 95       	ret

00001380 <mutex_init_isr>:
    mutex_t * mutex
#ifdef CONFIG_USE_HIGHEST_LOCKER
    ,prio_t prio
#endif // CONFIG_USE_HIGHEST_LOCKER
)
{
    1380:	df 93       	push	r29
    1382:	cf 93       	push	r28
    1384:	00 d0       	rcall	.+0      	; 0x1386 <mutex_init_isr+0x6>
    1386:	0f 92       	push	r0
    1388:	cd b7       	in	r28, 0x3d	; 61
    138a:	de b7       	in	r29, 0x3e	; 62
    138c:	9a 83       	std	Y+2, r25	; 0x02
    138e:	89 83       	std	Y+1, r24	; 0x01
    1390:	6b 83       	std	Y+3, r22	; 0x03
    xlist_init( (xlist_t *)mutex );
    1392:	89 81       	ldd	r24, Y+1	; 0x01
    1394:	9a 81       	ldd	r25, Y+2	; 0x02
    1396:	0e 94 be 10 	call	0x217c	; 0x217c <xlist_init>
    mutex->free = (bool_t)1;
    139a:	e9 81       	ldd	r30, Y+1	; 0x01
    139c:	fa 81       	ldd	r31, Y+2	; 0x02
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	82 8b       	std	Z+18, r24	; 0x12
#ifdef CONFIG_USE_HIGHEST_LOCKER
    mutex->prio = prio;
    13a2:	e9 81       	ldd	r30, Y+1	; 0x01
    13a4:	fa 81       	ldd	r31, Y+2	; 0x02
    13a6:	8b 81       	ldd	r24, Y+3	; 0x03
    13a8:	81 8b       	std	Z+17, r24	; 0x11
#endif // CONFIG_USE_HIGHEST_LOCKER
}
    13aa:	0f 90       	pop	r0
    13ac:	0f 90       	pop	r0
    13ae:	0f 90       	pop	r0
    13b0:	cf 91       	pop	r28
    13b2:	df 91       	pop	r29
    13b4:	08 95       	ret

000013b6 <_mutex_lock>:

// К моменту вызова захвачена блокировка mutex-а, запрещены прерывания
bool_t _mutex_lock( mutex_t * mutex )
{
    13b6:	df 93       	push	r29
    13b8:	cf 93       	push	r28
    13ba:	00 d0       	rcall	.+0      	; 0x13bc <_mutex_lock+0x6>
    13bc:	00 d0       	rcall	.+0      	; 0x13be <_mutex_lock+0x8>
    13be:	0f 92       	push	r0
    13c0:	cd b7       	in	r28, 0x3d	; 61
    13c2:	de b7       	in	r29, 0x3e	; 62
    13c4:	9d 83       	std	Y+5, r25	; 0x05
    13c6:	8c 83       	std	Y+4, r24	; 0x04
    bool_t ret = mutex->free;
    13c8:	ec 81       	ldd	r30, Y+4	; 0x04
    13ca:	fd 81       	ldd	r31, Y+5	; 0x05
    13cc:	82 89       	ldd	r24, Z+18	; 0x12
    13ce:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = current_proc();
    13d0:	0e 94 cc 00 	call	0x198	; 0x198 <current_proc>
    13d4:	9a 83       	std	Y+2, r25	; 0x02
    13d6:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
#ifdef CONFIG_USE_HIGHEST_LOCKER
    _proc_lres_inc( proc, mutex->prio );
    13d8:	ec 81       	ldd	r30, Y+4	; 0x04
    13da:	fd 81       	ldd	r31, Y+5	; 0x05
    13dc:	21 89       	ldd	r18, Z+17	; 0x11
    13de:	89 81       	ldd	r24, Y+1	; 0x01
    13e0:	9a 81       	ldd	r25, Y+2	; 0x02
    13e2:	62 2f       	mov	r22, r18
    13e4:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <_proc_lres_inc>
#else // CONFIG_USE_HIGHEST_LOCKER
    _proc_lres_inc( proc );
#endif // CONFIG_USE_HIGHEST_LOCKER
    if( ret )
    13e8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ea:	88 23       	and	r24, r24
    13ec:	41 f0       	breq	.+16     	; 0x13fe <_mutex_lock+0x48>
    {
        mutex->free = (bool_t)0;
    13ee:	ec 81       	ldd	r30, Y+4	; 0x04
    13f0:	fd 81       	ldd	r31, Y+5	; 0x05
    13f2:	12 8a       	std	Z+18, r1	; 0x12
#ifdef CONFIG_USE_HIGHEST_LOCKER
        // Меняем приоритет только здесь
        _proc_prio_control_running( proc );
    13f4:	89 81       	ldd	r24, Y+1	; 0x01
    13f6:	9a 81       	ldd	r25, Y+2	; 0x02
    13f8:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <_proc_prio_control_running>
    13fc:	1b c0       	rjmp	.+54     	; 0x1434 <_mutex_lock+0x7e>
#endif // CONFIG_USE_HIGHEST_LOCKER
    }
    else
    {
        proc->flags |= PROC_FLG_QUEUE;
    13fe:	e9 81       	ldd	r30, Y+1	; 0x01
    1400:	fa 81       	ldd	r31, Y+2	; 0x02
    1402:	83 85       	ldd	r24, Z+11	; 0x0b
    1404:	88 60       	ori	r24, 0x08	; 8
    1406:	e9 81       	ldd	r30, Y+1	; 0x01
    1408:	fa 81       	ldd	r31, Y+2	; 0x02
    140a:	83 87       	std	Z+11, r24	; 0x0b
        proc->flags &= ~PROC_FLG_RUN;
    140c:	e9 81       	ldd	r30, Y+1	; 0x01
    140e:	fa 81       	ldd	r31, Y+2	; 0x02
    1410:	83 85       	ldd	r24, Z+11	; 0x0b
    1412:	8d 7f       	andi	r24, 0xFD	; 253
    1414:	e9 81       	ldd	r30, Y+1	; 0x01
    1416:	fa 81       	ldd	r31, Y+2	; 0x02
    1418:	83 87       	std	Z+11, r24	; 0x0b
        _proc_stop_( proc );
    141a:	89 81       	ldd	r24, Y+1	; 0x01
    141c:	9a 81       	ldd	r25, Y+2	; 0x02
    141e:	0e 94 a8 07 	call	0xf50	; 0xf50 <gitem_cut>
        gitem_insert( (gitem_t *)proc, (xlist_t *)mutex );
    1422:	89 81       	ldd	r24, Y+1	; 0x01
    1424:	9a 81       	ldd	r25, Y+2	; 0x02
    1426:	2c 81       	ldd	r18, Y+4	; 0x04
    1428:	3d 81       	ldd	r19, Y+5	; 0x05
    142a:	b9 01       	movw	r22, r18
    142c:	0e 94 4b 06 	call	0xc96	; 0xc96 <gitem_insert>
        // Нужна перепланировка
#ifdef CONFIG_MP
        resched( proc->core_id );
#else
        resched();
    1430:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
#endif // CONFIG_MP
    }
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    return ret;
    1434:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1436:	0f 90       	pop	r0
    1438:	0f 90       	pop	r0
    143a:	0f 90       	pop	r0
    143c:	0f 90       	pop	r0
    143e:	0f 90       	pop	r0
    1440:	cf 91       	pop	r28
    1442:	df 91       	pop	r29
    1444:	08 95       	ret

00001446 <_mutex_try_lock>:

bool_t _mutex_try_lock( mutex_t * mutex )
{
    1446:	df 93       	push	r29
    1448:	cf 93       	push	r28
    144a:	00 d0       	rcall	.+0      	; 0x144c <_mutex_try_lock+0x6>
    144c:	00 d0       	rcall	.+0      	; 0x144e <_mutex_try_lock+0x8>
    144e:	0f 92       	push	r0
    1450:	cd b7       	in	r28, 0x3d	; 61
    1452:	de b7       	in	r29, 0x3e	; 62
    1454:	9d 83       	std	Y+5, r25	; 0x05
    1456:	8c 83       	std	Y+4, r24	; 0x04
    bool_t ret = mutex->free;
    1458:	ec 81       	ldd	r30, Y+4	; 0x04
    145a:	fd 81       	ldd	r31, Y+5	; 0x05
    145c:	82 89       	ldd	r24, Z+18	; 0x12
    145e:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = current_proc();
    1460:	0e 94 cc 00 	call	0x198	; 0x198 <current_proc>
    1464:	9a 83       	std	Y+2, r25	; 0x02
    1466:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    if( ret )
    1468:	8b 81       	ldd	r24, Y+3	; 0x03
    146a:	88 23       	and	r24, r24
    146c:	79 f0       	breq	.+30     	; 0x148c <_mutex_try_lock+0x46>
    {
        mutex->free = (bool_t)0;
    146e:	ec 81       	ldd	r30, Y+4	; 0x04
    1470:	fd 81       	ldd	r31, Y+5	; 0x05
    1472:	12 8a       	std	Z+18, r1	; 0x12
#ifdef CONFIG_USE_HIGHEST_LOCKER
        _proc_lres_inc( proc, mutex->prio );
    1474:	ec 81       	ldd	r30, Y+4	; 0x04
    1476:	fd 81       	ldd	r31, Y+5	; 0x05
    1478:	21 89       	ldd	r18, Z+17	; 0x11
    147a:	89 81       	ldd	r24, Y+1	; 0x01
    147c:	9a 81       	ldd	r25, Y+2	; 0x02
    147e:	62 2f       	mov	r22, r18
    1480:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <_proc_lres_inc>
        _proc_prio_control_running( proc );
    1484:	89 81       	ldd	r24, Y+1	; 0x01
    1486:	9a 81       	ldd	r25, Y+2	; 0x02
    1488:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <_proc_prio_control_running>
#endif // CONFIG_USE_HIGHEST_LOCKER
    }
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    return ret;
    148c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    148e:	0f 90       	pop	r0
    1490:	0f 90       	pop	r0
    1492:	0f 90       	pop	r0
    1494:	0f 90       	pop	r0
    1496:	0f 90       	pop	r0
    1498:	cf 91       	pop	r28
    149a:	df 91       	pop	r29
    149c:	08 95       	ret

0000149e <_mutex_unlock>:

void _mutex_unlock( mutex_t *  mutex )
{
    149e:	df 93       	push	r29
    14a0:	cf 93       	push	r28
    14a2:	00 d0       	rcall	.+0      	; 0x14a4 <_mutex_unlock+0x6>
    14a4:	00 d0       	rcall	.+0      	; 0x14a6 <_mutex_unlock+0x8>
    14a6:	cd b7       	in	r28, 0x3d	; 61
    14a8:	de b7       	in	r29, 0x3e	; 62
    14aa:	9c 83       	std	Y+4, r25	; 0x04
    14ac:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = current_proc();
    14ae:	0e 94 cc 00 	call	0x198	; 0x198 <current_proc>
    14b2:	9a 83       	std	Y+2, r25	; 0x02
    14b4:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
#ifdef CONFIG_USE_HIGHEST_LOCKER

    _proc_lres_dec( proc, mutex->prio );
    14b6:	eb 81       	ldd	r30, Y+3	; 0x03
    14b8:	fc 81       	ldd	r31, Y+4	; 0x04
    14ba:	21 89       	ldd	r18, Z+17	; 0x11
    14bc:	89 81       	ldd	r24, Y+1	; 0x01
    14be:	9a 81       	ldd	r25, Y+2	; 0x02
    14c0:	62 2f       	mov	r22, r18
    14c2:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <_proc_lres_dec>
    // Если проготовлен и готов к остановке - останавливаем
    if(  ( proc->flags & PROC_FLG_PRE_END ) && (!(proc->flags & PROC_FLG_HOLD))  )
    14c6:	e9 81       	ldd	r30, Y+1	; 0x01
    14c8:	fa 81       	ldd	r31, Y+2	; 0x02
    14ca:	83 85       	ldd	r24, Z+11	; 0x0b
    14cc:	88 2f       	mov	r24, r24
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	80 72       	andi	r24, 0x20	; 32
    14d2:	90 70       	andi	r25, 0x00	; 0
    14d4:	00 97       	sbiw	r24, 0x00	; 0
    14d6:	a1 f0       	breq	.+40     	; 0x1500 <_mutex_unlock+0x62>
    14d8:	e9 81       	ldd	r30, Y+1	; 0x01
    14da:	fa 81       	ldd	r31, Y+2	; 0x02
    14dc:	83 85       	ldd	r24, Z+11	; 0x0b
    14de:	88 2f       	mov	r24, r24
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	84 70       	andi	r24, 0x04	; 4
    14e4:	90 70       	andi	r25, 0x00	; 0
    14e6:	00 97       	sbiw	r24, 0x00	; 0
    14e8:	59 f4       	brne	.+22     	; 0x1500 <_mutex_unlock+0x62>
    {
        _proc_stop_( proc );
    14ea:	89 81       	ldd	r24, Y+1	; 0x01
    14ec:	9a 81       	ldd	r25, Y+2	; 0x02
    14ee:	0e 94 a8 07 	call	0xf50	; 0xf50 <gitem_cut>
        _proc_prio_control_stoped( proc );
    14f2:	89 81       	ldd	r24, Y+1	; 0x01
    14f4:	9a 81       	ldd	r25, Y+2	; 0x02
    14f6:	0e 94 56 0d 	call	0x1aac	; 0x1aac <_proc_prio_control_stoped>
        // Нужна перепланировка, процесс остановили и не запустили обратно
#ifdef CONFIG_MP
        resched( proc->core_id );
#else
        resched();
    14fa:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
    14fe:	04 c0       	rjmp	.+8      	; 0x1508 <_mutex_unlock+0x6a>
#endif // CONFIG_MP
    }
    // Не останавливаем - меняем проиритет на ходу
    else _proc_prio_control_running( proc );
    1500:	89 81       	ldd	r24, Y+1	; 0x01
    1502:	9a 81       	ldd	r25, Y+2	; 0x02
    1504:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <_proc_prio_control_running>
#endif // CONFIG_USE_HIGHEST_LOCKER
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    // Обрабока самого мьютекса
    if( ((xlist_t *)mutex)->index == (index_t)0  )
    1508:	eb 81       	ldd	r30, Y+3	; 0x03
    150a:	fc 81       	ldd	r31, Y+4	; 0x04
    150c:	80 89       	ldd	r24, Z+16	; 0x10
    150e:	88 23       	and	r24, r24
    1510:	29 f4       	brne	.+10     	; 0x151c <_mutex_unlock+0x7e>
    {
        // Список ожидающих пуст, выходим
        mutex->free = (bool_t)1;
    1512:	eb 81       	ldd	r30, Y+3	; 0x03
    1514:	fc 81       	ldd	r31, Y+4	; 0x04
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	82 8b       	std	Z+18, r24	; 0x12
    151a:	19 c0       	rjmp	.+50     	; 0x154e <_mutex_unlock+0xb0>
        return;
    }
    // Список ожидающих не пуст, запускаем голову
    proc = (proc_t *)xlist_head((xlist_t *)mutex);
    151c:	8b 81       	ldd	r24, Y+3	; 0x03
    151e:	9c 81       	ldd	r25, Y+4	; 0x04
    1520:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <xlist_head>
    1524:	9a 83       	std	Y+2, r25	; 0x02
    1526:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    // Сначала надо вырезать
    proc->flags &= ~PROC_FLG_QUEUE;
    1528:	e9 81       	ldd	r30, Y+1	; 0x01
    152a:	fa 81       	ldd	r31, Y+2	; 0x02
    152c:	83 85       	ldd	r24, Z+11	; 0x0b
    152e:	87 7f       	andi	r24, 0xF7	; 247
    1530:	e9 81       	ldd	r30, Y+1	; 0x01
    1532:	fa 81       	ldd	r31, Y+2	; 0x02
    1534:	83 87       	std	Z+11, r24	; 0x0b
    gitem_cut( (gitem_t *)proc );
    1536:	89 81       	ldd	r24, Y+1	; 0x01
    1538:	9a 81       	ldd	r25, Y+2	; 0x02
    153a:	0e 94 a8 07 	call	0xf50	; 0xf50 <gitem_cut>
#ifdef CONFIG_USE_HIGHEST_LOCKER
    // Меняем приоритет
    _proc_prio_control_stoped( proc );
    153e:	89 81       	ldd	r24, Y+1	; 0x01
    1540:	9a 81       	ldd	r25, Y+2	; 0x02
    1542:	0e 94 56 0d 	call	0x1aac	; 0x1aac <_proc_prio_control_stoped>
#endif // CONFIG_USE_HIGHEST_LOCKER
    _proc_run( proc );
    1546:	89 81       	ldd	r24, Y+1	; 0x01
    1548:	9a 81       	ldd	r25, Y+2	; 0x02
    154a:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <_proc_run>
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
}
    154e:	0f 90       	pop	r0
    1550:	0f 90       	pop	r0
    1552:	0f 90       	pop	r0
    1554:	0f 90       	pop	r0
    1556:	cf 91       	pop	r28
    1558:	df 91       	pop	r29
    155a:	08 95       	ret

0000155c <pcounter_init>:
*                           http://www.0chan.ru/r/res/9996.html                          *
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
void pcounter_init(pcounter_t * pcounter)
{
    155c:	df 93       	push	r29
    155e:	cf 93       	push	r28
    1560:	00 d0       	rcall	.+0      	; 0x1562 <pcounter_init+0x6>
    1562:	0f 92       	push	r0
    1564:	cd b7       	in	r28, 0x3d	; 61
    1566:	de b7       	in	r29, 0x3e	; 62
    1568:	9b 83       	std	Y+3, r25	; 0x03
    156a:	8a 83       	std	Y+2, r24	; 0x02
    pcounter->index = (index_t)0;
    156c:	ea 81       	ldd	r30, Y+2	; 0x02
    156e:	fb 81       	ldd	r31, Y+3	; 0x03
    1570:	10 8a       	std	Z+16, r1	; 0x10
    for(prio_t p = 0; p < (index_t)BITS_IN_INDEX_T; p++)pcounter->counter[p] = (count_t)0;
    1572:	19 82       	std	Y+1, r1	; 0x01
    1574:	0f c0       	rjmp	.+30     	; 0x1594 <pcounter_init+0x38>
    1576:	89 81       	ldd	r24, Y+1	; 0x01
    1578:	88 2f       	mov	r24, r24
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	2a 81       	ldd	r18, Y+2	; 0x02
    157e:	3b 81       	ldd	r19, Y+3	; 0x03
    1580:	88 0f       	add	r24, r24
    1582:	99 1f       	adc	r25, r25
    1584:	f9 01       	movw	r30, r18
    1586:	e8 0f       	add	r30, r24
    1588:	f9 1f       	adc	r31, r25
    158a:	11 82       	std	Z+1, r1	; 0x01
    158c:	10 82       	st	Z, r1
    158e:	89 81       	ldd	r24, Y+1	; 0x01
    1590:	8f 5f       	subi	r24, 0xFF	; 255
    1592:	89 83       	std	Y+1, r24	; 0x01
    1594:	89 81       	ldd	r24, Y+1	; 0x01
    1596:	88 30       	cpi	r24, 0x08	; 8
    1598:	70 f3       	brcs	.-36     	; 0x1576 <pcounter_init+0x1a>
}
    159a:	0f 90       	pop	r0
    159c:	0f 90       	pop	r0
    159e:	0f 90       	pop	r0
    15a0:	cf 91       	pop	r28
    15a2:	df 91       	pop	r29
    15a4:	08 95       	ret

000015a6 <pcounter_inc>:

void pcounter_inc(pcounter_t * pcounter, prio_t prio)
{
    15a6:	df 93       	push	r29
    15a8:	cf 93       	push	r28
    15aa:	00 d0       	rcall	.+0      	; 0x15ac <pcounter_inc+0x6>
    15ac:	0f 92       	push	r0
    15ae:	cd b7       	in	r28, 0x3d	; 61
    15b0:	de b7       	in	r29, 0x3e	; 62
    15b2:	9a 83       	std	Y+2, r25	; 0x02
    15b4:	89 83       	std	Y+1, r24	; 0x01
    15b6:	6b 83       	std	Y+3, r22	; 0x03
    pcounter->counter[prio]++;
    15b8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ba:	68 2f       	mov	r22, r24
    15bc:	70 e0       	ldi	r23, 0x00	; 0
    15be:	29 81       	ldd	r18, Y+1	; 0x01
    15c0:	3a 81       	ldd	r19, Y+2	; 0x02
    15c2:	cb 01       	movw	r24, r22
    15c4:	88 0f       	add	r24, r24
    15c6:	99 1f       	adc	r25, r25
    15c8:	f9 01       	movw	r30, r18
    15ca:	e8 0f       	add	r30, r24
    15cc:	f9 1f       	adc	r31, r25
    15ce:	80 81       	ld	r24, Z
    15d0:	91 81       	ldd	r25, Z+1	; 0x01
    15d2:	ac 01       	movw	r20, r24
    15d4:	4f 5f       	subi	r20, 0xFF	; 255
    15d6:	5f 4f       	sbci	r21, 0xFF	; 255
    15d8:	29 81       	ldd	r18, Y+1	; 0x01
    15da:	3a 81       	ldd	r19, Y+2	; 0x02
    15dc:	cb 01       	movw	r24, r22
    15de:	88 0f       	add	r24, r24
    15e0:	99 1f       	adc	r25, r25
    15e2:	f9 01       	movw	r30, r18
    15e4:	e8 0f       	add	r30, r24
    15e6:	f9 1f       	adc	r31, r25
    15e8:	51 83       	std	Z+1, r21	; 0x01
    15ea:	40 83       	st	Z, r20
    pcounter->index |= ((index_t)1)<<prio;
    15ec:	e9 81       	ldd	r30, Y+1	; 0x01
    15ee:	fa 81       	ldd	r31, Y+2	; 0x02
    15f0:	80 89       	ldd	r24, Z+16	; 0x10
    15f2:	48 2f       	mov	r20, r24
    15f4:	8b 81       	ldd	r24, Y+3	; 0x03
    15f6:	28 2f       	mov	r18, r24
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	02 2e       	mov	r0, r18
    1600:	02 c0       	rjmp	.+4      	; 0x1606 <pcounter_inc+0x60>
    1602:	88 0f       	add	r24, r24
    1604:	99 1f       	adc	r25, r25
    1606:	0a 94       	dec	r0
    1608:	e2 f7       	brpl	.-8      	; 0x1602 <pcounter_inc+0x5c>
    160a:	84 2b       	or	r24, r20
    160c:	e9 81       	ldd	r30, Y+1	; 0x01
    160e:	fa 81       	ldd	r31, Y+2	; 0x02
    1610:	80 8b       	std	Z+16, r24	; 0x10
}
    1612:	0f 90       	pop	r0
    1614:	0f 90       	pop	r0
    1616:	0f 90       	pop	r0
    1618:	cf 91       	pop	r28
    161a:	df 91       	pop	r29
    161c:	08 95       	ret

0000161e <pcounter_dec>:

index_t pcounter_dec(pcounter_t * pcounter, prio_t prio)
{
    161e:	df 93       	push	r29
    1620:	cf 93       	push	r28
    1622:	00 d0       	rcall	.+0      	; 0x1624 <pcounter_dec+0x6>
    1624:	00 d0       	rcall	.+0      	; 0x1626 <pcounter_dec+0x8>
    1626:	cd b7       	in	r28, 0x3d	; 61
    1628:	de b7       	in	r29, 0x3e	; 62
    162a:	9b 83       	std	Y+3, r25	; 0x03
    162c:	8a 83       	std	Y+2, r24	; 0x02
    162e:	6c 83       	std	Y+4, r22	; 0x04
    index_t mask = ((index_t)1)<<prio;
    1630:	8c 81       	ldd	r24, Y+4	; 0x04
    1632:	28 2f       	mov	r18, r24
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	02 c0       	rjmp	.+4      	; 0x1640 <pcounter_dec+0x22>
    163c:	88 0f       	add	r24, r24
    163e:	99 1f       	adc	r25, r25
    1640:	2a 95       	dec	r18
    1642:	e2 f7       	brpl	.-8      	; 0x163c <pcounter_dec+0x1e>
    1644:	89 83       	std	Y+1, r24	; 0x01
    pcounter->counter[prio]--;
    1646:	8c 81       	ldd	r24, Y+4	; 0x04
    1648:	68 2f       	mov	r22, r24
    164a:	70 e0       	ldi	r23, 0x00	; 0
    164c:	2a 81       	ldd	r18, Y+2	; 0x02
    164e:	3b 81       	ldd	r19, Y+3	; 0x03
    1650:	cb 01       	movw	r24, r22
    1652:	88 0f       	add	r24, r24
    1654:	99 1f       	adc	r25, r25
    1656:	f9 01       	movw	r30, r18
    1658:	e8 0f       	add	r30, r24
    165a:	f9 1f       	adc	r31, r25
    165c:	80 81       	ld	r24, Z
    165e:	91 81       	ldd	r25, Z+1	; 0x01
    1660:	ac 01       	movw	r20, r24
    1662:	41 50       	subi	r20, 0x01	; 1
    1664:	50 40       	sbci	r21, 0x00	; 0
    1666:	2a 81       	ldd	r18, Y+2	; 0x02
    1668:	3b 81       	ldd	r19, Y+3	; 0x03
    166a:	cb 01       	movw	r24, r22
    166c:	88 0f       	add	r24, r24
    166e:	99 1f       	adc	r25, r25
    1670:	f9 01       	movw	r30, r18
    1672:	e8 0f       	add	r30, r24
    1674:	f9 1f       	adc	r31, r25
    1676:	51 83       	std	Z+1, r21	; 0x01
    1678:	40 83       	st	Z, r20
    if(pcounter->counter[prio] == (count_t)0)pcounter->index &= ~mask;
    167a:	8c 81       	ldd	r24, Y+4	; 0x04
    167c:	88 2f       	mov	r24, r24
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	2a 81       	ldd	r18, Y+2	; 0x02
    1682:	3b 81       	ldd	r19, Y+3	; 0x03
    1684:	88 0f       	add	r24, r24
    1686:	99 1f       	adc	r25, r25
    1688:	f9 01       	movw	r30, r18
    168a:	e8 0f       	add	r30, r24
    168c:	f9 1f       	adc	r31, r25
    168e:	80 81       	ld	r24, Z
    1690:	91 81       	ldd	r25, Z+1	; 0x01
    1692:	00 97       	sbiw	r24, 0x00	; 0
    1694:	51 f4       	brne	.+20     	; 0x16aa <pcounter_dec+0x8c>
    1696:	ea 81       	ldd	r30, Y+2	; 0x02
    1698:	fb 81       	ldd	r31, Y+3	; 0x03
    169a:	80 89       	ldd	r24, Z+16	; 0x10
    169c:	98 2f       	mov	r25, r24
    169e:	89 81       	ldd	r24, Y+1	; 0x01
    16a0:	80 95       	com	r24
    16a2:	89 23       	and	r24, r25
    16a4:	ea 81       	ldd	r30, Y+2	; 0x02
    16a6:	fb 81       	ldd	r31, Y+3	; 0x03
    16a8:	80 8b       	std	Z+16, r24	; 0x10
    return pcounter->index & mask;
    16aa:	ea 81       	ldd	r30, Y+2	; 0x02
    16ac:	fb 81       	ldd	r31, Y+3	; 0x03
    16ae:	90 89       	ldd	r25, Z+16	; 0x10
    16b0:	89 81       	ldd	r24, Y+1	; 0x01
    16b2:	89 23       	and	r24, r25
}
    16b4:	0f 90       	pop	r0
    16b6:	0f 90       	pop	r0
    16b8:	0f 90       	pop	r0
    16ba:	0f 90       	pop	r0
    16bc:	cf 91       	pop	r28
    16be:	df 91       	pop	r29
    16c0:	08 95       	ret

000016c2 <proc_init_isr>:
    bool_t is_rt // если true, значит процесс будет иметть поведение RT
#ifdef CONFIG_MP
    ,affinity_t affinity
#endif // CONFIG_MP
)
{
    16c2:	8f 92       	push	r8
    16c4:	af 92       	push	r10
    16c6:	bf 92       	push	r11
    16c8:	cf 92       	push	r12
    16ca:	ef 92       	push	r14
    16cc:	ff 92       	push	r15
    16ce:	0f 93       	push	r16
    16d0:	1f 93       	push	r17
    16d2:	df 93       	push	r29
    16d4:	cf 93       	push	r28
    16d6:	cd b7       	in	r28, 0x3d	; 61
    16d8:	de b7       	in	r29, 0x3e	; 62
    16da:	61 97       	sbiw	r28, 0x11	; 17
    16dc:	0f b6       	in	r0, 0x3f	; 63
    16de:	f8 94       	cli
    16e0:	de bf       	out	0x3e, r29	; 62
    16e2:	0f be       	out	0x3f, r0	; 63
    16e4:	cd bf       	out	0x3d, r28	; 61
    16e6:	9a 83       	std	Y+2, r25	; 0x02
    16e8:	89 83       	std	Y+1, r24	; 0x01
    16ea:	7c 83       	std	Y+4, r23	; 0x04
    16ec:	6b 83       	std	Y+3, r22	; 0x03
    16ee:	5e 83       	std	Y+6, r21	; 0x06
    16f0:	4d 83       	std	Y+5, r20	; 0x05
    16f2:	38 87       	std	Y+8, r19	; 0x08
    16f4:	2f 83       	std	Y+7, r18	; 0x07
    16f6:	1a 87       	std	Y+10, r17	; 0x0a
    16f8:	09 87       	std	Y+9, r16	; 0x09
    16fa:	fc 86       	std	Y+12, r15	; 0x0c
    16fc:	eb 86       	std	Y+11, r14	; 0x0b
    16fe:	cd 86       	std	Y+13, r12	; 0x0d
    1700:	bf 86       	std	Y+15, r11	; 0x0f
    1702:	ae 86       	std	Y+14, r10	; 0x0e
    1704:	88 8a       	std	Y+16, r8	; 0x10
    gitem_init( (gitem_t *)proc, prio );
    1706:	89 81       	ldd	r24, Y+1	; 0x01
    1708:	9a 81       	ldd	r25, Y+2	; 0x02
    170a:	6d 85       	ldd	r22, Y+13	; 0x0d
    170c:	0e 94 25 06 	call	0xc4a	; 0xc4a <gitem_init>
    proc->flags = ( is_rt )?PROC_FLG_RT:(flag_t)0;
    1710:	88 89       	ldd	r24, Y+16	; 0x10
    1712:	89 8b       	std	Y+17, r24	; 0x11
    1714:	89 89       	ldd	r24, Y+17	; 0x11
    1716:	88 23       	and	r24, r24
    1718:	11 f0       	breq	.+4      	; 0x171e <proc_init_isr+0x5c>
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	89 8b       	std	Y+17, r24	; 0x11
    171e:	89 89       	ldd	r24, Y+17	; 0x11
    1720:	e9 81       	ldd	r30, Y+1	; 0x01
    1722:	fa 81       	ldd	r31, Y+2	; 0x02
    1724:	83 87       	std	Z+11, r24	; 0x0b
#ifdef CONFIG_USE_HIGHEST_LOCKER
    pcounter_init(&proc->lres);
    1726:	89 81       	ldd	r24, Y+1	; 0x01
    1728:	9a 81       	ldd	r25, Y+2	; 0x02
    172a:	0d 96       	adiw	r24, 0x0d	; 13
    172c:	0e 94 ae 0a 	call	0x155c	; 0x155c <pcounter_init>
    proc->base_prio = prio;
    1730:	e9 81       	ldd	r30, Y+1	; 0x01
    1732:	fa 81       	ldd	r31, Y+2	; 0x02
    1734:	8d 85       	ldd	r24, Y+13	; 0x0d
    1736:	84 87       	std	Z+12, r24	; 0x0c
#else
    proc->lres = (count_t)0;
#endif
    proc->time_quant = time_quant;
    1738:	e9 81       	ldd	r30, Y+1	; 0x01
    173a:	fa 81       	ldd	r31, Y+2	; 0x02
    173c:	8e 85       	ldd	r24, Y+14	; 0x0e
    173e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1740:	97 8f       	std	Z+31, r25	; 0x1f
    1742:	86 8f       	std	Z+30, r24	; 0x1e
    proc->timer = time_quant;
    1744:	e9 81       	ldd	r30, Y+1	; 0x01
    1746:	fa 81       	ldd	r31, Y+2	; 0x02
    1748:	8e 85       	ldd	r24, Y+14	; 0x0e
    174a:	9f 85       	ldd	r25, Y+15	; 0x0f
    174c:	91 a3       	std	Z+33, r25	; 0x21
    174e:	80 a3       	std	Z+32, r24	; 0x20
#ifdef CONFIG_MP
    proc->core_id = (core_id_t)0;
    proc->affinity = affinity;
#endif // CONFIG_MP
    proc->pmain = pmain;
    1750:	e9 81       	ldd	r30, Y+1	; 0x01
    1752:	fa 81       	ldd	r31, Y+2	; 0x02
    1754:	8b 81       	ldd	r24, Y+3	; 0x03
    1756:	9c 81       	ldd	r25, Y+4	; 0x04
    1758:	93 a3       	std	Z+35, r25	; 0x23
    175a:	82 a3       	std	Z+34, r24	; 0x22
    proc->sv_hook = sv_hook;
    175c:	e9 81       	ldd	r30, Y+1	; 0x01
    175e:	fa 81       	ldd	r31, Y+2	; 0x02
    1760:	8d 81       	ldd	r24, Y+5	; 0x05
    1762:	9e 81       	ldd	r25, Y+6	; 0x06
    1764:	95 a3       	std	Z+37, r25	; 0x25
    1766:	84 a3       	std	Z+36, r24	; 0x24
    proc->rs_hook = rs_hook;
    1768:	e9 81       	ldd	r30, Y+1	; 0x01
    176a:	fa 81       	ldd	r31, Y+2	; 0x02
    176c:	8f 81       	ldd	r24, Y+7	; 0x07
    176e:	98 85       	ldd	r25, Y+8	; 0x08
    1770:	97 a3       	std	Z+39, r25	; 0x27
    1772:	86 a3       	std	Z+38, r24	; 0x26
    proc->arg = arg;
    1774:	e9 81       	ldd	r30, Y+1	; 0x01
    1776:	fa 81       	ldd	r31, Y+2	; 0x02
    1778:	89 85       	ldd	r24, Y+9	; 0x09
    177a:	9a 85       	ldd	r25, Y+10	; 0x0a
    177c:	91 a7       	std	Z+41, r25	; 0x29
    177e:	80 a7       	std	Z+40, r24	; 0x28
    proc->sstart = sstart;
    1780:	e9 81       	ldd	r30, Y+1	; 0x01
    1782:	fa 81       	ldd	r31, Y+2	; 0x02
    1784:	8b 85       	ldd	r24, Y+11	; 0x0b
    1786:	9c 85       	ldd	r25, Y+12	; 0x0c
    1788:	93 a7       	std	Z+43, r25	; 0x2b
    178a:	82 a7       	std	Z+42, r24	; 0x2a
    if( sstart )proc->spointer = proc_stack_init(sstart, (code_t)proc_run_wrapper, (void *)proc);
    178c:	8b 85       	ldd	r24, Y+11	; 0x0b
    178e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1790:	00 97       	sbiw	r24, 0x00	; 0
    1792:	71 f0       	breq	.+28     	; 0x17b0 <proc_init_isr+0xee>
    1794:	42 e7       	ldi	r20, 0x72	; 114
    1796:	53 e0       	ldi	r21, 0x03	; 3
    1798:	8b 85       	ldd	r24, Y+11	; 0x0b
    179a:	9c 85       	ldd	r25, Y+12	; 0x0c
    179c:	29 81       	ldd	r18, Y+1	; 0x01
    179e:	3a 81       	ldd	r19, Y+2	; 0x02
    17a0:	ba 01       	movw	r22, r20
    17a2:	a9 01       	movw	r20, r18
    17a4:	0e 94 d7 00 	call	0x1ae	; 0x1ae <proc_stack_init>
    17a8:	e9 81       	ldd	r30, Y+1	; 0x01
    17aa:	fa 81       	ldd	r31, Y+2	; 0x02
    17ac:	95 a7       	std	Z+45, r25	; 0x2d
    17ae:	84 a7       	std	Z+44, r24	; 0x2c
}
    17b0:	61 96       	adiw	r28, 0x11	; 17
    17b2:	0f b6       	in	r0, 0x3f	; 63
    17b4:	f8 94       	cli
    17b6:	de bf       	out	0x3e, r29	; 62
    17b8:	0f be       	out	0x3f, r0	; 63
    17ba:	cd bf       	out	0x3d, r28	; 61
    17bc:	cf 91       	pop	r28
    17be:	df 91       	pop	r29
    17c0:	1f 91       	pop	r17
    17c2:	0f 91       	pop	r16
    17c4:	ff 90       	pop	r15
    17c6:	ef 90       	pop	r14
    17c8:	cf 90       	pop	r12
    17ca:	bf 90       	pop	r11
    17cc:	af 90       	pop	r10
    17ce:	8f 90       	pop	r8
    17d0:	08 95       	ret

000017d2 <_proc_run>:
    spin_unlock( &proc_sched->lock );
}
#endif // CONFIG_MP

void _proc_run( proc_t * proc )
{
    17d2:	df 93       	push	r29
    17d4:	cf 93       	push	r28
    17d6:	00 d0       	rcall	.+0      	; 0x17d8 <_proc_run+0x6>
    17d8:	cd b7       	in	r28, 0x3d	; 61
    17da:	de b7       	in	r29, 0x3e	; 62
    17dc:	9a 83       	std	Y+2, r25	; 0x02
    17de:	89 83       	std	Y+1, r24	; 0x01
    proc->flags |= PROC_FLG_RUN;
    17e0:	e9 81       	ldd	r30, Y+1	; 0x01
    17e2:	fa 81       	ldd	r31, Y+2	; 0x02
    17e4:	83 85       	ldd	r24, Z+11	; 0x0b
    17e6:	82 60       	ori	r24, 0x02	; 2
    17e8:	e9 81       	ldd	r30, Y+1	; 0x01
    17ea:	fa 81       	ldd	r31, Y+2	; 0x02
    17ec:	83 87       	std	Z+11, r24	; 0x0b
    spin_lock( &kernel.stat_lock );
    proc->core_id = sched_load_balancer( proc, (stat_t *)kernel.stat );
    stat_inc( proc, (stat_t *)kernel.stat+proc->core_id );
    spin_unlock( &kernel.stat_lock );
#endif
    _proc_run_( proc );
    17ee:	89 81       	ldd	r24, Y+1	; 0x01
    17f0:	9a 81       	ldd	r25, Y+2	; 0x02
    17f2:	20 91 a0 01 	lds	r18, 0x01A0
    17f6:	30 91 a1 01 	lds	r19, 0x01A1
    17fa:	b9 01       	movw	r22, r18
    17fc:	0e 94 4b 06 	call	0xc96	; 0xc96 <gitem_insert>
#ifdef CONFIG_MP
    resched( proc->core_id );
#else
    resched();
    1800:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
#endif // CONFIG_MP
}
    1804:	0f 90       	pop	r0
    1806:	0f 90       	pop	r0
    1808:	cf 91       	pop	r28
    180a:	df 91       	pop	r29
    180c:	08 95       	ret

0000180e <proc_run_isr>:
// Функция общего пользования - запуск процесса из обработчика прерывания, прерывания должны быть запрещены во время запуска
bool_t proc_run_isr(proc_t * proc)
{
    180e:	df 93       	push	r29
    1810:	cf 93       	push	r28
    1812:	00 d0       	rcall	.+0      	; 0x1814 <proc_run_isr+0x6>
    1814:	0f 92       	push	r0
    1816:	cd b7       	in	r28, 0x3d	; 61
    1818:	de b7       	in	r29, 0x3e	; 62
    181a:	9b 83       	std	Y+3, r25	; 0x03
    181c:	8a 83       	std	Y+2, r24	; 0x02
    bool_t ret = (bool_t)1;
    181e:	81 e0       	ldi	r24, 0x01	; 1
    1820:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    if( proc->flags & (PROC_FLG_RUN|PROC_FLG_QUEUE|PROC_FLG_WAIT|PROC_FLG_END|PROC_FLG_DEAD) )
    1822:	ea 81       	ldd	r30, Y+2	; 0x02
    1824:	fb 81       	ldd	r31, Y+3	; 0x03
    1826:	83 85       	ldd	r24, Z+11	; 0x0b
    1828:	88 2f       	mov	r24, r24
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	8a 7d       	andi	r24, 0xDA	; 218
    182e:	90 70       	andi	r25, 0x00	; 0
    1830:	00 97       	sbiw	r24, 0x00	; 0
    1832:	11 f0       	breq	.+4      	; 0x1838 <proc_run_isr+0x2a>
    {
        ret = (bool_t)0;
    1834:	19 82       	std	Y+1, r1	; 0x01
    1836:	04 c0       	rjmp	.+8      	; 0x1840 <proc_run_isr+0x32>
        goto end;
    }
    _proc_run( proc );
    1838:	8a 81       	ldd	r24, Y+2	; 0x02
    183a:	9b 81       	ldd	r25, Y+3	; 0x03
    183c:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <_proc_run>
end:
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    return ret;
    1840:	89 81       	ldd	r24, Y+1	; 0x01
}
    1842:	0f 90       	pop	r0
    1844:	0f 90       	pop	r0
    1846:	0f 90       	pop	r0
    1848:	cf 91       	pop	r28
    184a:	df 91       	pop	r29
    184c:	08 95       	ret

0000184e <proc_restart_isr>:
// Перезепуск процесса из обработчика прерываний, прерывания должны быть запрещены
bool_t proc_restart_isr(proc_t * proc)
{
    184e:	df 93       	push	r29
    1850:	cf 93       	push	r28
    1852:	00 d0       	rcall	.+0      	; 0x1854 <proc_restart_isr+0x6>
    1854:	0f 92       	push	r0
    1856:	cd b7       	in	r28, 0x3d	; 61
    1858:	de b7       	in	r29, 0x3e	; 62
    185a:	9b 83       	std	Y+3, r25	; 0x03
    185c:	8a 83       	std	Y+2, r24	; 0x02
    bool_t ret = (bool_t)1;
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif
    if( proc->flags & (PROC_FLG_RUN|PROC_FLG_HOLD|PROC_FLG_QUEUE|PROC_FLG_WAIT|PROC_FLG_PRE_END|PROC_FLG_DEAD) )
    1862:	ea 81       	ldd	r30, Y+2	; 0x02
    1864:	fb 81       	ldd	r31, Y+3	; 0x03
    1866:	83 85       	ldd	r24, Z+11	; 0x0b
    1868:	88 2f       	mov	r24, r24
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	8e 7b       	andi	r24, 0xBE	; 190
    186e:	90 70       	andi	r25, 0x00	; 0
    1870:	00 97       	sbiw	r24, 0x00	; 0
    1872:	11 f0       	breq	.+4      	; 0x1878 <proc_restart_isr+0x2a>
    {
        ret = (bool_t)0;
    1874:	19 82       	std	Y+1, r1	; 0x01
    1876:	2d c0       	rjmp	.+90     	; 0x18d2 <proc_restart_isr+0x84>
        goto end;
    }
    proc->flags = ( proc->flags & PROC_FLG_RT )?PROC_FLG_RT:(flag_t)0;
    1878:	ea 81       	ldd	r30, Y+2	; 0x02
    187a:	fb 81       	ldd	r31, Y+3	; 0x03
    187c:	83 85       	ldd	r24, Z+11	; 0x0b
    187e:	81 70       	andi	r24, 0x01	; 1
    1880:	ea 81       	ldd	r30, Y+2	; 0x02
    1882:	fb 81       	ldd	r31, Y+3	; 0x03
    1884:	83 87       	std	Z+11, r24	; 0x0b
#ifdef CONFIG_USE_HIGHEST_LOCKER
    pcounter_init(&proc->lres);
    1886:	8a 81       	ldd	r24, Y+2	; 0x02
    1888:	9b 81       	ldd	r25, Y+3	; 0x03
    188a:	0d 96       	adiw	r24, 0x0d	; 13
    188c:	0e 94 ae 0a 	call	0x155c	; 0x155c <pcounter_init>
#else
    proc->lres = (count_t)0;
#endif
    proc->timer = proc->time_quant;
    1890:	ea 81       	ldd	r30, Y+2	; 0x02
    1892:	fb 81       	ldd	r31, Y+3	; 0x03
    1894:	86 8d       	ldd	r24, Z+30	; 0x1e
    1896:	97 8d       	ldd	r25, Z+31	; 0x1f
    1898:	ea 81       	ldd	r30, Y+2	; 0x02
    189a:	fb 81       	ldd	r31, Y+3	; 0x03
    189c:	91 a3       	std	Z+33, r25	; 0x21
    189e:	80 a3       	std	Z+32, r24	; 0x20

    if( proc->sstart )proc->spointer = proc_stack_init( proc->sstart, (code_t)proc_run_wrapper, (void *)proc );
    18a0:	ea 81       	ldd	r30, Y+2	; 0x02
    18a2:	fb 81       	ldd	r31, Y+3	; 0x03
    18a4:	82 a5       	ldd	r24, Z+42	; 0x2a
    18a6:	93 a5       	ldd	r25, Z+43	; 0x2b
    18a8:	00 97       	sbiw	r24, 0x00	; 0
    18aa:	79 f0       	breq	.+30     	; 0x18ca <proc_restart_isr+0x7c>
    18ac:	ea 81       	ldd	r30, Y+2	; 0x02
    18ae:	fb 81       	ldd	r31, Y+3	; 0x03
    18b0:	82 a5       	ldd	r24, Z+42	; 0x2a
    18b2:	93 a5       	ldd	r25, Z+43	; 0x2b
    18b4:	22 e7       	ldi	r18, 0x72	; 114
    18b6:	33 e0       	ldi	r19, 0x03	; 3
    18b8:	4a 81       	ldd	r20, Y+2	; 0x02
    18ba:	5b 81       	ldd	r21, Y+3	; 0x03
    18bc:	b9 01       	movw	r22, r18
    18be:	0e 94 d7 00 	call	0x1ae	; 0x1ae <proc_stack_init>
    18c2:	ea 81       	ldd	r30, Y+2	; 0x02
    18c4:	fb 81       	ldd	r31, Y+3	; 0x03
    18c6:	95 a7       	std	Z+45, r25	; 0x2d
    18c8:	84 a7       	std	Z+44, r24	; 0x2c
    _proc_run( proc );
    18ca:	8a 81       	ldd	r24, Y+2	; 0x02
    18cc:	9b 81       	ldd	r25, Y+3	; 0x03
    18ce:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <_proc_run>
end:
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif
    return ret;
    18d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    18d4:	0f 90       	pop	r0
    18d6:	0f 90       	pop	r0
    18d8:	0f 90       	pop	r0
    18da:	cf 91       	pop	r28
    18dc:	df 91       	pop	r29
    18de:	08 95       	ret

000018e0 <_proc_stop>:
        spin_unlock( xlist_lock );
    }
}
#endif // CONFIG_MP
void _proc_stop(proc_t * proc)
{
    18e0:	df 93       	push	r29
    18e2:	cf 93       	push	r28
    18e4:	00 d0       	rcall	.+0      	; 0x18e6 <_proc_stop+0x6>
    18e6:	cd b7       	in	r28, 0x3d	; 61
    18e8:	de b7       	in	r29, 0x3e	; 62
    18ea:	9a 83       	std	Y+2, r25	; 0x02
    18ec:	89 83       	std	Y+1, r24	; 0x01
    proc->flags &= ~PROC_FLG_RUN;
    18ee:	e9 81       	ldd	r30, Y+1	; 0x01
    18f0:	fa 81       	ldd	r31, Y+2	; 0x02
    18f2:	83 85       	ldd	r24, Z+11	; 0x0b
    18f4:	8d 7f       	andi	r24, 0xFD	; 253
    18f6:	e9 81       	ldd	r30, Y+1	; 0x01
    18f8:	fa 81       	ldd	r31, Y+2	; 0x02
    18fa:	83 87       	std	Z+11, r24	; 0x0b
    _proc_stop_( proc );
    18fc:	89 81       	ldd	r24, Y+1	; 0x01
    18fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1900:	0e 94 a8 07 	call	0xf50	; 0xf50 <gitem_cut>
#ifdef CONFIG_MP
    resched( proc->core_id );
#else
    resched();
    1904:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
#endif // CONFIG_MP
}
    1908:	0f 90       	pop	r0
    190a:	0f 90       	pop	r0
    190c:	cf 91       	pop	r28
    190e:	df 91       	pop	r29
    1910:	08 95       	ret

00001912 <proc_stop_isr>:
// Останов процесса из обработчика прерываний, прерывания должны быть запрещены
bool_t proc_stop_isr(proc_t * proc)
{
    1912:	df 93       	push	r29
    1914:	cf 93       	push	r28
    1916:	00 d0       	rcall	.+0      	; 0x1918 <proc_stop_isr+0x6>
    1918:	0f 92       	push	r0
    191a:	cd b7       	in	r28, 0x3d	; 61
    191c:	de b7       	in	r29, 0x3e	; 62
    191e:	9b 83       	std	Y+3, r25	; 0x03
    1920:	8a 83       	std	Y+2, r24	; 0x02
    bool_t ret = (bool_t)0;
    1922:	19 82       	std	Y+1, r1	; 0x01
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    //Проверка флагов
    //В случчае PROC_FLG_WAIT будем обрабатывать PROC_FLG_PRE_END на выходе из sig_wait.
    //В случае PROC_FLG_HOLD или PROC_FLG_QUEUE будем обрабатывать PROC_FLG_PRE_END на выходе из функции, освобождающей общий ресурс.
    if( proc->flags & (PROC_FLG_HOLD|PROC_FLG_QUEUE|PROC_FLG_WAIT) )proc->flags |= PROC_FLG_PRE_END;
    1924:	ea 81       	ldd	r30, Y+2	; 0x02
    1926:	fb 81       	ldd	r31, Y+3	; 0x03
    1928:	83 85       	ldd	r24, Z+11	; 0x0b
    192a:	88 2f       	mov	r24, r24
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	8c 71       	andi	r24, 0x1C	; 28
    1930:	90 70       	andi	r25, 0x00	; 0
    1932:	00 97       	sbiw	r24, 0x00	; 0
    1934:	41 f0       	breq	.+16     	; 0x1946 <proc_stop_isr+0x34>
    1936:	ea 81       	ldd	r30, Y+2	; 0x02
    1938:	fb 81       	ldd	r31, Y+3	; 0x03
    193a:	83 85       	ldd	r24, Z+11	; 0x0b
    193c:	80 62       	ori	r24, 0x20	; 32
    193e:	ea 81       	ldd	r30, Y+2	; 0x02
    1940:	fb 81       	ldd	r31, Y+3	; 0x03
    1942:	83 87       	std	Z+11, r24	; 0x0b
    1944:	0f c0       	rjmp	.+30     	; 0x1964 <proc_stop_isr+0x52>
    else if( proc->flags & PROC_FLG_RUN )
    1946:	ea 81       	ldd	r30, Y+2	; 0x02
    1948:	fb 81       	ldd	r31, Y+3	; 0x03
    194a:	83 85       	ldd	r24, Z+11	; 0x0b
    194c:	88 2f       	mov	r24, r24
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	82 70       	andi	r24, 0x02	; 2
    1952:	90 70       	andi	r25, 0x00	; 0
    1954:	00 97       	sbiw	r24, 0x00	; 0
    1956:	31 f0       	breq	.+12     	; 0x1964 <proc_stop_isr+0x52>
    {
        _proc_stop( proc );
    1958:	8a 81       	ldd	r24, Y+2	; 0x02
    195a:	9b 81       	ldd	r25, Y+3	; 0x03
    195c:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <_proc_stop>
        ret = (bool_t)1;
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	89 83       	std	Y+1, r24	; 0x01
    }
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    return ret;
    1964:	89 81       	ldd	r24, Y+1	; 0x01
}
    1966:	0f 90       	pop	r0
    1968:	0f 90       	pop	r0
    196a:	0f 90       	pop	r0
    196c:	cf 91       	pop	r28
    196e:	df 91       	pop	r29
    1970:	08 95       	ret

00001972 <proc_reset_watchdog>:
void proc_reset_watchdog(void)
{
    1972:	df 93       	push	r29
    1974:	cf 93       	push	r28
    1976:	00 d0       	rcall	.+0      	; 0x1978 <proc_reset_watchdog+0x6>
    1978:	cd b7       	in	r28, 0x3d	; 61
    197a:	de b7       	in	r29, 0x3e	; 62
#ifdef CONFIG_MP
    core_id_t current_core = _enter_crit_sec();
    proc = ((sched_t *)kernel.sched + current_core)->current_proc;
    spin_lock(&proc->lock);
#else
    enter_crit_sec();
    197c:	0e 94 f5 05 	call	0xbea	; 0xbea <enter_crit_sec>
    proc = kernel.sched.current_proc;
    1980:	80 91 9e 01 	lds	r24, 0x019E
    1984:	90 91 9f 01 	lds	r25, 0x019F
    1988:	9a 83       	std	Y+2, r25	; 0x02
    198a:	89 83       	std	Y+1, r24	; 0x01
#endif
    if( proc->flags & PROC_FLG_RT )proc->timer = proc->time_quant;
    198c:	e9 81       	ldd	r30, Y+1	; 0x01
    198e:	fa 81       	ldd	r31, Y+2	; 0x02
    1990:	83 85       	ldd	r24, Z+11	; 0x0b
    1992:	88 2f       	mov	r24, r24
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	81 70       	andi	r24, 0x01	; 1
    1998:	90 70       	andi	r25, 0x00	; 0
    199a:	88 23       	and	r24, r24
    199c:	41 f0       	breq	.+16     	; 0x19ae <proc_reset_watchdog+0x3c>
    199e:	e9 81       	ldd	r30, Y+1	; 0x01
    19a0:	fa 81       	ldd	r31, Y+2	; 0x02
    19a2:	86 8d       	ldd	r24, Z+30	; 0x1e
    19a4:	97 8d       	ldd	r25, Z+31	; 0x1f
    19a6:	e9 81       	ldd	r30, Y+1	; 0x01
    19a8:	fa 81       	ldd	r31, Y+2	; 0x02
    19aa:	91 a3       	std	Z+33, r25	; 0x21
    19ac:	80 a3       	std	Z+32, r24	; 0x20
#ifdef CONFIG_MP
    spin_lock(&proc->lock);
    _exit_crit_sec(current_core);
#else
    exit_crit_sec();
    19ae:	0e 94 07 06 	call	0xc0e	; 0xc0e <exit_crit_sec>
#endif
}
    19b2:	0f 90       	pop	r0
    19b4:	0f 90       	pop	r0
    19b6:	cf 91       	pop	r28
    19b8:	df 91       	pop	r29
    19ba:	08 95       	ret

000019bc <_proc_flag_stop_isr>:

void _proc_flag_stop_isr( flag_t mask )
{
    19bc:	df 93       	push	r29
    19be:	cf 93       	push	r28
    19c0:	00 d0       	rcall	.+0      	; 0x19c2 <_proc_flag_stop_isr+0x6>
    19c2:	0f 92       	push	r0
    19c4:	cd b7       	in	r28, 0x3d	; 61
    19c6:	de b7       	in	r29, 0x3e	; 62
    19c8:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = current_proc();
    19ca:	0e 94 cc 00 	call	0x198	; 0x198 <current_proc>
    19ce:	9a 83       	std	Y+2, r25	; 0x02
    19d0:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif //CONFIG_MP
    proc->flags &= mask;
    19d2:	e9 81       	ldd	r30, Y+1	; 0x01
    19d4:	fa 81       	ldd	r31, Y+2	; 0x02
    19d6:	93 85       	ldd	r25, Z+11	; 0x0b
    19d8:	8b 81       	ldd	r24, Y+3	; 0x03
    19da:	89 23       	and	r24, r25
    19dc:	e9 81       	ldd	r30, Y+1	; 0x01
    19de:	fa 81       	ldd	r31, Y+2	; 0x02
    19e0:	83 87       	std	Z+11, r24	; 0x0b
    if(  ( proc->flags & PROC_FLG_PRE_END ) && (!(proc->flags & PROC_FLG_HOLD))  )
    19e2:	e9 81       	ldd	r30, Y+1	; 0x01
    19e4:	fa 81       	ldd	r31, Y+2	; 0x02
    19e6:	83 85       	ldd	r24, Z+11	; 0x0b
    19e8:	88 2f       	mov	r24, r24
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	80 72       	andi	r24, 0x20	; 32
    19ee:	90 70       	andi	r25, 0x00	; 0
    19f0:	00 97       	sbiw	r24, 0x00	; 0
    19f2:	a1 f0       	breq	.+40     	; 0x1a1c <_proc_flag_stop_isr+0x60>
    19f4:	e9 81       	ldd	r30, Y+1	; 0x01
    19f6:	fa 81       	ldd	r31, Y+2	; 0x02
    19f8:	83 85       	ldd	r24, Z+11	; 0x0b
    19fa:	88 2f       	mov	r24, r24
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	84 70       	andi	r24, 0x04	; 4
    1a00:	90 70       	andi	r25, 0x00	; 0
    1a02:	00 97       	sbiw	r24, 0x00	; 0
    1a04:	59 f4       	brne	.+22     	; 0x1a1c <_proc_flag_stop_isr+0x60>
    {
        proc->flags &= ~PROC_FLG_PRE_END;
    1a06:	e9 81       	ldd	r30, Y+1	; 0x01
    1a08:	fa 81       	ldd	r31, Y+2	; 0x02
    1a0a:	83 85       	ldd	r24, Z+11	; 0x0b
    1a0c:	8f 7d       	andi	r24, 0xDF	; 223
    1a0e:	e9 81       	ldd	r30, Y+1	; 0x01
    1a10:	fa 81       	ldd	r31, Y+2	; 0x02
    1a12:	83 87       	std	Z+11, r24	; 0x0b
        _proc_stop( proc );
    1a14:	89 81       	ldd	r24, Y+1	; 0x01
    1a16:	9a 81       	ldd	r25, Y+2	; 0x02
    1a18:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <_proc_stop>
    }
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif //CONFIG_MP
}
    1a1c:	0f 90       	pop	r0
    1a1e:	0f 90       	pop	r0
    1a20:	0f 90       	pop	r0
    1a22:	cf 91       	pop	r28
    1a24:	df 91       	pop	r29
    1a26:	08 95       	ret

00001a28 <_proc_lres_inc>:
    proc_t * proc
#ifdef CONFIG_USE_HIGHEST_LOCKER
    ,prio_t prio
#endif
)
{
    1a28:	df 93       	push	r29
    1a2a:	cf 93       	push	r28
    1a2c:	00 d0       	rcall	.+0      	; 0x1a2e <_proc_lres_inc+0x6>
    1a2e:	0f 92       	push	r0
    1a30:	cd b7       	in	r28, 0x3d	; 61
    1a32:	de b7       	in	r29, 0x3e	; 62
    1a34:	9a 83       	std	Y+2, r25	; 0x02
    1a36:	89 83       	std	Y+1, r24	; 0x01
    1a38:	6b 83       	std	Y+3, r22	; 0x03
#ifdef CONFIG_USE_HIGHEST_LOCKER
    if( proc->lres.index == (index_t)0 )proc->flags |= PROC_FLG_HOLD;
    1a3a:	e9 81       	ldd	r30, Y+1	; 0x01
    1a3c:	fa 81       	ldd	r31, Y+2	; 0x02
    1a3e:	85 8d       	ldd	r24, Z+29	; 0x1d
    1a40:	88 23       	and	r24, r24
    1a42:	39 f4       	brne	.+14     	; 0x1a52 <_proc_lres_inc+0x2a>
    1a44:	e9 81       	ldd	r30, Y+1	; 0x01
    1a46:	fa 81       	ldd	r31, Y+2	; 0x02
    1a48:	83 85       	ldd	r24, Z+11	; 0x0b
    1a4a:	84 60       	ori	r24, 0x04	; 4
    1a4c:	e9 81       	ldd	r30, Y+1	; 0x01
    1a4e:	fa 81       	ldd	r31, Y+2	; 0x02
    1a50:	83 87       	std	Z+11, r24	; 0x0b
    pcounter_inc( &proc->lres, prio );
    1a52:	89 81       	ldd	r24, Y+1	; 0x01
    1a54:	9a 81       	ldd	r25, Y+2	; 0x02
    1a56:	0d 96       	adiw	r24, 0x0d	; 13
    1a58:	6b 81       	ldd	r22, Y+3	; 0x03
    1a5a:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <pcounter_inc>
#else
    if( proc->lres == (count_t)0 )proc->flags |= PROC_FLG_HOLD;
    proc->lres++;
#endif
}
    1a5e:	0f 90       	pop	r0
    1a60:	0f 90       	pop	r0
    1a62:	0f 90       	pop	r0
    1a64:	cf 91       	pop	r28
    1a66:	df 91       	pop	r29
    1a68:	08 95       	ret

00001a6a <_proc_lres_dec>:
    proc_t * proc
#ifdef CONFIG_USE_HIGHEST_LOCKER
    ,prio_t prio
#endif
)
{
    1a6a:	df 93       	push	r29
    1a6c:	cf 93       	push	r28
    1a6e:	00 d0       	rcall	.+0      	; 0x1a70 <_proc_lres_dec+0x6>
    1a70:	0f 92       	push	r0
    1a72:	cd b7       	in	r28, 0x3d	; 61
    1a74:	de b7       	in	r29, 0x3e	; 62
    1a76:	9a 83       	std	Y+2, r25	; 0x02
    1a78:	89 83       	std	Y+1, r24	; 0x01
    1a7a:	6b 83       	std	Y+3, r22	; 0x03
#ifdef CONFIG_USE_HIGHEST_LOCKER
    pcounter_dec( &proc->lres, prio );
    1a7c:	89 81       	ldd	r24, Y+1	; 0x01
    1a7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a80:	0d 96       	adiw	r24, 0x0d	; 13
    1a82:	6b 81       	ldd	r22, Y+3	; 0x03
    1a84:	0e 94 0f 0b 	call	0x161e	; 0x161e <pcounter_dec>
    if( proc->lres.index == (index_t)0 )proc->flags &= ~PROC_FLG_HOLD;
    1a88:	e9 81       	ldd	r30, Y+1	; 0x01
    1a8a:	fa 81       	ldd	r31, Y+2	; 0x02
    1a8c:	85 8d       	ldd	r24, Z+29	; 0x1d
    1a8e:	88 23       	and	r24, r24
    1a90:	39 f4       	brne	.+14     	; 0x1aa0 <_proc_lres_dec+0x36>
    1a92:	e9 81       	ldd	r30, Y+1	; 0x01
    1a94:	fa 81       	ldd	r31, Y+2	; 0x02
    1a96:	83 85       	ldd	r24, Z+11	; 0x0b
    1a98:	8b 7f       	andi	r24, 0xFB	; 251
    1a9a:	e9 81       	ldd	r30, Y+1	; 0x01
    1a9c:	fa 81       	ldd	r31, Y+2	; 0x02
    1a9e:	83 87       	std	Z+11, r24	; 0x0b
#else
    if( proc->lres!= (count_t)0 )proc->lres--;
    if( proc->lres == (count_t)0 )proc->flags &= ~PROC_FLG_HOLD;
#endif
}
    1aa0:	0f 90       	pop	r0
    1aa2:	0f 90       	pop	r0
    1aa4:	0f 90       	pop	r0
    1aa6:	cf 91       	pop	r28
    1aa8:	df 91       	pop	r29
    1aaa:	08 95       	ret

00001aac <_proc_prio_control_stoped>:
#ifdef CONFIG_USE_HIGHEST_LOCKER
// Будет использоваться в mutex-ах и т.п., процесс должен сам вызывать эту функцию, при этом он должен быть вырезан из списка выполняющихся.
void _proc_prio_control_stoped( proc_t * proc )
{
    1aac:	df 93       	push	r29
    1aae:	cf 93       	push	r28
    1ab0:	cd b7       	in	r28, 0x3d	; 61
    1ab2:	de b7       	in	r29, 0x3e	; 62
    1ab4:	27 97       	sbiw	r28, 0x07	; 7
    1ab6:	0f b6       	in	r0, 0x3f	; 63
    1ab8:	f8 94       	cli
    1aba:	de bf       	out	0x3e, r29	; 62
    1abc:	0f be       	out	0x3f, r0	; 63
    1abe:	cd bf       	out	0x3d, r28	; 61
    1ac0:	9b 83       	std	Y+3, r25	; 0x03
    1ac2:	8a 83       	std	Y+2, r24	; 0x02
    if(proc->lres.index != (index_t)0)
    1ac4:	ea 81       	ldd	r30, Y+2	; 0x02
    1ac6:	fb 81       	ldd	r31, Y+3	; 0x03
    1ac8:	85 8d       	ldd	r24, Z+29	; 0x1d
    1aca:	88 23       	and	r24, r24
    1acc:	e9 f0       	breq	.+58     	; 0x1b08 <_proc_prio_control_stoped+0x5c>
    {
        prio_t locker_prio = index_search( proc->lres.index );
    1ace:	ea 81       	ldd	r30, Y+2	; 0x02
    1ad0:	fb 81       	ldd	r31, Y+3	; 0x03
    1ad2:	85 8d       	ldd	r24, Z+29	; 0x1d
    1ad4:	0e 94 cc 08 	call	0x1198	; 0x1198 <index_search>
    1ad8:	89 83       	std	Y+1, r24	; 0x01
        ((gitem_t *)proc)->group->prio = ( locker_prio < proc->base_prio )?locker_prio:proc->base_prio;
    1ada:	ea 81       	ldd	r30, Y+2	; 0x02
    1adc:	fb 81       	ldd	r31, Y+3	; 0x03
    1ade:	84 81       	ldd	r24, Z+4	; 0x04
    1ae0:	95 81       	ldd	r25, Z+5	; 0x05
    1ae2:	9e 83       	std	Y+6, r25	; 0x06
    1ae4:	8d 83       	std	Y+5, r24	; 0x05
    1ae6:	ea 81       	ldd	r30, Y+2	; 0x02
    1ae8:	fb 81       	ldd	r31, Y+3	; 0x03
    1aea:	84 85       	ldd	r24, Z+12	; 0x0c
    1aec:	99 81       	ldd	r25, Y+1	; 0x01
    1aee:	9f 83       	std	Y+7, r25	; 0x07
    1af0:	8c 83       	std	Y+4, r24	; 0x04
    1af2:	ec 81       	ldd	r30, Y+4	; 0x04
    1af4:	ff 81       	ldd	r31, Y+7	; 0x07
    1af6:	fe 17       	cp	r31, r30
    1af8:	10 f4       	brcc	.+4      	; 0x1afe <_proc_prio_control_stoped+0x52>
    1afa:	8f 81       	ldd	r24, Y+7	; 0x07
    1afc:	8c 83       	std	Y+4, r24	; 0x04
    1afe:	8c 81       	ldd	r24, Y+4	; 0x04
    1b00:	ed 81       	ldd	r30, Y+5	; 0x05
    1b02:	fe 81       	ldd	r31, Y+6	; 0x06
    1b04:	82 83       	std	Z+2, r24	; 0x02
    1b06:	0a c0       	rjmp	.+20     	; 0x1b1c <_proc_prio_control_stoped+0x70>
    }
    else
    {
        ((gitem_t *)proc)->group->prio = proc->base_prio;
    1b08:	ea 81       	ldd	r30, Y+2	; 0x02
    1b0a:	fb 81       	ldd	r31, Y+3	; 0x03
    1b0c:	a4 81       	ldd	r26, Z+4	; 0x04
    1b0e:	b5 81       	ldd	r27, Z+5	; 0x05
    1b10:	ea 81       	ldd	r30, Y+2	; 0x02
    1b12:	fb 81       	ldd	r31, Y+3	; 0x03
    1b14:	84 85       	ldd	r24, Z+12	; 0x0c
    1b16:	12 96       	adiw	r26, 0x02	; 2
    1b18:	8c 93       	st	X, r24
    1b1a:	12 97       	sbiw	r26, 0x02	; 2
    }
}
    1b1c:	27 96       	adiw	r28, 0x07	; 7
    1b1e:	0f b6       	in	r0, 0x3f	; 63
    1b20:	f8 94       	cli
    1b22:	de bf       	out	0x3e, r29	; 62
    1b24:	0f be       	out	0x3f, r0	; 63
    1b26:	cd bf       	out	0x3d, r28	; 61
    1b28:	cf 91       	pop	r28
    1b2a:	df 91       	pop	r29
    1b2c:	08 95       	ret

00001b2e <_proc_prio_control_running>:
void _proc_prio_control_running( proc_t * proc )
{
    1b2e:	df 93       	push	r29
    1b30:	cf 93       	push	r28
    1b32:	00 d0       	rcall	.+0      	; 0x1b34 <_proc_prio_control_running+0x6>
    1b34:	00 d0       	rcall	.+0      	; 0x1b36 <_proc_prio_control_running+0x8>
    1b36:	00 d0       	rcall	.+0      	; 0x1b38 <_proc_prio_control_running+0xa>
    1b38:	cd b7       	in	r28, 0x3d	; 61
    1b3a:	de b7       	in	r29, 0x3e	; 62
    1b3c:	9c 83       	std	Y+4, r25	; 0x04
    1b3e:	8b 83       	std	Y+3, r24	; 0x03
    prio_t new_prio;
    if(proc->lres.index != (index_t)0)
    1b40:	eb 81       	ldd	r30, Y+3	; 0x03
    1b42:	fc 81       	ldd	r31, Y+4	; 0x04
    1b44:	85 8d       	ldd	r24, Z+29	; 0x1d
    1b46:	88 23       	and	r24, r24
    1b48:	a9 f0       	breq	.+42     	; 0x1b74 <_proc_prio_control_running+0x46>
    {
        prio_t locker_prio = index_search( proc->lres.index );
    1b4a:	eb 81       	ldd	r30, Y+3	; 0x03
    1b4c:	fc 81       	ldd	r31, Y+4	; 0x04
    1b4e:	85 8d       	ldd	r24, Z+29	; 0x1d
    1b50:	0e 94 cc 08 	call	0x1198	; 0x1198 <index_search>
    1b54:	89 83       	std	Y+1, r24	; 0x01
        new_prio = ( locker_prio < proc->base_prio )?locker_prio:proc->base_prio;
    1b56:	eb 81       	ldd	r30, Y+3	; 0x03
    1b58:	fc 81       	ldd	r31, Y+4	; 0x04
    1b5a:	84 85       	ldd	r24, Z+12	; 0x0c
    1b5c:	99 81       	ldd	r25, Y+1	; 0x01
    1b5e:	9e 83       	std	Y+6, r25	; 0x06
    1b60:	8d 83       	std	Y+5, r24	; 0x05
    1b62:	8d 81       	ldd	r24, Y+5	; 0x05
    1b64:	9e 81       	ldd	r25, Y+6	; 0x06
    1b66:	98 17       	cp	r25, r24
    1b68:	10 f4       	brcc	.+4      	; 0x1b6e <_proc_prio_control_running+0x40>
    1b6a:	8e 81       	ldd	r24, Y+6	; 0x06
    1b6c:	8d 83       	std	Y+5, r24	; 0x05
    1b6e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b70:	9a 83       	std	Y+2, r25	; 0x02
    1b72:	04 c0       	rjmp	.+8      	; 0x1b7c <_proc_prio_control_running+0x4e>
    }
    else
    {
        new_prio = proc->base_prio;
    1b74:	eb 81       	ldd	r30, Y+3	; 0x03
    1b76:	fc 81       	ldd	r31, Y+4	; 0x04
    1b78:	84 85       	ldd	r24, Z+12	; 0x0c
    1b7a:	8a 83       	std	Y+2, r24	; 0x02
    }
    if(((gitem_t *)proc)->group->prio != new_prio)
    1b7c:	eb 81       	ldd	r30, Y+3	; 0x03
    1b7e:	fc 81       	ldd	r31, Y+4	; 0x04
    1b80:	04 80       	ldd	r0, Z+4	; 0x04
    1b82:	f5 81       	ldd	r31, Z+5	; 0x05
    1b84:	e0 2d       	mov	r30, r0
    1b86:	92 81       	ldd	r25, Z+2	; 0x02
    1b88:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8a:	98 17       	cp	r25, r24
    1b8c:	b1 f0       	breq	.+44     	; 0x1bba <_proc_prio_control_running+0x8c>
    {
        _proc_stop_( proc );
    1b8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b90:	9c 81       	ldd	r25, Y+4	; 0x04
    1b92:	0e 94 a8 07 	call	0xf50	; 0xf50 <gitem_cut>
        ((gitem_t *)proc)->group->prio = new_prio;
    1b96:	eb 81       	ldd	r30, Y+3	; 0x03
    1b98:	fc 81       	ldd	r31, Y+4	; 0x04
    1b9a:	04 80       	ldd	r0, Z+4	; 0x04
    1b9c:	f5 81       	ldd	r31, Z+5	; 0x05
    1b9e:	e0 2d       	mov	r30, r0
    1ba0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba2:	82 83       	std	Z+2, r24	; 0x02
#ifdef CONFIG_MP
        spin_lock( &kernel.stat_lock );
        stat_inc( proc, (stat_t *)kernel.stat+proc->core_id );
        spin_unlock( &kernel.stat_lock );
#endif
        _proc_run_( proc );
    1ba4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba8:	20 91 a0 01 	lds	r18, 0x01A0
    1bac:	30 91 a1 01 	lds	r19, 0x01A1
    1bb0:	b9 01       	movw	r22, r18
    1bb2:	0e 94 4b 06 	call	0xc96	; 0xc96 <gitem_insert>
#ifdef CONFIG_MP
        resched(proc->core_id);
#else
        resched();
    1bb6:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
#endif
    }
}
    1bba:	26 96       	adiw	r28, 0x06	; 6
    1bbc:	0f b6       	in	r0, 0x3f	; 63
    1bbe:	f8 94       	cli
    1bc0:	de bf       	out	0x3e, r29	; 62
    1bc2:	0f be       	out	0x3f, r0	; 63
    1bc4:	cd bf       	out	0x3d, r28	; 61
    1bc6:	cf 91       	pop	r28
    1bc8:	df 91       	pop	r29
    1bca:	08 95       	ret

00001bcc <sched_init>:
*****************************************************************************************/
#include "../include/bugurt.h"
///========================================================================================
// Инициация
void sched_init(sched_t * sched, proc_t * idle)
{
    1bcc:	df 93       	push	r29
    1bce:	cf 93       	push	r28
    1bd0:	00 d0       	rcall	.+0      	; 0x1bd2 <sched_init+0x6>
    1bd2:	00 d0       	rcall	.+0      	; 0x1bd4 <sched_init+0x8>
    1bd4:	cd b7       	in	r28, 0x3d	; 61
    1bd6:	de b7       	in	r29, 0x3e	; 62
    1bd8:	9a 83       	std	Y+2, r25	; 0x02
    1bda:	89 83       	std	Y+1, r24	; 0x01
    1bdc:	7c 83       	std	Y+4, r23	; 0x04
    1bde:	6b 83       	std	Y+3, r22	; 0x03
#ifdef CONFIG_MP
    lock_t * sched_lock = &sched->lock;
    spin_init( sched_lock );
    spin_lock( sched_lock );
#endif // CONFIG_MP
    sched->ready = (xlist_t *)sched->plst;
    1be0:	89 81       	ldd	r24, Y+1	; 0x01
    1be2:	9a 81       	ldd	r25, Y+2	; 0x02
    1be4:	06 96       	adiw	r24, 0x06	; 6
    1be6:	e9 81       	ldd	r30, Y+1	; 0x01
    1be8:	fa 81       	ldd	r31, Y+2	; 0x02
    1bea:	93 83       	std	Z+3, r25	; 0x03
    1bec:	82 83       	std	Z+2, r24	; 0x02
    xlist_init( sched->ready );
    1bee:	e9 81       	ldd	r30, Y+1	; 0x01
    1bf0:	fa 81       	ldd	r31, Y+2	; 0x02
    1bf2:	82 81       	ldd	r24, Z+2	; 0x02
    1bf4:	93 81       	ldd	r25, Z+3	; 0x03
    1bf6:	0e 94 be 10 	call	0x217c	; 0x217c <xlist_init>
    sched->expired = (xlist_t *)sched->plst + 1;
    1bfa:	89 81       	ldd	r24, Y+1	; 0x01
    1bfc:	9a 81       	ldd	r25, Y+2	; 0x02
    1bfe:	47 96       	adiw	r24, 0x17	; 23
    1c00:	e9 81       	ldd	r30, Y+1	; 0x01
    1c02:	fa 81       	ldd	r31, Y+2	; 0x02
    1c04:	95 83       	std	Z+5, r25	; 0x05
    1c06:	84 83       	std	Z+4, r24	; 0x04
    xlist_init( sched->expired );
    1c08:	e9 81       	ldd	r30, Y+1	; 0x01
    1c0a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c0c:	84 81       	ldd	r24, Z+4	; 0x04
    1c0e:	95 81       	ldd	r25, Z+5	; 0x05
    1c10:	0e 94 be 10 	call	0x217c	; 0x217c <xlist_init>
    gitem_insert( (gitem_t *)idle, sched->ready );
    1c14:	8b 81       	ldd	r24, Y+3	; 0x03
    1c16:	9c 81       	ldd	r25, Y+4	; 0x04
    1c18:	e9 81       	ldd	r30, Y+1	; 0x01
    1c1a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c1c:	22 81       	ldd	r18, Z+2	; 0x02
    1c1e:	33 81       	ldd	r19, Z+3	; 0x03
    1c20:	b9 01       	movw	r22, r18
    1c22:	0e 94 4b 06 	call	0xc96	; 0xc96 <gitem_insert>
    sched->current_proc = idle;
    1c26:	e9 81       	ldd	r30, Y+1	; 0x01
    1c28:	fa 81       	ldd	r31, Y+2	; 0x02
    1c2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c2e:	91 83       	std	Z+1, r25	; 0x01
    1c30:	80 83       	st	Z, r24
    sched->nested_crit_sec = (count_t)0;//вообще это выполняется при запрещенных прерываниях, но не известно, на этом ли процессоре
    1c32:	e9 81       	ldd	r30, Y+1	; 0x01
    1c34:	fa 81       	ldd	r31, Y+2	; 0x02
    1c36:	11 a6       	std	Z+41, r1	; 0x29
    1c38:	10 a6       	std	Z+40, r1	; 0x28
#ifdef CONFIG_MP
    spin_unlock( sched_lock );
    stat_inc( idle, (stat_t *)kernel.stat + idle->core_id );
#endif // CONFIG_MP
}
    1c3a:	0f 90       	pop	r0
    1c3c:	0f 90       	pop	r0
    1c3e:	0f 90       	pop	r0
    1c40:	0f 90       	pop	r0
    1c42:	cf 91       	pop	r28
    1c44:	df 91       	pop	r29
    1c46:	08 95       	ret

00001c48 <_sched_list_switch>:
static void _sched_list_switch( sched_t * sched )
{
    1c48:	df 93       	push	r29
    1c4a:	cf 93       	push	r28
    1c4c:	00 d0       	rcall	.+0      	; 0x1c4e <_sched_list_switch+0x6>
    1c4e:	00 d0       	rcall	.+0      	; 0x1c50 <_sched_list_switch+0x8>
    1c50:	cd b7       	in	r28, 0x3d	; 61
    1c52:	de b7       	in	r29, 0x3e	; 62
    1c54:	9c 83       	std	Y+4, r25	; 0x04
    1c56:	8b 83       	std	Y+3, r24	; 0x03
    // Список ready опустел, переключаем списки
    if( sched->ready->index == (index_t)0 )
    1c58:	eb 81       	ldd	r30, Y+3	; 0x03
    1c5a:	fc 81       	ldd	r31, Y+4	; 0x04
    1c5c:	02 80       	ldd	r0, Z+2	; 0x02
    1c5e:	f3 81       	ldd	r31, Z+3	; 0x03
    1c60:	e0 2d       	mov	r30, r0
    1c62:	80 89       	ldd	r24, Z+16	; 0x10
    1c64:	88 23       	and	r24, r24
    1c66:	a1 f4       	brne	.+40     	; 0x1c90 <_sched_list_switch+0x48>
    {
        xlist_t * buf = sched->ready;
    1c68:	eb 81       	ldd	r30, Y+3	; 0x03
    1c6a:	fc 81       	ldd	r31, Y+4	; 0x04
    1c6c:	82 81       	ldd	r24, Z+2	; 0x02
    1c6e:	93 81       	ldd	r25, Z+3	; 0x03
    1c70:	9a 83       	std	Y+2, r25	; 0x02
    1c72:	89 83       	std	Y+1, r24	; 0x01
        sched->ready = sched->expired;
    1c74:	eb 81       	ldd	r30, Y+3	; 0x03
    1c76:	fc 81       	ldd	r31, Y+4	; 0x04
    1c78:	84 81       	ldd	r24, Z+4	; 0x04
    1c7a:	95 81       	ldd	r25, Z+5	; 0x05
    1c7c:	eb 81       	ldd	r30, Y+3	; 0x03
    1c7e:	fc 81       	ldd	r31, Y+4	; 0x04
    1c80:	93 83       	std	Z+3, r25	; 0x03
    1c82:	82 83       	std	Z+2, r24	; 0x02
        sched->expired = buf;
    1c84:	eb 81       	ldd	r30, Y+3	; 0x03
    1c86:	fc 81       	ldd	r31, Y+4	; 0x04
    1c88:	89 81       	ldd	r24, Y+1	; 0x01
    1c8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c8c:	95 83       	std	Z+5, r25	; 0x05
    1c8e:	84 83       	std	Z+4, r24	; 0x04
    }
}
    1c90:	0f 90       	pop	r0
    1c92:	0f 90       	pop	r0
    1c94:	0f 90       	pop	r0
    1c96:	0f 90       	pop	r0
    1c98:	cf 91       	pop	r28
    1c9a:	df 91       	pop	r29
    1c9c:	08 95       	ret

00001c9e <sched_schedule>:
2) В качестве аргумента передаем только тот объект, который управляет процессами
на исполняющем функции процессоре.
******************************************************************************************/
// Функция планирования, переключает процессы в обработчике системмного таймера
stack_t * sched_schedule( stack_t * current_sp )
{
    1c9e:	df 93       	push	r29
    1ca0:	cf 93       	push	r28
    1ca2:	cd b7       	in	r28, 0x3d	; 61
    1ca4:	de b7       	in	r29, 0x3e	; 62
    1ca6:	27 97       	sbiw	r28, 0x07	; 7
    1ca8:	0f b6       	in	r0, 0x3f	; 63
    1caa:	f8 94       	cli
    1cac:	de bf       	out	0x3e, r29	; 62
    1cae:	0f be       	out	0x3f, r0	; 63
    1cb0:	cd bf       	out	0x3d, r28	; 61
    1cb2:	9f 83       	std	Y+7, r25	; 0x07
    1cb4:	8e 83       	std	Y+6, r24	; 0x06
#ifdef CONFIG_MP
    sched_t * sched = (sched_t *)kernel.sched + current_core();
#else
    sched_t * sched = (sched_t *)&kernel.sched;
    1cb6:	8e e9       	ldi	r24, 0x9E	; 158
    1cb8:	91 e0       	ldi	r25, 0x01	; 1
    1cba:	9d 83       	std	Y+5, r25	; 0x05
    1cbc:	8c 83       	std	Y+4, r24	; 0x04
#endif // CONFIG_MP
    // Меняем только с локального процессора, блокировку sched->lock можно не захватывать!
    proc_t * current_proc = sched->current_proc;
    1cbe:	ec 81       	ldd	r30, Y+4	; 0x04
    1cc0:	fd 81       	ldd	r31, Y+5	; 0x05
    1cc2:	80 81       	ld	r24, Z
    1cc4:	91 81       	ldd	r25, Z+1	; 0x01
    1cc6:	9b 83       	std	Y+3, r25	; 0x03
    1cc8:	8a 83       	std	Y+2, r24	; 0x02
#ifdef CONFIG_MP
    // А вот эту блокировку обязательно надо захватить!
    spin_lock( &current_proc->lock );
#endif // CONFIG_MP
    // Сохранение указателя стека
    current_proc->spointer = current_sp;
    1cca:	ea 81       	ldd	r30, Y+2	; 0x02
    1ccc:	fb 81       	ldd	r31, Y+3	; 0x03
    1cce:	8e 81       	ldd	r24, Y+6	; 0x06
    1cd0:	9f 81       	ldd	r25, Y+7	; 0x07
    1cd2:	95 a7       	std	Z+45, r25	; 0x2d
    1cd4:	84 a7       	std	Z+44, r24	; 0x2c
    // Хук "сохранение контекста"
    if( current_proc->sv_hook )current_proc->sv_hook( current_proc->arg );
    1cd6:	ea 81       	ldd	r30, Y+2	; 0x02
    1cd8:	fb 81       	ldd	r31, Y+3	; 0x03
    1cda:	84 a1       	ldd	r24, Z+36	; 0x24
    1cdc:	95 a1       	ldd	r25, Z+37	; 0x25
    1cde:	00 97       	sbiw	r24, 0x00	; 0
    1ce0:	51 f0       	breq	.+20     	; 0x1cf6 <sched_schedule+0x58>
    1ce2:	ea 81       	ldd	r30, Y+2	; 0x02
    1ce4:	fb 81       	ldd	r31, Y+3	; 0x03
    1ce6:	24 a1       	ldd	r18, Z+36	; 0x24
    1ce8:	35 a1       	ldd	r19, Z+37	; 0x25
    1cea:	ea 81       	ldd	r30, Y+2	; 0x02
    1cec:	fb 81       	ldd	r31, Y+3	; 0x03
    1cee:	80 a5       	ldd	r24, Z+40	; 0x28
    1cf0:	91 a5       	ldd	r25, Z+41	; 0x29
    1cf2:	f9 01       	movw	r30, r18
    1cf4:	09 95       	icall
    // Проверяем, что процесс находится в списке ready
    if( (xlist_t *)((gitem_t *)current_proc)->group->link == sched->ready )
    1cf6:	ea 81       	ldd	r30, Y+2	; 0x02
    1cf8:	fb 81       	ldd	r31, Y+3	; 0x03
    1cfa:	04 80       	ldd	r0, Z+4	; 0x04
    1cfc:	f5 81       	ldd	r31, Z+5	; 0x05
    1cfe:	e0 2d       	mov	r30, r0
    1d00:	80 81       	ld	r24, Z
    1d02:	91 81       	ldd	r25, Z+1	; 0x01
    1d04:	9c 01       	movw	r18, r24
    1d06:	ec 81       	ldd	r30, Y+4	; 0x04
    1d08:	fd 81       	ldd	r31, Y+5	; 0x05
    1d0a:	82 81       	ldd	r24, Z+2	; 0x02
    1d0c:	93 81       	ldd	r25, Z+3	; 0x03
    1d0e:	28 17       	cp	r18, r24
    1d10:	39 07       	cpc	r19, r25
    1d12:	09 f0       	breq	.+2      	; 0x1d16 <sched_schedule+0x78>
    1d14:	4d c0       	rjmp	.+154    	; 0x1db0 <sched_schedule+0x112>
    {
        // Переключаем cписок на следующий за текущим процесс
#ifdef CONFIG_MP
        spin_lock( &sched->lock );
#endif // CONFIG_MP
        xlist_switch( sched->ready, ((gitem_t *)current_proc)->group->prio );
    1d16:	ec 81       	ldd	r30, Y+4	; 0x04
    1d18:	fd 81       	ldd	r31, Y+5	; 0x05
    1d1a:	82 81       	ldd	r24, Z+2	; 0x02
    1d1c:	93 81       	ldd	r25, Z+3	; 0x03
    1d1e:	ea 81       	ldd	r30, Y+2	; 0x02
    1d20:	fb 81       	ldd	r31, Y+3	; 0x03
    1d22:	04 80       	ldd	r0, Z+4	; 0x04
    1d24:	f5 81       	ldd	r31, Z+5	; 0x05
    1d26:	e0 2d       	mov	r30, r0
    1d28:	22 81       	ldd	r18, Z+2	; 0x02
    1d2a:	62 2f       	mov	r22, r18
    1d2c:	0e 94 14 11 	call	0x2228	; 0x2228 <xlist_switch>
#ifdef CONFIG_MP
        spin_unlock( &sched->lock );
#endif // CONFIG_MP
        //Проверяем, не истек ли квант времени процесса
        if( current_proc->timer > (timer_t)1 )current_proc->timer--;// Не истек, уменьшаем таймер
    1d30:	ea 81       	ldd	r30, Y+2	; 0x02
    1d32:	fb 81       	ldd	r31, Y+3	; 0x03
    1d34:	80 a1       	ldd	r24, Z+32	; 0x20
    1d36:	91 a1       	ldd	r25, Z+33	; 0x21
    1d38:	82 30       	cpi	r24, 0x02	; 2
    1d3a:	91 05       	cpc	r25, r1
    1d3c:	50 f0       	brcs	.+20     	; 0x1d52 <sched_schedule+0xb4>
    1d3e:	ea 81       	ldd	r30, Y+2	; 0x02
    1d40:	fb 81       	ldd	r31, Y+3	; 0x03
    1d42:	80 a1       	ldd	r24, Z+32	; 0x20
    1d44:	91 a1       	ldd	r25, Z+33	; 0x21
    1d46:	01 97       	sbiw	r24, 0x01	; 1
    1d48:	ea 81       	ldd	r30, Y+2	; 0x02
    1d4a:	fb 81       	ldd	r31, Y+3	; 0x03
    1d4c:	91 a3       	std	Z+33, r25	; 0x21
    1d4e:	80 a3       	std	Z+32, r24	; 0x20
    1d50:	2f c0       	rjmp	.+94     	; 0x1db0 <sched_schedule+0x112>
        {
            // Истек, вырезаем процесс из списка
#ifdef CONFIG_MP
            spin_lock( &sched->lock );
#endif // CONFIG_MP
            gitem_fast_cut( (gitem_t *)current_proc );
    1d52:	8a 81       	ldd	r24, Y+2	; 0x02
    1d54:	9b 81       	ldd	r25, Y+3	; 0x03
    1d56:	0e 94 22 07 	call	0xe44	; 0xe44 <gitem_fast_cut>
            // Обновили статистику после удаления процесса из списка ready
            stat_dec( current_proc, (stat_t *)kernel.stat + current_proc->core_id );
#endif // CONFIG_USE_ALB
#endif // CONFIG_MP
            // А что за процесс собственно?
            flag_t flags = current_proc->flags;
    1d5a:	ea 81       	ldd	r30, Y+2	; 0x02
    1d5c:	fb 81       	ldd	r31, Y+3	; 0x03
    1d5e:	83 85       	ldd	r24, Z+11	; 0x0b
    1d60:	89 83       	std	Y+1, r24	; 0x01
            if(
                (!(flags & PROC_FLG_RT))
    1d62:	89 81       	ldd	r24, Y+1	; 0x01
    1d64:	88 2f       	mov	r24, r24
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	81 70       	andi	r24, 0x01	; 1
    1d6a:	90 70       	andi	r25, 0x00	; 0
            stat_dec( current_proc, (stat_t *)kernel.stat + current_proc->core_id );
#endif // CONFIG_USE_ALB
#endif // CONFIG_MP
            // А что за процесс собственно?
            flag_t flags = current_proc->flags;
            if(
    1d6c:	00 97       	sbiw	r24, 0x00	; 0
    1d6e:	91 f4       	brne	.+36     	; 0x1d94 <sched_schedule+0xf6>
                ||(flags & PROC_FLG_HOLD)
#endif // CONFIG_HARD_RT
            )
            {
                //Процесс общего назначения, либо он удерживает общий ресурс, сбрасываем таймер и переносим в очередь expired
                current_proc->timer = current_proc->time_quant;
    1d70:	ea 81       	ldd	r30, Y+2	; 0x02
    1d72:	fb 81       	ldd	r31, Y+3	; 0x03
    1d74:	86 8d       	ldd	r24, Z+30	; 0x1e
    1d76:	97 8d       	ldd	r25, Z+31	; 0x1f
    1d78:	ea 81       	ldd	r30, Y+2	; 0x02
    1d7a:	fb 81       	ldd	r31, Y+3	; 0x03
    1d7c:	91 a3       	std	Z+33, r25	; 0x21
    1d7e:	80 a3       	std	Z+32, r24	; 0x20
#else // CONFIG_MP CONFIG_USE_ALB
                // Тупо переносим процесс в список expired
#ifdef CONFIG_MP
                spin_lock( &sched->lock );
#endif // CONFIG_MP
                gitem_insert( (gitem_t *)current_proc, sched->expired );
    1d80:	8a 81       	ldd	r24, Y+2	; 0x02
    1d82:	9b 81       	ldd	r25, Y+3	; 0x03
    1d84:	ec 81       	ldd	r30, Y+4	; 0x04
    1d86:	fd 81       	ldd	r31, Y+5	; 0x05
    1d88:	24 81       	ldd	r18, Z+4	; 0x04
    1d8a:	35 81       	ldd	r19, Z+5	; 0x05
    1d8c:	b9 01       	movw	r22, r18
    1d8e:	0e 94 4b 06 	call	0xc96	; 0xc96 <gitem_insert>
    1d92:	0e c0       	rjmp	.+28     	; 0x1db0 <sched_schedule+0x112>
                spin_lock( &kernel.stat_lock );
                stat_dec( current_proc, (stat_t *)kernel.stat + current_proc->core_id );
#endif // nCONFIG_USE_ALB
                spin_unlock( &kernel.stat_lock );
#endif // CONFIG_MP
                ((gitem_t *)current_proc)->group->link = (void *)0;// Просто вырезали из списка, как в gitem_cut
    1d94:	ea 81       	ldd	r30, Y+2	; 0x02
    1d96:	fb 81       	ldd	r31, Y+3	; 0x03
    1d98:	04 80       	ldd	r0, Z+4	; 0x04
    1d9a:	f5 81       	ldd	r31, Z+5	; 0x05
    1d9c:	e0 2d       	mov	r30, r0
    1d9e:	11 82       	std	Z+1, r1	; 0x01
    1da0:	10 82       	st	Z, r1
                current_proc->flags &= ~PROC_FLG_RUN;
    1da2:	ea 81       	ldd	r30, Y+2	; 0x02
    1da4:	fb 81       	ldd	r31, Y+3	; 0x03
    1da6:	83 85       	ldd	r24, Z+11	; 0x0b
    1da8:	8d 7f       	andi	r24, 0xFD	; 253
    1daa:	ea 81       	ldd	r30, Y+2	; 0x02
    1dac:	fb 81       	ldd	r31, Y+3	; 0x03
    1dae:	83 87       	std	Z+11, r24	; 0x0b
#ifdef CONFIG_MP
    //Текущий процесс более не нужен, освобождаем его блокировку
    spin_unlock( &current_proc->lock );
    spin_lock( &sched->lock );
#endif // CONFIG_MP
    _sched_list_switch( sched );
    1db0:	8c 81       	ldd	r24, Y+4	; 0x04
    1db2:	9d 81       	ldd	r25, Y+5	; 0x05
    1db4:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_sched_list_switch>
    // Изменять указатель будем при захваченной блокировке,
    // чтобы процессы на других процессорах не прочитали неизвестно что.
    current_proc = (proc_t *)xlist_head( sched->ready ); // Вытесняющая многозадачность же!
    1db8:	ec 81       	ldd	r30, Y+4	; 0x04
    1dba:	fd 81       	ldd	r31, Y+5	; 0x05
    1dbc:	82 81       	ldd	r24, Z+2	; 0x02
    1dbe:	93 81       	ldd	r25, Z+3	; 0x03
    1dc0:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <xlist_head>
    1dc4:	9b 83       	std	Y+3, r25	; 0x03
    1dc6:	8a 83       	std	Y+2, r24	; 0x02
    sched->current_proc = current_proc;
    1dc8:	ec 81       	ldd	r30, Y+4	; 0x04
    1dca:	fd 81       	ldd	r31, Y+5	; 0x05
    1dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dce:	9b 81       	ldd	r25, Y+3	; 0x03
    1dd0:	91 83       	std	Z+1, r25	; 0x01
    1dd2:	80 83       	st	Z, r24
#ifdef CONFIG_MP
    spin_unlock( &sched->lock );
    spin_lock( &current_proc->lock );
#endif // CONFIG_MP
    //Хук "восстановление контекста"
    if( current_proc->rs_hook )current_proc->rs_hook( current_proc->arg );
    1dd4:	ea 81       	ldd	r30, Y+2	; 0x02
    1dd6:	fb 81       	ldd	r31, Y+3	; 0x03
    1dd8:	86 a1       	ldd	r24, Z+38	; 0x26
    1dda:	97 a1       	ldd	r25, Z+39	; 0x27
    1ddc:	00 97       	sbiw	r24, 0x00	; 0
    1dde:	51 f0       	breq	.+20     	; 0x1df4 <sched_schedule+0x156>
    1de0:	ea 81       	ldd	r30, Y+2	; 0x02
    1de2:	fb 81       	ldd	r31, Y+3	; 0x03
    1de4:	26 a1       	ldd	r18, Z+38	; 0x26
    1de6:	37 a1       	ldd	r19, Z+39	; 0x27
    1de8:	ea 81       	ldd	r30, Y+2	; 0x02
    1dea:	fb 81       	ldd	r31, Y+3	; 0x03
    1dec:	80 a5       	ldd	r24, Z+40	; 0x28
    1dee:	91 a5       	ldd	r25, Z+41	; 0x29
    1df0:	f9 01       	movw	r30, r18
    1df2:	09 95       	icall
#ifdef CONFIG_MP
    stack_t * ret_sp = current_proc->spointer;
    spin_unlock( &current_proc->lock );
    return ret_sp;
#else
    return current_proc->spointer;
    1df4:	ea 81       	ldd	r30, Y+2	; 0x02
    1df6:	fb 81       	ldd	r31, Y+3	; 0x03
    1df8:	84 a5       	ldd	r24, Z+44	; 0x2c
    1dfa:	95 a5       	ldd	r25, Z+45	; 0x2d
#endif // CONFIG_MP
}
    1dfc:	27 96       	adiw	r28, 0x07	; 7
    1dfe:	0f b6       	in	r0, 0x3f	; 63
    1e00:	f8 94       	cli
    1e02:	de bf       	out	0x3e, r29	; 62
    1e04:	0f be       	out	0x3f, r0	; 63
    1e06:	cd bf       	out	0x3d, r28	; 61
    1e08:	cf 91       	pop	r28
    1e0a:	df 91       	pop	r29
    1e0c:	08 95       	ret

00001e0e <sched_reschedule>:
///----------------------------------------------------------------------------------------
// Функция перепланирования, переключает процессы в обработчике прерывания resched
stack_t * sched_reschedule( stack_t * current_sp )
{
    1e0e:	df 93       	push	r29
    1e10:	cf 93       	push	r28
    1e12:	00 d0       	rcall	.+0      	; 0x1e14 <sched_reschedule+0x6>
    1e14:	00 d0       	rcall	.+0      	; 0x1e16 <sched_reschedule+0x8>
    1e16:	00 d0       	rcall	.+0      	; 0x1e18 <sched_reschedule+0xa>
    1e18:	cd b7       	in	r28, 0x3d	; 61
    1e1a:	de b7       	in	r29, 0x3e	; 62
    1e1c:	9e 83       	std	Y+6, r25	; 0x06
    1e1e:	8d 83       	std	Y+5, r24	; 0x05
#ifdef CONFIG_MP
    sched_t * sched = (sched_t *)kernel.sched + current_core();
#else
    sched_t * sched = (sched_t *)&kernel.sched;
    1e20:	8e e9       	ldi	r24, 0x9E	; 158
    1e22:	91 e0       	ldi	r25, 0x01	; 1
    1e24:	9c 83       	std	Y+4, r25	; 0x04
    1e26:	8b 83       	std	Y+3, r24	; 0x03
#endif // CONFIG_MP
    // Меняем только с локального процессора, блокировку sched->lock можно не захватывать!
    proc_t * current_proc = sched->current_proc;
    1e28:	eb 81       	ldd	r30, Y+3	; 0x03
    1e2a:	fc 81       	ldd	r31, Y+4	; 0x04
    1e2c:	80 81       	ld	r24, Z
    1e2e:	91 81       	ldd	r25, Z+1	; 0x01
    1e30:	9a 83       	std	Y+2, r25	; 0x02
    1e32:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    // А вот эту блокировку обязательно надо захватить!
    spin_lock( &current_proc->lock );
#endif // CONFIG_MP
    // Сохранение указателя стека
    current_proc->spointer = current_sp;
    1e34:	e9 81       	ldd	r30, Y+1	; 0x01
    1e36:	fa 81       	ldd	r31, Y+2	; 0x02
    1e38:	8d 81       	ldd	r24, Y+5	; 0x05
    1e3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e3c:	95 a7       	std	Z+45, r25	; 0x2d
    1e3e:	84 a7       	std	Z+44, r24	; 0x2c
    // Хук "сохранение контекста"
    if( current_proc->sv_hook )current_proc->sv_hook( current_proc->arg );
    1e40:	e9 81       	ldd	r30, Y+1	; 0x01
    1e42:	fa 81       	ldd	r31, Y+2	; 0x02
    1e44:	84 a1       	ldd	r24, Z+36	; 0x24
    1e46:	95 a1       	ldd	r25, Z+37	; 0x25
    1e48:	00 97       	sbiw	r24, 0x00	; 0
    1e4a:	51 f0       	breq	.+20     	; 0x1e60 <sched_reschedule+0x52>
    1e4c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e4e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e50:	24 a1       	ldd	r18, Z+36	; 0x24
    1e52:	35 a1       	ldd	r19, Z+37	; 0x25
    1e54:	e9 81       	ldd	r30, Y+1	; 0x01
    1e56:	fa 81       	ldd	r31, Y+2	; 0x02
    1e58:	80 a5       	ldd	r24, Z+40	; 0x28
    1e5a:	91 a5       	ldd	r25, Z+41	; 0x29
    1e5c:	f9 01       	movw	r30, r18
    1e5e:	09 95       	icall
#ifdef CONFIG_MP
    spin_unlock( &current_proc->lock );
    spin_lock( &sched->lock );
#endif // CONFIG_MP
    _sched_list_switch( sched );
    1e60:	8b 81       	ldd	r24, Y+3	; 0x03
    1e62:	9c 81       	ldd	r25, Y+4	; 0x04
    1e64:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_sched_list_switch>
    current_proc = (proc_t *)xlist_head( sched->ready ); // Вытесняющая многозадачность же!
    1e68:	eb 81       	ldd	r30, Y+3	; 0x03
    1e6a:	fc 81       	ldd	r31, Y+4	; 0x04
    1e6c:	82 81       	ldd	r24, Z+2	; 0x02
    1e6e:	93 81       	ldd	r25, Z+3	; 0x03
    1e70:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <xlist_head>
    1e74:	9a 83       	std	Y+2, r25	; 0x02
    1e76:	89 83       	std	Y+1, r24	; 0x01
    sched->current_proc = current_proc;
    1e78:	eb 81       	ldd	r30, Y+3	; 0x03
    1e7a:	fc 81       	ldd	r31, Y+4	; 0x04
    1e7c:	89 81       	ldd	r24, Y+1	; 0x01
    1e7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e80:	91 83       	std	Z+1, r25	; 0x01
    1e82:	80 83       	st	Z, r24

#ifdef CONFIG_MP
    spin_lock(&current_proc->lock);
#endif // CONFIG_MP
    //Хук "восстановление контекста"
    if( current_proc->rs_hook )current_proc->rs_hook( current_proc->arg );
    1e84:	e9 81       	ldd	r30, Y+1	; 0x01
    1e86:	fa 81       	ldd	r31, Y+2	; 0x02
    1e88:	86 a1       	ldd	r24, Z+38	; 0x26
    1e8a:	97 a1       	ldd	r25, Z+39	; 0x27
    1e8c:	00 97       	sbiw	r24, 0x00	; 0
    1e8e:	51 f0       	breq	.+20     	; 0x1ea4 <sched_reschedule+0x96>
    1e90:	e9 81       	ldd	r30, Y+1	; 0x01
    1e92:	fa 81       	ldd	r31, Y+2	; 0x02
    1e94:	26 a1       	ldd	r18, Z+38	; 0x26
    1e96:	37 a1       	ldd	r19, Z+39	; 0x27
    1e98:	e9 81       	ldd	r30, Y+1	; 0x01
    1e9a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e9c:	80 a5       	ldd	r24, Z+40	; 0x28
    1e9e:	91 a5       	ldd	r25, Z+41	; 0x29
    1ea0:	f9 01       	movw	r30, r18
    1ea2:	09 95       	icall
#ifdef CONFIG_MP
    stack_t * ret_sp = current_proc->spointer;
    spin_unlock( &current_proc->lock );
    return ret_sp;
#else
    return current_proc->spointer;
    1ea4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ea6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ea8:	84 a5       	ldd	r24, Z+44	; 0x2c
    1eaa:	95 a5       	ldd	r25, Z+45	; 0x2d
#endif // CONFIG_MP
}
    1eac:	26 96       	adiw	r28, 0x06	; 6
    1eae:	0f b6       	in	r0, 0x3f	; 63
    1eb0:	f8 94       	cli
    1eb2:	de bf       	out	0x3e, r29	; 62
    1eb4:	0f be       	out	0x3f, r0	; 63
    1eb6:	cd bf       	out	0x3d, r28	; 61
    1eb8:	cf 91       	pop	r28
    1eba:	df 91       	pop	r29
    1ebc:	08 95       	ret

00001ebe <sem_init_isr>:
*****************************************************************************************/
#include "../include/bugurt.h"

// Инициализация
void sem_init_isr( sem_t * sem, count_t count )
{
    1ebe:	df 93       	push	r29
    1ec0:	cf 93       	push	r28
    1ec2:	00 d0       	rcall	.+0      	; 0x1ec4 <sem_init_isr+0x6>
    1ec4:	00 d0       	rcall	.+0      	; 0x1ec6 <sem_init_isr+0x8>
    1ec6:	cd b7       	in	r28, 0x3d	; 61
    1ec8:	de b7       	in	r29, 0x3e	; 62
    1eca:	9a 83       	std	Y+2, r25	; 0x02
    1ecc:	89 83       	std	Y+1, r24	; 0x01
    1ece:	7c 83       	std	Y+4, r23	; 0x04
    1ed0:	6b 83       	std	Y+3, r22	; 0x03
    xlist_init( (xlist_t *)sem );
    1ed2:	89 81       	ldd	r24, Y+1	; 0x01
    1ed4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ed6:	0e 94 be 10 	call	0x217c	; 0x217c <xlist_init>
    sem->counter = count;
    1eda:	e9 81       	ldd	r30, Y+1	; 0x01
    1edc:	fa 81       	ldd	r31, Y+2	; 0x02
    1ede:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee2:	92 8b       	std	Z+18, r25	; 0x12
    1ee4:	81 8b       	std	Z+17, r24	; 0x11
}
    1ee6:	0f 90       	pop	r0
    1ee8:	0f 90       	pop	r0
    1eea:	0f 90       	pop	r0
    1eec:	0f 90       	pop	r0
    1eee:	cf 91       	pop	r28
    1ef0:	df 91       	pop	r29
    1ef2:	08 95       	ret

00001ef4 <_sem_lock_stage_1>:

// То же, для внутреннего использования
bool_t _sem_lock_stage_1( sem_t * sem )
{
    1ef4:	df 93       	push	r29
    1ef6:	cf 93       	push	r28
    1ef8:	00 d0       	rcall	.+0      	; 0x1efa <_sem_lock_stage_1+0x6>
    1efa:	00 d0       	rcall	.+0      	; 0x1efc <_sem_lock_stage_1+0x8>
    1efc:	0f 92       	push	r0
    1efe:	cd b7       	in	r28, 0x3d	; 61
    1f00:	de b7       	in	r29, 0x3e	; 62
    1f02:	9d 83       	std	Y+5, r25	; 0x05
    1f04:	8c 83       	std	Y+4, r24	; 0x04

    bool_t ret = 0;
    1f06:	1b 82       	std	Y+3, r1	; 0x03
    if( sem->counter != 0 )
    1f08:	ec 81       	ldd	r30, Y+4	; 0x04
    1f0a:	fd 81       	ldd	r31, Y+5	; 0x05
    1f0c:	81 89       	ldd	r24, Z+17	; 0x11
    1f0e:	92 89       	ldd	r25, Z+18	; 0x12
    1f10:	00 97       	sbiw	r24, 0x00	; 0
    1f12:	61 f0       	breq	.+24     	; 0x1f2c <_sem_lock_stage_1+0x38>
    {
        sem->counter--;
    1f14:	ec 81       	ldd	r30, Y+4	; 0x04
    1f16:	fd 81       	ldd	r31, Y+5	; 0x05
    1f18:	81 89       	ldd	r24, Z+17	; 0x11
    1f1a:	92 89       	ldd	r25, Z+18	; 0x12
    1f1c:	01 97       	sbiw	r24, 0x01	; 1
    1f1e:	ec 81       	ldd	r30, Y+4	; 0x04
    1f20:	fd 81       	ldd	r31, Y+5	; 0x05
    1f22:	92 8b       	std	Z+18, r25	; 0x12
    1f24:	81 8b       	std	Z+17, r24	; 0x11
#ifdef CONFIG_MP
        spin_unlock( &sem->lock );// Освобождение блокировки семафора
#endif //CONFIG_MP
        ret = (bool_t)1;
    1f26:	81 e0       	ldi	r24, 0x01	; 1
    1f28:	8b 83       	std	Y+3, r24	; 0x03
    1f2a:	16 c0       	rjmp	.+44     	; 0x1f58 <_sem_lock_stage_1+0x64>
    }
    else
    {
        proc_t * proc = current_proc();
    1f2c:	0e 94 cc 00 	call	0x198	; 0x198 <current_proc>
    1f30:	9a 83       	std	Y+2, r25	; 0x02
    1f32:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
        spin_lock( &proc->lock );// Захват блокировки процесса
#endif //CONFIG_MP
        proc->flags |= PROC_FLG_QUEUE;
    1f34:	e9 81       	ldd	r30, Y+1	; 0x01
    1f36:	fa 81       	ldd	r31, Y+2	; 0x02
    1f38:	83 85       	ldd	r24, Z+11	; 0x0b
    1f3a:	88 60       	ori	r24, 0x08	; 8
    1f3c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f3e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f40:	83 87       	std	Z+11, r24	; 0x0b
        _proc_stop( proc );
    1f42:	89 81       	ldd	r24, Y+1	; 0x01
    1f44:	9a 81       	ldd	r25, Y+2	; 0x02
    1f46:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <_proc_stop>
        gitem_insert( (gitem_t *)proc, (xlist_t *)sem );
    1f4a:	89 81       	ldd	r24, Y+1	; 0x01
    1f4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f4e:	2c 81       	ldd	r18, Y+4	; 0x04
    1f50:	3d 81       	ldd	r19, Y+5	; 0x05
    1f52:	b9 01       	movw	r22, r18
    1f54:	0e 94 4b 06 	call	0xc96	; 0xc96 <gitem_insert>
#ifdef CONFIG_MP
        spin_unlock( &proc->lock );// Освобождение блокировки процесса
#endif //CONFIG_MP
    }
    return ret;
    1f58:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1f5a:	0f 90       	pop	r0
    1f5c:	0f 90       	pop	r0
    1f5e:	0f 90       	pop	r0
    1f60:	0f 90       	pop	r0
    1f62:	0f 90       	pop	r0
    1f64:	cf 91       	pop	r28
    1f66:	df 91       	pop	r29
    1f68:	08 95       	ret

00001f6a <_sem_unlock>:

void _sem_unlock( sem_t * sem )
{
    1f6a:	df 93       	push	r29
    1f6c:	cf 93       	push	r28
    1f6e:	00 d0       	rcall	.+0      	; 0x1f70 <_sem_unlock+0x6>
    1f70:	00 d0       	rcall	.+0      	; 0x1f72 <_sem_unlock+0x8>
    1f72:	cd b7       	in	r28, 0x3d	; 61
    1f74:	de b7       	in	r29, 0x3e	; 62
    1f76:	9c 83       	std	Y+4, r25	; 0x04
    1f78:	8b 83       	std	Y+3, r24	; 0x03
    if( ((xlist_t *)sem)->index == (index_t)0  )
    1f7a:	eb 81       	ldd	r30, Y+3	; 0x03
    1f7c:	fc 81       	ldd	r31, Y+4	; 0x04
    1f7e:	80 89       	ldd	r24, Z+16	; 0x10
    1f80:	88 23       	and	r24, r24
    1f82:	51 f4       	brne	.+20     	; 0x1f98 <_sem_unlock+0x2e>
    {
        sem->counter++;
    1f84:	eb 81       	ldd	r30, Y+3	; 0x03
    1f86:	fc 81       	ldd	r31, Y+4	; 0x04
    1f88:	81 89       	ldd	r24, Z+17	; 0x11
    1f8a:	92 89       	ldd	r25, Z+18	; 0x12
    1f8c:	01 96       	adiw	r24, 0x01	; 1
    1f8e:	eb 81       	ldd	r30, Y+3	; 0x03
    1f90:	fc 81       	ldd	r31, Y+4	; 0x04
    1f92:	92 8b       	std	Z+18, r25	; 0x12
    1f94:	81 8b       	std	Z+17, r24	; 0x11
    1f96:	15 c0       	rjmp	.+42     	; 0x1fc2 <_sem_unlock+0x58>
#ifdef CONFIG_MP
        spin_unlock( &sem->lock );
#endif //CONFIG_MP
        return;
    }
    proc_t * proc = (proc_t *)xlist_head((xlist_t *)sem);
    1f98:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f9c:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <xlist_head>
    1fa0:	9a 83       	std	Y+2, r25	; 0x02
    1fa2:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );// Захват спин-блокировки процесса
#endif //CONFIG_MP
    proc->flags &= ~PROC_FLG_QUEUE;
    1fa4:	e9 81       	ldd	r30, Y+1	; 0x01
    1fa6:	fa 81       	ldd	r31, Y+2	; 0x02
    1fa8:	83 85       	ldd	r24, Z+11	; 0x0b
    1faa:	87 7f       	andi	r24, 0xF7	; 247
    1fac:	e9 81       	ldd	r30, Y+1	; 0x01
    1fae:	fa 81       	ldd	r31, Y+2	; 0x02
    1fb0:	83 87       	std	Z+11, r24	; 0x0b
    gitem_cut( (gitem_t *)proc );
    1fb2:	89 81       	ldd	r24, Y+1	; 0x01
    1fb4:	9a 81       	ldd	r25, Y+2	; 0x02
    1fb6:	0e 94 a8 07 	call	0xf50	; 0xf50 <gitem_cut>
    _proc_run( proc );
    1fba:	89 81       	ldd	r24, Y+1	; 0x01
    1fbc:	9a 81       	ldd	r25, Y+2	; 0x02
    1fbe:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <_proc_run>
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );// Освобождение спин-блокировки процесса
#endif //CONFIG_MP
}
    1fc2:	0f 90       	pop	r0
    1fc4:	0f 90       	pop	r0
    1fc6:	0f 90       	pop	r0
    1fc8:	0f 90       	pop	r0
    1fca:	cf 91       	pop	r28
    1fcc:	df 91       	pop	r29
    1fce:	08 95       	ret

00001fd0 <sig_init_isr>:
*****************************************************************************************/
#include "../include/bugurt.h"
///========================================================================================
// Инициация
void sig_init_isr( sig_t * sig )
{
    1fd0:	df 93       	push	r29
    1fd2:	cf 93       	push	r28
    1fd4:	00 d0       	rcall	.+0      	; 0x1fd6 <sig_init_isr+0x6>
    1fd6:	cd b7       	in	r28, 0x3d	; 61
    1fd8:	de b7       	in	r29, 0x3e	; 62
    1fda:	9a 83       	std	Y+2, r25	; 0x02
    1fdc:	89 83       	std	Y+1, r24	; 0x01
    {
        xlist_init( (xlist_t *)sig->sig_list + i );
        stat_init( (stat_t *)sig->sig_stat + i );
    }
#else
    xlist_init( (xlist_t *)sig );
    1fde:	89 81       	ldd	r24, Y+1	; 0x01
    1fe0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fe2:	0e 94 be 10 	call	0x217c	; 0x217c <xlist_init>
#endif
}
    1fe6:	0f 90       	pop	r0
    1fe8:	0f 90       	pop	r0
    1fea:	cf 91       	pop	r28
    1fec:	df 91       	pop	r29
    1fee:	08 95       	ret

00001ff0 <sig_wait_stage_1_isr>:
///========================================================================================
// Это выполнится при постановке процесса в список ожидания сигнала
void sig_wait_stage_1_isr( sig_t * sig )
{
    1ff0:	df 93       	push	r29
    1ff2:	cf 93       	push	r28
    1ff4:	00 d0       	rcall	.+0      	; 0x1ff6 <sig_wait_stage_1_isr+0x6>
    1ff6:	00 d0       	rcall	.+0      	; 0x1ff8 <sig_wait_stage_1_isr+0x8>
    1ff8:	cd b7       	in	r28, 0x3d	; 61
    1ffa:	de b7       	in	r29, 0x3e	; 62
    1ffc:	9c 83       	std	Y+4, r25	; 0x04
    1ffe:	8b 83       	std	Y+3, r24	; 0x03
#ifdef CONFIG_MP
    spin_lock( &sig->lock );
#endif // CONFIG_MP
    proc_t * proc = current_proc();
    2000:	0e 94 cc 00 	call	0x198	; 0x198 <current_proc>
    2004:	9a 83       	std	Y+2, r25	; 0x02
    2006:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    // Останавливаем процесс
    _proc_stop(proc);
    2008:	89 81       	ldd	r24, Y+1	; 0x01
    200a:	9a 81       	ldd	r25, Y+2	; 0x02
    200c:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <_proc_stop>
    proc->flags |= PROC_FLG_WAIT;
    2010:	e9 81       	ldd	r30, Y+1	; 0x01
    2012:	fa 81       	ldd	r31, Y+2	; 0x02
    2014:	83 85       	ldd	r24, Z+11	; 0x0b
    2016:	80 61       	ori	r24, 0x10	; 16
    2018:	e9 81       	ldd	r30, Y+1	; 0x01
    201a:	fa 81       	ldd	r31, Y+2	; 0x02
    201c:	83 87       	std	Z+11, r24	; 0x0b
        stat_inc( proc, (stat_t *)sig->sig_stat + sig_core );
    }
    spin_unlock( &proc->lock );
    spin_unlock( &sig->lock );
#else
    gitem_insert_group( (gitem_t *)proc, (xlist_t *)sig );
    201e:	89 81       	ldd	r24, Y+1	; 0x01
    2020:	9a 81       	ldd	r25, Y+2	; 0x02
    2022:	2b 81       	ldd	r18, Y+3	; 0x03
    2024:	3c 81       	ldd	r19, Y+4	; 0x04
    2026:	b9 01       	movw	r22, r18
    2028:	0e 94 a7 06 	call	0xd4e	; 0xd4e <gitem_insert_group>
#endif //CONFIG_MP
}
    202c:	0f 90       	pop	r0
    202e:	0f 90       	pop	r0
    2030:	0f 90       	pop	r0
    2032:	0f 90       	pop	r0
    2034:	cf 91       	pop	r28
    2036:	df 91       	pop	r29
    2038:	08 95       	ret

0000203a <sig_signal_isr>:
    enable_interrupts();
}
///========================================================================================
// Тоже самое что и предыдущие, олько для вызова из обработчиков прерываний и из критических секций
void sig_signal_isr( sig_t * sig )
{
    203a:	df 93       	push	r29
    203c:	cf 93       	push	r28
    203e:	00 d0       	rcall	.+0      	; 0x2040 <sig_signal_isr+0x6>
    2040:	00 d0       	rcall	.+0      	; 0x2042 <sig_signal_isr+0x8>
    2042:	cd b7       	in	r28, 0x3d	; 61
    2044:	de b7       	in	r29, 0x3e	; 62
    2046:	9c 83       	std	Y+4, r25	; 0x04
    2048:	8b 83       	std	Y+3, r24	; 0x03
    }
    resched(core);// Перепланировка
    spin_unlock( &proc->lock );// Освобождение блокировки процесса
    spin_unlock( &sig->lock );// Освобождение блокировки сигнала
#else
    if( ((xlist_t *)sig)->index == (index_t)0 )return;
    204a:	eb 81       	ldd	r30, Y+3	; 0x03
    204c:	fc 81       	ldd	r31, Y+4	; 0x04
    204e:	80 89       	ldd	r24, Z+16	; 0x10
    2050:	88 23       	and	r24, r24
    2052:	a9 f0       	breq	.+42     	; 0x207e <sig_signal_isr+0x44>
    proc_t * proc = (proc_t *)xlist_head( (xlist_t *)sig );
    2054:	8b 81       	ldd	r24, Y+3	; 0x03
    2056:	9c 81       	ldd	r25, Y+4	; 0x04
    2058:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <xlist_head>
    205c:	9a 83       	std	Y+2, r25	; 0x02
    205e:	89 83       	std	Y+1, r24	; 0x01
    gitem_fast_cut( (gitem_t *)proc );
    2060:	89 81       	ldd	r24, Y+1	; 0x01
    2062:	9a 81       	ldd	r25, Y+2	; 0x02
    2064:	0e 94 22 07 	call	0xe44	; 0xe44 <gitem_fast_cut>
    gitem_insert( (gitem_t *)proc, kernel.sched.ready );
    2068:	89 81       	ldd	r24, Y+1	; 0x01
    206a:	9a 81       	ldd	r25, Y+2	; 0x02
    206c:	20 91 a0 01 	lds	r18, 0x01A0
    2070:	30 91 a1 01 	lds	r19, 0x01A1
    2074:	b9 01       	movw	r22, r18
    2076:	0e 94 4b 06 	call	0xc96	; 0xc96 <gitem_insert>
    resched();
    207a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
#endif //CONFIG_MP
}
    207e:	0f 90       	pop	r0
    2080:	0f 90       	pop	r0
    2082:	0f 90       	pop	r0
    2084:	0f 90       	pop	r0
    2086:	cf 91       	pop	r28
    2088:	df 91       	pop	r29
    208a:	08 95       	ret

0000208c <sig_broadcast_isr>:
///----------------------------------------------------------------------------------------
void sig_broadcast_isr( sig_t * sig )
{
    208c:	df 93       	push	r29
    208e:	cf 93       	push	r28
    2090:	00 d0       	rcall	.+0      	; 0x2092 <sig_broadcast_isr+0x6>
    2092:	cd b7       	in	r28, 0x3d	; 61
    2094:	de b7       	in	r29, 0x3e	; 62
    2096:	9a 83       	std	Y+2, r25	; 0x02
    2098:	89 83       	std	Y+1, r24	; 0x01

        resched(core);
    }
    spin_unlock( &sig->lock );
#else
    gitem_xlist_merge( (xlist_t *)sig, kernel.sched.ready );
    209a:	20 91 a0 01 	lds	r18, 0x01A0
    209e:	30 91 a1 01 	lds	r19, 0x01A1
    20a2:	89 81       	ldd	r24, Y+1	; 0x01
    20a4:	9a 81       	ldd	r25, Y+2	; 0x02
    20a6:	b9 01       	movw	r22, r18
    20a8:	0e 94 bf 07 	call	0xf7e	; 0xf7e <gitem_xlist_merge>
    resched();
    20ac:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
#endif //CONFIG_MP
}
    20b0:	0f 90       	pop	r0
    20b2:	0f 90       	pop	r0
    20b4:	cf 91       	pop	r28
    20b6:	df 91       	pop	r29
    20b8:	08 95       	ret

000020ba <_clear_timer>:
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
///========================================================================================
void _clear_timer(timer_t * t)
{
    20ba:	df 93       	push	r29
    20bc:	cf 93       	push	r28
    20be:	00 d0       	rcall	.+0      	; 0x20c0 <_clear_timer+0x6>
    20c0:	cd b7       	in	r28, 0x3d	; 61
    20c2:	de b7       	in	r29, 0x3e	; 62
    20c4:	9a 83       	std	Y+2, r25	; 0x02
    20c6:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    core_id_t current_core = _enter_crit_sec();
    spin_lock( &kernel.timer_lock );
#else
    enter_crit_sec();
    20c8:	0e 94 f5 05 	call	0xbea	; 0xbea <enter_crit_sec>
#endif //CONFIG_MP
    *t = kernel.timer;
    20cc:	80 91 f8 01 	lds	r24, 0x01F8
    20d0:	90 91 f9 01 	lds	r25, 0x01F9
    20d4:	e9 81       	ldd	r30, Y+1	; 0x01
    20d6:	fa 81       	ldd	r31, Y+2	; 0x02
    20d8:	91 83       	std	Z+1, r25	; 0x01
    20da:	80 83       	st	Z, r24
#ifdef CONFIG_MP
    spin_unlock( &kernel.timer_lock );
    _exit_crit_sec(current_core);
#else
    exit_crit_sec();
    20dc:	0e 94 07 06 	call	0xc0e	; 0xc0e <exit_crit_sec>
#endif //CONFIG_MP
}
    20e0:	0f 90       	pop	r0
    20e2:	0f 90       	pop	r0
    20e4:	cf 91       	pop	r28
    20e6:	df 91       	pop	r29
    20e8:	08 95       	ret

000020ea <_timer>:
///----------------------------------------------------------------------------------------
timer_t _timer(timer_t t)
{
    20ea:	df 93       	push	r29
    20ec:	cf 93       	push	r28
    20ee:	00 d0       	rcall	.+0      	; 0x20f0 <_timer+0x6>
    20f0:	00 d0       	rcall	.+0      	; 0x20f2 <_timer+0x8>
    20f2:	cd b7       	in	r28, 0x3d	; 61
    20f4:	de b7       	in	r29, 0x3e	; 62
    20f6:	9c 83       	std	Y+4, r25	; 0x04
    20f8:	8b 83       	std	Y+3, r24	; 0x03
    timer_t ret;
#ifdef CONFIG_MP
    core_id_t current_core = _enter_crit_sec();
    spin_lock( &kernel.timer_lock );
#else
    enter_crit_sec();
    20fa:	0e 94 f5 05 	call	0xbea	; 0xbea <enter_crit_sec>
#endif //CONFIG_MP
    ret = kernel.timer - t;
    20fe:	20 91 f8 01 	lds	r18, 0x01F8
    2102:	30 91 f9 01 	lds	r19, 0x01F9
    2106:	8b 81       	ldd	r24, Y+3	; 0x03
    2108:	9c 81       	ldd	r25, Y+4	; 0x04
    210a:	a9 01       	movw	r20, r18
    210c:	48 1b       	sub	r20, r24
    210e:	59 0b       	sbc	r21, r25
    2110:	ca 01       	movw	r24, r20
    2112:	9a 83       	std	Y+2, r25	; 0x02
    2114:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_unlock( &kernel.timer_lock );
    _exit_crit_sec(current_core);
#else
    exit_crit_sec();
    2116:	0e 94 07 06 	call	0xc0e	; 0xc0e <exit_crit_sec>
#endif //CONFIG_MP
    return ret;
    211a:	89 81       	ldd	r24, Y+1	; 0x01
    211c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    211e:	0f 90       	pop	r0
    2120:	0f 90       	pop	r0
    2122:	0f 90       	pop	r0
    2124:	0f 90       	pop	r0
    2126:	cf 91       	pop	r28
    2128:	df 91       	pop	r29
    212a:	08 95       	ret

0000212c <wait_time>:

///----------------------------------------------------------------------------------------
void wait_time(timer_t time)
{
    212c:	df 93       	push	r29
    212e:	cf 93       	push	r28
    2130:	00 d0       	rcall	.+0      	; 0x2132 <wait_time+0x6>
    2132:	00 d0       	rcall	.+0      	; 0x2134 <wait_time+0x8>
    2134:	0f 92       	push	r0
    2136:	cd b7       	in	r28, 0x3d	; 61
    2138:	de b7       	in	r29, 0x3e	; 62
    213a:	9d 83       	std	Y+5, r25	; 0x05
    213c:	8c 83       	std	Y+4, r24	; 0x04
    timer_t tmr;
    bool_t roll=(bool_t)1;
    213e:	81 e0       	ldi	r24, 0x01	; 1
    2140:	89 83       	std	Y+1, r24	; 0x01
    CLEAR_TIMER(tmr);
    2142:	ce 01       	movw	r24, r28
    2144:	02 96       	adiw	r24, 0x02	; 2
    2146:	0e 94 5d 10 	call	0x20ba	; 0x20ba <_clear_timer>
    214a:	0d c0       	rjmp	.+26     	; 0x2166 <wait_time+0x3a>
    while((bool_t)roll)
    {
        roll = (bool_t)( TIMER(tmr) < (timer_t)time );
    214c:	8a 81       	ldd	r24, Y+2	; 0x02
    214e:	9b 81       	ldd	r25, Y+3	; 0x03
    2150:	0e 94 75 10 	call	0x20ea	; 0x20ea <_timer>
    2154:	9c 01       	movw	r18, r24
    2156:	19 82       	std	Y+1, r1	; 0x01
    2158:	8c 81       	ldd	r24, Y+4	; 0x04
    215a:	9d 81       	ldd	r25, Y+5	; 0x05
    215c:	28 17       	cp	r18, r24
    215e:	39 07       	cpc	r19, r25
    2160:	10 f4       	brcc	.+4      	; 0x2166 <wait_time+0x3a>
    2162:	81 e0       	ldi	r24, 0x01	; 1
    2164:	89 83       	std	Y+1, r24	; 0x01
void wait_time(timer_t time)
{
    timer_t tmr;
    bool_t roll=(bool_t)1;
    CLEAR_TIMER(tmr);
    while((bool_t)roll)
    2166:	89 81       	ldd	r24, Y+1	; 0x01
    2168:	88 23       	and	r24, r24
    216a:	81 f7       	brne	.-32     	; 0x214c <wait_time+0x20>
    {
        roll = (bool_t)( TIMER(tmr) < (timer_t)time );
    }
}
    216c:	0f 90       	pop	r0
    216e:	0f 90       	pop	r0
    2170:	0f 90       	pop	r0
    2172:	0f 90       	pop	r0
    2174:	0f 90       	pop	r0
    2176:	cf 91       	pop	r28
    2178:	df 91       	pop	r29
    217a:	08 95       	ret

0000217c <xlist_init>:
**********************************************/
//Инициация
void xlist_init(
    xlist_t * xlist
)
{
    217c:	df 93       	push	r29
    217e:	cf 93       	push	r28
    2180:	00 d0       	rcall	.+0      	; 0x2182 <xlist_init+0x6>
    2182:	00 d0       	rcall	.+0      	; 0x2184 <xlist_init+0x8>
    2184:	cd b7       	in	r28, 0x3d	; 61
    2186:	de b7       	in	r29, 0x3e	; 62
    2188:	9c 83       	std	Y+4, r25	; 0x04
    218a:	8b 83       	std	Y+3, r24	; 0x03
    count_t i;
    //список пуст
    xlist->index = (index_t)0;
    218c:	eb 81       	ldd	r30, Y+3	; 0x03
    218e:	fc 81       	ldd	r31, Y+4	; 0x04
    2190:	10 8a       	std	Z+16, r1	; 0x10
    //обнуляем указатели
    for( i = 0; i < BITS_IN_INDEX_T; i++ )xlist->item[i] = (item_t *)0;
    2192:	1a 82       	std	Y+2, r1	; 0x02
    2194:	19 82       	std	Y+1, r1	; 0x01
    2196:	10 c0       	rjmp	.+32     	; 0x21b8 <xlist_init+0x3c>
    2198:	89 81       	ldd	r24, Y+1	; 0x01
    219a:	9a 81       	ldd	r25, Y+2	; 0x02
    219c:	2b 81       	ldd	r18, Y+3	; 0x03
    219e:	3c 81       	ldd	r19, Y+4	; 0x04
    21a0:	88 0f       	add	r24, r24
    21a2:	99 1f       	adc	r25, r25
    21a4:	f9 01       	movw	r30, r18
    21a6:	e8 0f       	add	r30, r24
    21a8:	f9 1f       	adc	r31, r25
    21aa:	11 82       	std	Z+1, r1	; 0x01
    21ac:	10 82       	st	Z, r1
    21ae:	89 81       	ldd	r24, Y+1	; 0x01
    21b0:	9a 81       	ldd	r25, Y+2	; 0x02
    21b2:	01 96       	adiw	r24, 0x01	; 1
    21b4:	9a 83       	std	Y+2, r25	; 0x02
    21b6:	89 83       	std	Y+1, r24	; 0x01
    21b8:	89 81       	ldd	r24, Y+1	; 0x01
    21ba:	9a 81       	ldd	r25, Y+2	; 0x02
    21bc:	88 30       	cpi	r24, 0x08	; 8
    21be:	91 05       	cpc	r25, r1
    21c0:	58 f3       	brcs	.-42     	; 0x2198 <xlist_init+0x1c>
}
    21c2:	0f 90       	pop	r0
    21c4:	0f 90       	pop	r0
    21c6:	0f 90       	pop	r0
    21c8:	0f 90       	pop	r0
    21ca:	cf 91       	pop	r28
    21cc:	df 91       	pop	r29
    21ce:	08 95       	ret

000021d0 <xlist_head>:
//===========================================================================
//Поиск головы списка
item_t * xlist_head(xlist_t * xlist)
{
    21d0:	df 93       	push	r29
    21d2:	cf 93       	push	r28
    21d4:	00 d0       	rcall	.+0      	; 0x21d6 <xlist_head+0x6>
    21d6:	00 d0       	rcall	.+0      	; 0x21d8 <xlist_head+0x8>
    21d8:	0f 92       	push	r0
    21da:	cd b7       	in	r28, 0x3d	; 61
    21dc:	de b7       	in	r29, 0x3e	; 62
    21de:	9d 83       	std	Y+5, r25	; 0x05
    21e0:	8c 83       	std	Y+4, r24	; 0x04
    item_t * ret_val = (item_t *)0;
    21e2:	1b 82       	std	Y+3, r1	; 0x03
    21e4:	1a 82       	std	Y+2, r1	; 0x02
    index_t index = xlist->index;
    21e6:	ec 81       	ldd	r30, Y+4	; 0x04
    21e8:	fd 81       	ldd	r31, Y+5	; 0x05
    21ea:	80 89       	ldd	r24, Z+16	; 0x10
    21ec:	89 83       	std	Y+1, r24	; 0x01

    if( index != (index_t)0 )
    21ee:	89 81       	ldd	r24, Y+1	; 0x01
    21f0:	88 23       	and	r24, r24
    21f2:	81 f0       	breq	.+32     	; 0x2214 <xlist_head+0x44>
    {
        ret_val = xlist->item[ index_search( index ) ];
    21f4:	89 81       	ldd	r24, Y+1	; 0x01
    21f6:	0e 94 cc 08 	call	0x1198	; 0x1198 <index_search>
    21fa:	88 2f       	mov	r24, r24
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	2c 81       	ldd	r18, Y+4	; 0x04
    2200:	3d 81       	ldd	r19, Y+5	; 0x05
    2202:	88 0f       	add	r24, r24
    2204:	99 1f       	adc	r25, r25
    2206:	f9 01       	movw	r30, r18
    2208:	e8 0f       	add	r30, r24
    220a:	f9 1f       	adc	r31, r25
    220c:	80 81       	ld	r24, Z
    220e:	91 81       	ldd	r25, Z+1	; 0x01
    2210:	9b 83       	std	Y+3, r25	; 0x03
    2212:	8a 83       	std	Y+2, r24	; 0x02
    }
    return ret_val;
    2214:	8a 81       	ldd	r24, Y+2	; 0x02
    2216:	9b 81       	ldd	r25, Y+3	; 0x03
}
    2218:	0f 90       	pop	r0
    221a:	0f 90       	pop	r0
    221c:	0f 90       	pop	r0
    221e:	0f 90       	pop	r0
    2220:	0f 90       	pop	r0
    2222:	cf 91       	pop	r28
    2224:	df 91       	pop	r29
    2226:	08 95       	ret

00002228 <xlist_switch>:

//===========================================================================
// переключение указателя в массиве на следующий элемент, пригодится в планировщике
void xlist_switch(xlist_t * xlist, prio_t prio)
{
    2228:	df 93       	push	r29
    222a:	cf 93       	push	r28
    222c:	00 d0       	rcall	.+0      	; 0x222e <xlist_switch+0x6>
    222e:	00 d0       	rcall	.+0      	; 0x2230 <xlist_switch+0x8>
    2230:	0f 92       	push	r0
    2232:	cd b7       	in	r28, 0x3d	; 61
    2234:	de b7       	in	r29, 0x3e	; 62
    2236:	9c 83       	std	Y+4, r25	; 0x04
    2238:	8b 83       	std	Y+3, r24	; 0x03
    223a:	6d 83       	std	Y+5, r22	; 0x05
    item_t ** current = xlist->item + prio;
    223c:	2b 81       	ldd	r18, Y+3	; 0x03
    223e:	3c 81       	ldd	r19, Y+4	; 0x04
    2240:	8d 81       	ldd	r24, Y+5	; 0x05
    2242:	88 2f       	mov	r24, r24
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	88 0f       	add	r24, r24
    2248:	99 1f       	adc	r25, r25
    224a:	82 0f       	add	r24, r18
    224c:	93 1f       	adc	r25, r19
    224e:	9a 83       	std	Y+2, r25	; 0x02
    2250:	89 83       	std	Y+1, r24	; 0x01
    *current = (*current)->next;
    2252:	e9 81       	ldd	r30, Y+1	; 0x01
    2254:	fa 81       	ldd	r31, Y+2	; 0x02
    2256:	01 90       	ld	r0, Z+
    2258:	f0 81       	ld	r31, Z
    225a:	e0 2d       	mov	r30, r0
    225c:	80 81       	ld	r24, Z
    225e:	91 81       	ldd	r25, Z+1	; 0x01
    2260:	e9 81       	ldd	r30, Y+1	; 0x01
    2262:	fa 81       	ldd	r31, Y+2	; 0x02
    2264:	91 83       	std	Z+1, r25	; 0x01
    2266:	80 83       	st	Z, r24
    //*current = (item_t *)*(item_t **)*(item_t ***)current;
}
    2268:	0f 90       	pop	r0
    226a:	0f 90       	pop	r0
    226c:	0f 90       	pop	r0
    226e:	0f 90       	pop	r0
    2270:	0f 90       	pop	r0
    2272:	cf 91       	pop	r28
    2274:	df 91       	pop	r29
    2276:	08 95       	ret

00002278 <raise_syscall_interrupt>:
 */
#include <bugurt.h>
//#include "../../arch/avr-gcc/init_syscalls.h"

void raise_syscall_interrupt(void)
{
    2278:	df 93       	push	r29
    227a:	cf 93       	push	r28
    227c:	cd b7       	in	r28, 0x3d	; 61
    227e:	de b7       	in	r29, 0x3e	; 62
    R2_on();
    2280:	ab e2       	ldi	r26, 0x2B	; 43
    2282:	b0 e0       	ldi	r27, 0x00	; 0
    2284:	eb e2       	ldi	r30, 0x2B	; 43
    2286:	f0 e0       	ldi	r31, 0x00	; 0
    2288:	80 81       	ld	r24, Z
    228a:	84 60       	ori	r24, 0x04	; 4
    228c:	8c 93       	st	X, r24
    G2_off();
    228e:	ab e2       	ldi	r26, 0x2B	; 43
    2290:	b0 e0       	ldi	r27, 0x00	; 0
    2292:	eb e2       	ldi	r30, 0x2B	; 43
    2294:	f0 e0       	ldi	r31, 0x00	; 0
    2296:	80 81       	ld	r24, Z
    2298:	87 7f       	andi	r24, 0xF7	; 247
    229a:	8c 93       	st	X, r24
    R2_off();
    229c:	ab e2       	ldi	r26, 0x2B	; 43
    229e:	b0 e0       	ldi	r27, 0x00	; 0
    22a0:	eb e2       	ldi	r30, 0x2B	; 43
    22a2:	f0 e0       	ldi	r31, 0x00	; 0
    22a4:	80 81       	ld	r24, Z
    22a6:	8b 7f       	andi	r24, 0xFB	; 251
    22a8:	8c 93       	st	X, r24
    G2_on();
    22aa:	ab e2       	ldi	r26, 0x2B	; 43
    22ac:	b0 e0       	ldi	r27, 0x00	; 0
    22ae:	eb e2       	ldi	r30, 0x2B	; 43
    22b0:	f0 e0       	ldi	r31, 0x00	; 0
    22b2:	80 81       	ld	r24, Z
    22b4:	88 60       	ori	r24, 0x08	; 8
    22b6:	8c 93       	st	X, r24
}
    22b8:	cf 91       	pop	r28
    22ba:	df 91       	pop	r29
    22bc:	08 95       	ret

000022be <start_scheduler>:

void start_scheduler( void ){
    22be:	df 93       	push	r29
    22c0:	cf 93       	push	r28
    22c2:	cd b7       	in	r28, 0x3d	; 61
    22c4:	de b7       	in	r29, 0x3e	; 62
    TIMSK2 |= 0x02;
    22c6:	a0 e7       	ldi	r26, 0x70	; 112
    22c8:	b0 e0       	ldi	r27, 0x00	; 0
    22ca:	e0 e7       	ldi	r30, 0x70	; 112
    22cc:	f0 e0       	ldi	r31, 0x00	; 0
    22ce:	80 81       	ld	r24, Z
    22d0:	82 60       	ori	r24, 0x02	; 2
    22d2:	8c 93       	st	X, r24
    EIMSK |= 0x02;
    22d4:	ad e3       	ldi	r26, 0x3D	; 61
    22d6:	b0 e0       	ldi	r27, 0x00	; 0
    22d8:	ed e3       	ldi	r30, 0x3D	; 61
    22da:	f0 e0       	ldi	r31, 0x00	; 0
    22dc:	80 81       	ld	r24, Z
    22de:	82 60       	ori	r24, 0x02	; 2
    22e0:	8c 93       	st	X, r24
    EIFR |= 0x02;
    22e2:	ac e3       	ldi	r26, 0x3C	; 60
    22e4:	b0 e0       	ldi	r27, 0x00	; 0
    22e6:	ec e3       	ldi	r30, 0x3C	; 60
    22e8:	f0 e0       	ldi	r31, 0x00	; 0
    22ea:	80 81       	ld	r24, Z
    22ec:	82 60       	ori	r24, 0x02	; 2
    22ee:	8c 93       	st	X, r24
}
    22f0:	cf 91       	pop	r28
    22f2:	df 91       	pop	r29
    22f4:	08 95       	ret

000022f6 <blink_1>:
    TIMSK2 &= ~0x02;
    EIMSK &= ~0x02;
}

///----------------------------------------------------------------------------------------
void blink_1(void * t) {PORTB ^= 0x10;}
    22f6:	df 93       	push	r29
    22f8:	cf 93       	push	r28
    22fa:	00 d0       	rcall	.+0      	; 0x22fc <blink_1+0x6>
    22fc:	cd b7       	in	r28, 0x3d	; 61
    22fe:	de b7       	in	r29, 0x3e	; 62
    2300:	9a 83       	std	Y+2, r25	; 0x02
    2302:	89 83       	std	Y+1, r24	; 0x01
    2304:	a5 e2       	ldi	r26, 0x25	; 37
    2306:	b0 e0       	ldi	r27, 0x00	; 0
    2308:	e5 e2       	ldi	r30, 0x25	; 37
    230a:	f0 e0       	ldi	r31, 0x00	; 0
    230c:	90 81       	ld	r25, Z
    230e:	80 e1       	ldi	r24, 0x10	; 16
    2310:	89 27       	eor	r24, r25
    2312:	8c 93       	st	X, r24
    2314:	0f 90       	pop	r0
    2316:	0f 90       	pop	r0
    2318:	cf 91       	pop	r28
    231a:	df 91       	pop	r29
    231c:	08 95       	ret

0000231e <blink_2>:
void blink_2(void * t) {PORTB ^= 0x08;}
    231e:	df 93       	push	r29
    2320:	cf 93       	push	r28
    2322:	00 d0       	rcall	.+0      	; 0x2324 <blink_2+0x6>
    2324:	cd b7       	in	r28, 0x3d	; 61
    2326:	de b7       	in	r29, 0x3e	; 62
    2328:	9a 83       	std	Y+2, r25	; 0x02
    232a:	89 83       	std	Y+1, r24	; 0x01
    232c:	a5 e2       	ldi	r26, 0x25	; 37
    232e:	b0 e0       	ldi	r27, 0x00	; 0
    2330:	e5 e2       	ldi	r30, 0x25	; 37
    2332:	f0 e0       	ldi	r31, 0x00	; 0
    2334:	90 81       	ld	r25, Z
    2336:	88 e0       	ldi	r24, 0x08	; 8
    2338:	89 27       	eor	r24, r25
    233a:	8c 93       	st	X, r24
    233c:	0f 90       	pop	r0
    233e:	0f 90       	pop	r0
    2340:	cf 91       	pop	r28
    2342:	df 91       	pop	r29
    2344:	08 95       	ret

00002346 <blink_3>:
void blink_3(void * t) {PORTB ^= 0x04;}
    2346:	df 93       	push	r29
    2348:	cf 93       	push	r28
    234a:	00 d0       	rcall	.+0      	; 0x234c <blink_3+0x6>
    234c:	cd b7       	in	r28, 0x3d	; 61
    234e:	de b7       	in	r29, 0x3e	; 62
    2350:	9a 83       	std	Y+2, r25	; 0x02
    2352:	89 83       	std	Y+1, r24	; 0x01
    2354:	a5 e2       	ldi	r26, 0x25	; 37
    2356:	b0 e0       	ldi	r27, 0x00	; 0
    2358:	e5 e2       	ldi	r30, 0x25	; 37
    235a:	f0 e0       	ldi	r31, 0x00	; 0
    235c:	90 81       	ld	r25, Z
    235e:	84 e0       	ldi	r24, 0x04	; 4
    2360:	89 27       	eor	r24, r25
    2362:	8c 93       	st	X, r24
    2364:	0f 90       	pop	r0
    2366:	0f 90       	pop	r0
    2368:	cf 91       	pop	r28
    236a:	df 91       	pop	r29
    236c:	08 95       	ret

0000236e <blink_4>:
void blink_4(void * t) {PORTB ^= 0x02;}
    236e:	df 93       	push	r29
    2370:	cf 93       	push	r28
    2372:	00 d0       	rcall	.+0      	; 0x2374 <blink_4+0x6>
    2374:	cd b7       	in	r28, 0x3d	; 61
    2376:	de b7       	in	r29, 0x3e	; 62
    2378:	9a 83       	std	Y+2, r25	; 0x02
    237a:	89 83       	std	Y+1, r24	; 0x01
    237c:	a5 e2       	ldi	r26, 0x25	; 37
    237e:	b0 e0       	ldi	r27, 0x00	; 0
    2380:	e5 e2       	ldi	r30, 0x25	; 37
    2382:	f0 e0       	ldi	r31, 0x00	; 0
    2384:	90 81       	ld	r25, Z
    2386:	82 e0       	ldi	r24, 0x02	; 2
    2388:	89 27       	eor	r24, r25
    238a:	8c 93       	st	X, r24
    238c:	0f 90       	pop	r0
    238e:	0f 90       	pop	r0
    2390:	cf 91       	pop	r28
    2392:	df 91       	pop	r29
    2394:	08 95       	ret

00002396 <blink_12>:
void blink_7(void * t) {PORTC ^= 0x10;}
void blink_8(void * t) {PORTC ^= 0x08;}
void blink_9(void * t) {PORTC ^= 0x04;}
void blink_10(void * t) {PORTC ^= 0x02;}
void blink_11(void * t) {PORTC ^= 0x01;}
void blink_12(void * t) {
    2396:	df 93       	push	r29
    2398:	cf 93       	push	r28
    239a:	00 d0       	rcall	.+0      	; 0x239c <blink_12+0x6>
    239c:	cd b7       	in	r28, 0x3d	; 61
    239e:	de b7       	in	r29, 0x3e	; 62
    23a0:	9a 83       	std	Y+2, r25	; 0x02
    23a2:	89 83       	std	Y+1, r24	; 0x01
    PORTB ^= 0x20;
    23a4:	a5 e2       	ldi	r26, 0x25	; 37
    23a6:	b0 e0       	ldi	r27, 0x00	; 0
    23a8:	e5 e2       	ldi	r30, 0x25	; 37
    23aa:	f0 e0       	ldi	r31, 0x00	; 0
    23ac:	90 81       	ld	r25, Z
    23ae:	80 e2       	ldi	r24, 0x20	; 32
    23b0:	89 27       	eor	r24, r25
    23b2:	8c 93       	st	X, r24
    blink_G3();
    23b4:	ab e2       	ldi	r26, 0x2B	; 43
    23b6:	b0 e0       	ldi	r27, 0x00	; 0
    23b8:	eb e2       	ldi	r30, 0x2B	; 43
    23ba:	f0 e0       	ldi	r31, 0x00	; 0
    23bc:	90 81       	ld	r25, Z
    23be:	80 e4       	ldi	r24, 0x40	; 64
    23c0:	89 27       	eor	r24, r25
    23c2:	8c 93       	st	X, r24
    blink_R3();
    23c4:	ab e2       	ldi	r26, 0x2B	; 43
    23c6:	b0 e0       	ldi	r27, 0x00	; 0
    23c8:	eb e2       	ldi	r30, 0x2B	; 43
    23ca:	f0 e0       	ldi	r31, 0x00	; 0
    23cc:	90 81       	ld	r25, Z
    23ce:	80 e2       	ldi	r24, 0x20	; 32
    23d0:	89 27       	eor	r24, r25
    23d2:	8c 93       	st	X, r24
    }
    23d4:	0f 90       	pop	r0
    23d6:	0f 90       	pop	r0
    23d8:	cf 91       	pop	r28
    23da:	df 91       	pop	r29
    23dc:	08 95       	ret

000023de <main0>:

proc_t proc[4];
stack_t stack[4][128];

void main0(void * t)
{
    23de:	df 93       	push	r29
    23e0:	cf 93       	push	r28
    23e2:	00 d0       	rcall	.+0      	; 0x23e4 <main0+0x6>
    23e4:	cd b7       	in	r28, 0x3d	; 61
    23e6:	de b7       	in	r29, 0x3e	; 62
    23e8:	9a 83       	std	Y+2, r25	; 0x02
    23ea:	89 83       	std	Y+1, r24	; 0x01
    while(1)
    {
        wait_time(500);
    23ec:	84 ef       	ldi	r24, 0xF4	; 244
    23ee:	91 e0       	ldi	r25, 0x01	; 1
    23f0:	0e 94 96 10 	call	0x212c	; 0x212c <wait_time>
    23f4:	fb cf       	rjmp	.-10     	; 0x23ec <main0+0xe>

000023f6 <main1>:
    }
}
void main1(void * t)
{
    23f6:	df 93       	push	r29
    23f8:	cf 93       	push	r28
    23fa:	00 d0       	rcall	.+0      	; 0x23fc <main1+0x6>
    23fc:	cd b7       	in	r28, 0x3d	; 61
    23fe:	de b7       	in	r29, 0x3e	; 62
    2400:	9a 83       	std	Y+2, r25	; 0x02
    2402:	89 83       	std	Y+1, r24	; 0x01
    while(1)
    {
        wait_time(500);
    2404:	84 ef       	ldi	r24, 0xF4	; 244
    2406:	91 e0       	ldi	r25, 0x01	; 1
    2408:	0e 94 96 10 	call	0x212c	; 0x212c <wait_time>
    240c:	fb cf       	rjmp	.-10     	; 0x2404 <main1+0xe>

0000240e <main2>:
    }
}
void main2(void * t)
{
    240e:	df 93       	push	r29
    2410:	cf 93       	push	r28
    2412:	00 d0       	rcall	.+0      	; 0x2414 <main2+0x6>
    2414:	cd b7       	in	r28, 0x3d	; 61
    2416:	de b7       	in	r29, 0x3e	; 62
    2418:	9a 83       	std	Y+2, r25	; 0x02
    241a:	89 83       	std	Y+1, r24	; 0x01
    while(1)
    {
        wait_time(1);
    241c:	81 e0       	ldi	r24, 0x01	; 1
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	0e 94 96 10 	call	0x212c	; 0x212c <wait_time>
        proc_reset_watchdog();
    2424:	0e 94 b9 0c 	call	0x1972	; 0x1972 <proc_reset_watchdog>
        proc_self_stop();
    2428:	0e 94 2e 03 	call	0x65c	; 0x65c <proc_self_stop>
    242c:	f7 cf       	rjmp	.-18     	; 0x241c <main2+0xe>

0000242e <main3>:
    242e:	df 93       	push	r29
    2430:	cf 93       	push	r28
    2432:	00 d0       	rcall	.+0      	; 0x2434 <main3+0x6>
    2434:	cd b7       	in	r28, 0x3d	; 61
    2436:	de b7       	in	r29, 0x3e	; 62
    2438:	9a 83       	std	Y+2, r25	; 0x02
    243a:	89 83       	std	Y+1, r24	; 0x01
    243c:	84 ef       	ldi	r24, 0xF4	; 244
    243e:	91 e0       	ldi	r25, 0x01	; 1
    2440:	0e 94 96 10 	call	0x212c	; 0x212c <wait_time>
    2444:	0f 90       	pop	r0
    2446:	0f 90       	pop	r0
    2448:	cf 91       	pop	r28
    244a:	df 91       	pop	r29
    244c:	08 95       	ret

0000244e <idle_main>:
void main3(void * t)
{
    wait_time(500);
}
void idle_main(void * t)
{
    244e:	df 93       	push	r29
    2450:	cf 93       	push	r28
    2452:	00 d0       	rcall	.+0      	; 0x2454 <idle_main+0x6>
    2454:	cd b7       	in	r28, 0x3d	; 61
    2456:	de b7       	in	r29, 0x3e	; 62
    2458:	9a 83       	std	Y+2, r25	; 0x02
    245a:	89 83       	std	Y+1, r24	; 0x01
    // Insert code
    wait_time(1000);
    245c:	88 ee       	ldi	r24, 0xE8	; 232
    245e:	93 e0       	ldi	r25, 0x03	; 3
    2460:	0e 94 96 10 	call	0x212c	; 0x212c <wait_time>
    proc_run( &proc[3] );
    2464:	84 e8       	ldi	r24, 0x84	; 132
    2466:	92 e0       	ldi	r25, 0x02	; 2
    2468:	0e 94 a6 02 	call	0x54c	; 0x54c <proc_run>
    wait_time(1000);
    246c:	88 ee       	ldi	r24, 0xE8	; 232
    246e:	93 e0       	ldi	r25, 0x03	; 3
    2470:	0e 94 96 10 	call	0x212c	; 0x212c <wait_time>
    proc_restart( &proc[3] );
    2474:	84 e8       	ldi	r24, 0x84	; 132
    2476:	92 e0       	ldi	r25, 0x02	; 2
    2478:	0e 94 de 02 	call	0x5bc	; 0x5bc <proc_restart>
    wait_time(500);
    247c:	84 ef       	ldi	r24, 0xF4	; 244
    247e:	91 e0       	ldi	r25, 0x01	; 1
    2480:	0e 94 96 10 	call	0x212c	; 0x212c <wait_time>
    proc_run( &proc[3] );
    2484:	84 e8       	ldi	r24, 0x84	; 132
    2486:	92 e0       	ldi	r25, 0x02	; 2
    2488:	0e 94 a6 02 	call	0x54c	; 0x54c <proc_run>
    while(1)
    {
         wait_time(1000);
    248c:	88 ee       	ldi	r24, 0xE8	; 232
    248e:	93 e0       	ldi	r25, 0x03	; 3
    2490:	0e 94 96 10 	call	0x212c	; 0x212c <wait_time>
         proc_run(&proc[2]);
    2494:	86 e5       	ldi	r24, 0x56	; 86
    2496:	92 e0       	ldi	r25, 0x02	; 2
    2498:	0e 94 a6 02 	call	0x54c	; 0x54c <proc_run>
    249c:	f7 cf       	rjmp	.-18     	; 0x248c <idle_main+0x3e>

0000249e <main>:
    }
}

int main(void)
{
    249e:	8f 92       	push	r8
    24a0:	af 92       	push	r10
    24a2:	bf 92       	push	r11
    24a4:	cf 92       	push	r12
    24a6:	ef 92       	push	r14
    24a8:	ff 92       	push	r15
    24aa:	0f 93       	push	r16
    24ac:	1f 93       	push	r17
    24ae:	df 93       	push	r29
    24b0:	cf 93       	push	r28
    24b2:	cd b7       	in	r28, 0x3d	; 61
    24b4:	de b7       	in	r29, 0x3e	; 62
    init_bugurt();
    24b6:	0e 94 57 01 	call	0x2ae	; 0x2ae <init_bugurt>

    TCCR2A = 0x02;//
    24ba:	e0 eb       	ldi	r30, 0xB0	; 176
    24bc:	f0 e0       	ldi	r31, 0x00	; 0
    24be:	82 e0       	ldi	r24, 0x02	; 2
    24c0:	80 83       	st	Z, r24
    TCCR2B = 0x05;// prescaler=128
    24c2:	e1 eb       	ldi	r30, 0xB1	; 177
    24c4:	f0 e0       	ldi	r31, 0x00	; 0
    24c6:	85 e0       	ldi	r24, 0x05	; 5
    24c8:	80 83       	st	Z, r24
    OCR2A  = 124;
    24ca:	e3 eb       	ldi	r30, 0xB3	; 179
    24cc:	f0 e0       	ldi	r31, 0x00	; 0
    24ce:	8c e7       	ldi	r24, 0x7C	; 124
    24d0:	80 83       	st	Z, r24
    OCR2B  = 0x00;
    24d2:	e4 eb       	ldi	r30, 0xB4	; 180
    24d4:	f0 e0       	ldi	r31, 0x00	; 0
    24d6:	10 82       	st	Z, r1
    TIMSK2 = 0x00; // shceduler not started
    24d8:	e0 e7       	ldi	r30, 0x70	; 112
    24da:	f0 e0       	ldi	r31, 0x00	; 0
    24dc:	10 82       	st	Z, r1
    TIFR2  = 0x00;
    24de:	e7 e3       	ldi	r30, 0x37	; 55
    24e0:	f0 e0       	ldi	r31, 0x00	; 0
    24e2:	10 82       	st	Z, r1

    EICRA = 0x08; //falling edge
    24e4:	e9 e6       	ldi	r30, 0x69	; 105
    24e6:	f0 e0       	ldi	r31, 0x00	; 0
    24e8:	88 e0       	ldi	r24, 0x08	; 8
    24ea:	80 83       	st	Z, r24
    EIMSK = 0x00; //resched generates int1, mask 0x02
    24ec:	ed e3       	ldi	r30, 0x3D	; 61
    24ee:	f0 e0       	ldi	r31, 0x00	; 0
    24f0:	10 82       	st	Z, r1

    DDRB = 0x3F;
    24f2:	e4 e2       	ldi	r30, 0x24	; 36
    24f4:	f0 e0       	ldi	r31, 0x00	; 0
    24f6:	8f e3       	ldi	r24, 0x3F	; 63
    24f8:	80 83       	st	Z, r24
    PORTB = 0x00;
    24fa:	e5 e2       	ldi	r30, 0x25	; 37
    24fc:	f0 e0       	ldi	r31, 0x00	; 0
    24fe:	10 82       	st	Z, r1
    DDRC = 0x3F;
    2500:	e7 e2       	ldi	r30, 0x27	; 39
    2502:	f0 e0       	ldi	r31, 0x00	; 0
    2504:	8f e3       	ldi	r24, 0x3F	; 63
    2506:	80 83       	st	Z, r24
    PORTC = 0x00;
    2508:	e8 e2       	ldi	r30, 0x28	; 40
    250a:	f0 e0       	ldi	r31, 0x00	; 0
    250c:	10 82       	st	Z, r1
    DDRD = 0xFE;
    250e:	ea e2       	ldi	r30, 0x2A	; 42
    2510:	f0 e0       	ldi	r31, 0x00	; 0
    2512:	8e ef       	ldi	r24, 0xFE	; 254
    2514:	80 83       	st	Z, r24
    PORTD = 0x00;
    2516:	eb e2       	ldi	r30, 0x2B	; 43
    2518:	f0 e0       	ldi	r31, 0x00	; 0
    251a:	10 82       	st	Z, r1

    G1_on();
    251c:	ab e2       	ldi	r26, 0x2B	; 43
    251e:	b0 e0       	ldi	r27, 0x00	; 0
    2520:	eb e2       	ldi	r30, 0x2B	; 43
    2522:	f0 e0       	ldi	r31, 0x00	; 0
    2524:	80 81       	ld	r24, Z
    2526:	80 61       	ori	r24, 0x10	; 16
    2528:	8c 93       	st	X, r24
    G2_on();
    252a:	ab e2       	ldi	r26, 0x2B	; 43
    252c:	b0 e0       	ldi	r27, 0x00	; 0
    252e:	eb e2       	ldi	r30, 0x2B	; 43
    2530:	f0 e0       	ldi	r31, 0x00	; 0
    2532:	80 81       	ld	r24, Z
    2534:	88 60       	ori	r24, 0x08	; 8
    2536:	8c 93       	st	X, r24
    R3_on();
    2538:	ab e2       	ldi	r26, 0x2B	; 43
    253a:	b0 e0       	ldi	r27, 0x00	; 0
    253c:	eb e2       	ldi	r30, 0x2B	; 43
    253e:	f0 e0       	ldi	r31, 0x00	; 0
    2540:	80 81       	ld	r24, Z
    2542:	80 62       	ori	r24, 0x20	; 32
    2544:	8c 93       	st	X, r24

    proc_init_isr(&proc[0], main0, blink_1, blink_1, 0, &stack[0][127], 1, 2, 0);
    2546:	82 eb       	ldi	r24, 0xB2	; 178
    2548:	92 e0       	ldi	r25, 0x02	; 2
    254a:	dc 01       	movw	r26, r24
    254c:	a1 58       	subi	r26, 0x81	; 129
    254e:	bf 4f       	sbci	r27, 0xFF	; 255
    2550:	8a ef       	ldi	r24, 0xFA	; 250
    2552:	91 e0       	ldi	r25, 0x01	; 1
    2554:	2f ee       	ldi	r18, 0xEF	; 239
    2556:	31 e1       	ldi	r19, 0x11	; 17
    2558:	4b e7       	ldi	r20, 0x7B	; 123
    255a:	51 e1       	ldi	r21, 0x11	; 17
    255c:	eb e7       	ldi	r30, 0x7B	; 123
    255e:	f1 e1       	ldi	r31, 0x11	; 17
    2560:	b9 01       	movw	r22, r18
    2562:	9f 01       	movw	r18, r30
    2564:	00 e0       	ldi	r16, 0x00	; 0
    2566:	10 e0       	ldi	r17, 0x00	; 0
    2568:	7d 01       	movw	r14, r26
    256a:	cc 24       	eor	r12, r12
    256c:	c3 94       	inc	r12
    256e:	aa 24       	eor	r10, r10
    2570:	bb 24       	eor	r11, r11
    2572:	68 94       	set
    2574:	a1 f8       	bld	r10, 1
    2576:	88 24       	eor	r8, r8
    2578:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <proc_init_isr>
    proc_init_isr(&proc[1], main1, blink_2, blink_2, 0, &stack[1][127], 2, 3, 0);
    257c:	82 eb       	ldi	r24, 0xB2	; 178
    257e:	92 e0       	ldi	r25, 0x02	; 2
    2580:	dc 01       	movw	r26, r24
    2582:	a1 50       	subi	r26, 0x01	; 1
    2584:	bf 4f       	sbci	r27, 0xFF	; 255
    2586:	88 e2       	ldi	r24, 0x28	; 40
    2588:	92 e0       	ldi	r25, 0x02	; 2
    258a:	2b ef       	ldi	r18, 0xFB	; 251
    258c:	31 e1       	ldi	r19, 0x11	; 17
    258e:	4f e8       	ldi	r20, 0x8F	; 143
    2590:	51 e1       	ldi	r21, 0x11	; 17
    2592:	ef e8       	ldi	r30, 0x8F	; 143
    2594:	f1 e1       	ldi	r31, 0x11	; 17
    2596:	b9 01       	movw	r22, r18
    2598:	9f 01       	movw	r18, r30
    259a:	00 e0       	ldi	r16, 0x00	; 0
    259c:	10 e0       	ldi	r17, 0x00	; 0
    259e:	7d 01       	movw	r14, r26
    25a0:	cc 24       	eor	r12, r12
    25a2:	68 94       	set
    25a4:	c1 f8       	bld	r12, 1
    25a6:	0f 2e       	mov	r0, r31
    25a8:	f3 e0       	ldi	r31, 0x03	; 3
    25aa:	af 2e       	mov	r10, r31
    25ac:	bb 24       	eor	r11, r11
    25ae:	f0 2d       	mov	r31, r0
    25b0:	88 24       	eor	r8, r8
    25b2:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <proc_init_isr>
    proc_init_isr(&proc[2], main2, blink_3, blink_3, 0, &stack[2][127], 2, 4, 1);// Типа реального времени
    25b6:	82 eb       	ldi	r24, 0xB2	; 178
    25b8:	92 e0       	ldi	r25, 0x02	; 2
    25ba:	dc 01       	movw	r26, r24
    25bc:	a1 58       	subi	r26, 0x81	; 129
    25be:	be 4f       	sbci	r27, 0xFE	; 254
    25c0:	86 e5       	ldi	r24, 0x56	; 86
    25c2:	92 e0       	ldi	r25, 0x02	; 2
    25c4:	27 e0       	ldi	r18, 0x07	; 7
    25c6:	32 e1       	ldi	r19, 0x12	; 18
    25c8:	43 ea       	ldi	r20, 0xA3	; 163
    25ca:	51 e1       	ldi	r21, 0x11	; 17
    25cc:	e3 ea       	ldi	r30, 0xA3	; 163
    25ce:	f1 e1       	ldi	r31, 0x11	; 17
    25d0:	b9 01       	movw	r22, r18
    25d2:	9f 01       	movw	r18, r30
    25d4:	00 e0       	ldi	r16, 0x00	; 0
    25d6:	10 e0       	ldi	r17, 0x00	; 0
    25d8:	7d 01       	movw	r14, r26
    25da:	cc 24       	eor	r12, r12
    25dc:	68 94       	set
    25de:	c1 f8       	bld	r12, 1
    25e0:	aa 24       	eor	r10, r10
    25e2:	bb 24       	eor	r11, r11
    25e4:	68 94       	set
    25e6:	a2 f8       	bld	r10, 2
    25e8:	88 24       	eor	r8, r8
    25ea:	83 94       	inc	r8
    25ec:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <proc_init_isr>
    proc_init_isr(&proc[3], main3, blink_4, blink_4, 0, &stack[3][127], 3, 4, 0);
    25f0:	82 eb       	ldi	r24, 0xB2	; 178
    25f2:	92 e0       	ldi	r25, 0x02	; 2
    25f4:	dc 01       	movw	r26, r24
    25f6:	a1 50       	subi	r26, 0x01	; 1
    25f8:	be 4f       	sbci	r27, 0xFE	; 254
    25fa:	84 e8       	ldi	r24, 0x84	; 132
    25fc:	92 e0       	ldi	r25, 0x02	; 2
    25fe:	27 e1       	ldi	r18, 0x17	; 23
    2600:	32 e1       	ldi	r19, 0x12	; 18
    2602:	47 eb       	ldi	r20, 0xB7	; 183
    2604:	51 e1       	ldi	r21, 0x11	; 17
    2606:	e7 eb       	ldi	r30, 0xB7	; 183
    2608:	f1 e1       	ldi	r31, 0x11	; 17
    260a:	b9 01       	movw	r22, r18
    260c:	9f 01       	movw	r18, r30
    260e:	00 e0       	ldi	r16, 0x00	; 0
    2610:	10 e0       	ldi	r17, 0x00	; 0
    2612:	7d 01       	movw	r14, r26
    2614:	0f 2e       	mov	r0, r31
    2616:	f3 e0       	ldi	r31, 0x03	; 3
    2618:	cf 2e       	mov	r12, r31
    261a:	f0 2d       	mov	r31, r0
    261c:	aa 24       	eor	r10, r10
    261e:	bb 24       	eor	r11, r11
    2620:	68 94       	set
    2622:	a2 f8       	bld	r10, 2
    2624:	88 24       	eor	r8, r8
    2626:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <proc_init_isr>

    kernel.idle.rs_hook = blink_12;
    262a:	8b ec       	ldi	r24, 0xCB	; 203
    262c:	91 e1       	ldi	r25, 0x11	; 17
    262e:	90 93 ef 01 	sts	0x01EF, r25
    2632:	80 93 ee 01 	sts	0x01EE, r24
    kernel.idle.sv_hook = blink_12;
    2636:	8b ec       	ldi	r24, 0xCB	; 203
    2638:	91 e1       	ldi	r25, 0x11	; 17
    263a:	90 93 ed 01 	sts	0x01ED, r25
    263e:	80 93 ec 01 	sts	0x01EC, r24

    proc_run_isr(&proc[0]);
    2642:	8a ef       	ldi	r24, 0xFA	; 250
    2644:	91 e0       	ldi	r25, 0x01	; 1
    2646:	0e 94 07 0c 	call	0x180e	; 0x180e <proc_run_isr>
    proc_run_isr(&proc[1]);
    264a:	88 e2       	ldi	r24, 0x28	; 40
    264c:	92 e0       	ldi	r25, 0x02	; 2
    264e:	0e 94 07 0c 	call	0x180e	; 0x180e <proc_run_isr>
    proc_run_isr(&proc[2]);
    2652:	86 e5       	ldi	r24, 0x56	; 86
    2654:	92 e0       	ldi	r25, 0x02	; 2
    2656:	0e 94 07 0c 	call	0x180e	; 0x180e <proc_run_isr>
    proc_run_isr(&proc[3]);
    265a:	84 e8       	ldi	r24, 0x84	; 132
    265c:	92 e0       	ldi	r25, 0x02	; 2
    265e:	0e 94 07 0c 	call	0x180e	; 0x180e <proc_run_isr>

    start_bugurt();
    2662:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <start_bugurt>
    return 0;
    2666:	80 e0       	ldi	r24, 0x00	; 0
    2668:	90 e0       	ldi	r25, 0x00	; 0
}
    266a:	cf 91       	pop	r28
    266c:	df 91       	pop	r29
    266e:	1f 91       	pop	r17
    2670:	0f 91       	pop	r16
    2672:	ff 90       	pop	r15
    2674:	ef 90       	pop	r14
    2676:	cf 90       	pop	r12
    2678:	bf 90       	pop	r11
    267a:	af 90       	pop	r10
    267c:	8f 90       	pop	r8
    267e:	08 95       	ret

00002680 <_exit>:
    2680:	f8 94       	cli

00002682 <__stop_program>:
    2682:	ff cf       	rjmp	.-2      	; 0x2682 <__stop_program>
