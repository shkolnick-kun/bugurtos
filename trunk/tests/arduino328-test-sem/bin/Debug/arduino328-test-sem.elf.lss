
bin/Debug/arduino328-test-sem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000265e  000026f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000265e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003bd  00800102  00800102  000026f4  2**0
                  ALLOC
  3 .stab         000070b0  00000000  00000000  000026f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003550  00000000  00000000  000097a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       8:	0c 94 88 01 	jmp	0x310	; 0x310 <__vector_2>
       c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__vector_7>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      54:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

00000068 <syscall_routine>:
      68:	2d 02 76 02 af 02 c9 02 e3 02 09 03 6d 03 7e 03     -.v.........m.~.
      78:	8e 03 9e 03 ae 03 be 03 d5 03 0d 04 30 04 46 04     ............0.F.
      88:	60 04 7a 04                                         `.z.

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ee e5       	ldi	r30, 0x5E	; 94
      a0:	f6 e2       	ldi	r31, 0x26	; 38
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <.do_copy_data_start>

000000a4 <.do_copy_data_loop>:
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0

000000a8 <.do_copy_data_start>:
      a8:	a2 30       	cpi	r26, 0x02	; 2
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <.do_copy_data_loop>

000000ae <__do_clear_bss>:
      ae:	14 e0       	ldi	r17, 0x04	; 4
      b0:	a2 e0       	ldi	r26, 0x02	; 2
      b2:	b1 e0       	ldi	r27, 0x01	; 1
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	af 3b       	cpi	r26, 0xBF	; 191
      ba:	b1 07       	cpc	r27, r17
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 2e 12 	call	0x245c	; 0x245c <main>
      c2:	0c 94 2d 13 	jmp	0x265a	; 0x265a <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <osbme_store_context>:
      ca:	2f 92       	push	r2
      cc:	2f b6       	in	r2, 0x3f	; 63
      ce:	2f 92       	push	r2
      d0:	3f 92       	push	r3
      d2:	4f 92       	push	r4
      d4:	5f 92       	push	r5
      d6:	6f 92       	push	r6
      d8:	7f 92       	push	r7
      da:	8f 92       	push	r8
      dc:	9f 92       	push	r9
      de:	af 92       	push	r10
      e0:	bf 92       	push	r11
      e2:	cf 92       	push	r12
      e4:	df 92       	push	r13
      e6:	ef 92       	push	r14
      e8:	ff 92       	push	r15
      ea:	0f 93       	push	r16
      ec:	1f 93       	push	r17
      ee:	2f 93       	push	r18
      f0:	3f 93       	push	r19
      f2:	4f 93       	push	r20
      f4:	5f 93       	push	r21
      f6:	6f 93       	push	r22
      f8:	7f 93       	push	r23
      fa:	8f 93       	push	r24
      fc:	9f 93       	push	r25
      fe:	af 93       	push	r26
     100:	bf 93       	push	r27
     102:	cf 93       	push	r28
     104:	df 93       	push	r29
     106:	ef 93       	push	r30
     108:	ff 93       	push	r31
     10a:	ed b7       	in	r30, 0x3d	; 61
     10c:	fe b7       	in	r31, 0x3e	; 62
     10e:	21 a1       	ldd	r18, Z+33	; 0x21
     110:	30 a1       	ldd	r19, Z+32	; 0x20
     112:	01 a2       	std	Z+33, r0	; 0x21
     114:	10 a2       	std	Z+32, r1	; 0x20
     116:	11 24       	eor	r1, r1
     118:	8d b7       	in	r24, 0x3d	; 61
     11a:	9e b7       	in	r25, 0x3e	; 62
     11c:	2f 93       	push	r18
     11e:	3f 93       	push	r19
     120:	08 95       	ret

00000122 <osbme_load_context>:
     122:	3f 91       	pop	r19
     124:	2f 91       	pop	r18
     126:	9e bf       	out	0x3e, r25	; 62
     128:	8d bf       	out	0x3d, r24	; 61
     12a:	fe b7       	in	r31, 0x3e	; 62
     12c:	ed b7       	in	r30, 0x3d	; 61
     12e:	10 a0       	ldd	r1, Z+32	; 0x20
     130:	01 a0       	ldd	r0, Z+33	; 0x21
     132:	30 a3       	std	Z+32, r19	; 0x20
     134:	21 a3       	std	Z+33, r18	; 0x21
     136:	ff 91       	pop	r31
     138:	ef 91       	pop	r30
     13a:	df 91       	pop	r29
     13c:	cf 91       	pop	r28
     13e:	bf 91       	pop	r27
     140:	af 91       	pop	r26
     142:	9f 91       	pop	r25
     144:	8f 91       	pop	r24
     146:	7f 91       	pop	r23
     148:	6f 91       	pop	r22
     14a:	5f 91       	pop	r21
     14c:	4f 91       	pop	r20
     14e:	3f 91       	pop	r19
     150:	2f 91       	pop	r18
     152:	1f 91       	pop	r17
     154:	0f 91       	pop	r16
     156:	ff 90       	pop	r15
     158:	ef 90       	pop	r14
     15a:	df 90       	pop	r13
     15c:	cf 90       	pop	r12
     15e:	bf 90       	pop	r11
     160:	af 90       	pop	r10
     162:	9f 90       	pop	r9
     164:	8f 90       	pop	r8
     166:	7f 90       	pop	r7
     168:	6f 90       	pop	r6
     16a:	5f 90       	pop	r5
     16c:	4f 90       	pop	r4
     16e:	3f 90       	pop	r3
     170:	2f 90       	pop	r2
     172:	2f be       	out	0x3f, r2	; 63
     174:	2f 90       	pop	r2
     176:	08 95       	ret

00000178 <osbme_set_stack_pointer>:
     178:	1f 90       	pop	r1
     17a:	0f 90       	pop	r0
     17c:	9e bf       	out	0x3e, r25	; 62
     17e:	8d bf       	out	0x3d, r24	; 61
     180:	0f 92       	push	r0
     182:	1f 92       	push	r1
     184:	11 24       	eor	r1, r1
     186:	08 95       	ret

00000188 <disable_interrupts>:
#include"bugurt_kernel.h"

// Платформеннозависимый код
// Просто функции, специфичные для AVR
void disable_interrupts(void)
{
     188:	df 93       	push	r29
     18a:	cf 93       	push	r28
     18c:	cd b7       	in	r28, 0x3d	; 61
     18e:	de b7       	in	r29, 0x3e	; 62
    cli();
     190:	f8 94       	cli
}
     192:	cf 91       	pop	r28
     194:	df 91       	pop	r29
     196:	08 95       	ret

00000198 <enable_interrupts>:
void enable_interrupts(void)
{
     198:	df 93       	push	r29
     19a:	cf 93       	push	r28
     19c:	cd b7       	in	r28, 0x3d	; 61
     19e:	de b7       	in	r29, 0x3e	; 62
    sei();
     1a0:	78 94       	sei
}
     1a2:	cf 91       	pop	r28
     1a4:	df 91       	pop	r29
     1a6:	08 95       	ret

000001a8 <current_proc>:

proc_t * current_proc(void)
{
     1a8:	df 93       	push	r29
     1aa:	cf 93       	push	r28
     1ac:	cd b7       	in	r28, 0x3d	; 61
     1ae:	de b7       	in	r29, 0x3e	; 62
    return kernel.sched.current_proc;
     1b0:	80 91 18 01 	lds	r24, 0x0118
     1b4:	90 91 19 01 	lds	r25, 0x0119
}
     1b8:	cf 91       	pop	r28
     1ba:	df 91       	pop	r29
     1bc:	08 95       	ret

000001be <proc_stack_init>:

stack_t * proc_stack_init(stack_t * sstart, code_t code, void * arg)
{
     1be:	df 93       	push	r29
     1c0:	cf 93       	push	r28
     1c2:	00 d0       	rcall	.+0      	; 0x1c4 <proc_stack_init+0x6>
     1c4:	00 d0       	rcall	.+0      	; 0x1c6 <proc_stack_init+0x8>
     1c6:	00 d0       	rcall	.+0      	; 0x1c8 <proc_stack_init+0xa>
     1c8:	cd b7       	in	r28, 0x3d	; 61
     1ca:	de b7       	in	r29, 0x3e	; 62
     1cc:	9a 83       	std	Y+2, r25	; 0x02
     1ce:	89 83       	std	Y+1, r24	; 0x01
     1d0:	7c 83       	std	Y+4, r23	; 0x04
     1d2:	6b 83       	std	Y+3, r22	; 0x03
     1d4:	5e 83       	std	Y+6, r21	; 0x06
     1d6:	4d 83       	std	Y+5, r20	; 0x05
    return (stack_t *)osbme_init_stack( (void *)sstart, (osbme_code_t)code, (void *)arg );
     1d8:	89 81       	ldd	r24, Y+1	; 0x01
     1da:	9a 81       	ldd	r25, Y+2	; 0x02
     1dc:	2b 81       	ldd	r18, Y+3	; 0x03
     1de:	3c 81       	ldd	r19, Y+4	; 0x04
     1e0:	4d 81       	ldd	r20, Y+5	; 0x05
     1e2:	5e 81       	ldd	r21, Y+6	; 0x06
     1e4:	b9 01       	movw	r22, r18
     1e6:	0e 94 8a 04 	call	0x914	; 0x914 <osbme_init_stack>
}
     1ea:	26 96       	adiw	r28, 0x06	; 6
     1ec:	0f b6       	in	r0, 0x3f	; 63
     1ee:	f8 94       	cli
     1f0:	de bf       	out	0x3e, r29	; 62
     1f2:	0f be       	out	0x3f, r0	; 63
     1f4:	cd bf       	out	0x3d, r28	; 61
     1f6:	cf 91       	pop	r28
     1f8:	df 91       	pop	r29
     1fa:	08 95       	ret

000001fc <resched>:

// Состояние ядра, выполняем перепланиировку
unsigned char kernel_state = KRN_FLG_RESCHED;
// Функция перепланировки
void resched( void )
{
     1fc:	df 93       	push	r29
     1fe:	cf 93       	push	r28
     200:	cd b7       	in	r28, 0x3d	; 61
     202:	de b7       	in	r29, 0x3e	; 62
    kernel_state |= KRN_FLG_RESCHED;
     204:	80 91 00 01 	lds	r24, 0x0100
     208:	81 60       	ori	r24, 0x01	; 1
     20a:	80 93 00 01 	sts	0x0100, r24
}
     20e:	cf 91       	pop	r28
     210:	df 91       	pop	r29
     212:	08 95       	ret

00000214 <__vector_7>:
        sched_reschedule();
    }
}
__attribute__ (( signal, naked )) void SYSTEM_TIMER_ISR(void)
{
    BUGURT_ISR_START();
     214:	00 91 18 01 	lds	r16, 0x0118
     218:	10 91 19 01 	lds	r17, 0x0119
     21c:	0e 94 65 00 	call	0xca	; 0xca <osbme_store_context>
     220:	f8 01       	movw	r30, r16
     222:	95 a7       	std	Z+45, r25	; 0x2d
     224:	84 a7       	std	Z+44, r24	; 0x2c
     226:	80 91 6e 01 	lds	r24, 0x016E
     22a:	90 91 6f 01 	lds	r25, 0x016F
     22e:	0e 94 bc 00 	call	0x178	; 0x178 <osbme_set_stack_pointer>

    kernel.timer++;
     232:	80 91 72 01 	lds	r24, 0x0172
     236:	90 91 73 01 	lds	r25, 0x0173
     23a:	01 96       	adiw	r24, 0x01	; 1
     23c:	90 93 73 01 	sts	0x0173, r25
     240:	80 93 72 01 	sts	0x0172, r24
    sched_schedule();
     244:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <sched_schedule>

    BUGURT_ISR_EXIT();
     248:	e0 91 18 01 	lds	r30, 0x0118
     24c:	f0 91 19 01 	lds	r31, 0x0119
     250:	84 a5       	ldd	r24, Z+44	; 0x2c
     252:	95 a5       	ldd	r25, Z+45	; 0x2d
     254:	0e 94 91 00 	call	0x122	; 0x122 <osbme_load_context>
     258:	18 95       	reti

0000025a <init_bugurt>:
}
/***************************************************************************************************************/
// Функции общего пользования

void init_bugurt(void)
{
     25a:	df 93       	push	r29
     25c:	cf 93       	push	r28
     25e:	cd b7       	in	r28, 0x3d	; 61
     260:	de b7       	in	r29, 0x3e	; 62
    cli();
     262:	f8 94       	cli
    kernel.sched.nested_crit_sec = (count_t)1;
     264:	81 e0       	ldi	r24, 0x01	; 1
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	90 93 41 01 	sts	0x0141, r25
     26c:	80 93 40 01 	sts	0x0140, r24
    kernel_init();
     270:	0e 94 8c 09 	call	0x1318	; 0x1318 <kernel_init>
}
     274:	cf 91       	pop	r28
     276:	df 91       	pop	r29
     278:	08 95       	ret

0000027a <start_bugurt>:
void start_bugurt(void)
{
     27a:	df 93       	push	r29
     27c:	cf 93       	push	r28
     27e:	cd b7       	in	r28, 0x3d	; 61
     280:	de b7       	in	r29, 0x3e	; 62
    start_scheduler();
     282:	0e 94 41 11 	call	0x2282	; 0x2282 <start_scheduler>
    kernel.sched.nested_crit_sec = (count_t)0;
     286:	10 92 41 01 	sts	0x0141, r1
     28a:	10 92 40 01 	sts	0x0140, r1
    sei();
     28e:	78 94       	sei
    idle_main( (void *)0 );
     290:	80 e0       	ldi	r24, 0x00	; 0
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	0e 94 1e 12 	call	0x243c	; 0x243c <idle_main>
}
     298:	cf 91       	pop	r28
     29a:	df 91       	pop	r29
     29c:	08 95       	ret

0000029e <do_syscall>:
    scall_mutex_try_lock,
    scall_mutex_unlock
};

void do_syscall(void)
{
     29e:	df 93       	push	r29
     2a0:	cf 93       	push	r28
     2a2:	00 d0       	rcall	.+0      	; 0x2a4 <do_syscall+0x6>
     2a4:	00 d0       	rcall	.+0      	; 0x2a6 <do_syscall+0x8>
     2a6:	00 d0       	rcall	.+0      	; 0x2a8 <do_syscall+0xa>
     2a8:	cd b7       	in	r28, 0x3d	; 61
     2aa:	de b7       	in	r29, 0x3e	; 62
    if( syscall_num != (unsigned char)0 )
     2ac:	80 91 02 01 	lds	r24, 0x0102
     2b0:	88 23       	and	r24, r24
     2b2:	29 f1       	breq	.+74     	; 0x2fe <do_syscall+0x60>
    {
        syscall_num--;
     2b4:	80 91 02 01 	lds	r24, 0x0102
     2b8:	81 50       	subi	r24, 0x01	; 1
     2ba:	80 93 02 01 	sts	0x0102, r24
        code_t syscall_func;
        syscall_func = (code_t)pgm_read_word(syscall_routine + syscall_num);
     2be:	80 91 02 01 	lds	r24, 0x0102
     2c2:	88 2f       	mov	r24, r24
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	88 0f       	add	r24, r24
     2c8:	99 1f       	adc	r25, r25
     2ca:	88 59       	subi	r24, 0x98	; 152
     2cc:	9f 4f       	sbci	r25, 0xFF	; 255
     2ce:	9c 83       	std	Y+4, r25	; 0x04
     2d0:	8b 83       	std	Y+3, r24	; 0x03
     2d2:	8b 81       	ldd	r24, Y+3	; 0x03
     2d4:	9c 81       	ldd	r25, Y+4	; 0x04
     2d6:	fc 01       	movw	r30, r24
     2d8:	85 91       	lpm	r24, Z+
     2da:	94 91       	lpm	r25, Z+
     2dc:	9a 83       	std	Y+2, r25	; 0x02
     2de:	89 83       	std	Y+1, r24	; 0x01
     2e0:	fc 83       	std	Y+4, r31	; 0x04
     2e2:	eb 83       	std	Y+3, r30	; 0x03
     2e4:	89 81       	ldd	r24, Y+1	; 0x01
     2e6:	9a 81       	ldd	r25, Y+2	; 0x02
     2e8:	9e 83       	std	Y+6, r25	; 0x06
     2ea:	8d 83       	std	Y+5, r24	; 0x05
        syscall_func(syscall_arg);
     2ec:	80 91 03 01 	lds	r24, 0x0103
     2f0:	90 91 04 01 	lds	r25, 0x0104
     2f4:	ed 81       	ldd	r30, Y+5	; 0x05
     2f6:	fe 81       	ldd	r31, Y+6	; 0x06
     2f8:	09 95       	icall
        syscall_num = (unsigned char)0;
     2fa:	10 92 02 01 	sts	0x0102, r1
    }
}
     2fe:	26 96       	adiw	r28, 0x06	; 6
     300:	0f b6       	in	r0, 0x3f	; 63
     302:	f8 94       	cli
     304:	de bf       	out	0x3e, r29	; 62
     306:	0f be       	out	0x3f, r0	; 63
     308:	cd bf       	out	0x3d, r28	; 61
     30a:	cf 91       	pop	r28
     30c:	df 91       	pop	r29
     30e:	08 95       	ret

00000310 <__vector_2>:
    unsigned char num;
    void * arg;
} syscall_data_t;
__attribute__ (( signal, naked )) void SYSCALL_ISR(void)
{
    BUGURT_ISR_START();
     310:	00 91 18 01 	lds	r16, 0x0118
     314:	10 91 19 01 	lds	r17, 0x0119
     318:	0e 94 65 00 	call	0xca	; 0xca <osbme_store_context>
     31c:	f8 01       	movw	r30, r16
     31e:	95 a7       	std	Z+45, r25	; 0x2d
     320:	84 a7       	std	Z+44, r24	; 0x2c
     322:	80 91 6e 01 	lds	r24, 0x016E
     326:	90 91 6f 01 	lds	r25, 0x016F
     32a:	0e 94 bc 00 	call	0x178	; 0x178 <osbme_set_stack_pointer>

    // Получаем информацию о системном вызове из стека процесса
    unsigned char * tos;
    unsigned short temp;
    /// Извлечение syscall_num и syscall_arg из стека процесса
    tos = (unsigned char *)kernel.sched.current_proc->spointer + PROC_STACK_OFFSET;
     32e:	e0 91 18 01 	lds	r30, 0x0118
     332:	f0 91 19 01 	lds	r31, 0x0119
     336:	84 a5       	ldd	r24, Z+44	; 0x2c
     338:	95 a5       	ldd	r25, Z+45	; 0x2d
     33a:	07 96       	adiw	r24, 0x07	; 7
     33c:	9c 83       	std	Y+4, r25	; 0x04
     33e:	8b 83       	std	Y+3, r24	; 0x03
    temp = (unsigned short)*tos++;
     340:	eb 81       	ldd	r30, Y+3	; 0x03
     342:	fc 81       	ldd	r31, Y+4	; 0x04
     344:	80 81       	ld	r24, Z
     346:	88 2f       	mov	r24, r24
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	9a 83       	std	Y+2, r25	; 0x02
     34c:	89 83       	std	Y+1, r24	; 0x01
     34e:	8b 81       	ldd	r24, Y+3	; 0x03
     350:	9c 81       	ldd	r25, Y+4	; 0x04
     352:	01 96       	adiw	r24, 0x01	; 1
     354:	9c 83       	std	Y+4, r25	; 0x04
     356:	8b 83       	std	Y+3, r24	; 0x03
    temp <<= 8;
     358:	89 81       	ldd	r24, Y+1	; 0x01
     35a:	9a 81       	ldd	r25, Y+2	; 0x02
     35c:	98 2f       	mov	r25, r24
     35e:	88 27       	eor	r24, r24
     360:	9a 83       	std	Y+2, r25	; 0x02
     362:	89 83       	std	Y+1, r24	; 0x01
    temp |= (unsigned short)*tos;
     364:	eb 81       	ldd	r30, Y+3	; 0x03
     366:	fc 81       	ldd	r31, Y+4	; 0x04
     368:	80 81       	ld	r24, Z
     36a:	28 2f       	mov	r18, r24
     36c:	30 e0       	ldi	r19, 0x00	; 0
     36e:	89 81       	ldd	r24, Y+1	; 0x01
     370:	9a 81       	ldd	r25, Y+2	; 0x02
     372:	82 2b       	or	r24, r18
     374:	93 2b       	or	r25, r19
     376:	9a 83       	std	Y+2, r25	; 0x02
     378:	89 83       	std	Y+1, r24	; 0x01

    syscall_num = ((syscall_data_t *)temp)->num;
     37a:	e9 81       	ldd	r30, Y+1	; 0x01
     37c:	fa 81       	ldd	r31, Y+2	; 0x02
     37e:	80 81       	ld	r24, Z
     380:	80 93 02 01 	sts	0x0102, r24
    syscall_arg = ((syscall_data_t *)temp)->arg;
     384:	e9 81       	ldd	r30, Y+1	; 0x01
     386:	fa 81       	ldd	r31, Y+2	; 0x02
     388:	81 81       	ldd	r24, Z+1	; 0x01
     38a:	92 81       	ldd	r25, Z+2	; 0x02
     38c:	90 93 04 01 	sts	0x0104, r25
     390:	80 93 03 01 	sts	0x0103, r24

    // Обрабатываем системный вызов
    do_syscall();
     394:	0e 94 4f 01 	call	0x29e	; 0x29e <do_syscall>
    kernel_state &= ~KRN_FLG_DO_SCALL;
     398:	80 91 00 01 	lds	r24, 0x0100
     39c:	8d 7f       	andi	r24, 0xFD	; 253
     39e:	80 93 00 01 	sts	0x0100, r24

    // Перепланировка при необходимости
    if( kernel_state & KRN_FLG_RESCHED )
     3a2:	80 91 00 01 	lds	r24, 0x0100
     3a6:	88 2f       	mov	r24, r24
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	81 70       	andi	r24, 0x01	; 1
     3ac:	90 70       	andi	r25, 0x00	; 0
     3ae:	88 23       	and	r24, r24
     3b0:	39 f0       	breq	.+14     	; 0x3c0 <__vector_2+0xb0>
    {
        kernel_state &= ~KRN_FLG_RESCHED;
     3b2:	80 91 00 01 	lds	r24, 0x0100
     3b6:	8e 7f       	andi	r24, 0xFE	; 254
     3b8:	80 93 00 01 	sts	0x0100, r24
        sched_reschedule();
     3bc:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <sched_reschedule>
    }

    // Разрешаем обработку прерывания системного таймера.
    start_scheduler();
     3c0:	0e 94 41 11 	call	0x2282	; 0x2282 <start_scheduler>

    BUGURT_ISR_EXIT();
     3c4:	e0 91 18 01 	lds	r30, 0x0118
     3c8:	f0 91 19 01 	lds	r31, 0x0119
     3cc:	84 a5       	ldd	r24, Z+44	; 0x2c
     3ce:	95 a5       	ldd	r25, Z+45	; 0x2d
     3d0:	0e 94 91 00 	call	0x122	; 0x122 <osbme_load_context>
     3d4:	18 95       	reti

000003d6 <_syscall>:
}

syscall_data_t * _syscall( syscall_data_t * arg )
{
     3d6:	df 93       	push	r29
     3d8:	cf 93       	push	r28
     3da:	00 d0       	rcall	.+0      	; 0x3dc <_syscall+0x6>
     3dc:	cd b7       	in	r28, 0x3d	; 61
     3de:	de b7       	in	r29, 0x3e	; 62
     3e0:	9a 83       	std	Y+2, r25	; 0x02
     3e2:	89 83       	std	Y+1, r24	; 0x01
    kernel_state |= KRN_FLG_DO_SCALL;
     3e4:	80 91 00 01 	lds	r24, 0x0100
     3e8:	82 60       	ori	r24, 0x02	; 2
     3ea:	80 93 00 01 	sts	0x0100, r24
    stop_scheduler(); // Чтобы не было гонок с обработчиком прерывания системного таймера.
     3ee:	0e 94 4f 11 	call	0x229e	; 0x229e <stop_scheduler>
    raise_syscall_interrupt();
     3f2:	0e 94 1e 11 	call	0x223c	; 0x223c <raise_syscall_interrupt>
    sei();
     3f6:	78 94       	sei
    return arg;
     3f8:	89 81       	ldd	r24, Y+1	; 0x01
     3fa:	9a 81       	ldd	r25, Y+2	; 0x02
}
     3fc:	0f 90       	pop	r0
     3fe:	0f 90       	pop	r0
     400:	cf 91       	pop	r28
     402:	df 91       	pop	r29
     404:	08 95       	ret

00000406 <syscall>:

static syscall_data_t scdata;
void syscall( unsigned char num, void * arg )
{
     406:	df 93       	push	r29
     408:	cf 93       	push	r28
     40a:	00 d0       	rcall	.+0      	; 0x40c <syscall+0x6>
     40c:	0f 92       	push	r0
     40e:	cd b7       	in	r28, 0x3d	; 61
     410:	de b7       	in	r29, 0x3e	; 62
     412:	89 83       	std	Y+1, r24	; 0x01
     414:	7b 83       	std	Y+3, r23	; 0x03
     416:	6a 83       	std	Y+2, r22	; 0x02
     scdata.num = num;
     418:	89 81       	ldd	r24, Y+1	; 0x01
     41a:	80 93 15 01 	sts	0x0115, r24
     scdata.arg = arg;
     41e:	8a 81       	ldd	r24, Y+2	; 0x02
     420:	9b 81       	ldd	r25, Y+3	; 0x03
     422:	90 93 17 01 	sts	0x0117, r25
     426:	80 93 16 01 	sts	0x0116, r24
     _syscall( &scdata );
     42a:	85 e1       	ldi	r24, 0x15	; 21
     42c:	91 e0       	ldi	r25, 0x01	; 1
     42e:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <_syscall>
	...
     SYSCALL_DELLAY();
     while( kernel_state & KRN_FLG_DO_SCALL );
     43e:	80 91 00 01 	lds	r24, 0x0100
     442:	88 2f       	mov	r24, r24
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	82 70       	andi	r24, 0x02	; 2
     448:	90 70       	andi	r25, 0x00	; 0
     44a:	00 97       	sbiw	r24, 0x00	; 0
     44c:	c1 f7       	brne	.-16     	; 0x43e <syscall+0x38>
}
     44e:	0f 90       	pop	r0
     450:	0f 90       	pop	r0
     452:	0f 90       	pop	r0
     454:	cf 91       	pop	r28
     456:	df 91       	pop	r29
     458:	08 95       	ret

0000045a <scall_proc_init>:
///                 ОБРАБОТЧИКИ СИСТЕМНЫХ ВЫЗОВОВ
///=================================================================
///                   Управление процессами
//1
void scall_proc_init( void * arg )
{
     45a:	8f 92       	push	r8
     45c:	af 92       	push	r10
     45e:	bf 92       	push	r11
     460:	cf 92       	push	r12
     462:	df 92       	push	r13
     464:	ef 92       	push	r14
     466:	ff 92       	push	r15
     468:	0f 93       	push	r16
     46a:	1f 93       	push	r17
     46c:	df 93       	push	r29
     46e:	cf 93       	push	r28
     470:	00 d0       	rcall	.+0      	; 0x472 <scall_proc_init+0x18>
     472:	cd b7       	in	r28, 0x3d	; 61
     474:	de b7       	in	r29, 0x3e	; 62
     476:	9a 83       	std	Y+2, r25	; 0x02
     478:	89 83       	std	Y+1, r24	; 0x01
    proc_init_isr(
     47a:	e9 81       	ldd	r30, Y+1	; 0x01
     47c:	fa 81       	ldd	r31, Y+2	; 0x02
     47e:	80 81       	ld	r24, Z
     480:	91 81       	ldd	r25, Z+1	; 0x01
     482:	e9 81       	ldd	r30, Y+1	; 0x01
     484:	fa 81       	ldd	r31, Y+2	; 0x02
     486:	22 81       	ldd	r18, Z+2	; 0x02
     488:	33 81       	ldd	r19, Z+3	; 0x03
     48a:	e9 81       	ldd	r30, Y+1	; 0x01
     48c:	fa 81       	ldd	r31, Y+2	; 0x02
     48e:	44 81       	ldd	r20, Z+4	; 0x04
     490:	55 81       	ldd	r21, Z+5	; 0x05
     492:	e9 81       	ldd	r30, Y+1	; 0x01
     494:	fa 81       	ldd	r31, Y+2	; 0x02
     496:	06 81       	ldd	r16, Z+6	; 0x06
     498:	17 81       	ldd	r17, Z+7	; 0x07
     49a:	e9 81       	ldd	r30, Y+1	; 0x01
     49c:	fa 81       	ldd	r31, Y+2	; 0x02
     49e:	e0 84       	ldd	r14, Z+8	; 0x08
     4a0:	f1 84       	ldd	r15, Z+9	; 0x09
     4a2:	e9 81       	ldd	r30, Y+1	; 0x01
     4a4:	fa 81       	ldd	r31, Y+2	; 0x02
     4a6:	c2 84       	ldd	r12, Z+10	; 0x0a
     4a8:	d3 84       	ldd	r13, Z+11	; 0x0b
     4aa:	e9 81       	ldd	r30, Y+1	; 0x01
     4ac:	fa 81       	ldd	r31, Y+2	; 0x02
     4ae:	b4 84       	ldd	r11, Z+12	; 0x0c
     4b0:	e9 81       	ldd	r30, Y+1	; 0x01
     4b2:	fa 81       	ldd	r31, Y+2	; 0x02
     4b4:	a5 85       	ldd	r26, Z+13	; 0x0d
     4b6:	b6 85       	ldd	r27, Z+14	; 0x0e
     4b8:	e9 81       	ldd	r30, Y+1	; 0x01
     4ba:	fa 81       	ldd	r31, Y+2	; 0x02
     4bc:	e7 85       	ldd	r30, Z+15	; 0x0f
     4be:	b9 01       	movw	r22, r18
     4c0:	98 01       	movw	r18, r16
     4c2:	87 01       	movw	r16, r14
     4c4:	76 01       	movw	r14, r12
     4c6:	cb 2c       	mov	r12, r11
     4c8:	5d 01       	movw	r10, r26
     4ca:	8e 2e       	mov	r8, r30
     4cc:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <proc_init_isr>
              ((proc_init_arg_t *)arg)->sstart,
              ((proc_init_arg_t *)arg)->prio,
              ((proc_init_arg_t *)arg)->time_quant,
              ((proc_init_arg_t *)arg)->is_rt
              );
}
     4d0:	0f 90       	pop	r0
     4d2:	0f 90       	pop	r0
     4d4:	cf 91       	pop	r28
     4d6:	df 91       	pop	r29
     4d8:	1f 91       	pop	r17
     4da:	0f 91       	pop	r16
     4dc:	ff 90       	pop	r15
     4de:	ef 90       	pop	r14
     4e0:	df 90       	pop	r13
     4e2:	cf 90       	pop	r12
     4e4:	bf 90       	pop	r11
     4e6:	af 90       	pop	r10
     4e8:	8f 90       	pop	r8
     4ea:	08 95       	ret

000004ec <scall_proc_run>:
    syscall(1,(void *)&scarg);
}
//---------------------------------------------------------------------------------------------
//2
void scall_proc_run( void * arg )
{
     4ec:	0f 93       	push	r16
     4ee:	1f 93       	push	r17
     4f0:	df 93       	push	r29
     4f2:	cf 93       	push	r28
     4f4:	00 d0       	rcall	.+0      	; 0x4f6 <scall_proc_run+0xa>
     4f6:	cd b7       	in	r28, 0x3d	; 61
     4f8:	de b7       	in	r29, 0x3e	; 62
     4fa:	9a 83       	std	Y+2, r25	; 0x02
     4fc:	89 83       	std	Y+1, r24	; 0x01
    ((proc_runtime_arg_t *)arg)->scall_ret = proc_run_isr( ((proc_runtime_arg_t *)arg)->proc );
     4fe:	09 81       	ldd	r16, Y+1	; 0x01
     500:	1a 81       	ldd	r17, Y+2	; 0x02
     502:	e9 81       	ldd	r30, Y+1	; 0x01
     504:	fa 81       	ldd	r31, Y+2	; 0x02
     506:	80 81       	ld	r24, Z
     508:	91 81       	ldd	r25, Z+1	; 0x01
     50a:	0e 94 08 0c 	call	0x1810	; 0x1810 <proc_run_isr>
     50e:	f8 01       	movw	r30, r16
     510:	82 83       	std	Z+2, r24	; 0x02
}
     512:	0f 90       	pop	r0
     514:	0f 90       	pop	r0
     516:	cf 91       	pop	r28
     518:	df 91       	pop	r29
     51a:	1f 91       	pop	r17
     51c:	0f 91       	pop	r16
     51e:	08 95       	ret

00000520 <proc_run>:
bool_t proc_run( proc_t * proc )
{
     520:	df 93       	push	r29
     522:	cf 93       	push	r28
     524:	00 d0       	rcall	.+0      	; 0x526 <proc_run+0x6>
     526:	00 d0       	rcall	.+0      	; 0x528 <proc_run+0x8>
     528:	0f 92       	push	r0
     52a:	cd b7       	in	r28, 0x3d	; 61
     52c:	de b7       	in	r29, 0x3e	; 62
     52e:	9d 83       	std	Y+5, r25	; 0x05
     530:	8c 83       	std	Y+4, r24	; 0x04
    proc_runtime_arg_t scarg;
    scarg.proc = proc;
     532:	8c 81       	ldd	r24, Y+4	; 0x04
     534:	9d 81       	ldd	r25, Y+5	; 0x05
     536:	9a 83       	std	Y+2, r25	; 0x02
     538:	89 83       	std	Y+1, r24	; 0x01
    scarg.scall_ret = (bool_t)0;
     53a:	1b 82       	std	Y+3, r1	; 0x03
    cli(); // прерывания будут разрешены на выходе из _syscall()
     53c:	f8 94       	cli
    syscall(2,(void *)&scarg);
     53e:	82 e0       	ldi	r24, 0x02	; 2
     540:	9e 01       	movw	r18, r28
     542:	2f 5f       	subi	r18, 0xFF	; 255
     544:	3f 4f       	sbci	r19, 0xFF	; 255
     546:	b9 01       	movw	r22, r18
     548:	0e 94 03 02 	call	0x406	; 0x406 <syscall>
    return scarg.scall_ret;
     54c:	8b 81       	ldd	r24, Y+3	; 0x03
}
     54e:	0f 90       	pop	r0
     550:	0f 90       	pop	r0
     552:	0f 90       	pop	r0
     554:	0f 90       	pop	r0
     556:	0f 90       	pop	r0
     558:	cf 91       	pop	r28
     55a:	df 91       	pop	r29
     55c:	08 95       	ret

0000055e <scall_proc_restart>:
//---------------------------------------------------------------------------------------------
//3
void scall_proc_restart( void * arg )
{
     55e:	0f 93       	push	r16
     560:	1f 93       	push	r17
     562:	df 93       	push	r29
     564:	cf 93       	push	r28
     566:	00 d0       	rcall	.+0      	; 0x568 <scall_proc_restart+0xa>
     568:	cd b7       	in	r28, 0x3d	; 61
     56a:	de b7       	in	r29, 0x3e	; 62
     56c:	9a 83       	std	Y+2, r25	; 0x02
     56e:	89 83       	std	Y+1, r24	; 0x01
    ((proc_runtime_arg_t *)arg)->scall_ret = proc_restart_isr( ((proc_runtime_arg_t *)arg)->proc );
     570:	09 81       	ldd	r16, Y+1	; 0x01
     572:	1a 81       	ldd	r17, Y+2	; 0x02
     574:	e9 81       	ldd	r30, Y+1	; 0x01
     576:	fa 81       	ldd	r31, Y+2	; 0x02
     578:	80 81       	ld	r24, Z
     57a:	91 81       	ldd	r25, Z+1	; 0x01
     57c:	0e 94 28 0c 	call	0x1850	; 0x1850 <proc_restart_isr>
     580:	f8 01       	movw	r30, r16
     582:	82 83       	std	Z+2, r24	; 0x02
}
     584:	0f 90       	pop	r0
     586:	0f 90       	pop	r0
     588:	cf 91       	pop	r28
     58a:	df 91       	pop	r29
     58c:	1f 91       	pop	r17
     58e:	0f 91       	pop	r16
     590:	08 95       	ret

00000592 <scall_proc_stop>:
    return scarg.scall_ret;
}
//---------------------------------------------------------------------------------------------
//4
void scall_proc_stop( void * arg )
{
     592:	0f 93       	push	r16
     594:	1f 93       	push	r17
     596:	df 93       	push	r29
     598:	cf 93       	push	r28
     59a:	00 d0       	rcall	.+0      	; 0x59c <scall_proc_stop+0xa>
     59c:	cd b7       	in	r28, 0x3d	; 61
     59e:	de b7       	in	r29, 0x3e	; 62
     5a0:	9a 83       	std	Y+2, r25	; 0x02
     5a2:	89 83       	std	Y+1, r24	; 0x01
    ((proc_runtime_arg_t *)arg)->scall_ret = proc_stop_isr( ((proc_runtime_arg_t *)arg)->proc );
     5a4:	09 81       	ldd	r16, Y+1	; 0x01
     5a6:	1a 81       	ldd	r17, Y+2	; 0x02
     5a8:	e9 81       	ldd	r30, Y+1	; 0x01
     5aa:	fa 81       	ldd	r31, Y+2	; 0x02
     5ac:	80 81       	ld	r24, Z
     5ae:	91 81       	ldd	r25, Z+1	; 0x01
     5b0:	0e 94 8a 0c 	call	0x1914	; 0x1914 <proc_stop_isr>
     5b4:	f8 01       	movw	r30, r16
     5b6:	82 83       	std	Z+2, r24	; 0x02
}
     5b8:	0f 90       	pop	r0
     5ba:	0f 90       	pop	r0
     5bc:	cf 91       	pop	r28
     5be:	df 91       	pop	r29
     5c0:	1f 91       	pop	r17
     5c2:	0f 91       	pop	r16
     5c4:	08 95       	ret

000005c6 <scall_proc_self_stop>:
}

//---------------------------------------------------------------------------------------------
//5
void scall_proc_self_stop( void * arg )
{
     5c6:	df 93       	push	r29
     5c8:	cf 93       	push	r28
     5ca:	00 d0       	rcall	.+0      	; 0x5cc <scall_proc_self_stop+0x6>
     5cc:	00 d0       	rcall	.+0      	; 0x5ce <scall_proc_self_stop+0x8>
     5ce:	cd b7       	in	r28, 0x3d	; 61
     5d0:	de b7       	in	r29, 0x3e	; 62
     5d2:	9c 83       	std	Y+4, r25	; 0x04
     5d4:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = kernel.sched.current_proc;
     5d6:	80 91 18 01 	lds	r24, 0x0118
     5da:	90 91 19 01 	lds	r25, 0x0119
     5de:	9a 83       	std	Y+2, r25	; 0x02
     5e0:	89 83       	std	Y+1, r24	; 0x01
    _proc_stop( proc );
     5e2:	89 81       	ldd	r24, Y+1	; 0x01
     5e4:	9a 81       	ldd	r25, Y+2	; 0x02
     5e6:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_proc_stop>
}
     5ea:	0f 90       	pop	r0
     5ec:	0f 90       	pop	r0
     5ee:	0f 90       	pop	r0
     5f0:	0f 90       	pop	r0
     5f2:	cf 91       	pop	r28
     5f4:	df 91       	pop	r29
     5f6:	08 95       	ret

000005f8 <proc_self_stop>:
void proc_self_stop(void)
{
     5f8:	df 93       	push	r29
     5fa:	cf 93       	push	r28
     5fc:	cd b7       	in	r28, 0x3d	; 61
     5fe:	de b7       	in	r29, 0x3e	; 62
    cli(); // прерывания будут разрешены на выходе из _syscall()
     600:	f8 94       	cli
    syscall(5,(void *)1);
     602:	85 e0       	ldi	r24, 0x05	; 5
     604:	61 e0       	ldi	r22, 0x01	; 1
     606:	70 e0       	ldi	r23, 0x00	; 0
     608:	0e 94 03 02 	call	0x406	; 0x406 <syscall>
}
     60c:	cf 91       	pop	r28
     60e:	df 91       	pop	r29
     610:	08 95       	ret

00000612 <scall_proc_terminate>:
//---------------------------------------------------------------------------------------------
//6
/// Останов процесса после выхода из pmain, для обертки proc_run_wrapper
void scall_proc_terminate( void * arg )
{
     612:	df 93       	push	r29
     614:	cf 93       	push	r28
     616:	00 d0       	rcall	.+0      	; 0x618 <scall_proc_terminate+0x6>
     618:	00 d0       	rcall	.+0      	; 0x61a <scall_proc_terminate+0x8>
     61a:	cd b7       	in	r28, 0x3d	; 61
     61c:	de b7       	in	r29, 0x3e	; 62
     61e:	9c 83       	std	Y+4, r25	; 0x04
     620:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = (proc_t *)arg;
     622:	8b 81       	ldd	r24, Y+3	; 0x03
     624:	9c 81       	ldd	r25, Y+4	; 0x04
     626:	9a 83       	std	Y+2, r25	; 0x02
     628:	89 83       	std	Y+1, r24	; 0x01
    // Обрабатываем флаги
    // Нельзя выходить из pmain не освободив все захваченные ресурсы, за это процесс будет "убит"!
    if( proc->flags & PROC_FLG_HOLD ) proc->flags |= PROC_FLG_DEAD;
     62a:	e9 81       	ldd	r30, Y+1	; 0x01
     62c:	fa 81       	ldd	r31, Y+2	; 0x02
     62e:	83 85       	ldd	r24, Z+11	; 0x0b
     630:	88 2f       	mov	r24, r24
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	84 70       	andi	r24, 0x04	; 4
     636:	90 70       	andi	r25, 0x00	; 0
     638:	00 97       	sbiw	r24, 0x00	; 0
     63a:	41 f0       	breq	.+16     	; 0x64c <scall_proc_terminate+0x3a>
     63c:	e9 81       	ldd	r30, Y+1	; 0x01
     63e:	fa 81       	ldd	r31, Y+2	; 0x02
     640:	83 85       	ldd	r24, Z+11	; 0x0b
     642:	80 68       	ori	r24, 0x80	; 128
     644:	e9 81       	ldd	r30, Y+1	; 0x01
     646:	fa 81       	ldd	r31, Y+2	; 0x02
     648:	83 87       	std	Z+11, r24	; 0x0b
     64a:	07 c0       	rjmp	.+14     	; 0x65a <scall_proc_terminate+0x48>
    // В противном случае - просто завершаем процесс
    else proc->flags |= PROC_FLG_END;
     64c:	e9 81       	ldd	r30, Y+1	; 0x01
     64e:	fa 81       	ldd	r31, Y+2	; 0x02
     650:	83 85       	ldd	r24, Z+11	; 0x0b
     652:	80 64       	ori	r24, 0x40	; 64
     654:	e9 81       	ldd	r30, Y+1	; 0x01
     656:	fa 81       	ldd	r31, Y+2	; 0x02
     658:	83 87       	std	Z+11, r24	; 0x0b
    proc->flags &= ~(PROC_FLG_PRE_END|PROC_FLG_RUN);
     65a:	e9 81       	ldd	r30, Y+1	; 0x01
     65c:	fa 81       	ldd	r31, Y+2	; 0x02
     65e:	83 85       	ldd	r24, Z+11	; 0x0b
     660:	8d 7d       	andi	r24, 0xDD	; 221
     662:	e9 81       	ldd	r30, Y+1	; 0x01
     664:	fa 81       	ldd	r31, Y+2	; 0x02
     666:	83 87       	std	Z+11, r24	; 0x0b
    // Останов
    _proc_stop_( proc );
     668:	89 81       	ldd	r24, Y+1	; 0x01
     66a:	9a 81       	ldd	r25, Y+2	; 0x02
     66c:	0e 94 a9 07 	call	0xf52	; 0xf52 <gitem_cut>
    // Выполнить перепланировку
    resched();
     670:	0e 94 fe 00 	call	0x1fc	; 0x1fc <resched>
}
     674:	0f 90       	pop	r0
     676:	0f 90       	pop	r0
     678:	0f 90       	pop	r0
     67a:	0f 90       	pop	r0
     67c:	cf 91       	pop	r28
     67e:	df 91       	pop	r29
     680:	08 95       	ret

00000682 <proc_run_wrapper>:
void proc_run_wrapper( proc_t * proc )
{
     682:	df 93       	push	r29
     684:	cf 93       	push	r28
     686:	00 d0       	rcall	.+0      	; 0x688 <proc_run_wrapper+0x6>
     688:	00 d0       	rcall	.+0      	; 0x68a <proc_run_wrapper+0x8>
     68a:	00 d0       	rcall	.+0      	; 0x68c <proc_run_wrapper+0xa>
     68c:	cd b7       	in	r28, 0x3d	; 61
     68e:	de b7       	in	r29, 0x3e	; 62
     690:	9e 83       	std	Y+6, r25	; 0x06
     692:	8d 83       	std	Y+5, r24	; 0x05
    //Атомарно читаем pmain и arg
    cli();
     694:	f8 94       	cli
    code_t pmain = proc->pmain;
     696:	ed 81       	ldd	r30, Y+5	; 0x05
     698:	fe 81       	ldd	r31, Y+6	; 0x06
     69a:	82 a1       	ldd	r24, Z+34	; 0x22
     69c:	93 a1       	ldd	r25, Z+35	; 0x23
     69e:	9c 83       	std	Y+4, r25	; 0x04
     6a0:	8b 83       	std	Y+3, r24	; 0x03
    void * arg = proc->arg;
     6a2:	ed 81       	ldd	r30, Y+5	; 0x05
     6a4:	fe 81       	ldd	r31, Y+6	; 0x06
     6a6:	80 a5       	ldd	r24, Z+40	; 0x28
     6a8:	91 a5       	ldd	r25, Z+41	; 0x29
     6aa:	9a 83       	std	Y+2, r25	; 0x02
     6ac:	89 83       	std	Y+1, r24	; 0x01
    sei();
     6ae:	78 94       	sei
    //Выполняем pmain
    pmain( arg );
     6b0:	89 81       	ldd	r24, Y+1	; 0x01
     6b2:	9a 81       	ldd	r25, Y+2	; 0x02
     6b4:	eb 81       	ldd	r30, Y+3	; 0x03
     6b6:	fc 81       	ldd	r31, Y+4	; 0x04
     6b8:	09 95       	icall
    // Завершаем процесс
    cli(); // прерывания будут разрешены на выходе из _syscall()
     6ba:	f8 94       	cli
    syscall(6,(void *)proc);
     6bc:	2d 81       	ldd	r18, Y+5	; 0x05
     6be:	3e 81       	ldd	r19, Y+6	; 0x06
     6c0:	86 e0       	ldi	r24, 0x06	; 6
     6c2:	b9 01       	movw	r22, r18
     6c4:	0e 94 03 02 	call	0x406	; 0x406 <syscall>
}
     6c8:	26 96       	adiw	r28, 0x06	; 6
     6ca:	0f b6       	in	r0, 0x3f	; 63
     6cc:	f8 94       	cli
     6ce:	de bf       	out	0x3e, r29	; 62
     6d0:	0f be       	out	0x3f, r0	; 63
     6d2:	cd bf       	out	0x3d, r28	; 61
     6d4:	cf 91       	pop	r28
     6d6:	df 91       	pop	r29
     6d8:	08 95       	ret

000006da <scall_proc_flag_stop>:
//---------------------------------------------------------------------------------------------
//7
void scall_proc_flag_stop( void * arg )
{
     6da:	df 93       	push	r29
     6dc:	cf 93       	push	r28
     6de:	00 d0       	rcall	.+0      	; 0x6e0 <scall_proc_flag_stop+0x6>
     6e0:	cd b7       	in	r28, 0x3d	; 61
     6e2:	de b7       	in	r29, 0x3e	; 62
     6e4:	9a 83       	std	Y+2, r25	; 0x02
     6e6:	89 83       	std	Y+1, r24	; 0x01
    _proc_flag_stop_isr( *((flag_t *)arg) );
     6e8:	e9 81       	ldd	r30, Y+1	; 0x01
     6ea:	fa 81       	ldd	r31, Y+2	; 0x02
     6ec:	80 81       	ld	r24, Z
     6ee:	0e 94 df 0c 	call	0x19be	; 0x19be <_proc_flag_stop_isr>
}
     6f2:	0f 90       	pop	r0
     6f4:	0f 90       	pop	r0
     6f6:	cf 91       	pop	r28
     6f8:	df 91       	pop	r29
     6fa:	08 95       	ret

000006fc <scall_sig_init>:
///=================================================================
///                         Сигналы
//8
void scall_sig_init( void * arg )
{
     6fc:	df 93       	push	r29
     6fe:	cf 93       	push	r28
     700:	00 d0       	rcall	.+0      	; 0x702 <scall_sig_init+0x6>
     702:	cd b7       	in	r28, 0x3d	; 61
     704:	de b7       	in	r29, 0x3e	; 62
     706:	9a 83       	std	Y+2, r25	; 0x02
     708:	89 83       	std	Y+1, r24	; 0x01
    sig_init_isr( (sig_t *)arg );
     70a:	89 81       	ldd	r24, Y+1	; 0x01
     70c:	9a 81       	ldd	r25, Y+2	; 0x02
     70e:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <sig_init_isr>
}
     712:	0f 90       	pop	r0
     714:	0f 90       	pop	r0
     716:	cf 91       	pop	r28
     718:	df 91       	pop	r29
     71a:	08 95       	ret

0000071c <scall_sig_wait>:
    syscall( 8, (void *)sig );
}
//---------------------------------------------------------------------------------------------
//9
void scall_sig_wait( void * arg )
{
     71c:	df 93       	push	r29
     71e:	cf 93       	push	r28
     720:	00 d0       	rcall	.+0      	; 0x722 <scall_sig_wait+0x6>
     722:	cd b7       	in	r28, 0x3d	; 61
     724:	de b7       	in	r29, 0x3e	; 62
     726:	9a 83       	std	Y+2, r25	; 0x02
     728:	89 83       	std	Y+1, r24	; 0x01
    sig_wait_stage_1_isr( (sig_t *)arg );
     72a:	89 81       	ldd	r24, Y+1	; 0x01
     72c:	9a 81       	ldd	r25, Y+2	; 0x02
     72e:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <sig_wait_stage_1_isr>
}
     732:	0f 90       	pop	r0
     734:	0f 90       	pop	r0
     736:	cf 91       	pop	r28
     738:	df 91       	pop	r29
     73a:	08 95       	ret

0000073c <scall_sig_signal>:
    syscall( 7, (void *)&mask );/// Останов в случае необходимости
}
//---------------------------------------------------------------------------------------------
//10
void scall_sig_signal( void * arg )
{
     73c:	df 93       	push	r29
     73e:	cf 93       	push	r28
     740:	00 d0       	rcall	.+0      	; 0x742 <scall_sig_signal+0x6>
     742:	cd b7       	in	r28, 0x3d	; 61
     744:	de b7       	in	r29, 0x3e	; 62
     746:	9a 83       	std	Y+2, r25	; 0x02
     748:	89 83       	std	Y+1, r24	; 0x01
    sig_signal_isr( (sig_t *)arg );
     74a:	89 81       	ldd	r24, Y+1	; 0x01
     74c:	9a 81       	ldd	r25, Y+2	; 0x02
     74e:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <sig_signal_isr>
}
     752:	0f 90       	pop	r0
     754:	0f 90       	pop	r0
     756:	cf 91       	pop	r28
     758:	df 91       	pop	r29
     75a:	08 95       	ret

0000075c <scall_sig_broadcast>:
    syscall( 10, (void *)sig );
}
//---------------------------------------------------------------------------------------------
//11
void scall_sig_broadcast( void * arg )
{
     75c:	df 93       	push	r29
     75e:	cf 93       	push	r28
     760:	00 d0       	rcall	.+0      	; 0x762 <scall_sig_broadcast+0x6>
     762:	cd b7       	in	r28, 0x3d	; 61
     764:	de b7       	in	r29, 0x3e	; 62
     766:	9a 83       	std	Y+2, r25	; 0x02
     768:	89 83       	std	Y+1, r24	; 0x01
    sig_broadcast_isr( (sig_t *)arg );
     76a:	89 81       	ldd	r24, Y+1	; 0x01
     76c:	9a 81       	ldd	r25, Y+2	; 0x02
     76e:	0e 94 28 10 	call	0x2050	; 0x2050 <sig_broadcast_isr>
}
     772:	0f 90       	pop	r0
     774:	0f 90       	pop	r0
     776:	cf 91       	pop	r28
     778:	df 91       	pop	r29
     77a:	08 95       	ret

0000077c <scall_sem_init>:
}
///=================================================================
///                         Семафоры
//12
void scall_sem_init( void * arg )
{
     77c:	df 93       	push	r29
     77e:	cf 93       	push	r28
     780:	00 d0       	rcall	.+0      	; 0x782 <scall_sem_init+0x6>
     782:	cd b7       	in	r28, 0x3d	; 61
     784:	de b7       	in	r29, 0x3e	; 62
     786:	9a 83       	std	Y+2, r25	; 0x02
     788:	89 83       	std	Y+1, r24	; 0x01
    sem_init_isr( ((sem_init_arg_t *)arg)->sem, ((sem_init_arg_t *)arg)->count );
     78a:	e9 81       	ldd	r30, Y+1	; 0x01
     78c:	fa 81       	ldd	r31, Y+2	; 0x02
     78e:	80 81       	ld	r24, Z
     790:	91 81       	ldd	r25, Z+1	; 0x01
     792:	e9 81       	ldd	r30, Y+1	; 0x01
     794:	fa 81       	ldd	r31, Y+2	; 0x02
     796:	22 81       	ldd	r18, Z+2	; 0x02
     798:	33 81       	ldd	r19, Z+3	; 0x03
     79a:	b9 01       	movw	r22, r18
     79c:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <sem_init_isr>
}
     7a0:	0f 90       	pop	r0
     7a2:	0f 90       	pop	r0
     7a4:	cf 91       	pop	r28
     7a6:	df 91       	pop	r29
     7a8:	08 95       	ret

000007aa <scall_sem_lock>:
    syscall( 12, (void *)&scarg );
}
//----------------------------------------------------------------------
//13
void scall_sem_lock( void * arg )
{
     7aa:	0f 93       	push	r16
     7ac:	1f 93       	push	r17
     7ae:	df 93       	push	r29
     7b0:	cf 93       	push	r28
     7b2:	00 d0       	rcall	.+0      	; 0x7b4 <scall_sem_lock+0xa>
     7b4:	cd b7       	in	r28, 0x3d	; 61
     7b6:	de b7       	in	r29, 0x3e	; 62
     7b8:	9a 83       	std	Y+2, r25	; 0x02
     7ba:	89 83       	std	Y+1, r24	; 0x01
    ((sem_lock_arg_t *)arg)->scall_ret = _sem_lock( ((sem_lock_arg_t *)arg)->sem );
     7bc:	09 81       	ldd	r16, Y+1	; 0x01
     7be:	1a 81       	ldd	r17, Y+2	; 0x02
     7c0:	e9 81       	ldd	r30, Y+1	; 0x01
     7c2:	fa 81       	ldd	r31, Y+2	; 0x02
     7c4:	80 81       	ld	r24, Z
     7c6:	91 81       	ldd	r25, Z+1	; 0x01
     7c8:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <_sem_lock>
     7cc:	f8 01       	movw	r30, r16
     7ce:	82 83       	std	Z+2, r24	; 0x02
}
     7d0:	0f 90       	pop	r0
     7d2:	0f 90       	pop	r0
     7d4:	cf 91       	pop	r28
     7d6:	df 91       	pop	r29
     7d8:	1f 91       	pop	r17
     7da:	0f 91       	pop	r16
     7dc:	08 95       	ret

000007de <sem_lock>:
const flag_t all_flags_mask = ~(flag_t)0;
bool_t sem_lock( sem_t * sem )
{
     7de:	df 93       	push	r29
     7e0:	cf 93       	push	r28
     7e2:	00 d0       	rcall	.+0      	; 0x7e4 <sem_lock+0x6>
     7e4:	00 d0       	rcall	.+0      	; 0x7e6 <sem_lock+0x8>
     7e6:	0f 92       	push	r0
     7e8:	cd b7       	in	r28, 0x3d	; 61
     7ea:	de b7       	in	r29, 0x3e	; 62
     7ec:	9d 83       	std	Y+5, r25	; 0x05
     7ee:	8c 83       	std	Y+4, r24	; 0x04

    sem_lock_arg_t scarg;
    scarg.sem = sem;
     7f0:	8c 81       	ldd	r24, Y+4	; 0x04
     7f2:	9d 81       	ldd	r25, Y+5	; 0x05
     7f4:	9a 83       	std	Y+2, r25	; 0x02
     7f6:	89 83       	std	Y+1, r24	; 0x01
    cli(); // прерывания будут разрешены на выходе из _syscall()
     7f8:	f8 94       	cli
    syscall( 13, (void *)&scarg );
     7fa:	8d e0       	ldi	r24, 0x0D	; 13
     7fc:	9e 01       	movw	r18, r28
     7fe:	2f 5f       	subi	r18, 0xFF	; 255
     800:	3f 4f       	sbci	r19, 0xFF	; 255
     802:	b9 01       	movw	r22, r18
     804:	0e 94 03 02 	call	0x406	; 0x406 <syscall>
    return scarg.scall_ret;
     808:	8b 81       	ldd	r24, Y+3	; 0x03
}
     80a:	0f 90       	pop	r0
     80c:	0f 90       	pop	r0
     80e:	0f 90       	pop	r0
     810:	0f 90       	pop	r0
     812:	0f 90       	pop	r0
     814:	cf 91       	pop	r28
     816:	df 91       	pop	r29
     818:	08 95       	ret

0000081a <scall_sem_unlock>:
//----------------------------------------------------------------------
//14
void scall_sem_unlock( void * arg )
{
     81a:	df 93       	push	r29
     81c:	cf 93       	push	r28
     81e:	00 d0       	rcall	.+0      	; 0x820 <scall_sem_unlock+0x6>
     820:	cd b7       	in	r28, 0x3d	; 61
     822:	de b7       	in	r29, 0x3e	; 62
     824:	9a 83       	std	Y+2, r25	; 0x02
     826:	89 83       	std	Y+1, r24	; 0x01
    _sem_unlock( (sem_t *)arg );
     828:	89 81       	ldd	r24, Y+1	; 0x01
     82a:	9a 81       	ldd	r25, Y+2	; 0x02
     82c:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <_sem_unlock>
}
     830:	0f 90       	pop	r0
     832:	0f 90       	pop	r0
     834:	cf 91       	pop	r28
     836:	df 91       	pop	r29
     838:	08 95       	ret

0000083a <sem_unlock>:
void sem_unlock( sem_t * sem )
{
     83a:	df 93       	push	r29
     83c:	cf 93       	push	r28
     83e:	00 d0       	rcall	.+0      	; 0x840 <sem_unlock+0x6>
     840:	cd b7       	in	r28, 0x3d	; 61
     842:	de b7       	in	r29, 0x3e	; 62
     844:	9a 83       	std	Y+2, r25	; 0x02
     846:	89 83       	std	Y+1, r24	; 0x01
    cli(); // прерывания будут разрешены на выходе из _syscall()
     848:	f8 94       	cli
    syscall( 14, (void *)sem );
     84a:	29 81       	ldd	r18, Y+1	; 0x01
     84c:	3a 81       	ldd	r19, Y+2	; 0x02
     84e:	8e e0       	ldi	r24, 0x0E	; 14
     850:	b9 01       	movw	r22, r18
     852:	0e 94 03 02 	call	0x406	; 0x406 <syscall>
}
     856:	0f 90       	pop	r0
     858:	0f 90       	pop	r0
     85a:	cf 91       	pop	r28
     85c:	df 91       	pop	r29
     85e:	08 95       	ret

00000860 <scall_mutex_init>:
///=================================================================
///                         Мьютексы
//15
void scall_mutex_init(void * arg)
{
     860:	df 93       	push	r29
     862:	cf 93       	push	r28
     864:	00 d0       	rcall	.+0      	; 0x866 <scall_mutex_init+0x6>
     866:	cd b7       	in	r28, 0x3d	; 61
     868:	de b7       	in	r29, 0x3e	; 62
     86a:	9a 83       	std	Y+2, r25	; 0x02
     86c:	89 83       	std	Y+1, r24	; 0x01
    mutex_init_isr(
     86e:	e9 81       	ldd	r30, Y+1	; 0x01
     870:	fa 81       	ldd	r31, Y+2	; 0x02
     872:	80 81       	ld	r24, Z
     874:	91 81       	ldd	r25, Z+1	; 0x01
     876:	e9 81       	ldd	r30, Y+1	; 0x01
     878:	fa 81       	ldd	r31, Y+2	; 0x02
     87a:	22 81       	ldd	r18, Z+2	; 0x02
     87c:	62 2f       	mov	r22, r18
     87e:	0e 94 c1 09 	call	0x1382	; 0x1382 <mutex_init_isr>
               ((mutex_init_arg_t *)arg)->mutex
#ifdef CONFIG_USE_HIGHEST_LOCKER
               ,((mutex_init_arg_t *)arg)->prio
#endif // CONFIG_USE_HIGHEST_LOCKER
               );
}
     882:	0f 90       	pop	r0
     884:	0f 90       	pop	r0
     886:	cf 91       	pop	r28
     888:	df 91       	pop	r29
     88a:	08 95       	ret

0000088c <scall_mutex_lock>:
    syscall( 15, (void *)&scarg );
}
//----------------------------------------------------------------------
//16
void scall_mutex_lock(void * arg)
{
     88c:	0f 93       	push	r16
     88e:	1f 93       	push	r17
     890:	df 93       	push	r29
     892:	cf 93       	push	r28
     894:	00 d0       	rcall	.+0      	; 0x896 <scall_mutex_lock+0xa>
     896:	cd b7       	in	r28, 0x3d	; 61
     898:	de b7       	in	r29, 0x3e	; 62
     89a:	9a 83       	std	Y+2, r25	; 0x02
     89c:	89 83       	std	Y+1, r24	; 0x01
    ((mutex_lock_arg_t *)arg)->scall_ret = _mutex_lock( ((mutex_lock_arg_t *)arg)->mutex );
     89e:	09 81       	ldd	r16, Y+1	; 0x01
     8a0:	1a 81       	ldd	r17, Y+2	; 0x02
     8a2:	e9 81       	ldd	r30, Y+1	; 0x01
     8a4:	fa 81       	ldd	r31, Y+2	; 0x02
     8a6:	80 81       	ld	r24, Z
     8a8:	91 81       	ldd	r25, Z+1	; 0x01
     8aa:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <_mutex_lock>
     8ae:	f8 01       	movw	r30, r16
     8b0:	82 83       	std	Z+2, r24	; 0x02
}
     8b2:	0f 90       	pop	r0
     8b4:	0f 90       	pop	r0
     8b6:	cf 91       	pop	r28
     8b8:	df 91       	pop	r29
     8ba:	1f 91       	pop	r17
     8bc:	0f 91       	pop	r16
     8be:	08 95       	ret

000008c0 <scall_mutex_try_lock>:
}
// Захват
//----------------------------------------------------------------------
//17
void scall_mutex_try_lock(void * arg)
{
     8c0:	0f 93       	push	r16
     8c2:	1f 93       	push	r17
     8c4:	df 93       	push	r29
     8c6:	cf 93       	push	r28
     8c8:	00 d0       	rcall	.+0      	; 0x8ca <scall_mutex_try_lock+0xa>
     8ca:	cd b7       	in	r28, 0x3d	; 61
     8cc:	de b7       	in	r29, 0x3e	; 62
     8ce:	9a 83       	std	Y+2, r25	; 0x02
     8d0:	89 83       	std	Y+1, r24	; 0x01
    ((mutex_lock_arg_t *)arg)->scall_ret = _mutex_try_lock( ((mutex_lock_arg_t *)arg)->mutex );
     8d2:	09 81       	ldd	r16, Y+1	; 0x01
     8d4:	1a 81       	ldd	r17, Y+2	; 0x02
     8d6:	e9 81       	ldd	r30, Y+1	; 0x01
     8d8:	fa 81       	ldd	r31, Y+2	; 0x02
     8da:	80 81       	ld	r24, Z
     8dc:	91 81       	ldd	r25, Z+1	; 0x01
     8de:	0e 94 24 0a 	call	0x1448	; 0x1448 <_mutex_try_lock>
     8e2:	f8 01       	movw	r30, r16
     8e4:	82 83       	std	Z+2, r24	; 0x02
}
     8e6:	0f 90       	pop	r0
     8e8:	0f 90       	pop	r0
     8ea:	cf 91       	pop	r28
     8ec:	df 91       	pop	r29
     8ee:	1f 91       	pop	r17
     8f0:	0f 91       	pop	r16
     8f2:	08 95       	ret

000008f4 <scall_mutex_unlock>:
    return scarg.scall_ret;
}
//----------------------------------------------------------------------
//18
void scall_mutex_unlock(void * arg)
{
     8f4:	df 93       	push	r29
     8f6:	cf 93       	push	r28
     8f8:	00 d0       	rcall	.+0      	; 0x8fa <scall_mutex_unlock+0x6>
     8fa:	cd b7       	in	r28, 0x3d	; 61
     8fc:	de b7       	in	r29, 0x3e	; 62
     8fe:	9a 83       	std	Y+2, r25	; 0x02
     900:	89 83       	std	Y+1, r24	; 0x01
    _mutex_unlock( (mutex_t *)arg );
     902:	89 81       	ldd	r24, Y+1	; 0x01
     904:	9a 81       	ldd	r25, Y+2	; 0x02
     906:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <_mutex_unlock>
}
     90a:	0f 90       	pop	r0
     90c:	0f 90       	pop	r0
     90e:	cf 91       	pop	r28
     910:	df 91       	pop	r29
     912:	08 95       	ret

00000914 <osbme_init_stack>:
*                                                                                        *
*****************************************************************************************/
#include <avr/io.h>
#include "../../osbme.h"
void * osbme_init_stack( void * top_of_stack, osbme_code_t code, void * arg )
{
     914:	df 93       	push	r29
     916:	cf 93       	push	r28
     918:	cd b7       	in	r28, 0x3d	; 61
     91a:	de b7       	in	r29, 0x3e	; 62
     91c:	2a 97       	sbiw	r28, 0x0a	; 10
     91e:	0f b6       	in	r0, 0x3f	; 63
     920:	f8 94       	cli
     922:	de bf       	out	0x3e, r29	; 62
     924:	0f be       	out	0x3f, r0	; 63
     926:	cd bf       	out	0x3d, r28	; 61
     928:	9e 83       	std	Y+6, r25	; 0x06
     92a:	8d 83       	std	Y+5, r24	; 0x05
     92c:	78 87       	std	Y+8, r23	; 0x08
     92e:	6f 83       	std	Y+7, r22	; 0x07
     930:	5a 87       	std	Y+10, r21	; 0x0a
     932:	49 87       	std	Y+9, r20	; 0x09
    char * tos = (char *)top_of_stack;
     934:	8d 81       	ldd	r24, Y+5	; 0x05
     936:	9e 81       	ldd	r25, Y+6	; 0x06
     938:	9c 83       	std	Y+4, r25	; 0x04
     93a:	8b 83       	std	Y+3, r24	; 0x03
    //*tos-- = 0x11;
    //*tos-- = 0x22;
    //*tos-- = 0x33;

    // return address
    unsigned short tmp = (unsigned short)code;
     93c:	8f 81       	ldd	r24, Y+7	; 0x07
     93e:	98 85       	ldd	r25, Y+8	; 0x08
     940:	9a 83       	std	Y+2, r25	; 0x02
     942:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (char)(tmp&(unsigned short)0x00ff);
     944:	89 81       	ldd	r24, Y+1	; 0x01
     946:	eb 81       	ldd	r30, Y+3	; 0x03
     948:	fc 81       	ldd	r31, Y+4	; 0x04
     94a:	80 83       	st	Z, r24
     94c:	8b 81       	ldd	r24, Y+3	; 0x03
     94e:	9c 81       	ldd	r25, Y+4	; 0x04
     950:	01 97       	sbiw	r24, 0x01	; 1
     952:	9c 83       	std	Y+4, r25	; 0x04
     954:	8b 83       	std	Y+3, r24	; 0x03
    tmp>>=8;
     956:	89 81       	ldd	r24, Y+1	; 0x01
     958:	9a 81       	ldd	r25, Y+2	; 0x02
     95a:	89 2f       	mov	r24, r25
     95c:	99 27       	eor	r25, r25
     95e:	9a 83       	std	Y+2, r25	; 0x02
     960:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (char)(tmp&(unsigned short)0x00ff);
     962:	89 81       	ldd	r24, Y+1	; 0x01
     964:	eb 81       	ldd	r30, Y+3	; 0x03
     966:	fc 81       	ldd	r31, Y+4	; 0x04
     968:	80 83       	st	Z, r24
     96a:	8b 81       	ldd	r24, Y+3	; 0x03
     96c:	9c 81       	ldd	r25, Y+4	; 0x04
     96e:	01 97       	sbiw	r24, 0x01	; 1
     970:	9c 83       	std	Y+4, r25	; 0x04
     972:	8b 83       	std	Y+3, r24	; 0x03

    // s
    *tos-- = 0x00;
     974:	eb 81       	ldd	r30, Y+3	; 0x03
     976:	fc 81       	ldd	r31, Y+4	; 0x04
     978:	10 82       	st	Z, r1
     97a:	8b 81       	ldd	r24, Y+3	; 0x03
     97c:	9c 81       	ldd	r25, Y+4	; 0x04
     97e:	01 97       	sbiw	r24, 0x01	; 1
     980:	9c 83       	std	Y+4, r25	; 0x04
     982:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x00;// r1 must B 0
     984:	eb 81       	ldd	r30, Y+3	; 0x03
     986:	fc 81       	ldd	r31, Y+4	; 0x04
     988:	10 82       	st	Z, r1
     98a:	8b 81       	ldd	r24, Y+3	; 0x03
     98c:	9c 81       	ldd	r25, Y+4	; 0x04
     98e:	01 97       	sbiw	r24, 0x01	; 1
     990:	9c 83       	std	Y+4, r25	; 0x04
     992:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x02;// r2
     994:	eb 81       	ldd	r30, Y+3	; 0x03
     996:	fc 81       	ldd	r31, Y+4	; 0x04
     998:	82 e0       	ldi	r24, 0x02	; 2
     99a:	80 83       	st	Z, r24
     99c:	8b 81       	ldd	r24, Y+3	; 0x03
     99e:	9c 81       	ldd	r25, Y+4	; 0x04
     9a0:	01 97       	sbiw	r24, 0x01	; 1
     9a2:	9c 83       	std	Y+4, r25	; 0x04
     9a4:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x80;// SREG: enable interrupts
     9a6:	eb 81       	ldd	r30, Y+3	; 0x03
     9a8:	fc 81       	ldd	r31, Y+4	; 0x04
     9aa:	80 e8       	ldi	r24, 0x80	; 128
     9ac:	80 83       	st	Z, r24
     9ae:	8b 81       	ldd	r24, Y+3	; 0x03
     9b0:	9c 81       	ldd	r25, Y+4	; 0x04
     9b2:	01 97       	sbiw	r24, 0x01	; 1
     9b4:	9c 83       	std	Y+4, r25	; 0x04
     9b6:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x03;
     9b8:	eb 81       	ldd	r30, Y+3	; 0x03
     9ba:	fc 81       	ldd	r31, Y+4	; 0x04
     9bc:	83 e0       	ldi	r24, 0x03	; 3
     9be:	80 83       	st	Z, r24
     9c0:	8b 81       	ldd	r24, Y+3	; 0x03
     9c2:	9c 81       	ldd	r25, Y+4	; 0x04
     9c4:	01 97       	sbiw	r24, 0x01	; 1
     9c6:	9c 83       	std	Y+4, r25	; 0x04
     9c8:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x04;
     9ca:	eb 81       	ldd	r30, Y+3	; 0x03
     9cc:	fc 81       	ldd	r31, Y+4	; 0x04
     9ce:	84 e0       	ldi	r24, 0x04	; 4
     9d0:	80 83       	st	Z, r24
     9d2:	8b 81       	ldd	r24, Y+3	; 0x03
     9d4:	9c 81       	ldd	r25, Y+4	; 0x04
     9d6:	01 97       	sbiw	r24, 0x01	; 1
     9d8:	9c 83       	std	Y+4, r25	; 0x04
     9da:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x05;
     9dc:	eb 81       	ldd	r30, Y+3	; 0x03
     9de:	fc 81       	ldd	r31, Y+4	; 0x04
     9e0:	85 e0       	ldi	r24, 0x05	; 5
     9e2:	80 83       	st	Z, r24
     9e4:	8b 81       	ldd	r24, Y+3	; 0x03
     9e6:	9c 81       	ldd	r25, Y+4	; 0x04
     9e8:	01 97       	sbiw	r24, 0x01	; 1
     9ea:	9c 83       	std	Y+4, r25	; 0x04
     9ec:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x06;
     9ee:	eb 81       	ldd	r30, Y+3	; 0x03
     9f0:	fc 81       	ldd	r31, Y+4	; 0x04
     9f2:	86 e0       	ldi	r24, 0x06	; 6
     9f4:	80 83       	st	Z, r24
     9f6:	8b 81       	ldd	r24, Y+3	; 0x03
     9f8:	9c 81       	ldd	r25, Y+4	; 0x04
     9fa:	01 97       	sbiw	r24, 0x01	; 1
     9fc:	9c 83       	std	Y+4, r25	; 0x04
     9fe:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x07;
     a00:	eb 81       	ldd	r30, Y+3	; 0x03
     a02:	fc 81       	ldd	r31, Y+4	; 0x04
     a04:	87 e0       	ldi	r24, 0x07	; 7
     a06:	80 83       	st	Z, r24
     a08:	8b 81       	ldd	r24, Y+3	; 0x03
     a0a:	9c 81       	ldd	r25, Y+4	; 0x04
     a0c:	01 97       	sbiw	r24, 0x01	; 1
     a0e:	9c 83       	std	Y+4, r25	; 0x04
     a10:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x08;
     a12:	eb 81       	ldd	r30, Y+3	; 0x03
     a14:	fc 81       	ldd	r31, Y+4	; 0x04
     a16:	88 e0       	ldi	r24, 0x08	; 8
     a18:	80 83       	st	Z, r24
     a1a:	8b 81       	ldd	r24, Y+3	; 0x03
     a1c:	9c 81       	ldd	r25, Y+4	; 0x04
     a1e:	01 97       	sbiw	r24, 0x01	; 1
     a20:	9c 83       	std	Y+4, r25	; 0x04
     a22:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x09;
     a24:	eb 81       	ldd	r30, Y+3	; 0x03
     a26:	fc 81       	ldd	r31, Y+4	; 0x04
     a28:	89 e0       	ldi	r24, 0x09	; 9
     a2a:	80 83       	st	Z, r24
     a2c:	8b 81       	ldd	r24, Y+3	; 0x03
     a2e:	9c 81       	ldd	r25, Y+4	; 0x04
     a30:	01 97       	sbiw	r24, 0x01	; 1
     a32:	9c 83       	std	Y+4, r25	; 0x04
     a34:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x10;
     a36:	eb 81       	ldd	r30, Y+3	; 0x03
     a38:	fc 81       	ldd	r31, Y+4	; 0x04
     a3a:	80 e1       	ldi	r24, 0x10	; 16
     a3c:	80 83       	st	Z, r24
     a3e:	8b 81       	ldd	r24, Y+3	; 0x03
     a40:	9c 81       	ldd	r25, Y+4	; 0x04
     a42:	01 97       	sbiw	r24, 0x01	; 1
     a44:	9c 83       	std	Y+4, r25	; 0x04
     a46:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x11;
     a48:	eb 81       	ldd	r30, Y+3	; 0x03
     a4a:	fc 81       	ldd	r31, Y+4	; 0x04
     a4c:	81 e1       	ldi	r24, 0x11	; 17
     a4e:	80 83       	st	Z, r24
     a50:	8b 81       	ldd	r24, Y+3	; 0x03
     a52:	9c 81       	ldd	r25, Y+4	; 0x04
     a54:	01 97       	sbiw	r24, 0x01	; 1
     a56:	9c 83       	std	Y+4, r25	; 0x04
     a58:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x12;
     a5a:	eb 81       	ldd	r30, Y+3	; 0x03
     a5c:	fc 81       	ldd	r31, Y+4	; 0x04
     a5e:	82 e1       	ldi	r24, 0x12	; 18
     a60:	80 83       	st	Z, r24
     a62:	8b 81       	ldd	r24, Y+3	; 0x03
     a64:	9c 81       	ldd	r25, Y+4	; 0x04
     a66:	01 97       	sbiw	r24, 0x01	; 1
     a68:	9c 83       	std	Y+4, r25	; 0x04
     a6a:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x13;
     a6c:	eb 81       	ldd	r30, Y+3	; 0x03
     a6e:	fc 81       	ldd	r31, Y+4	; 0x04
     a70:	83 e1       	ldi	r24, 0x13	; 19
     a72:	80 83       	st	Z, r24
     a74:	8b 81       	ldd	r24, Y+3	; 0x03
     a76:	9c 81       	ldd	r25, Y+4	; 0x04
     a78:	01 97       	sbiw	r24, 0x01	; 1
     a7a:	9c 83       	std	Y+4, r25	; 0x04
     a7c:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x14;
     a7e:	eb 81       	ldd	r30, Y+3	; 0x03
     a80:	fc 81       	ldd	r31, Y+4	; 0x04
     a82:	84 e1       	ldi	r24, 0x14	; 20
     a84:	80 83       	st	Z, r24
     a86:	8b 81       	ldd	r24, Y+3	; 0x03
     a88:	9c 81       	ldd	r25, Y+4	; 0x04
     a8a:	01 97       	sbiw	r24, 0x01	; 1
     a8c:	9c 83       	std	Y+4, r25	; 0x04
     a8e:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x15;
     a90:	eb 81       	ldd	r30, Y+3	; 0x03
     a92:	fc 81       	ldd	r31, Y+4	; 0x04
     a94:	85 e1       	ldi	r24, 0x15	; 21
     a96:	80 83       	st	Z, r24
     a98:	8b 81       	ldd	r24, Y+3	; 0x03
     a9a:	9c 81       	ldd	r25, Y+4	; 0x04
     a9c:	01 97       	sbiw	r24, 0x01	; 1
     a9e:	9c 83       	std	Y+4, r25	; 0x04
     aa0:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x16;
     aa2:	eb 81       	ldd	r30, Y+3	; 0x03
     aa4:	fc 81       	ldd	r31, Y+4	; 0x04
     aa6:	86 e1       	ldi	r24, 0x16	; 22
     aa8:	80 83       	st	Z, r24
     aaa:	8b 81       	ldd	r24, Y+3	; 0x03
     aac:	9c 81       	ldd	r25, Y+4	; 0x04
     aae:	01 97       	sbiw	r24, 0x01	; 1
     ab0:	9c 83       	std	Y+4, r25	; 0x04
     ab2:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x17;
     ab4:	eb 81       	ldd	r30, Y+3	; 0x03
     ab6:	fc 81       	ldd	r31, Y+4	; 0x04
     ab8:	87 e1       	ldi	r24, 0x17	; 23
     aba:	80 83       	st	Z, r24
     abc:	8b 81       	ldd	r24, Y+3	; 0x03
     abe:	9c 81       	ldd	r25, Y+4	; 0x04
     ac0:	01 97       	sbiw	r24, 0x01	; 1
     ac2:	9c 83       	std	Y+4, r25	; 0x04
     ac4:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x18;
     ac6:	eb 81       	ldd	r30, Y+3	; 0x03
     ac8:	fc 81       	ldd	r31, Y+4	; 0x04
     aca:	88 e1       	ldi	r24, 0x18	; 24
     acc:	80 83       	st	Z, r24
     ace:	8b 81       	ldd	r24, Y+3	; 0x03
     ad0:	9c 81       	ldd	r25, Y+4	; 0x04
     ad2:	01 97       	sbiw	r24, 0x01	; 1
     ad4:	9c 83       	std	Y+4, r25	; 0x04
     ad6:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x19;
     ad8:	eb 81       	ldd	r30, Y+3	; 0x03
     ada:	fc 81       	ldd	r31, Y+4	; 0x04
     adc:	89 e1       	ldi	r24, 0x19	; 25
     ade:	80 83       	st	Z, r24
     ae0:	8b 81       	ldd	r24, Y+3	; 0x03
     ae2:	9c 81       	ldd	r25, Y+4	; 0x04
     ae4:	01 97       	sbiw	r24, 0x01	; 1
     ae6:	9c 83       	std	Y+4, r25	; 0x04
     ae8:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x20;
     aea:	eb 81       	ldd	r30, Y+3	; 0x03
     aec:	fc 81       	ldd	r31, Y+4	; 0x04
     aee:	80 e2       	ldi	r24, 0x20	; 32
     af0:	80 83       	st	Z, r24
     af2:	8b 81       	ldd	r24, Y+3	; 0x03
     af4:	9c 81       	ldd	r25, Y+4	; 0x04
     af6:	01 97       	sbiw	r24, 0x01	; 1
     af8:	9c 83       	std	Y+4, r25	; 0x04
     afa:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x21;
     afc:	eb 81       	ldd	r30, Y+3	; 0x03
     afe:	fc 81       	ldd	r31, Y+4	; 0x04
     b00:	81 e2       	ldi	r24, 0x21	; 33
     b02:	80 83       	st	Z, r24
     b04:	8b 81       	ldd	r24, Y+3	; 0x03
     b06:	9c 81       	ldd	r25, Y+4	; 0x04
     b08:	01 97       	sbiw	r24, 0x01	; 1
     b0a:	9c 83       	std	Y+4, r25	; 0x04
     b0c:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x22;
     b0e:	eb 81       	ldd	r30, Y+3	; 0x03
     b10:	fc 81       	ldd	r31, Y+4	; 0x04
     b12:	82 e2       	ldi	r24, 0x22	; 34
     b14:	80 83       	st	Z, r24
     b16:	8b 81       	ldd	r24, Y+3	; 0x03
     b18:	9c 81       	ldd	r25, Y+4	; 0x04
     b1a:	01 97       	sbiw	r24, 0x01	; 1
     b1c:	9c 83       	std	Y+4, r25	; 0x04
     b1e:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x23;
     b20:	eb 81       	ldd	r30, Y+3	; 0x03
     b22:	fc 81       	ldd	r31, Y+4	; 0x04
     b24:	83 e2       	ldi	r24, 0x23	; 35
     b26:	80 83       	st	Z, r24
     b28:	8b 81       	ldd	r24, Y+3	; 0x03
     b2a:	9c 81       	ldd	r25, Y+4	; 0x04
     b2c:	01 97       	sbiw	r24, 0x01	; 1
     b2e:	9c 83       	std	Y+4, r25	; 0x04
     b30:	8b 83       	std	Y+3, r24	; 0x03

    tmp = (unsigned short)arg;
     b32:	89 85       	ldd	r24, Y+9	; 0x09
     b34:	9a 85       	ldd	r25, Y+10	; 0x0a
     b36:	9a 83       	std	Y+2, r25	; 0x02
     b38:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (char)(tmp&(unsigned short)0x00ff); // r24 LSByte of arg
     b3a:	89 81       	ldd	r24, Y+1	; 0x01
     b3c:	eb 81       	ldd	r30, Y+3	; 0x03
     b3e:	fc 81       	ldd	r31, Y+4	; 0x04
     b40:	80 83       	st	Z, r24
     b42:	8b 81       	ldd	r24, Y+3	; 0x03
     b44:	9c 81       	ldd	r25, Y+4	; 0x04
     b46:	01 97       	sbiw	r24, 0x01	; 1
     b48:	9c 83       	std	Y+4, r25	; 0x04
     b4a:	8b 83       	std	Y+3, r24	; 0x03
    tmp>>=8;
     b4c:	89 81       	ldd	r24, Y+1	; 0x01
     b4e:	9a 81       	ldd	r25, Y+2	; 0x02
     b50:	89 2f       	mov	r24, r25
     b52:	99 27       	eor	r25, r25
     b54:	9a 83       	std	Y+2, r25	; 0x02
     b56:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (char)(tmp&(unsigned short)0x00ff); // r25 MSByte of arg
     b58:	89 81       	ldd	r24, Y+1	; 0x01
     b5a:	eb 81       	ldd	r30, Y+3	; 0x03
     b5c:	fc 81       	ldd	r31, Y+4	; 0x04
     b5e:	80 83       	st	Z, r24
     b60:	8b 81       	ldd	r24, Y+3	; 0x03
     b62:	9c 81       	ldd	r25, Y+4	; 0x04
     b64:	01 97       	sbiw	r24, 0x01	; 1
     b66:	9c 83       	std	Y+4, r25	; 0x04
     b68:	8b 83       	std	Y+3, r24	; 0x03

    *tos-- = 0x26;
     b6a:	eb 81       	ldd	r30, Y+3	; 0x03
     b6c:	fc 81       	ldd	r31, Y+4	; 0x04
     b6e:	86 e2       	ldi	r24, 0x26	; 38
     b70:	80 83       	st	Z, r24
     b72:	8b 81       	ldd	r24, Y+3	; 0x03
     b74:	9c 81       	ldd	r25, Y+4	; 0x04
     b76:	01 97       	sbiw	r24, 0x01	; 1
     b78:	9c 83       	std	Y+4, r25	; 0x04
     b7a:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x27;
     b7c:	eb 81       	ldd	r30, Y+3	; 0x03
     b7e:	fc 81       	ldd	r31, Y+4	; 0x04
     b80:	87 e2       	ldi	r24, 0x27	; 39
     b82:	80 83       	st	Z, r24
     b84:	8b 81       	ldd	r24, Y+3	; 0x03
     b86:	9c 81       	ldd	r25, Y+4	; 0x04
     b88:	01 97       	sbiw	r24, 0x01	; 1
     b8a:	9c 83       	std	Y+4, r25	; 0x04
     b8c:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x28;
     b8e:	eb 81       	ldd	r30, Y+3	; 0x03
     b90:	fc 81       	ldd	r31, Y+4	; 0x04
     b92:	88 e2       	ldi	r24, 0x28	; 40
     b94:	80 83       	st	Z, r24
     b96:	8b 81       	ldd	r24, Y+3	; 0x03
     b98:	9c 81       	ldd	r25, Y+4	; 0x04
     b9a:	01 97       	sbiw	r24, 0x01	; 1
     b9c:	9c 83       	std	Y+4, r25	; 0x04
     b9e:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x29;
     ba0:	eb 81       	ldd	r30, Y+3	; 0x03
     ba2:	fc 81       	ldd	r31, Y+4	; 0x04
     ba4:	89 e2       	ldi	r24, 0x29	; 41
     ba6:	80 83       	st	Z, r24
     ba8:	8b 81       	ldd	r24, Y+3	; 0x03
     baa:	9c 81       	ldd	r25, Y+4	; 0x04
     bac:	01 97       	sbiw	r24, 0x01	; 1
     bae:	9c 83       	std	Y+4, r25	; 0x04
     bb0:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x30;
     bb2:	eb 81       	ldd	r30, Y+3	; 0x03
     bb4:	fc 81       	ldd	r31, Y+4	; 0x04
     bb6:	80 e3       	ldi	r24, 0x30	; 48
     bb8:	80 83       	st	Z, r24
     bba:	8b 81       	ldd	r24, Y+3	; 0x03
     bbc:	9c 81       	ldd	r25, Y+4	; 0x04
     bbe:	01 97       	sbiw	r24, 0x01	; 1
     bc0:	9c 83       	std	Y+4, r25	; 0x04
     bc2:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x31;
     bc4:	eb 81       	ldd	r30, Y+3	; 0x03
     bc6:	fc 81       	ldd	r31, Y+4	; 0x04
     bc8:	81 e3       	ldi	r24, 0x31	; 49
     bca:	80 83       	st	Z, r24
     bcc:	8b 81       	ldd	r24, Y+3	; 0x03
     bce:	9c 81       	ldd	r25, Y+4	; 0x04
     bd0:	01 97       	sbiw	r24, 0x01	; 1
     bd2:	9c 83       	std	Y+4, r25	; 0x04
     bd4:	8b 83       	std	Y+3, r24	; 0x03
#ifdef RAMPZ
    *tos-- = 0xff;
#endif
    return((void *)tos);
     bd6:	8b 81       	ldd	r24, Y+3	; 0x03
     bd8:	9c 81       	ldd	r25, Y+4	; 0x04
}
     bda:	2a 96       	adiw	r28, 0x0a	; 10
     bdc:	0f b6       	in	r0, 0x3f	; 63
     bde:	f8 94       	cli
     be0:	de bf       	out	0x3e, r29	; 62
     be2:	0f be       	out	0x3f, r0	; 63
     be4:	cd bf       	out	0x3d, r28	; 61
     be6:	cf 91       	pop	r28
     be8:	df 91       	pop	r29
     bea:	08 95       	ret

00000bec <enter_crit_sec>:
    if( kernel.sched[core].nested_crit_sec == (count_t)0 )enable_interrupts();
}

#else
void enter_crit_sec(void)
{
     bec:	df 93       	push	r29
     bee:	cf 93       	push	r28
     bf0:	cd b7       	in	r28, 0x3d	; 61
     bf2:	de b7       	in	r29, 0x3e	; 62
    disable_interrupts();
     bf4:	0e 94 c4 00 	call	0x188	; 0x188 <disable_interrupts>
    kernel.sched.nested_crit_sec++;
     bf8:	80 91 40 01 	lds	r24, 0x0140
     bfc:	90 91 41 01 	lds	r25, 0x0141
     c00:	01 96       	adiw	r24, 0x01	; 1
     c02:	90 93 41 01 	sts	0x0141, r25
     c06:	80 93 40 01 	sts	0x0140, r24
}
     c0a:	cf 91       	pop	r28
     c0c:	df 91       	pop	r29
     c0e:	08 95       	ret

00000c10 <exit_crit_sec>:
void exit_crit_sec(void)
{
     c10:	df 93       	push	r29
     c12:	cf 93       	push	r28
     c14:	cd b7       	in	r28, 0x3d	; 61
     c16:	de b7       	in	r29, 0x3e	; 62
    if( kernel.sched.nested_crit_sec != (count_t)0 )kernel.sched.nested_crit_sec--;
     c18:	80 91 40 01 	lds	r24, 0x0140
     c1c:	90 91 41 01 	lds	r25, 0x0141
     c20:	00 97       	sbiw	r24, 0x00	; 0
     c22:	49 f0       	breq	.+18     	; 0xc36 <exit_crit_sec+0x26>
     c24:	80 91 40 01 	lds	r24, 0x0140
     c28:	90 91 41 01 	lds	r25, 0x0141
     c2c:	01 97       	sbiw	r24, 0x01	; 1
     c2e:	90 93 41 01 	sts	0x0141, r25
     c32:	80 93 40 01 	sts	0x0140, r24
    if( kernel.sched.nested_crit_sec == (count_t)0 )enable_interrupts();
     c36:	80 91 40 01 	lds	r24, 0x0140
     c3a:	90 91 41 01 	lds	r25, 0x0141
     c3e:	00 97       	sbiw	r24, 0x00	; 0
     c40:	11 f4       	brne	.+4      	; 0xc46 <exit_crit_sec+0x36>
     c42:	0e 94 cc 00 	call	0x198	; 0x198 <enable_interrupts>
}
     c46:	cf 91       	pop	r28
     c48:	df 91       	pop	r29
     c4a:	08 95       	ret

00000c4c <gitem_init>:
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
// Инициация
void gitem_init(gitem_t * gitem, prio_t prio)
{
     c4c:	df 93       	push	r29
     c4e:	cf 93       	push	r28
     c50:	00 d0       	rcall	.+0      	; 0xc52 <gitem_init+0x6>
     c52:	00 d0       	rcall	.+0      	; 0xc54 <gitem_init+0x8>
     c54:	0f 92       	push	r0
     c56:	cd b7       	in	r28, 0x3d	; 61
     c58:	de b7       	in	r29, 0x3e	; 62
     c5a:	9c 83       	std	Y+4, r25	; 0x04
     c5c:	8b 83       	std	Y+3, r24	; 0x03
     c5e:	6d 83       	std	Y+5, r22	; 0x05
    group_t * group = &gitem->grp;
     c60:	8b 81       	ldd	r24, Y+3	; 0x03
     c62:	9c 81       	ldd	r25, Y+4	; 0x04
     c64:	06 96       	adiw	r24, 0x06	; 6
     c66:	9a 83       	std	Y+2, r25	; 0x02
     c68:	89 83       	std	Y+1, r24	; 0x01
    item_init( (item_t *)gitem );
     c6a:	8b 81       	ldd	r24, Y+3	; 0x03
     c6c:	9c 81       	ldd	r25, Y+4	; 0x04
     c6e:	0e 94 0c 09 	call	0x1218	; 0x1218 <item_init>
    group_init( group, prio );
     c72:	89 81       	ldd	r24, Y+1	; 0x01
     c74:	9a 81       	ldd	r25, Y+2	; 0x02
     c76:	6d 81       	ldd	r22, Y+5	; 0x05
     c78:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <group_init>
    gitem->group = group;
     c7c:	eb 81       	ldd	r30, Y+3	; 0x03
     c7e:	fc 81       	ldd	r31, Y+4	; 0x04
     c80:	89 81       	ldd	r24, Y+1	; 0x01
     c82:	9a 81       	ldd	r25, Y+2	; 0x02
     c84:	95 83       	std	Z+5, r25	; 0x05
     c86:	84 83       	std	Z+4, r24	; 0x04
}
     c88:	0f 90       	pop	r0
     c8a:	0f 90       	pop	r0
     c8c:	0f 90       	pop	r0
     c8e:	0f 90       	pop	r0
     c90:	0f 90       	pop	r0
     c92:	cf 91       	pop	r28
     c94:	df 91       	pop	r29
     c96:	08 95       	ret

00000c98 <gitem_insert>:
// Вставить в список
void gitem_insert(gitem_t * gitem, xlist_t *xlist)
{
     c98:	df 93       	push	r29
     c9a:	cf 93       	push	r28
     c9c:	cd b7       	in	r28, 0x3d	; 61
     c9e:	de b7       	in	r29, 0x3e	; 62
     ca0:	28 97       	sbiw	r28, 0x08	; 8
     ca2:	0f b6       	in	r0, 0x3f	; 63
     ca4:	f8 94       	cli
     ca6:	de bf       	out	0x3e, r29	; 62
     ca8:	0f be       	out	0x3f, r0	; 63
     caa:	cd bf       	out	0x3d, r28	; 61
     cac:	9e 83       	std	Y+6, r25	; 0x06
     cae:	8d 83       	std	Y+5, r24	; 0x05
     cb0:	78 87       	std	Y+8, r23	; 0x08
     cb2:	6f 83       	std	Y+7, r22	; 0x07
    prio_t prio = gitem->group->prio;
     cb4:	ed 81       	ldd	r30, Y+5	; 0x05
     cb6:	fe 81       	ldd	r31, Y+6	; 0x06
     cb8:	04 80       	ldd	r0, Z+4	; 0x04
     cba:	f5 81       	ldd	r31, Z+5	; 0x05
     cbc:	e0 2d       	mov	r30, r0
     cbe:	82 81       	ldd	r24, Z+2	; 0x02
     cc0:	8c 83       	std	Y+4, r24	; 0x04
    index_t mask = ((index_t)1)<<prio;
     cc2:	8c 81       	ldd	r24, Y+4	; 0x04
     cc4:	28 2f       	mov	r18, r24
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	02 c0       	rjmp	.+4      	; 0xcd2 <gitem_insert+0x3a>
     cce:	88 0f       	add	r24, r24
     cd0:	99 1f       	adc	r25, r25
     cd2:	2a 95       	dec	r18
     cd4:	e2 f7       	brpl	.-8      	; 0xcce <gitem_insert+0x36>
     cd6:	8b 83       	std	Y+3, r24	; 0x03
    item_t ** head = (item_t **)xlist + prio;
     cd8:	2f 81       	ldd	r18, Y+7	; 0x07
     cda:	38 85       	ldd	r19, Y+8	; 0x08
     cdc:	8c 81       	ldd	r24, Y+4	; 0x04
     cde:	88 2f       	mov	r24, r24
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	88 0f       	add	r24, r24
     ce4:	99 1f       	adc	r25, r25
     ce6:	82 0f       	add	r24, r18
     ce8:	93 1f       	adc	r25, r19
     cea:	9a 83       	std	Y+2, r25	; 0x02
     cec:	89 83       	std	Y+1, r24	; 0x01
    // Пуста ли часть списка с таким приоритетом
    if( ( xlist->index )& mask)
     cee:	ef 81       	ldd	r30, Y+7	; 0x07
     cf0:	f8 85       	ldd	r31, Y+8	; 0x08
     cf2:	90 89       	ldd	r25, Z+16	; 0x10
     cf4:	8b 81       	ldd	r24, Y+3	; 0x03
     cf6:	89 23       	and	r24, r25
     cf8:	88 23       	and	r24, r24
     cfa:	51 f0       	breq	.+20     	; 0xd10 <gitem_insert+0x78>
    {
        //Не пуста вставляем туда gitem
        item_insert( (item_t *)gitem, *head );
     cfc:	8d 81       	ldd	r24, Y+5	; 0x05
     cfe:	9e 81       	ldd	r25, Y+6	; 0x06
     d00:	e9 81       	ldd	r30, Y+1	; 0x01
     d02:	fa 81       	ldd	r31, Y+2	; 0x02
     d04:	20 81       	ld	r18, Z
     d06:	31 81       	ldd	r19, Z+1	; 0x01
     d08:	b9 01       	movw	r22, r18
     d0a:	0e 94 24 09 	call	0x1248	; 0x1248 <item_insert>
     d0e:	0e c0       	rjmp	.+28     	; 0xd2c <gitem_insert+0x94>
    }
    else
    {
        // Пуста, gitem будет головой
        *head = (item_t *)gitem;
     d10:	8d 81       	ldd	r24, Y+5	; 0x05
     d12:	9e 81       	ldd	r25, Y+6	; 0x06
     d14:	e9 81       	ldd	r30, Y+1	; 0x01
     d16:	fa 81       	ldd	r31, Y+2	; 0x02
     d18:	91 83       	std	Z+1, r25	; 0x01
     d1a:	80 83       	st	Z, r24
        xlist->index |= mask;
     d1c:	ef 81       	ldd	r30, Y+7	; 0x07
     d1e:	f8 85       	ldd	r31, Y+8	; 0x08
     d20:	90 89       	ldd	r25, Z+16	; 0x10
     d22:	8b 81       	ldd	r24, Y+3	; 0x03
     d24:	89 2b       	or	r24, r25
     d26:	ef 81       	ldd	r30, Y+7	; 0x07
     d28:	f8 85       	ldd	r31, Y+8	; 0x08
     d2a:	80 8b       	std	Z+16, r24	; 0x10
    }
    gitem->group->link = (void *)xlist;
     d2c:	ed 81       	ldd	r30, Y+5	; 0x05
     d2e:	fe 81       	ldd	r31, Y+6	; 0x06
     d30:	04 80       	ldd	r0, Z+4	; 0x04
     d32:	f5 81       	ldd	r31, Z+5	; 0x05
     d34:	e0 2d       	mov	r30, r0
     d36:	8f 81       	ldd	r24, Y+7	; 0x07
     d38:	98 85       	ldd	r25, Y+8	; 0x08
     d3a:	91 83       	std	Z+1, r25	; 0x01
     d3c:	80 83       	st	Z, r24
}
     d3e:	28 96       	adiw	r28, 0x08	; 8
     d40:	0f b6       	in	r0, 0x3f	; 63
     d42:	f8 94       	cli
     d44:	de bf       	out	0x3e, r29	; 62
     d46:	0f be       	out	0x3f, r0	; 63
     d48:	cd bf       	out	0x3d, r28	; 61
     d4a:	cf 91       	pop	r28
     d4c:	df 91       	pop	r29
     d4e:	08 95       	ret

00000d50 <gitem_insert_group>:
 при этом gitem->group переходит в Пул

 Ограничения на gitem - он не должен быть сгруппирован в момент встаки в группу.
*/
void gitem_insert_group(gitem_t * gitem, xlist_t *xlist)
{
     d50:	df 93       	push	r29
     d52:	cf 93       	push	r28
     d54:	cd b7       	in	r28, 0x3d	; 61
     d56:	de b7       	in	r29, 0x3e	; 62
     d58:	2a 97       	sbiw	r28, 0x0a	; 10
     d5a:	0f b6       	in	r0, 0x3f	; 63
     d5c:	f8 94       	cli
     d5e:	de bf       	out	0x3e, r29	; 62
     d60:	0f be       	out	0x3f, r0	; 63
     d62:	cd bf       	out	0x3d, r28	; 61
     d64:	98 87       	std	Y+8, r25	; 0x08
     d66:	8f 83       	std	Y+7, r24	; 0x07
     d68:	7a 87       	std	Y+10, r23	; 0x0a
     d6a:	69 87       	std	Y+9, r22	; 0x09
    prio_t prio = gitem->group->prio;
     d6c:	ef 81       	ldd	r30, Y+7	; 0x07
     d6e:	f8 85       	ldd	r31, Y+8	; 0x08
     d70:	04 80       	ldd	r0, Z+4	; 0x04
     d72:	f5 81       	ldd	r31, Z+5	; 0x05
     d74:	e0 2d       	mov	r30, r0
     d76:	82 81       	ldd	r24, Z+2	; 0x02
     d78:	8e 83       	std	Y+6, r24	; 0x06
    index_t mask = ((index_t)1)<<prio;
     d7a:	8e 81       	ldd	r24, Y+6	; 0x06
     d7c:	28 2f       	mov	r18, r24
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	02 c0       	rjmp	.+4      	; 0xd8a <gitem_insert_group+0x3a>
     d86:	88 0f       	add	r24, r24
     d88:	99 1f       	adc	r25, r25
     d8a:	2a 95       	dec	r18
     d8c:	e2 f7       	brpl	.-8      	; 0xd86 <gitem_insert_group+0x36>
     d8e:	8d 83       	std	Y+5, r24	; 0x05
    item_t ** head = (item_t **)xlist + prio;
     d90:	29 85       	ldd	r18, Y+9	; 0x09
     d92:	3a 85       	ldd	r19, Y+10	; 0x0a
     d94:	8e 81       	ldd	r24, Y+6	; 0x06
     d96:	88 2f       	mov	r24, r24
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	88 0f       	add	r24, r24
     d9c:	99 1f       	adc	r25, r25
     d9e:	82 0f       	add	r24, r18
     da0:	93 1f       	adc	r25, r19
     da2:	9c 83       	std	Y+4, r25	; 0x04
     da4:	8b 83       	std	Y+3, r24	; 0x03
    group_t * group = gitem->group;
     da6:	ef 81       	ldd	r30, Y+7	; 0x07
     da8:	f8 85       	ldd	r31, Y+8	; 0x08
     daa:	84 81       	ldd	r24, Z+4	; 0x04
     dac:	95 81       	ldd	r25, Z+5	; 0x05
     dae:	9a 83       	std	Y+2, r25	; 0x02
     db0:	89 83       	std	Y+1, r24	; 0x01
    // Пуста ли часть списка с таким приоритетом
    if( ( xlist->index )& mask)
     db2:	e9 85       	ldd	r30, Y+9	; 0x09
     db4:	fa 85       	ldd	r31, Y+10	; 0x0a
     db6:	90 89       	ldd	r25, Z+16	; 0x10
     db8:	8d 81       	ldd	r24, Y+5	; 0x05
     dba:	89 23       	and	r24, r25
     dbc:	88 23       	and	r24, r24
     dbe:	31 f1       	breq	.+76     	; 0xe0c <gitem_insert_group+0xbc>
    {
        //Не пуста вставляем туда gitem
        item_insert((item_t *)gitem, *head );
     dc0:	8f 81       	ldd	r24, Y+7	; 0x07
     dc2:	98 85       	ldd	r25, Y+8	; 0x08
     dc4:	eb 81       	ldd	r30, Y+3	; 0x03
     dc6:	fc 81       	ldd	r31, Y+4	; 0x04
     dc8:	20 81       	ld	r18, Z
     dca:	31 81       	ldd	r19, Z+1	; 0x01
     dcc:	b9 01       	movw	r22, r18
     dce:	0e 94 24 09 	call	0x1248	; 0x1248 <item_insert>
        //Передаем старую группу в пул
        group_push(group);
     dd2:	89 81       	ldd	r24, Y+1	; 0x01
     dd4:	9a 81       	ldd	r25, Y+2	; 0x02
     dd6:	0e 94 99 08 	call	0x1132	; 0x1132 <group_push>
        //назначаем новую группу - ту, в которой голова
        group = ((gitem_t *)*head)->group;
     dda:	eb 81       	ldd	r30, Y+3	; 0x03
     ddc:	fc 81       	ldd	r31, Y+4	; 0x04
     dde:	80 81       	ld	r24, Z
     de0:	91 81       	ldd	r25, Z+1	; 0x01
     de2:	fc 01       	movw	r30, r24
     de4:	84 81       	ldd	r24, Z+4	; 0x04
     de6:	95 81       	ldd	r25, Z+5	; 0x05
     de8:	9a 83       	std	Y+2, r25	; 0x02
     dea:	89 83       	std	Y+1, r24	; 0x01
        gitem->group = group;
     dec:	ef 81       	ldd	r30, Y+7	; 0x07
     dee:	f8 85       	ldd	r31, Y+8	; 0x08
     df0:	89 81       	ldd	r24, Y+1	; 0x01
     df2:	9a 81       	ldd	r25, Y+2	; 0x02
     df4:	95 83       	std	Z+5, r25	; 0x05
     df6:	84 83       	std	Z+4, r24	; 0x04
        //количество элементов в группе увеличилось на 1
        group->el_num++;
     df8:	e9 81       	ldd	r30, Y+1	; 0x01
     dfa:	fa 81       	ldd	r31, Y+2	; 0x02
     dfc:	83 81       	ldd	r24, Z+3	; 0x03
     dfe:	94 81       	ldd	r25, Z+4	; 0x04
     e00:	01 96       	adiw	r24, 0x01	; 1
     e02:	e9 81       	ldd	r30, Y+1	; 0x01
     e04:	fa 81       	ldd	r31, Y+2	; 0x02
     e06:	94 83       	std	Z+4, r25	; 0x04
     e08:	83 83       	std	Z+3, r24	; 0x03
     e0a:	14 c0       	rjmp	.+40     	; 0xe34 <gitem_insert_group+0xe4>
    }
    else
    {
        // Пуста, gitem будет головой
        *head = (item_t *)gitem;
     e0c:	8f 81       	ldd	r24, Y+7	; 0x07
     e0e:	98 85       	ldd	r25, Y+8	; 0x08
     e10:	eb 81       	ldd	r30, Y+3	; 0x03
     e12:	fc 81       	ldd	r31, Y+4	; 0x04
     e14:	91 83       	std	Z+1, r25	; 0x01
     e16:	80 83       	st	Z, r24
        xlist->index |= mask;
     e18:	e9 85       	ldd	r30, Y+9	; 0x09
     e1a:	fa 85       	ldd	r31, Y+10	; 0x0a
     e1c:	90 89       	ldd	r25, Z+16	; 0x10
     e1e:	8d 81       	ldd	r24, Y+5	; 0x05
     e20:	89 2b       	or	r24, r25
     e22:	e9 85       	ldd	r30, Y+9	; 0x09
     e24:	fa 85       	ldd	r31, Y+10	; 0x0a
     e26:	80 8b       	std	Z+16, r24	; 0x10
        group->link = (void *)xlist;
     e28:	e9 81       	ldd	r30, Y+1	; 0x01
     e2a:	fa 81       	ldd	r31, Y+2	; 0x02
     e2c:	89 85       	ldd	r24, Y+9	; 0x09
     e2e:	9a 85       	ldd	r25, Y+10	; 0x0a
     e30:	91 83       	std	Z+1, r25	; 0x01
     e32:	80 83       	st	Z, r24
    }
}
     e34:	2a 96       	adiw	r28, 0x0a	; 10
     e36:	0f b6       	in	r0, 0x3f	; 63
     e38:	f8 94       	cli
     e3a:	de bf       	out	0x3e, r29	; 62
     e3c:	0f be       	out	0x3f, r0	; 63
     e3e:	cd bf       	out	0x3d, r28	; 61
     e40:	cf 91       	pop	r28
     e42:	df 91       	pop	r29
     e44:	08 95       	ret

00000e46 <gitem_fast_cut>:
// Быстро вырезать из списка (не обнуляется указатель gitem->group->link)
void gitem_fast_cut(gitem_t * gitem)
{
     e46:	df 93       	push	r29
     e48:	cf 93       	push	r28
     e4a:	00 d0       	rcall	.+0      	; 0xe4c <gitem_fast_cut+0x6>
     e4c:	00 d0       	rcall	.+0      	; 0xe4e <gitem_fast_cut+0x8>
     e4e:	0f 92       	push	r0
     e50:	cd b7       	in	r28, 0x3d	; 61
     e52:	de b7       	in	r29, 0x3e	; 62
     e54:	9d 83       	std	Y+5, r25	; 0x05
     e56:	8c 83       	std	Y+4, r24	; 0x04
    prio_t prio = gitem->group->prio;
     e58:	ec 81       	ldd	r30, Y+4	; 0x04
     e5a:	fd 81       	ldd	r31, Y+5	; 0x05
     e5c:	04 80       	ldd	r0, Z+4	; 0x04
     e5e:	f5 81       	ldd	r31, Z+5	; 0x05
     e60:	e0 2d       	mov	r30, r0
     e62:	82 81       	ldd	r24, Z+2	; 0x02
     e64:	8b 83       	std	Y+3, r24	; 0x03
    xlist_t * xlist = (xlist_t *)gitem->group->link;
     e66:	ec 81       	ldd	r30, Y+4	; 0x04
     e68:	fd 81       	ldd	r31, Y+5	; 0x05
     e6a:	04 80       	ldd	r0, Z+4	; 0x04
     e6c:	f5 81       	ldd	r31, Z+5	; 0x05
     e6e:	e0 2d       	mov	r30, r0
     e70:	80 81       	ld	r24, Z
     e72:	91 81       	ldd	r25, Z+1	; 0x01
     e74:	9a 83       	std	Y+2, r25	; 0x02
     e76:	89 83       	std	Y+1, r24	; 0x01
    // Является ли эта часть списка группированной?
    if( gitem->group->el_num > (count_t)1 )
     e78:	ec 81       	ldd	r30, Y+4	; 0x04
     e7a:	fd 81       	ldd	r31, Y+5	; 0x05
     e7c:	04 80       	ldd	r0, Z+4	; 0x04
     e7e:	f5 81       	ldd	r31, Z+5	; 0x05
     e80:	e0 2d       	mov	r30, r0
     e82:	83 81       	ldd	r24, Z+3	; 0x03
     e84:	94 81       	ldd	r25, Z+4	; 0x04
     e86:	82 30       	cpi	r24, 0x02	; 2
     e88:	91 05       	cpc	r25, r1
     e8a:	b8 f0       	brcs	.+46     	; 0xeba <gitem_fast_cut+0x74>
    {
        //Группированная часть списка, будем вырезать из группы с выделением новой группы из Пула
        // В текущей группе стало на 1 элемент меньше
        gitem->group->el_num--;
     e8c:	ec 81       	ldd	r30, Y+4	; 0x04
     e8e:	fd 81       	ldd	r31, Y+5	; 0x05
     e90:	04 80       	ldd	r0, Z+4	; 0x04
     e92:	f5 81       	ldd	r31, Z+5	; 0x05
     e94:	e0 2d       	mov	r30, r0
     e96:	83 81       	ldd	r24, Z+3	; 0x03
     e98:	94 81       	ldd	r25, Z+4	; 0x04
     e9a:	01 97       	sbiw	r24, 0x01	; 1
     e9c:	94 83       	std	Z+4, r25	; 0x04
     e9e:	83 83       	std	Z+3, r24	; 0x03
        //выделяем новую группу
        gitem->group = group_pop();
     ea0:	0e 94 b3 08 	call	0x1166	; 0x1166 <group_pop>
     ea4:	ec 81       	ldd	r30, Y+4	; 0x04
     ea6:	fd 81       	ldd	r31, Y+5	; 0x05
     ea8:	95 83       	std	Z+5, r25	; 0x05
     eaa:	84 83       	std	Z+4, r24	; 0x04
        // Правильный приоритет, количество элементов в группе, выделенной из пула должно быть равно 1
        gitem->group->prio = (prio_t)prio;
     eac:	ec 81       	ldd	r30, Y+4	; 0x04
     eae:	fd 81       	ldd	r31, Y+5	; 0x05
     eb0:	04 80       	ldd	r0, Z+4	; 0x04
     eb2:	f5 81       	ldd	r31, Z+5	; 0x05
     eb4:	e0 2d       	mov	r30, r0
     eb6:	8b 81       	ldd	r24, Y+3	; 0x03
     eb8:	82 83       	std	Z+2, r24	; 0x02
    }
    //Является ли элемент единственным в своей части списка?
    if( ((item_t *)gitem)->next == (item_t *)gitem )
     eba:	ec 81       	ldd	r30, Y+4	; 0x04
     ebc:	fd 81       	ldd	r31, Y+5	; 0x05
     ebe:	20 81       	ld	r18, Z
     ec0:	31 81       	ldd	r19, Z+1	; 0x01
     ec2:	8c 81       	ldd	r24, Y+4	; 0x04
     ec4:	9d 81       	ldd	r25, Y+5	; 0x05
     ec6:	28 17       	cp	r18, r24
     ec8:	39 07       	cpc	r19, r25
     eca:	09 f5       	brne	.+66     	; 0xf0e <gitem_fast_cut+0xc8>
    {
        // Да, является!
        xlist->item[prio] = (item_t *)0;
     ecc:	8b 81       	ldd	r24, Y+3	; 0x03
     ece:	88 2f       	mov	r24, r24
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	29 81       	ldd	r18, Y+1	; 0x01
     ed4:	3a 81       	ldd	r19, Y+2	; 0x02
     ed6:	88 0f       	add	r24, r24
     ed8:	99 1f       	adc	r25, r25
     eda:	f9 01       	movw	r30, r18
     edc:	e8 0f       	add	r30, r24
     ede:	f9 1f       	adc	r31, r25
     ee0:	11 82       	std	Z+1, r1	; 0x01
     ee2:	10 82       	st	Z, r1
        xlist->index &= ~(((index_t)1)<<prio);
     ee4:	e9 81       	ldd	r30, Y+1	; 0x01
     ee6:	fa 81       	ldd	r31, Y+2	; 0x02
     ee8:	80 89       	ldd	r24, Z+16	; 0x10
     eea:	48 2f       	mov	r20, r24
     eec:	8b 81       	ldd	r24, Y+3	; 0x03
     eee:	28 2f       	mov	r18, r24
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	02 2e       	mov	r0, r18
     ef8:	02 c0       	rjmp	.+4      	; 0xefe <gitem_fast_cut+0xb8>
     efa:	88 0f       	add	r24, r24
     efc:	99 1f       	adc	r25, r25
     efe:	0a 94       	dec	r0
     f00:	e2 f7       	brpl	.-8      	; 0xefa <gitem_fast_cut+0xb4>
     f02:	80 95       	com	r24
     f04:	84 23       	and	r24, r20
     f06:	e9 81       	ldd	r30, Y+1	; 0x01
     f08:	fa 81       	ldd	r31, Y+2	; 0x02
     f0a:	80 8b       	std	Z+16, r24	; 0x10
     f0c:	1a c0       	rjmp	.+52     	; 0xf42 <gitem_fast_cut+0xfc>
    }
    else
    {
        // Нет, не является!
        // Является ли элемент головой своей части списка?
        if( xlist->item[(prio_t)prio] == (item_t *)gitem )
     f0e:	8b 81       	ldd	r24, Y+3	; 0x03
     f10:	88 2f       	mov	r24, r24
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	29 81       	ldd	r18, Y+1	; 0x01
     f16:	3a 81       	ldd	r19, Y+2	; 0x02
     f18:	88 0f       	add	r24, r24
     f1a:	99 1f       	adc	r25, r25
     f1c:	f9 01       	movw	r30, r18
     f1e:	e8 0f       	add	r30, r24
     f20:	f9 1f       	adc	r31, r25
     f22:	20 81       	ld	r18, Z
     f24:	31 81       	ldd	r19, Z+1	; 0x01
     f26:	8c 81       	ldd	r24, Y+4	; 0x04
     f28:	9d 81       	ldd	r25, Y+5	; 0x05
     f2a:	28 17       	cp	r18, r24
     f2c:	39 07       	cpc	r19, r25
     f2e:	29 f4       	brne	.+10     	; 0xf3a <gitem_fast_cut+0xf4>
        {
            // Является, список надо переключить
            xlist_switch( xlist, prio );
     f30:	89 81       	ldd	r24, Y+1	; 0x01
     f32:	9a 81       	ldd	r25, Y+2	; 0x02
     f34:	6b 81       	ldd	r22, Y+3	; 0x03
     f36:	0e 94 f6 10 	call	0x21ec	; 0x21ec <xlist_switch>
        }
        // Собственно - вырезаем элемент
        item_cut( (item_t *)gitem );
     f3a:	8c 81       	ldd	r24, Y+4	; 0x04
     f3c:	9d 81       	ldd	r25, Y+5	; 0x05
     f3e:	0e 94 56 09 	call	0x12ac	; 0x12ac <item_cut>
    }
}
     f42:	0f 90       	pop	r0
     f44:	0f 90       	pop	r0
     f46:	0f 90       	pop	r0
     f48:	0f 90       	pop	r0
     f4a:	0f 90       	pop	r0
     f4c:	cf 91       	pop	r28
     f4e:	df 91       	pop	r29
     f50:	08 95       	ret

00000f52 <gitem_cut>:
// Вырезать из списка
void gitem_cut(gitem_t * gitem)
{
     f52:	df 93       	push	r29
     f54:	cf 93       	push	r28
     f56:	00 d0       	rcall	.+0      	; 0xf58 <gitem_cut+0x6>
     f58:	cd b7       	in	r28, 0x3d	; 61
     f5a:	de b7       	in	r29, 0x3e	; 62
     f5c:	9a 83       	std	Y+2, r25	; 0x02
     f5e:	89 83       	std	Y+1, r24	; 0x01
    gitem_fast_cut( gitem );
     f60:	89 81       	ldd	r24, Y+1	; 0x01
     f62:	9a 81       	ldd	r25, Y+2	; 0x02
     f64:	0e 94 23 07 	call	0xe46	; 0xe46 <gitem_fast_cut>
    gitem->group->link = (void *)0;
     f68:	e9 81       	ldd	r30, Y+1	; 0x01
     f6a:	fa 81       	ldd	r31, Y+2	; 0x02
     f6c:	04 80       	ldd	r0, Z+4	; 0x04
     f6e:	f5 81       	ldd	r31, Z+5	; 0x05
     f70:	e0 2d       	mov	r30, r0
     f72:	11 82       	std	Z+1, r1	; 0x01
     f74:	10 82       	st	Z, r1
}
     f76:	0f 90       	pop	r0
     f78:	0f 90       	pop	r0
     f7a:	cf 91       	pop	r28
     f7c:	df 91       	pop	r29
     f7e:	08 95       	ret

00000f80 <gitem_xlist_merge>:
 1) Оба списка содержат только объекты типа gitem_t
 2) В списке source на каждом уровне приоритета все объекты типа gitem_t приенадлежат к одной группе.
 3) Элементы списка source, находящиеся на разных уровнях приоритета, пренадлежат разным группам.
*/
void gitem_xlist_merge(xlist_t * source, xlist_t * destignation)
{
     f80:	df 93       	push	r29
     f82:	cf 93       	push	r28
     f84:	cd b7       	in	r28, 0x3d	; 61
     f86:	de b7       	in	r29, 0x3e	; 62
     f88:	2c 97       	sbiw	r28, 0x0c	; 12
     f8a:	0f b6       	in	r0, 0x3f	; 63
     f8c:	f8 94       	cli
     f8e:	de bf       	out	0x3e, r29	; 62
     f90:	0f be       	out	0x3f, r0	; 63
     f92:	cd bf       	out	0x3d, r28	; 61
     f94:	9a 87       	std	Y+10, r25	; 0x0a
     f96:	89 87       	std	Y+9, r24	; 0x09
     f98:	7c 87       	std	Y+12, r23	; 0x0c
     f9a:	6b 87       	std	Y+11, r22	; 0x0b
    index_t mask = (index_t)1;
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	88 87       	std	Y+8, r24	; 0x08
    prio_t current_prio = (prio_t)0;
     fa0:	1f 82       	std	Y+7, r1	; 0x07
     fa2:	9a c0       	rjmp	.+308    	; 0x10d8 <gitem_xlist_merge+0x158>
    while( mask )
    {
        // Есть че перенести?
        if( mask & source->index )
     fa4:	e9 85       	ldd	r30, Y+9	; 0x09
     fa6:	fa 85       	ldd	r31, Y+10	; 0x0a
     fa8:	90 89       	ldd	r25, Z+16	; 0x10
     faa:	88 85       	ldd	r24, Y+8	; 0x08
     fac:	89 23       	and	r24, r25
     fae:	88 23       	and	r24, r24
     fb0:	09 f4       	brne	.+2      	; 0xfb4 <gitem_xlist_merge+0x34>
     fb2:	8c c0       	rjmp	.+280    	; 0x10cc <gitem_xlist_merge+0x14c>
        {
            // Есть!
            // Есть куда переносить?
            if( mask & destignation->index )
     fb4:	eb 85       	ldd	r30, Y+11	; 0x0b
     fb6:	fc 85       	ldd	r31, Y+12	; 0x0c
     fb8:	90 89       	ldd	r25, Z+16	; 0x10
     fba:	88 85       	ldd	r24, Y+8	; 0x08
     fbc:	89 23       	and	r24, r25
     fbe:	88 23       	and	r24, r24
     fc0:	09 f4       	brne	.+2      	; 0xfc4 <gitem_xlist_merge+0x44>
     fc2:	43 c0       	rjmp	.+134    	; 0x104a <gitem_xlist_merge+0xca>
            {
                //Есть!
                // Сшиваем 2 2-связных списка!!!
                item_t * src = source->item[current_prio];
     fc4:	8f 81       	ldd	r24, Y+7	; 0x07
     fc6:	88 2f       	mov	r24, r24
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	29 85       	ldd	r18, Y+9	; 0x09
     fcc:	3a 85       	ldd	r19, Y+10	; 0x0a
     fce:	88 0f       	add	r24, r24
     fd0:	99 1f       	adc	r25, r25
     fd2:	f9 01       	movw	r30, r18
     fd4:	e8 0f       	add	r30, r24
     fd6:	f9 1f       	adc	r31, r25
     fd8:	80 81       	ld	r24, Z
     fda:	91 81       	ldd	r25, Z+1	; 0x01
     fdc:	9e 83       	std	Y+6, r25	; 0x06
     fde:	8d 83       	std	Y+5, r24	; 0x05
                item_t * dst = destignation->item[current_prio];
     fe0:	8f 81       	ldd	r24, Y+7	; 0x07
     fe2:	88 2f       	mov	r24, r24
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	2b 85       	ldd	r18, Y+11	; 0x0b
     fe8:	3c 85       	ldd	r19, Y+12	; 0x0c
     fea:	88 0f       	add	r24, r24
     fec:	99 1f       	adc	r25, r25
     fee:	f9 01       	movw	r30, r18
     ff0:	e8 0f       	add	r30, r24
     ff2:	f9 1f       	adc	r31, r25
     ff4:	80 81       	ld	r24, Z
     ff6:	91 81       	ldd	r25, Z+1	; 0x01
     ff8:	9c 83       	std	Y+4, r25	; 0x04
     ffa:	8b 83       	std	Y+3, r24	; 0x03
                src->prev->next = dst;
     ffc:	ed 81       	ldd	r30, Y+5	; 0x05
     ffe:	fe 81       	ldd	r31, Y+6	; 0x06
    1000:	02 80       	ldd	r0, Z+2	; 0x02
    1002:	f3 81       	ldd	r31, Z+3	; 0x03
    1004:	e0 2d       	mov	r30, r0
    1006:	8b 81       	ldd	r24, Y+3	; 0x03
    1008:	9c 81       	ldd	r25, Y+4	; 0x04
    100a:	91 83       	std	Z+1, r25	; 0x01
    100c:	80 83       	st	Z, r24
                dst->prev->next = src;
    100e:	eb 81       	ldd	r30, Y+3	; 0x03
    1010:	fc 81       	ldd	r31, Y+4	; 0x04
    1012:	02 80       	ldd	r0, Z+2	; 0x02
    1014:	f3 81       	ldd	r31, Z+3	; 0x03
    1016:	e0 2d       	mov	r30, r0
    1018:	8d 81       	ldd	r24, Y+5	; 0x05
    101a:	9e 81       	ldd	r25, Y+6	; 0x06
    101c:	91 83       	std	Z+1, r25	; 0x01
    101e:	80 83       	st	Z, r24
                item_t * buf = dst->prev;
    1020:	eb 81       	ldd	r30, Y+3	; 0x03
    1022:	fc 81       	ldd	r31, Y+4	; 0x04
    1024:	82 81       	ldd	r24, Z+2	; 0x02
    1026:	93 81       	ldd	r25, Z+3	; 0x03
    1028:	9a 83       	std	Y+2, r25	; 0x02
    102a:	89 83       	std	Y+1, r24	; 0x01
                dst->prev = src->prev;
    102c:	ed 81       	ldd	r30, Y+5	; 0x05
    102e:	fe 81       	ldd	r31, Y+6	; 0x06
    1030:	82 81       	ldd	r24, Z+2	; 0x02
    1032:	93 81       	ldd	r25, Z+3	; 0x03
    1034:	eb 81       	ldd	r30, Y+3	; 0x03
    1036:	fc 81       	ldd	r31, Y+4	; 0x04
    1038:	93 83       	std	Z+3, r25	; 0x03
    103a:	82 83       	std	Z+2, r24	; 0x02
                src->prev = buf;
    103c:	ed 81       	ldd	r30, Y+5	; 0x05
    103e:	fe 81       	ldd	r31, Y+6	; 0x06
    1040:	89 81       	ldd	r24, Y+1	; 0x01
    1042:	9a 81       	ldd	r25, Y+2	; 0x02
    1044:	93 83       	std	Z+3, r25	; 0x03
    1046:	82 83       	std	Z+2, r24	; 0x02
    1048:	21 c0       	rjmp	.+66     	; 0x108c <gitem_xlist_merge+0x10c>
            }
            else
            {
                //Нет, тупо переносим всю группу.
                destignation->item[current_prio] = source->item[current_prio];
    104a:	8f 81       	ldd	r24, Y+7	; 0x07
    104c:	68 2f       	mov	r22, r24
    104e:	70 e0       	ldi	r23, 0x00	; 0
    1050:	8f 81       	ldd	r24, Y+7	; 0x07
    1052:	88 2f       	mov	r24, r24
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	29 85       	ldd	r18, Y+9	; 0x09
    1058:	3a 85       	ldd	r19, Y+10	; 0x0a
    105a:	88 0f       	add	r24, r24
    105c:	99 1f       	adc	r25, r25
    105e:	f9 01       	movw	r30, r18
    1060:	e8 0f       	add	r30, r24
    1062:	f9 1f       	adc	r31, r25
    1064:	40 81       	ld	r20, Z
    1066:	51 81       	ldd	r21, Z+1	; 0x01
    1068:	2b 85       	ldd	r18, Y+11	; 0x0b
    106a:	3c 85       	ldd	r19, Y+12	; 0x0c
    106c:	cb 01       	movw	r24, r22
    106e:	88 0f       	add	r24, r24
    1070:	99 1f       	adc	r25, r25
    1072:	f9 01       	movw	r30, r18
    1074:	e8 0f       	add	r30, r24
    1076:	f9 1f       	adc	r31, r25
    1078:	51 83       	std	Z+1, r21	; 0x01
    107a:	40 83       	st	Z, r20
                destignation->index |= mask;
    107c:	eb 85       	ldd	r30, Y+11	; 0x0b
    107e:	fc 85       	ldd	r31, Y+12	; 0x0c
    1080:	90 89       	ldd	r25, Z+16	; 0x10
    1082:	88 85       	ldd	r24, Y+8	; 0x08
    1084:	89 2b       	or	r24, r25
    1086:	eb 85       	ldd	r30, Y+11	; 0x0b
    1088:	fc 85       	ldd	r31, Y+12	; 0x0c
    108a:	80 8b       	std	Z+16, r24	; 0x10
            }
            // Вот почему эта функция отнесена к методам gitem_t
            ((gitem_t *)source->item[current_prio])->group->link = (void *)destignation;
    108c:	8f 81       	ldd	r24, Y+7	; 0x07
    108e:	88 2f       	mov	r24, r24
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	29 85       	ldd	r18, Y+9	; 0x09
    1094:	3a 85       	ldd	r19, Y+10	; 0x0a
    1096:	88 0f       	add	r24, r24
    1098:	99 1f       	adc	r25, r25
    109a:	f9 01       	movw	r30, r18
    109c:	e8 0f       	add	r30, r24
    109e:	f9 1f       	adc	r31, r25
    10a0:	80 81       	ld	r24, Z
    10a2:	91 81       	ldd	r25, Z+1	; 0x01
    10a4:	fc 01       	movw	r30, r24
    10a6:	04 80       	ldd	r0, Z+4	; 0x04
    10a8:	f5 81       	ldd	r31, Z+5	; 0x05
    10aa:	e0 2d       	mov	r30, r0
    10ac:	8b 85       	ldd	r24, Y+11	; 0x0b
    10ae:	9c 85       	ldd	r25, Y+12	; 0x0c
    10b0:	91 83       	std	Z+1, r25	; 0x01
    10b2:	80 83       	st	Z, r24
            // Перенос закончен, обнуляем указатель
            source->item[(prio_t)current_prio] = (item_t *)0;
    10b4:	8f 81       	ldd	r24, Y+7	; 0x07
    10b6:	88 2f       	mov	r24, r24
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	29 85       	ldd	r18, Y+9	; 0x09
    10bc:	3a 85       	ldd	r19, Y+10	; 0x0a
    10be:	88 0f       	add	r24, r24
    10c0:	99 1f       	adc	r25, r25
    10c2:	f9 01       	movw	r30, r18
    10c4:	e8 0f       	add	r30, r24
    10c6:	f9 1f       	adc	r31, r25
    10c8:	11 82       	std	Z+1, r1	; 0x01
    10ca:	10 82       	st	Z, r1
        }
        mask<<=1;
    10cc:	88 85       	ldd	r24, Y+8	; 0x08
    10ce:	88 0f       	add	r24, r24
    10d0:	88 87       	std	Y+8, r24	; 0x08
        current_prio++;
    10d2:	8f 81       	ldd	r24, Y+7	; 0x07
    10d4:	8f 5f       	subi	r24, 0xFF	; 255
    10d6:	8f 83       	std	Y+7, r24	; 0x07
*/
void gitem_xlist_merge(xlist_t * source, xlist_t * destignation)
{
    index_t mask = (index_t)1;
    prio_t current_prio = (prio_t)0;
    while( mask )
    10d8:	88 85       	ldd	r24, Y+8	; 0x08
    10da:	88 23       	and	r24, r24
    10dc:	09 f0       	breq	.+2      	; 0x10e0 <gitem_xlist_merge+0x160>
    10de:	62 cf       	rjmp	.-316    	; 0xfa4 <gitem_xlist_merge+0x24>
        }
        mask<<=1;
        current_prio++;
    }
    // Список полностью перенесен, обнуляем индекс
    source->index = (index_t)0;
    10e0:	e9 85       	ldd	r30, Y+9	; 0x09
    10e2:	fa 85       	ldd	r31, Y+10	; 0x0a
    10e4:	10 8a       	std	Z+16, r1	; 0x10
}
    10e6:	2c 96       	adiw	r28, 0x0c	; 12
    10e8:	0f b6       	in	r0, 0x3f	; 63
    10ea:	f8 94       	cli
    10ec:	de bf       	out	0x3e, r29	; 62
    10ee:	0f be       	out	0x3f, r0	; 63
    10f0:	cd bf       	out	0x3d, r28	; 61
    10f2:	cf 91       	pop	r28
    10f4:	df 91       	pop	r29
    10f6:	08 95       	ret

000010f8 <group_init>:
*****************************************************************************************/
#include "../include/bugurt.h"
//Методы group_t
// инициация
void group_init(group_t * group, prio_t prio)
{
    10f8:	df 93       	push	r29
    10fa:	cf 93       	push	r28
    10fc:	00 d0       	rcall	.+0      	; 0x10fe <group_init+0x6>
    10fe:	0f 92       	push	r0
    1100:	cd b7       	in	r28, 0x3d	; 61
    1102:	de b7       	in	r29, 0x3e	; 62
    1104:	9a 83       	std	Y+2, r25	; 0x02
    1106:	89 83       	std	Y+1, r24	; 0x01
    1108:	6b 83       	std	Y+3, r22	; 0x03
    group->link = (void *)0;
    110a:	e9 81       	ldd	r30, Y+1	; 0x01
    110c:	fa 81       	ldd	r31, Y+2	; 0x02
    110e:	11 82       	std	Z+1, r1	; 0x01
    1110:	10 82       	st	Z, r1
    group->prio = prio;
    1112:	e9 81       	ldd	r30, Y+1	; 0x01
    1114:	fa 81       	ldd	r31, Y+2	; 0x02
    1116:	8b 81       	ldd	r24, Y+3	; 0x03
    1118:	82 83       	std	Z+2, r24	; 0x02
    // группа - часть gitem_t, количество элементов - 1
    group->el_num = (count_t)1;
    111a:	e9 81       	ldd	r30, Y+1	; 0x01
    111c:	fa 81       	ldd	r31, Y+2	; 0x02
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	94 83       	std	Z+4, r25	; 0x04
    1124:	83 83       	std	Z+3, r24	; 0x03
}
    1126:	0f 90       	pop	r0
    1128:	0f 90       	pop	r0
    112a:	0f 90       	pop	r0
    112c:	cf 91       	pop	r28
    112e:	df 91       	pop	r29
    1130:	08 95       	ret

00001132 <group_push>:
// положить в ПУЛ
void group_push(group_t * group)
{
    1132:	df 93       	push	r29
    1134:	cf 93       	push	r28
    1136:	00 d0       	rcall	.+0      	; 0x1138 <group_push+0x6>
    1138:	cd b7       	in	r28, 0x3d	; 61
    113a:	de b7       	in	r29, 0x3e	; 62
    113c:	9a 83       	std	Y+2, r25	; 0x02
    113e:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    // блокируем пул
    spin_lock( &kernel.pool_lock );
#endif
    group->link = (void *)kernel.pool;
    1140:	80 91 70 01 	lds	r24, 0x0170
    1144:	90 91 71 01 	lds	r25, 0x0171
    1148:	e9 81       	ldd	r30, Y+1	; 0x01
    114a:	fa 81       	ldd	r31, Y+2	; 0x02
    114c:	91 83       	std	Z+1, r25	; 0x01
    114e:	80 83       	st	Z, r24
    kernel.pool = group;
    1150:	89 81       	ldd	r24, Y+1	; 0x01
    1152:	9a 81       	ldd	r25, Y+2	; 0x02
    1154:	90 93 71 01 	sts	0x0171, r25
    1158:	80 93 70 01 	sts	0x0170, r24
#ifdef CONFIG_MP
    // разблокируем пул
    spin_unlock( &kernel.pool_lock );
#endif
}
    115c:	0f 90       	pop	r0
    115e:	0f 90       	pop	r0
    1160:	cf 91       	pop	r28
    1162:	df 91       	pop	r29
    1164:	08 95       	ret

00001166 <group_pop>:
// взять из пула, если есть, а есть всегда, избыточность же!
group_t * group_pop(void)
{
    1166:	df 93       	push	r29
    1168:	cf 93       	push	r28
    116a:	00 d0       	rcall	.+0      	; 0x116c <group_pop+0x6>
    116c:	cd b7       	in	r28, 0x3d	; 61
    116e:	de b7       	in	r29, 0x3e	; 62
#ifdef CONFIG_MP
    // блокируем пул
    spin_lock( &kernel.pool_lock );
#endif
    group_t * group = kernel.pool;
    1170:	80 91 70 01 	lds	r24, 0x0170
    1174:	90 91 71 01 	lds	r25, 0x0171
    1178:	9a 83       	std	Y+2, r25	; 0x02
    117a:	89 83       	std	Y+1, r24	; 0x01
    kernel.pool = (group_t *)group->link;
    117c:	e9 81       	ldd	r30, Y+1	; 0x01
    117e:	fa 81       	ldd	r31, Y+2	; 0x02
    1180:	80 81       	ld	r24, Z
    1182:	91 81       	ldd	r25, Z+1	; 0x01
    1184:	90 93 71 01 	sts	0x0171, r25
    1188:	80 93 70 01 	sts	0x0170, r24
#ifdef CONFIG_MP
    // разблокируем пул
    spin_unlock( &kernel.pool_lock );
#endif
    return group;
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1190:	0f 90       	pop	r0
    1192:	0f 90       	pop	r0
    1194:	cf 91       	pop	r28
    1196:	df 91       	pop	r29
    1198:	08 95       	ret

0000119a <index_search>:
*                           http://www.0chan.ru/r/res/9996.html                          *
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
prio_t index_search(index_t index)
{
    119a:	df 93       	push	r29
    119c:	cf 93       	push	r28
    119e:	00 d0       	rcall	.+0      	; 0x11a0 <index_search+0x6>
    11a0:	00 d0       	rcall	.+0      	; 0x11a2 <index_search+0x8>
    11a2:	00 d0       	rcall	.+0      	; 0x11a4 <index_search+0xa>
    11a4:	cd b7       	in	r28, 0x3d	; 61
    11a6:	de b7       	in	r29, 0x3e	; 62
    11a8:	8e 83       	std	Y+6, r24	; 0x06
    prio_t prio = (prio_t)0;
    11aa:	1d 82       	std	Y+5, r1	; 0x05
        но, т.к. BITS_IN_INDEX_T фиксировано для данной конфигурации,
        то получается время выполнения - O(1), ВСЕГДА.

        И да, предсказуемость + переносимость > быстродействие.
        */
    index_t upper = ~(index_t)0, lower = ~(index_t)0, middle;
    11ac:	8f ef       	ldi	r24, 0xFF	; 255
    11ae:	8c 83       	std	Y+4, r24	; 0x04
    11b0:	8f ef       	ldi	r24, 0xFF	; 255
    11b2:	8b 83       	std	Y+3, r24	; 0x03
    prio_t step = (prio_t)BITS_IN_INDEX_T;
    11b4:	88 e0       	ldi	r24, 0x08	; 8
    11b6:	89 83       	std	Y+1, r24	; 0x01
    11b8:	22 c0       	rjmp	.+68     	; 0x11fe <index_search+0x64>
    while( step )
    {
        step>>=1; // делим шаг пополам
    11ba:	89 81       	ldd	r24, Y+1	; 0x01
    11bc:	86 95       	lsr	r24
    11be:	89 83       	std	Y+1, r24	; 0x01
        middle = lower>>step;
    11c0:	8b 81       	ldd	r24, Y+3	; 0x03
    11c2:	28 2f       	mov	r18, r24
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	89 81       	ldd	r24, Y+1	; 0x01
    11c8:	88 2f       	mov	r24, r24
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	a9 01       	movw	r20, r18
    11ce:	02 c0       	rjmp	.+4      	; 0x11d4 <index_search+0x3a>
    11d0:	55 95       	asr	r21
    11d2:	47 95       	ror	r20
    11d4:	8a 95       	dec	r24
    11d6:	e2 f7       	brpl	.-8      	; 0x11d0 <index_search+0x36>
    11d8:	ca 01       	movw	r24, r20
    11da:	8a 83       	std	Y+2, r24	; 0x02
        if( index & upper & middle )
    11dc:	9e 81       	ldd	r25, Y+6	; 0x06
    11de:	8c 81       	ldd	r24, Y+4	; 0x04
    11e0:	98 23       	and	r25, r24
    11e2:	8a 81       	ldd	r24, Y+2	; 0x02
    11e4:	89 23       	and	r24, r25
    11e6:	88 23       	and	r24, r24
    11e8:	19 f0       	breq	.+6      	; 0x11f0 <index_search+0x56>
        {
            lower = middle;
    11ea:	8a 81       	ldd	r24, Y+2	; 0x02
    11ec:	8b 83       	std	Y+3, r24	; 0x03
    11ee:	07 c0       	rjmp	.+14     	; 0x11fe <index_search+0x64>
        }
        else
        {
            upper = ~middle;
    11f0:	8a 81       	ldd	r24, Y+2	; 0x02
    11f2:	80 95       	com	r24
    11f4:	8c 83       	std	Y+4, r24	; 0x04
            prio += step;
    11f6:	9d 81       	ldd	r25, Y+5	; 0x05
    11f8:	89 81       	ldd	r24, Y+1	; 0x01
    11fa:	89 0f       	add	r24, r25
    11fc:	8d 83       	std	Y+5, r24	; 0x05

        И да, предсказуемость + переносимость > быстродействие.
        */
    index_t upper = ~(index_t)0, lower = ~(index_t)0, middle;
    prio_t step = (prio_t)BITS_IN_INDEX_T;
    while( step )
    11fe:	89 81       	ldd	r24, Y+1	; 0x01
    1200:	88 23       	and	r24, r24
    1202:	d9 f6       	brne	.-74     	; 0x11ba <index_search+0x20>
        if ( mask & index )break;
        prio++;
        mask<<=1;
    }
#endif
    return prio;
    1204:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1206:	26 96       	adiw	r28, 0x06	; 6
    1208:	0f b6       	in	r0, 0x3f	; 63
    120a:	f8 94       	cli
    120c:	de bf       	out	0x3e, r29	; 62
    120e:	0f be       	out	0x3f, r0	; 63
    1210:	cd bf       	out	0x3d, r28	; 61
    1212:	cf 91       	pop	r28
    1214:	df 91       	pop	r29
    1216:	08 95       	ret

00001218 <item_init>:
*****************************************************************************************/
#include "../include/bugurt.h"
//Методы элемента 2-связного списка
//инициация элемента
void item_init(item_t *item)
{
    1218:	df 93       	push	r29
    121a:	cf 93       	push	r28
    121c:	00 d0       	rcall	.+0      	; 0x121e <item_init+0x6>
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
    1222:	9a 83       	std	Y+2, r25	; 0x02
    1224:	89 83       	std	Y+1, r24	; 0x01
    item->prev = item;
    1226:	e9 81       	ldd	r30, Y+1	; 0x01
    1228:	fa 81       	ldd	r31, Y+2	; 0x02
    122a:	89 81       	ldd	r24, Y+1	; 0x01
    122c:	9a 81       	ldd	r25, Y+2	; 0x02
    122e:	93 83       	std	Z+3, r25	; 0x03
    1230:	82 83       	std	Z+2, r24	; 0x02
    item->next = item;
    1232:	e9 81       	ldd	r30, Y+1	; 0x01
    1234:	fa 81       	ldd	r31, Y+2	; 0x02
    1236:	89 81       	ldd	r24, Y+1	; 0x01
    1238:	9a 81       	ldd	r25, Y+2	; 0x02
    123a:	91 83       	std	Z+1, r25	; 0x01
    123c:	80 83       	st	Z, r24
}
    123e:	0f 90       	pop	r0
    1240:	0f 90       	pop	r0
    1242:	cf 91       	pop	r28
    1244:	df 91       	pop	r29
    1246:	08 95       	ret

00001248 <item_insert>:
//Вставить элемент
void item_insert(item_t *item, item_t *head)
{
    1248:	df 93       	push	r29
    124a:	cf 93       	push	r28
    124c:	00 d0       	rcall	.+0      	; 0x124e <item_insert+0x6>
    124e:	00 d0       	rcall	.+0      	; 0x1250 <item_insert+0x8>
    1250:	00 d0       	rcall	.+0      	; 0x1252 <item_insert+0xa>
    1252:	cd b7       	in	r28, 0x3d	; 61
    1254:	de b7       	in	r29, 0x3e	; 62
    1256:	9c 83       	std	Y+4, r25	; 0x04
    1258:	8b 83       	std	Y+3, r24	; 0x03
    125a:	7e 83       	std	Y+6, r23	; 0x06
    125c:	6d 83       	std	Y+5, r22	; 0x05
    // "хвост" списка
    item_t * tail = head->prev;
    125e:	ed 81       	ldd	r30, Y+5	; 0x05
    1260:	fe 81       	ldd	r31, Y+6	; 0x06
    1262:	82 81       	ldd	r24, Z+2	; 0x02
    1264:	93 81       	ldd	r25, Z+3	; 0x03
    1266:	9a 83       	std	Y+2, r25	; 0x02
    1268:	89 83       	std	Y+1, r24	; 0x01

    // Вставляем элемент между "головой" и "хвостом"
    item->prev = tail;
    126a:	eb 81       	ldd	r30, Y+3	; 0x03
    126c:	fc 81       	ldd	r31, Y+4	; 0x04
    126e:	89 81       	ldd	r24, Y+1	; 0x01
    1270:	9a 81       	ldd	r25, Y+2	; 0x02
    1272:	93 83       	std	Z+3, r25	; 0x03
    1274:	82 83       	std	Z+2, r24	; 0x02
    item->next = head;
    1276:	eb 81       	ldd	r30, Y+3	; 0x03
    1278:	fc 81       	ldd	r31, Y+4	; 0x04
    127a:	8d 81       	ldd	r24, Y+5	; 0x05
    127c:	9e 81       	ldd	r25, Y+6	; 0x06
    127e:	91 83       	std	Z+1, r25	; 0x01
    1280:	80 83       	st	Z, r24

    head->prev = item;
    1282:	ed 81       	ldd	r30, Y+5	; 0x05
    1284:	fe 81       	ldd	r31, Y+6	; 0x06
    1286:	8b 81       	ldd	r24, Y+3	; 0x03
    1288:	9c 81       	ldd	r25, Y+4	; 0x04
    128a:	93 83       	std	Z+3, r25	; 0x03
    128c:	82 83       	std	Z+2, r24	; 0x02
    tail->next = item;
    128e:	e9 81       	ldd	r30, Y+1	; 0x01
    1290:	fa 81       	ldd	r31, Y+2	; 0x02
    1292:	8b 81       	ldd	r24, Y+3	; 0x03
    1294:	9c 81       	ldd	r25, Y+4	; 0x04
    1296:	91 83       	std	Z+1, r25	; 0x01
    1298:	80 83       	st	Z, r24
}
    129a:	26 96       	adiw	r28, 0x06	; 6
    129c:	0f b6       	in	r0, 0x3f	; 63
    129e:	f8 94       	cli
    12a0:	de bf       	out	0x3e, r29	; 62
    12a2:	0f be       	out	0x3f, r0	; 63
    12a4:	cd bf       	out	0x3d, r28	; 61
    12a6:	cf 91       	pop	r28
    12a8:	df 91       	pop	r29
    12aa:	08 95       	ret

000012ac <item_cut>:
//Вырезать элемент
void item_cut( item_t *item )
{
    12ac:	df 93       	push	r29
    12ae:	cf 93       	push	r28
    12b0:	00 d0       	rcall	.+0      	; 0x12b2 <item_cut+0x6>
    12b2:	00 d0       	rcall	.+0      	; 0x12b4 <item_cut+0x8>
    12b4:	00 d0       	rcall	.+0      	; 0x12b6 <item_cut+0xa>
    12b6:	cd b7       	in	r28, 0x3d	; 61
    12b8:	de b7       	in	r29, 0x3e	; 62
    12ba:	9e 83       	std	Y+6, r25	; 0x06
    12bc:	8d 83       	std	Y+5, r24	; 0x05
    item_t * prev = item->prev; //Предыдущий элемент
    12be:	ed 81       	ldd	r30, Y+5	; 0x05
    12c0:	fe 81       	ldd	r31, Y+6	; 0x06
    12c2:	82 81       	ldd	r24, Z+2	; 0x02
    12c4:	93 81       	ldd	r25, Z+3	; 0x03
    12c6:	9c 83       	std	Y+4, r25	; 0x04
    12c8:	8b 83       	std	Y+3, r24	; 0x03
    item_t * next = item->next; //Следующий элемент
    12ca:	ed 81       	ldd	r30, Y+5	; 0x05
    12cc:	fe 81       	ldd	r31, Y+6	; 0x06
    12ce:	80 81       	ld	r24, Z
    12d0:	91 81       	ldd	r25, Z+1	; 0x01
    12d2:	9a 83       	std	Y+2, r25	; 0x02
    12d4:	89 83       	std	Y+1, r24	; 0x01

    next->prev = prev;
    12d6:	e9 81       	ldd	r30, Y+1	; 0x01
    12d8:	fa 81       	ldd	r31, Y+2	; 0x02
    12da:	8b 81       	ldd	r24, Y+3	; 0x03
    12dc:	9c 81       	ldd	r25, Y+4	; 0x04
    12de:	93 83       	std	Z+3, r25	; 0x03
    12e0:	82 83       	std	Z+2, r24	; 0x02
    prev->next = next;
    12e2:	eb 81       	ldd	r30, Y+3	; 0x03
    12e4:	fc 81       	ldd	r31, Y+4	; 0x04
    12e6:	89 81       	ldd	r24, Y+1	; 0x01
    12e8:	9a 81       	ldd	r25, Y+2	; 0x02
    12ea:	91 83       	std	Z+1, r25	; 0x01
    12ec:	80 83       	st	Z, r24

    item->prev = item;
    12ee:	ed 81       	ldd	r30, Y+5	; 0x05
    12f0:	fe 81       	ldd	r31, Y+6	; 0x06
    12f2:	8d 81       	ldd	r24, Y+5	; 0x05
    12f4:	9e 81       	ldd	r25, Y+6	; 0x06
    12f6:	93 83       	std	Z+3, r25	; 0x03
    12f8:	82 83       	std	Z+2, r24	; 0x02
    item->next = item;
    12fa:	ed 81       	ldd	r30, Y+5	; 0x05
    12fc:	fe 81       	ldd	r31, Y+6	; 0x06
    12fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1300:	9e 81       	ldd	r25, Y+6	; 0x06
    1302:	91 83       	std	Z+1, r25	; 0x01
    1304:	80 83       	st	Z, r24
}
    1306:	26 96       	adiw	r28, 0x06	; 6
    1308:	0f b6       	in	r0, 0x3f	; 63
    130a:	f8 94       	cli
    130c:	de bf       	out	0x3e, r29	; 62
    130e:	0f be       	out	0x3f, r0	; 63
    1310:	cd bf       	out	0x3d, r28	; 61
    1312:	cf 91       	pop	r28
    1314:	df 91       	pop	r29
    1316:	08 95       	ret

00001318 <kernel_init>:
{
    while(1);
}

void kernel_init(void)
{
    1318:	8f 92       	push	r8
    131a:	af 92       	push	r10
    131c:	bf 92       	push	r11
    131e:	cf 92       	push	r12
    1320:	ef 92       	push	r14
    1322:	ff 92       	push	r15
    1324:	0f 93       	push	r16
    1326:	1f 93       	push	r17
    1328:	df 93       	push	r29
    132a:	cf 93       	push	r28
    132c:	cd b7       	in	r28, 0x3d	; 61
    132e:	de b7       	in	r29, 0x3e	; 62
        stat_init( (stat_t *)kernel.stat + i );
        sched_init( (sched_t *)kernel.sched + i, (proc_t *)kernel.idle + i );
    }
    spin_unlock( &kernel.stat_lock );
#else
    proc_init_isr(
    1330:	82 e4       	ldi	r24, 0x42	; 66
    1332:	91 e0       	ldi	r25, 0x01	; 1
    1334:	2e e1       	ldi	r18, 0x1E	; 30
    1336:	32 e1       	ldi	r19, 0x12	; 18
    1338:	b9 01       	movw	r22, r18
    133a:	40 e0       	ldi	r20, 0x00	; 0
    133c:	50 e0       	ldi	r21, 0x00	; 0
    133e:	20 e0       	ldi	r18, 0x00	; 0
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	00 e0       	ldi	r16, 0x00	; 0
    1344:	10 e0       	ldi	r17, 0x00	; 0
    1346:	ee 24       	eor	r14, r14
    1348:	ff 24       	eor	r15, r15
    134a:	0f 2e       	mov	r0, r31
    134c:	f7 e0       	ldi	r31, 0x07	; 7
    134e:	cf 2e       	mov	r12, r31
    1350:	f0 2d       	mov	r31, r0
    1352:	aa 24       	eor	r10, r10
    1354:	bb 24       	eor	r11, r11
    1356:	a3 94       	inc	r10
    1358:	88 24       	eor	r8, r8
    135a:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <proc_init_isr>
        0, // это не важно, при первой же смене контекста будет сохранен текущий указатель стека
        ((prio_t)BITS_IN_INDEX_T - (prio_t)1),// низший приоритет
        (timer_t)1,//минимальный квант времени
        (bool_t)0// не RT
    );
    sched_init( (sched_t *)&kernel.sched, (proc_t *)&kernel.idle );
    135e:	88 e1       	ldi	r24, 0x18	; 24
    1360:	91 e0       	ldi	r25, 0x01	; 1
    1362:	22 e4       	ldi	r18, 0x42	; 66
    1364:	31 e0       	ldi	r19, 0x01	; 1
    1366:	b9 01       	movw	r22, r18
    1368:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <sched_init>
#endif // CONFIG_MP
}
    136c:	cf 91       	pop	r28
    136e:	df 91       	pop	r29
    1370:	1f 91       	pop	r17
    1372:	0f 91       	pop	r16
    1374:	ff 90       	pop	r15
    1376:	ef 90       	pop	r14
    1378:	cf 90       	pop	r12
    137a:	bf 90       	pop	r11
    137c:	af 90       	pop	r10
    137e:	8f 90       	pop	r8
    1380:	08 95       	ret

00001382 <mutex_init_isr>:
    mutex_t * mutex
#ifdef CONFIG_USE_HIGHEST_LOCKER
    ,prio_t prio
#endif // CONFIG_USE_HIGHEST_LOCKER
)
{
    1382:	df 93       	push	r29
    1384:	cf 93       	push	r28
    1386:	00 d0       	rcall	.+0      	; 0x1388 <mutex_init_isr+0x6>
    1388:	0f 92       	push	r0
    138a:	cd b7       	in	r28, 0x3d	; 61
    138c:	de b7       	in	r29, 0x3e	; 62
    138e:	9a 83       	std	Y+2, r25	; 0x02
    1390:	89 83       	std	Y+1, r24	; 0x01
    1392:	6b 83       	std	Y+3, r22	; 0x03
    xlist_init( (xlist_t *)mutex );
    1394:	89 81       	ldd	r24, Y+1	; 0x01
    1396:	9a 81       	ldd	r25, Y+2	; 0x02
    1398:	0e 94 a0 10 	call	0x2140	; 0x2140 <xlist_init>
    mutex->free = (bool_t)1;
    139c:	e9 81       	ldd	r30, Y+1	; 0x01
    139e:	fa 81       	ldd	r31, Y+2	; 0x02
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	82 8b       	std	Z+18, r24	; 0x12
#ifdef CONFIG_USE_HIGHEST_LOCKER
    mutex->prio = prio;
    13a4:	e9 81       	ldd	r30, Y+1	; 0x01
    13a6:	fa 81       	ldd	r31, Y+2	; 0x02
    13a8:	8b 81       	ldd	r24, Y+3	; 0x03
    13aa:	81 8b       	std	Z+17, r24	; 0x11
#endif // CONFIG_USE_HIGHEST_LOCKER
}
    13ac:	0f 90       	pop	r0
    13ae:	0f 90       	pop	r0
    13b0:	0f 90       	pop	r0
    13b2:	cf 91       	pop	r28
    13b4:	df 91       	pop	r29
    13b6:	08 95       	ret

000013b8 <_mutex_lock>:

// К моменту вызова захвачена блокировка mutex-а, запрещены прерывания
bool_t _mutex_lock( mutex_t * mutex )
{
    13b8:	df 93       	push	r29
    13ba:	cf 93       	push	r28
    13bc:	00 d0       	rcall	.+0      	; 0x13be <_mutex_lock+0x6>
    13be:	00 d0       	rcall	.+0      	; 0x13c0 <_mutex_lock+0x8>
    13c0:	0f 92       	push	r0
    13c2:	cd b7       	in	r28, 0x3d	; 61
    13c4:	de b7       	in	r29, 0x3e	; 62
    13c6:	9d 83       	std	Y+5, r25	; 0x05
    13c8:	8c 83       	std	Y+4, r24	; 0x04
    bool_t ret = mutex->free;
    13ca:	ec 81       	ldd	r30, Y+4	; 0x04
    13cc:	fd 81       	ldd	r31, Y+5	; 0x05
    13ce:	82 89       	ldd	r24, Z+18	; 0x12
    13d0:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = current_proc();
    13d2:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <current_proc>
    13d6:	9a 83       	std	Y+2, r25	; 0x02
    13d8:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
#ifdef CONFIG_USE_HIGHEST_LOCKER
    _proc_lres_inc( proc, mutex->prio );
    13da:	ec 81       	ldd	r30, Y+4	; 0x04
    13dc:	fd 81       	ldd	r31, Y+5	; 0x05
    13de:	21 89       	ldd	r18, Z+17	; 0x11
    13e0:	89 81       	ldd	r24, Y+1	; 0x01
    13e2:	9a 81       	ldd	r25, Y+2	; 0x02
    13e4:	62 2f       	mov	r22, r18
    13e6:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <_proc_lres_inc>
#else // !CONFIG_USE_HIGHEST_LOCKER
    _proc_lres_inc( proc );
#endif // CONFIG_USE_HIGHEST_LOCKER
    if( ret )
    13ea:	8b 81       	ldd	r24, Y+3	; 0x03
    13ec:	88 23       	and	r24, r24
    13ee:	41 f0       	breq	.+16     	; 0x1400 <_mutex_lock+0x48>
    {
        mutex->free = (bool_t)0;
    13f0:	ec 81       	ldd	r30, Y+4	; 0x04
    13f2:	fd 81       	ldd	r31, Y+5	; 0x05
    13f4:	12 8a       	std	Z+18, r1	; 0x12
#ifdef CONFIG_USE_HIGHEST_LOCKER
        // Меняем приоритет только здесь
        _proc_prio_control_running( proc );
    13f6:	89 81       	ldd	r24, Y+1	; 0x01
    13f8:	9a 81       	ldd	r25, Y+2	; 0x02
    13fa:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <_proc_prio_control_running>
    13fe:	1b c0       	rjmp	.+54     	; 0x1436 <_mutex_lock+0x7e>
#endif // CONFIG_USE_HIGHEST_LOCKER
    }
    else
    {
        proc->flags |= PROC_FLG_QUEUE;
    1400:	e9 81       	ldd	r30, Y+1	; 0x01
    1402:	fa 81       	ldd	r31, Y+2	; 0x02
    1404:	83 85       	ldd	r24, Z+11	; 0x0b
    1406:	88 60       	ori	r24, 0x08	; 8
    1408:	e9 81       	ldd	r30, Y+1	; 0x01
    140a:	fa 81       	ldd	r31, Y+2	; 0x02
    140c:	83 87       	std	Z+11, r24	; 0x0b
        proc->flags &= ~PROC_FLG_RUN;
    140e:	e9 81       	ldd	r30, Y+1	; 0x01
    1410:	fa 81       	ldd	r31, Y+2	; 0x02
    1412:	83 85       	ldd	r24, Z+11	; 0x0b
    1414:	8d 7f       	andi	r24, 0xFD	; 253
    1416:	e9 81       	ldd	r30, Y+1	; 0x01
    1418:	fa 81       	ldd	r31, Y+2	; 0x02
    141a:	83 87       	std	Z+11, r24	; 0x0b
        _proc_stop_( proc );
    141c:	89 81       	ldd	r24, Y+1	; 0x01
    141e:	9a 81       	ldd	r25, Y+2	; 0x02
    1420:	0e 94 a9 07 	call	0xf52	; 0xf52 <gitem_cut>
        gitem_insert( (gitem_t *)proc, (xlist_t *)mutex );
    1424:	89 81       	ldd	r24, Y+1	; 0x01
    1426:	9a 81       	ldd	r25, Y+2	; 0x02
    1428:	2c 81       	ldd	r18, Y+4	; 0x04
    142a:	3d 81       	ldd	r19, Y+5	; 0x05
    142c:	b9 01       	movw	r22, r18
    142e:	0e 94 4c 06 	call	0xc98	; 0xc98 <gitem_insert>
        // Нужна перепланировка
#ifdef CONFIG_MP
        resched( proc->core_id );
#else
        resched();
    1432:	0e 94 fe 00 	call	0x1fc	; 0x1fc <resched>
#endif // CONFIG_MP
    }
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    return ret;
    1436:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1438:	0f 90       	pop	r0
    143a:	0f 90       	pop	r0
    143c:	0f 90       	pop	r0
    143e:	0f 90       	pop	r0
    1440:	0f 90       	pop	r0
    1442:	cf 91       	pop	r28
    1444:	df 91       	pop	r29
    1446:	08 95       	ret

00001448 <_mutex_try_lock>:

bool_t _mutex_try_lock( mutex_t * mutex )
{
    1448:	df 93       	push	r29
    144a:	cf 93       	push	r28
    144c:	00 d0       	rcall	.+0      	; 0x144e <_mutex_try_lock+0x6>
    144e:	00 d0       	rcall	.+0      	; 0x1450 <_mutex_try_lock+0x8>
    1450:	0f 92       	push	r0
    1452:	cd b7       	in	r28, 0x3d	; 61
    1454:	de b7       	in	r29, 0x3e	; 62
    1456:	9d 83       	std	Y+5, r25	; 0x05
    1458:	8c 83       	std	Y+4, r24	; 0x04
    bool_t ret = mutex->free;
    145a:	ec 81       	ldd	r30, Y+4	; 0x04
    145c:	fd 81       	ldd	r31, Y+5	; 0x05
    145e:	82 89       	ldd	r24, Z+18	; 0x12
    1460:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = current_proc();
    1462:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <current_proc>
    1466:	9a 83       	std	Y+2, r25	; 0x02
    1468:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    if( ret )
    146a:	8b 81       	ldd	r24, Y+3	; 0x03
    146c:	88 23       	and	r24, r24
    146e:	79 f0       	breq	.+30     	; 0x148e <_mutex_try_lock+0x46>
    {
        mutex->free = (bool_t)0;
    1470:	ec 81       	ldd	r30, Y+4	; 0x04
    1472:	fd 81       	ldd	r31, Y+5	; 0x05
    1474:	12 8a       	std	Z+18, r1	; 0x12
#ifdef CONFIG_USE_HIGHEST_LOCKER
        _proc_lres_inc( proc, mutex->prio );
    1476:	ec 81       	ldd	r30, Y+4	; 0x04
    1478:	fd 81       	ldd	r31, Y+5	; 0x05
    147a:	21 89       	ldd	r18, Z+17	; 0x11
    147c:	89 81       	ldd	r24, Y+1	; 0x01
    147e:	9a 81       	ldd	r25, Y+2	; 0x02
    1480:	62 2f       	mov	r22, r18
    1482:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <_proc_lres_inc>
        _proc_prio_control_running( proc );
    1486:	89 81       	ldd	r24, Y+1	; 0x01
    1488:	9a 81       	ldd	r25, Y+2	; 0x02
    148a:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <_proc_prio_control_running>
#endif // CONFIG_USE_HIGHEST_LOCKER
    }
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    return ret;
    148e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1490:	0f 90       	pop	r0
    1492:	0f 90       	pop	r0
    1494:	0f 90       	pop	r0
    1496:	0f 90       	pop	r0
    1498:	0f 90       	pop	r0
    149a:	cf 91       	pop	r28
    149c:	df 91       	pop	r29
    149e:	08 95       	ret

000014a0 <_mutex_unlock>:

void _mutex_unlock( mutex_t *  mutex )
{
    14a0:	df 93       	push	r29
    14a2:	cf 93       	push	r28
    14a4:	00 d0       	rcall	.+0      	; 0x14a6 <_mutex_unlock+0x6>
    14a6:	00 d0       	rcall	.+0      	; 0x14a8 <_mutex_unlock+0x8>
    14a8:	cd b7       	in	r28, 0x3d	; 61
    14aa:	de b7       	in	r29, 0x3e	; 62
    14ac:	9c 83       	std	Y+4, r25	; 0x04
    14ae:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = current_proc();
    14b0:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <current_proc>
    14b4:	9a 83       	std	Y+2, r25	; 0x02
    14b6:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
#ifdef CONFIG_USE_HIGHEST_LOCKER

    _proc_lres_dec( proc, mutex->prio );
    14b8:	eb 81       	ldd	r30, Y+3	; 0x03
    14ba:	fc 81       	ldd	r31, Y+4	; 0x04
    14bc:	21 89       	ldd	r18, Z+17	; 0x11
    14be:	89 81       	ldd	r24, Y+1	; 0x01
    14c0:	9a 81       	ldd	r25, Y+2	; 0x02
    14c2:	62 2f       	mov	r22, r18
    14c4:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <_proc_lres_dec>
    // Если проготовлен и готов к остановке - останавливаем
    if(  ( proc->flags & PROC_FLG_PRE_END ) && (!(proc->flags & PROC_FLG_HOLD))  )
    14c8:	e9 81       	ldd	r30, Y+1	; 0x01
    14ca:	fa 81       	ldd	r31, Y+2	; 0x02
    14cc:	83 85       	ldd	r24, Z+11	; 0x0b
    14ce:	88 2f       	mov	r24, r24
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	80 72       	andi	r24, 0x20	; 32
    14d4:	90 70       	andi	r25, 0x00	; 0
    14d6:	00 97       	sbiw	r24, 0x00	; 0
    14d8:	a1 f0       	breq	.+40     	; 0x1502 <_mutex_unlock+0x62>
    14da:	e9 81       	ldd	r30, Y+1	; 0x01
    14dc:	fa 81       	ldd	r31, Y+2	; 0x02
    14de:	83 85       	ldd	r24, Z+11	; 0x0b
    14e0:	88 2f       	mov	r24, r24
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	84 70       	andi	r24, 0x04	; 4
    14e6:	90 70       	andi	r25, 0x00	; 0
    14e8:	00 97       	sbiw	r24, 0x00	; 0
    14ea:	59 f4       	brne	.+22     	; 0x1502 <_mutex_unlock+0x62>
    {
        _proc_stop_( proc );
    14ec:	89 81       	ldd	r24, Y+1	; 0x01
    14ee:	9a 81       	ldd	r25, Y+2	; 0x02
    14f0:	0e 94 a9 07 	call	0xf52	; 0xf52 <gitem_cut>
        _proc_prio_control_stoped( proc );
    14f4:	89 81       	ldd	r24, Y+1	; 0x01
    14f6:	9a 81       	ldd	r25, Y+2	; 0x02
    14f8:	0e 94 57 0d 	call	0x1aae	; 0x1aae <_proc_prio_control_stoped>
        // Нужна перепланировка, процесс остановили и не запустили обратно
#ifdef CONFIG_MP
        resched( proc->core_id );
#else
        resched();
    14fc:	0e 94 fe 00 	call	0x1fc	; 0x1fc <resched>
    1500:	04 c0       	rjmp	.+8      	; 0x150a <_mutex_unlock+0x6a>
#endif // CONFIG_MP
    }
    // Не останавливаем - меняем проиритет на ходу
    else _proc_prio_control_running( proc );
    1502:	89 81       	ldd	r24, Y+1	; 0x01
    1504:	9a 81       	ldd	r25, Y+2	; 0x02
    1506:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <_proc_prio_control_running>
#endif // CONFIG_USE_HIGHEST_LOCKER
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    // Обрабока самого мьютекса
    if( ((xlist_t *)mutex)->index == (index_t)0  )
    150a:	eb 81       	ldd	r30, Y+3	; 0x03
    150c:	fc 81       	ldd	r31, Y+4	; 0x04
    150e:	80 89       	ldd	r24, Z+16	; 0x10
    1510:	88 23       	and	r24, r24
    1512:	29 f4       	brne	.+10     	; 0x151e <_mutex_unlock+0x7e>
    {
        // Список ожидающих пуст, выходим
        mutex->free = (bool_t)1;
    1514:	eb 81       	ldd	r30, Y+3	; 0x03
    1516:	fc 81       	ldd	r31, Y+4	; 0x04
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	82 8b       	std	Z+18, r24	; 0x12
    151c:	19 c0       	rjmp	.+50     	; 0x1550 <_mutex_unlock+0xb0>
        return;
    }
    // Список ожидающих не пуст, запускаем голову
    proc = (proc_t *)xlist_head((xlist_t *)mutex);
    151e:	8b 81       	ldd	r24, Y+3	; 0x03
    1520:	9c 81       	ldd	r25, Y+4	; 0x04
    1522:	0e 94 ca 10 	call	0x2194	; 0x2194 <xlist_head>
    1526:	9a 83       	std	Y+2, r25	; 0x02
    1528:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    // Сначала надо вырезать
    proc->flags &= ~PROC_FLG_QUEUE;
    152a:	e9 81       	ldd	r30, Y+1	; 0x01
    152c:	fa 81       	ldd	r31, Y+2	; 0x02
    152e:	83 85       	ldd	r24, Z+11	; 0x0b
    1530:	87 7f       	andi	r24, 0xF7	; 247
    1532:	e9 81       	ldd	r30, Y+1	; 0x01
    1534:	fa 81       	ldd	r31, Y+2	; 0x02
    1536:	83 87       	std	Z+11, r24	; 0x0b
    gitem_cut( (gitem_t *)proc );
    1538:	89 81       	ldd	r24, Y+1	; 0x01
    153a:	9a 81       	ldd	r25, Y+2	; 0x02
    153c:	0e 94 a9 07 	call	0xf52	; 0xf52 <gitem_cut>
#ifdef CONFIG_USE_HIGHEST_LOCKER
    // Меняем приоритет
    _proc_prio_control_stoped( proc );
    1540:	89 81       	ldd	r24, Y+1	; 0x01
    1542:	9a 81       	ldd	r25, Y+2	; 0x02
    1544:	0e 94 57 0d 	call	0x1aae	; 0x1aae <_proc_prio_control_stoped>
#endif // CONFIG_USE_HIGHEST_LOCKER
    _proc_run( proc );
    1548:	89 81       	ldd	r24, Y+1	; 0x01
    154a:	9a 81       	ldd	r25, Y+2	; 0x02
    154c:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <_proc_run>
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
}
    1550:	0f 90       	pop	r0
    1552:	0f 90       	pop	r0
    1554:	0f 90       	pop	r0
    1556:	0f 90       	pop	r0
    1558:	cf 91       	pop	r28
    155a:	df 91       	pop	r29
    155c:	08 95       	ret

0000155e <pcounter_init>:
*                           http://www.0chan.ru/r/res/9996.html                          *
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
void pcounter_init(pcounter_t * pcounter)
{
    155e:	df 93       	push	r29
    1560:	cf 93       	push	r28
    1562:	00 d0       	rcall	.+0      	; 0x1564 <pcounter_init+0x6>
    1564:	0f 92       	push	r0
    1566:	cd b7       	in	r28, 0x3d	; 61
    1568:	de b7       	in	r29, 0x3e	; 62
    156a:	9b 83       	std	Y+3, r25	; 0x03
    156c:	8a 83       	std	Y+2, r24	; 0x02
    prio_t p;
    pcounter->index = (index_t)0;
    156e:	ea 81       	ldd	r30, Y+2	; 0x02
    1570:	fb 81       	ldd	r31, Y+3	; 0x03
    1572:	10 8a       	std	Z+16, r1	; 0x10
    for(p = 0; p < (index_t)BITS_IN_INDEX_T; p++)pcounter->counter[p] = (count_t)0;
    1574:	19 82       	std	Y+1, r1	; 0x01
    1576:	0f c0       	rjmp	.+30     	; 0x1596 <pcounter_init+0x38>
    1578:	89 81       	ldd	r24, Y+1	; 0x01
    157a:	88 2f       	mov	r24, r24
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	2a 81       	ldd	r18, Y+2	; 0x02
    1580:	3b 81       	ldd	r19, Y+3	; 0x03
    1582:	88 0f       	add	r24, r24
    1584:	99 1f       	adc	r25, r25
    1586:	f9 01       	movw	r30, r18
    1588:	e8 0f       	add	r30, r24
    158a:	f9 1f       	adc	r31, r25
    158c:	11 82       	std	Z+1, r1	; 0x01
    158e:	10 82       	st	Z, r1
    1590:	89 81       	ldd	r24, Y+1	; 0x01
    1592:	8f 5f       	subi	r24, 0xFF	; 255
    1594:	89 83       	std	Y+1, r24	; 0x01
    1596:	89 81       	ldd	r24, Y+1	; 0x01
    1598:	88 30       	cpi	r24, 0x08	; 8
    159a:	70 f3       	brcs	.-36     	; 0x1578 <pcounter_init+0x1a>
}
    159c:	0f 90       	pop	r0
    159e:	0f 90       	pop	r0
    15a0:	0f 90       	pop	r0
    15a2:	cf 91       	pop	r28
    15a4:	df 91       	pop	r29
    15a6:	08 95       	ret

000015a8 <pcounter_inc>:

void pcounter_inc(pcounter_t * pcounter, prio_t prio)
{
    15a8:	df 93       	push	r29
    15aa:	cf 93       	push	r28
    15ac:	00 d0       	rcall	.+0      	; 0x15ae <pcounter_inc+0x6>
    15ae:	0f 92       	push	r0
    15b0:	cd b7       	in	r28, 0x3d	; 61
    15b2:	de b7       	in	r29, 0x3e	; 62
    15b4:	9a 83       	std	Y+2, r25	; 0x02
    15b6:	89 83       	std	Y+1, r24	; 0x01
    15b8:	6b 83       	std	Y+3, r22	; 0x03
    pcounter->counter[prio]++;
    15ba:	8b 81       	ldd	r24, Y+3	; 0x03
    15bc:	68 2f       	mov	r22, r24
    15be:	70 e0       	ldi	r23, 0x00	; 0
    15c0:	29 81       	ldd	r18, Y+1	; 0x01
    15c2:	3a 81       	ldd	r19, Y+2	; 0x02
    15c4:	cb 01       	movw	r24, r22
    15c6:	88 0f       	add	r24, r24
    15c8:	99 1f       	adc	r25, r25
    15ca:	f9 01       	movw	r30, r18
    15cc:	e8 0f       	add	r30, r24
    15ce:	f9 1f       	adc	r31, r25
    15d0:	80 81       	ld	r24, Z
    15d2:	91 81       	ldd	r25, Z+1	; 0x01
    15d4:	ac 01       	movw	r20, r24
    15d6:	4f 5f       	subi	r20, 0xFF	; 255
    15d8:	5f 4f       	sbci	r21, 0xFF	; 255
    15da:	29 81       	ldd	r18, Y+1	; 0x01
    15dc:	3a 81       	ldd	r19, Y+2	; 0x02
    15de:	cb 01       	movw	r24, r22
    15e0:	88 0f       	add	r24, r24
    15e2:	99 1f       	adc	r25, r25
    15e4:	f9 01       	movw	r30, r18
    15e6:	e8 0f       	add	r30, r24
    15e8:	f9 1f       	adc	r31, r25
    15ea:	51 83       	std	Z+1, r21	; 0x01
    15ec:	40 83       	st	Z, r20
    pcounter->index |= ((index_t)1)<<prio;
    15ee:	e9 81       	ldd	r30, Y+1	; 0x01
    15f0:	fa 81       	ldd	r31, Y+2	; 0x02
    15f2:	80 89       	ldd	r24, Z+16	; 0x10
    15f4:	48 2f       	mov	r20, r24
    15f6:	8b 81       	ldd	r24, Y+3	; 0x03
    15f8:	28 2f       	mov	r18, r24
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	02 2e       	mov	r0, r18
    1602:	02 c0       	rjmp	.+4      	; 0x1608 <pcounter_inc+0x60>
    1604:	88 0f       	add	r24, r24
    1606:	99 1f       	adc	r25, r25
    1608:	0a 94       	dec	r0
    160a:	e2 f7       	brpl	.-8      	; 0x1604 <pcounter_inc+0x5c>
    160c:	84 2b       	or	r24, r20
    160e:	e9 81       	ldd	r30, Y+1	; 0x01
    1610:	fa 81       	ldd	r31, Y+2	; 0x02
    1612:	80 8b       	std	Z+16, r24	; 0x10
}
    1614:	0f 90       	pop	r0
    1616:	0f 90       	pop	r0
    1618:	0f 90       	pop	r0
    161a:	cf 91       	pop	r28
    161c:	df 91       	pop	r29
    161e:	08 95       	ret

00001620 <pcounter_dec>:

index_t pcounter_dec(pcounter_t * pcounter, prio_t prio)
{
    1620:	df 93       	push	r29
    1622:	cf 93       	push	r28
    1624:	00 d0       	rcall	.+0      	; 0x1626 <pcounter_dec+0x6>
    1626:	00 d0       	rcall	.+0      	; 0x1628 <pcounter_dec+0x8>
    1628:	cd b7       	in	r28, 0x3d	; 61
    162a:	de b7       	in	r29, 0x3e	; 62
    162c:	9b 83       	std	Y+3, r25	; 0x03
    162e:	8a 83       	std	Y+2, r24	; 0x02
    1630:	6c 83       	std	Y+4, r22	; 0x04
    index_t mask = ((index_t)1)<<prio;
    1632:	8c 81       	ldd	r24, Y+4	; 0x04
    1634:	28 2f       	mov	r18, r24
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	02 c0       	rjmp	.+4      	; 0x1642 <pcounter_dec+0x22>
    163e:	88 0f       	add	r24, r24
    1640:	99 1f       	adc	r25, r25
    1642:	2a 95       	dec	r18
    1644:	e2 f7       	brpl	.-8      	; 0x163e <pcounter_dec+0x1e>
    1646:	89 83       	std	Y+1, r24	; 0x01
    pcounter->counter[prio]--;
    1648:	8c 81       	ldd	r24, Y+4	; 0x04
    164a:	68 2f       	mov	r22, r24
    164c:	70 e0       	ldi	r23, 0x00	; 0
    164e:	2a 81       	ldd	r18, Y+2	; 0x02
    1650:	3b 81       	ldd	r19, Y+3	; 0x03
    1652:	cb 01       	movw	r24, r22
    1654:	88 0f       	add	r24, r24
    1656:	99 1f       	adc	r25, r25
    1658:	f9 01       	movw	r30, r18
    165a:	e8 0f       	add	r30, r24
    165c:	f9 1f       	adc	r31, r25
    165e:	80 81       	ld	r24, Z
    1660:	91 81       	ldd	r25, Z+1	; 0x01
    1662:	ac 01       	movw	r20, r24
    1664:	41 50       	subi	r20, 0x01	; 1
    1666:	50 40       	sbci	r21, 0x00	; 0
    1668:	2a 81       	ldd	r18, Y+2	; 0x02
    166a:	3b 81       	ldd	r19, Y+3	; 0x03
    166c:	cb 01       	movw	r24, r22
    166e:	88 0f       	add	r24, r24
    1670:	99 1f       	adc	r25, r25
    1672:	f9 01       	movw	r30, r18
    1674:	e8 0f       	add	r30, r24
    1676:	f9 1f       	adc	r31, r25
    1678:	51 83       	std	Z+1, r21	; 0x01
    167a:	40 83       	st	Z, r20
    if(pcounter->counter[prio] == (count_t)0)pcounter->index &= ~mask;
    167c:	8c 81       	ldd	r24, Y+4	; 0x04
    167e:	88 2f       	mov	r24, r24
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	2a 81       	ldd	r18, Y+2	; 0x02
    1684:	3b 81       	ldd	r19, Y+3	; 0x03
    1686:	88 0f       	add	r24, r24
    1688:	99 1f       	adc	r25, r25
    168a:	f9 01       	movw	r30, r18
    168c:	e8 0f       	add	r30, r24
    168e:	f9 1f       	adc	r31, r25
    1690:	80 81       	ld	r24, Z
    1692:	91 81       	ldd	r25, Z+1	; 0x01
    1694:	00 97       	sbiw	r24, 0x00	; 0
    1696:	51 f4       	brne	.+20     	; 0x16ac <pcounter_dec+0x8c>
    1698:	ea 81       	ldd	r30, Y+2	; 0x02
    169a:	fb 81       	ldd	r31, Y+3	; 0x03
    169c:	80 89       	ldd	r24, Z+16	; 0x10
    169e:	98 2f       	mov	r25, r24
    16a0:	89 81       	ldd	r24, Y+1	; 0x01
    16a2:	80 95       	com	r24
    16a4:	89 23       	and	r24, r25
    16a6:	ea 81       	ldd	r30, Y+2	; 0x02
    16a8:	fb 81       	ldd	r31, Y+3	; 0x03
    16aa:	80 8b       	std	Z+16, r24	; 0x10
    return pcounter->index & mask;
    16ac:	ea 81       	ldd	r30, Y+2	; 0x02
    16ae:	fb 81       	ldd	r31, Y+3	; 0x03
    16b0:	90 89       	ldd	r25, Z+16	; 0x10
    16b2:	89 81       	ldd	r24, Y+1	; 0x01
    16b4:	89 23       	and	r24, r25
}
    16b6:	0f 90       	pop	r0
    16b8:	0f 90       	pop	r0
    16ba:	0f 90       	pop	r0
    16bc:	0f 90       	pop	r0
    16be:	cf 91       	pop	r28
    16c0:	df 91       	pop	r29
    16c2:	08 95       	ret

000016c4 <proc_init_isr>:
    bool_t is_rt // если true, значит процесс будет иметть поведение RT
#ifdef CONFIG_MP
    ,affinity_t affinity
#endif // CONFIG_MP
)
{
    16c4:	8f 92       	push	r8
    16c6:	af 92       	push	r10
    16c8:	bf 92       	push	r11
    16ca:	cf 92       	push	r12
    16cc:	ef 92       	push	r14
    16ce:	ff 92       	push	r15
    16d0:	0f 93       	push	r16
    16d2:	1f 93       	push	r17
    16d4:	df 93       	push	r29
    16d6:	cf 93       	push	r28
    16d8:	cd b7       	in	r28, 0x3d	; 61
    16da:	de b7       	in	r29, 0x3e	; 62
    16dc:	61 97       	sbiw	r28, 0x11	; 17
    16de:	0f b6       	in	r0, 0x3f	; 63
    16e0:	f8 94       	cli
    16e2:	de bf       	out	0x3e, r29	; 62
    16e4:	0f be       	out	0x3f, r0	; 63
    16e6:	cd bf       	out	0x3d, r28	; 61
    16e8:	9a 83       	std	Y+2, r25	; 0x02
    16ea:	89 83       	std	Y+1, r24	; 0x01
    16ec:	7c 83       	std	Y+4, r23	; 0x04
    16ee:	6b 83       	std	Y+3, r22	; 0x03
    16f0:	5e 83       	std	Y+6, r21	; 0x06
    16f2:	4d 83       	std	Y+5, r20	; 0x05
    16f4:	38 87       	std	Y+8, r19	; 0x08
    16f6:	2f 83       	std	Y+7, r18	; 0x07
    16f8:	1a 87       	std	Y+10, r17	; 0x0a
    16fa:	09 87       	std	Y+9, r16	; 0x09
    16fc:	fc 86       	std	Y+12, r15	; 0x0c
    16fe:	eb 86       	std	Y+11, r14	; 0x0b
    1700:	cd 86       	std	Y+13, r12	; 0x0d
    1702:	bf 86       	std	Y+15, r11	; 0x0f
    1704:	ae 86       	std	Y+14, r10	; 0x0e
    1706:	88 8a       	std	Y+16, r8	; 0x10
    gitem_init( (gitem_t *)proc, prio );
    1708:	89 81       	ldd	r24, Y+1	; 0x01
    170a:	9a 81       	ldd	r25, Y+2	; 0x02
    170c:	6d 85       	ldd	r22, Y+13	; 0x0d
    170e:	0e 94 26 06 	call	0xc4c	; 0xc4c <gitem_init>
    proc->flags = ( is_rt )?PROC_FLG_RT:(flag_t)0;
    1712:	88 89       	ldd	r24, Y+16	; 0x10
    1714:	89 8b       	std	Y+17, r24	; 0x11
    1716:	89 89       	ldd	r24, Y+17	; 0x11
    1718:	88 23       	and	r24, r24
    171a:	11 f0       	breq	.+4      	; 0x1720 <proc_init_isr+0x5c>
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	89 8b       	std	Y+17, r24	; 0x11
    1720:	89 89       	ldd	r24, Y+17	; 0x11
    1722:	e9 81       	ldd	r30, Y+1	; 0x01
    1724:	fa 81       	ldd	r31, Y+2	; 0x02
    1726:	83 87       	std	Z+11, r24	; 0x0b
#ifdef CONFIG_USE_HIGHEST_LOCKER
    pcounter_init(&proc->lres);
    1728:	89 81       	ldd	r24, Y+1	; 0x01
    172a:	9a 81       	ldd	r25, Y+2	; 0x02
    172c:	0d 96       	adiw	r24, 0x0d	; 13
    172e:	0e 94 af 0a 	call	0x155e	; 0x155e <pcounter_init>
    proc->base_prio = prio;
    1732:	e9 81       	ldd	r30, Y+1	; 0x01
    1734:	fa 81       	ldd	r31, Y+2	; 0x02
    1736:	8d 85       	ldd	r24, Y+13	; 0x0d
    1738:	84 87       	std	Z+12, r24	; 0x0c
#else
    proc->lres = (count_t)0;
#endif
    proc->time_quant = time_quant;
    173a:	8e 85       	ldd	r24, Y+14	; 0x0e
    173c:	9f 85       	ldd	r25, Y+15	; 0x0f
    173e:	e9 81       	ldd	r30, Y+1	; 0x01
    1740:	fa 81       	ldd	r31, Y+2	; 0x02
    1742:	97 8f       	std	Z+31, r25	; 0x1f
    1744:	86 8f       	std	Z+30, r24	; 0x1e
    proc->timer = time_quant;
    1746:	8e 85       	ldd	r24, Y+14	; 0x0e
    1748:	9f 85       	ldd	r25, Y+15	; 0x0f
    174a:	e9 81       	ldd	r30, Y+1	; 0x01
    174c:	fa 81       	ldd	r31, Y+2	; 0x02
    174e:	91 a3       	std	Z+33, r25	; 0x21
    1750:	80 a3       	std	Z+32, r24	; 0x20
#ifdef CONFIG_MP
    proc->core_id = (core_id_t)0;
    proc->affinity = affinity;
#endif // CONFIG_MP
    proc->pmain = pmain;
    1752:	e9 81       	ldd	r30, Y+1	; 0x01
    1754:	fa 81       	ldd	r31, Y+2	; 0x02
    1756:	8b 81       	ldd	r24, Y+3	; 0x03
    1758:	9c 81       	ldd	r25, Y+4	; 0x04
    175a:	93 a3       	std	Z+35, r25	; 0x23
    175c:	82 a3       	std	Z+34, r24	; 0x22
    proc->sv_hook = sv_hook;
    175e:	e9 81       	ldd	r30, Y+1	; 0x01
    1760:	fa 81       	ldd	r31, Y+2	; 0x02
    1762:	8d 81       	ldd	r24, Y+5	; 0x05
    1764:	9e 81       	ldd	r25, Y+6	; 0x06
    1766:	95 a3       	std	Z+37, r25	; 0x25
    1768:	84 a3       	std	Z+36, r24	; 0x24
    proc->rs_hook = rs_hook;
    176a:	e9 81       	ldd	r30, Y+1	; 0x01
    176c:	fa 81       	ldd	r31, Y+2	; 0x02
    176e:	8f 81       	ldd	r24, Y+7	; 0x07
    1770:	98 85       	ldd	r25, Y+8	; 0x08
    1772:	97 a3       	std	Z+39, r25	; 0x27
    1774:	86 a3       	std	Z+38, r24	; 0x26
    proc->arg = arg;
    1776:	e9 81       	ldd	r30, Y+1	; 0x01
    1778:	fa 81       	ldd	r31, Y+2	; 0x02
    177a:	89 85       	ldd	r24, Y+9	; 0x09
    177c:	9a 85       	ldd	r25, Y+10	; 0x0a
    177e:	91 a7       	std	Z+41, r25	; 0x29
    1780:	80 a7       	std	Z+40, r24	; 0x28
    proc->sstart = sstart;
    1782:	e9 81       	ldd	r30, Y+1	; 0x01
    1784:	fa 81       	ldd	r31, Y+2	; 0x02
    1786:	8b 85       	ldd	r24, Y+11	; 0x0b
    1788:	9c 85       	ldd	r25, Y+12	; 0x0c
    178a:	93 a7       	std	Z+43, r25	; 0x2b
    178c:	82 a7       	std	Z+42, r24	; 0x2a
    if( sstart )proc->spointer = proc_stack_init(sstart, (code_t)proc_run_wrapper, (void *)proc);
    178e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1790:	9c 85       	ldd	r25, Y+12	; 0x0c
    1792:	00 97       	sbiw	r24, 0x00	; 0
    1794:	71 f0       	breq	.+28     	; 0x17b2 <proc_init_isr+0xee>
    1796:	41 e4       	ldi	r20, 0x41	; 65
    1798:	53 e0       	ldi	r21, 0x03	; 3
    179a:	8b 85       	ldd	r24, Y+11	; 0x0b
    179c:	9c 85       	ldd	r25, Y+12	; 0x0c
    179e:	29 81       	ldd	r18, Y+1	; 0x01
    17a0:	3a 81       	ldd	r19, Y+2	; 0x02
    17a2:	ba 01       	movw	r22, r20
    17a4:	a9 01       	movw	r20, r18
    17a6:	0e 94 df 00 	call	0x1be	; 0x1be <proc_stack_init>
    17aa:	e9 81       	ldd	r30, Y+1	; 0x01
    17ac:	fa 81       	ldd	r31, Y+2	; 0x02
    17ae:	95 a7       	std	Z+45, r25	; 0x2d
    17b0:	84 a7       	std	Z+44, r24	; 0x2c
}
    17b2:	61 96       	adiw	r28, 0x11	; 17
    17b4:	0f b6       	in	r0, 0x3f	; 63
    17b6:	f8 94       	cli
    17b8:	de bf       	out	0x3e, r29	; 62
    17ba:	0f be       	out	0x3f, r0	; 63
    17bc:	cd bf       	out	0x3d, r28	; 61
    17be:	cf 91       	pop	r28
    17c0:	df 91       	pop	r29
    17c2:	1f 91       	pop	r17
    17c4:	0f 91       	pop	r16
    17c6:	ff 90       	pop	r15
    17c8:	ef 90       	pop	r14
    17ca:	cf 90       	pop	r12
    17cc:	bf 90       	pop	r11
    17ce:	af 90       	pop	r10
    17d0:	8f 90       	pop	r8
    17d2:	08 95       	ret

000017d4 <_proc_run>:
    spin_unlock( &proc_sched->lock );
}
#endif // CONFIG_MP

void _proc_run( proc_t * proc )
{
    17d4:	df 93       	push	r29
    17d6:	cf 93       	push	r28
    17d8:	00 d0       	rcall	.+0      	; 0x17da <_proc_run+0x6>
    17da:	cd b7       	in	r28, 0x3d	; 61
    17dc:	de b7       	in	r29, 0x3e	; 62
    17de:	9a 83       	std	Y+2, r25	; 0x02
    17e0:	89 83       	std	Y+1, r24	; 0x01
    proc->flags |= PROC_FLG_RUN;
    17e2:	e9 81       	ldd	r30, Y+1	; 0x01
    17e4:	fa 81       	ldd	r31, Y+2	; 0x02
    17e6:	83 85       	ldd	r24, Z+11	; 0x0b
    17e8:	82 60       	ori	r24, 0x02	; 2
    17ea:	e9 81       	ldd	r30, Y+1	; 0x01
    17ec:	fa 81       	ldd	r31, Y+2	; 0x02
    17ee:	83 87       	std	Z+11, r24	; 0x0b
    spin_lock( &kernel.stat_lock );
    proc->core_id = sched_load_balancer( proc, (stat_t *)kernel.stat );
    stat_inc( proc, (stat_t *)kernel.stat+proc->core_id );
    spin_unlock( &kernel.stat_lock );
#endif
    _proc_run_( proc );
    17f0:	89 81       	ldd	r24, Y+1	; 0x01
    17f2:	9a 81       	ldd	r25, Y+2	; 0x02
    17f4:	20 91 1a 01 	lds	r18, 0x011A
    17f8:	30 91 1b 01 	lds	r19, 0x011B
    17fc:	b9 01       	movw	r22, r18
    17fe:	0e 94 4c 06 	call	0xc98	; 0xc98 <gitem_insert>
#ifdef CONFIG_MP
    resched( proc->core_id );
#else
    resched();
    1802:	0e 94 fe 00 	call	0x1fc	; 0x1fc <resched>
#endif // CONFIG_MP
}
    1806:	0f 90       	pop	r0
    1808:	0f 90       	pop	r0
    180a:	cf 91       	pop	r28
    180c:	df 91       	pop	r29
    180e:	08 95       	ret

00001810 <proc_run_isr>:
// Функция общего пользования - запуск процесса из обработчика прерывания, прерывания должны быть запрещены во время запуска
bool_t proc_run_isr(proc_t * proc)
{
    1810:	df 93       	push	r29
    1812:	cf 93       	push	r28
    1814:	00 d0       	rcall	.+0      	; 0x1816 <proc_run_isr+0x6>
    1816:	0f 92       	push	r0
    1818:	cd b7       	in	r28, 0x3d	; 61
    181a:	de b7       	in	r29, 0x3e	; 62
    181c:	9b 83       	std	Y+3, r25	; 0x03
    181e:	8a 83       	std	Y+2, r24	; 0x02
    bool_t ret = (bool_t)1;
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    if( proc->flags & (PROC_FLG_RUN|PROC_FLG_QUEUE|PROC_FLG_WAIT|PROC_FLG_END|PROC_FLG_DEAD) )
    1824:	ea 81       	ldd	r30, Y+2	; 0x02
    1826:	fb 81       	ldd	r31, Y+3	; 0x03
    1828:	83 85       	ldd	r24, Z+11	; 0x0b
    182a:	88 2f       	mov	r24, r24
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	8a 7d       	andi	r24, 0xDA	; 218
    1830:	90 70       	andi	r25, 0x00	; 0
    1832:	00 97       	sbiw	r24, 0x00	; 0
    1834:	11 f0       	breq	.+4      	; 0x183a <proc_run_isr+0x2a>
    {
        ret = (bool_t)0;
    1836:	19 82       	std	Y+1, r1	; 0x01
    1838:	04 c0       	rjmp	.+8      	; 0x1842 <proc_run_isr+0x32>
        goto end;
    }
    _proc_run( proc );
    183a:	8a 81       	ldd	r24, Y+2	; 0x02
    183c:	9b 81       	ldd	r25, Y+3	; 0x03
    183e:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <_proc_run>
end:
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    return ret;
    1842:	89 81       	ldd	r24, Y+1	; 0x01
}
    1844:	0f 90       	pop	r0
    1846:	0f 90       	pop	r0
    1848:	0f 90       	pop	r0
    184a:	cf 91       	pop	r28
    184c:	df 91       	pop	r29
    184e:	08 95       	ret

00001850 <proc_restart_isr>:
// Перезепуск процесса из обработчика прерываний, прерывания должны быть запрещены
bool_t proc_restart_isr(proc_t * proc)
{
    1850:	df 93       	push	r29
    1852:	cf 93       	push	r28
    1854:	00 d0       	rcall	.+0      	; 0x1856 <proc_restart_isr+0x6>
    1856:	0f 92       	push	r0
    1858:	cd b7       	in	r28, 0x3d	; 61
    185a:	de b7       	in	r29, 0x3e	; 62
    185c:	9b 83       	std	Y+3, r25	; 0x03
    185e:	8a 83       	std	Y+2, r24	; 0x02
    bool_t ret = (bool_t)1;
    1860:	81 e0       	ldi	r24, 0x01	; 1
    1862:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif
    if( proc->flags & (PROC_FLG_RUN|PROC_FLG_HOLD|PROC_FLG_QUEUE|PROC_FLG_WAIT|PROC_FLG_PRE_END|PROC_FLG_DEAD) )
    1864:	ea 81       	ldd	r30, Y+2	; 0x02
    1866:	fb 81       	ldd	r31, Y+3	; 0x03
    1868:	83 85       	ldd	r24, Z+11	; 0x0b
    186a:	88 2f       	mov	r24, r24
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	8e 7b       	andi	r24, 0xBE	; 190
    1870:	90 70       	andi	r25, 0x00	; 0
    1872:	00 97       	sbiw	r24, 0x00	; 0
    1874:	11 f0       	breq	.+4      	; 0x187a <proc_restart_isr+0x2a>
    {
        ret = (bool_t)0;
    1876:	19 82       	std	Y+1, r1	; 0x01
    1878:	2d c0       	rjmp	.+90     	; 0x18d4 <proc_restart_isr+0x84>
        goto end;
    }
    proc->flags = ( proc->flags & PROC_FLG_RT )?PROC_FLG_RT:(flag_t)0;
    187a:	ea 81       	ldd	r30, Y+2	; 0x02
    187c:	fb 81       	ldd	r31, Y+3	; 0x03
    187e:	83 85       	ldd	r24, Z+11	; 0x0b
    1880:	81 70       	andi	r24, 0x01	; 1
    1882:	ea 81       	ldd	r30, Y+2	; 0x02
    1884:	fb 81       	ldd	r31, Y+3	; 0x03
    1886:	83 87       	std	Z+11, r24	; 0x0b
#ifdef CONFIG_USE_HIGHEST_LOCKER
    pcounter_init(&proc->lres);
    1888:	8a 81       	ldd	r24, Y+2	; 0x02
    188a:	9b 81       	ldd	r25, Y+3	; 0x03
    188c:	0d 96       	adiw	r24, 0x0d	; 13
    188e:	0e 94 af 0a 	call	0x155e	; 0x155e <pcounter_init>
#else
    proc->lres = (count_t)0;
#endif
    proc->timer = proc->time_quant;
    1892:	ea 81       	ldd	r30, Y+2	; 0x02
    1894:	fb 81       	ldd	r31, Y+3	; 0x03
    1896:	86 8d       	ldd	r24, Z+30	; 0x1e
    1898:	97 8d       	ldd	r25, Z+31	; 0x1f
    189a:	ea 81       	ldd	r30, Y+2	; 0x02
    189c:	fb 81       	ldd	r31, Y+3	; 0x03
    189e:	91 a3       	std	Z+33, r25	; 0x21
    18a0:	80 a3       	std	Z+32, r24	; 0x20

    if( proc->sstart )proc->spointer = proc_stack_init( proc->sstart, (code_t)proc_run_wrapper, (void *)proc );
    18a2:	ea 81       	ldd	r30, Y+2	; 0x02
    18a4:	fb 81       	ldd	r31, Y+3	; 0x03
    18a6:	82 a5       	ldd	r24, Z+42	; 0x2a
    18a8:	93 a5       	ldd	r25, Z+43	; 0x2b
    18aa:	00 97       	sbiw	r24, 0x00	; 0
    18ac:	79 f0       	breq	.+30     	; 0x18cc <proc_restart_isr+0x7c>
    18ae:	ea 81       	ldd	r30, Y+2	; 0x02
    18b0:	fb 81       	ldd	r31, Y+3	; 0x03
    18b2:	82 a5       	ldd	r24, Z+42	; 0x2a
    18b4:	93 a5       	ldd	r25, Z+43	; 0x2b
    18b6:	21 e4       	ldi	r18, 0x41	; 65
    18b8:	33 e0       	ldi	r19, 0x03	; 3
    18ba:	4a 81       	ldd	r20, Y+2	; 0x02
    18bc:	5b 81       	ldd	r21, Y+3	; 0x03
    18be:	b9 01       	movw	r22, r18
    18c0:	0e 94 df 00 	call	0x1be	; 0x1be <proc_stack_init>
    18c4:	ea 81       	ldd	r30, Y+2	; 0x02
    18c6:	fb 81       	ldd	r31, Y+3	; 0x03
    18c8:	95 a7       	std	Z+45, r25	; 0x2d
    18ca:	84 a7       	std	Z+44, r24	; 0x2c
    _proc_run( proc );
    18cc:	8a 81       	ldd	r24, Y+2	; 0x02
    18ce:	9b 81       	ldd	r25, Y+3	; 0x03
    18d0:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <_proc_run>
end:
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif
    return ret;
    18d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    18d6:	0f 90       	pop	r0
    18d8:	0f 90       	pop	r0
    18da:	0f 90       	pop	r0
    18dc:	cf 91       	pop	r28
    18de:	df 91       	pop	r29
    18e0:	08 95       	ret

000018e2 <_proc_stop>:
        spin_unlock( xlist_lock );
    }
}
#endif // CONFIG_MP
void _proc_stop(proc_t * proc)
{
    18e2:	df 93       	push	r29
    18e4:	cf 93       	push	r28
    18e6:	00 d0       	rcall	.+0      	; 0x18e8 <_proc_stop+0x6>
    18e8:	cd b7       	in	r28, 0x3d	; 61
    18ea:	de b7       	in	r29, 0x3e	; 62
    18ec:	9a 83       	std	Y+2, r25	; 0x02
    18ee:	89 83       	std	Y+1, r24	; 0x01
    proc->flags &= ~PROC_FLG_RUN;
    18f0:	e9 81       	ldd	r30, Y+1	; 0x01
    18f2:	fa 81       	ldd	r31, Y+2	; 0x02
    18f4:	83 85       	ldd	r24, Z+11	; 0x0b
    18f6:	8d 7f       	andi	r24, 0xFD	; 253
    18f8:	e9 81       	ldd	r30, Y+1	; 0x01
    18fa:	fa 81       	ldd	r31, Y+2	; 0x02
    18fc:	83 87       	std	Z+11, r24	; 0x0b
    _proc_stop_( proc );
    18fe:	89 81       	ldd	r24, Y+1	; 0x01
    1900:	9a 81       	ldd	r25, Y+2	; 0x02
    1902:	0e 94 a9 07 	call	0xf52	; 0xf52 <gitem_cut>
#ifdef CONFIG_MP
    resched( proc->core_id );
#else
    resched();
    1906:	0e 94 fe 00 	call	0x1fc	; 0x1fc <resched>
#endif // CONFIG_MP
}
    190a:	0f 90       	pop	r0
    190c:	0f 90       	pop	r0
    190e:	cf 91       	pop	r28
    1910:	df 91       	pop	r29
    1912:	08 95       	ret

00001914 <proc_stop_isr>:
// Останов процесса из обработчика прерываний, прерывания должны быть запрещены
bool_t proc_stop_isr(proc_t * proc)
{
    1914:	df 93       	push	r29
    1916:	cf 93       	push	r28
    1918:	00 d0       	rcall	.+0      	; 0x191a <proc_stop_isr+0x6>
    191a:	0f 92       	push	r0
    191c:	cd b7       	in	r28, 0x3d	; 61
    191e:	de b7       	in	r29, 0x3e	; 62
    1920:	9b 83       	std	Y+3, r25	; 0x03
    1922:	8a 83       	std	Y+2, r24	; 0x02
    bool_t ret = (bool_t)0;
    1924:	19 82       	std	Y+1, r1	; 0x01
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    //Проверка флагов
    //В случчае PROC_FLG_WAIT будем обрабатывать PROC_FLG_PRE_END на выходе из sig_wait.
    //В случае PROC_FLG_HOLD или PROC_FLG_QUEUE будем обрабатывать PROC_FLG_PRE_END на выходе из функции, освобождающей общий ресурс.
    if( proc->flags & (PROC_FLG_HOLD|PROC_FLG_QUEUE|PROC_FLG_WAIT) )proc->flags |= PROC_FLG_PRE_END;
    1926:	ea 81       	ldd	r30, Y+2	; 0x02
    1928:	fb 81       	ldd	r31, Y+3	; 0x03
    192a:	83 85       	ldd	r24, Z+11	; 0x0b
    192c:	88 2f       	mov	r24, r24
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	8c 71       	andi	r24, 0x1C	; 28
    1932:	90 70       	andi	r25, 0x00	; 0
    1934:	00 97       	sbiw	r24, 0x00	; 0
    1936:	41 f0       	breq	.+16     	; 0x1948 <proc_stop_isr+0x34>
    1938:	ea 81       	ldd	r30, Y+2	; 0x02
    193a:	fb 81       	ldd	r31, Y+3	; 0x03
    193c:	83 85       	ldd	r24, Z+11	; 0x0b
    193e:	80 62       	ori	r24, 0x20	; 32
    1940:	ea 81       	ldd	r30, Y+2	; 0x02
    1942:	fb 81       	ldd	r31, Y+3	; 0x03
    1944:	83 87       	std	Z+11, r24	; 0x0b
    1946:	0f c0       	rjmp	.+30     	; 0x1966 <proc_stop_isr+0x52>
    else if( proc->flags & PROC_FLG_RUN )
    1948:	ea 81       	ldd	r30, Y+2	; 0x02
    194a:	fb 81       	ldd	r31, Y+3	; 0x03
    194c:	83 85       	ldd	r24, Z+11	; 0x0b
    194e:	88 2f       	mov	r24, r24
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	82 70       	andi	r24, 0x02	; 2
    1954:	90 70       	andi	r25, 0x00	; 0
    1956:	00 97       	sbiw	r24, 0x00	; 0
    1958:	31 f0       	breq	.+12     	; 0x1966 <proc_stop_isr+0x52>
    {
        _proc_stop( proc );
    195a:	8a 81       	ldd	r24, Y+2	; 0x02
    195c:	9b 81       	ldd	r25, Y+3	; 0x03
    195e:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_proc_stop>
        ret = (bool_t)1;
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	89 83       	std	Y+1, r24	; 0x01
    }
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    return ret;
    1966:	89 81       	ldd	r24, Y+1	; 0x01
}
    1968:	0f 90       	pop	r0
    196a:	0f 90       	pop	r0
    196c:	0f 90       	pop	r0
    196e:	cf 91       	pop	r28
    1970:	df 91       	pop	r29
    1972:	08 95       	ret

00001974 <proc_reset_watchdog>:
void proc_reset_watchdog(void)
{
    1974:	df 93       	push	r29
    1976:	cf 93       	push	r28
    1978:	00 d0       	rcall	.+0      	; 0x197a <proc_reset_watchdog+0x6>
    197a:	cd b7       	in	r28, 0x3d	; 61
    197c:	de b7       	in	r29, 0x3e	; 62
#ifdef CONFIG_MP
    core_id_t current_core = _enter_crit_sec();
    proc = ((sched_t *)kernel.sched + current_core)->current_proc;
    spin_lock(&proc->lock);
#else
    enter_crit_sec();
    197e:	0e 94 f6 05 	call	0xbec	; 0xbec <enter_crit_sec>
    proc = kernel.sched.current_proc;
    1982:	80 91 18 01 	lds	r24, 0x0118
    1986:	90 91 19 01 	lds	r25, 0x0119
    198a:	9a 83       	std	Y+2, r25	; 0x02
    198c:	89 83       	std	Y+1, r24	; 0x01
#endif
    if( proc->flags & PROC_FLG_RT )proc->timer = proc->time_quant;
    198e:	e9 81       	ldd	r30, Y+1	; 0x01
    1990:	fa 81       	ldd	r31, Y+2	; 0x02
    1992:	83 85       	ldd	r24, Z+11	; 0x0b
    1994:	88 2f       	mov	r24, r24
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	81 70       	andi	r24, 0x01	; 1
    199a:	90 70       	andi	r25, 0x00	; 0
    199c:	88 23       	and	r24, r24
    199e:	41 f0       	breq	.+16     	; 0x19b0 <proc_reset_watchdog+0x3c>
    19a0:	e9 81       	ldd	r30, Y+1	; 0x01
    19a2:	fa 81       	ldd	r31, Y+2	; 0x02
    19a4:	86 8d       	ldd	r24, Z+30	; 0x1e
    19a6:	97 8d       	ldd	r25, Z+31	; 0x1f
    19a8:	e9 81       	ldd	r30, Y+1	; 0x01
    19aa:	fa 81       	ldd	r31, Y+2	; 0x02
    19ac:	91 a3       	std	Z+33, r25	; 0x21
    19ae:	80 a3       	std	Z+32, r24	; 0x20
#ifdef CONFIG_MP
    spin_lock(&proc->lock);
    _exit_crit_sec(current_core);
#else
    exit_crit_sec();
    19b0:	0e 94 08 06 	call	0xc10	; 0xc10 <exit_crit_sec>
#endif
}
    19b4:	0f 90       	pop	r0
    19b6:	0f 90       	pop	r0
    19b8:	cf 91       	pop	r28
    19ba:	df 91       	pop	r29
    19bc:	08 95       	ret

000019be <_proc_flag_stop_isr>:

void _proc_flag_stop_isr( flag_t mask )
{
    19be:	df 93       	push	r29
    19c0:	cf 93       	push	r28
    19c2:	00 d0       	rcall	.+0      	; 0x19c4 <_proc_flag_stop_isr+0x6>
    19c4:	0f 92       	push	r0
    19c6:	cd b7       	in	r28, 0x3d	; 61
    19c8:	de b7       	in	r29, 0x3e	; 62
    19ca:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = current_proc();
    19cc:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <current_proc>
    19d0:	9a 83       	std	Y+2, r25	; 0x02
    19d2:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif //CONFIG_MP
    proc->flags &= mask;
    19d4:	e9 81       	ldd	r30, Y+1	; 0x01
    19d6:	fa 81       	ldd	r31, Y+2	; 0x02
    19d8:	93 85       	ldd	r25, Z+11	; 0x0b
    19da:	8b 81       	ldd	r24, Y+3	; 0x03
    19dc:	89 23       	and	r24, r25
    19de:	e9 81       	ldd	r30, Y+1	; 0x01
    19e0:	fa 81       	ldd	r31, Y+2	; 0x02
    19e2:	83 87       	std	Z+11, r24	; 0x0b
    if(  ( proc->flags & PROC_FLG_PRE_END ) && (!(proc->flags & PROC_FLG_HOLD))  )
    19e4:	e9 81       	ldd	r30, Y+1	; 0x01
    19e6:	fa 81       	ldd	r31, Y+2	; 0x02
    19e8:	83 85       	ldd	r24, Z+11	; 0x0b
    19ea:	88 2f       	mov	r24, r24
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	80 72       	andi	r24, 0x20	; 32
    19f0:	90 70       	andi	r25, 0x00	; 0
    19f2:	00 97       	sbiw	r24, 0x00	; 0
    19f4:	a1 f0       	breq	.+40     	; 0x1a1e <_proc_flag_stop_isr+0x60>
    19f6:	e9 81       	ldd	r30, Y+1	; 0x01
    19f8:	fa 81       	ldd	r31, Y+2	; 0x02
    19fa:	83 85       	ldd	r24, Z+11	; 0x0b
    19fc:	88 2f       	mov	r24, r24
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	84 70       	andi	r24, 0x04	; 4
    1a02:	90 70       	andi	r25, 0x00	; 0
    1a04:	00 97       	sbiw	r24, 0x00	; 0
    1a06:	59 f4       	brne	.+22     	; 0x1a1e <_proc_flag_stop_isr+0x60>
    {
        proc->flags &= ~PROC_FLG_PRE_END;
    1a08:	e9 81       	ldd	r30, Y+1	; 0x01
    1a0a:	fa 81       	ldd	r31, Y+2	; 0x02
    1a0c:	83 85       	ldd	r24, Z+11	; 0x0b
    1a0e:	8f 7d       	andi	r24, 0xDF	; 223
    1a10:	e9 81       	ldd	r30, Y+1	; 0x01
    1a12:	fa 81       	ldd	r31, Y+2	; 0x02
    1a14:	83 87       	std	Z+11, r24	; 0x0b
        _proc_stop( proc );
    1a16:	89 81       	ldd	r24, Y+1	; 0x01
    1a18:	9a 81       	ldd	r25, Y+2	; 0x02
    1a1a:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_proc_stop>
    }
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif //CONFIG_MP
}
    1a1e:	0f 90       	pop	r0
    1a20:	0f 90       	pop	r0
    1a22:	0f 90       	pop	r0
    1a24:	cf 91       	pop	r28
    1a26:	df 91       	pop	r29
    1a28:	08 95       	ret

00001a2a <_proc_lres_inc>:
    proc_t * proc
#ifdef CONFIG_USE_HIGHEST_LOCKER
    ,prio_t prio
#endif
)
{
    1a2a:	df 93       	push	r29
    1a2c:	cf 93       	push	r28
    1a2e:	00 d0       	rcall	.+0      	; 0x1a30 <_proc_lres_inc+0x6>
    1a30:	0f 92       	push	r0
    1a32:	cd b7       	in	r28, 0x3d	; 61
    1a34:	de b7       	in	r29, 0x3e	; 62
    1a36:	9a 83       	std	Y+2, r25	; 0x02
    1a38:	89 83       	std	Y+1, r24	; 0x01
    1a3a:	6b 83       	std	Y+3, r22	; 0x03
#ifdef CONFIG_USE_HIGHEST_LOCKER
    if( proc->lres.index == (index_t)0 )proc->flags |= PROC_FLG_HOLD;
    1a3c:	e9 81       	ldd	r30, Y+1	; 0x01
    1a3e:	fa 81       	ldd	r31, Y+2	; 0x02
    1a40:	85 8d       	ldd	r24, Z+29	; 0x1d
    1a42:	88 23       	and	r24, r24
    1a44:	39 f4       	brne	.+14     	; 0x1a54 <_proc_lres_inc+0x2a>
    1a46:	e9 81       	ldd	r30, Y+1	; 0x01
    1a48:	fa 81       	ldd	r31, Y+2	; 0x02
    1a4a:	83 85       	ldd	r24, Z+11	; 0x0b
    1a4c:	84 60       	ori	r24, 0x04	; 4
    1a4e:	e9 81       	ldd	r30, Y+1	; 0x01
    1a50:	fa 81       	ldd	r31, Y+2	; 0x02
    1a52:	83 87       	std	Z+11, r24	; 0x0b
    pcounter_inc( &proc->lres, prio );
    1a54:	89 81       	ldd	r24, Y+1	; 0x01
    1a56:	9a 81       	ldd	r25, Y+2	; 0x02
    1a58:	0d 96       	adiw	r24, 0x0d	; 13
    1a5a:	6b 81       	ldd	r22, Y+3	; 0x03
    1a5c:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <pcounter_inc>
#else
    if( proc->lres == (count_t)0 )proc->flags |= PROC_FLG_HOLD;
    proc->lres++;
#endif
}
    1a60:	0f 90       	pop	r0
    1a62:	0f 90       	pop	r0
    1a64:	0f 90       	pop	r0
    1a66:	cf 91       	pop	r28
    1a68:	df 91       	pop	r29
    1a6a:	08 95       	ret

00001a6c <_proc_lres_dec>:
    proc_t * proc
#ifdef CONFIG_USE_HIGHEST_LOCKER
    ,prio_t prio
#endif
)
{
    1a6c:	df 93       	push	r29
    1a6e:	cf 93       	push	r28
    1a70:	00 d0       	rcall	.+0      	; 0x1a72 <_proc_lres_dec+0x6>
    1a72:	0f 92       	push	r0
    1a74:	cd b7       	in	r28, 0x3d	; 61
    1a76:	de b7       	in	r29, 0x3e	; 62
    1a78:	9a 83       	std	Y+2, r25	; 0x02
    1a7a:	89 83       	std	Y+1, r24	; 0x01
    1a7c:	6b 83       	std	Y+3, r22	; 0x03
#ifdef CONFIG_USE_HIGHEST_LOCKER
    pcounter_dec( &proc->lres, prio );
    1a7e:	89 81       	ldd	r24, Y+1	; 0x01
    1a80:	9a 81       	ldd	r25, Y+2	; 0x02
    1a82:	0d 96       	adiw	r24, 0x0d	; 13
    1a84:	6b 81       	ldd	r22, Y+3	; 0x03
    1a86:	0e 94 10 0b 	call	0x1620	; 0x1620 <pcounter_dec>
    if( proc->lres.index == (index_t)0 )proc->flags &= ~PROC_FLG_HOLD;
    1a8a:	e9 81       	ldd	r30, Y+1	; 0x01
    1a8c:	fa 81       	ldd	r31, Y+2	; 0x02
    1a8e:	85 8d       	ldd	r24, Z+29	; 0x1d
    1a90:	88 23       	and	r24, r24
    1a92:	39 f4       	brne	.+14     	; 0x1aa2 <_proc_lres_dec+0x36>
    1a94:	e9 81       	ldd	r30, Y+1	; 0x01
    1a96:	fa 81       	ldd	r31, Y+2	; 0x02
    1a98:	83 85       	ldd	r24, Z+11	; 0x0b
    1a9a:	8b 7f       	andi	r24, 0xFB	; 251
    1a9c:	e9 81       	ldd	r30, Y+1	; 0x01
    1a9e:	fa 81       	ldd	r31, Y+2	; 0x02
    1aa0:	83 87       	std	Z+11, r24	; 0x0b
#else
    if( proc->lres!= (count_t)0 )proc->lres--;
    if( proc->lres == (count_t)0 )proc->flags &= ~PROC_FLG_HOLD;
#endif
}
    1aa2:	0f 90       	pop	r0
    1aa4:	0f 90       	pop	r0
    1aa6:	0f 90       	pop	r0
    1aa8:	cf 91       	pop	r28
    1aaa:	df 91       	pop	r29
    1aac:	08 95       	ret

00001aae <_proc_prio_control_stoped>:
#ifdef CONFIG_USE_HIGHEST_LOCKER
// Будет использоваться в mutex-ах и т.п., процесс должен сам вызывать эту функцию, при этом он должен быть вырезан из списка выполняющихся.
void _proc_prio_control_stoped( proc_t * proc )
{
    1aae:	df 93       	push	r29
    1ab0:	cf 93       	push	r28
    1ab2:	cd b7       	in	r28, 0x3d	; 61
    1ab4:	de b7       	in	r29, 0x3e	; 62
    1ab6:	27 97       	sbiw	r28, 0x07	; 7
    1ab8:	0f b6       	in	r0, 0x3f	; 63
    1aba:	f8 94       	cli
    1abc:	de bf       	out	0x3e, r29	; 62
    1abe:	0f be       	out	0x3f, r0	; 63
    1ac0:	cd bf       	out	0x3d, r28	; 61
    1ac2:	9b 83       	std	Y+3, r25	; 0x03
    1ac4:	8a 83       	std	Y+2, r24	; 0x02
    if(proc->lres.index != (index_t)0)
    1ac6:	ea 81       	ldd	r30, Y+2	; 0x02
    1ac8:	fb 81       	ldd	r31, Y+3	; 0x03
    1aca:	85 8d       	ldd	r24, Z+29	; 0x1d
    1acc:	88 23       	and	r24, r24
    1ace:	e9 f0       	breq	.+58     	; 0x1b0a <_proc_prio_control_stoped+0x5c>
    {
        prio_t locker_prio = index_search( proc->lres.index );
    1ad0:	ea 81       	ldd	r30, Y+2	; 0x02
    1ad2:	fb 81       	ldd	r31, Y+3	; 0x03
    1ad4:	85 8d       	ldd	r24, Z+29	; 0x1d
    1ad6:	0e 94 cd 08 	call	0x119a	; 0x119a <index_search>
    1ada:	89 83       	std	Y+1, r24	; 0x01
        ((gitem_t *)proc)->group->prio = ( locker_prio < proc->base_prio )?locker_prio:proc->base_prio;
    1adc:	ea 81       	ldd	r30, Y+2	; 0x02
    1ade:	fb 81       	ldd	r31, Y+3	; 0x03
    1ae0:	84 81       	ldd	r24, Z+4	; 0x04
    1ae2:	95 81       	ldd	r25, Z+5	; 0x05
    1ae4:	9e 83       	std	Y+6, r25	; 0x06
    1ae6:	8d 83       	std	Y+5, r24	; 0x05
    1ae8:	ea 81       	ldd	r30, Y+2	; 0x02
    1aea:	fb 81       	ldd	r31, Y+3	; 0x03
    1aec:	84 85       	ldd	r24, Z+12	; 0x0c
    1aee:	99 81       	ldd	r25, Y+1	; 0x01
    1af0:	9f 83       	std	Y+7, r25	; 0x07
    1af2:	8c 83       	std	Y+4, r24	; 0x04
    1af4:	ec 81       	ldd	r30, Y+4	; 0x04
    1af6:	ff 81       	ldd	r31, Y+7	; 0x07
    1af8:	fe 17       	cp	r31, r30
    1afa:	10 f4       	brcc	.+4      	; 0x1b00 <_proc_prio_control_stoped+0x52>
    1afc:	8f 81       	ldd	r24, Y+7	; 0x07
    1afe:	8c 83       	std	Y+4, r24	; 0x04
    1b00:	8c 81       	ldd	r24, Y+4	; 0x04
    1b02:	ed 81       	ldd	r30, Y+5	; 0x05
    1b04:	fe 81       	ldd	r31, Y+6	; 0x06
    1b06:	82 83       	std	Z+2, r24	; 0x02
    1b08:	0a c0       	rjmp	.+20     	; 0x1b1e <_proc_prio_control_stoped+0x70>
    }
    else
    {
        ((gitem_t *)proc)->group->prio = proc->base_prio;
    1b0a:	ea 81       	ldd	r30, Y+2	; 0x02
    1b0c:	fb 81       	ldd	r31, Y+3	; 0x03
    1b0e:	a4 81       	ldd	r26, Z+4	; 0x04
    1b10:	b5 81       	ldd	r27, Z+5	; 0x05
    1b12:	ea 81       	ldd	r30, Y+2	; 0x02
    1b14:	fb 81       	ldd	r31, Y+3	; 0x03
    1b16:	84 85       	ldd	r24, Z+12	; 0x0c
    1b18:	12 96       	adiw	r26, 0x02	; 2
    1b1a:	8c 93       	st	X, r24
    1b1c:	12 97       	sbiw	r26, 0x02	; 2
    }
}
    1b1e:	27 96       	adiw	r28, 0x07	; 7
    1b20:	0f b6       	in	r0, 0x3f	; 63
    1b22:	f8 94       	cli
    1b24:	de bf       	out	0x3e, r29	; 62
    1b26:	0f be       	out	0x3f, r0	; 63
    1b28:	cd bf       	out	0x3d, r28	; 61
    1b2a:	cf 91       	pop	r28
    1b2c:	df 91       	pop	r29
    1b2e:	08 95       	ret

00001b30 <_proc_prio_control_running>:
void _proc_prio_control_running( proc_t * proc )
{
    1b30:	df 93       	push	r29
    1b32:	cf 93       	push	r28
    1b34:	00 d0       	rcall	.+0      	; 0x1b36 <_proc_prio_control_running+0x6>
    1b36:	00 d0       	rcall	.+0      	; 0x1b38 <_proc_prio_control_running+0x8>
    1b38:	00 d0       	rcall	.+0      	; 0x1b3a <_proc_prio_control_running+0xa>
    1b3a:	cd b7       	in	r28, 0x3d	; 61
    1b3c:	de b7       	in	r29, 0x3e	; 62
    1b3e:	9c 83       	std	Y+4, r25	; 0x04
    1b40:	8b 83       	std	Y+3, r24	; 0x03
    prio_t new_prio;
    if(proc->lres.index != (index_t)0)
    1b42:	eb 81       	ldd	r30, Y+3	; 0x03
    1b44:	fc 81       	ldd	r31, Y+4	; 0x04
    1b46:	85 8d       	ldd	r24, Z+29	; 0x1d
    1b48:	88 23       	and	r24, r24
    1b4a:	a9 f0       	breq	.+42     	; 0x1b76 <_proc_prio_control_running+0x46>
    {
        prio_t locker_prio = index_search( proc->lres.index );
    1b4c:	eb 81       	ldd	r30, Y+3	; 0x03
    1b4e:	fc 81       	ldd	r31, Y+4	; 0x04
    1b50:	85 8d       	ldd	r24, Z+29	; 0x1d
    1b52:	0e 94 cd 08 	call	0x119a	; 0x119a <index_search>
    1b56:	89 83       	std	Y+1, r24	; 0x01
        new_prio = ( locker_prio < proc->base_prio )?locker_prio:proc->base_prio;
    1b58:	eb 81       	ldd	r30, Y+3	; 0x03
    1b5a:	fc 81       	ldd	r31, Y+4	; 0x04
    1b5c:	84 85       	ldd	r24, Z+12	; 0x0c
    1b5e:	99 81       	ldd	r25, Y+1	; 0x01
    1b60:	9e 83       	std	Y+6, r25	; 0x06
    1b62:	8d 83       	std	Y+5, r24	; 0x05
    1b64:	8d 81       	ldd	r24, Y+5	; 0x05
    1b66:	9e 81       	ldd	r25, Y+6	; 0x06
    1b68:	98 17       	cp	r25, r24
    1b6a:	10 f4       	brcc	.+4      	; 0x1b70 <_proc_prio_control_running+0x40>
    1b6c:	8e 81       	ldd	r24, Y+6	; 0x06
    1b6e:	8d 83       	std	Y+5, r24	; 0x05
    1b70:	9d 81       	ldd	r25, Y+5	; 0x05
    1b72:	9a 83       	std	Y+2, r25	; 0x02
    1b74:	04 c0       	rjmp	.+8      	; 0x1b7e <_proc_prio_control_running+0x4e>
    }
    else
    {
        new_prio = proc->base_prio;
    1b76:	eb 81       	ldd	r30, Y+3	; 0x03
    1b78:	fc 81       	ldd	r31, Y+4	; 0x04
    1b7a:	84 85       	ldd	r24, Z+12	; 0x0c
    1b7c:	8a 83       	std	Y+2, r24	; 0x02
    }
    if(((gitem_t *)proc)->group->prio != new_prio)
    1b7e:	eb 81       	ldd	r30, Y+3	; 0x03
    1b80:	fc 81       	ldd	r31, Y+4	; 0x04
    1b82:	04 80       	ldd	r0, Z+4	; 0x04
    1b84:	f5 81       	ldd	r31, Z+5	; 0x05
    1b86:	e0 2d       	mov	r30, r0
    1b88:	92 81       	ldd	r25, Z+2	; 0x02
    1b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8c:	98 17       	cp	r25, r24
    1b8e:	b1 f0       	breq	.+44     	; 0x1bbc <_proc_prio_control_running+0x8c>
    {
        _proc_stop_( proc );
    1b90:	8b 81       	ldd	r24, Y+3	; 0x03
    1b92:	9c 81       	ldd	r25, Y+4	; 0x04
    1b94:	0e 94 a9 07 	call	0xf52	; 0xf52 <gitem_cut>
        ((gitem_t *)proc)->group->prio = new_prio;
    1b98:	eb 81       	ldd	r30, Y+3	; 0x03
    1b9a:	fc 81       	ldd	r31, Y+4	; 0x04
    1b9c:	04 80       	ldd	r0, Z+4	; 0x04
    1b9e:	f5 81       	ldd	r31, Z+5	; 0x05
    1ba0:	e0 2d       	mov	r30, r0
    1ba2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba4:	82 83       	std	Z+2, r24	; 0x02
#ifdef CONFIG_MP
        spin_lock( &kernel.stat_lock );
        stat_inc( proc, (stat_t *)kernel.stat+proc->core_id );
        spin_unlock( &kernel.stat_lock );
#endif
        _proc_run_( proc );
    1ba6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba8:	9c 81       	ldd	r25, Y+4	; 0x04
    1baa:	20 91 1a 01 	lds	r18, 0x011A
    1bae:	30 91 1b 01 	lds	r19, 0x011B
    1bb2:	b9 01       	movw	r22, r18
    1bb4:	0e 94 4c 06 	call	0xc98	; 0xc98 <gitem_insert>
#ifdef CONFIG_MP
        resched(proc->core_id);
#else
        resched();
    1bb8:	0e 94 fe 00 	call	0x1fc	; 0x1fc <resched>
#endif
    }
}
    1bbc:	26 96       	adiw	r28, 0x06	; 6
    1bbe:	0f b6       	in	r0, 0x3f	; 63
    1bc0:	f8 94       	cli
    1bc2:	de bf       	out	0x3e, r29	; 62
    1bc4:	0f be       	out	0x3f, r0	; 63
    1bc6:	cd bf       	out	0x3d, r28	; 61
    1bc8:	cf 91       	pop	r28
    1bca:	df 91       	pop	r29
    1bcc:	08 95       	ret

00001bce <sched_init>:
*****************************************************************************************/
#include "../include/bugurt.h"
///========================================================================================
// Инициация
void sched_init(sched_t * sched, proc_t * idle)
{
    1bce:	df 93       	push	r29
    1bd0:	cf 93       	push	r28
    1bd2:	00 d0       	rcall	.+0      	; 0x1bd4 <sched_init+0x6>
    1bd4:	00 d0       	rcall	.+0      	; 0x1bd6 <sched_init+0x8>
    1bd6:	cd b7       	in	r28, 0x3d	; 61
    1bd8:	de b7       	in	r29, 0x3e	; 62
    1bda:	9a 83       	std	Y+2, r25	; 0x02
    1bdc:	89 83       	std	Y+1, r24	; 0x01
    1bde:	7c 83       	std	Y+4, r23	; 0x04
    1be0:	6b 83       	std	Y+3, r22	; 0x03
#ifdef CONFIG_MP
    lock_t * sched_lock = &sched->lock;
    spin_init( sched_lock );
    spin_lock( sched_lock );
#endif // CONFIG_MP
    sched->ready = (xlist_t *)sched->plst;
    1be2:	89 81       	ldd	r24, Y+1	; 0x01
    1be4:	9a 81       	ldd	r25, Y+2	; 0x02
    1be6:	06 96       	adiw	r24, 0x06	; 6
    1be8:	e9 81       	ldd	r30, Y+1	; 0x01
    1bea:	fa 81       	ldd	r31, Y+2	; 0x02
    1bec:	93 83       	std	Z+3, r25	; 0x03
    1bee:	82 83       	std	Z+2, r24	; 0x02
    xlist_init( sched->ready );
    1bf0:	e9 81       	ldd	r30, Y+1	; 0x01
    1bf2:	fa 81       	ldd	r31, Y+2	; 0x02
    1bf4:	82 81       	ldd	r24, Z+2	; 0x02
    1bf6:	93 81       	ldd	r25, Z+3	; 0x03
    1bf8:	0e 94 a0 10 	call	0x2140	; 0x2140 <xlist_init>
    sched->expired = (xlist_t *)sched->plst + 1;
    1bfc:	89 81       	ldd	r24, Y+1	; 0x01
    1bfe:	9a 81       	ldd	r25, Y+2	; 0x02
    1c00:	47 96       	adiw	r24, 0x17	; 23
    1c02:	e9 81       	ldd	r30, Y+1	; 0x01
    1c04:	fa 81       	ldd	r31, Y+2	; 0x02
    1c06:	95 83       	std	Z+5, r25	; 0x05
    1c08:	84 83       	std	Z+4, r24	; 0x04
    xlist_init( sched->expired );
    1c0a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c0c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c0e:	84 81       	ldd	r24, Z+4	; 0x04
    1c10:	95 81       	ldd	r25, Z+5	; 0x05
    1c12:	0e 94 a0 10 	call	0x2140	; 0x2140 <xlist_init>
    gitem_insert( (gitem_t *)idle, sched->ready );
    1c16:	8b 81       	ldd	r24, Y+3	; 0x03
    1c18:	9c 81       	ldd	r25, Y+4	; 0x04
    1c1a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c1c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c1e:	22 81       	ldd	r18, Z+2	; 0x02
    1c20:	33 81       	ldd	r19, Z+3	; 0x03
    1c22:	b9 01       	movw	r22, r18
    1c24:	0e 94 4c 06 	call	0xc98	; 0xc98 <gitem_insert>
    sched->current_proc = idle;
    1c28:	e9 81       	ldd	r30, Y+1	; 0x01
    1c2a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c30:	91 83       	std	Z+1, r25	; 0x01
    1c32:	80 83       	st	Z, r24
    sched->nested_crit_sec = (count_t)0;//вообще это выполняется при запрещенных прерываниях, но не известно, на этом ли процессоре
    1c34:	e9 81       	ldd	r30, Y+1	; 0x01
    1c36:	fa 81       	ldd	r31, Y+2	; 0x02
    1c38:	11 a6       	std	Z+41, r1	; 0x29
    1c3a:	10 a6       	std	Z+40, r1	; 0x28
#ifdef CONFIG_MP
    spin_unlock( sched_lock );
    stat_inc( idle, (stat_t *)kernel.stat + idle->core_id );
#endif // CONFIG_MP
}
    1c3c:	0f 90       	pop	r0
    1c3e:	0f 90       	pop	r0
    1c40:	0f 90       	pop	r0
    1c42:	0f 90       	pop	r0
    1c44:	cf 91       	pop	r28
    1c46:	df 91       	pop	r29
    1c48:	08 95       	ret

00001c4a <_sched_list_switch>:
static void _sched_list_switch( sched_t * sched )
{
    1c4a:	df 93       	push	r29
    1c4c:	cf 93       	push	r28
    1c4e:	00 d0       	rcall	.+0      	; 0x1c50 <_sched_list_switch+0x6>
    1c50:	00 d0       	rcall	.+0      	; 0x1c52 <_sched_list_switch+0x8>
    1c52:	cd b7       	in	r28, 0x3d	; 61
    1c54:	de b7       	in	r29, 0x3e	; 62
    1c56:	9c 83       	std	Y+4, r25	; 0x04
    1c58:	8b 83       	std	Y+3, r24	; 0x03
    // Список ready опустел, переключаем списки
    if( sched->ready->index == (index_t)0 )
    1c5a:	eb 81       	ldd	r30, Y+3	; 0x03
    1c5c:	fc 81       	ldd	r31, Y+4	; 0x04
    1c5e:	02 80       	ldd	r0, Z+2	; 0x02
    1c60:	f3 81       	ldd	r31, Z+3	; 0x03
    1c62:	e0 2d       	mov	r30, r0
    1c64:	80 89       	ldd	r24, Z+16	; 0x10
    1c66:	88 23       	and	r24, r24
    1c68:	a1 f4       	brne	.+40     	; 0x1c92 <_sched_list_switch+0x48>
    {
        xlist_t * buf = sched->ready;
    1c6a:	eb 81       	ldd	r30, Y+3	; 0x03
    1c6c:	fc 81       	ldd	r31, Y+4	; 0x04
    1c6e:	82 81       	ldd	r24, Z+2	; 0x02
    1c70:	93 81       	ldd	r25, Z+3	; 0x03
    1c72:	9a 83       	std	Y+2, r25	; 0x02
    1c74:	89 83       	std	Y+1, r24	; 0x01
        sched->ready = sched->expired;
    1c76:	eb 81       	ldd	r30, Y+3	; 0x03
    1c78:	fc 81       	ldd	r31, Y+4	; 0x04
    1c7a:	84 81       	ldd	r24, Z+4	; 0x04
    1c7c:	95 81       	ldd	r25, Z+5	; 0x05
    1c7e:	eb 81       	ldd	r30, Y+3	; 0x03
    1c80:	fc 81       	ldd	r31, Y+4	; 0x04
    1c82:	93 83       	std	Z+3, r25	; 0x03
    1c84:	82 83       	std	Z+2, r24	; 0x02
        sched->expired = buf;
    1c86:	eb 81       	ldd	r30, Y+3	; 0x03
    1c88:	fc 81       	ldd	r31, Y+4	; 0x04
    1c8a:	89 81       	ldd	r24, Y+1	; 0x01
    1c8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c8e:	95 83       	std	Z+5, r25	; 0x05
    1c90:	84 83       	std	Z+4, r24	; 0x04
    }
}
    1c92:	0f 90       	pop	r0
    1c94:	0f 90       	pop	r0
    1c96:	0f 90       	pop	r0
    1c98:	0f 90       	pop	r0
    1c9a:	cf 91       	pop	r28
    1c9c:	df 91       	pop	r29
    1c9e:	08 95       	ret

00001ca0 <sched_schedule>:
                    sched_t * sched
#else
                    void
#endif // CONFIG_MP
                    )
{
    1ca0:	df 93       	push	r29
    1ca2:	cf 93       	push	r28
    1ca4:	00 d0       	rcall	.+0      	; 0x1ca6 <sched_schedule+0x6>
    1ca6:	00 d0       	rcall	.+0      	; 0x1ca8 <sched_schedule+0x8>
    1ca8:	0f 92       	push	r0
    1caa:	cd b7       	in	r28, 0x3d	; 61
    1cac:	de b7       	in	r29, 0x3e	; 62
#ifndef CONFIG_MP
    sched_t * sched = (sched_t *)&kernel.sched;
    1cae:	88 e1       	ldi	r24, 0x18	; 24
    1cb0:	91 e0       	ldi	r25, 0x01	; 1
    1cb2:	9d 83       	std	Y+5, r25	; 0x05
    1cb4:	8c 83       	std	Y+4, r24	; 0x04
#endif // nCONFIG_MP
    // Меняем только с локального процессора, блокировку sched->lock можно не захватывать!
    proc_t * current_proc = sched->current_proc;
    1cb6:	ec 81       	ldd	r30, Y+4	; 0x04
    1cb8:	fd 81       	ldd	r31, Y+5	; 0x05
    1cba:	80 81       	ld	r24, Z
    1cbc:	91 81       	ldd	r25, Z+1	; 0x01
    1cbe:	9b 83       	std	Y+3, r25	; 0x03
    1cc0:	8a 83       	std	Y+2, r24	; 0x02
#ifdef CONFIG_MP
    // А вот эту блокировку обязательно надо захватить!
    spin_lock( &current_proc->lock );
#endif // CONFIG_MP
    // Хук "сохранение контекста"
    if( current_proc->sv_hook )current_proc->sv_hook( current_proc->arg );
    1cc2:	ea 81       	ldd	r30, Y+2	; 0x02
    1cc4:	fb 81       	ldd	r31, Y+3	; 0x03
    1cc6:	84 a1       	ldd	r24, Z+36	; 0x24
    1cc8:	95 a1       	ldd	r25, Z+37	; 0x25
    1cca:	00 97       	sbiw	r24, 0x00	; 0
    1ccc:	51 f0       	breq	.+20     	; 0x1ce2 <sched_schedule+0x42>
    1cce:	ea 81       	ldd	r30, Y+2	; 0x02
    1cd0:	fb 81       	ldd	r31, Y+3	; 0x03
    1cd2:	24 a1       	ldd	r18, Z+36	; 0x24
    1cd4:	35 a1       	ldd	r19, Z+37	; 0x25
    1cd6:	ea 81       	ldd	r30, Y+2	; 0x02
    1cd8:	fb 81       	ldd	r31, Y+3	; 0x03
    1cda:	80 a5       	ldd	r24, Z+40	; 0x28
    1cdc:	91 a5       	ldd	r25, Z+41	; 0x29
    1cde:	f9 01       	movw	r30, r18
    1ce0:	09 95       	icall
    // Проверяем, что процесс находится в списке ready
    if( (xlist_t *)((gitem_t *)current_proc)->group->link == sched->ready )
    1ce2:	ea 81       	ldd	r30, Y+2	; 0x02
    1ce4:	fb 81       	ldd	r31, Y+3	; 0x03
    1ce6:	04 80       	ldd	r0, Z+4	; 0x04
    1ce8:	f5 81       	ldd	r31, Z+5	; 0x05
    1cea:	e0 2d       	mov	r30, r0
    1cec:	80 81       	ld	r24, Z
    1cee:	91 81       	ldd	r25, Z+1	; 0x01
    1cf0:	9c 01       	movw	r18, r24
    1cf2:	ec 81       	ldd	r30, Y+4	; 0x04
    1cf4:	fd 81       	ldd	r31, Y+5	; 0x05
    1cf6:	82 81       	ldd	r24, Z+2	; 0x02
    1cf8:	93 81       	ldd	r25, Z+3	; 0x03
    1cfa:	28 17       	cp	r18, r24
    1cfc:	39 07       	cpc	r19, r25
    1cfe:	09 f0       	breq	.+2      	; 0x1d02 <sched_schedule+0x62>
    1d00:	4d c0       	rjmp	.+154    	; 0x1d9c <sched_schedule+0xfc>
    {
        // Переключаем cписок на следующий за текущим процесс
#ifdef CONFIG_MP
        spin_lock( &sched->lock );
#endif // CONFIG_MP
        xlist_switch( sched->ready, ((gitem_t *)current_proc)->group->prio );
    1d02:	ec 81       	ldd	r30, Y+4	; 0x04
    1d04:	fd 81       	ldd	r31, Y+5	; 0x05
    1d06:	82 81       	ldd	r24, Z+2	; 0x02
    1d08:	93 81       	ldd	r25, Z+3	; 0x03
    1d0a:	ea 81       	ldd	r30, Y+2	; 0x02
    1d0c:	fb 81       	ldd	r31, Y+3	; 0x03
    1d0e:	04 80       	ldd	r0, Z+4	; 0x04
    1d10:	f5 81       	ldd	r31, Z+5	; 0x05
    1d12:	e0 2d       	mov	r30, r0
    1d14:	22 81       	ldd	r18, Z+2	; 0x02
    1d16:	62 2f       	mov	r22, r18
    1d18:	0e 94 f6 10 	call	0x21ec	; 0x21ec <xlist_switch>
#ifdef CONFIG_MP
        spin_unlock( &sched->lock );
#endif // CONFIG_MP
        //Проверяем, не истек ли квант времени процесса
        if( current_proc->timer > (timer_t)1 )current_proc->timer--;// Не истек, уменьшаем таймер
    1d1c:	ea 81       	ldd	r30, Y+2	; 0x02
    1d1e:	fb 81       	ldd	r31, Y+3	; 0x03
    1d20:	80 a1       	ldd	r24, Z+32	; 0x20
    1d22:	91 a1       	ldd	r25, Z+33	; 0x21
    1d24:	82 30       	cpi	r24, 0x02	; 2
    1d26:	91 05       	cpc	r25, r1
    1d28:	50 f0       	brcs	.+20     	; 0x1d3e <sched_schedule+0x9e>
    1d2a:	ea 81       	ldd	r30, Y+2	; 0x02
    1d2c:	fb 81       	ldd	r31, Y+3	; 0x03
    1d2e:	80 a1       	ldd	r24, Z+32	; 0x20
    1d30:	91 a1       	ldd	r25, Z+33	; 0x21
    1d32:	01 97       	sbiw	r24, 0x01	; 1
    1d34:	ea 81       	ldd	r30, Y+2	; 0x02
    1d36:	fb 81       	ldd	r31, Y+3	; 0x03
    1d38:	91 a3       	std	Z+33, r25	; 0x21
    1d3a:	80 a3       	std	Z+32, r24	; 0x20
    1d3c:	2f c0       	rjmp	.+94     	; 0x1d9c <sched_schedule+0xfc>
        {
            // Истек, вырезаем процесс из списка
#ifdef CONFIG_MP
            spin_lock( &sched->lock );
#endif // CONFIG_MP
            gitem_fast_cut( (gitem_t *)current_proc );
    1d3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d40:	9b 81       	ldd	r25, Y+3	; 0x03
    1d42:	0e 94 23 07 	call	0xe46	; 0xe46 <gitem_fast_cut>
            // Обновили статистику после удаления процесса из списка ready
            stat_dec( current_proc, (stat_t *)kernel.stat + current_proc->core_id );
#endif // CONFIG_USE_ALB
#endif // CONFIG_MP
            // А что за процесс собственно?
            flag_t flags = current_proc->flags;
    1d46:	ea 81       	ldd	r30, Y+2	; 0x02
    1d48:	fb 81       	ldd	r31, Y+3	; 0x03
    1d4a:	83 85       	ldd	r24, Z+11	; 0x0b
    1d4c:	89 83       	std	Y+1, r24	; 0x01
            if(
                (!(flags & PROC_FLG_RT))
    1d4e:	89 81       	ldd	r24, Y+1	; 0x01
    1d50:	88 2f       	mov	r24, r24
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	81 70       	andi	r24, 0x01	; 1
    1d56:	90 70       	andi	r25, 0x00	; 0
            stat_dec( current_proc, (stat_t *)kernel.stat + current_proc->core_id );
#endif // CONFIG_USE_ALB
#endif // CONFIG_MP
            // А что за процесс собственно?
            flag_t flags = current_proc->flags;
            if(
    1d58:	00 97       	sbiw	r24, 0x00	; 0
    1d5a:	91 f4       	brne	.+36     	; 0x1d80 <sched_schedule+0xe0>
                ||(flags & PROC_FLG_HOLD)
#endif // CONFIG_HARD_RT
            )
            {
                //Процесс общего назначения, либо он удерживает общий ресурс, сбрасываем таймер и переносим в очередь expired
                current_proc->timer = current_proc->time_quant;
    1d5c:	ea 81       	ldd	r30, Y+2	; 0x02
    1d5e:	fb 81       	ldd	r31, Y+3	; 0x03
    1d60:	86 8d       	ldd	r24, Z+30	; 0x1e
    1d62:	97 8d       	ldd	r25, Z+31	; 0x1f
    1d64:	ea 81       	ldd	r30, Y+2	; 0x02
    1d66:	fb 81       	ldd	r31, Y+3	; 0x03
    1d68:	91 a3       	std	Z+33, r25	; 0x21
    1d6a:	80 a3       	std	Z+32, r24	; 0x20
#else // CONFIG_MP CONFIG_USE_ALB
                // Тупо переносим процесс в список expired
#ifdef CONFIG_MP
                spin_lock( &sched->lock );
#endif // CONFIG_MP
                gitem_insert( (gitem_t *)current_proc, sched->expired );
    1d6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d70:	ec 81       	ldd	r30, Y+4	; 0x04
    1d72:	fd 81       	ldd	r31, Y+5	; 0x05
    1d74:	24 81       	ldd	r18, Z+4	; 0x04
    1d76:	35 81       	ldd	r19, Z+5	; 0x05
    1d78:	b9 01       	movw	r22, r18
    1d7a:	0e 94 4c 06 	call	0xc98	; 0xc98 <gitem_insert>
    1d7e:	0e c0       	rjmp	.+28     	; 0x1d9c <sched_schedule+0xfc>
                spin_lock( &kernel.stat_lock );
                stat_dec( current_proc, (stat_t *)kernel.stat + current_proc->core_id );
#endif // nCONFIG_USE_ALB
                spin_unlock( &kernel.stat_lock );
#endif // CONFIG_MP
                ((gitem_t *)current_proc)->group->link = (void *)0;// Просто вырезали из списка, как в gitem_cut
    1d80:	ea 81       	ldd	r30, Y+2	; 0x02
    1d82:	fb 81       	ldd	r31, Y+3	; 0x03
    1d84:	04 80       	ldd	r0, Z+4	; 0x04
    1d86:	f5 81       	ldd	r31, Z+5	; 0x05
    1d88:	e0 2d       	mov	r30, r0
    1d8a:	11 82       	std	Z+1, r1	; 0x01
    1d8c:	10 82       	st	Z, r1
                current_proc->flags &= ~PROC_FLG_RUN;
    1d8e:	ea 81       	ldd	r30, Y+2	; 0x02
    1d90:	fb 81       	ldd	r31, Y+3	; 0x03
    1d92:	83 85       	ldd	r24, Z+11	; 0x0b
    1d94:	8d 7f       	andi	r24, 0xFD	; 253
    1d96:	ea 81       	ldd	r30, Y+2	; 0x02
    1d98:	fb 81       	ldd	r31, Y+3	; 0x03
    1d9a:	83 87       	std	Z+11, r24	; 0x0b
#ifdef CONFIG_MP
    //Текущий процесс более не нужен, освобождаем его блокировку
    spin_unlock( &current_proc->lock );
    spin_lock( &sched->lock );
#endif // CONFIG_MP
    _sched_list_switch( sched );
    1d9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d9e:	9d 81       	ldd	r25, Y+5	; 0x05
    1da0:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <_sched_list_switch>
    // Изменять указатель будем при захваченной блокировке,
    // чтобы процессы на других процессорах не прочитали неизвестно что.
    current_proc = (proc_t *)xlist_head( sched->ready ); // Вытесняющая многозадачность же!
    1da4:	ec 81       	ldd	r30, Y+4	; 0x04
    1da6:	fd 81       	ldd	r31, Y+5	; 0x05
    1da8:	82 81       	ldd	r24, Z+2	; 0x02
    1daa:	93 81       	ldd	r25, Z+3	; 0x03
    1dac:	0e 94 ca 10 	call	0x2194	; 0x2194 <xlist_head>
    1db0:	9b 83       	std	Y+3, r25	; 0x03
    1db2:	8a 83       	std	Y+2, r24	; 0x02
    sched->current_proc = current_proc;
    1db4:	ec 81       	ldd	r30, Y+4	; 0x04
    1db6:	fd 81       	ldd	r31, Y+5	; 0x05
    1db8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dba:	9b 81       	ldd	r25, Y+3	; 0x03
    1dbc:	91 83       	std	Z+1, r25	; 0x01
    1dbe:	80 83       	st	Z, r24
#ifdef CONFIG_MP
    spin_unlock( &sched->lock );
    spin_lock( &current_proc->lock );
#endif // CONFIG_MP
    //Хук "восстановление контекста"
    if( current_proc->rs_hook )current_proc->rs_hook( current_proc->arg );
    1dc0:	ea 81       	ldd	r30, Y+2	; 0x02
    1dc2:	fb 81       	ldd	r31, Y+3	; 0x03
    1dc4:	86 a1       	ldd	r24, Z+38	; 0x26
    1dc6:	97 a1       	ldd	r25, Z+39	; 0x27
    1dc8:	00 97       	sbiw	r24, 0x00	; 0
    1dca:	51 f0       	breq	.+20     	; 0x1de0 <sched_schedule+0x140>
    1dcc:	ea 81       	ldd	r30, Y+2	; 0x02
    1dce:	fb 81       	ldd	r31, Y+3	; 0x03
    1dd0:	26 a1       	ldd	r18, Z+38	; 0x26
    1dd2:	37 a1       	ldd	r19, Z+39	; 0x27
    1dd4:	ea 81       	ldd	r30, Y+2	; 0x02
    1dd6:	fb 81       	ldd	r31, Y+3	; 0x03
    1dd8:	80 a5       	ldd	r24, Z+40	; 0x28
    1dda:	91 a5       	ldd	r25, Z+41	; 0x29
    1ddc:	f9 01       	movw	r30, r18
    1dde:	09 95       	icall
#ifdef CONFIG_MP
    spin_unlock( &current_proc->lock );
#endif // CONFIG_MP
}
    1de0:	0f 90       	pop	r0
    1de2:	0f 90       	pop	r0
    1de4:	0f 90       	pop	r0
    1de6:	0f 90       	pop	r0
    1de8:	0f 90       	pop	r0
    1dea:	cf 91       	pop	r28
    1dec:	df 91       	pop	r29
    1dee:	08 95       	ret

00001df0 <sched_reschedule>:
                        sched_t * sched
#else
                        void
#endif // CONFIG_MP
                       )
{
    1df0:	df 93       	push	r29
    1df2:	cf 93       	push	r28
    1df4:	00 d0       	rcall	.+0      	; 0x1df6 <sched_reschedule+0x6>
    1df6:	00 d0       	rcall	.+0      	; 0x1df8 <sched_reschedule+0x8>
    1df8:	cd b7       	in	r28, 0x3d	; 61
    1dfa:	de b7       	in	r29, 0x3e	; 62
#ifndef CONFIG_MP
    sched_t * sched = (sched_t *)&kernel.sched;
    1dfc:	88 e1       	ldi	r24, 0x18	; 24
    1dfe:	91 e0       	ldi	r25, 0x01	; 1
    1e00:	9c 83       	std	Y+4, r25	; 0x04
    1e02:	8b 83       	std	Y+3, r24	; 0x03
#endif // nCONFIG_MP
    // Меняем только с локального процессора, блокировку sched->lock можно не захватывать!
    proc_t * current_proc = sched->current_proc;
    1e04:	eb 81       	ldd	r30, Y+3	; 0x03
    1e06:	fc 81       	ldd	r31, Y+4	; 0x04
    1e08:	80 81       	ld	r24, Z
    1e0a:	91 81       	ldd	r25, Z+1	; 0x01
    1e0c:	9a 83       	std	Y+2, r25	; 0x02
    1e0e:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    // А вот эту блокировку обязательно надо захватить!
    spin_lock( &current_proc->lock );
#endif // CONFIG_MP
    // Хук "сохранение контекста"
    if( current_proc->sv_hook )current_proc->sv_hook( current_proc->arg );
    1e10:	e9 81       	ldd	r30, Y+1	; 0x01
    1e12:	fa 81       	ldd	r31, Y+2	; 0x02
    1e14:	84 a1       	ldd	r24, Z+36	; 0x24
    1e16:	95 a1       	ldd	r25, Z+37	; 0x25
    1e18:	00 97       	sbiw	r24, 0x00	; 0
    1e1a:	51 f0       	breq	.+20     	; 0x1e30 <sched_reschedule+0x40>
    1e1c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e1e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e20:	24 a1       	ldd	r18, Z+36	; 0x24
    1e22:	35 a1       	ldd	r19, Z+37	; 0x25
    1e24:	e9 81       	ldd	r30, Y+1	; 0x01
    1e26:	fa 81       	ldd	r31, Y+2	; 0x02
    1e28:	80 a5       	ldd	r24, Z+40	; 0x28
    1e2a:	91 a5       	ldd	r25, Z+41	; 0x29
    1e2c:	f9 01       	movw	r30, r18
    1e2e:	09 95       	icall
#ifdef CONFIG_MP
    spin_unlock( &current_proc->lock );
    spin_lock( &sched->lock );
#endif // CONFIG_MP
    _sched_list_switch( sched );
    1e30:	8b 81       	ldd	r24, Y+3	; 0x03
    1e32:	9c 81       	ldd	r25, Y+4	; 0x04
    1e34:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <_sched_list_switch>
    current_proc = (proc_t *)xlist_head( sched->ready ); // Вытесняющая многозадачность же!
    1e38:	eb 81       	ldd	r30, Y+3	; 0x03
    1e3a:	fc 81       	ldd	r31, Y+4	; 0x04
    1e3c:	82 81       	ldd	r24, Z+2	; 0x02
    1e3e:	93 81       	ldd	r25, Z+3	; 0x03
    1e40:	0e 94 ca 10 	call	0x2194	; 0x2194 <xlist_head>
    1e44:	9a 83       	std	Y+2, r25	; 0x02
    1e46:	89 83       	std	Y+1, r24	; 0x01
    sched->current_proc = current_proc;
    1e48:	eb 81       	ldd	r30, Y+3	; 0x03
    1e4a:	fc 81       	ldd	r31, Y+4	; 0x04
    1e4c:	89 81       	ldd	r24, Y+1	; 0x01
    1e4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e50:	91 83       	std	Z+1, r25	; 0x01
    1e52:	80 83       	st	Z, r24

#ifdef CONFIG_MP
    spin_lock(&current_proc->lock);
#endif // CONFIG_MP
    //Хук "восстановление контекста"
    if( current_proc->rs_hook )current_proc->rs_hook( current_proc->arg );
    1e54:	e9 81       	ldd	r30, Y+1	; 0x01
    1e56:	fa 81       	ldd	r31, Y+2	; 0x02
    1e58:	86 a1       	ldd	r24, Z+38	; 0x26
    1e5a:	97 a1       	ldd	r25, Z+39	; 0x27
    1e5c:	00 97       	sbiw	r24, 0x00	; 0
    1e5e:	51 f0       	breq	.+20     	; 0x1e74 <sched_reschedule+0x84>
    1e60:	e9 81       	ldd	r30, Y+1	; 0x01
    1e62:	fa 81       	ldd	r31, Y+2	; 0x02
    1e64:	26 a1       	ldd	r18, Z+38	; 0x26
    1e66:	37 a1       	ldd	r19, Z+39	; 0x27
    1e68:	e9 81       	ldd	r30, Y+1	; 0x01
    1e6a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e6c:	80 a5       	ldd	r24, Z+40	; 0x28
    1e6e:	91 a5       	ldd	r25, Z+41	; 0x29
    1e70:	f9 01       	movw	r30, r18
    1e72:	09 95       	icall
#ifdef CONFIG_MP
    spin_unlock( &current_proc->lock );
#endif // CONFIG_MP
}
    1e74:	0f 90       	pop	r0
    1e76:	0f 90       	pop	r0
    1e78:	0f 90       	pop	r0
    1e7a:	0f 90       	pop	r0
    1e7c:	cf 91       	pop	r28
    1e7e:	df 91       	pop	r29
    1e80:	08 95       	ret

00001e82 <sem_init_isr>:
*****************************************************************************************/
#include "../include/bugurt.h"

// Инициализация
void sem_init_isr( sem_t * sem, count_t count )
{
    1e82:	df 93       	push	r29
    1e84:	cf 93       	push	r28
    1e86:	00 d0       	rcall	.+0      	; 0x1e88 <sem_init_isr+0x6>
    1e88:	00 d0       	rcall	.+0      	; 0x1e8a <sem_init_isr+0x8>
    1e8a:	cd b7       	in	r28, 0x3d	; 61
    1e8c:	de b7       	in	r29, 0x3e	; 62
    1e8e:	9a 83       	std	Y+2, r25	; 0x02
    1e90:	89 83       	std	Y+1, r24	; 0x01
    1e92:	7c 83       	std	Y+4, r23	; 0x04
    1e94:	6b 83       	std	Y+3, r22	; 0x03
    xlist_init( (xlist_t *)sem );
    1e96:	89 81       	ldd	r24, Y+1	; 0x01
    1e98:	9a 81       	ldd	r25, Y+2	; 0x02
    1e9a:	0e 94 a0 10 	call	0x2140	; 0x2140 <xlist_init>
    sem->counter = count;
    1e9e:	e9 81       	ldd	r30, Y+1	; 0x01
    1ea0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ea2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea6:	92 8b       	std	Z+18, r25	; 0x12
    1ea8:	81 8b       	std	Z+17, r24	; 0x11
}
    1eaa:	0f 90       	pop	r0
    1eac:	0f 90       	pop	r0
    1eae:	0f 90       	pop	r0
    1eb0:	0f 90       	pop	r0
    1eb2:	cf 91       	pop	r28
    1eb4:	df 91       	pop	r29
    1eb6:	08 95       	ret

00001eb8 <_sem_lock>:

// То же, для внутреннего использования
bool_t _sem_lock( sem_t * sem )
{
    1eb8:	df 93       	push	r29
    1eba:	cf 93       	push	r28
    1ebc:	00 d0       	rcall	.+0      	; 0x1ebe <_sem_lock+0x6>
    1ebe:	00 d0       	rcall	.+0      	; 0x1ec0 <_sem_lock+0x8>
    1ec0:	0f 92       	push	r0
    1ec2:	cd b7       	in	r28, 0x3d	; 61
    1ec4:	de b7       	in	r29, 0x3e	; 62
    1ec6:	9d 83       	std	Y+5, r25	; 0x05
    1ec8:	8c 83       	std	Y+4, r24	; 0x04

    bool_t ret = 0;
    1eca:	1b 82       	std	Y+3, r1	; 0x03
    if( sem->counter != 0 )
    1ecc:	ec 81       	ldd	r30, Y+4	; 0x04
    1ece:	fd 81       	ldd	r31, Y+5	; 0x05
    1ed0:	81 89       	ldd	r24, Z+17	; 0x11
    1ed2:	92 89       	ldd	r25, Z+18	; 0x12
    1ed4:	00 97       	sbiw	r24, 0x00	; 0
    1ed6:	61 f0       	breq	.+24     	; 0x1ef0 <_sem_lock+0x38>
    {
        sem->counter--;
    1ed8:	ec 81       	ldd	r30, Y+4	; 0x04
    1eda:	fd 81       	ldd	r31, Y+5	; 0x05
    1edc:	81 89       	ldd	r24, Z+17	; 0x11
    1ede:	92 89       	ldd	r25, Z+18	; 0x12
    1ee0:	01 97       	sbiw	r24, 0x01	; 1
    1ee2:	ec 81       	ldd	r30, Y+4	; 0x04
    1ee4:	fd 81       	ldd	r31, Y+5	; 0x05
    1ee6:	92 8b       	std	Z+18, r25	; 0x12
    1ee8:	81 8b       	std	Z+17, r24	; 0x11
#ifdef CONFIG_MP
        spin_unlock( &sem->lock );// Освобождение блокировки семафора
#endif //CONFIG_MP
        ret = (bool_t)1;
    1eea:	81 e0       	ldi	r24, 0x01	; 1
    1eec:	8b 83       	std	Y+3, r24	; 0x03
    1eee:	16 c0       	rjmp	.+44     	; 0x1f1c <_sem_lock+0x64>
    }
    else
    {
        proc_t * proc = current_proc();
    1ef0:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <current_proc>
    1ef4:	9a 83       	std	Y+2, r25	; 0x02
    1ef6:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
        spin_lock( &proc->lock );// Захват блокировки процесса
#endif //CONFIG_MP
        proc->flags |= PROC_FLG_QUEUE;
    1ef8:	e9 81       	ldd	r30, Y+1	; 0x01
    1efa:	fa 81       	ldd	r31, Y+2	; 0x02
    1efc:	83 85       	ldd	r24, Z+11	; 0x0b
    1efe:	88 60       	ori	r24, 0x08	; 8
    1f00:	e9 81       	ldd	r30, Y+1	; 0x01
    1f02:	fa 81       	ldd	r31, Y+2	; 0x02
    1f04:	83 87       	std	Z+11, r24	; 0x0b
        _proc_stop( proc );
    1f06:	89 81       	ldd	r24, Y+1	; 0x01
    1f08:	9a 81       	ldd	r25, Y+2	; 0x02
    1f0a:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_proc_stop>
        gitem_insert( (gitem_t *)proc, (xlist_t *)sem );
    1f0e:	89 81       	ldd	r24, Y+1	; 0x01
    1f10:	9a 81       	ldd	r25, Y+2	; 0x02
    1f12:	2c 81       	ldd	r18, Y+4	; 0x04
    1f14:	3d 81       	ldd	r19, Y+5	; 0x05
    1f16:	b9 01       	movw	r22, r18
    1f18:	0e 94 4c 06 	call	0xc98	; 0xc98 <gitem_insert>
#ifdef CONFIG_MP
        spin_unlock( &proc->lock );// Освобождение блокировки процесса
#endif //CONFIG_MP
    }
    return ret;
    1f1c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1f1e:	0f 90       	pop	r0
    1f20:	0f 90       	pop	r0
    1f22:	0f 90       	pop	r0
    1f24:	0f 90       	pop	r0
    1f26:	0f 90       	pop	r0
    1f28:	cf 91       	pop	r28
    1f2a:	df 91       	pop	r29
    1f2c:	08 95       	ret

00001f2e <_sem_unlock>:

void _sem_unlock( sem_t * sem )
{
    1f2e:	df 93       	push	r29
    1f30:	cf 93       	push	r28
    1f32:	00 d0       	rcall	.+0      	; 0x1f34 <_sem_unlock+0x6>
    1f34:	00 d0       	rcall	.+0      	; 0x1f36 <_sem_unlock+0x8>
    1f36:	cd b7       	in	r28, 0x3d	; 61
    1f38:	de b7       	in	r29, 0x3e	; 62
    1f3a:	9c 83       	std	Y+4, r25	; 0x04
    1f3c:	8b 83       	std	Y+3, r24	; 0x03
    if( ((xlist_t *)sem)->index == (index_t)0  )
    1f3e:	eb 81       	ldd	r30, Y+3	; 0x03
    1f40:	fc 81       	ldd	r31, Y+4	; 0x04
    1f42:	80 89       	ldd	r24, Z+16	; 0x10
    1f44:	88 23       	and	r24, r24
    1f46:	51 f4       	brne	.+20     	; 0x1f5c <_sem_unlock+0x2e>
    {
        sem->counter++;
    1f48:	eb 81       	ldd	r30, Y+3	; 0x03
    1f4a:	fc 81       	ldd	r31, Y+4	; 0x04
    1f4c:	81 89       	ldd	r24, Z+17	; 0x11
    1f4e:	92 89       	ldd	r25, Z+18	; 0x12
    1f50:	01 96       	adiw	r24, 0x01	; 1
    1f52:	eb 81       	ldd	r30, Y+3	; 0x03
    1f54:	fc 81       	ldd	r31, Y+4	; 0x04
    1f56:	92 8b       	std	Z+18, r25	; 0x12
    1f58:	81 8b       	std	Z+17, r24	; 0x11
    1f5a:	15 c0       	rjmp	.+42     	; 0x1f86 <_sem_unlock+0x58>
#ifdef CONFIG_MP
        spin_unlock( &sem->lock );
#endif //CONFIG_MP
        return;
    }
    proc_t * proc = (proc_t *)xlist_head((xlist_t *)sem);
    1f5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f60:	0e 94 ca 10 	call	0x2194	; 0x2194 <xlist_head>
    1f64:	9a 83       	std	Y+2, r25	; 0x02
    1f66:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );// Захват спин-блокировки процесса
#endif //CONFIG_MP
    proc->flags &= ~PROC_FLG_QUEUE;
    1f68:	e9 81       	ldd	r30, Y+1	; 0x01
    1f6a:	fa 81       	ldd	r31, Y+2	; 0x02
    1f6c:	83 85       	ldd	r24, Z+11	; 0x0b
    1f6e:	87 7f       	andi	r24, 0xF7	; 247
    1f70:	e9 81       	ldd	r30, Y+1	; 0x01
    1f72:	fa 81       	ldd	r31, Y+2	; 0x02
    1f74:	83 87       	std	Z+11, r24	; 0x0b
    gitem_cut( (gitem_t *)proc );
    1f76:	89 81       	ldd	r24, Y+1	; 0x01
    1f78:	9a 81       	ldd	r25, Y+2	; 0x02
    1f7a:	0e 94 a9 07 	call	0xf52	; 0xf52 <gitem_cut>
    _proc_run( proc );
    1f7e:	89 81       	ldd	r24, Y+1	; 0x01
    1f80:	9a 81       	ldd	r25, Y+2	; 0x02
    1f82:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <_proc_run>
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );// Освобождение спин-блокировки процесса
#endif //CONFIG_MP
}
    1f86:	0f 90       	pop	r0
    1f88:	0f 90       	pop	r0
    1f8a:	0f 90       	pop	r0
    1f8c:	0f 90       	pop	r0
    1f8e:	cf 91       	pop	r28
    1f90:	df 91       	pop	r29
    1f92:	08 95       	ret

00001f94 <sig_init_isr>:
*****************************************************************************************/
#include "../include/bugurt.h"
//========================================================================================
// Инициация
void sig_init_isr( sig_t * sig )
{
    1f94:	df 93       	push	r29
    1f96:	cf 93       	push	r28
    1f98:	00 d0       	rcall	.+0      	; 0x1f9a <sig_init_isr+0x6>
    1f9a:	cd b7       	in	r28, 0x3d	; 61
    1f9c:	de b7       	in	r29, 0x3e	; 62
    1f9e:	9a 83       	std	Y+2, r25	; 0x02
    1fa0:	89 83       	std	Y+1, r24	; 0x01
    {
        xlist_init( (xlist_t *)sig->sig_list + i );
        stat_init( (stat_t *)sig->sig_stat + i );
    }
#else
    xlist_init( (xlist_t *)sig );
    1fa2:	89 81       	ldd	r24, Y+1	; 0x01
    1fa4:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa6:	0e 94 a0 10 	call	0x2140	; 0x2140 <xlist_init>
#endif
}
    1faa:	0f 90       	pop	r0
    1fac:	0f 90       	pop	r0
    1fae:	cf 91       	pop	r28
    1fb0:	df 91       	pop	r29
    1fb2:	08 95       	ret

00001fb4 <sig_wait_stage_1_isr>:
//========================================================================================
// Это выполнится при постановке процесса в список ожидания сигнала
void sig_wait_stage_1_isr( sig_t * sig )
{
    1fb4:	df 93       	push	r29
    1fb6:	cf 93       	push	r28
    1fb8:	00 d0       	rcall	.+0      	; 0x1fba <sig_wait_stage_1_isr+0x6>
    1fba:	00 d0       	rcall	.+0      	; 0x1fbc <sig_wait_stage_1_isr+0x8>
    1fbc:	cd b7       	in	r28, 0x3d	; 61
    1fbe:	de b7       	in	r29, 0x3e	; 62
    1fc0:	9c 83       	std	Y+4, r25	; 0x04
    1fc2:	8b 83       	std	Y+3, r24	; 0x03
#ifdef CONFIG_MP
    spin_lock( &sig->lock );
#endif // CONFIG_MP
    proc_t * proc = current_proc();
    1fc4:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <current_proc>
    1fc8:	9a 83       	std	Y+2, r25	; 0x02
    1fca:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    // Останавливаем процесс
    _proc_stop(proc);
    1fcc:	89 81       	ldd	r24, Y+1	; 0x01
    1fce:	9a 81       	ldd	r25, Y+2	; 0x02
    1fd0:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_proc_stop>
    proc->flags |= PROC_FLG_WAIT;
    1fd4:	e9 81       	ldd	r30, Y+1	; 0x01
    1fd6:	fa 81       	ldd	r31, Y+2	; 0x02
    1fd8:	83 85       	ldd	r24, Z+11	; 0x0b
    1fda:	80 61       	ori	r24, 0x10	; 16
    1fdc:	e9 81       	ldd	r30, Y+1	; 0x01
    1fde:	fa 81       	ldd	r31, Y+2	; 0x02
    1fe0:	83 87       	std	Z+11, r24	; 0x0b
        stat_inc( proc, (stat_t *)sig->sig_stat + sig_core );
    }
    spin_unlock( &proc->lock );
    spin_unlock( &sig->lock );
#else
    gitem_insert_group( (gitem_t *)proc, (xlist_t *)sig );
    1fe2:	89 81       	ldd	r24, Y+1	; 0x01
    1fe4:	9a 81       	ldd	r25, Y+2	; 0x02
    1fe6:	2b 81       	ldd	r18, Y+3	; 0x03
    1fe8:	3c 81       	ldd	r19, Y+4	; 0x04
    1fea:	b9 01       	movw	r22, r18
    1fec:	0e 94 a8 06 	call	0xd50	; 0xd50 <gitem_insert_group>
#endif //CONFIG_MP
}
    1ff0:	0f 90       	pop	r0
    1ff2:	0f 90       	pop	r0
    1ff4:	0f 90       	pop	r0
    1ff6:	0f 90       	pop	r0
    1ff8:	cf 91       	pop	r28
    1ffa:	df 91       	pop	r29
    1ffc:	08 95       	ret

00001ffe <sig_signal_isr>:
    enable_interrupts();
}
//========================================================================================
// Тоже самое что и предыдущие, олько для вызова из обработчиков прерываний и из критических секций
void sig_signal_isr( sig_t * sig )
{
    1ffe:	df 93       	push	r29
    2000:	cf 93       	push	r28
    2002:	00 d0       	rcall	.+0      	; 0x2004 <sig_signal_isr+0x6>
    2004:	00 d0       	rcall	.+0      	; 0x2006 <sig_signal_isr+0x8>
    2006:	cd b7       	in	r28, 0x3d	; 61
    2008:	de b7       	in	r29, 0x3e	; 62
    200a:	9c 83       	std	Y+4, r25	; 0x04
    200c:	8b 83       	std	Y+3, r24	; 0x03
    }
    resched(core);// Перепланировка
    spin_unlock( &proc->lock );// Освобождение блокировки процесса
    spin_unlock( &sig->lock );// Освобождение блокировки сигнала
#else
    if( ((xlist_t *)sig)->index == (index_t)0 )return;
    200e:	eb 81       	ldd	r30, Y+3	; 0x03
    2010:	fc 81       	ldd	r31, Y+4	; 0x04
    2012:	80 89       	ldd	r24, Z+16	; 0x10
    2014:	88 23       	and	r24, r24
    2016:	a9 f0       	breq	.+42     	; 0x2042 <sig_signal_isr+0x44>
    proc_t * proc = (proc_t *)xlist_head( (xlist_t *)sig );
    2018:	8b 81       	ldd	r24, Y+3	; 0x03
    201a:	9c 81       	ldd	r25, Y+4	; 0x04
    201c:	0e 94 ca 10 	call	0x2194	; 0x2194 <xlist_head>
    2020:	9a 83       	std	Y+2, r25	; 0x02
    2022:	89 83       	std	Y+1, r24	; 0x01
    gitem_fast_cut( (gitem_t *)proc );
    2024:	89 81       	ldd	r24, Y+1	; 0x01
    2026:	9a 81       	ldd	r25, Y+2	; 0x02
    2028:	0e 94 23 07 	call	0xe46	; 0xe46 <gitem_fast_cut>
    gitem_insert( (gitem_t *)proc, kernel.sched.ready );
    202c:	89 81       	ldd	r24, Y+1	; 0x01
    202e:	9a 81       	ldd	r25, Y+2	; 0x02
    2030:	20 91 1a 01 	lds	r18, 0x011A
    2034:	30 91 1b 01 	lds	r19, 0x011B
    2038:	b9 01       	movw	r22, r18
    203a:	0e 94 4c 06 	call	0xc98	; 0xc98 <gitem_insert>
    resched();
    203e:	0e 94 fe 00 	call	0x1fc	; 0x1fc <resched>
#endif //CONFIG_MP
}
    2042:	0f 90       	pop	r0
    2044:	0f 90       	pop	r0
    2046:	0f 90       	pop	r0
    2048:	0f 90       	pop	r0
    204a:	cf 91       	pop	r28
    204c:	df 91       	pop	r29
    204e:	08 95       	ret

00002050 <sig_broadcast_isr>:
//----------------------------------------------------------------------------------------
void sig_broadcast_isr( sig_t * sig )
{
    2050:	df 93       	push	r29
    2052:	cf 93       	push	r28
    2054:	00 d0       	rcall	.+0      	; 0x2056 <sig_broadcast_isr+0x6>
    2056:	cd b7       	in	r28, 0x3d	; 61
    2058:	de b7       	in	r29, 0x3e	; 62
    205a:	9a 83       	std	Y+2, r25	; 0x02
    205c:	89 83       	std	Y+1, r24	; 0x01

        resched(core);
    }
    spin_unlock( &sig->lock );
#else
    gitem_xlist_merge( (xlist_t *)sig, kernel.sched.ready );
    205e:	20 91 1a 01 	lds	r18, 0x011A
    2062:	30 91 1b 01 	lds	r19, 0x011B
    2066:	89 81       	ldd	r24, Y+1	; 0x01
    2068:	9a 81       	ldd	r25, Y+2	; 0x02
    206a:	b9 01       	movw	r22, r18
    206c:	0e 94 c0 07 	call	0xf80	; 0xf80 <gitem_xlist_merge>
    resched();
    2070:	0e 94 fe 00 	call	0x1fc	; 0x1fc <resched>
#endif //CONFIG_MP
}
    2074:	0f 90       	pop	r0
    2076:	0f 90       	pop	r0
    2078:	cf 91       	pop	r28
    207a:	df 91       	pop	r29
    207c:	08 95       	ret

0000207e <_clear_timer>:
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
//========================================================================================
void _clear_timer(timer_t * t)
{
    207e:	df 93       	push	r29
    2080:	cf 93       	push	r28
    2082:	00 d0       	rcall	.+0      	; 0x2084 <_clear_timer+0x6>
    2084:	cd b7       	in	r28, 0x3d	; 61
    2086:	de b7       	in	r29, 0x3e	; 62
    2088:	9a 83       	std	Y+2, r25	; 0x02
    208a:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    core_id_t current_core = _enter_crit_sec();
    spin_lock( &kernel.timer_lock );
#else
    enter_crit_sec();
    208c:	0e 94 f6 05 	call	0xbec	; 0xbec <enter_crit_sec>
#endif //CONFIG_MP
    *t = kernel.timer;
    2090:	80 91 72 01 	lds	r24, 0x0172
    2094:	90 91 73 01 	lds	r25, 0x0173
    2098:	e9 81       	ldd	r30, Y+1	; 0x01
    209a:	fa 81       	ldd	r31, Y+2	; 0x02
    209c:	91 83       	std	Z+1, r25	; 0x01
    209e:	80 83       	st	Z, r24
#ifdef CONFIG_MP
    spin_unlock( &kernel.timer_lock );
    _exit_crit_sec(current_core);
#else
    exit_crit_sec();
    20a0:	0e 94 08 06 	call	0xc10	; 0xc10 <exit_crit_sec>
#endif //CONFIG_MP
}
    20a4:	0f 90       	pop	r0
    20a6:	0f 90       	pop	r0
    20a8:	cf 91       	pop	r28
    20aa:	df 91       	pop	r29
    20ac:	08 95       	ret

000020ae <_timer>:
//----------------------------------------------------------------------------------------
timer_t _timer(timer_t t)
{
    20ae:	df 93       	push	r29
    20b0:	cf 93       	push	r28
    20b2:	00 d0       	rcall	.+0      	; 0x20b4 <_timer+0x6>
    20b4:	00 d0       	rcall	.+0      	; 0x20b6 <_timer+0x8>
    20b6:	cd b7       	in	r28, 0x3d	; 61
    20b8:	de b7       	in	r29, 0x3e	; 62
    20ba:	9c 83       	std	Y+4, r25	; 0x04
    20bc:	8b 83       	std	Y+3, r24	; 0x03
    timer_t ret;
#ifdef CONFIG_MP
    core_id_t current_core = _enter_crit_sec();
    spin_lock( &kernel.timer_lock );
#else
    enter_crit_sec();
    20be:	0e 94 f6 05 	call	0xbec	; 0xbec <enter_crit_sec>
#endif //CONFIG_MP
    ret = (timer_t)kernel.timer - (timer_t)t;
    20c2:	20 91 72 01 	lds	r18, 0x0172
    20c6:	30 91 73 01 	lds	r19, 0x0173
    20ca:	8b 81       	ldd	r24, Y+3	; 0x03
    20cc:	9c 81       	ldd	r25, Y+4	; 0x04
    20ce:	a9 01       	movw	r20, r18
    20d0:	48 1b       	sub	r20, r24
    20d2:	59 0b       	sbc	r21, r25
    20d4:	ca 01       	movw	r24, r20
    20d6:	9a 83       	std	Y+2, r25	; 0x02
    20d8:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_unlock( &kernel.timer_lock );
    _exit_crit_sec(current_core);
#else
    exit_crit_sec();
    20da:	0e 94 08 06 	call	0xc10	; 0xc10 <exit_crit_sec>
#endif //CONFIG_MP
    return ret;
    20de:	89 81       	ldd	r24, Y+1	; 0x01
    20e0:	9a 81       	ldd	r25, Y+2	; 0x02
}
    20e2:	0f 90       	pop	r0
    20e4:	0f 90       	pop	r0
    20e6:	0f 90       	pop	r0
    20e8:	0f 90       	pop	r0
    20ea:	cf 91       	pop	r28
    20ec:	df 91       	pop	r29
    20ee:	08 95       	ret

000020f0 <wait_time>:

//----------------------------------------------------------------------------------------
void wait_time(timer_t time)
{
    20f0:	df 93       	push	r29
    20f2:	cf 93       	push	r28
    20f4:	00 d0       	rcall	.+0      	; 0x20f6 <wait_time+0x6>
    20f6:	00 d0       	rcall	.+0      	; 0x20f8 <wait_time+0x8>
    20f8:	0f 92       	push	r0
    20fa:	cd b7       	in	r28, 0x3d	; 61
    20fc:	de b7       	in	r29, 0x3e	; 62
    20fe:	9d 83       	std	Y+5, r25	; 0x05
    2100:	8c 83       	std	Y+4, r24	; 0x04
    timer_t tmr;
    bool_t roll=(bool_t)1;
    2102:	81 e0       	ldi	r24, 0x01	; 1
    2104:	89 83       	std	Y+1, r24	; 0x01
    CLEAR_TIMER(tmr);
    2106:	ce 01       	movw	r24, r28
    2108:	02 96       	adiw	r24, 0x02	; 2
    210a:	0e 94 3f 10 	call	0x207e	; 0x207e <_clear_timer>
    210e:	0d c0       	rjmp	.+26     	; 0x212a <wait_time+0x3a>
    while((bool_t)roll)
    {
        roll = (bool_t)( TIMER(tmr) < (timer_t)time );
    2110:	8a 81       	ldd	r24, Y+2	; 0x02
    2112:	9b 81       	ldd	r25, Y+3	; 0x03
    2114:	0e 94 57 10 	call	0x20ae	; 0x20ae <_timer>
    2118:	9c 01       	movw	r18, r24
    211a:	8c 81       	ldd	r24, Y+4	; 0x04
    211c:	9d 81       	ldd	r25, Y+5	; 0x05
    211e:	19 82       	std	Y+1, r1	; 0x01
    2120:	28 17       	cp	r18, r24
    2122:	39 07       	cpc	r19, r25
    2124:	10 f4       	brcc	.+4      	; 0x212a <wait_time+0x3a>
    2126:	81 e0       	ldi	r24, 0x01	; 1
    2128:	89 83       	std	Y+1, r24	; 0x01
void wait_time(timer_t time)
{
    timer_t tmr;
    bool_t roll=(bool_t)1;
    CLEAR_TIMER(tmr);
    while((bool_t)roll)
    212a:	89 81       	ldd	r24, Y+1	; 0x01
    212c:	88 23       	and	r24, r24
    212e:	81 f7       	brne	.-32     	; 0x2110 <wait_time+0x20>
    {
        roll = (bool_t)( TIMER(tmr) < (timer_t)time );
    }
}
    2130:	0f 90       	pop	r0
    2132:	0f 90       	pop	r0
    2134:	0f 90       	pop	r0
    2136:	0f 90       	pop	r0
    2138:	0f 90       	pop	r0
    213a:	cf 91       	pop	r28
    213c:	df 91       	pop	r29
    213e:	08 95       	ret

00002140 <xlist_init>:
**********************************************/
//Инициация
void xlist_init(
    xlist_t * xlist
)
{
    2140:	df 93       	push	r29
    2142:	cf 93       	push	r28
    2144:	00 d0       	rcall	.+0      	; 0x2146 <xlist_init+0x6>
    2146:	00 d0       	rcall	.+0      	; 0x2148 <xlist_init+0x8>
    2148:	cd b7       	in	r28, 0x3d	; 61
    214a:	de b7       	in	r29, 0x3e	; 62
    214c:	9c 83       	std	Y+4, r25	; 0x04
    214e:	8b 83       	std	Y+3, r24	; 0x03
    count_t i;
    //список пуст
    xlist->index = (index_t)0;
    2150:	eb 81       	ldd	r30, Y+3	; 0x03
    2152:	fc 81       	ldd	r31, Y+4	; 0x04
    2154:	10 8a       	std	Z+16, r1	; 0x10
    //обнуляем указатели
    for( i = 0; i < BITS_IN_INDEX_T; i++ )xlist->item[i] = (item_t *)0;
    2156:	1a 82       	std	Y+2, r1	; 0x02
    2158:	19 82       	std	Y+1, r1	; 0x01
    215a:	10 c0       	rjmp	.+32     	; 0x217c <xlist_init+0x3c>
    215c:	89 81       	ldd	r24, Y+1	; 0x01
    215e:	9a 81       	ldd	r25, Y+2	; 0x02
    2160:	2b 81       	ldd	r18, Y+3	; 0x03
    2162:	3c 81       	ldd	r19, Y+4	; 0x04
    2164:	88 0f       	add	r24, r24
    2166:	99 1f       	adc	r25, r25
    2168:	f9 01       	movw	r30, r18
    216a:	e8 0f       	add	r30, r24
    216c:	f9 1f       	adc	r31, r25
    216e:	11 82       	std	Z+1, r1	; 0x01
    2170:	10 82       	st	Z, r1
    2172:	89 81       	ldd	r24, Y+1	; 0x01
    2174:	9a 81       	ldd	r25, Y+2	; 0x02
    2176:	01 96       	adiw	r24, 0x01	; 1
    2178:	9a 83       	std	Y+2, r25	; 0x02
    217a:	89 83       	std	Y+1, r24	; 0x01
    217c:	89 81       	ldd	r24, Y+1	; 0x01
    217e:	9a 81       	ldd	r25, Y+2	; 0x02
    2180:	88 30       	cpi	r24, 0x08	; 8
    2182:	91 05       	cpc	r25, r1
    2184:	58 f3       	brcs	.-42     	; 0x215c <xlist_init+0x1c>
}
    2186:	0f 90       	pop	r0
    2188:	0f 90       	pop	r0
    218a:	0f 90       	pop	r0
    218c:	0f 90       	pop	r0
    218e:	cf 91       	pop	r28
    2190:	df 91       	pop	r29
    2192:	08 95       	ret

00002194 <xlist_head>:
//===========================================================================
//Поиск головы списка
item_t * xlist_head(xlist_t * xlist)
{
    2194:	df 93       	push	r29
    2196:	cf 93       	push	r28
    2198:	00 d0       	rcall	.+0      	; 0x219a <xlist_head+0x6>
    219a:	00 d0       	rcall	.+0      	; 0x219c <xlist_head+0x8>
    219c:	0f 92       	push	r0
    219e:	cd b7       	in	r28, 0x3d	; 61
    21a0:	de b7       	in	r29, 0x3e	; 62
    21a2:	9d 83       	std	Y+5, r25	; 0x05
    21a4:	8c 83       	std	Y+4, r24	; 0x04
    item_t * ret_val = (item_t *)0;
    21a6:	1b 82       	std	Y+3, r1	; 0x03
    21a8:	1a 82       	std	Y+2, r1	; 0x02
    index_t index = xlist->index;
    21aa:	ec 81       	ldd	r30, Y+4	; 0x04
    21ac:	fd 81       	ldd	r31, Y+5	; 0x05
    21ae:	80 89       	ldd	r24, Z+16	; 0x10
    21b0:	89 83       	std	Y+1, r24	; 0x01

    if( index != (index_t)0 )
    21b2:	89 81       	ldd	r24, Y+1	; 0x01
    21b4:	88 23       	and	r24, r24
    21b6:	81 f0       	breq	.+32     	; 0x21d8 <xlist_head+0x44>
    {
        ret_val = xlist->item[ index_search( index ) ];
    21b8:	89 81       	ldd	r24, Y+1	; 0x01
    21ba:	0e 94 cd 08 	call	0x119a	; 0x119a <index_search>
    21be:	88 2f       	mov	r24, r24
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	2c 81       	ldd	r18, Y+4	; 0x04
    21c4:	3d 81       	ldd	r19, Y+5	; 0x05
    21c6:	88 0f       	add	r24, r24
    21c8:	99 1f       	adc	r25, r25
    21ca:	f9 01       	movw	r30, r18
    21cc:	e8 0f       	add	r30, r24
    21ce:	f9 1f       	adc	r31, r25
    21d0:	80 81       	ld	r24, Z
    21d2:	91 81       	ldd	r25, Z+1	; 0x01
    21d4:	9b 83       	std	Y+3, r25	; 0x03
    21d6:	8a 83       	std	Y+2, r24	; 0x02
    }
    return ret_val;
    21d8:	8a 81       	ldd	r24, Y+2	; 0x02
    21da:	9b 81       	ldd	r25, Y+3	; 0x03
}
    21dc:	0f 90       	pop	r0
    21de:	0f 90       	pop	r0
    21e0:	0f 90       	pop	r0
    21e2:	0f 90       	pop	r0
    21e4:	0f 90       	pop	r0
    21e6:	cf 91       	pop	r28
    21e8:	df 91       	pop	r29
    21ea:	08 95       	ret

000021ec <xlist_switch>:

//===========================================================================
// переключение указателя в массиве на следующий элемент, пригодится в планировщике
void xlist_switch(xlist_t * xlist, prio_t prio)
{
    21ec:	df 93       	push	r29
    21ee:	cf 93       	push	r28
    21f0:	00 d0       	rcall	.+0      	; 0x21f2 <xlist_switch+0x6>
    21f2:	00 d0       	rcall	.+0      	; 0x21f4 <xlist_switch+0x8>
    21f4:	0f 92       	push	r0
    21f6:	cd b7       	in	r28, 0x3d	; 61
    21f8:	de b7       	in	r29, 0x3e	; 62
    21fa:	9c 83       	std	Y+4, r25	; 0x04
    21fc:	8b 83       	std	Y+3, r24	; 0x03
    21fe:	6d 83       	std	Y+5, r22	; 0x05
    item_t ** current = xlist->item + prio;
    2200:	2b 81       	ldd	r18, Y+3	; 0x03
    2202:	3c 81       	ldd	r19, Y+4	; 0x04
    2204:	8d 81       	ldd	r24, Y+5	; 0x05
    2206:	88 2f       	mov	r24, r24
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	88 0f       	add	r24, r24
    220c:	99 1f       	adc	r25, r25
    220e:	82 0f       	add	r24, r18
    2210:	93 1f       	adc	r25, r19
    2212:	9a 83       	std	Y+2, r25	; 0x02
    2214:	89 83       	std	Y+1, r24	; 0x01
    *current = (*current)->next;
    2216:	e9 81       	ldd	r30, Y+1	; 0x01
    2218:	fa 81       	ldd	r31, Y+2	; 0x02
    221a:	01 90       	ld	r0, Z+
    221c:	f0 81       	ld	r31, Z
    221e:	e0 2d       	mov	r30, r0
    2220:	80 81       	ld	r24, Z
    2222:	91 81       	ldd	r25, Z+1	; 0x01
    2224:	e9 81       	ldd	r30, Y+1	; 0x01
    2226:	fa 81       	ldd	r31, Y+2	; 0x02
    2228:	91 83       	std	Z+1, r25	; 0x01
    222a:	80 83       	st	Z, r24
    //*current = (item_t *)*(item_t **)*(item_t ***)current;
}
    222c:	0f 90       	pop	r0
    222e:	0f 90       	pop	r0
    2230:	0f 90       	pop	r0
    2232:	0f 90       	pop	r0
    2234:	0f 90       	pop	r0
    2236:	cf 91       	pop	r28
    2238:	df 91       	pop	r29
    223a:	08 95       	ret

0000223c <raise_syscall_interrupt>:
/*
 */
#include <bugurt.h>

void raise_syscall_interrupt(void)
{
    223c:	df 93       	push	r29
    223e:	cf 93       	push	r28
    2240:	cd b7       	in	r28, 0x3d	; 61
    2242:	de b7       	in	r29, 0x3e	; 62
    R2_on();
    2244:	ab e2       	ldi	r26, 0x2B	; 43
    2246:	b0 e0       	ldi	r27, 0x00	; 0
    2248:	eb e2       	ldi	r30, 0x2B	; 43
    224a:	f0 e0       	ldi	r31, 0x00	; 0
    224c:	80 81       	ld	r24, Z
    224e:	84 60       	ori	r24, 0x04	; 4
    2250:	8c 93       	st	X, r24
    G2_off();
    2252:	ab e2       	ldi	r26, 0x2B	; 43
    2254:	b0 e0       	ldi	r27, 0x00	; 0
    2256:	eb e2       	ldi	r30, 0x2B	; 43
    2258:	f0 e0       	ldi	r31, 0x00	; 0
    225a:	80 81       	ld	r24, Z
    225c:	87 7f       	andi	r24, 0xF7	; 247
    225e:	8c 93       	st	X, r24
    R2_off();
    2260:	ab e2       	ldi	r26, 0x2B	; 43
    2262:	b0 e0       	ldi	r27, 0x00	; 0
    2264:	eb e2       	ldi	r30, 0x2B	; 43
    2266:	f0 e0       	ldi	r31, 0x00	; 0
    2268:	80 81       	ld	r24, Z
    226a:	8b 7f       	andi	r24, 0xFB	; 251
    226c:	8c 93       	st	X, r24
    G2_on();
    226e:	ab e2       	ldi	r26, 0x2B	; 43
    2270:	b0 e0       	ldi	r27, 0x00	; 0
    2272:	eb e2       	ldi	r30, 0x2B	; 43
    2274:	f0 e0       	ldi	r31, 0x00	; 0
    2276:	80 81       	ld	r24, Z
    2278:	88 60       	ori	r24, 0x08	; 8
    227a:	8c 93       	st	X, r24
}
    227c:	cf 91       	pop	r28
    227e:	df 91       	pop	r29
    2280:	08 95       	ret

00002282 <start_scheduler>:


void start_scheduler( void )
{
    2282:	df 93       	push	r29
    2284:	cf 93       	push	r28
    2286:	cd b7       	in	r28, 0x3d	; 61
    2288:	de b7       	in	r29, 0x3e	; 62
    TIMSK2 |= 0x02;
    228a:	a0 e7       	ldi	r26, 0x70	; 112
    228c:	b0 e0       	ldi	r27, 0x00	; 0
    228e:	e0 e7       	ldi	r30, 0x70	; 112
    2290:	f0 e0       	ldi	r31, 0x00	; 0
    2292:	80 81       	ld	r24, Z
    2294:	82 60       	ori	r24, 0x02	; 2
    2296:	8c 93       	st	X, r24
}
    2298:	cf 91       	pop	r28
    229a:	df 91       	pop	r29
    229c:	08 95       	ret

0000229e <stop_scheduler>:

void stop_scheduler( void )
{
    229e:	df 93       	push	r29
    22a0:	cf 93       	push	r28
    22a2:	cd b7       	in	r28, 0x3d	; 61
    22a4:	de b7       	in	r29, 0x3e	; 62
    TIMSK2 &= ~0x02;
    22a6:	a0 e7       	ldi	r26, 0x70	; 112
    22a8:	b0 e0       	ldi	r27, 0x00	; 0
    22aa:	e0 e7       	ldi	r30, 0x70	; 112
    22ac:	f0 e0       	ldi	r31, 0x00	; 0
    22ae:	80 81       	ld	r24, Z
    22b0:	8d 7f       	andi	r24, 0xFD	; 253
    22b2:	8c 93       	st	X, r24
}
    22b4:	cf 91       	pop	r28
    22b6:	df 91       	pop	r29
    22b8:	08 95       	ret

000022ba <blink_1>:

///----------------------------------------------------------------------------------------
void blink_1(void * t) {PORTB ^= 0x10;}
    22ba:	df 93       	push	r29
    22bc:	cf 93       	push	r28
    22be:	00 d0       	rcall	.+0      	; 0x22c0 <blink_1+0x6>
    22c0:	cd b7       	in	r28, 0x3d	; 61
    22c2:	de b7       	in	r29, 0x3e	; 62
    22c4:	9a 83       	std	Y+2, r25	; 0x02
    22c6:	89 83       	std	Y+1, r24	; 0x01
    22c8:	a5 e2       	ldi	r26, 0x25	; 37
    22ca:	b0 e0       	ldi	r27, 0x00	; 0
    22cc:	e5 e2       	ldi	r30, 0x25	; 37
    22ce:	f0 e0       	ldi	r31, 0x00	; 0
    22d0:	90 81       	ld	r25, Z
    22d2:	80 e1       	ldi	r24, 0x10	; 16
    22d4:	89 27       	eor	r24, r25
    22d6:	8c 93       	st	X, r24
    22d8:	0f 90       	pop	r0
    22da:	0f 90       	pop	r0
    22dc:	cf 91       	pop	r28
    22de:	df 91       	pop	r29
    22e0:	08 95       	ret

000022e2 <blink_2>:
void blink_2(void * t) {PORTB ^= 0x08;}
    22e2:	df 93       	push	r29
    22e4:	cf 93       	push	r28
    22e6:	00 d0       	rcall	.+0      	; 0x22e8 <blink_2+0x6>
    22e8:	cd b7       	in	r28, 0x3d	; 61
    22ea:	de b7       	in	r29, 0x3e	; 62
    22ec:	9a 83       	std	Y+2, r25	; 0x02
    22ee:	89 83       	std	Y+1, r24	; 0x01
    22f0:	a5 e2       	ldi	r26, 0x25	; 37
    22f2:	b0 e0       	ldi	r27, 0x00	; 0
    22f4:	e5 e2       	ldi	r30, 0x25	; 37
    22f6:	f0 e0       	ldi	r31, 0x00	; 0
    22f8:	90 81       	ld	r25, Z
    22fa:	88 e0       	ldi	r24, 0x08	; 8
    22fc:	89 27       	eor	r24, r25
    22fe:	8c 93       	st	X, r24
    2300:	0f 90       	pop	r0
    2302:	0f 90       	pop	r0
    2304:	cf 91       	pop	r28
    2306:	df 91       	pop	r29
    2308:	08 95       	ret

0000230a <blink_3>:
void blink_3(void * t) {PORTB ^= 0x04;}
    230a:	df 93       	push	r29
    230c:	cf 93       	push	r28
    230e:	00 d0       	rcall	.+0      	; 0x2310 <blink_3+0x6>
    2310:	cd b7       	in	r28, 0x3d	; 61
    2312:	de b7       	in	r29, 0x3e	; 62
    2314:	9a 83       	std	Y+2, r25	; 0x02
    2316:	89 83       	std	Y+1, r24	; 0x01
    2318:	a5 e2       	ldi	r26, 0x25	; 37
    231a:	b0 e0       	ldi	r27, 0x00	; 0
    231c:	e5 e2       	ldi	r30, 0x25	; 37
    231e:	f0 e0       	ldi	r31, 0x00	; 0
    2320:	90 81       	ld	r25, Z
    2322:	84 e0       	ldi	r24, 0x04	; 4
    2324:	89 27       	eor	r24, r25
    2326:	8c 93       	st	X, r24
    2328:	0f 90       	pop	r0
    232a:	0f 90       	pop	r0
    232c:	cf 91       	pop	r28
    232e:	df 91       	pop	r29
    2330:	08 95       	ret

00002332 <blink_4>:
void blink_4(void * t) {
    2332:	df 93       	push	r29
    2334:	cf 93       	push	r28
    2336:	00 d0       	rcall	.+0      	; 0x2338 <blink_4+0x6>
    2338:	cd b7       	in	r28, 0x3d	; 61
    233a:	de b7       	in	r29, 0x3e	; 62
    233c:	9a 83       	std	Y+2, r25	; 0x02
    233e:	89 83       	std	Y+1, r24	; 0x01
    PORTB ^= 0x02;
    2340:	a5 e2       	ldi	r26, 0x25	; 37
    2342:	b0 e0       	ldi	r27, 0x00	; 0
    2344:	e5 e2       	ldi	r30, 0x25	; 37
    2346:	f0 e0       	ldi	r31, 0x00	; 0
    2348:	90 81       	ld	r25, Z
    234a:	82 e0       	ldi	r24, 0x02	; 2
    234c:	89 27       	eor	r24, r25
    234e:	8c 93       	st	X, r24
    }
    2350:	0f 90       	pop	r0
    2352:	0f 90       	pop	r0
    2354:	cf 91       	pop	r28
    2356:	df 91       	pop	r29
    2358:	08 95       	ret

0000235a <blink_12>:
void blink_7(void * t) {PORTC ^= 0x10;}
void blink_8(void * t) {PORTC ^= 0x08;}
void blink_9(void * t) {PORTC ^= 0x04;}
void blink_10(void * t) {PORTC ^= 0x02;}
void blink_11(void * t) {PORTC ^= 0x01;}
void blink_12(void * t) {
    235a:	df 93       	push	r29
    235c:	cf 93       	push	r28
    235e:	00 d0       	rcall	.+0      	; 0x2360 <blink_12+0x6>
    2360:	cd b7       	in	r28, 0x3d	; 61
    2362:	de b7       	in	r29, 0x3e	; 62
    2364:	9a 83       	std	Y+2, r25	; 0x02
    2366:	89 83       	std	Y+1, r24	; 0x01
    PORTB ^= 0x20;
    2368:	a5 e2       	ldi	r26, 0x25	; 37
    236a:	b0 e0       	ldi	r27, 0x00	; 0
    236c:	e5 e2       	ldi	r30, 0x25	; 37
    236e:	f0 e0       	ldi	r31, 0x00	; 0
    2370:	90 81       	ld	r25, Z
    2372:	80 e2       	ldi	r24, 0x20	; 32
    2374:	89 27       	eor	r24, r25
    2376:	8c 93       	st	X, r24
    blink_G3();
    2378:	ab e2       	ldi	r26, 0x2B	; 43
    237a:	b0 e0       	ldi	r27, 0x00	; 0
    237c:	eb e2       	ldi	r30, 0x2B	; 43
    237e:	f0 e0       	ldi	r31, 0x00	; 0
    2380:	90 81       	ld	r25, Z
    2382:	80 e4       	ldi	r24, 0x40	; 64
    2384:	89 27       	eor	r24, r25
    2386:	8c 93       	st	X, r24
    blink_R3();
    2388:	ab e2       	ldi	r26, 0x2B	; 43
    238a:	b0 e0       	ldi	r27, 0x00	; 0
    238c:	eb e2       	ldi	r30, 0x2B	; 43
    238e:	f0 e0       	ldi	r31, 0x00	; 0
    2390:	90 81       	ld	r25, Z
    2392:	80 e2       	ldi	r24, 0x20	; 32
    2394:	89 27       	eor	r24, r25
    2396:	8c 93       	st	X, r24
    }
    2398:	0f 90       	pop	r0
    239a:	0f 90       	pop	r0
    239c:	cf 91       	pop	r28
    239e:	df 91       	pop	r29
    23a0:	08 95       	ret

000023a2 <main0>:
stack_t stack[5][128];

sem_t sem;

void main0(void * t)
{
    23a2:	df 93       	push	r29
    23a4:	cf 93       	push	r28
    23a6:	00 d0       	rcall	.+0      	; 0x23a8 <main0+0x6>
    23a8:	cd b7       	in	r28, 0x3d	; 61
    23aa:	de b7       	in	r29, 0x3e	; 62
    23ac:	9a 83       	std	Y+2, r25	; 0x02
    23ae:	89 83       	std	Y+1, r24	; 0x01
    while(1)
    {
        sem_lock(&sem);
    23b0:	8c e2       	ldi	r24, 0x2C	; 44
    23b2:	92 e0       	ldi	r25, 0x02	; 2
    23b4:	0e 94 ef 03 	call	0x7de	; 0x7de <sem_lock>
        wait_time(100);
    23b8:	84 e6       	ldi	r24, 0x64	; 100
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	0e 94 78 10 	call	0x20f0	; 0x20f0 <wait_time>
        sem_unlock(&sem);
    23c0:	8c e2       	ldi	r24, 0x2C	; 44
    23c2:	92 e0       	ldi	r25, 0x02	; 2
    23c4:	0e 94 1d 04 	call	0x83a	; 0x83a <sem_unlock>
    23c8:	f3 cf       	rjmp	.-26     	; 0x23b0 <main0+0xe>

000023ca <main1>:
    }
}
void main1(void * t)
{
    23ca:	df 93       	push	r29
    23cc:	cf 93       	push	r28
    23ce:	00 d0       	rcall	.+0      	; 0x23d0 <main1+0x6>
    23d0:	cd b7       	in	r28, 0x3d	; 61
    23d2:	de b7       	in	r29, 0x3e	; 62
    23d4:	9a 83       	std	Y+2, r25	; 0x02
    23d6:	89 83       	std	Y+1, r24	; 0x01
    while(1)
    {
        sem_lock(&sem);
    23d8:	8c e2       	ldi	r24, 0x2C	; 44
    23da:	92 e0       	ldi	r25, 0x02	; 2
    23dc:	0e 94 ef 03 	call	0x7de	; 0x7de <sem_lock>
        wait_time(100);
    23e0:	84 e6       	ldi	r24, 0x64	; 100
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	0e 94 78 10 	call	0x20f0	; 0x20f0 <wait_time>
        sem_unlock(&sem);
    23e8:	8c e2       	ldi	r24, 0x2C	; 44
    23ea:	92 e0       	ldi	r25, 0x02	; 2
    23ec:	0e 94 1d 04 	call	0x83a	; 0x83a <sem_unlock>
    23f0:	f3 cf       	rjmp	.-26     	; 0x23d8 <main1+0xe>

000023f2 <main2>:
    }
}
void main2(void * t)
{
    23f2:	df 93       	push	r29
    23f4:	cf 93       	push	r28
    23f6:	00 d0       	rcall	.+0      	; 0x23f8 <main2+0x6>
    23f8:	cd b7       	in	r28, 0x3d	; 61
    23fa:	de b7       	in	r29, 0x3e	; 62
    23fc:	9a 83       	std	Y+2, r25	; 0x02
    23fe:	89 83       	std	Y+1, r24	; 0x01
    while(1)
    {
        sem_lock(&sem);
    2400:	8c e2       	ldi	r24, 0x2C	; 44
    2402:	92 e0       	ldi	r25, 0x02	; 2
    2404:	0e 94 ef 03 	call	0x7de	; 0x7de <sem_lock>
        proc_reset_watchdog();
    2408:	0e 94 ba 0c 	call	0x1974	; 0x1974 <proc_reset_watchdog>
        proc_self_stop();
    240c:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <proc_self_stop>
        sem_unlock(&sem);
    2410:	8c e2       	ldi	r24, 0x2C	; 44
    2412:	92 e0       	ldi	r25, 0x02	; 2
    2414:	0e 94 1d 04 	call	0x83a	; 0x83a <sem_unlock>
    2418:	f3 cf       	rjmp	.-26     	; 0x2400 <main2+0xe>

0000241a <main3>:
    241a:	df 93       	push	r29
    241c:	cf 93       	push	r28
    241e:	00 d0       	rcall	.+0      	; 0x2420 <main3+0x6>
    2420:	0f 92       	push	r0
    2422:	cd b7       	in	r28, 0x3d	; 61
    2424:	de b7       	in	r29, 0x3e	; 62
    2426:	9b 83       	std	Y+3, r25	; 0x03
    2428:	8a 83       	std	Y+2, r24	; 0x02
    242a:	19 82       	std	Y+1, r1	; 0x01
    242c:	03 c0       	rjmp	.+6      	; 0x2434 <main3+0x1a>
    242e:	89 81       	ldd	r24, Y+1	; 0x01
    2430:	8f 5f       	subi	r24, 0xFF	; 255
    2432:	89 83       	std	Y+1, r24	; 0x01
    2434:	89 81       	ldd	r24, Y+1	; 0x01
    2436:	8a 30       	cpi	r24, 0x0A	; 10
    2438:	d0 f3       	brcs	.-12     	; 0x242e <main3+0x14>
    243a:	f7 cf       	rjmp	.-18     	; 0x242a <main3+0x10>

0000243c <idle_main>:
    {
        for(unsigned char i=0;i<10;i++);
    }
}
void idle_main(void * t)
{
    243c:	df 93       	push	r29
    243e:	cf 93       	push	r28
    2440:	00 d0       	rcall	.+0      	; 0x2442 <idle_main+0x6>
    2442:	cd b7       	in	r28, 0x3d	; 61
    2444:	de b7       	in	r29, 0x3e	; 62
    2446:	9a 83       	std	Y+2, r25	; 0x02
    2448:	89 83       	std	Y+1, r24	; 0x01
    // Insert code
    while(1)
    {
         wait_time(1000);
    244a:	88 ee       	ldi	r24, 0xE8	; 232
    244c:	93 e0       	ldi	r25, 0x03	; 3
    244e:	0e 94 78 10 	call	0x20f0	; 0x20f0 <wait_time>
         proc_run(&proc[2]);
    2452:	80 ed       	ldi	r24, 0xD0	; 208
    2454:	91 e0       	ldi	r25, 0x01	; 1
    2456:	0e 94 90 02 	call	0x520	; 0x520 <proc_run>
    245a:	f7 cf       	rjmp	.-18     	; 0x244a <idle_main+0xe>

0000245c <main>:
    }
}

int main(void)
{
    245c:	8f 92       	push	r8
    245e:	af 92       	push	r10
    2460:	bf 92       	push	r11
    2462:	cf 92       	push	r12
    2464:	ef 92       	push	r14
    2466:	ff 92       	push	r15
    2468:	0f 93       	push	r16
    246a:	1f 93       	push	r17
    246c:	df 93       	push	r29
    246e:	cf 93       	push	r28
    2470:	cd b7       	in	r28, 0x3d	; 61
    2472:	de b7       	in	r29, 0x3e	; 62
    init_bugurt();
    2474:	0e 94 2d 01 	call	0x25a	; 0x25a <init_bugurt>

    TCCR2A = 0x02;//
    2478:	e0 eb       	ldi	r30, 0xB0	; 176
    247a:	f0 e0       	ldi	r31, 0x00	; 0
    247c:	82 e0       	ldi	r24, 0x02	; 2
    247e:	80 83       	st	Z, r24
    TCCR2B = 0x05;// prescaler=128
    2480:	e1 eb       	ldi	r30, 0xB1	; 177
    2482:	f0 e0       	ldi	r31, 0x00	; 0
    2484:	85 e0       	ldi	r24, 0x05	; 5
    2486:	80 83       	st	Z, r24
    OCR2A  = 124;
    2488:	e3 eb       	ldi	r30, 0xB3	; 179
    248a:	f0 e0       	ldi	r31, 0x00	; 0
    248c:	8c e7       	ldi	r24, 0x7C	; 124
    248e:	80 83       	st	Z, r24
    OCR2B  = 0x00;
    2490:	e4 eb       	ldi	r30, 0xB4	; 180
    2492:	f0 e0       	ldi	r31, 0x00	; 0
    2494:	10 82       	st	Z, r1
    TIMSK2 = 0x00; // shceduler not started
    2496:	e0 e7       	ldi	r30, 0x70	; 112
    2498:	f0 e0       	ldi	r31, 0x00	; 0
    249a:	10 82       	st	Z, r1
    TIFR2  = 0x00;
    249c:	e7 e3       	ldi	r30, 0x37	; 55
    249e:	f0 e0       	ldi	r31, 0x00	; 0
    24a0:	10 82       	st	Z, r1

    EICRA = 0x08; //falling edge
    24a2:	e9 e6       	ldi	r30, 0x69	; 105
    24a4:	f0 e0       	ldi	r31, 0x00	; 0
    24a6:	88 e0       	ldi	r24, 0x08	; 8
    24a8:	80 83       	st	Z, r24
    EIMSK = 0x02; //resched generates int1, mask 0x02
    24aa:	ed e3       	ldi	r30, 0x3D	; 61
    24ac:	f0 e0       	ldi	r31, 0x00	; 0
    24ae:	82 e0       	ldi	r24, 0x02	; 2
    24b0:	80 83       	st	Z, r24
    EIFR  |= 0x02;
    24b2:	ac e3       	ldi	r26, 0x3C	; 60
    24b4:	b0 e0       	ldi	r27, 0x00	; 0
    24b6:	ec e3       	ldi	r30, 0x3C	; 60
    24b8:	f0 e0       	ldi	r31, 0x00	; 0
    24ba:	80 81       	ld	r24, Z
    24bc:	82 60       	ori	r24, 0x02	; 2
    24be:	8c 93       	st	X, r24

    DDRB = 0x3F;
    24c0:	e4 e2       	ldi	r30, 0x24	; 36
    24c2:	f0 e0       	ldi	r31, 0x00	; 0
    24c4:	8f e3       	ldi	r24, 0x3F	; 63
    24c6:	80 83       	st	Z, r24
    PORTB = 0x00;
    24c8:	e5 e2       	ldi	r30, 0x25	; 37
    24ca:	f0 e0       	ldi	r31, 0x00	; 0
    24cc:	10 82       	st	Z, r1
    DDRC = 0x3F;
    24ce:	e7 e2       	ldi	r30, 0x27	; 39
    24d0:	f0 e0       	ldi	r31, 0x00	; 0
    24d2:	8f e3       	ldi	r24, 0x3F	; 63
    24d4:	80 83       	st	Z, r24
    PORTC = 0x00;
    24d6:	e8 e2       	ldi	r30, 0x28	; 40
    24d8:	f0 e0       	ldi	r31, 0x00	; 0
    24da:	10 82       	st	Z, r1
    DDRD = 0xFE;
    24dc:	ea e2       	ldi	r30, 0x2A	; 42
    24de:	f0 e0       	ldi	r31, 0x00	; 0
    24e0:	8e ef       	ldi	r24, 0xFE	; 254
    24e2:	80 83       	st	Z, r24
    PORTD = 0x00;
    24e4:	eb e2       	ldi	r30, 0x2B	; 43
    24e6:	f0 e0       	ldi	r31, 0x00	; 0
    24e8:	10 82       	st	Z, r1

    G1_on();
    24ea:	ab e2       	ldi	r26, 0x2B	; 43
    24ec:	b0 e0       	ldi	r27, 0x00	; 0
    24ee:	eb e2       	ldi	r30, 0x2B	; 43
    24f0:	f0 e0       	ldi	r31, 0x00	; 0
    24f2:	80 81       	ld	r24, Z
    24f4:	80 61       	ori	r24, 0x10	; 16
    24f6:	8c 93       	st	X, r24
    G2_on();
    24f8:	ab e2       	ldi	r26, 0x2B	; 43
    24fa:	b0 e0       	ldi	r27, 0x00	; 0
    24fc:	eb e2       	ldi	r30, 0x2B	; 43
    24fe:	f0 e0       	ldi	r31, 0x00	; 0
    2500:	80 81       	ld	r24, Z
    2502:	88 60       	ori	r24, 0x08	; 8
    2504:	8c 93       	st	X, r24
    R3_on();
    2506:	ab e2       	ldi	r26, 0x2B	; 43
    2508:	b0 e0       	ldi	r27, 0x00	; 0
    250a:	eb e2       	ldi	r30, 0x2B	; 43
    250c:	f0 e0       	ldi	r31, 0x00	; 0
    250e:	80 81       	ld	r24, Z
    2510:	80 62       	ori	r24, 0x20	; 32
    2512:	8c 93       	st	X, r24

    proc_init_isr(&proc[0], main0, blink_1, blink_1, 0, &stack[0][127], 1, 2, 0);
    2514:	8f e3       	ldi	r24, 0x3F	; 63
    2516:	92 e0       	ldi	r25, 0x02	; 2
    2518:	dc 01       	movw	r26, r24
    251a:	a1 58       	subi	r26, 0x81	; 129
    251c:	bf 4f       	sbci	r27, 0xFF	; 255
    251e:	84 e7       	ldi	r24, 0x74	; 116
    2520:	91 e0       	ldi	r25, 0x01	; 1
    2522:	21 ed       	ldi	r18, 0xD1	; 209
    2524:	31 e1       	ldi	r19, 0x11	; 17
    2526:	4d e5       	ldi	r20, 0x5D	; 93
    2528:	51 e1       	ldi	r21, 0x11	; 17
    252a:	ed e5       	ldi	r30, 0x5D	; 93
    252c:	f1 e1       	ldi	r31, 0x11	; 17
    252e:	b9 01       	movw	r22, r18
    2530:	9f 01       	movw	r18, r30
    2532:	00 e0       	ldi	r16, 0x00	; 0
    2534:	10 e0       	ldi	r17, 0x00	; 0
    2536:	7d 01       	movw	r14, r26
    2538:	cc 24       	eor	r12, r12
    253a:	c3 94       	inc	r12
    253c:	aa 24       	eor	r10, r10
    253e:	bb 24       	eor	r11, r11
    2540:	68 94       	set
    2542:	a1 f8       	bld	r10, 1
    2544:	88 24       	eor	r8, r8
    2546:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <proc_init_isr>
    proc_init_isr(&proc[1], main1, blink_2, blink_2, 0, &stack[1][127], 2, 3, 0);
    254a:	8f e3       	ldi	r24, 0x3F	; 63
    254c:	92 e0       	ldi	r25, 0x02	; 2
    254e:	dc 01       	movw	r26, r24
    2550:	a1 50       	subi	r26, 0x01	; 1
    2552:	bf 4f       	sbci	r27, 0xFF	; 255
    2554:	82 ea       	ldi	r24, 0xA2	; 162
    2556:	91 e0       	ldi	r25, 0x01	; 1
    2558:	25 ee       	ldi	r18, 0xE5	; 229
    255a:	31 e1       	ldi	r19, 0x11	; 17
    255c:	41 e7       	ldi	r20, 0x71	; 113
    255e:	51 e1       	ldi	r21, 0x11	; 17
    2560:	e1 e7       	ldi	r30, 0x71	; 113
    2562:	f1 e1       	ldi	r31, 0x11	; 17
    2564:	b9 01       	movw	r22, r18
    2566:	9f 01       	movw	r18, r30
    2568:	00 e0       	ldi	r16, 0x00	; 0
    256a:	10 e0       	ldi	r17, 0x00	; 0
    256c:	7d 01       	movw	r14, r26
    256e:	cc 24       	eor	r12, r12
    2570:	68 94       	set
    2572:	c1 f8       	bld	r12, 1
    2574:	0f 2e       	mov	r0, r31
    2576:	f3 e0       	ldi	r31, 0x03	; 3
    2578:	af 2e       	mov	r10, r31
    257a:	bb 24       	eor	r11, r11
    257c:	f0 2d       	mov	r31, r0
    257e:	88 24       	eor	r8, r8
    2580:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <proc_init_isr>
    proc_init_isr(&proc[2], main2, blink_3, blink_3, 0, &stack[2][127], 2, 4, 1);// Типа реального времени
    2584:	8f e3       	ldi	r24, 0x3F	; 63
    2586:	92 e0       	ldi	r25, 0x02	; 2
    2588:	dc 01       	movw	r26, r24
    258a:	a1 58       	subi	r26, 0x81	; 129
    258c:	be 4f       	sbci	r27, 0xFE	; 254
    258e:	80 ed       	ldi	r24, 0xD0	; 208
    2590:	91 e0       	ldi	r25, 0x01	; 1
    2592:	29 ef       	ldi	r18, 0xF9	; 249
    2594:	31 e1       	ldi	r19, 0x11	; 17
    2596:	45 e8       	ldi	r20, 0x85	; 133
    2598:	51 e1       	ldi	r21, 0x11	; 17
    259a:	e5 e8       	ldi	r30, 0x85	; 133
    259c:	f1 e1       	ldi	r31, 0x11	; 17
    259e:	b9 01       	movw	r22, r18
    25a0:	9f 01       	movw	r18, r30
    25a2:	00 e0       	ldi	r16, 0x00	; 0
    25a4:	10 e0       	ldi	r17, 0x00	; 0
    25a6:	7d 01       	movw	r14, r26
    25a8:	cc 24       	eor	r12, r12
    25aa:	68 94       	set
    25ac:	c1 f8       	bld	r12, 1
    25ae:	aa 24       	eor	r10, r10
    25b0:	bb 24       	eor	r11, r11
    25b2:	68 94       	set
    25b4:	a2 f8       	bld	r10, 2
    25b6:	88 24       	eor	r8, r8
    25b8:	83 94       	inc	r8
    25ba:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <proc_init_isr>
    proc_init_isr(&proc[3], main3, blink_4, blink_4, 0, &stack[3][127], 3, 4, 0);
    25be:	8f e3       	ldi	r24, 0x3F	; 63
    25c0:	92 e0       	ldi	r25, 0x02	; 2
    25c2:	dc 01       	movw	r26, r24
    25c4:	a1 50       	subi	r26, 0x01	; 1
    25c6:	be 4f       	sbci	r27, 0xFE	; 254
    25c8:	8e ef       	ldi	r24, 0xFE	; 254
    25ca:	91 e0       	ldi	r25, 0x01	; 1
    25cc:	2d e0       	ldi	r18, 0x0D	; 13
    25ce:	32 e1       	ldi	r19, 0x12	; 18
    25d0:	49 e9       	ldi	r20, 0x99	; 153
    25d2:	51 e1       	ldi	r21, 0x11	; 17
    25d4:	e9 e9       	ldi	r30, 0x99	; 153
    25d6:	f1 e1       	ldi	r31, 0x11	; 17
    25d8:	b9 01       	movw	r22, r18
    25da:	9f 01       	movw	r18, r30
    25dc:	00 e0       	ldi	r16, 0x00	; 0
    25de:	10 e0       	ldi	r17, 0x00	; 0
    25e0:	7d 01       	movw	r14, r26
    25e2:	0f 2e       	mov	r0, r31
    25e4:	f3 e0       	ldi	r31, 0x03	; 3
    25e6:	cf 2e       	mov	r12, r31
    25e8:	f0 2d       	mov	r31, r0
    25ea:	aa 24       	eor	r10, r10
    25ec:	bb 24       	eor	r11, r11
    25ee:	68 94       	set
    25f0:	a2 f8       	bld	r10, 2
    25f2:	88 24       	eor	r8, r8
    25f4:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <proc_init_isr>

    kernel.idle.rs_hook = blink_12;
    25f8:	8d ea       	ldi	r24, 0xAD	; 173
    25fa:	91 e1       	ldi	r25, 0x11	; 17
    25fc:	90 93 69 01 	sts	0x0169, r25
    2600:	80 93 68 01 	sts	0x0168, r24
    kernel.idle.sv_hook = blink_12;
    2604:	8d ea       	ldi	r24, 0xAD	; 173
    2606:	91 e1       	ldi	r25, 0x11	; 17
    2608:	90 93 67 01 	sts	0x0167, r25
    260c:	80 93 66 01 	sts	0x0166, r24

    proc_run_isr(&proc[0]);
    2610:	84 e7       	ldi	r24, 0x74	; 116
    2612:	91 e0       	ldi	r25, 0x01	; 1
    2614:	0e 94 08 0c 	call	0x1810	; 0x1810 <proc_run_isr>
    proc_run_isr(&proc[1]);
    2618:	82 ea       	ldi	r24, 0xA2	; 162
    261a:	91 e0       	ldi	r25, 0x01	; 1
    261c:	0e 94 08 0c 	call	0x1810	; 0x1810 <proc_run_isr>
    proc_run_isr(&proc[2]);
    2620:	80 ed       	ldi	r24, 0xD0	; 208
    2622:	91 e0       	ldi	r25, 0x01	; 1
    2624:	0e 94 08 0c 	call	0x1810	; 0x1810 <proc_run_isr>
    proc_run_isr(&proc[3]);
    2628:	8e ef       	ldi	r24, 0xFE	; 254
    262a:	91 e0       	ldi	r25, 0x01	; 1
    262c:	0e 94 08 0c 	call	0x1810	; 0x1810 <proc_run_isr>

    sem_init_isr(&sem,1);
    2630:	8c e2       	ldi	r24, 0x2C	; 44
    2632:	92 e0       	ldi	r25, 0x02	; 2
    2634:	61 e0       	ldi	r22, 0x01	; 1
    2636:	70 e0       	ldi	r23, 0x00	; 0
    2638:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <sem_init_isr>

    start_bugurt();
    263c:	0e 94 3d 01 	call	0x27a	; 0x27a <start_bugurt>
    return 0;
    2640:	80 e0       	ldi	r24, 0x00	; 0
    2642:	90 e0       	ldi	r25, 0x00	; 0
}
    2644:	cf 91       	pop	r28
    2646:	df 91       	pop	r29
    2648:	1f 91       	pop	r17
    264a:	0f 91       	pop	r16
    264c:	ff 90       	pop	r15
    264e:	ef 90       	pop	r14
    2650:	cf 90       	pop	r12
    2652:	bf 90       	pop	r11
    2654:	af 90       	pop	r10
    2656:	8f 90       	pop	r8
    2658:	08 95       	ret

0000265a <_exit>:
    265a:	f8 94       	cli

0000265c <__stop_program>:
    265c:	ff cf       	rjmp	.-2      	; 0x265c <__stop_program>
