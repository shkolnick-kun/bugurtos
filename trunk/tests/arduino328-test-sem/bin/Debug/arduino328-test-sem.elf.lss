
bin/Debug/arduino328-test-sem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00002710  000027a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002710  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003c3  00800102  00800102  000027a6  2**0
                  ALLOC
  3 .stab         00007248  00000000  00000000  000027a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000367a  00000000  00000000  000099f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       8:	0c 94 26 02 	jmp	0x44c	; 0x44c <__vector_2>
       c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__vector_7>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      54:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

00000068 <syscall_routine>:
      68:	74 02 bd 02 f5 02 0f 03 29 03 4e 03 b1 03 c2 03     t.......).N.....
      78:	d2 03 e2 03 f2 03 02 04 19 04 50 04 72 04 88 04     ..........P.r...
      88:	a2 04 bc 04                                         ....

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e0 e1       	ldi	r30, 0x10	; 16
      a0:	f7 e2       	ldi	r31, 0x27	; 39
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <.do_copy_data_start>

000000a4 <.do_copy_data_loop>:
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0

000000a8 <.do_copy_data_start>:
      a8:	a2 30       	cpi	r26, 0x02	; 2
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <.do_copy_data_loop>

000000ae <__do_clear_bss>:
      ae:	14 e0       	ldi	r17, 0x04	; 4
      b0:	a2 e0       	ldi	r26, 0x02	; 2
      b2:	b1 e0       	ldi	r27, 0x01	; 1
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	a5 3c       	cpi	r26, 0xC5	; 197
      ba:	b1 07       	cpc	r27, r17
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 8f 12 	call	0x251e	; 0x251e <main>
      c2:	0c 94 86 13 	jmp	0x270c	; 0x270c <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <osbme_store_context>:
      ca:	2f 92       	push	r2
      cc:	2f b6       	in	r2, 0x3f	; 63
      ce:	2f 92       	push	r2
      d0:	3f 92       	push	r3
      d2:	4f 92       	push	r4
      d4:	5f 92       	push	r5
      d6:	6f 92       	push	r6
      d8:	7f 92       	push	r7
      da:	8f 92       	push	r8
      dc:	9f 92       	push	r9
      de:	af 92       	push	r10
      e0:	bf 92       	push	r11
      e2:	cf 92       	push	r12
      e4:	df 92       	push	r13
      e6:	ef 92       	push	r14
      e8:	ff 92       	push	r15
      ea:	0f 93       	push	r16
      ec:	1f 93       	push	r17
      ee:	2f 93       	push	r18
      f0:	3f 93       	push	r19
      f2:	4f 93       	push	r20
      f4:	5f 93       	push	r21
      f6:	6f 93       	push	r22
      f8:	7f 93       	push	r23
      fa:	8f 93       	push	r24
      fc:	9f 93       	push	r25
      fe:	af 93       	push	r26
     100:	bf 93       	push	r27
     102:	cf 93       	push	r28
     104:	df 93       	push	r29
     106:	ef 93       	push	r30
     108:	ff 93       	push	r31
     10a:	ed b7       	in	r30, 0x3d	; 61
     10c:	fe b7       	in	r31, 0x3e	; 62
     10e:	21 a1       	ldd	r18, Z+33	; 0x21
     110:	30 a1       	ldd	r19, Z+32	; 0x20
     112:	01 a2       	std	Z+33, r0	; 0x21
     114:	10 a2       	std	Z+32, r1	; 0x20
     116:	11 24       	eor	r1, r1
     118:	8d b7       	in	r24, 0x3d	; 61
     11a:	9e b7       	in	r25, 0x3e	; 62
     11c:	2f 93       	push	r18
     11e:	3f 93       	push	r19
     120:	08 95       	ret

00000122 <osbme_load_context>:
     122:	3f 91       	pop	r19
     124:	2f 91       	pop	r18
     126:	9e bf       	out	0x3e, r25	; 62
     128:	8d bf       	out	0x3d, r24	; 61
     12a:	fe b7       	in	r31, 0x3e	; 62
     12c:	ed b7       	in	r30, 0x3d	; 61
     12e:	10 a0       	ldd	r1, Z+32	; 0x20
     130:	01 a0       	ldd	r0, Z+33	; 0x21
     132:	30 a3       	std	Z+32, r19	; 0x20
     134:	21 a3       	std	Z+33, r18	; 0x21
     136:	ff 91       	pop	r31
     138:	ef 91       	pop	r30
     13a:	df 91       	pop	r29
     13c:	cf 91       	pop	r28
     13e:	bf 91       	pop	r27
     140:	af 91       	pop	r26
     142:	9f 91       	pop	r25
     144:	8f 91       	pop	r24
     146:	7f 91       	pop	r23
     148:	6f 91       	pop	r22
     14a:	5f 91       	pop	r21
     14c:	4f 91       	pop	r20
     14e:	3f 91       	pop	r19
     150:	2f 91       	pop	r18
     152:	1f 91       	pop	r17
     154:	0f 91       	pop	r16
     156:	ff 90       	pop	r15
     158:	ef 90       	pop	r14
     15a:	df 90       	pop	r13
     15c:	cf 90       	pop	r12
     15e:	bf 90       	pop	r11
     160:	af 90       	pop	r10
     162:	9f 90       	pop	r9
     164:	8f 90       	pop	r8
     166:	7f 90       	pop	r7
     168:	6f 90       	pop	r6
     16a:	5f 90       	pop	r5
     16c:	4f 90       	pop	r4
     16e:	3f 90       	pop	r3
     170:	2f 90       	pop	r2
     172:	2f be       	out	0x3f, r2	; 63
     174:	2f 90       	pop	r2
     176:	08 95       	ret

00000178 <disable_interrupts>:
//Внешние функции, специфичные для AVR
extern void start_scheduler( void );
extern void stop_scheduler( void );
// Просто функции, специфичные для AVR
void disable_interrupts(void)
{
     178:	df 93       	push	r29
     17a:	cf 93       	push	r28
     17c:	cd b7       	in	r28, 0x3d	; 61
     17e:	de b7       	in	r29, 0x3e	; 62
    cli();
     180:	f8 94       	cli
}
     182:	cf 91       	pop	r28
     184:	df 91       	pop	r29
     186:	08 95       	ret

00000188 <enable_interrupts>:
void enable_interrupts(void)
{
     188:	df 93       	push	r29
     18a:	cf 93       	push	r28
     18c:	cd b7       	in	r28, 0x3d	; 61
     18e:	de b7       	in	r29, 0x3e	; 62
    sei();
     190:	78 94       	sei
}
     192:	cf 91       	pop	r28
     194:	df 91       	pop	r29
     196:	08 95       	ret

00000198 <current_proc>:

proc_t * current_proc(void)
{
     198:	df 93       	push	r29
     19a:	cf 93       	push	r28
     19c:	cd b7       	in	r28, 0x3d	; 61
     19e:	de b7       	in	r29, 0x3e	; 62
    return kernel.sched.current_proc;
     1a0:	80 91 9e 01 	lds	r24, 0x019E
     1a4:	90 91 9f 01 	lds	r25, 0x019F
}
     1a8:	cf 91       	pop	r28
     1aa:	df 91       	pop	r29
     1ac:	08 95       	ret

000001ae <proc_stack_init>:

void * proc_stack_init(stack_t * sstart, code_t code, void * arg)
{
     1ae:	df 93       	push	r29
     1b0:	cf 93       	push	r28
     1b2:	00 d0       	rcall	.+0      	; 0x1b4 <proc_stack_init+0x6>
     1b4:	00 d0       	rcall	.+0      	; 0x1b6 <proc_stack_init+0x8>
     1b6:	00 d0       	rcall	.+0      	; 0x1b8 <proc_stack_init+0xa>
     1b8:	cd b7       	in	r28, 0x3d	; 61
     1ba:	de b7       	in	r29, 0x3e	; 62
     1bc:	9a 83       	std	Y+2, r25	; 0x02
     1be:	89 83       	std	Y+1, r24	; 0x01
     1c0:	7c 83       	std	Y+4, r23	; 0x04
     1c2:	6b 83       	std	Y+3, r22	; 0x03
     1c4:	5e 83       	std	Y+6, r21	; 0x06
     1c6:	4d 83       	std	Y+5, r20	; 0x05
    return osbme_init_stack( (void *)sstart, (osbme_code_t)proc_run_wrapper, (void *)arg );
     1c8:	46 e8       	ldi	r20, 0x86	; 134
     1ca:	53 e0       	ldi	r21, 0x03	; 3
     1cc:	89 81       	ldd	r24, Y+1	; 0x01
     1ce:	9a 81       	ldd	r25, Y+2	; 0x02
     1d0:	2d 81       	ldd	r18, Y+5	; 0x05
     1d2:	3e 81       	ldd	r19, Y+6	; 0x06
     1d4:	ba 01       	movw	r22, r20
     1d6:	a9 01       	movw	r20, r18
     1d8:	0e 94 cc 04 	call	0x998	; 0x998 <osbme_init_stack>
}
     1dc:	26 96       	adiw	r28, 0x06	; 6
     1de:	0f b6       	in	r0, 0x3f	; 63
     1e0:	f8 94       	cli
     1e2:	de bf       	out	0x3e, r29	; 62
     1e4:	0f be       	out	0x3f, r0	; 63
     1e6:	cd bf       	out	0x3d, r28	; 61
     1e8:	cf 91       	pop	r28
     1ea:	df 91       	pop	r29
     1ec:	08 95       	ret

000001ee <resched>:
//Через этот указатель будет вызываться обработчик прерывания
void (*kernel_isr)(void);

// Функция перепланировки
void resched(void)
{
     1ee:	df 93       	push	r29
     1f0:	cf 93       	push	r28
     1f2:	cd b7       	in	r28, 0x3d	; 61
     1f4:	de b7       	in	r29, 0x3e	; 62
    kernel_state |= KRN_FLG_RESCHED;
     1f6:	80 91 00 01 	lds	r24, 0x0100
     1fa:	81 60       	ori	r24, 0x01	; 1
     1fc:	80 93 00 01 	sts	0x0100, r24
}
     200:	cf 91       	pop	r28
     202:	df 91       	pop	r29
     204:	08 95       	ret

00000206 <kernel_process_switch>:

__attribute__((naked)) void kernel_process_switch(void)
{
    //Сразу же после обработки отложенных прерываний передаем управление процессу
    kernel_sp = osbme_store_context();
     206:	0e 94 65 00 	call	0xca	; 0xca <osbme_store_context>
     20a:	90 93 9d 01 	sts	0x019D, r25
     20e:	80 93 9c 01 	sts	0x019C, r24
    osbme_load_context( proc_sp );
     212:	80 91 9a 01 	lds	r24, 0x019A
     216:	90 91 9b 01 	lds	r25, 0x019B
     21a:	0e 94 91 00 	call	0x122	; 0x122 <osbme_load_context>
    __asm__ __volatile__("reti"::);/// Дада, именно reti, мы же типа прерывания счас обрабатывали
     21e:	18 95       	reti

00000220 <kernel_thread>:
    osbme_load_context( kernel_sp );
    __asm__ __volatile__("ret"::);
}
///================================================================
void kernel_thread(void)
{
     220:	df 93       	push	r29
     222:	cf 93       	push	r28
     224:	cd b7       	in	r28, 0x3d	; 61
     226:	de b7       	in	r29, 0x3e	; 62
    while(1)
    {
        // Если надо перепланировать - перепланируем
        if( kernel_state & KRN_FLG_RESCHED )
     228:	80 91 00 01 	lds	r24, 0x0100
     22c:	88 2f       	mov	r24, r24
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	81 70       	andi	r24, 0x01	; 1
     232:	90 70       	andi	r25, 0x00	; 0
     234:	88 23       	and	r24, r24
     236:	79 f0       	breq	.+30     	; 0x256 <kernel_thread+0x36>
        {
            kernel_state &= ~KRN_FLG_RESCHED;
     238:	80 91 00 01 	lds	r24, 0x0100
     23c:	8e 7f       	andi	r24, 0xFE	; 254
     23e:	80 93 00 01 	sts	0x0100, r24
            proc_sp = sched_reschedule( proc_sp );
     242:	80 91 9a 01 	lds	r24, 0x019A
     246:	90 91 9b 01 	lds	r25, 0x019B
     24a:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <sched_reschedule>
     24e:	90 93 9b 01 	sts	0x019B, r25
     252:	80 93 9a 01 	sts	0x019A, r24
        }
        /// Прямая передача управления от ядра к процессу, прерывания запрещены
        kernel_process_switch();//В результате выполнения этого прерывания будут разрешены
     256:	0e 94 03 01 	call	0x206	; 0x206 <kernel_process_switch>
        /// Сюда можно попасть только из прерывания, либо из процесса, при этом прерывания опять таки запрещены
        if( kernel_state & KRN_FLG_DO_SCALL )
     25a:	80 91 00 01 	lds	r24, 0x0100
     25e:	88 2f       	mov	r24, r24
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	82 70       	andi	r24, 0x02	; 2
     264:	90 70       	andi	r25, 0x00	; 0
     266:	00 97       	sbiw	r24, 0x00	; 0
     268:	49 f0       	breq	.+18     	; 0x27c <kernel_thread+0x5c>
        {
#ifdef SYSCALL_ISR
            syscall_data_get();
     26a:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <syscall_data_get>
#endif
            do_syscall();
     26e:	0e 94 af 01 	call	0x35e	; 0x35e <do_syscall>
            kernel_state &= ~KRN_FLG_DO_SCALL;
     272:	80 91 00 01 	lds	r24, 0x0100
     276:	8d 7f       	andi	r24, 0xFD	; 253
     278:	80 93 00 01 	sts	0x0100, r24
        }
        // Обработка прерывания
        if( kernel_isr != (void (*)(void))0 )
     27c:	80 91 98 01 	lds	r24, 0x0198
     280:	90 91 99 01 	lds	r25, 0x0199
     284:	00 97       	sbiw	r24, 0x00	; 0
     286:	81 f2       	breq	.-96     	; 0x228 <kernel_thread+0x8>
        {
            kernel_isr();
     288:	e0 91 98 01 	lds	r30, 0x0198
     28c:	f0 91 99 01 	lds	r31, 0x0199
     290:	09 95       	icall
            kernel_isr = (void (*)(void))0;
     292:	10 92 99 01 	sts	0x0199, r1
     296:	10 92 98 01 	sts	0x0198, r1
     29a:	c6 cf       	rjmp	.-116    	; 0x228 <kernel_thread+0x8>

0000029c <__vector_7>:
        }
    }
}

// А вот и первое определение обработчика прерывания
BUGURT_INTERRUPT(SYSTEM_TIMER_ISR)
     29c:	0e 94 65 00 	call	0xca	; 0xca <osbme_store_context>
     2a0:	90 93 9b 01 	sts	0x019B, r25
     2a4:	80 93 9a 01 	sts	0x019A, r24
     2a8:	81 e6       	ldi	r24, 0x61	; 97
     2aa:	91 e0       	ldi	r25, 0x01	; 1
     2ac:	90 93 99 01 	sts	0x0199, r25
     2b0:	80 93 98 01 	sts	0x0198, r24
     2b4:	80 91 9c 01 	lds	r24, 0x019C
     2b8:	90 91 9d 01 	lds	r25, 0x019D
     2bc:	0e 94 91 00 	call	0x122	; 0x122 <osbme_load_context>
     2c0:	08 95       	ret

000002c2 <__vector_7_func>:
{
     2c2:	df 93       	push	r29
     2c4:	cf 93       	push	r28
     2c6:	cd b7       	in	r28, 0x3d	; 61
     2c8:	de b7       	in	r29, 0x3e	; 62
    kernel.timer++;
     2ca:	80 91 f8 01 	lds	r24, 0x01F8
     2ce:	90 91 f9 01 	lds	r25, 0x01F9
     2d2:	01 96       	adiw	r24, 0x01	; 1
     2d4:	90 93 f9 01 	sts	0x01F9, r25
     2d8:	80 93 f8 01 	sts	0x01F8, r24
    proc_sp = sched_schedule( proc_sp );
     2dc:	80 91 9a 01 	lds	r24, 0x019A
     2e0:	90 91 9b 01 	lds	r25, 0x019B
     2e4:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <sched_schedule>
     2e8:	90 93 9b 01 	sts	0x019B, r25
     2ec:	80 93 9a 01 	sts	0x019A, r24
}
     2f0:	cf 91       	pop	r28
     2f2:	df 91       	pop	r29
     2f4:	08 95       	ret

000002f6 <init_bugurt>:

/***************************************************************************************************************/
// Функции общего пользования

void init_bugurt(void)
{
     2f6:	df 93       	push	r29
     2f8:	cf 93       	push	r28
     2fa:	cd b7       	in	r28, 0x3d	; 61
     2fc:	de b7       	in	r29, 0x3e	; 62
    cli();
     2fe:	f8 94       	cli
    kernel_init();
     300:	0e 94 ce 09 	call	0x139c	; 0x139c <kernel_init>
    proc_sp = osbme_init_stack( &idle_stack[CONFIG_IDLE_STACK_SIZE-1], idle_main, 0);
     304:	87 e9       	ldi	r24, 0x97	; 151
     306:	91 e0       	ldi	r25, 0x01	; 1
     308:	2f e7       	ldi	r18, 0x7F	; 127
     30a:	32 e1       	ldi	r19, 0x12	; 18
     30c:	b9 01       	movw	r22, r18
     30e:	40 e0       	ldi	r20, 0x00	; 0
     310:	50 e0       	ldi	r21, 0x00	; 0
     312:	0e 94 cc 04 	call	0x998	; 0x998 <osbme_init_stack>
     316:	90 93 9b 01 	sts	0x019B, r25
     31a:	80 93 9a 01 	sts	0x019A, r24
    kernel.idle.spointer = proc_sp;
     31e:	80 91 9a 01 	lds	r24, 0x019A
     322:	90 91 9b 01 	lds	r25, 0x019B
     326:	90 93 f5 01 	sts	0x01F5, r25
     32a:	80 93 f4 01 	sts	0x01F4, r24
    kernel.sched.nested_crit_sec = (count_t)1;
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	90 93 c7 01 	sts	0x01C7, r25
     336:	80 93 c6 01 	sts	0x01C6, r24
}
     33a:	cf 91       	pop	r28
     33c:	df 91       	pop	r29
     33e:	08 95       	ret

00000340 <start_bugurt>:
void start_bugurt(void)
{
     340:	df 93       	push	r29
     342:	cf 93       	push	r28
     344:	cd b7       	in	r28, 0x3d	; 61
     346:	de b7       	in	r29, 0x3e	; 62
    start_scheduler();
     348:	0e 94 a2 11 	call	0x2344	; 0x2344 <start_scheduler>
    kernel.sched.nested_crit_sec = (count_t)0;
     34c:	10 92 c7 01 	sts	0x01C7, r1
     350:	10 92 c6 01 	sts	0x01C6, r1
    kernel_thread();
     354:	0e 94 10 01 	call	0x220	; 0x220 <kernel_thread>
}
     358:	cf 91       	pop	r28
     35a:	df 91       	pop	r29
     35c:	08 95       	ret

0000035e <do_syscall>:
    scall_mutex_try_lock,
    scall_mutex_unlock
};

void do_syscall(void)
{
     35e:	df 93       	push	r29
     360:	cf 93       	push	r28
     362:	00 d0       	rcall	.+0      	; 0x364 <do_syscall+0x6>
     364:	00 d0       	rcall	.+0      	; 0x366 <do_syscall+0x8>
     366:	00 d0       	rcall	.+0      	; 0x368 <do_syscall+0xa>
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
    if( syscall_num != (unsigned char)0 )
     36c:	80 91 02 01 	lds	r24, 0x0102
     370:	88 23       	and	r24, r24
     372:	29 f1       	breq	.+74     	; 0x3be <do_syscall+0x60>
    {
        syscall_num--;
     374:	80 91 02 01 	lds	r24, 0x0102
     378:	81 50       	subi	r24, 0x01	; 1
     37a:	80 93 02 01 	sts	0x0102, r24
        code_t syscall_func;
        syscall_func = (code_t)pgm_read_word(syscall_routine + syscall_num);
     37e:	80 91 02 01 	lds	r24, 0x0102
     382:	88 2f       	mov	r24, r24
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	88 0f       	add	r24, r24
     388:	99 1f       	adc	r25, r25
     38a:	88 59       	subi	r24, 0x98	; 152
     38c:	9f 4f       	sbci	r25, 0xFF	; 255
     38e:	9c 83       	std	Y+4, r25	; 0x04
     390:	8b 83       	std	Y+3, r24	; 0x03
     392:	8b 81       	ldd	r24, Y+3	; 0x03
     394:	9c 81       	ldd	r25, Y+4	; 0x04
     396:	fc 01       	movw	r30, r24
     398:	85 91       	lpm	r24, Z+
     39a:	94 91       	lpm	r25, Z+
     39c:	9a 83       	std	Y+2, r25	; 0x02
     39e:	89 83       	std	Y+1, r24	; 0x01
     3a0:	fc 83       	std	Y+4, r31	; 0x04
     3a2:	eb 83       	std	Y+3, r30	; 0x03
     3a4:	89 81       	ldd	r24, Y+1	; 0x01
     3a6:	9a 81       	ldd	r25, Y+2	; 0x02
     3a8:	9e 83       	std	Y+6, r25	; 0x06
     3aa:	8d 83       	std	Y+5, r24	; 0x05
        syscall_func(syscall_arg);
     3ac:	80 91 03 01 	lds	r24, 0x0103
     3b0:	90 91 04 01 	lds	r25, 0x0104
     3b4:	ed 81       	ldd	r30, Y+5	; 0x05
     3b6:	fe 81       	ldd	r31, Y+6	; 0x06
     3b8:	09 95       	icall
        syscall_num = (unsigned char)0;
     3ba:	10 92 02 01 	sts	0x0102, r1
    }
}
     3be:	26 96       	adiw	r28, 0x06	; 6
     3c0:	0f b6       	in	r0, 0x3f	; 63
     3c2:	f8 94       	cli
     3c4:	de bf       	out	0x3e, r29	; 62
     3c6:	0f be       	out	0x3f, r0	; 63
     3c8:	cd bf       	out	0x3d, r28	; 61
     3ca:	cf 91       	pop	r28
     3cc:	df 91       	pop	r29
     3ce:	08 95       	ret

000003d0 <syscall_data_get>:
    unsigned char num;
    void * arg;
} syscall_data_t;

void syscall_data_get(void)
{
     3d0:	df 93       	push	r29
     3d2:	cf 93       	push	r28
     3d4:	00 d0       	rcall	.+0      	; 0x3d6 <syscall_data_get+0x6>
     3d6:	00 d0       	rcall	.+0      	; 0x3d8 <syscall_data_get+0x8>
     3d8:	cd b7       	in	r28, 0x3d	; 61
     3da:	de b7       	in	r29, 0x3e	; 62
    unsigned char * tos;
    unsigned short temp;
    /// Извлечение syscall_num и syscall_arg из стека процесса
    tos = (unsigned char *)proc_sp + PROC_STACK_OFFSET;
     3dc:	80 91 9a 01 	lds	r24, 0x019A
     3e0:	90 91 9b 01 	lds	r25, 0x019B
     3e4:	07 96       	adiw	r24, 0x07	; 7
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	8b 83       	std	Y+3, r24	; 0x03
    temp = (unsigned short)*tos++;
     3ea:	eb 81       	ldd	r30, Y+3	; 0x03
     3ec:	fc 81       	ldd	r31, Y+4	; 0x04
     3ee:	80 81       	ld	r24, Z
     3f0:	88 2f       	mov	r24, r24
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	9a 83       	std	Y+2, r25	; 0x02
     3f6:	89 83       	std	Y+1, r24	; 0x01
     3f8:	8b 81       	ldd	r24, Y+3	; 0x03
     3fa:	9c 81       	ldd	r25, Y+4	; 0x04
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	9c 83       	std	Y+4, r25	; 0x04
     400:	8b 83       	std	Y+3, r24	; 0x03
    temp <<= 8;
     402:	89 81       	ldd	r24, Y+1	; 0x01
     404:	9a 81       	ldd	r25, Y+2	; 0x02
     406:	98 2f       	mov	r25, r24
     408:	88 27       	eor	r24, r24
     40a:	9a 83       	std	Y+2, r25	; 0x02
     40c:	89 83       	std	Y+1, r24	; 0x01
    temp |= (unsigned short)*tos;
     40e:	eb 81       	ldd	r30, Y+3	; 0x03
     410:	fc 81       	ldd	r31, Y+4	; 0x04
     412:	80 81       	ld	r24, Z
     414:	28 2f       	mov	r18, r24
     416:	30 e0       	ldi	r19, 0x00	; 0
     418:	89 81       	ldd	r24, Y+1	; 0x01
     41a:	9a 81       	ldd	r25, Y+2	; 0x02
     41c:	82 2b       	or	r24, r18
     41e:	93 2b       	or	r25, r19
     420:	9a 83       	std	Y+2, r25	; 0x02
     422:	89 83       	std	Y+1, r24	; 0x01

    syscall_num = ((syscall_data_t *)temp)->num;
     424:	e9 81       	ldd	r30, Y+1	; 0x01
     426:	fa 81       	ldd	r31, Y+2	; 0x02
     428:	80 81       	ld	r24, Z
     42a:	80 93 02 01 	sts	0x0102, r24
    syscall_arg = ((syscall_data_t *)temp)->arg;
     42e:	e9 81       	ldd	r30, Y+1	; 0x01
     430:	fa 81       	ldd	r31, Y+2	; 0x02
     432:	81 81       	ldd	r24, Z+1	; 0x01
     434:	92 81       	ldd	r25, Z+2	; 0x02
     436:	90 93 04 01 	sts	0x0104, r25
     43a:	80 93 03 01 	sts	0x0103, r24
}
     43e:	0f 90       	pop	r0
     440:	0f 90       	pop	r0
     442:	0f 90       	pop	r0
     444:	0f 90       	pop	r0
     446:	cf 91       	pop	r28
     448:	df 91       	pop	r29
     44a:	08 95       	ret

0000044c <__vector_2>:

__attribute__ (( signal, naked )) void SYSCALL_ISR(void)
{
    proc_sp = osbme_store_context();
     44c:	0e 94 65 00 	call	0xca	; 0xca <osbme_store_context>
     450:	90 93 9b 01 	sts	0x019B, r25
     454:	80 93 9a 01 	sts	0x019A, r24
    osbme_load_context( kernel_sp );
     458:	80 91 9c 01 	lds	r24, 0x019C
     45c:	90 91 9d 01 	lds	r25, 0x019D
     460:	0e 94 91 00 	call	0x122	; 0x122 <osbme_load_context>
    __asm__ __volatile__("ret"::);
     464:	08 95       	ret

00000466 <_syscall>:
}

syscall_data_t * _syscall( syscall_data_t * arg )
{
     466:	df 93       	push	r29
     468:	cf 93       	push	r28
     46a:	00 d0       	rcall	.+0      	; 0x46c <_syscall+0x6>
     46c:	cd b7       	in	r28, 0x3d	; 61
     46e:	de b7       	in	r29, 0x3e	; 62
     470:	9a 83       	std	Y+2, r25	; 0x02
     472:	89 83       	std	Y+1, r24	; 0x01
    cli();
     474:	f8 94       	cli
    kernel_state |= KRN_FLG_DO_SCALL;
     476:	80 91 00 01 	lds	r24, 0x0100
     47a:	82 60       	ori	r24, 0x02	; 2
     47c:	80 93 00 01 	sts	0x0100, r24
    raise_syscall_interrupt();
     480:	0e 94 7f 11 	call	0x22fe	; 0x22fe <raise_syscall_interrupt>
    sei();
     484:	78 94       	sei
    return arg;
     486:	89 81       	ldd	r24, Y+1	; 0x01
     488:	9a 81       	ldd	r25, Y+2	; 0x02
}
     48a:	0f 90       	pop	r0
     48c:	0f 90       	pop	r0
     48e:	cf 91       	pop	r28
     490:	df 91       	pop	r29
     492:	08 95       	ret

00000494 <syscall>:

static syscall_data_t scdata;
void syscall( unsigned char num, void * arg )
{
     494:	df 93       	push	r29
     496:	cf 93       	push	r28
     498:	00 d0       	rcall	.+0      	; 0x49a <syscall+0x6>
     49a:	0f 92       	push	r0
     49c:	cd b7       	in	r28, 0x3d	; 61
     49e:	de b7       	in	r29, 0x3e	; 62
     4a0:	89 83       	std	Y+1, r24	; 0x01
     4a2:	7b 83       	std	Y+3, r23	; 0x03
     4a4:	6a 83       	std	Y+2, r22	; 0x02
     scdata.num = num;
     4a6:	89 81       	ldd	r24, Y+1	; 0x01
     4a8:	80 93 05 01 	sts	0x0105, r24
     scdata.arg = arg;
     4ac:	8a 81       	ldd	r24, Y+2	; 0x02
     4ae:	9b 81       	ldd	r25, Y+3	; 0x03
     4b0:	90 93 07 01 	sts	0x0107, r25
     4b4:	80 93 06 01 	sts	0x0106, r24
     _syscall( &scdata );
     4b8:	85 e0       	ldi	r24, 0x05	; 5
     4ba:	91 e0       	ldi	r25, 0x01	; 1
     4bc:	0e 94 33 02 	call	0x466	; 0x466 <_syscall>
	...
     SYSCALL_DELLAY();
     while( kernel_state & KRN_FLG_DO_SCALL );
     4cc:	80 91 00 01 	lds	r24, 0x0100
     4d0:	88 2f       	mov	r24, r24
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	82 70       	andi	r24, 0x02	; 2
     4d6:	90 70       	andi	r25, 0x00	; 0
     4d8:	00 97       	sbiw	r24, 0x00	; 0
     4da:	c1 f7       	brne	.-16     	; 0x4cc <syscall+0x38>
}
     4dc:	0f 90       	pop	r0
     4de:	0f 90       	pop	r0
     4e0:	0f 90       	pop	r0
     4e2:	cf 91       	pop	r28
     4e4:	df 91       	pop	r29
     4e6:	08 95       	ret

000004e8 <scall_proc_init>:
///                 ОБРАБОТЧИКИ СИСТЕМНЫХ ВЫЗОВОВ
///=================================================================
///                   Управление процессами
//1
void scall_proc_init( void * arg )
{
     4e8:	8f 92       	push	r8
     4ea:	af 92       	push	r10
     4ec:	bf 92       	push	r11
     4ee:	cf 92       	push	r12
     4f0:	df 92       	push	r13
     4f2:	ef 92       	push	r14
     4f4:	ff 92       	push	r15
     4f6:	0f 93       	push	r16
     4f8:	1f 93       	push	r17
     4fa:	df 93       	push	r29
     4fc:	cf 93       	push	r28
     4fe:	00 d0       	rcall	.+0      	; 0x500 <scall_proc_init+0x18>
     500:	cd b7       	in	r28, 0x3d	; 61
     502:	de b7       	in	r29, 0x3e	; 62
     504:	9a 83       	std	Y+2, r25	; 0x02
     506:	89 83       	std	Y+1, r24	; 0x01
    proc_init_isr(
     508:	e9 81       	ldd	r30, Y+1	; 0x01
     50a:	fa 81       	ldd	r31, Y+2	; 0x02
     50c:	80 81       	ld	r24, Z
     50e:	91 81       	ldd	r25, Z+1	; 0x01
     510:	e9 81       	ldd	r30, Y+1	; 0x01
     512:	fa 81       	ldd	r31, Y+2	; 0x02
     514:	22 81       	ldd	r18, Z+2	; 0x02
     516:	33 81       	ldd	r19, Z+3	; 0x03
     518:	e9 81       	ldd	r30, Y+1	; 0x01
     51a:	fa 81       	ldd	r31, Y+2	; 0x02
     51c:	44 81       	ldd	r20, Z+4	; 0x04
     51e:	55 81       	ldd	r21, Z+5	; 0x05
     520:	e9 81       	ldd	r30, Y+1	; 0x01
     522:	fa 81       	ldd	r31, Y+2	; 0x02
     524:	06 81       	ldd	r16, Z+6	; 0x06
     526:	17 81       	ldd	r17, Z+7	; 0x07
     528:	e9 81       	ldd	r30, Y+1	; 0x01
     52a:	fa 81       	ldd	r31, Y+2	; 0x02
     52c:	e0 84       	ldd	r14, Z+8	; 0x08
     52e:	f1 84       	ldd	r15, Z+9	; 0x09
     530:	e9 81       	ldd	r30, Y+1	; 0x01
     532:	fa 81       	ldd	r31, Y+2	; 0x02
     534:	c2 84       	ldd	r12, Z+10	; 0x0a
     536:	d3 84       	ldd	r13, Z+11	; 0x0b
     538:	e9 81       	ldd	r30, Y+1	; 0x01
     53a:	fa 81       	ldd	r31, Y+2	; 0x02
     53c:	b4 84       	ldd	r11, Z+12	; 0x0c
     53e:	e9 81       	ldd	r30, Y+1	; 0x01
     540:	fa 81       	ldd	r31, Y+2	; 0x02
     542:	a5 85       	ldd	r26, Z+13	; 0x0d
     544:	b6 85       	ldd	r27, Z+14	; 0x0e
     546:	e9 81       	ldd	r30, Y+1	; 0x01
     548:	fa 81       	ldd	r31, Y+2	; 0x02
     54a:	e7 85       	ldd	r30, Z+15	; 0x0f
     54c:	b9 01       	movw	r22, r18
     54e:	98 01       	movw	r18, r16
     550:	87 01       	movw	r16, r14
     552:	76 01       	movw	r14, r12
     554:	cb 2c       	mov	r12, r11
     556:	5d 01       	movw	r10, r26
     558:	8e 2e       	mov	r8, r30
     55a:	0e 94 a4 0b 	call	0x1748	; 0x1748 <proc_init_isr>
              ((proc_init_arg_t *)arg)->sstart,
              ((proc_init_arg_t *)arg)->prio,
              ((proc_init_arg_t *)arg)->time_quant,
              ((proc_init_arg_t *)arg)->is_rt
              );
}
     55e:	0f 90       	pop	r0
     560:	0f 90       	pop	r0
     562:	cf 91       	pop	r28
     564:	df 91       	pop	r29
     566:	1f 91       	pop	r17
     568:	0f 91       	pop	r16
     56a:	ff 90       	pop	r15
     56c:	ef 90       	pop	r14
     56e:	df 90       	pop	r13
     570:	cf 90       	pop	r12
     572:	bf 90       	pop	r11
     574:	af 90       	pop	r10
     576:	8f 90       	pop	r8
     578:	08 95       	ret

0000057a <scall_proc_run>:
    syscall(1,(void *)&scarg);
}
//---------------------------------------------------------------------------------------------
//2
void scall_proc_run( void * arg )
{
     57a:	0f 93       	push	r16
     57c:	1f 93       	push	r17
     57e:	df 93       	push	r29
     580:	cf 93       	push	r28
     582:	00 d0       	rcall	.+0      	; 0x584 <scall_proc_run+0xa>
     584:	cd b7       	in	r28, 0x3d	; 61
     586:	de b7       	in	r29, 0x3e	; 62
     588:	9a 83       	std	Y+2, r25	; 0x02
     58a:	89 83       	std	Y+1, r24	; 0x01
    ((proc_runtime_arg_t *)arg)->scall_ret = proc_run_isr( ((proc_runtime_arg_t *)arg)->proc );
     58c:	09 81       	ldd	r16, Y+1	; 0x01
     58e:	1a 81       	ldd	r17, Y+2	; 0x02
     590:	e9 81       	ldd	r30, Y+1	; 0x01
     592:	fa 81       	ldd	r31, Y+2	; 0x02
     594:	80 81       	ld	r24, Z
     596:	91 81       	ldd	r25, Z+1	; 0x01
     598:	0e 94 4a 0c 	call	0x1894	; 0x1894 <proc_run_isr>
     59c:	f8 01       	movw	r30, r16
     59e:	82 83       	std	Z+2, r24	; 0x02
}
     5a0:	0f 90       	pop	r0
     5a2:	0f 90       	pop	r0
     5a4:	cf 91       	pop	r28
     5a6:	df 91       	pop	r29
     5a8:	1f 91       	pop	r17
     5aa:	0f 91       	pop	r16
     5ac:	08 95       	ret

000005ae <proc_run>:
bool_t proc_run( proc_t * proc )
{
     5ae:	df 93       	push	r29
     5b0:	cf 93       	push	r28
     5b2:	00 d0       	rcall	.+0      	; 0x5b4 <proc_run+0x6>
     5b4:	00 d0       	rcall	.+0      	; 0x5b6 <proc_run+0x8>
     5b6:	0f 92       	push	r0
     5b8:	cd b7       	in	r28, 0x3d	; 61
     5ba:	de b7       	in	r29, 0x3e	; 62
     5bc:	9d 83       	std	Y+5, r25	; 0x05
     5be:	8c 83       	std	Y+4, r24	; 0x04
    proc_runtime_arg_t scarg;
    scarg.proc = proc;
     5c0:	8c 81       	ldd	r24, Y+4	; 0x04
     5c2:	9d 81       	ldd	r25, Y+5	; 0x05
     5c4:	9a 83       	std	Y+2, r25	; 0x02
     5c6:	89 83       	std	Y+1, r24	; 0x01
    scarg.scall_ret = (bool_t)0;
     5c8:	1b 82       	std	Y+3, r1	; 0x03

    syscall(2,(void *)&scarg);
     5ca:	82 e0       	ldi	r24, 0x02	; 2
     5cc:	9e 01       	movw	r18, r28
     5ce:	2f 5f       	subi	r18, 0xFF	; 255
     5d0:	3f 4f       	sbci	r19, 0xFF	; 255
     5d2:	b9 01       	movw	r22, r18
     5d4:	0e 94 4a 02 	call	0x494	; 0x494 <syscall>
    return scarg.scall_ret;
     5d8:	8b 81       	ldd	r24, Y+3	; 0x03
}
     5da:	0f 90       	pop	r0
     5dc:	0f 90       	pop	r0
     5de:	0f 90       	pop	r0
     5e0:	0f 90       	pop	r0
     5e2:	0f 90       	pop	r0
     5e4:	cf 91       	pop	r28
     5e6:	df 91       	pop	r29
     5e8:	08 95       	ret

000005ea <scall_proc_restart>:
//---------------------------------------------------------------------------------------------
//3
void scall_proc_restart( void * arg )
{
     5ea:	0f 93       	push	r16
     5ec:	1f 93       	push	r17
     5ee:	df 93       	push	r29
     5f0:	cf 93       	push	r28
     5f2:	00 d0       	rcall	.+0      	; 0x5f4 <scall_proc_restart+0xa>
     5f4:	cd b7       	in	r28, 0x3d	; 61
     5f6:	de b7       	in	r29, 0x3e	; 62
     5f8:	9a 83       	std	Y+2, r25	; 0x02
     5fa:	89 83       	std	Y+1, r24	; 0x01
    ((proc_runtime_arg_t *)arg)->scall_ret = proc_restart_isr( ((proc_runtime_arg_t *)arg)->proc );
     5fc:	09 81       	ldd	r16, Y+1	; 0x01
     5fe:	1a 81       	ldd	r17, Y+2	; 0x02
     600:	e9 81       	ldd	r30, Y+1	; 0x01
     602:	fa 81       	ldd	r31, Y+2	; 0x02
     604:	80 81       	ld	r24, Z
     606:	91 81       	ldd	r25, Z+1	; 0x01
     608:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <proc_restart_isr>
     60c:	f8 01       	movw	r30, r16
     60e:	82 83       	std	Z+2, r24	; 0x02
}
     610:	0f 90       	pop	r0
     612:	0f 90       	pop	r0
     614:	cf 91       	pop	r28
     616:	df 91       	pop	r29
     618:	1f 91       	pop	r17
     61a:	0f 91       	pop	r16
     61c:	08 95       	ret

0000061e <scall_proc_stop>:
    return scarg.scall_ret;
}
//---------------------------------------------------------------------------------------------
//4
void scall_proc_stop( void * arg )
{
     61e:	0f 93       	push	r16
     620:	1f 93       	push	r17
     622:	df 93       	push	r29
     624:	cf 93       	push	r28
     626:	00 d0       	rcall	.+0      	; 0x628 <scall_proc_stop+0xa>
     628:	cd b7       	in	r28, 0x3d	; 61
     62a:	de b7       	in	r29, 0x3e	; 62
     62c:	9a 83       	std	Y+2, r25	; 0x02
     62e:	89 83       	std	Y+1, r24	; 0x01
    ((proc_runtime_arg_t *)arg)->scall_ret = proc_stop_isr( ((proc_runtime_arg_t *)arg)->proc );
     630:	09 81       	ldd	r16, Y+1	; 0x01
     632:	1a 81       	ldd	r17, Y+2	; 0x02
     634:	e9 81       	ldd	r30, Y+1	; 0x01
     636:	fa 81       	ldd	r31, Y+2	; 0x02
     638:	80 81       	ld	r24, Z
     63a:	91 81       	ldd	r25, Z+1	; 0x01
     63c:	0e 94 cc 0c 	call	0x1998	; 0x1998 <proc_stop_isr>
     640:	f8 01       	movw	r30, r16
     642:	82 83       	std	Z+2, r24	; 0x02
}
     644:	0f 90       	pop	r0
     646:	0f 90       	pop	r0
     648:	cf 91       	pop	r28
     64a:	df 91       	pop	r29
     64c:	1f 91       	pop	r17
     64e:	0f 91       	pop	r16
     650:	08 95       	ret

00000652 <scall_proc_self_stop>:
}

//---------------------------------------------------------------------------------------------
//5
void scall_proc_self_stop( void * arg )
{
     652:	df 93       	push	r29
     654:	cf 93       	push	r28
     656:	00 d0       	rcall	.+0      	; 0x658 <scall_proc_self_stop+0x6>
     658:	00 d0       	rcall	.+0      	; 0x65a <scall_proc_self_stop+0x8>
     65a:	cd b7       	in	r28, 0x3d	; 61
     65c:	de b7       	in	r29, 0x3e	; 62
     65e:	9c 83       	std	Y+4, r25	; 0x04
     660:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = kernel.sched.current_proc;
     662:	80 91 9e 01 	lds	r24, 0x019E
     666:	90 91 9f 01 	lds	r25, 0x019F
     66a:	9a 83       	std	Y+2, r25	; 0x02
     66c:	89 83       	std	Y+1, r24	; 0x01
    _proc_stop( proc );
     66e:	89 81       	ldd	r24, Y+1	; 0x01
     670:	9a 81       	ldd	r25, Y+2	; 0x02
     672:	0e 94 b3 0c 	call	0x1966	; 0x1966 <_proc_stop>
}
     676:	0f 90       	pop	r0
     678:	0f 90       	pop	r0
     67a:	0f 90       	pop	r0
     67c:	0f 90       	pop	r0
     67e:	cf 91       	pop	r28
     680:	df 91       	pop	r29
     682:	08 95       	ret

00000684 <proc_self_stop>:
void proc_self_stop(void)
{
     684:	df 93       	push	r29
     686:	cf 93       	push	r28
     688:	cd b7       	in	r28, 0x3d	; 61
     68a:	de b7       	in	r29, 0x3e	; 62
    syscall(5,(void *)1);
     68c:	85 e0       	ldi	r24, 0x05	; 5
     68e:	61 e0       	ldi	r22, 0x01	; 1
     690:	70 e0       	ldi	r23, 0x00	; 0
     692:	0e 94 4a 02 	call	0x494	; 0x494 <syscall>
}
     696:	cf 91       	pop	r28
     698:	df 91       	pop	r29
     69a:	08 95       	ret

0000069c <scall_proc_terminate>:
//---------------------------------------------------------------------------------------------
//6
/// Останов процесса после выхода из pmain, для обертки proc_run_wrapper
void scall_proc_terminate( void * arg )
{
     69c:	df 93       	push	r29
     69e:	cf 93       	push	r28
     6a0:	00 d0       	rcall	.+0      	; 0x6a2 <scall_proc_terminate+0x6>
     6a2:	00 d0       	rcall	.+0      	; 0x6a4 <scall_proc_terminate+0x8>
     6a4:	cd b7       	in	r28, 0x3d	; 61
     6a6:	de b7       	in	r29, 0x3e	; 62
     6a8:	9c 83       	std	Y+4, r25	; 0x04
     6aa:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = (proc_t *)arg;
     6ac:	8b 81       	ldd	r24, Y+3	; 0x03
     6ae:	9c 81       	ldd	r25, Y+4	; 0x04
     6b0:	9a 83       	std	Y+2, r25	; 0x02
     6b2:	89 83       	std	Y+1, r24	; 0x01
    // Обрабатываем флаги
    // Нельзя выходить из pmain не освободив все захваченные ресурсы, за это процесс будет "убит"!
    if( proc->flags & PROC_FLG_HOLD ) proc->flags |= PROC_FLG_DEAD;
     6b4:	e9 81       	ldd	r30, Y+1	; 0x01
     6b6:	fa 81       	ldd	r31, Y+2	; 0x02
     6b8:	83 85       	ldd	r24, Z+11	; 0x0b
     6ba:	88 2f       	mov	r24, r24
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	84 70       	andi	r24, 0x04	; 4
     6c0:	90 70       	andi	r25, 0x00	; 0
     6c2:	00 97       	sbiw	r24, 0x00	; 0
     6c4:	41 f0       	breq	.+16     	; 0x6d6 <scall_proc_terminate+0x3a>
     6c6:	e9 81       	ldd	r30, Y+1	; 0x01
     6c8:	fa 81       	ldd	r31, Y+2	; 0x02
     6ca:	83 85       	ldd	r24, Z+11	; 0x0b
     6cc:	80 68       	ori	r24, 0x80	; 128
     6ce:	e9 81       	ldd	r30, Y+1	; 0x01
     6d0:	fa 81       	ldd	r31, Y+2	; 0x02
     6d2:	83 87       	std	Z+11, r24	; 0x0b
     6d4:	07 c0       	rjmp	.+14     	; 0x6e4 <scall_proc_terminate+0x48>
    // В противном случае - просто завершаем процесс
    else proc->flags |= PROC_FLG_END;
     6d6:	e9 81       	ldd	r30, Y+1	; 0x01
     6d8:	fa 81       	ldd	r31, Y+2	; 0x02
     6da:	83 85       	ldd	r24, Z+11	; 0x0b
     6dc:	80 64       	ori	r24, 0x40	; 64
     6de:	e9 81       	ldd	r30, Y+1	; 0x01
     6e0:	fa 81       	ldd	r31, Y+2	; 0x02
     6e2:	83 87       	std	Z+11, r24	; 0x0b
    proc->flags &= ~(PROC_FLG_PRE_END|PROC_FLG_RUN);
     6e4:	e9 81       	ldd	r30, Y+1	; 0x01
     6e6:	fa 81       	ldd	r31, Y+2	; 0x02
     6e8:	83 85       	ldd	r24, Z+11	; 0x0b
     6ea:	8d 7d       	andi	r24, 0xDD	; 221
     6ec:	e9 81       	ldd	r30, Y+1	; 0x01
     6ee:	fa 81       	ldd	r31, Y+2	; 0x02
     6f0:	83 87       	std	Z+11, r24	; 0x0b
    // Останов
    _proc_stop_( proc );
     6f2:	89 81       	ldd	r24, Y+1	; 0x01
     6f4:	9a 81       	ldd	r25, Y+2	; 0x02
     6f6:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <gitem_cut>
    // Выполнить перепланировку
    resched();
     6fa:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
}
     6fe:	0f 90       	pop	r0
     700:	0f 90       	pop	r0
     702:	0f 90       	pop	r0
     704:	0f 90       	pop	r0
     706:	cf 91       	pop	r28
     708:	df 91       	pop	r29
     70a:	08 95       	ret

0000070c <proc_run_wrapper>:
void proc_run_wrapper( proc_t * proc )
{
     70c:	df 93       	push	r29
     70e:	cf 93       	push	r28
     710:	00 d0       	rcall	.+0      	; 0x712 <proc_run_wrapper+0x6>
     712:	00 d0       	rcall	.+0      	; 0x714 <proc_run_wrapper+0x8>
     714:	00 d0       	rcall	.+0      	; 0x716 <proc_run_wrapper+0xa>
     716:	cd b7       	in	r28, 0x3d	; 61
     718:	de b7       	in	r29, 0x3e	; 62
     71a:	9e 83       	std	Y+6, r25	; 0x06
     71c:	8d 83       	std	Y+5, r24	; 0x05
    //Атомарно читаем pmain и arg
    cli();
     71e:	f8 94       	cli
    code_t pmain = proc->pmain;
     720:	ed 81       	ldd	r30, Y+5	; 0x05
     722:	fe 81       	ldd	r31, Y+6	; 0x06
     724:	82 a1       	ldd	r24, Z+34	; 0x22
     726:	93 a1       	ldd	r25, Z+35	; 0x23
     728:	9c 83       	std	Y+4, r25	; 0x04
     72a:	8b 83       	std	Y+3, r24	; 0x03
    void * arg = proc->arg;
     72c:	ed 81       	ldd	r30, Y+5	; 0x05
     72e:	fe 81       	ldd	r31, Y+6	; 0x06
     730:	80 a5       	ldd	r24, Z+40	; 0x28
     732:	91 a5       	ldd	r25, Z+41	; 0x29
     734:	9a 83       	std	Y+2, r25	; 0x02
     736:	89 83       	std	Y+1, r24	; 0x01
    sei();
     738:	78 94       	sei
    //Выполняем pmain
    pmain( arg );
     73a:	89 81       	ldd	r24, Y+1	; 0x01
     73c:	9a 81       	ldd	r25, Y+2	; 0x02
     73e:	eb 81       	ldd	r30, Y+3	; 0x03
     740:	fc 81       	ldd	r31, Y+4	; 0x04
     742:	09 95       	icall
    // Завершаем процесс
    syscall(6,(void *)proc);
     744:	2d 81       	ldd	r18, Y+5	; 0x05
     746:	3e 81       	ldd	r19, Y+6	; 0x06
     748:	86 e0       	ldi	r24, 0x06	; 6
     74a:	b9 01       	movw	r22, r18
     74c:	0e 94 4a 02 	call	0x494	; 0x494 <syscall>
}
     750:	26 96       	adiw	r28, 0x06	; 6
     752:	0f b6       	in	r0, 0x3f	; 63
     754:	f8 94       	cli
     756:	de bf       	out	0x3e, r29	; 62
     758:	0f be       	out	0x3f, r0	; 63
     75a:	cd bf       	out	0x3d, r28	; 61
     75c:	cf 91       	pop	r28
     75e:	df 91       	pop	r29
     760:	08 95       	ret

00000762 <scall_proc_flag_stop>:
//---------------------------------------------------------------------------------------------
//7
void scall_proc_flag_stop( void * arg )
{
     762:	df 93       	push	r29
     764:	cf 93       	push	r28
     766:	00 d0       	rcall	.+0      	; 0x768 <scall_proc_flag_stop+0x6>
     768:	cd b7       	in	r28, 0x3d	; 61
     76a:	de b7       	in	r29, 0x3e	; 62
     76c:	9a 83       	std	Y+2, r25	; 0x02
     76e:	89 83       	std	Y+1, r24	; 0x01
    _proc_flag_stop_isr( *((flag_t *)arg) );
     770:	e9 81       	ldd	r30, Y+1	; 0x01
     772:	fa 81       	ldd	r31, Y+2	; 0x02
     774:	80 81       	ld	r24, Z
     776:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <_proc_flag_stop_isr>
}
     77a:	0f 90       	pop	r0
     77c:	0f 90       	pop	r0
     77e:	cf 91       	pop	r28
     780:	df 91       	pop	r29
     782:	08 95       	ret

00000784 <scall_sig_init>:
///=================================================================
///                         Сигналы
//8
void scall_sig_init( void * arg )
{
     784:	df 93       	push	r29
     786:	cf 93       	push	r28
     788:	00 d0       	rcall	.+0      	; 0x78a <scall_sig_init+0x6>
     78a:	cd b7       	in	r28, 0x3d	; 61
     78c:	de b7       	in	r29, 0x3e	; 62
     78e:	9a 83       	std	Y+2, r25	; 0x02
     790:	89 83       	std	Y+1, r24	; 0x01
    sig_init_isr( (sig_t *)arg );
     792:	89 81       	ldd	r24, Y+1	; 0x01
     794:	9a 81       	ldd	r25, Y+2	; 0x02
     796:	0e 94 2b 10 	call	0x2056	; 0x2056 <sig_init_isr>
}
     79a:	0f 90       	pop	r0
     79c:	0f 90       	pop	r0
     79e:	cf 91       	pop	r28
     7a0:	df 91       	pop	r29
     7a2:	08 95       	ret

000007a4 <scall_sig_wait>:
    syscall( 8, (void *)sig );
}
//---------------------------------------------------------------------------------------------
//9
void scall_sig_wait( void * arg )
{
     7a4:	df 93       	push	r29
     7a6:	cf 93       	push	r28
     7a8:	00 d0       	rcall	.+0      	; 0x7aa <scall_sig_wait+0x6>
     7aa:	cd b7       	in	r28, 0x3d	; 61
     7ac:	de b7       	in	r29, 0x3e	; 62
     7ae:	9a 83       	std	Y+2, r25	; 0x02
     7b0:	89 83       	std	Y+1, r24	; 0x01
    sig_wait_stage_1_isr( (sig_t *)arg );
     7b2:	89 81       	ldd	r24, Y+1	; 0x01
     7b4:	9a 81       	ldd	r25, Y+2	; 0x02
     7b6:	0e 94 3b 10 	call	0x2076	; 0x2076 <sig_wait_stage_1_isr>
}
     7ba:	0f 90       	pop	r0
     7bc:	0f 90       	pop	r0
     7be:	cf 91       	pop	r28
     7c0:	df 91       	pop	r29
     7c2:	08 95       	ret

000007c4 <scall_sig_signal>:
    syscall( 7, (void *)&mask );/// Останов в случае необходимости
}
//---------------------------------------------------------------------------------------------
//10
void scall_sig_signal( void * arg )
{
     7c4:	df 93       	push	r29
     7c6:	cf 93       	push	r28
     7c8:	00 d0       	rcall	.+0      	; 0x7ca <scall_sig_signal+0x6>
     7ca:	cd b7       	in	r28, 0x3d	; 61
     7cc:	de b7       	in	r29, 0x3e	; 62
     7ce:	9a 83       	std	Y+2, r25	; 0x02
     7d0:	89 83       	std	Y+1, r24	; 0x01
    sig_signal_isr( (sig_t *)arg );
     7d2:	89 81       	ldd	r24, Y+1	; 0x01
     7d4:	9a 81       	ldd	r25, Y+2	; 0x02
     7d6:	0e 94 60 10 	call	0x20c0	; 0x20c0 <sig_signal_isr>
}
     7da:	0f 90       	pop	r0
     7dc:	0f 90       	pop	r0
     7de:	cf 91       	pop	r28
     7e0:	df 91       	pop	r29
     7e2:	08 95       	ret

000007e4 <scall_sig_broadcast>:
    syscall( 10, (void *)sig );
}
//---------------------------------------------------------------------------------------------
//11
void scall_sig_broadcast( void * arg )
{
     7e4:	df 93       	push	r29
     7e6:	cf 93       	push	r28
     7e8:	00 d0       	rcall	.+0      	; 0x7ea <scall_sig_broadcast+0x6>
     7ea:	cd b7       	in	r28, 0x3d	; 61
     7ec:	de b7       	in	r29, 0x3e	; 62
     7ee:	9a 83       	std	Y+2, r25	; 0x02
     7f0:	89 83       	std	Y+1, r24	; 0x01
    sig_broadcast_isr( (sig_t *)arg );
     7f2:	89 81       	ldd	r24, Y+1	; 0x01
     7f4:	9a 81       	ldd	r25, Y+2	; 0x02
     7f6:	0e 94 89 10 	call	0x2112	; 0x2112 <sig_broadcast_isr>
}
     7fa:	0f 90       	pop	r0
     7fc:	0f 90       	pop	r0
     7fe:	cf 91       	pop	r28
     800:	df 91       	pop	r29
     802:	08 95       	ret

00000804 <scall_sem_init>:
}
///=================================================================
///                         Семафоры
//12
void scall_sem_init( void * arg )
{
     804:	df 93       	push	r29
     806:	cf 93       	push	r28
     808:	00 d0       	rcall	.+0      	; 0x80a <scall_sem_init+0x6>
     80a:	cd b7       	in	r28, 0x3d	; 61
     80c:	de b7       	in	r29, 0x3e	; 62
     80e:	9a 83       	std	Y+2, r25	; 0x02
     810:	89 83       	std	Y+1, r24	; 0x01
    sem_init_isr( ((sem_init_arg_t *)arg)->sem, ((sem_init_arg_t *)arg)->count );
     812:	e9 81       	ldd	r30, Y+1	; 0x01
     814:	fa 81       	ldd	r31, Y+2	; 0x02
     816:	80 81       	ld	r24, Z
     818:	91 81       	ldd	r25, Z+1	; 0x01
     81a:	e9 81       	ldd	r30, Y+1	; 0x01
     81c:	fa 81       	ldd	r31, Y+2	; 0x02
     81e:	22 81       	ldd	r18, Z+2	; 0x02
     820:	33 81       	ldd	r19, Z+3	; 0x03
     822:	b9 01       	movw	r22, r18
     824:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <sem_init_isr>
}
     828:	0f 90       	pop	r0
     82a:	0f 90       	pop	r0
     82c:	cf 91       	pop	r28
     82e:	df 91       	pop	r29
     830:	08 95       	ret

00000832 <scall_sem_lock>:
    syscall( 12, (void *)&scarg );
}
//----------------------------------------------------------------------
//13
void scall_sem_lock( void * arg )
{
     832:	0f 93       	push	r16
     834:	1f 93       	push	r17
     836:	df 93       	push	r29
     838:	cf 93       	push	r28
     83a:	00 d0       	rcall	.+0      	; 0x83c <scall_sem_lock+0xa>
     83c:	cd b7       	in	r28, 0x3d	; 61
     83e:	de b7       	in	r29, 0x3e	; 62
     840:	9a 83       	std	Y+2, r25	; 0x02
     842:	89 83       	std	Y+1, r24	; 0x01
    ((sem_lock_arg_t *)arg)->scall_ret = _sem_lock( ((sem_lock_arg_t *)arg)->sem );
     844:	09 81       	ldd	r16, Y+1	; 0x01
     846:	1a 81       	ldd	r17, Y+2	; 0x02
     848:	e9 81       	ldd	r30, Y+1	; 0x01
     84a:	fa 81       	ldd	r31, Y+2	; 0x02
     84c:	80 81       	ld	r24, Z
     84e:	91 81       	ldd	r25, Z+1	; 0x01
     850:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <_sem_lock>
     854:	f8 01       	movw	r30, r16
     856:	82 83       	std	Z+2, r24	; 0x02
}
     858:	0f 90       	pop	r0
     85a:	0f 90       	pop	r0
     85c:	cf 91       	pop	r28
     85e:	df 91       	pop	r29
     860:	1f 91       	pop	r17
     862:	0f 91       	pop	r16
     864:	08 95       	ret

00000866 <sem_lock>:
const flag_t all_flags_mask = ~(flag_t)0;
bool_t sem_lock( sem_t * sem )
{
     866:	df 93       	push	r29
     868:	cf 93       	push	r28
     86a:	00 d0       	rcall	.+0      	; 0x86c <sem_lock+0x6>
     86c:	00 d0       	rcall	.+0      	; 0x86e <sem_lock+0x8>
     86e:	0f 92       	push	r0
     870:	cd b7       	in	r28, 0x3d	; 61
     872:	de b7       	in	r29, 0x3e	; 62
     874:	9d 83       	std	Y+5, r25	; 0x05
     876:	8c 83       	std	Y+4, r24	; 0x04

    sem_lock_arg_t scarg;
    scarg.sem = sem;
     878:	8c 81       	ldd	r24, Y+4	; 0x04
     87a:	9d 81       	ldd	r25, Y+5	; 0x05
     87c:	9a 83       	std	Y+2, r25	; 0x02
     87e:	89 83       	std	Y+1, r24	; 0x01
    syscall( 13, (void *)&scarg );
     880:	8d e0       	ldi	r24, 0x0D	; 13
     882:	9e 01       	movw	r18, r28
     884:	2f 5f       	subi	r18, 0xFF	; 255
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	b9 01       	movw	r22, r18
     88a:	0e 94 4a 02 	call	0x494	; 0x494 <syscall>
    return scarg.scall_ret;
     88e:	8b 81       	ldd	r24, Y+3	; 0x03
}
     890:	0f 90       	pop	r0
     892:	0f 90       	pop	r0
     894:	0f 90       	pop	r0
     896:	0f 90       	pop	r0
     898:	0f 90       	pop	r0
     89a:	cf 91       	pop	r28
     89c:	df 91       	pop	r29
     89e:	08 95       	ret

000008a0 <scall_sem_unlock>:
//----------------------------------------------------------------------
//14
void scall_sem_unlock( void * arg )
{
     8a0:	df 93       	push	r29
     8a2:	cf 93       	push	r28
     8a4:	00 d0       	rcall	.+0      	; 0x8a6 <scall_sem_unlock+0x6>
     8a6:	cd b7       	in	r28, 0x3d	; 61
     8a8:	de b7       	in	r29, 0x3e	; 62
     8aa:	9a 83       	std	Y+2, r25	; 0x02
     8ac:	89 83       	std	Y+1, r24	; 0x01
    _sem_unlock( (sem_t *)arg );
     8ae:	89 81       	ldd	r24, Y+1	; 0x01
     8b0:	9a 81       	ldd	r25, Y+2	; 0x02
     8b2:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <_sem_unlock>
}
     8b6:	0f 90       	pop	r0
     8b8:	0f 90       	pop	r0
     8ba:	cf 91       	pop	r28
     8bc:	df 91       	pop	r29
     8be:	08 95       	ret

000008c0 <sem_unlock>:
void sem_unlock( sem_t * sem )
{
     8c0:	df 93       	push	r29
     8c2:	cf 93       	push	r28
     8c4:	00 d0       	rcall	.+0      	; 0x8c6 <sem_unlock+0x6>
     8c6:	cd b7       	in	r28, 0x3d	; 61
     8c8:	de b7       	in	r29, 0x3e	; 62
     8ca:	9a 83       	std	Y+2, r25	; 0x02
     8cc:	89 83       	std	Y+1, r24	; 0x01
    syscall( 14, (void *)sem );
     8ce:	29 81       	ldd	r18, Y+1	; 0x01
     8d0:	3a 81       	ldd	r19, Y+2	; 0x02
     8d2:	8e e0       	ldi	r24, 0x0E	; 14
     8d4:	b9 01       	movw	r22, r18
     8d6:	0e 94 4a 02 	call	0x494	; 0x494 <syscall>
}
     8da:	0f 90       	pop	r0
     8dc:	0f 90       	pop	r0
     8de:	cf 91       	pop	r28
     8e0:	df 91       	pop	r29
     8e2:	08 95       	ret

000008e4 <scall_mutex_init>:
///=================================================================
///                         Мьютексы
//15
void scall_mutex_init(void * arg)
{
     8e4:	df 93       	push	r29
     8e6:	cf 93       	push	r28
     8e8:	00 d0       	rcall	.+0      	; 0x8ea <scall_mutex_init+0x6>
     8ea:	cd b7       	in	r28, 0x3d	; 61
     8ec:	de b7       	in	r29, 0x3e	; 62
     8ee:	9a 83       	std	Y+2, r25	; 0x02
     8f0:	89 83       	std	Y+1, r24	; 0x01
    mutex_init_isr(
     8f2:	e9 81       	ldd	r30, Y+1	; 0x01
     8f4:	fa 81       	ldd	r31, Y+2	; 0x02
     8f6:	80 81       	ld	r24, Z
     8f8:	91 81       	ldd	r25, Z+1	; 0x01
     8fa:	e9 81       	ldd	r30, Y+1	; 0x01
     8fc:	fa 81       	ldd	r31, Y+2	; 0x02
     8fe:	22 81       	ldd	r18, Z+2	; 0x02
     900:	62 2f       	mov	r22, r18
     902:	0e 94 03 0a 	call	0x1406	; 0x1406 <mutex_init_isr>
               ((mutex_init_arg_t *)arg)->mutex
#ifdef CONFIG_USE_HIGHEST_LOCKER
               ,((mutex_init_arg_t *)arg)->prio
#endif // CONFIG_USE_HIGHEST_LOCKER
               );
}
     906:	0f 90       	pop	r0
     908:	0f 90       	pop	r0
     90a:	cf 91       	pop	r28
     90c:	df 91       	pop	r29
     90e:	08 95       	ret

00000910 <scall_mutex_lock>:
    syscall( 15, (void *)&scarg );
}
//----------------------------------------------------------------------
//16
void scall_mutex_lock(void * arg)
{
     910:	0f 93       	push	r16
     912:	1f 93       	push	r17
     914:	df 93       	push	r29
     916:	cf 93       	push	r28
     918:	00 d0       	rcall	.+0      	; 0x91a <scall_mutex_lock+0xa>
     91a:	cd b7       	in	r28, 0x3d	; 61
     91c:	de b7       	in	r29, 0x3e	; 62
     91e:	9a 83       	std	Y+2, r25	; 0x02
     920:	89 83       	std	Y+1, r24	; 0x01
    ((mutex_lock_arg_t *)arg)->scall_ret = _mutex_lock( ((mutex_lock_arg_t *)arg)->mutex );
     922:	09 81       	ldd	r16, Y+1	; 0x01
     924:	1a 81       	ldd	r17, Y+2	; 0x02
     926:	e9 81       	ldd	r30, Y+1	; 0x01
     928:	fa 81       	ldd	r31, Y+2	; 0x02
     92a:	80 81       	ld	r24, Z
     92c:	91 81       	ldd	r25, Z+1	; 0x01
     92e:	0e 94 1e 0a 	call	0x143c	; 0x143c <_mutex_lock>
     932:	f8 01       	movw	r30, r16
     934:	82 83       	std	Z+2, r24	; 0x02
}
     936:	0f 90       	pop	r0
     938:	0f 90       	pop	r0
     93a:	cf 91       	pop	r28
     93c:	df 91       	pop	r29
     93e:	1f 91       	pop	r17
     940:	0f 91       	pop	r16
     942:	08 95       	ret

00000944 <scall_mutex_try_lock>:
}
// Захват
//----------------------------------------------------------------------
//17
void scall_mutex_try_lock(void * arg)
{
     944:	0f 93       	push	r16
     946:	1f 93       	push	r17
     948:	df 93       	push	r29
     94a:	cf 93       	push	r28
     94c:	00 d0       	rcall	.+0      	; 0x94e <scall_mutex_try_lock+0xa>
     94e:	cd b7       	in	r28, 0x3d	; 61
     950:	de b7       	in	r29, 0x3e	; 62
     952:	9a 83       	std	Y+2, r25	; 0x02
     954:	89 83       	std	Y+1, r24	; 0x01
    ((mutex_lock_arg_t *)arg)->scall_ret = _mutex_try_lock( ((mutex_lock_arg_t *)arg)->mutex );
     956:	09 81       	ldd	r16, Y+1	; 0x01
     958:	1a 81       	ldd	r17, Y+2	; 0x02
     95a:	e9 81       	ldd	r30, Y+1	; 0x01
     95c:	fa 81       	ldd	r31, Y+2	; 0x02
     95e:	80 81       	ld	r24, Z
     960:	91 81       	ldd	r25, Z+1	; 0x01
     962:	0e 94 66 0a 	call	0x14cc	; 0x14cc <_mutex_try_lock>
     966:	f8 01       	movw	r30, r16
     968:	82 83       	std	Z+2, r24	; 0x02
}
     96a:	0f 90       	pop	r0
     96c:	0f 90       	pop	r0
     96e:	cf 91       	pop	r28
     970:	df 91       	pop	r29
     972:	1f 91       	pop	r17
     974:	0f 91       	pop	r16
     976:	08 95       	ret

00000978 <scall_mutex_unlock>:
    return scarg.scall_ret;
}
//----------------------------------------------------------------------
//18
void scall_mutex_unlock(void * arg)
{
     978:	df 93       	push	r29
     97a:	cf 93       	push	r28
     97c:	00 d0       	rcall	.+0      	; 0x97e <scall_mutex_unlock+0x6>
     97e:	cd b7       	in	r28, 0x3d	; 61
     980:	de b7       	in	r29, 0x3e	; 62
     982:	9a 83       	std	Y+2, r25	; 0x02
     984:	89 83       	std	Y+1, r24	; 0x01
    _mutex_unlock( (mutex_t *)arg );
     986:	89 81       	ldd	r24, Y+1	; 0x01
     988:	9a 81       	ldd	r25, Y+2	; 0x02
     98a:	0e 94 92 0a 	call	0x1524	; 0x1524 <_mutex_unlock>
}
     98e:	0f 90       	pop	r0
     990:	0f 90       	pop	r0
     992:	cf 91       	pop	r28
     994:	df 91       	pop	r29
     996:	08 95       	ret

00000998 <osbme_init_stack>:
*                                                                                        *
*****************************************************************************************/
#include <avr/io.h>
#include "../../osbme.h"
void * osbme_init_stack( void * top_of_stack, osbme_code_t code, void * arg )
{
     998:	df 93       	push	r29
     99a:	cf 93       	push	r28
     99c:	cd b7       	in	r28, 0x3d	; 61
     99e:	de b7       	in	r29, 0x3e	; 62
     9a0:	2a 97       	sbiw	r28, 0x0a	; 10
     9a2:	0f b6       	in	r0, 0x3f	; 63
     9a4:	f8 94       	cli
     9a6:	de bf       	out	0x3e, r29	; 62
     9a8:	0f be       	out	0x3f, r0	; 63
     9aa:	cd bf       	out	0x3d, r28	; 61
     9ac:	9e 83       	std	Y+6, r25	; 0x06
     9ae:	8d 83       	std	Y+5, r24	; 0x05
     9b0:	78 87       	std	Y+8, r23	; 0x08
     9b2:	6f 83       	std	Y+7, r22	; 0x07
     9b4:	5a 87       	std	Y+10, r21	; 0x0a
     9b6:	49 87       	std	Y+9, r20	; 0x09
    char * tos = (char *)top_of_stack;
     9b8:	8d 81       	ldd	r24, Y+5	; 0x05
     9ba:	9e 81       	ldd	r25, Y+6	; 0x06
     9bc:	9c 83       	std	Y+4, r25	; 0x04
     9be:	8b 83       	std	Y+3, r24	; 0x03
    //*tos-- = 0x11;
    //*tos-- = 0x22;
    //*tos-- = 0x33;

    // return address
    unsigned short tmp = (unsigned short)code;
     9c0:	8f 81       	ldd	r24, Y+7	; 0x07
     9c2:	98 85       	ldd	r25, Y+8	; 0x08
     9c4:	9a 83       	std	Y+2, r25	; 0x02
     9c6:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (char)(tmp&(unsigned short)0x00ff);
     9c8:	89 81       	ldd	r24, Y+1	; 0x01
     9ca:	eb 81       	ldd	r30, Y+3	; 0x03
     9cc:	fc 81       	ldd	r31, Y+4	; 0x04
     9ce:	80 83       	st	Z, r24
     9d0:	8b 81       	ldd	r24, Y+3	; 0x03
     9d2:	9c 81       	ldd	r25, Y+4	; 0x04
     9d4:	01 97       	sbiw	r24, 0x01	; 1
     9d6:	9c 83       	std	Y+4, r25	; 0x04
     9d8:	8b 83       	std	Y+3, r24	; 0x03
    tmp>>=8;
     9da:	89 81       	ldd	r24, Y+1	; 0x01
     9dc:	9a 81       	ldd	r25, Y+2	; 0x02
     9de:	89 2f       	mov	r24, r25
     9e0:	99 27       	eor	r25, r25
     9e2:	9a 83       	std	Y+2, r25	; 0x02
     9e4:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (char)(tmp&(unsigned short)0x00ff);
     9e6:	89 81       	ldd	r24, Y+1	; 0x01
     9e8:	eb 81       	ldd	r30, Y+3	; 0x03
     9ea:	fc 81       	ldd	r31, Y+4	; 0x04
     9ec:	80 83       	st	Z, r24
     9ee:	8b 81       	ldd	r24, Y+3	; 0x03
     9f0:	9c 81       	ldd	r25, Y+4	; 0x04
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	9c 83       	std	Y+4, r25	; 0x04
     9f6:	8b 83       	std	Y+3, r24	; 0x03

    // s
    *tos-- = 0x00;
     9f8:	eb 81       	ldd	r30, Y+3	; 0x03
     9fa:	fc 81       	ldd	r31, Y+4	; 0x04
     9fc:	10 82       	st	Z, r1
     9fe:	8b 81       	ldd	r24, Y+3	; 0x03
     a00:	9c 81       	ldd	r25, Y+4	; 0x04
     a02:	01 97       	sbiw	r24, 0x01	; 1
     a04:	9c 83       	std	Y+4, r25	; 0x04
     a06:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x00;// r1 must B 0
     a08:	eb 81       	ldd	r30, Y+3	; 0x03
     a0a:	fc 81       	ldd	r31, Y+4	; 0x04
     a0c:	10 82       	st	Z, r1
     a0e:	8b 81       	ldd	r24, Y+3	; 0x03
     a10:	9c 81       	ldd	r25, Y+4	; 0x04
     a12:	01 97       	sbiw	r24, 0x01	; 1
     a14:	9c 83       	std	Y+4, r25	; 0x04
     a16:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x02;// r2
     a18:	eb 81       	ldd	r30, Y+3	; 0x03
     a1a:	fc 81       	ldd	r31, Y+4	; 0x04
     a1c:	82 e0       	ldi	r24, 0x02	; 2
     a1e:	80 83       	st	Z, r24
     a20:	8b 81       	ldd	r24, Y+3	; 0x03
     a22:	9c 81       	ldd	r25, Y+4	; 0x04
     a24:	01 97       	sbiw	r24, 0x01	; 1
     a26:	9c 83       	std	Y+4, r25	; 0x04
     a28:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x80;// SREG: enable interrupts
     a2a:	eb 81       	ldd	r30, Y+3	; 0x03
     a2c:	fc 81       	ldd	r31, Y+4	; 0x04
     a2e:	80 e8       	ldi	r24, 0x80	; 128
     a30:	80 83       	st	Z, r24
     a32:	8b 81       	ldd	r24, Y+3	; 0x03
     a34:	9c 81       	ldd	r25, Y+4	; 0x04
     a36:	01 97       	sbiw	r24, 0x01	; 1
     a38:	9c 83       	std	Y+4, r25	; 0x04
     a3a:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x03;
     a3c:	eb 81       	ldd	r30, Y+3	; 0x03
     a3e:	fc 81       	ldd	r31, Y+4	; 0x04
     a40:	83 e0       	ldi	r24, 0x03	; 3
     a42:	80 83       	st	Z, r24
     a44:	8b 81       	ldd	r24, Y+3	; 0x03
     a46:	9c 81       	ldd	r25, Y+4	; 0x04
     a48:	01 97       	sbiw	r24, 0x01	; 1
     a4a:	9c 83       	std	Y+4, r25	; 0x04
     a4c:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x04;
     a4e:	eb 81       	ldd	r30, Y+3	; 0x03
     a50:	fc 81       	ldd	r31, Y+4	; 0x04
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	80 83       	st	Z, r24
     a56:	8b 81       	ldd	r24, Y+3	; 0x03
     a58:	9c 81       	ldd	r25, Y+4	; 0x04
     a5a:	01 97       	sbiw	r24, 0x01	; 1
     a5c:	9c 83       	std	Y+4, r25	; 0x04
     a5e:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x05;
     a60:	eb 81       	ldd	r30, Y+3	; 0x03
     a62:	fc 81       	ldd	r31, Y+4	; 0x04
     a64:	85 e0       	ldi	r24, 0x05	; 5
     a66:	80 83       	st	Z, r24
     a68:	8b 81       	ldd	r24, Y+3	; 0x03
     a6a:	9c 81       	ldd	r25, Y+4	; 0x04
     a6c:	01 97       	sbiw	r24, 0x01	; 1
     a6e:	9c 83       	std	Y+4, r25	; 0x04
     a70:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x06;
     a72:	eb 81       	ldd	r30, Y+3	; 0x03
     a74:	fc 81       	ldd	r31, Y+4	; 0x04
     a76:	86 e0       	ldi	r24, 0x06	; 6
     a78:	80 83       	st	Z, r24
     a7a:	8b 81       	ldd	r24, Y+3	; 0x03
     a7c:	9c 81       	ldd	r25, Y+4	; 0x04
     a7e:	01 97       	sbiw	r24, 0x01	; 1
     a80:	9c 83       	std	Y+4, r25	; 0x04
     a82:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x07;
     a84:	eb 81       	ldd	r30, Y+3	; 0x03
     a86:	fc 81       	ldd	r31, Y+4	; 0x04
     a88:	87 e0       	ldi	r24, 0x07	; 7
     a8a:	80 83       	st	Z, r24
     a8c:	8b 81       	ldd	r24, Y+3	; 0x03
     a8e:	9c 81       	ldd	r25, Y+4	; 0x04
     a90:	01 97       	sbiw	r24, 0x01	; 1
     a92:	9c 83       	std	Y+4, r25	; 0x04
     a94:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x08;
     a96:	eb 81       	ldd	r30, Y+3	; 0x03
     a98:	fc 81       	ldd	r31, Y+4	; 0x04
     a9a:	88 e0       	ldi	r24, 0x08	; 8
     a9c:	80 83       	st	Z, r24
     a9e:	8b 81       	ldd	r24, Y+3	; 0x03
     aa0:	9c 81       	ldd	r25, Y+4	; 0x04
     aa2:	01 97       	sbiw	r24, 0x01	; 1
     aa4:	9c 83       	std	Y+4, r25	; 0x04
     aa6:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x09;
     aa8:	eb 81       	ldd	r30, Y+3	; 0x03
     aaa:	fc 81       	ldd	r31, Y+4	; 0x04
     aac:	89 e0       	ldi	r24, 0x09	; 9
     aae:	80 83       	st	Z, r24
     ab0:	8b 81       	ldd	r24, Y+3	; 0x03
     ab2:	9c 81       	ldd	r25, Y+4	; 0x04
     ab4:	01 97       	sbiw	r24, 0x01	; 1
     ab6:	9c 83       	std	Y+4, r25	; 0x04
     ab8:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x10;
     aba:	eb 81       	ldd	r30, Y+3	; 0x03
     abc:	fc 81       	ldd	r31, Y+4	; 0x04
     abe:	80 e1       	ldi	r24, 0x10	; 16
     ac0:	80 83       	st	Z, r24
     ac2:	8b 81       	ldd	r24, Y+3	; 0x03
     ac4:	9c 81       	ldd	r25, Y+4	; 0x04
     ac6:	01 97       	sbiw	r24, 0x01	; 1
     ac8:	9c 83       	std	Y+4, r25	; 0x04
     aca:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x11;
     acc:	eb 81       	ldd	r30, Y+3	; 0x03
     ace:	fc 81       	ldd	r31, Y+4	; 0x04
     ad0:	81 e1       	ldi	r24, 0x11	; 17
     ad2:	80 83       	st	Z, r24
     ad4:	8b 81       	ldd	r24, Y+3	; 0x03
     ad6:	9c 81       	ldd	r25, Y+4	; 0x04
     ad8:	01 97       	sbiw	r24, 0x01	; 1
     ada:	9c 83       	std	Y+4, r25	; 0x04
     adc:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x12;
     ade:	eb 81       	ldd	r30, Y+3	; 0x03
     ae0:	fc 81       	ldd	r31, Y+4	; 0x04
     ae2:	82 e1       	ldi	r24, 0x12	; 18
     ae4:	80 83       	st	Z, r24
     ae6:	8b 81       	ldd	r24, Y+3	; 0x03
     ae8:	9c 81       	ldd	r25, Y+4	; 0x04
     aea:	01 97       	sbiw	r24, 0x01	; 1
     aec:	9c 83       	std	Y+4, r25	; 0x04
     aee:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x13;
     af0:	eb 81       	ldd	r30, Y+3	; 0x03
     af2:	fc 81       	ldd	r31, Y+4	; 0x04
     af4:	83 e1       	ldi	r24, 0x13	; 19
     af6:	80 83       	st	Z, r24
     af8:	8b 81       	ldd	r24, Y+3	; 0x03
     afa:	9c 81       	ldd	r25, Y+4	; 0x04
     afc:	01 97       	sbiw	r24, 0x01	; 1
     afe:	9c 83       	std	Y+4, r25	; 0x04
     b00:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x14;
     b02:	eb 81       	ldd	r30, Y+3	; 0x03
     b04:	fc 81       	ldd	r31, Y+4	; 0x04
     b06:	84 e1       	ldi	r24, 0x14	; 20
     b08:	80 83       	st	Z, r24
     b0a:	8b 81       	ldd	r24, Y+3	; 0x03
     b0c:	9c 81       	ldd	r25, Y+4	; 0x04
     b0e:	01 97       	sbiw	r24, 0x01	; 1
     b10:	9c 83       	std	Y+4, r25	; 0x04
     b12:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x15;
     b14:	eb 81       	ldd	r30, Y+3	; 0x03
     b16:	fc 81       	ldd	r31, Y+4	; 0x04
     b18:	85 e1       	ldi	r24, 0x15	; 21
     b1a:	80 83       	st	Z, r24
     b1c:	8b 81       	ldd	r24, Y+3	; 0x03
     b1e:	9c 81       	ldd	r25, Y+4	; 0x04
     b20:	01 97       	sbiw	r24, 0x01	; 1
     b22:	9c 83       	std	Y+4, r25	; 0x04
     b24:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x16;
     b26:	eb 81       	ldd	r30, Y+3	; 0x03
     b28:	fc 81       	ldd	r31, Y+4	; 0x04
     b2a:	86 e1       	ldi	r24, 0x16	; 22
     b2c:	80 83       	st	Z, r24
     b2e:	8b 81       	ldd	r24, Y+3	; 0x03
     b30:	9c 81       	ldd	r25, Y+4	; 0x04
     b32:	01 97       	sbiw	r24, 0x01	; 1
     b34:	9c 83       	std	Y+4, r25	; 0x04
     b36:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x17;
     b38:	eb 81       	ldd	r30, Y+3	; 0x03
     b3a:	fc 81       	ldd	r31, Y+4	; 0x04
     b3c:	87 e1       	ldi	r24, 0x17	; 23
     b3e:	80 83       	st	Z, r24
     b40:	8b 81       	ldd	r24, Y+3	; 0x03
     b42:	9c 81       	ldd	r25, Y+4	; 0x04
     b44:	01 97       	sbiw	r24, 0x01	; 1
     b46:	9c 83       	std	Y+4, r25	; 0x04
     b48:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x18;
     b4a:	eb 81       	ldd	r30, Y+3	; 0x03
     b4c:	fc 81       	ldd	r31, Y+4	; 0x04
     b4e:	88 e1       	ldi	r24, 0x18	; 24
     b50:	80 83       	st	Z, r24
     b52:	8b 81       	ldd	r24, Y+3	; 0x03
     b54:	9c 81       	ldd	r25, Y+4	; 0x04
     b56:	01 97       	sbiw	r24, 0x01	; 1
     b58:	9c 83       	std	Y+4, r25	; 0x04
     b5a:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x19;
     b5c:	eb 81       	ldd	r30, Y+3	; 0x03
     b5e:	fc 81       	ldd	r31, Y+4	; 0x04
     b60:	89 e1       	ldi	r24, 0x19	; 25
     b62:	80 83       	st	Z, r24
     b64:	8b 81       	ldd	r24, Y+3	; 0x03
     b66:	9c 81       	ldd	r25, Y+4	; 0x04
     b68:	01 97       	sbiw	r24, 0x01	; 1
     b6a:	9c 83       	std	Y+4, r25	; 0x04
     b6c:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x20;
     b6e:	eb 81       	ldd	r30, Y+3	; 0x03
     b70:	fc 81       	ldd	r31, Y+4	; 0x04
     b72:	80 e2       	ldi	r24, 0x20	; 32
     b74:	80 83       	st	Z, r24
     b76:	8b 81       	ldd	r24, Y+3	; 0x03
     b78:	9c 81       	ldd	r25, Y+4	; 0x04
     b7a:	01 97       	sbiw	r24, 0x01	; 1
     b7c:	9c 83       	std	Y+4, r25	; 0x04
     b7e:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x21;
     b80:	eb 81       	ldd	r30, Y+3	; 0x03
     b82:	fc 81       	ldd	r31, Y+4	; 0x04
     b84:	81 e2       	ldi	r24, 0x21	; 33
     b86:	80 83       	st	Z, r24
     b88:	8b 81       	ldd	r24, Y+3	; 0x03
     b8a:	9c 81       	ldd	r25, Y+4	; 0x04
     b8c:	01 97       	sbiw	r24, 0x01	; 1
     b8e:	9c 83       	std	Y+4, r25	; 0x04
     b90:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x22;
     b92:	eb 81       	ldd	r30, Y+3	; 0x03
     b94:	fc 81       	ldd	r31, Y+4	; 0x04
     b96:	82 e2       	ldi	r24, 0x22	; 34
     b98:	80 83       	st	Z, r24
     b9a:	8b 81       	ldd	r24, Y+3	; 0x03
     b9c:	9c 81       	ldd	r25, Y+4	; 0x04
     b9e:	01 97       	sbiw	r24, 0x01	; 1
     ba0:	9c 83       	std	Y+4, r25	; 0x04
     ba2:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x23;
     ba4:	eb 81       	ldd	r30, Y+3	; 0x03
     ba6:	fc 81       	ldd	r31, Y+4	; 0x04
     ba8:	83 e2       	ldi	r24, 0x23	; 35
     baa:	80 83       	st	Z, r24
     bac:	8b 81       	ldd	r24, Y+3	; 0x03
     bae:	9c 81       	ldd	r25, Y+4	; 0x04
     bb0:	01 97       	sbiw	r24, 0x01	; 1
     bb2:	9c 83       	std	Y+4, r25	; 0x04
     bb4:	8b 83       	std	Y+3, r24	; 0x03

    tmp = (unsigned short)arg;
     bb6:	89 85       	ldd	r24, Y+9	; 0x09
     bb8:	9a 85       	ldd	r25, Y+10	; 0x0a
     bba:	9a 83       	std	Y+2, r25	; 0x02
     bbc:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (char)(tmp&(unsigned short)0x00ff); // r24 LSByte of arg
     bbe:	89 81       	ldd	r24, Y+1	; 0x01
     bc0:	eb 81       	ldd	r30, Y+3	; 0x03
     bc2:	fc 81       	ldd	r31, Y+4	; 0x04
     bc4:	80 83       	st	Z, r24
     bc6:	8b 81       	ldd	r24, Y+3	; 0x03
     bc8:	9c 81       	ldd	r25, Y+4	; 0x04
     bca:	01 97       	sbiw	r24, 0x01	; 1
     bcc:	9c 83       	std	Y+4, r25	; 0x04
     bce:	8b 83       	std	Y+3, r24	; 0x03
    tmp>>=8;
     bd0:	89 81       	ldd	r24, Y+1	; 0x01
     bd2:	9a 81       	ldd	r25, Y+2	; 0x02
     bd4:	89 2f       	mov	r24, r25
     bd6:	99 27       	eor	r25, r25
     bd8:	9a 83       	std	Y+2, r25	; 0x02
     bda:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (char)(tmp&(unsigned short)0x00ff); // r25 MSByte of arg
     bdc:	89 81       	ldd	r24, Y+1	; 0x01
     bde:	eb 81       	ldd	r30, Y+3	; 0x03
     be0:	fc 81       	ldd	r31, Y+4	; 0x04
     be2:	80 83       	st	Z, r24
     be4:	8b 81       	ldd	r24, Y+3	; 0x03
     be6:	9c 81       	ldd	r25, Y+4	; 0x04
     be8:	01 97       	sbiw	r24, 0x01	; 1
     bea:	9c 83       	std	Y+4, r25	; 0x04
     bec:	8b 83       	std	Y+3, r24	; 0x03

    *tos-- = 0x26;
     bee:	eb 81       	ldd	r30, Y+3	; 0x03
     bf0:	fc 81       	ldd	r31, Y+4	; 0x04
     bf2:	86 e2       	ldi	r24, 0x26	; 38
     bf4:	80 83       	st	Z, r24
     bf6:	8b 81       	ldd	r24, Y+3	; 0x03
     bf8:	9c 81       	ldd	r25, Y+4	; 0x04
     bfa:	01 97       	sbiw	r24, 0x01	; 1
     bfc:	9c 83       	std	Y+4, r25	; 0x04
     bfe:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x27;
     c00:	eb 81       	ldd	r30, Y+3	; 0x03
     c02:	fc 81       	ldd	r31, Y+4	; 0x04
     c04:	87 e2       	ldi	r24, 0x27	; 39
     c06:	80 83       	st	Z, r24
     c08:	8b 81       	ldd	r24, Y+3	; 0x03
     c0a:	9c 81       	ldd	r25, Y+4	; 0x04
     c0c:	01 97       	sbiw	r24, 0x01	; 1
     c0e:	9c 83       	std	Y+4, r25	; 0x04
     c10:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x28;
     c12:	eb 81       	ldd	r30, Y+3	; 0x03
     c14:	fc 81       	ldd	r31, Y+4	; 0x04
     c16:	88 e2       	ldi	r24, 0x28	; 40
     c18:	80 83       	st	Z, r24
     c1a:	8b 81       	ldd	r24, Y+3	; 0x03
     c1c:	9c 81       	ldd	r25, Y+4	; 0x04
     c1e:	01 97       	sbiw	r24, 0x01	; 1
     c20:	9c 83       	std	Y+4, r25	; 0x04
     c22:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x29;
     c24:	eb 81       	ldd	r30, Y+3	; 0x03
     c26:	fc 81       	ldd	r31, Y+4	; 0x04
     c28:	89 e2       	ldi	r24, 0x29	; 41
     c2a:	80 83       	st	Z, r24
     c2c:	8b 81       	ldd	r24, Y+3	; 0x03
     c2e:	9c 81       	ldd	r25, Y+4	; 0x04
     c30:	01 97       	sbiw	r24, 0x01	; 1
     c32:	9c 83       	std	Y+4, r25	; 0x04
     c34:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x30;
     c36:	eb 81       	ldd	r30, Y+3	; 0x03
     c38:	fc 81       	ldd	r31, Y+4	; 0x04
     c3a:	80 e3       	ldi	r24, 0x30	; 48
     c3c:	80 83       	st	Z, r24
     c3e:	8b 81       	ldd	r24, Y+3	; 0x03
     c40:	9c 81       	ldd	r25, Y+4	; 0x04
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	9c 83       	std	Y+4, r25	; 0x04
     c46:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x31;
     c48:	eb 81       	ldd	r30, Y+3	; 0x03
     c4a:	fc 81       	ldd	r31, Y+4	; 0x04
     c4c:	81 e3       	ldi	r24, 0x31	; 49
     c4e:	80 83       	st	Z, r24
     c50:	8b 81       	ldd	r24, Y+3	; 0x03
     c52:	9c 81       	ldd	r25, Y+4	; 0x04
     c54:	01 97       	sbiw	r24, 0x01	; 1
     c56:	9c 83       	std	Y+4, r25	; 0x04
     c58:	8b 83       	std	Y+3, r24	; 0x03
#ifdef RAMPZ
    *tos-- = 0xff;
#endif
    return((void *)tos);
     c5a:	8b 81       	ldd	r24, Y+3	; 0x03
     c5c:	9c 81       	ldd	r25, Y+4	; 0x04
}
     c5e:	2a 96       	adiw	r28, 0x0a	; 10
     c60:	0f b6       	in	r0, 0x3f	; 63
     c62:	f8 94       	cli
     c64:	de bf       	out	0x3e, r29	; 62
     c66:	0f be       	out	0x3f, r0	; 63
     c68:	cd bf       	out	0x3d, r28	; 61
     c6a:	cf 91       	pop	r28
     c6c:	df 91       	pop	r29
     c6e:	08 95       	ret

00000c70 <enter_crit_sec>:
    if( kernel.sched[core].nested_crit_sec == (count_t)0 )enable_interrupts();
}

#else
void enter_crit_sec(void)
{
     c70:	df 93       	push	r29
     c72:	cf 93       	push	r28
     c74:	cd b7       	in	r28, 0x3d	; 61
     c76:	de b7       	in	r29, 0x3e	; 62
    disable_interrupts();
     c78:	0e 94 bc 00 	call	0x178	; 0x178 <disable_interrupts>
    kernel.sched.nested_crit_sec++;
     c7c:	80 91 c6 01 	lds	r24, 0x01C6
     c80:	90 91 c7 01 	lds	r25, 0x01C7
     c84:	01 96       	adiw	r24, 0x01	; 1
     c86:	90 93 c7 01 	sts	0x01C7, r25
     c8a:	80 93 c6 01 	sts	0x01C6, r24
}
     c8e:	cf 91       	pop	r28
     c90:	df 91       	pop	r29
     c92:	08 95       	ret

00000c94 <exit_crit_sec>:
void exit_crit_sec(void)
{
     c94:	df 93       	push	r29
     c96:	cf 93       	push	r28
     c98:	cd b7       	in	r28, 0x3d	; 61
     c9a:	de b7       	in	r29, 0x3e	; 62
    if( kernel.sched.nested_crit_sec != (count_t)0 )kernel.sched.nested_crit_sec--;
     c9c:	80 91 c6 01 	lds	r24, 0x01C6
     ca0:	90 91 c7 01 	lds	r25, 0x01C7
     ca4:	00 97       	sbiw	r24, 0x00	; 0
     ca6:	49 f0       	breq	.+18     	; 0xcba <exit_crit_sec+0x26>
     ca8:	80 91 c6 01 	lds	r24, 0x01C6
     cac:	90 91 c7 01 	lds	r25, 0x01C7
     cb0:	01 97       	sbiw	r24, 0x01	; 1
     cb2:	90 93 c7 01 	sts	0x01C7, r25
     cb6:	80 93 c6 01 	sts	0x01C6, r24
    if( kernel.sched.nested_crit_sec == (count_t)0 )enable_interrupts();
     cba:	80 91 c6 01 	lds	r24, 0x01C6
     cbe:	90 91 c7 01 	lds	r25, 0x01C7
     cc2:	00 97       	sbiw	r24, 0x00	; 0
     cc4:	11 f4       	brne	.+4      	; 0xcca <exit_crit_sec+0x36>
     cc6:	0e 94 c4 00 	call	0x188	; 0x188 <enable_interrupts>
}
     cca:	cf 91       	pop	r28
     ccc:	df 91       	pop	r29
     cce:	08 95       	ret

00000cd0 <gitem_init>:
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
// Инициация
void gitem_init(gitem_t * gitem, prio_t prio)
{
     cd0:	df 93       	push	r29
     cd2:	cf 93       	push	r28
     cd4:	00 d0       	rcall	.+0      	; 0xcd6 <gitem_init+0x6>
     cd6:	00 d0       	rcall	.+0      	; 0xcd8 <gitem_init+0x8>
     cd8:	0f 92       	push	r0
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	9c 83       	std	Y+4, r25	; 0x04
     ce0:	8b 83       	std	Y+3, r24	; 0x03
     ce2:	6d 83       	std	Y+5, r22	; 0x05
    group_t * group = &gitem->grp;
     ce4:	8b 81       	ldd	r24, Y+3	; 0x03
     ce6:	9c 81       	ldd	r25, Y+4	; 0x04
     ce8:	06 96       	adiw	r24, 0x06	; 6
     cea:	9a 83       	std	Y+2, r25	; 0x02
     cec:	89 83       	std	Y+1, r24	; 0x01
    item_init( (item_t *)gitem );
     cee:	8b 81       	ldd	r24, Y+3	; 0x03
     cf0:	9c 81       	ldd	r25, Y+4	; 0x04
     cf2:	0e 94 4e 09 	call	0x129c	; 0x129c <item_init>
    group_init( group, prio );
     cf6:	89 81       	ldd	r24, Y+1	; 0x01
     cf8:	9a 81       	ldd	r25, Y+2	; 0x02
     cfa:	6d 81       	ldd	r22, Y+5	; 0x05
     cfc:	0e 94 be 08 	call	0x117c	; 0x117c <group_init>
    gitem->group = group;
     d00:	eb 81       	ldd	r30, Y+3	; 0x03
     d02:	fc 81       	ldd	r31, Y+4	; 0x04
     d04:	89 81       	ldd	r24, Y+1	; 0x01
     d06:	9a 81       	ldd	r25, Y+2	; 0x02
     d08:	95 83       	std	Z+5, r25	; 0x05
     d0a:	84 83       	std	Z+4, r24	; 0x04
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <gitem_insert>:
// Вставить в список
void gitem_insert(gitem_t * gitem, xlist_t *xlist)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	cd b7       	in	r28, 0x3d	; 61
     d22:	de b7       	in	r29, 0x3e	; 62
     d24:	28 97       	sbiw	r28, 0x08	; 8
     d26:	0f b6       	in	r0, 0x3f	; 63
     d28:	f8 94       	cli
     d2a:	de bf       	out	0x3e, r29	; 62
     d2c:	0f be       	out	0x3f, r0	; 63
     d2e:	cd bf       	out	0x3d, r28	; 61
     d30:	9e 83       	std	Y+6, r25	; 0x06
     d32:	8d 83       	std	Y+5, r24	; 0x05
     d34:	78 87       	std	Y+8, r23	; 0x08
     d36:	6f 83       	std	Y+7, r22	; 0x07
    prio_t prio = gitem->group->prio;
     d38:	ed 81       	ldd	r30, Y+5	; 0x05
     d3a:	fe 81       	ldd	r31, Y+6	; 0x06
     d3c:	04 80       	ldd	r0, Z+4	; 0x04
     d3e:	f5 81       	ldd	r31, Z+5	; 0x05
     d40:	e0 2d       	mov	r30, r0
     d42:	82 81       	ldd	r24, Z+2	; 0x02
     d44:	8c 83       	std	Y+4, r24	; 0x04
    index_t mask = ((index_t)1)<<prio;
     d46:	8c 81       	ldd	r24, Y+4	; 0x04
     d48:	28 2f       	mov	r18, r24
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	02 c0       	rjmp	.+4      	; 0xd56 <gitem_insert+0x3a>
     d52:	88 0f       	add	r24, r24
     d54:	99 1f       	adc	r25, r25
     d56:	2a 95       	dec	r18
     d58:	e2 f7       	brpl	.-8      	; 0xd52 <gitem_insert+0x36>
     d5a:	8b 83       	std	Y+3, r24	; 0x03
    item_t ** head = (item_t **)xlist + prio;
     d5c:	2f 81       	ldd	r18, Y+7	; 0x07
     d5e:	38 85       	ldd	r19, Y+8	; 0x08
     d60:	8c 81       	ldd	r24, Y+4	; 0x04
     d62:	88 2f       	mov	r24, r24
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	88 0f       	add	r24, r24
     d68:	99 1f       	adc	r25, r25
     d6a:	82 0f       	add	r24, r18
     d6c:	93 1f       	adc	r25, r19
     d6e:	9a 83       	std	Y+2, r25	; 0x02
     d70:	89 83       	std	Y+1, r24	; 0x01
    // Пуста ли часть списка с таким приоритетом
    if( ( xlist->index )& mask)
     d72:	ef 81       	ldd	r30, Y+7	; 0x07
     d74:	f8 85       	ldd	r31, Y+8	; 0x08
     d76:	90 89       	ldd	r25, Z+16	; 0x10
     d78:	8b 81       	ldd	r24, Y+3	; 0x03
     d7a:	89 23       	and	r24, r25
     d7c:	88 23       	and	r24, r24
     d7e:	51 f0       	breq	.+20     	; 0xd94 <gitem_insert+0x78>
    {
        //Не пуста вставляем туда gitem
        item_insert( (item_t *)gitem, *head );
     d80:	8d 81       	ldd	r24, Y+5	; 0x05
     d82:	9e 81       	ldd	r25, Y+6	; 0x06
     d84:	e9 81       	ldd	r30, Y+1	; 0x01
     d86:	fa 81       	ldd	r31, Y+2	; 0x02
     d88:	20 81       	ld	r18, Z
     d8a:	31 81       	ldd	r19, Z+1	; 0x01
     d8c:	b9 01       	movw	r22, r18
     d8e:	0e 94 66 09 	call	0x12cc	; 0x12cc <item_insert>
     d92:	0e c0       	rjmp	.+28     	; 0xdb0 <gitem_insert+0x94>
    }
    else
    {
        // Пуста, gitem будет головой
        *head = (item_t *)gitem;
     d94:	8d 81       	ldd	r24, Y+5	; 0x05
     d96:	9e 81       	ldd	r25, Y+6	; 0x06
     d98:	e9 81       	ldd	r30, Y+1	; 0x01
     d9a:	fa 81       	ldd	r31, Y+2	; 0x02
     d9c:	91 83       	std	Z+1, r25	; 0x01
     d9e:	80 83       	st	Z, r24
        xlist->index |= mask;
     da0:	ef 81       	ldd	r30, Y+7	; 0x07
     da2:	f8 85       	ldd	r31, Y+8	; 0x08
     da4:	90 89       	ldd	r25, Z+16	; 0x10
     da6:	8b 81       	ldd	r24, Y+3	; 0x03
     da8:	89 2b       	or	r24, r25
     daa:	ef 81       	ldd	r30, Y+7	; 0x07
     dac:	f8 85       	ldd	r31, Y+8	; 0x08
     dae:	80 8b       	std	Z+16, r24	; 0x10
    }
    gitem->group->link = (void *)xlist;
     db0:	ed 81       	ldd	r30, Y+5	; 0x05
     db2:	fe 81       	ldd	r31, Y+6	; 0x06
     db4:	04 80       	ldd	r0, Z+4	; 0x04
     db6:	f5 81       	ldd	r31, Z+5	; 0x05
     db8:	e0 2d       	mov	r30, r0
     dba:	8f 81       	ldd	r24, Y+7	; 0x07
     dbc:	98 85       	ldd	r25, Y+8	; 0x08
     dbe:	91 83       	std	Z+1, r25	; 0x01
     dc0:	80 83       	st	Z, r24
}
     dc2:	28 96       	adiw	r28, 0x08	; 8
     dc4:	0f b6       	in	r0, 0x3f	; 63
     dc6:	f8 94       	cli
     dc8:	de bf       	out	0x3e, r29	; 62
     dca:	0f be       	out	0x3f, r0	; 63
     dcc:	cd bf       	out	0x3d, r28	; 61
     dce:	cf 91       	pop	r28
     dd0:	df 91       	pop	r29
     dd2:	08 95       	ret

00000dd4 <gitem_insert_group>:
 при этом gitem->group переходит в Пул

 Ограничения на gitem - он не должен быть сгруппирован в момент встаки в группу.
*/
void gitem_insert_group(gitem_t * gitem, xlist_t *xlist)
{
     dd4:	df 93       	push	r29
     dd6:	cf 93       	push	r28
     dd8:	cd b7       	in	r28, 0x3d	; 61
     dda:	de b7       	in	r29, 0x3e	; 62
     ddc:	2a 97       	sbiw	r28, 0x0a	; 10
     dde:	0f b6       	in	r0, 0x3f	; 63
     de0:	f8 94       	cli
     de2:	de bf       	out	0x3e, r29	; 62
     de4:	0f be       	out	0x3f, r0	; 63
     de6:	cd bf       	out	0x3d, r28	; 61
     de8:	98 87       	std	Y+8, r25	; 0x08
     dea:	8f 83       	std	Y+7, r24	; 0x07
     dec:	7a 87       	std	Y+10, r23	; 0x0a
     dee:	69 87       	std	Y+9, r22	; 0x09
    prio_t prio = gitem->group->prio;
     df0:	ef 81       	ldd	r30, Y+7	; 0x07
     df2:	f8 85       	ldd	r31, Y+8	; 0x08
     df4:	04 80       	ldd	r0, Z+4	; 0x04
     df6:	f5 81       	ldd	r31, Z+5	; 0x05
     df8:	e0 2d       	mov	r30, r0
     dfa:	82 81       	ldd	r24, Z+2	; 0x02
     dfc:	8e 83       	std	Y+6, r24	; 0x06
    index_t mask = ((index_t)1)<<prio;
     dfe:	8e 81       	ldd	r24, Y+6	; 0x06
     e00:	28 2f       	mov	r18, r24
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	02 c0       	rjmp	.+4      	; 0xe0e <gitem_insert_group+0x3a>
     e0a:	88 0f       	add	r24, r24
     e0c:	99 1f       	adc	r25, r25
     e0e:	2a 95       	dec	r18
     e10:	e2 f7       	brpl	.-8      	; 0xe0a <gitem_insert_group+0x36>
     e12:	8d 83       	std	Y+5, r24	; 0x05
    item_t ** head = (item_t **)xlist + prio;
     e14:	29 85       	ldd	r18, Y+9	; 0x09
     e16:	3a 85       	ldd	r19, Y+10	; 0x0a
     e18:	8e 81       	ldd	r24, Y+6	; 0x06
     e1a:	88 2f       	mov	r24, r24
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	88 0f       	add	r24, r24
     e20:	99 1f       	adc	r25, r25
     e22:	82 0f       	add	r24, r18
     e24:	93 1f       	adc	r25, r19
     e26:	9c 83       	std	Y+4, r25	; 0x04
     e28:	8b 83       	std	Y+3, r24	; 0x03
    group_t * group = gitem->group;
     e2a:	ef 81       	ldd	r30, Y+7	; 0x07
     e2c:	f8 85       	ldd	r31, Y+8	; 0x08
     e2e:	84 81       	ldd	r24, Z+4	; 0x04
     e30:	95 81       	ldd	r25, Z+5	; 0x05
     e32:	9a 83       	std	Y+2, r25	; 0x02
     e34:	89 83       	std	Y+1, r24	; 0x01
    // Пуста ли часть списка с таким приоритетом
    if( ( xlist->index )& mask)
     e36:	e9 85       	ldd	r30, Y+9	; 0x09
     e38:	fa 85       	ldd	r31, Y+10	; 0x0a
     e3a:	90 89       	ldd	r25, Z+16	; 0x10
     e3c:	8d 81       	ldd	r24, Y+5	; 0x05
     e3e:	89 23       	and	r24, r25
     e40:	88 23       	and	r24, r24
     e42:	31 f1       	breq	.+76     	; 0xe90 <gitem_insert_group+0xbc>
    {
        //Не пуста вставляем туда gitem
        item_insert((item_t *)gitem, *head );
     e44:	8f 81       	ldd	r24, Y+7	; 0x07
     e46:	98 85       	ldd	r25, Y+8	; 0x08
     e48:	eb 81       	ldd	r30, Y+3	; 0x03
     e4a:	fc 81       	ldd	r31, Y+4	; 0x04
     e4c:	20 81       	ld	r18, Z
     e4e:	31 81       	ldd	r19, Z+1	; 0x01
     e50:	b9 01       	movw	r22, r18
     e52:	0e 94 66 09 	call	0x12cc	; 0x12cc <item_insert>
        //Передаем старую группу в пул
        group_push(group);
     e56:	89 81       	ldd	r24, Y+1	; 0x01
     e58:	9a 81       	ldd	r25, Y+2	; 0x02
     e5a:	0e 94 db 08 	call	0x11b6	; 0x11b6 <group_push>
        //назначаем новую группу - ту, в которой голова
        group = ((gitem_t *)*head)->group;
     e5e:	eb 81       	ldd	r30, Y+3	; 0x03
     e60:	fc 81       	ldd	r31, Y+4	; 0x04
     e62:	80 81       	ld	r24, Z
     e64:	91 81       	ldd	r25, Z+1	; 0x01
     e66:	fc 01       	movw	r30, r24
     e68:	84 81       	ldd	r24, Z+4	; 0x04
     e6a:	95 81       	ldd	r25, Z+5	; 0x05
     e6c:	9a 83       	std	Y+2, r25	; 0x02
     e6e:	89 83       	std	Y+1, r24	; 0x01
        gitem->group = group;
     e70:	ef 81       	ldd	r30, Y+7	; 0x07
     e72:	f8 85       	ldd	r31, Y+8	; 0x08
     e74:	89 81       	ldd	r24, Y+1	; 0x01
     e76:	9a 81       	ldd	r25, Y+2	; 0x02
     e78:	95 83       	std	Z+5, r25	; 0x05
     e7a:	84 83       	std	Z+4, r24	; 0x04
        //количество элементов в группе увеличилось на 1
        group->el_num++;
     e7c:	e9 81       	ldd	r30, Y+1	; 0x01
     e7e:	fa 81       	ldd	r31, Y+2	; 0x02
     e80:	83 81       	ldd	r24, Z+3	; 0x03
     e82:	94 81       	ldd	r25, Z+4	; 0x04
     e84:	01 96       	adiw	r24, 0x01	; 1
     e86:	e9 81       	ldd	r30, Y+1	; 0x01
     e88:	fa 81       	ldd	r31, Y+2	; 0x02
     e8a:	94 83       	std	Z+4, r25	; 0x04
     e8c:	83 83       	std	Z+3, r24	; 0x03
     e8e:	14 c0       	rjmp	.+40     	; 0xeb8 <gitem_insert_group+0xe4>
    }
    else
    {
        // Пуста, gitem будет головой
        *head = (item_t *)gitem;
     e90:	8f 81       	ldd	r24, Y+7	; 0x07
     e92:	98 85       	ldd	r25, Y+8	; 0x08
     e94:	eb 81       	ldd	r30, Y+3	; 0x03
     e96:	fc 81       	ldd	r31, Y+4	; 0x04
     e98:	91 83       	std	Z+1, r25	; 0x01
     e9a:	80 83       	st	Z, r24
        xlist->index |= mask;
     e9c:	e9 85       	ldd	r30, Y+9	; 0x09
     e9e:	fa 85       	ldd	r31, Y+10	; 0x0a
     ea0:	90 89       	ldd	r25, Z+16	; 0x10
     ea2:	8d 81       	ldd	r24, Y+5	; 0x05
     ea4:	89 2b       	or	r24, r25
     ea6:	e9 85       	ldd	r30, Y+9	; 0x09
     ea8:	fa 85       	ldd	r31, Y+10	; 0x0a
     eaa:	80 8b       	std	Z+16, r24	; 0x10
        group->link = (void *)xlist;
     eac:	e9 81       	ldd	r30, Y+1	; 0x01
     eae:	fa 81       	ldd	r31, Y+2	; 0x02
     eb0:	89 85       	ldd	r24, Y+9	; 0x09
     eb2:	9a 85       	ldd	r25, Y+10	; 0x0a
     eb4:	91 83       	std	Z+1, r25	; 0x01
     eb6:	80 83       	st	Z, r24
    }
}
     eb8:	2a 96       	adiw	r28, 0x0a	; 10
     eba:	0f b6       	in	r0, 0x3f	; 63
     ebc:	f8 94       	cli
     ebe:	de bf       	out	0x3e, r29	; 62
     ec0:	0f be       	out	0x3f, r0	; 63
     ec2:	cd bf       	out	0x3d, r28	; 61
     ec4:	cf 91       	pop	r28
     ec6:	df 91       	pop	r29
     ec8:	08 95       	ret

00000eca <gitem_fast_cut>:
// Быстро вырезать из списка (не обнуляется указатель gitem->group->link)
void gitem_fast_cut(gitem_t * gitem)
{
     eca:	df 93       	push	r29
     ecc:	cf 93       	push	r28
     ece:	00 d0       	rcall	.+0      	; 0xed0 <gitem_fast_cut+0x6>
     ed0:	00 d0       	rcall	.+0      	; 0xed2 <gitem_fast_cut+0x8>
     ed2:	0f 92       	push	r0
     ed4:	cd b7       	in	r28, 0x3d	; 61
     ed6:	de b7       	in	r29, 0x3e	; 62
     ed8:	9d 83       	std	Y+5, r25	; 0x05
     eda:	8c 83       	std	Y+4, r24	; 0x04
    prio_t prio = gitem->group->prio;
     edc:	ec 81       	ldd	r30, Y+4	; 0x04
     ede:	fd 81       	ldd	r31, Y+5	; 0x05
     ee0:	04 80       	ldd	r0, Z+4	; 0x04
     ee2:	f5 81       	ldd	r31, Z+5	; 0x05
     ee4:	e0 2d       	mov	r30, r0
     ee6:	82 81       	ldd	r24, Z+2	; 0x02
     ee8:	8b 83       	std	Y+3, r24	; 0x03
    xlist_t * xlist = (xlist_t *)gitem->group->link;
     eea:	ec 81       	ldd	r30, Y+4	; 0x04
     eec:	fd 81       	ldd	r31, Y+5	; 0x05
     eee:	04 80       	ldd	r0, Z+4	; 0x04
     ef0:	f5 81       	ldd	r31, Z+5	; 0x05
     ef2:	e0 2d       	mov	r30, r0
     ef4:	80 81       	ld	r24, Z
     ef6:	91 81       	ldd	r25, Z+1	; 0x01
     ef8:	9a 83       	std	Y+2, r25	; 0x02
     efa:	89 83       	std	Y+1, r24	; 0x01
    // Является ли эта часть списка группированной?
    if( gitem->group->el_num > (count_t)1 )
     efc:	ec 81       	ldd	r30, Y+4	; 0x04
     efe:	fd 81       	ldd	r31, Y+5	; 0x05
     f00:	04 80       	ldd	r0, Z+4	; 0x04
     f02:	f5 81       	ldd	r31, Z+5	; 0x05
     f04:	e0 2d       	mov	r30, r0
     f06:	83 81       	ldd	r24, Z+3	; 0x03
     f08:	94 81       	ldd	r25, Z+4	; 0x04
     f0a:	82 30       	cpi	r24, 0x02	; 2
     f0c:	91 05       	cpc	r25, r1
     f0e:	b8 f0       	brcs	.+46     	; 0xf3e <gitem_fast_cut+0x74>
    {
        //Группированная часть списка, будем вырезать из группы с выделением новой группы из Пула
        // В текущей группе стало на 1 элемент меньше
        gitem->group->el_num--;
     f10:	ec 81       	ldd	r30, Y+4	; 0x04
     f12:	fd 81       	ldd	r31, Y+5	; 0x05
     f14:	04 80       	ldd	r0, Z+4	; 0x04
     f16:	f5 81       	ldd	r31, Z+5	; 0x05
     f18:	e0 2d       	mov	r30, r0
     f1a:	83 81       	ldd	r24, Z+3	; 0x03
     f1c:	94 81       	ldd	r25, Z+4	; 0x04
     f1e:	01 97       	sbiw	r24, 0x01	; 1
     f20:	94 83       	std	Z+4, r25	; 0x04
     f22:	83 83       	std	Z+3, r24	; 0x03
        //выделяем новую группу
        gitem->group = group_pop();
     f24:	0e 94 f5 08 	call	0x11ea	; 0x11ea <group_pop>
     f28:	ec 81       	ldd	r30, Y+4	; 0x04
     f2a:	fd 81       	ldd	r31, Y+5	; 0x05
     f2c:	95 83       	std	Z+5, r25	; 0x05
     f2e:	84 83       	std	Z+4, r24	; 0x04
        // Правильный приоритет, количество элементов в группе, выделенной из пула должно быть равно 1
        gitem->group->prio = (prio_t)prio;
     f30:	ec 81       	ldd	r30, Y+4	; 0x04
     f32:	fd 81       	ldd	r31, Y+5	; 0x05
     f34:	04 80       	ldd	r0, Z+4	; 0x04
     f36:	f5 81       	ldd	r31, Z+5	; 0x05
     f38:	e0 2d       	mov	r30, r0
     f3a:	8b 81       	ldd	r24, Y+3	; 0x03
     f3c:	82 83       	std	Z+2, r24	; 0x02
    }
    //Является ли элемент единственным в своей части списка?
    if( ((item_t *)gitem)->next == (item_t *)gitem )
     f3e:	ec 81       	ldd	r30, Y+4	; 0x04
     f40:	fd 81       	ldd	r31, Y+5	; 0x05
     f42:	20 81       	ld	r18, Z
     f44:	31 81       	ldd	r19, Z+1	; 0x01
     f46:	8c 81       	ldd	r24, Y+4	; 0x04
     f48:	9d 81       	ldd	r25, Y+5	; 0x05
     f4a:	28 17       	cp	r18, r24
     f4c:	39 07       	cpc	r19, r25
     f4e:	09 f5       	brne	.+66     	; 0xf92 <gitem_fast_cut+0xc8>
    {
        // Да, является!
        xlist->item[prio] = (item_t *)0;
     f50:	8b 81       	ldd	r24, Y+3	; 0x03
     f52:	88 2f       	mov	r24, r24
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	29 81       	ldd	r18, Y+1	; 0x01
     f58:	3a 81       	ldd	r19, Y+2	; 0x02
     f5a:	88 0f       	add	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	f9 01       	movw	r30, r18
     f60:	e8 0f       	add	r30, r24
     f62:	f9 1f       	adc	r31, r25
     f64:	11 82       	std	Z+1, r1	; 0x01
     f66:	10 82       	st	Z, r1
        xlist->index &= ~(((index_t)1)<<prio);
     f68:	e9 81       	ldd	r30, Y+1	; 0x01
     f6a:	fa 81       	ldd	r31, Y+2	; 0x02
     f6c:	80 89       	ldd	r24, Z+16	; 0x10
     f6e:	48 2f       	mov	r20, r24
     f70:	8b 81       	ldd	r24, Y+3	; 0x03
     f72:	28 2f       	mov	r18, r24
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	02 2e       	mov	r0, r18
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <gitem_fast_cut+0xb8>
     f7e:	88 0f       	add	r24, r24
     f80:	99 1f       	adc	r25, r25
     f82:	0a 94       	dec	r0
     f84:	e2 f7       	brpl	.-8      	; 0xf7e <gitem_fast_cut+0xb4>
     f86:	80 95       	com	r24
     f88:	84 23       	and	r24, r20
     f8a:	e9 81       	ldd	r30, Y+1	; 0x01
     f8c:	fa 81       	ldd	r31, Y+2	; 0x02
     f8e:	80 8b       	std	Z+16, r24	; 0x10
     f90:	1a c0       	rjmp	.+52     	; 0xfc6 <gitem_fast_cut+0xfc>
    }
    else
    {
        // Нет, не является!
        // Является ли элемент головой своей части списка?
        if( xlist->item[(prio_t)prio] == (item_t *)gitem )
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	88 2f       	mov	r24, r24
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	29 81       	ldd	r18, Y+1	; 0x01
     f9a:	3a 81       	ldd	r19, Y+2	; 0x02
     f9c:	88 0f       	add	r24, r24
     f9e:	99 1f       	adc	r25, r25
     fa0:	f9 01       	movw	r30, r18
     fa2:	e8 0f       	add	r30, r24
     fa4:	f9 1f       	adc	r31, r25
     fa6:	20 81       	ld	r18, Z
     fa8:	31 81       	ldd	r19, Z+1	; 0x01
     faa:	8c 81       	ldd	r24, Y+4	; 0x04
     fac:	9d 81       	ldd	r25, Y+5	; 0x05
     fae:	28 17       	cp	r18, r24
     fb0:	39 07       	cpc	r19, r25
     fb2:	29 f4       	brne	.+10     	; 0xfbe <gitem_fast_cut+0xf4>
        {
            // Является, список надо переключить
            xlist_switch( xlist, prio );
     fb4:	89 81       	ldd	r24, Y+1	; 0x01
     fb6:	9a 81       	ldd	r25, Y+2	; 0x02
     fb8:	6b 81       	ldd	r22, Y+3	; 0x03
     fba:	0e 94 57 11 	call	0x22ae	; 0x22ae <xlist_switch>
        }
        // Собственно - вырезаем элемент
        item_cut( (item_t *)gitem );
     fbe:	8c 81       	ldd	r24, Y+4	; 0x04
     fc0:	9d 81       	ldd	r25, Y+5	; 0x05
     fc2:	0e 94 98 09 	call	0x1330	; 0x1330 <item_cut>
    }
}
     fc6:	0f 90       	pop	r0
     fc8:	0f 90       	pop	r0
     fca:	0f 90       	pop	r0
     fcc:	0f 90       	pop	r0
     fce:	0f 90       	pop	r0
     fd0:	cf 91       	pop	r28
     fd2:	df 91       	pop	r29
     fd4:	08 95       	ret

00000fd6 <gitem_cut>:
// Вырезать из списка
void gitem_cut(gitem_t * gitem)
{
     fd6:	df 93       	push	r29
     fd8:	cf 93       	push	r28
     fda:	00 d0       	rcall	.+0      	; 0xfdc <gitem_cut+0x6>
     fdc:	cd b7       	in	r28, 0x3d	; 61
     fde:	de b7       	in	r29, 0x3e	; 62
     fe0:	9a 83       	std	Y+2, r25	; 0x02
     fe2:	89 83       	std	Y+1, r24	; 0x01
    gitem_fast_cut( gitem );
     fe4:	89 81       	ldd	r24, Y+1	; 0x01
     fe6:	9a 81       	ldd	r25, Y+2	; 0x02
     fe8:	0e 94 65 07 	call	0xeca	; 0xeca <gitem_fast_cut>
    gitem->group->link = (void *)0;
     fec:	e9 81       	ldd	r30, Y+1	; 0x01
     fee:	fa 81       	ldd	r31, Y+2	; 0x02
     ff0:	04 80       	ldd	r0, Z+4	; 0x04
     ff2:	f5 81       	ldd	r31, Z+5	; 0x05
     ff4:	e0 2d       	mov	r30, r0
     ff6:	11 82       	std	Z+1, r1	; 0x01
     ff8:	10 82       	st	Z, r1
}
     ffa:	0f 90       	pop	r0
     ffc:	0f 90       	pop	r0
     ffe:	cf 91       	pop	r28
    1000:	df 91       	pop	r29
    1002:	08 95       	ret

00001004 <gitem_xlist_merge>:
 1) Оба списка содержат только объекты типа gitem_t
 2) В списке source на каждом уровне приоритета все объекты типа gitem_t приенадлежат к одной группе.
 3) Элементы списка source, находящиеся на разных уровнях приоритета, пренадлежат разным группам.
*/
void gitem_xlist_merge(xlist_t * source, xlist_t * destignation)
{
    1004:	df 93       	push	r29
    1006:	cf 93       	push	r28
    1008:	cd b7       	in	r28, 0x3d	; 61
    100a:	de b7       	in	r29, 0x3e	; 62
    100c:	2c 97       	sbiw	r28, 0x0c	; 12
    100e:	0f b6       	in	r0, 0x3f	; 63
    1010:	f8 94       	cli
    1012:	de bf       	out	0x3e, r29	; 62
    1014:	0f be       	out	0x3f, r0	; 63
    1016:	cd bf       	out	0x3d, r28	; 61
    1018:	9a 87       	std	Y+10, r25	; 0x0a
    101a:	89 87       	std	Y+9, r24	; 0x09
    101c:	7c 87       	std	Y+12, r23	; 0x0c
    101e:	6b 87       	std	Y+11, r22	; 0x0b
    index_t mask = (index_t)1;
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	88 87       	std	Y+8, r24	; 0x08
    prio_t current_prio = (prio_t)0;
    1024:	1f 82       	std	Y+7, r1	; 0x07
    1026:	9a c0       	rjmp	.+308    	; 0x115c <gitem_xlist_merge+0x158>
    while( mask )
    {
        // Есть че перенести?
        if( mask & source->index )
    1028:	e9 85       	ldd	r30, Y+9	; 0x09
    102a:	fa 85       	ldd	r31, Y+10	; 0x0a
    102c:	90 89       	ldd	r25, Z+16	; 0x10
    102e:	88 85       	ldd	r24, Y+8	; 0x08
    1030:	89 23       	and	r24, r25
    1032:	88 23       	and	r24, r24
    1034:	09 f4       	brne	.+2      	; 0x1038 <gitem_xlist_merge+0x34>
    1036:	8c c0       	rjmp	.+280    	; 0x1150 <gitem_xlist_merge+0x14c>
        {
            // Есть!
            // Есть куда переносить?
            if( mask & destignation->index )
    1038:	eb 85       	ldd	r30, Y+11	; 0x0b
    103a:	fc 85       	ldd	r31, Y+12	; 0x0c
    103c:	90 89       	ldd	r25, Z+16	; 0x10
    103e:	88 85       	ldd	r24, Y+8	; 0x08
    1040:	89 23       	and	r24, r25
    1042:	88 23       	and	r24, r24
    1044:	09 f4       	brne	.+2      	; 0x1048 <gitem_xlist_merge+0x44>
    1046:	43 c0       	rjmp	.+134    	; 0x10ce <gitem_xlist_merge+0xca>
            {
                //Есть!
                // Сшиваем 2 2-связных списка!!!
                item_t * src = source->item[current_prio];
    1048:	8f 81       	ldd	r24, Y+7	; 0x07
    104a:	88 2f       	mov	r24, r24
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	29 85       	ldd	r18, Y+9	; 0x09
    1050:	3a 85       	ldd	r19, Y+10	; 0x0a
    1052:	88 0f       	add	r24, r24
    1054:	99 1f       	adc	r25, r25
    1056:	f9 01       	movw	r30, r18
    1058:	e8 0f       	add	r30, r24
    105a:	f9 1f       	adc	r31, r25
    105c:	80 81       	ld	r24, Z
    105e:	91 81       	ldd	r25, Z+1	; 0x01
    1060:	9e 83       	std	Y+6, r25	; 0x06
    1062:	8d 83       	std	Y+5, r24	; 0x05
                item_t * dst = destignation->item[current_prio];
    1064:	8f 81       	ldd	r24, Y+7	; 0x07
    1066:	88 2f       	mov	r24, r24
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	2b 85       	ldd	r18, Y+11	; 0x0b
    106c:	3c 85       	ldd	r19, Y+12	; 0x0c
    106e:	88 0f       	add	r24, r24
    1070:	99 1f       	adc	r25, r25
    1072:	f9 01       	movw	r30, r18
    1074:	e8 0f       	add	r30, r24
    1076:	f9 1f       	adc	r31, r25
    1078:	80 81       	ld	r24, Z
    107a:	91 81       	ldd	r25, Z+1	; 0x01
    107c:	9c 83       	std	Y+4, r25	; 0x04
    107e:	8b 83       	std	Y+3, r24	; 0x03
                src->prev->next = dst;
    1080:	ed 81       	ldd	r30, Y+5	; 0x05
    1082:	fe 81       	ldd	r31, Y+6	; 0x06
    1084:	02 80       	ldd	r0, Z+2	; 0x02
    1086:	f3 81       	ldd	r31, Z+3	; 0x03
    1088:	e0 2d       	mov	r30, r0
    108a:	8b 81       	ldd	r24, Y+3	; 0x03
    108c:	9c 81       	ldd	r25, Y+4	; 0x04
    108e:	91 83       	std	Z+1, r25	; 0x01
    1090:	80 83       	st	Z, r24
                dst->prev->next = src;
    1092:	eb 81       	ldd	r30, Y+3	; 0x03
    1094:	fc 81       	ldd	r31, Y+4	; 0x04
    1096:	02 80       	ldd	r0, Z+2	; 0x02
    1098:	f3 81       	ldd	r31, Z+3	; 0x03
    109a:	e0 2d       	mov	r30, r0
    109c:	8d 81       	ldd	r24, Y+5	; 0x05
    109e:	9e 81       	ldd	r25, Y+6	; 0x06
    10a0:	91 83       	std	Z+1, r25	; 0x01
    10a2:	80 83       	st	Z, r24
                item_t * buf = dst->prev;
    10a4:	eb 81       	ldd	r30, Y+3	; 0x03
    10a6:	fc 81       	ldd	r31, Y+4	; 0x04
    10a8:	82 81       	ldd	r24, Z+2	; 0x02
    10aa:	93 81       	ldd	r25, Z+3	; 0x03
    10ac:	9a 83       	std	Y+2, r25	; 0x02
    10ae:	89 83       	std	Y+1, r24	; 0x01
                dst->prev = src->prev;
    10b0:	ed 81       	ldd	r30, Y+5	; 0x05
    10b2:	fe 81       	ldd	r31, Y+6	; 0x06
    10b4:	82 81       	ldd	r24, Z+2	; 0x02
    10b6:	93 81       	ldd	r25, Z+3	; 0x03
    10b8:	eb 81       	ldd	r30, Y+3	; 0x03
    10ba:	fc 81       	ldd	r31, Y+4	; 0x04
    10bc:	93 83       	std	Z+3, r25	; 0x03
    10be:	82 83       	std	Z+2, r24	; 0x02
                src->prev = buf;
    10c0:	ed 81       	ldd	r30, Y+5	; 0x05
    10c2:	fe 81       	ldd	r31, Y+6	; 0x06
    10c4:	89 81       	ldd	r24, Y+1	; 0x01
    10c6:	9a 81       	ldd	r25, Y+2	; 0x02
    10c8:	93 83       	std	Z+3, r25	; 0x03
    10ca:	82 83       	std	Z+2, r24	; 0x02
    10cc:	21 c0       	rjmp	.+66     	; 0x1110 <gitem_xlist_merge+0x10c>
            }
            else
            {
                //Нет, тупо переносим всю группу.
                destignation->item[current_prio] = source->item[current_prio];
    10ce:	8f 81       	ldd	r24, Y+7	; 0x07
    10d0:	68 2f       	mov	r22, r24
    10d2:	70 e0       	ldi	r23, 0x00	; 0
    10d4:	8f 81       	ldd	r24, Y+7	; 0x07
    10d6:	88 2f       	mov	r24, r24
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	29 85       	ldd	r18, Y+9	; 0x09
    10dc:	3a 85       	ldd	r19, Y+10	; 0x0a
    10de:	88 0f       	add	r24, r24
    10e0:	99 1f       	adc	r25, r25
    10e2:	f9 01       	movw	r30, r18
    10e4:	e8 0f       	add	r30, r24
    10e6:	f9 1f       	adc	r31, r25
    10e8:	40 81       	ld	r20, Z
    10ea:	51 81       	ldd	r21, Z+1	; 0x01
    10ec:	2b 85       	ldd	r18, Y+11	; 0x0b
    10ee:	3c 85       	ldd	r19, Y+12	; 0x0c
    10f0:	cb 01       	movw	r24, r22
    10f2:	88 0f       	add	r24, r24
    10f4:	99 1f       	adc	r25, r25
    10f6:	f9 01       	movw	r30, r18
    10f8:	e8 0f       	add	r30, r24
    10fa:	f9 1f       	adc	r31, r25
    10fc:	51 83       	std	Z+1, r21	; 0x01
    10fe:	40 83       	st	Z, r20
                destignation->index |= mask;
    1100:	eb 85       	ldd	r30, Y+11	; 0x0b
    1102:	fc 85       	ldd	r31, Y+12	; 0x0c
    1104:	90 89       	ldd	r25, Z+16	; 0x10
    1106:	88 85       	ldd	r24, Y+8	; 0x08
    1108:	89 2b       	or	r24, r25
    110a:	eb 85       	ldd	r30, Y+11	; 0x0b
    110c:	fc 85       	ldd	r31, Y+12	; 0x0c
    110e:	80 8b       	std	Z+16, r24	; 0x10
            }
            // Вот почему эта функция отнесена к методам gitem_t
            ((gitem_t *)source->item[current_prio])->group->link = (void *)destignation;
    1110:	8f 81       	ldd	r24, Y+7	; 0x07
    1112:	88 2f       	mov	r24, r24
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	29 85       	ldd	r18, Y+9	; 0x09
    1118:	3a 85       	ldd	r19, Y+10	; 0x0a
    111a:	88 0f       	add	r24, r24
    111c:	99 1f       	adc	r25, r25
    111e:	f9 01       	movw	r30, r18
    1120:	e8 0f       	add	r30, r24
    1122:	f9 1f       	adc	r31, r25
    1124:	80 81       	ld	r24, Z
    1126:	91 81       	ldd	r25, Z+1	; 0x01
    1128:	fc 01       	movw	r30, r24
    112a:	04 80       	ldd	r0, Z+4	; 0x04
    112c:	f5 81       	ldd	r31, Z+5	; 0x05
    112e:	e0 2d       	mov	r30, r0
    1130:	8b 85       	ldd	r24, Y+11	; 0x0b
    1132:	9c 85       	ldd	r25, Y+12	; 0x0c
    1134:	91 83       	std	Z+1, r25	; 0x01
    1136:	80 83       	st	Z, r24
            // Перенос закончен, обнуляем указатель
            source->item[(prio_t)current_prio] = (item_t *)0;
    1138:	8f 81       	ldd	r24, Y+7	; 0x07
    113a:	88 2f       	mov	r24, r24
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	29 85       	ldd	r18, Y+9	; 0x09
    1140:	3a 85       	ldd	r19, Y+10	; 0x0a
    1142:	88 0f       	add	r24, r24
    1144:	99 1f       	adc	r25, r25
    1146:	f9 01       	movw	r30, r18
    1148:	e8 0f       	add	r30, r24
    114a:	f9 1f       	adc	r31, r25
    114c:	11 82       	std	Z+1, r1	; 0x01
    114e:	10 82       	st	Z, r1
        }
        mask<<=1;
    1150:	88 85       	ldd	r24, Y+8	; 0x08
    1152:	88 0f       	add	r24, r24
    1154:	88 87       	std	Y+8, r24	; 0x08
        current_prio++;
    1156:	8f 81       	ldd	r24, Y+7	; 0x07
    1158:	8f 5f       	subi	r24, 0xFF	; 255
    115a:	8f 83       	std	Y+7, r24	; 0x07
*/
void gitem_xlist_merge(xlist_t * source, xlist_t * destignation)
{
    index_t mask = (index_t)1;
    prio_t current_prio = (prio_t)0;
    while( mask )
    115c:	88 85       	ldd	r24, Y+8	; 0x08
    115e:	88 23       	and	r24, r24
    1160:	09 f0       	breq	.+2      	; 0x1164 <gitem_xlist_merge+0x160>
    1162:	62 cf       	rjmp	.-316    	; 0x1028 <gitem_xlist_merge+0x24>
        }
        mask<<=1;
        current_prio++;
    }
    // Список полностью перенесен, обнуляем индекс
    source->index = (index_t)0;
    1164:	e9 85       	ldd	r30, Y+9	; 0x09
    1166:	fa 85       	ldd	r31, Y+10	; 0x0a
    1168:	10 8a       	std	Z+16, r1	; 0x10
}
    116a:	2c 96       	adiw	r28, 0x0c	; 12
    116c:	0f b6       	in	r0, 0x3f	; 63
    116e:	f8 94       	cli
    1170:	de bf       	out	0x3e, r29	; 62
    1172:	0f be       	out	0x3f, r0	; 63
    1174:	cd bf       	out	0x3d, r28	; 61
    1176:	cf 91       	pop	r28
    1178:	df 91       	pop	r29
    117a:	08 95       	ret

0000117c <group_init>:
*****************************************************************************************/
#include "../include/bugurt.h"
//Методы group_t
// инициация
void group_init(group_t * group, prio_t prio)
{
    117c:	df 93       	push	r29
    117e:	cf 93       	push	r28
    1180:	00 d0       	rcall	.+0      	; 0x1182 <group_init+0x6>
    1182:	0f 92       	push	r0
    1184:	cd b7       	in	r28, 0x3d	; 61
    1186:	de b7       	in	r29, 0x3e	; 62
    1188:	9a 83       	std	Y+2, r25	; 0x02
    118a:	89 83       	std	Y+1, r24	; 0x01
    118c:	6b 83       	std	Y+3, r22	; 0x03
    group->link = (void *)0;
    118e:	e9 81       	ldd	r30, Y+1	; 0x01
    1190:	fa 81       	ldd	r31, Y+2	; 0x02
    1192:	11 82       	std	Z+1, r1	; 0x01
    1194:	10 82       	st	Z, r1
    group->prio = prio;
    1196:	e9 81       	ldd	r30, Y+1	; 0x01
    1198:	fa 81       	ldd	r31, Y+2	; 0x02
    119a:	8b 81       	ldd	r24, Y+3	; 0x03
    119c:	82 83       	std	Z+2, r24	; 0x02
    // группа - часть gitem_t, количество элементов - 1
    group->el_num = (count_t)1;
    119e:	e9 81       	ldd	r30, Y+1	; 0x01
    11a0:	fa 81       	ldd	r31, Y+2	; 0x02
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	94 83       	std	Z+4, r25	; 0x04
    11a8:	83 83       	std	Z+3, r24	; 0x03
}
    11aa:	0f 90       	pop	r0
    11ac:	0f 90       	pop	r0
    11ae:	0f 90       	pop	r0
    11b0:	cf 91       	pop	r28
    11b2:	df 91       	pop	r29
    11b4:	08 95       	ret

000011b6 <group_push>:
// положить в ПУЛ
void group_push(group_t * group)
{
    11b6:	df 93       	push	r29
    11b8:	cf 93       	push	r28
    11ba:	00 d0       	rcall	.+0      	; 0x11bc <group_push+0x6>
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62
    11c0:	9a 83       	std	Y+2, r25	; 0x02
    11c2:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    // блокируем пул
    spin_lock( &kernel.pool_lock );
#endif
    group->link = (void *)kernel.pool;
    11c4:	80 91 f6 01 	lds	r24, 0x01F6
    11c8:	90 91 f7 01 	lds	r25, 0x01F7
    11cc:	e9 81       	ldd	r30, Y+1	; 0x01
    11ce:	fa 81       	ldd	r31, Y+2	; 0x02
    11d0:	91 83       	std	Z+1, r25	; 0x01
    11d2:	80 83       	st	Z, r24
    kernel.pool = group;
    11d4:	89 81       	ldd	r24, Y+1	; 0x01
    11d6:	9a 81       	ldd	r25, Y+2	; 0x02
    11d8:	90 93 f7 01 	sts	0x01F7, r25
    11dc:	80 93 f6 01 	sts	0x01F6, r24
#ifdef CONFIG_MP
    // разблокируем пул
    spin_unlock( &kernel.pool_lock );
#endif
}
    11e0:	0f 90       	pop	r0
    11e2:	0f 90       	pop	r0
    11e4:	cf 91       	pop	r28
    11e6:	df 91       	pop	r29
    11e8:	08 95       	ret

000011ea <group_pop>:
// взять из пула, если есть, а есть всегда, избыточность же!
group_t * group_pop(void)
{
    11ea:	df 93       	push	r29
    11ec:	cf 93       	push	r28
    11ee:	00 d0       	rcall	.+0      	; 0x11f0 <group_pop+0x6>
    11f0:	cd b7       	in	r28, 0x3d	; 61
    11f2:	de b7       	in	r29, 0x3e	; 62
#ifdef CONFIG_MP
    // блокируем пул
    spin_lock( &kernel.pool_lock );
#endif
    group_t * group = kernel.pool;
    11f4:	80 91 f6 01 	lds	r24, 0x01F6
    11f8:	90 91 f7 01 	lds	r25, 0x01F7
    11fc:	9a 83       	std	Y+2, r25	; 0x02
    11fe:	89 83       	std	Y+1, r24	; 0x01
    kernel.pool = (group_t *)group->link;
    1200:	e9 81       	ldd	r30, Y+1	; 0x01
    1202:	fa 81       	ldd	r31, Y+2	; 0x02
    1204:	80 81       	ld	r24, Z
    1206:	91 81       	ldd	r25, Z+1	; 0x01
    1208:	90 93 f7 01 	sts	0x01F7, r25
    120c:	80 93 f6 01 	sts	0x01F6, r24
#ifdef CONFIG_MP
    // разблокируем пул
    spin_unlock( &kernel.pool_lock );
#endif
    return group;
    1210:	89 81       	ldd	r24, Y+1	; 0x01
    1212:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1214:	0f 90       	pop	r0
    1216:	0f 90       	pop	r0
    1218:	cf 91       	pop	r28
    121a:	df 91       	pop	r29
    121c:	08 95       	ret

0000121e <index_search>:
*                           http://www.0chan.ru/r/res/9996.html                          *
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
prio_t index_search(index_t index)
{
    121e:	df 93       	push	r29
    1220:	cf 93       	push	r28
    1222:	00 d0       	rcall	.+0      	; 0x1224 <index_search+0x6>
    1224:	00 d0       	rcall	.+0      	; 0x1226 <index_search+0x8>
    1226:	00 d0       	rcall	.+0      	; 0x1228 <index_search+0xa>
    1228:	cd b7       	in	r28, 0x3d	; 61
    122a:	de b7       	in	r29, 0x3e	; 62
    122c:	8e 83       	std	Y+6, r24	; 0x06
    prio_t prio = (prio_t)0;
    122e:	1d 82       	std	Y+5, r1	; 0x05
        но, т.к. BITS_IN_INDEX_T фиксировано для данной конфигурации,
        то получается время выполнения - O(1), ВСЕГДА.

        И да, предсказуемость + переносимость > быстродействие.
        */
    index_t upper = ~(index_t)0, lower = ~(index_t)0, middle;
    1230:	8f ef       	ldi	r24, 0xFF	; 255
    1232:	8c 83       	std	Y+4, r24	; 0x04
    1234:	8f ef       	ldi	r24, 0xFF	; 255
    1236:	8b 83       	std	Y+3, r24	; 0x03
    prio_t step = (prio_t)BITS_IN_INDEX_T;
    1238:	88 e0       	ldi	r24, 0x08	; 8
    123a:	89 83       	std	Y+1, r24	; 0x01
    123c:	22 c0       	rjmp	.+68     	; 0x1282 <index_search+0x64>
    while( step )
    {
        step>>=1; // делим шаг пополам
    123e:	89 81       	ldd	r24, Y+1	; 0x01
    1240:	86 95       	lsr	r24
    1242:	89 83       	std	Y+1, r24	; 0x01
        middle = lower>>step;
    1244:	8b 81       	ldd	r24, Y+3	; 0x03
    1246:	28 2f       	mov	r18, r24
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	89 81       	ldd	r24, Y+1	; 0x01
    124c:	88 2f       	mov	r24, r24
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	a9 01       	movw	r20, r18
    1252:	02 c0       	rjmp	.+4      	; 0x1258 <index_search+0x3a>
    1254:	55 95       	asr	r21
    1256:	47 95       	ror	r20
    1258:	8a 95       	dec	r24
    125a:	e2 f7       	brpl	.-8      	; 0x1254 <index_search+0x36>
    125c:	ca 01       	movw	r24, r20
    125e:	8a 83       	std	Y+2, r24	; 0x02
        if( index & upper & middle )
    1260:	9e 81       	ldd	r25, Y+6	; 0x06
    1262:	8c 81       	ldd	r24, Y+4	; 0x04
    1264:	98 23       	and	r25, r24
    1266:	8a 81       	ldd	r24, Y+2	; 0x02
    1268:	89 23       	and	r24, r25
    126a:	88 23       	and	r24, r24
    126c:	19 f0       	breq	.+6      	; 0x1274 <index_search+0x56>
        {
            lower = middle;
    126e:	8a 81       	ldd	r24, Y+2	; 0x02
    1270:	8b 83       	std	Y+3, r24	; 0x03
    1272:	07 c0       	rjmp	.+14     	; 0x1282 <index_search+0x64>
        }
        else
        {
            upper = ~middle;
    1274:	8a 81       	ldd	r24, Y+2	; 0x02
    1276:	80 95       	com	r24
    1278:	8c 83       	std	Y+4, r24	; 0x04
            prio += step;
    127a:	9d 81       	ldd	r25, Y+5	; 0x05
    127c:	89 81       	ldd	r24, Y+1	; 0x01
    127e:	89 0f       	add	r24, r25
    1280:	8d 83       	std	Y+5, r24	; 0x05

        И да, предсказуемость + переносимость > быстродействие.
        */
    index_t upper = ~(index_t)0, lower = ~(index_t)0, middle;
    prio_t step = (prio_t)BITS_IN_INDEX_T;
    while( step )
    1282:	89 81       	ldd	r24, Y+1	; 0x01
    1284:	88 23       	and	r24, r24
    1286:	d9 f6       	brne	.-74     	; 0x123e <index_search+0x20>
        if ( mask & index )break;
        prio++;
        mask<<=1;
    }
#endif
    return prio;
    1288:	8d 81       	ldd	r24, Y+5	; 0x05
}
    128a:	26 96       	adiw	r28, 0x06	; 6
    128c:	0f b6       	in	r0, 0x3f	; 63
    128e:	f8 94       	cli
    1290:	de bf       	out	0x3e, r29	; 62
    1292:	0f be       	out	0x3f, r0	; 63
    1294:	cd bf       	out	0x3d, r28	; 61
    1296:	cf 91       	pop	r28
    1298:	df 91       	pop	r29
    129a:	08 95       	ret

0000129c <item_init>:
*****************************************************************************************/
#include "../include/bugurt.h"
//Методы элемента 2-связного списка
//инициация элемента
void item_init(item_t *item)
{
    129c:	df 93       	push	r29
    129e:	cf 93       	push	r28
    12a0:	00 d0       	rcall	.+0      	; 0x12a2 <item_init+0x6>
    12a2:	cd b7       	in	r28, 0x3d	; 61
    12a4:	de b7       	in	r29, 0x3e	; 62
    12a6:	9a 83       	std	Y+2, r25	; 0x02
    12a8:	89 83       	std	Y+1, r24	; 0x01
    item->prev = item;
    12aa:	e9 81       	ldd	r30, Y+1	; 0x01
    12ac:	fa 81       	ldd	r31, Y+2	; 0x02
    12ae:	89 81       	ldd	r24, Y+1	; 0x01
    12b0:	9a 81       	ldd	r25, Y+2	; 0x02
    12b2:	93 83       	std	Z+3, r25	; 0x03
    12b4:	82 83       	std	Z+2, r24	; 0x02
    item->next = item;
    12b6:	e9 81       	ldd	r30, Y+1	; 0x01
    12b8:	fa 81       	ldd	r31, Y+2	; 0x02
    12ba:	89 81       	ldd	r24, Y+1	; 0x01
    12bc:	9a 81       	ldd	r25, Y+2	; 0x02
    12be:	91 83       	std	Z+1, r25	; 0x01
    12c0:	80 83       	st	Z, r24
}
    12c2:	0f 90       	pop	r0
    12c4:	0f 90       	pop	r0
    12c6:	cf 91       	pop	r28
    12c8:	df 91       	pop	r29
    12ca:	08 95       	ret

000012cc <item_insert>:
//Вставить элемент
void item_insert(item_t *item, item_t *head)
{
    12cc:	df 93       	push	r29
    12ce:	cf 93       	push	r28
    12d0:	00 d0       	rcall	.+0      	; 0x12d2 <item_insert+0x6>
    12d2:	00 d0       	rcall	.+0      	; 0x12d4 <item_insert+0x8>
    12d4:	00 d0       	rcall	.+0      	; 0x12d6 <item_insert+0xa>
    12d6:	cd b7       	in	r28, 0x3d	; 61
    12d8:	de b7       	in	r29, 0x3e	; 62
    12da:	9c 83       	std	Y+4, r25	; 0x04
    12dc:	8b 83       	std	Y+3, r24	; 0x03
    12de:	7e 83       	std	Y+6, r23	; 0x06
    12e0:	6d 83       	std	Y+5, r22	; 0x05
    // "хвост" списка
    item_t * tail = head->prev;
    12e2:	ed 81       	ldd	r30, Y+5	; 0x05
    12e4:	fe 81       	ldd	r31, Y+6	; 0x06
    12e6:	82 81       	ldd	r24, Z+2	; 0x02
    12e8:	93 81       	ldd	r25, Z+3	; 0x03
    12ea:	9a 83       	std	Y+2, r25	; 0x02
    12ec:	89 83       	std	Y+1, r24	; 0x01

    // Вставляем элемент между "головой" и "хвостом"
    item->prev = tail;
    12ee:	eb 81       	ldd	r30, Y+3	; 0x03
    12f0:	fc 81       	ldd	r31, Y+4	; 0x04
    12f2:	89 81       	ldd	r24, Y+1	; 0x01
    12f4:	9a 81       	ldd	r25, Y+2	; 0x02
    12f6:	93 83       	std	Z+3, r25	; 0x03
    12f8:	82 83       	std	Z+2, r24	; 0x02
    item->next = head;
    12fa:	eb 81       	ldd	r30, Y+3	; 0x03
    12fc:	fc 81       	ldd	r31, Y+4	; 0x04
    12fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1300:	9e 81       	ldd	r25, Y+6	; 0x06
    1302:	91 83       	std	Z+1, r25	; 0x01
    1304:	80 83       	st	Z, r24

    head->prev = item;
    1306:	ed 81       	ldd	r30, Y+5	; 0x05
    1308:	fe 81       	ldd	r31, Y+6	; 0x06
    130a:	8b 81       	ldd	r24, Y+3	; 0x03
    130c:	9c 81       	ldd	r25, Y+4	; 0x04
    130e:	93 83       	std	Z+3, r25	; 0x03
    1310:	82 83       	std	Z+2, r24	; 0x02
    tail->next = item;
    1312:	e9 81       	ldd	r30, Y+1	; 0x01
    1314:	fa 81       	ldd	r31, Y+2	; 0x02
    1316:	8b 81       	ldd	r24, Y+3	; 0x03
    1318:	9c 81       	ldd	r25, Y+4	; 0x04
    131a:	91 83       	std	Z+1, r25	; 0x01
    131c:	80 83       	st	Z, r24
}
    131e:	26 96       	adiw	r28, 0x06	; 6
    1320:	0f b6       	in	r0, 0x3f	; 63
    1322:	f8 94       	cli
    1324:	de bf       	out	0x3e, r29	; 62
    1326:	0f be       	out	0x3f, r0	; 63
    1328:	cd bf       	out	0x3d, r28	; 61
    132a:	cf 91       	pop	r28
    132c:	df 91       	pop	r29
    132e:	08 95       	ret

00001330 <item_cut>:
//Вырезать элемент
void item_cut( item_t *item )
{
    1330:	df 93       	push	r29
    1332:	cf 93       	push	r28
    1334:	00 d0       	rcall	.+0      	; 0x1336 <item_cut+0x6>
    1336:	00 d0       	rcall	.+0      	; 0x1338 <item_cut+0x8>
    1338:	00 d0       	rcall	.+0      	; 0x133a <item_cut+0xa>
    133a:	cd b7       	in	r28, 0x3d	; 61
    133c:	de b7       	in	r29, 0x3e	; 62
    133e:	9e 83       	std	Y+6, r25	; 0x06
    1340:	8d 83       	std	Y+5, r24	; 0x05
    item_t * prev = item->prev; //Предыдущий элемент
    1342:	ed 81       	ldd	r30, Y+5	; 0x05
    1344:	fe 81       	ldd	r31, Y+6	; 0x06
    1346:	82 81       	ldd	r24, Z+2	; 0x02
    1348:	93 81       	ldd	r25, Z+3	; 0x03
    134a:	9c 83       	std	Y+4, r25	; 0x04
    134c:	8b 83       	std	Y+3, r24	; 0x03
    item_t * next = item->next; //Следующий элемент
    134e:	ed 81       	ldd	r30, Y+5	; 0x05
    1350:	fe 81       	ldd	r31, Y+6	; 0x06
    1352:	80 81       	ld	r24, Z
    1354:	91 81       	ldd	r25, Z+1	; 0x01
    1356:	9a 83       	std	Y+2, r25	; 0x02
    1358:	89 83       	std	Y+1, r24	; 0x01

    next->prev = prev;
    135a:	e9 81       	ldd	r30, Y+1	; 0x01
    135c:	fa 81       	ldd	r31, Y+2	; 0x02
    135e:	8b 81       	ldd	r24, Y+3	; 0x03
    1360:	9c 81       	ldd	r25, Y+4	; 0x04
    1362:	93 83       	std	Z+3, r25	; 0x03
    1364:	82 83       	std	Z+2, r24	; 0x02
    prev->next = next;
    1366:	eb 81       	ldd	r30, Y+3	; 0x03
    1368:	fc 81       	ldd	r31, Y+4	; 0x04
    136a:	89 81       	ldd	r24, Y+1	; 0x01
    136c:	9a 81       	ldd	r25, Y+2	; 0x02
    136e:	91 83       	std	Z+1, r25	; 0x01
    1370:	80 83       	st	Z, r24

    item->prev = item;
    1372:	ed 81       	ldd	r30, Y+5	; 0x05
    1374:	fe 81       	ldd	r31, Y+6	; 0x06
    1376:	8d 81       	ldd	r24, Y+5	; 0x05
    1378:	9e 81       	ldd	r25, Y+6	; 0x06
    137a:	93 83       	std	Z+3, r25	; 0x03
    137c:	82 83       	std	Z+2, r24	; 0x02
    item->next = item;
    137e:	ed 81       	ldd	r30, Y+5	; 0x05
    1380:	fe 81       	ldd	r31, Y+6	; 0x06
    1382:	8d 81       	ldd	r24, Y+5	; 0x05
    1384:	9e 81       	ldd	r25, Y+6	; 0x06
    1386:	91 83       	std	Z+1, r25	; 0x01
    1388:	80 83       	st	Z, r24
}
    138a:	26 96       	adiw	r28, 0x06	; 6
    138c:	0f b6       	in	r0, 0x3f	; 63
    138e:	f8 94       	cli
    1390:	de bf       	out	0x3e, r29	; 62
    1392:	0f be       	out	0x3f, r0	; 63
    1394:	cd bf       	out	0x3d, r28	; 61
    1396:	cf 91       	pop	r28
    1398:	df 91       	pop	r29
    139a:	08 95       	ret

0000139c <kernel_init>:
{
    while(1);
}

void kernel_init(void)
{
    139c:	8f 92       	push	r8
    139e:	af 92       	push	r10
    13a0:	bf 92       	push	r11
    13a2:	cf 92       	push	r12
    13a4:	ef 92       	push	r14
    13a6:	ff 92       	push	r15
    13a8:	0f 93       	push	r16
    13aa:	1f 93       	push	r17
    13ac:	df 93       	push	r29
    13ae:	cf 93       	push	r28
    13b0:	cd b7       	in	r28, 0x3d	; 61
    13b2:	de b7       	in	r29, 0x3e	; 62
        stat_init( (stat_t *)kernel.stat + i );
        sched_init( (sched_t *)kernel.sched + i, (proc_t *)kernel.idle + i );
    }
    spin_unlock( &kernel.stat_lock );
#else
    proc_init_isr(
    13b4:	88 ec       	ldi	r24, 0xC8	; 200
    13b6:	91 e0       	ldi	r25, 0x01	; 1
    13b8:	2f e7       	ldi	r18, 0x7F	; 127
    13ba:	32 e1       	ldi	r19, 0x12	; 18
    13bc:	b9 01       	movw	r22, r18
    13be:	40 e0       	ldi	r20, 0x00	; 0
    13c0:	50 e0       	ldi	r21, 0x00	; 0
    13c2:	20 e0       	ldi	r18, 0x00	; 0
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	00 e0       	ldi	r16, 0x00	; 0
    13c8:	10 e0       	ldi	r17, 0x00	; 0
    13ca:	ee 24       	eor	r14, r14
    13cc:	ff 24       	eor	r15, r15
    13ce:	0f 2e       	mov	r0, r31
    13d0:	f7 e0       	ldi	r31, 0x07	; 7
    13d2:	cf 2e       	mov	r12, r31
    13d4:	f0 2d       	mov	r31, r0
    13d6:	aa 24       	eor	r10, r10
    13d8:	bb 24       	eor	r11, r11
    13da:	a3 94       	inc	r10
    13dc:	88 24       	eor	r8, r8
    13de:	0e 94 a4 0b 	call	0x1748	; 0x1748 <proc_init_isr>
        0, // это не важно, при первой же смене контекста будет сохранен текущий указатель стека
        ((prio_t)BITS_IN_INDEX_T - (prio_t)1),// низший приоритет
        (timer_t)1,//минимальный квант времени
        (bool_t)0// не RT
    );
    sched_init( (sched_t *)&kernel.sched, (proc_t *)&kernel.idle );
    13e2:	8e e9       	ldi	r24, 0x9E	; 158
    13e4:	91 e0       	ldi	r25, 0x01	; 1
    13e6:	28 ec       	ldi	r18, 0xC8	; 200
    13e8:	31 e0       	ldi	r19, 0x01	; 1
    13ea:	b9 01       	movw	r22, r18
    13ec:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <sched_init>
#endif // CONFIG_MP
}
    13f0:	cf 91       	pop	r28
    13f2:	df 91       	pop	r29
    13f4:	1f 91       	pop	r17
    13f6:	0f 91       	pop	r16
    13f8:	ff 90       	pop	r15
    13fa:	ef 90       	pop	r14
    13fc:	cf 90       	pop	r12
    13fe:	bf 90       	pop	r11
    1400:	af 90       	pop	r10
    1402:	8f 90       	pop	r8
    1404:	08 95       	ret

00001406 <mutex_init_isr>:
    mutex_t * mutex
#ifdef CONFIG_USE_HIGHEST_LOCKER
    ,prio_t prio
#endif // CONFIG_USE_HIGHEST_LOCKER
)
{
    1406:	df 93       	push	r29
    1408:	cf 93       	push	r28
    140a:	00 d0       	rcall	.+0      	; 0x140c <mutex_init_isr+0x6>
    140c:	0f 92       	push	r0
    140e:	cd b7       	in	r28, 0x3d	; 61
    1410:	de b7       	in	r29, 0x3e	; 62
    1412:	9a 83       	std	Y+2, r25	; 0x02
    1414:	89 83       	std	Y+1, r24	; 0x01
    1416:	6b 83       	std	Y+3, r22	; 0x03
    xlist_init( (xlist_t *)mutex );
    1418:	89 81       	ldd	r24, Y+1	; 0x01
    141a:	9a 81       	ldd	r25, Y+2	; 0x02
    141c:	0e 94 01 11 	call	0x2202	; 0x2202 <xlist_init>
    mutex->free = (bool_t)1;
    1420:	e9 81       	ldd	r30, Y+1	; 0x01
    1422:	fa 81       	ldd	r31, Y+2	; 0x02
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	82 8b       	std	Z+18, r24	; 0x12
#ifdef CONFIG_USE_HIGHEST_LOCKER
    mutex->prio = prio;
    1428:	e9 81       	ldd	r30, Y+1	; 0x01
    142a:	fa 81       	ldd	r31, Y+2	; 0x02
    142c:	8b 81       	ldd	r24, Y+3	; 0x03
    142e:	81 8b       	std	Z+17, r24	; 0x11
#endif // CONFIG_USE_HIGHEST_LOCKER
}
    1430:	0f 90       	pop	r0
    1432:	0f 90       	pop	r0
    1434:	0f 90       	pop	r0
    1436:	cf 91       	pop	r28
    1438:	df 91       	pop	r29
    143a:	08 95       	ret

0000143c <_mutex_lock>:

// К моменту вызова захвачена блокировка mutex-а, запрещены прерывания
bool_t _mutex_lock( mutex_t * mutex )
{
    143c:	df 93       	push	r29
    143e:	cf 93       	push	r28
    1440:	00 d0       	rcall	.+0      	; 0x1442 <_mutex_lock+0x6>
    1442:	00 d0       	rcall	.+0      	; 0x1444 <_mutex_lock+0x8>
    1444:	0f 92       	push	r0
    1446:	cd b7       	in	r28, 0x3d	; 61
    1448:	de b7       	in	r29, 0x3e	; 62
    144a:	9d 83       	std	Y+5, r25	; 0x05
    144c:	8c 83       	std	Y+4, r24	; 0x04
    bool_t ret = mutex->free;
    144e:	ec 81       	ldd	r30, Y+4	; 0x04
    1450:	fd 81       	ldd	r31, Y+5	; 0x05
    1452:	82 89       	ldd	r24, Z+18	; 0x12
    1454:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = current_proc();
    1456:	0e 94 cc 00 	call	0x198	; 0x198 <current_proc>
    145a:	9a 83       	std	Y+2, r25	; 0x02
    145c:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
#ifdef CONFIG_USE_HIGHEST_LOCKER
    _proc_lres_inc( proc, mutex->prio );
    145e:	ec 81       	ldd	r30, Y+4	; 0x04
    1460:	fd 81       	ldd	r31, Y+5	; 0x05
    1462:	21 89       	ldd	r18, Z+17	; 0x11
    1464:	89 81       	ldd	r24, Y+1	; 0x01
    1466:	9a 81       	ldd	r25, Y+2	; 0x02
    1468:	62 2f       	mov	r22, r18
    146a:	0e 94 57 0d 	call	0x1aae	; 0x1aae <_proc_lres_inc>
#else // !CONFIG_USE_HIGHEST_LOCKER
    _proc_lres_inc( proc );
#endif // CONFIG_USE_HIGHEST_LOCKER
    if( ret )
    146e:	8b 81       	ldd	r24, Y+3	; 0x03
    1470:	88 23       	and	r24, r24
    1472:	41 f0       	breq	.+16     	; 0x1484 <_mutex_lock+0x48>
    {
        mutex->free = (bool_t)0;
    1474:	ec 81       	ldd	r30, Y+4	; 0x04
    1476:	fd 81       	ldd	r31, Y+5	; 0x05
    1478:	12 8a       	std	Z+18, r1	; 0x12
#ifdef CONFIG_USE_HIGHEST_LOCKER
        // Меняем приоритет только здесь
        _proc_prio_control_running( proc );
    147a:	89 81       	ldd	r24, Y+1	; 0x01
    147c:	9a 81       	ldd	r25, Y+2	; 0x02
    147e:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <_proc_prio_control_running>
    1482:	1b c0       	rjmp	.+54     	; 0x14ba <_mutex_lock+0x7e>
#endif // CONFIG_USE_HIGHEST_LOCKER
    }
    else
    {
        proc->flags |= PROC_FLG_QUEUE;
    1484:	e9 81       	ldd	r30, Y+1	; 0x01
    1486:	fa 81       	ldd	r31, Y+2	; 0x02
    1488:	83 85       	ldd	r24, Z+11	; 0x0b
    148a:	88 60       	ori	r24, 0x08	; 8
    148c:	e9 81       	ldd	r30, Y+1	; 0x01
    148e:	fa 81       	ldd	r31, Y+2	; 0x02
    1490:	83 87       	std	Z+11, r24	; 0x0b
        proc->flags &= ~PROC_FLG_RUN;
    1492:	e9 81       	ldd	r30, Y+1	; 0x01
    1494:	fa 81       	ldd	r31, Y+2	; 0x02
    1496:	83 85       	ldd	r24, Z+11	; 0x0b
    1498:	8d 7f       	andi	r24, 0xFD	; 253
    149a:	e9 81       	ldd	r30, Y+1	; 0x01
    149c:	fa 81       	ldd	r31, Y+2	; 0x02
    149e:	83 87       	std	Z+11, r24	; 0x0b
        _proc_stop_( proc );
    14a0:	89 81       	ldd	r24, Y+1	; 0x01
    14a2:	9a 81       	ldd	r25, Y+2	; 0x02
    14a4:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <gitem_cut>
        gitem_insert( (gitem_t *)proc, (xlist_t *)mutex );
    14a8:	89 81       	ldd	r24, Y+1	; 0x01
    14aa:	9a 81       	ldd	r25, Y+2	; 0x02
    14ac:	2c 81       	ldd	r18, Y+4	; 0x04
    14ae:	3d 81       	ldd	r19, Y+5	; 0x05
    14b0:	b9 01       	movw	r22, r18
    14b2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <gitem_insert>
        // Нужна перепланировка
#ifdef CONFIG_MP
        resched( proc->core_id );
#else
        resched();
    14b6:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
#endif // CONFIG_MP
    }
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    return ret;
    14ba:	8b 81       	ldd	r24, Y+3	; 0x03
}
    14bc:	0f 90       	pop	r0
    14be:	0f 90       	pop	r0
    14c0:	0f 90       	pop	r0
    14c2:	0f 90       	pop	r0
    14c4:	0f 90       	pop	r0
    14c6:	cf 91       	pop	r28
    14c8:	df 91       	pop	r29
    14ca:	08 95       	ret

000014cc <_mutex_try_lock>:

bool_t _mutex_try_lock( mutex_t * mutex )
{
    14cc:	df 93       	push	r29
    14ce:	cf 93       	push	r28
    14d0:	00 d0       	rcall	.+0      	; 0x14d2 <_mutex_try_lock+0x6>
    14d2:	00 d0       	rcall	.+0      	; 0x14d4 <_mutex_try_lock+0x8>
    14d4:	0f 92       	push	r0
    14d6:	cd b7       	in	r28, 0x3d	; 61
    14d8:	de b7       	in	r29, 0x3e	; 62
    14da:	9d 83       	std	Y+5, r25	; 0x05
    14dc:	8c 83       	std	Y+4, r24	; 0x04
    bool_t ret = mutex->free;
    14de:	ec 81       	ldd	r30, Y+4	; 0x04
    14e0:	fd 81       	ldd	r31, Y+5	; 0x05
    14e2:	82 89       	ldd	r24, Z+18	; 0x12
    14e4:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = current_proc();
    14e6:	0e 94 cc 00 	call	0x198	; 0x198 <current_proc>
    14ea:	9a 83       	std	Y+2, r25	; 0x02
    14ec:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    if( ret )
    14ee:	8b 81       	ldd	r24, Y+3	; 0x03
    14f0:	88 23       	and	r24, r24
    14f2:	79 f0       	breq	.+30     	; 0x1512 <_mutex_try_lock+0x46>
    {
        mutex->free = (bool_t)0;
    14f4:	ec 81       	ldd	r30, Y+4	; 0x04
    14f6:	fd 81       	ldd	r31, Y+5	; 0x05
    14f8:	12 8a       	std	Z+18, r1	; 0x12
#ifdef CONFIG_USE_HIGHEST_LOCKER
        _proc_lres_inc( proc, mutex->prio );
    14fa:	ec 81       	ldd	r30, Y+4	; 0x04
    14fc:	fd 81       	ldd	r31, Y+5	; 0x05
    14fe:	21 89       	ldd	r18, Z+17	; 0x11
    1500:	89 81       	ldd	r24, Y+1	; 0x01
    1502:	9a 81       	ldd	r25, Y+2	; 0x02
    1504:	62 2f       	mov	r22, r18
    1506:	0e 94 57 0d 	call	0x1aae	; 0x1aae <_proc_lres_inc>
        _proc_prio_control_running( proc );
    150a:	89 81       	ldd	r24, Y+1	; 0x01
    150c:	9a 81       	ldd	r25, Y+2	; 0x02
    150e:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <_proc_prio_control_running>
#endif // CONFIG_USE_HIGHEST_LOCKER
    }
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    return ret;
    1512:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1514:	0f 90       	pop	r0
    1516:	0f 90       	pop	r0
    1518:	0f 90       	pop	r0
    151a:	0f 90       	pop	r0
    151c:	0f 90       	pop	r0
    151e:	cf 91       	pop	r28
    1520:	df 91       	pop	r29
    1522:	08 95       	ret

00001524 <_mutex_unlock>:

void _mutex_unlock( mutex_t *  mutex )
{
    1524:	df 93       	push	r29
    1526:	cf 93       	push	r28
    1528:	00 d0       	rcall	.+0      	; 0x152a <_mutex_unlock+0x6>
    152a:	00 d0       	rcall	.+0      	; 0x152c <_mutex_unlock+0x8>
    152c:	cd b7       	in	r28, 0x3d	; 61
    152e:	de b7       	in	r29, 0x3e	; 62
    1530:	9c 83       	std	Y+4, r25	; 0x04
    1532:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = current_proc();
    1534:	0e 94 cc 00 	call	0x198	; 0x198 <current_proc>
    1538:	9a 83       	std	Y+2, r25	; 0x02
    153a:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
#ifdef CONFIG_USE_HIGHEST_LOCKER

    _proc_lres_dec( proc, mutex->prio );
    153c:	eb 81       	ldd	r30, Y+3	; 0x03
    153e:	fc 81       	ldd	r31, Y+4	; 0x04
    1540:	21 89       	ldd	r18, Z+17	; 0x11
    1542:	89 81       	ldd	r24, Y+1	; 0x01
    1544:	9a 81       	ldd	r25, Y+2	; 0x02
    1546:	62 2f       	mov	r22, r18
    1548:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <_proc_lres_dec>
    // Если проготовлен и готов к остановке - останавливаем
    if(  ( proc->flags & PROC_FLG_PRE_END ) && (!(proc->flags & PROC_FLG_HOLD))  )
    154c:	e9 81       	ldd	r30, Y+1	; 0x01
    154e:	fa 81       	ldd	r31, Y+2	; 0x02
    1550:	83 85       	ldd	r24, Z+11	; 0x0b
    1552:	88 2f       	mov	r24, r24
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	80 72       	andi	r24, 0x20	; 32
    1558:	90 70       	andi	r25, 0x00	; 0
    155a:	00 97       	sbiw	r24, 0x00	; 0
    155c:	a1 f0       	breq	.+40     	; 0x1586 <_mutex_unlock+0x62>
    155e:	e9 81       	ldd	r30, Y+1	; 0x01
    1560:	fa 81       	ldd	r31, Y+2	; 0x02
    1562:	83 85       	ldd	r24, Z+11	; 0x0b
    1564:	88 2f       	mov	r24, r24
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	84 70       	andi	r24, 0x04	; 4
    156a:	90 70       	andi	r25, 0x00	; 0
    156c:	00 97       	sbiw	r24, 0x00	; 0
    156e:	59 f4       	brne	.+22     	; 0x1586 <_mutex_unlock+0x62>
    {
        _proc_stop_( proc );
    1570:	89 81       	ldd	r24, Y+1	; 0x01
    1572:	9a 81       	ldd	r25, Y+2	; 0x02
    1574:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <gitem_cut>
        _proc_prio_control_stoped( proc );
    1578:	89 81       	ldd	r24, Y+1	; 0x01
    157a:	9a 81       	ldd	r25, Y+2	; 0x02
    157c:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <_proc_prio_control_stoped>
        // Нужна перепланировка, процесс остановили и не запустили обратно
#ifdef CONFIG_MP
        resched( proc->core_id );
#else
        resched();
    1580:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
    1584:	04 c0       	rjmp	.+8      	; 0x158e <_mutex_unlock+0x6a>
#endif // CONFIG_MP
    }
    // Не останавливаем - меняем проиритет на ходу
    else _proc_prio_control_running( proc );
    1586:	89 81       	ldd	r24, Y+1	; 0x01
    1588:	9a 81       	ldd	r25, Y+2	; 0x02
    158a:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <_proc_prio_control_running>
#endif // CONFIG_USE_HIGHEST_LOCKER
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    // Обрабока самого мьютекса
    if( ((xlist_t *)mutex)->index == (index_t)0  )
    158e:	eb 81       	ldd	r30, Y+3	; 0x03
    1590:	fc 81       	ldd	r31, Y+4	; 0x04
    1592:	80 89       	ldd	r24, Z+16	; 0x10
    1594:	88 23       	and	r24, r24
    1596:	29 f4       	brne	.+10     	; 0x15a2 <_mutex_unlock+0x7e>
    {
        // Список ожидающих пуст, выходим
        mutex->free = (bool_t)1;
    1598:	eb 81       	ldd	r30, Y+3	; 0x03
    159a:	fc 81       	ldd	r31, Y+4	; 0x04
    159c:	81 e0       	ldi	r24, 0x01	; 1
    159e:	82 8b       	std	Z+18, r24	; 0x12
    15a0:	19 c0       	rjmp	.+50     	; 0x15d4 <_mutex_unlock+0xb0>
        return;
    }
    // Список ожидающих не пуст, запускаем голову
    proc = (proc_t *)xlist_head((xlist_t *)mutex);
    15a2:	8b 81       	ldd	r24, Y+3	; 0x03
    15a4:	9c 81       	ldd	r25, Y+4	; 0x04
    15a6:	0e 94 2b 11 	call	0x2256	; 0x2256 <xlist_head>
    15aa:	9a 83       	std	Y+2, r25	; 0x02
    15ac:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    // Сначала надо вырезать
    proc->flags &= ~PROC_FLG_QUEUE;
    15ae:	e9 81       	ldd	r30, Y+1	; 0x01
    15b0:	fa 81       	ldd	r31, Y+2	; 0x02
    15b2:	83 85       	ldd	r24, Z+11	; 0x0b
    15b4:	87 7f       	andi	r24, 0xF7	; 247
    15b6:	e9 81       	ldd	r30, Y+1	; 0x01
    15b8:	fa 81       	ldd	r31, Y+2	; 0x02
    15ba:	83 87       	std	Z+11, r24	; 0x0b
    gitem_cut( (gitem_t *)proc );
    15bc:	89 81       	ldd	r24, Y+1	; 0x01
    15be:	9a 81       	ldd	r25, Y+2	; 0x02
    15c0:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <gitem_cut>
#ifdef CONFIG_USE_HIGHEST_LOCKER
    // Меняем приоритет
    _proc_prio_control_stoped( proc );
    15c4:	89 81       	ldd	r24, Y+1	; 0x01
    15c6:	9a 81       	ldd	r25, Y+2	; 0x02
    15c8:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <_proc_prio_control_stoped>
#endif // CONFIG_USE_HIGHEST_LOCKER
    _proc_run( proc );
    15cc:	89 81       	ldd	r24, Y+1	; 0x01
    15ce:	9a 81       	ldd	r25, Y+2	; 0x02
    15d0:	0e 94 2c 0c 	call	0x1858	; 0x1858 <_proc_run>
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
}
    15d4:	0f 90       	pop	r0
    15d6:	0f 90       	pop	r0
    15d8:	0f 90       	pop	r0
    15da:	0f 90       	pop	r0
    15dc:	cf 91       	pop	r28
    15de:	df 91       	pop	r29
    15e0:	08 95       	ret

000015e2 <pcounter_init>:
*                           http://www.0chan.ru/r/res/9996.html                          *
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
void pcounter_init(pcounter_t * pcounter)
{
    15e2:	df 93       	push	r29
    15e4:	cf 93       	push	r28
    15e6:	00 d0       	rcall	.+0      	; 0x15e8 <pcounter_init+0x6>
    15e8:	0f 92       	push	r0
    15ea:	cd b7       	in	r28, 0x3d	; 61
    15ec:	de b7       	in	r29, 0x3e	; 62
    15ee:	9b 83       	std	Y+3, r25	; 0x03
    15f0:	8a 83       	std	Y+2, r24	; 0x02
    prio_t p;
    pcounter->index = (index_t)0;
    15f2:	ea 81       	ldd	r30, Y+2	; 0x02
    15f4:	fb 81       	ldd	r31, Y+3	; 0x03
    15f6:	10 8a       	std	Z+16, r1	; 0x10
    for(p = 0; p < (index_t)BITS_IN_INDEX_T; p++)pcounter->counter[p] = (count_t)0;
    15f8:	19 82       	std	Y+1, r1	; 0x01
    15fa:	0f c0       	rjmp	.+30     	; 0x161a <pcounter_init+0x38>
    15fc:	89 81       	ldd	r24, Y+1	; 0x01
    15fe:	88 2f       	mov	r24, r24
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	2a 81       	ldd	r18, Y+2	; 0x02
    1604:	3b 81       	ldd	r19, Y+3	; 0x03
    1606:	88 0f       	add	r24, r24
    1608:	99 1f       	adc	r25, r25
    160a:	f9 01       	movw	r30, r18
    160c:	e8 0f       	add	r30, r24
    160e:	f9 1f       	adc	r31, r25
    1610:	11 82       	std	Z+1, r1	; 0x01
    1612:	10 82       	st	Z, r1
    1614:	89 81       	ldd	r24, Y+1	; 0x01
    1616:	8f 5f       	subi	r24, 0xFF	; 255
    1618:	89 83       	std	Y+1, r24	; 0x01
    161a:	89 81       	ldd	r24, Y+1	; 0x01
    161c:	88 30       	cpi	r24, 0x08	; 8
    161e:	70 f3       	brcs	.-36     	; 0x15fc <pcounter_init+0x1a>
}
    1620:	0f 90       	pop	r0
    1622:	0f 90       	pop	r0
    1624:	0f 90       	pop	r0
    1626:	cf 91       	pop	r28
    1628:	df 91       	pop	r29
    162a:	08 95       	ret

0000162c <pcounter_inc>:

void pcounter_inc(pcounter_t * pcounter, prio_t prio)
{
    162c:	df 93       	push	r29
    162e:	cf 93       	push	r28
    1630:	00 d0       	rcall	.+0      	; 0x1632 <pcounter_inc+0x6>
    1632:	0f 92       	push	r0
    1634:	cd b7       	in	r28, 0x3d	; 61
    1636:	de b7       	in	r29, 0x3e	; 62
    1638:	9a 83       	std	Y+2, r25	; 0x02
    163a:	89 83       	std	Y+1, r24	; 0x01
    163c:	6b 83       	std	Y+3, r22	; 0x03
    pcounter->counter[prio]++;
    163e:	8b 81       	ldd	r24, Y+3	; 0x03
    1640:	68 2f       	mov	r22, r24
    1642:	70 e0       	ldi	r23, 0x00	; 0
    1644:	29 81       	ldd	r18, Y+1	; 0x01
    1646:	3a 81       	ldd	r19, Y+2	; 0x02
    1648:	cb 01       	movw	r24, r22
    164a:	88 0f       	add	r24, r24
    164c:	99 1f       	adc	r25, r25
    164e:	f9 01       	movw	r30, r18
    1650:	e8 0f       	add	r30, r24
    1652:	f9 1f       	adc	r31, r25
    1654:	80 81       	ld	r24, Z
    1656:	91 81       	ldd	r25, Z+1	; 0x01
    1658:	ac 01       	movw	r20, r24
    165a:	4f 5f       	subi	r20, 0xFF	; 255
    165c:	5f 4f       	sbci	r21, 0xFF	; 255
    165e:	29 81       	ldd	r18, Y+1	; 0x01
    1660:	3a 81       	ldd	r19, Y+2	; 0x02
    1662:	cb 01       	movw	r24, r22
    1664:	88 0f       	add	r24, r24
    1666:	99 1f       	adc	r25, r25
    1668:	f9 01       	movw	r30, r18
    166a:	e8 0f       	add	r30, r24
    166c:	f9 1f       	adc	r31, r25
    166e:	51 83       	std	Z+1, r21	; 0x01
    1670:	40 83       	st	Z, r20
    pcounter->index |= ((index_t)1)<<prio;
    1672:	e9 81       	ldd	r30, Y+1	; 0x01
    1674:	fa 81       	ldd	r31, Y+2	; 0x02
    1676:	80 89       	ldd	r24, Z+16	; 0x10
    1678:	48 2f       	mov	r20, r24
    167a:	8b 81       	ldd	r24, Y+3	; 0x03
    167c:	28 2f       	mov	r18, r24
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	02 2e       	mov	r0, r18
    1686:	02 c0       	rjmp	.+4      	; 0x168c <pcounter_inc+0x60>
    1688:	88 0f       	add	r24, r24
    168a:	99 1f       	adc	r25, r25
    168c:	0a 94       	dec	r0
    168e:	e2 f7       	brpl	.-8      	; 0x1688 <pcounter_inc+0x5c>
    1690:	84 2b       	or	r24, r20
    1692:	e9 81       	ldd	r30, Y+1	; 0x01
    1694:	fa 81       	ldd	r31, Y+2	; 0x02
    1696:	80 8b       	std	Z+16, r24	; 0x10
}
    1698:	0f 90       	pop	r0
    169a:	0f 90       	pop	r0
    169c:	0f 90       	pop	r0
    169e:	cf 91       	pop	r28
    16a0:	df 91       	pop	r29
    16a2:	08 95       	ret

000016a4 <pcounter_dec>:

index_t pcounter_dec(pcounter_t * pcounter, prio_t prio)
{
    16a4:	df 93       	push	r29
    16a6:	cf 93       	push	r28
    16a8:	00 d0       	rcall	.+0      	; 0x16aa <pcounter_dec+0x6>
    16aa:	00 d0       	rcall	.+0      	; 0x16ac <pcounter_dec+0x8>
    16ac:	cd b7       	in	r28, 0x3d	; 61
    16ae:	de b7       	in	r29, 0x3e	; 62
    16b0:	9b 83       	std	Y+3, r25	; 0x03
    16b2:	8a 83       	std	Y+2, r24	; 0x02
    16b4:	6c 83       	std	Y+4, r22	; 0x04
    index_t mask = ((index_t)1)<<prio;
    16b6:	8c 81       	ldd	r24, Y+4	; 0x04
    16b8:	28 2f       	mov	r18, r24
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	02 c0       	rjmp	.+4      	; 0x16c6 <pcounter_dec+0x22>
    16c2:	88 0f       	add	r24, r24
    16c4:	99 1f       	adc	r25, r25
    16c6:	2a 95       	dec	r18
    16c8:	e2 f7       	brpl	.-8      	; 0x16c2 <pcounter_dec+0x1e>
    16ca:	89 83       	std	Y+1, r24	; 0x01
    pcounter->counter[prio]--;
    16cc:	8c 81       	ldd	r24, Y+4	; 0x04
    16ce:	68 2f       	mov	r22, r24
    16d0:	70 e0       	ldi	r23, 0x00	; 0
    16d2:	2a 81       	ldd	r18, Y+2	; 0x02
    16d4:	3b 81       	ldd	r19, Y+3	; 0x03
    16d6:	cb 01       	movw	r24, r22
    16d8:	88 0f       	add	r24, r24
    16da:	99 1f       	adc	r25, r25
    16dc:	f9 01       	movw	r30, r18
    16de:	e8 0f       	add	r30, r24
    16e0:	f9 1f       	adc	r31, r25
    16e2:	80 81       	ld	r24, Z
    16e4:	91 81       	ldd	r25, Z+1	; 0x01
    16e6:	ac 01       	movw	r20, r24
    16e8:	41 50       	subi	r20, 0x01	; 1
    16ea:	50 40       	sbci	r21, 0x00	; 0
    16ec:	2a 81       	ldd	r18, Y+2	; 0x02
    16ee:	3b 81       	ldd	r19, Y+3	; 0x03
    16f0:	cb 01       	movw	r24, r22
    16f2:	88 0f       	add	r24, r24
    16f4:	99 1f       	adc	r25, r25
    16f6:	f9 01       	movw	r30, r18
    16f8:	e8 0f       	add	r30, r24
    16fa:	f9 1f       	adc	r31, r25
    16fc:	51 83       	std	Z+1, r21	; 0x01
    16fe:	40 83       	st	Z, r20
    if(pcounter->counter[prio] == (count_t)0)pcounter->index &= ~mask;
    1700:	8c 81       	ldd	r24, Y+4	; 0x04
    1702:	88 2f       	mov	r24, r24
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	2a 81       	ldd	r18, Y+2	; 0x02
    1708:	3b 81       	ldd	r19, Y+3	; 0x03
    170a:	88 0f       	add	r24, r24
    170c:	99 1f       	adc	r25, r25
    170e:	f9 01       	movw	r30, r18
    1710:	e8 0f       	add	r30, r24
    1712:	f9 1f       	adc	r31, r25
    1714:	80 81       	ld	r24, Z
    1716:	91 81       	ldd	r25, Z+1	; 0x01
    1718:	00 97       	sbiw	r24, 0x00	; 0
    171a:	51 f4       	brne	.+20     	; 0x1730 <pcounter_dec+0x8c>
    171c:	ea 81       	ldd	r30, Y+2	; 0x02
    171e:	fb 81       	ldd	r31, Y+3	; 0x03
    1720:	80 89       	ldd	r24, Z+16	; 0x10
    1722:	98 2f       	mov	r25, r24
    1724:	89 81       	ldd	r24, Y+1	; 0x01
    1726:	80 95       	com	r24
    1728:	89 23       	and	r24, r25
    172a:	ea 81       	ldd	r30, Y+2	; 0x02
    172c:	fb 81       	ldd	r31, Y+3	; 0x03
    172e:	80 8b       	std	Z+16, r24	; 0x10
    return pcounter->index & mask;
    1730:	ea 81       	ldd	r30, Y+2	; 0x02
    1732:	fb 81       	ldd	r31, Y+3	; 0x03
    1734:	90 89       	ldd	r25, Z+16	; 0x10
    1736:	89 81       	ldd	r24, Y+1	; 0x01
    1738:	89 23       	and	r24, r25
}
    173a:	0f 90       	pop	r0
    173c:	0f 90       	pop	r0
    173e:	0f 90       	pop	r0
    1740:	0f 90       	pop	r0
    1742:	cf 91       	pop	r28
    1744:	df 91       	pop	r29
    1746:	08 95       	ret

00001748 <proc_init_isr>:
    bool_t is_rt // если true, значит процесс будет иметть поведение RT
#ifdef CONFIG_MP
    ,affinity_t affinity
#endif // CONFIG_MP
)
{
    1748:	8f 92       	push	r8
    174a:	af 92       	push	r10
    174c:	bf 92       	push	r11
    174e:	cf 92       	push	r12
    1750:	ef 92       	push	r14
    1752:	ff 92       	push	r15
    1754:	0f 93       	push	r16
    1756:	1f 93       	push	r17
    1758:	df 93       	push	r29
    175a:	cf 93       	push	r28
    175c:	cd b7       	in	r28, 0x3d	; 61
    175e:	de b7       	in	r29, 0x3e	; 62
    1760:	61 97       	sbiw	r28, 0x11	; 17
    1762:	0f b6       	in	r0, 0x3f	; 63
    1764:	f8 94       	cli
    1766:	de bf       	out	0x3e, r29	; 62
    1768:	0f be       	out	0x3f, r0	; 63
    176a:	cd bf       	out	0x3d, r28	; 61
    176c:	9a 83       	std	Y+2, r25	; 0x02
    176e:	89 83       	std	Y+1, r24	; 0x01
    1770:	7c 83       	std	Y+4, r23	; 0x04
    1772:	6b 83       	std	Y+3, r22	; 0x03
    1774:	5e 83       	std	Y+6, r21	; 0x06
    1776:	4d 83       	std	Y+5, r20	; 0x05
    1778:	38 87       	std	Y+8, r19	; 0x08
    177a:	2f 83       	std	Y+7, r18	; 0x07
    177c:	1a 87       	std	Y+10, r17	; 0x0a
    177e:	09 87       	std	Y+9, r16	; 0x09
    1780:	fc 86       	std	Y+12, r15	; 0x0c
    1782:	eb 86       	std	Y+11, r14	; 0x0b
    1784:	cd 86       	std	Y+13, r12	; 0x0d
    1786:	bf 86       	std	Y+15, r11	; 0x0f
    1788:	ae 86       	std	Y+14, r10	; 0x0e
    178a:	88 8a       	std	Y+16, r8	; 0x10
    gitem_init( (gitem_t *)proc, prio );
    178c:	89 81       	ldd	r24, Y+1	; 0x01
    178e:	9a 81       	ldd	r25, Y+2	; 0x02
    1790:	6d 85       	ldd	r22, Y+13	; 0x0d
    1792:	0e 94 68 06 	call	0xcd0	; 0xcd0 <gitem_init>
    proc->flags = ( is_rt )?PROC_FLG_RT:(flag_t)0;
    1796:	88 89       	ldd	r24, Y+16	; 0x10
    1798:	89 8b       	std	Y+17, r24	; 0x11
    179a:	89 89       	ldd	r24, Y+17	; 0x11
    179c:	88 23       	and	r24, r24
    179e:	11 f0       	breq	.+4      	; 0x17a4 <proc_init_isr+0x5c>
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    17a2:	89 8b       	std	Y+17, r24	; 0x11
    17a4:	89 89       	ldd	r24, Y+17	; 0x11
    17a6:	e9 81       	ldd	r30, Y+1	; 0x01
    17a8:	fa 81       	ldd	r31, Y+2	; 0x02
    17aa:	83 87       	std	Z+11, r24	; 0x0b
#ifdef CONFIG_USE_HIGHEST_LOCKER
    pcounter_init(&proc->lres);
    17ac:	89 81       	ldd	r24, Y+1	; 0x01
    17ae:	9a 81       	ldd	r25, Y+2	; 0x02
    17b0:	0d 96       	adiw	r24, 0x0d	; 13
    17b2:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <pcounter_init>
    proc->base_prio = prio;
    17b6:	e9 81       	ldd	r30, Y+1	; 0x01
    17b8:	fa 81       	ldd	r31, Y+2	; 0x02
    17ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    17bc:	84 87       	std	Z+12, r24	; 0x0c
#else
    proc->lres = (count_t)0;
#endif
    proc->time_quant = time_quant;
    17be:	e9 81       	ldd	r30, Y+1	; 0x01
    17c0:	fa 81       	ldd	r31, Y+2	; 0x02
    17c2:	8e 85       	ldd	r24, Y+14	; 0x0e
    17c4:	9f 85       	ldd	r25, Y+15	; 0x0f
    17c6:	97 8f       	std	Z+31, r25	; 0x1f
    17c8:	86 8f       	std	Z+30, r24	; 0x1e
    proc->timer = time_quant;
    17ca:	e9 81       	ldd	r30, Y+1	; 0x01
    17cc:	fa 81       	ldd	r31, Y+2	; 0x02
    17ce:	8e 85       	ldd	r24, Y+14	; 0x0e
    17d0:	9f 85       	ldd	r25, Y+15	; 0x0f
    17d2:	91 a3       	std	Z+33, r25	; 0x21
    17d4:	80 a3       	std	Z+32, r24	; 0x20
#ifdef CONFIG_MP
    proc->core_id = (core_id_t)0;
    proc->affinity = affinity;
#endif // CONFIG_MP
    proc->pmain = pmain;
    17d6:	e9 81       	ldd	r30, Y+1	; 0x01
    17d8:	fa 81       	ldd	r31, Y+2	; 0x02
    17da:	8b 81       	ldd	r24, Y+3	; 0x03
    17dc:	9c 81       	ldd	r25, Y+4	; 0x04
    17de:	93 a3       	std	Z+35, r25	; 0x23
    17e0:	82 a3       	std	Z+34, r24	; 0x22
    proc->sv_hook = sv_hook;
    17e2:	e9 81       	ldd	r30, Y+1	; 0x01
    17e4:	fa 81       	ldd	r31, Y+2	; 0x02
    17e6:	8d 81       	ldd	r24, Y+5	; 0x05
    17e8:	9e 81       	ldd	r25, Y+6	; 0x06
    17ea:	95 a3       	std	Z+37, r25	; 0x25
    17ec:	84 a3       	std	Z+36, r24	; 0x24
    proc->rs_hook = rs_hook;
    17ee:	e9 81       	ldd	r30, Y+1	; 0x01
    17f0:	fa 81       	ldd	r31, Y+2	; 0x02
    17f2:	8f 81       	ldd	r24, Y+7	; 0x07
    17f4:	98 85       	ldd	r25, Y+8	; 0x08
    17f6:	97 a3       	std	Z+39, r25	; 0x27
    17f8:	86 a3       	std	Z+38, r24	; 0x26
    proc->arg = arg;
    17fa:	e9 81       	ldd	r30, Y+1	; 0x01
    17fc:	fa 81       	ldd	r31, Y+2	; 0x02
    17fe:	89 85       	ldd	r24, Y+9	; 0x09
    1800:	9a 85       	ldd	r25, Y+10	; 0x0a
    1802:	91 a7       	std	Z+41, r25	; 0x29
    1804:	80 a7       	std	Z+40, r24	; 0x28
    proc->sstart = sstart;
    1806:	e9 81       	ldd	r30, Y+1	; 0x01
    1808:	fa 81       	ldd	r31, Y+2	; 0x02
    180a:	8b 85       	ldd	r24, Y+11	; 0x0b
    180c:	9c 85       	ldd	r25, Y+12	; 0x0c
    180e:	93 a7       	std	Z+43, r25	; 0x2b
    1810:	82 a7       	std	Z+42, r24	; 0x2a
    if( sstart )proc->spointer = proc_stack_init(sstart, (code_t)proc_run_wrapper, (void *)proc);
    1812:	8b 85       	ldd	r24, Y+11	; 0x0b
    1814:	9c 85       	ldd	r25, Y+12	; 0x0c
    1816:	00 97       	sbiw	r24, 0x00	; 0
    1818:	71 f0       	breq	.+28     	; 0x1836 <proc_init_isr+0xee>
    181a:	46 e8       	ldi	r20, 0x86	; 134
    181c:	53 e0       	ldi	r21, 0x03	; 3
    181e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1820:	9c 85       	ldd	r25, Y+12	; 0x0c
    1822:	29 81       	ldd	r18, Y+1	; 0x01
    1824:	3a 81       	ldd	r19, Y+2	; 0x02
    1826:	ba 01       	movw	r22, r20
    1828:	a9 01       	movw	r20, r18
    182a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <proc_stack_init>
    182e:	e9 81       	ldd	r30, Y+1	; 0x01
    1830:	fa 81       	ldd	r31, Y+2	; 0x02
    1832:	95 a7       	std	Z+45, r25	; 0x2d
    1834:	84 a7       	std	Z+44, r24	; 0x2c
}
    1836:	61 96       	adiw	r28, 0x11	; 17
    1838:	0f b6       	in	r0, 0x3f	; 63
    183a:	f8 94       	cli
    183c:	de bf       	out	0x3e, r29	; 62
    183e:	0f be       	out	0x3f, r0	; 63
    1840:	cd bf       	out	0x3d, r28	; 61
    1842:	cf 91       	pop	r28
    1844:	df 91       	pop	r29
    1846:	1f 91       	pop	r17
    1848:	0f 91       	pop	r16
    184a:	ff 90       	pop	r15
    184c:	ef 90       	pop	r14
    184e:	cf 90       	pop	r12
    1850:	bf 90       	pop	r11
    1852:	af 90       	pop	r10
    1854:	8f 90       	pop	r8
    1856:	08 95       	ret

00001858 <_proc_run>:
    spin_unlock( &proc_sched->lock );
}
#endif // CONFIG_MP

void _proc_run( proc_t * proc )
{
    1858:	df 93       	push	r29
    185a:	cf 93       	push	r28
    185c:	00 d0       	rcall	.+0      	; 0x185e <_proc_run+0x6>
    185e:	cd b7       	in	r28, 0x3d	; 61
    1860:	de b7       	in	r29, 0x3e	; 62
    1862:	9a 83       	std	Y+2, r25	; 0x02
    1864:	89 83       	std	Y+1, r24	; 0x01
    proc->flags |= PROC_FLG_RUN;
    1866:	e9 81       	ldd	r30, Y+1	; 0x01
    1868:	fa 81       	ldd	r31, Y+2	; 0x02
    186a:	83 85       	ldd	r24, Z+11	; 0x0b
    186c:	82 60       	ori	r24, 0x02	; 2
    186e:	e9 81       	ldd	r30, Y+1	; 0x01
    1870:	fa 81       	ldd	r31, Y+2	; 0x02
    1872:	83 87       	std	Z+11, r24	; 0x0b
    spin_lock( &kernel.stat_lock );
    proc->core_id = sched_load_balancer( proc, (stat_t *)kernel.stat );
    stat_inc( proc, (stat_t *)kernel.stat+proc->core_id );
    spin_unlock( &kernel.stat_lock );
#endif
    _proc_run_( proc );
    1874:	89 81       	ldd	r24, Y+1	; 0x01
    1876:	9a 81       	ldd	r25, Y+2	; 0x02
    1878:	20 91 a0 01 	lds	r18, 0x01A0
    187c:	30 91 a1 01 	lds	r19, 0x01A1
    1880:	b9 01       	movw	r22, r18
    1882:	0e 94 8e 06 	call	0xd1c	; 0xd1c <gitem_insert>
#ifdef CONFIG_MP
    resched( proc->core_id );
#else
    resched();
    1886:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
#endif // CONFIG_MP
}
    188a:	0f 90       	pop	r0
    188c:	0f 90       	pop	r0
    188e:	cf 91       	pop	r28
    1890:	df 91       	pop	r29
    1892:	08 95       	ret

00001894 <proc_run_isr>:
// Функция общего пользования - запуск процесса из обработчика прерывания, прерывания должны быть запрещены во время запуска
bool_t proc_run_isr(proc_t * proc)
{
    1894:	df 93       	push	r29
    1896:	cf 93       	push	r28
    1898:	00 d0       	rcall	.+0      	; 0x189a <proc_run_isr+0x6>
    189a:	0f 92       	push	r0
    189c:	cd b7       	in	r28, 0x3d	; 61
    189e:	de b7       	in	r29, 0x3e	; 62
    18a0:	9b 83       	std	Y+3, r25	; 0x03
    18a2:	8a 83       	std	Y+2, r24	; 0x02
    bool_t ret = (bool_t)1;
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    if( proc->flags & (PROC_FLG_RUN|PROC_FLG_QUEUE|PROC_FLG_WAIT|PROC_FLG_END|PROC_FLG_DEAD) )
    18a8:	ea 81       	ldd	r30, Y+2	; 0x02
    18aa:	fb 81       	ldd	r31, Y+3	; 0x03
    18ac:	83 85       	ldd	r24, Z+11	; 0x0b
    18ae:	88 2f       	mov	r24, r24
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	8a 7d       	andi	r24, 0xDA	; 218
    18b4:	90 70       	andi	r25, 0x00	; 0
    18b6:	00 97       	sbiw	r24, 0x00	; 0
    18b8:	11 f0       	breq	.+4      	; 0x18be <proc_run_isr+0x2a>
    {
        ret = (bool_t)0;
    18ba:	19 82       	std	Y+1, r1	; 0x01
    18bc:	04 c0       	rjmp	.+8      	; 0x18c6 <proc_run_isr+0x32>
        goto end;
    }
    _proc_run( proc );
    18be:	8a 81       	ldd	r24, Y+2	; 0x02
    18c0:	9b 81       	ldd	r25, Y+3	; 0x03
    18c2:	0e 94 2c 0c 	call	0x1858	; 0x1858 <_proc_run>
end:
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    return ret;
    18c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    18c8:	0f 90       	pop	r0
    18ca:	0f 90       	pop	r0
    18cc:	0f 90       	pop	r0
    18ce:	cf 91       	pop	r28
    18d0:	df 91       	pop	r29
    18d2:	08 95       	ret

000018d4 <proc_restart_isr>:
// Перезепуск процесса из обработчика прерываний, прерывания должны быть запрещены
bool_t proc_restart_isr(proc_t * proc)
{
    18d4:	df 93       	push	r29
    18d6:	cf 93       	push	r28
    18d8:	00 d0       	rcall	.+0      	; 0x18da <proc_restart_isr+0x6>
    18da:	0f 92       	push	r0
    18dc:	cd b7       	in	r28, 0x3d	; 61
    18de:	de b7       	in	r29, 0x3e	; 62
    18e0:	9b 83       	std	Y+3, r25	; 0x03
    18e2:	8a 83       	std	Y+2, r24	; 0x02
    bool_t ret = (bool_t)1;
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif
    if( proc->flags & (PROC_FLG_RUN|PROC_FLG_HOLD|PROC_FLG_QUEUE|PROC_FLG_WAIT|PROC_FLG_PRE_END|PROC_FLG_DEAD) )
    18e8:	ea 81       	ldd	r30, Y+2	; 0x02
    18ea:	fb 81       	ldd	r31, Y+3	; 0x03
    18ec:	83 85       	ldd	r24, Z+11	; 0x0b
    18ee:	88 2f       	mov	r24, r24
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	8e 7b       	andi	r24, 0xBE	; 190
    18f4:	90 70       	andi	r25, 0x00	; 0
    18f6:	00 97       	sbiw	r24, 0x00	; 0
    18f8:	11 f0       	breq	.+4      	; 0x18fe <proc_restart_isr+0x2a>
    {
        ret = (bool_t)0;
    18fa:	19 82       	std	Y+1, r1	; 0x01
    18fc:	2d c0       	rjmp	.+90     	; 0x1958 <proc_restart_isr+0x84>
        goto end;
    }
    proc->flags = ( proc->flags & PROC_FLG_RT )?PROC_FLG_RT:(flag_t)0;
    18fe:	ea 81       	ldd	r30, Y+2	; 0x02
    1900:	fb 81       	ldd	r31, Y+3	; 0x03
    1902:	83 85       	ldd	r24, Z+11	; 0x0b
    1904:	81 70       	andi	r24, 0x01	; 1
    1906:	ea 81       	ldd	r30, Y+2	; 0x02
    1908:	fb 81       	ldd	r31, Y+3	; 0x03
    190a:	83 87       	std	Z+11, r24	; 0x0b
#ifdef CONFIG_USE_HIGHEST_LOCKER
    pcounter_init(&proc->lres);
    190c:	8a 81       	ldd	r24, Y+2	; 0x02
    190e:	9b 81       	ldd	r25, Y+3	; 0x03
    1910:	0d 96       	adiw	r24, 0x0d	; 13
    1912:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <pcounter_init>
#else
    proc->lres = (count_t)0;
#endif
    proc->timer = proc->time_quant;
    1916:	ea 81       	ldd	r30, Y+2	; 0x02
    1918:	fb 81       	ldd	r31, Y+3	; 0x03
    191a:	86 8d       	ldd	r24, Z+30	; 0x1e
    191c:	97 8d       	ldd	r25, Z+31	; 0x1f
    191e:	ea 81       	ldd	r30, Y+2	; 0x02
    1920:	fb 81       	ldd	r31, Y+3	; 0x03
    1922:	91 a3       	std	Z+33, r25	; 0x21
    1924:	80 a3       	std	Z+32, r24	; 0x20

    if( proc->sstart )proc->spointer = proc_stack_init( proc->sstart, (code_t)proc_run_wrapper, (void *)proc );
    1926:	ea 81       	ldd	r30, Y+2	; 0x02
    1928:	fb 81       	ldd	r31, Y+3	; 0x03
    192a:	82 a5       	ldd	r24, Z+42	; 0x2a
    192c:	93 a5       	ldd	r25, Z+43	; 0x2b
    192e:	00 97       	sbiw	r24, 0x00	; 0
    1930:	79 f0       	breq	.+30     	; 0x1950 <proc_restart_isr+0x7c>
    1932:	ea 81       	ldd	r30, Y+2	; 0x02
    1934:	fb 81       	ldd	r31, Y+3	; 0x03
    1936:	82 a5       	ldd	r24, Z+42	; 0x2a
    1938:	93 a5       	ldd	r25, Z+43	; 0x2b
    193a:	26 e8       	ldi	r18, 0x86	; 134
    193c:	33 e0       	ldi	r19, 0x03	; 3
    193e:	4a 81       	ldd	r20, Y+2	; 0x02
    1940:	5b 81       	ldd	r21, Y+3	; 0x03
    1942:	b9 01       	movw	r22, r18
    1944:	0e 94 d7 00 	call	0x1ae	; 0x1ae <proc_stack_init>
    1948:	ea 81       	ldd	r30, Y+2	; 0x02
    194a:	fb 81       	ldd	r31, Y+3	; 0x03
    194c:	95 a7       	std	Z+45, r25	; 0x2d
    194e:	84 a7       	std	Z+44, r24	; 0x2c
    _proc_run( proc );
    1950:	8a 81       	ldd	r24, Y+2	; 0x02
    1952:	9b 81       	ldd	r25, Y+3	; 0x03
    1954:	0e 94 2c 0c 	call	0x1858	; 0x1858 <_proc_run>
end:
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif
    return ret;
    1958:	89 81       	ldd	r24, Y+1	; 0x01
}
    195a:	0f 90       	pop	r0
    195c:	0f 90       	pop	r0
    195e:	0f 90       	pop	r0
    1960:	cf 91       	pop	r28
    1962:	df 91       	pop	r29
    1964:	08 95       	ret

00001966 <_proc_stop>:
        spin_unlock( xlist_lock );
    }
}
#endif // CONFIG_MP
void _proc_stop(proc_t * proc)
{
    1966:	df 93       	push	r29
    1968:	cf 93       	push	r28
    196a:	00 d0       	rcall	.+0      	; 0x196c <_proc_stop+0x6>
    196c:	cd b7       	in	r28, 0x3d	; 61
    196e:	de b7       	in	r29, 0x3e	; 62
    1970:	9a 83       	std	Y+2, r25	; 0x02
    1972:	89 83       	std	Y+1, r24	; 0x01
    proc->flags &= ~PROC_FLG_RUN;
    1974:	e9 81       	ldd	r30, Y+1	; 0x01
    1976:	fa 81       	ldd	r31, Y+2	; 0x02
    1978:	83 85       	ldd	r24, Z+11	; 0x0b
    197a:	8d 7f       	andi	r24, 0xFD	; 253
    197c:	e9 81       	ldd	r30, Y+1	; 0x01
    197e:	fa 81       	ldd	r31, Y+2	; 0x02
    1980:	83 87       	std	Z+11, r24	; 0x0b
    _proc_stop_( proc );
    1982:	89 81       	ldd	r24, Y+1	; 0x01
    1984:	9a 81       	ldd	r25, Y+2	; 0x02
    1986:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <gitem_cut>
#ifdef CONFIG_MP
    resched( proc->core_id );
#else
    resched();
    198a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
#endif // CONFIG_MP
}
    198e:	0f 90       	pop	r0
    1990:	0f 90       	pop	r0
    1992:	cf 91       	pop	r28
    1994:	df 91       	pop	r29
    1996:	08 95       	ret

00001998 <proc_stop_isr>:
// Останов процесса из обработчика прерываний, прерывания должны быть запрещены
bool_t proc_stop_isr(proc_t * proc)
{
    1998:	df 93       	push	r29
    199a:	cf 93       	push	r28
    199c:	00 d0       	rcall	.+0      	; 0x199e <proc_stop_isr+0x6>
    199e:	0f 92       	push	r0
    19a0:	cd b7       	in	r28, 0x3d	; 61
    19a2:	de b7       	in	r29, 0x3e	; 62
    19a4:	9b 83       	std	Y+3, r25	; 0x03
    19a6:	8a 83       	std	Y+2, r24	; 0x02
    bool_t ret = (bool_t)0;
    19a8:	19 82       	std	Y+1, r1	; 0x01
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    //Проверка флагов
    //В случчае PROC_FLG_WAIT будем обрабатывать PROC_FLG_PRE_END на выходе из sig_wait.
    //В случае PROC_FLG_HOLD или PROC_FLG_QUEUE будем обрабатывать PROC_FLG_PRE_END на выходе из функции, освобождающей общий ресурс.
    if( proc->flags & (PROC_FLG_HOLD|PROC_FLG_QUEUE|PROC_FLG_WAIT) )proc->flags |= PROC_FLG_PRE_END;
    19aa:	ea 81       	ldd	r30, Y+2	; 0x02
    19ac:	fb 81       	ldd	r31, Y+3	; 0x03
    19ae:	83 85       	ldd	r24, Z+11	; 0x0b
    19b0:	88 2f       	mov	r24, r24
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	8c 71       	andi	r24, 0x1C	; 28
    19b6:	90 70       	andi	r25, 0x00	; 0
    19b8:	00 97       	sbiw	r24, 0x00	; 0
    19ba:	41 f0       	breq	.+16     	; 0x19cc <proc_stop_isr+0x34>
    19bc:	ea 81       	ldd	r30, Y+2	; 0x02
    19be:	fb 81       	ldd	r31, Y+3	; 0x03
    19c0:	83 85       	ldd	r24, Z+11	; 0x0b
    19c2:	80 62       	ori	r24, 0x20	; 32
    19c4:	ea 81       	ldd	r30, Y+2	; 0x02
    19c6:	fb 81       	ldd	r31, Y+3	; 0x03
    19c8:	83 87       	std	Z+11, r24	; 0x0b
    19ca:	0f c0       	rjmp	.+30     	; 0x19ea <proc_stop_isr+0x52>
    else if( proc->flags & PROC_FLG_RUN )
    19cc:	ea 81       	ldd	r30, Y+2	; 0x02
    19ce:	fb 81       	ldd	r31, Y+3	; 0x03
    19d0:	83 85       	ldd	r24, Z+11	; 0x0b
    19d2:	88 2f       	mov	r24, r24
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	82 70       	andi	r24, 0x02	; 2
    19d8:	90 70       	andi	r25, 0x00	; 0
    19da:	00 97       	sbiw	r24, 0x00	; 0
    19dc:	31 f0       	breq	.+12     	; 0x19ea <proc_stop_isr+0x52>
    {
        _proc_stop( proc );
    19de:	8a 81       	ldd	r24, Y+2	; 0x02
    19e0:	9b 81       	ldd	r25, Y+3	; 0x03
    19e2:	0e 94 b3 0c 	call	0x1966	; 0x1966 <_proc_stop>
        ret = (bool_t)1;
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	89 83       	std	Y+1, r24	; 0x01
    }
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    return ret;
    19ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    19ec:	0f 90       	pop	r0
    19ee:	0f 90       	pop	r0
    19f0:	0f 90       	pop	r0
    19f2:	cf 91       	pop	r28
    19f4:	df 91       	pop	r29
    19f6:	08 95       	ret

000019f8 <proc_reset_watchdog>:
void proc_reset_watchdog(void)
{
    19f8:	df 93       	push	r29
    19fa:	cf 93       	push	r28
    19fc:	00 d0       	rcall	.+0      	; 0x19fe <proc_reset_watchdog+0x6>
    19fe:	cd b7       	in	r28, 0x3d	; 61
    1a00:	de b7       	in	r29, 0x3e	; 62
#ifdef CONFIG_MP
    core_id_t current_core = _enter_crit_sec();
    proc = ((sched_t *)kernel.sched + current_core)->current_proc;
    spin_lock(&proc->lock);
#else
    enter_crit_sec();
    1a02:	0e 94 38 06 	call	0xc70	; 0xc70 <enter_crit_sec>
    proc = kernel.sched.current_proc;
    1a06:	80 91 9e 01 	lds	r24, 0x019E
    1a0a:	90 91 9f 01 	lds	r25, 0x019F
    1a0e:	9a 83       	std	Y+2, r25	; 0x02
    1a10:	89 83       	std	Y+1, r24	; 0x01
#endif
    if( proc->flags & PROC_FLG_RT )proc->timer = proc->time_quant;
    1a12:	e9 81       	ldd	r30, Y+1	; 0x01
    1a14:	fa 81       	ldd	r31, Y+2	; 0x02
    1a16:	83 85       	ldd	r24, Z+11	; 0x0b
    1a18:	88 2f       	mov	r24, r24
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	81 70       	andi	r24, 0x01	; 1
    1a1e:	90 70       	andi	r25, 0x00	; 0
    1a20:	88 23       	and	r24, r24
    1a22:	41 f0       	breq	.+16     	; 0x1a34 <proc_reset_watchdog+0x3c>
    1a24:	e9 81       	ldd	r30, Y+1	; 0x01
    1a26:	fa 81       	ldd	r31, Y+2	; 0x02
    1a28:	86 8d       	ldd	r24, Z+30	; 0x1e
    1a2a:	97 8d       	ldd	r25, Z+31	; 0x1f
    1a2c:	e9 81       	ldd	r30, Y+1	; 0x01
    1a2e:	fa 81       	ldd	r31, Y+2	; 0x02
    1a30:	91 a3       	std	Z+33, r25	; 0x21
    1a32:	80 a3       	std	Z+32, r24	; 0x20
#ifdef CONFIG_MP
    spin_lock(&proc->lock);
    _exit_crit_sec(current_core);
#else
    exit_crit_sec();
    1a34:	0e 94 4a 06 	call	0xc94	; 0xc94 <exit_crit_sec>
#endif
}
    1a38:	0f 90       	pop	r0
    1a3a:	0f 90       	pop	r0
    1a3c:	cf 91       	pop	r28
    1a3e:	df 91       	pop	r29
    1a40:	08 95       	ret

00001a42 <_proc_flag_stop_isr>:

void _proc_flag_stop_isr( flag_t mask )
{
    1a42:	df 93       	push	r29
    1a44:	cf 93       	push	r28
    1a46:	00 d0       	rcall	.+0      	; 0x1a48 <_proc_flag_stop_isr+0x6>
    1a48:	0f 92       	push	r0
    1a4a:	cd b7       	in	r28, 0x3d	; 61
    1a4c:	de b7       	in	r29, 0x3e	; 62
    1a4e:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = current_proc();
    1a50:	0e 94 cc 00 	call	0x198	; 0x198 <current_proc>
    1a54:	9a 83       	std	Y+2, r25	; 0x02
    1a56:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif //CONFIG_MP
    proc->flags &= mask;
    1a58:	e9 81       	ldd	r30, Y+1	; 0x01
    1a5a:	fa 81       	ldd	r31, Y+2	; 0x02
    1a5c:	93 85       	ldd	r25, Z+11	; 0x0b
    1a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a60:	89 23       	and	r24, r25
    1a62:	e9 81       	ldd	r30, Y+1	; 0x01
    1a64:	fa 81       	ldd	r31, Y+2	; 0x02
    1a66:	83 87       	std	Z+11, r24	; 0x0b
    if(  ( proc->flags & PROC_FLG_PRE_END ) && (!(proc->flags & PROC_FLG_HOLD))  )
    1a68:	e9 81       	ldd	r30, Y+1	; 0x01
    1a6a:	fa 81       	ldd	r31, Y+2	; 0x02
    1a6c:	83 85       	ldd	r24, Z+11	; 0x0b
    1a6e:	88 2f       	mov	r24, r24
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	80 72       	andi	r24, 0x20	; 32
    1a74:	90 70       	andi	r25, 0x00	; 0
    1a76:	00 97       	sbiw	r24, 0x00	; 0
    1a78:	a1 f0       	breq	.+40     	; 0x1aa2 <_proc_flag_stop_isr+0x60>
    1a7a:	e9 81       	ldd	r30, Y+1	; 0x01
    1a7c:	fa 81       	ldd	r31, Y+2	; 0x02
    1a7e:	83 85       	ldd	r24, Z+11	; 0x0b
    1a80:	88 2f       	mov	r24, r24
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	84 70       	andi	r24, 0x04	; 4
    1a86:	90 70       	andi	r25, 0x00	; 0
    1a88:	00 97       	sbiw	r24, 0x00	; 0
    1a8a:	59 f4       	brne	.+22     	; 0x1aa2 <_proc_flag_stop_isr+0x60>
    {
        proc->flags &= ~PROC_FLG_PRE_END;
    1a8c:	e9 81       	ldd	r30, Y+1	; 0x01
    1a8e:	fa 81       	ldd	r31, Y+2	; 0x02
    1a90:	83 85       	ldd	r24, Z+11	; 0x0b
    1a92:	8f 7d       	andi	r24, 0xDF	; 223
    1a94:	e9 81       	ldd	r30, Y+1	; 0x01
    1a96:	fa 81       	ldd	r31, Y+2	; 0x02
    1a98:	83 87       	std	Z+11, r24	; 0x0b
        _proc_stop( proc );
    1a9a:	89 81       	ldd	r24, Y+1	; 0x01
    1a9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a9e:	0e 94 b3 0c 	call	0x1966	; 0x1966 <_proc_stop>
    }
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif //CONFIG_MP
}
    1aa2:	0f 90       	pop	r0
    1aa4:	0f 90       	pop	r0
    1aa6:	0f 90       	pop	r0
    1aa8:	cf 91       	pop	r28
    1aaa:	df 91       	pop	r29
    1aac:	08 95       	ret

00001aae <_proc_lres_inc>:
    proc_t * proc
#ifdef CONFIG_USE_HIGHEST_LOCKER
    ,prio_t prio
#endif
)
{
    1aae:	df 93       	push	r29
    1ab0:	cf 93       	push	r28
    1ab2:	00 d0       	rcall	.+0      	; 0x1ab4 <_proc_lres_inc+0x6>
    1ab4:	0f 92       	push	r0
    1ab6:	cd b7       	in	r28, 0x3d	; 61
    1ab8:	de b7       	in	r29, 0x3e	; 62
    1aba:	9a 83       	std	Y+2, r25	; 0x02
    1abc:	89 83       	std	Y+1, r24	; 0x01
    1abe:	6b 83       	std	Y+3, r22	; 0x03
#ifdef CONFIG_USE_HIGHEST_LOCKER
    if( proc->lres.index == (index_t)0 )proc->flags |= PROC_FLG_HOLD;
    1ac0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ac2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ac4:	85 8d       	ldd	r24, Z+29	; 0x1d
    1ac6:	88 23       	and	r24, r24
    1ac8:	39 f4       	brne	.+14     	; 0x1ad8 <_proc_lres_inc+0x2a>
    1aca:	e9 81       	ldd	r30, Y+1	; 0x01
    1acc:	fa 81       	ldd	r31, Y+2	; 0x02
    1ace:	83 85       	ldd	r24, Z+11	; 0x0b
    1ad0:	84 60       	ori	r24, 0x04	; 4
    1ad2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ad4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ad6:	83 87       	std	Z+11, r24	; 0x0b
    pcounter_inc( &proc->lres, prio );
    1ad8:	89 81       	ldd	r24, Y+1	; 0x01
    1ada:	9a 81       	ldd	r25, Y+2	; 0x02
    1adc:	0d 96       	adiw	r24, 0x0d	; 13
    1ade:	6b 81       	ldd	r22, Y+3	; 0x03
    1ae0:	0e 94 16 0b 	call	0x162c	; 0x162c <pcounter_inc>
#else
    if( proc->lres == (count_t)0 )proc->flags |= PROC_FLG_HOLD;
    proc->lres++;
#endif
}
    1ae4:	0f 90       	pop	r0
    1ae6:	0f 90       	pop	r0
    1ae8:	0f 90       	pop	r0
    1aea:	cf 91       	pop	r28
    1aec:	df 91       	pop	r29
    1aee:	08 95       	ret

00001af0 <_proc_lres_dec>:
    proc_t * proc
#ifdef CONFIG_USE_HIGHEST_LOCKER
    ,prio_t prio
#endif
)
{
    1af0:	df 93       	push	r29
    1af2:	cf 93       	push	r28
    1af4:	00 d0       	rcall	.+0      	; 0x1af6 <_proc_lres_dec+0x6>
    1af6:	0f 92       	push	r0
    1af8:	cd b7       	in	r28, 0x3d	; 61
    1afa:	de b7       	in	r29, 0x3e	; 62
    1afc:	9a 83       	std	Y+2, r25	; 0x02
    1afe:	89 83       	std	Y+1, r24	; 0x01
    1b00:	6b 83       	std	Y+3, r22	; 0x03
#ifdef CONFIG_USE_HIGHEST_LOCKER
    pcounter_dec( &proc->lres, prio );
    1b02:	89 81       	ldd	r24, Y+1	; 0x01
    1b04:	9a 81       	ldd	r25, Y+2	; 0x02
    1b06:	0d 96       	adiw	r24, 0x0d	; 13
    1b08:	6b 81       	ldd	r22, Y+3	; 0x03
    1b0a:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <pcounter_dec>
    if( proc->lres.index == (index_t)0 )proc->flags &= ~PROC_FLG_HOLD;
    1b0e:	e9 81       	ldd	r30, Y+1	; 0x01
    1b10:	fa 81       	ldd	r31, Y+2	; 0x02
    1b12:	85 8d       	ldd	r24, Z+29	; 0x1d
    1b14:	88 23       	and	r24, r24
    1b16:	39 f4       	brne	.+14     	; 0x1b26 <_proc_lres_dec+0x36>
    1b18:	e9 81       	ldd	r30, Y+1	; 0x01
    1b1a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b1c:	83 85       	ldd	r24, Z+11	; 0x0b
    1b1e:	8b 7f       	andi	r24, 0xFB	; 251
    1b20:	e9 81       	ldd	r30, Y+1	; 0x01
    1b22:	fa 81       	ldd	r31, Y+2	; 0x02
    1b24:	83 87       	std	Z+11, r24	; 0x0b
#else
    if( proc->lres!= (count_t)0 )proc->lres--;
    if( proc->lres == (count_t)0 )proc->flags &= ~PROC_FLG_HOLD;
#endif
}
    1b26:	0f 90       	pop	r0
    1b28:	0f 90       	pop	r0
    1b2a:	0f 90       	pop	r0
    1b2c:	cf 91       	pop	r28
    1b2e:	df 91       	pop	r29
    1b30:	08 95       	ret

00001b32 <_proc_prio_control_stoped>:
#ifdef CONFIG_USE_HIGHEST_LOCKER
// Будет использоваться в mutex-ах и т.п., процесс должен сам вызывать эту функцию, при этом он должен быть вырезан из списка выполняющихся.
void _proc_prio_control_stoped( proc_t * proc )
{
    1b32:	df 93       	push	r29
    1b34:	cf 93       	push	r28
    1b36:	cd b7       	in	r28, 0x3d	; 61
    1b38:	de b7       	in	r29, 0x3e	; 62
    1b3a:	27 97       	sbiw	r28, 0x07	; 7
    1b3c:	0f b6       	in	r0, 0x3f	; 63
    1b3e:	f8 94       	cli
    1b40:	de bf       	out	0x3e, r29	; 62
    1b42:	0f be       	out	0x3f, r0	; 63
    1b44:	cd bf       	out	0x3d, r28	; 61
    1b46:	9b 83       	std	Y+3, r25	; 0x03
    1b48:	8a 83       	std	Y+2, r24	; 0x02
    if(proc->lres.index != (index_t)0)
    1b4a:	ea 81       	ldd	r30, Y+2	; 0x02
    1b4c:	fb 81       	ldd	r31, Y+3	; 0x03
    1b4e:	85 8d       	ldd	r24, Z+29	; 0x1d
    1b50:	88 23       	and	r24, r24
    1b52:	e9 f0       	breq	.+58     	; 0x1b8e <_proc_prio_control_stoped+0x5c>
    {
        prio_t locker_prio = index_search( proc->lres.index );
    1b54:	ea 81       	ldd	r30, Y+2	; 0x02
    1b56:	fb 81       	ldd	r31, Y+3	; 0x03
    1b58:	85 8d       	ldd	r24, Z+29	; 0x1d
    1b5a:	0e 94 0f 09 	call	0x121e	; 0x121e <index_search>
    1b5e:	89 83       	std	Y+1, r24	; 0x01
        ((gitem_t *)proc)->group->prio = ( locker_prio < proc->base_prio )?locker_prio:proc->base_prio;
    1b60:	ea 81       	ldd	r30, Y+2	; 0x02
    1b62:	fb 81       	ldd	r31, Y+3	; 0x03
    1b64:	84 81       	ldd	r24, Z+4	; 0x04
    1b66:	95 81       	ldd	r25, Z+5	; 0x05
    1b68:	9e 83       	std	Y+6, r25	; 0x06
    1b6a:	8d 83       	std	Y+5, r24	; 0x05
    1b6c:	ea 81       	ldd	r30, Y+2	; 0x02
    1b6e:	fb 81       	ldd	r31, Y+3	; 0x03
    1b70:	84 85       	ldd	r24, Z+12	; 0x0c
    1b72:	99 81       	ldd	r25, Y+1	; 0x01
    1b74:	9f 83       	std	Y+7, r25	; 0x07
    1b76:	8c 83       	std	Y+4, r24	; 0x04
    1b78:	ec 81       	ldd	r30, Y+4	; 0x04
    1b7a:	ff 81       	ldd	r31, Y+7	; 0x07
    1b7c:	fe 17       	cp	r31, r30
    1b7e:	10 f4       	brcc	.+4      	; 0x1b84 <_proc_prio_control_stoped+0x52>
    1b80:	8f 81       	ldd	r24, Y+7	; 0x07
    1b82:	8c 83       	std	Y+4, r24	; 0x04
    1b84:	8c 81       	ldd	r24, Y+4	; 0x04
    1b86:	ed 81       	ldd	r30, Y+5	; 0x05
    1b88:	fe 81       	ldd	r31, Y+6	; 0x06
    1b8a:	82 83       	std	Z+2, r24	; 0x02
    1b8c:	0a c0       	rjmp	.+20     	; 0x1ba2 <_proc_prio_control_stoped+0x70>
    }
    else
    {
        ((gitem_t *)proc)->group->prio = proc->base_prio;
    1b8e:	ea 81       	ldd	r30, Y+2	; 0x02
    1b90:	fb 81       	ldd	r31, Y+3	; 0x03
    1b92:	a4 81       	ldd	r26, Z+4	; 0x04
    1b94:	b5 81       	ldd	r27, Z+5	; 0x05
    1b96:	ea 81       	ldd	r30, Y+2	; 0x02
    1b98:	fb 81       	ldd	r31, Y+3	; 0x03
    1b9a:	84 85       	ldd	r24, Z+12	; 0x0c
    1b9c:	12 96       	adiw	r26, 0x02	; 2
    1b9e:	8c 93       	st	X, r24
    1ba0:	12 97       	sbiw	r26, 0x02	; 2
    }
}
    1ba2:	27 96       	adiw	r28, 0x07	; 7
    1ba4:	0f b6       	in	r0, 0x3f	; 63
    1ba6:	f8 94       	cli
    1ba8:	de bf       	out	0x3e, r29	; 62
    1baa:	0f be       	out	0x3f, r0	; 63
    1bac:	cd bf       	out	0x3d, r28	; 61
    1bae:	cf 91       	pop	r28
    1bb0:	df 91       	pop	r29
    1bb2:	08 95       	ret

00001bb4 <_proc_prio_control_running>:
void _proc_prio_control_running( proc_t * proc )
{
    1bb4:	df 93       	push	r29
    1bb6:	cf 93       	push	r28
    1bb8:	00 d0       	rcall	.+0      	; 0x1bba <_proc_prio_control_running+0x6>
    1bba:	00 d0       	rcall	.+0      	; 0x1bbc <_proc_prio_control_running+0x8>
    1bbc:	00 d0       	rcall	.+0      	; 0x1bbe <_proc_prio_control_running+0xa>
    1bbe:	cd b7       	in	r28, 0x3d	; 61
    1bc0:	de b7       	in	r29, 0x3e	; 62
    1bc2:	9c 83       	std	Y+4, r25	; 0x04
    1bc4:	8b 83       	std	Y+3, r24	; 0x03
    prio_t new_prio;
    if(proc->lres.index != (index_t)0)
    1bc6:	eb 81       	ldd	r30, Y+3	; 0x03
    1bc8:	fc 81       	ldd	r31, Y+4	; 0x04
    1bca:	85 8d       	ldd	r24, Z+29	; 0x1d
    1bcc:	88 23       	and	r24, r24
    1bce:	a9 f0       	breq	.+42     	; 0x1bfa <_proc_prio_control_running+0x46>
    {
        prio_t locker_prio = index_search( proc->lres.index );
    1bd0:	eb 81       	ldd	r30, Y+3	; 0x03
    1bd2:	fc 81       	ldd	r31, Y+4	; 0x04
    1bd4:	85 8d       	ldd	r24, Z+29	; 0x1d
    1bd6:	0e 94 0f 09 	call	0x121e	; 0x121e <index_search>
    1bda:	89 83       	std	Y+1, r24	; 0x01
        new_prio = ( locker_prio < proc->base_prio )?locker_prio:proc->base_prio;
    1bdc:	eb 81       	ldd	r30, Y+3	; 0x03
    1bde:	fc 81       	ldd	r31, Y+4	; 0x04
    1be0:	84 85       	ldd	r24, Z+12	; 0x0c
    1be2:	99 81       	ldd	r25, Y+1	; 0x01
    1be4:	9e 83       	std	Y+6, r25	; 0x06
    1be6:	8d 83       	std	Y+5, r24	; 0x05
    1be8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bea:	9e 81       	ldd	r25, Y+6	; 0x06
    1bec:	98 17       	cp	r25, r24
    1bee:	10 f4       	brcc	.+4      	; 0x1bf4 <_proc_prio_control_running+0x40>
    1bf0:	8e 81       	ldd	r24, Y+6	; 0x06
    1bf2:	8d 83       	std	Y+5, r24	; 0x05
    1bf4:	9d 81       	ldd	r25, Y+5	; 0x05
    1bf6:	9a 83       	std	Y+2, r25	; 0x02
    1bf8:	04 c0       	rjmp	.+8      	; 0x1c02 <_proc_prio_control_running+0x4e>
    }
    else
    {
        new_prio = proc->base_prio;
    1bfa:	eb 81       	ldd	r30, Y+3	; 0x03
    1bfc:	fc 81       	ldd	r31, Y+4	; 0x04
    1bfe:	84 85       	ldd	r24, Z+12	; 0x0c
    1c00:	8a 83       	std	Y+2, r24	; 0x02
    }
    if(((gitem_t *)proc)->group->prio != new_prio)
    1c02:	eb 81       	ldd	r30, Y+3	; 0x03
    1c04:	fc 81       	ldd	r31, Y+4	; 0x04
    1c06:	04 80       	ldd	r0, Z+4	; 0x04
    1c08:	f5 81       	ldd	r31, Z+5	; 0x05
    1c0a:	e0 2d       	mov	r30, r0
    1c0c:	92 81       	ldd	r25, Z+2	; 0x02
    1c0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c10:	98 17       	cp	r25, r24
    1c12:	b1 f0       	breq	.+44     	; 0x1c40 <_proc_prio_control_running+0x8c>
    {
        _proc_stop_( proc );
    1c14:	8b 81       	ldd	r24, Y+3	; 0x03
    1c16:	9c 81       	ldd	r25, Y+4	; 0x04
    1c18:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <gitem_cut>
        ((gitem_t *)proc)->group->prio = new_prio;
    1c1c:	eb 81       	ldd	r30, Y+3	; 0x03
    1c1e:	fc 81       	ldd	r31, Y+4	; 0x04
    1c20:	04 80       	ldd	r0, Z+4	; 0x04
    1c22:	f5 81       	ldd	r31, Z+5	; 0x05
    1c24:	e0 2d       	mov	r30, r0
    1c26:	8a 81       	ldd	r24, Y+2	; 0x02
    1c28:	82 83       	std	Z+2, r24	; 0x02
#ifdef CONFIG_MP
        spin_lock( &kernel.stat_lock );
        stat_inc( proc, (stat_t *)kernel.stat+proc->core_id );
        spin_unlock( &kernel.stat_lock );
#endif
        _proc_run_( proc );
    1c2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c2e:	20 91 a0 01 	lds	r18, 0x01A0
    1c32:	30 91 a1 01 	lds	r19, 0x01A1
    1c36:	b9 01       	movw	r22, r18
    1c38:	0e 94 8e 06 	call	0xd1c	; 0xd1c <gitem_insert>
#ifdef CONFIG_MP
        resched(proc->core_id);
#else
        resched();
    1c3c:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
#endif
    }
}
    1c40:	26 96       	adiw	r28, 0x06	; 6
    1c42:	0f b6       	in	r0, 0x3f	; 63
    1c44:	f8 94       	cli
    1c46:	de bf       	out	0x3e, r29	; 62
    1c48:	0f be       	out	0x3f, r0	; 63
    1c4a:	cd bf       	out	0x3d, r28	; 61
    1c4c:	cf 91       	pop	r28
    1c4e:	df 91       	pop	r29
    1c50:	08 95       	ret

00001c52 <sched_init>:
*****************************************************************************************/
#include "../include/bugurt.h"
///========================================================================================
// Инициация
void sched_init(sched_t * sched, proc_t * idle)
{
    1c52:	df 93       	push	r29
    1c54:	cf 93       	push	r28
    1c56:	00 d0       	rcall	.+0      	; 0x1c58 <sched_init+0x6>
    1c58:	00 d0       	rcall	.+0      	; 0x1c5a <sched_init+0x8>
    1c5a:	cd b7       	in	r28, 0x3d	; 61
    1c5c:	de b7       	in	r29, 0x3e	; 62
    1c5e:	9a 83       	std	Y+2, r25	; 0x02
    1c60:	89 83       	std	Y+1, r24	; 0x01
    1c62:	7c 83       	std	Y+4, r23	; 0x04
    1c64:	6b 83       	std	Y+3, r22	; 0x03
#ifdef CONFIG_MP
    lock_t * sched_lock = &sched->lock;
    spin_init( sched_lock );
    spin_lock( sched_lock );
#endif // CONFIG_MP
    sched->ready = (xlist_t *)sched->plst;
    1c66:	89 81       	ldd	r24, Y+1	; 0x01
    1c68:	9a 81       	ldd	r25, Y+2	; 0x02
    1c6a:	06 96       	adiw	r24, 0x06	; 6
    1c6c:	e9 81       	ldd	r30, Y+1	; 0x01
    1c6e:	fa 81       	ldd	r31, Y+2	; 0x02
    1c70:	93 83       	std	Z+3, r25	; 0x03
    1c72:	82 83       	std	Z+2, r24	; 0x02
    xlist_init( sched->ready );
    1c74:	e9 81       	ldd	r30, Y+1	; 0x01
    1c76:	fa 81       	ldd	r31, Y+2	; 0x02
    1c78:	82 81       	ldd	r24, Z+2	; 0x02
    1c7a:	93 81       	ldd	r25, Z+3	; 0x03
    1c7c:	0e 94 01 11 	call	0x2202	; 0x2202 <xlist_init>
    sched->expired = (xlist_t *)sched->plst + 1;
    1c80:	89 81       	ldd	r24, Y+1	; 0x01
    1c82:	9a 81       	ldd	r25, Y+2	; 0x02
    1c84:	47 96       	adiw	r24, 0x17	; 23
    1c86:	e9 81       	ldd	r30, Y+1	; 0x01
    1c88:	fa 81       	ldd	r31, Y+2	; 0x02
    1c8a:	95 83       	std	Z+5, r25	; 0x05
    1c8c:	84 83       	std	Z+4, r24	; 0x04
    xlist_init( sched->expired );
    1c8e:	e9 81       	ldd	r30, Y+1	; 0x01
    1c90:	fa 81       	ldd	r31, Y+2	; 0x02
    1c92:	84 81       	ldd	r24, Z+4	; 0x04
    1c94:	95 81       	ldd	r25, Z+5	; 0x05
    1c96:	0e 94 01 11 	call	0x2202	; 0x2202 <xlist_init>
    gitem_insert( (gitem_t *)idle, sched->ready );
    1c9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c9e:	e9 81       	ldd	r30, Y+1	; 0x01
    1ca0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ca2:	22 81       	ldd	r18, Z+2	; 0x02
    1ca4:	33 81       	ldd	r19, Z+3	; 0x03
    1ca6:	b9 01       	movw	r22, r18
    1ca8:	0e 94 8e 06 	call	0xd1c	; 0xd1c <gitem_insert>
    sched->current_proc = idle;
    1cac:	e9 81       	ldd	r30, Y+1	; 0x01
    1cae:	fa 81       	ldd	r31, Y+2	; 0x02
    1cb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb2:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb4:	91 83       	std	Z+1, r25	; 0x01
    1cb6:	80 83       	st	Z, r24
    sched->nested_crit_sec = (count_t)0;//вообще это выполняется при запрещенных прерываниях, но не известно, на этом ли процессоре
    1cb8:	e9 81       	ldd	r30, Y+1	; 0x01
    1cba:	fa 81       	ldd	r31, Y+2	; 0x02
    1cbc:	11 a6       	std	Z+41, r1	; 0x29
    1cbe:	10 a6       	std	Z+40, r1	; 0x28
#ifdef CONFIG_MP
    spin_unlock( sched_lock );
    stat_inc( idle, (stat_t *)kernel.stat + idle->core_id );
#endif // CONFIG_MP
}
    1cc0:	0f 90       	pop	r0
    1cc2:	0f 90       	pop	r0
    1cc4:	0f 90       	pop	r0
    1cc6:	0f 90       	pop	r0
    1cc8:	cf 91       	pop	r28
    1cca:	df 91       	pop	r29
    1ccc:	08 95       	ret

00001cce <_sched_list_switch>:
static void _sched_list_switch( sched_t * sched )
{
    1cce:	df 93       	push	r29
    1cd0:	cf 93       	push	r28
    1cd2:	00 d0       	rcall	.+0      	; 0x1cd4 <_sched_list_switch+0x6>
    1cd4:	00 d0       	rcall	.+0      	; 0x1cd6 <_sched_list_switch+0x8>
    1cd6:	cd b7       	in	r28, 0x3d	; 61
    1cd8:	de b7       	in	r29, 0x3e	; 62
    1cda:	9c 83       	std	Y+4, r25	; 0x04
    1cdc:	8b 83       	std	Y+3, r24	; 0x03
    // Список ready опустел, переключаем списки
    if( sched->ready->index == (index_t)0 )
    1cde:	eb 81       	ldd	r30, Y+3	; 0x03
    1ce0:	fc 81       	ldd	r31, Y+4	; 0x04
    1ce2:	02 80       	ldd	r0, Z+2	; 0x02
    1ce4:	f3 81       	ldd	r31, Z+3	; 0x03
    1ce6:	e0 2d       	mov	r30, r0
    1ce8:	80 89       	ldd	r24, Z+16	; 0x10
    1cea:	88 23       	and	r24, r24
    1cec:	a1 f4       	brne	.+40     	; 0x1d16 <_sched_list_switch+0x48>
    {
        xlist_t * buf = sched->ready;
    1cee:	eb 81       	ldd	r30, Y+3	; 0x03
    1cf0:	fc 81       	ldd	r31, Y+4	; 0x04
    1cf2:	82 81       	ldd	r24, Z+2	; 0x02
    1cf4:	93 81       	ldd	r25, Z+3	; 0x03
    1cf6:	9a 83       	std	Y+2, r25	; 0x02
    1cf8:	89 83       	std	Y+1, r24	; 0x01
        sched->ready = sched->expired;
    1cfa:	eb 81       	ldd	r30, Y+3	; 0x03
    1cfc:	fc 81       	ldd	r31, Y+4	; 0x04
    1cfe:	84 81       	ldd	r24, Z+4	; 0x04
    1d00:	95 81       	ldd	r25, Z+5	; 0x05
    1d02:	eb 81       	ldd	r30, Y+3	; 0x03
    1d04:	fc 81       	ldd	r31, Y+4	; 0x04
    1d06:	93 83       	std	Z+3, r25	; 0x03
    1d08:	82 83       	std	Z+2, r24	; 0x02
        sched->expired = buf;
    1d0a:	eb 81       	ldd	r30, Y+3	; 0x03
    1d0c:	fc 81       	ldd	r31, Y+4	; 0x04
    1d0e:	89 81       	ldd	r24, Y+1	; 0x01
    1d10:	9a 81       	ldd	r25, Y+2	; 0x02
    1d12:	95 83       	std	Z+5, r25	; 0x05
    1d14:	84 83       	std	Z+4, r24	; 0x04
    }
}
    1d16:	0f 90       	pop	r0
    1d18:	0f 90       	pop	r0
    1d1a:	0f 90       	pop	r0
    1d1c:	0f 90       	pop	r0
    1d1e:	cf 91       	pop	r28
    1d20:	df 91       	pop	r29
    1d22:	08 95       	ret

00001d24 <sched_schedule>:
2) В качестве аргумента передаем только тот объект, который управляет процессами
на исполняющем функции процессоре.
******************************************************************************************/
// Функция планирования, переключает процессы в обработчике системмного таймера
stack_t * sched_schedule( stack_t * current_sp )
{
    1d24:	df 93       	push	r29
    1d26:	cf 93       	push	r28
    1d28:	cd b7       	in	r28, 0x3d	; 61
    1d2a:	de b7       	in	r29, 0x3e	; 62
    1d2c:	27 97       	sbiw	r28, 0x07	; 7
    1d2e:	0f b6       	in	r0, 0x3f	; 63
    1d30:	f8 94       	cli
    1d32:	de bf       	out	0x3e, r29	; 62
    1d34:	0f be       	out	0x3f, r0	; 63
    1d36:	cd bf       	out	0x3d, r28	; 61
    1d38:	9f 83       	std	Y+7, r25	; 0x07
    1d3a:	8e 83       	std	Y+6, r24	; 0x06
#ifdef CONFIG_MP
    sched_t * sched = (sched_t *)kernel.sched + current_core();
#else
    sched_t * sched = (sched_t *)&kernel.sched;
    1d3c:	8e e9       	ldi	r24, 0x9E	; 158
    1d3e:	91 e0       	ldi	r25, 0x01	; 1
    1d40:	9d 83       	std	Y+5, r25	; 0x05
    1d42:	8c 83       	std	Y+4, r24	; 0x04
#endif // CONFIG_MP
    // Меняем только с локального процессора, блокировку sched->lock можно не захватывать!
    proc_t * current_proc = sched->current_proc;
    1d44:	ec 81       	ldd	r30, Y+4	; 0x04
    1d46:	fd 81       	ldd	r31, Y+5	; 0x05
    1d48:	80 81       	ld	r24, Z
    1d4a:	91 81       	ldd	r25, Z+1	; 0x01
    1d4c:	9b 83       	std	Y+3, r25	; 0x03
    1d4e:	8a 83       	std	Y+2, r24	; 0x02
#ifdef CONFIG_MP
    // А вот эту блокировку обязательно надо захватить!
    spin_lock( &current_proc->lock );
#endif // CONFIG_MP
    // Сохранение указателя стека
    current_proc->spointer = current_sp;
    1d50:	ea 81       	ldd	r30, Y+2	; 0x02
    1d52:	fb 81       	ldd	r31, Y+3	; 0x03
    1d54:	8e 81       	ldd	r24, Y+6	; 0x06
    1d56:	9f 81       	ldd	r25, Y+7	; 0x07
    1d58:	95 a7       	std	Z+45, r25	; 0x2d
    1d5a:	84 a7       	std	Z+44, r24	; 0x2c
    // Хук "сохранение контекста"
    if( current_proc->sv_hook )current_proc->sv_hook( current_proc->arg );
    1d5c:	ea 81       	ldd	r30, Y+2	; 0x02
    1d5e:	fb 81       	ldd	r31, Y+3	; 0x03
    1d60:	84 a1       	ldd	r24, Z+36	; 0x24
    1d62:	95 a1       	ldd	r25, Z+37	; 0x25
    1d64:	00 97       	sbiw	r24, 0x00	; 0
    1d66:	51 f0       	breq	.+20     	; 0x1d7c <sched_schedule+0x58>
    1d68:	ea 81       	ldd	r30, Y+2	; 0x02
    1d6a:	fb 81       	ldd	r31, Y+3	; 0x03
    1d6c:	24 a1       	ldd	r18, Z+36	; 0x24
    1d6e:	35 a1       	ldd	r19, Z+37	; 0x25
    1d70:	ea 81       	ldd	r30, Y+2	; 0x02
    1d72:	fb 81       	ldd	r31, Y+3	; 0x03
    1d74:	80 a5       	ldd	r24, Z+40	; 0x28
    1d76:	91 a5       	ldd	r25, Z+41	; 0x29
    1d78:	f9 01       	movw	r30, r18
    1d7a:	09 95       	icall
    // Проверяем, что процесс находится в списке ready
    if( (xlist_t *)((gitem_t *)current_proc)->group->link == sched->ready )
    1d7c:	ea 81       	ldd	r30, Y+2	; 0x02
    1d7e:	fb 81       	ldd	r31, Y+3	; 0x03
    1d80:	04 80       	ldd	r0, Z+4	; 0x04
    1d82:	f5 81       	ldd	r31, Z+5	; 0x05
    1d84:	e0 2d       	mov	r30, r0
    1d86:	80 81       	ld	r24, Z
    1d88:	91 81       	ldd	r25, Z+1	; 0x01
    1d8a:	9c 01       	movw	r18, r24
    1d8c:	ec 81       	ldd	r30, Y+4	; 0x04
    1d8e:	fd 81       	ldd	r31, Y+5	; 0x05
    1d90:	82 81       	ldd	r24, Z+2	; 0x02
    1d92:	93 81       	ldd	r25, Z+3	; 0x03
    1d94:	28 17       	cp	r18, r24
    1d96:	39 07       	cpc	r19, r25
    1d98:	09 f0       	breq	.+2      	; 0x1d9c <sched_schedule+0x78>
    1d9a:	4d c0       	rjmp	.+154    	; 0x1e36 <sched_schedule+0x112>
    {
        // Переключаем cписок на следующий за текущим процесс
#ifdef CONFIG_MP
        spin_lock( &sched->lock );
#endif // CONFIG_MP
        xlist_switch( sched->ready, ((gitem_t *)current_proc)->group->prio );
    1d9c:	ec 81       	ldd	r30, Y+4	; 0x04
    1d9e:	fd 81       	ldd	r31, Y+5	; 0x05
    1da0:	82 81       	ldd	r24, Z+2	; 0x02
    1da2:	93 81       	ldd	r25, Z+3	; 0x03
    1da4:	ea 81       	ldd	r30, Y+2	; 0x02
    1da6:	fb 81       	ldd	r31, Y+3	; 0x03
    1da8:	04 80       	ldd	r0, Z+4	; 0x04
    1daa:	f5 81       	ldd	r31, Z+5	; 0x05
    1dac:	e0 2d       	mov	r30, r0
    1dae:	22 81       	ldd	r18, Z+2	; 0x02
    1db0:	62 2f       	mov	r22, r18
    1db2:	0e 94 57 11 	call	0x22ae	; 0x22ae <xlist_switch>
#ifdef CONFIG_MP
        spin_unlock( &sched->lock );
#endif // CONFIG_MP
        //Проверяем, не истек ли квант времени процесса
        if( current_proc->timer > (timer_t)1 )current_proc->timer--;// Не истек, уменьшаем таймер
    1db6:	ea 81       	ldd	r30, Y+2	; 0x02
    1db8:	fb 81       	ldd	r31, Y+3	; 0x03
    1dba:	80 a1       	ldd	r24, Z+32	; 0x20
    1dbc:	91 a1       	ldd	r25, Z+33	; 0x21
    1dbe:	82 30       	cpi	r24, 0x02	; 2
    1dc0:	91 05       	cpc	r25, r1
    1dc2:	50 f0       	brcs	.+20     	; 0x1dd8 <sched_schedule+0xb4>
    1dc4:	ea 81       	ldd	r30, Y+2	; 0x02
    1dc6:	fb 81       	ldd	r31, Y+3	; 0x03
    1dc8:	80 a1       	ldd	r24, Z+32	; 0x20
    1dca:	91 a1       	ldd	r25, Z+33	; 0x21
    1dcc:	01 97       	sbiw	r24, 0x01	; 1
    1dce:	ea 81       	ldd	r30, Y+2	; 0x02
    1dd0:	fb 81       	ldd	r31, Y+3	; 0x03
    1dd2:	91 a3       	std	Z+33, r25	; 0x21
    1dd4:	80 a3       	std	Z+32, r24	; 0x20
    1dd6:	2f c0       	rjmp	.+94     	; 0x1e36 <sched_schedule+0x112>
        {
            // Истек, вырезаем процесс из списка
#ifdef CONFIG_MP
            spin_lock( &sched->lock );
#endif // CONFIG_MP
            gitem_fast_cut( (gitem_t *)current_proc );
    1dd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dda:	9b 81       	ldd	r25, Y+3	; 0x03
    1ddc:	0e 94 65 07 	call	0xeca	; 0xeca <gitem_fast_cut>
            // Обновили статистику после удаления процесса из списка ready
            stat_dec( current_proc, (stat_t *)kernel.stat + current_proc->core_id );
#endif // CONFIG_USE_ALB
#endif // CONFIG_MP
            // А что за процесс собственно?
            flag_t flags = current_proc->flags;
    1de0:	ea 81       	ldd	r30, Y+2	; 0x02
    1de2:	fb 81       	ldd	r31, Y+3	; 0x03
    1de4:	83 85       	ldd	r24, Z+11	; 0x0b
    1de6:	89 83       	std	Y+1, r24	; 0x01
            if(
                (!(flags & PROC_FLG_RT))
    1de8:	89 81       	ldd	r24, Y+1	; 0x01
    1dea:	88 2f       	mov	r24, r24
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	81 70       	andi	r24, 0x01	; 1
    1df0:	90 70       	andi	r25, 0x00	; 0
            stat_dec( current_proc, (stat_t *)kernel.stat + current_proc->core_id );
#endif // CONFIG_USE_ALB
#endif // CONFIG_MP
            // А что за процесс собственно?
            flag_t flags = current_proc->flags;
            if(
    1df2:	00 97       	sbiw	r24, 0x00	; 0
    1df4:	91 f4       	brne	.+36     	; 0x1e1a <sched_schedule+0xf6>
                ||(flags & PROC_FLG_HOLD)
#endif // CONFIG_HARD_RT
            )
            {
                //Процесс общего назначения, либо он удерживает общий ресурс, сбрасываем таймер и переносим в очередь expired
                current_proc->timer = current_proc->time_quant;
    1df6:	ea 81       	ldd	r30, Y+2	; 0x02
    1df8:	fb 81       	ldd	r31, Y+3	; 0x03
    1dfa:	86 8d       	ldd	r24, Z+30	; 0x1e
    1dfc:	97 8d       	ldd	r25, Z+31	; 0x1f
    1dfe:	ea 81       	ldd	r30, Y+2	; 0x02
    1e00:	fb 81       	ldd	r31, Y+3	; 0x03
    1e02:	91 a3       	std	Z+33, r25	; 0x21
    1e04:	80 a3       	std	Z+32, r24	; 0x20
#else // CONFIG_MP CONFIG_USE_ALB
                // Тупо переносим процесс в список expired
#ifdef CONFIG_MP
                spin_lock( &sched->lock );
#endif // CONFIG_MP
                gitem_insert( (gitem_t *)current_proc, sched->expired );
    1e06:	8a 81       	ldd	r24, Y+2	; 0x02
    1e08:	9b 81       	ldd	r25, Y+3	; 0x03
    1e0a:	ec 81       	ldd	r30, Y+4	; 0x04
    1e0c:	fd 81       	ldd	r31, Y+5	; 0x05
    1e0e:	24 81       	ldd	r18, Z+4	; 0x04
    1e10:	35 81       	ldd	r19, Z+5	; 0x05
    1e12:	b9 01       	movw	r22, r18
    1e14:	0e 94 8e 06 	call	0xd1c	; 0xd1c <gitem_insert>
    1e18:	0e c0       	rjmp	.+28     	; 0x1e36 <sched_schedule+0x112>
                spin_lock( &kernel.stat_lock );
                stat_dec( current_proc, (stat_t *)kernel.stat + current_proc->core_id );
#endif // nCONFIG_USE_ALB
                spin_unlock( &kernel.stat_lock );
#endif // CONFIG_MP
                ((gitem_t *)current_proc)->group->link = (void *)0;// Просто вырезали из списка, как в gitem_cut
    1e1a:	ea 81       	ldd	r30, Y+2	; 0x02
    1e1c:	fb 81       	ldd	r31, Y+3	; 0x03
    1e1e:	04 80       	ldd	r0, Z+4	; 0x04
    1e20:	f5 81       	ldd	r31, Z+5	; 0x05
    1e22:	e0 2d       	mov	r30, r0
    1e24:	11 82       	std	Z+1, r1	; 0x01
    1e26:	10 82       	st	Z, r1
                current_proc->flags &= ~PROC_FLG_RUN;
    1e28:	ea 81       	ldd	r30, Y+2	; 0x02
    1e2a:	fb 81       	ldd	r31, Y+3	; 0x03
    1e2c:	83 85       	ldd	r24, Z+11	; 0x0b
    1e2e:	8d 7f       	andi	r24, 0xFD	; 253
    1e30:	ea 81       	ldd	r30, Y+2	; 0x02
    1e32:	fb 81       	ldd	r31, Y+3	; 0x03
    1e34:	83 87       	std	Z+11, r24	; 0x0b
#ifdef CONFIG_MP
    //Текущий процесс более не нужен, освобождаем его блокировку
    spin_unlock( &current_proc->lock );
    spin_lock( &sched->lock );
#endif // CONFIG_MP
    _sched_list_switch( sched );
    1e36:	8c 81       	ldd	r24, Y+4	; 0x04
    1e38:	9d 81       	ldd	r25, Y+5	; 0x05
    1e3a:	0e 94 67 0e 	call	0x1cce	; 0x1cce <_sched_list_switch>
    // Изменять указатель будем при захваченной блокировке,
    // чтобы процессы на других процессорах не прочитали неизвестно что.
    current_proc = (proc_t *)xlist_head( sched->ready ); // Вытесняющая многозадачность же!
    1e3e:	ec 81       	ldd	r30, Y+4	; 0x04
    1e40:	fd 81       	ldd	r31, Y+5	; 0x05
    1e42:	82 81       	ldd	r24, Z+2	; 0x02
    1e44:	93 81       	ldd	r25, Z+3	; 0x03
    1e46:	0e 94 2b 11 	call	0x2256	; 0x2256 <xlist_head>
    1e4a:	9b 83       	std	Y+3, r25	; 0x03
    1e4c:	8a 83       	std	Y+2, r24	; 0x02
    sched->current_proc = current_proc;
    1e4e:	ec 81       	ldd	r30, Y+4	; 0x04
    1e50:	fd 81       	ldd	r31, Y+5	; 0x05
    1e52:	8a 81       	ldd	r24, Y+2	; 0x02
    1e54:	9b 81       	ldd	r25, Y+3	; 0x03
    1e56:	91 83       	std	Z+1, r25	; 0x01
    1e58:	80 83       	st	Z, r24
#ifdef CONFIG_MP
    spin_unlock( &sched->lock );
    spin_lock( &current_proc->lock );
#endif // CONFIG_MP
    //Хук "восстановление контекста"
    if( current_proc->rs_hook )current_proc->rs_hook( current_proc->arg );
    1e5a:	ea 81       	ldd	r30, Y+2	; 0x02
    1e5c:	fb 81       	ldd	r31, Y+3	; 0x03
    1e5e:	86 a1       	ldd	r24, Z+38	; 0x26
    1e60:	97 a1       	ldd	r25, Z+39	; 0x27
    1e62:	00 97       	sbiw	r24, 0x00	; 0
    1e64:	51 f0       	breq	.+20     	; 0x1e7a <sched_schedule+0x156>
    1e66:	ea 81       	ldd	r30, Y+2	; 0x02
    1e68:	fb 81       	ldd	r31, Y+3	; 0x03
    1e6a:	26 a1       	ldd	r18, Z+38	; 0x26
    1e6c:	37 a1       	ldd	r19, Z+39	; 0x27
    1e6e:	ea 81       	ldd	r30, Y+2	; 0x02
    1e70:	fb 81       	ldd	r31, Y+3	; 0x03
    1e72:	80 a5       	ldd	r24, Z+40	; 0x28
    1e74:	91 a5       	ldd	r25, Z+41	; 0x29
    1e76:	f9 01       	movw	r30, r18
    1e78:	09 95       	icall
#ifdef CONFIG_MP
    stack_t * ret_sp = current_proc->spointer;
    spin_unlock( &current_proc->lock );
    return ret_sp;
#else
    return current_proc->spointer;
    1e7a:	ea 81       	ldd	r30, Y+2	; 0x02
    1e7c:	fb 81       	ldd	r31, Y+3	; 0x03
    1e7e:	84 a5       	ldd	r24, Z+44	; 0x2c
    1e80:	95 a5       	ldd	r25, Z+45	; 0x2d
#endif // CONFIG_MP
}
    1e82:	27 96       	adiw	r28, 0x07	; 7
    1e84:	0f b6       	in	r0, 0x3f	; 63
    1e86:	f8 94       	cli
    1e88:	de bf       	out	0x3e, r29	; 62
    1e8a:	0f be       	out	0x3f, r0	; 63
    1e8c:	cd bf       	out	0x3d, r28	; 61
    1e8e:	cf 91       	pop	r28
    1e90:	df 91       	pop	r29
    1e92:	08 95       	ret

00001e94 <sched_reschedule>:
//----------------------------------------------------------------------------------------
// Функция перепланирования, переключает процессы в обработчике прерывания resched
stack_t * sched_reschedule( stack_t * current_sp )
{
    1e94:	df 93       	push	r29
    1e96:	cf 93       	push	r28
    1e98:	00 d0       	rcall	.+0      	; 0x1e9a <sched_reschedule+0x6>
    1e9a:	00 d0       	rcall	.+0      	; 0x1e9c <sched_reschedule+0x8>
    1e9c:	00 d0       	rcall	.+0      	; 0x1e9e <sched_reschedule+0xa>
    1e9e:	cd b7       	in	r28, 0x3d	; 61
    1ea0:	de b7       	in	r29, 0x3e	; 62
    1ea2:	9e 83       	std	Y+6, r25	; 0x06
    1ea4:	8d 83       	std	Y+5, r24	; 0x05
#ifdef CONFIG_MP
    sched_t * sched = (sched_t *)kernel.sched + current_core();
#else
    sched_t * sched = (sched_t *)&kernel.sched;
    1ea6:	8e e9       	ldi	r24, 0x9E	; 158
    1ea8:	91 e0       	ldi	r25, 0x01	; 1
    1eaa:	9c 83       	std	Y+4, r25	; 0x04
    1eac:	8b 83       	std	Y+3, r24	; 0x03
#endif // CONFIG_MP
    // Меняем только с локального процессора, блокировку sched->lock можно не захватывать!
    proc_t * current_proc = sched->current_proc;
    1eae:	eb 81       	ldd	r30, Y+3	; 0x03
    1eb0:	fc 81       	ldd	r31, Y+4	; 0x04
    1eb2:	80 81       	ld	r24, Z
    1eb4:	91 81       	ldd	r25, Z+1	; 0x01
    1eb6:	9a 83       	std	Y+2, r25	; 0x02
    1eb8:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    // А вот эту блокировку обязательно надо захватить!
    spin_lock( &current_proc->lock );
#endif // CONFIG_MP
    // Сохранение указателя стека
    current_proc->spointer = current_sp;
    1eba:	e9 81       	ldd	r30, Y+1	; 0x01
    1ebc:	fa 81       	ldd	r31, Y+2	; 0x02
    1ebe:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec2:	95 a7       	std	Z+45, r25	; 0x2d
    1ec4:	84 a7       	std	Z+44, r24	; 0x2c
    // Хук "сохранение контекста"
    if( current_proc->sv_hook )current_proc->sv_hook( current_proc->arg );
    1ec6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ec8:	fa 81       	ldd	r31, Y+2	; 0x02
    1eca:	84 a1       	ldd	r24, Z+36	; 0x24
    1ecc:	95 a1       	ldd	r25, Z+37	; 0x25
    1ece:	00 97       	sbiw	r24, 0x00	; 0
    1ed0:	51 f0       	breq	.+20     	; 0x1ee6 <sched_reschedule+0x52>
    1ed2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ed4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ed6:	24 a1       	ldd	r18, Z+36	; 0x24
    1ed8:	35 a1       	ldd	r19, Z+37	; 0x25
    1eda:	e9 81       	ldd	r30, Y+1	; 0x01
    1edc:	fa 81       	ldd	r31, Y+2	; 0x02
    1ede:	80 a5       	ldd	r24, Z+40	; 0x28
    1ee0:	91 a5       	ldd	r25, Z+41	; 0x29
    1ee2:	f9 01       	movw	r30, r18
    1ee4:	09 95       	icall
#ifdef CONFIG_MP
    spin_unlock( &current_proc->lock );
    spin_lock( &sched->lock );
#endif // CONFIG_MP
    _sched_list_switch( sched );
    1ee6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eea:	0e 94 67 0e 	call	0x1cce	; 0x1cce <_sched_list_switch>
    current_proc = (proc_t *)xlist_head( sched->ready ); // Вытесняющая многозадачность же!
    1eee:	eb 81       	ldd	r30, Y+3	; 0x03
    1ef0:	fc 81       	ldd	r31, Y+4	; 0x04
    1ef2:	82 81       	ldd	r24, Z+2	; 0x02
    1ef4:	93 81       	ldd	r25, Z+3	; 0x03
    1ef6:	0e 94 2b 11 	call	0x2256	; 0x2256 <xlist_head>
    1efa:	9a 83       	std	Y+2, r25	; 0x02
    1efc:	89 83       	std	Y+1, r24	; 0x01
    sched->current_proc = current_proc;
    1efe:	eb 81       	ldd	r30, Y+3	; 0x03
    1f00:	fc 81       	ldd	r31, Y+4	; 0x04
    1f02:	89 81       	ldd	r24, Y+1	; 0x01
    1f04:	9a 81       	ldd	r25, Y+2	; 0x02
    1f06:	91 83       	std	Z+1, r25	; 0x01
    1f08:	80 83       	st	Z, r24

#ifdef CONFIG_MP
    spin_lock(&current_proc->lock);
#endif // CONFIG_MP
    //Хук "восстановление контекста"
    if( current_proc->rs_hook )current_proc->rs_hook( current_proc->arg );
    1f0a:	e9 81       	ldd	r30, Y+1	; 0x01
    1f0c:	fa 81       	ldd	r31, Y+2	; 0x02
    1f0e:	86 a1       	ldd	r24, Z+38	; 0x26
    1f10:	97 a1       	ldd	r25, Z+39	; 0x27
    1f12:	00 97       	sbiw	r24, 0x00	; 0
    1f14:	51 f0       	breq	.+20     	; 0x1f2a <sched_reschedule+0x96>
    1f16:	e9 81       	ldd	r30, Y+1	; 0x01
    1f18:	fa 81       	ldd	r31, Y+2	; 0x02
    1f1a:	26 a1       	ldd	r18, Z+38	; 0x26
    1f1c:	37 a1       	ldd	r19, Z+39	; 0x27
    1f1e:	e9 81       	ldd	r30, Y+1	; 0x01
    1f20:	fa 81       	ldd	r31, Y+2	; 0x02
    1f22:	80 a5       	ldd	r24, Z+40	; 0x28
    1f24:	91 a5       	ldd	r25, Z+41	; 0x29
    1f26:	f9 01       	movw	r30, r18
    1f28:	09 95       	icall
#ifdef CONFIG_MP
    stack_t * ret_sp = current_proc->spointer;
    spin_unlock( &current_proc->lock );
    return ret_sp;
#else
    return current_proc->spointer;
    1f2a:	e9 81       	ldd	r30, Y+1	; 0x01
    1f2c:	fa 81       	ldd	r31, Y+2	; 0x02
    1f2e:	84 a5       	ldd	r24, Z+44	; 0x2c
    1f30:	95 a5       	ldd	r25, Z+45	; 0x2d
#endif // CONFIG_MP
}
    1f32:	26 96       	adiw	r28, 0x06	; 6
    1f34:	0f b6       	in	r0, 0x3f	; 63
    1f36:	f8 94       	cli
    1f38:	de bf       	out	0x3e, r29	; 62
    1f3a:	0f be       	out	0x3f, r0	; 63
    1f3c:	cd bf       	out	0x3d, r28	; 61
    1f3e:	cf 91       	pop	r28
    1f40:	df 91       	pop	r29
    1f42:	08 95       	ret

00001f44 <sem_init_isr>:
*****************************************************************************************/
#include "../include/bugurt.h"

// Инициализация
void sem_init_isr( sem_t * sem, count_t count )
{
    1f44:	df 93       	push	r29
    1f46:	cf 93       	push	r28
    1f48:	00 d0       	rcall	.+0      	; 0x1f4a <sem_init_isr+0x6>
    1f4a:	00 d0       	rcall	.+0      	; 0x1f4c <sem_init_isr+0x8>
    1f4c:	cd b7       	in	r28, 0x3d	; 61
    1f4e:	de b7       	in	r29, 0x3e	; 62
    1f50:	9a 83       	std	Y+2, r25	; 0x02
    1f52:	89 83       	std	Y+1, r24	; 0x01
    1f54:	7c 83       	std	Y+4, r23	; 0x04
    1f56:	6b 83       	std	Y+3, r22	; 0x03
    xlist_init( (xlist_t *)sem );
    1f58:	89 81       	ldd	r24, Y+1	; 0x01
    1f5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f5c:	0e 94 01 11 	call	0x2202	; 0x2202 <xlist_init>
    sem->counter = count;
    1f60:	e9 81       	ldd	r30, Y+1	; 0x01
    1f62:	fa 81       	ldd	r31, Y+2	; 0x02
    1f64:	8b 81       	ldd	r24, Y+3	; 0x03
    1f66:	9c 81       	ldd	r25, Y+4	; 0x04
    1f68:	92 8b       	std	Z+18, r25	; 0x12
    1f6a:	81 8b       	std	Z+17, r24	; 0x11
}
    1f6c:	0f 90       	pop	r0
    1f6e:	0f 90       	pop	r0
    1f70:	0f 90       	pop	r0
    1f72:	0f 90       	pop	r0
    1f74:	cf 91       	pop	r28
    1f76:	df 91       	pop	r29
    1f78:	08 95       	ret

00001f7a <_sem_lock>:

// То же, для внутреннего использования
bool_t _sem_lock( sem_t * sem )
{
    1f7a:	df 93       	push	r29
    1f7c:	cf 93       	push	r28
    1f7e:	00 d0       	rcall	.+0      	; 0x1f80 <_sem_lock+0x6>
    1f80:	00 d0       	rcall	.+0      	; 0x1f82 <_sem_lock+0x8>
    1f82:	0f 92       	push	r0
    1f84:	cd b7       	in	r28, 0x3d	; 61
    1f86:	de b7       	in	r29, 0x3e	; 62
    1f88:	9d 83       	std	Y+5, r25	; 0x05
    1f8a:	8c 83       	std	Y+4, r24	; 0x04

    bool_t ret = 0;
    1f8c:	1b 82       	std	Y+3, r1	; 0x03
    if( sem->counter != 0 )
    1f8e:	ec 81       	ldd	r30, Y+4	; 0x04
    1f90:	fd 81       	ldd	r31, Y+5	; 0x05
    1f92:	81 89       	ldd	r24, Z+17	; 0x11
    1f94:	92 89       	ldd	r25, Z+18	; 0x12
    1f96:	00 97       	sbiw	r24, 0x00	; 0
    1f98:	61 f0       	breq	.+24     	; 0x1fb2 <_sem_lock+0x38>
    {
        sem->counter--;
    1f9a:	ec 81       	ldd	r30, Y+4	; 0x04
    1f9c:	fd 81       	ldd	r31, Y+5	; 0x05
    1f9e:	81 89       	ldd	r24, Z+17	; 0x11
    1fa0:	92 89       	ldd	r25, Z+18	; 0x12
    1fa2:	01 97       	sbiw	r24, 0x01	; 1
    1fa4:	ec 81       	ldd	r30, Y+4	; 0x04
    1fa6:	fd 81       	ldd	r31, Y+5	; 0x05
    1fa8:	92 8b       	std	Z+18, r25	; 0x12
    1faa:	81 8b       	std	Z+17, r24	; 0x11
#ifdef CONFIG_MP
        spin_unlock( &sem->lock );// Освобождение блокировки семафора
#endif //CONFIG_MP
        ret = (bool_t)1;
    1fac:	81 e0       	ldi	r24, 0x01	; 1
    1fae:	8b 83       	std	Y+3, r24	; 0x03
    1fb0:	16 c0       	rjmp	.+44     	; 0x1fde <_sem_lock+0x64>
    }
    else
    {
        proc_t * proc = current_proc();
    1fb2:	0e 94 cc 00 	call	0x198	; 0x198 <current_proc>
    1fb6:	9a 83       	std	Y+2, r25	; 0x02
    1fb8:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
        spin_lock( &proc->lock );// Захват блокировки процесса
#endif //CONFIG_MP
        proc->flags |= PROC_FLG_QUEUE;
    1fba:	e9 81       	ldd	r30, Y+1	; 0x01
    1fbc:	fa 81       	ldd	r31, Y+2	; 0x02
    1fbe:	83 85       	ldd	r24, Z+11	; 0x0b
    1fc0:	88 60       	ori	r24, 0x08	; 8
    1fc2:	e9 81       	ldd	r30, Y+1	; 0x01
    1fc4:	fa 81       	ldd	r31, Y+2	; 0x02
    1fc6:	83 87       	std	Z+11, r24	; 0x0b
        _proc_stop( proc );
    1fc8:	89 81       	ldd	r24, Y+1	; 0x01
    1fca:	9a 81       	ldd	r25, Y+2	; 0x02
    1fcc:	0e 94 b3 0c 	call	0x1966	; 0x1966 <_proc_stop>
        gitem_insert( (gitem_t *)proc, (xlist_t *)sem );
    1fd0:	89 81       	ldd	r24, Y+1	; 0x01
    1fd2:	9a 81       	ldd	r25, Y+2	; 0x02
    1fd4:	2c 81       	ldd	r18, Y+4	; 0x04
    1fd6:	3d 81       	ldd	r19, Y+5	; 0x05
    1fd8:	b9 01       	movw	r22, r18
    1fda:	0e 94 8e 06 	call	0xd1c	; 0xd1c <gitem_insert>
#ifdef CONFIG_MP
        spin_unlock( &proc->lock );// Освобождение блокировки процесса
#endif //CONFIG_MP
    }
    return ret;
    1fde:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1fe0:	0f 90       	pop	r0
    1fe2:	0f 90       	pop	r0
    1fe4:	0f 90       	pop	r0
    1fe6:	0f 90       	pop	r0
    1fe8:	0f 90       	pop	r0
    1fea:	cf 91       	pop	r28
    1fec:	df 91       	pop	r29
    1fee:	08 95       	ret

00001ff0 <_sem_unlock>:

void _sem_unlock( sem_t * sem )
{
    1ff0:	df 93       	push	r29
    1ff2:	cf 93       	push	r28
    1ff4:	00 d0       	rcall	.+0      	; 0x1ff6 <_sem_unlock+0x6>
    1ff6:	00 d0       	rcall	.+0      	; 0x1ff8 <_sem_unlock+0x8>
    1ff8:	cd b7       	in	r28, 0x3d	; 61
    1ffa:	de b7       	in	r29, 0x3e	; 62
    1ffc:	9c 83       	std	Y+4, r25	; 0x04
    1ffe:	8b 83       	std	Y+3, r24	; 0x03
    if( ((xlist_t *)sem)->index == (index_t)0  )
    2000:	eb 81       	ldd	r30, Y+3	; 0x03
    2002:	fc 81       	ldd	r31, Y+4	; 0x04
    2004:	80 89       	ldd	r24, Z+16	; 0x10
    2006:	88 23       	and	r24, r24
    2008:	51 f4       	brne	.+20     	; 0x201e <_sem_unlock+0x2e>
    {
        sem->counter++;
    200a:	eb 81       	ldd	r30, Y+3	; 0x03
    200c:	fc 81       	ldd	r31, Y+4	; 0x04
    200e:	81 89       	ldd	r24, Z+17	; 0x11
    2010:	92 89       	ldd	r25, Z+18	; 0x12
    2012:	01 96       	adiw	r24, 0x01	; 1
    2014:	eb 81       	ldd	r30, Y+3	; 0x03
    2016:	fc 81       	ldd	r31, Y+4	; 0x04
    2018:	92 8b       	std	Z+18, r25	; 0x12
    201a:	81 8b       	std	Z+17, r24	; 0x11
    201c:	15 c0       	rjmp	.+42     	; 0x2048 <_sem_unlock+0x58>
#ifdef CONFIG_MP
        spin_unlock( &sem->lock );
#endif //CONFIG_MP
        return;
    }
    proc_t * proc = (proc_t *)xlist_head((xlist_t *)sem);
    201e:	8b 81       	ldd	r24, Y+3	; 0x03
    2020:	9c 81       	ldd	r25, Y+4	; 0x04
    2022:	0e 94 2b 11 	call	0x2256	; 0x2256 <xlist_head>
    2026:	9a 83       	std	Y+2, r25	; 0x02
    2028:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );// Захват спин-блокировки процесса
#endif //CONFIG_MP
    proc->flags &= ~PROC_FLG_QUEUE;
    202a:	e9 81       	ldd	r30, Y+1	; 0x01
    202c:	fa 81       	ldd	r31, Y+2	; 0x02
    202e:	83 85       	ldd	r24, Z+11	; 0x0b
    2030:	87 7f       	andi	r24, 0xF7	; 247
    2032:	e9 81       	ldd	r30, Y+1	; 0x01
    2034:	fa 81       	ldd	r31, Y+2	; 0x02
    2036:	83 87       	std	Z+11, r24	; 0x0b
    gitem_cut( (gitem_t *)proc );
    2038:	89 81       	ldd	r24, Y+1	; 0x01
    203a:	9a 81       	ldd	r25, Y+2	; 0x02
    203c:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <gitem_cut>
    _proc_run( proc );
    2040:	89 81       	ldd	r24, Y+1	; 0x01
    2042:	9a 81       	ldd	r25, Y+2	; 0x02
    2044:	0e 94 2c 0c 	call	0x1858	; 0x1858 <_proc_run>
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );// Освобождение спин-блокировки процесса
#endif //CONFIG_MP
}
    2048:	0f 90       	pop	r0
    204a:	0f 90       	pop	r0
    204c:	0f 90       	pop	r0
    204e:	0f 90       	pop	r0
    2050:	cf 91       	pop	r28
    2052:	df 91       	pop	r29
    2054:	08 95       	ret

00002056 <sig_init_isr>:
*****************************************************************************************/
#include "../include/bugurt.h"
//========================================================================================
// Инициация
void sig_init_isr( sig_t * sig )
{
    2056:	df 93       	push	r29
    2058:	cf 93       	push	r28
    205a:	00 d0       	rcall	.+0      	; 0x205c <sig_init_isr+0x6>
    205c:	cd b7       	in	r28, 0x3d	; 61
    205e:	de b7       	in	r29, 0x3e	; 62
    2060:	9a 83       	std	Y+2, r25	; 0x02
    2062:	89 83       	std	Y+1, r24	; 0x01
    {
        xlist_init( (xlist_t *)sig->sig_list + i );
        stat_init( (stat_t *)sig->sig_stat + i );
    }
#else
    xlist_init( (xlist_t *)sig );
    2064:	89 81       	ldd	r24, Y+1	; 0x01
    2066:	9a 81       	ldd	r25, Y+2	; 0x02
    2068:	0e 94 01 11 	call	0x2202	; 0x2202 <xlist_init>
#endif
}
    206c:	0f 90       	pop	r0
    206e:	0f 90       	pop	r0
    2070:	cf 91       	pop	r28
    2072:	df 91       	pop	r29
    2074:	08 95       	ret

00002076 <sig_wait_stage_1_isr>:
//========================================================================================
// Это выполнится при постановке процесса в список ожидания сигнала
void sig_wait_stage_1_isr( sig_t * sig )
{
    2076:	df 93       	push	r29
    2078:	cf 93       	push	r28
    207a:	00 d0       	rcall	.+0      	; 0x207c <sig_wait_stage_1_isr+0x6>
    207c:	00 d0       	rcall	.+0      	; 0x207e <sig_wait_stage_1_isr+0x8>
    207e:	cd b7       	in	r28, 0x3d	; 61
    2080:	de b7       	in	r29, 0x3e	; 62
    2082:	9c 83       	std	Y+4, r25	; 0x04
    2084:	8b 83       	std	Y+3, r24	; 0x03
#ifdef CONFIG_MP
    spin_lock( &sig->lock );
#endif // CONFIG_MP
    proc_t * proc = current_proc();
    2086:	0e 94 cc 00 	call	0x198	; 0x198 <current_proc>
    208a:	9a 83       	std	Y+2, r25	; 0x02
    208c:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    // Останавливаем процесс
    _proc_stop(proc);
    208e:	89 81       	ldd	r24, Y+1	; 0x01
    2090:	9a 81       	ldd	r25, Y+2	; 0x02
    2092:	0e 94 b3 0c 	call	0x1966	; 0x1966 <_proc_stop>
    proc->flags |= PROC_FLG_WAIT;
    2096:	e9 81       	ldd	r30, Y+1	; 0x01
    2098:	fa 81       	ldd	r31, Y+2	; 0x02
    209a:	83 85       	ldd	r24, Z+11	; 0x0b
    209c:	80 61       	ori	r24, 0x10	; 16
    209e:	e9 81       	ldd	r30, Y+1	; 0x01
    20a0:	fa 81       	ldd	r31, Y+2	; 0x02
    20a2:	83 87       	std	Z+11, r24	; 0x0b
        stat_inc( proc, (stat_t *)sig->sig_stat + sig_core );
    }
    spin_unlock( &proc->lock );
    spin_unlock( &sig->lock );
#else
    gitem_insert_group( (gitem_t *)proc, (xlist_t *)sig );
    20a4:	89 81       	ldd	r24, Y+1	; 0x01
    20a6:	9a 81       	ldd	r25, Y+2	; 0x02
    20a8:	2b 81       	ldd	r18, Y+3	; 0x03
    20aa:	3c 81       	ldd	r19, Y+4	; 0x04
    20ac:	b9 01       	movw	r22, r18
    20ae:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <gitem_insert_group>
#endif //CONFIG_MP
}
    20b2:	0f 90       	pop	r0
    20b4:	0f 90       	pop	r0
    20b6:	0f 90       	pop	r0
    20b8:	0f 90       	pop	r0
    20ba:	cf 91       	pop	r28
    20bc:	df 91       	pop	r29
    20be:	08 95       	ret

000020c0 <sig_signal_isr>:
    enable_interrupts();
}
//========================================================================================
// Тоже самое что и предыдущие, олько для вызова из обработчиков прерываний и из критических секций
void sig_signal_isr( sig_t * sig )
{
    20c0:	df 93       	push	r29
    20c2:	cf 93       	push	r28
    20c4:	00 d0       	rcall	.+0      	; 0x20c6 <sig_signal_isr+0x6>
    20c6:	00 d0       	rcall	.+0      	; 0x20c8 <sig_signal_isr+0x8>
    20c8:	cd b7       	in	r28, 0x3d	; 61
    20ca:	de b7       	in	r29, 0x3e	; 62
    20cc:	9c 83       	std	Y+4, r25	; 0x04
    20ce:	8b 83       	std	Y+3, r24	; 0x03
    }
    resched(core);// Перепланировка
    spin_unlock( &proc->lock );// Освобождение блокировки процесса
    spin_unlock( &sig->lock );// Освобождение блокировки сигнала
#else
    if( ((xlist_t *)sig)->index == (index_t)0 )return;
    20d0:	eb 81       	ldd	r30, Y+3	; 0x03
    20d2:	fc 81       	ldd	r31, Y+4	; 0x04
    20d4:	80 89       	ldd	r24, Z+16	; 0x10
    20d6:	88 23       	and	r24, r24
    20d8:	a9 f0       	breq	.+42     	; 0x2104 <sig_signal_isr+0x44>
    proc_t * proc = (proc_t *)xlist_head( (xlist_t *)sig );
    20da:	8b 81       	ldd	r24, Y+3	; 0x03
    20dc:	9c 81       	ldd	r25, Y+4	; 0x04
    20de:	0e 94 2b 11 	call	0x2256	; 0x2256 <xlist_head>
    20e2:	9a 83       	std	Y+2, r25	; 0x02
    20e4:	89 83       	std	Y+1, r24	; 0x01
    gitem_fast_cut( (gitem_t *)proc );
    20e6:	89 81       	ldd	r24, Y+1	; 0x01
    20e8:	9a 81       	ldd	r25, Y+2	; 0x02
    20ea:	0e 94 65 07 	call	0xeca	; 0xeca <gitem_fast_cut>
    gitem_insert( (gitem_t *)proc, kernel.sched.ready );
    20ee:	89 81       	ldd	r24, Y+1	; 0x01
    20f0:	9a 81       	ldd	r25, Y+2	; 0x02
    20f2:	20 91 a0 01 	lds	r18, 0x01A0
    20f6:	30 91 a1 01 	lds	r19, 0x01A1
    20fa:	b9 01       	movw	r22, r18
    20fc:	0e 94 8e 06 	call	0xd1c	; 0xd1c <gitem_insert>
    resched();
    2100:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
#endif //CONFIG_MP
}
    2104:	0f 90       	pop	r0
    2106:	0f 90       	pop	r0
    2108:	0f 90       	pop	r0
    210a:	0f 90       	pop	r0
    210c:	cf 91       	pop	r28
    210e:	df 91       	pop	r29
    2110:	08 95       	ret

00002112 <sig_broadcast_isr>:
//----------------------------------------------------------------------------------------
void sig_broadcast_isr( sig_t * sig )
{
    2112:	df 93       	push	r29
    2114:	cf 93       	push	r28
    2116:	00 d0       	rcall	.+0      	; 0x2118 <sig_broadcast_isr+0x6>
    2118:	cd b7       	in	r28, 0x3d	; 61
    211a:	de b7       	in	r29, 0x3e	; 62
    211c:	9a 83       	std	Y+2, r25	; 0x02
    211e:	89 83       	std	Y+1, r24	; 0x01

        resched(core);
    }
    spin_unlock( &sig->lock );
#else
    gitem_xlist_merge( (xlist_t *)sig, kernel.sched.ready );
    2120:	20 91 a0 01 	lds	r18, 0x01A0
    2124:	30 91 a1 01 	lds	r19, 0x01A1
    2128:	89 81       	ldd	r24, Y+1	; 0x01
    212a:	9a 81       	ldd	r25, Y+2	; 0x02
    212c:	b9 01       	movw	r22, r18
    212e:	0e 94 02 08 	call	0x1004	; 0x1004 <gitem_xlist_merge>
    resched();
    2132:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
#endif //CONFIG_MP
}
    2136:	0f 90       	pop	r0
    2138:	0f 90       	pop	r0
    213a:	cf 91       	pop	r28
    213c:	df 91       	pop	r29
    213e:	08 95       	ret

00002140 <_clear_timer>:
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
//========================================================================================
void _clear_timer(timer_t * t)
{
    2140:	df 93       	push	r29
    2142:	cf 93       	push	r28
    2144:	00 d0       	rcall	.+0      	; 0x2146 <_clear_timer+0x6>
    2146:	cd b7       	in	r28, 0x3d	; 61
    2148:	de b7       	in	r29, 0x3e	; 62
    214a:	9a 83       	std	Y+2, r25	; 0x02
    214c:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    core_id_t current_core = _enter_crit_sec();
    spin_lock( &kernel.timer_lock );
#else
    enter_crit_sec();
    214e:	0e 94 38 06 	call	0xc70	; 0xc70 <enter_crit_sec>
#endif //CONFIG_MP
    *t = kernel.timer;
    2152:	80 91 f8 01 	lds	r24, 0x01F8
    2156:	90 91 f9 01 	lds	r25, 0x01F9
    215a:	e9 81       	ldd	r30, Y+1	; 0x01
    215c:	fa 81       	ldd	r31, Y+2	; 0x02
    215e:	91 83       	std	Z+1, r25	; 0x01
    2160:	80 83       	st	Z, r24
#ifdef CONFIG_MP
    spin_unlock( &kernel.timer_lock );
    _exit_crit_sec(current_core);
#else
    exit_crit_sec();
    2162:	0e 94 4a 06 	call	0xc94	; 0xc94 <exit_crit_sec>
#endif //CONFIG_MP
}
    2166:	0f 90       	pop	r0
    2168:	0f 90       	pop	r0
    216a:	cf 91       	pop	r28
    216c:	df 91       	pop	r29
    216e:	08 95       	ret

00002170 <_timer>:
//----------------------------------------------------------------------------------------
timer_t _timer(timer_t t)
{
    2170:	df 93       	push	r29
    2172:	cf 93       	push	r28
    2174:	00 d0       	rcall	.+0      	; 0x2176 <_timer+0x6>
    2176:	00 d0       	rcall	.+0      	; 0x2178 <_timer+0x8>
    2178:	cd b7       	in	r28, 0x3d	; 61
    217a:	de b7       	in	r29, 0x3e	; 62
    217c:	9c 83       	std	Y+4, r25	; 0x04
    217e:	8b 83       	std	Y+3, r24	; 0x03
    timer_t ret;
#ifdef CONFIG_MP
    core_id_t current_core = _enter_crit_sec();
    spin_lock( &kernel.timer_lock );
#else
    enter_crit_sec();
    2180:	0e 94 38 06 	call	0xc70	; 0xc70 <enter_crit_sec>
#endif //CONFIG_MP
    ret = kernel.timer - t;
    2184:	20 91 f8 01 	lds	r18, 0x01F8
    2188:	30 91 f9 01 	lds	r19, 0x01F9
    218c:	8b 81       	ldd	r24, Y+3	; 0x03
    218e:	9c 81       	ldd	r25, Y+4	; 0x04
    2190:	a9 01       	movw	r20, r18
    2192:	48 1b       	sub	r20, r24
    2194:	59 0b       	sbc	r21, r25
    2196:	ca 01       	movw	r24, r20
    2198:	9a 83       	std	Y+2, r25	; 0x02
    219a:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_unlock( &kernel.timer_lock );
    _exit_crit_sec(current_core);
#else
    exit_crit_sec();
    219c:	0e 94 4a 06 	call	0xc94	; 0xc94 <exit_crit_sec>
#endif //CONFIG_MP
    return ret;
    21a0:	89 81       	ldd	r24, Y+1	; 0x01
    21a2:	9a 81       	ldd	r25, Y+2	; 0x02
}
    21a4:	0f 90       	pop	r0
    21a6:	0f 90       	pop	r0
    21a8:	0f 90       	pop	r0
    21aa:	0f 90       	pop	r0
    21ac:	cf 91       	pop	r28
    21ae:	df 91       	pop	r29
    21b0:	08 95       	ret

000021b2 <wait_time>:

//----------------------------------------------------------------------------------------
void wait_time(timer_t time)
{
    21b2:	df 93       	push	r29
    21b4:	cf 93       	push	r28
    21b6:	00 d0       	rcall	.+0      	; 0x21b8 <wait_time+0x6>
    21b8:	00 d0       	rcall	.+0      	; 0x21ba <wait_time+0x8>
    21ba:	0f 92       	push	r0
    21bc:	cd b7       	in	r28, 0x3d	; 61
    21be:	de b7       	in	r29, 0x3e	; 62
    21c0:	9d 83       	std	Y+5, r25	; 0x05
    21c2:	8c 83       	std	Y+4, r24	; 0x04
    timer_t tmr;
    bool_t roll=(bool_t)1;
    21c4:	81 e0       	ldi	r24, 0x01	; 1
    21c6:	89 83       	std	Y+1, r24	; 0x01
    CLEAR_TIMER(tmr);
    21c8:	ce 01       	movw	r24, r28
    21ca:	02 96       	adiw	r24, 0x02	; 2
    21cc:	0e 94 a0 10 	call	0x2140	; 0x2140 <_clear_timer>
    21d0:	0d c0       	rjmp	.+26     	; 0x21ec <wait_time+0x3a>
    while((bool_t)roll)
    {
        roll = (bool_t)( TIMER(tmr) < (timer_t)time );
    21d2:	8a 81       	ldd	r24, Y+2	; 0x02
    21d4:	9b 81       	ldd	r25, Y+3	; 0x03
    21d6:	0e 94 b8 10 	call	0x2170	; 0x2170 <_timer>
    21da:	9c 01       	movw	r18, r24
    21dc:	19 82       	std	Y+1, r1	; 0x01
    21de:	8c 81       	ldd	r24, Y+4	; 0x04
    21e0:	9d 81       	ldd	r25, Y+5	; 0x05
    21e2:	28 17       	cp	r18, r24
    21e4:	39 07       	cpc	r19, r25
    21e6:	10 f4       	brcc	.+4      	; 0x21ec <wait_time+0x3a>
    21e8:	81 e0       	ldi	r24, 0x01	; 1
    21ea:	89 83       	std	Y+1, r24	; 0x01
void wait_time(timer_t time)
{
    timer_t tmr;
    bool_t roll=(bool_t)1;
    CLEAR_TIMER(tmr);
    while((bool_t)roll)
    21ec:	89 81       	ldd	r24, Y+1	; 0x01
    21ee:	88 23       	and	r24, r24
    21f0:	81 f7       	brne	.-32     	; 0x21d2 <wait_time+0x20>
    {
        roll = (bool_t)( TIMER(tmr) < (timer_t)time );
    }
}
    21f2:	0f 90       	pop	r0
    21f4:	0f 90       	pop	r0
    21f6:	0f 90       	pop	r0
    21f8:	0f 90       	pop	r0
    21fa:	0f 90       	pop	r0
    21fc:	cf 91       	pop	r28
    21fe:	df 91       	pop	r29
    2200:	08 95       	ret

00002202 <xlist_init>:
**********************************************/
//Инициация
void xlist_init(
    xlist_t * xlist
)
{
    2202:	df 93       	push	r29
    2204:	cf 93       	push	r28
    2206:	00 d0       	rcall	.+0      	; 0x2208 <xlist_init+0x6>
    2208:	00 d0       	rcall	.+0      	; 0x220a <xlist_init+0x8>
    220a:	cd b7       	in	r28, 0x3d	; 61
    220c:	de b7       	in	r29, 0x3e	; 62
    220e:	9c 83       	std	Y+4, r25	; 0x04
    2210:	8b 83       	std	Y+3, r24	; 0x03
    count_t i;
    //список пуст
    xlist->index = (index_t)0;
    2212:	eb 81       	ldd	r30, Y+3	; 0x03
    2214:	fc 81       	ldd	r31, Y+4	; 0x04
    2216:	10 8a       	std	Z+16, r1	; 0x10
    //обнуляем указатели
    for( i = 0; i < BITS_IN_INDEX_T; i++ )xlist->item[i] = (item_t *)0;
    2218:	1a 82       	std	Y+2, r1	; 0x02
    221a:	19 82       	std	Y+1, r1	; 0x01
    221c:	10 c0       	rjmp	.+32     	; 0x223e <xlist_init+0x3c>
    221e:	89 81       	ldd	r24, Y+1	; 0x01
    2220:	9a 81       	ldd	r25, Y+2	; 0x02
    2222:	2b 81       	ldd	r18, Y+3	; 0x03
    2224:	3c 81       	ldd	r19, Y+4	; 0x04
    2226:	88 0f       	add	r24, r24
    2228:	99 1f       	adc	r25, r25
    222a:	f9 01       	movw	r30, r18
    222c:	e8 0f       	add	r30, r24
    222e:	f9 1f       	adc	r31, r25
    2230:	11 82       	std	Z+1, r1	; 0x01
    2232:	10 82       	st	Z, r1
    2234:	89 81       	ldd	r24, Y+1	; 0x01
    2236:	9a 81       	ldd	r25, Y+2	; 0x02
    2238:	01 96       	adiw	r24, 0x01	; 1
    223a:	9a 83       	std	Y+2, r25	; 0x02
    223c:	89 83       	std	Y+1, r24	; 0x01
    223e:	89 81       	ldd	r24, Y+1	; 0x01
    2240:	9a 81       	ldd	r25, Y+2	; 0x02
    2242:	88 30       	cpi	r24, 0x08	; 8
    2244:	91 05       	cpc	r25, r1
    2246:	58 f3       	brcs	.-42     	; 0x221e <xlist_init+0x1c>
}
    2248:	0f 90       	pop	r0
    224a:	0f 90       	pop	r0
    224c:	0f 90       	pop	r0
    224e:	0f 90       	pop	r0
    2250:	cf 91       	pop	r28
    2252:	df 91       	pop	r29
    2254:	08 95       	ret

00002256 <xlist_head>:
//===========================================================================
//Поиск головы списка
item_t * xlist_head(xlist_t * xlist)
{
    2256:	df 93       	push	r29
    2258:	cf 93       	push	r28
    225a:	00 d0       	rcall	.+0      	; 0x225c <xlist_head+0x6>
    225c:	00 d0       	rcall	.+0      	; 0x225e <xlist_head+0x8>
    225e:	0f 92       	push	r0
    2260:	cd b7       	in	r28, 0x3d	; 61
    2262:	de b7       	in	r29, 0x3e	; 62
    2264:	9d 83       	std	Y+5, r25	; 0x05
    2266:	8c 83       	std	Y+4, r24	; 0x04
    item_t * ret_val = (item_t *)0;
    2268:	1b 82       	std	Y+3, r1	; 0x03
    226a:	1a 82       	std	Y+2, r1	; 0x02
    index_t index = xlist->index;
    226c:	ec 81       	ldd	r30, Y+4	; 0x04
    226e:	fd 81       	ldd	r31, Y+5	; 0x05
    2270:	80 89       	ldd	r24, Z+16	; 0x10
    2272:	89 83       	std	Y+1, r24	; 0x01

    if( index != (index_t)0 )
    2274:	89 81       	ldd	r24, Y+1	; 0x01
    2276:	88 23       	and	r24, r24
    2278:	81 f0       	breq	.+32     	; 0x229a <xlist_head+0x44>
    {
        ret_val = xlist->item[ index_search( index ) ];
    227a:	89 81       	ldd	r24, Y+1	; 0x01
    227c:	0e 94 0f 09 	call	0x121e	; 0x121e <index_search>
    2280:	88 2f       	mov	r24, r24
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	2c 81       	ldd	r18, Y+4	; 0x04
    2286:	3d 81       	ldd	r19, Y+5	; 0x05
    2288:	88 0f       	add	r24, r24
    228a:	99 1f       	adc	r25, r25
    228c:	f9 01       	movw	r30, r18
    228e:	e8 0f       	add	r30, r24
    2290:	f9 1f       	adc	r31, r25
    2292:	80 81       	ld	r24, Z
    2294:	91 81       	ldd	r25, Z+1	; 0x01
    2296:	9b 83       	std	Y+3, r25	; 0x03
    2298:	8a 83       	std	Y+2, r24	; 0x02
    }
    return ret_val;
    229a:	8a 81       	ldd	r24, Y+2	; 0x02
    229c:	9b 81       	ldd	r25, Y+3	; 0x03
}
    229e:	0f 90       	pop	r0
    22a0:	0f 90       	pop	r0
    22a2:	0f 90       	pop	r0
    22a4:	0f 90       	pop	r0
    22a6:	0f 90       	pop	r0
    22a8:	cf 91       	pop	r28
    22aa:	df 91       	pop	r29
    22ac:	08 95       	ret

000022ae <xlist_switch>:

//===========================================================================
// переключение указателя в массиве на следующий элемент, пригодится в планировщике
void xlist_switch(xlist_t * xlist, prio_t prio)
{
    22ae:	df 93       	push	r29
    22b0:	cf 93       	push	r28
    22b2:	00 d0       	rcall	.+0      	; 0x22b4 <xlist_switch+0x6>
    22b4:	00 d0       	rcall	.+0      	; 0x22b6 <xlist_switch+0x8>
    22b6:	0f 92       	push	r0
    22b8:	cd b7       	in	r28, 0x3d	; 61
    22ba:	de b7       	in	r29, 0x3e	; 62
    22bc:	9c 83       	std	Y+4, r25	; 0x04
    22be:	8b 83       	std	Y+3, r24	; 0x03
    22c0:	6d 83       	std	Y+5, r22	; 0x05
    item_t ** current = xlist->item + prio;
    22c2:	2b 81       	ldd	r18, Y+3	; 0x03
    22c4:	3c 81       	ldd	r19, Y+4	; 0x04
    22c6:	8d 81       	ldd	r24, Y+5	; 0x05
    22c8:	88 2f       	mov	r24, r24
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	88 0f       	add	r24, r24
    22ce:	99 1f       	adc	r25, r25
    22d0:	82 0f       	add	r24, r18
    22d2:	93 1f       	adc	r25, r19
    22d4:	9a 83       	std	Y+2, r25	; 0x02
    22d6:	89 83       	std	Y+1, r24	; 0x01
    *current = (*current)->next;
    22d8:	e9 81       	ldd	r30, Y+1	; 0x01
    22da:	fa 81       	ldd	r31, Y+2	; 0x02
    22dc:	01 90       	ld	r0, Z+
    22de:	f0 81       	ld	r31, Z
    22e0:	e0 2d       	mov	r30, r0
    22e2:	80 81       	ld	r24, Z
    22e4:	91 81       	ldd	r25, Z+1	; 0x01
    22e6:	e9 81       	ldd	r30, Y+1	; 0x01
    22e8:	fa 81       	ldd	r31, Y+2	; 0x02
    22ea:	91 83       	std	Z+1, r25	; 0x01
    22ec:	80 83       	st	Z, r24
    //*current = (item_t *)*(item_t **)*(item_t ***)current;
}
    22ee:	0f 90       	pop	r0
    22f0:	0f 90       	pop	r0
    22f2:	0f 90       	pop	r0
    22f4:	0f 90       	pop	r0
    22f6:	0f 90       	pop	r0
    22f8:	cf 91       	pop	r28
    22fa:	df 91       	pop	r29
    22fc:	08 95       	ret

000022fe <raise_syscall_interrupt>:
/*
 */
#include <bugurt.h>

void raise_syscall_interrupt(void)
{
    22fe:	df 93       	push	r29
    2300:	cf 93       	push	r28
    2302:	cd b7       	in	r28, 0x3d	; 61
    2304:	de b7       	in	r29, 0x3e	; 62
    R2_on();
    2306:	ab e2       	ldi	r26, 0x2B	; 43
    2308:	b0 e0       	ldi	r27, 0x00	; 0
    230a:	eb e2       	ldi	r30, 0x2B	; 43
    230c:	f0 e0       	ldi	r31, 0x00	; 0
    230e:	80 81       	ld	r24, Z
    2310:	84 60       	ori	r24, 0x04	; 4
    2312:	8c 93       	st	X, r24
    G2_off();
    2314:	ab e2       	ldi	r26, 0x2B	; 43
    2316:	b0 e0       	ldi	r27, 0x00	; 0
    2318:	eb e2       	ldi	r30, 0x2B	; 43
    231a:	f0 e0       	ldi	r31, 0x00	; 0
    231c:	80 81       	ld	r24, Z
    231e:	87 7f       	andi	r24, 0xF7	; 247
    2320:	8c 93       	st	X, r24
    R2_off();
    2322:	ab e2       	ldi	r26, 0x2B	; 43
    2324:	b0 e0       	ldi	r27, 0x00	; 0
    2326:	eb e2       	ldi	r30, 0x2B	; 43
    2328:	f0 e0       	ldi	r31, 0x00	; 0
    232a:	80 81       	ld	r24, Z
    232c:	8b 7f       	andi	r24, 0xFB	; 251
    232e:	8c 93       	st	X, r24
    G2_on();
    2330:	ab e2       	ldi	r26, 0x2B	; 43
    2332:	b0 e0       	ldi	r27, 0x00	; 0
    2334:	eb e2       	ldi	r30, 0x2B	; 43
    2336:	f0 e0       	ldi	r31, 0x00	; 0
    2338:	80 81       	ld	r24, Z
    233a:	88 60       	ori	r24, 0x08	; 8
    233c:	8c 93       	st	X, r24
}
    233e:	cf 91       	pop	r28
    2340:	df 91       	pop	r29
    2342:	08 95       	ret

00002344 <start_scheduler>:


void start_scheduler( void ){
    2344:	df 93       	push	r29
    2346:	cf 93       	push	r28
    2348:	cd b7       	in	r28, 0x3d	; 61
    234a:	de b7       	in	r29, 0x3e	; 62
    TIMSK2 |= 0x02;
    234c:	a0 e7       	ldi	r26, 0x70	; 112
    234e:	b0 e0       	ldi	r27, 0x00	; 0
    2350:	e0 e7       	ldi	r30, 0x70	; 112
    2352:	f0 e0       	ldi	r31, 0x00	; 0
    2354:	80 81       	ld	r24, Z
    2356:	82 60       	ori	r24, 0x02	; 2
    2358:	8c 93       	st	X, r24
    EIMSK |= 0x02;
    235a:	ad e3       	ldi	r26, 0x3D	; 61
    235c:	b0 e0       	ldi	r27, 0x00	; 0
    235e:	ed e3       	ldi	r30, 0x3D	; 61
    2360:	f0 e0       	ldi	r31, 0x00	; 0
    2362:	80 81       	ld	r24, Z
    2364:	82 60       	ori	r24, 0x02	; 2
    2366:	8c 93       	st	X, r24
    EIFR |= 0x02;
    2368:	ac e3       	ldi	r26, 0x3C	; 60
    236a:	b0 e0       	ldi	r27, 0x00	; 0
    236c:	ec e3       	ldi	r30, 0x3C	; 60
    236e:	f0 e0       	ldi	r31, 0x00	; 0
    2370:	80 81       	ld	r24, Z
    2372:	82 60       	ori	r24, 0x02	; 2
    2374:	8c 93       	st	X, r24
}
    2376:	cf 91       	pop	r28
    2378:	df 91       	pop	r29
    237a:	08 95       	ret

0000237c <blink_1>:
    TIMSK2 &= ~0x02;
    EIMSK &= ~0x02;
}

///----------------------------------------------------------------------------------------
void blink_1(void * t) {PORTB ^= 0x10;}
    237c:	df 93       	push	r29
    237e:	cf 93       	push	r28
    2380:	00 d0       	rcall	.+0      	; 0x2382 <blink_1+0x6>
    2382:	cd b7       	in	r28, 0x3d	; 61
    2384:	de b7       	in	r29, 0x3e	; 62
    2386:	9a 83       	std	Y+2, r25	; 0x02
    2388:	89 83       	std	Y+1, r24	; 0x01
    238a:	a5 e2       	ldi	r26, 0x25	; 37
    238c:	b0 e0       	ldi	r27, 0x00	; 0
    238e:	e5 e2       	ldi	r30, 0x25	; 37
    2390:	f0 e0       	ldi	r31, 0x00	; 0
    2392:	90 81       	ld	r25, Z
    2394:	80 e1       	ldi	r24, 0x10	; 16
    2396:	89 27       	eor	r24, r25
    2398:	8c 93       	st	X, r24
    239a:	0f 90       	pop	r0
    239c:	0f 90       	pop	r0
    239e:	cf 91       	pop	r28
    23a0:	df 91       	pop	r29
    23a2:	08 95       	ret

000023a4 <blink_2>:
void blink_2(void * t) {PORTB ^= 0x08;}
    23a4:	df 93       	push	r29
    23a6:	cf 93       	push	r28
    23a8:	00 d0       	rcall	.+0      	; 0x23aa <blink_2+0x6>
    23aa:	cd b7       	in	r28, 0x3d	; 61
    23ac:	de b7       	in	r29, 0x3e	; 62
    23ae:	9a 83       	std	Y+2, r25	; 0x02
    23b0:	89 83       	std	Y+1, r24	; 0x01
    23b2:	a5 e2       	ldi	r26, 0x25	; 37
    23b4:	b0 e0       	ldi	r27, 0x00	; 0
    23b6:	e5 e2       	ldi	r30, 0x25	; 37
    23b8:	f0 e0       	ldi	r31, 0x00	; 0
    23ba:	90 81       	ld	r25, Z
    23bc:	88 e0       	ldi	r24, 0x08	; 8
    23be:	89 27       	eor	r24, r25
    23c0:	8c 93       	st	X, r24
    23c2:	0f 90       	pop	r0
    23c4:	0f 90       	pop	r0
    23c6:	cf 91       	pop	r28
    23c8:	df 91       	pop	r29
    23ca:	08 95       	ret

000023cc <blink_3>:
void blink_3(void * t) {PORTB ^= 0x04;}
    23cc:	df 93       	push	r29
    23ce:	cf 93       	push	r28
    23d0:	00 d0       	rcall	.+0      	; 0x23d2 <blink_3+0x6>
    23d2:	cd b7       	in	r28, 0x3d	; 61
    23d4:	de b7       	in	r29, 0x3e	; 62
    23d6:	9a 83       	std	Y+2, r25	; 0x02
    23d8:	89 83       	std	Y+1, r24	; 0x01
    23da:	a5 e2       	ldi	r26, 0x25	; 37
    23dc:	b0 e0       	ldi	r27, 0x00	; 0
    23de:	e5 e2       	ldi	r30, 0x25	; 37
    23e0:	f0 e0       	ldi	r31, 0x00	; 0
    23e2:	90 81       	ld	r25, Z
    23e4:	84 e0       	ldi	r24, 0x04	; 4
    23e6:	89 27       	eor	r24, r25
    23e8:	8c 93       	st	X, r24
    23ea:	0f 90       	pop	r0
    23ec:	0f 90       	pop	r0
    23ee:	cf 91       	pop	r28
    23f0:	df 91       	pop	r29
    23f2:	08 95       	ret

000023f4 <blink_4>:
void blink_4(void * t) {PORTB ^= 0x02;}
    23f4:	df 93       	push	r29
    23f6:	cf 93       	push	r28
    23f8:	00 d0       	rcall	.+0      	; 0x23fa <blink_4+0x6>
    23fa:	cd b7       	in	r28, 0x3d	; 61
    23fc:	de b7       	in	r29, 0x3e	; 62
    23fe:	9a 83       	std	Y+2, r25	; 0x02
    2400:	89 83       	std	Y+1, r24	; 0x01
    2402:	a5 e2       	ldi	r26, 0x25	; 37
    2404:	b0 e0       	ldi	r27, 0x00	; 0
    2406:	e5 e2       	ldi	r30, 0x25	; 37
    2408:	f0 e0       	ldi	r31, 0x00	; 0
    240a:	90 81       	ld	r25, Z
    240c:	82 e0       	ldi	r24, 0x02	; 2
    240e:	89 27       	eor	r24, r25
    2410:	8c 93       	st	X, r24
    2412:	0f 90       	pop	r0
    2414:	0f 90       	pop	r0
    2416:	cf 91       	pop	r28
    2418:	df 91       	pop	r29
    241a:	08 95       	ret

0000241c <blink_12>:
void blink_7(void * t) {PORTC ^= 0x10;}
void blink_8(void * t) {PORTC ^= 0x08;}
void blink_9(void * t) {PORTC ^= 0x04;}
void blink_10(void * t) {PORTC ^= 0x02;}
void blink_11(void * t) {PORTC ^= 0x01;}
void blink_12(void * t) {
    241c:	df 93       	push	r29
    241e:	cf 93       	push	r28
    2420:	00 d0       	rcall	.+0      	; 0x2422 <blink_12+0x6>
    2422:	cd b7       	in	r28, 0x3d	; 61
    2424:	de b7       	in	r29, 0x3e	; 62
    2426:	9a 83       	std	Y+2, r25	; 0x02
    2428:	89 83       	std	Y+1, r24	; 0x01
    PORTB ^= 0x20;
    242a:	a5 e2       	ldi	r26, 0x25	; 37
    242c:	b0 e0       	ldi	r27, 0x00	; 0
    242e:	e5 e2       	ldi	r30, 0x25	; 37
    2430:	f0 e0       	ldi	r31, 0x00	; 0
    2432:	90 81       	ld	r25, Z
    2434:	80 e2       	ldi	r24, 0x20	; 32
    2436:	89 27       	eor	r24, r25
    2438:	8c 93       	st	X, r24
    blink_G3();
    243a:	ab e2       	ldi	r26, 0x2B	; 43
    243c:	b0 e0       	ldi	r27, 0x00	; 0
    243e:	eb e2       	ldi	r30, 0x2B	; 43
    2440:	f0 e0       	ldi	r31, 0x00	; 0
    2442:	90 81       	ld	r25, Z
    2444:	80 e4       	ldi	r24, 0x40	; 64
    2446:	89 27       	eor	r24, r25
    2448:	8c 93       	st	X, r24
    blink_R3();
    244a:	ab e2       	ldi	r26, 0x2B	; 43
    244c:	b0 e0       	ldi	r27, 0x00	; 0
    244e:	eb e2       	ldi	r30, 0x2B	; 43
    2450:	f0 e0       	ldi	r31, 0x00	; 0
    2452:	90 81       	ld	r25, Z
    2454:	80 e2       	ldi	r24, 0x20	; 32
    2456:	89 27       	eor	r24, r25
    2458:	8c 93       	st	X, r24
    }
    245a:	0f 90       	pop	r0
    245c:	0f 90       	pop	r0
    245e:	cf 91       	pop	r28
    2460:	df 91       	pop	r29
    2462:	08 95       	ret

00002464 <main0>:
stack_t stack[4][128];

sem_t sem;

void main0(void * t)
{
    2464:	df 93       	push	r29
    2466:	cf 93       	push	r28
    2468:	00 d0       	rcall	.+0      	; 0x246a <main0+0x6>
    246a:	cd b7       	in	r28, 0x3d	; 61
    246c:	de b7       	in	r29, 0x3e	; 62
    246e:	9a 83       	std	Y+2, r25	; 0x02
    2470:	89 83       	std	Y+1, r24	; 0x01
    while(1)
    {
        sem_lock(&sem);
    2472:	82 eb       	ldi	r24, 0xB2	; 178
    2474:	92 e0       	ldi	r25, 0x02	; 2
    2476:	0e 94 33 04 	call	0x866	; 0x866 <sem_lock>
        wait_time(100);
    247a:	84 e6       	ldi	r24, 0x64	; 100
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <wait_time>
        sem_unlock(&sem);
    2482:	82 eb       	ldi	r24, 0xB2	; 178
    2484:	92 e0       	ldi	r25, 0x02	; 2
    2486:	0e 94 60 04 	call	0x8c0	; 0x8c0 <sem_unlock>
    248a:	f3 cf       	rjmp	.-26     	; 0x2472 <main0+0xe>

0000248c <main1>:
    }
}
void main1(void * t)
{
    248c:	df 93       	push	r29
    248e:	cf 93       	push	r28
    2490:	00 d0       	rcall	.+0      	; 0x2492 <main1+0x6>
    2492:	cd b7       	in	r28, 0x3d	; 61
    2494:	de b7       	in	r29, 0x3e	; 62
    2496:	9a 83       	std	Y+2, r25	; 0x02
    2498:	89 83       	std	Y+1, r24	; 0x01
    while(1)
    {
        sem_lock(&sem);
    249a:	82 eb       	ldi	r24, 0xB2	; 178
    249c:	92 e0       	ldi	r25, 0x02	; 2
    249e:	0e 94 33 04 	call	0x866	; 0x866 <sem_lock>
        wait_time(100);
    24a2:	84 e6       	ldi	r24, 0x64	; 100
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <wait_time>
        sem_unlock(&sem);
    24aa:	82 eb       	ldi	r24, 0xB2	; 178
    24ac:	92 e0       	ldi	r25, 0x02	; 2
    24ae:	0e 94 60 04 	call	0x8c0	; 0x8c0 <sem_unlock>
    24b2:	f3 cf       	rjmp	.-26     	; 0x249a <main1+0xe>

000024b4 <main2>:
    }
}
void main2(void * t)
{
    24b4:	df 93       	push	r29
    24b6:	cf 93       	push	r28
    24b8:	00 d0       	rcall	.+0      	; 0x24ba <main2+0x6>
    24ba:	cd b7       	in	r28, 0x3d	; 61
    24bc:	de b7       	in	r29, 0x3e	; 62
    24be:	9a 83       	std	Y+2, r25	; 0x02
    24c0:	89 83       	std	Y+1, r24	; 0x01
    while(1)
    {
        sem_lock(&sem);
    24c2:	82 eb       	ldi	r24, 0xB2	; 178
    24c4:	92 e0       	ldi	r25, 0x02	; 2
    24c6:	0e 94 33 04 	call	0x866	; 0x866 <sem_lock>
        proc_reset_watchdog();
    24ca:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <proc_reset_watchdog>
        proc_self_stop();
    24ce:	0e 94 42 03 	call	0x684	; 0x684 <proc_self_stop>
        sem_unlock(&sem);
    24d2:	82 eb       	ldi	r24, 0xB2	; 178
    24d4:	92 e0       	ldi	r25, 0x02	; 2
    24d6:	0e 94 60 04 	call	0x8c0	; 0x8c0 <sem_unlock>
    24da:	f3 cf       	rjmp	.-26     	; 0x24c2 <main2+0xe>

000024dc <main3>:
    24dc:	df 93       	push	r29
    24de:	cf 93       	push	r28
    24e0:	00 d0       	rcall	.+0      	; 0x24e2 <main3+0x6>
    24e2:	0f 92       	push	r0
    24e4:	cd b7       	in	r28, 0x3d	; 61
    24e6:	de b7       	in	r29, 0x3e	; 62
    24e8:	9b 83       	std	Y+3, r25	; 0x03
    24ea:	8a 83       	std	Y+2, r24	; 0x02
    24ec:	19 82       	std	Y+1, r1	; 0x01
    24ee:	03 c0       	rjmp	.+6      	; 0x24f6 <main3+0x1a>
    24f0:	89 81       	ldd	r24, Y+1	; 0x01
    24f2:	8f 5f       	subi	r24, 0xFF	; 255
    24f4:	89 83       	std	Y+1, r24	; 0x01
    24f6:	89 81       	ldd	r24, Y+1	; 0x01
    24f8:	8a 30       	cpi	r24, 0x0A	; 10
    24fa:	d0 f3       	brcs	.-12     	; 0x24f0 <main3+0x14>
    24fc:	f7 cf       	rjmp	.-18     	; 0x24ec <main3+0x10>

000024fe <idle_main>:
    {
        for(unsigned char i=0;i<10;i++);
    }
}
void idle_main(void * t)
{
    24fe:	df 93       	push	r29
    2500:	cf 93       	push	r28
    2502:	00 d0       	rcall	.+0      	; 0x2504 <idle_main+0x6>
    2504:	cd b7       	in	r28, 0x3d	; 61
    2506:	de b7       	in	r29, 0x3e	; 62
    2508:	9a 83       	std	Y+2, r25	; 0x02
    250a:	89 83       	std	Y+1, r24	; 0x01
    // Insert code
    while(1)
    {
         wait_time(1000);
    250c:	88 ee       	ldi	r24, 0xE8	; 232
    250e:	93 e0       	ldi	r25, 0x03	; 3
    2510:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <wait_time>
         proc_run(&proc[2]);
    2514:	86 e5       	ldi	r24, 0x56	; 86
    2516:	92 e0       	ldi	r25, 0x02	; 2
    2518:	0e 94 d7 02 	call	0x5ae	; 0x5ae <proc_run>
    251c:	f7 cf       	rjmp	.-18     	; 0x250c <idle_main+0xe>

0000251e <main>:
    }
}

int main(void)
{
    251e:	8f 92       	push	r8
    2520:	af 92       	push	r10
    2522:	bf 92       	push	r11
    2524:	cf 92       	push	r12
    2526:	ef 92       	push	r14
    2528:	ff 92       	push	r15
    252a:	0f 93       	push	r16
    252c:	1f 93       	push	r17
    252e:	df 93       	push	r29
    2530:	cf 93       	push	r28
    2532:	cd b7       	in	r28, 0x3d	; 61
    2534:	de b7       	in	r29, 0x3e	; 62
    init_bugurt();
    2536:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <init_bugurt>

    TCCR2A = 0x02;//
    253a:	e0 eb       	ldi	r30, 0xB0	; 176
    253c:	f0 e0       	ldi	r31, 0x00	; 0
    253e:	82 e0       	ldi	r24, 0x02	; 2
    2540:	80 83       	st	Z, r24
    TCCR2B = 0x05;// prescaler=128
    2542:	e1 eb       	ldi	r30, 0xB1	; 177
    2544:	f0 e0       	ldi	r31, 0x00	; 0
    2546:	85 e0       	ldi	r24, 0x05	; 5
    2548:	80 83       	st	Z, r24
    OCR2A  = 124;
    254a:	e3 eb       	ldi	r30, 0xB3	; 179
    254c:	f0 e0       	ldi	r31, 0x00	; 0
    254e:	8c e7       	ldi	r24, 0x7C	; 124
    2550:	80 83       	st	Z, r24
    OCR2B  = 0x00;
    2552:	e4 eb       	ldi	r30, 0xB4	; 180
    2554:	f0 e0       	ldi	r31, 0x00	; 0
    2556:	10 82       	st	Z, r1
    TIMSK2 = 0x00; // shceduler not started
    2558:	e0 e7       	ldi	r30, 0x70	; 112
    255a:	f0 e0       	ldi	r31, 0x00	; 0
    255c:	10 82       	st	Z, r1
    TIFR2  = 0x00;
    255e:	e7 e3       	ldi	r30, 0x37	; 55
    2560:	f0 e0       	ldi	r31, 0x00	; 0
    2562:	10 82       	st	Z, r1

    EICRA = 0x08; //falling edge
    2564:	e9 e6       	ldi	r30, 0x69	; 105
    2566:	f0 e0       	ldi	r31, 0x00	; 0
    2568:	88 e0       	ldi	r24, 0x08	; 8
    256a:	80 83       	st	Z, r24
    EIMSK = 0x00; //resched generates int1, mask 0x02
    256c:	ed e3       	ldi	r30, 0x3D	; 61
    256e:	f0 e0       	ldi	r31, 0x00	; 0
    2570:	10 82       	st	Z, r1

    DDRB = 0x3F;
    2572:	e4 e2       	ldi	r30, 0x24	; 36
    2574:	f0 e0       	ldi	r31, 0x00	; 0
    2576:	8f e3       	ldi	r24, 0x3F	; 63
    2578:	80 83       	st	Z, r24
    PORTB = 0x00;
    257a:	e5 e2       	ldi	r30, 0x25	; 37
    257c:	f0 e0       	ldi	r31, 0x00	; 0
    257e:	10 82       	st	Z, r1
    DDRC = 0x3F;
    2580:	e7 e2       	ldi	r30, 0x27	; 39
    2582:	f0 e0       	ldi	r31, 0x00	; 0
    2584:	8f e3       	ldi	r24, 0x3F	; 63
    2586:	80 83       	st	Z, r24
    PORTC = 0x00;
    2588:	e8 e2       	ldi	r30, 0x28	; 40
    258a:	f0 e0       	ldi	r31, 0x00	; 0
    258c:	10 82       	st	Z, r1
    DDRD = 0xFE;
    258e:	ea e2       	ldi	r30, 0x2A	; 42
    2590:	f0 e0       	ldi	r31, 0x00	; 0
    2592:	8e ef       	ldi	r24, 0xFE	; 254
    2594:	80 83       	st	Z, r24
    PORTD = 0x00;
    2596:	eb e2       	ldi	r30, 0x2B	; 43
    2598:	f0 e0       	ldi	r31, 0x00	; 0
    259a:	10 82       	st	Z, r1

    G1_on();
    259c:	ab e2       	ldi	r26, 0x2B	; 43
    259e:	b0 e0       	ldi	r27, 0x00	; 0
    25a0:	eb e2       	ldi	r30, 0x2B	; 43
    25a2:	f0 e0       	ldi	r31, 0x00	; 0
    25a4:	80 81       	ld	r24, Z
    25a6:	80 61       	ori	r24, 0x10	; 16
    25a8:	8c 93       	st	X, r24
    G2_on();
    25aa:	ab e2       	ldi	r26, 0x2B	; 43
    25ac:	b0 e0       	ldi	r27, 0x00	; 0
    25ae:	eb e2       	ldi	r30, 0x2B	; 43
    25b0:	f0 e0       	ldi	r31, 0x00	; 0
    25b2:	80 81       	ld	r24, Z
    25b4:	88 60       	ori	r24, 0x08	; 8
    25b6:	8c 93       	st	X, r24
    R3_on();
    25b8:	ab e2       	ldi	r26, 0x2B	; 43
    25ba:	b0 e0       	ldi	r27, 0x00	; 0
    25bc:	eb e2       	ldi	r30, 0x2B	; 43
    25be:	f0 e0       	ldi	r31, 0x00	; 0
    25c0:	80 81       	ld	r24, Z
    25c2:	80 62       	ori	r24, 0x20	; 32
    25c4:	8c 93       	st	X, r24

    proc_init_isr(&proc[0], main0, blink_1, blink_1, 0, &stack[0][127], 1, 2, 0);
    25c6:	85 ec       	ldi	r24, 0xC5	; 197
    25c8:	92 e0       	ldi	r25, 0x02	; 2
    25ca:	dc 01       	movw	r26, r24
    25cc:	a1 58       	subi	r26, 0x81	; 129
    25ce:	bf 4f       	sbci	r27, 0xFF	; 255
    25d0:	8a ef       	ldi	r24, 0xFA	; 250
    25d2:	91 e0       	ldi	r25, 0x01	; 1
    25d4:	22 e3       	ldi	r18, 0x32	; 50
    25d6:	32 e1       	ldi	r19, 0x12	; 18
    25d8:	4e eb       	ldi	r20, 0xBE	; 190
    25da:	51 e1       	ldi	r21, 0x11	; 17
    25dc:	ee eb       	ldi	r30, 0xBE	; 190
    25de:	f1 e1       	ldi	r31, 0x11	; 17
    25e0:	b9 01       	movw	r22, r18
    25e2:	9f 01       	movw	r18, r30
    25e4:	00 e0       	ldi	r16, 0x00	; 0
    25e6:	10 e0       	ldi	r17, 0x00	; 0
    25e8:	7d 01       	movw	r14, r26
    25ea:	cc 24       	eor	r12, r12
    25ec:	c3 94       	inc	r12
    25ee:	aa 24       	eor	r10, r10
    25f0:	bb 24       	eor	r11, r11
    25f2:	68 94       	set
    25f4:	a1 f8       	bld	r10, 1
    25f6:	88 24       	eor	r8, r8
    25f8:	0e 94 a4 0b 	call	0x1748	; 0x1748 <proc_init_isr>
    proc_init_isr(&proc[1], main1, blink_2, blink_2, 0, &stack[1][127], 2, 3, 0);
    25fc:	85 ec       	ldi	r24, 0xC5	; 197
    25fe:	92 e0       	ldi	r25, 0x02	; 2
    2600:	dc 01       	movw	r26, r24
    2602:	a1 50       	subi	r26, 0x01	; 1
    2604:	bf 4f       	sbci	r27, 0xFF	; 255
    2606:	88 e2       	ldi	r24, 0x28	; 40
    2608:	92 e0       	ldi	r25, 0x02	; 2
    260a:	26 e4       	ldi	r18, 0x46	; 70
    260c:	32 e1       	ldi	r19, 0x12	; 18
    260e:	42 ed       	ldi	r20, 0xD2	; 210
    2610:	51 e1       	ldi	r21, 0x11	; 17
    2612:	e2 ed       	ldi	r30, 0xD2	; 210
    2614:	f1 e1       	ldi	r31, 0x11	; 17
    2616:	b9 01       	movw	r22, r18
    2618:	9f 01       	movw	r18, r30
    261a:	00 e0       	ldi	r16, 0x00	; 0
    261c:	10 e0       	ldi	r17, 0x00	; 0
    261e:	7d 01       	movw	r14, r26
    2620:	cc 24       	eor	r12, r12
    2622:	68 94       	set
    2624:	c1 f8       	bld	r12, 1
    2626:	0f 2e       	mov	r0, r31
    2628:	f3 e0       	ldi	r31, 0x03	; 3
    262a:	af 2e       	mov	r10, r31
    262c:	bb 24       	eor	r11, r11
    262e:	f0 2d       	mov	r31, r0
    2630:	88 24       	eor	r8, r8
    2632:	0e 94 a4 0b 	call	0x1748	; 0x1748 <proc_init_isr>
    proc_init_isr(&proc[2], main2, blink_3, blink_3, 0, &stack[2][127], 2, 4, 1);// Типа реального времени
    2636:	85 ec       	ldi	r24, 0xC5	; 197
    2638:	92 e0       	ldi	r25, 0x02	; 2
    263a:	dc 01       	movw	r26, r24
    263c:	a1 58       	subi	r26, 0x81	; 129
    263e:	be 4f       	sbci	r27, 0xFE	; 254
    2640:	86 e5       	ldi	r24, 0x56	; 86
    2642:	92 e0       	ldi	r25, 0x02	; 2
    2644:	2a e5       	ldi	r18, 0x5A	; 90
    2646:	32 e1       	ldi	r19, 0x12	; 18
    2648:	46 ee       	ldi	r20, 0xE6	; 230
    264a:	51 e1       	ldi	r21, 0x11	; 17
    264c:	e6 ee       	ldi	r30, 0xE6	; 230
    264e:	f1 e1       	ldi	r31, 0x11	; 17
    2650:	b9 01       	movw	r22, r18
    2652:	9f 01       	movw	r18, r30
    2654:	00 e0       	ldi	r16, 0x00	; 0
    2656:	10 e0       	ldi	r17, 0x00	; 0
    2658:	7d 01       	movw	r14, r26
    265a:	cc 24       	eor	r12, r12
    265c:	68 94       	set
    265e:	c1 f8       	bld	r12, 1
    2660:	aa 24       	eor	r10, r10
    2662:	bb 24       	eor	r11, r11
    2664:	68 94       	set
    2666:	a2 f8       	bld	r10, 2
    2668:	88 24       	eor	r8, r8
    266a:	83 94       	inc	r8
    266c:	0e 94 a4 0b 	call	0x1748	; 0x1748 <proc_init_isr>
    proc_init_isr(&proc[3], main3, blink_4, blink_4, 0, &stack[3][127], 3, 4, 0);
    2670:	85 ec       	ldi	r24, 0xC5	; 197
    2672:	92 e0       	ldi	r25, 0x02	; 2
    2674:	dc 01       	movw	r26, r24
    2676:	a1 50       	subi	r26, 0x01	; 1
    2678:	be 4f       	sbci	r27, 0xFE	; 254
    267a:	84 e8       	ldi	r24, 0x84	; 132
    267c:	92 e0       	ldi	r25, 0x02	; 2
    267e:	2e e6       	ldi	r18, 0x6E	; 110
    2680:	32 e1       	ldi	r19, 0x12	; 18
    2682:	4a ef       	ldi	r20, 0xFA	; 250
    2684:	51 e1       	ldi	r21, 0x11	; 17
    2686:	ea ef       	ldi	r30, 0xFA	; 250
    2688:	f1 e1       	ldi	r31, 0x11	; 17
    268a:	b9 01       	movw	r22, r18
    268c:	9f 01       	movw	r18, r30
    268e:	00 e0       	ldi	r16, 0x00	; 0
    2690:	10 e0       	ldi	r17, 0x00	; 0
    2692:	7d 01       	movw	r14, r26
    2694:	0f 2e       	mov	r0, r31
    2696:	f3 e0       	ldi	r31, 0x03	; 3
    2698:	cf 2e       	mov	r12, r31
    269a:	f0 2d       	mov	r31, r0
    269c:	aa 24       	eor	r10, r10
    269e:	bb 24       	eor	r11, r11
    26a0:	68 94       	set
    26a2:	a2 f8       	bld	r10, 2
    26a4:	88 24       	eor	r8, r8
    26a6:	0e 94 a4 0b 	call	0x1748	; 0x1748 <proc_init_isr>

    kernel.idle.rs_hook = blink_12;
    26aa:	8e e0       	ldi	r24, 0x0E	; 14
    26ac:	92 e1       	ldi	r25, 0x12	; 18
    26ae:	90 93 ef 01 	sts	0x01EF, r25
    26b2:	80 93 ee 01 	sts	0x01EE, r24
    kernel.idle.sv_hook = blink_12;
    26b6:	8e e0       	ldi	r24, 0x0E	; 14
    26b8:	92 e1       	ldi	r25, 0x12	; 18
    26ba:	90 93 ed 01 	sts	0x01ED, r25
    26be:	80 93 ec 01 	sts	0x01EC, r24

    proc_run_isr(&proc[0]);
    26c2:	8a ef       	ldi	r24, 0xFA	; 250
    26c4:	91 e0       	ldi	r25, 0x01	; 1
    26c6:	0e 94 4a 0c 	call	0x1894	; 0x1894 <proc_run_isr>
    proc_run_isr(&proc[1]);
    26ca:	88 e2       	ldi	r24, 0x28	; 40
    26cc:	92 e0       	ldi	r25, 0x02	; 2
    26ce:	0e 94 4a 0c 	call	0x1894	; 0x1894 <proc_run_isr>
    proc_run_isr(&proc[2]);
    26d2:	86 e5       	ldi	r24, 0x56	; 86
    26d4:	92 e0       	ldi	r25, 0x02	; 2
    26d6:	0e 94 4a 0c 	call	0x1894	; 0x1894 <proc_run_isr>
    proc_run_isr(&proc[3]);
    26da:	84 e8       	ldi	r24, 0x84	; 132
    26dc:	92 e0       	ldi	r25, 0x02	; 2
    26de:	0e 94 4a 0c 	call	0x1894	; 0x1894 <proc_run_isr>

    sem_init_isr(&sem,1);
    26e2:	82 eb       	ldi	r24, 0xB2	; 178
    26e4:	92 e0       	ldi	r25, 0x02	; 2
    26e6:	61 e0       	ldi	r22, 0x01	; 1
    26e8:	70 e0       	ldi	r23, 0x00	; 0
    26ea:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <sem_init_isr>

    start_bugurt();
    26ee:	0e 94 a0 01 	call	0x340	; 0x340 <start_bugurt>
    return 0;
    26f2:	80 e0       	ldi	r24, 0x00	; 0
    26f4:	90 e0       	ldi	r25, 0x00	; 0
}
    26f6:	cf 91       	pop	r28
    26f8:	df 91       	pop	r29
    26fa:	1f 91       	pop	r17
    26fc:	0f 91       	pop	r16
    26fe:	ff 90       	pop	r15
    2700:	ef 90       	pop	r14
    2702:	cf 90       	pop	r12
    2704:	bf 90       	pop	r11
    2706:	af 90       	pop	r10
    2708:	8f 90       	pop	r8
    270a:	08 95       	ret

0000270c <_exit>:
    270c:	f8 94       	cli

0000270e <__stop_program>:
    270e:	ff cf       	rjmp	.-2      	; 0x270e <__stop_program>
