
bin/Debug/arduino328-test-sem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000026ee  00002782  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000026ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003c3  00800102  00800102  00002784  2**0
                  ALLOC
  3 .stab         000071e8  00000000  00000000  00002784  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003675  00000000  00000000  0000996c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       8:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__vector_2>
       c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 2a 01 	jmp	0x254	; 0x254 <__vector_7>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      54:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

00000068 <syscall_routine>:
      68:	46 02 8f 02 c7 02 e1 02 fb 02 20 03 83 03 94 03     F......... .....
      78:	a4 03 b4 03 c4 03 d4 03 eb 03 2d 04 5b 04 71 04     ..........-.[.q.
      88:	8b 04 a5 04                                         ....

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ee ee       	ldi	r30, 0xEE	; 238
      a0:	f6 e2       	ldi	r31, 0x26	; 38
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <.do_copy_data_start>

000000a4 <.do_copy_data_loop>:
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0

000000a8 <.do_copy_data_start>:
      a8:	a2 30       	cpi	r26, 0x02	; 2
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <.do_copy_data_loop>

000000ae <__do_clear_bss>:
      ae:	14 e0       	ldi	r17, 0x04	; 4
      b0:	a2 e0       	ldi	r26, 0x02	; 2
      b2:	b1 e0       	ldi	r27, 0x01	; 1
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	a5 3c       	cpi	r26, 0xC5	; 197
      ba:	b1 07       	cpc	r27, r17
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 7e 12 	call	0x24fc	; 0x24fc <main>
      c2:	0c 94 75 13 	jmp	0x26ea	; 0x26ea <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <osbme_store_context>:
      ca:	2f 92       	push	r2
      cc:	2f b6       	in	r2, 0x3f	; 63
      ce:	2f 92       	push	r2
      d0:	3f 92       	push	r3
      d2:	4f 92       	push	r4
      d4:	5f 92       	push	r5
      d6:	6f 92       	push	r6
      d8:	7f 92       	push	r7
      da:	8f 92       	push	r8
      dc:	9f 92       	push	r9
      de:	af 92       	push	r10
      e0:	bf 92       	push	r11
      e2:	cf 92       	push	r12
      e4:	df 92       	push	r13
      e6:	ef 92       	push	r14
      e8:	ff 92       	push	r15
      ea:	0f 93       	push	r16
      ec:	1f 93       	push	r17
      ee:	2f 93       	push	r18
      f0:	3f 93       	push	r19
      f2:	4f 93       	push	r20
      f4:	5f 93       	push	r21
      f6:	6f 93       	push	r22
      f8:	7f 93       	push	r23
      fa:	8f 93       	push	r24
      fc:	9f 93       	push	r25
      fe:	af 93       	push	r26
     100:	bf 93       	push	r27
     102:	cf 93       	push	r28
     104:	df 93       	push	r29
     106:	ef 93       	push	r30
     108:	ff 93       	push	r31
     10a:	ed b7       	in	r30, 0x3d	; 61
     10c:	fe b7       	in	r31, 0x3e	; 62
     10e:	21 a1       	ldd	r18, Z+33	; 0x21
     110:	30 a1       	ldd	r19, Z+32	; 0x20
     112:	01 a2       	std	Z+33, r0	; 0x21
     114:	10 a2       	std	Z+32, r1	; 0x20
     116:	11 24       	eor	r1, r1
     118:	8d b7       	in	r24, 0x3d	; 61
     11a:	9e b7       	in	r25, 0x3e	; 62
     11c:	2f 93       	push	r18
     11e:	3f 93       	push	r19
     120:	08 95       	ret

00000122 <osbme_load_context>:
     122:	3f 91       	pop	r19
     124:	2f 91       	pop	r18
     126:	9e bf       	out	0x3e, r25	; 62
     128:	8d bf       	out	0x3d, r24	; 61
     12a:	fe b7       	in	r31, 0x3e	; 62
     12c:	ed b7       	in	r30, 0x3d	; 61
     12e:	10 a0       	ldd	r1, Z+32	; 0x20
     130:	01 a0       	ldd	r0, Z+33	; 0x21
     132:	30 a3       	std	Z+32, r19	; 0x20
     134:	21 a3       	std	Z+33, r18	; 0x21
     136:	ff 91       	pop	r31
     138:	ef 91       	pop	r30
     13a:	df 91       	pop	r29
     13c:	cf 91       	pop	r28
     13e:	bf 91       	pop	r27
     140:	af 91       	pop	r26
     142:	9f 91       	pop	r25
     144:	8f 91       	pop	r24
     146:	7f 91       	pop	r23
     148:	6f 91       	pop	r22
     14a:	5f 91       	pop	r21
     14c:	4f 91       	pop	r20
     14e:	3f 91       	pop	r19
     150:	2f 91       	pop	r18
     152:	1f 91       	pop	r17
     154:	0f 91       	pop	r16
     156:	ff 90       	pop	r15
     158:	ef 90       	pop	r14
     15a:	df 90       	pop	r13
     15c:	cf 90       	pop	r12
     15e:	bf 90       	pop	r11
     160:	af 90       	pop	r10
     162:	9f 90       	pop	r9
     164:	8f 90       	pop	r8
     166:	7f 90       	pop	r7
     168:	6f 90       	pop	r6
     16a:	5f 90       	pop	r5
     16c:	4f 90       	pop	r4
     16e:	3f 90       	pop	r3
     170:	2f 90       	pop	r2
     172:	2f be       	out	0x3f, r2	; 63
     174:	2f 90       	pop	r2
     176:	08 95       	ret

00000178 <disable_interrupts>:
//Внешние функции, специфичные для AVR
extern void start_scheduler( void );
extern void stop_scheduler( void );
// Просто функции, специфичные для AVR
void disable_interrupts(void)
{
     178:	df 93       	push	r29
     17a:	cf 93       	push	r28
     17c:	cd b7       	in	r28, 0x3d	; 61
     17e:	de b7       	in	r29, 0x3e	; 62
    cli();
     180:	f8 94       	cli
}
     182:	cf 91       	pop	r28
     184:	df 91       	pop	r29
     186:	08 95       	ret

00000188 <enable_interrupts>:
void enable_interrupts(void)
{
     188:	df 93       	push	r29
     18a:	cf 93       	push	r28
     18c:	cd b7       	in	r28, 0x3d	; 61
     18e:	de b7       	in	r29, 0x3e	; 62
    sei();
     190:	78 94       	sei
}
     192:	cf 91       	pop	r28
     194:	df 91       	pop	r29
     196:	08 95       	ret

00000198 <current_proc>:

proc_t * current_proc(void)
{
     198:	df 93       	push	r29
     19a:	cf 93       	push	r28
     19c:	cd b7       	in	r28, 0x3d	; 61
     19e:	de b7       	in	r29, 0x3e	; 62
    return kernel.sched.current_proc;
     1a0:	80 91 9e 01 	lds	r24, 0x019E
     1a4:	90 91 9f 01 	lds	r25, 0x019F
}
     1a8:	cf 91       	pop	r28
     1aa:	df 91       	pop	r29
     1ac:	08 95       	ret

000001ae <proc_stack_init>:

void * proc_stack_init(stack_t * sstart, code_t code, void * arg)
{
     1ae:	df 93       	push	r29
     1b0:	cf 93       	push	r28
     1b2:	00 d0       	rcall	.+0      	; 0x1b4 <proc_stack_init+0x6>
     1b4:	00 d0       	rcall	.+0      	; 0x1b6 <proc_stack_init+0x8>
     1b6:	00 d0       	rcall	.+0      	; 0x1b8 <proc_stack_init+0xa>
     1b8:	cd b7       	in	r28, 0x3d	; 61
     1ba:	de b7       	in	r29, 0x3e	; 62
     1bc:	9a 83       	std	Y+2, r25	; 0x02
     1be:	89 83       	std	Y+1, r24	; 0x01
     1c0:	7c 83       	std	Y+4, r23	; 0x04
     1c2:	6b 83       	std	Y+3, r22	; 0x03
     1c4:	5e 83       	std	Y+6, r21	; 0x06
     1c6:	4d 83       	std	Y+5, r20	; 0x05
    return osbme_init_stack( (void *)sstart, (osbme_code_t)proc_run_wrapper, (void *)arg );
     1c8:	48 e5       	ldi	r20, 0x58	; 88
     1ca:	53 e0       	ldi	r21, 0x03	; 3
     1cc:	89 81       	ldd	r24, Y+1	; 0x01
     1ce:	9a 81       	ldd	r25, Y+2	; 0x02
     1d0:	2d 81       	ldd	r18, Y+5	; 0x05
     1d2:	3e 81       	ldd	r19, Y+6	; 0x06
     1d4:	ba 01       	movw	r22, r20
     1d6:	a9 01       	movw	r20, r18
     1d8:	0e 94 b5 04 	call	0x96a	; 0x96a <osbme_init_stack>
}
     1dc:	26 96       	adiw	r28, 0x06	; 6
     1de:	0f b6       	in	r0, 0x3f	; 63
     1e0:	f8 94       	cli
     1e2:	de bf       	out	0x3e, r29	; 62
     1e4:	0f be       	out	0x3f, r0	; 63
     1e6:	cd bf       	out	0x3d, r28	; 61
     1e8:	cf 91       	pop	r28
     1ea:	df 91       	pop	r29
     1ec:	08 95       	ret

000001ee <resched>:
//Через этот указатель будет вызываться обработчик прерывания
void (*kernel_isr)(void);

// Функция перепланировки
void resched(void)
{
     1ee:	df 93       	push	r29
     1f0:	cf 93       	push	r28
     1f2:	cd b7       	in	r28, 0x3d	; 61
     1f4:	de b7       	in	r29, 0x3e	; 62
    resched_flag = (bool_t)1;
     1f6:	81 e0       	ldi	r24, 0x01	; 1
     1f8:	80 93 00 01 	sts	0x0100, r24
}
     1fc:	cf 91       	pop	r28
     1fe:	df 91       	pop	r29
     200:	08 95       	ret

00000202 <kernel_process_switch>:

__attribute__((naked)) void kernel_process_switch(void)
{
    //Сразу же после обработки отложенных прерываний передаем управление процессу
    kernel_sp = osbme_store_context();
     202:	0e 94 65 00 	call	0xca	; 0xca <osbme_store_context>
     206:	90 93 9d 01 	sts	0x019D, r25
     20a:	80 93 9c 01 	sts	0x019C, r24
    osbme_load_context( proc_sp );
     20e:	80 91 9a 01 	lds	r24, 0x019A
     212:	90 91 9b 01 	lds	r25, 0x019B
     216:	0e 94 91 00 	call	0x122	; 0x122 <osbme_load_context>
    __asm__ __volatile__("reti"::);/// Дада, именно reti, мы же типа прерывания счас обрабатывали
     21a:	18 95       	reti

0000021c <kernel_thread>:
    osbme_load_context( kernel_sp );
    __asm__ __volatile__("ret"::);
}
///================================================================
void kernel_thread(void)
{
     21c:	df 93       	push	r29
     21e:	cf 93       	push	r28
     220:	cd b7       	in	r28, 0x3d	; 61
     222:	de b7       	in	r29, 0x3e	; 62
    while(1)
    {
        // Если надо перепланировать - перепланируем
        if( resched_flag != (bool_t)0 )
     224:	80 91 00 01 	lds	r24, 0x0100
     228:	88 23       	and	r24, r24
     22a:	61 f0       	breq	.+24     	; 0x244 <kernel_thread+0x28>
        {
            resched_flag = (bool_t)0;
     22c:	10 92 00 01 	sts	0x0100, r1
            proc_sp = sched_reschedule( proc_sp );
     230:	80 91 9a 01 	lds	r24, 0x019A
     234:	90 91 9b 01 	lds	r25, 0x019B
     238:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <sched_reschedule>
     23c:	90 93 9b 01 	sts	0x019B, r25
     240:	80 93 9a 01 	sts	0x019A, r24
        }
        /// Прямая передача управления от ядра к процессу, прерывания запрещены
        kernel_process_switch();//В результате выполнения этого прерывания будут разрешены
     244:	0e 94 01 01 	call	0x202	; 0x202 <kernel_process_switch>
        /// Сюда можно попасть только из прерывания, либо из процесса, при этом прерывания опять таки запрещены
        // Обработка прерывания
        kernel_isr();
     248:	e0 91 98 01 	lds	r30, 0x0198
     24c:	f0 91 99 01 	lds	r31, 0x0199
     250:	09 95       	icall
     252:	e8 cf       	rjmp	.-48     	; 0x224 <kernel_thread+0x8>

00000254 <__vector_7>:
    }
}

// А вот и первое определение обработчика прерывания
BUGURT_INTERRUPT(SYSTEM_TIMER_ISR)
     254:	0e 94 65 00 	call	0xca	; 0xca <osbme_store_context>
     258:	90 93 9b 01 	sts	0x019B, r25
     25c:	80 93 9a 01 	sts	0x019A, r24
     260:	8d e3       	ldi	r24, 0x3D	; 61
     262:	91 e0       	ldi	r25, 0x01	; 1
     264:	90 93 99 01 	sts	0x0199, r25
     268:	80 93 98 01 	sts	0x0198, r24
     26c:	80 91 9c 01 	lds	r24, 0x019C
     270:	90 91 9d 01 	lds	r25, 0x019D
     274:	0e 94 91 00 	call	0x122	; 0x122 <osbme_load_context>
     278:	08 95       	ret

0000027a <__vector_7_func>:
{
     27a:	df 93       	push	r29
     27c:	cf 93       	push	r28
     27e:	cd b7       	in	r28, 0x3d	; 61
     280:	de b7       	in	r29, 0x3e	; 62
    kernel.timer++;
     282:	80 91 f8 01 	lds	r24, 0x01F8
     286:	90 91 f9 01 	lds	r25, 0x01F9
     28a:	01 96       	adiw	r24, 0x01	; 1
     28c:	90 93 f9 01 	sts	0x01F9, r25
     290:	80 93 f8 01 	sts	0x01F8, r24
    proc_sp = sched_schedule( proc_sp );
     294:	80 91 9a 01 	lds	r24, 0x019A
     298:	90 91 9b 01 	lds	r25, 0x019B
     29c:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <sched_schedule>
     2a0:	90 93 9b 01 	sts	0x019B, r25
     2a4:	80 93 9a 01 	sts	0x019A, r24
}
     2a8:	cf 91       	pop	r28
     2aa:	df 91       	pop	r29
     2ac:	08 95       	ret

000002ae <init_bugurt>:

/***************************************************************************************************************/
// Функции общего пользования

void init_bugurt(void)
{
     2ae:	df 93       	push	r29
     2b0:	cf 93       	push	r28
     2b2:	cd b7       	in	r28, 0x3d	; 61
     2b4:	de b7       	in	r29, 0x3e	; 62
    cli();
     2b6:	f8 94       	cli
    kernel_init();
     2b8:	0e 94 b7 09 	call	0x136e	; 0x136e <kernel_init>
    proc_sp = osbme_init_stack( &idle_stack[CONFIG_IDLE_STACK_SIZE-1], idle_main, 0);
     2bc:	87 e9       	ldi	r24, 0x97	; 151
     2be:	91 e0       	ldi	r25, 0x01	; 1
     2c0:	2e e6       	ldi	r18, 0x6E	; 110
     2c2:	32 e1       	ldi	r19, 0x12	; 18
     2c4:	b9 01       	movw	r22, r18
     2c6:	40 e0       	ldi	r20, 0x00	; 0
     2c8:	50 e0       	ldi	r21, 0x00	; 0
     2ca:	0e 94 b5 04 	call	0x96a	; 0x96a <osbme_init_stack>
     2ce:	90 93 9b 01 	sts	0x019B, r25
     2d2:	80 93 9a 01 	sts	0x019A, r24
    kernel.idle.spointer = proc_sp;
     2d6:	80 91 9a 01 	lds	r24, 0x019A
     2da:	90 91 9b 01 	lds	r25, 0x019B
     2de:	90 93 f5 01 	sts	0x01F5, r25
     2e2:	80 93 f4 01 	sts	0x01F4, r24
    kernel.sched.nested_crit_sec = (count_t)1;
     2e6:	81 e0       	ldi	r24, 0x01	; 1
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	90 93 c7 01 	sts	0x01C7, r25
     2ee:	80 93 c6 01 	sts	0x01C6, r24
}
     2f2:	cf 91       	pop	r28
     2f4:	df 91       	pop	r29
     2f6:	08 95       	ret

000002f8 <start_bugurt>:
void start_bugurt(void)
{
     2f8:	df 93       	push	r29
     2fa:	cf 93       	push	r28
     2fc:	cd b7       	in	r28, 0x3d	; 61
     2fe:	de b7       	in	r29, 0x3e	; 62
    start_scheduler();
     300:	0e 94 8b 11 	call	0x2316	; 0x2316 <start_scheduler>
    kernel.sched.nested_crit_sec = (count_t)0;
     304:	10 92 c7 01 	sts	0x01C7, r1
     308:	10 92 c6 01 	sts	0x01C6, r1
    kernel_thread();
     30c:	0e 94 0e 01 	call	0x21c	; 0x21c <kernel_thread>
}
     310:	cf 91       	pop	r28
     312:	df 91       	pop	r29
     314:	08 95       	ret

00000316 <do_syscall>:
    scall_mutex_try_lock,
    scall_mutex_unlock
};

void do_syscall(void)
{
     316:	df 93       	push	r29
     318:	cf 93       	push	r28
     31a:	00 d0       	rcall	.+0      	; 0x31c <do_syscall+0x6>
     31c:	00 d0       	rcall	.+0      	; 0x31e <do_syscall+0x8>
     31e:	00 d0       	rcall	.+0      	; 0x320 <do_syscall+0xa>
     320:	cd b7       	in	r28, 0x3d	; 61
     322:	de b7       	in	r29, 0x3e	; 62
    if( syscall_num != (unsigned char)0 )
     324:	80 91 02 01 	lds	r24, 0x0102
     328:	88 23       	and	r24, r24
     32a:	01 f1       	breq	.+64     	; 0x36c <do_syscall+0x56>
    {
        code_t syscall_func;
        syscall_func = (code_t)pgm_read_word(syscall_routine + syscall_num);
     32c:	80 91 02 01 	lds	r24, 0x0102
     330:	88 2f       	mov	r24, r24
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	88 0f       	add	r24, r24
     336:	99 1f       	adc	r25, r25
     338:	88 59       	subi	r24, 0x98	; 152
     33a:	9f 4f       	sbci	r25, 0xFF	; 255
     33c:	9c 83       	std	Y+4, r25	; 0x04
     33e:	8b 83       	std	Y+3, r24	; 0x03
     340:	8b 81       	ldd	r24, Y+3	; 0x03
     342:	9c 81       	ldd	r25, Y+4	; 0x04
     344:	fc 01       	movw	r30, r24
     346:	85 91       	lpm	r24, Z+
     348:	94 91       	lpm	r25, Z+
     34a:	9a 83       	std	Y+2, r25	; 0x02
     34c:	89 83       	std	Y+1, r24	; 0x01
     34e:	fc 83       	std	Y+4, r31	; 0x04
     350:	eb 83       	std	Y+3, r30	; 0x03
     352:	89 81       	ldd	r24, Y+1	; 0x01
     354:	9a 81       	ldd	r25, Y+2	; 0x02
     356:	9e 83       	std	Y+6, r25	; 0x06
     358:	8d 83       	std	Y+5, r24	; 0x05
        syscall_func(syscall_arg);
     35a:	80 91 03 01 	lds	r24, 0x0103
     35e:	90 91 04 01 	lds	r25, 0x0104
     362:	ed 81       	ldd	r30, Y+5	; 0x05
     364:	fe 81       	ldd	r31, Y+6	; 0x06
     366:	09 95       	icall
        syscall_num = (unsigned char)0;
     368:	10 92 02 01 	sts	0x0102, r1
    }
}
     36c:	26 96       	adiw	r28, 0x06	; 6
     36e:	0f b6       	in	r0, 0x3f	; 63
     370:	f8 94       	cli
     372:	de bf       	out	0x3e, r29	; 62
     374:	0f be       	out	0x3f, r0	; 63
     376:	cd bf       	out	0x3d, r28	; 61
     378:	cf 91       	pop	r28
     37a:	df 91       	pop	r29
     37c:	08 95       	ret

0000037e <__vector_2>:
{
    unsigned char num;
    void * arg;
} syscall_data_t;

BUGURT_INTERRUPT(SYSCALL_ISR)
     37e:	0e 94 65 00 	call	0xca	; 0xca <osbme_store_context>
     382:	90 93 9b 01 	sts	0x019B, r25
     386:	80 93 9a 01 	sts	0x019A, r24
     38a:	82 ed       	ldi	r24, 0xD2	; 210
     38c:	91 e0       	ldi	r25, 0x01	; 1
     38e:	90 93 99 01 	sts	0x0199, r25
     392:	80 93 98 01 	sts	0x0198, r24
     396:	80 91 9c 01 	lds	r24, 0x019C
     39a:	90 91 9d 01 	lds	r25, 0x019D
     39e:	0e 94 91 00 	call	0x122	; 0x122 <osbme_load_context>
     3a2:	08 95       	ret

000003a4 <__vector_2_func>:
{
     3a4:	df 93       	push	r29
     3a6:	cf 93       	push	r28
     3a8:	00 d0       	rcall	.+0      	; 0x3aa <__vector_2_func+0x6>
     3aa:	00 d0       	rcall	.+0      	; 0x3ac <__vector_2_func+0x8>
     3ac:	cd b7       	in	r28, 0x3d	; 61
     3ae:	de b7       	in	r29, 0x3e	; 62
    unsigned char * tos;
    unsigned short temp;
    /// Извлечение syscall_num и syscall_arg из стека процесса
    tos = (unsigned char *)proc_sp + PROC_STACK_OFFSET;
     3b0:	80 91 9a 01 	lds	r24, 0x019A
     3b4:	90 91 9b 01 	lds	r25, 0x019B
     3b8:	07 96       	adiw	r24, 0x07	; 7
     3ba:	9c 83       	std	Y+4, r25	; 0x04
     3bc:	8b 83       	std	Y+3, r24	; 0x03
    temp = (unsigned short)*tos++;
     3be:	eb 81       	ldd	r30, Y+3	; 0x03
     3c0:	fc 81       	ldd	r31, Y+4	; 0x04
     3c2:	80 81       	ld	r24, Z
     3c4:	88 2f       	mov	r24, r24
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	9a 83       	std	Y+2, r25	; 0x02
     3ca:	89 83       	std	Y+1, r24	; 0x01
     3cc:	8b 81       	ldd	r24, Y+3	; 0x03
     3ce:	9c 81       	ldd	r25, Y+4	; 0x04
     3d0:	01 96       	adiw	r24, 0x01	; 1
     3d2:	9c 83       	std	Y+4, r25	; 0x04
     3d4:	8b 83       	std	Y+3, r24	; 0x03
    temp <<= 8;
     3d6:	89 81       	ldd	r24, Y+1	; 0x01
     3d8:	9a 81       	ldd	r25, Y+2	; 0x02
     3da:	98 2f       	mov	r25, r24
     3dc:	88 27       	eor	r24, r24
     3de:	9a 83       	std	Y+2, r25	; 0x02
     3e0:	89 83       	std	Y+1, r24	; 0x01
    temp |= (unsigned short)*tos;
     3e2:	eb 81       	ldd	r30, Y+3	; 0x03
     3e4:	fc 81       	ldd	r31, Y+4	; 0x04
     3e6:	80 81       	ld	r24, Z
     3e8:	28 2f       	mov	r18, r24
     3ea:	30 e0       	ldi	r19, 0x00	; 0
     3ec:	89 81       	ldd	r24, Y+1	; 0x01
     3ee:	9a 81       	ldd	r25, Y+2	; 0x02
     3f0:	82 2b       	or	r24, r18
     3f2:	93 2b       	or	r25, r19
     3f4:	9a 83       	std	Y+2, r25	; 0x02
     3f6:	89 83       	std	Y+1, r24	; 0x01

    syscall_num = ((syscall_data_t *)temp)->num;
     3f8:	e9 81       	ldd	r30, Y+1	; 0x01
     3fa:	fa 81       	ldd	r31, Y+2	; 0x02
     3fc:	80 81       	ld	r24, Z
     3fe:	80 93 02 01 	sts	0x0102, r24
    syscall_arg = ((syscall_data_t *)temp)->arg;
     402:	e9 81       	ldd	r30, Y+1	; 0x01
     404:	fa 81       	ldd	r31, Y+2	; 0x02
     406:	81 81       	ldd	r24, Z+1	; 0x01
     408:	92 81       	ldd	r25, Z+2	; 0x02
     40a:	90 93 04 01 	sts	0x0104, r25
     40e:	80 93 03 01 	sts	0x0103, r24

    do_syscall();
     412:	0e 94 8b 01 	call	0x316	; 0x316 <do_syscall>
}
     416:	0f 90       	pop	r0
     418:	0f 90       	pop	r0
     41a:	0f 90       	pop	r0
     41c:	0f 90       	pop	r0
     41e:	cf 91       	pop	r28
     420:	df 91       	pop	r29
     422:	08 95       	ret

00000424 <_syscall>:

syscall_data_t * _syscall( syscall_data_t * arg )
{
     424:	df 93       	push	r29
     426:	cf 93       	push	r28
     428:	00 d0       	rcall	.+0      	; 0x42a <_syscall+0x6>
     42a:	cd b7       	in	r28, 0x3d	; 61
     42c:	de b7       	in	r29, 0x3e	; 62
     42e:	9a 83       	std	Y+2, r25	; 0x02
     430:	89 83       	std	Y+1, r24	; 0x01
    cli();
     432:	f8 94       	cli
    raise_syscall_interrupt();
     434:	0e 94 68 11 	call	0x22d0	; 0x22d0 <raise_syscall_interrupt>
    sei();
     438:	78 94       	sei
    return arg;
     43a:	89 81       	ldd	r24, Y+1	; 0x01
     43c:	9a 81       	ldd	r25, Y+2	; 0x02
}
     43e:	0f 90       	pop	r0
     440:	0f 90       	pop	r0
     442:	cf 91       	pop	r28
     444:	df 91       	pop	r29
     446:	08 95       	ret

00000448 <syscall>:

static syscall_data_t scdata;
void syscall( unsigned char num, void * arg )
{
     448:	df 93       	push	r29
     44a:	cf 93       	push	r28
     44c:	00 d0       	rcall	.+0      	; 0x44e <syscall+0x6>
     44e:	0f 92       	push	r0
     450:	cd b7       	in	r28, 0x3d	; 61
     452:	de b7       	in	r29, 0x3e	; 62
     454:	89 83       	std	Y+1, r24	; 0x01
     456:	7b 83       	std	Y+3, r23	; 0x03
     458:	6a 83       	std	Y+2, r22	; 0x02
     scdata.num = num;
     45a:	89 81       	ldd	r24, Y+1	; 0x01
     45c:	80 93 15 01 	sts	0x0115, r24
     scdata.arg = arg;
     460:	8a 81       	ldd	r24, Y+2	; 0x02
     462:	9b 81       	ldd	r25, Y+3	; 0x03
     464:	90 93 17 01 	sts	0x0117, r25
     468:	80 93 16 01 	sts	0x0116, r24
     _syscall( &scdata );
     46c:	85 e1       	ldi	r24, 0x15	; 21
     46e:	91 e0       	ldi	r25, 0x01	; 1
     470:	0e 94 12 02 	call	0x424	; 0x424 <_syscall>
	...
     SYSCALL_DELLAY();
}
     480:	0f 90       	pop	r0
     482:	0f 90       	pop	r0
     484:	0f 90       	pop	r0
     486:	cf 91       	pop	r28
     488:	df 91       	pop	r29
     48a:	08 95       	ret

0000048c <scall_proc_init>:
///                 ОБРАБОТЧИКИ СИСТЕМНЫХ ВЫЗОВОВ
///=================================================================
///                   Управление процессами
//0
void scall_proc_init( void * arg )
{
     48c:	8f 92       	push	r8
     48e:	af 92       	push	r10
     490:	bf 92       	push	r11
     492:	cf 92       	push	r12
     494:	df 92       	push	r13
     496:	ef 92       	push	r14
     498:	ff 92       	push	r15
     49a:	0f 93       	push	r16
     49c:	1f 93       	push	r17
     49e:	df 93       	push	r29
     4a0:	cf 93       	push	r28
     4a2:	00 d0       	rcall	.+0      	; 0x4a4 <scall_proc_init+0x18>
     4a4:	cd b7       	in	r28, 0x3d	; 61
     4a6:	de b7       	in	r29, 0x3e	; 62
     4a8:	9a 83       	std	Y+2, r25	; 0x02
     4aa:	89 83       	std	Y+1, r24	; 0x01
    proc_init_isr(
     4ac:	e9 81       	ldd	r30, Y+1	; 0x01
     4ae:	fa 81       	ldd	r31, Y+2	; 0x02
     4b0:	80 81       	ld	r24, Z
     4b2:	91 81       	ldd	r25, Z+1	; 0x01
     4b4:	e9 81       	ldd	r30, Y+1	; 0x01
     4b6:	fa 81       	ldd	r31, Y+2	; 0x02
     4b8:	22 81       	ldd	r18, Z+2	; 0x02
     4ba:	33 81       	ldd	r19, Z+3	; 0x03
     4bc:	e9 81       	ldd	r30, Y+1	; 0x01
     4be:	fa 81       	ldd	r31, Y+2	; 0x02
     4c0:	44 81       	ldd	r20, Z+4	; 0x04
     4c2:	55 81       	ldd	r21, Z+5	; 0x05
     4c4:	e9 81       	ldd	r30, Y+1	; 0x01
     4c6:	fa 81       	ldd	r31, Y+2	; 0x02
     4c8:	06 81       	ldd	r16, Z+6	; 0x06
     4ca:	17 81       	ldd	r17, Z+7	; 0x07
     4cc:	e9 81       	ldd	r30, Y+1	; 0x01
     4ce:	fa 81       	ldd	r31, Y+2	; 0x02
     4d0:	e0 84       	ldd	r14, Z+8	; 0x08
     4d2:	f1 84       	ldd	r15, Z+9	; 0x09
     4d4:	e9 81       	ldd	r30, Y+1	; 0x01
     4d6:	fa 81       	ldd	r31, Y+2	; 0x02
     4d8:	c2 84       	ldd	r12, Z+10	; 0x0a
     4da:	d3 84       	ldd	r13, Z+11	; 0x0b
     4dc:	e9 81       	ldd	r30, Y+1	; 0x01
     4de:	fa 81       	ldd	r31, Y+2	; 0x02
     4e0:	b4 84       	ldd	r11, Z+12	; 0x0c
     4e2:	e9 81       	ldd	r30, Y+1	; 0x01
     4e4:	fa 81       	ldd	r31, Y+2	; 0x02
     4e6:	a5 85       	ldd	r26, Z+13	; 0x0d
     4e8:	b6 85       	ldd	r27, Z+14	; 0x0e
     4ea:	e9 81       	ldd	r30, Y+1	; 0x01
     4ec:	fa 81       	ldd	r31, Y+2	; 0x02
     4ee:	e7 85       	ldd	r30, Z+15	; 0x0f
     4f0:	b9 01       	movw	r22, r18
     4f2:	98 01       	movw	r18, r16
     4f4:	87 01       	movw	r16, r14
     4f6:	76 01       	movw	r14, r12
     4f8:	cb 2c       	mov	r12, r11
     4fa:	5d 01       	movw	r10, r26
     4fc:	8e 2e       	mov	r8, r30
     4fe:	0e 94 8d 0b 	call	0x171a	; 0x171a <proc_init_isr>
              ((proc_init_arg_t *)arg)->sstart,
              ((proc_init_arg_t *)arg)->prio,
              ((proc_init_arg_t *)arg)->time_quant,
              ((proc_init_arg_t *)arg)->is_rt
              );
}
     502:	0f 90       	pop	r0
     504:	0f 90       	pop	r0
     506:	cf 91       	pop	r28
     508:	df 91       	pop	r29
     50a:	1f 91       	pop	r17
     50c:	0f 91       	pop	r16
     50e:	ff 90       	pop	r15
     510:	ef 90       	pop	r14
     512:	df 90       	pop	r13
     514:	cf 90       	pop	r12
     516:	bf 90       	pop	r11
     518:	af 90       	pop	r10
     51a:	8f 90       	pop	r8
     51c:	08 95       	ret

0000051e <scall_proc_run>:
    syscall(0,(void *)&scarg);
}
//---------------------------------------------------------------------------------------------
//1
void scall_proc_run( void * arg )
{
     51e:	0f 93       	push	r16
     520:	1f 93       	push	r17
     522:	df 93       	push	r29
     524:	cf 93       	push	r28
     526:	00 d0       	rcall	.+0      	; 0x528 <scall_proc_run+0xa>
     528:	cd b7       	in	r28, 0x3d	; 61
     52a:	de b7       	in	r29, 0x3e	; 62
     52c:	9a 83       	std	Y+2, r25	; 0x02
     52e:	89 83       	std	Y+1, r24	; 0x01
    ((proc_runtime_arg_t *)arg)->scall_ret = proc_run_isr( ((proc_runtime_arg_t *)arg)->proc );
     530:	09 81       	ldd	r16, Y+1	; 0x01
     532:	1a 81       	ldd	r17, Y+2	; 0x02
     534:	e9 81       	ldd	r30, Y+1	; 0x01
     536:	fa 81       	ldd	r31, Y+2	; 0x02
     538:	80 81       	ld	r24, Z
     53a:	91 81       	ldd	r25, Z+1	; 0x01
     53c:	0e 94 33 0c 	call	0x1866	; 0x1866 <proc_run_isr>
     540:	f8 01       	movw	r30, r16
     542:	82 83       	std	Z+2, r24	; 0x02
}
     544:	0f 90       	pop	r0
     546:	0f 90       	pop	r0
     548:	cf 91       	pop	r28
     54a:	df 91       	pop	r29
     54c:	1f 91       	pop	r17
     54e:	0f 91       	pop	r16
     550:	08 95       	ret

00000552 <proc_run>:
bool_t proc_run( proc_t * proc )
{
     552:	df 93       	push	r29
     554:	cf 93       	push	r28
     556:	00 d0       	rcall	.+0      	; 0x558 <proc_run+0x6>
     558:	00 d0       	rcall	.+0      	; 0x55a <proc_run+0x8>
     55a:	0f 92       	push	r0
     55c:	cd b7       	in	r28, 0x3d	; 61
     55e:	de b7       	in	r29, 0x3e	; 62
     560:	9d 83       	std	Y+5, r25	; 0x05
     562:	8c 83       	std	Y+4, r24	; 0x04
    proc_runtime_arg_t scarg;
    scarg.proc = proc;
     564:	8c 81       	ldd	r24, Y+4	; 0x04
     566:	9d 81       	ldd	r25, Y+5	; 0x05
     568:	9a 83       	std	Y+2, r25	; 0x02
     56a:	89 83       	std	Y+1, r24	; 0x01
    scarg.scall_ret = (bool_t)0;
     56c:	1b 82       	std	Y+3, r1	; 0x03

    syscall(1,(void *)&scarg);
     56e:	81 e0       	ldi	r24, 0x01	; 1
     570:	9e 01       	movw	r18, r28
     572:	2f 5f       	subi	r18, 0xFF	; 255
     574:	3f 4f       	sbci	r19, 0xFF	; 255
     576:	b9 01       	movw	r22, r18
     578:	0e 94 24 02 	call	0x448	; 0x448 <syscall>
    return scarg.scall_ret;
     57c:	8b 81       	ldd	r24, Y+3	; 0x03
}
     57e:	0f 90       	pop	r0
     580:	0f 90       	pop	r0
     582:	0f 90       	pop	r0
     584:	0f 90       	pop	r0
     586:	0f 90       	pop	r0
     588:	cf 91       	pop	r28
     58a:	df 91       	pop	r29
     58c:	08 95       	ret

0000058e <scall_proc_restart>:
//---------------------------------------------------------------------------------------------
//2
void scall_proc_restart( void * arg )
{
     58e:	0f 93       	push	r16
     590:	1f 93       	push	r17
     592:	df 93       	push	r29
     594:	cf 93       	push	r28
     596:	00 d0       	rcall	.+0      	; 0x598 <scall_proc_restart+0xa>
     598:	cd b7       	in	r28, 0x3d	; 61
     59a:	de b7       	in	r29, 0x3e	; 62
     59c:	9a 83       	std	Y+2, r25	; 0x02
     59e:	89 83       	std	Y+1, r24	; 0x01
    ((proc_runtime_arg_t *)arg)->scall_ret = proc_restart_isr( ((proc_runtime_arg_t *)arg)->proc );
     5a0:	09 81       	ldd	r16, Y+1	; 0x01
     5a2:	1a 81       	ldd	r17, Y+2	; 0x02
     5a4:	e9 81       	ldd	r30, Y+1	; 0x01
     5a6:	fa 81       	ldd	r31, Y+2	; 0x02
     5a8:	80 81       	ld	r24, Z
     5aa:	91 81       	ldd	r25, Z+1	; 0x01
     5ac:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <proc_restart_isr>
     5b0:	f8 01       	movw	r30, r16
     5b2:	82 83       	std	Z+2, r24	; 0x02
}
     5b4:	0f 90       	pop	r0
     5b6:	0f 90       	pop	r0
     5b8:	cf 91       	pop	r28
     5ba:	df 91       	pop	r29
     5bc:	1f 91       	pop	r17
     5be:	0f 91       	pop	r16
     5c0:	08 95       	ret

000005c2 <scall_proc_stop>:
    return scarg.scall_ret;
}
//---------------------------------------------------------------------------------------------
//3
void scall_proc_stop( void * arg )
{
     5c2:	0f 93       	push	r16
     5c4:	1f 93       	push	r17
     5c6:	df 93       	push	r29
     5c8:	cf 93       	push	r28
     5ca:	00 d0       	rcall	.+0      	; 0x5cc <scall_proc_stop+0xa>
     5cc:	cd b7       	in	r28, 0x3d	; 61
     5ce:	de b7       	in	r29, 0x3e	; 62
     5d0:	9a 83       	std	Y+2, r25	; 0x02
     5d2:	89 83       	std	Y+1, r24	; 0x01
    ((proc_runtime_arg_t *)arg)->scall_ret = proc_stop_isr( ((proc_runtime_arg_t *)arg)->proc );
     5d4:	09 81       	ldd	r16, Y+1	; 0x01
     5d6:	1a 81       	ldd	r17, Y+2	; 0x02
     5d8:	e9 81       	ldd	r30, Y+1	; 0x01
     5da:	fa 81       	ldd	r31, Y+2	; 0x02
     5dc:	80 81       	ld	r24, Z
     5de:	91 81       	ldd	r25, Z+1	; 0x01
     5e0:	0e 94 b5 0c 	call	0x196a	; 0x196a <proc_stop_isr>
     5e4:	f8 01       	movw	r30, r16
     5e6:	82 83       	std	Z+2, r24	; 0x02
}
     5e8:	0f 90       	pop	r0
     5ea:	0f 90       	pop	r0
     5ec:	cf 91       	pop	r28
     5ee:	df 91       	pop	r29
     5f0:	1f 91       	pop	r17
     5f2:	0f 91       	pop	r16
     5f4:	08 95       	ret

000005f6 <scall_proc_self_stop>:
}

//---------------------------------------------------------------------------------------------
//4
void scall_proc_self_stop( void * arg )
{
     5f6:	df 93       	push	r29
     5f8:	cf 93       	push	r28
     5fa:	00 d0       	rcall	.+0      	; 0x5fc <scall_proc_self_stop+0x6>
     5fc:	00 d0       	rcall	.+0      	; 0x5fe <scall_proc_self_stop+0x8>
     5fe:	cd b7       	in	r28, 0x3d	; 61
     600:	de b7       	in	r29, 0x3e	; 62
     602:	9c 83       	std	Y+4, r25	; 0x04
     604:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = kernel.sched.current_proc;
     606:	80 91 9e 01 	lds	r24, 0x019E
     60a:	90 91 9f 01 	lds	r25, 0x019F
     60e:	9a 83       	std	Y+2, r25	; 0x02
     610:	89 83       	std	Y+1, r24	; 0x01
    _proc_stop( proc );
     612:	89 81       	ldd	r24, Y+1	; 0x01
     614:	9a 81       	ldd	r25, Y+2	; 0x02
     616:	0e 94 9c 0c 	call	0x1938	; 0x1938 <_proc_stop>
}
     61a:	0f 90       	pop	r0
     61c:	0f 90       	pop	r0
     61e:	0f 90       	pop	r0
     620:	0f 90       	pop	r0
     622:	cf 91       	pop	r28
     624:	df 91       	pop	r29
     626:	08 95       	ret

00000628 <proc_self_stop>:
void proc_self_stop(void)
{
     628:	df 93       	push	r29
     62a:	cf 93       	push	r28
     62c:	cd b7       	in	r28, 0x3d	; 61
     62e:	de b7       	in	r29, 0x3e	; 62
    syscall(4,(void *)1);
     630:	84 e0       	ldi	r24, 0x04	; 4
     632:	61 e0       	ldi	r22, 0x01	; 1
     634:	70 e0       	ldi	r23, 0x00	; 0
     636:	0e 94 24 02 	call	0x448	; 0x448 <syscall>
}
     63a:	cf 91       	pop	r28
     63c:	df 91       	pop	r29
     63e:	08 95       	ret

00000640 <scall_proc_terminate>:
//---------------------------------------------------------------------------------------------
//5
/// Останов процесса после выхода из pmain, для обертки proc_run_wrapper
void scall_proc_terminate( void * arg )
{
     640:	df 93       	push	r29
     642:	cf 93       	push	r28
     644:	00 d0       	rcall	.+0      	; 0x646 <scall_proc_terminate+0x6>
     646:	00 d0       	rcall	.+0      	; 0x648 <scall_proc_terminate+0x8>
     648:	cd b7       	in	r28, 0x3d	; 61
     64a:	de b7       	in	r29, 0x3e	; 62
     64c:	9c 83       	std	Y+4, r25	; 0x04
     64e:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = (proc_t *)arg;
     650:	8b 81       	ldd	r24, Y+3	; 0x03
     652:	9c 81       	ldd	r25, Y+4	; 0x04
     654:	9a 83       	std	Y+2, r25	; 0x02
     656:	89 83       	std	Y+1, r24	; 0x01
    // Обрабатываем флаги
    // Нельзя выходить из pmain не освободив все захваченные ресурсы, за это процесс будет "убит"!
    if( proc->flags & PROC_FLG_HOLD ) proc->flags |= PROC_FLG_DEAD;
     658:	e9 81       	ldd	r30, Y+1	; 0x01
     65a:	fa 81       	ldd	r31, Y+2	; 0x02
     65c:	83 85       	ldd	r24, Z+11	; 0x0b
     65e:	88 2f       	mov	r24, r24
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	84 70       	andi	r24, 0x04	; 4
     664:	90 70       	andi	r25, 0x00	; 0
     666:	00 97       	sbiw	r24, 0x00	; 0
     668:	41 f0       	breq	.+16     	; 0x67a <scall_proc_terminate+0x3a>
     66a:	e9 81       	ldd	r30, Y+1	; 0x01
     66c:	fa 81       	ldd	r31, Y+2	; 0x02
     66e:	83 85       	ldd	r24, Z+11	; 0x0b
     670:	80 68       	ori	r24, 0x80	; 128
     672:	e9 81       	ldd	r30, Y+1	; 0x01
     674:	fa 81       	ldd	r31, Y+2	; 0x02
     676:	83 87       	std	Z+11, r24	; 0x0b
     678:	07 c0       	rjmp	.+14     	; 0x688 <scall_proc_terminate+0x48>
    // В противном случае - просто завершаем процесс
    else proc->flags |= PROC_FLG_END;
     67a:	e9 81       	ldd	r30, Y+1	; 0x01
     67c:	fa 81       	ldd	r31, Y+2	; 0x02
     67e:	83 85       	ldd	r24, Z+11	; 0x0b
     680:	80 64       	ori	r24, 0x40	; 64
     682:	e9 81       	ldd	r30, Y+1	; 0x01
     684:	fa 81       	ldd	r31, Y+2	; 0x02
     686:	83 87       	std	Z+11, r24	; 0x0b
    proc->flags &= ~(PROC_FLG_PRE_END|PROC_FLG_RUN);
     688:	e9 81       	ldd	r30, Y+1	; 0x01
     68a:	fa 81       	ldd	r31, Y+2	; 0x02
     68c:	83 85       	ldd	r24, Z+11	; 0x0b
     68e:	8d 7d       	andi	r24, 0xDD	; 221
     690:	e9 81       	ldd	r30, Y+1	; 0x01
     692:	fa 81       	ldd	r31, Y+2	; 0x02
     694:	83 87       	std	Z+11, r24	; 0x0b
    // Останов
    _proc_stop_( proc );
     696:	89 81       	ldd	r24, Y+1	; 0x01
     698:	9a 81       	ldd	r25, Y+2	; 0x02
     69a:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <gitem_cut>
    // Выполнить перепланировку
    resched();
     69e:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
}
     6a2:	0f 90       	pop	r0
     6a4:	0f 90       	pop	r0
     6a6:	0f 90       	pop	r0
     6a8:	0f 90       	pop	r0
     6aa:	cf 91       	pop	r28
     6ac:	df 91       	pop	r29
     6ae:	08 95       	ret

000006b0 <proc_run_wrapper>:
void proc_run_wrapper( proc_t * proc )
{
     6b0:	df 93       	push	r29
     6b2:	cf 93       	push	r28
     6b4:	00 d0       	rcall	.+0      	; 0x6b6 <proc_run_wrapper+0x6>
     6b6:	00 d0       	rcall	.+0      	; 0x6b8 <proc_run_wrapper+0x8>
     6b8:	00 d0       	rcall	.+0      	; 0x6ba <proc_run_wrapper+0xa>
     6ba:	cd b7       	in	r28, 0x3d	; 61
     6bc:	de b7       	in	r29, 0x3e	; 62
     6be:	9e 83       	std	Y+6, r25	; 0x06
     6c0:	8d 83       	std	Y+5, r24	; 0x05
    //Атомарно читаем pmain и arg
    cli();
     6c2:	f8 94       	cli
    code_t pmain = proc->pmain;
     6c4:	ed 81       	ldd	r30, Y+5	; 0x05
     6c6:	fe 81       	ldd	r31, Y+6	; 0x06
     6c8:	82 a1       	ldd	r24, Z+34	; 0x22
     6ca:	93 a1       	ldd	r25, Z+35	; 0x23
     6cc:	9c 83       	std	Y+4, r25	; 0x04
     6ce:	8b 83       	std	Y+3, r24	; 0x03
    void * arg = proc->arg;
     6d0:	ed 81       	ldd	r30, Y+5	; 0x05
     6d2:	fe 81       	ldd	r31, Y+6	; 0x06
     6d4:	80 a5       	ldd	r24, Z+40	; 0x28
     6d6:	91 a5       	ldd	r25, Z+41	; 0x29
     6d8:	9a 83       	std	Y+2, r25	; 0x02
     6da:	89 83       	std	Y+1, r24	; 0x01
    sei();
     6dc:	78 94       	sei
    //Выполняем pmain
    pmain( arg );
     6de:	89 81       	ldd	r24, Y+1	; 0x01
     6e0:	9a 81       	ldd	r25, Y+2	; 0x02
     6e2:	eb 81       	ldd	r30, Y+3	; 0x03
     6e4:	fc 81       	ldd	r31, Y+4	; 0x04
     6e6:	09 95       	icall
    // Завершаем процесс
    syscall(5,(void *)proc);
     6e8:	2d 81       	ldd	r18, Y+5	; 0x05
     6ea:	3e 81       	ldd	r19, Y+6	; 0x06
     6ec:	85 e0       	ldi	r24, 0x05	; 5
     6ee:	b9 01       	movw	r22, r18
     6f0:	0e 94 24 02 	call	0x448	; 0x448 <syscall>
}
     6f4:	26 96       	adiw	r28, 0x06	; 6
     6f6:	0f b6       	in	r0, 0x3f	; 63
     6f8:	f8 94       	cli
     6fa:	de bf       	out	0x3e, r29	; 62
     6fc:	0f be       	out	0x3f, r0	; 63
     6fe:	cd bf       	out	0x3d, r28	; 61
     700:	cf 91       	pop	r28
     702:	df 91       	pop	r29
     704:	08 95       	ret

00000706 <scall_proc_flag_stop>:
//---------------------------------------------------------------------------------------------
//6
void scall_proc_flag_stop( void * arg )
{
     706:	df 93       	push	r29
     708:	cf 93       	push	r28
     70a:	00 d0       	rcall	.+0      	; 0x70c <scall_proc_flag_stop+0x6>
     70c:	cd b7       	in	r28, 0x3d	; 61
     70e:	de b7       	in	r29, 0x3e	; 62
     710:	9a 83       	std	Y+2, r25	; 0x02
     712:	89 83       	std	Y+1, r24	; 0x01
    _proc_flag_stop_isr( *((flag_t *)arg) );
     714:	e9 81       	ldd	r30, Y+1	; 0x01
     716:	fa 81       	ldd	r31, Y+2	; 0x02
     718:	80 81       	ld	r24, Z
     71a:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <_proc_flag_stop_isr>
}
     71e:	0f 90       	pop	r0
     720:	0f 90       	pop	r0
     722:	cf 91       	pop	r28
     724:	df 91       	pop	r29
     726:	08 95       	ret

00000728 <scall_sig_init>:
///=================================================================
///                         Сигналы
//7
void scall_sig_init( void * arg )
{
     728:	df 93       	push	r29
     72a:	cf 93       	push	r28
     72c:	00 d0       	rcall	.+0      	; 0x72e <scall_sig_init+0x6>
     72e:	cd b7       	in	r28, 0x3d	; 61
     730:	de b7       	in	r29, 0x3e	; 62
     732:	9a 83       	std	Y+2, r25	; 0x02
     734:	89 83       	std	Y+1, r24	; 0x01
    sig_init_isr( (sig_t *)arg );
     736:	89 81       	ldd	r24, Y+1	; 0x01
     738:	9a 81       	ldd	r25, Y+2	; 0x02
     73a:	0e 94 14 10 	call	0x2028	; 0x2028 <sig_init_isr>
}
     73e:	0f 90       	pop	r0
     740:	0f 90       	pop	r0
     742:	cf 91       	pop	r28
     744:	df 91       	pop	r29
     746:	08 95       	ret

00000748 <scall_sig_wait>:
    syscall( 7, (void *)sig );
}
//---------------------------------------------------------------------------------------------
//8
void scall_sig_wait( void * arg )
{
     748:	df 93       	push	r29
     74a:	cf 93       	push	r28
     74c:	00 d0       	rcall	.+0      	; 0x74e <scall_sig_wait+0x6>
     74e:	cd b7       	in	r28, 0x3d	; 61
     750:	de b7       	in	r29, 0x3e	; 62
     752:	9a 83       	std	Y+2, r25	; 0x02
     754:	89 83       	std	Y+1, r24	; 0x01
    sig_wait_stage_1_isr( (sig_t *)arg );
     756:	89 81       	ldd	r24, Y+1	; 0x01
     758:	9a 81       	ldd	r25, Y+2	; 0x02
     75a:	0e 94 24 10 	call	0x2048	; 0x2048 <sig_wait_stage_1_isr>
}
     75e:	0f 90       	pop	r0
     760:	0f 90       	pop	r0
     762:	cf 91       	pop	r28
     764:	df 91       	pop	r29
     766:	08 95       	ret

00000768 <scall_sig_signal>:
    syscall( 6, (void *)&mask );/// Останов в случае необходимости
}
//---------------------------------------------------------------------------------------------
//9
void scall_sig_signal( void * arg )
{
     768:	df 93       	push	r29
     76a:	cf 93       	push	r28
     76c:	00 d0       	rcall	.+0      	; 0x76e <scall_sig_signal+0x6>
     76e:	cd b7       	in	r28, 0x3d	; 61
     770:	de b7       	in	r29, 0x3e	; 62
     772:	9a 83       	std	Y+2, r25	; 0x02
     774:	89 83       	std	Y+1, r24	; 0x01
    sig_signal_isr( (sig_t *)arg );
     776:	89 81       	ldd	r24, Y+1	; 0x01
     778:	9a 81       	ldd	r25, Y+2	; 0x02
     77a:	0e 94 49 10 	call	0x2092	; 0x2092 <sig_signal_isr>
}
     77e:	0f 90       	pop	r0
     780:	0f 90       	pop	r0
     782:	cf 91       	pop	r28
     784:	df 91       	pop	r29
     786:	08 95       	ret

00000788 <scall_sig_broadcast>:
    syscall( 9, (void *)sig );
}
//---------------------------------------------------------------------------------------------
//10
void scall_sig_broadcast( void * arg )
{
     788:	df 93       	push	r29
     78a:	cf 93       	push	r28
     78c:	00 d0       	rcall	.+0      	; 0x78e <scall_sig_broadcast+0x6>
     78e:	cd b7       	in	r28, 0x3d	; 61
     790:	de b7       	in	r29, 0x3e	; 62
     792:	9a 83       	std	Y+2, r25	; 0x02
     794:	89 83       	std	Y+1, r24	; 0x01
    sig_broadcast_isr( (sig_t *)arg );
     796:	89 81       	ldd	r24, Y+1	; 0x01
     798:	9a 81       	ldd	r25, Y+2	; 0x02
     79a:	0e 94 72 10 	call	0x20e4	; 0x20e4 <sig_broadcast_isr>
}
     79e:	0f 90       	pop	r0
     7a0:	0f 90       	pop	r0
     7a2:	cf 91       	pop	r28
     7a4:	df 91       	pop	r29
     7a6:	08 95       	ret

000007a8 <scall_sem_init>:
}
///=================================================================
///                         Семафоры
//11
void scall_sem_init( void * arg )
{
     7a8:	df 93       	push	r29
     7aa:	cf 93       	push	r28
     7ac:	00 d0       	rcall	.+0      	; 0x7ae <scall_sem_init+0x6>
     7ae:	cd b7       	in	r28, 0x3d	; 61
     7b0:	de b7       	in	r29, 0x3e	; 62
     7b2:	9a 83       	std	Y+2, r25	; 0x02
     7b4:	89 83       	std	Y+1, r24	; 0x01
    sem_init_isr( ((sem_init_arg_t *)arg)->sem, ((sem_init_arg_t *)arg)->count );
     7b6:	e9 81       	ldd	r30, Y+1	; 0x01
     7b8:	fa 81       	ldd	r31, Y+2	; 0x02
     7ba:	80 81       	ld	r24, Z
     7bc:	91 81       	ldd	r25, Z+1	; 0x01
     7be:	e9 81       	ldd	r30, Y+1	; 0x01
     7c0:	fa 81       	ldd	r31, Y+2	; 0x02
     7c2:	22 81       	ldd	r18, Z+2	; 0x02
     7c4:	33 81       	ldd	r19, Z+3	; 0x03
     7c6:	b9 01       	movw	r22, r18
     7c8:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <sem_init_isr>
}
     7cc:	0f 90       	pop	r0
     7ce:	0f 90       	pop	r0
     7d0:	cf 91       	pop	r28
     7d2:	df 91       	pop	r29
     7d4:	08 95       	ret

000007d6 <scall_sem_lock>:
    syscall( 11, (void *)&scarg );
}
//----------------------------------------------------------------------
//12
void scall_sem_lock( void * arg )
{
     7d6:	0f 93       	push	r16
     7d8:	1f 93       	push	r17
     7da:	df 93       	push	r29
     7dc:	cf 93       	push	r28
     7de:	00 d0       	rcall	.+0      	; 0x7e0 <scall_sem_lock+0xa>
     7e0:	cd b7       	in	r28, 0x3d	; 61
     7e2:	de b7       	in	r29, 0x3e	; 62
     7e4:	9a 83       	std	Y+2, r25	; 0x02
     7e6:	89 83       	std	Y+1, r24	; 0x01
    ((sem_lock_arg_t *)arg)->scall_ret = _sem_lock_stage_1( ((sem_lock_arg_t *)arg)->sem );
     7e8:	09 81       	ldd	r16, Y+1	; 0x01
     7ea:	1a 81       	ldd	r17, Y+2	; 0x02
     7ec:	e9 81       	ldd	r30, Y+1	; 0x01
     7ee:	fa 81       	ldd	r31, Y+2	; 0x02
     7f0:	80 81       	ld	r24, Z
     7f2:	91 81       	ldd	r25, Z+1	; 0x01
     7f4:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <_sem_lock_stage_1>
     7f8:	f8 01       	movw	r30, r16
     7fa:	82 83       	std	Z+2, r24	; 0x02
}
     7fc:	0f 90       	pop	r0
     7fe:	0f 90       	pop	r0
     800:	cf 91       	pop	r28
     802:	df 91       	pop	r29
     804:	1f 91       	pop	r17
     806:	0f 91       	pop	r16
     808:	08 95       	ret

0000080a <sem_lock>:
const flag_t all_flags_mask = ~(flag_t)0;
bool_t sem_lock( sem_t * sem, bool_t stop )
{
     80a:	df 93       	push	r29
     80c:	cf 93       	push	r28
     80e:	00 d0       	rcall	.+0      	; 0x810 <sem_lock+0x6>
     810:	00 d0       	rcall	.+0      	; 0x812 <sem_lock+0x8>
     812:	00 d0       	rcall	.+0      	; 0x814 <sem_lock+0xa>
     814:	cd b7       	in	r28, 0x3d	; 61
     816:	de b7       	in	r29, 0x3e	; 62
     818:	9d 83       	std	Y+5, r25	; 0x05
     81a:	8c 83       	std	Y+4, r24	; 0x04
     81c:	6e 83       	std	Y+6, r22	; 0x06

    sem_lock_arg_t scarg;
    scarg.sem = sem;
     81e:	8c 81       	ldd	r24, Y+4	; 0x04
     820:	9d 81       	ldd	r25, Y+5	; 0x05
     822:	9a 83       	std	Y+2, r25	; 0x02
     824:	89 83       	std	Y+1, r24	; 0x01
    syscall( 12, (void *)&scarg );
     826:	8c e0       	ldi	r24, 0x0C	; 12
     828:	9e 01       	movw	r18, r28
     82a:	2f 5f       	subi	r18, 0xFF	; 255
     82c:	3f 4f       	sbci	r19, 0xFF	; 255
     82e:	b9 01       	movw	r22, r18
     830:	0e 94 24 02 	call	0x448	; 0x448 <syscall>
    if( stop != (bool_t)0 )syscall( 6, (void *)&all_flags_mask );///Останов по флагам, если надо
     834:	8e 81       	ldd	r24, Y+6	; 0x06
     836:	88 23       	and	r24, r24
     838:	31 f0       	breq	.+12     	; 0x846 <sem_lock+0x3c>
     83a:	21 e0       	ldi	r18, 0x01	; 1
     83c:	31 e0       	ldi	r19, 0x01	; 1
     83e:	86 e0       	ldi	r24, 0x06	; 6
     840:	b9 01       	movw	r22, r18
     842:	0e 94 24 02 	call	0x448	; 0x448 <syscall>
    return scarg.scall_ret;
     846:	8b 81       	ldd	r24, Y+3	; 0x03
}
     848:	26 96       	adiw	r28, 0x06	; 6
     84a:	0f b6       	in	r0, 0x3f	; 63
     84c:	f8 94       	cli
     84e:	de bf       	out	0x3e, r29	; 62
     850:	0f be       	out	0x3f, r0	; 63
     852:	cd bf       	out	0x3d, r28	; 61
     854:	cf 91       	pop	r28
     856:	df 91       	pop	r29
     858:	08 95       	ret

0000085a <scall_sem_unlock>:
//----------------------------------------------------------------------
//13
void scall_sem_unlock( void * arg )
{
     85a:	df 93       	push	r29
     85c:	cf 93       	push	r28
     85e:	00 d0       	rcall	.+0      	; 0x860 <scall_sem_unlock+0x6>
     860:	cd b7       	in	r28, 0x3d	; 61
     862:	de b7       	in	r29, 0x3e	; 62
     864:	9a 83       	std	Y+2, r25	; 0x02
     866:	89 83       	std	Y+1, r24	; 0x01
    _sem_unlock( (sem_t *)arg );
     868:	89 81       	ldd	r24, Y+1	; 0x01
     86a:	9a 81       	ldd	r25, Y+2	; 0x02
     86c:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <_sem_unlock>
}
     870:	0f 90       	pop	r0
     872:	0f 90       	pop	r0
     874:	cf 91       	pop	r28
     876:	df 91       	pop	r29
     878:	08 95       	ret

0000087a <sem_unlock>:
void sem_unlock( sem_t * sem, bool_t stop )
{
     87a:	df 93       	push	r29
     87c:	cf 93       	push	r28
     87e:	00 d0       	rcall	.+0      	; 0x880 <sem_unlock+0x6>
     880:	0f 92       	push	r0
     882:	cd b7       	in	r28, 0x3d	; 61
     884:	de b7       	in	r29, 0x3e	; 62
     886:	9a 83       	std	Y+2, r25	; 0x02
     888:	89 83       	std	Y+1, r24	; 0x01
     88a:	6b 83       	std	Y+3, r22	; 0x03
    syscall( 13, (void *)sem );
     88c:	29 81       	ldd	r18, Y+1	; 0x01
     88e:	3a 81       	ldd	r19, Y+2	; 0x02
     890:	8d e0       	ldi	r24, 0x0D	; 13
     892:	b9 01       	movw	r22, r18
     894:	0e 94 24 02 	call	0x448	; 0x448 <syscall>
    if( stop != (bool_t)0 )syscall( 6, (void *)&all_flags_mask );///Останов по флагам, если надо
     898:	8b 81       	ldd	r24, Y+3	; 0x03
     89a:	88 23       	and	r24, r24
     89c:	31 f0       	breq	.+12     	; 0x8aa <sem_unlock+0x30>
     89e:	21 e0       	ldi	r18, 0x01	; 1
     8a0:	31 e0       	ldi	r19, 0x01	; 1
     8a2:	86 e0       	ldi	r24, 0x06	; 6
     8a4:	b9 01       	movw	r22, r18
     8a6:	0e 94 24 02 	call	0x448	; 0x448 <syscall>
}
     8aa:	0f 90       	pop	r0
     8ac:	0f 90       	pop	r0
     8ae:	0f 90       	pop	r0
     8b0:	cf 91       	pop	r28
     8b2:	df 91       	pop	r29
     8b4:	08 95       	ret

000008b6 <scall_mutex_init>:
///=================================================================
///                         Мьютексы
//14
void scall_mutex_init(void * arg)
{
     8b6:	df 93       	push	r29
     8b8:	cf 93       	push	r28
     8ba:	00 d0       	rcall	.+0      	; 0x8bc <scall_mutex_init+0x6>
     8bc:	cd b7       	in	r28, 0x3d	; 61
     8be:	de b7       	in	r29, 0x3e	; 62
     8c0:	9a 83       	std	Y+2, r25	; 0x02
     8c2:	89 83       	std	Y+1, r24	; 0x01
    mutex_init_isr(
     8c4:	e9 81       	ldd	r30, Y+1	; 0x01
     8c6:	fa 81       	ldd	r31, Y+2	; 0x02
     8c8:	80 81       	ld	r24, Z
     8ca:	91 81       	ldd	r25, Z+1	; 0x01
     8cc:	e9 81       	ldd	r30, Y+1	; 0x01
     8ce:	fa 81       	ldd	r31, Y+2	; 0x02
     8d0:	22 81       	ldd	r18, Z+2	; 0x02
     8d2:	62 2f       	mov	r22, r18
     8d4:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <mutex_init_isr>
               ((mutex_init_arg_t *)arg)->mutex
#ifdef CONFIG_USE_HIGHEST_LOCKER
               ,((mutex_init_arg_t *)arg)->prio
#endif // CONFIG_USE_HIGHEST_LOCKER
               );
}
     8d8:	0f 90       	pop	r0
     8da:	0f 90       	pop	r0
     8dc:	cf 91       	pop	r28
     8de:	df 91       	pop	r29
     8e0:	08 95       	ret

000008e2 <scall_mutex_lock>:
    syscall( 14, (void *)&scarg );
}
//----------------------------------------------------------------------
//15
void scall_mutex_lock(void * arg)
{
     8e2:	0f 93       	push	r16
     8e4:	1f 93       	push	r17
     8e6:	df 93       	push	r29
     8e8:	cf 93       	push	r28
     8ea:	00 d0       	rcall	.+0      	; 0x8ec <scall_mutex_lock+0xa>
     8ec:	cd b7       	in	r28, 0x3d	; 61
     8ee:	de b7       	in	r29, 0x3e	; 62
     8f0:	9a 83       	std	Y+2, r25	; 0x02
     8f2:	89 83       	std	Y+1, r24	; 0x01
    ((mutex_lock_arg_t *)arg)->scall_ret = _mutex_lock( ((mutex_lock_arg_t *)arg)->mutex );
     8f4:	09 81       	ldd	r16, Y+1	; 0x01
     8f6:	1a 81       	ldd	r17, Y+2	; 0x02
     8f8:	e9 81       	ldd	r30, Y+1	; 0x01
     8fa:	fa 81       	ldd	r31, Y+2	; 0x02
     8fc:	80 81       	ld	r24, Z
     8fe:	91 81       	ldd	r25, Z+1	; 0x01
     900:	0e 94 07 0a 	call	0x140e	; 0x140e <_mutex_lock>
     904:	f8 01       	movw	r30, r16
     906:	82 83       	std	Z+2, r24	; 0x02
}
     908:	0f 90       	pop	r0
     90a:	0f 90       	pop	r0
     90c:	cf 91       	pop	r28
     90e:	df 91       	pop	r29
     910:	1f 91       	pop	r17
     912:	0f 91       	pop	r16
     914:	08 95       	ret

00000916 <scall_mutex_try_lock>:
}
// Захват
//----------------------------------------------------------------------
//16
void scall_mutex_try_lock(void * arg)
{
     916:	0f 93       	push	r16
     918:	1f 93       	push	r17
     91a:	df 93       	push	r29
     91c:	cf 93       	push	r28
     91e:	00 d0       	rcall	.+0      	; 0x920 <scall_mutex_try_lock+0xa>
     920:	cd b7       	in	r28, 0x3d	; 61
     922:	de b7       	in	r29, 0x3e	; 62
     924:	9a 83       	std	Y+2, r25	; 0x02
     926:	89 83       	std	Y+1, r24	; 0x01
    ((mutex_lock_arg_t *)arg)->scall_ret = _mutex_try_lock( ((mutex_lock_arg_t *)arg)->mutex );
     928:	09 81       	ldd	r16, Y+1	; 0x01
     92a:	1a 81       	ldd	r17, Y+2	; 0x02
     92c:	e9 81       	ldd	r30, Y+1	; 0x01
     92e:	fa 81       	ldd	r31, Y+2	; 0x02
     930:	80 81       	ld	r24, Z
     932:	91 81       	ldd	r25, Z+1	; 0x01
     934:	0e 94 4f 0a 	call	0x149e	; 0x149e <_mutex_try_lock>
     938:	f8 01       	movw	r30, r16
     93a:	82 83       	std	Z+2, r24	; 0x02
}
     93c:	0f 90       	pop	r0
     93e:	0f 90       	pop	r0
     940:	cf 91       	pop	r28
     942:	df 91       	pop	r29
     944:	1f 91       	pop	r17
     946:	0f 91       	pop	r16
     948:	08 95       	ret

0000094a <scall_mutex_unlock>:
    return scarg.scall_ret;
}
//----------------------------------------------------------------------
//17
void scall_mutex_unlock(void * arg)
{
     94a:	df 93       	push	r29
     94c:	cf 93       	push	r28
     94e:	00 d0       	rcall	.+0      	; 0x950 <scall_mutex_unlock+0x6>
     950:	cd b7       	in	r28, 0x3d	; 61
     952:	de b7       	in	r29, 0x3e	; 62
     954:	9a 83       	std	Y+2, r25	; 0x02
     956:	89 83       	std	Y+1, r24	; 0x01
    _mutex_unlock( (mutex_t *)arg );
     958:	89 81       	ldd	r24, Y+1	; 0x01
     95a:	9a 81       	ldd	r25, Y+2	; 0x02
     95c:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <_mutex_unlock>
}
     960:	0f 90       	pop	r0
     962:	0f 90       	pop	r0
     964:	cf 91       	pop	r28
     966:	df 91       	pop	r29
     968:	08 95       	ret

0000096a <osbme_init_stack>:
*                                                                                        *
*****************************************************************************************/
#include <avr/io.h>
#include "../../osbme.h"
void * osbme_init_stack( void * top_of_stack, osbme_code_t code, void * arg )
{
     96a:	df 93       	push	r29
     96c:	cf 93       	push	r28
     96e:	cd b7       	in	r28, 0x3d	; 61
     970:	de b7       	in	r29, 0x3e	; 62
     972:	2a 97       	sbiw	r28, 0x0a	; 10
     974:	0f b6       	in	r0, 0x3f	; 63
     976:	f8 94       	cli
     978:	de bf       	out	0x3e, r29	; 62
     97a:	0f be       	out	0x3f, r0	; 63
     97c:	cd bf       	out	0x3d, r28	; 61
     97e:	9e 83       	std	Y+6, r25	; 0x06
     980:	8d 83       	std	Y+5, r24	; 0x05
     982:	78 87       	std	Y+8, r23	; 0x08
     984:	6f 83       	std	Y+7, r22	; 0x07
     986:	5a 87       	std	Y+10, r21	; 0x0a
     988:	49 87       	std	Y+9, r20	; 0x09
    char * tos = (char *)top_of_stack;
     98a:	8d 81       	ldd	r24, Y+5	; 0x05
     98c:	9e 81       	ldd	r25, Y+6	; 0x06
     98e:	9c 83       	std	Y+4, r25	; 0x04
     990:	8b 83       	std	Y+3, r24	; 0x03
    //*tos-- = 0x11;
    //*tos-- = 0x22;
    //*tos-- = 0x33;

    // return address
    unsigned short tmp = (unsigned short)code;
     992:	8f 81       	ldd	r24, Y+7	; 0x07
     994:	98 85       	ldd	r25, Y+8	; 0x08
     996:	9a 83       	std	Y+2, r25	; 0x02
     998:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (char)(tmp&(unsigned short)0x00ff);
     99a:	89 81       	ldd	r24, Y+1	; 0x01
     99c:	eb 81       	ldd	r30, Y+3	; 0x03
     99e:	fc 81       	ldd	r31, Y+4	; 0x04
     9a0:	80 83       	st	Z, r24
     9a2:	8b 81       	ldd	r24, Y+3	; 0x03
     9a4:	9c 81       	ldd	r25, Y+4	; 0x04
     9a6:	01 97       	sbiw	r24, 0x01	; 1
     9a8:	9c 83       	std	Y+4, r25	; 0x04
     9aa:	8b 83       	std	Y+3, r24	; 0x03
    tmp>>=8;
     9ac:	89 81       	ldd	r24, Y+1	; 0x01
     9ae:	9a 81       	ldd	r25, Y+2	; 0x02
     9b0:	89 2f       	mov	r24, r25
     9b2:	99 27       	eor	r25, r25
     9b4:	9a 83       	std	Y+2, r25	; 0x02
     9b6:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (char)(tmp&(unsigned short)0x00ff);
     9b8:	89 81       	ldd	r24, Y+1	; 0x01
     9ba:	eb 81       	ldd	r30, Y+3	; 0x03
     9bc:	fc 81       	ldd	r31, Y+4	; 0x04
     9be:	80 83       	st	Z, r24
     9c0:	8b 81       	ldd	r24, Y+3	; 0x03
     9c2:	9c 81       	ldd	r25, Y+4	; 0x04
     9c4:	01 97       	sbiw	r24, 0x01	; 1
     9c6:	9c 83       	std	Y+4, r25	; 0x04
     9c8:	8b 83       	std	Y+3, r24	; 0x03

    // s
    *tos-- = 0x00;
     9ca:	eb 81       	ldd	r30, Y+3	; 0x03
     9cc:	fc 81       	ldd	r31, Y+4	; 0x04
     9ce:	10 82       	st	Z, r1
     9d0:	8b 81       	ldd	r24, Y+3	; 0x03
     9d2:	9c 81       	ldd	r25, Y+4	; 0x04
     9d4:	01 97       	sbiw	r24, 0x01	; 1
     9d6:	9c 83       	std	Y+4, r25	; 0x04
     9d8:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x00;// r1 must B 0
     9da:	eb 81       	ldd	r30, Y+3	; 0x03
     9dc:	fc 81       	ldd	r31, Y+4	; 0x04
     9de:	10 82       	st	Z, r1
     9e0:	8b 81       	ldd	r24, Y+3	; 0x03
     9e2:	9c 81       	ldd	r25, Y+4	; 0x04
     9e4:	01 97       	sbiw	r24, 0x01	; 1
     9e6:	9c 83       	std	Y+4, r25	; 0x04
     9e8:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x02;// r2
     9ea:	eb 81       	ldd	r30, Y+3	; 0x03
     9ec:	fc 81       	ldd	r31, Y+4	; 0x04
     9ee:	82 e0       	ldi	r24, 0x02	; 2
     9f0:	80 83       	st	Z, r24
     9f2:	8b 81       	ldd	r24, Y+3	; 0x03
     9f4:	9c 81       	ldd	r25, Y+4	; 0x04
     9f6:	01 97       	sbiw	r24, 0x01	; 1
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x80;// SREG: enable interrupts
     9fc:	eb 81       	ldd	r30, Y+3	; 0x03
     9fe:	fc 81       	ldd	r31, Y+4	; 0x04
     a00:	80 e8       	ldi	r24, 0x80	; 128
     a02:	80 83       	st	Z, r24
     a04:	8b 81       	ldd	r24, Y+3	; 0x03
     a06:	9c 81       	ldd	r25, Y+4	; 0x04
     a08:	01 97       	sbiw	r24, 0x01	; 1
     a0a:	9c 83       	std	Y+4, r25	; 0x04
     a0c:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x03;
     a0e:	eb 81       	ldd	r30, Y+3	; 0x03
     a10:	fc 81       	ldd	r31, Y+4	; 0x04
     a12:	83 e0       	ldi	r24, 0x03	; 3
     a14:	80 83       	st	Z, r24
     a16:	8b 81       	ldd	r24, Y+3	; 0x03
     a18:	9c 81       	ldd	r25, Y+4	; 0x04
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	9c 83       	std	Y+4, r25	; 0x04
     a1e:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x04;
     a20:	eb 81       	ldd	r30, Y+3	; 0x03
     a22:	fc 81       	ldd	r31, Y+4	; 0x04
     a24:	84 e0       	ldi	r24, 0x04	; 4
     a26:	80 83       	st	Z, r24
     a28:	8b 81       	ldd	r24, Y+3	; 0x03
     a2a:	9c 81       	ldd	r25, Y+4	; 0x04
     a2c:	01 97       	sbiw	r24, 0x01	; 1
     a2e:	9c 83       	std	Y+4, r25	; 0x04
     a30:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x05;
     a32:	eb 81       	ldd	r30, Y+3	; 0x03
     a34:	fc 81       	ldd	r31, Y+4	; 0x04
     a36:	85 e0       	ldi	r24, 0x05	; 5
     a38:	80 83       	st	Z, r24
     a3a:	8b 81       	ldd	r24, Y+3	; 0x03
     a3c:	9c 81       	ldd	r25, Y+4	; 0x04
     a3e:	01 97       	sbiw	r24, 0x01	; 1
     a40:	9c 83       	std	Y+4, r25	; 0x04
     a42:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x06;
     a44:	eb 81       	ldd	r30, Y+3	; 0x03
     a46:	fc 81       	ldd	r31, Y+4	; 0x04
     a48:	86 e0       	ldi	r24, 0x06	; 6
     a4a:	80 83       	st	Z, r24
     a4c:	8b 81       	ldd	r24, Y+3	; 0x03
     a4e:	9c 81       	ldd	r25, Y+4	; 0x04
     a50:	01 97       	sbiw	r24, 0x01	; 1
     a52:	9c 83       	std	Y+4, r25	; 0x04
     a54:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x07;
     a56:	eb 81       	ldd	r30, Y+3	; 0x03
     a58:	fc 81       	ldd	r31, Y+4	; 0x04
     a5a:	87 e0       	ldi	r24, 0x07	; 7
     a5c:	80 83       	st	Z, r24
     a5e:	8b 81       	ldd	r24, Y+3	; 0x03
     a60:	9c 81       	ldd	r25, Y+4	; 0x04
     a62:	01 97       	sbiw	r24, 0x01	; 1
     a64:	9c 83       	std	Y+4, r25	; 0x04
     a66:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x08;
     a68:	eb 81       	ldd	r30, Y+3	; 0x03
     a6a:	fc 81       	ldd	r31, Y+4	; 0x04
     a6c:	88 e0       	ldi	r24, 0x08	; 8
     a6e:	80 83       	st	Z, r24
     a70:	8b 81       	ldd	r24, Y+3	; 0x03
     a72:	9c 81       	ldd	r25, Y+4	; 0x04
     a74:	01 97       	sbiw	r24, 0x01	; 1
     a76:	9c 83       	std	Y+4, r25	; 0x04
     a78:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x09;
     a7a:	eb 81       	ldd	r30, Y+3	; 0x03
     a7c:	fc 81       	ldd	r31, Y+4	; 0x04
     a7e:	89 e0       	ldi	r24, 0x09	; 9
     a80:	80 83       	st	Z, r24
     a82:	8b 81       	ldd	r24, Y+3	; 0x03
     a84:	9c 81       	ldd	r25, Y+4	; 0x04
     a86:	01 97       	sbiw	r24, 0x01	; 1
     a88:	9c 83       	std	Y+4, r25	; 0x04
     a8a:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x10;
     a8c:	eb 81       	ldd	r30, Y+3	; 0x03
     a8e:	fc 81       	ldd	r31, Y+4	; 0x04
     a90:	80 e1       	ldi	r24, 0x10	; 16
     a92:	80 83       	st	Z, r24
     a94:	8b 81       	ldd	r24, Y+3	; 0x03
     a96:	9c 81       	ldd	r25, Y+4	; 0x04
     a98:	01 97       	sbiw	r24, 0x01	; 1
     a9a:	9c 83       	std	Y+4, r25	; 0x04
     a9c:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x11;
     a9e:	eb 81       	ldd	r30, Y+3	; 0x03
     aa0:	fc 81       	ldd	r31, Y+4	; 0x04
     aa2:	81 e1       	ldi	r24, 0x11	; 17
     aa4:	80 83       	st	Z, r24
     aa6:	8b 81       	ldd	r24, Y+3	; 0x03
     aa8:	9c 81       	ldd	r25, Y+4	; 0x04
     aaa:	01 97       	sbiw	r24, 0x01	; 1
     aac:	9c 83       	std	Y+4, r25	; 0x04
     aae:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x12;
     ab0:	eb 81       	ldd	r30, Y+3	; 0x03
     ab2:	fc 81       	ldd	r31, Y+4	; 0x04
     ab4:	82 e1       	ldi	r24, 0x12	; 18
     ab6:	80 83       	st	Z, r24
     ab8:	8b 81       	ldd	r24, Y+3	; 0x03
     aba:	9c 81       	ldd	r25, Y+4	; 0x04
     abc:	01 97       	sbiw	r24, 0x01	; 1
     abe:	9c 83       	std	Y+4, r25	; 0x04
     ac0:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x13;
     ac2:	eb 81       	ldd	r30, Y+3	; 0x03
     ac4:	fc 81       	ldd	r31, Y+4	; 0x04
     ac6:	83 e1       	ldi	r24, 0x13	; 19
     ac8:	80 83       	st	Z, r24
     aca:	8b 81       	ldd	r24, Y+3	; 0x03
     acc:	9c 81       	ldd	r25, Y+4	; 0x04
     ace:	01 97       	sbiw	r24, 0x01	; 1
     ad0:	9c 83       	std	Y+4, r25	; 0x04
     ad2:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x14;
     ad4:	eb 81       	ldd	r30, Y+3	; 0x03
     ad6:	fc 81       	ldd	r31, Y+4	; 0x04
     ad8:	84 e1       	ldi	r24, 0x14	; 20
     ada:	80 83       	st	Z, r24
     adc:	8b 81       	ldd	r24, Y+3	; 0x03
     ade:	9c 81       	ldd	r25, Y+4	; 0x04
     ae0:	01 97       	sbiw	r24, 0x01	; 1
     ae2:	9c 83       	std	Y+4, r25	; 0x04
     ae4:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x15;
     ae6:	eb 81       	ldd	r30, Y+3	; 0x03
     ae8:	fc 81       	ldd	r31, Y+4	; 0x04
     aea:	85 e1       	ldi	r24, 0x15	; 21
     aec:	80 83       	st	Z, r24
     aee:	8b 81       	ldd	r24, Y+3	; 0x03
     af0:	9c 81       	ldd	r25, Y+4	; 0x04
     af2:	01 97       	sbiw	r24, 0x01	; 1
     af4:	9c 83       	std	Y+4, r25	; 0x04
     af6:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x16;
     af8:	eb 81       	ldd	r30, Y+3	; 0x03
     afa:	fc 81       	ldd	r31, Y+4	; 0x04
     afc:	86 e1       	ldi	r24, 0x16	; 22
     afe:	80 83       	st	Z, r24
     b00:	8b 81       	ldd	r24, Y+3	; 0x03
     b02:	9c 81       	ldd	r25, Y+4	; 0x04
     b04:	01 97       	sbiw	r24, 0x01	; 1
     b06:	9c 83       	std	Y+4, r25	; 0x04
     b08:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x17;
     b0a:	eb 81       	ldd	r30, Y+3	; 0x03
     b0c:	fc 81       	ldd	r31, Y+4	; 0x04
     b0e:	87 e1       	ldi	r24, 0x17	; 23
     b10:	80 83       	st	Z, r24
     b12:	8b 81       	ldd	r24, Y+3	; 0x03
     b14:	9c 81       	ldd	r25, Y+4	; 0x04
     b16:	01 97       	sbiw	r24, 0x01	; 1
     b18:	9c 83       	std	Y+4, r25	; 0x04
     b1a:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x18;
     b1c:	eb 81       	ldd	r30, Y+3	; 0x03
     b1e:	fc 81       	ldd	r31, Y+4	; 0x04
     b20:	88 e1       	ldi	r24, 0x18	; 24
     b22:	80 83       	st	Z, r24
     b24:	8b 81       	ldd	r24, Y+3	; 0x03
     b26:	9c 81       	ldd	r25, Y+4	; 0x04
     b28:	01 97       	sbiw	r24, 0x01	; 1
     b2a:	9c 83       	std	Y+4, r25	; 0x04
     b2c:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x19;
     b2e:	eb 81       	ldd	r30, Y+3	; 0x03
     b30:	fc 81       	ldd	r31, Y+4	; 0x04
     b32:	89 e1       	ldi	r24, 0x19	; 25
     b34:	80 83       	st	Z, r24
     b36:	8b 81       	ldd	r24, Y+3	; 0x03
     b38:	9c 81       	ldd	r25, Y+4	; 0x04
     b3a:	01 97       	sbiw	r24, 0x01	; 1
     b3c:	9c 83       	std	Y+4, r25	; 0x04
     b3e:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x20;
     b40:	eb 81       	ldd	r30, Y+3	; 0x03
     b42:	fc 81       	ldd	r31, Y+4	; 0x04
     b44:	80 e2       	ldi	r24, 0x20	; 32
     b46:	80 83       	st	Z, r24
     b48:	8b 81       	ldd	r24, Y+3	; 0x03
     b4a:	9c 81       	ldd	r25, Y+4	; 0x04
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	9c 83       	std	Y+4, r25	; 0x04
     b50:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x21;
     b52:	eb 81       	ldd	r30, Y+3	; 0x03
     b54:	fc 81       	ldd	r31, Y+4	; 0x04
     b56:	81 e2       	ldi	r24, 0x21	; 33
     b58:	80 83       	st	Z, r24
     b5a:	8b 81       	ldd	r24, Y+3	; 0x03
     b5c:	9c 81       	ldd	r25, Y+4	; 0x04
     b5e:	01 97       	sbiw	r24, 0x01	; 1
     b60:	9c 83       	std	Y+4, r25	; 0x04
     b62:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x22;
     b64:	eb 81       	ldd	r30, Y+3	; 0x03
     b66:	fc 81       	ldd	r31, Y+4	; 0x04
     b68:	82 e2       	ldi	r24, 0x22	; 34
     b6a:	80 83       	st	Z, r24
     b6c:	8b 81       	ldd	r24, Y+3	; 0x03
     b6e:	9c 81       	ldd	r25, Y+4	; 0x04
     b70:	01 97       	sbiw	r24, 0x01	; 1
     b72:	9c 83       	std	Y+4, r25	; 0x04
     b74:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x23;
     b76:	eb 81       	ldd	r30, Y+3	; 0x03
     b78:	fc 81       	ldd	r31, Y+4	; 0x04
     b7a:	83 e2       	ldi	r24, 0x23	; 35
     b7c:	80 83       	st	Z, r24
     b7e:	8b 81       	ldd	r24, Y+3	; 0x03
     b80:	9c 81       	ldd	r25, Y+4	; 0x04
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	9c 83       	std	Y+4, r25	; 0x04
     b86:	8b 83       	std	Y+3, r24	; 0x03

    tmp = (unsigned short)arg;
     b88:	89 85       	ldd	r24, Y+9	; 0x09
     b8a:	9a 85       	ldd	r25, Y+10	; 0x0a
     b8c:	9a 83       	std	Y+2, r25	; 0x02
     b8e:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (char)(tmp&(unsigned short)0x00ff); // r24 LSByte of arg
     b90:	89 81       	ldd	r24, Y+1	; 0x01
     b92:	eb 81       	ldd	r30, Y+3	; 0x03
     b94:	fc 81       	ldd	r31, Y+4	; 0x04
     b96:	80 83       	st	Z, r24
     b98:	8b 81       	ldd	r24, Y+3	; 0x03
     b9a:	9c 81       	ldd	r25, Y+4	; 0x04
     b9c:	01 97       	sbiw	r24, 0x01	; 1
     b9e:	9c 83       	std	Y+4, r25	; 0x04
     ba0:	8b 83       	std	Y+3, r24	; 0x03
    tmp>>=8;
     ba2:	89 81       	ldd	r24, Y+1	; 0x01
     ba4:	9a 81       	ldd	r25, Y+2	; 0x02
     ba6:	89 2f       	mov	r24, r25
     ba8:	99 27       	eor	r25, r25
     baa:	9a 83       	std	Y+2, r25	; 0x02
     bac:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (char)(tmp&(unsigned short)0x00ff); // r25 MSByte of arg
     bae:	89 81       	ldd	r24, Y+1	; 0x01
     bb0:	eb 81       	ldd	r30, Y+3	; 0x03
     bb2:	fc 81       	ldd	r31, Y+4	; 0x04
     bb4:	80 83       	st	Z, r24
     bb6:	8b 81       	ldd	r24, Y+3	; 0x03
     bb8:	9c 81       	ldd	r25, Y+4	; 0x04
     bba:	01 97       	sbiw	r24, 0x01	; 1
     bbc:	9c 83       	std	Y+4, r25	; 0x04
     bbe:	8b 83       	std	Y+3, r24	; 0x03

    *tos-- = 0x26;
     bc0:	eb 81       	ldd	r30, Y+3	; 0x03
     bc2:	fc 81       	ldd	r31, Y+4	; 0x04
     bc4:	86 e2       	ldi	r24, 0x26	; 38
     bc6:	80 83       	st	Z, r24
     bc8:	8b 81       	ldd	r24, Y+3	; 0x03
     bca:	9c 81       	ldd	r25, Y+4	; 0x04
     bcc:	01 97       	sbiw	r24, 0x01	; 1
     bce:	9c 83       	std	Y+4, r25	; 0x04
     bd0:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x27;
     bd2:	eb 81       	ldd	r30, Y+3	; 0x03
     bd4:	fc 81       	ldd	r31, Y+4	; 0x04
     bd6:	87 e2       	ldi	r24, 0x27	; 39
     bd8:	80 83       	st	Z, r24
     bda:	8b 81       	ldd	r24, Y+3	; 0x03
     bdc:	9c 81       	ldd	r25, Y+4	; 0x04
     bde:	01 97       	sbiw	r24, 0x01	; 1
     be0:	9c 83       	std	Y+4, r25	; 0x04
     be2:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x28;
     be4:	eb 81       	ldd	r30, Y+3	; 0x03
     be6:	fc 81       	ldd	r31, Y+4	; 0x04
     be8:	88 e2       	ldi	r24, 0x28	; 40
     bea:	80 83       	st	Z, r24
     bec:	8b 81       	ldd	r24, Y+3	; 0x03
     bee:	9c 81       	ldd	r25, Y+4	; 0x04
     bf0:	01 97       	sbiw	r24, 0x01	; 1
     bf2:	9c 83       	std	Y+4, r25	; 0x04
     bf4:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x29;
     bf6:	eb 81       	ldd	r30, Y+3	; 0x03
     bf8:	fc 81       	ldd	r31, Y+4	; 0x04
     bfa:	89 e2       	ldi	r24, 0x29	; 41
     bfc:	80 83       	st	Z, r24
     bfe:	8b 81       	ldd	r24, Y+3	; 0x03
     c00:	9c 81       	ldd	r25, Y+4	; 0x04
     c02:	01 97       	sbiw	r24, 0x01	; 1
     c04:	9c 83       	std	Y+4, r25	; 0x04
     c06:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x30;
     c08:	eb 81       	ldd	r30, Y+3	; 0x03
     c0a:	fc 81       	ldd	r31, Y+4	; 0x04
     c0c:	80 e3       	ldi	r24, 0x30	; 48
     c0e:	80 83       	st	Z, r24
     c10:	8b 81       	ldd	r24, Y+3	; 0x03
     c12:	9c 81       	ldd	r25, Y+4	; 0x04
     c14:	01 97       	sbiw	r24, 0x01	; 1
     c16:	9c 83       	std	Y+4, r25	; 0x04
     c18:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x31;
     c1a:	eb 81       	ldd	r30, Y+3	; 0x03
     c1c:	fc 81       	ldd	r31, Y+4	; 0x04
     c1e:	81 e3       	ldi	r24, 0x31	; 49
     c20:	80 83       	st	Z, r24
     c22:	8b 81       	ldd	r24, Y+3	; 0x03
     c24:	9c 81       	ldd	r25, Y+4	; 0x04
     c26:	01 97       	sbiw	r24, 0x01	; 1
     c28:	9c 83       	std	Y+4, r25	; 0x04
     c2a:	8b 83       	std	Y+3, r24	; 0x03
#ifdef RAMPZ
    *tos-- = 0xff;
#endif
    return((void *)tos);
     c2c:	8b 81       	ldd	r24, Y+3	; 0x03
     c2e:	9c 81       	ldd	r25, Y+4	; 0x04
}
     c30:	2a 96       	adiw	r28, 0x0a	; 10
     c32:	0f b6       	in	r0, 0x3f	; 63
     c34:	f8 94       	cli
     c36:	de bf       	out	0x3e, r29	; 62
     c38:	0f be       	out	0x3f, r0	; 63
     c3a:	cd bf       	out	0x3d, r28	; 61
     c3c:	cf 91       	pop	r28
     c3e:	df 91       	pop	r29
     c40:	08 95       	ret

00000c42 <enter_crit_sec>:
    if( kernel.sched[core].nested_crit_sec == (count_t)0 )enable_interrupts();
}

#else
void enter_crit_sec(void)
{
     c42:	df 93       	push	r29
     c44:	cf 93       	push	r28
     c46:	cd b7       	in	r28, 0x3d	; 61
     c48:	de b7       	in	r29, 0x3e	; 62
    disable_interrupts();
     c4a:	0e 94 bc 00 	call	0x178	; 0x178 <disable_interrupts>
    kernel.sched.nested_crit_sec++;
     c4e:	80 91 c6 01 	lds	r24, 0x01C6
     c52:	90 91 c7 01 	lds	r25, 0x01C7
     c56:	01 96       	adiw	r24, 0x01	; 1
     c58:	90 93 c7 01 	sts	0x01C7, r25
     c5c:	80 93 c6 01 	sts	0x01C6, r24
}
     c60:	cf 91       	pop	r28
     c62:	df 91       	pop	r29
     c64:	08 95       	ret

00000c66 <exit_crit_sec>:
void exit_crit_sec(void)
{
     c66:	df 93       	push	r29
     c68:	cf 93       	push	r28
     c6a:	cd b7       	in	r28, 0x3d	; 61
     c6c:	de b7       	in	r29, 0x3e	; 62
    if( kernel.sched.nested_crit_sec != (count_t)0 )kernel.sched.nested_crit_sec--;
     c6e:	80 91 c6 01 	lds	r24, 0x01C6
     c72:	90 91 c7 01 	lds	r25, 0x01C7
     c76:	00 97       	sbiw	r24, 0x00	; 0
     c78:	49 f0       	breq	.+18     	; 0xc8c <exit_crit_sec+0x26>
     c7a:	80 91 c6 01 	lds	r24, 0x01C6
     c7e:	90 91 c7 01 	lds	r25, 0x01C7
     c82:	01 97       	sbiw	r24, 0x01	; 1
     c84:	90 93 c7 01 	sts	0x01C7, r25
     c88:	80 93 c6 01 	sts	0x01C6, r24
    if( kernel.sched.nested_crit_sec == (count_t)0 )enable_interrupts();
     c8c:	80 91 c6 01 	lds	r24, 0x01C6
     c90:	90 91 c7 01 	lds	r25, 0x01C7
     c94:	00 97       	sbiw	r24, 0x00	; 0
     c96:	11 f4       	brne	.+4      	; 0xc9c <exit_crit_sec+0x36>
     c98:	0e 94 c4 00 	call	0x188	; 0x188 <enable_interrupts>
}
     c9c:	cf 91       	pop	r28
     c9e:	df 91       	pop	r29
     ca0:	08 95       	ret

00000ca2 <gitem_init>:
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
// Инициация
void gitem_init(gitem_t * gitem, prio_t prio)
{
     ca2:	df 93       	push	r29
     ca4:	cf 93       	push	r28
     ca6:	00 d0       	rcall	.+0      	; 0xca8 <gitem_init+0x6>
     ca8:	00 d0       	rcall	.+0      	; 0xcaa <gitem_init+0x8>
     caa:	0f 92       	push	r0
     cac:	cd b7       	in	r28, 0x3d	; 61
     cae:	de b7       	in	r29, 0x3e	; 62
     cb0:	9c 83       	std	Y+4, r25	; 0x04
     cb2:	8b 83       	std	Y+3, r24	; 0x03
     cb4:	6d 83       	std	Y+5, r22	; 0x05
    group_t * group = &gitem->grp;
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	9c 81       	ldd	r25, Y+4	; 0x04
     cba:	06 96       	adiw	r24, 0x06	; 6
     cbc:	9a 83       	std	Y+2, r25	; 0x02
     cbe:	89 83       	std	Y+1, r24	; 0x01
    item_init( (item_t *)gitem );
     cc0:	8b 81       	ldd	r24, Y+3	; 0x03
     cc2:	9c 81       	ldd	r25, Y+4	; 0x04
     cc4:	0e 94 37 09 	call	0x126e	; 0x126e <item_init>
    group_init( group, prio );
     cc8:	89 81       	ldd	r24, Y+1	; 0x01
     cca:	9a 81       	ldd	r25, Y+2	; 0x02
     ccc:	6d 81       	ldd	r22, Y+5	; 0x05
     cce:	0e 94 a7 08 	call	0x114e	; 0x114e <group_init>
    gitem->group = group;
     cd2:	eb 81       	ldd	r30, Y+3	; 0x03
     cd4:	fc 81       	ldd	r31, Y+4	; 0x04
     cd6:	89 81       	ldd	r24, Y+1	; 0x01
     cd8:	9a 81       	ldd	r25, Y+2	; 0x02
     cda:	95 83       	std	Z+5, r25	; 0x05
     cdc:	84 83       	std	Z+4, r24	; 0x04
}
     cde:	0f 90       	pop	r0
     ce0:	0f 90       	pop	r0
     ce2:	0f 90       	pop	r0
     ce4:	0f 90       	pop	r0
     ce6:	0f 90       	pop	r0
     ce8:	cf 91       	pop	r28
     cea:	df 91       	pop	r29
     cec:	08 95       	ret

00000cee <gitem_insert>:
// Вставить в список
void gitem_insert(gitem_t * gitem, xlist_t *xlist)
{
     cee:	df 93       	push	r29
     cf0:	cf 93       	push	r28
     cf2:	cd b7       	in	r28, 0x3d	; 61
     cf4:	de b7       	in	r29, 0x3e	; 62
     cf6:	28 97       	sbiw	r28, 0x08	; 8
     cf8:	0f b6       	in	r0, 0x3f	; 63
     cfa:	f8 94       	cli
     cfc:	de bf       	out	0x3e, r29	; 62
     cfe:	0f be       	out	0x3f, r0	; 63
     d00:	cd bf       	out	0x3d, r28	; 61
     d02:	9e 83       	std	Y+6, r25	; 0x06
     d04:	8d 83       	std	Y+5, r24	; 0x05
     d06:	78 87       	std	Y+8, r23	; 0x08
     d08:	6f 83       	std	Y+7, r22	; 0x07
    prio_t prio = gitem->group->prio;
     d0a:	ed 81       	ldd	r30, Y+5	; 0x05
     d0c:	fe 81       	ldd	r31, Y+6	; 0x06
     d0e:	04 80       	ldd	r0, Z+4	; 0x04
     d10:	f5 81       	ldd	r31, Z+5	; 0x05
     d12:	e0 2d       	mov	r30, r0
     d14:	82 81       	ldd	r24, Z+2	; 0x02
     d16:	8c 83       	std	Y+4, r24	; 0x04
    index_t mask = ((index_t)1)<<prio;
     d18:	8c 81       	ldd	r24, Y+4	; 0x04
     d1a:	28 2f       	mov	r18, r24
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	02 c0       	rjmp	.+4      	; 0xd28 <gitem_insert+0x3a>
     d24:	88 0f       	add	r24, r24
     d26:	99 1f       	adc	r25, r25
     d28:	2a 95       	dec	r18
     d2a:	e2 f7       	brpl	.-8      	; 0xd24 <gitem_insert+0x36>
     d2c:	8b 83       	std	Y+3, r24	; 0x03
    item_t ** head = (item_t **)xlist + prio;
     d2e:	2f 81       	ldd	r18, Y+7	; 0x07
     d30:	38 85       	ldd	r19, Y+8	; 0x08
     d32:	8c 81       	ldd	r24, Y+4	; 0x04
     d34:	88 2f       	mov	r24, r24
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	88 0f       	add	r24, r24
     d3a:	99 1f       	adc	r25, r25
     d3c:	82 0f       	add	r24, r18
     d3e:	93 1f       	adc	r25, r19
     d40:	9a 83       	std	Y+2, r25	; 0x02
     d42:	89 83       	std	Y+1, r24	; 0x01
    // Пуста ли часть списка с таким приоритетом
    if( ( xlist->index )& mask)
     d44:	ef 81       	ldd	r30, Y+7	; 0x07
     d46:	f8 85       	ldd	r31, Y+8	; 0x08
     d48:	90 89       	ldd	r25, Z+16	; 0x10
     d4a:	8b 81       	ldd	r24, Y+3	; 0x03
     d4c:	89 23       	and	r24, r25
     d4e:	88 23       	and	r24, r24
     d50:	51 f0       	breq	.+20     	; 0xd66 <gitem_insert+0x78>
    {
        //Не пуста вставляем туда gitem
        item_insert( (item_t *)gitem, *head );
     d52:	8d 81       	ldd	r24, Y+5	; 0x05
     d54:	9e 81       	ldd	r25, Y+6	; 0x06
     d56:	e9 81       	ldd	r30, Y+1	; 0x01
     d58:	fa 81       	ldd	r31, Y+2	; 0x02
     d5a:	20 81       	ld	r18, Z
     d5c:	31 81       	ldd	r19, Z+1	; 0x01
     d5e:	b9 01       	movw	r22, r18
     d60:	0e 94 4f 09 	call	0x129e	; 0x129e <item_insert>
     d64:	0e c0       	rjmp	.+28     	; 0xd82 <gitem_insert+0x94>
    }
    else
    {
        // Пуста, gitem будет головой
        *head = (item_t *)gitem;
     d66:	8d 81       	ldd	r24, Y+5	; 0x05
     d68:	9e 81       	ldd	r25, Y+6	; 0x06
     d6a:	e9 81       	ldd	r30, Y+1	; 0x01
     d6c:	fa 81       	ldd	r31, Y+2	; 0x02
     d6e:	91 83       	std	Z+1, r25	; 0x01
     d70:	80 83       	st	Z, r24
        xlist->index |= mask;
     d72:	ef 81       	ldd	r30, Y+7	; 0x07
     d74:	f8 85       	ldd	r31, Y+8	; 0x08
     d76:	90 89       	ldd	r25, Z+16	; 0x10
     d78:	8b 81       	ldd	r24, Y+3	; 0x03
     d7a:	89 2b       	or	r24, r25
     d7c:	ef 81       	ldd	r30, Y+7	; 0x07
     d7e:	f8 85       	ldd	r31, Y+8	; 0x08
     d80:	80 8b       	std	Z+16, r24	; 0x10
    }
    gitem->group->link = (void *)xlist;
     d82:	ed 81       	ldd	r30, Y+5	; 0x05
     d84:	fe 81       	ldd	r31, Y+6	; 0x06
     d86:	04 80       	ldd	r0, Z+4	; 0x04
     d88:	f5 81       	ldd	r31, Z+5	; 0x05
     d8a:	e0 2d       	mov	r30, r0
     d8c:	8f 81       	ldd	r24, Y+7	; 0x07
     d8e:	98 85       	ldd	r25, Y+8	; 0x08
     d90:	91 83       	std	Z+1, r25	; 0x01
     d92:	80 83       	st	Z, r24
}
     d94:	28 96       	adiw	r28, 0x08	; 8
     d96:	0f b6       	in	r0, 0x3f	; 63
     d98:	f8 94       	cli
     d9a:	de bf       	out	0x3e, r29	; 62
     d9c:	0f be       	out	0x3f, r0	; 63
     d9e:	cd bf       	out	0x3d, r28	; 61
     da0:	cf 91       	pop	r28
     da2:	df 91       	pop	r29
     da4:	08 95       	ret

00000da6 <gitem_insert_group>:
 при этом gitem->group переходит в Пул

 Ограничения на gitem - он не должен быть сгруппирован в момент встаки в группу.
*/
void gitem_insert_group(gitem_t * gitem, xlist_t *xlist)
{
     da6:	df 93       	push	r29
     da8:	cf 93       	push	r28
     daa:	cd b7       	in	r28, 0x3d	; 61
     dac:	de b7       	in	r29, 0x3e	; 62
     dae:	2a 97       	sbiw	r28, 0x0a	; 10
     db0:	0f b6       	in	r0, 0x3f	; 63
     db2:	f8 94       	cli
     db4:	de bf       	out	0x3e, r29	; 62
     db6:	0f be       	out	0x3f, r0	; 63
     db8:	cd bf       	out	0x3d, r28	; 61
     dba:	98 87       	std	Y+8, r25	; 0x08
     dbc:	8f 83       	std	Y+7, r24	; 0x07
     dbe:	7a 87       	std	Y+10, r23	; 0x0a
     dc0:	69 87       	std	Y+9, r22	; 0x09
    prio_t prio = gitem->group->prio;
     dc2:	ef 81       	ldd	r30, Y+7	; 0x07
     dc4:	f8 85       	ldd	r31, Y+8	; 0x08
     dc6:	04 80       	ldd	r0, Z+4	; 0x04
     dc8:	f5 81       	ldd	r31, Z+5	; 0x05
     dca:	e0 2d       	mov	r30, r0
     dcc:	82 81       	ldd	r24, Z+2	; 0x02
     dce:	8e 83       	std	Y+6, r24	; 0x06
    index_t mask = ((index_t)1)<<prio;
     dd0:	8e 81       	ldd	r24, Y+6	; 0x06
     dd2:	28 2f       	mov	r18, r24
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	02 c0       	rjmp	.+4      	; 0xde0 <gitem_insert_group+0x3a>
     ddc:	88 0f       	add	r24, r24
     dde:	99 1f       	adc	r25, r25
     de0:	2a 95       	dec	r18
     de2:	e2 f7       	brpl	.-8      	; 0xddc <gitem_insert_group+0x36>
     de4:	8d 83       	std	Y+5, r24	; 0x05
    item_t ** head = (item_t **)xlist + prio;
     de6:	29 85       	ldd	r18, Y+9	; 0x09
     de8:	3a 85       	ldd	r19, Y+10	; 0x0a
     dea:	8e 81       	ldd	r24, Y+6	; 0x06
     dec:	88 2f       	mov	r24, r24
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	88 0f       	add	r24, r24
     df2:	99 1f       	adc	r25, r25
     df4:	82 0f       	add	r24, r18
     df6:	93 1f       	adc	r25, r19
     df8:	9c 83       	std	Y+4, r25	; 0x04
     dfa:	8b 83       	std	Y+3, r24	; 0x03
    group_t * group = gitem->group;
     dfc:	ef 81       	ldd	r30, Y+7	; 0x07
     dfe:	f8 85       	ldd	r31, Y+8	; 0x08
     e00:	84 81       	ldd	r24, Z+4	; 0x04
     e02:	95 81       	ldd	r25, Z+5	; 0x05
     e04:	9a 83       	std	Y+2, r25	; 0x02
     e06:	89 83       	std	Y+1, r24	; 0x01
    // Пуста ли часть списка с таким приоритетом
    if( ( xlist->index )& mask)
     e08:	e9 85       	ldd	r30, Y+9	; 0x09
     e0a:	fa 85       	ldd	r31, Y+10	; 0x0a
     e0c:	90 89       	ldd	r25, Z+16	; 0x10
     e0e:	8d 81       	ldd	r24, Y+5	; 0x05
     e10:	89 23       	and	r24, r25
     e12:	88 23       	and	r24, r24
     e14:	31 f1       	breq	.+76     	; 0xe62 <gitem_insert_group+0xbc>
    {
        //Не пуста вставляем туда gitem
        item_insert((item_t *)gitem, *head );
     e16:	8f 81       	ldd	r24, Y+7	; 0x07
     e18:	98 85       	ldd	r25, Y+8	; 0x08
     e1a:	eb 81       	ldd	r30, Y+3	; 0x03
     e1c:	fc 81       	ldd	r31, Y+4	; 0x04
     e1e:	20 81       	ld	r18, Z
     e20:	31 81       	ldd	r19, Z+1	; 0x01
     e22:	b9 01       	movw	r22, r18
     e24:	0e 94 4f 09 	call	0x129e	; 0x129e <item_insert>
        //Передаем старую группу в пул
        group_push(group);
     e28:	89 81       	ldd	r24, Y+1	; 0x01
     e2a:	9a 81       	ldd	r25, Y+2	; 0x02
     e2c:	0e 94 c4 08 	call	0x1188	; 0x1188 <group_push>
        //назначаем новую группу - ту, в которой голова
        group = ((gitem_t *)*head)->group;
     e30:	eb 81       	ldd	r30, Y+3	; 0x03
     e32:	fc 81       	ldd	r31, Y+4	; 0x04
     e34:	80 81       	ld	r24, Z
     e36:	91 81       	ldd	r25, Z+1	; 0x01
     e38:	fc 01       	movw	r30, r24
     e3a:	84 81       	ldd	r24, Z+4	; 0x04
     e3c:	95 81       	ldd	r25, Z+5	; 0x05
     e3e:	9a 83       	std	Y+2, r25	; 0x02
     e40:	89 83       	std	Y+1, r24	; 0x01
        gitem->group = group;
     e42:	ef 81       	ldd	r30, Y+7	; 0x07
     e44:	f8 85       	ldd	r31, Y+8	; 0x08
     e46:	89 81       	ldd	r24, Y+1	; 0x01
     e48:	9a 81       	ldd	r25, Y+2	; 0x02
     e4a:	95 83       	std	Z+5, r25	; 0x05
     e4c:	84 83       	std	Z+4, r24	; 0x04
        //количество элементов в группе увеличилось на 1
        group->el_num++;
     e4e:	e9 81       	ldd	r30, Y+1	; 0x01
     e50:	fa 81       	ldd	r31, Y+2	; 0x02
     e52:	83 81       	ldd	r24, Z+3	; 0x03
     e54:	94 81       	ldd	r25, Z+4	; 0x04
     e56:	01 96       	adiw	r24, 0x01	; 1
     e58:	e9 81       	ldd	r30, Y+1	; 0x01
     e5a:	fa 81       	ldd	r31, Y+2	; 0x02
     e5c:	94 83       	std	Z+4, r25	; 0x04
     e5e:	83 83       	std	Z+3, r24	; 0x03
     e60:	14 c0       	rjmp	.+40     	; 0xe8a <gitem_insert_group+0xe4>
    }
    else
    {
        // Пуста, gitem будет головой
        *head = (item_t *)gitem;
     e62:	8f 81       	ldd	r24, Y+7	; 0x07
     e64:	98 85       	ldd	r25, Y+8	; 0x08
     e66:	eb 81       	ldd	r30, Y+3	; 0x03
     e68:	fc 81       	ldd	r31, Y+4	; 0x04
     e6a:	91 83       	std	Z+1, r25	; 0x01
     e6c:	80 83       	st	Z, r24
        xlist->index |= mask;
     e6e:	e9 85       	ldd	r30, Y+9	; 0x09
     e70:	fa 85       	ldd	r31, Y+10	; 0x0a
     e72:	90 89       	ldd	r25, Z+16	; 0x10
     e74:	8d 81       	ldd	r24, Y+5	; 0x05
     e76:	89 2b       	or	r24, r25
     e78:	e9 85       	ldd	r30, Y+9	; 0x09
     e7a:	fa 85       	ldd	r31, Y+10	; 0x0a
     e7c:	80 8b       	std	Z+16, r24	; 0x10
        group->link = (void *)xlist;
     e7e:	e9 81       	ldd	r30, Y+1	; 0x01
     e80:	fa 81       	ldd	r31, Y+2	; 0x02
     e82:	89 85       	ldd	r24, Y+9	; 0x09
     e84:	9a 85       	ldd	r25, Y+10	; 0x0a
     e86:	91 83       	std	Z+1, r25	; 0x01
     e88:	80 83       	st	Z, r24
    }
}
     e8a:	2a 96       	adiw	r28, 0x0a	; 10
     e8c:	0f b6       	in	r0, 0x3f	; 63
     e8e:	f8 94       	cli
     e90:	de bf       	out	0x3e, r29	; 62
     e92:	0f be       	out	0x3f, r0	; 63
     e94:	cd bf       	out	0x3d, r28	; 61
     e96:	cf 91       	pop	r28
     e98:	df 91       	pop	r29
     e9a:	08 95       	ret

00000e9c <gitem_fast_cut>:
// Быстро вырезать из списка (не обнуляется указатель gitem->group->link)
void gitem_fast_cut(gitem_t * gitem)
{
     e9c:	df 93       	push	r29
     e9e:	cf 93       	push	r28
     ea0:	00 d0       	rcall	.+0      	; 0xea2 <gitem_fast_cut+0x6>
     ea2:	00 d0       	rcall	.+0      	; 0xea4 <gitem_fast_cut+0x8>
     ea4:	0f 92       	push	r0
     ea6:	cd b7       	in	r28, 0x3d	; 61
     ea8:	de b7       	in	r29, 0x3e	; 62
     eaa:	9d 83       	std	Y+5, r25	; 0x05
     eac:	8c 83       	std	Y+4, r24	; 0x04
    prio_t prio = gitem->group->prio;
     eae:	ec 81       	ldd	r30, Y+4	; 0x04
     eb0:	fd 81       	ldd	r31, Y+5	; 0x05
     eb2:	04 80       	ldd	r0, Z+4	; 0x04
     eb4:	f5 81       	ldd	r31, Z+5	; 0x05
     eb6:	e0 2d       	mov	r30, r0
     eb8:	82 81       	ldd	r24, Z+2	; 0x02
     eba:	8b 83       	std	Y+3, r24	; 0x03
    xlist_t * xlist = (xlist_t *)gitem->group->link;
     ebc:	ec 81       	ldd	r30, Y+4	; 0x04
     ebe:	fd 81       	ldd	r31, Y+5	; 0x05
     ec0:	04 80       	ldd	r0, Z+4	; 0x04
     ec2:	f5 81       	ldd	r31, Z+5	; 0x05
     ec4:	e0 2d       	mov	r30, r0
     ec6:	80 81       	ld	r24, Z
     ec8:	91 81       	ldd	r25, Z+1	; 0x01
     eca:	9a 83       	std	Y+2, r25	; 0x02
     ecc:	89 83       	std	Y+1, r24	; 0x01
    // Является ли эта часть списка группированной?
    if( gitem->group->el_num > (count_t)1 )
     ece:	ec 81       	ldd	r30, Y+4	; 0x04
     ed0:	fd 81       	ldd	r31, Y+5	; 0x05
     ed2:	04 80       	ldd	r0, Z+4	; 0x04
     ed4:	f5 81       	ldd	r31, Z+5	; 0x05
     ed6:	e0 2d       	mov	r30, r0
     ed8:	83 81       	ldd	r24, Z+3	; 0x03
     eda:	94 81       	ldd	r25, Z+4	; 0x04
     edc:	82 30       	cpi	r24, 0x02	; 2
     ede:	91 05       	cpc	r25, r1
     ee0:	b8 f0       	brcs	.+46     	; 0xf10 <gitem_fast_cut+0x74>
    {
        //Группированная часть списка, будем вырезать из группы с выделением новой группы из Пула
        // В текущей группе стало на 1 элемент меньше
        gitem->group->el_num--;
     ee2:	ec 81       	ldd	r30, Y+4	; 0x04
     ee4:	fd 81       	ldd	r31, Y+5	; 0x05
     ee6:	04 80       	ldd	r0, Z+4	; 0x04
     ee8:	f5 81       	ldd	r31, Z+5	; 0x05
     eea:	e0 2d       	mov	r30, r0
     eec:	83 81       	ldd	r24, Z+3	; 0x03
     eee:	94 81       	ldd	r25, Z+4	; 0x04
     ef0:	01 97       	sbiw	r24, 0x01	; 1
     ef2:	94 83       	std	Z+4, r25	; 0x04
     ef4:	83 83       	std	Z+3, r24	; 0x03
        //выделяем новую группу
        gitem->group = group_pop();
     ef6:	0e 94 de 08 	call	0x11bc	; 0x11bc <group_pop>
     efa:	ec 81       	ldd	r30, Y+4	; 0x04
     efc:	fd 81       	ldd	r31, Y+5	; 0x05
     efe:	95 83       	std	Z+5, r25	; 0x05
     f00:	84 83       	std	Z+4, r24	; 0x04
        // Правильный приоритет, количество элементов в группе, выделенной из пула должно быть равно 1
        gitem->group->prio = (prio_t)prio;
     f02:	ec 81       	ldd	r30, Y+4	; 0x04
     f04:	fd 81       	ldd	r31, Y+5	; 0x05
     f06:	04 80       	ldd	r0, Z+4	; 0x04
     f08:	f5 81       	ldd	r31, Z+5	; 0x05
     f0a:	e0 2d       	mov	r30, r0
     f0c:	8b 81       	ldd	r24, Y+3	; 0x03
     f0e:	82 83       	std	Z+2, r24	; 0x02
    }
    //Является ли элемент единственным в своей части списка?
    if( ((item_t *)gitem)->next == (item_t *)gitem )
     f10:	ec 81       	ldd	r30, Y+4	; 0x04
     f12:	fd 81       	ldd	r31, Y+5	; 0x05
     f14:	20 81       	ld	r18, Z
     f16:	31 81       	ldd	r19, Z+1	; 0x01
     f18:	8c 81       	ldd	r24, Y+4	; 0x04
     f1a:	9d 81       	ldd	r25, Y+5	; 0x05
     f1c:	28 17       	cp	r18, r24
     f1e:	39 07       	cpc	r19, r25
     f20:	09 f5       	brne	.+66     	; 0xf64 <gitem_fast_cut+0xc8>
    {
        // Да, является!
        xlist->item[prio] = (item_t *)0;
     f22:	8b 81       	ldd	r24, Y+3	; 0x03
     f24:	88 2f       	mov	r24, r24
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	29 81       	ldd	r18, Y+1	; 0x01
     f2a:	3a 81       	ldd	r19, Y+2	; 0x02
     f2c:	88 0f       	add	r24, r24
     f2e:	99 1f       	adc	r25, r25
     f30:	f9 01       	movw	r30, r18
     f32:	e8 0f       	add	r30, r24
     f34:	f9 1f       	adc	r31, r25
     f36:	11 82       	std	Z+1, r1	; 0x01
     f38:	10 82       	st	Z, r1
        xlist->index &= ~(((index_t)1)<<prio);
     f3a:	e9 81       	ldd	r30, Y+1	; 0x01
     f3c:	fa 81       	ldd	r31, Y+2	; 0x02
     f3e:	80 89       	ldd	r24, Z+16	; 0x10
     f40:	48 2f       	mov	r20, r24
     f42:	8b 81       	ldd	r24, Y+3	; 0x03
     f44:	28 2f       	mov	r18, r24
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	02 2e       	mov	r0, r18
     f4e:	02 c0       	rjmp	.+4      	; 0xf54 <gitem_fast_cut+0xb8>
     f50:	88 0f       	add	r24, r24
     f52:	99 1f       	adc	r25, r25
     f54:	0a 94       	dec	r0
     f56:	e2 f7       	brpl	.-8      	; 0xf50 <gitem_fast_cut+0xb4>
     f58:	80 95       	com	r24
     f5a:	84 23       	and	r24, r20
     f5c:	e9 81       	ldd	r30, Y+1	; 0x01
     f5e:	fa 81       	ldd	r31, Y+2	; 0x02
     f60:	80 8b       	std	Z+16, r24	; 0x10
     f62:	1a c0       	rjmp	.+52     	; 0xf98 <gitem_fast_cut+0xfc>
    }
    else
    {
        // Нет, не является!
        // Является ли элемент головой своей части списка?
        if( xlist->item[(prio_t)prio] == (item_t *)gitem )
     f64:	8b 81       	ldd	r24, Y+3	; 0x03
     f66:	88 2f       	mov	r24, r24
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	29 81       	ldd	r18, Y+1	; 0x01
     f6c:	3a 81       	ldd	r19, Y+2	; 0x02
     f6e:	88 0f       	add	r24, r24
     f70:	99 1f       	adc	r25, r25
     f72:	f9 01       	movw	r30, r18
     f74:	e8 0f       	add	r30, r24
     f76:	f9 1f       	adc	r31, r25
     f78:	20 81       	ld	r18, Z
     f7a:	31 81       	ldd	r19, Z+1	; 0x01
     f7c:	8c 81       	ldd	r24, Y+4	; 0x04
     f7e:	9d 81       	ldd	r25, Y+5	; 0x05
     f80:	28 17       	cp	r18, r24
     f82:	39 07       	cpc	r19, r25
     f84:	29 f4       	brne	.+10     	; 0xf90 <gitem_fast_cut+0xf4>
        {
            // Является, список надо переключить
            xlist_switch( xlist, prio );
     f86:	89 81       	ldd	r24, Y+1	; 0x01
     f88:	9a 81       	ldd	r25, Y+2	; 0x02
     f8a:	6b 81       	ldd	r22, Y+3	; 0x03
     f8c:	0e 94 40 11 	call	0x2280	; 0x2280 <xlist_switch>
        }
        // Собственно - вырезаем элемент
        item_cut( (item_t *)gitem );
     f90:	8c 81       	ldd	r24, Y+4	; 0x04
     f92:	9d 81       	ldd	r25, Y+5	; 0x05
     f94:	0e 94 81 09 	call	0x1302	; 0x1302 <item_cut>
    }
}
     f98:	0f 90       	pop	r0
     f9a:	0f 90       	pop	r0
     f9c:	0f 90       	pop	r0
     f9e:	0f 90       	pop	r0
     fa0:	0f 90       	pop	r0
     fa2:	cf 91       	pop	r28
     fa4:	df 91       	pop	r29
     fa6:	08 95       	ret

00000fa8 <gitem_cut>:
// Вырезать из списка
void gitem_cut(gitem_t * gitem)
{
     fa8:	df 93       	push	r29
     faa:	cf 93       	push	r28
     fac:	00 d0       	rcall	.+0      	; 0xfae <gitem_cut+0x6>
     fae:	cd b7       	in	r28, 0x3d	; 61
     fb0:	de b7       	in	r29, 0x3e	; 62
     fb2:	9a 83       	std	Y+2, r25	; 0x02
     fb4:	89 83       	std	Y+1, r24	; 0x01
    gitem_fast_cut( gitem );
     fb6:	89 81       	ldd	r24, Y+1	; 0x01
     fb8:	9a 81       	ldd	r25, Y+2	; 0x02
     fba:	0e 94 4e 07 	call	0xe9c	; 0xe9c <gitem_fast_cut>
    gitem->group->link = (void *)0;
     fbe:	e9 81       	ldd	r30, Y+1	; 0x01
     fc0:	fa 81       	ldd	r31, Y+2	; 0x02
     fc2:	04 80       	ldd	r0, Z+4	; 0x04
     fc4:	f5 81       	ldd	r31, Z+5	; 0x05
     fc6:	e0 2d       	mov	r30, r0
     fc8:	11 82       	std	Z+1, r1	; 0x01
     fca:	10 82       	st	Z, r1
}
     fcc:	0f 90       	pop	r0
     fce:	0f 90       	pop	r0
     fd0:	cf 91       	pop	r28
     fd2:	df 91       	pop	r29
     fd4:	08 95       	ret

00000fd6 <gitem_xlist_merge>:
 1) Оба списка содержат только объекты типа gitem_t
 2) В списке source на каждом уровне приоритета все объекты типа gitem_t приенадлежат к одной группе.
 3) Элементы списка source, находящиеся на разных уровнях приоритета, пренадлежат разным группам.
*/
void gitem_xlist_merge(xlist_t * source, xlist_t * destignation)
{
     fd6:	df 93       	push	r29
     fd8:	cf 93       	push	r28
     fda:	cd b7       	in	r28, 0x3d	; 61
     fdc:	de b7       	in	r29, 0x3e	; 62
     fde:	2c 97       	sbiw	r28, 0x0c	; 12
     fe0:	0f b6       	in	r0, 0x3f	; 63
     fe2:	f8 94       	cli
     fe4:	de bf       	out	0x3e, r29	; 62
     fe6:	0f be       	out	0x3f, r0	; 63
     fe8:	cd bf       	out	0x3d, r28	; 61
     fea:	9a 87       	std	Y+10, r25	; 0x0a
     fec:	89 87       	std	Y+9, r24	; 0x09
     fee:	7c 87       	std	Y+12, r23	; 0x0c
     ff0:	6b 87       	std	Y+11, r22	; 0x0b
    index_t mask = (index_t)1;
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	88 87       	std	Y+8, r24	; 0x08
    prio_t current_prio = (prio_t)0;
     ff6:	1f 82       	std	Y+7, r1	; 0x07
     ff8:	9a c0       	rjmp	.+308    	; 0x112e <gitem_xlist_merge+0x158>
    while( mask )
    {
        // Есть че перенести?
        if( mask & source->index )
     ffa:	e9 85       	ldd	r30, Y+9	; 0x09
     ffc:	fa 85       	ldd	r31, Y+10	; 0x0a
     ffe:	90 89       	ldd	r25, Z+16	; 0x10
    1000:	88 85       	ldd	r24, Y+8	; 0x08
    1002:	89 23       	and	r24, r25
    1004:	88 23       	and	r24, r24
    1006:	09 f4       	brne	.+2      	; 0x100a <gitem_xlist_merge+0x34>
    1008:	8c c0       	rjmp	.+280    	; 0x1122 <gitem_xlist_merge+0x14c>
        {
            // Есть!
            // Есть куда переносить?
            if( mask & destignation->index )
    100a:	eb 85       	ldd	r30, Y+11	; 0x0b
    100c:	fc 85       	ldd	r31, Y+12	; 0x0c
    100e:	90 89       	ldd	r25, Z+16	; 0x10
    1010:	88 85       	ldd	r24, Y+8	; 0x08
    1012:	89 23       	and	r24, r25
    1014:	88 23       	and	r24, r24
    1016:	09 f4       	brne	.+2      	; 0x101a <gitem_xlist_merge+0x44>
    1018:	43 c0       	rjmp	.+134    	; 0x10a0 <gitem_xlist_merge+0xca>
            {
                //Есть!
                // Сшиваем 2 2-связных списка!!!
                item_t * src = source->item[current_prio];
    101a:	8f 81       	ldd	r24, Y+7	; 0x07
    101c:	88 2f       	mov	r24, r24
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	29 85       	ldd	r18, Y+9	; 0x09
    1022:	3a 85       	ldd	r19, Y+10	; 0x0a
    1024:	88 0f       	add	r24, r24
    1026:	99 1f       	adc	r25, r25
    1028:	f9 01       	movw	r30, r18
    102a:	e8 0f       	add	r30, r24
    102c:	f9 1f       	adc	r31, r25
    102e:	80 81       	ld	r24, Z
    1030:	91 81       	ldd	r25, Z+1	; 0x01
    1032:	9e 83       	std	Y+6, r25	; 0x06
    1034:	8d 83       	std	Y+5, r24	; 0x05
                item_t * dst = destignation->item[current_prio];
    1036:	8f 81       	ldd	r24, Y+7	; 0x07
    1038:	88 2f       	mov	r24, r24
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	2b 85       	ldd	r18, Y+11	; 0x0b
    103e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	f9 01       	movw	r30, r18
    1046:	e8 0f       	add	r30, r24
    1048:	f9 1f       	adc	r31, r25
    104a:	80 81       	ld	r24, Z
    104c:	91 81       	ldd	r25, Z+1	; 0x01
    104e:	9c 83       	std	Y+4, r25	; 0x04
    1050:	8b 83       	std	Y+3, r24	; 0x03
                src->prev->next = dst;
    1052:	ed 81       	ldd	r30, Y+5	; 0x05
    1054:	fe 81       	ldd	r31, Y+6	; 0x06
    1056:	02 80       	ldd	r0, Z+2	; 0x02
    1058:	f3 81       	ldd	r31, Z+3	; 0x03
    105a:	e0 2d       	mov	r30, r0
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	9c 81       	ldd	r25, Y+4	; 0x04
    1060:	91 83       	std	Z+1, r25	; 0x01
    1062:	80 83       	st	Z, r24
                dst->prev->next = src;
    1064:	eb 81       	ldd	r30, Y+3	; 0x03
    1066:	fc 81       	ldd	r31, Y+4	; 0x04
    1068:	02 80       	ldd	r0, Z+2	; 0x02
    106a:	f3 81       	ldd	r31, Z+3	; 0x03
    106c:	e0 2d       	mov	r30, r0
    106e:	8d 81       	ldd	r24, Y+5	; 0x05
    1070:	9e 81       	ldd	r25, Y+6	; 0x06
    1072:	91 83       	std	Z+1, r25	; 0x01
    1074:	80 83       	st	Z, r24
                item_t * buf = dst->prev;
    1076:	eb 81       	ldd	r30, Y+3	; 0x03
    1078:	fc 81       	ldd	r31, Y+4	; 0x04
    107a:	82 81       	ldd	r24, Z+2	; 0x02
    107c:	93 81       	ldd	r25, Z+3	; 0x03
    107e:	9a 83       	std	Y+2, r25	; 0x02
    1080:	89 83       	std	Y+1, r24	; 0x01
                dst->prev = src->prev;
    1082:	ed 81       	ldd	r30, Y+5	; 0x05
    1084:	fe 81       	ldd	r31, Y+6	; 0x06
    1086:	82 81       	ldd	r24, Z+2	; 0x02
    1088:	93 81       	ldd	r25, Z+3	; 0x03
    108a:	eb 81       	ldd	r30, Y+3	; 0x03
    108c:	fc 81       	ldd	r31, Y+4	; 0x04
    108e:	93 83       	std	Z+3, r25	; 0x03
    1090:	82 83       	std	Z+2, r24	; 0x02
                src->prev = buf;
    1092:	ed 81       	ldd	r30, Y+5	; 0x05
    1094:	fe 81       	ldd	r31, Y+6	; 0x06
    1096:	89 81       	ldd	r24, Y+1	; 0x01
    1098:	9a 81       	ldd	r25, Y+2	; 0x02
    109a:	93 83       	std	Z+3, r25	; 0x03
    109c:	82 83       	std	Z+2, r24	; 0x02
    109e:	21 c0       	rjmp	.+66     	; 0x10e2 <gitem_xlist_merge+0x10c>
            }
            else
            {
                //Нет, тупо переносим всю группу.
                destignation->item[current_prio] = source->item[current_prio];
    10a0:	8f 81       	ldd	r24, Y+7	; 0x07
    10a2:	68 2f       	mov	r22, r24
    10a4:	70 e0       	ldi	r23, 0x00	; 0
    10a6:	8f 81       	ldd	r24, Y+7	; 0x07
    10a8:	88 2f       	mov	r24, r24
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	29 85       	ldd	r18, Y+9	; 0x09
    10ae:	3a 85       	ldd	r19, Y+10	; 0x0a
    10b0:	88 0f       	add	r24, r24
    10b2:	99 1f       	adc	r25, r25
    10b4:	f9 01       	movw	r30, r18
    10b6:	e8 0f       	add	r30, r24
    10b8:	f9 1f       	adc	r31, r25
    10ba:	40 81       	ld	r20, Z
    10bc:	51 81       	ldd	r21, Z+1	; 0x01
    10be:	2b 85       	ldd	r18, Y+11	; 0x0b
    10c0:	3c 85       	ldd	r19, Y+12	; 0x0c
    10c2:	cb 01       	movw	r24, r22
    10c4:	88 0f       	add	r24, r24
    10c6:	99 1f       	adc	r25, r25
    10c8:	f9 01       	movw	r30, r18
    10ca:	e8 0f       	add	r30, r24
    10cc:	f9 1f       	adc	r31, r25
    10ce:	51 83       	std	Z+1, r21	; 0x01
    10d0:	40 83       	st	Z, r20
                destignation->index |= mask;
    10d2:	eb 85       	ldd	r30, Y+11	; 0x0b
    10d4:	fc 85       	ldd	r31, Y+12	; 0x0c
    10d6:	90 89       	ldd	r25, Z+16	; 0x10
    10d8:	88 85       	ldd	r24, Y+8	; 0x08
    10da:	89 2b       	or	r24, r25
    10dc:	eb 85       	ldd	r30, Y+11	; 0x0b
    10de:	fc 85       	ldd	r31, Y+12	; 0x0c
    10e0:	80 8b       	std	Z+16, r24	; 0x10
            }
            // Вот почему эта функция отнесена к методам gitem_t
            ((gitem_t *)source->item[current_prio])->group->link = (void *)destignation;
    10e2:	8f 81       	ldd	r24, Y+7	; 0x07
    10e4:	88 2f       	mov	r24, r24
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	29 85       	ldd	r18, Y+9	; 0x09
    10ea:	3a 85       	ldd	r19, Y+10	; 0x0a
    10ec:	88 0f       	add	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	f9 01       	movw	r30, r18
    10f2:	e8 0f       	add	r30, r24
    10f4:	f9 1f       	adc	r31, r25
    10f6:	80 81       	ld	r24, Z
    10f8:	91 81       	ldd	r25, Z+1	; 0x01
    10fa:	fc 01       	movw	r30, r24
    10fc:	04 80       	ldd	r0, Z+4	; 0x04
    10fe:	f5 81       	ldd	r31, Z+5	; 0x05
    1100:	e0 2d       	mov	r30, r0
    1102:	8b 85       	ldd	r24, Y+11	; 0x0b
    1104:	9c 85       	ldd	r25, Y+12	; 0x0c
    1106:	91 83       	std	Z+1, r25	; 0x01
    1108:	80 83       	st	Z, r24
            // Перенос закончен, обнуляем указатель
            source->item[(prio_t)current_prio] = (item_t *)0;
    110a:	8f 81       	ldd	r24, Y+7	; 0x07
    110c:	88 2f       	mov	r24, r24
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	29 85       	ldd	r18, Y+9	; 0x09
    1112:	3a 85       	ldd	r19, Y+10	; 0x0a
    1114:	88 0f       	add	r24, r24
    1116:	99 1f       	adc	r25, r25
    1118:	f9 01       	movw	r30, r18
    111a:	e8 0f       	add	r30, r24
    111c:	f9 1f       	adc	r31, r25
    111e:	11 82       	std	Z+1, r1	; 0x01
    1120:	10 82       	st	Z, r1
        }
        mask<<=1;
    1122:	88 85       	ldd	r24, Y+8	; 0x08
    1124:	88 0f       	add	r24, r24
    1126:	88 87       	std	Y+8, r24	; 0x08
        current_prio++;
    1128:	8f 81       	ldd	r24, Y+7	; 0x07
    112a:	8f 5f       	subi	r24, 0xFF	; 255
    112c:	8f 83       	std	Y+7, r24	; 0x07
*/
void gitem_xlist_merge(xlist_t * source, xlist_t * destignation)
{
    index_t mask = (index_t)1;
    prio_t current_prio = (prio_t)0;
    while( mask )
    112e:	88 85       	ldd	r24, Y+8	; 0x08
    1130:	88 23       	and	r24, r24
    1132:	09 f0       	breq	.+2      	; 0x1136 <gitem_xlist_merge+0x160>
    1134:	62 cf       	rjmp	.-316    	; 0xffa <gitem_xlist_merge+0x24>
        }
        mask<<=1;
        current_prio++;
    }
    // Список полностью перенесен, обнуляем индекс
    source->index = (index_t)0;
    1136:	e9 85       	ldd	r30, Y+9	; 0x09
    1138:	fa 85       	ldd	r31, Y+10	; 0x0a
    113a:	10 8a       	std	Z+16, r1	; 0x10
}
    113c:	2c 96       	adiw	r28, 0x0c	; 12
    113e:	0f b6       	in	r0, 0x3f	; 63
    1140:	f8 94       	cli
    1142:	de bf       	out	0x3e, r29	; 62
    1144:	0f be       	out	0x3f, r0	; 63
    1146:	cd bf       	out	0x3d, r28	; 61
    1148:	cf 91       	pop	r28
    114a:	df 91       	pop	r29
    114c:	08 95       	ret

0000114e <group_init>:
*****************************************************************************************/
#include "../include/bugurt.h"
//Методы group_t
// инициация
void group_init(group_t * group, prio_t prio)
{
    114e:	df 93       	push	r29
    1150:	cf 93       	push	r28
    1152:	00 d0       	rcall	.+0      	; 0x1154 <group_init+0x6>
    1154:	0f 92       	push	r0
    1156:	cd b7       	in	r28, 0x3d	; 61
    1158:	de b7       	in	r29, 0x3e	; 62
    115a:	9a 83       	std	Y+2, r25	; 0x02
    115c:	89 83       	std	Y+1, r24	; 0x01
    115e:	6b 83       	std	Y+3, r22	; 0x03
    group->link = (void *)0;
    1160:	e9 81       	ldd	r30, Y+1	; 0x01
    1162:	fa 81       	ldd	r31, Y+2	; 0x02
    1164:	11 82       	std	Z+1, r1	; 0x01
    1166:	10 82       	st	Z, r1
    group->prio = prio;
    1168:	e9 81       	ldd	r30, Y+1	; 0x01
    116a:	fa 81       	ldd	r31, Y+2	; 0x02
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	82 83       	std	Z+2, r24	; 0x02
    // группа - часть gitem_t, количество элементов - 1
    group->el_num = (count_t)1;
    1170:	e9 81       	ldd	r30, Y+1	; 0x01
    1172:	fa 81       	ldd	r31, Y+2	; 0x02
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	94 83       	std	Z+4, r25	; 0x04
    117a:	83 83       	std	Z+3, r24	; 0x03
}
    117c:	0f 90       	pop	r0
    117e:	0f 90       	pop	r0
    1180:	0f 90       	pop	r0
    1182:	cf 91       	pop	r28
    1184:	df 91       	pop	r29
    1186:	08 95       	ret

00001188 <group_push>:
// положить в ПУЛ
void group_push(group_t * group)
{
    1188:	df 93       	push	r29
    118a:	cf 93       	push	r28
    118c:	00 d0       	rcall	.+0      	; 0x118e <group_push+0x6>
    118e:	cd b7       	in	r28, 0x3d	; 61
    1190:	de b7       	in	r29, 0x3e	; 62
    1192:	9a 83       	std	Y+2, r25	; 0x02
    1194:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    // блокируем пул
    spin_lock( &kernel.pool_lock );
#endif
    group->link = (void *)kernel.pool;
    1196:	80 91 f6 01 	lds	r24, 0x01F6
    119a:	90 91 f7 01 	lds	r25, 0x01F7
    119e:	e9 81       	ldd	r30, Y+1	; 0x01
    11a0:	fa 81       	ldd	r31, Y+2	; 0x02
    11a2:	91 83       	std	Z+1, r25	; 0x01
    11a4:	80 83       	st	Z, r24
    kernel.pool = group;
    11a6:	89 81       	ldd	r24, Y+1	; 0x01
    11a8:	9a 81       	ldd	r25, Y+2	; 0x02
    11aa:	90 93 f7 01 	sts	0x01F7, r25
    11ae:	80 93 f6 01 	sts	0x01F6, r24
#ifdef CONFIG_MP
    // разблокируем пул
    spin_unlock( &kernel.pool_lock );
#endif
}
    11b2:	0f 90       	pop	r0
    11b4:	0f 90       	pop	r0
    11b6:	cf 91       	pop	r28
    11b8:	df 91       	pop	r29
    11ba:	08 95       	ret

000011bc <group_pop>:
// взять из пула, если есть, а есть всегда, избыточность же!
group_t * group_pop(void)
{
    11bc:	df 93       	push	r29
    11be:	cf 93       	push	r28
    11c0:	00 d0       	rcall	.+0      	; 0x11c2 <group_pop+0x6>
    11c2:	cd b7       	in	r28, 0x3d	; 61
    11c4:	de b7       	in	r29, 0x3e	; 62
#ifdef CONFIG_MP
    // блокируем пул
    spin_lock( &kernel.pool_lock );
#endif
    group_t * group = kernel.pool;
    11c6:	80 91 f6 01 	lds	r24, 0x01F6
    11ca:	90 91 f7 01 	lds	r25, 0x01F7
    11ce:	9a 83       	std	Y+2, r25	; 0x02
    11d0:	89 83       	std	Y+1, r24	; 0x01
    kernel.pool = (group_t *)group->link;
    11d2:	e9 81       	ldd	r30, Y+1	; 0x01
    11d4:	fa 81       	ldd	r31, Y+2	; 0x02
    11d6:	80 81       	ld	r24, Z
    11d8:	91 81       	ldd	r25, Z+1	; 0x01
    11da:	90 93 f7 01 	sts	0x01F7, r25
    11de:	80 93 f6 01 	sts	0x01F6, r24
#ifdef CONFIG_MP
    // разблокируем пул
    spin_unlock( &kernel.pool_lock );
#endif
    return group;
    11e2:	89 81       	ldd	r24, Y+1	; 0x01
    11e4:	9a 81       	ldd	r25, Y+2	; 0x02
}
    11e6:	0f 90       	pop	r0
    11e8:	0f 90       	pop	r0
    11ea:	cf 91       	pop	r28
    11ec:	df 91       	pop	r29
    11ee:	08 95       	ret

000011f0 <index_search>:
*                           http://www.0chan.ru/r/res/9996.html                          *
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
prio_t index_search(index_t index)
{
    11f0:	df 93       	push	r29
    11f2:	cf 93       	push	r28
    11f4:	00 d0       	rcall	.+0      	; 0x11f6 <index_search+0x6>
    11f6:	00 d0       	rcall	.+0      	; 0x11f8 <index_search+0x8>
    11f8:	00 d0       	rcall	.+0      	; 0x11fa <index_search+0xa>
    11fa:	cd b7       	in	r28, 0x3d	; 61
    11fc:	de b7       	in	r29, 0x3e	; 62
    11fe:	8e 83       	std	Y+6, r24	; 0x06
    prio_t prio = (prio_t)0;
    1200:	1d 82       	std	Y+5, r1	; 0x05
        но, т.к. BITS_IN_INDEX_T фиксировано для данной конфигурации,
        то получается время выполнения - O(1), ВСЕГДА.

        И да, предсказуемость + переносимость > быстродействие.
        */
    index_t upper = ~(index_t)0, lower = ~(index_t)0, middle;
    1202:	8f ef       	ldi	r24, 0xFF	; 255
    1204:	8c 83       	std	Y+4, r24	; 0x04
    1206:	8f ef       	ldi	r24, 0xFF	; 255
    1208:	8b 83       	std	Y+3, r24	; 0x03
    prio_t step = (prio_t)BITS_IN_INDEX_T;
    120a:	88 e0       	ldi	r24, 0x08	; 8
    120c:	89 83       	std	Y+1, r24	; 0x01
    120e:	22 c0       	rjmp	.+68     	; 0x1254 <index_search+0x64>
    while( step )
    {
        step>>=1; // делим шаг пополам
    1210:	89 81       	ldd	r24, Y+1	; 0x01
    1212:	86 95       	lsr	r24
    1214:	89 83       	std	Y+1, r24	; 0x01
        middle = lower>>step;
    1216:	8b 81       	ldd	r24, Y+3	; 0x03
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	89 81       	ldd	r24, Y+1	; 0x01
    121e:	88 2f       	mov	r24, r24
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	a9 01       	movw	r20, r18
    1224:	02 c0       	rjmp	.+4      	; 0x122a <index_search+0x3a>
    1226:	55 95       	asr	r21
    1228:	47 95       	ror	r20
    122a:	8a 95       	dec	r24
    122c:	e2 f7       	brpl	.-8      	; 0x1226 <index_search+0x36>
    122e:	ca 01       	movw	r24, r20
    1230:	8a 83       	std	Y+2, r24	; 0x02
        if( index & upper & middle )
    1232:	9e 81       	ldd	r25, Y+6	; 0x06
    1234:	8c 81       	ldd	r24, Y+4	; 0x04
    1236:	98 23       	and	r25, r24
    1238:	8a 81       	ldd	r24, Y+2	; 0x02
    123a:	89 23       	and	r24, r25
    123c:	88 23       	and	r24, r24
    123e:	19 f0       	breq	.+6      	; 0x1246 <index_search+0x56>
        {
            lower = middle;
    1240:	8a 81       	ldd	r24, Y+2	; 0x02
    1242:	8b 83       	std	Y+3, r24	; 0x03
    1244:	07 c0       	rjmp	.+14     	; 0x1254 <index_search+0x64>
        }
        else
        {
            upper = ~middle;
    1246:	8a 81       	ldd	r24, Y+2	; 0x02
    1248:	80 95       	com	r24
    124a:	8c 83       	std	Y+4, r24	; 0x04
            prio += step;
    124c:	9d 81       	ldd	r25, Y+5	; 0x05
    124e:	89 81       	ldd	r24, Y+1	; 0x01
    1250:	89 0f       	add	r24, r25
    1252:	8d 83       	std	Y+5, r24	; 0x05

        И да, предсказуемость + переносимость > быстродействие.
        */
    index_t upper = ~(index_t)0, lower = ~(index_t)0, middle;
    prio_t step = (prio_t)BITS_IN_INDEX_T;
    while( step )
    1254:	89 81       	ldd	r24, Y+1	; 0x01
    1256:	88 23       	and	r24, r24
    1258:	d9 f6       	brne	.-74     	; 0x1210 <index_search+0x20>
        if ( mask & index )break;
        prio++;
        mask<<=1;
    }
#endif
    return prio;
    125a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    125c:	26 96       	adiw	r28, 0x06	; 6
    125e:	0f b6       	in	r0, 0x3f	; 63
    1260:	f8 94       	cli
    1262:	de bf       	out	0x3e, r29	; 62
    1264:	0f be       	out	0x3f, r0	; 63
    1266:	cd bf       	out	0x3d, r28	; 61
    1268:	cf 91       	pop	r28
    126a:	df 91       	pop	r29
    126c:	08 95       	ret

0000126e <item_init>:
*****************************************************************************************/
#include "../include/bugurt.h"
//Методы элемента 2-связного списка
//инициация элемента
void item_init(item_t *item)
{
    126e:	df 93       	push	r29
    1270:	cf 93       	push	r28
    1272:	00 d0       	rcall	.+0      	; 0x1274 <item_init+0x6>
    1274:	cd b7       	in	r28, 0x3d	; 61
    1276:	de b7       	in	r29, 0x3e	; 62
    1278:	9a 83       	std	Y+2, r25	; 0x02
    127a:	89 83       	std	Y+1, r24	; 0x01
    item->prev = item;
    127c:	e9 81       	ldd	r30, Y+1	; 0x01
    127e:	fa 81       	ldd	r31, Y+2	; 0x02
    1280:	89 81       	ldd	r24, Y+1	; 0x01
    1282:	9a 81       	ldd	r25, Y+2	; 0x02
    1284:	93 83       	std	Z+3, r25	; 0x03
    1286:	82 83       	std	Z+2, r24	; 0x02
    item->next = item;
    1288:	e9 81       	ldd	r30, Y+1	; 0x01
    128a:	fa 81       	ldd	r31, Y+2	; 0x02
    128c:	89 81       	ldd	r24, Y+1	; 0x01
    128e:	9a 81       	ldd	r25, Y+2	; 0x02
    1290:	91 83       	std	Z+1, r25	; 0x01
    1292:	80 83       	st	Z, r24
}
    1294:	0f 90       	pop	r0
    1296:	0f 90       	pop	r0
    1298:	cf 91       	pop	r28
    129a:	df 91       	pop	r29
    129c:	08 95       	ret

0000129e <item_insert>:
//Вставить элемент
void item_insert(item_t *item, item_t *head)
{
    129e:	df 93       	push	r29
    12a0:	cf 93       	push	r28
    12a2:	00 d0       	rcall	.+0      	; 0x12a4 <item_insert+0x6>
    12a4:	00 d0       	rcall	.+0      	; 0x12a6 <item_insert+0x8>
    12a6:	00 d0       	rcall	.+0      	; 0x12a8 <item_insert+0xa>
    12a8:	cd b7       	in	r28, 0x3d	; 61
    12aa:	de b7       	in	r29, 0x3e	; 62
    12ac:	9c 83       	std	Y+4, r25	; 0x04
    12ae:	8b 83       	std	Y+3, r24	; 0x03
    12b0:	7e 83       	std	Y+6, r23	; 0x06
    12b2:	6d 83       	std	Y+5, r22	; 0x05
    // "хвост" списка
    item_t * tail = head->prev;
    12b4:	ed 81       	ldd	r30, Y+5	; 0x05
    12b6:	fe 81       	ldd	r31, Y+6	; 0x06
    12b8:	82 81       	ldd	r24, Z+2	; 0x02
    12ba:	93 81       	ldd	r25, Z+3	; 0x03
    12bc:	9a 83       	std	Y+2, r25	; 0x02
    12be:	89 83       	std	Y+1, r24	; 0x01

    // Вставляем элемент между "головой" и "хвостом"
    item->prev = tail;
    12c0:	eb 81       	ldd	r30, Y+3	; 0x03
    12c2:	fc 81       	ldd	r31, Y+4	; 0x04
    12c4:	89 81       	ldd	r24, Y+1	; 0x01
    12c6:	9a 81       	ldd	r25, Y+2	; 0x02
    12c8:	93 83       	std	Z+3, r25	; 0x03
    12ca:	82 83       	std	Z+2, r24	; 0x02
    item->next = head;
    12cc:	eb 81       	ldd	r30, Y+3	; 0x03
    12ce:	fc 81       	ldd	r31, Y+4	; 0x04
    12d0:	8d 81       	ldd	r24, Y+5	; 0x05
    12d2:	9e 81       	ldd	r25, Y+6	; 0x06
    12d4:	91 83       	std	Z+1, r25	; 0x01
    12d6:	80 83       	st	Z, r24

    head->prev = item;
    12d8:	ed 81       	ldd	r30, Y+5	; 0x05
    12da:	fe 81       	ldd	r31, Y+6	; 0x06
    12dc:	8b 81       	ldd	r24, Y+3	; 0x03
    12de:	9c 81       	ldd	r25, Y+4	; 0x04
    12e0:	93 83       	std	Z+3, r25	; 0x03
    12e2:	82 83       	std	Z+2, r24	; 0x02
    tail->next = item;
    12e4:	e9 81       	ldd	r30, Y+1	; 0x01
    12e6:	fa 81       	ldd	r31, Y+2	; 0x02
    12e8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ea:	9c 81       	ldd	r25, Y+4	; 0x04
    12ec:	91 83       	std	Z+1, r25	; 0x01
    12ee:	80 83       	st	Z, r24
}
    12f0:	26 96       	adiw	r28, 0x06	; 6
    12f2:	0f b6       	in	r0, 0x3f	; 63
    12f4:	f8 94       	cli
    12f6:	de bf       	out	0x3e, r29	; 62
    12f8:	0f be       	out	0x3f, r0	; 63
    12fa:	cd bf       	out	0x3d, r28	; 61
    12fc:	cf 91       	pop	r28
    12fe:	df 91       	pop	r29
    1300:	08 95       	ret

00001302 <item_cut>:
//Вырезать элемент
void item_cut( item_t *item )
{
    1302:	df 93       	push	r29
    1304:	cf 93       	push	r28
    1306:	00 d0       	rcall	.+0      	; 0x1308 <item_cut+0x6>
    1308:	00 d0       	rcall	.+0      	; 0x130a <item_cut+0x8>
    130a:	00 d0       	rcall	.+0      	; 0x130c <item_cut+0xa>
    130c:	cd b7       	in	r28, 0x3d	; 61
    130e:	de b7       	in	r29, 0x3e	; 62
    1310:	9e 83       	std	Y+6, r25	; 0x06
    1312:	8d 83       	std	Y+5, r24	; 0x05
    item_t * prev = item->prev; //Предыдущий элемент
    1314:	ed 81       	ldd	r30, Y+5	; 0x05
    1316:	fe 81       	ldd	r31, Y+6	; 0x06
    1318:	82 81       	ldd	r24, Z+2	; 0x02
    131a:	93 81       	ldd	r25, Z+3	; 0x03
    131c:	9c 83       	std	Y+4, r25	; 0x04
    131e:	8b 83       	std	Y+3, r24	; 0x03
    item_t * next = item->next; //Следующий элемент
    1320:	ed 81       	ldd	r30, Y+5	; 0x05
    1322:	fe 81       	ldd	r31, Y+6	; 0x06
    1324:	80 81       	ld	r24, Z
    1326:	91 81       	ldd	r25, Z+1	; 0x01
    1328:	9a 83       	std	Y+2, r25	; 0x02
    132a:	89 83       	std	Y+1, r24	; 0x01

    next->prev = prev;
    132c:	e9 81       	ldd	r30, Y+1	; 0x01
    132e:	fa 81       	ldd	r31, Y+2	; 0x02
    1330:	8b 81       	ldd	r24, Y+3	; 0x03
    1332:	9c 81       	ldd	r25, Y+4	; 0x04
    1334:	93 83       	std	Z+3, r25	; 0x03
    1336:	82 83       	std	Z+2, r24	; 0x02
    prev->next = next;
    1338:	eb 81       	ldd	r30, Y+3	; 0x03
    133a:	fc 81       	ldd	r31, Y+4	; 0x04
    133c:	89 81       	ldd	r24, Y+1	; 0x01
    133e:	9a 81       	ldd	r25, Y+2	; 0x02
    1340:	91 83       	std	Z+1, r25	; 0x01
    1342:	80 83       	st	Z, r24

    item->prev = item;
    1344:	ed 81       	ldd	r30, Y+5	; 0x05
    1346:	fe 81       	ldd	r31, Y+6	; 0x06
    1348:	8d 81       	ldd	r24, Y+5	; 0x05
    134a:	9e 81       	ldd	r25, Y+6	; 0x06
    134c:	93 83       	std	Z+3, r25	; 0x03
    134e:	82 83       	std	Z+2, r24	; 0x02
    item->next = item;
    1350:	ed 81       	ldd	r30, Y+5	; 0x05
    1352:	fe 81       	ldd	r31, Y+6	; 0x06
    1354:	8d 81       	ldd	r24, Y+5	; 0x05
    1356:	9e 81       	ldd	r25, Y+6	; 0x06
    1358:	91 83       	std	Z+1, r25	; 0x01
    135a:	80 83       	st	Z, r24
}
    135c:	26 96       	adiw	r28, 0x06	; 6
    135e:	0f b6       	in	r0, 0x3f	; 63
    1360:	f8 94       	cli
    1362:	de bf       	out	0x3e, r29	; 62
    1364:	0f be       	out	0x3f, r0	; 63
    1366:	cd bf       	out	0x3d, r28	; 61
    1368:	cf 91       	pop	r28
    136a:	df 91       	pop	r29
    136c:	08 95       	ret

0000136e <kernel_init>:
{
    while(1);
}

void kernel_init(void)
{
    136e:	8f 92       	push	r8
    1370:	af 92       	push	r10
    1372:	bf 92       	push	r11
    1374:	cf 92       	push	r12
    1376:	ef 92       	push	r14
    1378:	ff 92       	push	r15
    137a:	0f 93       	push	r16
    137c:	1f 93       	push	r17
    137e:	df 93       	push	r29
    1380:	cf 93       	push	r28
    1382:	cd b7       	in	r28, 0x3d	; 61
    1384:	de b7       	in	r29, 0x3e	; 62
        stat_init( (stat_t *)kernel.stat + i );
        sched_init( (sched_t *)kernel.sched + i, (proc_t *)kernel.idle + i );
    }
    spin_unlock( &kernel.stat_lock );
#else
    proc_init_isr(
    1386:	88 ec       	ldi	r24, 0xC8	; 200
    1388:	91 e0       	ldi	r25, 0x01	; 1
    138a:	2e e6       	ldi	r18, 0x6E	; 110
    138c:	32 e1       	ldi	r19, 0x12	; 18
    138e:	b9 01       	movw	r22, r18
    1390:	40 e0       	ldi	r20, 0x00	; 0
    1392:	50 e0       	ldi	r21, 0x00	; 0
    1394:	20 e0       	ldi	r18, 0x00	; 0
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	00 e0       	ldi	r16, 0x00	; 0
    139a:	10 e0       	ldi	r17, 0x00	; 0
    139c:	ee 24       	eor	r14, r14
    139e:	ff 24       	eor	r15, r15
    13a0:	0f 2e       	mov	r0, r31
    13a2:	f7 e0       	ldi	r31, 0x07	; 7
    13a4:	cf 2e       	mov	r12, r31
    13a6:	f0 2d       	mov	r31, r0
    13a8:	aa 24       	eor	r10, r10
    13aa:	bb 24       	eor	r11, r11
    13ac:	a3 94       	inc	r10
    13ae:	88 24       	eor	r8, r8
    13b0:	0e 94 8d 0b 	call	0x171a	; 0x171a <proc_init_isr>
        0, // это не важно, при первой же смене контекста будет сохранен текущий указатель стека
        ((prio_t)BITS_IN_INDEX_T - (prio_t)1),// низший приоритет
        (timer_t)1,//минимальный квант времени
        (bool_t)0// не RT
    );
    sched_init( (sched_t *)&kernel.sched, (proc_t *)&kernel.idle );
    13b4:	8e e9       	ldi	r24, 0x9E	; 158
    13b6:	91 e0       	ldi	r25, 0x01	; 1
    13b8:	28 ec       	ldi	r18, 0xC8	; 200
    13ba:	31 e0       	ldi	r19, 0x01	; 1
    13bc:	b9 01       	movw	r22, r18
    13be:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <sched_init>
#endif // CONFIG_MP
}
    13c2:	cf 91       	pop	r28
    13c4:	df 91       	pop	r29
    13c6:	1f 91       	pop	r17
    13c8:	0f 91       	pop	r16
    13ca:	ff 90       	pop	r15
    13cc:	ef 90       	pop	r14
    13ce:	cf 90       	pop	r12
    13d0:	bf 90       	pop	r11
    13d2:	af 90       	pop	r10
    13d4:	8f 90       	pop	r8
    13d6:	08 95       	ret

000013d8 <mutex_init_isr>:
    mutex_t * mutex
#ifdef CONFIG_USE_HIGHEST_LOCKER
    ,prio_t prio
#endif // CONFIG_USE_HIGHEST_LOCKER
)
{
    13d8:	df 93       	push	r29
    13da:	cf 93       	push	r28
    13dc:	00 d0       	rcall	.+0      	; 0x13de <mutex_init_isr+0x6>
    13de:	0f 92       	push	r0
    13e0:	cd b7       	in	r28, 0x3d	; 61
    13e2:	de b7       	in	r29, 0x3e	; 62
    13e4:	9a 83       	std	Y+2, r25	; 0x02
    13e6:	89 83       	std	Y+1, r24	; 0x01
    13e8:	6b 83       	std	Y+3, r22	; 0x03
    xlist_init( (xlist_t *)mutex );
    13ea:	89 81       	ldd	r24, Y+1	; 0x01
    13ec:	9a 81       	ldd	r25, Y+2	; 0x02
    13ee:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <xlist_init>
    mutex->free = (bool_t)1;
    13f2:	e9 81       	ldd	r30, Y+1	; 0x01
    13f4:	fa 81       	ldd	r31, Y+2	; 0x02
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	82 8b       	std	Z+18, r24	; 0x12
#ifdef CONFIG_USE_HIGHEST_LOCKER
    mutex->prio = prio;
    13fa:	e9 81       	ldd	r30, Y+1	; 0x01
    13fc:	fa 81       	ldd	r31, Y+2	; 0x02
    13fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1400:	81 8b       	std	Z+17, r24	; 0x11
#endif // CONFIG_USE_HIGHEST_LOCKER
}
    1402:	0f 90       	pop	r0
    1404:	0f 90       	pop	r0
    1406:	0f 90       	pop	r0
    1408:	cf 91       	pop	r28
    140a:	df 91       	pop	r29
    140c:	08 95       	ret

0000140e <_mutex_lock>:

// К моменту вызова захвачена блокировка mutex-а, запрещены прерывания
bool_t _mutex_lock( mutex_t * mutex )
{
    140e:	df 93       	push	r29
    1410:	cf 93       	push	r28
    1412:	00 d0       	rcall	.+0      	; 0x1414 <_mutex_lock+0x6>
    1414:	00 d0       	rcall	.+0      	; 0x1416 <_mutex_lock+0x8>
    1416:	0f 92       	push	r0
    1418:	cd b7       	in	r28, 0x3d	; 61
    141a:	de b7       	in	r29, 0x3e	; 62
    141c:	9d 83       	std	Y+5, r25	; 0x05
    141e:	8c 83       	std	Y+4, r24	; 0x04
    bool_t ret = mutex->free;
    1420:	ec 81       	ldd	r30, Y+4	; 0x04
    1422:	fd 81       	ldd	r31, Y+5	; 0x05
    1424:	82 89       	ldd	r24, Z+18	; 0x12
    1426:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = current_proc();
    1428:	0e 94 cc 00 	call	0x198	; 0x198 <current_proc>
    142c:	9a 83       	std	Y+2, r25	; 0x02
    142e:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
#ifdef CONFIG_USE_HIGHEST_LOCKER
    _proc_lres_inc( proc, mutex->prio );
    1430:	ec 81       	ldd	r30, Y+4	; 0x04
    1432:	fd 81       	ldd	r31, Y+5	; 0x05
    1434:	21 89       	ldd	r18, Z+17	; 0x11
    1436:	89 81       	ldd	r24, Y+1	; 0x01
    1438:	9a 81       	ldd	r25, Y+2	; 0x02
    143a:	62 2f       	mov	r22, r18
    143c:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <_proc_lres_inc>
#else // CONFIG_USE_HIGHEST_LOCKER
    _proc_lres_inc( proc );
#endif // CONFIG_USE_HIGHEST_LOCKER
    if( ret )
    1440:	8b 81       	ldd	r24, Y+3	; 0x03
    1442:	88 23       	and	r24, r24
    1444:	41 f0       	breq	.+16     	; 0x1456 <_mutex_lock+0x48>
    {
        mutex->free = (bool_t)0;
    1446:	ec 81       	ldd	r30, Y+4	; 0x04
    1448:	fd 81       	ldd	r31, Y+5	; 0x05
    144a:	12 8a       	std	Z+18, r1	; 0x12
#ifdef CONFIG_USE_HIGHEST_LOCKER
        // Меняем приоритет только здесь
        _proc_prio_control_running( proc );
    144c:	89 81       	ldd	r24, Y+1	; 0x01
    144e:	9a 81       	ldd	r25, Y+2	; 0x02
    1450:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <_proc_prio_control_running>
    1454:	1b c0       	rjmp	.+54     	; 0x148c <_mutex_lock+0x7e>
#endif // CONFIG_USE_HIGHEST_LOCKER
    }
    else
    {
        proc->flags |= PROC_FLG_QUEUE;
    1456:	e9 81       	ldd	r30, Y+1	; 0x01
    1458:	fa 81       	ldd	r31, Y+2	; 0x02
    145a:	83 85       	ldd	r24, Z+11	; 0x0b
    145c:	88 60       	ori	r24, 0x08	; 8
    145e:	e9 81       	ldd	r30, Y+1	; 0x01
    1460:	fa 81       	ldd	r31, Y+2	; 0x02
    1462:	83 87       	std	Z+11, r24	; 0x0b
        proc->flags &= ~PROC_FLG_RUN;
    1464:	e9 81       	ldd	r30, Y+1	; 0x01
    1466:	fa 81       	ldd	r31, Y+2	; 0x02
    1468:	83 85       	ldd	r24, Z+11	; 0x0b
    146a:	8d 7f       	andi	r24, 0xFD	; 253
    146c:	e9 81       	ldd	r30, Y+1	; 0x01
    146e:	fa 81       	ldd	r31, Y+2	; 0x02
    1470:	83 87       	std	Z+11, r24	; 0x0b
        _proc_stop_( proc );
    1472:	89 81       	ldd	r24, Y+1	; 0x01
    1474:	9a 81       	ldd	r25, Y+2	; 0x02
    1476:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <gitem_cut>
        gitem_insert( (gitem_t *)proc, (xlist_t *)mutex );
    147a:	89 81       	ldd	r24, Y+1	; 0x01
    147c:	9a 81       	ldd	r25, Y+2	; 0x02
    147e:	2c 81       	ldd	r18, Y+4	; 0x04
    1480:	3d 81       	ldd	r19, Y+5	; 0x05
    1482:	b9 01       	movw	r22, r18
    1484:	0e 94 77 06 	call	0xcee	; 0xcee <gitem_insert>
        // Нужна перепланировка
#ifdef CONFIG_MP
        resched( proc->core_id );
#else
        resched();
    1488:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
#endif // CONFIG_MP
    }
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    return ret;
    148c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    148e:	0f 90       	pop	r0
    1490:	0f 90       	pop	r0
    1492:	0f 90       	pop	r0
    1494:	0f 90       	pop	r0
    1496:	0f 90       	pop	r0
    1498:	cf 91       	pop	r28
    149a:	df 91       	pop	r29
    149c:	08 95       	ret

0000149e <_mutex_try_lock>:

bool_t _mutex_try_lock( mutex_t * mutex )
{
    149e:	df 93       	push	r29
    14a0:	cf 93       	push	r28
    14a2:	00 d0       	rcall	.+0      	; 0x14a4 <_mutex_try_lock+0x6>
    14a4:	00 d0       	rcall	.+0      	; 0x14a6 <_mutex_try_lock+0x8>
    14a6:	0f 92       	push	r0
    14a8:	cd b7       	in	r28, 0x3d	; 61
    14aa:	de b7       	in	r29, 0x3e	; 62
    14ac:	9d 83       	std	Y+5, r25	; 0x05
    14ae:	8c 83       	std	Y+4, r24	; 0x04
    bool_t ret = mutex->free;
    14b0:	ec 81       	ldd	r30, Y+4	; 0x04
    14b2:	fd 81       	ldd	r31, Y+5	; 0x05
    14b4:	82 89       	ldd	r24, Z+18	; 0x12
    14b6:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = current_proc();
    14b8:	0e 94 cc 00 	call	0x198	; 0x198 <current_proc>
    14bc:	9a 83       	std	Y+2, r25	; 0x02
    14be:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    if( ret )
    14c0:	8b 81       	ldd	r24, Y+3	; 0x03
    14c2:	88 23       	and	r24, r24
    14c4:	79 f0       	breq	.+30     	; 0x14e4 <_mutex_try_lock+0x46>
    {
        mutex->free = (bool_t)0;
    14c6:	ec 81       	ldd	r30, Y+4	; 0x04
    14c8:	fd 81       	ldd	r31, Y+5	; 0x05
    14ca:	12 8a       	std	Z+18, r1	; 0x12
#ifdef CONFIG_USE_HIGHEST_LOCKER
        _proc_lres_inc( proc, mutex->prio );
    14cc:	ec 81       	ldd	r30, Y+4	; 0x04
    14ce:	fd 81       	ldd	r31, Y+5	; 0x05
    14d0:	21 89       	ldd	r18, Z+17	; 0x11
    14d2:	89 81       	ldd	r24, Y+1	; 0x01
    14d4:	9a 81       	ldd	r25, Y+2	; 0x02
    14d6:	62 2f       	mov	r22, r18
    14d8:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <_proc_lres_inc>
        _proc_prio_control_running( proc );
    14dc:	89 81       	ldd	r24, Y+1	; 0x01
    14de:	9a 81       	ldd	r25, Y+2	; 0x02
    14e0:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <_proc_prio_control_running>
#endif // CONFIG_USE_HIGHEST_LOCKER
    }
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    return ret;
    14e4:	8b 81       	ldd	r24, Y+3	; 0x03
}
    14e6:	0f 90       	pop	r0
    14e8:	0f 90       	pop	r0
    14ea:	0f 90       	pop	r0
    14ec:	0f 90       	pop	r0
    14ee:	0f 90       	pop	r0
    14f0:	cf 91       	pop	r28
    14f2:	df 91       	pop	r29
    14f4:	08 95       	ret

000014f6 <_mutex_unlock>:

void _mutex_unlock( mutex_t *  mutex )
{
    14f6:	df 93       	push	r29
    14f8:	cf 93       	push	r28
    14fa:	00 d0       	rcall	.+0      	; 0x14fc <_mutex_unlock+0x6>
    14fc:	00 d0       	rcall	.+0      	; 0x14fe <_mutex_unlock+0x8>
    14fe:	cd b7       	in	r28, 0x3d	; 61
    1500:	de b7       	in	r29, 0x3e	; 62
    1502:	9c 83       	std	Y+4, r25	; 0x04
    1504:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = current_proc();
    1506:	0e 94 cc 00 	call	0x198	; 0x198 <current_proc>
    150a:	9a 83       	std	Y+2, r25	; 0x02
    150c:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
#ifdef CONFIG_USE_HIGHEST_LOCKER

    _proc_lres_dec( proc, mutex->prio );
    150e:	eb 81       	ldd	r30, Y+3	; 0x03
    1510:	fc 81       	ldd	r31, Y+4	; 0x04
    1512:	21 89       	ldd	r18, Z+17	; 0x11
    1514:	89 81       	ldd	r24, Y+1	; 0x01
    1516:	9a 81       	ldd	r25, Y+2	; 0x02
    1518:	62 2f       	mov	r22, r18
    151a:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <_proc_lres_dec>
    // Если проготовлен и готов к остановке - останавливаем
    if(  ( proc->flags & PROC_FLG_PRE_END ) && (!(proc->flags & PROC_FLG_HOLD))  )
    151e:	e9 81       	ldd	r30, Y+1	; 0x01
    1520:	fa 81       	ldd	r31, Y+2	; 0x02
    1522:	83 85       	ldd	r24, Z+11	; 0x0b
    1524:	88 2f       	mov	r24, r24
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	80 72       	andi	r24, 0x20	; 32
    152a:	90 70       	andi	r25, 0x00	; 0
    152c:	00 97       	sbiw	r24, 0x00	; 0
    152e:	a1 f0       	breq	.+40     	; 0x1558 <_mutex_unlock+0x62>
    1530:	e9 81       	ldd	r30, Y+1	; 0x01
    1532:	fa 81       	ldd	r31, Y+2	; 0x02
    1534:	83 85       	ldd	r24, Z+11	; 0x0b
    1536:	88 2f       	mov	r24, r24
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	84 70       	andi	r24, 0x04	; 4
    153c:	90 70       	andi	r25, 0x00	; 0
    153e:	00 97       	sbiw	r24, 0x00	; 0
    1540:	59 f4       	brne	.+22     	; 0x1558 <_mutex_unlock+0x62>
    {
        _proc_stop_( proc );
    1542:	89 81       	ldd	r24, Y+1	; 0x01
    1544:	9a 81       	ldd	r25, Y+2	; 0x02
    1546:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <gitem_cut>
        _proc_prio_control_stoped( proc );
    154a:	89 81       	ldd	r24, Y+1	; 0x01
    154c:	9a 81       	ldd	r25, Y+2	; 0x02
    154e:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <_proc_prio_control_stoped>
        // Нужна перепланировка, процесс остановили и не запустили обратно
#ifdef CONFIG_MP
        resched( proc->core_id );
#else
        resched();
    1552:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
    1556:	04 c0       	rjmp	.+8      	; 0x1560 <_mutex_unlock+0x6a>
#endif // CONFIG_MP
    }
    // Не останавливаем - меняем проиритет на ходу
    else _proc_prio_control_running( proc );
    1558:	89 81       	ldd	r24, Y+1	; 0x01
    155a:	9a 81       	ldd	r25, Y+2	; 0x02
    155c:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <_proc_prio_control_running>
#endif // CONFIG_USE_HIGHEST_LOCKER
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    // Обрабока самого мьютекса
    if( ((xlist_t *)mutex)->index == (index_t)0  )
    1560:	eb 81       	ldd	r30, Y+3	; 0x03
    1562:	fc 81       	ldd	r31, Y+4	; 0x04
    1564:	80 89       	ldd	r24, Z+16	; 0x10
    1566:	88 23       	and	r24, r24
    1568:	29 f4       	brne	.+10     	; 0x1574 <_mutex_unlock+0x7e>
    {
        // Список ожидающих пуст, выходим
        mutex->free = (bool_t)1;
    156a:	eb 81       	ldd	r30, Y+3	; 0x03
    156c:	fc 81       	ldd	r31, Y+4	; 0x04
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	82 8b       	std	Z+18, r24	; 0x12
    1572:	19 c0       	rjmp	.+50     	; 0x15a6 <_mutex_unlock+0xb0>
        return;
    }
    // Список ожидающих не пуст, запускаем голову
    proc = (proc_t *)xlist_head((xlist_t *)mutex);
    1574:	8b 81       	ldd	r24, Y+3	; 0x03
    1576:	9c 81       	ldd	r25, Y+4	; 0x04
    1578:	0e 94 14 11 	call	0x2228	; 0x2228 <xlist_head>
    157c:	9a 83       	std	Y+2, r25	; 0x02
    157e:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    // Сначала надо вырезать
    proc->flags &= ~PROC_FLG_QUEUE;
    1580:	e9 81       	ldd	r30, Y+1	; 0x01
    1582:	fa 81       	ldd	r31, Y+2	; 0x02
    1584:	83 85       	ldd	r24, Z+11	; 0x0b
    1586:	87 7f       	andi	r24, 0xF7	; 247
    1588:	e9 81       	ldd	r30, Y+1	; 0x01
    158a:	fa 81       	ldd	r31, Y+2	; 0x02
    158c:	83 87       	std	Z+11, r24	; 0x0b
    gitem_cut( (gitem_t *)proc );
    158e:	89 81       	ldd	r24, Y+1	; 0x01
    1590:	9a 81       	ldd	r25, Y+2	; 0x02
    1592:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <gitem_cut>
#ifdef CONFIG_USE_HIGHEST_LOCKER
    // Меняем приоритет
    _proc_prio_control_stoped( proc );
    1596:	89 81       	ldd	r24, Y+1	; 0x01
    1598:	9a 81       	ldd	r25, Y+2	; 0x02
    159a:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <_proc_prio_control_stoped>
#endif // CONFIG_USE_HIGHEST_LOCKER
    _proc_run( proc );
    159e:	89 81       	ldd	r24, Y+1	; 0x01
    15a0:	9a 81       	ldd	r25, Y+2	; 0x02
    15a2:	0e 94 15 0c 	call	0x182a	; 0x182a <_proc_run>
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
}
    15a6:	0f 90       	pop	r0
    15a8:	0f 90       	pop	r0
    15aa:	0f 90       	pop	r0
    15ac:	0f 90       	pop	r0
    15ae:	cf 91       	pop	r28
    15b0:	df 91       	pop	r29
    15b2:	08 95       	ret

000015b4 <pcounter_init>:
*                           http://www.0chan.ru/r/res/9996.html                          *
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
void pcounter_init(pcounter_t * pcounter)
{
    15b4:	df 93       	push	r29
    15b6:	cf 93       	push	r28
    15b8:	00 d0       	rcall	.+0      	; 0x15ba <pcounter_init+0x6>
    15ba:	0f 92       	push	r0
    15bc:	cd b7       	in	r28, 0x3d	; 61
    15be:	de b7       	in	r29, 0x3e	; 62
    15c0:	9b 83       	std	Y+3, r25	; 0x03
    15c2:	8a 83       	std	Y+2, r24	; 0x02
    pcounter->index = (index_t)0;
    15c4:	ea 81       	ldd	r30, Y+2	; 0x02
    15c6:	fb 81       	ldd	r31, Y+3	; 0x03
    15c8:	10 8a       	std	Z+16, r1	; 0x10
    for(prio_t p = 0; p < (index_t)BITS_IN_INDEX_T; p++)pcounter->counter[p] = (count_t)0;
    15ca:	19 82       	std	Y+1, r1	; 0x01
    15cc:	0f c0       	rjmp	.+30     	; 0x15ec <pcounter_init+0x38>
    15ce:	89 81       	ldd	r24, Y+1	; 0x01
    15d0:	88 2f       	mov	r24, r24
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	2a 81       	ldd	r18, Y+2	; 0x02
    15d6:	3b 81       	ldd	r19, Y+3	; 0x03
    15d8:	88 0f       	add	r24, r24
    15da:	99 1f       	adc	r25, r25
    15dc:	f9 01       	movw	r30, r18
    15de:	e8 0f       	add	r30, r24
    15e0:	f9 1f       	adc	r31, r25
    15e2:	11 82       	std	Z+1, r1	; 0x01
    15e4:	10 82       	st	Z, r1
    15e6:	89 81       	ldd	r24, Y+1	; 0x01
    15e8:	8f 5f       	subi	r24, 0xFF	; 255
    15ea:	89 83       	std	Y+1, r24	; 0x01
    15ec:	89 81       	ldd	r24, Y+1	; 0x01
    15ee:	88 30       	cpi	r24, 0x08	; 8
    15f0:	70 f3       	brcs	.-36     	; 0x15ce <pcounter_init+0x1a>
}
    15f2:	0f 90       	pop	r0
    15f4:	0f 90       	pop	r0
    15f6:	0f 90       	pop	r0
    15f8:	cf 91       	pop	r28
    15fa:	df 91       	pop	r29
    15fc:	08 95       	ret

000015fe <pcounter_inc>:

void pcounter_inc(pcounter_t * pcounter, prio_t prio)
{
    15fe:	df 93       	push	r29
    1600:	cf 93       	push	r28
    1602:	00 d0       	rcall	.+0      	; 0x1604 <pcounter_inc+0x6>
    1604:	0f 92       	push	r0
    1606:	cd b7       	in	r28, 0x3d	; 61
    1608:	de b7       	in	r29, 0x3e	; 62
    160a:	9a 83       	std	Y+2, r25	; 0x02
    160c:	89 83       	std	Y+1, r24	; 0x01
    160e:	6b 83       	std	Y+3, r22	; 0x03
    pcounter->counter[prio]++;
    1610:	8b 81       	ldd	r24, Y+3	; 0x03
    1612:	68 2f       	mov	r22, r24
    1614:	70 e0       	ldi	r23, 0x00	; 0
    1616:	29 81       	ldd	r18, Y+1	; 0x01
    1618:	3a 81       	ldd	r19, Y+2	; 0x02
    161a:	cb 01       	movw	r24, r22
    161c:	88 0f       	add	r24, r24
    161e:	99 1f       	adc	r25, r25
    1620:	f9 01       	movw	r30, r18
    1622:	e8 0f       	add	r30, r24
    1624:	f9 1f       	adc	r31, r25
    1626:	80 81       	ld	r24, Z
    1628:	91 81       	ldd	r25, Z+1	; 0x01
    162a:	ac 01       	movw	r20, r24
    162c:	4f 5f       	subi	r20, 0xFF	; 255
    162e:	5f 4f       	sbci	r21, 0xFF	; 255
    1630:	29 81       	ldd	r18, Y+1	; 0x01
    1632:	3a 81       	ldd	r19, Y+2	; 0x02
    1634:	cb 01       	movw	r24, r22
    1636:	88 0f       	add	r24, r24
    1638:	99 1f       	adc	r25, r25
    163a:	f9 01       	movw	r30, r18
    163c:	e8 0f       	add	r30, r24
    163e:	f9 1f       	adc	r31, r25
    1640:	51 83       	std	Z+1, r21	; 0x01
    1642:	40 83       	st	Z, r20
    pcounter->index |= ((index_t)1)<<prio;
    1644:	e9 81       	ldd	r30, Y+1	; 0x01
    1646:	fa 81       	ldd	r31, Y+2	; 0x02
    1648:	80 89       	ldd	r24, Z+16	; 0x10
    164a:	48 2f       	mov	r20, r24
    164c:	8b 81       	ldd	r24, Y+3	; 0x03
    164e:	28 2f       	mov	r18, r24
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	81 e0       	ldi	r24, 0x01	; 1
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	02 2e       	mov	r0, r18
    1658:	02 c0       	rjmp	.+4      	; 0x165e <pcounter_inc+0x60>
    165a:	88 0f       	add	r24, r24
    165c:	99 1f       	adc	r25, r25
    165e:	0a 94       	dec	r0
    1660:	e2 f7       	brpl	.-8      	; 0x165a <pcounter_inc+0x5c>
    1662:	84 2b       	or	r24, r20
    1664:	e9 81       	ldd	r30, Y+1	; 0x01
    1666:	fa 81       	ldd	r31, Y+2	; 0x02
    1668:	80 8b       	std	Z+16, r24	; 0x10
}
    166a:	0f 90       	pop	r0
    166c:	0f 90       	pop	r0
    166e:	0f 90       	pop	r0
    1670:	cf 91       	pop	r28
    1672:	df 91       	pop	r29
    1674:	08 95       	ret

00001676 <pcounter_dec>:

index_t pcounter_dec(pcounter_t * pcounter, prio_t prio)
{
    1676:	df 93       	push	r29
    1678:	cf 93       	push	r28
    167a:	00 d0       	rcall	.+0      	; 0x167c <pcounter_dec+0x6>
    167c:	00 d0       	rcall	.+0      	; 0x167e <pcounter_dec+0x8>
    167e:	cd b7       	in	r28, 0x3d	; 61
    1680:	de b7       	in	r29, 0x3e	; 62
    1682:	9b 83       	std	Y+3, r25	; 0x03
    1684:	8a 83       	std	Y+2, r24	; 0x02
    1686:	6c 83       	std	Y+4, r22	; 0x04
    index_t mask = ((index_t)1)<<prio;
    1688:	8c 81       	ldd	r24, Y+4	; 0x04
    168a:	28 2f       	mov	r18, r24
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	02 c0       	rjmp	.+4      	; 0x1698 <pcounter_dec+0x22>
    1694:	88 0f       	add	r24, r24
    1696:	99 1f       	adc	r25, r25
    1698:	2a 95       	dec	r18
    169a:	e2 f7       	brpl	.-8      	; 0x1694 <pcounter_dec+0x1e>
    169c:	89 83       	std	Y+1, r24	; 0x01
    pcounter->counter[prio]--;
    169e:	8c 81       	ldd	r24, Y+4	; 0x04
    16a0:	68 2f       	mov	r22, r24
    16a2:	70 e0       	ldi	r23, 0x00	; 0
    16a4:	2a 81       	ldd	r18, Y+2	; 0x02
    16a6:	3b 81       	ldd	r19, Y+3	; 0x03
    16a8:	cb 01       	movw	r24, r22
    16aa:	88 0f       	add	r24, r24
    16ac:	99 1f       	adc	r25, r25
    16ae:	f9 01       	movw	r30, r18
    16b0:	e8 0f       	add	r30, r24
    16b2:	f9 1f       	adc	r31, r25
    16b4:	80 81       	ld	r24, Z
    16b6:	91 81       	ldd	r25, Z+1	; 0x01
    16b8:	ac 01       	movw	r20, r24
    16ba:	41 50       	subi	r20, 0x01	; 1
    16bc:	50 40       	sbci	r21, 0x00	; 0
    16be:	2a 81       	ldd	r18, Y+2	; 0x02
    16c0:	3b 81       	ldd	r19, Y+3	; 0x03
    16c2:	cb 01       	movw	r24, r22
    16c4:	88 0f       	add	r24, r24
    16c6:	99 1f       	adc	r25, r25
    16c8:	f9 01       	movw	r30, r18
    16ca:	e8 0f       	add	r30, r24
    16cc:	f9 1f       	adc	r31, r25
    16ce:	51 83       	std	Z+1, r21	; 0x01
    16d0:	40 83       	st	Z, r20
    if(pcounter->counter[prio] == (count_t)0)pcounter->index &= ~mask;
    16d2:	8c 81       	ldd	r24, Y+4	; 0x04
    16d4:	88 2f       	mov	r24, r24
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	2a 81       	ldd	r18, Y+2	; 0x02
    16da:	3b 81       	ldd	r19, Y+3	; 0x03
    16dc:	88 0f       	add	r24, r24
    16de:	99 1f       	adc	r25, r25
    16e0:	f9 01       	movw	r30, r18
    16e2:	e8 0f       	add	r30, r24
    16e4:	f9 1f       	adc	r31, r25
    16e6:	80 81       	ld	r24, Z
    16e8:	91 81       	ldd	r25, Z+1	; 0x01
    16ea:	00 97       	sbiw	r24, 0x00	; 0
    16ec:	51 f4       	brne	.+20     	; 0x1702 <pcounter_dec+0x8c>
    16ee:	ea 81       	ldd	r30, Y+2	; 0x02
    16f0:	fb 81       	ldd	r31, Y+3	; 0x03
    16f2:	80 89       	ldd	r24, Z+16	; 0x10
    16f4:	98 2f       	mov	r25, r24
    16f6:	89 81       	ldd	r24, Y+1	; 0x01
    16f8:	80 95       	com	r24
    16fa:	89 23       	and	r24, r25
    16fc:	ea 81       	ldd	r30, Y+2	; 0x02
    16fe:	fb 81       	ldd	r31, Y+3	; 0x03
    1700:	80 8b       	std	Z+16, r24	; 0x10
    return pcounter->index & mask;
    1702:	ea 81       	ldd	r30, Y+2	; 0x02
    1704:	fb 81       	ldd	r31, Y+3	; 0x03
    1706:	90 89       	ldd	r25, Z+16	; 0x10
    1708:	89 81       	ldd	r24, Y+1	; 0x01
    170a:	89 23       	and	r24, r25
}
    170c:	0f 90       	pop	r0
    170e:	0f 90       	pop	r0
    1710:	0f 90       	pop	r0
    1712:	0f 90       	pop	r0
    1714:	cf 91       	pop	r28
    1716:	df 91       	pop	r29
    1718:	08 95       	ret

0000171a <proc_init_isr>:
    bool_t is_rt // если true, значит процесс будет иметть поведение RT
#ifdef CONFIG_MP
    ,affinity_t affinity
#endif // CONFIG_MP
)
{
    171a:	8f 92       	push	r8
    171c:	af 92       	push	r10
    171e:	bf 92       	push	r11
    1720:	cf 92       	push	r12
    1722:	ef 92       	push	r14
    1724:	ff 92       	push	r15
    1726:	0f 93       	push	r16
    1728:	1f 93       	push	r17
    172a:	df 93       	push	r29
    172c:	cf 93       	push	r28
    172e:	cd b7       	in	r28, 0x3d	; 61
    1730:	de b7       	in	r29, 0x3e	; 62
    1732:	61 97       	sbiw	r28, 0x11	; 17
    1734:	0f b6       	in	r0, 0x3f	; 63
    1736:	f8 94       	cli
    1738:	de bf       	out	0x3e, r29	; 62
    173a:	0f be       	out	0x3f, r0	; 63
    173c:	cd bf       	out	0x3d, r28	; 61
    173e:	9a 83       	std	Y+2, r25	; 0x02
    1740:	89 83       	std	Y+1, r24	; 0x01
    1742:	7c 83       	std	Y+4, r23	; 0x04
    1744:	6b 83       	std	Y+3, r22	; 0x03
    1746:	5e 83       	std	Y+6, r21	; 0x06
    1748:	4d 83       	std	Y+5, r20	; 0x05
    174a:	38 87       	std	Y+8, r19	; 0x08
    174c:	2f 83       	std	Y+7, r18	; 0x07
    174e:	1a 87       	std	Y+10, r17	; 0x0a
    1750:	09 87       	std	Y+9, r16	; 0x09
    1752:	fc 86       	std	Y+12, r15	; 0x0c
    1754:	eb 86       	std	Y+11, r14	; 0x0b
    1756:	cd 86       	std	Y+13, r12	; 0x0d
    1758:	bf 86       	std	Y+15, r11	; 0x0f
    175a:	ae 86       	std	Y+14, r10	; 0x0e
    175c:	88 8a       	std	Y+16, r8	; 0x10
    gitem_init( (gitem_t *)proc, prio );
    175e:	89 81       	ldd	r24, Y+1	; 0x01
    1760:	9a 81       	ldd	r25, Y+2	; 0x02
    1762:	6d 85       	ldd	r22, Y+13	; 0x0d
    1764:	0e 94 51 06 	call	0xca2	; 0xca2 <gitem_init>
    proc->flags = ( is_rt )?PROC_FLG_RT:(flag_t)0;
    1768:	88 89       	ldd	r24, Y+16	; 0x10
    176a:	89 8b       	std	Y+17, r24	; 0x11
    176c:	89 89       	ldd	r24, Y+17	; 0x11
    176e:	88 23       	and	r24, r24
    1770:	11 f0       	breq	.+4      	; 0x1776 <proc_init_isr+0x5c>
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	89 8b       	std	Y+17, r24	; 0x11
    1776:	89 89       	ldd	r24, Y+17	; 0x11
    1778:	e9 81       	ldd	r30, Y+1	; 0x01
    177a:	fa 81       	ldd	r31, Y+2	; 0x02
    177c:	83 87       	std	Z+11, r24	; 0x0b
#ifdef CONFIG_USE_HIGHEST_LOCKER
    pcounter_init(&proc->lres);
    177e:	89 81       	ldd	r24, Y+1	; 0x01
    1780:	9a 81       	ldd	r25, Y+2	; 0x02
    1782:	0d 96       	adiw	r24, 0x0d	; 13
    1784:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <pcounter_init>
    proc->base_prio = prio;
    1788:	e9 81       	ldd	r30, Y+1	; 0x01
    178a:	fa 81       	ldd	r31, Y+2	; 0x02
    178c:	8d 85       	ldd	r24, Y+13	; 0x0d
    178e:	84 87       	std	Z+12, r24	; 0x0c
#else
    proc->lres = (count_t)0;
#endif
    proc->time_quant = time_quant;
    1790:	e9 81       	ldd	r30, Y+1	; 0x01
    1792:	fa 81       	ldd	r31, Y+2	; 0x02
    1794:	8e 85       	ldd	r24, Y+14	; 0x0e
    1796:	9f 85       	ldd	r25, Y+15	; 0x0f
    1798:	97 8f       	std	Z+31, r25	; 0x1f
    179a:	86 8f       	std	Z+30, r24	; 0x1e
    proc->timer = time_quant;
    179c:	e9 81       	ldd	r30, Y+1	; 0x01
    179e:	fa 81       	ldd	r31, Y+2	; 0x02
    17a0:	8e 85       	ldd	r24, Y+14	; 0x0e
    17a2:	9f 85       	ldd	r25, Y+15	; 0x0f
    17a4:	91 a3       	std	Z+33, r25	; 0x21
    17a6:	80 a3       	std	Z+32, r24	; 0x20
#ifdef CONFIG_MP
    proc->core_id = (core_id_t)0;
    proc->affinity = affinity;
#endif // CONFIG_MP
    proc->pmain = pmain;
    17a8:	e9 81       	ldd	r30, Y+1	; 0x01
    17aa:	fa 81       	ldd	r31, Y+2	; 0x02
    17ac:	8b 81       	ldd	r24, Y+3	; 0x03
    17ae:	9c 81       	ldd	r25, Y+4	; 0x04
    17b0:	93 a3       	std	Z+35, r25	; 0x23
    17b2:	82 a3       	std	Z+34, r24	; 0x22
    proc->sv_hook = sv_hook;
    17b4:	e9 81       	ldd	r30, Y+1	; 0x01
    17b6:	fa 81       	ldd	r31, Y+2	; 0x02
    17b8:	8d 81       	ldd	r24, Y+5	; 0x05
    17ba:	9e 81       	ldd	r25, Y+6	; 0x06
    17bc:	95 a3       	std	Z+37, r25	; 0x25
    17be:	84 a3       	std	Z+36, r24	; 0x24
    proc->rs_hook = rs_hook;
    17c0:	e9 81       	ldd	r30, Y+1	; 0x01
    17c2:	fa 81       	ldd	r31, Y+2	; 0x02
    17c4:	8f 81       	ldd	r24, Y+7	; 0x07
    17c6:	98 85       	ldd	r25, Y+8	; 0x08
    17c8:	97 a3       	std	Z+39, r25	; 0x27
    17ca:	86 a3       	std	Z+38, r24	; 0x26
    proc->arg = arg;
    17cc:	e9 81       	ldd	r30, Y+1	; 0x01
    17ce:	fa 81       	ldd	r31, Y+2	; 0x02
    17d0:	89 85       	ldd	r24, Y+9	; 0x09
    17d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    17d4:	91 a7       	std	Z+41, r25	; 0x29
    17d6:	80 a7       	std	Z+40, r24	; 0x28
    proc->sstart = sstart;
    17d8:	e9 81       	ldd	r30, Y+1	; 0x01
    17da:	fa 81       	ldd	r31, Y+2	; 0x02
    17dc:	8b 85       	ldd	r24, Y+11	; 0x0b
    17de:	9c 85       	ldd	r25, Y+12	; 0x0c
    17e0:	93 a7       	std	Z+43, r25	; 0x2b
    17e2:	82 a7       	std	Z+42, r24	; 0x2a
    if( sstart )proc->spointer = proc_stack_init(sstart, (code_t)proc_run_wrapper, (void *)proc);
    17e4:	8b 85       	ldd	r24, Y+11	; 0x0b
    17e6:	9c 85       	ldd	r25, Y+12	; 0x0c
    17e8:	00 97       	sbiw	r24, 0x00	; 0
    17ea:	71 f0       	breq	.+28     	; 0x1808 <proc_init_isr+0xee>
    17ec:	48 e5       	ldi	r20, 0x58	; 88
    17ee:	53 e0       	ldi	r21, 0x03	; 3
    17f0:	8b 85       	ldd	r24, Y+11	; 0x0b
    17f2:	9c 85       	ldd	r25, Y+12	; 0x0c
    17f4:	29 81       	ldd	r18, Y+1	; 0x01
    17f6:	3a 81       	ldd	r19, Y+2	; 0x02
    17f8:	ba 01       	movw	r22, r20
    17fa:	a9 01       	movw	r20, r18
    17fc:	0e 94 d7 00 	call	0x1ae	; 0x1ae <proc_stack_init>
    1800:	e9 81       	ldd	r30, Y+1	; 0x01
    1802:	fa 81       	ldd	r31, Y+2	; 0x02
    1804:	95 a7       	std	Z+45, r25	; 0x2d
    1806:	84 a7       	std	Z+44, r24	; 0x2c
}
    1808:	61 96       	adiw	r28, 0x11	; 17
    180a:	0f b6       	in	r0, 0x3f	; 63
    180c:	f8 94       	cli
    180e:	de bf       	out	0x3e, r29	; 62
    1810:	0f be       	out	0x3f, r0	; 63
    1812:	cd bf       	out	0x3d, r28	; 61
    1814:	cf 91       	pop	r28
    1816:	df 91       	pop	r29
    1818:	1f 91       	pop	r17
    181a:	0f 91       	pop	r16
    181c:	ff 90       	pop	r15
    181e:	ef 90       	pop	r14
    1820:	cf 90       	pop	r12
    1822:	bf 90       	pop	r11
    1824:	af 90       	pop	r10
    1826:	8f 90       	pop	r8
    1828:	08 95       	ret

0000182a <_proc_run>:
    spin_unlock( &proc_sched->lock );
}
#endif // CONFIG_MP

void _proc_run( proc_t * proc )
{
    182a:	df 93       	push	r29
    182c:	cf 93       	push	r28
    182e:	00 d0       	rcall	.+0      	; 0x1830 <_proc_run+0x6>
    1830:	cd b7       	in	r28, 0x3d	; 61
    1832:	de b7       	in	r29, 0x3e	; 62
    1834:	9a 83       	std	Y+2, r25	; 0x02
    1836:	89 83       	std	Y+1, r24	; 0x01
    proc->flags |= PROC_FLG_RUN;
    1838:	e9 81       	ldd	r30, Y+1	; 0x01
    183a:	fa 81       	ldd	r31, Y+2	; 0x02
    183c:	83 85       	ldd	r24, Z+11	; 0x0b
    183e:	82 60       	ori	r24, 0x02	; 2
    1840:	e9 81       	ldd	r30, Y+1	; 0x01
    1842:	fa 81       	ldd	r31, Y+2	; 0x02
    1844:	83 87       	std	Z+11, r24	; 0x0b
    spin_lock( &kernel.stat_lock );
    proc->core_id = sched_load_balancer( proc, (stat_t *)kernel.stat );
    stat_inc( proc, (stat_t *)kernel.stat+proc->core_id );
    spin_unlock( &kernel.stat_lock );
#endif
    _proc_run_( proc );
    1846:	89 81       	ldd	r24, Y+1	; 0x01
    1848:	9a 81       	ldd	r25, Y+2	; 0x02
    184a:	20 91 a0 01 	lds	r18, 0x01A0
    184e:	30 91 a1 01 	lds	r19, 0x01A1
    1852:	b9 01       	movw	r22, r18
    1854:	0e 94 77 06 	call	0xcee	; 0xcee <gitem_insert>
#ifdef CONFIG_MP
    resched( proc->core_id );
#else
    resched();
    1858:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
#endif // CONFIG_MP
}
    185c:	0f 90       	pop	r0
    185e:	0f 90       	pop	r0
    1860:	cf 91       	pop	r28
    1862:	df 91       	pop	r29
    1864:	08 95       	ret

00001866 <proc_run_isr>:
// Функция общего пользования - запуск процесса из обработчика прерывания, прерывания должны быть запрещены во время запуска
bool_t proc_run_isr(proc_t * proc)
{
    1866:	df 93       	push	r29
    1868:	cf 93       	push	r28
    186a:	00 d0       	rcall	.+0      	; 0x186c <proc_run_isr+0x6>
    186c:	0f 92       	push	r0
    186e:	cd b7       	in	r28, 0x3d	; 61
    1870:	de b7       	in	r29, 0x3e	; 62
    1872:	9b 83       	std	Y+3, r25	; 0x03
    1874:	8a 83       	std	Y+2, r24	; 0x02
    bool_t ret = (bool_t)1;
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    if( proc->flags & (PROC_FLG_RUN|PROC_FLG_QUEUE|PROC_FLG_WAIT|PROC_FLG_END|PROC_FLG_DEAD) )
    187a:	ea 81       	ldd	r30, Y+2	; 0x02
    187c:	fb 81       	ldd	r31, Y+3	; 0x03
    187e:	83 85       	ldd	r24, Z+11	; 0x0b
    1880:	88 2f       	mov	r24, r24
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	8a 7d       	andi	r24, 0xDA	; 218
    1886:	90 70       	andi	r25, 0x00	; 0
    1888:	00 97       	sbiw	r24, 0x00	; 0
    188a:	11 f0       	breq	.+4      	; 0x1890 <proc_run_isr+0x2a>
    {
        ret = (bool_t)0;
    188c:	19 82       	std	Y+1, r1	; 0x01
    188e:	04 c0       	rjmp	.+8      	; 0x1898 <proc_run_isr+0x32>
        goto end;
    }
    _proc_run( proc );
    1890:	8a 81       	ldd	r24, Y+2	; 0x02
    1892:	9b 81       	ldd	r25, Y+3	; 0x03
    1894:	0e 94 15 0c 	call	0x182a	; 0x182a <_proc_run>
end:
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    return ret;
    1898:	89 81       	ldd	r24, Y+1	; 0x01
}
    189a:	0f 90       	pop	r0
    189c:	0f 90       	pop	r0
    189e:	0f 90       	pop	r0
    18a0:	cf 91       	pop	r28
    18a2:	df 91       	pop	r29
    18a4:	08 95       	ret

000018a6 <proc_restart_isr>:
// Перезепуск процесса из обработчика прерываний, прерывания должны быть запрещены
bool_t proc_restart_isr(proc_t * proc)
{
    18a6:	df 93       	push	r29
    18a8:	cf 93       	push	r28
    18aa:	00 d0       	rcall	.+0      	; 0x18ac <proc_restart_isr+0x6>
    18ac:	0f 92       	push	r0
    18ae:	cd b7       	in	r28, 0x3d	; 61
    18b0:	de b7       	in	r29, 0x3e	; 62
    18b2:	9b 83       	std	Y+3, r25	; 0x03
    18b4:	8a 83       	std	Y+2, r24	; 0x02
    bool_t ret = (bool_t)1;
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif
    if( proc->flags & (PROC_FLG_RUN|PROC_FLG_HOLD|PROC_FLG_QUEUE|PROC_FLG_WAIT|PROC_FLG_PRE_END|PROC_FLG_DEAD) )
    18ba:	ea 81       	ldd	r30, Y+2	; 0x02
    18bc:	fb 81       	ldd	r31, Y+3	; 0x03
    18be:	83 85       	ldd	r24, Z+11	; 0x0b
    18c0:	88 2f       	mov	r24, r24
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	8e 7b       	andi	r24, 0xBE	; 190
    18c6:	90 70       	andi	r25, 0x00	; 0
    18c8:	00 97       	sbiw	r24, 0x00	; 0
    18ca:	11 f0       	breq	.+4      	; 0x18d0 <proc_restart_isr+0x2a>
    {
        ret = (bool_t)0;
    18cc:	19 82       	std	Y+1, r1	; 0x01
    18ce:	2d c0       	rjmp	.+90     	; 0x192a <proc_restart_isr+0x84>
        goto end;
    }
    proc->flags = ( proc->flags & PROC_FLG_RT )?PROC_FLG_RT:(flag_t)0;
    18d0:	ea 81       	ldd	r30, Y+2	; 0x02
    18d2:	fb 81       	ldd	r31, Y+3	; 0x03
    18d4:	83 85       	ldd	r24, Z+11	; 0x0b
    18d6:	81 70       	andi	r24, 0x01	; 1
    18d8:	ea 81       	ldd	r30, Y+2	; 0x02
    18da:	fb 81       	ldd	r31, Y+3	; 0x03
    18dc:	83 87       	std	Z+11, r24	; 0x0b
#ifdef CONFIG_USE_HIGHEST_LOCKER
    pcounter_init(&proc->lres);
    18de:	8a 81       	ldd	r24, Y+2	; 0x02
    18e0:	9b 81       	ldd	r25, Y+3	; 0x03
    18e2:	0d 96       	adiw	r24, 0x0d	; 13
    18e4:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <pcounter_init>
#else
    proc->lres = (count_t)0;
#endif
    proc->timer = proc->time_quant;
    18e8:	ea 81       	ldd	r30, Y+2	; 0x02
    18ea:	fb 81       	ldd	r31, Y+3	; 0x03
    18ec:	86 8d       	ldd	r24, Z+30	; 0x1e
    18ee:	97 8d       	ldd	r25, Z+31	; 0x1f
    18f0:	ea 81       	ldd	r30, Y+2	; 0x02
    18f2:	fb 81       	ldd	r31, Y+3	; 0x03
    18f4:	91 a3       	std	Z+33, r25	; 0x21
    18f6:	80 a3       	std	Z+32, r24	; 0x20

    if( proc->sstart )proc->spointer = proc_stack_init( proc->sstart, (code_t)proc_run_wrapper, (void *)proc );
    18f8:	ea 81       	ldd	r30, Y+2	; 0x02
    18fa:	fb 81       	ldd	r31, Y+3	; 0x03
    18fc:	82 a5       	ldd	r24, Z+42	; 0x2a
    18fe:	93 a5       	ldd	r25, Z+43	; 0x2b
    1900:	00 97       	sbiw	r24, 0x00	; 0
    1902:	79 f0       	breq	.+30     	; 0x1922 <proc_restart_isr+0x7c>
    1904:	ea 81       	ldd	r30, Y+2	; 0x02
    1906:	fb 81       	ldd	r31, Y+3	; 0x03
    1908:	82 a5       	ldd	r24, Z+42	; 0x2a
    190a:	93 a5       	ldd	r25, Z+43	; 0x2b
    190c:	28 e5       	ldi	r18, 0x58	; 88
    190e:	33 e0       	ldi	r19, 0x03	; 3
    1910:	4a 81       	ldd	r20, Y+2	; 0x02
    1912:	5b 81       	ldd	r21, Y+3	; 0x03
    1914:	b9 01       	movw	r22, r18
    1916:	0e 94 d7 00 	call	0x1ae	; 0x1ae <proc_stack_init>
    191a:	ea 81       	ldd	r30, Y+2	; 0x02
    191c:	fb 81       	ldd	r31, Y+3	; 0x03
    191e:	95 a7       	std	Z+45, r25	; 0x2d
    1920:	84 a7       	std	Z+44, r24	; 0x2c
    _proc_run( proc );
    1922:	8a 81       	ldd	r24, Y+2	; 0x02
    1924:	9b 81       	ldd	r25, Y+3	; 0x03
    1926:	0e 94 15 0c 	call	0x182a	; 0x182a <_proc_run>
end:
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif
    return ret;
    192a:	89 81       	ldd	r24, Y+1	; 0x01
}
    192c:	0f 90       	pop	r0
    192e:	0f 90       	pop	r0
    1930:	0f 90       	pop	r0
    1932:	cf 91       	pop	r28
    1934:	df 91       	pop	r29
    1936:	08 95       	ret

00001938 <_proc_stop>:
        spin_unlock( xlist_lock );
    }
}
#endif // CONFIG_MP
void _proc_stop(proc_t * proc)
{
    1938:	df 93       	push	r29
    193a:	cf 93       	push	r28
    193c:	00 d0       	rcall	.+0      	; 0x193e <_proc_stop+0x6>
    193e:	cd b7       	in	r28, 0x3d	; 61
    1940:	de b7       	in	r29, 0x3e	; 62
    1942:	9a 83       	std	Y+2, r25	; 0x02
    1944:	89 83       	std	Y+1, r24	; 0x01
    proc->flags &= ~PROC_FLG_RUN;
    1946:	e9 81       	ldd	r30, Y+1	; 0x01
    1948:	fa 81       	ldd	r31, Y+2	; 0x02
    194a:	83 85       	ldd	r24, Z+11	; 0x0b
    194c:	8d 7f       	andi	r24, 0xFD	; 253
    194e:	e9 81       	ldd	r30, Y+1	; 0x01
    1950:	fa 81       	ldd	r31, Y+2	; 0x02
    1952:	83 87       	std	Z+11, r24	; 0x0b
    _proc_stop_( proc );
    1954:	89 81       	ldd	r24, Y+1	; 0x01
    1956:	9a 81       	ldd	r25, Y+2	; 0x02
    1958:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <gitem_cut>
#ifdef CONFIG_MP
    resched( proc->core_id );
#else
    resched();
    195c:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
#endif // CONFIG_MP
}
    1960:	0f 90       	pop	r0
    1962:	0f 90       	pop	r0
    1964:	cf 91       	pop	r28
    1966:	df 91       	pop	r29
    1968:	08 95       	ret

0000196a <proc_stop_isr>:
// Останов процесса из обработчика прерываний, прерывания должны быть запрещены
bool_t proc_stop_isr(proc_t * proc)
{
    196a:	df 93       	push	r29
    196c:	cf 93       	push	r28
    196e:	00 d0       	rcall	.+0      	; 0x1970 <proc_stop_isr+0x6>
    1970:	0f 92       	push	r0
    1972:	cd b7       	in	r28, 0x3d	; 61
    1974:	de b7       	in	r29, 0x3e	; 62
    1976:	9b 83       	std	Y+3, r25	; 0x03
    1978:	8a 83       	std	Y+2, r24	; 0x02
    bool_t ret = (bool_t)0;
    197a:	19 82       	std	Y+1, r1	; 0x01
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    //Проверка флагов
    //В случчае PROC_FLG_WAIT будем обрабатывать PROC_FLG_PRE_END на выходе из sig_wait.
    //В случае PROC_FLG_HOLD или PROC_FLG_QUEUE будем обрабатывать PROC_FLG_PRE_END на выходе из функции, освобождающей общий ресурс.
    if( proc->flags & (PROC_FLG_HOLD|PROC_FLG_QUEUE|PROC_FLG_WAIT) )proc->flags |= PROC_FLG_PRE_END;
    197c:	ea 81       	ldd	r30, Y+2	; 0x02
    197e:	fb 81       	ldd	r31, Y+3	; 0x03
    1980:	83 85       	ldd	r24, Z+11	; 0x0b
    1982:	88 2f       	mov	r24, r24
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	8c 71       	andi	r24, 0x1C	; 28
    1988:	90 70       	andi	r25, 0x00	; 0
    198a:	00 97       	sbiw	r24, 0x00	; 0
    198c:	41 f0       	breq	.+16     	; 0x199e <proc_stop_isr+0x34>
    198e:	ea 81       	ldd	r30, Y+2	; 0x02
    1990:	fb 81       	ldd	r31, Y+3	; 0x03
    1992:	83 85       	ldd	r24, Z+11	; 0x0b
    1994:	80 62       	ori	r24, 0x20	; 32
    1996:	ea 81       	ldd	r30, Y+2	; 0x02
    1998:	fb 81       	ldd	r31, Y+3	; 0x03
    199a:	83 87       	std	Z+11, r24	; 0x0b
    199c:	0f c0       	rjmp	.+30     	; 0x19bc <proc_stop_isr+0x52>
    else if( proc->flags & PROC_FLG_RUN )
    199e:	ea 81       	ldd	r30, Y+2	; 0x02
    19a0:	fb 81       	ldd	r31, Y+3	; 0x03
    19a2:	83 85       	ldd	r24, Z+11	; 0x0b
    19a4:	88 2f       	mov	r24, r24
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	82 70       	andi	r24, 0x02	; 2
    19aa:	90 70       	andi	r25, 0x00	; 0
    19ac:	00 97       	sbiw	r24, 0x00	; 0
    19ae:	31 f0       	breq	.+12     	; 0x19bc <proc_stop_isr+0x52>
    {
        _proc_stop( proc );
    19b0:	8a 81       	ldd	r24, Y+2	; 0x02
    19b2:	9b 81       	ldd	r25, Y+3	; 0x03
    19b4:	0e 94 9c 0c 	call	0x1938	; 0x1938 <_proc_stop>
        ret = (bool_t)1;
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	89 83       	std	Y+1, r24	; 0x01
    }
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    return ret;
    19bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    19be:	0f 90       	pop	r0
    19c0:	0f 90       	pop	r0
    19c2:	0f 90       	pop	r0
    19c4:	cf 91       	pop	r28
    19c6:	df 91       	pop	r29
    19c8:	08 95       	ret

000019ca <proc_reset_watchdog>:
void proc_reset_watchdog(void)
{
    19ca:	df 93       	push	r29
    19cc:	cf 93       	push	r28
    19ce:	00 d0       	rcall	.+0      	; 0x19d0 <proc_reset_watchdog+0x6>
    19d0:	cd b7       	in	r28, 0x3d	; 61
    19d2:	de b7       	in	r29, 0x3e	; 62
#ifdef CONFIG_MP
    core_id_t current_core = _enter_crit_sec();
    proc = ((sched_t *)kernel.sched + current_core)->current_proc;
    spin_lock(&proc->lock);
#else
    enter_crit_sec();
    19d4:	0e 94 21 06 	call	0xc42	; 0xc42 <enter_crit_sec>
    proc = kernel.sched.current_proc;
    19d8:	80 91 9e 01 	lds	r24, 0x019E
    19dc:	90 91 9f 01 	lds	r25, 0x019F
    19e0:	9a 83       	std	Y+2, r25	; 0x02
    19e2:	89 83       	std	Y+1, r24	; 0x01
#endif
    if( proc->flags & PROC_FLG_RT )proc->timer = proc->time_quant;
    19e4:	e9 81       	ldd	r30, Y+1	; 0x01
    19e6:	fa 81       	ldd	r31, Y+2	; 0x02
    19e8:	83 85       	ldd	r24, Z+11	; 0x0b
    19ea:	88 2f       	mov	r24, r24
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	81 70       	andi	r24, 0x01	; 1
    19f0:	90 70       	andi	r25, 0x00	; 0
    19f2:	88 23       	and	r24, r24
    19f4:	41 f0       	breq	.+16     	; 0x1a06 <proc_reset_watchdog+0x3c>
    19f6:	e9 81       	ldd	r30, Y+1	; 0x01
    19f8:	fa 81       	ldd	r31, Y+2	; 0x02
    19fa:	86 8d       	ldd	r24, Z+30	; 0x1e
    19fc:	97 8d       	ldd	r25, Z+31	; 0x1f
    19fe:	e9 81       	ldd	r30, Y+1	; 0x01
    1a00:	fa 81       	ldd	r31, Y+2	; 0x02
    1a02:	91 a3       	std	Z+33, r25	; 0x21
    1a04:	80 a3       	std	Z+32, r24	; 0x20
#ifdef CONFIG_MP
    spin_lock(&proc->lock);
    _exit_crit_sec(current_core);
#else
    exit_crit_sec();
    1a06:	0e 94 33 06 	call	0xc66	; 0xc66 <exit_crit_sec>
#endif
}
    1a0a:	0f 90       	pop	r0
    1a0c:	0f 90       	pop	r0
    1a0e:	cf 91       	pop	r28
    1a10:	df 91       	pop	r29
    1a12:	08 95       	ret

00001a14 <_proc_flag_stop_isr>:

void _proc_flag_stop_isr( flag_t mask )
{
    1a14:	df 93       	push	r29
    1a16:	cf 93       	push	r28
    1a18:	00 d0       	rcall	.+0      	; 0x1a1a <_proc_flag_stop_isr+0x6>
    1a1a:	0f 92       	push	r0
    1a1c:	cd b7       	in	r28, 0x3d	; 61
    1a1e:	de b7       	in	r29, 0x3e	; 62
    1a20:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = current_proc();
    1a22:	0e 94 cc 00 	call	0x198	; 0x198 <current_proc>
    1a26:	9a 83       	std	Y+2, r25	; 0x02
    1a28:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif //CONFIG_MP
    proc->flags &= mask;
    1a2a:	e9 81       	ldd	r30, Y+1	; 0x01
    1a2c:	fa 81       	ldd	r31, Y+2	; 0x02
    1a2e:	93 85       	ldd	r25, Z+11	; 0x0b
    1a30:	8b 81       	ldd	r24, Y+3	; 0x03
    1a32:	89 23       	and	r24, r25
    1a34:	e9 81       	ldd	r30, Y+1	; 0x01
    1a36:	fa 81       	ldd	r31, Y+2	; 0x02
    1a38:	83 87       	std	Z+11, r24	; 0x0b
    if(  ( proc->flags & PROC_FLG_PRE_END ) && (!(proc->flags & PROC_FLG_HOLD))  )
    1a3a:	e9 81       	ldd	r30, Y+1	; 0x01
    1a3c:	fa 81       	ldd	r31, Y+2	; 0x02
    1a3e:	83 85       	ldd	r24, Z+11	; 0x0b
    1a40:	88 2f       	mov	r24, r24
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	80 72       	andi	r24, 0x20	; 32
    1a46:	90 70       	andi	r25, 0x00	; 0
    1a48:	00 97       	sbiw	r24, 0x00	; 0
    1a4a:	a1 f0       	breq	.+40     	; 0x1a74 <_proc_flag_stop_isr+0x60>
    1a4c:	e9 81       	ldd	r30, Y+1	; 0x01
    1a4e:	fa 81       	ldd	r31, Y+2	; 0x02
    1a50:	83 85       	ldd	r24, Z+11	; 0x0b
    1a52:	88 2f       	mov	r24, r24
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	84 70       	andi	r24, 0x04	; 4
    1a58:	90 70       	andi	r25, 0x00	; 0
    1a5a:	00 97       	sbiw	r24, 0x00	; 0
    1a5c:	59 f4       	brne	.+22     	; 0x1a74 <_proc_flag_stop_isr+0x60>
    {
        proc->flags &= ~PROC_FLG_PRE_END;
    1a5e:	e9 81       	ldd	r30, Y+1	; 0x01
    1a60:	fa 81       	ldd	r31, Y+2	; 0x02
    1a62:	83 85       	ldd	r24, Z+11	; 0x0b
    1a64:	8f 7d       	andi	r24, 0xDF	; 223
    1a66:	e9 81       	ldd	r30, Y+1	; 0x01
    1a68:	fa 81       	ldd	r31, Y+2	; 0x02
    1a6a:	83 87       	std	Z+11, r24	; 0x0b
        _proc_stop( proc );
    1a6c:	89 81       	ldd	r24, Y+1	; 0x01
    1a6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a70:	0e 94 9c 0c 	call	0x1938	; 0x1938 <_proc_stop>
    }
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif //CONFIG_MP
}
    1a74:	0f 90       	pop	r0
    1a76:	0f 90       	pop	r0
    1a78:	0f 90       	pop	r0
    1a7a:	cf 91       	pop	r28
    1a7c:	df 91       	pop	r29
    1a7e:	08 95       	ret

00001a80 <_proc_lres_inc>:
    proc_t * proc
#ifdef CONFIG_USE_HIGHEST_LOCKER
    ,prio_t prio
#endif
)
{
    1a80:	df 93       	push	r29
    1a82:	cf 93       	push	r28
    1a84:	00 d0       	rcall	.+0      	; 0x1a86 <_proc_lres_inc+0x6>
    1a86:	0f 92       	push	r0
    1a88:	cd b7       	in	r28, 0x3d	; 61
    1a8a:	de b7       	in	r29, 0x3e	; 62
    1a8c:	9a 83       	std	Y+2, r25	; 0x02
    1a8e:	89 83       	std	Y+1, r24	; 0x01
    1a90:	6b 83       	std	Y+3, r22	; 0x03
#ifdef CONFIG_USE_HIGHEST_LOCKER
    if( proc->lres.index == (index_t)0 )proc->flags |= PROC_FLG_HOLD;
    1a92:	e9 81       	ldd	r30, Y+1	; 0x01
    1a94:	fa 81       	ldd	r31, Y+2	; 0x02
    1a96:	85 8d       	ldd	r24, Z+29	; 0x1d
    1a98:	88 23       	and	r24, r24
    1a9a:	39 f4       	brne	.+14     	; 0x1aaa <_proc_lres_inc+0x2a>
    1a9c:	e9 81       	ldd	r30, Y+1	; 0x01
    1a9e:	fa 81       	ldd	r31, Y+2	; 0x02
    1aa0:	83 85       	ldd	r24, Z+11	; 0x0b
    1aa2:	84 60       	ori	r24, 0x04	; 4
    1aa4:	e9 81       	ldd	r30, Y+1	; 0x01
    1aa6:	fa 81       	ldd	r31, Y+2	; 0x02
    1aa8:	83 87       	std	Z+11, r24	; 0x0b
    pcounter_inc( &proc->lres, prio );
    1aaa:	89 81       	ldd	r24, Y+1	; 0x01
    1aac:	9a 81       	ldd	r25, Y+2	; 0x02
    1aae:	0d 96       	adiw	r24, 0x0d	; 13
    1ab0:	6b 81       	ldd	r22, Y+3	; 0x03
    1ab2:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <pcounter_inc>
#else
    if( proc->lres == (count_t)0 )proc->flags |= PROC_FLG_HOLD;
    proc->lres++;
#endif
}
    1ab6:	0f 90       	pop	r0
    1ab8:	0f 90       	pop	r0
    1aba:	0f 90       	pop	r0
    1abc:	cf 91       	pop	r28
    1abe:	df 91       	pop	r29
    1ac0:	08 95       	ret

00001ac2 <_proc_lres_dec>:
    proc_t * proc
#ifdef CONFIG_USE_HIGHEST_LOCKER
    ,prio_t prio
#endif
)
{
    1ac2:	df 93       	push	r29
    1ac4:	cf 93       	push	r28
    1ac6:	00 d0       	rcall	.+0      	; 0x1ac8 <_proc_lres_dec+0x6>
    1ac8:	0f 92       	push	r0
    1aca:	cd b7       	in	r28, 0x3d	; 61
    1acc:	de b7       	in	r29, 0x3e	; 62
    1ace:	9a 83       	std	Y+2, r25	; 0x02
    1ad0:	89 83       	std	Y+1, r24	; 0x01
    1ad2:	6b 83       	std	Y+3, r22	; 0x03
#ifdef CONFIG_USE_HIGHEST_LOCKER
    pcounter_dec( &proc->lres, prio );
    1ad4:	89 81       	ldd	r24, Y+1	; 0x01
    1ad6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ad8:	0d 96       	adiw	r24, 0x0d	; 13
    1ada:	6b 81       	ldd	r22, Y+3	; 0x03
    1adc:	0e 94 3b 0b 	call	0x1676	; 0x1676 <pcounter_dec>
    if( proc->lres.index == (index_t)0 )proc->flags &= ~PROC_FLG_HOLD;
    1ae0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ae2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ae4:	85 8d       	ldd	r24, Z+29	; 0x1d
    1ae6:	88 23       	and	r24, r24
    1ae8:	39 f4       	brne	.+14     	; 0x1af8 <_proc_lres_dec+0x36>
    1aea:	e9 81       	ldd	r30, Y+1	; 0x01
    1aec:	fa 81       	ldd	r31, Y+2	; 0x02
    1aee:	83 85       	ldd	r24, Z+11	; 0x0b
    1af0:	8b 7f       	andi	r24, 0xFB	; 251
    1af2:	e9 81       	ldd	r30, Y+1	; 0x01
    1af4:	fa 81       	ldd	r31, Y+2	; 0x02
    1af6:	83 87       	std	Z+11, r24	; 0x0b
#else
    if( proc->lres!= (count_t)0 )proc->lres--;
    if( proc->lres == (count_t)0 )proc->flags &= ~PROC_FLG_HOLD;
#endif
}
    1af8:	0f 90       	pop	r0
    1afa:	0f 90       	pop	r0
    1afc:	0f 90       	pop	r0
    1afe:	cf 91       	pop	r28
    1b00:	df 91       	pop	r29
    1b02:	08 95       	ret

00001b04 <_proc_prio_control_stoped>:
#ifdef CONFIG_USE_HIGHEST_LOCKER
// Будет использоваться в mutex-ах и т.п., процесс должен сам вызывать эту функцию, при этом он должен быть вырезан из списка выполняющихся.
void _proc_prio_control_stoped( proc_t * proc )
{
    1b04:	df 93       	push	r29
    1b06:	cf 93       	push	r28
    1b08:	cd b7       	in	r28, 0x3d	; 61
    1b0a:	de b7       	in	r29, 0x3e	; 62
    1b0c:	27 97       	sbiw	r28, 0x07	; 7
    1b0e:	0f b6       	in	r0, 0x3f	; 63
    1b10:	f8 94       	cli
    1b12:	de bf       	out	0x3e, r29	; 62
    1b14:	0f be       	out	0x3f, r0	; 63
    1b16:	cd bf       	out	0x3d, r28	; 61
    1b18:	9b 83       	std	Y+3, r25	; 0x03
    1b1a:	8a 83       	std	Y+2, r24	; 0x02
    if(proc->lres.index != (index_t)0)
    1b1c:	ea 81       	ldd	r30, Y+2	; 0x02
    1b1e:	fb 81       	ldd	r31, Y+3	; 0x03
    1b20:	85 8d       	ldd	r24, Z+29	; 0x1d
    1b22:	88 23       	and	r24, r24
    1b24:	e9 f0       	breq	.+58     	; 0x1b60 <_proc_prio_control_stoped+0x5c>
    {
        prio_t locker_prio = index_search( proc->lres.index );
    1b26:	ea 81       	ldd	r30, Y+2	; 0x02
    1b28:	fb 81       	ldd	r31, Y+3	; 0x03
    1b2a:	85 8d       	ldd	r24, Z+29	; 0x1d
    1b2c:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <index_search>
    1b30:	89 83       	std	Y+1, r24	; 0x01
        ((gitem_t *)proc)->group->prio = ( locker_prio < proc->base_prio )?locker_prio:proc->base_prio;
    1b32:	ea 81       	ldd	r30, Y+2	; 0x02
    1b34:	fb 81       	ldd	r31, Y+3	; 0x03
    1b36:	84 81       	ldd	r24, Z+4	; 0x04
    1b38:	95 81       	ldd	r25, Z+5	; 0x05
    1b3a:	9e 83       	std	Y+6, r25	; 0x06
    1b3c:	8d 83       	std	Y+5, r24	; 0x05
    1b3e:	ea 81       	ldd	r30, Y+2	; 0x02
    1b40:	fb 81       	ldd	r31, Y+3	; 0x03
    1b42:	84 85       	ldd	r24, Z+12	; 0x0c
    1b44:	99 81       	ldd	r25, Y+1	; 0x01
    1b46:	9f 83       	std	Y+7, r25	; 0x07
    1b48:	8c 83       	std	Y+4, r24	; 0x04
    1b4a:	ec 81       	ldd	r30, Y+4	; 0x04
    1b4c:	ff 81       	ldd	r31, Y+7	; 0x07
    1b4e:	fe 17       	cp	r31, r30
    1b50:	10 f4       	brcc	.+4      	; 0x1b56 <_proc_prio_control_stoped+0x52>
    1b52:	8f 81       	ldd	r24, Y+7	; 0x07
    1b54:	8c 83       	std	Y+4, r24	; 0x04
    1b56:	8c 81       	ldd	r24, Y+4	; 0x04
    1b58:	ed 81       	ldd	r30, Y+5	; 0x05
    1b5a:	fe 81       	ldd	r31, Y+6	; 0x06
    1b5c:	82 83       	std	Z+2, r24	; 0x02
    1b5e:	0a c0       	rjmp	.+20     	; 0x1b74 <_proc_prio_control_stoped+0x70>
    }
    else
    {
        ((gitem_t *)proc)->group->prio = proc->base_prio;
    1b60:	ea 81       	ldd	r30, Y+2	; 0x02
    1b62:	fb 81       	ldd	r31, Y+3	; 0x03
    1b64:	a4 81       	ldd	r26, Z+4	; 0x04
    1b66:	b5 81       	ldd	r27, Z+5	; 0x05
    1b68:	ea 81       	ldd	r30, Y+2	; 0x02
    1b6a:	fb 81       	ldd	r31, Y+3	; 0x03
    1b6c:	84 85       	ldd	r24, Z+12	; 0x0c
    1b6e:	12 96       	adiw	r26, 0x02	; 2
    1b70:	8c 93       	st	X, r24
    1b72:	12 97       	sbiw	r26, 0x02	; 2
    }
}
    1b74:	27 96       	adiw	r28, 0x07	; 7
    1b76:	0f b6       	in	r0, 0x3f	; 63
    1b78:	f8 94       	cli
    1b7a:	de bf       	out	0x3e, r29	; 62
    1b7c:	0f be       	out	0x3f, r0	; 63
    1b7e:	cd bf       	out	0x3d, r28	; 61
    1b80:	cf 91       	pop	r28
    1b82:	df 91       	pop	r29
    1b84:	08 95       	ret

00001b86 <_proc_prio_control_running>:
void _proc_prio_control_running( proc_t * proc )
{
    1b86:	df 93       	push	r29
    1b88:	cf 93       	push	r28
    1b8a:	00 d0       	rcall	.+0      	; 0x1b8c <_proc_prio_control_running+0x6>
    1b8c:	00 d0       	rcall	.+0      	; 0x1b8e <_proc_prio_control_running+0x8>
    1b8e:	00 d0       	rcall	.+0      	; 0x1b90 <_proc_prio_control_running+0xa>
    1b90:	cd b7       	in	r28, 0x3d	; 61
    1b92:	de b7       	in	r29, 0x3e	; 62
    1b94:	9c 83       	std	Y+4, r25	; 0x04
    1b96:	8b 83       	std	Y+3, r24	; 0x03
    prio_t new_prio;
    if(proc->lres.index != (index_t)0)
    1b98:	eb 81       	ldd	r30, Y+3	; 0x03
    1b9a:	fc 81       	ldd	r31, Y+4	; 0x04
    1b9c:	85 8d       	ldd	r24, Z+29	; 0x1d
    1b9e:	88 23       	and	r24, r24
    1ba0:	a9 f0       	breq	.+42     	; 0x1bcc <_proc_prio_control_running+0x46>
    {
        prio_t locker_prio = index_search( proc->lres.index );
    1ba2:	eb 81       	ldd	r30, Y+3	; 0x03
    1ba4:	fc 81       	ldd	r31, Y+4	; 0x04
    1ba6:	85 8d       	ldd	r24, Z+29	; 0x1d
    1ba8:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <index_search>
    1bac:	89 83       	std	Y+1, r24	; 0x01
        new_prio = ( locker_prio < proc->base_prio )?locker_prio:proc->base_prio;
    1bae:	eb 81       	ldd	r30, Y+3	; 0x03
    1bb0:	fc 81       	ldd	r31, Y+4	; 0x04
    1bb2:	84 85       	ldd	r24, Z+12	; 0x0c
    1bb4:	99 81       	ldd	r25, Y+1	; 0x01
    1bb6:	9e 83       	std	Y+6, r25	; 0x06
    1bb8:	8d 83       	std	Y+5, r24	; 0x05
    1bba:	8d 81       	ldd	r24, Y+5	; 0x05
    1bbc:	9e 81       	ldd	r25, Y+6	; 0x06
    1bbe:	98 17       	cp	r25, r24
    1bc0:	10 f4       	brcc	.+4      	; 0x1bc6 <_proc_prio_control_running+0x40>
    1bc2:	8e 81       	ldd	r24, Y+6	; 0x06
    1bc4:	8d 83       	std	Y+5, r24	; 0x05
    1bc6:	9d 81       	ldd	r25, Y+5	; 0x05
    1bc8:	9a 83       	std	Y+2, r25	; 0x02
    1bca:	04 c0       	rjmp	.+8      	; 0x1bd4 <_proc_prio_control_running+0x4e>
    }
    else
    {
        new_prio = proc->base_prio;
    1bcc:	eb 81       	ldd	r30, Y+3	; 0x03
    1bce:	fc 81       	ldd	r31, Y+4	; 0x04
    1bd0:	84 85       	ldd	r24, Z+12	; 0x0c
    1bd2:	8a 83       	std	Y+2, r24	; 0x02
    }
    if(((gitem_t *)proc)->group->prio != new_prio)
    1bd4:	eb 81       	ldd	r30, Y+3	; 0x03
    1bd6:	fc 81       	ldd	r31, Y+4	; 0x04
    1bd8:	04 80       	ldd	r0, Z+4	; 0x04
    1bda:	f5 81       	ldd	r31, Z+5	; 0x05
    1bdc:	e0 2d       	mov	r30, r0
    1bde:	92 81       	ldd	r25, Z+2	; 0x02
    1be0:	8a 81       	ldd	r24, Y+2	; 0x02
    1be2:	98 17       	cp	r25, r24
    1be4:	b1 f0       	breq	.+44     	; 0x1c12 <_proc_prio_control_running+0x8c>
    {
        _proc_stop_( proc );
    1be6:	8b 81       	ldd	r24, Y+3	; 0x03
    1be8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bea:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <gitem_cut>
        ((gitem_t *)proc)->group->prio = new_prio;
    1bee:	eb 81       	ldd	r30, Y+3	; 0x03
    1bf0:	fc 81       	ldd	r31, Y+4	; 0x04
    1bf2:	04 80       	ldd	r0, Z+4	; 0x04
    1bf4:	f5 81       	ldd	r31, Z+5	; 0x05
    1bf6:	e0 2d       	mov	r30, r0
    1bf8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfa:	82 83       	std	Z+2, r24	; 0x02
#ifdef CONFIG_MP
        spin_lock( &kernel.stat_lock );
        stat_inc( proc, (stat_t *)kernel.stat+proc->core_id );
        spin_unlock( &kernel.stat_lock );
#endif
        _proc_run_( proc );
    1bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfe:	9c 81       	ldd	r25, Y+4	; 0x04
    1c00:	20 91 a0 01 	lds	r18, 0x01A0
    1c04:	30 91 a1 01 	lds	r19, 0x01A1
    1c08:	b9 01       	movw	r22, r18
    1c0a:	0e 94 77 06 	call	0xcee	; 0xcee <gitem_insert>
#ifdef CONFIG_MP
        resched(proc->core_id);
#else
        resched();
    1c0e:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
#endif
    }
}
    1c12:	26 96       	adiw	r28, 0x06	; 6
    1c14:	0f b6       	in	r0, 0x3f	; 63
    1c16:	f8 94       	cli
    1c18:	de bf       	out	0x3e, r29	; 62
    1c1a:	0f be       	out	0x3f, r0	; 63
    1c1c:	cd bf       	out	0x3d, r28	; 61
    1c1e:	cf 91       	pop	r28
    1c20:	df 91       	pop	r29
    1c22:	08 95       	ret

00001c24 <sched_init>:
*****************************************************************************************/
#include "../include/bugurt.h"
///========================================================================================
// Инициация
void sched_init(sched_t * sched, proc_t * idle)
{
    1c24:	df 93       	push	r29
    1c26:	cf 93       	push	r28
    1c28:	00 d0       	rcall	.+0      	; 0x1c2a <sched_init+0x6>
    1c2a:	00 d0       	rcall	.+0      	; 0x1c2c <sched_init+0x8>
    1c2c:	cd b7       	in	r28, 0x3d	; 61
    1c2e:	de b7       	in	r29, 0x3e	; 62
    1c30:	9a 83       	std	Y+2, r25	; 0x02
    1c32:	89 83       	std	Y+1, r24	; 0x01
    1c34:	7c 83       	std	Y+4, r23	; 0x04
    1c36:	6b 83       	std	Y+3, r22	; 0x03
#ifdef CONFIG_MP
    lock_t * sched_lock = &sched->lock;
    spin_init( sched_lock );
    spin_lock( sched_lock );
#endif // CONFIG_MP
    sched->ready = (xlist_t *)sched->plst;
    1c38:	89 81       	ldd	r24, Y+1	; 0x01
    1c3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c3c:	06 96       	adiw	r24, 0x06	; 6
    1c3e:	e9 81       	ldd	r30, Y+1	; 0x01
    1c40:	fa 81       	ldd	r31, Y+2	; 0x02
    1c42:	93 83       	std	Z+3, r25	; 0x03
    1c44:	82 83       	std	Z+2, r24	; 0x02
    xlist_init( sched->ready );
    1c46:	e9 81       	ldd	r30, Y+1	; 0x01
    1c48:	fa 81       	ldd	r31, Y+2	; 0x02
    1c4a:	82 81       	ldd	r24, Z+2	; 0x02
    1c4c:	93 81       	ldd	r25, Z+3	; 0x03
    1c4e:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <xlist_init>
    sched->expired = (xlist_t *)sched->plst + 1;
    1c52:	89 81       	ldd	r24, Y+1	; 0x01
    1c54:	9a 81       	ldd	r25, Y+2	; 0x02
    1c56:	47 96       	adiw	r24, 0x17	; 23
    1c58:	e9 81       	ldd	r30, Y+1	; 0x01
    1c5a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c5c:	95 83       	std	Z+5, r25	; 0x05
    1c5e:	84 83       	std	Z+4, r24	; 0x04
    xlist_init( sched->expired );
    1c60:	e9 81       	ldd	r30, Y+1	; 0x01
    1c62:	fa 81       	ldd	r31, Y+2	; 0x02
    1c64:	84 81       	ldd	r24, Z+4	; 0x04
    1c66:	95 81       	ldd	r25, Z+5	; 0x05
    1c68:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <xlist_init>
    gitem_insert( (gitem_t *)idle, sched->ready );
    1c6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c70:	e9 81       	ldd	r30, Y+1	; 0x01
    1c72:	fa 81       	ldd	r31, Y+2	; 0x02
    1c74:	22 81       	ldd	r18, Z+2	; 0x02
    1c76:	33 81       	ldd	r19, Z+3	; 0x03
    1c78:	b9 01       	movw	r22, r18
    1c7a:	0e 94 77 06 	call	0xcee	; 0xcee <gitem_insert>
    sched->current_proc = idle;
    1c7e:	e9 81       	ldd	r30, Y+1	; 0x01
    1c80:	fa 81       	ldd	r31, Y+2	; 0x02
    1c82:	8b 81       	ldd	r24, Y+3	; 0x03
    1c84:	9c 81       	ldd	r25, Y+4	; 0x04
    1c86:	91 83       	std	Z+1, r25	; 0x01
    1c88:	80 83       	st	Z, r24
    sched->nested_crit_sec = (count_t)0;//вообще это выполняется при запрещенных прерываниях, но не известно, на этом ли процессоре
    1c8a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c8c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c8e:	11 a6       	std	Z+41, r1	; 0x29
    1c90:	10 a6       	std	Z+40, r1	; 0x28
#ifdef CONFIG_MP
    spin_unlock( sched_lock );
    stat_inc( idle, (stat_t *)kernel.stat + idle->core_id );
#endif // CONFIG_MP
}
    1c92:	0f 90       	pop	r0
    1c94:	0f 90       	pop	r0
    1c96:	0f 90       	pop	r0
    1c98:	0f 90       	pop	r0
    1c9a:	cf 91       	pop	r28
    1c9c:	df 91       	pop	r29
    1c9e:	08 95       	ret

00001ca0 <_sched_list_switch>:
static void _sched_list_switch( sched_t * sched )
{
    1ca0:	df 93       	push	r29
    1ca2:	cf 93       	push	r28
    1ca4:	00 d0       	rcall	.+0      	; 0x1ca6 <_sched_list_switch+0x6>
    1ca6:	00 d0       	rcall	.+0      	; 0x1ca8 <_sched_list_switch+0x8>
    1ca8:	cd b7       	in	r28, 0x3d	; 61
    1caa:	de b7       	in	r29, 0x3e	; 62
    1cac:	9c 83       	std	Y+4, r25	; 0x04
    1cae:	8b 83       	std	Y+3, r24	; 0x03
    // Список ready опустел, переключаем списки
    if( sched->ready->index == (index_t)0 )
    1cb0:	eb 81       	ldd	r30, Y+3	; 0x03
    1cb2:	fc 81       	ldd	r31, Y+4	; 0x04
    1cb4:	02 80       	ldd	r0, Z+2	; 0x02
    1cb6:	f3 81       	ldd	r31, Z+3	; 0x03
    1cb8:	e0 2d       	mov	r30, r0
    1cba:	80 89       	ldd	r24, Z+16	; 0x10
    1cbc:	88 23       	and	r24, r24
    1cbe:	a1 f4       	brne	.+40     	; 0x1ce8 <_sched_list_switch+0x48>
    {
        xlist_t * buf = sched->ready;
    1cc0:	eb 81       	ldd	r30, Y+3	; 0x03
    1cc2:	fc 81       	ldd	r31, Y+4	; 0x04
    1cc4:	82 81       	ldd	r24, Z+2	; 0x02
    1cc6:	93 81       	ldd	r25, Z+3	; 0x03
    1cc8:	9a 83       	std	Y+2, r25	; 0x02
    1cca:	89 83       	std	Y+1, r24	; 0x01
        sched->ready = sched->expired;
    1ccc:	eb 81       	ldd	r30, Y+3	; 0x03
    1cce:	fc 81       	ldd	r31, Y+4	; 0x04
    1cd0:	84 81       	ldd	r24, Z+4	; 0x04
    1cd2:	95 81       	ldd	r25, Z+5	; 0x05
    1cd4:	eb 81       	ldd	r30, Y+3	; 0x03
    1cd6:	fc 81       	ldd	r31, Y+4	; 0x04
    1cd8:	93 83       	std	Z+3, r25	; 0x03
    1cda:	82 83       	std	Z+2, r24	; 0x02
        sched->expired = buf;
    1cdc:	eb 81       	ldd	r30, Y+3	; 0x03
    1cde:	fc 81       	ldd	r31, Y+4	; 0x04
    1ce0:	89 81       	ldd	r24, Y+1	; 0x01
    1ce2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ce4:	95 83       	std	Z+5, r25	; 0x05
    1ce6:	84 83       	std	Z+4, r24	; 0x04
    }
}
    1ce8:	0f 90       	pop	r0
    1cea:	0f 90       	pop	r0
    1cec:	0f 90       	pop	r0
    1cee:	0f 90       	pop	r0
    1cf0:	cf 91       	pop	r28
    1cf2:	df 91       	pop	r29
    1cf4:	08 95       	ret

00001cf6 <sched_schedule>:
2) В качестве аргумента передаем только тот объект, который управляет процессами
на исполняющем функции процессоре.
******************************************************************************************/
// Функция планирования, переключает процессы в обработчике системмного таймера
stack_t * sched_schedule( stack_t * current_sp )
{
    1cf6:	df 93       	push	r29
    1cf8:	cf 93       	push	r28
    1cfa:	cd b7       	in	r28, 0x3d	; 61
    1cfc:	de b7       	in	r29, 0x3e	; 62
    1cfe:	27 97       	sbiw	r28, 0x07	; 7
    1d00:	0f b6       	in	r0, 0x3f	; 63
    1d02:	f8 94       	cli
    1d04:	de bf       	out	0x3e, r29	; 62
    1d06:	0f be       	out	0x3f, r0	; 63
    1d08:	cd bf       	out	0x3d, r28	; 61
    1d0a:	9f 83       	std	Y+7, r25	; 0x07
    1d0c:	8e 83       	std	Y+6, r24	; 0x06
#ifdef CONFIG_MP
    sched_t * sched = (sched_t *)kernel.sched + current_core();
#else
    sched_t * sched = (sched_t *)&kernel.sched;
    1d0e:	8e e9       	ldi	r24, 0x9E	; 158
    1d10:	91 e0       	ldi	r25, 0x01	; 1
    1d12:	9d 83       	std	Y+5, r25	; 0x05
    1d14:	8c 83       	std	Y+4, r24	; 0x04
#endif // CONFIG_MP
    // Меняем только с локального процессора, блокировку sched->lock можно не захватывать!
    proc_t * current_proc = sched->current_proc;
    1d16:	ec 81       	ldd	r30, Y+4	; 0x04
    1d18:	fd 81       	ldd	r31, Y+5	; 0x05
    1d1a:	80 81       	ld	r24, Z
    1d1c:	91 81       	ldd	r25, Z+1	; 0x01
    1d1e:	9b 83       	std	Y+3, r25	; 0x03
    1d20:	8a 83       	std	Y+2, r24	; 0x02
#ifdef CONFIG_MP
    // А вот эту блокировку обязательно надо захватить!
    spin_lock( &current_proc->lock );
#endif // CONFIG_MP
    // Сохранение указателя стека
    current_proc->spointer = current_sp;
    1d22:	ea 81       	ldd	r30, Y+2	; 0x02
    1d24:	fb 81       	ldd	r31, Y+3	; 0x03
    1d26:	8e 81       	ldd	r24, Y+6	; 0x06
    1d28:	9f 81       	ldd	r25, Y+7	; 0x07
    1d2a:	95 a7       	std	Z+45, r25	; 0x2d
    1d2c:	84 a7       	std	Z+44, r24	; 0x2c
    // Хук "сохранение контекста"
    if( current_proc->sv_hook )current_proc->sv_hook( current_proc->arg );
    1d2e:	ea 81       	ldd	r30, Y+2	; 0x02
    1d30:	fb 81       	ldd	r31, Y+3	; 0x03
    1d32:	84 a1       	ldd	r24, Z+36	; 0x24
    1d34:	95 a1       	ldd	r25, Z+37	; 0x25
    1d36:	00 97       	sbiw	r24, 0x00	; 0
    1d38:	51 f0       	breq	.+20     	; 0x1d4e <sched_schedule+0x58>
    1d3a:	ea 81       	ldd	r30, Y+2	; 0x02
    1d3c:	fb 81       	ldd	r31, Y+3	; 0x03
    1d3e:	24 a1       	ldd	r18, Z+36	; 0x24
    1d40:	35 a1       	ldd	r19, Z+37	; 0x25
    1d42:	ea 81       	ldd	r30, Y+2	; 0x02
    1d44:	fb 81       	ldd	r31, Y+3	; 0x03
    1d46:	80 a5       	ldd	r24, Z+40	; 0x28
    1d48:	91 a5       	ldd	r25, Z+41	; 0x29
    1d4a:	f9 01       	movw	r30, r18
    1d4c:	09 95       	icall
    // Проверяем, что процесс находится в списке ready
    if( (xlist_t *)((gitem_t *)current_proc)->group->link == sched->ready )
    1d4e:	ea 81       	ldd	r30, Y+2	; 0x02
    1d50:	fb 81       	ldd	r31, Y+3	; 0x03
    1d52:	04 80       	ldd	r0, Z+4	; 0x04
    1d54:	f5 81       	ldd	r31, Z+5	; 0x05
    1d56:	e0 2d       	mov	r30, r0
    1d58:	80 81       	ld	r24, Z
    1d5a:	91 81       	ldd	r25, Z+1	; 0x01
    1d5c:	9c 01       	movw	r18, r24
    1d5e:	ec 81       	ldd	r30, Y+4	; 0x04
    1d60:	fd 81       	ldd	r31, Y+5	; 0x05
    1d62:	82 81       	ldd	r24, Z+2	; 0x02
    1d64:	93 81       	ldd	r25, Z+3	; 0x03
    1d66:	28 17       	cp	r18, r24
    1d68:	39 07       	cpc	r19, r25
    1d6a:	09 f0       	breq	.+2      	; 0x1d6e <sched_schedule+0x78>
    1d6c:	4d c0       	rjmp	.+154    	; 0x1e08 <sched_schedule+0x112>
    {
        // Переключаем cписок на следующий за текущим процесс
#ifdef CONFIG_MP
        spin_lock( &sched->lock );
#endif // CONFIG_MP
        xlist_switch( sched->ready, ((gitem_t *)current_proc)->group->prio );
    1d6e:	ec 81       	ldd	r30, Y+4	; 0x04
    1d70:	fd 81       	ldd	r31, Y+5	; 0x05
    1d72:	82 81       	ldd	r24, Z+2	; 0x02
    1d74:	93 81       	ldd	r25, Z+3	; 0x03
    1d76:	ea 81       	ldd	r30, Y+2	; 0x02
    1d78:	fb 81       	ldd	r31, Y+3	; 0x03
    1d7a:	04 80       	ldd	r0, Z+4	; 0x04
    1d7c:	f5 81       	ldd	r31, Z+5	; 0x05
    1d7e:	e0 2d       	mov	r30, r0
    1d80:	22 81       	ldd	r18, Z+2	; 0x02
    1d82:	62 2f       	mov	r22, r18
    1d84:	0e 94 40 11 	call	0x2280	; 0x2280 <xlist_switch>
#ifdef CONFIG_MP
        spin_unlock( &sched->lock );
#endif // CONFIG_MP
        //Проверяем, не истек ли квант времени процесса
        if( current_proc->timer > (timer_t)1 )current_proc->timer--;// Не истек, уменьшаем таймер
    1d88:	ea 81       	ldd	r30, Y+2	; 0x02
    1d8a:	fb 81       	ldd	r31, Y+3	; 0x03
    1d8c:	80 a1       	ldd	r24, Z+32	; 0x20
    1d8e:	91 a1       	ldd	r25, Z+33	; 0x21
    1d90:	82 30       	cpi	r24, 0x02	; 2
    1d92:	91 05       	cpc	r25, r1
    1d94:	50 f0       	brcs	.+20     	; 0x1daa <sched_schedule+0xb4>
    1d96:	ea 81       	ldd	r30, Y+2	; 0x02
    1d98:	fb 81       	ldd	r31, Y+3	; 0x03
    1d9a:	80 a1       	ldd	r24, Z+32	; 0x20
    1d9c:	91 a1       	ldd	r25, Z+33	; 0x21
    1d9e:	01 97       	sbiw	r24, 0x01	; 1
    1da0:	ea 81       	ldd	r30, Y+2	; 0x02
    1da2:	fb 81       	ldd	r31, Y+3	; 0x03
    1da4:	91 a3       	std	Z+33, r25	; 0x21
    1da6:	80 a3       	std	Z+32, r24	; 0x20
    1da8:	2f c0       	rjmp	.+94     	; 0x1e08 <sched_schedule+0x112>
        {
            // Истек, вырезаем процесс из списка
#ifdef CONFIG_MP
            spin_lock( &sched->lock );
#endif // CONFIG_MP
            gitem_fast_cut( (gitem_t *)current_proc );
    1daa:	8a 81       	ldd	r24, Y+2	; 0x02
    1dac:	9b 81       	ldd	r25, Y+3	; 0x03
    1dae:	0e 94 4e 07 	call	0xe9c	; 0xe9c <gitem_fast_cut>
            // Обновили статистику после удаления процесса из списка ready
            stat_dec( current_proc, (stat_t *)kernel.stat + current_proc->core_id );
#endif // CONFIG_USE_ALB
#endif // CONFIG_MP
            // А что за процесс собственно?
            flag_t flags = current_proc->flags;
    1db2:	ea 81       	ldd	r30, Y+2	; 0x02
    1db4:	fb 81       	ldd	r31, Y+3	; 0x03
    1db6:	83 85       	ldd	r24, Z+11	; 0x0b
    1db8:	89 83       	std	Y+1, r24	; 0x01
            if(
                (!(flags & PROC_FLG_RT))
    1dba:	89 81       	ldd	r24, Y+1	; 0x01
    1dbc:	88 2f       	mov	r24, r24
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	81 70       	andi	r24, 0x01	; 1
    1dc2:	90 70       	andi	r25, 0x00	; 0
            stat_dec( current_proc, (stat_t *)kernel.stat + current_proc->core_id );
#endif // CONFIG_USE_ALB
#endif // CONFIG_MP
            // А что за процесс собственно?
            flag_t flags = current_proc->flags;
            if(
    1dc4:	00 97       	sbiw	r24, 0x00	; 0
    1dc6:	91 f4       	brne	.+36     	; 0x1dec <sched_schedule+0xf6>
                ||(flags & PROC_FLG_HOLD)
#endif // CONFIG_HARD_RT
            )
            {
                //Процесс общего назначения, либо он удерживает общий ресурс, сбрасываем таймер и переносим в очередь expired
                current_proc->timer = current_proc->time_quant;
    1dc8:	ea 81       	ldd	r30, Y+2	; 0x02
    1dca:	fb 81       	ldd	r31, Y+3	; 0x03
    1dcc:	86 8d       	ldd	r24, Z+30	; 0x1e
    1dce:	97 8d       	ldd	r25, Z+31	; 0x1f
    1dd0:	ea 81       	ldd	r30, Y+2	; 0x02
    1dd2:	fb 81       	ldd	r31, Y+3	; 0x03
    1dd4:	91 a3       	std	Z+33, r25	; 0x21
    1dd6:	80 a3       	std	Z+32, r24	; 0x20
#else // CONFIG_MP CONFIG_USE_ALB
                // Тупо переносим процесс в список expired
#ifdef CONFIG_MP
                spin_lock( &sched->lock );
#endif // CONFIG_MP
                gitem_insert( (gitem_t *)current_proc, sched->expired );
    1dd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dda:	9b 81       	ldd	r25, Y+3	; 0x03
    1ddc:	ec 81       	ldd	r30, Y+4	; 0x04
    1dde:	fd 81       	ldd	r31, Y+5	; 0x05
    1de0:	24 81       	ldd	r18, Z+4	; 0x04
    1de2:	35 81       	ldd	r19, Z+5	; 0x05
    1de4:	b9 01       	movw	r22, r18
    1de6:	0e 94 77 06 	call	0xcee	; 0xcee <gitem_insert>
    1dea:	0e c0       	rjmp	.+28     	; 0x1e08 <sched_schedule+0x112>
                spin_lock( &kernel.stat_lock );
                stat_dec( current_proc, (stat_t *)kernel.stat + current_proc->core_id );
#endif // nCONFIG_USE_ALB
                spin_unlock( &kernel.stat_lock );
#endif // CONFIG_MP
                ((gitem_t *)current_proc)->group->link = (void *)0;// Просто вырезали из списка, как в gitem_cut
    1dec:	ea 81       	ldd	r30, Y+2	; 0x02
    1dee:	fb 81       	ldd	r31, Y+3	; 0x03
    1df0:	04 80       	ldd	r0, Z+4	; 0x04
    1df2:	f5 81       	ldd	r31, Z+5	; 0x05
    1df4:	e0 2d       	mov	r30, r0
    1df6:	11 82       	std	Z+1, r1	; 0x01
    1df8:	10 82       	st	Z, r1
                current_proc->flags &= ~PROC_FLG_RUN;
    1dfa:	ea 81       	ldd	r30, Y+2	; 0x02
    1dfc:	fb 81       	ldd	r31, Y+3	; 0x03
    1dfe:	83 85       	ldd	r24, Z+11	; 0x0b
    1e00:	8d 7f       	andi	r24, 0xFD	; 253
    1e02:	ea 81       	ldd	r30, Y+2	; 0x02
    1e04:	fb 81       	ldd	r31, Y+3	; 0x03
    1e06:	83 87       	std	Z+11, r24	; 0x0b
#ifdef CONFIG_MP
    //Текущий процесс более не нужен, освобождаем его блокировку
    spin_unlock( &current_proc->lock );
    spin_lock( &sched->lock );
#endif // CONFIG_MP
    _sched_list_switch( sched );
    1e08:	8c 81       	ldd	r24, Y+4	; 0x04
    1e0a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e0c:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <_sched_list_switch>
    // Изменять указатель будем при захваченной блокировке,
    // чтобы процессы на других процессорах не прочитали неизвестно что.
    current_proc = (proc_t *)xlist_head( sched->ready ); // Вытесняющая многозадачность же!
    1e10:	ec 81       	ldd	r30, Y+4	; 0x04
    1e12:	fd 81       	ldd	r31, Y+5	; 0x05
    1e14:	82 81       	ldd	r24, Z+2	; 0x02
    1e16:	93 81       	ldd	r25, Z+3	; 0x03
    1e18:	0e 94 14 11 	call	0x2228	; 0x2228 <xlist_head>
    1e1c:	9b 83       	std	Y+3, r25	; 0x03
    1e1e:	8a 83       	std	Y+2, r24	; 0x02
    sched->current_proc = current_proc;
    1e20:	ec 81       	ldd	r30, Y+4	; 0x04
    1e22:	fd 81       	ldd	r31, Y+5	; 0x05
    1e24:	8a 81       	ldd	r24, Y+2	; 0x02
    1e26:	9b 81       	ldd	r25, Y+3	; 0x03
    1e28:	91 83       	std	Z+1, r25	; 0x01
    1e2a:	80 83       	st	Z, r24
#ifdef CONFIG_MP
    spin_unlock( &sched->lock );
    spin_lock( &current_proc->lock );
#endif // CONFIG_MP
    //Хук "восстановление контекста"
    if( current_proc->rs_hook )current_proc->rs_hook( current_proc->arg );
    1e2c:	ea 81       	ldd	r30, Y+2	; 0x02
    1e2e:	fb 81       	ldd	r31, Y+3	; 0x03
    1e30:	86 a1       	ldd	r24, Z+38	; 0x26
    1e32:	97 a1       	ldd	r25, Z+39	; 0x27
    1e34:	00 97       	sbiw	r24, 0x00	; 0
    1e36:	51 f0       	breq	.+20     	; 0x1e4c <sched_schedule+0x156>
    1e38:	ea 81       	ldd	r30, Y+2	; 0x02
    1e3a:	fb 81       	ldd	r31, Y+3	; 0x03
    1e3c:	26 a1       	ldd	r18, Z+38	; 0x26
    1e3e:	37 a1       	ldd	r19, Z+39	; 0x27
    1e40:	ea 81       	ldd	r30, Y+2	; 0x02
    1e42:	fb 81       	ldd	r31, Y+3	; 0x03
    1e44:	80 a5       	ldd	r24, Z+40	; 0x28
    1e46:	91 a5       	ldd	r25, Z+41	; 0x29
    1e48:	f9 01       	movw	r30, r18
    1e4a:	09 95       	icall
#ifdef CONFIG_MP
    stack_t * ret_sp = current_proc->spointer;
    spin_unlock( &current_proc->lock );
    return ret_sp;
#else
    return current_proc->spointer;
    1e4c:	ea 81       	ldd	r30, Y+2	; 0x02
    1e4e:	fb 81       	ldd	r31, Y+3	; 0x03
    1e50:	84 a5       	ldd	r24, Z+44	; 0x2c
    1e52:	95 a5       	ldd	r25, Z+45	; 0x2d
#endif // CONFIG_MP
}
    1e54:	27 96       	adiw	r28, 0x07	; 7
    1e56:	0f b6       	in	r0, 0x3f	; 63
    1e58:	f8 94       	cli
    1e5a:	de bf       	out	0x3e, r29	; 62
    1e5c:	0f be       	out	0x3f, r0	; 63
    1e5e:	cd bf       	out	0x3d, r28	; 61
    1e60:	cf 91       	pop	r28
    1e62:	df 91       	pop	r29
    1e64:	08 95       	ret

00001e66 <sched_reschedule>:
///----------------------------------------------------------------------------------------
// Функция перепланирования, переключает процессы в обработчике прерывания resched
stack_t * sched_reschedule( stack_t * current_sp )
{
    1e66:	df 93       	push	r29
    1e68:	cf 93       	push	r28
    1e6a:	00 d0       	rcall	.+0      	; 0x1e6c <sched_reschedule+0x6>
    1e6c:	00 d0       	rcall	.+0      	; 0x1e6e <sched_reschedule+0x8>
    1e6e:	00 d0       	rcall	.+0      	; 0x1e70 <sched_reschedule+0xa>
    1e70:	cd b7       	in	r28, 0x3d	; 61
    1e72:	de b7       	in	r29, 0x3e	; 62
    1e74:	9e 83       	std	Y+6, r25	; 0x06
    1e76:	8d 83       	std	Y+5, r24	; 0x05
#ifdef CONFIG_MP
    sched_t * sched = (sched_t *)kernel.sched + current_core();
#else
    sched_t * sched = (sched_t *)&kernel.sched;
    1e78:	8e e9       	ldi	r24, 0x9E	; 158
    1e7a:	91 e0       	ldi	r25, 0x01	; 1
    1e7c:	9c 83       	std	Y+4, r25	; 0x04
    1e7e:	8b 83       	std	Y+3, r24	; 0x03
#endif // CONFIG_MP
    // Меняем только с локального процессора, блокировку sched->lock можно не захватывать!
    proc_t * current_proc = sched->current_proc;
    1e80:	eb 81       	ldd	r30, Y+3	; 0x03
    1e82:	fc 81       	ldd	r31, Y+4	; 0x04
    1e84:	80 81       	ld	r24, Z
    1e86:	91 81       	ldd	r25, Z+1	; 0x01
    1e88:	9a 83       	std	Y+2, r25	; 0x02
    1e8a:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    // А вот эту блокировку обязательно надо захватить!
    spin_lock( &current_proc->lock );
#endif // CONFIG_MP
    // Сохранение указателя стека
    current_proc->spointer = current_sp;
    1e8c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e8e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e90:	8d 81       	ldd	r24, Y+5	; 0x05
    1e92:	9e 81       	ldd	r25, Y+6	; 0x06
    1e94:	95 a7       	std	Z+45, r25	; 0x2d
    1e96:	84 a7       	std	Z+44, r24	; 0x2c
    // Хук "сохранение контекста"
    if( current_proc->sv_hook )current_proc->sv_hook( current_proc->arg );
    1e98:	e9 81       	ldd	r30, Y+1	; 0x01
    1e9a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e9c:	84 a1       	ldd	r24, Z+36	; 0x24
    1e9e:	95 a1       	ldd	r25, Z+37	; 0x25
    1ea0:	00 97       	sbiw	r24, 0x00	; 0
    1ea2:	51 f0       	breq	.+20     	; 0x1eb8 <sched_reschedule+0x52>
    1ea4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ea6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ea8:	24 a1       	ldd	r18, Z+36	; 0x24
    1eaa:	35 a1       	ldd	r19, Z+37	; 0x25
    1eac:	e9 81       	ldd	r30, Y+1	; 0x01
    1eae:	fa 81       	ldd	r31, Y+2	; 0x02
    1eb0:	80 a5       	ldd	r24, Z+40	; 0x28
    1eb2:	91 a5       	ldd	r25, Z+41	; 0x29
    1eb4:	f9 01       	movw	r30, r18
    1eb6:	09 95       	icall
#ifdef CONFIG_MP
    spin_unlock( &current_proc->lock );
    spin_lock( &sched->lock );
#endif // CONFIG_MP
    _sched_list_switch( sched );
    1eb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eba:	9c 81       	ldd	r25, Y+4	; 0x04
    1ebc:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <_sched_list_switch>
    current_proc = (proc_t *)xlist_head( sched->ready ); // Вытесняющая многозадачность же!
    1ec0:	eb 81       	ldd	r30, Y+3	; 0x03
    1ec2:	fc 81       	ldd	r31, Y+4	; 0x04
    1ec4:	82 81       	ldd	r24, Z+2	; 0x02
    1ec6:	93 81       	ldd	r25, Z+3	; 0x03
    1ec8:	0e 94 14 11 	call	0x2228	; 0x2228 <xlist_head>
    1ecc:	9a 83       	std	Y+2, r25	; 0x02
    1ece:	89 83       	std	Y+1, r24	; 0x01
    sched->current_proc = current_proc;
    1ed0:	eb 81       	ldd	r30, Y+3	; 0x03
    1ed2:	fc 81       	ldd	r31, Y+4	; 0x04
    1ed4:	89 81       	ldd	r24, Y+1	; 0x01
    1ed6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ed8:	91 83       	std	Z+1, r25	; 0x01
    1eda:	80 83       	st	Z, r24

#ifdef CONFIG_MP
    spin_lock(&current_proc->lock);
#endif // CONFIG_MP
    //Хук "восстановление контекста"
    if( current_proc->rs_hook )current_proc->rs_hook( current_proc->arg );
    1edc:	e9 81       	ldd	r30, Y+1	; 0x01
    1ede:	fa 81       	ldd	r31, Y+2	; 0x02
    1ee0:	86 a1       	ldd	r24, Z+38	; 0x26
    1ee2:	97 a1       	ldd	r25, Z+39	; 0x27
    1ee4:	00 97       	sbiw	r24, 0x00	; 0
    1ee6:	51 f0       	breq	.+20     	; 0x1efc <sched_reschedule+0x96>
    1ee8:	e9 81       	ldd	r30, Y+1	; 0x01
    1eea:	fa 81       	ldd	r31, Y+2	; 0x02
    1eec:	26 a1       	ldd	r18, Z+38	; 0x26
    1eee:	37 a1       	ldd	r19, Z+39	; 0x27
    1ef0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ef2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ef4:	80 a5       	ldd	r24, Z+40	; 0x28
    1ef6:	91 a5       	ldd	r25, Z+41	; 0x29
    1ef8:	f9 01       	movw	r30, r18
    1efa:	09 95       	icall
#ifdef CONFIG_MP
    stack_t * ret_sp = current_proc->spointer;
    spin_unlock( &current_proc->lock );
    return ret_sp;
#else
    return current_proc->spointer;
    1efc:	e9 81       	ldd	r30, Y+1	; 0x01
    1efe:	fa 81       	ldd	r31, Y+2	; 0x02
    1f00:	84 a5       	ldd	r24, Z+44	; 0x2c
    1f02:	95 a5       	ldd	r25, Z+45	; 0x2d
#endif // CONFIG_MP
}
    1f04:	26 96       	adiw	r28, 0x06	; 6
    1f06:	0f b6       	in	r0, 0x3f	; 63
    1f08:	f8 94       	cli
    1f0a:	de bf       	out	0x3e, r29	; 62
    1f0c:	0f be       	out	0x3f, r0	; 63
    1f0e:	cd bf       	out	0x3d, r28	; 61
    1f10:	cf 91       	pop	r28
    1f12:	df 91       	pop	r29
    1f14:	08 95       	ret

00001f16 <sem_init_isr>:
*****************************************************************************************/
#include "../include/bugurt.h"

// Инициализация
void sem_init_isr( sem_t * sem, count_t count )
{
    1f16:	df 93       	push	r29
    1f18:	cf 93       	push	r28
    1f1a:	00 d0       	rcall	.+0      	; 0x1f1c <sem_init_isr+0x6>
    1f1c:	00 d0       	rcall	.+0      	; 0x1f1e <sem_init_isr+0x8>
    1f1e:	cd b7       	in	r28, 0x3d	; 61
    1f20:	de b7       	in	r29, 0x3e	; 62
    1f22:	9a 83       	std	Y+2, r25	; 0x02
    1f24:	89 83       	std	Y+1, r24	; 0x01
    1f26:	7c 83       	std	Y+4, r23	; 0x04
    1f28:	6b 83       	std	Y+3, r22	; 0x03
    xlist_init( (xlist_t *)sem );
    1f2a:	89 81       	ldd	r24, Y+1	; 0x01
    1f2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f2e:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <xlist_init>
    sem->counter = count;
    1f32:	e9 81       	ldd	r30, Y+1	; 0x01
    1f34:	fa 81       	ldd	r31, Y+2	; 0x02
    1f36:	8b 81       	ldd	r24, Y+3	; 0x03
    1f38:	9c 81       	ldd	r25, Y+4	; 0x04
    1f3a:	92 8b       	std	Z+18, r25	; 0x12
    1f3c:	81 8b       	std	Z+17, r24	; 0x11
}
    1f3e:	0f 90       	pop	r0
    1f40:	0f 90       	pop	r0
    1f42:	0f 90       	pop	r0
    1f44:	0f 90       	pop	r0
    1f46:	cf 91       	pop	r28
    1f48:	df 91       	pop	r29
    1f4a:	08 95       	ret

00001f4c <_sem_lock_stage_1>:

// То же, для внутреннего использования
bool_t _sem_lock_stage_1( sem_t * sem )
{
    1f4c:	df 93       	push	r29
    1f4e:	cf 93       	push	r28
    1f50:	00 d0       	rcall	.+0      	; 0x1f52 <_sem_lock_stage_1+0x6>
    1f52:	00 d0       	rcall	.+0      	; 0x1f54 <_sem_lock_stage_1+0x8>
    1f54:	0f 92       	push	r0
    1f56:	cd b7       	in	r28, 0x3d	; 61
    1f58:	de b7       	in	r29, 0x3e	; 62
    1f5a:	9d 83       	std	Y+5, r25	; 0x05
    1f5c:	8c 83       	std	Y+4, r24	; 0x04

    bool_t ret = 0;
    1f5e:	1b 82       	std	Y+3, r1	; 0x03
    if( sem->counter != 0 )
    1f60:	ec 81       	ldd	r30, Y+4	; 0x04
    1f62:	fd 81       	ldd	r31, Y+5	; 0x05
    1f64:	81 89       	ldd	r24, Z+17	; 0x11
    1f66:	92 89       	ldd	r25, Z+18	; 0x12
    1f68:	00 97       	sbiw	r24, 0x00	; 0
    1f6a:	61 f0       	breq	.+24     	; 0x1f84 <_sem_lock_stage_1+0x38>
    {
        sem->counter--;
    1f6c:	ec 81       	ldd	r30, Y+4	; 0x04
    1f6e:	fd 81       	ldd	r31, Y+5	; 0x05
    1f70:	81 89       	ldd	r24, Z+17	; 0x11
    1f72:	92 89       	ldd	r25, Z+18	; 0x12
    1f74:	01 97       	sbiw	r24, 0x01	; 1
    1f76:	ec 81       	ldd	r30, Y+4	; 0x04
    1f78:	fd 81       	ldd	r31, Y+5	; 0x05
    1f7a:	92 8b       	std	Z+18, r25	; 0x12
    1f7c:	81 8b       	std	Z+17, r24	; 0x11
#ifdef CONFIG_MP
        spin_unlock( &sem->lock );// Освобождение блокировки семафора
#endif //CONFIG_MP
        ret = (bool_t)1;
    1f7e:	81 e0       	ldi	r24, 0x01	; 1
    1f80:	8b 83       	std	Y+3, r24	; 0x03
    1f82:	16 c0       	rjmp	.+44     	; 0x1fb0 <_sem_lock_stage_1+0x64>
    }
    else
    {
        proc_t * proc = current_proc();
    1f84:	0e 94 cc 00 	call	0x198	; 0x198 <current_proc>
    1f88:	9a 83       	std	Y+2, r25	; 0x02
    1f8a:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
        spin_lock( &proc->lock );// Захват блокировки процесса
#endif //CONFIG_MP
        proc->flags |= PROC_FLG_QUEUE;
    1f8c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f8e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f90:	83 85       	ldd	r24, Z+11	; 0x0b
    1f92:	88 60       	ori	r24, 0x08	; 8
    1f94:	e9 81       	ldd	r30, Y+1	; 0x01
    1f96:	fa 81       	ldd	r31, Y+2	; 0x02
    1f98:	83 87       	std	Z+11, r24	; 0x0b
        _proc_stop( proc );
    1f9a:	89 81       	ldd	r24, Y+1	; 0x01
    1f9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f9e:	0e 94 9c 0c 	call	0x1938	; 0x1938 <_proc_stop>
        gitem_insert( (gitem_t *)proc, (xlist_t *)sem );
    1fa2:	89 81       	ldd	r24, Y+1	; 0x01
    1fa4:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa6:	2c 81       	ldd	r18, Y+4	; 0x04
    1fa8:	3d 81       	ldd	r19, Y+5	; 0x05
    1faa:	b9 01       	movw	r22, r18
    1fac:	0e 94 77 06 	call	0xcee	; 0xcee <gitem_insert>
#ifdef CONFIG_MP
        spin_unlock( &proc->lock );// Освобождение блокировки процесса
#endif //CONFIG_MP
    }
    return ret;
    1fb0:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1fb2:	0f 90       	pop	r0
    1fb4:	0f 90       	pop	r0
    1fb6:	0f 90       	pop	r0
    1fb8:	0f 90       	pop	r0
    1fba:	0f 90       	pop	r0
    1fbc:	cf 91       	pop	r28
    1fbe:	df 91       	pop	r29
    1fc0:	08 95       	ret

00001fc2 <_sem_unlock>:

void _sem_unlock( sem_t * sem )
{
    1fc2:	df 93       	push	r29
    1fc4:	cf 93       	push	r28
    1fc6:	00 d0       	rcall	.+0      	; 0x1fc8 <_sem_unlock+0x6>
    1fc8:	00 d0       	rcall	.+0      	; 0x1fca <_sem_unlock+0x8>
    1fca:	cd b7       	in	r28, 0x3d	; 61
    1fcc:	de b7       	in	r29, 0x3e	; 62
    1fce:	9c 83       	std	Y+4, r25	; 0x04
    1fd0:	8b 83       	std	Y+3, r24	; 0x03
    if( ((xlist_t *)sem)->index == (index_t)0  )
    1fd2:	eb 81       	ldd	r30, Y+3	; 0x03
    1fd4:	fc 81       	ldd	r31, Y+4	; 0x04
    1fd6:	80 89       	ldd	r24, Z+16	; 0x10
    1fd8:	88 23       	and	r24, r24
    1fda:	51 f4       	brne	.+20     	; 0x1ff0 <_sem_unlock+0x2e>
    {
        sem->counter++;
    1fdc:	eb 81       	ldd	r30, Y+3	; 0x03
    1fde:	fc 81       	ldd	r31, Y+4	; 0x04
    1fe0:	81 89       	ldd	r24, Z+17	; 0x11
    1fe2:	92 89       	ldd	r25, Z+18	; 0x12
    1fe4:	01 96       	adiw	r24, 0x01	; 1
    1fe6:	eb 81       	ldd	r30, Y+3	; 0x03
    1fe8:	fc 81       	ldd	r31, Y+4	; 0x04
    1fea:	92 8b       	std	Z+18, r25	; 0x12
    1fec:	81 8b       	std	Z+17, r24	; 0x11
    1fee:	15 c0       	rjmp	.+42     	; 0x201a <_sem_unlock+0x58>
#ifdef CONFIG_MP
        spin_unlock( &sem->lock );
#endif //CONFIG_MP
        return;
    }
    proc_t * proc = (proc_t *)xlist_head((xlist_t *)sem);
    1ff0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff4:	0e 94 14 11 	call	0x2228	; 0x2228 <xlist_head>
    1ff8:	9a 83       	std	Y+2, r25	; 0x02
    1ffa:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );// Захват спин-блокировки процесса
#endif //CONFIG_MP
    proc->flags &= ~PROC_FLG_QUEUE;
    1ffc:	e9 81       	ldd	r30, Y+1	; 0x01
    1ffe:	fa 81       	ldd	r31, Y+2	; 0x02
    2000:	83 85       	ldd	r24, Z+11	; 0x0b
    2002:	87 7f       	andi	r24, 0xF7	; 247
    2004:	e9 81       	ldd	r30, Y+1	; 0x01
    2006:	fa 81       	ldd	r31, Y+2	; 0x02
    2008:	83 87       	std	Z+11, r24	; 0x0b
    gitem_cut( (gitem_t *)proc );
    200a:	89 81       	ldd	r24, Y+1	; 0x01
    200c:	9a 81       	ldd	r25, Y+2	; 0x02
    200e:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <gitem_cut>
    _proc_run( proc );
    2012:	89 81       	ldd	r24, Y+1	; 0x01
    2014:	9a 81       	ldd	r25, Y+2	; 0x02
    2016:	0e 94 15 0c 	call	0x182a	; 0x182a <_proc_run>
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );// Освобождение спин-блокировки процесса
#endif //CONFIG_MP
}
    201a:	0f 90       	pop	r0
    201c:	0f 90       	pop	r0
    201e:	0f 90       	pop	r0
    2020:	0f 90       	pop	r0
    2022:	cf 91       	pop	r28
    2024:	df 91       	pop	r29
    2026:	08 95       	ret

00002028 <sig_init_isr>:
*****************************************************************************************/
#include "../include/bugurt.h"
///========================================================================================
// Инициация
void sig_init_isr( sig_t * sig )
{
    2028:	df 93       	push	r29
    202a:	cf 93       	push	r28
    202c:	00 d0       	rcall	.+0      	; 0x202e <sig_init_isr+0x6>
    202e:	cd b7       	in	r28, 0x3d	; 61
    2030:	de b7       	in	r29, 0x3e	; 62
    2032:	9a 83       	std	Y+2, r25	; 0x02
    2034:	89 83       	std	Y+1, r24	; 0x01
    {
        xlist_init( (xlist_t *)sig->sig_list + i );
        stat_init( (stat_t *)sig->sig_stat + i );
    }
#else
    xlist_init( (xlist_t *)sig );
    2036:	89 81       	ldd	r24, Y+1	; 0x01
    2038:	9a 81       	ldd	r25, Y+2	; 0x02
    203a:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <xlist_init>
#endif
}
    203e:	0f 90       	pop	r0
    2040:	0f 90       	pop	r0
    2042:	cf 91       	pop	r28
    2044:	df 91       	pop	r29
    2046:	08 95       	ret

00002048 <sig_wait_stage_1_isr>:
///========================================================================================
// Это выполнится при постановке процесса в список ожидания сигнала
void sig_wait_stage_1_isr( sig_t * sig )
{
    2048:	df 93       	push	r29
    204a:	cf 93       	push	r28
    204c:	00 d0       	rcall	.+0      	; 0x204e <sig_wait_stage_1_isr+0x6>
    204e:	00 d0       	rcall	.+0      	; 0x2050 <sig_wait_stage_1_isr+0x8>
    2050:	cd b7       	in	r28, 0x3d	; 61
    2052:	de b7       	in	r29, 0x3e	; 62
    2054:	9c 83       	std	Y+4, r25	; 0x04
    2056:	8b 83       	std	Y+3, r24	; 0x03
#ifdef CONFIG_MP
    spin_lock( &sig->lock );
#endif // CONFIG_MP
    proc_t * proc = current_proc();
    2058:	0e 94 cc 00 	call	0x198	; 0x198 <current_proc>
    205c:	9a 83       	std	Y+2, r25	; 0x02
    205e:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    // Останавливаем процесс
    _proc_stop(proc);
    2060:	89 81       	ldd	r24, Y+1	; 0x01
    2062:	9a 81       	ldd	r25, Y+2	; 0x02
    2064:	0e 94 9c 0c 	call	0x1938	; 0x1938 <_proc_stop>
    proc->flags |= PROC_FLG_WAIT;
    2068:	e9 81       	ldd	r30, Y+1	; 0x01
    206a:	fa 81       	ldd	r31, Y+2	; 0x02
    206c:	83 85       	ldd	r24, Z+11	; 0x0b
    206e:	80 61       	ori	r24, 0x10	; 16
    2070:	e9 81       	ldd	r30, Y+1	; 0x01
    2072:	fa 81       	ldd	r31, Y+2	; 0x02
    2074:	83 87       	std	Z+11, r24	; 0x0b
        stat_inc( proc, (stat_t *)sig->sig_stat + sig_core );
    }
    spin_unlock( &proc->lock );
    spin_unlock( &sig->lock );
#else
    gitem_insert_group( (gitem_t *)proc, (xlist_t *)sig );
    2076:	89 81       	ldd	r24, Y+1	; 0x01
    2078:	9a 81       	ldd	r25, Y+2	; 0x02
    207a:	2b 81       	ldd	r18, Y+3	; 0x03
    207c:	3c 81       	ldd	r19, Y+4	; 0x04
    207e:	b9 01       	movw	r22, r18
    2080:	0e 94 d3 06 	call	0xda6	; 0xda6 <gitem_insert_group>
#endif //CONFIG_MP
}
    2084:	0f 90       	pop	r0
    2086:	0f 90       	pop	r0
    2088:	0f 90       	pop	r0
    208a:	0f 90       	pop	r0
    208c:	cf 91       	pop	r28
    208e:	df 91       	pop	r29
    2090:	08 95       	ret

00002092 <sig_signal_isr>:
    enable_interrupts();
}
///========================================================================================
// Тоже самое что и предыдущие, олько для вызова из обработчиков прерываний и из критических секций
void sig_signal_isr( sig_t * sig )
{
    2092:	df 93       	push	r29
    2094:	cf 93       	push	r28
    2096:	00 d0       	rcall	.+0      	; 0x2098 <sig_signal_isr+0x6>
    2098:	00 d0       	rcall	.+0      	; 0x209a <sig_signal_isr+0x8>
    209a:	cd b7       	in	r28, 0x3d	; 61
    209c:	de b7       	in	r29, 0x3e	; 62
    209e:	9c 83       	std	Y+4, r25	; 0x04
    20a0:	8b 83       	std	Y+3, r24	; 0x03
    }
    resched(core);// Перепланировка
    spin_unlock( &proc->lock );// Освобождение блокировки процесса
    spin_unlock( &sig->lock );// Освобождение блокировки сигнала
#else
    if( ((xlist_t *)sig)->index == (index_t)0 )return;
    20a2:	eb 81       	ldd	r30, Y+3	; 0x03
    20a4:	fc 81       	ldd	r31, Y+4	; 0x04
    20a6:	80 89       	ldd	r24, Z+16	; 0x10
    20a8:	88 23       	and	r24, r24
    20aa:	a9 f0       	breq	.+42     	; 0x20d6 <sig_signal_isr+0x44>
    proc_t * proc = (proc_t *)xlist_head( (xlist_t *)sig );
    20ac:	8b 81       	ldd	r24, Y+3	; 0x03
    20ae:	9c 81       	ldd	r25, Y+4	; 0x04
    20b0:	0e 94 14 11 	call	0x2228	; 0x2228 <xlist_head>
    20b4:	9a 83       	std	Y+2, r25	; 0x02
    20b6:	89 83       	std	Y+1, r24	; 0x01
    gitem_fast_cut( (gitem_t *)proc );
    20b8:	89 81       	ldd	r24, Y+1	; 0x01
    20ba:	9a 81       	ldd	r25, Y+2	; 0x02
    20bc:	0e 94 4e 07 	call	0xe9c	; 0xe9c <gitem_fast_cut>
    gitem_insert( (gitem_t *)proc, kernel.sched.ready );
    20c0:	89 81       	ldd	r24, Y+1	; 0x01
    20c2:	9a 81       	ldd	r25, Y+2	; 0x02
    20c4:	20 91 a0 01 	lds	r18, 0x01A0
    20c8:	30 91 a1 01 	lds	r19, 0x01A1
    20cc:	b9 01       	movw	r22, r18
    20ce:	0e 94 77 06 	call	0xcee	; 0xcee <gitem_insert>
    resched();
    20d2:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
#endif //CONFIG_MP
}
    20d6:	0f 90       	pop	r0
    20d8:	0f 90       	pop	r0
    20da:	0f 90       	pop	r0
    20dc:	0f 90       	pop	r0
    20de:	cf 91       	pop	r28
    20e0:	df 91       	pop	r29
    20e2:	08 95       	ret

000020e4 <sig_broadcast_isr>:
///----------------------------------------------------------------------------------------
void sig_broadcast_isr( sig_t * sig )
{
    20e4:	df 93       	push	r29
    20e6:	cf 93       	push	r28
    20e8:	00 d0       	rcall	.+0      	; 0x20ea <sig_broadcast_isr+0x6>
    20ea:	cd b7       	in	r28, 0x3d	; 61
    20ec:	de b7       	in	r29, 0x3e	; 62
    20ee:	9a 83       	std	Y+2, r25	; 0x02
    20f0:	89 83       	std	Y+1, r24	; 0x01

        resched(core);
    }
    spin_unlock( &sig->lock );
#else
    gitem_xlist_merge( (xlist_t *)sig, kernel.sched.ready );
    20f2:	20 91 a0 01 	lds	r18, 0x01A0
    20f6:	30 91 a1 01 	lds	r19, 0x01A1
    20fa:	89 81       	ldd	r24, Y+1	; 0x01
    20fc:	9a 81       	ldd	r25, Y+2	; 0x02
    20fe:	b9 01       	movw	r22, r18
    2100:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <gitem_xlist_merge>
    resched();
    2104:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
#endif //CONFIG_MP
}
    2108:	0f 90       	pop	r0
    210a:	0f 90       	pop	r0
    210c:	cf 91       	pop	r28
    210e:	df 91       	pop	r29
    2110:	08 95       	ret

00002112 <_clear_timer>:
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
///========================================================================================
void _clear_timer(timer_t * t)
{
    2112:	df 93       	push	r29
    2114:	cf 93       	push	r28
    2116:	00 d0       	rcall	.+0      	; 0x2118 <_clear_timer+0x6>
    2118:	cd b7       	in	r28, 0x3d	; 61
    211a:	de b7       	in	r29, 0x3e	; 62
    211c:	9a 83       	std	Y+2, r25	; 0x02
    211e:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    core_id_t current_core = _enter_crit_sec();
    spin_lock( &kernel.timer_lock );
#else
    enter_crit_sec();
    2120:	0e 94 21 06 	call	0xc42	; 0xc42 <enter_crit_sec>
#endif //CONFIG_MP
    *t = kernel.timer;
    2124:	80 91 f8 01 	lds	r24, 0x01F8
    2128:	90 91 f9 01 	lds	r25, 0x01F9
    212c:	e9 81       	ldd	r30, Y+1	; 0x01
    212e:	fa 81       	ldd	r31, Y+2	; 0x02
    2130:	91 83       	std	Z+1, r25	; 0x01
    2132:	80 83       	st	Z, r24
#ifdef CONFIG_MP
    spin_unlock( &kernel.timer_lock );
    _exit_crit_sec(current_core);
#else
    exit_crit_sec();
    2134:	0e 94 33 06 	call	0xc66	; 0xc66 <exit_crit_sec>
#endif //CONFIG_MP
}
    2138:	0f 90       	pop	r0
    213a:	0f 90       	pop	r0
    213c:	cf 91       	pop	r28
    213e:	df 91       	pop	r29
    2140:	08 95       	ret

00002142 <_timer>:
///----------------------------------------------------------------------------------------
timer_t _timer(timer_t t)
{
    2142:	df 93       	push	r29
    2144:	cf 93       	push	r28
    2146:	00 d0       	rcall	.+0      	; 0x2148 <_timer+0x6>
    2148:	00 d0       	rcall	.+0      	; 0x214a <_timer+0x8>
    214a:	cd b7       	in	r28, 0x3d	; 61
    214c:	de b7       	in	r29, 0x3e	; 62
    214e:	9c 83       	std	Y+4, r25	; 0x04
    2150:	8b 83       	std	Y+3, r24	; 0x03
    timer_t ret;
#ifdef CONFIG_MP
    core_id_t current_core = _enter_crit_sec();
    spin_lock( &kernel.timer_lock );
#else
    enter_crit_sec();
    2152:	0e 94 21 06 	call	0xc42	; 0xc42 <enter_crit_sec>
#endif //CONFIG_MP
    ret = kernel.timer - t;
    2156:	20 91 f8 01 	lds	r18, 0x01F8
    215a:	30 91 f9 01 	lds	r19, 0x01F9
    215e:	8b 81       	ldd	r24, Y+3	; 0x03
    2160:	9c 81       	ldd	r25, Y+4	; 0x04
    2162:	a9 01       	movw	r20, r18
    2164:	48 1b       	sub	r20, r24
    2166:	59 0b       	sbc	r21, r25
    2168:	ca 01       	movw	r24, r20
    216a:	9a 83       	std	Y+2, r25	; 0x02
    216c:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_unlock( &kernel.timer_lock );
    _exit_crit_sec(current_core);
#else
    exit_crit_sec();
    216e:	0e 94 33 06 	call	0xc66	; 0xc66 <exit_crit_sec>
#endif //CONFIG_MP
    return ret;
    2172:	89 81       	ldd	r24, Y+1	; 0x01
    2174:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2176:	0f 90       	pop	r0
    2178:	0f 90       	pop	r0
    217a:	0f 90       	pop	r0
    217c:	0f 90       	pop	r0
    217e:	cf 91       	pop	r28
    2180:	df 91       	pop	r29
    2182:	08 95       	ret

00002184 <wait_time>:

///----------------------------------------------------------------------------------------
void wait_time(timer_t time)
{
    2184:	df 93       	push	r29
    2186:	cf 93       	push	r28
    2188:	00 d0       	rcall	.+0      	; 0x218a <wait_time+0x6>
    218a:	00 d0       	rcall	.+0      	; 0x218c <wait_time+0x8>
    218c:	0f 92       	push	r0
    218e:	cd b7       	in	r28, 0x3d	; 61
    2190:	de b7       	in	r29, 0x3e	; 62
    2192:	9d 83       	std	Y+5, r25	; 0x05
    2194:	8c 83       	std	Y+4, r24	; 0x04
    timer_t tmr;
    bool_t roll=(bool_t)1;
    2196:	81 e0       	ldi	r24, 0x01	; 1
    2198:	89 83       	std	Y+1, r24	; 0x01
    CLEAR_TIMER(tmr);
    219a:	ce 01       	movw	r24, r28
    219c:	02 96       	adiw	r24, 0x02	; 2
    219e:	0e 94 89 10 	call	0x2112	; 0x2112 <_clear_timer>
    21a2:	0d c0       	rjmp	.+26     	; 0x21be <wait_time+0x3a>
    while((bool_t)roll)
    {
        roll = (bool_t)( TIMER(tmr) < (timer_t)time );
    21a4:	8a 81       	ldd	r24, Y+2	; 0x02
    21a6:	9b 81       	ldd	r25, Y+3	; 0x03
    21a8:	0e 94 a1 10 	call	0x2142	; 0x2142 <_timer>
    21ac:	9c 01       	movw	r18, r24
    21ae:	19 82       	std	Y+1, r1	; 0x01
    21b0:	8c 81       	ldd	r24, Y+4	; 0x04
    21b2:	9d 81       	ldd	r25, Y+5	; 0x05
    21b4:	28 17       	cp	r18, r24
    21b6:	39 07       	cpc	r19, r25
    21b8:	10 f4       	brcc	.+4      	; 0x21be <wait_time+0x3a>
    21ba:	81 e0       	ldi	r24, 0x01	; 1
    21bc:	89 83       	std	Y+1, r24	; 0x01
void wait_time(timer_t time)
{
    timer_t tmr;
    bool_t roll=(bool_t)1;
    CLEAR_TIMER(tmr);
    while((bool_t)roll)
    21be:	89 81       	ldd	r24, Y+1	; 0x01
    21c0:	88 23       	and	r24, r24
    21c2:	81 f7       	brne	.-32     	; 0x21a4 <wait_time+0x20>
    {
        roll = (bool_t)( TIMER(tmr) < (timer_t)time );
    }
}
    21c4:	0f 90       	pop	r0
    21c6:	0f 90       	pop	r0
    21c8:	0f 90       	pop	r0
    21ca:	0f 90       	pop	r0
    21cc:	0f 90       	pop	r0
    21ce:	cf 91       	pop	r28
    21d0:	df 91       	pop	r29
    21d2:	08 95       	ret

000021d4 <xlist_init>:
**********************************************/
//Инициация
void xlist_init(
    xlist_t * xlist
)
{
    21d4:	df 93       	push	r29
    21d6:	cf 93       	push	r28
    21d8:	00 d0       	rcall	.+0      	; 0x21da <xlist_init+0x6>
    21da:	00 d0       	rcall	.+0      	; 0x21dc <xlist_init+0x8>
    21dc:	cd b7       	in	r28, 0x3d	; 61
    21de:	de b7       	in	r29, 0x3e	; 62
    21e0:	9c 83       	std	Y+4, r25	; 0x04
    21e2:	8b 83       	std	Y+3, r24	; 0x03
    count_t i;
    //список пуст
    xlist->index = (index_t)0;
    21e4:	eb 81       	ldd	r30, Y+3	; 0x03
    21e6:	fc 81       	ldd	r31, Y+4	; 0x04
    21e8:	10 8a       	std	Z+16, r1	; 0x10
    //обнуляем указатели
    for( i = 0; i < BITS_IN_INDEX_T; i++ )xlist->item[i] = (item_t *)0;
    21ea:	1a 82       	std	Y+2, r1	; 0x02
    21ec:	19 82       	std	Y+1, r1	; 0x01
    21ee:	10 c0       	rjmp	.+32     	; 0x2210 <xlist_init+0x3c>
    21f0:	89 81       	ldd	r24, Y+1	; 0x01
    21f2:	9a 81       	ldd	r25, Y+2	; 0x02
    21f4:	2b 81       	ldd	r18, Y+3	; 0x03
    21f6:	3c 81       	ldd	r19, Y+4	; 0x04
    21f8:	88 0f       	add	r24, r24
    21fa:	99 1f       	adc	r25, r25
    21fc:	f9 01       	movw	r30, r18
    21fe:	e8 0f       	add	r30, r24
    2200:	f9 1f       	adc	r31, r25
    2202:	11 82       	std	Z+1, r1	; 0x01
    2204:	10 82       	st	Z, r1
    2206:	89 81       	ldd	r24, Y+1	; 0x01
    2208:	9a 81       	ldd	r25, Y+2	; 0x02
    220a:	01 96       	adiw	r24, 0x01	; 1
    220c:	9a 83       	std	Y+2, r25	; 0x02
    220e:	89 83       	std	Y+1, r24	; 0x01
    2210:	89 81       	ldd	r24, Y+1	; 0x01
    2212:	9a 81       	ldd	r25, Y+2	; 0x02
    2214:	88 30       	cpi	r24, 0x08	; 8
    2216:	91 05       	cpc	r25, r1
    2218:	58 f3       	brcs	.-42     	; 0x21f0 <xlist_init+0x1c>
}
    221a:	0f 90       	pop	r0
    221c:	0f 90       	pop	r0
    221e:	0f 90       	pop	r0
    2220:	0f 90       	pop	r0
    2222:	cf 91       	pop	r28
    2224:	df 91       	pop	r29
    2226:	08 95       	ret

00002228 <xlist_head>:
//===========================================================================
//Поиск головы списка
item_t * xlist_head(xlist_t * xlist)
{
    2228:	df 93       	push	r29
    222a:	cf 93       	push	r28
    222c:	00 d0       	rcall	.+0      	; 0x222e <xlist_head+0x6>
    222e:	00 d0       	rcall	.+0      	; 0x2230 <xlist_head+0x8>
    2230:	0f 92       	push	r0
    2232:	cd b7       	in	r28, 0x3d	; 61
    2234:	de b7       	in	r29, 0x3e	; 62
    2236:	9d 83       	std	Y+5, r25	; 0x05
    2238:	8c 83       	std	Y+4, r24	; 0x04
    item_t * ret_val = (item_t *)0;
    223a:	1b 82       	std	Y+3, r1	; 0x03
    223c:	1a 82       	std	Y+2, r1	; 0x02
    index_t index = xlist->index;
    223e:	ec 81       	ldd	r30, Y+4	; 0x04
    2240:	fd 81       	ldd	r31, Y+5	; 0x05
    2242:	80 89       	ldd	r24, Z+16	; 0x10
    2244:	89 83       	std	Y+1, r24	; 0x01

    if( index != (index_t)0 )
    2246:	89 81       	ldd	r24, Y+1	; 0x01
    2248:	88 23       	and	r24, r24
    224a:	81 f0       	breq	.+32     	; 0x226c <xlist_head+0x44>
    {
        ret_val = xlist->item[ index_search( index ) ];
    224c:	89 81       	ldd	r24, Y+1	; 0x01
    224e:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <index_search>
    2252:	88 2f       	mov	r24, r24
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	2c 81       	ldd	r18, Y+4	; 0x04
    2258:	3d 81       	ldd	r19, Y+5	; 0x05
    225a:	88 0f       	add	r24, r24
    225c:	99 1f       	adc	r25, r25
    225e:	f9 01       	movw	r30, r18
    2260:	e8 0f       	add	r30, r24
    2262:	f9 1f       	adc	r31, r25
    2264:	80 81       	ld	r24, Z
    2266:	91 81       	ldd	r25, Z+1	; 0x01
    2268:	9b 83       	std	Y+3, r25	; 0x03
    226a:	8a 83       	std	Y+2, r24	; 0x02
    }
    return ret_val;
    226c:	8a 81       	ldd	r24, Y+2	; 0x02
    226e:	9b 81       	ldd	r25, Y+3	; 0x03
}
    2270:	0f 90       	pop	r0
    2272:	0f 90       	pop	r0
    2274:	0f 90       	pop	r0
    2276:	0f 90       	pop	r0
    2278:	0f 90       	pop	r0
    227a:	cf 91       	pop	r28
    227c:	df 91       	pop	r29
    227e:	08 95       	ret

00002280 <xlist_switch>:

//===========================================================================
// переключение указателя в массиве на следующий элемент, пригодится в планировщике
void xlist_switch(xlist_t * xlist, prio_t prio)
{
    2280:	df 93       	push	r29
    2282:	cf 93       	push	r28
    2284:	00 d0       	rcall	.+0      	; 0x2286 <xlist_switch+0x6>
    2286:	00 d0       	rcall	.+0      	; 0x2288 <xlist_switch+0x8>
    2288:	0f 92       	push	r0
    228a:	cd b7       	in	r28, 0x3d	; 61
    228c:	de b7       	in	r29, 0x3e	; 62
    228e:	9c 83       	std	Y+4, r25	; 0x04
    2290:	8b 83       	std	Y+3, r24	; 0x03
    2292:	6d 83       	std	Y+5, r22	; 0x05
    item_t ** current = xlist->item + prio;
    2294:	2b 81       	ldd	r18, Y+3	; 0x03
    2296:	3c 81       	ldd	r19, Y+4	; 0x04
    2298:	8d 81       	ldd	r24, Y+5	; 0x05
    229a:	88 2f       	mov	r24, r24
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	88 0f       	add	r24, r24
    22a0:	99 1f       	adc	r25, r25
    22a2:	82 0f       	add	r24, r18
    22a4:	93 1f       	adc	r25, r19
    22a6:	9a 83       	std	Y+2, r25	; 0x02
    22a8:	89 83       	std	Y+1, r24	; 0x01
    *current = (*current)->next;
    22aa:	e9 81       	ldd	r30, Y+1	; 0x01
    22ac:	fa 81       	ldd	r31, Y+2	; 0x02
    22ae:	01 90       	ld	r0, Z+
    22b0:	f0 81       	ld	r31, Z
    22b2:	e0 2d       	mov	r30, r0
    22b4:	80 81       	ld	r24, Z
    22b6:	91 81       	ldd	r25, Z+1	; 0x01
    22b8:	e9 81       	ldd	r30, Y+1	; 0x01
    22ba:	fa 81       	ldd	r31, Y+2	; 0x02
    22bc:	91 83       	std	Z+1, r25	; 0x01
    22be:	80 83       	st	Z, r24
    //*current = (item_t *)*(item_t **)*(item_t ***)current;
}
    22c0:	0f 90       	pop	r0
    22c2:	0f 90       	pop	r0
    22c4:	0f 90       	pop	r0
    22c6:	0f 90       	pop	r0
    22c8:	0f 90       	pop	r0
    22ca:	cf 91       	pop	r28
    22cc:	df 91       	pop	r29
    22ce:	08 95       	ret

000022d0 <raise_syscall_interrupt>:
/*
 */
#include <bugurt.h>

void raise_syscall_interrupt(void)
{
    22d0:	df 93       	push	r29
    22d2:	cf 93       	push	r28
    22d4:	cd b7       	in	r28, 0x3d	; 61
    22d6:	de b7       	in	r29, 0x3e	; 62
    R2_on();
    22d8:	ab e2       	ldi	r26, 0x2B	; 43
    22da:	b0 e0       	ldi	r27, 0x00	; 0
    22dc:	eb e2       	ldi	r30, 0x2B	; 43
    22de:	f0 e0       	ldi	r31, 0x00	; 0
    22e0:	80 81       	ld	r24, Z
    22e2:	84 60       	ori	r24, 0x04	; 4
    22e4:	8c 93       	st	X, r24
    G2_off();
    22e6:	ab e2       	ldi	r26, 0x2B	; 43
    22e8:	b0 e0       	ldi	r27, 0x00	; 0
    22ea:	eb e2       	ldi	r30, 0x2B	; 43
    22ec:	f0 e0       	ldi	r31, 0x00	; 0
    22ee:	80 81       	ld	r24, Z
    22f0:	87 7f       	andi	r24, 0xF7	; 247
    22f2:	8c 93       	st	X, r24
    R2_off();
    22f4:	ab e2       	ldi	r26, 0x2B	; 43
    22f6:	b0 e0       	ldi	r27, 0x00	; 0
    22f8:	eb e2       	ldi	r30, 0x2B	; 43
    22fa:	f0 e0       	ldi	r31, 0x00	; 0
    22fc:	80 81       	ld	r24, Z
    22fe:	8b 7f       	andi	r24, 0xFB	; 251
    2300:	8c 93       	st	X, r24
    G2_on();
    2302:	ab e2       	ldi	r26, 0x2B	; 43
    2304:	b0 e0       	ldi	r27, 0x00	; 0
    2306:	eb e2       	ldi	r30, 0x2B	; 43
    2308:	f0 e0       	ldi	r31, 0x00	; 0
    230a:	80 81       	ld	r24, Z
    230c:	88 60       	ori	r24, 0x08	; 8
    230e:	8c 93       	st	X, r24
}
    2310:	cf 91       	pop	r28
    2312:	df 91       	pop	r29
    2314:	08 95       	ret

00002316 <start_scheduler>:


void start_scheduler( void ){
    2316:	df 93       	push	r29
    2318:	cf 93       	push	r28
    231a:	cd b7       	in	r28, 0x3d	; 61
    231c:	de b7       	in	r29, 0x3e	; 62
    TIMSK2 |= 0x02;
    231e:	a0 e7       	ldi	r26, 0x70	; 112
    2320:	b0 e0       	ldi	r27, 0x00	; 0
    2322:	e0 e7       	ldi	r30, 0x70	; 112
    2324:	f0 e0       	ldi	r31, 0x00	; 0
    2326:	80 81       	ld	r24, Z
    2328:	82 60       	ori	r24, 0x02	; 2
    232a:	8c 93       	st	X, r24
    EIMSK |= 0x02;
    232c:	ad e3       	ldi	r26, 0x3D	; 61
    232e:	b0 e0       	ldi	r27, 0x00	; 0
    2330:	ed e3       	ldi	r30, 0x3D	; 61
    2332:	f0 e0       	ldi	r31, 0x00	; 0
    2334:	80 81       	ld	r24, Z
    2336:	82 60       	ori	r24, 0x02	; 2
    2338:	8c 93       	st	X, r24
    EIFR |= 0x02;
    233a:	ac e3       	ldi	r26, 0x3C	; 60
    233c:	b0 e0       	ldi	r27, 0x00	; 0
    233e:	ec e3       	ldi	r30, 0x3C	; 60
    2340:	f0 e0       	ldi	r31, 0x00	; 0
    2342:	80 81       	ld	r24, Z
    2344:	82 60       	ori	r24, 0x02	; 2
    2346:	8c 93       	st	X, r24
}
    2348:	cf 91       	pop	r28
    234a:	df 91       	pop	r29
    234c:	08 95       	ret

0000234e <blink_1>:
    TIMSK2 &= ~0x02;
    EIMSK &= ~0x02;
}

///----------------------------------------------------------------------------------------
void blink_1(void * t) {PORTB ^= 0x10;}
    234e:	df 93       	push	r29
    2350:	cf 93       	push	r28
    2352:	00 d0       	rcall	.+0      	; 0x2354 <blink_1+0x6>
    2354:	cd b7       	in	r28, 0x3d	; 61
    2356:	de b7       	in	r29, 0x3e	; 62
    2358:	9a 83       	std	Y+2, r25	; 0x02
    235a:	89 83       	std	Y+1, r24	; 0x01
    235c:	a5 e2       	ldi	r26, 0x25	; 37
    235e:	b0 e0       	ldi	r27, 0x00	; 0
    2360:	e5 e2       	ldi	r30, 0x25	; 37
    2362:	f0 e0       	ldi	r31, 0x00	; 0
    2364:	90 81       	ld	r25, Z
    2366:	80 e1       	ldi	r24, 0x10	; 16
    2368:	89 27       	eor	r24, r25
    236a:	8c 93       	st	X, r24
    236c:	0f 90       	pop	r0
    236e:	0f 90       	pop	r0
    2370:	cf 91       	pop	r28
    2372:	df 91       	pop	r29
    2374:	08 95       	ret

00002376 <blink_2>:
void blink_2(void * t) {PORTB ^= 0x08;}
    2376:	df 93       	push	r29
    2378:	cf 93       	push	r28
    237a:	00 d0       	rcall	.+0      	; 0x237c <blink_2+0x6>
    237c:	cd b7       	in	r28, 0x3d	; 61
    237e:	de b7       	in	r29, 0x3e	; 62
    2380:	9a 83       	std	Y+2, r25	; 0x02
    2382:	89 83       	std	Y+1, r24	; 0x01
    2384:	a5 e2       	ldi	r26, 0x25	; 37
    2386:	b0 e0       	ldi	r27, 0x00	; 0
    2388:	e5 e2       	ldi	r30, 0x25	; 37
    238a:	f0 e0       	ldi	r31, 0x00	; 0
    238c:	90 81       	ld	r25, Z
    238e:	88 e0       	ldi	r24, 0x08	; 8
    2390:	89 27       	eor	r24, r25
    2392:	8c 93       	st	X, r24
    2394:	0f 90       	pop	r0
    2396:	0f 90       	pop	r0
    2398:	cf 91       	pop	r28
    239a:	df 91       	pop	r29
    239c:	08 95       	ret

0000239e <blink_3>:
void blink_3(void * t) {PORTB ^= 0x04;}
    239e:	df 93       	push	r29
    23a0:	cf 93       	push	r28
    23a2:	00 d0       	rcall	.+0      	; 0x23a4 <blink_3+0x6>
    23a4:	cd b7       	in	r28, 0x3d	; 61
    23a6:	de b7       	in	r29, 0x3e	; 62
    23a8:	9a 83       	std	Y+2, r25	; 0x02
    23aa:	89 83       	std	Y+1, r24	; 0x01
    23ac:	a5 e2       	ldi	r26, 0x25	; 37
    23ae:	b0 e0       	ldi	r27, 0x00	; 0
    23b0:	e5 e2       	ldi	r30, 0x25	; 37
    23b2:	f0 e0       	ldi	r31, 0x00	; 0
    23b4:	90 81       	ld	r25, Z
    23b6:	84 e0       	ldi	r24, 0x04	; 4
    23b8:	89 27       	eor	r24, r25
    23ba:	8c 93       	st	X, r24
    23bc:	0f 90       	pop	r0
    23be:	0f 90       	pop	r0
    23c0:	cf 91       	pop	r28
    23c2:	df 91       	pop	r29
    23c4:	08 95       	ret

000023c6 <blink_4>:
void blink_4(void * t) {PORTB ^= 0x02;}
    23c6:	df 93       	push	r29
    23c8:	cf 93       	push	r28
    23ca:	00 d0       	rcall	.+0      	; 0x23cc <blink_4+0x6>
    23cc:	cd b7       	in	r28, 0x3d	; 61
    23ce:	de b7       	in	r29, 0x3e	; 62
    23d0:	9a 83       	std	Y+2, r25	; 0x02
    23d2:	89 83       	std	Y+1, r24	; 0x01
    23d4:	a5 e2       	ldi	r26, 0x25	; 37
    23d6:	b0 e0       	ldi	r27, 0x00	; 0
    23d8:	e5 e2       	ldi	r30, 0x25	; 37
    23da:	f0 e0       	ldi	r31, 0x00	; 0
    23dc:	90 81       	ld	r25, Z
    23de:	82 e0       	ldi	r24, 0x02	; 2
    23e0:	89 27       	eor	r24, r25
    23e2:	8c 93       	st	X, r24
    23e4:	0f 90       	pop	r0
    23e6:	0f 90       	pop	r0
    23e8:	cf 91       	pop	r28
    23ea:	df 91       	pop	r29
    23ec:	08 95       	ret

000023ee <blink_12>:
void blink_7(void * t) {PORTC ^= 0x10;}
void blink_8(void * t) {PORTC ^= 0x08;}
void blink_9(void * t) {PORTC ^= 0x04;}
void blink_10(void * t) {PORTC ^= 0x02;}
void blink_11(void * t) {PORTC ^= 0x01;}
void blink_12(void * t) {
    23ee:	df 93       	push	r29
    23f0:	cf 93       	push	r28
    23f2:	00 d0       	rcall	.+0      	; 0x23f4 <blink_12+0x6>
    23f4:	cd b7       	in	r28, 0x3d	; 61
    23f6:	de b7       	in	r29, 0x3e	; 62
    23f8:	9a 83       	std	Y+2, r25	; 0x02
    23fa:	89 83       	std	Y+1, r24	; 0x01
    PORTB ^= 0x20;
    23fc:	a5 e2       	ldi	r26, 0x25	; 37
    23fe:	b0 e0       	ldi	r27, 0x00	; 0
    2400:	e5 e2       	ldi	r30, 0x25	; 37
    2402:	f0 e0       	ldi	r31, 0x00	; 0
    2404:	90 81       	ld	r25, Z
    2406:	80 e2       	ldi	r24, 0x20	; 32
    2408:	89 27       	eor	r24, r25
    240a:	8c 93       	st	X, r24
    blink_G3();
    240c:	ab e2       	ldi	r26, 0x2B	; 43
    240e:	b0 e0       	ldi	r27, 0x00	; 0
    2410:	eb e2       	ldi	r30, 0x2B	; 43
    2412:	f0 e0       	ldi	r31, 0x00	; 0
    2414:	90 81       	ld	r25, Z
    2416:	80 e4       	ldi	r24, 0x40	; 64
    2418:	89 27       	eor	r24, r25
    241a:	8c 93       	st	X, r24
    blink_R3();
    241c:	ab e2       	ldi	r26, 0x2B	; 43
    241e:	b0 e0       	ldi	r27, 0x00	; 0
    2420:	eb e2       	ldi	r30, 0x2B	; 43
    2422:	f0 e0       	ldi	r31, 0x00	; 0
    2424:	90 81       	ld	r25, Z
    2426:	80 e2       	ldi	r24, 0x20	; 32
    2428:	89 27       	eor	r24, r25
    242a:	8c 93       	st	X, r24
    }
    242c:	0f 90       	pop	r0
    242e:	0f 90       	pop	r0
    2430:	cf 91       	pop	r28
    2432:	df 91       	pop	r29
    2434:	08 95       	ret

00002436 <main0>:
stack_t stack[4][128];

sem_t sem;

void main0(void * t)
{
    2436:	df 93       	push	r29
    2438:	cf 93       	push	r28
    243a:	00 d0       	rcall	.+0      	; 0x243c <main0+0x6>
    243c:	cd b7       	in	r28, 0x3d	; 61
    243e:	de b7       	in	r29, 0x3e	; 62
    2440:	9a 83       	std	Y+2, r25	; 0x02
    2442:	89 83       	std	Y+1, r24	; 0x01
    while(1)
    {
        sem_lock(&sem,0);
    2444:	82 eb       	ldi	r24, 0xB2	; 178
    2446:	92 e0       	ldi	r25, 0x02	; 2
    2448:	60 e0       	ldi	r22, 0x00	; 0
    244a:	0e 94 05 04 	call	0x80a	; 0x80a <sem_lock>
        wait_time(100);
    244e:	84 e6       	ldi	r24, 0x64	; 100
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	0e 94 c2 10 	call	0x2184	; 0x2184 <wait_time>
        sem_unlock(&sem,0);
    2456:	82 eb       	ldi	r24, 0xB2	; 178
    2458:	92 e0       	ldi	r25, 0x02	; 2
    245a:	60 e0       	ldi	r22, 0x00	; 0
    245c:	0e 94 3d 04 	call	0x87a	; 0x87a <sem_unlock>
    2460:	f1 cf       	rjmp	.-30     	; 0x2444 <main0+0xe>

00002462 <main1>:
    }
}
void main1(void * t)
{
    2462:	df 93       	push	r29
    2464:	cf 93       	push	r28
    2466:	00 d0       	rcall	.+0      	; 0x2468 <main1+0x6>
    2468:	cd b7       	in	r28, 0x3d	; 61
    246a:	de b7       	in	r29, 0x3e	; 62
    246c:	9a 83       	std	Y+2, r25	; 0x02
    246e:	89 83       	std	Y+1, r24	; 0x01
    while(1)
    {
        sem_lock(&sem,0);
    2470:	82 eb       	ldi	r24, 0xB2	; 178
    2472:	92 e0       	ldi	r25, 0x02	; 2
    2474:	60 e0       	ldi	r22, 0x00	; 0
    2476:	0e 94 05 04 	call	0x80a	; 0x80a <sem_lock>
        wait_time(100);
    247a:	84 e6       	ldi	r24, 0x64	; 100
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	0e 94 c2 10 	call	0x2184	; 0x2184 <wait_time>
        sem_unlock(&sem,0);
    2482:	82 eb       	ldi	r24, 0xB2	; 178
    2484:	92 e0       	ldi	r25, 0x02	; 2
    2486:	60 e0       	ldi	r22, 0x00	; 0
    2488:	0e 94 3d 04 	call	0x87a	; 0x87a <sem_unlock>
    248c:	f1 cf       	rjmp	.-30     	; 0x2470 <main1+0xe>

0000248e <main2>:
    }
}
void main2(void * t)
{
    248e:	df 93       	push	r29
    2490:	cf 93       	push	r28
    2492:	00 d0       	rcall	.+0      	; 0x2494 <main2+0x6>
    2494:	cd b7       	in	r28, 0x3d	; 61
    2496:	de b7       	in	r29, 0x3e	; 62
    2498:	9a 83       	std	Y+2, r25	; 0x02
    249a:	89 83       	std	Y+1, r24	; 0x01
    while(1)
    {
        sem_lock(&sem,0);
    249c:	82 eb       	ldi	r24, 0xB2	; 178
    249e:	92 e0       	ldi	r25, 0x02	; 2
    24a0:	60 e0       	ldi	r22, 0x00	; 0
    24a2:	0e 94 05 04 	call	0x80a	; 0x80a <sem_lock>
        proc_reset_watchdog();
    24a6:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <proc_reset_watchdog>
        proc_self_stop();
    24aa:	0e 94 14 03 	call	0x628	; 0x628 <proc_self_stop>
        sem_unlock(&sem,0);
    24ae:	82 eb       	ldi	r24, 0xB2	; 178
    24b0:	92 e0       	ldi	r25, 0x02	; 2
    24b2:	60 e0       	ldi	r22, 0x00	; 0
    24b4:	0e 94 3d 04 	call	0x87a	; 0x87a <sem_unlock>
    24b8:	f1 cf       	rjmp	.-30     	; 0x249c <main2+0xe>

000024ba <main3>:
    24ba:	df 93       	push	r29
    24bc:	cf 93       	push	r28
    24be:	00 d0       	rcall	.+0      	; 0x24c0 <main3+0x6>
    24c0:	0f 92       	push	r0
    24c2:	cd b7       	in	r28, 0x3d	; 61
    24c4:	de b7       	in	r29, 0x3e	; 62
    24c6:	9b 83       	std	Y+3, r25	; 0x03
    24c8:	8a 83       	std	Y+2, r24	; 0x02
    24ca:	19 82       	std	Y+1, r1	; 0x01
    24cc:	03 c0       	rjmp	.+6      	; 0x24d4 <main3+0x1a>
    24ce:	89 81       	ldd	r24, Y+1	; 0x01
    24d0:	8f 5f       	subi	r24, 0xFF	; 255
    24d2:	89 83       	std	Y+1, r24	; 0x01
    24d4:	89 81       	ldd	r24, Y+1	; 0x01
    24d6:	8a 30       	cpi	r24, 0x0A	; 10
    24d8:	d0 f3       	brcs	.-12     	; 0x24ce <main3+0x14>
    24da:	f7 cf       	rjmp	.-18     	; 0x24ca <main3+0x10>

000024dc <idle_main>:
    {
        for(unsigned char i=0;i<10;i++);
    }
}
void idle_main(void * t)
{
    24dc:	df 93       	push	r29
    24de:	cf 93       	push	r28
    24e0:	00 d0       	rcall	.+0      	; 0x24e2 <idle_main+0x6>
    24e2:	cd b7       	in	r28, 0x3d	; 61
    24e4:	de b7       	in	r29, 0x3e	; 62
    24e6:	9a 83       	std	Y+2, r25	; 0x02
    24e8:	89 83       	std	Y+1, r24	; 0x01
    // Insert code
    while(1)
    {
         wait_time(1000);
    24ea:	88 ee       	ldi	r24, 0xE8	; 232
    24ec:	93 e0       	ldi	r25, 0x03	; 3
    24ee:	0e 94 c2 10 	call	0x2184	; 0x2184 <wait_time>
         proc_run(&proc[2]);
    24f2:	86 e5       	ldi	r24, 0x56	; 86
    24f4:	92 e0       	ldi	r25, 0x02	; 2
    24f6:	0e 94 a9 02 	call	0x552	; 0x552 <proc_run>
    24fa:	f7 cf       	rjmp	.-18     	; 0x24ea <idle_main+0xe>

000024fc <main>:
    }
}

int main(void)
{
    24fc:	8f 92       	push	r8
    24fe:	af 92       	push	r10
    2500:	bf 92       	push	r11
    2502:	cf 92       	push	r12
    2504:	ef 92       	push	r14
    2506:	ff 92       	push	r15
    2508:	0f 93       	push	r16
    250a:	1f 93       	push	r17
    250c:	df 93       	push	r29
    250e:	cf 93       	push	r28
    2510:	cd b7       	in	r28, 0x3d	; 61
    2512:	de b7       	in	r29, 0x3e	; 62
    init_bugurt();
    2514:	0e 94 57 01 	call	0x2ae	; 0x2ae <init_bugurt>

    TCCR2A = 0x02;//
    2518:	e0 eb       	ldi	r30, 0xB0	; 176
    251a:	f0 e0       	ldi	r31, 0x00	; 0
    251c:	82 e0       	ldi	r24, 0x02	; 2
    251e:	80 83       	st	Z, r24
    TCCR2B = 0x05;// prescaler=128
    2520:	e1 eb       	ldi	r30, 0xB1	; 177
    2522:	f0 e0       	ldi	r31, 0x00	; 0
    2524:	85 e0       	ldi	r24, 0x05	; 5
    2526:	80 83       	st	Z, r24
    OCR2A  = 124;
    2528:	e3 eb       	ldi	r30, 0xB3	; 179
    252a:	f0 e0       	ldi	r31, 0x00	; 0
    252c:	8c e7       	ldi	r24, 0x7C	; 124
    252e:	80 83       	st	Z, r24
    OCR2B  = 0x00;
    2530:	e4 eb       	ldi	r30, 0xB4	; 180
    2532:	f0 e0       	ldi	r31, 0x00	; 0
    2534:	10 82       	st	Z, r1
    TIMSK2 = 0x00; // shceduler not started
    2536:	e0 e7       	ldi	r30, 0x70	; 112
    2538:	f0 e0       	ldi	r31, 0x00	; 0
    253a:	10 82       	st	Z, r1
    TIFR2  = 0x00;
    253c:	e7 e3       	ldi	r30, 0x37	; 55
    253e:	f0 e0       	ldi	r31, 0x00	; 0
    2540:	10 82       	st	Z, r1

    EICRA = 0x08; //falling edge
    2542:	e9 e6       	ldi	r30, 0x69	; 105
    2544:	f0 e0       	ldi	r31, 0x00	; 0
    2546:	88 e0       	ldi	r24, 0x08	; 8
    2548:	80 83       	st	Z, r24
    EIMSK = 0x00; //resched generates int1, mask 0x02
    254a:	ed e3       	ldi	r30, 0x3D	; 61
    254c:	f0 e0       	ldi	r31, 0x00	; 0
    254e:	10 82       	st	Z, r1

    DDRB = 0x3F;
    2550:	e4 e2       	ldi	r30, 0x24	; 36
    2552:	f0 e0       	ldi	r31, 0x00	; 0
    2554:	8f e3       	ldi	r24, 0x3F	; 63
    2556:	80 83       	st	Z, r24
    PORTB = 0x00;
    2558:	e5 e2       	ldi	r30, 0x25	; 37
    255a:	f0 e0       	ldi	r31, 0x00	; 0
    255c:	10 82       	st	Z, r1
    DDRC = 0x3F;
    255e:	e7 e2       	ldi	r30, 0x27	; 39
    2560:	f0 e0       	ldi	r31, 0x00	; 0
    2562:	8f e3       	ldi	r24, 0x3F	; 63
    2564:	80 83       	st	Z, r24
    PORTC = 0x00;
    2566:	e8 e2       	ldi	r30, 0x28	; 40
    2568:	f0 e0       	ldi	r31, 0x00	; 0
    256a:	10 82       	st	Z, r1
    DDRD = 0xFE;
    256c:	ea e2       	ldi	r30, 0x2A	; 42
    256e:	f0 e0       	ldi	r31, 0x00	; 0
    2570:	8e ef       	ldi	r24, 0xFE	; 254
    2572:	80 83       	st	Z, r24
    PORTD = 0x00;
    2574:	eb e2       	ldi	r30, 0x2B	; 43
    2576:	f0 e0       	ldi	r31, 0x00	; 0
    2578:	10 82       	st	Z, r1

    G1_on();
    257a:	ab e2       	ldi	r26, 0x2B	; 43
    257c:	b0 e0       	ldi	r27, 0x00	; 0
    257e:	eb e2       	ldi	r30, 0x2B	; 43
    2580:	f0 e0       	ldi	r31, 0x00	; 0
    2582:	80 81       	ld	r24, Z
    2584:	80 61       	ori	r24, 0x10	; 16
    2586:	8c 93       	st	X, r24
    G2_on();
    2588:	ab e2       	ldi	r26, 0x2B	; 43
    258a:	b0 e0       	ldi	r27, 0x00	; 0
    258c:	eb e2       	ldi	r30, 0x2B	; 43
    258e:	f0 e0       	ldi	r31, 0x00	; 0
    2590:	80 81       	ld	r24, Z
    2592:	88 60       	ori	r24, 0x08	; 8
    2594:	8c 93       	st	X, r24
    R3_on();
    2596:	ab e2       	ldi	r26, 0x2B	; 43
    2598:	b0 e0       	ldi	r27, 0x00	; 0
    259a:	eb e2       	ldi	r30, 0x2B	; 43
    259c:	f0 e0       	ldi	r31, 0x00	; 0
    259e:	80 81       	ld	r24, Z
    25a0:	80 62       	ori	r24, 0x20	; 32
    25a2:	8c 93       	st	X, r24

    proc_init_isr(&proc[0], main0, blink_1, blink_1, 0, &stack[0][127], 1, 2, 0);
    25a4:	85 ec       	ldi	r24, 0xC5	; 197
    25a6:	92 e0       	ldi	r25, 0x02	; 2
    25a8:	dc 01       	movw	r26, r24
    25aa:	a1 58       	subi	r26, 0x81	; 129
    25ac:	bf 4f       	sbci	r27, 0xFF	; 255
    25ae:	8a ef       	ldi	r24, 0xFA	; 250
    25b0:	91 e0       	ldi	r25, 0x01	; 1
    25b2:	2b e1       	ldi	r18, 0x1B	; 27
    25b4:	32 e1       	ldi	r19, 0x12	; 18
    25b6:	47 ea       	ldi	r20, 0xA7	; 167
    25b8:	51 e1       	ldi	r21, 0x11	; 17
    25ba:	e7 ea       	ldi	r30, 0xA7	; 167
    25bc:	f1 e1       	ldi	r31, 0x11	; 17
    25be:	b9 01       	movw	r22, r18
    25c0:	9f 01       	movw	r18, r30
    25c2:	00 e0       	ldi	r16, 0x00	; 0
    25c4:	10 e0       	ldi	r17, 0x00	; 0
    25c6:	7d 01       	movw	r14, r26
    25c8:	cc 24       	eor	r12, r12
    25ca:	c3 94       	inc	r12
    25cc:	aa 24       	eor	r10, r10
    25ce:	bb 24       	eor	r11, r11
    25d0:	68 94       	set
    25d2:	a1 f8       	bld	r10, 1
    25d4:	88 24       	eor	r8, r8
    25d6:	0e 94 8d 0b 	call	0x171a	; 0x171a <proc_init_isr>
    proc_init_isr(&proc[1], main1, blink_2, blink_2, 0, &stack[1][127], 2, 3, 0);
    25da:	85 ec       	ldi	r24, 0xC5	; 197
    25dc:	92 e0       	ldi	r25, 0x02	; 2
    25de:	dc 01       	movw	r26, r24
    25e0:	a1 50       	subi	r26, 0x01	; 1
    25e2:	bf 4f       	sbci	r27, 0xFF	; 255
    25e4:	88 e2       	ldi	r24, 0x28	; 40
    25e6:	92 e0       	ldi	r25, 0x02	; 2
    25e8:	21 e3       	ldi	r18, 0x31	; 49
    25ea:	32 e1       	ldi	r19, 0x12	; 18
    25ec:	4b eb       	ldi	r20, 0xBB	; 187
    25ee:	51 e1       	ldi	r21, 0x11	; 17
    25f0:	eb eb       	ldi	r30, 0xBB	; 187
    25f2:	f1 e1       	ldi	r31, 0x11	; 17
    25f4:	b9 01       	movw	r22, r18
    25f6:	9f 01       	movw	r18, r30
    25f8:	00 e0       	ldi	r16, 0x00	; 0
    25fa:	10 e0       	ldi	r17, 0x00	; 0
    25fc:	7d 01       	movw	r14, r26
    25fe:	cc 24       	eor	r12, r12
    2600:	68 94       	set
    2602:	c1 f8       	bld	r12, 1
    2604:	0f 2e       	mov	r0, r31
    2606:	f3 e0       	ldi	r31, 0x03	; 3
    2608:	af 2e       	mov	r10, r31
    260a:	bb 24       	eor	r11, r11
    260c:	f0 2d       	mov	r31, r0
    260e:	88 24       	eor	r8, r8
    2610:	0e 94 8d 0b 	call	0x171a	; 0x171a <proc_init_isr>
    proc_init_isr(&proc[2], main2, blink_3, blink_3, 0, &stack[2][127], 2, 4, 1);// Типа реального времени
    2614:	85 ec       	ldi	r24, 0xC5	; 197
    2616:	92 e0       	ldi	r25, 0x02	; 2
    2618:	dc 01       	movw	r26, r24
    261a:	a1 58       	subi	r26, 0x81	; 129
    261c:	be 4f       	sbci	r27, 0xFE	; 254
    261e:	86 e5       	ldi	r24, 0x56	; 86
    2620:	92 e0       	ldi	r25, 0x02	; 2
    2622:	27 e4       	ldi	r18, 0x47	; 71
    2624:	32 e1       	ldi	r19, 0x12	; 18
    2626:	4f ec       	ldi	r20, 0xCF	; 207
    2628:	51 e1       	ldi	r21, 0x11	; 17
    262a:	ef ec       	ldi	r30, 0xCF	; 207
    262c:	f1 e1       	ldi	r31, 0x11	; 17
    262e:	b9 01       	movw	r22, r18
    2630:	9f 01       	movw	r18, r30
    2632:	00 e0       	ldi	r16, 0x00	; 0
    2634:	10 e0       	ldi	r17, 0x00	; 0
    2636:	7d 01       	movw	r14, r26
    2638:	cc 24       	eor	r12, r12
    263a:	68 94       	set
    263c:	c1 f8       	bld	r12, 1
    263e:	aa 24       	eor	r10, r10
    2640:	bb 24       	eor	r11, r11
    2642:	68 94       	set
    2644:	a2 f8       	bld	r10, 2
    2646:	88 24       	eor	r8, r8
    2648:	83 94       	inc	r8
    264a:	0e 94 8d 0b 	call	0x171a	; 0x171a <proc_init_isr>
    proc_init_isr(&proc[3], main3, blink_4, blink_4, 0, &stack[3][127], 3, 4, 0);
    264e:	85 ec       	ldi	r24, 0xC5	; 197
    2650:	92 e0       	ldi	r25, 0x02	; 2
    2652:	dc 01       	movw	r26, r24
    2654:	a1 50       	subi	r26, 0x01	; 1
    2656:	be 4f       	sbci	r27, 0xFE	; 254
    2658:	84 e8       	ldi	r24, 0x84	; 132
    265a:	92 e0       	ldi	r25, 0x02	; 2
    265c:	2d e5       	ldi	r18, 0x5D	; 93
    265e:	32 e1       	ldi	r19, 0x12	; 18
    2660:	43 ee       	ldi	r20, 0xE3	; 227
    2662:	51 e1       	ldi	r21, 0x11	; 17
    2664:	e3 ee       	ldi	r30, 0xE3	; 227
    2666:	f1 e1       	ldi	r31, 0x11	; 17
    2668:	b9 01       	movw	r22, r18
    266a:	9f 01       	movw	r18, r30
    266c:	00 e0       	ldi	r16, 0x00	; 0
    266e:	10 e0       	ldi	r17, 0x00	; 0
    2670:	7d 01       	movw	r14, r26
    2672:	0f 2e       	mov	r0, r31
    2674:	f3 e0       	ldi	r31, 0x03	; 3
    2676:	cf 2e       	mov	r12, r31
    2678:	f0 2d       	mov	r31, r0
    267a:	aa 24       	eor	r10, r10
    267c:	bb 24       	eor	r11, r11
    267e:	68 94       	set
    2680:	a2 f8       	bld	r10, 2
    2682:	88 24       	eor	r8, r8
    2684:	0e 94 8d 0b 	call	0x171a	; 0x171a <proc_init_isr>

    kernel.idle.rs_hook = blink_12;
    2688:	87 ef       	ldi	r24, 0xF7	; 247
    268a:	91 e1       	ldi	r25, 0x11	; 17
    268c:	90 93 ef 01 	sts	0x01EF, r25
    2690:	80 93 ee 01 	sts	0x01EE, r24
    kernel.idle.sv_hook = blink_12;
    2694:	87 ef       	ldi	r24, 0xF7	; 247
    2696:	91 e1       	ldi	r25, 0x11	; 17
    2698:	90 93 ed 01 	sts	0x01ED, r25
    269c:	80 93 ec 01 	sts	0x01EC, r24

    proc_run_isr(&proc[0]);
    26a0:	8a ef       	ldi	r24, 0xFA	; 250
    26a2:	91 e0       	ldi	r25, 0x01	; 1
    26a4:	0e 94 33 0c 	call	0x1866	; 0x1866 <proc_run_isr>
    proc_run_isr(&proc[1]);
    26a8:	88 e2       	ldi	r24, 0x28	; 40
    26aa:	92 e0       	ldi	r25, 0x02	; 2
    26ac:	0e 94 33 0c 	call	0x1866	; 0x1866 <proc_run_isr>
    proc_run_isr(&proc[2]);
    26b0:	86 e5       	ldi	r24, 0x56	; 86
    26b2:	92 e0       	ldi	r25, 0x02	; 2
    26b4:	0e 94 33 0c 	call	0x1866	; 0x1866 <proc_run_isr>
    proc_run_isr(&proc[3]);
    26b8:	84 e8       	ldi	r24, 0x84	; 132
    26ba:	92 e0       	ldi	r25, 0x02	; 2
    26bc:	0e 94 33 0c 	call	0x1866	; 0x1866 <proc_run_isr>

    sem_init_isr(&sem,1);
    26c0:	82 eb       	ldi	r24, 0xB2	; 178
    26c2:	92 e0       	ldi	r25, 0x02	; 2
    26c4:	61 e0       	ldi	r22, 0x01	; 1
    26c6:	70 e0       	ldi	r23, 0x00	; 0
    26c8:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <sem_init_isr>

    start_bugurt();
    26cc:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <start_bugurt>
    return 0;
    26d0:	80 e0       	ldi	r24, 0x00	; 0
    26d2:	90 e0       	ldi	r25, 0x00	; 0
}
    26d4:	cf 91       	pop	r28
    26d6:	df 91       	pop	r29
    26d8:	1f 91       	pop	r17
    26da:	0f 91       	pop	r16
    26dc:	ff 90       	pop	r15
    26de:	ef 90       	pop	r14
    26e0:	cf 90       	pop	r12
    26e2:	bf 90       	pop	r11
    26e4:	af 90       	pop	r10
    26e6:	8f 90       	pop	r8
    26e8:	08 95       	ret

000026ea <_exit>:
    26ea:	f8 94       	cli

000026ec <__stop_program>:
    26ec:	ff cf       	rjmp	.-2      	; 0x26ec <__stop_program>
