
bin/Debug/arduino328-test-mutex.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00002502  00002596  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002502  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000033a  00800102  00800102  00002598  2**0
                  ALLOC
  3 .stab         00006e4c  00000000  00000000  00002598  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003527  00000000  00000000  000093e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 20 01 	jmp	0x240	; 0x240 <__vector_7>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      54:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

00000068 <syscall_routine>:
      68:	d5 01 1e 02 38 02 52 02 6c 02 85 02 e8 02 f9 02     ....8.R.l.......
      78:	09 03 19 03 29 03 39 03 50 03 6a 03 7a 03 90 03     ....).9.P.j.z...
      88:	c7 03 fe 03                                         ....

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e2 e0       	ldi	r30, 0x02	; 2
      a0:	f5 e2       	ldi	r31, 0x25	; 37
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <.do_copy_data_start>

000000a4 <.do_copy_data_loop>:
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0

000000a8 <.do_copy_data_start>:
      a8:	a2 30       	cpi	r26, 0x02	; 2
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <.do_copy_data_loop>

000000ae <__do_clear_bss>:
      ae:	14 e0       	ldi	r17, 0x04	; 4
      b0:	a2 e0       	ldi	r26, 0x02	; 2
      b2:	b1 e0       	ldi	r27, 0x01	; 1
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	ac 33       	cpi	r26, 0x3C	; 60
      ba:	b1 07       	cpc	r27, r17
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 82 11 	call	0x2304	; 0x2304 <main>
      c2:	0c 94 7f 12 	jmp	0x24fe	; 0x24fe <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <osbme_store_context>:
      ca:	2f 92       	push	r2
      cc:	2f b6       	in	r2, 0x3f	; 63
      ce:	2f 92       	push	r2
      d0:	3f 92       	push	r3
      d2:	4f 92       	push	r4
      d4:	5f 92       	push	r5
      d6:	6f 92       	push	r6
      d8:	7f 92       	push	r7
      da:	8f 92       	push	r8
      dc:	9f 92       	push	r9
      de:	af 92       	push	r10
      e0:	bf 92       	push	r11
      e2:	cf 92       	push	r12
      e4:	df 92       	push	r13
      e6:	ef 92       	push	r14
      e8:	ff 92       	push	r15
      ea:	0f 93       	push	r16
      ec:	1f 93       	push	r17
      ee:	2f 93       	push	r18
      f0:	3f 93       	push	r19
      f2:	4f 93       	push	r20
      f4:	5f 93       	push	r21
      f6:	6f 93       	push	r22
      f8:	7f 93       	push	r23
      fa:	8f 93       	push	r24
      fc:	9f 93       	push	r25
      fe:	af 93       	push	r26
     100:	bf 93       	push	r27
     102:	cf 93       	push	r28
     104:	df 93       	push	r29
     106:	ef 93       	push	r30
     108:	ff 93       	push	r31
     10a:	ed b7       	in	r30, 0x3d	; 61
     10c:	fe b7       	in	r31, 0x3e	; 62
     10e:	21 a1       	ldd	r18, Z+33	; 0x21
     110:	30 a1       	ldd	r19, Z+32	; 0x20
     112:	01 a2       	std	Z+33, r0	; 0x21
     114:	10 a2       	std	Z+32, r1	; 0x20
     116:	11 24       	eor	r1, r1
     118:	8d b7       	in	r24, 0x3d	; 61
     11a:	9e b7       	in	r25, 0x3e	; 62
     11c:	2f 93       	push	r18
     11e:	3f 93       	push	r19
     120:	08 95       	ret

00000122 <osbme_load_context>:
     122:	3f 91       	pop	r19
     124:	2f 91       	pop	r18
     126:	9e bf       	out	0x3e, r25	; 62
     128:	8d bf       	out	0x3d, r24	; 61
     12a:	fe b7       	in	r31, 0x3e	; 62
     12c:	ed b7       	in	r30, 0x3d	; 61
     12e:	10 a0       	ldd	r1, Z+32	; 0x20
     130:	01 a0       	ldd	r0, Z+33	; 0x21
     132:	30 a3       	std	Z+32, r19	; 0x20
     134:	21 a3       	std	Z+33, r18	; 0x21
     136:	ff 91       	pop	r31
     138:	ef 91       	pop	r30
     13a:	df 91       	pop	r29
     13c:	cf 91       	pop	r28
     13e:	bf 91       	pop	r27
     140:	af 91       	pop	r26
     142:	9f 91       	pop	r25
     144:	8f 91       	pop	r24
     146:	7f 91       	pop	r23
     148:	6f 91       	pop	r22
     14a:	5f 91       	pop	r21
     14c:	4f 91       	pop	r20
     14e:	3f 91       	pop	r19
     150:	2f 91       	pop	r18
     152:	1f 91       	pop	r17
     154:	0f 91       	pop	r16
     156:	ff 90       	pop	r15
     158:	ef 90       	pop	r14
     15a:	df 90       	pop	r13
     15c:	cf 90       	pop	r12
     15e:	bf 90       	pop	r11
     160:	af 90       	pop	r10
     162:	9f 90       	pop	r9
     164:	8f 90       	pop	r8
     166:	7f 90       	pop	r7
     168:	6f 90       	pop	r6
     16a:	5f 90       	pop	r5
     16c:	4f 90       	pop	r4
     16e:	3f 90       	pop	r3
     170:	2f 90       	pop	r2
     172:	2f be       	out	0x3f, r2	; 63
     174:	2f 90       	pop	r2
     176:	08 95       	ret

00000178 <osbme_set_stack_pointer>:
     178:	1f 90       	pop	r1
     17a:	0f 90       	pop	r0
     17c:	9e bf       	out	0x3e, r25	; 62
     17e:	8d bf       	out	0x3d, r24	; 61
     180:	0f 92       	push	r0
     182:	1f 92       	push	r1
     184:	11 24       	eor	r1, r1
     186:	08 95       	ret

00000188 <disable_interrupts>:
#include"bugurt_kernel.h"

// Платформеннозависимый код
// Просто функции, специфичные для AVR
void disable_interrupts(void)
{
     188:	df 93       	push	r29
     18a:	cf 93       	push	r28
     18c:	cd b7       	in	r28, 0x3d	; 61
     18e:	de b7       	in	r29, 0x3e	; 62
    cli();
     190:	f8 94       	cli
}
     192:	cf 91       	pop	r28
     194:	df 91       	pop	r29
     196:	08 95       	ret

00000198 <enable_interrupts>:
void enable_interrupts(void)
{
     198:	df 93       	push	r29
     19a:	cf 93       	push	r28
     19c:	cd b7       	in	r28, 0x3d	; 61
     19e:	de b7       	in	r29, 0x3e	; 62
    sei();
     1a0:	78 94       	sei
}
     1a2:	cf 91       	pop	r28
     1a4:	df 91       	pop	r29
     1a6:	08 95       	ret

000001a8 <current_proc>:

proc_t * current_proc(void)
{
     1a8:	df 93       	push	r29
     1aa:	cf 93       	push	r28
     1ac:	cd b7       	in	r28, 0x3d	; 61
     1ae:	de b7       	in	r29, 0x3e	; 62
    return kernel.sched.current_proc;
     1b0:	80 91 15 01 	lds	r24, 0x0115
     1b4:	90 91 16 01 	lds	r25, 0x0116
}
     1b8:	cf 91       	pop	r28
     1ba:	df 91       	pop	r29
     1bc:	08 95       	ret

000001be <proc_stack_init>:

void * proc_stack_init(stack_t * sstart, code_t code, void * arg)
{
     1be:	df 93       	push	r29
     1c0:	cf 93       	push	r28
     1c2:	00 d0       	rcall	.+0      	; 0x1c4 <proc_stack_init+0x6>
     1c4:	00 d0       	rcall	.+0      	; 0x1c6 <proc_stack_init+0x8>
     1c6:	00 d0       	rcall	.+0      	; 0x1c8 <proc_stack_init+0xa>
     1c8:	cd b7       	in	r28, 0x3d	; 61
     1ca:	de b7       	in	r29, 0x3e	; 62
     1cc:	9a 83       	std	Y+2, r25	; 0x02
     1ce:	89 83       	std	Y+1, r24	; 0x01
     1d0:	7c 83       	std	Y+4, r23	; 0x04
     1d2:	6b 83       	std	Y+3, r22	; 0x03
     1d4:	5e 83       	std	Y+6, r21	; 0x06
     1d6:	4d 83       	std	Y+5, r20	; 0x05
    return osbme_init_stack( (void *)sstart, (osbme_code_t)code, (void *)arg );
     1d8:	89 81       	ldd	r24, Y+1	; 0x01
     1da:	9a 81       	ldd	r25, Y+2	; 0x02
     1dc:	2b 81       	ldd	r18, Y+3	; 0x03
     1de:	3c 81       	ldd	r19, Y+4	; 0x04
     1e0:	4d 81       	ldd	r20, Y+5	; 0x05
     1e2:	5e 81       	ldd	r21, Y+6	; 0x06
     1e4:	b9 01       	movw	r22, r18
     1e6:	0e 94 20 04 	call	0x840	; 0x840 <osbme_init_stack>
}
     1ea:	26 96       	adiw	r28, 0x06	; 6
     1ec:	0f b6       	in	r0, 0x3f	; 63
     1ee:	f8 94       	cli
     1f0:	de bf       	out	0x3e, r29	; 62
     1f2:	0f be       	out	0x3f, r0	; 63
     1f4:	cd bf       	out	0x3d, r28	; 61
     1f6:	cf 91       	pop	r28
     1f8:	df 91       	pop	r29
     1fa:	08 95       	ret

000001fc <resched>:

// Состояние ядра, выполняем перепланиировку
unsigned char kernel_state = KRN_FLG_RESCHED;
// Функция перепланировки
void resched( void )
{
     1fc:	df 93       	push	r29
     1fe:	cf 93       	push	r28
     200:	cd b7       	in	r28, 0x3d	; 61
     202:	de b7       	in	r29, 0x3e	; 62
    kernel_state |= KRN_FLG_RESCHED;
     204:	80 91 00 01 	lds	r24, 0x0100
     208:	81 60       	ori	r24, 0x01	; 1
     20a:	80 93 00 01 	sts	0x0100, r24
}
     20e:	cf 91       	pop	r28
     210:	df 91       	pop	r29
     212:	08 95       	ret

00000214 <bugurt_check_resched>:
в случае использования системных вызовов
на основе программного прерывания -
- проверка на гонки с прерыванием системного вызова.
*/
void bugurt_check_resched( void )
{
     214:	df 93       	push	r29
     216:	cf 93       	push	r28
     218:	cd b7       	in	r28, 0x3d	; 61
     21a:	de b7       	in	r29, 0x3e	; 62
    if(
    ( kernel_state & KRN_FLG_RESCHED )
     21c:	80 91 00 01 	lds	r24, 0x0100
     220:	88 2f       	mov	r24, r24
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	81 70       	andi	r24, 0x01	; 1
     226:	90 70       	andi	r25, 0x00	; 0
на основе программного прерывания -
- проверка на гонки с прерыванием системного вызова.
*/
void bugurt_check_resched( void )
{
    if(
     228:	88 23       	and	r24, r24
     22a:	39 f0       	breq	.+14     	; 0x23a <bugurt_check_resched+0x26>
#ifdef SYSCALL_ISR
    && ( (~kernel_state) & KRN_FLG_DO_SCALL )
#endif // SYSCALL_ISR
    )
    {
        kernel_state &= ~KRN_FLG_RESCHED;
     22c:	80 91 00 01 	lds	r24, 0x0100
     230:	8e 7f       	andi	r24, 0xFE	; 254
     232:	80 93 00 01 	sts	0x0100, r24
        sched_reschedule();
     236:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <sched_reschedule>
    }
}
     23a:	cf 91       	pop	r28
     23c:	df 91       	pop	r29
     23e:	08 95       	ret

00000240 <__vector_7>:
__attribute__ (( signal, naked )) void SYSTEM_TIMER_ISR(void)
{
    BUGURT_ISR_START();
     240:	00 91 15 01 	lds	r16, 0x0115
     244:	10 91 16 01 	lds	r17, 0x0116
     248:	0e 94 65 00 	call	0xca	; 0xca <osbme_store_context>
     24c:	f8 01       	movw	r30, r16
     24e:	95 a7       	std	Z+45, r25	; 0x2d
     250:	84 a7       	std	Z+44, r24	; 0x2c
     252:	80 91 6b 01 	lds	r24, 0x016B
     256:	90 91 6c 01 	lds	r25, 0x016C
     25a:	0e 94 bc 00 	call	0x178	; 0x178 <osbme_set_stack_pointer>

    kernel.timer++;
     25e:	80 91 6f 01 	lds	r24, 0x016F
     262:	90 91 70 01 	lds	r25, 0x0170
     266:	01 96       	adiw	r24, 0x01	; 1
     268:	90 93 70 01 	sts	0x0170, r25
     26c:	80 93 6f 01 	sts	0x016F, r24
    sched_schedule();
     270:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <sched_schedule>

    BUGURT_ISR_EXIT();
     274:	e0 91 15 01 	lds	r30, 0x0115
     278:	f0 91 16 01 	lds	r31, 0x0116
     27c:	84 a5       	ldd	r24, Z+44	; 0x2c
     27e:	95 a5       	ldd	r25, Z+45	; 0x2d
     280:	0e 94 91 00 	call	0x122	; 0x122 <osbme_load_context>
     284:	18 95       	reti

00000286 <init_bugurt>:
}
/***************************************************************************************************************/
// Функции общего пользования

void init_bugurt(void)
{
     286:	df 93       	push	r29
     288:	cf 93       	push	r28
     28a:	cd b7       	in	r28, 0x3d	; 61
     28c:	de b7       	in	r29, 0x3e	; 62
    cli();
     28e:	f8 94       	cli
    kernel.sched.nested_crit_sec = (count_t)1;
     290:	81 e0       	ldi	r24, 0x01	; 1
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	90 93 3e 01 	sts	0x013E, r25
     298:	80 93 3d 01 	sts	0x013D, r24
    kernel_init();
     29c:	0e 94 22 09 	call	0x1244	; 0x1244 <kernel_init>
}
     2a0:	cf 91       	pop	r28
     2a2:	df 91       	pop	r29
     2a4:	08 95       	ret

000002a6 <start_bugurt>:
void start_bugurt(void)
{
     2a6:	df 93       	push	r29
     2a8:	cf 93       	push	r28
     2aa:	cd b7       	in	r28, 0x3d	; 61
     2ac:	de b7       	in	r29, 0x3e	; 62
    start_scheduler();
     2ae:	0e 94 8f 10 	call	0x211e	; 0x211e <start_scheduler>
    kernel.sched.nested_crit_sec = (count_t)0;
     2b2:	10 92 3e 01 	sts	0x013E, r1
     2b6:	10 92 3d 01 	sts	0x013D, r1
    sei();
     2ba:	78 94       	sei
    idle_main( (void *)0 );
     2bc:	80 e0       	ldi	r24, 0x00	; 0
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	0e 94 76 11 	call	0x22ec	; 0x22ec <idle_main>
}
     2c4:	cf 91       	pop	r28
     2c6:	df 91       	pop	r29
     2c8:	08 95       	ret

000002ca <do_syscall>:
    scall_mutex_try_lock,
    scall_mutex_unlock
};

void do_syscall(void)
{
     2ca:	df 93       	push	r29
     2cc:	cf 93       	push	r28
     2ce:	00 d0       	rcall	.+0      	; 0x2d0 <do_syscall+0x6>
     2d0:	00 d0       	rcall	.+0      	; 0x2d2 <do_syscall+0x8>
     2d2:	00 d0       	rcall	.+0      	; 0x2d4 <do_syscall+0xa>
     2d4:	cd b7       	in	r28, 0x3d	; 61
     2d6:	de b7       	in	r29, 0x3e	; 62
    if( syscall_num != (unsigned char)0 )
     2d8:	80 91 02 01 	lds	r24, 0x0102
     2dc:	88 23       	and	r24, r24
     2de:	29 f1       	breq	.+74     	; 0x32a <do_syscall+0x60>
    {
        syscall_num--;
     2e0:	80 91 02 01 	lds	r24, 0x0102
     2e4:	81 50       	subi	r24, 0x01	; 1
     2e6:	80 93 02 01 	sts	0x0102, r24
        code_t syscall_func;
        syscall_func = (code_t)pgm_read_word(syscall_routine + syscall_num);
     2ea:	80 91 02 01 	lds	r24, 0x0102
     2ee:	88 2f       	mov	r24, r24
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	88 0f       	add	r24, r24
     2f4:	99 1f       	adc	r25, r25
     2f6:	88 59       	subi	r24, 0x98	; 152
     2f8:	9f 4f       	sbci	r25, 0xFF	; 255
     2fa:	9c 83       	std	Y+4, r25	; 0x04
     2fc:	8b 83       	std	Y+3, r24	; 0x03
     2fe:	8b 81       	ldd	r24, Y+3	; 0x03
     300:	9c 81       	ldd	r25, Y+4	; 0x04
     302:	fc 01       	movw	r30, r24
     304:	85 91       	lpm	r24, Z+
     306:	94 91       	lpm	r25, Z+
     308:	9a 83       	std	Y+2, r25	; 0x02
     30a:	89 83       	std	Y+1, r24	; 0x01
     30c:	fc 83       	std	Y+4, r31	; 0x04
     30e:	eb 83       	std	Y+3, r30	; 0x03
     310:	89 81       	ldd	r24, Y+1	; 0x01
     312:	9a 81       	ldd	r25, Y+2	; 0x02
     314:	9e 83       	std	Y+6, r25	; 0x06
     316:	8d 83       	std	Y+5, r24	; 0x05
        syscall_func(syscall_arg);
     318:	80 91 03 01 	lds	r24, 0x0103
     31c:	90 91 04 01 	lds	r25, 0x0104
     320:	ed 81       	ldd	r30, Y+5	; 0x05
     322:	fe 81       	ldd	r31, Y+6	; 0x06
     324:	09 95       	icall
        syscall_num = (unsigned char)0;
     326:	10 92 02 01 	sts	0x0102, r1
    }
}
     32a:	26 96       	adiw	r28, 0x06	; 6
     32c:	0f b6       	in	r0, 0x3f	; 63
     32e:	f8 94       	cli
     330:	de bf       	out	0x3e, r29	; 62
     332:	0f be       	out	0x3f, r0	; 63
     334:	cd bf       	out	0x3d, r28	; 61
     336:	cf 91       	pop	r28
     338:	df 91       	pop	r29
     33a:	08 95       	ret

0000033c <_scall>:
     while( kernel_state & KRN_FLG_DO_SCALL );
}
#else
__attribute__ (( naked )) void _scall(void)
{
    BUGURT_ISR_START();
     33c:	00 91 15 01 	lds	r16, 0x0115
     340:	10 91 16 01 	lds	r17, 0x0116
     344:	0e 94 65 00 	call	0xca	; 0xca <osbme_store_context>
     348:	f8 01       	movw	r30, r16
     34a:	95 a7       	std	Z+45, r25	; 0x2d
     34c:	84 a7       	std	Z+44, r24	; 0x2c
     34e:	80 91 6b 01 	lds	r24, 0x016B
     352:	90 91 6c 01 	lds	r25, 0x016C
     356:	0e 94 bc 00 	call	0x178	; 0x178 <osbme_set_stack_pointer>

    // Обрабатываем системный вызов
    do_syscall();
     35a:	0e 94 65 01 	call	0x2ca	; 0x2ca <do_syscall>

    BUGURT_ISR_END(); //Выходим и разрешаем прерывания!
     35e:	0e 94 0a 01 	call	0x214	; 0x214 <bugurt_check_resched>
     362:	e0 91 15 01 	lds	r30, 0x0115
     366:	f0 91 16 01 	lds	r31, 0x0116
     36a:	84 a5       	ldd	r24, Z+44	; 0x2c
     36c:	95 a5       	ldd	r25, Z+45	; 0x2d
     36e:	0e 94 91 00 	call	0x122	; 0x122 <osbme_load_context>
     372:	18 95       	reti

00000374 <syscall>:
}
///Если не используется программное прерывание - прямая передача управления
void syscall( unsigned char num, void * arg )
{
     374:	df 93       	push	r29
     376:	cf 93       	push	r28
     378:	00 d0       	rcall	.+0      	; 0x37a <syscall+0x6>
     37a:	0f 92       	push	r0
     37c:	cd b7       	in	r28, 0x3d	; 61
     37e:	de b7       	in	r29, 0x3e	; 62
     380:	89 83       	std	Y+1, r24	; 0x01
     382:	7b 83       	std	Y+3, r23	; 0x03
     384:	6a 83       	std	Y+2, r22	; 0x02
    cli(); // прерывания будут разрешены на выходе из _scall()
     386:	f8 94       	cli
    syscall_num = num;
     388:	89 81       	ldd	r24, Y+1	; 0x01
     38a:	80 93 02 01 	sts	0x0102, r24
    syscall_arg = arg;
     38e:	8a 81       	ldd	r24, Y+2	; 0x02
     390:	9b 81       	ldd	r25, Y+3	; 0x03
     392:	90 93 04 01 	sts	0x0104, r25
     396:	80 93 03 01 	sts	0x0103, r24
    _scall();
     39a:	0e 94 9e 01 	call	0x33c	; 0x33c <_scall>
}
     39e:	0f 90       	pop	r0
     3a0:	0f 90       	pop	r0
     3a2:	0f 90       	pop	r0
     3a4:	cf 91       	pop	r28
     3a6:	df 91       	pop	r29
     3a8:	08 95       	ret

000003aa <scall_proc_init>:
///                 ОБРАБОТЧИКИ СИСТЕМНЫХ ВЫЗОВОВ
///=================================================================
///                   Управление процессами
//1
void scall_proc_init( void * arg )
{
     3aa:	8f 92       	push	r8
     3ac:	af 92       	push	r10
     3ae:	bf 92       	push	r11
     3b0:	cf 92       	push	r12
     3b2:	df 92       	push	r13
     3b4:	ef 92       	push	r14
     3b6:	ff 92       	push	r15
     3b8:	0f 93       	push	r16
     3ba:	1f 93       	push	r17
     3bc:	df 93       	push	r29
     3be:	cf 93       	push	r28
     3c0:	00 d0       	rcall	.+0      	; 0x3c2 <scall_proc_init+0x18>
     3c2:	cd b7       	in	r28, 0x3d	; 61
     3c4:	de b7       	in	r29, 0x3e	; 62
     3c6:	9a 83       	std	Y+2, r25	; 0x02
     3c8:	89 83       	std	Y+1, r24	; 0x01
    proc_init_isr(
     3ca:	e9 81       	ldd	r30, Y+1	; 0x01
     3cc:	fa 81       	ldd	r31, Y+2	; 0x02
     3ce:	80 81       	ld	r24, Z
     3d0:	91 81       	ldd	r25, Z+1	; 0x01
     3d2:	e9 81       	ldd	r30, Y+1	; 0x01
     3d4:	fa 81       	ldd	r31, Y+2	; 0x02
     3d6:	22 81       	ldd	r18, Z+2	; 0x02
     3d8:	33 81       	ldd	r19, Z+3	; 0x03
     3da:	e9 81       	ldd	r30, Y+1	; 0x01
     3dc:	fa 81       	ldd	r31, Y+2	; 0x02
     3de:	44 81       	ldd	r20, Z+4	; 0x04
     3e0:	55 81       	ldd	r21, Z+5	; 0x05
     3e2:	e9 81       	ldd	r30, Y+1	; 0x01
     3e4:	fa 81       	ldd	r31, Y+2	; 0x02
     3e6:	06 81       	ldd	r16, Z+6	; 0x06
     3e8:	17 81       	ldd	r17, Z+7	; 0x07
     3ea:	e9 81       	ldd	r30, Y+1	; 0x01
     3ec:	fa 81       	ldd	r31, Y+2	; 0x02
     3ee:	e0 84       	ldd	r14, Z+8	; 0x08
     3f0:	f1 84       	ldd	r15, Z+9	; 0x09
     3f2:	e9 81       	ldd	r30, Y+1	; 0x01
     3f4:	fa 81       	ldd	r31, Y+2	; 0x02
     3f6:	c2 84       	ldd	r12, Z+10	; 0x0a
     3f8:	d3 84       	ldd	r13, Z+11	; 0x0b
     3fa:	e9 81       	ldd	r30, Y+1	; 0x01
     3fc:	fa 81       	ldd	r31, Y+2	; 0x02
     3fe:	b4 84       	ldd	r11, Z+12	; 0x0c
     400:	e9 81       	ldd	r30, Y+1	; 0x01
     402:	fa 81       	ldd	r31, Y+2	; 0x02
     404:	a5 85       	ldd	r26, Z+13	; 0x0d
     406:	b6 85       	ldd	r27, Z+14	; 0x0e
     408:	e9 81       	ldd	r30, Y+1	; 0x01
     40a:	fa 81       	ldd	r31, Y+2	; 0x02
     40c:	e7 85       	ldd	r30, Z+15	; 0x0f
     40e:	b9 01       	movw	r22, r18
     410:	98 01       	movw	r18, r16
     412:	87 01       	movw	r16, r14
     414:	76 01       	movw	r14, r12
     416:	cb 2c       	mov	r12, r11
     418:	5d 01       	movw	r10, r26
     41a:	8e 2e       	mov	r8, r30
     41c:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <proc_init_isr>
              ((proc_init_arg_t *)arg)->sstart,
              ((proc_init_arg_t *)arg)->prio,
              ((proc_init_arg_t *)arg)->time_quant,
              ((proc_init_arg_t *)arg)->is_rt
              );
}
     420:	0f 90       	pop	r0
     422:	0f 90       	pop	r0
     424:	cf 91       	pop	r28
     426:	df 91       	pop	r29
     428:	1f 91       	pop	r17
     42a:	0f 91       	pop	r16
     42c:	ff 90       	pop	r15
     42e:	ef 90       	pop	r14
     430:	df 90       	pop	r13
     432:	cf 90       	pop	r12
     434:	bf 90       	pop	r11
     436:	af 90       	pop	r10
     438:	8f 90       	pop	r8
     43a:	08 95       	ret

0000043c <scall_proc_run>:
    syscall(1,(void *)&scarg);
}
//---------------------------------------------------------------------------------------------
//2
void scall_proc_run( void * arg )
{
     43c:	0f 93       	push	r16
     43e:	1f 93       	push	r17
     440:	df 93       	push	r29
     442:	cf 93       	push	r28
     444:	00 d0       	rcall	.+0      	; 0x446 <scall_proc_run+0xa>
     446:	cd b7       	in	r28, 0x3d	; 61
     448:	de b7       	in	r29, 0x3e	; 62
     44a:	9a 83       	std	Y+2, r25	; 0x02
     44c:	89 83       	std	Y+1, r24	; 0x01
    ((proc_runtime_arg_t *)arg)->scall_ret = proc_run_isr( ((proc_runtime_arg_t *)arg)->proc );
     44e:	09 81       	ldd	r16, Y+1	; 0x01
     450:	1a 81       	ldd	r17, Y+2	; 0x02
     452:	e9 81       	ldd	r30, Y+1	; 0x01
     454:	fa 81       	ldd	r31, Y+2	; 0x02
     456:	80 81       	ld	r24, Z
     458:	91 81       	ldd	r25, Z+1	; 0x01
     45a:	0e 94 9e 0b 	call	0x173c	; 0x173c <proc_run_isr>
     45e:	f8 01       	movw	r30, r16
     460:	82 83       	std	Z+2, r24	; 0x02
}
     462:	0f 90       	pop	r0
     464:	0f 90       	pop	r0
     466:	cf 91       	pop	r28
     468:	df 91       	pop	r29
     46a:	1f 91       	pop	r17
     46c:	0f 91       	pop	r16
     46e:	08 95       	ret

00000470 <scall_proc_restart>:
    return scarg.scall_ret;
}
//---------------------------------------------------------------------------------------------
//3
void scall_proc_restart( void * arg )
{
     470:	0f 93       	push	r16
     472:	1f 93       	push	r17
     474:	df 93       	push	r29
     476:	cf 93       	push	r28
     478:	00 d0       	rcall	.+0      	; 0x47a <scall_proc_restart+0xa>
     47a:	cd b7       	in	r28, 0x3d	; 61
     47c:	de b7       	in	r29, 0x3e	; 62
     47e:	9a 83       	std	Y+2, r25	; 0x02
     480:	89 83       	std	Y+1, r24	; 0x01
    ((proc_runtime_arg_t *)arg)->scall_ret = proc_restart_isr( ((proc_runtime_arg_t *)arg)->proc );
     482:	09 81       	ldd	r16, Y+1	; 0x01
     484:	1a 81       	ldd	r17, Y+2	; 0x02
     486:	e9 81       	ldd	r30, Y+1	; 0x01
     488:	fa 81       	ldd	r31, Y+2	; 0x02
     48a:	80 81       	ld	r24, Z
     48c:	91 81       	ldd	r25, Z+1	; 0x01
     48e:	0e 94 be 0b 	call	0x177c	; 0x177c <proc_restart_isr>
     492:	f8 01       	movw	r30, r16
     494:	82 83       	std	Z+2, r24	; 0x02
}
     496:	0f 90       	pop	r0
     498:	0f 90       	pop	r0
     49a:	cf 91       	pop	r28
     49c:	df 91       	pop	r29
     49e:	1f 91       	pop	r17
     4a0:	0f 91       	pop	r16
     4a2:	08 95       	ret

000004a4 <scall_proc_stop>:
    return scarg.scall_ret;
}
//---------------------------------------------------------------------------------------------
//4
void scall_proc_stop( void * arg )
{
     4a4:	0f 93       	push	r16
     4a6:	1f 93       	push	r17
     4a8:	df 93       	push	r29
     4aa:	cf 93       	push	r28
     4ac:	00 d0       	rcall	.+0      	; 0x4ae <scall_proc_stop+0xa>
     4ae:	cd b7       	in	r28, 0x3d	; 61
     4b0:	de b7       	in	r29, 0x3e	; 62
     4b2:	9a 83       	std	Y+2, r25	; 0x02
     4b4:	89 83       	std	Y+1, r24	; 0x01
    ((proc_runtime_arg_t *)arg)->scall_ret = proc_stop_isr( ((proc_runtime_arg_t *)arg)->proc );
     4b6:	09 81       	ldd	r16, Y+1	; 0x01
     4b8:	1a 81       	ldd	r17, Y+2	; 0x02
     4ba:	e9 81       	ldd	r30, Y+1	; 0x01
     4bc:	fa 81       	ldd	r31, Y+2	; 0x02
     4be:	80 81       	ld	r24, Z
     4c0:	91 81       	ldd	r25, Z+1	; 0x01
     4c2:	0e 94 20 0c 	call	0x1840	; 0x1840 <proc_stop_isr>
     4c6:	f8 01       	movw	r30, r16
     4c8:	82 83       	std	Z+2, r24	; 0x02
}
     4ca:	0f 90       	pop	r0
     4cc:	0f 90       	pop	r0
     4ce:	cf 91       	pop	r28
     4d0:	df 91       	pop	r29
     4d2:	1f 91       	pop	r17
     4d4:	0f 91       	pop	r16
     4d6:	08 95       	ret

000004d8 <scall_proc_self_stop>:
}

//---------------------------------------------------------------------------------------------
//5
void scall_proc_self_stop( void * arg )
{
     4d8:	df 93       	push	r29
     4da:	cf 93       	push	r28
     4dc:	00 d0       	rcall	.+0      	; 0x4de <scall_proc_self_stop+0x6>
     4de:	00 d0       	rcall	.+0      	; 0x4e0 <scall_proc_self_stop+0x8>
     4e0:	cd b7       	in	r28, 0x3d	; 61
     4e2:	de b7       	in	r29, 0x3e	; 62
     4e4:	9c 83       	std	Y+4, r25	; 0x04
     4e6:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = kernel.sched.current_proc;
     4e8:	80 91 15 01 	lds	r24, 0x0115
     4ec:	90 91 16 01 	lds	r25, 0x0116
     4f0:	9a 83       	std	Y+2, r25	; 0x02
     4f2:	89 83       	std	Y+1, r24	; 0x01
    _proc_stop( proc );
     4f4:	89 81       	ldd	r24, Y+1	; 0x01
     4f6:	9a 81       	ldd	r25, Y+2	; 0x02
     4f8:	0e 94 07 0c 	call	0x180e	; 0x180e <_proc_stop>
}
     4fc:	0f 90       	pop	r0
     4fe:	0f 90       	pop	r0
     500:	0f 90       	pop	r0
     502:	0f 90       	pop	r0
     504:	cf 91       	pop	r28
     506:	df 91       	pop	r29
     508:	08 95       	ret

0000050a <scall_proc_terminate>:
}
//---------------------------------------------------------------------------------------------
//6
/// Останов процесса после выхода из pmain, для обертки proc_run_wrapper
void scall_proc_terminate( void * arg )
{
     50a:	df 93       	push	r29
     50c:	cf 93       	push	r28
     50e:	00 d0       	rcall	.+0      	; 0x510 <scall_proc_terminate+0x6>
     510:	00 d0       	rcall	.+0      	; 0x512 <scall_proc_terminate+0x8>
     512:	cd b7       	in	r28, 0x3d	; 61
     514:	de b7       	in	r29, 0x3e	; 62
     516:	9c 83       	std	Y+4, r25	; 0x04
     518:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = (proc_t *)arg;
     51a:	8b 81       	ldd	r24, Y+3	; 0x03
     51c:	9c 81       	ldd	r25, Y+4	; 0x04
     51e:	9a 83       	std	Y+2, r25	; 0x02
     520:	89 83       	std	Y+1, r24	; 0x01
    // Обрабатываем флаги
    // Нельзя выходить из pmain не освободив все захваченные ресурсы, за это процесс будет "убит"!
    if( proc->flags & PROC_FLG_HOLD ) proc->flags |= PROC_FLG_DEAD;
     522:	e9 81       	ldd	r30, Y+1	; 0x01
     524:	fa 81       	ldd	r31, Y+2	; 0x02
     526:	83 85       	ldd	r24, Z+11	; 0x0b
     528:	88 2f       	mov	r24, r24
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	84 70       	andi	r24, 0x04	; 4
     52e:	90 70       	andi	r25, 0x00	; 0
     530:	00 97       	sbiw	r24, 0x00	; 0
     532:	41 f0       	breq	.+16     	; 0x544 <scall_proc_terminate+0x3a>
     534:	e9 81       	ldd	r30, Y+1	; 0x01
     536:	fa 81       	ldd	r31, Y+2	; 0x02
     538:	83 85       	ldd	r24, Z+11	; 0x0b
     53a:	80 68       	ori	r24, 0x80	; 128
     53c:	e9 81       	ldd	r30, Y+1	; 0x01
     53e:	fa 81       	ldd	r31, Y+2	; 0x02
     540:	83 87       	std	Z+11, r24	; 0x0b
     542:	07 c0       	rjmp	.+14     	; 0x552 <scall_proc_terminate+0x48>
    // В противном случае - просто завершаем процесс
    else proc->flags |= PROC_FLG_END;
     544:	e9 81       	ldd	r30, Y+1	; 0x01
     546:	fa 81       	ldd	r31, Y+2	; 0x02
     548:	83 85       	ldd	r24, Z+11	; 0x0b
     54a:	80 64       	ori	r24, 0x40	; 64
     54c:	e9 81       	ldd	r30, Y+1	; 0x01
     54e:	fa 81       	ldd	r31, Y+2	; 0x02
     550:	83 87       	std	Z+11, r24	; 0x0b
    proc->flags &= ~(PROC_FLG_PRE_END|PROC_FLG_RUN);
     552:	e9 81       	ldd	r30, Y+1	; 0x01
     554:	fa 81       	ldd	r31, Y+2	; 0x02
     556:	83 85       	ldd	r24, Z+11	; 0x0b
     558:	8d 7d       	andi	r24, 0xDD	; 221
     55a:	e9 81       	ldd	r30, Y+1	; 0x01
     55c:	fa 81       	ldd	r31, Y+2	; 0x02
     55e:	83 87       	std	Z+11, r24	; 0x0b
    // Останов
    _proc_stop_( proc );
     560:	89 81       	ldd	r24, Y+1	; 0x01
     562:	9a 81       	ldd	r25, Y+2	; 0x02
     564:	0e 94 3f 07 	call	0xe7e	; 0xe7e <gitem_cut>
    // Выполнить перепланировку
    resched();
     568:	0e 94 fe 00 	call	0x1fc	; 0x1fc <resched>
}
     56c:	0f 90       	pop	r0
     56e:	0f 90       	pop	r0
     570:	0f 90       	pop	r0
     572:	0f 90       	pop	r0
     574:	cf 91       	pop	r28
     576:	df 91       	pop	r29
     578:	08 95       	ret

0000057a <proc_run_wrapper>:
void proc_run_wrapper( proc_t * proc )
{
     57a:	df 93       	push	r29
     57c:	cf 93       	push	r28
     57e:	00 d0       	rcall	.+0      	; 0x580 <proc_run_wrapper+0x6>
     580:	00 d0       	rcall	.+0      	; 0x582 <proc_run_wrapper+0x8>
     582:	00 d0       	rcall	.+0      	; 0x584 <proc_run_wrapper+0xa>
     584:	cd b7       	in	r28, 0x3d	; 61
     586:	de b7       	in	r29, 0x3e	; 62
     588:	9e 83       	std	Y+6, r25	; 0x06
     58a:	8d 83       	std	Y+5, r24	; 0x05
    //Атомарно читаем pmain и arg
    cli();
     58c:	f8 94       	cli
    code_t pmain = proc->pmain;
     58e:	ed 81       	ldd	r30, Y+5	; 0x05
     590:	fe 81       	ldd	r31, Y+6	; 0x06
     592:	82 a1       	ldd	r24, Z+34	; 0x22
     594:	93 a1       	ldd	r25, Z+35	; 0x23
     596:	9c 83       	std	Y+4, r25	; 0x04
     598:	8b 83       	std	Y+3, r24	; 0x03
    void * arg = proc->arg;
     59a:	ed 81       	ldd	r30, Y+5	; 0x05
     59c:	fe 81       	ldd	r31, Y+6	; 0x06
     59e:	80 a5       	ldd	r24, Z+40	; 0x28
     5a0:	91 a5       	ldd	r25, Z+41	; 0x29
     5a2:	9a 83       	std	Y+2, r25	; 0x02
     5a4:	89 83       	std	Y+1, r24	; 0x01
    sei();
     5a6:	78 94       	sei
    //Выполняем pmain
    pmain( arg );
     5a8:	89 81       	ldd	r24, Y+1	; 0x01
     5aa:	9a 81       	ldd	r25, Y+2	; 0x02
     5ac:	eb 81       	ldd	r30, Y+3	; 0x03
     5ae:	fc 81       	ldd	r31, Y+4	; 0x04
     5b0:	09 95       	icall
    // Завершаем процесс
    syscall(6,(void *)proc);
     5b2:	2d 81       	ldd	r18, Y+5	; 0x05
     5b4:	3e 81       	ldd	r19, Y+6	; 0x06
     5b6:	86 e0       	ldi	r24, 0x06	; 6
     5b8:	b9 01       	movw	r22, r18
     5ba:	0e 94 ba 01 	call	0x374	; 0x374 <syscall>
}
     5be:	26 96       	adiw	r28, 0x06	; 6
     5c0:	0f b6       	in	r0, 0x3f	; 63
     5c2:	f8 94       	cli
     5c4:	de bf       	out	0x3e, r29	; 62
     5c6:	0f be       	out	0x3f, r0	; 63
     5c8:	cd bf       	out	0x3d, r28	; 61
     5ca:	cf 91       	pop	r28
     5cc:	df 91       	pop	r29
     5ce:	08 95       	ret

000005d0 <scall_proc_flag_stop>:
//---------------------------------------------------------------------------------------------
//7
void scall_proc_flag_stop( void * arg )
{
     5d0:	df 93       	push	r29
     5d2:	cf 93       	push	r28
     5d4:	00 d0       	rcall	.+0      	; 0x5d6 <scall_proc_flag_stop+0x6>
     5d6:	cd b7       	in	r28, 0x3d	; 61
     5d8:	de b7       	in	r29, 0x3e	; 62
     5da:	9a 83       	std	Y+2, r25	; 0x02
     5dc:	89 83       	std	Y+1, r24	; 0x01
    _proc_flag_stop_isr( *((flag_t *)arg) );
     5de:	e9 81       	ldd	r30, Y+1	; 0x01
     5e0:	fa 81       	ldd	r31, Y+2	; 0x02
     5e2:	80 81       	ld	r24, Z
     5e4:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <_proc_flag_stop_isr>
}
     5e8:	0f 90       	pop	r0
     5ea:	0f 90       	pop	r0
     5ec:	cf 91       	pop	r28
     5ee:	df 91       	pop	r29
     5f0:	08 95       	ret

000005f2 <scall_sig_init>:
///=================================================================
///                         Сигналы
//8
void scall_sig_init( void * arg )
{
     5f2:	df 93       	push	r29
     5f4:	cf 93       	push	r28
     5f6:	00 d0       	rcall	.+0      	; 0x5f8 <scall_sig_init+0x6>
     5f8:	cd b7       	in	r28, 0x3d	; 61
     5fa:	de b7       	in	r29, 0x3e	; 62
     5fc:	9a 83       	std	Y+2, r25	; 0x02
     5fe:	89 83       	std	Y+1, r24	; 0x01
    sig_init_isr( (sig_t *)arg );
     600:	89 81       	ldd	r24, Y+1	; 0x01
     602:	9a 81       	ldd	r25, Y+2	; 0x02
     604:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <sig_init_isr>
}
     608:	0f 90       	pop	r0
     60a:	0f 90       	pop	r0
     60c:	cf 91       	pop	r28
     60e:	df 91       	pop	r29
     610:	08 95       	ret

00000612 <scall_sig_wait>:
    syscall( 8, (void *)sig );
}
//---------------------------------------------------------------------------------------------
//9
void scall_sig_wait( void * arg )
{
     612:	df 93       	push	r29
     614:	cf 93       	push	r28
     616:	00 d0       	rcall	.+0      	; 0x618 <scall_sig_wait+0x6>
     618:	cd b7       	in	r28, 0x3d	; 61
     61a:	de b7       	in	r29, 0x3e	; 62
     61c:	9a 83       	std	Y+2, r25	; 0x02
     61e:	89 83       	std	Y+1, r24	; 0x01
    sig_wait_stage_1_isr( (sig_t *)arg );
     620:	89 81       	ldd	r24, Y+1	; 0x01
     622:	9a 81       	ldd	r25, Y+2	; 0x02
     624:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <sig_wait_stage_1_isr>
}
     628:	0f 90       	pop	r0
     62a:	0f 90       	pop	r0
     62c:	cf 91       	pop	r28
     62e:	df 91       	pop	r29
     630:	08 95       	ret

00000632 <scall_sig_signal>:
    syscall( 7, (void *)&mask );/// Останов в случае необходимости
}
//---------------------------------------------------------------------------------------------
//10
void scall_sig_signal( void * arg )
{
     632:	df 93       	push	r29
     634:	cf 93       	push	r28
     636:	00 d0       	rcall	.+0      	; 0x638 <scall_sig_signal+0x6>
     638:	cd b7       	in	r28, 0x3d	; 61
     63a:	de b7       	in	r29, 0x3e	; 62
     63c:	9a 83       	std	Y+2, r25	; 0x02
     63e:	89 83       	std	Y+1, r24	; 0x01
    sig_signal_isr( (sig_t *)arg );
     640:	89 81       	ldd	r24, Y+1	; 0x01
     642:	9a 81       	ldd	r25, Y+2	; 0x02
     644:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <sig_signal_isr>
}
     648:	0f 90       	pop	r0
     64a:	0f 90       	pop	r0
     64c:	cf 91       	pop	r28
     64e:	df 91       	pop	r29
     650:	08 95       	ret

00000652 <scall_sig_broadcast>:
    syscall( 10, (void *)sig );
}
//---------------------------------------------------------------------------------------------
//11
void scall_sig_broadcast( void * arg )
{
     652:	df 93       	push	r29
     654:	cf 93       	push	r28
     656:	00 d0       	rcall	.+0      	; 0x658 <scall_sig_broadcast+0x6>
     658:	cd b7       	in	r28, 0x3d	; 61
     65a:	de b7       	in	r29, 0x3e	; 62
     65c:	9a 83       	std	Y+2, r25	; 0x02
     65e:	89 83       	std	Y+1, r24	; 0x01
    sig_broadcast_isr( (sig_t *)arg );
     660:	89 81       	ldd	r24, Y+1	; 0x01
     662:	9a 81       	ldd	r25, Y+2	; 0x02
     664:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <sig_broadcast_isr>
}
     668:	0f 90       	pop	r0
     66a:	0f 90       	pop	r0
     66c:	cf 91       	pop	r28
     66e:	df 91       	pop	r29
     670:	08 95       	ret

00000672 <scall_sem_init>:
}
///=================================================================
///                         Семафоры
//12
void scall_sem_init( void * arg )
{
     672:	df 93       	push	r29
     674:	cf 93       	push	r28
     676:	00 d0       	rcall	.+0      	; 0x678 <scall_sem_init+0x6>
     678:	cd b7       	in	r28, 0x3d	; 61
     67a:	de b7       	in	r29, 0x3e	; 62
     67c:	9a 83       	std	Y+2, r25	; 0x02
     67e:	89 83       	std	Y+1, r24	; 0x01
    sem_init_isr( ((sem_init_arg_t *)arg)->sem, ((sem_init_arg_t *)arg)->count );
     680:	e9 81       	ldd	r30, Y+1	; 0x01
     682:	fa 81       	ldd	r31, Y+2	; 0x02
     684:	80 81       	ld	r24, Z
     686:	91 81       	ldd	r25, Z+1	; 0x01
     688:	e9 81       	ldd	r30, Y+1	; 0x01
     68a:	fa 81       	ldd	r31, Y+2	; 0x02
     68c:	22 81       	ldd	r18, Z+2	; 0x02
     68e:	33 81       	ldd	r19, Z+3	; 0x03
     690:	b9 01       	movw	r22, r18
     692:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <sem_init_isr>
}
     696:	0f 90       	pop	r0
     698:	0f 90       	pop	r0
     69a:	cf 91       	pop	r28
     69c:	df 91       	pop	r29
     69e:	08 95       	ret

000006a0 <scall_sem_lock>:
    syscall( 12, (void *)&scarg );
}
//----------------------------------------------------------------------
//13
void scall_sem_lock( void * arg )
{
     6a0:	0f 93       	push	r16
     6a2:	1f 93       	push	r17
     6a4:	df 93       	push	r29
     6a6:	cf 93       	push	r28
     6a8:	00 d0       	rcall	.+0      	; 0x6aa <scall_sem_lock+0xa>
     6aa:	cd b7       	in	r28, 0x3d	; 61
     6ac:	de b7       	in	r29, 0x3e	; 62
     6ae:	9a 83       	std	Y+2, r25	; 0x02
     6b0:	89 83       	std	Y+1, r24	; 0x01
    ((sem_lock_arg_t *)arg)->scall_ret = _sem_lock( ((sem_lock_arg_t *)arg)->sem );
     6b2:	09 81       	ldd	r16, Y+1	; 0x01
     6b4:	1a 81       	ldd	r17, Y+2	; 0x02
     6b6:	e9 81       	ldd	r30, Y+1	; 0x01
     6b8:	fa 81       	ldd	r31, Y+2	; 0x02
     6ba:	80 81       	ld	r24, Z
     6bc:	91 81       	ldd	r25, Z+1	; 0x01
     6be:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <_sem_lock>
     6c2:	f8 01       	movw	r30, r16
     6c4:	82 83       	std	Z+2, r24	; 0x02
}
     6c6:	0f 90       	pop	r0
     6c8:	0f 90       	pop	r0
     6ca:	cf 91       	pop	r28
     6cc:	df 91       	pop	r29
     6ce:	1f 91       	pop	r17
     6d0:	0f 91       	pop	r16
     6d2:	08 95       	ret

000006d4 <scall_sem_unlock>:
    return scarg.scall_ret;
}
//----------------------------------------------------------------------
//14
void scall_sem_unlock( void * arg )
{
     6d4:	df 93       	push	r29
     6d6:	cf 93       	push	r28
     6d8:	00 d0       	rcall	.+0      	; 0x6da <scall_sem_unlock+0x6>
     6da:	cd b7       	in	r28, 0x3d	; 61
     6dc:	de b7       	in	r29, 0x3e	; 62
     6de:	9a 83       	std	Y+2, r25	; 0x02
     6e0:	89 83       	std	Y+1, r24	; 0x01
    _sem_unlock( (sem_t *)arg );
     6e2:	89 81       	ldd	r24, Y+1	; 0x01
     6e4:	9a 81       	ldd	r25, Y+2	; 0x02
     6e6:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <_sem_unlock>
}
     6ea:	0f 90       	pop	r0
     6ec:	0f 90       	pop	r0
     6ee:	cf 91       	pop	r28
     6f0:	df 91       	pop	r29
     6f2:	08 95       	ret

000006f4 <scall_mutex_init>:
}
///=================================================================
///                         Мьютексы
//15
void scall_mutex_init(void * arg)
{
     6f4:	df 93       	push	r29
     6f6:	cf 93       	push	r28
     6f8:	00 d0       	rcall	.+0      	; 0x6fa <scall_mutex_init+0x6>
     6fa:	cd b7       	in	r28, 0x3d	; 61
     6fc:	de b7       	in	r29, 0x3e	; 62
     6fe:	9a 83       	std	Y+2, r25	; 0x02
     700:	89 83       	std	Y+1, r24	; 0x01
    mutex_init_isr(
     702:	e9 81       	ldd	r30, Y+1	; 0x01
     704:	fa 81       	ldd	r31, Y+2	; 0x02
     706:	80 81       	ld	r24, Z
     708:	91 81       	ldd	r25, Z+1	; 0x01
     70a:	e9 81       	ldd	r30, Y+1	; 0x01
     70c:	fa 81       	ldd	r31, Y+2	; 0x02
     70e:	22 81       	ldd	r18, Z+2	; 0x02
     710:	62 2f       	mov	r22, r18
     712:	0e 94 57 09 	call	0x12ae	; 0x12ae <mutex_init_isr>
               ((mutex_init_arg_t *)arg)->mutex
#ifdef CONFIG_USE_HIGHEST_LOCKER
               ,((mutex_init_arg_t *)arg)->prio
#endif // CONFIG_USE_HIGHEST_LOCKER
               );
}
     716:	0f 90       	pop	r0
     718:	0f 90       	pop	r0
     71a:	cf 91       	pop	r28
     71c:	df 91       	pop	r29
     71e:	08 95       	ret

00000720 <scall_mutex_lock>:
    syscall( 15, (void *)&scarg );
}
//----------------------------------------------------------------------
//16
void scall_mutex_lock(void * arg)
{
     720:	0f 93       	push	r16
     722:	1f 93       	push	r17
     724:	df 93       	push	r29
     726:	cf 93       	push	r28
     728:	00 d0       	rcall	.+0      	; 0x72a <scall_mutex_lock+0xa>
     72a:	cd b7       	in	r28, 0x3d	; 61
     72c:	de b7       	in	r29, 0x3e	; 62
     72e:	9a 83       	std	Y+2, r25	; 0x02
     730:	89 83       	std	Y+1, r24	; 0x01
    ((mutex_lock_arg_t *)arg)->scall_ret = _mutex_lock( ((mutex_lock_arg_t *)arg)->mutex );
     732:	09 81       	ldd	r16, Y+1	; 0x01
     734:	1a 81       	ldd	r17, Y+2	; 0x02
     736:	e9 81       	ldd	r30, Y+1	; 0x01
     738:	fa 81       	ldd	r31, Y+2	; 0x02
     73a:	80 81       	ld	r24, Z
     73c:	91 81       	ldd	r25, Z+1	; 0x01
     73e:	0e 94 72 09 	call	0x12e4	; 0x12e4 <_mutex_lock>
     742:	f8 01       	movw	r30, r16
     744:	82 83       	std	Z+2, r24	; 0x02
}
     746:	0f 90       	pop	r0
     748:	0f 90       	pop	r0
     74a:	cf 91       	pop	r28
     74c:	df 91       	pop	r29
     74e:	1f 91       	pop	r17
     750:	0f 91       	pop	r16
     752:	08 95       	ret

00000754 <mutex_lock>:
bool_t mutex_lock( mutex_t * mutex )
{
     754:	df 93       	push	r29
     756:	cf 93       	push	r28
     758:	00 d0       	rcall	.+0      	; 0x75a <mutex_lock+0x6>
     75a:	00 d0       	rcall	.+0      	; 0x75c <mutex_lock+0x8>
     75c:	0f 92       	push	r0
     75e:	cd b7       	in	r28, 0x3d	; 61
     760:	de b7       	in	r29, 0x3e	; 62
     762:	9d 83       	std	Y+5, r25	; 0x05
     764:	8c 83       	std	Y+4, r24	; 0x04
    mutex_lock_arg_t scarg;
    scarg.mutex = mutex;
     766:	8c 81       	ldd	r24, Y+4	; 0x04
     768:	9d 81       	ldd	r25, Y+5	; 0x05
     76a:	9a 83       	std	Y+2, r25	; 0x02
     76c:	89 83       	std	Y+1, r24	; 0x01
    syscall( 16, (void *)&scarg );
     76e:	80 e1       	ldi	r24, 0x10	; 16
     770:	9e 01       	movw	r18, r28
     772:	2f 5f       	subi	r18, 0xFF	; 255
     774:	3f 4f       	sbci	r19, 0xFF	; 255
     776:	b9 01       	movw	r22, r18
     778:	0e 94 ba 01 	call	0x374	; 0x374 <syscall>
    return scarg.scall_ret;
     77c:	8b 81       	ldd	r24, Y+3	; 0x03
}
     77e:	0f 90       	pop	r0
     780:	0f 90       	pop	r0
     782:	0f 90       	pop	r0
     784:	0f 90       	pop	r0
     786:	0f 90       	pop	r0
     788:	cf 91       	pop	r28
     78a:	df 91       	pop	r29
     78c:	08 95       	ret

0000078e <scall_mutex_try_lock>:
// Захват
//----------------------------------------------------------------------
//17
void scall_mutex_try_lock(void * arg)
{
     78e:	0f 93       	push	r16
     790:	1f 93       	push	r17
     792:	df 93       	push	r29
     794:	cf 93       	push	r28
     796:	00 d0       	rcall	.+0      	; 0x798 <scall_mutex_try_lock+0xa>
     798:	cd b7       	in	r28, 0x3d	; 61
     79a:	de b7       	in	r29, 0x3e	; 62
     79c:	9a 83       	std	Y+2, r25	; 0x02
     79e:	89 83       	std	Y+1, r24	; 0x01
    ((mutex_lock_arg_t *)arg)->scall_ret = _mutex_try_lock( ((mutex_lock_arg_t *)arg)->mutex );
     7a0:	09 81       	ldd	r16, Y+1	; 0x01
     7a2:	1a 81       	ldd	r17, Y+2	; 0x02
     7a4:	e9 81       	ldd	r30, Y+1	; 0x01
     7a6:	fa 81       	ldd	r31, Y+2	; 0x02
     7a8:	80 81       	ld	r24, Z
     7aa:	91 81       	ldd	r25, Z+1	; 0x01
     7ac:	0e 94 ba 09 	call	0x1374	; 0x1374 <_mutex_try_lock>
     7b0:	f8 01       	movw	r30, r16
     7b2:	82 83       	std	Z+2, r24	; 0x02
}
     7b4:	0f 90       	pop	r0
     7b6:	0f 90       	pop	r0
     7b8:	cf 91       	pop	r28
     7ba:	df 91       	pop	r29
     7bc:	1f 91       	pop	r17
     7be:	0f 91       	pop	r16
     7c0:	08 95       	ret

000007c2 <mutex_try_lock>:
// Попытка захвата
bool_t mutex_try_lock( mutex_t * mutex )
{
     7c2:	df 93       	push	r29
     7c4:	cf 93       	push	r28
     7c6:	00 d0       	rcall	.+0      	; 0x7c8 <mutex_try_lock+0x6>
     7c8:	00 d0       	rcall	.+0      	; 0x7ca <mutex_try_lock+0x8>
     7ca:	0f 92       	push	r0
     7cc:	cd b7       	in	r28, 0x3d	; 61
     7ce:	de b7       	in	r29, 0x3e	; 62
     7d0:	9d 83       	std	Y+5, r25	; 0x05
     7d2:	8c 83       	std	Y+4, r24	; 0x04
    mutex_lock_arg_t scarg;
    scarg.mutex = mutex;
     7d4:	8c 81       	ldd	r24, Y+4	; 0x04
     7d6:	9d 81       	ldd	r25, Y+5	; 0x05
     7d8:	9a 83       	std	Y+2, r25	; 0x02
     7da:	89 83       	std	Y+1, r24	; 0x01
    syscall( 17, (void *)&scarg );
     7dc:	81 e1       	ldi	r24, 0x11	; 17
     7de:	9e 01       	movw	r18, r28
     7e0:	2f 5f       	subi	r18, 0xFF	; 255
     7e2:	3f 4f       	sbci	r19, 0xFF	; 255
     7e4:	b9 01       	movw	r22, r18
     7e6:	0e 94 ba 01 	call	0x374	; 0x374 <syscall>
    return scarg.scall_ret;
     7ea:	8b 81       	ldd	r24, Y+3	; 0x03
}
     7ec:	0f 90       	pop	r0
     7ee:	0f 90       	pop	r0
     7f0:	0f 90       	pop	r0
     7f2:	0f 90       	pop	r0
     7f4:	0f 90       	pop	r0
     7f6:	cf 91       	pop	r28
     7f8:	df 91       	pop	r29
     7fa:	08 95       	ret

000007fc <scall_mutex_unlock>:
//----------------------------------------------------------------------
//18
void scall_mutex_unlock(void * arg)
{
     7fc:	df 93       	push	r29
     7fe:	cf 93       	push	r28
     800:	00 d0       	rcall	.+0      	; 0x802 <scall_mutex_unlock+0x6>
     802:	cd b7       	in	r28, 0x3d	; 61
     804:	de b7       	in	r29, 0x3e	; 62
     806:	9a 83       	std	Y+2, r25	; 0x02
     808:	89 83       	std	Y+1, r24	; 0x01
    _mutex_unlock( (mutex_t *)arg );
     80a:	89 81       	ldd	r24, Y+1	; 0x01
     80c:	9a 81       	ldd	r25, Y+2	; 0x02
     80e:	0e 94 e6 09 	call	0x13cc	; 0x13cc <_mutex_unlock>
}
     812:	0f 90       	pop	r0
     814:	0f 90       	pop	r0
     816:	cf 91       	pop	r28
     818:	df 91       	pop	r29
     81a:	08 95       	ret

0000081c <mutex_unlock>:
// Освобождение
void mutex_unlock( mutex_t * mutex )
{
     81c:	df 93       	push	r29
     81e:	cf 93       	push	r28
     820:	00 d0       	rcall	.+0      	; 0x822 <mutex_unlock+0x6>
     822:	cd b7       	in	r28, 0x3d	; 61
     824:	de b7       	in	r29, 0x3e	; 62
     826:	9a 83       	std	Y+2, r25	; 0x02
     828:	89 83       	std	Y+1, r24	; 0x01
    syscall( 18, (void *)mutex );
     82a:	29 81       	ldd	r18, Y+1	; 0x01
     82c:	3a 81       	ldd	r19, Y+2	; 0x02
     82e:	82 e1       	ldi	r24, 0x12	; 18
     830:	b9 01       	movw	r22, r18
     832:	0e 94 ba 01 	call	0x374	; 0x374 <syscall>
}
     836:	0f 90       	pop	r0
     838:	0f 90       	pop	r0
     83a:	cf 91       	pop	r28
     83c:	df 91       	pop	r29
     83e:	08 95       	ret

00000840 <osbme_init_stack>:
*                                                                                        *
*****************************************************************************************/
#include <avr/io.h>
#include "../../osbme.h"
void * osbme_init_stack( void * top_of_stack, osbme_code_t code, void * arg )
{
     840:	df 93       	push	r29
     842:	cf 93       	push	r28
     844:	cd b7       	in	r28, 0x3d	; 61
     846:	de b7       	in	r29, 0x3e	; 62
     848:	2a 97       	sbiw	r28, 0x0a	; 10
     84a:	0f b6       	in	r0, 0x3f	; 63
     84c:	f8 94       	cli
     84e:	de bf       	out	0x3e, r29	; 62
     850:	0f be       	out	0x3f, r0	; 63
     852:	cd bf       	out	0x3d, r28	; 61
     854:	9e 83       	std	Y+6, r25	; 0x06
     856:	8d 83       	std	Y+5, r24	; 0x05
     858:	78 87       	std	Y+8, r23	; 0x08
     85a:	6f 83       	std	Y+7, r22	; 0x07
     85c:	5a 87       	std	Y+10, r21	; 0x0a
     85e:	49 87       	std	Y+9, r20	; 0x09
    char * tos = (char *)top_of_stack;
     860:	8d 81       	ldd	r24, Y+5	; 0x05
     862:	9e 81       	ldd	r25, Y+6	; 0x06
     864:	9c 83       	std	Y+4, r25	; 0x04
     866:	8b 83       	std	Y+3, r24	; 0x03
    //*tos-- = 0x11;
    //*tos-- = 0x22;
    //*tos-- = 0x33;

    // return address
    unsigned short tmp = (unsigned short)code;
     868:	8f 81       	ldd	r24, Y+7	; 0x07
     86a:	98 85       	ldd	r25, Y+8	; 0x08
     86c:	9a 83       	std	Y+2, r25	; 0x02
     86e:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (char)(tmp&(unsigned short)0x00ff);
     870:	89 81       	ldd	r24, Y+1	; 0x01
     872:	eb 81       	ldd	r30, Y+3	; 0x03
     874:	fc 81       	ldd	r31, Y+4	; 0x04
     876:	80 83       	st	Z, r24
     878:	8b 81       	ldd	r24, Y+3	; 0x03
     87a:	9c 81       	ldd	r25, Y+4	; 0x04
     87c:	01 97       	sbiw	r24, 0x01	; 1
     87e:	9c 83       	std	Y+4, r25	; 0x04
     880:	8b 83       	std	Y+3, r24	; 0x03
    tmp>>=8;
     882:	89 81       	ldd	r24, Y+1	; 0x01
     884:	9a 81       	ldd	r25, Y+2	; 0x02
     886:	89 2f       	mov	r24, r25
     888:	99 27       	eor	r25, r25
     88a:	9a 83       	std	Y+2, r25	; 0x02
     88c:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (char)(tmp&(unsigned short)0x00ff);
     88e:	89 81       	ldd	r24, Y+1	; 0x01
     890:	eb 81       	ldd	r30, Y+3	; 0x03
     892:	fc 81       	ldd	r31, Y+4	; 0x04
     894:	80 83       	st	Z, r24
     896:	8b 81       	ldd	r24, Y+3	; 0x03
     898:	9c 81       	ldd	r25, Y+4	; 0x04
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	9c 83       	std	Y+4, r25	; 0x04
     89e:	8b 83       	std	Y+3, r24	; 0x03

    // s
    *tos-- = 0x00;
     8a0:	eb 81       	ldd	r30, Y+3	; 0x03
     8a2:	fc 81       	ldd	r31, Y+4	; 0x04
     8a4:	10 82       	st	Z, r1
     8a6:	8b 81       	ldd	r24, Y+3	; 0x03
     8a8:	9c 81       	ldd	r25, Y+4	; 0x04
     8aa:	01 97       	sbiw	r24, 0x01	; 1
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x00;// r1 must B 0
     8b0:	eb 81       	ldd	r30, Y+3	; 0x03
     8b2:	fc 81       	ldd	r31, Y+4	; 0x04
     8b4:	10 82       	st	Z, r1
     8b6:	8b 81       	ldd	r24, Y+3	; 0x03
     8b8:	9c 81       	ldd	r25, Y+4	; 0x04
     8ba:	01 97       	sbiw	r24, 0x01	; 1
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x02;// r2
     8c0:	eb 81       	ldd	r30, Y+3	; 0x03
     8c2:	fc 81       	ldd	r31, Y+4	; 0x04
     8c4:	82 e0       	ldi	r24, 0x02	; 2
     8c6:	80 83       	st	Z, r24
     8c8:	8b 81       	ldd	r24, Y+3	; 0x03
     8ca:	9c 81       	ldd	r25, Y+4	; 0x04
     8cc:	01 97       	sbiw	r24, 0x01	; 1
     8ce:	9c 83       	std	Y+4, r25	; 0x04
     8d0:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x80;// SREG: enable interrupts
     8d2:	eb 81       	ldd	r30, Y+3	; 0x03
     8d4:	fc 81       	ldd	r31, Y+4	; 0x04
     8d6:	80 e8       	ldi	r24, 0x80	; 128
     8d8:	80 83       	st	Z, r24
     8da:	8b 81       	ldd	r24, Y+3	; 0x03
     8dc:	9c 81       	ldd	r25, Y+4	; 0x04
     8de:	01 97       	sbiw	r24, 0x01	; 1
     8e0:	9c 83       	std	Y+4, r25	; 0x04
     8e2:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x03;
     8e4:	eb 81       	ldd	r30, Y+3	; 0x03
     8e6:	fc 81       	ldd	r31, Y+4	; 0x04
     8e8:	83 e0       	ldi	r24, 0x03	; 3
     8ea:	80 83       	st	Z, r24
     8ec:	8b 81       	ldd	r24, Y+3	; 0x03
     8ee:	9c 81       	ldd	r25, Y+4	; 0x04
     8f0:	01 97       	sbiw	r24, 0x01	; 1
     8f2:	9c 83       	std	Y+4, r25	; 0x04
     8f4:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x04;
     8f6:	eb 81       	ldd	r30, Y+3	; 0x03
     8f8:	fc 81       	ldd	r31, Y+4	; 0x04
     8fa:	84 e0       	ldi	r24, 0x04	; 4
     8fc:	80 83       	st	Z, r24
     8fe:	8b 81       	ldd	r24, Y+3	; 0x03
     900:	9c 81       	ldd	r25, Y+4	; 0x04
     902:	01 97       	sbiw	r24, 0x01	; 1
     904:	9c 83       	std	Y+4, r25	; 0x04
     906:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x05;
     908:	eb 81       	ldd	r30, Y+3	; 0x03
     90a:	fc 81       	ldd	r31, Y+4	; 0x04
     90c:	85 e0       	ldi	r24, 0x05	; 5
     90e:	80 83       	st	Z, r24
     910:	8b 81       	ldd	r24, Y+3	; 0x03
     912:	9c 81       	ldd	r25, Y+4	; 0x04
     914:	01 97       	sbiw	r24, 0x01	; 1
     916:	9c 83       	std	Y+4, r25	; 0x04
     918:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x06;
     91a:	eb 81       	ldd	r30, Y+3	; 0x03
     91c:	fc 81       	ldd	r31, Y+4	; 0x04
     91e:	86 e0       	ldi	r24, 0x06	; 6
     920:	80 83       	st	Z, r24
     922:	8b 81       	ldd	r24, Y+3	; 0x03
     924:	9c 81       	ldd	r25, Y+4	; 0x04
     926:	01 97       	sbiw	r24, 0x01	; 1
     928:	9c 83       	std	Y+4, r25	; 0x04
     92a:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x07;
     92c:	eb 81       	ldd	r30, Y+3	; 0x03
     92e:	fc 81       	ldd	r31, Y+4	; 0x04
     930:	87 e0       	ldi	r24, 0x07	; 7
     932:	80 83       	st	Z, r24
     934:	8b 81       	ldd	r24, Y+3	; 0x03
     936:	9c 81       	ldd	r25, Y+4	; 0x04
     938:	01 97       	sbiw	r24, 0x01	; 1
     93a:	9c 83       	std	Y+4, r25	; 0x04
     93c:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x08;
     93e:	eb 81       	ldd	r30, Y+3	; 0x03
     940:	fc 81       	ldd	r31, Y+4	; 0x04
     942:	88 e0       	ldi	r24, 0x08	; 8
     944:	80 83       	st	Z, r24
     946:	8b 81       	ldd	r24, Y+3	; 0x03
     948:	9c 81       	ldd	r25, Y+4	; 0x04
     94a:	01 97       	sbiw	r24, 0x01	; 1
     94c:	9c 83       	std	Y+4, r25	; 0x04
     94e:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x09;
     950:	eb 81       	ldd	r30, Y+3	; 0x03
     952:	fc 81       	ldd	r31, Y+4	; 0x04
     954:	89 e0       	ldi	r24, 0x09	; 9
     956:	80 83       	st	Z, r24
     958:	8b 81       	ldd	r24, Y+3	; 0x03
     95a:	9c 81       	ldd	r25, Y+4	; 0x04
     95c:	01 97       	sbiw	r24, 0x01	; 1
     95e:	9c 83       	std	Y+4, r25	; 0x04
     960:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x10;
     962:	eb 81       	ldd	r30, Y+3	; 0x03
     964:	fc 81       	ldd	r31, Y+4	; 0x04
     966:	80 e1       	ldi	r24, 0x10	; 16
     968:	80 83       	st	Z, r24
     96a:	8b 81       	ldd	r24, Y+3	; 0x03
     96c:	9c 81       	ldd	r25, Y+4	; 0x04
     96e:	01 97       	sbiw	r24, 0x01	; 1
     970:	9c 83       	std	Y+4, r25	; 0x04
     972:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x11;
     974:	eb 81       	ldd	r30, Y+3	; 0x03
     976:	fc 81       	ldd	r31, Y+4	; 0x04
     978:	81 e1       	ldi	r24, 0x11	; 17
     97a:	80 83       	st	Z, r24
     97c:	8b 81       	ldd	r24, Y+3	; 0x03
     97e:	9c 81       	ldd	r25, Y+4	; 0x04
     980:	01 97       	sbiw	r24, 0x01	; 1
     982:	9c 83       	std	Y+4, r25	; 0x04
     984:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x12;
     986:	eb 81       	ldd	r30, Y+3	; 0x03
     988:	fc 81       	ldd	r31, Y+4	; 0x04
     98a:	82 e1       	ldi	r24, 0x12	; 18
     98c:	80 83       	st	Z, r24
     98e:	8b 81       	ldd	r24, Y+3	; 0x03
     990:	9c 81       	ldd	r25, Y+4	; 0x04
     992:	01 97       	sbiw	r24, 0x01	; 1
     994:	9c 83       	std	Y+4, r25	; 0x04
     996:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x13;
     998:	eb 81       	ldd	r30, Y+3	; 0x03
     99a:	fc 81       	ldd	r31, Y+4	; 0x04
     99c:	83 e1       	ldi	r24, 0x13	; 19
     99e:	80 83       	st	Z, r24
     9a0:	8b 81       	ldd	r24, Y+3	; 0x03
     9a2:	9c 81       	ldd	r25, Y+4	; 0x04
     9a4:	01 97       	sbiw	r24, 0x01	; 1
     9a6:	9c 83       	std	Y+4, r25	; 0x04
     9a8:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x14;
     9aa:	eb 81       	ldd	r30, Y+3	; 0x03
     9ac:	fc 81       	ldd	r31, Y+4	; 0x04
     9ae:	84 e1       	ldi	r24, 0x14	; 20
     9b0:	80 83       	st	Z, r24
     9b2:	8b 81       	ldd	r24, Y+3	; 0x03
     9b4:	9c 81       	ldd	r25, Y+4	; 0x04
     9b6:	01 97       	sbiw	r24, 0x01	; 1
     9b8:	9c 83       	std	Y+4, r25	; 0x04
     9ba:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x15;
     9bc:	eb 81       	ldd	r30, Y+3	; 0x03
     9be:	fc 81       	ldd	r31, Y+4	; 0x04
     9c0:	85 e1       	ldi	r24, 0x15	; 21
     9c2:	80 83       	st	Z, r24
     9c4:	8b 81       	ldd	r24, Y+3	; 0x03
     9c6:	9c 81       	ldd	r25, Y+4	; 0x04
     9c8:	01 97       	sbiw	r24, 0x01	; 1
     9ca:	9c 83       	std	Y+4, r25	; 0x04
     9cc:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x16;
     9ce:	eb 81       	ldd	r30, Y+3	; 0x03
     9d0:	fc 81       	ldd	r31, Y+4	; 0x04
     9d2:	86 e1       	ldi	r24, 0x16	; 22
     9d4:	80 83       	st	Z, r24
     9d6:	8b 81       	ldd	r24, Y+3	; 0x03
     9d8:	9c 81       	ldd	r25, Y+4	; 0x04
     9da:	01 97       	sbiw	r24, 0x01	; 1
     9dc:	9c 83       	std	Y+4, r25	; 0x04
     9de:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x17;
     9e0:	eb 81       	ldd	r30, Y+3	; 0x03
     9e2:	fc 81       	ldd	r31, Y+4	; 0x04
     9e4:	87 e1       	ldi	r24, 0x17	; 23
     9e6:	80 83       	st	Z, r24
     9e8:	8b 81       	ldd	r24, Y+3	; 0x03
     9ea:	9c 81       	ldd	r25, Y+4	; 0x04
     9ec:	01 97       	sbiw	r24, 0x01	; 1
     9ee:	9c 83       	std	Y+4, r25	; 0x04
     9f0:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x18;
     9f2:	eb 81       	ldd	r30, Y+3	; 0x03
     9f4:	fc 81       	ldd	r31, Y+4	; 0x04
     9f6:	88 e1       	ldi	r24, 0x18	; 24
     9f8:	80 83       	st	Z, r24
     9fa:	8b 81       	ldd	r24, Y+3	; 0x03
     9fc:	9c 81       	ldd	r25, Y+4	; 0x04
     9fe:	01 97       	sbiw	r24, 0x01	; 1
     a00:	9c 83       	std	Y+4, r25	; 0x04
     a02:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x19;
     a04:	eb 81       	ldd	r30, Y+3	; 0x03
     a06:	fc 81       	ldd	r31, Y+4	; 0x04
     a08:	89 e1       	ldi	r24, 0x19	; 25
     a0a:	80 83       	st	Z, r24
     a0c:	8b 81       	ldd	r24, Y+3	; 0x03
     a0e:	9c 81       	ldd	r25, Y+4	; 0x04
     a10:	01 97       	sbiw	r24, 0x01	; 1
     a12:	9c 83       	std	Y+4, r25	; 0x04
     a14:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x20;
     a16:	eb 81       	ldd	r30, Y+3	; 0x03
     a18:	fc 81       	ldd	r31, Y+4	; 0x04
     a1a:	80 e2       	ldi	r24, 0x20	; 32
     a1c:	80 83       	st	Z, r24
     a1e:	8b 81       	ldd	r24, Y+3	; 0x03
     a20:	9c 81       	ldd	r25, Y+4	; 0x04
     a22:	01 97       	sbiw	r24, 0x01	; 1
     a24:	9c 83       	std	Y+4, r25	; 0x04
     a26:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x21;
     a28:	eb 81       	ldd	r30, Y+3	; 0x03
     a2a:	fc 81       	ldd	r31, Y+4	; 0x04
     a2c:	81 e2       	ldi	r24, 0x21	; 33
     a2e:	80 83       	st	Z, r24
     a30:	8b 81       	ldd	r24, Y+3	; 0x03
     a32:	9c 81       	ldd	r25, Y+4	; 0x04
     a34:	01 97       	sbiw	r24, 0x01	; 1
     a36:	9c 83       	std	Y+4, r25	; 0x04
     a38:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x22;
     a3a:	eb 81       	ldd	r30, Y+3	; 0x03
     a3c:	fc 81       	ldd	r31, Y+4	; 0x04
     a3e:	82 e2       	ldi	r24, 0x22	; 34
     a40:	80 83       	st	Z, r24
     a42:	8b 81       	ldd	r24, Y+3	; 0x03
     a44:	9c 81       	ldd	r25, Y+4	; 0x04
     a46:	01 97       	sbiw	r24, 0x01	; 1
     a48:	9c 83       	std	Y+4, r25	; 0x04
     a4a:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x23;
     a4c:	eb 81       	ldd	r30, Y+3	; 0x03
     a4e:	fc 81       	ldd	r31, Y+4	; 0x04
     a50:	83 e2       	ldi	r24, 0x23	; 35
     a52:	80 83       	st	Z, r24
     a54:	8b 81       	ldd	r24, Y+3	; 0x03
     a56:	9c 81       	ldd	r25, Y+4	; 0x04
     a58:	01 97       	sbiw	r24, 0x01	; 1
     a5a:	9c 83       	std	Y+4, r25	; 0x04
     a5c:	8b 83       	std	Y+3, r24	; 0x03

    tmp = (unsigned short)arg;
     a5e:	89 85       	ldd	r24, Y+9	; 0x09
     a60:	9a 85       	ldd	r25, Y+10	; 0x0a
     a62:	9a 83       	std	Y+2, r25	; 0x02
     a64:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (char)(tmp&(unsigned short)0x00ff); // r24 LSByte of arg
     a66:	89 81       	ldd	r24, Y+1	; 0x01
     a68:	eb 81       	ldd	r30, Y+3	; 0x03
     a6a:	fc 81       	ldd	r31, Y+4	; 0x04
     a6c:	80 83       	st	Z, r24
     a6e:	8b 81       	ldd	r24, Y+3	; 0x03
     a70:	9c 81       	ldd	r25, Y+4	; 0x04
     a72:	01 97       	sbiw	r24, 0x01	; 1
     a74:	9c 83       	std	Y+4, r25	; 0x04
     a76:	8b 83       	std	Y+3, r24	; 0x03
    tmp>>=8;
     a78:	89 81       	ldd	r24, Y+1	; 0x01
     a7a:	9a 81       	ldd	r25, Y+2	; 0x02
     a7c:	89 2f       	mov	r24, r25
     a7e:	99 27       	eor	r25, r25
     a80:	9a 83       	std	Y+2, r25	; 0x02
     a82:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (char)(tmp&(unsigned short)0x00ff); // r25 MSByte of arg
     a84:	89 81       	ldd	r24, Y+1	; 0x01
     a86:	eb 81       	ldd	r30, Y+3	; 0x03
     a88:	fc 81       	ldd	r31, Y+4	; 0x04
     a8a:	80 83       	st	Z, r24
     a8c:	8b 81       	ldd	r24, Y+3	; 0x03
     a8e:	9c 81       	ldd	r25, Y+4	; 0x04
     a90:	01 97       	sbiw	r24, 0x01	; 1
     a92:	9c 83       	std	Y+4, r25	; 0x04
     a94:	8b 83       	std	Y+3, r24	; 0x03

    *tos-- = 0x26;
     a96:	eb 81       	ldd	r30, Y+3	; 0x03
     a98:	fc 81       	ldd	r31, Y+4	; 0x04
     a9a:	86 e2       	ldi	r24, 0x26	; 38
     a9c:	80 83       	st	Z, r24
     a9e:	8b 81       	ldd	r24, Y+3	; 0x03
     aa0:	9c 81       	ldd	r25, Y+4	; 0x04
     aa2:	01 97       	sbiw	r24, 0x01	; 1
     aa4:	9c 83       	std	Y+4, r25	; 0x04
     aa6:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x27;
     aa8:	eb 81       	ldd	r30, Y+3	; 0x03
     aaa:	fc 81       	ldd	r31, Y+4	; 0x04
     aac:	87 e2       	ldi	r24, 0x27	; 39
     aae:	80 83       	st	Z, r24
     ab0:	8b 81       	ldd	r24, Y+3	; 0x03
     ab2:	9c 81       	ldd	r25, Y+4	; 0x04
     ab4:	01 97       	sbiw	r24, 0x01	; 1
     ab6:	9c 83       	std	Y+4, r25	; 0x04
     ab8:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x28;
     aba:	eb 81       	ldd	r30, Y+3	; 0x03
     abc:	fc 81       	ldd	r31, Y+4	; 0x04
     abe:	88 e2       	ldi	r24, 0x28	; 40
     ac0:	80 83       	st	Z, r24
     ac2:	8b 81       	ldd	r24, Y+3	; 0x03
     ac4:	9c 81       	ldd	r25, Y+4	; 0x04
     ac6:	01 97       	sbiw	r24, 0x01	; 1
     ac8:	9c 83       	std	Y+4, r25	; 0x04
     aca:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x29;
     acc:	eb 81       	ldd	r30, Y+3	; 0x03
     ace:	fc 81       	ldd	r31, Y+4	; 0x04
     ad0:	89 e2       	ldi	r24, 0x29	; 41
     ad2:	80 83       	st	Z, r24
     ad4:	8b 81       	ldd	r24, Y+3	; 0x03
     ad6:	9c 81       	ldd	r25, Y+4	; 0x04
     ad8:	01 97       	sbiw	r24, 0x01	; 1
     ada:	9c 83       	std	Y+4, r25	; 0x04
     adc:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x30;
     ade:	eb 81       	ldd	r30, Y+3	; 0x03
     ae0:	fc 81       	ldd	r31, Y+4	; 0x04
     ae2:	80 e3       	ldi	r24, 0x30	; 48
     ae4:	80 83       	st	Z, r24
     ae6:	8b 81       	ldd	r24, Y+3	; 0x03
     ae8:	9c 81       	ldd	r25, Y+4	; 0x04
     aea:	01 97       	sbiw	r24, 0x01	; 1
     aec:	9c 83       	std	Y+4, r25	; 0x04
     aee:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x31;
     af0:	eb 81       	ldd	r30, Y+3	; 0x03
     af2:	fc 81       	ldd	r31, Y+4	; 0x04
     af4:	81 e3       	ldi	r24, 0x31	; 49
     af6:	80 83       	st	Z, r24
     af8:	8b 81       	ldd	r24, Y+3	; 0x03
     afa:	9c 81       	ldd	r25, Y+4	; 0x04
     afc:	01 97       	sbiw	r24, 0x01	; 1
     afe:	9c 83       	std	Y+4, r25	; 0x04
     b00:	8b 83       	std	Y+3, r24	; 0x03
#ifdef RAMPZ
    *tos-- = 0xff;
#endif
    return((void *)tos);
     b02:	8b 81       	ldd	r24, Y+3	; 0x03
     b04:	9c 81       	ldd	r25, Y+4	; 0x04
}
     b06:	2a 96       	adiw	r28, 0x0a	; 10
     b08:	0f b6       	in	r0, 0x3f	; 63
     b0a:	f8 94       	cli
     b0c:	de bf       	out	0x3e, r29	; 62
     b0e:	0f be       	out	0x3f, r0	; 63
     b10:	cd bf       	out	0x3d, r28	; 61
     b12:	cf 91       	pop	r28
     b14:	df 91       	pop	r29
     b16:	08 95       	ret

00000b18 <enter_crit_sec>:
    if( kernel.sched[core].nested_crit_sec == (count_t)0 )enable_interrupts();
}

#else
void enter_crit_sec(void)
{
     b18:	df 93       	push	r29
     b1a:	cf 93       	push	r28
     b1c:	cd b7       	in	r28, 0x3d	; 61
     b1e:	de b7       	in	r29, 0x3e	; 62
    disable_interrupts();
     b20:	0e 94 c4 00 	call	0x188	; 0x188 <disable_interrupts>
    kernel.sched.nested_crit_sec++;
     b24:	80 91 3d 01 	lds	r24, 0x013D
     b28:	90 91 3e 01 	lds	r25, 0x013E
     b2c:	01 96       	adiw	r24, 0x01	; 1
     b2e:	90 93 3e 01 	sts	0x013E, r25
     b32:	80 93 3d 01 	sts	0x013D, r24
}
     b36:	cf 91       	pop	r28
     b38:	df 91       	pop	r29
     b3a:	08 95       	ret

00000b3c <exit_crit_sec>:
void exit_crit_sec(void)
{
     b3c:	df 93       	push	r29
     b3e:	cf 93       	push	r28
     b40:	cd b7       	in	r28, 0x3d	; 61
     b42:	de b7       	in	r29, 0x3e	; 62
    if( kernel.sched.nested_crit_sec != (count_t)0 )kernel.sched.nested_crit_sec--;
     b44:	80 91 3d 01 	lds	r24, 0x013D
     b48:	90 91 3e 01 	lds	r25, 0x013E
     b4c:	00 97       	sbiw	r24, 0x00	; 0
     b4e:	49 f0       	breq	.+18     	; 0xb62 <exit_crit_sec+0x26>
     b50:	80 91 3d 01 	lds	r24, 0x013D
     b54:	90 91 3e 01 	lds	r25, 0x013E
     b58:	01 97       	sbiw	r24, 0x01	; 1
     b5a:	90 93 3e 01 	sts	0x013E, r25
     b5e:	80 93 3d 01 	sts	0x013D, r24
    if( kernel.sched.nested_crit_sec == (count_t)0 )enable_interrupts();
     b62:	80 91 3d 01 	lds	r24, 0x013D
     b66:	90 91 3e 01 	lds	r25, 0x013E
     b6a:	00 97       	sbiw	r24, 0x00	; 0
     b6c:	11 f4       	brne	.+4      	; 0xb72 <exit_crit_sec+0x36>
     b6e:	0e 94 cc 00 	call	0x198	; 0x198 <enable_interrupts>
}
     b72:	cf 91       	pop	r28
     b74:	df 91       	pop	r29
     b76:	08 95       	ret

00000b78 <gitem_init>:
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
// Инициация
void gitem_init(gitem_t * gitem, prio_t prio)
{
     b78:	df 93       	push	r29
     b7a:	cf 93       	push	r28
     b7c:	00 d0       	rcall	.+0      	; 0xb7e <gitem_init+0x6>
     b7e:	00 d0       	rcall	.+0      	; 0xb80 <gitem_init+0x8>
     b80:	0f 92       	push	r0
     b82:	cd b7       	in	r28, 0x3d	; 61
     b84:	de b7       	in	r29, 0x3e	; 62
     b86:	9c 83       	std	Y+4, r25	; 0x04
     b88:	8b 83       	std	Y+3, r24	; 0x03
     b8a:	6d 83       	std	Y+5, r22	; 0x05
    group_t * group = &gitem->grp;
     b8c:	8b 81       	ldd	r24, Y+3	; 0x03
     b8e:	9c 81       	ldd	r25, Y+4	; 0x04
     b90:	06 96       	adiw	r24, 0x06	; 6
     b92:	9a 83       	std	Y+2, r25	; 0x02
     b94:	89 83       	std	Y+1, r24	; 0x01
    item_init( (item_t *)gitem );
     b96:	8b 81       	ldd	r24, Y+3	; 0x03
     b98:	9c 81       	ldd	r25, Y+4	; 0x04
     b9a:	0e 94 a2 08 	call	0x1144	; 0x1144 <item_init>
    group_init( group, prio );
     b9e:	89 81       	ldd	r24, Y+1	; 0x01
     ba0:	9a 81       	ldd	r25, Y+2	; 0x02
     ba2:	6d 81       	ldd	r22, Y+5	; 0x05
     ba4:	0e 94 12 08 	call	0x1024	; 0x1024 <group_init>
    gitem->group = group;
     ba8:	eb 81       	ldd	r30, Y+3	; 0x03
     baa:	fc 81       	ldd	r31, Y+4	; 0x04
     bac:	89 81       	ldd	r24, Y+1	; 0x01
     bae:	9a 81       	ldd	r25, Y+2	; 0x02
     bb0:	95 83       	std	Z+5, r25	; 0x05
     bb2:	84 83       	std	Z+4, r24	; 0x04
}
     bb4:	0f 90       	pop	r0
     bb6:	0f 90       	pop	r0
     bb8:	0f 90       	pop	r0
     bba:	0f 90       	pop	r0
     bbc:	0f 90       	pop	r0
     bbe:	cf 91       	pop	r28
     bc0:	df 91       	pop	r29
     bc2:	08 95       	ret

00000bc4 <gitem_insert>:
// Вставить в список
void gitem_insert(gitem_t * gitem, xlist_t *xlist)
{
     bc4:	df 93       	push	r29
     bc6:	cf 93       	push	r28
     bc8:	cd b7       	in	r28, 0x3d	; 61
     bca:	de b7       	in	r29, 0x3e	; 62
     bcc:	28 97       	sbiw	r28, 0x08	; 8
     bce:	0f b6       	in	r0, 0x3f	; 63
     bd0:	f8 94       	cli
     bd2:	de bf       	out	0x3e, r29	; 62
     bd4:	0f be       	out	0x3f, r0	; 63
     bd6:	cd bf       	out	0x3d, r28	; 61
     bd8:	9e 83       	std	Y+6, r25	; 0x06
     bda:	8d 83       	std	Y+5, r24	; 0x05
     bdc:	78 87       	std	Y+8, r23	; 0x08
     bde:	6f 83       	std	Y+7, r22	; 0x07
    prio_t prio = gitem->group->prio;
     be0:	ed 81       	ldd	r30, Y+5	; 0x05
     be2:	fe 81       	ldd	r31, Y+6	; 0x06
     be4:	04 80       	ldd	r0, Z+4	; 0x04
     be6:	f5 81       	ldd	r31, Z+5	; 0x05
     be8:	e0 2d       	mov	r30, r0
     bea:	82 81       	ldd	r24, Z+2	; 0x02
     bec:	8c 83       	std	Y+4, r24	; 0x04
    index_t mask = ((index_t)1)<<prio;
     bee:	8c 81       	ldd	r24, Y+4	; 0x04
     bf0:	28 2f       	mov	r18, r24
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	02 c0       	rjmp	.+4      	; 0xbfe <gitem_insert+0x3a>
     bfa:	88 0f       	add	r24, r24
     bfc:	99 1f       	adc	r25, r25
     bfe:	2a 95       	dec	r18
     c00:	e2 f7       	brpl	.-8      	; 0xbfa <gitem_insert+0x36>
     c02:	8b 83       	std	Y+3, r24	; 0x03
    item_t ** head = (item_t **)xlist + prio;
     c04:	2f 81       	ldd	r18, Y+7	; 0x07
     c06:	38 85       	ldd	r19, Y+8	; 0x08
     c08:	8c 81       	ldd	r24, Y+4	; 0x04
     c0a:	88 2f       	mov	r24, r24
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	88 0f       	add	r24, r24
     c10:	99 1f       	adc	r25, r25
     c12:	82 0f       	add	r24, r18
     c14:	93 1f       	adc	r25, r19
     c16:	9a 83       	std	Y+2, r25	; 0x02
     c18:	89 83       	std	Y+1, r24	; 0x01
    // Пуста ли часть списка с таким приоритетом
    if( ( xlist->index )& mask)
     c1a:	ef 81       	ldd	r30, Y+7	; 0x07
     c1c:	f8 85       	ldd	r31, Y+8	; 0x08
     c1e:	90 89       	ldd	r25, Z+16	; 0x10
     c20:	8b 81       	ldd	r24, Y+3	; 0x03
     c22:	89 23       	and	r24, r25
     c24:	88 23       	and	r24, r24
     c26:	51 f0       	breq	.+20     	; 0xc3c <gitem_insert+0x78>
    {
        //Не пуста вставляем туда gitem
        item_insert( (item_t *)gitem, *head );
     c28:	8d 81       	ldd	r24, Y+5	; 0x05
     c2a:	9e 81       	ldd	r25, Y+6	; 0x06
     c2c:	e9 81       	ldd	r30, Y+1	; 0x01
     c2e:	fa 81       	ldd	r31, Y+2	; 0x02
     c30:	20 81       	ld	r18, Z
     c32:	31 81       	ldd	r19, Z+1	; 0x01
     c34:	b9 01       	movw	r22, r18
     c36:	0e 94 ba 08 	call	0x1174	; 0x1174 <item_insert>
     c3a:	0e c0       	rjmp	.+28     	; 0xc58 <gitem_insert+0x94>
    }
    else
    {
        // Пуста, gitem будет головой
        *head = (item_t *)gitem;
     c3c:	8d 81       	ldd	r24, Y+5	; 0x05
     c3e:	9e 81       	ldd	r25, Y+6	; 0x06
     c40:	e9 81       	ldd	r30, Y+1	; 0x01
     c42:	fa 81       	ldd	r31, Y+2	; 0x02
     c44:	91 83       	std	Z+1, r25	; 0x01
     c46:	80 83       	st	Z, r24
        xlist->index |= mask;
     c48:	ef 81       	ldd	r30, Y+7	; 0x07
     c4a:	f8 85       	ldd	r31, Y+8	; 0x08
     c4c:	90 89       	ldd	r25, Z+16	; 0x10
     c4e:	8b 81       	ldd	r24, Y+3	; 0x03
     c50:	89 2b       	or	r24, r25
     c52:	ef 81       	ldd	r30, Y+7	; 0x07
     c54:	f8 85       	ldd	r31, Y+8	; 0x08
     c56:	80 8b       	std	Z+16, r24	; 0x10
    }
    gitem->group->link = (void *)xlist;
     c58:	ed 81       	ldd	r30, Y+5	; 0x05
     c5a:	fe 81       	ldd	r31, Y+6	; 0x06
     c5c:	04 80       	ldd	r0, Z+4	; 0x04
     c5e:	f5 81       	ldd	r31, Z+5	; 0x05
     c60:	e0 2d       	mov	r30, r0
     c62:	8f 81       	ldd	r24, Y+7	; 0x07
     c64:	98 85       	ldd	r25, Y+8	; 0x08
     c66:	91 83       	std	Z+1, r25	; 0x01
     c68:	80 83       	st	Z, r24
}
     c6a:	28 96       	adiw	r28, 0x08	; 8
     c6c:	0f b6       	in	r0, 0x3f	; 63
     c6e:	f8 94       	cli
     c70:	de bf       	out	0x3e, r29	; 62
     c72:	0f be       	out	0x3f, r0	; 63
     c74:	cd bf       	out	0x3d, r28	; 61
     c76:	cf 91       	pop	r28
     c78:	df 91       	pop	r29
     c7a:	08 95       	ret

00000c7c <gitem_insert_group>:
 при этом gitem->group переходит в Пул

 Ограничения на gitem - он не должен быть сгруппирован в момент встаки в группу.
*/
void gitem_insert_group(gitem_t * gitem, xlist_t *xlist)
{
     c7c:	df 93       	push	r29
     c7e:	cf 93       	push	r28
     c80:	cd b7       	in	r28, 0x3d	; 61
     c82:	de b7       	in	r29, 0x3e	; 62
     c84:	2a 97       	sbiw	r28, 0x0a	; 10
     c86:	0f b6       	in	r0, 0x3f	; 63
     c88:	f8 94       	cli
     c8a:	de bf       	out	0x3e, r29	; 62
     c8c:	0f be       	out	0x3f, r0	; 63
     c8e:	cd bf       	out	0x3d, r28	; 61
     c90:	98 87       	std	Y+8, r25	; 0x08
     c92:	8f 83       	std	Y+7, r24	; 0x07
     c94:	7a 87       	std	Y+10, r23	; 0x0a
     c96:	69 87       	std	Y+9, r22	; 0x09
    prio_t prio = gitem->group->prio;
     c98:	ef 81       	ldd	r30, Y+7	; 0x07
     c9a:	f8 85       	ldd	r31, Y+8	; 0x08
     c9c:	04 80       	ldd	r0, Z+4	; 0x04
     c9e:	f5 81       	ldd	r31, Z+5	; 0x05
     ca0:	e0 2d       	mov	r30, r0
     ca2:	82 81       	ldd	r24, Z+2	; 0x02
     ca4:	8e 83       	std	Y+6, r24	; 0x06
    index_t mask = ((index_t)1)<<prio;
     ca6:	8e 81       	ldd	r24, Y+6	; 0x06
     ca8:	28 2f       	mov	r18, r24
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	02 c0       	rjmp	.+4      	; 0xcb6 <gitem_insert_group+0x3a>
     cb2:	88 0f       	add	r24, r24
     cb4:	99 1f       	adc	r25, r25
     cb6:	2a 95       	dec	r18
     cb8:	e2 f7       	brpl	.-8      	; 0xcb2 <gitem_insert_group+0x36>
     cba:	8d 83       	std	Y+5, r24	; 0x05
    item_t ** head = (item_t **)xlist + prio;
     cbc:	29 85       	ldd	r18, Y+9	; 0x09
     cbe:	3a 85       	ldd	r19, Y+10	; 0x0a
     cc0:	8e 81       	ldd	r24, Y+6	; 0x06
     cc2:	88 2f       	mov	r24, r24
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	88 0f       	add	r24, r24
     cc8:	99 1f       	adc	r25, r25
     cca:	82 0f       	add	r24, r18
     ccc:	93 1f       	adc	r25, r19
     cce:	9c 83       	std	Y+4, r25	; 0x04
     cd0:	8b 83       	std	Y+3, r24	; 0x03
    group_t * group = gitem->group;
     cd2:	ef 81       	ldd	r30, Y+7	; 0x07
     cd4:	f8 85       	ldd	r31, Y+8	; 0x08
     cd6:	84 81       	ldd	r24, Z+4	; 0x04
     cd8:	95 81       	ldd	r25, Z+5	; 0x05
     cda:	9a 83       	std	Y+2, r25	; 0x02
     cdc:	89 83       	std	Y+1, r24	; 0x01
    // Пуста ли часть списка с таким приоритетом
    if( ( xlist->index )& mask)
     cde:	e9 85       	ldd	r30, Y+9	; 0x09
     ce0:	fa 85       	ldd	r31, Y+10	; 0x0a
     ce2:	90 89       	ldd	r25, Z+16	; 0x10
     ce4:	8d 81       	ldd	r24, Y+5	; 0x05
     ce6:	89 23       	and	r24, r25
     ce8:	88 23       	and	r24, r24
     cea:	31 f1       	breq	.+76     	; 0xd38 <gitem_insert_group+0xbc>
    {
        //Не пуста вставляем туда gitem
        item_insert((item_t *)gitem, *head );
     cec:	8f 81       	ldd	r24, Y+7	; 0x07
     cee:	98 85       	ldd	r25, Y+8	; 0x08
     cf0:	eb 81       	ldd	r30, Y+3	; 0x03
     cf2:	fc 81       	ldd	r31, Y+4	; 0x04
     cf4:	20 81       	ld	r18, Z
     cf6:	31 81       	ldd	r19, Z+1	; 0x01
     cf8:	b9 01       	movw	r22, r18
     cfa:	0e 94 ba 08 	call	0x1174	; 0x1174 <item_insert>
        //Передаем старую группу в пул
        group_push(group);
     cfe:	89 81       	ldd	r24, Y+1	; 0x01
     d00:	9a 81       	ldd	r25, Y+2	; 0x02
     d02:	0e 94 2f 08 	call	0x105e	; 0x105e <group_push>
        //назначаем новую группу - ту, в которой голова
        group = ((gitem_t *)*head)->group;
     d06:	eb 81       	ldd	r30, Y+3	; 0x03
     d08:	fc 81       	ldd	r31, Y+4	; 0x04
     d0a:	80 81       	ld	r24, Z
     d0c:	91 81       	ldd	r25, Z+1	; 0x01
     d0e:	fc 01       	movw	r30, r24
     d10:	84 81       	ldd	r24, Z+4	; 0x04
     d12:	95 81       	ldd	r25, Z+5	; 0x05
     d14:	9a 83       	std	Y+2, r25	; 0x02
     d16:	89 83       	std	Y+1, r24	; 0x01
        gitem->group = group;
     d18:	ef 81       	ldd	r30, Y+7	; 0x07
     d1a:	f8 85       	ldd	r31, Y+8	; 0x08
     d1c:	89 81       	ldd	r24, Y+1	; 0x01
     d1e:	9a 81       	ldd	r25, Y+2	; 0x02
     d20:	95 83       	std	Z+5, r25	; 0x05
     d22:	84 83       	std	Z+4, r24	; 0x04
        //количество элементов в группе увеличилось на 1
        group->el_num++;
     d24:	e9 81       	ldd	r30, Y+1	; 0x01
     d26:	fa 81       	ldd	r31, Y+2	; 0x02
     d28:	83 81       	ldd	r24, Z+3	; 0x03
     d2a:	94 81       	ldd	r25, Z+4	; 0x04
     d2c:	01 96       	adiw	r24, 0x01	; 1
     d2e:	e9 81       	ldd	r30, Y+1	; 0x01
     d30:	fa 81       	ldd	r31, Y+2	; 0x02
     d32:	94 83       	std	Z+4, r25	; 0x04
     d34:	83 83       	std	Z+3, r24	; 0x03
     d36:	14 c0       	rjmp	.+40     	; 0xd60 <gitem_insert_group+0xe4>
    }
    else
    {
        // Пуста, gitem будет головой
        *head = (item_t *)gitem;
     d38:	8f 81       	ldd	r24, Y+7	; 0x07
     d3a:	98 85       	ldd	r25, Y+8	; 0x08
     d3c:	eb 81       	ldd	r30, Y+3	; 0x03
     d3e:	fc 81       	ldd	r31, Y+4	; 0x04
     d40:	91 83       	std	Z+1, r25	; 0x01
     d42:	80 83       	st	Z, r24
        xlist->index |= mask;
     d44:	e9 85       	ldd	r30, Y+9	; 0x09
     d46:	fa 85       	ldd	r31, Y+10	; 0x0a
     d48:	90 89       	ldd	r25, Z+16	; 0x10
     d4a:	8d 81       	ldd	r24, Y+5	; 0x05
     d4c:	89 2b       	or	r24, r25
     d4e:	e9 85       	ldd	r30, Y+9	; 0x09
     d50:	fa 85       	ldd	r31, Y+10	; 0x0a
     d52:	80 8b       	std	Z+16, r24	; 0x10
        group->link = (void *)xlist;
     d54:	e9 81       	ldd	r30, Y+1	; 0x01
     d56:	fa 81       	ldd	r31, Y+2	; 0x02
     d58:	89 85       	ldd	r24, Y+9	; 0x09
     d5a:	9a 85       	ldd	r25, Y+10	; 0x0a
     d5c:	91 83       	std	Z+1, r25	; 0x01
     d5e:	80 83       	st	Z, r24
    }
}
     d60:	2a 96       	adiw	r28, 0x0a	; 10
     d62:	0f b6       	in	r0, 0x3f	; 63
     d64:	f8 94       	cli
     d66:	de bf       	out	0x3e, r29	; 62
     d68:	0f be       	out	0x3f, r0	; 63
     d6a:	cd bf       	out	0x3d, r28	; 61
     d6c:	cf 91       	pop	r28
     d6e:	df 91       	pop	r29
     d70:	08 95       	ret

00000d72 <gitem_fast_cut>:
// Быстро вырезать из списка (не обнуляется указатель gitem->group->link)
void gitem_fast_cut(gitem_t * gitem)
{
     d72:	df 93       	push	r29
     d74:	cf 93       	push	r28
     d76:	00 d0       	rcall	.+0      	; 0xd78 <gitem_fast_cut+0x6>
     d78:	00 d0       	rcall	.+0      	; 0xd7a <gitem_fast_cut+0x8>
     d7a:	0f 92       	push	r0
     d7c:	cd b7       	in	r28, 0x3d	; 61
     d7e:	de b7       	in	r29, 0x3e	; 62
     d80:	9d 83       	std	Y+5, r25	; 0x05
     d82:	8c 83       	std	Y+4, r24	; 0x04
    prio_t prio = gitem->group->prio;
     d84:	ec 81       	ldd	r30, Y+4	; 0x04
     d86:	fd 81       	ldd	r31, Y+5	; 0x05
     d88:	04 80       	ldd	r0, Z+4	; 0x04
     d8a:	f5 81       	ldd	r31, Z+5	; 0x05
     d8c:	e0 2d       	mov	r30, r0
     d8e:	82 81       	ldd	r24, Z+2	; 0x02
     d90:	8b 83       	std	Y+3, r24	; 0x03
    xlist_t * xlist = (xlist_t *)gitem->group->link;
     d92:	ec 81       	ldd	r30, Y+4	; 0x04
     d94:	fd 81       	ldd	r31, Y+5	; 0x05
     d96:	04 80       	ldd	r0, Z+4	; 0x04
     d98:	f5 81       	ldd	r31, Z+5	; 0x05
     d9a:	e0 2d       	mov	r30, r0
     d9c:	80 81       	ld	r24, Z
     d9e:	91 81       	ldd	r25, Z+1	; 0x01
     da0:	9a 83       	std	Y+2, r25	; 0x02
     da2:	89 83       	std	Y+1, r24	; 0x01
    // Является ли эта часть списка группированной?
    if( gitem->group->el_num > (count_t)1 )
     da4:	ec 81       	ldd	r30, Y+4	; 0x04
     da6:	fd 81       	ldd	r31, Y+5	; 0x05
     da8:	04 80       	ldd	r0, Z+4	; 0x04
     daa:	f5 81       	ldd	r31, Z+5	; 0x05
     dac:	e0 2d       	mov	r30, r0
     dae:	83 81       	ldd	r24, Z+3	; 0x03
     db0:	94 81       	ldd	r25, Z+4	; 0x04
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	91 05       	cpc	r25, r1
     db6:	b8 f0       	brcs	.+46     	; 0xde6 <gitem_fast_cut+0x74>
    {
        //Группированная часть списка, будем вырезать из группы с выделением новой группы из Пула
        // В текущей группе стало на 1 элемент меньше
        gitem->group->el_num--;
     db8:	ec 81       	ldd	r30, Y+4	; 0x04
     dba:	fd 81       	ldd	r31, Y+5	; 0x05
     dbc:	04 80       	ldd	r0, Z+4	; 0x04
     dbe:	f5 81       	ldd	r31, Z+5	; 0x05
     dc0:	e0 2d       	mov	r30, r0
     dc2:	83 81       	ldd	r24, Z+3	; 0x03
     dc4:	94 81       	ldd	r25, Z+4	; 0x04
     dc6:	01 97       	sbiw	r24, 0x01	; 1
     dc8:	94 83       	std	Z+4, r25	; 0x04
     dca:	83 83       	std	Z+3, r24	; 0x03
        //выделяем новую группу
        gitem->group = group_pop();
     dcc:	0e 94 49 08 	call	0x1092	; 0x1092 <group_pop>
     dd0:	ec 81       	ldd	r30, Y+4	; 0x04
     dd2:	fd 81       	ldd	r31, Y+5	; 0x05
     dd4:	95 83       	std	Z+5, r25	; 0x05
     dd6:	84 83       	std	Z+4, r24	; 0x04
        // Правильный приоритет, количество элементов в группе, выделенной из пула должно быть равно 1
        gitem->group->prio = (prio_t)prio;
     dd8:	ec 81       	ldd	r30, Y+4	; 0x04
     dda:	fd 81       	ldd	r31, Y+5	; 0x05
     ddc:	04 80       	ldd	r0, Z+4	; 0x04
     dde:	f5 81       	ldd	r31, Z+5	; 0x05
     de0:	e0 2d       	mov	r30, r0
     de2:	8b 81       	ldd	r24, Y+3	; 0x03
     de4:	82 83       	std	Z+2, r24	; 0x02
    }
    //Является ли элемент единственным в своей части списка?
    if( ((item_t *)gitem)->next == (item_t *)gitem )
     de6:	ec 81       	ldd	r30, Y+4	; 0x04
     de8:	fd 81       	ldd	r31, Y+5	; 0x05
     dea:	20 81       	ld	r18, Z
     dec:	31 81       	ldd	r19, Z+1	; 0x01
     dee:	8c 81       	ldd	r24, Y+4	; 0x04
     df0:	9d 81       	ldd	r25, Y+5	; 0x05
     df2:	28 17       	cp	r18, r24
     df4:	39 07       	cpc	r19, r25
     df6:	09 f5       	brne	.+66     	; 0xe3a <gitem_fast_cut+0xc8>
    {
        // Да, является!
        xlist->item[prio] = (item_t *)0;
     df8:	8b 81       	ldd	r24, Y+3	; 0x03
     dfa:	88 2f       	mov	r24, r24
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	29 81       	ldd	r18, Y+1	; 0x01
     e00:	3a 81       	ldd	r19, Y+2	; 0x02
     e02:	88 0f       	add	r24, r24
     e04:	99 1f       	adc	r25, r25
     e06:	f9 01       	movw	r30, r18
     e08:	e8 0f       	add	r30, r24
     e0a:	f9 1f       	adc	r31, r25
     e0c:	11 82       	std	Z+1, r1	; 0x01
     e0e:	10 82       	st	Z, r1
        xlist->index &= ~(((index_t)1)<<prio);
     e10:	e9 81       	ldd	r30, Y+1	; 0x01
     e12:	fa 81       	ldd	r31, Y+2	; 0x02
     e14:	80 89       	ldd	r24, Z+16	; 0x10
     e16:	48 2f       	mov	r20, r24
     e18:	8b 81       	ldd	r24, Y+3	; 0x03
     e1a:	28 2f       	mov	r18, r24
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	02 2e       	mov	r0, r18
     e24:	02 c0       	rjmp	.+4      	; 0xe2a <gitem_fast_cut+0xb8>
     e26:	88 0f       	add	r24, r24
     e28:	99 1f       	adc	r25, r25
     e2a:	0a 94       	dec	r0
     e2c:	e2 f7       	brpl	.-8      	; 0xe26 <gitem_fast_cut+0xb4>
     e2e:	80 95       	com	r24
     e30:	84 23       	and	r24, r20
     e32:	e9 81       	ldd	r30, Y+1	; 0x01
     e34:	fa 81       	ldd	r31, Y+2	; 0x02
     e36:	80 8b       	std	Z+16, r24	; 0x10
     e38:	1a c0       	rjmp	.+52     	; 0xe6e <gitem_fast_cut+0xfc>
    }
    else
    {
        // Нет, не является!
        // Является ли элемент головой своей части списка?
        if( xlist->item[(prio_t)prio] == (item_t *)gitem )
     e3a:	8b 81       	ldd	r24, Y+3	; 0x03
     e3c:	88 2f       	mov	r24, r24
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	29 81       	ldd	r18, Y+1	; 0x01
     e42:	3a 81       	ldd	r19, Y+2	; 0x02
     e44:	88 0f       	add	r24, r24
     e46:	99 1f       	adc	r25, r25
     e48:	f9 01       	movw	r30, r18
     e4a:	e8 0f       	add	r30, r24
     e4c:	f9 1f       	adc	r31, r25
     e4e:	20 81       	ld	r18, Z
     e50:	31 81       	ldd	r19, Z+1	; 0x01
     e52:	8c 81       	ldd	r24, Y+4	; 0x04
     e54:	9d 81       	ldd	r25, Y+5	; 0x05
     e56:	28 17       	cp	r18, r24
     e58:	39 07       	cpc	r19, r25
     e5a:	29 f4       	brne	.+10     	; 0xe66 <gitem_fast_cut+0xf4>
        {
            // Является, список надо переключить
            xlist_switch( xlist, prio );
     e5c:	89 81       	ldd	r24, Y+1	; 0x01
     e5e:	9a 81       	ldd	r25, Y+2	; 0x02
     e60:	6b 81       	ldd	r22, Y+3	; 0x03
     e62:	0e 94 67 10 	call	0x20ce	; 0x20ce <xlist_switch>
        }
        // Собственно - вырезаем элемент
        item_cut( (item_t *)gitem );
     e66:	8c 81       	ldd	r24, Y+4	; 0x04
     e68:	9d 81       	ldd	r25, Y+5	; 0x05
     e6a:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <item_cut>
    }
}
     e6e:	0f 90       	pop	r0
     e70:	0f 90       	pop	r0
     e72:	0f 90       	pop	r0
     e74:	0f 90       	pop	r0
     e76:	0f 90       	pop	r0
     e78:	cf 91       	pop	r28
     e7a:	df 91       	pop	r29
     e7c:	08 95       	ret

00000e7e <gitem_cut>:
// Вырезать из списка
void gitem_cut(gitem_t * gitem)
{
     e7e:	df 93       	push	r29
     e80:	cf 93       	push	r28
     e82:	00 d0       	rcall	.+0      	; 0xe84 <gitem_cut+0x6>
     e84:	cd b7       	in	r28, 0x3d	; 61
     e86:	de b7       	in	r29, 0x3e	; 62
     e88:	9a 83       	std	Y+2, r25	; 0x02
     e8a:	89 83       	std	Y+1, r24	; 0x01
    gitem_fast_cut( gitem );
     e8c:	89 81       	ldd	r24, Y+1	; 0x01
     e8e:	9a 81       	ldd	r25, Y+2	; 0x02
     e90:	0e 94 b9 06 	call	0xd72	; 0xd72 <gitem_fast_cut>
    gitem->group->link = (void *)0;
     e94:	e9 81       	ldd	r30, Y+1	; 0x01
     e96:	fa 81       	ldd	r31, Y+2	; 0x02
     e98:	04 80       	ldd	r0, Z+4	; 0x04
     e9a:	f5 81       	ldd	r31, Z+5	; 0x05
     e9c:	e0 2d       	mov	r30, r0
     e9e:	11 82       	std	Z+1, r1	; 0x01
     ea0:	10 82       	st	Z, r1
}
     ea2:	0f 90       	pop	r0
     ea4:	0f 90       	pop	r0
     ea6:	cf 91       	pop	r28
     ea8:	df 91       	pop	r29
     eaa:	08 95       	ret

00000eac <gitem_xlist_merge>:
 1) Оба списка содержат только объекты типа gitem_t
 2) В списке source на каждом уровне приоритета все объекты типа gitem_t приенадлежат к одной группе.
 3) Элементы списка source, находящиеся на разных уровнях приоритета, пренадлежат разным группам.
*/
void gitem_xlist_merge(xlist_t * source, xlist_t * destignation)
{
     eac:	df 93       	push	r29
     eae:	cf 93       	push	r28
     eb0:	cd b7       	in	r28, 0x3d	; 61
     eb2:	de b7       	in	r29, 0x3e	; 62
     eb4:	2c 97       	sbiw	r28, 0x0c	; 12
     eb6:	0f b6       	in	r0, 0x3f	; 63
     eb8:	f8 94       	cli
     eba:	de bf       	out	0x3e, r29	; 62
     ebc:	0f be       	out	0x3f, r0	; 63
     ebe:	cd bf       	out	0x3d, r28	; 61
     ec0:	9a 87       	std	Y+10, r25	; 0x0a
     ec2:	89 87       	std	Y+9, r24	; 0x09
     ec4:	7c 87       	std	Y+12, r23	; 0x0c
     ec6:	6b 87       	std	Y+11, r22	; 0x0b
    index_t mask = (index_t)1;
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	88 87       	std	Y+8, r24	; 0x08
    prio_t current_prio = (prio_t)0;
     ecc:	1f 82       	std	Y+7, r1	; 0x07
     ece:	9a c0       	rjmp	.+308    	; 0x1004 <gitem_xlist_merge+0x158>
    while( mask )
    {
        // Есть че перенести?
        if( mask & source->index )
     ed0:	e9 85       	ldd	r30, Y+9	; 0x09
     ed2:	fa 85       	ldd	r31, Y+10	; 0x0a
     ed4:	90 89       	ldd	r25, Z+16	; 0x10
     ed6:	88 85       	ldd	r24, Y+8	; 0x08
     ed8:	89 23       	and	r24, r25
     eda:	88 23       	and	r24, r24
     edc:	09 f4       	brne	.+2      	; 0xee0 <gitem_xlist_merge+0x34>
     ede:	8c c0       	rjmp	.+280    	; 0xff8 <gitem_xlist_merge+0x14c>
        {
            // Есть!
            // Есть куда переносить?
            if( mask & destignation->index )
     ee0:	eb 85       	ldd	r30, Y+11	; 0x0b
     ee2:	fc 85       	ldd	r31, Y+12	; 0x0c
     ee4:	90 89       	ldd	r25, Z+16	; 0x10
     ee6:	88 85       	ldd	r24, Y+8	; 0x08
     ee8:	89 23       	and	r24, r25
     eea:	88 23       	and	r24, r24
     eec:	09 f4       	brne	.+2      	; 0xef0 <gitem_xlist_merge+0x44>
     eee:	43 c0       	rjmp	.+134    	; 0xf76 <gitem_xlist_merge+0xca>
            {
                //Есть!
                // Сшиваем 2 2-связных списка!!!
                item_t * src = source->item[current_prio];
     ef0:	8f 81       	ldd	r24, Y+7	; 0x07
     ef2:	88 2f       	mov	r24, r24
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	29 85       	ldd	r18, Y+9	; 0x09
     ef8:	3a 85       	ldd	r19, Y+10	; 0x0a
     efa:	88 0f       	add	r24, r24
     efc:	99 1f       	adc	r25, r25
     efe:	f9 01       	movw	r30, r18
     f00:	e8 0f       	add	r30, r24
     f02:	f9 1f       	adc	r31, r25
     f04:	80 81       	ld	r24, Z
     f06:	91 81       	ldd	r25, Z+1	; 0x01
     f08:	9e 83       	std	Y+6, r25	; 0x06
     f0a:	8d 83       	std	Y+5, r24	; 0x05
                item_t * dst = destignation->item[current_prio];
     f0c:	8f 81       	ldd	r24, Y+7	; 0x07
     f0e:	88 2f       	mov	r24, r24
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	2b 85       	ldd	r18, Y+11	; 0x0b
     f14:	3c 85       	ldd	r19, Y+12	; 0x0c
     f16:	88 0f       	add	r24, r24
     f18:	99 1f       	adc	r25, r25
     f1a:	f9 01       	movw	r30, r18
     f1c:	e8 0f       	add	r30, r24
     f1e:	f9 1f       	adc	r31, r25
     f20:	80 81       	ld	r24, Z
     f22:	91 81       	ldd	r25, Z+1	; 0x01
     f24:	9c 83       	std	Y+4, r25	; 0x04
     f26:	8b 83       	std	Y+3, r24	; 0x03
                src->prev->next = dst;
     f28:	ed 81       	ldd	r30, Y+5	; 0x05
     f2a:	fe 81       	ldd	r31, Y+6	; 0x06
     f2c:	02 80       	ldd	r0, Z+2	; 0x02
     f2e:	f3 81       	ldd	r31, Z+3	; 0x03
     f30:	e0 2d       	mov	r30, r0
     f32:	8b 81       	ldd	r24, Y+3	; 0x03
     f34:	9c 81       	ldd	r25, Y+4	; 0x04
     f36:	91 83       	std	Z+1, r25	; 0x01
     f38:	80 83       	st	Z, r24
                dst->prev->next = src;
     f3a:	eb 81       	ldd	r30, Y+3	; 0x03
     f3c:	fc 81       	ldd	r31, Y+4	; 0x04
     f3e:	02 80       	ldd	r0, Z+2	; 0x02
     f40:	f3 81       	ldd	r31, Z+3	; 0x03
     f42:	e0 2d       	mov	r30, r0
     f44:	8d 81       	ldd	r24, Y+5	; 0x05
     f46:	9e 81       	ldd	r25, Y+6	; 0x06
     f48:	91 83       	std	Z+1, r25	; 0x01
     f4a:	80 83       	st	Z, r24
                item_t * buf = dst->prev;
     f4c:	eb 81       	ldd	r30, Y+3	; 0x03
     f4e:	fc 81       	ldd	r31, Y+4	; 0x04
     f50:	82 81       	ldd	r24, Z+2	; 0x02
     f52:	93 81       	ldd	r25, Z+3	; 0x03
     f54:	9a 83       	std	Y+2, r25	; 0x02
     f56:	89 83       	std	Y+1, r24	; 0x01
                dst->prev = src->prev;
     f58:	ed 81       	ldd	r30, Y+5	; 0x05
     f5a:	fe 81       	ldd	r31, Y+6	; 0x06
     f5c:	82 81       	ldd	r24, Z+2	; 0x02
     f5e:	93 81       	ldd	r25, Z+3	; 0x03
     f60:	eb 81       	ldd	r30, Y+3	; 0x03
     f62:	fc 81       	ldd	r31, Y+4	; 0x04
     f64:	93 83       	std	Z+3, r25	; 0x03
     f66:	82 83       	std	Z+2, r24	; 0x02
                src->prev = buf;
     f68:	ed 81       	ldd	r30, Y+5	; 0x05
     f6a:	fe 81       	ldd	r31, Y+6	; 0x06
     f6c:	89 81       	ldd	r24, Y+1	; 0x01
     f6e:	9a 81       	ldd	r25, Y+2	; 0x02
     f70:	93 83       	std	Z+3, r25	; 0x03
     f72:	82 83       	std	Z+2, r24	; 0x02
     f74:	21 c0       	rjmp	.+66     	; 0xfb8 <gitem_xlist_merge+0x10c>
            }
            else
            {
                //Нет, тупо переносим всю группу.
                destignation->item[current_prio] = source->item[current_prio];
     f76:	8f 81       	ldd	r24, Y+7	; 0x07
     f78:	68 2f       	mov	r22, r24
     f7a:	70 e0       	ldi	r23, 0x00	; 0
     f7c:	8f 81       	ldd	r24, Y+7	; 0x07
     f7e:	88 2f       	mov	r24, r24
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	29 85       	ldd	r18, Y+9	; 0x09
     f84:	3a 85       	ldd	r19, Y+10	; 0x0a
     f86:	88 0f       	add	r24, r24
     f88:	99 1f       	adc	r25, r25
     f8a:	f9 01       	movw	r30, r18
     f8c:	e8 0f       	add	r30, r24
     f8e:	f9 1f       	adc	r31, r25
     f90:	40 81       	ld	r20, Z
     f92:	51 81       	ldd	r21, Z+1	; 0x01
     f94:	2b 85       	ldd	r18, Y+11	; 0x0b
     f96:	3c 85       	ldd	r19, Y+12	; 0x0c
     f98:	cb 01       	movw	r24, r22
     f9a:	88 0f       	add	r24, r24
     f9c:	99 1f       	adc	r25, r25
     f9e:	f9 01       	movw	r30, r18
     fa0:	e8 0f       	add	r30, r24
     fa2:	f9 1f       	adc	r31, r25
     fa4:	51 83       	std	Z+1, r21	; 0x01
     fa6:	40 83       	st	Z, r20
                destignation->index |= mask;
     fa8:	eb 85       	ldd	r30, Y+11	; 0x0b
     faa:	fc 85       	ldd	r31, Y+12	; 0x0c
     fac:	90 89       	ldd	r25, Z+16	; 0x10
     fae:	88 85       	ldd	r24, Y+8	; 0x08
     fb0:	89 2b       	or	r24, r25
     fb2:	eb 85       	ldd	r30, Y+11	; 0x0b
     fb4:	fc 85       	ldd	r31, Y+12	; 0x0c
     fb6:	80 8b       	std	Z+16, r24	; 0x10
            }
            // Вот почему эта функция отнесена к методам gitem_t
            ((gitem_t *)source->item[current_prio])->group->link = (void *)destignation;
     fb8:	8f 81       	ldd	r24, Y+7	; 0x07
     fba:	88 2f       	mov	r24, r24
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	29 85       	ldd	r18, Y+9	; 0x09
     fc0:	3a 85       	ldd	r19, Y+10	; 0x0a
     fc2:	88 0f       	add	r24, r24
     fc4:	99 1f       	adc	r25, r25
     fc6:	f9 01       	movw	r30, r18
     fc8:	e8 0f       	add	r30, r24
     fca:	f9 1f       	adc	r31, r25
     fcc:	80 81       	ld	r24, Z
     fce:	91 81       	ldd	r25, Z+1	; 0x01
     fd0:	fc 01       	movw	r30, r24
     fd2:	04 80       	ldd	r0, Z+4	; 0x04
     fd4:	f5 81       	ldd	r31, Z+5	; 0x05
     fd6:	e0 2d       	mov	r30, r0
     fd8:	8b 85       	ldd	r24, Y+11	; 0x0b
     fda:	9c 85       	ldd	r25, Y+12	; 0x0c
     fdc:	91 83       	std	Z+1, r25	; 0x01
     fde:	80 83       	st	Z, r24
            // Перенос закончен, обнуляем указатель
            source->item[(prio_t)current_prio] = (item_t *)0;
     fe0:	8f 81       	ldd	r24, Y+7	; 0x07
     fe2:	88 2f       	mov	r24, r24
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	29 85       	ldd	r18, Y+9	; 0x09
     fe8:	3a 85       	ldd	r19, Y+10	; 0x0a
     fea:	88 0f       	add	r24, r24
     fec:	99 1f       	adc	r25, r25
     fee:	f9 01       	movw	r30, r18
     ff0:	e8 0f       	add	r30, r24
     ff2:	f9 1f       	adc	r31, r25
     ff4:	11 82       	std	Z+1, r1	; 0x01
     ff6:	10 82       	st	Z, r1
        }
        mask<<=1;
     ff8:	88 85       	ldd	r24, Y+8	; 0x08
     ffa:	88 0f       	add	r24, r24
     ffc:	88 87       	std	Y+8, r24	; 0x08
        current_prio++;
     ffe:	8f 81       	ldd	r24, Y+7	; 0x07
    1000:	8f 5f       	subi	r24, 0xFF	; 255
    1002:	8f 83       	std	Y+7, r24	; 0x07
*/
void gitem_xlist_merge(xlist_t * source, xlist_t * destignation)
{
    index_t mask = (index_t)1;
    prio_t current_prio = (prio_t)0;
    while( mask )
    1004:	88 85       	ldd	r24, Y+8	; 0x08
    1006:	88 23       	and	r24, r24
    1008:	09 f0       	breq	.+2      	; 0x100c <gitem_xlist_merge+0x160>
    100a:	62 cf       	rjmp	.-316    	; 0xed0 <gitem_xlist_merge+0x24>
        }
        mask<<=1;
        current_prio++;
    }
    // Список полностью перенесен, обнуляем индекс
    source->index = (index_t)0;
    100c:	e9 85       	ldd	r30, Y+9	; 0x09
    100e:	fa 85       	ldd	r31, Y+10	; 0x0a
    1010:	10 8a       	std	Z+16, r1	; 0x10
}
    1012:	2c 96       	adiw	r28, 0x0c	; 12
    1014:	0f b6       	in	r0, 0x3f	; 63
    1016:	f8 94       	cli
    1018:	de bf       	out	0x3e, r29	; 62
    101a:	0f be       	out	0x3f, r0	; 63
    101c:	cd bf       	out	0x3d, r28	; 61
    101e:	cf 91       	pop	r28
    1020:	df 91       	pop	r29
    1022:	08 95       	ret

00001024 <group_init>:
*****************************************************************************************/
#include "../include/bugurt.h"
//Методы group_t
// инициация
void group_init(group_t * group, prio_t prio)
{
    1024:	df 93       	push	r29
    1026:	cf 93       	push	r28
    1028:	00 d0       	rcall	.+0      	; 0x102a <group_init+0x6>
    102a:	0f 92       	push	r0
    102c:	cd b7       	in	r28, 0x3d	; 61
    102e:	de b7       	in	r29, 0x3e	; 62
    1030:	9a 83       	std	Y+2, r25	; 0x02
    1032:	89 83       	std	Y+1, r24	; 0x01
    1034:	6b 83       	std	Y+3, r22	; 0x03
    group->link = (void *)0;
    1036:	e9 81       	ldd	r30, Y+1	; 0x01
    1038:	fa 81       	ldd	r31, Y+2	; 0x02
    103a:	11 82       	std	Z+1, r1	; 0x01
    103c:	10 82       	st	Z, r1
    group->prio = prio;
    103e:	e9 81       	ldd	r30, Y+1	; 0x01
    1040:	fa 81       	ldd	r31, Y+2	; 0x02
    1042:	8b 81       	ldd	r24, Y+3	; 0x03
    1044:	82 83       	std	Z+2, r24	; 0x02
    // группа - часть gitem_t, количество элементов - 1
    group->el_num = (count_t)1;
    1046:	e9 81       	ldd	r30, Y+1	; 0x01
    1048:	fa 81       	ldd	r31, Y+2	; 0x02
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	94 83       	std	Z+4, r25	; 0x04
    1050:	83 83       	std	Z+3, r24	; 0x03
}
    1052:	0f 90       	pop	r0
    1054:	0f 90       	pop	r0
    1056:	0f 90       	pop	r0
    1058:	cf 91       	pop	r28
    105a:	df 91       	pop	r29
    105c:	08 95       	ret

0000105e <group_push>:
// положить в ПУЛ
void group_push(group_t * group)
{
    105e:	df 93       	push	r29
    1060:	cf 93       	push	r28
    1062:	00 d0       	rcall	.+0      	; 0x1064 <group_push+0x6>
    1064:	cd b7       	in	r28, 0x3d	; 61
    1066:	de b7       	in	r29, 0x3e	; 62
    1068:	9a 83       	std	Y+2, r25	; 0x02
    106a:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    // блокируем пул
    spin_lock( &kernel.pool_lock );
#endif
    group->link = (void *)kernel.pool;
    106c:	80 91 6d 01 	lds	r24, 0x016D
    1070:	90 91 6e 01 	lds	r25, 0x016E
    1074:	e9 81       	ldd	r30, Y+1	; 0x01
    1076:	fa 81       	ldd	r31, Y+2	; 0x02
    1078:	91 83       	std	Z+1, r25	; 0x01
    107a:	80 83       	st	Z, r24
    kernel.pool = group;
    107c:	89 81       	ldd	r24, Y+1	; 0x01
    107e:	9a 81       	ldd	r25, Y+2	; 0x02
    1080:	90 93 6e 01 	sts	0x016E, r25
    1084:	80 93 6d 01 	sts	0x016D, r24
#ifdef CONFIG_MP
    // разблокируем пул
    spin_unlock( &kernel.pool_lock );
#endif
}
    1088:	0f 90       	pop	r0
    108a:	0f 90       	pop	r0
    108c:	cf 91       	pop	r28
    108e:	df 91       	pop	r29
    1090:	08 95       	ret

00001092 <group_pop>:
// взять из пула, если есть, а есть всегда, избыточность же!
group_t * group_pop(void)
{
    1092:	df 93       	push	r29
    1094:	cf 93       	push	r28
    1096:	00 d0       	rcall	.+0      	; 0x1098 <group_pop+0x6>
    1098:	cd b7       	in	r28, 0x3d	; 61
    109a:	de b7       	in	r29, 0x3e	; 62
#ifdef CONFIG_MP
    // блокируем пул
    spin_lock( &kernel.pool_lock );
#endif
    group_t * group = kernel.pool;
    109c:	80 91 6d 01 	lds	r24, 0x016D
    10a0:	90 91 6e 01 	lds	r25, 0x016E
    10a4:	9a 83       	std	Y+2, r25	; 0x02
    10a6:	89 83       	std	Y+1, r24	; 0x01
    kernel.pool = (group_t *)group->link;
    10a8:	e9 81       	ldd	r30, Y+1	; 0x01
    10aa:	fa 81       	ldd	r31, Y+2	; 0x02
    10ac:	80 81       	ld	r24, Z
    10ae:	91 81       	ldd	r25, Z+1	; 0x01
    10b0:	90 93 6e 01 	sts	0x016E, r25
    10b4:	80 93 6d 01 	sts	0x016D, r24
#ifdef CONFIG_MP
    // разблокируем пул
    spin_unlock( &kernel.pool_lock );
#endif
    return group;
    10b8:	89 81       	ldd	r24, Y+1	; 0x01
    10ba:	9a 81       	ldd	r25, Y+2	; 0x02
}
    10bc:	0f 90       	pop	r0
    10be:	0f 90       	pop	r0
    10c0:	cf 91       	pop	r28
    10c2:	df 91       	pop	r29
    10c4:	08 95       	ret

000010c6 <index_search>:
*                           http://www.0chan.ru/r/res/9996.html                          *
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
prio_t index_search(index_t index)
{
    10c6:	df 93       	push	r29
    10c8:	cf 93       	push	r28
    10ca:	00 d0       	rcall	.+0      	; 0x10cc <index_search+0x6>
    10cc:	00 d0       	rcall	.+0      	; 0x10ce <index_search+0x8>
    10ce:	00 d0       	rcall	.+0      	; 0x10d0 <index_search+0xa>
    10d0:	cd b7       	in	r28, 0x3d	; 61
    10d2:	de b7       	in	r29, 0x3e	; 62
    10d4:	8e 83       	std	Y+6, r24	; 0x06
    prio_t prio = (prio_t)0;
    10d6:	1d 82       	std	Y+5, r1	; 0x05
        но, т.к. BITS_IN_INDEX_T фиксировано для данной конфигурации,
        то получается время выполнения - O(1), ВСЕГДА.

        И да, предсказуемость + переносимость > быстродействие.
        */
    index_t upper = ~(index_t)0, lower = ~(index_t)0, middle;
    10d8:	8f ef       	ldi	r24, 0xFF	; 255
    10da:	8c 83       	std	Y+4, r24	; 0x04
    10dc:	8f ef       	ldi	r24, 0xFF	; 255
    10de:	8b 83       	std	Y+3, r24	; 0x03
    prio_t step = (prio_t)BITS_IN_INDEX_T;
    10e0:	88 e0       	ldi	r24, 0x08	; 8
    10e2:	89 83       	std	Y+1, r24	; 0x01
    10e4:	22 c0       	rjmp	.+68     	; 0x112a <index_search+0x64>
    while( step )
    {
        step>>=1; // делим шаг пополам
    10e6:	89 81       	ldd	r24, Y+1	; 0x01
    10e8:	86 95       	lsr	r24
    10ea:	89 83       	std	Y+1, r24	; 0x01
        middle = lower>>step;
    10ec:	8b 81       	ldd	r24, Y+3	; 0x03
    10ee:	28 2f       	mov	r18, r24
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	89 81       	ldd	r24, Y+1	; 0x01
    10f4:	88 2f       	mov	r24, r24
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	a9 01       	movw	r20, r18
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <index_search+0x3a>
    10fc:	55 95       	asr	r21
    10fe:	47 95       	ror	r20
    1100:	8a 95       	dec	r24
    1102:	e2 f7       	brpl	.-8      	; 0x10fc <index_search+0x36>
    1104:	ca 01       	movw	r24, r20
    1106:	8a 83       	std	Y+2, r24	; 0x02
        if( index & upper & middle )
    1108:	9e 81       	ldd	r25, Y+6	; 0x06
    110a:	8c 81       	ldd	r24, Y+4	; 0x04
    110c:	98 23       	and	r25, r24
    110e:	8a 81       	ldd	r24, Y+2	; 0x02
    1110:	89 23       	and	r24, r25
    1112:	88 23       	and	r24, r24
    1114:	19 f0       	breq	.+6      	; 0x111c <index_search+0x56>
        {
            lower = middle;
    1116:	8a 81       	ldd	r24, Y+2	; 0x02
    1118:	8b 83       	std	Y+3, r24	; 0x03
    111a:	07 c0       	rjmp	.+14     	; 0x112a <index_search+0x64>
        }
        else
        {
            upper = ~middle;
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	80 95       	com	r24
    1120:	8c 83       	std	Y+4, r24	; 0x04
            prio += step;
    1122:	9d 81       	ldd	r25, Y+5	; 0x05
    1124:	89 81       	ldd	r24, Y+1	; 0x01
    1126:	89 0f       	add	r24, r25
    1128:	8d 83       	std	Y+5, r24	; 0x05

        И да, предсказуемость + переносимость > быстродействие.
        */
    index_t upper = ~(index_t)0, lower = ~(index_t)0, middle;
    prio_t step = (prio_t)BITS_IN_INDEX_T;
    while( step )
    112a:	89 81       	ldd	r24, Y+1	; 0x01
    112c:	88 23       	and	r24, r24
    112e:	d9 f6       	brne	.-74     	; 0x10e6 <index_search+0x20>
        if ( mask & index )break;
        prio++;
        mask<<=1;
    }
#endif
    return prio;
    1130:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1132:	26 96       	adiw	r28, 0x06	; 6
    1134:	0f b6       	in	r0, 0x3f	; 63
    1136:	f8 94       	cli
    1138:	de bf       	out	0x3e, r29	; 62
    113a:	0f be       	out	0x3f, r0	; 63
    113c:	cd bf       	out	0x3d, r28	; 61
    113e:	cf 91       	pop	r28
    1140:	df 91       	pop	r29
    1142:	08 95       	ret

00001144 <item_init>:
*****************************************************************************************/
#include "../include/bugurt.h"
//Методы элемента 2-связного списка
//инициация элемента
void item_init(item_t *item)
{
    1144:	df 93       	push	r29
    1146:	cf 93       	push	r28
    1148:	00 d0       	rcall	.+0      	; 0x114a <item_init+0x6>
    114a:	cd b7       	in	r28, 0x3d	; 61
    114c:	de b7       	in	r29, 0x3e	; 62
    114e:	9a 83       	std	Y+2, r25	; 0x02
    1150:	89 83       	std	Y+1, r24	; 0x01
    item->prev = item;
    1152:	e9 81       	ldd	r30, Y+1	; 0x01
    1154:	fa 81       	ldd	r31, Y+2	; 0x02
    1156:	89 81       	ldd	r24, Y+1	; 0x01
    1158:	9a 81       	ldd	r25, Y+2	; 0x02
    115a:	93 83       	std	Z+3, r25	; 0x03
    115c:	82 83       	std	Z+2, r24	; 0x02
    item->next = item;
    115e:	e9 81       	ldd	r30, Y+1	; 0x01
    1160:	fa 81       	ldd	r31, Y+2	; 0x02
    1162:	89 81       	ldd	r24, Y+1	; 0x01
    1164:	9a 81       	ldd	r25, Y+2	; 0x02
    1166:	91 83       	std	Z+1, r25	; 0x01
    1168:	80 83       	st	Z, r24
}
    116a:	0f 90       	pop	r0
    116c:	0f 90       	pop	r0
    116e:	cf 91       	pop	r28
    1170:	df 91       	pop	r29
    1172:	08 95       	ret

00001174 <item_insert>:
//Вставить элемент
void item_insert(item_t *item, item_t *head)
{
    1174:	df 93       	push	r29
    1176:	cf 93       	push	r28
    1178:	00 d0       	rcall	.+0      	; 0x117a <item_insert+0x6>
    117a:	00 d0       	rcall	.+0      	; 0x117c <item_insert+0x8>
    117c:	00 d0       	rcall	.+0      	; 0x117e <item_insert+0xa>
    117e:	cd b7       	in	r28, 0x3d	; 61
    1180:	de b7       	in	r29, 0x3e	; 62
    1182:	9c 83       	std	Y+4, r25	; 0x04
    1184:	8b 83       	std	Y+3, r24	; 0x03
    1186:	7e 83       	std	Y+6, r23	; 0x06
    1188:	6d 83       	std	Y+5, r22	; 0x05
    // "хвост" списка
    item_t * tail = head->prev;
    118a:	ed 81       	ldd	r30, Y+5	; 0x05
    118c:	fe 81       	ldd	r31, Y+6	; 0x06
    118e:	82 81       	ldd	r24, Z+2	; 0x02
    1190:	93 81       	ldd	r25, Z+3	; 0x03
    1192:	9a 83       	std	Y+2, r25	; 0x02
    1194:	89 83       	std	Y+1, r24	; 0x01

    // Вставляем элемент между "головой" и "хвостом"
    item->prev = tail;
    1196:	eb 81       	ldd	r30, Y+3	; 0x03
    1198:	fc 81       	ldd	r31, Y+4	; 0x04
    119a:	89 81       	ldd	r24, Y+1	; 0x01
    119c:	9a 81       	ldd	r25, Y+2	; 0x02
    119e:	93 83       	std	Z+3, r25	; 0x03
    11a0:	82 83       	std	Z+2, r24	; 0x02
    item->next = head;
    11a2:	eb 81       	ldd	r30, Y+3	; 0x03
    11a4:	fc 81       	ldd	r31, Y+4	; 0x04
    11a6:	8d 81       	ldd	r24, Y+5	; 0x05
    11a8:	9e 81       	ldd	r25, Y+6	; 0x06
    11aa:	91 83       	std	Z+1, r25	; 0x01
    11ac:	80 83       	st	Z, r24

    head->prev = item;
    11ae:	ed 81       	ldd	r30, Y+5	; 0x05
    11b0:	fe 81       	ldd	r31, Y+6	; 0x06
    11b2:	8b 81       	ldd	r24, Y+3	; 0x03
    11b4:	9c 81       	ldd	r25, Y+4	; 0x04
    11b6:	93 83       	std	Z+3, r25	; 0x03
    11b8:	82 83       	std	Z+2, r24	; 0x02
    tail->next = item;
    11ba:	e9 81       	ldd	r30, Y+1	; 0x01
    11bc:	fa 81       	ldd	r31, Y+2	; 0x02
    11be:	8b 81       	ldd	r24, Y+3	; 0x03
    11c0:	9c 81       	ldd	r25, Y+4	; 0x04
    11c2:	91 83       	std	Z+1, r25	; 0x01
    11c4:	80 83       	st	Z, r24
}
    11c6:	26 96       	adiw	r28, 0x06	; 6
    11c8:	0f b6       	in	r0, 0x3f	; 63
    11ca:	f8 94       	cli
    11cc:	de bf       	out	0x3e, r29	; 62
    11ce:	0f be       	out	0x3f, r0	; 63
    11d0:	cd bf       	out	0x3d, r28	; 61
    11d2:	cf 91       	pop	r28
    11d4:	df 91       	pop	r29
    11d6:	08 95       	ret

000011d8 <item_cut>:
//Вырезать элемент
void item_cut( item_t *item )
{
    11d8:	df 93       	push	r29
    11da:	cf 93       	push	r28
    11dc:	00 d0       	rcall	.+0      	; 0x11de <item_cut+0x6>
    11de:	00 d0       	rcall	.+0      	; 0x11e0 <item_cut+0x8>
    11e0:	00 d0       	rcall	.+0      	; 0x11e2 <item_cut+0xa>
    11e2:	cd b7       	in	r28, 0x3d	; 61
    11e4:	de b7       	in	r29, 0x3e	; 62
    11e6:	9e 83       	std	Y+6, r25	; 0x06
    11e8:	8d 83       	std	Y+5, r24	; 0x05
    item_t * prev = item->prev; //Предыдущий элемент
    11ea:	ed 81       	ldd	r30, Y+5	; 0x05
    11ec:	fe 81       	ldd	r31, Y+6	; 0x06
    11ee:	82 81       	ldd	r24, Z+2	; 0x02
    11f0:	93 81       	ldd	r25, Z+3	; 0x03
    11f2:	9c 83       	std	Y+4, r25	; 0x04
    11f4:	8b 83       	std	Y+3, r24	; 0x03
    item_t * next = item->next; //Следующий элемент
    11f6:	ed 81       	ldd	r30, Y+5	; 0x05
    11f8:	fe 81       	ldd	r31, Y+6	; 0x06
    11fa:	80 81       	ld	r24, Z
    11fc:	91 81       	ldd	r25, Z+1	; 0x01
    11fe:	9a 83       	std	Y+2, r25	; 0x02
    1200:	89 83       	std	Y+1, r24	; 0x01

    next->prev = prev;
    1202:	e9 81       	ldd	r30, Y+1	; 0x01
    1204:	fa 81       	ldd	r31, Y+2	; 0x02
    1206:	8b 81       	ldd	r24, Y+3	; 0x03
    1208:	9c 81       	ldd	r25, Y+4	; 0x04
    120a:	93 83       	std	Z+3, r25	; 0x03
    120c:	82 83       	std	Z+2, r24	; 0x02
    prev->next = next;
    120e:	eb 81       	ldd	r30, Y+3	; 0x03
    1210:	fc 81       	ldd	r31, Y+4	; 0x04
    1212:	89 81       	ldd	r24, Y+1	; 0x01
    1214:	9a 81       	ldd	r25, Y+2	; 0x02
    1216:	91 83       	std	Z+1, r25	; 0x01
    1218:	80 83       	st	Z, r24

    item->prev = item;
    121a:	ed 81       	ldd	r30, Y+5	; 0x05
    121c:	fe 81       	ldd	r31, Y+6	; 0x06
    121e:	8d 81       	ldd	r24, Y+5	; 0x05
    1220:	9e 81       	ldd	r25, Y+6	; 0x06
    1222:	93 83       	std	Z+3, r25	; 0x03
    1224:	82 83       	std	Z+2, r24	; 0x02
    item->next = item;
    1226:	ed 81       	ldd	r30, Y+5	; 0x05
    1228:	fe 81       	ldd	r31, Y+6	; 0x06
    122a:	8d 81       	ldd	r24, Y+5	; 0x05
    122c:	9e 81       	ldd	r25, Y+6	; 0x06
    122e:	91 83       	std	Z+1, r25	; 0x01
    1230:	80 83       	st	Z, r24
}
    1232:	26 96       	adiw	r28, 0x06	; 6
    1234:	0f b6       	in	r0, 0x3f	; 63
    1236:	f8 94       	cli
    1238:	de bf       	out	0x3e, r29	; 62
    123a:	0f be       	out	0x3f, r0	; 63
    123c:	cd bf       	out	0x3d, r28	; 61
    123e:	cf 91       	pop	r28
    1240:	df 91       	pop	r29
    1242:	08 95       	ret

00001244 <kernel_init>:
{
    while(1);
}

void kernel_init(void)
{
    1244:	8f 92       	push	r8
    1246:	af 92       	push	r10
    1248:	bf 92       	push	r11
    124a:	cf 92       	push	r12
    124c:	ef 92       	push	r14
    124e:	ff 92       	push	r15
    1250:	0f 93       	push	r16
    1252:	1f 93       	push	r17
    1254:	df 93       	push	r29
    1256:	cf 93       	push	r28
    1258:	cd b7       	in	r28, 0x3d	; 61
    125a:	de b7       	in	r29, 0x3e	; 62
        stat_init( (stat_t *)kernel.stat + i );
        sched_init( (sched_t *)kernel.sched + i, (proc_t *)kernel.idle + i );
    }
    spin_unlock( &kernel.stat_lock );
#else
    proc_init_isr(
    125c:	8f e3       	ldi	r24, 0x3F	; 63
    125e:	91 e0       	ldi	r25, 0x01	; 1
    1260:	26 e7       	ldi	r18, 0x76	; 118
    1262:	31 e1       	ldi	r19, 0x11	; 17
    1264:	b9 01       	movw	r22, r18
    1266:	40 e0       	ldi	r20, 0x00	; 0
    1268:	50 e0       	ldi	r21, 0x00	; 0
    126a:	20 e0       	ldi	r18, 0x00	; 0
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	00 e0       	ldi	r16, 0x00	; 0
    1270:	10 e0       	ldi	r17, 0x00	; 0
    1272:	ee 24       	eor	r14, r14
    1274:	ff 24       	eor	r15, r15
    1276:	0f 2e       	mov	r0, r31
    1278:	f7 e0       	ldi	r31, 0x07	; 7
    127a:	cf 2e       	mov	r12, r31
    127c:	f0 2d       	mov	r31, r0
    127e:	aa 24       	eor	r10, r10
    1280:	bb 24       	eor	r11, r11
    1282:	a3 94       	inc	r10
    1284:	88 24       	eor	r8, r8
    1286:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <proc_init_isr>
        0, // это не важно, при первой же смене контекста будет сохранен текущий указатель стека
        ((prio_t)BITS_IN_INDEX_T - (prio_t)1),// низший приоритет
        (timer_t)1,//минимальный квант времени
        (bool_t)0// не RT
    );
    sched_init( (sched_t *)&kernel.sched, (proc_t *)&kernel.idle );
    128a:	85 e1       	ldi	r24, 0x15	; 21
    128c:	91 e0       	ldi	r25, 0x01	; 1
    128e:	2f e3       	ldi	r18, 0x3F	; 63
    1290:	31 e0       	ldi	r19, 0x01	; 1
    1292:	b9 01       	movw	r22, r18
    1294:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <sched_init>
#endif // CONFIG_MP
}
    1298:	cf 91       	pop	r28
    129a:	df 91       	pop	r29
    129c:	1f 91       	pop	r17
    129e:	0f 91       	pop	r16
    12a0:	ff 90       	pop	r15
    12a2:	ef 90       	pop	r14
    12a4:	cf 90       	pop	r12
    12a6:	bf 90       	pop	r11
    12a8:	af 90       	pop	r10
    12aa:	8f 90       	pop	r8
    12ac:	08 95       	ret

000012ae <mutex_init_isr>:
    mutex_t * mutex
#ifdef CONFIG_USE_HIGHEST_LOCKER
    ,prio_t prio
#endif // CONFIG_USE_HIGHEST_LOCKER
)
{
    12ae:	df 93       	push	r29
    12b0:	cf 93       	push	r28
    12b2:	00 d0       	rcall	.+0      	; 0x12b4 <mutex_init_isr+0x6>
    12b4:	0f 92       	push	r0
    12b6:	cd b7       	in	r28, 0x3d	; 61
    12b8:	de b7       	in	r29, 0x3e	; 62
    12ba:	9a 83       	std	Y+2, r25	; 0x02
    12bc:	89 83       	std	Y+1, r24	; 0x01
    12be:	6b 83       	std	Y+3, r22	; 0x03
    xlist_init( (xlist_t *)mutex );
    12c0:	89 81       	ldd	r24, Y+1	; 0x01
    12c2:	9a 81       	ldd	r25, Y+2	; 0x02
    12c4:	0e 94 11 10 	call	0x2022	; 0x2022 <xlist_init>
    mutex->free = (bool_t)1;
    12c8:	e9 81       	ldd	r30, Y+1	; 0x01
    12ca:	fa 81       	ldd	r31, Y+2	; 0x02
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	82 8b       	std	Z+18, r24	; 0x12
#ifdef CONFIG_USE_HIGHEST_LOCKER
    mutex->prio = prio;
    12d0:	e9 81       	ldd	r30, Y+1	; 0x01
    12d2:	fa 81       	ldd	r31, Y+2	; 0x02
    12d4:	8b 81       	ldd	r24, Y+3	; 0x03
    12d6:	81 8b       	std	Z+17, r24	; 0x11
#endif // CONFIG_USE_HIGHEST_LOCKER
}
    12d8:	0f 90       	pop	r0
    12da:	0f 90       	pop	r0
    12dc:	0f 90       	pop	r0
    12de:	cf 91       	pop	r28
    12e0:	df 91       	pop	r29
    12e2:	08 95       	ret

000012e4 <_mutex_lock>:

// К моменту вызова захвачена блокировка mutex-а, запрещены прерывания
bool_t _mutex_lock( mutex_t * mutex )
{
    12e4:	df 93       	push	r29
    12e6:	cf 93       	push	r28
    12e8:	00 d0       	rcall	.+0      	; 0x12ea <_mutex_lock+0x6>
    12ea:	00 d0       	rcall	.+0      	; 0x12ec <_mutex_lock+0x8>
    12ec:	0f 92       	push	r0
    12ee:	cd b7       	in	r28, 0x3d	; 61
    12f0:	de b7       	in	r29, 0x3e	; 62
    12f2:	9d 83       	std	Y+5, r25	; 0x05
    12f4:	8c 83       	std	Y+4, r24	; 0x04
    bool_t ret = mutex->free;
    12f6:	ec 81       	ldd	r30, Y+4	; 0x04
    12f8:	fd 81       	ldd	r31, Y+5	; 0x05
    12fa:	82 89       	ldd	r24, Z+18	; 0x12
    12fc:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = current_proc();
    12fe:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <current_proc>
    1302:	9a 83       	std	Y+2, r25	; 0x02
    1304:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
#ifdef CONFIG_USE_HIGHEST_LOCKER
    _proc_lres_inc( proc, mutex->prio );
    1306:	ec 81       	ldd	r30, Y+4	; 0x04
    1308:	fd 81       	ldd	r31, Y+5	; 0x05
    130a:	21 89       	ldd	r18, Z+17	; 0x11
    130c:	89 81       	ldd	r24, Y+1	; 0x01
    130e:	9a 81       	ldd	r25, Y+2	; 0x02
    1310:	62 2f       	mov	r22, r18
    1312:	0e 94 86 0c 	call	0x190c	; 0x190c <_proc_lres_inc>
#else // !CONFIG_USE_HIGHEST_LOCKER
    _proc_lres_inc( proc );
#endif // CONFIG_USE_HIGHEST_LOCKER
    if( ret )
    1316:	8b 81       	ldd	r24, Y+3	; 0x03
    1318:	88 23       	and	r24, r24
    131a:	41 f0       	breq	.+16     	; 0x132c <_mutex_lock+0x48>
    {
        mutex->free = (bool_t)0;
    131c:	ec 81       	ldd	r30, Y+4	; 0x04
    131e:	fd 81       	ldd	r31, Y+5	; 0x05
    1320:	12 8a       	std	Z+18, r1	; 0x12
#ifdef CONFIG_USE_HIGHEST_LOCKER
        // Меняем приоритет только здесь
        _proc_prio_control_running( proc );
    1322:	89 81       	ldd	r24, Y+1	; 0x01
    1324:	9a 81       	ldd	r25, Y+2	; 0x02
    1326:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <_proc_prio_control_running>
    132a:	1b c0       	rjmp	.+54     	; 0x1362 <_mutex_lock+0x7e>
#endif // CONFIG_USE_HIGHEST_LOCKER
    }
    else
    {
        proc->flags |= PROC_FLG_QUEUE;
    132c:	e9 81       	ldd	r30, Y+1	; 0x01
    132e:	fa 81       	ldd	r31, Y+2	; 0x02
    1330:	83 85       	ldd	r24, Z+11	; 0x0b
    1332:	88 60       	ori	r24, 0x08	; 8
    1334:	e9 81       	ldd	r30, Y+1	; 0x01
    1336:	fa 81       	ldd	r31, Y+2	; 0x02
    1338:	83 87       	std	Z+11, r24	; 0x0b
        proc->flags &= ~PROC_FLG_RUN;
    133a:	e9 81       	ldd	r30, Y+1	; 0x01
    133c:	fa 81       	ldd	r31, Y+2	; 0x02
    133e:	83 85       	ldd	r24, Z+11	; 0x0b
    1340:	8d 7f       	andi	r24, 0xFD	; 253
    1342:	e9 81       	ldd	r30, Y+1	; 0x01
    1344:	fa 81       	ldd	r31, Y+2	; 0x02
    1346:	83 87       	std	Z+11, r24	; 0x0b
        _proc_stop_( proc );
    1348:	89 81       	ldd	r24, Y+1	; 0x01
    134a:	9a 81       	ldd	r25, Y+2	; 0x02
    134c:	0e 94 3f 07 	call	0xe7e	; 0xe7e <gitem_cut>
        gitem_insert( (gitem_t *)proc, (xlist_t *)mutex );
    1350:	89 81       	ldd	r24, Y+1	; 0x01
    1352:	9a 81       	ldd	r25, Y+2	; 0x02
    1354:	2c 81       	ldd	r18, Y+4	; 0x04
    1356:	3d 81       	ldd	r19, Y+5	; 0x05
    1358:	b9 01       	movw	r22, r18
    135a:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <gitem_insert>
        // Нужна перепланировка
#ifdef CONFIG_MP
        resched( proc->core_id );
#else
        resched();
    135e:	0e 94 fe 00 	call	0x1fc	; 0x1fc <resched>
#endif // CONFIG_MP
    }
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    return ret;
    1362:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1364:	0f 90       	pop	r0
    1366:	0f 90       	pop	r0
    1368:	0f 90       	pop	r0
    136a:	0f 90       	pop	r0
    136c:	0f 90       	pop	r0
    136e:	cf 91       	pop	r28
    1370:	df 91       	pop	r29
    1372:	08 95       	ret

00001374 <_mutex_try_lock>:

bool_t _mutex_try_lock( mutex_t * mutex )
{
    1374:	df 93       	push	r29
    1376:	cf 93       	push	r28
    1378:	00 d0       	rcall	.+0      	; 0x137a <_mutex_try_lock+0x6>
    137a:	00 d0       	rcall	.+0      	; 0x137c <_mutex_try_lock+0x8>
    137c:	0f 92       	push	r0
    137e:	cd b7       	in	r28, 0x3d	; 61
    1380:	de b7       	in	r29, 0x3e	; 62
    1382:	9d 83       	std	Y+5, r25	; 0x05
    1384:	8c 83       	std	Y+4, r24	; 0x04
    bool_t ret = mutex->free;
    1386:	ec 81       	ldd	r30, Y+4	; 0x04
    1388:	fd 81       	ldd	r31, Y+5	; 0x05
    138a:	82 89       	ldd	r24, Z+18	; 0x12
    138c:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = current_proc();
    138e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <current_proc>
    1392:	9a 83       	std	Y+2, r25	; 0x02
    1394:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    if( ret )
    1396:	8b 81       	ldd	r24, Y+3	; 0x03
    1398:	88 23       	and	r24, r24
    139a:	79 f0       	breq	.+30     	; 0x13ba <_mutex_try_lock+0x46>
    {
        mutex->free = (bool_t)0;
    139c:	ec 81       	ldd	r30, Y+4	; 0x04
    139e:	fd 81       	ldd	r31, Y+5	; 0x05
    13a0:	12 8a       	std	Z+18, r1	; 0x12
#ifdef CONFIG_USE_HIGHEST_LOCKER
        _proc_lres_inc( proc, mutex->prio );
    13a2:	ec 81       	ldd	r30, Y+4	; 0x04
    13a4:	fd 81       	ldd	r31, Y+5	; 0x05
    13a6:	21 89       	ldd	r18, Z+17	; 0x11
    13a8:	89 81       	ldd	r24, Y+1	; 0x01
    13aa:	9a 81       	ldd	r25, Y+2	; 0x02
    13ac:	62 2f       	mov	r22, r18
    13ae:	0e 94 86 0c 	call	0x190c	; 0x190c <_proc_lres_inc>
        _proc_prio_control_running( proc );
    13b2:	89 81       	ldd	r24, Y+1	; 0x01
    13b4:	9a 81       	ldd	r25, Y+2	; 0x02
    13b6:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <_proc_prio_control_running>
#endif // CONFIG_USE_HIGHEST_LOCKER
    }
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    return ret;
    13ba:	8b 81       	ldd	r24, Y+3	; 0x03
}
    13bc:	0f 90       	pop	r0
    13be:	0f 90       	pop	r0
    13c0:	0f 90       	pop	r0
    13c2:	0f 90       	pop	r0
    13c4:	0f 90       	pop	r0
    13c6:	cf 91       	pop	r28
    13c8:	df 91       	pop	r29
    13ca:	08 95       	ret

000013cc <_mutex_unlock>:

void _mutex_unlock( mutex_t *  mutex )
{
    13cc:	df 93       	push	r29
    13ce:	cf 93       	push	r28
    13d0:	00 d0       	rcall	.+0      	; 0x13d2 <_mutex_unlock+0x6>
    13d2:	00 d0       	rcall	.+0      	; 0x13d4 <_mutex_unlock+0x8>
    13d4:	cd b7       	in	r28, 0x3d	; 61
    13d6:	de b7       	in	r29, 0x3e	; 62
    13d8:	9c 83       	std	Y+4, r25	; 0x04
    13da:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = current_proc();
    13dc:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <current_proc>
    13e0:	9a 83       	std	Y+2, r25	; 0x02
    13e2:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
#ifdef CONFIG_USE_HIGHEST_LOCKER

    _proc_lres_dec( proc, mutex->prio );
    13e4:	eb 81       	ldd	r30, Y+3	; 0x03
    13e6:	fc 81       	ldd	r31, Y+4	; 0x04
    13e8:	21 89       	ldd	r18, Z+17	; 0x11
    13ea:	89 81       	ldd	r24, Y+1	; 0x01
    13ec:	9a 81       	ldd	r25, Y+2	; 0x02
    13ee:	62 2f       	mov	r22, r18
    13f0:	0e 94 a7 0c 	call	0x194e	; 0x194e <_proc_lres_dec>
    // Если проготовлен и готов к остановке - останавливаем
    if(  ( proc->flags & PROC_FLG_PRE_END ) && (!(proc->flags & PROC_FLG_HOLD))  )
    13f4:	e9 81       	ldd	r30, Y+1	; 0x01
    13f6:	fa 81       	ldd	r31, Y+2	; 0x02
    13f8:	83 85       	ldd	r24, Z+11	; 0x0b
    13fa:	88 2f       	mov	r24, r24
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	80 72       	andi	r24, 0x20	; 32
    1400:	90 70       	andi	r25, 0x00	; 0
    1402:	00 97       	sbiw	r24, 0x00	; 0
    1404:	a1 f0       	breq	.+40     	; 0x142e <_mutex_unlock+0x62>
    1406:	e9 81       	ldd	r30, Y+1	; 0x01
    1408:	fa 81       	ldd	r31, Y+2	; 0x02
    140a:	83 85       	ldd	r24, Z+11	; 0x0b
    140c:	88 2f       	mov	r24, r24
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	84 70       	andi	r24, 0x04	; 4
    1412:	90 70       	andi	r25, 0x00	; 0
    1414:	00 97       	sbiw	r24, 0x00	; 0
    1416:	59 f4       	brne	.+22     	; 0x142e <_mutex_unlock+0x62>
    {
        _proc_stop_( proc );
    1418:	89 81       	ldd	r24, Y+1	; 0x01
    141a:	9a 81       	ldd	r25, Y+2	; 0x02
    141c:	0e 94 3f 07 	call	0xe7e	; 0xe7e <gitem_cut>
        _proc_prio_control_stoped( proc );
    1420:	89 81       	ldd	r24, Y+1	; 0x01
    1422:	9a 81       	ldd	r25, Y+2	; 0x02
    1424:	0e 94 c8 0c 	call	0x1990	; 0x1990 <_proc_prio_control_stoped>
        // Нужна перепланировка, процесс остановили и не запустили обратно
#ifdef CONFIG_MP
        resched( proc->core_id );
#else
        resched();
    1428:	0e 94 fe 00 	call	0x1fc	; 0x1fc <resched>
    142c:	04 c0       	rjmp	.+8      	; 0x1436 <_mutex_unlock+0x6a>
#endif // CONFIG_MP
    }
    // Не останавливаем - меняем проиритет на ходу
    else _proc_prio_control_running( proc );
    142e:	89 81       	ldd	r24, Y+1	; 0x01
    1430:	9a 81       	ldd	r25, Y+2	; 0x02
    1432:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <_proc_prio_control_running>
#endif // CONFIG_USE_HIGHEST_LOCKER
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    // Обрабока самого мьютекса
    if( ((xlist_t *)mutex)->index == (index_t)0  )
    1436:	eb 81       	ldd	r30, Y+3	; 0x03
    1438:	fc 81       	ldd	r31, Y+4	; 0x04
    143a:	80 89       	ldd	r24, Z+16	; 0x10
    143c:	88 23       	and	r24, r24
    143e:	29 f4       	brne	.+10     	; 0x144a <_mutex_unlock+0x7e>
    {
        // Список ожидающих пуст, выходим
        mutex->free = (bool_t)1;
    1440:	eb 81       	ldd	r30, Y+3	; 0x03
    1442:	fc 81       	ldd	r31, Y+4	; 0x04
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	82 8b       	std	Z+18, r24	; 0x12
    1448:	19 c0       	rjmp	.+50     	; 0x147c <_mutex_unlock+0xb0>
        return;
    }
    // Список ожидающих не пуст, запускаем голову
    proc = (proc_t *)xlist_head((xlist_t *)mutex);
    144a:	8b 81       	ldd	r24, Y+3	; 0x03
    144c:	9c 81       	ldd	r25, Y+4	; 0x04
    144e:	0e 94 3b 10 	call	0x2076	; 0x2076 <xlist_head>
    1452:	9a 83       	std	Y+2, r25	; 0x02
    1454:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    // Сначала надо вырезать
    proc->flags &= ~PROC_FLG_QUEUE;
    1456:	e9 81       	ldd	r30, Y+1	; 0x01
    1458:	fa 81       	ldd	r31, Y+2	; 0x02
    145a:	83 85       	ldd	r24, Z+11	; 0x0b
    145c:	87 7f       	andi	r24, 0xF7	; 247
    145e:	e9 81       	ldd	r30, Y+1	; 0x01
    1460:	fa 81       	ldd	r31, Y+2	; 0x02
    1462:	83 87       	std	Z+11, r24	; 0x0b
    gitem_cut( (gitem_t *)proc );
    1464:	89 81       	ldd	r24, Y+1	; 0x01
    1466:	9a 81       	ldd	r25, Y+2	; 0x02
    1468:	0e 94 3f 07 	call	0xe7e	; 0xe7e <gitem_cut>
#ifdef CONFIG_USE_HIGHEST_LOCKER
    // Меняем приоритет
    _proc_prio_control_stoped( proc );
    146c:	89 81       	ldd	r24, Y+1	; 0x01
    146e:	9a 81       	ldd	r25, Y+2	; 0x02
    1470:	0e 94 c8 0c 	call	0x1990	; 0x1990 <_proc_prio_control_stoped>
#endif // CONFIG_USE_HIGHEST_LOCKER
    _proc_run( proc );
    1474:	89 81       	ldd	r24, Y+1	; 0x01
    1476:	9a 81       	ldd	r25, Y+2	; 0x02
    1478:	0e 94 80 0b 	call	0x1700	; 0x1700 <_proc_run>
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
}
    147c:	0f 90       	pop	r0
    147e:	0f 90       	pop	r0
    1480:	0f 90       	pop	r0
    1482:	0f 90       	pop	r0
    1484:	cf 91       	pop	r28
    1486:	df 91       	pop	r29
    1488:	08 95       	ret

0000148a <pcounter_init>:
*                           http://www.0chan.ru/r/res/9996.html                          *
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
void pcounter_init(pcounter_t * pcounter)
{
    148a:	df 93       	push	r29
    148c:	cf 93       	push	r28
    148e:	00 d0       	rcall	.+0      	; 0x1490 <pcounter_init+0x6>
    1490:	0f 92       	push	r0
    1492:	cd b7       	in	r28, 0x3d	; 61
    1494:	de b7       	in	r29, 0x3e	; 62
    1496:	9b 83       	std	Y+3, r25	; 0x03
    1498:	8a 83       	std	Y+2, r24	; 0x02
    prio_t p;
    pcounter->index = (index_t)0;
    149a:	ea 81       	ldd	r30, Y+2	; 0x02
    149c:	fb 81       	ldd	r31, Y+3	; 0x03
    149e:	10 8a       	std	Z+16, r1	; 0x10
    for(p = 0; p < (index_t)BITS_IN_INDEX_T; p++)pcounter->counter[p] = (count_t)0;
    14a0:	19 82       	std	Y+1, r1	; 0x01
    14a2:	0f c0       	rjmp	.+30     	; 0x14c2 <pcounter_init+0x38>
    14a4:	89 81       	ldd	r24, Y+1	; 0x01
    14a6:	88 2f       	mov	r24, r24
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	2a 81       	ldd	r18, Y+2	; 0x02
    14ac:	3b 81       	ldd	r19, Y+3	; 0x03
    14ae:	88 0f       	add	r24, r24
    14b0:	99 1f       	adc	r25, r25
    14b2:	f9 01       	movw	r30, r18
    14b4:	e8 0f       	add	r30, r24
    14b6:	f9 1f       	adc	r31, r25
    14b8:	11 82       	std	Z+1, r1	; 0x01
    14ba:	10 82       	st	Z, r1
    14bc:	89 81       	ldd	r24, Y+1	; 0x01
    14be:	8f 5f       	subi	r24, 0xFF	; 255
    14c0:	89 83       	std	Y+1, r24	; 0x01
    14c2:	89 81       	ldd	r24, Y+1	; 0x01
    14c4:	88 30       	cpi	r24, 0x08	; 8
    14c6:	70 f3       	brcs	.-36     	; 0x14a4 <pcounter_init+0x1a>
}
    14c8:	0f 90       	pop	r0
    14ca:	0f 90       	pop	r0
    14cc:	0f 90       	pop	r0
    14ce:	cf 91       	pop	r28
    14d0:	df 91       	pop	r29
    14d2:	08 95       	ret

000014d4 <pcounter_inc>:

void pcounter_inc(pcounter_t * pcounter, prio_t prio)
{
    14d4:	df 93       	push	r29
    14d6:	cf 93       	push	r28
    14d8:	00 d0       	rcall	.+0      	; 0x14da <pcounter_inc+0x6>
    14da:	0f 92       	push	r0
    14dc:	cd b7       	in	r28, 0x3d	; 61
    14de:	de b7       	in	r29, 0x3e	; 62
    14e0:	9a 83       	std	Y+2, r25	; 0x02
    14e2:	89 83       	std	Y+1, r24	; 0x01
    14e4:	6b 83       	std	Y+3, r22	; 0x03
    pcounter->counter[prio]++;
    14e6:	8b 81       	ldd	r24, Y+3	; 0x03
    14e8:	68 2f       	mov	r22, r24
    14ea:	70 e0       	ldi	r23, 0x00	; 0
    14ec:	29 81       	ldd	r18, Y+1	; 0x01
    14ee:	3a 81       	ldd	r19, Y+2	; 0x02
    14f0:	cb 01       	movw	r24, r22
    14f2:	88 0f       	add	r24, r24
    14f4:	99 1f       	adc	r25, r25
    14f6:	f9 01       	movw	r30, r18
    14f8:	e8 0f       	add	r30, r24
    14fa:	f9 1f       	adc	r31, r25
    14fc:	80 81       	ld	r24, Z
    14fe:	91 81       	ldd	r25, Z+1	; 0x01
    1500:	ac 01       	movw	r20, r24
    1502:	4f 5f       	subi	r20, 0xFF	; 255
    1504:	5f 4f       	sbci	r21, 0xFF	; 255
    1506:	29 81       	ldd	r18, Y+1	; 0x01
    1508:	3a 81       	ldd	r19, Y+2	; 0x02
    150a:	cb 01       	movw	r24, r22
    150c:	88 0f       	add	r24, r24
    150e:	99 1f       	adc	r25, r25
    1510:	f9 01       	movw	r30, r18
    1512:	e8 0f       	add	r30, r24
    1514:	f9 1f       	adc	r31, r25
    1516:	51 83       	std	Z+1, r21	; 0x01
    1518:	40 83       	st	Z, r20
    pcounter->index |= ((index_t)1)<<prio;
    151a:	e9 81       	ldd	r30, Y+1	; 0x01
    151c:	fa 81       	ldd	r31, Y+2	; 0x02
    151e:	80 89       	ldd	r24, Z+16	; 0x10
    1520:	48 2f       	mov	r20, r24
    1522:	8b 81       	ldd	r24, Y+3	; 0x03
    1524:	28 2f       	mov	r18, r24
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	02 2e       	mov	r0, r18
    152e:	02 c0       	rjmp	.+4      	; 0x1534 <pcounter_inc+0x60>
    1530:	88 0f       	add	r24, r24
    1532:	99 1f       	adc	r25, r25
    1534:	0a 94       	dec	r0
    1536:	e2 f7       	brpl	.-8      	; 0x1530 <pcounter_inc+0x5c>
    1538:	84 2b       	or	r24, r20
    153a:	e9 81       	ldd	r30, Y+1	; 0x01
    153c:	fa 81       	ldd	r31, Y+2	; 0x02
    153e:	80 8b       	std	Z+16, r24	; 0x10
}
    1540:	0f 90       	pop	r0
    1542:	0f 90       	pop	r0
    1544:	0f 90       	pop	r0
    1546:	cf 91       	pop	r28
    1548:	df 91       	pop	r29
    154a:	08 95       	ret

0000154c <pcounter_dec>:

index_t pcounter_dec(pcounter_t * pcounter, prio_t prio)
{
    154c:	df 93       	push	r29
    154e:	cf 93       	push	r28
    1550:	00 d0       	rcall	.+0      	; 0x1552 <pcounter_dec+0x6>
    1552:	00 d0       	rcall	.+0      	; 0x1554 <pcounter_dec+0x8>
    1554:	cd b7       	in	r28, 0x3d	; 61
    1556:	de b7       	in	r29, 0x3e	; 62
    1558:	9b 83       	std	Y+3, r25	; 0x03
    155a:	8a 83       	std	Y+2, r24	; 0x02
    155c:	6c 83       	std	Y+4, r22	; 0x04
    index_t mask = ((index_t)1)<<prio;
    155e:	8c 81       	ldd	r24, Y+4	; 0x04
    1560:	28 2f       	mov	r18, r24
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	02 c0       	rjmp	.+4      	; 0x156e <pcounter_dec+0x22>
    156a:	88 0f       	add	r24, r24
    156c:	99 1f       	adc	r25, r25
    156e:	2a 95       	dec	r18
    1570:	e2 f7       	brpl	.-8      	; 0x156a <pcounter_dec+0x1e>
    1572:	89 83       	std	Y+1, r24	; 0x01
    pcounter->counter[prio]--;
    1574:	8c 81       	ldd	r24, Y+4	; 0x04
    1576:	68 2f       	mov	r22, r24
    1578:	70 e0       	ldi	r23, 0x00	; 0
    157a:	2a 81       	ldd	r18, Y+2	; 0x02
    157c:	3b 81       	ldd	r19, Y+3	; 0x03
    157e:	cb 01       	movw	r24, r22
    1580:	88 0f       	add	r24, r24
    1582:	99 1f       	adc	r25, r25
    1584:	f9 01       	movw	r30, r18
    1586:	e8 0f       	add	r30, r24
    1588:	f9 1f       	adc	r31, r25
    158a:	80 81       	ld	r24, Z
    158c:	91 81       	ldd	r25, Z+1	; 0x01
    158e:	ac 01       	movw	r20, r24
    1590:	41 50       	subi	r20, 0x01	; 1
    1592:	50 40       	sbci	r21, 0x00	; 0
    1594:	2a 81       	ldd	r18, Y+2	; 0x02
    1596:	3b 81       	ldd	r19, Y+3	; 0x03
    1598:	cb 01       	movw	r24, r22
    159a:	88 0f       	add	r24, r24
    159c:	99 1f       	adc	r25, r25
    159e:	f9 01       	movw	r30, r18
    15a0:	e8 0f       	add	r30, r24
    15a2:	f9 1f       	adc	r31, r25
    15a4:	51 83       	std	Z+1, r21	; 0x01
    15a6:	40 83       	st	Z, r20
    if(pcounter->counter[prio] == (count_t)0)pcounter->index &= ~mask;
    15a8:	8c 81       	ldd	r24, Y+4	; 0x04
    15aa:	88 2f       	mov	r24, r24
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	2a 81       	ldd	r18, Y+2	; 0x02
    15b0:	3b 81       	ldd	r19, Y+3	; 0x03
    15b2:	88 0f       	add	r24, r24
    15b4:	99 1f       	adc	r25, r25
    15b6:	f9 01       	movw	r30, r18
    15b8:	e8 0f       	add	r30, r24
    15ba:	f9 1f       	adc	r31, r25
    15bc:	80 81       	ld	r24, Z
    15be:	91 81       	ldd	r25, Z+1	; 0x01
    15c0:	00 97       	sbiw	r24, 0x00	; 0
    15c2:	51 f4       	brne	.+20     	; 0x15d8 <pcounter_dec+0x8c>
    15c4:	ea 81       	ldd	r30, Y+2	; 0x02
    15c6:	fb 81       	ldd	r31, Y+3	; 0x03
    15c8:	80 89       	ldd	r24, Z+16	; 0x10
    15ca:	98 2f       	mov	r25, r24
    15cc:	89 81       	ldd	r24, Y+1	; 0x01
    15ce:	80 95       	com	r24
    15d0:	89 23       	and	r24, r25
    15d2:	ea 81       	ldd	r30, Y+2	; 0x02
    15d4:	fb 81       	ldd	r31, Y+3	; 0x03
    15d6:	80 8b       	std	Z+16, r24	; 0x10
    return pcounter->index & mask;
    15d8:	ea 81       	ldd	r30, Y+2	; 0x02
    15da:	fb 81       	ldd	r31, Y+3	; 0x03
    15dc:	90 89       	ldd	r25, Z+16	; 0x10
    15de:	89 81       	ldd	r24, Y+1	; 0x01
    15e0:	89 23       	and	r24, r25
}
    15e2:	0f 90       	pop	r0
    15e4:	0f 90       	pop	r0
    15e6:	0f 90       	pop	r0
    15e8:	0f 90       	pop	r0
    15ea:	cf 91       	pop	r28
    15ec:	df 91       	pop	r29
    15ee:	08 95       	ret

000015f0 <proc_init_isr>:
    bool_t is_rt // если true, значит процесс будет иметть поведение RT
#ifdef CONFIG_MP
    ,affinity_t affinity
#endif // CONFIG_MP
)
{
    15f0:	8f 92       	push	r8
    15f2:	af 92       	push	r10
    15f4:	bf 92       	push	r11
    15f6:	cf 92       	push	r12
    15f8:	ef 92       	push	r14
    15fa:	ff 92       	push	r15
    15fc:	0f 93       	push	r16
    15fe:	1f 93       	push	r17
    1600:	df 93       	push	r29
    1602:	cf 93       	push	r28
    1604:	cd b7       	in	r28, 0x3d	; 61
    1606:	de b7       	in	r29, 0x3e	; 62
    1608:	61 97       	sbiw	r28, 0x11	; 17
    160a:	0f b6       	in	r0, 0x3f	; 63
    160c:	f8 94       	cli
    160e:	de bf       	out	0x3e, r29	; 62
    1610:	0f be       	out	0x3f, r0	; 63
    1612:	cd bf       	out	0x3d, r28	; 61
    1614:	9a 83       	std	Y+2, r25	; 0x02
    1616:	89 83       	std	Y+1, r24	; 0x01
    1618:	7c 83       	std	Y+4, r23	; 0x04
    161a:	6b 83       	std	Y+3, r22	; 0x03
    161c:	5e 83       	std	Y+6, r21	; 0x06
    161e:	4d 83       	std	Y+5, r20	; 0x05
    1620:	38 87       	std	Y+8, r19	; 0x08
    1622:	2f 83       	std	Y+7, r18	; 0x07
    1624:	1a 87       	std	Y+10, r17	; 0x0a
    1626:	09 87       	std	Y+9, r16	; 0x09
    1628:	fc 86       	std	Y+12, r15	; 0x0c
    162a:	eb 86       	std	Y+11, r14	; 0x0b
    162c:	cd 86       	std	Y+13, r12	; 0x0d
    162e:	bf 86       	std	Y+15, r11	; 0x0f
    1630:	ae 86       	std	Y+14, r10	; 0x0e
    1632:	88 8a       	std	Y+16, r8	; 0x10
    gitem_init( (gitem_t *)proc, prio );
    1634:	89 81       	ldd	r24, Y+1	; 0x01
    1636:	9a 81       	ldd	r25, Y+2	; 0x02
    1638:	6d 85       	ldd	r22, Y+13	; 0x0d
    163a:	0e 94 bc 05 	call	0xb78	; 0xb78 <gitem_init>
    proc->flags = ( is_rt )?PROC_FLG_RT:(flag_t)0;
    163e:	88 89       	ldd	r24, Y+16	; 0x10
    1640:	89 8b       	std	Y+17, r24	; 0x11
    1642:	89 89       	ldd	r24, Y+17	; 0x11
    1644:	88 23       	and	r24, r24
    1646:	11 f0       	breq	.+4      	; 0x164c <proc_init_isr+0x5c>
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	89 8b       	std	Y+17, r24	; 0x11
    164c:	89 89       	ldd	r24, Y+17	; 0x11
    164e:	e9 81       	ldd	r30, Y+1	; 0x01
    1650:	fa 81       	ldd	r31, Y+2	; 0x02
    1652:	83 87       	std	Z+11, r24	; 0x0b
#ifdef CONFIG_USE_HIGHEST_LOCKER
    pcounter_init(&proc->lres);
    1654:	89 81       	ldd	r24, Y+1	; 0x01
    1656:	9a 81       	ldd	r25, Y+2	; 0x02
    1658:	0d 96       	adiw	r24, 0x0d	; 13
    165a:	0e 94 45 0a 	call	0x148a	; 0x148a <pcounter_init>
    proc->base_prio = prio;
    165e:	e9 81       	ldd	r30, Y+1	; 0x01
    1660:	fa 81       	ldd	r31, Y+2	; 0x02
    1662:	8d 85       	ldd	r24, Y+13	; 0x0d
    1664:	84 87       	std	Z+12, r24	; 0x0c
#else
    proc->lres = (count_t)0;
#endif
    proc->time_quant = time_quant;
    1666:	8e 85       	ldd	r24, Y+14	; 0x0e
    1668:	9f 85       	ldd	r25, Y+15	; 0x0f
    166a:	e9 81       	ldd	r30, Y+1	; 0x01
    166c:	fa 81       	ldd	r31, Y+2	; 0x02
    166e:	97 8f       	std	Z+31, r25	; 0x1f
    1670:	86 8f       	std	Z+30, r24	; 0x1e
    proc->timer = time_quant;
    1672:	8e 85       	ldd	r24, Y+14	; 0x0e
    1674:	9f 85       	ldd	r25, Y+15	; 0x0f
    1676:	e9 81       	ldd	r30, Y+1	; 0x01
    1678:	fa 81       	ldd	r31, Y+2	; 0x02
    167a:	91 a3       	std	Z+33, r25	; 0x21
    167c:	80 a3       	std	Z+32, r24	; 0x20
#ifdef CONFIG_MP
    proc->core_id = (core_id_t)0;
    proc->affinity = affinity;
#endif // CONFIG_MP
    proc->pmain = pmain;
    167e:	e9 81       	ldd	r30, Y+1	; 0x01
    1680:	fa 81       	ldd	r31, Y+2	; 0x02
    1682:	8b 81       	ldd	r24, Y+3	; 0x03
    1684:	9c 81       	ldd	r25, Y+4	; 0x04
    1686:	93 a3       	std	Z+35, r25	; 0x23
    1688:	82 a3       	std	Z+34, r24	; 0x22
    proc->sv_hook = sv_hook;
    168a:	e9 81       	ldd	r30, Y+1	; 0x01
    168c:	fa 81       	ldd	r31, Y+2	; 0x02
    168e:	8d 81       	ldd	r24, Y+5	; 0x05
    1690:	9e 81       	ldd	r25, Y+6	; 0x06
    1692:	95 a3       	std	Z+37, r25	; 0x25
    1694:	84 a3       	std	Z+36, r24	; 0x24
    proc->rs_hook = rs_hook;
    1696:	e9 81       	ldd	r30, Y+1	; 0x01
    1698:	fa 81       	ldd	r31, Y+2	; 0x02
    169a:	8f 81       	ldd	r24, Y+7	; 0x07
    169c:	98 85       	ldd	r25, Y+8	; 0x08
    169e:	97 a3       	std	Z+39, r25	; 0x27
    16a0:	86 a3       	std	Z+38, r24	; 0x26
    proc->arg = arg;
    16a2:	e9 81       	ldd	r30, Y+1	; 0x01
    16a4:	fa 81       	ldd	r31, Y+2	; 0x02
    16a6:	89 85       	ldd	r24, Y+9	; 0x09
    16a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    16aa:	91 a7       	std	Z+41, r25	; 0x29
    16ac:	80 a7       	std	Z+40, r24	; 0x28
    proc->sstart = sstart;
    16ae:	e9 81       	ldd	r30, Y+1	; 0x01
    16b0:	fa 81       	ldd	r31, Y+2	; 0x02
    16b2:	8b 85       	ldd	r24, Y+11	; 0x0b
    16b4:	9c 85       	ldd	r25, Y+12	; 0x0c
    16b6:	93 a7       	std	Z+43, r25	; 0x2b
    16b8:	82 a7       	std	Z+42, r24	; 0x2a
    if( sstart )proc->spointer = proc_stack_init(sstart, (code_t)proc_run_wrapper, (void *)proc);
    16ba:	8b 85       	ldd	r24, Y+11	; 0x0b
    16bc:	9c 85       	ldd	r25, Y+12	; 0x0c
    16be:	00 97       	sbiw	r24, 0x00	; 0
    16c0:	71 f0       	breq	.+28     	; 0x16de <proc_init_isr+0xee>
    16c2:	4d eb       	ldi	r20, 0xBD	; 189
    16c4:	52 e0       	ldi	r21, 0x02	; 2
    16c6:	8b 85       	ldd	r24, Y+11	; 0x0b
    16c8:	9c 85       	ldd	r25, Y+12	; 0x0c
    16ca:	29 81       	ldd	r18, Y+1	; 0x01
    16cc:	3a 81       	ldd	r19, Y+2	; 0x02
    16ce:	ba 01       	movw	r22, r20
    16d0:	a9 01       	movw	r20, r18
    16d2:	0e 94 df 00 	call	0x1be	; 0x1be <proc_stack_init>
    16d6:	e9 81       	ldd	r30, Y+1	; 0x01
    16d8:	fa 81       	ldd	r31, Y+2	; 0x02
    16da:	95 a7       	std	Z+45, r25	; 0x2d
    16dc:	84 a7       	std	Z+44, r24	; 0x2c
}
    16de:	61 96       	adiw	r28, 0x11	; 17
    16e0:	0f b6       	in	r0, 0x3f	; 63
    16e2:	f8 94       	cli
    16e4:	de bf       	out	0x3e, r29	; 62
    16e6:	0f be       	out	0x3f, r0	; 63
    16e8:	cd bf       	out	0x3d, r28	; 61
    16ea:	cf 91       	pop	r28
    16ec:	df 91       	pop	r29
    16ee:	1f 91       	pop	r17
    16f0:	0f 91       	pop	r16
    16f2:	ff 90       	pop	r15
    16f4:	ef 90       	pop	r14
    16f6:	cf 90       	pop	r12
    16f8:	bf 90       	pop	r11
    16fa:	af 90       	pop	r10
    16fc:	8f 90       	pop	r8
    16fe:	08 95       	ret

00001700 <_proc_run>:
    spin_unlock( &proc_sched->lock );
}
#endif // CONFIG_MP

void _proc_run( proc_t * proc )
{
    1700:	df 93       	push	r29
    1702:	cf 93       	push	r28
    1704:	00 d0       	rcall	.+0      	; 0x1706 <_proc_run+0x6>
    1706:	cd b7       	in	r28, 0x3d	; 61
    1708:	de b7       	in	r29, 0x3e	; 62
    170a:	9a 83       	std	Y+2, r25	; 0x02
    170c:	89 83       	std	Y+1, r24	; 0x01
    proc->flags |= PROC_FLG_RUN;
    170e:	e9 81       	ldd	r30, Y+1	; 0x01
    1710:	fa 81       	ldd	r31, Y+2	; 0x02
    1712:	83 85       	ldd	r24, Z+11	; 0x0b
    1714:	82 60       	ori	r24, 0x02	; 2
    1716:	e9 81       	ldd	r30, Y+1	; 0x01
    1718:	fa 81       	ldd	r31, Y+2	; 0x02
    171a:	83 87       	std	Z+11, r24	; 0x0b
    spin_lock( &kernel.stat_lock );
    proc->core_id = sched_load_balancer( proc, (stat_t *)kernel.stat );
    stat_inc( proc, (stat_t *)kernel.stat+proc->core_id );
    spin_unlock( &kernel.stat_lock );
#endif
    _proc_run_( proc );
    171c:	89 81       	ldd	r24, Y+1	; 0x01
    171e:	9a 81       	ldd	r25, Y+2	; 0x02
    1720:	20 91 17 01 	lds	r18, 0x0117
    1724:	30 91 18 01 	lds	r19, 0x0118
    1728:	b9 01       	movw	r22, r18
    172a:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <gitem_insert>
#ifdef CONFIG_MP
    resched( proc->core_id );
#else
    resched();
    172e:	0e 94 fe 00 	call	0x1fc	; 0x1fc <resched>
#endif // CONFIG_MP
}
    1732:	0f 90       	pop	r0
    1734:	0f 90       	pop	r0
    1736:	cf 91       	pop	r28
    1738:	df 91       	pop	r29
    173a:	08 95       	ret

0000173c <proc_run_isr>:
// Функция общего пользования - запуск процесса из обработчика прерывания, прерывания должны быть запрещены во время запуска
bool_t proc_run_isr(proc_t * proc)
{
    173c:	df 93       	push	r29
    173e:	cf 93       	push	r28
    1740:	00 d0       	rcall	.+0      	; 0x1742 <proc_run_isr+0x6>
    1742:	0f 92       	push	r0
    1744:	cd b7       	in	r28, 0x3d	; 61
    1746:	de b7       	in	r29, 0x3e	; 62
    1748:	9b 83       	std	Y+3, r25	; 0x03
    174a:	8a 83       	std	Y+2, r24	; 0x02
    bool_t ret = (bool_t)1;
    174c:	81 e0       	ldi	r24, 0x01	; 1
    174e:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    if( proc->flags & (PROC_FLG_RUN|PROC_FLG_QUEUE|PROC_FLG_WAIT|PROC_FLG_END|PROC_FLG_DEAD) )
    1750:	ea 81       	ldd	r30, Y+2	; 0x02
    1752:	fb 81       	ldd	r31, Y+3	; 0x03
    1754:	83 85       	ldd	r24, Z+11	; 0x0b
    1756:	88 2f       	mov	r24, r24
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	8a 7d       	andi	r24, 0xDA	; 218
    175c:	90 70       	andi	r25, 0x00	; 0
    175e:	00 97       	sbiw	r24, 0x00	; 0
    1760:	11 f0       	breq	.+4      	; 0x1766 <proc_run_isr+0x2a>
    {
        ret = (bool_t)0;
    1762:	19 82       	std	Y+1, r1	; 0x01
    1764:	04 c0       	rjmp	.+8      	; 0x176e <proc_run_isr+0x32>
        goto end;
    }
    _proc_run( proc );
    1766:	8a 81       	ldd	r24, Y+2	; 0x02
    1768:	9b 81       	ldd	r25, Y+3	; 0x03
    176a:	0e 94 80 0b 	call	0x1700	; 0x1700 <_proc_run>
end:
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    return ret;
    176e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1770:	0f 90       	pop	r0
    1772:	0f 90       	pop	r0
    1774:	0f 90       	pop	r0
    1776:	cf 91       	pop	r28
    1778:	df 91       	pop	r29
    177a:	08 95       	ret

0000177c <proc_restart_isr>:
// Перезепуск процесса из обработчика прерываний, прерывания должны быть запрещены
bool_t proc_restart_isr(proc_t * proc)
{
    177c:	df 93       	push	r29
    177e:	cf 93       	push	r28
    1780:	00 d0       	rcall	.+0      	; 0x1782 <proc_restart_isr+0x6>
    1782:	0f 92       	push	r0
    1784:	cd b7       	in	r28, 0x3d	; 61
    1786:	de b7       	in	r29, 0x3e	; 62
    1788:	9b 83       	std	Y+3, r25	; 0x03
    178a:	8a 83       	std	Y+2, r24	; 0x02
    bool_t ret = (bool_t)1;
    178c:	81 e0       	ldi	r24, 0x01	; 1
    178e:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif
    if( proc->flags & (PROC_FLG_RUN|PROC_FLG_HOLD|PROC_FLG_QUEUE|PROC_FLG_WAIT|PROC_FLG_PRE_END|PROC_FLG_DEAD) )
    1790:	ea 81       	ldd	r30, Y+2	; 0x02
    1792:	fb 81       	ldd	r31, Y+3	; 0x03
    1794:	83 85       	ldd	r24, Z+11	; 0x0b
    1796:	88 2f       	mov	r24, r24
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	8e 7b       	andi	r24, 0xBE	; 190
    179c:	90 70       	andi	r25, 0x00	; 0
    179e:	00 97       	sbiw	r24, 0x00	; 0
    17a0:	11 f0       	breq	.+4      	; 0x17a6 <proc_restart_isr+0x2a>
    {
        ret = (bool_t)0;
    17a2:	19 82       	std	Y+1, r1	; 0x01
    17a4:	2d c0       	rjmp	.+90     	; 0x1800 <proc_restart_isr+0x84>
        goto end;
    }
    proc->flags = ( proc->flags & PROC_FLG_RT )?PROC_FLG_RT:(flag_t)0;
    17a6:	ea 81       	ldd	r30, Y+2	; 0x02
    17a8:	fb 81       	ldd	r31, Y+3	; 0x03
    17aa:	83 85       	ldd	r24, Z+11	; 0x0b
    17ac:	81 70       	andi	r24, 0x01	; 1
    17ae:	ea 81       	ldd	r30, Y+2	; 0x02
    17b0:	fb 81       	ldd	r31, Y+3	; 0x03
    17b2:	83 87       	std	Z+11, r24	; 0x0b
#ifdef CONFIG_USE_HIGHEST_LOCKER
    pcounter_init(&proc->lres);
    17b4:	8a 81       	ldd	r24, Y+2	; 0x02
    17b6:	9b 81       	ldd	r25, Y+3	; 0x03
    17b8:	0d 96       	adiw	r24, 0x0d	; 13
    17ba:	0e 94 45 0a 	call	0x148a	; 0x148a <pcounter_init>
#else
    proc->lres = (count_t)0;
#endif
    proc->timer = proc->time_quant;
    17be:	ea 81       	ldd	r30, Y+2	; 0x02
    17c0:	fb 81       	ldd	r31, Y+3	; 0x03
    17c2:	86 8d       	ldd	r24, Z+30	; 0x1e
    17c4:	97 8d       	ldd	r25, Z+31	; 0x1f
    17c6:	ea 81       	ldd	r30, Y+2	; 0x02
    17c8:	fb 81       	ldd	r31, Y+3	; 0x03
    17ca:	91 a3       	std	Z+33, r25	; 0x21
    17cc:	80 a3       	std	Z+32, r24	; 0x20

    if( proc->sstart )proc->spointer = proc_stack_init( proc->sstart, (code_t)proc_run_wrapper, (void *)proc );
    17ce:	ea 81       	ldd	r30, Y+2	; 0x02
    17d0:	fb 81       	ldd	r31, Y+3	; 0x03
    17d2:	82 a5       	ldd	r24, Z+42	; 0x2a
    17d4:	93 a5       	ldd	r25, Z+43	; 0x2b
    17d6:	00 97       	sbiw	r24, 0x00	; 0
    17d8:	79 f0       	breq	.+30     	; 0x17f8 <proc_restart_isr+0x7c>
    17da:	ea 81       	ldd	r30, Y+2	; 0x02
    17dc:	fb 81       	ldd	r31, Y+3	; 0x03
    17de:	82 a5       	ldd	r24, Z+42	; 0x2a
    17e0:	93 a5       	ldd	r25, Z+43	; 0x2b
    17e2:	2d eb       	ldi	r18, 0xBD	; 189
    17e4:	32 e0       	ldi	r19, 0x02	; 2
    17e6:	4a 81       	ldd	r20, Y+2	; 0x02
    17e8:	5b 81       	ldd	r21, Y+3	; 0x03
    17ea:	b9 01       	movw	r22, r18
    17ec:	0e 94 df 00 	call	0x1be	; 0x1be <proc_stack_init>
    17f0:	ea 81       	ldd	r30, Y+2	; 0x02
    17f2:	fb 81       	ldd	r31, Y+3	; 0x03
    17f4:	95 a7       	std	Z+45, r25	; 0x2d
    17f6:	84 a7       	std	Z+44, r24	; 0x2c
    _proc_run( proc );
    17f8:	8a 81       	ldd	r24, Y+2	; 0x02
    17fa:	9b 81       	ldd	r25, Y+3	; 0x03
    17fc:	0e 94 80 0b 	call	0x1700	; 0x1700 <_proc_run>
end:
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif
    return ret;
    1800:	89 81       	ldd	r24, Y+1	; 0x01
}
    1802:	0f 90       	pop	r0
    1804:	0f 90       	pop	r0
    1806:	0f 90       	pop	r0
    1808:	cf 91       	pop	r28
    180a:	df 91       	pop	r29
    180c:	08 95       	ret

0000180e <_proc_stop>:
        spin_unlock( xlist_lock );
    }
}
#endif // CONFIG_MP
void _proc_stop(proc_t * proc)
{
    180e:	df 93       	push	r29
    1810:	cf 93       	push	r28
    1812:	00 d0       	rcall	.+0      	; 0x1814 <_proc_stop+0x6>
    1814:	cd b7       	in	r28, 0x3d	; 61
    1816:	de b7       	in	r29, 0x3e	; 62
    1818:	9a 83       	std	Y+2, r25	; 0x02
    181a:	89 83       	std	Y+1, r24	; 0x01
    proc->flags &= ~PROC_FLG_RUN;
    181c:	e9 81       	ldd	r30, Y+1	; 0x01
    181e:	fa 81       	ldd	r31, Y+2	; 0x02
    1820:	83 85       	ldd	r24, Z+11	; 0x0b
    1822:	8d 7f       	andi	r24, 0xFD	; 253
    1824:	e9 81       	ldd	r30, Y+1	; 0x01
    1826:	fa 81       	ldd	r31, Y+2	; 0x02
    1828:	83 87       	std	Z+11, r24	; 0x0b
    _proc_stop_( proc );
    182a:	89 81       	ldd	r24, Y+1	; 0x01
    182c:	9a 81       	ldd	r25, Y+2	; 0x02
    182e:	0e 94 3f 07 	call	0xe7e	; 0xe7e <gitem_cut>
#ifdef CONFIG_MP
    resched( proc->core_id );
#else
    resched();
    1832:	0e 94 fe 00 	call	0x1fc	; 0x1fc <resched>
#endif // CONFIG_MP
}
    1836:	0f 90       	pop	r0
    1838:	0f 90       	pop	r0
    183a:	cf 91       	pop	r28
    183c:	df 91       	pop	r29
    183e:	08 95       	ret

00001840 <proc_stop_isr>:
// Останов процесса из обработчика прерываний, прерывания должны быть запрещены
bool_t proc_stop_isr(proc_t * proc)
{
    1840:	df 93       	push	r29
    1842:	cf 93       	push	r28
    1844:	00 d0       	rcall	.+0      	; 0x1846 <proc_stop_isr+0x6>
    1846:	0f 92       	push	r0
    1848:	cd b7       	in	r28, 0x3d	; 61
    184a:	de b7       	in	r29, 0x3e	; 62
    184c:	9b 83       	std	Y+3, r25	; 0x03
    184e:	8a 83       	std	Y+2, r24	; 0x02
    bool_t ret = (bool_t)0;
    1850:	19 82       	std	Y+1, r1	; 0x01
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    //Проверка флагов
    //В случчае PROC_FLG_WAIT будем обрабатывать PROC_FLG_PRE_END на выходе из sig_wait.
    //В случае PROC_FLG_HOLD или PROC_FLG_QUEUE будем обрабатывать PROC_FLG_PRE_END на выходе из функции, освобождающей общий ресурс.
    if( proc->flags & (PROC_FLG_HOLD|PROC_FLG_QUEUE|PROC_FLG_WAIT) )proc->flags |= PROC_FLG_PRE_END;
    1852:	ea 81       	ldd	r30, Y+2	; 0x02
    1854:	fb 81       	ldd	r31, Y+3	; 0x03
    1856:	83 85       	ldd	r24, Z+11	; 0x0b
    1858:	88 2f       	mov	r24, r24
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	8c 71       	andi	r24, 0x1C	; 28
    185e:	90 70       	andi	r25, 0x00	; 0
    1860:	00 97       	sbiw	r24, 0x00	; 0
    1862:	41 f0       	breq	.+16     	; 0x1874 <proc_stop_isr+0x34>
    1864:	ea 81       	ldd	r30, Y+2	; 0x02
    1866:	fb 81       	ldd	r31, Y+3	; 0x03
    1868:	83 85       	ldd	r24, Z+11	; 0x0b
    186a:	80 62       	ori	r24, 0x20	; 32
    186c:	ea 81       	ldd	r30, Y+2	; 0x02
    186e:	fb 81       	ldd	r31, Y+3	; 0x03
    1870:	83 87       	std	Z+11, r24	; 0x0b
    1872:	0f c0       	rjmp	.+30     	; 0x1892 <proc_stop_isr+0x52>
    else if( proc->flags & PROC_FLG_RUN )
    1874:	ea 81       	ldd	r30, Y+2	; 0x02
    1876:	fb 81       	ldd	r31, Y+3	; 0x03
    1878:	83 85       	ldd	r24, Z+11	; 0x0b
    187a:	88 2f       	mov	r24, r24
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	82 70       	andi	r24, 0x02	; 2
    1880:	90 70       	andi	r25, 0x00	; 0
    1882:	00 97       	sbiw	r24, 0x00	; 0
    1884:	31 f0       	breq	.+12     	; 0x1892 <proc_stop_isr+0x52>
    {
        _proc_stop( proc );
    1886:	8a 81       	ldd	r24, Y+2	; 0x02
    1888:	9b 81       	ldd	r25, Y+3	; 0x03
    188a:	0e 94 07 0c 	call	0x180e	; 0x180e <_proc_stop>
        ret = (bool_t)1;
    188e:	81 e0       	ldi	r24, 0x01	; 1
    1890:	89 83       	std	Y+1, r24	; 0x01
    }
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    return ret;
    1892:	89 81       	ldd	r24, Y+1	; 0x01
}
    1894:	0f 90       	pop	r0
    1896:	0f 90       	pop	r0
    1898:	0f 90       	pop	r0
    189a:	cf 91       	pop	r28
    189c:	df 91       	pop	r29
    189e:	08 95       	ret

000018a0 <_proc_flag_stop_isr>:
    exit_crit_sec();
#endif
}

void _proc_flag_stop_isr( flag_t mask )
{
    18a0:	df 93       	push	r29
    18a2:	cf 93       	push	r28
    18a4:	00 d0       	rcall	.+0      	; 0x18a6 <_proc_flag_stop_isr+0x6>
    18a6:	0f 92       	push	r0
    18a8:	cd b7       	in	r28, 0x3d	; 61
    18aa:	de b7       	in	r29, 0x3e	; 62
    18ac:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = current_proc();
    18ae:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <current_proc>
    18b2:	9a 83       	std	Y+2, r25	; 0x02
    18b4:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif //CONFIG_MP
    proc->flags &= mask;
    18b6:	e9 81       	ldd	r30, Y+1	; 0x01
    18b8:	fa 81       	ldd	r31, Y+2	; 0x02
    18ba:	93 85       	ldd	r25, Z+11	; 0x0b
    18bc:	8b 81       	ldd	r24, Y+3	; 0x03
    18be:	89 23       	and	r24, r25
    18c0:	e9 81       	ldd	r30, Y+1	; 0x01
    18c2:	fa 81       	ldd	r31, Y+2	; 0x02
    18c4:	83 87       	std	Z+11, r24	; 0x0b
    if(  ( proc->flags & PROC_FLG_PRE_END ) && (!(proc->flags & PROC_FLG_HOLD))  )
    18c6:	e9 81       	ldd	r30, Y+1	; 0x01
    18c8:	fa 81       	ldd	r31, Y+2	; 0x02
    18ca:	83 85       	ldd	r24, Z+11	; 0x0b
    18cc:	88 2f       	mov	r24, r24
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	80 72       	andi	r24, 0x20	; 32
    18d2:	90 70       	andi	r25, 0x00	; 0
    18d4:	00 97       	sbiw	r24, 0x00	; 0
    18d6:	a1 f0       	breq	.+40     	; 0x1900 <_proc_flag_stop_isr+0x60>
    18d8:	e9 81       	ldd	r30, Y+1	; 0x01
    18da:	fa 81       	ldd	r31, Y+2	; 0x02
    18dc:	83 85       	ldd	r24, Z+11	; 0x0b
    18de:	88 2f       	mov	r24, r24
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	84 70       	andi	r24, 0x04	; 4
    18e4:	90 70       	andi	r25, 0x00	; 0
    18e6:	00 97       	sbiw	r24, 0x00	; 0
    18e8:	59 f4       	brne	.+22     	; 0x1900 <_proc_flag_stop_isr+0x60>
    {
        proc->flags &= ~PROC_FLG_PRE_END;
    18ea:	e9 81       	ldd	r30, Y+1	; 0x01
    18ec:	fa 81       	ldd	r31, Y+2	; 0x02
    18ee:	83 85       	ldd	r24, Z+11	; 0x0b
    18f0:	8f 7d       	andi	r24, 0xDF	; 223
    18f2:	e9 81       	ldd	r30, Y+1	; 0x01
    18f4:	fa 81       	ldd	r31, Y+2	; 0x02
    18f6:	83 87       	std	Z+11, r24	; 0x0b
        _proc_stop( proc );
    18f8:	89 81       	ldd	r24, Y+1	; 0x01
    18fa:	9a 81       	ldd	r25, Y+2	; 0x02
    18fc:	0e 94 07 0c 	call	0x180e	; 0x180e <_proc_stop>
    }
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif //CONFIG_MP
}
    1900:	0f 90       	pop	r0
    1902:	0f 90       	pop	r0
    1904:	0f 90       	pop	r0
    1906:	cf 91       	pop	r28
    1908:	df 91       	pop	r29
    190a:	08 95       	ret

0000190c <_proc_lres_inc>:
    proc_t * proc
#ifdef CONFIG_USE_HIGHEST_LOCKER
    ,prio_t prio
#endif
)
{
    190c:	df 93       	push	r29
    190e:	cf 93       	push	r28
    1910:	00 d0       	rcall	.+0      	; 0x1912 <_proc_lres_inc+0x6>
    1912:	0f 92       	push	r0
    1914:	cd b7       	in	r28, 0x3d	; 61
    1916:	de b7       	in	r29, 0x3e	; 62
    1918:	9a 83       	std	Y+2, r25	; 0x02
    191a:	89 83       	std	Y+1, r24	; 0x01
    191c:	6b 83       	std	Y+3, r22	; 0x03
#ifdef CONFIG_USE_HIGHEST_LOCKER
    if( proc->lres.index == (index_t)0 )proc->flags |= PROC_FLG_HOLD;
    191e:	e9 81       	ldd	r30, Y+1	; 0x01
    1920:	fa 81       	ldd	r31, Y+2	; 0x02
    1922:	85 8d       	ldd	r24, Z+29	; 0x1d
    1924:	88 23       	and	r24, r24
    1926:	39 f4       	brne	.+14     	; 0x1936 <_proc_lres_inc+0x2a>
    1928:	e9 81       	ldd	r30, Y+1	; 0x01
    192a:	fa 81       	ldd	r31, Y+2	; 0x02
    192c:	83 85       	ldd	r24, Z+11	; 0x0b
    192e:	84 60       	ori	r24, 0x04	; 4
    1930:	e9 81       	ldd	r30, Y+1	; 0x01
    1932:	fa 81       	ldd	r31, Y+2	; 0x02
    1934:	83 87       	std	Z+11, r24	; 0x0b
    pcounter_inc( &proc->lres, prio );
    1936:	89 81       	ldd	r24, Y+1	; 0x01
    1938:	9a 81       	ldd	r25, Y+2	; 0x02
    193a:	0d 96       	adiw	r24, 0x0d	; 13
    193c:	6b 81       	ldd	r22, Y+3	; 0x03
    193e:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <pcounter_inc>
#else
    if( proc->lres == (count_t)0 )proc->flags |= PROC_FLG_HOLD;
    proc->lres++;
#endif
}
    1942:	0f 90       	pop	r0
    1944:	0f 90       	pop	r0
    1946:	0f 90       	pop	r0
    1948:	cf 91       	pop	r28
    194a:	df 91       	pop	r29
    194c:	08 95       	ret

0000194e <_proc_lres_dec>:
    proc_t * proc
#ifdef CONFIG_USE_HIGHEST_LOCKER
    ,prio_t prio
#endif
)
{
    194e:	df 93       	push	r29
    1950:	cf 93       	push	r28
    1952:	00 d0       	rcall	.+0      	; 0x1954 <_proc_lres_dec+0x6>
    1954:	0f 92       	push	r0
    1956:	cd b7       	in	r28, 0x3d	; 61
    1958:	de b7       	in	r29, 0x3e	; 62
    195a:	9a 83       	std	Y+2, r25	; 0x02
    195c:	89 83       	std	Y+1, r24	; 0x01
    195e:	6b 83       	std	Y+3, r22	; 0x03
#ifdef CONFIG_USE_HIGHEST_LOCKER
    pcounter_dec( &proc->lres, prio );
    1960:	89 81       	ldd	r24, Y+1	; 0x01
    1962:	9a 81       	ldd	r25, Y+2	; 0x02
    1964:	0d 96       	adiw	r24, 0x0d	; 13
    1966:	6b 81       	ldd	r22, Y+3	; 0x03
    1968:	0e 94 a6 0a 	call	0x154c	; 0x154c <pcounter_dec>
    if( proc->lres.index == (index_t)0 )proc->flags &= ~PROC_FLG_HOLD;
    196c:	e9 81       	ldd	r30, Y+1	; 0x01
    196e:	fa 81       	ldd	r31, Y+2	; 0x02
    1970:	85 8d       	ldd	r24, Z+29	; 0x1d
    1972:	88 23       	and	r24, r24
    1974:	39 f4       	brne	.+14     	; 0x1984 <_proc_lres_dec+0x36>
    1976:	e9 81       	ldd	r30, Y+1	; 0x01
    1978:	fa 81       	ldd	r31, Y+2	; 0x02
    197a:	83 85       	ldd	r24, Z+11	; 0x0b
    197c:	8b 7f       	andi	r24, 0xFB	; 251
    197e:	e9 81       	ldd	r30, Y+1	; 0x01
    1980:	fa 81       	ldd	r31, Y+2	; 0x02
    1982:	83 87       	std	Z+11, r24	; 0x0b
#else
    if( proc->lres!= (count_t)0 )proc->lres--;
    if( proc->lres == (count_t)0 )proc->flags &= ~PROC_FLG_HOLD;
#endif
}
    1984:	0f 90       	pop	r0
    1986:	0f 90       	pop	r0
    1988:	0f 90       	pop	r0
    198a:	cf 91       	pop	r28
    198c:	df 91       	pop	r29
    198e:	08 95       	ret

00001990 <_proc_prio_control_stoped>:
#ifdef CONFIG_USE_HIGHEST_LOCKER
// Будет использоваться в mutex-ах и т.п., процесс должен сам вызывать эту функцию, при этом он должен быть вырезан из списка выполняющихся.
void _proc_prio_control_stoped( proc_t * proc )
{
    1990:	df 93       	push	r29
    1992:	cf 93       	push	r28
    1994:	cd b7       	in	r28, 0x3d	; 61
    1996:	de b7       	in	r29, 0x3e	; 62
    1998:	27 97       	sbiw	r28, 0x07	; 7
    199a:	0f b6       	in	r0, 0x3f	; 63
    199c:	f8 94       	cli
    199e:	de bf       	out	0x3e, r29	; 62
    19a0:	0f be       	out	0x3f, r0	; 63
    19a2:	cd bf       	out	0x3d, r28	; 61
    19a4:	9b 83       	std	Y+3, r25	; 0x03
    19a6:	8a 83       	std	Y+2, r24	; 0x02
    if(proc->lres.index != (index_t)0)
    19a8:	ea 81       	ldd	r30, Y+2	; 0x02
    19aa:	fb 81       	ldd	r31, Y+3	; 0x03
    19ac:	85 8d       	ldd	r24, Z+29	; 0x1d
    19ae:	88 23       	and	r24, r24
    19b0:	e9 f0       	breq	.+58     	; 0x19ec <_proc_prio_control_stoped+0x5c>
    {
        prio_t locker_prio = index_search( proc->lres.index );
    19b2:	ea 81       	ldd	r30, Y+2	; 0x02
    19b4:	fb 81       	ldd	r31, Y+3	; 0x03
    19b6:	85 8d       	ldd	r24, Z+29	; 0x1d
    19b8:	0e 94 63 08 	call	0x10c6	; 0x10c6 <index_search>
    19bc:	89 83       	std	Y+1, r24	; 0x01
        ((gitem_t *)proc)->group->prio = ( locker_prio < proc->base_prio )?locker_prio:proc->base_prio;
    19be:	ea 81       	ldd	r30, Y+2	; 0x02
    19c0:	fb 81       	ldd	r31, Y+3	; 0x03
    19c2:	84 81       	ldd	r24, Z+4	; 0x04
    19c4:	95 81       	ldd	r25, Z+5	; 0x05
    19c6:	9e 83       	std	Y+6, r25	; 0x06
    19c8:	8d 83       	std	Y+5, r24	; 0x05
    19ca:	ea 81       	ldd	r30, Y+2	; 0x02
    19cc:	fb 81       	ldd	r31, Y+3	; 0x03
    19ce:	84 85       	ldd	r24, Z+12	; 0x0c
    19d0:	99 81       	ldd	r25, Y+1	; 0x01
    19d2:	9f 83       	std	Y+7, r25	; 0x07
    19d4:	8c 83       	std	Y+4, r24	; 0x04
    19d6:	ec 81       	ldd	r30, Y+4	; 0x04
    19d8:	ff 81       	ldd	r31, Y+7	; 0x07
    19da:	fe 17       	cp	r31, r30
    19dc:	10 f4       	brcc	.+4      	; 0x19e2 <_proc_prio_control_stoped+0x52>
    19de:	8f 81       	ldd	r24, Y+7	; 0x07
    19e0:	8c 83       	std	Y+4, r24	; 0x04
    19e2:	8c 81       	ldd	r24, Y+4	; 0x04
    19e4:	ed 81       	ldd	r30, Y+5	; 0x05
    19e6:	fe 81       	ldd	r31, Y+6	; 0x06
    19e8:	82 83       	std	Z+2, r24	; 0x02
    19ea:	0a c0       	rjmp	.+20     	; 0x1a00 <_proc_prio_control_stoped+0x70>
    }
    else
    {
        ((gitem_t *)proc)->group->prio = proc->base_prio;
    19ec:	ea 81       	ldd	r30, Y+2	; 0x02
    19ee:	fb 81       	ldd	r31, Y+3	; 0x03
    19f0:	a4 81       	ldd	r26, Z+4	; 0x04
    19f2:	b5 81       	ldd	r27, Z+5	; 0x05
    19f4:	ea 81       	ldd	r30, Y+2	; 0x02
    19f6:	fb 81       	ldd	r31, Y+3	; 0x03
    19f8:	84 85       	ldd	r24, Z+12	; 0x0c
    19fa:	12 96       	adiw	r26, 0x02	; 2
    19fc:	8c 93       	st	X, r24
    19fe:	12 97       	sbiw	r26, 0x02	; 2
    }
}
    1a00:	27 96       	adiw	r28, 0x07	; 7
    1a02:	0f b6       	in	r0, 0x3f	; 63
    1a04:	f8 94       	cli
    1a06:	de bf       	out	0x3e, r29	; 62
    1a08:	0f be       	out	0x3f, r0	; 63
    1a0a:	cd bf       	out	0x3d, r28	; 61
    1a0c:	cf 91       	pop	r28
    1a0e:	df 91       	pop	r29
    1a10:	08 95       	ret

00001a12 <_proc_prio_control_running>:
void _proc_prio_control_running( proc_t * proc )
{
    1a12:	df 93       	push	r29
    1a14:	cf 93       	push	r28
    1a16:	00 d0       	rcall	.+0      	; 0x1a18 <_proc_prio_control_running+0x6>
    1a18:	00 d0       	rcall	.+0      	; 0x1a1a <_proc_prio_control_running+0x8>
    1a1a:	00 d0       	rcall	.+0      	; 0x1a1c <_proc_prio_control_running+0xa>
    1a1c:	cd b7       	in	r28, 0x3d	; 61
    1a1e:	de b7       	in	r29, 0x3e	; 62
    1a20:	9c 83       	std	Y+4, r25	; 0x04
    1a22:	8b 83       	std	Y+3, r24	; 0x03
    prio_t new_prio;
    if(proc->lres.index != (index_t)0)
    1a24:	eb 81       	ldd	r30, Y+3	; 0x03
    1a26:	fc 81       	ldd	r31, Y+4	; 0x04
    1a28:	85 8d       	ldd	r24, Z+29	; 0x1d
    1a2a:	88 23       	and	r24, r24
    1a2c:	a9 f0       	breq	.+42     	; 0x1a58 <_proc_prio_control_running+0x46>
    {
        prio_t locker_prio = index_search( proc->lres.index );
    1a2e:	eb 81       	ldd	r30, Y+3	; 0x03
    1a30:	fc 81       	ldd	r31, Y+4	; 0x04
    1a32:	85 8d       	ldd	r24, Z+29	; 0x1d
    1a34:	0e 94 63 08 	call	0x10c6	; 0x10c6 <index_search>
    1a38:	89 83       	std	Y+1, r24	; 0x01
        new_prio = ( locker_prio < proc->base_prio )?locker_prio:proc->base_prio;
    1a3a:	eb 81       	ldd	r30, Y+3	; 0x03
    1a3c:	fc 81       	ldd	r31, Y+4	; 0x04
    1a3e:	84 85       	ldd	r24, Z+12	; 0x0c
    1a40:	99 81       	ldd	r25, Y+1	; 0x01
    1a42:	9e 83       	std	Y+6, r25	; 0x06
    1a44:	8d 83       	std	Y+5, r24	; 0x05
    1a46:	8d 81       	ldd	r24, Y+5	; 0x05
    1a48:	9e 81       	ldd	r25, Y+6	; 0x06
    1a4a:	98 17       	cp	r25, r24
    1a4c:	10 f4       	brcc	.+4      	; 0x1a52 <_proc_prio_control_running+0x40>
    1a4e:	8e 81       	ldd	r24, Y+6	; 0x06
    1a50:	8d 83       	std	Y+5, r24	; 0x05
    1a52:	9d 81       	ldd	r25, Y+5	; 0x05
    1a54:	9a 83       	std	Y+2, r25	; 0x02
    1a56:	04 c0       	rjmp	.+8      	; 0x1a60 <_proc_prio_control_running+0x4e>
    }
    else
    {
        new_prio = proc->base_prio;
    1a58:	eb 81       	ldd	r30, Y+3	; 0x03
    1a5a:	fc 81       	ldd	r31, Y+4	; 0x04
    1a5c:	84 85       	ldd	r24, Z+12	; 0x0c
    1a5e:	8a 83       	std	Y+2, r24	; 0x02
    }
    if(((gitem_t *)proc)->group->prio != new_prio)
    1a60:	eb 81       	ldd	r30, Y+3	; 0x03
    1a62:	fc 81       	ldd	r31, Y+4	; 0x04
    1a64:	04 80       	ldd	r0, Z+4	; 0x04
    1a66:	f5 81       	ldd	r31, Z+5	; 0x05
    1a68:	e0 2d       	mov	r30, r0
    1a6a:	92 81       	ldd	r25, Z+2	; 0x02
    1a6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6e:	98 17       	cp	r25, r24
    1a70:	b1 f0       	breq	.+44     	; 0x1a9e <_proc_prio_control_running+0x8c>
    {
        _proc_stop_( proc );
    1a72:	8b 81       	ldd	r24, Y+3	; 0x03
    1a74:	9c 81       	ldd	r25, Y+4	; 0x04
    1a76:	0e 94 3f 07 	call	0xe7e	; 0xe7e <gitem_cut>
        ((gitem_t *)proc)->group->prio = new_prio;
    1a7a:	eb 81       	ldd	r30, Y+3	; 0x03
    1a7c:	fc 81       	ldd	r31, Y+4	; 0x04
    1a7e:	04 80       	ldd	r0, Z+4	; 0x04
    1a80:	f5 81       	ldd	r31, Z+5	; 0x05
    1a82:	e0 2d       	mov	r30, r0
    1a84:	8a 81       	ldd	r24, Y+2	; 0x02
    1a86:	82 83       	std	Z+2, r24	; 0x02
#ifdef CONFIG_MP
        spin_lock( &kernel.stat_lock );
        stat_inc( proc, (stat_t *)kernel.stat+proc->core_id );
        spin_unlock( &kernel.stat_lock );
#endif
        _proc_run_( proc );
    1a88:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8c:	20 91 17 01 	lds	r18, 0x0117
    1a90:	30 91 18 01 	lds	r19, 0x0118
    1a94:	b9 01       	movw	r22, r18
    1a96:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <gitem_insert>
#ifdef CONFIG_MP
        resched(proc->core_id);
#else
        resched();
    1a9a:	0e 94 fe 00 	call	0x1fc	; 0x1fc <resched>
#endif
    }
}
    1a9e:	26 96       	adiw	r28, 0x06	; 6
    1aa0:	0f b6       	in	r0, 0x3f	; 63
    1aa2:	f8 94       	cli
    1aa4:	de bf       	out	0x3e, r29	; 62
    1aa6:	0f be       	out	0x3f, r0	; 63
    1aa8:	cd bf       	out	0x3d, r28	; 61
    1aaa:	cf 91       	pop	r28
    1aac:	df 91       	pop	r29
    1aae:	08 95       	ret

00001ab0 <sched_init>:
*****************************************************************************************/
#include "../include/bugurt.h"
///========================================================================================
// Инициация
void sched_init(sched_t * sched, proc_t * idle)
{
    1ab0:	df 93       	push	r29
    1ab2:	cf 93       	push	r28
    1ab4:	00 d0       	rcall	.+0      	; 0x1ab6 <sched_init+0x6>
    1ab6:	00 d0       	rcall	.+0      	; 0x1ab8 <sched_init+0x8>
    1ab8:	cd b7       	in	r28, 0x3d	; 61
    1aba:	de b7       	in	r29, 0x3e	; 62
    1abc:	9a 83       	std	Y+2, r25	; 0x02
    1abe:	89 83       	std	Y+1, r24	; 0x01
    1ac0:	7c 83       	std	Y+4, r23	; 0x04
    1ac2:	6b 83       	std	Y+3, r22	; 0x03
#ifdef CONFIG_MP
    lock_t * sched_lock = &sched->lock;
    spin_init( sched_lock );
    spin_lock( sched_lock );
#endif // CONFIG_MP
    sched->ready = (xlist_t *)sched->plst;
    1ac4:	89 81       	ldd	r24, Y+1	; 0x01
    1ac6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac8:	06 96       	adiw	r24, 0x06	; 6
    1aca:	e9 81       	ldd	r30, Y+1	; 0x01
    1acc:	fa 81       	ldd	r31, Y+2	; 0x02
    1ace:	93 83       	std	Z+3, r25	; 0x03
    1ad0:	82 83       	std	Z+2, r24	; 0x02
    xlist_init( sched->ready );
    1ad2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ad4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ad6:	82 81       	ldd	r24, Z+2	; 0x02
    1ad8:	93 81       	ldd	r25, Z+3	; 0x03
    1ada:	0e 94 11 10 	call	0x2022	; 0x2022 <xlist_init>
    sched->expired = (xlist_t *)sched->plst + 1;
    1ade:	89 81       	ldd	r24, Y+1	; 0x01
    1ae0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae2:	47 96       	adiw	r24, 0x17	; 23
    1ae4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ae6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ae8:	95 83       	std	Z+5, r25	; 0x05
    1aea:	84 83       	std	Z+4, r24	; 0x04
    xlist_init( sched->expired );
    1aec:	e9 81       	ldd	r30, Y+1	; 0x01
    1aee:	fa 81       	ldd	r31, Y+2	; 0x02
    1af0:	84 81       	ldd	r24, Z+4	; 0x04
    1af2:	95 81       	ldd	r25, Z+5	; 0x05
    1af4:	0e 94 11 10 	call	0x2022	; 0x2022 <xlist_init>
    gitem_insert( (gitem_t *)idle, sched->ready );
    1af8:	8b 81       	ldd	r24, Y+3	; 0x03
    1afa:	9c 81       	ldd	r25, Y+4	; 0x04
    1afc:	e9 81       	ldd	r30, Y+1	; 0x01
    1afe:	fa 81       	ldd	r31, Y+2	; 0x02
    1b00:	22 81       	ldd	r18, Z+2	; 0x02
    1b02:	33 81       	ldd	r19, Z+3	; 0x03
    1b04:	b9 01       	movw	r22, r18
    1b06:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <gitem_insert>
    sched->current_proc = idle;
    1b0a:	e9 81       	ldd	r30, Y+1	; 0x01
    1b0c:	fa 81       	ldd	r31, Y+2	; 0x02
    1b0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b10:	9c 81       	ldd	r25, Y+4	; 0x04
    1b12:	91 83       	std	Z+1, r25	; 0x01
    1b14:	80 83       	st	Z, r24
    sched->nested_crit_sec = (count_t)0;//вообще это выполняется при запрещенных прерываниях, но не известно, на этом ли процессоре
    1b16:	e9 81       	ldd	r30, Y+1	; 0x01
    1b18:	fa 81       	ldd	r31, Y+2	; 0x02
    1b1a:	11 a6       	std	Z+41, r1	; 0x29
    1b1c:	10 a6       	std	Z+40, r1	; 0x28
#ifdef CONFIG_MP
    spin_unlock( sched_lock );
    stat_inc( idle, (stat_t *)kernel.stat + idle->core_id );
#endif // CONFIG_MP
}
    1b1e:	0f 90       	pop	r0
    1b20:	0f 90       	pop	r0
    1b22:	0f 90       	pop	r0
    1b24:	0f 90       	pop	r0
    1b26:	cf 91       	pop	r28
    1b28:	df 91       	pop	r29
    1b2a:	08 95       	ret

00001b2c <_sched_list_switch>:
static void _sched_list_switch( sched_t * sched )
{
    1b2c:	df 93       	push	r29
    1b2e:	cf 93       	push	r28
    1b30:	00 d0       	rcall	.+0      	; 0x1b32 <_sched_list_switch+0x6>
    1b32:	00 d0       	rcall	.+0      	; 0x1b34 <_sched_list_switch+0x8>
    1b34:	cd b7       	in	r28, 0x3d	; 61
    1b36:	de b7       	in	r29, 0x3e	; 62
    1b38:	9c 83       	std	Y+4, r25	; 0x04
    1b3a:	8b 83       	std	Y+3, r24	; 0x03
    // Список ready опустел, переключаем списки
    if( sched->ready->index == (index_t)0 )
    1b3c:	eb 81       	ldd	r30, Y+3	; 0x03
    1b3e:	fc 81       	ldd	r31, Y+4	; 0x04
    1b40:	02 80       	ldd	r0, Z+2	; 0x02
    1b42:	f3 81       	ldd	r31, Z+3	; 0x03
    1b44:	e0 2d       	mov	r30, r0
    1b46:	80 89       	ldd	r24, Z+16	; 0x10
    1b48:	88 23       	and	r24, r24
    1b4a:	a1 f4       	brne	.+40     	; 0x1b74 <_sched_list_switch+0x48>
    {
        xlist_t * buf = sched->ready;
    1b4c:	eb 81       	ldd	r30, Y+3	; 0x03
    1b4e:	fc 81       	ldd	r31, Y+4	; 0x04
    1b50:	82 81       	ldd	r24, Z+2	; 0x02
    1b52:	93 81       	ldd	r25, Z+3	; 0x03
    1b54:	9a 83       	std	Y+2, r25	; 0x02
    1b56:	89 83       	std	Y+1, r24	; 0x01
        sched->ready = sched->expired;
    1b58:	eb 81       	ldd	r30, Y+3	; 0x03
    1b5a:	fc 81       	ldd	r31, Y+4	; 0x04
    1b5c:	84 81       	ldd	r24, Z+4	; 0x04
    1b5e:	95 81       	ldd	r25, Z+5	; 0x05
    1b60:	eb 81       	ldd	r30, Y+3	; 0x03
    1b62:	fc 81       	ldd	r31, Y+4	; 0x04
    1b64:	93 83       	std	Z+3, r25	; 0x03
    1b66:	82 83       	std	Z+2, r24	; 0x02
        sched->expired = buf;
    1b68:	eb 81       	ldd	r30, Y+3	; 0x03
    1b6a:	fc 81       	ldd	r31, Y+4	; 0x04
    1b6c:	89 81       	ldd	r24, Y+1	; 0x01
    1b6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b70:	95 83       	std	Z+5, r25	; 0x05
    1b72:	84 83       	std	Z+4, r24	; 0x04
    }
}
    1b74:	0f 90       	pop	r0
    1b76:	0f 90       	pop	r0
    1b78:	0f 90       	pop	r0
    1b7a:	0f 90       	pop	r0
    1b7c:	cf 91       	pop	r28
    1b7e:	df 91       	pop	r29
    1b80:	08 95       	ret

00001b82 <sched_schedule>:
                    sched_t * sched
#else
                    void
#endif // CONFIG_MP
                    )
{
    1b82:	df 93       	push	r29
    1b84:	cf 93       	push	r28
    1b86:	00 d0       	rcall	.+0      	; 0x1b88 <sched_schedule+0x6>
    1b88:	00 d0       	rcall	.+0      	; 0x1b8a <sched_schedule+0x8>
    1b8a:	0f 92       	push	r0
    1b8c:	cd b7       	in	r28, 0x3d	; 61
    1b8e:	de b7       	in	r29, 0x3e	; 62
#ifndef CONFIG_MP
    sched_t * sched = (sched_t *)&kernel.sched;
    1b90:	85 e1       	ldi	r24, 0x15	; 21
    1b92:	91 e0       	ldi	r25, 0x01	; 1
    1b94:	9d 83       	std	Y+5, r25	; 0x05
    1b96:	8c 83       	std	Y+4, r24	; 0x04
#endif // nCONFIG_MP
    // Меняем только с локального процессора, блокировку sched->lock можно не захватывать!
    proc_t * current_proc = sched->current_proc;
    1b98:	ec 81       	ldd	r30, Y+4	; 0x04
    1b9a:	fd 81       	ldd	r31, Y+5	; 0x05
    1b9c:	80 81       	ld	r24, Z
    1b9e:	91 81       	ldd	r25, Z+1	; 0x01
    1ba0:	9b 83       	std	Y+3, r25	; 0x03
    1ba2:	8a 83       	std	Y+2, r24	; 0x02
#ifdef CONFIG_MP
    // А вот эту блокировку обязательно надо захватить!
    spin_lock( &current_proc->lock );
#endif // CONFIG_MP
    // Хук "сохранение контекста"
    if( current_proc->sv_hook )current_proc->sv_hook( current_proc->arg );
    1ba4:	ea 81       	ldd	r30, Y+2	; 0x02
    1ba6:	fb 81       	ldd	r31, Y+3	; 0x03
    1ba8:	84 a1       	ldd	r24, Z+36	; 0x24
    1baa:	95 a1       	ldd	r25, Z+37	; 0x25
    1bac:	00 97       	sbiw	r24, 0x00	; 0
    1bae:	51 f0       	breq	.+20     	; 0x1bc4 <sched_schedule+0x42>
    1bb0:	ea 81       	ldd	r30, Y+2	; 0x02
    1bb2:	fb 81       	ldd	r31, Y+3	; 0x03
    1bb4:	24 a1       	ldd	r18, Z+36	; 0x24
    1bb6:	35 a1       	ldd	r19, Z+37	; 0x25
    1bb8:	ea 81       	ldd	r30, Y+2	; 0x02
    1bba:	fb 81       	ldd	r31, Y+3	; 0x03
    1bbc:	80 a5       	ldd	r24, Z+40	; 0x28
    1bbe:	91 a5       	ldd	r25, Z+41	; 0x29
    1bc0:	f9 01       	movw	r30, r18
    1bc2:	09 95       	icall
    // Проверяем, что процесс находится в списке ready
    if( (xlist_t *)((gitem_t *)current_proc)->group->link == sched->ready )
    1bc4:	ea 81       	ldd	r30, Y+2	; 0x02
    1bc6:	fb 81       	ldd	r31, Y+3	; 0x03
    1bc8:	04 80       	ldd	r0, Z+4	; 0x04
    1bca:	f5 81       	ldd	r31, Z+5	; 0x05
    1bcc:	e0 2d       	mov	r30, r0
    1bce:	80 81       	ld	r24, Z
    1bd0:	91 81       	ldd	r25, Z+1	; 0x01
    1bd2:	9c 01       	movw	r18, r24
    1bd4:	ec 81       	ldd	r30, Y+4	; 0x04
    1bd6:	fd 81       	ldd	r31, Y+5	; 0x05
    1bd8:	82 81       	ldd	r24, Z+2	; 0x02
    1bda:	93 81       	ldd	r25, Z+3	; 0x03
    1bdc:	28 17       	cp	r18, r24
    1bde:	39 07       	cpc	r19, r25
    1be0:	09 f0       	breq	.+2      	; 0x1be4 <sched_schedule+0x62>
    1be2:	4d c0       	rjmp	.+154    	; 0x1c7e <sched_schedule+0xfc>
    {
        // Переключаем cписок на следующий за текущим процесс
#ifdef CONFIG_MP
        spin_lock( &sched->lock );
#endif // CONFIG_MP
        xlist_switch( sched->ready, ((gitem_t *)current_proc)->group->prio );
    1be4:	ec 81       	ldd	r30, Y+4	; 0x04
    1be6:	fd 81       	ldd	r31, Y+5	; 0x05
    1be8:	82 81       	ldd	r24, Z+2	; 0x02
    1bea:	93 81       	ldd	r25, Z+3	; 0x03
    1bec:	ea 81       	ldd	r30, Y+2	; 0x02
    1bee:	fb 81       	ldd	r31, Y+3	; 0x03
    1bf0:	04 80       	ldd	r0, Z+4	; 0x04
    1bf2:	f5 81       	ldd	r31, Z+5	; 0x05
    1bf4:	e0 2d       	mov	r30, r0
    1bf6:	22 81       	ldd	r18, Z+2	; 0x02
    1bf8:	62 2f       	mov	r22, r18
    1bfa:	0e 94 67 10 	call	0x20ce	; 0x20ce <xlist_switch>
#ifdef CONFIG_MP
        spin_unlock( &sched->lock );
#endif // CONFIG_MP
        //Проверяем, не истек ли квант времени процесса
        if( current_proc->timer > (timer_t)1 )current_proc->timer--;// Не истек, уменьшаем таймер
    1bfe:	ea 81       	ldd	r30, Y+2	; 0x02
    1c00:	fb 81       	ldd	r31, Y+3	; 0x03
    1c02:	80 a1       	ldd	r24, Z+32	; 0x20
    1c04:	91 a1       	ldd	r25, Z+33	; 0x21
    1c06:	82 30       	cpi	r24, 0x02	; 2
    1c08:	91 05       	cpc	r25, r1
    1c0a:	50 f0       	brcs	.+20     	; 0x1c20 <sched_schedule+0x9e>
    1c0c:	ea 81       	ldd	r30, Y+2	; 0x02
    1c0e:	fb 81       	ldd	r31, Y+3	; 0x03
    1c10:	80 a1       	ldd	r24, Z+32	; 0x20
    1c12:	91 a1       	ldd	r25, Z+33	; 0x21
    1c14:	01 97       	sbiw	r24, 0x01	; 1
    1c16:	ea 81       	ldd	r30, Y+2	; 0x02
    1c18:	fb 81       	ldd	r31, Y+3	; 0x03
    1c1a:	91 a3       	std	Z+33, r25	; 0x21
    1c1c:	80 a3       	std	Z+32, r24	; 0x20
    1c1e:	2f c0       	rjmp	.+94     	; 0x1c7e <sched_schedule+0xfc>
        {
            // Истек, вырезаем процесс из списка
#ifdef CONFIG_MP
            spin_lock( &sched->lock );
#endif // CONFIG_MP
            gitem_fast_cut( (gitem_t *)current_proc );
    1c20:	8a 81       	ldd	r24, Y+2	; 0x02
    1c22:	9b 81       	ldd	r25, Y+3	; 0x03
    1c24:	0e 94 b9 06 	call	0xd72	; 0xd72 <gitem_fast_cut>
            // Обновили статистику после удаления процесса из списка ready
            stat_dec( current_proc, (stat_t *)kernel.stat + current_proc->core_id );
#endif // CONFIG_USE_ALB
#endif // CONFIG_MP
            // А что за процесс собственно?
            flag_t flags = current_proc->flags;
    1c28:	ea 81       	ldd	r30, Y+2	; 0x02
    1c2a:	fb 81       	ldd	r31, Y+3	; 0x03
    1c2c:	83 85       	ldd	r24, Z+11	; 0x0b
    1c2e:	89 83       	std	Y+1, r24	; 0x01
            if(
                (!(flags & PROC_FLG_RT))
    1c30:	89 81       	ldd	r24, Y+1	; 0x01
    1c32:	88 2f       	mov	r24, r24
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	81 70       	andi	r24, 0x01	; 1
    1c38:	90 70       	andi	r25, 0x00	; 0
            stat_dec( current_proc, (stat_t *)kernel.stat + current_proc->core_id );
#endif // CONFIG_USE_ALB
#endif // CONFIG_MP
            // А что за процесс собственно?
            flag_t flags = current_proc->flags;
            if(
    1c3a:	00 97       	sbiw	r24, 0x00	; 0
    1c3c:	91 f4       	brne	.+36     	; 0x1c62 <sched_schedule+0xe0>
                ||(flags & PROC_FLG_HOLD)
#endif // CONFIG_HARD_RT
            )
            {
                //Процесс общего назначения, либо он удерживает общий ресурс, сбрасываем таймер и переносим в очередь expired
                current_proc->timer = current_proc->time_quant;
    1c3e:	ea 81       	ldd	r30, Y+2	; 0x02
    1c40:	fb 81       	ldd	r31, Y+3	; 0x03
    1c42:	86 8d       	ldd	r24, Z+30	; 0x1e
    1c44:	97 8d       	ldd	r25, Z+31	; 0x1f
    1c46:	ea 81       	ldd	r30, Y+2	; 0x02
    1c48:	fb 81       	ldd	r31, Y+3	; 0x03
    1c4a:	91 a3       	std	Z+33, r25	; 0x21
    1c4c:	80 a3       	std	Z+32, r24	; 0x20
#else // CONFIG_MP CONFIG_USE_ALB
                // Тупо переносим процесс в список expired
#ifdef CONFIG_MP
                spin_lock( &sched->lock );
#endif // CONFIG_MP
                gitem_insert( (gitem_t *)current_proc, sched->expired );
    1c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c50:	9b 81       	ldd	r25, Y+3	; 0x03
    1c52:	ec 81       	ldd	r30, Y+4	; 0x04
    1c54:	fd 81       	ldd	r31, Y+5	; 0x05
    1c56:	24 81       	ldd	r18, Z+4	; 0x04
    1c58:	35 81       	ldd	r19, Z+5	; 0x05
    1c5a:	b9 01       	movw	r22, r18
    1c5c:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <gitem_insert>
    1c60:	0e c0       	rjmp	.+28     	; 0x1c7e <sched_schedule+0xfc>
                spin_lock( &kernel.stat_lock );
                stat_dec( current_proc, (stat_t *)kernel.stat + current_proc->core_id );
#endif // nCONFIG_USE_ALB
                spin_unlock( &kernel.stat_lock );
#endif // CONFIG_MP
                ((gitem_t *)current_proc)->group->link = (void *)0;// Просто вырезали из списка, как в gitem_cut
    1c62:	ea 81       	ldd	r30, Y+2	; 0x02
    1c64:	fb 81       	ldd	r31, Y+3	; 0x03
    1c66:	04 80       	ldd	r0, Z+4	; 0x04
    1c68:	f5 81       	ldd	r31, Z+5	; 0x05
    1c6a:	e0 2d       	mov	r30, r0
    1c6c:	11 82       	std	Z+1, r1	; 0x01
    1c6e:	10 82       	st	Z, r1
                current_proc->flags &= ~PROC_FLG_RUN;
    1c70:	ea 81       	ldd	r30, Y+2	; 0x02
    1c72:	fb 81       	ldd	r31, Y+3	; 0x03
    1c74:	83 85       	ldd	r24, Z+11	; 0x0b
    1c76:	8d 7f       	andi	r24, 0xFD	; 253
    1c78:	ea 81       	ldd	r30, Y+2	; 0x02
    1c7a:	fb 81       	ldd	r31, Y+3	; 0x03
    1c7c:	83 87       	std	Z+11, r24	; 0x0b
#ifdef CONFIG_MP
    //Текущий процесс более не нужен, освобождаем его блокировку
    spin_unlock( &current_proc->lock );
    spin_lock( &sched->lock );
#endif // CONFIG_MP
    _sched_list_switch( sched );
    1c7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c80:	9d 81       	ldd	r25, Y+5	; 0x05
    1c82:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <_sched_list_switch>
    // Изменять указатель будем при захваченной блокировке,
    // чтобы процессы на других процессорах не прочитали неизвестно что.
    current_proc = (proc_t *)xlist_head( sched->ready ); // Вытесняющая многозадачность же!
    1c86:	ec 81       	ldd	r30, Y+4	; 0x04
    1c88:	fd 81       	ldd	r31, Y+5	; 0x05
    1c8a:	82 81       	ldd	r24, Z+2	; 0x02
    1c8c:	93 81       	ldd	r25, Z+3	; 0x03
    1c8e:	0e 94 3b 10 	call	0x2076	; 0x2076 <xlist_head>
    1c92:	9b 83       	std	Y+3, r25	; 0x03
    1c94:	8a 83       	std	Y+2, r24	; 0x02
    sched->current_proc = current_proc;
    1c96:	ec 81       	ldd	r30, Y+4	; 0x04
    1c98:	fd 81       	ldd	r31, Y+5	; 0x05
    1c9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c9e:	91 83       	std	Z+1, r25	; 0x01
    1ca0:	80 83       	st	Z, r24
#ifdef CONFIG_MP
    spin_unlock( &sched->lock );
    spin_lock( &current_proc->lock );
#endif // CONFIG_MP
    //Хук "восстановление контекста"
    if( current_proc->rs_hook )current_proc->rs_hook( current_proc->arg );
    1ca2:	ea 81       	ldd	r30, Y+2	; 0x02
    1ca4:	fb 81       	ldd	r31, Y+3	; 0x03
    1ca6:	86 a1       	ldd	r24, Z+38	; 0x26
    1ca8:	97 a1       	ldd	r25, Z+39	; 0x27
    1caa:	00 97       	sbiw	r24, 0x00	; 0
    1cac:	51 f0       	breq	.+20     	; 0x1cc2 <sched_schedule+0x140>
    1cae:	ea 81       	ldd	r30, Y+2	; 0x02
    1cb0:	fb 81       	ldd	r31, Y+3	; 0x03
    1cb2:	26 a1       	ldd	r18, Z+38	; 0x26
    1cb4:	37 a1       	ldd	r19, Z+39	; 0x27
    1cb6:	ea 81       	ldd	r30, Y+2	; 0x02
    1cb8:	fb 81       	ldd	r31, Y+3	; 0x03
    1cba:	80 a5       	ldd	r24, Z+40	; 0x28
    1cbc:	91 a5       	ldd	r25, Z+41	; 0x29
    1cbe:	f9 01       	movw	r30, r18
    1cc0:	09 95       	icall
#ifdef CONFIG_MP
    spin_unlock( &current_proc->lock );
#endif // CONFIG_MP
}
    1cc2:	0f 90       	pop	r0
    1cc4:	0f 90       	pop	r0
    1cc6:	0f 90       	pop	r0
    1cc8:	0f 90       	pop	r0
    1cca:	0f 90       	pop	r0
    1ccc:	cf 91       	pop	r28
    1cce:	df 91       	pop	r29
    1cd0:	08 95       	ret

00001cd2 <sched_reschedule>:
                        sched_t * sched
#else
                        void
#endif // CONFIG_MP
                       )
{
    1cd2:	df 93       	push	r29
    1cd4:	cf 93       	push	r28
    1cd6:	00 d0       	rcall	.+0      	; 0x1cd8 <sched_reschedule+0x6>
    1cd8:	00 d0       	rcall	.+0      	; 0x1cda <sched_reschedule+0x8>
    1cda:	cd b7       	in	r28, 0x3d	; 61
    1cdc:	de b7       	in	r29, 0x3e	; 62
#ifndef CONFIG_MP
    sched_t * sched = (sched_t *)&kernel.sched;
    1cde:	85 e1       	ldi	r24, 0x15	; 21
    1ce0:	91 e0       	ldi	r25, 0x01	; 1
    1ce2:	9c 83       	std	Y+4, r25	; 0x04
    1ce4:	8b 83       	std	Y+3, r24	; 0x03
#endif // nCONFIG_MP
    // Меняем только с локального процессора, блокировку sched->lock можно не захватывать!
    proc_t * current_proc = sched->current_proc;
    1ce6:	eb 81       	ldd	r30, Y+3	; 0x03
    1ce8:	fc 81       	ldd	r31, Y+4	; 0x04
    1cea:	80 81       	ld	r24, Z
    1cec:	91 81       	ldd	r25, Z+1	; 0x01
    1cee:	9a 83       	std	Y+2, r25	; 0x02
    1cf0:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    // А вот эту блокировку обязательно надо захватить!
    spin_lock( &current_proc->lock );
#endif // CONFIG_MP
    // Хук "сохранение контекста"
    if( current_proc->sv_hook )current_proc->sv_hook( current_proc->arg );
    1cf2:	e9 81       	ldd	r30, Y+1	; 0x01
    1cf4:	fa 81       	ldd	r31, Y+2	; 0x02
    1cf6:	84 a1       	ldd	r24, Z+36	; 0x24
    1cf8:	95 a1       	ldd	r25, Z+37	; 0x25
    1cfa:	00 97       	sbiw	r24, 0x00	; 0
    1cfc:	51 f0       	breq	.+20     	; 0x1d12 <sched_reschedule+0x40>
    1cfe:	e9 81       	ldd	r30, Y+1	; 0x01
    1d00:	fa 81       	ldd	r31, Y+2	; 0x02
    1d02:	24 a1       	ldd	r18, Z+36	; 0x24
    1d04:	35 a1       	ldd	r19, Z+37	; 0x25
    1d06:	e9 81       	ldd	r30, Y+1	; 0x01
    1d08:	fa 81       	ldd	r31, Y+2	; 0x02
    1d0a:	80 a5       	ldd	r24, Z+40	; 0x28
    1d0c:	91 a5       	ldd	r25, Z+41	; 0x29
    1d0e:	f9 01       	movw	r30, r18
    1d10:	09 95       	icall
#ifdef CONFIG_MP
    spin_unlock( &current_proc->lock );
    spin_lock( &sched->lock );
#endif // CONFIG_MP
    _sched_list_switch( sched );
    1d12:	8b 81       	ldd	r24, Y+3	; 0x03
    1d14:	9c 81       	ldd	r25, Y+4	; 0x04
    1d16:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <_sched_list_switch>
    current_proc = (proc_t *)xlist_head( sched->ready ); // Вытесняющая многозадачность же!
    1d1a:	eb 81       	ldd	r30, Y+3	; 0x03
    1d1c:	fc 81       	ldd	r31, Y+4	; 0x04
    1d1e:	82 81       	ldd	r24, Z+2	; 0x02
    1d20:	93 81       	ldd	r25, Z+3	; 0x03
    1d22:	0e 94 3b 10 	call	0x2076	; 0x2076 <xlist_head>
    1d26:	9a 83       	std	Y+2, r25	; 0x02
    1d28:	89 83       	std	Y+1, r24	; 0x01
    sched->current_proc = current_proc;
    1d2a:	eb 81       	ldd	r30, Y+3	; 0x03
    1d2c:	fc 81       	ldd	r31, Y+4	; 0x04
    1d2e:	89 81       	ldd	r24, Y+1	; 0x01
    1d30:	9a 81       	ldd	r25, Y+2	; 0x02
    1d32:	91 83       	std	Z+1, r25	; 0x01
    1d34:	80 83       	st	Z, r24

#ifdef CONFIG_MP
    spin_lock(&current_proc->lock);
#endif // CONFIG_MP
    //Хук "восстановление контекста"
    if( current_proc->rs_hook )current_proc->rs_hook( current_proc->arg );
    1d36:	e9 81       	ldd	r30, Y+1	; 0x01
    1d38:	fa 81       	ldd	r31, Y+2	; 0x02
    1d3a:	86 a1       	ldd	r24, Z+38	; 0x26
    1d3c:	97 a1       	ldd	r25, Z+39	; 0x27
    1d3e:	00 97       	sbiw	r24, 0x00	; 0
    1d40:	51 f0       	breq	.+20     	; 0x1d56 <sched_reschedule+0x84>
    1d42:	e9 81       	ldd	r30, Y+1	; 0x01
    1d44:	fa 81       	ldd	r31, Y+2	; 0x02
    1d46:	26 a1       	ldd	r18, Z+38	; 0x26
    1d48:	37 a1       	ldd	r19, Z+39	; 0x27
    1d4a:	e9 81       	ldd	r30, Y+1	; 0x01
    1d4c:	fa 81       	ldd	r31, Y+2	; 0x02
    1d4e:	80 a5       	ldd	r24, Z+40	; 0x28
    1d50:	91 a5       	ldd	r25, Z+41	; 0x29
    1d52:	f9 01       	movw	r30, r18
    1d54:	09 95       	icall
#ifdef CONFIG_MP
    spin_unlock( &current_proc->lock );
#endif // CONFIG_MP
}
    1d56:	0f 90       	pop	r0
    1d58:	0f 90       	pop	r0
    1d5a:	0f 90       	pop	r0
    1d5c:	0f 90       	pop	r0
    1d5e:	cf 91       	pop	r28
    1d60:	df 91       	pop	r29
    1d62:	08 95       	ret

00001d64 <sem_init_isr>:
*****************************************************************************************/
#include "../include/bugurt.h"

// Инициализация
void sem_init_isr( sem_t * sem, count_t count )
{
    1d64:	df 93       	push	r29
    1d66:	cf 93       	push	r28
    1d68:	00 d0       	rcall	.+0      	; 0x1d6a <sem_init_isr+0x6>
    1d6a:	00 d0       	rcall	.+0      	; 0x1d6c <sem_init_isr+0x8>
    1d6c:	cd b7       	in	r28, 0x3d	; 61
    1d6e:	de b7       	in	r29, 0x3e	; 62
    1d70:	9a 83       	std	Y+2, r25	; 0x02
    1d72:	89 83       	std	Y+1, r24	; 0x01
    1d74:	7c 83       	std	Y+4, r23	; 0x04
    1d76:	6b 83       	std	Y+3, r22	; 0x03
    xlist_init( (xlist_t *)sem );
    1d78:	89 81       	ldd	r24, Y+1	; 0x01
    1d7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d7c:	0e 94 11 10 	call	0x2022	; 0x2022 <xlist_init>
    sem->counter = count;
    1d80:	e9 81       	ldd	r30, Y+1	; 0x01
    1d82:	fa 81       	ldd	r31, Y+2	; 0x02
    1d84:	8b 81       	ldd	r24, Y+3	; 0x03
    1d86:	9c 81       	ldd	r25, Y+4	; 0x04
    1d88:	92 8b       	std	Z+18, r25	; 0x12
    1d8a:	81 8b       	std	Z+17, r24	; 0x11
}
    1d8c:	0f 90       	pop	r0
    1d8e:	0f 90       	pop	r0
    1d90:	0f 90       	pop	r0
    1d92:	0f 90       	pop	r0
    1d94:	cf 91       	pop	r28
    1d96:	df 91       	pop	r29
    1d98:	08 95       	ret

00001d9a <_sem_lock>:

// То же, для внутреннего использования
bool_t _sem_lock( sem_t * sem )
{
    1d9a:	df 93       	push	r29
    1d9c:	cf 93       	push	r28
    1d9e:	00 d0       	rcall	.+0      	; 0x1da0 <_sem_lock+0x6>
    1da0:	00 d0       	rcall	.+0      	; 0x1da2 <_sem_lock+0x8>
    1da2:	0f 92       	push	r0
    1da4:	cd b7       	in	r28, 0x3d	; 61
    1da6:	de b7       	in	r29, 0x3e	; 62
    1da8:	9d 83       	std	Y+5, r25	; 0x05
    1daa:	8c 83       	std	Y+4, r24	; 0x04

    bool_t ret = 0;
    1dac:	1b 82       	std	Y+3, r1	; 0x03
    if( sem->counter != 0 )
    1dae:	ec 81       	ldd	r30, Y+4	; 0x04
    1db0:	fd 81       	ldd	r31, Y+5	; 0x05
    1db2:	81 89       	ldd	r24, Z+17	; 0x11
    1db4:	92 89       	ldd	r25, Z+18	; 0x12
    1db6:	00 97       	sbiw	r24, 0x00	; 0
    1db8:	61 f0       	breq	.+24     	; 0x1dd2 <_sem_lock+0x38>
    {
        sem->counter--;
    1dba:	ec 81       	ldd	r30, Y+4	; 0x04
    1dbc:	fd 81       	ldd	r31, Y+5	; 0x05
    1dbe:	81 89       	ldd	r24, Z+17	; 0x11
    1dc0:	92 89       	ldd	r25, Z+18	; 0x12
    1dc2:	01 97       	sbiw	r24, 0x01	; 1
    1dc4:	ec 81       	ldd	r30, Y+4	; 0x04
    1dc6:	fd 81       	ldd	r31, Y+5	; 0x05
    1dc8:	92 8b       	std	Z+18, r25	; 0x12
    1dca:	81 8b       	std	Z+17, r24	; 0x11
#ifdef CONFIG_MP
        spin_unlock( &sem->lock );// Освобождение блокировки семафора
#endif //CONFIG_MP
        ret = (bool_t)1;
    1dcc:	81 e0       	ldi	r24, 0x01	; 1
    1dce:	8b 83       	std	Y+3, r24	; 0x03
    1dd0:	16 c0       	rjmp	.+44     	; 0x1dfe <_sem_lock+0x64>
    }
    else
    {
        proc_t * proc = current_proc();
    1dd2:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <current_proc>
    1dd6:	9a 83       	std	Y+2, r25	; 0x02
    1dd8:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
        spin_lock( &proc->lock );// Захват блокировки процесса
#endif //CONFIG_MP
        proc->flags |= PROC_FLG_QUEUE;
    1dda:	e9 81       	ldd	r30, Y+1	; 0x01
    1ddc:	fa 81       	ldd	r31, Y+2	; 0x02
    1dde:	83 85       	ldd	r24, Z+11	; 0x0b
    1de0:	88 60       	ori	r24, 0x08	; 8
    1de2:	e9 81       	ldd	r30, Y+1	; 0x01
    1de4:	fa 81       	ldd	r31, Y+2	; 0x02
    1de6:	83 87       	std	Z+11, r24	; 0x0b
        _proc_stop( proc );
    1de8:	89 81       	ldd	r24, Y+1	; 0x01
    1dea:	9a 81       	ldd	r25, Y+2	; 0x02
    1dec:	0e 94 07 0c 	call	0x180e	; 0x180e <_proc_stop>
        gitem_insert( (gitem_t *)proc, (xlist_t *)sem );
    1df0:	89 81       	ldd	r24, Y+1	; 0x01
    1df2:	9a 81       	ldd	r25, Y+2	; 0x02
    1df4:	2c 81       	ldd	r18, Y+4	; 0x04
    1df6:	3d 81       	ldd	r19, Y+5	; 0x05
    1df8:	b9 01       	movw	r22, r18
    1dfa:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <gitem_insert>
#ifdef CONFIG_MP
        spin_unlock( &proc->lock );// Освобождение блокировки процесса
#endif //CONFIG_MP
    }
    return ret;
    1dfe:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1e00:	0f 90       	pop	r0
    1e02:	0f 90       	pop	r0
    1e04:	0f 90       	pop	r0
    1e06:	0f 90       	pop	r0
    1e08:	0f 90       	pop	r0
    1e0a:	cf 91       	pop	r28
    1e0c:	df 91       	pop	r29
    1e0e:	08 95       	ret

00001e10 <_sem_unlock>:

void _sem_unlock( sem_t * sem )
{
    1e10:	df 93       	push	r29
    1e12:	cf 93       	push	r28
    1e14:	00 d0       	rcall	.+0      	; 0x1e16 <_sem_unlock+0x6>
    1e16:	00 d0       	rcall	.+0      	; 0x1e18 <_sem_unlock+0x8>
    1e18:	cd b7       	in	r28, 0x3d	; 61
    1e1a:	de b7       	in	r29, 0x3e	; 62
    1e1c:	9c 83       	std	Y+4, r25	; 0x04
    1e1e:	8b 83       	std	Y+3, r24	; 0x03
    if( ((xlist_t *)sem)->index == (index_t)0  )
    1e20:	eb 81       	ldd	r30, Y+3	; 0x03
    1e22:	fc 81       	ldd	r31, Y+4	; 0x04
    1e24:	80 89       	ldd	r24, Z+16	; 0x10
    1e26:	88 23       	and	r24, r24
    1e28:	51 f4       	brne	.+20     	; 0x1e3e <_sem_unlock+0x2e>
    {
        sem->counter++;
    1e2a:	eb 81       	ldd	r30, Y+3	; 0x03
    1e2c:	fc 81       	ldd	r31, Y+4	; 0x04
    1e2e:	81 89       	ldd	r24, Z+17	; 0x11
    1e30:	92 89       	ldd	r25, Z+18	; 0x12
    1e32:	01 96       	adiw	r24, 0x01	; 1
    1e34:	eb 81       	ldd	r30, Y+3	; 0x03
    1e36:	fc 81       	ldd	r31, Y+4	; 0x04
    1e38:	92 8b       	std	Z+18, r25	; 0x12
    1e3a:	81 8b       	std	Z+17, r24	; 0x11
    1e3c:	15 c0       	rjmp	.+42     	; 0x1e68 <_sem_unlock+0x58>
#ifdef CONFIG_MP
        spin_unlock( &sem->lock );
#endif //CONFIG_MP
        return;
    }
    proc_t * proc = (proc_t *)xlist_head((xlist_t *)sem);
    1e3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e40:	9c 81       	ldd	r25, Y+4	; 0x04
    1e42:	0e 94 3b 10 	call	0x2076	; 0x2076 <xlist_head>
    1e46:	9a 83       	std	Y+2, r25	; 0x02
    1e48:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );// Захват спин-блокировки процесса
#endif //CONFIG_MP
    proc->flags &= ~PROC_FLG_QUEUE;
    1e4a:	e9 81       	ldd	r30, Y+1	; 0x01
    1e4c:	fa 81       	ldd	r31, Y+2	; 0x02
    1e4e:	83 85       	ldd	r24, Z+11	; 0x0b
    1e50:	87 7f       	andi	r24, 0xF7	; 247
    1e52:	e9 81       	ldd	r30, Y+1	; 0x01
    1e54:	fa 81       	ldd	r31, Y+2	; 0x02
    1e56:	83 87       	std	Z+11, r24	; 0x0b
    gitem_cut( (gitem_t *)proc );
    1e58:	89 81       	ldd	r24, Y+1	; 0x01
    1e5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e5c:	0e 94 3f 07 	call	0xe7e	; 0xe7e <gitem_cut>
    _proc_run( proc );
    1e60:	89 81       	ldd	r24, Y+1	; 0x01
    1e62:	9a 81       	ldd	r25, Y+2	; 0x02
    1e64:	0e 94 80 0b 	call	0x1700	; 0x1700 <_proc_run>
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );// Освобождение спин-блокировки процесса
#endif //CONFIG_MP
}
    1e68:	0f 90       	pop	r0
    1e6a:	0f 90       	pop	r0
    1e6c:	0f 90       	pop	r0
    1e6e:	0f 90       	pop	r0
    1e70:	cf 91       	pop	r28
    1e72:	df 91       	pop	r29
    1e74:	08 95       	ret

00001e76 <sig_init_isr>:
*****************************************************************************************/
#include "../include/bugurt.h"
//========================================================================================
// Инициация
void sig_init_isr( sig_t * sig )
{
    1e76:	df 93       	push	r29
    1e78:	cf 93       	push	r28
    1e7a:	00 d0       	rcall	.+0      	; 0x1e7c <sig_init_isr+0x6>
    1e7c:	cd b7       	in	r28, 0x3d	; 61
    1e7e:	de b7       	in	r29, 0x3e	; 62
    1e80:	9a 83       	std	Y+2, r25	; 0x02
    1e82:	89 83       	std	Y+1, r24	; 0x01
    {
        xlist_init( (xlist_t *)sig->sig_list + i );
        stat_init( (stat_t *)sig->sig_stat + i );
    }
#else
    xlist_init( (xlist_t *)sig );
    1e84:	89 81       	ldd	r24, Y+1	; 0x01
    1e86:	9a 81       	ldd	r25, Y+2	; 0x02
    1e88:	0e 94 11 10 	call	0x2022	; 0x2022 <xlist_init>
#endif
}
    1e8c:	0f 90       	pop	r0
    1e8e:	0f 90       	pop	r0
    1e90:	cf 91       	pop	r28
    1e92:	df 91       	pop	r29
    1e94:	08 95       	ret

00001e96 <sig_wait_stage_1_isr>:
//========================================================================================
// Это выполнится при постановке процесса в список ожидания сигнала
void sig_wait_stage_1_isr( sig_t * sig )
{
    1e96:	df 93       	push	r29
    1e98:	cf 93       	push	r28
    1e9a:	00 d0       	rcall	.+0      	; 0x1e9c <sig_wait_stage_1_isr+0x6>
    1e9c:	00 d0       	rcall	.+0      	; 0x1e9e <sig_wait_stage_1_isr+0x8>
    1e9e:	cd b7       	in	r28, 0x3d	; 61
    1ea0:	de b7       	in	r29, 0x3e	; 62
    1ea2:	9c 83       	std	Y+4, r25	; 0x04
    1ea4:	8b 83       	std	Y+3, r24	; 0x03
#ifdef CONFIG_MP
    spin_lock( &sig->lock );
#endif // CONFIG_MP
    proc_t * proc = current_proc();
    1ea6:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <current_proc>
    1eaa:	9a 83       	std	Y+2, r25	; 0x02
    1eac:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    // Останавливаем процесс
    _proc_stop(proc);
    1eae:	89 81       	ldd	r24, Y+1	; 0x01
    1eb0:	9a 81       	ldd	r25, Y+2	; 0x02
    1eb2:	0e 94 07 0c 	call	0x180e	; 0x180e <_proc_stop>
    proc->flags |= PROC_FLG_WAIT;
    1eb6:	e9 81       	ldd	r30, Y+1	; 0x01
    1eb8:	fa 81       	ldd	r31, Y+2	; 0x02
    1eba:	83 85       	ldd	r24, Z+11	; 0x0b
    1ebc:	80 61       	ori	r24, 0x10	; 16
    1ebe:	e9 81       	ldd	r30, Y+1	; 0x01
    1ec0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ec2:	83 87       	std	Z+11, r24	; 0x0b
        stat_inc( proc, (stat_t *)sig->sig_stat + sig_core );
    }
    spin_unlock( &proc->lock );
    spin_unlock( &sig->lock );
#else
    gitem_insert_group( (gitem_t *)proc, (xlist_t *)sig );
    1ec4:	89 81       	ldd	r24, Y+1	; 0x01
    1ec6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ec8:	2b 81       	ldd	r18, Y+3	; 0x03
    1eca:	3c 81       	ldd	r19, Y+4	; 0x04
    1ecc:	b9 01       	movw	r22, r18
    1ece:	0e 94 3e 06 	call	0xc7c	; 0xc7c <gitem_insert_group>
#endif //CONFIG_MP
}
    1ed2:	0f 90       	pop	r0
    1ed4:	0f 90       	pop	r0
    1ed6:	0f 90       	pop	r0
    1ed8:	0f 90       	pop	r0
    1eda:	cf 91       	pop	r28
    1edc:	df 91       	pop	r29
    1ede:	08 95       	ret

00001ee0 <sig_signal_isr>:
    enable_interrupts();
}
//========================================================================================
// Тоже самое что и предыдущие, олько для вызова из обработчиков прерываний и из критических секций
void sig_signal_isr( sig_t * sig )
{
    1ee0:	df 93       	push	r29
    1ee2:	cf 93       	push	r28
    1ee4:	00 d0       	rcall	.+0      	; 0x1ee6 <sig_signal_isr+0x6>
    1ee6:	00 d0       	rcall	.+0      	; 0x1ee8 <sig_signal_isr+0x8>
    1ee8:	cd b7       	in	r28, 0x3d	; 61
    1eea:	de b7       	in	r29, 0x3e	; 62
    1eec:	9c 83       	std	Y+4, r25	; 0x04
    1eee:	8b 83       	std	Y+3, r24	; 0x03
    }
    resched(core);// Перепланировка
    spin_unlock( &proc->lock );// Освобождение блокировки процесса
    spin_unlock( &sig->lock );// Освобождение блокировки сигнала
#else
    if( ((xlist_t *)sig)->index == (index_t)0 )return;
    1ef0:	eb 81       	ldd	r30, Y+3	; 0x03
    1ef2:	fc 81       	ldd	r31, Y+4	; 0x04
    1ef4:	80 89       	ldd	r24, Z+16	; 0x10
    1ef6:	88 23       	and	r24, r24
    1ef8:	a9 f0       	breq	.+42     	; 0x1f24 <sig_signal_isr+0x44>
    proc_t * proc = (proc_t *)xlist_head( (xlist_t *)sig );
    1efa:	8b 81       	ldd	r24, Y+3	; 0x03
    1efc:	9c 81       	ldd	r25, Y+4	; 0x04
    1efe:	0e 94 3b 10 	call	0x2076	; 0x2076 <xlist_head>
    1f02:	9a 83       	std	Y+2, r25	; 0x02
    1f04:	89 83       	std	Y+1, r24	; 0x01
    gitem_fast_cut( (gitem_t *)proc );
    1f06:	89 81       	ldd	r24, Y+1	; 0x01
    1f08:	9a 81       	ldd	r25, Y+2	; 0x02
    1f0a:	0e 94 b9 06 	call	0xd72	; 0xd72 <gitem_fast_cut>
    gitem_insert( (gitem_t *)proc, kernel.sched.ready );
    1f0e:	89 81       	ldd	r24, Y+1	; 0x01
    1f10:	9a 81       	ldd	r25, Y+2	; 0x02
    1f12:	20 91 17 01 	lds	r18, 0x0117
    1f16:	30 91 18 01 	lds	r19, 0x0118
    1f1a:	b9 01       	movw	r22, r18
    1f1c:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <gitem_insert>
    resched();
    1f20:	0e 94 fe 00 	call	0x1fc	; 0x1fc <resched>
#endif //CONFIG_MP
}
    1f24:	0f 90       	pop	r0
    1f26:	0f 90       	pop	r0
    1f28:	0f 90       	pop	r0
    1f2a:	0f 90       	pop	r0
    1f2c:	cf 91       	pop	r28
    1f2e:	df 91       	pop	r29
    1f30:	08 95       	ret

00001f32 <sig_broadcast_isr>:
//----------------------------------------------------------------------------------------
void sig_broadcast_isr( sig_t * sig )
{
    1f32:	df 93       	push	r29
    1f34:	cf 93       	push	r28
    1f36:	00 d0       	rcall	.+0      	; 0x1f38 <sig_broadcast_isr+0x6>
    1f38:	cd b7       	in	r28, 0x3d	; 61
    1f3a:	de b7       	in	r29, 0x3e	; 62
    1f3c:	9a 83       	std	Y+2, r25	; 0x02
    1f3e:	89 83       	std	Y+1, r24	; 0x01

        resched(core);
    }
    spin_unlock( &sig->lock );
#else
    gitem_xlist_merge( (xlist_t *)sig, kernel.sched.ready );
    1f40:	20 91 17 01 	lds	r18, 0x0117
    1f44:	30 91 18 01 	lds	r19, 0x0118
    1f48:	89 81       	ldd	r24, Y+1	; 0x01
    1f4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f4c:	b9 01       	movw	r22, r18
    1f4e:	0e 94 56 07 	call	0xeac	; 0xeac <gitem_xlist_merge>
    resched();
    1f52:	0e 94 fe 00 	call	0x1fc	; 0x1fc <resched>
#endif //CONFIG_MP
}
    1f56:	0f 90       	pop	r0
    1f58:	0f 90       	pop	r0
    1f5a:	cf 91       	pop	r28
    1f5c:	df 91       	pop	r29
    1f5e:	08 95       	ret

00001f60 <_clear_timer>:
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
//========================================================================================
void _clear_timer(timer_t * t)
{
    1f60:	df 93       	push	r29
    1f62:	cf 93       	push	r28
    1f64:	00 d0       	rcall	.+0      	; 0x1f66 <_clear_timer+0x6>
    1f66:	cd b7       	in	r28, 0x3d	; 61
    1f68:	de b7       	in	r29, 0x3e	; 62
    1f6a:	9a 83       	std	Y+2, r25	; 0x02
    1f6c:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    core_id_t current_core = _enter_crit_sec();
    spin_lock( &kernel.timer_lock );
#else
    enter_crit_sec();
    1f6e:	0e 94 8c 05 	call	0xb18	; 0xb18 <enter_crit_sec>
#endif //CONFIG_MP
    *t = kernel.timer;
    1f72:	80 91 6f 01 	lds	r24, 0x016F
    1f76:	90 91 70 01 	lds	r25, 0x0170
    1f7a:	e9 81       	ldd	r30, Y+1	; 0x01
    1f7c:	fa 81       	ldd	r31, Y+2	; 0x02
    1f7e:	91 83       	std	Z+1, r25	; 0x01
    1f80:	80 83       	st	Z, r24
#ifdef CONFIG_MP
    spin_unlock( &kernel.timer_lock );
    _exit_crit_sec(current_core);
#else
    exit_crit_sec();
    1f82:	0e 94 9e 05 	call	0xb3c	; 0xb3c <exit_crit_sec>
#endif //CONFIG_MP
}
    1f86:	0f 90       	pop	r0
    1f88:	0f 90       	pop	r0
    1f8a:	cf 91       	pop	r28
    1f8c:	df 91       	pop	r29
    1f8e:	08 95       	ret

00001f90 <_timer>:
//----------------------------------------------------------------------------------------
timer_t _timer(timer_t t)
{
    1f90:	df 93       	push	r29
    1f92:	cf 93       	push	r28
    1f94:	00 d0       	rcall	.+0      	; 0x1f96 <_timer+0x6>
    1f96:	00 d0       	rcall	.+0      	; 0x1f98 <_timer+0x8>
    1f98:	cd b7       	in	r28, 0x3d	; 61
    1f9a:	de b7       	in	r29, 0x3e	; 62
    1f9c:	9c 83       	std	Y+4, r25	; 0x04
    1f9e:	8b 83       	std	Y+3, r24	; 0x03
    timer_t ret;
#ifdef CONFIG_MP
    core_id_t current_core = _enter_crit_sec();
    spin_lock( &kernel.timer_lock );
#else
    enter_crit_sec();
    1fa0:	0e 94 8c 05 	call	0xb18	; 0xb18 <enter_crit_sec>
#endif //CONFIG_MP
    ret = (timer_t)kernel.timer - (timer_t)t;
    1fa4:	20 91 6f 01 	lds	r18, 0x016F
    1fa8:	30 91 70 01 	lds	r19, 0x0170
    1fac:	8b 81       	ldd	r24, Y+3	; 0x03
    1fae:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb0:	a9 01       	movw	r20, r18
    1fb2:	48 1b       	sub	r20, r24
    1fb4:	59 0b       	sbc	r21, r25
    1fb6:	ca 01       	movw	r24, r20
    1fb8:	9a 83       	std	Y+2, r25	; 0x02
    1fba:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_unlock( &kernel.timer_lock );
    _exit_crit_sec(current_core);
#else
    exit_crit_sec();
    1fbc:	0e 94 9e 05 	call	0xb3c	; 0xb3c <exit_crit_sec>
#endif //CONFIG_MP
    return ret;
    1fc0:	89 81       	ldd	r24, Y+1	; 0x01
    1fc2:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1fc4:	0f 90       	pop	r0
    1fc6:	0f 90       	pop	r0
    1fc8:	0f 90       	pop	r0
    1fca:	0f 90       	pop	r0
    1fcc:	cf 91       	pop	r28
    1fce:	df 91       	pop	r29
    1fd0:	08 95       	ret

00001fd2 <wait_time>:

//----------------------------------------------------------------------------------------
void wait_time(timer_t time)
{
    1fd2:	df 93       	push	r29
    1fd4:	cf 93       	push	r28
    1fd6:	00 d0       	rcall	.+0      	; 0x1fd8 <wait_time+0x6>
    1fd8:	00 d0       	rcall	.+0      	; 0x1fda <wait_time+0x8>
    1fda:	0f 92       	push	r0
    1fdc:	cd b7       	in	r28, 0x3d	; 61
    1fde:	de b7       	in	r29, 0x3e	; 62
    1fe0:	9d 83       	std	Y+5, r25	; 0x05
    1fe2:	8c 83       	std	Y+4, r24	; 0x04
    timer_t tmr;
    bool_t roll=(bool_t)1;
    1fe4:	81 e0       	ldi	r24, 0x01	; 1
    1fe6:	89 83       	std	Y+1, r24	; 0x01
    CLEAR_TIMER(tmr);
    1fe8:	ce 01       	movw	r24, r28
    1fea:	02 96       	adiw	r24, 0x02	; 2
    1fec:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <_clear_timer>
    1ff0:	0d c0       	rjmp	.+26     	; 0x200c <wait_time+0x3a>
    while((bool_t)roll)
    {
        roll = (bool_t)( TIMER(tmr) < (timer_t)time );
    1ff2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ff6:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <_timer>
    1ffa:	9c 01       	movw	r18, r24
    1ffc:	8c 81       	ldd	r24, Y+4	; 0x04
    1ffe:	9d 81       	ldd	r25, Y+5	; 0x05
    2000:	19 82       	std	Y+1, r1	; 0x01
    2002:	28 17       	cp	r18, r24
    2004:	39 07       	cpc	r19, r25
    2006:	10 f4       	brcc	.+4      	; 0x200c <wait_time+0x3a>
    2008:	81 e0       	ldi	r24, 0x01	; 1
    200a:	89 83       	std	Y+1, r24	; 0x01
void wait_time(timer_t time)
{
    timer_t tmr;
    bool_t roll=(bool_t)1;
    CLEAR_TIMER(tmr);
    while((bool_t)roll)
    200c:	89 81       	ldd	r24, Y+1	; 0x01
    200e:	88 23       	and	r24, r24
    2010:	81 f7       	brne	.-32     	; 0x1ff2 <wait_time+0x20>
    {
        roll = (bool_t)( TIMER(tmr) < (timer_t)time );
    }
}
    2012:	0f 90       	pop	r0
    2014:	0f 90       	pop	r0
    2016:	0f 90       	pop	r0
    2018:	0f 90       	pop	r0
    201a:	0f 90       	pop	r0
    201c:	cf 91       	pop	r28
    201e:	df 91       	pop	r29
    2020:	08 95       	ret

00002022 <xlist_init>:
**********************************************/
//Инициация
void xlist_init(
    xlist_t * xlist
)
{
    2022:	df 93       	push	r29
    2024:	cf 93       	push	r28
    2026:	00 d0       	rcall	.+0      	; 0x2028 <xlist_init+0x6>
    2028:	00 d0       	rcall	.+0      	; 0x202a <xlist_init+0x8>
    202a:	cd b7       	in	r28, 0x3d	; 61
    202c:	de b7       	in	r29, 0x3e	; 62
    202e:	9c 83       	std	Y+4, r25	; 0x04
    2030:	8b 83       	std	Y+3, r24	; 0x03
    count_t i;
    //список пуст
    xlist->index = (index_t)0;
    2032:	eb 81       	ldd	r30, Y+3	; 0x03
    2034:	fc 81       	ldd	r31, Y+4	; 0x04
    2036:	10 8a       	std	Z+16, r1	; 0x10
    //обнуляем указатели
    for( i = 0; i < BITS_IN_INDEX_T; i++ )xlist->item[i] = (item_t *)0;
    2038:	1a 82       	std	Y+2, r1	; 0x02
    203a:	19 82       	std	Y+1, r1	; 0x01
    203c:	10 c0       	rjmp	.+32     	; 0x205e <xlist_init+0x3c>
    203e:	89 81       	ldd	r24, Y+1	; 0x01
    2040:	9a 81       	ldd	r25, Y+2	; 0x02
    2042:	2b 81       	ldd	r18, Y+3	; 0x03
    2044:	3c 81       	ldd	r19, Y+4	; 0x04
    2046:	88 0f       	add	r24, r24
    2048:	99 1f       	adc	r25, r25
    204a:	f9 01       	movw	r30, r18
    204c:	e8 0f       	add	r30, r24
    204e:	f9 1f       	adc	r31, r25
    2050:	11 82       	std	Z+1, r1	; 0x01
    2052:	10 82       	st	Z, r1
    2054:	89 81       	ldd	r24, Y+1	; 0x01
    2056:	9a 81       	ldd	r25, Y+2	; 0x02
    2058:	01 96       	adiw	r24, 0x01	; 1
    205a:	9a 83       	std	Y+2, r25	; 0x02
    205c:	89 83       	std	Y+1, r24	; 0x01
    205e:	89 81       	ldd	r24, Y+1	; 0x01
    2060:	9a 81       	ldd	r25, Y+2	; 0x02
    2062:	88 30       	cpi	r24, 0x08	; 8
    2064:	91 05       	cpc	r25, r1
    2066:	58 f3       	brcs	.-42     	; 0x203e <xlist_init+0x1c>
}
    2068:	0f 90       	pop	r0
    206a:	0f 90       	pop	r0
    206c:	0f 90       	pop	r0
    206e:	0f 90       	pop	r0
    2070:	cf 91       	pop	r28
    2072:	df 91       	pop	r29
    2074:	08 95       	ret

00002076 <xlist_head>:
//===========================================================================
//Поиск головы списка
item_t * xlist_head(xlist_t * xlist)
{
    2076:	df 93       	push	r29
    2078:	cf 93       	push	r28
    207a:	00 d0       	rcall	.+0      	; 0x207c <xlist_head+0x6>
    207c:	00 d0       	rcall	.+0      	; 0x207e <xlist_head+0x8>
    207e:	0f 92       	push	r0
    2080:	cd b7       	in	r28, 0x3d	; 61
    2082:	de b7       	in	r29, 0x3e	; 62
    2084:	9d 83       	std	Y+5, r25	; 0x05
    2086:	8c 83       	std	Y+4, r24	; 0x04
    item_t * ret_val = (item_t *)0;
    2088:	1b 82       	std	Y+3, r1	; 0x03
    208a:	1a 82       	std	Y+2, r1	; 0x02
    index_t index = xlist->index;
    208c:	ec 81       	ldd	r30, Y+4	; 0x04
    208e:	fd 81       	ldd	r31, Y+5	; 0x05
    2090:	80 89       	ldd	r24, Z+16	; 0x10
    2092:	89 83       	std	Y+1, r24	; 0x01

    if( index != (index_t)0 )
    2094:	89 81       	ldd	r24, Y+1	; 0x01
    2096:	88 23       	and	r24, r24
    2098:	81 f0       	breq	.+32     	; 0x20ba <xlist_head+0x44>
    {
        ret_val = xlist->item[ index_search( index ) ];
    209a:	89 81       	ldd	r24, Y+1	; 0x01
    209c:	0e 94 63 08 	call	0x10c6	; 0x10c6 <index_search>
    20a0:	88 2f       	mov	r24, r24
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	2c 81       	ldd	r18, Y+4	; 0x04
    20a6:	3d 81       	ldd	r19, Y+5	; 0x05
    20a8:	88 0f       	add	r24, r24
    20aa:	99 1f       	adc	r25, r25
    20ac:	f9 01       	movw	r30, r18
    20ae:	e8 0f       	add	r30, r24
    20b0:	f9 1f       	adc	r31, r25
    20b2:	80 81       	ld	r24, Z
    20b4:	91 81       	ldd	r25, Z+1	; 0x01
    20b6:	9b 83       	std	Y+3, r25	; 0x03
    20b8:	8a 83       	std	Y+2, r24	; 0x02
    }
    return ret_val;
    20ba:	8a 81       	ldd	r24, Y+2	; 0x02
    20bc:	9b 81       	ldd	r25, Y+3	; 0x03
}
    20be:	0f 90       	pop	r0
    20c0:	0f 90       	pop	r0
    20c2:	0f 90       	pop	r0
    20c4:	0f 90       	pop	r0
    20c6:	0f 90       	pop	r0
    20c8:	cf 91       	pop	r28
    20ca:	df 91       	pop	r29
    20cc:	08 95       	ret

000020ce <xlist_switch>:

//===========================================================================
// переключение указателя в массиве на следующий элемент, пригодится в планировщике
void xlist_switch(xlist_t * xlist, prio_t prio)
{
    20ce:	df 93       	push	r29
    20d0:	cf 93       	push	r28
    20d2:	00 d0       	rcall	.+0      	; 0x20d4 <xlist_switch+0x6>
    20d4:	00 d0       	rcall	.+0      	; 0x20d6 <xlist_switch+0x8>
    20d6:	0f 92       	push	r0
    20d8:	cd b7       	in	r28, 0x3d	; 61
    20da:	de b7       	in	r29, 0x3e	; 62
    20dc:	9c 83       	std	Y+4, r25	; 0x04
    20de:	8b 83       	std	Y+3, r24	; 0x03
    20e0:	6d 83       	std	Y+5, r22	; 0x05
    item_t ** current = xlist->item + prio;
    20e2:	2b 81       	ldd	r18, Y+3	; 0x03
    20e4:	3c 81       	ldd	r19, Y+4	; 0x04
    20e6:	8d 81       	ldd	r24, Y+5	; 0x05
    20e8:	88 2f       	mov	r24, r24
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	88 0f       	add	r24, r24
    20ee:	99 1f       	adc	r25, r25
    20f0:	82 0f       	add	r24, r18
    20f2:	93 1f       	adc	r25, r19
    20f4:	9a 83       	std	Y+2, r25	; 0x02
    20f6:	89 83       	std	Y+1, r24	; 0x01
    *current = (*current)->next;
    20f8:	e9 81       	ldd	r30, Y+1	; 0x01
    20fa:	fa 81       	ldd	r31, Y+2	; 0x02
    20fc:	01 90       	ld	r0, Z+
    20fe:	f0 81       	ld	r31, Z
    2100:	e0 2d       	mov	r30, r0
    2102:	80 81       	ld	r24, Z
    2104:	91 81       	ldd	r25, Z+1	; 0x01
    2106:	e9 81       	ldd	r30, Y+1	; 0x01
    2108:	fa 81       	ldd	r31, Y+2	; 0x02
    210a:	91 83       	std	Z+1, r25	; 0x01
    210c:	80 83       	st	Z, r24
    //*current = (item_t *)*(item_t **)*(item_t ***)current;
}
    210e:	0f 90       	pop	r0
    2110:	0f 90       	pop	r0
    2112:	0f 90       	pop	r0
    2114:	0f 90       	pop	r0
    2116:	0f 90       	pop	r0
    2118:	cf 91       	pop	r28
    211a:	df 91       	pop	r29
    211c:	08 95       	ret

0000211e <start_scheduler>:
    R2_off();
    G2_on();
}

void start_scheduler( void )
{
    211e:	df 93       	push	r29
    2120:	cf 93       	push	r28
    2122:	cd b7       	in	r28, 0x3d	; 61
    2124:	de b7       	in	r29, 0x3e	; 62
    TIMSK2 |= 0x02;
    2126:	a0 e7       	ldi	r26, 0x70	; 112
    2128:	b0 e0       	ldi	r27, 0x00	; 0
    212a:	e0 e7       	ldi	r30, 0x70	; 112
    212c:	f0 e0       	ldi	r31, 0x00	; 0
    212e:	80 81       	ld	r24, Z
    2130:	82 60       	ori	r24, 0x02	; 2
    2132:	8c 93       	st	X, r24
}
    2134:	cf 91       	pop	r28
    2136:	df 91       	pop	r29
    2138:	08 95       	ret

0000213a <blink_1>:
{
    TIMSK2 &= ~0x02;
}

///----------------------------------------------------------------------------------------
void blink_1(void * t) {PORTB ^= 0x10;}
    213a:	df 93       	push	r29
    213c:	cf 93       	push	r28
    213e:	00 d0       	rcall	.+0      	; 0x2140 <blink_1+0x6>
    2140:	cd b7       	in	r28, 0x3d	; 61
    2142:	de b7       	in	r29, 0x3e	; 62
    2144:	9a 83       	std	Y+2, r25	; 0x02
    2146:	89 83       	std	Y+1, r24	; 0x01
    2148:	a5 e2       	ldi	r26, 0x25	; 37
    214a:	b0 e0       	ldi	r27, 0x00	; 0
    214c:	e5 e2       	ldi	r30, 0x25	; 37
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	90 81       	ld	r25, Z
    2152:	80 e1       	ldi	r24, 0x10	; 16
    2154:	89 27       	eor	r24, r25
    2156:	8c 93       	st	X, r24
    2158:	0f 90       	pop	r0
    215a:	0f 90       	pop	r0
    215c:	cf 91       	pop	r28
    215e:	df 91       	pop	r29
    2160:	08 95       	ret

00002162 <blink_2>:
void blink_2(void * t) {PORTB ^= 0x08;}
    2162:	df 93       	push	r29
    2164:	cf 93       	push	r28
    2166:	00 d0       	rcall	.+0      	; 0x2168 <blink_2+0x6>
    2168:	cd b7       	in	r28, 0x3d	; 61
    216a:	de b7       	in	r29, 0x3e	; 62
    216c:	9a 83       	std	Y+2, r25	; 0x02
    216e:	89 83       	std	Y+1, r24	; 0x01
    2170:	a5 e2       	ldi	r26, 0x25	; 37
    2172:	b0 e0       	ldi	r27, 0x00	; 0
    2174:	e5 e2       	ldi	r30, 0x25	; 37
    2176:	f0 e0       	ldi	r31, 0x00	; 0
    2178:	90 81       	ld	r25, Z
    217a:	88 e0       	ldi	r24, 0x08	; 8
    217c:	89 27       	eor	r24, r25
    217e:	8c 93       	st	X, r24
    2180:	0f 90       	pop	r0
    2182:	0f 90       	pop	r0
    2184:	cf 91       	pop	r28
    2186:	df 91       	pop	r29
    2188:	08 95       	ret

0000218a <blink_3>:
void blink_3(void * t) {PORTB ^= 0x04;}
    218a:	df 93       	push	r29
    218c:	cf 93       	push	r28
    218e:	00 d0       	rcall	.+0      	; 0x2190 <blink_3+0x6>
    2190:	cd b7       	in	r28, 0x3d	; 61
    2192:	de b7       	in	r29, 0x3e	; 62
    2194:	9a 83       	std	Y+2, r25	; 0x02
    2196:	89 83       	std	Y+1, r24	; 0x01
    2198:	a5 e2       	ldi	r26, 0x25	; 37
    219a:	b0 e0       	ldi	r27, 0x00	; 0
    219c:	e5 e2       	ldi	r30, 0x25	; 37
    219e:	f0 e0       	ldi	r31, 0x00	; 0
    21a0:	90 81       	ld	r25, Z
    21a2:	84 e0       	ldi	r24, 0x04	; 4
    21a4:	89 27       	eor	r24, r25
    21a6:	8c 93       	st	X, r24
    21a8:	0f 90       	pop	r0
    21aa:	0f 90       	pop	r0
    21ac:	cf 91       	pop	r28
    21ae:	df 91       	pop	r29
    21b0:	08 95       	ret

000021b2 <blink_4>:
void blink_4(void * t) {PORTB ^= 0x02;}
    21b2:	df 93       	push	r29
    21b4:	cf 93       	push	r28
    21b6:	00 d0       	rcall	.+0      	; 0x21b8 <blink_4+0x6>
    21b8:	cd b7       	in	r28, 0x3d	; 61
    21ba:	de b7       	in	r29, 0x3e	; 62
    21bc:	9a 83       	std	Y+2, r25	; 0x02
    21be:	89 83       	std	Y+1, r24	; 0x01
    21c0:	a5 e2       	ldi	r26, 0x25	; 37
    21c2:	b0 e0       	ldi	r27, 0x00	; 0
    21c4:	e5 e2       	ldi	r30, 0x25	; 37
    21c6:	f0 e0       	ldi	r31, 0x00	; 0
    21c8:	90 81       	ld	r25, Z
    21ca:	82 e0       	ldi	r24, 0x02	; 2
    21cc:	89 27       	eor	r24, r25
    21ce:	8c 93       	st	X, r24
    21d0:	0f 90       	pop	r0
    21d2:	0f 90       	pop	r0
    21d4:	cf 91       	pop	r28
    21d6:	df 91       	pop	r29
    21d8:	08 95       	ret

000021da <blink_12>:
void blink_7(void * t) {PORTC ^= 0x10;}
void blink_8(void * t) {PORTC ^= 0x08;}
void blink_9(void * t) {PORTC ^= 0x04;}
void blink_10(void * t) {PORTC ^= 0x02;}
void blink_11(void * t) {PORTC ^= 0x01;}
void blink_12(void * t) {
    21da:	df 93       	push	r29
    21dc:	cf 93       	push	r28
    21de:	00 d0       	rcall	.+0      	; 0x21e0 <blink_12+0x6>
    21e0:	cd b7       	in	r28, 0x3d	; 61
    21e2:	de b7       	in	r29, 0x3e	; 62
    21e4:	9a 83       	std	Y+2, r25	; 0x02
    21e6:	89 83       	std	Y+1, r24	; 0x01
    PORTB ^= 0x20;
    21e8:	a5 e2       	ldi	r26, 0x25	; 37
    21ea:	b0 e0       	ldi	r27, 0x00	; 0
    21ec:	e5 e2       	ldi	r30, 0x25	; 37
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	90 81       	ld	r25, Z
    21f2:	80 e2       	ldi	r24, 0x20	; 32
    21f4:	89 27       	eor	r24, r25
    21f6:	8c 93       	st	X, r24
    blink_G3();
    21f8:	ab e2       	ldi	r26, 0x2B	; 43
    21fa:	b0 e0       	ldi	r27, 0x00	; 0
    21fc:	eb e2       	ldi	r30, 0x2B	; 43
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
    2200:	90 81       	ld	r25, Z
    2202:	80 e4       	ldi	r24, 0x40	; 64
    2204:	89 27       	eor	r24, r25
    2206:	8c 93       	st	X, r24
    blink_R3();
    2208:	ab e2       	ldi	r26, 0x2B	; 43
    220a:	b0 e0       	ldi	r27, 0x00	; 0
    220c:	eb e2       	ldi	r30, 0x2B	; 43
    220e:	f0 e0       	ldi	r31, 0x00	; 0
    2210:	90 81       	ld	r25, Z
    2212:	80 e2       	ldi	r24, 0x20	; 32
    2214:	89 27       	eor	r24, r25
    2216:	8c 93       	st	X, r24
    }
    2218:	0f 90       	pop	r0
    221a:	0f 90       	pop	r0
    221c:	cf 91       	pop	r28
    221e:	df 91       	pop	r29
    2220:	08 95       	ret

00002222 <main0>:
stack_t stack[4][128];

mutex_t mut;

void main0(void * t)
{
    2222:	df 93       	push	r29
    2224:	cf 93       	push	r28
    2226:	00 d0       	rcall	.+0      	; 0x2228 <main0+0x6>
    2228:	cd b7       	in	r28, 0x3d	; 61
    222a:	de b7       	in	r29, 0x3e	; 62
    222c:	9a 83       	std	Y+2, r25	; 0x02
    222e:	89 83       	std	Y+1, r24	; 0x01
    wait_time(2000);
    2230:	80 ed       	ldi	r24, 0xD0	; 208
    2232:	97 e0       	ldi	r25, 0x07	; 7
    2234:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <wait_time>
    while(1)
    {
        mutex_lock(&mut);
    2238:	89 e2       	ldi	r24, 0x29	; 41
    223a:	94 e0       	ldi	r25, 0x04	; 4
    223c:	0e 94 aa 03 	call	0x754	; 0x754 <mutex_lock>
        wait_time(500);
    2240:	84 ef       	ldi	r24, 0xF4	; 244
    2242:	91 e0       	ldi	r25, 0x01	; 1
    2244:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <wait_time>
        mutex_unlock(&mut);
    2248:	89 e2       	ldi	r24, 0x29	; 41
    224a:	94 e0       	ldi	r25, 0x04	; 4
    224c:	0e 94 0e 04 	call	0x81c	; 0x81c <mutex_unlock>
        wait_time(500);
    2250:	84 ef       	ldi	r24, 0xF4	; 244
    2252:	91 e0       	ldi	r25, 0x01	; 1
    2254:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <wait_time>
    2258:	ef cf       	rjmp	.-34     	; 0x2238 <main0+0x16>

0000225a <main1>:
    }
}
void main1(void * t)
{
    225a:	df 93       	push	r29
    225c:	cf 93       	push	r28
    225e:	00 d0       	rcall	.+0      	; 0x2260 <main1+0x6>
    2260:	0f 92       	push	r0
    2262:	cd b7       	in	r28, 0x3d	; 61
    2264:	de b7       	in	r29, 0x3e	; 62
    2266:	9b 83       	std	Y+3, r25	; 0x03
    2268:	8a 83       	std	Y+2, r24	; 0x02
    wait_time(2000);
    226a:	80 ed       	ldi	r24, 0xD0	; 208
    226c:	97 e0       	ldi	r25, 0x07	; 7
    226e:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <wait_time>
    while(1)
    {
        bool_t test = mutex_try_lock( &mut );
    2272:	89 e2       	ldi	r24, 0x29	; 41
    2274:	94 e0       	ldi	r25, 0x04	; 4
    2276:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <mutex_try_lock>
    227a:	89 83       	std	Y+1, r24	; 0x01
        if(test)
    227c:	89 81       	ldd	r24, Y+1	; 0x01
    227e:	88 23       	and	r24, r24
    2280:	c1 f3       	breq	.-16     	; 0x2272 <main1+0x18>
        {
            wait_time(500);
    2282:	84 ef       	ldi	r24, 0xF4	; 244
    2284:	91 e0       	ldi	r25, 0x01	; 1
    2286:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <wait_time>
            mutex_unlock( &mut );
    228a:	89 e2       	ldi	r24, 0x29	; 41
    228c:	94 e0       	ldi	r25, 0x04	; 4
    228e:	0e 94 0e 04 	call	0x81c	; 0x81c <mutex_unlock>
    2292:	ef cf       	rjmp	.-34     	; 0x2272 <main1+0x18>

00002294 <main2>:
        }

    }
}
void main2(void * t)
{
    2294:	df 93       	push	r29
    2296:	cf 93       	push	r28
    2298:	00 d0       	rcall	.+0      	; 0x229a <main2+0x6>
    229a:	cd b7       	in	r28, 0x3d	; 61
    229c:	de b7       	in	r29, 0x3e	; 62
    229e:	9a 83       	std	Y+2, r25	; 0x02
    22a0:	89 83       	std	Y+1, r24	; 0x01
    wait_time(2000);
    22a2:	80 ed       	ldi	r24, 0xD0	; 208
    22a4:	97 e0       	ldi	r25, 0x07	; 7
    22a6:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <wait_time>
    while(1)
    {
        wait_time(500);
    22aa:	84 ef       	ldi	r24, 0xF4	; 244
    22ac:	91 e0       	ldi	r25, 0x01	; 1
    22ae:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <wait_time>
    22b2:	fb cf       	rjmp	.-10     	; 0x22aa <main2+0x16>

000022b4 <main3>:
    22b4:	df 93       	push	r29
    22b6:	cf 93       	push	r28
    22b8:	00 d0       	rcall	.+0      	; 0x22ba <main3+0x6>
    22ba:	cd b7       	in	r28, 0x3d	; 61
    22bc:	de b7       	in	r29, 0x3e	; 62
    22be:	9a 83       	std	Y+2, r25	; 0x02
    22c0:	89 83       	std	Y+1, r24	; 0x01
    22c2:	80 ed       	ldi	r24, 0xD0	; 208
    22c4:	97 e0       	ldi	r25, 0x07	; 7
    22c6:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <wait_time>
    22ca:	89 e2       	ldi	r24, 0x29	; 41
    22cc:	94 e0       	ldi	r25, 0x04	; 4
    22ce:	0e 94 aa 03 	call	0x754	; 0x754 <mutex_lock>
    22d2:	83 ef       	ldi	r24, 0xF3	; 243
    22d4:	91 e0       	ldi	r25, 0x01	; 1
    22d6:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <wait_time>
    22da:	89 e2       	ldi	r24, 0x29	; 41
    22dc:	94 e0       	ldi	r25, 0x04	; 4
    22de:	0e 94 0e 04 	call	0x81c	; 0x81c <mutex_unlock>
    22e2:	85 ef       	ldi	r24, 0xF5	; 245
    22e4:	91 e0       	ldi	r25, 0x01	; 1
    22e6:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <wait_time>
    22ea:	ef cf       	rjmp	.-34     	; 0x22ca <main3+0x16>

000022ec <idle_main>:
        wait_time(501);
    }
}

void idle_main(void *arg)
{
    22ec:	df 93       	push	r29
    22ee:	cf 93       	push	r28
    22f0:	00 d0       	rcall	.+0      	; 0x22f2 <idle_main+0x6>
    22f2:	cd b7       	in	r28, 0x3d	; 61
    22f4:	de b7       	in	r29, 0x3e	; 62
    22f6:	9a 83       	std	Y+2, r25	; 0x02
    22f8:	89 83       	std	Y+1, r24	; 0x01
    while(1)
    {
         wait_time(500);
    22fa:	84 ef       	ldi	r24, 0xF4	; 244
    22fc:	91 e0       	ldi	r25, 0x01	; 1
    22fe:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <wait_time>
    2302:	fb cf       	rjmp	.-10     	; 0x22fa <idle_main+0xe>

00002304 <main>:
    }
}

int main(void)
{
    2304:	8f 92       	push	r8
    2306:	af 92       	push	r10
    2308:	bf 92       	push	r11
    230a:	cf 92       	push	r12
    230c:	ef 92       	push	r14
    230e:	ff 92       	push	r15
    2310:	0f 93       	push	r16
    2312:	1f 93       	push	r17
    2314:	df 93       	push	r29
    2316:	cf 93       	push	r28
    2318:	cd b7       	in	r28, 0x3d	; 61
    231a:	de b7       	in	r29, 0x3e	; 62
    init_bugurt();
    231c:	0e 94 43 01 	call	0x286	; 0x286 <init_bugurt>

    TCCR2A = 0x02;//
    2320:	e0 eb       	ldi	r30, 0xB0	; 176
    2322:	f0 e0       	ldi	r31, 0x00	; 0
    2324:	82 e0       	ldi	r24, 0x02	; 2
    2326:	80 83       	st	Z, r24
    TCCR2B = 0x05;// prescaler=128
    2328:	e1 eb       	ldi	r30, 0xB1	; 177
    232a:	f0 e0       	ldi	r31, 0x00	; 0
    232c:	85 e0       	ldi	r24, 0x05	; 5
    232e:	80 83       	st	Z, r24
    OCR2A  = 124;
    2330:	e3 eb       	ldi	r30, 0xB3	; 179
    2332:	f0 e0       	ldi	r31, 0x00	; 0
    2334:	8c e7       	ldi	r24, 0x7C	; 124
    2336:	80 83       	st	Z, r24
    OCR2B  = 0x00;
    2338:	e4 eb       	ldi	r30, 0xB4	; 180
    233a:	f0 e0       	ldi	r31, 0x00	; 0
    233c:	10 82       	st	Z, r1
    TIMSK2 = 0x00; // shceduler not started
    233e:	e0 e7       	ldi	r30, 0x70	; 112
    2340:	f0 e0       	ldi	r31, 0x00	; 0
    2342:	10 82       	st	Z, r1
    TIFR2  = 0x00;
    2344:	e7 e3       	ldi	r30, 0x37	; 55
    2346:	f0 e0       	ldi	r31, 0x00	; 0
    2348:	10 82       	st	Z, r1

    EICRA = 0x08; //falling edge
    234a:	e9 e6       	ldi	r30, 0x69	; 105
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	88 e0       	ldi	r24, 0x08	; 8
    2350:	80 83       	st	Z, r24
    EIMSK = 0x02; //resched generates int1, mask 0x02
    2352:	ed e3       	ldi	r30, 0x3D	; 61
    2354:	f0 e0       	ldi	r31, 0x00	; 0
    2356:	82 e0       	ldi	r24, 0x02	; 2
    2358:	80 83       	st	Z, r24
    EIFR  |= 0x02;
    235a:	ac e3       	ldi	r26, 0x3C	; 60
    235c:	b0 e0       	ldi	r27, 0x00	; 0
    235e:	ec e3       	ldi	r30, 0x3C	; 60
    2360:	f0 e0       	ldi	r31, 0x00	; 0
    2362:	80 81       	ld	r24, Z
    2364:	82 60       	ori	r24, 0x02	; 2
    2366:	8c 93       	st	X, r24

    DDRB = 0x3F;
    2368:	e4 e2       	ldi	r30, 0x24	; 36
    236a:	f0 e0       	ldi	r31, 0x00	; 0
    236c:	8f e3       	ldi	r24, 0x3F	; 63
    236e:	80 83       	st	Z, r24
    PORTB = 0x00;
    2370:	e5 e2       	ldi	r30, 0x25	; 37
    2372:	f0 e0       	ldi	r31, 0x00	; 0
    2374:	10 82       	st	Z, r1
    DDRC = 0x3F;
    2376:	e7 e2       	ldi	r30, 0x27	; 39
    2378:	f0 e0       	ldi	r31, 0x00	; 0
    237a:	8f e3       	ldi	r24, 0x3F	; 63
    237c:	80 83       	st	Z, r24
    PORTC = 0x00;
    237e:	e8 e2       	ldi	r30, 0x28	; 40
    2380:	f0 e0       	ldi	r31, 0x00	; 0
    2382:	10 82       	st	Z, r1
    DDRD = 0xFE;
    2384:	ea e2       	ldi	r30, 0x2A	; 42
    2386:	f0 e0       	ldi	r31, 0x00	; 0
    2388:	8e ef       	ldi	r24, 0xFE	; 254
    238a:	80 83       	st	Z, r24
    PORTD = 0x00;
    238c:	eb e2       	ldi	r30, 0x2B	; 43
    238e:	f0 e0       	ldi	r31, 0x00	; 0
    2390:	10 82       	st	Z, r1

    G1_on();
    2392:	ab e2       	ldi	r26, 0x2B	; 43
    2394:	b0 e0       	ldi	r27, 0x00	; 0
    2396:	eb e2       	ldi	r30, 0x2B	; 43
    2398:	f0 e0       	ldi	r31, 0x00	; 0
    239a:	80 81       	ld	r24, Z
    239c:	80 61       	ori	r24, 0x10	; 16
    239e:	8c 93       	st	X, r24
    G2_on();
    23a0:	ab e2       	ldi	r26, 0x2B	; 43
    23a2:	b0 e0       	ldi	r27, 0x00	; 0
    23a4:	eb e2       	ldi	r30, 0x2B	; 43
    23a6:	f0 e0       	ldi	r31, 0x00	; 0
    23a8:	80 81       	ld	r24, Z
    23aa:	88 60       	ori	r24, 0x08	; 8
    23ac:	8c 93       	st	X, r24
    R3_on();
    23ae:	ab e2       	ldi	r26, 0x2B	; 43
    23b0:	b0 e0       	ldi	r27, 0x00	; 0
    23b2:	eb e2       	ldi	r30, 0x2B	; 43
    23b4:	f0 e0       	ldi	r31, 0x00	; 0
    23b6:	80 81       	ld	r24, Z
    23b8:	80 62       	ori	r24, 0x20	; 32
    23ba:	8c 93       	st	X, r24

    proc_init_isr(&proc[0], main0, blink_1, blink_1, 0, &stack[0][127], 1, 2, 0);
    23bc:	89 e2       	ldi	r24, 0x29	; 41
    23be:	92 e0       	ldi	r25, 0x02	; 2
    23c0:	dc 01       	movw	r26, r24
    23c2:	a1 58       	subi	r26, 0x81	; 129
    23c4:	bf 4f       	sbci	r27, 0xFF	; 255
    23c6:	81 e7       	ldi	r24, 0x71	; 113
    23c8:	91 e0       	ldi	r25, 0x01	; 1
    23ca:	21 e1       	ldi	r18, 0x11	; 17
    23cc:	31 e1       	ldi	r19, 0x11	; 17
    23ce:	4d e9       	ldi	r20, 0x9D	; 157
    23d0:	50 e1       	ldi	r21, 0x10	; 16
    23d2:	ed e9       	ldi	r30, 0x9D	; 157
    23d4:	f0 e1       	ldi	r31, 0x10	; 16
    23d6:	b9 01       	movw	r22, r18
    23d8:	9f 01       	movw	r18, r30
    23da:	00 e0       	ldi	r16, 0x00	; 0
    23dc:	10 e0       	ldi	r17, 0x00	; 0
    23de:	7d 01       	movw	r14, r26
    23e0:	cc 24       	eor	r12, r12
    23e2:	c3 94       	inc	r12
    23e4:	aa 24       	eor	r10, r10
    23e6:	bb 24       	eor	r11, r11
    23e8:	68 94       	set
    23ea:	a1 f8       	bld	r10, 1
    23ec:	88 24       	eor	r8, r8
    23ee:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <proc_init_isr>
    proc_init_isr(&proc[1], main1, blink_2, blink_2, 0, &stack[1][127], 2, 3, 0);
    23f2:	89 e2       	ldi	r24, 0x29	; 41
    23f4:	92 e0       	ldi	r25, 0x02	; 2
    23f6:	dc 01       	movw	r26, r24
    23f8:	a1 50       	subi	r26, 0x01	; 1
    23fa:	bf 4f       	sbci	r27, 0xFF	; 255
    23fc:	8f e9       	ldi	r24, 0x9F	; 159
    23fe:	91 e0       	ldi	r25, 0x01	; 1
    2400:	2d e2       	ldi	r18, 0x2D	; 45
    2402:	31 e1       	ldi	r19, 0x11	; 17
    2404:	41 eb       	ldi	r20, 0xB1	; 177
    2406:	50 e1       	ldi	r21, 0x10	; 16
    2408:	e1 eb       	ldi	r30, 0xB1	; 177
    240a:	f0 e1       	ldi	r31, 0x10	; 16
    240c:	b9 01       	movw	r22, r18
    240e:	9f 01       	movw	r18, r30
    2410:	00 e0       	ldi	r16, 0x00	; 0
    2412:	10 e0       	ldi	r17, 0x00	; 0
    2414:	7d 01       	movw	r14, r26
    2416:	cc 24       	eor	r12, r12
    2418:	68 94       	set
    241a:	c1 f8       	bld	r12, 1
    241c:	0f 2e       	mov	r0, r31
    241e:	f3 e0       	ldi	r31, 0x03	; 3
    2420:	af 2e       	mov	r10, r31
    2422:	bb 24       	eor	r11, r11
    2424:	f0 2d       	mov	r31, r0
    2426:	88 24       	eor	r8, r8
    2428:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <proc_init_isr>
    proc_init_isr(&proc[2], main2, blink_3, blink_3, 0, &stack[2][127], 2, 4, 0);// Типа реального времени
    242c:	89 e2       	ldi	r24, 0x29	; 41
    242e:	92 e0       	ldi	r25, 0x02	; 2
    2430:	dc 01       	movw	r26, r24
    2432:	a1 58       	subi	r26, 0x81	; 129
    2434:	be 4f       	sbci	r27, 0xFE	; 254
    2436:	8d ec       	ldi	r24, 0xCD	; 205
    2438:	91 e0       	ldi	r25, 0x01	; 1
    243a:	2a e4       	ldi	r18, 0x4A	; 74
    243c:	31 e1       	ldi	r19, 0x11	; 17
    243e:	45 ec       	ldi	r20, 0xC5	; 197
    2440:	50 e1       	ldi	r21, 0x10	; 16
    2442:	e5 ec       	ldi	r30, 0xC5	; 197
    2444:	f0 e1       	ldi	r31, 0x10	; 16
    2446:	b9 01       	movw	r22, r18
    2448:	9f 01       	movw	r18, r30
    244a:	00 e0       	ldi	r16, 0x00	; 0
    244c:	10 e0       	ldi	r17, 0x00	; 0
    244e:	7d 01       	movw	r14, r26
    2450:	cc 24       	eor	r12, r12
    2452:	68 94       	set
    2454:	c1 f8       	bld	r12, 1
    2456:	aa 24       	eor	r10, r10
    2458:	bb 24       	eor	r11, r11
    245a:	68 94       	set
    245c:	a2 f8       	bld	r10, 2
    245e:	88 24       	eor	r8, r8
    2460:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <proc_init_isr>
    proc_init_isr(&proc[3], main3, blink_4, blink_4, 0, &stack[3][127], 3, 4, 0);
    2464:	89 e2       	ldi	r24, 0x29	; 41
    2466:	92 e0       	ldi	r25, 0x02	; 2
    2468:	dc 01       	movw	r26, r24
    246a:	a1 50       	subi	r26, 0x01	; 1
    246c:	be 4f       	sbci	r27, 0xFE	; 254
    246e:	8b ef       	ldi	r24, 0xFB	; 251
    2470:	91 e0       	ldi	r25, 0x01	; 1
    2472:	2a e5       	ldi	r18, 0x5A	; 90
    2474:	31 e1       	ldi	r19, 0x11	; 17
    2476:	49 ed       	ldi	r20, 0xD9	; 217
    2478:	50 e1       	ldi	r21, 0x10	; 16
    247a:	e9 ed       	ldi	r30, 0xD9	; 217
    247c:	f0 e1       	ldi	r31, 0x10	; 16
    247e:	b9 01       	movw	r22, r18
    2480:	9f 01       	movw	r18, r30
    2482:	00 e0       	ldi	r16, 0x00	; 0
    2484:	10 e0       	ldi	r17, 0x00	; 0
    2486:	7d 01       	movw	r14, r26
    2488:	0f 2e       	mov	r0, r31
    248a:	f3 e0       	ldi	r31, 0x03	; 3
    248c:	cf 2e       	mov	r12, r31
    248e:	f0 2d       	mov	r31, r0
    2490:	aa 24       	eor	r10, r10
    2492:	bb 24       	eor	r11, r11
    2494:	68 94       	set
    2496:	a2 f8       	bld	r10, 2
    2498:	88 24       	eor	r8, r8
    249a:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <proc_init_isr>
    kernel.idle.rs_hook = blink_12;
    249e:	8d ee       	ldi	r24, 0xED	; 237
    24a0:	90 e1       	ldi	r25, 0x10	; 16
    24a2:	90 93 66 01 	sts	0x0166, r25
    24a6:	80 93 65 01 	sts	0x0165, r24
    kernel.idle.sv_hook = blink_12;
    24aa:	8d ee       	ldi	r24, 0xED	; 237
    24ac:	90 e1       	ldi	r25, 0x10	; 16
    24ae:	90 93 64 01 	sts	0x0164, r25
    24b2:	80 93 63 01 	sts	0x0163, r24

    proc_run_isr(&proc[0]);
    24b6:	81 e7       	ldi	r24, 0x71	; 113
    24b8:	91 e0       	ldi	r25, 0x01	; 1
    24ba:	0e 94 9e 0b 	call	0x173c	; 0x173c <proc_run_isr>
    proc_run_isr(&proc[1]);
    24be:	8f e9       	ldi	r24, 0x9F	; 159
    24c0:	91 e0       	ldi	r25, 0x01	; 1
    24c2:	0e 94 9e 0b 	call	0x173c	; 0x173c <proc_run_isr>
    proc_run_isr(&proc[2]);
    24c6:	8d ec       	ldi	r24, 0xCD	; 205
    24c8:	91 e0       	ldi	r25, 0x01	; 1
    24ca:	0e 94 9e 0b 	call	0x173c	; 0x173c <proc_run_isr>
    proc_run_isr(&proc[3]);
    24ce:	8b ef       	ldi	r24, 0xFB	; 251
    24d0:	91 e0       	ldi	r25, 0x01	; 1
    24d2:	0e 94 9e 0b 	call	0x173c	; 0x173c <proc_run_isr>

    mutex_init_isr(&mut,1);
    24d6:	89 e2       	ldi	r24, 0x29	; 41
    24d8:	94 e0       	ldi	r25, 0x04	; 4
    24da:	61 e0       	ldi	r22, 0x01	; 1
    24dc:	0e 94 57 09 	call	0x12ae	; 0x12ae <mutex_init_isr>

    start_bugurt();
    24e0:	0e 94 53 01 	call	0x2a6	; 0x2a6 <start_bugurt>
    // Insert code

    return 0;
    24e4:	80 e0       	ldi	r24, 0x00	; 0
    24e6:	90 e0       	ldi	r25, 0x00	; 0
}
    24e8:	cf 91       	pop	r28
    24ea:	df 91       	pop	r29
    24ec:	1f 91       	pop	r17
    24ee:	0f 91       	pop	r16
    24f0:	ff 90       	pop	r15
    24f2:	ef 90       	pop	r14
    24f4:	cf 90       	pop	r12
    24f6:	bf 90       	pop	r11
    24f8:	af 90       	pop	r10
    24fa:	8f 90       	pop	r8
    24fc:	08 95       	ret

000024fe <_exit>:
    24fe:	f8 94       	cli

00002500 <__stop_program>:
    2500:	ff cf       	rjmp	.-2      	; 0x2500 <__stop_program>
