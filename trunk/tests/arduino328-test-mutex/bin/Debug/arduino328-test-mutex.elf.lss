
bin/Debug/arduino328-test-mutex.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000026c8  0000275c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000026c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003c3  00800102  00800102  0000275e  2**0
                  ALLOC
  3 .stab         00007194  00000000  00000000  00002760  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000369a  00000000  00000000  000098f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       8:	0c 94 15 02 	jmp	0x42a	; 0x42a <__vector_2>
       c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 42 01 	jmp	0x284	; 0x284 <__vector_7>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      54:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

00000068 <syscall_routine>:
      68:	74 02 bd 02 d7 02 f1 02 0b 03 24 03 87 03 98 03     t.........$.....
      78:	a8 03 b8 03 c8 03 d8 03 ef 03 09 04 19 04 2f 04     ............../.
      88:	66 04 9d 04                                         f...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e8 ec       	ldi	r30, 0xC8	; 200
      a0:	f6 e2       	ldi	r31, 0x26	; 38
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <.do_copy_data_start>

000000a4 <.do_copy_data_loop>:
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0

000000a8 <.do_copy_data_start>:
      a8:	a2 30       	cpi	r26, 0x02	; 2
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <.do_copy_data_loop>

000000ae <__do_clear_bss>:
      ae:	14 e0       	ldi	r17, 0x04	; 4
      b0:	a2 e0       	ldi	r26, 0x02	; 2
      b2:	b1 e0       	ldi	r27, 0x01	; 1
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	a5 3c       	cpi	r26, 0xC5	; 197
      ba:	b1 07       	cpc	r27, r17
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 6d 12 	call	0x24da	; 0x24da <main>
      c2:	0c 94 62 13 	jmp	0x26c4	; 0x26c4 <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <osbme_store_context>:
      ca:	2f 92       	push	r2
      cc:	2f b6       	in	r2, 0x3f	; 63
      ce:	2f 92       	push	r2
      d0:	3f 92       	push	r3
      d2:	4f 92       	push	r4
      d4:	5f 92       	push	r5
      d6:	6f 92       	push	r6
      d8:	7f 92       	push	r7
      da:	8f 92       	push	r8
      dc:	9f 92       	push	r9
      de:	af 92       	push	r10
      e0:	bf 92       	push	r11
      e2:	cf 92       	push	r12
      e4:	df 92       	push	r13
      e6:	ef 92       	push	r14
      e8:	ff 92       	push	r15
      ea:	0f 93       	push	r16
      ec:	1f 93       	push	r17
      ee:	2f 93       	push	r18
      f0:	3f 93       	push	r19
      f2:	4f 93       	push	r20
      f4:	5f 93       	push	r21
      f6:	6f 93       	push	r22
      f8:	7f 93       	push	r23
      fa:	8f 93       	push	r24
      fc:	9f 93       	push	r25
      fe:	af 93       	push	r26
     100:	bf 93       	push	r27
     102:	cf 93       	push	r28
     104:	df 93       	push	r29
     106:	ef 93       	push	r30
     108:	ff 93       	push	r31
     10a:	ed b7       	in	r30, 0x3d	; 61
     10c:	fe b7       	in	r31, 0x3e	; 62
     10e:	21 a1       	ldd	r18, Z+33	; 0x21
     110:	30 a1       	ldd	r19, Z+32	; 0x20
     112:	01 a2       	std	Z+33, r0	; 0x21
     114:	10 a2       	std	Z+32, r1	; 0x20
     116:	11 24       	eor	r1, r1
     118:	8d b7       	in	r24, 0x3d	; 61
     11a:	9e b7       	in	r25, 0x3e	; 62
     11c:	2f 93       	push	r18
     11e:	3f 93       	push	r19
     120:	08 95       	ret

00000122 <osbme_load_context>:
     122:	3f 91       	pop	r19
     124:	2f 91       	pop	r18
     126:	9e bf       	out	0x3e, r25	; 62
     128:	8d bf       	out	0x3d, r24	; 61
     12a:	fe b7       	in	r31, 0x3e	; 62
     12c:	ed b7       	in	r30, 0x3d	; 61
     12e:	10 a0       	ldd	r1, Z+32	; 0x20
     130:	01 a0       	ldd	r0, Z+33	; 0x21
     132:	30 a3       	std	Z+32, r19	; 0x20
     134:	21 a3       	std	Z+33, r18	; 0x21
     136:	ff 91       	pop	r31
     138:	ef 91       	pop	r30
     13a:	df 91       	pop	r29
     13c:	cf 91       	pop	r28
     13e:	bf 91       	pop	r27
     140:	af 91       	pop	r26
     142:	9f 91       	pop	r25
     144:	8f 91       	pop	r24
     146:	7f 91       	pop	r23
     148:	6f 91       	pop	r22
     14a:	5f 91       	pop	r21
     14c:	4f 91       	pop	r20
     14e:	3f 91       	pop	r19
     150:	2f 91       	pop	r18
     152:	1f 91       	pop	r17
     154:	0f 91       	pop	r16
     156:	ff 90       	pop	r15
     158:	ef 90       	pop	r14
     15a:	df 90       	pop	r13
     15c:	cf 90       	pop	r12
     15e:	bf 90       	pop	r11
     160:	af 90       	pop	r10
     162:	9f 90       	pop	r9
     164:	8f 90       	pop	r8
     166:	7f 90       	pop	r7
     168:	6f 90       	pop	r6
     16a:	5f 90       	pop	r5
     16c:	4f 90       	pop	r4
     16e:	3f 90       	pop	r3
     170:	2f 90       	pop	r2
     172:	2f be       	out	0x3f, r2	; 63
     174:	2f 90       	pop	r2
     176:	08 95       	ret

00000178 <disable_interrupts>:
//Внешние функции, специфичные для AVR
extern void start_scheduler( void );
extern void stop_scheduler( void );
// Просто функции, специфичные для AVR
void disable_interrupts(void)
{
     178:	df 93       	push	r29
     17a:	cf 93       	push	r28
     17c:	cd b7       	in	r28, 0x3d	; 61
     17e:	de b7       	in	r29, 0x3e	; 62
    cli();
     180:	f8 94       	cli
}
     182:	cf 91       	pop	r28
     184:	df 91       	pop	r29
     186:	08 95       	ret

00000188 <enable_interrupts>:
void enable_interrupts(void)
{
     188:	df 93       	push	r29
     18a:	cf 93       	push	r28
     18c:	cd b7       	in	r28, 0x3d	; 61
     18e:	de b7       	in	r29, 0x3e	; 62
    sei();
     190:	78 94       	sei
}
     192:	cf 91       	pop	r28
     194:	df 91       	pop	r29
     196:	08 95       	ret

00000198 <current_proc>:

proc_t * current_proc(void)
{
     198:	df 93       	push	r29
     19a:	cf 93       	push	r28
     19c:	cd b7       	in	r28, 0x3d	; 61
     19e:	de b7       	in	r29, 0x3e	; 62
    return kernel.sched.current_proc;
     1a0:	80 91 9e 01 	lds	r24, 0x019E
     1a4:	90 91 9f 01 	lds	r25, 0x019F
}
     1a8:	cf 91       	pop	r28
     1aa:	df 91       	pop	r29
     1ac:	08 95       	ret

000001ae <proc_stack_init>:

void * proc_stack_init(stack_t * sstart, code_t code, void * arg)
{
     1ae:	df 93       	push	r29
     1b0:	cf 93       	push	r28
     1b2:	00 d0       	rcall	.+0      	; 0x1b4 <proc_stack_init+0x6>
     1b4:	00 d0       	rcall	.+0      	; 0x1b6 <proc_stack_init+0x8>
     1b6:	00 d0       	rcall	.+0      	; 0x1b8 <proc_stack_init+0xa>
     1b8:	cd b7       	in	r28, 0x3d	; 61
     1ba:	de b7       	in	r29, 0x3e	; 62
     1bc:	9a 83       	std	Y+2, r25	; 0x02
     1be:	89 83       	std	Y+1, r24	; 0x01
     1c0:	7c 83       	std	Y+4, r23	; 0x04
     1c2:	6b 83       	std	Y+3, r22	; 0x03
     1c4:	5e 83       	std	Y+6, r21	; 0x06
     1c6:	4d 83       	std	Y+5, r20	; 0x05
    return osbme_init_stack( (void *)sstart, (osbme_code_t)proc_run_wrapper, (void *)arg );
     1c8:	4c e5       	ldi	r20, 0x5C	; 92
     1ca:	53 e0       	ldi	r21, 0x03	; 3
     1cc:	89 81       	ldd	r24, Y+1	; 0x01
     1ce:	9a 81       	ldd	r25, Y+2	; 0x02
     1d0:	2d 81       	ldd	r18, Y+5	; 0x05
     1d2:	3e 81       	ldd	r19, Y+6	; 0x06
     1d4:	ba 01       	movw	r22, r20
     1d6:	a9 01       	movw	r20, r18
     1d8:	0e 94 bf 04 	call	0x97e	; 0x97e <osbme_init_stack>
}
     1dc:	26 96       	adiw	r28, 0x06	; 6
     1de:	0f b6       	in	r0, 0x3f	; 63
     1e0:	f8 94       	cli
     1e2:	de bf       	out	0x3e, r29	; 62
     1e4:	0f be       	out	0x3f, r0	; 63
     1e6:	cd bf       	out	0x3d, r28	; 61
     1e8:	cf 91       	pop	r28
     1ea:	df 91       	pop	r29
     1ec:	08 95       	ret

000001ee <resched>:
//Через этот указатель будет вызываться обработчик прерывания
void (*kernel_isr)(void);

// Функция перепланировки
void resched(void)
{
     1ee:	df 93       	push	r29
     1f0:	cf 93       	push	r28
     1f2:	cd b7       	in	r28, 0x3d	; 61
     1f4:	de b7       	in	r29, 0x3e	; 62
    kernel_state |= KRN_FLG_RESCHED;
     1f6:	80 91 00 01 	lds	r24, 0x0100
     1fa:	81 60       	ori	r24, 0x01	; 1
     1fc:	80 93 00 01 	sts	0x0100, r24
}
     200:	cf 91       	pop	r28
     202:	df 91       	pop	r29
     204:	08 95       	ret

00000206 <kernel_process_switch>:

__attribute__((naked)) void kernel_process_switch(void)
{
    //Сразу же после обработки отложенных прерываний передаем управление процессу
    kernel_sp = osbme_store_context();
     206:	0e 94 65 00 	call	0xca	; 0xca <osbme_store_context>
     20a:	90 93 9d 01 	sts	0x019D, r25
     20e:	80 93 9c 01 	sts	0x019C, r24
    osbme_load_context( proc_sp );
     212:	80 91 9a 01 	lds	r24, 0x019A
     216:	90 91 9b 01 	lds	r25, 0x019B
     21a:	0e 94 91 00 	call	0x122	; 0x122 <osbme_load_context>
    __asm__ __volatile__("reti"::);/// Дада, именно reti, мы же типа прерывания счас обрабатывали
     21e:	18 95       	reti

00000220 <kernel_thread>:
    osbme_load_context( kernel_sp );
    __asm__ __volatile__("ret"::);
}
///================================================================
void kernel_thread(void)
{
     220:	df 93       	push	r29
     222:	cf 93       	push	r28
     224:	cd b7       	in	r28, 0x3d	; 61
     226:	de b7       	in	r29, 0x3e	; 62
    while(1)
    {
        // Если надо перепланировать - перепланируем
        if( kernel_state & KRN_FLG_RESCHED )
     228:	80 91 00 01 	lds	r24, 0x0100
     22c:	88 2f       	mov	r24, r24
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	81 70       	andi	r24, 0x01	; 1
     232:	90 70       	andi	r25, 0x00	; 0
     234:	88 23       	and	r24, r24
     236:	79 f0       	breq	.+30     	; 0x256 <kernel_thread+0x36>
        {
            kernel_state &= ~KRN_FLG_RESCHED;
     238:	80 91 00 01 	lds	r24, 0x0100
     23c:	8e 7f       	andi	r24, 0xFE	; 254
     23e:	80 93 00 01 	sts	0x0100, r24
            proc_sp = sched_reschedule( proc_sp );
     242:	80 91 9a 01 	lds	r24, 0x019A
     246:	90 91 9b 01 	lds	r25, 0x019B
     24a:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <sched_reschedule>
     24e:	90 93 9b 01 	sts	0x019B, r25
     252:	80 93 9a 01 	sts	0x019A, r24
        }
        /// Прямая передача управления от ядра к процессу, прерывания запрещены
        kernel_process_switch();//В результате выполнения этого прерывания будут разрешены
     256:	0e 94 03 01 	call	0x206	; 0x206 <kernel_process_switch>
        /// Сюда можно попасть только из прерывания, либо из процесса, при этом прерывания опять таки запрещены

        #ifdef SYSCALL_ISR
        if( kernel_state & KRN_FLG_GET_SDATA )
     25a:	80 91 00 01 	lds	r24, 0x0100
     25e:	88 2f       	mov	r24, r24
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	84 70       	andi	r24, 0x04	; 4
     264:	90 70       	andi	r25, 0x00	; 0
     266:	00 97       	sbiw	r24, 0x00	; 0
     268:	39 f0       	breq	.+14     	; 0x278 <kernel_thread+0x58>
        {
            syscall_data_get();
     26a:	0e 94 d7 01 	call	0x3ae	; 0x3ae <syscall_data_get>
            kernel_state &= ~KRN_FLG_GET_SDATA;
     26e:	80 91 00 01 	lds	r24, 0x0100
     272:	8b 7f       	andi	r24, 0xFB	; 251
     274:	80 93 00 01 	sts	0x0100, r24
        }
        #endif

        // Обработка прерывания
        kernel_isr();
     278:	e0 91 98 01 	lds	r30, 0x0198
     27c:	f0 91 99 01 	lds	r31, 0x0199
     280:	09 95       	icall
     282:	d2 cf       	rjmp	.-92     	; 0x228 <kernel_thread+0x8>

00000284 <__vector_7>:
    }
}

// А вот и первое определение обработчика прерывания
BUGURT_INTERRUPT(SYSTEM_TIMER_ISR)
     284:	0e 94 65 00 	call	0xca	; 0xca <osbme_store_context>
     288:	90 93 9b 01 	sts	0x019B, r25
     28c:	80 93 9a 01 	sts	0x019A, r24
     290:	85 e5       	ldi	r24, 0x55	; 85
     292:	91 e0       	ldi	r25, 0x01	; 1
     294:	90 93 99 01 	sts	0x0199, r25
     298:	80 93 98 01 	sts	0x0198, r24
     29c:	80 91 9c 01 	lds	r24, 0x019C
     2a0:	90 91 9d 01 	lds	r25, 0x019D
     2a4:	0e 94 91 00 	call	0x122	; 0x122 <osbme_load_context>
     2a8:	08 95       	ret

000002aa <__vector_7_func>:
{
     2aa:	df 93       	push	r29
     2ac:	cf 93       	push	r28
     2ae:	cd b7       	in	r28, 0x3d	; 61
     2b0:	de b7       	in	r29, 0x3e	; 62
    kernel.timer++;
     2b2:	80 91 f8 01 	lds	r24, 0x01F8
     2b6:	90 91 f9 01 	lds	r25, 0x01F9
     2ba:	01 96       	adiw	r24, 0x01	; 1
     2bc:	90 93 f9 01 	sts	0x01F9, r25
     2c0:	80 93 f8 01 	sts	0x01F8, r24
    proc_sp = sched_schedule( proc_sp );
     2c4:	80 91 9a 01 	lds	r24, 0x019A
     2c8:	90 91 9b 01 	lds	r25, 0x019B
     2cc:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <sched_schedule>
     2d0:	90 93 9b 01 	sts	0x019B, r25
     2d4:	80 93 9a 01 	sts	0x019A, r24
}
     2d8:	cf 91       	pop	r28
     2da:	df 91       	pop	r29
     2dc:	08 95       	ret

000002de <init_bugurt>:

/***************************************************************************************************************/
// Функции общего пользования

void init_bugurt(void)
{
     2de:	df 93       	push	r29
     2e0:	cf 93       	push	r28
     2e2:	cd b7       	in	r28, 0x3d	; 61
     2e4:	de b7       	in	r29, 0x3e	; 62
    cli();
     2e6:	f8 94       	cli
    kernel_init();
     2e8:	0e 94 c1 09 	call	0x1382	; 0x1382 <kernel_init>
    proc_sp = osbme_init_stack( &idle_stack[CONFIG_IDLE_STACK_SIZE-1], idle_main, 0);
     2ec:	87 e9       	ldi	r24, 0x97	; 151
     2ee:	91 e0       	ldi	r25, 0x01	; 1
     2f0:	21 e6       	ldi	r18, 0x61	; 97
     2f2:	32 e1       	ldi	r19, 0x12	; 18
     2f4:	b9 01       	movw	r22, r18
     2f6:	40 e0       	ldi	r20, 0x00	; 0
     2f8:	50 e0       	ldi	r21, 0x00	; 0
     2fa:	0e 94 bf 04 	call	0x97e	; 0x97e <osbme_init_stack>
     2fe:	90 93 9b 01 	sts	0x019B, r25
     302:	80 93 9a 01 	sts	0x019A, r24
    kernel.idle.spointer = proc_sp;
     306:	80 91 9a 01 	lds	r24, 0x019A
     30a:	90 91 9b 01 	lds	r25, 0x019B
     30e:	90 93 f5 01 	sts	0x01F5, r25
     312:	80 93 f4 01 	sts	0x01F4, r24
    kernel.sched.nested_crit_sec = (count_t)1;
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	90 93 c7 01 	sts	0x01C7, r25
     31e:	80 93 c6 01 	sts	0x01C6, r24
}
     322:	cf 91       	pop	r28
     324:	df 91       	pop	r29
     326:	08 95       	ret

00000328 <start_bugurt>:
void start_bugurt(void)
{
     328:	df 93       	push	r29
     32a:	cf 93       	push	r28
     32c:	cd b7       	in	r28, 0x3d	; 61
     32e:	de b7       	in	r29, 0x3e	; 62
    start_scheduler();
     330:	0e 94 70 11 	call	0x22e0	; 0x22e0 <start_scheduler>
    kernel.sched.nested_crit_sec = (count_t)0;
     334:	10 92 c7 01 	sts	0x01C7, r1
     338:	10 92 c6 01 	sts	0x01C6, r1
    kernel_thread();
     33c:	0e 94 10 01 	call	0x220	; 0x220 <kernel_thread>
}
     340:	cf 91       	pop	r28
     342:	df 91       	pop	r29
     344:	08 95       	ret

00000346 <do_syscall>:
    scall_mutex_try_lock,
    scall_mutex_unlock
};

void do_syscall(void)
{
     346:	df 93       	push	r29
     348:	cf 93       	push	r28
     34a:	00 d0       	rcall	.+0      	; 0x34c <do_syscall+0x6>
     34c:	00 d0       	rcall	.+0      	; 0x34e <do_syscall+0x8>
     34e:	00 d0       	rcall	.+0      	; 0x350 <do_syscall+0xa>
     350:	cd b7       	in	r28, 0x3d	; 61
     352:	de b7       	in	r29, 0x3e	; 62
    if( syscall_num != (unsigned char)0 )
     354:	80 91 02 01 	lds	r24, 0x0102
     358:	88 23       	and	r24, r24
     35a:	01 f1       	breq	.+64     	; 0x39c <do_syscall+0x56>
    {
        code_t syscall_func;
        syscall_func = (code_t)pgm_read_word(syscall_routine + syscall_num);
     35c:	80 91 02 01 	lds	r24, 0x0102
     360:	88 2f       	mov	r24, r24
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	88 0f       	add	r24, r24
     366:	99 1f       	adc	r25, r25
     368:	88 59       	subi	r24, 0x98	; 152
     36a:	9f 4f       	sbci	r25, 0xFF	; 255
     36c:	9c 83       	std	Y+4, r25	; 0x04
     36e:	8b 83       	std	Y+3, r24	; 0x03
     370:	8b 81       	ldd	r24, Y+3	; 0x03
     372:	9c 81       	ldd	r25, Y+4	; 0x04
     374:	fc 01       	movw	r30, r24
     376:	85 91       	lpm	r24, Z+
     378:	94 91       	lpm	r25, Z+
     37a:	9a 83       	std	Y+2, r25	; 0x02
     37c:	89 83       	std	Y+1, r24	; 0x01
     37e:	fc 83       	std	Y+4, r31	; 0x04
     380:	eb 83       	std	Y+3, r30	; 0x03
     382:	89 81       	ldd	r24, Y+1	; 0x01
     384:	9a 81       	ldd	r25, Y+2	; 0x02
     386:	9e 83       	std	Y+6, r25	; 0x06
     388:	8d 83       	std	Y+5, r24	; 0x05
        syscall_func(syscall_arg);
     38a:	80 91 03 01 	lds	r24, 0x0103
     38e:	90 91 04 01 	lds	r25, 0x0104
     392:	ed 81       	ldd	r30, Y+5	; 0x05
     394:	fe 81       	ldd	r31, Y+6	; 0x06
     396:	09 95       	icall
        syscall_num = (unsigned char)0;
     398:	10 92 02 01 	sts	0x0102, r1
    }
}
     39c:	26 96       	adiw	r28, 0x06	; 6
     39e:	0f b6       	in	r0, 0x3f	; 63
     3a0:	f8 94       	cli
     3a2:	de bf       	out	0x3e, r29	; 62
     3a4:	0f be       	out	0x3f, r0	; 63
     3a6:	cd bf       	out	0x3d, r28	; 61
     3a8:	cf 91       	pop	r28
     3aa:	df 91       	pop	r29
     3ac:	08 95       	ret

000003ae <syscall_data_get>:
    unsigned char num;
    void * arg;
} syscall_data_t;

void syscall_data_get(void)
{
     3ae:	df 93       	push	r29
     3b0:	cf 93       	push	r28
     3b2:	00 d0       	rcall	.+0      	; 0x3b4 <syscall_data_get+0x6>
     3b4:	00 d0       	rcall	.+0      	; 0x3b6 <syscall_data_get+0x8>
     3b6:	cd b7       	in	r28, 0x3d	; 61
     3b8:	de b7       	in	r29, 0x3e	; 62
    unsigned char * tos;
    unsigned short temp;
    /// Извлечение syscall_num и syscall_arg из стека процесса
    tos = (unsigned char *)proc_sp + PROC_STACK_OFFSET;
     3ba:	80 91 9a 01 	lds	r24, 0x019A
     3be:	90 91 9b 01 	lds	r25, 0x019B
     3c2:	07 96       	adiw	r24, 0x07	; 7
     3c4:	9c 83       	std	Y+4, r25	; 0x04
     3c6:	8b 83       	std	Y+3, r24	; 0x03
    temp = (unsigned short)*tos++;
     3c8:	eb 81       	ldd	r30, Y+3	; 0x03
     3ca:	fc 81       	ldd	r31, Y+4	; 0x04
     3cc:	80 81       	ld	r24, Z
     3ce:	88 2f       	mov	r24, r24
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	9a 83       	std	Y+2, r25	; 0x02
     3d4:	89 83       	std	Y+1, r24	; 0x01
     3d6:	8b 81       	ldd	r24, Y+3	; 0x03
     3d8:	9c 81       	ldd	r25, Y+4	; 0x04
     3da:	01 96       	adiw	r24, 0x01	; 1
     3dc:	9c 83       	std	Y+4, r25	; 0x04
     3de:	8b 83       	std	Y+3, r24	; 0x03
    temp <<= 8;
     3e0:	89 81       	ldd	r24, Y+1	; 0x01
     3e2:	9a 81       	ldd	r25, Y+2	; 0x02
     3e4:	98 2f       	mov	r25, r24
     3e6:	88 27       	eor	r24, r24
     3e8:	9a 83       	std	Y+2, r25	; 0x02
     3ea:	89 83       	std	Y+1, r24	; 0x01
    temp |= (unsigned short)*tos;
     3ec:	eb 81       	ldd	r30, Y+3	; 0x03
     3ee:	fc 81       	ldd	r31, Y+4	; 0x04
     3f0:	80 81       	ld	r24, Z
     3f2:	28 2f       	mov	r18, r24
     3f4:	30 e0       	ldi	r19, 0x00	; 0
     3f6:	89 81       	ldd	r24, Y+1	; 0x01
     3f8:	9a 81       	ldd	r25, Y+2	; 0x02
     3fa:	82 2b       	or	r24, r18
     3fc:	93 2b       	or	r25, r19
     3fe:	9a 83       	std	Y+2, r25	; 0x02
     400:	89 83       	std	Y+1, r24	; 0x01

    syscall_num = ((syscall_data_t *)temp)->num;
     402:	e9 81       	ldd	r30, Y+1	; 0x01
     404:	fa 81       	ldd	r31, Y+2	; 0x02
     406:	80 81       	ld	r24, Z
     408:	80 93 02 01 	sts	0x0102, r24
    syscall_arg = ((syscall_data_t *)temp)->arg;
     40c:	e9 81       	ldd	r30, Y+1	; 0x01
     40e:	fa 81       	ldd	r31, Y+2	; 0x02
     410:	81 81       	ldd	r24, Z+1	; 0x01
     412:	92 81       	ldd	r25, Z+2	; 0x02
     414:	90 93 04 01 	sts	0x0104, r25
     418:	80 93 03 01 	sts	0x0103, r24
}
     41c:	0f 90       	pop	r0
     41e:	0f 90       	pop	r0
     420:	0f 90       	pop	r0
     422:	0f 90       	pop	r0
     424:	cf 91       	pop	r28
     426:	df 91       	pop	r29
     428:	08 95       	ret

0000042a <__vector_2>:

BUGURT_INTERRUPT(SYSCALL_ISR)
     42a:	0e 94 65 00 	call	0xca	; 0xca <osbme_store_context>
     42e:	90 93 9b 01 	sts	0x019B, r25
     432:	80 93 9a 01 	sts	0x019A, r24
     436:	88 e2       	ldi	r24, 0x28	; 40
     438:	92 e0       	ldi	r25, 0x02	; 2
     43a:	90 93 99 01 	sts	0x0199, r25
     43e:	80 93 98 01 	sts	0x0198, r24
     442:	80 91 9c 01 	lds	r24, 0x019C
     446:	90 91 9d 01 	lds	r25, 0x019D
     44a:	0e 94 91 00 	call	0x122	; 0x122 <osbme_load_context>
     44e:	08 95       	ret

00000450 <__vector_2_func>:
{
     450:	df 93       	push	r29
     452:	cf 93       	push	r28
     454:	cd b7       	in	r28, 0x3d	; 61
     456:	de b7       	in	r29, 0x3e	; 62
    temp |= (unsigned short)*tos;

    syscall_num = ((syscall_data_t *)temp)->num;
    syscall_arg = ((syscall_data_t *)temp)->arg;
    */
    do_syscall();
     458:	0e 94 a3 01 	call	0x346	; 0x346 <do_syscall>
    kernel_state &= ~KRN_FLG_DO_SCALL;
     45c:	80 91 00 01 	lds	r24, 0x0100
     460:	8d 7f       	andi	r24, 0xFD	; 253
     462:	80 93 00 01 	sts	0x0100, r24

}
     466:	cf 91       	pop	r28
     468:	df 91       	pop	r29
     46a:	08 95       	ret

0000046c <_syscall>:

syscall_data_t * _syscall( syscall_data_t * arg )
{
     46c:	df 93       	push	r29
     46e:	cf 93       	push	r28
     470:	00 d0       	rcall	.+0      	; 0x472 <_syscall+0x6>
     472:	cd b7       	in	r28, 0x3d	; 61
     474:	de b7       	in	r29, 0x3e	; 62
     476:	9a 83       	std	Y+2, r25	; 0x02
     478:	89 83       	std	Y+1, r24	; 0x01
    cli();
     47a:	f8 94       	cli
    kernel_state |= (KRN_FLG_DO_SCALL | KRN_FLG_GET_SDATA);
     47c:	80 91 00 01 	lds	r24, 0x0100
     480:	86 60       	ori	r24, 0x06	; 6
     482:	80 93 00 01 	sts	0x0100, r24
    raise_syscall_interrupt();
     486:	0e 94 4d 11 	call	0x229a	; 0x229a <raise_syscall_interrupt>
    sei();
     48a:	78 94       	sei
    return arg;
     48c:	89 81       	ldd	r24, Y+1	; 0x01
     48e:	9a 81       	ldd	r25, Y+2	; 0x02
}
     490:	0f 90       	pop	r0
     492:	0f 90       	pop	r0
     494:	cf 91       	pop	r28
     496:	df 91       	pop	r29
     498:	08 95       	ret

0000049a <syscall>:

static syscall_data_t scdata;
void syscall( unsigned char num, void * arg )
{
     49a:	df 93       	push	r29
     49c:	cf 93       	push	r28
     49e:	00 d0       	rcall	.+0      	; 0x4a0 <syscall+0x6>
     4a0:	0f 92       	push	r0
     4a2:	cd b7       	in	r28, 0x3d	; 61
     4a4:	de b7       	in	r29, 0x3e	; 62
     4a6:	89 83       	std	Y+1, r24	; 0x01
     4a8:	7b 83       	std	Y+3, r23	; 0x03
     4aa:	6a 83       	std	Y+2, r22	; 0x02
     scdata.num = num;
     4ac:	89 81       	ldd	r24, Y+1	; 0x01
     4ae:	80 93 15 01 	sts	0x0115, r24
     scdata.arg = arg;
     4b2:	8a 81       	ldd	r24, Y+2	; 0x02
     4b4:	9b 81       	ldd	r25, Y+3	; 0x03
     4b6:	90 93 17 01 	sts	0x0117, r25
     4ba:	80 93 16 01 	sts	0x0116, r24
     _syscall( &scdata );
     4be:	85 e1       	ldi	r24, 0x15	; 21
     4c0:	91 e0       	ldi	r25, 0x01	; 1
     4c2:	0e 94 36 02 	call	0x46c	; 0x46c <_syscall>
     SYSCALL_DELLAY();
     4c6:	00 00       	nop
     4c8:	00 00       	nop
     4ca:	00 00       	nop
     while( kernel_state & KRN_FLG_DO_SCALL );
     4cc:	80 91 00 01 	lds	r24, 0x0100
     4d0:	88 2f       	mov	r24, r24
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	82 70       	andi	r24, 0x02	; 2
     4d6:	90 70       	andi	r25, 0x00	; 0
     4d8:	00 97       	sbiw	r24, 0x00	; 0
     4da:	c1 f7       	brne	.-16     	; 0x4cc <syscall+0x32>
}
     4dc:	0f 90       	pop	r0
     4de:	0f 90       	pop	r0
     4e0:	0f 90       	pop	r0
     4e2:	cf 91       	pop	r28
     4e4:	df 91       	pop	r29
     4e6:	08 95       	ret

000004e8 <scall_proc_init>:
///                 ОБРАБОТЧИКИ СИСТЕМНЫХ ВЫЗОВОВ
///=================================================================
///                   Управление процессами
//0
void scall_proc_init( void * arg )
{
     4e8:	8f 92       	push	r8
     4ea:	af 92       	push	r10
     4ec:	bf 92       	push	r11
     4ee:	cf 92       	push	r12
     4f0:	df 92       	push	r13
     4f2:	ef 92       	push	r14
     4f4:	ff 92       	push	r15
     4f6:	0f 93       	push	r16
     4f8:	1f 93       	push	r17
     4fa:	df 93       	push	r29
     4fc:	cf 93       	push	r28
     4fe:	00 d0       	rcall	.+0      	; 0x500 <scall_proc_init+0x18>
     500:	cd b7       	in	r28, 0x3d	; 61
     502:	de b7       	in	r29, 0x3e	; 62
     504:	9a 83       	std	Y+2, r25	; 0x02
     506:	89 83       	std	Y+1, r24	; 0x01
    proc_init_isr(
     508:	e9 81       	ldd	r30, Y+1	; 0x01
     50a:	fa 81       	ldd	r31, Y+2	; 0x02
     50c:	80 81       	ld	r24, Z
     50e:	91 81       	ldd	r25, Z+1	; 0x01
     510:	e9 81       	ldd	r30, Y+1	; 0x01
     512:	fa 81       	ldd	r31, Y+2	; 0x02
     514:	22 81       	ldd	r18, Z+2	; 0x02
     516:	33 81       	ldd	r19, Z+3	; 0x03
     518:	e9 81       	ldd	r30, Y+1	; 0x01
     51a:	fa 81       	ldd	r31, Y+2	; 0x02
     51c:	44 81       	ldd	r20, Z+4	; 0x04
     51e:	55 81       	ldd	r21, Z+5	; 0x05
     520:	e9 81       	ldd	r30, Y+1	; 0x01
     522:	fa 81       	ldd	r31, Y+2	; 0x02
     524:	06 81       	ldd	r16, Z+6	; 0x06
     526:	17 81       	ldd	r17, Z+7	; 0x07
     528:	e9 81       	ldd	r30, Y+1	; 0x01
     52a:	fa 81       	ldd	r31, Y+2	; 0x02
     52c:	e0 84       	ldd	r14, Z+8	; 0x08
     52e:	f1 84       	ldd	r15, Z+9	; 0x09
     530:	e9 81       	ldd	r30, Y+1	; 0x01
     532:	fa 81       	ldd	r31, Y+2	; 0x02
     534:	c2 84       	ldd	r12, Z+10	; 0x0a
     536:	d3 84       	ldd	r13, Z+11	; 0x0b
     538:	e9 81       	ldd	r30, Y+1	; 0x01
     53a:	fa 81       	ldd	r31, Y+2	; 0x02
     53c:	b4 84       	ldd	r11, Z+12	; 0x0c
     53e:	e9 81       	ldd	r30, Y+1	; 0x01
     540:	fa 81       	ldd	r31, Y+2	; 0x02
     542:	a5 85       	ldd	r26, Z+13	; 0x0d
     544:	b6 85       	ldd	r27, Z+14	; 0x0e
     546:	e9 81       	ldd	r30, Y+1	; 0x01
     548:	fa 81       	ldd	r31, Y+2	; 0x02
     54a:	e7 85       	ldd	r30, Z+15	; 0x0f
     54c:	b9 01       	movw	r22, r18
     54e:	98 01       	movw	r18, r16
     550:	87 01       	movw	r16, r14
     552:	76 01       	movw	r14, r12
     554:	cb 2c       	mov	r12, r11
     556:	5d 01       	movw	r10, r26
     558:	8e 2e       	mov	r8, r30
     55a:	0e 94 97 0b 	call	0x172e	; 0x172e <proc_init_isr>
              ((proc_init_arg_t *)arg)->sstart,
              ((proc_init_arg_t *)arg)->prio,
              ((proc_init_arg_t *)arg)->time_quant,
              ((proc_init_arg_t *)arg)->is_rt
              );
}
     55e:	0f 90       	pop	r0
     560:	0f 90       	pop	r0
     562:	cf 91       	pop	r28
     564:	df 91       	pop	r29
     566:	1f 91       	pop	r17
     568:	0f 91       	pop	r16
     56a:	ff 90       	pop	r15
     56c:	ef 90       	pop	r14
     56e:	df 90       	pop	r13
     570:	cf 90       	pop	r12
     572:	bf 90       	pop	r11
     574:	af 90       	pop	r10
     576:	8f 90       	pop	r8
     578:	08 95       	ret

0000057a <scall_proc_run>:
    syscall(0,(void *)&scarg);
}
//---------------------------------------------------------------------------------------------
//1
void scall_proc_run( void * arg )
{
     57a:	0f 93       	push	r16
     57c:	1f 93       	push	r17
     57e:	df 93       	push	r29
     580:	cf 93       	push	r28
     582:	00 d0       	rcall	.+0      	; 0x584 <scall_proc_run+0xa>
     584:	cd b7       	in	r28, 0x3d	; 61
     586:	de b7       	in	r29, 0x3e	; 62
     588:	9a 83       	std	Y+2, r25	; 0x02
     58a:	89 83       	std	Y+1, r24	; 0x01
    ((proc_runtime_arg_t *)arg)->scall_ret = proc_run_isr( ((proc_runtime_arg_t *)arg)->proc );
     58c:	09 81       	ldd	r16, Y+1	; 0x01
     58e:	1a 81       	ldd	r17, Y+2	; 0x02
     590:	e9 81       	ldd	r30, Y+1	; 0x01
     592:	fa 81       	ldd	r31, Y+2	; 0x02
     594:	80 81       	ld	r24, Z
     596:	91 81       	ldd	r25, Z+1	; 0x01
     598:	0e 94 3d 0c 	call	0x187a	; 0x187a <proc_run_isr>
     59c:	f8 01       	movw	r30, r16
     59e:	82 83       	std	Z+2, r24	; 0x02
}
     5a0:	0f 90       	pop	r0
     5a2:	0f 90       	pop	r0
     5a4:	cf 91       	pop	r28
     5a6:	df 91       	pop	r29
     5a8:	1f 91       	pop	r17
     5aa:	0f 91       	pop	r16
     5ac:	08 95       	ret

000005ae <scall_proc_restart>:
    return scarg.scall_ret;
}
//---------------------------------------------------------------------------------------------
//2
void scall_proc_restart( void * arg )
{
     5ae:	0f 93       	push	r16
     5b0:	1f 93       	push	r17
     5b2:	df 93       	push	r29
     5b4:	cf 93       	push	r28
     5b6:	00 d0       	rcall	.+0      	; 0x5b8 <scall_proc_restart+0xa>
     5b8:	cd b7       	in	r28, 0x3d	; 61
     5ba:	de b7       	in	r29, 0x3e	; 62
     5bc:	9a 83       	std	Y+2, r25	; 0x02
     5be:	89 83       	std	Y+1, r24	; 0x01
    ((proc_runtime_arg_t *)arg)->scall_ret = proc_restart_isr( ((proc_runtime_arg_t *)arg)->proc );
     5c0:	09 81       	ldd	r16, Y+1	; 0x01
     5c2:	1a 81       	ldd	r17, Y+2	; 0x02
     5c4:	e9 81       	ldd	r30, Y+1	; 0x01
     5c6:	fa 81       	ldd	r31, Y+2	; 0x02
     5c8:	80 81       	ld	r24, Z
     5ca:	91 81       	ldd	r25, Z+1	; 0x01
     5cc:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <proc_restart_isr>
     5d0:	f8 01       	movw	r30, r16
     5d2:	82 83       	std	Z+2, r24	; 0x02
}
     5d4:	0f 90       	pop	r0
     5d6:	0f 90       	pop	r0
     5d8:	cf 91       	pop	r28
     5da:	df 91       	pop	r29
     5dc:	1f 91       	pop	r17
     5de:	0f 91       	pop	r16
     5e0:	08 95       	ret

000005e2 <scall_proc_stop>:
    return scarg.scall_ret;
}
//---------------------------------------------------------------------------------------------
//3
void scall_proc_stop( void * arg )
{
     5e2:	0f 93       	push	r16
     5e4:	1f 93       	push	r17
     5e6:	df 93       	push	r29
     5e8:	cf 93       	push	r28
     5ea:	00 d0       	rcall	.+0      	; 0x5ec <scall_proc_stop+0xa>
     5ec:	cd b7       	in	r28, 0x3d	; 61
     5ee:	de b7       	in	r29, 0x3e	; 62
     5f0:	9a 83       	std	Y+2, r25	; 0x02
     5f2:	89 83       	std	Y+1, r24	; 0x01
    ((proc_runtime_arg_t *)arg)->scall_ret = proc_stop_isr( ((proc_runtime_arg_t *)arg)->proc );
     5f4:	09 81       	ldd	r16, Y+1	; 0x01
     5f6:	1a 81       	ldd	r17, Y+2	; 0x02
     5f8:	e9 81       	ldd	r30, Y+1	; 0x01
     5fa:	fa 81       	ldd	r31, Y+2	; 0x02
     5fc:	80 81       	ld	r24, Z
     5fe:	91 81       	ldd	r25, Z+1	; 0x01
     600:	0e 94 bf 0c 	call	0x197e	; 0x197e <proc_stop_isr>
     604:	f8 01       	movw	r30, r16
     606:	82 83       	std	Z+2, r24	; 0x02
}
     608:	0f 90       	pop	r0
     60a:	0f 90       	pop	r0
     60c:	cf 91       	pop	r28
     60e:	df 91       	pop	r29
     610:	1f 91       	pop	r17
     612:	0f 91       	pop	r16
     614:	08 95       	ret

00000616 <scall_proc_self_stop>:
}

//---------------------------------------------------------------------------------------------
//4
void scall_proc_self_stop( void * arg )
{
     616:	df 93       	push	r29
     618:	cf 93       	push	r28
     61a:	00 d0       	rcall	.+0      	; 0x61c <scall_proc_self_stop+0x6>
     61c:	00 d0       	rcall	.+0      	; 0x61e <scall_proc_self_stop+0x8>
     61e:	cd b7       	in	r28, 0x3d	; 61
     620:	de b7       	in	r29, 0x3e	; 62
     622:	9c 83       	std	Y+4, r25	; 0x04
     624:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = kernel.sched.current_proc;
     626:	80 91 9e 01 	lds	r24, 0x019E
     62a:	90 91 9f 01 	lds	r25, 0x019F
     62e:	9a 83       	std	Y+2, r25	; 0x02
     630:	89 83       	std	Y+1, r24	; 0x01
    _proc_stop( proc );
     632:	89 81       	ldd	r24, Y+1	; 0x01
     634:	9a 81       	ldd	r25, Y+2	; 0x02
     636:	0e 94 a6 0c 	call	0x194c	; 0x194c <_proc_stop>
}
     63a:	0f 90       	pop	r0
     63c:	0f 90       	pop	r0
     63e:	0f 90       	pop	r0
     640:	0f 90       	pop	r0
     642:	cf 91       	pop	r28
     644:	df 91       	pop	r29
     646:	08 95       	ret

00000648 <scall_proc_terminate>:
}
//---------------------------------------------------------------------------------------------
//5
/// Останов процесса после выхода из pmain, для обертки proc_run_wrapper
void scall_proc_terminate( void * arg )
{
     648:	df 93       	push	r29
     64a:	cf 93       	push	r28
     64c:	00 d0       	rcall	.+0      	; 0x64e <scall_proc_terminate+0x6>
     64e:	00 d0       	rcall	.+0      	; 0x650 <scall_proc_terminate+0x8>
     650:	cd b7       	in	r28, 0x3d	; 61
     652:	de b7       	in	r29, 0x3e	; 62
     654:	9c 83       	std	Y+4, r25	; 0x04
     656:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = (proc_t *)arg;
     658:	8b 81       	ldd	r24, Y+3	; 0x03
     65a:	9c 81       	ldd	r25, Y+4	; 0x04
     65c:	9a 83       	std	Y+2, r25	; 0x02
     65e:	89 83       	std	Y+1, r24	; 0x01
    // Обрабатываем флаги
    // Нельзя выходить из pmain не освободив все захваченные ресурсы, за это процесс будет "убит"!
    if( proc->flags & PROC_FLG_HOLD ) proc->flags |= PROC_FLG_DEAD;
     660:	e9 81       	ldd	r30, Y+1	; 0x01
     662:	fa 81       	ldd	r31, Y+2	; 0x02
     664:	83 85       	ldd	r24, Z+11	; 0x0b
     666:	88 2f       	mov	r24, r24
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	84 70       	andi	r24, 0x04	; 4
     66c:	90 70       	andi	r25, 0x00	; 0
     66e:	00 97       	sbiw	r24, 0x00	; 0
     670:	41 f0       	breq	.+16     	; 0x682 <scall_proc_terminate+0x3a>
     672:	e9 81       	ldd	r30, Y+1	; 0x01
     674:	fa 81       	ldd	r31, Y+2	; 0x02
     676:	83 85       	ldd	r24, Z+11	; 0x0b
     678:	80 68       	ori	r24, 0x80	; 128
     67a:	e9 81       	ldd	r30, Y+1	; 0x01
     67c:	fa 81       	ldd	r31, Y+2	; 0x02
     67e:	83 87       	std	Z+11, r24	; 0x0b
     680:	07 c0       	rjmp	.+14     	; 0x690 <scall_proc_terminate+0x48>
    // В противном случае - просто завершаем процесс
    else proc->flags |= PROC_FLG_END;
     682:	e9 81       	ldd	r30, Y+1	; 0x01
     684:	fa 81       	ldd	r31, Y+2	; 0x02
     686:	83 85       	ldd	r24, Z+11	; 0x0b
     688:	80 64       	ori	r24, 0x40	; 64
     68a:	e9 81       	ldd	r30, Y+1	; 0x01
     68c:	fa 81       	ldd	r31, Y+2	; 0x02
     68e:	83 87       	std	Z+11, r24	; 0x0b
    proc->flags &= ~(PROC_FLG_PRE_END|PROC_FLG_RUN);
     690:	e9 81       	ldd	r30, Y+1	; 0x01
     692:	fa 81       	ldd	r31, Y+2	; 0x02
     694:	83 85       	ldd	r24, Z+11	; 0x0b
     696:	8d 7d       	andi	r24, 0xDD	; 221
     698:	e9 81       	ldd	r30, Y+1	; 0x01
     69a:	fa 81       	ldd	r31, Y+2	; 0x02
     69c:	83 87       	std	Z+11, r24	; 0x0b
    // Останов
    _proc_stop_( proc );
     69e:	89 81       	ldd	r24, Y+1	; 0x01
     6a0:	9a 81       	ldd	r25, Y+2	; 0x02
     6a2:	0e 94 de 07 	call	0xfbc	; 0xfbc <gitem_cut>
    // Выполнить перепланировку
    resched();
     6a6:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
}
     6aa:	0f 90       	pop	r0
     6ac:	0f 90       	pop	r0
     6ae:	0f 90       	pop	r0
     6b0:	0f 90       	pop	r0
     6b2:	cf 91       	pop	r28
     6b4:	df 91       	pop	r29
     6b6:	08 95       	ret

000006b8 <proc_run_wrapper>:
void proc_run_wrapper( proc_t * proc )
{
     6b8:	df 93       	push	r29
     6ba:	cf 93       	push	r28
     6bc:	00 d0       	rcall	.+0      	; 0x6be <proc_run_wrapper+0x6>
     6be:	00 d0       	rcall	.+0      	; 0x6c0 <proc_run_wrapper+0x8>
     6c0:	00 d0       	rcall	.+0      	; 0x6c2 <proc_run_wrapper+0xa>
     6c2:	cd b7       	in	r28, 0x3d	; 61
     6c4:	de b7       	in	r29, 0x3e	; 62
     6c6:	9e 83       	std	Y+6, r25	; 0x06
     6c8:	8d 83       	std	Y+5, r24	; 0x05
    //Атомарно читаем pmain и arg
    cli();
     6ca:	f8 94       	cli
    code_t pmain = proc->pmain;
     6cc:	ed 81       	ldd	r30, Y+5	; 0x05
     6ce:	fe 81       	ldd	r31, Y+6	; 0x06
     6d0:	82 a1       	ldd	r24, Z+34	; 0x22
     6d2:	93 a1       	ldd	r25, Z+35	; 0x23
     6d4:	9c 83       	std	Y+4, r25	; 0x04
     6d6:	8b 83       	std	Y+3, r24	; 0x03
    void * arg = proc->arg;
     6d8:	ed 81       	ldd	r30, Y+5	; 0x05
     6da:	fe 81       	ldd	r31, Y+6	; 0x06
     6dc:	80 a5       	ldd	r24, Z+40	; 0x28
     6de:	91 a5       	ldd	r25, Z+41	; 0x29
     6e0:	9a 83       	std	Y+2, r25	; 0x02
     6e2:	89 83       	std	Y+1, r24	; 0x01
    sei();
     6e4:	78 94       	sei
    //Выполняем pmain
    pmain( arg );
     6e6:	89 81       	ldd	r24, Y+1	; 0x01
     6e8:	9a 81       	ldd	r25, Y+2	; 0x02
     6ea:	eb 81       	ldd	r30, Y+3	; 0x03
     6ec:	fc 81       	ldd	r31, Y+4	; 0x04
     6ee:	09 95       	icall
    // Завершаем процесс
    syscall(5,(void *)proc);
     6f0:	2d 81       	ldd	r18, Y+5	; 0x05
     6f2:	3e 81       	ldd	r19, Y+6	; 0x06
     6f4:	85 e0       	ldi	r24, 0x05	; 5
     6f6:	b9 01       	movw	r22, r18
     6f8:	0e 94 4d 02 	call	0x49a	; 0x49a <syscall>
}
     6fc:	26 96       	adiw	r28, 0x06	; 6
     6fe:	0f b6       	in	r0, 0x3f	; 63
     700:	f8 94       	cli
     702:	de bf       	out	0x3e, r29	; 62
     704:	0f be       	out	0x3f, r0	; 63
     706:	cd bf       	out	0x3d, r28	; 61
     708:	cf 91       	pop	r28
     70a:	df 91       	pop	r29
     70c:	08 95       	ret

0000070e <scall_proc_flag_stop>:
//---------------------------------------------------------------------------------------------
//6
void scall_proc_flag_stop( void * arg )
{
     70e:	df 93       	push	r29
     710:	cf 93       	push	r28
     712:	00 d0       	rcall	.+0      	; 0x714 <scall_proc_flag_stop+0x6>
     714:	cd b7       	in	r28, 0x3d	; 61
     716:	de b7       	in	r29, 0x3e	; 62
     718:	9a 83       	std	Y+2, r25	; 0x02
     71a:	89 83       	std	Y+1, r24	; 0x01
    _proc_flag_stop_isr( *((flag_t *)arg) );
     71c:	e9 81       	ldd	r30, Y+1	; 0x01
     71e:	fa 81       	ldd	r31, Y+2	; 0x02
     720:	80 81       	ld	r24, Z
     722:	0e 94 ef 0c 	call	0x19de	; 0x19de <_proc_flag_stop_isr>
}
     726:	0f 90       	pop	r0
     728:	0f 90       	pop	r0
     72a:	cf 91       	pop	r28
     72c:	df 91       	pop	r29
     72e:	08 95       	ret

00000730 <scall_sig_init>:
///=================================================================
///                         Сигналы
//7
void scall_sig_init( void * arg )
{
     730:	df 93       	push	r29
     732:	cf 93       	push	r28
     734:	00 d0       	rcall	.+0      	; 0x736 <scall_sig_init+0x6>
     736:	cd b7       	in	r28, 0x3d	; 61
     738:	de b7       	in	r29, 0x3e	; 62
     73a:	9a 83       	std	Y+2, r25	; 0x02
     73c:	89 83       	std	Y+1, r24	; 0x01
    sig_init_isr( (sig_t *)arg );
     73e:	89 81       	ldd	r24, Y+1	; 0x01
     740:	9a 81       	ldd	r25, Y+2	; 0x02
     742:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <sig_init_isr>
}
     746:	0f 90       	pop	r0
     748:	0f 90       	pop	r0
     74a:	cf 91       	pop	r28
     74c:	df 91       	pop	r29
     74e:	08 95       	ret

00000750 <scall_sig_wait>:
    syscall( 7, (void *)sig );
}
//---------------------------------------------------------------------------------------------
//8
void scall_sig_wait( void * arg )
{
     750:	df 93       	push	r29
     752:	cf 93       	push	r28
     754:	00 d0       	rcall	.+0      	; 0x756 <scall_sig_wait+0x6>
     756:	cd b7       	in	r28, 0x3d	; 61
     758:	de b7       	in	r29, 0x3e	; 62
     75a:	9a 83       	std	Y+2, r25	; 0x02
     75c:	89 83       	std	Y+1, r24	; 0x01
    sig_wait_stage_1_isr( (sig_t *)arg );
     75e:	89 81       	ldd	r24, Y+1	; 0x01
     760:	9a 81       	ldd	r25, Y+2	; 0x02
     762:	0e 94 09 10 	call	0x2012	; 0x2012 <sig_wait_stage_1_isr>
}
     766:	0f 90       	pop	r0
     768:	0f 90       	pop	r0
     76a:	cf 91       	pop	r28
     76c:	df 91       	pop	r29
     76e:	08 95       	ret

00000770 <scall_sig_signal>:
    syscall( 6, (void *)&mask );/// Останов в случае необходимости
}
//---------------------------------------------------------------------------------------------
//9
void scall_sig_signal( void * arg )
{
     770:	df 93       	push	r29
     772:	cf 93       	push	r28
     774:	00 d0       	rcall	.+0      	; 0x776 <scall_sig_signal+0x6>
     776:	cd b7       	in	r28, 0x3d	; 61
     778:	de b7       	in	r29, 0x3e	; 62
     77a:	9a 83       	std	Y+2, r25	; 0x02
     77c:	89 83       	std	Y+1, r24	; 0x01
    sig_signal_isr( (sig_t *)arg );
     77e:	89 81       	ldd	r24, Y+1	; 0x01
     780:	9a 81       	ldd	r25, Y+2	; 0x02
     782:	0e 94 2e 10 	call	0x205c	; 0x205c <sig_signal_isr>
}
     786:	0f 90       	pop	r0
     788:	0f 90       	pop	r0
     78a:	cf 91       	pop	r28
     78c:	df 91       	pop	r29
     78e:	08 95       	ret

00000790 <scall_sig_broadcast>:
    syscall( 9, (void *)sig );
}
//---------------------------------------------------------------------------------------------
//10
void scall_sig_broadcast( void * arg )
{
     790:	df 93       	push	r29
     792:	cf 93       	push	r28
     794:	00 d0       	rcall	.+0      	; 0x796 <scall_sig_broadcast+0x6>
     796:	cd b7       	in	r28, 0x3d	; 61
     798:	de b7       	in	r29, 0x3e	; 62
     79a:	9a 83       	std	Y+2, r25	; 0x02
     79c:	89 83       	std	Y+1, r24	; 0x01
    sig_broadcast_isr( (sig_t *)arg );
     79e:	89 81       	ldd	r24, Y+1	; 0x01
     7a0:	9a 81       	ldd	r25, Y+2	; 0x02
     7a2:	0e 94 57 10 	call	0x20ae	; 0x20ae <sig_broadcast_isr>
}
     7a6:	0f 90       	pop	r0
     7a8:	0f 90       	pop	r0
     7aa:	cf 91       	pop	r28
     7ac:	df 91       	pop	r29
     7ae:	08 95       	ret

000007b0 <scall_sem_init>:
}
///=================================================================
///                         Семафоры
//11
void scall_sem_init( void * arg )
{
     7b0:	df 93       	push	r29
     7b2:	cf 93       	push	r28
     7b4:	00 d0       	rcall	.+0      	; 0x7b6 <scall_sem_init+0x6>
     7b6:	cd b7       	in	r28, 0x3d	; 61
     7b8:	de b7       	in	r29, 0x3e	; 62
     7ba:	9a 83       	std	Y+2, r25	; 0x02
     7bc:	89 83       	std	Y+1, r24	; 0x01
    sem_init_isr( ((sem_init_arg_t *)arg)->sem, ((sem_init_arg_t *)arg)->count );
     7be:	e9 81       	ldd	r30, Y+1	; 0x01
     7c0:	fa 81       	ldd	r31, Y+2	; 0x02
     7c2:	80 81       	ld	r24, Z
     7c4:	91 81       	ldd	r25, Z+1	; 0x01
     7c6:	e9 81       	ldd	r30, Y+1	; 0x01
     7c8:	fa 81       	ldd	r31, Y+2	; 0x02
     7ca:	22 81       	ldd	r18, Z+2	; 0x02
     7cc:	33 81       	ldd	r19, Z+3	; 0x03
     7ce:	b9 01       	movw	r22, r18
     7d0:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <sem_init_isr>
}
     7d4:	0f 90       	pop	r0
     7d6:	0f 90       	pop	r0
     7d8:	cf 91       	pop	r28
     7da:	df 91       	pop	r29
     7dc:	08 95       	ret

000007de <scall_sem_lock>:
    syscall( 11, (void *)&scarg );
}
//----------------------------------------------------------------------
//12
void scall_sem_lock( void * arg )
{
     7de:	0f 93       	push	r16
     7e0:	1f 93       	push	r17
     7e2:	df 93       	push	r29
     7e4:	cf 93       	push	r28
     7e6:	00 d0       	rcall	.+0      	; 0x7e8 <scall_sem_lock+0xa>
     7e8:	cd b7       	in	r28, 0x3d	; 61
     7ea:	de b7       	in	r29, 0x3e	; 62
     7ec:	9a 83       	std	Y+2, r25	; 0x02
     7ee:	89 83       	std	Y+1, r24	; 0x01
    ((sem_lock_arg_t *)arg)->scall_ret = _sem_lock( ((sem_lock_arg_t *)arg)->sem );
     7f0:	09 81       	ldd	r16, Y+1	; 0x01
     7f2:	1a 81       	ldd	r17, Y+2	; 0x02
     7f4:	e9 81       	ldd	r30, Y+1	; 0x01
     7f6:	fa 81       	ldd	r31, Y+2	; 0x02
     7f8:	80 81       	ld	r24, Z
     7fa:	91 81       	ldd	r25, Z+1	; 0x01
     7fc:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <_sem_lock>
     800:	f8 01       	movw	r30, r16
     802:	82 83       	std	Z+2, r24	; 0x02
}
     804:	0f 90       	pop	r0
     806:	0f 90       	pop	r0
     808:	cf 91       	pop	r28
     80a:	df 91       	pop	r29
     80c:	1f 91       	pop	r17
     80e:	0f 91       	pop	r16
     810:	08 95       	ret

00000812 <scall_sem_unlock>:
    return scarg.scall_ret;
}
//----------------------------------------------------------------------
//13
void scall_sem_unlock( void * arg )
{
     812:	df 93       	push	r29
     814:	cf 93       	push	r28
     816:	00 d0       	rcall	.+0      	; 0x818 <scall_sem_unlock+0x6>
     818:	cd b7       	in	r28, 0x3d	; 61
     81a:	de b7       	in	r29, 0x3e	; 62
     81c:	9a 83       	std	Y+2, r25	; 0x02
     81e:	89 83       	std	Y+1, r24	; 0x01
    _sem_unlock( (sem_t *)arg );
     820:	89 81       	ldd	r24, Y+1	; 0x01
     822:	9a 81       	ldd	r25, Y+2	; 0x02
     824:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <_sem_unlock>
}
     828:	0f 90       	pop	r0
     82a:	0f 90       	pop	r0
     82c:	cf 91       	pop	r28
     82e:	df 91       	pop	r29
     830:	08 95       	ret

00000832 <scall_mutex_init>:
}
///=================================================================
///                         Мьютексы
//14
void scall_mutex_init(void * arg)
{
     832:	df 93       	push	r29
     834:	cf 93       	push	r28
     836:	00 d0       	rcall	.+0      	; 0x838 <scall_mutex_init+0x6>
     838:	cd b7       	in	r28, 0x3d	; 61
     83a:	de b7       	in	r29, 0x3e	; 62
     83c:	9a 83       	std	Y+2, r25	; 0x02
     83e:	89 83       	std	Y+1, r24	; 0x01
    mutex_init_isr(
     840:	e9 81       	ldd	r30, Y+1	; 0x01
     842:	fa 81       	ldd	r31, Y+2	; 0x02
     844:	80 81       	ld	r24, Z
     846:	91 81       	ldd	r25, Z+1	; 0x01
     848:	e9 81       	ldd	r30, Y+1	; 0x01
     84a:	fa 81       	ldd	r31, Y+2	; 0x02
     84c:	22 81       	ldd	r18, Z+2	; 0x02
     84e:	62 2f       	mov	r22, r18
     850:	0e 94 f6 09 	call	0x13ec	; 0x13ec <mutex_init_isr>
               ((mutex_init_arg_t *)arg)->mutex
#ifdef CONFIG_USE_HIGHEST_LOCKER
               ,((mutex_init_arg_t *)arg)->prio
#endif // CONFIG_USE_HIGHEST_LOCKER
               );
}
     854:	0f 90       	pop	r0
     856:	0f 90       	pop	r0
     858:	cf 91       	pop	r28
     85a:	df 91       	pop	r29
     85c:	08 95       	ret

0000085e <scall_mutex_lock>:
    syscall( 14, (void *)&scarg );
}
//----------------------------------------------------------------------
//15
void scall_mutex_lock(void * arg)
{
     85e:	0f 93       	push	r16
     860:	1f 93       	push	r17
     862:	df 93       	push	r29
     864:	cf 93       	push	r28
     866:	00 d0       	rcall	.+0      	; 0x868 <scall_mutex_lock+0xa>
     868:	cd b7       	in	r28, 0x3d	; 61
     86a:	de b7       	in	r29, 0x3e	; 62
     86c:	9a 83       	std	Y+2, r25	; 0x02
     86e:	89 83       	std	Y+1, r24	; 0x01
    ((mutex_lock_arg_t *)arg)->scall_ret = _mutex_lock( ((mutex_lock_arg_t *)arg)->mutex );
     870:	09 81       	ldd	r16, Y+1	; 0x01
     872:	1a 81       	ldd	r17, Y+2	; 0x02
     874:	e9 81       	ldd	r30, Y+1	; 0x01
     876:	fa 81       	ldd	r31, Y+2	; 0x02
     878:	80 81       	ld	r24, Z
     87a:	91 81       	ldd	r25, Z+1	; 0x01
     87c:	0e 94 11 0a 	call	0x1422	; 0x1422 <_mutex_lock>
     880:	f8 01       	movw	r30, r16
     882:	82 83       	std	Z+2, r24	; 0x02
}
     884:	0f 90       	pop	r0
     886:	0f 90       	pop	r0
     888:	cf 91       	pop	r28
     88a:	df 91       	pop	r29
     88c:	1f 91       	pop	r17
     88e:	0f 91       	pop	r16
     890:	08 95       	ret

00000892 <mutex_lock>:
bool_t mutex_lock( mutex_t * mutex )
{
     892:	df 93       	push	r29
     894:	cf 93       	push	r28
     896:	00 d0       	rcall	.+0      	; 0x898 <mutex_lock+0x6>
     898:	00 d0       	rcall	.+0      	; 0x89a <mutex_lock+0x8>
     89a:	0f 92       	push	r0
     89c:	cd b7       	in	r28, 0x3d	; 61
     89e:	de b7       	in	r29, 0x3e	; 62
     8a0:	9d 83       	std	Y+5, r25	; 0x05
     8a2:	8c 83       	std	Y+4, r24	; 0x04
    mutex_lock_arg_t scarg;
    scarg.mutex = mutex;
     8a4:	8c 81       	ldd	r24, Y+4	; 0x04
     8a6:	9d 81       	ldd	r25, Y+5	; 0x05
     8a8:	9a 83       	std	Y+2, r25	; 0x02
     8aa:	89 83       	std	Y+1, r24	; 0x01
    syscall( 15, (void *)&scarg );
     8ac:	8f e0       	ldi	r24, 0x0F	; 15
     8ae:	9e 01       	movw	r18, r28
     8b0:	2f 5f       	subi	r18, 0xFF	; 255
     8b2:	3f 4f       	sbci	r19, 0xFF	; 255
     8b4:	b9 01       	movw	r22, r18
     8b6:	0e 94 4d 02 	call	0x49a	; 0x49a <syscall>
    return scarg.scall_ret;
     8ba:	8b 81       	ldd	r24, Y+3	; 0x03
}
     8bc:	0f 90       	pop	r0
     8be:	0f 90       	pop	r0
     8c0:	0f 90       	pop	r0
     8c2:	0f 90       	pop	r0
     8c4:	0f 90       	pop	r0
     8c6:	cf 91       	pop	r28
     8c8:	df 91       	pop	r29
     8ca:	08 95       	ret

000008cc <scall_mutex_try_lock>:
// Захват
//----------------------------------------------------------------------
//16
void scall_mutex_try_lock(void * arg)
{
     8cc:	0f 93       	push	r16
     8ce:	1f 93       	push	r17
     8d0:	df 93       	push	r29
     8d2:	cf 93       	push	r28
     8d4:	00 d0       	rcall	.+0      	; 0x8d6 <scall_mutex_try_lock+0xa>
     8d6:	cd b7       	in	r28, 0x3d	; 61
     8d8:	de b7       	in	r29, 0x3e	; 62
     8da:	9a 83       	std	Y+2, r25	; 0x02
     8dc:	89 83       	std	Y+1, r24	; 0x01
    ((mutex_lock_arg_t *)arg)->scall_ret = _mutex_try_lock( ((mutex_lock_arg_t *)arg)->mutex );
     8de:	09 81       	ldd	r16, Y+1	; 0x01
     8e0:	1a 81       	ldd	r17, Y+2	; 0x02
     8e2:	e9 81       	ldd	r30, Y+1	; 0x01
     8e4:	fa 81       	ldd	r31, Y+2	; 0x02
     8e6:	80 81       	ld	r24, Z
     8e8:	91 81       	ldd	r25, Z+1	; 0x01
     8ea:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <_mutex_try_lock>
     8ee:	f8 01       	movw	r30, r16
     8f0:	82 83       	std	Z+2, r24	; 0x02
}
     8f2:	0f 90       	pop	r0
     8f4:	0f 90       	pop	r0
     8f6:	cf 91       	pop	r28
     8f8:	df 91       	pop	r29
     8fa:	1f 91       	pop	r17
     8fc:	0f 91       	pop	r16
     8fe:	08 95       	ret

00000900 <mutex_try_lock>:
// Попытка захвата
bool_t mutex_try_lock( mutex_t * mutex )
{
     900:	df 93       	push	r29
     902:	cf 93       	push	r28
     904:	00 d0       	rcall	.+0      	; 0x906 <mutex_try_lock+0x6>
     906:	00 d0       	rcall	.+0      	; 0x908 <mutex_try_lock+0x8>
     908:	0f 92       	push	r0
     90a:	cd b7       	in	r28, 0x3d	; 61
     90c:	de b7       	in	r29, 0x3e	; 62
     90e:	9d 83       	std	Y+5, r25	; 0x05
     910:	8c 83       	std	Y+4, r24	; 0x04
    mutex_lock_arg_t scarg;
    scarg.mutex = mutex;
     912:	8c 81       	ldd	r24, Y+4	; 0x04
     914:	9d 81       	ldd	r25, Y+5	; 0x05
     916:	9a 83       	std	Y+2, r25	; 0x02
     918:	89 83       	std	Y+1, r24	; 0x01
    syscall( 16, (void *)&scarg );
     91a:	80 e1       	ldi	r24, 0x10	; 16
     91c:	9e 01       	movw	r18, r28
     91e:	2f 5f       	subi	r18, 0xFF	; 255
     920:	3f 4f       	sbci	r19, 0xFF	; 255
     922:	b9 01       	movw	r22, r18
     924:	0e 94 4d 02 	call	0x49a	; 0x49a <syscall>
    return scarg.scall_ret;
     928:	8b 81       	ldd	r24, Y+3	; 0x03
}
     92a:	0f 90       	pop	r0
     92c:	0f 90       	pop	r0
     92e:	0f 90       	pop	r0
     930:	0f 90       	pop	r0
     932:	0f 90       	pop	r0
     934:	cf 91       	pop	r28
     936:	df 91       	pop	r29
     938:	08 95       	ret

0000093a <scall_mutex_unlock>:
//----------------------------------------------------------------------
//17
void scall_mutex_unlock(void * arg)
{
     93a:	df 93       	push	r29
     93c:	cf 93       	push	r28
     93e:	00 d0       	rcall	.+0      	; 0x940 <scall_mutex_unlock+0x6>
     940:	cd b7       	in	r28, 0x3d	; 61
     942:	de b7       	in	r29, 0x3e	; 62
     944:	9a 83       	std	Y+2, r25	; 0x02
     946:	89 83       	std	Y+1, r24	; 0x01
    _mutex_unlock( (mutex_t *)arg );
     948:	89 81       	ldd	r24, Y+1	; 0x01
     94a:	9a 81       	ldd	r25, Y+2	; 0x02
     94c:	0e 94 85 0a 	call	0x150a	; 0x150a <_mutex_unlock>
}
     950:	0f 90       	pop	r0
     952:	0f 90       	pop	r0
     954:	cf 91       	pop	r28
     956:	df 91       	pop	r29
     958:	08 95       	ret

0000095a <mutex_unlock>:
// Освобождение
void mutex_unlock( mutex_t * mutex )
{
     95a:	df 93       	push	r29
     95c:	cf 93       	push	r28
     95e:	00 d0       	rcall	.+0      	; 0x960 <mutex_unlock+0x6>
     960:	cd b7       	in	r28, 0x3d	; 61
     962:	de b7       	in	r29, 0x3e	; 62
     964:	9a 83       	std	Y+2, r25	; 0x02
     966:	89 83       	std	Y+1, r24	; 0x01
    syscall( 17, (void *)mutex );
     968:	29 81       	ldd	r18, Y+1	; 0x01
     96a:	3a 81       	ldd	r19, Y+2	; 0x02
     96c:	81 e1       	ldi	r24, 0x11	; 17
     96e:	b9 01       	movw	r22, r18
     970:	0e 94 4d 02 	call	0x49a	; 0x49a <syscall>
}
     974:	0f 90       	pop	r0
     976:	0f 90       	pop	r0
     978:	cf 91       	pop	r28
     97a:	df 91       	pop	r29
     97c:	08 95       	ret

0000097e <osbme_init_stack>:
*                                                                                        *
*****************************************************************************************/
#include <avr/io.h>
#include "../../osbme.h"
void * osbme_init_stack( void * top_of_stack, osbme_code_t code, void * arg )
{
     97e:	df 93       	push	r29
     980:	cf 93       	push	r28
     982:	cd b7       	in	r28, 0x3d	; 61
     984:	de b7       	in	r29, 0x3e	; 62
     986:	2a 97       	sbiw	r28, 0x0a	; 10
     988:	0f b6       	in	r0, 0x3f	; 63
     98a:	f8 94       	cli
     98c:	de bf       	out	0x3e, r29	; 62
     98e:	0f be       	out	0x3f, r0	; 63
     990:	cd bf       	out	0x3d, r28	; 61
     992:	9e 83       	std	Y+6, r25	; 0x06
     994:	8d 83       	std	Y+5, r24	; 0x05
     996:	78 87       	std	Y+8, r23	; 0x08
     998:	6f 83       	std	Y+7, r22	; 0x07
     99a:	5a 87       	std	Y+10, r21	; 0x0a
     99c:	49 87       	std	Y+9, r20	; 0x09
    char * tos = (char *)top_of_stack;
     99e:	8d 81       	ldd	r24, Y+5	; 0x05
     9a0:	9e 81       	ldd	r25, Y+6	; 0x06
     9a2:	9c 83       	std	Y+4, r25	; 0x04
     9a4:	8b 83       	std	Y+3, r24	; 0x03
    //*tos-- = 0x11;
    //*tos-- = 0x22;
    //*tos-- = 0x33;

    // return address
    unsigned short tmp = (unsigned short)code;
     9a6:	8f 81       	ldd	r24, Y+7	; 0x07
     9a8:	98 85       	ldd	r25, Y+8	; 0x08
     9aa:	9a 83       	std	Y+2, r25	; 0x02
     9ac:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (char)(tmp&(unsigned short)0x00ff);
     9ae:	89 81       	ldd	r24, Y+1	; 0x01
     9b0:	eb 81       	ldd	r30, Y+3	; 0x03
     9b2:	fc 81       	ldd	r31, Y+4	; 0x04
     9b4:	80 83       	st	Z, r24
     9b6:	8b 81       	ldd	r24, Y+3	; 0x03
     9b8:	9c 81       	ldd	r25, Y+4	; 0x04
     9ba:	01 97       	sbiw	r24, 0x01	; 1
     9bc:	9c 83       	std	Y+4, r25	; 0x04
     9be:	8b 83       	std	Y+3, r24	; 0x03
    tmp>>=8;
     9c0:	89 81       	ldd	r24, Y+1	; 0x01
     9c2:	9a 81       	ldd	r25, Y+2	; 0x02
     9c4:	89 2f       	mov	r24, r25
     9c6:	99 27       	eor	r25, r25
     9c8:	9a 83       	std	Y+2, r25	; 0x02
     9ca:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (char)(tmp&(unsigned short)0x00ff);
     9cc:	89 81       	ldd	r24, Y+1	; 0x01
     9ce:	eb 81       	ldd	r30, Y+3	; 0x03
     9d0:	fc 81       	ldd	r31, Y+4	; 0x04
     9d2:	80 83       	st	Z, r24
     9d4:	8b 81       	ldd	r24, Y+3	; 0x03
     9d6:	9c 81       	ldd	r25, Y+4	; 0x04
     9d8:	01 97       	sbiw	r24, 0x01	; 1
     9da:	9c 83       	std	Y+4, r25	; 0x04
     9dc:	8b 83       	std	Y+3, r24	; 0x03

    // s
    *tos-- = 0x00;
     9de:	eb 81       	ldd	r30, Y+3	; 0x03
     9e0:	fc 81       	ldd	r31, Y+4	; 0x04
     9e2:	10 82       	st	Z, r1
     9e4:	8b 81       	ldd	r24, Y+3	; 0x03
     9e6:	9c 81       	ldd	r25, Y+4	; 0x04
     9e8:	01 97       	sbiw	r24, 0x01	; 1
     9ea:	9c 83       	std	Y+4, r25	; 0x04
     9ec:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x00;// r1 must B 0
     9ee:	eb 81       	ldd	r30, Y+3	; 0x03
     9f0:	fc 81       	ldd	r31, Y+4	; 0x04
     9f2:	10 82       	st	Z, r1
     9f4:	8b 81       	ldd	r24, Y+3	; 0x03
     9f6:	9c 81       	ldd	r25, Y+4	; 0x04
     9f8:	01 97       	sbiw	r24, 0x01	; 1
     9fa:	9c 83       	std	Y+4, r25	; 0x04
     9fc:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x02;// r2
     9fe:	eb 81       	ldd	r30, Y+3	; 0x03
     a00:	fc 81       	ldd	r31, Y+4	; 0x04
     a02:	82 e0       	ldi	r24, 0x02	; 2
     a04:	80 83       	st	Z, r24
     a06:	8b 81       	ldd	r24, Y+3	; 0x03
     a08:	9c 81       	ldd	r25, Y+4	; 0x04
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	9c 83       	std	Y+4, r25	; 0x04
     a0e:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x80;// SREG: enable interrupts
     a10:	eb 81       	ldd	r30, Y+3	; 0x03
     a12:	fc 81       	ldd	r31, Y+4	; 0x04
     a14:	80 e8       	ldi	r24, 0x80	; 128
     a16:	80 83       	st	Z, r24
     a18:	8b 81       	ldd	r24, Y+3	; 0x03
     a1a:	9c 81       	ldd	r25, Y+4	; 0x04
     a1c:	01 97       	sbiw	r24, 0x01	; 1
     a1e:	9c 83       	std	Y+4, r25	; 0x04
     a20:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x03;
     a22:	eb 81       	ldd	r30, Y+3	; 0x03
     a24:	fc 81       	ldd	r31, Y+4	; 0x04
     a26:	83 e0       	ldi	r24, 0x03	; 3
     a28:	80 83       	st	Z, r24
     a2a:	8b 81       	ldd	r24, Y+3	; 0x03
     a2c:	9c 81       	ldd	r25, Y+4	; 0x04
     a2e:	01 97       	sbiw	r24, 0x01	; 1
     a30:	9c 83       	std	Y+4, r25	; 0x04
     a32:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x04;
     a34:	eb 81       	ldd	r30, Y+3	; 0x03
     a36:	fc 81       	ldd	r31, Y+4	; 0x04
     a38:	84 e0       	ldi	r24, 0x04	; 4
     a3a:	80 83       	st	Z, r24
     a3c:	8b 81       	ldd	r24, Y+3	; 0x03
     a3e:	9c 81       	ldd	r25, Y+4	; 0x04
     a40:	01 97       	sbiw	r24, 0x01	; 1
     a42:	9c 83       	std	Y+4, r25	; 0x04
     a44:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x05;
     a46:	eb 81       	ldd	r30, Y+3	; 0x03
     a48:	fc 81       	ldd	r31, Y+4	; 0x04
     a4a:	85 e0       	ldi	r24, 0x05	; 5
     a4c:	80 83       	st	Z, r24
     a4e:	8b 81       	ldd	r24, Y+3	; 0x03
     a50:	9c 81       	ldd	r25, Y+4	; 0x04
     a52:	01 97       	sbiw	r24, 0x01	; 1
     a54:	9c 83       	std	Y+4, r25	; 0x04
     a56:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x06;
     a58:	eb 81       	ldd	r30, Y+3	; 0x03
     a5a:	fc 81       	ldd	r31, Y+4	; 0x04
     a5c:	86 e0       	ldi	r24, 0x06	; 6
     a5e:	80 83       	st	Z, r24
     a60:	8b 81       	ldd	r24, Y+3	; 0x03
     a62:	9c 81       	ldd	r25, Y+4	; 0x04
     a64:	01 97       	sbiw	r24, 0x01	; 1
     a66:	9c 83       	std	Y+4, r25	; 0x04
     a68:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x07;
     a6a:	eb 81       	ldd	r30, Y+3	; 0x03
     a6c:	fc 81       	ldd	r31, Y+4	; 0x04
     a6e:	87 e0       	ldi	r24, 0x07	; 7
     a70:	80 83       	st	Z, r24
     a72:	8b 81       	ldd	r24, Y+3	; 0x03
     a74:	9c 81       	ldd	r25, Y+4	; 0x04
     a76:	01 97       	sbiw	r24, 0x01	; 1
     a78:	9c 83       	std	Y+4, r25	; 0x04
     a7a:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x08;
     a7c:	eb 81       	ldd	r30, Y+3	; 0x03
     a7e:	fc 81       	ldd	r31, Y+4	; 0x04
     a80:	88 e0       	ldi	r24, 0x08	; 8
     a82:	80 83       	st	Z, r24
     a84:	8b 81       	ldd	r24, Y+3	; 0x03
     a86:	9c 81       	ldd	r25, Y+4	; 0x04
     a88:	01 97       	sbiw	r24, 0x01	; 1
     a8a:	9c 83       	std	Y+4, r25	; 0x04
     a8c:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x09;
     a8e:	eb 81       	ldd	r30, Y+3	; 0x03
     a90:	fc 81       	ldd	r31, Y+4	; 0x04
     a92:	89 e0       	ldi	r24, 0x09	; 9
     a94:	80 83       	st	Z, r24
     a96:	8b 81       	ldd	r24, Y+3	; 0x03
     a98:	9c 81       	ldd	r25, Y+4	; 0x04
     a9a:	01 97       	sbiw	r24, 0x01	; 1
     a9c:	9c 83       	std	Y+4, r25	; 0x04
     a9e:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x10;
     aa0:	eb 81       	ldd	r30, Y+3	; 0x03
     aa2:	fc 81       	ldd	r31, Y+4	; 0x04
     aa4:	80 e1       	ldi	r24, 0x10	; 16
     aa6:	80 83       	st	Z, r24
     aa8:	8b 81       	ldd	r24, Y+3	; 0x03
     aaa:	9c 81       	ldd	r25, Y+4	; 0x04
     aac:	01 97       	sbiw	r24, 0x01	; 1
     aae:	9c 83       	std	Y+4, r25	; 0x04
     ab0:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x11;
     ab2:	eb 81       	ldd	r30, Y+3	; 0x03
     ab4:	fc 81       	ldd	r31, Y+4	; 0x04
     ab6:	81 e1       	ldi	r24, 0x11	; 17
     ab8:	80 83       	st	Z, r24
     aba:	8b 81       	ldd	r24, Y+3	; 0x03
     abc:	9c 81       	ldd	r25, Y+4	; 0x04
     abe:	01 97       	sbiw	r24, 0x01	; 1
     ac0:	9c 83       	std	Y+4, r25	; 0x04
     ac2:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x12;
     ac4:	eb 81       	ldd	r30, Y+3	; 0x03
     ac6:	fc 81       	ldd	r31, Y+4	; 0x04
     ac8:	82 e1       	ldi	r24, 0x12	; 18
     aca:	80 83       	st	Z, r24
     acc:	8b 81       	ldd	r24, Y+3	; 0x03
     ace:	9c 81       	ldd	r25, Y+4	; 0x04
     ad0:	01 97       	sbiw	r24, 0x01	; 1
     ad2:	9c 83       	std	Y+4, r25	; 0x04
     ad4:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x13;
     ad6:	eb 81       	ldd	r30, Y+3	; 0x03
     ad8:	fc 81       	ldd	r31, Y+4	; 0x04
     ada:	83 e1       	ldi	r24, 0x13	; 19
     adc:	80 83       	st	Z, r24
     ade:	8b 81       	ldd	r24, Y+3	; 0x03
     ae0:	9c 81       	ldd	r25, Y+4	; 0x04
     ae2:	01 97       	sbiw	r24, 0x01	; 1
     ae4:	9c 83       	std	Y+4, r25	; 0x04
     ae6:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x14;
     ae8:	eb 81       	ldd	r30, Y+3	; 0x03
     aea:	fc 81       	ldd	r31, Y+4	; 0x04
     aec:	84 e1       	ldi	r24, 0x14	; 20
     aee:	80 83       	st	Z, r24
     af0:	8b 81       	ldd	r24, Y+3	; 0x03
     af2:	9c 81       	ldd	r25, Y+4	; 0x04
     af4:	01 97       	sbiw	r24, 0x01	; 1
     af6:	9c 83       	std	Y+4, r25	; 0x04
     af8:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x15;
     afa:	eb 81       	ldd	r30, Y+3	; 0x03
     afc:	fc 81       	ldd	r31, Y+4	; 0x04
     afe:	85 e1       	ldi	r24, 0x15	; 21
     b00:	80 83       	st	Z, r24
     b02:	8b 81       	ldd	r24, Y+3	; 0x03
     b04:	9c 81       	ldd	r25, Y+4	; 0x04
     b06:	01 97       	sbiw	r24, 0x01	; 1
     b08:	9c 83       	std	Y+4, r25	; 0x04
     b0a:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x16;
     b0c:	eb 81       	ldd	r30, Y+3	; 0x03
     b0e:	fc 81       	ldd	r31, Y+4	; 0x04
     b10:	86 e1       	ldi	r24, 0x16	; 22
     b12:	80 83       	st	Z, r24
     b14:	8b 81       	ldd	r24, Y+3	; 0x03
     b16:	9c 81       	ldd	r25, Y+4	; 0x04
     b18:	01 97       	sbiw	r24, 0x01	; 1
     b1a:	9c 83       	std	Y+4, r25	; 0x04
     b1c:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x17;
     b1e:	eb 81       	ldd	r30, Y+3	; 0x03
     b20:	fc 81       	ldd	r31, Y+4	; 0x04
     b22:	87 e1       	ldi	r24, 0x17	; 23
     b24:	80 83       	st	Z, r24
     b26:	8b 81       	ldd	r24, Y+3	; 0x03
     b28:	9c 81       	ldd	r25, Y+4	; 0x04
     b2a:	01 97       	sbiw	r24, 0x01	; 1
     b2c:	9c 83       	std	Y+4, r25	; 0x04
     b2e:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x18;
     b30:	eb 81       	ldd	r30, Y+3	; 0x03
     b32:	fc 81       	ldd	r31, Y+4	; 0x04
     b34:	88 e1       	ldi	r24, 0x18	; 24
     b36:	80 83       	st	Z, r24
     b38:	8b 81       	ldd	r24, Y+3	; 0x03
     b3a:	9c 81       	ldd	r25, Y+4	; 0x04
     b3c:	01 97       	sbiw	r24, 0x01	; 1
     b3e:	9c 83       	std	Y+4, r25	; 0x04
     b40:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x19;
     b42:	eb 81       	ldd	r30, Y+3	; 0x03
     b44:	fc 81       	ldd	r31, Y+4	; 0x04
     b46:	89 e1       	ldi	r24, 0x19	; 25
     b48:	80 83       	st	Z, r24
     b4a:	8b 81       	ldd	r24, Y+3	; 0x03
     b4c:	9c 81       	ldd	r25, Y+4	; 0x04
     b4e:	01 97       	sbiw	r24, 0x01	; 1
     b50:	9c 83       	std	Y+4, r25	; 0x04
     b52:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x20;
     b54:	eb 81       	ldd	r30, Y+3	; 0x03
     b56:	fc 81       	ldd	r31, Y+4	; 0x04
     b58:	80 e2       	ldi	r24, 0x20	; 32
     b5a:	80 83       	st	Z, r24
     b5c:	8b 81       	ldd	r24, Y+3	; 0x03
     b5e:	9c 81       	ldd	r25, Y+4	; 0x04
     b60:	01 97       	sbiw	r24, 0x01	; 1
     b62:	9c 83       	std	Y+4, r25	; 0x04
     b64:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x21;
     b66:	eb 81       	ldd	r30, Y+3	; 0x03
     b68:	fc 81       	ldd	r31, Y+4	; 0x04
     b6a:	81 e2       	ldi	r24, 0x21	; 33
     b6c:	80 83       	st	Z, r24
     b6e:	8b 81       	ldd	r24, Y+3	; 0x03
     b70:	9c 81       	ldd	r25, Y+4	; 0x04
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	9c 83       	std	Y+4, r25	; 0x04
     b76:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x22;
     b78:	eb 81       	ldd	r30, Y+3	; 0x03
     b7a:	fc 81       	ldd	r31, Y+4	; 0x04
     b7c:	82 e2       	ldi	r24, 0x22	; 34
     b7e:	80 83       	st	Z, r24
     b80:	8b 81       	ldd	r24, Y+3	; 0x03
     b82:	9c 81       	ldd	r25, Y+4	; 0x04
     b84:	01 97       	sbiw	r24, 0x01	; 1
     b86:	9c 83       	std	Y+4, r25	; 0x04
     b88:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x23;
     b8a:	eb 81       	ldd	r30, Y+3	; 0x03
     b8c:	fc 81       	ldd	r31, Y+4	; 0x04
     b8e:	83 e2       	ldi	r24, 0x23	; 35
     b90:	80 83       	st	Z, r24
     b92:	8b 81       	ldd	r24, Y+3	; 0x03
     b94:	9c 81       	ldd	r25, Y+4	; 0x04
     b96:	01 97       	sbiw	r24, 0x01	; 1
     b98:	9c 83       	std	Y+4, r25	; 0x04
     b9a:	8b 83       	std	Y+3, r24	; 0x03

    tmp = (unsigned short)arg;
     b9c:	89 85       	ldd	r24, Y+9	; 0x09
     b9e:	9a 85       	ldd	r25, Y+10	; 0x0a
     ba0:	9a 83       	std	Y+2, r25	; 0x02
     ba2:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (char)(tmp&(unsigned short)0x00ff); // r24 LSByte of arg
     ba4:	89 81       	ldd	r24, Y+1	; 0x01
     ba6:	eb 81       	ldd	r30, Y+3	; 0x03
     ba8:	fc 81       	ldd	r31, Y+4	; 0x04
     baa:	80 83       	st	Z, r24
     bac:	8b 81       	ldd	r24, Y+3	; 0x03
     bae:	9c 81       	ldd	r25, Y+4	; 0x04
     bb0:	01 97       	sbiw	r24, 0x01	; 1
     bb2:	9c 83       	std	Y+4, r25	; 0x04
     bb4:	8b 83       	std	Y+3, r24	; 0x03
    tmp>>=8;
     bb6:	89 81       	ldd	r24, Y+1	; 0x01
     bb8:	9a 81       	ldd	r25, Y+2	; 0x02
     bba:	89 2f       	mov	r24, r25
     bbc:	99 27       	eor	r25, r25
     bbe:	9a 83       	std	Y+2, r25	; 0x02
     bc0:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (char)(tmp&(unsigned short)0x00ff); // r25 MSByte of arg
     bc2:	89 81       	ldd	r24, Y+1	; 0x01
     bc4:	eb 81       	ldd	r30, Y+3	; 0x03
     bc6:	fc 81       	ldd	r31, Y+4	; 0x04
     bc8:	80 83       	st	Z, r24
     bca:	8b 81       	ldd	r24, Y+3	; 0x03
     bcc:	9c 81       	ldd	r25, Y+4	; 0x04
     bce:	01 97       	sbiw	r24, 0x01	; 1
     bd0:	9c 83       	std	Y+4, r25	; 0x04
     bd2:	8b 83       	std	Y+3, r24	; 0x03

    *tos-- = 0x26;
     bd4:	eb 81       	ldd	r30, Y+3	; 0x03
     bd6:	fc 81       	ldd	r31, Y+4	; 0x04
     bd8:	86 e2       	ldi	r24, 0x26	; 38
     bda:	80 83       	st	Z, r24
     bdc:	8b 81       	ldd	r24, Y+3	; 0x03
     bde:	9c 81       	ldd	r25, Y+4	; 0x04
     be0:	01 97       	sbiw	r24, 0x01	; 1
     be2:	9c 83       	std	Y+4, r25	; 0x04
     be4:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x27;
     be6:	eb 81       	ldd	r30, Y+3	; 0x03
     be8:	fc 81       	ldd	r31, Y+4	; 0x04
     bea:	87 e2       	ldi	r24, 0x27	; 39
     bec:	80 83       	st	Z, r24
     bee:	8b 81       	ldd	r24, Y+3	; 0x03
     bf0:	9c 81       	ldd	r25, Y+4	; 0x04
     bf2:	01 97       	sbiw	r24, 0x01	; 1
     bf4:	9c 83       	std	Y+4, r25	; 0x04
     bf6:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x28;
     bf8:	eb 81       	ldd	r30, Y+3	; 0x03
     bfa:	fc 81       	ldd	r31, Y+4	; 0x04
     bfc:	88 e2       	ldi	r24, 0x28	; 40
     bfe:	80 83       	st	Z, r24
     c00:	8b 81       	ldd	r24, Y+3	; 0x03
     c02:	9c 81       	ldd	r25, Y+4	; 0x04
     c04:	01 97       	sbiw	r24, 0x01	; 1
     c06:	9c 83       	std	Y+4, r25	; 0x04
     c08:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x29;
     c0a:	eb 81       	ldd	r30, Y+3	; 0x03
     c0c:	fc 81       	ldd	r31, Y+4	; 0x04
     c0e:	89 e2       	ldi	r24, 0x29	; 41
     c10:	80 83       	st	Z, r24
     c12:	8b 81       	ldd	r24, Y+3	; 0x03
     c14:	9c 81       	ldd	r25, Y+4	; 0x04
     c16:	01 97       	sbiw	r24, 0x01	; 1
     c18:	9c 83       	std	Y+4, r25	; 0x04
     c1a:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x30;
     c1c:	eb 81       	ldd	r30, Y+3	; 0x03
     c1e:	fc 81       	ldd	r31, Y+4	; 0x04
     c20:	80 e3       	ldi	r24, 0x30	; 48
     c22:	80 83       	st	Z, r24
     c24:	8b 81       	ldd	r24, Y+3	; 0x03
     c26:	9c 81       	ldd	r25, Y+4	; 0x04
     c28:	01 97       	sbiw	r24, 0x01	; 1
     c2a:	9c 83       	std	Y+4, r25	; 0x04
     c2c:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x31;
     c2e:	eb 81       	ldd	r30, Y+3	; 0x03
     c30:	fc 81       	ldd	r31, Y+4	; 0x04
     c32:	81 e3       	ldi	r24, 0x31	; 49
     c34:	80 83       	st	Z, r24
     c36:	8b 81       	ldd	r24, Y+3	; 0x03
     c38:	9c 81       	ldd	r25, Y+4	; 0x04
     c3a:	01 97       	sbiw	r24, 0x01	; 1
     c3c:	9c 83       	std	Y+4, r25	; 0x04
     c3e:	8b 83       	std	Y+3, r24	; 0x03
#ifdef RAMPZ
    *tos-- = 0xff;
#endif
    return((void *)tos);
     c40:	8b 81       	ldd	r24, Y+3	; 0x03
     c42:	9c 81       	ldd	r25, Y+4	; 0x04
}
     c44:	2a 96       	adiw	r28, 0x0a	; 10
     c46:	0f b6       	in	r0, 0x3f	; 63
     c48:	f8 94       	cli
     c4a:	de bf       	out	0x3e, r29	; 62
     c4c:	0f be       	out	0x3f, r0	; 63
     c4e:	cd bf       	out	0x3d, r28	; 61
     c50:	cf 91       	pop	r28
     c52:	df 91       	pop	r29
     c54:	08 95       	ret

00000c56 <enter_crit_sec>:
    if( kernel.sched[core].nested_crit_sec == (count_t)0 )enable_interrupts();
}

#else
void enter_crit_sec(void)
{
     c56:	df 93       	push	r29
     c58:	cf 93       	push	r28
     c5a:	cd b7       	in	r28, 0x3d	; 61
     c5c:	de b7       	in	r29, 0x3e	; 62
    disable_interrupts();
     c5e:	0e 94 bc 00 	call	0x178	; 0x178 <disable_interrupts>
    kernel.sched.nested_crit_sec++;
     c62:	80 91 c6 01 	lds	r24, 0x01C6
     c66:	90 91 c7 01 	lds	r25, 0x01C7
     c6a:	01 96       	adiw	r24, 0x01	; 1
     c6c:	90 93 c7 01 	sts	0x01C7, r25
     c70:	80 93 c6 01 	sts	0x01C6, r24
}
     c74:	cf 91       	pop	r28
     c76:	df 91       	pop	r29
     c78:	08 95       	ret

00000c7a <exit_crit_sec>:
void exit_crit_sec(void)
{
     c7a:	df 93       	push	r29
     c7c:	cf 93       	push	r28
     c7e:	cd b7       	in	r28, 0x3d	; 61
     c80:	de b7       	in	r29, 0x3e	; 62
    if( kernel.sched.nested_crit_sec != (count_t)0 )kernel.sched.nested_crit_sec--;
     c82:	80 91 c6 01 	lds	r24, 0x01C6
     c86:	90 91 c7 01 	lds	r25, 0x01C7
     c8a:	00 97       	sbiw	r24, 0x00	; 0
     c8c:	49 f0       	breq	.+18     	; 0xca0 <exit_crit_sec+0x26>
     c8e:	80 91 c6 01 	lds	r24, 0x01C6
     c92:	90 91 c7 01 	lds	r25, 0x01C7
     c96:	01 97       	sbiw	r24, 0x01	; 1
     c98:	90 93 c7 01 	sts	0x01C7, r25
     c9c:	80 93 c6 01 	sts	0x01C6, r24
    if( kernel.sched.nested_crit_sec == (count_t)0 )enable_interrupts();
     ca0:	80 91 c6 01 	lds	r24, 0x01C6
     ca4:	90 91 c7 01 	lds	r25, 0x01C7
     ca8:	00 97       	sbiw	r24, 0x00	; 0
     caa:	11 f4       	brne	.+4      	; 0xcb0 <exit_crit_sec+0x36>
     cac:	0e 94 c4 00 	call	0x188	; 0x188 <enable_interrupts>
}
     cb0:	cf 91       	pop	r28
     cb2:	df 91       	pop	r29
     cb4:	08 95       	ret

00000cb6 <gitem_init>:
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
// Инициация
void gitem_init(gitem_t * gitem, prio_t prio)
{
     cb6:	df 93       	push	r29
     cb8:	cf 93       	push	r28
     cba:	00 d0       	rcall	.+0      	; 0xcbc <gitem_init+0x6>
     cbc:	00 d0       	rcall	.+0      	; 0xcbe <gitem_init+0x8>
     cbe:	0f 92       	push	r0
     cc0:	cd b7       	in	r28, 0x3d	; 61
     cc2:	de b7       	in	r29, 0x3e	; 62
     cc4:	9c 83       	std	Y+4, r25	; 0x04
     cc6:	8b 83       	std	Y+3, r24	; 0x03
     cc8:	6d 83       	std	Y+5, r22	; 0x05
    group_t * group = &gitem->grp;
     cca:	8b 81       	ldd	r24, Y+3	; 0x03
     ccc:	9c 81       	ldd	r25, Y+4	; 0x04
     cce:	06 96       	adiw	r24, 0x06	; 6
     cd0:	9a 83       	std	Y+2, r25	; 0x02
     cd2:	89 83       	std	Y+1, r24	; 0x01
    item_init( (item_t *)gitem );
     cd4:	8b 81       	ldd	r24, Y+3	; 0x03
     cd6:	9c 81       	ldd	r25, Y+4	; 0x04
     cd8:	0e 94 41 09 	call	0x1282	; 0x1282 <item_init>
    group_init( group, prio );
     cdc:	89 81       	ldd	r24, Y+1	; 0x01
     cde:	9a 81       	ldd	r25, Y+2	; 0x02
     ce0:	6d 81       	ldd	r22, Y+5	; 0x05
     ce2:	0e 94 b1 08 	call	0x1162	; 0x1162 <group_init>
    gitem->group = group;
     ce6:	eb 81       	ldd	r30, Y+3	; 0x03
     ce8:	fc 81       	ldd	r31, Y+4	; 0x04
     cea:	89 81       	ldd	r24, Y+1	; 0x01
     cec:	9a 81       	ldd	r25, Y+2	; 0x02
     cee:	95 83       	std	Z+5, r25	; 0x05
     cf0:	84 83       	std	Z+4, r24	; 0x04
}
     cf2:	0f 90       	pop	r0
     cf4:	0f 90       	pop	r0
     cf6:	0f 90       	pop	r0
     cf8:	0f 90       	pop	r0
     cfa:	0f 90       	pop	r0
     cfc:	cf 91       	pop	r28
     cfe:	df 91       	pop	r29
     d00:	08 95       	ret

00000d02 <gitem_insert>:
// Вставить в список
void gitem_insert(gitem_t * gitem, xlist_t *xlist)
{
     d02:	df 93       	push	r29
     d04:	cf 93       	push	r28
     d06:	cd b7       	in	r28, 0x3d	; 61
     d08:	de b7       	in	r29, 0x3e	; 62
     d0a:	28 97       	sbiw	r28, 0x08	; 8
     d0c:	0f b6       	in	r0, 0x3f	; 63
     d0e:	f8 94       	cli
     d10:	de bf       	out	0x3e, r29	; 62
     d12:	0f be       	out	0x3f, r0	; 63
     d14:	cd bf       	out	0x3d, r28	; 61
     d16:	9e 83       	std	Y+6, r25	; 0x06
     d18:	8d 83       	std	Y+5, r24	; 0x05
     d1a:	78 87       	std	Y+8, r23	; 0x08
     d1c:	6f 83       	std	Y+7, r22	; 0x07
    prio_t prio = gitem->group->prio;
     d1e:	ed 81       	ldd	r30, Y+5	; 0x05
     d20:	fe 81       	ldd	r31, Y+6	; 0x06
     d22:	04 80       	ldd	r0, Z+4	; 0x04
     d24:	f5 81       	ldd	r31, Z+5	; 0x05
     d26:	e0 2d       	mov	r30, r0
     d28:	82 81       	ldd	r24, Z+2	; 0x02
     d2a:	8c 83       	std	Y+4, r24	; 0x04
    index_t mask = ((index_t)1)<<prio;
     d2c:	8c 81       	ldd	r24, Y+4	; 0x04
     d2e:	28 2f       	mov	r18, r24
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	02 c0       	rjmp	.+4      	; 0xd3c <gitem_insert+0x3a>
     d38:	88 0f       	add	r24, r24
     d3a:	99 1f       	adc	r25, r25
     d3c:	2a 95       	dec	r18
     d3e:	e2 f7       	brpl	.-8      	; 0xd38 <gitem_insert+0x36>
     d40:	8b 83       	std	Y+3, r24	; 0x03
    item_t ** head = (item_t **)xlist + prio;
     d42:	2f 81       	ldd	r18, Y+7	; 0x07
     d44:	38 85       	ldd	r19, Y+8	; 0x08
     d46:	8c 81       	ldd	r24, Y+4	; 0x04
     d48:	88 2f       	mov	r24, r24
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	88 0f       	add	r24, r24
     d4e:	99 1f       	adc	r25, r25
     d50:	82 0f       	add	r24, r18
     d52:	93 1f       	adc	r25, r19
     d54:	9a 83       	std	Y+2, r25	; 0x02
     d56:	89 83       	std	Y+1, r24	; 0x01
    // Пуста ли часть списка с таким приоритетом
    if( ( xlist->index )& mask)
     d58:	ef 81       	ldd	r30, Y+7	; 0x07
     d5a:	f8 85       	ldd	r31, Y+8	; 0x08
     d5c:	90 89       	ldd	r25, Z+16	; 0x10
     d5e:	8b 81       	ldd	r24, Y+3	; 0x03
     d60:	89 23       	and	r24, r25
     d62:	88 23       	and	r24, r24
     d64:	51 f0       	breq	.+20     	; 0xd7a <gitem_insert+0x78>
    {
        //Не пуста вставляем туда gitem
        item_insert( (item_t *)gitem, *head );
     d66:	8d 81       	ldd	r24, Y+5	; 0x05
     d68:	9e 81       	ldd	r25, Y+6	; 0x06
     d6a:	e9 81       	ldd	r30, Y+1	; 0x01
     d6c:	fa 81       	ldd	r31, Y+2	; 0x02
     d6e:	20 81       	ld	r18, Z
     d70:	31 81       	ldd	r19, Z+1	; 0x01
     d72:	b9 01       	movw	r22, r18
     d74:	0e 94 59 09 	call	0x12b2	; 0x12b2 <item_insert>
     d78:	0e c0       	rjmp	.+28     	; 0xd96 <gitem_insert+0x94>
    }
    else
    {
        // Пуста, gitem будет головой
        *head = (item_t *)gitem;
     d7a:	8d 81       	ldd	r24, Y+5	; 0x05
     d7c:	9e 81       	ldd	r25, Y+6	; 0x06
     d7e:	e9 81       	ldd	r30, Y+1	; 0x01
     d80:	fa 81       	ldd	r31, Y+2	; 0x02
     d82:	91 83       	std	Z+1, r25	; 0x01
     d84:	80 83       	st	Z, r24
        xlist->index |= mask;
     d86:	ef 81       	ldd	r30, Y+7	; 0x07
     d88:	f8 85       	ldd	r31, Y+8	; 0x08
     d8a:	90 89       	ldd	r25, Z+16	; 0x10
     d8c:	8b 81       	ldd	r24, Y+3	; 0x03
     d8e:	89 2b       	or	r24, r25
     d90:	ef 81       	ldd	r30, Y+7	; 0x07
     d92:	f8 85       	ldd	r31, Y+8	; 0x08
     d94:	80 8b       	std	Z+16, r24	; 0x10
    }
    gitem->group->link = (void *)xlist;
     d96:	ed 81       	ldd	r30, Y+5	; 0x05
     d98:	fe 81       	ldd	r31, Y+6	; 0x06
     d9a:	04 80       	ldd	r0, Z+4	; 0x04
     d9c:	f5 81       	ldd	r31, Z+5	; 0x05
     d9e:	e0 2d       	mov	r30, r0
     da0:	8f 81       	ldd	r24, Y+7	; 0x07
     da2:	98 85       	ldd	r25, Y+8	; 0x08
     da4:	91 83       	std	Z+1, r25	; 0x01
     da6:	80 83       	st	Z, r24
}
     da8:	28 96       	adiw	r28, 0x08	; 8
     daa:	0f b6       	in	r0, 0x3f	; 63
     dac:	f8 94       	cli
     dae:	de bf       	out	0x3e, r29	; 62
     db0:	0f be       	out	0x3f, r0	; 63
     db2:	cd bf       	out	0x3d, r28	; 61
     db4:	cf 91       	pop	r28
     db6:	df 91       	pop	r29
     db8:	08 95       	ret

00000dba <gitem_insert_group>:
 при этом gitem->group переходит в Пул

 Ограничения на gitem - он не должен быть сгруппирован в момент встаки в группу.
*/
void gitem_insert_group(gitem_t * gitem, xlist_t *xlist)
{
     dba:	df 93       	push	r29
     dbc:	cf 93       	push	r28
     dbe:	cd b7       	in	r28, 0x3d	; 61
     dc0:	de b7       	in	r29, 0x3e	; 62
     dc2:	2a 97       	sbiw	r28, 0x0a	; 10
     dc4:	0f b6       	in	r0, 0x3f	; 63
     dc6:	f8 94       	cli
     dc8:	de bf       	out	0x3e, r29	; 62
     dca:	0f be       	out	0x3f, r0	; 63
     dcc:	cd bf       	out	0x3d, r28	; 61
     dce:	98 87       	std	Y+8, r25	; 0x08
     dd0:	8f 83       	std	Y+7, r24	; 0x07
     dd2:	7a 87       	std	Y+10, r23	; 0x0a
     dd4:	69 87       	std	Y+9, r22	; 0x09
    prio_t prio = gitem->group->prio;
     dd6:	ef 81       	ldd	r30, Y+7	; 0x07
     dd8:	f8 85       	ldd	r31, Y+8	; 0x08
     dda:	04 80       	ldd	r0, Z+4	; 0x04
     ddc:	f5 81       	ldd	r31, Z+5	; 0x05
     dde:	e0 2d       	mov	r30, r0
     de0:	82 81       	ldd	r24, Z+2	; 0x02
     de2:	8e 83       	std	Y+6, r24	; 0x06
    index_t mask = ((index_t)1)<<prio;
     de4:	8e 81       	ldd	r24, Y+6	; 0x06
     de6:	28 2f       	mov	r18, r24
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	02 c0       	rjmp	.+4      	; 0xdf4 <gitem_insert_group+0x3a>
     df0:	88 0f       	add	r24, r24
     df2:	99 1f       	adc	r25, r25
     df4:	2a 95       	dec	r18
     df6:	e2 f7       	brpl	.-8      	; 0xdf0 <gitem_insert_group+0x36>
     df8:	8d 83       	std	Y+5, r24	; 0x05
    item_t ** head = (item_t **)xlist + prio;
     dfa:	29 85       	ldd	r18, Y+9	; 0x09
     dfc:	3a 85       	ldd	r19, Y+10	; 0x0a
     dfe:	8e 81       	ldd	r24, Y+6	; 0x06
     e00:	88 2f       	mov	r24, r24
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	88 0f       	add	r24, r24
     e06:	99 1f       	adc	r25, r25
     e08:	82 0f       	add	r24, r18
     e0a:	93 1f       	adc	r25, r19
     e0c:	9c 83       	std	Y+4, r25	; 0x04
     e0e:	8b 83       	std	Y+3, r24	; 0x03
    group_t * group = gitem->group;
     e10:	ef 81       	ldd	r30, Y+7	; 0x07
     e12:	f8 85       	ldd	r31, Y+8	; 0x08
     e14:	84 81       	ldd	r24, Z+4	; 0x04
     e16:	95 81       	ldd	r25, Z+5	; 0x05
     e18:	9a 83       	std	Y+2, r25	; 0x02
     e1a:	89 83       	std	Y+1, r24	; 0x01
    // Пуста ли часть списка с таким приоритетом
    if( ( xlist->index )& mask)
     e1c:	e9 85       	ldd	r30, Y+9	; 0x09
     e1e:	fa 85       	ldd	r31, Y+10	; 0x0a
     e20:	90 89       	ldd	r25, Z+16	; 0x10
     e22:	8d 81       	ldd	r24, Y+5	; 0x05
     e24:	89 23       	and	r24, r25
     e26:	88 23       	and	r24, r24
     e28:	31 f1       	breq	.+76     	; 0xe76 <gitem_insert_group+0xbc>
    {
        //Не пуста вставляем туда gitem
        item_insert((item_t *)gitem, *head );
     e2a:	8f 81       	ldd	r24, Y+7	; 0x07
     e2c:	98 85       	ldd	r25, Y+8	; 0x08
     e2e:	eb 81       	ldd	r30, Y+3	; 0x03
     e30:	fc 81       	ldd	r31, Y+4	; 0x04
     e32:	20 81       	ld	r18, Z
     e34:	31 81       	ldd	r19, Z+1	; 0x01
     e36:	b9 01       	movw	r22, r18
     e38:	0e 94 59 09 	call	0x12b2	; 0x12b2 <item_insert>
        //Передаем старую группу в пул
        group_push(group);
     e3c:	89 81       	ldd	r24, Y+1	; 0x01
     e3e:	9a 81       	ldd	r25, Y+2	; 0x02
     e40:	0e 94 ce 08 	call	0x119c	; 0x119c <group_push>
        //назначаем новую группу - ту, в которой голова
        group = ((gitem_t *)*head)->group;
     e44:	eb 81       	ldd	r30, Y+3	; 0x03
     e46:	fc 81       	ldd	r31, Y+4	; 0x04
     e48:	80 81       	ld	r24, Z
     e4a:	91 81       	ldd	r25, Z+1	; 0x01
     e4c:	fc 01       	movw	r30, r24
     e4e:	84 81       	ldd	r24, Z+4	; 0x04
     e50:	95 81       	ldd	r25, Z+5	; 0x05
     e52:	9a 83       	std	Y+2, r25	; 0x02
     e54:	89 83       	std	Y+1, r24	; 0x01
        gitem->group = group;
     e56:	ef 81       	ldd	r30, Y+7	; 0x07
     e58:	f8 85       	ldd	r31, Y+8	; 0x08
     e5a:	89 81       	ldd	r24, Y+1	; 0x01
     e5c:	9a 81       	ldd	r25, Y+2	; 0x02
     e5e:	95 83       	std	Z+5, r25	; 0x05
     e60:	84 83       	std	Z+4, r24	; 0x04
        //количество элементов в группе увеличилось на 1
        group->el_num++;
     e62:	e9 81       	ldd	r30, Y+1	; 0x01
     e64:	fa 81       	ldd	r31, Y+2	; 0x02
     e66:	83 81       	ldd	r24, Z+3	; 0x03
     e68:	94 81       	ldd	r25, Z+4	; 0x04
     e6a:	01 96       	adiw	r24, 0x01	; 1
     e6c:	e9 81       	ldd	r30, Y+1	; 0x01
     e6e:	fa 81       	ldd	r31, Y+2	; 0x02
     e70:	94 83       	std	Z+4, r25	; 0x04
     e72:	83 83       	std	Z+3, r24	; 0x03
     e74:	14 c0       	rjmp	.+40     	; 0xe9e <gitem_insert_group+0xe4>
    }
    else
    {
        // Пуста, gitem будет головой
        *head = (item_t *)gitem;
     e76:	8f 81       	ldd	r24, Y+7	; 0x07
     e78:	98 85       	ldd	r25, Y+8	; 0x08
     e7a:	eb 81       	ldd	r30, Y+3	; 0x03
     e7c:	fc 81       	ldd	r31, Y+4	; 0x04
     e7e:	91 83       	std	Z+1, r25	; 0x01
     e80:	80 83       	st	Z, r24
        xlist->index |= mask;
     e82:	e9 85       	ldd	r30, Y+9	; 0x09
     e84:	fa 85       	ldd	r31, Y+10	; 0x0a
     e86:	90 89       	ldd	r25, Z+16	; 0x10
     e88:	8d 81       	ldd	r24, Y+5	; 0x05
     e8a:	89 2b       	or	r24, r25
     e8c:	e9 85       	ldd	r30, Y+9	; 0x09
     e8e:	fa 85       	ldd	r31, Y+10	; 0x0a
     e90:	80 8b       	std	Z+16, r24	; 0x10
        group->link = (void *)xlist;
     e92:	e9 81       	ldd	r30, Y+1	; 0x01
     e94:	fa 81       	ldd	r31, Y+2	; 0x02
     e96:	89 85       	ldd	r24, Y+9	; 0x09
     e98:	9a 85       	ldd	r25, Y+10	; 0x0a
     e9a:	91 83       	std	Z+1, r25	; 0x01
     e9c:	80 83       	st	Z, r24
    }
}
     e9e:	2a 96       	adiw	r28, 0x0a	; 10
     ea0:	0f b6       	in	r0, 0x3f	; 63
     ea2:	f8 94       	cli
     ea4:	de bf       	out	0x3e, r29	; 62
     ea6:	0f be       	out	0x3f, r0	; 63
     ea8:	cd bf       	out	0x3d, r28	; 61
     eaa:	cf 91       	pop	r28
     eac:	df 91       	pop	r29
     eae:	08 95       	ret

00000eb0 <gitem_fast_cut>:
// Быстро вырезать из списка (не обнуляется указатель gitem->group->link)
void gitem_fast_cut(gitem_t * gitem)
{
     eb0:	df 93       	push	r29
     eb2:	cf 93       	push	r28
     eb4:	00 d0       	rcall	.+0      	; 0xeb6 <gitem_fast_cut+0x6>
     eb6:	00 d0       	rcall	.+0      	; 0xeb8 <gitem_fast_cut+0x8>
     eb8:	0f 92       	push	r0
     eba:	cd b7       	in	r28, 0x3d	; 61
     ebc:	de b7       	in	r29, 0x3e	; 62
     ebe:	9d 83       	std	Y+5, r25	; 0x05
     ec0:	8c 83       	std	Y+4, r24	; 0x04
    prio_t prio = gitem->group->prio;
     ec2:	ec 81       	ldd	r30, Y+4	; 0x04
     ec4:	fd 81       	ldd	r31, Y+5	; 0x05
     ec6:	04 80       	ldd	r0, Z+4	; 0x04
     ec8:	f5 81       	ldd	r31, Z+5	; 0x05
     eca:	e0 2d       	mov	r30, r0
     ecc:	82 81       	ldd	r24, Z+2	; 0x02
     ece:	8b 83       	std	Y+3, r24	; 0x03
    xlist_t * xlist = (xlist_t *)gitem->group->link;
     ed0:	ec 81       	ldd	r30, Y+4	; 0x04
     ed2:	fd 81       	ldd	r31, Y+5	; 0x05
     ed4:	04 80       	ldd	r0, Z+4	; 0x04
     ed6:	f5 81       	ldd	r31, Z+5	; 0x05
     ed8:	e0 2d       	mov	r30, r0
     eda:	80 81       	ld	r24, Z
     edc:	91 81       	ldd	r25, Z+1	; 0x01
     ede:	9a 83       	std	Y+2, r25	; 0x02
     ee0:	89 83       	std	Y+1, r24	; 0x01
    // Является ли эта часть списка группированной?
    if( gitem->group->el_num > (count_t)1 )
     ee2:	ec 81       	ldd	r30, Y+4	; 0x04
     ee4:	fd 81       	ldd	r31, Y+5	; 0x05
     ee6:	04 80       	ldd	r0, Z+4	; 0x04
     ee8:	f5 81       	ldd	r31, Z+5	; 0x05
     eea:	e0 2d       	mov	r30, r0
     eec:	83 81       	ldd	r24, Z+3	; 0x03
     eee:	94 81       	ldd	r25, Z+4	; 0x04
     ef0:	82 30       	cpi	r24, 0x02	; 2
     ef2:	91 05       	cpc	r25, r1
     ef4:	b8 f0       	brcs	.+46     	; 0xf24 <gitem_fast_cut+0x74>
    {
        //Группированная часть списка, будем вырезать из группы с выделением новой группы из Пула
        // В текущей группе стало на 1 элемент меньше
        gitem->group->el_num--;
     ef6:	ec 81       	ldd	r30, Y+4	; 0x04
     ef8:	fd 81       	ldd	r31, Y+5	; 0x05
     efa:	04 80       	ldd	r0, Z+4	; 0x04
     efc:	f5 81       	ldd	r31, Z+5	; 0x05
     efe:	e0 2d       	mov	r30, r0
     f00:	83 81       	ldd	r24, Z+3	; 0x03
     f02:	94 81       	ldd	r25, Z+4	; 0x04
     f04:	01 97       	sbiw	r24, 0x01	; 1
     f06:	94 83       	std	Z+4, r25	; 0x04
     f08:	83 83       	std	Z+3, r24	; 0x03
        //выделяем новую группу
        gitem->group = group_pop();
     f0a:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <group_pop>
     f0e:	ec 81       	ldd	r30, Y+4	; 0x04
     f10:	fd 81       	ldd	r31, Y+5	; 0x05
     f12:	95 83       	std	Z+5, r25	; 0x05
     f14:	84 83       	std	Z+4, r24	; 0x04
        // Правильный приоритет, количество элементов в группе, выделенной из пула должно быть равно 1
        gitem->group->prio = (prio_t)prio;
     f16:	ec 81       	ldd	r30, Y+4	; 0x04
     f18:	fd 81       	ldd	r31, Y+5	; 0x05
     f1a:	04 80       	ldd	r0, Z+4	; 0x04
     f1c:	f5 81       	ldd	r31, Z+5	; 0x05
     f1e:	e0 2d       	mov	r30, r0
     f20:	8b 81       	ldd	r24, Y+3	; 0x03
     f22:	82 83       	std	Z+2, r24	; 0x02
    }
    //Является ли элемент единственным в своей части списка?
    if( ((item_t *)gitem)->next == (item_t *)gitem )
     f24:	ec 81       	ldd	r30, Y+4	; 0x04
     f26:	fd 81       	ldd	r31, Y+5	; 0x05
     f28:	20 81       	ld	r18, Z
     f2a:	31 81       	ldd	r19, Z+1	; 0x01
     f2c:	8c 81       	ldd	r24, Y+4	; 0x04
     f2e:	9d 81       	ldd	r25, Y+5	; 0x05
     f30:	28 17       	cp	r18, r24
     f32:	39 07       	cpc	r19, r25
     f34:	09 f5       	brne	.+66     	; 0xf78 <gitem_fast_cut+0xc8>
    {
        // Да, является!
        xlist->item[prio] = (item_t *)0;
     f36:	8b 81       	ldd	r24, Y+3	; 0x03
     f38:	88 2f       	mov	r24, r24
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	29 81       	ldd	r18, Y+1	; 0x01
     f3e:	3a 81       	ldd	r19, Y+2	; 0x02
     f40:	88 0f       	add	r24, r24
     f42:	99 1f       	adc	r25, r25
     f44:	f9 01       	movw	r30, r18
     f46:	e8 0f       	add	r30, r24
     f48:	f9 1f       	adc	r31, r25
     f4a:	11 82       	std	Z+1, r1	; 0x01
     f4c:	10 82       	st	Z, r1
        xlist->index &= ~(((index_t)1)<<prio);
     f4e:	e9 81       	ldd	r30, Y+1	; 0x01
     f50:	fa 81       	ldd	r31, Y+2	; 0x02
     f52:	80 89       	ldd	r24, Z+16	; 0x10
     f54:	48 2f       	mov	r20, r24
     f56:	8b 81       	ldd	r24, Y+3	; 0x03
     f58:	28 2f       	mov	r18, r24
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	02 2e       	mov	r0, r18
     f62:	02 c0       	rjmp	.+4      	; 0xf68 <gitem_fast_cut+0xb8>
     f64:	88 0f       	add	r24, r24
     f66:	99 1f       	adc	r25, r25
     f68:	0a 94       	dec	r0
     f6a:	e2 f7       	brpl	.-8      	; 0xf64 <gitem_fast_cut+0xb4>
     f6c:	80 95       	com	r24
     f6e:	84 23       	and	r24, r20
     f70:	e9 81       	ldd	r30, Y+1	; 0x01
     f72:	fa 81       	ldd	r31, Y+2	; 0x02
     f74:	80 8b       	std	Z+16, r24	; 0x10
     f76:	1a c0       	rjmp	.+52     	; 0xfac <gitem_fast_cut+0xfc>
    }
    else
    {
        // Нет, не является!
        // Является ли элемент головой своей части списка?
        if( xlist->item[(prio_t)prio] == (item_t *)gitem )
     f78:	8b 81       	ldd	r24, Y+3	; 0x03
     f7a:	88 2f       	mov	r24, r24
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	29 81       	ldd	r18, Y+1	; 0x01
     f80:	3a 81       	ldd	r19, Y+2	; 0x02
     f82:	88 0f       	add	r24, r24
     f84:	99 1f       	adc	r25, r25
     f86:	f9 01       	movw	r30, r18
     f88:	e8 0f       	add	r30, r24
     f8a:	f9 1f       	adc	r31, r25
     f8c:	20 81       	ld	r18, Z
     f8e:	31 81       	ldd	r19, Z+1	; 0x01
     f90:	8c 81       	ldd	r24, Y+4	; 0x04
     f92:	9d 81       	ldd	r25, Y+5	; 0x05
     f94:	28 17       	cp	r18, r24
     f96:	39 07       	cpc	r19, r25
     f98:	29 f4       	brne	.+10     	; 0xfa4 <gitem_fast_cut+0xf4>
        {
            // Является, список надо переключить
            xlist_switch( xlist, prio );
     f9a:	89 81       	ldd	r24, Y+1	; 0x01
     f9c:	9a 81       	ldd	r25, Y+2	; 0x02
     f9e:	6b 81       	ldd	r22, Y+3	; 0x03
     fa0:	0e 94 25 11 	call	0x224a	; 0x224a <xlist_switch>
        }
        // Собственно - вырезаем элемент
        item_cut( (item_t *)gitem );
     fa4:	8c 81       	ldd	r24, Y+4	; 0x04
     fa6:	9d 81       	ldd	r25, Y+5	; 0x05
     fa8:	0e 94 8b 09 	call	0x1316	; 0x1316 <item_cut>
    }
}
     fac:	0f 90       	pop	r0
     fae:	0f 90       	pop	r0
     fb0:	0f 90       	pop	r0
     fb2:	0f 90       	pop	r0
     fb4:	0f 90       	pop	r0
     fb6:	cf 91       	pop	r28
     fb8:	df 91       	pop	r29
     fba:	08 95       	ret

00000fbc <gitem_cut>:
// Вырезать из списка
void gitem_cut(gitem_t * gitem)
{
     fbc:	df 93       	push	r29
     fbe:	cf 93       	push	r28
     fc0:	00 d0       	rcall	.+0      	; 0xfc2 <gitem_cut+0x6>
     fc2:	cd b7       	in	r28, 0x3d	; 61
     fc4:	de b7       	in	r29, 0x3e	; 62
     fc6:	9a 83       	std	Y+2, r25	; 0x02
     fc8:	89 83       	std	Y+1, r24	; 0x01
    gitem_fast_cut( gitem );
     fca:	89 81       	ldd	r24, Y+1	; 0x01
     fcc:	9a 81       	ldd	r25, Y+2	; 0x02
     fce:	0e 94 58 07 	call	0xeb0	; 0xeb0 <gitem_fast_cut>
    gitem->group->link = (void *)0;
     fd2:	e9 81       	ldd	r30, Y+1	; 0x01
     fd4:	fa 81       	ldd	r31, Y+2	; 0x02
     fd6:	04 80       	ldd	r0, Z+4	; 0x04
     fd8:	f5 81       	ldd	r31, Z+5	; 0x05
     fda:	e0 2d       	mov	r30, r0
     fdc:	11 82       	std	Z+1, r1	; 0x01
     fde:	10 82       	st	Z, r1
}
     fe0:	0f 90       	pop	r0
     fe2:	0f 90       	pop	r0
     fe4:	cf 91       	pop	r28
     fe6:	df 91       	pop	r29
     fe8:	08 95       	ret

00000fea <gitem_xlist_merge>:
 1) Оба списка содержат только объекты типа gitem_t
 2) В списке source на каждом уровне приоритета все объекты типа gitem_t приенадлежат к одной группе.
 3) Элементы списка source, находящиеся на разных уровнях приоритета, пренадлежат разным группам.
*/
void gitem_xlist_merge(xlist_t * source, xlist_t * destignation)
{
     fea:	df 93       	push	r29
     fec:	cf 93       	push	r28
     fee:	cd b7       	in	r28, 0x3d	; 61
     ff0:	de b7       	in	r29, 0x3e	; 62
     ff2:	2c 97       	sbiw	r28, 0x0c	; 12
     ff4:	0f b6       	in	r0, 0x3f	; 63
     ff6:	f8 94       	cli
     ff8:	de bf       	out	0x3e, r29	; 62
     ffa:	0f be       	out	0x3f, r0	; 63
     ffc:	cd bf       	out	0x3d, r28	; 61
     ffe:	9a 87       	std	Y+10, r25	; 0x0a
    1000:	89 87       	std	Y+9, r24	; 0x09
    1002:	7c 87       	std	Y+12, r23	; 0x0c
    1004:	6b 87       	std	Y+11, r22	; 0x0b
    index_t mask = (index_t)1;
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	88 87       	std	Y+8, r24	; 0x08
    prio_t current_prio = (prio_t)0;
    100a:	1f 82       	std	Y+7, r1	; 0x07
    100c:	9a c0       	rjmp	.+308    	; 0x1142 <gitem_xlist_merge+0x158>
    while( mask )
    {
        // Есть че перенести?
        if( mask & source->index )
    100e:	e9 85       	ldd	r30, Y+9	; 0x09
    1010:	fa 85       	ldd	r31, Y+10	; 0x0a
    1012:	90 89       	ldd	r25, Z+16	; 0x10
    1014:	88 85       	ldd	r24, Y+8	; 0x08
    1016:	89 23       	and	r24, r25
    1018:	88 23       	and	r24, r24
    101a:	09 f4       	brne	.+2      	; 0x101e <gitem_xlist_merge+0x34>
    101c:	8c c0       	rjmp	.+280    	; 0x1136 <gitem_xlist_merge+0x14c>
        {
            // Есть!
            // Есть куда переносить?
            if( mask & destignation->index )
    101e:	eb 85       	ldd	r30, Y+11	; 0x0b
    1020:	fc 85       	ldd	r31, Y+12	; 0x0c
    1022:	90 89       	ldd	r25, Z+16	; 0x10
    1024:	88 85       	ldd	r24, Y+8	; 0x08
    1026:	89 23       	and	r24, r25
    1028:	88 23       	and	r24, r24
    102a:	09 f4       	brne	.+2      	; 0x102e <gitem_xlist_merge+0x44>
    102c:	43 c0       	rjmp	.+134    	; 0x10b4 <gitem_xlist_merge+0xca>
            {
                //Есть!
                // Сшиваем 2 2-связных списка!!!
                item_t * src = source->item[current_prio];
    102e:	8f 81       	ldd	r24, Y+7	; 0x07
    1030:	88 2f       	mov	r24, r24
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	29 85       	ldd	r18, Y+9	; 0x09
    1036:	3a 85       	ldd	r19, Y+10	; 0x0a
    1038:	88 0f       	add	r24, r24
    103a:	99 1f       	adc	r25, r25
    103c:	f9 01       	movw	r30, r18
    103e:	e8 0f       	add	r30, r24
    1040:	f9 1f       	adc	r31, r25
    1042:	80 81       	ld	r24, Z
    1044:	91 81       	ldd	r25, Z+1	; 0x01
    1046:	9e 83       	std	Y+6, r25	; 0x06
    1048:	8d 83       	std	Y+5, r24	; 0x05
                item_t * dst = destignation->item[current_prio];
    104a:	8f 81       	ldd	r24, Y+7	; 0x07
    104c:	88 2f       	mov	r24, r24
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	2b 85       	ldd	r18, Y+11	; 0x0b
    1052:	3c 85       	ldd	r19, Y+12	; 0x0c
    1054:	88 0f       	add	r24, r24
    1056:	99 1f       	adc	r25, r25
    1058:	f9 01       	movw	r30, r18
    105a:	e8 0f       	add	r30, r24
    105c:	f9 1f       	adc	r31, r25
    105e:	80 81       	ld	r24, Z
    1060:	91 81       	ldd	r25, Z+1	; 0x01
    1062:	9c 83       	std	Y+4, r25	; 0x04
    1064:	8b 83       	std	Y+3, r24	; 0x03
                src->prev->next = dst;
    1066:	ed 81       	ldd	r30, Y+5	; 0x05
    1068:	fe 81       	ldd	r31, Y+6	; 0x06
    106a:	02 80       	ldd	r0, Z+2	; 0x02
    106c:	f3 81       	ldd	r31, Z+3	; 0x03
    106e:	e0 2d       	mov	r30, r0
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	9c 81       	ldd	r25, Y+4	; 0x04
    1074:	91 83       	std	Z+1, r25	; 0x01
    1076:	80 83       	st	Z, r24
                dst->prev->next = src;
    1078:	eb 81       	ldd	r30, Y+3	; 0x03
    107a:	fc 81       	ldd	r31, Y+4	; 0x04
    107c:	02 80       	ldd	r0, Z+2	; 0x02
    107e:	f3 81       	ldd	r31, Z+3	; 0x03
    1080:	e0 2d       	mov	r30, r0
    1082:	8d 81       	ldd	r24, Y+5	; 0x05
    1084:	9e 81       	ldd	r25, Y+6	; 0x06
    1086:	91 83       	std	Z+1, r25	; 0x01
    1088:	80 83       	st	Z, r24
                item_t * buf = dst->prev;
    108a:	eb 81       	ldd	r30, Y+3	; 0x03
    108c:	fc 81       	ldd	r31, Y+4	; 0x04
    108e:	82 81       	ldd	r24, Z+2	; 0x02
    1090:	93 81       	ldd	r25, Z+3	; 0x03
    1092:	9a 83       	std	Y+2, r25	; 0x02
    1094:	89 83       	std	Y+1, r24	; 0x01
                dst->prev = src->prev;
    1096:	ed 81       	ldd	r30, Y+5	; 0x05
    1098:	fe 81       	ldd	r31, Y+6	; 0x06
    109a:	82 81       	ldd	r24, Z+2	; 0x02
    109c:	93 81       	ldd	r25, Z+3	; 0x03
    109e:	eb 81       	ldd	r30, Y+3	; 0x03
    10a0:	fc 81       	ldd	r31, Y+4	; 0x04
    10a2:	93 83       	std	Z+3, r25	; 0x03
    10a4:	82 83       	std	Z+2, r24	; 0x02
                src->prev = buf;
    10a6:	ed 81       	ldd	r30, Y+5	; 0x05
    10a8:	fe 81       	ldd	r31, Y+6	; 0x06
    10aa:	89 81       	ldd	r24, Y+1	; 0x01
    10ac:	9a 81       	ldd	r25, Y+2	; 0x02
    10ae:	93 83       	std	Z+3, r25	; 0x03
    10b0:	82 83       	std	Z+2, r24	; 0x02
    10b2:	21 c0       	rjmp	.+66     	; 0x10f6 <gitem_xlist_merge+0x10c>
            }
            else
            {
                //Нет, тупо переносим всю группу.
                destignation->item[current_prio] = source->item[current_prio];
    10b4:	8f 81       	ldd	r24, Y+7	; 0x07
    10b6:	68 2f       	mov	r22, r24
    10b8:	70 e0       	ldi	r23, 0x00	; 0
    10ba:	8f 81       	ldd	r24, Y+7	; 0x07
    10bc:	88 2f       	mov	r24, r24
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	29 85       	ldd	r18, Y+9	; 0x09
    10c2:	3a 85       	ldd	r19, Y+10	; 0x0a
    10c4:	88 0f       	add	r24, r24
    10c6:	99 1f       	adc	r25, r25
    10c8:	f9 01       	movw	r30, r18
    10ca:	e8 0f       	add	r30, r24
    10cc:	f9 1f       	adc	r31, r25
    10ce:	40 81       	ld	r20, Z
    10d0:	51 81       	ldd	r21, Z+1	; 0x01
    10d2:	2b 85       	ldd	r18, Y+11	; 0x0b
    10d4:	3c 85       	ldd	r19, Y+12	; 0x0c
    10d6:	cb 01       	movw	r24, r22
    10d8:	88 0f       	add	r24, r24
    10da:	99 1f       	adc	r25, r25
    10dc:	f9 01       	movw	r30, r18
    10de:	e8 0f       	add	r30, r24
    10e0:	f9 1f       	adc	r31, r25
    10e2:	51 83       	std	Z+1, r21	; 0x01
    10e4:	40 83       	st	Z, r20
                destignation->index |= mask;
    10e6:	eb 85       	ldd	r30, Y+11	; 0x0b
    10e8:	fc 85       	ldd	r31, Y+12	; 0x0c
    10ea:	90 89       	ldd	r25, Z+16	; 0x10
    10ec:	88 85       	ldd	r24, Y+8	; 0x08
    10ee:	89 2b       	or	r24, r25
    10f0:	eb 85       	ldd	r30, Y+11	; 0x0b
    10f2:	fc 85       	ldd	r31, Y+12	; 0x0c
    10f4:	80 8b       	std	Z+16, r24	; 0x10
            }
            // Вот почему эта функция отнесена к методам gitem_t
            ((gitem_t *)source->item[current_prio])->group->link = (void *)destignation;
    10f6:	8f 81       	ldd	r24, Y+7	; 0x07
    10f8:	88 2f       	mov	r24, r24
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	29 85       	ldd	r18, Y+9	; 0x09
    10fe:	3a 85       	ldd	r19, Y+10	; 0x0a
    1100:	88 0f       	add	r24, r24
    1102:	99 1f       	adc	r25, r25
    1104:	f9 01       	movw	r30, r18
    1106:	e8 0f       	add	r30, r24
    1108:	f9 1f       	adc	r31, r25
    110a:	80 81       	ld	r24, Z
    110c:	91 81       	ldd	r25, Z+1	; 0x01
    110e:	fc 01       	movw	r30, r24
    1110:	04 80       	ldd	r0, Z+4	; 0x04
    1112:	f5 81       	ldd	r31, Z+5	; 0x05
    1114:	e0 2d       	mov	r30, r0
    1116:	8b 85       	ldd	r24, Y+11	; 0x0b
    1118:	9c 85       	ldd	r25, Y+12	; 0x0c
    111a:	91 83       	std	Z+1, r25	; 0x01
    111c:	80 83       	st	Z, r24
            // Перенос закончен, обнуляем указатель
            source->item[(prio_t)current_prio] = (item_t *)0;
    111e:	8f 81       	ldd	r24, Y+7	; 0x07
    1120:	88 2f       	mov	r24, r24
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	29 85       	ldd	r18, Y+9	; 0x09
    1126:	3a 85       	ldd	r19, Y+10	; 0x0a
    1128:	88 0f       	add	r24, r24
    112a:	99 1f       	adc	r25, r25
    112c:	f9 01       	movw	r30, r18
    112e:	e8 0f       	add	r30, r24
    1130:	f9 1f       	adc	r31, r25
    1132:	11 82       	std	Z+1, r1	; 0x01
    1134:	10 82       	st	Z, r1
        }
        mask<<=1;
    1136:	88 85       	ldd	r24, Y+8	; 0x08
    1138:	88 0f       	add	r24, r24
    113a:	88 87       	std	Y+8, r24	; 0x08
        current_prio++;
    113c:	8f 81       	ldd	r24, Y+7	; 0x07
    113e:	8f 5f       	subi	r24, 0xFF	; 255
    1140:	8f 83       	std	Y+7, r24	; 0x07
*/
void gitem_xlist_merge(xlist_t * source, xlist_t * destignation)
{
    index_t mask = (index_t)1;
    prio_t current_prio = (prio_t)0;
    while( mask )
    1142:	88 85       	ldd	r24, Y+8	; 0x08
    1144:	88 23       	and	r24, r24
    1146:	09 f0       	breq	.+2      	; 0x114a <gitem_xlist_merge+0x160>
    1148:	62 cf       	rjmp	.-316    	; 0x100e <gitem_xlist_merge+0x24>
        }
        mask<<=1;
        current_prio++;
    }
    // Список полностью перенесен, обнуляем индекс
    source->index = (index_t)0;
    114a:	e9 85       	ldd	r30, Y+9	; 0x09
    114c:	fa 85       	ldd	r31, Y+10	; 0x0a
    114e:	10 8a       	std	Z+16, r1	; 0x10
}
    1150:	2c 96       	adiw	r28, 0x0c	; 12
    1152:	0f b6       	in	r0, 0x3f	; 63
    1154:	f8 94       	cli
    1156:	de bf       	out	0x3e, r29	; 62
    1158:	0f be       	out	0x3f, r0	; 63
    115a:	cd bf       	out	0x3d, r28	; 61
    115c:	cf 91       	pop	r28
    115e:	df 91       	pop	r29
    1160:	08 95       	ret

00001162 <group_init>:
*****************************************************************************************/
#include "../include/bugurt.h"
//Методы group_t
// инициация
void group_init(group_t * group, prio_t prio)
{
    1162:	df 93       	push	r29
    1164:	cf 93       	push	r28
    1166:	00 d0       	rcall	.+0      	; 0x1168 <group_init+0x6>
    1168:	0f 92       	push	r0
    116a:	cd b7       	in	r28, 0x3d	; 61
    116c:	de b7       	in	r29, 0x3e	; 62
    116e:	9a 83       	std	Y+2, r25	; 0x02
    1170:	89 83       	std	Y+1, r24	; 0x01
    1172:	6b 83       	std	Y+3, r22	; 0x03
    group->link = (void *)0;
    1174:	e9 81       	ldd	r30, Y+1	; 0x01
    1176:	fa 81       	ldd	r31, Y+2	; 0x02
    1178:	11 82       	std	Z+1, r1	; 0x01
    117a:	10 82       	st	Z, r1
    group->prio = prio;
    117c:	e9 81       	ldd	r30, Y+1	; 0x01
    117e:	fa 81       	ldd	r31, Y+2	; 0x02
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	82 83       	std	Z+2, r24	; 0x02
    // группа - часть gitem_t, количество элементов - 1
    group->el_num = (count_t)1;
    1184:	e9 81       	ldd	r30, Y+1	; 0x01
    1186:	fa 81       	ldd	r31, Y+2	; 0x02
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	94 83       	std	Z+4, r25	; 0x04
    118e:	83 83       	std	Z+3, r24	; 0x03
}
    1190:	0f 90       	pop	r0
    1192:	0f 90       	pop	r0
    1194:	0f 90       	pop	r0
    1196:	cf 91       	pop	r28
    1198:	df 91       	pop	r29
    119a:	08 95       	ret

0000119c <group_push>:
// положить в ПУЛ
void group_push(group_t * group)
{
    119c:	df 93       	push	r29
    119e:	cf 93       	push	r28
    11a0:	00 d0       	rcall	.+0      	; 0x11a2 <group_push+0x6>
    11a2:	cd b7       	in	r28, 0x3d	; 61
    11a4:	de b7       	in	r29, 0x3e	; 62
    11a6:	9a 83       	std	Y+2, r25	; 0x02
    11a8:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    // блокируем пул
    spin_lock( &kernel.pool_lock );
#endif
    group->link = (void *)kernel.pool;
    11aa:	80 91 f6 01 	lds	r24, 0x01F6
    11ae:	90 91 f7 01 	lds	r25, 0x01F7
    11b2:	e9 81       	ldd	r30, Y+1	; 0x01
    11b4:	fa 81       	ldd	r31, Y+2	; 0x02
    11b6:	91 83       	std	Z+1, r25	; 0x01
    11b8:	80 83       	st	Z, r24
    kernel.pool = group;
    11ba:	89 81       	ldd	r24, Y+1	; 0x01
    11bc:	9a 81       	ldd	r25, Y+2	; 0x02
    11be:	90 93 f7 01 	sts	0x01F7, r25
    11c2:	80 93 f6 01 	sts	0x01F6, r24
#ifdef CONFIG_MP
    // разблокируем пул
    spin_unlock( &kernel.pool_lock );
#endif
}
    11c6:	0f 90       	pop	r0
    11c8:	0f 90       	pop	r0
    11ca:	cf 91       	pop	r28
    11cc:	df 91       	pop	r29
    11ce:	08 95       	ret

000011d0 <group_pop>:
// взять из пула, если есть, а есть всегда, избыточность же!
group_t * group_pop(void)
{
    11d0:	df 93       	push	r29
    11d2:	cf 93       	push	r28
    11d4:	00 d0       	rcall	.+0      	; 0x11d6 <group_pop+0x6>
    11d6:	cd b7       	in	r28, 0x3d	; 61
    11d8:	de b7       	in	r29, 0x3e	; 62
#ifdef CONFIG_MP
    // блокируем пул
    spin_lock( &kernel.pool_lock );
#endif
    group_t * group = kernel.pool;
    11da:	80 91 f6 01 	lds	r24, 0x01F6
    11de:	90 91 f7 01 	lds	r25, 0x01F7
    11e2:	9a 83       	std	Y+2, r25	; 0x02
    11e4:	89 83       	std	Y+1, r24	; 0x01
    kernel.pool = (group_t *)group->link;
    11e6:	e9 81       	ldd	r30, Y+1	; 0x01
    11e8:	fa 81       	ldd	r31, Y+2	; 0x02
    11ea:	80 81       	ld	r24, Z
    11ec:	91 81       	ldd	r25, Z+1	; 0x01
    11ee:	90 93 f7 01 	sts	0x01F7, r25
    11f2:	80 93 f6 01 	sts	0x01F6, r24
#ifdef CONFIG_MP
    // разблокируем пул
    spin_unlock( &kernel.pool_lock );
#endif
    return group;
    11f6:	89 81       	ldd	r24, Y+1	; 0x01
    11f8:	9a 81       	ldd	r25, Y+2	; 0x02
}
    11fa:	0f 90       	pop	r0
    11fc:	0f 90       	pop	r0
    11fe:	cf 91       	pop	r28
    1200:	df 91       	pop	r29
    1202:	08 95       	ret

00001204 <index_search>:
*                           http://www.0chan.ru/r/res/9996.html                          *
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
prio_t index_search(index_t index)
{
    1204:	df 93       	push	r29
    1206:	cf 93       	push	r28
    1208:	00 d0       	rcall	.+0      	; 0x120a <index_search+0x6>
    120a:	00 d0       	rcall	.+0      	; 0x120c <index_search+0x8>
    120c:	00 d0       	rcall	.+0      	; 0x120e <index_search+0xa>
    120e:	cd b7       	in	r28, 0x3d	; 61
    1210:	de b7       	in	r29, 0x3e	; 62
    1212:	8e 83       	std	Y+6, r24	; 0x06
    prio_t prio = (prio_t)0;
    1214:	1d 82       	std	Y+5, r1	; 0x05
        но, т.к. BITS_IN_INDEX_T фиксировано для данной конфигурации,
        то получается время выполнения - O(1), ВСЕГДА.

        И да, предсказуемость + переносимость > быстродействие.
        */
    index_t upper = ~(index_t)0, lower = ~(index_t)0, middle;
    1216:	8f ef       	ldi	r24, 0xFF	; 255
    1218:	8c 83       	std	Y+4, r24	; 0x04
    121a:	8f ef       	ldi	r24, 0xFF	; 255
    121c:	8b 83       	std	Y+3, r24	; 0x03
    prio_t step = (prio_t)BITS_IN_INDEX_T;
    121e:	88 e0       	ldi	r24, 0x08	; 8
    1220:	89 83       	std	Y+1, r24	; 0x01
    1222:	22 c0       	rjmp	.+68     	; 0x1268 <index_search+0x64>
    while( step )
    {
        step>>=1; // делим шаг пополам
    1224:	89 81       	ldd	r24, Y+1	; 0x01
    1226:	86 95       	lsr	r24
    1228:	89 83       	std	Y+1, r24	; 0x01
        middle = lower>>step;
    122a:	8b 81       	ldd	r24, Y+3	; 0x03
    122c:	28 2f       	mov	r18, r24
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	89 81       	ldd	r24, Y+1	; 0x01
    1232:	88 2f       	mov	r24, r24
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	a9 01       	movw	r20, r18
    1238:	02 c0       	rjmp	.+4      	; 0x123e <index_search+0x3a>
    123a:	55 95       	asr	r21
    123c:	47 95       	ror	r20
    123e:	8a 95       	dec	r24
    1240:	e2 f7       	brpl	.-8      	; 0x123a <index_search+0x36>
    1242:	ca 01       	movw	r24, r20
    1244:	8a 83       	std	Y+2, r24	; 0x02
        if( index & upper & middle )
    1246:	9e 81       	ldd	r25, Y+6	; 0x06
    1248:	8c 81       	ldd	r24, Y+4	; 0x04
    124a:	98 23       	and	r25, r24
    124c:	8a 81       	ldd	r24, Y+2	; 0x02
    124e:	89 23       	and	r24, r25
    1250:	88 23       	and	r24, r24
    1252:	19 f0       	breq	.+6      	; 0x125a <index_search+0x56>
        {
            lower = middle;
    1254:	8a 81       	ldd	r24, Y+2	; 0x02
    1256:	8b 83       	std	Y+3, r24	; 0x03
    1258:	07 c0       	rjmp	.+14     	; 0x1268 <index_search+0x64>
        }
        else
        {
            upper = ~middle;
    125a:	8a 81       	ldd	r24, Y+2	; 0x02
    125c:	80 95       	com	r24
    125e:	8c 83       	std	Y+4, r24	; 0x04
            prio += step;
    1260:	9d 81       	ldd	r25, Y+5	; 0x05
    1262:	89 81       	ldd	r24, Y+1	; 0x01
    1264:	89 0f       	add	r24, r25
    1266:	8d 83       	std	Y+5, r24	; 0x05

        И да, предсказуемость + переносимость > быстродействие.
        */
    index_t upper = ~(index_t)0, lower = ~(index_t)0, middle;
    prio_t step = (prio_t)BITS_IN_INDEX_T;
    while( step )
    1268:	89 81       	ldd	r24, Y+1	; 0x01
    126a:	88 23       	and	r24, r24
    126c:	d9 f6       	brne	.-74     	; 0x1224 <index_search+0x20>
        if ( mask & index )break;
        prio++;
        mask<<=1;
    }
#endif
    return prio;
    126e:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1270:	26 96       	adiw	r28, 0x06	; 6
    1272:	0f b6       	in	r0, 0x3f	; 63
    1274:	f8 94       	cli
    1276:	de bf       	out	0x3e, r29	; 62
    1278:	0f be       	out	0x3f, r0	; 63
    127a:	cd bf       	out	0x3d, r28	; 61
    127c:	cf 91       	pop	r28
    127e:	df 91       	pop	r29
    1280:	08 95       	ret

00001282 <item_init>:
*****************************************************************************************/
#include "../include/bugurt.h"
//Методы элемента 2-связного списка
//инициация элемента
void item_init(item_t *item)
{
    1282:	df 93       	push	r29
    1284:	cf 93       	push	r28
    1286:	00 d0       	rcall	.+0      	; 0x1288 <item_init+0x6>
    1288:	cd b7       	in	r28, 0x3d	; 61
    128a:	de b7       	in	r29, 0x3e	; 62
    128c:	9a 83       	std	Y+2, r25	; 0x02
    128e:	89 83       	std	Y+1, r24	; 0x01
    item->prev = item;
    1290:	e9 81       	ldd	r30, Y+1	; 0x01
    1292:	fa 81       	ldd	r31, Y+2	; 0x02
    1294:	89 81       	ldd	r24, Y+1	; 0x01
    1296:	9a 81       	ldd	r25, Y+2	; 0x02
    1298:	93 83       	std	Z+3, r25	; 0x03
    129a:	82 83       	std	Z+2, r24	; 0x02
    item->next = item;
    129c:	e9 81       	ldd	r30, Y+1	; 0x01
    129e:	fa 81       	ldd	r31, Y+2	; 0x02
    12a0:	89 81       	ldd	r24, Y+1	; 0x01
    12a2:	9a 81       	ldd	r25, Y+2	; 0x02
    12a4:	91 83       	std	Z+1, r25	; 0x01
    12a6:	80 83       	st	Z, r24
}
    12a8:	0f 90       	pop	r0
    12aa:	0f 90       	pop	r0
    12ac:	cf 91       	pop	r28
    12ae:	df 91       	pop	r29
    12b0:	08 95       	ret

000012b2 <item_insert>:
//Вставить элемент
void item_insert(item_t *item, item_t *head)
{
    12b2:	df 93       	push	r29
    12b4:	cf 93       	push	r28
    12b6:	00 d0       	rcall	.+0      	; 0x12b8 <item_insert+0x6>
    12b8:	00 d0       	rcall	.+0      	; 0x12ba <item_insert+0x8>
    12ba:	00 d0       	rcall	.+0      	; 0x12bc <item_insert+0xa>
    12bc:	cd b7       	in	r28, 0x3d	; 61
    12be:	de b7       	in	r29, 0x3e	; 62
    12c0:	9c 83       	std	Y+4, r25	; 0x04
    12c2:	8b 83       	std	Y+3, r24	; 0x03
    12c4:	7e 83       	std	Y+6, r23	; 0x06
    12c6:	6d 83       	std	Y+5, r22	; 0x05
    // "хвост" списка
    item_t * tail = head->prev;
    12c8:	ed 81       	ldd	r30, Y+5	; 0x05
    12ca:	fe 81       	ldd	r31, Y+6	; 0x06
    12cc:	82 81       	ldd	r24, Z+2	; 0x02
    12ce:	93 81       	ldd	r25, Z+3	; 0x03
    12d0:	9a 83       	std	Y+2, r25	; 0x02
    12d2:	89 83       	std	Y+1, r24	; 0x01

    // Вставляем элемент между "головой" и "хвостом"
    item->prev = tail;
    12d4:	eb 81       	ldd	r30, Y+3	; 0x03
    12d6:	fc 81       	ldd	r31, Y+4	; 0x04
    12d8:	89 81       	ldd	r24, Y+1	; 0x01
    12da:	9a 81       	ldd	r25, Y+2	; 0x02
    12dc:	93 83       	std	Z+3, r25	; 0x03
    12de:	82 83       	std	Z+2, r24	; 0x02
    item->next = head;
    12e0:	eb 81       	ldd	r30, Y+3	; 0x03
    12e2:	fc 81       	ldd	r31, Y+4	; 0x04
    12e4:	8d 81       	ldd	r24, Y+5	; 0x05
    12e6:	9e 81       	ldd	r25, Y+6	; 0x06
    12e8:	91 83       	std	Z+1, r25	; 0x01
    12ea:	80 83       	st	Z, r24

    head->prev = item;
    12ec:	ed 81       	ldd	r30, Y+5	; 0x05
    12ee:	fe 81       	ldd	r31, Y+6	; 0x06
    12f0:	8b 81       	ldd	r24, Y+3	; 0x03
    12f2:	9c 81       	ldd	r25, Y+4	; 0x04
    12f4:	93 83       	std	Z+3, r25	; 0x03
    12f6:	82 83       	std	Z+2, r24	; 0x02
    tail->next = item;
    12f8:	e9 81       	ldd	r30, Y+1	; 0x01
    12fa:	fa 81       	ldd	r31, Y+2	; 0x02
    12fc:	8b 81       	ldd	r24, Y+3	; 0x03
    12fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1300:	91 83       	std	Z+1, r25	; 0x01
    1302:	80 83       	st	Z, r24
}
    1304:	26 96       	adiw	r28, 0x06	; 6
    1306:	0f b6       	in	r0, 0x3f	; 63
    1308:	f8 94       	cli
    130a:	de bf       	out	0x3e, r29	; 62
    130c:	0f be       	out	0x3f, r0	; 63
    130e:	cd bf       	out	0x3d, r28	; 61
    1310:	cf 91       	pop	r28
    1312:	df 91       	pop	r29
    1314:	08 95       	ret

00001316 <item_cut>:
//Вырезать элемент
void item_cut( item_t *item )
{
    1316:	df 93       	push	r29
    1318:	cf 93       	push	r28
    131a:	00 d0       	rcall	.+0      	; 0x131c <item_cut+0x6>
    131c:	00 d0       	rcall	.+0      	; 0x131e <item_cut+0x8>
    131e:	00 d0       	rcall	.+0      	; 0x1320 <item_cut+0xa>
    1320:	cd b7       	in	r28, 0x3d	; 61
    1322:	de b7       	in	r29, 0x3e	; 62
    1324:	9e 83       	std	Y+6, r25	; 0x06
    1326:	8d 83       	std	Y+5, r24	; 0x05
    item_t * prev = item->prev; //Предыдущий элемент
    1328:	ed 81       	ldd	r30, Y+5	; 0x05
    132a:	fe 81       	ldd	r31, Y+6	; 0x06
    132c:	82 81       	ldd	r24, Z+2	; 0x02
    132e:	93 81       	ldd	r25, Z+3	; 0x03
    1330:	9c 83       	std	Y+4, r25	; 0x04
    1332:	8b 83       	std	Y+3, r24	; 0x03
    item_t * next = item->next; //Следующий элемент
    1334:	ed 81       	ldd	r30, Y+5	; 0x05
    1336:	fe 81       	ldd	r31, Y+6	; 0x06
    1338:	80 81       	ld	r24, Z
    133a:	91 81       	ldd	r25, Z+1	; 0x01
    133c:	9a 83       	std	Y+2, r25	; 0x02
    133e:	89 83       	std	Y+1, r24	; 0x01

    next->prev = prev;
    1340:	e9 81       	ldd	r30, Y+1	; 0x01
    1342:	fa 81       	ldd	r31, Y+2	; 0x02
    1344:	8b 81       	ldd	r24, Y+3	; 0x03
    1346:	9c 81       	ldd	r25, Y+4	; 0x04
    1348:	93 83       	std	Z+3, r25	; 0x03
    134a:	82 83       	std	Z+2, r24	; 0x02
    prev->next = next;
    134c:	eb 81       	ldd	r30, Y+3	; 0x03
    134e:	fc 81       	ldd	r31, Y+4	; 0x04
    1350:	89 81       	ldd	r24, Y+1	; 0x01
    1352:	9a 81       	ldd	r25, Y+2	; 0x02
    1354:	91 83       	std	Z+1, r25	; 0x01
    1356:	80 83       	st	Z, r24

    item->prev = item;
    1358:	ed 81       	ldd	r30, Y+5	; 0x05
    135a:	fe 81       	ldd	r31, Y+6	; 0x06
    135c:	8d 81       	ldd	r24, Y+5	; 0x05
    135e:	9e 81       	ldd	r25, Y+6	; 0x06
    1360:	93 83       	std	Z+3, r25	; 0x03
    1362:	82 83       	std	Z+2, r24	; 0x02
    item->next = item;
    1364:	ed 81       	ldd	r30, Y+5	; 0x05
    1366:	fe 81       	ldd	r31, Y+6	; 0x06
    1368:	8d 81       	ldd	r24, Y+5	; 0x05
    136a:	9e 81       	ldd	r25, Y+6	; 0x06
    136c:	91 83       	std	Z+1, r25	; 0x01
    136e:	80 83       	st	Z, r24
}
    1370:	26 96       	adiw	r28, 0x06	; 6
    1372:	0f b6       	in	r0, 0x3f	; 63
    1374:	f8 94       	cli
    1376:	de bf       	out	0x3e, r29	; 62
    1378:	0f be       	out	0x3f, r0	; 63
    137a:	cd bf       	out	0x3d, r28	; 61
    137c:	cf 91       	pop	r28
    137e:	df 91       	pop	r29
    1380:	08 95       	ret

00001382 <kernel_init>:
{
    while(1);
}

void kernel_init(void)
{
    1382:	8f 92       	push	r8
    1384:	af 92       	push	r10
    1386:	bf 92       	push	r11
    1388:	cf 92       	push	r12
    138a:	ef 92       	push	r14
    138c:	ff 92       	push	r15
    138e:	0f 93       	push	r16
    1390:	1f 93       	push	r17
    1392:	df 93       	push	r29
    1394:	cf 93       	push	r28
    1396:	cd b7       	in	r28, 0x3d	; 61
    1398:	de b7       	in	r29, 0x3e	; 62
        stat_init( (stat_t *)kernel.stat + i );
        sched_init( (sched_t *)kernel.sched + i, (proc_t *)kernel.idle + i );
    }
    spin_unlock( &kernel.stat_lock );
#else
    proc_init_isr(
    139a:	88 ec       	ldi	r24, 0xC8	; 200
    139c:	91 e0       	ldi	r25, 0x01	; 1
    139e:	21 e6       	ldi	r18, 0x61	; 97
    13a0:	32 e1       	ldi	r19, 0x12	; 18
    13a2:	b9 01       	movw	r22, r18
    13a4:	40 e0       	ldi	r20, 0x00	; 0
    13a6:	50 e0       	ldi	r21, 0x00	; 0
    13a8:	20 e0       	ldi	r18, 0x00	; 0
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	00 e0       	ldi	r16, 0x00	; 0
    13ae:	10 e0       	ldi	r17, 0x00	; 0
    13b0:	ee 24       	eor	r14, r14
    13b2:	ff 24       	eor	r15, r15
    13b4:	0f 2e       	mov	r0, r31
    13b6:	f7 e0       	ldi	r31, 0x07	; 7
    13b8:	cf 2e       	mov	r12, r31
    13ba:	f0 2d       	mov	r31, r0
    13bc:	aa 24       	eor	r10, r10
    13be:	bb 24       	eor	r11, r11
    13c0:	a3 94       	inc	r10
    13c2:	88 24       	eor	r8, r8
    13c4:	0e 94 97 0b 	call	0x172e	; 0x172e <proc_init_isr>
        0, // это не важно, при первой же смене контекста будет сохранен текущий указатель стека
        ((prio_t)BITS_IN_INDEX_T - (prio_t)1),// низший приоритет
        (timer_t)1,//минимальный квант времени
        (bool_t)0// не RT
    );
    sched_init( (sched_t *)&kernel.sched, (proc_t *)&kernel.idle );
    13c8:	8e e9       	ldi	r24, 0x9E	; 158
    13ca:	91 e0       	ldi	r25, 0x01	; 1
    13cc:	28 ec       	ldi	r18, 0xC8	; 200
    13ce:	31 e0       	ldi	r19, 0x01	; 1
    13d0:	b9 01       	movw	r22, r18
    13d2:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <sched_init>
#endif // CONFIG_MP
}
    13d6:	cf 91       	pop	r28
    13d8:	df 91       	pop	r29
    13da:	1f 91       	pop	r17
    13dc:	0f 91       	pop	r16
    13de:	ff 90       	pop	r15
    13e0:	ef 90       	pop	r14
    13e2:	cf 90       	pop	r12
    13e4:	bf 90       	pop	r11
    13e6:	af 90       	pop	r10
    13e8:	8f 90       	pop	r8
    13ea:	08 95       	ret

000013ec <mutex_init_isr>:
    mutex_t * mutex
#ifdef CONFIG_USE_HIGHEST_LOCKER
    ,prio_t prio
#endif // CONFIG_USE_HIGHEST_LOCKER
)
{
    13ec:	df 93       	push	r29
    13ee:	cf 93       	push	r28
    13f0:	00 d0       	rcall	.+0      	; 0x13f2 <mutex_init_isr+0x6>
    13f2:	0f 92       	push	r0
    13f4:	cd b7       	in	r28, 0x3d	; 61
    13f6:	de b7       	in	r29, 0x3e	; 62
    13f8:	9a 83       	std	Y+2, r25	; 0x02
    13fa:	89 83       	std	Y+1, r24	; 0x01
    13fc:	6b 83       	std	Y+3, r22	; 0x03
    xlist_init( (xlist_t *)mutex );
    13fe:	89 81       	ldd	r24, Y+1	; 0x01
    1400:	9a 81       	ldd	r25, Y+2	; 0x02
    1402:	0e 94 cf 10 	call	0x219e	; 0x219e <xlist_init>
    mutex->free = (bool_t)1;
    1406:	e9 81       	ldd	r30, Y+1	; 0x01
    1408:	fa 81       	ldd	r31, Y+2	; 0x02
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	82 8b       	std	Z+18, r24	; 0x12
#ifdef CONFIG_USE_HIGHEST_LOCKER
    mutex->prio = prio;
    140e:	e9 81       	ldd	r30, Y+1	; 0x01
    1410:	fa 81       	ldd	r31, Y+2	; 0x02
    1412:	8b 81       	ldd	r24, Y+3	; 0x03
    1414:	81 8b       	std	Z+17, r24	; 0x11
#endif // CONFIG_USE_HIGHEST_LOCKER
}
    1416:	0f 90       	pop	r0
    1418:	0f 90       	pop	r0
    141a:	0f 90       	pop	r0
    141c:	cf 91       	pop	r28
    141e:	df 91       	pop	r29
    1420:	08 95       	ret

00001422 <_mutex_lock>:

// К моменту вызова захвачена блокировка mutex-а, запрещены прерывания
bool_t _mutex_lock( mutex_t * mutex )
{
    1422:	df 93       	push	r29
    1424:	cf 93       	push	r28
    1426:	00 d0       	rcall	.+0      	; 0x1428 <_mutex_lock+0x6>
    1428:	00 d0       	rcall	.+0      	; 0x142a <_mutex_lock+0x8>
    142a:	0f 92       	push	r0
    142c:	cd b7       	in	r28, 0x3d	; 61
    142e:	de b7       	in	r29, 0x3e	; 62
    1430:	9d 83       	std	Y+5, r25	; 0x05
    1432:	8c 83       	std	Y+4, r24	; 0x04
    bool_t ret = mutex->free;
    1434:	ec 81       	ldd	r30, Y+4	; 0x04
    1436:	fd 81       	ldd	r31, Y+5	; 0x05
    1438:	82 89       	ldd	r24, Z+18	; 0x12
    143a:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = current_proc();
    143c:	0e 94 cc 00 	call	0x198	; 0x198 <current_proc>
    1440:	9a 83       	std	Y+2, r25	; 0x02
    1442:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
#ifdef CONFIG_USE_HIGHEST_LOCKER
    _proc_lres_inc( proc, mutex->prio );
    1444:	ec 81       	ldd	r30, Y+4	; 0x04
    1446:	fd 81       	ldd	r31, Y+5	; 0x05
    1448:	21 89       	ldd	r18, Z+17	; 0x11
    144a:	89 81       	ldd	r24, Y+1	; 0x01
    144c:	9a 81       	ldd	r25, Y+2	; 0x02
    144e:	62 2f       	mov	r22, r18
    1450:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <_proc_lres_inc>
#else // !CONFIG_USE_HIGHEST_LOCKER
    _proc_lres_inc( proc );
#endif // CONFIG_USE_HIGHEST_LOCKER
    if( ret )
    1454:	8b 81       	ldd	r24, Y+3	; 0x03
    1456:	88 23       	and	r24, r24
    1458:	41 f0       	breq	.+16     	; 0x146a <_mutex_lock+0x48>
    {
        mutex->free = (bool_t)0;
    145a:	ec 81       	ldd	r30, Y+4	; 0x04
    145c:	fd 81       	ldd	r31, Y+5	; 0x05
    145e:	12 8a       	std	Z+18, r1	; 0x12
#ifdef CONFIG_USE_HIGHEST_LOCKER
        // Меняем приоритет только здесь
        _proc_prio_control_running( proc );
    1460:	89 81       	ldd	r24, Y+1	; 0x01
    1462:	9a 81       	ldd	r25, Y+2	; 0x02
    1464:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <_proc_prio_control_running>
    1468:	1b c0       	rjmp	.+54     	; 0x14a0 <_mutex_lock+0x7e>
#endif // CONFIG_USE_HIGHEST_LOCKER
    }
    else
    {
        proc->flags |= PROC_FLG_QUEUE;
    146a:	e9 81       	ldd	r30, Y+1	; 0x01
    146c:	fa 81       	ldd	r31, Y+2	; 0x02
    146e:	83 85       	ldd	r24, Z+11	; 0x0b
    1470:	88 60       	ori	r24, 0x08	; 8
    1472:	e9 81       	ldd	r30, Y+1	; 0x01
    1474:	fa 81       	ldd	r31, Y+2	; 0x02
    1476:	83 87       	std	Z+11, r24	; 0x0b
        proc->flags &= ~PROC_FLG_RUN;
    1478:	e9 81       	ldd	r30, Y+1	; 0x01
    147a:	fa 81       	ldd	r31, Y+2	; 0x02
    147c:	83 85       	ldd	r24, Z+11	; 0x0b
    147e:	8d 7f       	andi	r24, 0xFD	; 253
    1480:	e9 81       	ldd	r30, Y+1	; 0x01
    1482:	fa 81       	ldd	r31, Y+2	; 0x02
    1484:	83 87       	std	Z+11, r24	; 0x0b
        _proc_stop_( proc );
    1486:	89 81       	ldd	r24, Y+1	; 0x01
    1488:	9a 81       	ldd	r25, Y+2	; 0x02
    148a:	0e 94 de 07 	call	0xfbc	; 0xfbc <gitem_cut>
        gitem_insert( (gitem_t *)proc, (xlist_t *)mutex );
    148e:	89 81       	ldd	r24, Y+1	; 0x01
    1490:	9a 81       	ldd	r25, Y+2	; 0x02
    1492:	2c 81       	ldd	r18, Y+4	; 0x04
    1494:	3d 81       	ldd	r19, Y+5	; 0x05
    1496:	b9 01       	movw	r22, r18
    1498:	0e 94 81 06 	call	0xd02	; 0xd02 <gitem_insert>
        // Нужна перепланировка
#ifdef CONFIG_MP
        resched( proc->core_id );
#else
        resched();
    149c:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
#endif // CONFIG_MP
    }
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    return ret;
    14a0:	8b 81       	ldd	r24, Y+3	; 0x03
}
    14a2:	0f 90       	pop	r0
    14a4:	0f 90       	pop	r0
    14a6:	0f 90       	pop	r0
    14a8:	0f 90       	pop	r0
    14aa:	0f 90       	pop	r0
    14ac:	cf 91       	pop	r28
    14ae:	df 91       	pop	r29
    14b0:	08 95       	ret

000014b2 <_mutex_try_lock>:

bool_t _mutex_try_lock( mutex_t * mutex )
{
    14b2:	df 93       	push	r29
    14b4:	cf 93       	push	r28
    14b6:	00 d0       	rcall	.+0      	; 0x14b8 <_mutex_try_lock+0x6>
    14b8:	00 d0       	rcall	.+0      	; 0x14ba <_mutex_try_lock+0x8>
    14ba:	0f 92       	push	r0
    14bc:	cd b7       	in	r28, 0x3d	; 61
    14be:	de b7       	in	r29, 0x3e	; 62
    14c0:	9d 83       	std	Y+5, r25	; 0x05
    14c2:	8c 83       	std	Y+4, r24	; 0x04
    bool_t ret = mutex->free;
    14c4:	ec 81       	ldd	r30, Y+4	; 0x04
    14c6:	fd 81       	ldd	r31, Y+5	; 0x05
    14c8:	82 89       	ldd	r24, Z+18	; 0x12
    14ca:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = current_proc();
    14cc:	0e 94 cc 00 	call	0x198	; 0x198 <current_proc>
    14d0:	9a 83       	std	Y+2, r25	; 0x02
    14d2:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    if( ret )
    14d4:	8b 81       	ldd	r24, Y+3	; 0x03
    14d6:	88 23       	and	r24, r24
    14d8:	79 f0       	breq	.+30     	; 0x14f8 <_mutex_try_lock+0x46>
    {
        mutex->free = (bool_t)0;
    14da:	ec 81       	ldd	r30, Y+4	; 0x04
    14dc:	fd 81       	ldd	r31, Y+5	; 0x05
    14de:	12 8a       	std	Z+18, r1	; 0x12
#ifdef CONFIG_USE_HIGHEST_LOCKER
        _proc_lres_inc( proc, mutex->prio );
    14e0:	ec 81       	ldd	r30, Y+4	; 0x04
    14e2:	fd 81       	ldd	r31, Y+5	; 0x05
    14e4:	21 89       	ldd	r18, Z+17	; 0x11
    14e6:	89 81       	ldd	r24, Y+1	; 0x01
    14e8:	9a 81       	ldd	r25, Y+2	; 0x02
    14ea:	62 2f       	mov	r22, r18
    14ec:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <_proc_lres_inc>
        _proc_prio_control_running( proc );
    14f0:	89 81       	ldd	r24, Y+1	; 0x01
    14f2:	9a 81       	ldd	r25, Y+2	; 0x02
    14f4:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <_proc_prio_control_running>
#endif // CONFIG_USE_HIGHEST_LOCKER
    }
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    return ret;
    14f8:	8b 81       	ldd	r24, Y+3	; 0x03
}
    14fa:	0f 90       	pop	r0
    14fc:	0f 90       	pop	r0
    14fe:	0f 90       	pop	r0
    1500:	0f 90       	pop	r0
    1502:	0f 90       	pop	r0
    1504:	cf 91       	pop	r28
    1506:	df 91       	pop	r29
    1508:	08 95       	ret

0000150a <_mutex_unlock>:

void _mutex_unlock( mutex_t *  mutex )
{
    150a:	df 93       	push	r29
    150c:	cf 93       	push	r28
    150e:	00 d0       	rcall	.+0      	; 0x1510 <_mutex_unlock+0x6>
    1510:	00 d0       	rcall	.+0      	; 0x1512 <_mutex_unlock+0x8>
    1512:	cd b7       	in	r28, 0x3d	; 61
    1514:	de b7       	in	r29, 0x3e	; 62
    1516:	9c 83       	std	Y+4, r25	; 0x04
    1518:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = current_proc();
    151a:	0e 94 cc 00 	call	0x198	; 0x198 <current_proc>
    151e:	9a 83       	std	Y+2, r25	; 0x02
    1520:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
#ifdef CONFIG_USE_HIGHEST_LOCKER

    _proc_lres_dec( proc, mutex->prio );
    1522:	eb 81       	ldd	r30, Y+3	; 0x03
    1524:	fc 81       	ldd	r31, Y+4	; 0x04
    1526:	21 89       	ldd	r18, Z+17	; 0x11
    1528:	89 81       	ldd	r24, Y+1	; 0x01
    152a:	9a 81       	ldd	r25, Y+2	; 0x02
    152c:	62 2f       	mov	r22, r18
    152e:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <_proc_lres_dec>
    // Если проготовлен и готов к остановке - останавливаем
    if(  ( proc->flags & PROC_FLG_PRE_END ) && (!(proc->flags & PROC_FLG_HOLD))  )
    1532:	e9 81       	ldd	r30, Y+1	; 0x01
    1534:	fa 81       	ldd	r31, Y+2	; 0x02
    1536:	83 85       	ldd	r24, Z+11	; 0x0b
    1538:	88 2f       	mov	r24, r24
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	80 72       	andi	r24, 0x20	; 32
    153e:	90 70       	andi	r25, 0x00	; 0
    1540:	00 97       	sbiw	r24, 0x00	; 0
    1542:	a1 f0       	breq	.+40     	; 0x156c <_mutex_unlock+0x62>
    1544:	e9 81       	ldd	r30, Y+1	; 0x01
    1546:	fa 81       	ldd	r31, Y+2	; 0x02
    1548:	83 85       	ldd	r24, Z+11	; 0x0b
    154a:	88 2f       	mov	r24, r24
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	84 70       	andi	r24, 0x04	; 4
    1550:	90 70       	andi	r25, 0x00	; 0
    1552:	00 97       	sbiw	r24, 0x00	; 0
    1554:	59 f4       	brne	.+22     	; 0x156c <_mutex_unlock+0x62>
    {
        _proc_stop_( proc );
    1556:	89 81       	ldd	r24, Y+1	; 0x01
    1558:	9a 81       	ldd	r25, Y+2	; 0x02
    155a:	0e 94 de 07 	call	0xfbc	; 0xfbc <gitem_cut>
        _proc_prio_control_stoped( proc );
    155e:	89 81       	ldd	r24, Y+1	; 0x01
    1560:	9a 81       	ldd	r25, Y+2	; 0x02
    1562:	0e 94 67 0d 	call	0x1ace	; 0x1ace <_proc_prio_control_stoped>
        // Нужна перепланировка, процесс остановили и не запустили обратно
#ifdef CONFIG_MP
        resched( proc->core_id );
#else
        resched();
    1566:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
    156a:	04 c0       	rjmp	.+8      	; 0x1574 <_mutex_unlock+0x6a>
#endif // CONFIG_MP
    }
    // Не останавливаем - меняем проиритет на ходу
    else _proc_prio_control_running( proc );
    156c:	89 81       	ldd	r24, Y+1	; 0x01
    156e:	9a 81       	ldd	r25, Y+2	; 0x02
    1570:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <_proc_prio_control_running>
#endif // CONFIG_USE_HIGHEST_LOCKER
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    // Обрабока самого мьютекса
    if( ((xlist_t *)mutex)->index == (index_t)0  )
    1574:	eb 81       	ldd	r30, Y+3	; 0x03
    1576:	fc 81       	ldd	r31, Y+4	; 0x04
    1578:	80 89       	ldd	r24, Z+16	; 0x10
    157a:	88 23       	and	r24, r24
    157c:	29 f4       	brne	.+10     	; 0x1588 <_mutex_unlock+0x7e>
    {
        // Список ожидающих пуст, выходим
        mutex->free = (bool_t)1;
    157e:	eb 81       	ldd	r30, Y+3	; 0x03
    1580:	fc 81       	ldd	r31, Y+4	; 0x04
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	82 8b       	std	Z+18, r24	; 0x12
    1586:	19 c0       	rjmp	.+50     	; 0x15ba <_mutex_unlock+0xb0>
        return;
    }
    // Список ожидающих не пуст, запускаем голову
    proc = (proc_t *)xlist_head((xlist_t *)mutex);
    1588:	8b 81       	ldd	r24, Y+3	; 0x03
    158a:	9c 81       	ldd	r25, Y+4	; 0x04
    158c:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <xlist_head>
    1590:	9a 83       	std	Y+2, r25	; 0x02
    1592:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    // Сначала надо вырезать
    proc->flags &= ~PROC_FLG_QUEUE;
    1594:	e9 81       	ldd	r30, Y+1	; 0x01
    1596:	fa 81       	ldd	r31, Y+2	; 0x02
    1598:	83 85       	ldd	r24, Z+11	; 0x0b
    159a:	87 7f       	andi	r24, 0xF7	; 247
    159c:	e9 81       	ldd	r30, Y+1	; 0x01
    159e:	fa 81       	ldd	r31, Y+2	; 0x02
    15a0:	83 87       	std	Z+11, r24	; 0x0b
    gitem_cut( (gitem_t *)proc );
    15a2:	89 81       	ldd	r24, Y+1	; 0x01
    15a4:	9a 81       	ldd	r25, Y+2	; 0x02
    15a6:	0e 94 de 07 	call	0xfbc	; 0xfbc <gitem_cut>
#ifdef CONFIG_USE_HIGHEST_LOCKER
    // Меняем приоритет
    _proc_prio_control_stoped( proc );
    15aa:	89 81       	ldd	r24, Y+1	; 0x01
    15ac:	9a 81       	ldd	r25, Y+2	; 0x02
    15ae:	0e 94 67 0d 	call	0x1ace	; 0x1ace <_proc_prio_control_stoped>
#endif // CONFIG_USE_HIGHEST_LOCKER
    _proc_run( proc );
    15b2:	89 81       	ldd	r24, Y+1	; 0x01
    15b4:	9a 81       	ldd	r25, Y+2	; 0x02
    15b6:	0e 94 1f 0c 	call	0x183e	; 0x183e <_proc_run>
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
}
    15ba:	0f 90       	pop	r0
    15bc:	0f 90       	pop	r0
    15be:	0f 90       	pop	r0
    15c0:	0f 90       	pop	r0
    15c2:	cf 91       	pop	r28
    15c4:	df 91       	pop	r29
    15c6:	08 95       	ret

000015c8 <pcounter_init>:
*                           http://www.0chan.ru/r/res/9996.html                          *
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
void pcounter_init(pcounter_t * pcounter)
{
    15c8:	df 93       	push	r29
    15ca:	cf 93       	push	r28
    15cc:	00 d0       	rcall	.+0      	; 0x15ce <pcounter_init+0x6>
    15ce:	0f 92       	push	r0
    15d0:	cd b7       	in	r28, 0x3d	; 61
    15d2:	de b7       	in	r29, 0x3e	; 62
    15d4:	9b 83       	std	Y+3, r25	; 0x03
    15d6:	8a 83       	std	Y+2, r24	; 0x02
    prio_t p;
    pcounter->index = (index_t)0;
    15d8:	ea 81       	ldd	r30, Y+2	; 0x02
    15da:	fb 81       	ldd	r31, Y+3	; 0x03
    15dc:	10 8a       	std	Z+16, r1	; 0x10
    for(p = 0; p < (index_t)BITS_IN_INDEX_T; p++)pcounter->counter[p] = (count_t)0;
    15de:	19 82       	std	Y+1, r1	; 0x01
    15e0:	0f c0       	rjmp	.+30     	; 0x1600 <pcounter_init+0x38>
    15e2:	89 81       	ldd	r24, Y+1	; 0x01
    15e4:	88 2f       	mov	r24, r24
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	2a 81       	ldd	r18, Y+2	; 0x02
    15ea:	3b 81       	ldd	r19, Y+3	; 0x03
    15ec:	88 0f       	add	r24, r24
    15ee:	99 1f       	adc	r25, r25
    15f0:	f9 01       	movw	r30, r18
    15f2:	e8 0f       	add	r30, r24
    15f4:	f9 1f       	adc	r31, r25
    15f6:	11 82       	std	Z+1, r1	; 0x01
    15f8:	10 82       	st	Z, r1
    15fa:	89 81       	ldd	r24, Y+1	; 0x01
    15fc:	8f 5f       	subi	r24, 0xFF	; 255
    15fe:	89 83       	std	Y+1, r24	; 0x01
    1600:	89 81       	ldd	r24, Y+1	; 0x01
    1602:	88 30       	cpi	r24, 0x08	; 8
    1604:	70 f3       	brcs	.-36     	; 0x15e2 <pcounter_init+0x1a>
}
    1606:	0f 90       	pop	r0
    1608:	0f 90       	pop	r0
    160a:	0f 90       	pop	r0
    160c:	cf 91       	pop	r28
    160e:	df 91       	pop	r29
    1610:	08 95       	ret

00001612 <pcounter_inc>:

void pcounter_inc(pcounter_t * pcounter, prio_t prio)
{
    1612:	df 93       	push	r29
    1614:	cf 93       	push	r28
    1616:	00 d0       	rcall	.+0      	; 0x1618 <pcounter_inc+0x6>
    1618:	0f 92       	push	r0
    161a:	cd b7       	in	r28, 0x3d	; 61
    161c:	de b7       	in	r29, 0x3e	; 62
    161e:	9a 83       	std	Y+2, r25	; 0x02
    1620:	89 83       	std	Y+1, r24	; 0x01
    1622:	6b 83       	std	Y+3, r22	; 0x03
    pcounter->counter[prio]++;
    1624:	8b 81       	ldd	r24, Y+3	; 0x03
    1626:	68 2f       	mov	r22, r24
    1628:	70 e0       	ldi	r23, 0x00	; 0
    162a:	29 81       	ldd	r18, Y+1	; 0x01
    162c:	3a 81       	ldd	r19, Y+2	; 0x02
    162e:	cb 01       	movw	r24, r22
    1630:	88 0f       	add	r24, r24
    1632:	99 1f       	adc	r25, r25
    1634:	f9 01       	movw	r30, r18
    1636:	e8 0f       	add	r30, r24
    1638:	f9 1f       	adc	r31, r25
    163a:	80 81       	ld	r24, Z
    163c:	91 81       	ldd	r25, Z+1	; 0x01
    163e:	ac 01       	movw	r20, r24
    1640:	4f 5f       	subi	r20, 0xFF	; 255
    1642:	5f 4f       	sbci	r21, 0xFF	; 255
    1644:	29 81       	ldd	r18, Y+1	; 0x01
    1646:	3a 81       	ldd	r19, Y+2	; 0x02
    1648:	cb 01       	movw	r24, r22
    164a:	88 0f       	add	r24, r24
    164c:	99 1f       	adc	r25, r25
    164e:	f9 01       	movw	r30, r18
    1650:	e8 0f       	add	r30, r24
    1652:	f9 1f       	adc	r31, r25
    1654:	51 83       	std	Z+1, r21	; 0x01
    1656:	40 83       	st	Z, r20
    pcounter->index |= ((index_t)1)<<prio;
    1658:	e9 81       	ldd	r30, Y+1	; 0x01
    165a:	fa 81       	ldd	r31, Y+2	; 0x02
    165c:	80 89       	ldd	r24, Z+16	; 0x10
    165e:	48 2f       	mov	r20, r24
    1660:	8b 81       	ldd	r24, Y+3	; 0x03
    1662:	28 2f       	mov	r18, r24
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	02 2e       	mov	r0, r18
    166c:	02 c0       	rjmp	.+4      	; 0x1672 <pcounter_inc+0x60>
    166e:	88 0f       	add	r24, r24
    1670:	99 1f       	adc	r25, r25
    1672:	0a 94       	dec	r0
    1674:	e2 f7       	brpl	.-8      	; 0x166e <pcounter_inc+0x5c>
    1676:	84 2b       	or	r24, r20
    1678:	e9 81       	ldd	r30, Y+1	; 0x01
    167a:	fa 81       	ldd	r31, Y+2	; 0x02
    167c:	80 8b       	std	Z+16, r24	; 0x10
}
    167e:	0f 90       	pop	r0
    1680:	0f 90       	pop	r0
    1682:	0f 90       	pop	r0
    1684:	cf 91       	pop	r28
    1686:	df 91       	pop	r29
    1688:	08 95       	ret

0000168a <pcounter_dec>:

index_t pcounter_dec(pcounter_t * pcounter, prio_t prio)
{
    168a:	df 93       	push	r29
    168c:	cf 93       	push	r28
    168e:	00 d0       	rcall	.+0      	; 0x1690 <pcounter_dec+0x6>
    1690:	00 d0       	rcall	.+0      	; 0x1692 <pcounter_dec+0x8>
    1692:	cd b7       	in	r28, 0x3d	; 61
    1694:	de b7       	in	r29, 0x3e	; 62
    1696:	9b 83       	std	Y+3, r25	; 0x03
    1698:	8a 83       	std	Y+2, r24	; 0x02
    169a:	6c 83       	std	Y+4, r22	; 0x04
    index_t mask = ((index_t)1)<<prio;
    169c:	8c 81       	ldd	r24, Y+4	; 0x04
    169e:	28 2f       	mov	r18, r24
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	02 c0       	rjmp	.+4      	; 0x16ac <pcounter_dec+0x22>
    16a8:	88 0f       	add	r24, r24
    16aa:	99 1f       	adc	r25, r25
    16ac:	2a 95       	dec	r18
    16ae:	e2 f7       	brpl	.-8      	; 0x16a8 <pcounter_dec+0x1e>
    16b0:	89 83       	std	Y+1, r24	; 0x01
    pcounter->counter[prio]--;
    16b2:	8c 81       	ldd	r24, Y+4	; 0x04
    16b4:	68 2f       	mov	r22, r24
    16b6:	70 e0       	ldi	r23, 0x00	; 0
    16b8:	2a 81       	ldd	r18, Y+2	; 0x02
    16ba:	3b 81       	ldd	r19, Y+3	; 0x03
    16bc:	cb 01       	movw	r24, r22
    16be:	88 0f       	add	r24, r24
    16c0:	99 1f       	adc	r25, r25
    16c2:	f9 01       	movw	r30, r18
    16c4:	e8 0f       	add	r30, r24
    16c6:	f9 1f       	adc	r31, r25
    16c8:	80 81       	ld	r24, Z
    16ca:	91 81       	ldd	r25, Z+1	; 0x01
    16cc:	ac 01       	movw	r20, r24
    16ce:	41 50       	subi	r20, 0x01	; 1
    16d0:	50 40       	sbci	r21, 0x00	; 0
    16d2:	2a 81       	ldd	r18, Y+2	; 0x02
    16d4:	3b 81       	ldd	r19, Y+3	; 0x03
    16d6:	cb 01       	movw	r24, r22
    16d8:	88 0f       	add	r24, r24
    16da:	99 1f       	adc	r25, r25
    16dc:	f9 01       	movw	r30, r18
    16de:	e8 0f       	add	r30, r24
    16e0:	f9 1f       	adc	r31, r25
    16e2:	51 83       	std	Z+1, r21	; 0x01
    16e4:	40 83       	st	Z, r20
    if(pcounter->counter[prio] == (count_t)0)pcounter->index &= ~mask;
    16e6:	8c 81       	ldd	r24, Y+4	; 0x04
    16e8:	88 2f       	mov	r24, r24
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	2a 81       	ldd	r18, Y+2	; 0x02
    16ee:	3b 81       	ldd	r19, Y+3	; 0x03
    16f0:	88 0f       	add	r24, r24
    16f2:	99 1f       	adc	r25, r25
    16f4:	f9 01       	movw	r30, r18
    16f6:	e8 0f       	add	r30, r24
    16f8:	f9 1f       	adc	r31, r25
    16fa:	80 81       	ld	r24, Z
    16fc:	91 81       	ldd	r25, Z+1	; 0x01
    16fe:	00 97       	sbiw	r24, 0x00	; 0
    1700:	51 f4       	brne	.+20     	; 0x1716 <pcounter_dec+0x8c>
    1702:	ea 81       	ldd	r30, Y+2	; 0x02
    1704:	fb 81       	ldd	r31, Y+3	; 0x03
    1706:	80 89       	ldd	r24, Z+16	; 0x10
    1708:	98 2f       	mov	r25, r24
    170a:	89 81       	ldd	r24, Y+1	; 0x01
    170c:	80 95       	com	r24
    170e:	89 23       	and	r24, r25
    1710:	ea 81       	ldd	r30, Y+2	; 0x02
    1712:	fb 81       	ldd	r31, Y+3	; 0x03
    1714:	80 8b       	std	Z+16, r24	; 0x10
    return pcounter->index & mask;
    1716:	ea 81       	ldd	r30, Y+2	; 0x02
    1718:	fb 81       	ldd	r31, Y+3	; 0x03
    171a:	90 89       	ldd	r25, Z+16	; 0x10
    171c:	89 81       	ldd	r24, Y+1	; 0x01
    171e:	89 23       	and	r24, r25
}
    1720:	0f 90       	pop	r0
    1722:	0f 90       	pop	r0
    1724:	0f 90       	pop	r0
    1726:	0f 90       	pop	r0
    1728:	cf 91       	pop	r28
    172a:	df 91       	pop	r29
    172c:	08 95       	ret

0000172e <proc_init_isr>:
    bool_t is_rt // если true, значит процесс будет иметть поведение RT
#ifdef CONFIG_MP
    ,affinity_t affinity
#endif // CONFIG_MP
)
{
    172e:	8f 92       	push	r8
    1730:	af 92       	push	r10
    1732:	bf 92       	push	r11
    1734:	cf 92       	push	r12
    1736:	ef 92       	push	r14
    1738:	ff 92       	push	r15
    173a:	0f 93       	push	r16
    173c:	1f 93       	push	r17
    173e:	df 93       	push	r29
    1740:	cf 93       	push	r28
    1742:	cd b7       	in	r28, 0x3d	; 61
    1744:	de b7       	in	r29, 0x3e	; 62
    1746:	61 97       	sbiw	r28, 0x11	; 17
    1748:	0f b6       	in	r0, 0x3f	; 63
    174a:	f8 94       	cli
    174c:	de bf       	out	0x3e, r29	; 62
    174e:	0f be       	out	0x3f, r0	; 63
    1750:	cd bf       	out	0x3d, r28	; 61
    1752:	9a 83       	std	Y+2, r25	; 0x02
    1754:	89 83       	std	Y+1, r24	; 0x01
    1756:	7c 83       	std	Y+4, r23	; 0x04
    1758:	6b 83       	std	Y+3, r22	; 0x03
    175a:	5e 83       	std	Y+6, r21	; 0x06
    175c:	4d 83       	std	Y+5, r20	; 0x05
    175e:	38 87       	std	Y+8, r19	; 0x08
    1760:	2f 83       	std	Y+7, r18	; 0x07
    1762:	1a 87       	std	Y+10, r17	; 0x0a
    1764:	09 87       	std	Y+9, r16	; 0x09
    1766:	fc 86       	std	Y+12, r15	; 0x0c
    1768:	eb 86       	std	Y+11, r14	; 0x0b
    176a:	cd 86       	std	Y+13, r12	; 0x0d
    176c:	bf 86       	std	Y+15, r11	; 0x0f
    176e:	ae 86       	std	Y+14, r10	; 0x0e
    1770:	88 8a       	std	Y+16, r8	; 0x10
    gitem_init( (gitem_t *)proc, prio );
    1772:	89 81       	ldd	r24, Y+1	; 0x01
    1774:	9a 81       	ldd	r25, Y+2	; 0x02
    1776:	6d 85       	ldd	r22, Y+13	; 0x0d
    1778:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <gitem_init>
    proc->flags = ( is_rt )?PROC_FLG_RT:(flag_t)0;
    177c:	88 89       	ldd	r24, Y+16	; 0x10
    177e:	89 8b       	std	Y+17, r24	; 0x11
    1780:	89 89       	ldd	r24, Y+17	; 0x11
    1782:	88 23       	and	r24, r24
    1784:	11 f0       	breq	.+4      	; 0x178a <proc_init_isr+0x5c>
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	89 8b       	std	Y+17, r24	; 0x11
    178a:	89 89       	ldd	r24, Y+17	; 0x11
    178c:	e9 81       	ldd	r30, Y+1	; 0x01
    178e:	fa 81       	ldd	r31, Y+2	; 0x02
    1790:	83 87       	std	Z+11, r24	; 0x0b
#ifdef CONFIG_USE_HIGHEST_LOCKER
    pcounter_init(&proc->lres);
    1792:	89 81       	ldd	r24, Y+1	; 0x01
    1794:	9a 81       	ldd	r25, Y+2	; 0x02
    1796:	0d 96       	adiw	r24, 0x0d	; 13
    1798:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <pcounter_init>
    proc->base_prio = prio;
    179c:	e9 81       	ldd	r30, Y+1	; 0x01
    179e:	fa 81       	ldd	r31, Y+2	; 0x02
    17a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    17a2:	84 87       	std	Z+12, r24	; 0x0c
#else
    proc->lres = (count_t)0;
#endif
    proc->time_quant = time_quant;
    17a4:	e9 81       	ldd	r30, Y+1	; 0x01
    17a6:	fa 81       	ldd	r31, Y+2	; 0x02
    17a8:	8e 85       	ldd	r24, Y+14	; 0x0e
    17aa:	9f 85       	ldd	r25, Y+15	; 0x0f
    17ac:	97 8f       	std	Z+31, r25	; 0x1f
    17ae:	86 8f       	std	Z+30, r24	; 0x1e
    proc->timer = time_quant;
    17b0:	e9 81       	ldd	r30, Y+1	; 0x01
    17b2:	fa 81       	ldd	r31, Y+2	; 0x02
    17b4:	8e 85       	ldd	r24, Y+14	; 0x0e
    17b6:	9f 85       	ldd	r25, Y+15	; 0x0f
    17b8:	91 a3       	std	Z+33, r25	; 0x21
    17ba:	80 a3       	std	Z+32, r24	; 0x20
#ifdef CONFIG_MP
    proc->core_id = (core_id_t)0;
    proc->affinity = affinity;
#endif // CONFIG_MP
    proc->pmain = pmain;
    17bc:	e9 81       	ldd	r30, Y+1	; 0x01
    17be:	fa 81       	ldd	r31, Y+2	; 0x02
    17c0:	8b 81       	ldd	r24, Y+3	; 0x03
    17c2:	9c 81       	ldd	r25, Y+4	; 0x04
    17c4:	93 a3       	std	Z+35, r25	; 0x23
    17c6:	82 a3       	std	Z+34, r24	; 0x22
    proc->sv_hook = sv_hook;
    17c8:	e9 81       	ldd	r30, Y+1	; 0x01
    17ca:	fa 81       	ldd	r31, Y+2	; 0x02
    17cc:	8d 81       	ldd	r24, Y+5	; 0x05
    17ce:	9e 81       	ldd	r25, Y+6	; 0x06
    17d0:	95 a3       	std	Z+37, r25	; 0x25
    17d2:	84 a3       	std	Z+36, r24	; 0x24
    proc->rs_hook = rs_hook;
    17d4:	e9 81       	ldd	r30, Y+1	; 0x01
    17d6:	fa 81       	ldd	r31, Y+2	; 0x02
    17d8:	8f 81       	ldd	r24, Y+7	; 0x07
    17da:	98 85       	ldd	r25, Y+8	; 0x08
    17dc:	97 a3       	std	Z+39, r25	; 0x27
    17de:	86 a3       	std	Z+38, r24	; 0x26
    proc->arg = arg;
    17e0:	e9 81       	ldd	r30, Y+1	; 0x01
    17e2:	fa 81       	ldd	r31, Y+2	; 0x02
    17e4:	89 85       	ldd	r24, Y+9	; 0x09
    17e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17e8:	91 a7       	std	Z+41, r25	; 0x29
    17ea:	80 a7       	std	Z+40, r24	; 0x28
    proc->sstart = sstart;
    17ec:	e9 81       	ldd	r30, Y+1	; 0x01
    17ee:	fa 81       	ldd	r31, Y+2	; 0x02
    17f0:	8b 85       	ldd	r24, Y+11	; 0x0b
    17f2:	9c 85       	ldd	r25, Y+12	; 0x0c
    17f4:	93 a7       	std	Z+43, r25	; 0x2b
    17f6:	82 a7       	std	Z+42, r24	; 0x2a
    if( sstart )proc->spointer = proc_stack_init(sstart, (code_t)proc_run_wrapper, (void *)proc);
    17f8:	8b 85       	ldd	r24, Y+11	; 0x0b
    17fa:	9c 85       	ldd	r25, Y+12	; 0x0c
    17fc:	00 97       	sbiw	r24, 0x00	; 0
    17fe:	71 f0       	breq	.+28     	; 0x181c <proc_init_isr+0xee>
    1800:	4c e5       	ldi	r20, 0x5C	; 92
    1802:	53 e0       	ldi	r21, 0x03	; 3
    1804:	8b 85       	ldd	r24, Y+11	; 0x0b
    1806:	9c 85       	ldd	r25, Y+12	; 0x0c
    1808:	29 81       	ldd	r18, Y+1	; 0x01
    180a:	3a 81       	ldd	r19, Y+2	; 0x02
    180c:	ba 01       	movw	r22, r20
    180e:	a9 01       	movw	r20, r18
    1810:	0e 94 d7 00 	call	0x1ae	; 0x1ae <proc_stack_init>
    1814:	e9 81       	ldd	r30, Y+1	; 0x01
    1816:	fa 81       	ldd	r31, Y+2	; 0x02
    1818:	95 a7       	std	Z+45, r25	; 0x2d
    181a:	84 a7       	std	Z+44, r24	; 0x2c
}
    181c:	61 96       	adiw	r28, 0x11	; 17
    181e:	0f b6       	in	r0, 0x3f	; 63
    1820:	f8 94       	cli
    1822:	de bf       	out	0x3e, r29	; 62
    1824:	0f be       	out	0x3f, r0	; 63
    1826:	cd bf       	out	0x3d, r28	; 61
    1828:	cf 91       	pop	r28
    182a:	df 91       	pop	r29
    182c:	1f 91       	pop	r17
    182e:	0f 91       	pop	r16
    1830:	ff 90       	pop	r15
    1832:	ef 90       	pop	r14
    1834:	cf 90       	pop	r12
    1836:	bf 90       	pop	r11
    1838:	af 90       	pop	r10
    183a:	8f 90       	pop	r8
    183c:	08 95       	ret

0000183e <_proc_run>:
    spin_unlock( &proc_sched->lock );
}
#endif // CONFIG_MP

void _proc_run( proc_t * proc )
{
    183e:	df 93       	push	r29
    1840:	cf 93       	push	r28
    1842:	00 d0       	rcall	.+0      	; 0x1844 <_proc_run+0x6>
    1844:	cd b7       	in	r28, 0x3d	; 61
    1846:	de b7       	in	r29, 0x3e	; 62
    1848:	9a 83       	std	Y+2, r25	; 0x02
    184a:	89 83       	std	Y+1, r24	; 0x01
    proc->flags |= PROC_FLG_RUN;
    184c:	e9 81       	ldd	r30, Y+1	; 0x01
    184e:	fa 81       	ldd	r31, Y+2	; 0x02
    1850:	83 85       	ldd	r24, Z+11	; 0x0b
    1852:	82 60       	ori	r24, 0x02	; 2
    1854:	e9 81       	ldd	r30, Y+1	; 0x01
    1856:	fa 81       	ldd	r31, Y+2	; 0x02
    1858:	83 87       	std	Z+11, r24	; 0x0b
    spin_lock( &kernel.stat_lock );
    proc->core_id = sched_load_balancer( proc, (stat_t *)kernel.stat );
    stat_inc( proc, (stat_t *)kernel.stat+proc->core_id );
    spin_unlock( &kernel.stat_lock );
#endif
    _proc_run_( proc );
    185a:	89 81       	ldd	r24, Y+1	; 0x01
    185c:	9a 81       	ldd	r25, Y+2	; 0x02
    185e:	20 91 a0 01 	lds	r18, 0x01A0
    1862:	30 91 a1 01 	lds	r19, 0x01A1
    1866:	b9 01       	movw	r22, r18
    1868:	0e 94 81 06 	call	0xd02	; 0xd02 <gitem_insert>
#ifdef CONFIG_MP
    resched( proc->core_id );
#else
    resched();
    186c:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
#endif // CONFIG_MP
}
    1870:	0f 90       	pop	r0
    1872:	0f 90       	pop	r0
    1874:	cf 91       	pop	r28
    1876:	df 91       	pop	r29
    1878:	08 95       	ret

0000187a <proc_run_isr>:
// Функция общего пользования - запуск процесса из обработчика прерывания, прерывания должны быть запрещены во время запуска
bool_t proc_run_isr(proc_t * proc)
{
    187a:	df 93       	push	r29
    187c:	cf 93       	push	r28
    187e:	00 d0       	rcall	.+0      	; 0x1880 <proc_run_isr+0x6>
    1880:	0f 92       	push	r0
    1882:	cd b7       	in	r28, 0x3d	; 61
    1884:	de b7       	in	r29, 0x3e	; 62
    1886:	9b 83       	std	Y+3, r25	; 0x03
    1888:	8a 83       	std	Y+2, r24	; 0x02
    bool_t ret = (bool_t)1;
    188a:	81 e0       	ldi	r24, 0x01	; 1
    188c:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    if( proc->flags & (PROC_FLG_RUN|PROC_FLG_QUEUE|PROC_FLG_WAIT|PROC_FLG_END|PROC_FLG_DEAD) )
    188e:	ea 81       	ldd	r30, Y+2	; 0x02
    1890:	fb 81       	ldd	r31, Y+3	; 0x03
    1892:	83 85       	ldd	r24, Z+11	; 0x0b
    1894:	88 2f       	mov	r24, r24
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	8a 7d       	andi	r24, 0xDA	; 218
    189a:	90 70       	andi	r25, 0x00	; 0
    189c:	00 97       	sbiw	r24, 0x00	; 0
    189e:	11 f0       	breq	.+4      	; 0x18a4 <proc_run_isr+0x2a>
    {
        ret = (bool_t)0;
    18a0:	19 82       	std	Y+1, r1	; 0x01
    18a2:	04 c0       	rjmp	.+8      	; 0x18ac <proc_run_isr+0x32>
        goto end;
    }
    _proc_run( proc );
    18a4:	8a 81       	ldd	r24, Y+2	; 0x02
    18a6:	9b 81       	ldd	r25, Y+3	; 0x03
    18a8:	0e 94 1f 0c 	call	0x183e	; 0x183e <_proc_run>
end:
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    return ret;
    18ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    18ae:	0f 90       	pop	r0
    18b0:	0f 90       	pop	r0
    18b2:	0f 90       	pop	r0
    18b4:	cf 91       	pop	r28
    18b6:	df 91       	pop	r29
    18b8:	08 95       	ret

000018ba <proc_restart_isr>:
// Перезепуск процесса из обработчика прерываний, прерывания должны быть запрещены
bool_t proc_restart_isr(proc_t * proc)
{
    18ba:	df 93       	push	r29
    18bc:	cf 93       	push	r28
    18be:	00 d0       	rcall	.+0      	; 0x18c0 <proc_restart_isr+0x6>
    18c0:	0f 92       	push	r0
    18c2:	cd b7       	in	r28, 0x3d	; 61
    18c4:	de b7       	in	r29, 0x3e	; 62
    18c6:	9b 83       	std	Y+3, r25	; 0x03
    18c8:	8a 83       	std	Y+2, r24	; 0x02
    bool_t ret = (bool_t)1;
    18ca:	81 e0       	ldi	r24, 0x01	; 1
    18cc:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif
    if( proc->flags & (PROC_FLG_RUN|PROC_FLG_HOLD|PROC_FLG_QUEUE|PROC_FLG_WAIT|PROC_FLG_PRE_END|PROC_FLG_DEAD) )
    18ce:	ea 81       	ldd	r30, Y+2	; 0x02
    18d0:	fb 81       	ldd	r31, Y+3	; 0x03
    18d2:	83 85       	ldd	r24, Z+11	; 0x0b
    18d4:	88 2f       	mov	r24, r24
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	8e 7b       	andi	r24, 0xBE	; 190
    18da:	90 70       	andi	r25, 0x00	; 0
    18dc:	00 97       	sbiw	r24, 0x00	; 0
    18de:	11 f0       	breq	.+4      	; 0x18e4 <proc_restart_isr+0x2a>
    {
        ret = (bool_t)0;
    18e0:	19 82       	std	Y+1, r1	; 0x01
    18e2:	2d c0       	rjmp	.+90     	; 0x193e <proc_restart_isr+0x84>
        goto end;
    }
    proc->flags = ( proc->flags & PROC_FLG_RT )?PROC_FLG_RT:(flag_t)0;
    18e4:	ea 81       	ldd	r30, Y+2	; 0x02
    18e6:	fb 81       	ldd	r31, Y+3	; 0x03
    18e8:	83 85       	ldd	r24, Z+11	; 0x0b
    18ea:	81 70       	andi	r24, 0x01	; 1
    18ec:	ea 81       	ldd	r30, Y+2	; 0x02
    18ee:	fb 81       	ldd	r31, Y+3	; 0x03
    18f0:	83 87       	std	Z+11, r24	; 0x0b
#ifdef CONFIG_USE_HIGHEST_LOCKER
    pcounter_init(&proc->lres);
    18f2:	8a 81       	ldd	r24, Y+2	; 0x02
    18f4:	9b 81       	ldd	r25, Y+3	; 0x03
    18f6:	0d 96       	adiw	r24, 0x0d	; 13
    18f8:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <pcounter_init>
#else
    proc->lres = (count_t)0;
#endif
    proc->timer = proc->time_quant;
    18fc:	ea 81       	ldd	r30, Y+2	; 0x02
    18fe:	fb 81       	ldd	r31, Y+3	; 0x03
    1900:	86 8d       	ldd	r24, Z+30	; 0x1e
    1902:	97 8d       	ldd	r25, Z+31	; 0x1f
    1904:	ea 81       	ldd	r30, Y+2	; 0x02
    1906:	fb 81       	ldd	r31, Y+3	; 0x03
    1908:	91 a3       	std	Z+33, r25	; 0x21
    190a:	80 a3       	std	Z+32, r24	; 0x20

    if( proc->sstart )proc->spointer = proc_stack_init( proc->sstart, (code_t)proc_run_wrapper, (void *)proc );
    190c:	ea 81       	ldd	r30, Y+2	; 0x02
    190e:	fb 81       	ldd	r31, Y+3	; 0x03
    1910:	82 a5       	ldd	r24, Z+42	; 0x2a
    1912:	93 a5       	ldd	r25, Z+43	; 0x2b
    1914:	00 97       	sbiw	r24, 0x00	; 0
    1916:	79 f0       	breq	.+30     	; 0x1936 <proc_restart_isr+0x7c>
    1918:	ea 81       	ldd	r30, Y+2	; 0x02
    191a:	fb 81       	ldd	r31, Y+3	; 0x03
    191c:	82 a5       	ldd	r24, Z+42	; 0x2a
    191e:	93 a5       	ldd	r25, Z+43	; 0x2b
    1920:	2c e5       	ldi	r18, 0x5C	; 92
    1922:	33 e0       	ldi	r19, 0x03	; 3
    1924:	4a 81       	ldd	r20, Y+2	; 0x02
    1926:	5b 81       	ldd	r21, Y+3	; 0x03
    1928:	b9 01       	movw	r22, r18
    192a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <proc_stack_init>
    192e:	ea 81       	ldd	r30, Y+2	; 0x02
    1930:	fb 81       	ldd	r31, Y+3	; 0x03
    1932:	95 a7       	std	Z+45, r25	; 0x2d
    1934:	84 a7       	std	Z+44, r24	; 0x2c
    _proc_run( proc );
    1936:	8a 81       	ldd	r24, Y+2	; 0x02
    1938:	9b 81       	ldd	r25, Y+3	; 0x03
    193a:	0e 94 1f 0c 	call	0x183e	; 0x183e <_proc_run>
end:
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif
    return ret;
    193e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1940:	0f 90       	pop	r0
    1942:	0f 90       	pop	r0
    1944:	0f 90       	pop	r0
    1946:	cf 91       	pop	r28
    1948:	df 91       	pop	r29
    194a:	08 95       	ret

0000194c <_proc_stop>:
        spin_unlock( xlist_lock );
    }
}
#endif // CONFIG_MP
void _proc_stop(proc_t * proc)
{
    194c:	df 93       	push	r29
    194e:	cf 93       	push	r28
    1950:	00 d0       	rcall	.+0      	; 0x1952 <_proc_stop+0x6>
    1952:	cd b7       	in	r28, 0x3d	; 61
    1954:	de b7       	in	r29, 0x3e	; 62
    1956:	9a 83       	std	Y+2, r25	; 0x02
    1958:	89 83       	std	Y+1, r24	; 0x01
    proc->flags &= ~PROC_FLG_RUN;
    195a:	e9 81       	ldd	r30, Y+1	; 0x01
    195c:	fa 81       	ldd	r31, Y+2	; 0x02
    195e:	83 85       	ldd	r24, Z+11	; 0x0b
    1960:	8d 7f       	andi	r24, 0xFD	; 253
    1962:	e9 81       	ldd	r30, Y+1	; 0x01
    1964:	fa 81       	ldd	r31, Y+2	; 0x02
    1966:	83 87       	std	Z+11, r24	; 0x0b
    _proc_stop_( proc );
    1968:	89 81       	ldd	r24, Y+1	; 0x01
    196a:	9a 81       	ldd	r25, Y+2	; 0x02
    196c:	0e 94 de 07 	call	0xfbc	; 0xfbc <gitem_cut>
#ifdef CONFIG_MP
    resched( proc->core_id );
#else
    resched();
    1970:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
#endif // CONFIG_MP
}
    1974:	0f 90       	pop	r0
    1976:	0f 90       	pop	r0
    1978:	cf 91       	pop	r28
    197a:	df 91       	pop	r29
    197c:	08 95       	ret

0000197e <proc_stop_isr>:
// Останов процесса из обработчика прерываний, прерывания должны быть запрещены
bool_t proc_stop_isr(proc_t * proc)
{
    197e:	df 93       	push	r29
    1980:	cf 93       	push	r28
    1982:	00 d0       	rcall	.+0      	; 0x1984 <proc_stop_isr+0x6>
    1984:	0f 92       	push	r0
    1986:	cd b7       	in	r28, 0x3d	; 61
    1988:	de b7       	in	r29, 0x3e	; 62
    198a:	9b 83       	std	Y+3, r25	; 0x03
    198c:	8a 83       	std	Y+2, r24	; 0x02
    bool_t ret = (bool_t)0;
    198e:	19 82       	std	Y+1, r1	; 0x01
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    //Проверка флагов
    //В случчае PROC_FLG_WAIT будем обрабатывать PROC_FLG_PRE_END на выходе из sig_wait.
    //В случае PROC_FLG_HOLD или PROC_FLG_QUEUE будем обрабатывать PROC_FLG_PRE_END на выходе из функции, освобождающей общий ресурс.
    if( proc->flags & (PROC_FLG_HOLD|PROC_FLG_QUEUE|PROC_FLG_WAIT) )proc->flags |= PROC_FLG_PRE_END;
    1990:	ea 81       	ldd	r30, Y+2	; 0x02
    1992:	fb 81       	ldd	r31, Y+3	; 0x03
    1994:	83 85       	ldd	r24, Z+11	; 0x0b
    1996:	88 2f       	mov	r24, r24
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	8c 71       	andi	r24, 0x1C	; 28
    199c:	90 70       	andi	r25, 0x00	; 0
    199e:	00 97       	sbiw	r24, 0x00	; 0
    19a0:	41 f0       	breq	.+16     	; 0x19b2 <proc_stop_isr+0x34>
    19a2:	ea 81       	ldd	r30, Y+2	; 0x02
    19a4:	fb 81       	ldd	r31, Y+3	; 0x03
    19a6:	83 85       	ldd	r24, Z+11	; 0x0b
    19a8:	80 62       	ori	r24, 0x20	; 32
    19aa:	ea 81       	ldd	r30, Y+2	; 0x02
    19ac:	fb 81       	ldd	r31, Y+3	; 0x03
    19ae:	83 87       	std	Z+11, r24	; 0x0b
    19b0:	0f c0       	rjmp	.+30     	; 0x19d0 <proc_stop_isr+0x52>
    else if( proc->flags & PROC_FLG_RUN )
    19b2:	ea 81       	ldd	r30, Y+2	; 0x02
    19b4:	fb 81       	ldd	r31, Y+3	; 0x03
    19b6:	83 85       	ldd	r24, Z+11	; 0x0b
    19b8:	88 2f       	mov	r24, r24
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	82 70       	andi	r24, 0x02	; 2
    19be:	90 70       	andi	r25, 0x00	; 0
    19c0:	00 97       	sbiw	r24, 0x00	; 0
    19c2:	31 f0       	breq	.+12     	; 0x19d0 <proc_stop_isr+0x52>
    {
        _proc_stop( proc );
    19c4:	8a 81       	ldd	r24, Y+2	; 0x02
    19c6:	9b 81       	ldd	r25, Y+3	; 0x03
    19c8:	0e 94 a6 0c 	call	0x194c	; 0x194c <_proc_stop>
        ret = (bool_t)1;
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	89 83       	std	Y+1, r24	; 0x01
    }
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    return ret;
    19d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    19d2:	0f 90       	pop	r0
    19d4:	0f 90       	pop	r0
    19d6:	0f 90       	pop	r0
    19d8:	cf 91       	pop	r28
    19da:	df 91       	pop	r29
    19dc:	08 95       	ret

000019de <_proc_flag_stop_isr>:
    exit_crit_sec();
#endif
}

void _proc_flag_stop_isr( flag_t mask )
{
    19de:	df 93       	push	r29
    19e0:	cf 93       	push	r28
    19e2:	00 d0       	rcall	.+0      	; 0x19e4 <_proc_flag_stop_isr+0x6>
    19e4:	0f 92       	push	r0
    19e6:	cd b7       	in	r28, 0x3d	; 61
    19e8:	de b7       	in	r29, 0x3e	; 62
    19ea:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = current_proc();
    19ec:	0e 94 cc 00 	call	0x198	; 0x198 <current_proc>
    19f0:	9a 83       	std	Y+2, r25	; 0x02
    19f2:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif //CONFIG_MP
    proc->flags &= mask;
    19f4:	e9 81       	ldd	r30, Y+1	; 0x01
    19f6:	fa 81       	ldd	r31, Y+2	; 0x02
    19f8:	93 85       	ldd	r25, Z+11	; 0x0b
    19fa:	8b 81       	ldd	r24, Y+3	; 0x03
    19fc:	89 23       	and	r24, r25
    19fe:	e9 81       	ldd	r30, Y+1	; 0x01
    1a00:	fa 81       	ldd	r31, Y+2	; 0x02
    1a02:	83 87       	std	Z+11, r24	; 0x0b
    if(  ( proc->flags & PROC_FLG_PRE_END ) && (!(proc->flags & PROC_FLG_HOLD))  )
    1a04:	e9 81       	ldd	r30, Y+1	; 0x01
    1a06:	fa 81       	ldd	r31, Y+2	; 0x02
    1a08:	83 85       	ldd	r24, Z+11	; 0x0b
    1a0a:	88 2f       	mov	r24, r24
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	80 72       	andi	r24, 0x20	; 32
    1a10:	90 70       	andi	r25, 0x00	; 0
    1a12:	00 97       	sbiw	r24, 0x00	; 0
    1a14:	a1 f0       	breq	.+40     	; 0x1a3e <_proc_flag_stop_isr+0x60>
    1a16:	e9 81       	ldd	r30, Y+1	; 0x01
    1a18:	fa 81       	ldd	r31, Y+2	; 0x02
    1a1a:	83 85       	ldd	r24, Z+11	; 0x0b
    1a1c:	88 2f       	mov	r24, r24
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	84 70       	andi	r24, 0x04	; 4
    1a22:	90 70       	andi	r25, 0x00	; 0
    1a24:	00 97       	sbiw	r24, 0x00	; 0
    1a26:	59 f4       	brne	.+22     	; 0x1a3e <_proc_flag_stop_isr+0x60>
    {
        proc->flags &= ~PROC_FLG_PRE_END;
    1a28:	e9 81       	ldd	r30, Y+1	; 0x01
    1a2a:	fa 81       	ldd	r31, Y+2	; 0x02
    1a2c:	83 85       	ldd	r24, Z+11	; 0x0b
    1a2e:	8f 7d       	andi	r24, 0xDF	; 223
    1a30:	e9 81       	ldd	r30, Y+1	; 0x01
    1a32:	fa 81       	ldd	r31, Y+2	; 0x02
    1a34:	83 87       	std	Z+11, r24	; 0x0b
        _proc_stop( proc );
    1a36:	89 81       	ldd	r24, Y+1	; 0x01
    1a38:	9a 81       	ldd	r25, Y+2	; 0x02
    1a3a:	0e 94 a6 0c 	call	0x194c	; 0x194c <_proc_stop>
    }
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif //CONFIG_MP
}
    1a3e:	0f 90       	pop	r0
    1a40:	0f 90       	pop	r0
    1a42:	0f 90       	pop	r0
    1a44:	cf 91       	pop	r28
    1a46:	df 91       	pop	r29
    1a48:	08 95       	ret

00001a4a <_proc_lres_inc>:
    proc_t * proc
#ifdef CONFIG_USE_HIGHEST_LOCKER
    ,prio_t prio
#endif
)
{
    1a4a:	df 93       	push	r29
    1a4c:	cf 93       	push	r28
    1a4e:	00 d0       	rcall	.+0      	; 0x1a50 <_proc_lres_inc+0x6>
    1a50:	0f 92       	push	r0
    1a52:	cd b7       	in	r28, 0x3d	; 61
    1a54:	de b7       	in	r29, 0x3e	; 62
    1a56:	9a 83       	std	Y+2, r25	; 0x02
    1a58:	89 83       	std	Y+1, r24	; 0x01
    1a5a:	6b 83       	std	Y+3, r22	; 0x03
#ifdef CONFIG_USE_HIGHEST_LOCKER
    if( proc->lres.index == (index_t)0 )proc->flags |= PROC_FLG_HOLD;
    1a5c:	e9 81       	ldd	r30, Y+1	; 0x01
    1a5e:	fa 81       	ldd	r31, Y+2	; 0x02
    1a60:	85 8d       	ldd	r24, Z+29	; 0x1d
    1a62:	88 23       	and	r24, r24
    1a64:	39 f4       	brne	.+14     	; 0x1a74 <_proc_lres_inc+0x2a>
    1a66:	e9 81       	ldd	r30, Y+1	; 0x01
    1a68:	fa 81       	ldd	r31, Y+2	; 0x02
    1a6a:	83 85       	ldd	r24, Z+11	; 0x0b
    1a6c:	84 60       	ori	r24, 0x04	; 4
    1a6e:	e9 81       	ldd	r30, Y+1	; 0x01
    1a70:	fa 81       	ldd	r31, Y+2	; 0x02
    1a72:	83 87       	std	Z+11, r24	; 0x0b
    pcounter_inc( &proc->lres, prio );
    1a74:	89 81       	ldd	r24, Y+1	; 0x01
    1a76:	9a 81       	ldd	r25, Y+2	; 0x02
    1a78:	0d 96       	adiw	r24, 0x0d	; 13
    1a7a:	6b 81       	ldd	r22, Y+3	; 0x03
    1a7c:	0e 94 09 0b 	call	0x1612	; 0x1612 <pcounter_inc>
#else
    if( proc->lres == (count_t)0 )proc->flags |= PROC_FLG_HOLD;
    proc->lres++;
#endif
}
    1a80:	0f 90       	pop	r0
    1a82:	0f 90       	pop	r0
    1a84:	0f 90       	pop	r0
    1a86:	cf 91       	pop	r28
    1a88:	df 91       	pop	r29
    1a8a:	08 95       	ret

00001a8c <_proc_lres_dec>:
    proc_t * proc
#ifdef CONFIG_USE_HIGHEST_LOCKER
    ,prio_t prio
#endif
)
{
    1a8c:	df 93       	push	r29
    1a8e:	cf 93       	push	r28
    1a90:	00 d0       	rcall	.+0      	; 0x1a92 <_proc_lres_dec+0x6>
    1a92:	0f 92       	push	r0
    1a94:	cd b7       	in	r28, 0x3d	; 61
    1a96:	de b7       	in	r29, 0x3e	; 62
    1a98:	9a 83       	std	Y+2, r25	; 0x02
    1a9a:	89 83       	std	Y+1, r24	; 0x01
    1a9c:	6b 83       	std	Y+3, r22	; 0x03
#ifdef CONFIG_USE_HIGHEST_LOCKER
    pcounter_dec( &proc->lres, prio );
    1a9e:	89 81       	ldd	r24, Y+1	; 0x01
    1aa0:	9a 81       	ldd	r25, Y+2	; 0x02
    1aa2:	0d 96       	adiw	r24, 0x0d	; 13
    1aa4:	6b 81       	ldd	r22, Y+3	; 0x03
    1aa6:	0e 94 45 0b 	call	0x168a	; 0x168a <pcounter_dec>
    if( proc->lres.index == (index_t)0 )proc->flags &= ~PROC_FLG_HOLD;
    1aaa:	e9 81       	ldd	r30, Y+1	; 0x01
    1aac:	fa 81       	ldd	r31, Y+2	; 0x02
    1aae:	85 8d       	ldd	r24, Z+29	; 0x1d
    1ab0:	88 23       	and	r24, r24
    1ab2:	39 f4       	brne	.+14     	; 0x1ac2 <_proc_lres_dec+0x36>
    1ab4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ab6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ab8:	83 85       	ldd	r24, Z+11	; 0x0b
    1aba:	8b 7f       	andi	r24, 0xFB	; 251
    1abc:	e9 81       	ldd	r30, Y+1	; 0x01
    1abe:	fa 81       	ldd	r31, Y+2	; 0x02
    1ac0:	83 87       	std	Z+11, r24	; 0x0b
#else
    if( proc->lres!= (count_t)0 )proc->lres--;
    if( proc->lres == (count_t)0 )proc->flags &= ~PROC_FLG_HOLD;
#endif
}
    1ac2:	0f 90       	pop	r0
    1ac4:	0f 90       	pop	r0
    1ac6:	0f 90       	pop	r0
    1ac8:	cf 91       	pop	r28
    1aca:	df 91       	pop	r29
    1acc:	08 95       	ret

00001ace <_proc_prio_control_stoped>:
#ifdef CONFIG_USE_HIGHEST_LOCKER
// Будет использоваться в mutex-ах и т.п., процесс должен сам вызывать эту функцию, при этом он должен быть вырезан из списка выполняющихся.
void _proc_prio_control_stoped( proc_t * proc )
{
    1ace:	df 93       	push	r29
    1ad0:	cf 93       	push	r28
    1ad2:	cd b7       	in	r28, 0x3d	; 61
    1ad4:	de b7       	in	r29, 0x3e	; 62
    1ad6:	27 97       	sbiw	r28, 0x07	; 7
    1ad8:	0f b6       	in	r0, 0x3f	; 63
    1ada:	f8 94       	cli
    1adc:	de bf       	out	0x3e, r29	; 62
    1ade:	0f be       	out	0x3f, r0	; 63
    1ae0:	cd bf       	out	0x3d, r28	; 61
    1ae2:	9b 83       	std	Y+3, r25	; 0x03
    1ae4:	8a 83       	std	Y+2, r24	; 0x02
    if(proc->lres.index != (index_t)0)
    1ae6:	ea 81       	ldd	r30, Y+2	; 0x02
    1ae8:	fb 81       	ldd	r31, Y+3	; 0x03
    1aea:	85 8d       	ldd	r24, Z+29	; 0x1d
    1aec:	88 23       	and	r24, r24
    1aee:	e9 f0       	breq	.+58     	; 0x1b2a <_proc_prio_control_stoped+0x5c>
    {
        prio_t locker_prio = index_search( proc->lres.index );
    1af0:	ea 81       	ldd	r30, Y+2	; 0x02
    1af2:	fb 81       	ldd	r31, Y+3	; 0x03
    1af4:	85 8d       	ldd	r24, Z+29	; 0x1d
    1af6:	0e 94 02 09 	call	0x1204	; 0x1204 <index_search>
    1afa:	89 83       	std	Y+1, r24	; 0x01
        ((gitem_t *)proc)->group->prio = ( locker_prio < proc->base_prio )?locker_prio:proc->base_prio;
    1afc:	ea 81       	ldd	r30, Y+2	; 0x02
    1afe:	fb 81       	ldd	r31, Y+3	; 0x03
    1b00:	84 81       	ldd	r24, Z+4	; 0x04
    1b02:	95 81       	ldd	r25, Z+5	; 0x05
    1b04:	9e 83       	std	Y+6, r25	; 0x06
    1b06:	8d 83       	std	Y+5, r24	; 0x05
    1b08:	ea 81       	ldd	r30, Y+2	; 0x02
    1b0a:	fb 81       	ldd	r31, Y+3	; 0x03
    1b0c:	84 85       	ldd	r24, Z+12	; 0x0c
    1b0e:	99 81       	ldd	r25, Y+1	; 0x01
    1b10:	9f 83       	std	Y+7, r25	; 0x07
    1b12:	8c 83       	std	Y+4, r24	; 0x04
    1b14:	ec 81       	ldd	r30, Y+4	; 0x04
    1b16:	ff 81       	ldd	r31, Y+7	; 0x07
    1b18:	fe 17       	cp	r31, r30
    1b1a:	10 f4       	brcc	.+4      	; 0x1b20 <_proc_prio_control_stoped+0x52>
    1b1c:	8f 81       	ldd	r24, Y+7	; 0x07
    1b1e:	8c 83       	std	Y+4, r24	; 0x04
    1b20:	8c 81       	ldd	r24, Y+4	; 0x04
    1b22:	ed 81       	ldd	r30, Y+5	; 0x05
    1b24:	fe 81       	ldd	r31, Y+6	; 0x06
    1b26:	82 83       	std	Z+2, r24	; 0x02
    1b28:	0a c0       	rjmp	.+20     	; 0x1b3e <_proc_prio_control_stoped+0x70>
    }
    else
    {
        ((gitem_t *)proc)->group->prio = proc->base_prio;
    1b2a:	ea 81       	ldd	r30, Y+2	; 0x02
    1b2c:	fb 81       	ldd	r31, Y+3	; 0x03
    1b2e:	a4 81       	ldd	r26, Z+4	; 0x04
    1b30:	b5 81       	ldd	r27, Z+5	; 0x05
    1b32:	ea 81       	ldd	r30, Y+2	; 0x02
    1b34:	fb 81       	ldd	r31, Y+3	; 0x03
    1b36:	84 85       	ldd	r24, Z+12	; 0x0c
    1b38:	12 96       	adiw	r26, 0x02	; 2
    1b3a:	8c 93       	st	X, r24
    1b3c:	12 97       	sbiw	r26, 0x02	; 2
    }
}
    1b3e:	27 96       	adiw	r28, 0x07	; 7
    1b40:	0f b6       	in	r0, 0x3f	; 63
    1b42:	f8 94       	cli
    1b44:	de bf       	out	0x3e, r29	; 62
    1b46:	0f be       	out	0x3f, r0	; 63
    1b48:	cd bf       	out	0x3d, r28	; 61
    1b4a:	cf 91       	pop	r28
    1b4c:	df 91       	pop	r29
    1b4e:	08 95       	ret

00001b50 <_proc_prio_control_running>:
void _proc_prio_control_running( proc_t * proc )
{
    1b50:	df 93       	push	r29
    1b52:	cf 93       	push	r28
    1b54:	00 d0       	rcall	.+0      	; 0x1b56 <_proc_prio_control_running+0x6>
    1b56:	00 d0       	rcall	.+0      	; 0x1b58 <_proc_prio_control_running+0x8>
    1b58:	00 d0       	rcall	.+0      	; 0x1b5a <_proc_prio_control_running+0xa>
    1b5a:	cd b7       	in	r28, 0x3d	; 61
    1b5c:	de b7       	in	r29, 0x3e	; 62
    1b5e:	9c 83       	std	Y+4, r25	; 0x04
    1b60:	8b 83       	std	Y+3, r24	; 0x03
    prio_t new_prio;
    if(proc->lres.index != (index_t)0)
    1b62:	eb 81       	ldd	r30, Y+3	; 0x03
    1b64:	fc 81       	ldd	r31, Y+4	; 0x04
    1b66:	85 8d       	ldd	r24, Z+29	; 0x1d
    1b68:	88 23       	and	r24, r24
    1b6a:	a9 f0       	breq	.+42     	; 0x1b96 <_proc_prio_control_running+0x46>
    {
        prio_t locker_prio = index_search( proc->lres.index );
    1b6c:	eb 81       	ldd	r30, Y+3	; 0x03
    1b6e:	fc 81       	ldd	r31, Y+4	; 0x04
    1b70:	85 8d       	ldd	r24, Z+29	; 0x1d
    1b72:	0e 94 02 09 	call	0x1204	; 0x1204 <index_search>
    1b76:	89 83       	std	Y+1, r24	; 0x01
        new_prio = ( locker_prio < proc->base_prio )?locker_prio:proc->base_prio;
    1b78:	eb 81       	ldd	r30, Y+3	; 0x03
    1b7a:	fc 81       	ldd	r31, Y+4	; 0x04
    1b7c:	84 85       	ldd	r24, Z+12	; 0x0c
    1b7e:	99 81       	ldd	r25, Y+1	; 0x01
    1b80:	9e 83       	std	Y+6, r25	; 0x06
    1b82:	8d 83       	std	Y+5, r24	; 0x05
    1b84:	8d 81       	ldd	r24, Y+5	; 0x05
    1b86:	9e 81       	ldd	r25, Y+6	; 0x06
    1b88:	98 17       	cp	r25, r24
    1b8a:	10 f4       	brcc	.+4      	; 0x1b90 <_proc_prio_control_running+0x40>
    1b8c:	8e 81       	ldd	r24, Y+6	; 0x06
    1b8e:	8d 83       	std	Y+5, r24	; 0x05
    1b90:	9d 81       	ldd	r25, Y+5	; 0x05
    1b92:	9a 83       	std	Y+2, r25	; 0x02
    1b94:	04 c0       	rjmp	.+8      	; 0x1b9e <_proc_prio_control_running+0x4e>
    }
    else
    {
        new_prio = proc->base_prio;
    1b96:	eb 81       	ldd	r30, Y+3	; 0x03
    1b98:	fc 81       	ldd	r31, Y+4	; 0x04
    1b9a:	84 85       	ldd	r24, Z+12	; 0x0c
    1b9c:	8a 83       	std	Y+2, r24	; 0x02
    }
    if(((gitem_t *)proc)->group->prio != new_prio)
    1b9e:	eb 81       	ldd	r30, Y+3	; 0x03
    1ba0:	fc 81       	ldd	r31, Y+4	; 0x04
    1ba2:	04 80       	ldd	r0, Z+4	; 0x04
    1ba4:	f5 81       	ldd	r31, Z+5	; 0x05
    1ba6:	e0 2d       	mov	r30, r0
    1ba8:	92 81       	ldd	r25, Z+2	; 0x02
    1baa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bac:	98 17       	cp	r25, r24
    1bae:	b1 f0       	breq	.+44     	; 0x1bdc <_proc_prio_control_running+0x8c>
    {
        _proc_stop_( proc );
    1bb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb4:	0e 94 de 07 	call	0xfbc	; 0xfbc <gitem_cut>
        ((gitem_t *)proc)->group->prio = new_prio;
    1bb8:	eb 81       	ldd	r30, Y+3	; 0x03
    1bba:	fc 81       	ldd	r31, Y+4	; 0x04
    1bbc:	04 80       	ldd	r0, Z+4	; 0x04
    1bbe:	f5 81       	ldd	r31, Z+5	; 0x05
    1bc0:	e0 2d       	mov	r30, r0
    1bc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc4:	82 83       	std	Z+2, r24	; 0x02
#ifdef CONFIG_MP
        spin_lock( &kernel.stat_lock );
        stat_inc( proc, (stat_t *)kernel.stat+proc->core_id );
        spin_unlock( &kernel.stat_lock );
#endif
        _proc_run_( proc );
    1bc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bca:	20 91 a0 01 	lds	r18, 0x01A0
    1bce:	30 91 a1 01 	lds	r19, 0x01A1
    1bd2:	b9 01       	movw	r22, r18
    1bd4:	0e 94 81 06 	call	0xd02	; 0xd02 <gitem_insert>
#ifdef CONFIG_MP
        resched(proc->core_id);
#else
        resched();
    1bd8:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
#endif
    }
}
    1bdc:	26 96       	adiw	r28, 0x06	; 6
    1bde:	0f b6       	in	r0, 0x3f	; 63
    1be0:	f8 94       	cli
    1be2:	de bf       	out	0x3e, r29	; 62
    1be4:	0f be       	out	0x3f, r0	; 63
    1be6:	cd bf       	out	0x3d, r28	; 61
    1be8:	cf 91       	pop	r28
    1bea:	df 91       	pop	r29
    1bec:	08 95       	ret

00001bee <sched_init>:
*****************************************************************************************/
#include "../include/bugurt.h"
///========================================================================================
// Инициация
void sched_init(sched_t * sched, proc_t * idle)
{
    1bee:	df 93       	push	r29
    1bf0:	cf 93       	push	r28
    1bf2:	00 d0       	rcall	.+0      	; 0x1bf4 <sched_init+0x6>
    1bf4:	00 d0       	rcall	.+0      	; 0x1bf6 <sched_init+0x8>
    1bf6:	cd b7       	in	r28, 0x3d	; 61
    1bf8:	de b7       	in	r29, 0x3e	; 62
    1bfa:	9a 83       	std	Y+2, r25	; 0x02
    1bfc:	89 83       	std	Y+1, r24	; 0x01
    1bfe:	7c 83       	std	Y+4, r23	; 0x04
    1c00:	6b 83       	std	Y+3, r22	; 0x03
#ifdef CONFIG_MP
    lock_t * sched_lock = &sched->lock;
    spin_init( sched_lock );
    spin_lock( sched_lock );
#endif // CONFIG_MP
    sched->ready = (xlist_t *)sched->plst;
    1c02:	89 81       	ldd	r24, Y+1	; 0x01
    1c04:	9a 81       	ldd	r25, Y+2	; 0x02
    1c06:	06 96       	adiw	r24, 0x06	; 6
    1c08:	e9 81       	ldd	r30, Y+1	; 0x01
    1c0a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c0c:	93 83       	std	Z+3, r25	; 0x03
    1c0e:	82 83       	std	Z+2, r24	; 0x02
    xlist_init( sched->ready );
    1c10:	e9 81       	ldd	r30, Y+1	; 0x01
    1c12:	fa 81       	ldd	r31, Y+2	; 0x02
    1c14:	82 81       	ldd	r24, Z+2	; 0x02
    1c16:	93 81       	ldd	r25, Z+3	; 0x03
    1c18:	0e 94 cf 10 	call	0x219e	; 0x219e <xlist_init>
    sched->expired = (xlist_t *)sched->plst + 1;
    1c1c:	89 81       	ldd	r24, Y+1	; 0x01
    1c1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c20:	47 96       	adiw	r24, 0x17	; 23
    1c22:	e9 81       	ldd	r30, Y+1	; 0x01
    1c24:	fa 81       	ldd	r31, Y+2	; 0x02
    1c26:	95 83       	std	Z+5, r25	; 0x05
    1c28:	84 83       	std	Z+4, r24	; 0x04
    xlist_init( sched->expired );
    1c2a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c2c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c2e:	84 81       	ldd	r24, Z+4	; 0x04
    1c30:	95 81       	ldd	r25, Z+5	; 0x05
    1c32:	0e 94 cf 10 	call	0x219e	; 0x219e <xlist_init>
    gitem_insert( (gitem_t *)idle, sched->ready );
    1c36:	8b 81       	ldd	r24, Y+3	; 0x03
    1c38:	9c 81       	ldd	r25, Y+4	; 0x04
    1c3a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c3c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c3e:	22 81       	ldd	r18, Z+2	; 0x02
    1c40:	33 81       	ldd	r19, Z+3	; 0x03
    1c42:	b9 01       	movw	r22, r18
    1c44:	0e 94 81 06 	call	0xd02	; 0xd02 <gitem_insert>
    sched->current_proc = idle;
    1c48:	e9 81       	ldd	r30, Y+1	; 0x01
    1c4a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c50:	91 83       	std	Z+1, r25	; 0x01
    1c52:	80 83       	st	Z, r24
    sched->nested_crit_sec = (count_t)0;//вообще это выполняется при запрещенных прерываниях, но не известно, на этом ли процессоре
    1c54:	e9 81       	ldd	r30, Y+1	; 0x01
    1c56:	fa 81       	ldd	r31, Y+2	; 0x02
    1c58:	11 a6       	std	Z+41, r1	; 0x29
    1c5a:	10 a6       	std	Z+40, r1	; 0x28
#ifdef CONFIG_MP
    spin_unlock( sched_lock );
    stat_inc( idle, (stat_t *)kernel.stat + idle->core_id );
#endif // CONFIG_MP
}
    1c5c:	0f 90       	pop	r0
    1c5e:	0f 90       	pop	r0
    1c60:	0f 90       	pop	r0
    1c62:	0f 90       	pop	r0
    1c64:	cf 91       	pop	r28
    1c66:	df 91       	pop	r29
    1c68:	08 95       	ret

00001c6a <_sched_list_switch>:
static void _sched_list_switch( sched_t * sched )
{
    1c6a:	df 93       	push	r29
    1c6c:	cf 93       	push	r28
    1c6e:	00 d0       	rcall	.+0      	; 0x1c70 <_sched_list_switch+0x6>
    1c70:	00 d0       	rcall	.+0      	; 0x1c72 <_sched_list_switch+0x8>
    1c72:	cd b7       	in	r28, 0x3d	; 61
    1c74:	de b7       	in	r29, 0x3e	; 62
    1c76:	9c 83       	std	Y+4, r25	; 0x04
    1c78:	8b 83       	std	Y+3, r24	; 0x03
    // Список ready опустел, переключаем списки
    if( sched->ready->index == (index_t)0 )
    1c7a:	eb 81       	ldd	r30, Y+3	; 0x03
    1c7c:	fc 81       	ldd	r31, Y+4	; 0x04
    1c7e:	02 80       	ldd	r0, Z+2	; 0x02
    1c80:	f3 81       	ldd	r31, Z+3	; 0x03
    1c82:	e0 2d       	mov	r30, r0
    1c84:	80 89       	ldd	r24, Z+16	; 0x10
    1c86:	88 23       	and	r24, r24
    1c88:	a1 f4       	brne	.+40     	; 0x1cb2 <_sched_list_switch+0x48>
    {
        xlist_t * buf = sched->ready;
    1c8a:	eb 81       	ldd	r30, Y+3	; 0x03
    1c8c:	fc 81       	ldd	r31, Y+4	; 0x04
    1c8e:	82 81       	ldd	r24, Z+2	; 0x02
    1c90:	93 81       	ldd	r25, Z+3	; 0x03
    1c92:	9a 83       	std	Y+2, r25	; 0x02
    1c94:	89 83       	std	Y+1, r24	; 0x01
        sched->ready = sched->expired;
    1c96:	eb 81       	ldd	r30, Y+3	; 0x03
    1c98:	fc 81       	ldd	r31, Y+4	; 0x04
    1c9a:	84 81       	ldd	r24, Z+4	; 0x04
    1c9c:	95 81       	ldd	r25, Z+5	; 0x05
    1c9e:	eb 81       	ldd	r30, Y+3	; 0x03
    1ca0:	fc 81       	ldd	r31, Y+4	; 0x04
    1ca2:	93 83       	std	Z+3, r25	; 0x03
    1ca4:	82 83       	std	Z+2, r24	; 0x02
        sched->expired = buf;
    1ca6:	eb 81       	ldd	r30, Y+3	; 0x03
    1ca8:	fc 81       	ldd	r31, Y+4	; 0x04
    1caa:	89 81       	ldd	r24, Y+1	; 0x01
    1cac:	9a 81       	ldd	r25, Y+2	; 0x02
    1cae:	95 83       	std	Z+5, r25	; 0x05
    1cb0:	84 83       	std	Z+4, r24	; 0x04
    }
}
    1cb2:	0f 90       	pop	r0
    1cb4:	0f 90       	pop	r0
    1cb6:	0f 90       	pop	r0
    1cb8:	0f 90       	pop	r0
    1cba:	cf 91       	pop	r28
    1cbc:	df 91       	pop	r29
    1cbe:	08 95       	ret

00001cc0 <sched_schedule>:
2) В качестве аргумента передаем только тот объект, который управляет процессами
на исполняющем функции процессоре.
******************************************************************************************/
// Функция планирования, переключает процессы в обработчике системмного таймера
stack_t * sched_schedule( stack_t * current_sp )
{
    1cc0:	df 93       	push	r29
    1cc2:	cf 93       	push	r28
    1cc4:	cd b7       	in	r28, 0x3d	; 61
    1cc6:	de b7       	in	r29, 0x3e	; 62
    1cc8:	27 97       	sbiw	r28, 0x07	; 7
    1cca:	0f b6       	in	r0, 0x3f	; 63
    1ccc:	f8 94       	cli
    1cce:	de bf       	out	0x3e, r29	; 62
    1cd0:	0f be       	out	0x3f, r0	; 63
    1cd2:	cd bf       	out	0x3d, r28	; 61
    1cd4:	9f 83       	std	Y+7, r25	; 0x07
    1cd6:	8e 83       	std	Y+6, r24	; 0x06
#ifdef CONFIG_MP
    sched_t * sched = (sched_t *)kernel.sched + current_core();
#else
    sched_t * sched = (sched_t *)&kernel.sched;
    1cd8:	8e e9       	ldi	r24, 0x9E	; 158
    1cda:	91 e0       	ldi	r25, 0x01	; 1
    1cdc:	9d 83       	std	Y+5, r25	; 0x05
    1cde:	8c 83       	std	Y+4, r24	; 0x04
#endif // CONFIG_MP
    // Меняем только с локального процессора, блокировку sched->lock можно не захватывать!
    proc_t * current_proc = sched->current_proc;
    1ce0:	ec 81       	ldd	r30, Y+4	; 0x04
    1ce2:	fd 81       	ldd	r31, Y+5	; 0x05
    1ce4:	80 81       	ld	r24, Z
    1ce6:	91 81       	ldd	r25, Z+1	; 0x01
    1ce8:	9b 83       	std	Y+3, r25	; 0x03
    1cea:	8a 83       	std	Y+2, r24	; 0x02
#ifdef CONFIG_MP
    // А вот эту блокировку обязательно надо захватить!
    spin_lock( &current_proc->lock );
#endif // CONFIG_MP
    // Сохранение указателя стека
    current_proc->spointer = current_sp;
    1cec:	ea 81       	ldd	r30, Y+2	; 0x02
    1cee:	fb 81       	ldd	r31, Y+3	; 0x03
    1cf0:	8e 81       	ldd	r24, Y+6	; 0x06
    1cf2:	9f 81       	ldd	r25, Y+7	; 0x07
    1cf4:	95 a7       	std	Z+45, r25	; 0x2d
    1cf6:	84 a7       	std	Z+44, r24	; 0x2c
    // Хук "сохранение контекста"
    if( current_proc->sv_hook )current_proc->sv_hook( current_proc->arg );
    1cf8:	ea 81       	ldd	r30, Y+2	; 0x02
    1cfa:	fb 81       	ldd	r31, Y+3	; 0x03
    1cfc:	84 a1       	ldd	r24, Z+36	; 0x24
    1cfe:	95 a1       	ldd	r25, Z+37	; 0x25
    1d00:	00 97       	sbiw	r24, 0x00	; 0
    1d02:	51 f0       	breq	.+20     	; 0x1d18 <sched_schedule+0x58>
    1d04:	ea 81       	ldd	r30, Y+2	; 0x02
    1d06:	fb 81       	ldd	r31, Y+3	; 0x03
    1d08:	24 a1       	ldd	r18, Z+36	; 0x24
    1d0a:	35 a1       	ldd	r19, Z+37	; 0x25
    1d0c:	ea 81       	ldd	r30, Y+2	; 0x02
    1d0e:	fb 81       	ldd	r31, Y+3	; 0x03
    1d10:	80 a5       	ldd	r24, Z+40	; 0x28
    1d12:	91 a5       	ldd	r25, Z+41	; 0x29
    1d14:	f9 01       	movw	r30, r18
    1d16:	09 95       	icall
    // Проверяем, что процесс находится в списке ready
    if( (xlist_t *)((gitem_t *)current_proc)->group->link == sched->ready )
    1d18:	ea 81       	ldd	r30, Y+2	; 0x02
    1d1a:	fb 81       	ldd	r31, Y+3	; 0x03
    1d1c:	04 80       	ldd	r0, Z+4	; 0x04
    1d1e:	f5 81       	ldd	r31, Z+5	; 0x05
    1d20:	e0 2d       	mov	r30, r0
    1d22:	80 81       	ld	r24, Z
    1d24:	91 81       	ldd	r25, Z+1	; 0x01
    1d26:	9c 01       	movw	r18, r24
    1d28:	ec 81       	ldd	r30, Y+4	; 0x04
    1d2a:	fd 81       	ldd	r31, Y+5	; 0x05
    1d2c:	82 81       	ldd	r24, Z+2	; 0x02
    1d2e:	93 81       	ldd	r25, Z+3	; 0x03
    1d30:	28 17       	cp	r18, r24
    1d32:	39 07       	cpc	r19, r25
    1d34:	09 f0       	breq	.+2      	; 0x1d38 <sched_schedule+0x78>
    1d36:	4d c0       	rjmp	.+154    	; 0x1dd2 <sched_schedule+0x112>
    {
        // Переключаем cписок на следующий за текущим процесс
#ifdef CONFIG_MP
        spin_lock( &sched->lock );
#endif // CONFIG_MP
        xlist_switch( sched->ready, ((gitem_t *)current_proc)->group->prio );
    1d38:	ec 81       	ldd	r30, Y+4	; 0x04
    1d3a:	fd 81       	ldd	r31, Y+5	; 0x05
    1d3c:	82 81       	ldd	r24, Z+2	; 0x02
    1d3e:	93 81       	ldd	r25, Z+3	; 0x03
    1d40:	ea 81       	ldd	r30, Y+2	; 0x02
    1d42:	fb 81       	ldd	r31, Y+3	; 0x03
    1d44:	04 80       	ldd	r0, Z+4	; 0x04
    1d46:	f5 81       	ldd	r31, Z+5	; 0x05
    1d48:	e0 2d       	mov	r30, r0
    1d4a:	22 81       	ldd	r18, Z+2	; 0x02
    1d4c:	62 2f       	mov	r22, r18
    1d4e:	0e 94 25 11 	call	0x224a	; 0x224a <xlist_switch>
#ifdef CONFIG_MP
        spin_unlock( &sched->lock );
#endif // CONFIG_MP
        //Проверяем, не истек ли квант времени процесса
        if( current_proc->timer > (timer_t)1 )current_proc->timer--;// Не истек, уменьшаем таймер
    1d52:	ea 81       	ldd	r30, Y+2	; 0x02
    1d54:	fb 81       	ldd	r31, Y+3	; 0x03
    1d56:	80 a1       	ldd	r24, Z+32	; 0x20
    1d58:	91 a1       	ldd	r25, Z+33	; 0x21
    1d5a:	82 30       	cpi	r24, 0x02	; 2
    1d5c:	91 05       	cpc	r25, r1
    1d5e:	50 f0       	brcs	.+20     	; 0x1d74 <sched_schedule+0xb4>
    1d60:	ea 81       	ldd	r30, Y+2	; 0x02
    1d62:	fb 81       	ldd	r31, Y+3	; 0x03
    1d64:	80 a1       	ldd	r24, Z+32	; 0x20
    1d66:	91 a1       	ldd	r25, Z+33	; 0x21
    1d68:	01 97       	sbiw	r24, 0x01	; 1
    1d6a:	ea 81       	ldd	r30, Y+2	; 0x02
    1d6c:	fb 81       	ldd	r31, Y+3	; 0x03
    1d6e:	91 a3       	std	Z+33, r25	; 0x21
    1d70:	80 a3       	std	Z+32, r24	; 0x20
    1d72:	2f c0       	rjmp	.+94     	; 0x1dd2 <sched_schedule+0x112>
        {
            // Истек, вырезаем процесс из списка
#ifdef CONFIG_MP
            spin_lock( &sched->lock );
#endif // CONFIG_MP
            gitem_fast_cut( (gitem_t *)current_proc );
    1d74:	8a 81       	ldd	r24, Y+2	; 0x02
    1d76:	9b 81       	ldd	r25, Y+3	; 0x03
    1d78:	0e 94 58 07 	call	0xeb0	; 0xeb0 <gitem_fast_cut>
            // Обновили статистику после удаления процесса из списка ready
            stat_dec( current_proc, (stat_t *)kernel.stat + current_proc->core_id );
#endif // CONFIG_USE_ALB
#endif // CONFIG_MP
            // А что за процесс собственно?
            flag_t flags = current_proc->flags;
    1d7c:	ea 81       	ldd	r30, Y+2	; 0x02
    1d7e:	fb 81       	ldd	r31, Y+3	; 0x03
    1d80:	83 85       	ldd	r24, Z+11	; 0x0b
    1d82:	89 83       	std	Y+1, r24	; 0x01
            if(
                (!(flags & PROC_FLG_RT))
    1d84:	89 81       	ldd	r24, Y+1	; 0x01
    1d86:	88 2f       	mov	r24, r24
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	81 70       	andi	r24, 0x01	; 1
    1d8c:	90 70       	andi	r25, 0x00	; 0
            stat_dec( current_proc, (stat_t *)kernel.stat + current_proc->core_id );
#endif // CONFIG_USE_ALB
#endif // CONFIG_MP
            // А что за процесс собственно?
            flag_t flags = current_proc->flags;
            if(
    1d8e:	00 97       	sbiw	r24, 0x00	; 0
    1d90:	91 f4       	brne	.+36     	; 0x1db6 <sched_schedule+0xf6>
                ||(flags & PROC_FLG_HOLD)
#endif // CONFIG_HARD_RT
            )
            {
                //Процесс общего назначения, либо он удерживает общий ресурс, сбрасываем таймер и переносим в очередь expired
                current_proc->timer = current_proc->time_quant;
    1d92:	ea 81       	ldd	r30, Y+2	; 0x02
    1d94:	fb 81       	ldd	r31, Y+3	; 0x03
    1d96:	86 8d       	ldd	r24, Z+30	; 0x1e
    1d98:	97 8d       	ldd	r25, Z+31	; 0x1f
    1d9a:	ea 81       	ldd	r30, Y+2	; 0x02
    1d9c:	fb 81       	ldd	r31, Y+3	; 0x03
    1d9e:	91 a3       	std	Z+33, r25	; 0x21
    1da0:	80 a3       	std	Z+32, r24	; 0x20
#else // CONFIG_MP CONFIG_USE_ALB
                // Тупо переносим процесс в список expired
#ifdef CONFIG_MP
                spin_lock( &sched->lock );
#endif // CONFIG_MP
                gitem_insert( (gitem_t *)current_proc, sched->expired );
    1da2:	8a 81       	ldd	r24, Y+2	; 0x02
    1da4:	9b 81       	ldd	r25, Y+3	; 0x03
    1da6:	ec 81       	ldd	r30, Y+4	; 0x04
    1da8:	fd 81       	ldd	r31, Y+5	; 0x05
    1daa:	24 81       	ldd	r18, Z+4	; 0x04
    1dac:	35 81       	ldd	r19, Z+5	; 0x05
    1dae:	b9 01       	movw	r22, r18
    1db0:	0e 94 81 06 	call	0xd02	; 0xd02 <gitem_insert>
    1db4:	0e c0       	rjmp	.+28     	; 0x1dd2 <sched_schedule+0x112>
                spin_lock( &kernel.stat_lock );
                stat_dec( current_proc, (stat_t *)kernel.stat + current_proc->core_id );
#endif // nCONFIG_USE_ALB
                spin_unlock( &kernel.stat_lock );
#endif // CONFIG_MP
                ((gitem_t *)current_proc)->group->link = (void *)0;// Просто вырезали из списка, как в gitem_cut
    1db6:	ea 81       	ldd	r30, Y+2	; 0x02
    1db8:	fb 81       	ldd	r31, Y+3	; 0x03
    1dba:	04 80       	ldd	r0, Z+4	; 0x04
    1dbc:	f5 81       	ldd	r31, Z+5	; 0x05
    1dbe:	e0 2d       	mov	r30, r0
    1dc0:	11 82       	std	Z+1, r1	; 0x01
    1dc2:	10 82       	st	Z, r1
                current_proc->flags &= ~PROC_FLG_RUN;
    1dc4:	ea 81       	ldd	r30, Y+2	; 0x02
    1dc6:	fb 81       	ldd	r31, Y+3	; 0x03
    1dc8:	83 85       	ldd	r24, Z+11	; 0x0b
    1dca:	8d 7f       	andi	r24, 0xFD	; 253
    1dcc:	ea 81       	ldd	r30, Y+2	; 0x02
    1dce:	fb 81       	ldd	r31, Y+3	; 0x03
    1dd0:	83 87       	std	Z+11, r24	; 0x0b
#ifdef CONFIG_MP
    //Текущий процесс более не нужен, освобождаем его блокировку
    spin_unlock( &current_proc->lock );
    spin_lock( &sched->lock );
#endif // CONFIG_MP
    _sched_list_switch( sched );
    1dd2:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd4:	9d 81       	ldd	r25, Y+5	; 0x05
    1dd6:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <_sched_list_switch>
    // Изменять указатель будем при захваченной блокировке,
    // чтобы процессы на других процессорах не прочитали неизвестно что.
    current_proc = (proc_t *)xlist_head( sched->ready ); // Вытесняющая многозадачность же!
    1dda:	ec 81       	ldd	r30, Y+4	; 0x04
    1ddc:	fd 81       	ldd	r31, Y+5	; 0x05
    1dde:	82 81       	ldd	r24, Z+2	; 0x02
    1de0:	93 81       	ldd	r25, Z+3	; 0x03
    1de2:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <xlist_head>
    1de6:	9b 83       	std	Y+3, r25	; 0x03
    1de8:	8a 83       	std	Y+2, r24	; 0x02
    sched->current_proc = current_proc;
    1dea:	ec 81       	ldd	r30, Y+4	; 0x04
    1dec:	fd 81       	ldd	r31, Y+5	; 0x05
    1dee:	8a 81       	ldd	r24, Y+2	; 0x02
    1df0:	9b 81       	ldd	r25, Y+3	; 0x03
    1df2:	91 83       	std	Z+1, r25	; 0x01
    1df4:	80 83       	st	Z, r24
#ifdef CONFIG_MP
    spin_unlock( &sched->lock );
    spin_lock( &current_proc->lock );
#endif // CONFIG_MP
    //Хук "восстановление контекста"
    if( current_proc->rs_hook )current_proc->rs_hook( current_proc->arg );
    1df6:	ea 81       	ldd	r30, Y+2	; 0x02
    1df8:	fb 81       	ldd	r31, Y+3	; 0x03
    1dfa:	86 a1       	ldd	r24, Z+38	; 0x26
    1dfc:	97 a1       	ldd	r25, Z+39	; 0x27
    1dfe:	00 97       	sbiw	r24, 0x00	; 0
    1e00:	51 f0       	breq	.+20     	; 0x1e16 <sched_schedule+0x156>
    1e02:	ea 81       	ldd	r30, Y+2	; 0x02
    1e04:	fb 81       	ldd	r31, Y+3	; 0x03
    1e06:	26 a1       	ldd	r18, Z+38	; 0x26
    1e08:	37 a1       	ldd	r19, Z+39	; 0x27
    1e0a:	ea 81       	ldd	r30, Y+2	; 0x02
    1e0c:	fb 81       	ldd	r31, Y+3	; 0x03
    1e0e:	80 a5       	ldd	r24, Z+40	; 0x28
    1e10:	91 a5       	ldd	r25, Z+41	; 0x29
    1e12:	f9 01       	movw	r30, r18
    1e14:	09 95       	icall
#ifdef CONFIG_MP
    stack_t * ret_sp = current_proc->spointer;
    spin_unlock( &current_proc->lock );
    return ret_sp;
#else
    return current_proc->spointer;
    1e16:	ea 81       	ldd	r30, Y+2	; 0x02
    1e18:	fb 81       	ldd	r31, Y+3	; 0x03
    1e1a:	84 a5       	ldd	r24, Z+44	; 0x2c
    1e1c:	95 a5       	ldd	r25, Z+45	; 0x2d
#endif // CONFIG_MP
}
    1e1e:	27 96       	adiw	r28, 0x07	; 7
    1e20:	0f b6       	in	r0, 0x3f	; 63
    1e22:	f8 94       	cli
    1e24:	de bf       	out	0x3e, r29	; 62
    1e26:	0f be       	out	0x3f, r0	; 63
    1e28:	cd bf       	out	0x3d, r28	; 61
    1e2a:	cf 91       	pop	r28
    1e2c:	df 91       	pop	r29
    1e2e:	08 95       	ret

00001e30 <sched_reschedule>:
//----------------------------------------------------------------------------------------
// Функция перепланирования, переключает процессы в обработчике прерывания resched
stack_t * sched_reschedule( stack_t * current_sp )
{
    1e30:	df 93       	push	r29
    1e32:	cf 93       	push	r28
    1e34:	00 d0       	rcall	.+0      	; 0x1e36 <sched_reschedule+0x6>
    1e36:	00 d0       	rcall	.+0      	; 0x1e38 <sched_reschedule+0x8>
    1e38:	00 d0       	rcall	.+0      	; 0x1e3a <sched_reschedule+0xa>
    1e3a:	cd b7       	in	r28, 0x3d	; 61
    1e3c:	de b7       	in	r29, 0x3e	; 62
    1e3e:	9e 83       	std	Y+6, r25	; 0x06
    1e40:	8d 83       	std	Y+5, r24	; 0x05
#ifdef CONFIG_MP
    sched_t * sched = (sched_t *)kernel.sched + current_core();
#else
    sched_t * sched = (sched_t *)&kernel.sched;
    1e42:	8e e9       	ldi	r24, 0x9E	; 158
    1e44:	91 e0       	ldi	r25, 0x01	; 1
    1e46:	9c 83       	std	Y+4, r25	; 0x04
    1e48:	8b 83       	std	Y+3, r24	; 0x03
#endif // CONFIG_MP
    // Меняем только с локального процессора, блокировку sched->lock можно не захватывать!
    proc_t * current_proc = sched->current_proc;
    1e4a:	eb 81       	ldd	r30, Y+3	; 0x03
    1e4c:	fc 81       	ldd	r31, Y+4	; 0x04
    1e4e:	80 81       	ld	r24, Z
    1e50:	91 81       	ldd	r25, Z+1	; 0x01
    1e52:	9a 83       	std	Y+2, r25	; 0x02
    1e54:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    // А вот эту блокировку обязательно надо захватить!
    spin_lock( &current_proc->lock );
#endif // CONFIG_MP
    // Сохранение указателя стека
    current_proc->spointer = current_sp;
    1e56:	e9 81       	ldd	r30, Y+1	; 0x01
    1e58:	fa 81       	ldd	r31, Y+2	; 0x02
    1e5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e5e:	95 a7       	std	Z+45, r25	; 0x2d
    1e60:	84 a7       	std	Z+44, r24	; 0x2c
    // Хук "сохранение контекста"
    if( current_proc->sv_hook )current_proc->sv_hook( current_proc->arg );
    1e62:	e9 81       	ldd	r30, Y+1	; 0x01
    1e64:	fa 81       	ldd	r31, Y+2	; 0x02
    1e66:	84 a1       	ldd	r24, Z+36	; 0x24
    1e68:	95 a1       	ldd	r25, Z+37	; 0x25
    1e6a:	00 97       	sbiw	r24, 0x00	; 0
    1e6c:	51 f0       	breq	.+20     	; 0x1e82 <sched_reschedule+0x52>
    1e6e:	e9 81       	ldd	r30, Y+1	; 0x01
    1e70:	fa 81       	ldd	r31, Y+2	; 0x02
    1e72:	24 a1       	ldd	r18, Z+36	; 0x24
    1e74:	35 a1       	ldd	r19, Z+37	; 0x25
    1e76:	e9 81       	ldd	r30, Y+1	; 0x01
    1e78:	fa 81       	ldd	r31, Y+2	; 0x02
    1e7a:	80 a5       	ldd	r24, Z+40	; 0x28
    1e7c:	91 a5       	ldd	r25, Z+41	; 0x29
    1e7e:	f9 01       	movw	r30, r18
    1e80:	09 95       	icall
#ifdef CONFIG_MP
    spin_unlock( &current_proc->lock );
    spin_lock( &sched->lock );
#endif // CONFIG_MP
    _sched_list_switch( sched );
    1e82:	8b 81       	ldd	r24, Y+3	; 0x03
    1e84:	9c 81       	ldd	r25, Y+4	; 0x04
    1e86:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <_sched_list_switch>
    current_proc = (proc_t *)xlist_head( sched->ready ); // Вытесняющая многозадачность же!
    1e8a:	eb 81       	ldd	r30, Y+3	; 0x03
    1e8c:	fc 81       	ldd	r31, Y+4	; 0x04
    1e8e:	82 81       	ldd	r24, Z+2	; 0x02
    1e90:	93 81       	ldd	r25, Z+3	; 0x03
    1e92:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <xlist_head>
    1e96:	9a 83       	std	Y+2, r25	; 0x02
    1e98:	89 83       	std	Y+1, r24	; 0x01
    sched->current_proc = current_proc;
    1e9a:	eb 81       	ldd	r30, Y+3	; 0x03
    1e9c:	fc 81       	ldd	r31, Y+4	; 0x04
    1e9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ea0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ea2:	91 83       	std	Z+1, r25	; 0x01
    1ea4:	80 83       	st	Z, r24

#ifdef CONFIG_MP
    spin_lock(&current_proc->lock);
#endif // CONFIG_MP
    //Хук "восстановление контекста"
    if( current_proc->rs_hook )current_proc->rs_hook( current_proc->arg );
    1ea6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ea8:	fa 81       	ldd	r31, Y+2	; 0x02
    1eaa:	86 a1       	ldd	r24, Z+38	; 0x26
    1eac:	97 a1       	ldd	r25, Z+39	; 0x27
    1eae:	00 97       	sbiw	r24, 0x00	; 0
    1eb0:	51 f0       	breq	.+20     	; 0x1ec6 <sched_reschedule+0x96>
    1eb2:	e9 81       	ldd	r30, Y+1	; 0x01
    1eb4:	fa 81       	ldd	r31, Y+2	; 0x02
    1eb6:	26 a1       	ldd	r18, Z+38	; 0x26
    1eb8:	37 a1       	ldd	r19, Z+39	; 0x27
    1eba:	e9 81       	ldd	r30, Y+1	; 0x01
    1ebc:	fa 81       	ldd	r31, Y+2	; 0x02
    1ebe:	80 a5       	ldd	r24, Z+40	; 0x28
    1ec0:	91 a5       	ldd	r25, Z+41	; 0x29
    1ec2:	f9 01       	movw	r30, r18
    1ec4:	09 95       	icall
#ifdef CONFIG_MP
    stack_t * ret_sp = current_proc->spointer;
    spin_unlock( &current_proc->lock );
    return ret_sp;
#else
    return current_proc->spointer;
    1ec6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ec8:	fa 81       	ldd	r31, Y+2	; 0x02
    1eca:	84 a5       	ldd	r24, Z+44	; 0x2c
    1ecc:	95 a5       	ldd	r25, Z+45	; 0x2d
#endif // CONFIG_MP
}
    1ece:	26 96       	adiw	r28, 0x06	; 6
    1ed0:	0f b6       	in	r0, 0x3f	; 63
    1ed2:	f8 94       	cli
    1ed4:	de bf       	out	0x3e, r29	; 62
    1ed6:	0f be       	out	0x3f, r0	; 63
    1ed8:	cd bf       	out	0x3d, r28	; 61
    1eda:	cf 91       	pop	r28
    1edc:	df 91       	pop	r29
    1ede:	08 95       	ret

00001ee0 <sem_init_isr>:
*****************************************************************************************/
#include "../include/bugurt.h"

// Инициализация
void sem_init_isr( sem_t * sem, count_t count )
{
    1ee0:	df 93       	push	r29
    1ee2:	cf 93       	push	r28
    1ee4:	00 d0       	rcall	.+0      	; 0x1ee6 <sem_init_isr+0x6>
    1ee6:	00 d0       	rcall	.+0      	; 0x1ee8 <sem_init_isr+0x8>
    1ee8:	cd b7       	in	r28, 0x3d	; 61
    1eea:	de b7       	in	r29, 0x3e	; 62
    1eec:	9a 83       	std	Y+2, r25	; 0x02
    1eee:	89 83       	std	Y+1, r24	; 0x01
    1ef0:	7c 83       	std	Y+4, r23	; 0x04
    1ef2:	6b 83       	std	Y+3, r22	; 0x03
    xlist_init( (xlist_t *)sem );
    1ef4:	89 81       	ldd	r24, Y+1	; 0x01
    1ef6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef8:	0e 94 cf 10 	call	0x219e	; 0x219e <xlist_init>
    sem->counter = count;
    1efc:	e9 81       	ldd	r30, Y+1	; 0x01
    1efe:	fa 81       	ldd	r31, Y+2	; 0x02
    1f00:	8b 81       	ldd	r24, Y+3	; 0x03
    1f02:	9c 81       	ldd	r25, Y+4	; 0x04
    1f04:	92 8b       	std	Z+18, r25	; 0x12
    1f06:	81 8b       	std	Z+17, r24	; 0x11
}
    1f08:	0f 90       	pop	r0
    1f0a:	0f 90       	pop	r0
    1f0c:	0f 90       	pop	r0
    1f0e:	0f 90       	pop	r0
    1f10:	cf 91       	pop	r28
    1f12:	df 91       	pop	r29
    1f14:	08 95       	ret

00001f16 <_sem_lock>:

// То же, для внутреннего использования
bool_t _sem_lock( sem_t * sem )
{
    1f16:	df 93       	push	r29
    1f18:	cf 93       	push	r28
    1f1a:	00 d0       	rcall	.+0      	; 0x1f1c <_sem_lock+0x6>
    1f1c:	00 d0       	rcall	.+0      	; 0x1f1e <_sem_lock+0x8>
    1f1e:	0f 92       	push	r0
    1f20:	cd b7       	in	r28, 0x3d	; 61
    1f22:	de b7       	in	r29, 0x3e	; 62
    1f24:	9d 83       	std	Y+5, r25	; 0x05
    1f26:	8c 83       	std	Y+4, r24	; 0x04

    bool_t ret = 0;
    1f28:	1b 82       	std	Y+3, r1	; 0x03
    if( sem->counter != 0 )
    1f2a:	ec 81       	ldd	r30, Y+4	; 0x04
    1f2c:	fd 81       	ldd	r31, Y+5	; 0x05
    1f2e:	81 89       	ldd	r24, Z+17	; 0x11
    1f30:	92 89       	ldd	r25, Z+18	; 0x12
    1f32:	00 97       	sbiw	r24, 0x00	; 0
    1f34:	61 f0       	breq	.+24     	; 0x1f4e <_sem_lock+0x38>
    {
        sem->counter--;
    1f36:	ec 81       	ldd	r30, Y+4	; 0x04
    1f38:	fd 81       	ldd	r31, Y+5	; 0x05
    1f3a:	81 89       	ldd	r24, Z+17	; 0x11
    1f3c:	92 89       	ldd	r25, Z+18	; 0x12
    1f3e:	01 97       	sbiw	r24, 0x01	; 1
    1f40:	ec 81       	ldd	r30, Y+4	; 0x04
    1f42:	fd 81       	ldd	r31, Y+5	; 0x05
    1f44:	92 8b       	std	Z+18, r25	; 0x12
    1f46:	81 8b       	std	Z+17, r24	; 0x11
#ifdef CONFIG_MP
        spin_unlock( &sem->lock );// Освобождение блокировки семафора
#endif //CONFIG_MP
        ret = (bool_t)1;
    1f48:	81 e0       	ldi	r24, 0x01	; 1
    1f4a:	8b 83       	std	Y+3, r24	; 0x03
    1f4c:	16 c0       	rjmp	.+44     	; 0x1f7a <_sem_lock+0x64>
    }
    else
    {
        proc_t * proc = current_proc();
    1f4e:	0e 94 cc 00 	call	0x198	; 0x198 <current_proc>
    1f52:	9a 83       	std	Y+2, r25	; 0x02
    1f54:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
        spin_lock( &proc->lock );// Захват блокировки процесса
#endif //CONFIG_MP
        proc->flags |= PROC_FLG_QUEUE;
    1f56:	e9 81       	ldd	r30, Y+1	; 0x01
    1f58:	fa 81       	ldd	r31, Y+2	; 0x02
    1f5a:	83 85       	ldd	r24, Z+11	; 0x0b
    1f5c:	88 60       	ori	r24, 0x08	; 8
    1f5e:	e9 81       	ldd	r30, Y+1	; 0x01
    1f60:	fa 81       	ldd	r31, Y+2	; 0x02
    1f62:	83 87       	std	Z+11, r24	; 0x0b
        _proc_stop( proc );
    1f64:	89 81       	ldd	r24, Y+1	; 0x01
    1f66:	9a 81       	ldd	r25, Y+2	; 0x02
    1f68:	0e 94 a6 0c 	call	0x194c	; 0x194c <_proc_stop>
        gitem_insert( (gitem_t *)proc, (xlist_t *)sem );
    1f6c:	89 81       	ldd	r24, Y+1	; 0x01
    1f6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f70:	2c 81       	ldd	r18, Y+4	; 0x04
    1f72:	3d 81       	ldd	r19, Y+5	; 0x05
    1f74:	b9 01       	movw	r22, r18
    1f76:	0e 94 81 06 	call	0xd02	; 0xd02 <gitem_insert>
#ifdef CONFIG_MP
        spin_unlock( &proc->lock );// Освобождение блокировки процесса
#endif //CONFIG_MP
    }
    return ret;
    1f7a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1f7c:	0f 90       	pop	r0
    1f7e:	0f 90       	pop	r0
    1f80:	0f 90       	pop	r0
    1f82:	0f 90       	pop	r0
    1f84:	0f 90       	pop	r0
    1f86:	cf 91       	pop	r28
    1f88:	df 91       	pop	r29
    1f8a:	08 95       	ret

00001f8c <_sem_unlock>:

void _sem_unlock( sem_t * sem )
{
    1f8c:	df 93       	push	r29
    1f8e:	cf 93       	push	r28
    1f90:	00 d0       	rcall	.+0      	; 0x1f92 <_sem_unlock+0x6>
    1f92:	00 d0       	rcall	.+0      	; 0x1f94 <_sem_unlock+0x8>
    1f94:	cd b7       	in	r28, 0x3d	; 61
    1f96:	de b7       	in	r29, 0x3e	; 62
    1f98:	9c 83       	std	Y+4, r25	; 0x04
    1f9a:	8b 83       	std	Y+3, r24	; 0x03
    if( ((xlist_t *)sem)->index == (index_t)0  )
    1f9c:	eb 81       	ldd	r30, Y+3	; 0x03
    1f9e:	fc 81       	ldd	r31, Y+4	; 0x04
    1fa0:	80 89       	ldd	r24, Z+16	; 0x10
    1fa2:	88 23       	and	r24, r24
    1fa4:	51 f4       	brne	.+20     	; 0x1fba <_sem_unlock+0x2e>
    {
        sem->counter++;
    1fa6:	eb 81       	ldd	r30, Y+3	; 0x03
    1fa8:	fc 81       	ldd	r31, Y+4	; 0x04
    1faa:	81 89       	ldd	r24, Z+17	; 0x11
    1fac:	92 89       	ldd	r25, Z+18	; 0x12
    1fae:	01 96       	adiw	r24, 0x01	; 1
    1fb0:	eb 81       	ldd	r30, Y+3	; 0x03
    1fb2:	fc 81       	ldd	r31, Y+4	; 0x04
    1fb4:	92 8b       	std	Z+18, r25	; 0x12
    1fb6:	81 8b       	std	Z+17, r24	; 0x11
    1fb8:	15 c0       	rjmp	.+42     	; 0x1fe4 <_sem_unlock+0x58>
#ifdef CONFIG_MP
        spin_unlock( &sem->lock );
#endif //CONFIG_MP
        return;
    }
    proc_t * proc = (proc_t *)xlist_head((xlist_t *)sem);
    1fba:	8b 81       	ldd	r24, Y+3	; 0x03
    1fbc:	9c 81       	ldd	r25, Y+4	; 0x04
    1fbe:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <xlist_head>
    1fc2:	9a 83       	std	Y+2, r25	; 0x02
    1fc4:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );// Захват спин-блокировки процесса
#endif //CONFIG_MP
    proc->flags &= ~PROC_FLG_QUEUE;
    1fc6:	e9 81       	ldd	r30, Y+1	; 0x01
    1fc8:	fa 81       	ldd	r31, Y+2	; 0x02
    1fca:	83 85       	ldd	r24, Z+11	; 0x0b
    1fcc:	87 7f       	andi	r24, 0xF7	; 247
    1fce:	e9 81       	ldd	r30, Y+1	; 0x01
    1fd0:	fa 81       	ldd	r31, Y+2	; 0x02
    1fd2:	83 87       	std	Z+11, r24	; 0x0b
    gitem_cut( (gitem_t *)proc );
    1fd4:	89 81       	ldd	r24, Y+1	; 0x01
    1fd6:	9a 81       	ldd	r25, Y+2	; 0x02
    1fd8:	0e 94 de 07 	call	0xfbc	; 0xfbc <gitem_cut>
    _proc_run( proc );
    1fdc:	89 81       	ldd	r24, Y+1	; 0x01
    1fde:	9a 81       	ldd	r25, Y+2	; 0x02
    1fe0:	0e 94 1f 0c 	call	0x183e	; 0x183e <_proc_run>
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );// Освобождение спин-блокировки процесса
#endif //CONFIG_MP
}
    1fe4:	0f 90       	pop	r0
    1fe6:	0f 90       	pop	r0
    1fe8:	0f 90       	pop	r0
    1fea:	0f 90       	pop	r0
    1fec:	cf 91       	pop	r28
    1fee:	df 91       	pop	r29
    1ff0:	08 95       	ret

00001ff2 <sig_init_isr>:
*****************************************************************************************/
#include "../include/bugurt.h"
//========================================================================================
// Инициация
void sig_init_isr( sig_t * sig )
{
    1ff2:	df 93       	push	r29
    1ff4:	cf 93       	push	r28
    1ff6:	00 d0       	rcall	.+0      	; 0x1ff8 <sig_init_isr+0x6>
    1ff8:	cd b7       	in	r28, 0x3d	; 61
    1ffa:	de b7       	in	r29, 0x3e	; 62
    1ffc:	9a 83       	std	Y+2, r25	; 0x02
    1ffe:	89 83       	std	Y+1, r24	; 0x01
    {
        xlist_init( (xlist_t *)sig->sig_list + i );
        stat_init( (stat_t *)sig->sig_stat + i );
    }
#else
    xlist_init( (xlist_t *)sig );
    2000:	89 81       	ldd	r24, Y+1	; 0x01
    2002:	9a 81       	ldd	r25, Y+2	; 0x02
    2004:	0e 94 cf 10 	call	0x219e	; 0x219e <xlist_init>
#endif
}
    2008:	0f 90       	pop	r0
    200a:	0f 90       	pop	r0
    200c:	cf 91       	pop	r28
    200e:	df 91       	pop	r29
    2010:	08 95       	ret

00002012 <sig_wait_stage_1_isr>:
//========================================================================================
// Это выполнится при постановке процесса в список ожидания сигнала
void sig_wait_stage_1_isr( sig_t * sig )
{
    2012:	df 93       	push	r29
    2014:	cf 93       	push	r28
    2016:	00 d0       	rcall	.+0      	; 0x2018 <sig_wait_stage_1_isr+0x6>
    2018:	00 d0       	rcall	.+0      	; 0x201a <sig_wait_stage_1_isr+0x8>
    201a:	cd b7       	in	r28, 0x3d	; 61
    201c:	de b7       	in	r29, 0x3e	; 62
    201e:	9c 83       	std	Y+4, r25	; 0x04
    2020:	8b 83       	std	Y+3, r24	; 0x03
#ifdef CONFIG_MP
    spin_lock( &sig->lock );
#endif // CONFIG_MP
    proc_t * proc = current_proc();
    2022:	0e 94 cc 00 	call	0x198	; 0x198 <current_proc>
    2026:	9a 83       	std	Y+2, r25	; 0x02
    2028:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    // Останавливаем процесс
    _proc_stop(proc);
    202a:	89 81       	ldd	r24, Y+1	; 0x01
    202c:	9a 81       	ldd	r25, Y+2	; 0x02
    202e:	0e 94 a6 0c 	call	0x194c	; 0x194c <_proc_stop>
    proc->flags |= PROC_FLG_WAIT;
    2032:	e9 81       	ldd	r30, Y+1	; 0x01
    2034:	fa 81       	ldd	r31, Y+2	; 0x02
    2036:	83 85       	ldd	r24, Z+11	; 0x0b
    2038:	80 61       	ori	r24, 0x10	; 16
    203a:	e9 81       	ldd	r30, Y+1	; 0x01
    203c:	fa 81       	ldd	r31, Y+2	; 0x02
    203e:	83 87       	std	Z+11, r24	; 0x0b
        stat_inc( proc, (stat_t *)sig->sig_stat + sig_core );
    }
    spin_unlock( &proc->lock );
    spin_unlock( &sig->lock );
#else
    gitem_insert_group( (gitem_t *)proc, (xlist_t *)sig );
    2040:	89 81       	ldd	r24, Y+1	; 0x01
    2042:	9a 81       	ldd	r25, Y+2	; 0x02
    2044:	2b 81       	ldd	r18, Y+3	; 0x03
    2046:	3c 81       	ldd	r19, Y+4	; 0x04
    2048:	b9 01       	movw	r22, r18
    204a:	0e 94 dd 06 	call	0xdba	; 0xdba <gitem_insert_group>
#endif //CONFIG_MP
}
    204e:	0f 90       	pop	r0
    2050:	0f 90       	pop	r0
    2052:	0f 90       	pop	r0
    2054:	0f 90       	pop	r0
    2056:	cf 91       	pop	r28
    2058:	df 91       	pop	r29
    205a:	08 95       	ret

0000205c <sig_signal_isr>:
    enable_interrupts();
}
//========================================================================================
// Тоже самое что и предыдущие, олько для вызова из обработчиков прерываний и из критических секций
void sig_signal_isr( sig_t * sig )
{
    205c:	df 93       	push	r29
    205e:	cf 93       	push	r28
    2060:	00 d0       	rcall	.+0      	; 0x2062 <sig_signal_isr+0x6>
    2062:	00 d0       	rcall	.+0      	; 0x2064 <sig_signal_isr+0x8>
    2064:	cd b7       	in	r28, 0x3d	; 61
    2066:	de b7       	in	r29, 0x3e	; 62
    2068:	9c 83       	std	Y+4, r25	; 0x04
    206a:	8b 83       	std	Y+3, r24	; 0x03
    }
    resched(core);// Перепланировка
    spin_unlock( &proc->lock );// Освобождение блокировки процесса
    spin_unlock( &sig->lock );// Освобождение блокировки сигнала
#else
    if( ((xlist_t *)sig)->index == (index_t)0 )return;
    206c:	eb 81       	ldd	r30, Y+3	; 0x03
    206e:	fc 81       	ldd	r31, Y+4	; 0x04
    2070:	80 89       	ldd	r24, Z+16	; 0x10
    2072:	88 23       	and	r24, r24
    2074:	a9 f0       	breq	.+42     	; 0x20a0 <sig_signal_isr+0x44>
    proc_t * proc = (proc_t *)xlist_head( (xlist_t *)sig );
    2076:	8b 81       	ldd	r24, Y+3	; 0x03
    2078:	9c 81       	ldd	r25, Y+4	; 0x04
    207a:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <xlist_head>
    207e:	9a 83       	std	Y+2, r25	; 0x02
    2080:	89 83       	std	Y+1, r24	; 0x01
    gitem_fast_cut( (gitem_t *)proc );
    2082:	89 81       	ldd	r24, Y+1	; 0x01
    2084:	9a 81       	ldd	r25, Y+2	; 0x02
    2086:	0e 94 58 07 	call	0xeb0	; 0xeb0 <gitem_fast_cut>
    gitem_insert( (gitem_t *)proc, kernel.sched.ready );
    208a:	89 81       	ldd	r24, Y+1	; 0x01
    208c:	9a 81       	ldd	r25, Y+2	; 0x02
    208e:	20 91 a0 01 	lds	r18, 0x01A0
    2092:	30 91 a1 01 	lds	r19, 0x01A1
    2096:	b9 01       	movw	r22, r18
    2098:	0e 94 81 06 	call	0xd02	; 0xd02 <gitem_insert>
    resched();
    209c:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
#endif //CONFIG_MP
}
    20a0:	0f 90       	pop	r0
    20a2:	0f 90       	pop	r0
    20a4:	0f 90       	pop	r0
    20a6:	0f 90       	pop	r0
    20a8:	cf 91       	pop	r28
    20aa:	df 91       	pop	r29
    20ac:	08 95       	ret

000020ae <sig_broadcast_isr>:
//----------------------------------------------------------------------------------------
void sig_broadcast_isr( sig_t * sig )
{
    20ae:	df 93       	push	r29
    20b0:	cf 93       	push	r28
    20b2:	00 d0       	rcall	.+0      	; 0x20b4 <sig_broadcast_isr+0x6>
    20b4:	cd b7       	in	r28, 0x3d	; 61
    20b6:	de b7       	in	r29, 0x3e	; 62
    20b8:	9a 83       	std	Y+2, r25	; 0x02
    20ba:	89 83       	std	Y+1, r24	; 0x01

        resched(core);
    }
    spin_unlock( &sig->lock );
#else
    gitem_xlist_merge( (xlist_t *)sig, kernel.sched.ready );
    20bc:	20 91 a0 01 	lds	r18, 0x01A0
    20c0:	30 91 a1 01 	lds	r19, 0x01A1
    20c4:	89 81       	ldd	r24, Y+1	; 0x01
    20c6:	9a 81       	ldd	r25, Y+2	; 0x02
    20c8:	b9 01       	movw	r22, r18
    20ca:	0e 94 f5 07 	call	0xfea	; 0xfea <gitem_xlist_merge>
    resched();
    20ce:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
#endif //CONFIG_MP
}
    20d2:	0f 90       	pop	r0
    20d4:	0f 90       	pop	r0
    20d6:	cf 91       	pop	r28
    20d8:	df 91       	pop	r29
    20da:	08 95       	ret

000020dc <_clear_timer>:
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
//========================================================================================
void _clear_timer(timer_t * t)
{
    20dc:	df 93       	push	r29
    20de:	cf 93       	push	r28
    20e0:	00 d0       	rcall	.+0      	; 0x20e2 <_clear_timer+0x6>
    20e2:	cd b7       	in	r28, 0x3d	; 61
    20e4:	de b7       	in	r29, 0x3e	; 62
    20e6:	9a 83       	std	Y+2, r25	; 0x02
    20e8:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    core_id_t current_core = _enter_crit_sec();
    spin_lock( &kernel.timer_lock );
#else
    enter_crit_sec();
    20ea:	0e 94 2b 06 	call	0xc56	; 0xc56 <enter_crit_sec>
#endif //CONFIG_MP
    *t = kernel.timer;
    20ee:	80 91 f8 01 	lds	r24, 0x01F8
    20f2:	90 91 f9 01 	lds	r25, 0x01F9
    20f6:	e9 81       	ldd	r30, Y+1	; 0x01
    20f8:	fa 81       	ldd	r31, Y+2	; 0x02
    20fa:	91 83       	std	Z+1, r25	; 0x01
    20fc:	80 83       	st	Z, r24
#ifdef CONFIG_MP
    spin_unlock( &kernel.timer_lock );
    _exit_crit_sec(current_core);
#else
    exit_crit_sec();
    20fe:	0e 94 3d 06 	call	0xc7a	; 0xc7a <exit_crit_sec>
#endif //CONFIG_MP
}
    2102:	0f 90       	pop	r0
    2104:	0f 90       	pop	r0
    2106:	cf 91       	pop	r28
    2108:	df 91       	pop	r29
    210a:	08 95       	ret

0000210c <_timer>:
//----------------------------------------------------------------------------------------
timer_t _timer(timer_t t)
{
    210c:	df 93       	push	r29
    210e:	cf 93       	push	r28
    2110:	00 d0       	rcall	.+0      	; 0x2112 <_timer+0x6>
    2112:	00 d0       	rcall	.+0      	; 0x2114 <_timer+0x8>
    2114:	cd b7       	in	r28, 0x3d	; 61
    2116:	de b7       	in	r29, 0x3e	; 62
    2118:	9c 83       	std	Y+4, r25	; 0x04
    211a:	8b 83       	std	Y+3, r24	; 0x03
    timer_t ret;
#ifdef CONFIG_MP
    core_id_t current_core = _enter_crit_sec();
    spin_lock( &kernel.timer_lock );
#else
    enter_crit_sec();
    211c:	0e 94 2b 06 	call	0xc56	; 0xc56 <enter_crit_sec>
#endif //CONFIG_MP
    ret = kernel.timer - t;
    2120:	20 91 f8 01 	lds	r18, 0x01F8
    2124:	30 91 f9 01 	lds	r19, 0x01F9
    2128:	8b 81       	ldd	r24, Y+3	; 0x03
    212a:	9c 81       	ldd	r25, Y+4	; 0x04
    212c:	a9 01       	movw	r20, r18
    212e:	48 1b       	sub	r20, r24
    2130:	59 0b       	sbc	r21, r25
    2132:	ca 01       	movw	r24, r20
    2134:	9a 83       	std	Y+2, r25	; 0x02
    2136:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_unlock( &kernel.timer_lock );
    _exit_crit_sec(current_core);
#else
    exit_crit_sec();
    2138:	0e 94 3d 06 	call	0xc7a	; 0xc7a <exit_crit_sec>
#endif //CONFIG_MP
    return ret;
    213c:	89 81       	ldd	r24, Y+1	; 0x01
    213e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2140:	0f 90       	pop	r0
    2142:	0f 90       	pop	r0
    2144:	0f 90       	pop	r0
    2146:	0f 90       	pop	r0
    2148:	cf 91       	pop	r28
    214a:	df 91       	pop	r29
    214c:	08 95       	ret

0000214e <wait_time>:

//----------------------------------------------------------------------------------------
void wait_time(timer_t time)
{
    214e:	df 93       	push	r29
    2150:	cf 93       	push	r28
    2152:	00 d0       	rcall	.+0      	; 0x2154 <wait_time+0x6>
    2154:	00 d0       	rcall	.+0      	; 0x2156 <wait_time+0x8>
    2156:	0f 92       	push	r0
    2158:	cd b7       	in	r28, 0x3d	; 61
    215a:	de b7       	in	r29, 0x3e	; 62
    215c:	9d 83       	std	Y+5, r25	; 0x05
    215e:	8c 83       	std	Y+4, r24	; 0x04
    timer_t tmr;
    bool_t roll=(bool_t)1;
    2160:	81 e0       	ldi	r24, 0x01	; 1
    2162:	89 83       	std	Y+1, r24	; 0x01
    CLEAR_TIMER(tmr);
    2164:	ce 01       	movw	r24, r28
    2166:	02 96       	adiw	r24, 0x02	; 2
    2168:	0e 94 6e 10 	call	0x20dc	; 0x20dc <_clear_timer>
    216c:	0d c0       	rjmp	.+26     	; 0x2188 <wait_time+0x3a>
    while((bool_t)roll)
    {
        roll = (bool_t)( TIMER(tmr) < (timer_t)time );
    216e:	8a 81       	ldd	r24, Y+2	; 0x02
    2170:	9b 81       	ldd	r25, Y+3	; 0x03
    2172:	0e 94 86 10 	call	0x210c	; 0x210c <_timer>
    2176:	9c 01       	movw	r18, r24
    2178:	19 82       	std	Y+1, r1	; 0x01
    217a:	8c 81       	ldd	r24, Y+4	; 0x04
    217c:	9d 81       	ldd	r25, Y+5	; 0x05
    217e:	28 17       	cp	r18, r24
    2180:	39 07       	cpc	r19, r25
    2182:	10 f4       	brcc	.+4      	; 0x2188 <wait_time+0x3a>
    2184:	81 e0       	ldi	r24, 0x01	; 1
    2186:	89 83       	std	Y+1, r24	; 0x01
void wait_time(timer_t time)
{
    timer_t tmr;
    bool_t roll=(bool_t)1;
    CLEAR_TIMER(tmr);
    while((bool_t)roll)
    2188:	89 81       	ldd	r24, Y+1	; 0x01
    218a:	88 23       	and	r24, r24
    218c:	81 f7       	brne	.-32     	; 0x216e <wait_time+0x20>
    {
        roll = (bool_t)( TIMER(tmr) < (timer_t)time );
    }
}
    218e:	0f 90       	pop	r0
    2190:	0f 90       	pop	r0
    2192:	0f 90       	pop	r0
    2194:	0f 90       	pop	r0
    2196:	0f 90       	pop	r0
    2198:	cf 91       	pop	r28
    219a:	df 91       	pop	r29
    219c:	08 95       	ret

0000219e <xlist_init>:
**********************************************/
//Инициация
void xlist_init(
    xlist_t * xlist
)
{
    219e:	df 93       	push	r29
    21a0:	cf 93       	push	r28
    21a2:	00 d0       	rcall	.+0      	; 0x21a4 <xlist_init+0x6>
    21a4:	00 d0       	rcall	.+0      	; 0x21a6 <xlist_init+0x8>
    21a6:	cd b7       	in	r28, 0x3d	; 61
    21a8:	de b7       	in	r29, 0x3e	; 62
    21aa:	9c 83       	std	Y+4, r25	; 0x04
    21ac:	8b 83       	std	Y+3, r24	; 0x03
    count_t i;
    //список пуст
    xlist->index = (index_t)0;
    21ae:	eb 81       	ldd	r30, Y+3	; 0x03
    21b0:	fc 81       	ldd	r31, Y+4	; 0x04
    21b2:	10 8a       	std	Z+16, r1	; 0x10
    //обнуляем указатели
    for( i = 0; i < BITS_IN_INDEX_T; i++ )xlist->item[i] = (item_t *)0;
    21b4:	1a 82       	std	Y+2, r1	; 0x02
    21b6:	19 82       	std	Y+1, r1	; 0x01
    21b8:	10 c0       	rjmp	.+32     	; 0x21da <xlist_init+0x3c>
    21ba:	89 81       	ldd	r24, Y+1	; 0x01
    21bc:	9a 81       	ldd	r25, Y+2	; 0x02
    21be:	2b 81       	ldd	r18, Y+3	; 0x03
    21c0:	3c 81       	ldd	r19, Y+4	; 0x04
    21c2:	88 0f       	add	r24, r24
    21c4:	99 1f       	adc	r25, r25
    21c6:	f9 01       	movw	r30, r18
    21c8:	e8 0f       	add	r30, r24
    21ca:	f9 1f       	adc	r31, r25
    21cc:	11 82       	std	Z+1, r1	; 0x01
    21ce:	10 82       	st	Z, r1
    21d0:	89 81       	ldd	r24, Y+1	; 0x01
    21d2:	9a 81       	ldd	r25, Y+2	; 0x02
    21d4:	01 96       	adiw	r24, 0x01	; 1
    21d6:	9a 83       	std	Y+2, r25	; 0x02
    21d8:	89 83       	std	Y+1, r24	; 0x01
    21da:	89 81       	ldd	r24, Y+1	; 0x01
    21dc:	9a 81       	ldd	r25, Y+2	; 0x02
    21de:	88 30       	cpi	r24, 0x08	; 8
    21e0:	91 05       	cpc	r25, r1
    21e2:	58 f3       	brcs	.-42     	; 0x21ba <xlist_init+0x1c>
}
    21e4:	0f 90       	pop	r0
    21e6:	0f 90       	pop	r0
    21e8:	0f 90       	pop	r0
    21ea:	0f 90       	pop	r0
    21ec:	cf 91       	pop	r28
    21ee:	df 91       	pop	r29
    21f0:	08 95       	ret

000021f2 <xlist_head>:
//===========================================================================
//Поиск головы списка
item_t * xlist_head(xlist_t * xlist)
{
    21f2:	df 93       	push	r29
    21f4:	cf 93       	push	r28
    21f6:	00 d0       	rcall	.+0      	; 0x21f8 <xlist_head+0x6>
    21f8:	00 d0       	rcall	.+0      	; 0x21fa <xlist_head+0x8>
    21fa:	0f 92       	push	r0
    21fc:	cd b7       	in	r28, 0x3d	; 61
    21fe:	de b7       	in	r29, 0x3e	; 62
    2200:	9d 83       	std	Y+5, r25	; 0x05
    2202:	8c 83       	std	Y+4, r24	; 0x04
    item_t * ret_val = (item_t *)0;
    2204:	1b 82       	std	Y+3, r1	; 0x03
    2206:	1a 82       	std	Y+2, r1	; 0x02
    index_t index = xlist->index;
    2208:	ec 81       	ldd	r30, Y+4	; 0x04
    220a:	fd 81       	ldd	r31, Y+5	; 0x05
    220c:	80 89       	ldd	r24, Z+16	; 0x10
    220e:	89 83       	std	Y+1, r24	; 0x01

    if( index != (index_t)0 )
    2210:	89 81       	ldd	r24, Y+1	; 0x01
    2212:	88 23       	and	r24, r24
    2214:	81 f0       	breq	.+32     	; 0x2236 <xlist_head+0x44>
    {
        ret_val = xlist->item[ index_search( index ) ];
    2216:	89 81       	ldd	r24, Y+1	; 0x01
    2218:	0e 94 02 09 	call	0x1204	; 0x1204 <index_search>
    221c:	88 2f       	mov	r24, r24
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	2c 81       	ldd	r18, Y+4	; 0x04
    2222:	3d 81       	ldd	r19, Y+5	; 0x05
    2224:	88 0f       	add	r24, r24
    2226:	99 1f       	adc	r25, r25
    2228:	f9 01       	movw	r30, r18
    222a:	e8 0f       	add	r30, r24
    222c:	f9 1f       	adc	r31, r25
    222e:	80 81       	ld	r24, Z
    2230:	91 81       	ldd	r25, Z+1	; 0x01
    2232:	9b 83       	std	Y+3, r25	; 0x03
    2234:	8a 83       	std	Y+2, r24	; 0x02
    }
    return ret_val;
    2236:	8a 81       	ldd	r24, Y+2	; 0x02
    2238:	9b 81       	ldd	r25, Y+3	; 0x03
}
    223a:	0f 90       	pop	r0
    223c:	0f 90       	pop	r0
    223e:	0f 90       	pop	r0
    2240:	0f 90       	pop	r0
    2242:	0f 90       	pop	r0
    2244:	cf 91       	pop	r28
    2246:	df 91       	pop	r29
    2248:	08 95       	ret

0000224a <xlist_switch>:

//===========================================================================
// переключение указателя в массиве на следующий элемент, пригодится в планировщике
void xlist_switch(xlist_t * xlist, prio_t prio)
{
    224a:	df 93       	push	r29
    224c:	cf 93       	push	r28
    224e:	00 d0       	rcall	.+0      	; 0x2250 <xlist_switch+0x6>
    2250:	00 d0       	rcall	.+0      	; 0x2252 <xlist_switch+0x8>
    2252:	0f 92       	push	r0
    2254:	cd b7       	in	r28, 0x3d	; 61
    2256:	de b7       	in	r29, 0x3e	; 62
    2258:	9c 83       	std	Y+4, r25	; 0x04
    225a:	8b 83       	std	Y+3, r24	; 0x03
    225c:	6d 83       	std	Y+5, r22	; 0x05
    item_t ** current = xlist->item + prio;
    225e:	2b 81       	ldd	r18, Y+3	; 0x03
    2260:	3c 81       	ldd	r19, Y+4	; 0x04
    2262:	8d 81       	ldd	r24, Y+5	; 0x05
    2264:	88 2f       	mov	r24, r24
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	88 0f       	add	r24, r24
    226a:	99 1f       	adc	r25, r25
    226c:	82 0f       	add	r24, r18
    226e:	93 1f       	adc	r25, r19
    2270:	9a 83       	std	Y+2, r25	; 0x02
    2272:	89 83       	std	Y+1, r24	; 0x01
    *current = (*current)->next;
    2274:	e9 81       	ldd	r30, Y+1	; 0x01
    2276:	fa 81       	ldd	r31, Y+2	; 0x02
    2278:	01 90       	ld	r0, Z+
    227a:	f0 81       	ld	r31, Z
    227c:	e0 2d       	mov	r30, r0
    227e:	80 81       	ld	r24, Z
    2280:	91 81       	ldd	r25, Z+1	; 0x01
    2282:	e9 81       	ldd	r30, Y+1	; 0x01
    2284:	fa 81       	ldd	r31, Y+2	; 0x02
    2286:	91 83       	std	Z+1, r25	; 0x01
    2288:	80 83       	st	Z, r24
    //*current = (item_t *)*(item_t **)*(item_t ***)current;
}
    228a:	0f 90       	pop	r0
    228c:	0f 90       	pop	r0
    228e:	0f 90       	pop	r0
    2290:	0f 90       	pop	r0
    2292:	0f 90       	pop	r0
    2294:	cf 91       	pop	r28
    2296:	df 91       	pop	r29
    2298:	08 95       	ret

0000229a <raise_syscall_interrupt>:
/*
 */
#include <bugurt.h>
void raise_syscall_interrupt(void)
{
    229a:	df 93       	push	r29
    229c:	cf 93       	push	r28
    229e:	cd b7       	in	r28, 0x3d	; 61
    22a0:	de b7       	in	r29, 0x3e	; 62
    R2_on();
    22a2:	ab e2       	ldi	r26, 0x2B	; 43
    22a4:	b0 e0       	ldi	r27, 0x00	; 0
    22a6:	eb e2       	ldi	r30, 0x2B	; 43
    22a8:	f0 e0       	ldi	r31, 0x00	; 0
    22aa:	80 81       	ld	r24, Z
    22ac:	84 60       	ori	r24, 0x04	; 4
    22ae:	8c 93       	st	X, r24
    G2_off();
    22b0:	ab e2       	ldi	r26, 0x2B	; 43
    22b2:	b0 e0       	ldi	r27, 0x00	; 0
    22b4:	eb e2       	ldi	r30, 0x2B	; 43
    22b6:	f0 e0       	ldi	r31, 0x00	; 0
    22b8:	80 81       	ld	r24, Z
    22ba:	87 7f       	andi	r24, 0xF7	; 247
    22bc:	8c 93       	st	X, r24
    R2_off();
    22be:	ab e2       	ldi	r26, 0x2B	; 43
    22c0:	b0 e0       	ldi	r27, 0x00	; 0
    22c2:	eb e2       	ldi	r30, 0x2B	; 43
    22c4:	f0 e0       	ldi	r31, 0x00	; 0
    22c6:	80 81       	ld	r24, Z
    22c8:	8b 7f       	andi	r24, 0xFB	; 251
    22ca:	8c 93       	st	X, r24
    G2_on();
    22cc:	ab e2       	ldi	r26, 0x2B	; 43
    22ce:	b0 e0       	ldi	r27, 0x00	; 0
    22d0:	eb e2       	ldi	r30, 0x2B	; 43
    22d2:	f0 e0       	ldi	r31, 0x00	; 0
    22d4:	80 81       	ld	r24, Z
    22d6:	88 60       	ori	r24, 0x08	; 8
    22d8:	8c 93       	st	X, r24
}
    22da:	cf 91       	pop	r28
    22dc:	df 91       	pop	r29
    22de:	08 95       	ret

000022e0 <start_scheduler>:

void start_scheduler( void ){
    22e0:	df 93       	push	r29
    22e2:	cf 93       	push	r28
    22e4:	cd b7       	in	r28, 0x3d	; 61
    22e6:	de b7       	in	r29, 0x3e	; 62
    TIMSK2 |= 0x02;
    22e8:	a0 e7       	ldi	r26, 0x70	; 112
    22ea:	b0 e0       	ldi	r27, 0x00	; 0
    22ec:	e0 e7       	ldi	r30, 0x70	; 112
    22ee:	f0 e0       	ldi	r31, 0x00	; 0
    22f0:	80 81       	ld	r24, Z
    22f2:	82 60       	ori	r24, 0x02	; 2
    22f4:	8c 93       	st	X, r24
    EIMSK |= 0x02;
    22f6:	ad e3       	ldi	r26, 0x3D	; 61
    22f8:	b0 e0       	ldi	r27, 0x00	; 0
    22fa:	ed e3       	ldi	r30, 0x3D	; 61
    22fc:	f0 e0       	ldi	r31, 0x00	; 0
    22fe:	80 81       	ld	r24, Z
    2300:	82 60       	ori	r24, 0x02	; 2
    2302:	8c 93       	st	X, r24
    EIFR |= 0x02;
    2304:	ac e3       	ldi	r26, 0x3C	; 60
    2306:	b0 e0       	ldi	r27, 0x00	; 0
    2308:	ec e3       	ldi	r30, 0x3C	; 60
    230a:	f0 e0       	ldi	r31, 0x00	; 0
    230c:	80 81       	ld	r24, Z
    230e:	82 60       	ori	r24, 0x02	; 2
    2310:	8c 93       	st	X, r24
}
    2312:	cf 91       	pop	r28
    2314:	df 91       	pop	r29
    2316:	08 95       	ret

00002318 <blink_1>:
    TIMSK2 &= ~0x02;
    EIMSK &= ~0x02;
}

///----------------------------------------------------------------------------------------
void blink_1(void * t) {PORTB ^= 0x10;}
    2318:	df 93       	push	r29
    231a:	cf 93       	push	r28
    231c:	00 d0       	rcall	.+0      	; 0x231e <blink_1+0x6>
    231e:	cd b7       	in	r28, 0x3d	; 61
    2320:	de b7       	in	r29, 0x3e	; 62
    2322:	9a 83       	std	Y+2, r25	; 0x02
    2324:	89 83       	std	Y+1, r24	; 0x01
    2326:	a5 e2       	ldi	r26, 0x25	; 37
    2328:	b0 e0       	ldi	r27, 0x00	; 0
    232a:	e5 e2       	ldi	r30, 0x25	; 37
    232c:	f0 e0       	ldi	r31, 0x00	; 0
    232e:	90 81       	ld	r25, Z
    2330:	80 e1       	ldi	r24, 0x10	; 16
    2332:	89 27       	eor	r24, r25
    2334:	8c 93       	st	X, r24
    2336:	0f 90       	pop	r0
    2338:	0f 90       	pop	r0
    233a:	cf 91       	pop	r28
    233c:	df 91       	pop	r29
    233e:	08 95       	ret

00002340 <blink_2>:
void blink_2(void * t) {PORTB ^= 0x08;}
    2340:	df 93       	push	r29
    2342:	cf 93       	push	r28
    2344:	00 d0       	rcall	.+0      	; 0x2346 <blink_2+0x6>
    2346:	cd b7       	in	r28, 0x3d	; 61
    2348:	de b7       	in	r29, 0x3e	; 62
    234a:	9a 83       	std	Y+2, r25	; 0x02
    234c:	89 83       	std	Y+1, r24	; 0x01
    234e:	a5 e2       	ldi	r26, 0x25	; 37
    2350:	b0 e0       	ldi	r27, 0x00	; 0
    2352:	e5 e2       	ldi	r30, 0x25	; 37
    2354:	f0 e0       	ldi	r31, 0x00	; 0
    2356:	90 81       	ld	r25, Z
    2358:	88 e0       	ldi	r24, 0x08	; 8
    235a:	89 27       	eor	r24, r25
    235c:	8c 93       	st	X, r24
    235e:	0f 90       	pop	r0
    2360:	0f 90       	pop	r0
    2362:	cf 91       	pop	r28
    2364:	df 91       	pop	r29
    2366:	08 95       	ret

00002368 <blink_3>:
void blink_3(void * t) {PORTB ^= 0x04;}
    2368:	df 93       	push	r29
    236a:	cf 93       	push	r28
    236c:	00 d0       	rcall	.+0      	; 0x236e <blink_3+0x6>
    236e:	cd b7       	in	r28, 0x3d	; 61
    2370:	de b7       	in	r29, 0x3e	; 62
    2372:	9a 83       	std	Y+2, r25	; 0x02
    2374:	89 83       	std	Y+1, r24	; 0x01
    2376:	a5 e2       	ldi	r26, 0x25	; 37
    2378:	b0 e0       	ldi	r27, 0x00	; 0
    237a:	e5 e2       	ldi	r30, 0x25	; 37
    237c:	f0 e0       	ldi	r31, 0x00	; 0
    237e:	90 81       	ld	r25, Z
    2380:	84 e0       	ldi	r24, 0x04	; 4
    2382:	89 27       	eor	r24, r25
    2384:	8c 93       	st	X, r24
    2386:	0f 90       	pop	r0
    2388:	0f 90       	pop	r0
    238a:	cf 91       	pop	r28
    238c:	df 91       	pop	r29
    238e:	08 95       	ret

00002390 <blink_4>:
void blink_4(void * t) {PORTB ^= 0x02;}
    2390:	df 93       	push	r29
    2392:	cf 93       	push	r28
    2394:	00 d0       	rcall	.+0      	; 0x2396 <blink_4+0x6>
    2396:	cd b7       	in	r28, 0x3d	; 61
    2398:	de b7       	in	r29, 0x3e	; 62
    239a:	9a 83       	std	Y+2, r25	; 0x02
    239c:	89 83       	std	Y+1, r24	; 0x01
    239e:	a5 e2       	ldi	r26, 0x25	; 37
    23a0:	b0 e0       	ldi	r27, 0x00	; 0
    23a2:	e5 e2       	ldi	r30, 0x25	; 37
    23a4:	f0 e0       	ldi	r31, 0x00	; 0
    23a6:	90 81       	ld	r25, Z
    23a8:	82 e0       	ldi	r24, 0x02	; 2
    23aa:	89 27       	eor	r24, r25
    23ac:	8c 93       	st	X, r24
    23ae:	0f 90       	pop	r0
    23b0:	0f 90       	pop	r0
    23b2:	cf 91       	pop	r28
    23b4:	df 91       	pop	r29
    23b6:	08 95       	ret

000023b8 <blink_12>:
void blink_7(void * t) {PORTC ^= 0x10;}
void blink_8(void * t) {PORTC ^= 0x08;}
void blink_9(void * t) {PORTC ^= 0x04;}
void blink_10(void * t) {PORTC ^= 0x02;}
void blink_11(void * t) {PORTC ^= 0x01;}
void blink_12(void * t) {
    23b8:	df 93       	push	r29
    23ba:	cf 93       	push	r28
    23bc:	00 d0       	rcall	.+0      	; 0x23be <blink_12+0x6>
    23be:	cd b7       	in	r28, 0x3d	; 61
    23c0:	de b7       	in	r29, 0x3e	; 62
    23c2:	9a 83       	std	Y+2, r25	; 0x02
    23c4:	89 83       	std	Y+1, r24	; 0x01
    PORTB ^= 0x20;
    23c6:	a5 e2       	ldi	r26, 0x25	; 37
    23c8:	b0 e0       	ldi	r27, 0x00	; 0
    23ca:	e5 e2       	ldi	r30, 0x25	; 37
    23cc:	f0 e0       	ldi	r31, 0x00	; 0
    23ce:	90 81       	ld	r25, Z
    23d0:	80 e2       	ldi	r24, 0x20	; 32
    23d2:	89 27       	eor	r24, r25
    23d4:	8c 93       	st	X, r24
    blink_G3();
    23d6:	ab e2       	ldi	r26, 0x2B	; 43
    23d8:	b0 e0       	ldi	r27, 0x00	; 0
    23da:	eb e2       	ldi	r30, 0x2B	; 43
    23dc:	f0 e0       	ldi	r31, 0x00	; 0
    23de:	90 81       	ld	r25, Z
    23e0:	80 e4       	ldi	r24, 0x40	; 64
    23e2:	89 27       	eor	r24, r25
    23e4:	8c 93       	st	X, r24
    blink_R3();
    23e6:	ab e2       	ldi	r26, 0x2B	; 43
    23e8:	b0 e0       	ldi	r27, 0x00	; 0
    23ea:	eb e2       	ldi	r30, 0x2B	; 43
    23ec:	f0 e0       	ldi	r31, 0x00	; 0
    23ee:	90 81       	ld	r25, Z
    23f0:	80 e2       	ldi	r24, 0x20	; 32
    23f2:	89 27       	eor	r24, r25
    23f4:	8c 93       	st	X, r24
    }
    23f6:	0f 90       	pop	r0
    23f8:	0f 90       	pop	r0
    23fa:	cf 91       	pop	r28
    23fc:	df 91       	pop	r29
    23fe:	08 95       	ret

00002400 <main0>:
stack_t stack[4][128];

mutex_t mut;

void main0(void * t)
{
    2400:	df 93       	push	r29
    2402:	cf 93       	push	r28
    2404:	00 d0       	rcall	.+0      	; 0x2406 <main0+0x6>
    2406:	cd b7       	in	r28, 0x3d	; 61
    2408:	de b7       	in	r29, 0x3e	; 62
    240a:	9a 83       	std	Y+2, r25	; 0x02
    240c:	89 83       	std	Y+1, r24	; 0x01
    wait_time(2000);
    240e:	80 ed       	ldi	r24, 0xD0	; 208
    2410:	97 e0       	ldi	r25, 0x07	; 7
    2412:	0e 94 a7 10 	call	0x214e	; 0x214e <wait_time>
    while(1)
    {
        mutex_lock(&mut);
    2416:	82 eb       	ldi	r24, 0xB2	; 178
    2418:	94 e0       	ldi	r25, 0x04	; 4
    241a:	0e 94 49 04 	call	0x892	; 0x892 <mutex_lock>
        wait_time(500);
    241e:	84 ef       	ldi	r24, 0xF4	; 244
    2420:	91 e0       	ldi	r25, 0x01	; 1
    2422:	0e 94 a7 10 	call	0x214e	; 0x214e <wait_time>
        mutex_unlock(&mut);
    2426:	82 eb       	ldi	r24, 0xB2	; 178
    2428:	94 e0       	ldi	r25, 0x04	; 4
    242a:	0e 94 ad 04 	call	0x95a	; 0x95a <mutex_unlock>
    242e:	f3 cf       	rjmp	.-26     	; 0x2416 <main0+0x16>

00002430 <main1>:
    }
}
void main1(void * t)
{
    2430:	df 93       	push	r29
    2432:	cf 93       	push	r28
    2434:	00 d0       	rcall	.+0      	; 0x2436 <main1+0x6>
    2436:	0f 92       	push	r0
    2438:	cd b7       	in	r28, 0x3d	; 61
    243a:	de b7       	in	r29, 0x3e	; 62
    243c:	9b 83       	std	Y+3, r25	; 0x03
    243e:	8a 83       	std	Y+2, r24	; 0x02
    wait_time(2000);
    2440:	80 ed       	ldi	r24, 0xD0	; 208
    2442:	97 e0       	ldi	r25, 0x07	; 7
    2444:	0e 94 a7 10 	call	0x214e	; 0x214e <wait_time>
    while(1)
    {
        bool_t test = mutex_try_lock( &mut );
    2448:	82 eb       	ldi	r24, 0xB2	; 178
    244a:	94 e0       	ldi	r25, 0x04	; 4
    244c:	0e 94 80 04 	call	0x900	; 0x900 <mutex_try_lock>
    2450:	89 83       	std	Y+1, r24	; 0x01
        if(test)
    2452:	89 81       	ldd	r24, Y+1	; 0x01
    2454:	88 23       	and	r24, r24
    2456:	c1 f3       	breq	.-16     	; 0x2448 <main1+0x18>
        {
            wait_time(500);
    2458:	84 ef       	ldi	r24, 0xF4	; 244
    245a:	91 e0       	ldi	r25, 0x01	; 1
    245c:	0e 94 a7 10 	call	0x214e	; 0x214e <wait_time>
            mutex_unlock( &mut );
    2460:	82 eb       	ldi	r24, 0xB2	; 178
    2462:	94 e0       	ldi	r25, 0x04	; 4
    2464:	0e 94 ad 04 	call	0x95a	; 0x95a <mutex_unlock>
    2468:	ef cf       	rjmp	.-34     	; 0x2448 <main1+0x18>

0000246a <main2>:
        }

    }
}
void main2(void * t)
{
    246a:	df 93       	push	r29
    246c:	cf 93       	push	r28
    246e:	00 d0       	rcall	.+0      	; 0x2470 <main2+0x6>
    2470:	cd b7       	in	r28, 0x3d	; 61
    2472:	de b7       	in	r29, 0x3e	; 62
    2474:	9a 83       	std	Y+2, r25	; 0x02
    2476:	89 83       	std	Y+1, r24	; 0x01
    wait_time(2000);
    2478:	80 ed       	ldi	r24, 0xD0	; 208
    247a:	97 e0       	ldi	r25, 0x07	; 7
    247c:	0e 94 a7 10 	call	0x214e	; 0x214e <wait_time>
    while(1)
    {
        wait_time(500);
    2480:	84 ef       	ldi	r24, 0xF4	; 244
    2482:	91 e0       	ldi	r25, 0x01	; 1
    2484:	0e 94 a7 10 	call	0x214e	; 0x214e <wait_time>
    2488:	fb cf       	rjmp	.-10     	; 0x2480 <main2+0x16>

0000248a <main3>:
    248a:	df 93       	push	r29
    248c:	cf 93       	push	r28
    248e:	00 d0       	rcall	.+0      	; 0x2490 <main3+0x6>
    2490:	cd b7       	in	r28, 0x3d	; 61
    2492:	de b7       	in	r29, 0x3e	; 62
    2494:	9a 83       	std	Y+2, r25	; 0x02
    2496:	89 83       	std	Y+1, r24	; 0x01
    2498:	80 ed       	ldi	r24, 0xD0	; 208
    249a:	97 e0       	ldi	r25, 0x07	; 7
    249c:	0e 94 a7 10 	call	0x214e	; 0x214e <wait_time>
    24a0:	82 eb       	ldi	r24, 0xB2	; 178
    24a2:	94 e0       	ldi	r25, 0x04	; 4
    24a4:	0e 94 49 04 	call	0x892	; 0x892 <mutex_lock>
    24a8:	83 ef       	ldi	r24, 0xF3	; 243
    24aa:	91 e0       	ldi	r25, 0x01	; 1
    24ac:	0e 94 a7 10 	call	0x214e	; 0x214e <wait_time>
    24b0:	82 eb       	ldi	r24, 0xB2	; 178
    24b2:	94 e0       	ldi	r25, 0x04	; 4
    24b4:	0e 94 ad 04 	call	0x95a	; 0x95a <mutex_unlock>
    24b8:	85 ef       	ldi	r24, 0xF5	; 245
    24ba:	91 e0       	ldi	r25, 0x01	; 1
    24bc:	0e 94 a7 10 	call	0x214e	; 0x214e <wait_time>
    24c0:	ef cf       	rjmp	.-34     	; 0x24a0 <main3+0x16>

000024c2 <idle_main>:
        wait_time(501);
    }
}

void idle_main(void *arg)
{
    24c2:	df 93       	push	r29
    24c4:	cf 93       	push	r28
    24c6:	00 d0       	rcall	.+0      	; 0x24c8 <idle_main+0x6>
    24c8:	cd b7       	in	r28, 0x3d	; 61
    24ca:	de b7       	in	r29, 0x3e	; 62
    24cc:	9a 83       	std	Y+2, r25	; 0x02
    24ce:	89 83       	std	Y+1, r24	; 0x01
    while(1)
    {
         wait_time(500);
    24d0:	84 ef       	ldi	r24, 0xF4	; 244
    24d2:	91 e0       	ldi	r25, 0x01	; 1
    24d4:	0e 94 a7 10 	call	0x214e	; 0x214e <wait_time>
    24d8:	fb cf       	rjmp	.-10     	; 0x24d0 <idle_main+0xe>

000024da <main>:
    }
}

int main(void)
{
    24da:	8f 92       	push	r8
    24dc:	af 92       	push	r10
    24de:	bf 92       	push	r11
    24e0:	cf 92       	push	r12
    24e2:	ef 92       	push	r14
    24e4:	ff 92       	push	r15
    24e6:	0f 93       	push	r16
    24e8:	1f 93       	push	r17
    24ea:	df 93       	push	r29
    24ec:	cf 93       	push	r28
    24ee:	cd b7       	in	r28, 0x3d	; 61
    24f0:	de b7       	in	r29, 0x3e	; 62
    init_bugurt();
    24f2:	0e 94 6f 01 	call	0x2de	; 0x2de <init_bugurt>

    TCCR2A = 0x02;//
    24f6:	e0 eb       	ldi	r30, 0xB0	; 176
    24f8:	f0 e0       	ldi	r31, 0x00	; 0
    24fa:	82 e0       	ldi	r24, 0x02	; 2
    24fc:	80 83       	st	Z, r24
    TCCR2B = 0x05;// prescaler=128
    24fe:	e1 eb       	ldi	r30, 0xB1	; 177
    2500:	f0 e0       	ldi	r31, 0x00	; 0
    2502:	85 e0       	ldi	r24, 0x05	; 5
    2504:	80 83       	st	Z, r24
    OCR2A  = 124;
    2506:	e3 eb       	ldi	r30, 0xB3	; 179
    2508:	f0 e0       	ldi	r31, 0x00	; 0
    250a:	8c e7       	ldi	r24, 0x7C	; 124
    250c:	80 83       	st	Z, r24
    OCR2B  = 0x00;
    250e:	e4 eb       	ldi	r30, 0xB4	; 180
    2510:	f0 e0       	ldi	r31, 0x00	; 0
    2512:	10 82       	st	Z, r1
    TIMSK2 = 0x00; // shceduler not started
    2514:	e0 e7       	ldi	r30, 0x70	; 112
    2516:	f0 e0       	ldi	r31, 0x00	; 0
    2518:	10 82       	st	Z, r1
    TIFR2  = 0x00;
    251a:	e7 e3       	ldi	r30, 0x37	; 55
    251c:	f0 e0       	ldi	r31, 0x00	; 0
    251e:	10 82       	st	Z, r1

    EICRA = 0x08; //falling edge
    2520:	e9 e6       	ldi	r30, 0x69	; 105
    2522:	f0 e0       	ldi	r31, 0x00	; 0
    2524:	88 e0       	ldi	r24, 0x08	; 8
    2526:	80 83       	st	Z, r24
    EIMSK = 0x00; //resched generates int1, mask 0x02
    2528:	ed e3       	ldi	r30, 0x3D	; 61
    252a:	f0 e0       	ldi	r31, 0x00	; 0
    252c:	10 82       	st	Z, r1

    DDRB = 0x3F;
    252e:	e4 e2       	ldi	r30, 0x24	; 36
    2530:	f0 e0       	ldi	r31, 0x00	; 0
    2532:	8f e3       	ldi	r24, 0x3F	; 63
    2534:	80 83       	st	Z, r24
    PORTB = 0x00;
    2536:	e5 e2       	ldi	r30, 0x25	; 37
    2538:	f0 e0       	ldi	r31, 0x00	; 0
    253a:	10 82       	st	Z, r1
    DDRC = 0x3F;
    253c:	e7 e2       	ldi	r30, 0x27	; 39
    253e:	f0 e0       	ldi	r31, 0x00	; 0
    2540:	8f e3       	ldi	r24, 0x3F	; 63
    2542:	80 83       	st	Z, r24
    PORTC = 0x00;
    2544:	e8 e2       	ldi	r30, 0x28	; 40
    2546:	f0 e0       	ldi	r31, 0x00	; 0
    2548:	10 82       	st	Z, r1
    DDRD = 0xFE;
    254a:	ea e2       	ldi	r30, 0x2A	; 42
    254c:	f0 e0       	ldi	r31, 0x00	; 0
    254e:	8e ef       	ldi	r24, 0xFE	; 254
    2550:	80 83       	st	Z, r24
    PORTD = 0x00;
    2552:	eb e2       	ldi	r30, 0x2B	; 43
    2554:	f0 e0       	ldi	r31, 0x00	; 0
    2556:	10 82       	st	Z, r1

    G1_on();
    2558:	ab e2       	ldi	r26, 0x2B	; 43
    255a:	b0 e0       	ldi	r27, 0x00	; 0
    255c:	eb e2       	ldi	r30, 0x2B	; 43
    255e:	f0 e0       	ldi	r31, 0x00	; 0
    2560:	80 81       	ld	r24, Z
    2562:	80 61       	ori	r24, 0x10	; 16
    2564:	8c 93       	st	X, r24
    G2_on();
    2566:	ab e2       	ldi	r26, 0x2B	; 43
    2568:	b0 e0       	ldi	r27, 0x00	; 0
    256a:	eb e2       	ldi	r30, 0x2B	; 43
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	80 81       	ld	r24, Z
    2570:	88 60       	ori	r24, 0x08	; 8
    2572:	8c 93       	st	X, r24
    R3_on();
    2574:	ab e2       	ldi	r26, 0x2B	; 43
    2576:	b0 e0       	ldi	r27, 0x00	; 0
    2578:	eb e2       	ldi	r30, 0x2B	; 43
    257a:	f0 e0       	ldi	r31, 0x00	; 0
    257c:	80 81       	ld	r24, Z
    257e:	80 62       	ori	r24, 0x20	; 32
    2580:	8c 93       	st	X, r24

    proc_init_isr(&proc[0], main0, blink_1, blink_1, 0, &stack[0][127], 1, 2, 0);
    2582:	82 eb       	ldi	r24, 0xB2	; 178
    2584:	92 e0       	ldi	r25, 0x02	; 2
    2586:	dc 01       	movw	r26, r24
    2588:	a1 58       	subi	r26, 0x81	; 129
    258a:	bf 4f       	sbci	r27, 0xFF	; 255
    258c:	8a ef       	ldi	r24, 0xFA	; 250
    258e:	91 e0       	ldi	r25, 0x01	; 1
    2590:	20 e0       	ldi	r18, 0x00	; 0
    2592:	32 e1       	ldi	r19, 0x12	; 18
    2594:	4c e8       	ldi	r20, 0x8C	; 140
    2596:	51 e1       	ldi	r21, 0x11	; 17
    2598:	ec e8       	ldi	r30, 0x8C	; 140
    259a:	f1 e1       	ldi	r31, 0x11	; 17
    259c:	b9 01       	movw	r22, r18
    259e:	9f 01       	movw	r18, r30
    25a0:	00 e0       	ldi	r16, 0x00	; 0
    25a2:	10 e0       	ldi	r17, 0x00	; 0
    25a4:	7d 01       	movw	r14, r26
    25a6:	cc 24       	eor	r12, r12
    25a8:	c3 94       	inc	r12
    25aa:	aa 24       	eor	r10, r10
    25ac:	bb 24       	eor	r11, r11
    25ae:	68 94       	set
    25b0:	a1 f8       	bld	r10, 1
    25b2:	88 24       	eor	r8, r8
    25b4:	0e 94 97 0b 	call	0x172e	; 0x172e <proc_init_isr>
    proc_init_isr(&proc[1], main1, blink_2, blink_2, 0, &stack[1][127], 2, 3, 0);
    25b8:	82 eb       	ldi	r24, 0xB2	; 178
    25ba:	92 e0       	ldi	r25, 0x02	; 2
    25bc:	dc 01       	movw	r26, r24
    25be:	a1 50       	subi	r26, 0x01	; 1
    25c0:	bf 4f       	sbci	r27, 0xFF	; 255
    25c2:	88 e2       	ldi	r24, 0x28	; 40
    25c4:	92 e0       	ldi	r25, 0x02	; 2
    25c6:	28 e1       	ldi	r18, 0x18	; 24
    25c8:	32 e1       	ldi	r19, 0x12	; 18
    25ca:	40 ea       	ldi	r20, 0xA0	; 160
    25cc:	51 e1       	ldi	r21, 0x11	; 17
    25ce:	e0 ea       	ldi	r30, 0xA0	; 160
    25d0:	f1 e1       	ldi	r31, 0x11	; 17
    25d2:	b9 01       	movw	r22, r18
    25d4:	9f 01       	movw	r18, r30
    25d6:	00 e0       	ldi	r16, 0x00	; 0
    25d8:	10 e0       	ldi	r17, 0x00	; 0
    25da:	7d 01       	movw	r14, r26
    25dc:	cc 24       	eor	r12, r12
    25de:	68 94       	set
    25e0:	c1 f8       	bld	r12, 1
    25e2:	0f 2e       	mov	r0, r31
    25e4:	f3 e0       	ldi	r31, 0x03	; 3
    25e6:	af 2e       	mov	r10, r31
    25e8:	bb 24       	eor	r11, r11
    25ea:	f0 2d       	mov	r31, r0
    25ec:	88 24       	eor	r8, r8
    25ee:	0e 94 97 0b 	call	0x172e	; 0x172e <proc_init_isr>
    proc_init_isr(&proc[2], main2, blink_3, blink_3, 0, &stack[2][127], 2, 4, 0);// Типа реального времени
    25f2:	82 eb       	ldi	r24, 0xB2	; 178
    25f4:	92 e0       	ldi	r25, 0x02	; 2
    25f6:	dc 01       	movw	r26, r24
    25f8:	a1 58       	subi	r26, 0x81	; 129
    25fa:	be 4f       	sbci	r27, 0xFE	; 254
    25fc:	86 e5       	ldi	r24, 0x56	; 86
    25fe:	92 e0       	ldi	r25, 0x02	; 2
    2600:	25 e3       	ldi	r18, 0x35	; 53
    2602:	32 e1       	ldi	r19, 0x12	; 18
    2604:	44 eb       	ldi	r20, 0xB4	; 180
    2606:	51 e1       	ldi	r21, 0x11	; 17
    2608:	e4 eb       	ldi	r30, 0xB4	; 180
    260a:	f1 e1       	ldi	r31, 0x11	; 17
    260c:	b9 01       	movw	r22, r18
    260e:	9f 01       	movw	r18, r30
    2610:	00 e0       	ldi	r16, 0x00	; 0
    2612:	10 e0       	ldi	r17, 0x00	; 0
    2614:	7d 01       	movw	r14, r26
    2616:	cc 24       	eor	r12, r12
    2618:	68 94       	set
    261a:	c1 f8       	bld	r12, 1
    261c:	aa 24       	eor	r10, r10
    261e:	bb 24       	eor	r11, r11
    2620:	68 94       	set
    2622:	a2 f8       	bld	r10, 2
    2624:	88 24       	eor	r8, r8
    2626:	0e 94 97 0b 	call	0x172e	; 0x172e <proc_init_isr>
    proc_init_isr(&proc[3], main3, blink_4, blink_4, 0, &stack[3][127], 3, 4, 0);
    262a:	82 eb       	ldi	r24, 0xB2	; 178
    262c:	92 e0       	ldi	r25, 0x02	; 2
    262e:	dc 01       	movw	r26, r24
    2630:	a1 50       	subi	r26, 0x01	; 1
    2632:	be 4f       	sbci	r27, 0xFE	; 254
    2634:	84 e8       	ldi	r24, 0x84	; 132
    2636:	92 e0       	ldi	r25, 0x02	; 2
    2638:	25 e4       	ldi	r18, 0x45	; 69
    263a:	32 e1       	ldi	r19, 0x12	; 18
    263c:	48 ec       	ldi	r20, 0xC8	; 200
    263e:	51 e1       	ldi	r21, 0x11	; 17
    2640:	e8 ec       	ldi	r30, 0xC8	; 200
    2642:	f1 e1       	ldi	r31, 0x11	; 17
    2644:	b9 01       	movw	r22, r18
    2646:	9f 01       	movw	r18, r30
    2648:	00 e0       	ldi	r16, 0x00	; 0
    264a:	10 e0       	ldi	r17, 0x00	; 0
    264c:	7d 01       	movw	r14, r26
    264e:	0f 2e       	mov	r0, r31
    2650:	f3 e0       	ldi	r31, 0x03	; 3
    2652:	cf 2e       	mov	r12, r31
    2654:	f0 2d       	mov	r31, r0
    2656:	aa 24       	eor	r10, r10
    2658:	bb 24       	eor	r11, r11
    265a:	68 94       	set
    265c:	a2 f8       	bld	r10, 2
    265e:	88 24       	eor	r8, r8
    2660:	0e 94 97 0b 	call	0x172e	; 0x172e <proc_init_isr>
    kernel.idle.rs_hook = blink_12;
    2664:	8c ed       	ldi	r24, 0xDC	; 220
    2666:	91 e1       	ldi	r25, 0x11	; 17
    2668:	90 93 ef 01 	sts	0x01EF, r25
    266c:	80 93 ee 01 	sts	0x01EE, r24
    kernel.idle.sv_hook = blink_12;
    2670:	8c ed       	ldi	r24, 0xDC	; 220
    2672:	91 e1       	ldi	r25, 0x11	; 17
    2674:	90 93 ed 01 	sts	0x01ED, r25
    2678:	80 93 ec 01 	sts	0x01EC, r24

    proc_run_isr(&proc[0]);
    267c:	8a ef       	ldi	r24, 0xFA	; 250
    267e:	91 e0       	ldi	r25, 0x01	; 1
    2680:	0e 94 3d 0c 	call	0x187a	; 0x187a <proc_run_isr>
    proc_run_isr(&proc[1]);
    2684:	88 e2       	ldi	r24, 0x28	; 40
    2686:	92 e0       	ldi	r25, 0x02	; 2
    2688:	0e 94 3d 0c 	call	0x187a	; 0x187a <proc_run_isr>
    proc_run_isr(&proc[2]);
    268c:	86 e5       	ldi	r24, 0x56	; 86
    268e:	92 e0       	ldi	r25, 0x02	; 2
    2690:	0e 94 3d 0c 	call	0x187a	; 0x187a <proc_run_isr>
    proc_run_isr(&proc[3]);
    2694:	84 e8       	ldi	r24, 0x84	; 132
    2696:	92 e0       	ldi	r25, 0x02	; 2
    2698:	0e 94 3d 0c 	call	0x187a	; 0x187a <proc_run_isr>

    mutex_init_isr(&mut,1);
    269c:	82 eb       	ldi	r24, 0xB2	; 178
    269e:	94 e0       	ldi	r25, 0x04	; 4
    26a0:	61 e0       	ldi	r22, 0x01	; 1
    26a2:	0e 94 f6 09 	call	0x13ec	; 0x13ec <mutex_init_isr>

    start_bugurt();
    26a6:	0e 94 94 01 	call	0x328	; 0x328 <start_bugurt>
    // Insert code

    return 0;
    26aa:	80 e0       	ldi	r24, 0x00	; 0
    26ac:	90 e0       	ldi	r25, 0x00	; 0
}
    26ae:	cf 91       	pop	r28
    26b0:	df 91       	pop	r29
    26b2:	1f 91       	pop	r17
    26b4:	0f 91       	pop	r16
    26b6:	ff 90       	pop	r15
    26b8:	ef 90       	pop	r14
    26ba:	cf 90       	pop	r12
    26bc:	bf 90       	pop	r11
    26be:	af 90       	pop	r10
    26c0:	8f 90       	pop	r8
    26c2:	08 95       	ret

000026c4 <_exit>:
    26c4:	f8 94       	cli

000026c6 <__stop_program>:
    26c6:	ff cf       	rjmp	.-2      	; 0x26c6 <__stop_program>
