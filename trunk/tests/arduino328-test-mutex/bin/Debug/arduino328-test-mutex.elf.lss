
bin/Debug/arduino328-test-mutex.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00002646  000026da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002646  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003c3  00800102  00800102  000026dc  2**0
                  ALLOC
  3 .stab         000070c8  00000000  00000000  000026dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000367d  00000000  00000000  000097a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       8:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__vector_2>
       c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 2a 01 	jmp	0x254	; 0x254 <__vector_7>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      54:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

00000068 <syscall_routine>:
      68:	43 02 8c 02 a6 02 c0 02 da 02 f3 02 56 03 67 03     C...........V.g.
      78:	77 03 87 03 97 03 a7 03 be 03 d8 03 e8 03 fe 03     w...............
      88:	35 04 6c 04                                         5.l.

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e6 e4       	ldi	r30, 0x46	; 70
      a0:	f6 e2       	ldi	r31, 0x26	; 38
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <.do_copy_data_start>

000000a4 <.do_copy_data_loop>:
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0

000000a8 <.do_copy_data_start>:
      a8:	a2 30       	cpi	r26, 0x02	; 2
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <.do_copy_data_loop>

000000ae <__do_clear_bss>:
      ae:	14 e0       	ldi	r17, 0x04	; 4
      b0:	a2 e0       	ldi	r26, 0x02	; 2
      b2:	b1 e0       	ldi	r27, 0x01	; 1
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	a5 3c       	cpi	r26, 0xC5	; 197
      ba:	b1 07       	cpc	r27, r17
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 2c 12 	call	0x2458	; 0x2458 <main>
      c2:	0c 94 21 13 	jmp	0x2642	; 0x2642 <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <osbme_store_context>:
      ca:	2f 92       	push	r2
      cc:	2f b6       	in	r2, 0x3f	; 63
      ce:	2f 92       	push	r2
      d0:	3f 92       	push	r3
      d2:	4f 92       	push	r4
      d4:	5f 92       	push	r5
      d6:	6f 92       	push	r6
      d8:	7f 92       	push	r7
      da:	8f 92       	push	r8
      dc:	9f 92       	push	r9
      de:	af 92       	push	r10
      e0:	bf 92       	push	r11
      e2:	cf 92       	push	r12
      e4:	df 92       	push	r13
      e6:	ef 92       	push	r14
      e8:	ff 92       	push	r15
      ea:	0f 93       	push	r16
      ec:	1f 93       	push	r17
      ee:	2f 93       	push	r18
      f0:	3f 93       	push	r19
      f2:	4f 93       	push	r20
      f4:	5f 93       	push	r21
      f6:	6f 93       	push	r22
      f8:	7f 93       	push	r23
      fa:	8f 93       	push	r24
      fc:	9f 93       	push	r25
      fe:	af 93       	push	r26
     100:	bf 93       	push	r27
     102:	cf 93       	push	r28
     104:	df 93       	push	r29
     106:	ef 93       	push	r30
     108:	ff 93       	push	r31
     10a:	ed b7       	in	r30, 0x3d	; 61
     10c:	fe b7       	in	r31, 0x3e	; 62
     10e:	21 a1       	ldd	r18, Z+33	; 0x21
     110:	30 a1       	ldd	r19, Z+32	; 0x20
     112:	01 a2       	std	Z+33, r0	; 0x21
     114:	10 a2       	std	Z+32, r1	; 0x20
     116:	11 24       	eor	r1, r1
     118:	8d b7       	in	r24, 0x3d	; 61
     11a:	9e b7       	in	r25, 0x3e	; 62
     11c:	2f 93       	push	r18
     11e:	3f 93       	push	r19
     120:	08 95       	ret

00000122 <osbme_load_context>:
     122:	3f 91       	pop	r19
     124:	2f 91       	pop	r18
     126:	9e bf       	out	0x3e, r25	; 62
     128:	8d bf       	out	0x3d, r24	; 61
     12a:	fe b7       	in	r31, 0x3e	; 62
     12c:	ed b7       	in	r30, 0x3d	; 61
     12e:	10 a0       	ldd	r1, Z+32	; 0x20
     130:	01 a0       	ldd	r0, Z+33	; 0x21
     132:	30 a3       	std	Z+32, r19	; 0x20
     134:	21 a3       	std	Z+33, r18	; 0x21
     136:	ff 91       	pop	r31
     138:	ef 91       	pop	r30
     13a:	df 91       	pop	r29
     13c:	cf 91       	pop	r28
     13e:	bf 91       	pop	r27
     140:	af 91       	pop	r26
     142:	9f 91       	pop	r25
     144:	8f 91       	pop	r24
     146:	7f 91       	pop	r23
     148:	6f 91       	pop	r22
     14a:	5f 91       	pop	r21
     14c:	4f 91       	pop	r20
     14e:	3f 91       	pop	r19
     150:	2f 91       	pop	r18
     152:	1f 91       	pop	r17
     154:	0f 91       	pop	r16
     156:	ff 90       	pop	r15
     158:	ef 90       	pop	r14
     15a:	df 90       	pop	r13
     15c:	cf 90       	pop	r12
     15e:	bf 90       	pop	r11
     160:	af 90       	pop	r10
     162:	9f 90       	pop	r9
     164:	8f 90       	pop	r8
     166:	7f 90       	pop	r7
     168:	6f 90       	pop	r6
     16a:	5f 90       	pop	r5
     16c:	4f 90       	pop	r4
     16e:	3f 90       	pop	r3
     170:	2f 90       	pop	r2
     172:	2f be       	out	0x3f, r2	; 63
     174:	2f 90       	pop	r2
     176:	08 95       	ret

00000178 <disable_interrupts>:
//Внешние функции, специфичные для AVR
extern void start_scheduler( void );
extern void stop_scheduler( void );
// Просто функции, специфичные для AVR
void disable_interrupts(void)
{
     178:	df 93       	push	r29
     17a:	cf 93       	push	r28
     17c:	cd b7       	in	r28, 0x3d	; 61
     17e:	de b7       	in	r29, 0x3e	; 62
    cli();
     180:	f8 94       	cli
}
     182:	cf 91       	pop	r28
     184:	df 91       	pop	r29
     186:	08 95       	ret

00000188 <enable_interrupts>:
void enable_interrupts(void)
{
     188:	df 93       	push	r29
     18a:	cf 93       	push	r28
     18c:	cd b7       	in	r28, 0x3d	; 61
     18e:	de b7       	in	r29, 0x3e	; 62
    sei();
     190:	78 94       	sei
}
     192:	cf 91       	pop	r28
     194:	df 91       	pop	r29
     196:	08 95       	ret

00000198 <current_proc>:

proc_t * current_proc(void)
{
     198:	df 93       	push	r29
     19a:	cf 93       	push	r28
     19c:	cd b7       	in	r28, 0x3d	; 61
     19e:	de b7       	in	r29, 0x3e	; 62
    return kernel.sched.current_proc;
     1a0:	80 91 9e 01 	lds	r24, 0x019E
     1a4:	90 91 9f 01 	lds	r25, 0x019F
}
     1a8:	cf 91       	pop	r28
     1aa:	df 91       	pop	r29
     1ac:	08 95       	ret

000001ae <proc_stack_init>:

void * proc_stack_init(stack_t * sstart, code_t code, void * arg)
{
     1ae:	df 93       	push	r29
     1b0:	cf 93       	push	r28
     1b2:	00 d0       	rcall	.+0      	; 0x1b4 <proc_stack_init+0x6>
     1b4:	00 d0       	rcall	.+0      	; 0x1b6 <proc_stack_init+0x8>
     1b6:	00 d0       	rcall	.+0      	; 0x1b8 <proc_stack_init+0xa>
     1b8:	cd b7       	in	r28, 0x3d	; 61
     1ba:	de b7       	in	r29, 0x3e	; 62
     1bc:	9a 83       	std	Y+2, r25	; 0x02
     1be:	89 83       	std	Y+1, r24	; 0x01
     1c0:	7c 83       	std	Y+4, r23	; 0x04
     1c2:	6b 83       	std	Y+3, r22	; 0x03
     1c4:	5e 83       	std	Y+6, r21	; 0x06
     1c6:	4d 83       	std	Y+5, r20	; 0x05
    return osbme_init_stack( (void *)sstart, (osbme_code_t)proc_run_wrapper, (void *)arg );
     1c8:	4b e2       	ldi	r20, 0x2B	; 43
     1ca:	53 e0       	ldi	r21, 0x03	; 3
     1cc:	89 81       	ldd	r24, Y+1	; 0x01
     1ce:	9a 81       	ldd	r25, Y+2	; 0x02
     1d0:	2d 81       	ldd	r18, Y+5	; 0x05
     1d2:	3e 81       	ldd	r19, Y+6	; 0x06
     1d4:	ba 01       	movw	r22, r20
     1d6:	a9 01       	movw	r20, r18
     1d8:	0e 94 8e 04 	call	0x91c	; 0x91c <osbme_init_stack>
}
     1dc:	26 96       	adiw	r28, 0x06	; 6
     1de:	0f b6       	in	r0, 0x3f	; 63
     1e0:	f8 94       	cli
     1e2:	de bf       	out	0x3e, r29	; 62
     1e4:	0f be       	out	0x3f, r0	; 63
     1e6:	cd bf       	out	0x3d, r28	; 61
     1e8:	cf 91       	pop	r28
     1ea:	df 91       	pop	r29
     1ec:	08 95       	ret

000001ee <resched>:
//Через этот указатель будет вызываться обработчик прерывания
void (*kernel_isr)(void);

// Функция перепланировки
void resched(void)
{
     1ee:	df 93       	push	r29
     1f0:	cf 93       	push	r28
     1f2:	cd b7       	in	r28, 0x3d	; 61
     1f4:	de b7       	in	r29, 0x3e	; 62
    resched_flag = (bool_t)1;
     1f6:	81 e0       	ldi	r24, 0x01	; 1
     1f8:	80 93 00 01 	sts	0x0100, r24
}
     1fc:	cf 91       	pop	r28
     1fe:	df 91       	pop	r29
     200:	08 95       	ret

00000202 <kernel_process_switch>:

__attribute__((naked)) void kernel_process_switch(void)
{
    //Сразу же после обработки отложенных прерываний передаем управление процессу
    kernel_sp = osbme_store_context();
     202:	0e 94 65 00 	call	0xca	; 0xca <osbme_store_context>
     206:	90 93 9d 01 	sts	0x019D, r25
     20a:	80 93 9c 01 	sts	0x019C, r24
    osbme_load_context( proc_sp );
     20e:	80 91 9a 01 	lds	r24, 0x019A
     212:	90 91 9b 01 	lds	r25, 0x019B
     216:	0e 94 91 00 	call	0x122	; 0x122 <osbme_load_context>
    __asm__ __volatile__("reti"::);/// Дада, именно reti, мы же типа прерывания счас обрабатывали
     21a:	18 95       	reti

0000021c <kernel_thread>:
    osbme_load_context( kernel_sp );
    __asm__ __volatile__("ret"::);
}
///================================================================
void kernel_thread(void)
{
     21c:	df 93       	push	r29
     21e:	cf 93       	push	r28
     220:	cd b7       	in	r28, 0x3d	; 61
     222:	de b7       	in	r29, 0x3e	; 62
    while(1)
    {
        // Если надо перепланировать - перепланируем
        if( resched_flag != (bool_t)0 )
     224:	80 91 00 01 	lds	r24, 0x0100
     228:	88 23       	and	r24, r24
     22a:	61 f0       	breq	.+24     	; 0x244 <kernel_thread+0x28>
        {
            resched_flag = (bool_t)0;
     22c:	10 92 00 01 	sts	0x0100, r1
            proc_sp = sched_reschedule( proc_sp );
     230:	80 91 9a 01 	lds	r24, 0x019A
     234:	90 91 9b 01 	lds	r25, 0x019B
     238:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <sched_reschedule>
     23c:	90 93 9b 01 	sts	0x019B, r25
     240:	80 93 9a 01 	sts	0x019A, r24
        }
        /// Прямая передача управления от ядра к процессу, прерывания запрещены
        kernel_process_switch();//В результате выполнения этого прерывания будут разрешены
     244:	0e 94 01 01 	call	0x202	; 0x202 <kernel_process_switch>
        /// Сюда можно попасть только из прерывания, либо из процесса, при этом прерывания опять таки запрещены
        // Обработка прерывания
        kernel_isr();
     248:	e0 91 98 01 	lds	r30, 0x0198
     24c:	f0 91 99 01 	lds	r31, 0x0199
     250:	09 95       	icall
     252:	e8 cf       	rjmp	.-48     	; 0x224 <kernel_thread+0x8>

00000254 <__vector_7>:
    }
}

// А вот и первое определение обработчика прерывания
BUGURT_INTERRUPT(SYSTEM_TIMER_ISR)
     254:	0e 94 65 00 	call	0xca	; 0xca <osbme_store_context>
     258:	90 93 9b 01 	sts	0x019B, r25
     25c:	80 93 9a 01 	sts	0x019A, r24
     260:	8d e3       	ldi	r24, 0x3D	; 61
     262:	91 e0       	ldi	r25, 0x01	; 1
     264:	90 93 99 01 	sts	0x0199, r25
     268:	80 93 98 01 	sts	0x0198, r24
     26c:	80 91 9c 01 	lds	r24, 0x019C
     270:	90 91 9d 01 	lds	r25, 0x019D
     274:	0e 94 91 00 	call	0x122	; 0x122 <osbme_load_context>
     278:	08 95       	ret

0000027a <__vector_7_func>:
{
     27a:	df 93       	push	r29
     27c:	cf 93       	push	r28
     27e:	cd b7       	in	r28, 0x3d	; 61
     280:	de b7       	in	r29, 0x3e	; 62
    kernel.timer++;
     282:	80 91 f8 01 	lds	r24, 0x01F8
     286:	90 91 f9 01 	lds	r25, 0x01F9
     28a:	01 96       	adiw	r24, 0x01	; 1
     28c:	90 93 f9 01 	sts	0x01F9, r25
     290:	80 93 f8 01 	sts	0x01F8, r24
    proc_sp = sched_schedule( proc_sp );
     294:	80 91 9a 01 	lds	r24, 0x019A
     298:	90 91 9b 01 	lds	r25, 0x019B
     29c:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <sched_schedule>
     2a0:	90 93 9b 01 	sts	0x019B, r25
     2a4:	80 93 9a 01 	sts	0x019A, r24
}
     2a8:	cf 91       	pop	r28
     2aa:	df 91       	pop	r29
     2ac:	08 95       	ret

000002ae <init_bugurt>:

/***************************************************************************************************************/
// Функции общего пользования

void init_bugurt(void)
{
     2ae:	df 93       	push	r29
     2b0:	cf 93       	push	r28
     2b2:	cd b7       	in	r28, 0x3d	; 61
     2b4:	de b7       	in	r29, 0x3e	; 62
    cli();
     2b6:	f8 94       	cli
    kernel_init();
     2b8:	0e 94 90 09 	call	0x1320	; 0x1320 <kernel_init>
    proc_sp = osbme_init_stack( &idle_stack[CONFIG_IDLE_STACK_SIZE-1], idle_main, 0);
     2bc:	87 e9       	ldi	r24, 0x97	; 151
     2be:	91 e0       	ldi	r25, 0x01	; 1
     2c0:	20 e2       	ldi	r18, 0x20	; 32
     2c2:	32 e1       	ldi	r19, 0x12	; 18
     2c4:	b9 01       	movw	r22, r18
     2c6:	40 e0       	ldi	r20, 0x00	; 0
     2c8:	50 e0       	ldi	r21, 0x00	; 0
     2ca:	0e 94 8e 04 	call	0x91c	; 0x91c <osbme_init_stack>
     2ce:	90 93 9b 01 	sts	0x019B, r25
     2d2:	80 93 9a 01 	sts	0x019A, r24
    kernel.idle.spointer = proc_sp;
     2d6:	80 91 9a 01 	lds	r24, 0x019A
     2da:	90 91 9b 01 	lds	r25, 0x019B
     2de:	90 93 f5 01 	sts	0x01F5, r25
     2e2:	80 93 f4 01 	sts	0x01F4, r24
    kernel.sched.nested_crit_sec = (count_t)1;
     2e6:	81 e0       	ldi	r24, 0x01	; 1
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	90 93 c7 01 	sts	0x01C7, r25
     2ee:	80 93 c6 01 	sts	0x01C6, r24
}
     2f2:	cf 91       	pop	r28
     2f4:	df 91       	pop	r29
     2f6:	08 95       	ret

000002f8 <start_bugurt>:
void start_bugurt(void)
{
     2f8:	df 93       	push	r29
     2fa:	cf 93       	push	r28
     2fc:	cd b7       	in	r28, 0x3d	; 61
     2fe:	de b7       	in	r29, 0x3e	; 62
    start_scheduler();
     300:	0e 94 3f 11 	call	0x227e	; 0x227e <start_scheduler>
    kernel.sched.nested_crit_sec = (count_t)0;
     304:	10 92 c7 01 	sts	0x01C7, r1
     308:	10 92 c6 01 	sts	0x01C6, r1
    kernel_thread();
     30c:	0e 94 0e 01 	call	0x21c	; 0x21c <kernel_thread>
}
     310:	cf 91       	pop	r28
     312:	df 91       	pop	r29
     314:	08 95       	ret

00000316 <do_syscall>:
    scall_mutex_try_lock,
    scall_mutex_unlock
};

void do_syscall(void)
{
     316:	df 93       	push	r29
     318:	cf 93       	push	r28
     31a:	00 d0       	rcall	.+0      	; 0x31c <do_syscall+0x6>
     31c:	00 d0       	rcall	.+0      	; 0x31e <do_syscall+0x8>
     31e:	00 d0       	rcall	.+0      	; 0x320 <do_syscall+0xa>
     320:	cd b7       	in	r28, 0x3d	; 61
     322:	de b7       	in	r29, 0x3e	; 62
    if( syscall_num != (unsigned char)0 )
     324:	80 91 02 01 	lds	r24, 0x0102
     328:	88 23       	and	r24, r24
     32a:	01 f1       	breq	.+64     	; 0x36c <do_syscall+0x56>
    {
        code_t syscall_func;
        syscall_func = (code_t)pgm_read_word(syscall_routine + syscall_num);
     32c:	80 91 02 01 	lds	r24, 0x0102
     330:	88 2f       	mov	r24, r24
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	88 0f       	add	r24, r24
     336:	99 1f       	adc	r25, r25
     338:	88 59       	subi	r24, 0x98	; 152
     33a:	9f 4f       	sbci	r25, 0xFF	; 255
     33c:	9c 83       	std	Y+4, r25	; 0x04
     33e:	8b 83       	std	Y+3, r24	; 0x03
     340:	8b 81       	ldd	r24, Y+3	; 0x03
     342:	9c 81       	ldd	r25, Y+4	; 0x04
     344:	fc 01       	movw	r30, r24
     346:	85 91       	lpm	r24, Z+
     348:	94 91       	lpm	r25, Z+
     34a:	9a 83       	std	Y+2, r25	; 0x02
     34c:	89 83       	std	Y+1, r24	; 0x01
     34e:	fc 83       	std	Y+4, r31	; 0x04
     350:	eb 83       	std	Y+3, r30	; 0x03
     352:	89 81       	ldd	r24, Y+1	; 0x01
     354:	9a 81       	ldd	r25, Y+2	; 0x02
     356:	9e 83       	std	Y+6, r25	; 0x06
     358:	8d 83       	std	Y+5, r24	; 0x05
        syscall_func(syscall_arg);
     35a:	80 91 03 01 	lds	r24, 0x0103
     35e:	90 91 04 01 	lds	r25, 0x0104
     362:	ed 81       	ldd	r30, Y+5	; 0x05
     364:	fe 81       	ldd	r31, Y+6	; 0x06
     366:	09 95       	icall
        syscall_num = (unsigned char)0;
     368:	10 92 02 01 	sts	0x0102, r1
    }
}
     36c:	26 96       	adiw	r28, 0x06	; 6
     36e:	0f b6       	in	r0, 0x3f	; 63
     370:	f8 94       	cli
     372:	de bf       	out	0x3e, r29	; 62
     374:	0f be       	out	0x3f, r0	; 63
     376:	cd bf       	out	0x3d, r28	; 61
     378:	cf 91       	pop	r28
     37a:	df 91       	pop	r29
     37c:	08 95       	ret

0000037e <__vector_2>:
{
    unsigned char num;
    void * arg;
} syscall_data_t;

BUGURT_INTERRUPT(SYSCALL_ISR)
     37e:	0e 94 65 00 	call	0xca	; 0xca <osbme_store_context>
     382:	90 93 9b 01 	sts	0x019B, r25
     386:	80 93 9a 01 	sts	0x019A, r24
     38a:	82 ed       	ldi	r24, 0xD2	; 210
     38c:	91 e0       	ldi	r25, 0x01	; 1
     38e:	90 93 99 01 	sts	0x0199, r25
     392:	80 93 98 01 	sts	0x0198, r24
     396:	80 91 9c 01 	lds	r24, 0x019C
     39a:	90 91 9d 01 	lds	r25, 0x019D
     39e:	0e 94 91 00 	call	0x122	; 0x122 <osbme_load_context>
     3a2:	08 95       	ret

000003a4 <__vector_2_func>:
{
     3a4:	df 93       	push	r29
     3a6:	cf 93       	push	r28
     3a8:	00 d0       	rcall	.+0      	; 0x3aa <__vector_2_func+0x6>
     3aa:	00 d0       	rcall	.+0      	; 0x3ac <__vector_2_func+0x8>
     3ac:	cd b7       	in	r28, 0x3d	; 61
     3ae:	de b7       	in	r29, 0x3e	; 62
    unsigned char * tos;
    unsigned short temp;
    /// Извлечение syscall_num и syscall_arg из стека процесса
    tos = (unsigned char *)proc_sp + PROC_STACK_OFFSET;
     3b0:	80 91 9a 01 	lds	r24, 0x019A
     3b4:	90 91 9b 01 	lds	r25, 0x019B
     3b8:	07 96       	adiw	r24, 0x07	; 7
     3ba:	9c 83       	std	Y+4, r25	; 0x04
     3bc:	8b 83       	std	Y+3, r24	; 0x03
    temp = (unsigned short)*tos++;
     3be:	eb 81       	ldd	r30, Y+3	; 0x03
     3c0:	fc 81       	ldd	r31, Y+4	; 0x04
     3c2:	80 81       	ld	r24, Z
     3c4:	88 2f       	mov	r24, r24
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	9a 83       	std	Y+2, r25	; 0x02
     3ca:	89 83       	std	Y+1, r24	; 0x01
     3cc:	8b 81       	ldd	r24, Y+3	; 0x03
     3ce:	9c 81       	ldd	r25, Y+4	; 0x04
     3d0:	01 96       	adiw	r24, 0x01	; 1
     3d2:	9c 83       	std	Y+4, r25	; 0x04
     3d4:	8b 83       	std	Y+3, r24	; 0x03
    temp <<= 8;
     3d6:	89 81       	ldd	r24, Y+1	; 0x01
     3d8:	9a 81       	ldd	r25, Y+2	; 0x02
     3da:	98 2f       	mov	r25, r24
     3dc:	88 27       	eor	r24, r24
     3de:	9a 83       	std	Y+2, r25	; 0x02
     3e0:	89 83       	std	Y+1, r24	; 0x01
    temp |= (unsigned short)*tos;
     3e2:	eb 81       	ldd	r30, Y+3	; 0x03
     3e4:	fc 81       	ldd	r31, Y+4	; 0x04
     3e6:	80 81       	ld	r24, Z
     3e8:	28 2f       	mov	r18, r24
     3ea:	30 e0       	ldi	r19, 0x00	; 0
     3ec:	89 81       	ldd	r24, Y+1	; 0x01
     3ee:	9a 81       	ldd	r25, Y+2	; 0x02
     3f0:	82 2b       	or	r24, r18
     3f2:	93 2b       	or	r25, r19
     3f4:	9a 83       	std	Y+2, r25	; 0x02
     3f6:	89 83       	std	Y+1, r24	; 0x01

    syscall_num = ((syscall_data_t *)temp)->num;
     3f8:	e9 81       	ldd	r30, Y+1	; 0x01
     3fa:	fa 81       	ldd	r31, Y+2	; 0x02
     3fc:	80 81       	ld	r24, Z
     3fe:	80 93 02 01 	sts	0x0102, r24
    syscall_arg = ((syscall_data_t *)temp)->arg;
     402:	e9 81       	ldd	r30, Y+1	; 0x01
     404:	fa 81       	ldd	r31, Y+2	; 0x02
     406:	81 81       	ldd	r24, Z+1	; 0x01
     408:	92 81       	ldd	r25, Z+2	; 0x02
     40a:	90 93 04 01 	sts	0x0104, r25
     40e:	80 93 03 01 	sts	0x0103, r24

    do_syscall();
     412:	0e 94 8b 01 	call	0x316	; 0x316 <do_syscall>
}
     416:	0f 90       	pop	r0
     418:	0f 90       	pop	r0
     41a:	0f 90       	pop	r0
     41c:	0f 90       	pop	r0
     41e:	cf 91       	pop	r28
     420:	df 91       	pop	r29
     422:	08 95       	ret

00000424 <_syscall>:

syscall_data_t * _syscall( syscall_data_t * arg )
{
     424:	df 93       	push	r29
     426:	cf 93       	push	r28
     428:	00 d0       	rcall	.+0      	; 0x42a <_syscall+0x6>
     42a:	cd b7       	in	r28, 0x3d	; 61
     42c:	de b7       	in	r29, 0x3e	; 62
     42e:	9a 83       	std	Y+2, r25	; 0x02
     430:	89 83       	std	Y+1, r24	; 0x01
    cli();
     432:	f8 94       	cli
    raise_syscall_interrupt();
     434:	0e 94 1c 11 	call	0x2238	; 0x2238 <raise_syscall_interrupt>
    sei();
     438:	78 94       	sei
    return arg;
     43a:	89 81       	ldd	r24, Y+1	; 0x01
     43c:	9a 81       	ldd	r25, Y+2	; 0x02
}
     43e:	0f 90       	pop	r0
     440:	0f 90       	pop	r0
     442:	cf 91       	pop	r28
     444:	df 91       	pop	r29
     446:	08 95       	ret

00000448 <syscall>:

static syscall_data_t scdata;
void syscall( unsigned char num, void * arg )
{
     448:	df 93       	push	r29
     44a:	cf 93       	push	r28
     44c:	00 d0       	rcall	.+0      	; 0x44e <syscall+0x6>
     44e:	0f 92       	push	r0
     450:	cd b7       	in	r28, 0x3d	; 61
     452:	de b7       	in	r29, 0x3e	; 62
     454:	89 83       	std	Y+1, r24	; 0x01
     456:	7b 83       	std	Y+3, r23	; 0x03
     458:	6a 83       	std	Y+2, r22	; 0x02
     scdata.num = num;
     45a:	89 81       	ldd	r24, Y+1	; 0x01
     45c:	80 93 15 01 	sts	0x0115, r24
     scdata.arg = arg;
     460:	8a 81       	ldd	r24, Y+2	; 0x02
     462:	9b 81       	ldd	r25, Y+3	; 0x03
     464:	90 93 17 01 	sts	0x0117, r25
     468:	80 93 16 01 	sts	0x0116, r24
     _syscall( &scdata );
     46c:	85 e1       	ldi	r24, 0x15	; 21
     46e:	91 e0       	ldi	r25, 0x01	; 1
     470:	0e 94 12 02 	call	0x424	; 0x424 <_syscall>
     SYSCALL_DELLAY();
     474:	00 00       	nop
     476:	00 00       	nop
     478:	00 00       	nop
}
     47a:	0f 90       	pop	r0
     47c:	0f 90       	pop	r0
     47e:	0f 90       	pop	r0
     480:	cf 91       	pop	r28
     482:	df 91       	pop	r29
     484:	08 95       	ret

00000486 <scall_proc_init>:
///                 ОБРАБОТЧИКИ СИСТЕМНЫХ ВЫЗОВОВ
///=================================================================
///                   Управление процессами
//0
void scall_proc_init( void * arg )
{
     486:	8f 92       	push	r8
     488:	af 92       	push	r10
     48a:	bf 92       	push	r11
     48c:	cf 92       	push	r12
     48e:	df 92       	push	r13
     490:	ef 92       	push	r14
     492:	ff 92       	push	r15
     494:	0f 93       	push	r16
     496:	1f 93       	push	r17
     498:	df 93       	push	r29
     49a:	cf 93       	push	r28
     49c:	00 d0       	rcall	.+0      	; 0x49e <scall_proc_init+0x18>
     49e:	cd b7       	in	r28, 0x3d	; 61
     4a0:	de b7       	in	r29, 0x3e	; 62
     4a2:	9a 83       	std	Y+2, r25	; 0x02
     4a4:	89 83       	std	Y+1, r24	; 0x01
    proc_init_isr(
     4a6:	e9 81       	ldd	r30, Y+1	; 0x01
     4a8:	fa 81       	ldd	r31, Y+2	; 0x02
     4aa:	80 81       	ld	r24, Z
     4ac:	91 81       	ldd	r25, Z+1	; 0x01
     4ae:	e9 81       	ldd	r30, Y+1	; 0x01
     4b0:	fa 81       	ldd	r31, Y+2	; 0x02
     4b2:	22 81       	ldd	r18, Z+2	; 0x02
     4b4:	33 81       	ldd	r19, Z+3	; 0x03
     4b6:	e9 81       	ldd	r30, Y+1	; 0x01
     4b8:	fa 81       	ldd	r31, Y+2	; 0x02
     4ba:	44 81       	ldd	r20, Z+4	; 0x04
     4bc:	55 81       	ldd	r21, Z+5	; 0x05
     4be:	e9 81       	ldd	r30, Y+1	; 0x01
     4c0:	fa 81       	ldd	r31, Y+2	; 0x02
     4c2:	06 81       	ldd	r16, Z+6	; 0x06
     4c4:	17 81       	ldd	r17, Z+7	; 0x07
     4c6:	e9 81       	ldd	r30, Y+1	; 0x01
     4c8:	fa 81       	ldd	r31, Y+2	; 0x02
     4ca:	e0 84       	ldd	r14, Z+8	; 0x08
     4cc:	f1 84       	ldd	r15, Z+9	; 0x09
     4ce:	e9 81       	ldd	r30, Y+1	; 0x01
     4d0:	fa 81       	ldd	r31, Y+2	; 0x02
     4d2:	c2 84       	ldd	r12, Z+10	; 0x0a
     4d4:	d3 84       	ldd	r13, Z+11	; 0x0b
     4d6:	e9 81       	ldd	r30, Y+1	; 0x01
     4d8:	fa 81       	ldd	r31, Y+2	; 0x02
     4da:	b4 84       	ldd	r11, Z+12	; 0x0c
     4dc:	e9 81       	ldd	r30, Y+1	; 0x01
     4de:	fa 81       	ldd	r31, Y+2	; 0x02
     4e0:	a5 85       	ldd	r26, Z+13	; 0x0d
     4e2:	b6 85       	ldd	r27, Z+14	; 0x0e
     4e4:	e9 81       	ldd	r30, Y+1	; 0x01
     4e6:	fa 81       	ldd	r31, Y+2	; 0x02
     4e8:	e7 85       	ldd	r30, Z+15	; 0x0f
     4ea:	b9 01       	movw	r22, r18
     4ec:	98 01       	movw	r18, r16
     4ee:	87 01       	movw	r16, r14
     4f0:	76 01       	movw	r14, r12
     4f2:	cb 2c       	mov	r12, r11
     4f4:	5d 01       	movw	r10, r26
     4f6:	8e 2e       	mov	r8, r30
     4f8:	0e 94 66 0b 	call	0x16cc	; 0x16cc <proc_init_isr>
              ((proc_init_arg_t *)arg)->sstart,
              ((proc_init_arg_t *)arg)->prio,
              ((proc_init_arg_t *)arg)->time_quant,
              ((proc_init_arg_t *)arg)->is_rt
              );
}
     4fc:	0f 90       	pop	r0
     4fe:	0f 90       	pop	r0
     500:	cf 91       	pop	r28
     502:	df 91       	pop	r29
     504:	1f 91       	pop	r17
     506:	0f 91       	pop	r16
     508:	ff 90       	pop	r15
     50a:	ef 90       	pop	r14
     50c:	df 90       	pop	r13
     50e:	cf 90       	pop	r12
     510:	bf 90       	pop	r11
     512:	af 90       	pop	r10
     514:	8f 90       	pop	r8
     516:	08 95       	ret

00000518 <scall_proc_run>:
    syscall(0,(void *)&scarg);
}
//---------------------------------------------------------------------------------------------
//1
void scall_proc_run( void * arg )
{
     518:	0f 93       	push	r16
     51a:	1f 93       	push	r17
     51c:	df 93       	push	r29
     51e:	cf 93       	push	r28
     520:	00 d0       	rcall	.+0      	; 0x522 <scall_proc_run+0xa>
     522:	cd b7       	in	r28, 0x3d	; 61
     524:	de b7       	in	r29, 0x3e	; 62
     526:	9a 83       	std	Y+2, r25	; 0x02
     528:	89 83       	std	Y+1, r24	; 0x01
    ((proc_runtime_arg_t *)arg)->scall_ret = proc_run_isr( ((proc_runtime_arg_t *)arg)->proc );
     52a:	09 81       	ldd	r16, Y+1	; 0x01
     52c:	1a 81       	ldd	r17, Y+2	; 0x02
     52e:	e9 81       	ldd	r30, Y+1	; 0x01
     530:	fa 81       	ldd	r31, Y+2	; 0x02
     532:	80 81       	ld	r24, Z
     534:	91 81       	ldd	r25, Z+1	; 0x01
     536:	0e 94 0c 0c 	call	0x1818	; 0x1818 <proc_run_isr>
     53a:	f8 01       	movw	r30, r16
     53c:	82 83       	std	Z+2, r24	; 0x02
}
     53e:	0f 90       	pop	r0
     540:	0f 90       	pop	r0
     542:	cf 91       	pop	r28
     544:	df 91       	pop	r29
     546:	1f 91       	pop	r17
     548:	0f 91       	pop	r16
     54a:	08 95       	ret

0000054c <scall_proc_restart>:
    return scarg.scall_ret;
}
//---------------------------------------------------------------------------------------------
//2
void scall_proc_restart( void * arg )
{
     54c:	0f 93       	push	r16
     54e:	1f 93       	push	r17
     550:	df 93       	push	r29
     552:	cf 93       	push	r28
     554:	00 d0       	rcall	.+0      	; 0x556 <scall_proc_restart+0xa>
     556:	cd b7       	in	r28, 0x3d	; 61
     558:	de b7       	in	r29, 0x3e	; 62
     55a:	9a 83       	std	Y+2, r25	; 0x02
     55c:	89 83       	std	Y+1, r24	; 0x01
    ((proc_runtime_arg_t *)arg)->scall_ret = proc_restart_isr( ((proc_runtime_arg_t *)arg)->proc );
     55e:	09 81       	ldd	r16, Y+1	; 0x01
     560:	1a 81       	ldd	r17, Y+2	; 0x02
     562:	e9 81       	ldd	r30, Y+1	; 0x01
     564:	fa 81       	ldd	r31, Y+2	; 0x02
     566:	80 81       	ld	r24, Z
     568:	91 81       	ldd	r25, Z+1	; 0x01
     56a:	0e 94 2c 0c 	call	0x1858	; 0x1858 <proc_restart_isr>
     56e:	f8 01       	movw	r30, r16
     570:	82 83       	std	Z+2, r24	; 0x02
}
     572:	0f 90       	pop	r0
     574:	0f 90       	pop	r0
     576:	cf 91       	pop	r28
     578:	df 91       	pop	r29
     57a:	1f 91       	pop	r17
     57c:	0f 91       	pop	r16
     57e:	08 95       	ret

00000580 <scall_proc_stop>:
    return scarg.scall_ret;
}
//---------------------------------------------------------------------------------------------
//3
void scall_proc_stop( void * arg )
{
     580:	0f 93       	push	r16
     582:	1f 93       	push	r17
     584:	df 93       	push	r29
     586:	cf 93       	push	r28
     588:	00 d0       	rcall	.+0      	; 0x58a <scall_proc_stop+0xa>
     58a:	cd b7       	in	r28, 0x3d	; 61
     58c:	de b7       	in	r29, 0x3e	; 62
     58e:	9a 83       	std	Y+2, r25	; 0x02
     590:	89 83       	std	Y+1, r24	; 0x01
    ((proc_runtime_arg_t *)arg)->scall_ret = proc_stop_isr( ((proc_runtime_arg_t *)arg)->proc );
     592:	09 81       	ldd	r16, Y+1	; 0x01
     594:	1a 81       	ldd	r17, Y+2	; 0x02
     596:	e9 81       	ldd	r30, Y+1	; 0x01
     598:	fa 81       	ldd	r31, Y+2	; 0x02
     59a:	80 81       	ld	r24, Z
     59c:	91 81       	ldd	r25, Z+1	; 0x01
     59e:	0e 94 8e 0c 	call	0x191c	; 0x191c <proc_stop_isr>
     5a2:	f8 01       	movw	r30, r16
     5a4:	82 83       	std	Z+2, r24	; 0x02
}
     5a6:	0f 90       	pop	r0
     5a8:	0f 90       	pop	r0
     5aa:	cf 91       	pop	r28
     5ac:	df 91       	pop	r29
     5ae:	1f 91       	pop	r17
     5b0:	0f 91       	pop	r16
     5b2:	08 95       	ret

000005b4 <scall_proc_self_stop>:
}

//---------------------------------------------------------------------------------------------
//4
void scall_proc_self_stop( void * arg )
{
     5b4:	df 93       	push	r29
     5b6:	cf 93       	push	r28
     5b8:	00 d0       	rcall	.+0      	; 0x5ba <scall_proc_self_stop+0x6>
     5ba:	00 d0       	rcall	.+0      	; 0x5bc <scall_proc_self_stop+0x8>
     5bc:	cd b7       	in	r28, 0x3d	; 61
     5be:	de b7       	in	r29, 0x3e	; 62
     5c0:	9c 83       	std	Y+4, r25	; 0x04
     5c2:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = kernel.sched.current_proc;
     5c4:	80 91 9e 01 	lds	r24, 0x019E
     5c8:	90 91 9f 01 	lds	r25, 0x019F
     5cc:	9a 83       	std	Y+2, r25	; 0x02
     5ce:	89 83       	std	Y+1, r24	; 0x01
    _proc_stop( proc );
     5d0:	89 81       	ldd	r24, Y+1	; 0x01
     5d2:	9a 81       	ldd	r25, Y+2	; 0x02
     5d4:	0e 94 75 0c 	call	0x18ea	; 0x18ea <_proc_stop>
}
     5d8:	0f 90       	pop	r0
     5da:	0f 90       	pop	r0
     5dc:	0f 90       	pop	r0
     5de:	0f 90       	pop	r0
     5e0:	cf 91       	pop	r28
     5e2:	df 91       	pop	r29
     5e4:	08 95       	ret

000005e6 <scall_proc_terminate>:
}
//---------------------------------------------------------------------------------------------
//5
/// Останов процесса после выхода из pmain, для обертки proc_run_wrapper
void scall_proc_terminate( void * arg )
{
     5e6:	df 93       	push	r29
     5e8:	cf 93       	push	r28
     5ea:	00 d0       	rcall	.+0      	; 0x5ec <scall_proc_terminate+0x6>
     5ec:	00 d0       	rcall	.+0      	; 0x5ee <scall_proc_terminate+0x8>
     5ee:	cd b7       	in	r28, 0x3d	; 61
     5f0:	de b7       	in	r29, 0x3e	; 62
     5f2:	9c 83       	std	Y+4, r25	; 0x04
     5f4:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = (proc_t *)arg;
     5f6:	8b 81       	ldd	r24, Y+3	; 0x03
     5f8:	9c 81       	ldd	r25, Y+4	; 0x04
     5fa:	9a 83       	std	Y+2, r25	; 0x02
     5fc:	89 83       	std	Y+1, r24	; 0x01
    // Обрабатываем флаги
    // Нельзя выходить из pmain не освободив все захваченные ресурсы, за это процесс будет "убит"!
    if( proc->flags & PROC_FLG_HOLD ) proc->flags |= PROC_FLG_DEAD;
     5fe:	e9 81       	ldd	r30, Y+1	; 0x01
     600:	fa 81       	ldd	r31, Y+2	; 0x02
     602:	83 85       	ldd	r24, Z+11	; 0x0b
     604:	88 2f       	mov	r24, r24
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	84 70       	andi	r24, 0x04	; 4
     60a:	90 70       	andi	r25, 0x00	; 0
     60c:	00 97       	sbiw	r24, 0x00	; 0
     60e:	41 f0       	breq	.+16     	; 0x620 <scall_proc_terminate+0x3a>
     610:	e9 81       	ldd	r30, Y+1	; 0x01
     612:	fa 81       	ldd	r31, Y+2	; 0x02
     614:	83 85       	ldd	r24, Z+11	; 0x0b
     616:	80 68       	ori	r24, 0x80	; 128
     618:	e9 81       	ldd	r30, Y+1	; 0x01
     61a:	fa 81       	ldd	r31, Y+2	; 0x02
     61c:	83 87       	std	Z+11, r24	; 0x0b
     61e:	07 c0       	rjmp	.+14     	; 0x62e <scall_proc_terminate+0x48>
    // В противном случае - просто завершаем процесс
    else proc->flags |= PROC_FLG_END;
     620:	e9 81       	ldd	r30, Y+1	; 0x01
     622:	fa 81       	ldd	r31, Y+2	; 0x02
     624:	83 85       	ldd	r24, Z+11	; 0x0b
     626:	80 64       	ori	r24, 0x40	; 64
     628:	e9 81       	ldd	r30, Y+1	; 0x01
     62a:	fa 81       	ldd	r31, Y+2	; 0x02
     62c:	83 87       	std	Z+11, r24	; 0x0b
    proc->flags &= ~(PROC_FLG_PRE_END|PROC_FLG_RUN);
     62e:	e9 81       	ldd	r30, Y+1	; 0x01
     630:	fa 81       	ldd	r31, Y+2	; 0x02
     632:	83 85       	ldd	r24, Z+11	; 0x0b
     634:	8d 7d       	andi	r24, 0xDD	; 221
     636:	e9 81       	ldd	r30, Y+1	; 0x01
     638:	fa 81       	ldd	r31, Y+2	; 0x02
     63a:	83 87       	std	Z+11, r24	; 0x0b
    // Останов
    _proc_stop_( proc );
     63c:	89 81       	ldd	r24, Y+1	; 0x01
     63e:	9a 81       	ldd	r25, Y+2	; 0x02
     640:	0e 94 ad 07 	call	0xf5a	; 0xf5a <gitem_cut>
    // Выполнить перепланировку
    resched();
     644:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
}
     648:	0f 90       	pop	r0
     64a:	0f 90       	pop	r0
     64c:	0f 90       	pop	r0
     64e:	0f 90       	pop	r0
     650:	cf 91       	pop	r28
     652:	df 91       	pop	r29
     654:	08 95       	ret

00000656 <proc_run_wrapper>:
void proc_run_wrapper( proc_t * proc )
{
     656:	df 93       	push	r29
     658:	cf 93       	push	r28
     65a:	00 d0       	rcall	.+0      	; 0x65c <proc_run_wrapper+0x6>
     65c:	00 d0       	rcall	.+0      	; 0x65e <proc_run_wrapper+0x8>
     65e:	00 d0       	rcall	.+0      	; 0x660 <proc_run_wrapper+0xa>
     660:	cd b7       	in	r28, 0x3d	; 61
     662:	de b7       	in	r29, 0x3e	; 62
     664:	9e 83       	std	Y+6, r25	; 0x06
     666:	8d 83       	std	Y+5, r24	; 0x05
    //Атомарно читаем pmain и arg
    cli();
     668:	f8 94       	cli
    code_t pmain = proc->pmain;
     66a:	ed 81       	ldd	r30, Y+5	; 0x05
     66c:	fe 81       	ldd	r31, Y+6	; 0x06
     66e:	82 a1       	ldd	r24, Z+34	; 0x22
     670:	93 a1       	ldd	r25, Z+35	; 0x23
     672:	9c 83       	std	Y+4, r25	; 0x04
     674:	8b 83       	std	Y+3, r24	; 0x03
    void * arg = proc->arg;
     676:	ed 81       	ldd	r30, Y+5	; 0x05
     678:	fe 81       	ldd	r31, Y+6	; 0x06
     67a:	80 a5       	ldd	r24, Z+40	; 0x28
     67c:	91 a5       	ldd	r25, Z+41	; 0x29
     67e:	9a 83       	std	Y+2, r25	; 0x02
     680:	89 83       	std	Y+1, r24	; 0x01
    sei();
     682:	78 94       	sei
    //Выполняем pmain
    pmain( arg );
     684:	89 81       	ldd	r24, Y+1	; 0x01
     686:	9a 81       	ldd	r25, Y+2	; 0x02
     688:	eb 81       	ldd	r30, Y+3	; 0x03
     68a:	fc 81       	ldd	r31, Y+4	; 0x04
     68c:	09 95       	icall
    // Завершаем процесс
    syscall(5,(void *)proc);
     68e:	2d 81       	ldd	r18, Y+5	; 0x05
     690:	3e 81       	ldd	r19, Y+6	; 0x06
     692:	85 e0       	ldi	r24, 0x05	; 5
     694:	b9 01       	movw	r22, r18
     696:	0e 94 24 02 	call	0x448	; 0x448 <syscall>
}
     69a:	26 96       	adiw	r28, 0x06	; 6
     69c:	0f b6       	in	r0, 0x3f	; 63
     69e:	f8 94       	cli
     6a0:	de bf       	out	0x3e, r29	; 62
     6a2:	0f be       	out	0x3f, r0	; 63
     6a4:	cd bf       	out	0x3d, r28	; 61
     6a6:	cf 91       	pop	r28
     6a8:	df 91       	pop	r29
     6aa:	08 95       	ret

000006ac <scall_proc_flag_stop>:
//---------------------------------------------------------------------------------------------
//6
void scall_proc_flag_stop( void * arg )
{
     6ac:	df 93       	push	r29
     6ae:	cf 93       	push	r28
     6b0:	00 d0       	rcall	.+0      	; 0x6b2 <scall_proc_flag_stop+0x6>
     6b2:	cd b7       	in	r28, 0x3d	; 61
     6b4:	de b7       	in	r29, 0x3e	; 62
     6b6:	9a 83       	std	Y+2, r25	; 0x02
     6b8:	89 83       	std	Y+1, r24	; 0x01
    _proc_flag_stop_isr( *((flag_t *)arg) );
     6ba:	e9 81       	ldd	r30, Y+1	; 0x01
     6bc:	fa 81       	ldd	r31, Y+2	; 0x02
     6be:	80 81       	ld	r24, Z
     6c0:	0e 94 be 0c 	call	0x197c	; 0x197c <_proc_flag_stop_isr>
}
     6c4:	0f 90       	pop	r0
     6c6:	0f 90       	pop	r0
     6c8:	cf 91       	pop	r28
     6ca:	df 91       	pop	r29
     6cc:	08 95       	ret

000006ce <scall_sig_init>:
///=================================================================
///                         Сигналы
//7
void scall_sig_init( void * arg )
{
     6ce:	df 93       	push	r29
     6d0:	cf 93       	push	r28
     6d2:	00 d0       	rcall	.+0      	; 0x6d4 <scall_sig_init+0x6>
     6d4:	cd b7       	in	r28, 0x3d	; 61
     6d6:	de b7       	in	r29, 0x3e	; 62
     6d8:	9a 83       	std	Y+2, r25	; 0x02
     6da:	89 83       	std	Y+1, r24	; 0x01
    sig_init_isr( (sig_t *)arg );
     6dc:	89 81       	ldd	r24, Y+1	; 0x01
     6de:	9a 81       	ldd	r25, Y+2	; 0x02
     6e0:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <sig_init_isr>
}
     6e4:	0f 90       	pop	r0
     6e6:	0f 90       	pop	r0
     6e8:	cf 91       	pop	r28
     6ea:	df 91       	pop	r29
     6ec:	08 95       	ret

000006ee <scall_sig_wait>:
    syscall( 7, (void *)sig );
}
//---------------------------------------------------------------------------------------------
//8
void scall_sig_wait( void * arg )
{
     6ee:	df 93       	push	r29
     6f0:	cf 93       	push	r28
     6f2:	00 d0       	rcall	.+0      	; 0x6f4 <scall_sig_wait+0x6>
     6f4:	cd b7       	in	r28, 0x3d	; 61
     6f6:	de b7       	in	r29, 0x3e	; 62
     6f8:	9a 83       	std	Y+2, r25	; 0x02
     6fa:	89 83       	std	Y+1, r24	; 0x01
    sig_wait_stage_1_isr( (sig_t *)arg );
     6fc:	89 81       	ldd	r24, Y+1	; 0x01
     6fe:	9a 81       	ldd	r25, Y+2	; 0x02
     700:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <sig_wait_stage_1_isr>
}
     704:	0f 90       	pop	r0
     706:	0f 90       	pop	r0
     708:	cf 91       	pop	r28
     70a:	df 91       	pop	r29
     70c:	08 95       	ret

0000070e <scall_sig_signal>:
    syscall( 6, (void *)&mask );/// Останов в случае необходимости
}
//---------------------------------------------------------------------------------------------
//9
void scall_sig_signal( void * arg )
{
     70e:	df 93       	push	r29
     710:	cf 93       	push	r28
     712:	00 d0       	rcall	.+0      	; 0x714 <scall_sig_signal+0x6>
     714:	cd b7       	in	r28, 0x3d	; 61
     716:	de b7       	in	r29, 0x3e	; 62
     718:	9a 83       	std	Y+2, r25	; 0x02
     71a:	89 83       	std	Y+1, r24	; 0x01
    sig_signal_isr( (sig_t *)arg );
     71c:	89 81       	ldd	r24, Y+1	; 0x01
     71e:	9a 81       	ldd	r25, Y+2	; 0x02
     720:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <sig_signal_isr>
}
     724:	0f 90       	pop	r0
     726:	0f 90       	pop	r0
     728:	cf 91       	pop	r28
     72a:	df 91       	pop	r29
     72c:	08 95       	ret

0000072e <scall_sig_broadcast>:
    syscall( 9, (void *)sig );
}
//---------------------------------------------------------------------------------------------
//10
void scall_sig_broadcast( void * arg )
{
     72e:	df 93       	push	r29
     730:	cf 93       	push	r28
     732:	00 d0       	rcall	.+0      	; 0x734 <scall_sig_broadcast+0x6>
     734:	cd b7       	in	r28, 0x3d	; 61
     736:	de b7       	in	r29, 0x3e	; 62
     738:	9a 83       	std	Y+2, r25	; 0x02
     73a:	89 83       	std	Y+1, r24	; 0x01
    sig_broadcast_isr( (sig_t *)arg );
     73c:	89 81       	ldd	r24, Y+1	; 0x01
     73e:	9a 81       	ldd	r25, Y+2	; 0x02
     740:	0e 94 26 10 	call	0x204c	; 0x204c <sig_broadcast_isr>
}
     744:	0f 90       	pop	r0
     746:	0f 90       	pop	r0
     748:	cf 91       	pop	r28
     74a:	df 91       	pop	r29
     74c:	08 95       	ret

0000074e <scall_sem_init>:
}
///=================================================================
///                         Семафоры
//11
void scall_sem_init( void * arg )
{
     74e:	df 93       	push	r29
     750:	cf 93       	push	r28
     752:	00 d0       	rcall	.+0      	; 0x754 <scall_sem_init+0x6>
     754:	cd b7       	in	r28, 0x3d	; 61
     756:	de b7       	in	r29, 0x3e	; 62
     758:	9a 83       	std	Y+2, r25	; 0x02
     75a:	89 83       	std	Y+1, r24	; 0x01
    sem_init_isr( ((sem_init_arg_t *)arg)->sem, ((sem_init_arg_t *)arg)->count );
     75c:	e9 81       	ldd	r30, Y+1	; 0x01
     75e:	fa 81       	ldd	r31, Y+2	; 0x02
     760:	80 81       	ld	r24, Z
     762:	91 81       	ldd	r25, Z+1	; 0x01
     764:	e9 81       	ldd	r30, Y+1	; 0x01
     766:	fa 81       	ldd	r31, Y+2	; 0x02
     768:	22 81       	ldd	r18, Z+2	; 0x02
     76a:	33 81       	ldd	r19, Z+3	; 0x03
     76c:	b9 01       	movw	r22, r18
     76e:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <sem_init_isr>
}
     772:	0f 90       	pop	r0
     774:	0f 90       	pop	r0
     776:	cf 91       	pop	r28
     778:	df 91       	pop	r29
     77a:	08 95       	ret

0000077c <scall_sem_lock>:
    syscall( 11, (void *)&scarg );
}
//----------------------------------------------------------------------
//12
void scall_sem_lock( void * arg )
{
     77c:	0f 93       	push	r16
     77e:	1f 93       	push	r17
     780:	df 93       	push	r29
     782:	cf 93       	push	r28
     784:	00 d0       	rcall	.+0      	; 0x786 <scall_sem_lock+0xa>
     786:	cd b7       	in	r28, 0x3d	; 61
     788:	de b7       	in	r29, 0x3e	; 62
     78a:	9a 83       	std	Y+2, r25	; 0x02
     78c:	89 83       	std	Y+1, r24	; 0x01
    ((sem_lock_arg_t *)arg)->scall_ret = _sem_lock_stage_1( ((sem_lock_arg_t *)arg)->sem );
     78e:	09 81       	ldd	r16, Y+1	; 0x01
     790:	1a 81       	ldd	r17, Y+2	; 0x02
     792:	e9 81       	ldd	r30, Y+1	; 0x01
     794:	fa 81       	ldd	r31, Y+2	; 0x02
     796:	80 81       	ld	r24, Z
     798:	91 81       	ldd	r25, Z+1	; 0x01
     79a:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <_sem_lock_stage_1>
     79e:	f8 01       	movw	r30, r16
     7a0:	82 83       	std	Z+2, r24	; 0x02
}
     7a2:	0f 90       	pop	r0
     7a4:	0f 90       	pop	r0
     7a6:	cf 91       	pop	r28
     7a8:	df 91       	pop	r29
     7aa:	1f 91       	pop	r17
     7ac:	0f 91       	pop	r16
     7ae:	08 95       	ret

000007b0 <scall_sem_unlock>:
    return scarg.scall_ret;
}
//----------------------------------------------------------------------
//13
void scall_sem_unlock( void * arg )
{
     7b0:	df 93       	push	r29
     7b2:	cf 93       	push	r28
     7b4:	00 d0       	rcall	.+0      	; 0x7b6 <scall_sem_unlock+0x6>
     7b6:	cd b7       	in	r28, 0x3d	; 61
     7b8:	de b7       	in	r29, 0x3e	; 62
     7ba:	9a 83       	std	Y+2, r25	; 0x02
     7bc:	89 83       	std	Y+1, r24	; 0x01
    _sem_unlock( (sem_t *)arg );
     7be:	89 81       	ldd	r24, Y+1	; 0x01
     7c0:	9a 81       	ldd	r25, Y+2	; 0x02
     7c2:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <_sem_unlock>
}
     7c6:	0f 90       	pop	r0
     7c8:	0f 90       	pop	r0
     7ca:	cf 91       	pop	r28
     7cc:	df 91       	pop	r29
     7ce:	08 95       	ret

000007d0 <scall_mutex_init>:
}
///=================================================================
///                         Мьютексы
//14
void scall_mutex_init(void * arg)
{
     7d0:	df 93       	push	r29
     7d2:	cf 93       	push	r28
     7d4:	00 d0       	rcall	.+0      	; 0x7d6 <scall_mutex_init+0x6>
     7d6:	cd b7       	in	r28, 0x3d	; 61
     7d8:	de b7       	in	r29, 0x3e	; 62
     7da:	9a 83       	std	Y+2, r25	; 0x02
     7dc:	89 83       	std	Y+1, r24	; 0x01
    mutex_init_isr(
     7de:	e9 81       	ldd	r30, Y+1	; 0x01
     7e0:	fa 81       	ldd	r31, Y+2	; 0x02
     7e2:	80 81       	ld	r24, Z
     7e4:	91 81       	ldd	r25, Z+1	; 0x01
     7e6:	e9 81       	ldd	r30, Y+1	; 0x01
     7e8:	fa 81       	ldd	r31, Y+2	; 0x02
     7ea:	22 81       	ldd	r18, Z+2	; 0x02
     7ec:	62 2f       	mov	r22, r18
     7ee:	0e 94 c5 09 	call	0x138a	; 0x138a <mutex_init_isr>
               ((mutex_init_arg_t *)arg)->mutex
#ifdef CONFIG_USE_HIGHEST_LOCKER
               ,((mutex_init_arg_t *)arg)->prio
#endif // CONFIG_USE_HIGHEST_LOCKER
               );
}
     7f2:	0f 90       	pop	r0
     7f4:	0f 90       	pop	r0
     7f6:	cf 91       	pop	r28
     7f8:	df 91       	pop	r29
     7fa:	08 95       	ret

000007fc <scall_mutex_lock>:
    syscall( 14, (void *)&scarg );
}
//----------------------------------------------------------------------
//15
void scall_mutex_lock(void * arg)
{
     7fc:	0f 93       	push	r16
     7fe:	1f 93       	push	r17
     800:	df 93       	push	r29
     802:	cf 93       	push	r28
     804:	00 d0       	rcall	.+0      	; 0x806 <scall_mutex_lock+0xa>
     806:	cd b7       	in	r28, 0x3d	; 61
     808:	de b7       	in	r29, 0x3e	; 62
     80a:	9a 83       	std	Y+2, r25	; 0x02
     80c:	89 83       	std	Y+1, r24	; 0x01
    ((mutex_lock_arg_t *)arg)->scall_ret = _mutex_lock( ((mutex_lock_arg_t *)arg)->mutex );
     80e:	09 81       	ldd	r16, Y+1	; 0x01
     810:	1a 81       	ldd	r17, Y+2	; 0x02
     812:	e9 81       	ldd	r30, Y+1	; 0x01
     814:	fa 81       	ldd	r31, Y+2	; 0x02
     816:	80 81       	ld	r24, Z
     818:	91 81       	ldd	r25, Z+1	; 0x01
     81a:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <_mutex_lock>
     81e:	f8 01       	movw	r30, r16
     820:	82 83       	std	Z+2, r24	; 0x02
}
     822:	0f 90       	pop	r0
     824:	0f 90       	pop	r0
     826:	cf 91       	pop	r28
     828:	df 91       	pop	r29
     82a:	1f 91       	pop	r17
     82c:	0f 91       	pop	r16
     82e:	08 95       	ret

00000830 <mutex_lock>:
bool_t mutex_lock( mutex_t * mutex )
{
     830:	df 93       	push	r29
     832:	cf 93       	push	r28
     834:	00 d0       	rcall	.+0      	; 0x836 <mutex_lock+0x6>
     836:	00 d0       	rcall	.+0      	; 0x838 <mutex_lock+0x8>
     838:	0f 92       	push	r0
     83a:	cd b7       	in	r28, 0x3d	; 61
     83c:	de b7       	in	r29, 0x3e	; 62
     83e:	9d 83       	std	Y+5, r25	; 0x05
     840:	8c 83       	std	Y+4, r24	; 0x04
    mutex_lock_arg_t scarg;
    scarg.mutex = mutex;
     842:	8c 81       	ldd	r24, Y+4	; 0x04
     844:	9d 81       	ldd	r25, Y+5	; 0x05
     846:	9a 83       	std	Y+2, r25	; 0x02
     848:	89 83       	std	Y+1, r24	; 0x01
    syscall( 15, (void *)&scarg );
     84a:	8f e0       	ldi	r24, 0x0F	; 15
     84c:	9e 01       	movw	r18, r28
     84e:	2f 5f       	subi	r18, 0xFF	; 255
     850:	3f 4f       	sbci	r19, 0xFF	; 255
     852:	b9 01       	movw	r22, r18
     854:	0e 94 24 02 	call	0x448	; 0x448 <syscall>
    return scarg.scall_ret;
     858:	8b 81       	ldd	r24, Y+3	; 0x03
}
     85a:	0f 90       	pop	r0
     85c:	0f 90       	pop	r0
     85e:	0f 90       	pop	r0
     860:	0f 90       	pop	r0
     862:	0f 90       	pop	r0
     864:	cf 91       	pop	r28
     866:	df 91       	pop	r29
     868:	08 95       	ret

0000086a <scall_mutex_try_lock>:
// Захват
//----------------------------------------------------------------------
//16
void scall_mutex_try_lock(void * arg)
{
     86a:	0f 93       	push	r16
     86c:	1f 93       	push	r17
     86e:	df 93       	push	r29
     870:	cf 93       	push	r28
     872:	00 d0       	rcall	.+0      	; 0x874 <scall_mutex_try_lock+0xa>
     874:	cd b7       	in	r28, 0x3d	; 61
     876:	de b7       	in	r29, 0x3e	; 62
     878:	9a 83       	std	Y+2, r25	; 0x02
     87a:	89 83       	std	Y+1, r24	; 0x01
    ((mutex_lock_arg_t *)arg)->scall_ret = _mutex_try_lock( ((mutex_lock_arg_t *)arg)->mutex );
     87c:	09 81       	ldd	r16, Y+1	; 0x01
     87e:	1a 81       	ldd	r17, Y+2	; 0x02
     880:	e9 81       	ldd	r30, Y+1	; 0x01
     882:	fa 81       	ldd	r31, Y+2	; 0x02
     884:	80 81       	ld	r24, Z
     886:	91 81       	ldd	r25, Z+1	; 0x01
     888:	0e 94 28 0a 	call	0x1450	; 0x1450 <_mutex_try_lock>
     88c:	f8 01       	movw	r30, r16
     88e:	82 83       	std	Z+2, r24	; 0x02
}
     890:	0f 90       	pop	r0
     892:	0f 90       	pop	r0
     894:	cf 91       	pop	r28
     896:	df 91       	pop	r29
     898:	1f 91       	pop	r17
     89a:	0f 91       	pop	r16
     89c:	08 95       	ret

0000089e <mutex_try_lock>:
// Попытка захвата
bool_t mutex_try_lock( mutex_t * mutex )
{
     89e:	df 93       	push	r29
     8a0:	cf 93       	push	r28
     8a2:	00 d0       	rcall	.+0      	; 0x8a4 <mutex_try_lock+0x6>
     8a4:	00 d0       	rcall	.+0      	; 0x8a6 <mutex_try_lock+0x8>
     8a6:	0f 92       	push	r0
     8a8:	cd b7       	in	r28, 0x3d	; 61
     8aa:	de b7       	in	r29, 0x3e	; 62
     8ac:	9d 83       	std	Y+5, r25	; 0x05
     8ae:	8c 83       	std	Y+4, r24	; 0x04
    mutex_lock_arg_t scarg;
    scarg.mutex = mutex;
     8b0:	8c 81       	ldd	r24, Y+4	; 0x04
     8b2:	9d 81       	ldd	r25, Y+5	; 0x05
     8b4:	9a 83       	std	Y+2, r25	; 0x02
     8b6:	89 83       	std	Y+1, r24	; 0x01
    syscall( 16, (void *)&scarg );
     8b8:	80 e1       	ldi	r24, 0x10	; 16
     8ba:	9e 01       	movw	r18, r28
     8bc:	2f 5f       	subi	r18, 0xFF	; 255
     8be:	3f 4f       	sbci	r19, 0xFF	; 255
     8c0:	b9 01       	movw	r22, r18
     8c2:	0e 94 24 02 	call	0x448	; 0x448 <syscall>
    return scarg.scall_ret;
     8c6:	8b 81       	ldd	r24, Y+3	; 0x03
}
     8c8:	0f 90       	pop	r0
     8ca:	0f 90       	pop	r0
     8cc:	0f 90       	pop	r0
     8ce:	0f 90       	pop	r0
     8d0:	0f 90       	pop	r0
     8d2:	cf 91       	pop	r28
     8d4:	df 91       	pop	r29
     8d6:	08 95       	ret

000008d8 <scall_mutex_unlock>:
//----------------------------------------------------------------------
//17
void scall_mutex_unlock(void * arg)
{
     8d8:	df 93       	push	r29
     8da:	cf 93       	push	r28
     8dc:	00 d0       	rcall	.+0      	; 0x8de <scall_mutex_unlock+0x6>
     8de:	cd b7       	in	r28, 0x3d	; 61
     8e0:	de b7       	in	r29, 0x3e	; 62
     8e2:	9a 83       	std	Y+2, r25	; 0x02
     8e4:	89 83       	std	Y+1, r24	; 0x01
    _mutex_unlock( (mutex_t *)arg );
     8e6:	89 81       	ldd	r24, Y+1	; 0x01
     8e8:	9a 81       	ldd	r25, Y+2	; 0x02
     8ea:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <_mutex_unlock>
}
     8ee:	0f 90       	pop	r0
     8f0:	0f 90       	pop	r0
     8f2:	cf 91       	pop	r28
     8f4:	df 91       	pop	r29
     8f6:	08 95       	ret

000008f8 <mutex_unlock>:
// Освобождение
void mutex_unlock( mutex_t * mutex )
{
     8f8:	df 93       	push	r29
     8fa:	cf 93       	push	r28
     8fc:	00 d0       	rcall	.+0      	; 0x8fe <mutex_unlock+0x6>
     8fe:	cd b7       	in	r28, 0x3d	; 61
     900:	de b7       	in	r29, 0x3e	; 62
     902:	9a 83       	std	Y+2, r25	; 0x02
     904:	89 83       	std	Y+1, r24	; 0x01
    syscall( 17, (void *)mutex );
     906:	29 81       	ldd	r18, Y+1	; 0x01
     908:	3a 81       	ldd	r19, Y+2	; 0x02
     90a:	81 e1       	ldi	r24, 0x11	; 17
     90c:	b9 01       	movw	r22, r18
     90e:	0e 94 24 02 	call	0x448	; 0x448 <syscall>
}
     912:	0f 90       	pop	r0
     914:	0f 90       	pop	r0
     916:	cf 91       	pop	r28
     918:	df 91       	pop	r29
     91a:	08 95       	ret

0000091c <osbme_init_stack>:
*                                                                                        *
*****************************************************************************************/
#include <avr/io.h>
#include "../../osbme.h"
void * osbme_init_stack( void * top_of_stack, osbme_code_t code, void * arg )
{
     91c:	df 93       	push	r29
     91e:	cf 93       	push	r28
     920:	cd b7       	in	r28, 0x3d	; 61
     922:	de b7       	in	r29, 0x3e	; 62
     924:	2a 97       	sbiw	r28, 0x0a	; 10
     926:	0f b6       	in	r0, 0x3f	; 63
     928:	f8 94       	cli
     92a:	de bf       	out	0x3e, r29	; 62
     92c:	0f be       	out	0x3f, r0	; 63
     92e:	cd bf       	out	0x3d, r28	; 61
     930:	9e 83       	std	Y+6, r25	; 0x06
     932:	8d 83       	std	Y+5, r24	; 0x05
     934:	78 87       	std	Y+8, r23	; 0x08
     936:	6f 83       	std	Y+7, r22	; 0x07
     938:	5a 87       	std	Y+10, r21	; 0x0a
     93a:	49 87       	std	Y+9, r20	; 0x09
    char * tos = (char *)top_of_stack;
     93c:	8d 81       	ldd	r24, Y+5	; 0x05
     93e:	9e 81       	ldd	r25, Y+6	; 0x06
     940:	9c 83       	std	Y+4, r25	; 0x04
     942:	8b 83       	std	Y+3, r24	; 0x03
    //*tos-- = 0x11;
    //*tos-- = 0x22;
    //*tos-- = 0x33;

    // return address
    unsigned short tmp = (unsigned short)code;
     944:	8f 81       	ldd	r24, Y+7	; 0x07
     946:	98 85       	ldd	r25, Y+8	; 0x08
     948:	9a 83       	std	Y+2, r25	; 0x02
     94a:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (char)(tmp&(unsigned short)0x00ff);
     94c:	89 81       	ldd	r24, Y+1	; 0x01
     94e:	eb 81       	ldd	r30, Y+3	; 0x03
     950:	fc 81       	ldd	r31, Y+4	; 0x04
     952:	80 83       	st	Z, r24
     954:	8b 81       	ldd	r24, Y+3	; 0x03
     956:	9c 81       	ldd	r25, Y+4	; 0x04
     958:	01 97       	sbiw	r24, 0x01	; 1
     95a:	9c 83       	std	Y+4, r25	; 0x04
     95c:	8b 83       	std	Y+3, r24	; 0x03
    tmp>>=8;
     95e:	89 81       	ldd	r24, Y+1	; 0x01
     960:	9a 81       	ldd	r25, Y+2	; 0x02
     962:	89 2f       	mov	r24, r25
     964:	99 27       	eor	r25, r25
     966:	9a 83       	std	Y+2, r25	; 0x02
     968:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (char)(tmp&(unsigned short)0x00ff);
     96a:	89 81       	ldd	r24, Y+1	; 0x01
     96c:	eb 81       	ldd	r30, Y+3	; 0x03
     96e:	fc 81       	ldd	r31, Y+4	; 0x04
     970:	80 83       	st	Z, r24
     972:	8b 81       	ldd	r24, Y+3	; 0x03
     974:	9c 81       	ldd	r25, Y+4	; 0x04
     976:	01 97       	sbiw	r24, 0x01	; 1
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	8b 83       	std	Y+3, r24	; 0x03

    // s
    *tos-- = 0x00;
     97c:	eb 81       	ldd	r30, Y+3	; 0x03
     97e:	fc 81       	ldd	r31, Y+4	; 0x04
     980:	10 82       	st	Z, r1
     982:	8b 81       	ldd	r24, Y+3	; 0x03
     984:	9c 81       	ldd	r25, Y+4	; 0x04
     986:	01 97       	sbiw	r24, 0x01	; 1
     988:	9c 83       	std	Y+4, r25	; 0x04
     98a:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x00;// r1 must B 0
     98c:	eb 81       	ldd	r30, Y+3	; 0x03
     98e:	fc 81       	ldd	r31, Y+4	; 0x04
     990:	10 82       	st	Z, r1
     992:	8b 81       	ldd	r24, Y+3	; 0x03
     994:	9c 81       	ldd	r25, Y+4	; 0x04
     996:	01 97       	sbiw	r24, 0x01	; 1
     998:	9c 83       	std	Y+4, r25	; 0x04
     99a:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x02;// r2
     99c:	eb 81       	ldd	r30, Y+3	; 0x03
     99e:	fc 81       	ldd	r31, Y+4	; 0x04
     9a0:	82 e0       	ldi	r24, 0x02	; 2
     9a2:	80 83       	st	Z, r24
     9a4:	8b 81       	ldd	r24, Y+3	; 0x03
     9a6:	9c 81       	ldd	r25, Y+4	; 0x04
     9a8:	01 97       	sbiw	r24, 0x01	; 1
     9aa:	9c 83       	std	Y+4, r25	; 0x04
     9ac:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x80;// SREG: enable interrupts
     9ae:	eb 81       	ldd	r30, Y+3	; 0x03
     9b0:	fc 81       	ldd	r31, Y+4	; 0x04
     9b2:	80 e8       	ldi	r24, 0x80	; 128
     9b4:	80 83       	st	Z, r24
     9b6:	8b 81       	ldd	r24, Y+3	; 0x03
     9b8:	9c 81       	ldd	r25, Y+4	; 0x04
     9ba:	01 97       	sbiw	r24, 0x01	; 1
     9bc:	9c 83       	std	Y+4, r25	; 0x04
     9be:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x03;
     9c0:	eb 81       	ldd	r30, Y+3	; 0x03
     9c2:	fc 81       	ldd	r31, Y+4	; 0x04
     9c4:	83 e0       	ldi	r24, 0x03	; 3
     9c6:	80 83       	st	Z, r24
     9c8:	8b 81       	ldd	r24, Y+3	; 0x03
     9ca:	9c 81       	ldd	r25, Y+4	; 0x04
     9cc:	01 97       	sbiw	r24, 0x01	; 1
     9ce:	9c 83       	std	Y+4, r25	; 0x04
     9d0:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x04;
     9d2:	eb 81       	ldd	r30, Y+3	; 0x03
     9d4:	fc 81       	ldd	r31, Y+4	; 0x04
     9d6:	84 e0       	ldi	r24, 0x04	; 4
     9d8:	80 83       	st	Z, r24
     9da:	8b 81       	ldd	r24, Y+3	; 0x03
     9dc:	9c 81       	ldd	r25, Y+4	; 0x04
     9de:	01 97       	sbiw	r24, 0x01	; 1
     9e0:	9c 83       	std	Y+4, r25	; 0x04
     9e2:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x05;
     9e4:	eb 81       	ldd	r30, Y+3	; 0x03
     9e6:	fc 81       	ldd	r31, Y+4	; 0x04
     9e8:	85 e0       	ldi	r24, 0x05	; 5
     9ea:	80 83       	st	Z, r24
     9ec:	8b 81       	ldd	r24, Y+3	; 0x03
     9ee:	9c 81       	ldd	r25, Y+4	; 0x04
     9f0:	01 97       	sbiw	r24, 0x01	; 1
     9f2:	9c 83       	std	Y+4, r25	; 0x04
     9f4:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x06;
     9f6:	eb 81       	ldd	r30, Y+3	; 0x03
     9f8:	fc 81       	ldd	r31, Y+4	; 0x04
     9fa:	86 e0       	ldi	r24, 0x06	; 6
     9fc:	80 83       	st	Z, r24
     9fe:	8b 81       	ldd	r24, Y+3	; 0x03
     a00:	9c 81       	ldd	r25, Y+4	; 0x04
     a02:	01 97       	sbiw	r24, 0x01	; 1
     a04:	9c 83       	std	Y+4, r25	; 0x04
     a06:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x07;
     a08:	eb 81       	ldd	r30, Y+3	; 0x03
     a0a:	fc 81       	ldd	r31, Y+4	; 0x04
     a0c:	87 e0       	ldi	r24, 0x07	; 7
     a0e:	80 83       	st	Z, r24
     a10:	8b 81       	ldd	r24, Y+3	; 0x03
     a12:	9c 81       	ldd	r25, Y+4	; 0x04
     a14:	01 97       	sbiw	r24, 0x01	; 1
     a16:	9c 83       	std	Y+4, r25	; 0x04
     a18:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x08;
     a1a:	eb 81       	ldd	r30, Y+3	; 0x03
     a1c:	fc 81       	ldd	r31, Y+4	; 0x04
     a1e:	88 e0       	ldi	r24, 0x08	; 8
     a20:	80 83       	st	Z, r24
     a22:	8b 81       	ldd	r24, Y+3	; 0x03
     a24:	9c 81       	ldd	r25, Y+4	; 0x04
     a26:	01 97       	sbiw	r24, 0x01	; 1
     a28:	9c 83       	std	Y+4, r25	; 0x04
     a2a:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x09;
     a2c:	eb 81       	ldd	r30, Y+3	; 0x03
     a2e:	fc 81       	ldd	r31, Y+4	; 0x04
     a30:	89 e0       	ldi	r24, 0x09	; 9
     a32:	80 83       	st	Z, r24
     a34:	8b 81       	ldd	r24, Y+3	; 0x03
     a36:	9c 81       	ldd	r25, Y+4	; 0x04
     a38:	01 97       	sbiw	r24, 0x01	; 1
     a3a:	9c 83       	std	Y+4, r25	; 0x04
     a3c:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x10;
     a3e:	eb 81       	ldd	r30, Y+3	; 0x03
     a40:	fc 81       	ldd	r31, Y+4	; 0x04
     a42:	80 e1       	ldi	r24, 0x10	; 16
     a44:	80 83       	st	Z, r24
     a46:	8b 81       	ldd	r24, Y+3	; 0x03
     a48:	9c 81       	ldd	r25, Y+4	; 0x04
     a4a:	01 97       	sbiw	r24, 0x01	; 1
     a4c:	9c 83       	std	Y+4, r25	; 0x04
     a4e:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x11;
     a50:	eb 81       	ldd	r30, Y+3	; 0x03
     a52:	fc 81       	ldd	r31, Y+4	; 0x04
     a54:	81 e1       	ldi	r24, 0x11	; 17
     a56:	80 83       	st	Z, r24
     a58:	8b 81       	ldd	r24, Y+3	; 0x03
     a5a:	9c 81       	ldd	r25, Y+4	; 0x04
     a5c:	01 97       	sbiw	r24, 0x01	; 1
     a5e:	9c 83       	std	Y+4, r25	; 0x04
     a60:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x12;
     a62:	eb 81       	ldd	r30, Y+3	; 0x03
     a64:	fc 81       	ldd	r31, Y+4	; 0x04
     a66:	82 e1       	ldi	r24, 0x12	; 18
     a68:	80 83       	st	Z, r24
     a6a:	8b 81       	ldd	r24, Y+3	; 0x03
     a6c:	9c 81       	ldd	r25, Y+4	; 0x04
     a6e:	01 97       	sbiw	r24, 0x01	; 1
     a70:	9c 83       	std	Y+4, r25	; 0x04
     a72:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x13;
     a74:	eb 81       	ldd	r30, Y+3	; 0x03
     a76:	fc 81       	ldd	r31, Y+4	; 0x04
     a78:	83 e1       	ldi	r24, 0x13	; 19
     a7a:	80 83       	st	Z, r24
     a7c:	8b 81       	ldd	r24, Y+3	; 0x03
     a7e:	9c 81       	ldd	r25, Y+4	; 0x04
     a80:	01 97       	sbiw	r24, 0x01	; 1
     a82:	9c 83       	std	Y+4, r25	; 0x04
     a84:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x14;
     a86:	eb 81       	ldd	r30, Y+3	; 0x03
     a88:	fc 81       	ldd	r31, Y+4	; 0x04
     a8a:	84 e1       	ldi	r24, 0x14	; 20
     a8c:	80 83       	st	Z, r24
     a8e:	8b 81       	ldd	r24, Y+3	; 0x03
     a90:	9c 81       	ldd	r25, Y+4	; 0x04
     a92:	01 97       	sbiw	r24, 0x01	; 1
     a94:	9c 83       	std	Y+4, r25	; 0x04
     a96:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x15;
     a98:	eb 81       	ldd	r30, Y+3	; 0x03
     a9a:	fc 81       	ldd	r31, Y+4	; 0x04
     a9c:	85 e1       	ldi	r24, 0x15	; 21
     a9e:	80 83       	st	Z, r24
     aa0:	8b 81       	ldd	r24, Y+3	; 0x03
     aa2:	9c 81       	ldd	r25, Y+4	; 0x04
     aa4:	01 97       	sbiw	r24, 0x01	; 1
     aa6:	9c 83       	std	Y+4, r25	; 0x04
     aa8:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x16;
     aaa:	eb 81       	ldd	r30, Y+3	; 0x03
     aac:	fc 81       	ldd	r31, Y+4	; 0x04
     aae:	86 e1       	ldi	r24, 0x16	; 22
     ab0:	80 83       	st	Z, r24
     ab2:	8b 81       	ldd	r24, Y+3	; 0x03
     ab4:	9c 81       	ldd	r25, Y+4	; 0x04
     ab6:	01 97       	sbiw	r24, 0x01	; 1
     ab8:	9c 83       	std	Y+4, r25	; 0x04
     aba:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x17;
     abc:	eb 81       	ldd	r30, Y+3	; 0x03
     abe:	fc 81       	ldd	r31, Y+4	; 0x04
     ac0:	87 e1       	ldi	r24, 0x17	; 23
     ac2:	80 83       	st	Z, r24
     ac4:	8b 81       	ldd	r24, Y+3	; 0x03
     ac6:	9c 81       	ldd	r25, Y+4	; 0x04
     ac8:	01 97       	sbiw	r24, 0x01	; 1
     aca:	9c 83       	std	Y+4, r25	; 0x04
     acc:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x18;
     ace:	eb 81       	ldd	r30, Y+3	; 0x03
     ad0:	fc 81       	ldd	r31, Y+4	; 0x04
     ad2:	88 e1       	ldi	r24, 0x18	; 24
     ad4:	80 83       	st	Z, r24
     ad6:	8b 81       	ldd	r24, Y+3	; 0x03
     ad8:	9c 81       	ldd	r25, Y+4	; 0x04
     ada:	01 97       	sbiw	r24, 0x01	; 1
     adc:	9c 83       	std	Y+4, r25	; 0x04
     ade:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x19;
     ae0:	eb 81       	ldd	r30, Y+3	; 0x03
     ae2:	fc 81       	ldd	r31, Y+4	; 0x04
     ae4:	89 e1       	ldi	r24, 0x19	; 25
     ae6:	80 83       	st	Z, r24
     ae8:	8b 81       	ldd	r24, Y+3	; 0x03
     aea:	9c 81       	ldd	r25, Y+4	; 0x04
     aec:	01 97       	sbiw	r24, 0x01	; 1
     aee:	9c 83       	std	Y+4, r25	; 0x04
     af0:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x20;
     af2:	eb 81       	ldd	r30, Y+3	; 0x03
     af4:	fc 81       	ldd	r31, Y+4	; 0x04
     af6:	80 e2       	ldi	r24, 0x20	; 32
     af8:	80 83       	st	Z, r24
     afa:	8b 81       	ldd	r24, Y+3	; 0x03
     afc:	9c 81       	ldd	r25, Y+4	; 0x04
     afe:	01 97       	sbiw	r24, 0x01	; 1
     b00:	9c 83       	std	Y+4, r25	; 0x04
     b02:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x21;
     b04:	eb 81       	ldd	r30, Y+3	; 0x03
     b06:	fc 81       	ldd	r31, Y+4	; 0x04
     b08:	81 e2       	ldi	r24, 0x21	; 33
     b0a:	80 83       	st	Z, r24
     b0c:	8b 81       	ldd	r24, Y+3	; 0x03
     b0e:	9c 81       	ldd	r25, Y+4	; 0x04
     b10:	01 97       	sbiw	r24, 0x01	; 1
     b12:	9c 83       	std	Y+4, r25	; 0x04
     b14:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x22;
     b16:	eb 81       	ldd	r30, Y+3	; 0x03
     b18:	fc 81       	ldd	r31, Y+4	; 0x04
     b1a:	82 e2       	ldi	r24, 0x22	; 34
     b1c:	80 83       	st	Z, r24
     b1e:	8b 81       	ldd	r24, Y+3	; 0x03
     b20:	9c 81       	ldd	r25, Y+4	; 0x04
     b22:	01 97       	sbiw	r24, 0x01	; 1
     b24:	9c 83       	std	Y+4, r25	; 0x04
     b26:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x23;
     b28:	eb 81       	ldd	r30, Y+3	; 0x03
     b2a:	fc 81       	ldd	r31, Y+4	; 0x04
     b2c:	83 e2       	ldi	r24, 0x23	; 35
     b2e:	80 83       	st	Z, r24
     b30:	8b 81       	ldd	r24, Y+3	; 0x03
     b32:	9c 81       	ldd	r25, Y+4	; 0x04
     b34:	01 97       	sbiw	r24, 0x01	; 1
     b36:	9c 83       	std	Y+4, r25	; 0x04
     b38:	8b 83       	std	Y+3, r24	; 0x03

    tmp = (unsigned short)arg;
     b3a:	89 85       	ldd	r24, Y+9	; 0x09
     b3c:	9a 85       	ldd	r25, Y+10	; 0x0a
     b3e:	9a 83       	std	Y+2, r25	; 0x02
     b40:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (char)(tmp&(unsigned short)0x00ff); // r24 LSByte of arg
     b42:	89 81       	ldd	r24, Y+1	; 0x01
     b44:	eb 81       	ldd	r30, Y+3	; 0x03
     b46:	fc 81       	ldd	r31, Y+4	; 0x04
     b48:	80 83       	st	Z, r24
     b4a:	8b 81       	ldd	r24, Y+3	; 0x03
     b4c:	9c 81       	ldd	r25, Y+4	; 0x04
     b4e:	01 97       	sbiw	r24, 0x01	; 1
     b50:	9c 83       	std	Y+4, r25	; 0x04
     b52:	8b 83       	std	Y+3, r24	; 0x03
    tmp>>=8;
     b54:	89 81       	ldd	r24, Y+1	; 0x01
     b56:	9a 81       	ldd	r25, Y+2	; 0x02
     b58:	89 2f       	mov	r24, r25
     b5a:	99 27       	eor	r25, r25
     b5c:	9a 83       	std	Y+2, r25	; 0x02
     b5e:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (char)(tmp&(unsigned short)0x00ff); // r25 MSByte of arg
     b60:	89 81       	ldd	r24, Y+1	; 0x01
     b62:	eb 81       	ldd	r30, Y+3	; 0x03
     b64:	fc 81       	ldd	r31, Y+4	; 0x04
     b66:	80 83       	st	Z, r24
     b68:	8b 81       	ldd	r24, Y+3	; 0x03
     b6a:	9c 81       	ldd	r25, Y+4	; 0x04
     b6c:	01 97       	sbiw	r24, 0x01	; 1
     b6e:	9c 83       	std	Y+4, r25	; 0x04
     b70:	8b 83       	std	Y+3, r24	; 0x03

    *tos-- = 0x26;
     b72:	eb 81       	ldd	r30, Y+3	; 0x03
     b74:	fc 81       	ldd	r31, Y+4	; 0x04
     b76:	86 e2       	ldi	r24, 0x26	; 38
     b78:	80 83       	st	Z, r24
     b7a:	8b 81       	ldd	r24, Y+3	; 0x03
     b7c:	9c 81       	ldd	r25, Y+4	; 0x04
     b7e:	01 97       	sbiw	r24, 0x01	; 1
     b80:	9c 83       	std	Y+4, r25	; 0x04
     b82:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x27;
     b84:	eb 81       	ldd	r30, Y+3	; 0x03
     b86:	fc 81       	ldd	r31, Y+4	; 0x04
     b88:	87 e2       	ldi	r24, 0x27	; 39
     b8a:	80 83       	st	Z, r24
     b8c:	8b 81       	ldd	r24, Y+3	; 0x03
     b8e:	9c 81       	ldd	r25, Y+4	; 0x04
     b90:	01 97       	sbiw	r24, 0x01	; 1
     b92:	9c 83       	std	Y+4, r25	; 0x04
     b94:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x28;
     b96:	eb 81       	ldd	r30, Y+3	; 0x03
     b98:	fc 81       	ldd	r31, Y+4	; 0x04
     b9a:	88 e2       	ldi	r24, 0x28	; 40
     b9c:	80 83       	st	Z, r24
     b9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ba0:	9c 81       	ldd	r25, Y+4	; 0x04
     ba2:	01 97       	sbiw	r24, 0x01	; 1
     ba4:	9c 83       	std	Y+4, r25	; 0x04
     ba6:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x29;
     ba8:	eb 81       	ldd	r30, Y+3	; 0x03
     baa:	fc 81       	ldd	r31, Y+4	; 0x04
     bac:	89 e2       	ldi	r24, 0x29	; 41
     bae:	80 83       	st	Z, r24
     bb0:	8b 81       	ldd	r24, Y+3	; 0x03
     bb2:	9c 81       	ldd	r25, Y+4	; 0x04
     bb4:	01 97       	sbiw	r24, 0x01	; 1
     bb6:	9c 83       	std	Y+4, r25	; 0x04
     bb8:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x30;
     bba:	eb 81       	ldd	r30, Y+3	; 0x03
     bbc:	fc 81       	ldd	r31, Y+4	; 0x04
     bbe:	80 e3       	ldi	r24, 0x30	; 48
     bc0:	80 83       	st	Z, r24
     bc2:	8b 81       	ldd	r24, Y+3	; 0x03
     bc4:	9c 81       	ldd	r25, Y+4	; 0x04
     bc6:	01 97       	sbiw	r24, 0x01	; 1
     bc8:	9c 83       	std	Y+4, r25	; 0x04
     bca:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x31;
     bcc:	eb 81       	ldd	r30, Y+3	; 0x03
     bce:	fc 81       	ldd	r31, Y+4	; 0x04
     bd0:	81 e3       	ldi	r24, 0x31	; 49
     bd2:	80 83       	st	Z, r24
     bd4:	8b 81       	ldd	r24, Y+3	; 0x03
     bd6:	9c 81       	ldd	r25, Y+4	; 0x04
     bd8:	01 97       	sbiw	r24, 0x01	; 1
     bda:	9c 83       	std	Y+4, r25	; 0x04
     bdc:	8b 83       	std	Y+3, r24	; 0x03
#ifdef RAMPZ
    *tos-- = 0xff;
#endif
    return((void *)tos);
     bde:	8b 81       	ldd	r24, Y+3	; 0x03
     be0:	9c 81       	ldd	r25, Y+4	; 0x04
}
     be2:	2a 96       	adiw	r28, 0x0a	; 10
     be4:	0f b6       	in	r0, 0x3f	; 63
     be6:	f8 94       	cli
     be8:	de bf       	out	0x3e, r29	; 62
     bea:	0f be       	out	0x3f, r0	; 63
     bec:	cd bf       	out	0x3d, r28	; 61
     bee:	cf 91       	pop	r28
     bf0:	df 91       	pop	r29
     bf2:	08 95       	ret

00000bf4 <enter_crit_sec>:
    if( kernel.sched[core].nested_crit_sec == (count_t)0 )enable_interrupts();
}

#else
void enter_crit_sec(void)
{
     bf4:	df 93       	push	r29
     bf6:	cf 93       	push	r28
     bf8:	cd b7       	in	r28, 0x3d	; 61
     bfa:	de b7       	in	r29, 0x3e	; 62
    disable_interrupts();
     bfc:	0e 94 bc 00 	call	0x178	; 0x178 <disable_interrupts>
    kernel.sched.nested_crit_sec++;
     c00:	80 91 c6 01 	lds	r24, 0x01C6
     c04:	90 91 c7 01 	lds	r25, 0x01C7
     c08:	01 96       	adiw	r24, 0x01	; 1
     c0a:	90 93 c7 01 	sts	0x01C7, r25
     c0e:	80 93 c6 01 	sts	0x01C6, r24
}
     c12:	cf 91       	pop	r28
     c14:	df 91       	pop	r29
     c16:	08 95       	ret

00000c18 <exit_crit_sec>:
void exit_crit_sec(void)
{
     c18:	df 93       	push	r29
     c1a:	cf 93       	push	r28
     c1c:	cd b7       	in	r28, 0x3d	; 61
     c1e:	de b7       	in	r29, 0x3e	; 62
    if( kernel.sched.nested_crit_sec != (count_t)0 )kernel.sched.nested_crit_sec--;
     c20:	80 91 c6 01 	lds	r24, 0x01C6
     c24:	90 91 c7 01 	lds	r25, 0x01C7
     c28:	00 97       	sbiw	r24, 0x00	; 0
     c2a:	49 f0       	breq	.+18     	; 0xc3e <exit_crit_sec+0x26>
     c2c:	80 91 c6 01 	lds	r24, 0x01C6
     c30:	90 91 c7 01 	lds	r25, 0x01C7
     c34:	01 97       	sbiw	r24, 0x01	; 1
     c36:	90 93 c7 01 	sts	0x01C7, r25
     c3a:	80 93 c6 01 	sts	0x01C6, r24
    if( kernel.sched.nested_crit_sec == (count_t)0 )enable_interrupts();
     c3e:	80 91 c6 01 	lds	r24, 0x01C6
     c42:	90 91 c7 01 	lds	r25, 0x01C7
     c46:	00 97       	sbiw	r24, 0x00	; 0
     c48:	11 f4       	brne	.+4      	; 0xc4e <exit_crit_sec+0x36>
     c4a:	0e 94 c4 00 	call	0x188	; 0x188 <enable_interrupts>
}
     c4e:	cf 91       	pop	r28
     c50:	df 91       	pop	r29
     c52:	08 95       	ret

00000c54 <gitem_init>:
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
// Инициация
void gitem_init(gitem_t * gitem, prio_t prio)
{
     c54:	df 93       	push	r29
     c56:	cf 93       	push	r28
     c58:	00 d0       	rcall	.+0      	; 0xc5a <gitem_init+0x6>
     c5a:	00 d0       	rcall	.+0      	; 0xc5c <gitem_init+0x8>
     c5c:	0f 92       	push	r0
     c5e:	cd b7       	in	r28, 0x3d	; 61
     c60:	de b7       	in	r29, 0x3e	; 62
     c62:	9c 83       	std	Y+4, r25	; 0x04
     c64:	8b 83       	std	Y+3, r24	; 0x03
     c66:	6d 83       	std	Y+5, r22	; 0x05
    group_t * group = &gitem->grp;
     c68:	8b 81       	ldd	r24, Y+3	; 0x03
     c6a:	9c 81       	ldd	r25, Y+4	; 0x04
     c6c:	06 96       	adiw	r24, 0x06	; 6
     c6e:	9a 83       	std	Y+2, r25	; 0x02
     c70:	89 83       	std	Y+1, r24	; 0x01
    item_init( (item_t *)gitem );
     c72:	8b 81       	ldd	r24, Y+3	; 0x03
     c74:	9c 81       	ldd	r25, Y+4	; 0x04
     c76:	0e 94 10 09 	call	0x1220	; 0x1220 <item_init>
    group_init( group, prio );
     c7a:	89 81       	ldd	r24, Y+1	; 0x01
     c7c:	9a 81       	ldd	r25, Y+2	; 0x02
     c7e:	6d 81       	ldd	r22, Y+5	; 0x05
     c80:	0e 94 80 08 	call	0x1100	; 0x1100 <group_init>
    gitem->group = group;
     c84:	eb 81       	ldd	r30, Y+3	; 0x03
     c86:	fc 81       	ldd	r31, Y+4	; 0x04
     c88:	89 81       	ldd	r24, Y+1	; 0x01
     c8a:	9a 81       	ldd	r25, Y+2	; 0x02
     c8c:	95 83       	std	Z+5, r25	; 0x05
     c8e:	84 83       	std	Z+4, r24	; 0x04
}
     c90:	0f 90       	pop	r0
     c92:	0f 90       	pop	r0
     c94:	0f 90       	pop	r0
     c96:	0f 90       	pop	r0
     c98:	0f 90       	pop	r0
     c9a:	cf 91       	pop	r28
     c9c:	df 91       	pop	r29
     c9e:	08 95       	ret

00000ca0 <gitem_insert>:
// Вставить в список
void gitem_insert(gitem_t * gitem, xlist_t *xlist)
{
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
     ca8:	28 97       	sbiw	r28, 0x08	; 8
     caa:	0f b6       	in	r0, 0x3f	; 63
     cac:	f8 94       	cli
     cae:	de bf       	out	0x3e, r29	; 62
     cb0:	0f be       	out	0x3f, r0	; 63
     cb2:	cd bf       	out	0x3d, r28	; 61
     cb4:	9e 83       	std	Y+6, r25	; 0x06
     cb6:	8d 83       	std	Y+5, r24	; 0x05
     cb8:	78 87       	std	Y+8, r23	; 0x08
     cba:	6f 83       	std	Y+7, r22	; 0x07
    prio_t prio = gitem->group->prio;
     cbc:	ed 81       	ldd	r30, Y+5	; 0x05
     cbe:	fe 81       	ldd	r31, Y+6	; 0x06
     cc0:	04 80       	ldd	r0, Z+4	; 0x04
     cc2:	f5 81       	ldd	r31, Z+5	; 0x05
     cc4:	e0 2d       	mov	r30, r0
     cc6:	82 81       	ldd	r24, Z+2	; 0x02
     cc8:	8c 83       	std	Y+4, r24	; 0x04
    index_t mask = ((index_t)1)<<prio;
     cca:	8c 81       	ldd	r24, Y+4	; 0x04
     ccc:	28 2f       	mov	r18, r24
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	81 e0       	ldi	r24, 0x01	; 1
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <gitem_insert+0x3a>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	2a 95       	dec	r18
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <gitem_insert+0x36>
     cde:	8b 83       	std	Y+3, r24	; 0x03
    item_t ** head = (item_t **)xlist + prio;
     ce0:	2f 81       	ldd	r18, Y+7	; 0x07
     ce2:	38 85       	ldd	r19, Y+8	; 0x08
     ce4:	8c 81       	ldd	r24, Y+4	; 0x04
     ce6:	88 2f       	mov	r24, r24
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	88 0f       	add	r24, r24
     cec:	99 1f       	adc	r25, r25
     cee:	82 0f       	add	r24, r18
     cf0:	93 1f       	adc	r25, r19
     cf2:	9a 83       	std	Y+2, r25	; 0x02
     cf4:	89 83       	std	Y+1, r24	; 0x01
    // Пуста ли часть списка с таким приоритетом
    if( ( xlist->index )& mask)
     cf6:	ef 81       	ldd	r30, Y+7	; 0x07
     cf8:	f8 85       	ldd	r31, Y+8	; 0x08
     cfa:	90 89       	ldd	r25, Z+16	; 0x10
     cfc:	8b 81       	ldd	r24, Y+3	; 0x03
     cfe:	89 23       	and	r24, r25
     d00:	88 23       	and	r24, r24
     d02:	51 f0       	breq	.+20     	; 0xd18 <gitem_insert+0x78>
    {
        //Не пуста вставляем туда gitem
        item_insert( (item_t *)gitem, *head );
     d04:	8d 81       	ldd	r24, Y+5	; 0x05
     d06:	9e 81       	ldd	r25, Y+6	; 0x06
     d08:	e9 81       	ldd	r30, Y+1	; 0x01
     d0a:	fa 81       	ldd	r31, Y+2	; 0x02
     d0c:	20 81       	ld	r18, Z
     d0e:	31 81       	ldd	r19, Z+1	; 0x01
     d10:	b9 01       	movw	r22, r18
     d12:	0e 94 28 09 	call	0x1250	; 0x1250 <item_insert>
     d16:	0e c0       	rjmp	.+28     	; 0xd34 <gitem_insert+0x94>
    }
    else
    {
        // Пуста, gitem будет головой
        *head = (item_t *)gitem;
     d18:	8d 81       	ldd	r24, Y+5	; 0x05
     d1a:	9e 81       	ldd	r25, Y+6	; 0x06
     d1c:	e9 81       	ldd	r30, Y+1	; 0x01
     d1e:	fa 81       	ldd	r31, Y+2	; 0x02
     d20:	91 83       	std	Z+1, r25	; 0x01
     d22:	80 83       	st	Z, r24
        xlist->index |= mask;
     d24:	ef 81       	ldd	r30, Y+7	; 0x07
     d26:	f8 85       	ldd	r31, Y+8	; 0x08
     d28:	90 89       	ldd	r25, Z+16	; 0x10
     d2a:	8b 81       	ldd	r24, Y+3	; 0x03
     d2c:	89 2b       	or	r24, r25
     d2e:	ef 81       	ldd	r30, Y+7	; 0x07
     d30:	f8 85       	ldd	r31, Y+8	; 0x08
     d32:	80 8b       	std	Z+16, r24	; 0x10
    }
    gitem->group->link = (void *)xlist;
     d34:	ed 81       	ldd	r30, Y+5	; 0x05
     d36:	fe 81       	ldd	r31, Y+6	; 0x06
     d38:	04 80       	ldd	r0, Z+4	; 0x04
     d3a:	f5 81       	ldd	r31, Z+5	; 0x05
     d3c:	e0 2d       	mov	r30, r0
     d3e:	8f 81       	ldd	r24, Y+7	; 0x07
     d40:	98 85       	ldd	r25, Y+8	; 0x08
     d42:	91 83       	std	Z+1, r25	; 0x01
     d44:	80 83       	st	Z, r24
}
     d46:	28 96       	adiw	r28, 0x08	; 8
     d48:	0f b6       	in	r0, 0x3f	; 63
     d4a:	f8 94       	cli
     d4c:	de bf       	out	0x3e, r29	; 62
     d4e:	0f be       	out	0x3f, r0	; 63
     d50:	cd bf       	out	0x3d, r28	; 61
     d52:	cf 91       	pop	r28
     d54:	df 91       	pop	r29
     d56:	08 95       	ret

00000d58 <gitem_insert_group>:
 при этом gitem->group переходит в Пул

 Ограничения на gitem - он не должен быть сгруппирован в момент встаки в группу.
*/
void gitem_insert_group(gitem_t * gitem, xlist_t *xlist)
{
     d58:	df 93       	push	r29
     d5a:	cf 93       	push	r28
     d5c:	cd b7       	in	r28, 0x3d	; 61
     d5e:	de b7       	in	r29, 0x3e	; 62
     d60:	2a 97       	sbiw	r28, 0x0a	; 10
     d62:	0f b6       	in	r0, 0x3f	; 63
     d64:	f8 94       	cli
     d66:	de bf       	out	0x3e, r29	; 62
     d68:	0f be       	out	0x3f, r0	; 63
     d6a:	cd bf       	out	0x3d, r28	; 61
     d6c:	98 87       	std	Y+8, r25	; 0x08
     d6e:	8f 83       	std	Y+7, r24	; 0x07
     d70:	7a 87       	std	Y+10, r23	; 0x0a
     d72:	69 87       	std	Y+9, r22	; 0x09
    prio_t prio = gitem->group->prio;
     d74:	ef 81       	ldd	r30, Y+7	; 0x07
     d76:	f8 85       	ldd	r31, Y+8	; 0x08
     d78:	04 80       	ldd	r0, Z+4	; 0x04
     d7a:	f5 81       	ldd	r31, Z+5	; 0x05
     d7c:	e0 2d       	mov	r30, r0
     d7e:	82 81       	ldd	r24, Z+2	; 0x02
     d80:	8e 83       	std	Y+6, r24	; 0x06
    index_t mask = ((index_t)1)<<prio;
     d82:	8e 81       	ldd	r24, Y+6	; 0x06
     d84:	28 2f       	mov	r18, r24
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	02 c0       	rjmp	.+4      	; 0xd92 <gitem_insert_group+0x3a>
     d8e:	88 0f       	add	r24, r24
     d90:	99 1f       	adc	r25, r25
     d92:	2a 95       	dec	r18
     d94:	e2 f7       	brpl	.-8      	; 0xd8e <gitem_insert_group+0x36>
     d96:	8d 83       	std	Y+5, r24	; 0x05
    item_t ** head = (item_t **)xlist + prio;
     d98:	29 85       	ldd	r18, Y+9	; 0x09
     d9a:	3a 85       	ldd	r19, Y+10	; 0x0a
     d9c:	8e 81       	ldd	r24, Y+6	; 0x06
     d9e:	88 2f       	mov	r24, r24
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	88 0f       	add	r24, r24
     da4:	99 1f       	adc	r25, r25
     da6:	82 0f       	add	r24, r18
     da8:	93 1f       	adc	r25, r19
     daa:	9c 83       	std	Y+4, r25	; 0x04
     dac:	8b 83       	std	Y+3, r24	; 0x03
    group_t * group = gitem->group;
     dae:	ef 81       	ldd	r30, Y+7	; 0x07
     db0:	f8 85       	ldd	r31, Y+8	; 0x08
     db2:	84 81       	ldd	r24, Z+4	; 0x04
     db4:	95 81       	ldd	r25, Z+5	; 0x05
     db6:	9a 83       	std	Y+2, r25	; 0x02
     db8:	89 83       	std	Y+1, r24	; 0x01
    // Пуста ли часть списка с таким приоритетом
    if( ( xlist->index )& mask)
     dba:	e9 85       	ldd	r30, Y+9	; 0x09
     dbc:	fa 85       	ldd	r31, Y+10	; 0x0a
     dbe:	90 89       	ldd	r25, Z+16	; 0x10
     dc0:	8d 81       	ldd	r24, Y+5	; 0x05
     dc2:	89 23       	and	r24, r25
     dc4:	88 23       	and	r24, r24
     dc6:	31 f1       	breq	.+76     	; 0xe14 <gitem_insert_group+0xbc>
    {
        //Не пуста вставляем туда gitem
        item_insert((item_t *)gitem, *head );
     dc8:	8f 81       	ldd	r24, Y+7	; 0x07
     dca:	98 85       	ldd	r25, Y+8	; 0x08
     dcc:	eb 81       	ldd	r30, Y+3	; 0x03
     dce:	fc 81       	ldd	r31, Y+4	; 0x04
     dd0:	20 81       	ld	r18, Z
     dd2:	31 81       	ldd	r19, Z+1	; 0x01
     dd4:	b9 01       	movw	r22, r18
     dd6:	0e 94 28 09 	call	0x1250	; 0x1250 <item_insert>
        //Передаем старую группу в пул
        group_push(group);
     dda:	89 81       	ldd	r24, Y+1	; 0x01
     ddc:	9a 81       	ldd	r25, Y+2	; 0x02
     dde:	0e 94 9d 08 	call	0x113a	; 0x113a <group_push>
        //назначаем новую группу - ту, в которой голова
        group = ((gitem_t *)*head)->group;
     de2:	eb 81       	ldd	r30, Y+3	; 0x03
     de4:	fc 81       	ldd	r31, Y+4	; 0x04
     de6:	80 81       	ld	r24, Z
     de8:	91 81       	ldd	r25, Z+1	; 0x01
     dea:	fc 01       	movw	r30, r24
     dec:	84 81       	ldd	r24, Z+4	; 0x04
     dee:	95 81       	ldd	r25, Z+5	; 0x05
     df0:	9a 83       	std	Y+2, r25	; 0x02
     df2:	89 83       	std	Y+1, r24	; 0x01
        gitem->group = group;
     df4:	ef 81       	ldd	r30, Y+7	; 0x07
     df6:	f8 85       	ldd	r31, Y+8	; 0x08
     df8:	89 81       	ldd	r24, Y+1	; 0x01
     dfa:	9a 81       	ldd	r25, Y+2	; 0x02
     dfc:	95 83       	std	Z+5, r25	; 0x05
     dfe:	84 83       	std	Z+4, r24	; 0x04
        //количество элементов в группе увеличилось на 1
        group->el_num++;
     e00:	e9 81       	ldd	r30, Y+1	; 0x01
     e02:	fa 81       	ldd	r31, Y+2	; 0x02
     e04:	83 81       	ldd	r24, Z+3	; 0x03
     e06:	94 81       	ldd	r25, Z+4	; 0x04
     e08:	01 96       	adiw	r24, 0x01	; 1
     e0a:	e9 81       	ldd	r30, Y+1	; 0x01
     e0c:	fa 81       	ldd	r31, Y+2	; 0x02
     e0e:	94 83       	std	Z+4, r25	; 0x04
     e10:	83 83       	std	Z+3, r24	; 0x03
     e12:	14 c0       	rjmp	.+40     	; 0xe3c <gitem_insert_group+0xe4>
    }
    else
    {
        // Пуста, gitem будет головой
        *head = (item_t *)gitem;
     e14:	8f 81       	ldd	r24, Y+7	; 0x07
     e16:	98 85       	ldd	r25, Y+8	; 0x08
     e18:	eb 81       	ldd	r30, Y+3	; 0x03
     e1a:	fc 81       	ldd	r31, Y+4	; 0x04
     e1c:	91 83       	std	Z+1, r25	; 0x01
     e1e:	80 83       	st	Z, r24
        xlist->index |= mask;
     e20:	e9 85       	ldd	r30, Y+9	; 0x09
     e22:	fa 85       	ldd	r31, Y+10	; 0x0a
     e24:	90 89       	ldd	r25, Z+16	; 0x10
     e26:	8d 81       	ldd	r24, Y+5	; 0x05
     e28:	89 2b       	or	r24, r25
     e2a:	e9 85       	ldd	r30, Y+9	; 0x09
     e2c:	fa 85       	ldd	r31, Y+10	; 0x0a
     e2e:	80 8b       	std	Z+16, r24	; 0x10
        group->link = (void *)xlist;
     e30:	e9 81       	ldd	r30, Y+1	; 0x01
     e32:	fa 81       	ldd	r31, Y+2	; 0x02
     e34:	89 85       	ldd	r24, Y+9	; 0x09
     e36:	9a 85       	ldd	r25, Y+10	; 0x0a
     e38:	91 83       	std	Z+1, r25	; 0x01
     e3a:	80 83       	st	Z, r24
    }
}
     e3c:	2a 96       	adiw	r28, 0x0a	; 10
     e3e:	0f b6       	in	r0, 0x3f	; 63
     e40:	f8 94       	cli
     e42:	de bf       	out	0x3e, r29	; 62
     e44:	0f be       	out	0x3f, r0	; 63
     e46:	cd bf       	out	0x3d, r28	; 61
     e48:	cf 91       	pop	r28
     e4a:	df 91       	pop	r29
     e4c:	08 95       	ret

00000e4e <gitem_fast_cut>:
// Быстро вырезать из списка (не обнуляется указатель gitem->group->link)
void gitem_fast_cut(gitem_t * gitem)
{
     e4e:	df 93       	push	r29
     e50:	cf 93       	push	r28
     e52:	00 d0       	rcall	.+0      	; 0xe54 <gitem_fast_cut+0x6>
     e54:	00 d0       	rcall	.+0      	; 0xe56 <gitem_fast_cut+0x8>
     e56:	0f 92       	push	r0
     e58:	cd b7       	in	r28, 0x3d	; 61
     e5a:	de b7       	in	r29, 0x3e	; 62
     e5c:	9d 83       	std	Y+5, r25	; 0x05
     e5e:	8c 83       	std	Y+4, r24	; 0x04
    prio_t prio = gitem->group->prio;
     e60:	ec 81       	ldd	r30, Y+4	; 0x04
     e62:	fd 81       	ldd	r31, Y+5	; 0x05
     e64:	04 80       	ldd	r0, Z+4	; 0x04
     e66:	f5 81       	ldd	r31, Z+5	; 0x05
     e68:	e0 2d       	mov	r30, r0
     e6a:	82 81       	ldd	r24, Z+2	; 0x02
     e6c:	8b 83       	std	Y+3, r24	; 0x03
    xlist_t * xlist = (xlist_t *)gitem->group->link;
     e6e:	ec 81       	ldd	r30, Y+4	; 0x04
     e70:	fd 81       	ldd	r31, Y+5	; 0x05
     e72:	04 80       	ldd	r0, Z+4	; 0x04
     e74:	f5 81       	ldd	r31, Z+5	; 0x05
     e76:	e0 2d       	mov	r30, r0
     e78:	80 81       	ld	r24, Z
     e7a:	91 81       	ldd	r25, Z+1	; 0x01
     e7c:	9a 83       	std	Y+2, r25	; 0x02
     e7e:	89 83       	std	Y+1, r24	; 0x01
    // Является ли эта часть списка группированной?
    if( gitem->group->el_num > (count_t)1 )
     e80:	ec 81       	ldd	r30, Y+4	; 0x04
     e82:	fd 81       	ldd	r31, Y+5	; 0x05
     e84:	04 80       	ldd	r0, Z+4	; 0x04
     e86:	f5 81       	ldd	r31, Z+5	; 0x05
     e88:	e0 2d       	mov	r30, r0
     e8a:	83 81       	ldd	r24, Z+3	; 0x03
     e8c:	94 81       	ldd	r25, Z+4	; 0x04
     e8e:	82 30       	cpi	r24, 0x02	; 2
     e90:	91 05       	cpc	r25, r1
     e92:	b8 f0       	brcs	.+46     	; 0xec2 <gitem_fast_cut+0x74>
    {
        //Группированная часть списка, будем вырезать из группы с выделением новой группы из Пула
        // В текущей группе стало на 1 элемент меньше
        gitem->group->el_num--;
     e94:	ec 81       	ldd	r30, Y+4	; 0x04
     e96:	fd 81       	ldd	r31, Y+5	; 0x05
     e98:	04 80       	ldd	r0, Z+4	; 0x04
     e9a:	f5 81       	ldd	r31, Z+5	; 0x05
     e9c:	e0 2d       	mov	r30, r0
     e9e:	83 81       	ldd	r24, Z+3	; 0x03
     ea0:	94 81       	ldd	r25, Z+4	; 0x04
     ea2:	01 97       	sbiw	r24, 0x01	; 1
     ea4:	94 83       	std	Z+4, r25	; 0x04
     ea6:	83 83       	std	Z+3, r24	; 0x03
        //выделяем новую группу
        gitem->group = group_pop();
     ea8:	0e 94 b7 08 	call	0x116e	; 0x116e <group_pop>
     eac:	ec 81       	ldd	r30, Y+4	; 0x04
     eae:	fd 81       	ldd	r31, Y+5	; 0x05
     eb0:	95 83       	std	Z+5, r25	; 0x05
     eb2:	84 83       	std	Z+4, r24	; 0x04
        // Правильный приоритет, количество элементов в группе, выделенной из пула должно быть равно 1
        gitem->group->prio = (prio_t)prio;
     eb4:	ec 81       	ldd	r30, Y+4	; 0x04
     eb6:	fd 81       	ldd	r31, Y+5	; 0x05
     eb8:	04 80       	ldd	r0, Z+4	; 0x04
     eba:	f5 81       	ldd	r31, Z+5	; 0x05
     ebc:	e0 2d       	mov	r30, r0
     ebe:	8b 81       	ldd	r24, Y+3	; 0x03
     ec0:	82 83       	std	Z+2, r24	; 0x02
    }
    //Является ли элемент единственным в своей части списка?
    if( ((item_t *)gitem)->next == (item_t *)gitem )
     ec2:	ec 81       	ldd	r30, Y+4	; 0x04
     ec4:	fd 81       	ldd	r31, Y+5	; 0x05
     ec6:	20 81       	ld	r18, Z
     ec8:	31 81       	ldd	r19, Z+1	; 0x01
     eca:	8c 81       	ldd	r24, Y+4	; 0x04
     ecc:	9d 81       	ldd	r25, Y+5	; 0x05
     ece:	28 17       	cp	r18, r24
     ed0:	39 07       	cpc	r19, r25
     ed2:	09 f5       	brne	.+66     	; 0xf16 <gitem_fast_cut+0xc8>
    {
        // Да, является!
        xlist->item[prio] = (item_t *)0;
     ed4:	8b 81       	ldd	r24, Y+3	; 0x03
     ed6:	88 2f       	mov	r24, r24
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	29 81       	ldd	r18, Y+1	; 0x01
     edc:	3a 81       	ldd	r19, Y+2	; 0x02
     ede:	88 0f       	add	r24, r24
     ee0:	99 1f       	adc	r25, r25
     ee2:	f9 01       	movw	r30, r18
     ee4:	e8 0f       	add	r30, r24
     ee6:	f9 1f       	adc	r31, r25
     ee8:	11 82       	std	Z+1, r1	; 0x01
     eea:	10 82       	st	Z, r1
        xlist->index &= ~(((index_t)1)<<prio);
     eec:	e9 81       	ldd	r30, Y+1	; 0x01
     eee:	fa 81       	ldd	r31, Y+2	; 0x02
     ef0:	80 89       	ldd	r24, Z+16	; 0x10
     ef2:	48 2f       	mov	r20, r24
     ef4:	8b 81       	ldd	r24, Y+3	; 0x03
     ef6:	28 2f       	mov	r18, r24
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	02 2e       	mov	r0, r18
     f00:	02 c0       	rjmp	.+4      	; 0xf06 <gitem_fast_cut+0xb8>
     f02:	88 0f       	add	r24, r24
     f04:	99 1f       	adc	r25, r25
     f06:	0a 94       	dec	r0
     f08:	e2 f7       	brpl	.-8      	; 0xf02 <gitem_fast_cut+0xb4>
     f0a:	80 95       	com	r24
     f0c:	84 23       	and	r24, r20
     f0e:	e9 81       	ldd	r30, Y+1	; 0x01
     f10:	fa 81       	ldd	r31, Y+2	; 0x02
     f12:	80 8b       	std	Z+16, r24	; 0x10
     f14:	1a c0       	rjmp	.+52     	; 0xf4a <gitem_fast_cut+0xfc>
    }
    else
    {
        // Нет, не является!
        // Является ли элемент головой своей части списка?
        if( xlist->item[(prio_t)prio] == (item_t *)gitem )
     f16:	8b 81       	ldd	r24, Y+3	; 0x03
     f18:	88 2f       	mov	r24, r24
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	29 81       	ldd	r18, Y+1	; 0x01
     f1e:	3a 81       	ldd	r19, Y+2	; 0x02
     f20:	88 0f       	add	r24, r24
     f22:	99 1f       	adc	r25, r25
     f24:	f9 01       	movw	r30, r18
     f26:	e8 0f       	add	r30, r24
     f28:	f9 1f       	adc	r31, r25
     f2a:	20 81       	ld	r18, Z
     f2c:	31 81       	ldd	r19, Z+1	; 0x01
     f2e:	8c 81       	ldd	r24, Y+4	; 0x04
     f30:	9d 81       	ldd	r25, Y+5	; 0x05
     f32:	28 17       	cp	r18, r24
     f34:	39 07       	cpc	r19, r25
     f36:	29 f4       	brne	.+10     	; 0xf42 <gitem_fast_cut+0xf4>
        {
            // Является, список надо переключить
            xlist_switch( xlist, prio );
     f38:	89 81       	ldd	r24, Y+1	; 0x01
     f3a:	9a 81       	ldd	r25, Y+2	; 0x02
     f3c:	6b 81       	ldd	r22, Y+3	; 0x03
     f3e:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <xlist_switch>
        }
        // Собственно - вырезаем элемент
        item_cut( (item_t *)gitem );
     f42:	8c 81       	ldd	r24, Y+4	; 0x04
     f44:	9d 81       	ldd	r25, Y+5	; 0x05
     f46:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <item_cut>
    }
}
     f4a:	0f 90       	pop	r0
     f4c:	0f 90       	pop	r0
     f4e:	0f 90       	pop	r0
     f50:	0f 90       	pop	r0
     f52:	0f 90       	pop	r0
     f54:	cf 91       	pop	r28
     f56:	df 91       	pop	r29
     f58:	08 95       	ret

00000f5a <gitem_cut>:
// Вырезать из списка
void gitem_cut(gitem_t * gitem)
{
     f5a:	df 93       	push	r29
     f5c:	cf 93       	push	r28
     f5e:	00 d0       	rcall	.+0      	; 0xf60 <gitem_cut+0x6>
     f60:	cd b7       	in	r28, 0x3d	; 61
     f62:	de b7       	in	r29, 0x3e	; 62
     f64:	9a 83       	std	Y+2, r25	; 0x02
     f66:	89 83       	std	Y+1, r24	; 0x01
    gitem_fast_cut( gitem );
     f68:	89 81       	ldd	r24, Y+1	; 0x01
     f6a:	9a 81       	ldd	r25, Y+2	; 0x02
     f6c:	0e 94 27 07 	call	0xe4e	; 0xe4e <gitem_fast_cut>
    gitem->group->link = (void *)0;
     f70:	e9 81       	ldd	r30, Y+1	; 0x01
     f72:	fa 81       	ldd	r31, Y+2	; 0x02
     f74:	04 80       	ldd	r0, Z+4	; 0x04
     f76:	f5 81       	ldd	r31, Z+5	; 0x05
     f78:	e0 2d       	mov	r30, r0
     f7a:	11 82       	std	Z+1, r1	; 0x01
     f7c:	10 82       	st	Z, r1
}
     f7e:	0f 90       	pop	r0
     f80:	0f 90       	pop	r0
     f82:	cf 91       	pop	r28
     f84:	df 91       	pop	r29
     f86:	08 95       	ret

00000f88 <gitem_xlist_merge>:
 1) Оба списка содержат только объекты типа gitem_t
 2) В списке source на каждом уровне приоритета все объекты типа gitem_t приенадлежат к одной группе.
 3) Элементы списка source, находящиеся на разных уровнях приоритета, пренадлежат разным группам.
*/
void gitem_xlist_merge(xlist_t * source, xlist_t * destignation)
{
     f88:	df 93       	push	r29
     f8a:	cf 93       	push	r28
     f8c:	cd b7       	in	r28, 0x3d	; 61
     f8e:	de b7       	in	r29, 0x3e	; 62
     f90:	2c 97       	sbiw	r28, 0x0c	; 12
     f92:	0f b6       	in	r0, 0x3f	; 63
     f94:	f8 94       	cli
     f96:	de bf       	out	0x3e, r29	; 62
     f98:	0f be       	out	0x3f, r0	; 63
     f9a:	cd bf       	out	0x3d, r28	; 61
     f9c:	9a 87       	std	Y+10, r25	; 0x0a
     f9e:	89 87       	std	Y+9, r24	; 0x09
     fa0:	7c 87       	std	Y+12, r23	; 0x0c
     fa2:	6b 87       	std	Y+11, r22	; 0x0b
    index_t mask = (index_t)1;
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	88 87       	std	Y+8, r24	; 0x08
    prio_t current_prio = (prio_t)0;
     fa8:	1f 82       	std	Y+7, r1	; 0x07
     faa:	9a c0       	rjmp	.+308    	; 0x10e0 <gitem_xlist_merge+0x158>
    while( mask )
    {
        // Есть че перенести?
        if( mask & source->index )
     fac:	e9 85       	ldd	r30, Y+9	; 0x09
     fae:	fa 85       	ldd	r31, Y+10	; 0x0a
     fb0:	90 89       	ldd	r25, Z+16	; 0x10
     fb2:	88 85       	ldd	r24, Y+8	; 0x08
     fb4:	89 23       	and	r24, r25
     fb6:	88 23       	and	r24, r24
     fb8:	09 f4       	brne	.+2      	; 0xfbc <gitem_xlist_merge+0x34>
     fba:	8c c0       	rjmp	.+280    	; 0x10d4 <gitem_xlist_merge+0x14c>
        {
            // Есть!
            // Есть куда переносить?
            if( mask & destignation->index )
     fbc:	eb 85       	ldd	r30, Y+11	; 0x0b
     fbe:	fc 85       	ldd	r31, Y+12	; 0x0c
     fc0:	90 89       	ldd	r25, Z+16	; 0x10
     fc2:	88 85       	ldd	r24, Y+8	; 0x08
     fc4:	89 23       	and	r24, r25
     fc6:	88 23       	and	r24, r24
     fc8:	09 f4       	brne	.+2      	; 0xfcc <gitem_xlist_merge+0x44>
     fca:	43 c0       	rjmp	.+134    	; 0x1052 <gitem_xlist_merge+0xca>
            {
                //Есть!
                // Сшиваем 2 2-связных списка!!!
                item_t * src = source->item[current_prio];
     fcc:	8f 81       	ldd	r24, Y+7	; 0x07
     fce:	88 2f       	mov	r24, r24
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	29 85       	ldd	r18, Y+9	; 0x09
     fd4:	3a 85       	ldd	r19, Y+10	; 0x0a
     fd6:	88 0f       	add	r24, r24
     fd8:	99 1f       	adc	r25, r25
     fda:	f9 01       	movw	r30, r18
     fdc:	e8 0f       	add	r30, r24
     fde:	f9 1f       	adc	r31, r25
     fe0:	80 81       	ld	r24, Z
     fe2:	91 81       	ldd	r25, Z+1	; 0x01
     fe4:	9e 83       	std	Y+6, r25	; 0x06
     fe6:	8d 83       	std	Y+5, r24	; 0x05
                item_t * dst = destignation->item[current_prio];
     fe8:	8f 81       	ldd	r24, Y+7	; 0x07
     fea:	88 2f       	mov	r24, r24
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	2b 85       	ldd	r18, Y+11	; 0x0b
     ff0:	3c 85       	ldd	r19, Y+12	; 0x0c
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	f9 01       	movw	r30, r18
     ff8:	e8 0f       	add	r30, r24
     ffa:	f9 1f       	adc	r31, r25
     ffc:	80 81       	ld	r24, Z
     ffe:	91 81       	ldd	r25, Z+1	; 0x01
    1000:	9c 83       	std	Y+4, r25	; 0x04
    1002:	8b 83       	std	Y+3, r24	; 0x03
                src->prev->next = dst;
    1004:	ed 81       	ldd	r30, Y+5	; 0x05
    1006:	fe 81       	ldd	r31, Y+6	; 0x06
    1008:	02 80       	ldd	r0, Z+2	; 0x02
    100a:	f3 81       	ldd	r31, Z+3	; 0x03
    100c:	e0 2d       	mov	r30, r0
    100e:	8b 81       	ldd	r24, Y+3	; 0x03
    1010:	9c 81       	ldd	r25, Y+4	; 0x04
    1012:	91 83       	std	Z+1, r25	; 0x01
    1014:	80 83       	st	Z, r24
                dst->prev->next = src;
    1016:	eb 81       	ldd	r30, Y+3	; 0x03
    1018:	fc 81       	ldd	r31, Y+4	; 0x04
    101a:	02 80       	ldd	r0, Z+2	; 0x02
    101c:	f3 81       	ldd	r31, Z+3	; 0x03
    101e:	e0 2d       	mov	r30, r0
    1020:	8d 81       	ldd	r24, Y+5	; 0x05
    1022:	9e 81       	ldd	r25, Y+6	; 0x06
    1024:	91 83       	std	Z+1, r25	; 0x01
    1026:	80 83       	st	Z, r24
                item_t * buf = dst->prev;
    1028:	eb 81       	ldd	r30, Y+3	; 0x03
    102a:	fc 81       	ldd	r31, Y+4	; 0x04
    102c:	82 81       	ldd	r24, Z+2	; 0x02
    102e:	93 81       	ldd	r25, Z+3	; 0x03
    1030:	9a 83       	std	Y+2, r25	; 0x02
    1032:	89 83       	std	Y+1, r24	; 0x01
                dst->prev = src->prev;
    1034:	ed 81       	ldd	r30, Y+5	; 0x05
    1036:	fe 81       	ldd	r31, Y+6	; 0x06
    1038:	82 81       	ldd	r24, Z+2	; 0x02
    103a:	93 81       	ldd	r25, Z+3	; 0x03
    103c:	eb 81       	ldd	r30, Y+3	; 0x03
    103e:	fc 81       	ldd	r31, Y+4	; 0x04
    1040:	93 83       	std	Z+3, r25	; 0x03
    1042:	82 83       	std	Z+2, r24	; 0x02
                src->prev = buf;
    1044:	ed 81       	ldd	r30, Y+5	; 0x05
    1046:	fe 81       	ldd	r31, Y+6	; 0x06
    1048:	89 81       	ldd	r24, Y+1	; 0x01
    104a:	9a 81       	ldd	r25, Y+2	; 0x02
    104c:	93 83       	std	Z+3, r25	; 0x03
    104e:	82 83       	std	Z+2, r24	; 0x02
    1050:	21 c0       	rjmp	.+66     	; 0x1094 <gitem_xlist_merge+0x10c>
            }
            else
            {
                //Нет, тупо переносим всю группу.
                destignation->item[current_prio] = source->item[current_prio];
    1052:	8f 81       	ldd	r24, Y+7	; 0x07
    1054:	68 2f       	mov	r22, r24
    1056:	70 e0       	ldi	r23, 0x00	; 0
    1058:	8f 81       	ldd	r24, Y+7	; 0x07
    105a:	88 2f       	mov	r24, r24
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	29 85       	ldd	r18, Y+9	; 0x09
    1060:	3a 85       	ldd	r19, Y+10	; 0x0a
    1062:	88 0f       	add	r24, r24
    1064:	99 1f       	adc	r25, r25
    1066:	f9 01       	movw	r30, r18
    1068:	e8 0f       	add	r30, r24
    106a:	f9 1f       	adc	r31, r25
    106c:	40 81       	ld	r20, Z
    106e:	51 81       	ldd	r21, Z+1	; 0x01
    1070:	2b 85       	ldd	r18, Y+11	; 0x0b
    1072:	3c 85       	ldd	r19, Y+12	; 0x0c
    1074:	cb 01       	movw	r24, r22
    1076:	88 0f       	add	r24, r24
    1078:	99 1f       	adc	r25, r25
    107a:	f9 01       	movw	r30, r18
    107c:	e8 0f       	add	r30, r24
    107e:	f9 1f       	adc	r31, r25
    1080:	51 83       	std	Z+1, r21	; 0x01
    1082:	40 83       	st	Z, r20
                destignation->index |= mask;
    1084:	eb 85       	ldd	r30, Y+11	; 0x0b
    1086:	fc 85       	ldd	r31, Y+12	; 0x0c
    1088:	90 89       	ldd	r25, Z+16	; 0x10
    108a:	88 85       	ldd	r24, Y+8	; 0x08
    108c:	89 2b       	or	r24, r25
    108e:	eb 85       	ldd	r30, Y+11	; 0x0b
    1090:	fc 85       	ldd	r31, Y+12	; 0x0c
    1092:	80 8b       	std	Z+16, r24	; 0x10
            }
            // Вот почему эта функция отнесена к методам gitem_t
            ((gitem_t *)source->item[current_prio])->group->link = (void *)destignation;
    1094:	8f 81       	ldd	r24, Y+7	; 0x07
    1096:	88 2f       	mov	r24, r24
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	29 85       	ldd	r18, Y+9	; 0x09
    109c:	3a 85       	ldd	r19, Y+10	; 0x0a
    109e:	88 0f       	add	r24, r24
    10a0:	99 1f       	adc	r25, r25
    10a2:	f9 01       	movw	r30, r18
    10a4:	e8 0f       	add	r30, r24
    10a6:	f9 1f       	adc	r31, r25
    10a8:	80 81       	ld	r24, Z
    10aa:	91 81       	ldd	r25, Z+1	; 0x01
    10ac:	fc 01       	movw	r30, r24
    10ae:	04 80       	ldd	r0, Z+4	; 0x04
    10b0:	f5 81       	ldd	r31, Z+5	; 0x05
    10b2:	e0 2d       	mov	r30, r0
    10b4:	8b 85       	ldd	r24, Y+11	; 0x0b
    10b6:	9c 85       	ldd	r25, Y+12	; 0x0c
    10b8:	91 83       	std	Z+1, r25	; 0x01
    10ba:	80 83       	st	Z, r24
            // Перенос закончен, обнуляем указатель
            source->item[(prio_t)current_prio] = (item_t *)0;
    10bc:	8f 81       	ldd	r24, Y+7	; 0x07
    10be:	88 2f       	mov	r24, r24
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	29 85       	ldd	r18, Y+9	; 0x09
    10c4:	3a 85       	ldd	r19, Y+10	; 0x0a
    10c6:	88 0f       	add	r24, r24
    10c8:	99 1f       	adc	r25, r25
    10ca:	f9 01       	movw	r30, r18
    10cc:	e8 0f       	add	r30, r24
    10ce:	f9 1f       	adc	r31, r25
    10d0:	11 82       	std	Z+1, r1	; 0x01
    10d2:	10 82       	st	Z, r1
        }
        mask<<=1;
    10d4:	88 85       	ldd	r24, Y+8	; 0x08
    10d6:	88 0f       	add	r24, r24
    10d8:	88 87       	std	Y+8, r24	; 0x08
        current_prio++;
    10da:	8f 81       	ldd	r24, Y+7	; 0x07
    10dc:	8f 5f       	subi	r24, 0xFF	; 255
    10de:	8f 83       	std	Y+7, r24	; 0x07
*/
void gitem_xlist_merge(xlist_t * source, xlist_t * destignation)
{
    index_t mask = (index_t)1;
    prio_t current_prio = (prio_t)0;
    while( mask )
    10e0:	88 85       	ldd	r24, Y+8	; 0x08
    10e2:	88 23       	and	r24, r24
    10e4:	09 f0       	breq	.+2      	; 0x10e8 <gitem_xlist_merge+0x160>
    10e6:	62 cf       	rjmp	.-316    	; 0xfac <gitem_xlist_merge+0x24>
        }
        mask<<=1;
        current_prio++;
    }
    // Список полностью перенесен, обнуляем индекс
    source->index = (index_t)0;
    10e8:	e9 85       	ldd	r30, Y+9	; 0x09
    10ea:	fa 85       	ldd	r31, Y+10	; 0x0a
    10ec:	10 8a       	std	Z+16, r1	; 0x10
}
    10ee:	2c 96       	adiw	r28, 0x0c	; 12
    10f0:	0f b6       	in	r0, 0x3f	; 63
    10f2:	f8 94       	cli
    10f4:	de bf       	out	0x3e, r29	; 62
    10f6:	0f be       	out	0x3f, r0	; 63
    10f8:	cd bf       	out	0x3d, r28	; 61
    10fa:	cf 91       	pop	r28
    10fc:	df 91       	pop	r29
    10fe:	08 95       	ret

00001100 <group_init>:
*****************************************************************************************/
#include "../include/bugurt.h"
//Методы group_t
// инициация
void group_init(group_t * group, prio_t prio)
{
    1100:	df 93       	push	r29
    1102:	cf 93       	push	r28
    1104:	00 d0       	rcall	.+0      	; 0x1106 <group_init+0x6>
    1106:	0f 92       	push	r0
    1108:	cd b7       	in	r28, 0x3d	; 61
    110a:	de b7       	in	r29, 0x3e	; 62
    110c:	9a 83       	std	Y+2, r25	; 0x02
    110e:	89 83       	std	Y+1, r24	; 0x01
    1110:	6b 83       	std	Y+3, r22	; 0x03
    group->link = (void *)0;
    1112:	e9 81       	ldd	r30, Y+1	; 0x01
    1114:	fa 81       	ldd	r31, Y+2	; 0x02
    1116:	11 82       	std	Z+1, r1	; 0x01
    1118:	10 82       	st	Z, r1
    group->prio = prio;
    111a:	e9 81       	ldd	r30, Y+1	; 0x01
    111c:	fa 81       	ldd	r31, Y+2	; 0x02
    111e:	8b 81       	ldd	r24, Y+3	; 0x03
    1120:	82 83       	std	Z+2, r24	; 0x02
    // группа - часть gitem_t, количество элементов - 1
    group->el_num = (count_t)1;
    1122:	e9 81       	ldd	r30, Y+1	; 0x01
    1124:	fa 81       	ldd	r31, Y+2	; 0x02
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	94 83       	std	Z+4, r25	; 0x04
    112c:	83 83       	std	Z+3, r24	; 0x03
}
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	0f 90       	pop	r0
    1134:	cf 91       	pop	r28
    1136:	df 91       	pop	r29
    1138:	08 95       	ret

0000113a <group_push>:
// положить в ПУЛ
void group_push(group_t * group)
{
    113a:	df 93       	push	r29
    113c:	cf 93       	push	r28
    113e:	00 d0       	rcall	.+0      	; 0x1140 <group_push+0x6>
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
    1144:	9a 83       	std	Y+2, r25	; 0x02
    1146:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    // блокируем пул
    spin_lock( &kernel.pool_lock );
#endif
    group->link = (void *)kernel.pool;
    1148:	80 91 f6 01 	lds	r24, 0x01F6
    114c:	90 91 f7 01 	lds	r25, 0x01F7
    1150:	e9 81       	ldd	r30, Y+1	; 0x01
    1152:	fa 81       	ldd	r31, Y+2	; 0x02
    1154:	91 83       	std	Z+1, r25	; 0x01
    1156:	80 83       	st	Z, r24
    kernel.pool = group;
    1158:	89 81       	ldd	r24, Y+1	; 0x01
    115a:	9a 81       	ldd	r25, Y+2	; 0x02
    115c:	90 93 f7 01 	sts	0x01F7, r25
    1160:	80 93 f6 01 	sts	0x01F6, r24
#ifdef CONFIG_MP
    // разблокируем пул
    spin_unlock( &kernel.pool_lock );
#endif
}
    1164:	0f 90       	pop	r0
    1166:	0f 90       	pop	r0
    1168:	cf 91       	pop	r28
    116a:	df 91       	pop	r29
    116c:	08 95       	ret

0000116e <group_pop>:
// взять из пула, если есть, а есть всегда, избыточность же!
group_t * group_pop(void)
{
    116e:	df 93       	push	r29
    1170:	cf 93       	push	r28
    1172:	00 d0       	rcall	.+0      	; 0x1174 <group_pop+0x6>
    1174:	cd b7       	in	r28, 0x3d	; 61
    1176:	de b7       	in	r29, 0x3e	; 62
#ifdef CONFIG_MP
    // блокируем пул
    spin_lock( &kernel.pool_lock );
#endif
    group_t * group = kernel.pool;
    1178:	80 91 f6 01 	lds	r24, 0x01F6
    117c:	90 91 f7 01 	lds	r25, 0x01F7
    1180:	9a 83       	std	Y+2, r25	; 0x02
    1182:	89 83       	std	Y+1, r24	; 0x01
    kernel.pool = (group_t *)group->link;
    1184:	e9 81       	ldd	r30, Y+1	; 0x01
    1186:	fa 81       	ldd	r31, Y+2	; 0x02
    1188:	80 81       	ld	r24, Z
    118a:	91 81       	ldd	r25, Z+1	; 0x01
    118c:	90 93 f7 01 	sts	0x01F7, r25
    1190:	80 93 f6 01 	sts	0x01F6, r24
#ifdef CONFIG_MP
    // разблокируем пул
    spin_unlock( &kernel.pool_lock );
#endif
    return group;
    1194:	89 81       	ldd	r24, Y+1	; 0x01
    1196:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1198:	0f 90       	pop	r0
    119a:	0f 90       	pop	r0
    119c:	cf 91       	pop	r28
    119e:	df 91       	pop	r29
    11a0:	08 95       	ret

000011a2 <index_search>:
*                           http://www.0chan.ru/r/res/9996.html                          *
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
prio_t index_search(index_t index)
{
    11a2:	df 93       	push	r29
    11a4:	cf 93       	push	r28
    11a6:	00 d0       	rcall	.+0      	; 0x11a8 <index_search+0x6>
    11a8:	00 d0       	rcall	.+0      	; 0x11aa <index_search+0x8>
    11aa:	00 d0       	rcall	.+0      	; 0x11ac <index_search+0xa>
    11ac:	cd b7       	in	r28, 0x3d	; 61
    11ae:	de b7       	in	r29, 0x3e	; 62
    11b0:	8e 83       	std	Y+6, r24	; 0x06
    prio_t prio = (prio_t)0;
    11b2:	1d 82       	std	Y+5, r1	; 0x05
        но, т.к. BITS_IN_INDEX_T фиксировано для данной конфигурации,
        то получается время выполнения - O(1), ВСЕГДА.

        И да, предсказуемость + переносимость > быстродействие.
        */
    index_t upper = ~(index_t)0, lower = ~(index_t)0, middle;
    11b4:	8f ef       	ldi	r24, 0xFF	; 255
    11b6:	8c 83       	std	Y+4, r24	; 0x04
    11b8:	8f ef       	ldi	r24, 0xFF	; 255
    11ba:	8b 83       	std	Y+3, r24	; 0x03
    prio_t step = (prio_t)BITS_IN_INDEX_T;
    11bc:	88 e0       	ldi	r24, 0x08	; 8
    11be:	89 83       	std	Y+1, r24	; 0x01
    11c0:	22 c0       	rjmp	.+68     	; 0x1206 <index_search+0x64>
    while( step )
    {
        step>>=1; // делим шаг пополам
    11c2:	89 81       	ldd	r24, Y+1	; 0x01
    11c4:	86 95       	lsr	r24
    11c6:	89 83       	std	Y+1, r24	; 0x01
        middle = lower>>step;
    11c8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ca:	28 2f       	mov	r18, r24
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	89 81       	ldd	r24, Y+1	; 0x01
    11d0:	88 2f       	mov	r24, r24
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	a9 01       	movw	r20, r18
    11d6:	02 c0       	rjmp	.+4      	; 0x11dc <index_search+0x3a>
    11d8:	55 95       	asr	r21
    11da:	47 95       	ror	r20
    11dc:	8a 95       	dec	r24
    11de:	e2 f7       	brpl	.-8      	; 0x11d8 <index_search+0x36>
    11e0:	ca 01       	movw	r24, r20
    11e2:	8a 83       	std	Y+2, r24	; 0x02
        if( index & upper & middle )
    11e4:	9e 81       	ldd	r25, Y+6	; 0x06
    11e6:	8c 81       	ldd	r24, Y+4	; 0x04
    11e8:	98 23       	and	r25, r24
    11ea:	8a 81       	ldd	r24, Y+2	; 0x02
    11ec:	89 23       	and	r24, r25
    11ee:	88 23       	and	r24, r24
    11f0:	19 f0       	breq	.+6      	; 0x11f8 <index_search+0x56>
        {
            lower = middle;
    11f2:	8a 81       	ldd	r24, Y+2	; 0x02
    11f4:	8b 83       	std	Y+3, r24	; 0x03
    11f6:	07 c0       	rjmp	.+14     	; 0x1206 <index_search+0x64>
        }
        else
        {
            upper = ~middle;
    11f8:	8a 81       	ldd	r24, Y+2	; 0x02
    11fa:	80 95       	com	r24
    11fc:	8c 83       	std	Y+4, r24	; 0x04
            prio += step;
    11fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1200:	89 81       	ldd	r24, Y+1	; 0x01
    1202:	89 0f       	add	r24, r25
    1204:	8d 83       	std	Y+5, r24	; 0x05

        И да, предсказуемость + переносимость > быстродействие.
        */
    index_t upper = ~(index_t)0, lower = ~(index_t)0, middle;
    prio_t step = (prio_t)BITS_IN_INDEX_T;
    while( step )
    1206:	89 81       	ldd	r24, Y+1	; 0x01
    1208:	88 23       	and	r24, r24
    120a:	d9 f6       	brne	.-74     	; 0x11c2 <index_search+0x20>
        if ( mask & index )break;
        prio++;
        mask<<=1;
    }
#endif
    return prio;
    120c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    120e:	26 96       	adiw	r28, 0x06	; 6
    1210:	0f b6       	in	r0, 0x3f	; 63
    1212:	f8 94       	cli
    1214:	de bf       	out	0x3e, r29	; 62
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	cd bf       	out	0x3d, r28	; 61
    121a:	cf 91       	pop	r28
    121c:	df 91       	pop	r29
    121e:	08 95       	ret

00001220 <item_init>:
*****************************************************************************************/
#include "../include/bugurt.h"
//Методы элемента 2-связного списка
//инициация элемента
void item_init(item_t *item)
{
    1220:	df 93       	push	r29
    1222:	cf 93       	push	r28
    1224:	00 d0       	rcall	.+0      	; 0x1226 <item_init+0x6>
    1226:	cd b7       	in	r28, 0x3d	; 61
    1228:	de b7       	in	r29, 0x3e	; 62
    122a:	9a 83       	std	Y+2, r25	; 0x02
    122c:	89 83       	std	Y+1, r24	; 0x01
    item->prev = item;
    122e:	e9 81       	ldd	r30, Y+1	; 0x01
    1230:	fa 81       	ldd	r31, Y+2	; 0x02
    1232:	89 81       	ldd	r24, Y+1	; 0x01
    1234:	9a 81       	ldd	r25, Y+2	; 0x02
    1236:	93 83       	std	Z+3, r25	; 0x03
    1238:	82 83       	std	Z+2, r24	; 0x02
    item->next = item;
    123a:	e9 81       	ldd	r30, Y+1	; 0x01
    123c:	fa 81       	ldd	r31, Y+2	; 0x02
    123e:	89 81       	ldd	r24, Y+1	; 0x01
    1240:	9a 81       	ldd	r25, Y+2	; 0x02
    1242:	91 83       	std	Z+1, r25	; 0x01
    1244:	80 83       	st	Z, r24
}
    1246:	0f 90       	pop	r0
    1248:	0f 90       	pop	r0
    124a:	cf 91       	pop	r28
    124c:	df 91       	pop	r29
    124e:	08 95       	ret

00001250 <item_insert>:
//Вставить элемент
void item_insert(item_t *item, item_t *head)
{
    1250:	df 93       	push	r29
    1252:	cf 93       	push	r28
    1254:	00 d0       	rcall	.+0      	; 0x1256 <item_insert+0x6>
    1256:	00 d0       	rcall	.+0      	; 0x1258 <item_insert+0x8>
    1258:	00 d0       	rcall	.+0      	; 0x125a <item_insert+0xa>
    125a:	cd b7       	in	r28, 0x3d	; 61
    125c:	de b7       	in	r29, 0x3e	; 62
    125e:	9c 83       	std	Y+4, r25	; 0x04
    1260:	8b 83       	std	Y+3, r24	; 0x03
    1262:	7e 83       	std	Y+6, r23	; 0x06
    1264:	6d 83       	std	Y+5, r22	; 0x05
    // "хвост" списка
    item_t * tail = head->prev;
    1266:	ed 81       	ldd	r30, Y+5	; 0x05
    1268:	fe 81       	ldd	r31, Y+6	; 0x06
    126a:	82 81       	ldd	r24, Z+2	; 0x02
    126c:	93 81       	ldd	r25, Z+3	; 0x03
    126e:	9a 83       	std	Y+2, r25	; 0x02
    1270:	89 83       	std	Y+1, r24	; 0x01

    // Вставляем элемент между "головой" и "хвостом"
    item->prev = tail;
    1272:	eb 81       	ldd	r30, Y+3	; 0x03
    1274:	fc 81       	ldd	r31, Y+4	; 0x04
    1276:	89 81       	ldd	r24, Y+1	; 0x01
    1278:	9a 81       	ldd	r25, Y+2	; 0x02
    127a:	93 83       	std	Z+3, r25	; 0x03
    127c:	82 83       	std	Z+2, r24	; 0x02
    item->next = head;
    127e:	eb 81       	ldd	r30, Y+3	; 0x03
    1280:	fc 81       	ldd	r31, Y+4	; 0x04
    1282:	8d 81       	ldd	r24, Y+5	; 0x05
    1284:	9e 81       	ldd	r25, Y+6	; 0x06
    1286:	91 83       	std	Z+1, r25	; 0x01
    1288:	80 83       	st	Z, r24

    head->prev = item;
    128a:	ed 81       	ldd	r30, Y+5	; 0x05
    128c:	fe 81       	ldd	r31, Y+6	; 0x06
    128e:	8b 81       	ldd	r24, Y+3	; 0x03
    1290:	9c 81       	ldd	r25, Y+4	; 0x04
    1292:	93 83       	std	Z+3, r25	; 0x03
    1294:	82 83       	std	Z+2, r24	; 0x02
    tail->next = item;
    1296:	e9 81       	ldd	r30, Y+1	; 0x01
    1298:	fa 81       	ldd	r31, Y+2	; 0x02
    129a:	8b 81       	ldd	r24, Y+3	; 0x03
    129c:	9c 81       	ldd	r25, Y+4	; 0x04
    129e:	91 83       	std	Z+1, r25	; 0x01
    12a0:	80 83       	st	Z, r24
}
    12a2:	26 96       	adiw	r28, 0x06	; 6
    12a4:	0f b6       	in	r0, 0x3f	; 63
    12a6:	f8 94       	cli
    12a8:	de bf       	out	0x3e, r29	; 62
    12aa:	0f be       	out	0x3f, r0	; 63
    12ac:	cd bf       	out	0x3d, r28	; 61
    12ae:	cf 91       	pop	r28
    12b0:	df 91       	pop	r29
    12b2:	08 95       	ret

000012b4 <item_cut>:
//Вырезать элемент
void item_cut( item_t *item )
{
    12b4:	df 93       	push	r29
    12b6:	cf 93       	push	r28
    12b8:	00 d0       	rcall	.+0      	; 0x12ba <item_cut+0x6>
    12ba:	00 d0       	rcall	.+0      	; 0x12bc <item_cut+0x8>
    12bc:	00 d0       	rcall	.+0      	; 0x12be <item_cut+0xa>
    12be:	cd b7       	in	r28, 0x3d	; 61
    12c0:	de b7       	in	r29, 0x3e	; 62
    12c2:	9e 83       	std	Y+6, r25	; 0x06
    12c4:	8d 83       	std	Y+5, r24	; 0x05
    item_t * prev = item->prev; //Предыдущий элемент
    12c6:	ed 81       	ldd	r30, Y+5	; 0x05
    12c8:	fe 81       	ldd	r31, Y+6	; 0x06
    12ca:	82 81       	ldd	r24, Z+2	; 0x02
    12cc:	93 81       	ldd	r25, Z+3	; 0x03
    12ce:	9c 83       	std	Y+4, r25	; 0x04
    12d0:	8b 83       	std	Y+3, r24	; 0x03
    item_t * next = item->next; //Следующий элемент
    12d2:	ed 81       	ldd	r30, Y+5	; 0x05
    12d4:	fe 81       	ldd	r31, Y+6	; 0x06
    12d6:	80 81       	ld	r24, Z
    12d8:	91 81       	ldd	r25, Z+1	; 0x01
    12da:	9a 83       	std	Y+2, r25	; 0x02
    12dc:	89 83       	std	Y+1, r24	; 0x01

    next->prev = prev;
    12de:	e9 81       	ldd	r30, Y+1	; 0x01
    12e0:	fa 81       	ldd	r31, Y+2	; 0x02
    12e2:	8b 81       	ldd	r24, Y+3	; 0x03
    12e4:	9c 81       	ldd	r25, Y+4	; 0x04
    12e6:	93 83       	std	Z+3, r25	; 0x03
    12e8:	82 83       	std	Z+2, r24	; 0x02
    prev->next = next;
    12ea:	eb 81       	ldd	r30, Y+3	; 0x03
    12ec:	fc 81       	ldd	r31, Y+4	; 0x04
    12ee:	89 81       	ldd	r24, Y+1	; 0x01
    12f0:	9a 81       	ldd	r25, Y+2	; 0x02
    12f2:	91 83       	std	Z+1, r25	; 0x01
    12f4:	80 83       	st	Z, r24

    item->prev = item;
    12f6:	ed 81       	ldd	r30, Y+5	; 0x05
    12f8:	fe 81       	ldd	r31, Y+6	; 0x06
    12fa:	8d 81       	ldd	r24, Y+5	; 0x05
    12fc:	9e 81       	ldd	r25, Y+6	; 0x06
    12fe:	93 83       	std	Z+3, r25	; 0x03
    1300:	82 83       	std	Z+2, r24	; 0x02
    item->next = item;
    1302:	ed 81       	ldd	r30, Y+5	; 0x05
    1304:	fe 81       	ldd	r31, Y+6	; 0x06
    1306:	8d 81       	ldd	r24, Y+5	; 0x05
    1308:	9e 81       	ldd	r25, Y+6	; 0x06
    130a:	91 83       	std	Z+1, r25	; 0x01
    130c:	80 83       	st	Z, r24
}
    130e:	26 96       	adiw	r28, 0x06	; 6
    1310:	0f b6       	in	r0, 0x3f	; 63
    1312:	f8 94       	cli
    1314:	de bf       	out	0x3e, r29	; 62
    1316:	0f be       	out	0x3f, r0	; 63
    1318:	cd bf       	out	0x3d, r28	; 61
    131a:	cf 91       	pop	r28
    131c:	df 91       	pop	r29
    131e:	08 95       	ret

00001320 <kernel_init>:
{
    while(1);
}

void kernel_init(void)
{
    1320:	8f 92       	push	r8
    1322:	af 92       	push	r10
    1324:	bf 92       	push	r11
    1326:	cf 92       	push	r12
    1328:	ef 92       	push	r14
    132a:	ff 92       	push	r15
    132c:	0f 93       	push	r16
    132e:	1f 93       	push	r17
    1330:	df 93       	push	r29
    1332:	cf 93       	push	r28
    1334:	cd b7       	in	r28, 0x3d	; 61
    1336:	de b7       	in	r29, 0x3e	; 62
        stat_init( (stat_t *)kernel.stat + i );
        sched_init( (sched_t *)kernel.sched + i, (proc_t *)kernel.idle + i );
    }
    spin_unlock( &kernel.stat_lock );
#else
    proc_init_isr(
    1338:	88 ec       	ldi	r24, 0xC8	; 200
    133a:	91 e0       	ldi	r25, 0x01	; 1
    133c:	20 e2       	ldi	r18, 0x20	; 32
    133e:	32 e1       	ldi	r19, 0x12	; 18
    1340:	b9 01       	movw	r22, r18
    1342:	40 e0       	ldi	r20, 0x00	; 0
    1344:	50 e0       	ldi	r21, 0x00	; 0
    1346:	20 e0       	ldi	r18, 0x00	; 0
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	00 e0       	ldi	r16, 0x00	; 0
    134c:	10 e0       	ldi	r17, 0x00	; 0
    134e:	ee 24       	eor	r14, r14
    1350:	ff 24       	eor	r15, r15
    1352:	0f 2e       	mov	r0, r31
    1354:	f7 e0       	ldi	r31, 0x07	; 7
    1356:	cf 2e       	mov	r12, r31
    1358:	f0 2d       	mov	r31, r0
    135a:	aa 24       	eor	r10, r10
    135c:	bb 24       	eor	r11, r11
    135e:	a3 94       	inc	r10
    1360:	88 24       	eor	r8, r8
    1362:	0e 94 66 0b 	call	0x16cc	; 0x16cc <proc_init_isr>
        0, // это не важно, при первой же смене контекста будет сохранен текущий указатель стека
        ((prio_t)BITS_IN_INDEX_T - (prio_t)1),// низший приоритет
        (timer_t)1,//минимальный квант времени
        (bool_t)0// не RT
    );
    sched_init( (sched_t *)&kernel.sched, (proc_t *)&kernel.idle );
    1366:	8e e9       	ldi	r24, 0x9E	; 158
    1368:	91 e0       	ldi	r25, 0x01	; 1
    136a:	28 ec       	ldi	r18, 0xC8	; 200
    136c:	31 e0       	ldi	r19, 0x01	; 1
    136e:	b9 01       	movw	r22, r18
    1370:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <sched_init>
#endif // CONFIG_MP
}
    1374:	cf 91       	pop	r28
    1376:	df 91       	pop	r29
    1378:	1f 91       	pop	r17
    137a:	0f 91       	pop	r16
    137c:	ff 90       	pop	r15
    137e:	ef 90       	pop	r14
    1380:	cf 90       	pop	r12
    1382:	bf 90       	pop	r11
    1384:	af 90       	pop	r10
    1386:	8f 90       	pop	r8
    1388:	08 95       	ret

0000138a <mutex_init_isr>:
    mutex_t * mutex
#ifdef CONFIG_USE_HIGHEST_LOCKER
    ,prio_t prio
#endif // CONFIG_USE_HIGHEST_LOCKER
)
{
    138a:	df 93       	push	r29
    138c:	cf 93       	push	r28
    138e:	00 d0       	rcall	.+0      	; 0x1390 <mutex_init_isr+0x6>
    1390:	0f 92       	push	r0
    1392:	cd b7       	in	r28, 0x3d	; 61
    1394:	de b7       	in	r29, 0x3e	; 62
    1396:	9a 83       	std	Y+2, r25	; 0x02
    1398:	89 83       	std	Y+1, r24	; 0x01
    139a:	6b 83       	std	Y+3, r22	; 0x03
    xlist_init( (xlist_t *)mutex );
    139c:	89 81       	ldd	r24, Y+1	; 0x01
    139e:	9a 81       	ldd	r25, Y+2	; 0x02
    13a0:	0e 94 9e 10 	call	0x213c	; 0x213c <xlist_init>
    mutex->free = (bool_t)1;
    13a4:	e9 81       	ldd	r30, Y+1	; 0x01
    13a6:	fa 81       	ldd	r31, Y+2	; 0x02
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	82 8b       	std	Z+18, r24	; 0x12
#ifdef CONFIG_USE_HIGHEST_LOCKER
    mutex->prio = prio;
    13ac:	e9 81       	ldd	r30, Y+1	; 0x01
    13ae:	fa 81       	ldd	r31, Y+2	; 0x02
    13b0:	8b 81       	ldd	r24, Y+3	; 0x03
    13b2:	81 8b       	std	Z+17, r24	; 0x11
#endif // CONFIG_USE_HIGHEST_LOCKER
}
    13b4:	0f 90       	pop	r0
    13b6:	0f 90       	pop	r0
    13b8:	0f 90       	pop	r0
    13ba:	cf 91       	pop	r28
    13bc:	df 91       	pop	r29
    13be:	08 95       	ret

000013c0 <_mutex_lock>:

// К моменту вызова захвачена блокировка mutex-а, запрещены прерывания
bool_t _mutex_lock( mutex_t * mutex )
{
    13c0:	df 93       	push	r29
    13c2:	cf 93       	push	r28
    13c4:	00 d0       	rcall	.+0      	; 0x13c6 <_mutex_lock+0x6>
    13c6:	00 d0       	rcall	.+0      	; 0x13c8 <_mutex_lock+0x8>
    13c8:	0f 92       	push	r0
    13ca:	cd b7       	in	r28, 0x3d	; 61
    13cc:	de b7       	in	r29, 0x3e	; 62
    13ce:	9d 83       	std	Y+5, r25	; 0x05
    13d0:	8c 83       	std	Y+4, r24	; 0x04
    bool_t ret = mutex->free;
    13d2:	ec 81       	ldd	r30, Y+4	; 0x04
    13d4:	fd 81       	ldd	r31, Y+5	; 0x05
    13d6:	82 89       	ldd	r24, Z+18	; 0x12
    13d8:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = current_proc();
    13da:	0e 94 cc 00 	call	0x198	; 0x198 <current_proc>
    13de:	9a 83       	std	Y+2, r25	; 0x02
    13e0:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
#ifdef CONFIG_USE_HIGHEST_LOCKER
    _proc_lres_inc( proc, mutex->prio );
    13e2:	ec 81       	ldd	r30, Y+4	; 0x04
    13e4:	fd 81       	ldd	r31, Y+5	; 0x05
    13e6:	21 89       	ldd	r18, Z+17	; 0x11
    13e8:	89 81       	ldd	r24, Y+1	; 0x01
    13ea:	9a 81       	ldd	r25, Y+2	; 0x02
    13ec:	62 2f       	mov	r22, r18
    13ee:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <_proc_lres_inc>
#else // CONFIG_USE_HIGHEST_LOCKER
    _proc_lres_inc( proc );
#endif // CONFIG_USE_HIGHEST_LOCKER
    if( ret )
    13f2:	8b 81       	ldd	r24, Y+3	; 0x03
    13f4:	88 23       	and	r24, r24
    13f6:	41 f0       	breq	.+16     	; 0x1408 <_mutex_lock+0x48>
    {
        mutex->free = (bool_t)0;
    13f8:	ec 81       	ldd	r30, Y+4	; 0x04
    13fa:	fd 81       	ldd	r31, Y+5	; 0x05
    13fc:	12 8a       	std	Z+18, r1	; 0x12
#ifdef CONFIG_USE_HIGHEST_LOCKER
        // Меняем приоритет только здесь
        _proc_prio_control_running( proc );
    13fe:	89 81       	ldd	r24, Y+1	; 0x01
    1400:	9a 81       	ldd	r25, Y+2	; 0x02
    1402:	0e 94 77 0d 	call	0x1aee	; 0x1aee <_proc_prio_control_running>
    1406:	1b c0       	rjmp	.+54     	; 0x143e <_mutex_lock+0x7e>
#endif // CONFIG_USE_HIGHEST_LOCKER
    }
    else
    {
        proc->flags |= PROC_FLG_QUEUE;
    1408:	e9 81       	ldd	r30, Y+1	; 0x01
    140a:	fa 81       	ldd	r31, Y+2	; 0x02
    140c:	83 85       	ldd	r24, Z+11	; 0x0b
    140e:	88 60       	ori	r24, 0x08	; 8
    1410:	e9 81       	ldd	r30, Y+1	; 0x01
    1412:	fa 81       	ldd	r31, Y+2	; 0x02
    1414:	83 87       	std	Z+11, r24	; 0x0b
        proc->flags &= ~PROC_FLG_RUN;
    1416:	e9 81       	ldd	r30, Y+1	; 0x01
    1418:	fa 81       	ldd	r31, Y+2	; 0x02
    141a:	83 85       	ldd	r24, Z+11	; 0x0b
    141c:	8d 7f       	andi	r24, 0xFD	; 253
    141e:	e9 81       	ldd	r30, Y+1	; 0x01
    1420:	fa 81       	ldd	r31, Y+2	; 0x02
    1422:	83 87       	std	Z+11, r24	; 0x0b
        _proc_stop_( proc );
    1424:	89 81       	ldd	r24, Y+1	; 0x01
    1426:	9a 81       	ldd	r25, Y+2	; 0x02
    1428:	0e 94 ad 07 	call	0xf5a	; 0xf5a <gitem_cut>
        gitem_insert( (gitem_t *)proc, (xlist_t *)mutex );
    142c:	89 81       	ldd	r24, Y+1	; 0x01
    142e:	9a 81       	ldd	r25, Y+2	; 0x02
    1430:	2c 81       	ldd	r18, Y+4	; 0x04
    1432:	3d 81       	ldd	r19, Y+5	; 0x05
    1434:	b9 01       	movw	r22, r18
    1436:	0e 94 50 06 	call	0xca0	; 0xca0 <gitem_insert>
        // Нужна перепланировка
#ifdef CONFIG_MP
        resched( proc->core_id );
#else
        resched();
    143a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
#endif // CONFIG_MP
    }
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    return ret;
    143e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1440:	0f 90       	pop	r0
    1442:	0f 90       	pop	r0
    1444:	0f 90       	pop	r0
    1446:	0f 90       	pop	r0
    1448:	0f 90       	pop	r0
    144a:	cf 91       	pop	r28
    144c:	df 91       	pop	r29
    144e:	08 95       	ret

00001450 <_mutex_try_lock>:

bool_t _mutex_try_lock( mutex_t * mutex )
{
    1450:	df 93       	push	r29
    1452:	cf 93       	push	r28
    1454:	00 d0       	rcall	.+0      	; 0x1456 <_mutex_try_lock+0x6>
    1456:	00 d0       	rcall	.+0      	; 0x1458 <_mutex_try_lock+0x8>
    1458:	0f 92       	push	r0
    145a:	cd b7       	in	r28, 0x3d	; 61
    145c:	de b7       	in	r29, 0x3e	; 62
    145e:	9d 83       	std	Y+5, r25	; 0x05
    1460:	8c 83       	std	Y+4, r24	; 0x04
    bool_t ret = mutex->free;
    1462:	ec 81       	ldd	r30, Y+4	; 0x04
    1464:	fd 81       	ldd	r31, Y+5	; 0x05
    1466:	82 89       	ldd	r24, Z+18	; 0x12
    1468:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = current_proc();
    146a:	0e 94 cc 00 	call	0x198	; 0x198 <current_proc>
    146e:	9a 83       	std	Y+2, r25	; 0x02
    1470:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    if( ret )
    1472:	8b 81       	ldd	r24, Y+3	; 0x03
    1474:	88 23       	and	r24, r24
    1476:	79 f0       	breq	.+30     	; 0x1496 <_mutex_try_lock+0x46>
    {
        mutex->free = (bool_t)0;
    1478:	ec 81       	ldd	r30, Y+4	; 0x04
    147a:	fd 81       	ldd	r31, Y+5	; 0x05
    147c:	12 8a       	std	Z+18, r1	; 0x12
#ifdef CONFIG_USE_HIGHEST_LOCKER
        _proc_lres_inc( proc, mutex->prio );
    147e:	ec 81       	ldd	r30, Y+4	; 0x04
    1480:	fd 81       	ldd	r31, Y+5	; 0x05
    1482:	21 89       	ldd	r18, Z+17	; 0x11
    1484:	89 81       	ldd	r24, Y+1	; 0x01
    1486:	9a 81       	ldd	r25, Y+2	; 0x02
    1488:	62 2f       	mov	r22, r18
    148a:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <_proc_lres_inc>
        _proc_prio_control_running( proc );
    148e:	89 81       	ldd	r24, Y+1	; 0x01
    1490:	9a 81       	ldd	r25, Y+2	; 0x02
    1492:	0e 94 77 0d 	call	0x1aee	; 0x1aee <_proc_prio_control_running>
#endif // CONFIG_USE_HIGHEST_LOCKER
    }
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    return ret;
    1496:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1498:	0f 90       	pop	r0
    149a:	0f 90       	pop	r0
    149c:	0f 90       	pop	r0
    149e:	0f 90       	pop	r0
    14a0:	0f 90       	pop	r0
    14a2:	cf 91       	pop	r28
    14a4:	df 91       	pop	r29
    14a6:	08 95       	ret

000014a8 <_mutex_unlock>:

void _mutex_unlock( mutex_t *  mutex )
{
    14a8:	df 93       	push	r29
    14aa:	cf 93       	push	r28
    14ac:	00 d0       	rcall	.+0      	; 0x14ae <_mutex_unlock+0x6>
    14ae:	00 d0       	rcall	.+0      	; 0x14b0 <_mutex_unlock+0x8>
    14b0:	cd b7       	in	r28, 0x3d	; 61
    14b2:	de b7       	in	r29, 0x3e	; 62
    14b4:	9c 83       	std	Y+4, r25	; 0x04
    14b6:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = current_proc();
    14b8:	0e 94 cc 00 	call	0x198	; 0x198 <current_proc>
    14bc:	9a 83       	std	Y+2, r25	; 0x02
    14be:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
#ifdef CONFIG_USE_HIGHEST_LOCKER

    _proc_lres_dec( proc, mutex->prio );
    14c0:	eb 81       	ldd	r30, Y+3	; 0x03
    14c2:	fc 81       	ldd	r31, Y+4	; 0x04
    14c4:	21 89       	ldd	r18, Z+17	; 0x11
    14c6:	89 81       	ldd	r24, Y+1	; 0x01
    14c8:	9a 81       	ldd	r25, Y+2	; 0x02
    14ca:	62 2f       	mov	r22, r18
    14cc:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <_proc_lres_dec>
    // Если проготовлен и готов к остановке - останавливаем
    if(  ( proc->flags & PROC_FLG_PRE_END ) && (!(proc->flags & PROC_FLG_HOLD))  )
    14d0:	e9 81       	ldd	r30, Y+1	; 0x01
    14d2:	fa 81       	ldd	r31, Y+2	; 0x02
    14d4:	83 85       	ldd	r24, Z+11	; 0x0b
    14d6:	88 2f       	mov	r24, r24
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	80 72       	andi	r24, 0x20	; 32
    14dc:	90 70       	andi	r25, 0x00	; 0
    14de:	00 97       	sbiw	r24, 0x00	; 0
    14e0:	a1 f0       	breq	.+40     	; 0x150a <_mutex_unlock+0x62>
    14e2:	e9 81       	ldd	r30, Y+1	; 0x01
    14e4:	fa 81       	ldd	r31, Y+2	; 0x02
    14e6:	83 85       	ldd	r24, Z+11	; 0x0b
    14e8:	88 2f       	mov	r24, r24
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	84 70       	andi	r24, 0x04	; 4
    14ee:	90 70       	andi	r25, 0x00	; 0
    14f0:	00 97       	sbiw	r24, 0x00	; 0
    14f2:	59 f4       	brne	.+22     	; 0x150a <_mutex_unlock+0x62>
    {
        _proc_stop_( proc );
    14f4:	89 81       	ldd	r24, Y+1	; 0x01
    14f6:	9a 81       	ldd	r25, Y+2	; 0x02
    14f8:	0e 94 ad 07 	call	0xf5a	; 0xf5a <gitem_cut>
        _proc_prio_control_stoped( proc );
    14fc:	89 81       	ldd	r24, Y+1	; 0x01
    14fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1500:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <_proc_prio_control_stoped>
        // Нужна перепланировка, процесс остановили и не запустили обратно
#ifdef CONFIG_MP
        resched( proc->core_id );
#else
        resched();
    1504:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
    1508:	04 c0       	rjmp	.+8      	; 0x1512 <_mutex_unlock+0x6a>
#endif // CONFIG_MP
    }
    // Не останавливаем - меняем проиритет на ходу
    else _proc_prio_control_running( proc );
    150a:	89 81       	ldd	r24, Y+1	; 0x01
    150c:	9a 81       	ldd	r25, Y+2	; 0x02
    150e:	0e 94 77 0d 	call	0x1aee	; 0x1aee <_proc_prio_control_running>
#endif // CONFIG_USE_HIGHEST_LOCKER
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    // Обрабока самого мьютекса
    if( ((xlist_t *)mutex)->index == (index_t)0  )
    1512:	eb 81       	ldd	r30, Y+3	; 0x03
    1514:	fc 81       	ldd	r31, Y+4	; 0x04
    1516:	80 89       	ldd	r24, Z+16	; 0x10
    1518:	88 23       	and	r24, r24
    151a:	29 f4       	brne	.+10     	; 0x1526 <_mutex_unlock+0x7e>
    {
        // Список ожидающих пуст, выходим
        mutex->free = (bool_t)1;
    151c:	eb 81       	ldd	r30, Y+3	; 0x03
    151e:	fc 81       	ldd	r31, Y+4	; 0x04
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	82 8b       	std	Z+18, r24	; 0x12
    1524:	19 c0       	rjmp	.+50     	; 0x1558 <_mutex_unlock+0xb0>
        return;
    }
    // Список ожидающих не пуст, запускаем голову
    proc = (proc_t *)xlist_head((xlist_t *)mutex);
    1526:	8b 81       	ldd	r24, Y+3	; 0x03
    1528:	9c 81       	ldd	r25, Y+4	; 0x04
    152a:	0e 94 c8 10 	call	0x2190	; 0x2190 <xlist_head>
    152e:	9a 83       	std	Y+2, r25	; 0x02
    1530:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    // Сначала надо вырезать
    proc->flags &= ~PROC_FLG_QUEUE;
    1532:	e9 81       	ldd	r30, Y+1	; 0x01
    1534:	fa 81       	ldd	r31, Y+2	; 0x02
    1536:	83 85       	ldd	r24, Z+11	; 0x0b
    1538:	87 7f       	andi	r24, 0xF7	; 247
    153a:	e9 81       	ldd	r30, Y+1	; 0x01
    153c:	fa 81       	ldd	r31, Y+2	; 0x02
    153e:	83 87       	std	Z+11, r24	; 0x0b
    gitem_cut( (gitem_t *)proc );
    1540:	89 81       	ldd	r24, Y+1	; 0x01
    1542:	9a 81       	ldd	r25, Y+2	; 0x02
    1544:	0e 94 ad 07 	call	0xf5a	; 0xf5a <gitem_cut>
#ifdef CONFIG_USE_HIGHEST_LOCKER
    // Меняем приоритет
    _proc_prio_control_stoped( proc );
    1548:	89 81       	ldd	r24, Y+1	; 0x01
    154a:	9a 81       	ldd	r25, Y+2	; 0x02
    154c:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <_proc_prio_control_stoped>
#endif // CONFIG_USE_HIGHEST_LOCKER
    _proc_run( proc );
    1550:	89 81       	ldd	r24, Y+1	; 0x01
    1552:	9a 81       	ldd	r25, Y+2	; 0x02
    1554:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <_proc_run>
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
}
    1558:	0f 90       	pop	r0
    155a:	0f 90       	pop	r0
    155c:	0f 90       	pop	r0
    155e:	0f 90       	pop	r0
    1560:	cf 91       	pop	r28
    1562:	df 91       	pop	r29
    1564:	08 95       	ret

00001566 <pcounter_init>:
*                           http://www.0chan.ru/r/res/9996.html                          *
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
void pcounter_init(pcounter_t * pcounter)
{
    1566:	df 93       	push	r29
    1568:	cf 93       	push	r28
    156a:	00 d0       	rcall	.+0      	; 0x156c <pcounter_init+0x6>
    156c:	0f 92       	push	r0
    156e:	cd b7       	in	r28, 0x3d	; 61
    1570:	de b7       	in	r29, 0x3e	; 62
    1572:	9b 83       	std	Y+3, r25	; 0x03
    1574:	8a 83       	std	Y+2, r24	; 0x02
    pcounter->index = (index_t)0;
    1576:	ea 81       	ldd	r30, Y+2	; 0x02
    1578:	fb 81       	ldd	r31, Y+3	; 0x03
    157a:	10 8a       	std	Z+16, r1	; 0x10
    for(prio_t p = 0; p < (index_t)BITS_IN_INDEX_T; p++)pcounter->counter[p] = (count_t)0;
    157c:	19 82       	std	Y+1, r1	; 0x01
    157e:	0f c0       	rjmp	.+30     	; 0x159e <pcounter_init+0x38>
    1580:	89 81       	ldd	r24, Y+1	; 0x01
    1582:	88 2f       	mov	r24, r24
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	2a 81       	ldd	r18, Y+2	; 0x02
    1588:	3b 81       	ldd	r19, Y+3	; 0x03
    158a:	88 0f       	add	r24, r24
    158c:	99 1f       	adc	r25, r25
    158e:	f9 01       	movw	r30, r18
    1590:	e8 0f       	add	r30, r24
    1592:	f9 1f       	adc	r31, r25
    1594:	11 82       	std	Z+1, r1	; 0x01
    1596:	10 82       	st	Z, r1
    1598:	89 81       	ldd	r24, Y+1	; 0x01
    159a:	8f 5f       	subi	r24, 0xFF	; 255
    159c:	89 83       	std	Y+1, r24	; 0x01
    159e:	89 81       	ldd	r24, Y+1	; 0x01
    15a0:	88 30       	cpi	r24, 0x08	; 8
    15a2:	70 f3       	brcs	.-36     	; 0x1580 <pcounter_init+0x1a>
}
    15a4:	0f 90       	pop	r0
    15a6:	0f 90       	pop	r0
    15a8:	0f 90       	pop	r0
    15aa:	cf 91       	pop	r28
    15ac:	df 91       	pop	r29
    15ae:	08 95       	ret

000015b0 <pcounter_inc>:

void pcounter_inc(pcounter_t * pcounter, prio_t prio)
{
    15b0:	df 93       	push	r29
    15b2:	cf 93       	push	r28
    15b4:	00 d0       	rcall	.+0      	; 0x15b6 <pcounter_inc+0x6>
    15b6:	0f 92       	push	r0
    15b8:	cd b7       	in	r28, 0x3d	; 61
    15ba:	de b7       	in	r29, 0x3e	; 62
    15bc:	9a 83       	std	Y+2, r25	; 0x02
    15be:	89 83       	std	Y+1, r24	; 0x01
    15c0:	6b 83       	std	Y+3, r22	; 0x03
    pcounter->counter[prio]++;
    15c2:	8b 81       	ldd	r24, Y+3	; 0x03
    15c4:	68 2f       	mov	r22, r24
    15c6:	70 e0       	ldi	r23, 0x00	; 0
    15c8:	29 81       	ldd	r18, Y+1	; 0x01
    15ca:	3a 81       	ldd	r19, Y+2	; 0x02
    15cc:	cb 01       	movw	r24, r22
    15ce:	88 0f       	add	r24, r24
    15d0:	99 1f       	adc	r25, r25
    15d2:	f9 01       	movw	r30, r18
    15d4:	e8 0f       	add	r30, r24
    15d6:	f9 1f       	adc	r31, r25
    15d8:	80 81       	ld	r24, Z
    15da:	91 81       	ldd	r25, Z+1	; 0x01
    15dc:	ac 01       	movw	r20, r24
    15de:	4f 5f       	subi	r20, 0xFF	; 255
    15e0:	5f 4f       	sbci	r21, 0xFF	; 255
    15e2:	29 81       	ldd	r18, Y+1	; 0x01
    15e4:	3a 81       	ldd	r19, Y+2	; 0x02
    15e6:	cb 01       	movw	r24, r22
    15e8:	88 0f       	add	r24, r24
    15ea:	99 1f       	adc	r25, r25
    15ec:	f9 01       	movw	r30, r18
    15ee:	e8 0f       	add	r30, r24
    15f0:	f9 1f       	adc	r31, r25
    15f2:	51 83       	std	Z+1, r21	; 0x01
    15f4:	40 83       	st	Z, r20
    pcounter->index |= ((index_t)1)<<prio;
    15f6:	e9 81       	ldd	r30, Y+1	; 0x01
    15f8:	fa 81       	ldd	r31, Y+2	; 0x02
    15fa:	80 89       	ldd	r24, Z+16	; 0x10
    15fc:	48 2f       	mov	r20, r24
    15fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1600:	28 2f       	mov	r18, r24
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	02 2e       	mov	r0, r18
    160a:	02 c0       	rjmp	.+4      	; 0x1610 <pcounter_inc+0x60>
    160c:	88 0f       	add	r24, r24
    160e:	99 1f       	adc	r25, r25
    1610:	0a 94       	dec	r0
    1612:	e2 f7       	brpl	.-8      	; 0x160c <pcounter_inc+0x5c>
    1614:	84 2b       	or	r24, r20
    1616:	e9 81       	ldd	r30, Y+1	; 0x01
    1618:	fa 81       	ldd	r31, Y+2	; 0x02
    161a:	80 8b       	std	Z+16, r24	; 0x10
}
    161c:	0f 90       	pop	r0
    161e:	0f 90       	pop	r0
    1620:	0f 90       	pop	r0
    1622:	cf 91       	pop	r28
    1624:	df 91       	pop	r29
    1626:	08 95       	ret

00001628 <pcounter_dec>:

index_t pcounter_dec(pcounter_t * pcounter, prio_t prio)
{
    1628:	df 93       	push	r29
    162a:	cf 93       	push	r28
    162c:	00 d0       	rcall	.+0      	; 0x162e <pcounter_dec+0x6>
    162e:	00 d0       	rcall	.+0      	; 0x1630 <pcounter_dec+0x8>
    1630:	cd b7       	in	r28, 0x3d	; 61
    1632:	de b7       	in	r29, 0x3e	; 62
    1634:	9b 83       	std	Y+3, r25	; 0x03
    1636:	8a 83       	std	Y+2, r24	; 0x02
    1638:	6c 83       	std	Y+4, r22	; 0x04
    index_t mask = ((index_t)1)<<prio;
    163a:	8c 81       	ldd	r24, Y+4	; 0x04
    163c:	28 2f       	mov	r18, r24
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	02 c0       	rjmp	.+4      	; 0x164a <pcounter_dec+0x22>
    1646:	88 0f       	add	r24, r24
    1648:	99 1f       	adc	r25, r25
    164a:	2a 95       	dec	r18
    164c:	e2 f7       	brpl	.-8      	; 0x1646 <pcounter_dec+0x1e>
    164e:	89 83       	std	Y+1, r24	; 0x01
    pcounter->counter[prio]--;
    1650:	8c 81       	ldd	r24, Y+4	; 0x04
    1652:	68 2f       	mov	r22, r24
    1654:	70 e0       	ldi	r23, 0x00	; 0
    1656:	2a 81       	ldd	r18, Y+2	; 0x02
    1658:	3b 81       	ldd	r19, Y+3	; 0x03
    165a:	cb 01       	movw	r24, r22
    165c:	88 0f       	add	r24, r24
    165e:	99 1f       	adc	r25, r25
    1660:	f9 01       	movw	r30, r18
    1662:	e8 0f       	add	r30, r24
    1664:	f9 1f       	adc	r31, r25
    1666:	80 81       	ld	r24, Z
    1668:	91 81       	ldd	r25, Z+1	; 0x01
    166a:	ac 01       	movw	r20, r24
    166c:	41 50       	subi	r20, 0x01	; 1
    166e:	50 40       	sbci	r21, 0x00	; 0
    1670:	2a 81       	ldd	r18, Y+2	; 0x02
    1672:	3b 81       	ldd	r19, Y+3	; 0x03
    1674:	cb 01       	movw	r24, r22
    1676:	88 0f       	add	r24, r24
    1678:	99 1f       	adc	r25, r25
    167a:	f9 01       	movw	r30, r18
    167c:	e8 0f       	add	r30, r24
    167e:	f9 1f       	adc	r31, r25
    1680:	51 83       	std	Z+1, r21	; 0x01
    1682:	40 83       	st	Z, r20
    if(pcounter->counter[prio] == (count_t)0)pcounter->index &= ~mask;
    1684:	8c 81       	ldd	r24, Y+4	; 0x04
    1686:	88 2f       	mov	r24, r24
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	2a 81       	ldd	r18, Y+2	; 0x02
    168c:	3b 81       	ldd	r19, Y+3	; 0x03
    168e:	88 0f       	add	r24, r24
    1690:	99 1f       	adc	r25, r25
    1692:	f9 01       	movw	r30, r18
    1694:	e8 0f       	add	r30, r24
    1696:	f9 1f       	adc	r31, r25
    1698:	80 81       	ld	r24, Z
    169a:	91 81       	ldd	r25, Z+1	; 0x01
    169c:	00 97       	sbiw	r24, 0x00	; 0
    169e:	51 f4       	brne	.+20     	; 0x16b4 <pcounter_dec+0x8c>
    16a0:	ea 81       	ldd	r30, Y+2	; 0x02
    16a2:	fb 81       	ldd	r31, Y+3	; 0x03
    16a4:	80 89       	ldd	r24, Z+16	; 0x10
    16a6:	98 2f       	mov	r25, r24
    16a8:	89 81       	ldd	r24, Y+1	; 0x01
    16aa:	80 95       	com	r24
    16ac:	89 23       	and	r24, r25
    16ae:	ea 81       	ldd	r30, Y+2	; 0x02
    16b0:	fb 81       	ldd	r31, Y+3	; 0x03
    16b2:	80 8b       	std	Z+16, r24	; 0x10
    return pcounter->index & mask;
    16b4:	ea 81       	ldd	r30, Y+2	; 0x02
    16b6:	fb 81       	ldd	r31, Y+3	; 0x03
    16b8:	90 89       	ldd	r25, Z+16	; 0x10
    16ba:	89 81       	ldd	r24, Y+1	; 0x01
    16bc:	89 23       	and	r24, r25
}
    16be:	0f 90       	pop	r0
    16c0:	0f 90       	pop	r0
    16c2:	0f 90       	pop	r0
    16c4:	0f 90       	pop	r0
    16c6:	cf 91       	pop	r28
    16c8:	df 91       	pop	r29
    16ca:	08 95       	ret

000016cc <proc_init_isr>:
    bool_t is_rt // если true, значит процесс будет иметть поведение RT
#ifdef CONFIG_MP
    ,affinity_t affinity
#endif // CONFIG_MP
)
{
    16cc:	8f 92       	push	r8
    16ce:	af 92       	push	r10
    16d0:	bf 92       	push	r11
    16d2:	cf 92       	push	r12
    16d4:	ef 92       	push	r14
    16d6:	ff 92       	push	r15
    16d8:	0f 93       	push	r16
    16da:	1f 93       	push	r17
    16dc:	df 93       	push	r29
    16de:	cf 93       	push	r28
    16e0:	cd b7       	in	r28, 0x3d	; 61
    16e2:	de b7       	in	r29, 0x3e	; 62
    16e4:	61 97       	sbiw	r28, 0x11	; 17
    16e6:	0f b6       	in	r0, 0x3f	; 63
    16e8:	f8 94       	cli
    16ea:	de bf       	out	0x3e, r29	; 62
    16ec:	0f be       	out	0x3f, r0	; 63
    16ee:	cd bf       	out	0x3d, r28	; 61
    16f0:	9a 83       	std	Y+2, r25	; 0x02
    16f2:	89 83       	std	Y+1, r24	; 0x01
    16f4:	7c 83       	std	Y+4, r23	; 0x04
    16f6:	6b 83       	std	Y+3, r22	; 0x03
    16f8:	5e 83       	std	Y+6, r21	; 0x06
    16fa:	4d 83       	std	Y+5, r20	; 0x05
    16fc:	38 87       	std	Y+8, r19	; 0x08
    16fe:	2f 83       	std	Y+7, r18	; 0x07
    1700:	1a 87       	std	Y+10, r17	; 0x0a
    1702:	09 87       	std	Y+9, r16	; 0x09
    1704:	fc 86       	std	Y+12, r15	; 0x0c
    1706:	eb 86       	std	Y+11, r14	; 0x0b
    1708:	cd 86       	std	Y+13, r12	; 0x0d
    170a:	bf 86       	std	Y+15, r11	; 0x0f
    170c:	ae 86       	std	Y+14, r10	; 0x0e
    170e:	88 8a       	std	Y+16, r8	; 0x10
    gitem_init( (gitem_t *)proc, prio );
    1710:	89 81       	ldd	r24, Y+1	; 0x01
    1712:	9a 81       	ldd	r25, Y+2	; 0x02
    1714:	6d 85       	ldd	r22, Y+13	; 0x0d
    1716:	0e 94 2a 06 	call	0xc54	; 0xc54 <gitem_init>
    proc->flags = ( is_rt )?PROC_FLG_RT:(flag_t)0;
    171a:	88 89       	ldd	r24, Y+16	; 0x10
    171c:	89 8b       	std	Y+17, r24	; 0x11
    171e:	89 89       	ldd	r24, Y+17	; 0x11
    1720:	88 23       	and	r24, r24
    1722:	11 f0       	breq	.+4      	; 0x1728 <proc_init_isr+0x5c>
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	89 8b       	std	Y+17, r24	; 0x11
    1728:	89 89       	ldd	r24, Y+17	; 0x11
    172a:	e9 81       	ldd	r30, Y+1	; 0x01
    172c:	fa 81       	ldd	r31, Y+2	; 0x02
    172e:	83 87       	std	Z+11, r24	; 0x0b
#ifdef CONFIG_USE_HIGHEST_LOCKER
    pcounter_init(&proc->lres);
    1730:	89 81       	ldd	r24, Y+1	; 0x01
    1732:	9a 81       	ldd	r25, Y+2	; 0x02
    1734:	0d 96       	adiw	r24, 0x0d	; 13
    1736:	0e 94 b3 0a 	call	0x1566	; 0x1566 <pcounter_init>
    proc->base_prio = prio;
    173a:	e9 81       	ldd	r30, Y+1	; 0x01
    173c:	fa 81       	ldd	r31, Y+2	; 0x02
    173e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1740:	84 87       	std	Z+12, r24	; 0x0c
#else
    proc->lres = (count_t)0;
#endif
    proc->time_quant = time_quant;
    1742:	e9 81       	ldd	r30, Y+1	; 0x01
    1744:	fa 81       	ldd	r31, Y+2	; 0x02
    1746:	8e 85       	ldd	r24, Y+14	; 0x0e
    1748:	9f 85       	ldd	r25, Y+15	; 0x0f
    174a:	97 8f       	std	Z+31, r25	; 0x1f
    174c:	86 8f       	std	Z+30, r24	; 0x1e
    proc->timer = time_quant;
    174e:	e9 81       	ldd	r30, Y+1	; 0x01
    1750:	fa 81       	ldd	r31, Y+2	; 0x02
    1752:	8e 85       	ldd	r24, Y+14	; 0x0e
    1754:	9f 85       	ldd	r25, Y+15	; 0x0f
    1756:	91 a3       	std	Z+33, r25	; 0x21
    1758:	80 a3       	std	Z+32, r24	; 0x20
#ifdef CONFIG_MP
    proc->core_id = (core_id_t)0;
    proc->affinity = affinity;
#endif // CONFIG_MP
    proc->pmain = pmain;
    175a:	e9 81       	ldd	r30, Y+1	; 0x01
    175c:	fa 81       	ldd	r31, Y+2	; 0x02
    175e:	8b 81       	ldd	r24, Y+3	; 0x03
    1760:	9c 81       	ldd	r25, Y+4	; 0x04
    1762:	93 a3       	std	Z+35, r25	; 0x23
    1764:	82 a3       	std	Z+34, r24	; 0x22
    proc->sv_hook = sv_hook;
    1766:	e9 81       	ldd	r30, Y+1	; 0x01
    1768:	fa 81       	ldd	r31, Y+2	; 0x02
    176a:	8d 81       	ldd	r24, Y+5	; 0x05
    176c:	9e 81       	ldd	r25, Y+6	; 0x06
    176e:	95 a3       	std	Z+37, r25	; 0x25
    1770:	84 a3       	std	Z+36, r24	; 0x24
    proc->rs_hook = rs_hook;
    1772:	e9 81       	ldd	r30, Y+1	; 0x01
    1774:	fa 81       	ldd	r31, Y+2	; 0x02
    1776:	8f 81       	ldd	r24, Y+7	; 0x07
    1778:	98 85       	ldd	r25, Y+8	; 0x08
    177a:	97 a3       	std	Z+39, r25	; 0x27
    177c:	86 a3       	std	Z+38, r24	; 0x26
    proc->arg = arg;
    177e:	e9 81       	ldd	r30, Y+1	; 0x01
    1780:	fa 81       	ldd	r31, Y+2	; 0x02
    1782:	89 85       	ldd	r24, Y+9	; 0x09
    1784:	9a 85       	ldd	r25, Y+10	; 0x0a
    1786:	91 a7       	std	Z+41, r25	; 0x29
    1788:	80 a7       	std	Z+40, r24	; 0x28
    proc->sstart = sstart;
    178a:	e9 81       	ldd	r30, Y+1	; 0x01
    178c:	fa 81       	ldd	r31, Y+2	; 0x02
    178e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1790:	9c 85       	ldd	r25, Y+12	; 0x0c
    1792:	93 a7       	std	Z+43, r25	; 0x2b
    1794:	82 a7       	std	Z+42, r24	; 0x2a
    if( sstart )proc->spointer = proc_stack_init(sstart, (code_t)proc_run_wrapper, (void *)proc);
    1796:	8b 85       	ldd	r24, Y+11	; 0x0b
    1798:	9c 85       	ldd	r25, Y+12	; 0x0c
    179a:	00 97       	sbiw	r24, 0x00	; 0
    179c:	71 f0       	breq	.+28     	; 0x17ba <proc_init_isr+0xee>
    179e:	4b e2       	ldi	r20, 0x2B	; 43
    17a0:	53 e0       	ldi	r21, 0x03	; 3
    17a2:	8b 85       	ldd	r24, Y+11	; 0x0b
    17a4:	9c 85       	ldd	r25, Y+12	; 0x0c
    17a6:	29 81       	ldd	r18, Y+1	; 0x01
    17a8:	3a 81       	ldd	r19, Y+2	; 0x02
    17aa:	ba 01       	movw	r22, r20
    17ac:	a9 01       	movw	r20, r18
    17ae:	0e 94 d7 00 	call	0x1ae	; 0x1ae <proc_stack_init>
    17b2:	e9 81       	ldd	r30, Y+1	; 0x01
    17b4:	fa 81       	ldd	r31, Y+2	; 0x02
    17b6:	95 a7       	std	Z+45, r25	; 0x2d
    17b8:	84 a7       	std	Z+44, r24	; 0x2c
}
    17ba:	61 96       	adiw	r28, 0x11	; 17
    17bc:	0f b6       	in	r0, 0x3f	; 63
    17be:	f8 94       	cli
    17c0:	de bf       	out	0x3e, r29	; 62
    17c2:	0f be       	out	0x3f, r0	; 63
    17c4:	cd bf       	out	0x3d, r28	; 61
    17c6:	cf 91       	pop	r28
    17c8:	df 91       	pop	r29
    17ca:	1f 91       	pop	r17
    17cc:	0f 91       	pop	r16
    17ce:	ff 90       	pop	r15
    17d0:	ef 90       	pop	r14
    17d2:	cf 90       	pop	r12
    17d4:	bf 90       	pop	r11
    17d6:	af 90       	pop	r10
    17d8:	8f 90       	pop	r8
    17da:	08 95       	ret

000017dc <_proc_run>:
    spin_unlock( &proc_sched->lock );
}
#endif // CONFIG_MP

void _proc_run( proc_t * proc )
{
    17dc:	df 93       	push	r29
    17de:	cf 93       	push	r28
    17e0:	00 d0       	rcall	.+0      	; 0x17e2 <_proc_run+0x6>
    17e2:	cd b7       	in	r28, 0x3d	; 61
    17e4:	de b7       	in	r29, 0x3e	; 62
    17e6:	9a 83       	std	Y+2, r25	; 0x02
    17e8:	89 83       	std	Y+1, r24	; 0x01
    proc->flags |= PROC_FLG_RUN;
    17ea:	e9 81       	ldd	r30, Y+1	; 0x01
    17ec:	fa 81       	ldd	r31, Y+2	; 0x02
    17ee:	83 85       	ldd	r24, Z+11	; 0x0b
    17f0:	82 60       	ori	r24, 0x02	; 2
    17f2:	e9 81       	ldd	r30, Y+1	; 0x01
    17f4:	fa 81       	ldd	r31, Y+2	; 0x02
    17f6:	83 87       	std	Z+11, r24	; 0x0b
    spin_lock( &kernel.stat_lock );
    proc->core_id = sched_load_balancer( proc, (stat_t *)kernel.stat );
    stat_inc( proc, (stat_t *)kernel.stat+proc->core_id );
    spin_unlock( &kernel.stat_lock );
#endif
    _proc_run_( proc );
    17f8:	89 81       	ldd	r24, Y+1	; 0x01
    17fa:	9a 81       	ldd	r25, Y+2	; 0x02
    17fc:	20 91 a0 01 	lds	r18, 0x01A0
    1800:	30 91 a1 01 	lds	r19, 0x01A1
    1804:	b9 01       	movw	r22, r18
    1806:	0e 94 50 06 	call	0xca0	; 0xca0 <gitem_insert>
#ifdef CONFIG_MP
    resched( proc->core_id );
#else
    resched();
    180a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
#endif // CONFIG_MP
}
    180e:	0f 90       	pop	r0
    1810:	0f 90       	pop	r0
    1812:	cf 91       	pop	r28
    1814:	df 91       	pop	r29
    1816:	08 95       	ret

00001818 <proc_run_isr>:
// Функция общего пользования - запуск процесса из обработчика прерывания, прерывания должны быть запрещены во время запуска
bool_t proc_run_isr(proc_t * proc)
{
    1818:	df 93       	push	r29
    181a:	cf 93       	push	r28
    181c:	00 d0       	rcall	.+0      	; 0x181e <proc_run_isr+0x6>
    181e:	0f 92       	push	r0
    1820:	cd b7       	in	r28, 0x3d	; 61
    1822:	de b7       	in	r29, 0x3e	; 62
    1824:	9b 83       	std	Y+3, r25	; 0x03
    1826:	8a 83       	std	Y+2, r24	; 0x02
    bool_t ret = (bool_t)1;
    1828:	81 e0       	ldi	r24, 0x01	; 1
    182a:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    if( proc->flags & (PROC_FLG_RUN|PROC_FLG_QUEUE|PROC_FLG_WAIT|PROC_FLG_END|PROC_FLG_DEAD) )
    182c:	ea 81       	ldd	r30, Y+2	; 0x02
    182e:	fb 81       	ldd	r31, Y+3	; 0x03
    1830:	83 85       	ldd	r24, Z+11	; 0x0b
    1832:	88 2f       	mov	r24, r24
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	8a 7d       	andi	r24, 0xDA	; 218
    1838:	90 70       	andi	r25, 0x00	; 0
    183a:	00 97       	sbiw	r24, 0x00	; 0
    183c:	11 f0       	breq	.+4      	; 0x1842 <proc_run_isr+0x2a>
    {
        ret = (bool_t)0;
    183e:	19 82       	std	Y+1, r1	; 0x01
    1840:	04 c0       	rjmp	.+8      	; 0x184a <proc_run_isr+0x32>
        goto end;
    }
    _proc_run( proc );
    1842:	8a 81       	ldd	r24, Y+2	; 0x02
    1844:	9b 81       	ldd	r25, Y+3	; 0x03
    1846:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <_proc_run>
end:
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    return ret;
    184a:	89 81       	ldd	r24, Y+1	; 0x01
}
    184c:	0f 90       	pop	r0
    184e:	0f 90       	pop	r0
    1850:	0f 90       	pop	r0
    1852:	cf 91       	pop	r28
    1854:	df 91       	pop	r29
    1856:	08 95       	ret

00001858 <proc_restart_isr>:
// Перезепуск процесса из обработчика прерываний, прерывания должны быть запрещены
bool_t proc_restart_isr(proc_t * proc)
{
    1858:	df 93       	push	r29
    185a:	cf 93       	push	r28
    185c:	00 d0       	rcall	.+0      	; 0x185e <proc_restart_isr+0x6>
    185e:	0f 92       	push	r0
    1860:	cd b7       	in	r28, 0x3d	; 61
    1862:	de b7       	in	r29, 0x3e	; 62
    1864:	9b 83       	std	Y+3, r25	; 0x03
    1866:	8a 83       	std	Y+2, r24	; 0x02
    bool_t ret = (bool_t)1;
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif
    if( proc->flags & (PROC_FLG_RUN|PROC_FLG_HOLD|PROC_FLG_QUEUE|PROC_FLG_WAIT|PROC_FLG_PRE_END|PROC_FLG_DEAD) )
    186c:	ea 81       	ldd	r30, Y+2	; 0x02
    186e:	fb 81       	ldd	r31, Y+3	; 0x03
    1870:	83 85       	ldd	r24, Z+11	; 0x0b
    1872:	88 2f       	mov	r24, r24
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	8e 7b       	andi	r24, 0xBE	; 190
    1878:	90 70       	andi	r25, 0x00	; 0
    187a:	00 97       	sbiw	r24, 0x00	; 0
    187c:	11 f0       	breq	.+4      	; 0x1882 <proc_restart_isr+0x2a>
    {
        ret = (bool_t)0;
    187e:	19 82       	std	Y+1, r1	; 0x01
    1880:	2d c0       	rjmp	.+90     	; 0x18dc <proc_restart_isr+0x84>
        goto end;
    }
    proc->flags = ( proc->flags & PROC_FLG_RT )?PROC_FLG_RT:(flag_t)0;
    1882:	ea 81       	ldd	r30, Y+2	; 0x02
    1884:	fb 81       	ldd	r31, Y+3	; 0x03
    1886:	83 85       	ldd	r24, Z+11	; 0x0b
    1888:	81 70       	andi	r24, 0x01	; 1
    188a:	ea 81       	ldd	r30, Y+2	; 0x02
    188c:	fb 81       	ldd	r31, Y+3	; 0x03
    188e:	83 87       	std	Z+11, r24	; 0x0b
#ifdef CONFIG_USE_HIGHEST_LOCKER
    pcounter_init(&proc->lres);
    1890:	8a 81       	ldd	r24, Y+2	; 0x02
    1892:	9b 81       	ldd	r25, Y+3	; 0x03
    1894:	0d 96       	adiw	r24, 0x0d	; 13
    1896:	0e 94 b3 0a 	call	0x1566	; 0x1566 <pcounter_init>
#else
    proc->lres = (count_t)0;
#endif
    proc->timer = proc->time_quant;
    189a:	ea 81       	ldd	r30, Y+2	; 0x02
    189c:	fb 81       	ldd	r31, Y+3	; 0x03
    189e:	86 8d       	ldd	r24, Z+30	; 0x1e
    18a0:	97 8d       	ldd	r25, Z+31	; 0x1f
    18a2:	ea 81       	ldd	r30, Y+2	; 0x02
    18a4:	fb 81       	ldd	r31, Y+3	; 0x03
    18a6:	91 a3       	std	Z+33, r25	; 0x21
    18a8:	80 a3       	std	Z+32, r24	; 0x20

    if( proc->sstart )proc->spointer = proc_stack_init( proc->sstart, (code_t)proc_run_wrapper, (void *)proc );
    18aa:	ea 81       	ldd	r30, Y+2	; 0x02
    18ac:	fb 81       	ldd	r31, Y+3	; 0x03
    18ae:	82 a5       	ldd	r24, Z+42	; 0x2a
    18b0:	93 a5       	ldd	r25, Z+43	; 0x2b
    18b2:	00 97       	sbiw	r24, 0x00	; 0
    18b4:	79 f0       	breq	.+30     	; 0x18d4 <proc_restart_isr+0x7c>
    18b6:	ea 81       	ldd	r30, Y+2	; 0x02
    18b8:	fb 81       	ldd	r31, Y+3	; 0x03
    18ba:	82 a5       	ldd	r24, Z+42	; 0x2a
    18bc:	93 a5       	ldd	r25, Z+43	; 0x2b
    18be:	2b e2       	ldi	r18, 0x2B	; 43
    18c0:	33 e0       	ldi	r19, 0x03	; 3
    18c2:	4a 81       	ldd	r20, Y+2	; 0x02
    18c4:	5b 81       	ldd	r21, Y+3	; 0x03
    18c6:	b9 01       	movw	r22, r18
    18c8:	0e 94 d7 00 	call	0x1ae	; 0x1ae <proc_stack_init>
    18cc:	ea 81       	ldd	r30, Y+2	; 0x02
    18ce:	fb 81       	ldd	r31, Y+3	; 0x03
    18d0:	95 a7       	std	Z+45, r25	; 0x2d
    18d2:	84 a7       	std	Z+44, r24	; 0x2c
    _proc_run( proc );
    18d4:	8a 81       	ldd	r24, Y+2	; 0x02
    18d6:	9b 81       	ldd	r25, Y+3	; 0x03
    18d8:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <_proc_run>
end:
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif
    return ret;
    18dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    18de:	0f 90       	pop	r0
    18e0:	0f 90       	pop	r0
    18e2:	0f 90       	pop	r0
    18e4:	cf 91       	pop	r28
    18e6:	df 91       	pop	r29
    18e8:	08 95       	ret

000018ea <_proc_stop>:
        spin_unlock( xlist_lock );
    }
}
#endif // CONFIG_MP
void _proc_stop(proc_t * proc)
{
    18ea:	df 93       	push	r29
    18ec:	cf 93       	push	r28
    18ee:	00 d0       	rcall	.+0      	; 0x18f0 <_proc_stop+0x6>
    18f0:	cd b7       	in	r28, 0x3d	; 61
    18f2:	de b7       	in	r29, 0x3e	; 62
    18f4:	9a 83       	std	Y+2, r25	; 0x02
    18f6:	89 83       	std	Y+1, r24	; 0x01
    proc->flags &= ~PROC_FLG_RUN;
    18f8:	e9 81       	ldd	r30, Y+1	; 0x01
    18fa:	fa 81       	ldd	r31, Y+2	; 0x02
    18fc:	83 85       	ldd	r24, Z+11	; 0x0b
    18fe:	8d 7f       	andi	r24, 0xFD	; 253
    1900:	e9 81       	ldd	r30, Y+1	; 0x01
    1902:	fa 81       	ldd	r31, Y+2	; 0x02
    1904:	83 87       	std	Z+11, r24	; 0x0b
    _proc_stop_( proc );
    1906:	89 81       	ldd	r24, Y+1	; 0x01
    1908:	9a 81       	ldd	r25, Y+2	; 0x02
    190a:	0e 94 ad 07 	call	0xf5a	; 0xf5a <gitem_cut>
#ifdef CONFIG_MP
    resched( proc->core_id );
#else
    resched();
    190e:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
#endif // CONFIG_MP
}
    1912:	0f 90       	pop	r0
    1914:	0f 90       	pop	r0
    1916:	cf 91       	pop	r28
    1918:	df 91       	pop	r29
    191a:	08 95       	ret

0000191c <proc_stop_isr>:
// Останов процесса из обработчика прерываний, прерывания должны быть запрещены
bool_t proc_stop_isr(proc_t * proc)
{
    191c:	df 93       	push	r29
    191e:	cf 93       	push	r28
    1920:	00 d0       	rcall	.+0      	; 0x1922 <proc_stop_isr+0x6>
    1922:	0f 92       	push	r0
    1924:	cd b7       	in	r28, 0x3d	; 61
    1926:	de b7       	in	r29, 0x3e	; 62
    1928:	9b 83       	std	Y+3, r25	; 0x03
    192a:	8a 83       	std	Y+2, r24	; 0x02
    bool_t ret = (bool_t)0;
    192c:	19 82       	std	Y+1, r1	; 0x01
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    //Проверка флагов
    //В случчае PROC_FLG_WAIT будем обрабатывать PROC_FLG_PRE_END на выходе из sig_wait.
    //В случае PROC_FLG_HOLD или PROC_FLG_QUEUE будем обрабатывать PROC_FLG_PRE_END на выходе из функции, освобождающей общий ресурс.
    if( proc->flags & (PROC_FLG_HOLD|PROC_FLG_QUEUE|PROC_FLG_WAIT) )proc->flags |= PROC_FLG_PRE_END;
    192e:	ea 81       	ldd	r30, Y+2	; 0x02
    1930:	fb 81       	ldd	r31, Y+3	; 0x03
    1932:	83 85       	ldd	r24, Z+11	; 0x0b
    1934:	88 2f       	mov	r24, r24
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	8c 71       	andi	r24, 0x1C	; 28
    193a:	90 70       	andi	r25, 0x00	; 0
    193c:	00 97       	sbiw	r24, 0x00	; 0
    193e:	41 f0       	breq	.+16     	; 0x1950 <proc_stop_isr+0x34>
    1940:	ea 81       	ldd	r30, Y+2	; 0x02
    1942:	fb 81       	ldd	r31, Y+3	; 0x03
    1944:	83 85       	ldd	r24, Z+11	; 0x0b
    1946:	80 62       	ori	r24, 0x20	; 32
    1948:	ea 81       	ldd	r30, Y+2	; 0x02
    194a:	fb 81       	ldd	r31, Y+3	; 0x03
    194c:	83 87       	std	Z+11, r24	; 0x0b
    194e:	0f c0       	rjmp	.+30     	; 0x196e <proc_stop_isr+0x52>
    else if( proc->flags & PROC_FLG_RUN )
    1950:	ea 81       	ldd	r30, Y+2	; 0x02
    1952:	fb 81       	ldd	r31, Y+3	; 0x03
    1954:	83 85       	ldd	r24, Z+11	; 0x0b
    1956:	88 2f       	mov	r24, r24
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	82 70       	andi	r24, 0x02	; 2
    195c:	90 70       	andi	r25, 0x00	; 0
    195e:	00 97       	sbiw	r24, 0x00	; 0
    1960:	31 f0       	breq	.+12     	; 0x196e <proc_stop_isr+0x52>
    {
        _proc_stop( proc );
    1962:	8a 81       	ldd	r24, Y+2	; 0x02
    1964:	9b 81       	ldd	r25, Y+3	; 0x03
    1966:	0e 94 75 0c 	call	0x18ea	; 0x18ea <_proc_stop>
        ret = (bool_t)1;
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	89 83       	std	Y+1, r24	; 0x01
    }
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    return ret;
    196e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1970:	0f 90       	pop	r0
    1972:	0f 90       	pop	r0
    1974:	0f 90       	pop	r0
    1976:	cf 91       	pop	r28
    1978:	df 91       	pop	r29
    197a:	08 95       	ret

0000197c <_proc_flag_stop_isr>:
    exit_crit_sec();
#endif
}

void _proc_flag_stop_isr( flag_t mask )
{
    197c:	df 93       	push	r29
    197e:	cf 93       	push	r28
    1980:	00 d0       	rcall	.+0      	; 0x1982 <_proc_flag_stop_isr+0x6>
    1982:	0f 92       	push	r0
    1984:	cd b7       	in	r28, 0x3d	; 61
    1986:	de b7       	in	r29, 0x3e	; 62
    1988:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = current_proc();
    198a:	0e 94 cc 00 	call	0x198	; 0x198 <current_proc>
    198e:	9a 83       	std	Y+2, r25	; 0x02
    1990:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif //CONFIG_MP
    proc->flags &= mask;
    1992:	e9 81       	ldd	r30, Y+1	; 0x01
    1994:	fa 81       	ldd	r31, Y+2	; 0x02
    1996:	93 85       	ldd	r25, Z+11	; 0x0b
    1998:	8b 81       	ldd	r24, Y+3	; 0x03
    199a:	89 23       	and	r24, r25
    199c:	e9 81       	ldd	r30, Y+1	; 0x01
    199e:	fa 81       	ldd	r31, Y+2	; 0x02
    19a0:	83 87       	std	Z+11, r24	; 0x0b
    if(  ( proc->flags & PROC_FLG_PRE_END ) && (!(proc->flags & PROC_FLG_HOLD))  )
    19a2:	e9 81       	ldd	r30, Y+1	; 0x01
    19a4:	fa 81       	ldd	r31, Y+2	; 0x02
    19a6:	83 85       	ldd	r24, Z+11	; 0x0b
    19a8:	88 2f       	mov	r24, r24
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	80 72       	andi	r24, 0x20	; 32
    19ae:	90 70       	andi	r25, 0x00	; 0
    19b0:	00 97       	sbiw	r24, 0x00	; 0
    19b2:	a1 f0       	breq	.+40     	; 0x19dc <_proc_flag_stop_isr+0x60>
    19b4:	e9 81       	ldd	r30, Y+1	; 0x01
    19b6:	fa 81       	ldd	r31, Y+2	; 0x02
    19b8:	83 85       	ldd	r24, Z+11	; 0x0b
    19ba:	88 2f       	mov	r24, r24
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	84 70       	andi	r24, 0x04	; 4
    19c0:	90 70       	andi	r25, 0x00	; 0
    19c2:	00 97       	sbiw	r24, 0x00	; 0
    19c4:	59 f4       	brne	.+22     	; 0x19dc <_proc_flag_stop_isr+0x60>
    {
        proc->flags &= ~PROC_FLG_PRE_END;
    19c6:	e9 81       	ldd	r30, Y+1	; 0x01
    19c8:	fa 81       	ldd	r31, Y+2	; 0x02
    19ca:	83 85       	ldd	r24, Z+11	; 0x0b
    19cc:	8f 7d       	andi	r24, 0xDF	; 223
    19ce:	e9 81       	ldd	r30, Y+1	; 0x01
    19d0:	fa 81       	ldd	r31, Y+2	; 0x02
    19d2:	83 87       	std	Z+11, r24	; 0x0b
        _proc_stop( proc );
    19d4:	89 81       	ldd	r24, Y+1	; 0x01
    19d6:	9a 81       	ldd	r25, Y+2	; 0x02
    19d8:	0e 94 75 0c 	call	0x18ea	; 0x18ea <_proc_stop>
    }
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif //CONFIG_MP
}
    19dc:	0f 90       	pop	r0
    19de:	0f 90       	pop	r0
    19e0:	0f 90       	pop	r0
    19e2:	cf 91       	pop	r28
    19e4:	df 91       	pop	r29
    19e6:	08 95       	ret

000019e8 <_proc_lres_inc>:
    proc_t * proc
#ifdef CONFIG_USE_HIGHEST_LOCKER
    ,prio_t prio
#endif
)
{
    19e8:	df 93       	push	r29
    19ea:	cf 93       	push	r28
    19ec:	00 d0       	rcall	.+0      	; 0x19ee <_proc_lres_inc+0x6>
    19ee:	0f 92       	push	r0
    19f0:	cd b7       	in	r28, 0x3d	; 61
    19f2:	de b7       	in	r29, 0x3e	; 62
    19f4:	9a 83       	std	Y+2, r25	; 0x02
    19f6:	89 83       	std	Y+1, r24	; 0x01
    19f8:	6b 83       	std	Y+3, r22	; 0x03
#ifdef CONFIG_USE_HIGHEST_LOCKER
    if( proc->lres.index == (index_t)0 )proc->flags |= PROC_FLG_HOLD;
    19fa:	e9 81       	ldd	r30, Y+1	; 0x01
    19fc:	fa 81       	ldd	r31, Y+2	; 0x02
    19fe:	85 8d       	ldd	r24, Z+29	; 0x1d
    1a00:	88 23       	and	r24, r24
    1a02:	39 f4       	brne	.+14     	; 0x1a12 <_proc_lres_inc+0x2a>
    1a04:	e9 81       	ldd	r30, Y+1	; 0x01
    1a06:	fa 81       	ldd	r31, Y+2	; 0x02
    1a08:	83 85       	ldd	r24, Z+11	; 0x0b
    1a0a:	84 60       	ori	r24, 0x04	; 4
    1a0c:	e9 81       	ldd	r30, Y+1	; 0x01
    1a0e:	fa 81       	ldd	r31, Y+2	; 0x02
    1a10:	83 87       	std	Z+11, r24	; 0x0b
    pcounter_inc( &proc->lres, prio );
    1a12:	89 81       	ldd	r24, Y+1	; 0x01
    1a14:	9a 81       	ldd	r25, Y+2	; 0x02
    1a16:	0d 96       	adiw	r24, 0x0d	; 13
    1a18:	6b 81       	ldd	r22, Y+3	; 0x03
    1a1a:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <pcounter_inc>
#else
    if( proc->lres == (count_t)0 )proc->flags |= PROC_FLG_HOLD;
    proc->lres++;
#endif
}
    1a1e:	0f 90       	pop	r0
    1a20:	0f 90       	pop	r0
    1a22:	0f 90       	pop	r0
    1a24:	cf 91       	pop	r28
    1a26:	df 91       	pop	r29
    1a28:	08 95       	ret

00001a2a <_proc_lres_dec>:
    proc_t * proc
#ifdef CONFIG_USE_HIGHEST_LOCKER
    ,prio_t prio
#endif
)
{
    1a2a:	df 93       	push	r29
    1a2c:	cf 93       	push	r28
    1a2e:	00 d0       	rcall	.+0      	; 0x1a30 <_proc_lres_dec+0x6>
    1a30:	0f 92       	push	r0
    1a32:	cd b7       	in	r28, 0x3d	; 61
    1a34:	de b7       	in	r29, 0x3e	; 62
    1a36:	9a 83       	std	Y+2, r25	; 0x02
    1a38:	89 83       	std	Y+1, r24	; 0x01
    1a3a:	6b 83       	std	Y+3, r22	; 0x03
#ifdef CONFIG_USE_HIGHEST_LOCKER
    pcounter_dec( &proc->lres, prio );
    1a3c:	89 81       	ldd	r24, Y+1	; 0x01
    1a3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a40:	0d 96       	adiw	r24, 0x0d	; 13
    1a42:	6b 81       	ldd	r22, Y+3	; 0x03
    1a44:	0e 94 14 0b 	call	0x1628	; 0x1628 <pcounter_dec>
    if( proc->lres.index == (index_t)0 )proc->flags &= ~PROC_FLG_HOLD;
    1a48:	e9 81       	ldd	r30, Y+1	; 0x01
    1a4a:	fa 81       	ldd	r31, Y+2	; 0x02
    1a4c:	85 8d       	ldd	r24, Z+29	; 0x1d
    1a4e:	88 23       	and	r24, r24
    1a50:	39 f4       	brne	.+14     	; 0x1a60 <_proc_lres_dec+0x36>
    1a52:	e9 81       	ldd	r30, Y+1	; 0x01
    1a54:	fa 81       	ldd	r31, Y+2	; 0x02
    1a56:	83 85       	ldd	r24, Z+11	; 0x0b
    1a58:	8b 7f       	andi	r24, 0xFB	; 251
    1a5a:	e9 81       	ldd	r30, Y+1	; 0x01
    1a5c:	fa 81       	ldd	r31, Y+2	; 0x02
    1a5e:	83 87       	std	Z+11, r24	; 0x0b
#else
    if( proc->lres!= (count_t)0 )proc->lres--;
    if( proc->lres == (count_t)0 )proc->flags &= ~PROC_FLG_HOLD;
#endif
}
    1a60:	0f 90       	pop	r0
    1a62:	0f 90       	pop	r0
    1a64:	0f 90       	pop	r0
    1a66:	cf 91       	pop	r28
    1a68:	df 91       	pop	r29
    1a6a:	08 95       	ret

00001a6c <_proc_prio_control_stoped>:
#ifdef CONFIG_USE_HIGHEST_LOCKER
// Будет использоваться в mutex-ах и т.п., процесс должен сам вызывать эту функцию, при этом он должен быть вырезан из списка выполняющихся.
void _proc_prio_control_stoped( proc_t * proc )
{
    1a6c:	df 93       	push	r29
    1a6e:	cf 93       	push	r28
    1a70:	cd b7       	in	r28, 0x3d	; 61
    1a72:	de b7       	in	r29, 0x3e	; 62
    1a74:	27 97       	sbiw	r28, 0x07	; 7
    1a76:	0f b6       	in	r0, 0x3f	; 63
    1a78:	f8 94       	cli
    1a7a:	de bf       	out	0x3e, r29	; 62
    1a7c:	0f be       	out	0x3f, r0	; 63
    1a7e:	cd bf       	out	0x3d, r28	; 61
    1a80:	9b 83       	std	Y+3, r25	; 0x03
    1a82:	8a 83       	std	Y+2, r24	; 0x02
    if(proc->lres.index != (index_t)0)
    1a84:	ea 81       	ldd	r30, Y+2	; 0x02
    1a86:	fb 81       	ldd	r31, Y+3	; 0x03
    1a88:	85 8d       	ldd	r24, Z+29	; 0x1d
    1a8a:	88 23       	and	r24, r24
    1a8c:	e9 f0       	breq	.+58     	; 0x1ac8 <_proc_prio_control_stoped+0x5c>
    {
        prio_t locker_prio = index_search( proc->lres.index );
    1a8e:	ea 81       	ldd	r30, Y+2	; 0x02
    1a90:	fb 81       	ldd	r31, Y+3	; 0x03
    1a92:	85 8d       	ldd	r24, Z+29	; 0x1d
    1a94:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <index_search>
    1a98:	89 83       	std	Y+1, r24	; 0x01
        ((gitem_t *)proc)->group->prio = ( locker_prio < proc->base_prio )?locker_prio:proc->base_prio;
    1a9a:	ea 81       	ldd	r30, Y+2	; 0x02
    1a9c:	fb 81       	ldd	r31, Y+3	; 0x03
    1a9e:	84 81       	ldd	r24, Z+4	; 0x04
    1aa0:	95 81       	ldd	r25, Z+5	; 0x05
    1aa2:	9e 83       	std	Y+6, r25	; 0x06
    1aa4:	8d 83       	std	Y+5, r24	; 0x05
    1aa6:	ea 81       	ldd	r30, Y+2	; 0x02
    1aa8:	fb 81       	ldd	r31, Y+3	; 0x03
    1aaa:	84 85       	ldd	r24, Z+12	; 0x0c
    1aac:	99 81       	ldd	r25, Y+1	; 0x01
    1aae:	9f 83       	std	Y+7, r25	; 0x07
    1ab0:	8c 83       	std	Y+4, r24	; 0x04
    1ab2:	ec 81       	ldd	r30, Y+4	; 0x04
    1ab4:	ff 81       	ldd	r31, Y+7	; 0x07
    1ab6:	fe 17       	cp	r31, r30
    1ab8:	10 f4       	brcc	.+4      	; 0x1abe <_proc_prio_control_stoped+0x52>
    1aba:	8f 81       	ldd	r24, Y+7	; 0x07
    1abc:	8c 83       	std	Y+4, r24	; 0x04
    1abe:	8c 81       	ldd	r24, Y+4	; 0x04
    1ac0:	ed 81       	ldd	r30, Y+5	; 0x05
    1ac2:	fe 81       	ldd	r31, Y+6	; 0x06
    1ac4:	82 83       	std	Z+2, r24	; 0x02
    1ac6:	0a c0       	rjmp	.+20     	; 0x1adc <_proc_prio_control_stoped+0x70>
    }
    else
    {
        ((gitem_t *)proc)->group->prio = proc->base_prio;
    1ac8:	ea 81       	ldd	r30, Y+2	; 0x02
    1aca:	fb 81       	ldd	r31, Y+3	; 0x03
    1acc:	a4 81       	ldd	r26, Z+4	; 0x04
    1ace:	b5 81       	ldd	r27, Z+5	; 0x05
    1ad0:	ea 81       	ldd	r30, Y+2	; 0x02
    1ad2:	fb 81       	ldd	r31, Y+3	; 0x03
    1ad4:	84 85       	ldd	r24, Z+12	; 0x0c
    1ad6:	12 96       	adiw	r26, 0x02	; 2
    1ad8:	8c 93       	st	X, r24
    1ada:	12 97       	sbiw	r26, 0x02	; 2
    }
}
    1adc:	27 96       	adiw	r28, 0x07	; 7
    1ade:	0f b6       	in	r0, 0x3f	; 63
    1ae0:	f8 94       	cli
    1ae2:	de bf       	out	0x3e, r29	; 62
    1ae4:	0f be       	out	0x3f, r0	; 63
    1ae6:	cd bf       	out	0x3d, r28	; 61
    1ae8:	cf 91       	pop	r28
    1aea:	df 91       	pop	r29
    1aec:	08 95       	ret

00001aee <_proc_prio_control_running>:
void _proc_prio_control_running( proc_t * proc )
{
    1aee:	df 93       	push	r29
    1af0:	cf 93       	push	r28
    1af2:	00 d0       	rcall	.+0      	; 0x1af4 <_proc_prio_control_running+0x6>
    1af4:	00 d0       	rcall	.+0      	; 0x1af6 <_proc_prio_control_running+0x8>
    1af6:	00 d0       	rcall	.+0      	; 0x1af8 <_proc_prio_control_running+0xa>
    1af8:	cd b7       	in	r28, 0x3d	; 61
    1afa:	de b7       	in	r29, 0x3e	; 62
    1afc:	9c 83       	std	Y+4, r25	; 0x04
    1afe:	8b 83       	std	Y+3, r24	; 0x03
    prio_t new_prio;
    if(proc->lres.index != (index_t)0)
    1b00:	eb 81       	ldd	r30, Y+3	; 0x03
    1b02:	fc 81       	ldd	r31, Y+4	; 0x04
    1b04:	85 8d       	ldd	r24, Z+29	; 0x1d
    1b06:	88 23       	and	r24, r24
    1b08:	a9 f0       	breq	.+42     	; 0x1b34 <_proc_prio_control_running+0x46>
    {
        prio_t locker_prio = index_search( proc->lres.index );
    1b0a:	eb 81       	ldd	r30, Y+3	; 0x03
    1b0c:	fc 81       	ldd	r31, Y+4	; 0x04
    1b0e:	85 8d       	ldd	r24, Z+29	; 0x1d
    1b10:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <index_search>
    1b14:	89 83       	std	Y+1, r24	; 0x01
        new_prio = ( locker_prio < proc->base_prio )?locker_prio:proc->base_prio;
    1b16:	eb 81       	ldd	r30, Y+3	; 0x03
    1b18:	fc 81       	ldd	r31, Y+4	; 0x04
    1b1a:	84 85       	ldd	r24, Z+12	; 0x0c
    1b1c:	99 81       	ldd	r25, Y+1	; 0x01
    1b1e:	9e 83       	std	Y+6, r25	; 0x06
    1b20:	8d 83       	std	Y+5, r24	; 0x05
    1b22:	8d 81       	ldd	r24, Y+5	; 0x05
    1b24:	9e 81       	ldd	r25, Y+6	; 0x06
    1b26:	98 17       	cp	r25, r24
    1b28:	10 f4       	brcc	.+4      	; 0x1b2e <_proc_prio_control_running+0x40>
    1b2a:	8e 81       	ldd	r24, Y+6	; 0x06
    1b2c:	8d 83       	std	Y+5, r24	; 0x05
    1b2e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b30:	9a 83       	std	Y+2, r25	; 0x02
    1b32:	04 c0       	rjmp	.+8      	; 0x1b3c <_proc_prio_control_running+0x4e>
    }
    else
    {
        new_prio = proc->base_prio;
    1b34:	eb 81       	ldd	r30, Y+3	; 0x03
    1b36:	fc 81       	ldd	r31, Y+4	; 0x04
    1b38:	84 85       	ldd	r24, Z+12	; 0x0c
    1b3a:	8a 83       	std	Y+2, r24	; 0x02
    }
    if(((gitem_t *)proc)->group->prio != new_prio)
    1b3c:	eb 81       	ldd	r30, Y+3	; 0x03
    1b3e:	fc 81       	ldd	r31, Y+4	; 0x04
    1b40:	04 80       	ldd	r0, Z+4	; 0x04
    1b42:	f5 81       	ldd	r31, Z+5	; 0x05
    1b44:	e0 2d       	mov	r30, r0
    1b46:	92 81       	ldd	r25, Z+2	; 0x02
    1b48:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4a:	98 17       	cp	r25, r24
    1b4c:	b1 f0       	breq	.+44     	; 0x1b7a <_proc_prio_control_running+0x8c>
    {
        _proc_stop_( proc );
    1b4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b50:	9c 81       	ldd	r25, Y+4	; 0x04
    1b52:	0e 94 ad 07 	call	0xf5a	; 0xf5a <gitem_cut>
        ((gitem_t *)proc)->group->prio = new_prio;
    1b56:	eb 81       	ldd	r30, Y+3	; 0x03
    1b58:	fc 81       	ldd	r31, Y+4	; 0x04
    1b5a:	04 80       	ldd	r0, Z+4	; 0x04
    1b5c:	f5 81       	ldd	r31, Z+5	; 0x05
    1b5e:	e0 2d       	mov	r30, r0
    1b60:	8a 81       	ldd	r24, Y+2	; 0x02
    1b62:	82 83       	std	Z+2, r24	; 0x02
#ifdef CONFIG_MP
        spin_lock( &kernel.stat_lock );
        stat_inc( proc, (stat_t *)kernel.stat+proc->core_id );
        spin_unlock( &kernel.stat_lock );
#endif
        _proc_run_( proc );
    1b64:	8b 81       	ldd	r24, Y+3	; 0x03
    1b66:	9c 81       	ldd	r25, Y+4	; 0x04
    1b68:	20 91 a0 01 	lds	r18, 0x01A0
    1b6c:	30 91 a1 01 	lds	r19, 0x01A1
    1b70:	b9 01       	movw	r22, r18
    1b72:	0e 94 50 06 	call	0xca0	; 0xca0 <gitem_insert>
#ifdef CONFIG_MP
        resched(proc->core_id);
#else
        resched();
    1b76:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
#endif
    }
}
    1b7a:	26 96       	adiw	r28, 0x06	; 6
    1b7c:	0f b6       	in	r0, 0x3f	; 63
    1b7e:	f8 94       	cli
    1b80:	de bf       	out	0x3e, r29	; 62
    1b82:	0f be       	out	0x3f, r0	; 63
    1b84:	cd bf       	out	0x3d, r28	; 61
    1b86:	cf 91       	pop	r28
    1b88:	df 91       	pop	r29
    1b8a:	08 95       	ret

00001b8c <sched_init>:
*****************************************************************************************/
#include "../include/bugurt.h"
///========================================================================================
// Инициация
void sched_init(sched_t * sched, proc_t * idle)
{
    1b8c:	df 93       	push	r29
    1b8e:	cf 93       	push	r28
    1b90:	00 d0       	rcall	.+0      	; 0x1b92 <sched_init+0x6>
    1b92:	00 d0       	rcall	.+0      	; 0x1b94 <sched_init+0x8>
    1b94:	cd b7       	in	r28, 0x3d	; 61
    1b96:	de b7       	in	r29, 0x3e	; 62
    1b98:	9a 83       	std	Y+2, r25	; 0x02
    1b9a:	89 83       	std	Y+1, r24	; 0x01
    1b9c:	7c 83       	std	Y+4, r23	; 0x04
    1b9e:	6b 83       	std	Y+3, r22	; 0x03
#ifdef CONFIG_MP
    lock_t * sched_lock = &sched->lock;
    spin_init( sched_lock );
    spin_lock( sched_lock );
#endif // CONFIG_MP
    sched->ready = (xlist_t *)sched->plst;
    1ba0:	89 81       	ldd	r24, Y+1	; 0x01
    1ba2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba4:	06 96       	adiw	r24, 0x06	; 6
    1ba6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ba8:	fa 81       	ldd	r31, Y+2	; 0x02
    1baa:	93 83       	std	Z+3, r25	; 0x03
    1bac:	82 83       	std	Z+2, r24	; 0x02
    xlist_init( sched->ready );
    1bae:	e9 81       	ldd	r30, Y+1	; 0x01
    1bb0:	fa 81       	ldd	r31, Y+2	; 0x02
    1bb2:	82 81       	ldd	r24, Z+2	; 0x02
    1bb4:	93 81       	ldd	r25, Z+3	; 0x03
    1bb6:	0e 94 9e 10 	call	0x213c	; 0x213c <xlist_init>
    sched->expired = (xlist_t *)sched->plst + 1;
    1bba:	89 81       	ldd	r24, Y+1	; 0x01
    1bbc:	9a 81       	ldd	r25, Y+2	; 0x02
    1bbe:	47 96       	adiw	r24, 0x17	; 23
    1bc0:	e9 81       	ldd	r30, Y+1	; 0x01
    1bc2:	fa 81       	ldd	r31, Y+2	; 0x02
    1bc4:	95 83       	std	Z+5, r25	; 0x05
    1bc6:	84 83       	std	Z+4, r24	; 0x04
    xlist_init( sched->expired );
    1bc8:	e9 81       	ldd	r30, Y+1	; 0x01
    1bca:	fa 81       	ldd	r31, Y+2	; 0x02
    1bcc:	84 81       	ldd	r24, Z+4	; 0x04
    1bce:	95 81       	ldd	r25, Z+5	; 0x05
    1bd0:	0e 94 9e 10 	call	0x213c	; 0x213c <xlist_init>
    gitem_insert( (gitem_t *)idle, sched->ready );
    1bd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd8:	e9 81       	ldd	r30, Y+1	; 0x01
    1bda:	fa 81       	ldd	r31, Y+2	; 0x02
    1bdc:	22 81       	ldd	r18, Z+2	; 0x02
    1bde:	33 81       	ldd	r19, Z+3	; 0x03
    1be0:	b9 01       	movw	r22, r18
    1be2:	0e 94 50 06 	call	0xca0	; 0xca0 <gitem_insert>
    sched->current_proc = idle;
    1be6:	e9 81       	ldd	r30, Y+1	; 0x01
    1be8:	fa 81       	ldd	r31, Y+2	; 0x02
    1bea:	8b 81       	ldd	r24, Y+3	; 0x03
    1bec:	9c 81       	ldd	r25, Y+4	; 0x04
    1bee:	91 83       	std	Z+1, r25	; 0x01
    1bf0:	80 83       	st	Z, r24
    sched->nested_crit_sec = (count_t)0;//вообще это выполняется при запрещенных прерываниях, но не известно, на этом ли процессоре
    1bf2:	e9 81       	ldd	r30, Y+1	; 0x01
    1bf4:	fa 81       	ldd	r31, Y+2	; 0x02
    1bf6:	11 a6       	std	Z+41, r1	; 0x29
    1bf8:	10 a6       	std	Z+40, r1	; 0x28
#ifdef CONFIG_MP
    spin_unlock( sched_lock );
    stat_inc( idle, (stat_t *)kernel.stat + idle->core_id );
#endif // CONFIG_MP
}
    1bfa:	0f 90       	pop	r0
    1bfc:	0f 90       	pop	r0
    1bfe:	0f 90       	pop	r0
    1c00:	0f 90       	pop	r0
    1c02:	cf 91       	pop	r28
    1c04:	df 91       	pop	r29
    1c06:	08 95       	ret

00001c08 <_sched_list_switch>:
static void _sched_list_switch( sched_t * sched )
{
    1c08:	df 93       	push	r29
    1c0a:	cf 93       	push	r28
    1c0c:	00 d0       	rcall	.+0      	; 0x1c0e <_sched_list_switch+0x6>
    1c0e:	00 d0       	rcall	.+0      	; 0x1c10 <_sched_list_switch+0x8>
    1c10:	cd b7       	in	r28, 0x3d	; 61
    1c12:	de b7       	in	r29, 0x3e	; 62
    1c14:	9c 83       	std	Y+4, r25	; 0x04
    1c16:	8b 83       	std	Y+3, r24	; 0x03
    // Список ready опустел, переключаем списки
    if( sched->ready->index == (index_t)0 )
    1c18:	eb 81       	ldd	r30, Y+3	; 0x03
    1c1a:	fc 81       	ldd	r31, Y+4	; 0x04
    1c1c:	02 80       	ldd	r0, Z+2	; 0x02
    1c1e:	f3 81       	ldd	r31, Z+3	; 0x03
    1c20:	e0 2d       	mov	r30, r0
    1c22:	80 89       	ldd	r24, Z+16	; 0x10
    1c24:	88 23       	and	r24, r24
    1c26:	a1 f4       	brne	.+40     	; 0x1c50 <_sched_list_switch+0x48>
    {
        xlist_t * buf = sched->ready;
    1c28:	eb 81       	ldd	r30, Y+3	; 0x03
    1c2a:	fc 81       	ldd	r31, Y+4	; 0x04
    1c2c:	82 81       	ldd	r24, Z+2	; 0x02
    1c2e:	93 81       	ldd	r25, Z+3	; 0x03
    1c30:	9a 83       	std	Y+2, r25	; 0x02
    1c32:	89 83       	std	Y+1, r24	; 0x01
        sched->ready = sched->expired;
    1c34:	eb 81       	ldd	r30, Y+3	; 0x03
    1c36:	fc 81       	ldd	r31, Y+4	; 0x04
    1c38:	84 81       	ldd	r24, Z+4	; 0x04
    1c3a:	95 81       	ldd	r25, Z+5	; 0x05
    1c3c:	eb 81       	ldd	r30, Y+3	; 0x03
    1c3e:	fc 81       	ldd	r31, Y+4	; 0x04
    1c40:	93 83       	std	Z+3, r25	; 0x03
    1c42:	82 83       	std	Z+2, r24	; 0x02
        sched->expired = buf;
    1c44:	eb 81       	ldd	r30, Y+3	; 0x03
    1c46:	fc 81       	ldd	r31, Y+4	; 0x04
    1c48:	89 81       	ldd	r24, Y+1	; 0x01
    1c4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c4c:	95 83       	std	Z+5, r25	; 0x05
    1c4e:	84 83       	std	Z+4, r24	; 0x04
    }
}
    1c50:	0f 90       	pop	r0
    1c52:	0f 90       	pop	r0
    1c54:	0f 90       	pop	r0
    1c56:	0f 90       	pop	r0
    1c58:	cf 91       	pop	r28
    1c5a:	df 91       	pop	r29
    1c5c:	08 95       	ret

00001c5e <sched_schedule>:
2) В качестве аргумента передаем только тот объект, который управляет процессами
на исполняющем функции процессоре.
******************************************************************************************/
// Функция планирования, переключает процессы в обработчике системмного таймера
stack_t * sched_schedule( stack_t * current_sp )
{
    1c5e:	df 93       	push	r29
    1c60:	cf 93       	push	r28
    1c62:	cd b7       	in	r28, 0x3d	; 61
    1c64:	de b7       	in	r29, 0x3e	; 62
    1c66:	27 97       	sbiw	r28, 0x07	; 7
    1c68:	0f b6       	in	r0, 0x3f	; 63
    1c6a:	f8 94       	cli
    1c6c:	de bf       	out	0x3e, r29	; 62
    1c6e:	0f be       	out	0x3f, r0	; 63
    1c70:	cd bf       	out	0x3d, r28	; 61
    1c72:	9f 83       	std	Y+7, r25	; 0x07
    1c74:	8e 83       	std	Y+6, r24	; 0x06
#ifdef CONFIG_MP
    sched_t * sched = (sched_t *)kernel.sched + current_core();
#else
    sched_t * sched = (sched_t *)&kernel.sched;
    1c76:	8e e9       	ldi	r24, 0x9E	; 158
    1c78:	91 e0       	ldi	r25, 0x01	; 1
    1c7a:	9d 83       	std	Y+5, r25	; 0x05
    1c7c:	8c 83       	std	Y+4, r24	; 0x04
#endif // CONFIG_MP
    // Меняем только с локального процессора, блокировку sched->lock можно не захватывать!
    proc_t * current_proc = sched->current_proc;
    1c7e:	ec 81       	ldd	r30, Y+4	; 0x04
    1c80:	fd 81       	ldd	r31, Y+5	; 0x05
    1c82:	80 81       	ld	r24, Z
    1c84:	91 81       	ldd	r25, Z+1	; 0x01
    1c86:	9b 83       	std	Y+3, r25	; 0x03
    1c88:	8a 83       	std	Y+2, r24	; 0x02
#ifdef CONFIG_MP
    // А вот эту блокировку обязательно надо захватить!
    spin_lock( &current_proc->lock );
#endif // CONFIG_MP
    // Сохранение указателя стека
    current_proc->spointer = current_sp;
    1c8a:	ea 81       	ldd	r30, Y+2	; 0x02
    1c8c:	fb 81       	ldd	r31, Y+3	; 0x03
    1c8e:	8e 81       	ldd	r24, Y+6	; 0x06
    1c90:	9f 81       	ldd	r25, Y+7	; 0x07
    1c92:	95 a7       	std	Z+45, r25	; 0x2d
    1c94:	84 a7       	std	Z+44, r24	; 0x2c
    // Хук "сохранение контекста"
    if( current_proc->sv_hook )current_proc->sv_hook( current_proc->arg );
    1c96:	ea 81       	ldd	r30, Y+2	; 0x02
    1c98:	fb 81       	ldd	r31, Y+3	; 0x03
    1c9a:	84 a1       	ldd	r24, Z+36	; 0x24
    1c9c:	95 a1       	ldd	r25, Z+37	; 0x25
    1c9e:	00 97       	sbiw	r24, 0x00	; 0
    1ca0:	51 f0       	breq	.+20     	; 0x1cb6 <sched_schedule+0x58>
    1ca2:	ea 81       	ldd	r30, Y+2	; 0x02
    1ca4:	fb 81       	ldd	r31, Y+3	; 0x03
    1ca6:	24 a1       	ldd	r18, Z+36	; 0x24
    1ca8:	35 a1       	ldd	r19, Z+37	; 0x25
    1caa:	ea 81       	ldd	r30, Y+2	; 0x02
    1cac:	fb 81       	ldd	r31, Y+3	; 0x03
    1cae:	80 a5       	ldd	r24, Z+40	; 0x28
    1cb0:	91 a5       	ldd	r25, Z+41	; 0x29
    1cb2:	f9 01       	movw	r30, r18
    1cb4:	09 95       	icall
    // Проверяем, что процесс находится в списке ready
    if( (xlist_t *)((gitem_t *)current_proc)->group->link == sched->ready )
    1cb6:	ea 81       	ldd	r30, Y+2	; 0x02
    1cb8:	fb 81       	ldd	r31, Y+3	; 0x03
    1cba:	04 80       	ldd	r0, Z+4	; 0x04
    1cbc:	f5 81       	ldd	r31, Z+5	; 0x05
    1cbe:	e0 2d       	mov	r30, r0
    1cc0:	80 81       	ld	r24, Z
    1cc2:	91 81       	ldd	r25, Z+1	; 0x01
    1cc4:	9c 01       	movw	r18, r24
    1cc6:	ec 81       	ldd	r30, Y+4	; 0x04
    1cc8:	fd 81       	ldd	r31, Y+5	; 0x05
    1cca:	82 81       	ldd	r24, Z+2	; 0x02
    1ccc:	93 81       	ldd	r25, Z+3	; 0x03
    1cce:	28 17       	cp	r18, r24
    1cd0:	39 07       	cpc	r19, r25
    1cd2:	09 f0       	breq	.+2      	; 0x1cd6 <sched_schedule+0x78>
    1cd4:	4d c0       	rjmp	.+154    	; 0x1d70 <sched_schedule+0x112>
    {
        // Переключаем cписок на следующий за текущим процесс
#ifdef CONFIG_MP
        spin_lock( &sched->lock );
#endif // CONFIG_MP
        xlist_switch( sched->ready, ((gitem_t *)current_proc)->group->prio );
    1cd6:	ec 81       	ldd	r30, Y+4	; 0x04
    1cd8:	fd 81       	ldd	r31, Y+5	; 0x05
    1cda:	82 81       	ldd	r24, Z+2	; 0x02
    1cdc:	93 81       	ldd	r25, Z+3	; 0x03
    1cde:	ea 81       	ldd	r30, Y+2	; 0x02
    1ce0:	fb 81       	ldd	r31, Y+3	; 0x03
    1ce2:	04 80       	ldd	r0, Z+4	; 0x04
    1ce4:	f5 81       	ldd	r31, Z+5	; 0x05
    1ce6:	e0 2d       	mov	r30, r0
    1ce8:	22 81       	ldd	r18, Z+2	; 0x02
    1cea:	62 2f       	mov	r22, r18
    1cec:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <xlist_switch>
#ifdef CONFIG_MP
        spin_unlock( &sched->lock );
#endif // CONFIG_MP
        //Проверяем, не истек ли квант времени процесса
        if( current_proc->timer > (timer_t)1 )current_proc->timer--;// Не истек, уменьшаем таймер
    1cf0:	ea 81       	ldd	r30, Y+2	; 0x02
    1cf2:	fb 81       	ldd	r31, Y+3	; 0x03
    1cf4:	80 a1       	ldd	r24, Z+32	; 0x20
    1cf6:	91 a1       	ldd	r25, Z+33	; 0x21
    1cf8:	82 30       	cpi	r24, 0x02	; 2
    1cfa:	91 05       	cpc	r25, r1
    1cfc:	50 f0       	brcs	.+20     	; 0x1d12 <sched_schedule+0xb4>
    1cfe:	ea 81       	ldd	r30, Y+2	; 0x02
    1d00:	fb 81       	ldd	r31, Y+3	; 0x03
    1d02:	80 a1       	ldd	r24, Z+32	; 0x20
    1d04:	91 a1       	ldd	r25, Z+33	; 0x21
    1d06:	01 97       	sbiw	r24, 0x01	; 1
    1d08:	ea 81       	ldd	r30, Y+2	; 0x02
    1d0a:	fb 81       	ldd	r31, Y+3	; 0x03
    1d0c:	91 a3       	std	Z+33, r25	; 0x21
    1d0e:	80 a3       	std	Z+32, r24	; 0x20
    1d10:	2f c0       	rjmp	.+94     	; 0x1d70 <sched_schedule+0x112>
        {
            // Истек, вырезаем процесс из списка
#ifdef CONFIG_MP
            spin_lock( &sched->lock );
#endif // CONFIG_MP
            gitem_fast_cut( (gitem_t *)current_proc );
    1d12:	8a 81       	ldd	r24, Y+2	; 0x02
    1d14:	9b 81       	ldd	r25, Y+3	; 0x03
    1d16:	0e 94 27 07 	call	0xe4e	; 0xe4e <gitem_fast_cut>
            // Обновили статистику после удаления процесса из списка ready
            stat_dec( current_proc, (stat_t *)kernel.stat + current_proc->core_id );
#endif // CONFIG_USE_ALB
#endif // CONFIG_MP
            // А что за процесс собственно?
            flag_t flags = current_proc->flags;
    1d1a:	ea 81       	ldd	r30, Y+2	; 0x02
    1d1c:	fb 81       	ldd	r31, Y+3	; 0x03
    1d1e:	83 85       	ldd	r24, Z+11	; 0x0b
    1d20:	89 83       	std	Y+1, r24	; 0x01
            if(
                (!(flags & PROC_FLG_RT))
    1d22:	89 81       	ldd	r24, Y+1	; 0x01
    1d24:	88 2f       	mov	r24, r24
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	81 70       	andi	r24, 0x01	; 1
    1d2a:	90 70       	andi	r25, 0x00	; 0
            stat_dec( current_proc, (stat_t *)kernel.stat + current_proc->core_id );
#endif // CONFIG_USE_ALB
#endif // CONFIG_MP
            // А что за процесс собственно?
            flag_t flags = current_proc->flags;
            if(
    1d2c:	00 97       	sbiw	r24, 0x00	; 0
    1d2e:	91 f4       	brne	.+36     	; 0x1d54 <sched_schedule+0xf6>
                ||(flags & PROC_FLG_HOLD)
#endif // CONFIG_HARD_RT
            )
            {
                //Процесс общего назначения, либо он удерживает общий ресурс, сбрасываем таймер и переносим в очередь expired
                current_proc->timer = current_proc->time_quant;
    1d30:	ea 81       	ldd	r30, Y+2	; 0x02
    1d32:	fb 81       	ldd	r31, Y+3	; 0x03
    1d34:	86 8d       	ldd	r24, Z+30	; 0x1e
    1d36:	97 8d       	ldd	r25, Z+31	; 0x1f
    1d38:	ea 81       	ldd	r30, Y+2	; 0x02
    1d3a:	fb 81       	ldd	r31, Y+3	; 0x03
    1d3c:	91 a3       	std	Z+33, r25	; 0x21
    1d3e:	80 a3       	std	Z+32, r24	; 0x20
#else // CONFIG_MP CONFIG_USE_ALB
                // Тупо переносим процесс в список expired
#ifdef CONFIG_MP
                spin_lock( &sched->lock );
#endif // CONFIG_MP
                gitem_insert( (gitem_t *)current_proc, sched->expired );
    1d40:	8a 81       	ldd	r24, Y+2	; 0x02
    1d42:	9b 81       	ldd	r25, Y+3	; 0x03
    1d44:	ec 81       	ldd	r30, Y+4	; 0x04
    1d46:	fd 81       	ldd	r31, Y+5	; 0x05
    1d48:	24 81       	ldd	r18, Z+4	; 0x04
    1d4a:	35 81       	ldd	r19, Z+5	; 0x05
    1d4c:	b9 01       	movw	r22, r18
    1d4e:	0e 94 50 06 	call	0xca0	; 0xca0 <gitem_insert>
    1d52:	0e c0       	rjmp	.+28     	; 0x1d70 <sched_schedule+0x112>
                spin_lock( &kernel.stat_lock );
                stat_dec( current_proc, (stat_t *)kernel.stat + current_proc->core_id );
#endif // nCONFIG_USE_ALB
                spin_unlock( &kernel.stat_lock );
#endif // CONFIG_MP
                ((gitem_t *)current_proc)->group->link = (void *)0;// Просто вырезали из списка, как в gitem_cut
    1d54:	ea 81       	ldd	r30, Y+2	; 0x02
    1d56:	fb 81       	ldd	r31, Y+3	; 0x03
    1d58:	04 80       	ldd	r0, Z+4	; 0x04
    1d5a:	f5 81       	ldd	r31, Z+5	; 0x05
    1d5c:	e0 2d       	mov	r30, r0
    1d5e:	11 82       	std	Z+1, r1	; 0x01
    1d60:	10 82       	st	Z, r1
                current_proc->flags &= ~PROC_FLG_RUN;
    1d62:	ea 81       	ldd	r30, Y+2	; 0x02
    1d64:	fb 81       	ldd	r31, Y+3	; 0x03
    1d66:	83 85       	ldd	r24, Z+11	; 0x0b
    1d68:	8d 7f       	andi	r24, 0xFD	; 253
    1d6a:	ea 81       	ldd	r30, Y+2	; 0x02
    1d6c:	fb 81       	ldd	r31, Y+3	; 0x03
    1d6e:	83 87       	std	Z+11, r24	; 0x0b
#ifdef CONFIG_MP
    //Текущий процесс более не нужен, освобождаем его блокировку
    spin_unlock( &current_proc->lock );
    spin_lock( &sched->lock );
#endif // CONFIG_MP
    _sched_list_switch( sched );
    1d70:	8c 81       	ldd	r24, Y+4	; 0x04
    1d72:	9d 81       	ldd	r25, Y+5	; 0x05
    1d74:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <_sched_list_switch>
    // Изменять указатель будем при захваченной блокировке,
    // чтобы процессы на других процессорах не прочитали неизвестно что.
    current_proc = (proc_t *)xlist_head( sched->ready ); // Вытесняющая многозадачность же!
    1d78:	ec 81       	ldd	r30, Y+4	; 0x04
    1d7a:	fd 81       	ldd	r31, Y+5	; 0x05
    1d7c:	82 81       	ldd	r24, Z+2	; 0x02
    1d7e:	93 81       	ldd	r25, Z+3	; 0x03
    1d80:	0e 94 c8 10 	call	0x2190	; 0x2190 <xlist_head>
    1d84:	9b 83       	std	Y+3, r25	; 0x03
    1d86:	8a 83       	std	Y+2, r24	; 0x02
    sched->current_proc = current_proc;
    1d88:	ec 81       	ldd	r30, Y+4	; 0x04
    1d8a:	fd 81       	ldd	r31, Y+5	; 0x05
    1d8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d90:	91 83       	std	Z+1, r25	; 0x01
    1d92:	80 83       	st	Z, r24
#ifdef CONFIG_MP
    spin_unlock( &sched->lock );
    spin_lock( &current_proc->lock );
#endif // CONFIG_MP
    //Хук "восстановление контекста"
    if( current_proc->rs_hook )current_proc->rs_hook( current_proc->arg );
    1d94:	ea 81       	ldd	r30, Y+2	; 0x02
    1d96:	fb 81       	ldd	r31, Y+3	; 0x03
    1d98:	86 a1       	ldd	r24, Z+38	; 0x26
    1d9a:	97 a1       	ldd	r25, Z+39	; 0x27
    1d9c:	00 97       	sbiw	r24, 0x00	; 0
    1d9e:	51 f0       	breq	.+20     	; 0x1db4 <sched_schedule+0x156>
    1da0:	ea 81       	ldd	r30, Y+2	; 0x02
    1da2:	fb 81       	ldd	r31, Y+3	; 0x03
    1da4:	26 a1       	ldd	r18, Z+38	; 0x26
    1da6:	37 a1       	ldd	r19, Z+39	; 0x27
    1da8:	ea 81       	ldd	r30, Y+2	; 0x02
    1daa:	fb 81       	ldd	r31, Y+3	; 0x03
    1dac:	80 a5       	ldd	r24, Z+40	; 0x28
    1dae:	91 a5       	ldd	r25, Z+41	; 0x29
    1db0:	f9 01       	movw	r30, r18
    1db2:	09 95       	icall
#ifdef CONFIG_MP
    stack_t * ret_sp = current_proc->spointer;
    spin_unlock( &current_proc->lock );
    return ret_sp;
#else
    return current_proc->spointer;
    1db4:	ea 81       	ldd	r30, Y+2	; 0x02
    1db6:	fb 81       	ldd	r31, Y+3	; 0x03
    1db8:	84 a5       	ldd	r24, Z+44	; 0x2c
    1dba:	95 a5       	ldd	r25, Z+45	; 0x2d
#endif // CONFIG_MP
}
    1dbc:	27 96       	adiw	r28, 0x07	; 7
    1dbe:	0f b6       	in	r0, 0x3f	; 63
    1dc0:	f8 94       	cli
    1dc2:	de bf       	out	0x3e, r29	; 62
    1dc4:	0f be       	out	0x3f, r0	; 63
    1dc6:	cd bf       	out	0x3d, r28	; 61
    1dc8:	cf 91       	pop	r28
    1dca:	df 91       	pop	r29
    1dcc:	08 95       	ret

00001dce <sched_reschedule>:
///----------------------------------------------------------------------------------------
// Функция перепланирования, переключает процессы в обработчике прерывания resched
stack_t * sched_reschedule( stack_t * current_sp )
{
    1dce:	df 93       	push	r29
    1dd0:	cf 93       	push	r28
    1dd2:	00 d0       	rcall	.+0      	; 0x1dd4 <sched_reschedule+0x6>
    1dd4:	00 d0       	rcall	.+0      	; 0x1dd6 <sched_reschedule+0x8>
    1dd6:	00 d0       	rcall	.+0      	; 0x1dd8 <sched_reschedule+0xa>
    1dd8:	cd b7       	in	r28, 0x3d	; 61
    1dda:	de b7       	in	r29, 0x3e	; 62
    1ddc:	9e 83       	std	Y+6, r25	; 0x06
    1dde:	8d 83       	std	Y+5, r24	; 0x05
#ifdef CONFIG_MP
    sched_t * sched = (sched_t *)kernel.sched + current_core();
#else
    sched_t * sched = (sched_t *)&kernel.sched;
    1de0:	8e e9       	ldi	r24, 0x9E	; 158
    1de2:	91 e0       	ldi	r25, 0x01	; 1
    1de4:	9c 83       	std	Y+4, r25	; 0x04
    1de6:	8b 83       	std	Y+3, r24	; 0x03
#endif // CONFIG_MP
    // Меняем только с локального процессора, блокировку sched->lock можно не захватывать!
    proc_t * current_proc = sched->current_proc;
    1de8:	eb 81       	ldd	r30, Y+3	; 0x03
    1dea:	fc 81       	ldd	r31, Y+4	; 0x04
    1dec:	80 81       	ld	r24, Z
    1dee:	91 81       	ldd	r25, Z+1	; 0x01
    1df0:	9a 83       	std	Y+2, r25	; 0x02
    1df2:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    // А вот эту блокировку обязательно надо захватить!
    spin_lock( &current_proc->lock );
#endif // CONFIG_MP
    // Сохранение указателя стека
    current_proc->spointer = current_sp;
    1df4:	e9 81       	ldd	r30, Y+1	; 0x01
    1df6:	fa 81       	ldd	r31, Y+2	; 0x02
    1df8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dfa:	9e 81       	ldd	r25, Y+6	; 0x06
    1dfc:	95 a7       	std	Z+45, r25	; 0x2d
    1dfe:	84 a7       	std	Z+44, r24	; 0x2c
    // Хук "сохранение контекста"
    if( current_proc->sv_hook )current_proc->sv_hook( current_proc->arg );
    1e00:	e9 81       	ldd	r30, Y+1	; 0x01
    1e02:	fa 81       	ldd	r31, Y+2	; 0x02
    1e04:	84 a1       	ldd	r24, Z+36	; 0x24
    1e06:	95 a1       	ldd	r25, Z+37	; 0x25
    1e08:	00 97       	sbiw	r24, 0x00	; 0
    1e0a:	51 f0       	breq	.+20     	; 0x1e20 <sched_reschedule+0x52>
    1e0c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e0e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e10:	24 a1       	ldd	r18, Z+36	; 0x24
    1e12:	35 a1       	ldd	r19, Z+37	; 0x25
    1e14:	e9 81       	ldd	r30, Y+1	; 0x01
    1e16:	fa 81       	ldd	r31, Y+2	; 0x02
    1e18:	80 a5       	ldd	r24, Z+40	; 0x28
    1e1a:	91 a5       	ldd	r25, Z+41	; 0x29
    1e1c:	f9 01       	movw	r30, r18
    1e1e:	09 95       	icall
#ifdef CONFIG_MP
    spin_unlock( &current_proc->lock );
    spin_lock( &sched->lock );
#endif // CONFIG_MP
    _sched_list_switch( sched );
    1e20:	8b 81       	ldd	r24, Y+3	; 0x03
    1e22:	9c 81       	ldd	r25, Y+4	; 0x04
    1e24:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <_sched_list_switch>
    current_proc = (proc_t *)xlist_head( sched->ready ); // Вытесняющая многозадачность же!
    1e28:	eb 81       	ldd	r30, Y+3	; 0x03
    1e2a:	fc 81       	ldd	r31, Y+4	; 0x04
    1e2c:	82 81       	ldd	r24, Z+2	; 0x02
    1e2e:	93 81       	ldd	r25, Z+3	; 0x03
    1e30:	0e 94 c8 10 	call	0x2190	; 0x2190 <xlist_head>
    1e34:	9a 83       	std	Y+2, r25	; 0x02
    1e36:	89 83       	std	Y+1, r24	; 0x01
    sched->current_proc = current_proc;
    1e38:	eb 81       	ldd	r30, Y+3	; 0x03
    1e3a:	fc 81       	ldd	r31, Y+4	; 0x04
    1e3c:	89 81       	ldd	r24, Y+1	; 0x01
    1e3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e40:	91 83       	std	Z+1, r25	; 0x01
    1e42:	80 83       	st	Z, r24

#ifdef CONFIG_MP
    spin_lock(&current_proc->lock);
#endif // CONFIG_MP
    //Хук "восстановление контекста"
    if( current_proc->rs_hook )current_proc->rs_hook( current_proc->arg );
    1e44:	e9 81       	ldd	r30, Y+1	; 0x01
    1e46:	fa 81       	ldd	r31, Y+2	; 0x02
    1e48:	86 a1       	ldd	r24, Z+38	; 0x26
    1e4a:	97 a1       	ldd	r25, Z+39	; 0x27
    1e4c:	00 97       	sbiw	r24, 0x00	; 0
    1e4e:	51 f0       	breq	.+20     	; 0x1e64 <sched_reschedule+0x96>
    1e50:	e9 81       	ldd	r30, Y+1	; 0x01
    1e52:	fa 81       	ldd	r31, Y+2	; 0x02
    1e54:	26 a1       	ldd	r18, Z+38	; 0x26
    1e56:	37 a1       	ldd	r19, Z+39	; 0x27
    1e58:	e9 81       	ldd	r30, Y+1	; 0x01
    1e5a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e5c:	80 a5       	ldd	r24, Z+40	; 0x28
    1e5e:	91 a5       	ldd	r25, Z+41	; 0x29
    1e60:	f9 01       	movw	r30, r18
    1e62:	09 95       	icall
#ifdef CONFIG_MP
    stack_t * ret_sp = current_proc->spointer;
    spin_unlock( &current_proc->lock );
    return ret_sp;
#else
    return current_proc->spointer;
    1e64:	e9 81       	ldd	r30, Y+1	; 0x01
    1e66:	fa 81       	ldd	r31, Y+2	; 0x02
    1e68:	84 a5       	ldd	r24, Z+44	; 0x2c
    1e6a:	95 a5       	ldd	r25, Z+45	; 0x2d
#endif // CONFIG_MP
}
    1e6c:	26 96       	adiw	r28, 0x06	; 6
    1e6e:	0f b6       	in	r0, 0x3f	; 63
    1e70:	f8 94       	cli
    1e72:	de bf       	out	0x3e, r29	; 62
    1e74:	0f be       	out	0x3f, r0	; 63
    1e76:	cd bf       	out	0x3d, r28	; 61
    1e78:	cf 91       	pop	r28
    1e7a:	df 91       	pop	r29
    1e7c:	08 95       	ret

00001e7e <sem_init_isr>:
*****************************************************************************************/
#include "../include/bugurt.h"

// Инициализация
void sem_init_isr( sem_t * sem, count_t count )
{
    1e7e:	df 93       	push	r29
    1e80:	cf 93       	push	r28
    1e82:	00 d0       	rcall	.+0      	; 0x1e84 <sem_init_isr+0x6>
    1e84:	00 d0       	rcall	.+0      	; 0x1e86 <sem_init_isr+0x8>
    1e86:	cd b7       	in	r28, 0x3d	; 61
    1e88:	de b7       	in	r29, 0x3e	; 62
    1e8a:	9a 83       	std	Y+2, r25	; 0x02
    1e8c:	89 83       	std	Y+1, r24	; 0x01
    1e8e:	7c 83       	std	Y+4, r23	; 0x04
    1e90:	6b 83       	std	Y+3, r22	; 0x03
    xlist_init( (xlist_t *)sem );
    1e92:	89 81       	ldd	r24, Y+1	; 0x01
    1e94:	9a 81       	ldd	r25, Y+2	; 0x02
    1e96:	0e 94 9e 10 	call	0x213c	; 0x213c <xlist_init>
    sem->counter = count;
    1e9a:	e9 81       	ldd	r30, Y+1	; 0x01
    1e9c:	fa 81       	ldd	r31, Y+2	; 0x02
    1e9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea2:	92 8b       	std	Z+18, r25	; 0x12
    1ea4:	81 8b       	std	Z+17, r24	; 0x11
}
    1ea6:	0f 90       	pop	r0
    1ea8:	0f 90       	pop	r0
    1eaa:	0f 90       	pop	r0
    1eac:	0f 90       	pop	r0
    1eae:	cf 91       	pop	r28
    1eb0:	df 91       	pop	r29
    1eb2:	08 95       	ret

00001eb4 <_sem_lock_stage_1>:

// То же, для внутреннего использования
bool_t _sem_lock_stage_1( sem_t * sem )
{
    1eb4:	df 93       	push	r29
    1eb6:	cf 93       	push	r28
    1eb8:	00 d0       	rcall	.+0      	; 0x1eba <_sem_lock_stage_1+0x6>
    1eba:	00 d0       	rcall	.+0      	; 0x1ebc <_sem_lock_stage_1+0x8>
    1ebc:	0f 92       	push	r0
    1ebe:	cd b7       	in	r28, 0x3d	; 61
    1ec0:	de b7       	in	r29, 0x3e	; 62
    1ec2:	9d 83       	std	Y+5, r25	; 0x05
    1ec4:	8c 83       	std	Y+4, r24	; 0x04

    bool_t ret = 0;
    1ec6:	1b 82       	std	Y+3, r1	; 0x03
    if( sem->counter != 0 )
    1ec8:	ec 81       	ldd	r30, Y+4	; 0x04
    1eca:	fd 81       	ldd	r31, Y+5	; 0x05
    1ecc:	81 89       	ldd	r24, Z+17	; 0x11
    1ece:	92 89       	ldd	r25, Z+18	; 0x12
    1ed0:	00 97       	sbiw	r24, 0x00	; 0
    1ed2:	61 f0       	breq	.+24     	; 0x1eec <_sem_lock_stage_1+0x38>
    {
        sem->counter--;
    1ed4:	ec 81       	ldd	r30, Y+4	; 0x04
    1ed6:	fd 81       	ldd	r31, Y+5	; 0x05
    1ed8:	81 89       	ldd	r24, Z+17	; 0x11
    1eda:	92 89       	ldd	r25, Z+18	; 0x12
    1edc:	01 97       	sbiw	r24, 0x01	; 1
    1ede:	ec 81       	ldd	r30, Y+4	; 0x04
    1ee0:	fd 81       	ldd	r31, Y+5	; 0x05
    1ee2:	92 8b       	std	Z+18, r25	; 0x12
    1ee4:	81 8b       	std	Z+17, r24	; 0x11
#ifdef CONFIG_MP
        spin_unlock( &sem->lock );// Освобождение блокировки семафора
#endif //CONFIG_MP
        ret = (bool_t)1;
    1ee6:	81 e0       	ldi	r24, 0x01	; 1
    1ee8:	8b 83       	std	Y+3, r24	; 0x03
    1eea:	16 c0       	rjmp	.+44     	; 0x1f18 <_sem_lock_stage_1+0x64>
    }
    else
    {
        proc_t * proc = current_proc();
    1eec:	0e 94 cc 00 	call	0x198	; 0x198 <current_proc>
    1ef0:	9a 83       	std	Y+2, r25	; 0x02
    1ef2:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
        spin_lock( &proc->lock );// Захват блокировки процесса
#endif //CONFIG_MP
        proc->flags |= PROC_FLG_QUEUE;
    1ef4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ef6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ef8:	83 85       	ldd	r24, Z+11	; 0x0b
    1efa:	88 60       	ori	r24, 0x08	; 8
    1efc:	e9 81       	ldd	r30, Y+1	; 0x01
    1efe:	fa 81       	ldd	r31, Y+2	; 0x02
    1f00:	83 87       	std	Z+11, r24	; 0x0b
        _proc_stop( proc );
    1f02:	89 81       	ldd	r24, Y+1	; 0x01
    1f04:	9a 81       	ldd	r25, Y+2	; 0x02
    1f06:	0e 94 75 0c 	call	0x18ea	; 0x18ea <_proc_stop>
        gitem_insert( (gitem_t *)proc, (xlist_t *)sem );
    1f0a:	89 81       	ldd	r24, Y+1	; 0x01
    1f0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f0e:	2c 81       	ldd	r18, Y+4	; 0x04
    1f10:	3d 81       	ldd	r19, Y+5	; 0x05
    1f12:	b9 01       	movw	r22, r18
    1f14:	0e 94 50 06 	call	0xca0	; 0xca0 <gitem_insert>
#ifdef CONFIG_MP
        spin_unlock( &proc->lock );// Освобождение блокировки процесса
#endif //CONFIG_MP
    }
    return ret;
    1f18:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1f1a:	0f 90       	pop	r0
    1f1c:	0f 90       	pop	r0
    1f1e:	0f 90       	pop	r0
    1f20:	0f 90       	pop	r0
    1f22:	0f 90       	pop	r0
    1f24:	cf 91       	pop	r28
    1f26:	df 91       	pop	r29
    1f28:	08 95       	ret

00001f2a <_sem_unlock>:

void _sem_unlock( sem_t * sem )
{
    1f2a:	df 93       	push	r29
    1f2c:	cf 93       	push	r28
    1f2e:	00 d0       	rcall	.+0      	; 0x1f30 <_sem_unlock+0x6>
    1f30:	00 d0       	rcall	.+0      	; 0x1f32 <_sem_unlock+0x8>
    1f32:	cd b7       	in	r28, 0x3d	; 61
    1f34:	de b7       	in	r29, 0x3e	; 62
    1f36:	9c 83       	std	Y+4, r25	; 0x04
    1f38:	8b 83       	std	Y+3, r24	; 0x03
    if( ((xlist_t *)sem)->index == (index_t)0  )
    1f3a:	eb 81       	ldd	r30, Y+3	; 0x03
    1f3c:	fc 81       	ldd	r31, Y+4	; 0x04
    1f3e:	80 89       	ldd	r24, Z+16	; 0x10
    1f40:	88 23       	and	r24, r24
    1f42:	51 f4       	brne	.+20     	; 0x1f58 <_sem_unlock+0x2e>
    {
        sem->counter++;
    1f44:	eb 81       	ldd	r30, Y+3	; 0x03
    1f46:	fc 81       	ldd	r31, Y+4	; 0x04
    1f48:	81 89       	ldd	r24, Z+17	; 0x11
    1f4a:	92 89       	ldd	r25, Z+18	; 0x12
    1f4c:	01 96       	adiw	r24, 0x01	; 1
    1f4e:	eb 81       	ldd	r30, Y+3	; 0x03
    1f50:	fc 81       	ldd	r31, Y+4	; 0x04
    1f52:	92 8b       	std	Z+18, r25	; 0x12
    1f54:	81 8b       	std	Z+17, r24	; 0x11
    1f56:	15 c0       	rjmp	.+42     	; 0x1f82 <_sem_unlock+0x58>
#ifdef CONFIG_MP
        spin_unlock( &sem->lock );
#endif //CONFIG_MP
        return;
    }
    proc_t * proc = (proc_t *)xlist_head((xlist_t *)sem);
    1f58:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f5c:	0e 94 c8 10 	call	0x2190	; 0x2190 <xlist_head>
    1f60:	9a 83       	std	Y+2, r25	; 0x02
    1f62:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );// Захват спин-блокировки процесса
#endif //CONFIG_MP
    proc->flags &= ~PROC_FLG_QUEUE;
    1f64:	e9 81       	ldd	r30, Y+1	; 0x01
    1f66:	fa 81       	ldd	r31, Y+2	; 0x02
    1f68:	83 85       	ldd	r24, Z+11	; 0x0b
    1f6a:	87 7f       	andi	r24, 0xF7	; 247
    1f6c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f6e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f70:	83 87       	std	Z+11, r24	; 0x0b
    gitem_cut( (gitem_t *)proc );
    1f72:	89 81       	ldd	r24, Y+1	; 0x01
    1f74:	9a 81       	ldd	r25, Y+2	; 0x02
    1f76:	0e 94 ad 07 	call	0xf5a	; 0xf5a <gitem_cut>
    _proc_run( proc );
    1f7a:	89 81       	ldd	r24, Y+1	; 0x01
    1f7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f7e:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <_proc_run>
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );// Освобождение спин-блокировки процесса
#endif //CONFIG_MP
}
    1f82:	0f 90       	pop	r0
    1f84:	0f 90       	pop	r0
    1f86:	0f 90       	pop	r0
    1f88:	0f 90       	pop	r0
    1f8a:	cf 91       	pop	r28
    1f8c:	df 91       	pop	r29
    1f8e:	08 95       	ret

00001f90 <sig_init_isr>:
*****************************************************************************************/
#include "../include/bugurt.h"
///========================================================================================
// Инициация
void sig_init_isr( sig_t * sig )
{
    1f90:	df 93       	push	r29
    1f92:	cf 93       	push	r28
    1f94:	00 d0       	rcall	.+0      	; 0x1f96 <sig_init_isr+0x6>
    1f96:	cd b7       	in	r28, 0x3d	; 61
    1f98:	de b7       	in	r29, 0x3e	; 62
    1f9a:	9a 83       	std	Y+2, r25	; 0x02
    1f9c:	89 83       	std	Y+1, r24	; 0x01
    {
        xlist_init( (xlist_t *)sig->sig_list + i );
        stat_init( (stat_t *)sig->sig_stat + i );
    }
#else
    xlist_init( (xlist_t *)sig );
    1f9e:	89 81       	ldd	r24, Y+1	; 0x01
    1fa0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa2:	0e 94 9e 10 	call	0x213c	; 0x213c <xlist_init>
#endif
}
    1fa6:	0f 90       	pop	r0
    1fa8:	0f 90       	pop	r0
    1faa:	cf 91       	pop	r28
    1fac:	df 91       	pop	r29
    1fae:	08 95       	ret

00001fb0 <sig_wait_stage_1_isr>:
///========================================================================================
// Это выполнится при постановке процесса в список ожидания сигнала
void sig_wait_stage_1_isr( sig_t * sig )
{
    1fb0:	df 93       	push	r29
    1fb2:	cf 93       	push	r28
    1fb4:	00 d0       	rcall	.+0      	; 0x1fb6 <sig_wait_stage_1_isr+0x6>
    1fb6:	00 d0       	rcall	.+0      	; 0x1fb8 <sig_wait_stage_1_isr+0x8>
    1fb8:	cd b7       	in	r28, 0x3d	; 61
    1fba:	de b7       	in	r29, 0x3e	; 62
    1fbc:	9c 83       	std	Y+4, r25	; 0x04
    1fbe:	8b 83       	std	Y+3, r24	; 0x03
#ifdef CONFIG_MP
    spin_lock( &sig->lock );
#endif // CONFIG_MP
    proc_t * proc = current_proc();
    1fc0:	0e 94 cc 00 	call	0x198	; 0x198 <current_proc>
    1fc4:	9a 83       	std	Y+2, r25	; 0x02
    1fc6:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    // Останавливаем процесс
    _proc_stop(proc);
    1fc8:	89 81       	ldd	r24, Y+1	; 0x01
    1fca:	9a 81       	ldd	r25, Y+2	; 0x02
    1fcc:	0e 94 75 0c 	call	0x18ea	; 0x18ea <_proc_stop>
    proc->flags |= PROC_FLG_WAIT;
    1fd0:	e9 81       	ldd	r30, Y+1	; 0x01
    1fd2:	fa 81       	ldd	r31, Y+2	; 0x02
    1fd4:	83 85       	ldd	r24, Z+11	; 0x0b
    1fd6:	80 61       	ori	r24, 0x10	; 16
    1fd8:	e9 81       	ldd	r30, Y+1	; 0x01
    1fda:	fa 81       	ldd	r31, Y+2	; 0x02
    1fdc:	83 87       	std	Z+11, r24	; 0x0b
        stat_inc( proc, (stat_t *)sig->sig_stat + sig_core );
    }
    spin_unlock( &proc->lock );
    spin_unlock( &sig->lock );
#else
    gitem_insert_group( (gitem_t *)proc, (xlist_t *)sig );
    1fde:	89 81       	ldd	r24, Y+1	; 0x01
    1fe0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fe2:	2b 81       	ldd	r18, Y+3	; 0x03
    1fe4:	3c 81       	ldd	r19, Y+4	; 0x04
    1fe6:	b9 01       	movw	r22, r18
    1fe8:	0e 94 ac 06 	call	0xd58	; 0xd58 <gitem_insert_group>
#endif //CONFIG_MP
}
    1fec:	0f 90       	pop	r0
    1fee:	0f 90       	pop	r0
    1ff0:	0f 90       	pop	r0
    1ff2:	0f 90       	pop	r0
    1ff4:	cf 91       	pop	r28
    1ff6:	df 91       	pop	r29
    1ff8:	08 95       	ret

00001ffa <sig_signal_isr>:
    enable_interrupts();
}
///========================================================================================
// Тоже самое что и предыдущие, олько для вызова из обработчиков прерываний и из критических секций
void sig_signal_isr( sig_t * sig )
{
    1ffa:	df 93       	push	r29
    1ffc:	cf 93       	push	r28
    1ffe:	00 d0       	rcall	.+0      	; 0x2000 <sig_signal_isr+0x6>
    2000:	00 d0       	rcall	.+0      	; 0x2002 <sig_signal_isr+0x8>
    2002:	cd b7       	in	r28, 0x3d	; 61
    2004:	de b7       	in	r29, 0x3e	; 62
    2006:	9c 83       	std	Y+4, r25	; 0x04
    2008:	8b 83       	std	Y+3, r24	; 0x03
    }
    resched(core);// Перепланировка
    spin_unlock( &proc->lock );// Освобождение блокировки процесса
    spin_unlock( &sig->lock );// Освобождение блокировки сигнала
#else
    if( ((xlist_t *)sig)->index == (index_t)0 )return;
    200a:	eb 81       	ldd	r30, Y+3	; 0x03
    200c:	fc 81       	ldd	r31, Y+4	; 0x04
    200e:	80 89       	ldd	r24, Z+16	; 0x10
    2010:	88 23       	and	r24, r24
    2012:	a9 f0       	breq	.+42     	; 0x203e <sig_signal_isr+0x44>
    proc_t * proc = (proc_t *)xlist_head( (xlist_t *)sig );
    2014:	8b 81       	ldd	r24, Y+3	; 0x03
    2016:	9c 81       	ldd	r25, Y+4	; 0x04
    2018:	0e 94 c8 10 	call	0x2190	; 0x2190 <xlist_head>
    201c:	9a 83       	std	Y+2, r25	; 0x02
    201e:	89 83       	std	Y+1, r24	; 0x01
    gitem_fast_cut( (gitem_t *)proc );
    2020:	89 81       	ldd	r24, Y+1	; 0x01
    2022:	9a 81       	ldd	r25, Y+2	; 0x02
    2024:	0e 94 27 07 	call	0xe4e	; 0xe4e <gitem_fast_cut>
    gitem_insert( (gitem_t *)proc, kernel.sched.ready );
    2028:	89 81       	ldd	r24, Y+1	; 0x01
    202a:	9a 81       	ldd	r25, Y+2	; 0x02
    202c:	20 91 a0 01 	lds	r18, 0x01A0
    2030:	30 91 a1 01 	lds	r19, 0x01A1
    2034:	b9 01       	movw	r22, r18
    2036:	0e 94 50 06 	call	0xca0	; 0xca0 <gitem_insert>
    resched();
    203a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
#endif //CONFIG_MP
}
    203e:	0f 90       	pop	r0
    2040:	0f 90       	pop	r0
    2042:	0f 90       	pop	r0
    2044:	0f 90       	pop	r0
    2046:	cf 91       	pop	r28
    2048:	df 91       	pop	r29
    204a:	08 95       	ret

0000204c <sig_broadcast_isr>:
///----------------------------------------------------------------------------------------
void sig_broadcast_isr( sig_t * sig )
{
    204c:	df 93       	push	r29
    204e:	cf 93       	push	r28
    2050:	00 d0       	rcall	.+0      	; 0x2052 <sig_broadcast_isr+0x6>
    2052:	cd b7       	in	r28, 0x3d	; 61
    2054:	de b7       	in	r29, 0x3e	; 62
    2056:	9a 83       	std	Y+2, r25	; 0x02
    2058:	89 83       	std	Y+1, r24	; 0x01

        resched(core);
    }
    spin_unlock( &sig->lock );
#else
    gitem_xlist_merge( (xlist_t *)sig, kernel.sched.ready );
    205a:	20 91 a0 01 	lds	r18, 0x01A0
    205e:	30 91 a1 01 	lds	r19, 0x01A1
    2062:	89 81       	ldd	r24, Y+1	; 0x01
    2064:	9a 81       	ldd	r25, Y+2	; 0x02
    2066:	b9 01       	movw	r22, r18
    2068:	0e 94 c4 07 	call	0xf88	; 0xf88 <gitem_xlist_merge>
    resched();
    206c:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
#endif //CONFIG_MP
}
    2070:	0f 90       	pop	r0
    2072:	0f 90       	pop	r0
    2074:	cf 91       	pop	r28
    2076:	df 91       	pop	r29
    2078:	08 95       	ret

0000207a <_clear_timer>:
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
///========================================================================================
void _clear_timer(timer_t * t)
{
    207a:	df 93       	push	r29
    207c:	cf 93       	push	r28
    207e:	00 d0       	rcall	.+0      	; 0x2080 <_clear_timer+0x6>
    2080:	cd b7       	in	r28, 0x3d	; 61
    2082:	de b7       	in	r29, 0x3e	; 62
    2084:	9a 83       	std	Y+2, r25	; 0x02
    2086:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    core_id_t current_core = _enter_crit_sec();
    spin_lock( &kernel.timer_lock );
#else
    enter_crit_sec();
    2088:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <enter_crit_sec>
#endif //CONFIG_MP
    *t = kernel.timer;
    208c:	80 91 f8 01 	lds	r24, 0x01F8
    2090:	90 91 f9 01 	lds	r25, 0x01F9
    2094:	e9 81       	ldd	r30, Y+1	; 0x01
    2096:	fa 81       	ldd	r31, Y+2	; 0x02
    2098:	91 83       	std	Z+1, r25	; 0x01
    209a:	80 83       	st	Z, r24
#ifdef CONFIG_MP
    spin_unlock( &kernel.timer_lock );
    _exit_crit_sec(current_core);
#else
    exit_crit_sec();
    209c:	0e 94 0c 06 	call	0xc18	; 0xc18 <exit_crit_sec>
#endif //CONFIG_MP
}
    20a0:	0f 90       	pop	r0
    20a2:	0f 90       	pop	r0
    20a4:	cf 91       	pop	r28
    20a6:	df 91       	pop	r29
    20a8:	08 95       	ret

000020aa <_timer>:
///----------------------------------------------------------------------------------------
timer_t _timer(timer_t t)
{
    20aa:	df 93       	push	r29
    20ac:	cf 93       	push	r28
    20ae:	00 d0       	rcall	.+0      	; 0x20b0 <_timer+0x6>
    20b0:	00 d0       	rcall	.+0      	; 0x20b2 <_timer+0x8>
    20b2:	cd b7       	in	r28, 0x3d	; 61
    20b4:	de b7       	in	r29, 0x3e	; 62
    20b6:	9c 83       	std	Y+4, r25	; 0x04
    20b8:	8b 83       	std	Y+3, r24	; 0x03
    timer_t ret;
#ifdef CONFIG_MP
    core_id_t current_core = _enter_crit_sec();
    spin_lock( &kernel.timer_lock );
#else
    enter_crit_sec();
    20ba:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <enter_crit_sec>
#endif //CONFIG_MP
    ret = kernel.timer - t;
    20be:	20 91 f8 01 	lds	r18, 0x01F8
    20c2:	30 91 f9 01 	lds	r19, 0x01F9
    20c6:	8b 81       	ldd	r24, Y+3	; 0x03
    20c8:	9c 81       	ldd	r25, Y+4	; 0x04
    20ca:	a9 01       	movw	r20, r18
    20cc:	48 1b       	sub	r20, r24
    20ce:	59 0b       	sbc	r21, r25
    20d0:	ca 01       	movw	r24, r20
    20d2:	9a 83       	std	Y+2, r25	; 0x02
    20d4:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_unlock( &kernel.timer_lock );
    _exit_crit_sec(current_core);
#else
    exit_crit_sec();
    20d6:	0e 94 0c 06 	call	0xc18	; 0xc18 <exit_crit_sec>
#endif //CONFIG_MP
    return ret;
    20da:	89 81       	ldd	r24, Y+1	; 0x01
    20dc:	9a 81       	ldd	r25, Y+2	; 0x02
}
    20de:	0f 90       	pop	r0
    20e0:	0f 90       	pop	r0
    20e2:	0f 90       	pop	r0
    20e4:	0f 90       	pop	r0
    20e6:	cf 91       	pop	r28
    20e8:	df 91       	pop	r29
    20ea:	08 95       	ret

000020ec <wait_time>:

///----------------------------------------------------------------------------------------
void wait_time(timer_t time)
{
    20ec:	df 93       	push	r29
    20ee:	cf 93       	push	r28
    20f0:	00 d0       	rcall	.+0      	; 0x20f2 <wait_time+0x6>
    20f2:	00 d0       	rcall	.+0      	; 0x20f4 <wait_time+0x8>
    20f4:	0f 92       	push	r0
    20f6:	cd b7       	in	r28, 0x3d	; 61
    20f8:	de b7       	in	r29, 0x3e	; 62
    20fa:	9d 83       	std	Y+5, r25	; 0x05
    20fc:	8c 83       	std	Y+4, r24	; 0x04
    timer_t tmr;
    bool_t roll=(bool_t)1;
    20fe:	81 e0       	ldi	r24, 0x01	; 1
    2100:	89 83       	std	Y+1, r24	; 0x01
    CLEAR_TIMER(tmr);
    2102:	ce 01       	movw	r24, r28
    2104:	02 96       	adiw	r24, 0x02	; 2
    2106:	0e 94 3d 10 	call	0x207a	; 0x207a <_clear_timer>
    210a:	0d c0       	rjmp	.+26     	; 0x2126 <wait_time+0x3a>
    while((bool_t)roll)
    {
        roll = (bool_t)( TIMER(tmr) < (timer_t)time );
    210c:	8a 81       	ldd	r24, Y+2	; 0x02
    210e:	9b 81       	ldd	r25, Y+3	; 0x03
    2110:	0e 94 55 10 	call	0x20aa	; 0x20aa <_timer>
    2114:	9c 01       	movw	r18, r24
    2116:	19 82       	std	Y+1, r1	; 0x01
    2118:	8c 81       	ldd	r24, Y+4	; 0x04
    211a:	9d 81       	ldd	r25, Y+5	; 0x05
    211c:	28 17       	cp	r18, r24
    211e:	39 07       	cpc	r19, r25
    2120:	10 f4       	brcc	.+4      	; 0x2126 <wait_time+0x3a>
    2122:	81 e0       	ldi	r24, 0x01	; 1
    2124:	89 83       	std	Y+1, r24	; 0x01
void wait_time(timer_t time)
{
    timer_t tmr;
    bool_t roll=(bool_t)1;
    CLEAR_TIMER(tmr);
    while((bool_t)roll)
    2126:	89 81       	ldd	r24, Y+1	; 0x01
    2128:	88 23       	and	r24, r24
    212a:	81 f7       	brne	.-32     	; 0x210c <wait_time+0x20>
    {
        roll = (bool_t)( TIMER(tmr) < (timer_t)time );
    }
}
    212c:	0f 90       	pop	r0
    212e:	0f 90       	pop	r0
    2130:	0f 90       	pop	r0
    2132:	0f 90       	pop	r0
    2134:	0f 90       	pop	r0
    2136:	cf 91       	pop	r28
    2138:	df 91       	pop	r29
    213a:	08 95       	ret

0000213c <xlist_init>:
**********************************************/
//Инициация
void xlist_init(
    xlist_t * xlist
)
{
    213c:	df 93       	push	r29
    213e:	cf 93       	push	r28
    2140:	00 d0       	rcall	.+0      	; 0x2142 <xlist_init+0x6>
    2142:	00 d0       	rcall	.+0      	; 0x2144 <xlist_init+0x8>
    2144:	cd b7       	in	r28, 0x3d	; 61
    2146:	de b7       	in	r29, 0x3e	; 62
    2148:	9c 83       	std	Y+4, r25	; 0x04
    214a:	8b 83       	std	Y+3, r24	; 0x03
    count_t i;
    //список пуст
    xlist->index = (index_t)0;
    214c:	eb 81       	ldd	r30, Y+3	; 0x03
    214e:	fc 81       	ldd	r31, Y+4	; 0x04
    2150:	10 8a       	std	Z+16, r1	; 0x10
    //обнуляем указатели
    for( i = 0; i < BITS_IN_INDEX_T; i++ )xlist->item[i] = (item_t *)0;
    2152:	1a 82       	std	Y+2, r1	; 0x02
    2154:	19 82       	std	Y+1, r1	; 0x01
    2156:	10 c0       	rjmp	.+32     	; 0x2178 <xlist_init+0x3c>
    2158:	89 81       	ldd	r24, Y+1	; 0x01
    215a:	9a 81       	ldd	r25, Y+2	; 0x02
    215c:	2b 81       	ldd	r18, Y+3	; 0x03
    215e:	3c 81       	ldd	r19, Y+4	; 0x04
    2160:	88 0f       	add	r24, r24
    2162:	99 1f       	adc	r25, r25
    2164:	f9 01       	movw	r30, r18
    2166:	e8 0f       	add	r30, r24
    2168:	f9 1f       	adc	r31, r25
    216a:	11 82       	std	Z+1, r1	; 0x01
    216c:	10 82       	st	Z, r1
    216e:	89 81       	ldd	r24, Y+1	; 0x01
    2170:	9a 81       	ldd	r25, Y+2	; 0x02
    2172:	01 96       	adiw	r24, 0x01	; 1
    2174:	9a 83       	std	Y+2, r25	; 0x02
    2176:	89 83       	std	Y+1, r24	; 0x01
    2178:	89 81       	ldd	r24, Y+1	; 0x01
    217a:	9a 81       	ldd	r25, Y+2	; 0x02
    217c:	88 30       	cpi	r24, 0x08	; 8
    217e:	91 05       	cpc	r25, r1
    2180:	58 f3       	brcs	.-42     	; 0x2158 <xlist_init+0x1c>
}
    2182:	0f 90       	pop	r0
    2184:	0f 90       	pop	r0
    2186:	0f 90       	pop	r0
    2188:	0f 90       	pop	r0
    218a:	cf 91       	pop	r28
    218c:	df 91       	pop	r29
    218e:	08 95       	ret

00002190 <xlist_head>:
//===========================================================================
//Поиск головы списка
item_t * xlist_head(xlist_t * xlist)
{
    2190:	df 93       	push	r29
    2192:	cf 93       	push	r28
    2194:	00 d0       	rcall	.+0      	; 0x2196 <xlist_head+0x6>
    2196:	00 d0       	rcall	.+0      	; 0x2198 <xlist_head+0x8>
    2198:	0f 92       	push	r0
    219a:	cd b7       	in	r28, 0x3d	; 61
    219c:	de b7       	in	r29, 0x3e	; 62
    219e:	9d 83       	std	Y+5, r25	; 0x05
    21a0:	8c 83       	std	Y+4, r24	; 0x04
    item_t * ret_val = (item_t *)0;
    21a2:	1b 82       	std	Y+3, r1	; 0x03
    21a4:	1a 82       	std	Y+2, r1	; 0x02
    index_t index = xlist->index;
    21a6:	ec 81       	ldd	r30, Y+4	; 0x04
    21a8:	fd 81       	ldd	r31, Y+5	; 0x05
    21aa:	80 89       	ldd	r24, Z+16	; 0x10
    21ac:	89 83       	std	Y+1, r24	; 0x01

    if( index != (index_t)0 )
    21ae:	89 81       	ldd	r24, Y+1	; 0x01
    21b0:	88 23       	and	r24, r24
    21b2:	81 f0       	breq	.+32     	; 0x21d4 <xlist_head+0x44>
    {
        ret_val = xlist->item[ index_search( index ) ];
    21b4:	89 81       	ldd	r24, Y+1	; 0x01
    21b6:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <index_search>
    21ba:	88 2f       	mov	r24, r24
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	2c 81       	ldd	r18, Y+4	; 0x04
    21c0:	3d 81       	ldd	r19, Y+5	; 0x05
    21c2:	88 0f       	add	r24, r24
    21c4:	99 1f       	adc	r25, r25
    21c6:	f9 01       	movw	r30, r18
    21c8:	e8 0f       	add	r30, r24
    21ca:	f9 1f       	adc	r31, r25
    21cc:	80 81       	ld	r24, Z
    21ce:	91 81       	ldd	r25, Z+1	; 0x01
    21d0:	9b 83       	std	Y+3, r25	; 0x03
    21d2:	8a 83       	std	Y+2, r24	; 0x02
    }
    return ret_val;
    21d4:	8a 81       	ldd	r24, Y+2	; 0x02
    21d6:	9b 81       	ldd	r25, Y+3	; 0x03
}
    21d8:	0f 90       	pop	r0
    21da:	0f 90       	pop	r0
    21dc:	0f 90       	pop	r0
    21de:	0f 90       	pop	r0
    21e0:	0f 90       	pop	r0
    21e2:	cf 91       	pop	r28
    21e4:	df 91       	pop	r29
    21e6:	08 95       	ret

000021e8 <xlist_switch>:

//===========================================================================
// переключение указателя в массиве на следующий элемент, пригодится в планировщике
void xlist_switch(xlist_t * xlist, prio_t prio)
{
    21e8:	df 93       	push	r29
    21ea:	cf 93       	push	r28
    21ec:	00 d0       	rcall	.+0      	; 0x21ee <xlist_switch+0x6>
    21ee:	00 d0       	rcall	.+0      	; 0x21f0 <xlist_switch+0x8>
    21f0:	0f 92       	push	r0
    21f2:	cd b7       	in	r28, 0x3d	; 61
    21f4:	de b7       	in	r29, 0x3e	; 62
    21f6:	9c 83       	std	Y+4, r25	; 0x04
    21f8:	8b 83       	std	Y+3, r24	; 0x03
    21fa:	6d 83       	std	Y+5, r22	; 0x05
    item_t ** current = xlist->item + prio;
    21fc:	2b 81       	ldd	r18, Y+3	; 0x03
    21fe:	3c 81       	ldd	r19, Y+4	; 0x04
    2200:	8d 81       	ldd	r24, Y+5	; 0x05
    2202:	88 2f       	mov	r24, r24
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	88 0f       	add	r24, r24
    2208:	99 1f       	adc	r25, r25
    220a:	82 0f       	add	r24, r18
    220c:	93 1f       	adc	r25, r19
    220e:	9a 83       	std	Y+2, r25	; 0x02
    2210:	89 83       	std	Y+1, r24	; 0x01
    *current = (*current)->next;
    2212:	e9 81       	ldd	r30, Y+1	; 0x01
    2214:	fa 81       	ldd	r31, Y+2	; 0x02
    2216:	01 90       	ld	r0, Z+
    2218:	f0 81       	ld	r31, Z
    221a:	e0 2d       	mov	r30, r0
    221c:	80 81       	ld	r24, Z
    221e:	91 81       	ldd	r25, Z+1	; 0x01
    2220:	e9 81       	ldd	r30, Y+1	; 0x01
    2222:	fa 81       	ldd	r31, Y+2	; 0x02
    2224:	91 83       	std	Z+1, r25	; 0x01
    2226:	80 83       	st	Z, r24
    //*current = (item_t *)*(item_t **)*(item_t ***)current;
}
    2228:	0f 90       	pop	r0
    222a:	0f 90       	pop	r0
    222c:	0f 90       	pop	r0
    222e:	0f 90       	pop	r0
    2230:	0f 90       	pop	r0
    2232:	cf 91       	pop	r28
    2234:	df 91       	pop	r29
    2236:	08 95       	ret

00002238 <raise_syscall_interrupt>:
/*
 */
#include <bugurt.h>
void raise_syscall_interrupt(void)
{
    2238:	df 93       	push	r29
    223a:	cf 93       	push	r28
    223c:	cd b7       	in	r28, 0x3d	; 61
    223e:	de b7       	in	r29, 0x3e	; 62
    R2_on();
    2240:	ab e2       	ldi	r26, 0x2B	; 43
    2242:	b0 e0       	ldi	r27, 0x00	; 0
    2244:	eb e2       	ldi	r30, 0x2B	; 43
    2246:	f0 e0       	ldi	r31, 0x00	; 0
    2248:	80 81       	ld	r24, Z
    224a:	84 60       	ori	r24, 0x04	; 4
    224c:	8c 93       	st	X, r24
    G2_off();
    224e:	ab e2       	ldi	r26, 0x2B	; 43
    2250:	b0 e0       	ldi	r27, 0x00	; 0
    2252:	eb e2       	ldi	r30, 0x2B	; 43
    2254:	f0 e0       	ldi	r31, 0x00	; 0
    2256:	80 81       	ld	r24, Z
    2258:	87 7f       	andi	r24, 0xF7	; 247
    225a:	8c 93       	st	X, r24
    R2_off();
    225c:	ab e2       	ldi	r26, 0x2B	; 43
    225e:	b0 e0       	ldi	r27, 0x00	; 0
    2260:	eb e2       	ldi	r30, 0x2B	; 43
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	80 81       	ld	r24, Z
    2266:	8b 7f       	andi	r24, 0xFB	; 251
    2268:	8c 93       	st	X, r24
    G2_on();
    226a:	ab e2       	ldi	r26, 0x2B	; 43
    226c:	b0 e0       	ldi	r27, 0x00	; 0
    226e:	eb e2       	ldi	r30, 0x2B	; 43
    2270:	f0 e0       	ldi	r31, 0x00	; 0
    2272:	80 81       	ld	r24, Z
    2274:	88 60       	ori	r24, 0x08	; 8
    2276:	8c 93       	st	X, r24
}
    2278:	cf 91       	pop	r28
    227a:	df 91       	pop	r29
    227c:	08 95       	ret

0000227e <start_scheduler>:

void start_scheduler( void ){
    227e:	df 93       	push	r29
    2280:	cf 93       	push	r28
    2282:	cd b7       	in	r28, 0x3d	; 61
    2284:	de b7       	in	r29, 0x3e	; 62
    TIMSK2 |= 0x02;
    2286:	a0 e7       	ldi	r26, 0x70	; 112
    2288:	b0 e0       	ldi	r27, 0x00	; 0
    228a:	e0 e7       	ldi	r30, 0x70	; 112
    228c:	f0 e0       	ldi	r31, 0x00	; 0
    228e:	80 81       	ld	r24, Z
    2290:	82 60       	ori	r24, 0x02	; 2
    2292:	8c 93       	st	X, r24
    EIMSK |= 0x02;
    2294:	ad e3       	ldi	r26, 0x3D	; 61
    2296:	b0 e0       	ldi	r27, 0x00	; 0
    2298:	ed e3       	ldi	r30, 0x3D	; 61
    229a:	f0 e0       	ldi	r31, 0x00	; 0
    229c:	80 81       	ld	r24, Z
    229e:	82 60       	ori	r24, 0x02	; 2
    22a0:	8c 93       	st	X, r24
    EIFR |= 0x02;
    22a2:	ac e3       	ldi	r26, 0x3C	; 60
    22a4:	b0 e0       	ldi	r27, 0x00	; 0
    22a6:	ec e3       	ldi	r30, 0x3C	; 60
    22a8:	f0 e0       	ldi	r31, 0x00	; 0
    22aa:	80 81       	ld	r24, Z
    22ac:	82 60       	ori	r24, 0x02	; 2
    22ae:	8c 93       	st	X, r24
}
    22b0:	cf 91       	pop	r28
    22b2:	df 91       	pop	r29
    22b4:	08 95       	ret

000022b6 <blink_1>:
    TIMSK2 &= ~0x02;
    EIMSK &= ~0x02;
}

///----------------------------------------------------------------------------------------
void blink_1(void * t) {PORTB ^= 0x10;}
    22b6:	df 93       	push	r29
    22b8:	cf 93       	push	r28
    22ba:	00 d0       	rcall	.+0      	; 0x22bc <blink_1+0x6>
    22bc:	cd b7       	in	r28, 0x3d	; 61
    22be:	de b7       	in	r29, 0x3e	; 62
    22c0:	9a 83       	std	Y+2, r25	; 0x02
    22c2:	89 83       	std	Y+1, r24	; 0x01
    22c4:	a5 e2       	ldi	r26, 0x25	; 37
    22c6:	b0 e0       	ldi	r27, 0x00	; 0
    22c8:	e5 e2       	ldi	r30, 0x25	; 37
    22ca:	f0 e0       	ldi	r31, 0x00	; 0
    22cc:	90 81       	ld	r25, Z
    22ce:	80 e1       	ldi	r24, 0x10	; 16
    22d0:	89 27       	eor	r24, r25
    22d2:	8c 93       	st	X, r24
    22d4:	0f 90       	pop	r0
    22d6:	0f 90       	pop	r0
    22d8:	cf 91       	pop	r28
    22da:	df 91       	pop	r29
    22dc:	08 95       	ret

000022de <blink_2>:
void blink_2(void * t) {PORTB ^= 0x08;}
    22de:	df 93       	push	r29
    22e0:	cf 93       	push	r28
    22e2:	00 d0       	rcall	.+0      	; 0x22e4 <blink_2+0x6>
    22e4:	cd b7       	in	r28, 0x3d	; 61
    22e6:	de b7       	in	r29, 0x3e	; 62
    22e8:	9a 83       	std	Y+2, r25	; 0x02
    22ea:	89 83       	std	Y+1, r24	; 0x01
    22ec:	a5 e2       	ldi	r26, 0x25	; 37
    22ee:	b0 e0       	ldi	r27, 0x00	; 0
    22f0:	e5 e2       	ldi	r30, 0x25	; 37
    22f2:	f0 e0       	ldi	r31, 0x00	; 0
    22f4:	90 81       	ld	r25, Z
    22f6:	88 e0       	ldi	r24, 0x08	; 8
    22f8:	89 27       	eor	r24, r25
    22fa:	8c 93       	st	X, r24
    22fc:	0f 90       	pop	r0
    22fe:	0f 90       	pop	r0
    2300:	cf 91       	pop	r28
    2302:	df 91       	pop	r29
    2304:	08 95       	ret

00002306 <blink_3>:
void blink_3(void * t) {PORTB ^= 0x04;}
    2306:	df 93       	push	r29
    2308:	cf 93       	push	r28
    230a:	00 d0       	rcall	.+0      	; 0x230c <blink_3+0x6>
    230c:	cd b7       	in	r28, 0x3d	; 61
    230e:	de b7       	in	r29, 0x3e	; 62
    2310:	9a 83       	std	Y+2, r25	; 0x02
    2312:	89 83       	std	Y+1, r24	; 0x01
    2314:	a5 e2       	ldi	r26, 0x25	; 37
    2316:	b0 e0       	ldi	r27, 0x00	; 0
    2318:	e5 e2       	ldi	r30, 0x25	; 37
    231a:	f0 e0       	ldi	r31, 0x00	; 0
    231c:	90 81       	ld	r25, Z
    231e:	84 e0       	ldi	r24, 0x04	; 4
    2320:	89 27       	eor	r24, r25
    2322:	8c 93       	st	X, r24
    2324:	0f 90       	pop	r0
    2326:	0f 90       	pop	r0
    2328:	cf 91       	pop	r28
    232a:	df 91       	pop	r29
    232c:	08 95       	ret

0000232e <blink_4>:
void blink_4(void * t) {PORTB ^= 0x02;}
    232e:	df 93       	push	r29
    2330:	cf 93       	push	r28
    2332:	00 d0       	rcall	.+0      	; 0x2334 <blink_4+0x6>
    2334:	cd b7       	in	r28, 0x3d	; 61
    2336:	de b7       	in	r29, 0x3e	; 62
    2338:	9a 83       	std	Y+2, r25	; 0x02
    233a:	89 83       	std	Y+1, r24	; 0x01
    233c:	a5 e2       	ldi	r26, 0x25	; 37
    233e:	b0 e0       	ldi	r27, 0x00	; 0
    2340:	e5 e2       	ldi	r30, 0x25	; 37
    2342:	f0 e0       	ldi	r31, 0x00	; 0
    2344:	90 81       	ld	r25, Z
    2346:	82 e0       	ldi	r24, 0x02	; 2
    2348:	89 27       	eor	r24, r25
    234a:	8c 93       	st	X, r24
    234c:	0f 90       	pop	r0
    234e:	0f 90       	pop	r0
    2350:	cf 91       	pop	r28
    2352:	df 91       	pop	r29
    2354:	08 95       	ret

00002356 <blink_12>:
void blink_7(void * t) {PORTC ^= 0x10;}
void blink_8(void * t) {PORTC ^= 0x08;}
void blink_9(void * t) {PORTC ^= 0x04;}
void blink_10(void * t) {PORTC ^= 0x02;}
void blink_11(void * t) {PORTC ^= 0x01;}
void blink_12(void * t) {
    2356:	df 93       	push	r29
    2358:	cf 93       	push	r28
    235a:	00 d0       	rcall	.+0      	; 0x235c <blink_12+0x6>
    235c:	cd b7       	in	r28, 0x3d	; 61
    235e:	de b7       	in	r29, 0x3e	; 62
    2360:	9a 83       	std	Y+2, r25	; 0x02
    2362:	89 83       	std	Y+1, r24	; 0x01
    PORTB ^= 0x20;
    2364:	a5 e2       	ldi	r26, 0x25	; 37
    2366:	b0 e0       	ldi	r27, 0x00	; 0
    2368:	e5 e2       	ldi	r30, 0x25	; 37
    236a:	f0 e0       	ldi	r31, 0x00	; 0
    236c:	90 81       	ld	r25, Z
    236e:	80 e2       	ldi	r24, 0x20	; 32
    2370:	89 27       	eor	r24, r25
    2372:	8c 93       	st	X, r24
    blink_G3();
    2374:	ab e2       	ldi	r26, 0x2B	; 43
    2376:	b0 e0       	ldi	r27, 0x00	; 0
    2378:	eb e2       	ldi	r30, 0x2B	; 43
    237a:	f0 e0       	ldi	r31, 0x00	; 0
    237c:	90 81       	ld	r25, Z
    237e:	80 e4       	ldi	r24, 0x40	; 64
    2380:	89 27       	eor	r24, r25
    2382:	8c 93       	st	X, r24
    blink_R3();
    2384:	ab e2       	ldi	r26, 0x2B	; 43
    2386:	b0 e0       	ldi	r27, 0x00	; 0
    2388:	eb e2       	ldi	r30, 0x2B	; 43
    238a:	f0 e0       	ldi	r31, 0x00	; 0
    238c:	90 81       	ld	r25, Z
    238e:	80 e2       	ldi	r24, 0x20	; 32
    2390:	89 27       	eor	r24, r25
    2392:	8c 93       	st	X, r24
    }
    2394:	0f 90       	pop	r0
    2396:	0f 90       	pop	r0
    2398:	cf 91       	pop	r28
    239a:	df 91       	pop	r29
    239c:	08 95       	ret

0000239e <main0>:
stack_t stack[4][128];

mutex_t mut;

void main0(void * t)
{
    239e:	df 93       	push	r29
    23a0:	cf 93       	push	r28
    23a2:	00 d0       	rcall	.+0      	; 0x23a4 <main0+0x6>
    23a4:	cd b7       	in	r28, 0x3d	; 61
    23a6:	de b7       	in	r29, 0x3e	; 62
    23a8:	9a 83       	std	Y+2, r25	; 0x02
    23aa:	89 83       	std	Y+1, r24	; 0x01
    while(1)
    {
        mutex_lock(&mut);
    23ac:	82 eb       	ldi	r24, 0xB2	; 178
    23ae:	94 e0       	ldi	r25, 0x04	; 4
    23b0:	0e 94 18 04 	call	0x830	; 0x830 <mutex_lock>
        wait_time(500);
    23b4:	84 ef       	ldi	r24, 0xF4	; 244
    23b6:	91 e0       	ldi	r25, 0x01	; 1
    23b8:	0e 94 76 10 	call	0x20ec	; 0x20ec <wait_time>
        mutex_unlock(&mut);
    23bc:	82 eb       	ldi	r24, 0xB2	; 178
    23be:	94 e0       	ldi	r25, 0x04	; 4
    23c0:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <mutex_unlock>
    23c4:	f3 cf       	rjmp	.-26     	; 0x23ac <main0+0xe>

000023c6 <main1>:
    }
}
void main1(void * t)
{
    23c6:	df 93       	push	r29
    23c8:	cf 93       	push	r28
    23ca:	00 d0       	rcall	.+0      	; 0x23cc <main1+0x6>
    23cc:	0f 92       	push	r0
    23ce:	cd b7       	in	r28, 0x3d	; 61
    23d0:	de b7       	in	r29, 0x3e	; 62
    23d2:	9b 83       	std	Y+3, r25	; 0x03
    23d4:	8a 83       	std	Y+2, r24	; 0x02
    while(1)
    {
        bool_t test = mutex_try_lock( &mut );
    23d6:	82 eb       	ldi	r24, 0xB2	; 178
    23d8:	94 e0       	ldi	r25, 0x04	; 4
    23da:	0e 94 4f 04 	call	0x89e	; 0x89e <mutex_try_lock>
    23de:	89 83       	std	Y+1, r24	; 0x01
        if(test)
    23e0:	89 81       	ldd	r24, Y+1	; 0x01
    23e2:	88 23       	and	r24, r24
    23e4:	c1 f3       	breq	.-16     	; 0x23d6 <main1+0x10>
        {
            wait_time(500);
    23e6:	84 ef       	ldi	r24, 0xF4	; 244
    23e8:	91 e0       	ldi	r25, 0x01	; 1
    23ea:	0e 94 76 10 	call	0x20ec	; 0x20ec <wait_time>
            mutex_unlock( &mut );
    23ee:	82 eb       	ldi	r24, 0xB2	; 178
    23f0:	94 e0       	ldi	r25, 0x04	; 4
    23f2:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <mutex_unlock>
    23f6:	ef cf       	rjmp	.-34     	; 0x23d6 <main1+0x10>

000023f8 <main2>:
        }

    }
}
void main2(void * t)
{
    23f8:	df 93       	push	r29
    23fa:	cf 93       	push	r28
    23fc:	00 d0       	rcall	.+0      	; 0x23fe <main2+0x6>
    23fe:	cd b7       	in	r28, 0x3d	; 61
    2400:	de b7       	in	r29, 0x3e	; 62
    2402:	9a 83       	std	Y+2, r25	; 0x02
    2404:	89 83       	std	Y+1, r24	; 0x01
    while(1)
    {
        wait_time(500);
    2406:	84 ef       	ldi	r24, 0xF4	; 244
    2408:	91 e0       	ldi	r25, 0x01	; 1
    240a:	0e 94 76 10 	call	0x20ec	; 0x20ec <wait_time>
    240e:	fb cf       	rjmp	.-10     	; 0x2406 <main2+0xe>

00002410 <main3>:
    2410:	df 93       	push	r29
    2412:	cf 93       	push	r28
    2414:	00 d0       	rcall	.+0      	; 0x2416 <main3+0x6>
    2416:	cd b7       	in	r28, 0x3d	; 61
    2418:	de b7       	in	r29, 0x3e	; 62
    241a:	9a 83       	std	Y+2, r25	; 0x02
    241c:	89 83       	std	Y+1, r24	; 0x01
    241e:	82 eb       	ldi	r24, 0xB2	; 178
    2420:	94 e0       	ldi	r25, 0x04	; 4
    2422:	0e 94 18 04 	call	0x830	; 0x830 <mutex_lock>
    2426:	83 ef       	ldi	r24, 0xF3	; 243
    2428:	91 e0       	ldi	r25, 0x01	; 1
    242a:	0e 94 76 10 	call	0x20ec	; 0x20ec <wait_time>
    242e:	82 eb       	ldi	r24, 0xB2	; 178
    2430:	94 e0       	ldi	r25, 0x04	; 4
    2432:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <mutex_unlock>
    2436:	85 ef       	ldi	r24, 0xF5	; 245
    2438:	91 e0       	ldi	r25, 0x01	; 1
    243a:	0e 94 76 10 	call	0x20ec	; 0x20ec <wait_time>
    243e:	ef cf       	rjmp	.-34     	; 0x241e <main3+0xe>

00002440 <idle_main>:
        wait_time(501);
    }
}

void idle_main(void *arg)
{
    2440:	df 93       	push	r29
    2442:	cf 93       	push	r28
    2444:	00 d0       	rcall	.+0      	; 0x2446 <idle_main+0x6>
    2446:	cd b7       	in	r28, 0x3d	; 61
    2448:	de b7       	in	r29, 0x3e	; 62
    244a:	9a 83       	std	Y+2, r25	; 0x02
    244c:	89 83       	std	Y+1, r24	; 0x01
    while(1)
    {
         wait_time(500);
    244e:	84 ef       	ldi	r24, 0xF4	; 244
    2450:	91 e0       	ldi	r25, 0x01	; 1
    2452:	0e 94 76 10 	call	0x20ec	; 0x20ec <wait_time>
    2456:	fb cf       	rjmp	.-10     	; 0x244e <idle_main+0xe>

00002458 <main>:
    }
}

int main(void)
{
    2458:	8f 92       	push	r8
    245a:	af 92       	push	r10
    245c:	bf 92       	push	r11
    245e:	cf 92       	push	r12
    2460:	ef 92       	push	r14
    2462:	ff 92       	push	r15
    2464:	0f 93       	push	r16
    2466:	1f 93       	push	r17
    2468:	df 93       	push	r29
    246a:	cf 93       	push	r28
    246c:	cd b7       	in	r28, 0x3d	; 61
    246e:	de b7       	in	r29, 0x3e	; 62
    init_bugurt();
    2470:	0e 94 57 01 	call	0x2ae	; 0x2ae <init_bugurt>

    TCCR2A = 0x02;//
    2474:	e0 eb       	ldi	r30, 0xB0	; 176
    2476:	f0 e0       	ldi	r31, 0x00	; 0
    2478:	82 e0       	ldi	r24, 0x02	; 2
    247a:	80 83       	st	Z, r24
    TCCR2B = 0x05;// prescaler=128
    247c:	e1 eb       	ldi	r30, 0xB1	; 177
    247e:	f0 e0       	ldi	r31, 0x00	; 0
    2480:	85 e0       	ldi	r24, 0x05	; 5
    2482:	80 83       	st	Z, r24
    OCR2A  = 124;
    2484:	e3 eb       	ldi	r30, 0xB3	; 179
    2486:	f0 e0       	ldi	r31, 0x00	; 0
    2488:	8c e7       	ldi	r24, 0x7C	; 124
    248a:	80 83       	st	Z, r24
    OCR2B  = 0x00;
    248c:	e4 eb       	ldi	r30, 0xB4	; 180
    248e:	f0 e0       	ldi	r31, 0x00	; 0
    2490:	10 82       	st	Z, r1
    TIMSK2 = 0x00; // shceduler not started
    2492:	e0 e7       	ldi	r30, 0x70	; 112
    2494:	f0 e0       	ldi	r31, 0x00	; 0
    2496:	10 82       	st	Z, r1
    TIFR2  = 0x00;
    2498:	e7 e3       	ldi	r30, 0x37	; 55
    249a:	f0 e0       	ldi	r31, 0x00	; 0
    249c:	10 82       	st	Z, r1

    EICRA = 0x08; //falling edge
    249e:	e9 e6       	ldi	r30, 0x69	; 105
    24a0:	f0 e0       	ldi	r31, 0x00	; 0
    24a2:	88 e0       	ldi	r24, 0x08	; 8
    24a4:	80 83       	st	Z, r24
    EIMSK = 0x00; //resched generates int1, mask 0x02
    24a6:	ed e3       	ldi	r30, 0x3D	; 61
    24a8:	f0 e0       	ldi	r31, 0x00	; 0
    24aa:	10 82       	st	Z, r1

    DDRB = 0x3F;
    24ac:	e4 e2       	ldi	r30, 0x24	; 36
    24ae:	f0 e0       	ldi	r31, 0x00	; 0
    24b0:	8f e3       	ldi	r24, 0x3F	; 63
    24b2:	80 83       	st	Z, r24
    PORTB = 0x00;
    24b4:	e5 e2       	ldi	r30, 0x25	; 37
    24b6:	f0 e0       	ldi	r31, 0x00	; 0
    24b8:	10 82       	st	Z, r1
    DDRC = 0x3F;
    24ba:	e7 e2       	ldi	r30, 0x27	; 39
    24bc:	f0 e0       	ldi	r31, 0x00	; 0
    24be:	8f e3       	ldi	r24, 0x3F	; 63
    24c0:	80 83       	st	Z, r24
    PORTC = 0x00;
    24c2:	e8 e2       	ldi	r30, 0x28	; 40
    24c4:	f0 e0       	ldi	r31, 0x00	; 0
    24c6:	10 82       	st	Z, r1
    DDRD = 0xFE;
    24c8:	ea e2       	ldi	r30, 0x2A	; 42
    24ca:	f0 e0       	ldi	r31, 0x00	; 0
    24cc:	8e ef       	ldi	r24, 0xFE	; 254
    24ce:	80 83       	st	Z, r24
    PORTD = 0x00;
    24d0:	eb e2       	ldi	r30, 0x2B	; 43
    24d2:	f0 e0       	ldi	r31, 0x00	; 0
    24d4:	10 82       	st	Z, r1

    G1_on();
    24d6:	ab e2       	ldi	r26, 0x2B	; 43
    24d8:	b0 e0       	ldi	r27, 0x00	; 0
    24da:	eb e2       	ldi	r30, 0x2B	; 43
    24dc:	f0 e0       	ldi	r31, 0x00	; 0
    24de:	80 81       	ld	r24, Z
    24e0:	80 61       	ori	r24, 0x10	; 16
    24e2:	8c 93       	st	X, r24
    G2_on();
    24e4:	ab e2       	ldi	r26, 0x2B	; 43
    24e6:	b0 e0       	ldi	r27, 0x00	; 0
    24e8:	eb e2       	ldi	r30, 0x2B	; 43
    24ea:	f0 e0       	ldi	r31, 0x00	; 0
    24ec:	80 81       	ld	r24, Z
    24ee:	88 60       	ori	r24, 0x08	; 8
    24f0:	8c 93       	st	X, r24
    R3_on();
    24f2:	ab e2       	ldi	r26, 0x2B	; 43
    24f4:	b0 e0       	ldi	r27, 0x00	; 0
    24f6:	eb e2       	ldi	r30, 0x2B	; 43
    24f8:	f0 e0       	ldi	r31, 0x00	; 0
    24fa:	80 81       	ld	r24, Z
    24fc:	80 62       	ori	r24, 0x20	; 32
    24fe:	8c 93       	st	X, r24

    proc_init_isr(&proc[0], main0, blink_1, blink_1, 0, &stack[0][127], 1, 2, 0);
    2500:	82 eb       	ldi	r24, 0xB2	; 178
    2502:	92 e0       	ldi	r25, 0x02	; 2
    2504:	dc 01       	movw	r26, r24
    2506:	a1 58       	subi	r26, 0x81	; 129
    2508:	bf 4f       	sbci	r27, 0xFF	; 255
    250a:	8a ef       	ldi	r24, 0xFA	; 250
    250c:	91 e0       	ldi	r25, 0x01	; 1
    250e:	2f ec       	ldi	r18, 0xCF	; 207
    2510:	31 e1       	ldi	r19, 0x11	; 17
    2512:	4b e5       	ldi	r20, 0x5B	; 91
    2514:	51 e1       	ldi	r21, 0x11	; 17
    2516:	eb e5       	ldi	r30, 0x5B	; 91
    2518:	f1 e1       	ldi	r31, 0x11	; 17
    251a:	b9 01       	movw	r22, r18
    251c:	9f 01       	movw	r18, r30
    251e:	00 e0       	ldi	r16, 0x00	; 0
    2520:	10 e0       	ldi	r17, 0x00	; 0
    2522:	7d 01       	movw	r14, r26
    2524:	cc 24       	eor	r12, r12
    2526:	c3 94       	inc	r12
    2528:	aa 24       	eor	r10, r10
    252a:	bb 24       	eor	r11, r11
    252c:	68 94       	set
    252e:	a1 f8       	bld	r10, 1
    2530:	88 24       	eor	r8, r8
    2532:	0e 94 66 0b 	call	0x16cc	; 0x16cc <proc_init_isr>
    proc_init_isr(&proc[1], main1, blink_2, blink_2, 0, &stack[1][127], 2, 3, 0);
    2536:	82 eb       	ldi	r24, 0xB2	; 178
    2538:	92 e0       	ldi	r25, 0x02	; 2
    253a:	dc 01       	movw	r26, r24
    253c:	a1 50       	subi	r26, 0x01	; 1
    253e:	bf 4f       	sbci	r27, 0xFF	; 255
    2540:	88 e2       	ldi	r24, 0x28	; 40
    2542:	92 e0       	ldi	r25, 0x02	; 2
    2544:	23 ee       	ldi	r18, 0xE3	; 227
    2546:	31 e1       	ldi	r19, 0x11	; 17
    2548:	4f e6       	ldi	r20, 0x6F	; 111
    254a:	51 e1       	ldi	r21, 0x11	; 17
    254c:	ef e6       	ldi	r30, 0x6F	; 111
    254e:	f1 e1       	ldi	r31, 0x11	; 17
    2550:	b9 01       	movw	r22, r18
    2552:	9f 01       	movw	r18, r30
    2554:	00 e0       	ldi	r16, 0x00	; 0
    2556:	10 e0       	ldi	r17, 0x00	; 0
    2558:	7d 01       	movw	r14, r26
    255a:	cc 24       	eor	r12, r12
    255c:	68 94       	set
    255e:	c1 f8       	bld	r12, 1
    2560:	0f 2e       	mov	r0, r31
    2562:	f3 e0       	ldi	r31, 0x03	; 3
    2564:	af 2e       	mov	r10, r31
    2566:	bb 24       	eor	r11, r11
    2568:	f0 2d       	mov	r31, r0
    256a:	88 24       	eor	r8, r8
    256c:	0e 94 66 0b 	call	0x16cc	; 0x16cc <proc_init_isr>
    proc_init_isr(&proc[2], main2, blink_3, blink_3, 0, &stack[2][127], 2, 4, 0);// Типа реального времени
    2570:	82 eb       	ldi	r24, 0xB2	; 178
    2572:	92 e0       	ldi	r25, 0x02	; 2
    2574:	dc 01       	movw	r26, r24
    2576:	a1 58       	subi	r26, 0x81	; 129
    2578:	be 4f       	sbci	r27, 0xFE	; 254
    257a:	86 e5       	ldi	r24, 0x56	; 86
    257c:	92 e0       	ldi	r25, 0x02	; 2
    257e:	2c ef       	ldi	r18, 0xFC	; 252
    2580:	31 e1       	ldi	r19, 0x11	; 17
    2582:	43 e8       	ldi	r20, 0x83	; 131
    2584:	51 e1       	ldi	r21, 0x11	; 17
    2586:	e3 e8       	ldi	r30, 0x83	; 131
    2588:	f1 e1       	ldi	r31, 0x11	; 17
    258a:	b9 01       	movw	r22, r18
    258c:	9f 01       	movw	r18, r30
    258e:	00 e0       	ldi	r16, 0x00	; 0
    2590:	10 e0       	ldi	r17, 0x00	; 0
    2592:	7d 01       	movw	r14, r26
    2594:	cc 24       	eor	r12, r12
    2596:	68 94       	set
    2598:	c1 f8       	bld	r12, 1
    259a:	aa 24       	eor	r10, r10
    259c:	bb 24       	eor	r11, r11
    259e:	68 94       	set
    25a0:	a2 f8       	bld	r10, 2
    25a2:	88 24       	eor	r8, r8
    25a4:	0e 94 66 0b 	call	0x16cc	; 0x16cc <proc_init_isr>
    proc_init_isr(&proc[3], main3, blink_4, blink_4, 0, &stack[3][127], 3, 4, 0);
    25a8:	82 eb       	ldi	r24, 0xB2	; 178
    25aa:	92 e0       	ldi	r25, 0x02	; 2
    25ac:	dc 01       	movw	r26, r24
    25ae:	a1 50       	subi	r26, 0x01	; 1
    25b0:	be 4f       	sbci	r27, 0xFE	; 254
    25b2:	84 e8       	ldi	r24, 0x84	; 132
    25b4:	92 e0       	ldi	r25, 0x02	; 2
    25b6:	28 e0       	ldi	r18, 0x08	; 8
    25b8:	32 e1       	ldi	r19, 0x12	; 18
    25ba:	47 e9       	ldi	r20, 0x97	; 151
    25bc:	51 e1       	ldi	r21, 0x11	; 17
    25be:	e7 e9       	ldi	r30, 0x97	; 151
    25c0:	f1 e1       	ldi	r31, 0x11	; 17
    25c2:	b9 01       	movw	r22, r18
    25c4:	9f 01       	movw	r18, r30
    25c6:	00 e0       	ldi	r16, 0x00	; 0
    25c8:	10 e0       	ldi	r17, 0x00	; 0
    25ca:	7d 01       	movw	r14, r26
    25cc:	0f 2e       	mov	r0, r31
    25ce:	f3 e0       	ldi	r31, 0x03	; 3
    25d0:	cf 2e       	mov	r12, r31
    25d2:	f0 2d       	mov	r31, r0
    25d4:	aa 24       	eor	r10, r10
    25d6:	bb 24       	eor	r11, r11
    25d8:	68 94       	set
    25da:	a2 f8       	bld	r10, 2
    25dc:	88 24       	eor	r8, r8
    25de:	0e 94 66 0b 	call	0x16cc	; 0x16cc <proc_init_isr>
    kernel.idle.rs_hook = blink_12;
    25e2:	8b ea       	ldi	r24, 0xAB	; 171
    25e4:	91 e1       	ldi	r25, 0x11	; 17
    25e6:	90 93 ef 01 	sts	0x01EF, r25
    25ea:	80 93 ee 01 	sts	0x01EE, r24
    kernel.idle.sv_hook = blink_12;
    25ee:	8b ea       	ldi	r24, 0xAB	; 171
    25f0:	91 e1       	ldi	r25, 0x11	; 17
    25f2:	90 93 ed 01 	sts	0x01ED, r25
    25f6:	80 93 ec 01 	sts	0x01EC, r24

    proc_run_isr(&proc[0]);
    25fa:	8a ef       	ldi	r24, 0xFA	; 250
    25fc:	91 e0       	ldi	r25, 0x01	; 1
    25fe:	0e 94 0c 0c 	call	0x1818	; 0x1818 <proc_run_isr>
    proc_run_isr(&proc[1]);
    2602:	88 e2       	ldi	r24, 0x28	; 40
    2604:	92 e0       	ldi	r25, 0x02	; 2
    2606:	0e 94 0c 0c 	call	0x1818	; 0x1818 <proc_run_isr>
    proc_run_isr(&proc[2]);
    260a:	86 e5       	ldi	r24, 0x56	; 86
    260c:	92 e0       	ldi	r25, 0x02	; 2
    260e:	0e 94 0c 0c 	call	0x1818	; 0x1818 <proc_run_isr>
    proc_run_isr(&proc[3]);
    2612:	84 e8       	ldi	r24, 0x84	; 132
    2614:	92 e0       	ldi	r25, 0x02	; 2
    2616:	0e 94 0c 0c 	call	0x1818	; 0x1818 <proc_run_isr>

    mutex_init_isr(&mut,1);
    261a:	82 eb       	ldi	r24, 0xB2	; 178
    261c:	94 e0       	ldi	r25, 0x04	; 4
    261e:	61 e0       	ldi	r22, 0x01	; 1
    2620:	0e 94 c5 09 	call	0x138a	; 0x138a <mutex_init_isr>

    start_bugurt();
    2624:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <start_bugurt>
    // Insert code

    return 0;
    2628:	80 e0       	ldi	r24, 0x00	; 0
    262a:	90 e0       	ldi	r25, 0x00	; 0
}
    262c:	cf 91       	pop	r28
    262e:	df 91       	pop	r29
    2630:	1f 91       	pop	r17
    2632:	0f 91       	pop	r16
    2634:	ff 90       	pop	r15
    2636:	ef 90       	pop	r14
    2638:	cf 90       	pop	r12
    263a:	bf 90       	pop	r11
    263c:	af 90       	pop	r10
    263e:	8f 90       	pop	r8
    2640:	08 95       	ret

00002642 <_exit>:
    2642:	f8 94       	cli

00002644 <__stop_program>:
    2644:	ff cf       	rjmp	.-2      	; 0x2644 <__stop_program>
