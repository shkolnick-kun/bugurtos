
bin/Debug/arduino328-test-sig.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00002682  00002716  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002682  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003d2  00800102  00800102  00002718  2**0
                  ALLOC
  3 .stab         00007314  00000000  00000000  00002718  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000036f6  00000000  00000000  00009a2c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       8:	0c 94 26 02 	jmp	0x44c	; 0x44c <__vector_2>
       c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__vector_7>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      54:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

00000068 <syscall_routine>:
      68:	71 02 ba 02 d4 02 ee 02 08 03 21 03 84 03 95 03     q.........!.....
      78:	a5 03 d2 03 f4 03 16 04 2d 04 47 04 57 04 6d 04     ........-.G.W.m.
      88:	87 04 a1 04                                         ....

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e2 e8       	ldi	r30, 0x82	; 130
      a0:	f6 e2       	ldi	r31, 0x26	; 38
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <.do_copy_data_start>

000000a4 <.do_copy_data_loop>:
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0

000000a8 <.do_copy_data_start>:
      a8:	a2 30       	cpi	r26, 0x02	; 2
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <.do_copy_data_loop>

000000ae <__do_clear_bss>:
      ae:	14 e0       	ldi	r17, 0x04	; 4
      b0:	a2 e0       	ldi	r26, 0x02	; 2
      b2:	b1 e0       	ldi	r27, 0x01	; 1
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	a4 3d       	cpi	r26, 0xD4	; 212
      ba:	b1 07       	cpc	r27, r17
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 46 12 	call	0x248c	; 0x248c <main>
      c2:	0c 94 3f 13 	jmp	0x267e	; 0x267e <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <osbme_store_context>:
      ca:	2f 92       	push	r2
      cc:	2f b6       	in	r2, 0x3f	; 63
      ce:	2f 92       	push	r2
      d0:	3f 92       	push	r3
      d2:	4f 92       	push	r4
      d4:	5f 92       	push	r5
      d6:	6f 92       	push	r6
      d8:	7f 92       	push	r7
      da:	8f 92       	push	r8
      dc:	9f 92       	push	r9
      de:	af 92       	push	r10
      e0:	bf 92       	push	r11
      e2:	cf 92       	push	r12
      e4:	df 92       	push	r13
      e6:	ef 92       	push	r14
      e8:	ff 92       	push	r15
      ea:	0f 93       	push	r16
      ec:	1f 93       	push	r17
      ee:	2f 93       	push	r18
      f0:	3f 93       	push	r19
      f2:	4f 93       	push	r20
      f4:	5f 93       	push	r21
      f6:	6f 93       	push	r22
      f8:	7f 93       	push	r23
      fa:	8f 93       	push	r24
      fc:	9f 93       	push	r25
      fe:	af 93       	push	r26
     100:	bf 93       	push	r27
     102:	cf 93       	push	r28
     104:	df 93       	push	r29
     106:	ef 93       	push	r30
     108:	ff 93       	push	r31
     10a:	ed b7       	in	r30, 0x3d	; 61
     10c:	fe b7       	in	r31, 0x3e	; 62
     10e:	21 a1       	ldd	r18, Z+33	; 0x21
     110:	30 a1       	ldd	r19, Z+32	; 0x20
     112:	01 a2       	std	Z+33, r0	; 0x21
     114:	10 a2       	std	Z+32, r1	; 0x20
     116:	11 24       	eor	r1, r1
     118:	8d b7       	in	r24, 0x3d	; 61
     11a:	9e b7       	in	r25, 0x3e	; 62
     11c:	2f 93       	push	r18
     11e:	3f 93       	push	r19
     120:	08 95       	ret

00000122 <osbme_load_context>:
     122:	3f 91       	pop	r19
     124:	2f 91       	pop	r18
     126:	9e bf       	out	0x3e, r25	; 62
     128:	8d bf       	out	0x3d, r24	; 61
     12a:	fe b7       	in	r31, 0x3e	; 62
     12c:	ed b7       	in	r30, 0x3d	; 61
     12e:	10 a0       	ldd	r1, Z+32	; 0x20
     130:	01 a0       	ldd	r0, Z+33	; 0x21
     132:	30 a3       	std	Z+32, r19	; 0x20
     134:	21 a3       	std	Z+33, r18	; 0x21
     136:	ff 91       	pop	r31
     138:	ef 91       	pop	r30
     13a:	df 91       	pop	r29
     13c:	cf 91       	pop	r28
     13e:	bf 91       	pop	r27
     140:	af 91       	pop	r26
     142:	9f 91       	pop	r25
     144:	8f 91       	pop	r24
     146:	7f 91       	pop	r23
     148:	6f 91       	pop	r22
     14a:	5f 91       	pop	r21
     14c:	4f 91       	pop	r20
     14e:	3f 91       	pop	r19
     150:	2f 91       	pop	r18
     152:	1f 91       	pop	r17
     154:	0f 91       	pop	r16
     156:	ff 90       	pop	r15
     158:	ef 90       	pop	r14
     15a:	df 90       	pop	r13
     15c:	cf 90       	pop	r12
     15e:	bf 90       	pop	r11
     160:	af 90       	pop	r10
     162:	9f 90       	pop	r9
     164:	8f 90       	pop	r8
     166:	7f 90       	pop	r7
     168:	6f 90       	pop	r6
     16a:	5f 90       	pop	r5
     16c:	4f 90       	pop	r4
     16e:	3f 90       	pop	r3
     170:	2f 90       	pop	r2
     172:	2f be       	out	0x3f, r2	; 63
     174:	2f 90       	pop	r2
     176:	08 95       	ret

00000178 <disable_interrupts>:
//Внешние функции, специфичные для AVR
extern void start_scheduler( void );
extern void stop_scheduler( void );
// Просто функции, специфичные для AVR
void disable_interrupts(void)
{
     178:	df 93       	push	r29
     17a:	cf 93       	push	r28
     17c:	cd b7       	in	r28, 0x3d	; 61
     17e:	de b7       	in	r29, 0x3e	; 62
    cli();
     180:	f8 94       	cli
}
     182:	cf 91       	pop	r28
     184:	df 91       	pop	r29
     186:	08 95       	ret

00000188 <enable_interrupts>:
void enable_interrupts(void)
{
     188:	df 93       	push	r29
     18a:	cf 93       	push	r28
     18c:	cd b7       	in	r28, 0x3d	; 61
     18e:	de b7       	in	r29, 0x3e	; 62
    sei();
     190:	78 94       	sei
}
     192:	cf 91       	pop	r28
     194:	df 91       	pop	r29
     196:	08 95       	ret

00000198 <current_proc>:

proc_t * current_proc(void)
{
     198:	df 93       	push	r29
     19a:	cf 93       	push	r28
     19c:	cd b7       	in	r28, 0x3d	; 61
     19e:	de b7       	in	r29, 0x3e	; 62
    return kernel.sched.current_proc;
     1a0:	80 91 9e 01 	lds	r24, 0x019E
     1a4:	90 91 9f 01 	lds	r25, 0x019F
}
     1a8:	cf 91       	pop	r28
     1aa:	df 91       	pop	r29
     1ac:	08 95       	ret

000001ae <proc_stack_init>:

void * proc_stack_init(stack_t * sstart, code_t code, void * arg)
{
     1ae:	df 93       	push	r29
     1b0:	cf 93       	push	r28
     1b2:	00 d0       	rcall	.+0      	; 0x1b4 <proc_stack_init+0x6>
     1b4:	00 d0       	rcall	.+0      	; 0x1b6 <proc_stack_init+0x8>
     1b6:	00 d0       	rcall	.+0      	; 0x1b8 <proc_stack_init+0xa>
     1b8:	cd b7       	in	r28, 0x3d	; 61
     1ba:	de b7       	in	r29, 0x3e	; 62
     1bc:	9a 83       	std	Y+2, r25	; 0x02
     1be:	89 83       	std	Y+1, r24	; 0x01
     1c0:	7c 83       	std	Y+4, r23	; 0x04
     1c2:	6b 83       	std	Y+3, r22	; 0x03
     1c4:	5e 83       	std	Y+6, r21	; 0x06
     1c6:	4d 83       	std	Y+5, r20	; 0x05
    return osbme_init_stack( (void *)sstart, (osbme_code_t)proc_run_wrapper, (void *)arg );
     1c8:	49 e5       	ldi	r20, 0x59	; 89
     1ca:	53 e0       	ldi	r21, 0x03	; 3
     1cc:	89 81       	ldd	r24, Y+1	; 0x01
     1ce:	9a 81       	ldd	r25, Y+2	; 0x02
     1d0:	2d 81       	ldd	r18, Y+5	; 0x05
     1d2:	3e 81       	ldd	r19, Y+6	; 0x06
     1d4:	ba 01       	movw	r22, r20
     1d6:	a9 01       	movw	r20, r18
     1d8:	0e 94 b1 04 	call	0x962	; 0x962 <osbme_init_stack>
}
     1dc:	26 96       	adiw	r28, 0x06	; 6
     1de:	0f b6       	in	r0, 0x3f	; 63
     1e0:	f8 94       	cli
     1e2:	de bf       	out	0x3e, r29	; 62
     1e4:	0f be       	out	0x3f, r0	; 63
     1e6:	cd bf       	out	0x3d, r28	; 61
     1e8:	cf 91       	pop	r28
     1ea:	df 91       	pop	r29
     1ec:	08 95       	ret

000001ee <resched>:
//Через этот указатель будет вызываться обработчик прерывания
void (*kernel_isr)(void);

// Функция перепланировки
void resched(void)
{
     1ee:	df 93       	push	r29
     1f0:	cf 93       	push	r28
     1f2:	cd b7       	in	r28, 0x3d	; 61
     1f4:	de b7       	in	r29, 0x3e	; 62
    kernel_state |= KRN_FLG_RESCHED;
     1f6:	80 91 00 01 	lds	r24, 0x0100
     1fa:	81 60       	ori	r24, 0x01	; 1
     1fc:	80 93 00 01 	sts	0x0100, r24
}
     200:	cf 91       	pop	r28
     202:	df 91       	pop	r29
     204:	08 95       	ret

00000206 <kernel_process_switch>:

__attribute__((naked)) void kernel_process_switch(void)
{
    //Сразу же после обработки отложенных прерываний передаем управление процессу
    kernel_sp = osbme_store_context();
     206:	0e 94 65 00 	call	0xca	; 0xca <osbme_store_context>
     20a:	90 93 9d 01 	sts	0x019D, r25
     20e:	80 93 9c 01 	sts	0x019C, r24
    osbme_load_context( proc_sp );
     212:	80 91 9a 01 	lds	r24, 0x019A
     216:	90 91 9b 01 	lds	r25, 0x019B
     21a:	0e 94 91 00 	call	0x122	; 0x122 <osbme_load_context>
    __asm__ __volatile__("reti"::);/// Дада, именно reti, мы же типа прерывания счас обрабатывали
     21e:	18 95       	reti

00000220 <kernel_thread>:
    osbme_load_context( kernel_sp );
    __asm__ __volatile__("ret"::);
}
///================================================================
void kernel_thread(void)
{
     220:	df 93       	push	r29
     222:	cf 93       	push	r28
     224:	cd b7       	in	r28, 0x3d	; 61
     226:	de b7       	in	r29, 0x3e	; 62
    while(1)
    {
        // Если надо перепланировать - перепланируем
        if( kernel_state & KRN_FLG_RESCHED )
     228:	80 91 00 01 	lds	r24, 0x0100
     22c:	88 2f       	mov	r24, r24
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	81 70       	andi	r24, 0x01	; 1
     232:	90 70       	andi	r25, 0x00	; 0
     234:	88 23       	and	r24, r24
     236:	79 f0       	breq	.+30     	; 0x256 <kernel_thread+0x36>
        {
            kernel_state &= ~KRN_FLG_RESCHED;
     238:	80 91 00 01 	lds	r24, 0x0100
     23c:	8e 7f       	andi	r24, 0xFE	; 254
     23e:	80 93 00 01 	sts	0x0100, r24
            proc_sp = sched_reschedule( proc_sp );
     242:	80 91 9a 01 	lds	r24, 0x019A
     246:	90 91 9b 01 	lds	r25, 0x019B
     24a:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <sched_reschedule>
     24e:	90 93 9b 01 	sts	0x019B, r25
     252:	80 93 9a 01 	sts	0x019A, r24
        }
        /// Прямая передача управления от ядра к процессу, прерывания запрещены
        kernel_process_switch();//В результате выполнения этого прерывания будут разрешены
     256:	0e 94 03 01 	call	0x206	; 0x206 <kernel_process_switch>
        /// Сюда можно попасть только из прерывания, либо из процесса, при этом прерывания опять таки запрещены
        if( kernel_state & KRN_FLG_DO_SCALL )
     25a:	80 91 00 01 	lds	r24, 0x0100
     25e:	88 2f       	mov	r24, r24
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	82 70       	andi	r24, 0x02	; 2
     264:	90 70       	andi	r25, 0x00	; 0
     266:	00 97       	sbiw	r24, 0x00	; 0
     268:	49 f0       	breq	.+18     	; 0x27c <kernel_thread+0x5c>
        {
#ifdef SYSCALL_ISR
            syscall_data_get();
     26a:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <syscall_data_get>
#endif
            do_syscall();
     26e:	0e 94 af 01 	call	0x35e	; 0x35e <do_syscall>
            kernel_state &= ~KRN_FLG_DO_SCALL;
     272:	80 91 00 01 	lds	r24, 0x0100
     276:	8d 7f       	andi	r24, 0xFD	; 253
     278:	80 93 00 01 	sts	0x0100, r24
        }
        // Обработка прерывания
        if( kernel_isr != (void (*)(void))0 )
     27c:	80 91 98 01 	lds	r24, 0x0198
     280:	90 91 99 01 	lds	r25, 0x0199
     284:	00 97       	sbiw	r24, 0x00	; 0
     286:	81 f2       	breq	.-96     	; 0x228 <kernel_thread+0x8>
        {
            kernel_isr();
     288:	e0 91 98 01 	lds	r30, 0x0198
     28c:	f0 91 99 01 	lds	r31, 0x0199
     290:	09 95       	icall
            kernel_isr = (void (*)(void))0;
     292:	10 92 99 01 	sts	0x0199, r1
     296:	10 92 98 01 	sts	0x0198, r1
     29a:	c6 cf       	rjmp	.-116    	; 0x228 <kernel_thread+0x8>

0000029c <__vector_7>:
        }
    }
}

// А вот и первое определение обработчика прерывания
BUGURT_INTERRUPT(SYSTEM_TIMER_ISR)
     29c:	0e 94 65 00 	call	0xca	; 0xca <osbme_store_context>
     2a0:	90 93 9b 01 	sts	0x019B, r25
     2a4:	80 93 9a 01 	sts	0x019A, r24
     2a8:	81 e6       	ldi	r24, 0x61	; 97
     2aa:	91 e0       	ldi	r25, 0x01	; 1
     2ac:	90 93 99 01 	sts	0x0199, r25
     2b0:	80 93 98 01 	sts	0x0198, r24
     2b4:	80 91 9c 01 	lds	r24, 0x019C
     2b8:	90 91 9d 01 	lds	r25, 0x019D
     2bc:	0e 94 91 00 	call	0x122	; 0x122 <osbme_load_context>
     2c0:	08 95       	ret

000002c2 <__vector_7_func>:
{
     2c2:	df 93       	push	r29
     2c4:	cf 93       	push	r28
     2c6:	cd b7       	in	r28, 0x3d	; 61
     2c8:	de b7       	in	r29, 0x3e	; 62
    kernel.timer++;
     2ca:	80 91 f8 01 	lds	r24, 0x01F8
     2ce:	90 91 f9 01 	lds	r25, 0x01F9
     2d2:	01 96       	adiw	r24, 0x01	; 1
     2d4:	90 93 f9 01 	sts	0x01F9, r25
     2d8:	80 93 f8 01 	sts	0x01F8, r24
    proc_sp = sched_schedule( proc_sp );
     2dc:	80 91 9a 01 	lds	r24, 0x019A
     2e0:	90 91 9b 01 	lds	r25, 0x019B
     2e4:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <sched_schedule>
     2e8:	90 93 9b 01 	sts	0x019B, r25
     2ec:	80 93 9a 01 	sts	0x019A, r24
}
     2f0:	cf 91       	pop	r28
     2f2:	df 91       	pop	r29
     2f4:	08 95       	ret

000002f6 <init_bugurt>:

/***************************************************************************************************************/
// Функции общего пользования

void init_bugurt(void)
{
     2f6:	df 93       	push	r29
     2f8:	cf 93       	push	r28
     2fa:	cd b7       	in	r28, 0x3d	; 61
     2fc:	de b7       	in	r29, 0x3e	; 62
    cli();
     2fe:	f8 94       	cli
    kernel_init();
     300:	0e 94 b3 09 	call	0x1366	; 0x1366 <kernel_init>
    proc_sp = osbme_init_stack( &idle_stack[CONFIG_IDLE_STACK_SIZE-1], idle_main, 0);
     304:	87 e9       	ldi	r24, 0x97	; 151
     306:	91 e0       	ldi	r25, 0x01	; 1
     308:	26 e3       	ldi	r18, 0x36	; 54
     30a:	32 e1       	ldi	r19, 0x12	; 18
     30c:	b9 01       	movw	r22, r18
     30e:	40 e0       	ldi	r20, 0x00	; 0
     310:	50 e0       	ldi	r21, 0x00	; 0
     312:	0e 94 b1 04 	call	0x962	; 0x962 <osbme_init_stack>
     316:	90 93 9b 01 	sts	0x019B, r25
     31a:	80 93 9a 01 	sts	0x019A, r24
    kernel.idle.spointer = proc_sp;
     31e:	80 91 9a 01 	lds	r24, 0x019A
     322:	90 91 9b 01 	lds	r25, 0x019B
     326:	90 93 f5 01 	sts	0x01F5, r25
     32a:	80 93 f4 01 	sts	0x01F4, r24
    kernel.sched.nested_crit_sec = (count_t)1;
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	90 93 c7 01 	sts	0x01C7, r25
     336:	80 93 c6 01 	sts	0x01C6, r24
}
     33a:	cf 91       	pop	r28
     33c:	df 91       	pop	r29
     33e:	08 95       	ret

00000340 <start_bugurt>:
void start_bugurt(void)
{
     340:	df 93       	push	r29
     342:	cf 93       	push	r28
     344:	cd b7       	in	r28, 0x3d	; 61
     346:	de b7       	in	r29, 0x3e	; 62
    start_scheduler();
     348:	0e 94 62 11 	call	0x22c4	; 0x22c4 <start_scheduler>
    kernel.sched.nested_crit_sec = (count_t)0;
     34c:	10 92 c7 01 	sts	0x01C7, r1
     350:	10 92 c6 01 	sts	0x01C6, r1
    kernel_thread();
     354:	0e 94 10 01 	call	0x220	; 0x220 <kernel_thread>
}
     358:	cf 91       	pop	r28
     35a:	df 91       	pop	r29
     35c:	08 95       	ret

0000035e <do_syscall>:
    scall_mutex_try_lock,
    scall_mutex_unlock
};

void do_syscall(void)
{
     35e:	df 93       	push	r29
     360:	cf 93       	push	r28
     362:	00 d0       	rcall	.+0      	; 0x364 <do_syscall+0x6>
     364:	00 d0       	rcall	.+0      	; 0x366 <do_syscall+0x8>
     366:	00 d0       	rcall	.+0      	; 0x368 <do_syscall+0xa>
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
    if( syscall_num != (unsigned char)0 )
     36c:	80 91 02 01 	lds	r24, 0x0102
     370:	88 23       	and	r24, r24
     372:	29 f1       	breq	.+74     	; 0x3be <do_syscall+0x60>
    {
        syscall_num--;
     374:	80 91 02 01 	lds	r24, 0x0102
     378:	81 50       	subi	r24, 0x01	; 1
     37a:	80 93 02 01 	sts	0x0102, r24
        code_t syscall_func;
        syscall_func = (code_t)pgm_read_word(syscall_routine + syscall_num);
     37e:	80 91 02 01 	lds	r24, 0x0102
     382:	88 2f       	mov	r24, r24
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	88 0f       	add	r24, r24
     388:	99 1f       	adc	r25, r25
     38a:	88 59       	subi	r24, 0x98	; 152
     38c:	9f 4f       	sbci	r25, 0xFF	; 255
     38e:	9c 83       	std	Y+4, r25	; 0x04
     390:	8b 83       	std	Y+3, r24	; 0x03
     392:	8b 81       	ldd	r24, Y+3	; 0x03
     394:	9c 81       	ldd	r25, Y+4	; 0x04
     396:	fc 01       	movw	r30, r24
     398:	85 91       	lpm	r24, Z+
     39a:	94 91       	lpm	r25, Z+
     39c:	9a 83       	std	Y+2, r25	; 0x02
     39e:	89 83       	std	Y+1, r24	; 0x01
     3a0:	fc 83       	std	Y+4, r31	; 0x04
     3a2:	eb 83       	std	Y+3, r30	; 0x03
     3a4:	89 81       	ldd	r24, Y+1	; 0x01
     3a6:	9a 81       	ldd	r25, Y+2	; 0x02
     3a8:	9e 83       	std	Y+6, r25	; 0x06
     3aa:	8d 83       	std	Y+5, r24	; 0x05
        syscall_func(syscall_arg);
     3ac:	80 91 03 01 	lds	r24, 0x0103
     3b0:	90 91 04 01 	lds	r25, 0x0104
     3b4:	ed 81       	ldd	r30, Y+5	; 0x05
     3b6:	fe 81       	ldd	r31, Y+6	; 0x06
     3b8:	09 95       	icall
        syscall_num = (unsigned char)0;
     3ba:	10 92 02 01 	sts	0x0102, r1
    }
}
     3be:	26 96       	adiw	r28, 0x06	; 6
     3c0:	0f b6       	in	r0, 0x3f	; 63
     3c2:	f8 94       	cli
     3c4:	de bf       	out	0x3e, r29	; 62
     3c6:	0f be       	out	0x3f, r0	; 63
     3c8:	cd bf       	out	0x3d, r28	; 61
     3ca:	cf 91       	pop	r28
     3cc:	df 91       	pop	r29
     3ce:	08 95       	ret

000003d0 <syscall_data_get>:
    unsigned char num;
    void * arg;
} syscall_data_t;

void syscall_data_get(void)
{
     3d0:	df 93       	push	r29
     3d2:	cf 93       	push	r28
     3d4:	00 d0       	rcall	.+0      	; 0x3d6 <syscall_data_get+0x6>
     3d6:	00 d0       	rcall	.+0      	; 0x3d8 <syscall_data_get+0x8>
     3d8:	cd b7       	in	r28, 0x3d	; 61
     3da:	de b7       	in	r29, 0x3e	; 62
    unsigned char * tos;
    unsigned short temp;
    /// Извлечение syscall_num и syscall_arg из стека процесса
    tos = (unsigned char *)proc_sp + PROC_STACK_OFFSET;
     3dc:	80 91 9a 01 	lds	r24, 0x019A
     3e0:	90 91 9b 01 	lds	r25, 0x019B
     3e4:	07 96       	adiw	r24, 0x07	; 7
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	8b 83       	std	Y+3, r24	; 0x03
    temp = (unsigned short)*tos++;
     3ea:	eb 81       	ldd	r30, Y+3	; 0x03
     3ec:	fc 81       	ldd	r31, Y+4	; 0x04
     3ee:	80 81       	ld	r24, Z
     3f0:	88 2f       	mov	r24, r24
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	9a 83       	std	Y+2, r25	; 0x02
     3f6:	89 83       	std	Y+1, r24	; 0x01
     3f8:	8b 81       	ldd	r24, Y+3	; 0x03
     3fa:	9c 81       	ldd	r25, Y+4	; 0x04
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	9c 83       	std	Y+4, r25	; 0x04
     400:	8b 83       	std	Y+3, r24	; 0x03
    temp <<= 8;
     402:	89 81       	ldd	r24, Y+1	; 0x01
     404:	9a 81       	ldd	r25, Y+2	; 0x02
     406:	98 2f       	mov	r25, r24
     408:	88 27       	eor	r24, r24
     40a:	9a 83       	std	Y+2, r25	; 0x02
     40c:	89 83       	std	Y+1, r24	; 0x01
    temp |= (unsigned short)*tos;
     40e:	eb 81       	ldd	r30, Y+3	; 0x03
     410:	fc 81       	ldd	r31, Y+4	; 0x04
     412:	80 81       	ld	r24, Z
     414:	28 2f       	mov	r18, r24
     416:	30 e0       	ldi	r19, 0x00	; 0
     418:	89 81       	ldd	r24, Y+1	; 0x01
     41a:	9a 81       	ldd	r25, Y+2	; 0x02
     41c:	82 2b       	or	r24, r18
     41e:	93 2b       	or	r25, r19
     420:	9a 83       	std	Y+2, r25	; 0x02
     422:	89 83       	std	Y+1, r24	; 0x01

    syscall_num = ((syscall_data_t *)temp)->num;
     424:	e9 81       	ldd	r30, Y+1	; 0x01
     426:	fa 81       	ldd	r31, Y+2	; 0x02
     428:	80 81       	ld	r24, Z
     42a:	80 93 02 01 	sts	0x0102, r24
    syscall_arg = ((syscall_data_t *)temp)->arg;
     42e:	e9 81       	ldd	r30, Y+1	; 0x01
     430:	fa 81       	ldd	r31, Y+2	; 0x02
     432:	81 81       	ldd	r24, Z+1	; 0x01
     434:	92 81       	ldd	r25, Z+2	; 0x02
     436:	90 93 04 01 	sts	0x0104, r25
     43a:	80 93 03 01 	sts	0x0103, r24
}
     43e:	0f 90       	pop	r0
     440:	0f 90       	pop	r0
     442:	0f 90       	pop	r0
     444:	0f 90       	pop	r0
     446:	cf 91       	pop	r28
     448:	df 91       	pop	r29
     44a:	08 95       	ret

0000044c <__vector_2>:

__attribute__ (( signal, naked )) void SYSCALL_ISR(void)
{
    proc_sp = osbme_store_context();
     44c:	0e 94 65 00 	call	0xca	; 0xca <osbme_store_context>
     450:	90 93 9b 01 	sts	0x019B, r25
     454:	80 93 9a 01 	sts	0x019A, r24
    osbme_load_context( kernel_sp );
     458:	80 91 9c 01 	lds	r24, 0x019C
     45c:	90 91 9d 01 	lds	r25, 0x019D
     460:	0e 94 91 00 	call	0x122	; 0x122 <osbme_load_context>
    __asm__ __volatile__("ret"::);
     464:	08 95       	ret

00000466 <_syscall>:
}

syscall_data_t * _syscall( syscall_data_t * arg )
{
     466:	df 93       	push	r29
     468:	cf 93       	push	r28
     46a:	00 d0       	rcall	.+0      	; 0x46c <_syscall+0x6>
     46c:	cd b7       	in	r28, 0x3d	; 61
     46e:	de b7       	in	r29, 0x3e	; 62
     470:	9a 83       	std	Y+2, r25	; 0x02
     472:	89 83       	std	Y+1, r24	; 0x01
    cli();
     474:	f8 94       	cli
    kernel_state |= KRN_FLG_DO_SCALL;
     476:	80 91 00 01 	lds	r24, 0x0100
     47a:	82 60       	ori	r24, 0x02	; 2
     47c:	80 93 00 01 	sts	0x0100, r24
    raise_syscall_interrupt();
     480:	0e 94 3f 11 	call	0x227e	; 0x227e <raise_syscall_interrupt>
    sei();
     484:	78 94       	sei
    return arg;
     486:	89 81       	ldd	r24, Y+1	; 0x01
     488:	9a 81       	ldd	r25, Y+2	; 0x02
}
     48a:	0f 90       	pop	r0
     48c:	0f 90       	pop	r0
     48e:	cf 91       	pop	r28
     490:	df 91       	pop	r29
     492:	08 95       	ret

00000494 <syscall>:

static syscall_data_t scdata;
void syscall( unsigned char num, void * arg )
{
     494:	df 93       	push	r29
     496:	cf 93       	push	r28
     498:	00 d0       	rcall	.+0      	; 0x49a <syscall+0x6>
     49a:	0f 92       	push	r0
     49c:	cd b7       	in	r28, 0x3d	; 61
     49e:	de b7       	in	r29, 0x3e	; 62
     4a0:	89 83       	std	Y+1, r24	; 0x01
     4a2:	7b 83       	std	Y+3, r23	; 0x03
     4a4:	6a 83       	std	Y+2, r22	; 0x02
     scdata.num = num;
     4a6:	89 81       	ldd	r24, Y+1	; 0x01
     4a8:	80 93 05 01 	sts	0x0105, r24
     scdata.arg = arg;
     4ac:	8a 81       	ldd	r24, Y+2	; 0x02
     4ae:	9b 81       	ldd	r25, Y+3	; 0x03
     4b0:	90 93 07 01 	sts	0x0107, r25
     4b4:	80 93 06 01 	sts	0x0106, r24
     _syscall( &scdata );
     4b8:	85 e0       	ldi	r24, 0x05	; 5
     4ba:	91 e0       	ldi	r25, 0x01	; 1
     4bc:	0e 94 33 02 	call	0x466	; 0x466 <_syscall>
     SYSCALL_DELLAY();
     4c0:	00 00       	nop
     4c2:	00 00       	nop
     4c4:	00 00       	nop
     while( kernel_state & KRN_FLG_DO_SCALL );
     4c6:	80 91 00 01 	lds	r24, 0x0100
     4ca:	88 2f       	mov	r24, r24
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	82 70       	andi	r24, 0x02	; 2
     4d0:	90 70       	andi	r25, 0x00	; 0
     4d2:	00 97       	sbiw	r24, 0x00	; 0
     4d4:	c1 f7       	brne	.-16     	; 0x4c6 <syscall+0x32>
}
     4d6:	0f 90       	pop	r0
     4d8:	0f 90       	pop	r0
     4da:	0f 90       	pop	r0
     4dc:	cf 91       	pop	r28
     4de:	df 91       	pop	r29
     4e0:	08 95       	ret

000004e2 <scall_proc_init>:
///                 ОБРАБОТЧИКИ СИСТЕМНЫХ ВЫЗОВОВ
///=================================================================
///                   Управление процессами
//1
void scall_proc_init( void * arg )
{
     4e2:	8f 92       	push	r8
     4e4:	af 92       	push	r10
     4e6:	bf 92       	push	r11
     4e8:	cf 92       	push	r12
     4ea:	df 92       	push	r13
     4ec:	ef 92       	push	r14
     4ee:	ff 92       	push	r15
     4f0:	0f 93       	push	r16
     4f2:	1f 93       	push	r17
     4f4:	df 93       	push	r29
     4f6:	cf 93       	push	r28
     4f8:	00 d0       	rcall	.+0      	; 0x4fa <scall_proc_init+0x18>
     4fa:	cd b7       	in	r28, 0x3d	; 61
     4fc:	de b7       	in	r29, 0x3e	; 62
     4fe:	9a 83       	std	Y+2, r25	; 0x02
     500:	89 83       	std	Y+1, r24	; 0x01
    proc_init_isr(
     502:	e9 81       	ldd	r30, Y+1	; 0x01
     504:	fa 81       	ldd	r31, Y+2	; 0x02
     506:	80 81       	ld	r24, Z
     508:	91 81       	ldd	r25, Z+1	; 0x01
     50a:	e9 81       	ldd	r30, Y+1	; 0x01
     50c:	fa 81       	ldd	r31, Y+2	; 0x02
     50e:	22 81       	ldd	r18, Z+2	; 0x02
     510:	33 81       	ldd	r19, Z+3	; 0x03
     512:	e9 81       	ldd	r30, Y+1	; 0x01
     514:	fa 81       	ldd	r31, Y+2	; 0x02
     516:	44 81       	ldd	r20, Z+4	; 0x04
     518:	55 81       	ldd	r21, Z+5	; 0x05
     51a:	e9 81       	ldd	r30, Y+1	; 0x01
     51c:	fa 81       	ldd	r31, Y+2	; 0x02
     51e:	06 81       	ldd	r16, Z+6	; 0x06
     520:	17 81       	ldd	r17, Z+7	; 0x07
     522:	e9 81       	ldd	r30, Y+1	; 0x01
     524:	fa 81       	ldd	r31, Y+2	; 0x02
     526:	e0 84       	ldd	r14, Z+8	; 0x08
     528:	f1 84       	ldd	r15, Z+9	; 0x09
     52a:	e9 81       	ldd	r30, Y+1	; 0x01
     52c:	fa 81       	ldd	r31, Y+2	; 0x02
     52e:	c2 84       	ldd	r12, Z+10	; 0x0a
     530:	d3 84       	ldd	r13, Z+11	; 0x0b
     532:	e9 81       	ldd	r30, Y+1	; 0x01
     534:	fa 81       	ldd	r31, Y+2	; 0x02
     536:	b4 84       	ldd	r11, Z+12	; 0x0c
     538:	e9 81       	ldd	r30, Y+1	; 0x01
     53a:	fa 81       	ldd	r31, Y+2	; 0x02
     53c:	a5 85       	ldd	r26, Z+13	; 0x0d
     53e:	b6 85       	ldd	r27, Z+14	; 0x0e
     540:	e9 81       	ldd	r30, Y+1	; 0x01
     542:	fa 81       	ldd	r31, Y+2	; 0x02
     544:	e7 85       	ldd	r30, Z+15	; 0x0f
     546:	b9 01       	movw	r22, r18
     548:	98 01       	movw	r18, r16
     54a:	87 01       	movw	r16, r14
     54c:	76 01       	movw	r14, r12
     54e:	cb 2c       	mov	r12, r11
     550:	5d 01       	movw	r10, r26
     552:	8e 2e       	mov	r8, r30
     554:	0e 94 89 0b 	call	0x1712	; 0x1712 <proc_init_isr>
              ((proc_init_arg_t *)arg)->sstart,
              ((proc_init_arg_t *)arg)->prio,
              ((proc_init_arg_t *)arg)->time_quant,
              ((proc_init_arg_t *)arg)->is_rt
              );
}
     558:	0f 90       	pop	r0
     55a:	0f 90       	pop	r0
     55c:	cf 91       	pop	r28
     55e:	df 91       	pop	r29
     560:	1f 91       	pop	r17
     562:	0f 91       	pop	r16
     564:	ff 90       	pop	r15
     566:	ef 90       	pop	r14
     568:	df 90       	pop	r13
     56a:	cf 90       	pop	r12
     56c:	bf 90       	pop	r11
     56e:	af 90       	pop	r10
     570:	8f 90       	pop	r8
     572:	08 95       	ret

00000574 <scall_proc_run>:
    syscall(1,(void *)&scarg);
}
//---------------------------------------------------------------------------------------------
//2
void scall_proc_run( void * arg )
{
     574:	0f 93       	push	r16
     576:	1f 93       	push	r17
     578:	df 93       	push	r29
     57a:	cf 93       	push	r28
     57c:	00 d0       	rcall	.+0      	; 0x57e <scall_proc_run+0xa>
     57e:	cd b7       	in	r28, 0x3d	; 61
     580:	de b7       	in	r29, 0x3e	; 62
     582:	9a 83       	std	Y+2, r25	; 0x02
     584:	89 83       	std	Y+1, r24	; 0x01
    ((proc_runtime_arg_t *)arg)->scall_ret = proc_run_isr( ((proc_runtime_arg_t *)arg)->proc );
     586:	09 81       	ldd	r16, Y+1	; 0x01
     588:	1a 81       	ldd	r17, Y+2	; 0x02
     58a:	e9 81       	ldd	r30, Y+1	; 0x01
     58c:	fa 81       	ldd	r31, Y+2	; 0x02
     58e:	80 81       	ld	r24, Z
     590:	91 81       	ldd	r25, Z+1	; 0x01
     592:	0e 94 2f 0c 	call	0x185e	; 0x185e <proc_run_isr>
     596:	f8 01       	movw	r30, r16
     598:	82 83       	std	Z+2, r24	; 0x02
}
     59a:	0f 90       	pop	r0
     59c:	0f 90       	pop	r0
     59e:	cf 91       	pop	r28
     5a0:	df 91       	pop	r29
     5a2:	1f 91       	pop	r17
     5a4:	0f 91       	pop	r16
     5a6:	08 95       	ret

000005a8 <scall_proc_restart>:
    return scarg.scall_ret;
}
//---------------------------------------------------------------------------------------------
//3
void scall_proc_restart( void * arg )
{
     5a8:	0f 93       	push	r16
     5aa:	1f 93       	push	r17
     5ac:	df 93       	push	r29
     5ae:	cf 93       	push	r28
     5b0:	00 d0       	rcall	.+0      	; 0x5b2 <scall_proc_restart+0xa>
     5b2:	cd b7       	in	r28, 0x3d	; 61
     5b4:	de b7       	in	r29, 0x3e	; 62
     5b6:	9a 83       	std	Y+2, r25	; 0x02
     5b8:	89 83       	std	Y+1, r24	; 0x01
    ((proc_runtime_arg_t *)arg)->scall_ret = proc_restart_isr( ((proc_runtime_arg_t *)arg)->proc );
     5ba:	09 81       	ldd	r16, Y+1	; 0x01
     5bc:	1a 81       	ldd	r17, Y+2	; 0x02
     5be:	e9 81       	ldd	r30, Y+1	; 0x01
     5c0:	fa 81       	ldd	r31, Y+2	; 0x02
     5c2:	80 81       	ld	r24, Z
     5c4:	91 81       	ldd	r25, Z+1	; 0x01
     5c6:	0e 94 4f 0c 	call	0x189e	; 0x189e <proc_restart_isr>
     5ca:	f8 01       	movw	r30, r16
     5cc:	82 83       	std	Z+2, r24	; 0x02
}
     5ce:	0f 90       	pop	r0
     5d0:	0f 90       	pop	r0
     5d2:	cf 91       	pop	r28
     5d4:	df 91       	pop	r29
     5d6:	1f 91       	pop	r17
     5d8:	0f 91       	pop	r16
     5da:	08 95       	ret

000005dc <scall_proc_stop>:
    return scarg.scall_ret;
}
//---------------------------------------------------------------------------------------------
//4
void scall_proc_stop( void * arg )
{
     5dc:	0f 93       	push	r16
     5de:	1f 93       	push	r17
     5e0:	df 93       	push	r29
     5e2:	cf 93       	push	r28
     5e4:	00 d0       	rcall	.+0      	; 0x5e6 <scall_proc_stop+0xa>
     5e6:	cd b7       	in	r28, 0x3d	; 61
     5e8:	de b7       	in	r29, 0x3e	; 62
     5ea:	9a 83       	std	Y+2, r25	; 0x02
     5ec:	89 83       	std	Y+1, r24	; 0x01
    ((proc_runtime_arg_t *)arg)->scall_ret = proc_stop_isr( ((proc_runtime_arg_t *)arg)->proc );
     5ee:	09 81       	ldd	r16, Y+1	; 0x01
     5f0:	1a 81       	ldd	r17, Y+2	; 0x02
     5f2:	e9 81       	ldd	r30, Y+1	; 0x01
     5f4:	fa 81       	ldd	r31, Y+2	; 0x02
     5f6:	80 81       	ld	r24, Z
     5f8:	91 81       	ldd	r25, Z+1	; 0x01
     5fa:	0e 94 b1 0c 	call	0x1962	; 0x1962 <proc_stop_isr>
     5fe:	f8 01       	movw	r30, r16
     600:	82 83       	std	Z+2, r24	; 0x02
}
     602:	0f 90       	pop	r0
     604:	0f 90       	pop	r0
     606:	cf 91       	pop	r28
     608:	df 91       	pop	r29
     60a:	1f 91       	pop	r17
     60c:	0f 91       	pop	r16
     60e:	08 95       	ret

00000610 <scall_proc_self_stop>:
}

//---------------------------------------------------------------------------------------------
//5
void scall_proc_self_stop( void * arg )
{
     610:	df 93       	push	r29
     612:	cf 93       	push	r28
     614:	00 d0       	rcall	.+0      	; 0x616 <scall_proc_self_stop+0x6>
     616:	00 d0       	rcall	.+0      	; 0x618 <scall_proc_self_stop+0x8>
     618:	cd b7       	in	r28, 0x3d	; 61
     61a:	de b7       	in	r29, 0x3e	; 62
     61c:	9c 83       	std	Y+4, r25	; 0x04
     61e:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = kernel.sched.current_proc;
     620:	80 91 9e 01 	lds	r24, 0x019E
     624:	90 91 9f 01 	lds	r25, 0x019F
     628:	9a 83       	std	Y+2, r25	; 0x02
     62a:	89 83       	std	Y+1, r24	; 0x01
    _proc_stop( proc );
     62c:	89 81       	ldd	r24, Y+1	; 0x01
     62e:	9a 81       	ldd	r25, Y+2	; 0x02
     630:	0e 94 98 0c 	call	0x1930	; 0x1930 <_proc_stop>
}
     634:	0f 90       	pop	r0
     636:	0f 90       	pop	r0
     638:	0f 90       	pop	r0
     63a:	0f 90       	pop	r0
     63c:	cf 91       	pop	r28
     63e:	df 91       	pop	r29
     640:	08 95       	ret

00000642 <scall_proc_terminate>:
}
//---------------------------------------------------------------------------------------------
//6
/// Останов процесса после выхода из pmain, для обертки proc_run_wrapper
void scall_proc_terminate( void * arg )
{
     642:	df 93       	push	r29
     644:	cf 93       	push	r28
     646:	00 d0       	rcall	.+0      	; 0x648 <scall_proc_terminate+0x6>
     648:	00 d0       	rcall	.+0      	; 0x64a <scall_proc_terminate+0x8>
     64a:	cd b7       	in	r28, 0x3d	; 61
     64c:	de b7       	in	r29, 0x3e	; 62
     64e:	9c 83       	std	Y+4, r25	; 0x04
     650:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = (proc_t *)arg;
     652:	8b 81       	ldd	r24, Y+3	; 0x03
     654:	9c 81       	ldd	r25, Y+4	; 0x04
     656:	9a 83       	std	Y+2, r25	; 0x02
     658:	89 83       	std	Y+1, r24	; 0x01
    // Обрабатываем флаги
    // Нельзя выходить из pmain не освободив все захваченные ресурсы, за это процесс будет "убит"!
    if( proc->flags & PROC_FLG_HOLD ) proc->flags |= PROC_FLG_DEAD;
     65a:	e9 81       	ldd	r30, Y+1	; 0x01
     65c:	fa 81       	ldd	r31, Y+2	; 0x02
     65e:	83 85       	ldd	r24, Z+11	; 0x0b
     660:	88 2f       	mov	r24, r24
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	84 70       	andi	r24, 0x04	; 4
     666:	90 70       	andi	r25, 0x00	; 0
     668:	00 97       	sbiw	r24, 0x00	; 0
     66a:	41 f0       	breq	.+16     	; 0x67c <scall_proc_terminate+0x3a>
     66c:	e9 81       	ldd	r30, Y+1	; 0x01
     66e:	fa 81       	ldd	r31, Y+2	; 0x02
     670:	83 85       	ldd	r24, Z+11	; 0x0b
     672:	80 68       	ori	r24, 0x80	; 128
     674:	e9 81       	ldd	r30, Y+1	; 0x01
     676:	fa 81       	ldd	r31, Y+2	; 0x02
     678:	83 87       	std	Z+11, r24	; 0x0b
     67a:	07 c0       	rjmp	.+14     	; 0x68a <scall_proc_terminate+0x48>
    // В противном случае - просто завершаем процесс
    else proc->flags |= PROC_FLG_END;
     67c:	e9 81       	ldd	r30, Y+1	; 0x01
     67e:	fa 81       	ldd	r31, Y+2	; 0x02
     680:	83 85       	ldd	r24, Z+11	; 0x0b
     682:	80 64       	ori	r24, 0x40	; 64
     684:	e9 81       	ldd	r30, Y+1	; 0x01
     686:	fa 81       	ldd	r31, Y+2	; 0x02
     688:	83 87       	std	Z+11, r24	; 0x0b
    proc->flags &= ~(PROC_FLG_PRE_END|PROC_FLG_RUN);
     68a:	e9 81       	ldd	r30, Y+1	; 0x01
     68c:	fa 81       	ldd	r31, Y+2	; 0x02
     68e:	83 85       	ldd	r24, Z+11	; 0x0b
     690:	8d 7d       	andi	r24, 0xDD	; 221
     692:	e9 81       	ldd	r30, Y+1	; 0x01
     694:	fa 81       	ldd	r31, Y+2	; 0x02
     696:	83 87       	std	Z+11, r24	; 0x0b
    // Останов
    _proc_stop_( proc );
     698:	89 81       	ldd	r24, Y+1	; 0x01
     69a:	9a 81       	ldd	r25, Y+2	; 0x02
     69c:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <gitem_cut>
    // Выполнить перепланировку
    resched();
     6a0:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
}
     6a4:	0f 90       	pop	r0
     6a6:	0f 90       	pop	r0
     6a8:	0f 90       	pop	r0
     6aa:	0f 90       	pop	r0
     6ac:	cf 91       	pop	r28
     6ae:	df 91       	pop	r29
     6b0:	08 95       	ret

000006b2 <proc_run_wrapper>:
void proc_run_wrapper( proc_t * proc )
{
     6b2:	df 93       	push	r29
     6b4:	cf 93       	push	r28
     6b6:	00 d0       	rcall	.+0      	; 0x6b8 <proc_run_wrapper+0x6>
     6b8:	00 d0       	rcall	.+0      	; 0x6ba <proc_run_wrapper+0x8>
     6ba:	00 d0       	rcall	.+0      	; 0x6bc <proc_run_wrapper+0xa>
     6bc:	cd b7       	in	r28, 0x3d	; 61
     6be:	de b7       	in	r29, 0x3e	; 62
     6c0:	9e 83       	std	Y+6, r25	; 0x06
     6c2:	8d 83       	std	Y+5, r24	; 0x05
    //Атомарно читаем pmain и arg
    cli();
     6c4:	f8 94       	cli
    code_t pmain = proc->pmain;
     6c6:	ed 81       	ldd	r30, Y+5	; 0x05
     6c8:	fe 81       	ldd	r31, Y+6	; 0x06
     6ca:	82 a1       	ldd	r24, Z+34	; 0x22
     6cc:	93 a1       	ldd	r25, Z+35	; 0x23
     6ce:	9c 83       	std	Y+4, r25	; 0x04
     6d0:	8b 83       	std	Y+3, r24	; 0x03
    void * arg = proc->arg;
     6d2:	ed 81       	ldd	r30, Y+5	; 0x05
     6d4:	fe 81       	ldd	r31, Y+6	; 0x06
     6d6:	80 a5       	ldd	r24, Z+40	; 0x28
     6d8:	91 a5       	ldd	r25, Z+41	; 0x29
     6da:	9a 83       	std	Y+2, r25	; 0x02
     6dc:	89 83       	std	Y+1, r24	; 0x01
    sei();
     6de:	78 94       	sei
    //Выполняем pmain
    pmain( arg );
     6e0:	89 81       	ldd	r24, Y+1	; 0x01
     6e2:	9a 81       	ldd	r25, Y+2	; 0x02
     6e4:	eb 81       	ldd	r30, Y+3	; 0x03
     6e6:	fc 81       	ldd	r31, Y+4	; 0x04
     6e8:	09 95       	icall
    // Завершаем процесс
    syscall(6,(void *)proc);
     6ea:	2d 81       	ldd	r18, Y+5	; 0x05
     6ec:	3e 81       	ldd	r19, Y+6	; 0x06
     6ee:	86 e0       	ldi	r24, 0x06	; 6
     6f0:	b9 01       	movw	r22, r18
     6f2:	0e 94 4a 02 	call	0x494	; 0x494 <syscall>
}
     6f6:	26 96       	adiw	r28, 0x06	; 6
     6f8:	0f b6       	in	r0, 0x3f	; 63
     6fa:	f8 94       	cli
     6fc:	de bf       	out	0x3e, r29	; 62
     6fe:	0f be       	out	0x3f, r0	; 63
     700:	cd bf       	out	0x3d, r28	; 61
     702:	cf 91       	pop	r28
     704:	df 91       	pop	r29
     706:	08 95       	ret

00000708 <scall_proc_flag_stop>:
//---------------------------------------------------------------------------------------------
//7
void scall_proc_flag_stop( void * arg )
{
     708:	df 93       	push	r29
     70a:	cf 93       	push	r28
     70c:	00 d0       	rcall	.+0      	; 0x70e <scall_proc_flag_stop+0x6>
     70e:	cd b7       	in	r28, 0x3d	; 61
     710:	de b7       	in	r29, 0x3e	; 62
     712:	9a 83       	std	Y+2, r25	; 0x02
     714:	89 83       	std	Y+1, r24	; 0x01
    _proc_flag_stop_isr( *((flag_t *)arg) );
     716:	e9 81       	ldd	r30, Y+1	; 0x01
     718:	fa 81       	ldd	r31, Y+2	; 0x02
     71a:	80 81       	ld	r24, Z
     71c:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <_proc_flag_stop_isr>
}
     720:	0f 90       	pop	r0
     722:	0f 90       	pop	r0
     724:	cf 91       	pop	r28
     726:	df 91       	pop	r29
     728:	08 95       	ret

0000072a <scall_sig_init>:
///=================================================================
///                         Сигналы
//8
void scall_sig_init( void * arg )
{
     72a:	df 93       	push	r29
     72c:	cf 93       	push	r28
     72e:	00 d0       	rcall	.+0      	; 0x730 <scall_sig_init+0x6>
     730:	cd b7       	in	r28, 0x3d	; 61
     732:	de b7       	in	r29, 0x3e	; 62
     734:	9a 83       	std	Y+2, r25	; 0x02
     736:	89 83       	std	Y+1, r24	; 0x01
    sig_init_isr( (sig_t *)arg );
     738:	89 81       	ldd	r24, Y+1	; 0x01
     73a:	9a 81       	ldd	r25, Y+2	; 0x02
     73c:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <sig_init_isr>
}
     740:	0f 90       	pop	r0
     742:	0f 90       	pop	r0
     744:	cf 91       	pop	r28
     746:	df 91       	pop	r29
     748:	08 95       	ret

0000074a <scall_sig_wait>:
    syscall( 8, (void *)sig );
}
//---------------------------------------------------------------------------------------------
//9
void scall_sig_wait( void * arg )
{
     74a:	df 93       	push	r29
     74c:	cf 93       	push	r28
     74e:	00 d0       	rcall	.+0      	; 0x750 <scall_sig_wait+0x6>
     750:	cd b7       	in	r28, 0x3d	; 61
     752:	de b7       	in	r29, 0x3e	; 62
     754:	9a 83       	std	Y+2, r25	; 0x02
     756:	89 83       	std	Y+1, r24	; 0x01
    sig_wait_stage_1_isr( (sig_t *)arg );
     758:	89 81       	ldd	r24, Y+1	; 0x01
     75a:	9a 81       	ldd	r25, Y+2	; 0x02
     75c:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <sig_wait_stage_1_isr>
}
     760:	0f 90       	pop	r0
     762:	0f 90       	pop	r0
     764:	cf 91       	pop	r28
     766:	df 91       	pop	r29
     768:	08 95       	ret

0000076a <sig_wait>:
void sig_wait( sig_t * sig )
{
     76a:	df 93       	push	r29
     76c:	cf 93       	push	r28
     76e:	00 d0       	rcall	.+0      	; 0x770 <sig_wait+0x6>
     770:	0f 92       	push	r0
     772:	cd b7       	in	r28, 0x3d	; 61
     774:	de b7       	in	r29, 0x3e	; 62
     776:	9b 83       	std	Y+3, r25	; 0x03
     778:	8a 83       	std	Y+2, r24	; 0x02
    const flag_t mask = ~PROC_FLG_WAIT;
     77a:	8f ee       	ldi	r24, 0xEF	; 239
     77c:	89 83       	std	Y+1, r24	; 0x01
    syscall( 9, (void *)sig );
     77e:	2a 81       	ldd	r18, Y+2	; 0x02
     780:	3b 81       	ldd	r19, Y+3	; 0x03
     782:	89 e0       	ldi	r24, 0x09	; 9
     784:	b9 01       	movw	r22, r18
     786:	0e 94 4a 02 	call	0x494	; 0x494 <syscall>
    syscall( 7, (void *)&mask );/// Останов в случае необходимости
     78a:	87 e0       	ldi	r24, 0x07	; 7
     78c:	9e 01       	movw	r18, r28
     78e:	2f 5f       	subi	r18, 0xFF	; 255
     790:	3f 4f       	sbci	r19, 0xFF	; 255
     792:	b9 01       	movw	r22, r18
     794:	0e 94 4a 02 	call	0x494	; 0x494 <syscall>
}
     798:	0f 90       	pop	r0
     79a:	0f 90       	pop	r0
     79c:	0f 90       	pop	r0
     79e:	cf 91       	pop	r28
     7a0:	df 91       	pop	r29
     7a2:	08 95       	ret

000007a4 <scall_sig_signal>:
//---------------------------------------------------------------------------------------------
//10
void scall_sig_signal( void * arg )
{
     7a4:	df 93       	push	r29
     7a6:	cf 93       	push	r28
     7a8:	00 d0       	rcall	.+0      	; 0x7aa <scall_sig_signal+0x6>
     7aa:	cd b7       	in	r28, 0x3d	; 61
     7ac:	de b7       	in	r29, 0x3e	; 62
     7ae:	9a 83       	std	Y+2, r25	; 0x02
     7b0:	89 83       	std	Y+1, r24	; 0x01
    sig_signal_isr( (sig_t *)arg );
     7b2:	89 81       	ldd	r24, Y+1	; 0x01
     7b4:	9a 81       	ldd	r25, Y+2	; 0x02
     7b6:	0e 94 20 10 	call	0x2040	; 0x2040 <sig_signal_isr>
}
     7ba:	0f 90       	pop	r0
     7bc:	0f 90       	pop	r0
     7be:	cf 91       	pop	r28
     7c0:	df 91       	pop	r29
     7c2:	08 95       	ret

000007c4 <sig_signal>:
void sig_signal( sig_t * sig )
{
     7c4:	df 93       	push	r29
     7c6:	cf 93       	push	r28
     7c8:	00 d0       	rcall	.+0      	; 0x7ca <sig_signal+0x6>
     7ca:	cd b7       	in	r28, 0x3d	; 61
     7cc:	de b7       	in	r29, 0x3e	; 62
     7ce:	9a 83       	std	Y+2, r25	; 0x02
     7d0:	89 83       	std	Y+1, r24	; 0x01
    syscall( 10, (void *)sig );
     7d2:	29 81       	ldd	r18, Y+1	; 0x01
     7d4:	3a 81       	ldd	r19, Y+2	; 0x02
     7d6:	8a e0       	ldi	r24, 0x0A	; 10
     7d8:	b9 01       	movw	r22, r18
     7da:	0e 94 4a 02 	call	0x494	; 0x494 <syscall>
}
     7de:	0f 90       	pop	r0
     7e0:	0f 90       	pop	r0
     7e2:	cf 91       	pop	r28
     7e4:	df 91       	pop	r29
     7e6:	08 95       	ret

000007e8 <scall_sig_broadcast>:
//---------------------------------------------------------------------------------------------
//11
void scall_sig_broadcast( void * arg )
{
     7e8:	df 93       	push	r29
     7ea:	cf 93       	push	r28
     7ec:	00 d0       	rcall	.+0      	; 0x7ee <scall_sig_broadcast+0x6>
     7ee:	cd b7       	in	r28, 0x3d	; 61
     7f0:	de b7       	in	r29, 0x3e	; 62
     7f2:	9a 83       	std	Y+2, r25	; 0x02
     7f4:	89 83       	std	Y+1, r24	; 0x01
    sig_broadcast_isr( (sig_t *)arg );
     7f6:	89 81       	ldd	r24, Y+1	; 0x01
     7f8:	9a 81       	ldd	r25, Y+2	; 0x02
     7fa:	0e 94 49 10 	call	0x2092	; 0x2092 <sig_broadcast_isr>
}
     7fe:	0f 90       	pop	r0
     800:	0f 90       	pop	r0
     802:	cf 91       	pop	r28
     804:	df 91       	pop	r29
     806:	08 95       	ret

00000808 <sig_broadcast>:
void sig_broadcast( sig_t * sig )
{
     808:	df 93       	push	r29
     80a:	cf 93       	push	r28
     80c:	00 d0       	rcall	.+0      	; 0x80e <sig_broadcast+0x6>
     80e:	cd b7       	in	r28, 0x3d	; 61
     810:	de b7       	in	r29, 0x3e	; 62
     812:	9a 83       	std	Y+2, r25	; 0x02
     814:	89 83       	std	Y+1, r24	; 0x01
    syscall( 11, (void *)sig );
     816:	29 81       	ldd	r18, Y+1	; 0x01
     818:	3a 81       	ldd	r19, Y+2	; 0x02
     81a:	8b e0       	ldi	r24, 0x0B	; 11
     81c:	b9 01       	movw	r22, r18
     81e:	0e 94 4a 02 	call	0x494	; 0x494 <syscall>
}
     822:	0f 90       	pop	r0
     824:	0f 90       	pop	r0
     826:	cf 91       	pop	r28
     828:	df 91       	pop	r29
     82a:	08 95       	ret

0000082c <scall_sem_init>:
///=================================================================
///                         Семафоры
//12
void scall_sem_init( void * arg )
{
     82c:	df 93       	push	r29
     82e:	cf 93       	push	r28
     830:	00 d0       	rcall	.+0      	; 0x832 <scall_sem_init+0x6>
     832:	cd b7       	in	r28, 0x3d	; 61
     834:	de b7       	in	r29, 0x3e	; 62
     836:	9a 83       	std	Y+2, r25	; 0x02
     838:	89 83       	std	Y+1, r24	; 0x01
    sem_init_isr( ((sem_init_arg_t *)arg)->sem, ((sem_init_arg_t *)arg)->count );
     83a:	e9 81       	ldd	r30, Y+1	; 0x01
     83c:	fa 81       	ldd	r31, Y+2	; 0x02
     83e:	80 81       	ld	r24, Z
     840:	91 81       	ldd	r25, Z+1	; 0x01
     842:	e9 81       	ldd	r30, Y+1	; 0x01
     844:	fa 81       	ldd	r31, Y+2	; 0x02
     846:	22 81       	ldd	r18, Z+2	; 0x02
     848:	33 81       	ldd	r19, Z+3	; 0x03
     84a:	b9 01       	movw	r22, r18
     84c:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <sem_init_isr>
}
     850:	0f 90       	pop	r0
     852:	0f 90       	pop	r0
     854:	cf 91       	pop	r28
     856:	df 91       	pop	r29
     858:	08 95       	ret

0000085a <scall_sem_lock>:
    syscall( 12, (void *)&scarg );
}
//----------------------------------------------------------------------
//13
void scall_sem_lock( void * arg )
{
     85a:	0f 93       	push	r16
     85c:	1f 93       	push	r17
     85e:	df 93       	push	r29
     860:	cf 93       	push	r28
     862:	00 d0       	rcall	.+0      	; 0x864 <scall_sem_lock+0xa>
     864:	cd b7       	in	r28, 0x3d	; 61
     866:	de b7       	in	r29, 0x3e	; 62
     868:	9a 83       	std	Y+2, r25	; 0x02
     86a:	89 83       	std	Y+1, r24	; 0x01
    ((sem_lock_arg_t *)arg)->scall_ret = _sem_lock( ((sem_lock_arg_t *)arg)->sem );
     86c:	09 81       	ldd	r16, Y+1	; 0x01
     86e:	1a 81       	ldd	r17, Y+2	; 0x02
     870:	e9 81       	ldd	r30, Y+1	; 0x01
     872:	fa 81       	ldd	r31, Y+2	; 0x02
     874:	80 81       	ld	r24, Z
     876:	91 81       	ldd	r25, Z+1	; 0x01
     878:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <_sem_lock>
     87c:	f8 01       	movw	r30, r16
     87e:	82 83       	std	Z+2, r24	; 0x02
}
     880:	0f 90       	pop	r0
     882:	0f 90       	pop	r0
     884:	cf 91       	pop	r28
     886:	df 91       	pop	r29
     888:	1f 91       	pop	r17
     88a:	0f 91       	pop	r16
     88c:	08 95       	ret

0000088e <scall_sem_unlock>:
    return scarg.scall_ret;
}
//----------------------------------------------------------------------
//14
void scall_sem_unlock( void * arg )
{
     88e:	df 93       	push	r29
     890:	cf 93       	push	r28
     892:	00 d0       	rcall	.+0      	; 0x894 <scall_sem_unlock+0x6>
     894:	cd b7       	in	r28, 0x3d	; 61
     896:	de b7       	in	r29, 0x3e	; 62
     898:	9a 83       	std	Y+2, r25	; 0x02
     89a:	89 83       	std	Y+1, r24	; 0x01
    _sem_unlock( (sem_t *)arg );
     89c:	89 81       	ldd	r24, Y+1	; 0x01
     89e:	9a 81       	ldd	r25, Y+2	; 0x02
     8a0:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <_sem_unlock>
}
     8a4:	0f 90       	pop	r0
     8a6:	0f 90       	pop	r0
     8a8:	cf 91       	pop	r28
     8aa:	df 91       	pop	r29
     8ac:	08 95       	ret

000008ae <scall_mutex_init>:
}
///=================================================================
///                         Мьютексы
//15
void scall_mutex_init(void * arg)
{
     8ae:	df 93       	push	r29
     8b0:	cf 93       	push	r28
     8b2:	00 d0       	rcall	.+0      	; 0x8b4 <scall_mutex_init+0x6>
     8b4:	cd b7       	in	r28, 0x3d	; 61
     8b6:	de b7       	in	r29, 0x3e	; 62
     8b8:	9a 83       	std	Y+2, r25	; 0x02
     8ba:	89 83       	std	Y+1, r24	; 0x01
    mutex_init_isr(
     8bc:	e9 81       	ldd	r30, Y+1	; 0x01
     8be:	fa 81       	ldd	r31, Y+2	; 0x02
     8c0:	80 81       	ld	r24, Z
     8c2:	91 81       	ldd	r25, Z+1	; 0x01
     8c4:	e9 81       	ldd	r30, Y+1	; 0x01
     8c6:	fa 81       	ldd	r31, Y+2	; 0x02
     8c8:	22 81       	ldd	r18, Z+2	; 0x02
     8ca:	62 2f       	mov	r22, r18
     8cc:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <mutex_init_isr>
               ((mutex_init_arg_t *)arg)->mutex
#ifdef CONFIG_USE_HIGHEST_LOCKER
               ,((mutex_init_arg_t *)arg)->prio
#endif // CONFIG_USE_HIGHEST_LOCKER
               );
}
     8d0:	0f 90       	pop	r0
     8d2:	0f 90       	pop	r0
     8d4:	cf 91       	pop	r28
     8d6:	df 91       	pop	r29
     8d8:	08 95       	ret

000008da <scall_mutex_lock>:
    syscall( 15, (void *)&scarg );
}
//----------------------------------------------------------------------
//16
void scall_mutex_lock(void * arg)
{
     8da:	0f 93       	push	r16
     8dc:	1f 93       	push	r17
     8de:	df 93       	push	r29
     8e0:	cf 93       	push	r28
     8e2:	00 d0       	rcall	.+0      	; 0x8e4 <scall_mutex_lock+0xa>
     8e4:	cd b7       	in	r28, 0x3d	; 61
     8e6:	de b7       	in	r29, 0x3e	; 62
     8e8:	9a 83       	std	Y+2, r25	; 0x02
     8ea:	89 83       	std	Y+1, r24	; 0x01
    ((mutex_lock_arg_t *)arg)->scall_ret = _mutex_lock( ((mutex_lock_arg_t *)arg)->mutex );
     8ec:	09 81       	ldd	r16, Y+1	; 0x01
     8ee:	1a 81       	ldd	r17, Y+2	; 0x02
     8f0:	e9 81       	ldd	r30, Y+1	; 0x01
     8f2:	fa 81       	ldd	r31, Y+2	; 0x02
     8f4:	80 81       	ld	r24, Z
     8f6:	91 81       	ldd	r25, Z+1	; 0x01
     8f8:	0e 94 03 0a 	call	0x1406	; 0x1406 <_mutex_lock>
     8fc:	f8 01       	movw	r30, r16
     8fe:	82 83       	std	Z+2, r24	; 0x02
}
     900:	0f 90       	pop	r0
     902:	0f 90       	pop	r0
     904:	cf 91       	pop	r28
     906:	df 91       	pop	r29
     908:	1f 91       	pop	r17
     90a:	0f 91       	pop	r16
     90c:	08 95       	ret

0000090e <scall_mutex_try_lock>:
}
// Захват
//----------------------------------------------------------------------
//17
void scall_mutex_try_lock(void * arg)
{
     90e:	0f 93       	push	r16
     910:	1f 93       	push	r17
     912:	df 93       	push	r29
     914:	cf 93       	push	r28
     916:	00 d0       	rcall	.+0      	; 0x918 <scall_mutex_try_lock+0xa>
     918:	cd b7       	in	r28, 0x3d	; 61
     91a:	de b7       	in	r29, 0x3e	; 62
     91c:	9a 83       	std	Y+2, r25	; 0x02
     91e:	89 83       	std	Y+1, r24	; 0x01
    ((mutex_lock_arg_t *)arg)->scall_ret = _mutex_try_lock( ((mutex_lock_arg_t *)arg)->mutex );
     920:	09 81       	ldd	r16, Y+1	; 0x01
     922:	1a 81       	ldd	r17, Y+2	; 0x02
     924:	e9 81       	ldd	r30, Y+1	; 0x01
     926:	fa 81       	ldd	r31, Y+2	; 0x02
     928:	80 81       	ld	r24, Z
     92a:	91 81       	ldd	r25, Z+1	; 0x01
     92c:	0e 94 4b 0a 	call	0x1496	; 0x1496 <_mutex_try_lock>
     930:	f8 01       	movw	r30, r16
     932:	82 83       	std	Z+2, r24	; 0x02
}
     934:	0f 90       	pop	r0
     936:	0f 90       	pop	r0
     938:	cf 91       	pop	r28
     93a:	df 91       	pop	r29
     93c:	1f 91       	pop	r17
     93e:	0f 91       	pop	r16
     940:	08 95       	ret

00000942 <scall_mutex_unlock>:
    return scarg.scall_ret;
}
//----------------------------------------------------------------------
//18
void scall_mutex_unlock(void * arg)
{
     942:	df 93       	push	r29
     944:	cf 93       	push	r28
     946:	00 d0       	rcall	.+0      	; 0x948 <scall_mutex_unlock+0x6>
     948:	cd b7       	in	r28, 0x3d	; 61
     94a:	de b7       	in	r29, 0x3e	; 62
     94c:	9a 83       	std	Y+2, r25	; 0x02
     94e:	89 83       	std	Y+1, r24	; 0x01
    _mutex_unlock( (mutex_t *)arg );
     950:	89 81       	ldd	r24, Y+1	; 0x01
     952:	9a 81       	ldd	r25, Y+2	; 0x02
     954:	0e 94 77 0a 	call	0x14ee	; 0x14ee <_mutex_unlock>
}
     958:	0f 90       	pop	r0
     95a:	0f 90       	pop	r0
     95c:	cf 91       	pop	r28
     95e:	df 91       	pop	r29
     960:	08 95       	ret

00000962 <osbme_init_stack>:
*                                                                                        *
*****************************************************************************************/
#include <avr/io.h>
#include "../../osbme.h"
void * osbme_init_stack( void * top_of_stack, osbme_code_t code, void * arg )
{
     962:	df 93       	push	r29
     964:	cf 93       	push	r28
     966:	cd b7       	in	r28, 0x3d	; 61
     968:	de b7       	in	r29, 0x3e	; 62
     96a:	2a 97       	sbiw	r28, 0x0a	; 10
     96c:	0f b6       	in	r0, 0x3f	; 63
     96e:	f8 94       	cli
     970:	de bf       	out	0x3e, r29	; 62
     972:	0f be       	out	0x3f, r0	; 63
     974:	cd bf       	out	0x3d, r28	; 61
     976:	9e 83       	std	Y+6, r25	; 0x06
     978:	8d 83       	std	Y+5, r24	; 0x05
     97a:	78 87       	std	Y+8, r23	; 0x08
     97c:	6f 83       	std	Y+7, r22	; 0x07
     97e:	5a 87       	std	Y+10, r21	; 0x0a
     980:	49 87       	std	Y+9, r20	; 0x09
    char * tos = (char *)top_of_stack;
     982:	8d 81       	ldd	r24, Y+5	; 0x05
     984:	9e 81       	ldd	r25, Y+6	; 0x06
     986:	9c 83       	std	Y+4, r25	; 0x04
     988:	8b 83       	std	Y+3, r24	; 0x03
    //*tos-- = 0x11;
    //*tos-- = 0x22;
    //*tos-- = 0x33;

    // return address
    unsigned short tmp = (unsigned short)code;
     98a:	8f 81       	ldd	r24, Y+7	; 0x07
     98c:	98 85       	ldd	r25, Y+8	; 0x08
     98e:	9a 83       	std	Y+2, r25	; 0x02
     990:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (char)(tmp&(unsigned short)0x00ff);
     992:	89 81       	ldd	r24, Y+1	; 0x01
     994:	eb 81       	ldd	r30, Y+3	; 0x03
     996:	fc 81       	ldd	r31, Y+4	; 0x04
     998:	80 83       	st	Z, r24
     99a:	8b 81       	ldd	r24, Y+3	; 0x03
     99c:	9c 81       	ldd	r25, Y+4	; 0x04
     99e:	01 97       	sbiw	r24, 0x01	; 1
     9a0:	9c 83       	std	Y+4, r25	; 0x04
     9a2:	8b 83       	std	Y+3, r24	; 0x03
    tmp>>=8;
     9a4:	89 81       	ldd	r24, Y+1	; 0x01
     9a6:	9a 81       	ldd	r25, Y+2	; 0x02
     9a8:	89 2f       	mov	r24, r25
     9aa:	99 27       	eor	r25, r25
     9ac:	9a 83       	std	Y+2, r25	; 0x02
     9ae:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (char)(tmp&(unsigned short)0x00ff);
     9b0:	89 81       	ldd	r24, Y+1	; 0x01
     9b2:	eb 81       	ldd	r30, Y+3	; 0x03
     9b4:	fc 81       	ldd	r31, Y+4	; 0x04
     9b6:	80 83       	st	Z, r24
     9b8:	8b 81       	ldd	r24, Y+3	; 0x03
     9ba:	9c 81       	ldd	r25, Y+4	; 0x04
     9bc:	01 97       	sbiw	r24, 0x01	; 1
     9be:	9c 83       	std	Y+4, r25	; 0x04
     9c0:	8b 83       	std	Y+3, r24	; 0x03

    // s
    *tos-- = 0x00;
     9c2:	eb 81       	ldd	r30, Y+3	; 0x03
     9c4:	fc 81       	ldd	r31, Y+4	; 0x04
     9c6:	10 82       	st	Z, r1
     9c8:	8b 81       	ldd	r24, Y+3	; 0x03
     9ca:	9c 81       	ldd	r25, Y+4	; 0x04
     9cc:	01 97       	sbiw	r24, 0x01	; 1
     9ce:	9c 83       	std	Y+4, r25	; 0x04
     9d0:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x00;// r1 must B 0
     9d2:	eb 81       	ldd	r30, Y+3	; 0x03
     9d4:	fc 81       	ldd	r31, Y+4	; 0x04
     9d6:	10 82       	st	Z, r1
     9d8:	8b 81       	ldd	r24, Y+3	; 0x03
     9da:	9c 81       	ldd	r25, Y+4	; 0x04
     9dc:	01 97       	sbiw	r24, 0x01	; 1
     9de:	9c 83       	std	Y+4, r25	; 0x04
     9e0:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x02;// r2
     9e2:	eb 81       	ldd	r30, Y+3	; 0x03
     9e4:	fc 81       	ldd	r31, Y+4	; 0x04
     9e6:	82 e0       	ldi	r24, 0x02	; 2
     9e8:	80 83       	st	Z, r24
     9ea:	8b 81       	ldd	r24, Y+3	; 0x03
     9ec:	9c 81       	ldd	r25, Y+4	; 0x04
     9ee:	01 97       	sbiw	r24, 0x01	; 1
     9f0:	9c 83       	std	Y+4, r25	; 0x04
     9f2:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x80;// SREG: enable interrupts
     9f4:	eb 81       	ldd	r30, Y+3	; 0x03
     9f6:	fc 81       	ldd	r31, Y+4	; 0x04
     9f8:	80 e8       	ldi	r24, 0x80	; 128
     9fa:	80 83       	st	Z, r24
     9fc:	8b 81       	ldd	r24, Y+3	; 0x03
     9fe:	9c 81       	ldd	r25, Y+4	; 0x04
     a00:	01 97       	sbiw	r24, 0x01	; 1
     a02:	9c 83       	std	Y+4, r25	; 0x04
     a04:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x03;
     a06:	eb 81       	ldd	r30, Y+3	; 0x03
     a08:	fc 81       	ldd	r31, Y+4	; 0x04
     a0a:	83 e0       	ldi	r24, 0x03	; 3
     a0c:	80 83       	st	Z, r24
     a0e:	8b 81       	ldd	r24, Y+3	; 0x03
     a10:	9c 81       	ldd	r25, Y+4	; 0x04
     a12:	01 97       	sbiw	r24, 0x01	; 1
     a14:	9c 83       	std	Y+4, r25	; 0x04
     a16:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x04;
     a18:	eb 81       	ldd	r30, Y+3	; 0x03
     a1a:	fc 81       	ldd	r31, Y+4	; 0x04
     a1c:	84 e0       	ldi	r24, 0x04	; 4
     a1e:	80 83       	st	Z, r24
     a20:	8b 81       	ldd	r24, Y+3	; 0x03
     a22:	9c 81       	ldd	r25, Y+4	; 0x04
     a24:	01 97       	sbiw	r24, 0x01	; 1
     a26:	9c 83       	std	Y+4, r25	; 0x04
     a28:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x05;
     a2a:	eb 81       	ldd	r30, Y+3	; 0x03
     a2c:	fc 81       	ldd	r31, Y+4	; 0x04
     a2e:	85 e0       	ldi	r24, 0x05	; 5
     a30:	80 83       	st	Z, r24
     a32:	8b 81       	ldd	r24, Y+3	; 0x03
     a34:	9c 81       	ldd	r25, Y+4	; 0x04
     a36:	01 97       	sbiw	r24, 0x01	; 1
     a38:	9c 83       	std	Y+4, r25	; 0x04
     a3a:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x06;
     a3c:	eb 81       	ldd	r30, Y+3	; 0x03
     a3e:	fc 81       	ldd	r31, Y+4	; 0x04
     a40:	86 e0       	ldi	r24, 0x06	; 6
     a42:	80 83       	st	Z, r24
     a44:	8b 81       	ldd	r24, Y+3	; 0x03
     a46:	9c 81       	ldd	r25, Y+4	; 0x04
     a48:	01 97       	sbiw	r24, 0x01	; 1
     a4a:	9c 83       	std	Y+4, r25	; 0x04
     a4c:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x07;
     a4e:	eb 81       	ldd	r30, Y+3	; 0x03
     a50:	fc 81       	ldd	r31, Y+4	; 0x04
     a52:	87 e0       	ldi	r24, 0x07	; 7
     a54:	80 83       	st	Z, r24
     a56:	8b 81       	ldd	r24, Y+3	; 0x03
     a58:	9c 81       	ldd	r25, Y+4	; 0x04
     a5a:	01 97       	sbiw	r24, 0x01	; 1
     a5c:	9c 83       	std	Y+4, r25	; 0x04
     a5e:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x08;
     a60:	eb 81       	ldd	r30, Y+3	; 0x03
     a62:	fc 81       	ldd	r31, Y+4	; 0x04
     a64:	88 e0       	ldi	r24, 0x08	; 8
     a66:	80 83       	st	Z, r24
     a68:	8b 81       	ldd	r24, Y+3	; 0x03
     a6a:	9c 81       	ldd	r25, Y+4	; 0x04
     a6c:	01 97       	sbiw	r24, 0x01	; 1
     a6e:	9c 83       	std	Y+4, r25	; 0x04
     a70:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x09;
     a72:	eb 81       	ldd	r30, Y+3	; 0x03
     a74:	fc 81       	ldd	r31, Y+4	; 0x04
     a76:	89 e0       	ldi	r24, 0x09	; 9
     a78:	80 83       	st	Z, r24
     a7a:	8b 81       	ldd	r24, Y+3	; 0x03
     a7c:	9c 81       	ldd	r25, Y+4	; 0x04
     a7e:	01 97       	sbiw	r24, 0x01	; 1
     a80:	9c 83       	std	Y+4, r25	; 0x04
     a82:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x10;
     a84:	eb 81       	ldd	r30, Y+3	; 0x03
     a86:	fc 81       	ldd	r31, Y+4	; 0x04
     a88:	80 e1       	ldi	r24, 0x10	; 16
     a8a:	80 83       	st	Z, r24
     a8c:	8b 81       	ldd	r24, Y+3	; 0x03
     a8e:	9c 81       	ldd	r25, Y+4	; 0x04
     a90:	01 97       	sbiw	r24, 0x01	; 1
     a92:	9c 83       	std	Y+4, r25	; 0x04
     a94:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x11;
     a96:	eb 81       	ldd	r30, Y+3	; 0x03
     a98:	fc 81       	ldd	r31, Y+4	; 0x04
     a9a:	81 e1       	ldi	r24, 0x11	; 17
     a9c:	80 83       	st	Z, r24
     a9e:	8b 81       	ldd	r24, Y+3	; 0x03
     aa0:	9c 81       	ldd	r25, Y+4	; 0x04
     aa2:	01 97       	sbiw	r24, 0x01	; 1
     aa4:	9c 83       	std	Y+4, r25	; 0x04
     aa6:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x12;
     aa8:	eb 81       	ldd	r30, Y+3	; 0x03
     aaa:	fc 81       	ldd	r31, Y+4	; 0x04
     aac:	82 e1       	ldi	r24, 0x12	; 18
     aae:	80 83       	st	Z, r24
     ab0:	8b 81       	ldd	r24, Y+3	; 0x03
     ab2:	9c 81       	ldd	r25, Y+4	; 0x04
     ab4:	01 97       	sbiw	r24, 0x01	; 1
     ab6:	9c 83       	std	Y+4, r25	; 0x04
     ab8:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x13;
     aba:	eb 81       	ldd	r30, Y+3	; 0x03
     abc:	fc 81       	ldd	r31, Y+4	; 0x04
     abe:	83 e1       	ldi	r24, 0x13	; 19
     ac0:	80 83       	st	Z, r24
     ac2:	8b 81       	ldd	r24, Y+3	; 0x03
     ac4:	9c 81       	ldd	r25, Y+4	; 0x04
     ac6:	01 97       	sbiw	r24, 0x01	; 1
     ac8:	9c 83       	std	Y+4, r25	; 0x04
     aca:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x14;
     acc:	eb 81       	ldd	r30, Y+3	; 0x03
     ace:	fc 81       	ldd	r31, Y+4	; 0x04
     ad0:	84 e1       	ldi	r24, 0x14	; 20
     ad2:	80 83       	st	Z, r24
     ad4:	8b 81       	ldd	r24, Y+3	; 0x03
     ad6:	9c 81       	ldd	r25, Y+4	; 0x04
     ad8:	01 97       	sbiw	r24, 0x01	; 1
     ada:	9c 83       	std	Y+4, r25	; 0x04
     adc:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x15;
     ade:	eb 81       	ldd	r30, Y+3	; 0x03
     ae0:	fc 81       	ldd	r31, Y+4	; 0x04
     ae2:	85 e1       	ldi	r24, 0x15	; 21
     ae4:	80 83       	st	Z, r24
     ae6:	8b 81       	ldd	r24, Y+3	; 0x03
     ae8:	9c 81       	ldd	r25, Y+4	; 0x04
     aea:	01 97       	sbiw	r24, 0x01	; 1
     aec:	9c 83       	std	Y+4, r25	; 0x04
     aee:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x16;
     af0:	eb 81       	ldd	r30, Y+3	; 0x03
     af2:	fc 81       	ldd	r31, Y+4	; 0x04
     af4:	86 e1       	ldi	r24, 0x16	; 22
     af6:	80 83       	st	Z, r24
     af8:	8b 81       	ldd	r24, Y+3	; 0x03
     afa:	9c 81       	ldd	r25, Y+4	; 0x04
     afc:	01 97       	sbiw	r24, 0x01	; 1
     afe:	9c 83       	std	Y+4, r25	; 0x04
     b00:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x17;
     b02:	eb 81       	ldd	r30, Y+3	; 0x03
     b04:	fc 81       	ldd	r31, Y+4	; 0x04
     b06:	87 e1       	ldi	r24, 0x17	; 23
     b08:	80 83       	st	Z, r24
     b0a:	8b 81       	ldd	r24, Y+3	; 0x03
     b0c:	9c 81       	ldd	r25, Y+4	; 0x04
     b0e:	01 97       	sbiw	r24, 0x01	; 1
     b10:	9c 83       	std	Y+4, r25	; 0x04
     b12:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x18;
     b14:	eb 81       	ldd	r30, Y+3	; 0x03
     b16:	fc 81       	ldd	r31, Y+4	; 0x04
     b18:	88 e1       	ldi	r24, 0x18	; 24
     b1a:	80 83       	st	Z, r24
     b1c:	8b 81       	ldd	r24, Y+3	; 0x03
     b1e:	9c 81       	ldd	r25, Y+4	; 0x04
     b20:	01 97       	sbiw	r24, 0x01	; 1
     b22:	9c 83       	std	Y+4, r25	; 0x04
     b24:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x19;
     b26:	eb 81       	ldd	r30, Y+3	; 0x03
     b28:	fc 81       	ldd	r31, Y+4	; 0x04
     b2a:	89 e1       	ldi	r24, 0x19	; 25
     b2c:	80 83       	st	Z, r24
     b2e:	8b 81       	ldd	r24, Y+3	; 0x03
     b30:	9c 81       	ldd	r25, Y+4	; 0x04
     b32:	01 97       	sbiw	r24, 0x01	; 1
     b34:	9c 83       	std	Y+4, r25	; 0x04
     b36:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x20;
     b38:	eb 81       	ldd	r30, Y+3	; 0x03
     b3a:	fc 81       	ldd	r31, Y+4	; 0x04
     b3c:	80 e2       	ldi	r24, 0x20	; 32
     b3e:	80 83       	st	Z, r24
     b40:	8b 81       	ldd	r24, Y+3	; 0x03
     b42:	9c 81       	ldd	r25, Y+4	; 0x04
     b44:	01 97       	sbiw	r24, 0x01	; 1
     b46:	9c 83       	std	Y+4, r25	; 0x04
     b48:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x21;
     b4a:	eb 81       	ldd	r30, Y+3	; 0x03
     b4c:	fc 81       	ldd	r31, Y+4	; 0x04
     b4e:	81 e2       	ldi	r24, 0x21	; 33
     b50:	80 83       	st	Z, r24
     b52:	8b 81       	ldd	r24, Y+3	; 0x03
     b54:	9c 81       	ldd	r25, Y+4	; 0x04
     b56:	01 97       	sbiw	r24, 0x01	; 1
     b58:	9c 83       	std	Y+4, r25	; 0x04
     b5a:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x22;
     b5c:	eb 81       	ldd	r30, Y+3	; 0x03
     b5e:	fc 81       	ldd	r31, Y+4	; 0x04
     b60:	82 e2       	ldi	r24, 0x22	; 34
     b62:	80 83       	st	Z, r24
     b64:	8b 81       	ldd	r24, Y+3	; 0x03
     b66:	9c 81       	ldd	r25, Y+4	; 0x04
     b68:	01 97       	sbiw	r24, 0x01	; 1
     b6a:	9c 83       	std	Y+4, r25	; 0x04
     b6c:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x23;
     b6e:	eb 81       	ldd	r30, Y+3	; 0x03
     b70:	fc 81       	ldd	r31, Y+4	; 0x04
     b72:	83 e2       	ldi	r24, 0x23	; 35
     b74:	80 83       	st	Z, r24
     b76:	8b 81       	ldd	r24, Y+3	; 0x03
     b78:	9c 81       	ldd	r25, Y+4	; 0x04
     b7a:	01 97       	sbiw	r24, 0x01	; 1
     b7c:	9c 83       	std	Y+4, r25	; 0x04
     b7e:	8b 83       	std	Y+3, r24	; 0x03

    tmp = (unsigned short)arg;
     b80:	89 85       	ldd	r24, Y+9	; 0x09
     b82:	9a 85       	ldd	r25, Y+10	; 0x0a
     b84:	9a 83       	std	Y+2, r25	; 0x02
     b86:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (char)(tmp&(unsigned short)0x00ff); // r24 LSByte of arg
     b88:	89 81       	ldd	r24, Y+1	; 0x01
     b8a:	eb 81       	ldd	r30, Y+3	; 0x03
     b8c:	fc 81       	ldd	r31, Y+4	; 0x04
     b8e:	80 83       	st	Z, r24
     b90:	8b 81       	ldd	r24, Y+3	; 0x03
     b92:	9c 81       	ldd	r25, Y+4	; 0x04
     b94:	01 97       	sbiw	r24, 0x01	; 1
     b96:	9c 83       	std	Y+4, r25	; 0x04
     b98:	8b 83       	std	Y+3, r24	; 0x03
    tmp>>=8;
     b9a:	89 81       	ldd	r24, Y+1	; 0x01
     b9c:	9a 81       	ldd	r25, Y+2	; 0x02
     b9e:	89 2f       	mov	r24, r25
     ba0:	99 27       	eor	r25, r25
     ba2:	9a 83       	std	Y+2, r25	; 0x02
     ba4:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (char)(tmp&(unsigned short)0x00ff); // r25 MSByte of arg
     ba6:	89 81       	ldd	r24, Y+1	; 0x01
     ba8:	eb 81       	ldd	r30, Y+3	; 0x03
     baa:	fc 81       	ldd	r31, Y+4	; 0x04
     bac:	80 83       	st	Z, r24
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	9c 81       	ldd	r25, Y+4	; 0x04
     bb2:	01 97       	sbiw	r24, 0x01	; 1
     bb4:	9c 83       	std	Y+4, r25	; 0x04
     bb6:	8b 83       	std	Y+3, r24	; 0x03

    *tos-- = 0x26;
     bb8:	eb 81       	ldd	r30, Y+3	; 0x03
     bba:	fc 81       	ldd	r31, Y+4	; 0x04
     bbc:	86 e2       	ldi	r24, 0x26	; 38
     bbe:	80 83       	st	Z, r24
     bc0:	8b 81       	ldd	r24, Y+3	; 0x03
     bc2:	9c 81       	ldd	r25, Y+4	; 0x04
     bc4:	01 97       	sbiw	r24, 0x01	; 1
     bc6:	9c 83       	std	Y+4, r25	; 0x04
     bc8:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x27;
     bca:	eb 81       	ldd	r30, Y+3	; 0x03
     bcc:	fc 81       	ldd	r31, Y+4	; 0x04
     bce:	87 e2       	ldi	r24, 0x27	; 39
     bd0:	80 83       	st	Z, r24
     bd2:	8b 81       	ldd	r24, Y+3	; 0x03
     bd4:	9c 81       	ldd	r25, Y+4	; 0x04
     bd6:	01 97       	sbiw	r24, 0x01	; 1
     bd8:	9c 83       	std	Y+4, r25	; 0x04
     bda:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x28;
     bdc:	eb 81       	ldd	r30, Y+3	; 0x03
     bde:	fc 81       	ldd	r31, Y+4	; 0x04
     be0:	88 e2       	ldi	r24, 0x28	; 40
     be2:	80 83       	st	Z, r24
     be4:	8b 81       	ldd	r24, Y+3	; 0x03
     be6:	9c 81       	ldd	r25, Y+4	; 0x04
     be8:	01 97       	sbiw	r24, 0x01	; 1
     bea:	9c 83       	std	Y+4, r25	; 0x04
     bec:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x29;
     bee:	eb 81       	ldd	r30, Y+3	; 0x03
     bf0:	fc 81       	ldd	r31, Y+4	; 0x04
     bf2:	89 e2       	ldi	r24, 0x29	; 41
     bf4:	80 83       	st	Z, r24
     bf6:	8b 81       	ldd	r24, Y+3	; 0x03
     bf8:	9c 81       	ldd	r25, Y+4	; 0x04
     bfa:	01 97       	sbiw	r24, 0x01	; 1
     bfc:	9c 83       	std	Y+4, r25	; 0x04
     bfe:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x30;
     c00:	eb 81       	ldd	r30, Y+3	; 0x03
     c02:	fc 81       	ldd	r31, Y+4	; 0x04
     c04:	80 e3       	ldi	r24, 0x30	; 48
     c06:	80 83       	st	Z, r24
     c08:	8b 81       	ldd	r24, Y+3	; 0x03
     c0a:	9c 81       	ldd	r25, Y+4	; 0x04
     c0c:	01 97       	sbiw	r24, 0x01	; 1
     c0e:	9c 83       	std	Y+4, r25	; 0x04
     c10:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x31;
     c12:	eb 81       	ldd	r30, Y+3	; 0x03
     c14:	fc 81       	ldd	r31, Y+4	; 0x04
     c16:	81 e3       	ldi	r24, 0x31	; 49
     c18:	80 83       	st	Z, r24
     c1a:	8b 81       	ldd	r24, Y+3	; 0x03
     c1c:	9c 81       	ldd	r25, Y+4	; 0x04
     c1e:	01 97       	sbiw	r24, 0x01	; 1
     c20:	9c 83       	std	Y+4, r25	; 0x04
     c22:	8b 83       	std	Y+3, r24	; 0x03
#ifdef RAMPZ
    *tos-- = 0xff;
#endif
    return((void *)tos);
     c24:	8b 81       	ldd	r24, Y+3	; 0x03
     c26:	9c 81       	ldd	r25, Y+4	; 0x04
}
     c28:	2a 96       	adiw	r28, 0x0a	; 10
     c2a:	0f b6       	in	r0, 0x3f	; 63
     c2c:	f8 94       	cli
     c2e:	de bf       	out	0x3e, r29	; 62
     c30:	0f be       	out	0x3f, r0	; 63
     c32:	cd bf       	out	0x3d, r28	; 61
     c34:	cf 91       	pop	r28
     c36:	df 91       	pop	r29
     c38:	08 95       	ret

00000c3a <enter_crit_sec>:
    if( kernel.sched[core].nested_crit_sec == (count_t)0 )enable_interrupts();
}

#else
void enter_crit_sec(void)
{
     c3a:	df 93       	push	r29
     c3c:	cf 93       	push	r28
     c3e:	cd b7       	in	r28, 0x3d	; 61
     c40:	de b7       	in	r29, 0x3e	; 62
    disable_interrupts();
     c42:	0e 94 bc 00 	call	0x178	; 0x178 <disable_interrupts>
    kernel.sched.nested_crit_sec++;
     c46:	80 91 c6 01 	lds	r24, 0x01C6
     c4a:	90 91 c7 01 	lds	r25, 0x01C7
     c4e:	01 96       	adiw	r24, 0x01	; 1
     c50:	90 93 c7 01 	sts	0x01C7, r25
     c54:	80 93 c6 01 	sts	0x01C6, r24
}
     c58:	cf 91       	pop	r28
     c5a:	df 91       	pop	r29
     c5c:	08 95       	ret

00000c5e <exit_crit_sec>:
void exit_crit_sec(void)
{
     c5e:	df 93       	push	r29
     c60:	cf 93       	push	r28
     c62:	cd b7       	in	r28, 0x3d	; 61
     c64:	de b7       	in	r29, 0x3e	; 62
    if( kernel.sched.nested_crit_sec != (count_t)0 )kernel.sched.nested_crit_sec--;
     c66:	80 91 c6 01 	lds	r24, 0x01C6
     c6a:	90 91 c7 01 	lds	r25, 0x01C7
     c6e:	00 97       	sbiw	r24, 0x00	; 0
     c70:	49 f0       	breq	.+18     	; 0xc84 <exit_crit_sec+0x26>
     c72:	80 91 c6 01 	lds	r24, 0x01C6
     c76:	90 91 c7 01 	lds	r25, 0x01C7
     c7a:	01 97       	sbiw	r24, 0x01	; 1
     c7c:	90 93 c7 01 	sts	0x01C7, r25
     c80:	80 93 c6 01 	sts	0x01C6, r24
    if( kernel.sched.nested_crit_sec == (count_t)0 )enable_interrupts();
     c84:	80 91 c6 01 	lds	r24, 0x01C6
     c88:	90 91 c7 01 	lds	r25, 0x01C7
     c8c:	00 97       	sbiw	r24, 0x00	; 0
     c8e:	11 f4       	brne	.+4      	; 0xc94 <exit_crit_sec+0x36>
     c90:	0e 94 c4 00 	call	0x188	; 0x188 <enable_interrupts>
}
     c94:	cf 91       	pop	r28
     c96:	df 91       	pop	r29
     c98:	08 95       	ret

00000c9a <gitem_init>:
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
// Инициация
void gitem_init(gitem_t * gitem, prio_t prio)
{
     c9a:	df 93       	push	r29
     c9c:	cf 93       	push	r28
     c9e:	00 d0       	rcall	.+0      	; 0xca0 <gitem_init+0x6>
     ca0:	00 d0       	rcall	.+0      	; 0xca2 <gitem_init+0x8>
     ca2:	0f 92       	push	r0
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
     ca8:	9c 83       	std	Y+4, r25	; 0x04
     caa:	8b 83       	std	Y+3, r24	; 0x03
     cac:	6d 83       	std	Y+5, r22	; 0x05
    group_t * group = &gitem->grp;
     cae:	8b 81       	ldd	r24, Y+3	; 0x03
     cb0:	9c 81       	ldd	r25, Y+4	; 0x04
     cb2:	06 96       	adiw	r24, 0x06	; 6
     cb4:	9a 83       	std	Y+2, r25	; 0x02
     cb6:	89 83       	std	Y+1, r24	; 0x01
    item_init( (item_t *)gitem );
     cb8:	8b 81       	ldd	r24, Y+3	; 0x03
     cba:	9c 81       	ldd	r25, Y+4	; 0x04
     cbc:	0e 94 33 09 	call	0x1266	; 0x1266 <item_init>
    group_init( group, prio );
     cc0:	89 81       	ldd	r24, Y+1	; 0x01
     cc2:	9a 81       	ldd	r25, Y+2	; 0x02
     cc4:	6d 81       	ldd	r22, Y+5	; 0x05
     cc6:	0e 94 a3 08 	call	0x1146	; 0x1146 <group_init>
    gitem->group = group;
     cca:	eb 81       	ldd	r30, Y+3	; 0x03
     ccc:	fc 81       	ldd	r31, Y+4	; 0x04
     cce:	89 81       	ldd	r24, Y+1	; 0x01
     cd0:	9a 81       	ldd	r25, Y+2	; 0x02
     cd2:	95 83       	std	Z+5, r25	; 0x05
     cd4:	84 83       	std	Z+4, r24	; 0x04
}
     cd6:	0f 90       	pop	r0
     cd8:	0f 90       	pop	r0
     cda:	0f 90       	pop	r0
     cdc:	0f 90       	pop	r0
     cde:	0f 90       	pop	r0
     ce0:	cf 91       	pop	r28
     ce2:	df 91       	pop	r29
     ce4:	08 95       	ret

00000ce6 <gitem_insert>:
// Вставить в список
void gitem_insert(gitem_t * gitem, xlist_t *xlist)
{
     ce6:	df 93       	push	r29
     ce8:	cf 93       	push	r28
     cea:	cd b7       	in	r28, 0x3d	; 61
     cec:	de b7       	in	r29, 0x3e	; 62
     cee:	28 97       	sbiw	r28, 0x08	; 8
     cf0:	0f b6       	in	r0, 0x3f	; 63
     cf2:	f8 94       	cli
     cf4:	de bf       	out	0x3e, r29	; 62
     cf6:	0f be       	out	0x3f, r0	; 63
     cf8:	cd bf       	out	0x3d, r28	; 61
     cfa:	9e 83       	std	Y+6, r25	; 0x06
     cfc:	8d 83       	std	Y+5, r24	; 0x05
     cfe:	78 87       	std	Y+8, r23	; 0x08
     d00:	6f 83       	std	Y+7, r22	; 0x07
    prio_t prio = gitem->group->prio;
     d02:	ed 81       	ldd	r30, Y+5	; 0x05
     d04:	fe 81       	ldd	r31, Y+6	; 0x06
     d06:	04 80       	ldd	r0, Z+4	; 0x04
     d08:	f5 81       	ldd	r31, Z+5	; 0x05
     d0a:	e0 2d       	mov	r30, r0
     d0c:	82 81       	ldd	r24, Z+2	; 0x02
     d0e:	8c 83       	std	Y+4, r24	; 0x04
    index_t mask = ((index_t)1)<<prio;
     d10:	8c 81       	ldd	r24, Y+4	; 0x04
     d12:	28 2f       	mov	r18, r24
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	02 c0       	rjmp	.+4      	; 0xd20 <gitem_insert+0x3a>
     d1c:	88 0f       	add	r24, r24
     d1e:	99 1f       	adc	r25, r25
     d20:	2a 95       	dec	r18
     d22:	e2 f7       	brpl	.-8      	; 0xd1c <gitem_insert+0x36>
     d24:	8b 83       	std	Y+3, r24	; 0x03
    item_t ** head = (item_t **)xlist + prio;
     d26:	2f 81       	ldd	r18, Y+7	; 0x07
     d28:	38 85       	ldd	r19, Y+8	; 0x08
     d2a:	8c 81       	ldd	r24, Y+4	; 0x04
     d2c:	88 2f       	mov	r24, r24
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	88 0f       	add	r24, r24
     d32:	99 1f       	adc	r25, r25
     d34:	82 0f       	add	r24, r18
     d36:	93 1f       	adc	r25, r19
     d38:	9a 83       	std	Y+2, r25	; 0x02
     d3a:	89 83       	std	Y+1, r24	; 0x01
    // Пуста ли часть списка с таким приоритетом
    if( ( xlist->index )& mask)
     d3c:	ef 81       	ldd	r30, Y+7	; 0x07
     d3e:	f8 85       	ldd	r31, Y+8	; 0x08
     d40:	90 89       	ldd	r25, Z+16	; 0x10
     d42:	8b 81       	ldd	r24, Y+3	; 0x03
     d44:	89 23       	and	r24, r25
     d46:	88 23       	and	r24, r24
     d48:	51 f0       	breq	.+20     	; 0xd5e <gitem_insert+0x78>
    {
        //Не пуста вставляем туда gitem
        item_insert( (item_t *)gitem, *head );
     d4a:	8d 81       	ldd	r24, Y+5	; 0x05
     d4c:	9e 81       	ldd	r25, Y+6	; 0x06
     d4e:	e9 81       	ldd	r30, Y+1	; 0x01
     d50:	fa 81       	ldd	r31, Y+2	; 0x02
     d52:	20 81       	ld	r18, Z
     d54:	31 81       	ldd	r19, Z+1	; 0x01
     d56:	b9 01       	movw	r22, r18
     d58:	0e 94 4b 09 	call	0x1296	; 0x1296 <item_insert>
     d5c:	0e c0       	rjmp	.+28     	; 0xd7a <gitem_insert+0x94>
    }
    else
    {
        // Пуста, gitem будет головой
        *head = (item_t *)gitem;
     d5e:	8d 81       	ldd	r24, Y+5	; 0x05
     d60:	9e 81       	ldd	r25, Y+6	; 0x06
     d62:	e9 81       	ldd	r30, Y+1	; 0x01
     d64:	fa 81       	ldd	r31, Y+2	; 0x02
     d66:	91 83       	std	Z+1, r25	; 0x01
     d68:	80 83       	st	Z, r24
        xlist->index |= mask;
     d6a:	ef 81       	ldd	r30, Y+7	; 0x07
     d6c:	f8 85       	ldd	r31, Y+8	; 0x08
     d6e:	90 89       	ldd	r25, Z+16	; 0x10
     d70:	8b 81       	ldd	r24, Y+3	; 0x03
     d72:	89 2b       	or	r24, r25
     d74:	ef 81       	ldd	r30, Y+7	; 0x07
     d76:	f8 85       	ldd	r31, Y+8	; 0x08
     d78:	80 8b       	std	Z+16, r24	; 0x10
    }
    gitem->group->link = (void *)xlist;
     d7a:	ed 81       	ldd	r30, Y+5	; 0x05
     d7c:	fe 81       	ldd	r31, Y+6	; 0x06
     d7e:	04 80       	ldd	r0, Z+4	; 0x04
     d80:	f5 81       	ldd	r31, Z+5	; 0x05
     d82:	e0 2d       	mov	r30, r0
     d84:	8f 81       	ldd	r24, Y+7	; 0x07
     d86:	98 85       	ldd	r25, Y+8	; 0x08
     d88:	91 83       	std	Z+1, r25	; 0x01
     d8a:	80 83       	st	Z, r24
}
     d8c:	28 96       	adiw	r28, 0x08	; 8
     d8e:	0f b6       	in	r0, 0x3f	; 63
     d90:	f8 94       	cli
     d92:	de bf       	out	0x3e, r29	; 62
     d94:	0f be       	out	0x3f, r0	; 63
     d96:	cd bf       	out	0x3d, r28	; 61
     d98:	cf 91       	pop	r28
     d9a:	df 91       	pop	r29
     d9c:	08 95       	ret

00000d9e <gitem_insert_group>:
 при этом gitem->group переходит в Пул

 Ограничения на gitem - он не должен быть сгруппирован в момент встаки в группу.
*/
void gitem_insert_group(gitem_t * gitem, xlist_t *xlist)
{
     d9e:	df 93       	push	r29
     da0:	cf 93       	push	r28
     da2:	cd b7       	in	r28, 0x3d	; 61
     da4:	de b7       	in	r29, 0x3e	; 62
     da6:	2a 97       	sbiw	r28, 0x0a	; 10
     da8:	0f b6       	in	r0, 0x3f	; 63
     daa:	f8 94       	cli
     dac:	de bf       	out	0x3e, r29	; 62
     dae:	0f be       	out	0x3f, r0	; 63
     db0:	cd bf       	out	0x3d, r28	; 61
     db2:	98 87       	std	Y+8, r25	; 0x08
     db4:	8f 83       	std	Y+7, r24	; 0x07
     db6:	7a 87       	std	Y+10, r23	; 0x0a
     db8:	69 87       	std	Y+9, r22	; 0x09
    prio_t prio = gitem->group->prio;
     dba:	ef 81       	ldd	r30, Y+7	; 0x07
     dbc:	f8 85       	ldd	r31, Y+8	; 0x08
     dbe:	04 80       	ldd	r0, Z+4	; 0x04
     dc0:	f5 81       	ldd	r31, Z+5	; 0x05
     dc2:	e0 2d       	mov	r30, r0
     dc4:	82 81       	ldd	r24, Z+2	; 0x02
     dc6:	8e 83       	std	Y+6, r24	; 0x06
    index_t mask = ((index_t)1)<<prio;
     dc8:	8e 81       	ldd	r24, Y+6	; 0x06
     dca:	28 2f       	mov	r18, r24
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	81 e0       	ldi	r24, 0x01	; 1
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	02 c0       	rjmp	.+4      	; 0xdd8 <gitem_insert_group+0x3a>
     dd4:	88 0f       	add	r24, r24
     dd6:	99 1f       	adc	r25, r25
     dd8:	2a 95       	dec	r18
     dda:	e2 f7       	brpl	.-8      	; 0xdd4 <gitem_insert_group+0x36>
     ddc:	8d 83       	std	Y+5, r24	; 0x05
    item_t ** head = (item_t **)xlist + prio;
     dde:	29 85       	ldd	r18, Y+9	; 0x09
     de0:	3a 85       	ldd	r19, Y+10	; 0x0a
     de2:	8e 81       	ldd	r24, Y+6	; 0x06
     de4:	88 2f       	mov	r24, r24
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	88 0f       	add	r24, r24
     dea:	99 1f       	adc	r25, r25
     dec:	82 0f       	add	r24, r18
     dee:	93 1f       	adc	r25, r19
     df0:	9c 83       	std	Y+4, r25	; 0x04
     df2:	8b 83       	std	Y+3, r24	; 0x03
    group_t * group = gitem->group;
     df4:	ef 81       	ldd	r30, Y+7	; 0x07
     df6:	f8 85       	ldd	r31, Y+8	; 0x08
     df8:	84 81       	ldd	r24, Z+4	; 0x04
     dfa:	95 81       	ldd	r25, Z+5	; 0x05
     dfc:	9a 83       	std	Y+2, r25	; 0x02
     dfe:	89 83       	std	Y+1, r24	; 0x01
    // Пуста ли часть списка с таким приоритетом
    if( ( xlist->index )& mask)
     e00:	e9 85       	ldd	r30, Y+9	; 0x09
     e02:	fa 85       	ldd	r31, Y+10	; 0x0a
     e04:	90 89       	ldd	r25, Z+16	; 0x10
     e06:	8d 81       	ldd	r24, Y+5	; 0x05
     e08:	89 23       	and	r24, r25
     e0a:	88 23       	and	r24, r24
     e0c:	31 f1       	breq	.+76     	; 0xe5a <gitem_insert_group+0xbc>
    {
        //Не пуста вставляем туда gitem
        item_insert((item_t *)gitem, *head );
     e0e:	8f 81       	ldd	r24, Y+7	; 0x07
     e10:	98 85       	ldd	r25, Y+8	; 0x08
     e12:	eb 81       	ldd	r30, Y+3	; 0x03
     e14:	fc 81       	ldd	r31, Y+4	; 0x04
     e16:	20 81       	ld	r18, Z
     e18:	31 81       	ldd	r19, Z+1	; 0x01
     e1a:	b9 01       	movw	r22, r18
     e1c:	0e 94 4b 09 	call	0x1296	; 0x1296 <item_insert>
        //Передаем старую группу в пул
        group_push(group);
     e20:	89 81       	ldd	r24, Y+1	; 0x01
     e22:	9a 81       	ldd	r25, Y+2	; 0x02
     e24:	0e 94 c0 08 	call	0x1180	; 0x1180 <group_push>
        //назначаем новую группу - ту, в которой голова
        group = ((gitem_t *)*head)->group;
     e28:	eb 81       	ldd	r30, Y+3	; 0x03
     e2a:	fc 81       	ldd	r31, Y+4	; 0x04
     e2c:	80 81       	ld	r24, Z
     e2e:	91 81       	ldd	r25, Z+1	; 0x01
     e30:	fc 01       	movw	r30, r24
     e32:	84 81       	ldd	r24, Z+4	; 0x04
     e34:	95 81       	ldd	r25, Z+5	; 0x05
     e36:	9a 83       	std	Y+2, r25	; 0x02
     e38:	89 83       	std	Y+1, r24	; 0x01
        gitem->group = group;
     e3a:	ef 81       	ldd	r30, Y+7	; 0x07
     e3c:	f8 85       	ldd	r31, Y+8	; 0x08
     e3e:	89 81       	ldd	r24, Y+1	; 0x01
     e40:	9a 81       	ldd	r25, Y+2	; 0x02
     e42:	95 83       	std	Z+5, r25	; 0x05
     e44:	84 83       	std	Z+4, r24	; 0x04
        //количество элементов в группе увеличилось на 1
        group->el_num++;
     e46:	e9 81       	ldd	r30, Y+1	; 0x01
     e48:	fa 81       	ldd	r31, Y+2	; 0x02
     e4a:	83 81       	ldd	r24, Z+3	; 0x03
     e4c:	94 81       	ldd	r25, Z+4	; 0x04
     e4e:	01 96       	adiw	r24, 0x01	; 1
     e50:	e9 81       	ldd	r30, Y+1	; 0x01
     e52:	fa 81       	ldd	r31, Y+2	; 0x02
     e54:	94 83       	std	Z+4, r25	; 0x04
     e56:	83 83       	std	Z+3, r24	; 0x03
     e58:	14 c0       	rjmp	.+40     	; 0xe82 <gitem_insert_group+0xe4>
    }
    else
    {
        // Пуста, gitem будет головой
        *head = (item_t *)gitem;
     e5a:	8f 81       	ldd	r24, Y+7	; 0x07
     e5c:	98 85       	ldd	r25, Y+8	; 0x08
     e5e:	eb 81       	ldd	r30, Y+3	; 0x03
     e60:	fc 81       	ldd	r31, Y+4	; 0x04
     e62:	91 83       	std	Z+1, r25	; 0x01
     e64:	80 83       	st	Z, r24
        xlist->index |= mask;
     e66:	e9 85       	ldd	r30, Y+9	; 0x09
     e68:	fa 85       	ldd	r31, Y+10	; 0x0a
     e6a:	90 89       	ldd	r25, Z+16	; 0x10
     e6c:	8d 81       	ldd	r24, Y+5	; 0x05
     e6e:	89 2b       	or	r24, r25
     e70:	e9 85       	ldd	r30, Y+9	; 0x09
     e72:	fa 85       	ldd	r31, Y+10	; 0x0a
     e74:	80 8b       	std	Z+16, r24	; 0x10
        group->link = (void *)xlist;
     e76:	e9 81       	ldd	r30, Y+1	; 0x01
     e78:	fa 81       	ldd	r31, Y+2	; 0x02
     e7a:	89 85       	ldd	r24, Y+9	; 0x09
     e7c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e7e:	91 83       	std	Z+1, r25	; 0x01
     e80:	80 83       	st	Z, r24
    }
}
     e82:	2a 96       	adiw	r28, 0x0a	; 10
     e84:	0f b6       	in	r0, 0x3f	; 63
     e86:	f8 94       	cli
     e88:	de bf       	out	0x3e, r29	; 62
     e8a:	0f be       	out	0x3f, r0	; 63
     e8c:	cd bf       	out	0x3d, r28	; 61
     e8e:	cf 91       	pop	r28
     e90:	df 91       	pop	r29
     e92:	08 95       	ret

00000e94 <gitem_fast_cut>:
// Быстро вырезать из списка (не обнуляется указатель gitem->group->link)
void gitem_fast_cut(gitem_t * gitem)
{
     e94:	df 93       	push	r29
     e96:	cf 93       	push	r28
     e98:	00 d0       	rcall	.+0      	; 0xe9a <gitem_fast_cut+0x6>
     e9a:	00 d0       	rcall	.+0      	; 0xe9c <gitem_fast_cut+0x8>
     e9c:	0f 92       	push	r0
     e9e:	cd b7       	in	r28, 0x3d	; 61
     ea0:	de b7       	in	r29, 0x3e	; 62
     ea2:	9d 83       	std	Y+5, r25	; 0x05
     ea4:	8c 83       	std	Y+4, r24	; 0x04
    prio_t prio = gitem->group->prio;
     ea6:	ec 81       	ldd	r30, Y+4	; 0x04
     ea8:	fd 81       	ldd	r31, Y+5	; 0x05
     eaa:	04 80       	ldd	r0, Z+4	; 0x04
     eac:	f5 81       	ldd	r31, Z+5	; 0x05
     eae:	e0 2d       	mov	r30, r0
     eb0:	82 81       	ldd	r24, Z+2	; 0x02
     eb2:	8b 83       	std	Y+3, r24	; 0x03
    xlist_t * xlist = (xlist_t *)gitem->group->link;
     eb4:	ec 81       	ldd	r30, Y+4	; 0x04
     eb6:	fd 81       	ldd	r31, Y+5	; 0x05
     eb8:	04 80       	ldd	r0, Z+4	; 0x04
     eba:	f5 81       	ldd	r31, Z+5	; 0x05
     ebc:	e0 2d       	mov	r30, r0
     ebe:	80 81       	ld	r24, Z
     ec0:	91 81       	ldd	r25, Z+1	; 0x01
     ec2:	9a 83       	std	Y+2, r25	; 0x02
     ec4:	89 83       	std	Y+1, r24	; 0x01
    // Является ли эта часть списка группированной?
    if( gitem->group->el_num > (count_t)1 )
     ec6:	ec 81       	ldd	r30, Y+4	; 0x04
     ec8:	fd 81       	ldd	r31, Y+5	; 0x05
     eca:	04 80       	ldd	r0, Z+4	; 0x04
     ecc:	f5 81       	ldd	r31, Z+5	; 0x05
     ece:	e0 2d       	mov	r30, r0
     ed0:	83 81       	ldd	r24, Z+3	; 0x03
     ed2:	94 81       	ldd	r25, Z+4	; 0x04
     ed4:	82 30       	cpi	r24, 0x02	; 2
     ed6:	91 05       	cpc	r25, r1
     ed8:	b8 f0       	brcs	.+46     	; 0xf08 <gitem_fast_cut+0x74>
    {
        //Группированная часть списка, будем вырезать из группы с выделением новой группы из Пула
        // В текущей группе стало на 1 элемент меньше
        gitem->group->el_num--;
     eda:	ec 81       	ldd	r30, Y+4	; 0x04
     edc:	fd 81       	ldd	r31, Y+5	; 0x05
     ede:	04 80       	ldd	r0, Z+4	; 0x04
     ee0:	f5 81       	ldd	r31, Z+5	; 0x05
     ee2:	e0 2d       	mov	r30, r0
     ee4:	83 81       	ldd	r24, Z+3	; 0x03
     ee6:	94 81       	ldd	r25, Z+4	; 0x04
     ee8:	01 97       	sbiw	r24, 0x01	; 1
     eea:	94 83       	std	Z+4, r25	; 0x04
     eec:	83 83       	std	Z+3, r24	; 0x03
        //выделяем новую группу
        gitem->group = group_pop();
     eee:	0e 94 da 08 	call	0x11b4	; 0x11b4 <group_pop>
     ef2:	ec 81       	ldd	r30, Y+4	; 0x04
     ef4:	fd 81       	ldd	r31, Y+5	; 0x05
     ef6:	95 83       	std	Z+5, r25	; 0x05
     ef8:	84 83       	std	Z+4, r24	; 0x04
        // Правильный приоритет, количество элементов в группе, выделенной из пула должно быть равно 1
        gitem->group->prio = (prio_t)prio;
     efa:	ec 81       	ldd	r30, Y+4	; 0x04
     efc:	fd 81       	ldd	r31, Y+5	; 0x05
     efe:	04 80       	ldd	r0, Z+4	; 0x04
     f00:	f5 81       	ldd	r31, Z+5	; 0x05
     f02:	e0 2d       	mov	r30, r0
     f04:	8b 81       	ldd	r24, Y+3	; 0x03
     f06:	82 83       	std	Z+2, r24	; 0x02
    }
    //Является ли элемент единственным в своей части списка?
    if( ((item_t *)gitem)->next == (item_t *)gitem )
     f08:	ec 81       	ldd	r30, Y+4	; 0x04
     f0a:	fd 81       	ldd	r31, Y+5	; 0x05
     f0c:	20 81       	ld	r18, Z
     f0e:	31 81       	ldd	r19, Z+1	; 0x01
     f10:	8c 81       	ldd	r24, Y+4	; 0x04
     f12:	9d 81       	ldd	r25, Y+5	; 0x05
     f14:	28 17       	cp	r18, r24
     f16:	39 07       	cpc	r19, r25
     f18:	09 f5       	brne	.+66     	; 0xf5c <gitem_fast_cut+0xc8>
    {
        // Да, является!
        xlist->item[prio] = (item_t *)0;
     f1a:	8b 81       	ldd	r24, Y+3	; 0x03
     f1c:	88 2f       	mov	r24, r24
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	29 81       	ldd	r18, Y+1	; 0x01
     f22:	3a 81       	ldd	r19, Y+2	; 0x02
     f24:	88 0f       	add	r24, r24
     f26:	99 1f       	adc	r25, r25
     f28:	f9 01       	movw	r30, r18
     f2a:	e8 0f       	add	r30, r24
     f2c:	f9 1f       	adc	r31, r25
     f2e:	11 82       	std	Z+1, r1	; 0x01
     f30:	10 82       	st	Z, r1
        xlist->index &= ~(((index_t)1)<<prio);
     f32:	e9 81       	ldd	r30, Y+1	; 0x01
     f34:	fa 81       	ldd	r31, Y+2	; 0x02
     f36:	80 89       	ldd	r24, Z+16	; 0x10
     f38:	48 2f       	mov	r20, r24
     f3a:	8b 81       	ldd	r24, Y+3	; 0x03
     f3c:	28 2f       	mov	r18, r24
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	02 2e       	mov	r0, r18
     f46:	02 c0       	rjmp	.+4      	; 0xf4c <gitem_fast_cut+0xb8>
     f48:	88 0f       	add	r24, r24
     f4a:	99 1f       	adc	r25, r25
     f4c:	0a 94       	dec	r0
     f4e:	e2 f7       	brpl	.-8      	; 0xf48 <gitem_fast_cut+0xb4>
     f50:	80 95       	com	r24
     f52:	84 23       	and	r24, r20
     f54:	e9 81       	ldd	r30, Y+1	; 0x01
     f56:	fa 81       	ldd	r31, Y+2	; 0x02
     f58:	80 8b       	std	Z+16, r24	; 0x10
     f5a:	1a c0       	rjmp	.+52     	; 0xf90 <gitem_fast_cut+0xfc>
    }
    else
    {
        // Нет, не является!
        // Является ли элемент головой своей части списка?
        if( xlist->item[(prio_t)prio] == (item_t *)gitem )
     f5c:	8b 81       	ldd	r24, Y+3	; 0x03
     f5e:	88 2f       	mov	r24, r24
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	29 81       	ldd	r18, Y+1	; 0x01
     f64:	3a 81       	ldd	r19, Y+2	; 0x02
     f66:	88 0f       	add	r24, r24
     f68:	99 1f       	adc	r25, r25
     f6a:	f9 01       	movw	r30, r18
     f6c:	e8 0f       	add	r30, r24
     f6e:	f9 1f       	adc	r31, r25
     f70:	20 81       	ld	r18, Z
     f72:	31 81       	ldd	r19, Z+1	; 0x01
     f74:	8c 81       	ldd	r24, Y+4	; 0x04
     f76:	9d 81       	ldd	r25, Y+5	; 0x05
     f78:	28 17       	cp	r18, r24
     f7a:	39 07       	cpc	r19, r25
     f7c:	29 f4       	brne	.+10     	; 0xf88 <gitem_fast_cut+0xf4>
        {
            // Является, список надо переключить
            xlist_switch( xlist, prio );
     f7e:	89 81       	ldd	r24, Y+1	; 0x01
     f80:	9a 81       	ldd	r25, Y+2	; 0x02
     f82:	6b 81       	ldd	r22, Y+3	; 0x03
     f84:	0e 94 17 11 	call	0x222e	; 0x222e <xlist_switch>
        }
        // Собственно - вырезаем элемент
        item_cut( (item_t *)gitem );
     f88:	8c 81       	ldd	r24, Y+4	; 0x04
     f8a:	9d 81       	ldd	r25, Y+5	; 0x05
     f8c:	0e 94 7d 09 	call	0x12fa	; 0x12fa <item_cut>
    }
}
     f90:	0f 90       	pop	r0
     f92:	0f 90       	pop	r0
     f94:	0f 90       	pop	r0
     f96:	0f 90       	pop	r0
     f98:	0f 90       	pop	r0
     f9a:	cf 91       	pop	r28
     f9c:	df 91       	pop	r29
     f9e:	08 95       	ret

00000fa0 <gitem_cut>:
// Вырезать из списка
void gitem_cut(gitem_t * gitem)
{
     fa0:	df 93       	push	r29
     fa2:	cf 93       	push	r28
     fa4:	00 d0       	rcall	.+0      	; 0xfa6 <gitem_cut+0x6>
     fa6:	cd b7       	in	r28, 0x3d	; 61
     fa8:	de b7       	in	r29, 0x3e	; 62
     faa:	9a 83       	std	Y+2, r25	; 0x02
     fac:	89 83       	std	Y+1, r24	; 0x01
    gitem_fast_cut( gitem );
     fae:	89 81       	ldd	r24, Y+1	; 0x01
     fb0:	9a 81       	ldd	r25, Y+2	; 0x02
     fb2:	0e 94 4a 07 	call	0xe94	; 0xe94 <gitem_fast_cut>
    gitem->group->link = (void *)0;
     fb6:	e9 81       	ldd	r30, Y+1	; 0x01
     fb8:	fa 81       	ldd	r31, Y+2	; 0x02
     fba:	04 80       	ldd	r0, Z+4	; 0x04
     fbc:	f5 81       	ldd	r31, Z+5	; 0x05
     fbe:	e0 2d       	mov	r30, r0
     fc0:	11 82       	std	Z+1, r1	; 0x01
     fc2:	10 82       	st	Z, r1
}
     fc4:	0f 90       	pop	r0
     fc6:	0f 90       	pop	r0
     fc8:	cf 91       	pop	r28
     fca:	df 91       	pop	r29
     fcc:	08 95       	ret

00000fce <gitem_xlist_merge>:
 1) Оба списка содержат только объекты типа gitem_t
 2) В списке source на каждом уровне приоритета все объекты типа gitem_t приенадлежат к одной группе.
 3) Элементы списка source, находящиеся на разных уровнях приоритета, пренадлежат разным группам.
*/
void gitem_xlist_merge(xlist_t * source, xlist_t * destignation)
{
     fce:	df 93       	push	r29
     fd0:	cf 93       	push	r28
     fd2:	cd b7       	in	r28, 0x3d	; 61
     fd4:	de b7       	in	r29, 0x3e	; 62
     fd6:	2c 97       	sbiw	r28, 0x0c	; 12
     fd8:	0f b6       	in	r0, 0x3f	; 63
     fda:	f8 94       	cli
     fdc:	de bf       	out	0x3e, r29	; 62
     fde:	0f be       	out	0x3f, r0	; 63
     fe0:	cd bf       	out	0x3d, r28	; 61
     fe2:	9a 87       	std	Y+10, r25	; 0x0a
     fe4:	89 87       	std	Y+9, r24	; 0x09
     fe6:	7c 87       	std	Y+12, r23	; 0x0c
     fe8:	6b 87       	std	Y+11, r22	; 0x0b
    index_t mask = (index_t)1;
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	88 87       	std	Y+8, r24	; 0x08
    prio_t current_prio = (prio_t)0;
     fee:	1f 82       	std	Y+7, r1	; 0x07
     ff0:	9a c0       	rjmp	.+308    	; 0x1126 <gitem_xlist_merge+0x158>
    while( mask )
    {
        // Есть че перенести?
        if( mask & source->index )
     ff2:	e9 85       	ldd	r30, Y+9	; 0x09
     ff4:	fa 85       	ldd	r31, Y+10	; 0x0a
     ff6:	90 89       	ldd	r25, Z+16	; 0x10
     ff8:	88 85       	ldd	r24, Y+8	; 0x08
     ffa:	89 23       	and	r24, r25
     ffc:	88 23       	and	r24, r24
     ffe:	09 f4       	brne	.+2      	; 0x1002 <gitem_xlist_merge+0x34>
    1000:	8c c0       	rjmp	.+280    	; 0x111a <gitem_xlist_merge+0x14c>
        {
            // Есть!
            // Есть куда переносить?
            if( mask & destignation->index )
    1002:	eb 85       	ldd	r30, Y+11	; 0x0b
    1004:	fc 85       	ldd	r31, Y+12	; 0x0c
    1006:	90 89       	ldd	r25, Z+16	; 0x10
    1008:	88 85       	ldd	r24, Y+8	; 0x08
    100a:	89 23       	and	r24, r25
    100c:	88 23       	and	r24, r24
    100e:	09 f4       	brne	.+2      	; 0x1012 <gitem_xlist_merge+0x44>
    1010:	43 c0       	rjmp	.+134    	; 0x1098 <gitem_xlist_merge+0xca>
            {
                //Есть!
                // Сшиваем 2 2-связных списка!!!
                item_t * src = source->item[current_prio];
    1012:	8f 81       	ldd	r24, Y+7	; 0x07
    1014:	88 2f       	mov	r24, r24
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	29 85       	ldd	r18, Y+9	; 0x09
    101a:	3a 85       	ldd	r19, Y+10	; 0x0a
    101c:	88 0f       	add	r24, r24
    101e:	99 1f       	adc	r25, r25
    1020:	f9 01       	movw	r30, r18
    1022:	e8 0f       	add	r30, r24
    1024:	f9 1f       	adc	r31, r25
    1026:	80 81       	ld	r24, Z
    1028:	91 81       	ldd	r25, Z+1	; 0x01
    102a:	9e 83       	std	Y+6, r25	; 0x06
    102c:	8d 83       	std	Y+5, r24	; 0x05
                item_t * dst = destignation->item[current_prio];
    102e:	8f 81       	ldd	r24, Y+7	; 0x07
    1030:	88 2f       	mov	r24, r24
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	2b 85       	ldd	r18, Y+11	; 0x0b
    1036:	3c 85       	ldd	r19, Y+12	; 0x0c
    1038:	88 0f       	add	r24, r24
    103a:	99 1f       	adc	r25, r25
    103c:	f9 01       	movw	r30, r18
    103e:	e8 0f       	add	r30, r24
    1040:	f9 1f       	adc	r31, r25
    1042:	80 81       	ld	r24, Z
    1044:	91 81       	ldd	r25, Z+1	; 0x01
    1046:	9c 83       	std	Y+4, r25	; 0x04
    1048:	8b 83       	std	Y+3, r24	; 0x03
                src->prev->next = dst;
    104a:	ed 81       	ldd	r30, Y+5	; 0x05
    104c:	fe 81       	ldd	r31, Y+6	; 0x06
    104e:	02 80       	ldd	r0, Z+2	; 0x02
    1050:	f3 81       	ldd	r31, Z+3	; 0x03
    1052:	e0 2d       	mov	r30, r0
    1054:	8b 81       	ldd	r24, Y+3	; 0x03
    1056:	9c 81       	ldd	r25, Y+4	; 0x04
    1058:	91 83       	std	Z+1, r25	; 0x01
    105a:	80 83       	st	Z, r24
                dst->prev->next = src;
    105c:	eb 81       	ldd	r30, Y+3	; 0x03
    105e:	fc 81       	ldd	r31, Y+4	; 0x04
    1060:	02 80       	ldd	r0, Z+2	; 0x02
    1062:	f3 81       	ldd	r31, Z+3	; 0x03
    1064:	e0 2d       	mov	r30, r0
    1066:	8d 81       	ldd	r24, Y+5	; 0x05
    1068:	9e 81       	ldd	r25, Y+6	; 0x06
    106a:	91 83       	std	Z+1, r25	; 0x01
    106c:	80 83       	st	Z, r24
                item_t * buf = dst->prev;
    106e:	eb 81       	ldd	r30, Y+3	; 0x03
    1070:	fc 81       	ldd	r31, Y+4	; 0x04
    1072:	82 81       	ldd	r24, Z+2	; 0x02
    1074:	93 81       	ldd	r25, Z+3	; 0x03
    1076:	9a 83       	std	Y+2, r25	; 0x02
    1078:	89 83       	std	Y+1, r24	; 0x01
                dst->prev = src->prev;
    107a:	ed 81       	ldd	r30, Y+5	; 0x05
    107c:	fe 81       	ldd	r31, Y+6	; 0x06
    107e:	82 81       	ldd	r24, Z+2	; 0x02
    1080:	93 81       	ldd	r25, Z+3	; 0x03
    1082:	eb 81       	ldd	r30, Y+3	; 0x03
    1084:	fc 81       	ldd	r31, Y+4	; 0x04
    1086:	93 83       	std	Z+3, r25	; 0x03
    1088:	82 83       	std	Z+2, r24	; 0x02
                src->prev = buf;
    108a:	ed 81       	ldd	r30, Y+5	; 0x05
    108c:	fe 81       	ldd	r31, Y+6	; 0x06
    108e:	89 81       	ldd	r24, Y+1	; 0x01
    1090:	9a 81       	ldd	r25, Y+2	; 0x02
    1092:	93 83       	std	Z+3, r25	; 0x03
    1094:	82 83       	std	Z+2, r24	; 0x02
    1096:	21 c0       	rjmp	.+66     	; 0x10da <gitem_xlist_merge+0x10c>
            }
            else
            {
                //Нет, тупо переносим всю группу.
                destignation->item[current_prio] = source->item[current_prio];
    1098:	8f 81       	ldd	r24, Y+7	; 0x07
    109a:	68 2f       	mov	r22, r24
    109c:	70 e0       	ldi	r23, 0x00	; 0
    109e:	8f 81       	ldd	r24, Y+7	; 0x07
    10a0:	88 2f       	mov	r24, r24
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	29 85       	ldd	r18, Y+9	; 0x09
    10a6:	3a 85       	ldd	r19, Y+10	; 0x0a
    10a8:	88 0f       	add	r24, r24
    10aa:	99 1f       	adc	r25, r25
    10ac:	f9 01       	movw	r30, r18
    10ae:	e8 0f       	add	r30, r24
    10b0:	f9 1f       	adc	r31, r25
    10b2:	40 81       	ld	r20, Z
    10b4:	51 81       	ldd	r21, Z+1	; 0x01
    10b6:	2b 85       	ldd	r18, Y+11	; 0x0b
    10b8:	3c 85       	ldd	r19, Y+12	; 0x0c
    10ba:	cb 01       	movw	r24, r22
    10bc:	88 0f       	add	r24, r24
    10be:	99 1f       	adc	r25, r25
    10c0:	f9 01       	movw	r30, r18
    10c2:	e8 0f       	add	r30, r24
    10c4:	f9 1f       	adc	r31, r25
    10c6:	51 83       	std	Z+1, r21	; 0x01
    10c8:	40 83       	st	Z, r20
                destignation->index |= mask;
    10ca:	eb 85       	ldd	r30, Y+11	; 0x0b
    10cc:	fc 85       	ldd	r31, Y+12	; 0x0c
    10ce:	90 89       	ldd	r25, Z+16	; 0x10
    10d0:	88 85       	ldd	r24, Y+8	; 0x08
    10d2:	89 2b       	or	r24, r25
    10d4:	eb 85       	ldd	r30, Y+11	; 0x0b
    10d6:	fc 85       	ldd	r31, Y+12	; 0x0c
    10d8:	80 8b       	std	Z+16, r24	; 0x10
            }
            // Вот почему эта функция отнесена к методам gitem_t
            ((gitem_t *)source->item[current_prio])->group->link = (void *)destignation;
    10da:	8f 81       	ldd	r24, Y+7	; 0x07
    10dc:	88 2f       	mov	r24, r24
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	29 85       	ldd	r18, Y+9	; 0x09
    10e2:	3a 85       	ldd	r19, Y+10	; 0x0a
    10e4:	88 0f       	add	r24, r24
    10e6:	99 1f       	adc	r25, r25
    10e8:	f9 01       	movw	r30, r18
    10ea:	e8 0f       	add	r30, r24
    10ec:	f9 1f       	adc	r31, r25
    10ee:	80 81       	ld	r24, Z
    10f0:	91 81       	ldd	r25, Z+1	; 0x01
    10f2:	fc 01       	movw	r30, r24
    10f4:	04 80       	ldd	r0, Z+4	; 0x04
    10f6:	f5 81       	ldd	r31, Z+5	; 0x05
    10f8:	e0 2d       	mov	r30, r0
    10fa:	8b 85       	ldd	r24, Y+11	; 0x0b
    10fc:	9c 85       	ldd	r25, Y+12	; 0x0c
    10fe:	91 83       	std	Z+1, r25	; 0x01
    1100:	80 83       	st	Z, r24
            // Перенос закончен, обнуляем указатель
            source->item[(prio_t)current_prio] = (item_t *)0;
    1102:	8f 81       	ldd	r24, Y+7	; 0x07
    1104:	88 2f       	mov	r24, r24
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	29 85       	ldd	r18, Y+9	; 0x09
    110a:	3a 85       	ldd	r19, Y+10	; 0x0a
    110c:	88 0f       	add	r24, r24
    110e:	99 1f       	adc	r25, r25
    1110:	f9 01       	movw	r30, r18
    1112:	e8 0f       	add	r30, r24
    1114:	f9 1f       	adc	r31, r25
    1116:	11 82       	std	Z+1, r1	; 0x01
    1118:	10 82       	st	Z, r1
        }
        mask<<=1;
    111a:	88 85       	ldd	r24, Y+8	; 0x08
    111c:	88 0f       	add	r24, r24
    111e:	88 87       	std	Y+8, r24	; 0x08
        current_prio++;
    1120:	8f 81       	ldd	r24, Y+7	; 0x07
    1122:	8f 5f       	subi	r24, 0xFF	; 255
    1124:	8f 83       	std	Y+7, r24	; 0x07
*/
void gitem_xlist_merge(xlist_t * source, xlist_t * destignation)
{
    index_t mask = (index_t)1;
    prio_t current_prio = (prio_t)0;
    while( mask )
    1126:	88 85       	ldd	r24, Y+8	; 0x08
    1128:	88 23       	and	r24, r24
    112a:	09 f0       	breq	.+2      	; 0x112e <gitem_xlist_merge+0x160>
    112c:	62 cf       	rjmp	.-316    	; 0xff2 <gitem_xlist_merge+0x24>
        }
        mask<<=1;
        current_prio++;
    }
    // Список полностью перенесен, обнуляем индекс
    source->index = (index_t)0;
    112e:	e9 85       	ldd	r30, Y+9	; 0x09
    1130:	fa 85       	ldd	r31, Y+10	; 0x0a
    1132:	10 8a       	std	Z+16, r1	; 0x10
}
    1134:	2c 96       	adiw	r28, 0x0c	; 12
    1136:	0f b6       	in	r0, 0x3f	; 63
    1138:	f8 94       	cli
    113a:	de bf       	out	0x3e, r29	; 62
    113c:	0f be       	out	0x3f, r0	; 63
    113e:	cd bf       	out	0x3d, r28	; 61
    1140:	cf 91       	pop	r28
    1142:	df 91       	pop	r29
    1144:	08 95       	ret

00001146 <group_init>:
*****************************************************************************************/
#include "../include/bugurt.h"
//Методы group_t
// инициация
void group_init(group_t * group, prio_t prio)
{
    1146:	df 93       	push	r29
    1148:	cf 93       	push	r28
    114a:	00 d0       	rcall	.+0      	; 0x114c <group_init+0x6>
    114c:	0f 92       	push	r0
    114e:	cd b7       	in	r28, 0x3d	; 61
    1150:	de b7       	in	r29, 0x3e	; 62
    1152:	9a 83       	std	Y+2, r25	; 0x02
    1154:	89 83       	std	Y+1, r24	; 0x01
    1156:	6b 83       	std	Y+3, r22	; 0x03
    group->link = (void *)0;
    1158:	e9 81       	ldd	r30, Y+1	; 0x01
    115a:	fa 81       	ldd	r31, Y+2	; 0x02
    115c:	11 82       	std	Z+1, r1	; 0x01
    115e:	10 82       	st	Z, r1
    group->prio = prio;
    1160:	e9 81       	ldd	r30, Y+1	; 0x01
    1162:	fa 81       	ldd	r31, Y+2	; 0x02
    1164:	8b 81       	ldd	r24, Y+3	; 0x03
    1166:	82 83       	std	Z+2, r24	; 0x02
    // группа - часть gitem_t, количество элементов - 1
    group->el_num = (count_t)1;
    1168:	e9 81       	ldd	r30, Y+1	; 0x01
    116a:	fa 81       	ldd	r31, Y+2	; 0x02
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	94 83       	std	Z+4, r25	; 0x04
    1172:	83 83       	std	Z+3, r24	; 0x03
}
    1174:	0f 90       	pop	r0
    1176:	0f 90       	pop	r0
    1178:	0f 90       	pop	r0
    117a:	cf 91       	pop	r28
    117c:	df 91       	pop	r29
    117e:	08 95       	ret

00001180 <group_push>:
// положить в ПУЛ
void group_push(group_t * group)
{
    1180:	df 93       	push	r29
    1182:	cf 93       	push	r28
    1184:	00 d0       	rcall	.+0      	; 0x1186 <group_push+0x6>
    1186:	cd b7       	in	r28, 0x3d	; 61
    1188:	de b7       	in	r29, 0x3e	; 62
    118a:	9a 83       	std	Y+2, r25	; 0x02
    118c:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    // блокируем пул
    spin_lock( &kernel.pool_lock );
#endif
    group->link = (void *)kernel.pool;
    118e:	80 91 f6 01 	lds	r24, 0x01F6
    1192:	90 91 f7 01 	lds	r25, 0x01F7
    1196:	e9 81       	ldd	r30, Y+1	; 0x01
    1198:	fa 81       	ldd	r31, Y+2	; 0x02
    119a:	91 83       	std	Z+1, r25	; 0x01
    119c:	80 83       	st	Z, r24
    kernel.pool = group;
    119e:	89 81       	ldd	r24, Y+1	; 0x01
    11a0:	9a 81       	ldd	r25, Y+2	; 0x02
    11a2:	90 93 f7 01 	sts	0x01F7, r25
    11a6:	80 93 f6 01 	sts	0x01F6, r24
#ifdef CONFIG_MP
    // разблокируем пул
    spin_unlock( &kernel.pool_lock );
#endif
}
    11aa:	0f 90       	pop	r0
    11ac:	0f 90       	pop	r0
    11ae:	cf 91       	pop	r28
    11b0:	df 91       	pop	r29
    11b2:	08 95       	ret

000011b4 <group_pop>:
// взять из пула, если есть, а есть всегда, избыточность же!
group_t * group_pop(void)
{
    11b4:	df 93       	push	r29
    11b6:	cf 93       	push	r28
    11b8:	00 d0       	rcall	.+0      	; 0x11ba <group_pop+0x6>
    11ba:	cd b7       	in	r28, 0x3d	; 61
    11bc:	de b7       	in	r29, 0x3e	; 62
#ifdef CONFIG_MP
    // блокируем пул
    spin_lock( &kernel.pool_lock );
#endif
    group_t * group = kernel.pool;
    11be:	80 91 f6 01 	lds	r24, 0x01F6
    11c2:	90 91 f7 01 	lds	r25, 0x01F7
    11c6:	9a 83       	std	Y+2, r25	; 0x02
    11c8:	89 83       	std	Y+1, r24	; 0x01
    kernel.pool = (group_t *)group->link;
    11ca:	e9 81       	ldd	r30, Y+1	; 0x01
    11cc:	fa 81       	ldd	r31, Y+2	; 0x02
    11ce:	80 81       	ld	r24, Z
    11d0:	91 81       	ldd	r25, Z+1	; 0x01
    11d2:	90 93 f7 01 	sts	0x01F7, r25
    11d6:	80 93 f6 01 	sts	0x01F6, r24
#ifdef CONFIG_MP
    // разблокируем пул
    spin_unlock( &kernel.pool_lock );
#endif
    return group;
    11da:	89 81       	ldd	r24, Y+1	; 0x01
    11dc:	9a 81       	ldd	r25, Y+2	; 0x02
}
    11de:	0f 90       	pop	r0
    11e0:	0f 90       	pop	r0
    11e2:	cf 91       	pop	r28
    11e4:	df 91       	pop	r29
    11e6:	08 95       	ret

000011e8 <index_search>:
*                           http://www.0chan.ru/r/res/9996.html                          *
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
prio_t index_search(index_t index)
{
    11e8:	df 93       	push	r29
    11ea:	cf 93       	push	r28
    11ec:	00 d0       	rcall	.+0      	; 0x11ee <index_search+0x6>
    11ee:	00 d0       	rcall	.+0      	; 0x11f0 <index_search+0x8>
    11f0:	00 d0       	rcall	.+0      	; 0x11f2 <index_search+0xa>
    11f2:	cd b7       	in	r28, 0x3d	; 61
    11f4:	de b7       	in	r29, 0x3e	; 62
    11f6:	8e 83       	std	Y+6, r24	; 0x06
    prio_t prio = (prio_t)0;
    11f8:	1d 82       	std	Y+5, r1	; 0x05
        но, т.к. BITS_IN_INDEX_T фиксировано для данной конфигурации,
        то получается время выполнения - O(1), ВСЕГДА.

        И да, предсказуемость + переносимость > быстродействие.
        */
    index_t upper = ~(index_t)0, lower = ~(index_t)0, middle;
    11fa:	8f ef       	ldi	r24, 0xFF	; 255
    11fc:	8c 83       	std	Y+4, r24	; 0x04
    11fe:	8f ef       	ldi	r24, 0xFF	; 255
    1200:	8b 83       	std	Y+3, r24	; 0x03
    prio_t step = (prio_t)BITS_IN_INDEX_T;
    1202:	88 e0       	ldi	r24, 0x08	; 8
    1204:	89 83       	std	Y+1, r24	; 0x01
    1206:	22 c0       	rjmp	.+68     	; 0x124c <index_search+0x64>
    while( step )
    {
        step>>=1; // делим шаг пополам
    1208:	89 81       	ldd	r24, Y+1	; 0x01
    120a:	86 95       	lsr	r24
    120c:	89 83       	std	Y+1, r24	; 0x01
        middle = lower>>step;
    120e:	8b 81       	ldd	r24, Y+3	; 0x03
    1210:	28 2f       	mov	r18, r24
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	89 81       	ldd	r24, Y+1	; 0x01
    1216:	88 2f       	mov	r24, r24
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	a9 01       	movw	r20, r18
    121c:	02 c0       	rjmp	.+4      	; 0x1222 <index_search+0x3a>
    121e:	55 95       	asr	r21
    1220:	47 95       	ror	r20
    1222:	8a 95       	dec	r24
    1224:	e2 f7       	brpl	.-8      	; 0x121e <index_search+0x36>
    1226:	ca 01       	movw	r24, r20
    1228:	8a 83       	std	Y+2, r24	; 0x02
        if( index & upper & middle )
    122a:	9e 81       	ldd	r25, Y+6	; 0x06
    122c:	8c 81       	ldd	r24, Y+4	; 0x04
    122e:	98 23       	and	r25, r24
    1230:	8a 81       	ldd	r24, Y+2	; 0x02
    1232:	89 23       	and	r24, r25
    1234:	88 23       	and	r24, r24
    1236:	19 f0       	breq	.+6      	; 0x123e <index_search+0x56>
        {
            lower = middle;
    1238:	8a 81       	ldd	r24, Y+2	; 0x02
    123a:	8b 83       	std	Y+3, r24	; 0x03
    123c:	07 c0       	rjmp	.+14     	; 0x124c <index_search+0x64>
        }
        else
        {
            upper = ~middle;
    123e:	8a 81       	ldd	r24, Y+2	; 0x02
    1240:	80 95       	com	r24
    1242:	8c 83       	std	Y+4, r24	; 0x04
            prio += step;
    1244:	9d 81       	ldd	r25, Y+5	; 0x05
    1246:	89 81       	ldd	r24, Y+1	; 0x01
    1248:	89 0f       	add	r24, r25
    124a:	8d 83       	std	Y+5, r24	; 0x05

        И да, предсказуемость + переносимость > быстродействие.
        */
    index_t upper = ~(index_t)0, lower = ~(index_t)0, middle;
    prio_t step = (prio_t)BITS_IN_INDEX_T;
    while( step )
    124c:	89 81       	ldd	r24, Y+1	; 0x01
    124e:	88 23       	and	r24, r24
    1250:	d9 f6       	brne	.-74     	; 0x1208 <index_search+0x20>
        if ( mask & index )break;
        prio++;
        mask<<=1;
    }
#endif
    return prio;
    1252:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1254:	26 96       	adiw	r28, 0x06	; 6
    1256:	0f b6       	in	r0, 0x3f	; 63
    1258:	f8 94       	cli
    125a:	de bf       	out	0x3e, r29	; 62
    125c:	0f be       	out	0x3f, r0	; 63
    125e:	cd bf       	out	0x3d, r28	; 61
    1260:	cf 91       	pop	r28
    1262:	df 91       	pop	r29
    1264:	08 95       	ret

00001266 <item_init>:
*****************************************************************************************/
#include "../include/bugurt.h"
//Методы элемента 2-связного списка
//инициация элемента
void item_init(item_t *item)
{
    1266:	df 93       	push	r29
    1268:	cf 93       	push	r28
    126a:	00 d0       	rcall	.+0      	; 0x126c <item_init+0x6>
    126c:	cd b7       	in	r28, 0x3d	; 61
    126e:	de b7       	in	r29, 0x3e	; 62
    1270:	9a 83       	std	Y+2, r25	; 0x02
    1272:	89 83       	std	Y+1, r24	; 0x01
    item->prev = item;
    1274:	e9 81       	ldd	r30, Y+1	; 0x01
    1276:	fa 81       	ldd	r31, Y+2	; 0x02
    1278:	89 81       	ldd	r24, Y+1	; 0x01
    127a:	9a 81       	ldd	r25, Y+2	; 0x02
    127c:	93 83       	std	Z+3, r25	; 0x03
    127e:	82 83       	std	Z+2, r24	; 0x02
    item->next = item;
    1280:	e9 81       	ldd	r30, Y+1	; 0x01
    1282:	fa 81       	ldd	r31, Y+2	; 0x02
    1284:	89 81       	ldd	r24, Y+1	; 0x01
    1286:	9a 81       	ldd	r25, Y+2	; 0x02
    1288:	91 83       	std	Z+1, r25	; 0x01
    128a:	80 83       	st	Z, r24
}
    128c:	0f 90       	pop	r0
    128e:	0f 90       	pop	r0
    1290:	cf 91       	pop	r28
    1292:	df 91       	pop	r29
    1294:	08 95       	ret

00001296 <item_insert>:
//Вставить элемент
void item_insert(item_t *item, item_t *head)
{
    1296:	df 93       	push	r29
    1298:	cf 93       	push	r28
    129a:	00 d0       	rcall	.+0      	; 0x129c <item_insert+0x6>
    129c:	00 d0       	rcall	.+0      	; 0x129e <item_insert+0x8>
    129e:	00 d0       	rcall	.+0      	; 0x12a0 <item_insert+0xa>
    12a0:	cd b7       	in	r28, 0x3d	; 61
    12a2:	de b7       	in	r29, 0x3e	; 62
    12a4:	9c 83       	std	Y+4, r25	; 0x04
    12a6:	8b 83       	std	Y+3, r24	; 0x03
    12a8:	7e 83       	std	Y+6, r23	; 0x06
    12aa:	6d 83       	std	Y+5, r22	; 0x05
    // "хвост" списка
    item_t * tail = head->prev;
    12ac:	ed 81       	ldd	r30, Y+5	; 0x05
    12ae:	fe 81       	ldd	r31, Y+6	; 0x06
    12b0:	82 81       	ldd	r24, Z+2	; 0x02
    12b2:	93 81       	ldd	r25, Z+3	; 0x03
    12b4:	9a 83       	std	Y+2, r25	; 0x02
    12b6:	89 83       	std	Y+1, r24	; 0x01

    // Вставляем элемент между "головой" и "хвостом"
    item->prev = tail;
    12b8:	eb 81       	ldd	r30, Y+3	; 0x03
    12ba:	fc 81       	ldd	r31, Y+4	; 0x04
    12bc:	89 81       	ldd	r24, Y+1	; 0x01
    12be:	9a 81       	ldd	r25, Y+2	; 0x02
    12c0:	93 83       	std	Z+3, r25	; 0x03
    12c2:	82 83       	std	Z+2, r24	; 0x02
    item->next = head;
    12c4:	eb 81       	ldd	r30, Y+3	; 0x03
    12c6:	fc 81       	ldd	r31, Y+4	; 0x04
    12c8:	8d 81       	ldd	r24, Y+5	; 0x05
    12ca:	9e 81       	ldd	r25, Y+6	; 0x06
    12cc:	91 83       	std	Z+1, r25	; 0x01
    12ce:	80 83       	st	Z, r24

    head->prev = item;
    12d0:	ed 81       	ldd	r30, Y+5	; 0x05
    12d2:	fe 81       	ldd	r31, Y+6	; 0x06
    12d4:	8b 81       	ldd	r24, Y+3	; 0x03
    12d6:	9c 81       	ldd	r25, Y+4	; 0x04
    12d8:	93 83       	std	Z+3, r25	; 0x03
    12da:	82 83       	std	Z+2, r24	; 0x02
    tail->next = item;
    12dc:	e9 81       	ldd	r30, Y+1	; 0x01
    12de:	fa 81       	ldd	r31, Y+2	; 0x02
    12e0:	8b 81       	ldd	r24, Y+3	; 0x03
    12e2:	9c 81       	ldd	r25, Y+4	; 0x04
    12e4:	91 83       	std	Z+1, r25	; 0x01
    12e6:	80 83       	st	Z, r24
}
    12e8:	26 96       	adiw	r28, 0x06	; 6
    12ea:	0f b6       	in	r0, 0x3f	; 63
    12ec:	f8 94       	cli
    12ee:	de bf       	out	0x3e, r29	; 62
    12f0:	0f be       	out	0x3f, r0	; 63
    12f2:	cd bf       	out	0x3d, r28	; 61
    12f4:	cf 91       	pop	r28
    12f6:	df 91       	pop	r29
    12f8:	08 95       	ret

000012fa <item_cut>:
//Вырезать элемент
void item_cut( item_t *item )
{
    12fa:	df 93       	push	r29
    12fc:	cf 93       	push	r28
    12fe:	00 d0       	rcall	.+0      	; 0x1300 <item_cut+0x6>
    1300:	00 d0       	rcall	.+0      	; 0x1302 <item_cut+0x8>
    1302:	00 d0       	rcall	.+0      	; 0x1304 <item_cut+0xa>
    1304:	cd b7       	in	r28, 0x3d	; 61
    1306:	de b7       	in	r29, 0x3e	; 62
    1308:	9e 83       	std	Y+6, r25	; 0x06
    130a:	8d 83       	std	Y+5, r24	; 0x05
    item_t * prev = item->prev; //Предыдущий элемент
    130c:	ed 81       	ldd	r30, Y+5	; 0x05
    130e:	fe 81       	ldd	r31, Y+6	; 0x06
    1310:	82 81       	ldd	r24, Z+2	; 0x02
    1312:	93 81       	ldd	r25, Z+3	; 0x03
    1314:	9c 83       	std	Y+4, r25	; 0x04
    1316:	8b 83       	std	Y+3, r24	; 0x03
    item_t * next = item->next; //Следующий элемент
    1318:	ed 81       	ldd	r30, Y+5	; 0x05
    131a:	fe 81       	ldd	r31, Y+6	; 0x06
    131c:	80 81       	ld	r24, Z
    131e:	91 81       	ldd	r25, Z+1	; 0x01
    1320:	9a 83       	std	Y+2, r25	; 0x02
    1322:	89 83       	std	Y+1, r24	; 0x01

    next->prev = prev;
    1324:	e9 81       	ldd	r30, Y+1	; 0x01
    1326:	fa 81       	ldd	r31, Y+2	; 0x02
    1328:	8b 81       	ldd	r24, Y+3	; 0x03
    132a:	9c 81       	ldd	r25, Y+4	; 0x04
    132c:	93 83       	std	Z+3, r25	; 0x03
    132e:	82 83       	std	Z+2, r24	; 0x02
    prev->next = next;
    1330:	eb 81       	ldd	r30, Y+3	; 0x03
    1332:	fc 81       	ldd	r31, Y+4	; 0x04
    1334:	89 81       	ldd	r24, Y+1	; 0x01
    1336:	9a 81       	ldd	r25, Y+2	; 0x02
    1338:	91 83       	std	Z+1, r25	; 0x01
    133a:	80 83       	st	Z, r24

    item->prev = item;
    133c:	ed 81       	ldd	r30, Y+5	; 0x05
    133e:	fe 81       	ldd	r31, Y+6	; 0x06
    1340:	8d 81       	ldd	r24, Y+5	; 0x05
    1342:	9e 81       	ldd	r25, Y+6	; 0x06
    1344:	93 83       	std	Z+3, r25	; 0x03
    1346:	82 83       	std	Z+2, r24	; 0x02
    item->next = item;
    1348:	ed 81       	ldd	r30, Y+5	; 0x05
    134a:	fe 81       	ldd	r31, Y+6	; 0x06
    134c:	8d 81       	ldd	r24, Y+5	; 0x05
    134e:	9e 81       	ldd	r25, Y+6	; 0x06
    1350:	91 83       	std	Z+1, r25	; 0x01
    1352:	80 83       	st	Z, r24
}
    1354:	26 96       	adiw	r28, 0x06	; 6
    1356:	0f b6       	in	r0, 0x3f	; 63
    1358:	f8 94       	cli
    135a:	de bf       	out	0x3e, r29	; 62
    135c:	0f be       	out	0x3f, r0	; 63
    135e:	cd bf       	out	0x3d, r28	; 61
    1360:	cf 91       	pop	r28
    1362:	df 91       	pop	r29
    1364:	08 95       	ret

00001366 <kernel_init>:
{
    while(1);
}

void kernel_init(void)
{
    1366:	8f 92       	push	r8
    1368:	af 92       	push	r10
    136a:	bf 92       	push	r11
    136c:	cf 92       	push	r12
    136e:	ef 92       	push	r14
    1370:	ff 92       	push	r15
    1372:	0f 93       	push	r16
    1374:	1f 93       	push	r17
    1376:	df 93       	push	r29
    1378:	cf 93       	push	r28
    137a:	cd b7       	in	r28, 0x3d	; 61
    137c:	de b7       	in	r29, 0x3e	; 62
        stat_init( (stat_t *)kernel.stat + i );
        sched_init( (sched_t *)kernel.sched + i, (proc_t *)kernel.idle + i );
    }
    spin_unlock( &kernel.stat_lock );
#else
    proc_init_isr(
    137e:	88 ec       	ldi	r24, 0xC8	; 200
    1380:	91 e0       	ldi	r25, 0x01	; 1
    1382:	26 e3       	ldi	r18, 0x36	; 54
    1384:	32 e1       	ldi	r19, 0x12	; 18
    1386:	b9 01       	movw	r22, r18
    1388:	40 e0       	ldi	r20, 0x00	; 0
    138a:	50 e0       	ldi	r21, 0x00	; 0
    138c:	20 e0       	ldi	r18, 0x00	; 0
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	00 e0       	ldi	r16, 0x00	; 0
    1392:	10 e0       	ldi	r17, 0x00	; 0
    1394:	ee 24       	eor	r14, r14
    1396:	ff 24       	eor	r15, r15
    1398:	0f 2e       	mov	r0, r31
    139a:	f7 e0       	ldi	r31, 0x07	; 7
    139c:	cf 2e       	mov	r12, r31
    139e:	f0 2d       	mov	r31, r0
    13a0:	aa 24       	eor	r10, r10
    13a2:	bb 24       	eor	r11, r11
    13a4:	a3 94       	inc	r10
    13a6:	88 24       	eor	r8, r8
    13a8:	0e 94 89 0b 	call	0x1712	; 0x1712 <proc_init_isr>
        0, // это не важно, при первой же смене контекста будет сохранен текущий указатель стека
        ((prio_t)BITS_IN_INDEX_T - (prio_t)1),// низший приоритет
        (timer_t)1,//минимальный квант времени
        (bool_t)0// не RT
    );
    sched_init( (sched_t *)&kernel.sched, (proc_t *)&kernel.idle );
    13ac:	8e e9       	ldi	r24, 0x9E	; 158
    13ae:	91 e0       	ldi	r25, 0x01	; 1
    13b0:	28 ec       	ldi	r18, 0xC8	; 200
    13b2:	31 e0       	ldi	r19, 0x01	; 1
    13b4:	b9 01       	movw	r22, r18
    13b6:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <sched_init>
#endif // CONFIG_MP
}
    13ba:	cf 91       	pop	r28
    13bc:	df 91       	pop	r29
    13be:	1f 91       	pop	r17
    13c0:	0f 91       	pop	r16
    13c2:	ff 90       	pop	r15
    13c4:	ef 90       	pop	r14
    13c6:	cf 90       	pop	r12
    13c8:	bf 90       	pop	r11
    13ca:	af 90       	pop	r10
    13cc:	8f 90       	pop	r8
    13ce:	08 95       	ret

000013d0 <mutex_init_isr>:
    mutex_t * mutex
#ifdef CONFIG_USE_HIGHEST_LOCKER
    ,prio_t prio
#endif // CONFIG_USE_HIGHEST_LOCKER
)
{
    13d0:	df 93       	push	r29
    13d2:	cf 93       	push	r28
    13d4:	00 d0       	rcall	.+0      	; 0x13d6 <mutex_init_isr+0x6>
    13d6:	0f 92       	push	r0
    13d8:	cd b7       	in	r28, 0x3d	; 61
    13da:	de b7       	in	r29, 0x3e	; 62
    13dc:	9a 83       	std	Y+2, r25	; 0x02
    13de:	89 83       	std	Y+1, r24	; 0x01
    13e0:	6b 83       	std	Y+3, r22	; 0x03
    xlist_init( (xlist_t *)mutex );
    13e2:	89 81       	ldd	r24, Y+1	; 0x01
    13e4:	9a 81       	ldd	r25, Y+2	; 0x02
    13e6:	0e 94 c1 10 	call	0x2182	; 0x2182 <xlist_init>
    mutex->free = (bool_t)1;
    13ea:	e9 81       	ldd	r30, Y+1	; 0x01
    13ec:	fa 81       	ldd	r31, Y+2	; 0x02
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	82 8b       	std	Z+18, r24	; 0x12
#ifdef CONFIG_USE_HIGHEST_LOCKER
    mutex->prio = prio;
    13f2:	e9 81       	ldd	r30, Y+1	; 0x01
    13f4:	fa 81       	ldd	r31, Y+2	; 0x02
    13f6:	8b 81       	ldd	r24, Y+3	; 0x03
    13f8:	81 8b       	std	Z+17, r24	; 0x11
#endif // CONFIG_USE_HIGHEST_LOCKER
}
    13fa:	0f 90       	pop	r0
    13fc:	0f 90       	pop	r0
    13fe:	0f 90       	pop	r0
    1400:	cf 91       	pop	r28
    1402:	df 91       	pop	r29
    1404:	08 95       	ret

00001406 <_mutex_lock>:

// К моменту вызова захвачена блокировка mutex-а, запрещены прерывания
bool_t _mutex_lock( mutex_t * mutex )
{
    1406:	df 93       	push	r29
    1408:	cf 93       	push	r28
    140a:	00 d0       	rcall	.+0      	; 0x140c <_mutex_lock+0x6>
    140c:	00 d0       	rcall	.+0      	; 0x140e <_mutex_lock+0x8>
    140e:	0f 92       	push	r0
    1410:	cd b7       	in	r28, 0x3d	; 61
    1412:	de b7       	in	r29, 0x3e	; 62
    1414:	9d 83       	std	Y+5, r25	; 0x05
    1416:	8c 83       	std	Y+4, r24	; 0x04
    bool_t ret = mutex->free;
    1418:	ec 81       	ldd	r30, Y+4	; 0x04
    141a:	fd 81       	ldd	r31, Y+5	; 0x05
    141c:	82 89       	ldd	r24, Z+18	; 0x12
    141e:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = current_proc();
    1420:	0e 94 cc 00 	call	0x198	; 0x198 <current_proc>
    1424:	9a 83       	std	Y+2, r25	; 0x02
    1426:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
#ifdef CONFIG_USE_HIGHEST_LOCKER
    _proc_lres_inc( proc, mutex->prio );
    1428:	ec 81       	ldd	r30, Y+4	; 0x04
    142a:	fd 81       	ldd	r31, Y+5	; 0x05
    142c:	21 89       	ldd	r18, Z+17	; 0x11
    142e:	89 81       	ldd	r24, Y+1	; 0x01
    1430:	9a 81       	ldd	r25, Y+2	; 0x02
    1432:	62 2f       	mov	r22, r18
    1434:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_proc_lres_inc>
#else // !CONFIG_USE_HIGHEST_LOCKER
    _proc_lres_inc( proc );
#endif // CONFIG_USE_HIGHEST_LOCKER
    if( ret )
    1438:	8b 81       	ldd	r24, Y+3	; 0x03
    143a:	88 23       	and	r24, r24
    143c:	41 f0       	breq	.+16     	; 0x144e <_mutex_lock+0x48>
    {
        mutex->free = (bool_t)0;
    143e:	ec 81       	ldd	r30, Y+4	; 0x04
    1440:	fd 81       	ldd	r31, Y+5	; 0x05
    1442:	12 8a       	std	Z+18, r1	; 0x12
#ifdef CONFIG_USE_HIGHEST_LOCKER
        // Меняем приоритет только здесь
        _proc_prio_control_running( proc );
    1444:	89 81       	ldd	r24, Y+1	; 0x01
    1446:	9a 81       	ldd	r25, Y+2	; 0x02
    1448:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <_proc_prio_control_running>
    144c:	1b c0       	rjmp	.+54     	; 0x1484 <_mutex_lock+0x7e>
#endif // CONFIG_USE_HIGHEST_LOCKER
    }
    else
    {
        proc->flags |= PROC_FLG_QUEUE;
    144e:	e9 81       	ldd	r30, Y+1	; 0x01
    1450:	fa 81       	ldd	r31, Y+2	; 0x02
    1452:	83 85       	ldd	r24, Z+11	; 0x0b
    1454:	88 60       	ori	r24, 0x08	; 8
    1456:	e9 81       	ldd	r30, Y+1	; 0x01
    1458:	fa 81       	ldd	r31, Y+2	; 0x02
    145a:	83 87       	std	Z+11, r24	; 0x0b
        proc->flags &= ~PROC_FLG_RUN;
    145c:	e9 81       	ldd	r30, Y+1	; 0x01
    145e:	fa 81       	ldd	r31, Y+2	; 0x02
    1460:	83 85       	ldd	r24, Z+11	; 0x0b
    1462:	8d 7f       	andi	r24, 0xFD	; 253
    1464:	e9 81       	ldd	r30, Y+1	; 0x01
    1466:	fa 81       	ldd	r31, Y+2	; 0x02
    1468:	83 87       	std	Z+11, r24	; 0x0b
        _proc_stop_( proc );
    146a:	89 81       	ldd	r24, Y+1	; 0x01
    146c:	9a 81       	ldd	r25, Y+2	; 0x02
    146e:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <gitem_cut>
        gitem_insert( (gitem_t *)proc, (xlist_t *)mutex );
    1472:	89 81       	ldd	r24, Y+1	; 0x01
    1474:	9a 81       	ldd	r25, Y+2	; 0x02
    1476:	2c 81       	ldd	r18, Y+4	; 0x04
    1478:	3d 81       	ldd	r19, Y+5	; 0x05
    147a:	b9 01       	movw	r22, r18
    147c:	0e 94 73 06 	call	0xce6	; 0xce6 <gitem_insert>
        // Нужна перепланировка
#ifdef CONFIG_MP
        resched( proc->core_id );
#else
        resched();
    1480:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
#endif // CONFIG_MP
    }
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    return ret;
    1484:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1486:	0f 90       	pop	r0
    1488:	0f 90       	pop	r0
    148a:	0f 90       	pop	r0
    148c:	0f 90       	pop	r0
    148e:	0f 90       	pop	r0
    1490:	cf 91       	pop	r28
    1492:	df 91       	pop	r29
    1494:	08 95       	ret

00001496 <_mutex_try_lock>:

bool_t _mutex_try_lock( mutex_t * mutex )
{
    1496:	df 93       	push	r29
    1498:	cf 93       	push	r28
    149a:	00 d0       	rcall	.+0      	; 0x149c <_mutex_try_lock+0x6>
    149c:	00 d0       	rcall	.+0      	; 0x149e <_mutex_try_lock+0x8>
    149e:	0f 92       	push	r0
    14a0:	cd b7       	in	r28, 0x3d	; 61
    14a2:	de b7       	in	r29, 0x3e	; 62
    14a4:	9d 83       	std	Y+5, r25	; 0x05
    14a6:	8c 83       	std	Y+4, r24	; 0x04
    bool_t ret = mutex->free;
    14a8:	ec 81       	ldd	r30, Y+4	; 0x04
    14aa:	fd 81       	ldd	r31, Y+5	; 0x05
    14ac:	82 89       	ldd	r24, Z+18	; 0x12
    14ae:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = current_proc();
    14b0:	0e 94 cc 00 	call	0x198	; 0x198 <current_proc>
    14b4:	9a 83       	std	Y+2, r25	; 0x02
    14b6:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    if( ret )
    14b8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ba:	88 23       	and	r24, r24
    14bc:	79 f0       	breq	.+30     	; 0x14dc <_mutex_try_lock+0x46>
    {
        mutex->free = (bool_t)0;
    14be:	ec 81       	ldd	r30, Y+4	; 0x04
    14c0:	fd 81       	ldd	r31, Y+5	; 0x05
    14c2:	12 8a       	std	Z+18, r1	; 0x12
#ifdef CONFIG_USE_HIGHEST_LOCKER
        _proc_lres_inc( proc, mutex->prio );
    14c4:	ec 81       	ldd	r30, Y+4	; 0x04
    14c6:	fd 81       	ldd	r31, Y+5	; 0x05
    14c8:	21 89       	ldd	r18, Z+17	; 0x11
    14ca:	89 81       	ldd	r24, Y+1	; 0x01
    14cc:	9a 81       	ldd	r25, Y+2	; 0x02
    14ce:	62 2f       	mov	r22, r18
    14d0:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_proc_lres_inc>
        _proc_prio_control_running( proc );
    14d4:	89 81       	ldd	r24, Y+1	; 0x01
    14d6:	9a 81       	ldd	r25, Y+2	; 0x02
    14d8:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <_proc_prio_control_running>
#endif // CONFIG_USE_HIGHEST_LOCKER
    }
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    return ret;
    14dc:	8b 81       	ldd	r24, Y+3	; 0x03
}
    14de:	0f 90       	pop	r0
    14e0:	0f 90       	pop	r0
    14e2:	0f 90       	pop	r0
    14e4:	0f 90       	pop	r0
    14e6:	0f 90       	pop	r0
    14e8:	cf 91       	pop	r28
    14ea:	df 91       	pop	r29
    14ec:	08 95       	ret

000014ee <_mutex_unlock>:

void _mutex_unlock( mutex_t *  mutex )
{
    14ee:	df 93       	push	r29
    14f0:	cf 93       	push	r28
    14f2:	00 d0       	rcall	.+0      	; 0x14f4 <_mutex_unlock+0x6>
    14f4:	00 d0       	rcall	.+0      	; 0x14f6 <_mutex_unlock+0x8>
    14f6:	cd b7       	in	r28, 0x3d	; 61
    14f8:	de b7       	in	r29, 0x3e	; 62
    14fa:	9c 83       	std	Y+4, r25	; 0x04
    14fc:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = current_proc();
    14fe:	0e 94 cc 00 	call	0x198	; 0x198 <current_proc>
    1502:	9a 83       	std	Y+2, r25	; 0x02
    1504:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
#ifdef CONFIG_USE_HIGHEST_LOCKER

    _proc_lres_dec( proc, mutex->prio );
    1506:	eb 81       	ldd	r30, Y+3	; 0x03
    1508:	fc 81       	ldd	r31, Y+4	; 0x04
    150a:	21 89       	ldd	r18, Z+17	; 0x11
    150c:	89 81       	ldd	r24, Y+1	; 0x01
    150e:	9a 81       	ldd	r25, Y+2	; 0x02
    1510:	62 2f       	mov	r22, r18
    1512:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <_proc_lres_dec>
    // Если проготовлен и готов к остановке - останавливаем
    if(  ( proc->flags & PROC_FLG_PRE_END ) && (!(proc->flags & PROC_FLG_HOLD))  )
    1516:	e9 81       	ldd	r30, Y+1	; 0x01
    1518:	fa 81       	ldd	r31, Y+2	; 0x02
    151a:	83 85       	ldd	r24, Z+11	; 0x0b
    151c:	88 2f       	mov	r24, r24
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	80 72       	andi	r24, 0x20	; 32
    1522:	90 70       	andi	r25, 0x00	; 0
    1524:	00 97       	sbiw	r24, 0x00	; 0
    1526:	a1 f0       	breq	.+40     	; 0x1550 <_mutex_unlock+0x62>
    1528:	e9 81       	ldd	r30, Y+1	; 0x01
    152a:	fa 81       	ldd	r31, Y+2	; 0x02
    152c:	83 85       	ldd	r24, Z+11	; 0x0b
    152e:	88 2f       	mov	r24, r24
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	84 70       	andi	r24, 0x04	; 4
    1534:	90 70       	andi	r25, 0x00	; 0
    1536:	00 97       	sbiw	r24, 0x00	; 0
    1538:	59 f4       	brne	.+22     	; 0x1550 <_mutex_unlock+0x62>
    {
        _proc_stop_( proc );
    153a:	89 81       	ldd	r24, Y+1	; 0x01
    153c:	9a 81       	ldd	r25, Y+2	; 0x02
    153e:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <gitem_cut>
        _proc_prio_control_stoped( proc );
    1542:	89 81       	ldd	r24, Y+1	; 0x01
    1544:	9a 81       	ldd	r25, Y+2	; 0x02
    1546:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <_proc_prio_control_stoped>
        // Нужна перепланировка, процесс остановили и не запустили обратно
#ifdef CONFIG_MP
        resched( proc->core_id );
#else
        resched();
    154a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
    154e:	04 c0       	rjmp	.+8      	; 0x1558 <_mutex_unlock+0x6a>
#endif // CONFIG_MP
    }
    // Не останавливаем - меняем проиритет на ходу
    else _proc_prio_control_running( proc );
    1550:	89 81       	ldd	r24, Y+1	; 0x01
    1552:	9a 81       	ldd	r25, Y+2	; 0x02
    1554:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <_proc_prio_control_running>
#endif // CONFIG_USE_HIGHEST_LOCKER
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    // Обрабока самого мьютекса
    if( ((xlist_t *)mutex)->index == (index_t)0  )
    1558:	eb 81       	ldd	r30, Y+3	; 0x03
    155a:	fc 81       	ldd	r31, Y+4	; 0x04
    155c:	80 89       	ldd	r24, Z+16	; 0x10
    155e:	88 23       	and	r24, r24
    1560:	29 f4       	brne	.+10     	; 0x156c <_mutex_unlock+0x7e>
    {
        // Список ожидающих пуст, выходим
        mutex->free = (bool_t)1;
    1562:	eb 81       	ldd	r30, Y+3	; 0x03
    1564:	fc 81       	ldd	r31, Y+4	; 0x04
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	82 8b       	std	Z+18, r24	; 0x12
    156a:	19 c0       	rjmp	.+50     	; 0x159e <_mutex_unlock+0xb0>
        return;
    }
    // Список ожидающих не пуст, запускаем голову
    proc = (proc_t *)xlist_head((xlist_t *)mutex);
    156c:	8b 81       	ldd	r24, Y+3	; 0x03
    156e:	9c 81       	ldd	r25, Y+4	; 0x04
    1570:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <xlist_head>
    1574:	9a 83       	std	Y+2, r25	; 0x02
    1576:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    // Сначала надо вырезать
    proc->flags &= ~PROC_FLG_QUEUE;
    1578:	e9 81       	ldd	r30, Y+1	; 0x01
    157a:	fa 81       	ldd	r31, Y+2	; 0x02
    157c:	83 85       	ldd	r24, Z+11	; 0x0b
    157e:	87 7f       	andi	r24, 0xF7	; 247
    1580:	e9 81       	ldd	r30, Y+1	; 0x01
    1582:	fa 81       	ldd	r31, Y+2	; 0x02
    1584:	83 87       	std	Z+11, r24	; 0x0b
    gitem_cut( (gitem_t *)proc );
    1586:	89 81       	ldd	r24, Y+1	; 0x01
    1588:	9a 81       	ldd	r25, Y+2	; 0x02
    158a:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <gitem_cut>
#ifdef CONFIG_USE_HIGHEST_LOCKER
    // Меняем приоритет
    _proc_prio_control_stoped( proc );
    158e:	89 81       	ldd	r24, Y+1	; 0x01
    1590:	9a 81       	ldd	r25, Y+2	; 0x02
    1592:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <_proc_prio_control_stoped>
#endif // CONFIG_USE_HIGHEST_LOCKER
    _proc_run( proc );
    1596:	89 81       	ldd	r24, Y+1	; 0x01
    1598:	9a 81       	ldd	r25, Y+2	; 0x02
    159a:	0e 94 11 0c 	call	0x1822	; 0x1822 <_proc_run>
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
}
    159e:	0f 90       	pop	r0
    15a0:	0f 90       	pop	r0
    15a2:	0f 90       	pop	r0
    15a4:	0f 90       	pop	r0
    15a6:	cf 91       	pop	r28
    15a8:	df 91       	pop	r29
    15aa:	08 95       	ret

000015ac <pcounter_init>:
*                           http://www.0chan.ru/r/res/9996.html                          *
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
void pcounter_init(pcounter_t * pcounter)
{
    15ac:	df 93       	push	r29
    15ae:	cf 93       	push	r28
    15b0:	00 d0       	rcall	.+0      	; 0x15b2 <pcounter_init+0x6>
    15b2:	0f 92       	push	r0
    15b4:	cd b7       	in	r28, 0x3d	; 61
    15b6:	de b7       	in	r29, 0x3e	; 62
    15b8:	9b 83       	std	Y+3, r25	; 0x03
    15ba:	8a 83       	std	Y+2, r24	; 0x02
    prio_t p;
    pcounter->index = (index_t)0;
    15bc:	ea 81       	ldd	r30, Y+2	; 0x02
    15be:	fb 81       	ldd	r31, Y+3	; 0x03
    15c0:	10 8a       	std	Z+16, r1	; 0x10
    for(p = 0; p < (index_t)BITS_IN_INDEX_T; p++)pcounter->counter[p] = (count_t)0;
    15c2:	19 82       	std	Y+1, r1	; 0x01
    15c4:	0f c0       	rjmp	.+30     	; 0x15e4 <pcounter_init+0x38>
    15c6:	89 81       	ldd	r24, Y+1	; 0x01
    15c8:	88 2f       	mov	r24, r24
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	2a 81       	ldd	r18, Y+2	; 0x02
    15ce:	3b 81       	ldd	r19, Y+3	; 0x03
    15d0:	88 0f       	add	r24, r24
    15d2:	99 1f       	adc	r25, r25
    15d4:	f9 01       	movw	r30, r18
    15d6:	e8 0f       	add	r30, r24
    15d8:	f9 1f       	adc	r31, r25
    15da:	11 82       	std	Z+1, r1	; 0x01
    15dc:	10 82       	st	Z, r1
    15de:	89 81       	ldd	r24, Y+1	; 0x01
    15e0:	8f 5f       	subi	r24, 0xFF	; 255
    15e2:	89 83       	std	Y+1, r24	; 0x01
    15e4:	89 81       	ldd	r24, Y+1	; 0x01
    15e6:	88 30       	cpi	r24, 0x08	; 8
    15e8:	70 f3       	brcs	.-36     	; 0x15c6 <pcounter_init+0x1a>
}
    15ea:	0f 90       	pop	r0
    15ec:	0f 90       	pop	r0
    15ee:	0f 90       	pop	r0
    15f0:	cf 91       	pop	r28
    15f2:	df 91       	pop	r29
    15f4:	08 95       	ret

000015f6 <pcounter_inc>:

void pcounter_inc(pcounter_t * pcounter, prio_t prio)
{
    15f6:	df 93       	push	r29
    15f8:	cf 93       	push	r28
    15fa:	00 d0       	rcall	.+0      	; 0x15fc <pcounter_inc+0x6>
    15fc:	0f 92       	push	r0
    15fe:	cd b7       	in	r28, 0x3d	; 61
    1600:	de b7       	in	r29, 0x3e	; 62
    1602:	9a 83       	std	Y+2, r25	; 0x02
    1604:	89 83       	std	Y+1, r24	; 0x01
    1606:	6b 83       	std	Y+3, r22	; 0x03
    pcounter->counter[prio]++;
    1608:	8b 81       	ldd	r24, Y+3	; 0x03
    160a:	68 2f       	mov	r22, r24
    160c:	70 e0       	ldi	r23, 0x00	; 0
    160e:	29 81       	ldd	r18, Y+1	; 0x01
    1610:	3a 81       	ldd	r19, Y+2	; 0x02
    1612:	cb 01       	movw	r24, r22
    1614:	88 0f       	add	r24, r24
    1616:	99 1f       	adc	r25, r25
    1618:	f9 01       	movw	r30, r18
    161a:	e8 0f       	add	r30, r24
    161c:	f9 1f       	adc	r31, r25
    161e:	80 81       	ld	r24, Z
    1620:	91 81       	ldd	r25, Z+1	; 0x01
    1622:	ac 01       	movw	r20, r24
    1624:	4f 5f       	subi	r20, 0xFF	; 255
    1626:	5f 4f       	sbci	r21, 0xFF	; 255
    1628:	29 81       	ldd	r18, Y+1	; 0x01
    162a:	3a 81       	ldd	r19, Y+2	; 0x02
    162c:	cb 01       	movw	r24, r22
    162e:	88 0f       	add	r24, r24
    1630:	99 1f       	adc	r25, r25
    1632:	f9 01       	movw	r30, r18
    1634:	e8 0f       	add	r30, r24
    1636:	f9 1f       	adc	r31, r25
    1638:	51 83       	std	Z+1, r21	; 0x01
    163a:	40 83       	st	Z, r20
    pcounter->index |= ((index_t)1)<<prio;
    163c:	e9 81       	ldd	r30, Y+1	; 0x01
    163e:	fa 81       	ldd	r31, Y+2	; 0x02
    1640:	80 89       	ldd	r24, Z+16	; 0x10
    1642:	48 2f       	mov	r20, r24
    1644:	8b 81       	ldd	r24, Y+3	; 0x03
    1646:	28 2f       	mov	r18, r24
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	02 2e       	mov	r0, r18
    1650:	02 c0       	rjmp	.+4      	; 0x1656 <pcounter_inc+0x60>
    1652:	88 0f       	add	r24, r24
    1654:	99 1f       	adc	r25, r25
    1656:	0a 94       	dec	r0
    1658:	e2 f7       	brpl	.-8      	; 0x1652 <pcounter_inc+0x5c>
    165a:	84 2b       	or	r24, r20
    165c:	e9 81       	ldd	r30, Y+1	; 0x01
    165e:	fa 81       	ldd	r31, Y+2	; 0x02
    1660:	80 8b       	std	Z+16, r24	; 0x10
}
    1662:	0f 90       	pop	r0
    1664:	0f 90       	pop	r0
    1666:	0f 90       	pop	r0
    1668:	cf 91       	pop	r28
    166a:	df 91       	pop	r29
    166c:	08 95       	ret

0000166e <pcounter_dec>:

index_t pcounter_dec(pcounter_t * pcounter, prio_t prio)
{
    166e:	df 93       	push	r29
    1670:	cf 93       	push	r28
    1672:	00 d0       	rcall	.+0      	; 0x1674 <pcounter_dec+0x6>
    1674:	00 d0       	rcall	.+0      	; 0x1676 <pcounter_dec+0x8>
    1676:	cd b7       	in	r28, 0x3d	; 61
    1678:	de b7       	in	r29, 0x3e	; 62
    167a:	9b 83       	std	Y+3, r25	; 0x03
    167c:	8a 83       	std	Y+2, r24	; 0x02
    167e:	6c 83       	std	Y+4, r22	; 0x04
    index_t mask = ((index_t)1)<<prio;
    1680:	8c 81       	ldd	r24, Y+4	; 0x04
    1682:	28 2f       	mov	r18, r24
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	02 c0       	rjmp	.+4      	; 0x1690 <pcounter_dec+0x22>
    168c:	88 0f       	add	r24, r24
    168e:	99 1f       	adc	r25, r25
    1690:	2a 95       	dec	r18
    1692:	e2 f7       	brpl	.-8      	; 0x168c <pcounter_dec+0x1e>
    1694:	89 83       	std	Y+1, r24	; 0x01
    pcounter->counter[prio]--;
    1696:	8c 81       	ldd	r24, Y+4	; 0x04
    1698:	68 2f       	mov	r22, r24
    169a:	70 e0       	ldi	r23, 0x00	; 0
    169c:	2a 81       	ldd	r18, Y+2	; 0x02
    169e:	3b 81       	ldd	r19, Y+3	; 0x03
    16a0:	cb 01       	movw	r24, r22
    16a2:	88 0f       	add	r24, r24
    16a4:	99 1f       	adc	r25, r25
    16a6:	f9 01       	movw	r30, r18
    16a8:	e8 0f       	add	r30, r24
    16aa:	f9 1f       	adc	r31, r25
    16ac:	80 81       	ld	r24, Z
    16ae:	91 81       	ldd	r25, Z+1	; 0x01
    16b0:	ac 01       	movw	r20, r24
    16b2:	41 50       	subi	r20, 0x01	; 1
    16b4:	50 40       	sbci	r21, 0x00	; 0
    16b6:	2a 81       	ldd	r18, Y+2	; 0x02
    16b8:	3b 81       	ldd	r19, Y+3	; 0x03
    16ba:	cb 01       	movw	r24, r22
    16bc:	88 0f       	add	r24, r24
    16be:	99 1f       	adc	r25, r25
    16c0:	f9 01       	movw	r30, r18
    16c2:	e8 0f       	add	r30, r24
    16c4:	f9 1f       	adc	r31, r25
    16c6:	51 83       	std	Z+1, r21	; 0x01
    16c8:	40 83       	st	Z, r20
    if(pcounter->counter[prio] == (count_t)0)pcounter->index &= ~mask;
    16ca:	8c 81       	ldd	r24, Y+4	; 0x04
    16cc:	88 2f       	mov	r24, r24
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	2a 81       	ldd	r18, Y+2	; 0x02
    16d2:	3b 81       	ldd	r19, Y+3	; 0x03
    16d4:	88 0f       	add	r24, r24
    16d6:	99 1f       	adc	r25, r25
    16d8:	f9 01       	movw	r30, r18
    16da:	e8 0f       	add	r30, r24
    16dc:	f9 1f       	adc	r31, r25
    16de:	80 81       	ld	r24, Z
    16e0:	91 81       	ldd	r25, Z+1	; 0x01
    16e2:	00 97       	sbiw	r24, 0x00	; 0
    16e4:	51 f4       	brne	.+20     	; 0x16fa <pcounter_dec+0x8c>
    16e6:	ea 81       	ldd	r30, Y+2	; 0x02
    16e8:	fb 81       	ldd	r31, Y+3	; 0x03
    16ea:	80 89       	ldd	r24, Z+16	; 0x10
    16ec:	98 2f       	mov	r25, r24
    16ee:	89 81       	ldd	r24, Y+1	; 0x01
    16f0:	80 95       	com	r24
    16f2:	89 23       	and	r24, r25
    16f4:	ea 81       	ldd	r30, Y+2	; 0x02
    16f6:	fb 81       	ldd	r31, Y+3	; 0x03
    16f8:	80 8b       	std	Z+16, r24	; 0x10
    return pcounter->index & mask;
    16fa:	ea 81       	ldd	r30, Y+2	; 0x02
    16fc:	fb 81       	ldd	r31, Y+3	; 0x03
    16fe:	90 89       	ldd	r25, Z+16	; 0x10
    1700:	89 81       	ldd	r24, Y+1	; 0x01
    1702:	89 23       	and	r24, r25
}
    1704:	0f 90       	pop	r0
    1706:	0f 90       	pop	r0
    1708:	0f 90       	pop	r0
    170a:	0f 90       	pop	r0
    170c:	cf 91       	pop	r28
    170e:	df 91       	pop	r29
    1710:	08 95       	ret

00001712 <proc_init_isr>:
    bool_t is_rt // если true, значит процесс будет иметть поведение RT
#ifdef CONFIG_MP
    ,affinity_t affinity
#endif // CONFIG_MP
)
{
    1712:	8f 92       	push	r8
    1714:	af 92       	push	r10
    1716:	bf 92       	push	r11
    1718:	cf 92       	push	r12
    171a:	ef 92       	push	r14
    171c:	ff 92       	push	r15
    171e:	0f 93       	push	r16
    1720:	1f 93       	push	r17
    1722:	df 93       	push	r29
    1724:	cf 93       	push	r28
    1726:	cd b7       	in	r28, 0x3d	; 61
    1728:	de b7       	in	r29, 0x3e	; 62
    172a:	61 97       	sbiw	r28, 0x11	; 17
    172c:	0f b6       	in	r0, 0x3f	; 63
    172e:	f8 94       	cli
    1730:	de bf       	out	0x3e, r29	; 62
    1732:	0f be       	out	0x3f, r0	; 63
    1734:	cd bf       	out	0x3d, r28	; 61
    1736:	9a 83       	std	Y+2, r25	; 0x02
    1738:	89 83       	std	Y+1, r24	; 0x01
    173a:	7c 83       	std	Y+4, r23	; 0x04
    173c:	6b 83       	std	Y+3, r22	; 0x03
    173e:	5e 83       	std	Y+6, r21	; 0x06
    1740:	4d 83       	std	Y+5, r20	; 0x05
    1742:	38 87       	std	Y+8, r19	; 0x08
    1744:	2f 83       	std	Y+7, r18	; 0x07
    1746:	1a 87       	std	Y+10, r17	; 0x0a
    1748:	09 87       	std	Y+9, r16	; 0x09
    174a:	fc 86       	std	Y+12, r15	; 0x0c
    174c:	eb 86       	std	Y+11, r14	; 0x0b
    174e:	cd 86       	std	Y+13, r12	; 0x0d
    1750:	bf 86       	std	Y+15, r11	; 0x0f
    1752:	ae 86       	std	Y+14, r10	; 0x0e
    1754:	88 8a       	std	Y+16, r8	; 0x10
    gitem_init( (gitem_t *)proc, prio );
    1756:	89 81       	ldd	r24, Y+1	; 0x01
    1758:	9a 81       	ldd	r25, Y+2	; 0x02
    175a:	6d 85       	ldd	r22, Y+13	; 0x0d
    175c:	0e 94 4d 06 	call	0xc9a	; 0xc9a <gitem_init>
    proc->flags = ( is_rt )?PROC_FLG_RT:(flag_t)0;
    1760:	88 89       	ldd	r24, Y+16	; 0x10
    1762:	89 8b       	std	Y+17, r24	; 0x11
    1764:	89 89       	ldd	r24, Y+17	; 0x11
    1766:	88 23       	and	r24, r24
    1768:	11 f0       	breq	.+4      	; 0x176e <proc_init_isr+0x5c>
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	89 8b       	std	Y+17, r24	; 0x11
    176e:	89 89       	ldd	r24, Y+17	; 0x11
    1770:	e9 81       	ldd	r30, Y+1	; 0x01
    1772:	fa 81       	ldd	r31, Y+2	; 0x02
    1774:	83 87       	std	Z+11, r24	; 0x0b
#ifdef CONFIG_USE_HIGHEST_LOCKER
    pcounter_init(&proc->lres);
    1776:	89 81       	ldd	r24, Y+1	; 0x01
    1778:	9a 81       	ldd	r25, Y+2	; 0x02
    177a:	0d 96       	adiw	r24, 0x0d	; 13
    177c:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <pcounter_init>
    proc->base_prio = prio;
    1780:	e9 81       	ldd	r30, Y+1	; 0x01
    1782:	fa 81       	ldd	r31, Y+2	; 0x02
    1784:	8d 85       	ldd	r24, Y+13	; 0x0d
    1786:	84 87       	std	Z+12, r24	; 0x0c
#else
    proc->lres = (count_t)0;
#endif
    proc->time_quant = time_quant;
    1788:	e9 81       	ldd	r30, Y+1	; 0x01
    178a:	fa 81       	ldd	r31, Y+2	; 0x02
    178c:	8e 85       	ldd	r24, Y+14	; 0x0e
    178e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1790:	97 8f       	std	Z+31, r25	; 0x1f
    1792:	86 8f       	std	Z+30, r24	; 0x1e
    proc->timer = time_quant;
    1794:	e9 81       	ldd	r30, Y+1	; 0x01
    1796:	fa 81       	ldd	r31, Y+2	; 0x02
    1798:	8e 85       	ldd	r24, Y+14	; 0x0e
    179a:	9f 85       	ldd	r25, Y+15	; 0x0f
    179c:	91 a3       	std	Z+33, r25	; 0x21
    179e:	80 a3       	std	Z+32, r24	; 0x20
#ifdef CONFIG_MP
    proc->core_id = (core_id_t)0;
    proc->affinity = affinity;
#endif // CONFIG_MP
    proc->pmain = pmain;
    17a0:	e9 81       	ldd	r30, Y+1	; 0x01
    17a2:	fa 81       	ldd	r31, Y+2	; 0x02
    17a4:	8b 81       	ldd	r24, Y+3	; 0x03
    17a6:	9c 81       	ldd	r25, Y+4	; 0x04
    17a8:	93 a3       	std	Z+35, r25	; 0x23
    17aa:	82 a3       	std	Z+34, r24	; 0x22
    proc->sv_hook = sv_hook;
    17ac:	e9 81       	ldd	r30, Y+1	; 0x01
    17ae:	fa 81       	ldd	r31, Y+2	; 0x02
    17b0:	8d 81       	ldd	r24, Y+5	; 0x05
    17b2:	9e 81       	ldd	r25, Y+6	; 0x06
    17b4:	95 a3       	std	Z+37, r25	; 0x25
    17b6:	84 a3       	std	Z+36, r24	; 0x24
    proc->rs_hook = rs_hook;
    17b8:	e9 81       	ldd	r30, Y+1	; 0x01
    17ba:	fa 81       	ldd	r31, Y+2	; 0x02
    17bc:	8f 81       	ldd	r24, Y+7	; 0x07
    17be:	98 85       	ldd	r25, Y+8	; 0x08
    17c0:	97 a3       	std	Z+39, r25	; 0x27
    17c2:	86 a3       	std	Z+38, r24	; 0x26
    proc->arg = arg;
    17c4:	e9 81       	ldd	r30, Y+1	; 0x01
    17c6:	fa 81       	ldd	r31, Y+2	; 0x02
    17c8:	89 85       	ldd	r24, Y+9	; 0x09
    17ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    17cc:	91 a7       	std	Z+41, r25	; 0x29
    17ce:	80 a7       	std	Z+40, r24	; 0x28
    proc->sstart = sstart;
    17d0:	e9 81       	ldd	r30, Y+1	; 0x01
    17d2:	fa 81       	ldd	r31, Y+2	; 0x02
    17d4:	8b 85       	ldd	r24, Y+11	; 0x0b
    17d6:	9c 85       	ldd	r25, Y+12	; 0x0c
    17d8:	93 a7       	std	Z+43, r25	; 0x2b
    17da:	82 a7       	std	Z+42, r24	; 0x2a
    if( sstart )proc->spointer = proc_stack_init(sstart, (code_t)proc_run_wrapper, (void *)proc);
    17dc:	8b 85       	ldd	r24, Y+11	; 0x0b
    17de:	9c 85       	ldd	r25, Y+12	; 0x0c
    17e0:	00 97       	sbiw	r24, 0x00	; 0
    17e2:	71 f0       	breq	.+28     	; 0x1800 <proc_init_isr+0xee>
    17e4:	49 e5       	ldi	r20, 0x59	; 89
    17e6:	53 e0       	ldi	r21, 0x03	; 3
    17e8:	8b 85       	ldd	r24, Y+11	; 0x0b
    17ea:	9c 85       	ldd	r25, Y+12	; 0x0c
    17ec:	29 81       	ldd	r18, Y+1	; 0x01
    17ee:	3a 81       	ldd	r19, Y+2	; 0x02
    17f0:	ba 01       	movw	r22, r20
    17f2:	a9 01       	movw	r20, r18
    17f4:	0e 94 d7 00 	call	0x1ae	; 0x1ae <proc_stack_init>
    17f8:	e9 81       	ldd	r30, Y+1	; 0x01
    17fa:	fa 81       	ldd	r31, Y+2	; 0x02
    17fc:	95 a7       	std	Z+45, r25	; 0x2d
    17fe:	84 a7       	std	Z+44, r24	; 0x2c
}
    1800:	61 96       	adiw	r28, 0x11	; 17
    1802:	0f b6       	in	r0, 0x3f	; 63
    1804:	f8 94       	cli
    1806:	de bf       	out	0x3e, r29	; 62
    1808:	0f be       	out	0x3f, r0	; 63
    180a:	cd bf       	out	0x3d, r28	; 61
    180c:	cf 91       	pop	r28
    180e:	df 91       	pop	r29
    1810:	1f 91       	pop	r17
    1812:	0f 91       	pop	r16
    1814:	ff 90       	pop	r15
    1816:	ef 90       	pop	r14
    1818:	cf 90       	pop	r12
    181a:	bf 90       	pop	r11
    181c:	af 90       	pop	r10
    181e:	8f 90       	pop	r8
    1820:	08 95       	ret

00001822 <_proc_run>:
    spin_unlock( &proc_sched->lock );
}
#endif // CONFIG_MP

void _proc_run( proc_t * proc )
{
    1822:	df 93       	push	r29
    1824:	cf 93       	push	r28
    1826:	00 d0       	rcall	.+0      	; 0x1828 <_proc_run+0x6>
    1828:	cd b7       	in	r28, 0x3d	; 61
    182a:	de b7       	in	r29, 0x3e	; 62
    182c:	9a 83       	std	Y+2, r25	; 0x02
    182e:	89 83       	std	Y+1, r24	; 0x01
    proc->flags |= PROC_FLG_RUN;
    1830:	e9 81       	ldd	r30, Y+1	; 0x01
    1832:	fa 81       	ldd	r31, Y+2	; 0x02
    1834:	83 85       	ldd	r24, Z+11	; 0x0b
    1836:	82 60       	ori	r24, 0x02	; 2
    1838:	e9 81       	ldd	r30, Y+1	; 0x01
    183a:	fa 81       	ldd	r31, Y+2	; 0x02
    183c:	83 87       	std	Z+11, r24	; 0x0b
    spin_lock( &kernel.stat_lock );
    proc->core_id = sched_load_balancer( proc, (stat_t *)kernel.stat );
    stat_inc( proc, (stat_t *)kernel.stat+proc->core_id );
    spin_unlock( &kernel.stat_lock );
#endif
    _proc_run_( proc );
    183e:	89 81       	ldd	r24, Y+1	; 0x01
    1840:	9a 81       	ldd	r25, Y+2	; 0x02
    1842:	20 91 a0 01 	lds	r18, 0x01A0
    1846:	30 91 a1 01 	lds	r19, 0x01A1
    184a:	b9 01       	movw	r22, r18
    184c:	0e 94 73 06 	call	0xce6	; 0xce6 <gitem_insert>
#ifdef CONFIG_MP
    resched( proc->core_id );
#else
    resched();
    1850:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
#endif // CONFIG_MP
}
    1854:	0f 90       	pop	r0
    1856:	0f 90       	pop	r0
    1858:	cf 91       	pop	r28
    185a:	df 91       	pop	r29
    185c:	08 95       	ret

0000185e <proc_run_isr>:
// Функция общего пользования - запуск процесса из обработчика прерывания, прерывания должны быть запрещены во время запуска
bool_t proc_run_isr(proc_t * proc)
{
    185e:	df 93       	push	r29
    1860:	cf 93       	push	r28
    1862:	00 d0       	rcall	.+0      	; 0x1864 <proc_run_isr+0x6>
    1864:	0f 92       	push	r0
    1866:	cd b7       	in	r28, 0x3d	; 61
    1868:	de b7       	in	r29, 0x3e	; 62
    186a:	9b 83       	std	Y+3, r25	; 0x03
    186c:	8a 83       	std	Y+2, r24	; 0x02
    bool_t ret = (bool_t)1;
    186e:	81 e0       	ldi	r24, 0x01	; 1
    1870:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    if( proc->flags & (PROC_FLG_RUN|PROC_FLG_QUEUE|PROC_FLG_WAIT|PROC_FLG_END|PROC_FLG_DEAD) )
    1872:	ea 81       	ldd	r30, Y+2	; 0x02
    1874:	fb 81       	ldd	r31, Y+3	; 0x03
    1876:	83 85       	ldd	r24, Z+11	; 0x0b
    1878:	88 2f       	mov	r24, r24
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	8a 7d       	andi	r24, 0xDA	; 218
    187e:	90 70       	andi	r25, 0x00	; 0
    1880:	00 97       	sbiw	r24, 0x00	; 0
    1882:	11 f0       	breq	.+4      	; 0x1888 <proc_run_isr+0x2a>
    {
        ret = (bool_t)0;
    1884:	19 82       	std	Y+1, r1	; 0x01
    1886:	04 c0       	rjmp	.+8      	; 0x1890 <proc_run_isr+0x32>
        goto end;
    }
    _proc_run( proc );
    1888:	8a 81       	ldd	r24, Y+2	; 0x02
    188a:	9b 81       	ldd	r25, Y+3	; 0x03
    188c:	0e 94 11 0c 	call	0x1822	; 0x1822 <_proc_run>
end:
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    return ret;
    1890:	89 81       	ldd	r24, Y+1	; 0x01
}
    1892:	0f 90       	pop	r0
    1894:	0f 90       	pop	r0
    1896:	0f 90       	pop	r0
    1898:	cf 91       	pop	r28
    189a:	df 91       	pop	r29
    189c:	08 95       	ret

0000189e <proc_restart_isr>:
// Перезепуск процесса из обработчика прерываний, прерывания должны быть запрещены
bool_t proc_restart_isr(proc_t * proc)
{
    189e:	df 93       	push	r29
    18a0:	cf 93       	push	r28
    18a2:	00 d0       	rcall	.+0      	; 0x18a4 <proc_restart_isr+0x6>
    18a4:	0f 92       	push	r0
    18a6:	cd b7       	in	r28, 0x3d	; 61
    18a8:	de b7       	in	r29, 0x3e	; 62
    18aa:	9b 83       	std	Y+3, r25	; 0x03
    18ac:	8a 83       	std	Y+2, r24	; 0x02
    bool_t ret = (bool_t)1;
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif
    if( proc->flags & (PROC_FLG_RUN|PROC_FLG_HOLD|PROC_FLG_QUEUE|PROC_FLG_WAIT|PROC_FLG_PRE_END|PROC_FLG_DEAD) )
    18b2:	ea 81       	ldd	r30, Y+2	; 0x02
    18b4:	fb 81       	ldd	r31, Y+3	; 0x03
    18b6:	83 85       	ldd	r24, Z+11	; 0x0b
    18b8:	88 2f       	mov	r24, r24
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	8e 7b       	andi	r24, 0xBE	; 190
    18be:	90 70       	andi	r25, 0x00	; 0
    18c0:	00 97       	sbiw	r24, 0x00	; 0
    18c2:	11 f0       	breq	.+4      	; 0x18c8 <proc_restart_isr+0x2a>
    {
        ret = (bool_t)0;
    18c4:	19 82       	std	Y+1, r1	; 0x01
    18c6:	2d c0       	rjmp	.+90     	; 0x1922 <proc_restart_isr+0x84>
        goto end;
    }
    proc->flags = ( proc->flags & PROC_FLG_RT )?PROC_FLG_RT:(flag_t)0;
    18c8:	ea 81       	ldd	r30, Y+2	; 0x02
    18ca:	fb 81       	ldd	r31, Y+3	; 0x03
    18cc:	83 85       	ldd	r24, Z+11	; 0x0b
    18ce:	81 70       	andi	r24, 0x01	; 1
    18d0:	ea 81       	ldd	r30, Y+2	; 0x02
    18d2:	fb 81       	ldd	r31, Y+3	; 0x03
    18d4:	83 87       	std	Z+11, r24	; 0x0b
#ifdef CONFIG_USE_HIGHEST_LOCKER
    pcounter_init(&proc->lres);
    18d6:	8a 81       	ldd	r24, Y+2	; 0x02
    18d8:	9b 81       	ldd	r25, Y+3	; 0x03
    18da:	0d 96       	adiw	r24, 0x0d	; 13
    18dc:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <pcounter_init>
#else
    proc->lres = (count_t)0;
#endif
    proc->timer = proc->time_quant;
    18e0:	ea 81       	ldd	r30, Y+2	; 0x02
    18e2:	fb 81       	ldd	r31, Y+3	; 0x03
    18e4:	86 8d       	ldd	r24, Z+30	; 0x1e
    18e6:	97 8d       	ldd	r25, Z+31	; 0x1f
    18e8:	ea 81       	ldd	r30, Y+2	; 0x02
    18ea:	fb 81       	ldd	r31, Y+3	; 0x03
    18ec:	91 a3       	std	Z+33, r25	; 0x21
    18ee:	80 a3       	std	Z+32, r24	; 0x20

    if( proc->sstart )proc->spointer = proc_stack_init( proc->sstart, (code_t)proc_run_wrapper, (void *)proc );
    18f0:	ea 81       	ldd	r30, Y+2	; 0x02
    18f2:	fb 81       	ldd	r31, Y+3	; 0x03
    18f4:	82 a5       	ldd	r24, Z+42	; 0x2a
    18f6:	93 a5       	ldd	r25, Z+43	; 0x2b
    18f8:	00 97       	sbiw	r24, 0x00	; 0
    18fa:	79 f0       	breq	.+30     	; 0x191a <proc_restart_isr+0x7c>
    18fc:	ea 81       	ldd	r30, Y+2	; 0x02
    18fe:	fb 81       	ldd	r31, Y+3	; 0x03
    1900:	82 a5       	ldd	r24, Z+42	; 0x2a
    1902:	93 a5       	ldd	r25, Z+43	; 0x2b
    1904:	29 e5       	ldi	r18, 0x59	; 89
    1906:	33 e0       	ldi	r19, 0x03	; 3
    1908:	4a 81       	ldd	r20, Y+2	; 0x02
    190a:	5b 81       	ldd	r21, Y+3	; 0x03
    190c:	b9 01       	movw	r22, r18
    190e:	0e 94 d7 00 	call	0x1ae	; 0x1ae <proc_stack_init>
    1912:	ea 81       	ldd	r30, Y+2	; 0x02
    1914:	fb 81       	ldd	r31, Y+3	; 0x03
    1916:	95 a7       	std	Z+45, r25	; 0x2d
    1918:	84 a7       	std	Z+44, r24	; 0x2c
    _proc_run( proc );
    191a:	8a 81       	ldd	r24, Y+2	; 0x02
    191c:	9b 81       	ldd	r25, Y+3	; 0x03
    191e:	0e 94 11 0c 	call	0x1822	; 0x1822 <_proc_run>
end:
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif
    return ret;
    1922:	89 81       	ldd	r24, Y+1	; 0x01
}
    1924:	0f 90       	pop	r0
    1926:	0f 90       	pop	r0
    1928:	0f 90       	pop	r0
    192a:	cf 91       	pop	r28
    192c:	df 91       	pop	r29
    192e:	08 95       	ret

00001930 <_proc_stop>:
        spin_unlock( xlist_lock );
    }
}
#endif // CONFIG_MP
void _proc_stop(proc_t * proc)
{
    1930:	df 93       	push	r29
    1932:	cf 93       	push	r28
    1934:	00 d0       	rcall	.+0      	; 0x1936 <_proc_stop+0x6>
    1936:	cd b7       	in	r28, 0x3d	; 61
    1938:	de b7       	in	r29, 0x3e	; 62
    193a:	9a 83       	std	Y+2, r25	; 0x02
    193c:	89 83       	std	Y+1, r24	; 0x01
    proc->flags &= ~PROC_FLG_RUN;
    193e:	e9 81       	ldd	r30, Y+1	; 0x01
    1940:	fa 81       	ldd	r31, Y+2	; 0x02
    1942:	83 85       	ldd	r24, Z+11	; 0x0b
    1944:	8d 7f       	andi	r24, 0xFD	; 253
    1946:	e9 81       	ldd	r30, Y+1	; 0x01
    1948:	fa 81       	ldd	r31, Y+2	; 0x02
    194a:	83 87       	std	Z+11, r24	; 0x0b
    _proc_stop_( proc );
    194c:	89 81       	ldd	r24, Y+1	; 0x01
    194e:	9a 81       	ldd	r25, Y+2	; 0x02
    1950:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <gitem_cut>
#ifdef CONFIG_MP
    resched( proc->core_id );
#else
    resched();
    1954:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
#endif // CONFIG_MP
}
    1958:	0f 90       	pop	r0
    195a:	0f 90       	pop	r0
    195c:	cf 91       	pop	r28
    195e:	df 91       	pop	r29
    1960:	08 95       	ret

00001962 <proc_stop_isr>:
// Останов процесса из обработчика прерываний, прерывания должны быть запрещены
bool_t proc_stop_isr(proc_t * proc)
{
    1962:	df 93       	push	r29
    1964:	cf 93       	push	r28
    1966:	00 d0       	rcall	.+0      	; 0x1968 <proc_stop_isr+0x6>
    1968:	0f 92       	push	r0
    196a:	cd b7       	in	r28, 0x3d	; 61
    196c:	de b7       	in	r29, 0x3e	; 62
    196e:	9b 83       	std	Y+3, r25	; 0x03
    1970:	8a 83       	std	Y+2, r24	; 0x02
    bool_t ret = (bool_t)0;
    1972:	19 82       	std	Y+1, r1	; 0x01
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    //Проверка флагов
    //В случчае PROC_FLG_WAIT будем обрабатывать PROC_FLG_PRE_END на выходе из sig_wait.
    //В случае PROC_FLG_HOLD или PROC_FLG_QUEUE будем обрабатывать PROC_FLG_PRE_END на выходе из функции, освобождающей общий ресурс.
    if( proc->flags & (PROC_FLG_HOLD|PROC_FLG_QUEUE|PROC_FLG_WAIT) )proc->flags |= PROC_FLG_PRE_END;
    1974:	ea 81       	ldd	r30, Y+2	; 0x02
    1976:	fb 81       	ldd	r31, Y+3	; 0x03
    1978:	83 85       	ldd	r24, Z+11	; 0x0b
    197a:	88 2f       	mov	r24, r24
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	8c 71       	andi	r24, 0x1C	; 28
    1980:	90 70       	andi	r25, 0x00	; 0
    1982:	00 97       	sbiw	r24, 0x00	; 0
    1984:	41 f0       	breq	.+16     	; 0x1996 <proc_stop_isr+0x34>
    1986:	ea 81       	ldd	r30, Y+2	; 0x02
    1988:	fb 81       	ldd	r31, Y+3	; 0x03
    198a:	83 85       	ldd	r24, Z+11	; 0x0b
    198c:	80 62       	ori	r24, 0x20	; 32
    198e:	ea 81       	ldd	r30, Y+2	; 0x02
    1990:	fb 81       	ldd	r31, Y+3	; 0x03
    1992:	83 87       	std	Z+11, r24	; 0x0b
    1994:	0f c0       	rjmp	.+30     	; 0x19b4 <proc_stop_isr+0x52>
    else if( proc->flags & PROC_FLG_RUN )
    1996:	ea 81       	ldd	r30, Y+2	; 0x02
    1998:	fb 81       	ldd	r31, Y+3	; 0x03
    199a:	83 85       	ldd	r24, Z+11	; 0x0b
    199c:	88 2f       	mov	r24, r24
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	82 70       	andi	r24, 0x02	; 2
    19a2:	90 70       	andi	r25, 0x00	; 0
    19a4:	00 97       	sbiw	r24, 0x00	; 0
    19a6:	31 f0       	breq	.+12     	; 0x19b4 <proc_stop_isr+0x52>
    {
        _proc_stop( proc );
    19a8:	8a 81       	ldd	r24, Y+2	; 0x02
    19aa:	9b 81       	ldd	r25, Y+3	; 0x03
    19ac:	0e 94 98 0c 	call	0x1930	; 0x1930 <_proc_stop>
        ret = (bool_t)1;
    19b0:	81 e0       	ldi	r24, 0x01	; 1
    19b2:	89 83       	std	Y+1, r24	; 0x01
    }
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    return ret;
    19b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    19b6:	0f 90       	pop	r0
    19b8:	0f 90       	pop	r0
    19ba:	0f 90       	pop	r0
    19bc:	cf 91       	pop	r28
    19be:	df 91       	pop	r29
    19c0:	08 95       	ret

000019c2 <_proc_flag_stop_isr>:
    exit_crit_sec();
#endif
}

void _proc_flag_stop_isr( flag_t mask )
{
    19c2:	df 93       	push	r29
    19c4:	cf 93       	push	r28
    19c6:	00 d0       	rcall	.+0      	; 0x19c8 <_proc_flag_stop_isr+0x6>
    19c8:	0f 92       	push	r0
    19ca:	cd b7       	in	r28, 0x3d	; 61
    19cc:	de b7       	in	r29, 0x3e	; 62
    19ce:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = current_proc();
    19d0:	0e 94 cc 00 	call	0x198	; 0x198 <current_proc>
    19d4:	9a 83       	std	Y+2, r25	; 0x02
    19d6:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif //CONFIG_MP
    proc->flags &= mask;
    19d8:	e9 81       	ldd	r30, Y+1	; 0x01
    19da:	fa 81       	ldd	r31, Y+2	; 0x02
    19dc:	93 85       	ldd	r25, Z+11	; 0x0b
    19de:	8b 81       	ldd	r24, Y+3	; 0x03
    19e0:	89 23       	and	r24, r25
    19e2:	e9 81       	ldd	r30, Y+1	; 0x01
    19e4:	fa 81       	ldd	r31, Y+2	; 0x02
    19e6:	83 87       	std	Z+11, r24	; 0x0b
    if(  ( proc->flags & PROC_FLG_PRE_END ) && (!(proc->flags & PROC_FLG_HOLD))  )
    19e8:	e9 81       	ldd	r30, Y+1	; 0x01
    19ea:	fa 81       	ldd	r31, Y+2	; 0x02
    19ec:	83 85       	ldd	r24, Z+11	; 0x0b
    19ee:	88 2f       	mov	r24, r24
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	80 72       	andi	r24, 0x20	; 32
    19f4:	90 70       	andi	r25, 0x00	; 0
    19f6:	00 97       	sbiw	r24, 0x00	; 0
    19f8:	a1 f0       	breq	.+40     	; 0x1a22 <_proc_flag_stop_isr+0x60>
    19fa:	e9 81       	ldd	r30, Y+1	; 0x01
    19fc:	fa 81       	ldd	r31, Y+2	; 0x02
    19fe:	83 85       	ldd	r24, Z+11	; 0x0b
    1a00:	88 2f       	mov	r24, r24
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	84 70       	andi	r24, 0x04	; 4
    1a06:	90 70       	andi	r25, 0x00	; 0
    1a08:	00 97       	sbiw	r24, 0x00	; 0
    1a0a:	59 f4       	brne	.+22     	; 0x1a22 <_proc_flag_stop_isr+0x60>
    {
        proc->flags &= ~PROC_FLG_PRE_END;
    1a0c:	e9 81       	ldd	r30, Y+1	; 0x01
    1a0e:	fa 81       	ldd	r31, Y+2	; 0x02
    1a10:	83 85       	ldd	r24, Z+11	; 0x0b
    1a12:	8f 7d       	andi	r24, 0xDF	; 223
    1a14:	e9 81       	ldd	r30, Y+1	; 0x01
    1a16:	fa 81       	ldd	r31, Y+2	; 0x02
    1a18:	83 87       	std	Z+11, r24	; 0x0b
        _proc_stop( proc );
    1a1a:	89 81       	ldd	r24, Y+1	; 0x01
    1a1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a1e:	0e 94 98 0c 	call	0x1930	; 0x1930 <_proc_stop>
    }
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif //CONFIG_MP
}
    1a22:	0f 90       	pop	r0
    1a24:	0f 90       	pop	r0
    1a26:	0f 90       	pop	r0
    1a28:	cf 91       	pop	r28
    1a2a:	df 91       	pop	r29
    1a2c:	08 95       	ret

00001a2e <_proc_lres_inc>:
    proc_t * proc
#ifdef CONFIG_USE_HIGHEST_LOCKER
    ,prio_t prio
#endif
)
{
    1a2e:	df 93       	push	r29
    1a30:	cf 93       	push	r28
    1a32:	00 d0       	rcall	.+0      	; 0x1a34 <_proc_lres_inc+0x6>
    1a34:	0f 92       	push	r0
    1a36:	cd b7       	in	r28, 0x3d	; 61
    1a38:	de b7       	in	r29, 0x3e	; 62
    1a3a:	9a 83       	std	Y+2, r25	; 0x02
    1a3c:	89 83       	std	Y+1, r24	; 0x01
    1a3e:	6b 83       	std	Y+3, r22	; 0x03
#ifdef CONFIG_USE_HIGHEST_LOCKER
    if( proc->lres.index == (index_t)0 )proc->flags |= PROC_FLG_HOLD;
    1a40:	e9 81       	ldd	r30, Y+1	; 0x01
    1a42:	fa 81       	ldd	r31, Y+2	; 0x02
    1a44:	85 8d       	ldd	r24, Z+29	; 0x1d
    1a46:	88 23       	and	r24, r24
    1a48:	39 f4       	brne	.+14     	; 0x1a58 <_proc_lres_inc+0x2a>
    1a4a:	e9 81       	ldd	r30, Y+1	; 0x01
    1a4c:	fa 81       	ldd	r31, Y+2	; 0x02
    1a4e:	83 85       	ldd	r24, Z+11	; 0x0b
    1a50:	84 60       	ori	r24, 0x04	; 4
    1a52:	e9 81       	ldd	r30, Y+1	; 0x01
    1a54:	fa 81       	ldd	r31, Y+2	; 0x02
    1a56:	83 87       	std	Z+11, r24	; 0x0b
    pcounter_inc( &proc->lres, prio );
    1a58:	89 81       	ldd	r24, Y+1	; 0x01
    1a5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a5c:	0d 96       	adiw	r24, 0x0d	; 13
    1a5e:	6b 81       	ldd	r22, Y+3	; 0x03
    1a60:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <pcounter_inc>
#else
    if( proc->lres == (count_t)0 )proc->flags |= PROC_FLG_HOLD;
    proc->lres++;
#endif
}
    1a64:	0f 90       	pop	r0
    1a66:	0f 90       	pop	r0
    1a68:	0f 90       	pop	r0
    1a6a:	cf 91       	pop	r28
    1a6c:	df 91       	pop	r29
    1a6e:	08 95       	ret

00001a70 <_proc_lres_dec>:
    proc_t * proc
#ifdef CONFIG_USE_HIGHEST_LOCKER
    ,prio_t prio
#endif
)
{
    1a70:	df 93       	push	r29
    1a72:	cf 93       	push	r28
    1a74:	00 d0       	rcall	.+0      	; 0x1a76 <_proc_lres_dec+0x6>
    1a76:	0f 92       	push	r0
    1a78:	cd b7       	in	r28, 0x3d	; 61
    1a7a:	de b7       	in	r29, 0x3e	; 62
    1a7c:	9a 83       	std	Y+2, r25	; 0x02
    1a7e:	89 83       	std	Y+1, r24	; 0x01
    1a80:	6b 83       	std	Y+3, r22	; 0x03
#ifdef CONFIG_USE_HIGHEST_LOCKER
    pcounter_dec( &proc->lres, prio );
    1a82:	89 81       	ldd	r24, Y+1	; 0x01
    1a84:	9a 81       	ldd	r25, Y+2	; 0x02
    1a86:	0d 96       	adiw	r24, 0x0d	; 13
    1a88:	6b 81       	ldd	r22, Y+3	; 0x03
    1a8a:	0e 94 37 0b 	call	0x166e	; 0x166e <pcounter_dec>
    if( proc->lres.index == (index_t)0 )proc->flags &= ~PROC_FLG_HOLD;
    1a8e:	e9 81       	ldd	r30, Y+1	; 0x01
    1a90:	fa 81       	ldd	r31, Y+2	; 0x02
    1a92:	85 8d       	ldd	r24, Z+29	; 0x1d
    1a94:	88 23       	and	r24, r24
    1a96:	39 f4       	brne	.+14     	; 0x1aa6 <_proc_lres_dec+0x36>
    1a98:	e9 81       	ldd	r30, Y+1	; 0x01
    1a9a:	fa 81       	ldd	r31, Y+2	; 0x02
    1a9c:	83 85       	ldd	r24, Z+11	; 0x0b
    1a9e:	8b 7f       	andi	r24, 0xFB	; 251
    1aa0:	e9 81       	ldd	r30, Y+1	; 0x01
    1aa2:	fa 81       	ldd	r31, Y+2	; 0x02
    1aa4:	83 87       	std	Z+11, r24	; 0x0b
#else
    if( proc->lres!= (count_t)0 )proc->lres--;
    if( proc->lres == (count_t)0 )proc->flags &= ~PROC_FLG_HOLD;
#endif
}
    1aa6:	0f 90       	pop	r0
    1aa8:	0f 90       	pop	r0
    1aaa:	0f 90       	pop	r0
    1aac:	cf 91       	pop	r28
    1aae:	df 91       	pop	r29
    1ab0:	08 95       	ret

00001ab2 <_proc_prio_control_stoped>:
#ifdef CONFIG_USE_HIGHEST_LOCKER
// Будет использоваться в mutex-ах и т.п., процесс должен сам вызывать эту функцию, при этом он должен быть вырезан из списка выполняющихся.
void _proc_prio_control_stoped( proc_t * proc )
{
    1ab2:	df 93       	push	r29
    1ab4:	cf 93       	push	r28
    1ab6:	cd b7       	in	r28, 0x3d	; 61
    1ab8:	de b7       	in	r29, 0x3e	; 62
    1aba:	27 97       	sbiw	r28, 0x07	; 7
    1abc:	0f b6       	in	r0, 0x3f	; 63
    1abe:	f8 94       	cli
    1ac0:	de bf       	out	0x3e, r29	; 62
    1ac2:	0f be       	out	0x3f, r0	; 63
    1ac4:	cd bf       	out	0x3d, r28	; 61
    1ac6:	9b 83       	std	Y+3, r25	; 0x03
    1ac8:	8a 83       	std	Y+2, r24	; 0x02
    if(proc->lres.index != (index_t)0)
    1aca:	ea 81       	ldd	r30, Y+2	; 0x02
    1acc:	fb 81       	ldd	r31, Y+3	; 0x03
    1ace:	85 8d       	ldd	r24, Z+29	; 0x1d
    1ad0:	88 23       	and	r24, r24
    1ad2:	e9 f0       	breq	.+58     	; 0x1b0e <_proc_prio_control_stoped+0x5c>
    {
        prio_t locker_prio = index_search( proc->lres.index );
    1ad4:	ea 81       	ldd	r30, Y+2	; 0x02
    1ad6:	fb 81       	ldd	r31, Y+3	; 0x03
    1ad8:	85 8d       	ldd	r24, Z+29	; 0x1d
    1ada:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <index_search>
    1ade:	89 83       	std	Y+1, r24	; 0x01
        ((gitem_t *)proc)->group->prio = ( locker_prio < proc->base_prio )?locker_prio:proc->base_prio;
    1ae0:	ea 81       	ldd	r30, Y+2	; 0x02
    1ae2:	fb 81       	ldd	r31, Y+3	; 0x03
    1ae4:	84 81       	ldd	r24, Z+4	; 0x04
    1ae6:	95 81       	ldd	r25, Z+5	; 0x05
    1ae8:	9e 83       	std	Y+6, r25	; 0x06
    1aea:	8d 83       	std	Y+5, r24	; 0x05
    1aec:	ea 81       	ldd	r30, Y+2	; 0x02
    1aee:	fb 81       	ldd	r31, Y+3	; 0x03
    1af0:	84 85       	ldd	r24, Z+12	; 0x0c
    1af2:	99 81       	ldd	r25, Y+1	; 0x01
    1af4:	9f 83       	std	Y+7, r25	; 0x07
    1af6:	8c 83       	std	Y+4, r24	; 0x04
    1af8:	ec 81       	ldd	r30, Y+4	; 0x04
    1afa:	ff 81       	ldd	r31, Y+7	; 0x07
    1afc:	fe 17       	cp	r31, r30
    1afe:	10 f4       	brcc	.+4      	; 0x1b04 <_proc_prio_control_stoped+0x52>
    1b00:	8f 81       	ldd	r24, Y+7	; 0x07
    1b02:	8c 83       	std	Y+4, r24	; 0x04
    1b04:	8c 81       	ldd	r24, Y+4	; 0x04
    1b06:	ed 81       	ldd	r30, Y+5	; 0x05
    1b08:	fe 81       	ldd	r31, Y+6	; 0x06
    1b0a:	82 83       	std	Z+2, r24	; 0x02
    1b0c:	0a c0       	rjmp	.+20     	; 0x1b22 <_proc_prio_control_stoped+0x70>
    }
    else
    {
        ((gitem_t *)proc)->group->prio = proc->base_prio;
    1b0e:	ea 81       	ldd	r30, Y+2	; 0x02
    1b10:	fb 81       	ldd	r31, Y+3	; 0x03
    1b12:	a4 81       	ldd	r26, Z+4	; 0x04
    1b14:	b5 81       	ldd	r27, Z+5	; 0x05
    1b16:	ea 81       	ldd	r30, Y+2	; 0x02
    1b18:	fb 81       	ldd	r31, Y+3	; 0x03
    1b1a:	84 85       	ldd	r24, Z+12	; 0x0c
    1b1c:	12 96       	adiw	r26, 0x02	; 2
    1b1e:	8c 93       	st	X, r24
    1b20:	12 97       	sbiw	r26, 0x02	; 2
    }
}
    1b22:	27 96       	adiw	r28, 0x07	; 7
    1b24:	0f b6       	in	r0, 0x3f	; 63
    1b26:	f8 94       	cli
    1b28:	de bf       	out	0x3e, r29	; 62
    1b2a:	0f be       	out	0x3f, r0	; 63
    1b2c:	cd bf       	out	0x3d, r28	; 61
    1b2e:	cf 91       	pop	r28
    1b30:	df 91       	pop	r29
    1b32:	08 95       	ret

00001b34 <_proc_prio_control_running>:
void _proc_prio_control_running( proc_t * proc )
{
    1b34:	df 93       	push	r29
    1b36:	cf 93       	push	r28
    1b38:	00 d0       	rcall	.+0      	; 0x1b3a <_proc_prio_control_running+0x6>
    1b3a:	00 d0       	rcall	.+0      	; 0x1b3c <_proc_prio_control_running+0x8>
    1b3c:	00 d0       	rcall	.+0      	; 0x1b3e <_proc_prio_control_running+0xa>
    1b3e:	cd b7       	in	r28, 0x3d	; 61
    1b40:	de b7       	in	r29, 0x3e	; 62
    1b42:	9c 83       	std	Y+4, r25	; 0x04
    1b44:	8b 83       	std	Y+3, r24	; 0x03
    prio_t new_prio;
    if(proc->lres.index != (index_t)0)
    1b46:	eb 81       	ldd	r30, Y+3	; 0x03
    1b48:	fc 81       	ldd	r31, Y+4	; 0x04
    1b4a:	85 8d       	ldd	r24, Z+29	; 0x1d
    1b4c:	88 23       	and	r24, r24
    1b4e:	a9 f0       	breq	.+42     	; 0x1b7a <_proc_prio_control_running+0x46>
    {
        prio_t locker_prio = index_search( proc->lres.index );
    1b50:	eb 81       	ldd	r30, Y+3	; 0x03
    1b52:	fc 81       	ldd	r31, Y+4	; 0x04
    1b54:	85 8d       	ldd	r24, Z+29	; 0x1d
    1b56:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <index_search>
    1b5a:	89 83       	std	Y+1, r24	; 0x01
        new_prio = ( locker_prio < proc->base_prio )?locker_prio:proc->base_prio;
    1b5c:	eb 81       	ldd	r30, Y+3	; 0x03
    1b5e:	fc 81       	ldd	r31, Y+4	; 0x04
    1b60:	84 85       	ldd	r24, Z+12	; 0x0c
    1b62:	99 81       	ldd	r25, Y+1	; 0x01
    1b64:	9e 83       	std	Y+6, r25	; 0x06
    1b66:	8d 83       	std	Y+5, r24	; 0x05
    1b68:	8d 81       	ldd	r24, Y+5	; 0x05
    1b6a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b6c:	98 17       	cp	r25, r24
    1b6e:	10 f4       	brcc	.+4      	; 0x1b74 <_proc_prio_control_running+0x40>
    1b70:	8e 81       	ldd	r24, Y+6	; 0x06
    1b72:	8d 83       	std	Y+5, r24	; 0x05
    1b74:	9d 81       	ldd	r25, Y+5	; 0x05
    1b76:	9a 83       	std	Y+2, r25	; 0x02
    1b78:	04 c0       	rjmp	.+8      	; 0x1b82 <_proc_prio_control_running+0x4e>
    }
    else
    {
        new_prio = proc->base_prio;
    1b7a:	eb 81       	ldd	r30, Y+3	; 0x03
    1b7c:	fc 81       	ldd	r31, Y+4	; 0x04
    1b7e:	84 85       	ldd	r24, Z+12	; 0x0c
    1b80:	8a 83       	std	Y+2, r24	; 0x02
    }
    if(((gitem_t *)proc)->group->prio != new_prio)
    1b82:	eb 81       	ldd	r30, Y+3	; 0x03
    1b84:	fc 81       	ldd	r31, Y+4	; 0x04
    1b86:	04 80       	ldd	r0, Z+4	; 0x04
    1b88:	f5 81       	ldd	r31, Z+5	; 0x05
    1b8a:	e0 2d       	mov	r30, r0
    1b8c:	92 81       	ldd	r25, Z+2	; 0x02
    1b8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b90:	98 17       	cp	r25, r24
    1b92:	b1 f0       	breq	.+44     	; 0x1bc0 <_proc_prio_control_running+0x8c>
    {
        _proc_stop_( proc );
    1b94:	8b 81       	ldd	r24, Y+3	; 0x03
    1b96:	9c 81       	ldd	r25, Y+4	; 0x04
    1b98:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <gitem_cut>
        ((gitem_t *)proc)->group->prio = new_prio;
    1b9c:	eb 81       	ldd	r30, Y+3	; 0x03
    1b9e:	fc 81       	ldd	r31, Y+4	; 0x04
    1ba0:	04 80       	ldd	r0, Z+4	; 0x04
    1ba2:	f5 81       	ldd	r31, Z+5	; 0x05
    1ba4:	e0 2d       	mov	r30, r0
    1ba6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba8:	82 83       	std	Z+2, r24	; 0x02
#ifdef CONFIG_MP
        spin_lock( &kernel.stat_lock );
        stat_inc( proc, (stat_t *)kernel.stat+proc->core_id );
        spin_unlock( &kernel.stat_lock );
#endif
        _proc_run_( proc );
    1baa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bac:	9c 81       	ldd	r25, Y+4	; 0x04
    1bae:	20 91 a0 01 	lds	r18, 0x01A0
    1bb2:	30 91 a1 01 	lds	r19, 0x01A1
    1bb6:	b9 01       	movw	r22, r18
    1bb8:	0e 94 73 06 	call	0xce6	; 0xce6 <gitem_insert>
#ifdef CONFIG_MP
        resched(proc->core_id);
#else
        resched();
    1bbc:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
#endif
    }
}
    1bc0:	26 96       	adiw	r28, 0x06	; 6
    1bc2:	0f b6       	in	r0, 0x3f	; 63
    1bc4:	f8 94       	cli
    1bc6:	de bf       	out	0x3e, r29	; 62
    1bc8:	0f be       	out	0x3f, r0	; 63
    1bca:	cd bf       	out	0x3d, r28	; 61
    1bcc:	cf 91       	pop	r28
    1bce:	df 91       	pop	r29
    1bd0:	08 95       	ret

00001bd2 <sched_init>:
*****************************************************************************************/
#include "../include/bugurt.h"
///========================================================================================
// Инициация
void sched_init(sched_t * sched, proc_t * idle)
{
    1bd2:	df 93       	push	r29
    1bd4:	cf 93       	push	r28
    1bd6:	00 d0       	rcall	.+0      	; 0x1bd8 <sched_init+0x6>
    1bd8:	00 d0       	rcall	.+0      	; 0x1bda <sched_init+0x8>
    1bda:	cd b7       	in	r28, 0x3d	; 61
    1bdc:	de b7       	in	r29, 0x3e	; 62
    1bde:	9a 83       	std	Y+2, r25	; 0x02
    1be0:	89 83       	std	Y+1, r24	; 0x01
    1be2:	7c 83       	std	Y+4, r23	; 0x04
    1be4:	6b 83       	std	Y+3, r22	; 0x03
#ifdef CONFIG_MP
    lock_t * sched_lock = &sched->lock;
    spin_init( sched_lock );
    spin_lock( sched_lock );
#endif // CONFIG_MP
    sched->ready = (xlist_t *)sched->plst;
    1be6:	89 81       	ldd	r24, Y+1	; 0x01
    1be8:	9a 81       	ldd	r25, Y+2	; 0x02
    1bea:	06 96       	adiw	r24, 0x06	; 6
    1bec:	e9 81       	ldd	r30, Y+1	; 0x01
    1bee:	fa 81       	ldd	r31, Y+2	; 0x02
    1bf0:	93 83       	std	Z+3, r25	; 0x03
    1bf2:	82 83       	std	Z+2, r24	; 0x02
    xlist_init( sched->ready );
    1bf4:	e9 81       	ldd	r30, Y+1	; 0x01
    1bf6:	fa 81       	ldd	r31, Y+2	; 0x02
    1bf8:	82 81       	ldd	r24, Z+2	; 0x02
    1bfa:	93 81       	ldd	r25, Z+3	; 0x03
    1bfc:	0e 94 c1 10 	call	0x2182	; 0x2182 <xlist_init>
    sched->expired = (xlist_t *)sched->plst + 1;
    1c00:	89 81       	ldd	r24, Y+1	; 0x01
    1c02:	9a 81       	ldd	r25, Y+2	; 0x02
    1c04:	47 96       	adiw	r24, 0x17	; 23
    1c06:	e9 81       	ldd	r30, Y+1	; 0x01
    1c08:	fa 81       	ldd	r31, Y+2	; 0x02
    1c0a:	95 83       	std	Z+5, r25	; 0x05
    1c0c:	84 83       	std	Z+4, r24	; 0x04
    xlist_init( sched->expired );
    1c0e:	e9 81       	ldd	r30, Y+1	; 0x01
    1c10:	fa 81       	ldd	r31, Y+2	; 0x02
    1c12:	84 81       	ldd	r24, Z+4	; 0x04
    1c14:	95 81       	ldd	r25, Z+5	; 0x05
    1c16:	0e 94 c1 10 	call	0x2182	; 0x2182 <xlist_init>
    gitem_insert( (gitem_t *)idle, sched->ready );
    1c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c1e:	e9 81       	ldd	r30, Y+1	; 0x01
    1c20:	fa 81       	ldd	r31, Y+2	; 0x02
    1c22:	22 81       	ldd	r18, Z+2	; 0x02
    1c24:	33 81       	ldd	r19, Z+3	; 0x03
    1c26:	b9 01       	movw	r22, r18
    1c28:	0e 94 73 06 	call	0xce6	; 0xce6 <gitem_insert>
    sched->current_proc = idle;
    1c2c:	e9 81       	ldd	r30, Y+1	; 0x01
    1c2e:	fa 81       	ldd	r31, Y+2	; 0x02
    1c30:	8b 81       	ldd	r24, Y+3	; 0x03
    1c32:	9c 81       	ldd	r25, Y+4	; 0x04
    1c34:	91 83       	std	Z+1, r25	; 0x01
    1c36:	80 83       	st	Z, r24
    sched->nested_crit_sec = (count_t)0;//вообще это выполняется при запрещенных прерываниях, но не известно, на этом ли процессоре
    1c38:	e9 81       	ldd	r30, Y+1	; 0x01
    1c3a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c3c:	11 a6       	std	Z+41, r1	; 0x29
    1c3e:	10 a6       	std	Z+40, r1	; 0x28
#ifdef CONFIG_MP
    spin_unlock( sched_lock );
    stat_inc( idle, (stat_t *)kernel.stat + idle->core_id );
#endif // CONFIG_MP
}
    1c40:	0f 90       	pop	r0
    1c42:	0f 90       	pop	r0
    1c44:	0f 90       	pop	r0
    1c46:	0f 90       	pop	r0
    1c48:	cf 91       	pop	r28
    1c4a:	df 91       	pop	r29
    1c4c:	08 95       	ret

00001c4e <_sched_list_switch>:
static void _sched_list_switch( sched_t * sched )
{
    1c4e:	df 93       	push	r29
    1c50:	cf 93       	push	r28
    1c52:	00 d0       	rcall	.+0      	; 0x1c54 <_sched_list_switch+0x6>
    1c54:	00 d0       	rcall	.+0      	; 0x1c56 <_sched_list_switch+0x8>
    1c56:	cd b7       	in	r28, 0x3d	; 61
    1c58:	de b7       	in	r29, 0x3e	; 62
    1c5a:	9c 83       	std	Y+4, r25	; 0x04
    1c5c:	8b 83       	std	Y+3, r24	; 0x03
    // Список ready опустел, переключаем списки
    if( sched->ready->index == (index_t)0 )
    1c5e:	eb 81       	ldd	r30, Y+3	; 0x03
    1c60:	fc 81       	ldd	r31, Y+4	; 0x04
    1c62:	02 80       	ldd	r0, Z+2	; 0x02
    1c64:	f3 81       	ldd	r31, Z+3	; 0x03
    1c66:	e0 2d       	mov	r30, r0
    1c68:	80 89       	ldd	r24, Z+16	; 0x10
    1c6a:	88 23       	and	r24, r24
    1c6c:	a1 f4       	brne	.+40     	; 0x1c96 <_sched_list_switch+0x48>
    {
        xlist_t * buf = sched->ready;
    1c6e:	eb 81       	ldd	r30, Y+3	; 0x03
    1c70:	fc 81       	ldd	r31, Y+4	; 0x04
    1c72:	82 81       	ldd	r24, Z+2	; 0x02
    1c74:	93 81       	ldd	r25, Z+3	; 0x03
    1c76:	9a 83       	std	Y+2, r25	; 0x02
    1c78:	89 83       	std	Y+1, r24	; 0x01
        sched->ready = sched->expired;
    1c7a:	eb 81       	ldd	r30, Y+3	; 0x03
    1c7c:	fc 81       	ldd	r31, Y+4	; 0x04
    1c7e:	84 81       	ldd	r24, Z+4	; 0x04
    1c80:	95 81       	ldd	r25, Z+5	; 0x05
    1c82:	eb 81       	ldd	r30, Y+3	; 0x03
    1c84:	fc 81       	ldd	r31, Y+4	; 0x04
    1c86:	93 83       	std	Z+3, r25	; 0x03
    1c88:	82 83       	std	Z+2, r24	; 0x02
        sched->expired = buf;
    1c8a:	eb 81       	ldd	r30, Y+3	; 0x03
    1c8c:	fc 81       	ldd	r31, Y+4	; 0x04
    1c8e:	89 81       	ldd	r24, Y+1	; 0x01
    1c90:	9a 81       	ldd	r25, Y+2	; 0x02
    1c92:	95 83       	std	Z+5, r25	; 0x05
    1c94:	84 83       	std	Z+4, r24	; 0x04
    }
}
    1c96:	0f 90       	pop	r0
    1c98:	0f 90       	pop	r0
    1c9a:	0f 90       	pop	r0
    1c9c:	0f 90       	pop	r0
    1c9e:	cf 91       	pop	r28
    1ca0:	df 91       	pop	r29
    1ca2:	08 95       	ret

00001ca4 <sched_schedule>:
2) В качестве аргумента передаем только тот объект, который управляет процессами
на исполняющем функции процессоре.
******************************************************************************************/
// Функция планирования, переключает процессы в обработчике системмного таймера
stack_t * sched_schedule( stack_t * current_sp )
{
    1ca4:	df 93       	push	r29
    1ca6:	cf 93       	push	r28
    1ca8:	cd b7       	in	r28, 0x3d	; 61
    1caa:	de b7       	in	r29, 0x3e	; 62
    1cac:	27 97       	sbiw	r28, 0x07	; 7
    1cae:	0f b6       	in	r0, 0x3f	; 63
    1cb0:	f8 94       	cli
    1cb2:	de bf       	out	0x3e, r29	; 62
    1cb4:	0f be       	out	0x3f, r0	; 63
    1cb6:	cd bf       	out	0x3d, r28	; 61
    1cb8:	9f 83       	std	Y+7, r25	; 0x07
    1cba:	8e 83       	std	Y+6, r24	; 0x06
#ifdef CONFIG_MP
    sched_t * sched = (sched_t *)kernel.sched + current_core();
#else
    sched_t * sched = (sched_t *)&kernel.sched;
    1cbc:	8e e9       	ldi	r24, 0x9E	; 158
    1cbe:	91 e0       	ldi	r25, 0x01	; 1
    1cc0:	9d 83       	std	Y+5, r25	; 0x05
    1cc2:	8c 83       	std	Y+4, r24	; 0x04
#endif // CONFIG_MP
    // Меняем только с локального процессора, блокировку sched->lock можно не захватывать!
    proc_t * current_proc = sched->current_proc;
    1cc4:	ec 81       	ldd	r30, Y+4	; 0x04
    1cc6:	fd 81       	ldd	r31, Y+5	; 0x05
    1cc8:	80 81       	ld	r24, Z
    1cca:	91 81       	ldd	r25, Z+1	; 0x01
    1ccc:	9b 83       	std	Y+3, r25	; 0x03
    1cce:	8a 83       	std	Y+2, r24	; 0x02
#ifdef CONFIG_MP
    // А вот эту блокировку обязательно надо захватить!
    spin_lock( &current_proc->lock );
#endif // CONFIG_MP
    // Сохранение указателя стека
    current_proc->spointer = current_sp;
    1cd0:	ea 81       	ldd	r30, Y+2	; 0x02
    1cd2:	fb 81       	ldd	r31, Y+3	; 0x03
    1cd4:	8e 81       	ldd	r24, Y+6	; 0x06
    1cd6:	9f 81       	ldd	r25, Y+7	; 0x07
    1cd8:	95 a7       	std	Z+45, r25	; 0x2d
    1cda:	84 a7       	std	Z+44, r24	; 0x2c
    // Хук "сохранение контекста"
    if( current_proc->sv_hook )current_proc->sv_hook( current_proc->arg );
    1cdc:	ea 81       	ldd	r30, Y+2	; 0x02
    1cde:	fb 81       	ldd	r31, Y+3	; 0x03
    1ce0:	84 a1       	ldd	r24, Z+36	; 0x24
    1ce2:	95 a1       	ldd	r25, Z+37	; 0x25
    1ce4:	00 97       	sbiw	r24, 0x00	; 0
    1ce6:	51 f0       	breq	.+20     	; 0x1cfc <sched_schedule+0x58>
    1ce8:	ea 81       	ldd	r30, Y+2	; 0x02
    1cea:	fb 81       	ldd	r31, Y+3	; 0x03
    1cec:	24 a1       	ldd	r18, Z+36	; 0x24
    1cee:	35 a1       	ldd	r19, Z+37	; 0x25
    1cf0:	ea 81       	ldd	r30, Y+2	; 0x02
    1cf2:	fb 81       	ldd	r31, Y+3	; 0x03
    1cf4:	80 a5       	ldd	r24, Z+40	; 0x28
    1cf6:	91 a5       	ldd	r25, Z+41	; 0x29
    1cf8:	f9 01       	movw	r30, r18
    1cfa:	09 95       	icall
    // Проверяем, что процесс находится в списке ready
    if( (xlist_t *)((gitem_t *)current_proc)->group->link == sched->ready )
    1cfc:	ea 81       	ldd	r30, Y+2	; 0x02
    1cfe:	fb 81       	ldd	r31, Y+3	; 0x03
    1d00:	04 80       	ldd	r0, Z+4	; 0x04
    1d02:	f5 81       	ldd	r31, Z+5	; 0x05
    1d04:	e0 2d       	mov	r30, r0
    1d06:	80 81       	ld	r24, Z
    1d08:	91 81       	ldd	r25, Z+1	; 0x01
    1d0a:	9c 01       	movw	r18, r24
    1d0c:	ec 81       	ldd	r30, Y+4	; 0x04
    1d0e:	fd 81       	ldd	r31, Y+5	; 0x05
    1d10:	82 81       	ldd	r24, Z+2	; 0x02
    1d12:	93 81       	ldd	r25, Z+3	; 0x03
    1d14:	28 17       	cp	r18, r24
    1d16:	39 07       	cpc	r19, r25
    1d18:	09 f0       	breq	.+2      	; 0x1d1c <sched_schedule+0x78>
    1d1a:	4d c0       	rjmp	.+154    	; 0x1db6 <sched_schedule+0x112>
    {
        // Переключаем cписок на следующий за текущим процесс
#ifdef CONFIG_MP
        spin_lock( &sched->lock );
#endif // CONFIG_MP
        xlist_switch( sched->ready, ((gitem_t *)current_proc)->group->prio );
    1d1c:	ec 81       	ldd	r30, Y+4	; 0x04
    1d1e:	fd 81       	ldd	r31, Y+5	; 0x05
    1d20:	82 81       	ldd	r24, Z+2	; 0x02
    1d22:	93 81       	ldd	r25, Z+3	; 0x03
    1d24:	ea 81       	ldd	r30, Y+2	; 0x02
    1d26:	fb 81       	ldd	r31, Y+3	; 0x03
    1d28:	04 80       	ldd	r0, Z+4	; 0x04
    1d2a:	f5 81       	ldd	r31, Z+5	; 0x05
    1d2c:	e0 2d       	mov	r30, r0
    1d2e:	22 81       	ldd	r18, Z+2	; 0x02
    1d30:	62 2f       	mov	r22, r18
    1d32:	0e 94 17 11 	call	0x222e	; 0x222e <xlist_switch>
#ifdef CONFIG_MP
        spin_unlock( &sched->lock );
#endif // CONFIG_MP
        //Проверяем, не истек ли квант времени процесса
        if( current_proc->timer > (timer_t)1 )current_proc->timer--;// Не истек, уменьшаем таймер
    1d36:	ea 81       	ldd	r30, Y+2	; 0x02
    1d38:	fb 81       	ldd	r31, Y+3	; 0x03
    1d3a:	80 a1       	ldd	r24, Z+32	; 0x20
    1d3c:	91 a1       	ldd	r25, Z+33	; 0x21
    1d3e:	82 30       	cpi	r24, 0x02	; 2
    1d40:	91 05       	cpc	r25, r1
    1d42:	50 f0       	brcs	.+20     	; 0x1d58 <sched_schedule+0xb4>
    1d44:	ea 81       	ldd	r30, Y+2	; 0x02
    1d46:	fb 81       	ldd	r31, Y+3	; 0x03
    1d48:	80 a1       	ldd	r24, Z+32	; 0x20
    1d4a:	91 a1       	ldd	r25, Z+33	; 0x21
    1d4c:	01 97       	sbiw	r24, 0x01	; 1
    1d4e:	ea 81       	ldd	r30, Y+2	; 0x02
    1d50:	fb 81       	ldd	r31, Y+3	; 0x03
    1d52:	91 a3       	std	Z+33, r25	; 0x21
    1d54:	80 a3       	std	Z+32, r24	; 0x20
    1d56:	2f c0       	rjmp	.+94     	; 0x1db6 <sched_schedule+0x112>
        {
            // Истек, вырезаем процесс из списка
#ifdef CONFIG_MP
            spin_lock( &sched->lock );
#endif // CONFIG_MP
            gitem_fast_cut( (gitem_t *)current_proc );
    1d58:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d5c:	0e 94 4a 07 	call	0xe94	; 0xe94 <gitem_fast_cut>
            // Обновили статистику после удаления процесса из списка ready
            stat_dec( current_proc, (stat_t *)kernel.stat + current_proc->core_id );
#endif // CONFIG_USE_ALB
#endif // CONFIG_MP
            // А что за процесс собственно?
            flag_t flags = current_proc->flags;
    1d60:	ea 81       	ldd	r30, Y+2	; 0x02
    1d62:	fb 81       	ldd	r31, Y+3	; 0x03
    1d64:	83 85       	ldd	r24, Z+11	; 0x0b
    1d66:	89 83       	std	Y+1, r24	; 0x01
            if(
                (!(flags & PROC_FLG_RT))
    1d68:	89 81       	ldd	r24, Y+1	; 0x01
    1d6a:	88 2f       	mov	r24, r24
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	81 70       	andi	r24, 0x01	; 1
    1d70:	90 70       	andi	r25, 0x00	; 0
            stat_dec( current_proc, (stat_t *)kernel.stat + current_proc->core_id );
#endif // CONFIG_USE_ALB
#endif // CONFIG_MP
            // А что за процесс собственно?
            flag_t flags = current_proc->flags;
            if(
    1d72:	00 97       	sbiw	r24, 0x00	; 0
    1d74:	91 f4       	brne	.+36     	; 0x1d9a <sched_schedule+0xf6>
                ||(flags & PROC_FLG_HOLD)
#endif // CONFIG_HARD_RT
            )
            {
                //Процесс общего назначения, либо он удерживает общий ресурс, сбрасываем таймер и переносим в очередь expired
                current_proc->timer = current_proc->time_quant;
    1d76:	ea 81       	ldd	r30, Y+2	; 0x02
    1d78:	fb 81       	ldd	r31, Y+3	; 0x03
    1d7a:	86 8d       	ldd	r24, Z+30	; 0x1e
    1d7c:	97 8d       	ldd	r25, Z+31	; 0x1f
    1d7e:	ea 81       	ldd	r30, Y+2	; 0x02
    1d80:	fb 81       	ldd	r31, Y+3	; 0x03
    1d82:	91 a3       	std	Z+33, r25	; 0x21
    1d84:	80 a3       	std	Z+32, r24	; 0x20
#else // CONFIG_MP CONFIG_USE_ALB
                // Тупо переносим процесс в список expired
#ifdef CONFIG_MP
                spin_lock( &sched->lock );
#endif // CONFIG_MP
                gitem_insert( (gitem_t *)current_proc, sched->expired );
    1d86:	8a 81       	ldd	r24, Y+2	; 0x02
    1d88:	9b 81       	ldd	r25, Y+3	; 0x03
    1d8a:	ec 81       	ldd	r30, Y+4	; 0x04
    1d8c:	fd 81       	ldd	r31, Y+5	; 0x05
    1d8e:	24 81       	ldd	r18, Z+4	; 0x04
    1d90:	35 81       	ldd	r19, Z+5	; 0x05
    1d92:	b9 01       	movw	r22, r18
    1d94:	0e 94 73 06 	call	0xce6	; 0xce6 <gitem_insert>
    1d98:	0e c0       	rjmp	.+28     	; 0x1db6 <sched_schedule+0x112>
                spin_lock( &kernel.stat_lock );
                stat_dec( current_proc, (stat_t *)kernel.stat + current_proc->core_id );
#endif // nCONFIG_USE_ALB
                spin_unlock( &kernel.stat_lock );
#endif // CONFIG_MP
                ((gitem_t *)current_proc)->group->link = (void *)0;// Просто вырезали из списка, как в gitem_cut
    1d9a:	ea 81       	ldd	r30, Y+2	; 0x02
    1d9c:	fb 81       	ldd	r31, Y+3	; 0x03
    1d9e:	04 80       	ldd	r0, Z+4	; 0x04
    1da0:	f5 81       	ldd	r31, Z+5	; 0x05
    1da2:	e0 2d       	mov	r30, r0
    1da4:	11 82       	std	Z+1, r1	; 0x01
    1da6:	10 82       	st	Z, r1
                current_proc->flags &= ~PROC_FLG_RUN;
    1da8:	ea 81       	ldd	r30, Y+2	; 0x02
    1daa:	fb 81       	ldd	r31, Y+3	; 0x03
    1dac:	83 85       	ldd	r24, Z+11	; 0x0b
    1dae:	8d 7f       	andi	r24, 0xFD	; 253
    1db0:	ea 81       	ldd	r30, Y+2	; 0x02
    1db2:	fb 81       	ldd	r31, Y+3	; 0x03
    1db4:	83 87       	std	Z+11, r24	; 0x0b
#ifdef CONFIG_MP
    //Текущий процесс более не нужен, освобождаем его блокировку
    spin_unlock( &current_proc->lock );
    spin_lock( &sched->lock );
#endif // CONFIG_MP
    _sched_list_switch( sched );
    1db6:	8c 81       	ldd	r24, Y+4	; 0x04
    1db8:	9d 81       	ldd	r25, Y+5	; 0x05
    1dba:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <_sched_list_switch>
    // Изменять указатель будем при захваченной блокировке,
    // чтобы процессы на других процессорах не прочитали неизвестно что.
    current_proc = (proc_t *)xlist_head( sched->ready ); // Вытесняющая многозадачность же!
    1dbe:	ec 81       	ldd	r30, Y+4	; 0x04
    1dc0:	fd 81       	ldd	r31, Y+5	; 0x05
    1dc2:	82 81       	ldd	r24, Z+2	; 0x02
    1dc4:	93 81       	ldd	r25, Z+3	; 0x03
    1dc6:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <xlist_head>
    1dca:	9b 83       	std	Y+3, r25	; 0x03
    1dcc:	8a 83       	std	Y+2, r24	; 0x02
    sched->current_proc = current_proc;
    1dce:	ec 81       	ldd	r30, Y+4	; 0x04
    1dd0:	fd 81       	ldd	r31, Y+5	; 0x05
    1dd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd4:	9b 81       	ldd	r25, Y+3	; 0x03
    1dd6:	91 83       	std	Z+1, r25	; 0x01
    1dd8:	80 83       	st	Z, r24
#ifdef CONFIG_MP
    spin_unlock( &sched->lock );
    spin_lock( &current_proc->lock );
#endif // CONFIG_MP
    //Хук "восстановление контекста"
    if( current_proc->rs_hook )current_proc->rs_hook( current_proc->arg );
    1dda:	ea 81       	ldd	r30, Y+2	; 0x02
    1ddc:	fb 81       	ldd	r31, Y+3	; 0x03
    1dde:	86 a1       	ldd	r24, Z+38	; 0x26
    1de0:	97 a1       	ldd	r25, Z+39	; 0x27
    1de2:	00 97       	sbiw	r24, 0x00	; 0
    1de4:	51 f0       	breq	.+20     	; 0x1dfa <sched_schedule+0x156>
    1de6:	ea 81       	ldd	r30, Y+2	; 0x02
    1de8:	fb 81       	ldd	r31, Y+3	; 0x03
    1dea:	26 a1       	ldd	r18, Z+38	; 0x26
    1dec:	37 a1       	ldd	r19, Z+39	; 0x27
    1dee:	ea 81       	ldd	r30, Y+2	; 0x02
    1df0:	fb 81       	ldd	r31, Y+3	; 0x03
    1df2:	80 a5       	ldd	r24, Z+40	; 0x28
    1df4:	91 a5       	ldd	r25, Z+41	; 0x29
    1df6:	f9 01       	movw	r30, r18
    1df8:	09 95       	icall
#ifdef CONFIG_MP
    stack_t * ret_sp = current_proc->spointer;
    spin_unlock( &current_proc->lock );
    return ret_sp;
#else
    return current_proc->spointer;
    1dfa:	ea 81       	ldd	r30, Y+2	; 0x02
    1dfc:	fb 81       	ldd	r31, Y+3	; 0x03
    1dfe:	84 a5       	ldd	r24, Z+44	; 0x2c
    1e00:	95 a5       	ldd	r25, Z+45	; 0x2d
#endif // CONFIG_MP
}
    1e02:	27 96       	adiw	r28, 0x07	; 7
    1e04:	0f b6       	in	r0, 0x3f	; 63
    1e06:	f8 94       	cli
    1e08:	de bf       	out	0x3e, r29	; 62
    1e0a:	0f be       	out	0x3f, r0	; 63
    1e0c:	cd bf       	out	0x3d, r28	; 61
    1e0e:	cf 91       	pop	r28
    1e10:	df 91       	pop	r29
    1e12:	08 95       	ret

00001e14 <sched_reschedule>:
//----------------------------------------------------------------------------------------
// Функция перепланирования, переключает процессы в обработчике прерывания resched
stack_t * sched_reschedule( stack_t * current_sp )
{
    1e14:	df 93       	push	r29
    1e16:	cf 93       	push	r28
    1e18:	00 d0       	rcall	.+0      	; 0x1e1a <sched_reschedule+0x6>
    1e1a:	00 d0       	rcall	.+0      	; 0x1e1c <sched_reschedule+0x8>
    1e1c:	00 d0       	rcall	.+0      	; 0x1e1e <sched_reschedule+0xa>
    1e1e:	cd b7       	in	r28, 0x3d	; 61
    1e20:	de b7       	in	r29, 0x3e	; 62
    1e22:	9e 83       	std	Y+6, r25	; 0x06
    1e24:	8d 83       	std	Y+5, r24	; 0x05
#ifdef CONFIG_MP
    sched_t * sched = (sched_t *)kernel.sched + current_core();
#else
    sched_t * sched = (sched_t *)&kernel.sched;
    1e26:	8e e9       	ldi	r24, 0x9E	; 158
    1e28:	91 e0       	ldi	r25, 0x01	; 1
    1e2a:	9c 83       	std	Y+4, r25	; 0x04
    1e2c:	8b 83       	std	Y+3, r24	; 0x03
#endif // CONFIG_MP
    // Меняем только с локального процессора, блокировку sched->lock можно не захватывать!
    proc_t * current_proc = sched->current_proc;
    1e2e:	eb 81       	ldd	r30, Y+3	; 0x03
    1e30:	fc 81       	ldd	r31, Y+4	; 0x04
    1e32:	80 81       	ld	r24, Z
    1e34:	91 81       	ldd	r25, Z+1	; 0x01
    1e36:	9a 83       	std	Y+2, r25	; 0x02
    1e38:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    // А вот эту блокировку обязательно надо захватить!
    spin_lock( &current_proc->lock );
#endif // CONFIG_MP
    // Сохранение указателя стека
    current_proc->spointer = current_sp;
    1e3a:	e9 81       	ldd	r30, Y+1	; 0x01
    1e3c:	fa 81       	ldd	r31, Y+2	; 0x02
    1e3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e40:	9e 81       	ldd	r25, Y+6	; 0x06
    1e42:	95 a7       	std	Z+45, r25	; 0x2d
    1e44:	84 a7       	std	Z+44, r24	; 0x2c
    // Хук "сохранение контекста"
    if( current_proc->sv_hook )current_proc->sv_hook( current_proc->arg );
    1e46:	e9 81       	ldd	r30, Y+1	; 0x01
    1e48:	fa 81       	ldd	r31, Y+2	; 0x02
    1e4a:	84 a1       	ldd	r24, Z+36	; 0x24
    1e4c:	95 a1       	ldd	r25, Z+37	; 0x25
    1e4e:	00 97       	sbiw	r24, 0x00	; 0
    1e50:	51 f0       	breq	.+20     	; 0x1e66 <sched_reschedule+0x52>
    1e52:	e9 81       	ldd	r30, Y+1	; 0x01
    1e54:	fa 81       	ldd	r31, Y+2	; 0x02
    1e56:	24 a1       	ldd	r18, Z+36	; 0x24
    1e58:	35 a1       	ldd	r19, Z+37	; 0x25
    1e5a:	e9 81       	ldd	r30, Y+1	; 0x01
    1e5c:	fa 81       	ldd	r31, Y+2	; 0x02
    1e5e:	80 a5       	ldd	r24, Z+40	; 0x28
    1e60:	91 a5       	ldd	r25, Z+41	; 0x29
    1e62:	f9 01       	movw	r30, r18
    1e64:	09 95       	icall
#ifdef CONFIG_MP
    spin_unlock( &current_proc->lock );
    spin_lock( &sched->lock );
#endif // CONFIG_MP
    _sched_list_switch( sched );
    1e66:	8b 81       	ldd	r24, Y+3	; 0x03
    1e68:	9c 81       	ldd	r25, Y+4	; 0x04
    1e6a:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <_sched_list_switch>
    current_proc = (proc_t *)xlist_head( sched->ready ); // Вытесняющая многозадачность же!
    1e6e:	eb 81       	ldd	r30, Y+3	; 0x03
    1e70:	fc 81       	ldd	r31, Y+4	; 0x04
    1e72:	82 81       	ldd	r24, Z+2	; 0x02
    1e74:	93 81       	ldd	r25, Z+3	; 0x03
    1e76:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <xlist_head>
    1e7a:	9a 83       	std	Y+2, r25	; 0x02
    1e7c:	89 83       	std	Y+1, r24	; 0x01
    sched->current_proc = current_proc;
    1e7e:	eb 81       	ldd	r30, Y+3	; 0x03
    1e80:	fc 81       	ldd	r31, Y+4	; 0x04
    1e82:	89 81       	ldd	r24, Y+1	; 0x01
    1e84:	9a 81       	ldd	r25, Y+2	; 0x02
    1e86:	91 83       	std	Z+1, r25	; 0x01
    1e88:	80 83       	st	Z, r24

#ifdef CONFIG_MP
    spin_lock(&current_proc->lock);
#endif // CONFIG_MP
    //Хук "восстановление контекста"
    if( current_proc->rs_hook )current_proc->rs_hook( current_proc->arg );
    1e8a:	e9 81       	ldd	r30, Y+1	; 0x01
    1e8c:	fa 81       	ldd	r31, Y+2	; 0x02
    1e8e:	86 a1       	ldd	r24, Z+38	; 0x26
    1e90:	97 a1       	ldd	r25, Z+39	; 0x27
    1e92:	00 97       	sbiw	r24, 0x00	; 0
    1e94:	51 f0       	breq	.+20     	; 0x1eaa <sched_reschedule+0x96>
    1e96:	e9 81       	ldd	r30, Y+1	; 0x01
    1e98:	fa 81       	ldd	r31, Y+2	; 0x02
    1e9a:	26 a1       	ldd	r18, Z+38	; 0x26
    1e9c:	37 a1       	ldd	r19, Z+39	; 0x27
    1e9e:	e9 81       	ldd	r30, Y+1	; 0x01
    1ea0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ea2:	80 a5       	ldd	r24, Z+40	; 0x28
    1ea4:	91 a5       	ldd	r25, Z+41	; 0x29
    1ea6:	f9 01       	movw	r30, r18
    1ea8:	09 95       	icall
#ifdef CONFIG_MP
    stack_t * ret_sp = current_proc->spointer;
    spin_unlock( &current_proc->lock );
    return ret_sp;
#else
    return current_proc->spointer;
    1eaa:	e9 81       	ldd	r30, Y+1	; 0x01
    1eac:	fa 81       	ldd	r31, Y+2	; 0x02
    1eae:	84 a5       	ldd	r24, Z+44	; 0x2c
    1eb0:	95 a5       	ldd	r25, Z+45	; 0x2d
#endif // CONFIG_MP
}
    1eb2:	26 96       	adiw	r28, 0x06	; 6
    1eb4:	0f b6       	in	r0, 0x3f	; 63
    1eb6:	f8 94       	cli
    1eb8:	de bf       	out	0x3e, r29	; 62
    1eba:	0f be       	out	0x3f, r0	; 63
    1ebc:	cd bf       	out	0x3d, r28	; 61
    1ebe:	cf 91       	pop	r28
    1ec0:	df 91       	pop	r29
    1ec2:	08 95       	ret

00001ec4 <sem_init_isr>:
*****************************************************************************************/
#include "../include/bugurt.h"

// Инициализация
void sem_init_isr( sem_t * sem, count_t count )
{
    1ec4:	df 93       	push	r29
    1ec6:	cf 93       	push	r28
    1ec8:	00 d0       	rcall	.+0      	; 0x1eca <sem_init_isr+0x6>
    1eca:	00 d0       	rcall	.+0      	; 0x1ecc <sem_init_isr+0x8>
    1ecc:	cd b7       	in	r28, 0x3d	; 61
    1ece:	de b7       	in	r29, 0x3e	; 62
    1ed0:	9a 83       	std	Y+2, r25	; 0x02
    1ed2:	89 83       	std	Y+1, r24	; 0x01
    1ed4:	7c 83       	std	Y+4, r23	; 0x04
    1ed6:	6b 83       	std	Y+3, r22	; 0x03
    xlist_init( (xlist_t *)sem );
    1ed8:	89 81       	ldd	r24, Y+1	; 0x01
    1eda:	9a 81       	ldd	r25, Y+2	; 0x02
    1edc:	0e 94 c1 10 	call	0x2182	; 0x2182 <xlist_init>
    sem->counter = count;
    1ee0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ee2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee8:	92 8b       	std	Z+18, r25	; 0x12
    1eea:	81 8b       	std	Z+17, r24	; 0x11
}
    1eec:	0f 90       	pop	r0
    1eee:	0f 90       	pop	r0
    1ef0:	0f 90       	pop	r0
    1ef2:	0f 90       	pop	r0
    1ef4:	cf 91       	pop	r28
    1ef6:	df 91       	pop	r29
    1ef8:	08 95       	ret

00001efa <_sem_lock>:

// То же, для внутреннего использования
bool_t _sem_lock( sem_t * sem )
{
    1efa:	df 93       	push	r29
    1efc:	cf 93       	push	r28
    1efe:	00 d0       	rcall	.+0      	; 0x1f00 <_sem_lock+0x6>
    1f00:	00 d0       	rcall	.+0      	; 0x1f02 <_sem_lock+0x8>
    1f02:	0f 92       	push	r0
    1f04:	cd b7       	in	r28, 0x3d	; 61
    1f06:	de b7       	in	r29, 0x3e	; 62
    1f08:	9d 83       	std	Y+5, r25	; 0x05
    1f0a:	8c 83       	std	Y+4, r24	; 0x04

    bool_t ret = 0;
    1f0c:	1b 82       	std	Y+3, r1	; 0x03
    if( sem->counter != 0 )
    1f0e:	ec 81       	ldd	r30, Y+4	; 0x04
    1f10:	fd 81       	ldd	r31, Y+5	; 0x05
    1f12:	81 89       	ldd	r24, Z+17	; 0x11
    1f14:	92 89       	ldd	r25, Z+18	; 0x12
    1f16:	00 97       	sbiw	r24, 0x00	; 0
    1f18:	61 f0       	breq	.+24     	; 0x1f32 <_sem_lock+0x38>
    {
        sem->counter--;
    1f1a:	ec 81       	ldd	r30, Y+4	; 0x04
    1f1c:	fd 81       	ldd	r31, Y+5	; 0x05
    1f1e:	81 89       	ldd	r24, Z+17	; 0x11
    1f20:	92 89       	ldd	r25, Z+18	; 0x12
    1f22:	01 97       	sbiw	r24, 0x01	; 1
    1f24:	ec 81       	ldd	r30, Y+4	; 0x04
    1f26:	fd 81       	ldd	r31, Y+5	; 0x05
    1f28:	92 8b       	std	Z+18, r25	; 0x12
    1f2a:	81 8b       	std	Z+17, r24	; 0x11
#ifdef CONFIG_MP
        spin_unlock( &sem->lock );// Освобождение блокировки семафора
#endif //CONFIG_MP
        ret = (bool_t)1;
    1f2c:	81 e0       	ldi	r24, 0x01	; 1
    1f2e:	8b 83       	std	Y+3, r24	; 0x03
    1f30:	16 c0       	rjmp	.+44     	; 0x1f5e <_sem_lock+0x64>
    }
    else
    {
        proc_t * proc = current_proc();
    1f32:	0e 94 cc 00 	call	0x198	; 0x198 <current_proc>
    1f36:	9a 83       	std	Y+2, r25	; 0x02
    1f38:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
        spin_lock( &proc->lock );// Захват блокировки процесса
#endif //CONFIG_MP
        proc->flags |= PROC_FLG_QUEUE;
    1f3a:	e9 81       	ldd	r30, Y+1	; 0x01
    1f3c:	fa 81       	ldd	r31, Y+2	; 0x02
    1f3e:	83 85       	ldd	r24, Z+11	; 0x0b
    1f40:	88 60       	ori	r24, 0x08	; 8
    1f42:	e9 81       	ldd	r30, Y+1	; 0x01
    1f44:	fa 81       	ldd	r31, Y+2	; 0x02
    1f46:	83 87       	std	Z+11, r24	; 0x0b
        _proc_stop( proc );
    1f48:	89 81       	ldd	r24, Y+1	; 0x01
    1f4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f4c:	0e 94 98 0c 	call	0x1930	; 0x1930 <_proc_stop>
        gitem_insert( (gitem_t *)proc, (xlist_t *)sem );
    1f50:	89 81       	ldd	r24, Y+1	; 0x01
    1f52:	9a 81       	ldd	r25, Y+2	; 0x02
    1f54:	2c 81       	ldd	r18, Y+4	; 0x04
    1f56:	3d 81       	ldd	r19, Y+5	; 0x05
    1f58:	b9 01       	movw	r22, r18
    1f5a:	0e 94 73 06 	call	0xce6	; 0xce6 <gitem_insert>
#ifdef CONFIG_MP
        spin_unlock( &proc->lock );// Освобождение блокировки процесса
#endif //CONFIG_MP
    }
    return ret;
    1f5e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1f60:	0f 90       	pop	r0
    1f62:	0f 90       	pop	r0
    1f64:	0f 90       	pop	r0
    1f66:	0f 90       	pop	r0
    1f68:	0f 90       	pop	r0
    1f6a:	cf 91       	pop	r28
    1f6c:	df 91       	pop	r29
    1f6e:	08 95       	ret

00001f70 <_sem_unlock>:

void _sem_unlock( sem_t * sem )
{
    1f70:	df 93       	push	r29
    1f72:	cf 93       	push	r28
    1f74:	00 d0       	rcall	.+0      	; 0x1f76 <_sem_unlock+0x6>
    1f76:	00 d0       	rcall	.+0      	; 0x1f78 <_sem_unlock+0x8>
    1f78:	cd b7       	in	r28, 0x3d	; 61
    1f7a:	de b7       	in	r29, 0x3e	; 62
    1f7c:	9c 83       	std	Y+4, r25	; 0x04
    1f7e:	8b 83       	std	Y+3, r24	; 0x03
    if( ((xlist_t *)sem)->index == (index_t)0  )
    1f80:	eb 81       	ldd	r30, Y+3	; 0x03
    1f82:	fc 81       	ldd	r31, Y+4	; 0x04
    1f84:	80 89       	ldd	r24, Z+16	; 0x10
    1f86:	88 23       	and	r24, r24
    1f88:	51 f4       	brne	.+20     	; 0x1f9e <_sem_unlock+0x2e>
    {
        sem->counter++;
    1f8a:	eb 81       	ldd	r30, Y+3	; 0x03
    1f8c:	fc 81       	ldd	r31, Y+4	; 0x04
    1f8e:	81 89       	ldd	r24, Z+17	; 0x11
    1f90:	92 89       	ldd	r25, Z+18	; 0x12
    1f92:	01 96       	adiw	r24, 0x01	; 1
    1f94:	eb 81       	ldd	r30, Y+3	; 0x03
    1f96:	fc 81       	ldd	r31, Y+4	; 0x04
    1f98:	92 8b       	std	Z+18, r25	; 0x12
    1f9a:	81 8b       	std	Z+17, r24	; 0x11
    1f9c:	15 c0       	rjmp	.+42     	; 0x1fc8 <_sem_unlock+0x58>
#ifdef CONFIG_MP
        spin_unlock( &sem->lock );
#endif //CONFIG_MP
        return;
    }
    proc_t * proc = (proc_t *)xlist_head((xlist_t *)sem);
    1f9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa2:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <xlist_head>
    1fa6:	9a 83       	std	Y+2, r25	; 0x02
    1fa8:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );// Захват спин-блокировки процесса
#endif //CONFIG_MP
    proc->flags &= ~PROC_FLG_QUEUE;
    1faa:	e9 81       	ldd	r30, Y+1	; 0x01
    1fac:	fa 81       	ldd	r31, Y+2	; 0x02
    1fae:	83 85       	ldd	r24, Z+11	; 0x0b
    1fb0:	87 7f       	andi	r24, 0xF7	; 247
    1fb2:	e9 81       	ldd	r30, Y+1	; 0x01
    1fb4:	fa 81       	ldd	r31, Y+2	; 0x02
    1fb6:	83 87       	std	Z+11, r24	; 0x0b
    gitem_cut( (gitem_t *)proc );
    1fb8:	89 81       	ldd	r24, Y+1	; 0x01
    1fba:	9a 81       	ldd	r25, Y+2	; 0x02
    1fbc:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <gitem_cut>
    _proc_run( proc );
    1fc0:	89 81       	ldd	r24, Y+1	; 0x01
    1fc2:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc4:	0e 94 11 0c 	call	0x1822	; 0x1822 <_proc_run>
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );// Освобождение спин-блокировки процесса
#endif //CONFIG_MP
}
    1fc8:	0f 90       	pop	r0
    1fca:	0f 90       	pop	r0
    1fcc:	0f 90       	pop	r0
    1fce:	0f 90       	pop	r0
    1fd0:	cf 91       	pop	r28
    1fd2:	df 91       	pop	r29
    1fd4:	08 95       	ret

00001fd6 <sig_init_isr>:
*****************************************************************************************/
#include "../include/bugurt.h"
//========================================================================================
// Инициация
void sig_init_isr( sig_t * sig )
{
    1fd6:	df 93       	push	r29
    1fd8:	cf 93       	push	r28
    1fda:	00 d0       	rcall	.+0      	; 0x1fdc <sig_init_isr+0x6>
    1fdc:	cd b7       	in	r28, 0x3d	; 61
    1fde:	de b7       	in	r29, 0x3e	; 62
    1fe0:	9a 83       	std	Y+2, r25	; 0x02
    1fe2:	89 83       	std	Y+1, r24	; 0x01
    {
        xlist_init( (xlist_t *)sig->sig_list + i );
        stat_init( (stat_t *)sig->sig_stat + i );
    }
#else
    xlist_init( (xlist_t *)sig );
    1fe4:	89 81       	ldd	r24, Y+1	; 0x01
    1fe6:	9a 81       	ldd	r25, Y+2	; 0x02
    1fe8:	0e 94 c1 10 	call	0x2182	; 0x2182 <xlist_init>
#endif
}
    1fec:	0f 90       	pop	r0
    1fee:	0f 90       	pop	r0
    1ff0:	cf 91       	pop	r28
    1ff2:	df 91       	pop	r29
    1ff4:	08 95       	ret

00001ff6 <sig_wait_stage_1_isr>:
//========================================================================================
// Это выполнится при постановке процесса в список ожидания сигнала
void sig_wait_stage_1_isr( sig_t * sig )
{
    1ff6:	df 93       	push	r29
    1ff8:	cf 93       	push	r28
    1ffa:	00 d0       	rcall	.+0      	; 0x1ffc <sig_wait_stage_1_isr+0x6>
    1ffc:	00 d0       	rcall	.+0      	; 0x1ffe <sig_wait_stage_1_isr+0x8>
    1ffe:	cd b7       	in	r28, 0x3d	; 61
    2000:	de b7       	in	r29, 0x3e	; 62
    2002:	9c 83       	std	Y+4, r25	; 0x04
    2004:	8b 83       	std	Y+3, r24	; 0x03
#ifdef CONFIG_MP
    spin_lock( &sig->lock );
#endif // CONFIG_MP
    proc_t * proc = current_proc();
    2006:	0e 94 cc 00 	call	0x198	; 0x198 <current_proc>
    200a:	9a 83       	std	Y+2, r25	; 0x02
    200c:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    // Останавливаем процесс
    _proc_stop(proc);
    200e:	89 81       	ldd	r24, Y+1	; 0x01
    2010:	9a 81       	ldd	r25, Y+2	; 0x02
    2012:	0e 94 98 0c 	call	0x1930	; 0x1930 <_proc_stop>
    proc->flags |= PROC_FLG_WAIT;
    2016:	e9 81       	ldd	r30, Y+1	; 0x01
    2018:	fa 81       	ldd	r31, Y+2	; 0x02
    201a:	83 85       	ldd	r24, Z+11	; 0x0b
    201c:	80 61       	ori	r24, 0x10	; 16
    201e:	e9 81       	ldd	r30, Y+1	; 0x01
    2020:	fa 81       	ldd	r31, Y+2	; 0x02
    2022:	83 87       	std	Z+11, r24	; 0x0b
        stat_inc( proc, (stat_t *)sig->sig_stat + sig_core );
    }
    spin_unlock( &proc->lock );
    spin_unlock( &sig->lock );
#else
    gitem_insert_group( (gitem_t *)proc, (xlist_t *)sig );
    2024:	89 81       	ldd	r24, Y+1	; 0x01
    2026:	9a 81       	ldd	r25, Y+2	; 0x02
    2028:	2b 81       	ldd	r18, Y+3	; 0x03
    202a:	3c 81       	ldd	r19, Y+4	; 0x04
    202c:	b9 01       	movw	r22, r18
    202e:	0e 94 cf 06 	call	0xd9e	; 0xd9e <gitem_insert_group>
#endif //CONFIG_MP
}
    2032:	0f 90       	pop	r0
    2034:	0f 90       	pop	r0
    2036:	0f 90       	pop	r0
    2038:	0f 90       	pop	r0
    203a:	cf 91       	pop	r28
    203c:	df 91       	pop	r29
    203e:	08 95       	ret

00002040 <sig_signal_isr>:
    enable_interrupts();
}
//========================================================================================
// Тоже самое что и предыдущие, олько для вызова из обработчиков прерываний и из критических секций
void sig_signal_isr( sig_t * sig )
{
    2040:	df 93       	push	r29
    2042:	cf 93       	push	r28
    2044:	00 d0       	rcall	.+0      	; 0x2046 <sig_signal_isr+0x6>
    2046:	00 d0       	rcall	.+0      	; 0x2048 <sig_signal_isr+0x8>
    2048:	cd b7       	in	r28, 0x3d	; 61
    204a:	de b7       	in	r29, 0x3e	; 62
    204c:	9c 83       	std	Y+4, r25	; 0x04
    204e:	8b 83       	std	Y+3, r24	; 0x03
    }
    resched(core);// Перепланировка
    spin_unlock( &proc->lock );// Освобождение блокировки процесса
    spin_unlock( &sig->lock );// Освобождение блокировки сигнала
#else
    if( ((xlist_t *)sig)->index == (index_t)0 )return;
    2050:	eb 81       	ldd	r30, Y+3	; 0x03
    2052:	fc 81       	ldd	r31, Y+4	; 0x04
    2054:	80 89       	ldd	r24, Z+16	; 0x10
    2056:	88 23       	and	r24, r24
    2058:	a9 f0       	breq	.+42     	; 0x2084 <sig_signal_isr+0x44>
    proc_t * proc = (proc_t *)xlist_head( (xlist_t *)sig );
    205a:	8b 81       	ldd	r24, Y+3	; 0x03
    205c:	9c 81       	ldd	r25, Y+4	; 0x04
    205e:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <xlist_head>
    2062:	9a 83       	std	Y+2, r25	; 0x02
    2064:	89 83       	std	Y+1, r24	; 0x01
    gitem_fast_cut( (gitem_t *)proc );
    2066:	89 81       	ldd	r24, Y+1	; 0x01
    2068:	9a 81       	ldd	r25, Y+2	; 0x02
    206a:	0e 94 4a 07 	call	0xe94	; 0xe94 <gitem_fast_cut>
    gitem_insert( (gitem_t *)proc, kernel.sched.ready );
    206e:	89 81       	ldd	r24, Y+1	; 0x01
    2070:	9a 81       	ldd	r25, Y+2	; 0x02
    2072:	20 91 a0 01 	lds	r18, 0x01A0
    2076:	30 91 a1 01 	lds	r19, 0x01A1
    207a:	b9 01       	movw	r22, r18
    207c:	0e 94 73 06 	call	0xce6	; 0xce6 <gitem_insert>
    resched();
    2080:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
#endif //CONFIG_MP
}
    2084:	0f 90       	pop	r0
    2086:	0f 90       	pop	r0
    2088:	0f 90       	pop	r0
    208a:	0f 90       	pop	r0
    208c:	cf 91       	pop	r28
    208e:	df 91       	pop	r29
    2090:	08 95       	ret

00002092 <sig_broadcast_isr>:
//----------------------------------------------------------------------------------------
void sig_broadcast_isr( sig_t * sig )
{
    2092:	df 93       	push	r29
    2094:	cf 93       	push	r28
    2096:	00 d0       	rcall	.+0      	; 0x2098 <sig_broadcast_isr+0x6>
    2098:	cd b7       	in	r28, 0x3d	; 61
    209a:	de b7       	in	r29, 0x3e	; 62
    209c:	9a 83       	std	Y+2, r25	; 0x02
    209e:	89 83       	std	Y+1, r24	; 0x01

        resched(core);
    }
    spin_unlock( &sig->lock );
#else
    gitem_xlist_merge( (xlist_t *)sig, kernel.sched.ready );
    20a0:	20 91 a0 01 	lds	r18, 0x01A0
    20a4:	30 91 a1 01 	lds	r19, 0x01A1
    20a8:	89 81       	ldd	r24, Y+1	; 0x01
    20aa:	9a 81       	ldd	r25, Y+2	; 0x02
    20ac:	b9 01       	movw	r22, r18
    20ae:	0e 94 e7 07 	call	0xfce	; 0xfce <gitem_xlist_merge>
    resched();
    20b2:	0e 94 f7 00 	call	0x1ee	; 0x1ee <resched>
#endif //CONFIG_MP
}
    20b6:	0f 90       	pop	r0
    20b8:	0f 90       	pop	r0
    20ba:	cf 91       	pop	r28
    20bc:	df 91       	pop	r29
    20be:	08 95       	ret

000020c0 <_clear_timer>:
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
//========================================================================================
void _clear_timer(timer_t * t)
{
    20c0:	df 93       	push	r29
    20c2:	cf 93       	push	r28
    20c4:	00 d0       	rcall	.+0      	; 0x20c6 <_clear_timer+0x6>
    20c6:	cd b7       	in	r28, 0x3d	; 61
    20c8:	de b7       	in	r29, 0x3e	; 62
    20ca:	9a 83       	std	Y+2, r25	; 0x02
    20cc:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    core_id_t current_core = _enter_crit_sec();
    spin_lock( &kernel.timer_lock );
#else
    enter_crit_sec();
    20ce:	0e 94 1d 06 	call	0xc3a	; 0xc3a <enter_crit_sec>
#endif //CONFIG_MP
    *t = kernel.timer;
    20d2:	80 91 f8 01 	lds	r24, 0x01F8
    20d6:	90 91 f9 01 	lds	r25, 0x01F9
    20da:	e9 81       	ldd	r30, Y+1	; 0x01
    20dc:	fa 81       	ldd	r31, Y+2	; 0x02
    20de:	91 83       	std	Z+1, r25	; 0x01
    20e0:	80 83       	st	Z, r24
#ifdef CONFIG_MP
    spin_unlock( &kernel.timer_lock );
    _exit_crit_sec(current_core);
#else
    exit_crit_sec();
    20e2:	0e 94 2f 06 	call	0xc5e	; 0xc5e <exit_crit_sec>
#endif //CONFIG_MP
}
    20e6:	0f 90       	pop	r0
    20e8:	0f 90       	pop	r0
    20ea:	cf 91       	pop	r28
    20ec:	df 91       	pop	r29
    20ee:	08 95       	ret

000020f0 <_timer>:
//----------------------------------------------------------------------------------------
timer_t _timer(timer_t t)
{
    20f0:	df 93       	push	r29
    20f2:	cf 93       	push	r28
    20f4:	00 d0       	rcall	.+0      	; 0x20f6 <_timer+0x6>
    20f6:	00 d0       	rcall	.+0      	; 0x20f8 <_timer+0x8>
    20f8:	cd b7       	in	r28, 0x3d	; 61
    20fa:	de b7       	in	r29, 0x3e	; 62
    20fc:	9c 83       	std	Y+4, r25	; 0x04
    20fe:	8b 83       	std	Y+3, r24	; 0x03
    timer_t ret;
#ifdef CONFIG_MP
    core_id_t current_core = _enter_crit_sec();
    spin_lock( &kernel.timer_lock );
#else
    enter_crit_sec();
    2100:	0e 94 1d 06 	call	0xc3a	; 0xc3a <enter_crit_sec>
#endif //CONFIG_MP
    ret = kernel.timer - t;
    2104:	20 91 f8 01 	lds	r18, 0x01F8
    2108:	30 91 f9 01 	lds	r19, 0x01F9
    210c:	8b 81       	ldd	r24, Y+3	; 0x03
    210e:	9c 81       	ldd	r25, Y+4	; 0x04
    2110:	a9 01       	movw	r20, r18
    2112:	48 1b       	sub	r20, r24
    2114:	59 0b       	sbc	r21, r25
    2116:	ca 01       	movw	r24, r20
    2118:	9a 83       	std	Y+2, r25	; 0x02
    211a:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_unlock( &kernel.timer_lock );
    _exit_crit_sec(current_core);
#else
    exit_crit_sec();
    211c:	0e 94 2f 06 	call	0xc5e	; 0xc5e <exit_crit_sec>
#endif //CONFIG_MP
    return ret;
    2120:	89 81       	ldd	r24, Y+1	; 0x01
    2122:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2124:	0f 90       	pop	r0
    2126:	0f 90       	pop	r0
    2128:	0f 90       	pop	r0
    212a:	0f 90       	pop	r0
    212c:	cf 91       	pop	r28
    212e:	df 91       	pop	r29
    2130:	08 95       	ret

00002132 <wait_time>:

//----------------------------------------------------------------------------------------
void wait_time(timer_t time)
{
    2132:	df 93       	push	r29
    2134:	cf 93       	push	r28
    2136:	00 d0       	rcall	.+0      	; 0x2138 <wait_time+0x6>
    2138:	00 d0       	rcall	.+0      	; 0x213a <wait_time+0x8>
    213a:	0f 92       	push	r0
    213c:	cd b7       	in	r28, 0x3d	; 61
    213e:	de b7       	in	r29, 0x3e	; 62
    2140:	9d 83       	std	Y+5, r25	; 0x05
    2142:	8c 83       	std	Y+4, r24	; 0x04
    timer_t tmr;
    bool_t roll=(bool_t)1;
    2144:	81 e0       	ldi	r24, 0x01	; 1
    2146:	89 83       	std	Y+1, r24	; 0x01
    CLEAR_TIMER(tmr);
    2148:	ce 01       	movw	r24, r28
    214a:	02 96       	adiw	r24, 0x02	; 2
    214c:	0e 94 60 10 	call	0x20c0	; 0x20c0 <_clear_timer>
    2150:	0d c0       	rjmp	.+26     	; 0x216c <wait_time+0x3a>
    while((bool_t)roll)
    {
        roll = (bool_t)( TIMER(tmr) < (timer_t)time );
    2152:	8a 81       	ldd	r24, Y+2	; 0x02
    2154:	9b 81       	ldd	r25, Y+3	; 0x03
    2156:	0e 94 78 10 	call	0x20f0	; 0x20f0 <_timer>
    215a:	9c 01       	movw	r18, r24
    215c:	19 82       	std	Y+1, r1	; 0x01
    215e:	8c 81       	ldd	r24, Y+4	; 0x04
    2160:	9d 81       	ldd	r25, Y+5	; 0x05
    2162:	28 17       	cp	r18, r24
    2164:	39 07       	cpc	r19, r25
    2166:	10 f4       	brcc	.+4      	; 0x216c <wait_time+0x3a>
    2168:	81 e0       	ldi	r24, 0x01	; 1
    216a:	89 83       	std	Y+1, r24	; 0x01
void wait_time(timer_t time)
{
    timer_t tmr;
    bool_t roll=(bool_t)1;
    CLEAR_TIMER(tmr);
    while((bool_t)roll)
    216c:	89 81       	ldd	r24, Y+1	; 0x01
    216e:	88 23       	and	r24, r24
    2170:	81 f7       	brne	.-32     	; 0x2152 <wait_time+0x20>
    {
        roll = (bool_t)( TIMER(tmr) < (timer_t)time );
    }
}
    2172:	0f 90       	pop	r0
    2174:	0f 90       	pop	r0
    2176:	0f 90       	pop	r0
    2178:	0f 90       	pop	r0
    217a:	0f 90       	pop	r0
    217c:	cf 91       	pop	r28
    217e:	df 91       	pop	r29
    2180:	08 95       	ret

00002182 <xlist_init>:
**********************************************/
//Инициация
void xlist_init(
    xlist_t * xlist
)
{
    2182:	df 93       	push	r29
    2184:	cf 93       	push	r28
    2186:	00 d0       	rcall	.+0      	; 0x2188 <xlist_init+0x6>
    2188:	00 d0       	rcall	.+0      	; 0x218a <xlist_init+0x8>
    218a:	cd b7       	in	r28, 0x3d	; 61
    218c:	de b7       	in	r29, 0x3e	; 62
    218e:	9c 83       	std	Y+4, r25	; 0x04
    2190:	8b 83       	std	Y+3, r24	; 0x03
    count_t i;
    //список пуст
    xlist->index = (index_t)0;
    2192:	eb 81       	ldd	r30, Y+3	; 0x03
    2194:	fc 81       	ldd	r31, Y+4	; 0x04
    2196:	10 8a       	std	Z+16, r1	; 0x10
    //обнуляем указатели
    for( i = 0; i < BITS_IN_INDEX_T; i++ )xlist->item[i] = (item_t *)0;
    2198:	1a 82       	std	Y+2, r1	; 0x02
    219a:	19 82       	std	Y+1, r1	; 0x01
    219c:	10 c0       	rjmp	.+32     	; 0x21be <xlist_init+0x3c>
    219e:	89 81       	ldd	r24, Y+1	; 0x01
    21a0:	9a 81       	ldd	r25, Y+2	; 0x02
    21a2:	2b 81       	ldd	r18, Y+3	; 0x03
    21a4:	3c 81       	ldd	r19, Y+4	; 0x04
    21a6:	88 0f       	add	r24, r24
    21a8:	99 1f       	adc	r25, r25
    21aa:	f9 01       	movw	r30, r18
    21ac:	e8 0f       	add	r30, r24
    21ae:	f9 1f       	adc	r31, r25
    21b0:	11 82       	std	Z+1, r1	; 0x01
    21b2:	10 82       	st	Z, r1
    21b4:	89 81       	ldd	r24, Y+1	; 0x01
    21b6:	9a 81       	ldd	r25, Y+2	; 0x02
    21b8:	01 96       	adiw	r24, 0x01	; 1
    21ba:	9a 83       	std	Y+2, r25	; 0x02
    21bc:	89 83       	std	Y+1, r24	; 0x01
    21be:	89 81       	ldd	r24, Y+1	; 0x01
    21c0:	9a 81       	ldd	r25, Y+2	; 0x02
    21c2:	88 30       	cpi	r24, 0x08	; 8
    21c4:	91 05       	cpc	r25, r1
    21c6:	58 f3       	brcs	.-42     	; 0x219e <xlist_init+0x1c>
}
    21c8:	0f 90       	pop	r0
    21ca:	0f 90       	pop	r0
    21cc:	0f 90       	pop	r0
    21ce:	0f 90       	pop	r0
    21d0:	cf 91       	pop	r28
    21d2:	df 91       	pop	r29
    21d4:	08 95       	ret

000021d6 <xlist_head>:
//===========================================================================
//Поиск головы списка
item_t * xlist_head(xlist_t * xlist)
{
    21d6:	df 93       	push	r29
    21d8:	cf 93       	push	r28
    21da:	00 d0       	rcall	.+0      	; 0x21dc <xlist_head+0x6>
    21dc:	00 d0       	rcall	.+0      	; 0x21de <xlist_head+0x8>
    21de:	0f 92       	push	r0
    21e0:	cd b7       	in	r28, 0x3d	; 61
    21e2:	de b7       	in	r29, 0x3e	; 62
    21e4:	9d 83       	std	Y+5, r25	; 0x05
    21e6:	8c 83       	std	Y+4, r24	; 0x04
    item_t * ret_val = (item_t *)0;
    21e8:	1b 82       	std	Y+3, r1	; 0x03
    21ea:	1a 82       	std	Y+2, r1	; 0x02
    index_t index = xlist->index;
    21ec:	ec 81       	ldd	r30, Y+4	; 0x04
    21ee:	fd 81       	ldd	r31, Y+5	; 0x05
    21f0:	80 89       	ldd	r24, Z+16	; 0x10
    21f2:	89 83       	std	Y+1, r24	; 0x01

    if( index != (index_t)0 )
    21f4:	89 81       	ldd	r24, Y+1	; 0x01
    21f6:	88 23       	and	r24, r24
    21f8:	81 f0       	breq	.+32     	; 0x221a <xlist_head+0x44>
    {
        ret_val = xlist->item[ index_search( index ) ];
    21fa:	89 81       	ldd	r24, Y+1	; 0x01
    21fc:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <index_search>
    2200:	88 2f       	mov	r24, r24
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	2c 81       	ldd	r18, Y+4	; 0x04
    2206:	3d 81       	ldd	r19, Y+5	; 0x05
    2208:	88 0f       	add	r24, r24
    220a:	99 1f       	adc	r25, r25
    220c:	f9 01       	movw	r30, r18
    220e:	e8 0f       	add	r30, r24
    2210:	f9 1f       	adc	r31, r25
    2212:	80 81       	ld	r24, Z
    2214:	91 81       	ldd	r25, Z+1	; 0x01
    2216:	9b 83       	std	Y+3, r25	; 0x03
    2218:	8a 83       	std	Y+2, r24	; 0x02
    }
    return ret_val;
    221a:	8a 81       	ldd	r24, Y+2	; 0x02
    221c:	9b 81       	ldd	r25, Y+3	; 0x03
}
    221e:	0f 90       	pop	r0
    2220:	0f 90       	pop	r0
    2222:	0f 90       	pop	r0
    2224:	0f 90       	pop	r0
    2226:	0f 90       	pop	r0
    2228:	cf 91       	pop	r28
    222a:	df 91       	pop	r29
    222c:	08 95       	ret

0000222e <xlist_switch>:

//===========================================================================
// переключение указателя в массиве на следующий элемент, пригодится в планировщике
void xlist_switch(xlist_t * xlist, prio_t prio)
{
    222e:	df 93       	push	r29
    2230:	cf 93       	push	r28
    2232:	00 d0       	rcall	.+0      	; 0x2234 <xlist_switch+0x6>
    2234:	00 d0       	rcall	.+0      	; 0x2236 <xlist_switch+0x8>
    2236:	0f 92       	push	r0
    2238:	cd b7       	in	r28, 0x3d	; 61
    223a:	de b7       	in	r29, 0x3e	; 62
    223c:	9c 83       	std	Y+4, r25	; 0x04
    223e:	8b 83       	std	Y+3, r24	; 0x03
    2240:	6d 83       	std	Y+5, r22	; 0x05
    item_t ** current = xlist->item + prio;
    2242:	2b 81       	ldd	r18, Y+3	; 0x03
    2244:	3c 81       	ldd	r19, Y+4	; 0x04
    2246:	8d 81       	ldd	r24, Y+5	; 0x05
    2248:	88 2f       	mov	r24, r24
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	88 0f       	add	r24, r24
    224e:	99 1f       	adc	r25, r25
    2250:	82 0f       	add	r24, r18
    2252:	93 1f       	adc	r25, r19
    2254:	9a 83       	std	Y+2, r25	; 0x02
    2256:	89 83       	std	Y+1, r24	; 0x01
    *current = (*current)->next;
    2258:	e9 81       	ldd	r30, Y+1	; 0x01
    225a:	fa 81       	ldd	r31, Y+2	; 0x02
    225c:	01 90       	ld	r0, Z+
    225e:	f0 81       	ld	r31, Z
    2260:	e0 2d       	mov	r30, r0
    2262:	80 81       	ld	r24, Z
    2264:	91 81       	ldd	r25, Z+1	; 0x01
    2266:	e9 81       	ldd	r30, Y+1	; 0x01
    2268:	fa 81       	ldd	r31, Y+2	; 0x02
    226a:	91 83       	std	Z+1, r25	; 0x01
    226c:	80 83       	st	Z, r24
    //*current = (item_t *)*(item_t **)*(item_t ***)current;
}
    226e:	0f 90       	pop	r0
    2270:	0f 90       	pop	r0
    2272:	0f 90       	pop	r0
    2274:	0f 90       	pop	r0
    2276:	0f 90       	pop	r0
    2278:	cf 91       	pop	r28
    227a:	df 91       	pop	r29
    227c:	08 95       	ret

0000227e <raise_syscall_interrupt>:
/*
 */
#include <bugurt.h>
void raise_syscall_interrupt(void)
{
    227e:	df 93       	push	r29
    2280:	cf 93       	push	r28
    2282:	cd b7       	in	r28, 0x3d	; 61
    2284:	de b7       	in	r29, 0x3e	; 62
    R2_on();
    2286:	ab e2       	ldi	r26, 0x2B	; 43
    2288:	b0 e0       	ldi	r27, 0x00	; 0
    228a:	eb e2       	ldi	r30, 0x2B	; 43
    228c:	f0 e0       	ldi	r31, 0x00	; 0
    228e:	80 81       	ld	r24, Z
    2290:	84 60       	ori	r24, 0x04	; 4
    2292:	8c 93       	st	X, r24
    G2_off();
    2294:	ab e2       	ldi	r26, 0x2B	; 43
    2296:	b0 e0       	ldi	r27, 0x00	; 0
    2298:	eb e2       	ldi	r30, 0x2B	; 43
    229a:	f0 e0       	ldi	r31, 0x00	; 0
    229c:	80 81       	ld	r24, Z
    229e:	87 7f       	andi	r24, 0xF7	; 247
    22a0:	8c 93       	st	X, r24
    R2_off();
    22a2:	ab e2       	ldi	r26, 0x2B	; 43
    22a4:	b0 e0       	ldi	r27, 0x00	; 0
    22a6:	eb e2       	ldi	r30, 0x2B	; 43
    22a8:	f0 e0       	ldi	r31, 0x00	; 0
    22aa:	80 81       	ld	r24, Z
    22ac:	8b 7f       	andi	r24, 0xFB	; 251
    22ae:	8c 93       	st	X, r24
    G2_on();
    22b0:	ab e2       	ldi	r26, 0x2B	; 43
    22b2:	b0 e0       	ldi	r27, 0x00	; 0
    22b4:	eb e2       	ldi	r30, 0x2B	; 43
    22b6:	f0 e0       	ldi	r31, 0x00	; 0
    22b8:	80 81       	ld	r24, Z
    22ba:	88 60       	ori	r24, 0x08	; 8
    22bc:	8c 93       	st	X, r24
}
    22be:	cf 91       	pop	r28
    22c0:	df 91       	pop	r29
    22c2:	08 95       	ret

000022c4 <start_scheduler>:

void start_scheduler( void )
{
    22c4:	df 93       	push	r29
    22c6:	cf 93       	push	r28
    22c8:	cd b7       	in	r28, 0x3d	; 61
    22ca:	de b7       	in	r29, 0x3e	; 62
    TIMSK2 |= 0x02;
    22cc:	a0 e7       	ldi	r26, 0x70	; 112
    22ce:	b0 e0       	ldi	r27, 0x00	; 0
    22d0:	e0 e7       	ldi	r30, 0x70	; 112
    22d2:	f0 e0       	ldi	r31, 0x00	; 0
    22d4:	80 81       	ld	r24, Z
    22d6:	82 60       	ori	r24, 0x02	; 2
    22d8:	8c 93       	st	X, r24
    EIMSK |= 0x02;
    22da:	ad e3       	ldi	r26, 0x3D	; 61
    22dc:	b0 e0       	ldi	r27, 0x00	; 0
    22de:	ed e3       	ldi	r30, 0x3D	; 61
    22e0:	f0 e0       	ldi	r31, 0x00	; 0
    22e2:	80 81       	ld	r24, Z
    22e4:	82 60       	ori	r24, 0x02	; 2
    22e6:	8c 93       	st	X, r24
    EIFR |= 0x02;
    22e8:	ac e3       	ldi	r26, 0x3C	; 60
    22ea:	b0 e0       	ldi	r27, 0x00	; 0
    22ec:	ec e3       	ldi	r30, 0x3C	; 60
    22ee:	f0 e0       	ldi	r31, 0x00	; 0
    22f0:	80 81       	ld	r24, Z
    22f2:	82 60       	ori	r24, 0x02	; 2
    22f4:	8c 93       	st	X, r24
}
    22f6:	cf 91       	pop	r28
    22f8:	df 91       	pop	r29
    22fa:	08 95       	ret

000022fc <blink_1>:
    EIMSK &= ~0x02;
}

///----------------------------------------------------------------------------------------
void blink_1(void * t)
{
    22fc:	df 93       	push	r29
    22fe:	cf 93       	push	r28
    2300:	00 d0       	rcall	.+0      	; 0x2302 <blink_1+0x6>
    2302:	cd b7       	in	r28, 0x3d	; 61
    2304:	de b7       	in	r29, 0x3e	; 62
    2306:	9a 83       	std	Y+2, r25	; 0x02
    2308:	89 83       	std	Y+1, r24	; 0x01
    PORTB ^= 0x10;
    230a:	a5 e2       	ldi	r26, 0x25	; 37
    230c:	b0 e0       	ldi	r27, 0x00	; 0
    230e:	e5 e2       	ldi	r30, 0x25	; 37
    2310:	f0 e0       	ldi	r31, 0x00	; 0
    2312:	90 81       	ld	r25, Z
    2314:	80 e1       	ldi	r24, 0x10	; 16
    2316:	89 27       	eor	r24, r25
    2318:	8c 93       	st	X, r24
}
    231a:	0f 90       	pop	r0
    231c:	0f 90       	pop	r0
    231e:	cf 91       	pop	r28
    2320:	df 91       	pop	r29
    2322:	08 95       	ret

00002324 <blink_2>:
void blink_2(void * t)
{
    2324:	df 93       	push	r29
    2326:	cf 93       	push	r28
    2328:	00 d0       	rcall	.+0      	; 0x232a <blink_2+0x6>
    232a:	cd b7       	in	r28, 0x3d	; 61
    232c:	de b7       	in	r29, 0x3e	; 62
    232e:	9a 83       	std	Y+2, r25	; 0x02
    2330:	89 83       	std	Y+1, r24	; 0x01
    PORTB ^= 0x08;
    2332:	a5 e2       	ldi	r26, 0x25	; 37
    2334:	b0 e0       	ldi	r27, 0x00	; 0
    2336:	e5 e2       	ldi	r30, 0x25	; 37
    2338:	f0 e0       	ldi	r31, 0x00	; 0
    233a:	90 81       	ld	r25, Z
    233c:	88 e0       	ldi	r24, 0x08	; 8
    233e:	89 27       	eor	r24, r25
    2340:	8c 93       	st	X, r24
}
    2342:	0f 90       	pop	r0
    2344:	0f 90       	pop	r0
    2346:	cf 91       	pop	r28
    2348:	df 91       	pop	r29
    234a:	08 95       	ret

0000234c <blink_3>:
void blink_3(void * t)
{
    234c:	df 93       	push	r29
    234e:	cf 93       	push	r28
    2350:	00 d0       	rcall	.+0      	; 0x2352 <blink_3+0x6>
    2352:	cd b7       	in	r28, 0x3d	; 61
    2354:	de b7       	in	r29, 0x3e	; 62
    2356:	9a 83       	std	Y+2, r25	; 0x02
    2358:	89 83       	std	Y+1, r24	; 0x01
    PORTB ^= 0x04;
    235a:	a5 e2       	ldi	r26, 0x25	; 37
    235c:	b0 e0       	ldi	r27, 0x00	; 0
    235e:	e5 e2       	ldi	r30, 0x25	; 37
    2360:	f0 e0       	ldi	r31, 0x00	; 0
    2362:	90 81       	ld	r25, Z
    2364:	84 e0       	ldi	r24, 0x04	; 4
    2366:	89 27       	eor	r24, r25
    2368:	8c 93       	st	X, r24
}
    236a:	0f 90       	pop	r0
    236c:	0f 90       	pop	r0
    236e:	cf 91       	pop	r28
    2370:	df 91       	pop	r29
    2372:	08 95       	ret

00002374 <blink_4>:
void blink_4(void * t)
{
    2374:	df 93       	push	r29
    2376:	cf 93       	push	r28
    2378:	00 d0       	rcall	.+0      	; 0x237a <blink_4+0x6>
    237a:	cd b7       	in	r28, 0x3d	; 61
    237c:	de b7       	in	r29, 0x3e	; 62
    237e:	9a 83       	std	Y+2, r25	; 0x02
    2380:	89 83       	std	Y+1, r24	; 0x01
    PORTB ^= 0x02;
    2382:	a5 e2       	ldi	r26, 0x25	; 37
    2384:	b0 e0       	ldi	r27, 0x00	; 0
    2386:	e5 e2       	ldi	r30, 0x25	; 37
    2388:	f0 e0       	ldi	r31, 0x00	; 0
    238a:	90 81       	ld	r25, Z
    238c:	82 e0       	ldi	r24, 0x02	; 2
    238e:	89 27       	eor	r24, r25
    2390:	8c 93       	st	X, r24
}
    2392:	0f 90       	pop	r0
    2394:	0f 90       	pop	r0
    2396:	cf 91       	pop	r28
    2398:	df 91       	pop	r29
    239a:	08 95       	ret

0000239c <blink_12>:
void blink_11(void * t)
{
    PORTC ^= 0x01;
}
void blink_12(void * t)
{
    239c:	df 93       	push	r29
    239e:	cf 93       	push	r28
    23a0:	00 d0       	rcall	.+0      	; 0x23a2 <blink_12+0x6>
    23a2:	cd b7       	in	r28, 0x3d	; 61
    23a4:	de b7       	in	r29, 0x3e	; 62
    23a6:	9a 83       	std	Y+2, r25	; 0x02
    23a8:	89 83       	std	Y+1, r24	; 0x01
    PORTB ^= 0x20;
    23aa:	a5 e2       	ldi	r26, 0x25	; 37
    23ac:	b0 e0       	ldi	r27, 0x00	; 0
    23ae:	e5 e2       	ldi	r30, 0x25	; 37
    23b0:	f0 e0       	ldi	r31, 0x00	; 0
    23b2:	90 81       	ld	r25, Z
    23b4:	80 e2       	ldi	r24, 0x20	; 32
    23b6:	89 27       	eor	r24, r25
    23b8:	8c 93       	st	X, r24
    blink_G3();
    23ba:	ab e2       	ldi	r26, 0x2B	; 43
    23bc:	b0 e0       	ldi	r27, 0x00	; 0
    23be:	eb e2       	ldi	r30, 0x2B	; 43
    23c0:	f0 e0       	ldi	r31, 0x00	; 0
    23c2:	90 81       	ld	r25, Z
    23c4:	80 e4       	ldi	r24, 0x40	; 64
    23c6:	89 27       	eor	r24, r25
    23c8:	8c 93       	st	X, r24
    blink_R3();
    23ca:	ab e2       	ldi	r26, 0x2B	; 43
    23cc:	b0 e0       	ldi	r27, 0x00	; 0
    23ce:	eb e2       	ldi	r30, 0x2B	; 43
    23d0:	f0 e0       	ldi	r31, 0x00	; 0
    23d2:	90 81       	ld	r25, Z
    23d4:	80 e2       	ldi	r24, 0x20	; 32
    23d6:	89 27       	eor	r24, r25
    23d8:	8c 93       	st	X, r24
}
    23da:	0f 90       	pop	r0
    23dc:	0f 90       	pop	r0
    23de:	cf 91       	pop	r28
    23e0:	df 91       	pop	r29
    23e2:	08 95       	ret

000023e4 <main0>:
proc_t proc[4];
stack_t stack[4][128];
sig_t sig[2];

void main0(void * t)
{
    23e4:	df 93       	push	r29
    23e6:	cf 93       	push	r28
    23e8:	00 d0       	rcall	.+0      	; 0x23ea <main0+0x6>
    23ea:	cd b7       	in	r28, 0x3d	; 61
    23ec:	de b7       	in	r29, 0x3e	; 62
    23ee:	9a 83       	std	Y+2, r25	; 0x02
    23f0:	89 83       	std	Y+1, r24	; 0x01
    while(1)
    {
        sig_wait( (sig_t *)sig );
    23f2:	82 eb       	ldi	r24, 0xB2	; 178
    23f4:	94 e0       	ldi	r25, 0x04	; 4
    23f6:	0e 94 b5 03 	call	0x76a	; 0x76a <sig_wait>
        wait_time(50);
    23fa:	82 e3       	ldi	r24, 0x32	; 50
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	0e 94 99 10 	call	0x2132	; 0x2132 <wait_time>
    2402:	f7 cf       	rjmp	.-18     	; 0x23f2 <main0+0xe>

00002404 <main1>:
    }
}

void main1(void * t)
{
    2404:	df 93       	push	r29
    2406:	cf 93       	push	r28
    2408:	00 d0       	rcall	.+0      	; 0x240a <main1+0x6>
    240a:	cd b7       	in	r28, 0x3d	; 61
    240c:	de b7       	in	r29, 0x3e	; 62
    240e:	9a 83       	std	Y+2, r25	; 0x02
    2410:	89 83       	std	Y+1, r24	; 0x01
    while(1)
    {
        sig_wait((sig_t *)sig+1);
    2412:	83 ec       	ldi	r24, 0xC3	; 195
    2414:	94 e0       	ldi	r25, 0x04	; 4
    2416:	0e 94 b5 03 	call	0x76a	; 0x76a <sig_wait>
        wait_time(50);
    241a:	82 e3       	ldi	r24, 0x32	; 50
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	0e 94 99 10 	call	0x2132	; 0x2132 <wait_time>
    2422:	f7 cf       	rjmp	.-18     	; 0x2412 <main1+0xe>

00002424 <main2>:
    }
}

void main2(void * t)
{
    2424:	df 93       	push	r29
    2426:	cf 93       	push	r28
    2428:	00 d0       	rcall	.+0      	; 0x242a <main2+0x6>
    242a:	cd b7       	in	r28, 0x3d	; 61
    242c:	de b7       	in	r29, 0x3e	; 62
    242e:	9a 83       	std	Y+2, r25	; 0x02
    2430:	89 83       	std	Y+1, r24	; 0x01
    while(1)
    {
        sig_wait((sig_t *)sig+1);
    2432:	83 ec       	ldi	r24, 0xC3	; 195
    2434:	94 e0       	ldi	r25, 0x04	; 4
    2436:	0e 94 b5 03 	call	0x76a	; 0x76a <sig_wait>
        wait_time(50);
    243a:	82 e3       	ldi	r24, 0x32	; 50
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	0e 94 99 10 	call	0x2132	; 0x2132 <wait_time>
        sig_broadcast( (sig_t *)sig );
    2442:	82 eb       	ldi	r24, 0xB2	; 178
    2444:	94 e0       	ldi	r25, 0x04	; 4
    2446:	0e 94 04 04 	call	0x808	; 0x808 <sig_broadcast>
    244a:	f3 cf       	rjmp	.-26     	; 0x2432 <main2+0xe>

0000244c <main3>:
    244c:	df 93       	push	r29
    244e:	cf 93       	push	r28
    2450:	00 d0       	rcall	.+0      	; 0x2452 <main3+0x6>
    2452:	cd b7       	in	r28, 0x3d	; 61
    2454:	de b7       	in	r29, 0x3e	; 62
    2456:	9a 83       	std	Y+2, r25	; 0x02
    2458:	89 83       	std	Y+1, r24	; 0x01
    245a:	82 eb       	ldi	r24, 0xB2	; 178
    245c:	94 e0       	ldi	r25, 0x04	; 4
    245e:	0e 94 b5 03 	call	0x76a	; 0x76a <sig_wait>
    2462:	82 e3       	ldi	r24, 0x32	; 50
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	0e 94 99 10 	call	0x2132	; 0x2132 <wait_time>
    246a:	f7 cf       	rjmp	.-18     	; 0x245a <main3+0xe>

0000246c <idle_main>:
        wait_time(50);
    }
}

void idle_main(void *arg)
{
    246c:	df 93       	push	r29
    246e:	cf 93       	push	r28
    2470:	00 d0       	rcall	.+0      	; 0x2472 <idle_main+0x6>
    2472:	cd b7       	in	r28, 0x3d	; 61
    2474:	de b7       	in	r29, 0x3e	; 62
    2476:	9a 83       	std	Y+2, r25	; 0x02
    2478:	89 83       	std	Y+1, r24	; 0x01
    while(1)
    {
        wait_time(500);
    247a:	84 ef       	ldi	r24, 0xF4	; 244
    247c:	91 e0       	ldi	r25, 0x01	; 1
    247e:	0e 94 99 10 	call	0x2132	; 0x2132 <wait_time>
        sig_signal((sig_t *)sig + 1);
    2482:	83 ec       	ldi	r24, 0xC3	; 195
    2484:	94 e0       	ldi	r25, 0x04	; 4
    2486:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <sig_signal>
    248a:	f7 cf       	rjmp	.-18     	; 0x247a <idle_main+0xe>

0000248c <main>:
    }
}

int main(void)
{
    248c:	8f 92       	push	r8
    248e:	af 92       	push	r10
    2490:	bf 92       	push	r11
    2492:	cf 92       	push	r12
    2494:	ef 92       	push	r14
    2496:	ff 92       	push	r15
    2498:	0f 93       	push	r16
    249a:	1f 93       	push	r17
    249c:	df 93       	push	r29
    249e:	cf 93       	push	r28
    24a0:	cd b7       	in	r28, 0x3d	; 61
    24a2:	de b7       	in	r29, 0x3e	; 62
    init_bugurt();
    24a4:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <init_bugurt>

    TCCR2A = 0x02;//
    24a8:	e0 eb       	ldi	r30, 0xB0	; 176
    24aa:	f0 e0       	ldi	r31, 0x00	; 0
    24ac:	82 e0       	ldi	r24, 0x02	; 2
    24ae:	80 83       	st	Z, r24
    TCCR2B = 0x05;// prescaler=128
    24b0:	e1 eb       	ldi	r30, 0xB1	; 177
    24b2:	f0 e0       	ldi	r31, 0x00	; 0
    24b4:	85 e0       	ldi	r24, 0x05	; 5
    24b6:	80 83       	st	Z, r24
    OCR2A  = 124;
    24b8:	e3 eb       	ldi	r30, 0xB3	; 179
    24ba:	f0 e0       	ldi	r31, 0x00	; 0
    24bc:	8c e7       	ldi	r24, 0x7C	; 124
    24be:	80 83       	st	Z, r24
    OCR2B  = 0x00;
    24c0:	e4 eb       	ldi	r30, 0xB4	; 180
    24c2:	f0 e0       	ldi	r31, 0x00	; 0
    24c4:	10 82       	st	Z, r1
    TIMSK2 = 0x00; // shceduler not started
    24c6:	e0 e7       	ldi	r30, 0x70	; 112
    24c8:	f0 e0       	ldi	r31, 0x00	; 0
    24ca:	10 82       	st	Z, r1
    TIFR2  = 0x00;
    24cc:	e7 e3       	ldi	r30, 0x37	; 55
    24ce:	f0 e0       	ldi	r31, 0x00	; 0
    24d0:	10 82       	st	Z, r1

    EICRA = 0x08; //falling edge
    24d2:	e9 e6       	ldi	r30, 0x69	; 105
    24d4:	f0 e0       	ldi	r31, 0x00	; 0
    24d6:	88 e0       	ldi	r24, 0x08	; 8
    24d8:	80 83       	st	Z, r24
    EIMSK = 0x00; //resched generates int1, mask 0x02
    24da:	ed e3       	ldi	r30, 0x3D	; 61
    24dc:	f0 e0       	ldi	r31, 0x00	; 0
    24de:	10 82       	st	Z, r1

    DDRB = 0x3F;
    24e0:	e4 e2       	ldi	r30, 0x24	; 36
    24e2:	f0 e0       	ldi	r31, 0x00	; 0
    24e4:	8f e3       	ldi	r24, 0x3F	; 63
    24e6:	80 83       	st	Z, r24
    PORTB = 0x20;
    24e8:	e5 e2       	ldi	r30, 0x25	; 37
    24ea:	f0 e0       	ldi	r31, 0x00	; 0
    24ec:	80 e2       	ldi	r24, 0x20	; 32
    24ee:	80 83       	st	Z, r24
    DDRC = 0x3F;
    24f0:	e7 e2       	ldi	r30, 0x27	; 39
    24f2:	f0 e0       	ldi	r31, 0x00	; 0
    24f4:	8f e3       	ldi	r24, 0x3F	; 63
    24f6:	80 83       	st	Z, r24
    PORTC = 0x00;
    24f8:	e8 e2       	ldi	r30, 0x28	; 40
    24fa:	f0 e0       	ldi	r31, 0x00	; 0
    24fc:	10 82       	st	Z, r1
    DDRD = 0xFE;
    24fe:	ea e2       	ldi	r30, 0x2A	; 42
    2500:	f0 e0       	ldi	r31, 0x00	; 0
    2502:	8e ef       	ldi	r24, 0xFE	; 254
    2504:	80 83       	st	Z, r24
    PORTD = 0x00;
    2506:	eb e2       	ldi	r30, 0x2B	; 43
    2508:	f0 e0       	ldi	r31, 0x00	; 0
    250a:	10 82       	st	Z, r1

    G1_on();
    250c:	ab e2       	ldi	r26, 0x2B	; 43
    250e:	b0 e0       	ldi	r27, 0x00	; 0
    2510:	eb e2       	ldi	r30, 0x2B	; 43
    2512:	f0 e0       	ldi	r31, 0x00	; 0
    2514:	80 81       	ld	r24, Z
    2516:	80 61       	ori	r24, 0x10	; 16
    2518:	8c 93       	st	X, r24
    G2_on();
    251a:	ab e2       	ldi	r26, 0x2B	; 43
    251c:	b0 e0       	ldi	r27, 0x00	; 0
    251e:	eb e2       	ldi	r30, 0x2B	; 43
    2520:	f0 e0       	ldi	r31, 0x00	; 0
    2522:	80 81       	ld	r24, Z
    2524:	88 60       	ori	r24, 0x08	; 8
    2526:	8c 93       	st	X, r24
    R3_on();
    2528:	ab e2       	ldi	r26, 0x2B	; 43
    252a:	b0 e0       	ldi	r27, 0x00	; 0
    252c:	eb e2       	ldi	r30, 0x2B	; 43
    252e:	f0 e0       	ldi	r31, 0x00	; 0
    2530:	80 81       	ld	r24, Z
    2532:	80 62       	ori	r24, 0x20	; 32
    2534:	8c 93       	st	X, r24

    proc_init_isr(&proc[0], main0, blink_1, blink_1, 0, &stack[0][127], 1, 2, 0);
    2536:	82 eb       	ldi	r24, 0xB2	; 178
    2538:	92 e0       	ldi	r25, 0x02	; 2
    253a:	dc 01       	movw	r26, r24
    253c:	a1 58       	subi	r26, 0x81	; 129
    253e:	bf 4f       	sbci	r27, 0xFF	; 255
    2540:	8a ef       	ldi	r24, 0xFA	; 250
    2542:	91 e0       	ldi	r25, 0x01	; 1
    2544:	22 ef       	ldi	r18, 0xF2	; 242
    2546:	31 e1       	ldi	r19, 0x11	; 17
    2548:	4e e7       	ldi	r20, 0x7E	; 126
    254a:	51 e1       	ldi	r21, 0x11	; 17
    254c:	ee e7       	ldi	r30, 0x7E	; 126
    254e:	f1 e1       	ldi	r31, 0x11	; 17
    2550:	b9 01       	movw	r22, r18
    2552:	9f 01       	movw	r18, r30
    2554:	00 e0       	ldi	r16, 0x00	; 0
    2556:	10 e0       	ldi	r17, 0x00	; 0
    2558:	7d 01       	movw	r14, r26
    255a:	cc 24       	eor	r12, r12
    255c:	c3 94       	inc	r12
    255e:	aa 24       	eor	r10, r10
    2560:	bb 24       	eor	r11, r11
    2562:	68 94       	set
    2564:	a1 f8       	bld	r10, 1
    2566:	88 24       	eor	r8, r8
    2568:	0e 94 89 0b 	call	0x1712	; 0x1712 <proc_init_isr>
    proc_init_isr(&proc[1], main1, blink_2, blink_2, 0, &stack[1][127], 2, 3, 0);
    256c:	82 eb       	ldi	r24, 0xB2	; 178
    256e:	92 e0       	ldi	r25, 0x02	; 2
    2570:	dc 01       	movw	r26, r24
    2572:	a1 50       	subi	r26, 0x01	; 1
    2574:	bf 4f       	sbci	r27, 0xFF	; 255
    2576:	88 e2       	ldi	r24, 0x28	; 40
    2578:	92 e0       	ldi	r25, 0x02	; 2
    257a:	22 e0       	ldi	r18, 0x02	; 2
    257c:	32 e1       	ldi	r19, 0x12	; 18
    257e:	42 e9       	ldi	r20, 0x92	; 146
    2580:	51 e1       	ldi	r21, 0x11	; 17
    2582:	e2 e9       	ldi	r30, 0x92	; 146
    2584:	f1 e1       	ldi	r31, 0x11	; 17
    2586:	b9 01       	movw	r22, r18
    2588:	9f 01       	movw	r18, r30
    258a:	00 e0       	ldi	r16, 0x00	; 0
    258c:	10 e0       	ldi	r17, 0x00	; 0
    258e:	7d 01       	movw	r14, r26
    2590:	cc 24       	eor	r12, r12
    2592:	68 94       	set
    2594:	c1 f8       	bld	r12, 1
    2596:	0f 2e       	mov	r0, r31
    2598:	f3 e0       	ldi	r31, 0x03	; 3
    259a:	af 2e       	mov	r10, r31
    259c:	bb 24       	eor	r11, r11
    259e:	f0 2d       	mov	r31, r0
    25a0:	88 24       	eor	r8, r8
    25a2:	0e 94 89 0b 	call	0x1712	; 0x1712 <proc_init_isr>
    proc_init_isr(&proc[2], main2, blink_3, blink_3, 0, &stack[2][127], 2, 4, 0);// Типа реального времени
    25a6:	82 eb       	ldi	r24, 0xB2	; 178
    25a8:	92 e0       	ldi	r25, 0x02	; 2
    25aa:	dc 01       	movw	r26, r24
    25ac:	a1 58       	subi	r26, 0x81	; 129
    25ae:	be 4f       	sbci	r27, 0xFE	; 254
    25b0:	86 e5       	ldi	r24, 0x56	; 86
    25b2:	92 e0       	ldi	r25, 0x02	; 2
    25b4:	22 e1       	ldi	r18, 0x12	; 18
    25b6:	32 e1       	ldi	r19, 0x12	; 18
    25b8:	46 ea       	ldi	r20, 0xA6	; 166
    25ba:	51 e1       	ldi	r21, 0x11	; 17
    25bc:	e6 ea       	ldi	r30, 0xA6	; 166
    25be:	f1 e1       	ldi	r31, 0x11	; 17
    25c0:	b9 01       	movw	r22, r18
    25c2:	9f 01       	movw	r18, r30
    25c4:	00 e0       	ldi	r16, 0x00	; 0
    25c6:	10 e0       	ldi	r17, 0x00	; 0
    25c8:	7d 01       	movw	r14, r26
    25ca:	cc 24       	eor	r12, r12
    25cc:	68 94       	set
    25ce:	c1 f8       	bld	r12, 1
    25d0:	aa 24       	eor	r10, r10
    25d2:	bb 24       	eor	r11, r11
    25d4:	68 94       	set
    25d6:	a2 f8       	bld	r10, 2
    25d8:	88 24       	eor	r8, r8
    25da:	0e 94 89 0b 	call	0x1712	; 0x1712 <proc_init_isr>
    proc_init_isr(&proc[3], main3, blink_4, blink_4, 0, &stack[3][127], 3, 4, 0);
    25de:	82 eb       	ldi	r24, 0xB2	; 178
    25e0:	92 e0       	ldi	r25, 0x02	; 2
    25e2:	dc 01       	movw	r26, r24
    25e4:	a1 50       	subi	r26, 0x01	; 1
    25e6:	be 4f       	sbci	r27, 0xFE	; 254
    25e8:	84 e8       	ldi	r24, 0x84	; 132
    25ea:	92 e0       	ldi	r25, 0x02	; 2
    25ec:	26 e2       	ldi	r18, 0x26	; 38
    25ee:	32 e1       	ldi	r19, 0x12	; 18
    25f0:	4a eb       	ldi	r20, 0xBA	; 186
    25f2:	51 e1       	ldi	r21, 0x11	; 17
    25f4:	ea eb       	ldi	r30, 0xBA	; 186
    25f6:	f1 e1       	ldi	r31, 0x11	; 17
    25f8:	b9 01       	movw	r22, r18
    25fa:	9f 01       	movw	r18, r30
    25fc:	00 e0       	ldi	r16, 0x00	; 0
    25fe:	10 e0       	ldi	r17, 0x00	; 0
    2600:	7d 01       	movw	r14, r26
    2602:	0f 2e       	mov	r0, r31
    2604:	f3 e0       	ldi	r31, 0x03	; 3
    2606:	cf 2e       	mov	r12, r31
    2608:	f0 2d       	mov	r31, r0
    260a:	aa 24       	eor	r10, r10
    260c:	bb 24       	eor	r11, r11
    260e:	68 94       	set
    2610:	a2 f8       	bld	r10, 2
    2612:	88 24       	eor	r8, r8
    2614:	0e 94 89 0b 	call	0x1712	; 0x1712 <proc_init_isr>
    kernel.idle.rs_hook = blink_12;
    2618:	8e ec       	ldi	r24, 0xCE	; 206
    261a:	91 e1       	ldi	r25, 0x11	; 17
    261c:	90 93 ef 01 	sts	0x01EF, r25
    2620:	80 93 ee 01 	sts	0x01EE, r24
    kernel.idle.sv_hook = blink_12;
    2624:	8e ec       	ldi	r24, 0xCE	; 206
    2626:	91 e1       	ldi	r25, 0x11	; 17
    2628:	90 93 ed 01 	sts	0x01ED, r25
    262c:	80 93 ec 01 	sts	0x01EC, r24

    proc_run_isr(&proc[0]);
    2630:	8a ef       	ldi	r24, 0xFA	; 250
    2632:	91 e0       	ldi	r25, 0x01	; 1
    2634:	0e 94 2f 0c 	call	0x185e	; 0x185e <proc_run_isr>
    proc_run_isr(&proc[1]);
    2638:	88 e2       	ldi	r24, 0x28	; 40
    263a:	92 e0       	ldi	r25, 0x02	; 2
    263c:	0e 94 2f 0c 	call	0x185e	; 0x185e <proc_run_isr>
    proc_run_isr(&proc[2]);
    2640:	86 e5       	ldi	r24, 0x56	; 86
    2642:	92 e0       	ldi	r25, 0x02	; 2
    2644:	0e 94 2f 0c 	call	0x185e	; 0x185e <proc_run_isr>
    proc_run_isr(&proc[3]);
    2648:	84 e8       	ldi	r24, 0x84	; 132
    264a:	92 e0       	ldi	r25, 0x02	; 2
    264c:	0e 94 2f 0c 	call	0x185e	; 0x185e <proc_run_isr>

    sig_init_isr( (sig_t *)sig );
    2650:	82 eb       	ldi	r24, 0xB2	; 178
    2652:	94 e0       	ldi	r25, 0x04	; 4
    2654:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <sig_init_isr>
    sig_init_isr( (sig_t *)sig+1 );
    2658:	83 ec       	ldi	r24, 0xC3	; 195
    265a:	94 e0       	ldi	r25, 0x04	; 4
    265c:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <sig_init_isr>



    start_bugurt();
    2660:	0e 94 a0 01 	call	0x340	; 0x340 <start_bugurt>
    // Insert code

    return 0;
    2664:	80 e0       	ldi	r24, 0x00	; 0
    2666:	90 e0       	ldi	r25, 0x00	; 0
}
    2668:	cf 91       	pop	r28
    266a:	df 91       	pop	r29
    266c:	1f 91       	pop	r17
    266e:	0f 91       	pop	r16
    2670:	ff 90       	pop	r15
    2672:	ef 90       	pop	r14
    2674:	cf 90       	pop	r12
    2676:	bf 90       	pop	r11
    2678:	af 90       	pop	r10
    267a:	8f 90       	pop	r8
    267c:	08 95       	ret

0000267e <_exit>:
    267e:	f8 94       	cli

00002680 <__stop_program>:
    2680:	ff cf       	rjmp	.-2      	; 0x2680 <__stop_program>
