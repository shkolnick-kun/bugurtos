
bin/Debug/arduino328-test-1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  000027fe  00002892  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000027fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000033b  00800132  00800132  000028c4  2**0
                  ALLOC
  3 .stab         00007530  00000000  00000000  000028c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000037b3  00000000  00000000  00009df4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__vector_7>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ee ef       	ldi	r30, 0xFE	; 254
      7c:	f7 e2       	ldi	r31, 0x27	; 39
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a2 33       	cpi	r26, 0x32	; 50
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	14 e0       	ldi	r17, 0x04	; 4
      8c:	a2 e3       	ldi	r26, 0x32	; 50
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ad 36       	cpi	r26, 0x6D	; 109
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 05 13 	call	0x260a	; 0x260a <main>
      9e:	0c 94 fd 13 	jmp	0x27fa	; 0x27fa <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <bugurt_save_context>:
      a6:	2f 92       	push	r2
      a8:	2f b6       	in	r2, 0x3f	; 63
      aa:	2f 92       	push	r2
      ac:	3f 92       	push	r3
      ae:	4f 92       	push	r4
      b0:	5f 92       	push	r5
      b2:	6f 92       	push	r6
      b4:	7f 92       	push	r7
      b6:	8f 92       	push	r8
      b8:	9f 92       	push	r9
      ba:	af 92       	push	r10
      bc:	bf 92       	push	r11
      be:	cf 92       	push	r12
      c0:	df 92       	push	r13
      c2:	ef 92       	push	r14
      c4:	ff 92       	push	r15
      c6:	0f 93       	push	r16
      c8:	1f 93       	push	r17
      ca:	2f 93       	push	r18
      cc:	3f 93       	push	r19
      ce:	4f 93       	push	r20
      d0:	5f 93       	push	r21
      d2:	6f 93       	push	r22
      d4:	7f 93       	push	r23
      d6:	8f 93       	push	r24
      d8:	9f 93       	push	r25
      da:	af 93       	push	r26
      dc:	bf 93       	push	r27
      de:	cf 93       	push	r28
      e0:	df 93       	push	r29
      e2:	ef 93       	push	r30
      e4:	ff 93       	push	r31
      e6:	ed b7       	in	r30, 0x3d	; 61
      e8:	fe b7       	in	r31, 0x3e	; 62
      ea:	21 a1       	ldd	r18, Z+33	; 0x21
      ec:	30 a1       	ldd	r19, Z+32	; 0x20
      ee:	01 a2       	std	Z+33, r0	; 0x21
      f0:	10 a2       	std	Z+32, r1	; 0x20
      f2:	11 24       	eor	r1, r1
      f4:	8d b7       	in	r24, 0x3d	; 61
      f6:	9e b7       	in	r25, 0x3e	; 62
      f8:	2f 93       	push	r18
      fa:	3f 93       	push	r19
      fc:	08 95       	ret

000000fe <bugurt_restore_context>:
      fe:	3f 91       	pop	r19
     100:	2f 91       	pop	r18
     102:	9e bf       	out	0x3e, r25	; 62
     104:	8d bf       	out	0x3d, r24	; 61
     106:	fe b7       	in	r31, 0x3e	; 62
     108:	ed b7       	in	r30, 0x3d	; 61
     10a:	10 a0       	ldd	r1, Z+32	; 0x20
     10c:	01 a0       	ldd	r0, Z+33	; 0x21
     10e:	30 a3       	std	Z+32, r19	; 0x20
     110:	21 a3       	std	Z+33, r18	; 0x21
     112:	ff 91       	pop	r31
     114:	ef 91       	pop	r30
     116:	df 91       	pop	r29
     118:	cf 91       	pop	r28
     11a:	bf 91       	pop	r27
     11c:	af 91       	pop	r26
     11e:	9f 91       	pop	r25
     120:	8f 91       	pop	r24
     122:	7f 91       	pop	r23
     124:	6f 91       	pop	r22
     126:	5f 91       	pop	r21
     128:	4f 91       	pop	r20
     12a:	3f 91       	pop	r19
     12c:	2f 91       	pop	r18
     12e:	1f 91       	pop	r17
     130:	0f 91       	pop	r16
     132:	ff 90       	pop	r15
     134:	ef 90       	pop	r14
     136:	df 90       	pop	r13
     138:	cf 90       	pop	r12
     13a:	bf 90       	pop	r11
     13c:	af 90       	pop	r10
     13e:	9f 90       	pop	r9
     140:	8f 90       	pop	r8
     142:	7f 90       	pop	r7
     144:	6f 90       	pop	r6
     146:	5f 90       	pop	r5
     148:	4f 90       	pop	r4
     14a:	3f 90       	pop	r3
     14c:	2f 90       	pop	r2
     14e:	2f be       	out	0x3f, r2	; 63
     150:	2f 90       	pop	r2
     152:	08 95       	ret

00000154 <bugurt_set_stack_pointer>:
     154:	1f 90       	pop	r1
     156:	0f 90       	pop	r0
     158:	9e bf       	out	0x3e, r25	; 62
     15a:	8d bf       	out	0x3d, r24	; 61
     15c:	0f 92       	push	r0
     15e:	1f 92       	push	r1
     160:	11 24       	eor	r1, r1
     162:	08 95       	ret

00000164 <proc_stack_init>:
#include"bugurt_kernel.h"

// Платформеннозависимый код
// Просто функции, специфичные для AVR
stack_t * proc_stack_init(stack_t * sstart, code_t code, void * arg)
{
     164:	df 93       	push	r29
     166:	cf 93       	push	r28
     168:	cd b7       	in	r28, 0x3d	; 61
     16a:	de b7       	in	r29, 0x3e	; 62
     16c:	2a 97       	sbiw	r28, 0x0a	; 10
     16e:	0f b6       	in	r0, 0x3f	; 63
     170:	f8 94       	cli
     172:	de bf       	out	0x3e, r29	; 62
     174:	0f be       	out	0x3f, r0	; 63
     176:	cd bf       	out	0x3d, r28	; 61
     178:	9e 83       	std	Y+6, r25	; 0x06
     17a:	8d 83       	std	Y+5, r24	; 0x05
     17c:	78 87       	std	Y+8, r23	; 0x08
     17e:	6f 83       	std	Y+7, r22	; 0x07
     180:	5a 87       	std	Y+10, r21	; 0x0a
     182:	49 87       	std	Y+9, r20	; 0x09
    stack_t * tos = (stack_t *)sstart;
     184:	8d 81       	ldd	r24, Y+5	; 0x05
     186:	9e 81       	ldd	r25, Y+6	; 0x06
     188:	9c 83       	std	Y+4, r25	; 0x04
     18a:	8b 83       	std	Y+3, r24	; 0x03
    // return address
    unsigned short tmp = (unsigned short)code;
     18c:	8f 81       	ldd	r24, Y+7	; 0x07
     18e:	98 85       	ldd	r25, Y+8	; 0x08
     190:	9a 83       	std	Y+2, r25	; 0x02
     192:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (stack_t)(tmp&(unsigned short)0x00ff);
     194:	89 81       	ldd	r24, Y+1	; 0x01
     196:	eb 81       	ldd	r30, Y+3	; 0x03
     198:	fc 81       	ldd	r31, Y+4	; 0x04
     19a:	80 83       	st	Z, r24
     19c:	8b 81       	ldd	r24, Y+3	; 0x03
     19e:	9c 81       	ldd	r25, Y+4	; 0x04
     1a0:	01 97       	sbiw	r24, 0x01	; 1
     1a2:	9c 83       	std	Y+4, r25	; 0x04
     1a4:	8b 83       	std	Y+3, r24	; 0x03
    tmp>>=8;
     1a6:	89 81       	ldd	r24, Y+1	; 0x01
     1a8:	9a 81       	ldd	r25, Y+2	; 0x02
     1aa:	89 2f       	mov	r24, r25
     1ac:	99 27       	eor	r25, r25
     1ae:	9a 83       	std	Y+2, r25	; 0x02
     1b0:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (stack_t)(tmp&(unsigned short)0x00ff);
     1b2:	89 81       	ldd	r24, Y+1	; 0x01
     1b4:	eb 81       	ldd	r30, Y+3	; 0x03
     1b6:	fc 81       	ldd	r31, Y+4	; 0x04
     1b8:	80 83       	st	Z, r24
     1ba:	8b 81       	ldd	r24, Y+3	; 0x03
     1bc:	9c 81       	ldd	r25, Y+4	; 0x04
     1be:	01 97       	sbiw	r24, 0x01	; 1
     1c0:	9c 83       	std	Y+4, r25	; 0x04
     1c2:	8b 83       	std	Y+3, r24	; 0x03

    // s
    *tos-- = 0x00;
     1c4:	eb 81       	ldd	r30, Y+3	; 0x03
     1c6:	fc 81       	ldd	r31, Y+4	; 0x04
     1c8:	10 82       	st	Z, r1
     1ca:	8b 81       	ldd	r24, Y+3	; 0x03
     1cc:	9c 81       	ldd	r25, Y+4	; 0x04
     1ce:	01 97       	sbiw	r24, 0x01	; 1
     1d0:	9c 83       	std	Y+4, r25	; 0x04
     1d2:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x00;// r1 must B 0
     1d4:	eb 81       	ldd	r30, Y+3	; 0x03
     1d6:	fc 81       	ldd	r31, Y+4	; 0x04
     1d8:	10 82       	st	Z, r1
     1da:	8b 81       	ldd	r24, Y+3	; 0x03
     1dc:	9c 81       	ldd	r25, Y+4	; 0x04
     1de:	01 97       	sbiw	r24, 0x01	; 1
     1e0:	9c 83       	std	Y+4, r25	; 0x04
     1e2:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x02;// r2
     1e4:	eb 81       	ldd	r30, Y+3	; 0x03
     1e6:	fc 81       	ldd	r31, Y+4	; 0x04
     1e8:	82 e0       	ldi	r24, 0x02	; 2
     1ea:	80 83       	st	Z, r24
     1ec:	8b 81       	ldd	r24, Y+3	; 0x03
     1ee:	9c 81       	ldd	r25, Y+4	; 0x04
     1f0:	01 97       	sbiw	r24, 0x01	; 1
     1f2:	9c 83       	std	Y+4, r25	; 0x04
     1f4:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x80;// SREG: enable interrupts
     1f6:	eb 81       	ldd	r30, Y+3	; 0x03
     1f8:	fc 81       	ldd	r31, Y+4	; 0x04
     1fa:	80 e8       	ldi	r24, 0x80	; 128
     1fc:	80 83       	st	Z, r24
     1fe:	8b 81       	ldd	r24, Y+3	; 0x03
     200:	9c 81       	ldd	r25, Y+4	; 0x04
     202:	01 97       	sbiw	r24, 0x01	; 1
     204:	9c 83       	std	Y+4, r25	; 0x04
     206:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x03;
     208:	eb 81       	ldd	r30, Y+3	; 0x03
     20a:	fc 81       	ldd	r31, Y+4	; 0x04
     20c:	83 e0       	ldi	r24, 0x03	; 3
     20e:	80 83       	st	Z, r24
     210:	8b 81       	ldd	r24, Y+3	; 0x03
     212:	9c 81       	ldd	r25, Y+4	; 0x04
     214:	01 97       	sbiw	r24, 0x01	; 1
     216:	9c 83       	std	Y+4, r25	; 0x04
     218:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x04;
     21a:	eb 81       	ldd	r30, Y+3	; 0x03
     21c:	fc 81       	ldd	r31, Y+4	; 0x04
     21e:	84 e0       	ldi	r24, 0x04	; 4
     220:	80 83       	st	Z, r24
     222:	8b 81       	ldd	r24, Y+3	; 0x03
     224:	9c 81       	ldd	r25, Y+4	; 0x04
     226:	01 97       	sbiw	r24, 0x01	; 1
     228:	9c 83       	std	Y+4, r25	; 0x04
     22a:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x05;
     22c:	eb 81       	ldd	r30, Y+3	; 0x03
     22e:	fc 81       	ldd	r31, Y+4	; 0x04
     230:	85 e0       	ldi	r24, 0x05	; 5
     232:	80 83       	st	Z, r24
     234:	8b 81       	ldd	r24, Y+3	; 0x03
     236:	9c 81       	ldd	r25, Y+4	; 0x04
     238:	01 97       	sbiw	r24, 0x01	; 1
     23a:	9c 83       	std	Y+4, r25	; 0x04
     23c:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x06;
     23e:	eb 81       	ldd	r30, Y+3	; 0x03
     240:	fc 81       	ldd	r31, Y+4	; 0x04
     242:	86 e0       	ldi	r24, 0x06	; 6
     244:	80 83       	st	Z, r24
     246:	8b 81       	ldd	r24, Y+3	; 0x03
     248:	9c 81       	ldd	r25, Y+4	; 0x04
     24a:	01 97       	sbiw	r24, 0x01	; 1
     24c:	9c 83       	std	Y+4, r25	; 0x04
     24e:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x07;
     250:	eb 81       	ldd	r30, Y+3	; 0x03
     252:	fc 81       	ldd	r31, Y+4	; 0x04
     254:	87 e0       	ldi	r24, 0x07	; 7
     256:	80 83       	st	Z, r24
     258:	8b 81       	ldd	r24, Y+3	; 0x03
     25a:	9c 81       	ldd	r25, Y+4	; 0x04
     25c:	01 97       	sbiw	r24, 0x01	; 1
     25e:	9c 83       	std	Y+4, r25	; 0x04
     260:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x08;
     262:	eb 81       	ldd	r30, Y+3	; 0x03
     264:	fc 81       	ldd	r31, Y+4	; 0x04
     266:	88 e0       	ldi	r24, 0x08	; 8
     268:	80 83       	st	Z, r24
     26a:	8b 81       	ldd	r24, Y+3	; 0x03
     26c:	9c 81       	ldd	r25, Y+4	; 0x04
     26e:	01 97       	sbiw	r24, 0x01	; 1
     270:	9c 83       	std	Y+4, r25	; 0x04
     272:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x09;
     274:	eb 81       	ldd	r30, Y+3	; 0x03
     276:	fc 81       	ldd	r31, Y+4	; 0x04
     278:	89 e0       	ldi	r24, 0x09	; 9
     27a:	80 83       	st	Z, r24
     27c:	8b 81       	ldd	r24, Y+3	; 0x03
     27e:	9c 81       	ldd	r25, Y+4	; 0x04
     280:	01 97       	sbiw	r24, 0x01	; 1
     282:	9c 83       	std	Y+4, r25	; 0x04
     284:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x10;
     286:	eb 81       	ldd	r30, Y+3	; 0x03
     288:	fc 81       	ldd	r31, Y+4	; 0x04
     28a:	80 e1       	ldi	r24, 0x10	; 16
     28c:	80 83       	st	Z, r24
     28e:	8b 81       	ldd	r24, Y+3	; 0x03
     290:	9c 81       	ldd	r25, Y+4	; 0x04
     292:	01 97       	sbiw	r24, 0x01	; 1
     294:	9c 83       	std	Y+4, r25	; 0x04
     296:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x11;
     298:	eb 81       	ldd	r30, Y+3	; 0x03
     29a:	fc 81       	ldd	r31, Y+4	; 0x04
     29c:	81 e1       	ldi	r24, 0x11	; 17
     29e:	80 83       	st	Z, r24
     2a0:	8b 81       	ldd	r24, Y+3	; 0x03
     2a2:	9c 81       	ldd	r25, Y+4	; 0x04
     2a4:	01 97       	sbiw	r24, 0x01	; 1
     2a6:	9c 83       	std	Y+4, r25	; 0x04
     2a8:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x12;
     2aa:	eb 81       	ldd	r30, Y+3	; 0x03
     2ac:	fc 81       	ldd	r31, Y+4	; 0x04
     2ae:	82 e1       	ldi	r24, 0x12	; 18
     2b0:	80 83       	st	Z, r24
     2b2:	8b 81       	ldd	r24, Y+3	; 0x03
     2b4:	9c 81       	ldd	r25, Y+4	; 0x04
     2b6:	01 97       	sbiw	r24, 0x01	; 1
     2b8:	9c 83       	std	Y+4, r25	; 0x04
     2ba:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x13;
     2bc:	eb 81       	ldd	r30, Y+3	; 0x03
     2be:	fc 81       	ldd	r31, Y+4	; 0x04
     2c0:	83 e1       	ldi	r24, 0x13	; 19
     2c2:	80 83       	st	Z, r24
     2c4:	8b 81       	ldd	r24, Y+3	; 0x03
     2c6:	9c 81       	ldd	r25, Y+4	; 0x04
     2c8:	01 97       	sbiw	r24, 0x01	; 1
     2ca:	9c 83       	std	Y+4, r25	; 0x04
     2cc:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x14;
     2ce:	eb 81       	ldd	r30, Y+3	; 0x03
     2d0:	fc 81       	ldd	r31, Y+4	; 0x04
     2d2:	84 e1       	ldi	r24, 0x14	; 20
     2d4:	80 83       	st	Z, r24
     2d6:	8b 81       	ldd	r24, Y+3	; 0x03
     2d8:	9c 81       	ldd	r25, Y+4	; 0x04
     2da:	01 97       	sbiw	r24, 0x01	; 1
     2dc:	9c 83       	std	Y+4, r25	; 0x04
     2de:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x15;
     2e0:	eb 81       	ldd	r30, Y+3	; 0x03
     2e2:	fc 81       	ldd	r31, Y+4	; 0x04
     2e4:	85 e1       	ldi	r24, 0x15	; 21
     2e6:	80 83       	st	Z, r24
     2e8:	8b 81       	ldd	r24, Y+3	; 0x03
     2ea:	9c 81       	ldd	r25, Y+4	; 0x04
     2ec:	01 97       	sbiw	r24, 0x01	; 1
     2ee:	9c 83       	std	Y+4, r25	; 0x04
     2f0:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x16;
     2f2:	eb 81       	ldd	r30, Y+3	; 0x03
     2f4:	fc 81       	ldd	r31, Y+4	; 0x04
     2f6:	86 e1       	ldi	r24, 0x16	; 22
     2f8:	80 83       	st	Z, r24
     2fa:	8b 81       	ldd	r24, Y+3	; 0x03
     2fc:	9c 81       	ldd	r25, Y+4	; 0x04
     2fe:	01 97       	sbiw	r24, 0x01	; 1
     300:	9c 83       	std	Y+4, r25	; 0x04
     302:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x17;
     304:	eb 81       	ldd	r30, Y+3	; 0x03
     306:	fc 81       	ldd	r31, Y+4	; 0x04
     308:	87 e1       	ldi	r24, 0x17	; 23
     30a:	80 83       	st	Z, r24
     30c:	8b 81       	ldd	r24, Y+3	; 0x03
     30e:	9c 81       	ldd	r25, Y+4	; 0x04
     310:	01 97       	sbiw	r24, 0x01	; 1
     312:	9c 83       	std	Y+4, r25	; 0x04
     314:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x18;
     316:	eb 81       	ldd	r30, Y+3	; 0x03
     318:	fc 81       	ldd	r31, Y+4	; 0x04
     31a:	88 e1       	ldi	r24, 0x18	; 24
     31c:	80 83       	st	Z, r24
     31e:	8b 81       	ldd	r24, Y+3	; 0x03
     320:	9c 81       	ldd	r25, Y+4	; 0x04
     322:	01 97       	sbiw	r24, 0x01	; 1
     324:	9c 83       	std	Y+4, r25	; 0x04
     326:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x19;
     328:	eb 81       	ldd	r30, Y+3	; 0x03
     32a:	fc 81       	ldd	r31, Y+4	; 0x04
     32c:	89 e1       	ldi	r24, 0x19	; 25
     32e:	80 83       	st	Z, r24
     330:	8b 81       	ldd	r24, Y+3	; 0x03
     332:	9c 81       	ldd	r25, Y+4	; 0x04
     334:	01 97       	sbiw	r24, 0x01	; 1
     336:	9c 83       	std	Y+4, r25	; 0x04
     338:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x20;
     33a:	eb 81       	ldd	r30, Y+3	; 0x03
     33c:	fc 81       	ldd	r31, Y+4	; 0x04
     33e:	80 e2       	ldi	r24, 0x20	; 32
     340:	80 83       	st	Z, r24
     342:	8b 81       	ldd	r24, Y+3	; 0x03
     344:	9c 81       	ldd	r25, Y+4	; 0x04
     346:	01 97       	sbiw	r24, 0x01	; 1
     348:	9c 83       	std	Y+4, r25	; 0x04
     34a:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x21;
     34c:	eb 81       	ldd	r30, Y+3	; 0x03
     34e:	fc 81       	ldd	r31, Y+4	; 0x04
     350:	81 e2       	ldi	r24, 0x21	; 33
     352:	80 83       	st	Z, r24
     354:	8b 81       	ldd	r24, Y+3	; 0x03
     356:	9c 81       	ldd	r25, Y+4	; 0x04
     358:	01 97       	sbiw	r24, 0x01	; 1
     35a:	9c 83       	std	Y+4, r25	; 0x04
     35c:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x22;
     35e:	eb 81       	ldd	r30, Y+3	; 0x03
     360:	fc 81       	ldd	r31, Y+4	; 0x04
     362:	82 e2       	ldi	r24, 0x22	; 34
     364:	80 83       	st	Z, r24
     366:	8b 81       	ldd	r24, Y+3	; 0x03
     368:	9c 81       	ldd	r25, Y+4	; 0x04
     36a:	01 97       	sbiw	r24, 0x01	; 1
     36c:	9c 83       	std	Y+4, r25	; 0x04
     36e:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x23;
     370:	eb 81       	ldd	r30, Y+3	; 0x03
     372:	fc 81       	ldd	r31, Y+4	; 0x04
     374:	83 e2       	ldi	r24, 0x23	; 35
     376:	80 83       	st	Z, r24
     378:	8b 81       	ldd	r24, Y+3	; 0x03
     37a:	9c 81       	ldd	r25, Y+4	; 0x04
     37c:	01 97       	sbiw	r24, 0x01	; 1
     37e:	9c 83       	std	Y+4, r25	; 0x04
     380:	8b 83       	std	Y+3, r24	; 0x03

    tmp = (unsigned short)arg;
     382:	89 85       	ldd	r24, Y+9	; 0x09
     384:	9a 85       	ldd	r25, Y+10	; 0x0a
     386:	9a 83       	std	Y+2, r25	; 0x02
     388:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (stack_t)(tmp&(unsigned short)0x00ff); // r24 LSByte of arg
     38a:	89 81       	ldd	r24, Y+1	; 0x01
     38c:	eb 81       	ldd	r30, Y+3	; 0x03
     38e:	fc 81       	ldd	r31, Y+4	; 0x04
     390:	80 83       	st	Z, r24
     392:	8b 81       	ldd	r24, Y+3	; 0x03
     394:	9c 81       	ldd	r25, Y+4	; 0x04
     396:	01 97       	sbiw	r24, 0x01	; 1
     398:	9c 83       	std	Y+4, r25	; 0x04
     39a:	8b 83       	std	Y+3, r24	; 0x03
    tmp>>=8;
     39c:	89 81       	ldd	r24, Y+1	; 0x01
     39e:	9a 81       	ldd	r25, Y+2	; 0x02
     3a0:	89 2f       	mov	r24, r25
     3a2:	99 27       	eor	r25, r25
     3a4:	9a 83       	std	Y+2, r25	; 0x02
     3a6:	89 83       	std	Y+1, r24	; 0x01
    *tos-- = (stack_t)(tmp&(unsigned short)0x00ff); // r25 MSByte of arg
     3a8:	89 81       	ldd	r24, Y+1	; 0x01
     3aa:	eb 81       	ldd	r30, Y+3	; 0x03
     3ac:	fc 81       	ldd	r31, Y+4	; 0x04
     3ae:	80 83       	st	Z, r24
     3b0:	8b 81       	ldd	r24, Y+3	; 0x03
     3b2:	9c 81       	ldd	r25, Y+4	; 0x04
     3b4:	01 97       	sbiw	r24, 0x01	; 1
     3b6:	9c 83       	std	Y+4, r25	; 0x04
     3b8:	8b 83       	std	Y+3, r24	; 0x03

    *tos-- = 0x26;
     3ba:	eb 81       	ldd	r30, Y+3	; 0x03
     3bc:	fc 81       	ldd	r31, Y+4	; 0x04
     3be:	86 e2       	ldi	r24, 0x26	; 38
     3c0:	80 83       	st	Z, r24
     3c2:	8b 81       	ldd	r24, Y+3	; 0x03
     3c4:	9c 81       	ldd	r25, Y+4	; 0x04
     3c6:	01 97       	sbiw	r24, 0x01	; 1
     3c8:	9c 83       	std	Y+4, r25	; 0x04
     3ca:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x27;
     3cc:	eb 81       	ldd	r30, Y+3	; 0x03
     3ce:	fc 81       	ldd	r31, Y+4	; 0x04
     3d0:	87 e2       	ldi	r24, 0x27	; 39
     3d2:	80 83       	st	Z, r24
     3d4:	8b 81       	ldd	r24, Y+3	; 0x03
     3d6:	9c 81       	ldd	r25, Y+4	; 0x04
     3d8:	01 97       	sbiw	r24, 0x01	; 1
     3da:	9c 83       	std	Y+4, r25	; 0x04
     3dc:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x28;
     3de:	eb 81       	ldd	r30, Y+3	; 0x03
     3e0:	fc 81       	ldd	r31, Y+4	; 0x04
     3e2:	88 e2       	ldi	r24, 0x28	; 40
     3e4:	80 83       	st	Z, r24
     3e6:	8b 81       	ldd	r24, Y+3	; 0x03
     3e8:	9c 81       	ldd	r25, Y+4	; 0x04
     3ea:	01 97       	sbiw	r24, 0x01	; 1
     3ec:	9c 83       	std	Y+4, r25	; 0x04
     3ee:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x29;
     3f0:	eb 81       	ldd	r30, Y+3	; 0x03
     3f2:	fc 81       	ldd	r31, Y+4	; 0x04
     3f4:	89 e2       	ldi	r24, 0x29	; 41
     3f6:	80 83       	st	Z, r24
     3f8:	8b 81       	ldd	r24, Y+3	; 0x03
     3fa:	9c 81       	ldd	r25, Y+4	; 0x04
     3fc:	01 97       	sbiw	r24, 0x01	; 1
     3fe:	9c 83       	std	Y+4, r25	; 0x04
     400:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x30;
     402:	eb 81       	ldd	r30, Y+3	; 0x03
     404:	fc 81       	ldd	r31, Y+4	; 0x04
     406:	80 e3       	ldi	r24, 0x30	; 48
     408:	80 83       	st	Z, r24
     40a:	8b 81       	ldd	r24, Y+3	; 0x03
     40c:	9c 81       	ldd	r25, Y+4	; 0x04
     40e:	01 97       	sbiw	r24, 0x01	; 1
     410:	9c 83       	std	Y+4, r25	; 0x04
     412:	8b 83       	std	Y+3, r24	; 0x03
    *tos-- = 0x31;
     414:	eb 81       	ldd	r30, Y+3	; 0x03
     416:	fc 81       	ldd	r31, Y+4	; 0x04
     418:	81 e3       	ldi	r24, 0x31	; 49
     41a:	80 83       	st	Z, r24
     41c:	8b 81       	ldd	r24, Y+3	; 0x03
     41e:	9c 81       	ldd	r25, Y+4	; 0x04
     420:	01 97       	sbiw	r24, 0x01	; 1
     422:	9c 83       	std	Y+4, r25	; 0x04
     424:	8b 83       	std	Y+3, r24	; 0x03
#ifdef RAMPZ
    *tos-- = 0xff;
#endif
    return tos;
     426:	8b 81       	ldd	r24, Y+3	; 0x03
     428:	9c 81       	ldd	r25, Y+4	; 0x04
}
     42a:	2a 96       	adiw	r28, 0x0a	; 10
     42c:	0f b6       	in	r0, 0x3f	; 63
     42e:	f8 94       	cli
     430:	de bf       	out	0x3e, r29	; 62
     432:	0f be       	out	0x3f, r0	; 63
     434:	cd bf       	out	0x3d, r28	; 61
     436:	cf 91       	pop	r28
     438:	df 91       	pop	r29
     43a:	08 95       	ret

0000043c <disable_interrupts>:

void disable_interrupts(void)
{
     43c:	df 93       	push	r29
     43e:	cf 93       	push	r28
     440:	cd b7       	in	r28, 0x3d	; 61
     442:	de b7       	in	r29, 0x3e	; 62
    cli();
     444:	f8 94       	cli
}
     446:	cf 91       	pop	r28
     448:	df 91       	pop	r29
     44a:	08 95       	ret

0000044c <enable_interrupts>:
void enable_interrupts(void)
{
     44c:	df 93       	push	r29
     44e:	cf 93       	push	r28
     450:	cd b7       	in	r28, 0x3d	; 61
     452:	de b7       	in	r29, 0x3e	; 62
    sei();
     454:	78 94       	sei
}
     456:	cf 91       	pop	r28
     458:	df 91       	pop	r29
     45a:	08 95       	ret

0000045c <current_proc>:

proc_t * current_proc(void)
{
     45c:	df 93       	push	r29
     45e:	cf 93       	push	r28
     460:	cd b7       	in	r28, 0x3d	; 61
     462:	de b7       	in	r29, 0x3e	; 62
    return kernel.sched.current_proc;
     464:	80 91 48 01 	lds	r24, 0x0148
     468:	90 91 49 01 	lds	r25, 0x0149
}
     46c:	cf 91       	pop	r28
     46e:	df 91       	pop	r29
     470:	08 95       	ret

00000472 <resched>:

// Состояние ядра, выполняем перепланиировку
unsigned char kernel_state = KRN_FLG_RESCHED;
// Функция перепланировки
void resched( void )
{
     472:	df 93       	push	r29
     474:	cf 93       	push	r28
     476:	cd b7       	in	r28, 0x3d	; 61
     478:	de b7       	in	r29, 0x3e	; 62
    kernel_state |= KRN_FLG_RESCHED;
     47a:	80 91 00 01 	lds	r24, 0x0100
     47e:	81 60       	ori	r24, 0x01	; 1
     480:	80 93 00 01 	sts	0x0100, r24
}
     484:	cf 91       	pop	r28
     486:	df 91       	pop	r29
     488:	08 95       	ret

0000048a <bugurt_check_resched>:
в случае использования системных вызовов
на основе программного прерывания -
- проверка на гонки с прерыванием системного вызова.
*/
void bugurt_check_resched( void )
{
     48a:	df 93       	push	r29
     48c:	cf 93       	push	r28
     48e:	cd b7       	in	r28, 0x3d	; 61
     490:	de b7       	in	r29, 0x3e	; 62
    if(
    ( kernel_state & KRN_FLG_RESCHED )
     492:	80 91 00 01 	lds	r24, 0x0100
     496:	88 2f       	mov	r24, r24
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	81 70       	andi	r24, 0x01	; 1
     49c:	90 70       	andi	r25, 0x00	; 0
на основе программного прерывания -
- проверка на гонки с прерыванием системного вызова.
*/
void bugurt_check_resched( void )
{
    if(
     49e:	88 23       	and	r24, r24
     4a0:	39 f0       	breq	.+14     	; 0x4b0 <bugurt_check_resched+0x26>
#ifdef SYSCALL_ISR
    && ( (~kernel_state) & KRN_FLG_DO_SCALL )
#endif // SYSCALL_ISR
    )
    {
        kernel_state &= ~KRN_FLG_RESCHED;
     4a2:	80 91 00 01 	lds	r24, 0x0100
     4a6:	8e 7f       	andi	r24, 0xFE	; 254
     4a8:	80 93 00 01 	sts	0x0100, r24
        sched_reschedule();
     4ac:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <sched_reschedule>
    }
}
     4b0:	cf 91       	pop	r28
     4b2:	df 91       	pop	r29
     4b4:	08 95       	ret

000004b6 <__vector_7>:
__attribute__ (( signal, naked )) void SYSTEM_TIMER_ISR(void)
{
    BUGURT_ISR_START();
     4b6:	00 91 48 01 	lds	r16, 0x0148
     4ba:	10 91 49 01 	lds	r17, 0x0149
     4be:	0e 94 53 00 	call	0xa6	; 0xa6 <bugurt_save_context>
     4c2:	f8 01       	movw	r30, r16
     4c4:	90 ab       	std	Z+48, r25	; 0x30
     4c6:	87 a7       	std	Z+47, r24	; 0x2f
     4c8:	80 91 a1 01 	lds	r24, 0x01A1
     4cc:	90 91 a2 01 	lds	r25, 0x01A2
     4d0:	0e 94 aa 00 	call	0x154	; 0x154 <bugurt_set_stack_pointer>

    kernel.timer++;
     4d4:	80 91 a5 01 	lds	r24, 0x01A5
     4d8:	90 91 a6 01 	lds	r25, 0x01A6
     4dc:	01 96       	adiw	r24, 0x01	; 1
     4de:	90 93 a6 01 	sts	0x01A6, r25
     4e2:	80 93 a5 01 	sts	0x01A5, r24
    if( kernel.timer_tick != (void (*)(void))0 ) kernel.timer_tick();
     4e6:	80 91 a7 01 	lds	r24, 0x01A7
     4ea:	90 91 a8 01 	lds	r25, 0x01A8
     4ee:	00 97       	sbiw	r24, 0x00	; 0
     4f0:	29 f0       	breq	.+10     	; 0x4fc <__vector_7+0x46>
     4f2:	e0 91 a7 01 	lds	r30, 0x01A7
     4f6:	f0 91 a8 01 	lds	r31, 0x01A8
     4fa:	09 95       	icall
    sched_schedule();
     4fc:	0e 94 2f 0c 	call	0x185e	; 0x185e <sched_schedule>

    BUGURT_ISR_EXIT();
     500:	e0 91 48 01 	lds	r30, 0x0148
     504:	f0 91 49 01 	lds	r31, 0x0149
     508:	87 a5       	ldd	r24, Z+47	; 0x2f
     50a:	90 a9       	ldd	r25, Z+48	; 0x30
     50c:	0e 94 7f 00 	call	0xfe	; 0xfe <bugurt_restore_context>
     510:	18 95       	reti

00000512 <_syscall>:
     while( kernel_state & KRN_FLG_DO_SCALL );
}
#else
__attribute__ (( naked )) void _syscall(void)
{
    BUGURT_ISR_START();
     512:	00 91 48 01 	lds	r16, 0x0148
     516:	10 91 49 01 	lds	r17, 0x0149
     51a:	0e 94 53 00 	call	0xa6	; 0xa6 <bugurt_save_context>
     51e:	f8 01       	movw	r30, r16
     520:	90 ab       	std	Z+48, r25	; 0x30
     522:	87 a7       	std	Z+47, r24	; 0x2f
     524:	80 91 a1 01 	lds	r24, 0x01A1
     528:	90 91 a2 01 	lds	r25, 0x01A2
     52c:	0e 94 aa 00 	call	0x154	; 0x154 <bugurt_set_stack_pointer>

    // Обрабатываем системный вызов
    do_syscall();
     530:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <do_syscall>

    BUGURT_ISR_END(); //Выходим и разрешаем прерывания!
     534:	0e 94 45 02 	call	0x48a	; 0x48a <bugurt_check_resched>
     538:	e0 91 48 01 	lds	r30, 0x0148
     53c:	f0 91 49 01 	lds	r31, 0x0149
     540:	87 a5       	ldd	r24, Z+47	; 0x2f
     542:	90 a9       	ldd	r25, Z+48	; 0x30
     544:	0e 94 7f 00 	call	0xfe	; 0xfe <bugurt_restore_context>
     548:	18 95       	reti

0000054a <syscall_bugurt>:
}
///Если не используется программное прерывание - прямая передача управления
void syscall_bugurt( unsigned char num, void * arg )
{
     54a:	df 93       	push	r29
     54c:	cf 93       	push	r28
     54e:	00 d0       	rcall	.+0      	; 0x550 <syscall_bugurt+0x6>
     550:	0f 92       	push	r0
     552:	cd b7       	in	r28, 0x3d	; 61
     554:	de b7       	in	r29, 0x3e	; 62
     556:	89 83       	std	Y+1, r24	; 0x01
     558:	7b 83       	std	Y+3, r23	; 0x03
     55a:	6a 83       	std	Y+2, r22	; 0x02
    cli();
     55c:	f8 94       	cli
    syscall_num = num;
     55e:	89 81       	ldd	r24, Y+1	; 0x01
     560:	80 93 32 01 	sts	0x0132, r24
    syscall_arg = arg;
     564:	8a 81       	ldd	r24, Y+2	; 0x02
     566:	9b 81       	ldd	r25, Y+3	; 0x03
     568:	90 93 34 01 	sts	0x0134, r25
     56c:	80 93 33 01 	sts	0x0133, r24
    _syscall();
     570:	0e 94 89 02 	call	0x512	; 0x512 <_syscall>
}
     574:	0f 90       	pop	r0
     576:	0f 90       	pop	r0
     578:	0f 90       	pop	r0
     57a:	cf 91       	pop	r28
     57c:	df 91       	pop	r29
     57e:	08 95       	ret

00000580 <init_bugurt>:
#endif
/***************************************************************************************************************/
// Функции общего пользования

void init_bugurt(void)
{
     580:	df 93       	push	r29
     582:	cf 93       	push	r28
     584:	cd b7       	in	r28, 0x3d	; 61
     586:	de b7       	in	r29, 0x3e	; 62
    cli();
     588:	f8 94       	cli
    kernel.sched.nested_crit_sec = (count_t)1;
     58a:	81 e0       	ldi	r24, 0x01	; 1
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	90 93 71 01 	sts	0x0171, r25
     592:	80 93 70 01 	sts	0x0170, r24
    kernel_init();
     596:	0e 94 0d 07 	call	0xe1a	; 0xe1a <kernel_init>
}
     59a:	cf 91       	pop	r28
     59c:	df 91       	pop	r29
     59e:	08 95       	ret

000005a0 <start_bugurt>:
void start_bugurt(void)
{
     5a0:	df 93       	push	r29
     5a2:	cf 93       	push	r28
     5a4:	cd b7       	in	r28, 0x3d	; 61
     5a6:	de b7       	in	r29, 0x3e	; 62
    start_scheduler();
     5a8:	0e 94 21 12 	call	0x2442	; 0x2442 <start_scheduler>
    kernel.sched.nested_crit_sec = (count_t)0;
     5ac:	10 92 71 01 	sts	0x0171, r1
     5b0:	10 92 70 01 	sts	0x0170, r1
    sei();
     5b4:	78 94       	sei
    idle_main( (void *)0 );
     5b6:	80 e0       	ldi	r24, 0x00	; 0
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <idle_main>
}
     5be:	cf 91       	pop	r28
     5c0:	df 91       	pop	r29
     5c2:	08 95       	ret

000005c4 <enter_crit_sec>:
    if( kernel.sched[core].nested_crit_sec == (count_t)0 )enable_interrupts();
}

#else
void enter_crit_sec(void)
{
     5c4:	df 93       	push	r29
     5c6:	cf 93       	push	r28
     5c8:	cd b7       	in	r28, 0x3d	; 61
     5ca:	de b7       	in	r29, 0x3e	; 62
    disable_interrupts();
     5cc:	0e 94 1e 02 	call	0x43c	; 0x43c <disable_interrupts>
    kernel.sched.nested_crit_sec++;
     5d0:	80 91 70 01 	lds	r24, 0x0170
     5d4:	90 91 71 01 	lds	r25, 0x0171
     5d8:	01 96       	adiw	r24, 0x01	; 1
     5da:	90 93 71 01 	sts	0x0171, r25
     5de:	80 93 70 01 	sts	0x0170, r24
}
     5e2:	cf 91       	pop	r28
     5e4:	df 91       	pop	r29
     5e6:	08 95       	ret

000005e8 <exit_crit_sec>:
void exit_crit_sec(void)
{
     5e8:	df 93       	push	r29
     5ea:	cf 93       	push	r28
     5ec:	cd b7       	in	r28, 0x3d	; 61
     5ee:	de b7       	in	r29, 0x3e	; 62
    if( kernel.sched.nested_crit_sec != (count_t)0 )kernel.sched.nested_crit_sec--;
     5f0:	80 91 70 01 	lds	r24, 0x0170
     5f4:	90 91 71 01 	lds	r25, 0x0171
     5f8:	00 97       	sbiw	r24, 0x00	; 0
     5fa:	49 f0       	breq	.+18     	; 0x60e <exit_crit_sec+0x26>
     5fc:	80 91 70 01 	lds	r24, 0x0170
     600:	90 91 71 01 	lds	r25, 0x0171
     604:	01 97       	sbiw	r24, 0x01	; 1
     606:	90 93 71 01 	sts	0x0171, r25
     60a:	80 93 70 01 	sts	0x0170, r24
    if( kernel.sched.nested_crit_sec == (count_t)0 )enable_interrupts();
     60e:	80 91 70 01 	lds	r24, 0x0170
     612:	90 91 71 01 	lds	r25, 0x0171
     616:	00 97       	sbiw	r24, 0x00	; 0
     618:	11 f4       	brne	.+4      	; 0x61e <exit_crit_sec+0x36>
     61a:	0e 94 26 02 	call	0x44c	; 0x44c <enable_interrupts>
}
     61e:	cf 91       	pop	r28
     620:	df 91       	pop	r29
     622:	08 95       	ret

00000624 <gitem_init>:
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
// Инициация
void gitem_init(gitem_t * gitem, prio_t prio)
{
     624:	df 93       	push	r29
     626:	cf 93       	push	r28
     628:	00 d0       	rcall	.+0      	; 0x62a <gitem_init+0x6>
     62a:	00 d0       	rcall	.+0      	; 0x62c <gitem_init+0x8>
     62c:	0f 92       	push	r0
     62e:	cd b7       	in	r28, 0x3d	; 61
     630:	de b7       	in	r29, 0x3e	; 62
     632:	9c 83       	std	Y+4, r25	; 0x04
     634:	8b 83       	std	Y+3, r24	; 0x03
     636:	6d 83       	std	Y+5, r22	; 0x05
    group_t * group = &gitem->grp;
     638:	8b 81       	ldd	r24, Y+3	; 0x03
     63a:	9c 81       	ldd	r25, Y+4	; 0x04
     63c:	06 96       	adiw	r24, 0x06	; 6
     63e:	9a 83       	std	Y+2, r25	; 0x02
     640:	89 83       	std	Y+1, r24	; 0x01
    item_init( (item_t *)gitem );
     642:	8b 81       	ldd	r24, Y+3	; 0x03
     644:	9c 81       	ldd	r25, Y+4	; 0x04
     646:	0e 94 8d 06 	call	0xd1a	; 0xd1a <item_init>
    group_init( group, prio );
     64a:	89 81       	ldd	r24, Y+1	; 0x01
     64c:	9a 81       	ldd	r25, Y+2	; 0x02
     64e:	6d 81       	ldd	r22, Y+5	; 0x05
     650:	0e 94 68 05 	call	0xad0	; 0xad0 <group_init>
    gitem->group = group;
     654:	eb 81       	ldd	r30, Y+3	; 0x03
     656:	fc 81       	ldd	r31, Y+4	; 0x04
     658:	89 81       	ldd	r24, Y+1	; 0x01
     65a:	9a 81       	ldd	r25, Y+2	; 0x02
     65c:	95 83       	std	Z+5, r25	; 0x05
     65e:	84 83       	std	Z+4, r24	; 0x04
}
     660:	0f 90       	pop	r0
     662:	0f 90       	pop	r0
     664:	0f 90       	pop	r0
     666:	0f 90       	pop	r0
     668:	0f 90       	pop	r0
     66a:	cf 91       	pop	r28
     66c:	df 91       	pop	r29
     66e:	08 95       	ret

00000670 <gitem_insert>:
// Вставить в список
void gitem_insert(gitem_t * gitem, xlist_t *xlist)
{
     670:	df 93       	push	r29
     672:	cf 93       	push	r28
     674:	cd b7       	in	r28, 0x3d	; 61
     676:	de b7       	in	r29, 0x3e	; 62
     678:	28 97       	sbiw	r28, 0x08	; 8
     67a:	0f b6       	in	r0, 0x3f	; 63
     67c:	f8 94       	cli
     67e:	de bf       	out	0x3e, r29	; 62
     680:	0f be       	out	0x3f, r0	; 63
     682:	cd bf       	out	0x3d, r28	; 61
     684:	9e 83       	std	Y+6, r25	; 0x06
     686:	8d 83       	std	Y+5, r24	; 0x05
     688:	78 87       	std	Y+8, r23	; 0x08
     68a:	6f 83       	std	Y+7, r22	; 0x07
    prio_t prio = gitem->group->prio;
     68c:	ed 81       	ldd	r30, Y+5	; 0x05
     68e:	fe 81       	ldd	r31, Y+6	; 0x06
     690:	04 80       	ldd	r0, Z+4	; 0x04
     692:	f5 81       	ldd	r31, Z+5	; 0x05
     694:	e0 2d       	mov	r30, r0
     696:	82 81       	ldd	r24, Z+2	; 0x02
     698:	8c 83       	std	Y+4, r24	; 0x04
    index_t mask = ((index_t)1)<<prio;
     69a:	8c 81       	ldd	r24, Y+4	; 0x04
     69c:	28 2f       	mov	r18, r24
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	81 e0       	ldi	r24, 0x01	; 1
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	02 c0       	rjmp	.+4      	; 0x6aa <gitem_insert+0x3a>
     6a6:	88 0f       	add	r24, r24
     6a8:	99 1f       	adc	r25, r25
     6aa:	2a 95       	dec	r18
     6ac:	e2 f7       	brpl	.-8      	; 0x6a6 <gitem_insert+0x36>
     6ae:	8b 83       	std	Y+3, r24	; 0x03
    item_t ** head = (item_t **)xlist + prio;
     6b0:	2f 81       	ldd	r18, Y+7	; 0x07
     6b2:	38 85       	ldd	r19, Y+8	; 0x08
     6b4:	8c 81       	ldd	r24, Y+4	; 0x04
     6b6:	88 2f       	mov	r24, r24
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	88 0f       	add	r24, r24
     6bc:	99 1f       	adc	r25, r25
     6be:	82 0f       	add	r24, r18
     6c0:	93 1f       	adc	r25, r19
     6c2:	9a 83       	std	Y+2, r25	; 0x02
     6c4:	89 83       	std	Y+1, r24	; 0x01
    // Пуста ли часть списка с таким приоритетом
    if( ( xlist->index )& mask)
     6c6:	ef 81       	ldd	r30, Y+7	; 0x07
     6c8:	f8 85       	ldd	r31, Y+8	; 0x08
     6ca:	90 89       	ldd	r25, Z+16	; 0x10
     6cc:	8b 81       	ldd	r24, Y+3	; 0x03
     6ce:	89 23       	and	r24, r25
     6d0:	88 23       	and	r24, r24
     6d2:	51 f0       	breq	.+20     	; 0x6e8 <gitem_insert+0x78>
    {
        //Не пуста вставляем туда gitem
        item_insert( (item_t *)gitem, *head );
     6d4:	8d 81       	ldd	r24, Y+5	; 0x05
     6d6:	9e 81       	ldd	r25, Y+6	; 0x06
     6d8:	e9 81       	ldd	r30, Y+1	; 0x01
     6da:	fa 81       	ldd	r31, Y+2	; 0x02
     6dc:	20 81       	ld	r18, Z
     6de:	31 81       	ldd	r19, Z+1	; 0x01
     6e0:	b9 01       	movw	r22, r18
     6e2:	0e 94 a5 06 	call	0xd4a	; 0xd4a <item_insert>
     6e6:	0e c0       	rjmp	.+28     	; 0x704 <gitem_insert+0x94>
    }
    else
    {
        // Пуста, gitem будет головой
        *head = (item_t *)gitem;
     6e8:	8d 81       	ldd	r24, Y+5	; 0x05
     6ea:	9e 81       	ldd	r25, Y+6	; 0x06
     6ec:	e9 81       	ldd	r30, Y+1	; 0x01
     6ee:	fa 81       	ldd	r31, Y+2	; 0x02
     6f0:	91 83       	std	Z+1, r25	; 0x01
     6f2:	80 83       	st	Z, r24
        xlist->index |= mask;
     6f4:	ef 81       	ldd	r30, Y+7	; 0x07
     6f6:	f8 85       	ldd	r31, Y+8	; 0x08
     6f8:	90 89       	ldd	r25, Z+16	; 0x10
     6fa:	8b 81       	ldd	r24, Y+3	; 0x03
     6fc:	89 2b       	or	r24, r25
     6fe:	ef 81       	ldd	r30, Y+7	; 0x07
     700:	f8 85       	ldd	r31, Y+8	; 0x08
     702:	80 8b       	std	Z+16, r24	; 0x10
    }
    gitem->group->link = (void *)xlist;
     704:	ed 81       	ldd	r30, Y+5	; 0x05
     706:	fe 81       	ldd	r31, Y+6	; 0x06
     708:	04 80       	ldd	r0, Z+4	; 0x04
     70a:	f5 81       	ldd	r31, Z+5	; 0x05
     70c:	e0 2d       	mov	r30, r0
     70e:	8f 81       	ldd	r24, Y+7	; 0x07
     710:	98 85       	ldd	r25, Y+8	; 0x08
     712:	91 83       	std	Z+1, r25	; 0x01
     714:	80 83       	st	Z, r24
}
     716:	28 96       	adiw	r28, 0x08	; 8
     718:	0f b6       	in	r0, 0x3f	; 63
     71a:	f8 94       	cli
     71c:	de bf       	out	0x3e, r29	; 62
     71e:	0f be       	out	0x3f, r0	; 63
     720:	cd bf       	out	0x3d, r28	; 61
     722:	cf 91       	pop	r28
     724:	df 91       	pop	r29
     726:	08 95       	ret

00000728 <gitem_insert_group>:
 при этом gitem->group переходит в Пул

 Ограничения на gitem - он не должен быть сгруппирован в момент встаки в группу.
*/
void gitem_insert_group(gitem_t * gitem, xlist_t *xlist)
{
     728:	df 93       	push	r29
     72a:	cf 93       	push	r28
     72c:	cd b7       	in	r28, 0x3d	; 61
     72e:	de b7       	in	r29, 0x3e	; 62
     730:	2a 97       	sbiw	r28, 0x0a	; 10
     732:	0f b6       	in	r0, 0x3f	; 63
     734:	f8 94       	cli
     736:	de bf       	out	0x3e, r29	; 62
     738:	0f be       	out	0x3f, r0	; 63
     73a:	cd bf       	out	0x3d, r28	; 61
     73c:	98 87       	std	Y+8, r25	; 0x08
     73e:	8f 83       	std	Y+7, r24	; 0x07
     740:	7a 87       	std	Y+10, r23	; 0x0a
     742:	69 87       	std	Y+9, r22	; 0x09
    prio_t prio = gitem->group->prio;
     744:	ef 81       	ldd	r30, Y+7	; 0x07
     746:	f8 85       	ldd	r31, Y+8	; 0x08
     748:	04 80       	ldd	r0, Z+4	; 0x04
     74a:	f5 81       	ldd	r31, Z+5	; 0x05
     74c:	e0 2d       	mov	r30, r0
     74e:	82 81       	ldd	r24, Z+2	; 0x02
     750:	8e 83       	std	Y+6, r24	; 0x06
    index_t mask = ((index_t)1)<<prio;
     752:	8e 81       	ldd	r24, Y+6	; 0x06
     754:	28 2f       	mov	r18, r24
     756:	30 e0       	ldi	r19, 0x00	; 0
     758:	81 e0       	ldi	r24, 0x01	; 1
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	02 c0       	rjmp	.+4      	; 0x762 <gitem_insert_group+0x3a>
     75e:	88 0f       	add	r24, r24
     760:	99 1f       	adc	r25, r25
     762:	2a 95       	dec	r18
     764:	e2 f7       	brpl	.-8      	; 0x75e <gitem_insert_group+0x36>
     766:	8d 83       	std	Y+5, r24	; 0x05
    item_t ** head = (item_t **)xlist + prio;
     768:	29 85       	ldd	r18, Y+9	; 0x09
     76a:	3a 85       	ldd	r19, Y+10	; 0x0a
     76c:	8e 81       	ldd	r24, Y+6	; 0x06
     76e:	88 2f       	mov	r24, r24
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	88 0f       	add	r24, r24
     774:	99 1f       	adc	r25, r25
     776:	82 0f       	add	r24, r18
     778:	93 1f       	adc	r25, r19
     77a:	9c 83       	std	Y+4, r25	; 0x04
     77c:	8b 83       	std	Y+3, r24	; 0x03
    group_t * group = gitem->group;
     77e:	ef 81       	ldd	r30, Y+7	; 0x07
     780:	f8 85       	ldd	r31, Y+8	; 0x08
     782:	84 81       	ldd	r24, Z+4	; 0x04
     784:	95 81       	ldd	r25, Z+5	; 0x05
     786:	9a 83       	std	Y+2, r25	; 0x02
     788:	89 83       	std	Y+1, r24	; 0x01
    // Пуста ли часть списка с таким приоритетом
    if( ( xlist->index )& mask)
     78a:	e9 85       	ldd	r30, Y+9	; 0x09
     78c:	fa 85       	ldd	r31, Y+10	; 0x0a
     78e:	90 89       	ldd	r25, Z+16	; 0x10
     790:	8d 81       	ldd	r24, Y+5	; 0x05
     792:	89 23       	and	r24, r25
     794:	88 23       	and	r24, r24
     796:	31 f1       	breq	.+76     	; 0x7e4 <gitem_insert_group+0xbc>
    {
        //Не пуста вставляем туда gitem
        item_insert((item_t *)gitem, *head );
     798:	8f 81       	ldd	r24, Y+7	; 0x07
     79a:	98 85       	ldd	r25, Y+8	; 0x08
     79c:	eb 81       	ldd	r30, Y+3	; 0x03
     79e:	fc 81       	ldd	r31, Y+4	; 0x04
     7a0:	20 81       	ld	r18, Z
     7a2:	31 81       	ldd	r19, Z+1	; 0x01
     7a4:	b9 01       	movw	r22, r18
     7a6:	0e 94 a5 06 	call	0xd4a	; 0xd4a <item_insert>
        //Передаем старую группу в пул
        group_push(group);
     7aa:	89 81       	ldd	r24, Y+1	; 0x01
     7ac:	9a 81       	ldd	r25, Y+2	; 0x02
     7ae:	0e 94 85 05 	call	0xb0a	; 0xb0a <group_push>
        //назначаем новую группу - ту, в которой голова
        group = ((gitem_t *)*head)->group;
     7b2:	eb 81       	ldd	r30, Y+3	; 0x03
     7b4:	fc 81       	ldd	r31, Y+4	; 0x04
     7b6:	80 81       	ld	r24, Z
     7b8:	91 81       	ldd	r25, Z+1	; 0x01
     7ba:	fc 01       	movw	r30, r24
     7bc:	84 81       	ldd	r24, Z+4	; 0x04
     7be:	95 81       	ldd	r25, Z+5	; 0x05
     7c0:	9a 83       	std	Y+2, r25	; 0x02
     7c2:	89 83       	std	Y+1, r24	; 0x01
        gitem->group = group;
     7c4:	ef 81       	ldd	r30, Y+7	; 0x07
     7c6:	f8 85       	ldd	r31, Y+8	; 0x08
     7c8:	89 81       	ldd	r24, Y+1	; 0x01
     7ca:	9a 81       	ldd	r25, Y+2	; 0x02
     7cc:	95 83       	std	Z+5, r25	; 0x05
     7ce:	84 83       	std	Z+4, r24	; 0x04
        //количество элементов в группе увеличилось на 1
        group->el_num++;
     7d0:	e9 81       	ldd	r30, Y+1	; 0x01
     7d2:	fa 81       	ldd	r31, Y+2	; 0x02
     7d4:	83 81       	ldd	r24, Z+3	; 0x03
     7d6:	94 81       	ldd	r25, Z+4	; 0x04
     7d8:	01 96       	adiw	r24, 0x01	; 1
     7da:	e9 81       	ldd	r30, Y+1	; 0x01
     7dc:	fa 81       	ldd	r31, Y+2	; 0x02
     7de:	94 83       	std	Z+4, r25	; 0x04
     7e0:	83 83       	std	Z+3, r24	; 0x03
     7e2:	14 c0       	rjmp	.+40     	; 0x80c <gitem_insert_group+0xe4>
    }
    else
    {
        // Пуста, gitem будет головой
        *head = (item_t *)gitem;
     7e4:	8f 81       	ldd	r24, Y+7	; 0x07
     7e6:	98 85       	ldd	r25, Y+8	; 0x08
     7e8:	eb 81       	ldd	r30, Y+3	; 0x03
     7ea:	fc 81       	ldd	r31, Y+4	; 0x04
     7ec:	91 83       	std	Z+1, r25	; 0x01
     7ee:	80 83       	st	Z, r24
        xlist->index |= mask;
     7f0:	e9 85       	ldd	r30, Y+9	; 0x09
     7f2:	fa 85       	ldd	r31, Y+10	; 0x0a
     7f4:	90 89       	ldd	r25, Z+16	; 0x10
     7f6:	8d 81       	ldd	r24, Y+5	; 0x05
     7f8:	89 2b       	or	r24, r25
     7fa:	e9 85       	ldd	r30, Y+9	; 0x09
     7fc:	fa 85       	ldd	r31, Y+10	; 0x0a
     7fe:	80 8b       	std	Z+16, r24	; 0x10
        group->link = (void *)xlist;
     800:	e9 81       	ldd	r30, Y+1	; 0x01
     802:	fa 81       	ldd	r31, Y+2	; 0x02
     804:	89 85       	ldd	r24, Y+9	; 0x09
     806:	9a 85       	ldd	r25, Y+10	; 0x0a
     808:	91 83       	std	Z+1, r25	; 0x01
     80a:	80 83       	st	Z, r24
    }
}
     80c:	2a 96       	adiw	r28, 0x0a	; 10
     80e:	0f b6       	in	r0, 0x3f	; 63
     810:	f8 94       	cli
     812:	de bf       	out	0x3e, r29	; 62
     814:	0f be       	out	0x3f, r0	; 63
     816:	cd bf       	out	0x3d, r28	; 61
     818:	cf 91       	pop	r28
     81a:	df 91       	pop	r29
     81c:	08 95       	ret

0000081e <gitem_fast_cut>:
// Быстро вырезать из списка (не обнуляется указатель gitem->group->link)
void gitem_fast_cut(gitem_t * gitem)
{
     81e:	df 93       	push	r29
     820:	cf 93       	push	r28
     822:	00 d0       	rcall	.+0      	; 0x824 <gitem_fast_cut+0x6>
     824:	00 d0       	rcall	.+0      	; 0x826 <gitem_fast_cut+0x8>
     826:	0f 92       	push	r0
     828:	cd b7       	in	r28, 0x3d	; 61
     82a:	de b7       	in	r29, 0x3e	; 62
     82c:	9d 83       	std	Y+5, r25	; 0x05
     82e:	8c 83       	std	Y+4, r24	; 0x04
    prio_t prio = gitem->group->prio;
     830:	ec 81       	ldd	r30, Y+4	; 0x04
     832:	fd 81       	ldd	r31, Y+5	; 0x05
     834:	04 80       	ldd	r0, Z+4	; 0x04
     836:	f5 81       	ldd	r31, Z+5	; 0x05
     838:	e0 2d       	mov	r30, r0
     83a:	82 81       	ldd	r24, Z+2	; 0x02
     83c:	8b 83       	std	Y+3, r24	; 0x03
    xlist_t * xlist = (xlist_t *)gitem->group->link;
     83e:	ec 81       	ldd	r30, Y+4	; 0x04
     840:	fd 81       	ldd	r31, Y+5	; 0x05
     842:	04 80       	ldd	r0, Z+4	; 0x04
     844:	f5 81       	ldd	r31, Z+5	; 0x05
     846:	e0 2d       	mov	r30, r0
     848:	80 81       	ld	r24, Z
     84a:	91 81       	ldd	r25, Z+1	; 0x01
     84c:	9a 83       	std	Y+2, r25	; 0x02
     84e:	89 83       	std	Y+1, r24	; 0x01
    // Является ли эта часть списка группированной?
    if( gitem->group->el_num > (count_t)1 )
     850:	ec 81       	ldd	r30, Y+4	; 0x04
     852:	fd 81       	ldd	r31, Y+5	; 0x05
     854:	04 80       	ldd	r0, Z+4	; 0x04
     856:	f5 81       	ldd	r31, Z+5	; 0x05
     858:	e0 2d       	mov	r30, r0
     85a:	83 81       	ldd	r24, Z+3	; 0x03
     85c:	94 81       	ldd	r25, Z+4	; 0x04
     85e:	82 30       	cpi	r24, 0x02	; 2
     860:	91 05       	cpc	r25, r1
     862:	b8 f0       	brcs	.+46     	; 0x892 <gitem_fast_cut+0x74>
    {
        //Группированная часть списка, будем вырезать из группы с выделением новой группы из Пула
        // В текущей группе стало на 1 элемент меньше
        gitem->group->el_num--;
     864:	ec 81       	ldd	r30, Y+4	; 0x04
     866:	fd 81       	ldd	r31, Y+5	; 0x05
     868:	04 80       	ldd	r0, Z+4	; 0x04
     86a:	f5 81       	ldd	r31, Z+5	; 0x05
     86c:	e0 2d       	mov	r30, r0
     86e:	83 81       	ldd	r24, Z+3	; 0x03
     870:	94 81       	ldd	r25, Z+4	; 0x04
     872:	01 97       	sbiw	r24, 0x01	; 1
     874:	94 83       	std	Z+4, r25	; 0x04
     876:	83 83       	std	Z+3, r24	; 0x03
        //выделяем новую группу
        gitem->group = group_pop();
     878:	0e 94 9f 05 	call	0xb3e	; 0xb3e <group_pop>
     87c:	ec 81       	ldd	r30, Y+4	; 0x04
     87e:	fd 81       	ldd	r31, Y+5	; 0x05
     880:	95 83       	std	Z+5, r25	; 0x05
     882:	84 83       	std	Z+4, r24	; 0x04
        // Правильный приоритет, количество элементов в группе, выделенной из пула должно быть равно 1
        gitem->group->prio = (prio_t)prio;
     884:	ec 81       	ldd	r30, Y+4	; 0x04
     886:	fd 81       	ldd	r31, Y+5	; 0x05
     888:	04 80       	ldd	r0, Z+4	; 0x04
     88a:	f5 81       	ldd	r31, Z+5	; 0x05
     88c:	e0 2d       	mov	r30, r0
     88e:	8b 81       	ldd	r24, Y+3	; 0x03
     890:	82 83       	std	Z+2, r24	; 0x02
    }
    //Является ли элемент единственным в своей части списка?
    if( ((item_t *)gitem)->next == (item_t *)gitem )
     892:	ec 81       	ldd	r30, Y+4	; 0x04
     894:	fd 81       	ldd	r31, Y+5	; 0x05
     896:	20 81       	ld	r18, Z
     898:	31 81       	ldd	r19, Z+1	; 0x01
     89a:	8c 81       	ldd	r24, Y+4	; 0x04
     89c:	9d 81       	ldd	r25, Y+5	; 0x05
     89e:	28 17       	cp	r18, r24
     8a0:	39 07       	cpc	r19, r25
     8a2:	09 f5       	brne	.+66     	; 0x8e6 <gitem_fast_cut+0xc8>
    {
        // Да, является!
        xlist->item[prio] = (item_t *)0;
     8a4:	8b 81       	ldd	r24, Y+3	; 0x03
     8a6:	88 2f       	mov	r24, r24
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	29 81       	ldd	r18, Y+1	; 0x01
     8ac:	3a 81       	ldd	r19, Y+2	; 0x02
     8ae:	88 0f       	add	r24, r24
     8b0:	99 1f       	adc	r25, r25
     8b2:	f9 01       	movw	r30, r18
     8b4:	e8 0f       	add	r30, r24
     8b6:	f9 1f       	adc	r31, r25
     8b8:	11 82       	std	Z+1, r1	; 0x01
     8ba:	10 82       	st	Z, r1
        xlist->index &= ~(((index_t)1)<<prio);
     8bc:	e9 81       	ldd	r30, Y+1	; 0x01
     8be:	fa 81       	ldd	r31, Y+2	; 0x02
     8c0:	80 89       	ldd	r24, Z+16	; 0x10
     8c2:	48 2f       	mov	r20, r24
     8c4:	8b 81       	ldd	r24, Y+3	; 0x03
     8c6:	28 2f       	mov	r18, r24
     8c8:	30 e0       	ldi	r19, 0x00	; 0
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	02 2e       	mov	r0, r18
     8d0:	02 c0       	rjmp	.+4      	; 0x8d6 <gitem_fast_cut+0xb8>
     8d2:	88 0f       	add	r24, r24
     8d4:	99 1f       	adc	r25, r25
     8d6:	0a 94       	dec	r0
     8d8:	e2 f7       	brpl	.-8      	; 0x8d2 <gitem_fast_cut+0xb4>
     8da:	80 95       	com	r24
     8dc:	84 23       	and	r24, r20
     8de:	e9 81       	ldd	r30, Y+1	; 0x01
     8e0:	fa 81       	ldd	r31, Y+2	; 0x02
     8e2:	80 8b       	std	Z+16, r24	; 0x10
     8e4:	1a c0       	rjmp	.+52     	; 0x91a <__stack+0x1b>
    }
    else
    {
        // Нет, не является!
        // Является ли элемент головой своей части списка?
        if( xlist->item[(prio_t)prio] == (item_t *)gitem )
     8e6:	8b 81       	ldd	r24, Y+3	; 0x03
     8e8:	88 2f       	mov	r24, r24
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	29 81       	ldd	r18, Y+1	; 0x01
     8ee:	3a 81       	ldd	r19, Y+2	; 0x02
     8f0:	88 0f       	add	r24, r24
     8f2:	99 1f       	adc	r25, r25
     8f4:	f9 01       	movw	r30, r18
     8f6:	e8 0f       	add	r30, r24
     8f8:	f9 1f       	adc	r31, r25
     8fa:	20 81       	ld	r18, Z
     8fc:	31 81       	ldd	r19, Z+1	; 0x01
     8fe:	8c 81       	ldd	r24, Y+4	; 0x04
     900:	9d 81       	ldd	r25, Y+5	; 0x05
     902:	28 17       	cp	r18, r24
     904:	39 07       	cpc	r19, r25
     906:	29 f4       	brne	.+10     	; 0x912 <__stack+0x13>
        {
            // Является, список надо переключить
            xlist_switch( xlist, prio );
     908:	89 81       	ldd	r24, Y+1	; 0x01
     90a:	9a 81       	ldd	r25, Y+2	; 0x02
     90c:	6b 81       	ldd	r22, Y+3	; 0x03
     90e:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <xlist_switch>
        }
        // Собственно - вырезаем элемент
        item_cut( (item_t *)gitem );
     912:	8c 81       	ldd	r24, Y+4	; 0x04
     914:	9d 81       	ldd	r25, Y+5	; 0x05
     916:	0e 94 d7 06 	call	0xdae	; 0xdae <item_cut>
    }
}
     91a:	0f 90       	pop	r0
     91c:	0f 90       	pop	r0
     91e:	0f 90       	pop	r0
     920:	0f 90       	pop	r0
     922:	0f 90       	pop	r0
     924:	cf 91       	pop	r28
     926:	df 91       	pop	r29
     928:	08 95       	ret

0000092a <gitem_cut>:
// Вырезать из списка
void gitem_cut(gitem_t * gitem)
{
     92a:	df 93       	push	r29
     92c:	cf 93       	push	r28
     92e:	00 d0       	rcall	.+0      	; 0x930 <gitem_cut+0x6>
     930:	cd b7       	in	r28, 0x3d	; 61
     932:	de b7       	in	r29, 0x3e	; 62
     934:	9a 83       	std	Y+2, r25	; 0x02
     936:	89 83       	std	Y+1, r24	; 0x01
    gitem_fast_cut( gitem );
     938:	89 81       	ldd	r24, Y+1	; 0x01
     93a:	9a 81       	ldd	r25, Y+2	; 0x02
     93c:	0e 94 0f 04 	call	0x81e	; 0x81e <gitem_fast_cut>
    gitem->group->link = (void *)0;
     940:	e9 81       	ldd	r30, Y+1	; 0x01
     942:	fa 81       	ldd	r31, Y+2	; 0x02
     944:	04 80       	ldd	r0, Z+4	; 0x04
     946:	f5 81       	ldd	r31, Z+5	; 0x05
     948:	e0 2d       	mov	r30, r0
     94a:	11 82       	std	Z+1, r1	; 0x01
     94c:	10 82       	st	Z, r1
}
     94e:	0f 90       	pop	r0
     950:	0f 90       	pop	r0
     952:	cf 91       	pop	r28
     954:	df 91       	pop	r29
     956:	08 95       	ret

00000958 <gitem_xlist_merge>:
 1) Оба списка содержат только объекты типа gitem_t
 2) В списке source на каждом уровне приоритета все объекты типа gitem_t приенадлежат к одной группе.
 3) Элементы списка source, находящиеся на разных уровнях приоритета, пренадлежат разным группам.
*/
void gitem_xlist_merge(xlist_t * source, xlist_t * destignation)
{
     958:	df 93       	push	r29
     95a:	cf 93       	push	r28
     95c:	cd b7       	in	r28, 0x3d	; 61
     95e:	de b7       	in	r29, 0x3e	; 62
     960:	2c 97       	sbiw	r28, 0x0c	; 12
     962:	0f b6       	in	r0, 0x3f	; 63
     964:	f8 94       	cli
     966:	de bf       	out	0x3e, r29	; 62
     968:	0f be       	out	0x3f, r0	; 63
     96a:	cd bf       	out	0x3d, r28	; 61
     96c:	9a 87       	std	Y+10, r25	; 0x0a
     96e:	89 87       	std	Y+9, r24	; 0x09
     970:	7c 87       	std	Y+12, r23	; 0x0c
     972:	6b 87       	std	Y+11, r22	; 0x0b
    index_t mask = (index_t)1;
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	88 87       	std	Y+8, r24	; 0x08
    prio_t current_prio = (prio_t)0;
     978:	1f 82       	std	Y+7, r1	; 0x07
     97a:	9a c0       	rjmp	.+308    	; 0xab0 <gitem_xlist_merge+0x158>
    while( mask )
    {
        // Есть че перенести?
        if( mask & source->index )
     97c:	e9 85       	ldd	r30, Y+9	; 0x09
     97e:	fa 85       	ldd	r31, Y+10	; 0x0a
     980:	90 89       	ldd	r25, Z+16	; 0x10
     982:	88 85       	ldd	r24, Y+8	; 0x08
     984:	89 23       	and	r24, r25
     986:	88 23       	and	r24, r24
     988:	09 f4       	brne	.+2      	; 0x98c <gitem_xlist_merge+0x34>
     98a:	8c c0       	rjmp	.+280    	; 0xaa4 <gitem_xlist_merge+0x14c>
        {
            // Есть!
            // Есть куда переносить?
            if( mask & destignation->index )
     98c:	eb 85       	ldd	r30, Y+11	; 0x0b
     98e:	fc 85       	ldd	r31, Y+12	; 0x0c
     990:	90 89       	ldd	r25, Z+16	; 0x10
     992:	88 85       	ldd	r24, Y+8	; 0x08
     994:	89 23       	and	r24, r25
     996:	88 23       	and	r24, r24
     998:	09 f4       	brne	.+2      	; 0x99c <gitem_xlist_merge+0x44>
     99a:	43 c0       	rjmp	.+134    	; 0xa22 <gitem_xlist_merge+0xca>
            {
                //Есть!
                // Сшиваем 2 2-связных списка!!!
                item_t * src = source->item[current_prio];
     99c:	8f 81       	ldd	r24, Y+7	; 0x07
     99e:	88 2f       	mov	r24, r24
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	29 85       	ldd	r18, Y+9	; 0x09
     9a4:	3a 85       	ldd	r19, Y+10	; 0x0a
     9a6:	88 0f       	add	r24, r24
     9a8:	99 1f       	adc	r25, r25
     9aa:	f9 01       	movw	r30, r18
     9ac:	e8 0f       	add	r30, r24
     9ae:	f9 1f       	adc	r31, r25
     9b0:	80 81       	ld	r24, Z
     9b2:	91 81       	ldd	r25, Z+1	; 0x01
     9b4:	9e 83       	std	Y+6, r25	; 0x06
     9b6:	8d 83       	std	Y+5, r24	; 0x05
                item_t * dst = destignation->item[current_prio];
     9b8:	8f 81       	ldd	r24, Y+7	; 0x07
     9ba:	88 2f       	mov	r24, r24
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	2b 85       	ldd	r18, Y+11	; 0x0b
     9c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     9c2:	88 0f       	add	r24, r24
     9c4:	99 1f       	adc	r25, r25
     9c6:	f9 01       	movw	r30, r18
     9c8:	e8 0f       	add	r30, r24
     9ca:	f9 1f       	adc	r31, r25
     9cc:	80 81       	ld	r24, Z
     9ce:	91 81       	ldd	r25, Z+1	; 0x01
     9d0:	9c 83       	std	Y+4, r25	; 0x04
     9d2:	8b 83       	std	Y+3, r24	; 0x03
                src->prev->next = dst;
     9d4:	ed 81       	ldd	r30, Y+5	; 0x05
     9d6:	fe 81       	ldd	r31, Y+6	; 0x06
     9d8:	02 80       	ldd	r0, Z+2	; 0x02
     9da:	f3 81       	ldd	r31, Z+3	; 0x03
     9dc:	e0 2d       	mov	r30, r0
     9de:	8b 81       	ldd	r24, Y+3	; 0x03
     9e0:	9c 81       	ldd	r25, Y+4	; 0x04
     9e2:	91 83       	std	Z+1, r25	; 0x01
     9e4:	80 83       	st	Z, r24
                dst->prev->next = src;
     9e6:	eb 81       	ldd	r30, Y+3	; 0x03
     9e8:	fc 81       	ldd	r31, Y+4	; 0x04
     9ea:	02 80       	ldd	r0, Z+2	; 0x02
     9ec:	f3 81       	ldd	r31, Z+3	; 0x03
     9ee:	e0 2d       	mov	r30, r0
     9f0:	8d 81       	ldd	r24, Y+5	; 0x05
     9f2:	9e 81       	ldd	r25, Y+6	; 0x06
     9f4:	91 83       	std	Z+1, r25	; 0x01
     9f6:	80 83       	st	Z, r24
                item_t * buf = dst->prev;
     9f8:	eb 81       	ldd	r30, Y+3	; 0x03
     9fa:	fc 81       	ldd	r31, Y+4	; 0x04
     9fc:	82 81       	ldd	r24, Z+2	; 0x02
     9fe:	93 81       	ldd	r25, Z+3	; 0x03
     a00:	9a 83       	std	Y+2, r25	; 0x02
     a02:	89 83       	std	Y+1, r24	; 0x01
                dst->prev = src->prev;
     a04:	ed 81       	ldd	r30, Y+5	; 0x05
     a06:	fe 81       	ldd	r31, Y+6	; 0x06
     a08:	82 81       	ldd	r24, Z+2	; 0x02
     a0a:	93 81       	ldd	r25, Z+3	; 0x03
     a0c:	eb 81       	ldd	r30, Y+3	; 0x03
     a0e:	fc 81       	ldd	r31, Y+4	; 0x04
     a10:	93 83       	std	Z+3, r25	; 0x03
     a12:	82 83       	std	Z+2, r24	; 0x02
                src->prev = buf;
     a14:	ed 81       	ldd	r30, Y+5	; 0x05
     a16:	fe 81       	ldd	r31, Y+6	; 0x06
     a18:	89 81       	ldd	r24, Y+1	; 0x01
     a1a:	9a 81       	ldd	r25, Y+2	; 0x02
     a1c:	93 83       	std	Z+3, r25	; 0x03
     a1e:	82 83       	std	Z+2, r24	; 0x02
     a20:	21 c0       	rjmp	.+66     	; 0xa64 <gitem_xlist_merge+0x10c>
            }
            else
            {
                //Нет, тупо переносим всю группу.
                destignation->item[current_prio] = source->item[current_prio];
     a22:	8f 81       	ldd	r24, Y+7	; 0x07
     a24:	68 2f       	mov	r22, r24
     a26:	70 e0       	ldi	r23, 0x00	; 0
     a28:	8f 81       	ldd	r24, Y+7	; 0x07
     a2a:	88 2f       	mov	r24, r24
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	29 85       	ldd	r18, Y+9	; 0x09
     a30:	3a 85       	ldd	r19, Y+10	; 0x0a
     a32:	88 0f       	add	r24, r24
     a34:	99 1f       	adc	r25, r25
     a36:	f9 01       	movw	r30, r18
     a38:	e8 0f       	add	r30, r24
     a3a:	f9 1f       	adc	r31, r25
     a3c:	40 81       	ld	r20, Z
     a3e:	51 81       	ldd	r21, Z+1	; 0x01
     a40:	2b 85       	ldd	r18, Y+11	; 0x0b
     a42:	3c 85       	ldd	r19, Y+12	; 0x0c
     a44:	cb 01       	movw	r24, r22
     a46:	88 0f       	add	r24, r24
     a48:	99 1f       	adc	r25, r25
     a4a:	f9 01       	movw	r30, r18
     a4c:	e8 0f       	add	r30, r24
     a4e:	f9 1f       	adc	r31, r25
     a50:	51 83       	std	Z+1, r21	; 0x01
     a52:	40 83       	st	Z, r20
                destignation->index |= mask;
     a54:	eb 85       	ldd	r30, Y+11	; 0x0b
     a56:	fc 85       	ldd	r31, Y+12	; 0x0c
     a58:	90 89       	ldd	r25, Z+16	; 0x10
     a5a:	88 85       	ldd	r24, Y+8	; 0x08
     a5c:	89 2b       	or	r24, r25
     a5e:	eb 85       	ldd	r30, Y+11	; 0x0b
     a60:	fc 85       	ldd	r31, Y+12	; 0x0c
     a62:	80 8b       	std	Z+16, r24	; 0x10
            }
            // Вот почему эта функция отнесена к методам gitem_t
            ((gitem_t *)source->item[current_prio])->group->link = (void *)destignation;
     a64:	8f 81       	ldd	r24, Y+7	; 0x07
     a66:	88 2f       	mov	r24, r24
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	29 85       	ldd	r18, Y+9	; 0x09
     a6c:	3a 85       	ldd	r19, Y+10	; 0x0a
     a6e:	88 0f       	add	r24, r24
     a70:	99 1f       	adc	r25, r25
     a72:	f9 01       	movw	r30, r18
     a74:	e8 0f       	add	r30, r24
     a76:	f9 1f       	adc	r31, r25
     a78:	80 81       	ld	r24, Z
     a7a:	91 81       	ldd	r25, Z+1	; 0x01
     a7c:	fc 01       	movw	r30, r24
     a7e:	04 80       	ldd	r0, Z+4	; 0x04
     a80:	f5 81       	ldd	r31, Z+5	; 0x05
     a82:	e0 2d       	mov	r30, r0
     a84:	8b 85       	ldd	r24, Y+11	; 0x0b
     a86:	9c 85       	ldd	r25, Y+12	; 0x0c
     a88:	91 83       	std	Z+1, r25	; 0x01
     a8a:	80 83       	st	Z, r24
            // Перенос закончен, обнуляем указатель
            source->item[(prio_t)current_prio] = (item_t *)0;
     a8c:	8f 81       	ldd	r24, Y+7	; 0x07
     a8e:	88 2f       	mov	r24, r24
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	29 85       	ldd	r18, Y+9	; 0x09
     a94:	3a 85       	ldd	r19, Y+10	; 0x0a
     a96:	88 0f       	add	r24, r24
     a98:	99 1f       	adc	r25, r25
     a9a:	f9 01       	movw	r30, r18
     a9c:	e8 0f       	add	r30, r24
     a9e:	f9 1f       	adc	r31, r25
     aa0:	11 82       	std	Z+1, r1	; 0x01
     aa2:	10 82       	st	Z, r1
        }
        mask<<=1;
     aa4:	88 85       	ldd	r24, Y+8	; 0x08
     aa6:	88 0f       	add	r24, r24
     aa8:	88 87       	std	Y+8, r24	; 0x08
        current_prio++;
     aaa:	8f 81       	ldd	r24, Y+7	; 0x07
     aac:	8f 5f       	subi	r24, 0xFF	; 255
     aae:	8f 83       	std	Y+7, r24	; 0x07
*/
void gitem_xlist_merge(xlist_t * source, xlist_t * destignation)
{
    index_t mask = (index_t)1;
    prio_t current_prio = (prio_t)0;
    while( mask )
     ab0:	88 85       	ldd	r24, Y+8	; 0x08
     ab2:	88 23       	and	r24, r24
     ab4:	09 f0       	breq	.+2      	; 0xab8 <gitem_xlist_merge+0x160>
     ab6:	62 cf       	rjmp	.-316    	; 0x97c <gitem_xlist_merge+0x24>
        }
        mask<<=1;
        current_prio++;
    }
    // Список полностью перенесен, обнуляем индекс
    source->index = (index_t)0;
     ab8:	e9 85       	ldd	r30, Y+9	; 0x09
     aba:	fa 85       	ldd	r31, Y+10	; 0x0a
     abc:	10 8a       	std	Z+16, r1	; 0x10
}
     abe:	2c 96       	adiw	r28, 0x0c	; 12
     ac0:	0f b6       	in	r0, 0x3f	; 63
     ac2:	f8 94       	cli
     ac4:	de bf       	out	0x3e, r29	; 62
     ac6:	0f be       	out	0x3f, r0	; 63
     ac8:	cd bf       	out	0x3d, r28	; 61
     aca:	cf 91       	pop	r28
     acc:	df 91       	pop	r29
     ace:	08 95       	ret

00000ad0 <group_init>:
*****************************************************************************************/
#include "../include/bugurt.h"
//Методы group_t
// инициация
void group_init(group_t * group, prio_t prio)
{
     ad0:	df 93       	push	r29
     ad2:	cf 93       	push	r28
     ad4:	00 d0       	rcall	.+0      	; 0xad6 <group_init+0x6>
     ad6:	0f 92       	push	r0
     ad8:	cd b7       	in	r28, 0x3d	; 61
     ada:	de b7       	in	r29, 0x3e	; 62
     adc:	9a 83       	std	Y+2, r25	; 0x02
     ade:	89 83       	std	Y+1, r24	; 0x01
     ae0:	6b 83       	std	Y+3, r22	; 0x03
    group->link = (void *)0;
     ae2:	e9 81       	ldd	r30, Y+1	; 0x01
     ae4:	fa 81       	ldd	r31, Y+2	; 0x02
     ae6:	11 82       	std	Z+1, r1	; 0x01
     ae8:	10 82       	st	Z, r1
    group->prio = prio;
     aea:	e9 81       	ldd	r30, Y+1	; 0x01
     aec:	fa 81       	ldd	r31, Y+2	; 0x02
     aee:	8b 81       	ldd	r24, Y+3	; 0x03
     af0:	82 83       	std	Z+2, r24	; 0x02
    // группа - часть gitem_t, количество элементов - 1
    group->el_num = (count_t)1;
     af2:	e9 81       	ldd	r30, Y+1	; 0x01
     af4:	fa 81       	ldd	r31, Y+2	; 0x02
     af6:	81 e0       	ldi	r24, 0x01	; 1
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	94 83       	std	Z+4, r25	; 0x04
     afc:	83 83       	std	Z+3, r24	; 0x03
}
     afe:	0f 90       	pop	r0
     b00:	0f 90       	pop	r0
     b02:	0f 90       	pop	r0
     b04:	cf 91       	pop	r28
     b06:	df 91       	pop	r29
     b08:	08 95       	ret

00000b0a <group_push>:
// положить в ПУЛ
void group_push(group_t * group)
{
     b0a:	df 93       	push	r29
     b0c:	cf 93       	push	r28
     b0e:	00 d0       	rcall	.+0      	; 0xb10 <group_push+0x6>
     b10:	cd b7       	in	r28, 0x3d	; 61
     b12:	de b7       	in	r29, 0x3e	; 62
     b14:	9a 83       	std	Y+2, r25	; 0x02
     b16:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    // блокируем пул
    spin_lock( &kernel.pool_lock );
#endif
    group->link = (void *)kernel.pool;
     b18:	80 91 a3 01 	lds	r24, 0x01A3
     b1c:	90 91 a4 01 	lds	r25, 0x01A4
     b20:	e9 81       	ldd	r30, Y+1	; 0x01
     b22:	fa 81       	ldd	r31, Y+2	; 0x02
     b24:	91 83       	std	Z+1, r25	; 0x01
     b26:	80 83       	st	Z, r24
    kernel.pool = group;
     b28:	89 81       	ldd	r24, Y+1	; 0x01
     b2a:	9a 81       	ldd	r25, Y+2	; 0x02
     b2c:	90 93 a4 01 	sts	0x01A4, r25
     b30:	80 93 a3 01 	sts	0x01A3, r24
#ifdef CONFIG_MP
    // разблокируем пул
    spin_unlock( &kernel.pool_lock );
#endif
}
     b34:	0f 90       	pop	r0
     b36:	0f 90       	pop	r0
     b38:	cf 91       	pop	r28
     b3a:	df 91       	pop	r29
     b3c:	08 95       	ret

00000b3e <group_pop>:
// взять из пула, если есть, а есть всегда, избыточность же!
group_t * group_pop(void)
{
     b3e:	df 93       	push	r29
     b40:	cf 93       	push	r28
     b42:	00 d0       	rcall	.+0      	; 0xb44 <group_pop+0x6>
     b44:	cd b7       	in	r28, 0x3d	; 61
     b46:	de b7       	in	r29, 0x3e	; 62
#ifdef CONFIG_MP
    // блокируем пул
    spin_lock( &kernel.pool_lock );
#endif
    group_t * group = kernel.pool;
     b48:	80 91 a3 01 	lds	r24, 0x01A3
     b4c:	90 91 a4 01 	lds	r25, 0x01A4
     b50:	9a 83       	std	Y+2, r25	; 0x02
     b52:	89 83       	std	Y+1, r24	; 0x01
    kernel.pool = (group_t *)group->link;
     b54:	e9 81       	ldd	r30, Y+1	; 0x01
     b56:	fa 81       	ldd	r31, Y+2	; 0x02
     b58:	80 81       	ld	r24, Z
     b5a:	91 81       	ldd	r25, Z+1	; 0x01
     b5c:	90 93 a4 01 	sts	0x01A4, r25
     b60:	80 93 a3 01 	sts	0x01A3, r24
#ifdef CONFIG_MP
    // разблокируем пул
    spin_unlock( &kernel.pool_lock );
#endif
    return group;
     b64:	89 81       	ldd	r24, Y+1	; 0x01
     b66:	9a 81       	ldd	r25, Y+2	; 0x02
}
     b68:	0f 90       	pop	r0
     b6a:	0f 90       	pop	r0
     b6c:	cf 91       	pop	r28
     b6e:	df 91       	pop	r29
     b70:	08 95       	ret

00000b72 <index_search>:
*                           http://www.0chan.ru/r/res/9996.html                          *
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
prio_t index_search(index_t index)
{
     b72:	df 93       	push	r29
     b74:	cf 93       	push	r28
     b76:	00 d0       	rcall	.+0      	; 0xb78 <index_search+0x6>
     b78:	00 d0       	rcall	.+0      	; 0xb7a <index_search+0x8>
     b7a:	00 d0       	rcall	.+0      	; 0xb7c <index_search+0xa>
     b7c:	cd b7       	in	r28, 0x3d	; 61
     b7e:	de b7       	in	r29, 0x3e	; 62
     b80:	8e 83       	std	Y+6, r24	; 0x06
    prio_t prio = (prio_t)0;
     b82:	1d 82       	std	Y+5, r1	; 0x05
        но, т.к. BITS_IN_INDEX_T фиксировано для данной конфигурации,
        то получается время выполнения - O(1), ВСЕГДА.

        И да, предсказуемость + переносимость > быстродействие.
        */
    index_t upper = ~(index_t)0, lower = ~(index_t)0, middle;
     b84:	8f ef       	ldi	r24, 0xFF	; 255
     b86:	8c 83       	std	Y+4, r24	; 0x04
     b88:	8f ef       	ldi	r24, 0xFF	; 255
     b8a:	8b 83       	std	Y+3, r24	; 0x03
    prio_t step = (prio_t)BITS_IN_INDEX_T;
     b8c:	88 e0       	ldi	r24, 0x08	; 8
     b8e:	89 83       	std	Y+1, r24	; 0x01
     b90:	22 c0       	rjmp	.+68     	; 0xbd6 <index_search+0x64>
    while( step )
    {
        step>>=1; // делим шаг пополам
     b92:	89 81       	ldd	r24, Y+1	; 0x01
     b94:	86 95       	lsr	r24
     b96:	89 83       	std	Y+1, r24	; 0x01
        middle = lower>>step;
     b98:	8b 81       	ldd	r24, Y+3	; 0x03
     b9a:	28 2f       	mov	r18, r24
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	89 81       	ldd	r24, Y+1	; 0x01
     ba0:	88 2f       	mov	r24, r24
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	a9 01       	movw	r20, r18
     ba6:	02 c0       	rjmp	.+4      	; 0xbac <index_search+0x3a>
     ba8:	55 95       	asr	r21
     baa:	47 95       	ror	r20
     bac:	8a 95       	dec	r24
     bae:	e2 f7       	brpl	.-8      	; 0xba8 <index_search+0x36>
     bb0:	ca 01       	movw	r24, r20
     bb2:	8a 83       	std	Y+2, r24	; 0x02
        if( index & upper & middle )
     bb4:	9e 81       	ldd	r25, Y+6	; 0x06
     bb6:	8c 81       	ldd	r24, Y+4	; 0x04
     bb8:	98 23       	and	r25, r24
     bba:	8a 81       	ldd	r24, Y+2	; 0x02
     bbc:	89 23       	and	r24, r25
     bbe:	88 23       	and	r24, r24
     bc0:	19 f0       	breq	.+6      	; 0xbc8 <index_search+0x56>
        {
            lower = middle;
     bc2:	8a 81       	ldd	r24, Y+2	; 0x02
     bc4:	8b 83       	std	Y+3, r24	; 0x03
     bc6:	07 c0       	rjmp	.+14     	; 0xbd6 <index_search+0x64>
        }
        else
        {
            upper = ~middle;
     bc8:	8a 81       	ldd	r24, Y+2	; 0x02
     bca:	80 95       	com	r24
     bcc:	8c 83       	std	Y+4, r24	; 0x04
            prio += step;
     bce:	9d 81       	ldd	r25, Y+5	; 0x05
     bd0:	89 81       	ldd	r24, Y+1	; 0x01
     bd2:	89 0f       	add	r24, r25
     bd4:	8d 83       	std	Y+5, r24	; 0x05

        И да, предсказуемость + переносимость > быстродействие.
        */
    index_t upper = ~(index_t)0, lower = ~(index_t)0, middle;
    prio_t step = (prio_t)BITS_IN_INDEX_T;
    while( step )
     bd6:	89 81       	ldd	r24, Y+1	; 0x01
     bd8:	88 23       	and	r24, r24
     bda:	d9 f6       	brne	.-74     	; 0xb92 <index_search+0x20>
        if ( mask & index )break;
        prio++;
        mask<<=1;
    }
#endif
    return prio;
     bdc:	8d 81       	ldd	r24, Y+5	; 0x05
}
     bde:	26 96       	adiw	r28, 0x06	; 6
     be0:	0f b6       	in	r0, 0x3f	; 63
     be2:	f8 94       	cli
     be4:	de bf       	out	0x3e, r29	; 62
     be6:	0f be       	out	0x3f, r0	; 63
     be8:	cd bf       	out	0x3d, r28	; 61
     bea:	cf 91       	pop	r28
     bec:	df 91       	pop	r29
     bee:	08 95       	ret

00000bf0 <_ipc_wait>:
*                           http://www.0chan.ru/r/res/9996.html                          *
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
void _ipc_wait( flag_t wait_flag, void * ipc_pointer )
{
     bf0:	df 93       	push	r29
     bf2:	cf 93       	push	r28
     bf4:	00 d0       	rcall	.+0      	; 0xbf6 <_ipc_wait+0x6>
     bf6:	00 d0       	rcall	.+0      	; 0xbf8 <_ipc_wait+0x8>
     bf8:	00 d0       	rcall	.+0      	; 0xbfa <_ipc_wait+0xa>
     bfa:	cd b7       	in	r28, 0x3d	; 61
     bfc:	de b7       	in	r29, 0x3e	; 62
     bfe:	9c 83       	std	Y+4, r25	; 0x04
     c00:	8b 83       	std	Y+3, r24	; 0x03
     c02:	7e 83       	std	Y+6, r23	; 0x06
     c04:	6d 83       	std	Y+5, r22	; 0x05
    proc_t * proc = current_proc();
     c06:	0e 94 2e 02 	call	0x45c	; 0x45c <current_proc>
     c0a:	9a 83       	std	Y+2, r25	; 0x02
     c0c:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    // Останавливаем процесс
    proc->flags |= wait_flag;
     c0e:	e9 81       	ldd	r30, Y+1	; 0x01
     c10:	fa 81       	ldd	r31, Y+2	; 0x02
     c12:	23 85       	ldd	r18, Z+11	; 0x0b
     c14:	34 85       	ldd	r19, Z+12	; 0x0c
     c16:	8b 81       	ldd	r24, Y+3	; 0x03
     c18:	9c 81       	ldd	r25, Y+4	; 0x04
     c1a:	82 2b       	or	r24, r18
     c1c:	93 2b       	or	r25, r19
     c1e:	e9 81       	ldd	r30, Y+1	; 0x01
     c20:	fa 81       	ldd	r31, Y+2	; 0x02
     c22:	94 87       	std	Z+12, r25	; 0x0c
     c24:	83 87       	std	Z+11, r24	; 0x0b
    proc->ipc = ipc_pointer;
     c26:	e9 81       	ldd	r30, Y+1	; 0x01
     c28:	fa 81       	ldd	r31, Y+2	; 0x02
     c2a:	8d 81       	ldd	r24, Y+5	; 0x05
     c2c:	9e 81       	ldd	r25, Y+6	; 0x06
     c2e:	94 a7       	std	Z+44, r25	; 0x2c
     c30:	83 a7       	std	Z+43, r24	; 0x2b
    _proc_stop_( proc );
     c32:	89 81       	ldd	r24, Y+1	; 0x01
     c34:	9a 81       	ldd	r25, Y+2	; 0x02
     c36:	0e 94 95 04 	call	0x92a	; 0x92a <gitem_cut>
#ifdef CONFIG_MP
    resched( proc->core_id );
#else
    resched();
     c3a:	0e 94 39 02 	call	0x472	; 0x472 <resched>
#endif // CONFIG_MP
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
}
     c3e:	26 96       	adiw	r28, 0x06	; 6
     c40:	0f b6       	in	r0, 0x3f	; 63
     c42:	f8 94       	cli
     c44:	de bf       	out	0x3e, r29	; 62
     c46:	0f be       	out	0x3f, r0	; 63
     c48:	cd bf       	out	0x3d, r28	; 61
     c4a:	cf 91       	pop	r28
     c4c:	df 91       	pop	r29
     c4e:	08 95       	ret

00000c50 <ipc_send_pointer_isr>:

bool_t ipc_send_pointer_isr( proc_t * proc, void * pointer )
{
     c50:	df 93       	push	r29
     c52:	cf 93       	push	r28
     c54:	00 d0       	rcall	.+0      	; 0xc56 <ipc_send_pointer_isr+0x6>
     c56:	00 d0       	rcall	.+0      	; 0xc58 <ipc_send_pointer_isr+0x8>
     c58:	0f 92       	push	r0
     c5a:	cd b7       	in	r28, 0x3d	; 61
     c5c:	de b7       	in	r29, 0x3e	; 62
     c5e:	9b 83       	std	Y+3, r25	; 0x03
     c60:	8a 83       	std	Y+2, r24	; 0x02
     c62:	7d 83       	std	Y+5, r23	; 0x05
     c64:	6c 83       	std	Y+4, r22	; 0x04
    bool_t ret = (bool_t)0;
     c66:	19 82       	std	Y+1, r1	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    if( proc->flags & PROC_FLG_IPCW_P )
     c68:	ea 81       	ldd	r30, Y+2	; 0x02
     c6a:	fb 81       	ldd	r31, Y+3	; 0x03
     c6c:	83 85       	ldd	r24, Z+11	; 0x0b
     c6e:	94 85       	ldd	r25, Z+12	; 0x0c
     c70:	80 70       	andi	r24, 0x00	; 0
     c72:	91 70       	andi	r25, 0x01	; 1
     c74:	00 97       	sbiw	r24, 0x00	; 0
     c76:	c1 f0       	breq	.+48     	; 0xca8 <ipc_send_pointer_isr+0x58>
    {
        ret = (bool_t)1; // информация будет передана
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	89 83       	std	Y+1, r24	; 0x01
        proc->flags &= ~PROC_FLG_IPCW_P;
     c7c:	ea 81       	ldd	r30, Y+2	; 0x02
     c7e:	fb 81       	ldd	r31, Y+3	; 0x03
     c80:	83 85       	ldd	r24, Z+11	; 0x0b
     c82:	94 85       	ldd	r25, Z+12	; 0x0c
     c84:	9e 7f       	andi	r25, 0xFE	; 254
     c86:	ea 81       	ldd	r30, Y+2	; 0x02
     c88:	fb 81       	ldd	r31, Y+3	; 0x03
     c8a:	94 87       	std	Z+12, r25	; 0x0c
     c8c:	83 87       	std	Z+11, r24	; 0x0b
        *(void **)proc->ipc = pointer;
     c8e:	ea 81       	ldd	r30, Y+2	; 0x02
     c90:	fb 81       	ldd	r31, Y+3	; 0x03
     c92:	83 a5       	ldd	r24, Z+43	; 0x2b
     c94:	94 a5       	ldd	r25, Z+44	; 0x2c
     c96:	fc 01       	movw	r30, r24
     c98:	8c 81       	ldd	r24, Y+4	; 0x04
     c9a:	9d 81       	ldd	r25, Y+5	; 0x05
     c9c:	91 83       	std	Z+1, r25	; 0x01
     c9e:	80 83       	st	Z, r24
        _proc_run( proc );
     ca0:	8a 81       	ldd	r24, Y+2	; 0x02
     ca2:	9b 81       	ldd	r25, Y+3	; 0x03
     ca4:	0e 94 7d 09 	call	0x12fa	; 0x12fa <_proc_run>
    }
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    return ret;
     ca8:	89 81       	ldd	r24, Y+1	; 0x01
}
     caa:	0f 90       	pop	r0
     cac:	0f 90       	pop	r0
     cae:	0f 90       	pop	r0
     cb0:	0f 90       	pop	r0
     cb2:	0f 90       	pop	r0
     cb4:	cf 91       	pop	r28
     cb6:	df 91       	pop	r29
     cb8:	08 95       	ret

00000cba <ipc_send_data_isr>:

bool_t ipc_send_data_isr( proc_t * proc, ipc_data_t data )
{
     cba:	df 93       	push	r29
     cbc:	cf 93       	push	r28
     cbe:	00 d0       	rcall	.+0      	; 0xcc0 <ipc_send_data_isr+0x6>
     cc0:	00 d0       	rcall	.+0      	; 0xcc2 <ipc_send_data_isr+0x8>
     cc2:	cd b7       	in	r28, 0x3d	; 61
     cc4:	de b7       	in	r29, 0x3e	; 62
     cc6:	9b 83       	std	Y+3, r25	; 0x03
     cc8:	8a 83       	std	Y+2, r24	; 0x02
     cca:	6c 83       	std	Y+4, r22	; 0x04
    bool_t ret = (bool_t)0;
     ccc:	19 82       	std	Y+1, r1	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    if( proc->flags & PROC_FLG_IPCW_D )
     cce:	ea 81       	ldd	r30, Y+2	; 0x02
     cd0:	fb 81       	ldd	r31, Y+3	; 0x03
     cd2:	83 85       	ldd	r24, Z+11	; 0x0b
     cd4:	94 85       	ldd	r25, Z+12	; 0x0c
     cd6:	80 70       	andi	r24, 0x00	; 0
     cd8:	92 70       	andi	r25, 0x02	; 2
     cda:	00 97       	sbiw	r24, 0x00	; 0
     cdc:	b1 f0       	breq	.+44     	; 0xd0a <ipc_send_data_isr+0x50>
    {
        ret = (bool_t)1; // информация будет передана
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	89 83       	std	Y+1, r24	; 0x01
        proc->flags &= ~PROC_FLG_IPCW_D;
     ce2:	ea 81       	ldd	r30, Y+2	; 0x02
     ce4:	fb 81       	ldd	r31, Y+3	; 0x03
     ce6:	83 85       	ldd	r24, Z+11	; 0x0b
     ce8:	94 85       	ldd	r25, Z+12	; 0x0c
     cea:	9d 7f       	andi	r25, 0xFD	; 253
     cec:	ea 81       	ldd	r30, Y+2	; 0x02
     cee:	fb 81       	ldd	r31, Y+3	; 0x03
     cf0:	94 87       	std	Z+12, r25	; 0x0c
     cf2:	83 87       	std	Z+11, r24	; 0x0b
        *(ipc_data_t *)proc->ipc = data;
     cf4:	ea 81       	ldd	r30, Y+2	; 0x02
     cf6:	fb 81       	ldd	r31, Y+3	; 0x03
     cf8:	83 a5       	ldd	r24, Z+43	; 0x2b
     cfa:	94 a5       	ldd	r25, Z+44	; 0x2c
     cfc:	fc 01       	movw	r30, r24
     cfe:	8c 81       	ldd	r24, Y+4	; 0x04
     d00:	80 83       	st	Z, r24
        _proc_run( proc );
     d02:	8a 81       	ldd	r24, Y+2	; 0x02
     d04:	9b 81       	ldd	r25, Y+3	; 0x03
     d06:	0e 94 7d 09 	call	0x12fa	; 0x12fa <_proc_run>
    }
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    return ret;
     d0a:	89 81       	ldd	r24, Y+1	; 0x01
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	cf 91       	pop	r28
     d16:	df 91       	pop	r29
     d18:	08 95       	ret

00000d1a <item_init>:
*****************************************************************************************/
#include "../include/bugurt.h"
//Методы элемента 2-связного списка
//инициация элемента
void item_init(item_t *item)
{
     d1a:	df 93       	push	r29
     d1c:	cf 93       	push	r28
     d1e:	00 d0       	rcall	.+0      	; 0xd20 <item_init+0x6>
     d20:	cd b7       	in	r28, 0x3d	; 61
     d22:	de b7       	in	r29, 0x3e	; 62
     d24:	9a 83       	std	Y+2, r25	; 0x02
     d26:	89 83       	std	Y+1, r24	; 0x01
    item->prev = item;
     d28:	e9 81       	ldd	r30, Y+1	; 0x01
     d2a:	fa 81       	ldd	r31, Y+2	; 0x02
     d2c:	89 81       	ldd	r24, Y+1	; 0x01
     d2e:	9a 81       	ldd	r25, Y+2	; 0x02
     d30:	93 83       	std	Z+3, r25	; 0x03
     d32:	82 83       	std	Z+2, r24	; 0x02
    item->next = item;
     d34:	e9 81       	ldd	r30, Y+1	; 0x01
     d36:	fa 81       	ldd	r31, Y+2	; 0x02
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	9a 81       	ldd	r25, Y+2	; 0x02
     d3c:	91 83       	std	Z+1, r25	; 0x01
     d3e:	80 83       	st	Z, r24
}
     d40:	0f 90       	pop	r0
     d42:	0f 90       	pop	r0
     d44:	cf 91       	pop	r28
     d46:	df 91       	pop	r29
     d48:	08 95       	ret

00000d4a <item_insert>:
//Вставить элемент
void item_insert(item_t *item, item_t *head)
{
     d4a:	df 93       	push	r29
     d4c:	cf 93       	push	r28
     d4e:	00 d0       	rcall	.+0      	; 0xd50 <item_insert+0x6>
     d50:	00 d0       	rcall	.+0      	; 0xd52 <item_insert+0x8>
     d52:	00 d0       	rcall	.+0      	; 0xd54 <item_insert+0xa>
     d54:	cd b7       	in	r28, 0x3d	; 61
     d56:	de b7       	in	r29, 0x3e	; 62
     d58:	9c 83       	std	Y+4, r25	; 0x04
     d5a:	8b 83       	std	Y+3, r24	; 0x03
     d5c:	7e 83       	std	Y+6, r23	; 0x06
     d5e:	6d 83       	std	Y+5, r22	; 0x05
    // "хвост" списка
    item_t * tail = head->prev;
     d60:	ed 81       	ldd	r30, Y+5	; 0x05
     d62:	fe 81       	ldd	r31, Y+6	; 0x06
     d64:	82 81       	ldd	r24, Z+2	; 0x02
     d66:	93 81       	ldd	r25, Z+3	; 0x03
     d68:	9a 83       	std	Y+2, r25	; 0x02
     d6a:	89 83       	std	Y+1, r24	; 0x01

    // Вставляем элемент между "головой" и "хвостом"
    item->prev = tail;
     d6c:	eb 81       	ldd	r30, Y+3	; 0x03
     d6e:	fc 81       	ldd	r31, Y+4	; 0x04
     d70:	89 81       	ldd	r24, Y+1	; 0x01
     d72:	9a 81       	ldd	r25, Y+2	; 0x02
     d74:	93 83       	std	Z+3, r25	; 0x03
     d76:	82 83       	std	Z+2, r24	; 0x02
    item->next = head;
     d78:	eb 81       	ldd	r30, Y+3	; 0x03
     d7a:	fc 81       	ldd	r31, Y+4	; 0x04
     d7c:	8d 81       	ldd	r24, Y+5	; 0x05
     d7e:	9e 81       	ldd	r25, Y+6	; 0x06
     d80:	91 83       	std	Z+1, r25	; 0x01
     d82:	80 83       	st	Z, r24

    head->prev = item;
     d84:	ed 81       	ldd	r30, Y+5	; 0x05
     d86:	fe 81       	ldd	r31, Y+6	; 0x06
     d88:	8b 81       	ldd	r24, Y+3	; 0x03
     d8a:	9c 81       	ldd	r25, Y+4	; 0x04
     d8c:	93 83       	std	Z+3, r25	; 0x03
     d8e:	82 83       	std	Z+2, r24	; 0x02
    tail->next = item;
     d90:	e9 81       	ldd	r30, Y+1	; 0x01
     d92:	fa 81       	ldd	r31, Y+2	; 0x02
     d94:	8b 81       	ldd	r24, Y+3	; 0x03
     d96:	9c 81       	ldd	r25, Y+4	; 0x04
     d98:	91 83       	std	Z+1, r25	; 0x01
     d9a:	80 83       	st	Z, r24
}
     d9c:	26 96       	adiw	r28, 0x06	; 6
     d9e:	0f b6       	in	r0, 0x3f	; 63
     da0:	f8 94       	cli
     da2:	de bf       	out	0x3e, r29	; 62
     da4:	0f be       	out	0x3f, r0	; 63
     da6:	cd bf       	out	0x3d, r28	; 61
     da8:	cf 91       	pop	r28
     daa:	df 91       	pop	r29
     dac:	08 95       	ret

00000dae <item_cut>:
//Вырезать элемент
void item_cut( item_t *item )
{
     dae:	df 93       	push	r29
     db0:	cf 93       	push	r28
     db2:	00 d0       	rcall	.+0      	; 0xdb4 <item_cut+0x6>
     db4:	00 d0       	rcall	.+0      	; 0xdb6 <item_cut+0x8>
     db6:	00 d0       	rcall	.+0      	; 0xdb8 <item_cut+0xa>
     db8:	cd b7       	in	r28, 0x3d	; 61
     dba:	de b7       	in	r29, 0x3e	; 62
     dbc:	9e 83       	std	Y+6, r25	; 0x06
     dbe:	8d 83       	std	Y+5, r24	; 0x05
    item_t * prev = item->prev; //Предыдущий элемент
     dc0:	ed 81       	ldd	r30, Y+5	; 0x05
     dc2:	fe 81       	ldd	r31, Y+6	; 0x06
     dc4:	82 81       	ldd	r24, Z+2	; 0x02
     dc6:	93 81       	ldd	r25, Z+3	; 0x03
     dc8:	9c 83       	std	Y+4, r25	; 0x04
     dca:	8b 83       	std	Y+3, r24	; 0x03
    item_t * next = item->next; //Следующий элемент
     dcc:	ed 81       	ldd	r30, Y+5	; 0x05
     dce:	fe 81       	ldd	r31, Y+6	; 0x06
     dd0:	80 81       	ld	r24, Z
     dd2:	91 81       	ldd	r25, Z+1	; 0x01
     dd4:	9a 83       	std	Y+2, r25	; 0x02
     dd6:	89 83       	std	Y+1, r24	; 0x01

    next->prev = prev;
     dd8:	e9 81       	ldd	r30, Y+1	; 0x01
     dda:	fa 81       	ldd	r31, Y+2	; 0x02
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	9c 81       	ldd	r25, Y+4	; 0x04
     de0:	93 83       	std	Z+3, r25	; 0x03
     de2:	82 83       	std	Z+2, r24	; 0x02
    prev->next = next;
     de4:	eb 81       	ldd	r30, Y+3	; 0x03
     de6:	fc 81       	ldd	r31, Y+4	; 0x04
     de8:	89 81       	ldd	r24, Y+1	; 0x01
     dea:	9a 81       	ldd	r25, Y+2	; 0x02
     dec:	91 83       	std	Z+1, r25	; 0x01
     dee:	80 83       	st	Z, r24

    item->prev = item;
     df0:	ed 81       	ldd	r30, Y+5	; 0x05
     df2:	fe 81       	ldd	r31, Y+6	; 0x06
     df4:	8d 81       	ldd	r24, Y+5	; 0x05
     df6:	9e 81       	ldd	r25, Y+6	; 0x06
     df8:	93 83       	std	Z+3, r25	; 0x03
     dfa:	82 83       	std	Z+2, r24	; 0x02
    item->next = item;
     dfc:	ed 81       	ldd	r30, Y+5	; 0x05
     dfe:	fe 81       	ldd	r31, Y+6	; 0x06
     e00:	8d 81       	ldd	r24, Y+5	; 0x05
     e02:	9e 81       	ldd	r25, Y+6	; 0x06
     e04:	91 83       	std	Z+1, r25	; 0x01
     e06:	80 83       	st	Z, r24
}
     e08:	26 96       	adiw	r28, 0x06	; 6
     e0a:	0f b6       	in	r0, 0x3f	; 63
     e0c:	f8 94       	cli
     e0e:	de bf       	out	0x3e, r29	; 62
     e10:	0f be       	out	0x3f, r0	; 63
     e12:	cd bf       	out	0x3d, r28	; 61
     e14:	cf 91       	pop	r28
     e16:	df 91       	pop	r29
     e18:	08 95       	ret

00000e1a <kernel_init>:
{
    while(1);
}

void kernel_init(void)
{
     e1a:	8f 92       	push	r8
     e1c:	af 92       	push	r10
     e1e:	bf 92       	push	r11
     e20:	cf 92       	push	r12
     e22:	ef 92       	push	r14
     e24:	ff 92       	push	r15
     e26:	0f 93       	push	r16
     e28:	1f 93       	push	r17
     e2a:	df 93       	push	r29
     e2c:	cf 93       	push	r28
     e2e:	cd b7       	in	r28, 0x3d	; 61
     e30:	de b7       	in	r29, 0x3e	; 62
        stat_init( (stat_t *)kernel.stat + i );
        sched_init( (sched_t *)kernel.sched + i, (proc_t *)kernel.idle + i );
    }
    spin_unlock( &kernel.stat_lock );
#else
    proc_init_isr(
     e32:	82 e7       	ldi	r24, 0x72	; 114
     e34:	91 e0       	ldi	r25, 0x01	; 1
     e36:	28 ee       	ldi	r18, 0xE8	; 232
     e38:	32 e1       	ldi	r19, 0x12	; 18
     e3a:	b9 01       	movw	r22, r18
     e3c:	40 e0       	ldi	r20, 0x00	; 0
     e3e:	50 e0       	ldi	r21, 0x00	; 0
     e40:	20 e0       	ldi	r18, 0x00	; 0
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	00 e0       	ldi	r16, 0x00	; 0
     e46:	10 e0       	ldi	r17, 0x00	; 0
     e48:	ee 24       	eor	r14, r14
     e4a:	ff 24       	eor	r15, r15
     e4c:	0f 2e       	mov	r0, r31
     e4e:	f7 e0       	ldi	r31, 0x07	; 7
     e50:	cf 2e       	mov	r12, r31
     e52:	f0 2d       	mov	r31, r0
     e54:	aa 24       	eor	r10, r10
     e56:	bb 24       	eor	r11, r11
     e58:	a3 94       	inc	r10
     e5a:	88 24       	eor	r8, r8
     e5c:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <proc_init_isr>
        0, // это не важно, при первой же смене контекста будет сохранен текущий указатель стека
        ((prio_t)BITS_IN_INDEX_T - (prio_t)1),// низший приоритет
        (timer_t)1,//минимальный квант времени
        (bool_t)0// не RT
    );
    sched_init( (sched_t *)&kernel.sched, (proc_t *)&kernel.idle );
     e60:	88 e4       	ldi	r24, 0x48	; 72
     e62:	91 e0       	ldi	r25, 0x01	; 1
     e64:	22 e7       	ldi	r18, 0x72	; 114
     e66:	31 e0       	ldi	r19, 0x01	; 1
     e68:	b9 01       	movw	r22, r18
     e6a:	0e 94 c6 0b 	call	0x178c	; 0x178c <sched_init>
#endif // CONFIG_MP
}
     e6e:	cf 91       	pop	r28
     e70:	df 91       	pop	r29
     e72:	1f 91       	pop	r17
     e74:	0f 91       	pop	r16
     e76:	ff 90       	pop	r15
     e78:	ef 90       	pop	r14
     e7a:	cf 90       	pop	r12
     e7c:	bf 90       	pop	r11
     e7e:	af 90       	pop	r10
     e80:	8f 90       	pop	r8
     e82:	08 95       	ret

00000e84 <mutex_init_isr>:
    mutex_t * mutex
#ifdef CONFIG_USE_HIGHEST_LOCKER
    ,prio_t prio
#endif // CONFIG_USE_HIGHEST_LOCKER
)
{
     e84:	df 93       	push	r29
     e86:	cf 93       	push	r28
     e88:	00 d0       	rcall	.+0      	; 0xe8a <mutex_init_isr+0x6>
     e8a:	0f 92       	push	r0
     e8c:	cd b7       	in	r28, 0x3d	; 61
     e8e:	de b7       	in	r29, 0x3e	; 62
     e90:	9a 83       	std	Y+2, r25	; 0x02
     e92:	89 83       	std	Y+1, r24	; 0x01
     e94:	6b 83       	std	Y+3, r22	; 0x03
#ifdef CONFIG_MP
    spin_init( &mutex->lock );
    spin_lock( &mutex->lock );
#endif //CONFIG_MP
    xlist_init( (xlist_t *)mutex );
     e96:	89 81       	ldd	r24, Y+1	; 0x01
     e98:	9a 81       	ldd	r25, Y+2	; 0x02
     e9a:	0e 94 a3 11 	call	0x2346	; 0x2346 <xlist_init>
    mutex->free = (bool_t)1;
     e9e:	e9 81       	ldd	r30, Y+1	; 0x01
     ea0:	fa 81       	ldd	r31, Y+2	; 0x02
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	82 8b       	std	Z+18, r24	; 0x12
#ifdef CONFIG_USE_HIGHEST_LOCKER
    mutex->prio = prio;
     ea6:	e9 81       	ldd	r30, Y+1	; 0x01
     ea8:	fa 81       	ldd	r31, Y+2	; 0x02
     eaa:	8b 81       	ldd	r24, Y+3	; 0x03
     eac:	81 8b       	std	Z+17, r24	; 0x11
#endif // CONFIG_USE_HIGHEST_LOCKER
#ifdef CONFIG_MP
    spin_unlock( &mutex->lock );
#endif //CONFIG_MP
}
     eae:	0f 90       	pop	r0
     eb0:	0f 90       	pop	r0
     eb2:	0f 90       	pop	r0
     eb4:	cf 91       	pop	r28
     eb6:	df 91       	pop	r29
     eb8:	08 95       	ret

00000eba <_mutex_lock>:

// К моменту вызова захвачена блокировка mutex-а, запрещены прерывания
bool_t _mutex_lock( mutex_t * mutex )
{
     eba:	df 93       	push	r29
     ebc:	cf 93       	push	r28
     ebe:	00 d0       	rcall	.+0      	; 0xec0 <_mutex_lock+0x6>
     ec0:	00 d0       	rcall	.+0      	; 0xec2 <_mutex_lock+0x8>
     ec2:	0f 92       	push	r0
     ec4:	cd b7       	in	r28, 0x3d	; 61
     ec6:	de b7       	in	r29, 0x3e	; 62
     ec8:	9d 83       	std	Y+5, r25	; 0x05
     eca:	8c 83       	std	Y+4, r24	; 0x04
#ifdef CONFIG_MP
    spin_lock( &mutex->lock );
#endif //CONFIG_MP
    bool_t ret = mutex->free;
     ecc:	ec 81       	ldd	r30, Y+4	; 0x04
     ece:	fd 81       	ldd	r31, Y+5	; 0x05
     ed0:	82 89       	ldd	r24, Z+18	; 0x12
     ed2:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = current_proc();
     ed4:	0e 94 2e 02 	call	0x45c	; 0x45c <current_proc>
     ed8:	9a 83       	std	Y+2, r25	; 0x02
     eda:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
#ifdef CONFIG_USE_HIGHEST_LOCKER
    _proc_lres_inc( proc, mutex->prio );
     edc:	ec 81       	ldd	r30, Y+4	; 0x04
     ede:	fd 81       	ldd	r31, Y+5	; 0x05
     ee0:	21 89       	ldd	r18, Z+17	; 0x11
     ee2:	89 81       	ldd	r24, Y+1	; 0x01
     ee4:	9a 81       	ldd	r25, Y+2	; 0x02
     ee6:	62 2f       	mov	r22, r18
     ee8:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <_proc_lres_inc>
#else // !CONFIG_USE_HIGHEST_LOCKER
    _proc_lres_inc( proc );
#endif // CONFIG_USE_HIGHEST_LOCKER
    if( ret )
     eec:	8b 81       	ldd	r24, Y+3	; 0x03
     eee:	88 23       	and	r24, r24
     ef0:	41 f0       	breq	.+16     	; 0xf02 <_mutex_lock+0x48>
    {
        mutex->free = (bool_t)0;
     ef2:	ec 81       	ldd	r30, Y+4	; 0x04
     ef4:	fd 81       	ldd	r31, Y+5	; 0x05
     ef6:	12 8a       	std	Z+18, r1	; 0x12
#ifdef CONFIG_USE_HIGHEST_LOCKER
        // Меняем приоритет только здесь
        _proc_prio_control_running( proc );
     ef8:	89 81       	ldd	r24, Y+1	; 0x01
     efa:	9a 81       	ldd	r25, Y+2	; 0x02
     efc:	0e 94 77 0b 	call	0x16ee	; 0x16ee <_proc_prio_control_running>
     f00:	1f c0       	rjmp	.+62     	; 0xf40 <_mutex_lock+0x86>
#endif // CONFIG_USE_HIGHEST_LOCKER
    }
    else
    {
        proc->flags |= PROC_FLG_QUEUE;
     f02:	e9 81       	ldd	r30, Y+1	; 0x01
     f04:	fa 81       	ldd	r31, Y+2	; 0x02
     f06:	83 85       	ldd	r24, Z+11	; 0x0b
     f08:	94 85       	ldd	r25, Z+12	; 0x0c
     f0a:	88 60       	ori	r24, 0x08	; 8
     f0c:	e9 81       	ldd	r30, Y+1	; 0x01
     f0e:	fa 81       	ldd	r31, Y+2	; 0x02
     f10:	94 87       	std	Z+12, r25	; 0x0c
     f12:	83 87       	std	Z+11, r24	; 0x0b
        proc->flags &= ~PROC_FLG_RUN;
     f14:	e9 81       	ldd	r30, Y+1	; 0x01
     f16:	fa 81       	ldd	r31, Y+2	; 0x02
     f18:	83 85       	ldd	r24, Z+11	; 0x0b
     f1a:	94 85       	ldd	r25, Z+12	; 0x0c
     f1c:	8d 7f       	andi	r24, 0xFD	; 253
     f1e:	e9 81       	ldd	r30, Y+1	; 0x01
     f20:	fa 81       	ldd	r31, Y+2	; 0x02
     f22:	94 87       	std	Z+12, r25	; 0x0c
     f24:	83 87       	std	Z+11, r24	; 0x0b
        _proc_stop_( proc );
     f26:	89 81       	ldd	r24, Y+1	; 0x01
     f28:	9a 81       	ldd	r25, Y+2	; 0x02
     f2a:	0e 94 95 04 	call	0x92a	; 0x92a <gitem_cut>
        gitem_insert( (gitem_t *)proc, (xlist_t *)mutex );
     f2e:	89 81       	ldd	r24, Y+1	; 0x01
     f30:	9a 81       	ldd	r25, Y+2	; 0x02
     f32:	2c 81       	ldd	r18, Y+4	; 0x04
     f34:	3d 81       	ldd	r19, Y+5	; 0x05
     f36:	b9 01       	movw	r22, r18
     f38:	0e 94 38 03 	call	0x670	; 0x670 <gitem_insert>
        // Нужна перепланировка
#ifdef CONFIG_MP
        resched( proc->core_id );
#else
        resched();
     f3c:	0e 94 39 02 	call	0x472	; 0x472 <resched>
    }
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
    spin_unlock( &mutex->lock );
#endif // CONFIG_MP
    return ret;
     f40:	8b 81       	ldd	r24, Y+3	; 0x03
}
     f42:	0f 90       	pop	r0
     f44:	0f 90       	pop	r0
     f46:	0f 90       	pop	r0
     f48:	0f 90       	pop	r0
     f4a:	0f 90       	pop	r0
     f4c:	cf 91       	pop	r28
     f4e:	df 91       	pop	r29
     f50:	08 95       	ret

00000f52 <_mutex_try_lock>:

bool_t _mutex_try_lock( mutex_t * mutex )
{
     f52:	df 93       	push	r29
     f54:	cf 93       	push	r28
     f56:	00 d0       	rcall	.+0      	; 0xf58 <_mutex_try_lock+0x6>
     f58:	00 d0       	rcall	.+0      	; 0xf5a <_mutex_try_lock+0x8>
     f5a:	0f 92       	push	r0
     f5c:	cd b7       	in	r28, 0x3d	; 61
     f5e:	de b7       	in	r29, 0x3e	; 62
     f60:	9d 83       	std	Y+5, r25	; 0x05
     f62:	8c 83       	std	Y+4, r24	; 0x04
#ifdef CONFIG_MP
    spin_lock( &mutex->lock );
#endif //CONFIG_MP
    bool_t ret = mutex->free;
     f64:	ec 81       	ldd	r30, Y+4	; 0x04
     f66:	fd 81       	ldd	r31, Y+5	; 0x05
     f68:	82 89       	ldd	r24, Z+18	; 0x12
     f6a:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = current_proc();
     f6c:	0e 94 2e 02 	call	0x45c	; 0x45c <current_proc>
     f70:	9a 83       	std	Y+2, r25	; 0x02
     f72:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    if( ret )
     f74:	8b 81       	ldd	r24, Y+3	; 0x03
     f76:	88 23       	and	r24, r24
     f78:	79 f0       	breq	.+30     	; 0xf98 <_mutex_try_lock+0x46>
    {
        mutex->free = (bool_t)0;
     f7a:	ec 81       	ldd	r30, Y+4	; 0x04
     f7c:	fd 81       	ldd	r31, Y+5	; 0x05
     f7e:	12 8a       	std	Z+18, r1	; 0x12
#ifdef CONFIG_USE_HIGHEST_LOCKER
        _proc_lres_inc( proc, mutex->prio );
     f80:	ec 81       	ldd	r30, Y+4	; 0x04
     f82:	fd 81       	ldd	r31, Y+5	; 0x05
     f84:	21 89       	ldd	r18, Z+17	; 0x11
     f86:	89 81       	ldd	r24, Y+1	; 0x01
     f88:	9a 81       	ldd	r25, Y+2	; 0x02
     f8a:	62 2f       	mov	r22, r18
     f8c:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <_proc_lres_inc>
        _proc_prio_control_running( proc );
     f90:	89 81       	ldd	r24, Y+1	; 0x01
     f92:	9a 81       	ldd	r25, Y+2	; 0x02
     f94:	0e 94 77 0b 	call	0x16ee	; 0x16ee <_proc_prio_control_running>
    }
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
    spin_unlock( &mutex->lock );
#endif // CONFIG_MP
    return ret;
     f98:	8b 81       	ldd	r24, Y+3	; 0x03
}
     f9a:	0f 90       	pop	r0
     f9c:	0f 90       	pop	r0
     f9e:	0f 90       	pop	r0
     fa0:	0f 90       	pop	r0
     fa2:	0f 90       	pop	r0
     fa4:	cf 91       	pop	r28
     fa6:	df 91       	pop	r29
     fa8:	08 95       	ret

00000faa <_mutex_unlock>:

void _mutex_unlock( mutex_t *  mutex )
{
     faa:	df 93       	push	r29
     fac:	cf 93       	push	r28
     fae:	00 d0       	rcall	.+0      	; 0xfb0 <_mutex_unlock+0x6>
     fb0:	00 d0       	rcall	.+0      	; 0xfb2 <_mutex_unlock+0x8>
     fb2:	cd b7       	in	r28, 0x3d	; 61
     fb4:	de b7       	in	r29, 0x3e	; 62
     fb6:	9c 83       	std	Y+4, r25	; 0x04
     fb8:	8b 83       	std	Y+3, r24	; 0x03
#ifdef CONFIG_MP
    spin_lock( &mutex->lock );
#endif //CONFIG_MP
    proc_t * proc = current_proc();
     fba:	0e 94 2e 02 	call	0x45c	; 0x45c <current_proc>
     fbe:	9a 83       	std	Y+2, r25	; 0x02
     fc0:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
#ifdef CONFIG_USE_HIGHEST_LOCKER
    _proc_lres_dec( proc, mutex->prio );
     fc2:	eb 81       	ldd	r30, Y+3	; 0x03
     fc4:	fc 81       	ldd	r31, Y+4	; 0x04
     fc6:	21 89       	ldd	r18, Z+17	; 0x11
     fc8:	89 81       	ldd	r24, Y+1	; 0x01
     fca:	9a 81       	ldd	r25, Y+2	; 0x02
     fcc:	62 2f       	mov	r22, r18
     fce:	0e 94 13 0b 	call	0x1626	; 0x1626 <_proc_lres_dec>
#else
    _proc_lres_dec( proc );
#endif // CONFIG_USE_HIGHEST_LOCKER
    // Если проготовлен и готов к остановке - останавливаем
    if(  ( proc->flags & PROC_FLG_PRE_END ) && (!(proc->flags & PROC_FLG_HOLD))  )
     fd2:	e9 81       	ldd	r30, Y+1	; 0x01
     fd4:	fa 81       	ldd	r31, Y+2	; 0x02
     fd6:	83 85       	ldd	r24, Z+11	; 0x0b
     fd8:	94 85       	ldd	r25, Z+12	; 0x0c
     fda:	80 72       	andi	r24, 0x20	; 32
     fdc:	90 70       	andi	r25, 0x00	; 0
     fde:	00 97       	sbiw	r24, 0x00	; 0
     fe0:	e1 f0       	breq	.+56     	; 0x101a <_mutex_unlock+0x70>
     fe2:	e9 81       	ldd	r30, Y+1	; 0x01
     fe4:	fa 81       	ldd	r31, Y+2	; 0x02
     fe6:	83 85       	ldd	r24, Z+11	; 0x0b
     fe8:	94 85       	ldd	r25, Z+12	; 0x0c
     fea:	84 70       	andi	r24, 0x04	; 4
     fec:	90 70       	andi	r25, 0x00	; 0
     fee:	00 97       	sbiw	r24, 0x00	; 0
     ff0:	a1 f4       	brne	.+40     	; 0x101a <_mutex_unlock+0x70>
    {
        proc->flags &= ~(PROC_FLG_RUN|PROC_FLG_PRE_END);
     ff2:	e9 81       	ldd	r30, Y+1	; 0x01
     ff4:	fa 81       	ldd	r31, Y+2	; 0x02
     ff6:	83 85       	ldd	r24, Z+11	; 0x0b
     ff8:	94 85       	ldd	r25, Z+12	; 0x0c
     ffa:	8d 7d       	andi	r24, 0xDD	; 221
     ffc:	e9 81       	ldd	r30, Y+1	; 0x01
     ffe:	fa 81       	ldd	r31, Y+2	; 0x02
    1000:	94 87       	std	Z+12, r25	; 0x0c
    1002:	83 87       	std	Z+11, r24	; 0x0b
        _proc_stop_( proc );
    1004:	89 81       	ldd	r24, Y+1	; 0x01
    1006:	9a 81       	ldd	r25, Y+2	; 0x02
    1008:	0e 94 95 04 	call	0x92a	; 0x92a <gitem_cut>
#ifdef CONFIG_USE_HIGHEST_LOCKER
        _proc_prio_control_stoped( proc );
    100c:	89 81       	ldd	r24, Y+1	; 0x01
    100e:	9a 81       	ldd	r25, Y+2	; 0x02
    1010:	0e 94 36 0b 	call	0x166c	; 0x166c <_proc_prio_control_stoped>
#endif // CONFIG_USE_HIGHEST_LOCKER
        // Нужна перепланировка, процесс остановили и не запустили обратно
#ifdef CONFIG_MP
        resched( proc->core_id );
#else
        resched();
    1014:	0e 94 39 02 	call	0x472	; 0x472 <resched>
    1018:	04 c0       	rjmp	.+8      	; 0x1022 <_mutex_unlock+0x78>
#endif // CONFIG_MP
    }
#ifdef CONFIG_USE_HIGHEST_LOCKER
    // Не останавливаем - меняем проиритет на ходу
    else _proc_prio_control_running( proc );
    101a:	89 81       	ldd	r24, Y+1	; 0x01
    101c:	9a 81       	ldd	r25, Y+2	; 0x02
    101e:	0e 94 77 0b 	call	0x16ee	; 0x16ee <_proc_prio_control_running>
#endif // CONFIG_USE_HIGHEST_LOCKER
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    // Обрабока самого мьютекса
    if( ((xlist_t *)mutex)->index == (index_t)0  )
    1022:	eb 81       	ldd	r30, Y+3	; 0x03
    1024:	fc 81       	ldd	r31, Y+4	; 0x04
    1026:	80 89       	ldd	r24, Z+16	; 0x10
    1028:	88 23       	and	r24, r24
    102a:	29 f4       	brne	.+10     	; 0x1036 <_mutex_unlock+0x8c>
    {
        // Список ожидающих пуст, выходим
        mutex->free = (bool_t)1;
    102c:	eb 81       	ldd	r30, Y+3	; 0x03
    102e:	fc 81       	ldd	r31, Y+4	; 0x04
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	82 8b       	std	Z+18, r24	; 0x12
    1034:	1b c0       	rjmp	.+54     	; 0x106c <_mutex_unlock+0xc2>
#else
        return;
#endif // CONFIG_MP
    }
    // Список ожидающих не пуст, запускаем голову
    proc = (proc_t *)xlist_head((xlist_t *)mutex);
    1036:	8b 81       	ldd	r24, Y+3	; 0x03
    1038:	9c 81       	ldd	r25, Y+4	; 0x04
    103a:	0e 94 cd 11 	call	0x239a	; 0x239a <xlist_head>
    103e:	9a 83       	std	Y+2, r25	; 0x02
    1040:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    // Сначала надо вырезать
    proc->flags &= ~PROC_FLG_QUEUE;
    1042:	e9 81       	ldd	r30, Y+1	; 0x01
    1044:	fa 81       	ldd	r31, Y+2	; 0x02
    1046:	83 85       	ldd	r24, Z+11	; 0x0b
    1048:	94 85       	ldd	r25, Z+12	; 0x0c
    104a:	87 7f       	andi	r24, 0xF7	; 247
    104c:	e9 81       	ldd	r30, Y+1	; 0x01
    104e:	fa 81       	ldd	r31, Y+2	; 0x02
    1050:	94 87       	std	Z+12, r25	; 0x0c
    1052:	83 87       	std	Z+11, r24	; 0x0b
    gitem_cut( (gitem_t *)proc );
    1054:	89 81       	ldd	r24, Y+1	; 0x01
    1056:	9a 81       	ldd	r25, Y+2	; 0x02
    1058:	0e 94 95 04 	call	0x92a	; 0x92a <gitem_cut>
#ifdef CONFIG_USE_HIGHEST_LOCKER
    // Меняем приоритет
    _proc_prio_control_stoped( proc );
    105c:	89 81       	ldd	r24, Y+1	; 0x01
    105e:	9a 81       	ldd	r25, Y+2	; 0x02
    1060:	0e 94 36 0b 	call	0x166c	; 0x166c <_proc_prio_control_stoped>
#endif // CONFIG_USE_HIGHEST_LOCKER
    _proc_run( proc );
    1064:	89 81       	ldd	r24, Y+1	; 0x01
    1066:	9a 81       	ldd	r25, Y+2	; 0x02
    1068:	0e 94 7d 09 	call	0x12fa	; 0x12fa <_proc_run>
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
exit_label:
    spin_unlock( &mutex->lock );
#endif // CONFIG_MP
}
    106c:	0f 90       	pop	r0
    106e:	0f 90       	pop	r0
    1070:	0f 90       	pop	r0
    1072:	0f 90       	pop	r0
    1074:	cf 91       	pop	r28
    1076:	df 91       	pop	r29
    1078:	08 95       	ret

0000107a <pcounter_init>:
*                           http://www.0chan.ru/r/res/9996.html                          *
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
void pcounter_init(pcounter_t * pcounter)
{
    107a:	df 93       	push	r29
    107c:	cf 93       	push	r28
    107e:	00 d0       	rcall	.+0      	; 0x1080 <pcounter_init+0x6>
    1080:	0f 92       	push	r0
    1082:	cd b7       	in	r28, 0x3d	; 61
    1084:	de b7       	in	r29, 0x3e	; 62
    1086:	9b 83       	std	Y+3, r25	; 0x03
    1088:	8a 83       	std	Y+2, r24	; 0x02
    prio_t p;
    pcounter->index = (index_t)0;
    108a:	ea 81       	ldd	r30, Y+2	; 0x02
    108c:	fb 81       	ldd	r31, Y+3	; 0x03
    108e:	10 8a       	std	Z+16, r1	; 0x10
    for(p = 0; p < (index_t)BITS_IN_INDEX_T; p++)pcounter->counter[p] = (count_t)0;
    1090:	19 82       	std	Y+1, r1	; 0x01
    1092:	0f c0       	rjmp	.+30     	; 0x10b2 <pcounter_init+0x38>
    1094:	89 81       	ldd	r24, Y+1	; 0x01
    1096:	88 2f       	mov	r24, r24
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	2a 81       	ldd	r18, Y+2	; 0x02
    109c:	3b 81       	ldd	r19, Y+3	; 0x03
    109e:	88 0f       	add	r24, r24
    10a0:	99 1f       	adc	r25, r25
    10a2:	f9 01       	movw	r30, r18
    10a4:	e8 0f       	add	r30, r24
    10a6:	f9 1f       	adc	r31, r25
    10a8:	11 82       	std	Z+1, r1	; 0x01
    10aa:	10 82       	st	Z, r1
    10ac:	89 81       	ldd	r24, Y+1	; 0x01
    10ae:	8f 5f       	subi	r24, 0xFF	; 255
    10b0:	89 83       	std	Y+1, r24	; 0x01
    10b2:	89 81       	ldd	r24, Y+1	; 0x01
    10b4:	88 30       	cpi	r24, 0x08	; 8
    10b6:	70 f3       	brcs	.-36     	; 0x1094 <pcounter_init+0x1a>
}
    10b8:	0f 90       	pop	r0
    10ba:	0f 90       	pop	r0
    10bc:	0f 90       	pop	r0
    10be:	cf 91       	pop	r28
    10c0:	df 91       	pop	r29
    10c2:	08 95       	ret

000010c4 <pcounter_inc>:

void pcounter_inc(pcounter_t * pcounter, prio_t prio)
{
    10c4:	df 93       	push	r29
    10c6:	cf 93       	push	r28
    10c8:	00 d0       	rcall	.+0      	; 0x10ca <pcounter_inc+0x6>
    10ca:	0f 92       	push	r0
    10cc:	cd b7       	in	r28, 0x3d	; 61
    10ce:	de b7       	in	r29, 0x3e	; 62
    10d0:	9a 83       	std	Y+2, r25	; 0x02
    10d2:	89 83       	std	Y+1, r24	; 0x01
    10d4:	6b 83       	std	Y+3, r22	; 0x03
    pcounter->counter[prio]++;
    10d6:	8b 81       	ldd	r24, Y+3	; 0x03
    10d8:	68 2f       	mov	r22, r24
    10da:	70 e0       	ldi	r23, 0x00	; 0
    10dc:	29 81       	ldd	r18, Y+1	; 0x01
    10de:	3a 81       	ldd	r19, Y+2	; 0x02
    10e0:	cb 01       	movw	r24, r22
    10e2:	88 0f       	add	r24, r24
    10e4:	99 1f       	adc	r25, r25
    10e6:	f9 01       	movw	r30, r18
    10e8:	e8 0f       	add	r30, r24
    10ea:	f9 1f       	adc	r31, r25
    10ec:	80 81       	ld	r24, Z
    10ee:	91 81       	ldd	r25, Z+1	; 0x01
    10f0:	ac 01       	movw	r20, r24
    10f2:	4f 5f       	subi	r20, 0xFF	; 255
    10f4:	5f 4f       	sbci	r21, 0xFF	; 255
    10f6:	29 81       	ldd	r18, Y+1	; 0x01
    10f8:	3a 81       	ldd	r19, Y+2	; 0x02
    10fa:	cb 01       	movw	r24, r22
    10fc:	88 0f       	add	r24, r24
    10fe:	99 1f       	adc	r25, r25
    1100:	f9 01       	movw	r30, r18
    1102:	e8 0f       	add	r30, r24
    1104:	f9 1f       	adc	r31, r25
    1106:	51 83       	std	Z+1, r21	; 0x01
    1108:	40 83       	st	Z, r20
    pcounter->index |= ((index_t)1)<<prio;
    110a:	e9 81       	ldd	r30, Y+1	; 0x01
    110c:	fa 81       	ldd	r31, Y+2	; 0x02
    110e:	80 89       	ldd	r24, Z+16	; 0x10
    1110:	48 2f       	mov	r20, r24
    1112:	8b 81       	ldd	r24, Y+3	; 0x03
    1114:	28 2f       	mov	r18, r24
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	02 2e       	mov	r0, r18
    111e:	02 c0       	rjmp	.+4      	; 0x1124 <pcounter_inc+0x60>
    1120:	88 0f       	add	r24, r24
    1122:	99 1f       	adc	r25, r25
    1124:	0a 94       	dec	r0
    1126:	e2 f7       	brpl	.-8      	; 0x1120 <pcounter_inc+0x5c>
    1128:	84 2b       	or	r24, r20
    112a:	e9 81       	ldd	r30, Y+1	; 0x01
    112c:	fa 81       	ldd	r31, Y+2	; 0x02
    112e:	80 8b       	std	Z+16, r24	; 0x10
}
    1130:	0f 90       	pop	r0
    1132:	0f 90       	pop	r0
    1134:	0f 90       	pop	r0
    1136:	cf 91       	pop	r28
    1138:	df 91       	pop	r29
    113a:	08 95       	ret

0000113c <pcounter_dec>:

index_t pcounter_dec(pcounter_t * pcounter, prio_t prio)
{
    113c:	df 93       	push	r29
    113e:	cf 93       	push	r28
    1140:	00 d0       	rcall	.+0      	; 0x1142 <pcounter_dec+0x6>
    1142:	00 d0       	rcall	.+0      	; 0x1144 <pcounter_dec+0x8>
    1144:	cd b7       	in	r28, 0x3d	; 61
    1146:	de b7       	in	r29, 0x3e	; 62
    1148:	9b 83       	std	Y+3, r25	; 0x03
    114a:	8a 83       	std	Y+2, r24	; 0x02
    114c:	6c 83       	std	Y+4, r22	; 0x04
    index_t mask = ((index_t)1)<<prio;
    114e:	8c 81       	ldd	r24, Y+4	; 0x04
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	02 c0       	rjmp	.+4      	; 0x115e <pcounter_dec+0x22>
    115a:	88 0f       	add	r24, r24
    115c:	99 1f       	adc	r25, r25
    115e:	2a 95       	dec	r18
    1160:	e2 f7       	brpl	.-8      	; 0x115a <pcounter_dec+0x1e>
    1162:	89 83       	std	Y+1, r24	; 0x01
    pcounter->counter[prio]--;
    1164:	8c 81       	ldd	r24, Y+4	; 0x04
    1166:	68 2f       	mov	r22, r24
    1168:	70 e0       	ldi	r23, 0x00	; 0
    116a:	2a 81       	ldd	r18, Y+2	; 0x02
    116c:	3b 81       	ldd	r19, Y+3	; 0x03
    116e:	cb 01       	movw	r24, r22
    1170:	88 0f       	add	r24, r24
    1172:	99 1f       	adc	r25, r25
    1174:	f9 01       	movw	r30, r18
    1176:	e8 0f       	add	r30, r24
    1178:	f9 1f       	adc	r31, r25
    117a:	80 81       	ld	r24, Z
    117c:	91 81       	ldd	r25, Z+1	; 0x01
    117e:	ac 01       	movw	r20, r24
    1180:	41 50       	subi	r20, 0x01	; 1
    1182:	50 40       	sbci	r21, 0x00	; 0
    1184:	2a 81       	ldd	r18, Y+2	; 0x02
    1186:	3b 81       	ldd	r19, Y+3	; 0x03
    1188:	cb 01       	movw	r24, r22
    118a:	88 0f       	add	r24, r24
    118c:	99 1f       	adc	r25, r25
    118e:	f9 01       	movw	r30, r18
    1190:	e8 0f       	add	r30, r24
    1192:	f9 1f       	adc	r31, r25
    1194:	51 83       	std	Z+1, r21	; 0x01
    1196:	40 83       	st	Z, r20
    if(pcounter->counter[prio] == (count_t)0)pcounter->index &= ~mask;
    1198:	8c 81       	ldd	r24, Y+4	; 0x04
    119a:	88 2f       	mov	r24, r24
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	2a 81       	ldd	r18, Y+2	; 0x02
    11a0:	3b 81       	ldd	r19, Y+3	; 0x03
    11a2:	88 0f       	add	r24, r24
    11a4:	99 1f       	adc	r25, r25
    11a6:	f9 01       	movw	r30, r18
    11a8:	e8 0f       	add	r30, r24
    11aa:	f9 1f       	adc	r31, r25
    11ac:	80 81       	ld	r24, Z
    11ae:	91 81       	ldd	r25, Z+1	; 0x01
    11b0:	00 97       	sbiw	r24, 0x00	; 0
    11b2:	51 f4       	brne	.+20     	; 0x11c8 <pcounter_dec+0x8c>
    11b4:	ea 81       	ldd	r30, Y+2	; 0x02
    11b6:	fb 81       	ldd	r31, Y+3	; 0x03
    11b8:	80 89       	ldd	r24, Z+16	; 0x10
    11ba:	98 2f       	mov	r25, r24
    11bc:	89 81       	ldd	r24, Y+1	; 0x01
    11be:	80 95       	com	r24
    11c0:	89 23       	and	r24, r25
    11c2:	ea 81       	ldd	r30, Y+2	; 0x02
    11c4:	fb 81       	ldd	r31, Y+3	; 0x03
    11c6:	80 8b       	std	Z+16, r24	; 0x10
    return pcounter->index & mask;
    11c8:	ea 81       	ldd	r30, Y+2	; 0x02
    11ca:	fb 81       	ldd	r31, Y+3	; 0x03
    11cc:	90 89       	ldd	r25, Z+16	; 0x10
    11ce:	89 81       	ldd	r24, Y+1	; 0x01
    11d0:	89 23       	and	r24, r25
}
    11d2:	0f 90       	pop	r0
    11d4:	0f 90       	pop	r0
    11d6:	0f 90       	pop	r0
    11d8:	0f 90       	pop	r0
    11da:	cf 91       	pop	r28
    11dc:	df 91       	pop	r29
    11de:	08 95       	ret

000011e0 <proc_init_isr>:
    bool_t is_rt // если true, значит процесс будет иметть поведение RT
#ifdef CONFIG_MP
    ,affinity_t affinity
#endif // CONFIG_MP
)
{
    11e0:	8f 92       	push	r8
    11e2:	af 92       	push	r10
    11e4:	bf 92       	push	r11
    11e6:	cf 92       	push	r12
    11e8:	ef 92       	push	r14
    11ea:	ff 92       	push	r15
    11ec:	0f 93       	push	r16
    11ee:	1f 93       	push	r17
    11f0:	df 93       	push	r29
    11f2:	cf 93       	push	r28
    11f4:	cd b7       	in	r28, 0x3d	; 61
    11f6:	de b7       	in	r29, 0x3e	; 62
    11f8:	62 97       	sbiw	r28, 0x12	; 18
    11fa:	0f b6       	in	r0, 0x3f	; 63
    11fc:	f8 94       	cli
    11fe:	de bf       	out	0x3e, r29	; 62
    1200:	0f be       	out	0x3f, r0	; 63
    1202:	cd bf       	out	0x3d, r28	; 61
    1204:	9a 83       	std	Y+2, r25	; 0x02
    1206:	89 83       	std	Y+1, r24	; 0x01
    1208:	7c 83       	std	Y+4, r23	; 0x04
    120a:	6b 83       	std	Y+3, r22	; 0x03
    120c:	5e 83       	std	Y+6, r21	; 0x06
    120e:	4d 83       	std	Y+5, r20	; 0x05
    1210:	38 87       	std	Y+8, r19	; 0x08
    1212:	2f 83       	std	Y+7, r18	; 0x07
    1214:	1a 87       	std	Y+10, r17	; 0x0a
    1216:	09 87       	std	Y+9, r16	; 0x09
    1218:	fc 86       	std	Y+12, r15	; 0x0c
    121a:	eb 86       	std	Y+11, r14	; 0x0b
    121c:	cd 86       	std	Y+13, r12	; 0x0d
    121e:	bf 86       	std	Y+15, r11	; 0x0f
    1220:	ae 86       	std	Y+14, r10	; 0x0e
    1222:	88 8a       	std	Y+16, r8	; 0x10
#ifdef CONFIG_MP
    spin_init( &proc->lock );
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    gitem_init( (gitem_t *)proc, prio );
    1224:	89 81       	ldd	r24, Y+1	; 0x01
    1226:	9a 81       	ldd	r25, Y+2	; 0x02
    1228:	6d 85       	ldd	r22, Y+13	; 0x0d
    122a:	0e 94 12 03 	call	0x624	; 0x624 <gitem_init>
    proc->flags = ( is_rt )?PROC_FLG_RT:(flag_t)0;
    122e:	88 89       	ldd	r24, Y+16	; 0x10
    1230:	88 23       	and	r24, r24
    1232:	29 f0       	breq	.+10     	; 0x123e <proc_init_isr+0x5e>
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	9a 8b       	std	Y+18, r25	; 0x12
    123a:	89 8b       	std	Y+17, r24	; 0x11
    123c:	02 c0       	rjmp	.+4      	; 0x1242 <proc_init_isr+0x62>
    123e:	1a 8a       	std	Y+18, r1	; 0x12
    1240:	19 8a       	std	Y+17, r1	; 0x11
    1242:	e9 81       	ldd	r30, Y+1	; 0x01
    1244:	fa 81       	ldd	r31, Y+2	; 0x02
    1246:	89 89       	ldd	r24, Y+17	; 0x11
    1248:	9a 89       	ldd	r25, Y+18	; 0x12
    124a:	94 87       	std	Z+12, r25	; 0x0c
    124c:	83 87       	std	Z+11, r24	; 0x0b
#ifdef CONFIG_USE_HIGHEST_LOCKER
    pcounter_init(&proc->lres);
    124e:	89 81       	ldd	r24, Y+1	; 0x01
    1250:	9a 81       	ldd	r25, Y+2	; 0x02
    1252:	0e 96       	adiw	r24, 0x0e	; 14
    1254:	0e 94 3d 08 	call	0x107a	; 0x107a <pcounter_init>
    proc->base_prio = prio;
    1258:	e9 81       	ldd	r30, Y+1	; 0x01
    125a:	fa 81       	ldd	r31, Y+2	; 0x02
    125c:	8d 85       	ldd	r24, Y+13	; 0x0d
    125e:	85 87       	std	Z+13, r24	; 0x0d
#else
    proc->lres = (count_t)0;
#endif
    proc->time_quant = time_quant;
    1260:	8e 85       	ldd	r24, Y+14	; 0x0e
    1262:	9f 85       	ldd	r25, Y+15	; 0x0f
    1264:	e9 81       	ldd	r30, Y+1	; 0x01
    1266:	fa 81       	ldd	r31, Y+2	; 0x02
    1268:	90 a3       	std	Z+32, r25	; 0x20
    126a:	87 8f       	std	Z+31, r24	; 0x1f
    proc->timer = time_quant;
    126c:	8e 85       	ldd	r24, Y+14	; 0x0e
    126e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1270:	e9 81       	ldd	r30, Y+1	; 0x01
    1272:	fa 81       	ldd	r31, Y+2	; 0x02
    1274:	92 a3       	std	Z+34, r25	; 0x22
    1276:	81 a3       	std	Z+33, r24	; 0x21
#ifdef CONFIG_MP
    proc->core_id = (core_id_t)0;
    proc->affinity = affinity;
#endif // CONFIG_MP
    proc->pmain = pmain;
    1278:	e9 81       	ldd	r30, Y+1	; 0x01
    127a:	fa 81       	ldd	r31, Y+2	; 0x02
    127c:	8b 81       	ldd	r24, Y+3	; 0x03
    127e:	9c 81       	ldd	r25, Y+4	; 0x04
    1280:	94 a3       	std	Z+36, r25	; 0x24
    1282:	83 a3       	std	Z+35, r24	; 0x23
    proc->sv_hook = sv_hook;
    1284:	e9 81       	ldd	r30, Y+1	; 0x01
    1286:	fa 81       	ldd	r31, Y+2	; 0x02
    1288:	8d 81       	ldd	r24, Y+5	; 0x05
    128a:	9e 81       	ldd	r25, Y+6	; 0x06
    128c:	96 a3       	std	Z+38, r25	; 0x26
    128e:	85 a3       	std	Z+37, r24	; 0x25
    proc->rs_hook = rs_hook;
    1290:	e9 81       	ldd	r30, Y+1	; 0x01
    1292:	fa 81       	ldd	r31, Y+2	; 0x02
    1294:	8f 81       	ldd	r24, Y+7	; 0x07
    1296:	98 85       	ldd	r25, Y+8	; 0x08
    1298:	90 a7       	std	Z+40, r25	; 0x28
    129a:	87 a3       	std	Z+39, r24	; 0x27
    proc->arg = arg;
    129c:	e9 81       	ldd	r30, Y+1	; 0x01
    129e:	fa 81       	ldd	r31, Y+2	; 0x02
    12a0:	89 85       	ldd	r24, Y+9	; 0x09
    12a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    12a4:	92 a7       	std	Z+42, r25	; 0x2a
    12a6:	81 a7       	std	Z+41, r24	; 0x29
    proc->sstart = sstart;
    12a8:	e9 81       	ldd	r30, Y+1	; 0x01
    12aa:	fa 81       	ldd	r31, Y+2	; 0x02
    12ac:	8b 85       	ldd	r24, Y+11	; 0x0b
    12ae:	9c 85       	ldd	r25, Y+12	; 0x0c
    12b0:	96 a7       	std	Z+46, r25	; 0x2e
    12b2:	85 a7       	std	Z+45, r24	; 0x2d
    if( sstart )proc->spointer = proc_stack_init(sstart, (code_t)proc_run_wrapper, (void *)proc);
    12b4:	8b 85       	ldd	r24, Y+11	; 0x0b
    12b6:	9c 85       	ldd	r25, Y+12	; 0x0c
    12b8:	00 97       	sbiw	r24, 0x00	; 0
    12ba:	71 f0       	breq	.+28     	; 0x12d8 <proc_init_isr+0xf8>
    12bc:	4c e2       	ldi	r20, 0x2C	; 44
    12be:	5f e0       	ldi	r21, 0x0F	; 15
    12c0:	8b 85       	ldd	r24, Y+11	; 0x0b
    12c2:	9c 85       	ldd	r25, Y+12	; 0x0c
    12c4:	29 81       	ldd	r18, Y+1	; 0x01
    12c6:	3a 81       	ldd	r19, Y+2	; 0x02
    12c8:	ba 01       	movw	r22, r20
    12ca:	a9 01       	movw	r20, r18
    12cc:	0e 94 b2 00 	call	0x164	; 0x164 <proc_stack_init>
    12d0:	e9 81       	ldd	r30, Y+1	; 0x01
    12d2:	fa 81       	ldd	r31, Y+2	; 0x02
    12d4:	90 ab       	std	Z+48, r25	; 0x30
    12d6:	87 a7       	std	Z+47, r24	; 0x2f
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
}
    12d8:	62 96       	adiw	r28, 0x12	; 18
    12da:	0f b6       	in	r0, 0x3f	; 63
    12dc:	f8 94       	cli
    12de:	de bf       	out	0x3e, r29	; 62
    12e0:	0f be       	out	0x3f, r0	; 63
    12e2:	cd bf       	out	0x3d, r28	; 61
    12e4:	cf 91       	pop	r28
    12e6:	df 91       	pop	r29
    12e8:	1f 91       	pop	r17
    12ea:	0f 91       	pop	r16
    12ec:	ff 90       	pop	r15
    12ee:	ef 90       	pop	r14
    12f0:	cf 90       	pop	r12
    12f2:	bf 90       	pop	r11
    12f4:	af 90       	pop	r10
    12f6:	8f 90       	pop	r8
    12f8:	08 95       	ret

000012fa <_proc_run>:
    spin_unlock( &proc_sched->lock );
}
#endif // CONFIG_MP

void _proc_run( proc_t * proc )
{
    12fa:	df 93       	push	r29
    12fc:	cf 93       	push	r28
    12fe:	00 d0       	rcall	.+0      	; 0x1300 <_proc_run+0x6>
    1300:	cd b7       	in	r28, 0x3d	; 61
    1302:	de b7       	in	r29, 0x3e	; 62
    1304:	9a 83       	std	Y+2, r25	; 0x02
    1306:	89 83       	std	Y+1, r24	; 0x01
    proc->flags |= PROC_FLG_RUN;
    1308:	e9 81       	ldd	r30, Y+1	; 0x01
    130a:	fa 81       	ldd	r31, Y+2	; 0x02
    130c:	83 85       	ldd	r24, Z+11	; 0x0b
    130e:	94 85       	ldd	r25, Z+12	; 0x0c
    1310:	82 60       	ori	r24, 0x02	; 2
    1312:	e9 81       	ldd	r30, Y+1	; 0x01
    1314:	fa 81       	ldd	r31, Y+2	; 0x02
    1316:	94 87       	std	Z+12, r25	; 0x0c
    1318:	83 87       	std	Z+11, r24	; 0x0b
    spin_lock( &kernel.stat_lock );
    proc->core_id = sched_load_balancer( proc, (stat_t *)kernel.stat );
    stat_inc( proc, (stat_t *)kernel.stat+proc->core_id );
    spin_unlock( &kernel.stat_lock );
#endif
    _proc_run_( proc );
    131a:	89 81       	ldd	r24, Y+1	; 0x01
    131c:	9a 81       	ldd	r25, Y+2	; 0x02
    131e:	20 91 4a 01 	lds	r18, 0x014A
    1322:	30 91 4b 01 	lds	r19, 0x014B
    1326:	b9 01       	movw	r22, r18
    1328:	0e 94 38 03 	call	0x670	; 0x670 <gitem_insert>
#ifdef CONFIG_MP
    resched( proc->core_id );
#else
    resched();
    132c:	0e 94 39 02 	call	0x472	; 0x472 <resched>
#endif // CONFIG_MP
}
    1330:	0f 90       	pop	r0
    1332:	0f 90       	pop	r0
    1334:	cf 91       	pop	r28
    1336:	df 91       	pop	r29
    1338:	08 95       	ret

0000133a <proc_run_isr>:
// Функция общего пользования - запуск процесса из обработчика прерывания, прерывания должны быть запрещены во время запуска
bool_t proc_run_isr(proc_t * proc)
{
    133a:	df 93       	push	r29
    133c:	cf 93       	push	r28
    133e:	00 d0       	rcall	.+0      	; 0x1340 <proc_run_isr+0x6>
    1340:	0f 92       	push	r0
    1342:	cd b7       	in	r28, 0x3d	; 61
    1344:	de b7       	in	r29, 0x3e	; 62
    1346:	9b 83       	std	Y+3, r25	; 0x03
    1348:	8a 83       	std	Y+2, r24	; 0x02
    bool_t ret = (bool_t)1;
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    if( proc->flags & (PROC_FLG_RUN|PROC_FLG_QUEUE|PROC_FLG_WAIT|PROC_FLG_END|PROC_FLG_IPCW_D|PROC_FLG_IPCW_P|PROC_FLG_DEAD) )
    134e:	ea 81       	ldd	r30, Y+2	; 0x02
    1350:	fb 81       	ldd	r31, Y+3	; 0x03
    1352:	83 85       	ldd	r24, Z+11	; 0x0b
    1354:	94 85       	ldd	r25, Z+12	; 0x0c
    1356:	8a 7d       	andi	r24, 0xDA	; 218
    1358:	93 70       	andi	r25, 0x03	; 3
    135a:	00 97       	sbiw	r24, 0x00	; 0
    135c:	11 f0       	breq	.+4      	; 0x1362 <proc_run_isr+0x28>
    {
        ret = (bool_t)0;
    135e:	19 82       	std	Y+1, r1	; 0x01
    1360:	04 c0       	rjmp	.+8      	; 0x136a <proc_run_isr+0x30>
        goto end;
    }
    _proc_run( proc );
    1362:	8a 81       	ldd	r24, Y+2	; 0x02
    1364:	9b 81       	ldd	r25, Y+3	; 0x03
    1366:	0e 94 7d 09 	call	0x12fa	; 0x12fa <_proc_run>
end:
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    return ret;
    136a:	89 81       	ldd	r24, Y+1	; 0x01
}
    136c:	0f 90       	pop	r0
    136e:	0f 90       	pop	r0
    1370:	0f 90       	pop	r0
    1372:	cf 91       	pop	r28
    1374:	df 91       	pop	r29
    1376:	08 95       	ret

00001378 <proc_restart_isr>:
// Перезепуск процесса из обработчика прерываний, прерывания должны быть запрещены
bool_t proc_restart_isr(proc_t * proc)
{
    1378:	df 93       	push	r29
    137a:	cf 93       	push	r28
    137c:	00 d0       	rcall	.+0      	; 0x137e <proc_restart_isr+0x6>
    137e:	00 d0       	rcall	.+0      	; 0x1380 <proc_restart_isr+0x8>
    1380:	0f 92       	push	r0
    1382:	cd b7       	in	r28, 0x3d	; 61
    1384:	de b7       	in	r29, 0x3e	; 62
    1386:	9b 83       	std	Y+3, r25	; 0x03
    1388:	8a 83       	std	Y+2, r24	; 0x02
    bool_t ret = (bool_t)1;
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif
    if( proc->flags & (PROC_FLG_RUN|PROC_FLG_HOLD|PROC_FLG_QUEUE|PROC_FLG_WAIT|PROC_FLG_IPCW_D|PROC_FLG_IPCW_P|PROC_FLG_DEAD) )
    138e:	ea 81       	ldd	r30, Y+2	; 0x02
    1390:	fb 81       	ldd	r31, Y+3	; 0x03
    1392:	83 85       	ldd	r24, Z+11	; 0x0b
    1394:	94 85       	ldd	r25, Z+12	; 0x0c
    1396:	8e 79       	andi	r24, 0x9E	; 158
    1398:	93 70       	andi	r25, 0x03	; 3
    139a:	00 97       	sbiw	r24, 0x00	; 0
    139c:	11 f0       	breq	.+4      	; 0x13a2 <proc_restart_isr+0x2a>
    {
        ret = (bool_t)0;
    139e:	19 82       	std	Y+1, r1	; 0x01
    13a0:	3b c0       	rjmp	.+118    	; 0x1418 <proc_restart_isr+0xa0>
        goto end;
    }
    proc->flags = ( proc->flags & PROC_FLG_RT )?PROC_FLG_RT:(flag_t)0;
    13a2:	ea 81       	ldd	r30, Y+2	; 0x02
    13a4:	fb 81       	ldd	r31, Y+3	; 0x03
    13a6:	83 85       	ldd	r24, Z+11	; 0x0b
    13a8:	94 85       	ldd	r25, Z+12	; 0x0c
    13aa:	81 70       	andi	r24, 0x01	; 1
    13ac:	90 70       	andi	r25, 0x00	; 0
    13ae:	88 23       	and	r24, r24
    13b0:	29 f0       	breq	.+10     	; 0x13bc <proc_restart_isr+0x44>
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	9d 83       	std	Y+5, r25	; 0x05
    13b8:	8c 83       	std	Y+4, r24	; 0x04
    13ba:	02 c0       	rjmp	.+4      	; 0x13c0 <proc_restart_isr+0x48>
    13bc:	1d 82       	std	Y+5, r1	; 0x05
    13be:	1c 82       	std	Y+4, r1	; 0x04
    13c0:	ea 81       	ldd	r30, Y+2	; 0x02
    13c2:	fb 81       	ldd	r31, Y+3	; 0x03
    13c4:	8c 81       	ldd	r24, Y+4	; 0x04
    13c6:	9d 81       	ldd	r25, Y+5	; 0x05
    13c8:	94 87       	std	Z+12, r25	; 0x0c
    13ca:	83 87       	std	Z+11, r24	; 0x0b
#ifdef CONFIG_USE_HIGHEST_LOCKER
    pcounter_init(&proc->lres);
    13cc:	8a 81       	ldd	r24, Y+2	; 0x02
    13ce:	9b 81       	ldd	r25, Y+3	; 0x03
    13d0:	0e 96       	adiw	r24, 0x0e	; 14
    13d2:	0e 94 3d 08 	call	0x107a	; 0x107a <pcounter_init>
#else
    proc->lres = (count_t)0;
#endif
    proc->timer = proc->time_quant;
    13d6:	ea 81       	ldd	r30, Y+2	; 0x02
    13d8:	fb 81       	ldd	r31, Y+3	; 0x03
    13da:	87 8d       	ldd	r24, Z+31	; 0x1f
    13dc:	90 a1       	ldd	r25, Z+32	; 0x20
    13de:	ea 81       	ldd	r30, Y+2	; 0x02
    13e0:	fb 81       	ldd	r31, Y+3	; 0x03
    13e2:	92 a3       	std	Z+34, r25	; 0x22
    13e4:	81 a3       	std	Z+33, r24	; 0x21

    if( proc->sstart )proc->spointer = proc_stack_init( proc->sstart, (code_t)proc_run_wrapper, (void *)proc );
    13e6:	ea 81       	ldd	r30, Y+2	; 0x02
    13e8:	fb 81       	ldd	r31, Y+3	; 0x03
    13ea:	85 a5       	ldd	r24, Z+45	; 0x2d
    13ec:	96 a5       	ldd	r25, Z+46	; 0x2e
    13ee:	00 97       	sbiw	r24, 0x00	; 0
    13f0:	79 f0       	breq	.+30     	; 0x1410 <proc_restart_isr+0x98>
    13f2:	ea 81       	ldd	r30, Y+2	; 0x02
    13f4:	fb 81       	ldd	r31, Y+3	; 0x03
    13f6:	85 a5       	ldd	r24, Z+45	; 0x2d
    13f8:	96 a5       	ldd	r25, Z+46	; 0x2e
    13fa:	2c e2       	ldi	r18, 0x2C	; 44
    13fc:	3f e0       	ldi	r19, 0x0F	; 15
    13fe:	4a 81       	ldd	r20, Y+2	; 0x02
    1400:	5b 81       	ldd	r21, Y+3	; 0x03
    1402:	b9 01       	movw	r22, r18
    1404:	0e 94 b2 00 	call	0x164	; 0x164 <proc_stack_init>
    1408:	ea 81       	ldd	r30, Y+2	; 0x02
    140a:	fb 81       	ldd	r31, Y+3	; 0x03
    140c:	90 ab       	std	Z+48, r25	; 0x30
    140e:	87 a7       	std	Z+47, r24	; 0x2f
    _proc_run( proc );
    1410:	8a 81       	ldd	r24, Y+2	; 0x02
    1412:	9b 81       	ldd	r25, Y+3	; 0x03
    1414:	0e 94 7d 09 	call	0x12fa	; 0x12fa <_proc_run>
end:
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif
    return ret;
    1418:	89 81       	ldd	r24, Y+1	; 0x01
}
    141a:	0f 90       	pop	r0
    141c:	0f 90       	pop	r0
    141e:	0f 90       	pop	r0
    1420:	0f 90       	pop	r0
    1422:	0f 90       	pop	r0
    1424:	cf 91       	pop	r28
    1426:	df 91       	pop	r29
    1428:	08 95       	ret

0000142a <_proc_stop>:
        spin_unlock( xlist_lock );
    }
}
#endif // CONFIG_MP
void _proc_stop(proc_t * proc)
{
    142a:	df 93       	push	r29
    142c:	cf 93       	push	r28
    142e:	00 d0       	rcall	.+0      	; 0x1430 <_proc_stop+0x6>
    1430:	cd b7       	in	r28, 0x3d	; 61
    1432:	de b7       	in	r29, 0x3e	; 62
    1434:	9a 83       	std	Y+2, r25	; 0x02
    1436:	89 83       	std	Y+1, r24	; 0x01
    proc->flags &= ~PROC_FLG_RUN;
    1438:	e9 81       	ldd	r30, Y+1	; 0x01
    143a:	fa 81       	ldd	r31, Y+2	; 0x02
    143c:	83 85       	ldd	r24, Z+11	; 0x0b
    143e:	94 85       	ldd	r25, Z+12	; 0x0c
    1440:	8d 7f       	andi	r24, 0xFD	; 253
    1442:	e9 81       	ldd	r30, Y+1	; 0x01
    1444:	fa 81       	ldd	r31, Y+2	; 0x02
    1446:	94 87       	std	Z+12, r25	; 0x0c
    1448:	83 87       	std	Z+11, r24	; 0x0b
    _proc_stop_( proc );
    144a:	89 81       	ldd	r24, Y+1	; 0x01
    144c:	9a 81       	ldd	r25, Y+2	; 0x02
    144e:	0e 94 95 04 	call	0x92a	; 0x92a <gitem_cut>
#ifdef CONFIG_MP
    resched( proc->core_id );
#else
    resched();
    1452:	0e 94 39 02 	call	0x472	; 0x472 <resched>
#endif // CONFIG_MP
}
    1456:	0f 90       	pop	r0
    1458:	0f 90       	pop	r0
    145a:	cf 91       	pop	r28
    145c:	df 91       	pop	r29
    145e:	08 95       	ret

00001460 <proc_stop_isr>:
// Останов процесса из обработчика прерываний, прерывания должны быть запрещены
bool_t proc_stop_isr(proc_t * proc)
{
    1460:	df 93       	push	r29
    1462:	cf 93       	push	r28
    1464:	00 d0       	rcall	.+0      	; 0x1466 <proc_stop_isr+0x6>
    1466:	0f 92       	push	r0
    1468:	cd b7       	in	r28, 0x3d	; 61
    146a:	de b7       	in	r29, 0x3e	; 62
    146c:	9b 83       	std	Y+3, r25	; 0x03
    146e:	8a 83       	std	Y+2, r24	; 0x02
    bool_t ret = (bool_t)0;
    1470:	19 82       	std	Y+1, r1	; 0x01
#endif // CONFIG_MP
    //Проверка флагов
    //В случчае PROC_FLG_WAIT будем обрабатывать PROC_FLG_PRE_END на выходе из sig_wait.
    //В случае PROC_FLG_HOLD или PROC_FLG_QUEUE будем обрабатывать PROC_FLG_PRE_END при освобождении общего ресурса.
    //В случае ожидания IPC флаг будет обрабатывать ожидающий процесс.
    if( proc->flags & (PROC_FLG_HOLD|PROC_FLG_QUEUE|PROC_FLG_WAIT|PROC_FLG_IPCW_D|PROC_FLG_IPCW_P) )proc->flags |= PROC_FLG_PRE_END;
    1472:	ea 81       	ldd	r30, Y+2	; 0x02
    1474:	fb 81       	ldd	r31, Y+3	; 0x03
    1476:	83 85       	ldd	r24, Z+11	; 0x0b
    1478:	94 85       	ldd	r25, Z+12	; 0x0c
    147a:	8c 71       	andi	r24, 0x1C	; 28
    147c:	93 70       	andi	r25, 0x03	; 3
    147e:	00 97       	sbiw	r24, 0x00	; 0
    1480:	51 f0       	breq	.+20     	; 0x1496 <proc_stop_isr+0x36>
    1482:	ea 81       	ldd	r30, Y+2	; 0x02
    1484:	fb 81       	ldd	r31, Y+3	; 0x03
    1486:	83 85       	ldd	r24, Z+11	; 0x0b
    1488:	94 85       	ldd	r25, Z+12	; 0x0c
    148a:	80 62       	ori	r24, 0x20	; 32
    148c:	ea 81       	ldd	r30, Y+2	; 0x02
    148e:	fb 81       	ldd	r31, Y+3	; 0x03
    1490:	94 87       	std	Z+12, r25	; 0x0c
    1492:	83 87       	std	Z+11, r24	; 0x0b
    1494:	0e c0       	rjmp	.+28     	; 0x14b2 <proc_stop_isr+0x52>
    else if( proc->flags & PROC_FLG_RUN )
    1496:	ea 81       	ldd	r30, Y+2	; 0x02
    1498:	fb 81       	ldd	r31, Y+3	; 0x03
    149a:	83 85       	ldd	r24, Z+11	; 0x0b
    149c:	94 85       	ldd	r25, Z+12	; 0x0c
    149e:	82 70       	andi	r24, 0x02	; 2
    14a0:	90 70       	andi	r25, 0x00	; 0
    14a2:	00 97       	sbiw	r24, 0x00	; 0
    14a4:	31 f0       	breq	.+12     	; 0x14b2 <proc_stop_isr+0x52>
    {
        _proc_stop( proc );
    14a6:	8a 81       	ldd	r24, Y+2	; 0x02
    14a8:	9b 81       	ldd	r25, Y+3	; 0x03
    14aa:	0e 94 15 0a 	call	0x142a	; 0x142a <_proc_stop>
        ret = (bool_t)1;
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	89 83       	std	Y+1, r24	; 0x01
    }
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    return ret;
    14b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    14b4:	0f 90       	pop	r0
    14b6:	0f 90       	pop	r0
    14b8:	0f 90       	pop	r0
    14ba:	cf 91       	pop	r28
    14bc:	df 91       	pop	r29
    14be:	08 95       	ret

000014c0 <_proc_flag_stop>:

void _proc_flag_stop( flag_t mask )
{
    14c0:	df 93       	push	r29
    14c2:	cf 93       	push	r28
    14c4:	00 d0       	rcall	.+0      	; 0x14c6 <_proc_flag_stop+0x6>
    14c6:	00 d0       	rcall	.+0      	; 0x14c8 <_proc_flag_stop+0x8>
    14c8:	cd b7       	in	r28, 0x3d	; 61
    14ca:	de b7       	in	r29, 0x3e	; 62
    14cc:	9c 83       	std	Y+4, r25	; 0x04
    14ce:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = current_proc();
    14d0:	0e 94 2e 02 	call	0x45c	; 0x45c <current_proc>
    14d4:	9a 83       	std	Y+2, r25	; 0x02
    14d6:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif //CONFIG_MP
    proc->flags &= mask;
    14d8:	e9 81       	ldd	r30, Y+1	; 0x01
    14da:	fa 81       	ldd	r31, Y+2	; 0x02
    14dc:	23 85       	ldd	r18, Z+11	; 0x0b
    14de:	34 85       	ldd	r19, Z+12	; 0x0c
    14e0:	8b 81       	ldd	r24, Y+3	; 0x03
    14e2:	9c 81       	ldd	r25, Y+4	; 0x04
    14e4:	82 23       	and	r24, r18
    14e6:	93 23       	and	r25, r19
    14e8:	e9 81       	ldd	r30, Y+1	; 0x01
    14ea:	fa 81       	ldd	r31, Y+2	; 0x02
    14ec:	94 87       	std	Z+12, r25	; 0x0c
    14ee:	83 87       	std	Z+11, r24	; 0x0b
    if(  ( proc->flags & PROC_FLG_PRE_END ) && (!(proc->flags & PROC_FLG_HOLD))  )
    14f0:	e9 81       	ldd	r30, Y+1	; 0x01
    14f2:	fa 81       	ldd	r31, Y+2	; 0x02
    14f4:	83 85       	ldd	r24, Z+11	; 0x0b
    14f6:	94 85       	ldd	r25, Z+12	; 0x0c
    14f8:	80 72       	andi	r24, 0x20	; 32
    14fa:	90 70       	andi	r25, 0x00	; 0
    14fc:	00 97       	sbiw	r24, 0x00	; 0
    14fe:	a9 f0       	breq	.+42     	; 0x152a <_proc_flag_stop+0x6a>
    1500:	e9 81       	ldd	r30, Y+1	; 0x01
    1502:	fa 81       	ldd	r31, Y+2	; 0x02
    1504:	83 85       	ldd	r24, Z+11	; 0x0b
    1506:	94 85       	ldd	r25, Z+12	; 0x0c
    1508:	84 70       	andi	r24, 0x04	; 4
    150a:	90 70       	andi	r25, 0x00	; 0
    150c:	00 97       	sbiw	r24, 0x00	; 0
    150e:	69 f4       	brne	.+26     	; 0x152a <_proc_flag_stop+0x6a>
    {
        proc->flags &= ~PROC_FLG_PRE_END;
    1510:	e9 81       	ldd	r30, Y+1	; 0x01
    1512:	fa 81       	ldd	r31, Y+2	; 0x02
    1514:	83 85       	ldd	r24, Z+11	; 0x0b
    1516:	94 85       	ldd	r25, Z+12	; 0x0c
    1518:	8f 7d       	andi	r24, 0xDF	; 223
    151a:	e9 81       	ldd	r30, Y+1	; 0x01
    151c:	fa 81       	ldd	r31, Y+2	; 0x02
    151e:	94 87       	std	Z+12, r25	; 0x0c
    1520:	83 87       	std	Z+11, r24	; 0x0b
        _proc_stop( proc );
    1522:	89 81       	ldd	r24, Y+1	; 0x01
    1524:	9a 81       	ldd	r25, Y+2	; 0x02
    1526:	0e 94 15 0a 	call	0x142a	; 0x142a <_proc_stop>
    }
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif //CONFIG_MP
}
    152a:	0f 90       	pop	r0
    152c:	0f 90       	pop	r0
    152e:	0f 90       	pop	r0
    1530:	0f 90       	pop	r0
    1532:	cf 91       	pop	r28
    1534:	df 91       	pop	r29
    1536:	08 95       	ret

00001538 <_proc_terminate>:

void _proc_terminate( proc_t * proc )
{
    1538:	df 93       	push	r29
    153a:	cf 93       	push	r28
    153c:	00 d0       	rcall	.+0      	; 0x153e <_proc_terminate+0x6>
    153e:	cd b7       	in	r28, 0x3d	; 61
    1540:	de b7       	in	r29, 0x3e	; 62
    1542:	9a 83       	std	Y+2, r25	; 0x02
    1544:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    // Обрабатываем флаги
    // Нельзя выходить из pmain не освободив все захваченные ресурсы, за это процесс будет "убит"!
    if( proc->flags & PROC_FLG_HOLD ) proc->flags |= PROC_FLG_DEAD;
    1546:	e9 81       	ldd	r30, Y+1	; 0x01
    1548:	fa 81       	ldd	r31, Y+2	; 0x02
    154a:	83 85       	ldd	r24, Z+11	; 0x0b
    154c:	94 85       	ldd	r25, Z+12	; 0x0c
    154e:	84 70       	andi	r24, 0x04	; 4
    1550:	90 70       	andi	r25, 0x00	; 0
    1552:	00 97       	sbiw	r24, 0x00	; 0
    1554:	51 f0       	breq	.+20     	; 0x156a <_proc_terminate+0x32>
    1556:	e9 81       	ldd	r30, Y+1	; 0x01
    1558:	fa 81       	ldd	r31, Y+2	; 0x02
    155a:	83 85       	ldd	r24, Z+11	; 0x0b
    155c:	94 85       	ldd	r25, Z+12	; 0x0c
    155e:	80 68       	ori	r24, 0x80	; 128
    1560:	e9 81       	ldd	r30, Y+1	; 0x01
    1562:	fa 81       	ldd	r31, Y+2	; 0x02
    1564:	94 87       	std	Z+12, r25	; 0x0c
    1566:	83 87       	std	Z+11, r24	; 0x0b
    1568:	09 c0       	rjmp	.+18     	; 0x157c <_proc_terminate+0x44>
    // В противном случае - просто завершаем процесс
    else proc->flags |= PROC_FLG_END;
    156a:	e9 81       	ldd	r30, Y+1	; 0x01
    156c:	fa 81       	ldd	r31, Y+2	; 0x02
    156e:	83 85       	ldd	r24, Z+11	; 0x0b
    1570:	94 85       	ldd	r25, Z+12	; 0x0c
    1572:	80 64       	ori	r24, 0x40	; 64
    1574:	e9 81       	ldd	r30, Y+1	; 0x01
    1576:	fa 81       	ldd	r31, Y+2	; 0x02
    1578:	94 87       	std	Z+12, r25	; 0x0c
    157a:	83 87       	std	Z+11, r24	; 0x0b
    proc->flags &= ~(PROC_FLG_PRE_END|PROC_FLG_RUN);
    157c:	e9 81       	ldd	r30, Y+1	; 0x01
    157e:	fa 81       	ldd	r31, Y+2	; 0x02
    1580:	83 85       	ldd	r24, Z+11	; 0x0b
    1582:	94 85       	ldd	r25, Z+12	; 0x0c
    1584:	8d 7d       	andi	r24, 0xDD	; 221
    1586:	e9 81       	ldd	r30, Y+1	; 0x01
    1588:	fa 81       	ldd	r31, Y+2	; 0x02
    158a:	94 87       	std	Z+12, r25	; 0x0c
    158c:	83 87       	std	Z+11, r24	; 0x0b
    // Останов
    _proc_stop_( proc );
    158e:	89 81       	ldd	r24, Y+1	; 0x01
    1590:	9a 81       	ldd	r25, Y+2	; 0x02
    1592:	0e 94 95 04 	call	0x92a	; 0x92a <gitem_cut>
#ifdef CONFIG_MP
    resched( proc->core_id );
    // На многопроцессорной системе - освободить блокировку
    spin_unlock( &proc->lock );
#else
    resched();
    1596:	0e 94 39 02 	call	0x472	; 0x472 <resched>
#endif // CONFIG_MP
}
    159a:	0f 90       	pop	r0
    159c:	0f 90       	pop	r0
    159e:	cf 91       	pop	r28
    15a0:	df 91       	pop	r29
    15a2:	08 95       	ret

000015a4 <_proc_reset_watchdog>:

void _proc_reset_watchdog( void )
{
    15a4:	df 93       	push	r29
    15a6:	cf 93       	push	r28
    15a8:	00 d0       	rcall	.+0      	; 0x15aa <_proc_reset_watchdog+0x6>
    15aa:	cd b7       	in	r28, 0x3d	; 61
    15ac:	de b7       	in	r29, 0x3e	; 62
    proc_t * proc;
    proc = current_proc();
    15ae:	0e 94 2e 02 	call	0x45c	; 0x45c <current_proc>
    15b2:	9a 83       	std	Y+2, r25	; 0x02
    15b4:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock(&proc->lock);
#endif
    if( proc->flags & PROC_FLG_RT )proc->timer = proc->time_quant;
    15b6:	e9 81       	ldd	r30, Y+1	; 0x01
    15b8:	fa 81       	ldd	r31, Y+2	; 0x02
    15ba:	83 85       	ldd	r24, Z+11	; 0x0b
    15bc:	94 85       	ldd	r25, Z+12	; 0x0c
    15be:	81 70       	andi	r24, 0x01	; 1
    15c0:	90 70       	andi	r25, 0x00	; 0
    15c2:	88 23       	and	r24, r24
    15c4:	41 f0       	breq	.+16     	; 0x15d6 <_proc_reset_watchdog+0x32>
    15c6:	e9 81       	ldd	r30, Y+1	; 0x01
    15c8:	fa 81       	ldd	r31, Y+2	; 0x02
    15ca:	87 8d       	ldd	r24, Z+31	; 0x1f
    15cc:	90 a1       	ldd	r25, Z+32	; 0x20
    15ce:	e9 81       	ldd	r30, Y+1	; 0x01
    15d0:	fa 81       	ldd	r31, Y+2	; 0x02
    15d2:	92 a3       	std	Z+34, r25	; 0x22
    15d4:	81 a3       	std	Z+33, r24	; 0x21
#ifdef CONFIG_MP
    spin_lock(&proc->lock);
#endif
}
    15d6:	0f 90       	pop	r0
    15d8:	0f 90       	pop	r0
    15da:	cf 91       	pop	r28
    15dc:	df 91       	pop	r29
    15de:	08 95       	ret

000015e0 <_proc_lres_inc>:
    proc_t * proc
#ifdef CONFIG_USE_HIGHEST_LOCKER
    ,prio_t prio
#endif
)
{
    15e0:	df 93       	push	r29
    15e2:	cf 93       	push	r28
    15e4:	00 d0       	rcall	.+0      	; 0x15e6 <_proc_lres_inc+0x6>
    15e6:	0f 92       	push	r0
    15e8:	cd b7       	in	r28, 0x3d	; 61
    15ea:	de b7       	in	r29, 0x3e	; 62
    15ec:	9a 83       	std	Y+2, r25	; 0x02
    15ee:	89 83       	std	Y+1, r24	; 0x01
    15f0:	6b 83       	std	Y+3, r22	; 0x03
#ifdef CONFIG_USE_HIGHEST_LOCKER
    if( proc->lres.index == (index_t)0 )proc->flags |= PROC_FLG_HOLD;
    15f2:	e9 81       	ldd	r30, Y+1	; 0x01
    15f4:	fa 81       	ldd	r31, Y+2	; 0x02
    15f6:	86 8d       	ldd	r24, Z+30	; 0x1e
    15f8:	88 23       	and	r24, r24
    15fa:	49 f4       	brne	.+18     	; 0x160e <_proc_lres_inc+0x2e>
    15fc:	e9 81       	ldd	r30, Y+1	; 0x01
    15fe:	fa 81       	ldd	r31, Y+2	; 0x02
    1600:	83 85       	ldd	r24, Z+11	; 0x0b
    1602:	94 85       	ldd	r25, Z+12	; 0x0c
    1604:	84 60       	ori	r24, 0x04	; 4
    1606:	e9 81       	ldd	r30, Y+1	; 0x01
    1608:	fa 81       	ldd	r31, Y+2	; 0x02
    160a:	94 87       	std	Z+12, r25	; 0x0c
    160c:	83 87       	std	Z+11, r24	; 0x0b
    pcounter_inc( &proc->lres, prio );
    160e:	89 81       	ldd	r24, Y+1	; 0x01
    1610:	9a 81       	ldd	r25, Y+2	; 0x02
    1612:	0e 96       	adiw	r24, 0x0e	; 14
    1614:	6b 81       	ldd	r22, Y+3	; 0x03
    1616:	0e 94 62 08 	call	0x10c4	; 0x10c4 <pcounter_inc>
#else
    if( proc->lres == (count_t)0 )proc->flags |= PROC_FLG_HOLD;
    proc->lres++;
#endif
}
    161a:	0f 90       	pop	r0
    161c:	0f 90       	pop	r0
    161e:	0f 90       	pop	r0
    1620:	cf 91       	pop	r28
    1622:	df 91       	pop	r29
    1624:	08 95       	ret

00001626 <_proc_lres_dec>:
    proc_t * proc
#ifdef CONFIG_USE_HIGHEST_LOCKER
    ,prio_t prio
#endif
)
{
    1626:	df 93       	push	r29
    1628:	cf 93       	push	r28
    162a:	00 d0       	rcall	.+0      	; 0x162c <_proc_lres_dec+0x6>
    162c:	0f 92       	push	r0
    162e:	cd b7       	in	r28, 0x3d	; 61
    1630:	de b7       	in	r29, 0x3e	; 62
    1632:	9a 83       	std	Y+2, r25	; 0x02
    1634:	89 83       	std	Y+1, r24	; 0x01
    1636:	6b 83       	std	Y+3, r22	; 0x03
#ifdef CONFIG_USE_HIGHEST_LOCKER
    pcounter_dec( &proc->lres, prio );
    1638:	89 81       	ldd	r24, Y+1	; 0x01
    163a:	9a 81       	ldd	r25, Y+2	; 0x02
    163c:	0e 96       	adiw	r24, 0x0e	; 14
    163e:	6b 81       	ldd	r22, Y+3	; 0x03
    1640:	0e 94 9e 08 	call	0x113c	; 0x113c <pcounter_dec>
    if( proc->lres.index == (index_t)0 )proc->flags &= ~PROC_FLG_HOLD;
    1644:	e9 81       	ldd	r30, Y+1	; 0x01
    1646:	fa 81       	ldd	r31, Y+2	; 0x02
    1648:	86 8d       	ldd	r24, Z+30	; 0x1e
    164a:	88 23       	and	r24, r24
    164c:	49 f4       	brne	.+18     	; 0x1660 <_proc_lres_dec+0x3a>
    164e:	e9 81       	ldd	r30, Y+1	; 0x01
    1650:	fa 81       	ldd	r31, Y+2	; 0x02
    1652:	83 85       	ldd	r24, Z+11	; 0x0b
    1654:	94 85       	ldd	r25, Z+12	; 0x0c
    1656:	8b 7f       	andi	r24, 0xFB	; 251
    1658:	e9 81       	ldd	r30, Y+1	; 0x01
    165a:	fa 81       	ldd	r31, Y+2	; 0x02
    165c:	94 87       	std	Z+12, r25	; 0x0c
    165e:	83 87       	std	Z+11, r24	; 0x0b
#else
    if( proc->lres!= (count_t)0 )proc->lres--;
    if( proc->lres == (count_t)0 )proc->flags &= ~PROC_FLG_HOLD;
#endif
}
    1660:	0f 90       	pop	r0
    1662:	0f 90       	pop	r0
    1664:	0f 90       	pop	r0
    1666:	cf 91       	pop	r28
    1668:	df 91       	pop	r29
    166a:	08 95       	ret

0000166c <_proc_prio_control_stoped>:

#ifdef CONFIG_USE_HIGHEST_LOCKER
// Будет использоваться в mutex-ах и т.п., процесс должен сам вызывать эту функцию, при этом он должен быть вырезан из списка выполняющихся.
void _proc_prio_control_stoped( proc_t * proc )
{
    166c:	df 93       	push	r29
    166e:	cf 93       	push	r28
    1670:	cd b7       	in	r28, 0x3d	; 61
    1672:	de b7       	in	r29, 0x3e	; 62
    1674:	27 97       	sbiw	r28, 0x07	; 7
    1676:	0f b6       	in	r0, 0x3f	; 63
    1678:	f8 94       	cli
    167a:	de bf       	out	0x3e, r29	; 62
    167c:	0f be       	out	0x3f, r0	; 63
    167e:	cd bf       	out	0x3d, r28	; 61
    1680:	9b 83       	std	Y+3, r25	; 0x03
    1682:	8a 83       	std	Y+2, r24	; 0x02
    if(proc->lres.index != (index_t)0)
    1684:	ea 81       	ldd	r30, Y+2	; 0x02
    1686:	fb 81       	ldd	r31, Y+3	; 0x03
    1688:	86 8d       	ldd	r24, Z+30	; 0x1e
    168a:	88 23       	and	r24, r24
    168c:	e9 f0       	breq	.+58     	; 0x16c8 <_proc_prio_control_stoped+0x5c>
    {
        prio_t locker_prio = index_search( proc->lres.index );
    168e:	ea 81       	ldd	r30, Y+2	; 0x02
    1690:	fb 81       	ldd	r31, Y+3	; 0x03
    1692:	86 8d       	ldd	r24, Z+30	; 0x1e
    1694:	0e 94 b9 05 	call	0xb72	; 0xb72 <index_search>
    1698:	89 83       	std	Y+1, r24	; 0x01
        ((gitem_t *)proc)->group->prio = ( locker_prio < proc->base_prio )?locker_prio:proc->base_prio;
    169a:	ea 81       	ldd	r30, Y+2	; 0x02
    169c:	fb 81       	ldd	r31, Y+3	; 0x03
    169e:	84 81       	ldd	r24, Z+4	; 0x04
    16a0:	95 81       	ldd	r25, Z+5	; 0x05
    16a2:	9e 83       	std	Y+6, r25	; 0x06
    16a4:	8d 83       	std	Y+5, r24	; 0x05
    16a6:	ea 81       	ldd	r30, Y+2	; 0x02
    16a8:	fb 81       	ldd	r31, Y+3	; 0x03
    16aa:	85 85       	ldd	r24, Z+13	; 0x0d
    16ac:	99 81       	ldd	r25, Y+1	; 0x01
    16ae:	9f 83       	std	Y+7, r25	; 0x07
    16b0:	8c 83       	std	Y+4, r24	; 0x04
    16b2:	ec 81       	ldd	r30, Y+4	; 0x04
    16b4:	ff 81       	ldd	r31, Y+7	; 0x07
    16b6:	fe 17       	cp	r31, r30
    16b8:	10 f4       	brcc	.+4      	; 0x16be <_proc_prio_control_stoped+0x52>
    16ba:	8f 81       	ldd	r24, Y+7	; 0x07
    16bc:	8c 83       	std	Y+4, r24	; 0x04
    16be:	8c 81       	ldd	r24, Y+4	; 0x04
    16c0:	ed 81       	ldd	r30, Y+5	; 0x05
    16c2:	fe 81       	ldd	r31, Y+6	; 0x06
    16c4:	82 83       	std	Z+2, r24	; 0x02
    16c6:	0a c0       	rjmp	.+20     	; 0x16dc <_proc_prio_control_stoped+0x70>
    }
    else
    {
        ((gitem_t *)proc)->group->prio = proc->base_prio;
    16c8:	ea 81       	ldd	r30, Y+2	; 0x02
    16ca:	fb 81       	ldd	r31, Y+3	; 0x03
    16cc:	a4 81       	ldd	r26, Z+4	; 0x04
    16ce:	b5 81       	ldd	r27, Z+5	; 0x05
    16d0:	ea 81       	ldd	r30, Y+2	; 0x02
    16d2:	fb 81       	ldd	r31, Y+3	; 0x03
    16d4:	85 85       	ldd	r24, Z+13	; 0x0d
    16d6:	12 96       	adiw	r26, 0x02	; 2
    16d8:	8c 93       	st	X, r24
    16da:	12 97       	sbiw	r26, 0x02	; 2
    }
}
    16dc:	27 96       	adiw	r28, 0x07	; 7
    16de:	0f b6       	in	r0, 0x3f	; 63
    16e0:	f8 94       	cli
    16e2:	de bf       	out	0x3e, r29	; 62
    16e4:	0f be       	out	0x3f, r0	; 63
    16e6:	cd bf       	out	0x3d, r28	; 61
    16e8:	cf 91       	pop	r28
    16ea:	df 91       	pop	r29
    16ec:	08 95       	ret

000016ee <_proc_prio_control_running>:
void _proc_prio_control_running( proc_t * proc )
{
    16ee:	df 93       	push	r29
    16f0:	cf 93       	push	r28
    16f2:	00 d0       	rcall	.+0      	; 0x16f4 <_proc_prio_control_running+0x6>
    16f4:	00 d0       	rcall	.+0      	; 0x16f6 <_proc_prio_control_running+0x8>
    16f6:	00 d0       	rcall	.+0      	; 0x16f8 <_proc_prio_control_running+0xa>
    16f8:	cd b7       	in	r28, 0x3d	; 61
    16fa:	de b7       	in	r29, 0x3e	; 62
    16fc:	9c 83       	std	Y+4, r25	; 0x04
    16fe:	8b 83       	std	Y+3, r24	; 0x03
    prio_t new_prio;
    if(proc->lres.index != (index_t)0)
    1700:	eb 81       	ldd	r30, Y+3	; 0x03
    1702:	fc 81       	ldd	r31, Y+4	; 0x04
    1704:	86 8d       	ldd	r24, Z+30	; 0x1e
    1706:	88 23       	and	r24, r24
    1708:	a9 f0       	breq	.+42     	; 0x1734 <_proc_prio_control_running+0x46>
    {
        prio_t locker_prio = index_search( proc->lres.index );
    170a:	eb 81       	ldd	r30, Y+3	; 0x03
    170c:	fc 81       	ldd	r31, Y+4	; 0x04
    170e:	86 8d       	ldd	r24, Z+30	; 0x1e
    1710:	0e 94 b9 05 	call	0xb72	; 0xb72 <index_search>
    1714:	89 83       	std	Y+1, r24	; 0x01
        new_prio = ( locker_prio < proc->base_prio )?locker_prio:proc->base_prio;
    1716:	eb 81       	ldd	r30, Y+3	; 0x03
    1718:	fc 81       	ldd	r31, Y+4	; 0x04
    171a:	85 85       	ldd	r24, Z+13	; 0x0d
    171c:	99 81       	ldd	r25, Y+1	; 0x01
    171e:	9e 83       	std	Y+6, r25	; 0x06
    1720:	8d 83       	std	Y+5, r24	; 0x05
    1722:	8d 81       	ldd	r24, Y+5	; 0x05
    1724:	9e 81       	ldd	r25, Y+6	; 0x06
    1726:	98 17       	cp	r25, r24
    1728:	10 f4       	brcc	.+4      	; 0x172e <_proc_prio_control_running+0x40>
    172a:	8e 81       	ldd	r24, Y+6	; 0x06
    172c:	8d 83       	std	Y+5, r24	; 0x05
    172e:	9d 81       	ldd	r25, Y+5	; 0x05
    1730:	9a 83       	std	Y+2, r25	; 0x02
    1732:	04 c0       	rjmp	.+8      	; 0x173c <_proc_prio_control_running+0x4e>
    }
    else
    {
        new_prio = proc->base_prio;
    1734:	eb 81       	ldd	r30, Y+3	; 0x03
    1736:	fc 81       	ldd	r31, Y+4	; 0x04
    1738:	85 85       	ldd	r24, Z+13	; 0x0d
    173a:	8a 83       	std	Y+2, r24	; 0x02
    }
    if(((gitem_t *)proc)->group->prio != new_prio)
    173c:	eb 81       	ldd	r30, Y+3	; 0x03
    173e:	fc 81       	ldd	r31, Y+4	; 0x04
    1740:	04 80       	ldd	r0, Z+4	; 0x04
    1742:	f5 81       	ldd	r31, Z+5	; 0x05
    1744:	e0 2d       	mov	r30, r0
    1746:	92 81       	ldd	r25, Z+2	; 0x02
    1748:	8a 81       	ldd	r24, Y+2	; 0x02
    174a:	98 17       	cp	r25, r24
    174c:	b1 f0       	breq	.+44     	; 0x177a <_proc_prio_control_running+0x8c>
    {
        _proc_stop_( proc );
    174e:	8b 81       	ldd	r24, Y+3	; 0x03
    1750:	9c 81       	ldd	r25, Y+4	; 0x04
    1752:	0e 94 95 04 	call	0x92a	; 0x92a <gitem_cut>
        ((gitem_t *)proc)->group->prio = new_prio;
    1756:	eb 81       	ldd	r30, Y+3	; 0x03
    1758:	fc 81       	ldd	r31, Y+4	; 0x04
    175a:	04 80       	ldd	r0, Z+4	; 0x04
    175c:	f5 81       	ldd	r31, Z+5	; 0x05
    175e:	e0 2d       	mov	r30, r0
    1760:	8a 81       	ldd	r24, Y+2	; 0x02
    1762:	82 83       	std	Z+2, r24	; 0x02
#ifdef CONFIG_MP
        spin_lock( &kernel.stat_lock );
        stat_inc( proc, (stat_t *)kernel.stat+proc->core_id );
        spin_unlock( &kernel.stat_lock );
#endif
        _proc_run_( proc );
    1764:	8b 81       	ldd	r24, Y+3	; 0x03
    1766:	9c 81       	ldd	r25, Y+4	; 0x04
    1768:	20 91 4a 01 	lds	r18, 0x014A
    176c:	30 91 4b 01 	lds	r19, 0x014B
    1770:	b9 01       	movw	r22, r18
    1772:	0e 94 38 03 	call	0x670	; 0x670 <gitem_insert>
#ifdef CONFIG_MP
        resched(proc->core_id);
#else
        resched();
    1776:	0e 94 39 02 	call	0x472	; 0x472 <resched>
#endif
    }
}
    177a:	26 96       	adiw	r28, 0x06	; 6
    177c:	0f b6       	in	r0, 0x3f	; 63
    177e:	f8 94       	cli
    1780:	de bf       	out	0x3e, r29	; 62
    1782:	0f be       	out	0x3f, r0	; 63
    1784:	cd bf       	out	0x3d, r28	; 61
    1786:	cf 91       	pop	r28
    1788:	df 91       	pop	r29
    178a:	08 95       	ret

0000178c <sched_init>:
*****************************************************************************************/
#include "../include/bugurt.h"
///========================================================================================
// Инициация
void sched_init(sched_t * sched, proc_t * idle)
{
    178c:	df 93       	push	r29
    178e:	cf 93       	push	r28
    1790:	00 d0       	rcall	.+0      	; 0x1792 <sched_init+0x6>
    1792:	00 d0       	rcall	.+0      	; 0x1794 <sched_init+0x8>
    1794:	cd b7       	in	r28, 0x3d	; 61
    1796:	de b7       	in	r29, 0x3e	; 62
    1798:	9a 83       	std	Y+2, r25	; 0x02
    179a:	89 83       	std	Y+1, r24	; 0x01
    179c:	7c 83       	std	Y+4, r23	; 0x04
    179e:	6b 83       	std	Y+3, r22	; 0x03
#ifdef CONFIG_MP
    lock_t * sched_lock = &sched->lock;
    spin_init( sched_lock );
    spin_lock( sched_lock );
#endif // CONFIG_MP
    sched->ready = (xlist_t *)sched->plst;
    17a0:	89 81       	ldd	r24, Y+1	; 0x01
    17a2:	9a 81       	ldd	r25, Y+2	; 0x02
    17a4:	06 96       	adiw	r24, 0x06	; 6
    17a6:	e9 81       	ldd	r30, Y+1	; 0x01
    17a8:	fa 81       	ldd	r31, Y+2	; 0x02
    17aa:	93 83       	std	Z+3, r25	; 0x03
    17ac:	82 83       	std	Z+2, r24	; 0x02
    xlist_init( sched->ready );
    17ae:	e9 81       	ldd	r30, Y+1	; 0x01
    17b0:	fa 81       	ldd	r31, Y+2	; 0x02
    17b2:	82 81       	ldd	r24, Z+2	; 0x02
    17b4:	93 81       	ldd	r25, Z+3	; 0x03
    17b6:	0e 94 a3 11 	call	0x2346	; 0x2346 <xlist_init>
    sched->expired = (xlist_t *)sched->plst + 1;
    17ba:	89 81       	ldd	r24, Y+1	; 0x01
    17bc:	9a 81       	ldd	r25, Y+2	; 0x02
    17be:	47 96       	adiw	r24, 0x17	; 23
    17c0:	e9 81       	ldd	r30, Y+1	; 0x01
    17c2:	fa 81       	ldd	r31, Y+2	; 0x02
    17c4:	95 83       	std	Z+5, r25	; 0x05
    17c6:	84 83       	std	Z+4, r24	; 0x04
    xlist_init( sched->expired );
    17c8:	e9 81       	ldd	r30, Y+1	; 0x01
    17ca:	fa 81       	ldd	r31, Y+2	; 0x02
    17cc:	84 81       	ldd	r24, Z+4	; 0x04
    17ce:	95 81       	ldd	r25, Z+5	; 0x05
    17d0:	0e 94 a3 11 	call	0x2346	; 0x2346 <xlist_init>
    gitem_insert( (gitem_t *)idle, sched->ready );
    17d4:	8b 81       	ldd	r24, Y+3	; 0x03
    17d6:	9c 81       	ldd	r25, Y+4	; 0x04
    17d8:	e9 81       	ldd	r30, Y+1	; 0x01
    17da:	fa 81       	ldd	r31, Y+2	; 0x02
    17dc:	22 81       	ldd	r18, Z+2	; 0x02
    17de:	33 81       	ldd	r19, Z+3	; 0x03
    17e0:	b9 01       	movw	r22, r18
    17e2:	0e 94 38 03 	call	0x670	; 0x670 <gitem_insert>
    sched->current_proc = idle;
    17e6:	e9 81       	ldd	r30, Y+1	; 0x01
    17e8:	fa 81       	ldd	r31, Y+2	; 0x02
    17ea:	8b 81       	ldd	r24, Y+3	; 0x03
    17ec:	9c 81       	ldd	r25, Y+4	; 0x04
    17ee:	91 83       	std	Z+1, r25	; 0x01
    17f0:	80 83       	st	Z, r24
    sched->nested_crit_sec = (count_t)0;//вообще это выполняется при запрещенных прерываниях, но не известно, на этом ли процессоре
    17f2:	e9 81       	ldd	r30, Y+1	; 0x01
    17f4:	fa 81       	ldd	r31, Y+2	; 0x02
    17f6:	11 a6       	std	Z+41, r1	; 0x29
    17f8:	10 a6       	std	Z+40, r1	; 0x28
#ifdef CONFIG_MP
    spin_unlock( sched_lock );
    stat_inc( idle, (stat_t *)kernel.stat + idle->core_id );
#endif // CONFIG_MP
}
    17fa:	0f 90       	pop	r0
    17fc:	0f 90       	pop	r0
    17fe:	0f 90       	pop	r0
    1800:	0f 90       	pop	r0
    1802:	cf 91       	pop	r28
    1804:	df 91       	pop	r29
    1806:	08 95       	ret

00001808 <_sched_list_switch>:
static void _sched_list_switch( sched_t * sched )
{
    1808:	df 93       	push	r29
    180a:	cf 93       	push	r28
    180c:	00 d0       	rcall	.+0      	; 0x180e <_sched_list_switch+0x6>
    180e:	00 d0       	rcall	.+0      	; 0x1810 <_sched_list_switch+0x8>
    1810:	cd b7       	in	r28, 0x3d	; 61
    1812:	de b7       	in	r29, 0x3e	; 62
    1814:	9c 83       	std	Y+4, r25	; 0x04
    1816:	8b 83       	std	Y+3, r24	; 0x03
    // Список ready опустел, переключаем списки
    if( sched->ready->index == (index_t)0 )
    1818:	eb 81       	ldd	r30, Y+3	; 0x03
    181a:	fc 81       	ldd	r31, Y+4	; 0x04
    181c:	02 80       	ldd	r0, Z+2	; 0x02
    181e:	f3 81       	ldd	r31, Z+3	; 0x03
    1820:	e0 2d       	mov	r30, r0
    1822:	80 89       	ldd	r24, Z+16	; 0x10
    1824:	88 23       	and	r24, r24
    1826:	a1 f4       	brne	.+40     	; 0x1850 <_sched_list_switch+0x48>
    {
        xlist_t * buf = sched->ready;
    1828:	eb 81       	ldd	r30, Y+3	; 0x03
    182a:	fc 81       	ldd	r31, Y+4	; 0x04
    182c:	82 81       	ldd	r24, Z+2	; 0x02
    182e:	93 81       	ldd	r25, Z+3	; 0x03
    1830:	9a 83       	std	Y+2, r25	; 0x02
    1832:	89 83       	std	Y+1, r24	; 0x01
        sched->ready = sched->expired;
    1834:	eb 81       	ldd	r30, Y+3	; 0x03
    1836:	fc 81       	ldd	r31, Y+4	; 0x04
    1838:	84 81       	ldd	r24, Z+4	; 0x04
    183a:	95 81       	ldd	r25, Z+5	; 0x05
    183c:	eb 81       	ldd	r30, Y+3	; 0x03
    183e:	fc 81       	ldd	r31, Y+4	; 0x04
    1840:	93 83       	std	Z+3, r25	; 0x03
    1842:	82 83       	std	Z+2, r24	; 0x02
        sched->expired = buf;
    1844:	eb 81       	ldd	r30, Y+3	; 0x03
    1846:	fc 81       	ldd	r31, Y+4	; 0x04
    1848:	89 81       	ldd	r24, Y+1	; 0x01
    184a:	9a 81       	ldd	r25, Y+2	; 0x02
    184c:	95 83       	std	Z+5, r25	; 0x05
    184e:	84 83       	std	Z+4, r24	; 0x04
    }
}
    1850:	0f 90       	pop	r0
    1852:	0f 90       	pop	r0
    1854:	0f 90       	pop	r0
    1856:	0f 90       	pop	r0
    1858:	cf 91       	pop	r28
    185a:	df 91       	pop	r29
    185c:	08 95       	ret

0000185e <sched_schedule>:
                    sched_t * sched
#else
                    void
#endif // CONFIG_MP
                    )
{
    185e:	df 93       	push	r29
    1860:	cf 93       	push	r28
    1862:	00 d0       	rcall	.+0      	; 0x1864 <sched_schedule+0x6>
    1864:	00 d0       	rcall	.+0      	; 0x1866 <sched_schedule+0x8>
    1866:	00 d0       	rcall	.+0      	; 0x1868 <sched_schedule+0xa>
    1868:	cd b7       	in	r28, 0x3d	; 61
    186a:	de b7       	in	r29, 0x3e	; 62
#ifndef CONFIG_MP
    sched_t * sched = (sched_t *)&kernel.sched;
    186c:	88 e4       	ldi	r24, 0x48	; 72
    186e:	91 e0       	ldi	r25, 0x01	; 1
    1870:	9e 83       	std	Y+6, r25	; 0x06
    1872:	8d 83       	std	Y+5, r24	; 0x05
#endif // nCONFIG_MP
    // Меняем только с локального процессора, блокировку sched->lock можно не захватывать!
    proc_t * current_proc = sched->current_proc;
    1874:	ed 81       	ldd	r30, Y+5	; 0x05
    1876:	fe 81       	ldd	r31, Y+6	; 0x06
    1878:	80 81       	ld	r24, Z
    187a:	91 81       	ldd	r25, Z+1	; 0x01
    187c:	9c 83       	std	Y+4, r25	; 0x04
    187e:	8b 83       	std	Y+3, r24	; 0x03
#ifdef CONFIG_MP
    // А вот эту блокировку обязательно надо захватить!
    spin_lock( &current_proc->lock );
#endif // CONFIG_MP
    // Хук "сохранение контекста"
    if( current_proc->sv_hook )current_proc->sv_hook( current_proc->arg );
    1880:	eb 81       	ldd	r30, Y+3	; 0x03
    1882:	fc 81       	ldd	r31, Y+4	; 0x04
    1884:	85 a1       	ldd	r24, Z+37	; 0x25
    1886:	96 a1       	ldd	r25, Z+38	; 0x26
    1888:	00 97       	sbiw	r24, 0x00	; 0
    188a:	51 f0       	breq	.+20     	; 0x18a0 <sched_schedule+0x42>
    188c:	eb 81       	ldd	r30, Y+3	; 0x03
    188e:	fc 81       	ldd	r31, Y+4	; 0x04
    1890:	25 a1       	ldd	r18, Z+37	; 0x25
    1892:	36 a1       	ldd	r19, Z+38	; 0x26
    1894:	eb 81       	ldd	r30, Y+3	; 0x03
    1896:	fc 81       	ldd	r31, Y+4	; 0x04
    1898:	81 a5       	ldd	r24, Z+41	; 0x29
    189a:	92 a5       	ldd	r25, Z+42	; 0x2a
    189c:	f9 01       	movw	r30, r18
    189e:	09 95       	icall
    // Проверяем, что процесс находится в списке ready
    if( (xlist_t *)((gitem_t *)current_proc)->group->link == sched->ready )
    18a0:	eb 81       	ldd	r30, Y+3	; 0x03
    18a2:	fc 81       	ldd	r31, Y+4	; 0x04
    18a4:	04 80       	ldd	r0, Z+4	; 0x04
    18a6:	f5 81       	ldd	r31, Z+5	; 0x05
    18a8:	e0 2d       	mov	r30, r0
    18aa:	80 81       	ld	r24, Z
    18ac:	91 81       	ldd	r25, Z+1	; 0x01
    18ae:	9c 01       	movw	r18, r24
    18b0:	ed 81       	ldd	r30, Y+5	; 0x05
    18b2:	fe 81       	ldd	r31, Y+6	; 0x06
    18b4:	82 81       	ldd	r24, Z+2	; 0x02
    18b6:	93 81       	ldd	r25, Z+3	; 0x03
    18b8:	28 17       	cp	r18, r24
    18ba:	39 07       	cpc	r19, r25
    18bc:	09 f0       	breq	.+2      	; 0x18c0 <sched_schedule+0x62>
    18be:	50 c0       	rjmp	.+160    	; 0x1960 <sched_schedule+0x102>
    {
        // Переключаем cписок на следующий за текущим процесс
#ifdef CONFIG_MP
        spin_lock( &sched->lock );
#endif // CONFIG_MP
        xlist_switch( sched->ready, ((gitem_t *)current_proc)->group->prio );
    18c0:	ed 81       	ldd	r30, Y+5	; 0x05
    18c2:	fe 81       	ldd	r31, Y+6	; 0x06
    18c4:	82 81       	ldd	r24, Z+2	; 0x02
    18c6:	93 81       	ldd	r25, Z+3	; 0x03
    18c8:	eb 81       	ldd	r30, Y+3	; 0x03
    18ca:	fc 81       	ldd	r31, Y+4	; 0x04
    18cc:	04 80       	ldd	r0, Z+4	; 0x04
    18ce:	f5 81       	ldd	r31, Z+5	; 0x05
    18d0:	e0 2d       	mov	r30, r0
    18d2:	22 81       	ldd	r18, Z+2	; 0x02
    18d4:	62 2f       	mov	r22, r18
    18d6:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <xlist_switch>
#ifdef CONFIG_MP
        spin_unlock( &sched->lock );
#endif // CONFIG_MP
        //Проверяем, не истек ли квант времени процесса
        if( current_proc->timer > (timer_t)1 )current_proc->timer--;// Не истек, уменьшаем таймер
    18da:	eb 81       	ldd	r30, Y+3	; 0x03
    18dc:	fc 81       	ldd	r31, Y+4	; 0x04
    18de:	81 a1       	ldd	r24, Z+33	; 0x21
    18e0:	92 a1       	ldd	r25, Z+34	; 0x22
    18e2:	82 30       	cpi	r24, 0x02	; 2
    18e4:	91 05       	cpc	r25, r1
    18e6:	50 f0       	brcs	.+20     	; 0x18fc <sched_schedule+0x9e>
    18e8:	eb 81       	ldd	r30, Y+3	; 0x03
    18ea:	fc 81       	ldd	r31, Y+4	; 0x04
    18ec:	81 a1       	ldd	r24, Z+33	; 0x21
    18ee:	92 a1       	ldd	r25, Z+34	; 0x22
    18f0:	01 97       	sbiw	r24, 0x01	; 1
    18f2:	eb 81       	ldd	r30, Y+3	; 0x03
    18f4:	fc 81       	ldd	r31, Y+4	; 0x04
    18f6:	92 a3       	std	Z+34, r25	; 0x22
    18f8:	81 a3       	std	Z+33, r24	; 0x21
    18fa:	32 c0       	rjmp	.+100    	; 0x1960 <sched_schedule+0x102>
        {
            // Истек, вырезаем процесс из списка
#ifdef CONFIG_MP
            spin_lock( &sched->lock );
#endif // CONFIG_MP
            gitem_fast_cut( (gitem_t *)current_proc );
    18fc:	8b 81       	ldd	r24, Y+3	; 0x03
    18fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1900:	0e 94 0f 04 	call	0x81e	; 0x81e <gitem_fast_cut>
            // Обновили статистику после удаления процесса из списка ready
            stat_dec( current_proc, (stat_t *)kernel.stat + current_proc->core_id );
#endif // CONFIG_USE_ALB
#endif // CONFIG_MP
            // А что за процесс собственно?
            flag_t flags = current_proc->flags;
    1904:	eb 81       	ldd	r30, Y+3	; 0x03
    1906:	fc 81       	ldd	r31, Y+4	; 0x04
    1908:	83 85       	ldd	r24, Z+11	; 0x0b
    190a:	94 85       	ldd	r25, Z+12	; 0x0c
    190c:	9a 83       	std	Y+2, r25	; 0x02
    190e:	89 83       	std	Y+1, r24	; 0x01
            if(
                (!(flags & PROC_FLG_RT))
    1910:	89 81       	ldd	r24, Y+1	; 0x01
    1912:	9a 81       	ldd	r25, Y+2	; 0x02
    1914:	81 70       	andi	r24, 0x01	; 1
    1916:	90 70       	andi	r25, 0x00	; 0
            stat_dec( current_proc, (stat_t *)kernel.stat + current_proc->core_id );
#endif // CONFIG_USE_ALB
#endif // CONFIG_MP
            // А что за процесс собственно?
            flag_t flags = current_proc->flags;
            if(
    1918:	00 97       	sbiw	r24, 0x00	; 0
    191a:	91 f4       	brne	.+36     	; 0x1940 <sched_schedule+0xe2>
                ||(flags & PROC_FLG_HOLD)
#endif // CONFIG_HARD_RT
            )
            {
                //Процесс общего назначения, либо он удерживает общий ресурс, сбрасываем таймер и переносим в очередь expired
                current_proc->timer = current_proc->time_quant;
    191c:	eb 81       	ldd	r30, Y+3	; 0x03
    191e:	fc 81       	ldd	r31, Y+4	; 0x04
    1920:	87 8d       	ldd	r24, Z+31	; 0x1f
    1922:	90 a1       	ldd	r25, Z+32	; 0x20
    1924:	eb 81       	ldd	r30, Y+3	; 0x03
    1926:	fc 81       	ldd	r31, Y+4	; 0x04
    1928:	92 a3       	std	Z+34, r25	; 0x22
    192a:	81 a3       	std	Z+33, r24	; 0x21
#else // CONFIG_MP CONFIG_USE_ALB
                // Тупо переносим процесс в список expired
#ifdef CONFIG_MP
                spin_lock( &sched->lock );
#endif // CONFIG_MP
                gitem_insert( (gitem_t *)current_proc, sched->expired );
    192c:	8b 81       	ldd	r24, Y+3	; 0x03
    192e:	9c 81       	ldd	r25, Y+4	; 0x04
    1930:	ed 81       	ldd	r30, Y+5	; 0x05
    1932:	fe 81       	ldd	r31, Y+6	; 0x06
    1934:	24 81       	ldd	r18, Z+4	; 0x04
    1936:	35 81       	ldd	r19, Z+5	; 0x05
    1938:	b9 01       	movw	r22, r18
    193a:	0e 94 38 03 	call	0x670	; 0x670 <gitem_insert>
    193e:	10 c0       	rjmp	.+32     	; 0x1960 <sched_schedule+0x102>
                spin_lock( &kernel.stat_lock );
                stat_dec( current_proc, (stat_t *)kernel.stat + current_proc->core_id );
#endif // nCONFIG_USE_ALB
                spin_unlock( &kernel.stat_lock );
#endif // CONFIG_MP
                ((gitem_t *)current_proc)->group->link = (void *)0;// Просто вырезали из списка, как в gitem_cut
    1940:	eb 81       	ldd	r30, Y+3	; 0x03
    1942:	fc 81       	ldd	r31, Y+4	; 0x04
    1944:	04 80       	ldd	r0, Z+4	; 0x04
    1946:	f5 81       	ldd	r31, Z+5	; 0x05
    1948:	e0 2d       	mov	r30, r0
    194a:	11 82       	std	Z+1, r1	; 0x01
    194c:	10 82       	st	Z, r1
                current_proc->flags &= ~PROC_FLG_RUN;
    194e:	eb 81       	ldd	r30, Y+3	; 0x03
    1950:	fc 81       	ldd	r31, Y+4	; 0x04
    1952:	83 85       	ldd	r24, Z+11	; 0x0b
    1954:	94 85       	ldd	r25, Z+12	; 0x0c
    1956:	8d 7f       	andi	r24, 0xFD	; 253
    1958:	eb 81       	ldd	r30, Y+3	; 0x03
    195a:	fc 81       	ldd	r31, Y+4	; 0x04
    195c:	94 87       	std	Z+12, r25	; 0x0c
    195e:	83 87       	std	Z+11, r24	; 0x0b
#ifdef CONFIG_MP
    //Текущий процесс более не нужен, освобождаем его блокировку
    spin_unlock( &current_proc->lock );
    spin_lock( &sched->lock );
#endif // CONFIG_MP
    _sched_list_switch( sched );
    1960:	8d 81       	ldd	r24, Y+5	; 0x05
    1962:	9e 81       	ldd	r25, Y+6	; 0x06
    1964:	0e 94 04 0c 	call	0x1808	; 0x1808 <_sched_list_switch>
    // Изменять указатель будем при захваченной блокировке,
    // чтобы процессы на других процессорах не прочитали неизвестно что.
    current_proc = (proc_t *)xlist_head( sched->ready ); // Вытесняющая многозадачность же!
    1968:	ed 81       	ldd	r30, Y+5	; 0x05
    196a:	fe 81       	ldd	r31, Y+6	; 0x06
    196c:	82 81       	ldd	r24, Z+2	; 0x02
    196e:	93 81       	ldd	r25, Z+3	; 0x03
    1970:	0e 94 cd 11 	call	0x239a	; 0x239a <xlist_head>
    1974:	9c 83       	std	Y+4, r25	; 0x04
    1976:	8b 83       	std	Y+3, r24	; 0x03
    sched->current_proc = current_proc;
    1978:	ed 81       	ldd	r30, Y+5	; 0x05
    197a:	fe 81       	ldd	r31, Y+6	; 0x06
    197c:	8b 81       	ldd	r24, Y+3	; 0x03
    197e:	9c 81       	ldd	r25, Y+4	; 0x04
    1980:	91 83       	std	Z+1, r25	; 0x01
    1982:	80 83       	st	Z, r24
#ifdef CONFIG_MP
    spin_unlock( &sched->lock );
    spin_lock( &current_proc->lock );
#endif // CONFIG_MP
    //Хук "восстановление контекста"
    if( current_proc->rs_hook )current_proc->rs_hook( current_proc->arg );
    1984:	eb 81       	ldd	r30, Y+3	; 0x03
    1986:	fc 81       	ldd	r31, Y+4	; 0x04
    1988:	87 a1       	ldd	r24, Z+39	; 0x27
    198a:	90 a5       	ldd	r25, Z+40	; 0x28
    198c:	00 97       	sbiw	r24, 0x00	; 0
    198e:	51 f0       	breq	.+20     	; 0x19a4 <sched_schedule+0x146>
    1990:	eb 81       	ldd	r30, Y+3	; 0x03
    1992:	fc 81       	ldd	r31, Y+4	; 0x04
    1994:	27 a1       	ldd	r18, Z+39	; 0x27
    1996:	30 a5       	ldd	r19, Z+40	; 0x28
    1998:	eb 81       	ldd	r30, Y+3	; 0x03
    199a:	fc 81       	ldd	r31, Y+4	; 0x04
    199c:	81 a5       	ldd	r24, Z+41	; 0x29
    199e:	92 a5       	ldd	r25, Z+42	; 0x2a
    19a0:	f9 01       	movw	r30, r18
    19a2:	09 95       	icall
#ifdef CONFIG_MP
    spin_unlock( &current_proc->lock );
#endif // CONFIG_MP
}
    19a4:	26 96       	adiw	r28, 0x06	; 6
    19a6:	0f b6       	in	r0, 0x3f	; 63
    19a8:	f8 94       	cli
    19aa:	de bf       	out	0x3e, r29	; 62
    19ac:	0f be       	out	0x3f, r0	; 63
    19ae:	cd bf       	out	0x3d, r28	; 61
    19b0:	cf 91       	pop	r28
    19b2:	df 91       	pop	r29
    19b4:	08 95       	ret

000019b6 <sched_reschedule>:
                        sched_t * sched
#else
                        void
#endif // CONFIG_MP
                       )
{
    19b6:	df 93       	push	r29
    19b8:	cf 93       	push	r28
    19ba:	00 d0       	rcall	.+0      	; 0x19bc <sched_reschedule+0x6>
    19bc:	00 d0       	rcall	.+0      	; 0x19be <sched_reschedule+0x8>
    19be:	cd b7       	in	r28, 0x3d	; 61
    19c0:	de b7       	in	r29, 0x3e	; 62
#ifndef CONFIG_MP
    sched_t * sched = (sched_t *)&kernel.sched;
    19c2:	88 e4       	ldi	r24, 0x48	; 72
    19c4:	91 e0       	ldi	r25, 0x01	; 1
    19c6:	9c 83       	std	Y+4, r25	; 0x04
    19c8:	8b 83       	std	Y+3, r24	; 0x03
#endif // nCONFIG_MP
    // Меняем только с локального процессора, блокировку sched->lock можно не захватывать!
    proc_t * current_proc = sched->current_proc;
    19ca:	eb 81       	ldd	r30, Y+3	; 0x03
    19cc:	fc 81       	ldd	r31, Y+4	; 0x04
    19ce:	80 81       	ld	r24, Z
    19d0:	91 81       	ldd	r25, Z+1	; 0x01
    19d2:	9a 83       	std	Y+2, r25	; 0x02
    19d4:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    // А вот эту блокировку обязательно надо захватить!
    spin_lock( &current_proc->lock );
#endif // CONFIG_MP
    // Хук "сохранение контекста"
    if( current_proc->sv_hook )current_proc->sv_hook( current_proc->arg );
    19d6:	e9 81       	ldd	r30, Y+1	; 0x01
    19d8:	fa 81       	ldd	r31, Y+2	; 0x02
    19da:	85 a1       	ldd	r24, Z+37	; 0x25
    19dc:	96 a1       	ldd	r25, Z+38	; 0x26
    19de:	00 97       	sbiw	r24, 0x00	; 0
    19e0:	51 f0       	breq	.+20     	; 0x19f6 <sched_reschedule+0x40>
    19e2:	e9 81       	ldd	r30, Y+1	; 0x01
    19e4:	fa 81       	ldd	r31, Y+2	; 0x02
    19e6:	25 a1       	ldd	r18, Z+37	; 0x25
    19e8:	36 a1       	ldd	r19, Z+38	; 0x26
    19ea:	e9 81       	ldd	r30, Y+1	; 0x01
    19ec:	fa 81       	ldd	r31, Y+2	; 0x02
    19ee:	81 a5       	ldd	r24, Z+41	; 0x29
    19f0:	92 a5       	ldd	r25, Z+42	; 0x2a
    19f2:	f9 01       	movw	r30, r18
    19f4:	09 95       	icall
#ifdef CONFIG_MP
    spin_unlock( &current_proc->lock );
    spin_lock( &sched->lock );
#endif // CONFIG_MP
    _sched_list_switch( sched );
    19f6:	8b 81       	ldd	r24, Y+3	; 0x03
    19f8:	9c 81       	ldd	r25, Y+4	; 0x04
    19fa:	0e 94 04 0c 	call	0x1808	; 0x1808 <_sched_list_switch>
    current_proc = (proc_t *)xlist_head( sched->ready ); // Вытесняющая многозадачность же!
    19fe:	eb 81       	ldd	r30, Y+3	; 0x03
    1a00:	fc 81       	ldd	r31, Y+4	; 0x04
    1a02:	82 81       	ldd	r24, Z+2	; 0x02
    1a04:	93 81       	ldd	r25, Z+3	; 0x03
    1a06:	0e 94 cd 11 	call	0x239a	; 0x239a <xlist_head>
    1a0a:	9a 83       	std	Y+2, r25	; 0x02
    1a0c:	89 83       	std	Y+1, r24	; 0x01
    sched->current_proc = current_proc;
    1a0e:	eb 81       	ldd	r30, Y+3	; 0x03
    1a10:	fc 81       	ldd	r31, Y+4	; 0x04
    1a12:	89 81       	ldd	r24, Y+1	; 0x01
    1a14:	9a 81       	ldd	r25, Y+2	; 0x02
    1a16:	91 83       	std	Z+1, r25	; 0x01
    1a18:	80 83       	st	Z, r24

#ifdef CONFIG_MP
    spin_lock(&current_proc->lock);
#endif // CONFIG_MP
    //Хук "восстановление контекста"
    if( current_proc->rs_hook )current_proc->rs_hook( current_proc->arg );
    1a1a:	e9 81       	ldd	r30, Y+1	; 0x01
    1a1c:	fa 81       	ldd	r31, Y+2	; 0x02
    1a1e:	87 a1       	ldd	r24, Z+39	; 0x27
    1a20:	90 a5       	ldd	r25, Z+40	; 0x28
    1a22:	00 97       	sbiw	r24, 0x00	; 0
    1a24:	51 f0       	breq	.+20     	; 0x1a3a <sched_reschedule+0x84>
    1a26:	e9 81       	ldd	r30, Y+1	; 0x01
    1a28:	fa 81       	ldd	r31, Y+2	; 0x02
    1a2a:	27 a1       	ldd	r18, Z+39	; 0x27
    1a2c:	30 a5       	ldd	r19, Z+40	; 0x28
    1a2e:	e9 81       	ldd	r30, Y+1	; 0x01
    1a30:	fa 81       	ldd	r31, Y+2	; 0x02
    1a32:	81 a5       	ldd	r24, Z+41	; 0x29
    1a34:	92 a5       	ldd	r25, Z+42	; 0x2a
    1a36:	f9 01       	movw	r30, r18
    1a38:	09 95       	icall
#ifdef CONFIG_MP
    spin_unlock( &current_proc->lock );
#endif // CONFIG_MP
}
    1a3a:	0f 90       	pop	r0
    1a3c:	0f 90       	pop	r0
    1a3e:	0f 90       	pop	r0
    1a40:	0f 90       	pop	r0
    1a42:	cf 91       	pop	r28
    1a44:	df 91       	pop	r29
    1a46:	08 95       	ret

00001a48 <sem_init_isr>:
*****************************************************************************************/
#include "../include/bugurt.h"

// Инициализация
void sem_init_isr( sem_t * sem, count_t count )
{
    1a48:	df 93       	push	r29
    1a4a:	cf 93       	push	r28
    1a4c:	00 d0       	rcall	.+0      	; 0x1a4e <sem_init_isr+0x6>
    1a4e:	00 d0       	rcall	.+0      	; 0x1a50 <sem_init_isr+0x8>
    1a50:	cd b7       	in	r28, 0x3d	; 61
    1a52:	de b7       	in	r29, 0x3e	; 62
    1a54:	9a 83       	std	Y+2, r25	; 0x02
    1a56:	89 83       	std	Y+1, r24	; 0x01
    1a58:	7c 83       	std	Y+4, r23	; 0x04
    1a5a:	6b 83       	std	Y+3, r22	; 0x03
#ifdef CONFIG_MP
    spin_init( &sem->lock );
    spin_lock( &sem->lock );
#endif //CONFIG_MP
    xlist_init( (xlist_t *)sem );
    1a5c:	89 81       	ldd	r24, Y+1	; 0x01
    1a5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a60:	0e 94 a3 11 	call	0x2346	; 0x2346 <xlist_init>
    sem->counter = count;
    1a64:	e9 81       	ldd	r30, Y+1	; 0x01
    1a66:	fa 81       	ldd	r31, Y+2	; 0x02
    1a68:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a6c:	92 8b       	std	Z+18, r25	; 0x12
    1a6e:	81 8b       	std	Z+17, r24	; 0x11
#ifdef CONFIG_MP
    spin_unlock( &sem->lock );
#endif //CONFIG_MP
}
    1a70:	0f 90       	pop	r0
    1a72:	0f 90       	pop	r0
    1a74:	0f 90       	pop	r0
    1a76:	0f 90       	pop	r0
    1a78:	cf 91       	pop	r28
    1a7a:	df 91       	pop	r29
    1a7c:	08 95       	ret

00001a7e <_sem_lock>:

// То же, для внутреннего использования
bool_t _sem_lock( sem_t * sem )
{
    1a7e:	df 93       	push	r29
    1a80:	cf 93       	push	r28
    1a82:	00 d0       	rcall	.+0      	; 0x1a84 <_sem_lock+0x6>
    1a84:	00 d0       	rcall	.+0      	; 0x1a86 <_sem_lock+0x8>
    1a86:	0f 92       	push	r0
    1a88:	cd b7       	in	r28, 0x3d	; 61
    1a8a:	de b7       	in	r29, 0x3e	; 62
    1a8c:	9d 83       	std	Y+5, r25	; 0x05
    1a8e:	8c 83       	std	Y+4, r24	; 0x04
#ifdef CONFIG_MP
    spin_lock( &sem->lock );// Захват спин-блокировки семафора
#endif //CONFIG_MP
    bool_t ret = 0;
    1a90:	1b 82       	std	Y+3, r1	; 0x03
    if( sem->counter != 0 )
    1a92:	ec 81       	ldd	r30, Y+4	; 0x04
    1a94:	fd 81       	ldd	r31, Y+5	; 0x05
    1a96:	81 89       	ldd	r24, Z+17	; 0x11
    1a98:	92 89       	ldd	r25, Z+18	; 0x12
    1a9a:	00 97       	sbiw	r24, 0x00	; 0
    1a9c:	61 f0       	breq	.+24     	; 0x1ab6 <_sem_lock+0x38>
    {
        sem->counter--;
    1a9e:	ec 81       	ldd	r30, Y+4	; 0x04
    1aa0:	fd 81       	ldd	r31, Y+5	; 0x05
    1aa2:	81 89       	ldd	r24, Z+17	; 0x11
    1aa4:	92 89       	ldd	r25, Z+18	; 0x12
    1aa6:	01 97       	sbiw	r24, 0x01	; 1
    1aa8:	ec 81       	ldd	r30, Y+4	; 0x04
    1aaa:	fd 81       	ldd	r31, Y+5	; 0x05
    1aac:	92 8b       	std	Z+18, r25	; 0x12
    1aae:	81 8b       	std	Z+17, r24	; 0x11
        ret = (bool_t)1;
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	8b 83       	std	Y+3, r24	; 0x03
    1ab4:	18 c0       	rjmp	.+48     	; 0x1ae6 <_sem_lock+0x68>
    }
    else
    {
        proc_t * proc = current_proc();
    1ab6:	0e 94 2e 02 	call	0x45c	; 0x45c <current_proc>
    1aba:	9a 83       	std	Y+2, r25	; 0x02
    1abc:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
        spin_lock( &proc->lock );// Захват блокировки процесса
#endif //CONFIG_MP
        proc->flags |= PROC_FLG_QUEUE;
    1abe:	e9 81       	ldd	r30, Y+1	; 0x01
    1ac0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ac2:	83 85       	ldd	r24, Z+11	; 0x0b
    1ac4:	94 85       	ldd	r25, Z+12	; 0x0c
    1ac6:	88 60       	ori	r24, 0x08	; 8
    1ac8:	e9 81       	ldd	r30, Y+1	; 0x01
    1aca:	fa 81       	ldd	r31, Y+2	; 0x02
    1acc:	94 87       	std	Z+12, r25	; 0x0c
    1ace:	83 87       	std	Z+11, r24	; 0x0b
        _proc_stop( proc );
    1ad0:	89 81       	ldd	r24, Y+1	; 0x01
    1ad2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ad4:	0e 94 15 0a 	call	0x142a	; 0x142a <_proc_stop>
        gitem_insert( (gitem_t *)proc, (xlist_t *)sem );
    1ad8:	89 81       	ldd	r24, Y+1	; 0x01
    1ada:	9a 81       	ldd	r25, Y+2	; 0x02
    1adc:	2c 81       	ldd	r18, Y+4	; 0x04
    1ade:	3d 81       	ldd	r19, Y+5	; 0x05
    1ae0:	b9 01       	movw	r22, r18
    1ae2:	0e 94 38 03 	call	0x670	; 0x670 <gitem_insert>
#endif //CONFIG_MP
    }
#ifdef CONFIG_MP
    spin_unlock( &sem->lock );// Освобождение спин-блокировки семафора
#endif //CONFIG_MP
    return ret;
    1ae6:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1ae8:	0f 90       	pop	r0
    1aea:	0f 90       	pop	r0
    1aec:	0f 90       	pop	r0
    1aee:	0f 90       	pop	r0
    1af0:	0f 90       	pop	r0
    1af2:	cf 91       	pop	r28
    1af4:	df 91       	pop	r29
    1af6:	08 95       	ret

00001af8 <_sem_try_lock>:

// То же, для внутреннего использования
bool_t _sem_try_lock( sem_t * sem )
{
    1af8:	df 93       	push	r29
    1afa:	cf 93       	push	r28
    1afc:	00 d0       	rcall	.+0      	; 0x1afe <_sem_try_lock+0x6>
    1afe:	0f 92       	push	r0
    1b00:	cd b7       	in	r28, 0x3d	; 61
    1b02:	de b7       	in	r29, 0x3e	; 62
    1b04:	9b 83       	std	Y+3, r25	; 0x03
    1b06:	8a 83       	std	Y+2, r24	; 0x02
#ifdef CONFIG_MP
    spin_lock( &sem->lock );// Захват спин-блокировки семафора
#endif //CONFIG_MP
    bool_t ret = 0;
    1b08:	19 82       	std	Y+1, r1	; 0x01
    if( sem->counter != 0 )
    1b0a:	ea 81       	ldd	r30, Y+2	; 0x02
    1b0c:	fb 81       	ldd	r31, Y+3	; 0x03
    1b0e:	81 89       	ldd	r24, Z+17	; 0x11
    1b10:	92 89       	ldd	r25, Z+18	; 0x12
    1b12:	00 97       	sbiw	r24, 0x00	; 0
    1b14:	59 f0       	breq	.+22     	; 0x1b2c <_sem_try_lock+0x34>
    {
        sem->counter--;
    1b16:	ea 81       	ldd	r30, Y+2	; 0x02
    1b18:	fb 81       	ldd	r31, Y+3	; 0x03
    1b1a:	81 89       	ldd	r24, Z+17	; 0x11
    1b1c:	92 89       	ldd	r25, Z+18	; 0x12
    1b1e:	01 97       	sbiw	r24, 0x01	; 1
    1b20:	ea 81       	ldd	r30, Y+2	; 0x02
    1b22:	fb 81       	ldd	r31, Y+3	; 0x03
    1b24:	92 8b       	std	Z+18, r25	; 0x12
    1b26:	81 8b       	std	Z+17, r24	; 0x11
        ret = (bool_t)1;
    1b28:	81 e0       	ldi	r24, 0x01	; 1
    1b2a:	89 83       	std	Y+1, r24	; 0x01
    }
#ifdef CONFIG_MP
    spin_unlock( &sem->lock );// Освобождение спин-блокировки семафора
#endif //CONFIG_MP
    return ret;
    1b2c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b2e:	0f 90       	pop	r0
    1b30:	0f 90       	pop	r0
    1b32:	0f 90       	pop	r0
    1b34:	cf 91       	pop	r28
    1b36:	df 91       	pop	r29
    1b38:	08 95       	ret

00001b3a <sem_unlock_isr>:

void sem_unlock_isr( sem_t * sem )
{
    1b3a:	df 93       	push	r29
    1b3c:	cf 93       	push	r28
    1b3e:	00 d0       	rcall	.+0      	; 0x1b40 <sem_unlock_isr+0x6>
    1b40:	00 d0       	rcall	.+0      	; 0x1b42 <sem_unlock_isr+0x8>
    1b42:	cd b7       	in	r28, 0x3d	; 61
    1b44:	de b7       	in	r29, 0x3e	; 62
    1b46:	9c 83       	std	Y+4, r25	; 0x04
    1b48:	8b 83       	std	Y+3, r24	; 0x03
#ifdef CONFIG_MP
    spin_lock( &sem->lock );//Захват спин-блокировки семафора
#endif //CONFIG_MP
    if( ((xlist_t *)sem)->index == (index_t)0  )
    1b4a:	eb 81       	ldd	r30, Y+3	; 0x03
    1b4c:	fc 81       	ldd	r31, Y+4	; 0x04
    1b4e:	80 89       	ldd	r24, Z+16	; 0x10
    1b50:	88 23       	and	r24, r24
    1b52:	51 f4       	brne	.+20     	; 0x1b68 <sem_unlock_isr+0x2e>
    {
        sem->counter++;
    1b54:	eb 81       	ldd	r30, Y+3	; 0x03
    1b56:	fc 81       	ldd	r31, Y+4	; 0x04
    1b58:	81 89       	ldd	r24, Z+17	; 0x11
    1b5a:	92 89       	ldd	r25, Z+18	; 0x12
    1b5c:	01 96       	adiw	r24, 0x01	; 1
    1b5e:	eb 81       	ldd	r30, Y+3	; 0x03
    1b60:	fc 81       	ldd	r31, Y+4	; 0x04
    1b62:	92 8b       	std	Z+18, r25	; 0x12
    1b64:	81 8b       	std	Z+17, r24	; 0x11
    1b66:	17 c0       	rjmp	.+46     	; 0x1b96 <sem_unlock_isr+0x5c>
        return;
    }
    proc_t * proc = (proc_t *)xlist_head((xlist_t *)sem);
    1b68:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b6c:	0e 94 cd 11 	call	0x239a	; 0x239a <xlist_head>
    1b70:	9a 83       	std	Y+2, r25	; 0x02
    1b72:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );// Захват спин-блокировки процесса
#endif //CONFIG_MP
    proc->flags &= ~PROC_FLG_QUEUE;
    1b74:	e9 81       	ldd	r30, Y+1	; 0x01
    1b76:	fa 81       	ldd	r31, Y+2	; 0x02
    1b78:	83 85       	ldd	r24, Z+11	; 0x0b
    1b7a:	94 85       	ldd	r25, Z+12	; 0x0c
    1b7c:	87 7f       	andi	r24, 0xF7	; 247
    1b7e:	e9 81       	ldd	r30, Y+1	; 0x01
    1b80:	fa 81       	ldd	r31, Y+2	; 0x02
    1b82:	94 87       	std	Z+12, r25	; 0x0c
    1b84:	83 87       	std	Z+11, r24	; 0x0b
    gitem_cut( (gitem_t *)proc );
    1b86:	89 81       	ldd	r24, Y+1	; 0x01
    1b88:	9a 81       	ldd	r25, Y+2	; 0x02
    1b8a:	0e 94 95 04 	call	0x92a	; 0x92a <gitem_cut>
    _proc_run( proc );
    1b8e:	89 81       	ldd	r24, Y+1	; 0x01
    1b90:	9a 81       	ldd	r25, Y+2	; 0x02
    1b92:	0e 94 7d 09 	call	0x12fa	; 0x12fa <_proc_run>
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );// Освобождение спин-блокировки процесса
    spin_unlock( &sem->lock );//Освобождение спин-блокировки семафора
#endif //CONFIG_MP
}
    1b96:	0f 90       	pop	r0
    1b98:	0f 90       	pop	r0
    1b9a:	0f 90       	pop	r0
    1b9c:	0f 90       	pop	r0
    1b9e:	cf 91       	pop	r28
    1ba0:	df 91       	pop	r29
    1ba2:	08 95       	ret

00001ba4 <sig_init_isr>:
*****************************************************************************************/
#include "../include/bugurt.h"
//========================================================================================
// Инициация
void sig_init_isr( sig_t * sig )
{
    1ba4:	df 93       	push	r29
    1ba6:	cf 93       	push	r28
    1ba8:	00 d0       	rcall	.+0      	; 0x1baa <sig_init_isr+0x6>
    1baa:	cd b7       	in	r28, 0x3d	; 61
    1bac:	de b7       	in	r29, 0x3e	; 62
    1bae:	9a 83       	std	Y+2, r25	; 0x02
    1bb0:	89 83       	std	Y+1, r24	; 0x01
        xlist_init( (xlist_t *)sig->sig_list + i );
        stat_init( (stat_t *)sig->sig_stat + i );
    }
    spin_unlock( &sig->lock );
#else
    xlist_init( (xlist_t *)sig );
    1bb2:	89 81       	ldd	r24, Y+1	; 0x01
    1bb4:	9a 81       	ldd	r25, Y+2	; 0x02
    1bb6:	0e 94 a3 11 	call	0x2346	; 0x2346 <xlist_init>
#endif
}
    1bba:	0f 90       	pop	r0
    1bbc:	0f 90       	pop	r0
    1bbe:	cf 91       	pop	r28
    1bc0:	df 91       	pop	r29
    1bc2:	08 95       	ret

00001bc4 <_sig_wait_prologue>:
//========================================================================================
// Это выполнится при постановке процесса в список ожидания сигнала
void _sig_wait_prologue( sig_t * sig )
{
    1bc4:	df 93       	push	r29
    1bc6:	cf 93       	push	r28
    1bc8:	00 d0       	rcall	.+0      	; 0x1bca <_sig_wait_prologue+0x6>
    1bca:	00 d0       	rcall	.+0      	; 0x1bcc <_sig_wait_prologue+0x8>
    1bcc:	cd b7       	in	r28, 0x3d	; 61
    1bce:	de b7       	in	r29, 0x3e	; 62
    1bd0:	9c 83       	std	Y+4, r25	; 0x04
    1bd2:	8b 83       	std	Y+3, r24	; 0x03
#ifdef CONFIG_MP
    spin_lock( &sig->lock );
#endif // CONFIG_MP
    proc_t * proc = current_proc();
    1bd4:	0e 94 2e 02 	call	0x45c	; 0x45c <current_proc>
    1bd8:	9a 83       	std	Y+2, r25	; 0x02
    1bda:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    // Останавливаем процесс
    proc->flags |= PROC_FLG_WAIT;
    1bdc:	e9 81       	ldd	r30, Y+1	; 0x01
    1bde:	fa 81       	ldd	r31, Y+2	; 0x02
    1be0:	83 85       	ldd	r24, Z+11	; 0x0b
    1be2:	94 85       	ldd	r25, Z+12	; 0x0c
    1be4:	80 61       	ori	r24, 0x10	; 16
    1be6:	e9 81       	ldd	r30, Y+1	; 0x01
    1be8:	fa 81       	ldd	r31, Y+2	; 0x02
    1bea:	94 87       	std	Z+12, r25	; 0x0c
    1bec:	83 87       	std	Z+11, r24	; 0x0b
    _proc_stop_( proc );
    1bee:	89 81       	ldd	r24, Y+1	; 0x01
    1bf0:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf2:	0e 94 95 04 	call	0x92a	; 0x92a <gitem_cut>
#ifdef CONFIG_MP
    resched( proc->core_id );
#else
    resched();
    1bf6:	0e 94 39 02 	call	0x472	; 0x472 <resched>
        stat_inc( proc, (stat_t *)sig->sig_stat + sig_core );
    }
    spin_unlock( &proc->lock );
    spin_unlock( &sig->lock );
#else
    gitem_insert_group( (gitem_t *)proc, (xlist_t *)sig );
    1bfa:	89 81       	ldd	r24, Y+1	; 0x01
    1bfc:	9a 81       	ldd	r25, Y+2	; 0x02
    1bfe:	2b 81       	ldd	r18, Y+3	; 0x03
    1c00:	3c 81       	ldd	r19, Y+4	; 0x04
    1c02:	b9 01       	movw	r22, r18
    1c04:	0e 94 94 03 	call	0x728	; 0x728 <gitem_insert_group>
#endif //CONFIG_MP
}
    1c08:	0f 90       	pop	r0
    1c0a:	0f 90       	pop	r0
    1c0c:	0f 90       	pop	r0
    1c0e:	0f 90       	pop	r0
    1c10:	cf 91       	pop	r28
    1c12:	df 91       	pop	r29
    1c14:	08 95       	ret

00001c16 <sig_signal_isr>:
//========================================================================================
// Тоже самое что и предыдущие, олько для вызова из обработчиков прерываний и из критических секций
void sig_signal_isr( sig_t * sig )
{
    1c16:	df 93       	push	r29
    1c18:	cf 93       	push	r28
    1c1a:	00 d0       	rcall	.+0      	; 0x1c1c <sig_signal_isr+0x6>
    1c1c:	00 d0       	rcall	.+0      	; 0x1c1e <sig_signal_isr+0x8>
    1c1e:	cd b7       	in	r28, 0x3d	; 61
    1c20:	de b7       	in	r29, 0x3e	; 62
    1c22:	9c 83       	std	Y+4, r25	; 0x04
    1c24:	8b 83       	std	Y+3, r24	; 0x03
    }
    resched(core);// Перепланировка
    spin_unlock( &proc->lock );// Освобождение блокировки процесса
    spin_unlock( &sig->lock );// Освобождение блокировки сигнала
#else
    if( ((xlist_t *)sig)->index == (index_t)0 )return;
    1c26:	eb 81       	ldd	r30, Y+3	; 0x03
    1c28:	fc 81       	ldd	r31, Y+4	; 0x04
    1c2a:	80 89       	ldd	r24, Z+16	; 0x10
    1c2c:	88 23       	and	r24, r24
    1c2e:	a9 f0       	breq	.+42     	; 0x1c5a <sig_signal_isr+0x44>
    proc_t * proc = (proc_t *)xlist_head( (xlist_t *)sig );
    1c30:	8b 81       	ldd	r24, Y+3	; 0x03
    1c32:	9c 81       	ldd	r25, Y+4	; 0x04
    1c34:	0e 94 cd 11 	call	0x239a	; 0x239a <xlist_head>
    1c38:	9a 83       	std	Y+2, r25	; 0x02
    1c3a:	89 83       	std	Y+1, r24	; 0x01
    gitem_fast_cut( (gitem_t *)proc );
    1c3c:	89 81       	ldd	r24, Y+1	; 0x01
    1c3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c40:	0e 94 0f 04 	call	0x81e	; 0x81e <gitem_fast_cut>
    gitem_insert( (gitem_t *)proc, kernel.sched.ready );
    1c44:	89 81       	ldd	r24, Y+1	; 0x01
    1c46:	9a 81       	ldd	r25, Y+2	; 0x02
    1c48:	20 91 4a 01 	lds	r18, 0x014A
    1c4c:	30 91 4b 01 	lds	r19, 0x014B
    1c50:	b9 01       	movw	r22, r18
    1c52:	0e 94 38 03 	call	0x670	; 0x670 <gitem_insert>
    resched();
    1c56:	0e 94 39 02 	call	0x472	; 0x472 <resched>
#endif //CONFIG_MP
}
    1c5a:	0f 90       	pop	r0
    1c5c:	0f 90       	pop	r0
    1c5e:	0f 90       	pop	r0
    1c60:	0f 90       	pop	r0
    1c62:	cf 91       	pop	r28
    1c64:	df 91       	pop	r29
    1c66:	08 95       	ret

00001c68 <sig_broadcast_isr>:
//----------------------------------------------------------------------------------------
void sig_broadcast_isr( sig_t * sig )
{
    1c68:	df 93       	push	r29
    1c6a:	cf 93       	push	r28
    1c6c:	00 d0       	rcall	.+0      	; 0x1c6e <sig_broadcast_isr+0x6>
    1c6e:	cd b7       	in	r28, 0x3d	; 61
    1c70:	de b7       	in	r29, 0x3e	; 62
    1c72:	9a 83       	std	Y+2, r25	; 0x02
    1c74:	89 83       	std	Y+1, r24	; 0x01

        resched(core);
    }
    spin_unlock( &sig->lock );
#else
    gitem_xlist_merge( (xlist_t *)sig, kernel.sched.ready );
    1c76:	20 91 4a 01 	lds	r18, 0x014A
    1c7a:	30 91 4b 01 	lds	r19, 0x014B
    1c7e:	89 81       	ldd	r24, Y+1	; 0x01
    1c80:	9a 81       	ldd	r25, Y+2	; 0x02
    1c82:	b9 01       	movw	r22, r18
    1c84:	0e 94 ac 04 	call	0x958	; 0x958 <gitem_xlist_merge>
    resched();
    1c88:	0e 94 39 02 	call	0x472	; 0x472 <resched>
#endif //CONFIG_MP
}
    1c8c:	0f 90       	pop	r0
    1c8e:	0f 90       	pop	r0
    1c90:	cf 91       	pop	r28
    1c92:	df 91       	pop	r29
    1c94:	08 95       	ret

00001c96 <do_syscall>:
syscall_t syscall_num = (syscall_t)0;
void * syscall_arg = (void *)0;

void do_syscall( void )
#endif // CONFIG_MP
{
    1c96:	df 93       	push	r29
    1c98:	cf 93       	push	r28
    1c9a:	cd b7       	in	r28, 0x3d	; 61
    1c9c:	de b7       	in	r29, 0x3e	; 62
    if( syscall_num != (syscall_t)0 )
    1c9e:	80 91 32 01 	lds	r24, 0x0132
    1ca2:	88 23       	and	r24, r24
    1ca4:	c1 f0       	breq	.+48     	; 0x1cd6 <do_syscall+0x40>
    {
        syscall_num--;
    1ca6:	80 91 32 01 	lds	r24, 0x0132
    1caa:	81 50       	subi	r24, 0x01	; 1
    1cac:	80 93 32 01 	sts	0x0132, r24
        syscall_routine[syscall_num](syscall_arg);
    1cb0:	80 91 32 01 	lds	r24, 0x0132
    1cb4:	88 2f       	mov	r24, r24
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	88 0f       	add	r24, r24
    1cba:	99 1f       	adc	r25, r25
    1cbc:	fc 01       	movw	r30, r24
    1cbe:	ef 5f       	subi	r30, 0xFF	; 255
    1cc0:	fe 4f       	sbci	r31, 0xFE	; 254
    1cc2:	01 90       	ld	r0, Z+
    1cc4:	f0 81       	ld	r31, Z
    1cc6:	e0 2d       	mov	r30, r0
    1cc8:	80 91 33 01 	lds	r24, 0x0133
    1ccc:	90 91 34 01 	lds	r25, 0x0134
    1cd0:	09 95       	icall
        syscall_num = (syscall_t)0;
    1cd2:	10 92 32 01 	sts	0x0132, r1
    }
}
    1cd6:	cf 91       	pop	r28
    1cd8:	df 91       	pop	r29
    1cda:	08 95       	ret

00001cdc <scall_proc_init>:
///=================================================================
///                      Process control !!!
///=================================================================
/// SYSCALL_PROC_INIT
void scall_proc_init( void * arg )
{
    1cdc:	8f 92       	push	r8
    1cde:	af 92       	push	r10
    1ce0:	bf 92       	push	r11
    1ce2:	cf 92       	push	r12
    1ce4:	df 92       	push	r13
    1ce6:	ef 92       	push	r14
    1ce8:	ff 92       	push	r15
    1cea:	0f 93       	push	r16
    1cec:	1f 93       	push	r17
    1cee:	df 93       	push	r29
    1cf0:	cf 93       	push	r28
    1cf2:	00 d0       	rcall	.+0      	; 0x1cf4 <scall_proc_init+0x18>
    1cf4:	cd b7       	in	r28, 0x3d	; 61
    1cf6:	de b7       	in	r29, 0x3e	; 62
    1cf8:	9a 83       	std	Y+2, r25	; 0x02
    1cfa:	89 83       	std	Y+1, r24	; 0x01
    proc_init_isr(
    1cfc:	e9 81       	ldd	r30, Y+1	; 0x01
    1cfe:	fa 81       	ldd	r31, Y+2	; 0x02
    1d00:	80 81       	ld	r24, Z
    1d02:	91 81       	ldd	r25, Z+1	; 0x01
    1d04:	e9 81       	ldd	r30, Y+1	; 0x01
    1d06:	fa 81       	ldd	r31, Y+2	; 0x02
    1d08:	22 81       	ldd	r18, Z+2	; 0x02
    1d0a:	33 81       	ldd	r19, Z+3	; 0x03
    1d0c:	e9 81       	ldd	r30, Y+1	; 0x01
    1d0e:	fa 81       	ldd	r31, Y+2	; 0x02
    1d10:	44 81       	ldd	r20, Z+4	; 0x04
    1d12:	55 81       	ldd	r21, Z+5	; 0x05
    1d14:	e9 81       	ldd	r30, Y+1	; 0x01
    1d16:	fa 81       	ldd	r31, Y+2	; 0x02
    1d18:	06 81       	ldd	r16, Z+6	; 0x06
    1d1a:	17 81       	ldd	r17, Z+7	; 0x07
    1d1c:	e9 81       	ldd	r30, Y+1	; 0x01
    1d1e:	fa 81       	ldd	r31, Y+2	; 0x02
    1d20:	e0 84       	ldd	r14, Z+8	; 0x08
    1d22:	f1 84       	ldd	r15, Z+9	; 0x09
    1d24:	e9 81       	ldd	r30, Y+1	; 0x01
    1d26:	fa 81       	ldd	r31, Y+2	; 0x02
    1d28:	c2 84       	ldd	r12, Z+10	; 0x0a
    1d2a:	d3 84       	ldd	r13, Z+11	; 0x0b
    1d2c:	e9 81       	ldd	r30, Y+1	; 0x01
    1d2e:	fa 81       	ldd	r31, Y+2	; 0x02
    1d30:	b4 84       	ldd	r11, Z+12	; 0x0c
    1d32:	e9 81       	ldd	r30, Y+1	; 0x01
    1d34:	fa 81       	ldd	r31, Y+2	; 0x02
    1d36:	a5 85       	ldd	r26, Z+13	; 0x0d
    1d38:	b6 85       	ldd	r27, Z+14	; 0x0e
    1d3a:	e9 81       	ldd	r30, Y+1	; 0x01
    1d3c:	fa 81       	ldd	r31, Y+2	; 0x02
    1d3e:	e7 85       	ldd	r30, Z+15	; 0x0f
    1d40:	b9 01       	movw	r22, r18
    1d42:	98 01       	movw	r18, r16
    1d44:	87 01       	movw	r16, r14
    1d46:	76 01       	movw	r14, r12
    1d48:	cb 2c       	mov	r12, r11
    1d4a:	5d 01       	movw	r10, r26
    1d4c:	8e 2e       	mov	r8, r30
    1d4e:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <proc_init_isr>
              ((proc_init_arg_t *)arg)->is_rt
#ifdef CONFIG_MP
              ,((proc_init_arg_t *)arg)-> affinity
#endif // CONFIG_MP
              );
}
    1d52:	0f 90       	pop	r0
    1d54:	0f 90       	pop	r0
    1d56:	cf 91       	pop	r28
    1d58:	df 91       	pop	r29
    1d5a:	1f 91       	pop	r17
    1d5c:	0f 91       	pop	r16
    1d5e:	ff 90       	pop	r15
    1d60:	ef 90       	pop	r14
    1d62:	df 90       	pop	r13
    1d64:	cf 90       	pop	r12
    1d66:	bf 90       	pop	r11
    1d68:	af 90       	pop	r10
    1d6a:	8f 90       	pop	r8
    1d6c:	08 95       	ret

00001d6e <scall_proc_run>:
    syscall_bugurt( SYSCALL_PROC_INIT, (void *)&scarg );
}
///--------------------------------------------------------------------------------------------
/// SYSCALL_PROC_RUN
void scall_proc_run( void * arg )
{
    1d6e:	0f 93       	push	r16
    1d70:	1f 93       	push	r17
    1d72:	df 93       	push	r29
    1d74:	cf 93       	push	r28
    1d76:	00 d0       	rcall	.+0      	; 0x1d78 <scall_proc_run+0xa>
    1d78:	cd b7       	in	r28, 0x3d	; 61
    1d7a:	de b7       	in	r29, 0x3e	; 62
    1d7c:	9a 83       	std	Y+2, r25	; 0x02
    1d7e:	89 83       	std	Y+1, r24	; 0x01
    ((proc_runtime_arg_t *)arg)->scall_ret = proc_run_isr( ((proc_runtime_arg_t *)arg)->proc );
    1d80:	09 81       	ldd	r16, Y+1	; 0x01
    1d82:	1a 81       	ldd	r17, Y+2	; 0x02
    1d84:	e9 81       	ldd	r30, Y+1	; 0x01
    1d86:	fa 81       	ldd	r31, Y+2	; 0x02
    1d88:	80 81       	ld	r24, Z
    1d8a:	91 81       	ldd	r25, Z+1	; 0x01
    1d8c:	0e 94 9d 09 	call	0x133a	; 0x133a <proc_run_isr>
    1d90:	f8 01       	movw	r30, r16
    1d92:	82 83       	std	Z+2, r24	; 0x02
}
    1d94:	0f 90       	pop	r0
    1d96:	0f 90       	pop	r0
    1d98:	cf 91       	pop	r28
    1d9a:	df 91       	pop	r29
    1d9c:	1f 91       	pop	r17
    1d9e:	0f 91       	pop	r16
    1da0:	08 95       	ret

00001da2 <scall_proc_restart>:
    return scarg.scall_ret;
}
///--------------------------------------------------------------------------------------------
/// SYSCALL_PROC_RESTART
void scall_proc_restart( void * arg )
{
    1da2:	0f 93       	push	r16
    1da4:	1f 93       	push	r17
    1da6:	df 93       	push	r29
    1da8:	cf 93       	push	r28
    1daa:	00 d0       	rcall	.+0      	; 0x1dac <scall_proc_restart+0xa>
    1dac:	cd b7       	in	r28, 0x3d	; 61
    1dae:	de b7       	in	r29, 0x3e	; 62
    1db0:	9a 83       	std	Y+2, r25	; 0x02
    1db2:	89 83       	std	Y+1, r24	; 0x01
    ((proc_runtime_arg_t *)arg)->scall_ret = proc_restart_isr( ((proc_runtime_arg_t *)arg)->proc );
    1db4:	09 81       	ldd	r16, Y+1	; 0x01
    1db6:	1a 81       	ldd	r17, Y+2	; 0x02
    1db8:	e9 81       	ldd	r30, Y+1	; 0x01
    1dba:	fa 81       	ldd	r31, Y+2	; 0x02
    1dbc:	80 81       	ld	r24, Z
    1dbe:	91 81       	ldd	r25, Z+1	; 0x01
    1dc0:	0e 94 bc 09 	call	0x1378	; 0x1378 <proc_restart_isr>
    1dc4:	f8 01       	movw	r30, r16
    1dc6:	82 83       	std	Z+2, r24	; 0x02
}
    1dc8:	0f 90       	pop	r0
    1dca:	0f 90       	pop	r0
    1dcc:	cf 91       	pop	r28
    1dce:	df 91       	pop	r29
    1dd0:	1f 91       	pop	r17
    1dd2:	0f 91       	pop	r16
    1dd4:	08 95       	ret

00001dd6 <scall_proc_stop>:
    return scarg.scall_ret;
}
///--------------------------------------------------------------------------------------------
/// SYSCALL_PROC_STOP
void scall_proc_stop( void * arg )
{
    1dd6:	0f 93       	push	r16
    1dd8:	1f 93       	push	r17
    1dda:	df 93       	push	r29
    1ddc:	cf 93       	push	r28
    1dde:	00 d0       	rcall	.+0      	; 0x1de0 <scall_proc_stop+0xa>
    1de0:	cd b7       	in	r28, 0x3d	; 61
    1de2:	de b7       	in	r29, 0x3e	; 62
    1de4:	9a 83       	std	Y+2, r25	; 0x02
    1de6:	89 83       	std	Y+1, r24	; 0x01
    ((proc_runtime_arg_t *)arg)->scall_ret = proc_stop_isr( ((proc_runtime_arg_t *)arg)->proc );
    1de8:	09 81       	ldd	r16, Y+1	; 0x01
    1dea:	1a 81       	ldd	r17, Y+2	; 0x02
    1dec:	e9 81       	ldd	r30, Y+1	; 0x01
    1dee:	fa 81       	ldd	r31, Y+2	; 0x02
    1df0:	80 81       	ld	r24, Z
    1df2:	91 81       	ldd	r25, Z+1	; 0x01
    1df4:	0e 94 30 0a 	call	0x1460	; 0x1460 <proc_stop_isr>
    1df8:	f8 01       	movw	r30, r16
    1dfa:	82 83       	std	Z+2, r24	; 0x02
}
    1dfc:	0f 90       	pop	r0
    1dfe:	0f 90       	pop	r0
    1e00:	cf 91       	pop	r28
    1e02:	df 91       	pop	r29
    1e04:	1f 91       	pop	r17
    1e06:	0f 91       	pop	r16
    1e08:	08 95       	ret

00001e0a <scall_proc_self_stop>:
}

///--------------------------------------------------------------------------------------------
/// SYSCALL_PROC_SELF_STOP
void scall_proc_self_stop( void * arg )
{
    1e0a:	df 93       	push	r29
    1e0c:	cf 93       	push	r28
    1e0e:	00 d0       	rcall	.+0      	; 0x1e10 <scall_proc_self_stop+0x6>
    1e10:	00 d0       	rcall	.+0      	; 0x1e12 <scall_proc_self_stop+0x8>
    1e12:	cd b7       	in	r28, 0x3d	; 61
    1e14:	de b7       	in	r29, 0x3e	; 62
    1e16:	9c 83       	std	Y+4, r25	; 0x04
    1e18:	8b 83       	std	Y+3, r24	; 0x03
    proc_t * proc = current_proc();
    1e1a:	0e 94 2e 02 	call	0x45c	; 0x45c <current_proc>
    1e1e:	9a 83       	std	Y+2, r25	; 0x02
    1e20:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif
    _proc_stop( proc );
    1e22:	89 81       	ldd	r24, Y+1	; 0x01
    1e24:	9a 81       	ldd	r25, Y+2	; 0x02
    1e26:	0e 94 15 0a 	call	0x142a	; 0x142a <_proc_stop>
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif
}
    1e2a:	0f 90       	pop	r0
    1e2c:	0f 90       	pop	r0
    1e2e:	0f 90       	pop	r0
    1e30:	0f 90       	pop	r0
    1e32:	cf 91       	pop	r28
    1e34:	df 91       	pop	r29
    1e36:	08 95       	ret

00001e38 <scall_proc_terminate>:
}
///--------------------------------------------------------------------------------------------
/// SYSCALL_PROC_TERMINATE
// Останов процесса после выхода из pmain, для обертки proc_run_wrapper
void scall_proc_terminate( void * arg )
{
    1e38:	df 93       	push	r29
    1e3a:	cf 93       	push	r28
    1e3c:	00 d0       	rcall	.+0      	; 0x1e3e <scall_proc_terminate+0x6>
    1e3e:	cd b7       	in	r28, 0x3d	; 61
    1e40:	de b7       	in	r29, 0x3e	; 62
    1e42:	9a 83       	std	Y+2, r25	; 0x02
    1e44:	89 83       	std	Y+1, r24	; 0x01
    _proc_terminate((proc_t *)arg);
    1e46:	89 81       	ldd	r24, Y+1	; 0x01
    1e48:	9a 81       	ldd	r25, Y+2	; 0x02
    1e4a:	0e 94 9c 0a 	call	0x1538	; 0x1538 <_proc_terminate>
}
    1e4e:	0f 90       	pop	r0
    1e50:	0f 90       	pop	r0
    1e52:	cf 91       	pop	r28
    1e54:	df 91       	pop	r29
    1e56:	08 95       	ret

00001e58 <proc_run_wrapper>:
void proc_run_wrapper( proc_t * proc )
{
    1e58:	df 93       	push	r29
    1e5a:	cf 93       	push	r28
    1e5c:	00 d0       	rcall	.+0      	; 0x1e5e <proc_run_wrapper+0x6>
    1e5e:	00 d0       	rcall	.+0      	; 0x1e60 <proc_run_wrapper+0x8>
    1e60:	00 d0       	rcall	.+0      	; 0x1e62 <proc_run_wrapper+0xa>
    1e62:	cd b7       	in	r28, 0x3d	; 61
    1e64:	de b7       	in	r29, 0x3e	; 62
    1e66:	9e 83       	std	Y+6, r25	; 0x06
    1e68:	8d 83       	std	Y+5, r24	; 0x05
    //Атомарно читаем pmain и arg
    disable_interrupts();
    1e6a:	0e 94 1e 02 	call	0x43c	; 0x43c <disable_interrupts>
#ifdef CONFIG_MP
    spin_lock( &proc->lock );
#endif // CONFIG_MP
    code_t pmain = proc->pmain;
    1e6e:	ed 81       	ldd	r30, Y+5	; 0x05
    1e70:	fe 81       	ldd	r31, Y+6	; 0x06
    1e72:	83 a1       	ldd	r24, Z+35	; 0x23
    1e74:	94 a1       	ldd	r25, Z+36	; 0x24
    1e76:	9c 83       	std	Y+4, r25	; 0x04
    1e78:	8b 83       	std	Y+3, r24	; 0x03
    void * arg = proc->arg;
    1e7a:	ed 81       	ldd	r30, Y+5	; 0x05
    1e7c:	fe 81       	ldd	r31, Y+6	; 0x06
    1e7e:	81 a5       	ldd	r24, Z+41	; 0x29
    1e80:	92 a5       	ldd	r25, Z+42	; 0x2a
    1e82:	9a 83       	std	Y+2, r25	; 0x02
    1e84:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_unlock( &proc->lock );
#endif // CONFIG_MP
    enable_interrupts();
    1e86:	0e 94 26 02 	call	0x44c	; 0x44c <enable_interrupts>
    //Выполняем pmain
    pmain( arg );
    1e8a:	89 81       	ldd	r24, Y+1	; 0x01
    1e8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e8e:	eb 81       	ldd	r30, Y+3	; 0x03
    1e90:	fc 81       	ldd	r31, Y+4	; 0x04
    1e92:	09 95       	icall
    // Завершаем процесс
    syscall_bugurt( SYSCALL_PROC_TERMINATE, (void *)proc );
    1e94:	2d 81       	ldd	r18, Y+5	; 0x05
    1e96:	3e 81       	ldd	r19, Y+6	; 0x06
    1e98:	86 e0       	ldi	r24, 0x06	; 6
    1e9a:	b9 01       	movw	r22, r18
    1e9c:	0e 94 a5 02 	call	0x54a	; 0x54a <syscall_bugurt>
}
    1ea0:	26 96       	adiw	r28, 0x06	; 6
    1ea2:	0f b6       	in	r0, 0x3f	; 63
    1ea4:	f8 94       	cli
    1ea6:	de bf       	out	0x3e, r29	; 62
    1ea8:	0f be       	out	0x3f, r0	; 63
    1eaa:	cd bf       	out	0x3d, r28	; 61
    1eac:	cf 91       	pop	r28
    1eae:	df 91       	pop	r29
    1eb0:	08 95       	ret

00001eb2 <scall_proc_flag_stop>:
///--------------------------------------------------------------------------------------------
/// SYSCALL_PROC_FLAG_STOP
void scall_proc_flag_stop( void * arg )
{
    1eb2:	df 93       	push	r29
    1eb4:	cf 93       	push	r28
    1eb6:	00 d0       	rcall	.+0      	; 0x1eb8 <scall_proc_flag_stop+0x6>
    1eb8:	cd b7       	in	r28, 0x3d	; 61
    1eba:	de b7       	in	r29, 0x3e	; 62
    1ebc:	9a 83       	std	Y+2, r25	; 0x02
    1ebe:	89 83       	std	Y+1, r24	; 0x01
    _proc_flag_stop( *((flag_t *)arg) );
    1ec0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ec2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ec4:	80 81       	ld	r24, Z
    1ec6:	91 81       	ldd	r25, Z+1	; 0x01
    1ec8:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <_proc_flag_stop>
}
    1ecc:	0f 90       	pop	r0
    1ece:	0f 90       	pop	r0
    1ed0:	cf 91       	pop	r28
    1ed2:	df 91       	pop	r29
    1ed4:	08 95       	ret

00001ed6 <scall_proc_reset_watchdog>:
    syscall_bugurt( SYSCALL_PROC_FLAG_STOP, (void *)&msk );
}
///---------------------------------------------------------------------------------------------
/// SYSCALL_PROC_RESET_WATCHDOG
void scall_proc_reset_watchdog( void * arg )
{
    1ed6:	df 93       	push	r29
    1ed8:	cf 93       	push	r28
    1eda:	00 d0       	rcall	.+0      	; 0x1edc <scall_proc_reset_watchdog+0x6>
    1edc:	cd b7       	in	r28, 0x3d	; 61
    1ede:	de b7       	in	r29, 0x3e	; 62
    1ee0:	9a 83       	std	Y+2, r25	; 0x02
    1ee2:	89 83       	std	Y+1, r24	; 0x01
    _proc_reset_watchdog();
    1ee4:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <_proc_reset_watchdog>
}
    1ee8:	0f 90       	pop	r0
    1eea:	0f 90       	pop	r0
    1eec:	cf 91       	pop	r28
    1eee:	df 91       	pop	r29
    1ef0:	08 95       	ret

00001ef2 <scall_sig_init>:
}
///=================================================================
///                         Сигналы
/// SYSCALL_SIG_INIT
void scall_sig_init( void * arg )
{
    1ef2:	df 93       	push	r29
    1ef4:	cf 93       	push	r28
    1ef6:	00 d0       	rcall	.+0      	; 0x1ef8 <scall_sig_init+0x6>
    1ef8:	cd b7       	in	r28, 0x3d	; 61
    1efa:	de b7       	in	r29, 0x3e	; 62
    1efc:	9a 83       	std	Y+2, r25	; 0x02
    1efe:	89 83       	std	Y+1, r24	; 0x01
    sig_init_isr( (sig_t *)arg );
    1f00:	89 81       	ldd	r24, Y+1	; 0x01
    1f02:	9a 81       	ldd	r25, Y+2	; 0x02
    1f04:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <sig_init_isr>
}
    1f08:	0f 90       	pop	r0
    1f0a:	0f 90       	pop	r0
    1f0c:	cf 91       	pop	r28
    1f0e:	df 91       	pop	r29
    1f10:	08 95       	ret

00001f12 <scall_sig_wait>:
    syscall_bugurt( SYSCALL_SIG_INIT, (void *)sig );
}
///--------------------------------------------------------------------------------------------
///SYSCALL_SIG_WAIT
void scall_sig_wait( void * arg )
{
    1f12:	df 93       	push	r29
    1f14:	cf 93       	push	r28
    1f16:	00 d0       	rcall	.+0      	; 0x1f18 <scall_sig_wait+0x6>
    1f18:	cd b7       	in	r28, 0x3d	; 61
    1f1a:	de b7       	in	r29, 0x3e	; 62
    1f1c:	9a 83       	std	Y+2, r25	; 0x02
    1f1e:	89 83       	std	Y+1, r24	; 0x01
    _sig_wait_prologue( (sig_t *)arg );
    1f20:	89 81       	ldd	r24, Y+1	; 0x01
    1f22:	9a 81       	ldd	r25, Y+2	; 0x02
    1f24:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <_sig_wait_prologue>
}
    1f28:	0f 90       	pop	r0
    1f2a:	0f 90       	pop	r0
    1f2c:	cf 91       	pop	r28
    1f2e:	df 91       	pop	r29
    1f30:	08 95       	ret

00001f32 <scall_sig_signal>:
    syscall_bugurt( SYSCALL_PROC_FLAG_STOP, (void *)&mask );// Останов в случае необходимости
}
///--------------------------------------------------------------------------------------------
/// SYSCALL_SIG_SIGNAL
void scall_sig_signal( void * arg )
{
    1f32:	df 93       	push	r29
    1f34:	cf 93       	push	r28
    1f36:	00 d0       	rcall	.+0      	; 0x1f38 <scall_sig_signal+0x6>
    1f38:	cd b7       	in	r28, 0x3d	; 61
    1f3a:	de b7       	in	r29, 0x3e	; 62
    1f3c:	9a 83       	std	Y+2, r25	; 0x02
    1f3e:	89 83       	std	Y+1, r24	; 0x01
    sig_signal_isr( (sig_t *)arg );
    1f40:	89 81       	ldd	r24, Y+1	; 0x01
    1f42:	9a 81       	ldd	r25, Y+2	; 0x02
    1f44:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <sig_signal_isr>
}
    1f48:	0f 90       	pop	r0
    1f4a:	0f 90       	pop	r0
    1f4c:	cf 91       	pop	r28
    1f4e:	df 91       	pop	r29
    1f50:	08 95       	ret

00001f52 <scall_sig_broadcast>:
    syscall_bugurt( SYSCALL_SIG_SIGNAL, (void *)sig );
}
///--------------------------------------------------------------------------------------------
/// SYSCALL_SIG_BROADCAST
void scall_sig_broadcast( void * arg )
{
    1f52:	df 93       	push	r29
    1f54:	cf 93       	push	r28
    1f56:	00 d0       	rcall	.+0      	; 0x1f58 <scall_sig_broadcast+0x6>
    1f58:	cd b7       	in	r28, 0x3d	; 61
    1f5a:	de b7       	in	r29, 0x3e	; 62
    1f5c:	9a 83       	std	Y+2, r25	; 0x02
    1f5e:	89 83       	std	Y+1, r24	; 0x01
    sig_broadcast_isr( (sig_t *)arg );
    1f60:	89 81       	ldd	r24, Y+1	; 0x01
    1f62:	9a 81       	ldd	r25, Y+2	; 0x02
    1f64:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <sig_broadcast_isr>
}
    1f68:	0f 90       	pop	r0
    1f6a:	0f 90       	pop	r0
    1f6c:	cf 91       	pop	r28
    1f6e:	df 91       	pop	r29
    1f70:	08 95       	ret

00001f72 <scall_sem_init>:
}
///=================================================================
///                         Семафоры
/// SYSCALL_SEM_INIT
void scall_sem_init( void * arg )
{
    1f72:	df 93       	push	r29
    1f74:	cf 93       	push	r28
    1f76:	00 d0       	rcall	.+0      	; 0x1f78 <scall_sem_init+0x6>
    1f78:	cd b7       	in	r28, 0x3d	; 61
    1f7a:	de b7       	in	r29, 0x3e	; 62
    1f7c:	9a 83       	std	Y+2, r25	; 0x02
    1f7e:	89 83       	std	Y+1, r24	; 0x01
    sem_init_isr( ((sem_init_arg_t *)arg)->sem, ((sem_init_arg_t *)arg)->count );
    1f80:	e9 81       	ldd	r30, Y+1	; 0x01
    1f82:	fa 81       	ldd	r31, Y+2	; 0x02
    1f84:	80 81       	ld	r24, Z
    1f86:	91 81       	ldd	r25, Z+1	; 0x01
    1f88:	e9 81       	ldd	r30, Y+1	; 0x01
    1f8a:	fa 81       	ldd	r31, Y+2	; 0x02
    1f8c:	22 81       	ldd	r18, Z+2	; 0x02
    1f8e:	33 81       	ldd	r19, Z+3	; 0x03
    1f90:	b9 01       	movw	r22, r18
    1f92:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <sem_init_isr>
}
    1f96:	0f 90       	pop	r0
    1f98:	0f 90       	pop	r0
    1f9a:	cf 91       	pop	r28
    1f9c:	df 91       	pop	r29
    1f9e:	08 95       	ret

00001fa0 <scall_sem_lock>:
    syscall_bugurt( SYSCALL_SEM_INIT, (void *)&scarg );
}
///--------------------------------------------------------------------------------------------
///SYSCALL_SEM_LOCK
void scall_sem_lock( void * arg )
{
    1fa0:	0f 93       	push	r16
    1fa2:	1f 93       	push	r17
    1fa4:	df 93       	push	r29
    1fa6:	cf 93       	push	r28
    1fa8:	00 d0       	rcall	.+0      	; 0x1faa <scall_sem_lock+0xa>
    1faa:	cd b7       	in	r28, 0x3d	; 61
    1fac:	de b7       	in	r29, 0x3e	; 62
    1fae:	9a 83       	std	Y+2, r25	; 0x02
    1fb0:	89 83       	std	Y+1, r24	; 0x01
    ((sem_lock_arg_t *)arg)->scall_ret = _sem_lock( ((sem_lock_arg_t *)arg)->sem );
    1fb2:	09 81       	ldd	r16, Y+1	; 0x01
    1fb4:	1a 81       	ldd	r17, Y+2	; 0x02
    1fb6:	e9 81       	ldd	r30, Y+1	; 0x01
    1fb8:	fa 81       	ldd	r31, Y+2	; 0x02
    1fba:	80 81       	ld	r24, Z
    1fbc:	91 81       	ldd	r25, Z+1	; 0x01
    1fbe:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <_sem_lock>
    1fc2:	f8 01       	movw	r30, r16
    1fc4:	82 83       	std	Z+2, r24	; 0x02
}
    1fc6:	0f 90       	pop	r0
    1fc8:	0f 90       	pop	r0
    1fca:	cf 91       	pop	r28
    1fcc:	df 91       	pop	r29
    1fce:	1f 91       	pop	r17
    1fd0:	0f 91       	pop	r16
    1fd2:	08 95       	ret

00001fd4 <scall_sem_try_lock>:
    return scarg.scall_ret;
}
///--------------------------------------------------------------------------------------------
/// SYSCALL_SEM_TRY_LOCK
void scall_sem_try_lock( void * arg )
{
    1fd4:	0f 93       	push	r16
    1fd6:	1f 93       	push	r17
    1fd8:	df 93       	push	r29
    1fda:	cf 93       	push	r28
    1fdc:	00 d0       	rcall	.+0      	; 0x1fde <scall_sem_try_lock+0xa>
    1fde:	cd b7       	in	r28, 0x3d	; 61
    1fe0:	de b7       	in	r29, 0x3e	; 62
    1fe2:	9a 83       	std	Y+2, r25	; 0x02
    1fe4:	89 83       	std	Y+1, r24	; 0x01
    ((sem_lock_arg_t *)arg)->scall_ret = _sem_try_lock( ((sem_lock_arg_t *)arg)->sem );
    1fe6:	09 81       	ldd	r16, Y+1	; 0x01
    1fe8:	1a 81       	ldd	r17, Y+2	; 0x02
    1fea:	e9 81       	ldd	r30, Y+1	; 0x01
    1fec:	fa 81       	ldd	r31, Y+2	; 0x02
    1fee:	80 81       	ld	r24, Z
    1ff0:	91 81       	ldd	r25, Z+1	; 0x01
    1ff2:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <_sem_try_lock>
    1ff6:	f8 01       	movw	r30, r16
    1ff8:	82 83       	std	Z+2, r24	; 0x02
}
    1ffa:	0f 90       	pop	r0
    1ffc:	0f 90       	pop	r0
    1ffe:	cf 91       	pop	r28
    2000:	df 91       	pop	r29
    2002:	1f 91       	pop	r17
    2004:	0f 91       	pop	r16
    2006:	08 95       	ret

00002008 <scall_sem_unlock>:
    return scarg.scall_ret;
}
///--------------------------------------------------------------------------------------------
/// SYSCALL_SEM_UNLOCK
void scall_sem_unlock( void * arg )
{
    2008:	df 93       	push	r29
    200a:	cf 93       	push	r28
    200c:	00 d0       	rcall	.+0      	; 0x200e <scall_sem_unlock+0x6>
    200e:	cd b7       	in	r28, 0x3d	; 61
    2010:	de b7       	in	r29, 0x3e	; 62
    2012:	9a 83       	std	Y+2, r25	; 0x02
    2014:	89 83       	std	Y+1, r24	; 0x01
    sem_unlock_isr( (sem_t *)arg );
    2016:	89 81       	ldd	r24, Y+1	; 0x01
    2018:	9a 81       	ldd	r25, Y+2	; 0x02
    201a:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <sem_unlock_isr>
}
    201e:	0f 90       	pop	r0
    2020:	0f 90       	pop	r0
    2022:	cf 91       	pop	r28
    2024:	df 91       	pop	r29
    2026:	08 95       	ret

00002028 <scall_mutex_init>:
}
///=================================================================
///                         Мьютексы
/// SYSCALL_MUTEX_INIT
void scall_mutex_init(void * arg)
{
    2028:	df 93       	push	r29
    202a:	cf 93       	push	r28
    202c:	00 d0       	rcall	.+0      	; 0x202e <scall_mutex_init+0x6>
    202e:	cd b7       	in	r28, 0x3d	; 61
    2030:	de b7       	in	r29, 0x3e	; 62
    2032:	9a 83       	std	Y+2, r25	; 0x02
    2034:	89 83       	std	Y+1, r24	; 0x01
    mutex_init_isr(
    2036:	e9 81       	ldd	r30, Y+1	; 0x01
    2038:	fa 81       	ldd	r31, Y+2	; 0x02
    203a:	80 81       	ld	r24, Z
    203c:	91 81       	ldd	r25, Z+1	; 0x01
    203e:	e9 81       	ldd	r30, Y+1	; 0x01
    2040:	fa 81       	ldd	r31, Y+2	; 0x02
    2042:	22 81       	ldd	r18, Z+2	; 0x02
    2044:	62 2f       	mov	r22, r18
    2046:	0e 94 42 07 	call	0xe84	; 0xe84 <mutex_init_isr>
               ((mutex_init_arg_t *)arg)->mutex
#ifdef CONFIG_USE_HIGHEST_LOCKER
               ,((mutex_init_arg_t *)arg)->prio
#endif // CONFIG_USE_HIGHEST_LOCKER
               );
}
    204a:	0f 90       	pop	r0
    204c:	0f 90       	pop	r0
    204e:	cf 91       	pop	r28
    2050:	df 91       	pop	r29
    2052:	08 95       	ret

00002054 <scall_mutex_lock>:
    syscall_bugurt( SYSCALL_MUTEX_INIT, (void *)&scarg );
}
///--------------------------------------------------------------------------------------------
/// SYSCALL_MUTEX_LOCK
void scall_mutex_lock(void * arg)
{
    2054:	0f 93       	push	r16
    2056:	1f 93       	push	r17
    2058:	df 93       	push	r29
    205a:	cf 93       	push	r28
    205c:	00 d0       	rcall	.+0      	; 0x205e <scall_mutex_lock+0xa>
    205e:	cd b7       	in	r28, 0x3d	; 61
    2060:	de b7       	in	r29, 0x3e	; 62
    2062:	9a 83       	std	Y+2, r25	; 0x02
    2064:	89 83       	std	Y+1, r24	; 0x01
    ((mutex_lock_arg_t *)arg)->scall_ret = _mutex_lock( ((mutex_lock_arg_t *)arg)->mutex );
    2066:	09 81       	ldd	r16, Y+1	; 0x01
    2068:	1a 81       	ldd	r17, Y+2	; 0x02
    206a:	e9 81       	ldd	r30, Y+1	; 0x01
    206c:	fa 81       	ldd	r31, Y+2	; 0x02
    206e:	80 81       	ld	r24, Z
    2070:	91 81       	ldd	r25, Z+1	; 0x01
    2072:	0e 94 5d 07 	call	0xeba	; 0xeba <_mutex_lock>
    2076:	f8 01       	movw	r30, r16
    2078:	82 83       	std	Z+2, r24	; 0x02
}
    207a:	0f 90       	pop	r0
    207c:	0f 90       	pop	r0
    207e:	cf 91       	pop	r28
    2080:	df 91       	pop	r29
    2082:	1f 91       	pop	r17
    2084:	0f 91       	pop	r16
    2086:	08 95       	ret

00002088 <scall_mutex_try_lock>:
}
// Захват
///--------------------------------------------------------------------------------------------
/// SYSCALL_MUTEX_TRY_LOCK
void scall_mutex_try_lock(void * arg)
{
    2088:	0f 93       	push	r16
    208a:	1f 93       	push	r17
    208c:	df 93       	push	r29
    208e:	cf 93       	push	r28
    2090:	00 d0       	rcall	.+0      	; 0x2092 <scall_mutex_try_lock+0xa>
    2092:	cd b7       	in	r28, 0x3d	; 61
    2094:	de b7       	in	r29, 0x3e	; 62
    2096:	9a 83       	std	Y+2, r25	; 0x02
    2098:	89 83       	std	Y+1, r24	; 0x01
    ((mutex_lock_arg_t *)arg)->scall_ret = _mutex_try_lock( ((mutex_lock_arg_t *)arg)->mutex );
    209a:	09 81       	ldd	r16, Y+1	; 0x01
    209c:	1a 81       	ldd	r17, Y+2	; 0x02
    209e:	e9 81       	ldd	r30, Y+1	; 0x01
    20a0:	fa 81       	ldd	r31, Y+2	; 0x02
    20a2:	80 81       	ld	r24, Z
    20a4:	91 81       	ldd	r25, Z+1	; 0x01
    20a6:	0e 94 a9 07 	call	0xf52	; 0xf52 <_mutex_try_lock>
    20aa:	f8 01       	movw	r30, r16
    20ac:	82 83       	std	Z+2, r24	; 0x02
}
    20ae:	0f 90       	pop	r0
    20b0:	0f 90       	pop	r0
    20b2:	cf 91       	pop	r28
    20b4:	df 91       	pop	r29
    20b6:	1f 91       	pop	r17
    20b8:	0f 91       	pop	r16
    20ba:	08 95       	ret

000020bc <scall_mutex_unlock>:
    return scarg.scall_ret;
}
///--------------------------------------------------------------------------------------------
/// SYSCALL_MUTEX_UNLOCK
void scall_mutex_unlock(void * arg)
{
    20bc:	df 93       	push	r29
    20be:	cf 93       	push	r28
    20c0:	00 d0       	rcall	.+0      	; 0x20c2 <scall_mutex_unlock+0x6>
    20c2:	cd b7       	in	r28, 0x3d	; 61
    20c4:	de b7       	in	r29, 0x3e	; 62
    20c6:	9a 83       	std	Y+2, r25	; 0x02
    20c8:	89 83       	std	Y+1, r24	; 0x01
    _mutex_unlock( (mutex_t *)arg );
    20ca:	89 81       	ldd	r24, Y+1	; 0x01
    20cc:	9a 81       	ldd	r25, Y+2	; 0x02
    20ce:	0e 94 d5 07 	call	0xfaa	; 0xfaa <_mutex_unlock>
}
    20d2:	0f 90       	pop	r0
    20d4:	0f 90       	pop	r0
    20d6:	cf 91       	pop	r28
    20d8:	df 91       	pop	r29
    20da:	08 95       	ret

000020dc <scall_ipc_wait_pointer>:
///=================================================================
///                           IPC
///--------------------------------------------------------------------------------------------
/// SYSCALL_IPC_WAIT_P
void scall_ipc_wait_pointer(void * arg)
{
    20dc:	df 93       	push	r29
    20de:	cf 93       	push	r28
    20e0:	00 d0       	rcall	.+0      	; 0x20e2 <scall_ipc_wait_pointer+0x6>
    20e2:	cd b7       	in	r28, 0x3d	; 61
    20e4:	de b7       	in	r29, 0x3e	; 62
    20e6:	9a 83       	std	Y+2, r25	; 0x02
    20e8:	89 83       	std	Y+1, r24	; 0x01
    _ipc_wait( PROC_FLG_IPCW_P, arg );
    20ea:	29 81       	ldd	r18, Y+1	; 0x01
    20ec:	3a 81       	ldd	r19, Y+2	; 0x02
    20ee:	80 e0       	ldi	r24, 0x00	; 0
    20f0:	91 e0       	ldi	r25, 0x01	; 1
    20f2:	b9 01       	movw	r22, r18
    20f4:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <_ipc_wait>
}
    20f8:	0f 90       	pop	r0
    20fa:	0f 90       	pop	r0
    20fc:	cf 91       	pop	r28
    20fe:	df 91       	pop	r29
    2100:	08 95       	ret

00002102 <ipc_wait_pointer>:
void * ipc_wait_pointer( void )
{
    2102:	df 93       	push	r29
    2104:	cf 93       	push	r28
    2106:	00 d0       	rcall	.+0      	; 0x2108 <ipc_wait_pointer+0x6>
    2108:	cd b7       	in	r28, 0x3d	; 61
    210a:	de b7       	in	r29, 0x3e	; 62
    void * ret = (void *)0;
    210c:	1a 82       	std	Y+2, r1	; 0x02
    210e:	19 82       	std	Y+1, r1	; 0x01
    syscall_bugurt( SYSCALL_IPC_WAIT_P, (void *)&ret );
    2110:	85 e1       	ldi	r24, 0x15	; 21
    2112:	9e 01       	movw	r18, r28
    2114:	2f 5f       	subi	r18, 0xFF	; 255
    2116:	3f 4f       	sbci	r19, 0xFF	; 255
    2118:	b9 01       	movw	r22, r18
    211a:	0e 94 a5 02 	call	0x54a	; 0x54a <syscall_bugurt>
    return ret;
    211e:	89 81       	ldd	r24, Y+1	; 0x01
    2120:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2122:	0f 90       	pop	r0
    2124:	0f 90       	pop	r0
    2126:	cf 91       	pop	r28
    2128:	df 91       	pop	r29
    212a:	08 95       	ret

0000212c <scall_ipc_wait_data>:
///--------------------------------------------------------------------------------------------
/// SYSCALL_IPC_WAIT_D
void scall_ipc_wait_data(void * arg)
{
    212c:	df 93       	push	r29
    212e:	cf 93       	push	r28
    2130:	00 d0       	rcall	.+0      	; 0x2132 <scall_ipc_wait_data+0x6>
    2132:	cd b7       	in	r28, 0x3d	; 61
    2134:	de b7       	in	r29, 0x3e	; 62
    2136:	9a 83       	std	Y+2, r25	; 0x02
    2138:	89 83       	std	Y+1, r24	; 0x01
    _ipc_wait( PROC_FLG_IPCW_D, arg );
    213a:	29 81       	ldd	r18, Y+1	; 0x01
    213c:	3a 81       	ldd	r19, Y+2	; 0x02
    213e:	80 e0       	ldi	r24, 0x00	; 0
    2140:	92 e0       	ldi	r25, 0x02	; 2
    2142:	b9 01       	movw	r22, r18
    2144:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <_ipc_wait>
}
    2148:	0f 90       	pop	r0
    214a:	0f 90       	pop	r0
    214c:	cf 91       	pop	r28
    214e:	df 91       	pop	r29
    2150:	08 95       	ret

00002152 <ipc_wait_data>:
ipc_data_t ipc_wait_data( void )
{
    2152:	df 93       	push	r29
    2154:	cf 93       	push	r28
    2156:	0f 92       	push	r0
    2158:	cd b7       	in	r28, 0x3d	; 61
    215a:	de b7       	in	r29, 0x3e	; 62
    ipc_data_t ret;
    syscall_bugurt( SYSCALL_IPC_WAIT_D, (void *)&ret );
    215c:	86 e1       	ldi	r24, 0x16	; 22
    215e:	9e 01       	movw	r18, r28
    2160:	2f 5f       	subi	r18, 0xFF	; 255
    2162:	3f 4f       	sbci	r19, 0xFF	; 255
    2164:	b9 01       	movw	r22, r18
    2166:	0e 94 a5 02 	call	0x54a	; 0x54a <syscall_bugurt>
    return ret;
    216a:	89 81       	ldd	r24, Y+1	; 0x01
}
    216c:	0f 90       	pop	r0
    216e:	cf 91       	pop	r28
    2170:	df 91       	pop	r29
    2172:	08 95       	ret

00002174 <scall_ipc_send_pointer>:
///--------------------------------------------------------------------------------------------
/// SYSCALL_IPC_SEND_P
void scall_ipc_send_pointer(void * arg)
{
    2174:	0f 93       	push	r16
    2176:	1f 93       	push	r17
    2178:	df 93       	push	r29
    217a:	cf 93       	push	r28
    217c:	00 d0       	rcall	.+0      	; 0x217e <scall_ipc_send_pointer+0xa>
    217e:	cd b7       	in	r28, 0x3d	; 61
    2180:	de b7       	in	r29, 0x3e	; 62
    2182:	9a 83       	std	Y+2, r25	; 0x02
    2184:	89 83       	std	Y+1, r24	; 0x01
    ((ipc_send_pointer_arg_t *)arg)->ret = ipc_send_pointer_isr( ((ipc_send_pointer_arg_t *)arg)->proc, ((ipc_send_pointer_arg_t *)arg)->pointer );
    2186:	09 81       	ldd	r16, Y+1	; 0x01
    2188:	1a 81       	ldd	r17, Y+2	; 0x02
    218a:	e9 81       	ldd	r30, Y+1	; 0x01
    218c:	fa 81       	ldd	r31, Y+2	; 0x02
    218e:	80 81       	ld	r24, Z
    2190:	91 81       	ldd	r25, Z+1	; 0x01
    2192:	e9 81       	ldd	r30, Y+1	; 0x01
    2194:	fa 81       	ldd	r31, Y+2	; 0x02
    2196:	23 81       	ldd	r18, Z+3	; 0x03
    2198:	34 81       	ldd	r19, Z+4	; 0x04
    219a:	b9 01       	movw	r22, r18
    219c:	0e 94 28 06 	call	0xc50	; 0xc50 <ipc_send_pointer_isr>
    21a0:	f8 01       	movw	r30, r16
    21a2:	82 83       	std	Z+2, r24	; 0x02
}
    21a4:	0f 90       	pop	r0
    21a6:	0f 90       	pop	r0
    21a8:	cf 91       	pop	r28
    21aa:	df 91       	pop	r29
    21ac:	1f 91       	pop	r17
    21ae:	0f 91       	pop	r16
    21b0:	08 95       	ret

000021b2 <ipc_send_pointer>:
bool_t ipc_send_pointer( proc_t * proc, void * pointer )
{
    21b2:	df 93       	push	r29
    21b4:	cf 93       	push	r28
    21b6:	cd b7       	in	r28, 0x3d	; 61
    21b8:	de b7       	in	r29, 0x3e	; 62
    21ba:	29 97       	sbiw	r28, 0x09	; 9
    21bc:	0f b6       	in	r0, 0x3f	; 63
    21be:	f8 94       	cli
    21c0:	de bf       	out	0x3e, r29	; 62
    21c2:	0f be       	out	0x3f, r0	; 63
    21c4:	cd bf       	out	0x3d, r28	; 61
    21c6:	9f 83       	std	Y+7, r25	; 0x07
    21c8:	8e 83       	std	Y+6, r24	; 0x06
    21ca:	79 87       	std	Y+9, r23	; 0x09
    21cc:	68 87       	std	Y+8, r22	; 0x08
    ipc_send_pointer_arg_t arg;
    arg.proc = proc;
    21ce:	8e 81       	ldd	r24, Y+6	; 0x06
    21d0:	9f 81       	ldd	r25, Y+7	; 0x07
    21d2:	9a 83       	std	Y+2, r25	; 0x02
    21d4:	89 83       	std	Y+1, r24	; 0x01
    arg.pointer = pointer;
    21d6:	88 85       	ldd	r24, Y+8	; 0x08
    21d8:	99 85       	ldd	r25, Y+9	; 0x09
    21da:	9d 83       	std	Y+5, r25	; 0x05
    21dc:	8c 83       	std	Y+4, r24	; 0x04
    syscall_bugurt( SYSCALL_IPC_SEND_P, (void *)&arg );
    21de:	87 e1       	ldi	r24, 0x17	; 23
    21e0:	9e 01       	movw	r18, r28
    21e2:	2f 5f       	subi	r18, 0xFF	; 255
    21e4:	3f 4f       	sbci	r19, 0xFF	; 255
    21e6:	b9 01       	movw	r22, r18
    21e8:	0e 94 a5 02 	call	0x54a	; 0x54a <syscall_bugurt>
    return arg.ret;
    21ec:	8b 81       	ldd	r24, Y+3	; 0x03
}
    21ee:	29 96       	adiw	r28, 0x09	; 9
    21f0:	0f b6       	in	r0, 0x3f	; 63
    21f2:	f8 94       	cli
    21f4:	de bf       	out	0x3e, r29	; 62
    21f6:	0f be       	out	0x3f, r0	; 63
    21f8:	cd bf       	out	0x3d, r28	; 61
    21fa:	cf 91       	pop	r28
    21fc:	df 91       	pop	r29
    21fe:	08 95       	ret

00002200 <scall_ipc_send_data>:
///--------------------------------------------------------------------------------------------
/// SYSCALL_IPC_SEND_D
void scall_ipc_send_data(void * arg)
{
    2200:	0f 93       	push	r16
    2202:	1f 93       	push	r17
    2204:	df 93       	push	r29
    2206:	cf 93       	push	r28
    2208:	00 d0       	rcall	.+0      	; 0x220a <scall_ipc_send_data+0xa>
    220a:	cd b7       	in	r28, 0x3d	; 61
    220c:	de b7       	in	r29, 0x3e	; 62
    220e:	9a 83       	std	Y+2, r25	; 0x02
    2210:	89 83       	std	Y+1, r24	; 0x01
    ((ipc_send_data_arg_t *)arg)->ret = ipc_send_data_isr( ((ipc_send_data_arg_t *)arg)->proc, ((ipc_send_data_arg_t *)arg)->data );
    2212:	09 81       	ldd	r16, Y+1	; 0x01
    2214:	1a 81       	ldd	r17, Y+2	; 0x02
    2216:	e9 81       	ldd	r30, Y+1	; 0x01
    2218:	fa 81       	ldd	r31, Y+2	; 0x02
    221a:	80 81       	ld	r24, Z
    221c:	91 81       	ldd	r25, Z+1	; 0x01
    221e:	e9 81       	ldd	r30, Y+1	; 0x01
    2220:	fa 81       	ldd	r31, Y+2	; 0x02
    2222:	23 81       	ldd	r18, Z+3	; 0x03
    2224:	62 2f       	mov	r22, r18
    2226:	0e 94 5d 06 	call	0xcba	; 0xcba <ipc_send_data_isr>
    222a:	f8 01       	movw	r30, r16
    222c:	82 83       	std	Z+2, r24	; 0x02
}
    222e:	0f 90       	pop	r0
    2230:	0f 90       	pop	r0
    2232:	cf 91       	pop	r28
    2234:	df 91       	pop	r29
    2236:	1f 91       	pop	r17
    2238:	0f 91       	pop	r16
    223a:	08 95       	ret

0000223c <ipc_send_data>:
bool_t ipc_send_data( proc_t * proc, ipc_data_t data )
{
    223c:	df 93       	push	r29
    223e:	cf 93       	push	r28
    2240:	cd b7       	in	r28, 0x3d	; 61
    2242:	de b7       	in	r29, 0x3e	; 62
    2244:	27 97       	sbiw	r28, 0x07	; 7
    2246:	0f b6       	in	r0, 0x3f	; 63
    2248:	f8 94       	cli
    224a:	de bf       	out	0x3e, r29	; 62
    224c:	0f be       	out	0x3f, r0	; 63
    224e:	cd bf       	out	0x3d, r28	; 61
    2250:	9e 83       	std	Y+6, r25	; 0x06
    2252:	8d 83       	std	Y+5, r24	; 0x05
    2254:	6f 83       	std	Y+7, r22	; 0x07
    volatile ipc_send_data_arg_t arg;
    arg.proc = proc;
    2256:	8d 81       	ldd	r24, Y+5	; 0x05
    2258:	9e 81       	ldd	r25, Y+6	; 0x06
    225a:	9a 83       	std	Y+2, r25	; 0x02
    225c:	89 83       	std	Y+1, r24	; 0x01
    arg.data = data;
    225e:	8f 81       	ldd	r24, Y+7	; 0x07
    2260:	8c 83       	std	Y+4, r24	; 0x04
    syscall_bugurt( SYSCALL_IPC_SEND_D, (void *)&arg );
    2262:	88 e1       	ldi	r24, 0x18	; 24
    2264:	9e 01       	movw	r18, r28
    2266:	2f 5f       	subi	r18, 0xFF	; 255
    2268:	3f 4f       	sbci	r19, 0xFF	; 255
    226a:	b9 01       	movw	r22, r18
    226c:	0e 94 a5 02 	call	0x54a	; 0x54a <syscall_bugurt>
    return arg.ret;
    2270:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2272:	27 96       	adiw	r28, 0x07	; 7
    2274:	0f b6       	in	r0, 0x3f	; 63
    2276:	f8 94       	cli
    2278:	de bf       	out	0x3e, r29	; 62
    227a:	0f be       	out	0x3f, r0	; 63
    227c:	cd bf       	out	0x3d, r28	; 61
    227e:	cf 91       	pop	r28
    2280:	df 91       	pop	r29
    2282:	08 95       	ret

00002284 <_clear_timer>:
*                                                                                        *
*****************************************************************************************/
#include "../include/bugurt.h"
//========================================================================================
void _clear_timer(timer_t * t)
{
    2284:	df 93       	push	r29
    2286:	cf 93       	push	r28
    2288:	00 d0       	rcall	.+0      	; 0x228a <_clear_timer+0x6>
    228a:	cd b7       	in	r28, 0x3d	; 61
    228c:	de b7       	in	r29, 0x3e	; 62
    228e:	9a 83       	std	Y+2, r25	; 0x02
    2290:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    core_id_t current_core = _enter_crit_sec();
    spin_lock( &kernel.timer_lock );
#else
    enter_crit_sec();
    2292:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <enter_crit_sec>
#endif //CONFIG_MP
    *t = kernel.timer;
    2296:	80 91 a5 01 	lds	r24, 0x01A5
    229a:	90 91 a6 01 	lds	r25, 0x01A6
    229e:	e9 81       	ldd	r30, Y+1	; 0x01
    22a0:	fa 81       	ldd	r31, Y+2	; 0x02
    22a2:	91 83       	std	Z+1, r25	; 0x01
    22a4:	80 83       	st	Z, r24
#ifdef CONFIG_MP
    spin_unlock( &kernel.timer_lock );
    _exit_crit_sec(current_core);
#else
    exit_crit_sec();
    22a6:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <exit_crit_sec>
#endif //CONFIG_MP
}
    22aa:	0f 90       	pop	r0
    22ac:	0f 90       	pop	r0
    22ae:	cf 91       	pop	r28
    22b0:	df 91       	pop	r29
    22b2:	08 95       	ret

000022b4 <_timer>:
//----------------------------------------------------------------------------------------
timer_t _timer(timer_t t)
{
    22b4:	df 93       	push	r29
    22b6:	cf 93       	push	r28
    22b8:	00 d0       	rcall	.+0      	; 0x22ba <_timer+0x6>
    22ba:	00 d0       	rcall	.+0      	; 0x22bc <_timer+0x8>
    22bc:	cd b7       	in	r28, 0x3d	; 61
    22be:	de b7       	in	r29, 0x3e	; 62
    22c0:	9c 83       	std	Y+4, r25	; 0x04
    22c2:	8b 83       	std	Y+3, r24	; 0x03
    timer_t ret;
#ifdef CONFIG_MP
    core_id_t current_core = _enter_crit_sec();
    spin_lock( &kernel.timer_lock );
#else
    enter_crit_sec();
    22c4:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <enter_crit_sec>
#endif //CONFIG_MP
    ret = (timer_t)kernel.timer - (timer_t)t;
    22c8:	20 91 a5 01 	lds	r18, 0x01A5
    22cc:	30 91 a6 01 	lds	r19, 0x01A6
    22d0:	8b 81       	ldd	r24, Y+3	; 0x03
    22d2:	9c 81       	ldd	r25, Y+4	; 0x04
    22d4:	a9 01       	movw	r20, r18
    22d6:	48 1b       	sub	r20, r24
    22d8:	59 0b       	sbc	r21, r25
    22da:	ca 01       	movw	r24, r20
    22dc:	9a 83       	std	Y+2, r25	; 0x02
    22de:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONFIG_MP
    spin_unlock( &kernel.timer_lock );
    _exit_crit_sec(current_core);
#else
    exit_crit_sec();
    22e0:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <exit_crit_sec>
#endif //CONFIG_MP
    return ret;
    22e4:	89 81       	ldd	r24, Y+1	; 0x01
    22e6:	9a 81       	ldd	r25, Y+2	; 0x02
}
    22e8:	0f 90       	pop	r0
    22ea:	0f 90       	pop	r0
    22ec:	0f 90       	pop	r0
    22ee:	0f 90       	pop	r0
    22f0:	cf 91       	pop	r28
    22f2:	df 91       	pop	r29
    22f4:	08 95       	ret

000022f6 <wait_time>:

//----------------------------------------------------------------------------------------
void wait_time(timer_t time)
{
    22f6:	df 93       	push	r29
    22f8:	cf 93       	push	r28
    22fa:	00 d0       	rcall	.+0      	; 0x22fc <wait_time+0x6>
    22fc:	00 d0       	rcall	.+0      	; 0x22fe <wait_time+0x8>
    22fe:	0f 92       	push	r0
    2300:	cd b7       	in	r28, 0x3d	; 61
    2302:	de b7       	in	r29, 0x3e	; 62
    2304:	9d 83       	std	Y+5, r25	; 0x05
    2306:	8c 83       	std	Y+4, r24	; 0x04
    timer_t tmr;
    bool_t roll=(bool_t)1;
    2308:	81 e0       	ldi	r24, 0x01	; 1
    230a:	89 83       	std	Y+1, r24	; 0x01
    CLEAR_TIMER(tmr);
    230c:	ce 01       	movw	r24, r28
    230e:	02 96       	adiw	r24, 0x02	; 2
    2310:	0e 94 42 11 	call	0x2284	; 0x2284 <_clear_timer>
    2314:	0d c0       	rjmp	.+26     	; 0x2330 <wait_time+0x3a>
    while((bool_t)roll)
    {
        roll = (bool_t)( TIMER(tmr) < (timer_t)time );
    2316:	8a 81       	ldd	r24, Y+2	; 0x02
    2318:	9b 81       	ldd	r25, Y+3	; 0x03
    231a:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <_timer>
    231e:	9c 01       	movw	r18, r24
    2320:	8c 81       	ldd	r24, Y+4	; 0x04
    2322:	9d 81       	ldd	r25, Y+5	; 0x05
    2324:	19 82       	std	Y+1, r1	; 0x01
    2326:	28 17       	cp	r18, r24
    2328:	39 07       	cpc	r19, r25
    232a:	10 f4       	brcc	.+4      	; 0x2330 <wait_time+0x3a>
    232c:	81 e0       	ldi	r24, 0x01	; 1
    232e:	89 83       	std	Y+1, r24	; 0x01
void wait_time(timer_t time)
{
    timer_t tmr;
    bool_t roll=(bool_t)1;
    CLEAR_TIMER(tmr);
    while((bool_t)roll)
    2330:	89 81       	ldd	r24, Y+1	; 0x01
    2332:	88 23       	and	r24, r24
    2334:	81 f7       	brne	.-32     	; 0x2316 <wait_time+0x20>
    {
        roll = (bool_t)( TIMER(tmr) < (timer_t)time );
    }
}
    2336:	0f 90       	pop	r0
    2338:	0f 90       	pop	r0
    233a:	0f 90       	pop	r0
    233c:	0f 90       	pop	r0
    233e:	0f 90       	pop	r0
    2340:	cf 91       	pop	r28
    2342:	df 91       	pop	r29
    2344:	08 95       	ret

00002346 <xlist_init>:
**********************************************/
//Инициация
void xlist_init(
    xlist_t * xlist
)
{
    2346:	df 93       	push	r29
    2348:	cf 93       	push	r28
    234a:	00 d0       	rcall	.+0      	; 0x234c <xlist_init+0x6>
    234c:	00 d0       	rcall	.+0      	; 0x234e <xlist_init+0x8>
    234e:	cd b7       	in	r28, 0x3d	; 61
    2350:	de b7       	in	r29, 0x3e	; 62
    2352:	9c 83       	std	Y+4, r25	; 0x04
    2354:	8b 83       	std	Y+3, r24	; 0x03
    count_t i;
    //список пуст
    xlist->index = (index_t)0;
    2356:	eb 81       	ldd	r30, Y+3	; 0x03
    2358:	fc 81       	ldd	r31, Y+4	; 0x04
    235a:	10 8a       	std	Z+16, r1	; 0x10
    //обнуляем указатели
    for( i = 0; i < BITS_IN_INDEX_T; i++ )xlist->item[i] = (item_t *)0;
    235c:	1a 82       	std	Y+2, r1	; 0x02
    235e:	19 82       	std	Y+1, r1	; 0x01
    2360:	10 c0       	rjmp	.+32     	; 0x2382 <xlist_init+0x3c>
    2362:	89 81       	ldd	r24, Y+1	; 0x01
    2364:	9a 81       	ldd	r25, Y+2	; 0x02
    2366:	2b 81       	ldd	r18, Y+3	; 0x03
    2368:	3c 81       	ldd	r19, Y+4	; 0x04
    236a:	88 0f       	add	r24, r24
    236c:	99 1f       	adc	r25, r25
    236e:	f9 01       	movw	r30, r18
    2370:	e8 0f       	add	r30, r24
    2372:	f9 1f       	adc	r31, r25
    2374:	11 82       	std	Z+1, r1	; 0x01
    2376:	10 82       	st	Z, r1
    2378:	89 81       	ldd	r24, Y+1	; 0x01
    237a:	9a 81       	ldd	r25, Y+2	; 0x02
    237c:	01 96       	adiw	r24, 0x01	; 1
    237e:	9a 83       	std	Y+2, r25	; 0x02
    2380:	89 83       	std	Y+1, r24	; 0x01
    2382:	89 81       	ldd	r24, Y+1	; 0x01
    2384:	9a 81       	ldd	r25, Y+2	; 0x02
    2386:	88 30       	cpi	r24, 0x08	; 8
    2388:	91 05       	cpc	r25, r1
    238a:	58 f3       	brcs	.-42     	; 0x2362 <xlist_init+0x1c>
}
    238c:	0f 90       	pop	r0
    238e:	0f 90       	pop	r0
    2390:	0f 90       	pop	r0
    2392:	0f 90       	pop	r0
    2394:	cf 91       	pop	r28
    2396:	df 91       	pop	r29
    2398:	08 95       	ret

0000239a <xlist_head>:
//===========================================================================
//Поиск головы списка
item_t * xlist_head(xlist_t * xlist)
{
    239a:	df 93       	push	r29
    239c:	cf 93       	push	r28
    239e:	00 d0       	rcall	.+0      	; 0x23a0 <xlist_head+0x6>
    23a0:	00 d0       	rcall	.+0      	; 0x23a2 <xlist_head+0x8>
    23a2:	0f 92       	push	r0
    23a4:	cd b7       	in	r28, 0x3d	; 61
    23a6:	de b7       	in	r29, 0x3e	; 62
    23a8:	9d 83       	std	Y+5, r25	; 0x05
    23aa:	8c 83       	std	Y+4, r24	; 0x04
    item_t * ret_val = (item_t *)0;
    23ac:	1b 82       	std	Y+3, r1	; 0x03
    23ae:	1a 82       	std	Y+2, r1	; 0x02
    index_t index = xlist->index;
    23b0:	ec 81       	ldd	r30, Y+4	; 0x04
    23b2:	fd 81       	ldd	r31, Y+5	; 0x05
    23b4:	80 89       	ldd	r24, Z+16	; 0x10
    23b6:	89 83       	std	Y+1, r24	; 0x01

    if( index != (index_t)0 )
    23b8:	89 81       	ldd	r24, Y+1	; 0x01
    23ba:	88 23       	and	r24, r24
    23bc:	81 f0       	breq	.+32     	; 0x23de <xlist_head+0x44>
    {
        ret_val = xlist->item[ index_search( index ) ];
    23be:	89 81       	ldd	r24, Y+1	; 0x01
    23c0:	0e 94 b9 05 	call	0xb72	; 0xb72 <index_search>
    23c4:	88 2f       	mov	r24, r24
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	2c 81       	ldd	r18, Y+4	; 0x04
    23ca:	3d 81       	ldd	r19, Y+5	; 0x05
    23cc:	88 0f       	add	r24, r24
    23ce:	99 1f       	adc	r25, r25
    23d0:	f9 01       	movw	r30, r18
    23d2:	e8 0f       	add	r30, r24
    23d4:	f9 1f       	adc	r31, r25
    23d6:	80 81       	ld	r24, Z
    23d8:	91 81       	ldd	r25, Z+1	; 0x01
    23da:	9b 83       	std	Y+3, r25	; 0x03
    23dc:	8a 83       	std	Y+2, r24	; 0x02
    }
    return ret_val;
    23de:	8a 81       	ldd	r24, Y+2	; 0x02
    23e0:	9b 81       	ldd	r25, Y+3	; 0x03
}
    23e2:	0f 90       	pop	r0
    23e4:	0f 90       	pop	r0
    23e6:	0f 90       	pop	r0
    23e8:	0f 90       	pop	r0
    23ea:	0f 90       	pop	r0
    23ec:	cf 91       	pop	r28
    23ee:	df 91       	pop	r29
    23f0:	08 95       	ret

000023f2 <xlist_switch>:

//===========================================================================
// переключение указателя в массиве на следующий элемент, пригодится в планировщике
void xlist_switch(xlist_t * xlist, prio_t prio)
{
    23f2:	df 93       	push	r29
    23f4:	cf 93       	push	r28
    23f6:	00 d0       	rcall	.+0      	; 0x23f8 <xlist_switch+0x6>
    23f8:	00 d0       	rcall	.+0      	; 0x23fa <xlist_switch+0x8>
    23fa:	0f 92       	push	r0
    23fc:	cd b7       	in	r28, 0x3d	; 61
    23fe:	de b7       	in	r29, 0x3e	; 62
    2400:	9c 83       	std	Y+4, r25	; 0x04
    2402:	8b 83       	std	Y+3, r24	; 0x03
    2404:	6d 83       	std	Y+5, r22	; 0x05
    item_t ** current = xlist->item + prio;
    2406:	2b 81       	ldd	r18, Y+3	; 0x03
    2408:	3c 81       	ldd	r19, Y+4	; 0x04
    240a:	8d 81       	ldd	r24, Y+5	; 0x05
    240c:	88 2f       	mov	r24, r24
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	88 0f       	add	r24, r24
    2412:	99 1f       	adc	r25, r25
    2414:	82 0f       	add	r24, r18
    2416:	93 1f       	adc	r25, r19
    2418:	9a 83       	std	Y+2, r25	; 0x02
    241a:	89 83       	std	Y+1, r24	; 0x01
    *current = (*current)->next;
    241c:	e9 81       	ldd	r30, Y+1	; 0x01
    241e:	fa 81       	ldd	r31, Y+2	; 0x02
    2420:	01 90       	ld	r0, Z+
    2422:	f0 81       	ld	r31, Z
    2424:	e0 2d       	mov	r30, r0
    2426:	80 81       	ld	r24, Z
    2428:	91 81       	ldd	r25, Z+1	; 0x01
    242a:	e9 81       	ldd	r30, Y+1	; 0x01
    242c:	fa 81       	ldd	r31, Y+2	; 0x02
    242e:	91 83       	std	Z+1, r25	; 0x01
    2430:	80 83       	st	Z, r24
    //*current = (item_t *)*(item_t **)*(item_t ***)current;
}
    2432:	0f 90       	pop	r0
    2434:	0f 90       	pop	r0
    2436:	0f 90       	pop	r0
    2438:	0f 90       	pop	r0
    243a:	0f 90       	pop	r0
    243c:	cf 91       	pop	r28
    243e:	df 91       	pop	r29
    2440:	08 95       	ret

00002442 <start_scheduler>:
    R2_off();
    G2_on();
}

void start_scheduler( void )
{
    2442:	df 93       	push	r29
    2444:	cf 93       	push	r28
    2446:	cd b7       	in	r28, 0x3d	; 61
    2448:	de b7       	in	r29, 0x3e	; 62
    TIMSK2 |= 0x02;
    244a:	a0 e7       	ldi	r26, 0x70	; 112
    244c:	b0 e0       	ldi	r27, 0x00	; 0
    244e:	e0 e7       	ldi	r30, 0x70	; 112
    2450:	f0 e0       	ldi	r31, 0x00	; 0
    2452:	80 81       	ld	r24, Z
    2454:	82 60       	ori	r24, 0x02	; 2
    2456:	8c 93       	st	X, r24
}
    2458:	cf 91       	pop	r28
    245a:	df 91       	pop	r29
    245c:	08 95       	ret

0000245e <blink_1>:
{
    TIMSK2 &= ~0x02;
}

///----------------------------------------------------------------------------------------
void blink_1(void * t) {PORTB ^= 0x10;}
    245e:	df 93       	push	r29
    2460:	cf 93       	push	r28
    2462:	00 d0       	rcall	.+0      	; 0x2464 <blink_1+0x6>
    2464:	cd b7       	in	r28, 0x3d	; 61
    2466:	de b7       	in	r29, 0x3e	; 62
    2468:	9a 83       	std	Y+2, r25	; 0x02
    246a:	89 83       	std	Y+1, r24	; 0x01
    246c:	a5 e2       	ldi	r26, 0x25	; 37
    246e:	b0 e0       	ldi	r27, 0x00	; 0
    2470:	e5 e2       	ldi	r30, 0x25	; 37
    2472:	f0 e0       	ldi	r31, 0x00	; 0
    2474:	90 81       	ld	r25, Z
    2476:	80 e1       	ldi	r24, 0x10	; 16
    2478:	89 27       	eor	r24, r25
    247a:	8c 93       	st	X, r24
    247c:	0f 90       	pop	r0
    247e:	0f 90       	pop	r0
    2480:	cf 91       	pop	r28
    2482:	df 91       	pop	r29
    2484:	08 95       	ret

00002486 <blink_2>:
void blink_2(void * t) {PORTB ^= 0x08;}
    2486:	df 93       	push	r29
    2488:	cf 93       	push	r28
    248a:	00 d0       	rcall	.+0      	; 0x248c <blink_2+0x6>
    248c:	cd b7       	in	r28, 0x3d	; 61
    248e:	de b7       	in	r29, 0x3e	; 62
    2490:	9a 83       	std	Y+2, r25	; 0x02
    2492:	89 83       	std	Y+1, r24	; 0x01
    2494:	a5 e2       	ldi	r26, 0x25	; 37
    2496:	b0 e0       	ldi	r27, 0x00	; 0
    2498:	e5 e2       	ldi	r30, 0x25	; 37
    249a:	f0 e0       	ldi	r31, 0x00	; 0
    249c:	90 81       	ld	r25, Z
    249e:	88 e0       	ldi	r24, 0x08	; 8
    24a0:	89 27       	eor	r24, r25
    24a2:	8c 93       	st	X, r24
    24a4:	0f 90       	pop	r0
    24a6:	0f 90       	pop	r0
    24a8:	cf 91       	pop	r28
    24aa:	df 91       	pop	r29
    24ac:	08 95       	ret

000024ae <blink_3>:
void blink_3(void * t) {PORTB ^= 0x04;}
    24ae:	df 93       	push	r29
    24b0:	cf 93       	push	r28
    24b2:	00 d0       	rcall	.+0      	; 0x24b4 <blink_3+0x6>
    24b4:	cd b7       	in	r28, 0x3d	; 61
    24b6:	de b7       	in	r29, 0x3e	; 62
    24b8:	9a 83       	std	Y+2, r25	; 0x02
    24ba:	89 83       	std	Y+1, r24	; 0x01
    24bc:	a5 e2       	ldi	r26, 0x25	; 37
    24be:	b0 e0       	ldi	r27, 0x00	; 0
    24c0:	e5 e2       	ldi	r30, 0x25	; 37
    24c2:	f0 e0       	ldi	r31, 0x00	; 0
    24c4:	90 81       	ld	r25, Z
    24c6:	84 e0       	ldi	r24, 0x04	; 4
    24c8:	89 27       	eor	r24, r25
    24ca:	8c 93       	st	X, r24
    24cc:	0f 90       	pop	r0
    24ce:	0f 90       	pop	r0
    24d0:	cf 91       	pop	r28
    24d2:	df 91       	pop	r29
    24d4:	08 95       	ret

000024d6 <blink_4>:
void blink_4(void * t) {PORTB ^= 0x02;}
    24d6:	df 93       	push	r29
    24d8:	cf 93       	push	r28
    24da:	00 d0       	rcall	.+0      	; 0x24dc <blink_4+0x6>
    24dc:	cd b7       	in	r28, 0x3d	; 61
    24de:	de b7       	in	r29, 0x3e	; 62
    24e0:	9a 83       	std	Y+2, r25	; 0x02
    24e2:	89 83       	std	Y+1, r24	; 0x01
    24e4:	a5 e2       	ldi	r26, 0x25	; 37
    24e6:	b0 e0       	ldi	r27, 0x00	; 0
    24e8:	e5 e2       	ldi	r30, 0x25	; 37
    24ea:	f0 e0       	ldi	r31, 0x00	; 0
    24ec:	90 81       	ld	r25, Z
    24ee:	82 e0       	ldi	r24, 0x02	; 2
    24f0:	89 27       	eor	r24, r25
    24f2:	8c 93       	st	X, r24
    24f4:	0f 90       	pop	r0
    24f6:	0f 90       	pop	r0
    24f8:	cf 91       	pop	r28
    24fa:	df 91       	pop	r29
    24fc:	08 95       	ret

000024fe <blink_12>:
void blink_7(void * t) {PORTC ^= 0x10;}
void blink_8(void * t) {PORTC ^= 0x08;}
void blink_9(void * t) {PORTC ^= 0x04;}
void blink_10(void * t) {PORTC ^= 0x02;}
void blink_11(void * t) {PORTC ^= 0x01;}
void blink_12(void * t) {
    24fe:	df 93       	push	r29
    2500:	cf 93       	push	r28
    2502:	00 d0       	rcall	.+0      	; 0x2504 <blink_12+0x6>
    2504:	cd b7       	in	r28, 0x3d	; 61
    2506:	de b7       	in	r29, 0x3e	; 62
    2508:	9a 83       	std	Y+2, r25	; 0x02
    250a:	89 83       	std	Y+1, r24	; 0x01
    PORTB ^= 0x20;
    250c:	a5 e2       	ldi	r26, 0x25	; 37
    250e:	b0 e0       	ldi	r27, 0x00	; 0
    2510:	e5 e2       	ldi	r30, 0x25	; 37
    2512:	f0 e0       	ldi	r31, 0x00	; 0
    2514:	90 81       	ld	r25, Z
    2516:	80 e2       	ldi	r24, 0x20	; 32
    2518:	89 27       	eor	r24, r25
    251a:	8c 93       	st	X, r24
    blink_G3();
    251c:	ab e2       	ldi	r26, 0x2B	; 43
    251e:	b0 e0       	ldi	r27, 0x00	; 0
    2520:	eb e2       	ldi	r30, 0x2B	; 43
    2522:	f0 e0       	ldi	r31, 0x00	; 0
    2524:	90 81       	ld	r25, Z
    2526:	80 e4       	ldi	r24, 0x40	; 64
    2528:	89 27       	eor	r24, r25
    252a:	8c 93       	st	X, r24
    blink_R3();
    252c:	ab e2       	ldi	r26, 0x2B	; 43
    252e:	b0 e0       	ldi	r27, 0x00	; 0
    2530:	eb e2       	ldi	r30, 0x2B	; 43
    2532:	f0 e0       	ldi	r31, 0x00	; 0
    2534:	90 81       	ld	r25, Z
    2536:	80 e2       	ldi	r24, 0x20	; 32
    2538:	89 27       	eor	r24, r25
    253a:	8c 93       	st	X, r24
    }
    253c:	0f 90       	pop	r0
    253e:	0f 90       	pop	r0
    2540:	cf 91       	pop	r28
    2542:	df 91       	pop	r29
    2544:	08 95       	ret

00002546 <main0>:
///----------------------------------------------------------------------------------------

proc_t proc[4];
stack_t stack[4][128];
void main0(void * t)
{
    2546:	df 93       	push	r29
    2548:	cf 93       	push	r28
    254a:	00 d0       	rcall	.+0      	; 0x254c <main0+0x6>
    254c:	cd b7       	in	r28, 0x3d	; 61
    254e:	de b7       	in	r29, 0x3e	; 62
    2550:	9a 83       	std	Y+2, r25	; 0x02
    2552:	89 83       	std	Y+1, r24	; 0x01
    while(1)
    {
        wait_time(50);
    2554:	82 e3       	ldi	r24, 0x32	; 50
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <wait_time>
    255c:	fb cf       	rjmp	.-10     	; 0x2554 <main0+0xe>

0000255e <main1>:
    }
}

void main1(void * t)
{
    255e:	df 93       	push	r29
    2560:	cf 93       	push	r28
    2562:	00 d0       	rcall	.+0      	; 0x2564 <main1+0x6>
    2564:	cd b7       	in	r28, 0x3d	; 61
    2566:	de b7       	in	r29, 0x3e	; 62
    2568:	9a 83       	std	Y+2, r25	; 0x02
    256a:	89 83       	std	Y+1, r24	; 0x01
    while(1)
    {
        wait_time(50);
    256c:	82 e3       	ldi	r24, 0x32	; 50
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <wait_time>
    2574:	fb cf       	rjmp	.-10     	; 0x256c <main1+0xe>

00002576 <main2>:
    }
}
void * test2 = (void *)0;
void main2(void * t)
{
    2576:	df 93       	push	r29
    2578:	cf 93       	push	r28
    257a:	00 d0       	rcall	.+0      	; 0x257c <main2+0x6>
    257c:	cd b7       	in	r28, 0x3d	; 61
    257e:	de b7       	in	r29, 0x3e	; 62
    2580:	9a 83       	std	Y+2, r25	; 0x02
    2582:	89 83       	std	Y+1, r24	; 0x01
    while(1)
    {
        test2 = ipc_wait_pointer();
    2584:	0e 94 81 10 	call	0x2102	; 0x2102 <ipc_wait_pointer>
    2588:	90 93 46 01 	sts	0x0146, r25
    258c:	80 93 45 01 	sts	0x0145, r24
        wait_time(200);
    2590:	88 ec       	ldi	r24, 0xC8	; 200
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <wait_time>
        test2 = (void *)0;
    2598:	10 92 46 01 	sts	0x0146, r1
    259c:	10 92 45 01 	sts	0x0145, r1
        ipc_send_data(&proc[3],1);
    25a0:	8c e3       	ldi	r24, 0x3C	; 60
    25a2:	92 e0       	ldi	r25, 0x02	; 2
    25a4:	61 e0       	ldi	r22, 0x01	; 1
    25a6:	0e 94 1e 11 	call	0x223c	; 0x223c <ipc_send_data>
    25aa:	ec cf       	rjmp	.-40     	; 0x2584 <main2+0xe>

000025ac <main3>:
    25ac:	df 93       	push	r29
    25ae:	cf 93       	push	r28
    25b0:	00 d0       	rcall	.+0      	; 0x25b2 <main3+0x6>
    25b2:	cd b7       	in	r28, 0x3d	; 61
    25b4:	de b7       	in	r29, 0x3e	; 62
    25b6:	9a 83       	std	Y+2, r25	; 0x02
    25b8:	89 83       	std	Y+1, r24	; 0x01
    25ba:	0e 94 a9 10 	call	0x2152	; 0x2152 <ipc_wait_data>
    25be:	80 93 47 01 	sts	0x0147, r24
    25c2:	88 ec       	ldi	r24, 0xC8	; 200
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <wait_time>
    25ca:	10 92 47 01 	sts	0x0147, r1
    25ce:	f5 cf       	rjmp	.-22     	; 0x25ba <main3+0xe>

000025d0 <idle_main>:
        wait_time(200);
        test3 = 0;
    }
}
void idle_main(void * t)
{
    25d0:	df 93       	push	r29
    25d2:	cf 93       	push	r28
    25d4:	00 d0       	rcall	.+0      	; 0x25d6 <idle_main+0x6>
    25d6:	cd b7       	in	r28, 0x3d	; 61
    25d8:	de b7       	in	r29, 0x3e	; 62
    25da:	9a 83       	std	Y+2, r25	; 0x02
    25dc:	89 83       	std	Y+1, r24	; 0x01
    while(1)
    {
         wait_time(1000);
    25de:	88 ee       	ldi	r24, 0xE8	; 232
    25e0:	93 e0       	ldi	r25, 0x03	; 3
    25e2:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <wait_time>
         ipc_send_pointer(&proc[2], (void *)1);
    25e6:	8b e0       	ldi	r24, 0x0B	; 11
    25e8:	92 e0       	ldi	r25, 0x02	; 2
    25ea:	61 e0       	ldi	r22, 0x01	; 1
    25ec:	70 e0       	ldi	r23, 0x00	; 0
    25ee:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <ipc_send_pointer>
         ipc_send_pointer(&proc[1], (void *)1);
    25f2:	8a ed       	ldi	r24, 0xDA	; 218
    25f4:	91 e0       	ldi	r25, 0x01	; 1
    25f6:	61 e0       	ldi	r22, 0x01	; 1
    25f8:	70 e0       	ldi	r23, 0x00	; 0
    25fa:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <ipc_send_pointer>
         ipc_send_data(&proc[0], 1);
    25fe:	89 ea       	ldi	r24, 0xA9	; 169
    2600:	91 e0       	ldi	r25, 0x01	; 1
    2602:	61 e0       	ldi	r22, 0x01	; 1
    2604:	0e 94 1e 11 	call	0x223c	; 0x223c <ipc_send_data>
    2608:	ea cf       	rjmp	.-44     	; 0x25de <idle_main+0xe>

0000260a <main>:
    }
}
int main(void)
{
    260a:	8f 92       	push	r8
    260c:	af 92       	push	r10
    260e:	bf 92       	push	r11
    2610:	cf 92       	push	r12
    2612:	ef 92       	push	r14
    2614:	ff 92       	push	r15
    2616:	0f 93       	push	r16
    2618:	1f 93       	push	r17
    261a:	df 93       	push	r29
    261c:	cf 93       	push	r28
    261e:	cd b7       	in	r28, 0x3d	; 61
    2620:	de b7       	in	r29, 0x3e	; 62
    init_bugurt();
    2622:	0e 94 c0 02 	call	0x580	; 0x580 <init_bugurt>

    TCCR2A = 0x02;//
    2626:	e0 eb       	ldi	r30, 0xB0	; 176
    2628:	f0 e0       	ldi	r31, 0x00	; 0
    262a:	82 e0       	ldi	r24, 0x02	; 2
    262c:	80 83       	st	Z, r24
    TCCR2B = 0x05;// prescaler=128
    262e:	e1 eb       	ldi	r30, 0xB1	; 177
    2630:	f0 e0       	ldi	r31, 0x00	; 0
    2632:	85 e0       	ldi	r24, 0x05	; 5
    2634:	80 83       	st	Z, r24
    OCR2A  = 124;
    2636:	e3 eb       	ldi	r30, 0xB3	; 179
    2638:	f0 e0       	ldi	r31, 0x00	; 0
    263a:	8c e7       	ldi	r24, 0x7C	; 124
    263c:	80 83       	st	Z, r24
    OCR2B  = 0x00;
    263e:	e4 eb       	ldi	r30, 0xB4	; 180
    2640:	f0 e0       	ldi	r31, 0x00	; 0
    2642:	10 82       	st	Z, r1
    TIMSK2 = 0x00; // shceduler not started
    2644:	e0 e7       	ldi	r30, 0x70	; 112
    2646:	f0 e0       	ldi	r31, 0x00	; 0
    2648:	10 82       	st	Z, r1
    TIFR2  = 0x00;
    264a:	e7 e3       	ldi	r30, 0x37	; 55
    264c:	f0 e0       	ldi	r31, 0x00	; 0
    264e:	10 82       	st	Z, r1

    EICRA = 0x08; //falling edge
    2650:	e9 e6       	ldi	r30, 0x69	; 105
    2652:	f0 e0       	ldi	r31, 0x00	; 0
    2654:	88 e0       	ldi	r24, 0x08	; 8
    2656:	80 83       	st	Z, r24
    EIMSK = 0x02; //resched generates int1, mask 0x02
    2658:	ed e3       	ldi	r30, 0x3D	; 61
    265a:	f0 e0       	ldi	r31, 0x00	; 0
    265c:	82 e0       	ldi	r24, 0x02	; 2
    265e:	80 83       	st	Z, r24
    EIFR  |= 0x02;
    2660:	ac e3       	ldi	r26, 0x3C	; 60
    2662:	b0 e0       	ldi	r27, 0x00	; 0
    2664:	ec e3       	ldi	r30, 0x3C	; 60
    2666:	f0 e0       	ldi	r31, 0x00	; 0
    2668:	80 81       	ld	r24, Z
    266a:	82 60       	ori	r24, 0x02	; 2
    266c:	8c 93       	st	X, r24

    DDRB = 0x3F;
    266e:	e4 e2       	ldi	r30, 0x24	; 36
    2670:	f0 e0       	ldi	r31, 0x00	; 0
    2672:	8f e3       	ldi	r24, 0x3F	; 63
    2674:	80 83       	st	Z, r24
    PORTB = 0x00;
    2676:	e5 e2       	ldi	r30, 0x25	; 37
    2678:	f0 e0       	ldi	r31, 0x00	; 0
    267a:	10 82       	st	Z, r1
    DDRC = 0x3F;
    267c:	e7 e2       	ldi	r30, 0x27	; 39
    267e:	f0 e0       	ldi	r31, 0x00	; 0
    2680:	8f e3       	ldi	r24, 0x3F	; 63
    2682:	80 83       	st	Z, r24
    PORTC = 0x00;
    2684:	e8 e2       	ldi	r30, 0x28	; 40
    2686:	f0 e0       	ldi	r31, 0x00	; 0
    2688:	10 82       	st	Z, r1
    DDRD = 0xFE;
    268a:	ea e2       	ldi	r30, 0x2A	; 42
    268c:	f0 e0       	ldi	r31, 0x00	; 0
    268e:	8e ef       	ldi	r24, 0xFE	; 254
    2690:	80 83       	st	Z, r24
    PORTD = 0x00;
    2692:	eb e2       	ldi	r30, 0x2B	; 43
    2694:	f0 e0       	ldi	r31, 0x00	; 0
    2696:	10 82       	st	Z, r1

    G1_on();
    2698:	ab e2       	ldi	r26, 0x2B	; 43
    269a:	b0 e0       	ldi	r27, 0x00	; 0
    269c:	eb e2       	ldi	r30, 0x2B	; 43
    269e:	f0 e0       	ldi	r31, 0x00	; 0
    26a0:	80 81       	ld	r24, Z
    26a2:	80 61       	ori	r24, 0x10	; 16
    26a4:	8c 93       	st	X, r24
    G2_on();
    26a6:	ab e2       	ldi	r26, 0x2B	; 43
    26a8:	b0 e0       	ldi	r27, 0x00	; 0
    26aa:	eb e2       	ldi	r30, 0x2B	; 43
    26ac:	f0 e0       	ldi	r31, 0x00	; 0
    26ae:	80 81       	ld	r24, Z
    26b0:	88 60       	ori	r24, 0x08	; 8
    26b2:	8c 93       	st	X, r24
    G3_on();
    26b4:	ab e2       	ldi	r26, 0x2B	; 43
    26b6:	b0 e0       	ldi	r27, 0x00	; 0
    26b8:	eb e2       	ldi	r30, 0x2B	; 43
    26ba:	f0 e0       	ldi	r31, 0x00	; 0
    26bc:	80 81       	ld	r24, Z
    26be:	80 64       	ori	r24, 0x40	; 64
    26c0:	8c 93       	st	X, r24

    proc_init_isr(&proc[0], main0, blink_1, blink_1, 0, &stack[0][127], 1, 2, 0);
    26c2:	8d e6       	ldi	r24, 0x6D	; 109
    26c4:	92 e0       	ldi	r25, 0x02	; 2
    26c6:	dc 01       	movw	r26, r24
    26c8:	a1 58       	subi	r26, 0x81	; 129
    26ca:	bf 4f       	sbci	r27, 0xFF	; 255
    26cc:	89 ea       	ldi	r24, 0xA9	; 169
    26ce:	91 e0       	ldi	r25, 0x01	; 1
    26d0:	23 ea       	ldi	r18, 0xA3	; 163
    26d2:	32 e1       	ldi	r19, 0x12	; 18
    26d4:	4f e2       	ldi	r20, 0x2F	; 47
    26d6:	52 e1       	ldi	r21, 0x12	; 18
    26d8:	ef e2       	ldi	r30, 0x2F	; 47
    26da:	f2 e1       	ldi	r31, 0x12	; 18
    26dc:	b9 01       	movw	r22, r18
    26de:	9f 01       	movw	r18, r30
    26e0:	00 e0       	ldi	r16, 0x00	; 0
    26e2:	10 e0       	ldi	r17, 0x00	; 0
    26e4:	7d 01       	movw	r14, r26
    26e6:	cc 24       	eor	r12, r12
    26e8:	c3 94       	inc	r12
    26ea:	aa 24       	eor	r10, r10
    26ec:	bb 24       	eor	r11, r11
    26ee:	68 94       	set
    26f0:	a1 f8       	bld	r10, 1
    26f2:	88 24       	eor	r8, r8
    26f4:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <proc_init_isr>
    proc_init_isr(&proc[1], main1, blink_2, blink_2, 0, &stack[1][127], 2, 3, 0);
    26f8:	8d e6       	ldi	r24, 0x6D	; 109
    26fa:	92 e0       	ldi	r25, 0x02	; 2
    26fc:	dc 01       	movw	r26, r24
    26fe:	a1 50       	subi	r26, 0x01	; 1
    2700:	bf 4f       	sbci	r27, 0xFF	; 255
    2702:	8a ed       	ldi	r24, 0xDA	; 218
    2704:	91 e0       	ldi	r25, 0x01	; 1
    2706:	2f ea       	ldi	r18, 0xAF	; 175
    2708:	32 e1       	ldi	r19, 0x12	; 18
    270a:	43 e4       	ldi	r20, 0x43	; 67
    270c:	52 e1       	ldi	r21, 0x12	; 18
    270e:	e3 e4       	ldi	r30, 0x43	; 67
    2710:	f2 e1       	ldi	r31, 0x12	; 18
    2712:	b9 01       	movw	r22, r18
    2714:	9f 01       	movw	r18, r30
    2716:	00 e0       	ldi	r16, 0x00	; 0
    2718:	10 e0       	ldi	r17, 0x00	; 0
    271a:	7d 01       	movw	r14, r26
    271c:	cc 24       	eor	r12, r12
    271e:	68 94       	set
    2720:	c1 f8       	bld	r12, 1
    2722:	0f 2e       	mov	r0, r31
    2724:	f3 e0       	ldi	r31, 0x03	; 3
    2726:	af 2e       	mov	r10, r31
    2728:	bb 24       	eor	r11, r11
    272a:	f0 2d       	mov	r31, r0
    272c:	88 24       	eor	r8, r8
    272e:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <proc_init_isr>
    proc_init_isr(&proc[2], main2, blink_3, blink_3, 0, &stack[2][127], 2, 4, 0);// Типа реального времени
    2732:	8d e6       	ldi	r24, 0x6D	; 109
    2734:	92 e0       	ldi	r25, 0x02	; 2
    2736:	dc 01       	movw	r26, r24
    2738:	a1 58       	subi	r26, 0x81	; 129
    273a:	be 4f       	sbci	r27, 0xFE	; 254
    273c:	8b e0       	ldi	r24, 0x0B	; 11
    273e:	92 e0       	ldi	r25, 0x02	; 2
    2740:	2b eb       	ldi	r18, 0xBB	; 187
    2742:	32 e1       	ldi	r19, 0x12	; 18
    2744:	47 e5       	ldi	r20, 0x57	; 87
    2746:	52 e1       	ldi	r21, 0x12	; 18
    2748:	e7 e5       	ldi	r30, 0x57	; 87
    274a:	f2 e1       	ldi	r31, 0x12	; 18
    274c:	b9 01       	movw	r22, r18
    274e:	9f 01       	movw	r18, r30
    2750:	00 e0       	ldi	r16, 0x00	; 0
    2752:	10 e0       	ldi	r17, 0x00	; 0
    2754:	7d 01       	movw	r14, r26
    2756:	cc 24       	eor	r12, r12
    2758:	68 94       	set
    275a:	c1 f8       	bld	r12, 1
    275c:	aa 24       	eor	r10, r10
    275e:	bb 24       	eor	r11, r11
    2760:	68 94       	set
    2762:	a2 f8       	bld	r10, 2
    2764:	88 24       	eor	r8, r8
    2766:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <proc_init_isr>
    proc_init_isr(&proc[3], main3, blink_4, blink_4, 0, &stack[3][127], 3, 4, 0);
    276a:	8d e6       	ldi	r24, 0x6D	; 109
    276c:	92 e0       	ldi	r25, 0x02	; 2
    276e:	dc 01       	movw	r26, r24
    2770:	a1 50       	subi	r26, 0x01	; 1
    2772:	be 4f       	sbci	r27, 0xFE	; 254
    2774:	8c e3       	ldi	r24, 0x3C	; 60
    2776:	92 e0       	ldi	r25, 0x02	; 2
    2778:	26 ed       	ldi	r18, 0xD6	; 214
    277a:	32 e1       	ldi	r19, 0x12	; 18
    277c:	4b e6       	ldi	r20, 0x6B	; 107
    277e:	52 e1       	ldi	r21, 0x12	; 18
    2780:	eb e6       	ldi	r30, 0x6B	; 107
    2782:	f2 e1       	ldi	r31, 0x12	; 18
    2784:	b9 01       	movw	r22, r18
    2786:	9f 01       	movw	r18, r30
    2788:	00 e0       	ldi	r16, 0x00	; 0
    278a:	10 e0       	ldi	r17, 0x00	; 0
    278c:	7d 01       	movw	r14, r26
    278e:	0f 2e       	mov	r0, r31
    2790:	f3 e0       	ldi	r31, 0x03	; 3
    2792:	cf 2e       	mov	r12, r31
    2794:	f0 2d       	mov	r31, r0
    2796:	aa 24       	eor	r10, r10
    2798:	bb 24       	eor	r11, r11
    279a:	68 94       	set
    279c:	a2 f8       	bld	r10, 2
    279e:	88 24       	eor	r8, r8
    27a0:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <proc_init_isr>

    kernel.idle.rs_hook = blink_12;
    27a4:	8f e7       	ldi	r24, 0x7F	; 127
    27a6:	92 e1       	ldi	r25, 0x12	; 18
    27a8:	90 93 9a 01 	sts	0x019A, r25
    27ac:	80 93 99 01 	sts	0x0199, r24
    kernel.idle.sv_hook = blink_12;
    27b0:	8f e7       	ldi	r24, 0x7F	; 127
    27b2:	92 e1       	ldi	r25, 0x12	; 18
    27b4:	90 93 98 01 	sts	0x0198, r25
    27b8:	80 93 97 01 	sts	0x0197, r24

    proc_run_isr(&proc[0]);
    27bc:	89 ea       	ldi	r24, 0xA9	; 169
    27be:	91 e0       	ldi	r25, 0x01	; 1
    27c0:	0e 94 9d 09 	call	0x133a	; 0x133a <proc_run_isr>
    proc_run_isr(&proc[1]);
    27c4:	8a ed       	ldi	r24, 0xDA	; 218
    27c6:	91 e0       	ldi	r25, 0x01	; 1
    27c8:	0e 94 9d 09 	call	0x133a	; 0x133a <proc_run_isr>
    proc_run_isr(&proc[2]);
    27cc:	8b e0       	ldi	r24, 0x0B	; 11
    27ce:	92 e0       	ldi	r25, 0x02	; 2
    27d0:	0e 94 9d 09 	call	0x133a	; 0x133a <proc_run_isr>
    proc_run_isr(&proc[3]);
    27d4:	8c e3       	ldi	r24, 0x3C	; 60
    27d6:	92 e0       	ldi	r25, 0x02	; 2
    27d8:	0e 94 9d 09 	call	0x133a	; 0x133a <proc_run_isr>

    start_bugurt();
    27dc:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <start_bugurt>
    return 0;
    27e0:	80 e0       	ldi	r24, 0x00	; 0
    27e2:	90 e0       	ldi	r25, 0x00	; 0
}
    27e4:	cf 91       	pop	r28
    27e6:	df 91       	pop	r29
    27e8:	1f 91       	pop	r17
    27ea:	0f 91       	pop	r16
    27ec:	ff 90       	pop	r15
    27ee:	ef 90       	pop	r14
    27f0:	cf 90       	pop	r12
    27f2:	bf 90       	pop	r11
    27f4:	af 90       	pop	r10
    27f6:	8f 90       	pop	r8
    27f8:	08 95       	ret

000027fa <_exit>:
    27fa:	f8 94       	cli

000027fc <__stop_program>:
    27fc:	ff cf       	rjmp	.-2      	; 0x27fc <__stop_program>
